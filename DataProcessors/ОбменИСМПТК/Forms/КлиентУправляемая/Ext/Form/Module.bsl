
#Область ОтправкаДокументовИСМПТ

&НаКлиенте
Процедура ОтправитьИсходящиеДокументыИСМПТ(Знач МассивДокументыИСМПТ, Знач ДополнительныеПараметры) Экспорт
	
	Если НЕ КриптопровайдерПодключается() Тогда
		ТекстСообщенияОшибкаКрипты = НСтр("ru='Операция прервана: не получены данные криптопровайдера. Проверьте установку криптобиблиотеки в настройках обмена с ИС МПТ.'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияОшибкаКрипты);		
		Возврат;
	КонецЕсли;
	
	НовыйМассивДокументыИСМПТ = МассивДокументыИСМПТ;
	
	Если НовыйМассивДокументыИСМПТ.Количество()=0 Тогда
		Возврат;
	Иначе
		
		//проверка 		
		Если НЕ ИнтеграцияИСМПТКВызовСервера.ПроверитьВозможностьОтправкиДокументовПоставитьВОчередьОтправкиДокументИСМПТ(НовыйМассивДокументыИСМПТ, ДополнительныеПараметры) Тогда
			Возврат;
		КонецЕсли;
		
		ТипДокументаИСМПТ = ОпределитьТипДокументаПоСсылке(НовыйМассивДокументыИСМПТ[0]);
		ДополнительныеПараметры.Вставить("МассивИсходящихДокументовИСМПТ", НовыйМассивДокументыИСМПТ);
		ДополнительныеПараметры.Вставить("ТипДокументаИСМПТ", ТипДокументаИСМПТ);
		ОтправитьИсходящиеДокументыИСМПТВыборПараметровИСМПТ(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИсходящиеДокументыИСМПТВыборПараметровИСМПТ(ДополнительныеПараметры) Экспорт
	
	МассивИсходящихДокументовИСМПТ = ДополнительныеПараметры.МассивИсходящихДокументовИСМПТ;
	
	// Изменили статус документа, нужно перечитать, если отправка происходит из формы
	
	Если ДополнительныеПараметры.ТипДокументаИСМПТ = "АктПриемаПередачиИСМПТК" Тогда
		
		ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьАктПриемаПередачи());
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОРасхожденииИСМПТК" Тогда
		
		ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОРасхождении());
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОВвозеИзЕАЭСИСМПТК" Тогда
		
		ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзЕАЭС());
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОВвозеИзТретьихСтранИСМПТК" Тогда
		
		ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзТретьихСтран())
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОВводеВОборотИСМПТК" Тогда
		
		ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВводеВОборот());
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОВыводеИзОборотаИСМПТК" Тогда
		
		ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВыводеИзОборота());
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОбЭкспортеЕАЭСИСМПТК" Тогда
		
		ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОбЭкспортеЕАЭС());
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОПриемкеЕАЭСИСМПТК" Тогда
		
		ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияУведомлениеОПриемкеЕАЭС());
		
	КонецЕсли;
	
	КоллекцияСгруппированныхДокументовИСМПТ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыИСМПТПоСтруктурнымЕдиницам(МассивИсходящихДокументовИСМПТ);
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовИСМПТ", КоллекцияСгруппированныхДокументовИСМПТ);
			
	ОтправитьИсходящиеДокументыИСМПТЗавершение(ДополнительныеПараметры);
		
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИсходящиеДокументыИСМПТЗавершение(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ТипДокументаИСМПТ = "АктПриемаПередачиИСМПТК" Тогда
		ОтправитьДокументыАктПриемаПередачи(ДополнительныеПараметры);
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОРасхожденииИСМПТК" Тогда
		ОтправитьДокументыУведомлениеОРасхождении(ДополнительныеПараметры);
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОВводеВОборотИСМПТК" Тогда
		ОтправитьДокументыУведомлениеОВводеВОборот(ДополнительныеПараметры);
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОВыводеИзОборотаИСМПТК" Тогда
		ОтправитьДокументыУведомлениеОВыводеИзОборота(ДополнительныеПараметры);
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОВвозеИзЕАЭСИСМПТК" Тогда
		ОтправитьДокументыУведомлениеОВвозе(ДополнительныеПараметры);
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОВвозеИзТретьихСтранИСМПТК" Тогда
		ОтправитьДокументыУведомлениеОВвозеИзТретьихСтран(ДополнительныеПараметры);
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОбЭкспортеЕАЭСИСМПТК" Тогда
		ОтправитьДокументыУведомлениеОбЭкспортеЕАЭС(ДополнительныеПараметры);
	ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОПриемкеЕАЭСИСМПТК" Тогда
		ОтправитьДокументыУведомлениеОПриемкеЕАЭС(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДокументыАктПриемаПередачи(ДополнительныеПараметры)
	
	КоллекцияСгруппированныхДокументовИСМПТ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ;
	КоллекцияАдресКоллекцииАктовXML = Новый Соответствие;
	КоллекцияПодписейИСМП =  Новый Соответствие;
	
	Попытка
		Для Каждого СгруппированныеИСМПТ Из КоллекцияСгруппированныхДокументовИСМПТ Цикл
			
			СтруктурнаяЕдиница = СгруппированныеИСМПТ.Ключ;
			МассивИСМПТ 	   = СгруппированныеИСМПТ.Значение;
			
			ТипДокумента = "АктПриемаПередачиИСМПТК";
			ТокенАвторизации = ПолучитьТокенАвторизации(СтруктурнаяЕдиница, ТипДокумента);
			
			Если ТокенАвторизации = Неопределено Тогда
				
				ТекстСообщенияТокенНеПолучен = НСтр("ru='Операция прервана: не получены данные ЭЦП.'");
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияТокенНеПолучен);
				Возврат;
				
			КонецЕсли;
			
			//БМ_ИСМПТ ТРЕБУЕТСЯ_РАССМОТРЕНИЕ Передача групповых/транспортных упаковок в Актах
			//дополнить данные актов, если в них есть групповые упаковки
			//ИнтеграцияИСМПТКВызовСервера.ДополнитьГрупповыеУпаковки(МассивИСМПТ, СтруктурнаяЕдиница, ТокенАвторизации);
			
			АдресКоллекцииАктовXML = Неопределено;
			АдресКоллекцииПодписейАктов = Неопределено;
			КоллекцияSignedContentXML = Неопределено;
			
			ИнтеграцияИСМПТКВызовСервера.СоздатьИсходящиеАкты(МассивИСМПТ, Истина, Неопределено, АдресКоллекцииАктовXML, КоллекцияSignedContentXML);
			КоллекцияАдресКоллекцииАктовXML.Вставить(СтруктурнаяЕдиница, АдресКоллекцииАктовXML);
			АдресКоллекцииПодписейАктов = ПодписатьДокументы(АдресКоллекцииАктовXML, СтруктурнаяЕдиница, ТипДокумента);
			КоллекцияПодписейИСМП.Вставить(СтруктурнаяЕдиница, АдресКоллекцииПодписейАктов);

		КонецЦикла;
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	// Создать и отправить коллекцию актов.
	ЗапускатьФоновоеЗадание = ДополнительныеПараметры.ЗапускатьФоновоеЗадание;
	ВыполнятьКриптографическиеОперацииНаКлиенте = ВыполнятьКриптографическиеОперацииНаКлиенте(); 
	МассивИсходящихАктов = ДополнительныеПараметры.МассивИсходящихДокументовИСМПТ;
	Если ВыполнятьКриптографическиеОперацииНаКлиенте Тогда
		
		Попытка
			Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьИсходящиеАкты(КоллекцияПодписейИСМП, ТокенАвторизации);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
		Для Каждого СтрокаАдресКоллекцииАктовXML Из КоллекцияАдресКоллекцииАктовXML Цикл
			
			АдресКоллекцииАктовXML = СтрокаАдресКоллекцииАктовXML.Значение;
			
			// Принудительное удаление, иначе значение не удалится.	
			УдалитьИзВременногоХранилища(АдресКоллекцииАктовXML);
			
		КонецЦикла;
					
	КонецЕсли;
	
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьАктПриемаПередачи(), МассивИсходящихАктов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДокументыУведомлениеОРасхождении(ДополнительныеПараметры)
	
	КоллекцияСгруппированныхДокументовИСМПТ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ;
	КоллекцияАдресКоллекцииУведомленийXML = Новый Соответствие;
	КоллекцияПодписейИСМП =  Новый Соответствие;
	
	Попытка
		Для Каждого СгруппированныеИСМПТ Из КоллекцияСгруппированныхДокументовИСМПТ Цикл
			
			СтруктурнаяЕдиница = СгруппированныеИСМПТ.Ключ;
			МассивИСМПТ = СгруппированныеИСМПТ.Значение;
			
			ТипДокумента = "УведомлениеОРасхожденииИСМПТК";
			ТокенАвторизации = ПолучитьТокенАвторизации(СтруктурнаяЕдиница, ТипДокумента);
			
			Если ТокенАвторизации = Неопределено Тогда
				
				ТекстСообщенияТокенНеПолучен = НСтр("ru='Операция прервана: не получены данные ЭЦП.'");
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияТокенНеПолучен);
				Возврат;
				
			КонецЕсли;
			
			АдресКоллекцииУведомленийXML = Неопределено;
			АдресКоллекцииПодписейУведомлений = Неопределено;
			КоллекцияSignedContentXML = Неопределено;
			
			ИнтеграцияИСМПТКВызовСервера.СоздатьИсходящиеУведомления(МассивИСМПТ, Истина, Неопределено, АдресКоллекцииУведомленийXML, КоллекцияSignedContentXML);
			КоллекцияАдресКоллекцииУведомленийXML.Вставить(СтруктурнаяЕдиница, АдресКоллекцииУведомленийXML);
			АдресКоллекцииПодписейУведомлений = ПодписатьДокументы(АдресКоллекцииУведомленийXML, СтруктурнаяЕдиница, ТипДокумента);
			КоллекцияПодписейИСМП.Вставить(СтруктурнаяЕдиница, АдресКоллекцииПодписейУведомлений);

		КонецЦикла;
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	// Создать и отправить коллекцию актов.
	ЗапускатьФоновоеЗадание = ДополнительныеПараметры.ЗапускатьФоновоеЗадание;
	ВыполнятьКриптографическиеОперацииНаКлиенте = ВыполнятьКриптографическиеОперацииНаКлиенте(); 
	МассивИсходящихАктов = ДополнительныеПараметры.МассивИсходящихДокументовИСМПТ;
	Если ВыполнятьКриптографическиеОперацииНаКлиенте Тогда
		
		Попытка
			Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьИсходящиеУведомления("", КоллекцияПодписейИСМП, ТокенАвторизации);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
		Для Каждого СтрокаАдресКоллекцииАктовXML Из КоллекцияАдресКоллекцииУведомленийXML Цикл
			
			АдресКоллекцииАктовXML = СтрокаАдресКоллекцииАктовXML.Значение;
			
			// Принудительное удаление, иначе значение не удалится.	
			УдалитьИзВременногоХранилища(АдресКоллекцииАктовXML);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОРасхождении(), МассивИсходящихАктов);
		
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДокументыУведомлениеОВводеВОборот(ДополнительныеПараметры)
	
	КоллекцияСгруппированныхДокументовИСМПТ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ;
	КоллекцияАдресКоллекцииУведомленийXML = Новый Соответствие;
	КоллекцияПодписейИСМП =  Новый Соответствие;
	
	Попытка
		Для Каждого СгруппированныеИСМПТ Из КоллекцияСгруппированныхДокументовИСМПТ Цикл
			
			СтруктурнаяЕдиница = СгруппированныеИСМПТ.Ключ;
			МассивИСМПТ = СгруппированныеИСМПТ.Значение;
			
			ТипДокумента = "УведомлениеОВводеВОборотИСМПТК";
			ТокенАвторизации = ПолучитьТокенАвторизации(СтруктурнаяЕдиница, ТипДокумента);
			
			Если ТокенАвторизации = Неопределено Тогда
				
				ТекстСообщенияТокенНеПолучен = НСтр("ru='Операция прервана: не получены данные ЭЦП.'");
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияТокенНеПолучен);
				Возврат;
				
			КонецЕсли;
			
			АдресКоллекцииУведомленийXML = Неопределено;
			АдресКоллекцииПодписейУведомлений = Неопределено;
			КоллекцияSignedContentXML = Неопределено;
			
			ИнтеграцияИСМПТКВызовСервера.СоздатьИсходящиеУведомленияОВводеВОборот(МассивИСМПТ, Истина, Неопределено, АдресКоллекцииУведомленийXML, КоллекцияSignedContentXML);
			КоллекцияАдресКоллекцииУведомленийXML.Вставить(СтруктурнаяЕдиница, АдресКоллекцииУведомленийXML);
			АдресКоллекцииПодписейУведомлений = ПодписатьДокументы(АдресКоллекцииУведомленийXML, СтруктурнаяЕдиница, ТипДокумента);
			КоллекцияПодписейИСМП.Вставить(СтруктурнаяЕдиница, АдресКоллекцииПодписейУведомлений);
			
		КонецЦикла;
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
		
	// Создать и отправить коллекцию актов.
	ЗапускатьФоновоеЗадание = ДополнительныеПараметры.ЗапускатьФоновоеЗадание;
	ВыполнятьКриптографическиеОперацииНаКлиенте = ВыполнятьКриптографическиеОперацииНаКлиенте(); 
	МассивИсходящихУведомлений = ДополнительныеПараметры.МассивИсходящихДокументовИСМПТ;
	Если ВыполнятьКриптографическиеОперацииНаКлиенте Тогда
				
		// Если отправляем из формы списка, делаем фоновую отправку
		Если ЗапускатьФоновоеЗадание Тогда
			
		Иначе			
			Попытка
				Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьИсходящиеУведомленияВВО(КоллекцияАдресКоллекцииУведомленийXML, КоллекцияПодписейИСМП, ТокенАвторизации);
			Исключение
				ВызватьИсключение ОписаниеОшибки();
			КонецПопытки;
			
		КонецЕсли;
		
		Для Каждого СтрокаАдресКоллекцииУведомленийXML Из КоллекцияАдресКоллекцииУведомленийXML Цикл
			
			АдресКоллекцииУведомленийXML = СтрокаАдресКоллекцииУведомленийXML.Значение;
			
			// Принудительное удаление, иначе значение не удалится.	
			УдалитьИзВременногоХранилища(АдресКоллекцииУведомленийXML);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВводеВОборот(), МассивИсходящихУведомлений);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДокументыУведомлениеОВыводеИзОборота(ДополнительныеПараметры)
	
	КоллекцияСгруппированныхДокументовИСМПТ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ;
	КоллекцияАдресКоллекцииУведомленийXML = Новый Соответствие;
	КоллекцияПодписейИСМП =  Новый Соответствие;
	
	Попытка
		Для Каждого СгруппированныеИСМПТ Из КоллекцияСгруппированныхДокументовИСМПТ Цикл
			
			СтруктурнаяЕдиница = СгруппированныеИСМПТ.Ключ;
			МассивИСМПТ = СгруппированныеИСМПТ.Значение;
			
			ТипДокумента = "УведомлениеОВыводеИзОборотаИСМПТК";
			ТокенАвторизации = ПолучитьТокенАвторизации(СтруктурнаяЕдиница, ТипДокумента);
			
			Если ТокенАвторизации = Неопределено Тогда
				
				ТекстСообщенияТокенНеПолучен = НСтр("ru='Операция прервана: не получены данные ЭЦП.'");
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияТокенНеПолучен);
				Возврат;
				
			КонецЕсли;
			
			АдресКоллекцииУведомленийXML = Неопределено;
			АдресКоллекцииПодписейУведомлений = Неопределено;
			КоллекцияSignedContentXML = Неопределено;
			
			ИнтеграцияИСМПТКВызовСервера.СоздатьИсходящиеУведомленияОВыводеИзОборота(МассивИСМПТ, Истина, Неопределено, АдресКоллекцииУведомленийXML, КоллекцияSignedContentXML);
			КоллекцияАдресКоллекцииУведомленийXML.Вставить(СтруктурнаяЕдиница, АдресКоллекцииУведомленийXML);
			АдресКоллекцииПодписейУведомлений = ПодписатьДокументы(АдресКоллекцииУведомленийXML, СтруктурнаяЕдиница, ТипДокумента);
			КоллекцияПодписейИСМП.Вставить(СтруктурнаяЕдиница, АдресКоллекцииПодписейУведомлений);
			
		КонецЦикла;
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
		
	// Создать и отправить коллекцию актов.
	ЗапускатьФоновоеЗадание = ДополнительныеПараметры.ЗапускатьФоновоеЗадание;
	ВыполнятьКриптографическиеОперацииНаКлиенте = ВыполнятьКриптографическиеОперацииНаКлиенте(); 
	МассивИсходящихУведомлений = ДополнительныеПараметры.МассивИсходящихДокументовИСМПТ;
	Если ВыполнятьКриптографическиеОперацииНаКлиенте Тогда
				
		// Если отправляем из формы списка, делаем фоновую отправку
		Если ЗапускатьФоновоеЗадание Тогда
			
		Иначе			
			Попытка
				Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьИсходящиеУведомленияВИО(КоллекцияАдресКоллекцииУведомленийXML, КоллекцияПодписейИСМП, ТокенАвторизации);
			Исключение
				ВызватьИсключение ОписаниеОшибки();
			КонецПопытки;
			
		КонецЕсли;
		
		Для Каждого СтрокаАдресКоллекцииУведомленийXML Из КоллекцияАдресКоллекцииУведомленийXML Цикл
			
			АдресКоллекцииУведомленийXML = СтрокаАдресКоллекцииУведомленийXML.Значение;
			
			// Принудительное удаление, иначе значение не удалится.	
			УдалитьИзВременногоХранилища(АдресКоллекцииУведомленийXML);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВыводеИзОборота(), МассивИсходящихУведомлений);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДокументыУведомлениеОВвозе(ДополнительныеПараметры)
	
	КоллекцияСгруппированныхДокументовИСМПТ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ;
	КоллекцияАдресКоллекцииУведомленийXML = Новый Соответствие;
	КоллекцияПодписейИСМП =  Новый Соответствие;
	
	Попытка
		Для Каждого СгруппированныеИСМПТ Из КоллекцияСгруппированныхДокументовИСМПТ Цикл
			
			СтруктурнаяЕдиница = СгруппированныеИСМПТ.Ключ;
			МассивИСМПТ = СгруппированныеИСМПТ.Значение;
			
			ТипДокумента = "УведомлениеОВвозеИзЕАЭСИСМПТК";
			ТокенАвторизации = ПолучитьТокенАвторизации(СтруктурнаяЕдиница, ТипДокумента);
			
			Если ТокенАвторизации = Неопределено Тогда
				
				ТекстСообщенияТокенНеПолучен = НСтр("ru='Операция прервана: не получены данные ЭЦП.'");
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияТокенНеПолучен);
				Возврат;
				
			КонецЕсли;
			
			АдресКоллекцииУведомленийXML = Неопределено;
			АдресКоллекцииПодписейУведомлений = Неопределено;
			КоллекцияSignedContentXML = Неопределено;
			
			ИнтеграцияИСМПТКВызовСервера.СоздатьИсходящиеУведомленияОВвозе(МассивИСМПТ, Истина, Неопределено, АдресКоллекцииУведомленийXML, КоллекцияSignedContentXML);
			КоллекцияАдресКоллекцииУведомленийXML.Вставить(СтруктурнаяЕдиница, АдресКоллекцииУведомленийXML);
			АдресКоллекцииПодписейУведомлений = ПодписатьДокументы(АдресКоллекцииУведомленийXML, СтруктурнаяЕдиница, ТипДокумента);
			КоллекцияПодписейИСМП.Вставить(СтруктурнаяЕдиница, АдресКоллекцииПодписейУведомлений);
			
		КонецЦикла;
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
		
	// Создать и отправить коллекцию актов.
	ЗапускатьФоновоеЗадание = ДополнительныеПараметры.ЗапускатьФоновоеЗадание;
	ВыполнятьКриптографическиеОперацииНаКлиенте = ВыполнятьКриптографическиеОперацииНаКлиенте(); 
	МассивИсходящихУведомлений = ДополнительныеПараметры.МассивИсходящихДокументовИСМПТ;
	Если ВыполнятьКриптографическиеОперацииНаКлиенте Тогда
				
		// Если отправляем из формы списка, делаем фоновую отправку
		Если ЗапускатьФоновоеЗадание Тогда
			
		Иначе			
			Попытка
				Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьУведомленияОВвозе(КоллекцияАдресКоллекцииУведомленийXML, КоллекцияПодписейИСМП, ТокенАвторизации);
			Исключение
				ВызватьИсключение ОписаниеОшибки();
			КонецПопытки;
			
		КонецЕсли;
		
		Для Каждого СтрокаАдресКоллекцииУведомленийXML Из КоллекцияАдресКоллекцииУведомленийXML Цикл
			
			АдресКоллекцииУведомленийXML = СтрокаАдресКоллекцииУведомленийXML.Значение;
			
			// Принудительное удаление, иначе значение не удалится.	
			УдалитьИзВременногоХранилища(АдресКоллекцииУведомленийXML);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзЕАЭС(), МассивИсходящихУведомлений);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДокументыУведомлениеОВвозеИзТретьихСтран(ДополнительныеПараметры)
	
	КоллекцияСгруппированныхДокументовИСМПТ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ;
	КоллекцияАдресКоллекцииУведомленийXML = Новый Соответствие;
	КоллекцияПодписейИСМП =  Новый Соответствие;
	
	Попытка
		Для Каждого СгруппированныеИСМПТ Из КоллекцияСгруппированныхДокументовИСМПТ Цикл
			
			СтруктурнаяЕдиница = СгруппированныеИСМПТ.Ключ;
			МассивИСМПТ = СгруппированныеИСМПТ.Значение;
			
			ТипДокумента = "УведомлениеОВвозеИзТретьихСтранИСМПТК";
			ТокенАвторизации = ПолучитьТокенАвторизации(СтруктурнаяЕдиница, ТипДокумента);
			
			Если ТокенАвторизации = Неопределено Тогда
				
				ТекстСообщенияТокенНеПолучен = НСтр("ru='Операция прервана: не получены данные ЭЦП.'");
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияТокенНеПолучен);
				Возврат;
				
			КонецЕсли;
			
			//получение вложенных групповых кодов
			СоставВложенныхКодов = ИнтеграцияИСМПТКВызовСервера.ПолучитьДанныеПоГрупповымКодамМаркировки(МассивИСМПТ, СтруктурнаяЕдиница, ТокенАвторизации);
			Если Не ПустаяСтрока(СоставВложенныхКодов.ТекстОшибки) Тогда
				//при получении групповых кодов возникли ошибки
				ТекстСообщения = НСтр("ru='Операция прервана: не удалось получить вложенные коды групповых упаковок.'");
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;
			
			АдресКоллекцииУведомленийXML = Неопределено;
			АдресКоллекцииПодписейУведомлений = Неопределено;
			КоллекцияSignedContentXML = Неопределено;
			
			ИнтеграцияИСМПТКВызовСервера.СоздатьИсходящиеУведомленияОВвозеИзТретьихСтран(МассивИСМПТ, Истина, Неопределено, 
				АдресКоллекцииУведомленийXML, КоллекцияSignedContentXML, СоставВложенныхКодов);
			КоллекцияАдресКоллекцииУведомленийXML.Вставить(СтруктурнаяЕдиница, АдресКоллекцииУведомленийXML);
			АдресКоллекцииПодписейУведомлений = ПодписатьДокументы(АдресКоллекцииУведомленийXML, СтруктурнаяЕдиница, ТипДокумента);
			КоллекцияПодписейИСМП.Вставить(СтруктурнаяЕдиница, АдресКоллекцииПодписейУведомлений);
			
		КонецЦикла;
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
		
	// Создать и отправить коллекцию актов.
	ЗапускатьФоновоеЗадание = ДополнительныеПараметры.ЗапускатьФоновоеЗадание;
	ВыполнятьКриптографическиеОперацииНаКлиенте = ВыполнятьКриптографическиеОперацииНаКлиенте(); 
	МассивИсходящихУведомлений = ДополнительныеПараметры.МассивИсходящихДокументовИСМПТ;
	Если ВыполнятьКриптографическиеОперацииНаКлиенте Тогда
				
		// Если отправляем из формы списка, делаем фоновую отправку
		Если ЗапускатьФоновоеЗадание Тогда
			
		Иначе			
			Попытка
				Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьУведомленияОВвозеИзТретьихСтран(КоллекцияАдресКоллекцииУведомленийXML, КоллекцияПодписейИСМП, ТокенАвторизации);
			Исключение
				ВызватьИсключение ОписаниеОшибки();
			КонецПопытки;
			
		КонецЕсли;
		
		Для Каждого СтрокаАдресКоллекцииУведомленийXML Из КоллекцияАдресКоллекцииУведомленийXML Цикл
			
			АдресКоллекцииУведомленийXML = СтрокаАдресКоллекцииУведомленийXML.Значение;
			
			// Принудительное удаление, иначе значение не удалится.	
			УдалитьИзВременногоХранилища(АдресКоллекцииУведомленийXML);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзТретьихСтран(), МассивИсходящихУведомлений);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДокументыУведомлениеОбЭкспортеЕАЭС(ДополнительныеПараметры)
	
	КоллекцияСгруппированныхДокументовИСМПТ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ;
	КоллекцияАдресКоллекцииУведомленийXML = Новый Соответствие;
	КоллекцияПодписейИСМП =  Новый Соответствие;
	
	Попытка
		Для Каждого СгруппированныеИСМПТ Из КоллекцияСгруппированныхДокументовИСМПТ Цикл
			
			СтруктурнаяЕдиница = СгруппированныеИСМПТ.Ключ;
			МассивИСМПТ = СгруппированныеИСМПТ.Значение;
			
			ТипДокумента = "УведомлениеОбЭкспортеЕАЭСИСМПТК";
			ТокенАвторизации = ПолучитьТокенАвторизации(СтруктурнаяЕдиница, ТипДокумента);
			
			Если ТокенАвторизации = Неопределено Тогда
				
				ТекстСообщенияТокенНеПолучен = НСтр("ru='Операция прервана: не получены данные ЭЦП.'");
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияТокенНеПолучен);
				Возврат;
				
			КонецЕсли;
			
			АдресКоллекцииУведомленийXML = Неопределено;
			АдресКоллекцииПодписейУведомлений = Неопределено;
			КоллекцияSignedContentXML = Неопределено;
			
			ИнтеграцияИСМПТКВызовСервера.СоздатьИсходящиеУведомленияОбЭкспортеЕАЭС(МассивИСМПТ, Истина, Неопределено, АдресКоллекцииУведомленийXML, КоллекцияSignedContentXML);
			КоллекцияАдресКоллекцииУведомленийXML.Вставить(СтруктурнаяЕдиница, АдресКоллекцииУведомленийXML);
			АдресКоллекцииПодписейУведомлений = ПодписатьДокументы(АдресКоллекцииУведомленийXML, СтруктурнаяЕдиница, ТипДокумента);
			КоллекцияПодписейИСМП.Вставить(СтруктурнаяЕдиница, АдресКоллекцииПодписейУведомлений);
			
		КонецЦикла;
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
		
	// Создать и отправить коллекцию актов.
	ЗапускатьФоновоеЗадание = ДополнительныеПараметры.ЗапускатьФоновоеЗадание;
	ВыполнятьКриптографическиеОперацииНаКлиенте = ВыполнятьКриптографическиеОперацииНаКлиенте(); 
	МассивИсходящихУведомлений = ДополнительныеПараметры.МассивИсходящихДокументовИСМПТ;
	Если ВыполнятьКриптографическиеОперацииНаКлиенте Тогда
				
		// Если отправляем из формы списка, делаем фоновую отправку
		Если ЗапускатьФоновоеЗадание Тогда
			
		Иначе			
			Попытка
				Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьУведомленияОбЭкспортеЕАЭС(КоллекцияАдресКоллекцииУведомленийXML, КоллекцияПодписейИСМП, ТокенАвторизации);
			Исключение
				ВызватьИсключение ОписаниеОшибки();
			КонецПопытки;
			
		КонецЕсли;
		
		Для Каждого СтрокаАдресКоллекцииУведомленийXML Из КоллекцияАдресКоллекцииУведомленийXML Цикл
			
			АдресКоллекцииУведомленийXML = СтрокаАдресКоллекцииУведомленийXML.Значение;
			
			// Принудительное удаление, иначе значение не удалится.	
			УдалитьИзВременногоХранилища(АдресКоллекцииУведомленийXML);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОбЭкспортеЕАЭС(), МассивИсходящихУведомлений);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДокументыУведомлениеОПриемкеЕАЭС(ДополнительныеПараметры)
	
	КоллекцияСгруппированныхДокументовИСМПТ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ;
	КоллекцияАдресКоллекцииУведомленийXML = Новый Соответствие;
	КоллекцияПодписейИСМП =  Новый Соответствие;
	
	Попытка
		Для Каждого СгруппированныеИСМПТ Из КоллекцияСгруппированныхДокументовИСМПТ Цикл
			
			СтруктурнаяЕдиница = СгруппированныеИСМПТ.Ключ;
			МассивИСМПТ = СгруппированныеИСМПТ.Значение;
			
			ТипДокумента = "УведомлениеОПриемкеЕАЭСИСМПТК";
			ТокенАвторизации = ПолучитьТокенАвторизации(СтруктурнаяЕдиница, ТипДокумента);
			
			Если ТокенАвторизации = Неопределено Тогда
				
				ТекстСообщенияТокенНеПолучен = НСтр("ru='Операция прервана: не получены данные ЭЦП.'");
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияТокенНеПолучен);
				Возврат;
				
			КонецЕсли;
			
			АдресКоллекцииУведомленийXML = Неопределено;
			АдресКоллекцииПодписейУведомлений = Неопределено;
			КоллекцияSignedContentXML = Неопределено;
			
			ИнтеграцияИСМПТКВызовСервера.СоздатьИсходящиеУведомлениеОПриемкеЕАЭС(МассивИСМПТ, Истина, Неопределено, АдресКоллекцииУведомленийXML, КоллекцияSignedContentXML);
			КоллекцияАдресКоллекцииУведомленийXML.Вставить(СтруктурнаяЕдиница, АдресКоллекцииУведомленийXML);
			АдресКоллекцииПодписейУведомлений = ПодписатьДокументы(АдресКоллекцииУведомленийXML, СтруктурнаяЕдиница, ТипДокумента);
			КоллекцияПодписейИСМП.Вставить(СтруктурнаяЕдиница, АдресКоллекцииПодписейУведомлений);
			
		КонецЦикла;
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
		
	// Создать и отправить коллекцию актов.
	ЗапускатьФоновоеЗадание = ДополнительныеПараметры.ЗапускатьФоновоеЗадание;
	ВыполнятьКриптографическиеОперацииНаКлиенте = ВыполнятьКриптографическиеОперацииНаКлиенте(); 
	МассивИсходящихУведомлений = ДополнительныеПараметры.МассивИсходящихДокументовИСМПТ;
	Если ВыполнятьКриптографическиеОперацииНаКлиенте Тогда
				
		// Если отправляем из формы списка, делаем фоновую отправку
		Если ЗапускатьФоновоеЗадание Тогда
			
		Иначе			
			Попытка
				Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьУведомлениеОПриемкеЕАЭС(КоллекцияАдресКоллекцииУведомленийXML, КоллекцияПодписейИСМП, ТокенАвторизации);
			Исключение
				ВызватьИсключение ОписаниеОшибки();
			КонецПопытки;
			
		КонецЕсли;
		
		Для Каждого СтрокаАдресКоллекцииУведомленийXML Из КоллекцияАдресКоллекцииУведомленийXML Цикл
			
			АдресКоллекцииУведомленийXML = СтрокаАдресКоллекцииУведомленийXML.Значение;
			
			// Принудительное удаление, иначе значение не удалится.	
			УдалитьИзВременногоХранилища(АдресКоллекцииУведомленийXML);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОбЭкспортеЕАЭС(), МассивИсходящихУведомлений);
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаДокументовСУЗ

&НаКлиенте
Процедура ОтправитьИсходящиеДокументыСУЗ(Знач МассивДокументыСУЗ, Знач ДополнительныеПараметры) Экспорт
	
	НовыйМассивДокументыСУЗ = МассивДокументыСУЗ;
	
	Если НовыйМассивДокументыСУЗ.Количество() = 0 Тогда
		Возврат;
	Иначе
		
		Если НЕ ИнтеграцияИСМПТКВызовСервера.ПроверитьВозможностьОтправкиДокументовПоставитьВОчередьОтправкиДокументСУЗ(НовыйМассивДокументыСУЗ, ДополнительныеПараметры) Тогда
			Возврат;
		КонецЕсли;
		
		ТипДокументаСУЗ = ОпределитьТипДокументаПоСсылке(НовыйМассивДокументыСУЗ[0]);
		ДополнительныеПараметры.Вставить("МассивИсходящихДокументовСУЗ", НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("ТипДокументаСУЗ", ТипДокументаСУЗ);
		
		КоллекцияСгруппированныхДокументовСУЗ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыСУЗПоСтруктурнымЕдиницам(НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовСУЗ", КоллекцияСгруппированныхДокументовСУЗ);
		
		ОтправитьИсходящиеДокументыСУЗЗавершение(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИсходящиеДокументыСУЗЗавершение(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ТипДокументаСУЗ = "ЗаказКодовМаркировкиСУЗИСМПТК" Тогда
		
		ОтправитьДокументыЗаказНаЭмиссиюКодовМаркировкиСУЗ(ДополнительныеПараметры);
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаСУЗ = "АгрегацияКодовМаркировкиСУЗИСМПТК" Тогда
		
		ОтправитьДокументыАгрегацииКодовМаркировкиСУЗ(ДополнительныеПараметры);
		
	ИначеЕсли ДополнительныеПараметры.ТипДокументаСУЗ = "НанесениеКодовМаркировкиСУЗИСМПТК" Тогда
		
		ОтправитьДокументыНанесенияКодовМаркировкиСУЗ(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДокументыЗаказНаЭмиссиюКодовМаркировкиСУЗ(ДополнительныеПараметры) Экспорт
	
	КоллекцияСгруппированныхДокументовСУЗ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовСУЗ;
	
	Для Каждого СгруппированныеСУЗ Из КоллекцияСгруппированныхДокументовСУЗ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеСУЗ.Ключ;
		МассивСУЗ = СгруппированныеСУЗ.Значение;
		
		Попытка
			Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьЗаказНаЭмиссиюКодовМаркировки(МассивСУЗ, СтруктурнаяЕдиница);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;
	
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьЗаказНаЭмиссию(), МассивСУЗ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДокументыАгрегацииКодовМаркировкиСУЗ(ДополнительныеПараметры) Экспорт
	
	КоллекцияСгруппированныхДокументовСУЗ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовСУЗ;
	
	Для Каждого СгруппированныеСУЗ Из КоллекцияСгруппированныхДокументовСУЗ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеСУЗ.Ключ;
		МассивСУЗ = СгруппированныеСУЗ.Значение;
		
		Попытка
			Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьАгрегациюКодовМаркировки(МассивСУЗ, СтруктурнаяЕдиница);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;
	
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьАгрегацияКодовМаркировки(), МассивСУЗ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДокументыНанесенияКодовМаркировкиСУЗ(ДополнительныеПараметры) Экспорт
	
	КоллекцияСгруппированныхДокументовСУЗ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовСУЗ;
	
	Для Каждого СгруппированныеСУЗ Из КоллекцияСгруппированныхДокументовСУЗ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеСУЗ.Ключ;
		МассивСУЗ = СгруппированныеСУЗ.Значение;
		
		Попытка
			Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьНанесениеКодовМаркировки(МассивСУЗ, СтруктурнаяЕдиница);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;
	
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьНанесениеКодовМаркировки(), МассивСУЗ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатусЗаказаЭмиссииКМ(Знач МассивДокументыСУЗ, Знач ДополнительныеПараметры) Экспорт

	НовыйМассивДокументыСУЗ = МассивДокументыСУЗ;
	
	Если НовыйМассивДокументыСУЗ.Количество() = 0 Тогда
		Возврат;
	Иначе
		
		ТипДокументаСУЗ = ОпределитьТипДокументаПоСсылке(НовыйМассивДокументыСУЗ[0]);
		ДополнительныеПараметры.Вставить("МассивИсходящихДокументовСУЗ", НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("ТипДокументаСУЗ", ТипДокументаСУЗ);
		
		КоллекцияСгруппированныхДокументовСУЗ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыСУЗПоСтруктурнымЕдиницам(НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовСУЗ", КоллекцияСгруппированныхДокументовСУЗ);
		
		ПолучитьСтатусыЗаказовКМ(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПричинуОтказаЗаказаЭмиссииКМ(Знач МассивДокументыСУЗ, Знач ДополнительныеПараметры) Экспорт

	НовыйМассивДокументыСУЗ = МассивДокументыСУЗ;
	
	Если НовыйМассивДокументыСУЗ.Количество() = 0 Тогда
		Возврат;
	Иначе
		
		ТипДокументаСУЗ = ОпределитьТипДокументаПоСсылке(НовыйМассивДокументыСУЗ[0]);
		ДополнительныеПараметры.Вставить("МассивИсходящихДокументовСУЗ", НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("ТипДокументаСУЗ", ТипДокументаСУЗ);
		
		КоллекцияСгруппированныхДокументовСУЗ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыСУЗПоСтруктурнымЕдиницам(НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовСУЗ", КоллекцияСгруппированныхДокументовСУЗ);
		
		ПолучитьПричиныОтказаЗаказовКМ(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатусыЗаказовКМ(ДополнительныеПараметры) Экспорт
	
	КоллекцияСгруппированныхДокументовСУЗ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовСУЗ;
	
	Для Каждого СгруппированныеСУЗ Из КоллекцияСгруппированныхДокументовСУЗ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеСУЗ.Ключ;
		МассивСУЗ 		   = СгруппированныеСУЗ.Значение;
		
		Попытка
			Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьЗапросСтатусовЗаказовКМ(МассивСУЗ, СтруктурнаяЕдиница);
			ИнтеграцияИСМПТКВызовСервера.ОтправитьЗапросПричинОтказаЗаказовКМ(МассивСУЗ, СтруктурнаяЕдиница);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;
	
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияОбновлениеСтатусаЗаказНаЭмиссию(), МассивСУЗ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПричиныОтказаЗаказовКМ(ДополнительныеПараметры) Экспорт
	
	КоллекцияСгруппированныхДокументовСУЗ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовСУЗ;
	
	Для Каждого СгруппированныеСУЗ Из КоллекцияСгруппированныхДокументовСУЗ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеСУЗ.Ключ;
		МассивСУЗ = СгруппированныеСУЗ.Значение;
		
		Попытка
			Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьЗапросПричинОтказаЗаказовКМ(МассивСУЗ, СтруктурнаяЕдиница);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;
	
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияПолучениеПричиныОтказаЗаказНаЭмиссию(), МассивСУЗ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКМПоЗаказуНаЭмиссию(Знач МассивДокументыСУЗ, Знач ДополнительныеПараметры) Экспорт

	НовыйМассивДокументыСУЗ = МассивДокументыСУЗ;
	
	Если НовыйМассивДокументыСУЗ.Количество() = 0 Тогда
		Возврат;
	Иначе
		
		ТипДокументаСУЗ = ОпределитьТипДокументаПоСсылке(НовыйМассивДокументыСУЗ[0]);
		ДополнительныеПараметры.Вставить("МассивИсходящихДокументовСУЗ", НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("ТипДокументаСУЗ", ТипДокументаСУЗ);
		
		КоллекцияСгруппированныхДокументовСУЗ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыСУЗПоСтруктурнымЕдиницам(НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовСУЗ", КоллекцияСгруппированныхДокументовСУЗ);
		
		ПолучитьКМПоЗаказуНаЭмиссиюЗавершение(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКМПоЗаказуНаЭмиссиюЗавершение(Знач ДополнительныеПараметры) Экспорт

	КоллекцияСгруппированныхДокументовСУЗ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовСУЗ;
	РазмерБлокаКодов 	= ?(ДополнительныеПараметры.Свойство("РазмерБлокаКодов"), ДополнительныеПараметры.РазмерБлокаКодов, 0);
	МассивКодовЗаказа 	= ?(ДополнительныеПараметры.Свойство("МассивКодов"), ДополнительныеПараметры.МассивКодов, Неопределено);
	
	Для Каждого СгруппированныеСУЗ Из КоллекцияСгруппированныхДокументовСУЗ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеСУЗ.Ключ;
		МассивСУЗ = СгруппированныеСУЗ.Значение;
		
		Попытка
			Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьЗапросКМПоЗаказуНаЭмиссию(МассивСУЗ, СтруктурнаяЕдиница, РазмерБлокаКодов, МассивКодовЗаказа);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
			
	КонецЦикла;
	
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьЗаказНаЭмиссию(), МассивСУЗ);
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияПолучениеКмПоЗаказу(),  Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтатусGTINПоЗаказуНаЭмиссию(Знач ЗаказНаЭмиссию, Знач GTIN) Экспорт
	
	Попытка
		
		Возврат ИнтеграцияИСМПТКВызовСервера.ПолучитьСтатусGTINПоЗаказуНаЭмиссию(ЗаказНаЭмиссию, GTIN);
		
	Исключение
		
		ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьЗаказНаЭмиссию(), ЗаказНаЭмиссию);
		
		ВызватьИсключение ОписаниеОшибки();
		
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ПовторноПолучитьКМПоЗаказуНаЭмиссию(Знач МассивДокументыСУЗ, Знач ДополнительныеПараметры) Экспорт

	НовыйМассивДокументыСУЗ = МассивДокументыСУЗ;
	
	Если НовыйМассивДокументыСУЗ.Количество() = 0 Тогда
		Возврат;
	Иначе
		
		ТипДокументаСУЗ = ОпределитьТипДокументаПоСсылке(НовыйМассивДокументыСУЗ[0]);
		ДополнительныеПараметры.Вставить("МассивИсходящихДокументовСУЗ", НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("ТипДокументаСУЗ", ТипДокументаСУЗ);
		
		КоллекцияСгруппированныхДокументовСУЗ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыСУЗПоСтруктурнымЕдиницам(НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовСУЗ", КоллекцияСгруппированныхДокументовСУЗ);
		
		ПовторноПолучитьКМПоЗаказуНаЭмиссиюЗавершение(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторноПолучитьКМПоЗаказуНаЭмиссиюЗавершение(Знач ДополнительныеПараметры) Экспорт

	КоллекцияСгруппированныхДокументовСУЗ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовСУЗ;
	
	Для Каждого СгруппированныеСУЗ Из КоллекцияСгруппированныхДокументовСУЗ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеСУЗ.Ключ;
		МассивСУЗ = СгруппированныеСУЗ.Значение;
		
		Попытка
			Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьПовторныйЗапросКМПоЗаказуНаЭмиссию(МассивСУЗ, СтруктурнаяЕдиница);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;
	
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьЗаказНаЭмиссию(), МассивСУЗ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатусАгрегацииКМ(Знач МассивДокументыСУЗ, Знач ДополнительныеПараметры) Экспорт
	
	НовыйМассивДокументыСУЗ = МассивДокументыСУЗ;
	
	Если НовыйМассивДокументыСУЗ.Количество() = 0 Тогда
		Возврат;
	Иначе
		
		ТипДокументаСУЗ = ОпределитьТипДокументаПоСсылке(НовыйМассивДокументыСУЗ[0]);
		ДополнительныеПараметры.Вставить("МассивИсходящихДокументовСУЗ", НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("ТипДокументаСУЗ", ТипДокументаСУЗ);
		
		КоллекцияСгруппированныхДокументовСУЗ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыСУЗПоСтруктурнымЕдиницам(НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовСУЗ", КоллекцияСгруппированныхДокументовСУЗ);
		
		ПолучитьСтатусАгрегацииКМПослеАвторизации(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатусАгрегацииКМПослеАвторизации(ДополнительныеПараметры) Экспорт
	
	КоллекцияСгруппированныхДокументовСУЗ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовСУЗ;
	
	Для Каждого СгруппированныеСУЗ Из КоллекцияСгруппированныхДокументовСУЗ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеСУЗ.Ключ;
		МассивСУЗ = СгруппированныеСУЗ.Значение;
		
		Попытка
			Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьЗапросСтатусовАгрегацииКМ(МассивСУЗ, СтруктурнаяЕдиница);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;
	
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьАгрегацияКодовМаркировки(), МассивСУЗ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатусНанесенияКМ(Знач МассивДокументыСУЗ, Знач ДополнительныеПараметры) Экспорт
	
	НовыйМассивДокументыСУЗ = МассивДокументыСУЗ;
	
	Если НовыйМассивДокументыСУЗ.Количество() = 0 Тогда
		Возврат;
	Иначе
		
		ТипДокументаСУЗ = ОпределитьТипДокументаПоСсылке(НовыйМассивДокументыСУЗ[0]);
		ДополнительныеПараметры.Вставить("МассивИсходящихДокументовСУЗ", НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("ТипДокументаСУЗ", ТипДокументаСУЗ);
		
		КоллекцияСгруппированныхДокументовСУЗ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыСУЗПоСтруктурнымЕдиницам(НовыйМассивДокументыСУЗ);
		ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовСУЗ", КоллекцияСгруппированныхДокументовСУЗ);
		
		ПолучитьСтатусНанесенияКМПослеАвторизации(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатусНанесенияКМПослеАвторизации(ДополнительныеПараметры) Экспорт
	
	КоллекцияСгруппированныхДокументовСУЗ = ДополнительныеПараметры.КоллекцияСгруппированныхДокументовСУЗ;
	
	Для Каждого СгруппированныеСУЗ Из КоллекцияСгруппированныхДокументовСУЗ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеСУЗ.Ключ;
		МассивСУЗ = СгруппированныеСУЗ.Значение;
		
		Попытка
			Результат = ИнтеграцияИСМПТКВызовСервера.ОтправитьЗапросСтатусовНанесенияКМ(МассивСУЗ, СтруктурнаяЕдиница);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;
	
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьНанесениеКодовМаркировки(), МассивСУЗ);
	
КонецПроцедуры

#КонецОбласти

#Область ВходящиеДокументыИСМПТ

&НаКлиенте
Процедура ПодтвердитьВходящиеДокументыИСМПТ(Знач МассивДокументыИСМПТ, Знач ДополнительныеПараметры) Экспорт
	
	Если НЕ КриптопровайдерПодключается() Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияСгруппированныхДокументовИСМПТ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыИСМПТПоСтруктурнымЕдиницам(МассивДокументыИСМПТ);
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовИСМПТ", КоллекцияСгруппированныхДокументовИСМПТ);
	
	ПодтвердитьВходящиеДокументыИСМПТЗавершение(ДополнительныеПараметры);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьВходящиеДокументыИСМПТЗавершение(ДополнительныеПараметры) Экспорт
	
	СписокТокеновАвторизации = Новый Соответствие();
	
	Если ДополнительныеПараметры.Свойство("КоллекцияСгруппированныхДокументовИСМПТ") Тогда
		Для Каждого ЭлементКоллекции Из ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ Цикл
			
			ТипДокумента = ОпределитьТипДокументаПоСсылке(ЭлементКоллекции.Значение[0]);
			ТокенАвторизации = ПолучитьТокенАвторизации(ЭлементКоллекции.Ключ, ТипДокумента);
			Если Не ТокенАвторизации = Неопределено Тогда
				СписокТокеновАвторизации.Вставить(ЭлементКоллекции.Ключ, ТокенАвторизации); 
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если СписокТокеновАвторизации.Количество() = 0 Тогда
		
		ТекстСообщенияТокенНеПолучен = НСтр("ru='Операция подтверждения прервана: не получены данные ЭЦП.'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияТокенНеПолучен);
		Возврат;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
	Иначе
		КоллекцияДанныхДокументов = ИнтеграцияИСМПТКВызовСервера.ПодтвердитьВходящиеДокументыИСМПТ_СозданиеТитулов(ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
		//Подписываем титулы
		НоваяКоллекцияСгруппированныхДокументовИСМПТ = Новый Массив();
		Для Каждого ЭлементКоллекции Из КоллекцияДанныхДокументов Цикл
			
			ИдентификаторОрганизации = ПолучитьИдентификаторОрганизации(ЭлементКоллекции.Значение.СтруктурнаяЕдиница);
			ТитулБезПодписи = ЭлементКоллекции.Значение.ТитулДляПодписи;
			
			ТипДокумента = ОпределитьТипДокументаПоСсылке(ЭлементКоллекции.Значение.СсылкаДокумент);
			
			ПодписанныйТитул = СоздатьЭЦП_CMS_NCA_Layer(ТитулБезПодписи, 2, Ложь, Ложь, ИдентификаторОрганизации, ТипДокумента);
			
			ДанныеПодписанногоТитула = Новый Структура();
			ДанныеПодписанногоТитула.Вставить("ПодписанныйТитул",   ПодписанныйТитул);
			ДанныеПодписанногоТитула.Вставить("Идентификатор",      ЭлементКоллекции.Ключ);
			ДанныеПодписанногоТитула.Вставить("ТокенАвторизации",   ЭлементКоллекции.Значение.Токен);
			ДанныеПодписанногоТитула.Вставить("СтруктурнаяЕдиница", ЭлементКоллекции.Значение.СтруктурнаяЕдиница);
			ДанныеПодписанногоТитула.Вставить("СсылкаДокумент", 	ЭлементКоллекции.Значение.СсылкаДокумент);
			ДанныеПодписанногоТитула.Вставить("ЭтоПодтверждение", 	ЭлементКоллекции.Значение.ЭтоПодтверждение);
			
			НоваяКоллекцияСгруппированныхДокументовИСМПТ.Добавить(ДанныеПодписанногоТитула);

		КонецЦикла;
		
		ИнтеграцияИСМПТКВызовСервера.ПодтвердитьВходящиеДокументыИСМПТ_ПодписьТитуловЗавершение(НоваяКоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
	Иначе
		ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьАктПриемаПередачи(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьВходящиеДокументыИСМПТ(Знач МассивДокументыИСМПТ, Знач ДополнительныеПараметры) Экспорт
	
	Если НЕ КриптопровайдерПодключается() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйМассивДокументыИСМПТ = МассивДокументыИСМПТ;
	
	Если НовыйМассивДокументыИСМПТ.Количество()=0 Тогда
		Возврат;
	Иначе
		
		//проверка 
		ТипДокументаИСМПТ = ОпределитьТипДокументаПоСсылке(НовыйМассивДокументыИСМПТ[0]);
		КоллекцияСгруппированныхДокументовИСМПТ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыИСМПТПоСтруктурнымЕдиницам(МассивДокументыИСМПТ);
		ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовИСМПТ", КоллекцияСгруппированныхДокументовИСМПТ);
		ДополнительныеПараметры.Вставить("ТипДокументаИСМПТ", ТипДокументаИСМПТ);
		
		ОтклонитьВходящиеДокументыИСМПТЗавершение(ТипДокументаИСМПТ, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьВходящиеДокументыИСМПТЗавершение(ТипДокументаИСМПТ, ДополнительныеПараметры) Экспорт
	
	СписокТокеновАвторизации = Новый Соответствие();
	
	Если ДополнительныеПараметры.Свойство("КоллекцияСгруппированныхДокументовИСМПТ") Тогда
		Для Каждого ЭлементКоллекции Из ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ Цикл
			
			ТипДокумента = ОпределитьТипДокументаПоСсылке(ЭлементКоллекции.Значение[0]);
			ТокенАвторизации = ПолучитьТокенАвторизации(ЭлементКоллекции.Ключ, ТипДокумента);
			Если Не ТокенАвторизации = Неопределено Тогда
				СписокТокеновАвторизации.Вставить(ЭлементКоллекции.Ключ, ТокенАвторизации); 
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если СписокТокеновАвторизации.Количество() = 0 Тогда
		
		ТекстСообщенияТокенНеПолучен = НСтр("ru='Операция отклонения прервана: не получены данные ЭЦП.'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияТокенНеПолучен);
		Возврат;
		
	КонецЕсли;

	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
	Иначе                                                                                                                     
		КоллекцияДанныхДокументов = ИнтеграцияИСМПТКВызовСервера.ОтклонитьВходящиеДокументыИСМПТ_СозданиеТитулов(ТипДокументаИСМПТ, ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
		
		Если Не ТипДокументаИСМПТ = "УведомлениеОРасхожденииИСМПТК" Тогда
			
			//Подписываем титулы
			НоваяКоллекцияСгруппированныхДокументовИСМПТ = Новый Массив();
			Для Каждого ЭлементКоллекции Из КоллекцияДанныхДокументов Цикл
				
				ИдентификаторОрганизации = ПолучитьИдентификаторОрганизации(ЭлементКоллекции.Значение.СтруктурнаяЕдиница);
				
				ТитулБезПодписи = ЭлементКоллекции.Значение.ТитулДляПодписи;
				ТипДокумента = ОпределитьТипДокументаПоСсылке(ЭлементКоллекции.Значение.СсылкаДокумент);
				
				ПодписанныйТитул = СоздатьЭЦП_CMS_NCA_Layer(ТитулБезПодписи, 2, Ложь, Ложь, ИдентификаторОрганизации, ТипДокумента);
				
				ДанныеПодписанногоТитула = Новый Структура();
				ДанныеПодписанногоТитула.Вставить("ПодписанныйТитул",   ПодписанныйТитул);
				ДанныеПодписанногоТитула.Вставить("Идентификатор",      ЭлементКоллекции.Ключ);
				ДанныеПодписанногоТитула.Вставить("ТокенАвторизации",   ЭлементКоллекции.Значение.Токен);
				ДанныеПодписанногоТитула.Вставить("СтруктурнаяЕдиница", ЭлементКоллекции.Значение.СтруктурнаяЕдиница);
				ДанныеПодписанногоТитула.Вставить("СсылкаДокумент", 	ЭлементКоллекции.Значение.СсылкаДокумент);
				ДанныеПодписанногоТитула.Вставить("ЭтоПодтверждение", 	ЭлементКоллекции.Значение.ЭтоПодтверждение);
				
				НоваяКоллекцияСгруппированныхДокументовИСМПТ.Добавить(ДанныеПодписанногоТитула);
			КонецЦикла;
			
			ИнтеграцияИСМПТКВызовСервера.ОтклонитьВходящиеДокументыИСМПТ_ПодписьТитуловЗавершение(ТипДокументаИСМПТ, НоваяКоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
	Иначе
		ИмяСобытия = ОпределитьИмяСобытияПоТипуДокумента(ДополнительныеПараметры.ТипДокументаИСМПТ);
		ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИмяСобытия, ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ИсходящиеДокументыИСМПТ

&НаКлиенте
Процедура ОтозватьИсходящиеДокументыИСМПТ(Знач МассивДокументыИСМПТ, Знач ДополнительныеПараметры) Экспорт
	
	Если НЕ КриптопровайдерПодключается() Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияСгруппированныхДокументовИСМПТ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыИСМПТПоСтруктурнымЕдиницам(МассивДокументыИСМПТ);
	ТипДокументаИСМПТ = ОпределитьТипДокументаПоСсылке(МассивДокументыИСМПТ[0]);
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовИСМПТ", КоллекцияСгруппированныхДокументовИСМПТ);
	ДополнительныеПараметры.Вставить("ЗапускатьФоновоеЗадание", Ложь);
	ДополнительныеПараметры.Вставить("ТипДокументаИСМПТ", ТипДокументаИСМПТ);
	
	ОтозватьИсходящиеДокументыИСМПТЗавершение(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтозватьИсходящиеДокументыИСМПТЗавершение(ДополнительныеПараметры) Экспорт
	
	СписокТокеновАвторизации = Новый Соответствие();
	Если ДополнительныеПараметры.Свойство("КоллекцияСгруппированныхДокументовИСМПТ") Тогда
		Для Каждого ЭлементКоллекции Из ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ Цикл
			
			ТипДокумента = ОпределитьТипДокументаПоСсылке(ЭлементКоллекции.Значение[0]);
			ТокенАвторизации = ПолучитьТокенАвторизации(ЭлементКоллекции.Ключ, ТипДокумента);
			Если Не ТокенАвторизации = Неопределено Тогда
				СписокТокеновАвторизации.Вставить(ЭлементКоллекции.Ключ, ТокенАвторизации); 
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если СписокТокеновАвторизации.Количество() = 0 Тогда
		
		ТекстСообщенияТокенНеПолучен = НСтр("ru='Операция отзыва прервана: не получены данные ЭЦП.'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияТокенНеПолучен);
		Возврат;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда

	Иначе
		КоллекцияДанныхДокументов = ИнтеграцияИСМПТКВызовСервера.ОтозватьИсходящиеДокументыИСМПТ_СозданиеТитулов(ДополнительныеПараметры.ТипДокументаИСМПТ, ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
		//Подписываем титулы
		НоваяКоллекцияСгруппированныхДокументовИСМПТ = Новый Массив();
		Для Каждого ЭлементКоллекции Из КоллекцияДанныхДокументов Цикл
			
			ИдентификаторОрганизации = ПолучитьИдентификаторОрганизации(ЭлементКоллекции.Значение.СтруктурнаяЕдиница);
			ТитулБезПодписи = ЭлементКоллекции.Значение.ТитулДляПодписи;
			ТипДокумента = ОпределитьТипДокументаПоСсылке(ЭлементКоллекции.Значение.СсылкаДокумент);
			ПодписанныйТитул = СоздатьЭЦП_CMS_NCA_Layer(ТитулБезПодписи, 2, Ложь, Ложь, ИдентификаторОрганизации, ТипДокумента);
			
			ДанныеПодписанногоТитула = Новый Структура();
			ДанныеПодписанногоТитула.Вставить("ПодписанныйТитул",   ПодписанныйТитул);
			ДанныеПодписанногоТитула.Вставить("Идентификатор",      ЭлементКоллекции.Ключ);
			ДанныеПодписанногоТитула.Вставить("ТокенАвторизации",   ЭлементКоллекции.Значение.Токен);
			ДанныеПодписанногоТитула.Вставить("СтруктурнаяЕдиница", ЭлементКоллекции.Значение.СтруктурнаяЕдиница);
			ДанныеПодписанногоТитула.Вставить("СсылкаДокумент", 	ЭлементКоллекции.Значение.СсылкаДокумент);
			
			НоваяКоллекцияСгруппированныхДокументовИСМПТ.Добавить(ДанныеПодписанногоТитула);
		КонецЦикла;
			
		ИнтеграцияИСМПТКВызовСервера.ОтозватьИсходящиеДокументыИСМПТ_ПодписьТитуловЗавершение(НоваяКоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
	Иначе
		Если ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОРасхожденииИСМПТК" Тогда 
			ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОРасхождении(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "АктПриемаПередачиИСМПТК" Тогда
			ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьАктПриемаПередачи(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОВыводеИзОборотаИСМПТК" Тогда
			ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВыводеИзОборота(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОВводеВОборотИСМПТК" Тогда
			ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВводеВОборот(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОВвозеИзЕАЭСИСМПТК" Тогда
			ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзЕАЭС(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОВвозеИзТретьихСтранИСМПТК" Тогда
			ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзТретьихСтран(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

&НаКлиенте
Функция КриптопровайдерПодключается(Версия = "", РежимТишины = Ложь, МестоВыполненияОпераций = Неопределено, ТолькоПодключение = Ложь) Экспорт
	
	ВыполнятьКриптографическиеОперацииНаКлиенте = ВыполнятьКриптографическиеОперацииНаКлиенте(); 
	
	// Проверка подключения в требуемом контексте.
	Если ВыполнятьКриптографическиеОперацииНаКлиенте Тогда		
		Подключается = УдалосьПодключитьКриптопровайдерНаКлиенте(Версия, РежимТишины, ТолькоПодключение);		
	Иначе		
		Подключается = Ложь;
	КонецЕсли;
	
	Возврат Подключается;	

КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
// При вызове процедуры из конекста клиента необходимо передавать идентификатор клиентской формы,
// иначе хранилище будет очищено при возврате в контекст клиента
Функция АдресБиблиотекиКриптографии(УникальныйИдентификаторФормыКлиента = Неопределено) Экспорт
	
	Компонента = Обработки.ОбменЭСФ.ПолучитьМакет("WSCrypto");
	СсылкаНаМодуль = ПоместитьВоВременноеХранилище(Компонента, УникальныйИдентификаторФормыКлиента);
	Возврат СсылкаНаМодуль;
	
КонецФункции

&НаКлиенте
Функция СоздатьЭЦП(Знач СтрокаДляПодписи, Знач КлючBase64, Знач ПарольКлюча) Экспорт
	
	Попытка
				
		Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдерWSSocket();
		Криптопровайдер.ИнициализироватьХранилищеКлюча(КлючBase64, ПарольКлюча, ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64());
		ЭЦП = Криптопровайдер.ПолучитьПодпись(СтрокаДляПодписи, ПолучитьПодпись_ТипДанных_UTF8());
		
		Возврат ЭЦП;	
		
	Исключение
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = НСтр("ru = 'Не удалось подключить криптопровайдер. 
		|[КраткоеПредставление]'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "[КраткоеПредставление]", Ошибка.КраткоеПредставление);				
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецФункции

// Возвращает строку, содержащую ЭЦП в формате CMS закодированную в Base64.
//
// Параметры:
//  СтрокаДляПодписи - Строка - Строка, для которой необходимо получить ЭЦП.
//								может быть как исходной строкой, так и строкой закодированной в base64.
//  Ключ - Строка - Ключевой контейнер PKCS#12 в кодировке Base64.
//  ПарольКлюча - Строка - Пароль от ключевого контейнера PKCS#12.
//	ТипВходящихДанных - 1 - Строка в UTF-8 (подходит для исходной строки)
//						2 - Строка закодированная в base64
//	ВключатьДанныеВПодпись - включать исходные данные в подпись или нет
//	КодироватьВBase64	- На случай, если передаем исходную строку которую сперва надо закодировать в base64
//
// Возвращаемое значение:
//  Строка - ЭЦП.
//
&НаКлиенте
Функция СоздатьЭЦП_CMS_NCA_Layer(Знач ДанныеXML, ТипВходящихДанных, Знач ВключатьДанныеВПодпись, КодироватьВbase64, ИдентификаторКлиента, ТипДокумента = Неопределено) Экспорт
	
	Возврат ИнтеграцияИСМПТККлиент.СоздатьЭЦП_CMS_NCA_Layer(ДанныеXML, ТипВходящихДанных, ВключатьДанныеВПодпись, КодироватьВbase64, ИдентификаторКлиента, ТипДокумента);
	
КонецФункции

// Возвращает сертификат открытого ключа в виде строки Base64.
//
// Параметры:
//  КлючBase64 - Строка - Файл PKCS#12 содержащий сертификат открытого ключа, в кодировке P12.
//  Пароль - Строка - Пароль к файлу PKCS#12 содержащему сертификат открытого ключа.
//
// Возвращаемое значение:
//  Строка - Сертификат открытого ключа в формате Base64.
//
&НаКлиенте
Функция ОткрытыйСертификатBase64(Знач КлючBase64, Знач ПарольКлюча) Экспорт
		
	Попытка
		
		Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдерWSSocket();
		Криптопровайдер.ИнициализироватьХранилищеКлюча(КлючBase64, ПарольКлюча, ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64());	
		Сертификат = Криптопровайдер.ПолучитьСертификат(ПолучитьСертификат_ТипВозвращаемыхДанных_СтрокаBase64());
		
	Исключение
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = НСтр("ru = 'Не удалось подключить криптопровайдер.
		|[КраткоеПредставление]'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "[КраткоеПредставление]", Ошибка.КраткоеПредставление);				
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	СертификатBase64 = "";
	
	Для Счетчик = 1 По СтрЧислоСтрок(Сертификат) Цикл
		ТекущаяСтрока = СтрПолучитьСтроку(Сертификат, Счетчик);
		Если Найти(ТекущаяСтрока, " CERTIFICATE-----") > 0 Тогда
			Продолжить;
		КонецЕсли;	
		СертификатBase64 = СертификатBase64 + СокрЛП(СтрПолучитьСтроку(Сертификат, Счетчик));
	КонецЦикла;
	
	СертификатBase64 = СокрЛП(СертификатBase64);
	
	Возврат СертификатBase64;
			
КонецФункции

// Возврашает текстовое описание сертификата.
//
// Параметры:
//  Свойства - Структура - См. СвойстваСертификата()
//
// Возвращаемое значение:
//  Строка, текстовое описание сертификата.
//
&НаКлиенте
Функция ОписаниеСертификата(Знач Свойства) Экспорт
	
	//Наименование организации:
	//БИН организации: 
	//
	//ФИО владельца:
	//ИИН владельца:
	//Адрес владельца:
	//Email владельца:
	//
	//Издатель сертификата:
	//Начало действия сертификата:
	//Окончание действия сертификата:
	//Идентификатор открытого ключа:
	
	Описание = "";
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Наименование организации'"), Свойства.НаименованиеОрганизации);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'БИН организации'"), Свойства.БИНОрганизации);
	
	Описание = Описание + Символы.ПС;
	
	ФИО = СокрЛП(Свойства.ИмяФамилияСубъекта + " " + Свойства.ОтчествоСубъекта);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'ФИО владельца'"), ФИО);
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'ИИН владельца'"), Свойства.ИИНСубъекта);
	
	Адрес = Свойства.Страна + ", " + Свойства.РегионОбласть + ", " + Свойства.Город;
	Пока Лев(Адрес, 2) = ", " Цикл
		Адрес = Сред(Адрес, 3);	
	КонецЦикла;
	Пока Прав(Адрес, 2) = ", " Цикл
		Адрес = Сред(Адрес, 1, СтрДлина(Адрес) - 2);	
	КонецЦикла;	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Адрес владельца'"), Адрес);	
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Email владельца'"), Свойства.EmailСубъекта);
	
	Описание = Описание + Символы.ПС;
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Издатель сертификата'"),           Свойства.ИмяИздателя);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Начало действия сертификата'"),    Свойства.СрокГодностиОт);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Окончание действия сертификата'"), Свойства.СрокГодностиДо);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Идентификатор открытого ключа'"),  Свойства.ИдентификаторОткрытогоКлюча);
	
	Возврат СокрЛП(Описание);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьИсходящиеДокументыИСМПТ(Знач МассивИсходящихДокументов) Экспорт
	
	ИнтеграцияИСМПТКВызовСервера.ПроверитьИсходящиеДокументыИСМПТ(МассивИсходящихДокументов);
	
КонецПроцедуры

&НаКлиенте
Функция УдалосьПодключитьКриптопровайдерНаКлиенте(Версия = "", РежимТишины = Ложь, ТолькоПодключение = Ложь) Экспорт
	
	Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдерWSSocket(, РежимТишины, ТолькоПодключение);
		
	Если Криптопровайдер = Неопределено Тогда
		ОбновитьПовторноИспользуемыеЗначения();
		Подключается = Ложь;
		Версия = "";
	Иначе
		Подключается = Истина;
		Версия = Криптопровайдер.Версия;
	КонецЕсли;
		
		
	Возврат Подключается;
	
КонецФункции

&НаКлиенте
Функция УдалосьПодключитьКриптопровайдерНЦАЛейреНаКлиенте(Версия = "", РежимТишины = Ложь, ТолькоПодключение = Ложь) Экспорт
	
	Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдерWSSocket(, РежимТишины, ТолькоПодключение);
		
	Если Криптопровайдер = Неопределено Тогда
		ОбновитьПовторноИспользуемыеЗначения();
		Подключается = Ложь;
		Версия = "";
	Иначе
		Подключается = Истина;
		Версия = Криптопровайдер.Версия;
	КонецЕсли;
				
	Возврат Подключается;
	
КонецФункции

&НаКлиенте
Функция ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке) Экспорт
	
	Ошибка = Новый Структура;
	
	Если Криптопровайдер = Неопределено Тогда
		Ошибка.Вставить("Версия", "");
		Ошибка.Вставить("КодОшибки", "");
		Ошибка.Вставить("ОписаниеОшибки", "");		
	Иначе
		Ошибка.Вставить("Версия", Криптопровайдер.Версия);
		Ошибка.Вставить("КодОшибки", Криптопровайдер.КодОшибки);
		Ошибка.Вставить("ОписаниеОшибки", Криптопровайдер.ТекстОшибки);
	КонецЕсли;
	
	Ошибка.Вставить("ИнформацияОбОшибке", ИнформацияОбОшибке);
	
	ТипОшибки = ТипОшибкиКриптопровайдера(Ошибка);
	Ошибка.Вставить("ТипОшибки", ТипОшибки);
	
	ПредставленияОшибки = ПредставленияОшибкиКриптопровайдера(Ошибка);
	Ошибка.Вставить("КраткоеПредставление", ПредставленияОшибки.КраткоеПредставление);
	Ошибка.Вставить("ПодробноеПредставление", ПредставленияОшибки.ПодробноеПредставление);
	
	Возврат Ошибка;
	
КонецФункции

#КонецОбласти

#Область СерверныеПроцедурыИФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция СвойстваСертификатаБезОбработкиНаСервере(Знач СвойстваXML) Экспорт
	
	СвойстваXDTO = ИнтеграцияИСМПТК.ОбъектXDTOИзСтрокиXML(СвойстваXML, ФабрикаXDTO);
	СписокСвойствXDTO = ИнтеграцияИСМПТК.СписокXDTOИзОбъектXDTO(СвойстваXDTO.prop);
		
	СвойстваСертификата = Новый Соответствие;
	
	Для Каждого СвойствоXDTO Из СписокСвойствXDTO Цикл
		СвойстваСертификата.Вставить(СвойствоXDTO.name, СокрЛП(СвойствоXDTO.value));	
	КонецЦикла;
		
	Возврат СвойстваСертификата;
	
КонецФункции

#КонецОбласти

#Область Криптография

&НаКлиенте
Функция ТипОшибкиКриптопровайдера(Ошибка)
	
	ТипОшибки = Ошибка_НеизвестнаяОшибка();
	
	Если Найти(Ошибка.ОписаниеОшибки, "0D0680A8") Тогда
		ТипОшибки = Ошибка_НеверныйФайл();		
	ИначеЕсли Найти(Ошибка.ОписаниеОшибки, "23076071") Тогда
		ТипОшибки = Ошибка_НеверныйПароль();	
	Иначе
		ТипОшибки = Ошибка_НеизвестнаяОшибка();	
	КонецЕсли;
	
	Возврат ТипОшибки;
	
КонецФункции

&НаКлиенте
Функция ПредставленияОшибкиКриптопровайдера(Ошибка)
	
	ПредставленияОшибки = Новый Структура;
	
	КраткоеПредставление = КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка);
	КраткоеПредставление = КраткоеПредставление + Символы.ПС + НСтр("ru = 'Подробности ошибки смотрите в журнале регистрации.'");
	ПредставленияОшибки.Вставить("КраткоеПредставление", КраткоеПредставление);
	
	ПодробноеПредставление = ПодробноеПредставлениеОшибкиКриптопровайдера(Ошибка);
	ПредставленияОшибки.Вставить("ПодробноеПредставление", ПодробноеПредставление);
	
	Возврат ПредставленияОшибки;
	
КонецФункции

&НаКлиенте
Функция КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка)
	
	КраткоеПредставление = "";
	
	Если Ошибка.ТипОшибки = Ошибка_НеверныйФайл() Тогда
		КраткоеПредставление = НСтр("ru = 'Возможно выбранный файл не является файлом сертификата ""*.p12"".'");		
	ИначеЕсли Ошибка.ТипОшибки = Ошибка_НеверныйПароль() Тогда
		КраткоеПредставление = НСтр("ru = 'Возможно был введен некорректный пароль для файла сертификата.'");				
	Иначе	
		КраткоеПредставление = КраткоеПредставлениеОшибки(Ошибка.ИнформацияОбОшибке);					
	КонецЕсли;
	
	Возврат КраткоеПредставление;
	
КонецФункции

&НаКлиенте
Функция ПодробноеПредставлениеОшибкиКриптопровайдера(Ошибка)
	
	ПодробноеПредставление = НСтр(
	"ru = '[КраткоеПредставление]
	|[ИнформацияИзКриптопровайдера]
	|[ПодробноеПредставлениеОшибки]'");
	
	КраткоеПредставление = КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка);	
	ПодробноеПредставление = СтрЗаменить(ПодробноеПредставление, "[КраткоеПредставление]", КраткоеПредставление);
	
	Если ПустаяСтрока(Ошибка.Версия) И ПустаяСтрока(Ошибка.КодОшибки) И ПустаяСтрока(Ошибка.ОписаниеОшибки) Тогда
		ИнформацияИзКриптопровайдера = "";
	Иначе
		ИнформацияИзКриптопровайдера = НСтр("ru = 'Версия криптографии: [Версия], Код ошибки: [КодОшибки], Описание ошибки: [ОписаниеОшибки]'");
		ИнформацияИзКриптопровайдера = СтрЗаменить(ИнформацияИзКриптопровайдера, "[Версия]", Ошибка.Версия);
		ИнформацияИзКриптопровайдера = СтрЗаменить(ИнформацияИзКриптопровайдера, "[КодОшибки]", Ошибка.КодОшибки);
		ИнформацияИзКриптопровайдера = СтрЗаменить(ИнформацияИзКриптопровайдера, "[ОписаниеОшибки]", Ошибка.ОписаниеОшибки);
	КонецЕсли;	
	ПодробноеПредставление = СтрЗаменить(ПодробноеПредставление, "[ИнформацияИзКриптопровайдера]", ИнформацияИзКриптопровайдера);
	
	ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(Ошибка.ИнформацияОбОшибке);
	ПодробноеПредставление = СтрЗаменить(ПодробноеПредставление, "[ПодробноеПредставлениеОшибки]", ПодробноеПредставлениеОшибки);
	
	Возврат ПодробноеПредставление;
	
КонецФункции

&НаКлиенте
Функция ПодписатьДокументы(КоллекцияДокументовДляПодписи, Организация, ТипДокумента = Неопределено)
	    КоллекцияДокументов = "";
	Если ТипЗнч(КоллекцияДокументовДляПодписи) = Тип("Соответствие") Тогда
		КоллекцияДокументов = КоллекцияДокументовДляПодписи;
	Иначе
		КоллекцияДокументов = ПолучитьИзВременногоХранилища(КоллекцияДокументовДляПодписи);
	КонецЕсли;
	
	ИдентификаторОрганизации = ПолучитьИдентификаторОрганизации(Организация);
	
	КоллекцияПодписанныхДокументов = Новый Соответствие;
	Для Каждого ЭлементКоллекции Из КоллекцияДокументов Цикл
		
		АктДляОтправки = Новый Структура("ДокументBase64, ПодписанныйДокумент");
		АктXML = ЭлементКоллекции.Значение;
		ДвоичныеДанныеСтроки = ПолучитьДвоичныеДанныеИзСтроки(АктXML);
		СтрокаBase64 = СтрЗаменить(СтрЗаменить(Base64Строка(ДвоичныеДанныеСтроки), Символы.ВК, ""),Символы.ПС,"");
		ПодписьБезДанных = СоздатьЭЦП_CMS_NCA_Layer(АктXML, 1, Ложь, Истина, ИдентификаторОрганизации, ТипДокумента);
		
		АктДляОтправки.ДокументBase64 = СтрокаBase64;
		АктДляОтправки.ПодписанныйДокумент = ПодписьБезДанных;
		КоллекцияПодписанныхДокументов.Вставить(ЭлементКоллекции.Ключ, АктДляОтправки);
	КонецЦикла;
	
	АдресКоллекцииПодписанныхДокументов = ПоместитьВоВременноеХранилище(КоллекцияПодписанныхДокументов, Новый УникальныйИдентификатор);
	
	Возврат АдресКоллекцииПодписанныхДокументов;
	
КонецФункции

#КонецОбласти

#Область Сертификат

&НаКлиенте
Функция ДобавитьСтрокуОписания(Описание, Знач Наименование, Знач Значение)
	
	Если НЕ ПустаяСтрока(Значение) Тогда
		Строка = НСтр("ru = '%Наименование%: %Значение%'");
		Строка = СтрЗаменить(Строка, "%Наименование%", Наименование);
		Строка = СтрЗаменить(Строка, "%Значение%", Значение);
		Описание = Описание + Строка + Символы.ПС;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПримитивныеКонстанты

&НаКлиенте
Функция Ошибка_НеверныйПароль() Экспорт
	Возврат "НеверныйПароль";	
КонецФункции

&НаКлиенте
Функция Ошибка_НеверныйФайл() Экспорт
	Возврат "НеверныйФайл";	
КонецФункции

&НаКлиенте
Функция Ошибка_НеизвестнаяОшибка() Экспорт
	Возврат "НеизвестнаяОшибка";	
КонецФункции

&НаКлиенте
Функция ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64() Экспорт
	Возврат 2;	
КонецФункции

&НаКлиенте
Функция ПолучитьСертификат_ТипВозвращаемыхДанных_СтрокаBase64() Экспорт
	Возврат 1;	
КонецФункции

&НаКлиенте
Функция ПолучитьПодпись_ТипДанных_UTF8() Экспорт
	Возврат 1;
КонецФункции

&НаКлиенте
Функция КлючGOST() Экспорт 
	
	Возврат "GOST";
	
КонецФункции

&НаКлиенте
Функция КлючRSA() Экспорт
	
	Возврат "RSA";
	
КонецФункции

#КонецОбласти

#Область ОткрытиеФорм

&НаКлиенте
Процедура ПриОткрытииФормы(Форма, Отказ) Экспорт
		
КонецПроцедуры

#КонецОбласти

#Область СоздатьПервичныйДокументИзДокументаИСМПТ

&НаКлиенте
Процедура СоздатьПервичныйДокументИзДокументаИСМПТ(Знач Параметры) Экспорт
	
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда 
		Параметр = Параметры.ИсходныйДокумент;
		ТипСоздаваемогоДокумента = Параметры.СоздаваемыйДокумент; 
	Иначе
		Параметр = Параметры;
	КонецЕсли;
	
	МассивИСМПТДляСозданияПервичныхДокументов = ИнтеграцияИСМПТККлиент.МассивДокументовИСМПТ(Параметр);
	
	Если МассивИСМПТДляСозданияПервичныхДокументов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураМассивИСМПТ = ИнтеграцияИСМПТКВызовСервера.МассивИСМПТСДокументомОснованияИБез(Параметр);
	МассивИСМПТСДокументомОснования  = СтруктураМассивИСМПТ.МассивИСМПТСДокументомОснования;
	МассивИСМПТБезДокументаОснования = СтруктураМассивИСМПТ.МассивИСМПТБезДокументаОснования;	
	
	Если МассивИСМПТДляСозданияПервичныхДокументов.Количество() > 1 Тогда 
		
		Если МассивИСМПТСДокументомОснования.Количество() <> 0 Тогда
			ТекстВопроса = НСтр("ru = 'На основании документов: 
			|%1 
			|уже созданы документы - основания. Создать на основании них новые документы?'");
			ТекстМассивИСМПТСДокументомОснования = "";
			Для Каждого СтрокаМассива Из МассивИСМПТСДокументомОснования Цикл
				ТекстМассивСНТСДокументамиОснования = ТекстМассивИСМПТСДокументомОснования + ?(ТекстМассивИСМПТСДокументомОснования = "", "", "; 
				|") + СтрокаМассива;																									
			КонецЦикла;	
			ТекстВопроса = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстВопроса, ТекстМассивСНТСДокументамиОснования);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("МассивИСМПТДляСозданияПервичныхДокументов", МассивИСМПТДляСозданияПервичныхДокументов);
			ДополнительныеПараметры.Вставить("МассивИСМПТБезДокументаОснования", 		  МассивИСМПТБезДокументаОснования);
			ДополнительныеПараметры.Вставить("ТипСоздаваемогоДокумента", 		  		  ТипСоздаваемогоДокумента);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьСписокПервичныхДокументовЗавершение", ЭтотОбъект , ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ТекстВопроса = НСтр("ru = 'Для выделенных документов будут созданы и записаны первичные документы.
			|Продолжить?'");
			ТекстМассивИСМПТСДокументомОснования = "";
			
			ДополнительныеПараметры = Новый Структура("МассивИСМПТДляСозданияПервичныхДокументов, ТипСоздаваемогоДокумента", МассивИСМПТДляСозданияПервичныхДокументов, ТипСоздаваемогоДокумента);
			ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьПервичныеДокументыЗавершение",   ЭтаФорма, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;	
		
	ИначеЕсли МассивИСМПТДляСозданияПервичныхДокументов.Количество() = 1 Тогда
		
		Если МассивИСМПТСДокументомОснования.Количество() <> 0  Тогда
			ТекстВопроса = НСтр("ru = 'На основании выбранного документа уже создан документ - основание.
			|Создать новый документ?'");
		Иначе
			ТекстВопроса = НСтр(
			"ru = 'Для документа будет создан и записан первичный документ.
			|Продолжить?'");
		КонецЕсли;	
		
		ДополнительныеПараметры = Новый Структура("МассивИСМПТДляСозданияПервичныхДокументов, ТипСоздаваемогоДокумента", МассивИСМПТДляСозданияПервичныхДокументов, ТипСоздаваемогоДокумента);
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьПервичныеДокументыЗавершение",   ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе	
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите хотя бы один документ.'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписокПервичныхДокументовЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры = Новый Структура("МассивИСМПТДляСозданияПервичныхДокументов", ДополнительныеПараметры.МассивИСМПТДляСозданияПервичныхДокументов);
	Иначе
		ДополнительныеПараметры = Новый Структура("МассивИСМПТДляСозданияПервичныхДокументов", ДополнительныеПараметры.МассивИСМПТБезДокументаОснования);
	КонецЕсли;
	
	ТекстВопроса = НСтр(
	"ru = 'Для выделенных документов будут созданы и записаны документы поступления.
	|Продолжить?'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьПервичныеДокументыЗавершение", ЭтаФорма, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыИзИСМПТ(Знач МассивДокументовИСМПТ, Знач ДополнительныеПараметры) Экспорт
	
	ТипДокументаИСМПТ = ОпределитьТипДокументаПоСсылке(МассивДокументовИСМПТ[0]);
	
	КоллекцияСгруппированныхДокументовИСМПТ = ИнтеграцияИСМПТКВызовСервера.СгруппироватьДокументыИСМПТПоСтруктурнымЕдиницам(МассивДокументовИСМПТ);		
	МассивПрофилейИСМПТ = ИнтеграцияИСМПТККлиент.ПолучитьНастройкиПараметровИСМПТ(КоллекцияСгруппированныхДокументовИСМПТ);
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументовИСМПТ", КоллекцияСгруппированныхДокументовИСМПТ);
	ДополнительныеПараметры.Вставить("ТипДокументаИСМПТ", ТипДокументаИСМПТ);
	
	Если МассивПрофилейИСМПТ = Неопределено Тогда
		
		ОбновитьДокументыВыборДанныхПрофилейИСМПТ(МассивПрофилейИСМПТ, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыВыборДанныхПрофилейИСМПТ(МассивПрофилейИСМПТ, ДополнительныеПараметры) Экспорт
	
	СписокТокеновАвторизации = Новый Соответствие();
	Если ДополнительныеПараметры.Свойство("КоллекцияСгруппированныхДокументовИСМПТ") Тогда
		Для Каждого ЭлементКоллекции Из ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ Цикл
			
			ТипДокумента = ОпределитьТипДокументаПоСсылке(ЭлементКоллекции.Значение[0]);
			ТокенАвторизации = ПолучитьТокенАвторизации(ЭлементКоллекции.Ключ, ТипДокумента);
			Если Не ТокенАвторизации = Неопределено Тогда
				СписокТокеновАвторизации.Вставить(ЭлементКоллекции.Ключ, ТокенАвторизации); 
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;			
	
	Если СписокТокеновАвторизации.Количество() = 0 Тогда
		
		ТекстСообщенияТокенНеПолучен = НСтр("ru='Операция прервана: не получены данные ЭЦП.'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияТокенНеПолучен);
		Возврат;
		
	КонецЕсли;
		
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
	Иначе
		ИнтеграцияИСМПТКВызовСервера.ОбновитьДокументыИзИСМПТ(ДополнительныеПараметры, Неопределено, СписокТокеновАвторизации);
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
		
	Иначе
		Если ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОРасхожденииИСМПТК" Тогда 
			ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОРасхождении(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
			
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "АктПриемаПередачиИСМПТК" Тогда
			ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьАктПриемаПередачи(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
			
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОВыводеИзОборотаИСМПТК" Тогда
			ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВыводеИзОборота(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
			
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОВводеВОборотИСМПТК" Тогда
			ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВводеВОборот(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
			
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОВвозеИзЕАЭСИСМПТК" Тогда
			ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзЕАЭС(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
			
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОВвозеИзТретьихСтранИСМПТК" Тогда
			ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзТретьихСтран(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
			
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОбЭкспортеЕАЭСИСМПТК" Тогда
			ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОбЭкспортеЕАЭС(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
			
		ИначеЕсли ДополнительныеПараметры.ТипДокументаИСМПТ = "УведомлениеОПриемкеЕАЭСИСМПТК" Тогда
			ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОПриемкеЕАЭС(), ДополнительныеПараметры.КоллекцияСгруппированныхДокументовИСМПТ);
		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПервичныеДокументыЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
	 
		СписокПервичныхДокументов = ИнтеграцияИСМПТКВызовСервера.СоздатьСписокПервичныхДокументов(ДополнительныеПараметры);
		
		Если СписокПервичныхДокументов <> Неопределено И СписокПервичныхДокументов.Количество() > 0 Тогда
			
			СтруктураИмяПервичногоДокумента = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ОпределитьНаименованиеПервичногоДокумента(СписокПервичныхДокументов[0]);
			ИмяПервичногоДокумента = СтруктураИмяПервичногоДокумента.ИмяПервичногоДокумента;
			ИмяТиповогоДокумента   = СтруктураИмяПервичногоДокумента.ИмяТиповогоДокумента;
			
			Если ИмяПервичногоДокумента = "ПриобретениеТоваровУслуг" Тогда
				ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзТретьихСтран());
			ИначеЕсли ИмяПервичногоДокумента = "ВозвратТоваровОтКлиента" 
				Или ИмяПервичногоДокумента = "РеализацияТоваровУслуг" Тогда
				ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьАктПриемаПередачи());
			КонецЕсли;
			
			Если СписокПервичныхДокументов.Количество() > 1 Тогда
				
				ПараметрыФормы = Новый Структура;	
				ПараметрыФормы.Вставить("Отбор", Новый Структура("Ссылка", Новый ФиксированныйМассив(СписокПервичныхДокументов)));
				ОткрытьФорму("Документ." + ИмяТиповогоДокумента + ".Форма.ФормаСписка", ПараметрыФормы,, Истина);
				
			Иначе 
				
				ПоказатьЗначение(, СписокПервичныхДокументов[0]);
				
			Конецесли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВводДокументовИСМПТНаОсновании

#Область КомандыСоздания

&НаКлиенте
Процедура СоздатьДокументИСМПТ(Знач Параметр, ДопПараметры = Неопределено) Экспорт
	
	МаркировкаДоступна = ПроверитьФОМаркировки();
	Если Не МаркировкаДоступна Тогда
		Возврат;
	КонецЕсли;
	
	МассивПервичныхДокументовИСМПТ = ИнтеграцияИСМПТККлиент.МассивДокументовИСМПТ(Параметр);
	Если МассивПервичныхДокументовИСМПТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДопПараметры = Неопределено Тогда
		ИмяКоманды = ДопПараметры.ТипКоманды;
	Иначе
		ИмяКоманды = "";
	КонецЕсли;
	
	Если ИмяКоманды = "СоздатьПриемкаЕАЭС" Тогда 
		ПродолжитьСозданиеСпискаДокументовИСМПТ(МассивПервичныхДокументовИСМПТ, Ложь, ИмяКоманды);
	    Возврат;
	КонецЕсли;
			
	//Исключаем все основания, в которых не содаржатся маркируемые товары	
	ТекстСообщенияНетТоваров 	 = НСтр("ru='Для документов: '") + Символы.ПС;
	ПереченьДокументовБезТоваров = "";
	МассивДляУдаления = Новый Массив();
	
	Для Каждого ПервичныйДокумент Из МассивПервичныхДокументовИСМПТ Цикл
		
		ДокументСодержитТовары = ПроверитьНаличиеМаркированногоТовараДляЗаказаКМ(ПервичныйДокумент);
		
		Если Не ДокументСодержитТовары Тогда
			ПереченьДокументовБезТоваров = ПереченьДокументовБезТоваров + ПервичныйДокумент + "," + Символы.ПС;
			МассивДляУдаления.Добавить(ПервичныйДокумент);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПереченьДокументовБезТоваров) Тогда
		
		ТекстСообщенияНетТоваров = ТекстСообщенияНетТоваров 
								 + Лев(ПереченьДокументовБезТоваров, СтрДлина(ПереченьДокументовБезТоваров) - 2) 
								 + Символы.ПС 
								 + НСтр("ru='не может быть оформлен документ ИС МПТ, т.к. в них отсутствуют данные по маркируемым товарам.'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияНетТоваров);
		
		Для Каждого Документ Из МассивДляУдаления Цикл
			МассивПервичныхДокументовИСМПТ.Удалить(МассивПервичныхДокументовИСМПТ.Найти(Документ));
		КонецЦикла;
		
	КонецЕсли;
	
	БылиДокументыБезТоваров = МассивДляУдаления.Количество() > 0;	
	
	//Исключаем документы, для которых нужно выбирать документ ИС МПТ
	Для Каждого ПервичныйДокумент Из МассивПервичныхДокументовИСМПТ Цикл
		
		Если ЭтоОснованиеДляВходящегоАПП(ПервичныйДокумент) Тогда
			Если Не ИмяКоманды = "СоздатьВводВОборот" Тогда
			
				ТекстСообщенияНеобходимВыборИСМПТ = НСтр("ru='Из данного документа не может быть введен новый документ ИС МПТ, но его можно прикрепить к существующему входящему документу маркировки.'");
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияНеобходимВыборИСМПТ);
				
				МассивПервичныхДокументовИСМПТ.Удалить(МассивПервичныхДокументовИСМПТ.Найти(ПервичныйДокумент));
				БылиДокументыБезТоваров = Истина;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Исключаем документы, не проходящие по виду операции
	Если Не МассивПервичныхДокументовИСМПТ.Количество() = 0 Тогда
		
		ТипДокументаОснования 		= ТипЗнч(МассивПервичныхДокументовИСМПТ[0]);
		ДокументыОснованияКУдалению = ПроверитьДокументыОснованияПриСозданииИСМПТ(МассивПервичныхДокументовИСМПТ, ТипДокументаОснования);
		
		ПереченьНеподходящихДокументовОснования = "";
		Если Не ДокументыОснованияКУдалению.Количество() = 0 Тогда
			
			Для Каждого Документ Из ДокументыОснованияКУдалению Цикл
				
				ПереченьНеподходящихДокументовОснования = ПереченьНеподходящихДокументовОснования + Документ + "," + Символы.ПС;
				МассивПервичныхДокументовИСМПТ.Удалить(МассивПервичныхДокументовИСМПТ.Найти(Документ));
				
			КонецЦикла;
			
			ТекстСообщенияЕстьНеподходящиеДокументы = НСтр("ru='Для документов: '") 
													  + Символы.ПС
													  + Лев(ПереченьНеподходящихДокументовОснования, СтрДлина(ПереченьНеподходящихДокументовОснования) - 2) 
													  + Символы.ПС 
													  + НСтр("ru='не может быть введен указанный документ ИС МПТ. Возможно, выбран неподходящий вид операции.'");
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияЕстьНеподходящиеДокументы);
			
			БылиДокументыБезТоваров = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Выполняем проверку проведения оснований
	НепроведенныеПервичныеДокументы 		 = ПроверитьНепроведенныеПервичныеДокументы(МассивПервичныхДокументовИСМПТ);
	ПереченьНепроведенныхПервчиныхДокументов = "";
	ТекстСообщенияНепроведены 				 = НСтр("ru='Документы:'") + Символы.ПС;
	ДополнительныеПараметры					 = Новый Структура("МассивПервичныхДокументовИСМПТ, НепроведенныеПервичныеДокументы, БылиИсключенияИзМассива, ИмяКоманды", 
											   					МассивПервичныхДокументовИСМПТ, НепроведенныеПервичныеДокументы, БылиДокументыБезТоваров, ИмяКоманды);
	
	Если НепроведенныеПервичныеДокументы.Количество() > 0 Тогда
		
		Для Каждого Документ Из МассивПервичныхДокументовИСМПТ Цикл
			ПереченьНепроведенныхПервчиныхДокументов = ПереченьНепроведенныхПервчиныхДокументов + Документ + "," + Символы.ПС;
		КонецЦикла;
		
		ТекстСообщенияНепроведены = ТекстСообщенияНепроведены 
								  + Лев(ПереченьНепроведенныхПервчиныхДокументов, СтрДлина(ПереченьНепроведенныхПервчиныхДокументов) - 2) 
								  + Символы.ПС 
								  + НСтр("ru='не проведены. Провести документы?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СпроситьПользователяОПроведенииПервичныхДокументовЗавершение", 
													   ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстСообщенияНепроведены, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ПродолжитьСозданиеСпискаДокументовИСМПТ(МассивПервичныхДокументовИСМПТ, БылиДокументыБезТоваров, ИмяКоманды);
	КонецЕсли;
		 	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИСМПТЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ИмяКоманды = ДополнительныеПараметры.ИмяКоманды;
		СозданиеДокументаИСМПТПродолжение(ДополнительныеПараметры.ДокументОснование, ИмяКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеДокументаИСМПТПродолжение(Основание, ИмяКоманды)

	ИнтеграцияИСМПТККлиентПереопределяемый.СоздатьДокументИСМПТПоОснованию(Основание, ИмяКоманды);	
	
КонецПроцедуры

&НаСервере
Функция ПроверитьФОМаркировки()
	
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ПроверитьЗначениеОбщейФОМаркировки();
	
КонецФункции

&НаКлиенте
Процедура ПродолжитьСозданиеСпискаДокументовИСМПТ(МассивПервичныхДокументовИСМПТ, БылиИсключенияИзМассива, ИмяКоманды)
	
	Если МассивПервичныхДокументовИСМПТ.Количество() > 1 Тогда 
		
		ПоказатьПредупреждение(, НСтр("ru = 'Групповой ввод документов ИС МПТ не поддерживается.'"));
				
	ИначеЕсли МассивПервичныхДокументовИСМПТ.Количество() = 1 Тогда
		
		Если ИмяКоманды = "СоздатьПриемкаЕАЭС" Тогда
			СозданиеДокументаИСМПТПродолжение(МассивПервичныхДокументовИСМПТ[0], ИмяКоманды);
		Иначе	
			
			//Проверяем наличие связанных ИС МПТ
			СписокСвязанныхДокументов = ПроверитьСписокСвязанныхДокументовИСМПТ(МассивПервичныхДокументовИСМПТ[0], Истина, ИмяКоманды);
			
			Если Не СписокСвязанныхДокументов = Неопределено Тогда
				ТекстВопроса = НСтр("ru = 'На основании выбранного документа уже создан документ ИС МПТ.
				|Создать новый документ маркировки?'");
				ДополнительныеПараметры = Новый Структура("ДокументОснование, ИмяКоманды", МассивПервичныхДокументовИСМПТ[0], ИмяКоманды);
				ОписаниеОповещения 		= Новый ОписаниеОповещения("СоздатьИСМПТЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Иначе
				СозданиеДокументаИСМПТПродолжение(МассивПервичныхДокументовИСМПТ[0], ИмяКоманды);
			КонецЕсли;
			
		КонецЕсли;
				
	Иначе
		Если Не БылиИсключенияИзМассива Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Выберите хотя бы один документ.'"));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьДокументыОснованияПриСозданииИСМПТ(МассивПервичныхДокументов, ТипДокумента, ЭтоВыборАПП = Ложь)
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ПроверитьДокументыОснованияПриСозданииИСМПТ(МассивПервичныхДокументов, ТипДокумента, ЭтоВыборАПП);
		
КонецФункции

&НаСервере
Функция ПроверитьНаличиеМаркированногоТовараДляЗаказаКМ(Документ)
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ПроверитьНаличиеМаркированногоТовараДляЗаказаКМ(Документ);
		
КонецФункции

&НаСервере
Функция ПроверитьСписокСвязанныхДокументовИСМПТ(Основание, Проверка, ИмяДокумента = Неопределено)
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ПроверитьНаличиеСвязанногоДокументаИСМПТ(Основание, Проверка);
	
КонецФункции

&НаСервере
Функция ЭтоОснованиеДляВходящегоАПП(Документ)
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ЭтоОснованиеДляВходящегоАПП(Документ);
		
КонецФункции

&НаСервере
Функция ПроверитьНепроведенныеПервичныеДокументы(МассивПервичныхДокументов)
	
	НепроведенныеПервичныеДокументы = Новый Массив();
	
	Для Каждого Документ Из МассивПервичныхДокументов Цикл
		
		Если Не ЗначениеЗаполнено(Документ.Ссылка)
			Или Не Документ.Проведен Тогда
			НепроведенныеПервичныеДокументы.Добавить(Документ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НепроведенныеПервичныеДокументы;
	
КонецФункции

&НаКлиенте
Процедура СпроситьПользователяОПроведенииПервичныхДокументовЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	БылиИсключенияИзМассива 		= ДополнительныеПараметры.БылиИсключенияИзМассива;
	МассивПервичныхДокументовИСМПТ	= ДополнительныеПараметры.МассивПервичныхДокументовИСМПТ;
	НепроведенныеПервичныеДокументы = ДополнительныеПараметры.НепроведенныеПервичныеДокументы;
	ИмяКоманды 						= ДополнительныеПараметры.ИмяКоманды;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Для Каждого Документ Из НепроведенныеПервичныеДокументы Цикл
			МассивПервичныхДокументовИСМПТ.Удалить(МассивПервичныхДокументовИСМПТ.Найти(Документ));
		КонецЦикла;
		
		БылиИсключенияИзМассива = Истина;
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		
		Попытка // выполняем проведение документа
			
			Для Каждого Документ Из НепроведенныеПервичныеДокументы Цикл
				Ключ 			= Новый Структура("Ключ", Документ);
				ИмяФормыОбъекта = "Документ." + ПолучитьТипДокументаПоСсылке(Документ) + ".ФормаОбъекта";
				Форма 			= ПолучитьФорму(ИмяФормыОбъекта, Ключ);
				Форма.Записать(ПараметрыЗаписи);
			КонецЦикла;
			
		Исключение
			
			Информация 	   = ИнформацияОбОшибке();
			ТекстСообщения = НСтр("ru='Не удалось провести документ по причине: %1'");
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,,,);
			
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	ПродолжитьСозданиеСпискаДокументовИСМПТ(МассивПервичныхДокументовИСМПТ, БылиИсключенияИзМассива, ИмяКоманды);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТипДокументаПоСсылке(СсылкаНаДокумент)
	
	Возврат СсылкаНаДокумент.Метаданные().Имя;	
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СпискиДокументовИСМПТ

&НаКлиенте
Процедура СписокАПП(Знач Направление = Неопределено) Экспорт
	
	Если Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда
		ОткрытьФорму("Документ.АктПриемаПередачиИСМПТК.Форма.ФормаСпискаВходящих");
	ИначеЕсли Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
		ОткрытьФорму("Документ.АктПриемаПередачиИСМПТК.Форма.ФормаСпискаИсходящих");
	Иначе
		ОткрытьФорму("Документ.АктПриемаПередачиИСМПТК.ФормаСписка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокУведомлениеОВвозеИзЕАЭС(Знач Направление = Неопределено) Экспорт
	
	ОткрытьФорму("Документ.УведомлениеОВвозеИзЕАЭСИСМПТК.ФормаСписка");
		
КонецПроцедуры

&НаКлиенте
Процедура СписокУведомлениеОВвозеИзТретьихСтран(Знач Направление = Неопределено) Экспорт
	
	ОткрытьФорму("Документ.УведомлениеОВвозеИзТретьихСтранИСМПТК.ФормаСписка");
		
КонецПроцедуры

&НаКлиенте
Процедура СписокУведомлениеОВводеВОборот(Знач Направление = Неопределено) Экспорт
	
	ОткрытьФорму("Документ.УведомлениеОВводеВОборотИСМПТК.ФормаСписка");
		
КонецПроцедуры

&НаКлиенте
Процедура СписокУведомлениеОВыводеИзОборота(Знач Направление = Неопределено) Экспорт
	
	ОткрытьФорму("Документ.УведомлениеОВыводеИзОборотаИСМПТК.ФормаСписка");
		
КонецПроцедуры

&НаКлиенте
Процедура СписокУведомлениеОРасхождении(Знач Направление = Неопределено) Экспорт
	
	Если Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда
		ОткрытьФорму("Документ.УведомлениеОРасхожденииИСМПТК.Форма.ФормаСпискаВходящих");
	ИначеЕсли Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
		ОткрытьФорму("Документ.УведомлениеОРасхожденииИСМПТК.Форма.ФормаСпискаИсходящих");
	Иначе
		ОткрытьФорму("Документ.УведомлениеОРасхожденииИСМПТК.ФормаСписка");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаИсходящихУвВвозИзЕАЭС() Экспорт
	
	ОткрытьФорму("Документ.УведомлениеОВвозеИзЕАЭСИСМПТК.Форма.ФормаСпискаИсходящих");
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаИсходящихУвВвозИзТретьихСтран() Экспорт
	
	ОткрытьФорму("Документ.УведомлениеОВвозеИзТретьихСтранИСМПТК.Форма.ФормаСпискаИсходящих");
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаИсходящихВИО() Экспорт
	
	ОткрытьФорму("Документ.УведомлениеОВыводеИзОборотаИСМПТК.Форма.ФормаСпискаИсходящих");
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаИсходящихВВО() Экспорт
	
	ОткрытьФорму("Документ.УведомлениеОВводеВОборотИСМПТК.Форма.ФормаСпискаИсходящих");
			
КонецПроцедуры

#КонецОбласти

#Область ПерезаполнениеПоОснованию

#Область АктПриемаПередачи

&НаКлиенте
Процедура ПерезаполнитьАПП(Знач Параметр) Экспорт
	
	МассивИСМПТ = ИнтеграцияИСМПТККлиент.МассивДокументовИСМПТ(Параметр);
	
	Если МассивИСМПТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивИСМПТ.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите хотя бы один Акт приема/передачи.'"));
		Возврат;
	КонецЕсли;
	
	СоответствиеДляОбновленияАктуальныхОснований = ИнтеграцияИСМПТКВызовСервера.НовоеСоответствиеДляОбновленияАктуальныхОснований(МассивИСМПТ);
	
	ПерезаполнитьАППЗавершение = Новый ОписаниеОповещения("ПерезаполнитьАППЗавершение", ЭтаФорма, Новый Структура("СоответствиеДляОбновленияАктуальныхОснований", СоответствиеДляОбновленияАктуальныхОснований));
	
	Если СоответствиеДляОбновленияАктуальныхОснований.Количество() = МассивИСМПТ.Количество() Тогда
		
		Если СоответствиеДляОбновленияАктуальныхОснований.Количество() > 1 Тогда 
			ПоказатьВопрос(ПерезаполнитьАППЗавершение, НСтр("ru = 'Перезаполнить Акты на основании документов-оснований (данные по кодам маркировки будут очищены)?'"), РежимДиалогаВопрос.ОКОтмена);
		ИначеЕсли СоответствиеДляОбновленияАктуальныхОснований.Количество() = 1 Тогда
			ТекстВопроса = НСтр("ru = 'Перезаполнить ""%АПП%"" на основании документа-основания (данные по кодам маркировки будут очищены)?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%АПП%", МассивИСМПТ[0]);
			ПоказатьВопрос(ПерезаполнитьАППЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		КонецЕсли;
		
	ИначеЕсли СоответствиеДляОбновленияАктуальныхОснований.Количество() <> 0 Тогда
		
		ТекстВопроса = НСтр(
			"ru = 'Невозможно перезаполнить все Акты приема/передачи.
             |
             |Всего Актов: %ВсегоКоличество% шт.
             |Возможно перезаполнить: %ВозможноКоличество% шт.
             |
             |Перезаполнить Акты приема/передачи, которые возможно перезаполнить?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ВсегоКоличество%", 	 МассивИСМПТ.Количество());
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ВозможноКоличество%", СоответствиеДляОбновленияАктуальныхОснований.Количество());
		ПоказатьВопрос(ПерезаполнитьАППЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьАППЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		
		ИсключаемыеРеквизиты = "Идентификатор, НомерИСМПТ, ДатаВИСМПТ, ТипАкта, ЭтоКорректировка, Направление, Статус, Состояние, СвязанныйАкт," + 
							   "РегистрационныйНомерСвязанногоАкта, УведомлениеОРасхождении, РегНомерНаБумажномНосителе, ДатаВыпискиНаБумажномНосителе," + 
		                       "Комментарий, Автор, Проверен"; 
		
		СоответствиеДляОбновленияАктуальныхОснований = ДополнительныеПараметры.СоответствиеДляОбновленияАктуальныхОснований;
		ИнтеграцияИСМПТКВызовСервера.ОбновитьАктуальныеДокументыИСМПТ(СоответствиеДляОбновленияАктуальныхОснований, ИсключаемыеРеквизиты);
		ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьАктПриемаПередачи());
		
		Если СоответствиеДляОбновленияАктуальныхОснований.Количество() > 1 Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Акты приема/передачи успешно перезаполнены.'"));
		ИначеЕсли СоответствиеДляОбновленияАктуальныхОснований.Количество() = 1 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Акт приема/передачи успешно перезаполнен.'"));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область УведомлениеОРасхождении

&НаКлиенте
Процедура ПерезаполнитьУОР(Знач Параметр) Экспорт
	
	МассивИСМПТ = ИнтеграцияИСМПТККлиент.МассивДокументовИСМПТ(Параметр);
	
	Если МассивИСМПТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивИСМПТ.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите хотя бы один документ.'"));
		Возврат;
	КонецЕсли;
	
	СоответствиеДляОбновленияАктуальныхОснований = ИнтеграцияИСМПТКВызовСервера.НовоеСоответствиеДляОбновленияАктуальныхОснований(МассивИСМПТ);
	
	ПерезаполнитьУОРЗавершение = Новый ОписаниеОповещения("ПерезаполнитьУОРЗавершение", ЭтаФорма, Новый Структура("СоответствиеДляОбновленияАктуальныхОснований", СоответствиеДляОбновленияАктуальныхОснований));
	
	Если СоответствиеДляОбновленияАктуальныхОснований.Количество() = МассивИСМПТ.Количество() Тогда
		
		Если СоответствиеДляОбновленияАктуальныхОснований.Количество() > 1 Тогда 
			ПоказатьВопрос(ПерезаполнитьУОРЗавершение, НСтр("ru = 'Перезаполнить Уведомления на основании документов-оснований (данные по кодам маркировки будут заполнены по результатам сверки товаров в связанных Актах)?'"), РежимДиалогаВопрос.ОКОтмена);
		ИначеЕсли СоответствиеДляОбновленияАктуальныхОснований.Количество() = 1 Тогда
			ТекстВопроса = НСтр("ru = 'Перезаполнить ""%ДокументИСМПТ%"" на основании документа-основания (данные по кодам маркировки будут заполнены по результатам сверки товаров в связанном Акте)?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ДокументИСМПТ%", МассивИСМПТ[0]);
			ПоказатьВопрос(ПерезаполнитьУОРЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		КонецЕсли;
		
	ИначеЕсли СоответствиеДляОбновленияАктуальныхОснований.Количество() <> 0 Тогда
		
		ТекстВопроса = НСтр(
			"ru = 'Невозможно перезаполнить все Уведомления.
             |
             |Всего Уведомлений: %ВсегоКоличество% шт.
             |Возможно перезаполнить: %ВозможноКоличество% шт.
             |
             |Перезаполнить Уведомления, которые возможно перезаполнить?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ВсегоКоличество%", 	 МассивИСМПТ.Количество());
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ВозможноКоличество%", СоответствиеДляОбновленияАктуальныхОснований.Количество());
		ПоказатьВопрос(ПерезаполнитьУОРЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьУОРЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		
		ИсключаемыеРеквизиты = "Идентификатор, НомерИСМПТ, ДатаВИСМПТ, Направление, Статус, Состояние, СвязанныйАкт, АктКорректировка," +
							   "РегистрационныйНомерСвязанногоАкта, РегНомерНаБумажномНосителе, ДатаВыпискиНаБумажномНосителе, Комментарий, Автор";   
							   
		СоответствиеДляОбновленияАктуальныхОснований = ДополнительныеПараметры.СоответствиеДляОбновленияАктуальныхОснований;
		ИнтеграцияИСМПТКВызовСервера.ОбновитьАктуальныеДокументыИСМПТ(СоответствиеДляОбновленияАктуальныхОснований, ИсключаемыеРеквизиты);
		ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОРасхождении());
		
		Если СоответствиеДляОбновленияАктуальныхОснований.Количество() > 1 Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Уведомления успешно перезаполнены.'"));
		ИначеЕсли СоответствиеДляОбновленияАктуальныхОснований.Количество() = 1 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Уведомление успешно перезаполнено.'"));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область УведомлениеОВыводеИзОборота

&НаКлиенте
Процедура ПерезаполнитьВыводИзОборота(Знач Параметр) Экспорт
	
	МассивИСМПТ = ИнтеграцияИСМПТККлиент.МассивДокументовИСМПТ(Параметр);
	
	Если МассивИСМПТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивИСМПТ.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите хотя бы один документ.'"));
		Возврат;
	КонецЕсли;
	
	СоответствиеДляОбновленияАктуальныхОснований = ИнтеграцияИСМПТКВызовСервера.НовоеСоответствиеДляОбновленияАктуальныхОснований(МассивИСМПТ);
	
	ПерезаполнитьВыводИзОборотаЗавершение = Новый ОписаниеОповещения("ПерезаполнитьВыводИзОборотаЗавершение", ЭтаФорма, Новый Структура("СоответствиеДляОбновленияАктуальныхОснований", СоответствиеДляОбновленияАктуальныхОснований));
	
	Если СоответствиеДляОбновленияАктуальныхОснований.Количество() = МассивИСМПТ.Количество() Тогда
		
		Если СоответствиеДляОбновленияАктуальныхОснований.Количество() > 1 Тогда 
			ПоказатьВопрос(ПерезаполнитьВыводИзОборотаЗавершение, НСтр("ru = 'Перезаполнить Уведомления на основании документов-оснований (данные по кодам маркировки будут очищены)?'"), РежимДиалогаВопрос.ОКОтмена);
		ИначеЕсли СоответствиеДляОбновленияАктуальныхОснований.Количество() = 1 Тогда
			ТекстВопроса = НСтр("ru = 'Перезаполнить ""%ДокументИСМПТ%"" на основании документа-основания (данные по кодам маркировки будут очищены)?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ДокументИСМПТ%", МассивИСМПТ[0]);
			ПоказатьВопрос(ПерезаполнитьВыводИзОборотаЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		КонецЕсли;
		
	ИначеЕсли СоответствиеДляОбновленияАктуальныхОснований.Количество() <> 0 Тогда
		
		ТекстВопроса = НСтр(
			"ru = 'Невозможно перезаполнить все Уведомления.
             |
             |Всего Уведомлений: %ВсегоКоличество% шт.
             |Возможно перезаполнить: %ВозможноКоличество% шт.
             |
             |Перезаполнить Уведомления, которые возможно перезаполнить?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ВсегоКоличество%", 	 МассивИСМПТ.Количество());
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ВозможноКоличество%", СоответствиеДляОбновленияАктуальныхОснований.Количество());
		ПоказатьВопрос(ПерезаполнитьВыводИзОборотаЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьВыводИзОборотаЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		
		ИсключаемыеРеквизиты = "Идентификатор, НомерИСМПТ, ДатаВИСМПТ, Направление, Статус, Состояние, ПричинаВыводаИзОборота," + 
							   "Комментарий, Автор";
		
		
		СоответствиеДляОбновленияАктуальныхОснований = ДополнительныеПараметры.СоответствиеДляОбновленияАктуальныхОснований;
		ИнтеграцияИСМПТКВызовСервера.ОбновитьАктуальныеДокументыИСМПТ(СоответствиеДляОбновленияАктуальныхОснований, ИсключаемыеРеквизиты);
		ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВыводеИзОборота());
		
		Если СоответствиеДляОбновленияАктуальныхОснований.Количество() > 1 Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Уведомления успешно перезаполнены.'"));
		ИначеЕсли СоответствиеДляОбновленияАктуальныхОснований.Количество() = 1 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Уведомление успешно перезаполнено.'"));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область УведомлениеОВводеВОборот

&НаКлиенте
Процедура ПерезаполнитьВводВОборот(Знач Параметр) Экспорт
	
	МассивИСМПТ = ИнтеграцияИСМПТККлиент.МассивДокументовИСМПТ(Параметр);
	
	Если МассивИСМПТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивИСМПТ.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите хотя бы один документ.'"));
		Возврат;
	КонецЕсли;
	
	СоответствиеДляОбновленияАктуальныхОснований = ИнтеграцияИСМПТКВызовСервера.НовоеСоответствиеДляОбновленияАктуальныхОснований(МассивИСМПТ);
	
	ПерезаполнитьВводВОборотЗавершение = Новый ОписаниеОповещения("ПерезаполнитьВводВОборотЗавершение", ЭтаФорма, Новый Структура("СоответствиеДляОбновленияАктуальныхОснований", СоответствиеДляОбновленияАктуальныхОснований));
	
	Если СоответствиеДляОбновленияАктуальныхОснований.Количество() = МассивИСМПТ.Количество() Тогда
		
		Если СоответствиеДляОбновленияАктуальныхОснований.Количество() > 1 Тогда 
			ПоказатьВопрос(ПерезаполнитьВводВОборотЗавершение, НСтр("ru = 'Перезаполнить Уведомления на основании документов-оснований (данные по кодам маркировки будут очищены)?'"), РежимДиалогаВопрос.ОКОтмена);
		ИначеЕсли СоответствиеДляОбновленияАктуальныхОснований.Количество() = 1 Тогда
			ТекстВопроса = НСтр("ru = 'Перезаполнить ""%ДокументИСМПТ%"" на основании документа-основания (данные по кодам маркировки будут очищены)?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ДокументИСМПТ%", МассивИСМПТ[0]);
			ПоказатьВопрос(ПерезаполнитьВводВОборотЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		КонецЕсли;
		
	ИначеЕсли СоответствиеДляОбновленияАктуальныхОснований.Количество() <> 0 Тогда
		
		ТекстВопроса = НСтр(
			"ru = 'Невозможно перезаполнить все Уведомления.
             |
             |Всего Уведомлений: %ВсегоКоличество% шт.
             |Возможно перезаполнить: %ВозможноКоличество% шт.
             |
             |Перезаполнить Уведомления, которые возможно перезаполнить?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ВсегоКоличество%", 	 МассивИСМПТ.Количество());
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ВозможноКоличество%", СоответствиеДляОбновленияАктуальныхОснований.Количество());
		ПоказатьВопрос(ПерезаполнитьВводВОборотЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьВводВОборотЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		
		ИсключаемыеРеквизиты = "Идентификатор, НомерИСМПТ, ДатаВИСМПТ, Направление, Статус, Состояние, ПричинаВводаВОборот," + 
							   "Комментарий, Автор";
		
		СоответствиеДляОбновленияАктуальныхОснований = ДополнительныеПараметры.СоответствиеДляОбновленияАктуальныхОснований;
		ИнтеграцияИСМПТКВызовСервера.ОбновитьАктуальныеДокументыИСМПТ(СоответствиеДляОбновленияАктуальныхОснований, ИсключаемыеРеквизиты);
		ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВводеВОборот());
		
		Если СоответствиеДляОбновленияАктуальныхОснований.Количество() > 1 Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Уведомления успешно перезаполнены.'"));
		ИначеЕсли СоответствиеДляОбновленияАктуальныхОснований.Количество() = 1 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Уведомление успешно перезаполнено.'"));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область УведомлениеОВвозе

&НаКлиенте
Процедура ПерезаполнитьВвозТоваров(Знач Параметр) Экспорт
	
	МассивИСМПТ = ИнтеграцияИСМПТККлиент.МассивДокументовИСМПТ(Параметр);
	
	Если МассивИСМПТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивИСМПТ.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите хотя бы один документ.'"));
		Возврат;
	КонецЕсли;

	СоответствиеДляОбновленияАктуальныхОснований = ИнтеграцияИСМПТКВызовСервера.НовоеСоответствиеДляОбновленияАктуальныхОснований(МассивИСМПТ);
	
	Если ТипЗнч(МассивИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК") Тогда
		ПерезаполнитьВвозТоваровЗавершение = Новый ОписаниеОповещения("ПерезаполнитьВвозТоваровЕАЭСЗавершение", ЭтаФорма, Новый Структура("СоответствиеДляОбновленияАктуальныхОснований", СоответствиеДляОбновленияАктуальныхОснований));
	Иначе
		ПерезаполнитьВвозТоваровЗавершение = Новый ОписаниеОповещения("ПерезаполнитьВвозТоваровТретьиСтраныЗавершение", ЭтаФорма, Новый Структура("СоответствиеДляОбновленияАктуальныхОснований", СоответствиеДляОбновленияАктуальныхОснований));
	КонецЕсли;
	
	Если СоответствиеДляОбновленияАктуальныхОснований.Количество() = МассивИСМПТ.Количество() Тогда
		
		Если СоответствиеДляОбновленияАктуальныхОснований.Количество() > 1 Тогда 
			ПоказатьВопрос(ПерезаполнитьВвозТоваровЗавершение, НСтр("ru = 'Перезаполнить Уведомления на основании документов-оснований (введенные данные будут очищены)?'"), РежимДиалогаВопрос.ОКОтмена);
		ИначеЕсли СоответствиеДляОбновленияАктуальныхОснований.Количество() = 1 Тогда
			ТекстВопроса = НСтр("ru = 'Перезаполнить ""%ДокументИСМПТ%"" на основании документа-основания (введенные данные будут очищены)?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ДокументИСМПТ%", МассивИСМПТ[0]);
			ПоказатьВопрос(ПерезаполнитьВвозТоваровЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		КонецЕсли;
		
	ИначеЕсли СоответствиеДляОбновленияАктуальныхОснований.Количество() <> 0 Тогда
		
		ТекстВопроса = НСтр(
			"ru = 'Невозможно перезаполнить все Уведомления.
             |
             |Всего Уведомлений: %ВсегоКоличество% шт.
             |Возможно перезаполнить: %ВозможноКоличество% шт.
             |
             |Перезаполнить Уведомления, которые возможно перезаполнить?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ВсегоКоличество%", 	 МассивИСМПТ.Количество());
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ВозможноКоличество%", СоответствиеДляОбновленияАктуальныхОснований.Количество());
		ПоказатьВопрос(ПерезаполнитьВвозТоваровЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьВвозТоваровЕАЭСЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		
		СоответствиеДляОбновленияАктуальныхОснований = ДополнительныеПараметры.СоответствиеДляОбновленияАктуальныхОснований;
		ИсключаемыеРеквизиты = "Идентификатор, НомерИСМПТ, ДатаВИСМПТ, Направление, Статус, Состояние, ТипУведомления, ЭтоКорректировка, СвязанноеУведомление," +
		                       "РегистрационныйНомерСвязанногоУведомления, ДатаСвязанногоУведомления, ДатаВыпискиНаБумажномНосителе, РегНомерНаБумажномНосителе," +   
							   "СтранаОтправления, ДатаУплатыАкциза, НомерКвитанцииАкциза, СуммаАкциза, Комментарий, Автор";
		ИсключаемыеТабличныеЧасти = "ДокументыСоответствия";
		
		ИнтеграцияИСМПТКВызовСервера.ОбновитьАктуальныеДокументыИСМПТ(СоответствиеДляОбновленияАктуальныхОснований, ИсключаемыеРеквизиты, ИсключаемыеТабличныеЧасти);
		ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзЕАЭС());
		
		Если СоответствиеДляОбновленияАктуальныхОснований.Количество() > 1 Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Уведомления успешно перезаполнены.'"));
		ИначеЕсли СоответствиеДляОбновленияАктуальныхОснований.Количество() = 1 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Уведомление успешно перезаполнено.'"));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьВвозТоваровТретьиСтраныЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		
		СоответствиеДляОбновленияАктуальныхОснований = ДополнительныеПараметры.СоответствиеДляОбновленияАктуальныхОснований;
		ИсключаемыеРеквизиты = "Идентификатор, НомерИСМПТ, ДатаВИСМПТ, Направление, Статус, Состояние, ТипУведомления, ДатаВыпискиНаБумажномНосителе, РегНомерНаБумажномНосителе," + 
							   "СтранаОтправления, ТипДокументаТаможенногоОформления, НомерДокументаТаможенногоОформления, ДатаДокументаТаможенногоОформления, КодТаможенногоОргана," +
							   "КодРешенияТаможенногоОргана, ДатаВремяПринятияРешения, Комментарий, Автор";
		ИсключаемыеТабличныеЧасти = "ДокументыСоответствия, Марки, Товары";
		
		ИнтеграцияИСМПТКВызовСервера.ОбновитьАктуальныеДокументыИСМПТ(СоответствиеДляОбновленияАктуальныхОснований, ИсключаемыеРеквизиты, ИсключаемыеТабличныеЧасти);
		ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзТретьихСтран());
		
		Если СоответствиеДляОбновленияАктуальныхОснований.Количество() > 1 Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Уведомления успешно перезаполнены.'"));
		ИначеЕсли СоответствиеДляОбновленияАктуальныхОснований.Количество() = 1 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Уведомление успешно перезаполнено.'"));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти   

#Область ТокенАвторизации

&НаКлиенте
Процедура ПроверитьТокенИВыбратьКлючПриНебходимости(ОписаниеОповещения, ПараметрыФормы, СписокСтруктурныхЕдиниц) Экспорт
	
	Для Каждого КлючИЗначение Из СписокСтруктурныхЕдиниц Цикл
		
		Организация = КлючИЗначение.Ключ;
		ТипДокумента = "АктПриемаПередачиИСМПТК";
		КлючСессии = ПолучитьТокенАвторизации(Организация, ТипДокумента);
					
	КонецЦикла;	
	
	Если Не КлючСессии = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КлючСессии);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеТокенаЗавершение(ДанныеКлючейОрганизаций, ДополнительныеПараметры) Экспорт
	
	Если ДанныеКлючейОрганизаций <> Неопределено Тогда
		
		ВсеТокеныПолученыУспешно = Истина;
		
		Для Каждого Соответствие из ДанныеКлючейОрганизаций Цикл
			
			ТипДокумента = "АктПриемаПередачиИСМПТК";
			Токен = ИнтеграцияИСМПТКВызовСервера.ПолучитьТокенАвторизации(Соответствие.Ключ, ТипДокумента);
			ТокенПолученУспешно = НЕ(Токен = Неопределено);
			
			Если ТокенПолученУспешно = Ложь Тогда
				ВсеТокеныПолученыУспешно = Ложь;	
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВсеТокеныПолученыУспешно Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения);	
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТокенАвторизации(Организация = Неопределено, ТипДокумента = Неопределено) Экспорт
	
	Возврат ИнтеграцияИСМПТККлиент.ПолучитьТокенАвторизации(Организация, ТипДокумента);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПрочитатьЗначениеJSON_Маркировка(СтрокаJSON, СвойстваДаты = "") Экспорт
	
	Результат = Неопределено;
	#Если ВебКлиент Тогда
		Результат = ИнтеграцияИСМПТКВызовСервера.ПрочитатьЗначениеJSON_Маркировка(СтрокаJSON, СвойстваДаты);
	#Иначе
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(СтрокаJSON);
		
		Результат = ПрочитатьJSON(Чтение, Ложь, СвойстваДаты);
		Чтение.Закрыть();
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

//Определяет тип документа по ссылке
//
Функция ОпределитьТипДокументаПоСсылке(ДокументСсылка)
	
	ТипДокументаИСМПТ = "";
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда
		
		ТипДокументаИСМПТ = "АктПриемаПередачиИСМПТК";
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") Тогда
		
		ТипДокументаИСМПТ = "УведомлениеОРасхожденииИСМПТК";
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСМПТК") Тогда
		
		ТипДокументаИСМПТ = "УведомлениеОВводеВОборотИСМПТК";
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК") Тогда
		
		ТипДокументаИСМПТ = "УведомлениеОВвозеИзЕАЭСИСМПТК";
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК") Тогда
		
		ТипДокументаИСМПТ = "УведомлениеОВвозеИзТретьихСтранИСМПТК";
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСМПТК") Тогда
		
		ТипДокументаИСМПТ = "УведомлениеОВыводеИзОборотаИСМПТК";
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК") Тогда
		
		ТипДокументаИСМПТ = "ЗаказКодовМаркировкиСУЗИСМПТК";
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АгрегацияКодовМаркировкиСУЗИСМПТК") Тогда
		
		ТипДокументаИСМПТ = "АгрегацияКодовМаркировкиСУЗИСМПТК";
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.НанесениеКодовМаркировкиСУЗИСМПТК") Тогда
		
		ТипДокументаИСМПТ = "НанесениеКодовМаркировкиСУЗИСМПТК";
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.УведомлениеОбЭкспортеЕАЭСИСМПТК") Тогда
		
		ТипДокументаИСМПТ = "УведомлениеОбЭкспортеЕАЭСИСМПТК";
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.УведомлениеОПриемкеЕАЭСИСМПТК") Тогда
		
		ТипДокументаИСМПТ = "УведомлениеОПриемкеЕАЭСИСМПТК";
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.УведомлениеОбОтгрузкеЕАЭСИСМПТК") Тогда
		
		ТипДокументаИСМПТ = "УведомлениеОбОтгрузкеЕАЭСИСМПТК";
		
	КонецЕсли;
	
	Возврат ТипДокументаИСМПТ;
	
КонецФункции

//Определяет имя события документа по типу
//
Функция ОпределитьИмяСобытияПоТипуДокумента(ТипДокументаИСМПТ)
	
	ИмяСобытия = "";
	Если ТипДокументаИСМПТ = "АктПриемаПередачиИСМПТК" Тогда
		
		ИмяСобытия = ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьАктПриемаПередачи();
		
	ИначеЕсли ТипДокументаИСМПТ = "УведомлениеОРасхожденииИСМПТК" Тогда
		
		ИмяСобытия = ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОРасхождении();
		
	ИначеЕсли ТипДокументаИСМПТ = "УведомлениеОВвозеИзЕАЭСИСМПТК" Тогда
		
		ИмяСобытия = ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзЕАЭС();
		
	ИначеЕсли ТипДокументаИСМПТ = "УведомлениеОВвозеИзТретьихСтранИСМПТК" Тогда
		
		ИмяСобытия = ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзТретьихСтран();
		
	ИначеЕсли ТипДокументаИСМПТ = "УведомлениеОВводеВОборотИСМПТК" Тогда
		
		ИмяСобытия = ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВводеВОборот();
		
	ИначеЕсли ТипДокументаИСМПТ = "УведомлениеОВыводеИзОборотаИСМПТК" Тогда
		
		ИмяСобытия = ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВыводеИзОборота();
		
	КонецЕсли;
	
	Возврат ИмяСобытия;
	
КонецФункции

Функция ВыполнятьКриптографическиеОперацииНаКлиенте() Экспорт
	
	Возврат Истина;
		
КонецФункции

&НаКлиенте
Функция ПолучитьТекущиюВерсиюМакета() Экспорт
	
	Возврат ИнтеграцияИСМПТКВызовСервера.ПолучитьТекущиюВерсиюМакета();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИдентификаторОрганизации(ОрганизацияСсылка)
	
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЗначениеРеквизитаОбъекта(ОрганизацияСсылка, 
		ИнтеграцияИСМПТКПереопределяемый.ПолучитьРеквизитИИНОрганизации());
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры