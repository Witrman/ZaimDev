#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытийМодуляОбъектаИСМПТ

#Область АктПриемаПередачиИСМПТ

Процедура ДокументАПП_ОбработкаЗаполнения(ОбъектДокументИСМПТ, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ДокументОснованиеДляЗаполнения = ДанныеЗаполнения.ДокументОснование;
	Иначе
		ДокументОснованиеДляЗаполнения = ДанныеЗаполнения;
	КонецЕсли;	
	
	Если ДокументОснованиеДляЗаполнения = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ДокументОснованиеДляЗаполнения) = Тип("Массив") 
		И ДокументОснованиеДляЗаполнения.Количество() <> 0 Тогда
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения[0]);
	Иначе
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения);
	КонецЕсли;
	
	//Если создается документ без основания
	Если ТипДокумента = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = ИнтеграцияИСМПТК.ПолучитьПараметрыЗаполненияДокументовИСМПТПоУмолчанию();
	 
	ДатаДокумента = ДокументОснованиеДляЗаполнения.Дата;
	
	ПараметрыЗаполнения.Вставить("ДатаНачала"			, НачалоДня(ДатаДокумента));
	ПараметрыЗаполнения.Вставить("ДатаОкончания"		, КонецДня(ДатаДокумента));
	
	ПараметрыЗаполнения.Вставить("МассивДокументов"		, ДокументОснованиеДляЗаполнения);
	ПараметрыЗаполнения.Вставить("МассивВидовДокумента"	, Новый Массив);
	
	ТипДокументаИСМПТ = Документы.АктПриемаПередачиИСМПТК.ПустаяСсылка();
	МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияДокументаИСМПТ(ПараметрыЗаполнения, ТипДокументаИСМПТ);
	
	Если ТипЗнч(МассивДанныхДляЗаполнения) = Тип("Массив") И МассивДанныхДляЗаполнения.Количество() > 0 Тогда
		
		Для Каждого СтруктураДокумента Из МассивДанныхДляЗаполнения Цикл
			
			Если МассивДанныхДляЗаполнения.Найти(СтруктураДокумента) > 0 Тогда
				НовыйДокументАПП = Документы.АктПриемаПередачиИСМПТК.СоздатьДокумент();
			Иначе
				НовыйДокументАПП = ОбъектДокументИСМПТ;
			КонецЕсли; 
		
			//Заполняем шапку документа
			ВидОперацииАПП = ИнтеграцияИСМПТКПереопределяемый.ПолучитьВидОперацииАПППооснованию(СтруктураДокумента.Реквизиты[0].ВидОперации);
			НовыйДокументАПП.ВидОперации = ВидОперацииАПП;
			ЗаполнитьЗначенияСвойств(НовыйДокументАПП, СтруктураДокумента.Реквизиты[0],, "ВидОперации");
			
			//Для АПП-Корректировки нужно переназначить Документ-Основание, т.е. требуется указывать основание из первичного АПП, но сам документ вводится на основании УОР
			Если НовыйДокументАПП.ЭтоКорректировка Тогда
				НовыйДокументАПП.ДокументОснование = СтруктураДокумента.Реквизиты[0].ДокументОснованиеИсточник;
			КонецЕсли; 
			НовыйДокументАПП.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий;
			НовыйДокументАПП.Состояние   = Перечисления.СостоянияДокументовИСМПТК.Сформирован;  
			НовыйДокументАПП.Статус      = Перечисления.СтатусыДокументовИСМПТК.Черновик;  		
			
			//Заполняем табличную часть
			Если НовыйДокументАПП.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исходный") Тогда
				Для Каждого СтрокаТЧ Из СтруктураДокумента.Товары Цикл
					НоваяСтрокаТЧ = НовыйДокументАПП.Товары.Добавить();
					НоваяСтрокаТЧ.Номенклатура = СтрокаТЧ.Номенклатура;
					НоваяСтрокаТЧ.КоличествоИсточник = СтрокаТЧ.КоличествоИсточник;
					НоваяСтрокаТЧ.ВидПродукцииИС = СтрокаТЧ.ВидПродукцииИС;
				КонецЦикла;
			Иначе
				Для Каждого СтрокаТЧ Из СтруктураДокумента.Марки Цикл
					НоваяСтрокаТЧ = НовыйДокументАПП.Марки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
				КонецЦикла;
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументАПП_ПередЗаписью(ОбъектДокументИСМПТ, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ОбъектДокументИСМПТ.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДокументИСМПТ.Состояние = ИнтеграцияИСМПТК.СостояниеДокументаИСМПТ(ОбъектДокументИСМПТ);
		
	Если НЕ ЗначениеЗаполнено(ОбъектДокументИСМПТ.Автор) Тогда
		ОбъектДокументИСМПТ.Автор = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокументИСМПТ.Контрагент) Тогда
		Если ОбъектДокументИСМПТ.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий Тогда
			ОбъектДокументИСМПТ.Контрагент = ОбъектДокументИСМПТ.Получатель;
		Иначе
			ОбъектДокументИСМПТ.Контрагент = ОбъектДокументИСМПТ.Поставщик;
		КонецЕсли;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ОбъектДокументИСМПТ.Статус) Тогда
		ОбъектДокументИСМПТ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик"); 
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокументИСМПТ.Номер)
		И ОбъектДокументИСМПТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
		ОбъектДокументИСМПТ.Номер = ИнтеграцияИСМПТКПереопределяемый.ПолучитьНомерНаПечать(ОбъектДокументИСМПТ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументАПП_ПриЗаписи(ОбъектДокументИСМПТ, Отказ) Экспорт
	
	Если ОбъектДокументИСМПТ.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исправленный") 
		И ЗначениеЗаполнено(ОбъектДокументИСМПТ.УведомлениеОРасхождении) Тогда
		УОР = ОбъектДокументИСМПТ.УведомлениеОРасхождении.ПолучитьОбъект();
		Если НЕ УОР = Неопределено Тогда
			УОР.АктКорректировка = ОбъектДокументИСМПТ.Ссылка;
			УОР.Записать();
		КонецЕсли;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ОбъектДокументИСМПТ.Контрагент) Тогда
		
		Если ОбъектДокументИСМПТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
			ОбъектДокументИСМПТ.Контрагент = ОбъектДокументИСМПТ.Получатель;
		Иначе
			ОбъектДокументИСМПТ.Контрагент = ОбъектДокументИСМПТ.Поставщик;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументАПП_ПриКопировании(ОбъектДокументИСМПТ, ОбъектКопирования) Экспорт
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Идентификатор) Тогда
		ОбъектДокументИСМПТ.Идентификатор = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.НомерИСМПТ) Тогда
		ОбъектДокументИСМПТ.НомерИСМПТ = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.ДатаВИСМПТ) Тогда
		ОбъектДокументИСМПТ.ДатаВИСМПТ = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Статус) Тогда
		ОбъектДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.Черновик;  
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.ДокументОснование) Тогда
		ОбъектДокументИСМПТ.ДокументОснование = Неопределено; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.СвязанныйАкт) Тогда
		ОбъектДокументИСМПТ.СвязанныйАкт = Неопределено;
	КонецЕсли;

	Если ЗначениеЗаполнено(ОбъектКопирования.РегистрационныйНомерСвязанногоАкта) Тогда
		ОбъектДокументИСМПТ.РегистрационныйНомерСвязанногоАкта = Неопределено;
	КонецЕсли;

	Если ЗначениеЗаполнено(ОбъектКопирования.УведомлениеОРасхождении) Тогда
		ОбъектДокументИСМПТ.УведомлениеОРасхождении = Неопределено;
	КонецЕсли;

	Если ЗначениеЗаполнено(ОбъектКопирования.Автор) Тогда
		ОбъектДокументИСМПТ.Автор = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Номер) Тогда
		ОбъектДокументИСМПТ.Номер = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Состояние) Тогда
		ОбъектДокументИСМПТ.Состояние = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Контрагент) Тогда
		ОбъектДокументИСМПТ.Контрагент = Неопределено;
	КонецЕсли;
	
	ОбъектДокументИСМПТ.Ошибки.Очистить(); 
	ОбъектДокументИСМПТ.Товары.Очистить();
	ОбъектДокументИСМПТ.Марки.Очистить();
	ОбъектДокументИСМПТ.Расхождения.Очистить();
	
КонецПроцедуры

Процедура ДокументАПП_ПередУдалением(ОбъектДокументИСМПТ, Отказ) Экспорт
	
	Если ОбъектДокументИСМПТ.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исправленный")
		И ЗначениеЗаполнено(ОбъектДокументИСМПТ.УведомлениеОРасхождении) Тогда
		УОР = ОбъектДокументИСМПТ.УведомлениеОРасхождении.ПолучитьОбъект();
		УОР.АктКорректировка = Документы.АктПриемаПередачиИСМПТК.ПустаяСсылка();
		УОР.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументАПП_ОбработкаПроверкиЗаполнения(ОбъектДокументИСМПТ, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	ИнтеграцияИСМПТКПереопределяемый.ДокументАПП_ОбработкаПроверкиЗаполнения(ОбъектДокументИСМПТ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	ИнтеграцияИСМПТКПереопределяемый.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ДокументАПП_ПриУстановкеНовогоНомера(ОбъектДокументИСМПТ, СтандартнаяОбработка, Префикс) Экспорт
	
	Если ОбъектДокументИСМПТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда
		Префикс = "В";
	ИначеЕсли ОбъектДокументИСМПТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
		Префикс = "И";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УведомлениеОРасхожденииИСМПТ

Процедура ДокументУОР_ОбработкаЗаполнения(ОбъектДокументИСМПТ, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ДокументОснованиеДляЗаполнения = ДанныеЗаполнения.ДокументОснование;
	Иначе
		ДокументОснованиеДляЗаполнения = ДанныеЗаполнения;
	КонецЕсли;	
	
	Если ДокументОснованиеДляЗаполнения = Неопределено Тогда
		Возврат
	ИначеЕсли ТипЗнч(ДокументОснованиеДляЗаполнения) = Тип("Массив") 
		И ДокументОснованиеДляЗаполнения.Количество() <> 0 Тогда
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения[0]);
	Иначе
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения);
	КонецЕсли;
	
	//Если создается документ без основания
	Если ТипДокумента = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	ПараметрыЗаполнения = ИнтеграцияИСМПТК.ПолучитьПараметрыЗаполненияДокументовИСМПТПоУмолчанию();
	
	ДатаДокумента = ДокументОснованиеДляЗаполнения.Дата;
	
	ПараметрыЗаполнения.Вставить("ДатаНачала"			, НачалоДня(ДатаДокумента));
	ПараметрыЗаполнения.Вставить("ДатаОкончания"		, КонецДня(ДатаДокумента));
	
	ПараметрыЗаполнения.Вставить("МассивДокументов"		, ДокументОснованиеДляЗаполнения);
	ПараметрыЗаполнения.Вставить("МассивВидовДокумента"	, Новый Массив);
	
	ТипДокументаИСМПТ = Документы.УведомлениеОРасхожденииИСМПТК.ПустаяСсылка();
	МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияДокументаИСМПТ(ПараметрыЗаполнения, ТипДокументаИСМПТ);
	
	Если ТипЗнч(МассивДанныхДляЗаполнения) = Тип("Массив") И МассивДанныхДляЗаполнения.Количество() > 0 Тогда
		
		Для Каждого СтруктураДокумента Из МассивДанныхДляЗаполнения Цикл
			
			Если МассивДанныхДляЗаполнения.Найти(СтруктураДокумента) > 0 Тогда
				НовыйДокументУОР = Документы.УведомлениеОРасхожденииИСМПТК.СоздатьДокумент();
			Иначе
				НовыйДокументУОР = ОбъектДокументИСМПТ;
			КонецЕсли; 
		
			//Заполняем шапку документа
			ЗаполнитьЗначенияСвойств(НовыйДокументУОР, СтруктураДокумента.Реквизиты[0]);
			НовыйДокументУОР.Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован;  
			
			//Заполняем табличную часть "Марки"
			Для Каждого СтрокаТЧ Из СтруктураДокумента.Марки Цикл
				
				НоваяСтрокаТЧ = НовыйДокументУОР.Марки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
				Если НоваяСтрокаТЧ.СтатусСверкиКода = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.Добавлен") Тогда
					НоваяСтрокаТЧ.Количество = 1;
					НоваяСтрокаТЧ.КоличествоИсточник = 1;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументУОР_ПередЗаписью(ОбъектДокументИСМПТ, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ОбъектДокументИСМПТ.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДокументИСМПТ.Состояние = ИнтеграцияИСМПТК.СостояниеДокументаИСМПТ(ОбъектДокументИСМПТ);
		
	Если НЕ ЗначениеЗаполнено(ОбъектДокументИСМПТ.Автор) Тогда
		ОбъектДокументИСМПТ.Автор = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокументИСМПТ.Контрагент) Тогда
		Если ОбъектДокументИСМПТ.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий Тогда
			ОбъектДокументИСМПТ.Контрагент = ОбъектДокументИСМПТ.Получатель;
		Иначе
			ОбъектДокументИСМПТ.Контрагент = ОбъектДокументИСМПТ.Поставщик;
		КонецЕсли;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ОбъектДокументИСМПТ.Статус) Тогда
		ОбъектДокументИСМПТ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик"); 
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокументИСМПТ.Номер)
		И ОбъектДокументИСМПТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
		ОбъектДокументИСМПТ.Номер = ИнтеграцияИСМПТКПереопределяемый.ПолучитьНомерНаПечать(ОбъектДокументИСМПТ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументУОР_ПриЗаписи(ОбъектДокументИСМПТ, Отказ) Экспорт
	
	Если ЗначениеЗаполнено(ОбъектДокументИСМПТ.СвязанныйАкт) Тогда
		ПервичныйАкт = ОбъектДокументИСМПТ.СвязанныйАкт.ПолучитьОбъект();
		ПервичныйАкт.УведомлениеОРасхождении = ОбъектДокументИСМПТ.Ссылка;
		ПервичныйАкт.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументУОР_ПриКопировании(ОбъектДокументИСМПТ, ОбъектКопирования) Экспорт
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Идентификатор) Тогда
		ОбъектДокументИСМПТ.Идентификатор = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.ДокументОснование) Тогда
		ОбъектДокументИСМПТ.ДокументОснование = Неопределено; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.НомерИСМПТ) Тогда
		ОбъектДокументИСМПТ.НомерИСМПТ = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.ДатаВИСМПТ) Тогда
		ОбъектДокументИСМПТ.ДатаВИСМПТ = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Статус) Тогда
		ОбъектДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.Черновик;  
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Номер) Тогда
		ОбъектДокументИСМПТ.Номер = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.РегистрационныйНомерСвязанногоАкта) Тогда
		ОбъектДокументИСМПТ.РегистрационныйНомерСвязанногоАкта = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Состояние) Тогда
		ОбъектДокументИСМПТ.Состояние = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Контрагент) Тогда
		ОбъектДокументИСМПТ.Контрагент = Неопределено;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ОбъектКопирования.СвязанныйАкт) Тогда
		ОбъектДокументИСМПТ.СвязанныйАкт = Неопределено;
	КонецЕсли;

	Если ЗначениеЗаполнено(ОбъектКопирования.АктКорректировка) Тогда
		ОбъектДокументИСМПТ.АктКорректировка = Неопределено;
	КонецЕсли;

	Если ЗначениеЗаполнено(ОбъектКопирования.Автор) Тогда
		ОбъектДокументИСМПТ.Автор = Неопределено;
	КонецЕсли;
	
	ОбъектДокументИСМПТ.Марки.Очистить();
	ОбъектДокументИСМПТ.Ошибки.Очистить();
	
КонецПроцедуры

Процедура ДокументУОР_ПередУдалением(ОбъектДокументИСМПТ, Отказ) Экспорт
	
	Если ЗначениеЗаполнено(ОбъектДокументИСМПТ.СвязанныйАкт) Тогда
		ПервичныйАкт = ОбъектДокументИСМПТ.СвязанныйАкт.ПолучитьОбъект();
		ПервичныйАкт.УведомлениеОРасхождении = Документы.УведомлениеОРасхожденииИСМПТК.ПустаяСсылка();
		ПервичныйАкт.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументУОР_ОбработкаПроверкиЗаполнения(ОбъектДокументИСМПТ, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	ИнтеграцияИСМПТКПереопределяемый.ДокументУОР_ОбработкаПроверкиЗаполнения(ОбъектДокументИСМПТ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	ИнтеграцияИСМПТКПереопределяемый.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ДокументУОР_ПриУстановкеНовогоНомера(ОбъектДокументИСМПТ, СтандартнаяОбработка, Префикс) Экспорт
	
	Если ОбъектДокументИСМПТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда
		Префикс = "В";
	ИначеЕсли ОбъектДокументИСМПТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
		Префикс = "И";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УведомлениеОбЭкспортеЕАЭСИСМПТК

Процедура ДокументЭкспортЕАЭС_ОбработкаЗаполнения(ОбъектДокументИСМПТ, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ДокументОснованиеДляЗаполнения = ДанныеЗаполнения.ДокументОснование;
	Иначе
		ДокументОснованиеДляЗаполнения = ДанныеЗаполнения;
	КонецЕсли;	
	
	Если ДокументОснованиеДляЗаполнения = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ДокументОснованиеДляЗаполнения) = Тип("Массив") 
		И ДокументОснованиеДляЗаполнения.Количество() <> 0 Тогда
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения[0]);
	Иначе
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения);
	КонецЕсли;
	
	//Если создается документ без основания
	Если ТипДокумента = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = ИнтеграцияИСМПТК.ПолучитьПараметрыЗаполненияДокументовИСМПТПоУмолчанию();
	 
	ДатаДокумента = ДокументОснованиеДляЗаполнения.Дата;
	
	ПараметрыЗаполнения.Вставить("ДатаНачала"			, НачалоДня(ДатаДокумента));
	ПараметрыЗаполнения.Вставить("ДатаОкончания"		, КонецДня(ДатаДокумента));
	
	ПараметрыЗаполнения.Вставить("МассивДокументов"		, ДокументОснованиеДляЗаполнения);
	ПараметрыЗаполнения.Вставить("МассивВидовДокумента"	, Новый Массив);
	
	ТипДокументаИСМПТ = Документы.УведомлениеОбЭкспортеЕАЭСИСМПТК.ПустаяСсылка();
	МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияДокументаИСМПТ(ПараметрыЗаполнения, ТипДокументаИСМПТ);
	
	Если ТипЗнч(МассивДанныхДляЗаполнения) = Тип("Массив") И МассивДанныхДляЗаполнения.Количество() > 0 Тогда
		
		Для Каждого СтруктураДокумента Из МассивДанныхДляЗаполнения Цикл
			
			Если МассивДанныхДляЗаполнения.Найти(СтруктураДокумента) > 0 Тогда
				НовыйДокументАПП = Документы.УведомлениеОбЭкспортеЕАЭСИСМПТК.СоздатьДокумент();
			Иначе
				НовыйДокументАПП = ОбъектДокументИСМПТ;
			КонецЕсли; 
		
			//Заполняем шапку документа
			ЗаполнитьЗначенияСвойств(НовыйДокументАПП, СтруктураДокумента.Реквизиты[0]);
			
			НовыйДокументАПП.Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован;  
			НовыйДокументАПП.Статус	   = Перечисления.СтатусыДокументовИСМПТК.Черновик;  		

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументЭкспортЕАЭС_ПередЗаписью(ОбъектДокументИСМПТ, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ОбъектДокументИСМПТ.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДокументИСМПТ.Состояние = ИнтеграцияИСМПТК.СостояниеДокументаИСМПТ(ОбъектДокументИСМПТ);
		
	Если НЕ ЗначениеЗаполнено(ОбъектДокументИСМПТ.Автор) Тогда
		ОбъектДокументИСМПТ.Автор = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокументИСМПТ.Контрагент) Тогда
		ОбъектДокументИСМПТ.Контрагент = ОбъектДокументИСМПТ.Получатель;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ОбъектДокументИСМПТ.Статус) Тогда
		ОбъектДокументИСМПТ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик"); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументЭкспортЕАЭС_ПриЗаписи(ОбъектДокументИСМПТ, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ОбъектДокументИСМПТ.Контрагент) Тогда
		ОбъектДокументИСМПТ.Контрагент = ОбъектДокументИСМПТ.Получатель;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументЭкспортЕАЭС_ПриКопировании(ОбъектДокументИСМПТ, ОбъектКопирования) Экспорт
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Идентификатор) Тогда
		ОбъектДокументИСМПТ.Идентификатор = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.НомерИСМПТ) Тогда
		ОбъектДокументИСМПТ.НомерИСМПТ = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.ДатаВИСМПТ) Тогда
		ОбъектДокументИСМПТ.ДатаВИСМПТ = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Номер) Тогда
		ОбъектДокументИСМПТ.Номер = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Идентификатор) Тогда
		ОбъектДокументИСМПТ.Идентификатор = Неопределено;
	КонецЕсли;

	Если ЗначениеЗаполнено(ОбъектКопирования.Автор) Тогда
		ОбъектДокументИСМПТ.Автор = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Статус) Тогда
		ОбъектДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.Черновик;  
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Состояние) Тогда
		ОбъектДокументИСМПТ.Состояние = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.ДокументОснование) Тогда
		ОбъектДокументИСМПТ.ДокументОснование = Неопределено; 
	КонецЕсли;

	Если ЗначениеЗаполнено(ОбъектКопирования.СтранаПолучатель) Тогда
		ОбъектДокументИСМПТ.СтранаПолучатель = Неопределено; 
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОбъектКопирования.НомерДокументаТрансграна) Тогда
		ОбъектДокументИСМПТ.НомерДокументаТрансграна = Неопределено; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.ДатаДокументаТрансграна) Тогда
		ОбъектДокументИСМПТ.ДатаДокументаТрансграна = Неопределено; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.ДатаВремяОтгрузки) Тогда
		ОбъектДокументИСМПТ.ДатаВремяОтгрузки = Неопределено; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Контрагент) Тогда
		ОбъектДокументИСМПТ.Контрагент = Неопределено;
	КонецЕсли;
	
	ОбъектДокументИСМПТ.Товары.Очистить();
	ОбъектДокументИСМПТ.ДокументыСоответствия.Очистить();
	ОбъектДокументИСМПТ.Марки.Очистить();
	ОбъектДокументИСМПТ.Ошибки.Очистить(); 
		
КонецПроцедуры

Процедура ДокументЭкспортЕАЭС_ПередУдалением(ОбъектДокументИСМПТ, Отказ) Экспорт
	
КонецПроцедуры

Процедура ДокументЭкспортЕАЭС_ОбработкаПроверкиЗаполнения(ОбъектДокументИСМПТ, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	ИнтеграцияИСМПТКПереопределяемый.ДокументЭкспортЕАЭС_ОбработкаПроверкиЗаполнения(ОбъектДокументИСМПТ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	ИнтеграцияИСМПТКПереопределяемый.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ДокументЭкспортЕАЭС_ПриУстановкеНовогоНомера(ОбъектДокументИСМПТ, СтандартнаяОбработка, Префикс) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область УведомлениеОПриемкеЕАЭСИСМПТК

Процедура ДокументПриемкаЕАЭС_ОбработкаЗаполнения(ОбъектДокументИСМПТ, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ДокументОснованиеДляЗаполнения = ДанныеЗаполнения.ДокументОснование;
	Иначе
		ДокументОснованиеДляЗаполнения = ДанныеЗаполнения;
	КонецЕсли;	
	
	Если ДокументОснованиеДляЗаполнения = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ДокументОснованиеДляЗаполнения) = Тип("Массив") 
		И ДокументОснованиеДляЗаполнения.Количество() <> 0 Тогда
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения[0]);
	Иначе
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения);
	КонецЕсли;
	
	//Если создается документ без основания
	Если ТипДокумента = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = ИнтеграцияИСМПТК.ПолучитьПараметрыЗаполненияДокументовИСМПТПоУмолчанию();
	 
	ДатаДокумента = ДокументОснованиеДляЗаполнения.Дата;
	
	ПараметрыЗаполнения.Вставить("ДатаНачала"			, НачалоДня(ДатаДокумента));
	ПараметрыЗаполнения.Вставить("ДатаОкончания"		, КонецДня(ДатаДокумента));
	
	ПараметрыЗаполнения.Вставить("МассивДокументов"		, ДокументОснованиеДляЗаполнения);
	ПараметрыЗаполнения.Вставить("МассивВидовДокумента"	, Новый Массив);
	
	ТипДокументаИСМПТ = Документы.УведомлениеОПриемкеЕАЭСИСМПТК.ПустаяСсылка();
	МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияДокументаИСМПТ(ПараметрыЗаполнения, ТипДокументаИСМПТ);
	
	Если ТипЗнч(МассивДанныхДляЗаполнения) = Тип("Массив") И МассивДанныхДляЗаполнения.Количество() > 0 Тогда
		
		Для Каждого СтруктураДокумента Из МассивДанныхДляЗаполнения Цикл
			
			Если МассивДанныхДляЗаполнения.Найти(СтруктураДокумента) > 0 Тогда
				НовыйДокументИСМПТ = Документы.УведомлениеОПриемкеЕАЭСИСМПТК.СоздатьДокумент();
			Иначе
				НовыйДокументИСМПТ = ОбъектДокументИСМПТ;
			КонецЕсли; 
		
			//Заполняем шапку документа
			ЗаполнитьЗначенияСвойств(НовыйДокументИСМПТ, СтруктураДокумента.Реквизиты[0]);
			
			НовыйДокументИСМПТ.Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован;  
			НовыйДокументИСМПТ.Статус 	 = Перечисления.СтатусыДокументовИСМПТК.НеОпределен;  		

			Для Каждого СтрокаТЧ Из СтруктураДокумента.Марки Цикл
				
				НоваяСтрокаМарки = НовыйДокументИСМПТ.Марки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаМарки, СтрокаТЧ);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументПриемкаЕАЭС_ПередЗаписью(ОбъектДокументИСМПТ, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ОбъектДокументИСМПТ.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДокументИСМПТ.Состояние = ИнтеграцияИСМПТК.СостояниеДокументаИСМПТ(ОбъектДокументИСМПТ);
		
	Если НЕ ЗначениеЗаполнено(ОбъектДокументИСМПТ.Автор) Тогда
		ОбъектДокументИСМПТ.Автор = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокументИСМПТ.Контрагент) Тогда
		ОбъектДокументИСМПТ.Контрагент = ОбъектДокументИСМПТ.Поставщик;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ОбъектДокументИСМПТ.Статус) Тогда
		ОбъектДокументИСМПТ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик"); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументОтгрузкаЕАЭС_ПередЗаписью(ОбъектДокументИСМПТ, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ОбъектДокументИСМПТ.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДокументИСМПТ.Состояние = ИнтеграцияИСМПТК.СостояниеДокументаИСМПТ(ОбъектДокументИСМПТ);
		
	Если НЕ ЗначениеЗаполнено(ОбъектДокументИСМПТ.Автор) Тогда
		ОбъектДокументИСМПТ.Автор = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокументИСМПТ.Контрагент) Тогда
		ОбъектДокументИСМПТ.Контрагент = ОбъектДокументИСМПТ.Поставщик;
	КонецЕсли;
		
КонецПроцедуры

Процедура ДокументПриемкаЕАЭС_ПриЗаписи(ОбъектДокументИСМПТ, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ОбъектДокументИСМПТ.Контрагент) Тогда
		ОбъектДокументИСМПТ.Контрагент = ОбъектДокументИСМПТ.Получатель;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументПриемкаЕАЭС_ОбработкаПроверкиЗаполнения(ОбъектДокументИСМПТ, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	ИнтеграцияИСМПТКПереопределяемый.ДокументПриемкаЕАЭС_ОбработкаПроверкиЗаполнения(ОбъектДокументИСМПТ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	ИнтеграцияИСМПТКПереопределяемый.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ДокументПриемкаЕАЭС_ПриУстановкеНовогоНомера(ОбъектДокументИСМПТ, СтандартнаяОбработка, Префикс) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область УведомлениеОВводеВОборотИСМПТ

Процедура ДокументВВО_ОбработкаЗаполнения(ОбъектДокументИСМПТ, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ДокументОснованиеДляЗаполнения = ДанныеЗаполнения.ДокументОснование;
	Иначе
		ДокументОснованиеДляЗаполнения = ДанныеЗаполнения;
	КонецЕсли;	
	
	Если ДокументОснованиеДляЗаполнения = Неопределено Тогда
		Возврат
	ИначеЕсли ТипЗнч(ДокументОснованиеДляЗаполнения) = Тип("Массив") 
		И ДокументОснованиеДляЗаполнения.Количество() <> 0 Тогда
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения[0]);
	Иначе
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения);
	КонецЕсли;
	
	//Если создается документ без основания
	Если ТипДокумента = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	ПараметрыЗаполнения = ИнтеграцияИСМПТК.ПолучитьПараметрыЗаполненияДокументовИСМПТПоУмолчанию();
	ДатаДокумента 		= ДокументОснованиеДляЗаполнения.Дата;
	
	ПараметрыЗаполнения.Вставить("ДатаНачала", 			 НачалоДня(ДатаДокумента));
	ПараметрыЗаполнения.Вставить("ДатаОкончания", 		 КонецДня(ДатаДокумента));
	
	ПараметрыЗаполнения.Вставить("МассивДокументов", 	 ДокументОснованиеДляЗаполнения);
	ПараметрыЗаполнения.Вставить("МассивВидовДокумента", Новый Массив);
	
	ТипДокументаИСМПТ 		  = Документы.УведомлениеОВводеВОборотИСМПТК.ПустаяСсылка();
	МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияДокументаИСМПТ(ПараметрыЗаполнения, ТипДокументаИСМПТ);
	
	Если ТипЗнч(МассивДанныхДляЗаполнения) = Тип("Массив") И МассивДанныхДляЗаполнения.Количество() > 0 Тогда
		
		Для Каждого СтруктураДокумента Из МассивДанныхДляЗаполнения Цикл
			
			Если МассивДанныхДляЗаполнения.Найти(СтруктураДокумента) > 0 Тогда
				НовыйДокументВВО = Документы.УведомлениеОВводеВОборотИСМПТК.СоздатьДокумент();
			Иначе
				НовыйДокументВВО = ОбъектДокументИСМПТ;
			КонецЕсли; 
		
			//Заполняем шапку документа
			ЗаполнитьЗначенияСвойств(НовыйДокументВВО, СтруктураДокумента.Реквизиты[0]);
			НовыйДокументВВО.Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован;  
			
			НовыйДокументВВО.ДокументОснованиеНаименование = Строка(ТипЗнч(НовыйДокументВВО.ДокументОснование));
			НовыйДокументВВО.ДокументОснованиеДата  = НовыйДокументВВО.ДокументОснование.Дата;
			НовыйДокументВВО.ДокументОснованиеНомер = НовыйДокументВВО.ДокументОснование.Номер; 			
			                
			Для Каждого СтрокаТЧ Из СтруктураДокумента.Товары Цикл
				НоваяСтрокаТЧ = НовыйДокументВВО.Товары.Добавить();
				НоваяСтрокаТЧ.Номенклатура 		 = СтрокаТЧ.Номенклатура;
				НоваяСтрокаТЧ.КоличествоИсточник = СтрокаТЧ.КоличествоИсточник;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументВВО_ПередЗаписью(ОбъектДокументИСМПТ, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ОбъектДокументИСМПТ.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДокументИСМПТ.Состояние = ИнтеграцияИСМПТК.СостояниеДокументаИСМПТ(ОбъектДокументИСМПТ);
		
	Если НЕ ЗначениеЗаполнено(ОбъектДокументИСМПТ.Автор) Тогда
		ОбъектДокументИСМПТ.Автор = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокументИСМПТ.Статус) Тогда
		ОбъектДокументИСМПТ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.НеОпределен");  
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокументИСМПТ.Номер)
		И ОбъектДокументИСМПТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
		ОбъектДокументИСМПТ.Номер = ИнтеграцияИСМПТКПереопределяемый.ПолучитьНомерНаПечать(ОбъектДокументИСМПТ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументВВО_ПриЗаписи(ОбъектДокументИСМПТ, Отказ) Экспорт
	
КонецПроцедуры

Процедура ДокументВВО_ПриКопировании(ОбъектДокументИСМПТ, ОбъектКопирования) Экспорт
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Идентификатор) Тогда
		ОбъектДокументИСМПТ.Идентификатор = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.ДокументОснование) Тогда
		ОбъектДокументИСМПТ.ДокументОснование = Неопределено; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.НомерИСМПТ) Тогда
		ОбъектДокументИСМПТ.НомерИСМПТ = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.ДатаВИСМПТ) Тогда
		ОбъектДокументИСМПТ.ДатаВИСМПТ = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Статус) Тогда
		ОбъектДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.НеОпределен;   
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Номер) Тогда
		ОбъектДокументИСМПТ.Номер = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Состояние) Тогда
		ОбъектДокументИСМПТ.Состояние = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Автор) Тогда
		ОбъектДокументИСМПТ.Автор = Неопределено;
	КонецЕсли;
	
	ОбъектДокументИСМПТ.ДокументОснованиеНаименование = ""; 
	ОбъектДокументИСМПТ.ДокументОснованиеДата  = ""; 
	ОбъектДокументИСМПТ.ДокументОснованиеНомер = "";
	
	ОбъектДокументИСМПТ.Ошибки.Очистить();
	ОбъектДокументИСМПТ.Товары.Очистить();
	ОбъектДокументИСМПТ.Марки.Очистить();
	
КонецПроцедуры

Процедура ДокументВВО_ПередУдалением(ОбъектДокументИСМПТ, Отказ) Экспорт
	
КонецПроцедуры

Процедура ДокументВВО_ОбработкаПроверкиЗаполнения(ОбъектДокументИСМПТ, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	ИнтеграцияИСМПТКПереопределяемый.ДокументВВО_ОбработкаПроверкиЗаполнения(ОбъектДокументИСМПТ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	ИнтеграцияИСМПТКПереопределяемый.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ДокументВВО_ПриУстановкеНовогоНомера(ОбъектДокументИСМПТ, СтандартнаяОбработка, Префикс) Экспорт
	
	Если ОбъектДокументИСМПТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда
		Префикс = "В";
	ИначеЕсли ОбъектДокументИСМПТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
		Префикс = "И";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УведомлениеОВыводеИзОборотаИСМПТ

Процедура ДокументВИО_ОбработкаЗаполнения(ОбъектДокументИСМПТ, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ДокументОснованиеДляЗаполнения = ДанныеЗаполнения.ДокументОснование;
	Иначе
		ДокументОснованиеДляЗаполнения = ДанныеЗаполнения;
	КонецЕсли;	
	
	Если ДокументОснованиеДляЗаполнения = Неопределено Тогда
		Возврат
	ИначеЕсли ТипЗнч(ДокументОснованиеДляЗаполнения) = Тип("Массив") 
		И ДокументОснованиеДляЗаполнения.Количество() <> 0 Тогда
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения[0]);
	Иначе
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения);
	КонецЕсли;
	
	//Если создается документ без основания
	Если ТипДокумента = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	ПараметрыЗаполнения = ИнтеграцияИСМПТК.ПолучитьПараметрыЗаполненияДокументовИСМПТПоУмолчанию();
	
	ДатаДокумента = ДокументОснованиеДляЗаполнения.Дата;
	
	ПараметрыЗаполнения.Вставить("ДатаНачала"			, НачалоДня(ДатаДокумента));
	ПараметрыЗаполнения.Вставить("ДатаОкончания"		, КонецДня(ДатаДокумента));
	
	ПараметрыЗаполнения.Вставить("МассивДокументов"		, ДокументОснованиеДляЗаполнения);
	ПараметрыЗаполнения.Вставить("МассивВидовДокумента"	, Новый Массив);
	
	ТипДокументаИСМПТ = Документы.УведомлениеОВыводеИзОборотаИСМПТК.ПустаяСсылка();
	МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияДокументаИСМПТ(ПараметрыЗаполнения, ТипДокументаИСМПТ);
	
	Если ТипЗнч(МассивДанныхДляЗаполнения) = Тип("Массив") И МассивДанныхДляЗаполнения.Количество() > 0 Тогда
		
		Для Каждого СтруктураДокумента Из МассивДанныхДляЗаполнения Цикл
			
			Если МассивДанныхДляЗаполнения.Найти(СтруктураДокумента) > 0 Тогда
				НовыйДокументВИО = Документы.УведомлениеОВыводеИзОборотаИСМПТК.СоздатьДокумент();
			Иначе
				НовыйДокументВИО = ОбъектДокументИСМПТ;
			КонецЕсли; 
		
			//Заполняем шапку документа
			ЗаполнитьЗначенияСвойств(НовыйДокументВИО, СтруктураДокумента.Реквизиты[0]);
			НовыйДокументВИО.Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован;  
			
			НовыйДокументВИО.ДокументОснованиеНаименование = Строка(ТипЗнч(НовыйДокументВИО.ДокументОснование));
			НовыйДокументВИО.ДокументОснованиеДата  = НовыйДокументВИО.ДокументОснование.Дата;
			НовыйДокументВИО.ДокументОснованиеНомер = НовыйДокументВИО.ДокументОснование.Номер;
			
			Если СтруктураДокумента.Свойство("Марки") Тогда
				
				Для Каждого СтрокаТЧ Из СтруктураДокумента.Марки Цикл
					НоваяСтрокаТЧ = НовыйДокументВИО.Марки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
				КонецЦикла;
								 
			ИначеЕсли СтруктураДокумента.Свойство("Товары") Тогда
				
				Для Каждого СтрокаТЧ Из СтруктураДокумента.Товары Цикл
					НоваяСтрокаТЧ = НовыйДокументВИО.Товары.Добавить();
					НоваяСтрокаТЧ.Номенклатура = СтрокаТЧ.Номенклатура;
					НоваяСтрокаТЧ.КоличествоИсточник = СтрокаТЧ.КоличествоИсточник;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументВИО_ПередЗаписью(ОбъектДокументИСМПТ, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ОбъектДокументИСМПТ.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДокументИСМПТ.Состояние = ИнтеграцияИСМПТК.СостояниеДокументаИСМПТ(ОбъектДокументИСМПТ);
		
	Если НЕ ЗначениеЗаполнено(ОбъектДокументИСМПТ.Автор) Тогда
		ОбъектДокументИСМПТ.Автор = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокументИСМПТ.Статус) Тогда
		ОбъектДокументИСМПТ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.НеОпределен");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокументИСМПТ.Номер)
		И ОбъектДокументИСМПТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
		ОбъектДокументИСМПТ.Номер = ИнтеграцияИСМПТКПереопределяемый.ПолучитьНомерНаПечать(ОбъектДокументИСМПТ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументВИО_ПриЗаписи(ОбъектДокументИСМПТ, Отказ) Экспорт
		
КонецПроцедуры

Процедура ДокументВИО_ПриКопировании(ОбъектДокументИСМПТ, ОбъектКопирования) Экспорт
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Идентификатор) Тогда
		ОбъектДокументИСМПТ.Идентификатор = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.ДокументОснование) Тогда
		ОбъектДокументИСМПТ.ДокументОснование = Неопределено; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.НомерИСМПТ) Тогда
		ОбъектДокументИСМПТ.НомерИСМПТ = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.ДатаВИСМПТ) Тогда
		ОбъектДокументИСМПТ.ДатаВИСМПТ = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Статус) Тогда
		ОбъектДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.НеОпределен;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Номер) Тогда
		ОбъектДокументИСМПТ.Номер = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Состояние) Тогда
		ОбъектДокументИСМПТ.Состояние = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.ПричинаВыводаИзОборота) Тогда
		ОбъектДокументИСМПТ.ПричинаВыводаИзОборота = Неопределено;
	КонецЕсли;

	Если ЗначениеЗаполнено(ОбъектКопирования.Автор) Тогда
		ОбъектДокументИСМПТ.Автор = Неопределено;
	КонецЕсли;
	
	ОбъектДокументИСМПТ.ДокументОснованиеНаименование = ""; 
	ОбъектДокументИСМПТ.ДокументОснованиеДата  = ""; 
	ОбъектДокументИСМПТ.ДокументОснованиеНомер = ""; 
		
	ОбъектДокументИСМПТ.Товары.Очистить();
	ОбъектДокументИСМПТ.Марки.Очистить();
	ОбъектДокументИСМПТ.Ошибки.Очистить();
	
КонецПроцедуры

Процедура ДокументВИО_ПередУдалением(ОбъектДокументИСМПТ, Отказ) Экспорт
	
КонецПроцедуры

Процедура ДокументВИО_ОбработкаПроверкиЗаполнения(ОбъектДокументИСМПТ, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	ИнтеграцияИСМПТКПереопределяемый.ДокументВИО_ОбработкаПроверкиЗаполнения(ОбъектДокументИСМПТ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	ИнтеграцияИСМПТКПереопределяемый.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ДокументВИО_ПриУстановкеНовогоНомера(ОбъектДокументИСМПТ, СтандартнаяОбработка, Префикс) Экспорт
	
	Если ОбъектДокументИСМПТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда
		Префикс = "В";
	ИначеЕсли ОбъектДокументИСМПТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
		Префикс = "И";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УведомлениеОВвозе

Процедура УведомлениеОВвозе_ОбработкаЗаполнения_ВвозИзЕАЭС(ОбъектДокументИСМПТ, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ДокументОснованиеДляЗаполнения = ДанныеЗаполнения.ДокументОснование;
	Иначе
		ДокументОснованиеДляЗаполнения = ДанныеЗаполнения;
	КонецЕсли;	
	
	Если ДокументОснованиеДляЗаполнения = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ДокументОснованиеДляЗаполнения) = Тип("Массив") 
		И ДокументОснованиеДляЗаполнения.Количество() <> 0 Тогда
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения[0]);
	Иначе
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения);
	КонецЕсли;
	
	//Если создается документ без основания
	Если ТипДокумента = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = ИнтеграцияИСМПТК.ПолучитьПараметрыЗаполненияДокументовИСМПТПоУмолчанию();
	 
	ДатаДокумента = ДокументОснованиеДляЗаполнения.Дата;
	
	ПараметрыЗаполнения.Вставить("ДатаНачала"			, НачалоДня(ДатаДокумента));
	ПараметрыЗаполнения.Вставить("ДатаОкончания"		, КонецДня(ДатаДокумента));
	
	ПараметрыЗаполнения.Вставить("МассивДокументов"		, ДокументОснованиеДляЗаполнения);
	ПараметрыЗаполнения.Вставить("МассивВидовДокумента"	, Новый Массив);
	ПараметрыЗаполнения.Вставить("ДокументИСМПТ"		, "УведомлениеОВвозеИзЕАЭСИСМПТК");
	
	ТипДокументаИСМПТ = Документы.УведомлениеОВвозеИзЕАЭСИСМПТК.ПустаяСсылка();
	МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияДокументаИСМПТ(ПараметрыЗаполнения, ТипДокументаИСМПТ);
	
	Если ТипЗнч(МассивДанныхДляЗаполнения) = Тип("Массив") И МассивДанныхДляЗаполнения.Количество() > 0 Тогда
		
		Для Каждого СтруктураДокумента Из МассивДанныхДляЗаполнения Цикл
			
			Если МассивДанныхДляЗаполнения.Найти(СтруктураДокумента) > 0 Тогда
				НовыйУведомлениеОВвозе = Документы.УведомлениеОВвозеИзЕАЭСИСМПТК.СоздатьДокумент();
			Иначе
				НовыйУведомлениеОВвозе = ОбъектДокументИСМПТ;
			КонецЕсли; 
		
			//Заполняем шапку документа
			ЗаполнитьЗначенияСвойств(НовыйУведомлениеОВвозе, СтруктураДокумента.Реквизиты[0]);
			НовыйУведомлениеОВвозе.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий;
			НовыйУведомлениеОВвозе.Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован;  
			НовыйУведомлениеОВвозе.Статус = Перечисления.СтатусыДокументовИСМПТК.НеОпределен;  		
			НовыйУведомлениеОВвозе.СтранаОтправления = СтруктураДокумента.Реквизиты[0].СтранаРегистрации;
			
			//Заполняем табличную часть
			Для Каждого СтрокаТЧ Из СтруктураДокумента.Товары Цикл
				НоваяСтрокаТЧ = НовыйУведомлениеОВвозе.Товары.Добавить();
				НоваяСтрокаТЧ.Номенклатура 		 = СтрокаТЧ.Номенклатура;
				НоваяСтрокаТЧ.КоличествоИсточник = СтрокаТЧ.КоличествоИсточник;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УведомлениеОВвозе_ОбработкаЗаполнения_ВвозИзТретьихСтран(ОбъектДокументИСМПТ, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ДокументОснованиеДляЗаполнения = ДанныеЗаполнения.ДокументОснование;
	Иначе
		ДокументОснованиеДляЗаполнения = ДанныеЗаполнения;
	КонецЕсли;	
	
	Если ДокументОснованиеДляЗаполнения = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ДокументОснованиеДляЗаполнения) = Тип("Массив") 
		И ДокументОснованиеДляЗаполнения.Количество() <> 0 Тогда
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения[0]);
	Иначе
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения);
	КонецЕсли;
	
	//Если создается документ без основания
	Если ТипДокумента = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = ИнтеграцияИСМПТК.ПолучитьПараметрыЗаполненияДокументовИСМПТПоУмолчанию();
	 
	ДатаДокумента = ДокументОснованиеДляЗаполнения.Дата;
	
	ПараметрыЗаполнения.Вставить("ДатаНачала"			, НачалоДня(ДатаДокумента));
	ПараметрыЗаполнения.Вставить("ДатаОкончания"		, КонецДня(ДатаДокумента));
	
	ПараметрыЗаполнения.Вставить("МассивДокументов"		, ДокументОснованиеДляЗаполнения);
	ПараметрыЗаполнения.Вставить("МассивВидовДокумента"	, Новый Массив);
	ПараметрыЗаполнения.Вставить("ДокументИСМПТ"		, "УведомлениеОВвозеИзТретьихСтранИСМПТК");
	
	ТипДокументаИСМПТ = Документы.УведомлениеОВвозеИзТретьихСтранИСМПТК.ПустаяСсылка();
	МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияДокументаИСМПТ(ПараметрыЗаполнения, ТипДокументаИСМПТ);
	
	Если ТипЗнч(МассивДанныхДляЗаполнения) = Тип("Массив") И МассивДанныхДляЗаполнения.Количество() > 0 Тогда
		
		Для Каждого СтруктураДокумента Из МассивДанныхДляЗаполнения Цикл
			
			Если МассивДанныхДляЗаполнения.Найти(СтруктураДокумента) > 0 Тогда
				НовыйУведомлениеОВвозе = Документы.УведомлениеОВвозеИзТретьихСтранИСМПТК.СоздатьДокумент();
			Иначе
				НовыйУведомлениеОВвозе = ОбъектДокументИСМПТ;
			КонецЕсли; 
		
			//Заполняем шапку документа
			ЗаполнитьЗначенияСвойств(НовыйУведомлениеОВвозе, СтруктураДокумента.Реквизиты[0]);
			НовыйУведомлениеОВвозе.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий;
			НовыйУведомлениеОВвозе.Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован;  
			НовыйУведомлениеОВвозе.Статус = Перечисления.СтатусыДокументовИСМПТК.НеОпределен;  		
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УведомлениеОВвозе_ПередЗаписью(ОбъектДокументИСМПТ, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ОбъектДокументИСМПТ.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДокументИСМПТ.Состояние = ИнтеграцияИСМПТК.СостояниеДокументаИСМПТ(ОбъектДокументИСМПТ);
		
	Если НЕ ЗначениеЗаполнено(ОбъектДокументИСМПТ.Автор) Тогда
		ОбъектДокументИСМПТ.Автор = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокументИСМПТ.Контрагент) Тогда
		Если ОбъектДокументИСМПТ.ВидОперации = Перечисления.ХозяйственныеОперацииИСМПТК.ВвозИзЕАЭС Тогда
			ОбъектДокументИСМПТ.Контрагент = ОбъектДокументИСМПТ.Поставщик;
		КонецЕсли;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ОбъектДокументИСМПТ.Статус) Тогда
		ОбъектДокументИСМПТ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.НеОпределен");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокументИСМПТ.Номер) Тогда
		ОбъектДокументИСМПТ.Номер = ИнтеграцияИСМПТКПереопределяемый.ПолучитьНомерНаПечать(ОбъектДокументИСМПТ);
	КонецЕсли;
	
КонецПроцедуры

Процедура УведомлениеОВвозе_ПриЗаписи(ОбъектДокументИСМПТ, Отказ) Экспорт
	
	//БМ_ИСМПТ ТРЕБУЕТСЯ_РАССМОТРЕНИЕ	Доработать при записи корректировки на ввоз товаров
	//Если ОбъектДокументИСМПТ.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТ.Исправленный") 
	//	И ЗначениеЗаполнено(ОбъектДокументИСМПТ.УведомлениеОРасхождении) Тогда
	//	УОР = ОбъектДокументИСМПТ.УведомлениеОРасхождении.ПолучитьОбъект();
	//	УОР.АктКорректировка = ОбъектДокументИСМПТ.Ссылка;
	//	УОР.Записать();
	//КонецЕсли;

КонецПроцедуры

Процедура УведомлениеОВвозе_ПриКопировании(ОбъектДокументИСМПТ, ОбъектКопирования) Экспорт
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Идентификатор) Тогда
		ОбъектДокументИСМПТ.Идентификатор = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.НомерИСМПТ) Тогда
		ОбъектДокументИСМПТ.НомерИСМПТ = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.ДатаВИСМПТ) Тогда
		ОбъектДокументИСМПТ.ДатаВИСМПТ = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Статус) Тогда
		ОбъектДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.НеОпределен; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.ДокументОснование) Тогда
		ОбъектДокументИСМПТ.ДокументОснование = Неопределено; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Номер) Тогда
		ОбъектДокументИСМПТ.Номер = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Состояние) Тогда
		ОбъектДокументИСМПТ.Состояние = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Контрагент) Тогда
		ОбъектДокументИСМПТ.Контрагент = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Автор) Тогда
		ОбъектДокументИСМПТ.Автор = Неопределено;
	КонецЕсли;
	
	ОбъектДокументИСМПТ.Товары.Очистить();
	ОбъектДокументИСМПТ.Марки.Очистить();
	ОбъектДокументИСМПТ.Ошибки.Очистить(); 
	
КонецПроцедуры

Процедура УведомлениеОВвозе_ПередУдалением(ОбъектДокументИСМПТ, Отказ) Экспорт
	
	//БМ_ИСМПТ ТРЕБУЕТСЯ_РАССМОТРЕНИЕ	Доработать при записи корректировки на ввоз товаров
	//Если ОбъектДокументИСМПТ.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТ.Исправленный")
	//	И ЗначениеЗаполнено(ОбъектДокументИСМПТ.УведомлениеОРасхождении) Тогда
	//	УОР = ОбъектДокументИСМПТ.УведомлениеОРасхождении.ПолучитьОбъект();
	//	УОР.АктКорректировка = Документы.АктПриемаПередачиИСМПТ.ПустаяСсылка();
	//	УОР.Записать();
	//КонецЕсли;
	
КонецПроцедуры

Процедура УведомлениеОВвозеЕАЭС_ОбработкаПроверкиЗаполнения(ОбъектДокументИСМПТ, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	ИнтеграцияИСМПТКПереопределяемый.УведомлениеОВвозеЕАЭС_ОбработкаПроверкиЗаполнения(ОбъектДокументИСМПТ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	ИнтеграцияИСМПТКПереопределяемый.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура УведомлениеОВвозеТретьиСтраны_ОбработкаПроверкиЗаполнения(ОбъектДокументИСМПТ, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	ИнтеграцияИСМПТКПереопределяемый.УведомлениеОВвозеТретьиСтраны_ОбработкаПроверкиЗаполнения(ОбъектДокументИСМПТ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	ИнтеграцияИСМПТКПереопределяемый.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура УведомлениеОВвозе_ПриУстановкеНовогоНомера(ОбъектДокументИСМПТ, СтандартнаяОбработка, Префикс) Экспорт
	
	Префикс = "И";
	
КонецПроцедуры

#КонецОбласти

#Область ЗаказНаЭмиссиюКодовМаркировкиСУЗ

Процедура ДокументЗаказНаЭмиссиюКодовМаркировкиСУЗ_ОбработкаЗаполнения(ОбъектДокументИСМПТ, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	ЗаполнитьИдентификаторыСтрокТабличнойЧастиТовары(ОбъектДокументИСМПТ);
	ЗаполнитьСпособФормированияСерийныхНомеровПоУмолчанию(ОбъектДокументИСМПТ.Товары);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ДокументОснованиеДляЗаполнения = ДанныеЗаполнения.ДокументОснование;
	Иначе
		ДокументОснованиеДляЗаполнения = ДанныеЗаполнения;
	КонецЕсли;	
	
	Если ДокументОснованиеДляЗаполнения = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ДокументОснованиеДляЗаполнения) = Тип("Массив") 
		И ДокументОснованиеДляЗаполнения.Количество() <> 0 Тогда
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения[0]);
	Иначе
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения);
	КонецЕсли;
	
	//Если создается документ без основания
	Если ТипДокумента = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	ПараметрыЗаполнения = ИнтеграцияИСМПТК.ПолучитьПараметрыЗаполненияДокументовИСМПТПоУмолчанию();
	ДатаДокумента 		= ДокументОснованиеДляЗаполнения.Дата;
	
	ПараметрыЗаполнения.Вставить("ДатаНачала", 			 НачалоДня(ДатаДокумента));
	ПараметрыЗаполнения.Вставить("ДатаОкончания", 		 КонецДня(ДатаДокумента));
	ПараметрыЗаполнения.Вставить("МассивДокументов", 	 ДокументОснованиеДляЗаполнения);
	ПараметрыЗаполнения.Вставить("МассивВидовДокумента", Новый Массив);
	
	ТипДокументаИСМПТ 		  = Документы.ЗаказКодовМаркировкиСУЗИСМПТК.ПустаяСсылка();
	МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияДокументаСУЗ(ПараметрыЗаполнения, ТипДокументаИСМПТ);
	
	Если ТипЗнч(МассивДанныхДляЗаполнения) = Тип("Массив") И МассивДанныхДляЗаполнения.Количество() > 0 Тогда
		
		Для Каждого СтруктураДокумента Из МассивДанныхДляЗаполнения Цикл
			
			Если МассивДанныхДляЗаполнения.Найти(СтруктураДокумента) > 0 Тогда
				НовыйДокументЗаказ = Документы.ЗаказКодовМаркировкиСУЗИСМПТК.СоздатьДокумент();
			Иначе
				НовыйДокументЗаказ = ОбъектДокументИСМПТ;
			КонецЕсли; 
			
			//Заполняем шапку документа
			ЗаполнитьЗначенияСвойств(НовыйДокументЗаказ, СтруктураДокумента.Реквизиты[0]);
			
			НовыйДокументЗаказ.Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Черновик;  
			НовыйДокументЗаказ.Статус 	 = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Черновик;  		
			
			ВидыПродукцииПриЗаполненииЗаказа = Новый Массив();
			ЕстьСтрокиБезGTIN = Ложь;
						
			//Заполняем табличную часть
			Для Каждого СтрокаТЧ Из СтруктураДокумента.Товары Цикл
				
				НоваяСтрокаТЧ = НовыйДокументЗаказ.Товары.Добавить();
				НоваяСтрокаТЧ.Номенклатура   	 = СтрокаТЧ.Номенклатура;
				НоваяСтрокаТЧ.Характеристика 	 = СтрокаТЧ.Характеристика;
				НоваяСтрокаТЧ.Упаковка 		 	 = СтрокаТЧ.Упаковка;
				НоваяСтрокаТЧ.Количество	 	 = СтрокаТЧ.Количество;
				НоваяСтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок;
				
				Если ЗначениеЗаполнено(СтрокаТЧ.GTIN) Тогда
					GTINДляЗаполнения = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.GTINПоШтрихкодуEAN(СтрокаТЧ.GTIN);
				Иначе
					GTINДляЗаполнения = "";
					ЕстьСтрокиБезGTIN = Истина;
				КонецЕсли;
				НоваяСтрокаТЧ.GTIN = GTINДляЗаполнения;
				ВидПродукцииТовара = ИнтеграцияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(СтрокаТЧ.Номенклатура);
				
				УпаковкаНеШтучная = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.УпаковкаНеШтучная(СтрокаТЧ.Номенклатура, СтрокаТЧ.Упаковка);
				
				//БМ_ИСМПТ НА_РАЗВИТИЕ	Товарные группы
				Если ВидПродукцииТовара = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция") Тогда
					НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция");
					Если ВидыПродукцииПриЗаполненииЗаказа.Найти("Молочная") = Неопределено Тогда 
						ВидыПродукцииПриЗаполненииЗаказа.Добавить("Молочная");
					КонецЕсли;
					
				ИначеЕсли ВидПродукцииТовара = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") Тогда
					НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь");
					Если ВидыПродукцииПриЗаполненииЗаказа.Найти("Обувная") = Неопределено Тогда 
						ВидыПродукцииПриЗаполненииЗаказа.Добавить("Обувная");
					КонецЕсли;
					
				ИначеЕсли ВидПродукцииТовара = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") Тогда
					НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты");
					Если ВидыПродукцииПриЗаполненииЗаказа.Найти("Фарма") = Неопределено Тогда 
						ВидыПродукцииПриЗаполненииЗаказа.Добавить("Фарма");
					КонецЕсли;
					
				ИначеЕсли ВидПродукцииТовара = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
					Если ЗначениеЗаполнено(СтрокаТЧ.Упаковка) 
						И УпаковкаНеШтучная Тогда
						//Считаем, что пользователь собирается заказывать коды для блоков сигарет
						НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек");
						//также подгоняем количество к заказу под количество упаковок (т.к. заказываются групповые КМ)
						НоваяСтрокаТЧ.Количество = НоваяСтрокаТЧ.КоличествоУпаковок;
					Иначе
						НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка");
					КонецЕсли;
					Если ВидыПродукцииПриЗаполненииЗаказа.Найти("Табак") = Неопределено Тогда 
						ВидыПродукцииПриЗаполненииЗаказа.Добавить("Табак");
					КонецЕсли;
				КонецЕсли;
		
				НоваяСтрокаТЧ.СпособФормированияСерийногоНомера = ПредопределенноеЗначение("Перечисление.СпособыФормированияСерийногоНомераСУЗИСМПТК.Автоматически");
				
			КонецЦикла;
			
		КонецЦикла;
		
		//Предупреждения по количеству ТГ
		Если ВидыПродукцииПриЗаполненииЗаказа.Количество() > 1 Тогда
			ТекстПредупреждения = НСтр( "ru = 'В таблице Товары присутствует номенклатура из разных товарных групп! Заказ можно оформлять только по одному виду продукции.'") 
								+ Символы.ПС 
								+ НСтр( "ru = 'Для разделения воспользуйтесь командой ""Разбить документ"".'");
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстПредупреждения);
			НовыйДокументЗаказ.ВидПродукции = ИнтеграцияИСМПТКВызовСервера.ПолучитьЗначениеПоУмолчаниюДляВидаПродукцииЗаказа();
			
		ИначеЕсли ВидыПродукцииПриЗаполненииЗаказа.Количество() = 0 Тогда
			ТекстПредупреждения = НСтр( "ru = 'Не удалось распознать товарную группу указанной номенклатуры.'");
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстПредупреждения);
			
		Иначе
			Если ВидыПродукцииПриЗаполненииЗаказа[0] = "Молочная" Тогда
				НовыйДокументЗаказ.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция");
			ИначеЕсли ВидыПродукцииПриЗаполненииЗаказа[0] = "Табак" Тогда
				НовыйДокументЗаказ.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная");
			ИначеЕсли ВидыПродукцииПриЗаполненииЗаказа[0] = "Обувная" Тогда
				НовыйДокументЗаказ.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная");
			ИначеЕсли ВидыПродукцииПриЗаполненииЗаказа[0] = "Фарма" Тогда
				НовыйДокументЗаказ.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты");
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьСтрокиБезGTIN Тогда
			//Значит в исходной таблице присутствует товар, у которого зарегистрировано два одинаковых штрихкода, различающихся только упаковкой.
			//Такое может быть у фармы в Рознице - штрихкод одновременно для блистера (без упаковки) и он же - для пачки (с упаковкой).
			ТекстПредупреждения = НСтр( "ru = 'Внимание! В таблице присутствуют товары, для которых нужно уточнить значение GTIN.'");
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстПредупреждения);
		КонецЕсли;
		
		//Предупреждения по особенностям работы 
		Если Не ВидыПродукцииПриЗаполненииЗаказа.Найти("Табак") = Неопределено Тогда
			//Т.к. для табака шаблон критически важен при отправке по АПИ, а заполнение происходит по косвенному признаку (наличие упаковки), указываем на необходимость контроля.
			ТекстПредупреждения = НСтр( "ru = 'Присутствует табачная продукция. Требуется выполнить проверку в таблице Товары: шаблон кода в строке (пачка/блок) должен соответствовать зарегистрированным данным GTIN.'");
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстПредупреждения);
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументЗаказНаЭмиссиюКодовМаркировкиСУЗ_ПередЗаписью(ОбъектДокументИСМПТ, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ОбъектДокументИСМПТ.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДокументИСМПТ.Состояние = ИнтеграцияИСМПТК.СостояниеДокументаСУЗ(ОбъектДокументИСМПТ);
	
	Если ПустаяСтрока(ОбъектДокументИСМПТ.ИдентификаторПроизводственногоЗаказа) Тогда
		ОбъектДокументИСМПТ.ИдентификаторПроизводственногоЗаказа = Строка(Новый УникальныйИдентификатор());
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ОбъектДокументИСМПТ.Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ИдентификаторСтроки) Тогда
			СтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор());
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Шаблон) Тогда
			//БМ_ИСМПТ НА_РАЗВИТИЕ	Товарные группы
			Если ОбъектДокументИСМПТ.ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.Обувная Тогда
				СтрокаТЧ.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь;
				
			ИначеЕсли ОбъектДокументИСМПТ.ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.МолочнаяПродукция Тогда
				СтрокаТЧ.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция;
				
			ИначеЕсли ОбъектДокументИСМПТ.ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты Тогда
				СтрокаТЧ.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты;
				
			ИначеЕсли ОбъектДокументИСМПТ.ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.ЛегкаяПромышленность Тогда
				СтрокаТЧ.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность;
				
			ИначеЕсли ОбъектДокументИСМПТ.ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.Табачная Тогда
				Если Не ЗначениеЗаполнено(СтрокаТЧ.Упаковка)
					Или СтрокаТЧ.Упаковка = ИнтеграцияИСМПТКПереопределяемый.ПолучитьБазовуюЕденицуИзмерения(СтрокаТЧ.Номенклатура) Тогда
					СтрокаТЧ.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка;
				Иначе
					СтрокаТЧ.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДокументЗаказНаЭмиссиюКодовМаркировкиСУЗ_ПриЗаписи(ОбъектДокументИСМПТ, Отказ) Экспорт
	
	Если ОбъектДокументИСМПТ.Ссылка.Пустая() Тогда
		ОбъектДокументИСМПТ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Черновик");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументЗаказНаЭмиссиюКодовМаркировкиСУЗ_ПриКопировании(ОбъектДокументИСМПТ, ОбъектКопирования) Экспорт
	
	ОбъектДокументИСМПТ.СерийныеНомера.Очистить();
	ОбъектДокументИСМПТ.ИдентификаторПроизводственногоЗаказа = "";
	ОбъектДокументИСМПТ.OrderID = "";
	ОбъектДокументИСМПТ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Черновик");
	ОбъектДокументИСМПТ.ПричинаОтклонения = "";
	ОбъектДокументИСМПТ.ДокументОснование = "";
		
	Если ЗначениеЗаполнено(ОбъектКопирования.Ответственный) Тогда
		ОбъектДокументИСМПТ.Ответственный = Неопределено;
	КонецЕсли;
					
КонецПроцедуры

Процедура ДокументЗаказНаЭмиссиюКодовМаркировкиСУЗ_ПередУдалением(ОбъектДокументИСМПТ, Отказ) Экспорт
	
		
КонецПроцедуры

Процедура ДокументЗаказНаЭмиссиюКодовМаркировкиСУЗ_ОбработкаПроверкиЗаполнения(ОбъектДокументИСМПТ, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	
КонецПроцедуры

Процедура ДокументЗаказНаЭмиссиюКодовМаркировкиСУЗ_ПриУстановкеНовогоНомера(ОбъектДокументИСМПТ, СтандартнаяОбработка, Префикс) Экспорт
	
		
КонецПроцедуры

#КонецОбласти

#Область АгрегацияКодовМаркировкиСУЗ

Процедура ДокументАгрегацияКодовМаркировкиСУЗ_ОбработкаЗаполнения(ОбъектДокументИСМПТ, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
			
КонецПроцедуры

Процедура ДокументАгрегацияКодовМаркировкиСУЗ_ПередЗаписью(ОбъектДокументИСМПТ, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ОбъектДокументИСМПТ.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДокументИСМПТ.Состояние = ИнтеграцияИСМПТК.СостояниеДокументаСУЗ(ОбъектДокументИСМПТ);
	Если Не ЗначениеЗаполнено(ОбъектДокументИСМПТ.Ответственный) Тогда
		ОбъектДокументИСМПТ.Ответственный = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь(); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументАгрегацияКодовМаркировкиСУЗ_ПриЗаписи(ОбъектДокументИСМПТ, Отказ) Экспорт
	
	Если ОбъектДокументИСМПТ.Ссылка.Пустая() Тогда
		ОбъектДокументИСМПТ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОтчетовСУЗИСМПТК.Черновик");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументАгрегацияКодовМаркировкиСУЗ_ПриКопировании(ОбъектДокументИСМПТ, ОбъектКопирования) Экспорт
	
	ОбъектДокументИСМПТ.OrderID = "";
	ОбъектДокументИСМПТ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОтчетовСУЗИСМПТК.Черновик");
		
	ОбъектДокументИСМПТ.ИдентификаторПроизводственнойЛинии = "";
	ОбъектДокументИСМПТ.ИдентификаторПроизводственногоЗаказа = "";
	
	ОбъектДокументИСМПТ.Ответственный = Неопределено;
	
	ОбъектДокументИСМПТ.Упаковки.Очистить();
	ОбъектДокументИСМПТ.АгрегированныеКМ.Очистить();
		
КонецПроцедуры

Процедура ДокументАгрегацияКодовМаркировкиСУЗ_ПередУдалением(ОбъектДокументИСМПТ, Отказ) Экспорт
	
		
КонецПроцедуры

Процедура ДокументАгрегацияКодовМаркировкиСУЗ_ОбработкаПроверкиЗаполнения(ОбъектДокументИСМПТ, Отказ, ПроверяемыеРеквизиты) Экспорт

КонецПроцедуры

Процедура ДокументАгрегацияКодовМаркировкиСУЗ_ПриУстановкеНовогоНомера(ОбъектДокументИСМПТ, СтандартнаяОбработка, Префикс) Экспорт
	
		
КонецПроцедуры

#КонецОбласти

#Область НанесениеКодовМаркировкиСУЗИСМПТК

Процедура ДокументНанесениеКодовМаркировкиСУЗИСМПТК_ОбработкаЗаполнения(ОбъектДокументИСМПТ, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	ЗаполнитьИдентификаторыСтрокТабличнойЧастиТовары(ОбъектДокументИСМПТ);
		
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ДокументОснованиеДляЗаполнения = ДанныеЗаполнения.ДокументОснование;
	Иначе
		ДокументОснованиеДляЗаполнения = ДанныеЗаполнения;
	КонецЕсли;	
	
	Если ДокументОснованиеДляЗаполнения = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ДокументОснованиеДляЗаполнения) = Тип("Массив") 
		И ДокументОснованиеДляЗаполнения.Количество() <> 0 Тогда
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения[0]);
	Иначе
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения);
	КонецЕсли;
	
	//Если создается документ без основания
	Если ТипДокумента = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	ПараметрыЗаполнения = ИнтеграцияИСМПТК.ПолучитьПараметрыЗаполненияДокументовИСМПТПоУмолчанию();
	 
	ДатаДокумента = ДокументОснованиеДляЗаполнения.Дата;
	
	ПараметрыЗаполнения.Вставить("ДатаНачала"			, НачалоДня(ДатаДокумента));
	ПараметрыЗаполнения.Вставить("ДатаОкончания"		, КонецДня(ДатаДокумента));
	
	ПараметрыЗаполнения.Вставить("МассивДокументов"		, ДокументОснованиеДляЗаполнения);
	ПараметрыЗаполнения.Вставить("МассивВидовДокумента"	, Новый Массив);
	
	ТипДокументаИСМПТ = Документы.НанесениеКодовМаркировкиСУЗИСМПТК.ПустаяСсылка();
	МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияДокументаСУЗ(ПараметрыЗаполнения, ТипДокументаИСМПТ);
	
	Если ТипЗнч(МассивДанныхДляЗаполнения) = Тип("Массив") И МассивДанныхДляЗаполнения.Количество() > 0 Тогда
		
		Для Каждого СтруктураДокумента Из МассивДанныхДляЗаполнения Цикл
			
			Если СтруктураДокумента.Товары.Количество() = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Сначала необходимо получить коды по заказу!'");
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;
				
			Если МассивДанныхДляЗаполнения.Найти(СтруктураДокумента) > 0 Тогда
				НовыйДокументЗаказ = Документы.НанесениеКодовМаркировкиСУЗИСМПТК.СоздатьДокумент();
			Иначе
				НовыйДокументЗаказ = ОбъектДокументИСМПТ;
			КонецЕсли; 
			
			//Заполняем шапку документа
			ЗаполнитьЗначенияСвойств(НовыйДокументЗаказ, СтруктураДокумента.Реквизиты[0]);
			
			НовыйДокументЗаказ.ТипИспользования = ПредопределенноеЗначение("Перечисление.ТипыИспользованияСУЗИСМПТК.НанесениеПодтверждено");
			НовыйДокументЗаказ.Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Черновик;  
			НовыйДокументЗаказ.Статус 	 = Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.Черновик;  		
			
			//Заполняем табличную часть
			Для Каждого СтрокаТЧ Из СтруктураДокумента.Товары Цикл
				НоваяСтрокаТЧ = НовыйДокументЗаказ.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументНанесениеКодовМаркировкиСУЗИСМПТК_ПередЗаписью(ОбъектДокументИСМПТ, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ОбъектДокументИСМПТ.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДокументИСМПТ.Состояние     = ИнтеграцияИСМПТК.СостояниеДокументаСУЗ(ОбъектДокументИСМПТ);
	ОбъектДокументИСМПТ.Ответственный = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь(); 
	
КонецПроцедуры

Процедура ДокументНанесениеКодовМаркировкиСУЗИСМПТК_ПриЗаписи(ОбъектДокументИСМПТ, Отказ) Экспорт
	
	Если ОбъектДокументИСМПТ.Ссылка.Пустая() Тогда
		ОбъектДокументИСМПТ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОтчетовСУЗИСМПТК.Черновик");
	КонецЕсли;
	
	//Дополнительно нужно заполнить признак в документе-основания
	Если ТипЗнч(ОбъектДокументИСМПТ.ДокументОснование) = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК")
		И ЗначениеЗаполнено(ОбъектДокументИСМПТ.ДокументОснование) Тогда
		
		ЗаказКМ = ОбъектДокументИСМПТ.ДокументОснование.ПолучитьОбъект();
		ЗаказКМ.ВыполненоНанесениеКМ = Истина;
		ЗаказКМ.Записать();
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ДокументНанесениеКодовМаркировкиСУЗИСМПТК_ПриКопировании(ОбъектДокументИСМПТ, ОбъектКопирования) Экспорт
	
	ОбъектДокументИСМПТ.OrderID = "";
	ОбъектДокументИСМПТ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОтчетовСУЗИСМПТК.Черновик");
	
	ОбъектДокументИСМПТ.ТипИспользования = ПредопределенноеЗначение("Перечисление.ТипыИспользованияСУЗИСМПТК.НанесениеПодтверждено");
	ОбъектДокументИСМПТ.НомерПроизводственнойСерии = "";
	ОбъектДокументИСМПТ.СрокГодности = Дата("00010101");
	
	ОбъектДокументИСМПТ.Ответственный = Неопределено;
	ОбъектДокументИСМПТ.ДокументОснование = "";
	
	ОбъектДокументИСМПТ.Товары.Очистить();
			
КонецПроцедуры

Процедура ДокументНанесениеКодовМаркировкиСУЗИСМПТК_ПередУдалением(ОбъектДокументИСМПТ, Отказ) Экспорт
	
	Если ЗначениеЗаполнено(ОбъектДокументИСМПТ.ДокументОснование) Тогда
		ЗаказКМ = ОбъектДокументИСМПТ.ДокументОснование.ПолучитьОбъект();
		ЗаказКМ.ВыполненоНанесениеКМ = Ложь;
		ЗаказКМ.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументНанесениеКодовМаркировкиСУЗИСМПТК_ОбработкаПроверкиЗаполнения(ОбъектДокументИСМПТ, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
		
КонецПроцедуры

Процедура ДокументНанесениеКодовМаркировкиСУЗИСМПТК_ПриУстановкеНовогоНомера(ОбъектДокументИСМПТ, СтандартнаяОбработка, Префикс) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#Область ЗаполнениеИПерезаполнениеДокументов

Функция ПодготовитьДанныеДляЗаполненияДокументаИСМПТ(ПараметрыСоздания, ТипДокументаИСМПТ) Экспорт 
	
	Возврат ИнтеграцияИСМПТК.ПодготовитьДанныеДляЗаполненияДокументаИСМПТ(ПараметрыСоздания, ТипДокументаИСМПТ);
	
КонецФункции

Функция ПодготовитьДанныеДляЗаполненияДокументаСУЗ(ПараметрыСоздания, ТипДокументаИСМПТ) Экспорт 
	
	Возврат ИнтеграцияИСМПТК.ПодготовитьДанныеДляЗаполненияДокументаСУЗ(ПараметрыСоздания, ТипДокументаИСМПТ);
	
КонецФункции

#Область СоздатьПервичныйДокумент

Функция СоздатьСписокПервичныхДокументов(ПараметрыСоздания) Экспорт 
	
	Возврат ИнтеграцияИСМПТК.СоздатьСписокПервичныхДокументов(ПараметрыСоздания);
	
КонецФункции

#КонецОбласти

#Область ПерезаполнениеДокументовИСМПТ

Функция НайтиАктуальныеОснованияПоДокументамИСМПТ(Знач МассивИСМПТ) Экспорт
	
	// Создать пустое соответствие актуальных оснований.
	АктуальныеОснования = Новый Соответствие;
	
	// Заполнить соответствие ссылками на основания.
	Для Каждого ДокументИСМПТ Из МассивИСМПТ Цикл
		
		Если ТипЗнч(ДокументИСМПТ) = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") Тогда
			АктуальныеОснования.Вставить(ДокументИСМПТ, ДокументИСМПТ.СвязанныйАкт);
		Иначе		
			АктуальныеОснования.Вставить(ДокументИСМПТ, ДокументИСМПТ.ДокументОснование);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат АктуальныеОснования;
	
КонецФункции

Процедура ЗаполнитьИсходящийДокументИСМПТ(Знач ДокументОснованиеДляЗаполнения, ОбъектИСМПТ) Экспорт
	
	Если ДокументОснованиеДляЗаполнения = Неопределено Тогда
		Возврат
	ИначеЕсли ТипЗнч(ДокументОснованиеДляЗаполнения) = Тип("Массив") 
		И ДокументОснованиеДляЗаполнения.Количество() <> 0 Тогда
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения[0]);
	Иначе
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения);
	КонецЕсли;
	
	ПараметрыЗаполнения = ИнтеграцияИСМПТК.ПолучитьПараметрыЗаполненияДокументовИСМПТПоУмолчанию();
	
	ДатаДокумента = ДокументОснованиеДляЗаполнения.Дата;
	
	ПараметрыЗаполнения.Вставить("ДатаНачала"					, НачалоДня(ДатаДокумента));
	ПараметрыЗаполнения.Вставить("ДатаОкончания"				, КонецДня(ДатаДокумента));
	
	ПараметрыЗаполнения.Вставить("МассивДокументов"				, ДокументОснованиеДляЗаполнения);
	ПараметрыЗаполнения.Вставить("МассивВидовДокумента"			, Новый Массив);
	
	ТипДокументаИСМПТ = ОбъектИСМПТ.Ссылка;
	МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияДокументаИСМПТ(ПараметрыЗаполнения, ТипДокументаИСМПТ);
	
	Если ТипЗнч(МассивДанныхДляЗаполнения) = Тип("Массив") И МассивДанныхДляЗаполнения.Количество() > 0 Тогда
		
		СтруктураДокумента = МассивДанныхДляЗаполнения[0];
		
		//Заполняем шапку документа
		ЗаполнитьЗначенияСвойств(ОбъектИСМПТ, СтруктураДокумента.Реквизиты[0]);
		
		ОбъектИСМПТ.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий; 
		ОбъектИСМПТ.Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован; 
		
		Если Не ТипЗнч(ОбъектИСМПТ.Ссылка) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК") Тогда
			//Заполняем табличную часть "Товары"
			Если СтруктураДокумента.Свойство("Товары") Тогда
				Для Каждого СтрокаТЧ Из СтруктураДокумента.Товары Цикл
					НоваяСтрокаТЧ = ОбъектИСМПТ.Товары.Добавить();
					НоваяСтрокаТЧ.Номенклатура = СтрокаТЧ.Номенклатура;
					НоваяСтрокаТЧ.КоличествоИсточник = СтрокаТЧ.КоличествоИсточник;
				КонецЦикла;
			Иначе
				Для Каждого СтрокаТЧ Из СтруктураДокумента.Марки Цикл
					НоваяСтрокаТЧ = ОбъектИСМПТ.Марки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаЗаполненияЗаказКодов

Процедура ЗаполнитьСпособФормированияСерийныхНомеровПоУмолчанию(Товары)

	Для Каждого СтрокаТовары Из Товары Цикл
		СтрокаТовары.СпособФормированияСерийногоНомера = Перечисления.СпособыФормированияСерийногоНомераСУЗИСМПТК.Автоматически;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИдентификаторыСтрокТабличнойЧастиТовары(ОбъектДокументИСМПТ)
	
	Для Каждого СтрокаТовары Из ОбъектДокументИСМПТ.Товары Цикл
		
		Если ПустаяСтрока(СтрокаТовары.ИдентификаторСтроки) Тогда
			СтрокаТовары.ИдентификаторСтроки = Новый УникальныйИдентификатор();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РазбитьДокументНаЧасти

Функция РазбитьДокументыЗаказКМ(ПараметрыСоздания) Экспорт 
	
	Возврат ИнтеграцияИСМПТК.РазбитьЗаказКМ(ПараметрыСоздания);
	
КонецФункции

Функция РазбитьДокументыИСМПТ(ПараметрыСоздания, ИмяДокумента) Экспорт 
	
	Возврат ИнтеграцияИСМПТК.РазбитьДокументИСМПТ(ПараметрыСоздания, ИмяДокумента);
	
КонецФункции

#КонецОбласти

#КонецОбласти 

#Область ОтправкаДокументов

#Область СгруппироватьПоСтруктурам

Функция Переопределяемый_СгруппироватьДокументыИСМПТПоСтруктурнымЕдиницам(Знач МассивДокументовИСМПТ) Экспорт
	
	//БМ_ИСМПТ ТРЕБУЕТСЯ_РАССМОТРЕНИЕ	Перечисление документов ИСМПТ
	Если ТипЗнч(МассивДокументовИСМПТ[0]) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда
		
		ТекстЗапроса = ТекстЗапросаСгруппироватьПоСтруктурамАПП();
		
	ИначеЕсли ТипЗнч(МассивДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") Тогда
		
		ТекстЗапроса = ТекстЗапросаСгруппироватьПоСтруктурамУОР();
		
	ИначеЕсли ТипЗнч(МассивДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСМПТК") Тогда
		
		ТекстЗапроса = ТекстЗапросаСгруппироватьПоСтруктурамВВО();
		
	ИначеЕсли ТипЗнч(МассивДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСМПТК") Тогда
		
		ТекстЗапроса = ТекстЗапросаСгруппироватьПоСтруктурамВИО();
		
	ИначеЕсли ТипЗнч(МассивДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК") Тогда
		
		ТекстЗапроса = ТекстЗапросаСгруппироватьПоСтруктурамУОВИзЕАЭС();
		
	ИначеЕсли ТипЗнч(МассивДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК") Тогда
		
		ТекстЗапроса = ТекстЗапросаСгруппироватьПоСтруктурамУОВИзТретьихСтран();
		
	ИначеЕсли ТипЗнч(МассивДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОбЭкспортеЕАЭСИСМПТК") Тогда
		
		ТекстЗапроса = ТекстЗапросаСгруппироватьПоСтруктурамЭкспортЕАЭС();
		
	ИначеЕсли ТипЗнч(МассивДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОПриемкеЕАЭСИСМПТК") Тогда
		
		ТекстЗапроса = ТекстЗапросаСгруппироватьПоСтруктурамУведомлениеОПриемкеЕАЭС();
		
	ИначеЕсли ТипЗнч(МассивДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОбОтгрузкеЕАЭСИСМПТК") Тогда
		
		ТекстЗапроса = ТекстЗапросаСгруппироватьПоСтруктурамУведомлениеОбОтгрузкеЕАЭС();
		
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументовИСМПТ", МассивДокументовИСМПТ);
	
	ВыборкаСтруктурнаяЕдиница = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КоллекцияСгруппированныхДокументовИСМПТ = Новый Соответствие;
	
	Пока ВыборкаСтруктурнаяЕдиница.Следующий() Цикл
		
		СгруппированныйМассивДокументовИСМПТ = Новый Массив;
		
		ВыборкаДетальныеЗаписи = ВыборкаСтруктурнаяЕдиница.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СгруппированныйМассивДокументовИСМПТ.Добавить(ВыборкаДетальныеЗаписи.ДокументИСМПТ);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ВыборкаСтруктурнаяЕдиница.СтруктурнаяЕдиница) Тогда
			
			КоллекцияСгруппированныхДокументовИСМПТ.Вставить(ВыборкаСтруктурнаяЕдиница.СтруктурнаяЕдиница, СгруппированныйМассивДокументовИСМПТ);
			
		Иначе
			
			ТекстСообщения = НСтр(
			"ru = 'В документах не указана организация:
			|%1'");
			
			СтрокаСписокДокументовИСМПТ = "";
			Для Каждого СсылкаДокументИСМПТ Из СгруппированныйМассивДокументовИСМПТ Цикл
				СтрокаСписокДокументовИСМПТ = СтрокаСписокДокументовИСМПТ + "- " + СсылкаДокументИСМПТ + Символы.ПС;
			КонецЦикла;
			СтрокаСписокДокументовИСМПТ = СокрЛП(СтрокаСписокДокументовИСМПТ);
			
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСписокДокументовИСМПТ);
			
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоллекцияСгруппированныхДокументовИСМПТ;
	
КонецФункции

Функция Переопределяемый_СгруппироватьДокументыСУЗПоСтруктурнымЕдиницам(Знач МассивДокументовСУЗ) Экспорт
	
	Если ТипЗнч(МассивДокументовСУЗ[0]) = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК") Тогда
		
		ТипДокумента = "ЗаказКодовМаркировкиСУЗИСМПТК";
		
	ИначеЕсли ТипЗнч(МассивДокументовСУЗ[0]) = Тип("ДокументСсылка.АгрегацияКодовМаркировкиСУЗИСМПТК") Тогда
		
		ТипДокумента = "АгрегацияКодовМаркировкиСУЗИСМПТК";
		
	ИначеЕсли ТипЗнч(МассивДокументовСУЗ[0]) = Тип("ДокументСсылка.НанесениеКодовМаркировкиСУЗИСМПТК") Тогда
		
		ТипДокумента = "НанесениеКодовМаркировкиСУЗИСМПТК";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапросаСгруппироватьПоСтруктурнымЕдиницамСУЗ(ТипДокумента);

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументовСУЗ", МассивДокументовСУЗ);
	
	ВыборкаСтруктурнаяЕдиница = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КоллекцияСгруппированныхДокументовСУЗ = Новый Соответствие;
	
	Пока ВыборкаСтруктурнаяЕдиница.Следующий() Цикл
		
		СгруппированныйМассивДокументовСУЗ = Новый Массив;
		
		ВыборкаДетальныеЗаписи = ВыборкаСтруктурнаяЕдиница.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СгруппированныйМассивДокументовСУЗ.Добавить(ВыборкаДетальныеЗаписи.ДокументСУЗ);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ВыборкаСтруктурнаяЕдиница.СтруктурнаяЕдиница) Тогда
			
			КоллекцияСгруппированныхДокументовСУЗ.Вставить(ВыборкаСтруктурнаяЕдиница.СтруктурнаяЕдиница, СгруппированныйМассивДокументовСУЗ);
			
		Иначе
			
			ТекстСообщения = НСтр(
			"ru = 'В документах не указана организация:
			|%1'");
			
			СтрокаСписокДокументовСУЗ = "";
			Для Каждого СсылкаДокументСУЗ Из СгруппированныйМассивДокументовСУЗ Цикл
				СтрокаСписокДокументовСУЗ = СтрокаСписокДокументовСУЗ + "- " + СсылкаДокументСУЗ + Символы.ПС;
			КонецЦикла;
			СтрокаСписокДокументовСУЗ = СокрЛП(СтрокаСписокДокументовСУЗ);
			
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСписокДокументовСУЗ);
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоллекцияСгруппированныхДокументовСУЗ;
	
КонецФункции

Функция ТекстЗапросаСгруппироватьПоСтруктурамАПП()
	
	Возврат "ВЫБРАТЬ
	|	АктПриемаПередачиИСМПТ.Организация КАК СтруктурнаяЕдиница,
	|	АктПриемаПередачиИСМПТ.Ссылка КАК ДокументИСМПТ
	|ИЗ
	|	Документ.АктПриемаПередачиИСМПТК КАК АктПриемаПередачиИСМПТ
	|ГДЕ
	|	АктПриемаПередачиИСМПТ.Ссылка В(&МассивДокументовИСМПТ)
	|ИТОГИ ПО
	|	СтруктурнаяЕдиница";
	
КонецФункции

Функция ТекстЗапросаСгруппироватьПоСтруктурамУОР()
	
	Возврат "ВЫБРАТЬ
	|	УведомлениеОРасхожденииИСМПТ.Организация КАК СтруктурнаяЕдиница,
	|	УведомлениеОРасхожденииИСМПТ.Ссылка КАК ДокументИСМПТ
	|ИЗ
	|	Документ.УведомлениеОРасхожденииИСМПТК КАК УведомлениеОРасхожденииИСМПТ
	|ГДЕ
	|	УведомлениеОРасхожденииИСМПТ.Ссылка В(&МассивДокументовИСМПТ)
	|ИТОГИ ПО
	|	СтруктурнаяЕдиница";
	
КонецФункции

Функция ТекстЗапросаСгруппироватьПоСтруктурамВВО()
	
	Возврат "ВЫБРАТЬ
	|	УведомлениеОВводеВОборотИСМПТ.Организация КАК СтруктурнаяЕдиница,
	|	УведомлениеОВводеВОборотИСМПТ.Ссылка КАК ДокументИСМПТ
	|ИЗ
	|	Документ.УведомлениеОВводеВОборотИСМПТК КАК УведомлениеОВводеВОборотИСМПТ
	|ГДЕ
	|	УведомлениеОВводеВОборотИСМПТ.Ссылка В(&МассивДокументовИСМПТ)
	|ИТОГИ ПО
	|	СтруктурнаяЕдиница";

КонецФункции

Функция ТекстЗапросаСгруппироватьПоСтруктурамВИО()
	
	Возврат "ВЫБРАТЬ
	|	УведомлениеОВыводеИзОборотаИСМПТ.Организация КАК СтруктурнаяЕдиница,
	|	УведомлениеОВыводеИзОборотаИСМПТ.Ссылка КАК ДокументИСМПТ
	|ИЗ
	|	Документ.УведомлениеОВыводеИзОборотаИСМПТК КАК УведомлениеОВыводеИзОборотаИСМПТ
	|ГДЕ
	|	УведомлениеОВыводеИзОборотаИСМПТ.Ссылка В(&МассивДокументовИСМПТ)
	|ИТОГИ ПО
	|	СтруктурнаяЕдиница";

КонецФункции

Функция ТекстЗапросаСгруппироватьПоСтруктурамУОВИзЕАЭС()
	
	Возврат "ВЫБРАТЬ
	|	УведомлениеОВвозеИзЕАЭСИСМПТК.Организация КАК СтруктурнаяЕдиница,
	|	УведомлениеОВвозеИзЕАЭСИСМПТК.Ссылка КАК ДокументИСМПТ
	|ИЗ
	|	Документ.УведомлениеОВвозеИзЕАЭСИСМПТК КАК УведомлениеОВвозеИзЕАЭСИСМПТК
	|ГДЕ
	|	УведомлениеОВвозеИзЕАЭСИСМПТК.Ссылка В(&МассивДокументовИСМПТ)
	|ИТОГИ ПО
	|	СтруктурнаяЕдиница";

КонецФункции

Функция ТекстЗапросаСгруппироватьПоСтруктурамУОВИзТретьихСтран()
	
	Возврат "ВЫБРАТЬ
	|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Организация КАК СтруктурнаяЕдиница,
	|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Ссылка КАК ДокументИСМПТ
	|ИЗ
	|	Документ.УведомлениеОВвозеИзТретьихСтранИСМПТК КАК УведомлениеОВвозеИзТретьихСтранИСМПТК
	|ГДЕ
	|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Ссылка В(&МассивДокументовИСМПТ)
	|ИТОГИ ПО
	|	СтруктурнаяЕдиница";

КонецФункции

Функция ТекстЗапросаСгруппироватьПоСтруктурамЭкспортЕАЭС()
	
	Возврат "ВЫБРАТЬ
	|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Организация КАК СтруктурнаяЕдиница,
	|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Ссылка КАК ДокументИСМПТ
	|ИЗ
	|	Документ.УведомлениеОбЭкспортеЕАЭСИСМПТК КАК УведомлениеОбЭкспортеЕАЭСИСМПТК
	|ГДЕ
	|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Ссылка В(&МассивДокументовИСМПТ)
	|ИТОГИ ПО
	|	СтруктурнаяЕдиница";

КонецФункции

Функция ТекстЗапросаСгруппироватьПоСтруктурамУведомлениеОПриемкеЕАЭС()
	
	Возврат "ВЫБРАТЬ
	|	УведомлениеОПриемкеЕАЭСИСМПТК.Организация КАК СтруктурнаяЕдиница,
	|	УведомлениеОПриемкеЕАЭСИСМПТК.Ссылка КАК ДокументИСМПТ
	|ИЗ
	|	Документ.УведомлениеОПриемкеЕАЭСИСМПТК КАК УведомлениеОПриемкеЕАЭСИСМПТК
	|ГДЕ
	|	УведомлениеОПриемкеЕАЭСИСМПТК.Ссылка В(&МассивДокументовИСМПТ)
	|ИТОГИ ПО
	|	СтруктурнаяЕдиница";

КонецФункции

Функция ТекстЗапросаСгруппироватьПоСтруктурамУведомлениеОбОтгрузкеЕАЭС()
	
	Возврат "ВЫБРАТЬ
	|	УведомлениеОбОтгрузкеЕАЭСИСМПТК.Организация КАК СтруктурнаяЕдиница,
	|	УведомлениеОбОтгрузкеЕАЭСИСМПТК.Ссылка КАК ДокументИСМПТ
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеЕАЭСИСМПТК КАК УведомлениеОбОтгрузкеЕАЭСИСМПТК
	|ГДЕ
	|	УведомлениеОбОтгрузкеЕАЭСИСМПТК.Ссылка В(&МассивДокументовИСМПТ)
	|ИТОГИ ПО
	|	СтруктурнаяЕдиница";

КонецФункции

#КонецОбласти

#Область АктПП

Процедура СоздатьИсходящиеАкты(
	Знач МассивДокументов, 
	Знач УстанавливатьПодпись, 
	Знач ТипПодписи, 
	КоллекцияАктXML, 
	КоллекцияSignedContentXML) Экспорт
	
	КоллекцияАктXML = Новый Соответствие;
	КоллекцияSignedContentXML = Новый Соответствие;
	
	Фабрика = ФабрикаАПП_XML_API("СхемаАПП_XML_API");
	
	Для Каждого СсылкаАкт Из МассивДокументов Цикл
		
		ОбъектАктПП = СсылкаАкт.ПолучитьОбъект();
		АктXDTO = НовыйАкт(ОбъектАктПП, Фабрика);
		АктXML = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.КаноническаяСтрокаXMLИзОбъектаXDTO(АктXDTO, "file", Фабрика);
		//заменяем атрибуты для соответствия формату
		ПространствоИмен = ПолучитьПространствоИменИСМПТ();
		АктXML = "<?xml version=""1.0"" encoding=""UTF-8""?>" + СтрЗаменить(АктXML, "xmlns=""" + ПространствоИмен + """", "xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""xsd_act.xsd""");
		АктXML = СтрЗаменить(АктXML, """ version", "Z"" version");
		КоллекцияАктXML.Вставить(СсылкаАкт, АктXML);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйАкт(Знач АктПП, Знач Фабрика)
	
	//пространство имен добавлено вручную в схему, чтобы работать в 1С
	ПространствоИмен = ПолучитьПространствоИменИСМПТ();
	ИмяУзла = "file";
	
	СвойствоЗаголовка = Фабрика.Пакеты.Получить(ПространствоИмен).КорневыеСвойства.Получить(ИмяУзла);
	ТипXDTOЗаголовка  = СвойствоЗаголовка.Тип;
	
	АктXDTO = Фабрика.Создать(ТипXDTOЗаголовка);
	ЗаполнитьАкт(АктПП, Фабрика, АктXDTO);
	
	Возврат АктXDTO;
	
КонецФункции

Процедура ЗаполнитьАкт(Знач АктПП, Знач Фабрика, АктXDTO)
	
	//////////////////////////////////////////////////////////////////////////////
	// Шапка.
	ИдентификаторФайла 		 = ?(АктПП.ЭтоКорректировка, "COR_ACT_%1", "EEU_ACT_%1");
	АктXDTO.fileId 			 = СтрШаблон(ИдентификаторФайла, АктПП.Ссылка.УникальныйИдентификатор());
	АктXDTO.version 		 = "1.0";
	АктXDTO.sendingDateTime  = Формат(УниверсальноеВремя(ТекущаяДатаСеанса()),"ДФ=ггг-ММ-ддThh:mm:ss");//YYYY-MMDDThh:mm:ssZ
		
	participants 			 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(АктXDTO, "participants", Фабрика);
	participants.supplierId  = АктПП.ПоставщикИдентификационныйНомер;
	participants.consigneeId = АктПП.ПолучательИдентификационныйНомер;
	
	document = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(АктXDTO, "document", Фабрика);
	
	document.correctionFlag 	 = ?(АктПП.ЭтоКорректировка, Истина, Ложь);
	Если АктПП.ЭтоКорректировка Тогда
		ДанныеСвязанногоАкта 	 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЗначенияРеквизитовОбъекта(АктПП.СвязанныйАкт, "НомерИСМПТ, ДатаВИСМПТ, Идентификатор");
		document.correctionDocId = ДанныеСвязанногоАкта.Идентификатор;
		document.regNumber 	 	 = ДанныеСвязанногоАкта.НомерИСМПТ;
		document.regDate 	 	 = Формат(ДанныеСвязанногоАкта.ДатаВИСМПТ,"ДФ=dd.MM.yyyy");//dd.mm.yyyy
	КонецЕсли;

	Если АктПП.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСМПТК.Реализация") Тогда
		document.operationType = 1; // 1 - реализация, 2 - коммисия/агентская торговля
	ИначеЕсли АктПП.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСМПТК.КомиссияИАгентскаяТорговля") Тогда
		document.operationType = 2; // 1 - реализация, 2 - коммисия/агентская торговля
	КонецЕсли;
	
	mainInfo		= РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(АктXDTO.document, 		 "mainInfo", 		Фабрика);
	supplierInfo 	= РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(АктXDTO.document.mainInfo, "supplierInfo",	Фабрика);
	consigneeInfo 	= РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(АктXDTO.document.mainInfo, "consigneeInfo", 	Фабрика);
	originalDocInfo = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(АктXDTO.document.mainInfo, "originalDocInfo", Фабрика);
	
	supplierInfo.supplierName				  = АктПП.ПоставщикНаименование;
	supplierInfo.supplierIdentificationCode   = АктПП.ПоставщикИдентификационныйНомер;
	
	consigneeInfo.consigneeName				  = АктПП.ПолучательНаименование;
	consigneeInfo.consigneeIdentificationCode = АктПП.ПолучательИдентификационныйНомер;
	
	originalDocInfo.docNumber 			  	  = АктПП.РегНомерНаБумажномНосителе;
	originalDocInfo.docDate 				  = Формат(АктПП.ДатаВыпискиНаБумажномНосителе, "ДФ=dd.MM.yyyy");
	
	Если Не ЗначениеЗаполнено(АктПП.РегНомерНаБумажномНосителе) И Не ЗначениеЗаполнено(АктПП.ДатаВыпискиНаБумажномНосителе) Тогда
		АктXDTO.document.mainInfo.Сбросить("originalDocInfo");
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////
	// Табличные части
	productList	  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(АктXDTO.document, "productList",   Фабрика);
	productTotals = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(АктXDTO.document, "productTotals", Фабрика);
	
	Для Каждого МаркиСтрока Из АктПП.Марки Цикл
		
		product = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовыйЭлементСпискаXDTO(АктXDTO.document.productList.iCode, Фабрика);
		product.__content = МаркиСтрока.КодИдентификации;
		product.count 	  = МаркиСтрока.Количество;
		
	КонецЦикла;
	
	ТаблицаКодов = ПолучитьТаблицуКодовGTIN(АктПП.Марки, АктПП.Организация);
	
	Для Каждого КодыСтрока Из ТаблицаКодов Цикл
		
		productTotal = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовыйЭлементСпискаXDTO(АктXDTO.document.productTotals.gtin, Фабрика);
		productTotal.__content = КодыСтрока.Ключ;
		productTotal.count 	   = КодыСтрока.Значение;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуКодовGTIN(ТабличнаяЧасть, Организация)
	
	ПараметрыЗапросаКлючаСессии   = ИнтеграцияИСМПТККлиентСервер.ПараметрыЗапросаКлючаСессии_ИСМП(Организация);
	КлючСессии = ИнтерфейсАвторизацииИСМПТКВызовСервера.ПроверитьОбновитьКлючСессии(ПараметрыЗапросаКлючаСессии, Неопределено, Ложь);
	
	РезультатЗапроса = ЗапроситьИтогиПоАгрегированнымКМ(ТабличнаяЧасть.ВыгрузитьКолонку("КодИдентификации"), Организация, КлючСессии);
	
	Если Не ЗначениеЗаполнено(РезультатЗапроса.ТекстОшибки) Тогда 
		Возврат РезультатЗапроса.ДанныеОбАгрегации["gtinsCounts"];
	Иначе 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабличнаяЧастьДокумента.GTIN КАК GTIN,
		|	ТабличнаяЧастьДокумента.Количество КАК Количество
		|ПОМЕСТИТЬ ДанныеДокумента
		|ИЗ
		|	&ТабличнаяЧасть КАК ТабличнаяЧастьДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДокумента.GTIN КАК Ключ,
		|	СУММА(ДанныеДокумента.Количество) КАК Значение
		|ИЗ
		|	ДанныеДокумента КАК ДанныеДокумента
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДокумента.GTIN";
		Запрос.УстановитьПараметр("ТабличнаяЧасть", ТабличнаяЧасть);
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаКодов = РезультатЗапроса.Выгрузить();
		
		Возврат ТаблицаКодов;
		
	КонецЕсли;
	
КонецФункции

Функция ОтправитьАктыПП(Знач КоллекцияПодписанныхДокументов, Знач ТокенАвторизации) Экспорт
	
	Результат = Неопределено;
	
	Для Каждого СгруппированныеАктыXML Из КоллекцияПодписанныхДокументов Цикл
		
		СтруктурнаяЕдиница = СгруппированныеАктыXML.Ключ;
		ДанныеКоллекцииАктовXML = СгруппированныеАктыXML.Значение;
		
		Если ТипЗнч(ДанныеКоллекцииАктовXML) = Тип("Соответствие") Тогда
			КоллекцияАктовXML = ДанныеКоллекцииАктовXML;
		Иначе
			КоллекцияАктовXML = ПолучитьИзВременногоХранилища(ДанныеКоллекцииАктовXML);
		КонецЕсли;
		
		Результат = ОтправитьИсходящиеАктыПП(КоллекцияАктовXML, Неопределено, СтруктурнаяЕдиница, ТокенАвторизации);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьИсходящиеАктыПП(Знач КоллекцияАктовXML, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации) Экспорт
	
	РезультатОтправки = Новый Соответствие;
	//обходим коллекцию актов 
	Для Каждого ЭлементКоллекции Из КоллекцияАктовXML Цикл
		СообщениеПользователя = Новый СообщениеПользователю;
		
		Текст = НСтр("ru = 'Происходит отправка Акта приема/передачи...'");
		СообщениеПользователя.Текст = Текст;
		СообщениеПользователя.Сообщить();
		
		АктBase64 = ЭлементКоллекции.Значение.ДокументBase64;
		ПодписанныйАкт = ЭлементКоллекции.Значение.ПодписанныйДокумент;
		НомерДокумента = ЭлементКоллекции.Ключ.Номер;
		
		//Если Акт не был подписан (например, отменили выбор сертификата), тогда исключаем его из отправки и обновления
		Если ПодписанныйАкт = "НеВыбран" Тогда 
			
			Текст = НСтр("ru = 'Акт приема/передачи %1 был исключен из отправки, т.к. не был подписан ЭЦП.'");
			НомерАкта = ЭлементКоллекции.Ключ.Номер;
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, НомерАкта); 
			СообщениеПользователя.Текст = ТекстСообщения;
			СообщениеПользователя.Сообщить();
			
			Продолжить;
		КонецЕсли;
		
		//каждый акт передаем в процедуру отправки
		РезультатВыполненияНаСервере = ВыполнитьСозданиеАктаПриемаПередачи(АктBase64, ПодписанныйАкт, НомерДокумента, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации);
		РезультатОтправки.Вставить(ЭлементКоллекции.Ключ, РезультатВыполненияНаСервере);
		
	КонецЦикла;
	
	//БМ_ИСМПТ ТРЕБУЕТСЯ_РАССМОТРЕНИЕ	Доработать обновление документов
	// Обновим статусы отправленных и заполняем идентификаторы после завершения отправки всех документов
	ОбновитьАктыПослеОтправки(РезультатОтправки, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации);
	
	Текст = НСтр("ru = 'Отправка завершена.'");
	СообщениеПользователя.Текст = Текст;
	СообщениеПользователя.Сообщить();
		
	Возврат РезультатОтправки;
	
КонецФункции

Процедура ОбновитьАктыПослеОтправки(РезультатОтправкиДокументов, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации)
	
	Для каждого РезультатОтправки Из РезультатОтправкиДокументов Цикл
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибка(РезультатОтправки.Значение, ИнформацияОбОшибке) Тогда
			ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = НСтр("ru = 'При обновлении с сервера произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменИСМПТ.ОбновитьАктыПослеОтправки'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			Продолжить;
		Иначе
			//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
			ОчиститьОшибкиДокумента(РезультатОтправки.Ключ);
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатОтправки.Значение.ТекстОтвета);
		РезультатЗапроса = ПрочитатьJSON(ЧтениеJSON);
		
		// получаем id
		ИдентификаторНаСервере = ?(РезультатЗапроса.Свойство("id"), РезультатЗапроса.id, "");
		ДопДанныеДокумента 	   = ПолучитьДополнительныеДанныеПоИдентификатору(ИдентификаторНаСервере, ДанныеПрофилей, СтруктурнаяЕдиница, Истина, ТокенАвторизации);
		
		Попытка
			ДокументОбъект = РезультатОтправки.Ключ.ПолучитьОбъект();
			ДокументОбъект.Идентификатор = ИдентификаторНаСервере;
			ДокументОбъект.НомерИСМПТ 	 = ДопДанныеДокумента.НомерИСМПТ;
			ДокументОбъект.ДатаВИСМПТ 	 = ДопДанныеДокумента.ДатаВИСМПТ;
			Статус = ПолучитьСтатусДокументаПоКоду(ДопДанныеДокумента.Статус);
			Если Статус <> Неопределено Тогда
				ДокументОбъект.Статус = Статус;
			КонецЕсли;
			ДокументОбъект.Записать();
		Исключение
		    //ОписаниеОшибки()
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДополнительныеДанныеПоИдентификатору(ИдентификаторДокумента, ДанныеПрофилей, СтруктурнаяЕдиница, Исходящий, ТокенАвторизации = Неопределено)
	
	ДополнительныеДанные = Новый Структура("НомерИСМПТ, ДатаВИСМПТ, Статус");
	
	ПараметрыЗапроса = Новый Структура;
	Если Исходящий Тогда
		РезультатВыполненияНаСервере = ПолучитьСписокИсходящихДокументов(ПараметрыЗапроса, СтруктурнаяЕдиница, ТокенАвторизации);
	Иначе
		РезультатВыполненияНаСервере = ПолучитьСписокВходящихДокументов(ПараметрыЗапроса,  СтруктурнаяЕдиница, ТокенАвторизации);
	КонецЕсли;
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ТекстСообщения = НСтр("ru = 'При получении данных с сервера произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменИСМПТ.ПолучитьДополнительныеДанныеПоИдентификатору'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		Возврат ДополнительныеДанные;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(РезультатВыполненияНаСервере.ТекстОтвета);
	РезультатЗапроса = ПрочитатьJSON(ЧтениеJSON);
	
	Если РезультатЗапроса.Свойство("items") Тогда
		ДокументыСервера = РезультатЗапроса.items;
		Для каждого ДанныеДокумента Из ДокументыСервера Цикл
			Если ДанныеДокумента.id = ИдентификаторДокумента Тогда
				ДополнительныеДанные.НомерИСМПТ = ДанныеДокумента.number;
				ДополнительныеДанные.ДатаВИСМПТ = Дата(1970,1,1,0,0,0) + ДанныеДокумента.date;
				ДополнительныеДанные.Статус 	= ДанныеДокумента.status;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДополнительныеДанные;
	
КонецФункции

Функция НайтиДополнительныеДанныеПоИдентификатору(СписокДокументовСервера, ИдентификаторДокумента)
	
	ДополнительныеДанные = Новый Структура("НомерИСМПТ, ДатаВИСМПТ, Статус");
	
	Если СписокДокументовСервера.Свойство("items") Тогда
		ДокументыСервера = СписокДокументовСервера.items;
		Для каждого ДанныеДокумента Из ДокументыСервера Цикл
			Если ДанныеДокумента.id = ИдентификаторДокумента Тогда
				ДополнительныеДанные.НомерИСМПТ = ДанныеДокумента.number;
				ДополнительныеДанные.ДатаВИСМПТ = Дата(1970,1,1,0,0,0) + ДанныеДокумента.date;
				ДополнительныеДанные.Статус 	= ДанныеДокумента.status;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДополнительныеДанные;
	
КонецФункции

Функция ОбновитьАктыПП(Знач МассивДокументов,Знач ДанныеПрофилей, ТокенАвторизации) Экспорт
	
	//БМ_ИСМПТ ТРЕБУЕТСЯ_РАССМОТРЕНИЕ	Обновление актов по данным сервера
	НачатьТранзакцию();
	Попытка
		
		ОбновитьАктыПППоИдентификатору(МассивДокументов, ДанныеПрофилей, ТокенАвторизации);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
	
КонецФункции

Функция ПодтвердитьАктыПП_СозданиеТитулов(КоллекцияСгруппированныхДокументов, СписокТокеновАвторизации) Экспорт
	
	Возврат	ПодтвердитьОтклонитьАкт_СозданиеТитулов(КоллекцияСгруппированныхДокументов,, Истина, СписокТокеновАвторизации);
		
КонецФункции

Функция ПодтвердитьАктыПП_ПодписьТитуловЗавершение(КоллекцияСгруппированныхДокументов, СписокТокеновАвторизации) Экспорт
	
	Результат = Неопределено;
	ПодтвердитьОтклонитьАкт_ПодписьТитуловЗавершение(КоллекцияСгруппированныхДокументов, СписокТокеновАвторизации);
	Возврат Результат;
	
КонецФункции

Функция ОтклонитьАктыПП_СозданиеТитулов(КоллекцияСгруппированныхДокументов, ДанныеПрофилей, СписокТокеновАвторизации) Экспорт
	
	Возврат ПодтвердитьОтклонитьАкт_СозданиеТитулов(КоллекцияСгруппированныхДокументов, ДанныеПрофилей, Ложь, СписокТокеновАвторизации);
		
КонецФункции

Функция ОтклонитьАктыПП_ПодписьТитуловЗавершение(НоваяКоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации) Экспорт
	
	Результат = Неопределено;
	ПодтвердитьОтклонитьАкт_ПодписьТитуловЗавершение(НоваяКоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
	Возврат Результат;
	
КонецФункции

// Процедура ПодтвердитьОтклонитьАкт()
//
// Описание: Выполняет подтверждение или отклонение актов на сервере
//
//
// Параметры 
//	ЭтоПодтверждение - Истина - выполнить подтверждение документа
//						Ложь - выполнить отклонение документа
//
Функция ПодтвердитьОтклонитьАкт_СозданиеТитулов(КоллекцияСгруппированныхДокументов, ДанныеПрофилей = Неопределено, ЭтоПодтверждение, СписокТокеновАвторизации)
	
	ДанныеДляПодписи = Новый Соответствие();
	
	Для каждого СгруппированныеАкты Из КоллекцияСгруппированныхДокументов Цикл
		
		//получить идентификаторы запросом
		СтруктурнаяЕдиница = СгруппированныеАкты.Ключ;
		МассивДокументов = СгруппированныеАкты.Значение;
		Если МассивДокументов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяДокумента = "АктПриемаПередачиИСМПТК";
		Если ТипЗнч(МассивДокументов[0]) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда
			ИмяДокумента = "АктПриемаПередачиИСМПТК";
		ИначеЕсли ТипЗнч(МассивДокументов[0]) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК") Тогда
			ИмяДокумента = "УведомлениеОВвозеИзЕАЭСИСМПТК";
		КонецЕсли;
		
		ТокенАвторизации = СписокТокеновАвторизации.Получить(СтруктурнаяЕдиница);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Документ.Ссылка КАК Ссылка,
		|	Документ.Идентификатор КАК Идентификатор
		|ИЗ
		|	Документ."+ИмяДокумента+" КАК Документ
		|ГДЕ
		|	Документ.Ссылка В(&МассивДокументов)
		|	И НЕ Документ.Идентификатор = """"";
		
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			//получаем титул в бейс64
			РезультатВыполненияНаСервере = ВыполнитьСозданиеТитулаДляПодписи(Выборка.Идентификатор, ЭтоПодтверждение, ТокенАвторизации, "", СтруктурнаяЕдиница);
			ИнформацияОбОшибке = Неопределено;
			Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
				ЗаполнитьОшибкиДокумента(Выборка.Ссылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
				ТекстСообщения = НСтр("ru = 'При создании титула для подписи произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'ОбменИСМПТ.ПодтвердитьДокументыИСМПТК'"), 
					УровеньЖурналаРегистрации.Ошибка,,,
					ТекстСообщения);
				Продолжить;
			Иначе
				//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
				ОчиститьОшибкиДокумента(Выборка.Ссылка);	
			КонецЕсли;
			
			ТитулДляПодписи = РезультатВыполненияНаСервере.ТекстОтвета;
			
			СтруктураДанных = Новый Структура();
			СтруктураДанных.Вставить("ТитулДляПодписи",    ТитулДляПодписи);
			СтруктураДанных.Вставить("Токен", 			   ТокенАвторизации);
			СтруктураДанных.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
			СтруктураДанных.Вставить("СсылкаДокумент", 	   Выборка.Ссылка);
			СтруктураДанных.Вставить("ЭтоПодтверждение",   ЭтоПодтверждение);
			
			ДанныеДляПодписи.Вставить(Выборка.Идентификатор, СтруктураДанных);
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеДляПодписи;
	
КонецФункции

Процедура ПодтвердитьОтклонитьАкт_ПодписьТитуловЗавершение(КоллекцияСгруппированныхДокументов, СписокТокеновАвторизации) Экспорт
	
	Для Каждого ДанныеДокумента Из КоллекцияСгруппированныхДокументов Цикл
		
		//отправляем подписанный
		РезультатВыполненияНаСервере = ВыполнитьПодписаниеТитула(ДанныеДокумента.Идентификатор, ДанныеДокумента.ЭтоПодтверждение, ДанныеДокумента.ПодписанныйТитул, ДанныеДокумента.ТокенАвторизации, "", ДанныеДокумента.СтруктурнаяЕдиница);
		                               
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
			ЗаполнитьОшибкиДокумента(ДанныеДокумента.СсылкаДокумент, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = НСтр("ru = 'При подписи титула произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.ПодвердитьАктыПП'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
			Продолжить;
		Иначе
			//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
			ОчиститьОшибкиДокумента(ДанныеДокумента.СсылкаДокумент);	
		КонецЕсли;
		
		Если РезультатВыполненияНаСервере.КодСостояния = 201 Тогда
			КодСтатуса = ?(ДанныеДокумента.ЭтоПодтверждение, 4, 5); // 4-Подписан получателем (или подтвержден), 5 - Отклонен
			ОбновитьСтатусДокумента(ДанныеДокумента.СсылкаДокумент, ПолучитьСтатусДокументаПоКоду(КодСтатуса));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ПодтвердитьОтклонитьАкт()

Функция ОтозватьДокументы_СозданиеТитулов(ТипДокумента, КоллекцияСгруппированныхДокументов, СписокТокеновАвторизации) Экспорт
	
	Если ТипДокумента = "АктПриемаПередачиИСМПТК" Тогда
		Возврат ОтозватьАктыПП_СозданиеТитулов(КоллекцияСгруппированныхДокументов, СписокТокеновАвторизации);
	ИначеЕсли ТипДокумента = "УведомлениеОВвозеИзЕАЭСИСМПТК" Тогда
		Возврат ОтозватьУведомлениеОВвозе_СозданиеТитулов(КоллекцияСгруппированныхДокументов, СписокТокеновАвторизации);
	КонецЕсли;
	
КонецФункции

// Процедура ОтозватьАктыПП()
//
// Описание: Выполняет отзыв исходящих актов на сервере
//
// Параметры 
//	КоллекцияСгруппированныхДокументов - 
//
Функция ОтозватьАктыПП_СозданиеТитулов(КоллекцияСгруппированныхДокументов, СписокТокеновАвторизации) Экспорт
	
	ДанныеДляПодписи = Новый Соответствие();
	
	Для каждого СгруппированныеАкты Из КоллекцияСгруппированныхДокументов Цикл
		
		//получить идентификаторы запросом
		СтруктурнаяЕдиница = СгруппированныеАкты.Ключ;
		МассивДокументов = СгруппированныеАкты.Значение;
		Если МассивДокументов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТокенАвторизации = СписокТокеновАвторизации.Получить(СтруктурнаяЕдиница);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АктПП.Ссылка КАК Ссылка,
		|	АктПП.Идентификатор КАК Идентификатор,
		|	АктПП.Направление КАК Направление,
		|	АктПП.НомерИСМПТ КАК НомерИСМПТ,
		|	АктПП.ТипАкта КАК ТипАкта
		|ИЗ
		|	Документ.АктПриемаПередачиИСМПТК КАК АктПП
		|ГДЕ
		|	АктПП.Ссылка В(&МассивДокументов)
		|	И НЕ АктПП.Идентификатор = """"";
		
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			//получаем титул в бейс64
			РезультатВыполненияНаСервере = ВыполнитьСозданиеТитулаДляОтзыва(Выборка.Идентификатор, ТокенАвторизации , "", СтруктурнаяЕдиница);
			ИнформацияОбОшибке = Неопределено;
			
			Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
				ЗаполнитьОшибкиДокумента(Выборка.Ссылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
				ТекстСообщения = НСтр("ru = 'При создании титула для подписи произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ОбменИСМПТ.ОтозватьАктыПП'"), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
				Продолжить;
			Иначе
				//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
				ОчиститьОшибкиДокумента(Выборка.Ссылка);	
			КонецЕсли;
			
			ТитулДляПодписи = РезультатВыполненияНаСервере.ТекстОтвета;
			
			СтруктураДанных = Новый Структура();
			СтруктураДанных.Вставить("ТитулДляПодписи",    ТитулДляПодписи);
			СтруктураДанных.Вставить("Токен", 			   ТокенАвторизации);
			СтруктураДанных.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
			СтруктураДанных.Вставить("СсылкаДокумент", 	   Выборка.Ссылка);
			
			ДанныеДляПодписи.Вставить(Выборка.Идентификатор, СтруктураДанных);
			
		КонецЦикла;
	КонецЦикла;
	
	//Возвращаемся на клиент для подписания данных
	Возврат ДанныеДляПодписи;
	
КонецФункции

// Процедура ОтозватьАктыПП()
//
// Описание: Выполняет отзыв исходящих актов на сервере
//
// Параметры 
//	КоллекцияСгруппированныхДокументов - 
//
Функция ОтозватьУведомлениеОВвозе_СозданиеТитулов(КоллекцияСгруппированныхДокументов, СписокТокеновАвторизации) Экспорт
	
	ДанныеДляПодписи = Новый Соответствие();
	
	Для каждого СгруппированныеДокументы Из КоллекцияСгруппированныхДокументов Цикл
		
		//получить идентификаторы запросом
		СтруктурнаяЕдиница = СгруппированныеДокументы.Ключ;
		МассивДокументов = СгруппированныеДокументы.Значение;
		Если МассивДокументов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяДокумента = "УведомлениеОВвозеИзЕАЭСИСМПТК";
		Если ТипЗнч(МассивДокументов[0]) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда
			ИмяДокумента = "АктПриемаПередачиИСМПТК";
		ИначеЕсли ТипЗнч(МассивДокументов[0]) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК") Тогда
			ИмяДокумента = "УведомлениеОВвозеИзЕАЭСИСМПТК";
		ИначеЕсли ТипЗнч(МассивДокументов[0]) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК") Тогда
			ИмяДокумента = "УведомлениеОВвозеИзТретьихСтранИСМПТК";
		КонецЕсли;
		
		ТокенАвторизации = СписокТокеновАвторизации.Получить(СтруктурнаяЕдиница);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УведомлениеОВвозе.Ссылка КАК Ссылка,
		|	УведомлениеОВвозе.Идентификатор КАК Идентификатор
		|ИЗ
		|	Документ." + ИмяДокумента + " КАК УведомлениеОВвозе
		|ГДЕ
		|	УведомлениеОВвозе.Ссылка В(&МассивДокументов)
		|	И НЕ УведомлениеОВвозе.Идентификатор = """"";
		
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			//получаем титул в бейс64
			РезультатВыполненияНаСервере = ВыполнитьСозданиеТитулаДляОтзыва(Выборка.Идентификатор, ТокенАвторизации , "", СтруктурнаяЕдиница);
			ИнформацияОбОшибке = Неопределено;
			
			Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
				ЗаполнитьОшибкиДокумента(Выборка.Ссылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
				ТекстСообщения = НСтр("ru = 'При создании титула для подписи произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'ОбменИСМПТ.ОтозватьАктыПП'"), 
					УровеньЖурналаРегистрации.Ошибка,,,
					ТекстСообщения);
				Продолжить;
			Иначе
				//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
				ОчиститьОшибкиДокумента(Выборка.Ссылка);	
			КонецЕсли;
			
			ТитулДляПодписи = РезультатВыполненияНаСервере.ТекстОтвета;
			
			СтруктураДанных = Новый Структура();
			СтруктураДанных.Вставить("ТитулДляПодписи",    ТитулДляПодписи);
			СтруктураДанных.Вставить("Токен", 			   ТокенАвторизации);
			СтруктураДанных.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
			СтруктураДанных.Вставить("СсылкаДокумент", 	   Выборка.Ссылка);
			
			ДанныеДляПодписи.Вставить(Выборка.Идентификатор, СтруктураДанных);
			
		КонецЦикла;
	КонецЦикла;
	
	//Возвращаемся на клиент для подписания данных
	Возврат ДанныеДляПодписи;
	
КонецФункции

Функция ОтозватьДокументы_ПодписьТитуловЗавершение(КоллекцияСгруппированныхДокументов, СписокТокеновАвторизации) Экспорт
	
	Для Каждого ДанныеДокумента Из КоллекцияСгруппированныхДокументов Цикл
		
		//отправляем подписанный
		РезультатВыполненияНаСервере = ВыполнитьПодписаниеТитулаДляОтзыва(ДанныеДокумента.Идентификатор, ДанныеДокумента.ПодписанныйТитул, ДанныеДокумента.ТокенАвторизации, "", ДанныеДокумента.СтруктурнаяЕдиница);
		
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
			ЗаполнитьОшибкиДокумента(ДанныеДокумента.СсылкаДокумент, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = НСтр("ru = 'При подписи титула произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.ОтозватьАктыПП'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
			Продолжить;
		Иначе
			//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
			ОчиститьОшибкиДокумента(ДанныеДокумента.СсылкаДокумент);	
		КонецЕсли;
		
		Если РезультатВыполненияНаСервере.КодСостояния = 201 Тогда
			КодСтатуса = 16; // 16-Отозван
			ОбновитьСтатусДокумента(ДанныеДокумента.СсылкаДокумент, ПолучитьСтатусДокументаПоКоду(КодСтатуса));
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции //ОтозватьАктыПП()

Процедура ОбновитьАктыПППоИдентификатору(Знач МассивДокументов, ДанныеПрофилей, ТокенАвторизации) Экспорт
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктПП.Ссылка КАК Ссылка,
	|	АктПП.Идентификатор КАК Идентификатор,
	|	АктПП.Направление КАК Направление,
	|	АктПП.НомерИСМПТ КАК НомерИСМПТ,
	|	АктПП.ТипАкта КАК ТипАкта
	|ИЗ
	|	Документ.АктПриемаПередачиИСМПТК КАК АктПП
	|ГДЕ
	|	АктПП.Ссылка В(&МассивДокументов)
	|	И НЕ АктПП.Идентификатор = """"
	|ИТОГИ ПО
	|	Направление";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	ВыборкаНаправление = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНаправление.Следующий() Цикл
		
		Выборка = ВыборкаНаправление.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
				//ошибка, в документе нет идентификатора
				Продолжить;
			КонецЕсли;
			
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("Исходящий", ?(Выборка.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий, Истина, Ложь));
			ПараметрыДокумента.Вставить("Идентификатор",Выборка.Идентификатор);
			РезультатВыполненияНаСервере = ПолучитьДокументСервера(ПараметрыДокумента, ДанныеПрофилей, ТокенАвторизации);
			ДополнительныеДанные = ПолучитьДополнительныеДанныеПоИдентификатору(Выборка.Идентификатор, ДанныеПрофилей, ДанныеПрофилей, ПараметрыДокумента.Исходящий, ТокенАвторизации);
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			КопияДокумента = ДокументОбъект.Скопировать();
			Если КопияДокумента.Марки.Количество() = 0 Тогда
				КопияДокумента.Марки.Загрузить(ДокументОбъект.Марки.Выгрузить());
			КонецЕсли;
			МассивСтарыхДокументов = Новый Массив;
			ИсходныйНовый = Новый Структура;
			ИсходныйНовый.Вставить("ИсходныйОбъект", КопияДокумента);
			ИсходныйНовый.Вставить("ОбновленныйОбъект", ДокументОбъект);
			МассивСтарыхДокументов.Добавить(ИсходныйНовый);
			
			ОбновитьАктПоДаннымСервера(РезультатВыполненияНаСервере, Выборка.Ссылка, ДополнительныеДанные);
			ВосстановитьСсылочныеРеквизитыДокументов(МассивСтарыхДокументов);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСтатусыДокументовПередачи(Знач МассивДокументов, ДанныеПрофилей, ТипДокументаИСМПТ, ТокенАвторизации) Экспорт
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Идентификатор КАК Идентификатор,
	|	Док.Направление КАК Направление
	|ИЗ
	|	Документ." + ТипДокументаИСМПТ + " КАК Док
	|ГДЕ
	|	Док.Ссылка В(&МассивДокументов)
	|	И НЕ Док.Идентификатор = """"
	|ИТОГИ ПО
	|	Направление";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	ВыборкаНаправление = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНаправление.Следующий() Цикл
		
		ПараметрыЗапроса = Новый Структура;
		
		Исходящий = ВыборкаНаправление.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий;
		Исходящий = ?(ТипДокументаИСМПТ = "УведомлениеОРасхожденииИСМПТК", Не Исходящий, Исходящий);
		
		Если Исходящий Тогда
			РезультатВыполненияНаСервере = ПолучитьСписокИсходящихДокументов(ПараметрыЗапроса, ДанныеПрофилей, ТокенАвторизации);
		Иначе
			РезультатВыполненияНаСервере = ПолучитьСписокВходящихДокументов(ПараметрыЗапроса,  ДанныеПрофилей, ТокенАвторизации);
		КонецЕсли;
		
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
			ТекстСообщения = НСтр("ru = 'При получении данных с сервера произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменИСМПТ.ПолучитьДополнительныеДанныеПоИдентификатору'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатВыполненияНаСервере.ТекстОтвета);
		РезультатЗапроса = ПрочитатьJSON(ЧтениеJSON);
		
		Выборка = ВыборкаНаправление.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
				//ошибка, в документе нет идентификатора
				Продолжить;
			КонецЕсли;
			
			ДополнительныеДанные = НайтиДополнительныеДанныеПоИдентификатору(РезультатЗапроса, Выборка.Идентификатор);
			
			Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
				
				Статус = ПолучитьСтатусДокументаПоКоду(ДополнительныеДанные.Статус);
				Если Статус <> Неопределено Тогда
					
					ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
					ДокументОбъект.Статус 		= Статус;
					ДокументОбъект.НомерИСМПТ 	= ДополнительныеДанные.НомерИСМПТ;
					ДокументОбъект.ДатаВИСМПТ 	= ДополнительныеДанные.ДатаВИСМПТ;
					
					//Очистим таблицу ошибок, докумнет получен в базе и его статус успешно обновлён
					ДокументОбъект.Ошибки.Очистить();
					
					Попытка
						//провести документы Акт ПП
						ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					Исключение
						
						ОтменитьТранзакцию();
						ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
						ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменИСМПТ.ОбновитьАктПоДаннымСервера'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
						
						ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//Обновляет документ Акт приема-передачи по данным сервера
Процедура ОбновитьАктПоДаннымСервера(РезультатВыполненияНаСервере, АктСсылка, ДополнительныеДанные, Успешно = Ложь)
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ЗаполнитьОшибкиДокумента(АктСсылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
		ТекстСообщения = НСтр("ru = 'При обновлении с сервера произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменИСМПТ.ОбновитьАктПоДаннымСервера'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ТекстСообщения);
		Возврат;
	Иначе
		//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
		ОчиститьОшибкиДокумента(АктСсылка);	
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ДвоичныеДанныеXML = Base64Значение(РезультатВыполненияНаСервере.ТекстОтвета);
		СтрокаXML 		  = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеXML, КодировкаТекста.UTF8);
		
		Фабрика   = ФабрикаАПП_XML_API("СхемаАПП_XML_API");
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		ОбъектXDTO   = Фабрика.ПрочитатьXML(ЧтениеXML);
		ДокументXDTO = ОбъектXDTO.document;
		//correctionFlag - Признак исправленного Акта
		//mainInfo
		//consigneeInfo
		//consigneeIdentificationCode ИИН/БИН получателя
		//consigneeName Наименование получателя
		//originalDocInfo Реквизиты бумажного документа
		//docDate Дата первичного документа
		//docNumber Номер первичного документа
		//supplierInfo
		//supplierIdentificationCode ИИН/БИН отправителя
		//supplierName Наименование отправителя
		//operationType Тип операции:1 - Реализация; 2 - Комиссия/агентская торговля
		//productList 
		//iCode Код идентификации
		//count Количество потребительских упаковок.
		//productTotals
		//gtin GTIN товаров
		//count Количество потребительских упаковок в GTIN
		
		//заполнить документ по данным сервера
		ДокументОбъект = АктСсылка.ПолучитьОбъект();
		ИсходныйДокумент = ДокументОбъект.Скопировать();
		Если ИсходныйДокумент.Марки.Количество() = 0 Тогда
			ИсходныйДокумент.Марки.Загрузить(ДокументОбъект.Марки.Выгрузить());
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
			ЗаполнитьЗначенияСвойств(ДокументОбъект, ДополнительныеДанные, "НомерИСМПТ, ДатаВИСМПТ");
			Статус = ПолучитьСтатусДокументаПоКоду(ДополнительныеДанные.Статус);
			Если Статус <> Неопределено Тогда
				ДокументОбъект.Статус = Статус;
			КонецЕсли;
		КонецЕсли;
		
		Если ДокументXDTO.operationType = "1" Тогда
			ДокументОбъект.ВидОперации = Перечисления.ХозяйственныеОперацииИСМПТК.Реализация;
		ИначеЕсли ДокументXDTO.operationType = "2" Тогда
			ДокументОбъект.ВидОперации = Перечисления.ХозяйственныеОперацииИСМПТК.КомиссияИАгентскаяТорговля;
		КонецЕсли;
		
		ДокументОбъект.ТипАкта = ?(ДокументXDTO.correctionFlag = "false", Перечисления.ВидыДокументаИСМПТК.Исходный, Перечисления.ВидыДокументаИСМПТК.Исправленный);
		
		Если ДокументОбъект.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исправленный") Тогда
			ДокументОбъект.ЭтоКорректировка = Истина;
		КонецЕсли;
		
		Если ДокументОбъект.ЭтоКорректировка Тогда
			Если Не ДокументXDTO.Свойства().Получить("regNumber") = Неопределено Тогда
				ДокументОбъект.РегистрационныйНомерСвязанногоАкта = ДокументXDTO.regNumber;
				СвязанныеДокументы 					   = НайтиСвязанныеДокументыАктаПриОбновленииДокументов(ДокументОбъект.РегистрационныйНомерСвязанногоАкта, ДокументОбъект.Ссылка);
				ДокументОбъект.СвязанныйАкт			   = СвязанныеДокументы.ПервичныйАкт;
				ДокументОбъект.УведомлениеОРасхождении = СвязанныеДокументы.УведомлениеОРасхождении;
			Иначе
				//поиск по статусу
				ДанныеСвязанногоАкта = НайтиИсходныйАктПоНомеру(ДокументОбъект.НомерИСМПТ);
				ДокументОбъект.СвязанныйАкт						  = ДанныеСвязанногоАкта.ПервичныйАкт;
				ДокументОбъект.РегистрационныйНомерСвязанногоАкта = ДанныеСвязанногоАкта.НомерИСМПТ;
				ДокументОбъект.УведомлениеОРасхождении 			  = ДанныеСвязанногоАкта.УведомлениеОРасхождении;
			КонецЕсли;
		КонецЕсли;
		
		ДокументОбъект.ПоставщикНаименование 			= ДокументXDTO.mainInfo.supplierInfo.supplierName;
		ДокументОбъект.ПоставщикИдентификационныйНомер  = ДокументXDTO.mainInfo.supplierInfo.supplierIdentificationCode;
		
		ДокументОбъект.ПолучательНаименование 			= ДокументXDTO.mainInfo.consigneeInfo.consigneeName;
		ДокументОбъект.ПолучательИдентификационныйНомер = ДокументXDTO.mainInfo.consigneeInfo.consigneeIdentificationCode;
		
		Если Не ДокументXDTO.mainInfo.Свойства().Получить("originalDocInfo") = Неопределено Тогда
			ДокументОбъект.РегНомерНаБумажномНосителе    = ДокументXDTO.mainInfo.originalDocInfo.docNumber;
			ДокументОбъект.ДатаВыпискиНаБумажномНосителе = Дата(ДокументXDTO.mainInfo.originalDocInfo.docDate + " 00:00:00");
		КонецЕсли;
		
		ИдентификационныеНомераКонтрагентов		 = Новый Массив;
		ИдентификационныеНомераСтруктурныхЕдиниц = Новый Массив;	
		
		Если ЗначениеЗаполнено(ДокументОбъект.ПоставщикИдентификационныйНомер) Тогда
			ИдентификационныеНомераКонтрагентов.Добавить(ДокументОбъект.ПоставщикИдентификационныйНомер);
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ДокументОбъект.ПоставщикИдентификационныйНомер);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОбъект.ПолучательИдентификационныйНомер) Тогда
			ИдентификационныеНомераКонтрагентов.Добавить(ДокументОбъект.ПолучательИдентификационныйНомер);
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ДокументОбъект.ПолучательИдентификационныйНомер);
		КонецЕсли;
		
		СоответствияИдентификаторовИСсылок = НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(ИдентификационныеНомераКонтрагентов, ИдентификационныеНомераСтруктурныхЕдиниц);
		
		// Заполнить ссылки на контрагентов. 
		СоответствияКонтрагентов = СоответствияИдентификаторовИСсылок.СоответствияКонтрагентов;
		Для Каждого ЭлементСоответствияКонтрагентов Из СоответствияКонтрагентов Цикл
			
			Идентификатор = ЭлементСоответствияКонтрагентов.Ключ;
			Контрагент = ЭлементСоответствияКонтрагентов.Значение;
			
			Если ДокументОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Поставщик = Контрагент;
			КонецЕсли;
			
			Если ДокументОбъект.ПолучательИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Получатель = Контрагент;
			КонецЕсли;
			
		КонецЦикла;
		
		// Заполнить ссылки на структурные единицы.
		СоответствияСтруктурныхЕдиниц = СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц;
		Для Каждого ЭлементСоответствияСтруктурныхЕдиниц Из СоответствияСтруктурныхЕдиниц Цикл
			
			Идентификатор = ЭлементСоответствияСтруктурныхЕдиниц.Ключ;
			Контрагент	  = ЭлементСоответствияСтруктурныхЕдиниц.Значение;
			
			Если ДокументОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Поставщик = Контрагент;
			КонецЕсли;
			
			Если ДокументОбъект.ПолучательИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Получатель = Контрагент;
			КонецЕсли;
			
		КонецЦикла;
		
		НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();  
		
		Если ТипЗнч(ДокументXDTO.productList.iCode) = Тип("ОбъектXDTO") Тогда
			
			ДокументОбъект.Марки.Очистить();
			КодXDTO = ДокументXDTO.productList.iCode;
			НоваяСтрока = ДокументОбъект.Марки.Добавить();
			НоваяСтрока.КодИдентификации = КодXDTO.Последовательность().ПолучитьТекст(0);
			НоваяСтрока.Количество 		 = ?(КодXDTO.count = "0", 1, КодXDTO.count);
			
			ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(НоваяСтрока.КодИдентификации, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
			
			Если Не ДанныеРазбора = Неопределено Тогда
				
				НоваяСтрока.ВидУпаковки = ДанныеРазбора.ВидУпаковки;
				НайденнаяНоменклатура   = Неопределено;
				
				ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрока, ДанныеРазбора, НайденнаяНоменклатура);
				
				НоваяСтрока.Номенклатура = НайденнаяНоменклатура;
				
				Если НЕ НайденнаяНоменклатура.Пустая() Тогда
					НоваяСтрока.ВидПродукцииИС	= ИнтеграцияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(НайденнаяНоменклатура);
				Иначе
					НоваяСтрока.ВидПродукцииИС	= ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка");
				КонецЕсли;
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось определить коды маркировки в документе %1! Возможно документ содержит транспортные упаковки или КМ по товарной группе, учет которой не ведется.'");
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект.Ссылка); 
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменИСМПТ.ОбновитьАктПоДаннымСервера'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);	
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументXDTO.productList.iCode) = Тип("СписокXDTO") Тогда
			
			ДокументОбъект.Марки.Очистить();
			
			Для Каждого СтрокаXDTO Из ДокументXDTO.productList.iCode Цикл
				
				КодXDTO = СтрокаXDTO;
				НоваяСтрока = ДокументОбъект.Марки.Добавить();
				НоваяСтрока.КодИдентификации = КодXDTO.Последовательность().ПолучитьТекст(0);
				НоваяСтрока.Количество		 = ?(КодXDTO.count = "0", 1, КодXDTO.count);
				
				ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(НоваяСтрока.КодИдентификации, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
				
				Если Не ДанныеРазбора = Неопределено Тогда
					
					НоваяСтрока.ВидУпаковки = ДанныеРазбора.ВидУпаковки;
					НайденнаяНоменклатура   = Неопределено;
					
					ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрока, ДанныеРазбора, НайденнаяНоменклатура);
					
					НоваяСтрока.Номенклатура = НайденнаяНоменклатура;
					
					Если НЕ НайденнаяНоменклатура.Пустая() Тогда
						НоваяСтрока.ВидПродукцииИС = ИнтеграцияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(НайденнаяНоменклатура);
					Иначе
						НоваяСтрока.ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка");
					КонецЕсли;
				Иначе
					ТекстСообщения = НСтр("ru = 'Ошибка разбора документа %1! Возможно он содержит данные по виду номенклатуры, учет по которому не ведется. '");
					ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект.Ссылка); 
					ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменИСМПТ.ОбновитьАктПоДаннымСервера'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//табличная часть Товары
		ДокументОбъект.Товары.Очистить();
		ТоварыПоМаркам = ДокументОбъект.Марки.Выгрузить(,"Количество, Номенклатура, EAN, GTIN, GTINВерхнегоУровня, ВидПродукцииИС");
		ТоварыПоМаркам.Свернуть("Номенклатура, EAN, GTIN, GTINВерхнегоУровня, ВидПродукцииИС", "Количество");
		
		Для Каждого СтрокаТовары Из ТоварыПоМаркам Цикл
			
			НоваяСтрока = ДокументОбъект.Товары.Добавить();
			НоваяСтрока.Номенклатура 	   = СтрокаТовары.Номенклатура;
			НоваяСтрока.КоличествоИсточник = СтрокаТовары.Количество;
			НоваяСтрока.GTIN			   = СтрокаТовары.GTIN;
			НоваяСтрока.EAN 			   = СтрокаТовары.EAN;
			НоваяСтрока.ВидПродукцииИС 	   = СтрокаТовары.ВидПродукцииИС;
			НоваяСтрока.ЕдиницаИзмерения   = ИнтеграцияИСМПТКПереопределяемый.ПолучитьЕдиницуИзмерения(НоваяСтрока.Номенклатура);
			
		КонецЦикла;
		
		Если ДокументОбъект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда
			ДокументОбъект.Контрагент = ДокументОбъект.Поставщик;
		Иначе
			ДокументОбъект.Контрагент = ДокументОбъект.Получатель;
		КонецЕсли;
		
		//провести документы Акт ПП
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		ЗафиксироватьТранзакцию();
		Успешно = Истина;
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменИСМПТ.ОбновитьАктПоДаннымСервера'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Функция НайтиСвязанныеДокументыАктаПриОбновленииДокументов(РегНомерДляПоиска, Ссылка)
	
	СвязанныеДокументы = Новый Структура();
	СвязанныеДокументы.Вставить("ПервичныйАкт", 		   Документы.АктПриемаПередачиИСМПТК.ПустаяСсылка());
	СвязанныеДокументы.Вставить("УведомлениеОРасхождении", Документы.УведомлениеОРасхожденииИСМПТК.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АктПриемаПередачиИСМПТ.Ссылка КАК ПервичныйАкт,
	|	УведомлениеОРасхожденииИСМПТ.Ссылка КАК УведомлениеОРасхождении
	|ИЗ
	|	Документ.АктПриемаПередачиИСМПТК КАК АктПриемаПередачиИСМПТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОРасхожденииИСМПТК КАК УведомлениеОРасхожденииИСМПТ
	|		ПО АктПриемаПередачиИСМПТ.УведомлениеОРасхождении = УведомлениеОРасхожденииИСМПТ.Ссылка
	|ГДЕ
	|	АктПриемаПередачиИСМПТ.НомерИСМПТ = &РегНомерДляПоиска
	|	И АктПриемаПередачиИСМПТ.ТипАкта = ЗНАЧЕНИЕ(Перечисление.ВидыДокументаИСМПТК.Исходный)";
	
	Запрос.УстановитьПараметр("РегНомерДляПоиска", РегНомерДляПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ПервичныйАкт) Тогда
			СвязанныеДокументы.ПервичныйАкт = Выборка.ПервичныйАкт;
			ЗаполнитьСсылкиВПервичномАктеПослеПолученияКорректировки(Ссылка, Выборка.ПервичныйАкт, Выборка.УведомлениеОРасхождении);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.УведомлениеОРасхождении) Тогда
			СвязанныеДокументы.УведомлениеОРасхождении = Выборка.УведомлениеОРасхождении;
			ЗаполнитьСсылкиВУОРПослеПолученияКорректировки(Ссылка, Выборка.ПервичныйАкт, Выборка.УведомлениеОРасхождении);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СвязанныеДокументы;
	
КонецФункции

// Осуществляет поиск исходного Акта ПП по номеру и статусу документа
Функция НайтиИсходныйАктПоНомеру(НомеИСМПТ)
	
	ДанныеИсходногоАкта = Новый Структура();
	ДанныеИсходногоАкта.Вставить("ПервичныйАкт", Документы.АктПриемаПередачиИСМПТК.ПустаяСсылка());
	ДанныеИсходногоАкта.Вставить("НомерИСМПТ",   Неопределено);
	ДанныеИсходногоАкта.Вставить("УведомлениеОРасхождении",   Документы.УведомлениеОРасхожденииИСМПТК.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АктПриемаПередачиИСМПТ.Ссылка КАК ПервичныйАкт,
	|	АктПриемаПередачиИСМПТ.НомерИСМПТ КАК НомерИСМПТ,
	|	АктПриемаПередачиИСМПТ.УведомлениеОРасхождении КАК УведомлениеОРасхождении
	|ИЗ
	|	Документ.АктПриемаПередачиИСМПТК КАК АктПриемаПередачиИСМПТ
	|ГДЕ
	|	АктПриемаПередачиИСМПТ.НомерИСМПТ = &НомерИсправительного
	|	И АктПриемаПередачиИСМПТ.ТипАкта = ЗНАЧЕНИЕ(Перечисление.ВидыДокументаИСМПТК.Исходный)";
	
	Запрос.УстановитьПараметр("НомерИсправительного", НомеИСМПТ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ДанныеИсходногоАкта, Выборка);
		
	КонецЦикла;
	
	Возврат ДанныеИсходногоАкта;
	
КонецФункции

Функция НайтиАктПоИдентификатору(ИдентификаторАкта)
	
	ДанныеИсходногоАкта = Новый Структура();
	ДанныеИсходногоАкта.Вставить("ПервичныйАкт", Документы.АктПриемаПередачиИСМПТК.ПустаяСсылка());
	ДанныеИсходногоАкта.Вставить("НомерИСМПТ",   Неопределено);
	ДанныеИсходногоАкта.Вставить("ВидОперации",  Перечисления.ХозяйственныеОперацииИСМПТК.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АктПриемаПередачиИСМПТ.Ссылка КАК ПервичныйАкт,
	|	АктПриемаПередачиИСМПТ.НомерИСМПТ КАК НомерИСМПТ,
	|	АктПриемаПередачиИСМПТ.ВидОперации КАК ВидОперации
	|ИЗ
	|	Документ.АктПриемаПередачиИСМПТК КАК АктПриемаПередачиИСМПТ
	|ГДЕ
	|	АктПриемаПередачиИСМПТ.Идентификатор = &ИдентификаторАкта
	|	И АктПриемаПередачиИСМПТ.ТипАкта = ЗНАЧЕНИЕ(Перечисление.ВидыДокументаИСМПТК.Исходный)";
	
	Запрос.УстановитьПараметр("ИдентификаторАкта", ИдентификаторАкта);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеИсходногоАкта, Выборка);
	КонецЦикла;
	
	Возврат ДанныеИсходногоАкта;
	
КонецФункции

Процедура ЗаполнитьСсылкиВПервичномАктеПослеПолученияКорректировки(КорректировкаСсылка, ПервичныйАкт, УОР)
	
	АППОбъект = ПервичныйАкт.ПолучитьОбъект();	
	АППОбъект.УведомлениеОРасхождении = УОР;
	АППОбъект.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

#КонецОбласти

#Область УОР

Процедура СоздатьИсходящиеУведомления(
	Знач МассивДокументов, 
	Знач УстанавливатьПодпись, 
	Знач ТипПодписи, 
	КоллекцияАктXML, 
	КоллекцияSignedContentXML) Экспорт
	
	КоллекцияАктXML = Новый Соответствие;
	КоллекцияSignedContentXML = Новый Соответствие;
	
	Фабрика = ФабрикаАПП_XML_API("СхемаУОР_XML_API");
	
	Для Каждого СсылкаУведомление Из МассивДокументов Цикл
		
		ОбъектДокумент = СсылкаУведомление.ПолучитьОбъект();
		УведомлениеXTDO = НовоеУведомление(ОбъектДокумент, Фабрика);
		УведомлениеXML = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.КаноническаяСтрокаXMLИзОбъектаXDTO(УведомлениеXTDO, "file", Фабрика);
		//заменяем атрибуты для соответствия формату
		ПространствоИмен = ПолучитьПространствоИменИСМПТ();
		УведомлениеXML = "<?xml version=""1.0"" encoding=""UTF-8""?>" + СтрЗаменить(УведомлениеXML, "xmlns=""" + ПространствоИмен + """", "xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""xsd_notific_divergences.xsd""");
		УведомлениеXML = СтрЗаменить(УведомлениеXML, """ version", "Z"" version");
		КоллекцияАктXML.Вставить(СсылкаУведомление, УведомлениеXML);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовоеУведомление(Знач Уведомление, Знач Фабрика)
	
	//пространство имен добавлено вручную в схему, чтобы работать в 1С
	ПространствоИмен = ПолучитьПространствоИменИСМПТ();
	ИмяУзла = "file";
	
	СвойствоЗаголовка = Фабрика.Пакеты.Получить(ПространствоИмен).КорневыеСвойства.Получить(ИмяУзла);
	ТипXDTOЗаголовка  = СвойствоЗаголовка.Тип;
	
	УведомлениеXDTO = Фабрика.Создать(ТипXDTOЗаголовка);
	ЗаполнитьУведомление(Уведомление, Фабрика, УведомлениеXDTO);
	
	Возврат УведомлениеXDTO;
	
КонецФункции

Процедура ЗаполнитьУведомление(Знач Уведомление, Знач Фабрика, УведомлениеXDTO)
	
	ДанныеСвязанногоАкта = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЗначенияРеквизитовОбъекта(Уведомление.СвязанныйАкт, "НомерИСМПТ, ДатаВИСМПТ, Идентификатор");
	
	//////////////////////////////////////////////////////////////////////////////
	// Шапка.
	УведомлениеXDTO.fileId 			= СтрШаблон("DIVERG_%1", Уведомление.Ссылка.УникальныйИдентификатор());
	УведомлениеXDTO.version 		= "1.0";
	УведомлениеXDTO.sendingDateTime = Формат(УниверсальноеВремя(ТекущаяДатаСеанса()),"ДФ=ггг-ММ-ддThh:mm:ss");//YYYY-MMDDThh:mm:ssZ
		
	document = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO, "document", Фабрика);
	
	//данные из акта - correctionDocId GUID документа (исходного Акта), на который создается Уведомление  
	//regNumber Регистрационный номер документа (исходного Акта), на который передается корректировка НомерИСМПТ
	//regDate Дата регистрации документа (исходного Акта), на который передается корректировка, в формате dd.mm.yyyy ДатаВИСМПТ
	
	document.correctionDocId = ДанныеСвязанногоАкта.Идентификатор;

	document.regNumber = ДанныеСвязанногоАкта.НомерИСМПТ;
	document.regDate   = Формат(ДанныеСвязанногоАкта.ДатаВИСМПТ,"ДФ=dd.MM.yyyy");//dd.mm.yyyy
	
	mainInfo 		= РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document, 		 "mainInfo", 		Фабрика);
	supplierInfo 	= РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "supplierInfo",	Фабрика);
	consigneeInfo 	= РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "consigneeInfo", 	Фабрика);
	originalDocInfo = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "originalDocInfo", Фабрика);
	
	Если Уведомление.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСМПТК.Реализация") Тогда
		document.operationType = 1; // 1 - реализация, 2 - коммисия/агентская торговля
	ИначеЕсли Уведомление.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСМПТК.КомиссияИАгентскаяТорговля") Тогда
		document.operationType = 2; // 1 - реализация, 2 - коммисия/агентская торговля
	КонецЕсли;
	
	//БМ_ИСМПТ ТРЕБУЕТСЯ_РАССМОТРЕНИЕ Рассмотреть нужно ли менять местами поставщика и получателя в УОР
	supplierInfo.supplierName 				  = Уведомление.ПоставщикНаименование;//Уведомление.ПолучательНаименование;
	supplierInfo.supplierIdentificationCode   = Уведомление.ПоставщикИдентификационныйНомер;//Уведомление.ПолучательИдентификационныйНомер;
	
	consigneeInfo.consigneeName 			  = Уведомление.ПолучательНаименование;//Уведомление.ПоставщикНаименование;
	consigneeInfo.consigneeIdentificationCode = Уведомление.ПолучательИдентификационныйНомер;//Уведомление.ПоставщикИдентификационныйНомер;
	
	//////////////////////////////////////////////////////////////////////////////
	// Табличные части
	productList = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document, "productList", Фабрика);
	
	Для Каждого МаркиСтрока Из Уведомление.Марки Цикл
		
		product = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовыйЭлементСпискаXDTO(УведомлениеXDTO.document.productList.iCode, Фабрика);
		product.__content 		 = МаркиСтрока.КодИдентификации;
		product.reviseStatusCode = СтатусСверкиДляСервера(МаркиСтрока.СтатусСверкиКода);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтатусСверкиДляСервера(Статус)
	
	Если Статус = Перечисления.СтатусыСверкиКодаИСМПТК.НеНайден Тогда
		Возврат "NOT_FOUND";
	ИначеЕсли Статус = Перечисления.СтатусыСверкиКодаИСМПТК.Найден Тогда
		Возврат "FOUND";
	ИначеЕсли Статус = Перечисления.СтатусыСверкиКодаИСМПТК.Исключен Тогда
		Возврат "EXCLUDED";
	ИначеЕсли Статус = Перечисления.СтатусыСверкиКодаИСМПТК.Добавлен Тогда
		Возврат "ADDED";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция СтатусСверкиПоКоду(СтатусСервера)
	
	Если СтатусСервера = "NOT_FOUND" Тогда
		Возврат Перечисления.СтатусыСверкиКодаИСМПТК.НеНайден;
	ИначеЕсли СтатусСервера = "FOUND" Тогда
		Возврат Перечисления.СтатусыСверкиКодаИСМПТК.Найден;
	ИначеЕсли СтатусСервера = "EXCLUDED" Тогда
		Возврат Перечисления.СтатусыСверкиКодаИСМПТК.Исключен;
	ИначеЕсли СтатусСервера = "ADDED" Тогда
		Возврат Перечисления.СтатусыСверкиКодаИСМПТК.Добавлен;
	Иначе
		Возврат Перечисления.СтатусыСверкиКодаИСМПТК.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ОтправитьУведомленияОРасхождении(Знач КоллекцияДанныеКоллекцииДокументовXML, Знач КоллекцияПодписейСНТ, Знач ТокенАвторизации) Экспорт
	
	Результат = Неопределено;
	
	Для Каждого СгруппированныеДокументыXML Из КоллекцияПодписейСНТ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеДокументыXML.Ключ;
		ДанныеКоллекцииДокументовXML = СгруппированныеДокументыXML.Значение;
		
		Если ТипЗнч(ДанныеКоллекцииДокументовXML) = Тип("Соответствие") Тогда
			КоллекцияДокументовXML = ДанныеКоллекцииДокументовXML;
		Иначе
			КоллекцияДокументовXML = ПолучитьИзВременногоХранилища(ДанныеКоллекцииДокументовXML);
		КонецЕсли;
		
		Результат = ОтправитьИсходящиеУведомленияОРасхождении(КоллекцияДокументовXML, Неопределено, СтруктурнаяЕдиница, ТокенАвторизации);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьИсходящиеУведомленияОРасхождении(Знач КоллекцияУведомленийXML, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации) Экспорт
	
	РезультатОтправки = Новый Соответствие;
	//обходим коллекцию актов 
	Для Каждого ЭлементКоллекции Из КоллекцияУведомленийXML Цикл
		УведомлениеBase64 = ЭлементКоллекции.Значение.ДокументBase64;
		ПодписанныйДокумент = ЭлементКоллекции.Значение.ПодписанныйДокумент;
		НомерДокумента = ЭлементКоллекции.Ключ.Номер;
		
		Если ПодписанныйДокумент = "НеВыбран" Тогда 
			Текст = НСтр("ru = 'Документ № %1 был исключен из отправки, т.к. не был подписан ЭЦП.'");
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, НомерДокумента); 
			СообщениеПользователя = Новый СообщениеПользователю;
			СообщениеПользователя.Текст = ТекстСообщения;
			СообщениеПользователя.Сообщить();
			Продолжить;
		КонецЕсли;
		
		//каждый документ передаем в процедуру отправки
		РезультатВыполненияНаСервере = ВыполнитьСозданиеУведомленияОРасхождении(УведомлениеBase64, ПодписанныйДокумент, НомерДокумента, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации);
		РезультатОтправки.Вставить(ЭлементКоллекции.Ключ, РезультатВыполненияНаСервере);
		
	КонецЦикла;
	
	//БМ_ИСМПТ ТРЕБУЕТСЯ_РАССМОТРЕНИЕ	Доработать обновление документов
	// Обновим статусы отправленных и заполняем идентификаторы после завершения отправки всех документов
	ОбновитьУведомлениеПослеОтправки(РезультатОтправки, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации);
	
	Возврат РезультатОтправки;
	
КонецФункции

Процедура ОбновитьУведомлениеПослеОтправки(РезультатОтправкиДокументов, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации)
	
	Для каждого РезультатОтправки Из РезультатОтправкиДокументов Цикл
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибка(РезультатОтправки.Значение, ИнформацияОбОшибке) Тогда
			ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = НСтр("ru = 'При отправке уведомления на сервере произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ОбменИСМПТ.ОбновитьАктыПослеОтправки'"), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			Продолжить;
		Иначе
			//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
			ОчиститьОшибкиДокумента(РезультатОтправки.Ключ);	
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатОтправки.Значение.ТекстОтвета);
		РезультатЗапроса = ПрочитатьJSON(ЧтениеJSON);
		
		ИдентификаторНаСервере = ?(РезультатЗапроса.Свойство("id"), РезультатЗапроса.id, "");
		ДопДанныеДокумента = ПолучитьДополнительныеДанныеПоИдентификатору(ИдентификаторНаСервере, ДанныеПрофилей, СтруктурнаяЕдиница, Ложь, ТокенАвторизации);
		
		Попытка
			ДокументОбъект = РезультатОтправки.Ключ.ПолучитьОбъект();
			ДокументОбъект.Идентификатор = ИдентификаторНаСервере;
			//БМ_ИСМПТ ТРЕБУЕТСЯ_РАССМОТРЕНИЕ	Сейчас номер и идентификатор для уведомления одинаковые (возможно поменяют в API)
			ДокументОбъект.НомерИСМПТ = ДопДанныеДокумента.НомерИСМПТ;
			ДокументОбъект.ДатаВИСМПТ = ДопДанныеДокумента.ДатаВИСМПТ;
			Статус = ПолучитьСтатусДокументаПоКоду(ДопДанныеДокумента.Статус);
			Если Статус <> Неопределено Тогда
				ДокументОбъект.Статус = Статус;
			КонецЕсли;
			ДокументОбъект.Записать();
		Исключение
			//ОписаниеОшибки()
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьУведомлениеПоИдентификатору(Знач МассивДокументов, ДанныеПрофилей, ТокенАвторизации) Экспорт
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УОР.Ссылка КАК Ссылка,
	|	УОР.Идентификатор КАК Идентификатор,
	|	УОР.Направление КАК Направление,
	|	УОР.НомерИСМПТ КАК НомерИСМПТ
	|ИЗ
	|	Документ.УведомлениеОРасхожденииИСМПТК КАК УОР
	|ГДЕ
	|	УОР.Ссылка В(&МассивДокументов)
	|	И НЕ УОР.Идентификатор = """"
	|ИТОГИ ПО
	|	Направление";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	ВыборкаНаправление = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНаправление.Следующий() Цикл
		
		Выборка = ВыборкаНаправление.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
				//ошибка, в документе нет идентификатора
				Продолжить;
			КонецЕсли;
			
			ПараметрыДокумента = Новый Структура;
			
			//БМ_ИСМПТ ТРЕБУЕТСЯ_РАССМОТРЕНИЕ Вылет базы при обновлении УОР - временное решение
			ПараметрыДокумента.Вставить("Исходящий", ?(Выборка.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий, Истина, Ложь));
			
			ПараметрыДокумента.Вставить("Идентификатор", Выборка.Идентификатор);
			РезультатВыполненияНаСервере = ПолучитьДокументСервера(ПараметрыДокумента, ДанныеПрофилей, ТокенАвторизации);
			ДополнительныеДанные = ПолучитьДополнительныеДанныеПоИдентификатору(Выборка.Идентификатор, ДанныеПрофилей, ДанныеПрофилей, НЕ ПараметрыДокумента.Исходящий, ТокенАвторизации);
			ОбновитьУведомлениеПоДаннымСервера(РезультатВыполненияНаСервере, Выборка.Ссылка, ДополнительныеДанные);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//Обновляет документы Уведомление о расхождении
Процедура ОбновитьУведомлениеПоДаннымСервера(РезультатВыполненияНаСервере, УведомлениеСсылка, ДополнительныеДанные, Успешно = Ложь)
	
	ИнформацияОбОшибке = Неопределено;
	
	Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ЗаполнитьОшибкиДокумента(УведомлениеСсылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
		ТекстСообщения = НСтр("ru = 'При обновлении с сервера произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомлениеПоДаннымСервера'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		Возврат;
	Иначе
		//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
		ОчиститьОшибкиДокумента(УведомлениеСсылка);		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		//БМ_ИСМПТ ТРЕБУЕТСЯ_РАССМОТРЕНИЕ	Доработать обновление документов по данным сервера
		ДвоичныеДанныеXML = Base64Значение(РезультатВыполненияНаСервере.ТекстОтвета);
		СтрокаXML = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеXML, КодировкаТекста.UTF8);
		
		Фабрика = ФабрикаАПП_XML_API("СхемаУОР_XML_API");
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		ОбъектXDTO = Фабрика.ПрочитатьXML(ЧтениеXML);
		ДокументXDTO = ОбъектXDTO.document;
		//correctionDocId - Признак исправленного Акта
		//mainInfo
		//consigneeInfo
		//consigneeIdentificationCode ИИН/БИН получателя
		//consigneeName Наименование получателя
		//originalDocInfo Реквизиты бумажного документа
		//docDate Дата первичного документа
		//docNumber Номер первичного документа
		//supplierInfo
		//supplierIdentificationCode ИИН/БИН отправителя
		//supplierName Наименование отправителя
		//operationType Тип операции:1 - Реализация; 2 - Комиссия/агентская торговля
		//productList 
		//iCode Код идентификации
		//count Количество потребительских упаковок.
		//reviseStatusCode Статус сверки Кода
		
		//заполнить документ по данным сервера
		ДокументОбъект = УведомлениеСсылка.ПолучитьОбъект();
		ИсходныйДокумент = ДокументОбъект.Скопировать();
		
		Если ИсходныйДокумент.Марки.Количество() = 0 Тогда
			ИсходныйДокумент.Марки.Загрузить(ДокументОбъект.Марки.Выгрузить());
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
			
			ЗаполнитьЗначенияСвойств(ДокументОбъект, ДополнительныеДанные, "НомерИСМПТ, ДатаВИСМПТ");
			Статус = ПолучитьСтатусДокументаПоКоду(ДополнительныеДанные.Статус);
			
			Если Статус <> Неопределено Тогда
				ДокументОбъект.Статус = Статус;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДокументXDTO.Свойства().Получить("correctionDocId") <> Неопределено Тогда
			ДанныеСвязанногоАкта = НайтиАктПоИдентификатору(ДокументXDTO.correctionDocId);
			ДокументОбъект.СвязанныйАкт = ДанныеСвязанногоАкта.ПервичныйАкт;
			ДокументОбъект.РегистрационныйНомерСвязанногоАкта = ДанныеСвязанногоАкта.НомерИСМПТ;
			ДокументОбъект.ВидОперации = ДанныеСвязанногоАкта.ВидОперации;
		КонецЕсли;
		
		Если ДокументОбъект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда
		
		Если ДокументXDTO.Свойства().Получить("operationType") <> Неопределено Тогда
			Если ДокументXDTO.operationType = "1" Тогда
				ДокументОбъект.ВидОперации = Перечисления.ХозяйственныеОперацииИСМПТК.Реализация;
			ИначеЕсли ДокументXDTO.operationType = "2" Тогда
				ДокументОбъект.ВидОперации = Перечисления.ХозяйственныеОперацииИСМПТК.КомиссияИАгентскаяТорговля;
			КонецЕсли;
		КонецЕсли;
		
		//если в данных нет информации о виде операции, то заполняем по умолчанию значением Реализация
		Если Не ЗначениеЗаполнено(ДокументОбъект.ВидОперации) Тогда
			ДокументОбъект.ВидОперации = Перечисления.ХозяйственныеОперацииИСМПТК.Реализация;
		КонецЕсли;
		
		ДокументОбъект.ПоставщикНаименование 		    = ДокументXDTO.mainInfo.supplierInfo.supplierName;
		ДокументОбъект.ПоставщикИдентификационныйНомер  = ДокументXDTO.mainInfo.supplierInfo.supplierIdentificationCode;
		
		ДокументОбъект.ПолучательНаименование 			= ДокументXDTO.mainInfo.consigneeInfo.consigneeName;
		ДокументОбъект.ПолучательИдентификационныйНомер = ДокументXDTO.mainInfo.consigneeInfo.consigneeIdentificationCode;
		
		ИдентификационныеНомераКонтрагентов 	 = Новый Массив;
		ИдентификационныеНомераСтруктурныхЕдиниц = Новый Массив;	
		
		Если ЗначениеЗаполнено(ДокументОбъект.ПоставщикИдентификационныйНомер) Тогда
			ИдентификационныеНомераКонтрагентов.Добавить(ДокументОбъект.ПоставщикИдентификационныйНомер);
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ДокументОбъект.ПоставщикИдентификационныйНомер);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОбъект.ПолучательИдентификационныйНомер) Тогда
			ИдентификационныеНомераКонтрагентов.Добавить(ДокументОбъект.ПолучательИдентификационныйНомер);
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ДокументОбъект.ПолучательИдентификационныйНомер);
		КонецЕсли;
		
		СоответствияИдентификаторовИСсылок = НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(ИдентификационныеНомераКонтрагентов, ИдентификационныеНомераСтруктурныхЕдиниц);
		
		// Заполнить ссылки на контрагентов. 
		СоответствияКонтрагентов = СоответствияИдентификаторовИСсылок.СоответствияКонтрагентов;
		
		Для Каждого ЭлементСоответствияКонтрагентов Из СоответствияКонтрагентов Цикл
			
			Идентификатор = ЭлементСоответствияКонтрагентов.Ключ;
			Контрагент	  = ЭлементСоответствияКонтрагентов.Значение;
			
			Если ДокументОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Поставщик  = Контрагент;
			КонецЕсли;
			
			Если ДокументОбъект.ПолучательИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Получатель = Контрагент;
			КонецЕсли;
			
		КонецЦикла;
		
		// Заполнить ссылки на структурные единицы.
		СоответствияСтруктурныхЕдиниц = СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц;
		
		Для Каждого ЭлементСоответствияСтруктурныхЕдиниц Из СоответствияСтруктурныхЕдиниц Цикл
			
			Идентификатор = ЭлементСоответствияСтруктурныхЕдиниц.Ключ;
			Контрагент 	  = ЭлементСоответствияСтруктурныхЕдиниц.Значение;
			
			Если ДокументОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Поставщик  = Контрагент;
			КонецЕсли;
			
			Если ДокументОбъект.ПолучательИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Получатель = Контрагент;
			КонецЕсли;
			
		КонецЦикла;
		
		НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();  
		
		Если ТипЗнч(ДокументXDTO.productList.iCode) = Тип("ОбъектXDTO") Тогда
			
			ДокументОбъект.Марки.Очистить();
			КодXDTO 	= ДокументXDTO.productList.iCode;
			НоваяСтрока = ДокументОбъект.Марки.Добавить();
			НоваяСтрока.КодИдентификации = КодXDTO.Последовательность().ПолучитьТекст(0);
			НоваяСтрока.СтатусСверкиКода = СтатусСверкиПоКоду(КодXDTO.reviseStatusCode);
			
			ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(НоваяСтрока.КодИдентификации, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
			
			Если Не ДанныеРазбора = Неопределено Тогда
				НоваяСтрока.ВидУпаковки 	= ДанныеРазбора.ВидУпаковки;
				НоваяСтрока.ВидПродукцииИС	= ДанныеРазбора.ВидыПродукции[0];
				
				НоваяСтрока.Количество = 1;
				НайденнаяНоменклатура = Неопределено;
				
				ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрока, ДанныеРазбора, НайденнаяНоменклатура);
				
				НоваяСтрока.Номенклатура = НайденнаяНоменклатура;
				
			Иначе
				ТекстСообщения = НСтр("ru = 'Ошибка разбора документа %1! Возможно он содержит данные по виду номенклатуры, учет по которому не ведется. '");
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект.Ссылка); 
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомлениеПоДаннымСервера'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);КонецЕсли;
		ИначеЕсли ТипЗнч(ДокументXDTO.productList.iCode)=Тип("СписокXDTO") Тогда
			
			ДокументОбъект.Марки.Очистить();
			
			Для каждого СтрокаXDTO Из ДокументXDTO.productList.iCode Цикл
				
				КодXDTO = СтрокаXDTO;
				НоваяСтрока = ДокументОбъект.Марки.Добавить();
				НоваяСтрока.КодИдентификации = КодXDTO.Последовательность().ПолучитьТекст(0);
				НоваяСтрока.СтатусСверкиКода = СтатусСверкиПоКоду(КодXDTO.reviseStatusCode);
				
				ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(НоваяСтрока.КодИдентификации, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
				
				Если Не ДанныеРазбора = Неопределено Тогда
					НоваяСтрока.ВидУпаковки 	= ДанныеРазбора.ВидУпаковки;
					НоваяСтрока.ВидПродукцииИС	= ДанныеРазбора.ВидыПродукции[0];
					
					НоваяСтрока.Количество = 1;
					НайденнаяНоменклатура = Неопределено;
				
					ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрока, ДанныеРазбора, НайденнаяНоменклатура);
					
					НоваяСтрока.Номенклатура = НайденнаяНоменклатура;
				Иначе
					ТекстСообщения = НСтр("ru = 'Ошибка разбора документа %1! Возможно он содержит данные по виду номенклатуры, учет по которому не ведется. '");
					ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект.Ссылка); 
					ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомлениеПоДаннымСервера'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ДокументОбъект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда
			ДокументОбъект.Контрагент = ДокументОбъект.Получатель;
		Иначе
			ДокументОбъект.Контрагент = ДокументОбъект.Поставщик;
		КонецЕсли;

		КонецЕсли;
		
		//провести документы 
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		ЗафиксироватьТранзакцию();
		Успешно = Истина;
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомлениеПоДаннымСервера'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьСтатусыУведомлениеОВводеВыводе(Знач МассивДокументов, ТипДокумента, ДанныеПрофилей, ТокенАвторизации) Экспорт
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Уведомление.Ссылка КАК Ссылка,
	|	Уведомление.Идентификатор КАК Идентификатор,
	|	Уведомление.НомерИСМПТ КАК НомерИСМПТ
	|ИЗ
	|	Документ.%ТипДокумента% КАК Уведомление
	|ГДЕ
	|	Уведомление.Ссылка В(&МассивДокументов)
	|	И НЕ Уведомление.Идентификатор = """"";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТипДокумента%", ТипДокумента);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
			//документы без идентификаторов не обрабатываются
			Продолжить;
		КонецЕсли;
		
		ПараметрыДокумента = Новый Структура;
		
		ПараметрыДокумента.Вставить("Идентификатор", Выборка.Идентификатор);
		РезультатВыполненияНаСервере = ПолучитьУведомленияВводаВывода(ПараметрыДокумента, ДанныеПрофилей, ТокенАвторизации);
		
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
			ЗаполнитьОшибкиДокумента(Выборка.Ссылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = НСтр("ru = 'При обновлении с сервера произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомленияОВводеВОборотПоДаннымСервера'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
			Возврат;
		Иначе
			//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
			ОчиститьОшибкиДокумента(Выборка.Ссылка);
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатВыполненияНаСервере.ТекстОтвета);
		ОтветСервера    = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON);
		СтатусДокумента = ПолучитьСтатусДокументаУведомленияПоКоду(ОтветСервера.status);
		
		Если СтатусДокумента <> Неопределено Тогда
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Статус 		= СтатусДокумента;
			ДокументОбъект.НомерИСМПТ 	= ОтветСервера.number;
			ДокументОбъект.ДатаВИСМПТ 	= ПрочитатьДатуJSON(ОтветСервера.docDate, ФорматДатыJSON.ISO);

			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				
				ОтменитьТранзакцию();
				ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
				ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомленияОВыводеИзОборотаПоДаннымСервера'"), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
				
				ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьУведомлениеОВводеВыводе(Знач МассивДокументов, ТипДокумента, ДанныеПрофилей, ТокенАвторизации) Экспорт
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Уведомление.Ссылка КАК Ссылка,
	|	Уведомление.Идентификатор КАК Идентификатор,
	|	Уведомление.НомерИСМПТ КАК НомерИСМПТ
	|ИЗ
	|	Документ.%ТипДокумента% КАК Уведомление
	|ГДЕ
	|	Уведомление.Ссылка В(&МассивДокументов)
	|	И НЕ Уведомление.Идентификатор = """"";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТипДокумента%", ТипДокумента);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
			//документы без идентификаторов не обрабатываются
			Продолжить;
		КонецЕсли;
		
		ПараметрыДокумента = Новый Структура;
		
		ПараметрыДокумента.Вставить("Идентификатор", Выборка.Идентификатор);
		РезультатВыполненияНаСервере = ПолучитьУведомленияВводаВывода(ПараметрыДокумента, ДанныеПрофилей, ТокенАвторизации);
		Если ТипДокумента = "УведомлениеОВводеВОборотИСМПТК" Тогда
			ОбновитьУведомленияОВводеВОборотПоДаннымСервера(РезультатВыполненияНаСервере, Выборка.Ссылка);
		ИначеЕсли ТипДокумента = "УведомлениеОВыводеИзОборотаИСМПТК" Тогда
			ОбновитьУведомленияОВыводеИзОборотаПоДаннымСервера(РезультатВыполненияНаСервере, Выборка.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//Заполняет информацию об ошибках в табличную часть документа
//
Процедура ЗаполнитьОшибкиДокумента(СсылкаНаДокумент, ПредставлениеОшибки, ОчищатьТаблицу = Ложь)
	
	Попытка
		ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
		Если ОчищатьТаблицу Тогда
			ДокументОбъект.Ошибки.Очистить();
		КонецЕсли;
		ОшибкиСтрока = ДокументОбъект.Ошибки.Добавить();
		ОшибкиСтрока.Текст = НСтр("ru = 'При обновлении с сервера произошла ошибка: '") + Символы.ПС + ПредставлениеОшибки;
		ДокументОбъект.Записать();
	Исключение
		   //ОписаниеОшибки()
	КонецПопытки; 
	
КонецПроцедуры

//Заполняет идентификатор документа для обновления с сервера
//
Процедура ЗаполнитьИдентификаторДокумента(СсылкаНаДокумент, ИдентификаторДокумента, НовыйСтатус = Неопределено)
	
	Попытка
		ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
		ДокументОбъект.Идентификатор = ИдентификаторДокумента;
		Если НовыйСтатус <> Неопределено Тогда
			ДокументОбъект.Статус = НовыйСтатус;
		КонецЕсли;
		ДокументОбъект.Записать();
	Исключение
		   //ОписаниеОшибки()
	КонецПопытки; 
	
КонецПроцедуры

//Заполняет информацию об ошибках в табличную часть документа
//
Процедура ОчиститьОшибкиДокумента(СсылкаНаДокумент)
	
	Попытка
		ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
		ДокументОбъект.Ошибки.Очистить();
		ДокументОбъект.Записать();
	Исключение
		   //ОписаниеОшибки()
	КонецПопытки; 
	
КонецПроцедуры

//Заполняет информацию об ошибках в табличную часть документа
//
Процедура ПолучитьДокументыУведомлениеОРасхождении(СтруктурнаяЕдиница, ОтветСервера, ЭтоИсходящиеДокументы, ТокенАвторизации)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСервера);
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON);
	
	Если ОбъектXDTO.count = 0 Тогда
		//в ответе вернулся пустой список
		Возврат;
	КонецЕсли;
	
	МассивИдентификаторов = Новый Массив;
	СоответствиеНомерам = Новый Соответствие;
	
	Если ТипЗнч(ОбъектXDTO.items.items) = Тип("СписокXDTO") Тогда
		
		Для каждого ЭлементСписка Из ОбъектXDTO.items.items Цикл
			
			//пропускаем элементы с типом 1000 - Акты ПП
			Если ЭлементСписка.type <> 1005 Тогда
				Продолжить;
			КонецЕсли;
			
			//делаем запрос по номеру
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("Исходящий", НЕ ЭтоИсходящиеДокументы); // если документы Акт входящие, то УОР наоборот
			ПараметрыДокумента.Вставить("Идентификатор", ЭлементСписка.number);
			РезультатВыполненияНаСервере = ПолучитьДокументСервера(ПараметрыДокумента, СтруктурнаяЕдиница, ТокенАвторизации);
			
			//проверяем результат на ошибки
			Если РезультатВыполненияНаСервере.КодСостояния = 404 Тогда
				//это номер акта, уведомления по нему нет
				//поэтому никаких действий делать не нужно
			ИначеЕсли РезультатВыполненияНаСервере.КодСостояния = 200 И ЗначениеЗаполнено(РезультатВыполненияНаСервере.ТекстОтвета) Тогда
				//это номер уведомления и получено тело УОР
				МассивИдентификаторов.Добавить(ЭлементСписка.number);
				ДанныеДокумента = Новый Структура("Номер, Дата, Статус", ЭлементСписка.number, ЭлементСписка.date, ЭлементСписка.status);
				ДанныеДокумента.Вставить("РезультатВыполненияНаСервере", РезультатВыполненияНаСервере);
				СоответствиеНомерам.Вставить(ЭлементСписка.number, ДанныеДокумента);
			Иначе
				ИнформацияОбОшибке = Неопределено;
				Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
					ТекстСообщения = НСтр("ru = 'При обращении к серверу произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
					ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'ОбменИСМПТ.ПолучитьДокументыУведомлениеОРасхождении'"), 
						УровеньЖурналаРегистрации.Ошибка,,,
						ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЭлементСписка = ОбъектXDTO.items.items;
		Если ЭлементСписка.type = 1005 Тогда
			
			//делаем запрос по номеру
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("Исходящий", 	 НЕ ЭтоИсходящиеДокументы); // если документы Акт входящие, то УОР наоборот
			ПараметрыДокумента.Вставить("Идентификатор", ЭлементСписка.number);
			РезультатВыполненияНаСервере = ПолучитьДокументСервера(ПараметрыДокумента, СтруктурнаяЕдиница, ТокенАвторизации);
			
			//проверяем результат на ошибки
			Если РезультатВыполненияНаСервере.КодСостояния = 404 Тогда
				//это номер акта, уведомления по нему нет
				//поэтому никаких действий делать не нужно
			ИначеЕсли РезультатВыполненияНаСервере.КодСостояния = 200 И ЗначениеЗаполнено(РезультатВыполненияНаСервере.ТекстОтвета) Тогда
				//это номер уведомления и получено тело УОР
				МассивИдентификаторов.Добавить(ЭлементСписка.number);
				ДанныеДокумента = Новый Структура("Номер, Дата, Статус", ЭлементСписка.number, ЭлементСписка.date, ЭлементСписка.status);
				ДанныеДокумента.Вставить("РезультатВыполненияНаСервере", РезультатВыполненияНаСервере);
				СоответствиеНомерам.Вставить(ЭлементСписка.number, ДанныеДокумента);
			Иначе
				ИнформацияОбОшибке = Неопределено;
				Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
					ТекстСообщения = НСтр("ru = 'При обращении к серверу произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
					ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'ОбменИСМПТ.ПолучитьДокументыУведомлениеОРасхождении'"), 
						УровеньЖурналаРегистрации.Ошибка,,,
						ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СуществующиеДокументы = Новый Соответствие;
	// Заполнить соответствие пустыми ссылками.
	ПустаяСсылка = Документы.УведомлениеОРасхожденииИСМПТК.ПустаяСсылка();
	
	Для Каждого ЭлементМассива Из МассивИдентификаторов Цикл
		СуществующиеДокументы.Вставить(ЭлементМассива, ПустаяСсылка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОРасхожденииИСМПТ.Ссылка КАК НайденнаяСсылка,
	|	УведомлениеОРасхожденииИСМПТ.Идентификатор КАК Идентификатор
	|ИЗ
	|	Документ.УведомлениеОРасхожденииИСМПТК КАК УведомлениеОРасхожденииИСМПТ
	|ГДЕ
	|	УведомлениеОРасхожденииИСМПТ.Идентификатор В(&Идентификаторы)";
	
	Запрос.УстановитьПараметр("Идентификаторы", МассивИдентификаторов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СуществующиеДокументы.Вставить(Выборка.Идентификатор, Выборка.НайденнаяСсылка);
	КонецЦикла;
	
	Направление = ?(ЭтоИсходящиеДокументы, Перечисления.НаправленияДокументовИСМПТК.Входящий, Перечисления.НаправленияДокументовИСМПТК.Исходящий);
	МассивДокументов = Новый Массив;
	
	Для Каждого ЭлементКоллекции Из СуществующиеДокументы Цикл
		
		Идентификатор = ЭлементКоллекции.Ключ;
		Ссылка = ЭлементКоллекции.Значение;
		
		Если Ссылка.Пустая() Тогда
			
			НовыйДокумент = Документы.УведомлениеОРасхожденииИСМПТК.СоздатьДокумент();
			НовыйДокумент.Дата = ТекущаяДатаСеанса();
			НовыйДокумент.Идентификатор = Идентификатор;
			ДанныеДокумента = СоответствиеНомерам.Получить(Идентификатор);
			НовыйДокумент.НомерИСМПТ = ДанныеДокумента.Номер;
			НовыйДокумент.ДатаВИСМПТ = Дата(1970,1,1,0,0,0) + ДанныеДокумента.Дата;
			Статус = ПолучитьСтатусДокументаПоКоду(ДанныеДокумента.Статус);
			Если Статус <> Неопределено Тогда
				НовыйДокумент.Статус = Статус;
			КонецЕсли;
			НовыйДокумент.Направление = Направление;
			
			ТекущийПользователь = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь();
			НовыйДокумент.Автор = ТекущийПользователь;
			НовыйДокумент.Организация = СтруктурнаяЕдиница;
			
			МассивДокументов.Добавить(НовыйДокумент);
			
			//Попытка
			//	НовыйДокумент.Записать();
			//	ОбновитьУведомлениеПоДаннымСервера(ДанныеДокумента.РезультатВыполненияНаСервере, НовыйДокумент.Ссылка, Неопределено);
			//Исключение
			//    //ОписаниеОшибки()
			//КонецПопытки;
			
		Иначе
			МассивДокументов.Добавить(Ссылка.ПолучитьОбъект());
			//ДанныеДокумента = СоответствиеНомерам.Получить(Идентификатор);
			//ОбновитьУведомлениеПоДаннымСервера(ДанныеДокумента.РезультатВыполненияНаСервере, Ссылка, Неопределено);
		КонецЕсли;
		
	КонецЦикла;
	
	МассивСтарыхДокументов = Новый Массив;
	Для каждого ДокументОбъект Из МассивДокументов Цикл
		Если ДокументОбъект.Ссылка.Пустая() Тогда
			ДокументОбъект.Записать();
		Иначе
			КопияДокумента = ДокументОбъект.Скопировать();
			Если КопияДокумента.Марки.Количество() = 0 Тогда
				КопияДокумента.Марки.Загрузить(ДокументОбъект.Марки.Выгрузить());
			КонецЕсли;
			ИсходныйНовый = Новый Структура;
			ИсходныйНовый.Вставить("ИсходныйОбъект", 	КопияДокумента);
			ИсходныйНовый.Вставить("ОбновленныйОбъект", ДокументОбъект);
			МассивСтарыхДокументов.Добавить(ИсходныйНовый);
		КонецЕсли;
	КонецЦикла;
	
	СчетчикДокументы = 0;
	СчетчикДокументыОшибка = 0;
	
	Для каждого ДокументОбъект Из МассивДокументов Цикл
		ДанныеДокумента = СоответствиеНомерам.Получить(ДокументОбъект.Идентификатор);
		Успешно = Ложь;
		ОбновитьУведомлениеПоДаннымСервера(ДанныеДокумента.РезультатВыполненияНаСервере, ДокументОбъект.Ссылка, Неопределено, Успешно);
		Если Успешно Тогда
			СчетчикДокументы = СчетчикДокументы + 1;
		Иначе
			СчетчикДокументыОшибка = СчетчикДокументыОшибка + 1;
		КонецЕсли;		
	КонецЦикла;
	
	Если ИнтеграцияИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанных() Тогда
		//// Вывод сообщений о результатах операции ////
		Если Не СчетчикДокументы = 0 Тогда
			Если ЭтоИсходящиеДокументы Тогда
				ТекстСообщения = НСтр("ru = 'Обновлено по данным сервера: %1 Уведомления(-й) о расхождениях (входящий).'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Обновлено по данным сервера: %1 Уведомления(-й) о расхождениях (исходящий).'");
			КонецЕсли;
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СчетчикДокументы);
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Не СчетчикДокументыОшибка = 0 Тогда
			Если ЭтоИсходящиеДокументы Тогда
				//Для УОР это входящие
				ТекстСообщения = НСтр("ru = 'Не удалось обновить по данным сервера: %1 Уведомления(-й) о расхождениях (входящий).'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось обновить по данным сервера: %1 Уведомления(-й) о расхождениях (исходящий).'");
			КонецЕсли;
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СчетчикДокументыОшибка);
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если СчетчикДокументы = 0 И СчетчикДокументыОшибка = 0 Тогда
			Если ЭтоИсходящиеДокументы Тогда
				ТекстСообщения = НСтр("ru = 'В указанном периоде нет Уведомлений о расхождениях (входящих), требующих синхронизации.'");
			Иначе
				ТекстСообщения = НСтр("ru = 'В указанном периоде нет Уведомлений о расхождениях (исходящих), требующих синхронизации.'");
			КонецЕсли;
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		////////////////
	КонецЕсли;

	ВосстановитьСсылочныеРеквизитыДокументов(МассивСтарыхДокументов);
	
КонецПроцедуры

// Процедура ОтклонитьУведомление()
//
// Описание: Выполняет подтверждение или отклонение актов на сервере
//
// Параметры 
//	КоллекцияСгруппированныхДокументов - Соответствие - коллекция сгруппированных по структурным единицам документам
//	ДанныеПрофилей - Структура - данные для авторизации пользователя
//
Функция ОтклонитьУведомление_СозданиеТитулов(КоллекцияСгруппированныхДокументов, ДанныеПрофилей, СписокТокеновАвторизации)
	
	Для каждого СгруппированныеДокументы Из КоллекцияСгруппированныхДокументов Цикл
		
		//получить идентификаторы запросом
		СтруктурнаяЕдиница = СгруппированныеДокументы.Ключ;
		МассивДокументов = СгруппированныеДокументы.Значение;
		Если МассивДокументов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТокенАвторизации = СписокТокеновАвторизации.Получить(СтруктурнаяЕдиница);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УОР.Ссылка КАК Ссылка,
		|	УОР.Идентификатор КАК Идентификатор,
		|	УОР.Направление КАК Направление,
		|	УОР.НомерИСМПТ КАК НомерИСМПТ
		|ИЗ
		|	Документ.УведомлениеОРасхожденииИСМПТК КАК УОР
		|ГДЕ
		|	УОР.Ссылка В(&МассивДокументов)
		|	И НЕ УОР.Идентификатор = """"";
		
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			РезультатВыполненияНаСервере = ВыполнитьОтклонениеУведомленияОРасхождении(Выборка.Идентификатор, ТокенАвторизации, СтруктурнаяЕдиница);
			ИнформацияОбОшибке = Неопределено;
			
			Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
				ЗаполнитьОшибкиДокумента(Выборка.Ссылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
				ТекстСообщения = НСтр("ru = 'При отклонении уведомления произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'ОбменИСМПТ.ПодвердитьАктыПП'"), 
					УровеньЖурналаРегистрации.Ошибка,,,
					ТекстСообщения);
				Продолжить;
			Иначе
				//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
				ОчиститьОшибкиДокумента(Выборка.Ссылка);	
			КонецЕсли;
			
			Если РезультатВыполненияНаСервере.КодСостояния = 200 Тогда
				КодСтатуса = 5; // 4-Подписан получателем (или подтвержден), 5 - Отклонен
				ОбновитьСтатусДокумента(Выборка.Ссылка, ПолучитьСтатусДокументаПоКоду(КодСтатуса));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецФункции //ОтклонитьУведомление()

Процедура ЗаполнитьСсылкиВУОРПослеПолученияКорректировки(КорректировкаСсылка, ПервичныйАкт, УОР)
	
	УОРОбъект = УОР.ПолучитьОбъект();	
	УОРОбъект.СвязанныйАкт 	   = ПервичныйАкт;
	УОРОбъект.РегистрационныйНомерСвязанногоАкта = ПервичныйАкт.НомерИСМПТ;
	УОРОбъект.АктКорректировка = КорректировкаСсылка;
	УОРОбъект.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

#КонецОбласти

#Область УведомленияОВводе

Процедура СоздатьИсходящиеУведомленияОВводеВОборот(
	Знач МассивДокументов, 
	Знач УстанавливатьПодпись, 
	Знач ТипПодписи, 
	КоллекцияАктXML, 
	КоллекцияSignedContentXML) Экспорт
	
	КоллекцияАктXML = Новый Соответствие;
	КоллекцияSignedContentXML = Новый Соответствие;
	
	Фабрика = ФабрикаАПП_XML_API("СхемаУВВО_XML_API");
	
	Для Каждого СсылкаУведомление Из МассивДокументов Цикл
		
		ОбъектДокумент = СсылкаУведомление.ПолучитьОбъект();
		УведомлениеXTDO = НовоеУведомленияОВводеВОборот(ОбъектДокумент, Фабрика);
		УведомлениеXML = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.КаноническаяСтрокаXMLИзОбъектаXDTO(УведомлениеXTDO, "file", Фабрика);
		//заменяем атрибуты для соответствия формату
		ПространствоИмен = ПолучитьПространствоИменИСМПТ();
		УведомлениеXML = "<?xml version=""1.0"" encoding=""UTF-8""?>" + СтрЗаменить(УведомлениеXML, "xmlns=""" + ПространствоИмен + """", "xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""xsd_notific_ReturnGoodsIntroduce.xsd""");
		УведомлениеXML = СтрЗаменить(УведомлениеXML, """ version", "Z"" version");
		КоллекцияАктXML.Вставить(СсылкаУведомление, УведомлениеXML);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовоеУведомленияОВводеВОборот(Знач Уведомление, Знач Фабрика)
	
	//пространство имен добавлено вручную в схему, чтобы работать в 1С
	ПространствоИмен = ПолучитьПространствоИменИСМПТ();
	ИмяУзла = "file";
	
	СвойствоЗаголовка = Фабрика.Пакеты.Получить(ПространствоИмен).КорневыеСвойства.Получить(ИмяУзла);
	ТипXDTOЗаголовка  = СвойствоЗаголовка.Тип;
	
	УведомлениеXDTO = Фабрика.Создать(ТипXDTOЗаголовка);
	ЗаполнитьУведомлениеОВводеВОборот(Уведомление, Фабрика, УведомлениеXDTO);
	
	Возврат УведомлениеXDTO;
	
КонецФункции

Процедура ЗаполнитьУведомлениеОВводеВОборот(Знач Уведомление, Знач Фабрика, УведомлениеXDTO)
	
	//////////////////////////////////////////////////////////////////////////////
	// Шапка.
	УведомлениеXDTO.fileId = СтрШаблон("KZ_EAES_%1", Уведомление.Ссылка.УникальныйИдентификатор());
	УведомлениеXDTO.sendingDateTime = Формат(УниверсальноеВремя(ТекущаяДатаСеанса()),"ДФ=ггг-ММ-ддThh:mm:ss");//YYYY-MMDDThh:mm:ssZ
	УведомлениеXDTO.version = "1.0";
	
	document = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO, "document", Фабрика);
	mainInfo = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document, "mainInfo", Фабрика);
	mainInfo.reason = КодПричиныПовторногоВвода(Уведомление.ПричинаВводаВОборот);
	participantInfo = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "participantInfo", Фабрика);
	originalDocInfo = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "originalDocInfo", Фабрика);
	
	//при заполнении уведомления поставщика и получателя меняем местами, так как представление в базе отличается от представления на сервере
	//supplierInfo.supplierName = Уведомление.ПолучательНаименование;
	//supplierInfo.supplierIdentificationCode = Уведомление.ПолучательИдентификационныйНомер;
	participantInfo.participantName = Уведомление.ПоставщикНаименование;
	participantInfo.participantIdentificationCode = Уведомление.ПоставщикИдентификационныйНомер;
	originalDocInfo.docName   = Уведомление.ДокументОснованиеНаименование;
	originalDocInfo.docNumber = Уведомление.ДокументОснованиеНомер;
	originalDocInfo.docDate   = Формат(Уведомление.ДокументОснованиеДата,"ДФ=dd.MM.yyyy");
	
	//////////////////////////////////////////////////////////////////////////////
	// Табличные части
	productList = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document, "productList", Фабрика);
	
	Для каждого МаркиСтрока Из Уведомление.Марки Цикл
		
		product = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовыйЭлементСпискаXDTO(УведомлениеXDTO.document.productList.iCode, Фабрика);
		product.__content = МаркиСтрока.КодИдентификации;
		product.count = МаркиСтрока.Количество;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОтправитьУведомленияОВВО(Знач КоллекцияДанныеКоллекцииДокументовXML, Знач КоллекцияПодписейСНТ, Знач ТокенАвторизации) Экспорт
	
	Результат = Неопределено;
	
	Для Каждого СгруппированныеДокументыXML Из КоллекцияПодписейСНТ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеДокументыXML.Ключ;
		ДанныеКоллекцииДокументовXML = СгруппированныеДокументыXML.Значение;
		
		Если ТипЗнч(ДанныеКоллекцииДокументовXML) = Тип("Соответствие") Тогда
			КоллекцияДокументовXML = ДанныеКоллекцииДокументовXML;
		Иначе
			КоллекцияДокументовXML = ПолучитьИзВременногоХранилища(ДанныеКоллекцииДокументовXML);
		КонецЕсли;
		
		Результат = ОтправитьИсходящиеУведомленияОВВО(КоллекцияДокументовXML, Неопределено, СтруктурнаяЕдиница, ТокенАвторизации);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьИсходящиеУведомленияОВВО(Знач КоллекцияУведомленийXML, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации) Экспорт
	
	РезультатОтправки = Новый Соответствие;
	//обходим коллекцию актов 
	Для Каждого ЭлементКоллекции Из КоллекцияУведомленийXML Цикл
		УведомлениеBase64 = ЭлементКоллекции.Значение.ДокументBase64;
		ПодписанныйДокумент = ЭлементКоллекции.Значение.ПодписанныйДокумент;
		
		Если ПодписанныйДокумент = "НеВыбран" Тогда 
			Текст = НСтр("ru = 'Документ № %1 был исключен из отправки, т.к. не был подписан ЭЦП.'");
			НомерДокмуентаОтправки = ЭлементКоллекции.Ключ.Номер;
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, НомерДокмуентаОтправки); 
			СообщениеПользователя = Новый СообщениеПользователю;
			СообщениеПользователя.Текст = ТекстСообщения;
			СообщениеПользователя.Сообщить();
			Продолжить;
		КонецЕсли;
		
		//каждый документ передаем в процедуру отправки
		РезультатВыполненияНаСервере = ВыполнитьСозданиеУведомленияОВВО(УведомлениеBase64, ПодписанныйДокумент, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации);
		РезультатОтправки.Вставить(ЭлементКоллекции.Ключ, РезультатВыполненияНаСервере);
		
	КонецЦикла;
	
	//БМ_ИСМПТ ТРЕБУЕТСЯ_РАССМОТРЕНИЕ	Доработать обновление документов (на текущий момент сервер не возвращает id созданного документа)
	// Обновим статусы отправленных и заполняем идентификаторы после завершения отправки всех документов
	ОбновитьУведомлениеВводаВыводаПослеОтправки(РезультатОтправки, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации, "УведомлениеОВводеВОборотИСМПТК");
	
	Возврат РезультатОтправки;
	
КонецФункции

Процедура ОбновитьУведомлениеВводаВыводаПослеОтправки(РезультатОтправкиДокументов, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации, ТипДокумента)
	
	Для каждого РезультатОтправки Из РезультатОтправкиДокументов Цикл
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибка(РезультатОтправки.Значение, ИнформацияОбОшибке) Тогда
			ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = НСтр("ru = 'При отправке уведомления на сервере произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомлениеВВОПослеОтправки'"), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			Продолжить;
		Иначе
			//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
			ОчиститьОшибкиДокумента(РезультатОтправки.Ключ);	
		КонецЕсли;
		
		Идентификатор = СтрШаблон("KZ_EAES_%1", РезультатОтправки.Ключ.УникальныйИдентификатор());
		//идентификатор необходимо сохранить до получения обновления
		ЗаполнитьИдентификаторДокумента(РезультатОтправки.Ключ, Идентификатор, Перечисления.СтатусыДокументовИСМПТК.Проверяется);
		
	КонецЦикла;
	
КонецПроцедуры

//Обновляет документ Уведомление о повторном вводе в оборот
Процедура ОбновитьУведомленияОВводеВОборотПоДаннымСервера(РезультатВыполненияНаСервере, УведомлениеСсылка)
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ЗаполнитьОшибкиДокумента(УведомлениеСсылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
		ТекстСообщения = НСтр("ru = 'При обновлении с сервера произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомленияОВводеВОборотПоДаннымСервера'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		Возврат;
	Иначе
		//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
		ОчиститьОшибкиДокумента(УведомлениеСсылка);	
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатВыполненияНаСервере.ТекстОтвета);
		ОтветСервера    = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON);
		СтатусДокумента = ПолучитьСтатусДокументаУведомленияПоКоду(ОтветСервера.status);
		СтрокаXML       = ОтветСервера.content;
		ДополнительныеДанные = Новый Структура("НомерИСМПТ, ДатаВИСМПТ");
		ДополнительныеДанные.НомерИСМПТ = ОтветСервера.number;
		ДополнительныеДанные.ДатаВИСМПТ = ПрочитатьДатуJSON(ОтветСервера.docDate, ФорматДатыJSON.ISO);
		
		Фабрика = ФабрикаАПП_XML_API("СхемаУВИО_XML_API");
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		ОбъектXDTO   = Фабрика.ПрочитатьXML(ЧтениеXML);
		ДокументXDTO = ОбъектXDTO.document;
		//mainInfo
		//consigneeInfo
		//reason Причина вывода
		//participantIdentificationCode ИИН/БИН отправителя
		//participantName Наименование отправителя
		//originalDocInfo 
		//docName Наименование первичного документа 
		//docNumber Номер первичного документа 
		//docDate Дата первичного документа  в формате .yyyy dd.mm
		//productList 
		//iCode Код идентификации
		//count Количество потребительских упаковок.
		
		//заполнить документ по данным сервера
		ДокументОбъект = УведомлениеСсылка.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
			ЗаполнитьЗначенияСвойств(ДокументОбъект, ДополнительныеДанные, "НомерИСМПТ, ДатаВИСМПТ");
			Статус = ПолучитьСтатусДокументаУведомленияПоКоду(ОтветСервера.status);
			Если Статус <> Неопределено Тогда
				ДокументОбъект.Статус = Статус;
			КонецЕсли;
		КонецЕсли;
		
		ДокументОбъект.ПоставщикНаименование = ДокументXDTO.mainInfo.participantInfo.participantName;
		ДокументОбъект.ПоставщикИдентификационныйНомер = ДокументXDTO.mainInfo.participantInfo.participantIdentificationCode;
			
		ИдентификационныеНомераКонтрагентов = Новый Массив;
		ИдентификационныеНомераСтруктурныхЕдиниц = Новый Массив;
		
		Если ЗначениеЗаполнено(ДокументОбъект.ПоставщикИдентификационныйНомер) Тогда
			ИдентификационныеНомераКонтрагентов.Добавить(ДокументОбъект.ПоставщикИдентификационныйНомер);
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ДокументОбъект.ПоставщикИдентификационныйНомер);
		КонецЕсли;
	
		СоответствияИдентификаторовИСсылок = НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(ИдентификационныеНомераКонтрагентов, ИдентификационныеНомераСтруктурныхЕдиниц);
		
		// Заполнить ссылки на контрагентов. 
		СоответствияКонтрагентов = СоответствияИдентификаторовИСсылок.СоответствияКонтрагентов;
		Для Каждого ЭлементСоответствияКонтрагентов Из СоответствияКонтрагентов Цикл
			
			Идентификатор = ЭлементСоответствияКонтрагентов.Ключ;
			Контрагент = ЭлементСоответствияКонтрагентов.Значение;
			
			Если ДокументОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Поставщик = Контрагент;
			КонецЕсли;
			
		КонецЦикла;
		
		// Заполнить ссылки на структурные единицы.
		СоответствияСтруктурныхЕдиниц = СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц;
		Для Каждого ЭлементСоответствияСтруктурныхЕдиниц Из СоответствияСтруктурныхЕдиниц Цикл
			
			Идентификатор = ЭлементСоответствияСтруктурныхЕдиниц.Ключ;
			Контрагент = ЭлементСоответствияСтруктурныхЕдиниц.Значение;
			
			Если ДокументОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Поставщик = Контрагент;
			КонецЕсли;
			
		КонецЦикла;
		
		НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();  
		
		Если ТипЗнч(ДокументXDTO.productList.iCode)=Тип("ОбъектXDTO") Тогда
			ДокументОбъект.Марки.Очистить();
			КодXDTO = ДокументXDTO.productList.iCode;
			НоваяСтрока = ДокументОбъект.Марки.Добавить();
			НоваяСтрока.КодИдентификации = КодXDTO.Последовательность().ПолучитьТекст(0);
			НоваяСтрока.Количество = КодXDTO.count;
			
			ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(НоваяСтрока.КодИдентификации, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
			
			Если Не ДанныеРазбора = Неопределено Тогда
				НоваяСтрока.ВидУпаковки 	= ДанныеРазбора.ВидУпаковки;
				НоваяСтрока.ВидПродукцииИС	= ДанныеРазбора.ВидыПродукции[0];
				НайденнаяНоменклатура = Неопределено;
				
				ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрока, ДанныеРазбора, НайденнаяНоменклатура);
				
				НоваяСтрока.Номенклатура = НайденнаяНоменклатура;
			Иначе
				ТекстСообщения = НСтр("ru = 'Ошибка разбора документа %1! Возможно он содержит данные по виду номенклатуры, учет по которому не ведется. '");
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект.Ссылка); 
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомленияОВводеВОборотПоДаннымСервера'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументXDTO.productList.iCode)=Тип("СписокXDTO") Тогда
			
			ДокументОбъект.Марки.Очистить();
			
			Для Каждого СтрокаXDTO Из ДокументXDTO.productList.iCode Цикл
				КодXDTO = СтрокаXDTO;
				НоваяСтрока = ДокументОбъект.Марки.Добавить();
				НоваяСтрока.КодИдентификации = КодXDTO.Последовательность().ПолучитьТекст(0);
				НоваяСтрока.Количество = КодXDTO.count;
				
				ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(НоваяСтрока.КодИдентификации, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
				
				Если Не ДанныеРазбора = Неопределено Тогда
					
					НоваяСтрока.ВидУпаковки 	= ДанныеРазбора.ВидУпаковки;
					НоваяСтрока.ВидПродукцииИС	= ДанныеРазбора.ВидыПродукции[0];
					НайденнаяНоменклатура = Неопределено;
				
					ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрока, ДанныеРазбора, НайденнаяНоменклатура);
					
					НоваяСтрока.Номенклатура = НайденнаяНоменклатура;
				Иначе
					ТекстСообщения = НСтр("ru = 'Ошибка разбора документа %1! Возможно он содержит данные по виду номенклатуры, учет по которому не ведется. '");
					ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект.Ссылка); 
					ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомленияОВводеВОборотПоДаннымСервера'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//табличная часть Товары
		ДокументОбъект.Товары.Очистить();
		ТоварыПоМаркам = ДокументОбъект.Марки.Выгрузить(,"Количество, Номенклатура, EAN, GTIN");
		ТоварыПоМаркам.Свернуть("Номенклатура, EAN, GTIN", "Количество");
		Для каждого СтрокаТовары Из ТоварыПоМаркам Цикл
			НоваяСтрока = ДокументОбъект.Товары.Добавить();
			НоваяСтрока.Номенклатура = СтрокаТовары.Номенклатура;
			НоваяСтрока.КоличествоИсточник = СтрокаТовары.Количество;
			НоваяСтрока.ЕдиницаИзмерения = ИнтеграцияИСМПТКПереопределяемый.ПолучитьЕдиницуИзмерения(НоваяСтрока.Номенклатура);
		КонецЦикла;
		
		//провести документы
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомленияОВводеВОборотПоДаннымСервера'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область УведомленияОВыводе

Процедура СоздатьИсходящиеУведомленияОВыводеИзОборота(
	Знач МассивДокументов, 
	Знач УстанавливатьПодпись, 
	Знач ТипПодписи, 
	КоллекцияАктXML, 
	КоллекцияSignedContentXML) Экспорт
	
	КоллекцияАктXML = Новый Соответствие;
	КоллекцияSignedContentXML = Новый Соответствие;
	
	Фабрика = ФабрикаАПП_XML_API("СхемаУВИО_XML_API");
	
	Для Каждого СсылкаАкт Из МассивДокументов Цикл
		
		ОбъектАктПП = СсылкаАкт.ПолучитьОбъект();
		АктXTDO = НовоеУведомленияОВыводеИзОборота(ОбъектАктПП, Фабрика);
		АктXML = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.КаноническаяСтрокаXMLИзОбъектаXDTO(АктXTDO, "file", Фабрика);
		//заменяем атрибуты для соответствия формату
		ПространствоИмен = ПолучитьПространствоИменИСМПТ();
		//БМ_ИСМПТ ТРЕБУЕТСЯ_РАССМОТРЕНИЕ	Уведомление о выводе - отправка, доработать
		АктXML = "<?xml version=""1.0"" encoding=""UTF-8""?>" + СтрЗаменить(АктXML, "xmlns=""" + ПространствоИмен + """", "xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""xsd_notific_WithdrawalWritingOffGoods.xsd""");
		АктXML = СтрЗаменить(АктXML, """ version", "Z"" version");
		КоллекцияАктXML.Вставить(СсылкаАкт, АктXML);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовоеУведомленияОВыводеИзОборота(Знач Уведомление, Знач Фабрика)
	
	//пространство имен добавлено вручную в схему, чтобы работать в 1С
	ПространствоИмен = ПолучитьПространствоИменИСМПТ();
	ИмяУзла = "file";
	
	СвойствоЗаголовка = Фабрика.Пакеты.Получить(ПространствоИмен).КорневыеСвойства.Получить(ИмяУзла);
	ТипXDTOЗаголовка  = СвойствоЗаголовка.Тип;
	
	УведомлениеXDTO = Фабрика.Создать(ТипXDTOЗаголовка);
	ЗаполнитьУведомленияОВыводеИзОборота(Уведомление, Фабрика, УведомлениеXDTO);
	
	Возврат УведомлениеXDTO;
	
КонецФункции

Процедура ЗаполнитьУведомленияОВыводеИзОборота(Знач Уведомление, Знач Фабрика, УведомлениеXDTO)
	
	//////////////////////////////////////////////////////////////////////////////
	// Шапка.
	УведомлениеXDTO.fileId = СтрШаблон("KZ_EAES_%1", Уведомление.Ссылка.УникальныйИдентификатор());
	УведомлениеXDTO.sendingDateTime = Формат(УниверсальноеВремя(ТекущаяДатаСеанса()),"ДФ=ггг-ММ-ддThh:mm:ss");//YYYY-MMDDThh:mm:ssZ
	УведомлениеXDTO.version = "1.0";
	
	document = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO, "document", Фабрика);
	mainInfo = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document, "mainInfo", Фабрика);
	mainInfo.reason = КодПричиныВыводаИзОборота(Уведомление.ПричинаВыводаИзОборота);
	participantInfo = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "participantInfo", Фабрика);
	originalDocInfo = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "originalDocInfo", Фабрика);
	
	participantInfo.participantName = Уведомление.ПоставщикНаименование;
	participantInfo.participantIdentificationCode = Уведомление.ПоставщикИдентификационныйНомер;
	originalDocInfo.docName   = Уведомление.ДокументОснованиеНаименование;
	originalDocInfo.docNumber = Уведомление.ДокументОснованиеНомер;
	originalDocInfo.docDate   = Формат(Уведомление.ДокументОснованиеДата,"ДФ=dd.MM.yyyy");
	
	//////////////////////////////////////////////////////////////////////////////
	// Табличные части
	productList = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document, "productList", Фабрика);
	
	Для каждого МаркиСтрока Из Уведомление.Марки Цикл
		
		product = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовыйЭлементСпискаXDTO(УведомлениеXDTO.document.productList.iCode, Фабрика);
		product.__content = МаркиСтрока.КодИдентификации;
		product.count = МаркиСтрока.Количество;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОтправитьУведомленияОВИО(Знач КоллекцияДанныеКоллекцииДокументовXML, Знач КоллекцияПодписейИСМП, Знач ТокенАвторизации) Экспорт
	
	Результат = Неопределено;
	
	Для Каждого СгруппированныеДокументыXML Из КоллекцияПодписейИСМП Цикл
		
		СтруктурнаяЕдиница = СгруппированныеДокументыXML.Ключ;
		ДанныеКоллекцииДокументовXML = СгруппированныеДокументыXML.Значение;
		
		Если ТипЗнч(ДанныеКоллекцииДокументовXML) = Тип("Соответствие") Тогда
			КоллекцияДокументовXML = ДанныеКоллекцииДокументовXML;
		Иначе
			КоллекцияДокументовXML = ПолучитьИзВременногоХранилища(ДанныеКоллекцииДокументовXML);
		КонецЕсли;
		
		Результат = ОтправитьИсходящиеУведомленияОВИО(КоллекцияДокументовXML, Неопределено, СтруктурнаяЕдиница, ТокенАвторизации);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьИсходящиеУведомленияОВИО(Знач КоллекцияУведомленийXML, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации) Экспорт
	
	РезультатОтправки = Новый Соответствие;
	//обходим коллекцию актов 
	Для Каждого ЭлементКоллекции Из КоллекцияУведомленийXML Цикл
		УведомлениеBase64 = ЭлементКоллекции.Значение.ДокументBase64;
		ПодписанныйДокумент = ЭлементКоллекции.Значение.ПодписанныйДокумент;
		
		Если ПодписанныйДокумент = "НеВыбран" Тогда 
			Текст = НСтр("ru = 'Документ № %1 был исключен из отправки, т.к. не был подписан ЭЦП.'");
			НомерДокмуентаОтправки = ЭлементКоллекции.Ключ.Номер;
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, НомерДокмуентаОтправки); 
			СообщениеПользователя = Новый СообщениеПользователю;
			СообщениеПользователя.Текст = ТекстСообщения;
			СообщениеПользователя.Сообщить();
			Продолжить;
		КонецЕсли;
		
		//каждый документ передаем в процедуру отправки
		РезультатВыполненияНаСервере = ВыполнитьСозданиеУведомленияОВИО(УведомлениеBase64, ПодписанныйДокумент, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации);
		РезультатОтправки.Вставить(ЭлементКоллекции.Ключ, РезультатВыполненияНаСервере);
		
	КонецЦикла;
	
	//БМ_ИСМПТ ТРЕБУЕТСЯ_РАССМОТРЕНИЕ	Доработать обновление документов (на текущий момент сервер не возвращает id созданного документа)
	// Обновим статусы отправленных и заполняем идентификаторы после завершения отправки всех документов
	ОбновитьУведомлениеВводаВыводаПослеОтправки(РезультатОтправки, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации, "УведомлениеОВыводеИзОборотаИСМПТК");
	
	Возврат РезультатОтправки;
	
КонецФункции

//Обновляет документ Уведомление о выводе из оборота по данным сервера
Процедура ОбновитьУведомленияОВыводеИзОборотаПоДаннымСервера(РезультатВыполненияНаСервере, УведомлениеСсылка)
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ЗаполнитьОшибкиДокумента(УведомлениеСсылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
		ТекстСообщения = НСтр("ru = 'При обновлении с сервера произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомленияОВыводеИзОборотаПоДаннымСервера'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		Возврат;
	Иначе
		//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
		ОчиститьОшибкиДокумента(УведомлениеСсылка);	
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатВыполненияНаСервере.ТекстОтвета);
		ОтветСервера = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON);
		СтатусДокумента = ПолучитьСтатусДокументаУведомленияПоКоду(ОтветСервера.status);
		СтрокаXML = ОтветСервера.content;
		ДополнительныеДанные = Новый Структура("НомерИСМПТ, ДатаВИСМПТ");
		ДополнительныеДанные.НомерИСМПТ = ОтветСервера.number;
		ДополнительныеДанные.ДатаВИСМПТ = ПрочитатьДатуJSON(ОтветСервера.docDate, ФорматДатыJSON.ISO);
		
		Фабрика = ФабрикаАПП_XML_API("СхемаУВИО_XML_API");
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		ОбъектXDTO = Фабрика.ПрочитатьXML(ЧтениеXML);
		ДокументXDTO = ОбъектXDTO.document;
		//mainInfo
		//consigneeInfo
		//reason Причина вывода
		//participantIdentificationCode ИИН/БИН отправителя
		//participantName Наименование отправителя
		//originalDocInfo 
		//docName Наименование первичного документа 
		//docNumber Номер первичного документа 
		//docDate Дата первичного документа  в формате .yyyy dd.mm
		//productList 
		//iCode Код идентификации
		//count Количество потребительских упаковок.
		
		//заполнить документ по данным сервера
		ДокументОбъект = УведомлениеСсылка.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
			ЗаполнитьЗначенияСвойств(ДокументОбъект, ДополнительныеДанные, "НомерИСМПТ, ДатаВИСМПТ");
			Статус = ПолучитьСтатусДокументаУведомленияПоКоду(ОтветСервера.status);
			Если Статус <> Неопределено Тогда
				ДокументОбъект.Статус = Статус;
			КонецЕсли;
		КонецЕсли;
		
		ДокументОбъект.ПоставщикНаименование = ДокументXDTO.mainInfo.participantInfo.participantName;
		ДокументОбъект.ПоставщикИдентификационныйНомер = ДокументXDTO.mainInfo.participantInfo.participantIdentificationCode;
			
		ИдентификационныеНомераКонтрагентов = Новый Массив;
		ИдентификационныеНомераСтруктурныхЕдиниц = Новый Массив;
		
		Если ЗначениеЗаполнено(ДокументОбъект.ПоставщикИдентификационныйНомер) Тогда
			ИдентификационныеНомераКонтрагентов.Добавить(ДокументОбъект.ПоставщикИдентификационныйНомер);
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ДокументОбъект.ПоставщикИдентификационныйНомер);
		КонецЕсли;
	
		СоответствияИдентификаторовИСсылок = НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(ИдентификационныеНомераКонтрагентов, ИдентификационныеНомераСтруктурныхЕдиниц);
		
		// Заполнить ссылки на контрагентов. 
		СоответствияКонтрагентов = СоответствияИдентификаторовИСсылок.СоответствияКонтрагентов;
		Для Каждого ЭлементСоответствияКонтрагентов Из СоответствияКонтрагентов Цикл
			
			Идентификатор = ЭлементСоответствияКонтрагентов.Ключ;
			Контрагент = ЭлементСоответствияКонтрагентов.Значение;
			
			Если ДокументОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Поставщик = Контрагент;
			КонецЕсли;
			
		КонецЦикла;
		
		// Заполнить ссылки на структурные единицы.
		СоответствияСтруктурныхЕдиниц = СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц;
		Для Каждого ЭлементСоответствияСтруктурныхЕдиниц Из СоответствияСтруктурныхЕдиниц Цикл
			
			Идентификатор = ЭлементСоответствияСтруктурныхЕдиниц.Ключ;
			Контрагент = ЭлементСоответствияСтруктурныхЕдиниц.Значение;
			
			Если ДокументОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Поставщик = Контрагент;
			КонецЕсли;
			
		КонецЦикла;
		
		НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();  
		
		Если ТипЗнч(ДокументXDTO.productList.iCode)=Тип("ОбъектXDTO") Тогда
			
			ДокументОбъект.Марки.Очистить();
			КодXDTO = ДокументXDTO.productList.iCode;
			НоваяСтрока = ДокументОбъект.Марки.Добавить();
			НоваяСтрока.КодИдентификации = КодXDTO.Последовательность().ПолучитьТекст(0);
			НоваяСтрока.Количество = КодXDTO.count;
			
			ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(НоваяСтрока.КодИдентификации, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
			
			Если Не ДанныеРазбора = Неопределено Тогда
				
				НоваяСтрока.ВидУпаковки 	= ДанныеРазбора.ВидУпаковки;
				НоваяСтрока.ВидПродукцииИС	= ДанныеРазбора.ВидыПродукции[0];
				НайденнаяНоменклатура = Неопределено;
				
				ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрока, ДанныеРазбора, НайденнаяНоменклатура);
				
				НоваяСтрока.Номенклатура = НайденнаяНоменклатура;
			Иначе
				ТекстСообщения = НСтр("ru = 'Ошибка разбора документа %1! Возможно он содержит данные по виду номенклатуры, учет по которому не ведется. '");
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект.Ссылка); 
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомленияОВыводеИзОборотаПоДаннымСервера'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);		
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументXDTO.productList.iCode)=Тип("СписокXDTO") Тогда
			
			ДокументОбъект.Марки.Очистить();
			
			Для Каждого СтрокаXDTO Из ДокументXDTO.productList.iCode Цикл
				
				КодXDTO = СтрокаXDTO;
				НоваяСтрока = ДокументОбъект.Марки.Добавить();
				НоваяСтрока.КодИдентификации = КодXDTO.Последовательность().ПолучитьТекст(0);
				НоваяСтрока.Количество = КодXDTO.count;
				
				ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(НоваяСтрока.КодИдентификации, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
				
				Если Не ДанныеРазбора = Неопределено Тогда
					
					НоваяСтрока.ВидУпаковки 	= ДанныеРазбора.ВидУпаковки;
					НоваяСтрока.ВидПродукцииИС	= ДанныеРазбора.ВидыПродукции[0];
					НайденнаяНоменклатура = Неопределено;
				
					ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрока, ДанныеРазбора, НайденнаяНоменклатура);
					
					НоваяСтрока.Номенклатура = НайденнаяНоменклатура;
				Иначе
					ТекстСообщения = НСтр("ru = 'Ошибка разбора документа %1! Возможно он содержит данные по виду номенклатуры, учет по которому не ведется. '");
					ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект.Ссылка); 
					ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомленияОВыводеИзОборотаПоДаннымСервера'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//табличная часть Товары
		ДокументОбъект.Товары.Очистить();
		ТоварыПоМаркам = ДокументОбъект.Марки.Выгрузить(,"Количество, Номенклатура, EAN, GTIN");
		ТоварыПоМаркам.Свернуть("Номенклатура, EAN, GTIN", "Количество");
		Для каждого СтрокаТовары Из ТоварыПоМаркам Цикл
			НоваяСтрока = ДокументОбъект.Товары.Добавить();
			НоваяСтрока.Номенклатура = СтрокаТовары.Номенклатура;
			НоваяСтрока.КоличествоИсточник = СтрокаТовары.Количество;
			НоваяСтрока.ЕдиницаИзмерения = ИнтеграцияИСМПТКПереопределяемый.ПолучитьЕдиницуИзмерения(НоваяСтрока.Номенклатура);
		КонецЦикла;
		
		//провести документы
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		ЗафиксироватьТранзакцию();
				
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомленияОВыводеИзОборотаПоДаннымСервера'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область УведомленияОВвозе

Процедура СоздатьИсходящиеУведомленияОВвозе(
	Знач МассивДокументов, 
	Знач УстанавливатьПодпись, 
	Знач ТипПодписи, 
	КоллекцияУведомлениеXML, 
	КоллекцияSignedContentXML) Экспорт
	
	КоллекцияУведомлениеXML = Новый Соответствие;
	КоллекцияSignedContentXML = Новый Соответствие;
	
	Для Каждого СсылкаУведомление Из МассивДокументов Цикл
		
		ОбъектДокумент = СсылкаУведомление.ПолучитьОбъект();
		Фабрика = ФабрикаАПП_XML_API("СхемаВвозИзЕАЭС_XML_API");
		УведомлениеXTDO = НовоеУведомлениеОВвозе(ОбъектДокумент, Фабрика);
		//Фабрика = ФабрикаАПП_XML_API("СхемаВвозИзТретьихСтран_XML_API");
		//УведомлениеXTDO = НовоеУведомлениеОВвозеИзТретьихСтран(ОбъектДокумент, Фабрика, "", "");
		УведомлениеXML = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.КаноническаяСтрокаXMLИзОбъектаXDTO(УведомлениеXTDO, "file", Фабрика);
		//заменяем атрибуты для соответствия формату
		ПространствоИмен = ПолучитьПространствоИменИСМПТ();
		УведомлениеXML = "<?xml version=""1.0"" encoding=""UTF-8""?>" + СтрЗаменить(УведомлениеXML, "xmlns=""" + ПространствоИмен + """", "xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""schemas_xsd_%D0%95%D0%90%D0%AD%D0%A1_%D0%9A%D0%97.xsd""");
		УведомлениеXML = СтрЗаменить(УведомлениеXML, """ version", "Z"" version");
		КоллекцияУведомлениеXML.Вставить(СсылкаУведомление, УведомлениеXML);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовоеУведомлениеОВвозе(Знач Уведомление, Знач Фабрика)
	
	//пространство имен добавлено вручную в схему, чтобы работать в 1С
	ПространствоИмен = ПолучитьПространствоИменИСМПТ();
	ИмяУзла = "file";
	
	СвойствоЗаголовка = Фабрика.Пакеты.Получить(ПространствоИмен).КорневыеСвойства.Получить(ИмяУзла);
	ТипXDTOЗаголовка  = СвойствоЗаголовка.Тип;
	
	УведомлениеXDTO = Фабрика.Создать(ТипXDTOЗаголовка);
	ЗаполнитьУведомлениеОВвозе(Уведомление, Фабрика, УведомлениеXDTO);
	
	Возврат УведомлениеXDTO;
	
КонецФункции

Процедура ЗаполнитьУведомлениеОВвозе(Знач Уведомление, Знач Фабрика, УведомлениеXDTO)
	
	//////////////////////////////////////////////////////////////////////////////
	// Шапка.
	УведомлениеXDTO.fileId = СтрШаблон("IMPORT_TRANSIT_%1", Уведомление.Ссылка.УникальныйИдентификатор());
	УведомлениеXDTO.sendingDateTime = Формат(УниверсальноеВремя(ТекущаяДатаСеанса()),"ДФ=ггг-ММ-ддThh:mm:ss");//YYYY-MMDDThh:mm:ssZ
	УведомлениеXDTO.version = "5.01";//5.01 в шаблоне
	
	participants			 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO, "participants", Фабрика);
	participants.supplierId  = Уведомление.ПоставщикИдентификационныйНомер;
	participants.consigneeId = Уведомление.ПолучательИдентификационныйНомер;
	
	document = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO, "document", Фабрика);
	document.correctionFlag 	  = ?(Уведомление.ЭтоКорректировка, Истина, Ложь);
	Если Уведомление.ЭтоКорректировка Тогда
		ДанныеСвязанногоАкта 	  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЗначенияРеквизитовОбъекта(Уведомление.СвязанноеУведомление, "НомерИСМПТ, ДатаВИСМПТ, Идентификатор");
		document.primaryDocId 	  = ДанныеСвязанногоАкта.Идентификатор;
		document.primaryDocNumber = ДанныеСвязанногоАкта.НомерИСМПТ;
		document.primaryDocDate   = Формат(ДанныеСвязанногоАкта.ДатаВИСМПТ,"ДФ=dd.MM.yyyy");//dd.mm.yyyy
	КонецЕсли;
	
	mainInfo	 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document, 		 "mainInfo", 		Фабрика);
	
	supplierInfo = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "supplierInfo",	Фабрика);
	supplierInfo.supplierName 				= Уведомление.ПоставщикНаименование;
	supplierInfo.supplierIdentificationCode = Уведомление.ПоставщикИдентификационныйНомер;
	supplierInfo.supplierCountryCode 		= РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЗначенияРеквизитовОбъекта(Уведомление.СтранаОтправления, "КодАльфа2").КодАльфа2;
	
	consigneeInfo 							  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "consigneeInfo", 	Фабрика);
	consigneeInfo.consigneeName 			  = Уведомление.ПолучательНаименование;
	consigneeInfo.consigneeIdentificationCode = Уведомление.ПолучательИдентификационныйНомер;
	
	Если ЗначениеЗаполнено(Уведомление.РегНомерНаБумажномНосителе) Тогда
		originalDocInfo 		  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "originalDocInfo", Фабрика);
		originalDocInfo.docNumber = Уведомление.РегНомерНаБумажномНосителе;
		originalDocInfo.docDate	  = Формат(Уведомление.ДатаВыпискиНаБумажномНосителе, "ДФ=dd.MM.yyyy");
	Иначе
		УведомлениеXDTO.document.mainInfo.Сбросить("originalDocInfo");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Уведомление.НомерКвитанцииАкциза) Тогда
		exciseDocInfo				  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "exciseDocInfo", Фабрика);
		exciseDocInfo.exciseDocNumber = Уведомление.НомерКвитанцииАкциза;
		exciseDocInfo.exciseDocDate	  = Формат(Уведомление.ДатаУплатыАкциза, "ДФ=dd.MM.yyyy");
		exciseDocInfo.exciseAmount 	  = Формат(Уведомление.СуммаАкциза, "ЧДЦ=2; ЧРД=.; ЧН=Ноль; ЧГ=0");
	Иначе
		УведомлениеXDTO.document.mainInfo.Сбросить("exciseDocInfo");
	КонецЕсли;
	
	// Табличные части
	complianceInfo = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "complianceInfo", Фабрика);
	Для каждого СтрокаСоответствия Из Уведомление.ДокументыСоответствия Цикл
		
		complianceDocumentInfo 					   = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовыйЭлементСпискаXDTO(УведомлениеXDTO.document.mainInfo.complianceInfo.complianceDocumentInfo, Фабрика);
		complianceDocumentInfo.complianceDocDate   = Формат(СтрокаСоответствия.ДатаДокумента, "ДФ=dd.MM.yyyy");
		complianceDocumentInfo.complianceDocNumber = СтрокаСоответствия.НомерДокумента;
		complianceDocumentInfo.complianceDocType   = Строка(СтрокаСоответствия.ТипДокумента);
		
	КонецЦикла;
	
	productList	  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document, "productList",   Фабрика);
	
	Для Каждого МаркиСтрока Из Уведомление.Марки Цикл
		
		productList.iCode.Добавить(МаркиСтрока.КодИдентификации);
		
	КонецЦикла;
	
	ТаблицаКодов = ПолучитьТаблицуКодовGTIN(Уведомление.Марки, Уведомление.Организация);
	productTotals = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document, "productTotals", Фабрика);
	
	Для Каждого КодыСтрока Из ТаблицаКодов Цикл
		
		productTotal 		   = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовыйЭлементСпискаXDTO(УведомлениеXDTO.document.productTotals.gtin, Фабрика);
		productTotal.__content = КодыСтрока.Ключ;
		productTotal.count     = КодыСтрока.Значение;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОтправитьУведомленияОВвозе(Знач КоллекцияДанныеКоллекцииДокументовXML, Знач КоллекцияПодписейИСМП, Знач ТокенАвторизации) Экспорт
	
	Результат = Неопределено;
	
	Для Каждого СгруппированныеДокументыXML Из КоллекцияПодписейИСМП Цикл
		
		СтруктурнаяЕдиница = СгруппированныеДокументыXML.Ключ;
		ДанныеКоллекцииДокументовXML = СгруппированныеДокументыXML.Значение;
		
		Если ТипЗнч(ДанныеКоллекцииДокументовXML) = Тип("Соответствие") Тогда
			КоллекцияДокументовXML = ДанныеКоллекцииДокументовXML;
		Иначе
			КоллекцияДокументовXML = ПолучитьИзВременногоХранилища(ДанныеКоллекцииДокументовXML);
		КонецЕсли;
				
		РезультатОтправки = Новый Соответствие;
		//обходим коллекцию документов 
		Для Каждого ЭлементКоллекции Из КоллекцияДокументовXML Цикл
			УведомлениеBase64 = ЭлементКоллекции.Значение.ДокументBase64;
			ПодписанныйДокумент = ЭлементКоллекции.Значение.ПодписанныйДокумент;
			
			Если ПодписанныйДокумент = "НеВыбран" Тогда 
				НомерДокумента = ЭлементКоллекции.Ключ.Номер;
				Текст = НСтр("ru = 'Документ № %1 был исключен из отправки, т.к. не был подписан ЭЦП.'");
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, НомерДокумента); 
				СообщениеПользователя = Новый СообщениеПользователю;
				СообщениеПользователя.Текст = ТекстСообщения;
				СообщениеПользователя.Сообщить();
				Продолжить;
			КонецЕсли;
			
			//каждый документ передаем в процедуру отправки
			РезультатВыполненияНаСервере = ВыполнитьСозданиеУведомленияОВвозеИзЕАЭС(УведомлениеBase64, ПодписанныйДокумент, 0, Неопределено, СтруктурнаяЕдиница, ТокенАвторизации);
			РезультатОтправки.Вставить(ЭлементКоллекции.Ключ, РезультатВыполненияНаСервере);
		КонецЦикла;
		
		//БМ_ИСМПТ ТРЕБУЕТСЯ_РАССМОТРЕНИЕ	Доработать обновление документов
		// Обновим статусы отправленных и заполняем идентификаторы после завершения отправки всех документов
		ОбновитьУведомлениеОВвозеПослеОтправки(РезультатОтправки, Неопределено, СтруктурнаяЕдиница, ТокенАвторизации);
		
		Результат = РезультатОтправки;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьУведомлениеОВвозеПослеОтправки(РезультатОтправкиДокументов, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации)
	
	Для каждого РезультатОтправки Из РезультатОтправкиДокументов Цикл
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибка(РезультатОтправки.Значение, ИнформацияОбОшибке) Тогда
			ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = НСтр("ru = 'При отправке уведомления на сервере произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомлениеОВвозеПослеОтправки'"), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			Продолжить;
		Иначе
			//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
			ОчиститьОшибкиДокумента(РезультатОтправки.Ключ);	
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатОтправки.Значение.ТекстОтвета);
		РезультатЗапроса = ПрочитатьJSON(ЧтениеJSON);
		
		ИдентификаторНаСервере = ?(РезультатЗапроса.Свойство("id"), РезультатЗапроса.id, "");
		ДопДанныеДокумента = ПолучитьДополнительныеДанныеПоИдентификатору(ИдентификаторНаСервере, ДанныеПрофилей, СтруктурнаяЕдиница, Истина, ТокенАвторизации);
		
		Попытка
			ДокументОбъект = РезультатОтправки.Ключ.ПолучитьОбъект();
			ДокументОбъект.Идентификатор = ИдентификаторНаСервере;
			ДокументОбъект.НомерИСМПТ 	 = ДопДанныеДокумента.НомерИСМПТ;
			ДокументОбъект.ДатаВИСМПТ 	 = ДопДанныеДокумента.ДатаВИСМПТ;
			Статус = ПолучитьСтатусДокументаПоКоду(ДопДанныеДокумента.Статус);
			Если Статус <> Неопределено Тогда
				ДокументОбъект.Статус = Статус;
			КонецЕсли;
			ДокументОбъект.Записать();
		Исключение
			//ОписаниеОшибки()
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ОбновитьУведомлениеОВвозеИзЕАЭС(Знач МассивДокументов, ДанныеПрофилей, ТокенАвторизации) Экспорт
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Уведомление.Ссылка КАК Ссылка,
	|	Уведомление.Идентификатор КАК Идентификатор,
	|	Уведомление.Направление КАК Направление
	|ИЗ
	|	Документ.УведомлениеОВвозеИзЕАЭСИСМПТК КАК Уведомление
	|ГДЕ
	|	Уведомление.Ссылка В(&МассивДокументов)
	|	И НЕ Уведомление.Идентификатор = """"
	|ИТОГИ ПО
	|	Направление";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	ВыборкаНаправление = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНаправление.Следующий() Цикл
		
		Выборка = ВыборкаНаправление.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
				//ошибка, в документе нет идентификатора
				Продолжить;
			КонецЕсли;
			
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("Исходящий", ?(Выборка.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий, Истина, Ложь));
			ПараметрыДокумента.Вставить("Идентификатор",Выборка.Идентификатор);
			РезультатВыполненияНаСервере = ПолучитьДокументСервера(ПараметрыДокумента, ДанныеПрофилей, ТокенАвторизации);
			ДополнительныеДанные = ПолучитьДополнительныеДанныеПоИдентификатору(Выборка.Идентификатор, ДанныеПрофилей, ДанныеПрофилей, ПараметрыДокумента.Исходящий, ТокенАвторизации);
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			КопияДокумента = ДокументОбъект.Скопировать();
			Если КопияДокумента.Марки.Количество() = 0 Тогда
				КопияДокумента.Марки.Загрузить(ДокументОбъект.Марки.Выгрузить());
			КонецЕсли;
			МассивСтарыхДокументов = Новый Массив;
			ИсходныйНовый = Новый Структура;
			ИсходныйНовый.Вставить("ИсходныйОбъект", КопияДокумента);
			ИсходныйНовый.Вставить("ОбновленныйОбъект", ДокументОбъект);
			МассивСтарыхДокументов.Добавить(ИсходныйНовый);
			
			ОбновитьУведомлениеОВвозеПоДаннымСервера(РезультатВыполненияНаСервере, Выборка.Ссылка, ДополнительныеДанные);
			ВосстановитьСсылочныеРеквизитыДокументов(МассивСтарыхДокументов);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//Получает с сервера документы Уведомление о ввозе из ЕАЭС
//
Процедура ПолучитьДокументыУведомлениеОВвозеИзЕАЭС(СтруктурнаяЕдиница, РезультатВыполненияНаСервере, ЭтоИсходящиеДокументы, ТокенАвторизации)
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ТекстСообщения = НСтр("ru = 'При обновлении с сервера произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.СоздатьОбновитьПолученныеДокументы'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	//новый массив загружаемых документов
	Направление = ?(ЭтоИсходящиеДокументы = Истина, Перечисления.НаправленияДокументовИСМПТК.Исходящий, Перечисления.НаправленияДокументовИСМПТК.Входящий);
	ТекстОтвета = РезультатВыполненияНаСервере.ТекстОтвета;
	ОтветСервера = ТекстОтвета;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСервера);
	ОбъектXDTO = ПрочитатьJSON(ЧтениеJSON);
	
	Если ОбъектXDTO.count = 0 Тогда
		//в ответе вернулся пустой список
		Возврат;
	КонецЕсли;
	
	МассивИдентификаторов = Новый Массив;
	СоответствиеНомерам = Новый Соответствие;
	
	Для каждого ЭлементСписка Из ОбъектXDTO.items Цикл
		
		//обрабатываем только элементы с типом 1200 - Ввоз из ЕАЭС
		Если ЭлементСписка.type <> 1200 Тогда
			Продолжить;
		КонецЕсли;
		
		//делаем запрос по номеру
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("Исходящий", НЕ ЭтоИсходящиеДокументы); // если документы Акт входящие, то УОР наоборот
		ПараметрыДокумента.Вставить("Идентификатор", ЭлементСписка.id);
		РезультатВыполненияНаСервере = ПолучитьДокументСервера(ПараметрыДокумента, СтруктурнаяЕдиница, ТокенАвторизации);
		
		Если РезультатВыполненияНаСервере.КодСостояния = 200 И ЗначениеЗаполнено(РезультатВыполненияНаСервере.ТекстОтвета) Тогда
			МассивИдентификаторов.Добавить(ЭлементСписка.id);
			ДанныеДокумента = Новый Структура("Номер, Дата, Статус", ЭлементСписка.number, ЭлементСписка.date, ЭлементСписка.status);
			ДанныеДокумента.Вставить("РезультатВыполненияНаСервере", РезультатВыполненияНаСервере);
			СоответствиеНомерам.Вставить(ЭлементСписка.id, ДанныеДокумента);
		Иначе
			ИнформацияОбОшибке = Неопределено;
			Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
				ТекстСообщения = НСтр("ru = 'При обращении к серверу произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'ОбменИСМПТ.ПолучитьДокументыУведомлениеОВвозеИзЕАЭС'"), 
					УровеньЖурналаРегистрации.Ошибка,,,
					ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	СуществующиеДокументы = Новый Соответствие;
	// Заполнить соответствие пустыми ссылками.
	ПустаяСсылка = Документы.УведомлениеОВвозеИзЕАЭСИСМПТК.ПустаяСсылка();
	
	Для Каждого ЭлементМассива Из МассивИдентификаторов Цикл
		СуществующиеДокументы.Вставить(ЭлементМассива, ПустаяСсылка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОВвозеИзЕАЭС.Ссылка КАК НайденнаяСсылка,
	|	УведомлениеОВвозеИзЕАЭС.Идентификатор КАК Идентификатор
	|ИЗ
	|	Документ.УведомлениеОВвозеИзЕАЭСИСМПТК КАК УведомлениеОВвозеИзЕАЭС
	|ГДЕ
	|	УведомлениеОВвозеИзЕАЭС.Идентификатор В(&Идентификаторы)";
	
	Запрос.УстановитьПараметр("Идентификаторы", МассивИдентификаторов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СуществующиеДокументы.Вставить(Выборка.Идентификатор, Выборка.НайденнаяСсылка);
	КонецЦикла;
	//уведомление о ввозе из ЕАЭС всегда являются исходящими документами
	Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий;
	МассивДокументов = Новый Массив;
	
	Для Каждого ЭлементКоллекции Из СуществующиеДокументы Цикл
		
		Идентификатор = ЭлементКоллекции.Ключ;
		Ссылка = ЭлементКоллекции.Значение;
		
		Если Ссылка.Пустая() Тогда
			
			НовыйДокумент = Документы.УведомлениеОВвозеИзЕАЭСИСМПТК.СоздатьДокумент();
			НовыйДокумент.Дата = ТекущаяДатаСеанса();
			НовыйДокумент.Идентификатор = Идентификатор;
			ДанныеДокумента = СоответствиеНомерам.Получить(Идентификатор);
			НовыйДокумент.НомерИСМПТ = ДанныеДокумента.Номер;
			НовыйДокумент.ДатаВИСМПТ = Дата(1970,1,1,0,0,0) + ДанныеДокумента.Дата;
			Статус = ПолучитьСтатусДокументаПоКоду(ДанныеДокумента.Статус);
			Если Статус <> Неопределено Тогда
				НовыйДокумент.Статус = Статус;
			КонецЕсли;
			НовыйДокумент.Направление = Направление;
			
			ТекущийПользователь = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь();
			НовыйДокумент.Автор = ТекущийПользователь;
			НовыйДокумент.Организация = СтруктурнаяЕдиница;
			
			МассивДокументов.Добавить(НовыйДокумент);
			
		Иначе
			МассивДокументов.Добавить(Ссылка.ПолучитьОбъект());
		КонецЕсли;
		
	КонецЦикла;
	
	МассивСтарыхДокументов = Новый Массив;
	Для каждого ДокументОбъект Из МассивДокументов Цикл
		Если ДокументОбъект.Ссылка.Пустая() Тогда
			ДокументОбъект.Записать();
		Иначе
			КопияДокумента = ДокументОбъект.Скопировать();
			Если КопияДокумента.Марки.Количество() = 0 Тогда
				КопияДокумента.Марки.Загрузить(ДокументОбъект.Марки.Выгрузить());
			КонецЕсли;
			ИсходныйНовый = Новый Структура;
			ИсходныйНовый.Вставить("ИсходныйОбъект", 	КопияДокумента);
			ИсходныйНовый.Вставить("ОбновленныйОбъект", ДокументОбъект);
			МассивСтарыхДокументов.Добавить(ИсходныйНовый);
		КонецЕсли;
	КонецЦикла;
	
	СчетчикДокументы = 0;
	СчетчикДокументыОшибка = 0;
	
	Для каждого ДокументОбъект Из МассивДокументов Цикл
		ДанныеДокумента = СоответствиеНомерам.Получить(ДокументОбъект.Идентификатор);
		Успешно = Ложь;
		ОбновитьУведомлениеОВвозеПоДаннымСервера(ДанныеДокумента.РезультатВыполненияНаСервере, ДокументОбъект.Ссылка, Неопределено, Успешно);
		Если Успешно Тогда
			СчетчикДокументы = СчетчикДокументы + 1;
		Иначе
			СчетчикДокументыОшибка = СчетчикДокументыОшибка + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ИнтеграцияИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанных() Тогда
		//// Вывод сообщений о результатах операции ////
		Если Не СчетчикДокументы = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Обновлено по данным сервера: %1 Уведомления(-й) о ввозе (ЕАЭС).");
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СчетчикДокументы);
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Не СчетчикДокументыОшибка = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось обновить по данным сервера: %1 Уведомления(-й) о ввозе (ЕАЭС).'");
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СчетчикДокументыОшибка);
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если СчетчикДокументы = 0 И СчетчикДокументыОшибка = 0 Тогда
			ТекстСообщения = НСтр("ru = 'В указанном периоде нет Уведомлений о ввозе (ЕАЭС), требующих синхронизации.'");
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		////////////////
	КонецЕсли;
	
	ВосстановитьСсылочныеРеквизитыДокументов(МассивСтарыхДокументов);
	
КонецПроцедуры

//Обновляет документ Уведомление о ввозе из ЕАЭС по данным сервера
Процедура ОбновитьУведомлениеОВвозеПоДаннымСервера(РезультатВыполненияНаСервере, УведомлениеСсылка, ДополнительныеДанные, Успешно = Ложь)
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ЗаполнитьОшибкиДокумента(УведомлениеСсылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
		ТекстСообщения = НСтр("ru = 'При обновлении с сервера произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомленияОВвозеПоДаннымСервера'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		Возврат;
	Иначе
		//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
		ОчиститьОшибкиДокумента(УведомлениеСсылка);	
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		//БМ_ИСМПТ ТРЕБУЕТСЯ_РАССМОТРЕНИЕ	Доработать обновление документов по данным сервера
		ДвоичныеДанныеXML = Base64Значение(РезультатВыполненияНаСервере.ТекстОтвета);
		СтрокаXML = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеXML, КодировкаТекста.UTF8);
		
		Фабрика = ФабрикаАПП_XML_API("СхемаВвозИзЕАЭС_XML_API");
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		ОбъектXDTO   = Фабрика.ПрочитатьXML(ЧтениеXML);
		ДокументXDTO = ОбъектXDTO.document;
		
		//заполнить документ по данным сервера
		ДокументОбъект = УведомлениеСсылка.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
			ЗаполнитьЗначенияСвойств(ДокументОбъект, ДополнительныеДанные, "НомерИСМПТ, ДатаВИСМПТ");
			Статус = ПолучитьСтатусДокументаПоКоду(ДополнительныеДанные.Статус);
			Если Статус <> Неопределено Тогда
				ДокументОбъект.Статус = Статус;
			КонецЕсли;
		КонецЕсли;
		
		ДокументОбъект.ТипУведомления = ?(ДокументXDTO.correctionFlag = "false", Перечисления.ВидыДокументаИСМПТК.Исходный, Перечисления.ВидыДокументаИСМПТК.Исправленный);
		
		ДокументОбъект.ПоставщикНаименование = ДокументXDTO.mainInfo.supplierInfo.supplierName;
		ДокументОбъект.ПоставщикИдентификационныйНомер = ДокументXDTO.mainInfo.supplierInfo.supplierIdentificationCode;
		
		ДокументОбъект.ПолучательНаименование 			= ДокументXDTO.mainInfo.consigneeInfo.consigneeName;
		ДокументОбъект.ПолучательИдентификационныйНомер = ДокументXDTO.mainInfo.consigneeInfo.consigneeIdentificationCode;
		
		ИдентификационныеНомераКонтрагентов 	 = Новый Массив;
		ИдентификационныеНомераСтруктурныхЕдиниц = Новый Массив;
		
		Если ЗначениеЗаполнено(ДокументОбъект.ПоставщикИдентификационныйНомер) Тогда
			ИдентификационныеНомераКонтрагентов.Добавить(ДокументОбъект.ПоставщикИдентификационныйНомер);
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ДокументОбъект.ПоставщикИдентификационныйНомер);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОбъект.ПолучательИдентификационныйНомер) Тогда
			ИдентификационныеНомераКонтрагентов.Добавить(ДокументОбъект.ПолучательИдентификационныйНомер);
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ДокументОбъект.ПолучательИдентификационныйНомер);
		КонецЕсли;
		
		СоответствияИдентификаторовИСсылок = НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(ИдентификационныеНомераКонтрагентов, ИдентификационныеНомераСтруктурныхЕдиниц);
		
		// Заполнить ссылки на контрагентов. 
		СоответствияКонтрагентов = СоответствияИдентификаторовИСсылок.СоответствияКонтрагентов;
		Для Каждого ЭлементСоответствияКонтрагентов Из СоответствияКонтрагентов Цикл
			
			Идентификатор = ЭлементСоответствияКонтрагентов.Ключ;
			Контрагент	  = ЭлементСоответствияКонтрагентов.Значение;
			
			Если ДокументОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Поставщик = Контрагент;
			КонецЕсли;
			
			Если ДокументОбъект.ПолучательИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Получатель = Контрагент;
			КонецЕсли;
			
		КонецЦикла;
		
		// Заполнить ссылки на структурные единицы.
		СоответствияСтруктурныхЕдиниц = СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц;
		Для Каждого ЭлементСоответствияСтруктурныхЕдиниц Из СоответствияСтруктурныхЕдиниц Цикл
			
			Идентификатор = ЭлементСоответствияСтруктурныхЕдиниц.Ключ;
			Контрагент 	  = ЭлементСоответствияСтруктурныхЕдиниц.Значение;
			
			Если ДокументОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Поставщик = Контрагент;
			КонецЕсли;
			
			Если ДокументОбъект.ПолучательИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Получатель = Контрагент;
			КонецЕсли;
			
		КонецЦикла;
		
		СтранаМира = ИнтеграцияИСМПТКПереопределяемый.ПолучитьСтрануПоКоду(ДокументXDTO.mainInfo.supplierInfo.supplierCountryCode);
		Если ЗначениеЗаполнено(СтранаМира) Тогда
			ДокументОбъект.СтранаОтправления = СтранаМира;
		КонецЕсли;
		
		ОбщиеСвойства = ДокументXDTO.mainInfo.Свойства();
		
		Если ОбщиеСвойства.Количество() > 0 И ОбщиеСвойства.Получить("exciseDocInfo") <> Неопределено Тогда
			Если ТипЗнч(ДокументXDTO.mainInfo.exciseDocInfo) = Тип("ОбъектXDTO") Тогда
				ДокументОбъект.ДатаУплатыАкциза = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СтрокаВДату(ДокументXDTO.mainInfo.exciseDocInfo.exciseDocDate);
				ДокументОбъект.НомерКвитанцииАкциза = ДокументXDTO.mainInfo.exciseDocInfo.exciseDocNumber;
				ДокументОбъект.СуммаАкциза = ДокументXDTO.mainInfo.exciseDocInfo.exciseAmount;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщиеСвойства.Количество() > 0 И ОбщиеСвойства.Получить("complianceInfo") <> Неопределено Тогда
			//complianceInfo
			Если ТипЗнч(ДокументXDTO.mainInfo.complianceInfo) = Тип("ОбъектXDTO") Тогда
				ВсеСвойства = ДокументXDTO.mainInfo.complianceInfo.Свойства();
				Если ВсеСвойства.Количество() > 0 И ВсеСвойства.Получить("complianceDocumentInfo") <> Неопределено Тогда
					Если ТипЗнч(ДокументXDTO.mainInfo.complianceInfo.complianceDocumentInfo) = Тип("ОбъектXDTO") Тогда
						ДокументОбъект.ДокументыСоответствия.Очистить();
						complianceDocumentInfo = ДокументXDTO.mainInfo.complianceInfo.complianceDocumentInfo;
						НоваяСтрока = ДокументОбъект.ДокументыСоответствия.Добавить();
						Если complianceDocumentInfo.complianceDocType = "Сертификат соответствия" Тогда
							НоваяСтрока.ТипДокумента = Перечисления.ВидыДокументовОбязательнойСертификацииИСМПТК.СертификатСоответствия;
						ИначеЕсли complianceDocumentInfo.complianceDocType = "Декларация соответствия" Тогда
							НоваяСтрока.ТипДокумента = Перечисления.ВидыДокументовОбязательнойСертификацииИСМПТК.ДекларацияСоответствия;
						КонецЕсли;
						НоваяСтрока.ДатаДокумента  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СтрокаВДату(complianceDocumentInfo.complianceDocDate);
						НоваяСтрока.НомерДокумента = complianceDocumentInfo.complianceDocNumber;
					ИначеЕсли ТипЗнч(ДокументXDTO.mainInfo.complianceInfo.complianceDocumentInfo)=Тип("СписокXDTO") Тогда
						ДокументОбъект.ДокументыСоответствия.Очистить();
						Для каждого СтрокаXDTO Из ДокументXDTO.mainInfo.complianceInfo.complianceDocumentInfo Цикл
							complianceDocumentInfo = СтрокаXDTO;
							НоваяСтрока = ДокументОбъект.ДокументыСоответствия.Добавить();
							Если complianceDocumentInfo.complianceDocType = "Сертификат соответствия" Тогда
								НоваяСтрока.ТипДокумента = Перечисления.ВидыДокументовОбязательнойСертификацииИСМПТК.СертификатСоответствия;
							ИначеЕсли complianceDocumentInfo.complianceDocType = "Декларация соответствия" Тогда
								НоваяСтрока.ТипДокумента = Перечисления.ВидыДокументовОбязательнойСертификацииИСМПТК.ДекларацияСоответствия;
							КонецЕсли;
							НоваяСтрока.ДатаДокумента  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СтрокаВДату(complianceDocumentInfo.complianceDocDate);
							НоваяСтрока.НомерДокумента = complianceDocumentInfo.complianceDocNumber;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//productList
		НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();   
		
		Если ТипЗнч(ДокументXDTO.productList.iCode)=Тип("ОбъектXDTO") Тогда
			ДокументОбъект.Марки.Очистить();
			КодXDTO 	= ДокументXDTO.productList.iCode;
			НоваяСтрока = ДокументОбъект.Марки.Добавить();
			НоваяСтрока.КодИдентификации = КодXDTO;
			НоваяСтрока.Количество		 = 1;
			
			ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(НоваяСтрока.КодИдентификации, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
			
			Если Не ДанныеРазбора = Неопределено Тогда
				
				НоваяСтрока.ВидУпаковки 	= ДанныеРазбора.ВидУпаковки;
				НоваяСтрока.ВидПродукцииИС	= ДанныеРазбора.ВидыПродукции[0];
				НайденнаяНоменклатура		= Неопределено;
				
				ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрока, ДанныеРазбора, НайденнаяНоменклатура);
				
				НоваяСтрока.Номенклатура = НайденнаяНоменклатура;
			Иначе
				ТекстСообщения = НСтр("ru = 'Ошибка разбора документа %1! Возможно он содержит данные по виду номенклатуры, учет по которому не ведется. '");
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект.Ссылка); 
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомленияОВвозеПоДаннымСервера'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументXDTO.productList.iCode)=Тип("СписокXDTO") Тогда
			
			ДокументОбъект.Марки.Очистить();
			
			Для Каждого СтрокаXDTO Из ДокументXDTO.productList.iCode Цикл
				
				КодXDTO = СтрокаXDTO;
				НоваяСтрока = ДокументОбъект.Марки.Добавить();
				НоваяСтрока.КодИдентификации = КодXDTO;
				НоваяСтрока.Количество = 1;
				
				ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(НоваяСтрока.КодИдентификации, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
				
				Если Не ДанныеРазбора = Неопределено Тогда
					
					НоваяСтрока.ВидУпаковки 	= ДанныеРазбора.ВидУпаковки;
					НоваяСтрока.ВидПродукцииИС	= ДанныеРазбора.ВидыПродукции[0];
					НайденнаяНоменклатура 		= Неопределено;
				
					ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрока, ДанныеРазбора, НайденнаяНоменклатура);
					
					НоваяСтрока.Номенклатура = НайденнаяНоменклатура;
				Иначе
					ТекстСообщения = НСтр("ru = 'Ошибка разбора документа %1! Возможно он содержит данные по виду номенклатуры, учет по которому не ведется. '");
					ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект.Ссылка); 
					ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомленияОВвозеПоДаннымСервера'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//табличная часть Товары
		ДокументОбъект.Товары.Очистить();
		ТоварыПоМаркам = ДокументОбъект.Марки.Выгрузить(,"Количество, Номенклатура, EAN, GTIN");
		ТоварыПоМаркам.Свернуть("Номенклатура, EAN, GTIN", "Количество");
		Для каждого СтрокаТовары Из ТоварыПоМаркам Цикл
			НоваяСтрока = ДокументОбъект.Товары.Добавить();
			НоваяСтрока.Номенклатура 	   = СтрокаТовары.Номенклатура;
			НоваяСтрока.КоличествоИсточник = СтрокаТовары.Количество;
			//НоваяСтрока.ЕдиницаИзмерения = ИнтеграцияИСМПТКПереопределяемый.ПолучитьЕдиницуИзмерения(НоваяСтрока.Номенклатура);
		КонецЦикла;
			
		//провести документы
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		ЗафиксироватьТранзакцию();
		Успешно = Истина;
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомленияОВвозеПоДаннымСервера'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область УведомленияОВвозеИзТретьихСтран

Процедура СоздатьИсходящиеУведомленияОВвозеИзТретьихСтран(
	Знач МассивДокументов, 
	Знач УстанавливатьПодпись, 
	Знач ТипПодписи, 
	КоллекцияУведомлениеXML, 
	КоллекцияSignedContentXML,
	ДанныеГрупповыхКодов) Экспорт
	
	КоллекцияУведомлениеXML = Новый Соответствие;
	КоллекцияSignedContentXML = Новый Соответствие;
	
	Для Каждого СсылкаУведомление Из МассивДокументов Цикл
		
		ОбъектДокумент = СсылкаУведомление.ПолучитьОбъект();
		Фабрика = ФабрикаАПП_XML_API("СхемаВвозИзТретьихСтран_XML_API");
		УведомлениеXTDO = НовоеУведомлениеОВвозеИзТретьихСтран(ОбъектДокумент, Фабрика, ДанныеГрупповыхКодов);
		УведомлениеXML = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.КаноническаяСтрокаXMLИзОбъектаXDTO(УведомлениеXTDO, "file", Фабрика);
		//заменяем атрибуты для соответствия формату
		ПространствоИмен = ПолучитьПространствоИменИСМПТ();
		УведомлениеXML = "<?xml version=""1.0"" encoding=""UTF-8""?>" + СтрЗаменить(УведомлениеXML, "xmlns=""" + ПространствоИмен + """", "xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""schemas_xsd_%D0%95%D0%90%D0%AD%D0%A1_%D0%9A%D0%97.xsd""");
		УведомлениеXML = СтрЗаменить(УведомлениеXML, """ version", "Z"" version");
		
		//замена decisionDateTime
		ДатаДоПреобразования = Сред(УведомлениеXML,СтрНайти(УведомлениеXML, "decisionDateTime"), 37);
		УведомлениеXML = СтрЗаменить(УведомлениеXML, ДатаДоПреобразования, ДатаДоПреобразования + "Z");
		
		КоллекцияУведомлениеXML.Вставить(СсылкаУведомление, УведомлениеXML);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовоеУведомлениеОВвозеИзТретьихСтран(Знач Уведомление, Знач Фабрика, ДанныеГрупповыхКодов = Неопределено)
	
	//пространство имен добавлено вручную в схему, чтобы работать в 1С
	ПространствоИмен = ПолучитьПространствоИменИСМПТ();
	ИмяУзла = "file";
	
	СвойствоЗаголовка = Фабрика.Пакеты.Получить(ПространствоИмен).КорневыеСвойства.Получить(ИмяУзла);
	ТипXDTOЗаголовка  = СвойствоЗаголовка.Тип;
	
	УведомлениеXDTO = Фабрика.Создать(ТипXDTOЗаголовка);
	ЗаполнитьУведомлениеОВвозеИзТретьихСтран(Уведомление, Фабрика, УведомлениеXDTO, ДанныеГрупповыхКодов);
	
	Возврат УведомлениеXDTO;
	
КонецФункции

Процедура ЗаполнитьУведомлениеОВвозеИзТретьихСтран(Знач Уведомление, Знач Фабрика, УведомлениеXDTO, ДанныеГрупповыхКодов)
	
	//////////////////////////////////////////////////////////////////////////////
	// Шапка.
	УведомлениеXDTO.fileId = СтрШаблон("IMPORT_%1", Уведомление.Ссылка.УникальныйИдентификатор());
	УведомлениеXDTO.sendingDateTime = Формат(УниверсальноеВремя(ТекущаяДатаСеанса()),"ДФ=ггг-ММ-ддThh:mm:ss");//YYYY-MMDDThh:mm:ssZ
	УведомлениеXDTO.version = "1.0";
	
	document = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO, "document", Фабрика);
	
	mainInfo = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document, 		 "mainInfo", 		Фабрика);
	
	importerInfo = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "importerInfo",	Фабрика);
	importerInfo.importerName = Уведомление.ПолучательНаименование;
	importerInfo.importerCode = Уведомление.ПолучательИдентификационныйНомер;
	
	mainInfo.exportCountry = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЗначенияРеквизитовОбъекта(Уведомление.СтранаОтправления, "КодАльфа2").КодАльфа2;
	
	customDocument = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "customDocument", Фабрика);
	Если Уведомление.ТипДокументаТаможенногоОформления = Перечисления.ТипДокументаТаможенногоОформленияИСМПТК.ДекларацияНаТовары Тогда
		customDocument.docType = "DECLARATION";
	ИначеЕсли Уведомление.ТипДокументаТаможенногоОформления = Перечисления.ТипДокументаТаможенногоОформленияИСМПТК.ЗаявлениеОВыпускеТоваров Тогда
		customDocument.docType = "STATEMENT";
	КонецЕсли;
	customDocument.regNumber = Уведомление.НомерДокументаТаможенногоОформления;
	customDocument.regDate 	 = Уведомление.ДатаДокументаТаможенногоОформления;
	
	customDecisionInfo = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "customDecisionInfo", Фабрика);
	
	ДатаИВремяРешения = Уведомление.ДатаВремяПринятияРешения;
	customDecisionInfo.decisionCode 	= Уведомление.КодРешенияТаможенногоОргана;
	customDecisionInfo.decisionDateTime = Формат(УниверсальноеВремя(ДатаИВремяРешения), "ДФ=ггг-ММ-ддTHH:mm:ss");//2021-07-02T12:00:00Z
	customDecisionInfo.customCode 		= Уведомление.КодТаможенногоОргана;
	
	originalDocInfo = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "originalDocInfo", Фабрика);
	originalDocInfo.docNumber = Уведомление.РегНомерНаБумажномНосителе;
	originalDocInfo.docDate = Уведомление.ДатаВыпискиНаБумажномНосителе;
	Если Не ЗначениеЗаполнено(Уведомление.РегНомерНаБумажномНосителе) И Не ЗначениеЗаполнено(Уведомление.ДатаВыпискиНаБумажномНосителе) Тогда
		УведомлениеXDTO.document.mainInfo.Сбросить("originalDocInfo");
	КонецЕсли;

	//должен быть один элемент, возможно необходимо поправить в документе
	certificationInfo = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "certificationInfo", Фабрика);
	Для каждого СтрокаСоответствия Из Уведомление.ДокументыСоответствия Цикл
		certificationInfo.docDate 	= СтрокаСоответствия.ДатаДокумента;
		certificationInfo.docNumber = СтрокаСоответствия.НомерДокумента;
		certificationInfo.docType 	= Строка(СтрокаСоответствия.ТипДокумента);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УведомлениеОВвозеИзТретьихСтранИСМПТКМарки.КодИдентификации КАК КодИдентификации,
	|	УведомлениеОВвозеИзТретьихСтранИСМПТКТовары.ТНВЭД КАК ТНВЭД,
	|	УведомлениеОВвозеИзТретьихСтранИСМПТКТовары.GTIN КАК GTIN,
	|	ЕСТЬNULL(УведомлениеОВвозеИзТретьихСтранИСМПТКТовары.СтранаПроизводства.КодАльфа2, """") КАК СтранаПроизводстваКодАльфа2,
	|	УведомлениеОВвозеИзТретьихСтранИСМПТКТовары.НомерПозицииВДекларацииИлиЗаявлении КАК НомерПозицииВДекларацииИлиЗаявлении
	|ИЗ
	|	Документ.УведомлениеОВвозеИзТретьихСтранИСМПТК.Товары КАК УведомлениеОВвозеИзТретьихСтранИСМПТКТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УведомлениеОВвозеИзТретьихСтранИСМПТК.Марки КАК УведомлениеОВвозеИзТретьихСтранИСМПТКМарки
	|			ПО УведомлениеОВвозеИзТретьихСтранИСМПТКТовары.GTIN = УведомлениеОВвозеИзТретьихСтранИСМПТКМарки.GTIN
	|	ГДЕ
	|		УведомлениеОВвозеИзТретьихСтранИСМПТКМарки.Ссылка = &Ссылка
	|		И УведомлениеОВвозеИзТретьихСтранИСМПТКТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Уведомление.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		productItems = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document, "productItems",   Фабрика);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		item = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовыйЭлементСпискаXDTO(УведомлениеXDTO.document.productItems.item, Фабрика);
		item.iCodeFromDeclaration = Выборка.КодИдентификации;
		product = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовыйЭлементСпискаXDTO(item.product, Фабрика);
		product.tnved = Выборка.ТНВЭД;
		product.gtin = Выборка.GTIN;
		//коды стран прописаны в схеме, поэтому пустую взять тоже нельзя - выдает ошибку
		//поэтому при проверке на нулл можно взять <xs:enumeration value="Неизвестна"/> 
		//для проверки перечисления кодов стран можно использовать список фасетов (ниже)
		//product.Тип().Свойства.Получить("originCountry").Тип.Фасеты.Перечисления
		product.originCountry = Выборка.СтранаПроизводстваКодАльфа2;
		//<xs:restriction base="xs:integer">
		//	<xs:minInclusive value="1"/>
		//</xs:restriction> 
		//Номер в декларации обязателен к заполнению
		product.itemNumber = Выборка.НомерПозицииВДекларацииИлиЗаявлении;
		
		Если ДанныеГрупповыхКодов <> Неопределено Тогда
			Если ДанныеГрупповыхКодов.ДанныеОбАгрегации = Неопределено Тогда //нет упаковок вообще
				iCode = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовыйЭлементСпискаXDTO(product.iCode, Фабрика);
				iCode.__content = Выборка.КодИдентификации;
			Иначе
				ВложенныеКоды = ДанныеГрупповыхКодов.ДанныеОбАгрегации[Выборка.КодИдентификации];
				Если ВложенныеКоды <> Неопределено Тогда  //упаковка и в ней что-то есть
					Для каждого Код Из ВложенныеКоды Цикл
						iCode = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовыйЭлементСпискаXDTO(product.iCode, Фабрика);
						iCode.__content = Код;
					КонецЦикла;
				Иначе //упаковка, но либо пустая (не сделана агрегация), либо ограничение по владельцу и инф-ю получить не можем
					//для кода нет информации о вложенных
					iCode = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовыйЭлементСпискаXDTO(product.iCode, Фабрика);
					iCode.__content = Выборка.КодИдентификации;
				КонецЕсли;
			КонецЕсли;
		Иначе
			iCode = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.НовыйЭлементСпискаXDTO(product.iCode, Фабрика);
			iCode.__content = Выборка.КодИдентификации;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОтправитьУведомленияОВвозеИзТретьихСтран(Знач КоллекцияДанныеКоллекцииДокументовXML, Знач КоллекцияПодписейИСМП, Знач ТокенАвторизации) Экспорт
	
	Результат = Неопределено;
	
	Для Каждого СгруппированныеДокументыXML Из КоллекцияПодписейИСМП Цикл
		
		СтруктурнаяЕдиница = СгруппированныеДокументыXML.Ключ;
		ДанныеКоллекцииДокументовXML = СгруппированныеДокументыXML.Значение;
		
		Если ТипЗнч(ДанныеКоллекцииДокументовXML) = Тип("Соответствие") Тогда
			КоллекцияДокументовXML = ДанныеКоллекцииДокументовXML;
		Иначе
			КоллекцияДокументовXML = ПолучитьИзВременногоХранилища(ДанныеКоллекцииДокументовXML);
		КонецЕсли;
		
		РезультатОтправки = Новый Соответствие;
		//обходим коллекцию документов 
		Для Каждого ЭлементКоллекции Из КоллекцияДокументовXML Цикл
			УведомлениеBase64 = ЭлементКоллекции.Значение.ДокументBase64;
			ПодписанныйДокумент = ЭлементКоллекции.Значение.ПодписанныйДокумент;
			
			Если ПодписанныйДокумент = "НеВыбран" Тогда 
				НомерДокумента = ЭлементКоллекции.Ключ.Номер;
				Текст = НСтр("ru = 'Документ № %1 был исключен из отправки, т.к. не был подписан ЭЦП.'");
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, НомерДокумента); 
				СообщениеПользователя = Новый СообщениеПользователю;
				СообщениеПользователя.Текст = ТекстСообщения;
				СообщениеПользователя.Сообщить();
				Продолжить;
			КонецЕсли;
			
			//каждый документ передаем в процедуру отправки
			РезультатВыполненияНаСервере = ВыполнитьСозданиеУведомленияОВвозеИзТретьихСтран(УведомлениеBase64, ПодписанныйДокумент, 0, Неопределено, СтруктурнаяЕдиница, ТокенАвторизации);
			РезультатОтправки.Вставить(ЭлементКоллекции.Ключ, РезультатВыполненияНаСервере);
		КонецЦикла;
		
		//БМ_ИСМПТ ТРЕБУЕТСЯ_РАССМОТРЕНИЕ	Доработать обновление документов
		// Обновим статусы отправленных и заполняем идентификаторы после завершения отправки всех документов
		ОбновитьУведомлениеОВвозеИзТретьихСтранПослеОтправки(РезультатОтправки, Неопределено, СтруктурнаяЕдиница, ТокенАвторизации);
		
		Результат = РезультатОтправки;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьУведомлениеОВвозеИзТретьихСтранПослеОтправки(РезультатОтправкиДокументов, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации)
	
		Для каждого РезультатОтправки Из РезультатОтправкиДокументов Цикл
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибка(РезультатОтправки.Значение, ИнформацияОбОшибке) Тогда
			ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = НСтр("ru = 'При отправке уведомления на сервере произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомлениеОВвозеИзТретьихСтранПослеОтправки'"), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			Продолжить;
		Иначе
			//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
			ОчиститьОшибкиДокумента(РезультатОтправки.Ключ);	
		КонецЕсли;
		
		Идентификатор = СтрШаблон("IMPORT_%1", РезультатОтправки.Ключ.УникальныйИдентификатор());
		//идентификатор необходимо сохранить до получения обновления
		ЗаполнитьИдентификаторДокумента(РезультатОтправки.Ключ, Идентификатор, Перечисления.СтатусыДокументовИСМПТК.Проверяется);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьУведомлениеОВвозеИзТретьихСтран(Знач МассивДокументов, ДанныеПрофилей, ТокенАвторизации) Экспорт
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Уведомление.Ссылка КАК Ссылка,
	|	Уведомление.Идентификатор КАК Идентификатор,
	|	Уведомление.Направление КАК Направление
	|ИЗ
	|	Документ.УведомлениеОВвозеИзТретьихСтранИСМПТК КАК Уведомление
	|ГДЕ
	|	Уведомление.Ссылка В(&МассивДокументов)
	|	И НЕ Уведомление.Идентификатор = """"
	|ИТОГИ ПО
	|	Направление";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	ВыборкаНаправление = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНаправление.Следующий() Цикл
		
		Выборка = ВыборкаНаправление.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
				//ошибка, в документе нет идентификатора
				Продолжить;
			КонецЕсли;
			
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("Идентификатор",Выборка.Идентификатор);
			РезультатВыполненияНаСервере = ПолучитьУведомленияВводаВывода(ПараметрыДокумента, ДанныеПрофилей, ТокенАвторизации);
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			КопияДокумента = ДокументОбъект.Скопировать();
			Если КопияДокумента.Марки.Количество() = 0 Тогда
				КопияДокумента.Марки.Загрузить(ДокументОбъект.Марки.Выгрузить());
			КонецЕсли;
			МассивСтарыхДокументов = Новый Массив;
			ИсходныйНовый = Новый Структура;
			ИсходныйНовый.Вставить("ИсходныйОбъект", КопияДокумента);
			ИсходныйНовый.Вставить("ОбновленныйОбъект", ДокументОбъект);
			МассивСтарыхДокументов.Добавить(ИсходныйНовый);
			
			ОбновитьУведомлениеОВвозеИзТретьихСтранПоДаннымСервера(РезультатВыполненияНаСервере, Выборка.Ссылка);
			ВосстановитьСсылочныеРеквизитыДокументов(МассивСтарыхДокументов);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//Получает с сервера документы Уведомление о ввозе из ЕАЭС
//
Процедура ПолучитьДокументыУведомлениеОВвозеИзТретьихСтран(СтруктурнаяЕдиница, РезультатВыполненияНаСервере, ЭтоИсходящиеДокументы, ТокенАвторизации)
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ТекстСообщения = НСтр("ru = 'При обновлении с сервера произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.ПолучитьДокументыУведомлениеОВвозеИзТретьихСтран'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекстОтвета = РезультатВыполненияНаСервере.ТекстОтвета;
	ОтветСервера = ТекстОтвета;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСервера);
	СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
	
	Если СтруктураОтвета.total = 0 Тогда
		//в ответе вернулся пустой список
		Возврат;
	КонецЕсли;
	
	МассивИдентификаторов = Новый Массив;
	СоответствиеНомерам = Новый Соответствие;
	
	Для каждого ЭлементСписка Из СтруктураОтвета.results Цикл
		
		//делаем запрос по номеру
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("Исходящий", НЕ ЭтоИсходящиеДокументы); // если документы Акт входящие, то УОР наоборот
		ПараметрыДокумента.Вставить("Идентификатор", ЭлементСписка.number);
		РезультатВыполненияНаСервере = ПолучитьУведомленияВводаВывода(ПараметрыДокумента, СтруктурнаяЕдиница, ТокенАвторизации);
		
		//проверяем результат на ошибки
		Если РезультатВыполненияНаСервере.КодСостояния = 404 Тогда
			//это номер акта, уведомления по нему нет
			//поэтому никаких действий делать не нужно
		ИначеЕсли РезультатВыполненияНаСервере.КодСостояния = 200 И ЗначениеЗаполнено(РезультатВыполненияНаСервере.ТекстОтвета) Тогда
			МассивИдентификаторов.Добавить(ЭлементСписка.number);
			ДанныеДокумента = Новый Структура("Номер, Дата, Статус", ЭлементСписка.number, ЭлементСписка.docDate, ЭлементСписка.status);
			ДанныеДокумента.Вставить("РезультатВыполненияНаСервере", РезультатВыполненияНаСервере);
			СоответствиеНомерам.Вставить(ЭлементСписка.number, ДанныеДокумента);
		Иначе
			ИнформацияОбОшибке = Неопределено;
			Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
				ТекстСообщения = НСтр("ru = 'При обращении к серверу произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'ОбменИСМПТ.ПолучитьДокументыУведомлениеОВвозеИзТретьихСтран'"), 
					УровеньЖурналаРегистрации.Ошибка,,,
					ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СуществующиеДокументы = Новый Соответствие;
	// Заполнить соответствие пустыми ссылками.
	ПустаяСсылка = Документы.УведомлениеОВвозеИзЕАЭСИСМПТК.ПустаяСсылка();
	
	Для Каждого ЭлементМассива Из МассивИдентификаторов Цикл
		СуществующиеДокументы.Вставить(ЭлементМассива, ПустаяСсылка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОВвозеИмпорт.Ссылка КАК НайденнаяСсылка,
	|	УведомлениеОВвозеИмпорт.Идентификатор КАК Идентификатор
	|ИЗ
	|	Документ.УведомлениеОВвозеИзТретьихСтранИСМПТК КАК УведомлениеОВвозеИмпорт
	|ГДЕ
	|	УведомлениеОВвозеИмпорт.Идентификатор В(&Идентификаторы)";
	
	Запрос.УстановитьПараметр("Идентификаторы", МассивИдентификаторов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СуществующиеДокументы.Вставить(Выборка.Идентификатор, Выборка.НайденнаяСсылка);
	КонецЦикла;
	//уведомление о ввозе по импорту всегда являются исходящими документами
	Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий;
	МассивДокументов = Новый Массив;
	
	Для Каждого ЭлементКоллекции Из СуществующиеДокументы Цикл
		
		Идентификатор = ЭлементКоллекции.Ключ;
		Ссылка = ЭлементКоллекции.Значение;
		
		Если Ссылка.Пустая() Тогда
			
			НовыйДокумент = Документы.УведомлениеОВвозеИзТретьихСтранИСМПТК.СоздатьДокумент();
			НовыйДокумент.Дата = ТекущаяДатаСеанса();
			НовыйДокумент.Идентификатор = Идентификатор;
			ДанныеДокумента = СоответствиеНомерам.Получить(Идентификатор);
			НовыйДокумент.НомерИСМПТ = ДанныеДокумента.Номер;
			НовыйДокумент.ДатаВИСМПТ = ПрочитатьДатуJSON(ДанныеДокумента.Дата, ФорматДатыJSON.ISO);
			Статус = ПолучитьСтатусДокументаУведомленияПоКоду(ДанныеДокумента.Статус);
			Если Статус <> Неопределено Тогда
				НовыйДокумент.Статус = Статус;
			КонецЕсли;
			НовыйДокумент.Направление = Направление;
			
			ТекущийПользователь = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь();
			НовыйДокумент.Автор = ТекущийПользователь;
			НовыйДокумент.Организация = СтруктурнаяЕдиница;
			
			МассивДокументов.Добавить(НовыйДокумент);
			
		Иначе
			МассивДокументов.Добавить(Ссылка.ПолучитьОбъект());
		КонецЕсли;
		
	КонецЦикла;
	
	МассивСтарыхДокументов = Новый Массив;
	Для каждого ДокументОбъект Из МассивДокументов Цикл
		Если ДокументОбъект.Ссылка.Пустая() Тогда
			ДокументОбъект.Записать();
		Иначе
			КопияДокумента = ДокументОбъект.Скопировать();
			Если КопияДокумента.Марки.Количество() = 0 Тогда
				КопияДокумента.Марки.Загрузить(ДокументОбъект.Марки.Выгрузить());
			КонецЕсли;
			ИсходныйНовый = Новый Структура;
			ИсходныйНовый.Вставить("ИсходныйОбъект", 	КопияДокумента);
			ИсходныйНовый.Вставить("ОбновленныйОбъект", ДокументОбъект);
			МассивСтарыхДокументов.Добавить(ИсходныйНовый);
		КонецЕсли;
	КонецЦикла;
	
	СчетчикДокументы = 0;
	СчетчикДокументыОшибка = 0;

	Для каждого ДокументОбъект Из МассивДокументов Цикл
		ДанныеДокумента = СоответствиеНомерам.Получить(ДокументОбъект.Идентификатор);
		Успешно = Ложь;
		ОбновитьУведомлениеОВвозеИзТретьихСтранПоДаннымСервера(ДанныеДокумента.РезультатВыполненияНаСервере, ДокументОбъект.Ссылка, Неопределено, Успешно);
		Если Успешно Тогда
			СчетчикДокументы = СчетчикДокументы + 1;
		Иначе
			СчетчикДокументыОшибка = СчетчикДокументыОшибка + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ИнтеграцияИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанных() Тогда
		//// Вывод сообщений о результатах операции ////
		Если Не СчетчикДокументы = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Обновлено по данным сервера: %1 Уведомления(-й) о ввозе (Импорт).'");
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СчетчикДокументы);
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Не СчетчикДокументыОшибка = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось обновить по данным сервера: %1 Уведомления(-й) о ввозе (Импорт).'");
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СчетчикДокументыОшибка);
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли; 
		
		Если СчетчикДокументы = 0 И СчетчикДокументыОшибка = 0 Тогда
			ТекстСообщения = НСтр("ru = 'В указанном периоде нет Уведомлений о ввозе (Импорт), требующих синхронизации.'");
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		////////////////
	КонецЕсли;
	
	ВосстановитьСсылочныеРеквизитыДокументов(МассивСтарыхДокументов);
	
КонецПроцедуры

//Обновляет документ Уведомление о ввозе из ЕАЭС по данным сервера
Процедура ОбновитьУведомлениеОВвозеИзТретьихСтранПоДаннымСервера(РезультатВыполненияНаСервере, УведомлениеСсылка, ДополнительныеДанные = Неопределено, Успешно = Ложь)
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ЗаполнитьОшибкиДокумента(УведомлениеСсылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
		ТекстСообщения = НСтр("ru = 'При обновлении с сервера произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомленияОВвозеИзТретьихСтранПоДаннымСервера'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		Возврат;
	Иначе
		//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
		ОчиститьОшибкиДокумента(УведомлениеСсылка);	
	КонецЕсли;
	
	НачатьТранзакцию();
			
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатВыполненияНаСервере.ТекстОтвета);
		ОтветСервера = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON);
		СтрокаXML    = ОтветСервера.content;
		ДополнительныеДанные = Новый Структура("НомерИСМПТ, ДатаВИСМПТ");
		ДополнительныеДанные.НомерИСМПТ = ОтветСервера.number;
		ДополнительныеДанные.ДатаВИСМПТ = УниверсальноеВремя(ПрочитатьДатуJSON(ОтветСервера.docDate, ФорматДатыJSON.ISO));
		
		Фабрика   = ФабрикаАПП_XML_API("СхемаВвозИзТретьихСтран_XML_API");
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		ОбъектXDTO   = Фабрика.ПрочитатьXML(ЧтениеXML);
		ДокументXDTO = ОбъектXDTO.document;
		//заполнить документ по данным сервера
		ДокументОбъект = УведомлениеСсылка.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
			ЗаполнитьЗначенияСвойств(ДокументОбъект, ДополнительныеДанные, "НомерИСМПТ, ДатаВИСМПТ");
			Статус = ПолучитьСтатусДокументаУведомленияПоКоду(ОтветСервера.status);
			Если Статус <> Неопределено Тогда
				ДокументОбъект.Статус = Статус;
			КонецЕсли;
		КонецЕсли;
			
		ДокументОбъект.ПолучательНаименование 			= ДокументXDTO.mainInfo.importerInfo.importerName;
		ДокументОбъект.ПолучательИдентификационныйНомер = ДокументXDTO.mainInfo.importerInfo.importerCode;
		
		Если Не ДокументXDTO.mainInfo.Свойства().Получить("originalDocInfo") = Неопределено Тогда
			ДокументОбъект.РегНомерНаБумажномНосителе    = ДокументXDTO.mainInfo.originalDocInfo.docNumber;
			ДокументОбъект.ДатаВыпискиНаБумажномНосителе = 
				?(ЗначениеЗаполнено(ДокументXDTO.mainInfo.originalDocInfo.docDate),
				Дата(ДокументXDTO.mainInfo.originalDocInfo.docDate + " 00:00:00"),
				Неопределено);
		КонецЕсли;
		
		ИдентификационныеНомераКонтрагентов = Новый Массив;
		ИдентификационныеНомераСтруктурныхЕдиниц = Новый Массив;	
		
		Если ЗначениеЗаполнено(ДокументОбъект.ПолучательИдентификационныйНомер) Тогда
			ИдентификационныеНомераКонтрагентов.Добавить(ДокументОбъект.ПолучательИдентификационныйНомер);
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ДокументОбъект.ПолучательИдентификационныйНомер);
		КонецЕсли;
		
		СоответствияИдентификаторовИСсылок = НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(ИдентификационныеНомераКонтрагентов, ИдентификационныеНомераСтруктурныхЕдиниц);
		
		// Заполнить ссылки на структурные единицы.
		СоответствияСтруктурныхЕдиниц = СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц;
		Для Каждого ЭлементСоответствияСтруктурныхЕдиниц Из СоответствияСтруктурныхЕдиниц Цикл
			
			Идентификатор = ЭлементСоответствияСтруктурныхЕдиниц.Ключ;
			Контрагент = ЭлементСоответствияСтруктурныхЕдиниц.Значение;
			Если ДокументОбъект.ПолучательИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Получатель = Контрагент;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ДокументXDTO.mainInfo.Свойства().Получить("exportCountry") = Неопределено И ЗначениеЗаполнено(ДокументXDTO.mainInfo.exportCountry) Тогда
			СтранаМира = ИнтеграцияИСМПТКПереопределяемый.ПолучитьСтрануПоКоду(ДокументXDTO.mainInfo.exportCountry);
			Если ЗначениеЗаполнено(СтранаМира) Тогда
				ДокументОбъект.СтранаОтправления = СтранаМира;
			КонецЕсли;
		КонецЕсли;
		
		Если ДокументXDTO.mainInfo.customDocument.docType = "DECLARATION" Тогда
			ДокументОбъект.ТипДокументаТаможенногоОформления = Перечисления.ТипДокументаТаможенногоОформленияИСМПТК.ДекларацияНаТовары;
		ИначеЕсли ДокументXDTO.mainInfo.customDocument.docType = "STATEMENT" Тогда
			ДокументОбъект.ТипДокументаТаможенногоОформления = Перечисления.ТипДокументаТаможенногоОформленияИСМПТК.ЗаявлениеОВыпускеТоваров;
		КонецЕсли;
		
		ДокументОбъект.НомерДокументаТаможенногоОформления = ДокументXDTO.mainInfo.customDocument.regNumber;
		ДокументОбъект.ДатаДокументаТаможенногоОформления  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СтрокаВДату(ДокументXDTO.mainInfo.customDocument.regDate, Истина);
		
		ДокументОбъект.КодРешенияТаможенногоОргана = ДокументXDTO.mainInfo.customDecisionInfo.decisionCode;
		ДокументОбъект.КодТаможенногоОргана = ДокументXDTO.mainInfo.customDecisionInfo.customCode;
		ДатаИВремяРешения = УниверсальноеВремя(ПрочитатьДатуJSON(ДокументXDTO.mainInfo.customDecisionInfo.decisionDateTime, ФорматДатыJSON.ISO));
		ДокументОбъект.ДатаВремяПринятияРешения = ДатаИВремяРешения;
		
		Если ТипЗнч(ДокументXDTO.mainInfo.certificationInfo) = Тип("ОбъектXDTO") Тогда
			
			ДокументОбъект.ДокументыСоответствия.Очистить();
			certificationInfo = ДокументXDTO.mainInfo.certificationInfo;
			НоваяСтрока = ДокументОбъект.ДокументыСоответствия.Добавить();
			НоваяСтрока.ТипДокумента = certificationInfo.docType;
			НоваяСтрока.ДатаДокумента = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СтрокаВДату(certificationInfo.DocDate, Истина);
			НоваяСтрока.НомерДокумента = certificationInfo.DocNumber;
			
		ИначеЕсли ТипЗнч(ДокументXDTO.mainInfo.certificationInfo)=Тип("СписокXDTO") Тогда
			
			ДокументОбъект.ДокументыСоответствия.Очистить();
			
			Для каждого СтрокаXDTO Из ДокументXDTO.mainInfo.certificationInfo Цикл
				certificationInfo = СтрокаXDTO;
				НоваяСтрока = ДокументОбъект.ДокументыСоответствия.Добавить();
				НоваяСтрока.ТипДокумента   = certificationInfo.docType;
				НоваяСтрока.ДатаДокумента  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СтрокаВДату(certificationInfo.DocDate, Истина);
				НоваяСтрока.НомерДокумента = certificationInfo.DocNumber;
			КонецЦикла;
			
		КонецЕсли;
		
		//ДокументXDTO.productItems.item
		Если ТипЗнч(ДокументXDTO.productItems.item)=Тип("ОбъектXDTO") Тогда
			
			ДокументОбъект.Марки.Очистить();
			ДокументОбъект.Товары.Очистить();
			
			НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();   
			СтрокаXDTO = ДокументXDTO.productItems.item;
			
			НоваяСтрокаТовары = ДокументОбъект.Товары.Добавить();
			НоваяСтрокаТовары.ТНВЭД = СтрокаXDTO.product.tnved;
			НоваяСтрокаТовары.GTIN = СтрокаXDTO.product.gtin;
			НоваяСтрокаТовары.НомерПозицииВДекларацииИлиЗаявлении = СтрокаXDTO.product.itemNumber;
			НоваяСтрокаТовары.КоличествоКМ = 1;
			
			Если Не СтрокаXDTO.product.Свойства().Получить("originCountry") = Неопределено И ЗначениеЗаполнено(СтрокаXDTO.product.originCountry) Тогда
				СтранаМира = ИнтеграцияИСМПТКПереопределяемый.ПолучитьСтрануПоКоду(СтрокаXDTO.product.originCountry);
				Если ЗначениеЗаполнено(СтранаМира) Тогда
					НоваяСтрокаТовары.СтранаПроизводства = СтранаМира;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрокаМарки = ДокументОбъект.Марки.Добавить();
			НоваяСтрокаМарки.КодИдентификации = СтрокаXDTO.iCodeFromDeclaration;
			НоваяСтрокаМарки.GTIN = СтрокаXDTO.product.gtin;
			НоваяСтрокаМарки.Количество = 1;
			
			ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(НоваяСтрокаМарки.КодИдентификации, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
			
			Если Не ДанныеРазбора = Неопределено Тогда
				
				НоваяСтрокаМарки.ВидУпаковки 	= ДанныеРазбора.ВидУпаковки;
				НайденнаяНоменклатура = Неопределено;
				
				ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрокаМарки, ДанныеРазбора, НайденнаяНоменклатура);
				
				НоваяСтрокаМарки.Номенклатура = НайденнаяНоменклатура;
				
				Если НЕ НайденнаяНоменклатура.Пустая() Тогда
					НоваяСтрокаМарки.ВидПродукцииИС	= ИнтеграцияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(НайденнаяНоменклатура);
				Иначе
					НоваяСтрокаМарки.ВидПродукцииИС	= ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка");
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, НоваяСтрокаМарки, "Номенклатура, EAN, ВидПродукцииИС");
			Иначе
				ТекстСообщения = НСтр("ru = 'Ошибка разбора документа %1! Возможно он содержит данные по виду номенклатуры, учет по которому не ведется.'");
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект.Ссылка); 
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменИСМПТ.ОбновитьАктПоДаннымСервера'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			КонецЕсли;
			
			//свернуть товары
			ДокументОбъект.Товары.Свернуть(
				"Номенклатура, ТНВЭД, СтранаПроизводства, НомерПозицииВДекларацииИлиЗаявлении, EAN, ВидПродукцииИС, GTIN, Характеристика",
				"КоличествоКМ");
		ИначеЕсли ТипЗнч(ДокументXDTO.productItems.item)=Тип("СписокXDTO") Тогда
			
			ДокументОбъект.Марки.Очистить();
			ДокументОбъект.Товары.Очистить();
			НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();  
			
			Для Каждого СтрокаXDTO Из ДокументXDTO.productItems.item Цикл
				
				НоваяСтрокаТовары = ДокументОбъект.Товары.Добавить();
				НоваяСтрокаТовары.ТНВЭД = СтрокаXDTO.product.tnved;
				НоваяСтрокаТовары.GTIN = СтрокаXDTO.product.gtin;
				НоваяСтрокаТовары.НомерПозицииВДекларацииИлиЗаявлении = СтрокаXDTO.product.itemNumber;
				НоваяСтрокаТовары.КоличествоКМ = 1;
				
				Если Не СтрокаXDTO.product.Свойства().Получить("originCountry") = Неопределено И ЗначениеЗаполнено(СтрокаXDTO.product.originCountry) Тогда
					СтранаМира = ИнтеграцияИСМПТКПереопределяемый.ПолучитьСтрануПоКоду(СтрокаXDTO.product.originCountry);
					Если ЗначениеЗаполнено(СтранаМира) Тогда
						НоваяСтрокаТовары.СтранаПроизводства = СтранаМира;
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрокаМарки = ДокументОбъект.Марки.Добавить();
				НоваяСтрокаМарки.КодИдентификации = СтрокаXDTO.iCodeFromDeclaration;
				НоваяСтрокаМарки.GTIN = СтрокаXDTO.product.gtin;
				НоваяСтрокаМарки.Количество = 1;
				
				ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(НоваяСтрокаМарки.КодИдентификации, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
				
				Если Не ДанныеРазбора = Неопределено Тогда
					
					НоваяСтрокаМарки.ВидУпаковки = ДанныеРазбора.ВидУпаковки;
					НайденнаяНоменклатура = Неопределено;
					
					ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрокаМарки, ДанныеРазбора, НайденнаяНоменклатура);
					
					НоваяСтрокаМарки.Номенклатура = НайденнаяНоменклатура;
					
					Если НЕ НайденнаяНоменклатура.Пустая() Тогда
						НоваяСтрокаМарки.ВидПродукцииИС	= ИнтеграцияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(НайденнаяНоменклатура);
					Иначе
						НоваяСтрокаМарки.ВидПродукцииИС	= ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка");
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, НоваяСтрокаМарки, "Номенклатура, EAN, ВидПродукцииИС");
				Иначе
					ТекстСообщения = НСтр("ru = 'Ошибка разбора документа %1! Возможно он содержит данные по виду номенклатуры, учет по которому не ведется.'");
					ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект.Ссылка); 
					ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменИСМПТ.ОбновитьАктПоДаннымСервера'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				КонецЕсли;
				
			КонецЦикла;
			//свернуть товары
			ДокументОбъект.Товары.Свернуть(
				"Номенклатура, ТНВЭД, СтранаПроизводства, НомерПозицииВДекларацииИлиЗаявлении, EAN, ВидПродукцииИС, GTIN, Характеристика",
				"КоличествоКМ");
		КонецЕсли;
		
		//провести документы
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		ЗафиксироватьТранзакцию();
		Успешно = Истина;
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомленияОВвозеПоДаннымСервера'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область УведомленияОбЭкспортеЕАЭС

Процедура СоздатьИсходящиеУведомленияОбЭкспортеЕАЭС(
	Знач МассивДокументов, 
	Знач УстанавливатьПодпись, 
	Знач ТипПодписи, 
	КоллекцияУведомлениеXML, 
	КоллекцияSignedContentXML) Экспорт
	
	КоллекцияУведомлениеXML = Новый Соответствие;
	КоллекцияSignedContentXML = Новый Соответствие;
	Для Каждого СсылкаУведомление Из МассивДокументов Цикл
		
		ОбъектДокумент = СсылкаУведомление.ПолучитьОбъект();
		УведомлениеXML = НовоеУведомлениеОбЭкспортеЕАЭС(ОбъектДокумент);
		КоллекцияУведомлениеXML.Вставить(СсылкаУведомление, УведомлениеXML);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовоеУведомлениеОбЭкспортеЕАЭС(Знач Уведомление)
	
	УведомлениеJSON = "";
	ЗаполнитьУведомлениеОбЭкспортеЕАЭС(Уведомление, УведомлениеJSON);
	Возврат УведомлениеJSON;
	
КонецФункции

Процедура ЗаполнитьУведомлениеОбЭкспортеЕАЭС(Знач Уведомление, УведомлениеJSON)
	
	//////////////////////////////////////////////////////////////////////////////
	// Шапка.
	
	//{
	//	"productGroup": "shoes",
	//	"exporterName": "ИП Бубликов",
	//	"exporterCode": "900422300904",
	//	"receiverCountryCode": "RU",
	//	"receiverCode": "7731376812",
	//	"receiverName": "Принимающая фирма РФ",
	//	"documentNumber": "135R",
	//	"documentDate": "2022-02-01",
	//	"transferDate": "2022-02-08",
	//	"productList": [
	//	{
	//		"cis": "010462007796032621yobIHDY&AhPC!",
	//		"price": "350.30",
	//		"vat": "30",
	//		"documentList": [
	//		{
	//			"docKind": "certificate",
	//			"docNumber": "123321",
	//			"docDate": "2022-01-13"
	//		}
	//		]
	//	}
	//	]
	//}
	
	ДанныеДляОтправки = Новый Структура;
	//шапка
	Если Уведомление.ТоварнаяГруппа = Перечисления.ВидыПродукцииИСМПТК.Обувная Тогда
		ДанныеДляОтправки.Вставить("productGroup", "shoes");
	КонецЕсли;
	
	ДанныеДляОтправки.Вставить("exporterName", Уведомление.ПоставщикНаименование);
	ДанныеДляОтправки.Вставить("exporterCode", Уведомление.ПоставщикИдентификационныйНомер);
	КодСтраны = ИнтеграцияИСМПТКПереопределяемый.ПолучитьКодСтраныДляУведомленияОввозе(Уведомление.СтранаПолучатель); 
	Если КодСтраны <> "RU" Тогда
		ТекстСообщения = НСтр("ru = 'В. Страна отправления указана некорректно. Доступное значение: Россия).'"); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	ДанныеДляОтправки.Вставить("receiverCountryCode", КодСтраны);
	ДанныеДляОтправки.Вставить("receiverCode", Уведомление.ПолучательИдентификационныйНомер);
	ДанныеДляОтправки.Вставить("receiverName", Уведомление.ПолучательНаименование);
	ДанныеДляОтправки.Вставить("documentNumber", Уведомление.НомерДокументаТрансграна);//? возможно стоит брать номер самой системы
	ДанныеДляОтправки.Вставить("documentDate", Формат(Уведомление.ДатаДокументаТрансграна,"ДФ=yyyy-MM-dd"));
	ДанныеДляОтправки.Вставить("transferDate", Формат(Уведомление.ДатаВремяОтгрузки,"ДФ=yyyy-MM-dd"));
	
	//данные о товарах
	МассивТоваров = Новый Массив;
	
	Для каждого СтрокаТовары Из Уведомление.Товары Цикл
		
		СведенияОТоваре = Новый Структура;
		СведенияОТоваре.Вставить("cis", СтрокаТовары.КодИдентификации);
		Если ЗначениеЗаполнено(СтрокаТовары.ЦенаСНДС) Тогда
			СведенияОТоваре.Вставить("price", СтрокаТовары.ЦенаСНДС);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТовары.НДС) Тогда
			СведенияОТоваре.Вставить("vat", СтрокаТовары.НДС);
		КонецЕсли;
		
		Если Ложь Тогда
			
			МассивДокументов = Новый Массив;
			
			Для каждого СтрокаДокументы Из Уведомление.ДокументыСоответствия Цикл
				
				ПодтверждающийДокумент = Новый Структура;
				Если ЗначениеЗаполнено(СтрокаДокументы.ТипДокумента) Тогда
					Если СтрокаДокументы.ТипДокумента = Перечисления.ВидыДокументовОбязательнойСертификацииИСМПТК.ДекларацияСоответствия Тогда
						ПодтверждающийДокумент.Вставить("docKind", "declaration");
					ИначеЕсли СтрокаДокументы.ТипДокумента = Перечисления.ВидыДокументовОбязательнойСертификацииИСМПТК.СертификатСоответствия Тогда
						ПодтверждающийДокумент.Вставить("docKind", "certificate");
					КонецЕсли;
				КонецЕсли;
				ПодтверждающийДокумент.Вставить("docNumber", Строка(СтрокаДокументы.НомерДокумента));
				ПодтверждающийДокумент.Вставить("docDate", Формат(СтрокаДокументы.ДатаДокумента,"ДФ=yyyy-MM-dd"));
				МассивДокументов.Добавить(ПодтверждающийДокумент);
				
			КонецЦикла;
			
			СведенияОТоваре.Вставить("documentList", МассивДокументов);
			
		КонецЕсли;
		МассивТоваров.Добавить(СведенияОТоваре);
	КонецЦикла;
	
	ДанныеДляОтправки.Вставить("productList", МассивТоваров);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеДляОтправки);
	УведомлениеJSON = ЗаписьJSON.Закрыть();
	
КонецПроцедуры

Функция ОтправитьУведомленияОбЭкспортеЕАЭС(Знач КоллекцияДанныеКоллекцииДокументовXML, Знач КоллекцияПодписейИСМП, Знач ТокенАвторизации) Экспорт
	
	Результат = Неопределено;
	
	Для Каждого СгруппированныеДокументыXML Из КоллекцияПодписейИСМП Цикл
		
		СтруктурнаяЕдиница = СгруппированныеДокументыXML.Ключ;
		ДанныеКоллекцииДокументовXML = СгруппированныеДокументыXML.Значение;
		
		Если ТипЗнч(ДанныеКоллекцииДокументовXML) = Тип("Соответствие") Тогда
			КоллекцияДокументовXML = ДанныеКоллекцииДокументовXML;
		Иначе
			КоллекцияДокументовXML = ПолучитьИзВременногоХранилища(ДанныеКоллекцииДокументовXML);
		КонецЕсли;
		
		Результат = ОтправитьИсходящиеУведомленияОбЭкспортеЕАЭС(КоллекцияДокументовXML, Неопределено, СтруктурнаяЕдиница, ТокенАвторизации);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьИсходящиеУведомленияОбЭкспортеЕАЭС(Знач КоллекцияУведомленийXML, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации) Экспорт
	
	РезультатОтправки = Новый Соответствие;
	//обходим коллекцию документов
	Для Каждого ЭлементКоллекции Из КоллекцияУведомленийXML Цикл
		
		УведомлениеBase64   = ЭлементКоллекции.Значение.ДокументBase64;
		ПодписанныйДокумент = ЭлементКоллекции.Значение.ПодписанныйДокумент;
		
		Если ПодписанныйДокумент = "НеВыбран" Тогда 
			НомерДокумента = ЭлементКоллекции.Ключ.Номер;
			Текст = НСтр("ru = 'Документ № %1 был исключен из отправки, т.к. не был подписан ЭЦП.'");
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, НомерДокумента); 
			СообщениеПользователя = Новый СообщениеПользователю;
			СообщениеПользователя.Текст = ТекстСообщения;
			СообщениеПользователя.Сообщить();
			Продолжить;
		КонецЕсли;
		
		РезультатВыполненияНаСервере = ВыполнитьСозданиеУведомленияОбЭкспортеЕАЭС(УведомлениеBase64, ПодписанныйДокумент, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации);
		РезультатОтправки.Вставить(ЭлементКоллекции.Ключ, РезультатВыполненияНаСервере);
		
	КонецЦикла;
	
	//БМ_ИСМПТ ТРЕБУЕТСЯ_РАССМОТРЕНИЕ	Доработать обновление документов (на текущий момент сервер не возвращает id созданного документа)
	// Обновим статусы отправленных и заполняем идентификаторы после завершения отправки всех документов
	ОбновитьУведомленияОбЭкспортеЕАЭСПослеОтправки(РезультатОтправки, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации);
	
	Возврат РезультатОтправки;
	
КонецФункции

Процедура ОбновитьУведомленияОбЭкспортеЕАЭСПослеОтправки(РезультатОтправкиДокументов, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации)
	
	Для каждого РезультатОтправки Из РезультатОтправкиДокументов Цикл
		ИнформацияОбОшибке = Неопределено;
		ЕстьОшибки = Ложь;
		Если ЭтоОшибка(РезультатОтправки.Значение, ИнформацияОбОшибке) Тогда
			ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = НСтр("ru = 'При отправке уведомления на сервере произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомленияОбЭкспортеЕАЭСПослеОтправки'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
			Продолжить;
		Иначе
			//проверяем ответ сервера на наличие ошибок валидации
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(РезультатОтправки.Значение.ТекстОтвета);
			ОтветСервера = ПрочитатьJSON(ЧтениеJSON);
			ОписаниеОшибок = "";
			Для каждого СтрокаОшибки Из ОтветСервера.errors Цикл
				ПозицияРазделителя = СтрНайти(СтрокаОшибки, ":", НаправлениеПоиска.СНачала);
				Если ПозицияРазделителя > 0 Тогда
					КодОшибки = Сред(СтрокаОшибки, 0, ПозицияРазделителя - 1);
					ТекстОшибки = СокрЛП(Сред(СтрокаОшибки, ПозицияРазделителя + 1, СтрДлина(СтрокаОшибки) - ПозицияРазделителя));
					Если КодОшибки <> "0" Тогда
						ЕстьОшибки = Истина;
						ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + ТекстОшибки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьОшибки Тогда
				ТекстСообщения = НСтр("ru = 'При отправке уведомления на сервере произошла ошибка: '") + Символы.ПС + ОписаниеОшибок;
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомленияОбЭкспортеЕАЭСПослеОтправки'"), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			Иначе
				//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
				ОчиститьОшибкиДокумента(РезультатОтправки.Ключ);
				ИдентификаторНаСервере = ?(ОтветСервера.Свойство("shipmentId"), ОтветСервера.shipmentId, "");
				
				РезультатВыполнения = ПолучитьСтатусУведомленияОбЭкспортеЕАЭС(Новый Структура("Идентификатор", ИдентификаторНаСервере), СтруктурнаяЕдиница, ТокенАвторизации);
				СтатусДокумента = Неопределено;
				Если Не ЭтоОшибка(РезультатВыполнения, ИнформацияОбОшибке) Тогда
					ЧтениеJSON = Новый ЧтениеJSON;
					ЧтениеJSON.УстановитьСтроку(РезультатВыполнения.ТекстОтвета);
					СтруктураСтатус = ПрочитатьJSON(ЧтениеJSON);
					СтатусДокумента = СтруктураСтатус.status;
				КонецЕсли;
				
				Попытка
					ДокументОбъект = РезультатОтправки.Ключ.ПолучитьОбъект();
					Если ЗначениеЗаполнено(ИдентификаторНаСервере) Тогда
						ДокументОбъект.Идентификатор = ИдентификаторНаСервере;
					КонецЕсли;
					ДокументОбъект.НомерИСМПТ = ИдентификаторНаСервере;
					Статус = ПолучитьСтатусДокументаПоКоду(СтатусДокумента);  //Перечисления.СтатусыДокументовИСМПТК.Проверяется
					Если Статус <> Неопределено Тогда
						ДокументОбъект.Статус = Статус;
					КонецЕсли;
					ДокументОбъект.Записать();
				Исключение
					//ОписаниеОшибки()
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьУведомлениеОбЭкспортеЕАЭС(Знач МассивДокументов, ДанныеПрофилей, ТокенАвторизации) Экспорт
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Уведомление.Ссылка КАК Ссылка,
	|	Уведомление.Идентификатор КАК Идентификатор
	|ИЗ
	|	Документ.УведомлениеОбЭкспортеЕАЭСИСМПТК КАК Уведомление
	|ГДЕ
	|	Уведомление.Ссылка В(&МассивДокументов)
	|	И НЕ Уведомление.Идентификатор = """"
	|";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
			//ошибка, в документе нет идентификатора
			Продолжить;
		КонецЕсли;
		
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("Идентификатор",Выборка.Идентификатор);
		РезультатВыполненияНаСервере = ПолучитьСтатусУведомленияОбЭкспортеЕАЭС(ПараметрыДокумента, ДанныеПрофилей, ТокенАвторизации);
		
		//в зависимости от статуса обновляем статус в базе и при необходимости стираем/добавляем информацию об ошибках
		ОбновитьУведомлениеОбЭкспортеЕАЭСПоДаннымСервера(РезультатВыполненияНаСервере, Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

//Обновляет документ Уведомление об экспорте в ЕАЭС по данным сервера
Процедура ОбновитьУведомлениеОбЭкспортеЕАЭСПоДаннымСервера(РезультатВыполненияНаСервере, УведомлениеСсылка, ДополнительныеДанные = Неопределено)
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ЗаполнитьОшибкиДокумента(УведомлениеСсылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
		ТекстСообщения = НСтр("ru = 'При обновлении с сервера произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.УведомлениеОбЭкспортеЕАЭСИСМПТК'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		Возврат;
	Иначе
		//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
		ОчиститьОшибкиДокумента(УведомлениеСсылка);	
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатВыполненияНаСервере.ТекстОтвета);
		ОтветСервера   = ПрочитатьJSON(ЧтениеJSON);
		ДокументОбъект = УведомлениеСсылка.ПолучитьОбъект();
		НовыйСтатус    = Неопределено;
		НеобходимаЗаписьДокумента = Ложь;
		//Статус обработки документа в ИС МПТ со значениями:
		//- CHECKING -Проверяется 
		//- SENT -Отправлен в ГИС МТ
		//- WAITING_ACCEPTANCE - ожидает подтверждения
		//- ACCEPTED - Принят.
		//- ERROR – Обработкадокумента выполненас ошибкой. Конечный статус
		Если ОтветСервера.status = "CHECKING" Тогда
			//проверяется
			НовыйСтатус = Перечисления.СтатусыДокументовИСМПТК.Проверяется;
		ИначеЕсли ОтветСервера.status = "SENT" Тогда
			//успешно отправлен
			НовыйСтатус = Перечисления.СтатусыДокументовИСМПТК.Отправлен;
		ИначеЕсли ОтветСервера.status = "WAITING_ACCEPTANCE" Тогда
			//успешно отправлен
			НовыйСтатус = Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку;
		ИначеЕсли ОтветСервера.status = "ACCEPTED" Тогда
			//успешно отправлен
			НовыйСтатус = Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден;
		ИначеЕсли ОтветСервера.status = "ERROR" Тогда
			//выполнено с ошибкой, прочитать ошибки
			НовыйСтатус = Перечисления.СтатусыДокументовИСМПТК.Ошибка;
			ДокументОбъект.Ошибки.Очистить();
			Для каждого Ошибка Из ОтветСервера.errors Цикл
				КодОшибки    = Ошибка.errorCode;
				ТекстОшибки  = СокрЛП(Ошибка.errorMessage);
				ОшибкиСтрока = ДокументОбъект.Ошибки.Добавить();
				ОшибкиСтрока.Текст = СтрШаблон(НСтр("ru = 'Код ошибки %1: %2'"), КодОшибки, ТекстОшибки);
			КонецЦикла;
			НеобходимаЗаписьДокумента = Истина;
		КонецЕсли;
		
		Если НовыйСтатус <> ДокументОбъект.Статус ИЛИ НеобходимаЗаписьДокумента Тогда
			//провести документы
			ДокументОбъект.Статус = НовыйСтатус;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомлениеОбЭкспортеЕАЭСПоДаннымСервера'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СхемаВзаимногоПризнания

#Область УведомлениеОбОтгрузкеЕАЭС

Процедура ОбновитьУведомлениеОбОтгрузкеЕАЭС (Знач МассивДокументов, ДанныеПрофилей, ТокенАвторизации) Экспорт
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Уведомление.Ссылка КАК Ссылка,
	|	Уведомление.Идентификатор КАК Идентификатор
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеЕАЭСИСМПТК КАК Уведомление
	|ГДЕ
	|	Уведомление.Ссылка В(&МассивДокументов)
	|	И НЕ Уведомление.Идентификатор = """"
	|";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
			//ошибка, в документе нет идентификатора
			Продолжить;
		КонецЕсли;
		
		ДокументСервера = ПолучитьУведомлениеОбОтгрузкеЕАЭС(ДанныеПрофилей, Выборка.Идентификатор, ТокенАвторизации);
		ДокументОбъект = СоздатьОбновитьУведомлениеОбОтгрузкеЕАЭС(ДокументСервера, Выборка.Идентификатор, Выборка.Ссылка.ПолучитьОбъект());
		
		Попытка
			ДокументОбъект.Записать();
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			
			ТекстСообщения = НСтр(
			"ru = 'При обновлении документа возникла ошибка:
			|%1'");
			
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ПодробноеПредставлениеОшибки);
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДокументыУведомленийОбОтгрузкеЕАЭС(СтруктурнаяЕдиница, МассивДокументов, ТокенАвторизации) Экспорт
	
	СчетчикДокументы = 0;
	СчетчикДокументыОшибка = 0;
	
	Для Каждого ЗагружаемыйДокумент Из МассивДокументов Цикл 
		
		ДокументСервера = ПолучитьУведомлениеОбОтгрузкеЕАЭС(СтруктурнаяЕдиница, ЗагружаемыйДокумент.fileId, ТокенАвторизации);
		
		Если Не ДокументСервера = Неопределено Тогда
						
			ДокументОбъект = СоздатьОбновитьУведомлениеОбОтгрузкеЕАЭС(ДокументСервера, ЗагружаемыйДокумент.fileId);
			
			Попытка
				ДокументОбъект.Записать();
				СчетчикДокументов = СчетчикДокументов + 1;
			Исключение
				
				СчетчикДокументовОшибка = СчетчикДокументовОшибка + 1;
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				
				ТекстСообщения = НСтр(
				"ru = 'При обновлении документа возникла ошибка:
				|%1'");
				
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ПодробноеПредставлениеОшибки);
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИнтеграцияИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанных() Тогда
		//// Вывод сообщений о результатах операции ////
		Если Не СчетчикДокументы = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Обновлено по данным сервера: %1 Уведомления(-й) об отгрузке (ЕАЭС).'");
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СчетчикДокументы);
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Не СчетчикДокументыОшибка = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось обновить по данным сервера: %1 Уведомления(-й) об отгрузке (ЕАЭС).'");
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СчетчикДокументыОшибка);
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;	
		
		Если СчетчикДокументы = 0 И СчетчикДокументыОшибка = 0 Тогда
			ТекстСообщения = НСтр("ru = 'В указанном периоде нет Уведомлений об отгрузке (ЕАЭС), требующих синхронизации.'");
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		////////////////
	КонецЕсли;
	
КонецПроцедуры

//Описание АПИ: Метод позволяет получить документ Отгрузки по его идентификатору. 
//Метод получает на вход идентификатор документа отгрузки в ИС МПТ и возвращает структурированный документ. Метод синхронный.
//
Функция ПолучитьУведомлениеОбОтгрузкеЕАЭС(СтруктурнаяЕдиница, ИдентификаторДокумента, ТокенАвторизации) Экспорт
	
	АдресРесурса = "api/v3/true-api/documents/import/shipment/" + ИдентификаторДокумента;
	
	Заголовки = Новый Соответствие();
	
	ИнформацияОбОшибке = Неопределено;
	
	РезультатЗапроса = ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, , "GET", ТокенАвторизации);
	
	Если ЭтоОшибка(РезультатЗапроса, ИнформацияОбОшибке) Тогда
		ТекстСообщения = НСтр("ru = 'При обновлении с сервера произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.СоздатьОбновитьПолученныеДокументы'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(РезультатЗапроса.ТекстОтвета);
	СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
	
	Если СтруктураОтвета.Свойство("code") Тогда
		ТекстСообщения = НСтр("ru = 'При обновлении с сервера произошла ошибка: '") + СтруктураОтвета.code + Символы.ПС + СтруктураОтвета.errors;
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.ПолучитьУведомлениеОбОтгрузкеЕАЭС'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Функция создаёт либо обновляет документ Уведомление об отгрузки из ЕАЭС
// СтруктураДокумента - структура Документа полученная со стороны сервера ИС МПТ
// ИдентификаторДокумента - Идентификатор документа
//
Функция СоздатьОбновитьУведомлениеОбОтгрузкеЕАЭС(СтруктураДокумента, ИдентификаторДокумента, ДокументОбъектОтгрузка = Неопределено) Экспорт
	
	Если ДокументОбъектОтгрузка = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ
		|	УведомлениеОбОтгрузкеЕАЭСИСМПТК.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.УведомлениеОбОтгрузкеЕАЭСИСМПТК КАК УведомлениеОбОтгрузкеЕАЭСИСМПТК
		|ГДЕ
		|	УведомлениеОбОтгрузкеЕАЭСИСМПТК.Идентификатор = &Идентификатор";
		
		Запрос.УстановитьПараметр("Идентификатор", ИдентификаторДокумента);
		
		Результат = Запрос.Выполнить();
		
		ОбновитьДокумент = Не Результат.Пустой();
		
		Если Не ОбновитьДокумент Тогда 
			ДокументОбъектОтгрузка = Документы.УведомлениеОбОтгрузкеЕАЭСИСМПТК.СоздатьДокумент();
			ДокументОбъектОтгрузка.Дата = ТекущаяДата();
		Иначе 
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			ДокументОбъектОтгрузка = Выборка.Ссылка.ПолучитьОбъект();
			
		КонецЕсли;
		
	Иначе 
		ОбновитьДокумент = Истина;
	КонецЕсли;

	ДокументОбъектОтгрузка.Марки.Очистить();
	ДокументОбъектОтгрузка.ДокументыСоответствия.Очистить();
	ДокументОбъектОтгрузка.Ошибки.Очистить();
		
	//Заполним статус документа
	ДокументОбъектОтгрузка.Статус = ПолучитьСтатусУведомлениеОбОтгрузкеЕАЭСПоКоду(СтруктураДокумента.status);
	
	НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();
	
	//Коды идентификации переданные документом
	Для Каждого СтруктураКИ Из СтруктураДокумента.products Цикл 
		
		ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(СтруктураКИ.cis, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
		
		НоваяСтрокаКИ = ДокументОбъектОтгрузка.Марки.Добавить();
		НоваяСтрокаКИ.КодИдентификации = СтруктураКИ.cis;
		СтруктураКИ.Свойство("accepted", 	НоваяСтрокаКИ.Принят);
		СтруктураКИ.Свойство("productCost", НоваяСтрокаКИ.ЦенаЗаЕдиницу);
		СтруктураКИ.Свойство("productTax", 	НоваяСтрокаКИ.СуммаНДС);
		
		НайденнаяНоменклатура = Неопределено;
		
		НоваяСтрокаКИ.ВидУпаковки = ДанныеРазбора.ВидУпаковки;
		ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрокаКИ, ДанныеРазбора, НайденнаяНоменклатура);
		НоваяСтрокаКИ.Номенклатура = НайденнаяНоменклатура;
		
		Если НЕ НайденнаяНоменклатура.Пустая() Тогда
			НоваяСтрокаКИ.ВидПродукцииИС = ИнтеграцияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(НайденнаяНоменклатура);
		Иначе
			НоваяСтрокаКИ.ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка");
		КонецЕсли;
		
		НоваяСтрокаКИ.ИдентификаторСтроки = ДокументОбъектОтгрузка.Марки.Индекс(НоваяСтрокаКИ) + 1;
		НоваяСтрокаКИ.Количество = 1;
		
		Для Каждого  ДокументСоответствия Из СтруктураКИ.certificateDocumentData Цикл
			НоваяСтрока = ДокументОбъектОтгрузка.ДокументыСоответствия.Добавить();
			НоваяСтрока.ИдентификаторСтроки = НоваяСтрокаКИ.ИдентификаторСтроки;
			НоваяСтрока.ТипДокумента 		= ИнтерфейсИСМПТК.ВидДокументаСертификации(ДокументСоответствия.certificateType);
			НоваяСтрока.НомерДокумента 		= ДокументСоответствия.certificateNum;
			НоваяСтрока.ДатаДокумента 		= ДокументСоответствия.certificateDate;
		КонецЦикла;
		
	КонецЦикла;
	
	//Ошибки документа
	Если СтруктураДокумента.Свойство("documentErrors") Тогда 
		Для Каждого ОшибкаДокумента Из СтруктураДокумента.documentErrors Цикл
			
			НоваяСтрока = ДокументОбъектОтгрузка.Ошибки.Добавить();
			НоваяСтрока.КодОшибки		= ОшибкаДокумента.errorCode;
			НоваяСтрока.ОписаниеОшибки	= ОшибкаДокумента.errorDescription;
			
		КонецЦикла;
	КонецЕсли;
	
	//Если обновляем существующий документ в дальнейшем заполнении нет необходимости
	Если ОбновитьДокумент Тогда
		Возврат ДокументОбъектОтгрузка;
	КонецЕсли;
	
	СоответствияИдентификаторовИСсылок = НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(СтруктураДокумента.exporterInn, СтруктураДокумента.receiverInn);
	
	//Получатель
	Если Не СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц[СтруктураДокумента.receiverInn] = Неопределено Тогда 
		
		ДокументОбъектОтгрузка.Организация = СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц[СтруктураДокумента.receiverInn];
		ДокументОбъектОтгрузка.Получатель  = ДокументОбъектОтгрузка.Организация;
		ДокументОбъектОтгрузка.ПолучательНаименование = ДокументОбъектОтгрузка.Организация.Наименование;
		
	КонецЕсли;	
	ДокументОбъектОтгрузка.ПолучательИдентификационныйНомер = СтруктураДокумента.receiverInn;
	
	//Поставщик
	ИдентификационныеНомераКонтрагентов 	 = Новый Массив;
	ИдентификационныеНомераСтруктурныхЕдиниц = Новый Массив;
	ИдентификационныеНомераКонтрагентов.Добавить(СтруктураДокумента.exporterInn);
	ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(СтруктураДокумента.exporterInn);
	СоответствияИдентификаторовИСсылок = НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(ИдентификационныеНомераКонтрагентов, ИдентификационныеНомераСтруктурныхЕдиниц);
	// Заполнить ссылки на контрагентов. 
	СоответствияКонтрагентов      = СоответствияИдентификаторовИСсылок.СоответствияКонтрагентов;
	СоответствияСтруктурныхЕдиниц = СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц;
	Контрагент = Неопределено;
	Если Не СоответствияКонтрагентов.Количество() = 0 Тогда 
		Для Каждого ЭлементСоответствияКонтрагентов Из СоответствияКонтрагентов Цикл
			Идентификатор = ЭлементСоответствияКонтрагентов.Ключ;
			Контрагент	  = ЭлементСоответствияКонтрагентов.Значение;
		КонецЦикла;
	Иначе
		Для Каждого ЭлементСоответствияСтруктурныхЕдиниц Из СоответствияСтруктурныхЕдиниц Цикл
			Идентификатор = ЭлементСоответствияСтруктурныхЕдиниц.Ключ;
			Контрагент	  = ЭлементСоответствияСтруктурныхЕдиниц.Значение;
		КонецЦикла;
	КонецЕсли;
	
	ДокументОбъектОтгрузка.Поставщик  = Контрагент;
	ДокументОбъектОтгрузка.Контрагент = Контрагент;
		
	ДокументОбъектОтгрузка.ПоставщикНаименование 		   = СтруктураДокумента.senderName;
	ДокументОбъектОтгрузка.ПоставщикИдентификационныйНомер = СтруктураДокумента.exporterInn;
	
	ДокументОбъектОтгрузка.СтранаОтправитель = ИнтеграцияИСМПТКПереопределяемый.ПолучитьСтрануПоКоду(СтруктураДокумента.senderCountryCode);
	
	ДокументОбъектОтгрузка.НомерПервичногоДокумента = СтруктураДокумента.documentNum;
	ДокументОбъектОтгрузка.ДатаПервичногоДокумента 	= ПрочитатьДатуJSON(СтруктураДокумента.documentDate, ФорматДатыJSON.ISO);
	
	ДокументОбъектОтгрузка.ДатаОтгрузки  = ПрочитатьДатуJSON(СтруктураДокумента.transferDate, ФорматДатыJSON.ISO);
	ДокументОбъектОтгрузка.ДатаПолучения = ПрочитатьДатуJSON(СтруктураДокумента.receivedAt,   ФорматДатыJSON.ISO);  //Дата ИС МПТ
	Если СтруктураДокумента.Свойство("acceptanceDate") Тогда
		ДокументОбъектОтгрузка.ДатаПриемки = ПрочитатьДатуJSON(СтруктураДокумента.acceptanceDate, ФорматДатыJSON.ISO);
	КонецЕсли;
	
	ДокументОбъектОтгрузка.Идентификатор = ИдентификаторДокумента; 
	
	Возврат ДокументОбъектОтгрузка;
	
КонецФункции

Функция ПолучитьСтатусУведомлениеОбОтгрузкеЕАЭСПоКоду(КодСтатуса) Экспорт
	
	Если КодСтатуса = "IN_PROGRESS" Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.Проверяется;
	ИначеЕсли КодСтатуса = "CHECKED_NOT_OK" Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.ОшибкаПриОбработке;
	ИначеЕсли КодСтатуса = "ACCEPTED" Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден;
	ИначеЕсли КодСтатуса = "WAIT_ACCEPTANCE" Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку;
	ИначеЕсли КодСтатуса = "CHECKED_OK" Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.Оформлен;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область УведомлениеОПриемкеЕАЭС

Процедура ОбновитьУведомлениеОПриемкеЕАЭС (Знач МассивДокументов, ДанныеПрофилей, ТокенАвторизации) Экспорт
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Уведомление.Ссылка КАК Ссылка,
	|	Уведомление.Идентификатор КАК Идентификатор
	|ИЗ
	|	Документ.УведомлениеОПриемкеЕАЭСИСМПТК КАК Уведомление
	|ГДЕ
	|	Уведомление.Ссылка В(&МассивДокументов)
	|	И НЕ Уведомление.Идентификатор = """"
	|";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
			//ошибка, в документе нет идентификатора
			Продолжить;
		КонецЕсли;
		
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("Идентификатор",Выборка.Идентификатор);
		РезультатВыполненияНаСервере = ПолучитьСтатусДокументаИмпортаТоваровЕАЭС(ПараметрыДокумента, ДанныеПрофилей, ТокенАвторизации);
		
		//в зависимости от статуса обновляем статус в базе и при необходимости стираем/добавляем информацию об ошибках
		ОбновитьУведомлениеОПриемкеЕАЭСПоДаннымСервера(РезультатВыполненияНаСервере, Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

//Обновляет документ Уведомление об приемки в ЕАЭС по данным сервера
Процедура ОбновитьУведомлениеОПриемкеЕАЭСПоДаннымСервера(РезультатВыполненияНаСервере, УведомлениеСсылка, ДополнительныеДанные = Неопределено)
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ЗаполнитьОшибкиДокумента(УведомлениеСсылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
		ТекстСообщения = НСтр("ru = 'При обновлении с сервера произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.УведомлениеОПриемкеЕАЭСИСМПТК'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		Возврат;
	Иначе
		//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
		ОчиститьОшибкиДокумента(УведомлениеСсылка);	
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатВыполненияНаСервере.ТекстОтвета);
		СтруктураСтатус = ПрочитатьJSON(ЧтениеJSON);
		
		//В структуре присутствует статус
		Если СтруктураСтатус.Свойство("status") Тогда
			СтатусДокумента = СтруктураСтатус.status;
			//Кроме статуса есть ошибки
			Если СтруктураСтатус.Свойство("documentErrors") Тогда 
				Для каждого СтрокаОшибки Из СтруктураСтатус.documentErrors Цикл
					КодОшибки 	= СтрокаОшибки.errorCode;
					ТекстОшибки = СтрокаОшибки.errorDescription;
					ЕстьОшибки = Истина;
					ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + ТекстОшибки;
					ЗаполнитьОшибкиДокумента(УведомлениеСсылка, ТекстОшибки);
				КонецЦикла;
			КонецЕсли;
			
			ДокументОбъект = УведомлениеСсылка.ПолучитьОбъект();
			СтатусДокумента = ПолучитьСтатусДокументаУведомленияПоКоду(СтатусДокумента);
			
			Если СтатусДокумента <> ДокументОбъект.Статус Тогда
				//провести документы
				ДокументОбъект.Статус = СтатусДокумента;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
		Иначе
			
			КодОшибки 	= СтруктураСтатус.Code;
			ТекстОшибки = СтруктураСтатус.description;
			
			ТекстОшибки = КодОшибки + " - " + ТекстОшибки;
			
			ТекстСообщения = НСтр("ru = 'При получении информации сервер вернул ошибку: '") + Символы.ПС + ТекстОшибки;
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомленияОПриемкеТоваровЕАЭССПослеОтправки'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.УведомлениеОПриемкеЕАЭСИСМПТК'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьИсходящиеУведомленияОПриемкеТоваровЕАЭС(
	Знач МассивДокументов, 
	Знач УстанавливатьПодпись, 
	Знач ТипПодписи, 
	КоллекцияУведомлениеXML, 
	КоллекцияSignedContentXML) Экспорт
	
	КоллекцияУведомлениеXML = Новый Соответствие;
	КоллекцияSignedContentXML = Новый Соответствие;
	Для Каждого СсылкаУведомление Из МассивДокументов Цикл
		
		ОбъектДокумент = СсылкаУведомление.ПолучитьОбъект();
		УведомлениеXML = НовоеУведомлениеУведомленияОПриемкеТоваровЕАЭС(ОбъектДокумент);
		КоллекцияУведомлениеXML.Вставить(СсылкаУведомление, УведомлениеXML);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовоеУведомлениеУведомленияОПриемкеТоваровЕАЭС(Знач Уведомление)
	
	УведомлениеJSON = "";
	ЗаполнитьУведомленияОПриемкеТоваровЕАЭС(Уведомление, УведомлениеJSON);
	Возврат УведомлениеJSON;
	
КонецФункции

Процедура ЗаполнитьУведомленияОПриемкеТоваровЕАЭС(Знач Уведомление, УведомлениеJSON)
	
	ДанныеДляОтправки = Новый Структура;
	//шапка
	
	ДанныеДляОтправки.Вставить("shipment_id", 			Уведомление.ИдентификаторДокументаОтгрузки);
	ДанныеДляОтправки.Вставить("document_num", 			Уведомление.НомерПервичногоДокумента);
	ДанныеДляОтправки.Вставить("document_date",			Уведомление.ДатаПервичногоДокумента);
	ДанныеДляОтправки.Вставить("receiver_inn", 			Уведомление.ПолучательИдентификационныйНомер);
	ДанныеДляОтправки.Вставить("receiver", 				Уведомление.ПолучательНаименование);
	ДанныеДляОтправки.Вставить("exporter_taxpayer_id",  Уведомление.ПоставщикИдентификационныйНомер);
	ДанныеДляОтправки.Вставить("exporter_name",			Уведомление.ПоставщикНаименование);
	
	КодСтраны = ИнтеграцияИСМПТКПереопределяемый.ПолучитьКодСтраны(Уведомление.СтранаОтправитель);
	ДанныеДляОтправки.Вставить("sender_country_code", КодСтраны);
	
	ДанныеДляОтправки.Вставить("request_type", 	  "ACCEPTANCE");
	ДанныеДляОтправки.Вставить("acceptance_date", Уведомление.ДатаПриемки);
	ДанныеДляОтправки.Вставить("reject_all", 	  Уведомление.ОтклонитьВсеТовары);
	
	//данные о товарах
	МассивКИ = Новый Массив;
	
	Для каждого СтрокаМарки Из Уведомление.Марки Цикл
		
		СведенияОТоваре = Новый Структура;
		СведенияОТоваре.Вставить("cis", 	 СтрокаМарки.КодИдентификации);
		СведенияОТоваре.Вставить("accepted", СтрокаМарки.СтатусПриемки);
		
		МассивКИ.Добавить(СведенияОТоваре);
		
	КонецЦикла;
	
	ДанныеДляОтправки.Вставить("products", МассивКИ);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеДляОтправки);
	УведомлениеJSON = ЗаписьJSON.Закрыть();
	
КонецПроцедуры

Функция ОтправитьУведомленияОПриемкеТоваровЕАЭС(Знач КоллекцияДанныеКоллекцииДокументовXML, Знач КоллекцияПодписейИСМП, Знач ТокенАвторизации) Экспорт
	
	Результат = Неопределено;
	
	Для Каждого СгруппированныеДокументыXML Из КоллекцияПодписейИСМП Цикл
		
		СтруктурнаяЕдиница = СгруппированныеДокументыXML.Ключ;
		ДанныеКоллекцииДокументовXML = СгруппированныеДокументыXML.Значение;
		
		Если ТипЗнч(ДанныеКоллекцииДокументовXML) = Тип("Соответствие") Тогда
			КоллекцияДокументовXML = ДанныеКоллекцииДокументовXML;
		Иначе
			КоллекцияДокументовXML = ПолучитьИзВременногоХранилища(ДанныеКоллекцииДокументовXML);
		КонецЕсли;
		
		Результат = ОтправитьИсходящиеУведомленияОПриемкеТоваровЕАЭС(КоллекцияДокументовXML, Неопределено, СтруктурнаяЕдиница, ТокенАвторизации);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьИсходящиеУведомленияОПриемкеТоваровЕАЭС(Знач КоллекцияУведомленийXML, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации) Экспорт
	
	РезультатОтправки = Новый Соответствие;
	//обходим коллекцию документов
	Для Каждого ЭлементКоллекции Из КоллекцияУведомленийXML Цикл
		
		УведомлениеBase64   = ЭлементКоллекции.Значение.ДокументBase64;
		ПодписанныйДокумент = ЭлементКоллекции.Значение.ПодписанныйДокумент;
		
		Если ПодписанныйДокумент = "НеВыбран" Тогда 
			НомерДокумента = ЭлементКоллекции.Ключ.Номер;
			Текст = НСтр("ru = 'Документ № %1 был исключен из отправки, т.к. не был подписан ЭЦП.'");
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, НомерДокумента); 
			СообщениеПользователя = Новый СообщениеПользователю;
			СообщениеПользователя.Текст = ТекстСообщения;
			СообщениеПользователя.Сообщить();
			Продолжить;
		КонецЕсли;
		
		РезультатВыполненияНаСервере = ВыполнитьСозданиеУведомленияОПриемкеТоваровЕАЭС(УведомлениеBase64, ПодписанныйДокумент, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации);
		РезультатОтправки.Вставить(ЭлементКоллекции.Ключ, РезультатВыполненияНаСервере);
		
	КонецЦикла;
	
	ОбновитьУведомленияОПриемкеТоваровЕАЭСПослеОтправки(РезультатОтправки, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации);
	
	Возврат РезультатОтправки;
	
КонецФункции

Процедура ОбновитьУведомленияОПриемкеТоваровЕАЭСПослеОтправки(РезультатОтправкиДокументов, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации)
	
	Для Каждого РезультатОтправки Из РезультатОтправкиДокументов Цикл
		
		ИнформацияОбОшибке = Неопределено;
		ЕстьОшибки = Ложь;
		
		Если ЭтоОшибка(РезультатОтправки.Значение, ИнформацияОбОшибке) Тогда
			ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = НСтр("ru = 'При отправке уведомления на сервере произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомленияОПриемкеТоваровЕАЭССПослеОтправки'"), 
									 УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
			Продолжить;
		Иначе
			//проверяем ответ сервера на наличие ошибок валидации
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(РезультатОтправки.Значение.ТекстОтвета);
			ОтветСервера = ПрочитатьJSON(ЧтениеJSON);
			
			ОписаниеОшибок = "";
			ДокументПринят = Ложь;
			ИдентификаторНаСервере = "";
			
			Если ОтветСервера.Свойство("acceptionId") Тогда
				
				ДокументПринят = Истина;
				ИдентификаторНаСервере = ОтветСервера.acceptionId;
				
				Если ОтветСервера.Свойство("errors") Тогда 
					Для каждого СтрокаОшибки Из ОтветСервера.errors Цикл
						КодОшибки 	= СтрокаОшибки.errorCode;
						ТекстОшибки = СтрокаОшибки.errorMessage;
						Если КодОшибки <> "0" Тогда
							ЕстьОшибки = Истина;
							ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + ТекстОшибки;
							ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ТекстОшибки);
						КонецЕсли;
					КонецЦикла;
					
					ТекстСообщения = НСтр("ru = 'Документ был принят на сервере с ошибками: '") + Символы.ПС + ОписаниеОшибок;
					ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомленияОПриемкеТоваровЕАЭССПослеОтправки'"), 
											 УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				КонецЕсли;
				
			Иначе
				
				КодОшибки 	= ОтветСервера.Code;
				ТекстОшибки = ОтветСервера.errors;
				
				ТекстСообщения = НСтр("ru = 'Документ не был принят на сервере: '") + Символы.ПС + ТекстОшибки;
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомленияОПриемкеТоваровЕАЭССПослеОтправки'"), 
										 УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
					
			КонецЕсли;
				
			Если ДокументПринят Тогда 
				
				РезультатВыполнения = ПолучитьСтатусДокументаИмпортаТоваровЕАЭС(Новый Структура("Идентификатор", ИдентификаторНаСервере), СтруктурнаяЕдиница, ТокенАвторизации);
				СтатусДокумента = Неопределено;
				
				//Статус получить не удалось
				Если ЭтоОшибка(РезультатВыполнения, ИнформацияОбОшибке) Тогда
					ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ИнформацияОбОшибке.ПодробноеПредставление);
					ТекстСообщения = НСтр("ru = 'При получении информации об отправленном документе произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
					ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомленияОПриемкеТоваровЕАЭССПослеОтправки'"), 
											 УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				Иначе
					
					ЧтениеJSON = Новый ЧтениеJSON;
					ЧтениеJSON.УстановитьСтроку(РезультатВыполнения.ТекстОтвета);
					СтруктураСтатус = ПрочитатьJSON(ЧтениеJSON);
					
					//В структуре присутствует статус
					Если СтруктураСтатус.Свойство("status") Тогда
						СтатусДокумента = СтруктураСтатус.status;
						//Кроме статуса есть ошибки
						Если СтруктураСтатус.Свойство("documentErrors") Тогда 
							Для каждого СтрокаОшибки Из ОтветСервера.documentErrors Цикл
								КодОшибки 	= СтрокаОшибки.errorCode;
								ТекстОшибки = СтрокаОшибки.errorDescription;
								ЕстьОшибки = Истина;
								ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + ТекстОшибки;
								ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ТекстОшибки);
							КонецЦикла;
						КонецЕсли;
					Иначе
						
						КодОшибки 	= ОтветСервера.Code;
						ТекстОшибки = ОтветСервера.description;
						
						ТекстОшибки = КодОшибки + " - " + ТекстОшибки;
						
						ТекстСообщения = НСтр("ru = 'При получении информации сервер вернул ошибку: '") + Символы.ПС + ТекстОшибки;
						ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
						ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменИСМПТ.ОбновитьУведомленияОПриемкеТоваровЕАЭССПослеОтправки'"), 
												 УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
						
					КонецЕсли;
					
				КонецЕсли;
				
				Попытка
					ДокументОбъект = РезультатОтправки.Ключ.ПолучитьОбъект();
					Если ЗначениеЗаполнено(ИдентификаторНаСервере) Тогда
						ДокументОбъект.Идентификатор = ИдентификаторНаСервере;
					КонецЕсли;
					Статус = ПолучитьСтатусДокументаУведомленияПоКоду(СтатусДокумента);  //Перечисления.СтатусыДокументовИСМПТК.Проверяется
					Если Статус <> Неопределено Тогда
						ДокументОбъект.Статус = Статус;
					КонецЕсли;
					ДокументОбъект.Записать();
				Исключение
					//ОписаниеОшибки()
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиДокументПриемкиПоИдентификатору(ИдентификаторДокумента)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	УведомлениеОПриемкеЕАЭСИСМПТК.Ссылка КАК Ссылка,
	|	УведомлениеОПриемкеЕАЭСИСМПТК.Номер КАК Номер,
	|	УведомлениеОПриемкеЕАЭСИСМПТК.Представление КАК Представление,
	|	УведомлениеОПриемкеЕАЭСИСМПТК.ДатаВИСМПТ КАК ДатаВИСМПТ,
	|	УведомлениеОПриемкеЕАЭСИСМПТК.Идентификатор КАК Идентификатор
	|ИЗ
	|	Документ.УведомлениеОПриемкеЕАЭСИСМПТК КАК УведомлениеОПриемкеЕАЭСИСМПТК
	|ГДЕ
	|	УведомлениеОПриемкеЕАЭСИСМПТК.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", ИдентификаторДокумента);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеДокумента = Новый Структура();
		ДанныеДокумента.Вставить("Номер", Выборка.Номер);
		ДанныеДокумента.Вставить("Дата",  Выборка.ДатаВИСМПТ);
		ДанныеДокумента.Вставить("Представление", Выборка.Представление);
		ДанныеДокумента.Вставить("Ссылка", 		  Выборка.Ссылка);
		
		Возврат ДанныеДокумента;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

//Метод получает массив документов из ИС МПТ по заданному параметру:
//- только Уведомление о приемке товаров ЕАЭС 
//- только Уведомление об отгрузке товаров ЕАЭС
//- оба уведомления сразу
Функция ПолучитьМассивДокументовИмпортаВзаимноеПризнание(СтруктурнаяЕдиница, ТипДокумента = "EAS_CROSSBORDER_GROUP", ДатаНачала, ДатаОкончания, ТокенАвторизации) Экспорт
	
	ИнформацияОбОшибке = Неопределено;
	
	РезультатЗапроса = ЭлектронноеВзаимодействиеССервисамиМаркировка.ПолучитьМассивДокументовИмпортаВзаимноеПризнание(СтруктурнаяЕдиница, ТипДокумента, ДатаНачала, ДатаОкончания, ТокенАвторизации);
	
	Если ЭтоОшибка(РезультатЗапроса, ИнформацияОбОшибке) Тогда
		ТекстСообщения = НСтр("ru = 'При обновлении с сервера произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.ПолучитьМассивДокументовИмпортаВзаимноеПризнание'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(РезультатЗапроса.ТекстОтвета);
	СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
	
	Если СтруктураОтвета.Свойство("code") Тогда
		ТекстСообщения = НСтр("ru = 'При обновлении с сервера произошла ошибка: '") + СтруктураОтвета.code + Символы.ПС + СтруктураОтвета.errors;
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.СоздатьОбновитьПолученныеДокументы'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураОтвета.Свойство("documents") Тогда
		Возврат СтруктураОтвета.documents;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#Область ИСМПТ_МетодыAPI

// Создание POST outgoing-documents/formal
Функция ВыполнитьСозданиеАктаПриемаПередачи(Знач АктBase64, ПодписанныйАкт, НомерДокумента, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации)
		
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("content",   СтрЗаменить(СтрЗаменить(АктBase64, Символы.ВК, ""),Символы.ПС,""));
	ПараметрыЗапроса.Вставить("signature", ПодписанныйАкт);
	ПараметрыЗапроса.Вставить("type", "1000");
	ПараметрыЗапроса.Вставить("for_approval", "true");
	ПараметрыЗапроса.Вставить("number", НомерДокумента);
	
	Разделитель = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	ТекстОтправки = "";
	Для каждого Параметр Из ПараметрыЗапроса Цикл
		ДобавитьПараметрВТелоЗапроса(ТекстОтправки, Параметр.Ключ, Параметр.Значение, Разделитель);
	КонецЦикла;
	ТекстОтправки = Лев(ТекстОтправки, СтрДлина(ТекстОтправки)-2) + "--" + Символы.ВК + Символы.ПС;
	
	АдресРесурса = "api/v3/true-api/edo-api/outgoing-documents/formal";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + Разделитель);
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ТекстОтправки,, ТокенАвторизации);
	
КонецФункции

// Создание титула POST /edo-api/incoming-documents/{documentId}/events/{decision}
Функция ВыполнитьСозданиеТитулаДляПодписи(ИдентификаторДокумента, Принять, ДанныеПрофилей, Версия, СтруктурнаяЕдиница = Неопределено)
	
	Действие = ?(Принять, "approve", "reject");
	АдресРесурса = СтрШаблон("api/v3/true-api/edo-api/incoming-documents/%1/events/%2", ИдентификаторДокумента, Действие);
	Заголовки = Новый Соответствие();
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница,,, ДанныеПрофилей);
	
КонецФункции

// Подписание титула POST /edo-api/incoming-documents/{documentId}/events/{decision}/signature
Функция ВыполнитьПодписаниеТитула(ИдентификаторДокумента, Принять, ПодписанныйТитул, ДанныеПрофилей, Версия, СтруктурнаяЕдиница = Неопределено)
	
	Действие = ?(Принять, "approve", "reject");
	АдресРесурса = СтрШаблон("api/v3/true-api/edo-api/incoming-documents/%1/events/%2/signature", ИдентификаторДокумента, Действие);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "text/plain");
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ПодписанныйТитул,, ДанныеПрофилей);
	
КонецФункции

// Создание титула (Отзыв акта поставщиком) POST /edo-api/outgoing-documents/{documentId}/events/withdraw
Функция ВыполнитьСозданиеТитулаДляОтзыва(ИдентификаторДокумента, ТокенАвторизации, Версия, СтруктурнаяЕдиница = Неопределено)
	
	АдресРесурса = СтрШаблон("api/v3/true-api/edo-api/outgoing-documents/%1/events/withdraw", ИдентификаторДокумента);
	Заголовки = Новый Соответствие();
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница,,, ТокенАвторизации);
	
КонецФункции

// Подписание титула (Отзыв акта поставщиком) POST /edo-api/outgoing-documents/{documentId}/events/signature
Функция ВыполнитьПодписаниеТитулаДляОтзыва(ИдентификаторДокумента, ПодписанныйТитул, ТокенАвторизации, Версия, СтруктурнаяЕдиница = Неопределено)
	
	АдресРесурса = СтрШаблон("api/v3/true-api/edo-api/outgoing-documents/%1/events/signature", ИдентификаторДокумента);
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "text/plain");
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ПодписанныйТитул,, ТокенАвторизации);
	
КонецФункции

// получение акта с сервера
// входящие - GET incoming-documents/{documentId}/base64
// исходящие - GET outgoing-documents/{documentId}/base64
Функция ПолучитьДокументСервера(Параметры, СтруктурнаяЕдиница, ТокенАвторизации) Экспорт
	
	Если Параметры.Исходящий Тогда
		ВидДокумента = "outgoing-documents";
	Иначе
		ВидДокумента = "incoming-documents";
	КонецЕсли;
	АдресРесурса = СтрШаблон("api/v3/true-api/edo-api/%1/%2/base64", ВидДокумента, Параметры.Идентификатор);
	Заголовки = Новый Соответствие();
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, , "GET", ТокенАвторизации);
	
КонецФункции

// получения содержимого прочих документов
// GET /documents/{document_id}/info
Функция ПолучитьУведомленияВводаВывода(Параметры, СтруктурнаяЕдиница, ТокенАвторизации) Экспорт
	
	АдресРесурса = СтрШаблон("api/v3/true-api/documents/%1/info", Параметры.Идентификатор);
	Заголовки = Новый Соответствие();
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, , "GET", ТокенАвторизации);
	
КонецФункции

// получения содержимого прочих документов
// GET /documents/{document_id}/info
Функция ПолучитьСтатусУведомленияОбЭкспортеЕАЭС(Параметры, СтруктурнаяЕдиница, ТокенАвторизации) Экспорт
	
	АдресРесурса = СтрШаблон("api/v3/true-api/edo-api/shipments/%1/status", Параметры.Идентификатор);
	Заголовки = Новый Соответствие();
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, , "GET", ТокенАвторизации);
	
КонецФункции

// получения содержимого прочих документов
// GET documents/import/status/
Функция ПолучитьСтатусДокументаИмпортаТоваровЕАЭС(Параметры, СтруктурнаяЕдиница, ТокенАвторизации) Экспорт
	
	АдресРесурса = СтрШаблон("api/v3/true-api/documents/import/status/%1", Параметры.Идентификатор);
	Заголовки = Новый Соответствие();
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, , "GET", ТокенАвторизации);
	
КонецФункции

// получение входящих актов с сервера GET /edo-api/incoming-documents
// 
Функция ПолучитьСписокВходящихДокументов(Параметры, СтруктурнаяЕдиница, ТокенАвторизации = Неопределено) Экспорт
	
	Возврат ЭлектронноеВзаимодействиеССервисамиМаркировка.ПолучитьСписокВходящихДокументов(Параметры, СтруктурнаяЕдиница, ТокенАвторизации);
	
КонецФункции

// получение исходящих актов с сервера GET /edo-api/outgoing-documents
// 
Функция ПолучитьСписокИсходящихДокументов(Параметры, СтруктурнаяЕдиница, ТокенАвторизации = Неопределено) Экспорт
	
	Возврат ЭлектронноеВзаимодействиеССервисамиМаркировка.ПолучитьСписокИсходящихДокументов(Параметры, СтруктурнаяЕдиница, ТокенАвторизации);
	
КонецФункции

// получение документом уведомление о ввозе из третьих стран (Импорт) с сервера GET /doc/listV2
// 
Функция ПолучитьСписокДокументовИмпорта(Параметры, СтруктурнаяЕдиница, ТокенАвторизации = Неопределено) Экспорт
	
	Возврат ЭлектронноеВзаимодействиеССервисамиМаркировка.ПолучитьСписокДокументовИмпорта(Параметры, СтруктурнаяЕдиница, ТокенАвторизации);
	
КонецФункции

// Создание уведомления POST /documents/edo/discrepancy
Функция ВыполнитьСозданиеУведомленияОРасхождении(Знач УведомлениеBase64, ПодписанныйДокумент, НомерДокумента, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации)
	                                                                                	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("content",   СтрЗаменить(СтрЗаменить(УведомлениеBase64, Символы.ВК, ""),Символы.ПС,""));
	ПараметрыЗапроса.Вставить("signature", ПодписанныйДокумент);
	ПараметрыЗапроса.Вставить("type", "1005");
	ПараметрыЗапроса.Вставить("for_approval", "true");
	ПараметрыЗапроса.Вставить("number", НомерДокумента);
	
	Разделитель = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	ТекстОтправки = "";
	Для каждого Параметр Из ПараметрыЗапроса Цикл
		ДобавитьПараметрВТелоЗапроса(ТекстОтправки, Параметр.Ключ, Параметр.Значение, Разделитель);
	КонецЦикла;
	ТекстОтправки = Лев(ТекстОтправки, СтрДлина(ТекстОтправки)-2) + "--" + Символы.ВК + Символы.ПС;
	
	АдресРесурса = "api/v3/true-api/edo-api/outgoing-documents/formal"; //вынести в отдельную процедуру
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + Разделитель);
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ТекстОтправки,, ТокенАвторизации);
	
КонецФункции

Функция ВыполнитьСозданиеУведомленияОВВО(Знач УведомлениеBase64, ПодписанныйДокумент, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации)
	
	АдресРесурса = "api/v3/true-api/documents/transit/introduce-goods/create"; //вынести в отдельную процедуру
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("document",   СтрЗаменить(СтрЗаменить(УведомлениеBase64, Символы.ВК, ""),Символы.ПС,""));
	ПараметрыЗапроса.Вставить("signature", ПодписанныйДокумент);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапроса);
	ТекстОтправки = ЗаписьJSON.Закрыть();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ТекстОтправки, , ТокенАвторизации);
	
КонецФункции

Функция ВыполнитьСозданиеУведомленияОВИО(Знач УведомлениеBase64, ПодписанныйДокумент, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации)
	
	АдресРесурса = "api/v3/true-api/documents/writeOff"; //вынести в отдельную процедуру
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("document",   СтрЗаменить(СтрЗаменить(УведомлениеBase64, Символы.ВК, ""),Символы.ПС,""));
	ПараметрыЗапроса.Вставить("signature", ПодписанныйДокумент);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапроса);
	ТекстОтправки = ЗаписьJSON.Закрыть();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ТекстОтправки, , ТокенАвторизации);
	
КонецФункции

// Отклонение уведомления POST /documents/edo/discrepancy/reject
Функция ВыполнитьОтклонениеУведомленияОРасхождении(ИдентификаторДокумента, ТокенАвторизации, СтруктурнаяЕдиница = Неопределено)
	
	АдресРесурса = СтрШаблон("api/v3/true-api/edo-api/incoming-documents/%1/events/reject", ИдентификаторДокумента);
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница,,, ТокенАвторизации);
	
КонецФункции

// Создание POST outgoing-documents/formal
Функция ВыполнитьСозданиеУведомленияОВвозеИзЕАЭС(Знач ДокументBase64, ПодписанныйДокумент, НомерДокумента, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации)
		
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("content",   СтрЗаменить(СтрЗаменить(ДокументBase64, Символы.ВК, ""),Символы.ПС,""));
	ПараметрыЗапроса.Вставить("signature", ПодписанныйДокумент);
	//ПараметрыЗапроса.Вставить("type", "1000");
	//ПараметрыЗапроса.Вставить("for_approval", "true");
	//ПараметрыЗапроса.Вставить("number", НомерДокумента);
	//
	Разделитель = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	ТекстОтправки = "";
	Для каждого Параметр Из ПараметрыЗапроса Цикл
		ДобавитьПараметрВТелоЗапроса(ТекстОтправки, Параметр.Ключ, Параметр.Значение, Разделитель);
	КонецЦикла;
	ТекстОтправки = Лев(ТекстОтправки, СтрДлина(ТекстОтправки)-2) + "--" + Символы.ВК + Символы.ПС;
	
	АдресРесурса = "api/v3/true-api/edo-api/outgoing-documents/formal";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + Разделитель);
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ТекстОтправки,, ТокенАвторизации);
	
КонецФункции

// Создание POST outgoing-documents/formal
Функция ВыполнитьСозданиеУведомленияОВвозеИзТретьихСтран(Знач ДокументBase64, ПодписанныйДокумент, НомерДокумента, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации)
		
	//ПараметрыЗапроса = Новый Структура;
	//ПараметрыЗапроса.Вставить("content",   СтрЗаменить(СтрЗаменить(ДокументBase64, Символы.ВК, ""),Символы.ПС,""));
	//ПараметрыЗапроса.Вставить("signature", ПодписанныйДокумент);
	//
	//Разделитель = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	//ТекстОтправки = "";
	//Для каждого Параметр Из ПараметрыЗапроса Цикл
	//	ДобавитьПараметрВТелоЗапроса(ТекстОтправки, Параметр.Ключ, Параметр.Значение, Разделитель);
	//КонецЦикла;
	//ТекстОтправки = Лев(ТекстОтправки, СтрДлина(ТекстОтправки)-2) + "--" + Символы.ВК + Символы.ПС;
	//
	//АдресРесурса = "api/v3/true-api/documents/transit/import/third_countries";
	//
	//Заголовки = Новый Соответствие();
	//Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + Разделитель);
	
	АдресРесурса = "api/v3/true-api/documents/transit/import/third_countries"; //вынести в отдельную процедуру
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("document",   СтрЗаменить(СтрЗаменить(ДокументBase64, Символы.ВК, ""),Символы.ПС,""));
	ПараметрыЗапроса.Вставить("signature", ПодписанныйДокумент);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапроса);
	ТекстОтправки = ЗаписьJSON.Закрыть();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ТекстОтправки,, ТокенАвторизации);
	
КонецФункции

// Создание POST edo-api/shipments
Функция ВыполнитьСозданиеУведомленияОбЭкспортеЕАЭС(Знач ДокументBase64, ПодписанныйДокумент, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации)
	
	АдресРесурса = "api/v3/true-api/edo-api/shipments";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("document",  СтрЗаменить(СтрЗаменить(ДокументBase64, Символы.ВК, ""),Символы.ПС,""));
	ПараметрыЗапроса.Вставить("signature", ПодписанныйДокумент);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапроса);
	ТекстОтправки = ЗаписьJSON.Закрыть();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ТекстОтправки, , ТокенАвторизации);
	
КонецФункции

// Создание POST edo-api/shipments
Функция ВыполнитьСозданиеУведомленияОПриемкеТоваровЕАЭС(Знач ДокументBase64, ПодписанныйДокумент, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации)
	
	АдресРесурса = "api/v3/true-api/documents/import/acceptancies";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("document",  СтрЗаменить(СтрЗаменить(ДокументBase64, Символы.ВК, ""),Символы.ПС,""));
	ПараметрыЗапроса.Вставить("signature", ПодписанныйДокумент);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапроса);
	ТекстОтправки = ЗаписьJSON.Закрыть();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ТекстОтправки, , ТокенАвторизации);
	
КонецФункции

// Выполняет метод веб-сервиса ИС МПТ с авторизацией 
//
// Параметры:
//  АдресРесурса - Строка - URL адрес метода, который необходимо выполнить.
//  ДополнительныеЗаголовки - Соответсвтие - Заголовки запроса, в дополнение к заголовку авторизации Bearer
//  СтруктурнаяЕдиница - Организация - Организация для получения токена
//  ТелоЗапроса - Строка - Тело запроса, которое нужно установить в метод
//  Метод - Строка - Метод выполнения запроса (POST / GET)
//
// Возвращаемое значение:
//  Структура - Структура с кодом состояния и результатом операции
//
Функция ВыполнитьМетодСервера(АдресРесурса, ДополнительныеЗаголовки, СтруктурнаяЕдиница, ТелоЗапроса = Неопределено, Метод = "POST", ТокенАвторизации = Неопределено)
	
	ПараметрыПодключения = ИнтеграцияИСМПТККлиентСервер.ПараметрыОтправкиHTTPЗапросов_ИСМП(Неопределено, Истина);
	HTTPСоединение = Новый HTTPСоединение(
		ПараметрыПодключения.Сервер,
		ПараметрыПодключения.Порт, 
		, 
		, 
		,	
		0,
		Новый ЗащищенноеСоединениеOpenSSL(,));
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", ТокенАвторизации));
	Если ЗначениеЗаполнено(ДополнительныеЗаголовки) Тогда
		Для каждого Заголовок Из ДополнительныеЗаголовки Цикл
			Заголовки.Вставить(Заголовок.Ключ, Заголовок.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.АдресРесурса = АдресРесурса;
	HTTPЗапрос.Заголовки = Заголовки;
	Если ЗначениеЗаполнено(ТелоЗапроса) Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	
	Попытка
		
		Если Метод = "POST" Тогда
			HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		Иначе
			HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
		КонецЕсли; 
		
		КодСостояния = HTTPОтвет.КодСостояния;
		ТекстОтвета = СокрЛП(HTTPОтвет.ПолучитьТелоКакСтроку());
		
	Исключение
		
		Если HTTPОтвет = Неопределено Тогда
			ОписаниеОшибкиHTTP = НСтр("ru = 'Превышен таймаут ожидания ответа от сервера'");
		Иначе
			ОписаниеОшибкиHTTP = ОписаниеОшибки();
		КонецЕсли;
		
		ОшибкаСоединения = НСтр(
			"ru = 'При установке соединения с возникла ошибка:
			|%ТекстОшибки%'");
		
		ОшибкаСоединения = СтрЗаменить(ОшибкаСоединения, "%ТекстОшибки%", ОписаниеОшибкиHTTP);
		
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ОшибкаСоединения);
		
		ТекстОтвета = "";
		КодСостояния = Неопределено;
		
	КонецПопытки;
	
	Возврат Новый Структура("КодСостояния, ТекстОтвета", КодСостояния, ТекстОтвета);
	
КонецФункции

// Выполняет метод веб-сервиса ИСМП.
//
// Параметры:
//  ТекстМетода - Строка - Текст метода, который необходимо выполнить.
//  ИмяВебСервиса - Строка - Имя веб-сервиса, метод которого необходимо вызвать.
//
// Возвращаемое значение:
//  Строка - Результат выполения метода.
//
Функция ВыполнитьМетодВебСервисаИСМП_POST(Знач ТекстМетода, Знач ИмяВебСервиса, Знач АдресРесурса, КодСостояния) Экспорт
		HTTPСоединение = Новый HTTPСоединение(
				АдресРесурса, 
				, 
				, 
				, 
				,    
				, 
				,			
				Новый ЗащищенноеСоединениеOpenSSL(,));
			
		HTTPЗапрос = Новый HTTPЗапрос();                                                         
		HTTPЗапрос.АдресРесурса	= ИмяВебСервиса;
		                                       
		Заголовки = Новый Соответствие();
		Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
		
		HTTPЗапрос.Заголовки = Заголовки;
		HTTPЗапрос.УстановитьТелоИзСтроки(ТекстМетода, "UTF-8");
		
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);	
		
		КодСостояния = HTTPОтвет.КодСостояния;
		ТекстОтвета = СокрЛП(HTTPОтвет.ПолучитьТелоКакСтроку());
	
	Возврат ТекстОтвета;
	
КонецФункции

Функция ВыполнитьМетодВебСервисаИСМП_GET(Знач ТекстМетода = "", Знач ИмяВебСервиса, Знач АдресРесурса, КодСостояния) Экспорт
    HTTPСоединение = Новый HTTPСоединение(
    АдресРесурса,
    ,
    ,
    ,
    ,    
    ,
    ,          
    Новый ЗащищенноеСоединениеOpenSSL(,));

    Заголовки = Новый Соответствие();
    Заголовки.Вставить("Content-Type", "application/json");
    ЗапросHTTP = Новый HTTPЗапрос(ИмяВебСервиса, Заголовки);
    
    ОтветHTTP = HTTPСоединение.Получить(ЗапросHTTP);
    КодСостояния = ОтветHTTP.КодСостояния;
    ТекстОтвета = СокрЛП(ОтветHTTP.ПолучитьТелоКакСтроку());
        
    Возврат ТекстОтвета;
         
КонецФункции

#КонецОбласти 

Процедура ОбновитьДокументыИСМПТ(Параметры, ДанныеПрофилей, СписокТокеновАвторизации = Неопределено) Экспорт
	
	Для Каждого СгруппированныеАкты Из Параметры.КоллекцияСгруппированныхДокументовИСМПТ Цикл
		
		ТокенАвторизации = СписокТокеновАвторизации.Получить(СгруппированныеАкты.Ключ);
		СтруктурнаяЕдиница = СгруппированныеАкты.Ключ;
		СгруппированныйМассивДокументов = СгруппированныеАкты.Значение;
		
		ТолькоОбновитьСтатус = Ложь;
		Параметры.Свойство("ТолькоОбновитьСтатус", ТолькоОбновитьСтатус);
		
		Если ТолькоОбновитьСтатус Тогда
			Если Параметры.ТипДокументаИСМПТ = "АктПриемаПередачиИСМПТК"
				Или Параметры.ТипДокументаИСМПТ = "УведомлениеОРасхожденииИСМПТК"
				Или Параметры.ТипДокументаИСМПТ = "УведомлениеОВвозеИзЕАЭСИСМПТК" Тогда
				ОбновитьСтатусыДокументовПередачи(СгруппированныйМассивДокументов, СтруктурнаяЕдиница, Параметры.ТипДокументаИСМПТ, ТокенАвторизации);
			ИначеЕсли Параметры.ТипДокументаИСМПТ = "УведомлениеОВыводеИзОборотаИСМПТК"
				ИЛИ Параметры.ТипДокументаИСМПТ = "УведомлениеОВводеВОборотИСМПТК" 
				ИЛИ Параметры.ТипДокументаИСМПТ = "УведомлениеОВвозеИзТретьихСтранИСМПТК"Тогда
				ОбновитьСтатусыУведомлениеОВводеВыводе(СгруппированныйМассивДокументов, Параметры.ТипДокументаИСМПТ, СтруктурнаяЕдиница, ТокенАвторизации);
			ИначеЕсли Параметры.ТипДокументаИСМПТ = "УведомлениеОбЭкспортеЕАЭСИСМПТК" Тогда
				ОбновитьУведомлениеОбЭкспортеЕАЭС(СгруппированныйМассивДокументов, СтруктурнаяЕдиница, ТокенАвторизации);
			ИначеЕсли Параметры.ТипДокументаИСМПТ = "УведомлениеОПриемкеЕАЭСИСМПТК" Тогда
				ОбновитьУведомлениеОПриемкеЕАЭС(СгруппированныйМассивДокументов, СтруктурнаяЕдиница, ТокенАвторизации);
			ИначеЕсли Параметры.ТипДокументаИСМПТ = "УведомлениеОбОтгрузкеЕАЭСИСМПТК" Тогда
				ОбновитьУведомлениеОбОтгрузкеЕАЭС(СгруппированныйМассивДокументов, СтруктурнаяЕдиница, ТокенАвторизации);
			КонецЕсли;
		Иначе
			Если Параметры.ТипДокументаИСМПТ = "АктПриемаПередачиИСМПТК" Тогда
				ОбновитьАктыПП(СгруппированныйМассивДокументов, СтруктурнаяЕдиница, ТокенАвторизации);
			ИначеЕсли Параметры.ТипДокументаИСМПТ = "УведомлениеОРасхожденииИСМПТК" Тогда
				ОбновитьУведомлениеПоИдентификатору(СгруппированныйМассивДокументов, СтруктурнаяЕдиница, ТокенАвторизации);
			ИначеЕсли Параметры.ТипДокументаИСМПТ = "УведомлениеОВыводеИзОборотаИСМПТК" ИЛИ Параметры.ТипДокументаИСМПТ = "УведомлениеОВводеВОборотИСМПТК" Тогда
				ОбновитьУведомлениеОВводеВыводе(СгруппированныйМассивДокументов, Параметры.ТипДокументаИСМПТ, СтруктурнаяЕдиница, ТокенАвторизации);
			ИначеЕсли Параметры.ТипДокументаИСМПТ = "УведомлениеОВвозеИзЕАЭСИСМПТК" Тогда
				ОбновитьУведомлениеОВвозеИзЕАЭС(СгруппированныйМассивДокументов, СтруктурнаяЕдиница, ТокенАвторизации);
			ИначеЕсли Параметры.ТипДокументаИСМПТ = "УведомлениеОВвозеИзТретьихСтранИСМПТК" Тогда
				ОбновитьУведомлениеОВвозеИзТретьихСтран(СгруппированныйМассивДокументов, СтруктурнаяЕдиница, ТокенАвторизации);
			ИначеЕсли Параметры.ТипДокументаИСМПТ = "УведомлениеОбЭкспортеЕАЭСИСМПТК" Тогда
				ОбновитьУведомлениеОбЭкспортеЕАЭС(СгруппированныйМассивДокументов, СтруктурнаяЕдиница, ТокенАвторизации);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

//Отклоняет входящие документ(Акт ПП и УОР)
//
Функция ОтклонитьВходящиеДокументыИСМПТ_СозданиеТитулов(ТипДокументаИСМПТ, НоваяКоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации) Экспорт
	
	Если ТипДокументаИСМПТ = "АктПриемаПередачиИСМПТК" Тогда
		Возврат ОтклонитьАктыПП_СозданиеТитулов(НоваяКоллекцияСгруппированныхДокументовИСМПТ, Неопределено, СписокТокеновАвторизации);
	ИначеЕсли ТипДокументаИСМПТ = "УведомлениеОРасхожденииИСМПТК" Тогда
		Возврат ОтклонитьУведомление_СозданиеТитулов(НоваяКоллекцияСгруппированныхДокументовИСМПТ, Неопределено, СписокТокеновАвторизации);
	КонецЕсли;
	
КонецФункции

Функция ОтклонитьВходящиеДокументыИСМПТ_ПодписьТитуловЗавершение(ТипДокументаИСМПТ, НоваяКоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации) Экспорт
	
	Если ТипДокументаИСМПТ = "АктПриемаПередачиИСМПТК" Тогда
		Возврат ОтклонитьАктыПП_ПодписьТитуловЗавершение(НоваяКоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДокументыИСМПТ(ПараметрыВыгрузки, ДополнительныеПараметры) Экспорт
	
	МассивПрофилейИСМПТСДатойСинхронизации = ДополнительныеПараметры.МассивПрофилейИСМПТСДатойСинхронизации;
	
	ТекстСообщения = НСтр("ru = 'Начат обмен данными.'");
	ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	
	Для каждого СтруктураПрофиляСинхронизации Из МассивПрофилейИСМПТСДатойСинхронизации Цикл
		
		СтруктурнаяЕдиница = СтруктураПрофиляСинхронизации.СтруктурнаяЕдиница;
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ДатаНачалаВыгрузки",    СтруктураПрофиляСинхронизации.ДатаНачалаСинхронизацииВходящихДокументовИСМПТ);
		ПараметрыЗапроса.Вставить("ДатаОкончанияВыгрузки", СтруктураПрофиляСинхронизации.ДатаОкончанияСинхронизацииИСМПТ);
		
		Если СтруктураПрофиляСинхронизации.ВидыДокументов = "Акты" Тогда
			//входящие документы
			РезультатВыполненияНаСервере = ПолучитьСписокВходящихДокументов(ПараметрыЗапроса, СтруктурнаяЕдиница, СтруктураПрофиляСинхронизации.ТокенАвторизации);
			СоздатьОбновитьПолученныеДокументы(СтруктурнаяЕдиница, РезультатВыполненияНаСервере, Ложь, СтруктураПрофиляСинхронизации.ТокенАвторизации);
			//исходящие документы
			РезультатВыполненияНаСервере = ПолучитьСписокИсходящихДокументов(ПараметрыЗапроса, СтруктурнаяЕдиница, СтруктураПрофиляСинхронизации.ТокенАвторизации);
			СоздатьОбновитьПолученныеДокументы(СтруктурнаяЕдиница, РезультатВыполненияНаСервере, Истина, СтруктураПрофиляСинхронизации.ТокенАвторизации);
			
		ИначеЕсли СтруктураПрофиляСинхронизации.ВидыДокументов = "УведомленияОВвозе" Тогда
			РезультатВыполненияНаСервере = ПолучитьСписокИсходящихДокументов(ПараметрыЗапроса, СтруктурнаяЕдиница, СтруктураПрофиляСинхронизации.ТокенАвторизации);
			ПолучитьДокументыУведомлениеОВвозеИзЕАЭС(СтруктурнаяЕдиница, РезультатВыполненияНаСервере, Истина, СтруктураПрофиляСинхронизации.ТокенАвторизации);
			
		ИначеЕсли СтруктураПрофиляСинхронизации.ВидыДокументов = "УведомленияОВвозеИмпорт" Тогда
			РезультатВыполненияНаСервере = ПолучитьСписокДокументовИмпорта(ПараметрыЗапроса, СтруктурнаяЕдиница, СтруктураПрофиляСинхронизации.ТокенАвторизации);
			ПолучитьДокументыУведомлениеОВвозеИзТретьихСтран(СтруктурнаяЕдиница, РезультатВыполненияНаСервере, Истина, СтруктураПрофиляСинхронизации.ТокенАвторизации);
			
		ИначеЕсли СтруктураПрофиляСинхронизации.ВидыДокументов = "УведомленияОбОтгрузке" Тогда
			РезультатВыполненияНаСервере = ПолучитьМассивДокументовИмпортаВзаимноеПризнание(СтруктурнаяЕдиница, "EAS_CROSSBORDER", 
					ПараметрыЗапроса.ДатаНачалаВыгрузки, ПараметрыЗапроса.ДатаОкончанияВыгрузки, СтруктураПрофиляСинхронизации.ТокенАвторизации);
					
			Если Не РезультатВыполненияНаСервере = Неопределено Тогда
				ПолучитьДокументыУведомленийОбОтгрузкеЕАЭС(СтруктурнаяЕдиница, РезультатВыполненияНаСервере, СтруктураПрофиляСинхронизации.ТокенАвторизации);
			КонецЕсли;
					
		КонецЕсли;
		
		//уменьшаем на одну секундку, чтобы не потерять документы
		ПараметрДата = СтруктураПрофиляСинхронизации.ДатаОкончанияСинхронизацииИСМПТ - 1;
		ИнтеграцияИСМПТК.СохранитьПараметрыМетода(
			СтруктурнаяЕдиница, 
			ИнтеграцияИСМПТК.ИмяМетодаДляВидаДокументов(СтруктураПрофиляСинхронизации.ВидыДокументов),
			Перечисления.НаправленияДокументовИСМПТК.ПустаяСсылка(), 
			"create_from", 
			ПараметрДата);
		
	КонецЦикла;
		
	ТекстСообщения = НСтр("ru = 'Обмен данными завершен.'");
	ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	
КонецФункции

Функция СоздатьОбновитьПолученныеДокументы(СтруктурнаяЕдиница, РезультатВыполненияНаСервере, ЭтоИсходящиеДокументы = Ложь, ТокенАвторизации = Неопределено)
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ТекстСообщения = НСтр("ru = 'При обновлении с сервера произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменИСМПТ.СоздатьОбновитьПолученныеДокументы'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		Возврат 0;
	КонецЕсли;
	
	//новый массив загружаемых документов
	Направление = ?(ЭтоИсходящиеДокументы = Истина, Перечисления.НаправленияДокументовИСМПТК.Исходящий, Перечисления.НаправленияДокументовИСМПТК.Входящий);
	ТекстОтвета = РезультатВыполненияНаСервере.ТекстОтвета;
	МассивАктов = НовыйМассивЗагружаемыхДокументов(ТекстОтвета, СтруктурнаяЕдиница, Направление);
	
	МассивСтарыхДокументов = Новый Массив;
	Для каждого ДокументОбъект Из МассивАктов Цикл
		Если ДокументОбъект.Ссылка.Пустая() Тогда
			ДокументОбъект.Записать();
		Иначе
			КопияДокумента = ДокументОбъект.Скопировать();
			Если КопияДокумента.Марки.Количество() = 0 Тогда
				КопияДокумента.Марки.Загрузить(ДокументОбъект.Марки.Выгрузить());
			КонецЕсли;
			ИсходныйНовый = Новый Структура;
			ИсходныйНовый.Вставить("ИсходныйОбъект", КопияДокумента);
			ИсходныйНовый.Вставить("ОбновленныйОбъект", ДокументОбъект);
			МассивСтарыхДокументов.Добавить(ИсходныйНовый);
		КонецЕсли;
	КонецЦикла;
	
	СчетчикДокументы = 0;
	СчетчикДокументыОшибка = 0;
	
	Для каждого ДокументОбъект Из МассивАктов Цикл
		
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("Исходящий", ЭтоИсходящиеДокументы);
		ПараметрыДокумента.Вставить("Идентификатор", ДокументОбъект.Идентификатор);
		РезультатВыполненияНаСервере = ПолучитьДокументСервера(ПараметрыДокумента, СтруктурнаяЕдиница, ТокенАвторизации);
		Успешно = Ложь;
		ОбновитьАктПоДаннымСервера(РезультатВыполненияНаСервере, ДокументОбъект.Ссылка, Неопределено, Успешно);
		Если Успешно Тогда
			СчетчикДокументы = СчетчикДокументы + 1;
		Иначе
			СчетчикДокументыОшибка = СчетчикДокументыОшибка + 1;
		КонецЕсли;		
	КонецЦикла;
	
	Если ИнтеграцияИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанных() Тогда
		//// Вывод сообщений о результатах операции ////
		Если Не СчетчикДокументы = 0 Тогда
			Если ЭтоИсходящиеДокументы Тогда
				ТекстСообщения = НСтр("ru = 'Обновлено по данным сервера: %1 Акта(-ов) приема/передачи (отправленный).'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Обновлено по данным сервера: %1 Акта(-ов) приема/передачи (полученный).'");
			КонецЕсли;
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СчетчикДокументы);
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Не СчетчикДокументыОшибка = 0 Тогда
			Если ЭтоИсходящиеДокументы Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось обновить по данным сервера: %1 Акта(-ов) приема/передачи (отправленный).'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось обновить по данным сервера: %1 Акта(-ов) приема/передачи (полученный).'");
			КонецЕсли;
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СчетчикДокументыОшибка);
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если СчетчикДокументы = 0 И СчетчикДокументыОшибка = 0 Тогда
			Если ЭтоИсходящиеДокументы Тогда
				ТекстСообщения = НСтр("ru = 'В указанном периоде нет Актов приема/передачи (отправленных), требующих синхронизации.'");
			Иначе
				ТекстСообщения = НСтр("ru = 'В указанном периоде нет Актов приема/передачи (полученных), требующих синхронизации.'");
			КонецЕсли;
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		////////////////
	КонецЕсли;
	
	ВосстановитьСсылочныеРеквизитыДокументов(МассивСтарыхДокументов);
	//БМ_ИСМПТ ТРЕБУЕТСЯ_РАССМОТРЕНИЕ Получение УОР: Временный вариант для получения уведомлений о расхождении
	ПолучитьДокументыУведомлениеОРасхождении(СтруктурнаяЕдиница, ТекстОтвета, ЭтоИсходящиеДокументы, ТокенАвторизации);
	
КонецФункции

Функция НовыйМассивЗагружаемыхДокументов(Знач ОтветСервера, Знач СтруктурнаяЕдиница, НаправлениеДокумента)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСервера);
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON);
	
	Если ОбъектXDTO.count = 0 Тогда
		//в ответе вернулся пустой список
		Возврат Новый Массив;
	КонецЕсли;
	
	МассивИдентификаторов = Новый Массив;
	СоответствиеНомерам = Новый Соответствие;
	//ТипЗнч(ОбъектXDTO.items.items) = Тип("СписокXDTO")
	//ТипЗнч(ОбъектXDTO.items.items) = Тип("ОбъектXDTO")
	Если ТипЗнч(ОбъектXDTO.items.items) = Тип("СписокXDTO") Тогда
		Для каждого ЭлементСписка Из ОбъектXDTO.items.items Цикл
			//пропускаем элементы с типом 1005 - УОР
			Если ЭлементСписка.type <> 1000 И ЭлементСписка.type <> 1100 Тогда
				Продолжить;
			КонецЕсли;
			МассивИдентификаторов.Добавить(ЭлементСписка.id);
			ДанныеДокумента = Новый Структура("Номер, Дата, Статус, Тип", ЭлементСписка.number, ЭлементСписка.date, ЭлементСписка.status, ЭлементСписка.type);
			СоответствиеНомерам.Вставить(ЭлементСписка.id, ДанныеДокумента);
		КонецЦикла;
	Иначе
		ЭлементСписка = ОбъектXDTO.items.items;
		Если ЭлементСписка.type = 1000 ИЛИ ЭлементСписка.type = 1100 Тогда
			МассивИдентификаторов.Добавить(ЭлементСписка.id);
			ДанныеДокумента = Новый Структура("Номер, Дата, Статус, Тип", ЭлементСписка.number, ЭлементСписка.date, ЭлементСписка.status, ЭлементСписка.type);
			СоответствиеНомерам.Вставить(ЭлементСписка.id, ДанныеДокумента);
		КонецЕсли;
	КонецЕсли;
	
	СуществующиеДокументы = Новый Соответствие;
	// Заполнить соответствие пустыми ссылками.
	ПустаяСсылка = Документы.АктПриемаПередачиИСМПТК.ПустаяСсылка();
	Для Каждого ЭлементМассива Из МассивИдентификаторов Цикл
		СуществующиеДокументы.Вставить(ЭлементМассива, ПустаяСсылка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктПриемаПередачиИСМПТ.Ссылка КАК НайденнаяСсылка,
	|	АктПриемаПередачиИСМПТ.Идентификатор КАК Идентификатор
	|ИЗ
	|	Документ.АктПриемаПередачиИСМПТК КАК АктПриемаПередачиИСМПТ
	|ГДЕ
	|	АктПриемаПередачиИСМПТ.Идентификатор В(&Идентификаторы)";
	
	Запрос.УстановитьПараметр("Идентификаторы", МассивИдентификаторов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СуществующиеДокументы.Вставить(Выборка.Идентификатор, Выборка.НайденнаяСсылка);
	КонецЦикла;
	
	МассивДокументов = Новый Массив;
	Для Каждого ЭлементКоллекции Из СуществующиеДокументы Цикл
		
		Идентификатор = ЭлементКоллекции.Ключ;
		Ссылка = ЭлементКоллекции.Значение;
		Если Ссылка.Пустая() Тогда
			НовыйДокумент = Документы.АктПриемаПередачиИСМПТК.СоздатьДокумент();
			
			НовыйДокумент.Дата = ТекущаяДатаСеанса();
			НовыйДокумент.Идентификатор = Идентификатор;
			
			ДанныеДокумента = СоответствиеНомерам.Получить(Идентификатор);
			
			НовыйДокумент.НомерИСМПТ = ДанныеДокумента.Номер;
			НовыйДокумент.ДатаВИСМПТ = Дата(1970,1,1,0,0,0) + ДанныеДокумента.Дата;
			НовыйДокумент.ТипАкта = ?(ДанныеДокумента.Тип = 1000, Перечисления.ВидыДокументаИСМПТК.Исходный, Перечисления.ВидыДокументаИСМПТК.Исправленный);
		
			Статус = ПолучитьСтатусДокументаПоКоду(ДанныеДокумента.Статус);
			
			Если Статус <> Неопределено Тогда
				НовыйДокумент.Статус = Статус;
			КонецЕсли;
			
			НовыйДокумент.Направление = НаправлениеДокумента;
			
			ТекущийПользователь = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь();
			
			НовыйДокумент.Автор = ТекущийПользователь;
			НовыйДокумент.Организация = СтруктурнаяЕдиница;
			
			МассивДокументов.Добавить(НовыйДокумент);
		Иначе
			МассивДокументов.Добавить(Ссылка.ПолучитьОбъект());
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

Функция ЭтоОшибка(РезультатОперации, ИнформацияОбОшибке = Неопределено) Экспорт
	
	//БМ_ИСМПТ ТРЕБУЕТСЯ_РАССМОТРЕНИЕ Доработать вывод ошибок в зависимости от кода и содержания (см. API)
	ИнформацияОбОшибке = Новый Структура("ПодробноеПредставление");
	КодСостояния = РезультатОперации.КодСостояния;
	Результат = Истина;
	Если КодСостояния = 200 ИЛИ КодСостояния = 201 ИЛИ КодСостояния = 202 Тогда
		//коды успешного выполнения запроса
		Результат = Ложь;
	ИначеЕсли КодСостояния = 400 Тогда
		ОбработатьОшибкиJSON(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	ИначеЕсли КодСостояния = 401 Тогда
		ОбработатьОшибкиXML(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	ИначеЕсли КодСостояния = 402 Тогда
		ИнформацияОбОшибке.ПодробноеПредставление = нСтр("ru='Ошибка в атрибутивном составе тела запроса (Код 402)'", "ru");
		Результат = Истина;
	ИначеЕсли КодСостояния = 403 Тогда
		ОбработатьОшибкиJSON(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	ИначеЕсли КодСостояния = 404 Тогда
		ОбработатьОшибкиJSON(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	ИначеЕсли КодСостояния = 409 Тогда
		ИнформацияОбОшибке.ПодробноеПредставление = нСтр("ru='Запрос не может быть выполнен из-за конфликтного обращения к ресурсу (Код 409)'", "ru");
		Результат = Истина;
	ИначеЕсли КодСостояния = 410 Тогда
		ИнформацияОбОшибке.ПодробноеПредставление = нСтр("ru='Ресурс ранее был доступен по указанному URL, но сейчас он удалён и недоступен (Код 410)'", "ru");
		Результат = Истина;
	ИначеЕсли КодСостояния = 413 Тогда
		ОбработатьОшибкиJSON(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	ИначеЕсли КодСостояния = 500 Тогда
		ОбработатьОшибкиJSON(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	ИначеЕсли КодСостояния = 503 Тогда
		ОбработатьОшибкиJSON(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	ИначеЕсли КодСостояния = 504 Тогда
		ОбработатьОшибкиJSON(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	ИначеЕсли КодСостояния = 418 Тогда
		ОбработатьОшибкиJSON(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	Иначе
		//Неизвестный код состояния ответа сервиса
		ИнформацияОбОшибке.ПодробноеПредставление = СтрШаблон(нСтр("ru='Неизвестный код состояния ответа сервера - %1, текст ответа - %2'", "ru"), КодСостояния, РезультатОперации.ТекстОтвета);
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьОшибкиJSON(ТекстОшибки, ИнформацияОбОшибке)
	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТекстОшибки);
		
		Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение НСтр("ru = 'Не получен ответ от сервера (ошибка 404).'");
		КонецЕсли;
		
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON);
		
		//Проверим на варианты заполнения
		Если Не ОбъектXDTO.Свойства().Получить("error_message") = Неопределено Тогда
			ИнформацияОбОшибке.ПодробноеПредставление = ОбъектXDTO.error_message;
		ИначеЕсли Не ОбъектXDTO.Свойства().Получить("description") = Неопределено Тогда
			ИнформацияОбОшибке.ПодробноеПредставление = ОбъектXDTO.description;
		ИначеЕсли Не ОбъектXDTO.Свойства().Получить("description") = Неопределено Тогда
			ИнформацияОбОшибке.ПодробноеПредставление = ОбъектXDTO.description;
		Иначе
			ПредставлениеОшибки = ИнформацияОбОшибке();
			ИнформацияОбОшибке.ПодробноеПредставление = НСтр("ru='Ошибка при чтении: '", "ru") + ПредставлениеОшибки.Описание;
		КонецЕсли;
		
	Исключение
		ПредставлениеОшибки = ИнформацияОбОшибке();
		ИнформацияОбОшибке.ПодробноеПредставление = НСтр("ru='Ошибка при чтении: '", "ru") + ПредставлениеОшибки.Описание;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьОшибкиXML(ТекстОшибки, ИнформацияОбОшибке)
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстОшибки);
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		Если СтрНайти(ТекстОшибки,"InvalidTokenException") <> 0 Тогда
			ИнформацияОбОшибке.ПодробноеПредставление = СтрШаблон(нСтр("ru='Ошибка токена: %1'", "ru"), ОбъектXDTO.error);
		ИначеЕсли СтрНайти(ТекстОшибки,"UnauthorizedException") <> 0 Тогда
			ИнформацияОбОшибке.ПодробноеПредставление = СтрШаблон(нСтр("ru='Ошибка доступа: %1 (%2)'", "ru"), ОбъектXDTO.error, ОбъектXDTO.error_description);
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке.ПодробноеПредставление = нСтр("ru='Ошибка при чтении ответа сервера: '", "ru") + ИнформацияОбОшибке();
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьСтатусДокументаПоКоду(КодСтатуса)
	
	Если КодСтатуса = 0 Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.Черновик;
	ИначеЕсли КодСтатуса = 1 Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.Отправлен;
	ИначеЕсли КодСтатуса = 2 Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.Новое;
	ИначеЕсли КодСтатуса = 3 
		ИЛИ КодСтатуса = "WAITING_ACCEPTANCE" Тогда //Увед.об экспорте
		Возврат Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку;
	ИначеЕсли КодСтатуса = 4 
		ИЛИ КодСтатуса = "ACCEPTED" Тогда //Увед.об экспортеТогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден;
	ИначеЕсли КодСтатуса = 5 Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.Отклонен;
	ИначеЕсли КодСтатуса = 8 Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.НаСогласовании;
	ИначеЕсли КодСтатуса = 10   //АПП и УОР
		ИЛИ КодСтатуса = "ERROR" Тогда	//Увед.об экспорте
		Возврат Перечисления.СтатусыДокументовИСМПТК.Ошибка;
	ИначеЕсли КодСтатуса = 16 Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.Отозван;
	ИначеЕсли КодСтатуса = 17 Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.Аннулирован;
	//БМ_ИСМПТ ТРЕБУЕТСЯ_РАССМОТРЕНИЕ	Новый код статуса 20 (в ЛК - Обработка документа)
	ИначеЕсли КодСтатуса = 20	//АПП и УОР 
		ИЛИ КодСтатуса = "SENT" Тогда	//Увед.об экспорте
		Возврат Перечисления.СтатусыДокументовИСМПТК.Отправлен;
	ИначеЕсли КодСтатуса = "CHECKING" Тогда	//Увед.об экспорте
		Возврат Перечисления.СтатусыДокументовИСМПТК.Проверяется;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтатусДокументаУведомленияПоКоду(КодСтатуса)
	
	Если КодСтатуса = "IN_PROGRESS" Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.Проверяется;
	ИначеЕсли КодСтатуса = "CHECKED_OK" Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.Оформлен;
	ИначеЕсли КодСтатуса = "CHECKED_NOT_OK" Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.ОшибкаПриПроверке;
	ИначеЕсли КодСтатуса = "PROCESSING_ERROR" Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.ОшибкаПриОбработке;
	ИначеЕсли КодСтатуса = "UNDEFINED" Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.НеОпределен;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Обновляет статус в документе
Процедура ОбновитьСтатусДокумента(СсылкаНаДокумент, НовыйСтатус)
	
	Если Не ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
		ДокументОбъект.Статус = НовыйСтатус;
		ДокументОбъект.Записать();
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр(
		"ru = 'При обновлении статуса документа возникла ошибка:
		|%1'");
		
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ПодробноеПредставлениеОшибки);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
		
КонецПроцедуры

Функция ПолучитьПространствоИменИСМПТ()
	
	АдресаСерверовИСМПТ = ИнтеграцияИСМПТКВызовСервера.ПолучитьАдресаСерверовИСМПТ();
	АдресИСМПТ = ИнтеграцияИСМПТКВызовСервера.ПроверитьНаличиеПротоколаВАдресе(АдресаСерверовИСМПТ.АдресИСМПТ);
	АдресСУЗ   = ИнтеграцияИСМПТКВызовСервера.ПроверитьНаличиеПротоколаВАдресе(АдресаСерверовИСМПТ.АдресСУЗ);
	
	//пространство имен в схемах не должно зависеть от адреса стенда
	//БМ_ИСМПТ ТРЕБУЕТСЯ_РАССМОТРЕНИЕ Возможно следует удалить обращения к текущим адресам стенда и СУЗа
	АдресИСМПТ = "https://stage.ismet.kz/";
	Возврат АдресИСМПТ;
	
КонецФункции

Функция ТекстЗапросаСгруппироватьПоСтруктурнымЕдиницамСУЗ(ТипДокумента)
	
	Возврат "ВЫБРАТЬ
	|	ДокГруппировки.Организация КАК СтруктурнаяЕдиница,
	|	ДокГруппировки.Ссылка КАК ДокументСУЗ
	|ИЗ
	|	Документ." + ТипДокумента + " КАК ДокГруппировки
	|ГДЕ
	|	ДокГруппировки.Ссылка В(&МассивДокументовСУЗ)
	|ИТОГИ ПО
	|	СтруктурнаяЕдиница";
	
КонецФункции

#КонецОбласти

#Область ПроверкаДокументов

// См. ИнтеграцияИСМПТККлиент.ПроверитьИсходящиеДокументыИСМПТ().
Процедура ПроверитьИсходящиеДокументыИСМПТ(Знач МассивИсходящихДокументов) Экспорт
	
	Если ТипЗнч(МассивИсходящихДокументов) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СсылкаДокумент Из МассивИсходящихДокументов Цикл
		
		РезультатПроверки = "";
		ТекстСообщения    = "";
		
		// ИС МПТ
		Если ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда
			
			РезультатПроверки = ПроверитьАПП(СсылкаДокумент);
						
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК") Тогда
			
			РезультатПроверки = ПроверитьУведомлениеОВвозеИЗЕАЭС(СсылкаДокумент);
						
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК") Тогда
			
			РезультатПроверки = ПроверитьУведомлениеОВвозеИзТретьихСтран(СсылкаДокумент);
						
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСМПТК") Тогда
			
			РезультатПроверки = ПроверитьУведомлениеОВыводеИзОборота(СсылкаДокумент);
						
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") Тогда
			
			РезультатПроверки = ПроверитьУведомлениеОРасхождении(СсылкаДокумент);
						
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСМПТК") Тогда
			
			РезультатПроверки = ПроверитьУведомлениеОВводеВОборот(СсылкаДокумент);
						
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОбЭкспортеЕАЭСИСМПТК") Тогда
			
			РезультатПроверки = ПроверитьУведомлениеОбЭкспортеЕАЭСИСМПТК(СсылкаДокумент);
						
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОПриемкеЕАЭСИСМПТК") Тогда
			
			РезультатПроверки = ПроверитьУведомлениеОПриемкеЕАЭСИСМПТК(СсылкаДокумент);
						
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.АгрегацияКодовМаркировкиСУЗИСМПТК") Тогда
			
			РезультатПроверки = ПроверитьАгрегацияКодовМаркировкиСУЗИСМПТК(СсылкаДокумент);
				
		// СУЗ
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК") Тогда
			
			РезультатПроверки = ПроверитьЗаказНаЭмиссиюКодовМаркировкиСУЗ(СсылкаДокумент);
					
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.НанесениеКодовМаркировкиСУЗИСМПТК") Тогда
			
			РезультатПроверки = ПроверитьНанесениеКодовМаркировкиСУЗ(СсылкаДокумент);
					
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			ТекстСообщения = ТекстСообщенияПоРезультатуПроверкиДокументаИСМПТ(СсылкаДокумент, РезультатПроверки);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, СсылкаДокумент);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПустойРезультатПроверкиДокументИСМПТ() Экспорт
	
	РезультатПроверки = Новый Структура;
	
	РезультатПроверки.Вставить("УведомительныеОшибки", Новый Массив);
	РезультатПроверки.Вставить("ЗапрещающиеОшибки",    Новый Массив);
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура ПроверитьТаблицуТовары(ОбъектДокумент, ТаблицаТоваров, НаименованиеТабличнойЧасти, СтруктураРеквизитов, НаименованияРеквизитов, РезультатПроверки) Экспорт
	
	Запрос = Новый Запрос;
	
	РеквизитыДляПроверки = "";
	Для каждого Реквизит Из СтруктураРеквизитов Цикл
		РеквизитыДляПроверки = РеквизитыДляПроверки + Реквизит.Значение + Символы.ПС;
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДокументИСМПТТовары.НомерСтроки,"
	+ РеквизитыДляПроверки + ""
	+ "
	|	&НаименованиеТабличнойЧасти
	|ПОМЕСТИТЬ ВТ_ДокументИСМПТТовары
	|ИЗ
	|	&ТаблицаТовары КАК ДокументИСМПТТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ *
	|ИЗ
	|	ВТ_ДокументИСМПТТовары КАК ВТ_ДокументИСМПТТовары";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТоваров);
	Запрос.УстановитьПараметр("НаименованиеТабличнойЧасти", НаименованиеТабличнойЧасти);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Для каждого Реквизит Из СтруктураРеквизитов Цикл
			
			Если НаименованиеТабличнойЧасти = "Товары"
				И НЕ ЗначениеЗаполнено(Выборка[Реквизит.Ключ]) Тогда
				
				ТекстСообщения = НСтр("ru = 'D. %2. Не заполнено %3 в строке №%1.'"); 
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
					ТекстСообщения, Выборка.НомерСтроки, НаименованиеТабличнойЧасти, НаименованияРеквизитов[Реквизит.Ключ]);
				
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьТаблицуМарки(ОбъектДокумент, ТаблицаМарки, НаименованиеТабличнойЧасти, СтруктураРеквизитов, РезультатПроверки) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДокументИСМПТМарки.НомерСтроки,"
	
	+ СтруктураРеквизитов.Количество + ""
	+ СтруктураРеквизитов.Код + ""
	+ СтруктураРеквизитов.GTIN + ""
	+ "
	|	&НаименованиеТабличнойЧасти
	|ПОМЕСТИТЬ ВТ_ДокументИСМПТМарки
	|ИЗ
	|	&ТаблицаМарки КАК ДокументИСМПТМарки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ *
	|ИЗ
	|	ВТ_ДокументИСМПТМарки КАК ВТ_ДокументИСМПТМарки";
	
	Запрос.УстановитьПараметр("ТаблицаМарки", ТаблицаМарки);
	Запрос.УстановитьПараметр("НаименованиеТабличнойЧасти", НаименованиеТабличнойЧасти);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НеЗаполненКИ = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Если НаименованиеТабличнойЧасти = "Марки" 
			И НЕ ЗначениеЗаполнено(Выборка.КодИдентификации)
			И НЕ НеЗаполненКИ Тогда
			
			ТекстСообщения = НСтр("ru = 'D. %2. Присутствуют строки с не заполненным Кодом идентификации.'"); 
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, НаименованиеТабличнойЧасти);
			
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			
			НеЗаполненКИ = Истина;
			
		КонецЕсли;
		
		Если НаименованиеТабличнойЧасти = "Марки"
			И НЕ ЗначениеЗаполнено(Выборка.Количество) Тогда
			
			ТекстСообщения = НСтр("ru = 'D. %2. Не заполнено Количество подобранных кодов для Кода идентификации %1.'"); 
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.КодИдентификации, НаименованиеТабличнойЧасти);
			
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если НаименованиеТабличнойЧасти = "Марки"
			И НЕ ЗначениеЗаполнено(Выборка.GTIN) Тогда
			
			ТекстСообщения = НСтр("ru = 'D. %2. Не заполнен GTIN, вложенный для Кода идентификации %1.'"); 
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.КодИдентификации, НаименованиеТабличнойЧасти);
			
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Дополнительная проверка на монотоварность
	
	ТаблицаПроверки = ТаблицаМарки.Скопировать(,"ВидПродукцииИС");
	ТаблицаПроверки.Свернуть("ВидПродукцииИС");
	ОбнаруженоТГ = 0;
	Для Каждого Строка Из ТаблицаПроверки Цикл
		Если ЗначениеЗаполнено(Строка.ВидПродукцииИС) Тогда  //если вид продукции пустой, не обращаем внимание на эту строку
			ОбнаруженоТГ = ОбнаруженоТГ + 1;
		КонецЕсли;
	КонецЦикла;
	Если ОбнаруженоТГ > 1 Тогда
		ТекстСообщения = НСтр("ru = 'D. %2. Таблица содержит коды, относящиеся к разным товарным группам! Документ должен быть монотоварным.'"); 
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, НаименованиеТабличнойЧасти);
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьТаблицуДокументыСоответствия(ТаблицаДокументыСоответствия, НаименованиеТабличнойЧасти, СтруктураРеквизитов, РезультатПроверки) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДокументИСМПТ.НомерСтроки";
	
	Для Каждого Реквизит Из СтруктураРеквизитов Цикл 
		Запрос.Текст = Запрос.Текст + ",
		| ДокументИСМПТ." + Реквизит.Ключ;
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|ПОМЕСТИТЬ ВТ_ДокументИСМПТ
	|ИЗ
	|	&ТаблицаДок КАК ДокументИСМПТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ *
	|ИЗ
	|	ВТ_ДокументИСМПТ КАК ВТ_ДокументИСМПТ";
	
	Запрос.УстановитьПараметр("ТаблицаДок", ТаблицаДокументыСоответствия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НеЗаполненныеРеквизиты = "";
		
		Для Каждого Реквизит Из СтруктураРеквизитов Цикл
			Если НЕ ЗначениеЗаполнено(Выборка[Реквизит.Ключ]) Тогда
				НеЗаполненныеРеквизиты = НеЗаполненныеРеквизиты + Реквизит.Значение + ", ";
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НеЗаполненныеРеквизиты) Тогда
			ТекстСообщения = НСтр("ru = 'D. Документы соответствия. В строке %1 не заполнено: %2.'"); 
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, Сред(НеЗаполненныеРеквизиты,1,СтрДлина(НеЗаполненныеРеквизиты)-2));
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстСообщенияПоРезультатуПроверкиДокументаИСМПТ(Знач СсылкаДокумент, Знач РезультатПроверки) Экспорт
	
	ТекстСообщения = "";
	
	ЗапрещающиеОшибки    = РезультатПроверки.ЗапрещающиеОшибки.Количество() > 0;
	УведомительныеОшибки = РезультатПроверки.УведомительныеОшибки.Количество() > 0;
	
	Если ЗапрещающиеОшибки Тогда
		Для Каждого Ошибка Из РезультатПроверки.ЗапрещающиеОшибки Цикл
			ТекстСообщения = ТекстСообщения + СокрЛП(Ошибка) + Символы.ПС;
		КонецЦикла;		
	КонецЕсли;
	
	Если УведомительныеОшибки Тогда
		Для Каждого Ошибка Из РезультатПроверки.УведомительныеОшибки Цикл
			ТекстСообщения = ТекстСообщения + СокрЛП(Ошибка) + Символы.ПС;
		КонецЦикла;		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстСообщения) Тогда
		
		ТекстСообщения = НСтр(
		"ru = '------------------------------------------------------------------------------------------------------
		|Ошибок не обнаружено при проверке документа ""%1"".'");
		
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СсылкаДокумент);
		
	ИначеЕсли ЗапрещающиеОшибки Тогда 
		
		ЗаголовокСообщения = НСтр(
		"ru = '------------------------------------------------------------------------------------------------------
		|Обнаружены ошибки при проверке документа ""%1"":'");
		
		ЗаголовокСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ЗаголовокСообщения, СсылкаДокумент);
		
		ТекстСообщения = ЗаголовокСообщения + Символы.ПС + ТекстСообщения;
		ТекстСообщения = СокрЛП(ТекстСообщения);		
		ТекстСообщения = ТекстСообщения + Символы.ПС;
		
	ИначеЕсли УведомительныеОшибки Тогда
		//Если ошибки не мешают отправке, оповещаем об этом в "мягкой" форме, чтобы не вызывать недопонимания у пользователя.
		ЗаголовокСообщения = НСтр(
		"ru = '------------------------------------------------------------------------------------------------------
		|Ошибок не обнаружено, документ ""%1"" готов к отправке. Следует обратить внимание:'");
		
		ЗаголовокСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ЗаголовокСообщения, СсылкаДокумент);
		
		ТекстСообщения = ЗаголовокСообщения + Символы.ПС + ТекстСообщения;
		ТекстСообщения = СокрЛП(ТекстСообщения);		
		ТекстСообщения = ТекстСообщения + Символы.ПС;
		
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ПроверитьДокументИСМПТ(СсылкаДокумент) Экспорт
	
	Если ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда
		
		Возврат ПроверитьАПП(СсылкаДокумент);
		
	ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСМПТК") Тогда
		
		Возврат ПроверитьУведомлениеОВводеВОборот(СсылкаДокумент);
		
	ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК") Тогда
		
		Возврат ПроверитьУведомлениеОВвозеИЗЕАЭС(СсылкаДокумент);
		
	ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК") Тогда
		
		Возврат ПроверитьУведомлениеОВвозеИзТретьихСтран(СсылкаДокумент);
		
	ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСМПТК") Тогда
		
		Возврат ПроверитьУведомлениеОВыводеИзОборота(СсылкаДокумент);
		
	ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") Тогда
		
		Возврат ПроверитьУведомлениеОРасхождении(СсылкаДокумент);
		
	ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.АгрегацияКодовМаркировкиСУЗИСМПТК") Тогда
		
		Возврат ПроверитьАгрегацияКодовМаркировкиСУЗИСМПТК(СсылкаДокумент);
		
	ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОбЭкспортеЕАЭСИСМПТК") Тогда
		
		Возврат ПроверитьУведомлениеОбЭкспортеЕАЭСИСМПТК(СсылкаДокумент);
		
	ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОПриемкеЕАЭСИСМПТК") Тогда
		
		Возврат ПроверитьУведомлениеОПриемкеЕАЭСИСМПТК(СсылкаДокумент);
		
	КонецЕсли;
	
КонецФункции

Функция ПроверитьДокументСУЗ(СсылкаДокумент) Экспорт
	
	Если ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.АгрегацияКодовМаркировкиСУЗИСМПТК") Тогда
		
		Возврат ПроверитьАгрегацияКодовМаркировкиСУЗИСМПТК(СсылкаДокумент);
		
	ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК") Тогда
		
		Возврат ПроверитьЗаказНаЭмиссиюКодовМаркировкиСУЗ(СсылкаДокумент);
		
	ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.НанесениеКодовМаркировкиСУЗИСМПТК") Тогда
		
		Возврат ПроверитьНанесениеКодовМаркировкиСУЗ(СсылкаДокумент);
		
	КонецЕсли;
	
КонецФункции

Процедура СообщитьОбнаруженыОшибки(Знач СсылкаДокументИСМПТ, Знач РезультатПроверки) Экспорт
	
	Если РезультатПроверки.ЗапрещающиеОшибки.Количество() <> 0 Тогда
		
		Если ТипЗнч(СсылкаДокументИСМПТ) = Тип("ДокументСсылка.УведомлениеОПриемкеЕАЭСИСМПТК") Тогда
			
			Для Каждого Сообщение Из РезультатПроверки.ЗапрещающиеОшибки Цикл
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(Сообщение, СсылкаДокументИСМПТ);
			КонецЦикла;				
			
		Иначе
			
			ТекстСообщения = НСтр(
			"ru = 'Обнаружены ошибки при проверке документа: ""%1"".
			|Для просмотра списка ошибок воспользуйтесь командой ""Проверить"".'");
			
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СсылкаДокументИСМПТ);
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, СсылкаДокументИСМПТ);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДанныеПолучателя(ОбъектДокумент, НаименованиеДокумента = "", РезультатПроверки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПолучательИдентификационныйНомер) Тогда
		ТекстСообщения = НСтр("ru = 'С. Не заполнен ИИН/БИН получателя.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	Иначе
		//Проверка формата ИИН/БИН
		Если Не КорректныйФорматИИНБИН(ОбъектДокумент.ПолучательИдентификационныйНомер) Тогда
			ТекстСообщения = НСтр("ru = 'С. Указан некорректный ИИН/БИН получателя.'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПолучательНаименование) Тогда
		ТекстСообщения = НСтр("ru = 'С. Не заполнен реквизит Наименование получателя.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//Проверка реквизитов ссылочного типа
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Получатель) Тогда
		ТекстСообщения = НСтр("ru = 'С. Не заполнен реквизит Получатель.'"); 
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДанныеПоставщика(ОбъектДокумент, НаименованиеДокумента = "", РезультатПроверки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПоставщикИдентификационныйНомер) Тогда
		ТекстСообщения = НСтр("ru = 'В. Не заполнен ИИН/БИН поставщика.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	Иначе
		Если Не НаименованиеДокумента = "ВвозЕАЭС" Тогда
			//Проверка формата ИИН/БИН
			Если Не КорректныйФорматИИНБИН(ОбъектДокумент.ПоставщикИдентификационныйНомер) Тогда
				ТекстСообщения = НСтр("ru = 'С. Указан некорректный ИИН/БИН поставщика.'"); 
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПоставщикНаименование) Тогда
		ТекстСообщения = НСтр("ru = 'В. Не заполнен реквизит Наименование поставщика.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
		//Проверка реквизитов ссылочного типа
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Поставщик) Тогда
		ТекстСообщения = НСтр("ru = 'В. Не заполнен реквизит Поставщик.'"); 
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НаименованиеДокумента = "ВвозЕАЭС" Тогда
		Если Не ЗначениеЗаполнено(ОбъектДокумент.СтранаОтправления) Тогда
			ТекстСообщения = НСтр("ru = 'В. Не заполнена страна отправления.'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		Иначе
			КодСтраны = ИнтеграцияИСМПТКПереопределяемый.ПолучитьКодСтраныДляУведомленияОввозе(ОбъектДокумент.СтранаОтправления); 
			Если Не (КодСтраны = "RU" ИЛИ КодСтраны = "KG"
				ИЛИ КодСтраны = "BY" ИЛИ КодСтраны = "AM") Тогда
				
				ТекстСообщения = НСтр("ru = 'В. Страна отправления указана некорректно.'"); 
				РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		////Проверяем ИИН поставщика
		//Если ЗначениеЗаполнено(ОбъектДокумент.ПоставщикИдентификационныйНомер)
		//	И ЗначениеЗаполнено(ОбъектДокумент.СтранаОтправления) Тогда
		//	ИИНДлина = СтрДлина(ОбъектДокумент.ПоставщикИдентификационныйНомер);
		//	КодСтраны = ИнтеграцияИСМПТКПереопределяемый.ПолучитьКодСтраныДляУведомленияОввозе(ОбъектДокумент.СтранаОтправления); 
		//	
		//	Если (КодСтраны = "RU" И Не (ИИНДлина = 10 ИЛИ ИИНДлина = 12))
		//		ИЛИ (КодСтраны = "KG" И Не ИИНДлина = 14)
		//		ИЛИ (КодСтраны = "BY" И Не ИИНДлина = 9)
		//		ИЛИ (КодСтраны = "AM" И Не ИИНДлина = 8) Тогда
		//		
		//		ТекстСообщения = НСтр("ru = 'В. Длина поля ИИН/БИН не соответствует шаблону страны отправления.'"); 
		//		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
		//		
		//	КонецЕсли;
		//	
		//КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#Область АктПриемаПередачи

Функция ПроверитьАПП(СсылкаДокумент) Экспорт
	
	РезультатПроверки = ПустойРезультатПроверкиДокументИСМПТ();
	
	// Объект ДокументИСМПТ не записывается, он получается только для сокращения обращений к ИБ.
	ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
	
	Попытка
		ПроверитьРазличныеДанныеАПП(ОбъектДокумент, РезультатПроверки);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр(
		"ru = 'При проверке заполнения Акта приема/передачи возникла ошибка:
		|%1'");
		
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ПодробноеПредставлениеОшибки);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура ПроверитьРазличныеДанныеАПП(ОбъектДокумент, РезультатПроверки) Экспорт
	
	// Проверка всех обязательных реквизитов
	//Раздел А.Общее
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ТипАкта) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не заполнен тип Акта.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Номер) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не заполнен номер Акта.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ВидОперации) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не заполнен Вид операции.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектДокумент.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исправленный") 
		И НЕ ЗначениеЗаполнено(ОбъектДокумент.УведомлениеОРасхождении) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не указано Уведомление о расхождениях.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектДокумент.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исправленный") 
		И НЕ ЗначениеЗаполнено(ОбъектДокумент.СвязанныйАкт) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не указан исходный Акт приема/передачи.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектДокумент.ДатаВыпискиНаБумажномНосителе <> '00010101000000' И 
		Не ЗначениеЗаполнено(ОбъектДокумент.РегНомерНаБумажномНосителе) Тогда
		ТекстСообщения = НСтр("ru = 'A. Не указан номер Акта, выписанного на бумаге.'");		
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//В.Поставщик
	ПроверитьДанныеПоставщика(ОбъектДокумент,, РезультатПроверки);
	
	//С.Получатель
	ПроверитьДанныеПолучателя(ОбъектДокумент,, РезультатПроверки);
	
	//Перед отправкой и по нажатию команды "Проверить" выполняем проверку заполненности ключевых для АПи данных в ТЧ марок
	//D.Марки
	СтруктураРеквизитовМарки = Новый Структура ("Код, Количество, GTIN", "", "", "");
	Если ОбъектДокумент.Марки.Количество() > 0 Тогда
		
		НовыйСтруктураРеквизитовМарки = Новый Структура;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитовМарки Цикл
			НовыйСтруктураРеквизитовМарки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		НовыйСтруктураРеквизитовМарки.Код		 = " ДокументИСМПТМарки.КодИдентификации, "; 
		НовыйСтруктураРеквизитовМарки.Количество = " ДокументИСМПТМарки.Количество, ";
		НовыйСтруктураРеквизитовМарки.GTIN		 = " ДокументИСМПТМарки.GTIN, ";
		ТаблицаМарки = ОбъектДокумент.Марки.Выгрузить();
		ПроверитьТаблицуМарки(ОбъектДокумент, ТаблицаМарки, "Марки", НовыйСтруктураРеквизитовМарки, РезультатПроверки);
		
	ИначеЕсли ОбъектДокумент.Марки.Количество() = 0 Тогда	
		
		ТекстСообщения = НСтр("ru = 'D. Товары. Данные по кодам маркировки не заполнены.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);

	КонецЕсли;
		
	//Прочее
	Если Не ЗначениеЗаполнено(ОбъектДокумент.Организация) Тогда 
		ТекстСообщения = НСтр("ru = 'Прочее. Не заполнена Организация.'");
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УведомлениеОВвозе

Функция ПроверитьУведомлениеОВвозеИзТретьихСтран(СсылкаДокумент) Экспорт
	
	РезультатПроверки = ПустойРезультатПроверкиДокументИСМПТ();
	
	// Объект ДокументИСМПТ не записывается, он получается только для сокращения обращений к ИБ.
	ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
	
	Попытка
		ПроверитьРазличныеДанныеУведомленияОВвозеИзТретьихСтран(ОбъектДокумент, РезультатПроверки);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр(
		"ru = 'При проверке заполнения Уведомления о ввозе (из третьих стран) возникла ошибка:
		|%1'");
		
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ПодробноеПредставлениеОшибки);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверитьУведомлениеОВвозеИЗЕАЭС(СсылкаДокумент) Экспорт
	
	РезультатПроверки = ПустойРезультатПроверкиДокументИСМПТ();
	
	// Объект ДокументИСМПТ не записывается, он получается только для сокращения обращений к ИБ.
	ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
	
	Попытка
		ПроверитьРазличныеДанныеУведомленияОВвозеИзЕАЭС(ОбъектДокумент, РезультатПроверки);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр(
		"ru = 'При проверке заполнения Уведомления о ввозе (из ЕАЭС) возникла ошибка:
		|%1'");
		
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ПодробноеПредставлениеОшибки);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура ПроверитьРазличныеДанныеУведомленияОВвозеИзТретьихСтран(ОбъектДокумент, РезультатПроверки) Экспорт
	
	// Проверка всех обязательных реквизитов
	//Раздел А.Общее
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ТипУведомления) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не заполнен тип Уведомления.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Номер) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не заполнен номер Уведомления.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;

	Если ОбъектДокумент.ТипУведомления = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исправленный") 
		И НЕ ЗначениеЗаполнено(ОбъектДокумент.СвязанноеУведомление) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не указано исходное Уведомление.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектДокумент.ДатаВыпискиНаБумажномНосителе <> '00010101000000' И 
		Не ЗначениеЗаполнено(ОбъектДокумент.РегНомерНаБумажномНосителе) Тогда
		ТекстСообщения = НСтр("ru = 'A. Не указан номер Уведомления, выписанного на бумаге.'");		
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	///////////////////////
	//Ввоз из третьих стран
	///////////////////////
	
	//В.Таможенные документы
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.СтранаОтправления) Тогда
		ТекстСообщения = НСтр("ru = 'В. Не заполнена страна экспорта.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	//Таможенное оформление
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ТипДокументаТаможенногоОформления) Тогда
		ТекстСообщения = НСтр("ru = 'В. Не заполнен тип документа таможенного оформления.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ДатаДокументаТаможенногоОформления) Тогда
		ТекстСообщения = НСтр("ru = 'В. Не заполнена дата документа таможенного оформления.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.НомерДокументаТаможенногоОформления) Тогда
		ТекстСообщения = НСтр("ru = 'В. Не заполнен номер докумнта таможенного оформления.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	//Решение НО
	Если Не ЗначениеЗаполнено(ОбъектДокумент.КодТаможенногоОргана) Тогда
		ТекстСообщения = НСтр("ru = 'В. Не заполнен код таможенного органа.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	ИначеЕсли СтрДлина(ОбъектДокумент.КодТаможенногоОргана) <> 5 Тогда
		ТекстСообщения = НСтр("ru = 'В. Код таможенного органа должен содержать 5 символов.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.КодРешенияТаможенногоОргана) Тогда
		ТекстСообщения = НСтр("ru = 'В. Не заполнен код решения таможенного органа.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ДатаВремяПринятияРешения) Тогда
		ТекстСообщения = НСтр("ru = 'В. Не заполнены дата и время принятия решения таможенного органа.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//Документы соответствия
	Если ОбъектДокумент.ДокументыСоответствия.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'В. Не заполнен документ соответствия товара.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//D.Товары
	СтруктураРеквизитов = Новый Структура ("Количество, Номенклатура, ТНВЭД, СтранаПроизводства, НомерПозицииВДекларацииИлиЗаявлении", "", "", "", "", "");
	НаименованияРеквизитов = Новый Структура ("Количество, Номенклатура, ТНВЭД, СтранаПроизводства, НомерПозицииВДекларацииИлиЗаявлении", "", "", "", "", "");
	Если ОбъектДокумент.Товары.Количество() > 0 Тогда
		
		НовыйСтруктураРеквизитов = Новый Структура;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
			НовыйСтруктураРеквизитов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		
		НовыйСтруктураРеквизитов.Количество 					     = " ДокументИСМПТТовары.КоличествоКМ КАК Количество, ";
		НовыйСтруктураРеквизитов.ТНВЭД 	  							 = " ДокументИСМПТТовары.ТНВЭД, ";
		НовыйСтруктураРеквизитов.Номенклатура 	  					 = " ДокументИСМПТТовары.Номенклатура, ";
		НовыйСтруктураРеквизитов.СтранаПроизводства 	  			 = " ДокументИСМПТТовары.СтранаПроизводства, ";
		НовыйСтруктураРеквизитов.НомерПозицииВДекларацииИлиЗаявлении = " ДокументИСМПТТовары.НомерПозицииВДекларацииИлиЗаявлении, ";
		
		НаименованияРеквизитов.Количество 						   = "Количество КМ";
		НаименованияРеквизитов.ТНВЭД 	  						   = "ТНВЭД";
		НаименованияРеквизитов.Номенклатура 	  				   = "Номенклатура";
		НаименованияРеквизитов.СтранаПроизводства 	  			   = "Страна производства";
		НаименованияРеквизитов.НомерПозицииВДекларацииИлиЗаявлении = "Номер товара в ДТ";
		
		ТаблицаТоваров = ОбъектДокумент.Товары.Выгрузить();
		ПроверитьТаблицуТовары(ОбъектДокумент, ТаблицаТоваров, "Товары", НовыйСтруктураРеквизитов, НаименованияРеквизитов, РезультатПроверки);
		
	ИначеЕсли ОбъектДокумент.Товары.Количество() = 0 Тогда	
		
		ТекстСообщения = НСтр("ru = 'D. Товары. Данные по товарам не заполнены.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		
	КонецЕсли;
	
	//D.Марки
	СтруктураРеквизитовМарки = Новый Структура ("Код, Количество, GTIN", "", "", "");
	Если ОбъектДокумент.Марки.Количество() > 0 Тогда
		
		НовыйСтруктураРеквизитовМарки = Новый Структура;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитовМарки Цикл
			НовыйСтруктураРеквизитовМарки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		НовыйСтруктураРеквизитовМарки.Код		 = " ДокументИСМПТМарки.КодИдентификации, "; 
		НовыйСтруктураРеквизитовМарки.Количество = " ДокументИСМПТМарки.Количество, ";
		НовыйСтруктураРеквизитовМарки.GTIN		 = " ДокументИСМПТМарки.GTIN, ";
		ТаблицаМарки = ОбъектДокумент.Марки.Выгрузить();
		ПроверитьТаблицуМарки(ОбъектДокумент, ТаблицаМарки, "Марки", НовыйСтруктураРеквизитовМарки, РезультатПроверки);
		
	ИначеЕсли ОбъектДокумент.Марки.Количество() = 0 Тогда	
		
		ТекстСообщения = НСтр("ru = 'D. Марки. Данные по кодам маркировки не заполнены.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		
	КонецЕсли;
	
	//С.Получатель
	ПроверитьДанныеПолучателя(ОбъектДокумент,, РезультатПроверки);
	
	//Прочее
	Если Не ЗначениеЗаполнено(ОбъектДокумент.Организация) Тогда 
		ТекстСообщения = НСтр("ru = 'Прочее. Не заполнена Организация.'");
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//Проверка реквизитов ссылочного типа
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Получатель) Тогда
		ТекстСообщения = НСтр("ru = 'С. Не заполнен реквизит Получатель.'"); 
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазличныеДанныеУведомленияОВвозеИзЕАЭС(ОбъектДокумент, РезультатПроверки) Экспорт
	
	// Проверка всех обязательных реквизитов
	//Раздел А.Общее
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ТипУведомления) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не заполнен тип Уведомления.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Номер) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не заполнен номер Уведомления.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;

	Если ОбъектДокумент.ТипУведомления = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исправленный") 
		И НЕ ЗначениеЗаполнено(ОбъектДокумент.СвязанноеУведомление) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не указано исходное Уведомление.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектДокумент.ДатаВыпискиНаБумажномНосителе <> '00010101000000' И 
		Не ЗначениеЗаполнено(ОбъектДокумент.РегНомерНаБумажномНосителе) Тогда
		ТекстСообщения = НСтр("ru = 'A. Не указан номер Уведомления, выписанного на бумаге.'");		
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	///////////////////////
	//Ввоз из ЕАЭС
	///////////////////////
	
	//В.Поставщик
	ПроверитьДанныеПоставщика(ОбъектДокумент, "ВвозЕАЭС", РезультатПроверки);
	
	//Акцизы
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ДатаУплатыАкциза) Тогда
		ТекстСообщения = НСтр("ru = 'D. Не заполнена дата уплаты акциза.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.НомерКвитанцииАкциза) Тогда
		ТекстСообщения = НСтр("ru = 'D. Не заполнен номер квитанции об уплате акциза.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.СуммаАкциза) Тогда
		ТекстСообщения = НСтр("ru = 'D. Не заполнена сумма акциза.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//Проверяем ИИН поставщика
	//Если ЗначениеЗаполнено(ОбъектДокумент.ПоставщикИдентификационныйНомер)
	//	И ЗначениеЗаполнено(ОбъектДокумент.СтранаОтправления) Тогда
	//	ИИНДлина = СтрДлина(ОбъектДокумент.ПоставщикИдентификационныйНомер);
	//	КодСтраны = ИнтеграцияИСМПТКПереопределяемый.ПолучитьКодСтраныДляУведомленияОввозе(ОбъектДокумент.СтранаОтправления); 
	//	
	//	Если (КодСтраны = "RU" И Не (ИИНДлина = 10 ИЛИ ИИНДлина = 12))
	//		ИЛИ (КодСтраны = "KG" И Не ИИНДлина = 14)
	//		ИЛИ (КодСтраны = "BY" И Не ИИНДлина = 9)
	//		ИЛИ (КодСтраны = "AM" И Не ИИНДлина = 8) Тогда
	//		
	//		ТекстСообщения = НСтр("ru = 'В. Длина поля ИИН/БИН не соответствует шаблону страны отправления.'"); 
	//		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;		
	
	//С.Получатель
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПолучательИдентификационныйНомер) Тогда
		ТекстСообщения = НСтр("ru = 'C. Не заполнен ИИН/БИН получателя.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПолучательНаименование) Тогда
		ТекстСообщения = НСтр("ru = 'С. Не заполнен реквизит Наименование получателя.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//D.Марки
	СтруктураРеквизитовМарки = Новый Структура ("Код, Количество, GTIN", "", "", "");
	Если ОбъектДокумент.Марки.Количество() > 0 Тогда
		
		НовыйСтруктураРеквизитовМарки = Новый Структура;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитовМарки Цикл
			НовыйСтруктураРеквизитовМарки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		НовыйСтруктураРеквизитовМарки.Код		 = " ДокументИСМПТМарки.КодИдентификации, "; 
		НовыйСтруктураРеквизитовМарки.Количество = " ДокументИСМПТМарки.Количество, ";
		НовыйСтруктураРеквизитовМарки.GTIN		 = " ДокументИСМПТМарки.GTIN, ";
		ТаблицаМарки = ОбъектДокумент.Марки.Выгрузить();
		ПроверитьТаблицуМарки(ОбъектДокумент, ТаблицаМарки, "Марки", НовыйСтруктураРеквизитовМарки, РезультатПроверки);
		
	ИначеЕсли ОбъектДокумент.Марки.Количество() = 0 Тогда	
		
		ТекстСообщения = НСтр("ru = 'D. Товары. Данные по кодам маркировки не заполнены.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);

	КонецЕсли;
	
	//D.ДокументыСоответствия
	Если ОбъектДокумент.ДокументыСоответствия.Количество() > 0 Тогда
		СтруктураРеквизитов = Новый Структура("ТипДокумента, ДатаДокумента, НомерДокумента", "Тип", "Дата", "Номер");
		ТаблицаДокументыСоответствия = ОбъектДокумент.ДокументыСоответствия.Выгрузить();
		ПроверитьТаблицуДокументыСоответствия(ТаблицаДокументыСоответствия, "ДокументыСоответствия", СтруктураРеквизитов, РезультатПроверки);
	КонецЕсли;

		
	//Прочее
	Если Не ЗначениеЗаполнено(ОбъектДокумент.Организация) Тогда 
		ТекстСообщения = НСтр("ru = 'Прочее. Не заполнена Организация.'");
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//Проверка реквизитов ссылочного типа
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Поставщик) Тогда
		ТекстСообщения = НСтр("ru = 'В. Не заполнен реквизит Поставщик.'"); 
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Получатель) Тогда
		ТекстСообщения = НСтр("ru = 'С. Не заполнен реквизит Получатель.'"); 
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УведомлениеОРасхождении

Функция ПроверитьУведомлениеОРасхождении(СсылкаДокумент) Экспорт
	
	РезультатПроверки = ПустойРезультатПроверкиДокументИСМПТ();
	
	// Объект ДокументИСМПТ не записывается, он получается только для сокращения обращений к ИБ.
	ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
	
	Попытка
		ПроверитьРазличныеДанныеУведомленияОРасхождении(ОбъектДокумент, РезультатПроверки);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр(
		"ru = 'При проверке заполнения Уведомления о расхождениях возникла ошибка:
		|%1'");
		
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ПодробноеПредставлениеОшибки);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура ПроверитьРазличныеДанныеУведомленияОРасхождении(ОбъектДокумент, РезультатПроверки) Экспорт
	
	// Проверка всех обязательных реквизитов
	//Раздел А.Общее
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Номер) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не заполнен номер Уведомления.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ВидОперации) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не заполнен Вид операции.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.СвязанныйАкт) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не выбран Исправляемый Акт приема/передачи.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//В.Поставщик
	ПроверитьДанныеПоставщика(ОбъектДокумент,, РезультатПроверки);
	
	//С.Получатель
	ПроверитьДанныеПолучателя(ОбъектДокумент,, РезультатПроверки);
	
	//D.Марки
	Если ОбъектДокумент.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда
		СтруктураРеквизитовМарки = Новый Структура ("Код, Количество, GTIN", "", "", "");
		Если ОбъектДокумент.Марки.Количество() > 0 Тогда
			
			НовыйСтруктураРеквизитовМарки = Новый Структура;
			Для Каждого ЭлементСтруктуры Из СтруктураРеквизитовМарки Цикл
				НовыйСтруктураРеквизитовМарки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			КонецЦикла;
			НовыйСтруктураРеквизитовМарки.Код		 = " ДокументИСМПТМарки.КодИдентификации, "; 
			НовыйСтруктураРеквизитовМарки.Количество = " ДокументИСМПТМарки.Количество, ";
			НовыйСтруктураРеквизитовМарки.GTIN		 = " ДокументИСМПТМарки.GTIN, ";
			ТаблицаМарки = ОбъектДокумент.Марки.Выгрузить();
			ПроверитьТаблицуМарки(ОбъектДокумент, ТаблицаМарки, "Марки", НовыйСтруктураРеквизитовМарки, РезультатПроверки);
			
		ИначеЕсли ОбъектДокумент.Марки.Количество() = 0 Тогда	
			
			ТекстСообщения = НСтр("ru = 'D. Товары. Данные по кодам маркировки не заполнены.'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
	КонецЕсли;
		
	//Прочее
	Если Не ЗначениеЗаполнено(ОбъектДокумент.Организация) Тогда 
		ТекстСообщения = НСтр("ru = 'Прочее. Не заполнена Организация.'");
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УведомлениеОВводеВОборот

Функция ПроверитьУведомлениеОВводеВОборот(СсылкаДокумент) Экспорт
	
	РезультатПроверки = ПустойРезультатПроверкиДокументИСМПТ();
	
	// Объект ДокументИСМПТ не записывается, он получается только для сокращения обращений к ИБ.
	ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
	
	Попытка
		ПроверитьРазличныеДанныеУведомленияОВводеВОборот(ОбъектДокумент, РезультатПроверки);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр(
		"ru = 'При проверке заполнения Уведомления о вводе в оборот возникла ошибка:
		|%1'");
		
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ПодробноеПредставлениеОшибки);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура ПроверитьРазличныеДанныеУведомленияОВводеВОборот(ОбъектДокумент, РезультатПроверки) Экспорт
	
	// Проверка всех обязательных реквизитов
	//Раздел А.Общее
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Номер) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не заполнен номер Уведомления.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПричинаВводаВОборот) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не заполнена причина ввода в оборот.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//В.Поставщик
	ПроверитьДанныеПоставщика(ОбъектДокумент,, РезультатПроверки);
	
	//Прочее
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ДокументОснованиеНаименование) Тогда
		ТекстСообщения = НСтр("ru = 'Прочее. Не заполнена информация о наименовании документа-основания.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ДокументОснованиеДата) Тогда
		ТекстСообщения = НСтр("ru = 'Прочее. Не заполнена информация о дате оформления документа-основания.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ДокументОснованиеНомер) Тогда
		ТекстСообщения = НСтр("ru = 'Прочее. Не заполнена информация о номере документа-основания.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//D.Марки
	СтруктураРеквизитовМарки = Новый Структура("Код, Количество, GTIN", "", "", "");
	Если ОбъектДокумент.Марки.Количество() > 0 Тогда
		
		НовыйСтруктураРеквизитовМарки = Новый Структура;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитовМарки Цикл
			НовыйСтруктураРеквизитовМарки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		НовыйСтруктураРеквизитовМарки.Код		 = " ДокументИСМПТМарки.КодИдентификации, "; 
		НовыйСтруктураРеквизитовМарки.Количество = " ДокументИСМПТМарки.Количество, ";
		НовыйСтруктураРеквизитовМарки.GTIN		 = " ДокументИСМПТМарки.GTIN, ";
		ТаблицаМарки = ОбъектДокумент.Марки.Выгрузить();
		ПроверитьТаблицуМарки(ОбъектДокумент, ТаблицаМарки, "Марки", НовыйСтруктураРеквизитовМарки, РезультатПроверки);
		
	ИначеЕсли ОбъектДокумент.Марки.Количество() = 0 Тогда	
		
		ТекстСообщения = НСтр("ru = 'C. Товары. Данные по кодам маркировки не заполнены.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УведомлениеОбЭкспортеЕАЭСИСМПТК

Функция ПроверитьУведомлениеОбЭкспортеЕАЭСИСМПТК(СсылкаДокумент) Экспорт
	
	РезультатПроверки = ПустойРезультатПроверкиДокументИСМПТ();
	
	// Объект ДокументИСМПТ не записывается, он получается только для сокращения обращений к ИБ.
	ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
	
	Попытка
		ПроверитьРазличныеДанныеУведомлениеОбЭкспортеЕАЭСИСМПТК(ОбъектДокумент, РезультатПроверки);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр(
		"ru = 'При проверке заполнения Уведомление об экспорте (ЕАЭС) возникла ошибка:
		|%1'");
		
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ПодробноеПредставлениеОшибки);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура ПроверитьРазличныеДанныеУведомлениеОбЭкспортеЕАЭСИСМПТК(ОбъектДокумент, РезультатПроверки) Экспорт
	
	// Проверка всех обязательных реквизитов
	//Раздел А.Общее
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.НомерДокументаТрансграна) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не заполнен Номер.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ДатаДокументаТрансграна) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не заполнена Дата оформления.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ДатаВремяОтгрузки) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не заполнена Дата отгрузки товара.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	
	//В.Поставщик
	ПроверитьДанныеПоставщика(ОбъектДокумент,, РезультатПроверки);
	
	//С.Получатель
	ПроверитьДанныеПолучателя(ОбъектДокумент,, РезультатПроверки);
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.СтранаПолучатель) Тогда
		ТекстСообщения = НСтр("ru = 'С. Не заполнен реквизит Страна.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//Прочее
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ТоварнаяГруппа) Тогда
		ТекстСообщения = НСтр("ru = 'Прочее. Не заполнена Товарная группа.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область УведомлениеОПриемкеЕАЭСИСМПТК

Функция ПроверитьУведомлениеОПриемкеЕАЭСИСМПТК(СсылкаДокумент) Экспорт
	
	РезультатПроверки = ПустойРезультатПроверкиДокументИСМПТ();
	
	// Объект ДокументИСМПТ не записывается, он получается только для сокращения обращений к ИБ.
	ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
	
	Попытка
		ПроверитьРазличныеДанныеУведомлениеОПриемкеЕАЭСИСМПТК(ОбъектДокумент, РезультатПроверки);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр(
		"ru = 'При проверке заполнения Уведомление о приемке (ЕАЭС) возникла ошибка:
		|%1'");
		
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ПодробноеПредставлениеОшибки);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура ПроверитьРазличныеДанныеУведомлениеОПриемкеЕАЭСИСМПТК(ОбъектДокумент, РезультатПроверки) Экспорт
	
	// Проверка всех обязательных реквизитов
	//Раздел А.Общее
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.НомерПервичногоДокумента) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не заполнен Номер.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ДатаПервичногоДокумента) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не заполнена Дата оформления.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ИдентификаторДокументаОтгрузки) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не заполнен Идентификатор документа отгрузки.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//В.Поставщик
	ПроверитьДанныеПоставщика(ОбъектДокумент,, РезультатПроверки);
	
	//С.Получатель
	ПроверитьДанныеПолучателя(ОбъектДокумент,, РезультатПроверки);
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.СтранаОтправитель) Тогда
		ТекстСообщения = НСтр("ru = 'С. Не заполнен реквизит Страна.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УведомлениеОВыводеИзОборота

Функция ПроверитьУведомлениеОВыводеИзОборота(СсылкаДокумент) Экспорт
	
	РезультатПроверки = ПустойРезультатПроверкиДокументИСМПТ();
	
	// Объект ДокументИСМПТ не записывается, он получается только для сокращения обращений к ИБ.
	ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
	
	Попытка
		ПроверитьРазличныеДанныеУведомленияОВыводеИзОборота(ОбъектДокумент, РезультатПроверки);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр(
		"ru = 'При проверке заполнения Уведомления о выводе из оборота возникла ошибка:
		|%1'");
		
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ПодробноеПредставлениеОшибки);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура ПроверитьРазличныеДанныеУведомленияОВыводеИзОборота(ОбъектДокумент, РезультатПроверки) Экспорт
	
	// Проверка всех обязательных реквизитов
	//Раздел А.Общее
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Номер) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не заполнен номер Уведомления.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПричинаВыводаИзОборота) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не заполнена причина вывода  из оборота.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//В.Поставщик
	ПроверитьДанныеПоставщика(ОбъектДокумент,, РезультатПроверки);
	
	//Прочее
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ДокументОснованиеНаименование) Тогда
		ТекстСообщения = НСтр("ru = 'Прочее. Не заполнена информация о наименовании документа-основания.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ДокументОснованиеДата) Тогда
		ТекстСообщения = НСтр("ru = 'Прочее. Не заполнена информация о дате оформления документа-основания.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ДокументОснованиеНомер) Тогда
		ТекстСообщения = НСтр("ru = 'Прочее. Не заполнена информация о номере документа-основания.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//D.Марки
	СтруктураРеквизитовМарки = Новый Структура ("Код, Количество, GTIN", "", "", "");
	Если ОбъектДокумент.Марки.Количество() > 0 Тогда
		
		НовыйСтруктураРеквизитовМарки = Новый Структура;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитовМарки Цикл
			НовыйСтруктураРеквизитовМарки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		НовыйСтруктураРеквизитовМарки.Код		 = " ДокументИСМПТМарки.КодИдентификации, "; 
		НовыйСтруктураРеквизитовМарки.Количество = " ДокументИСМПТМарки.Количество, ";
		НовыйСтруктураРеквизитовМарки.GTIN		 = " ДокументИСМПТМарки.GTIN, ";
		ТаблицаМарки = ОбъектДокумент.Марки.Выгрузить();
		ПроверитьТаблицуМарки(ОбъектДокумент, ТаблицаМарки, "Марки", НовыйСтруктураРеквизитовМарки, РезультатПроверки);
		
	ИначеЕсли ОбъектДокумент.Марки.Количество() = 0 Тогда	
		
		ТекстСообщения = НСтр("ru = 'C. Товары. Данные по кодам маркировки не заполнены.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаказНаЭмиссиюКодовМаркировкиСУЗ

Функция ПроверитьЗаказНаЭмиссиюКодовМаркировкиСУЗ(СсылкаДокумент) Экспорт
	
	РезультатПроверки = ПустойРезультатПроверкиДокументИСМПТ();
	
	// Объект ДокументИСМПТ не записывается, он получается только для сокращения обращений к ИБ.
	ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
	
	Попытка
		ПроверитьРазличныеДанныеЗаказНаЭмиссиюКодовМаркировкиСУЗ(ОбъектДокумент, РезультатПроверки);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр(
		"ru = 'При проверке заполнения Заказа на эмиссию кодов возникла ошибка:
		|%1'");
		
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ПодробноеПредставлениеОшибки);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура ПроверитьРазличныеДанныеЗаказНаЭмиссиюКодовМаркировкиСУЗ(ОбъектДокумент, РезультатПроверки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена Организация.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ВидПродукции) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена Вид продукции.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.СпособВводаВОборот) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена Способ выпуска товаров в оборот.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") И
		НЕ ЗначениеЗаполнено(ОбъектДокумент.КонтактноеЛицо) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено Контактное лицо.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") 
		ИЛИ ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда 
		
		Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ИдентификаторПроизводства) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнен Идентификатор производства.'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектДокумент.СтранаПроизводителя) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена Страна производителя.'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ИдентификаторПроизводственнойЛинии) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнен Идентификатор производственной линии.'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда 
		
		Если НЕ ЗначениеЗаполнено(ОбъектДокумент.КодПродукта) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнен Код продукта.'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ОписаниеПродукта) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено Описание продукта.'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	//ПроверкаСпособаФормированияСерийныхНомеров
	ТаблицаПроверки = ОбъектДокумент.Товары.Выгрузить(, "GTIN, СпособФормированияСерийногоНомера");
	ТаблицаПроверки.Свернуть("GTIN, СпособФормированияСерийногоНомера");
	ТаблицаПроверки.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаПроверки.ЗаполнитьЗначения(1, "Количество");
	ТаблицаПроверки.Свернуть("GTIN", "Количество");
	
	Для Каждого СтрокаПроверки Из ТаблицаПроверки Цикл
	
		Если СтрокаПроверки.Количество < 2 Тогда
			Продолжить;
		КонецЕсли;
		
		ПоискСтрок = ОбъектДокумент.Товары.НайтиСтроки(Новый Структура("GTIN", СтрокаПроверки.GTIN));
		
		Для Каждого СтрокаТовары Из ПоискСтрок Цикл
			ТекстСообщения = НСтр("ru = 'Товары. В строке %1 для GTIN %2 отличается способ формирования серийных номеров от других строк.'"); 
			ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаТовары.НомерСтроки, СтрокаТовары.GTIN);
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			Прервать;
		КонецЦикла;
		
	КонецЦикла;
	////
	
	////Проверка табличной части на предмет указания одинаковых штрихкодов. Система СУЗ не принимает документы, в которых указаны одинаковые GTIN в разных строках
	//ПроверитьТоварыПоGTIN
	ТаблицаПроверки = ОбъектДокумент.Товары.Выгрузить(, "GTIN");
	ТаблицаПроверки.Колонки.Добавить("КонтрольнаяСумма", Новый ОписаниеТипов("Число"));
	ТаблицаПроверки.ЗаполнитьЗначения(1, "КонтрольнаяСумма");
	ТаблицаПроверки.Свернуть("GTIN", "КонтрольнаяСумма");
	
	ОбщееСообщениеВыведено = Ложь;
	
	Для Каждого СтрокаПроверки Из ТаблицаПроверки Цикл
	
		Если СтрокаПроверки.КонтрольнаяСумма = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		ПоискСтрок = ОбъектДокумент.Товары.НайтиСтроки(Новый Структура("GTIN", СтрокаПроверки.GTIN));
		
		Если Не ОбщееСообщениеВыведено Тогда 
			ТекстСообщения = НСтр("ru = 'Товары. Нельзя указывать одинаковый код товара в нескольких строках таблицы!'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			ОбщееСообщениеВыведено = Истина;
		КонецЕсли;
		
		НомераСтрок= "";
		Для Каждого СтрокаТовары Из ПоискСтрок Цикл
			НомераСтрок = ?(Не ЗначениеЗаполнено(НомераСтрок), СтрокаТовары.НомерСтроки, Строка(НомераСтрок) + ", " + СтрокаТовары.НомерСтроки);
		КонецЦикла;
		
		ТекстСообщенияСтроки = НСтр("ru = 'Товары. GTIN %2 встречается в строке: %1'");
		ТекстСообщенияСтроки = СтрШаблон(ТекстСообщенияСтроки, НомераСтрок, СтрокаПроверки.GTIN);
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщенияСтроки);
		
	КонецЦикла;
	
	//Проверка на соответствие товарной группе
	//Проверить можем только если в таблице заполнена номенклатура, иначе нет точной информации о ТГ указанного GTIN
	//и шаблон кода выставлляется значением по умолчанию.
	//Поэтому если есть пустая номенклатура - сразу предупреждаем, что данные могут быть недостоверны. 
	ПустаяСсылкаНоменклатура = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПолучитьПустуюСсылкуНоменклатура();
	НайденныеСтрокиСПустойНоменклатурой = ОбъектДокумент.Товары.НайтиСтроки(Новый Структура("Номенклатура", ПустаяСсылкаНоменклатура));
	Если Не НайденныеСтрокиСПустойНоменклатурой.Количество() = 0 Тогда 
		ТекстСообщенияСтроки = НСтр("ru = 'В товарах присутствуют строки с незаполненной Номенклатурой: результат проверки соответствия указанных GTIN товарной группе документа может быть ошибочным.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщенияСтроки);
	КонецЕсли;		
	//Далее проверяем у заполненных строк шаблоны кодов в таблице
	ТаблицаПроверкиШаблонов = ОбъектДокумент.Товары.Выгрузить(, "Шаблон");
	ТаблицаПроверкиШаблонов.Свернуть("Шаблон");
	НадоВывестиСообщениеОШаблонах = Ложь;
	Если ТаблицаПроверкиШаблонов.Количество() > 1 Тогда
		Если Не ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
			//Только у табака может быть более 1 уникального шаблона в таблице, для остальных ТГ это сразу ошибка
			НадоВывестиСообщениеОШаблонах = Истина;
		Иначе
			//Для табака допускается не более 2 уникальных шаблонов - пачка и блок.
			//Проверяем, есть ли другие.
			ЭтоТабак = Истина;
			Для Каждого ШаблонПроверка Из ТаблицаПроверкиШаблонов Цикл
				Если Не ШаблонПроверка.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек")
					И Не ШаблонПроверка.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка") Тогда
					ЭтоТабак = Ложь;
				КонецЕсли;
			КонецЦикла;
			Если Не ЭтоТабак Тогда
				НадоВывестиСообщениеОШаблонах = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		//Если шаблон 1, проверяем, соответствует ли он виду продукции документа
		Если (ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") 
				И Не ТаблицаПроверкиШаблонов[0].Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь"))
			ИЛИ (ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция")
				И Не ТаблицаПроверкиШаблонов[0].Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция"))
			ИЛИ (ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") 
				И Не ТаблицаПроверкиШаблонов[0].Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты"))
			ИЛИ (ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность") 
				И Не ТаблицаПроверкиШаблонов[0].Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность"))
			ИЛИ (ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") 
				И (Не ТаблицаПроверкиШаблонов[0].Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка")
					И Не ТаблицаПроверкиШаблонов[0].Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек"))) Тогда
				
			ТекстСообщенияСтроки = НСтр("ru = 'Товары. Присутствуют товары, не соответствующие указанному в документе виду продукции.'");
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщенияСтроки);
		КонецЕсли;
	КонецЕсли;
	Если НадоВывестиСообщениеОШаблонах Тогда
		ТекстСообщенияСтроки = НСтр("ru = 'Товары. В табличной части присутствуют товары разных товарных групп. Необходимо выполнить разбитие Заказа.'");
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщенияСтроки);
	КонецЕсли;
						
	//Иные проверки по Товарам
	ВидПродукции = ОбъектДокумент.ВидПродукции;
	СтруктураРеквизитовМарки = Новый Структура ("КоличествоУпаковок, GTIN, Шаблон", "", "", "");
	
	Если ОбъектДокумент.Товары.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN КАК GTIN,
		|	СУММА(ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Количество) КАК Количество,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Шаблон КАК Шаблон,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.ВидПродукции КАК ВидПродукции
		|ИЗ
		|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК.Товары КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары
		|ГДЕ
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Шаблон,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.ВидПродукции";
		
		Запрос.УстановитьПараметр("Ссылка", ОбъектДокумент.Ссылка); 
		Выборка = Запрос.Выполнить().Выбрать();
		
		СообщениеОПревышенииОбщегоКоличестваПоказано = Ложь;
		СообщениеОШаблонахПоказано = Ложь;
		БольшеНеВыводитьСообщениеОПустомКоде = Ложь;
		
		Пока Выборка.Следующий() Цикл
			
			// В заказе есть ограничение по количеству в рамках одного документа:
			// 1) кол-во GTIN не более 10 (для лекарств = 1)
			// 2) кол-во по каждому GTIN не более 150000
			
			//БМ_ИСМПТ КОНТРОЛЬНАЯ_ТОЧКА	Заказ КМ в СУЗ: проверка количества строк в заказе (АПИ)
			Если (Выборка.Количество() > 10 
				И НЕ Выборка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты"))
				ИЛИ (Выборка.Количество() > 1 
				И Выборка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты")) 
				И Не СообщениеОПревышенииОбщегоКоличестваПоказано Тогда
				
				ТекстСообщения = НСтр("ru = 'Товары. Превышено допустимое количество GTIN в заказе.'"); 
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
				СообщениеОПревышенииОбщегоКоличестваПоказано = Истина;
				
			КонецЕсли;
			
			Если Выборка.Количество > 150000 Тогда
				ТекстСообщения = НСтр("ru = 'Товары. Превышено допустимое количество запрашиваемых кодов в рамках GTIN %1.'");
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.GTIN);
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			КонецЕсли;
			
			//Заполненность Шаблона (поле templateId)
			Если Не ЗначениеЗаполнено(Выборка.Шаблон) 
				И Не СообщениеОШаблонахПоказано Тогда
				
				ТекстСообщения = НСтр("ru = 'Товары. Присутствуют строки с пустым полем Вид продукции (Шаблон кода).'"); 
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);				
				СообщениеОШаблонахПоказано = Истина;
				
			КонецЕсли;
			
			//Корректность формата введенных кодов GTIN
			ОшибкаФормата = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверитьКорректностьGTIN(Выборка.GTIN);
			Если Не ЗначениеЗаполнено(Выборка.GTIN) И Не БольшеНеВыводитьСообщениеОПустомКоде Тогда
				ТекстСообщения = НСтр("ru = 'Товары. В таблице присутствует строка с незаполненным GTIN!'");
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
				БольшеНеВыводитьСообщениеОПустомКоде = Истина;
			ИначеЕсли СтрДлина(Выборка.GTIN) <> 14 Или Не ОшибкаФормата Тогда
				ТекстСообщения = НСтр("ru = 'Товары. В таблице присутствует некорректный GTIN: %1.'");
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.GTIN);
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			КонецЕсли;
			
		КонецЦикла;

	ИначеЕсли ОбъектДокумент.Товары.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Товары. Данные не заполнены.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НанесениеКодовМаркировкиСУЗИСМПТК

Функция ПроверитьНанесениеКодовМаркировкиСУЗ(СсылкаДокумент) Экспорт
	
	РезультатПроверки = ПустойРезультатПроверкиДокументИСМПТ();
	
	// Объект ДокументИСМПТ не записывается, он получается только для сокращения обращений к ИБ.
	ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
	
	Попытка
		ПроверитьРазличныеДанныеНанесениеКодовМаркировкиСУЗ(ОбъектДокумент, РезультатПроверки);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр(
		"ru = 'При проверке заполнения Заказа на эмиссию кодов возникла ошибка:
		|%1'");
		
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ПодробноеПредставлениеОшибки);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура ПроверитьРазличныеДанныеНанесениеКодовМаркировкиСУЗ(ОбъектДокумент, РезультатПроверки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена Организация.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ВидПродукции) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена Вид продукции.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.НомерПроизводственнойСерии) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен Номер производственной серии.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.СрокГодности)
		И Не ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен Срок годности.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ИдентификаторПроизводственнойЛинии)
		И ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен Идентификатор производственной линии.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектДокумент.Товары.Количество() = 0 Тогда 
		ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть Товары.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Для Каждого СтрокаПроверки Из ОбъектДокумент.Товары Цикл
	
		Если НЕ ЗначениеЗаполнено(СтрокаПроверки.GTIN) Тогда
			ТекстСообщения = НСтр("ru = 'Товары. В строке %1 не указан GTIN.'"); 
			ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаПроверки.НомерСтроки);
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;

	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область АгрегацияКМ

Функция ПроверитьАгрегацияКодовМаркировкиСУЗИСМПТК(СсылкаДокумент) Экспорт
	
	РезультатПроверки = ПустойРезультатПроверкиДокументИСМПТ();
	
	ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
	
	Попытка
		ПроверитьРазличныеДанныеАгрегацияКМ(ОбъектДокумент, РезультатПроверки);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр(
		"ru = 'При проверке заполнения Агрегации кодов маркировки возникла ошибка:
		|%1'");
		
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ПодробноеПредставлениеОшибки);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура ПроверитьРазличныеДанныеАгрегацияКМ(ОбъектДокумент, РезультатПроверки) Экспорт
	
	Товар_ТабакФарма = ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.АльтернативныйТабак") 
				   Или ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") 
				   Или ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты");
	Товар_ОбувьАлкоМолоко = ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Алкогольная") 
						Или ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") 
						Или ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция");
						
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена Организация.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ОрганизацияИдентификационныйНомер) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен ИИН/БИН организации.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ВидПродукции) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен Вид продукции.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Товар_ТабакФарма Тогда 
		
		Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ИдентификаторПроизводственнойЛинии) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнен Идентификатор производственной линии.'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ИдентификаторПроизводственногоЗаказа) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнен Идентификатор производственного заказа.'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	//Проверяем, соответствует ли ТГ в шапке заполненным кодам маркировки
	Для Каждого СтрокаТЧ Из ОбъектДокумент.АгрегированныеКМ Цикл
		Если СтрокаТЧ.ВидПродукцииИС <> ОбъектДокумент.ВидПродукции Тогда
			ТекстСообщения = НСтр("ru = 'В таблице Товары присутствуют коды, не относящиеся к указанному в документе виду продукции!'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			Прервать;
		КонецЕсли;
	КонецЦикла;

	//Проверяем, скрытую ТЧ Упаковки
	Если Не ОбъектДокумент.Упаковки.Количество() = 1 Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена информация о коде агрегата.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	Иначе 
		Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Упаковки[0].ИдентификационныйКодЕдиницыАгрегации)
			Или НЕ ЗначениеЗаполнено(ОбъектДокумент.Упаковки[0].КодИдентификацииУпаковки) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнен код агрегата.'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
		ЕмкостьУпаковки 	= ОбъектДокумент.Упаковки[0].ЕмкостьУпаковки;
		УпакованоФактически = ОбъектДокумент.Упаковки[0].ФактическоеКоличествоШтук;
		
		Если НЕ ЗначениеЗаполнено(ЕмкостьУпаковки) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена ёмкость упаковки.'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(УпакованоФактически) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено значение Фактически упаковано.'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЕмкостьУпаковки)
			И ЗначениеЗаполнено(УпакованоФактически)
			И УпакованоФактически > ЕмкостьУпаковки Тогда
			ТекстСообщения = НСтр("ru = 'Указанная емкость упаковки меньше, чем количество фактически упакованных единиц.'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	//Для документа существует ограничение со стороны правил маркировки товаров:
	//агрегация,т.е. упаковка, в разрезе вложенных товаров может быть только монотоварной, т.е. содержать коды маркировки, 
	//относящиеся только к одному GTIN.
	
	Если ОбъектДокумент.АгрегированныеКМ.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ АгрегацияКодовМаркировкиСУЗИСМПТКАгрегированныеКМ.GTINВерхнегоУровня) КАК GTIN
		|ИЗ
		|	Документ.АгрегацияКодовМаркировкиСУЗИСМПТК.АгрегированныеКМ КАК АгрегацияКодовМаркировкиСУЗИСМПТКАгрегированныеКМ
		|ГДЕ
		|	АгрегацияКодовМаркировкиСУЗИСМПТКАгрегированныеКМ.Ссылка = &Ссылка
		|	И АгрегацияКодовМаркировкиСУЗИСМПТКАгрегированныеКМ.GTINВерхнегоУровня <> """"
		|";
		
		Запрос.УстановитьПараметр("Ссылка", ОбъектДокумент.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не Выборка.GTIN <= 1 //в некоторых случаях возможно указание в качестве вложенных позиций транспортных КМ без GTIN 
				И Не ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") Тогда
				
				ТекстСообщения = НСтр("ru = 'В составе упаковки указаны товары, принадлежащие к разным кодам GTIN! Упаковка должна быть монотоварной.'"); 
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЦикла;
				
	ИначеЕсли ОбъектДокумент.АгрегированныеКМ.Количество() = 0 Тогда	
		
		ТекстСообщения = НСтр("ru = 'Данные по вложенным товарам не заполнены! Упаковка не должна быть пустой.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);

	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Работа_с_XML_и_XDTO

Функция НоваяФабрикаXDTOИзXSD(Знач ИмяМакета) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xsd");
	ЭтотОбъект.ПолучитьМакет(ИмяМакета).Записать(ИмяВременногоФайла, "UTF-8");
	НоваяФабрикаXDTO = СоздатьФабрикуXDTO(ИмяВременногоФайла);
	
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.УдалитьВременныеФайлы(ИмяВременногоФайла);
	
	Возврат НоваяФабрикаXDTO;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеСсылочныхРеквизитов

// Возвращает ссылки на контрагентов и организации для указанных идентификационных номеров.
//
// Параметры:
//  ИдентификационныеНомераКонтрагентов - Массив - Идентификационные номера (БИН, ИИН) контрагентов, 
//   по которым необходимо найти ссылки на контрагентов.
//  ИдентификационныеНомераСтруктурныхЕдиниц - Массив - Идентификационные номера (БИН, ИИН) организаций, 
//   по которым необходимо найти ссылки на организации.
//
// Возвращаемое значение:
//  Структура - Найденные соответствия идентификационных номеров и ссылок.
//   |- СоответствияКонтрагентов - Соответствие - Соответствие идентификаторов и ссылок контрагентов.
//   |- СоответствияСтруктурныхЕдиниц - Соответствие - Соответствие идентификаторов и ссылок контрагентов.
//
Функция НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(
	Знач ИдентификационныеНомераКонтрагентов, Знач ИдентификационныеНомераСтруктурныхЕдиниц) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.%КонтрагентИНН КАК Идентификатор,
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.%КонтрагентИНН В(&ИдентификационныеНомераКонтрагентов)
	|	И НЕ Контрагенты.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.%ОрганизацияИНН КАК Идентификатор,
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.%ОрганизацияИНН В(&ИдентификационныеНомераСтруктурныхЕдиниц)
	|	И НЕ Организации.ПометкаУдаления";
	
	СоответсвиеИменРеквизитов = Новый Соответствие;
	СоответсвиеИменРеквизитов.Вставить("%КонтрагентИНН", "");
	СоответсвиеИменРеквизитов.Вставить("%ОрганизацияИНН", "");
	
	ИнтеграцияИСМПТКПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);
	
	ИнтеграцияИСМПТК.ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответсвиеИменРеквизитов);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ИдентификационныеНомераКонтрагентов", ИдентификационныеНомераКонтрагентов);	
	Запрос.УстановитьПараметр("ИдентификационныеНомераСтруктурныхЕдиниц", ИдентификационныеНомераСтруктурныхЕдиниц);	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	Результат.Вставить("СоответствияКонтрагентов", Новый Соответствие);
	Результат.Вставить("СоответствияСтруктурныхЕдиниц", Новый Соответствие);
	
	ВыборкаКонтрагенты = РезультатыЗапроса[0].Выбрать();
	Пока ВыборкаКонтрагенты.Следующий() Цикл
		Результат.СоответствияКонтрагентов.Вставить(ВыборкаКонтрагенты.Идентификатор, ВыборкаКонтрагенты.Ссылка);
	КонецЦикла;
	
	ВыборкаОрганизации = РезультатыЗапроса[1].Выбрать();
	Пока ВыборкаОрганизации.Следующий() Цикл
		Результат.СоответствияСтруктурныхЕдиниц.Вставить(ВыборкаОрганизации.Идентификатор, ВыборкаОрганизации.Ссылка);	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ВосстановитьСсылочныеРеквизитыДокументов(МассивСтарыхДокументов)
	
	Для Каждого ЭлементМассива Из МассивСтарыхДокументов Цикл
		ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ЭлементМассива.ИсходныйОбъект, ЭлементМассива.ОбновленныйОбъект, "Марки", "КодМаркировки", "КодИдентификации");
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьСсылкиВРеквизитеТабличнойЧасти(
	ИсходныйОбъект,
	ОбновленныйОбъект,
	ИмяТабличнойЧасти,
	ИмяРеквизитаДляВосстановления,
	ИмяРеквизитаДляПроверки)
	
	Если ОбновленныйОбъект[ИмяТабличнойЧасти].Количество() = ИсходныйОбъект[ИмяТабличнойЧасти].Количество() Тогда
		
		ВГраница = ИсходныйОбъект[ИмяТабличнойЧасти].Количество() - 1;
		
		Для Индекс = 0 По ВГраница Цикл
			
			ИсходнаяСтрока = ИсходныйОбъект[ИмяТабличнойЧасти][Индекс];
			ОбновленнаяСтрока = ОбновленныйОбъект[ИмяТабличнойЧасти][Индекс];
			
			Если ТипЗнч(ОбновленнаяСтрока[ИмяРеквизитаДляПроверки]) = Тип("Строка") Тогда
				ОбновленнаяРеквизитПроверки = СокрЛП(ОбновленнаяСтрока[ИмяРеквизитаДляПроверки]);
				ИсходнаяРеквизитПроверки    = СокрЛП(ИсходнаяСтрока[ИмяРеквизитаДляПроверки]);
			Иначе
				ОбновленнаяРеквизитПроверки = ОбновленнаяСтрока[ИмяРеквизитаДляПроверки];
				ИсходнаяРеквизитПроверки    = ИсходнаяСтрока[ИмяРеквизитаДляПроверки];
			КонецЕсли;
			
			Если ОбновленнаяРеквизитПроверки = ИсходнаяРеквизитПроверки Тогда
				
				ОбновленнаяСтрока[ИмяРеквизитаДляВосстановления] = ИсходнаяСтрока[ИмяРеквизитаДляВосстановления];
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'В документе ""[Док]"", в таблице ""[ИмяТабличнойЧасти]"", в строке [НомерСтроки], очищено поле ""[ИмяРеквизитаДляВосстановления]"", так как значение поля ""[ИмяРеквизитаДляПроверки]"" не соответствовало значению поля в полученном документе.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Док]", Строка(ОбновленныйОбъект.Ссылка));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяТабличнойЧасти]", ИмяТабличнойЧасти);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НомерСтроки]", Формат(Индекс + 1, "ЧГ="));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяРеквизитаДляВосстановления]", ИмяРеквизитаДляВосстановления);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяРеквизитаДляПроверки]", ИмяРеквизитаДляПроверки);
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстСообщения;
				Сообщение.УстановитьДанные(ОбновленныйОбъект.Ссылка);
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'В документе ""[Док]"" очищена колонка ""[ИмяРеквизитаДляВосстановления]"" в таблице ""[ИмяТабличнойЧасти]"", так как количество строк в этой таблице не соответствовало количеству строк в полученном документе.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Док]", Строка(ОбновленныйОбъект.Ссылка));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяРеквизитаДляВосстановления]", ИмяРеквизитаДляВосстановления);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяТабличнойЧасти]", ИмяТабличнойЧасти);
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.УстановитьДанные(ОбновленныйОбъект.Ссылка);
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьРезультатыИзмененияСтатусов(Знач КоллекцияРезультатовИзмененияСтатусов, Форма) Экспорт
	
	Для Каждого РезультатИзмененияСтатуса Из КоллекцияРезультатовИзмененияСтатусов Цикл
		
		// Найти строки по идентификатору.
		ПараметрыОтбора = Новый Структура("Идентификатор", РезультатИзмененияСтатуса.Ключ);
		МассивНайденныхСтрок = Форма.СписокДокументовИСМПТ.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого НайденнаяСтрока Из МассивНайденныхСтрок Цикл
			
			Если РезультатИзмененияСтатуса.Значение.ТекущийСтатус <> Неопределено Тогда
				
				// Заполнить колонку "Статус".
				НайденнаяСтрока.Статус = РезультатИзмененияСтатуса.Значение.ТекущийСтатус.Статус;
				
				// Заполнить колонки ошибки.
				Если РезультатИзмененияСтатуса.Значение.Ошибка.Есть Тогда
					
					НайденнаяСтрока.ОшибкаЕсть = Истина;
					НайденнаяСтрока.ОшибкаПредставление = РезультатИзмененияСтатуса.Значение.Ошибка.Представление;
					НайденнаяСтрока.ОшибкаРасшифровка = РезультатИзмененияСтатуса.Значение.Ошибка.Расшифровка;
					НайденнаяСтрока.ОшибкаТекст = РезультатИзмененияСтатуса.Значение.Ошибка.Текст;
					
				Иначе
					
					НайденнаяСтрока.ОшибкаЕсть = Ложь;
					НайденнаяСтрока.ОшибкаПредставление = "";
					НайденнаяСтрока.ОшибкаРасшифровка = "";
					НайденнаяСтрока.ОшибкаТекст = "";
					
				КонецЕсли;
				
			Иначе
				
				НайденнаяСтрока.ОшибкаЕсть = Истина;
				НайденнаяСтрока.ОшибкаПредставление = НСтр("ru = 'Документ не найден в ИС МПТ.'");
				
				ТекстРасшифровки = НСтр("ru = 'Документ с идентификатором ""%Идентификатор%"" не найден в ИС МПТ.'");
				ТекстРасшифровки = СтрЗаменить(ТекстРасшифровки, "%Идентификатор%", РезультатИзмененияСтатуса.Ключ);
				НайденнаяСтрока.ОшибкаРасшифровка = ТекстРасшифровки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ФабрикаАПП_XML_API(ИмяСхемы)
	
	ФабрикаИзПакета = Неопределено;
	ФабрикаИзПакета = НоваяФабрикаXDTOИзXSD(ИмяСхемы);
	
	Возврат ФабрикаИзПакета;
	
КонецФункции

Процедура СоздатьВложенныеТипы(ТипЗаголовка, ОбъектXDTO)
	
	Для Каждого Свойство Из ТипЗаголовка.Свойства Цикл
		Если Свойство.Форма = ФормаXML.Элемент Тогда
			Если ТипЗнч(ОбъектXDTO[Свойство.Имя]) = Тип("СписокXDTO") Тогда
				Продолжить;
			КонецЕсли;
			ОбъектXDTO[Свойство.Имя] = ФабрикаXDTO.Создать(Свойство.Тип);
			СоздатьВложенныеТипы(Свойство.Тип, ОбъектXDTO[Свойство.Имя]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает код причины повторного ввода в оборот для отправки на сервер
//
// Параметры:
//  Причина - ПеречислениеСсылка.ПричиныПовторногоВводаКМВОборотИСМПТ - причина ввода в оборот
// 
//Возвращаемое значение:
//  Число - код причины.
//
Функция КодПричиныПовторногоВвода(Причина)
	
	Результат = Неопределено;
	Если Причина = Перечисления.ПричиныПовторногоВводаКМВОборотИСМПТК.Излишки Тогда
		Результат = 1;
	ИначеЕсли Причина = Перечисления.ПричиныПовторногоВводаКМВОборотИСМПТК.ДоДатыОбязательнойМаркировки Тогда
		Результат = 2;
	ИначеЕсли Причина = Перечисления.ПричиныПовторногоВводаКМВОборотИСМПТК.Конфискат Тогда
		Результат = 3;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции //КодПричиныПовторногоВвода

// Возвращает код причины вывода из оборота для отправки на сервер
//
// Параметры:
//  Причина - ПеречислениеСсылка.ПричиныВыводаКМИзОборотаИСМПТ - причина вывода из оборота
// 
//Возвращаемое значение:
//  Число - код причины.
//
Функция КодПричиныВыводаИзОборота(Причина)
	
	Результат = Неопределено;
	Если Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.Брак Тогда
		Результат = 1;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.Утрата Тогда
		Результат = 2;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.Повреждение Тогда
		Результат = 3;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.Уничтожение Тогда
		Результат = 4;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.ВнутреннееИспользование Тогда
		Результат = 5;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.Образцы Тогда
		Результат = 6;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.ИнтернетТорговля Тогда
		Результат = 7;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.ВозвратФизЛицу Тогда
		Результат = 8;	
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.МедицинскоеНазначение Тогда
		Результат = 9;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.ОтпускПоРецепту Тогда
		Результат = 10;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.ЭкспортЕАЭС Тогда
		Результат = 11;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.ЭкспортТретьиСтраны Тогда
		Результат = 12;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.РозничнаяПродажа Тогда
		Результат = 13;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.ВыбылПереработка Тогда
		Результат = 14;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.ПродажаГосПредприятию Тогда
		Результат = 15;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.ВнутреннееИспользованиеПокупателем Тогда
		Результат = 16;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.Конфискация Тогда
		Результат = 17;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.Другое Тогда
		Результат = 18;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //КодПричиныВыводаИзОборота

Функция ПолучитьИдентификаторШаблонаПоШаблонуКода(Шаблон)
	
	Если Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек") Тогда
		Возврат 3;
	Иначе
		Возврат 4; //Табачная пачка
	КонецЕсли;
	
КонецФункции

Функция ОбъектXDTOИзСтрокиJSON(Знач СтрокаJSON, Знач Фабрика) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);	
	ОбъектXDTO = Фабрика.ПрочитатьJSON(ЧтениеJSON);
	
	Возврат ОбъектXDTO;
	
КонецФункции

Процедура ДобавитьПараметрВТелоЗапроса(ТекстОтправки, ИмяПараметра, ЗначениеПараметра, РазделительТелаЗапроса)
	
	Если ТекстОтправки="" Тогда
		ДобавитьСтрокуСРазделителем(ТекстОтправки, "--" + РазделительТелаЗапроса);
	КонецЕсли;
	
	ДобавитьСтрокуСРазделителем(ТекстОтправки, "Content-Disposition: form-data; name="""+ИмяПараметра+"""" + Символы.ВК + Символы.ПС);
	ДобавитьСтрокуСРазделителем(ТекстОтправки, ЗначениеПараметра);
	ДобавитьСтрокуСРазделителем(ТекстОтправки, "--" + РазделительТелаЗапроса);
	
КонецПроцедуры

Процедура ДобавитьСтрокуСРазделителем(НачСтрока, ДобавитьТекст)
	
	НачСтрока = НачСтрока + ДобавитьТекст + Символы.ВК + Символы.ПС;
	
КонецПроцедуры

Функция АдресБиблиотекиКриптографии(УникальныйИдентификаторФормыКлиента = Неопределено) Экспорт
	
	Компонента = Обработки.ОбменЭСФ.ПолучитьМакет("WSCrypto");
	СсылкаНаМодуль = ПоместитьВоВременноеХранилище(Компонента, УникальныйИдентификаторФормыКлиента);
	Возврат СсылкаНаМодуль;
	
КонецФункции

Функция КорректныйФорматИИНБИН(ИИНБИН)
	
	Результат = ЗначениеЗаполнено(ИИНБИН)
		И (СтрДлина(ИИНБИН) = 10 ИЛИ СтрДлина(ИИНБИН) = 12)
		И РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТолькоЦифрыВСтроке(ИИНБИН);
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСКодамиМаркировкиИСМПТ

#Область СоставУпаковкм

Функция ПолучитьИнформациюПоАгрегированнымКМ(Метод = "GET", URLЗапроса, ТелоЗапроса = Неопределено, Организация = Неопределено, КлючСессии, ТГ = Неопределено, ВыводитьСообщениеПриЗапросе = Истина) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеОбАгрегации",              Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = 'Не удалось подключиться к серверу ИС МПТ, требуется обновление ключа сессии: перезапустите программу.'");
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	РезультатЗапроса = ИнтеграцияИСМПТК.ОтправитьДанныеВСервис(URLЗапроса, ТелоЗапроса, КлючСессии, Метод, ИнтеграцияИСМПТККлиентСервер.ПараметрыОтправкиHTTPЗапросов_ИСМП(""));
	РезультатОтправкиЗапроса = ИнтерфейсИСМПТК.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсИСМПТК.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			Иначе
				ВозвращаемоеЗначение.ДанныеОбАгрегации = ДанныеОбработки;
			КонецЕсли;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Если ВыводитьСообщениеПриЗапросе Тогда
				ТекстСообщения = НСтр("ru = 'Включен учет, но не подписан договор по товарной группе %1. Обратитесь в техническую поддерку ИС МПТ.'");
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ТГ);
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 500 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Если ВыводитьСообщениеПриЗапросе Тогда
				ТекстСообщения = НСтр("ru = 'Операция не выполнена: внутренняя ошибка сервера ИС МПТ. Повторите запрос позднее.'");
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗапроситьДанныеОбАгрегацииКМ(СтруктураКодов, Организация = Неопределено, ТокенАвторизации, ВыводитьСообщениеПриЗапросе = Истина) Экспорт
	
	ДоступныеВидыПродукции = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.УчитываемыеВидыМаркируемойПродукции();
	
	Если СтруктураКодов.Свойство("ФорматBase64") Тогда
		Если СтруктураКодов.ФорматBase64 Тогда
			Штрихкод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтруктураКодов.Штрихкод);
		Иначе
			Штрихкод = СтруктураКодов.Штрихкод;
		КонецЕсли;
	ИначеЕсли РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЭтоСтрокаФорматаBase64(СтруктураКодов.Штрихкод) Тогда
		Штрихкод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтруктураКодов.Штрихкод);
	Иначе
		Штрихкод = СтруктураКодов.Штрихкод;
	КонецЕсли;
	
	АгрегированныйКод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.EncodeURIcomponent(Штрихкод);
	
	Для Каждого ВидПродукции Из ДоступныеВидыПродукции Цикл 
		ВидПродукции = СоответствиеВидовПродукцииURL()[ВидПродукции];
		ОтветСервера = ПолучитьИнформациюПоАгрегированнымКМ("GET", "api/v3/true-api/cises/aggregated/list?pg=" + ВидПродукции + "&codes=" + АгрегированныйКод, , Организация, ТокенАвторизации, ВыводитьСообщениеПриЗапросе);
		Если Не ЗначениеЗаполнено(ОтветСервера.ТекстОшибки) Тогда 
			Возврат ОтветСервера;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОтветСервера;
	
КонецФункции

Функция ЗапроситьДанныеОбАгрегацииСпискаКМ(СтруктураКодов, Организация = Неопределено, ТокенАвторизации) Экспорт
	
	ДоступныеВидыПродукции = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.УчитываемыеВидыМаркируемойПродукции();
	СоответствиеАгрегированныхКодов = Новый Соответствие;
	
	Для Каждого ВидПродукции Из ДоступныеВидыПродукции Цикл 
		ВидПродукции = СоответствиеВидовПродукцииURL()[ВидПродукции];
		ОтветСервера = ПолучитьИнформациюПоАгрегированнымКМ("POST", "api/v3/true-api/cises/aggregated/list?pg=" + ВидПродукции, СтруктураКодов.МассивКодов, Организация, ТокенАвторизации, ВидПродукции);
		Если Не ЗначениеЗаполнено(ОтветСервера.ТекстОшибки) Тогда
			Для Каждого СоответствиеКодов Из ОтветСервера.ДанныеОбАгрегации Цикл 
				СоответствиеАгрегированныхКодов.Вставить(СоответствиеКодов.Ключ, СоответствиеКодов.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если Не СоответствиеАгрегированныхКодов.Количество() = 0 Тогда 
		ОтветСервера.ДанныеОбАгрегации = СоответствиеАгрегированныхКодов;
		ОтветСервера.ТекстОшибки 	   = "";
	КонецЕсли;
	
	Возврат ОтветСервера;
	
КонецФункции

Функция ЗапроситьИтогиПоАгрегированнымКМ(МассивКодовМаркировки, Организация = Неопределено, ТокенАвторизации = Неопределено) Экспорт
	
	ТелоЗапроса = Новый Массив;
	Для Каждого СтрокаКодаМаркировки Из МассивКодовМаркировки Цикл
		ТелоЗапроса.Добавить(СтрокаКодаМаркировки);
	КонецЦикла;
	
	Возврат ПолучитьИнформациюПоАгрегированнымКМ("POST", "api/v3/true-api/cis/cises-units-count", ТелоЗапроса, Организация, ТокенАвторизации);
	
КонецФункции

#КонецОбласти

#Область ИсторияИВладелецКода

Функция ПолучитьИнформациюПоКМ(Метод = "POST", URLЗапроса, ТелоЗапроса = Неопределено, Организация = Неопределено, КлючСессии) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеКМ",              			Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = 'Не удалось подключиться к серверу ИС МПТ, требуется обновление ключа сессии'");
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	РезультатЗапроса = ИнтеграцияИСМПТК.ОтправитьДанныеВСервис(URLЗапроса, ТелоЗапроса, КлючСессии,	Метод, ИнтеграцияИСМПТККлиентСервер.ПараметрыОтправкиHTTPЗапросов_ИСМП(""));
	РезультатОтправкиЗапроса = ИнтерфейсИСМПТК.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсИСМПТК.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			Иначе
				ВозвращаемоеЗначение.ДанныеКМ = ДанныеОбработки;
			КонецЕсли;
		
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

//МассивКодов - Данные должны передаваться в формате массива, даже если КМ только один
//
Функция ЗапроситьДанныеКМ(МассивКодов, Организация = Неопределено, ТокенАвторизации) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, МассивКодов);
	
	ОтветСервера = ПолучитьИнформациюПоКМ("POST", "api/v3/true-api/cises/info", ЗаписьJSON.Закрыть(), Организация, ТокенАвторизации);
	
	Если Не ЗначениеЗаполнено(ОтветСервера.ТекстОшибки) Тогда
		
		МассивОписанияКодов = ОтветСервера.ДанныеКМ;
		СоответствиеКодов   = Новый Соответствие;
		
		Для Каждого ОписаниеКода Из МассивОписанияКодов Цикл 
			
			ИнформацияПоКоду = ОписаниеКода["cisInfo"];
			
			//Разбор значений, которые вернул сервер
			СтатусКМ 		= ИнтеграцияИСМПТК.ПолучитьЗначениеСтатусаКМПоСоответствию(ИнформацияПоКоду["status"]);
			НаименованиеТовара = ИнформацияПоКоду["productName"];
			GTIN 			= ИнформацияПоКоду["gtin"];
			ВидПродукцииИС  = ИнтеграцияИСМПТК.ПолучитьЗначениеВидаПродукцииПоСоответствию(ИнформацияПоКоду["productGroup"]); 
			ВидУпаковки 	= ИнтеграцияИСМПТК.ПолучитьЗначениеВидУпаковкиПоСоответствию(ИнформацияПоКоду["packageType"]); 
			
			Владелец        = ИнформацияПоКоду["ownerName"];
			ВладелецИИНБИН	= ИнформацияПоКоду["ownerBin"];
			ВладелецСсылка  = ИнтеграцияИСМПТКПереопределяемый.ПодобратьСсылкуНаУчастникаМаркировкиПоБИН(ВладелецИИНБИН);
			
			Производитель	= ИнформацияПоКоду["producerName"];
			ПроизводительИИНБИН = ИнформацияПоКоду["producerBin"];
			ПроизводительСсылка = ИнтеграцияИСМПТКПереопределяемый.ПодобратьСсылкуНаУчастникаМаркировкиПоБИН(ПроизводительИИНБИН);
			
			ДатаВводаВОборотСервер = ИнформацияПоКоду["producedDate"];
			ДатаДляЗаполнения = ?(ДатаВводаВОборотСервер = Неопределено, Неопределено, ПрочитатьДатуJSON(ДатаВводаВОборотСервер, ФорматДатыJSON.ISO));
			
			КодВерхнегоУровня = ИнформацияПоКоду["parent"];
			
			//Заполнение итоговой структуры данных
			СтруктураСведенийОКМ = Новый Структура();
			СтруктураСведенийОКМ.Вставить("СтатусКМ", 			 СтатусКМ);
			СтруктураСведенийОКМ.Вставить("НаименованиеТовара",  НаименованиеТовара);
			СтруктураСведенийОКМ.Вставить("GTIN", 				 GTIN);
			СтруктураСведенийОКМ.Вставить("ВидПродукцииИС", 	 ВидПродукцииИС);
			СтруктураСведенийОКМ.Вставить("ВидУпаковки", 		 ВидУпаковки);
			СтруктураСведенийОКМ.Вставить("Владелец", 			 Владелец);
			СтруктураСведенийОКМ.Вставить("ВладелецИИНБИН", 	 ВладелецИИНБИН);
			СтруктураСведенийОКМ.Вставить("ВладелецСсылка", 	 ВладелецСсылка);
			СтруктураСведенийОКМ.Вставить("Производитель", 		 Производитель);
			СтруктураСведенийОКМ.Вставить("ПроизводительИИНБИН", ПроизводительИИНБИН);
			СтруктураСведенийОКМ.Вставить("ПроизводительСсылка", ПроизводительСсылка);
			СтруктураСведенийОКМ.Вставить("ДатаВводаВОборот", 	 ДатаДляЗаполнения);  //даты может не быть, если статус кода Эмитирован 
			СтруктураСведенийОКМ.Вставить("КодВерхнегоУровня", 	 КодВерхнегоУровня); //присутствует в запросе только у сагрегированных кодов
						
			СоответствиеКодов.Вставить(ИнформацияПоКоду["requestedCis"], СтруктураСведенийОКМ);
			
		КонецЦикла; 
		
		ОтветСервера.ДанныеКМ = СоответствиеКодов;
	КонецЕсли;
	
	Возврат ОтветСервера;
	
КонецФункции

Функция ЗапроситьИсториюКМ(КМ, Организация = Неопределено, ТокенАвторизации) Экспорт
	
	ОбработанныйКМ = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.EncodeURIcomponent(КМ);
	ОтветСервера   = ПолучитьИнформациюПоКМ("GET", "api/v3/true-api/cises/history?code=" + ОбработанныйКМ, , Организация, ТокенАвторизации);
		
	Если Не ЗначениеЗаполнено(ОтветСервера.ТекстОшибки) Тогда
		
		МассивОписанияКодов = ОтветСервера.ДанныеКМ;
		СоответствиеКодов   = Новый Соответствие;
		
		МассивСведенийИстории = Новый Массив();
		
		Для Каждого ОписаниеКода Из МассивОписанияКодов Цикл
			
			КодИдентификации 	 = ОписаниеКода["cis"];
			СтатусКода			 = ИнтеграцияИСМПТК.ПолучитьЗначениеСтатусаКМПоСоответствию(ОписаниеКода["status"]);
			НомерДокументаИСМПТ  = ОписаниеКода["docId"];
			ДатаДокументаИСМПТ   = ПрочитатьДатуJSON(ОписаниеКода["operationDate"], ФорматДатыJSON.ISO);
			ВладелецНаименование = ОписаниеКода["ownerName"];
			ВладелецИИНБИН		 = ОписаниеКода["ownerBin"];
			ВладелецСсылка		 = ИнтеграцияИСМПТКПереопределяемый.ПодобратьСсылкуНаУчастникаМаркировкиПоБИН(ВладелецИИНБИН);
			
			СтруктураСведенийОКМ = Новый Структура();
			СтруктураСведенийОКМ.Вставить("СтатусКода", 		 СтатусКода);
			СтруктураСведенийОКМ.Вставить("НомерДокументаИСМПТ", НомерДокументаИСМПТ); //может отсутствовать для некоторых статусов КМ
			СтруктураСведенийОКМ.Вставить("ДатаДокументаИСМПТ",  ДатаДокументаИСМПТ);
			
			СтруктураСведенийОКМ.Вставить("ВладелецНаименование", ВладелецНаименование);
			СтруктураСведенийОКМ.Вставить("ВладелецИИНБИН",  	  ВладелецИИНБИН);
			СтруктураСведенийОКМ.Вставить("ВладелецСсылка",  	  ВладелецСсылка);
			
			МассивСведенийИстории.Добавить(СтруктураСведенийОКМ);
									
		КонецЦикла;
		
		СоответствиеКодов.Вставить(КМ, МассивСведенийИстории);
		ОтветСервера.ДанныеКМ = СоответствиеКодов;
	КонецЕсли;
	
	Возврат ОтветСервера; 
	
КонецФункции

#КонецОбласти

#Область РаботаСЭмиссиейКМ_СУЗ

Функция ЗаявкаНаЭмиссиюКодовМаркировкиJSON(ДокументСсылка, НастройкаОбменаСУЗ) Экспорт
	
	СписокЗапросов = Новый СписокЗначений;
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	Неопределено			                 КАК ДокументОснование,
	|	
	|	// Общие реквизиты для табака и обуви
	|	Шапка.ВидПродукции                         КАК ВидПродукции,
	|	Шапка.ИдентификаторПроизводственногоЗаказа КАК ИдентификаторПроизводственногоЗаказа,
	|	Шапка.СпособВводаВОборот                   КАК СпособВводаВОборот,
	|
	|	// Основные реквизиты
	|	Шапка.Организация                КАК Организация,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|	Шапка.СтранаПроизводства		 КАК СтранаПроизводства,
	|
	|	Шапка.КонтактноеЛицо             КАК Ответственный,
	|	Шапка.КонтактноеЛицо			 КАК ОтветственныйПредставление,
	|
	|	// Лекарственные препараты
	|	Представление(Шапка.ИдентификаторПроизводства)           КАК ИдентификаторПроизводства,
	|	Представление(Шапка.СтранаПроизводителя)                 КАК СтранаПроизводителя,
	|	Представление(Шапка.КодПродукта)                         КАК КодПродукта,
	|	Представление(Шапка.ИдентификаторПроизводственнойЛинии)  КАК ИдентификаторПроизводственнойЛинии,
	|	Представление(Шапка.ОписаниеПродукта)                    КАК ОписаниеПродукта
	|
	|ИЗ
	|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	
	|	// Универсальные реквизиты
	|	Товары.Номенклатура                      КАК Номенклатура,
	|	Товары.Характеристика                    КАК Характеристика,
	|	Товары.GTIN                              КАК GTIN,
	|	Товары.Количество                        КАК Количество,
	|	Товары.СпособФормированияСерийногоНомера КАК СпособФормированияСерийногоНомера,
	|	1                                        КАК КоличествоСтрок,
	|	ЛОЖЬ                                     КАК СтрокаДобавлена,
	|	
	|	// Табачная продукция
	|	Представление(Товары.Номенклатура)                  КАК НоменклатураПредставление,
	|	Представление(Товары.Характеристика)                КАК ХарактеристикаПредставление,
	|	
	|	Товары.Шаблон                    КАК Шаблон
	|	
	|ИЗ
	|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|",
	"Товары");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	СерийныеНомера.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СерийныеНомера.СерийныйНомер       КАК СерийныйНомер
	|ИЗ
	|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК.СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	СерийныеНомера.Ссылка = &Ссылка
	|",
	"СерийныеНомера");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ИнтеграцияИСМПТК.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	
	ТабличнаяЧастьТовары         = РезультатЗапроса["Товары"].Выгрузить();
	ТабличнаяЧастьСерийныеНомера = РезультатЗапроса["СерийныеНомера"].Выгрузить();
	
	Если ТабличнаяЧастьТовары.Количество() = 0 Тогда
		
		СообщениеJSON = ИнтеграцияИСМПТК.СтруктураСообщенияJSON();
		СообщениеJSON.Документ = ДокументСсылка;
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.';
										 |en = 'Нет данных для выгрузки.'");
		
		Возврат СообщениеJSON;
		
	КонецЕсли;
	
	СтанцияУправленияЗаказами = Неопределено;	
	
	Если НастройкаОбменаСУЗ.Количество() = 0 Тогда
		
		СообщениеJSON = ИнтеграцияИСМПТК.СтруктураСообщенияJSON();
		СообщениеJSON.Документ = ДокументСсылка;
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Для организации не настроен обмен с СУЗ!';
										 |en = 'Для организации не настроен обмен с СУЗ!'");
		
		Возврат СообщениеJSON;
		
	КонецЕсли;
	
	Организация       = НастройкаОбменаСУЗ.Организация;
	РезультатПроверки = ИнтерфейсИСМПТК.ПроверитьДоступностьСУЗ_V2(Шапка.ВидПродукции, НастройкаОбменаСУЗ);
	Если РезультатПроверки.Доступен = Истина Тогда
		СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
	КонецЕсли;
	
	Если СтанцияУправленияЗаказами = Неопределено Тогда
		СообщениеJSON = ИнтеграцияИСМПТК.СтруктураСообщенияJSON();
		СообщениеJSON.Организация       = Шапка.Организация;
		СообщениеJSON.Документ          = ДокументСсылка;
		СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
		
		ИнтеграцияИСМПТККлиентСервер.ДобавитьТекстОшибки(СообщениеJSON,
									СтрШаблон(НСтр("ru = 'Не удалось определить активный СУЗ для организации %1.';
			 		   							   |en = 'Не удалось определить активный СУЗ для организации %1.'"),
									Шапка.Организация));
		Возврат СообщениеJSON;
		
	КонецЕсли;
	
	Шаблон               = ИнтеграцияИСМПТККлиентСервер.ШаблонКодаМаркировкиПоВидуПродукции(Шапка.ВидПродукции);
	ИдентификаторШаблона = ИнтерфейсИСМПТК.ШаблонКодаМаркировки(Шаблон);
	
	МассивГруппСтрок     = МассивГруппСтрокПоGTINИКоличеству(ТабличнаяЧастьТовары);
	
	Для Каждого ГруппаСтрок Из МассивГруппСтрок Цикл
		
		СообщениеJSON = ИнтеграцияИСМПТК.СтруктураСообщенияJSON();
		СообщениеJSON.Организация       = Шапка.Организация;
		СообщениеJSON.Документ          = ДокументСсылка;
		СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
		СообщениеJSON.ПараметрыЗапроса  = Новый Массив;
		
		ТелоЗапроса = Новый Структура;
		Если Шапка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") Тогда
			ТелоЗапроса.Вставить("contactPerson",     Шапка.ОтветственныйПредставление);
		КонецЕсли;
		
		ТелоЗапроса.Вставить("releaseMethodType", ИнтерфейсИСМПТК.СпособВыпускаВОборот_СУЗ(Шапка.СпособВводаВОборот, "СУЗ"));
		
		Если НЕ Шапка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты")
			И НЕ Шапка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
			ТелоЗапроса.Вставить("createMethodType",   "SELF_MADE");  // SELF_MADE или CEM
			ТелоЗапроса.Вставить("productionOrderId",  Шапка.ИдентификаторПроизводственногоЗаказа);
			ТелоЗапроса.Вставить("products",           Новый Массив);
		Иначе
			ТелоЗапроса.Вставить("factoryId", 		   Шапка.ИдентификаторПроизводства);
			ТелоЗапроса.Вставить("factoryCountry",     Шапка.СтранаПроизводителя);
			ТелоЗапроса.Вставить("productionLineId",   Шапка.ИдентификаторПроизводственнойЛинии);
			ТелоЗапроса.Вставить("productCode",        Шапка.КодПродукта);      // Уточняется обязательность поля для передачи по АПИ
			ТелоЗапроса.Вставить("productDescription", Шапка.ОписаниеПродукта); // Уточняется обязательность поля для передачи по АПИ
			ТелоЗапроса.Вставить("products",           Новый Массив);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.СтранаПроизводства) Тогда
			ТелоЗапроса.Вставить("country", ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шапка.СтранаПроизводства, "КодАльфа2").КодАльфа2);
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из ГруппаСтрок Цикл
			
			СтрокаЗаказаКодовМаркировки = Новый Структура;
			СтрокаЗаказаКодовМаркировки.Вставить("gtin",             СтрокаТЧ.GTIN);
			СтрокаЗаказаКодовМаркировки.Вставить("quantity",         Строка(Формат(СтрокаТЧ.Количество, "ЧГ=")));
			СтрокаЗаказаКодовМаркировки.Вставить("serialNumberType", ИнтерфейсИСМПТК.СпособФормированияСерийногоНомера(СтрокаТЧ.СпособФормированияСерийногоНомера)); // OPERATOR или SELF_MADE
			Если Не Шапка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
				СтрокаЗаказаКодовМаркировки.Вставить("templateId",   ИдентификаторШаблона);
			Иначе
				//У табачной продукции два разных шаблона - проверяем построчно
				СтрокаЗаказаКодовМаркировки.Вставить("templateId",   ПолучитьИдентификаторШаблонаПоШаблонуКода(СтрокаТЧ.Шаблон));
			КонецЕсли;
			Если Шапка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция")
				ИЛИ Шапка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность")
				ИЛИ Шапка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.БезалкогольныеНапитки") Тогда
				СтрокаЗаказаКодовМаркировки.Вставить("cisType", "UNIT"); 
			КонецЕсли;		
				
			Если СтрокаТЧ.СпособФормированияСерийногоНомера = Перечисления.СпособыФормированияСерийногоНомераСУЗИСМПТК.Самостоятельно Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ИдентификаторСтроки", СтрокаТЧ.ИдентификаторСтроки);
				СтрокаЗаказаКодовМаркировки.Вставить("serialNumbers", ТабличнаяЧастьСерийныеНомера.Скопировать(ПараметрыОтбора).ВыгрузитьКолонку("СерийныйНомер"));
			КонецЕсли;
			
			ТелоЗапроса["products"].Добавить(СтрокаЗаказаКодовМаркировки);
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("GTIN",                      СтрокаТЧ.GTIN);
			ПараметрыЗапроса.Вставить("ИдентификаторБизнесЗаказа", "");
			ПараметрыЗапроса.Вставить("ИдентификаторСтрокиЗаказа", СтрокаТЧ.ИдентификаторСтроки);
			ПараметрыЗапроса.Вставить("Шаблон", 				   Шаблон);
						
			СообщениеJSON.ПараметрыЗапроса.Добавить(ПараметрыЗапроса);
			
		КонецЦикла;
		
		ТелоСообщенияJSON = ИнтерфейсИСМПТК.ОбъектВТекстJSON(ТелоЗапроса, Истина);
		
		СообщениеJSON.ТекстСообщенияJSON = ТелоСообщенияJSON;
		СообщениеJSON.ТипСообщения       = Перечисления.ТипыЗапросовИСМПТК.Исходящий;	
		СообщениеJSON.ВидПродукции       = Шапка.ВидПродукции;
		СообщениеJSON.ТребуетсяПодписание       = Истина;
		СообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
		
	КонецЦикла;
	
	Возврат СообщениеJSON;
	
КонецФункции

Функция МассивГруппСтрокПоGTINИКоличеству(ТабличнаяЧастьТовары)
	
	МаксимальноеКоличествоСтрокВЗаказе = 10;
		
	МассивГруппСтрок = Новый Массив;
	
	ТаблицаПодсчетаGTIN = ТабличнаяЧастьТовары.Скопировать(, "GTIN,КоличествоСтрок");
	ТаблицаПодсчетаGTIN.Свернуть("GTIN", "КоличествоСтрок");
	ТабличнаяЧастьТовары.Индексы.Добавить("GTIN");

	Пока Истина Цикл
		
		ТаблицаПодсчетаGTIN.Сортировать("КоличествоСтрок Убыв");
		
		ТекущаяГруппаСтрок = Новый Массив;
		
		Для Каждого СтрокаТаблицыПодсчета Из ТаблицаПодсчетаGTIN Цикл
			
			Если СтрокаТаблицыПодсчета.КоличествоСтрок = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоискаСтрок = Новый Структура("GTIN, СтрокаДобавлена", СтрокаТаблицыПодсчета.GTIN, Ложь);
			ПоискСтрокТовары     = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоискаСтрок);
			
			ВсеСтрокиПоGTINВыбраны = Истина;
			Для Каждого СтрокаТаблицы Из ПоискСтрокТовары Цикл
				Если ТекущаяГруппаСтрок.Количество() = МаксимальноеКоличествоСтрокВЗаказе Тогда
					ВсеСтрокиПоGTINВыбраны = Ложь;
				Иначе
					ТекущаяГруппаСтрок.Добавить(СтрокаТаблицы);
					СтрокаТаблицы.СтрокаДобавлена = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если ВсеСтрокиПоGTINВыбраны Тогда
				СтрокаТаблицыПодсчета.КоличествоСтрок = СтрокаТаблицыПодсчета.КоличествоСтрок - ПоискСтрокТовары.Количество();
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТекущаяГруппаСтрок.Количество() Тогда
			МассивГруппСтрок.Добавить(ТекущаяГруппаСтрок);
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивГруппСтрок;

КонецФункции

Функция НастройкиОбменаСУЗ(Организация) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлассификаторОрганизаций.Ссылка КАК Организация,
	|	ВЫБОР
	|		КОГДА НастройкиОбменаСУЗИСМПТК.Организация ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьНастройкиОбменаСУЗ,
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗИСМПТК.СтанцияУправленияЗаказами ЕСТЬ NULL
	|			ТОГДА НастройкиОбменаСУЗИСМПТК.СтанцияУправленияЗаказами
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтанцияУправленияЗаказами,
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗИСМПТК.СтанцияУправленияЗаказами ЕСТЬ NULL
	|			ТОГДА НастройкиОбменаСУЗИСМПТК.СтанцияУправленияЗаказами.Идентификатор
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗИСМПТК.Адрес ЕСТЬ NULL
	|			ТОГДА НастройкиОбменаСУЗИСМПТК.Адрес
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Сервер,
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗИСМПТК.ИспользоватьЗащищенноеСоединение ЕСТЬ NULL
	|			ТОГДА НастройкиОбменаСУЗИСМПТК.ИспользоватьЗащищенноеСоединение
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьЗащищенноеСоединение,
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗИСМПТК.Порт ЕСТЬ NULL
	|			ТОГДА НастройкиОбменаСУЗИСМПТК.Порт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Порт,
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗИСМПТК.Таймаут ЕСТЬ NULL
	|			ТОГДА НастройкиОбменаСУЗИСМПТК.Таймаут
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Таймаут,
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗИСМПТК.Токен ЕСТЬ NULL
	|			ТОГДА НастройкиОбменаСУЗИСМПТК.Токен
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Токен,
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗИСМПТК.ИмяПользователя ЕСТЬ NULL
	|			ТОГДА НастройкиОбменаСУЗИСМПТК.ИмяПользователя
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИмяПользователя,
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗИСМПТК.ОбменНаСервере ЕСТЬ NULL
	|			ТОГДА НастройкиОбменаСУЗИСМПТК.ОбменНаСервере
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбменНаСервере,
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗИСМПТК.ОбменНаКлиентеПоРасписанию ЕСТЬ NULL
	|			ТОГДА НастройкиОбменаСУЗИСМПТК.ОбменНаКлиентеПоРасписанию
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбменНаКлиентеПоРасписанию,
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗИСМПТК.ОбменНаКлиентеРасписание ЕСТЬ NULL
	|			ТОГДА НастройкиОбменаСУЗИСМПТК.ОбменНаКлиентеРасписание
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ОбменНаКлиентеРасписание
	|ИЗ
	|	Справочник.Организации КАК КлассификаторОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаСУЗИСМПТК КАК НастройкиОбменаСУЗИСМПТК
	|		ПО КлассификаторОрганизаций.Ссылка = НастройкиОбменаСУЗИСМПТК.Организация");
	
	Если ЗначениеЗаполнено(Организация) Тогда 
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	КлассификаторОрганизаций.Ссылка = &Организация";
		
		Запрос.УстановитьПараметр("Организация",  Организация);
	КонецЕсли;
	
	//Получаем предопределенные данные
	АдресСУЗКонстанта = ИнтеграцияИСМПТК.ПолучитьАдресаСерверовИСМПТ().АдресСУЗ;
	АдресСУЗ = ИнтеграцияИСМПТК.ОбработатьАдресИСМПТКонстанта(АдресСУЗКонстанта);
	Если НЕ СтрНайти(АдресСУЗКонстанта, "https://") = 0 Тогда
		Порт = 443;
		Таймаут = 60;
		ИспользоватьЗащищенноеСоединение = Истина;
	Иначе
		Порт = 80;
		Таймаут = 60;
		ИспользоватьЗащищенноеСоединение = Ложь;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивНастроек = Новый Массив;
	
	Если Выборка.Количество() = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЕстьНастройкиОбменаСУЗ Тогда
			
			НастройкаОбменаСУЗ = ИнтерфейсИСМПТК.НоваяНастройкаОбменаСУЗ();
			НастройкаОбменаСУЗ.Сервер                           = АдресСУЗ;
			НастройкаОбменаСУЗ.Порт                             = Порт;
			НастройкаОбменаСУЗ.Таймаут                          = Таймаут;
			НастройкаОбменаСУЗ.ИспользоватьЗащищенноеСоединение = ИспользоватьЗащищенноеСоединение;
			НастройкаОбменаСУЗ.СтанцияУправленияЗаказами        = Выборка.СтанцияУправленияЗаказами;
			НастройкаОбменаСУЗ.Идентификатор                    = Выборка.Идентификатор;
			НастройкаОбменаСУЗ.Токен                            = Выборка.Токен;
			НастройкаОбменаСУЗ.ИмяПользователя					= Выборка.ИмяПользователя;
			НастройкаОбменаСУЗ.Организация 						= Выборка.Организация;
			
			МассивНастроек.Добавить(НастройкаОбменаСУЗ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ?(МассивНастроек.Количество() = 1, МассивНастроек[0], МассивНастроек);
	
КонецФункции

Функция ПолучитьСтатусЗаказаЭмиссииКМ(НастройкаОбменаСУЗ, ВидПродукции) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеОСтатусах",                Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	URLЗапроса = "api/v2/extension/orders?omsId=" + НастройкаОбменаСУЗ.Идентификатор;
	Extension  = СоответствиеВидовПродукцииURL()[ВидПродукции];
	URLЗапроса = СтрЗаменить(URLЗапроса, "extension", Extension);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken", НастройкаОбменаСУЗ.Токен);
	
	РезультатЗапроса = ИнтеграцияИСМПТК.ОтправитьДанныеВСервис(URLЗапроса, Неопределено, Неопределено, "GET", НастройкаОбменаСУЗ, ЗаголовокHTTP);
	РезультатОтправкиЗапроса = ИнтерфейсИСМПТК.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсИСМПТК.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			Иначе
				ВозвращаемоеЗначение.ДанныеОСтатусах = ДанныеОбработки;
			КонецЕсли;
		
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьПричинуОтказаЗаказаЭмиссииКМ(НастройкаОбменаСУЗ, ВидПродукции, СтруктураЗаказа) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеОСтатусах",              Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	URLЗапроса = "api/v2/extension/buffer/status?omsId=" + НастройкаОбменаСУЗ.Идентификатор;
	URLЗапроса = URLЗапроса + "&orderId=" + СтруктураЗаказа.orderId;
	URLЗапроса = URLЗапроса + "&gtin=" + СтруктураЗаказа.GTIN;
	
	Extension = СоответствиеВидовПродукцииURL()[ВидПродукции];
	URLЗапроса = СтрЗаменить(URLЗапроса, "extension", Extension);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken", НастройкаОбменаСУЗ.Токен);
	
	РезультатЗапроса = ИнтеграцияИСМПТК.ОтправитьДанныеВСервис(
	URLЗапроса, Неопределено, Неопределено,
		"GET", НастройкаОбменаСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсИСМПТК.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсИСМПТК.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.ДанныеОСтатусах = ДанныеОбработки;
				
			КонецЕсли;
		
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьКМПоЗаказуНаЭмиссию(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторДокумента, GTIN, Количество, ИдентификаторПоследнегоБлока = "") Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеОКМ",              Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	omsId_ 		= "omsId="     + НастройкаОбменаСУЗ.Идентификатор;
	orderId_ 	= "&orderId="  + ИдентификаторДокумента;
	GTIN_ 		= "&gtin=" 	   + GTIN;
	quantity_ 	= "&quantity=" + Строка(Формат(Количество, "ЧГ="));
	
	blockId_ 	= ?(ЗначениеЗаполнено(ИдентификаторПоследнегоБлока), "&blockId="  + ИдентификаторПоследнегоБлока, ИдентификаторПоследнегоБлока);
	
	URLЗапроса = "api/v2/extension/codes?" + omsId_ + orderId_ + GTIN_ + quantity_ + blockId_;
	Extension  = СоответствиеВидовПродукцииURL()[ВидПродукции];
	URLЗапроса = СтрЗаменить(URLЗапроса, "extension", Extension);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken", 	 НастройкаОбменаСУЗ.Токен);

	РезультатЗапроса = ИнтеграцияИСМПТК.ОтправитьДанныеВСервис(URLЗапроса, Неопределено, Неопределено, "GET", НастройкаОбменаСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсИСМПТК.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсИСМПТК.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.ДанныеОКМ = ДанныеОбработки;
				
			КонецЕсли;
		
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
			
			Объект = ВозвращаемоеЗначение.РезультатОтправкиЗапроса.Объект;
			
			ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При выполнении запроса %1 возникла ошибка.
				     |Код состояния HTTP: %2.
				     |Текст ошибки:'"),
			URLЗапроса,
			РезультатОтправкиЗапроса.КодСостояния);
			
			Если Не Объект = Неопределено Тогда
				Если Объект.Свойство("globalErrors") Тогда
					МассивСообщений = Объект["globalErrors"];
				ИначеЕсли Объект.Свойство("fieldErrors") Тогда
					МассивСообщений = Объект["fieldErrors"];
				Иначе 
					МассивСообщений = Новый Массив;
				КонецЕсли;
				
				Для Каждого СообщениеОбОшибке Из МассивСообщений Цикл
					
					Если ТипЗнч(СообщениеОбОшибке) = Тип("Структура") Тогда 
						ТекстСообщения = СообщениеОбОшибке.fieldError;
					Иначе
						ТекстСообщения = СообщениеОбОшибке;
					КонецЕсли;
					
					ТекстОшибки = ТекстОшибки + "
					| " + ТекстСообщения;
					
				КонецЦикла;
			КонецЕсли;
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьСтатусGTINПоЗаказуНаЭмиссию(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторДокумента, GTIN) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеОКМ",              Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	omsId_ 		= "omsId="     + НастройкаОбменаСУЗ.Идентификатор;
	orderId_ 	= "&orderId="  + ИдентификаторДокумента;
	GTIN_ 		= "&gtin=" 	   + GTIN;
	
	URLЗапроса = "api/v2/extension/codes/blocks?" + omsId_ + orderId_ + GTIN_;
	Extension  = СоответствиеВидовПродукцииURL()[ВидПродукции];
	URLЗапроса = СтрЗаменить(URLЗапроса, "extension", Extension);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken", 	 НастройкаОбменаСУЗ.Токен);

	РезультатЗапроса = ИнтеграцияИСМПТК.ОтправитьДанныеВСервис(URLЗапроса, Неопределено, Неопределено, "GET", НастройкаОбменаСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсИСМПТК.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсИСМПТК.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.ДанныеОКМ = ДанныеОбработки;
				
			КонецЕсли;
		
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
			
			Объект = ВозвращаемоеЗначение.РезультатОтправкиЗапроса.Объект;
			
			ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При выполнении запроса %1 возникла ошибка.
				     |Код состояния HTTP: %2.
				     |Текст ошибки:'"),
			URLЗапроса,
			РезультатОтправкиЗапроса.КодСостояния);
			
			Если Не Объект = Неопределено Тогда
				Если Объект.Свойство("globalErrors") Тогда
					МассивСообщений = Объект["globalErrors"];
				ИначеЕсли Объект.Свойство("fieldErrors") Тогда
					МассивСообщений = Объект["fieldErrors"];
				Иначе 
					МассивСообщений = Новый Массив;
				КонецЕсли;
				
				Для Каждого СообщениеОбОшибке Из МассивСообщений Цикл
					
					Если ТипЗнч(СообщениеОбОшибке) = Тип("Структура") Тогда 
						ТекстСообщения = СообщениеОбОшибке.fieldError;
					Иначе
						ТекстСообщения = СообщениеОбОшибке;
					КонецЕсли;
					
					ТекстОшибки = ТекстОшибки + "
					| " + ТекстСообщения;
					
				КонецЦикла;
			КонецЕсли;
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПовторноПолучитьКМПоЗаказуНаЭмиссию(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторДокумента, GTIN, ИдентификаторБлокаКодов, Количество) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеОКМ",              Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	omsId_ 		= "omsId="     + НастройкаОбменаСУЗ.Идентификатор;
	orderId_ 	= "&orderId="  + ИдентификаторДокумента;
	GTIN_ 		= "&gtin=" 	   + GTIN;
	quantity_ 	= "&quantity=" + Строка(Формат(Количество, "ЧГ="));
	blockId_ 	= "&blockId="  + ИдентификаторБлокаКодов;
	
	URLЗапроса = "api/v2/extension/codes/retry?" + omsId_ + orderId_ + GTIN_ + quantity_ + blockId_;
	Extension  = СоответствиеВидовПродукцииURL()[ВидПродукции];
	URLЗапроса = СтрЗаменить(URLЗапроса, "extension", Extension);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken", 	 НастройкаОбменаСУЗ.Токен);

	РезультатЗапроса = ИнтеграцияИСМПТК.ОтправитьДанныеВСервис(URLЗапроса, Неопределено, Неопределено, "GET", НастройкаОбменаСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсИСМПТК.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсИСМПТК.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.ДанныеОКМ = ДанныеОбработки;
				
			КонецЕсли;
		
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
			
			Объект = ВозвращаемоеЗначение.РезультатОтправкиЗапроса.Объект;
			
			ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При выполнении запроса %1 возникла ошибка.
				     |Код состояния HTTP: %2.
				     |Текст ошибки:'"),
			URLЗапроса,
			РезультатОтправкиЗапроса.КодСостояния);
			
			Если Не Объект = Неопределено Тогда
				МассивСообщений = Объект["globalErrors"];
				Для Каждого СообщениеОбОшибке Из МассивСообщений Цикл 
					ТекстОшибки = ТекстОшибки + "
					| " + СообщениеОбОшибке;
				КонецЦикла;
			КонецЕсли;
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗакрытьПодзаказПоGTIN(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторДокумента, GTIN, ИдентификаторБлокаКодов) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеОКМ",              Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	omsId_ 			= "omsId=" + НастройкаОбменаСУЗ.Идентификатор;
	orderId_ 		= "&orderId=" + ИдентификаторДокумента;
	GTIN_ 			= "&gtin=" + GTIN;
	lastBlockId_ 	= "&lastBlockId=" + ИдентификаторБлокаКодов;
	
	URLЗапроса = "api/v2/extension/buffer/close?" + omsId_ + orderId_ + GTIN_ + lastBlockId_;
	Extension = СоответствиеВидовПродукцииURL()[ВидПродукции];
	URLЗапроса = СтрЗаменить(URLЗапроса, "extension", Extension);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken", НастройкаОбменаСУЗ.Токен);
	
	РезультатЗапроса = ИнтеграцияИСМПТК.ОтправитьДанныеВСервис(
	URLЗапроса, Неопределено, Неопределено,
		"POST", НастройкаОбменаСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсИСМПТК.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсИСМПТК.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.ДанныеОКМ = ДанныеОбработки;
				
			КонецЕсли;
		
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область РаботаСОтчетами_СУЗ

Функция АгрегацияКодовМаркировкиJSON(ДокументСсылка, НастройкаОбменаСУЗ) Экспорт
	
	СписокЗапросов = Новый СписокЗначений;
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	Неопределено			                 КАК ДокументОснование,
	|	
	|	// Общие реквизиты для табака и обуви
	|	Шапка.ВидПродукции                         КАК ВидПродукции,
	|
	|	// Основные реквизиты
	|	Шапка.Организация                		КАК Организация,
	|	Представление(Шапка.Организация) 		КАК ОрганизацияПредставление,
	|	Шапка.ОрганизацияИдентификационныйНомер КАК ИИН,
	|
	|	Шапка.Ответственный                КАК Ответственный,
	|	Представление(Шапка.Ответственный) КАК ОтветственныйПредставление,
	|
	|	// Доп реквизиты
	|	ШапкаДопДанные.ТипАгрегации КАК ТипАгрегации,
	|	ШапкаДопДанные.ИдентификационныйКодЕдиницыАгрегации КАК ИдентификационныйКодЕдиницыАгрегации,
	|	ШапкаДопДанные.КодИдентификацииУпаковки КАК КодИдентификацииУпаковки,
	|	ШапкаДопДанные.ЕмкостьУпаковки КАК ЕмкостьУпаковки,
	|	ШапкаДопДанные.ФактическоеКоличествоШтук КАК ФактическоеКоличествоШтук,
	|
	|	// Доп реквизиты
	|
	|	Шапка.ИдентификаторПроизводственнойЛинии КАК ИдентификаторПроизводственнойЛинии,
	|	Шапка.ИдентификаторПроизводственногоЗаказа КАК ИдентификаторПроизводственногоЗаказа
	|ИЗ
	|	Документ.АгрегацияКодовМаркировкиСУЗИСМПТК КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АгрегацияКодовМаркировкиСУЗИСМПТК.Упаковки КАК ШапкаДопДанные
	|		ПО ШапкаДопДанные.Ссылка = Шапка.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	АгрегированныеКМ.КодИдентификации КАК КодИдентификации
	|	
	|ИЗ
	|	Документ.АгрегацияКодовМаркировкиСУЗИСМПТК.АгрегированныеКМ КАК АгрегированныеКМ
	|ГДЕ
	|	АгрегированныеКМ.Ссылка = &Ссылка
	|",
	"СписокКМ");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ИнтеграцияИСМПТК.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	
	ТабличнаяЧастьКМ = РезультатЗапроса["СписокКМ"].Выгрузить();
	
	Если ТабличнаяЧастьКМ.Количество() = 0 Тогда
		
		СообщениеJSON = ИнтеграцияИСМПТК.СтруктураСообщенияJSON();
		СообщениеJSON.Документ = ДокументСсылка;
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.';
		|en = 'Нет данных для выгрузки.'");
		
		Возврат СообщениеJSON;
		
	КонецЕсли;
	
	СтанцияУправленияЗаказами = Неопределено;
	Организация 		= НастройкаОбменаСУЗ.Организация;
	РезультатПроверки 	= ИнтерфейсИСМПТК.ПроверитьДоступностьСУЗ_V2(Шапка.ВидПродукции, НастройкаОбменаСУЗ);
	
	Если РезультатПроверки.Доступен = Истина Тогда
		СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
	КонецЕсли;
	
	Если СтанцияУправленияЗаказами = Неопределено Тогда
		
		СообщениеJSON = ИнтеграцияИСМПТК.СтруктураСообщенияJSON();
		СообщениеJSON.Организация       = Шапка.Организация;
		СообщениеJSON.Документ          = ДокументСсылка;
		СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
		СообщениеJSON.ТекстОшибки		= НСтр("ru = 'Для организации не настроен обмен с СУЗ!';
											   |en = 'Для организации не настроен обмен с СУЗ!'");
		Возврат СообщениеJSON;
		
	КонецЕсли;
	
	СообщениеJSON = ИнтеграцияИСМПТК.СтруктураСообщенияJSON();
	СообщениеJSON.Организация       = Шапка.Организация;
	СообщениеJSON.Документ          = ДокументСсылка;
	СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
	СообщениеJSON.ПараметрыЗапроса  = Новый Массив;
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("participantId", 		Шапка.ИИН);
	
	Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.Табачная 
		ИЛИ Шапка.ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты Тогда 
		ТелоЗапроса.Вставить("productionLineId", 		Шапка.ИдентификаторПроизводственнойЛинии);
		ТелоЗапроса.Вставить("productionOrderId", 		Шапка.ИдентификаторПроизводственногоЗаказа);
	КонецЕсли;
	
	ТелоЗапроса.Вставить("aggregationUnits",	Новый Массив);
	
	//Реализуется только одна строка агрегации
	СтрокаАгрегацииКодовМаркировки = Новый Структура;
	СтрокаАгрегацииКодовМаркировки.Вставить("aggregatedItemsCount",		Шапка.ФактическоеКоличествоШтук);
	СтрокаАгрегацииКодовМаркировки.Вставить("aggregationType",			ИнтерфейсИСМПТК.ТипыАгрегации_СУЗ(Шапка.ТипАгрегации));
	СтрокаАгрегацииКодовМаркировки.Вставить("aggregationUnitCapacity",	Шапка.ЕмкостьУпаковки);
	СтрокаАгрегацииКодовМаркировки.Вставить("unitSerialNumber",			Шапка.КодИдентификацииУпаковки);
		
	СтрокаАгрегацииКодовМаркировки.Вставить("sntins", ТабличнаяЧастьКМ.ВыгрузитьКолонку("КодИдентификации"));
	
	ТелоЗапроса["aggregationUnits"].Добавить(СтрокаАгрегацииКодовМаркировки);
	
	ТелоСообщенияJSON = ИнтерфейсИСМПТК.ОбъектВТекстJSON(ТелоЗапроса, Истина);
	
	СообщениеJSON.ТекстСообщенияJSON = ТелоСообщенияJSON;
	СообщениеJSON.ТипСообщения       = Перечисления.ТипыЗапросовИСМПТК.Исходящий;	
	СообщениеJSON.ВидПродукции       = Шапка.ВидПродукции;
	СообщениеJSON.ТребуетсяПодписание       = Истина;
	СообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
	
	Возврат СообщениеJSON;
	
КонецФункции

Функция ПолучитьСтатусАгрегацииКМ(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторОтчета) Экспорт
	
	Возврат ПолучитьСтатусОтчетаСУЗОбщийМетод(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторОтчета);
	
КонецФункции

Функция НанесениеКодовМаркировкиJSON(ДокументСсылка, НастройкаОбменаСУЗ) Экспорт
	
	СписокЗапросов = Новый СписокЗначений;
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                             КАК Номер,
	|	Шапка.Дата                              КАК Дата,
	|	Неопределено			                КАК ДокументОснование,
	|	
	|	Шапка.ВидПродукции                      КАК ВидПродукции,
	|
	|	Шапка.Организация                		КАК Организация,
	|	Представление(Шапка.Организация) 		КАК ОрганизацияПредставление,
	|
	|	Шапка.Ответственный                		КАК Ответственный,
	|	Представление(Шапка.Ответственный) 		КАК ОтветственныйПредставление,
	|
	|	Шапка.ТипИспользования 					КАК ТипИспользования,
	|	Шапка.НомерПроизводственнойСерии 		КАК НомерПроизводственнойСерии,
	|	Шапка.НомерПроизводственнойСерии 		КАК ИдентификаторПроизводственнойЛинии,
	|	Шапка.СрокГодности 						КАК СрокГодности
	|ИЗ
	|	Документ.НанесениеКодовМаркировкиСУЗИСМПТК КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.КодМаркировки КАК КодМаркировки
	|ИЗ
	|	Документ.НанесениеКодовМаркировкиСУЗИСМПТК.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|",
	"СписокКМ");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ИнтеграцияИСМПТК.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	
	ТабличнаяЧастьКМ = РезультатЗапроса["СписокКМ"].Выгрузить();
	
	Если ТабличнаяЧастьКМ.Количество() = 0 Тогда
		
		СообщениеJSON = ИнтеграцияИСМПТК.СтруктураСообщенияJSON();
		СообщениеJSON.Документ 	  = ДокументСсылка;
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.';
										 |en = 'Нет данных для выгрузки.'");
		
		Возврат СообщениеJSON;
		
	КонецЕсли;
	
	СтанцияУправленияЗаказами = Неопределено;
	Организация 		= НастройкаОбменаСУЗ.Организация;
	РезультатПроверки 	= ИнтерфейсИСМПТК.ПроверитьДоступностьСУЗ_V2(Шапка.ВидПродукции, НастройкаОбменаСУЗ);
	
	Если РезультатПроверки.Доступен = Истина Тогда
		СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
	КонецЕсли;
	
	Если СтанцияУправленияЗаказами = Неопределено Тогда
		
		СообщениеJSON = ИнтеграцияИСМПТК.СтруктураСообщенияJSON();
		СообщениеJSON.Организация       = Шапка.Организация;
		СообщениеJSON.Документ          = ДокументСсылка;
		СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
		СообщениеJSON.ТекстОшибки		= НСтр("ru = 'Для организации не настроен обмен с СУЗ!';
											   |en = 'Для организации не настроен обмен с СУЗ!'");
		Возврат СообщениеJSON;
		
	КонецЕсли;
	
	СообщениеJSON = ИнтеграцияИСМПТК.СтруктураСообщенияJSON();
	СообщениеJSON.Организация       = Шапка.Организация;
	СообщениеJSON.Документ          = ДокументСсылка;
	СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
	СообщениеJSON.ПараметрыЗапроса  = Новый Массив;
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("usageType", ПолучитьТипИспользованияПриНанесении(Шапка.ТипИспользования));
	
	Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.МолочнаяПродукция 
		ИЛИ Шапка.ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты Тогда 
		ТелоЗапроса.Вставить("seriesNumber",   	  Шапка.НомерПроизводственнойСерии);
		ТелоЗапроса.Вставить("expirationDate", 	  Формат(Шапка.СрокГодности, "ДФ=yyyy-MM-dd"));
		
	ИначеЕсли Шапка.ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.Табачная Тогда
		ТелоЗапроса.Вставить("productionLineId ", Шапка.ИдентификаторПроизводственнойЛинии);
		
	КонецЕсли;
	
	ТелоЗапроса.Вставить("sntins", Новый Массив);
	
	ТаблицаКодовМаркировки = ТабличнаяЧастьКМ.ВыгрузитьКолонку("КодМаркировки");
	Для Каждого СтрокаКод Из ТаблицаКодовМаркировки Цикл
		ДанныеШтрихкода = Новый Структура();
		ДанныеШтрихкода.Вставить("ФорматBase64", Истина);
		ДанныеШтрихкода.Вставить("Штрихкод",     СтрокаКод);
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ДекодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
		ТелоЗапроса["sntins"].Добавить(ДанныеШтрихкода.Штрихкод);
	КонецЦикла;
			
	ТелоСообщенияJSON = ИнтерфейсИСМПТК.ОбъектВТекстJSON(ТелоЗапроса, Истина);
	
	СообщениеJSON.ТекстСообщенияJSON = ТелоСообщенияJSON;
	СообщениеJSON.ТипСообщения       = Перечисления.ТипыЗапросовИСМПТК.Исходящий;	
	СообщениеJSON.ВидПродукции       = Шапка.ВидПродукции;
	СообщениеJSON.ТребуетсяПодписание       = Ложь;
	СообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
	
	Возврат СообщениеJSON;
	
КонецФункции

Функция ПолучитьТипИспользованияПриНанесении(ТипИспользования) 
	
	Если ТипИспользования = ПредопределенноеЗначение("Перечисление.ТипыИспользованияСУЗИСМПТК.НанесениеПодтверждено") Тогда
		Возврат "VERIFIED";
	ИначеЕсли ТипИспользования = ПредопределенноеЗначение("Перечисление.ТипыИспользованияСУЗИСМПТК.Напечатан") Тогда
		Возврат "PRINTED";
	Иначе
		Возврат "VERIFIED";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтатусНанесенияКМ(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторОтчета) Экспорт
	
	Возврат ПолучитьСтатусОтчетаСУЗОбщийМетод(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторОтчета);
	
КонецФункции

Функция ПолучитьСтатусОтчетаСУЗОбщийМетод(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторОтчета) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеОСтатусах",              	Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = 'Не удалось подключиться к серверу СУЗ, требуется обновление ключа сессии!'");
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = "api/v2/extension/report/info?omsId=" + НастройкаОбменаСУЗ.Идентификатор + "&reportId=" + ИдентификаторОтчета;
	Extension = СоответствиеВидовПродукцииURL()[ВидПродукции];
	URLЗапроса = СтрЗаменить(URLЗапроса, "extension", Extension);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken", 	 НастройкаОбменаСУЗ.Токен);
	
	РезультатЗапроса = ИнтеграцияИСМПТК.ОтправитьДанныеВСервис(URLЗапроса, Неопределено, Неопределено, "GET", НастройкаОбменаСУЗ, ЗаголовокHTTP);
	РезультатОтправкиЗапроса = ИнтерфейсИСМПТК.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсИСМПТК.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.ДанныеОСтатусах = ДанныеОбработки;
				
			КонецЕсли;
		
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 500 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции
	
#КонецОбласти

#Область Биллинг

Функция ПолучитьСостояниеСчетовПоВсемГруппам(ТокенАвторизации) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеОСчетах",                  Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	URLЗапроса = СтрШаблон("api/v3/true-api/elk/product-groups/balance/all");
	РезультатОтправкиЗапроса = ПолучитьБалансПоВсемГруппам(ТокенАвторизации);
	
	РезультатОтправкиЗапроса.Вставить("ОтветПолучен", ?(РезультатОтправкиЗапроса.КодСостояния = Неопределено, Ложь, Истина)); 
	
	Попытка
		ОтветСервераОбъект = ИнтерфейсИСМПТК.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстОтвета, Ложь);
	Исключение
		ОтветСервераОбъект = ИнтерфейсИСМПТК.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстОтвета, Истина);
	КонецПопытки;
	Если ОтветСервераОбъект <> Неопределено Тогда
		РезультатОтправкиЗапроса.Вставить("ТекстВходящегоСообщенияJSON", ИнтерфейсИСМПТК.ОбъектВТекстJSON(ОтветСервераОбъект));
	Иначе
		РезультатОтправкиЗапроса.Вставить("ТекстВходящегоСообщенияJSON", РезультатОтправкиЗапроса.ТекстОтвета);
	КонецЕсли;
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсИСМПТК.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Ложь);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.ДанныеОСчетах = ДанныеОбработки;
				
			КонецЕсли;
		
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СоздатьСчетНаОплату(Параметры, ТокенАвторизации) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеОСчетах",                  Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	URLЗапроса = СтрШаблон("api/v3/true-api/elk/crm-api/prequests");
	РезультатОтправкиЗапроса = ВыполнитьСозданиеСчетаНаОплату(
		Параметры.НомерЛицевогоСчета, Параметры.Сумма, Параметры.АдресПочты, ТокенАвторизации);
	
	РезультатОтправкиЗапроса.Вставить("ОтветПолучен", ?(РезультатОтправкиЗапроса.КодСостояния = Неопределено, Ложь, Истина)); 
	
	Попытка
		ОтветСервераОбъект = ИнтерфейсИСМПТК.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстОтвета, Ложь);
	Исключение
		ОтветСервераОбъект = ИнтерфейсИСМПТК.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстОтвета, Истина);
	КонецПопытки;
	Если ОтветСервераОбъект <> Неопределено Тогда
		РезультатОтправкиЗапроса.Вставить("ТекстВходящегоСообщенияJSON", ИнтерфейсИСМПТК.ОбъектВТекстJSON(ОтветСервераОбъект));
	Иначе
		РезультатОтправкиЗапроса.Вставить("ТекстВходящегоСообщенияJSON", РезультатОтправкиЗапроса.ТекстОтвета);
	КонецЕсли;
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсИСМПТК.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Ложь);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.ДанныеОСчетах = ДанныеОбработки;
				
			КонецЕсли;
		
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получение счета на оплату по указанному лицевому счету
//
//
Функция ВыполнитьСозданиеСчетаНаОплату(ИдентификаторДоговора, Сумма, АдресПочты, ТокенАвторизации, СтруктурнаяЕдиница = Неопределено) Экспорт
	
	АдресРесурса = "api/v3/true-api/elk/crm-api/prequests";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("contractId", ИдентификаторДоговора);
	ПараметрыЗапроса.Вставить("amount",     Сумма);
	ПараметрыЗапроса.Вставить("sendto",     АдресПочты);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапроса);
	ТекстОтправки = ЗаписьJSON.Закрыть();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ТекстОтправки, , ТокенАвторизации);
	
КонецФункции

// Получение значения баланса лицевого счета для запрашиваемой товарной группы
//
//
Функция ПолучитьБалансПоТоварнойГруппе(ИдентификаторТоварнойГруппы, ТокенАвторизации, СтруктурнаяЕдиница = Неопределено) Экспорт
	
	АдресРесурса = СтрШаблон("api/v3/true-api/elk/product-groups/balance?productGroupId=%1", ИдентификаторТоварнойГруппы);
	Заголовки = Новый Соответствие();
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, , "GET", ТокенАвторизации);
	
КонецФункции

// Получение значения баланса лицевых счетов для каждой его товарной группы
//
//
Функция ПолучитьБалансПоВсемГруппам(ТокенАвторизации, СтруктурнаяЕдиница = Неопределено) Экспорт
	
	АдресРесурса = СтрШаблон("api/v3/true-api/elk/product-groups/balance/all");
	Заголовки = Новый Соответствие();
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, , "GET", ТокенАвторизации);
	
КонецФункции

#КонецОбласти

Функция СоответствиеВидовПродукцииURL()
	
	//БМ_ИСМПТ НА_РАЗВИТИЕ	Товарные группы
	СоответствиеВидовПродкуцииURL = Новый Соответствие;
	СоответствиеВидовПродкуцииURL.Вставить(Перечисления.ВидыПродукцииИСМПТК.Обувная, 				"shoes");
	СоответствиеВидовПродкуцииURL.Вставить(Перечисления.ВидыПродукцииИСМПТК.Табачная, 				"tobacco");
	СоответствиеВидовПродкуцииURL.Вставить(Перечисления.ВидыПродукцииИСМПТК.Алкогольная, 			"alcohol");
	СоответствиеВидовПродкуцииURL.Вставить(Перечисления.ВидыПродукцииИСМПТК.МолочнаяПродукция, 		"milk");
	СоответствиеВидовПродкуцииURL.Вставить(Перечисления.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты, "pharma");
	СоответствиеВидовПродкуцииURL.Вставить(Перечисления.ВидыПродукцииИСМПТК.ЛегкаяПромышленность, 	"lp");
	
	Возврат СоответствиеВидовПродкуцииURL;
	
КонецФункции

Процедура ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрока, ДанныеРазбора, НайденнаяНоменклатура) 
	
	Если ДанныеРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
		//Логистические (транспортные) упаковки в зависимости от Товарной группы могут быть в двух форматах:
		//GS-128 (code128) или в его упрощенном виде - SSCC. Первый вариант допускает наличие дополнительных данных (групп идентификации),
		//использование букв, при этом в доп. группах может содержаться информация о товарах. 
		//Второй - только цифры и строго прописанные группы данных, при этом информации о товарах там не содержится.
		//Соответственно, если разбирался штрихкод SSCC, данные о GTIN отсутствуют.
		//Если GS-128, то присутствуют. 
		Если Не ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN") Тогда
			GTIN = "";
			НоваяСтрока.EAN  = ""; 
		Иначе
			GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN;
			НоваяСтрока.EAN  = ДанныеРазбора.СоставКодаМаркировки.EAN;
		КонецЕсли;
			
		GTINВерхнегоУровня = "";
		НайденнаяНоменклатура = ИнтеграцияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура();
	ИначеЕсли ДанныеРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
		GTIN = "";
		GTINВерхнегоУровня = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.GTINПоКодуМаркировки(ДанныеРазбора.КодМаркировки);
		НоваяСтрока.EAN    = ДанныеРазбора.СоставКодаМаркировки.EAN;
		EANВерхнегоУровня  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодEANИзGTIN(GTINВерхнегоУровня);
		ДанныеНоменклатуры = ИнтеграцияИСМПТКПереопределяемый.ПолучитьНоменклатуруПоШтрихкоду(EANВерхнегоУровня);
		Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
			НайденнаяНоменклатура = ДанныеНоменклатуры.Номенклатура;
		Иначе
			НайденнаяНоменклатура = ДанныеНоменклатуры;
		КонецЕсли;
	Иначе
		GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN;
		GTINВерхнегоУровня = ДанныеРазбора.СоставКодаМаркировки.GTIN;
		НоваяСтрока.EAN    = ДанныеРазбора.СоставКодаМаркировки.EAN;
		ДанныеНоменклатуры = ИнтеграцияИСМПТКПереопределяемый.ПолучитьНоменклатуруПоШтрихкоду(НоваяСтрока.EAN);
		Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
			НайденнаяНоменклатура = ДанныеНоменклатуры.Номенклатура;
		Иначе
			НайденнаяНоменклатура = ДанныеНоменклатуры;
		КонецЕсли;
	КонецЕсли;	
	
	НоваяСтрока.GTIN = GTIN;
	Если Не ДанныеРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
		НоваяСтрока.GTINВерхнегоУровня = GTINВерхнегоУровня;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#КонецЕсли