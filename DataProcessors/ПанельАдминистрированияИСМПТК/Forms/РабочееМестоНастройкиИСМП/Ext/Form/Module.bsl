
#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	//Для генерации транспортных кодов SSCC в Агрегации КМ
	ЗаполнитьЗначениеИнтервалаСерийКодов();
	// Обновление состояния элементов
	ИнтеграцияИСМПТКПереопределяемый.ПроверитьЗначениеТиповыхОпцийУчетаМаркировки();
		
	//Настройки мобильного приложения
	Если ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НастройкиПодключенияМобильноеПриложениеИСМПТК) Тогда
		ЗаполнитьНастройкиПодключения();
	Иначе
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаМобильноеПриложение", "Видимость", Ложь);
	КонецЕсли;
	//Заполнение справочной информации о сервисе маркировки
	ЗаполнитьВерсиюСервиса();
	
	//Проверка заполнения адресов серверов ИС МПТ
	ПроверитьЗначенияАдресовСерверовИУстановитьРежим();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	ОбновитьИнтерфейсПрограммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПредставлениеСтатусаКриптобиблиотеки();
	ЗаполнитьВерсиюМобильногоПриложения();
	
	УправлениеФормой();
	ЭтаФорма.Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновленМодульКриптографииИСМПТ" Тогда
		ОбновитьПредставлениеСтатусаКриптобиблиотеки();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеКонстантУчетаМаркировки" Тогда
		ЭтаФорма.Прочитать();	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СрокХраненияИспользованныхКодовМаркировкиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокХраненияВыгруженныхКодовМаркировкиИСМПТКПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

#Область КонстантыУчетаТГ

&НаКлиенте
Процедура ВестиУчетМаркируемойОбувиИСМПТПриИзменении(Элемент)
	
	Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.ПроверитьЗначениеКонстанты("ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК")
		И Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.ПроверитьЗначениеКонстанты("ВестиУчетМаркируемойОбувиИСМПТК") 
		И РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.ПроверитьЗначениеКонстанты("ИспользоватьСервис1СМаркировкаИСМПТК") Тогда 
		ТекстВопроса = НСтр("ru = 'При работе с обувной маркируемой продукцией для корректной обработки значений штрихкодов SSCC рекомендуется включить поддержку двойного формата транспортных кодов (см. Дополнительные настройки подсистемы).'") 
							+ Символы.ПС + НСтр("ru = 'Включить эту настройку?'");
		ВключитьПоддержкудвойногоФорматаКодовПослеВопроса = Новый ОписаниеОповещения("ВключитьПоддержкудвойногоФорматаКодовПослеВопроса", ЭтотОбъект);
		ПоказатьВопрос(ВключитьПоддержкудвойногоФорматаКодовПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;	
		
	УстановитьЗначениеКонстантыУчетаТГ(Элемент);
	ВестиУчетМаркируемойПродукцииИСМППриИзмененииНаСервере();
	Оповестить("КонстантыМаркировки_Изменение");
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетТабачнойПродукцииИСМППриИзменении(Элемент)
	
	УстановитьЗначениеКонстантыУчетаТГ(Элемент);
	ВестиУчетМаркируемойПродукцииИСМППриИзмененииНаСервере();
	Оповестить("КонстантыМаркировки_Изменение", Новый Структура(), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетМаркируемойМолочкиИСМПТКПриИзменении(Элемент)
	
	УстановитьЗначениеКонстантыУчетаТГ(Элемент);
	ВестиУчетМаркируемойПродукцииИСМППриИзмененииНаСервере();
	Оповестить("КонстантыМаркировки_Изменение");
		
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетМаркируемогоАлкоголяИСМПТКПриИзменении(Элемент)
	
	УстановитьЗначениеКонстантыУчетаТГ(Элемент);
	ВестиУчетМаркируемойПродукцииИСМППриИзмененииНаСервере();
	Оповестить("КонстантыМаркировки_Изменение");
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетМаркируемыхЛекарствИСМПТКПриИзменении(Элемент)
	
	УстановитьЗначениеКонстантыУчетаТГ(Элемент);
	ВестиУчетМаркируемойПродукцииИСМППриИзмененииНаСервере();
	Оповестить("КонстантыМаркировки_Изменение");
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетМаркируемогоТекстиляИСМПТКПриИзменении(Элемент)
	
	УстановитьЗначениеКонстантыУчетаТГ(Элемент);
	ВестиУчетМаркируемойПродукцииИСМППриИзмененииНаСервере();
	Оповестить("КонстантыМаркировки_Изменение");
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ИспользоватьНацКаталогИСМПТКПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическуюОтправкуПолучениеДанныхИСМППриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическоеОбновлениеДанныхНацКаталогаИСМПТКПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресСервераИСМПТПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресСервераИСМПТСУЗПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресСервераНацКаталогаИСМПТКПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГенерацияSSCCКонецИнтервалаПриИзменении(Элемент)
	
	ГенерацияSSCCИнтервалПриИзменении();	
		
КонецПроцедуры

&НаКлиенте
Процедура ГенерацияSSCCНачалоИнтервалаПриИзменении(Элемент)
	
	ГенерацияSSCCИнтервалПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ГенерацияSSCCИнтервалПриИзменении() 
	
	//Перед изменением интервала проверяем, есть ли в РС Уже сгенерированные коды. 
	РегистрЗаполнен = ПроверитьДанныеВШтрихкодыSSCCИСМПТК();
	Если РегистрЗаполнен Тогда
		//Если они есть, изменения интервала могут привести к дублированию или разрывам в последовательности - предупреждаем пользователя об этом.
		ПродолжитьИзменениеИнтервалаСерийныхНомеров = Новый ОписаниеОповещения("ПродолжитьИзменениеИнтервалаСерийныхНомеров", ЭтаФорма);
		ПоказатьВопрос(ПродолжитьИзменениеИнтервалаСерийныхНомеров, НСтр("ru = 'В базе уже выполнялась генерация SSCC, изменение интервала может привести к нарушению последовательности серийных номеров. Продолжить?'"), РежимДиалогаВопрос.ОКОтмена);
	Иначе
		//Если данных нет, изменяем в обычном режиме
		ПроверитьИнтервалГенерацииSSCC();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДанныеПоНоменклатуреВДокументахСУЗИСМПТКПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоОпределениеЛогистическихКодовИСМПТКПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоПроверкаВалидностиКодаИСМПТКПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТКПриИзменении(Элемент)
	
	//Проверка по товарным группам и оповещение о возможных проблемах
	Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.ПроверитьЗначениеКонстанты("ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК") 
		И Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.ПроверитьЗначениеКонстанты("ВестиУчетМаркируемойОбувиИСМПТК") Тогда 
		ТекстСообщения = НСтр("ru = 'Важно! Поддержка двойного формата транспортных кодов необходима при работе с обувной продукцией. При текущих настройках учета по товарным группам включение этой опции может привести к заполнению некорректных данных SSCC в документах!'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;	
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.ПроверитьЗначениеКонстанты("ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК") Тогда
		НаборКонстант.ДобавлятьИдентификаторКодамSSCCПриПечатиИСМПТК = Ложь;
		Подключаемый_ПриИзмененииРеквизита(Элементы.ДобавлятьИдентификаторКодамSSCCПриПечатиИСМПТК, Истина);
	КонецЕсли;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлятьИдентификаторКодамSSCCПриПечатиИСМПТКПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМППриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	УправлениеФормой();
		
КонецПроцедуры

&НаКлиенте
Процедура НеЗапрашиватьКМТабачнойПродукцииВРозничномКонтуреИСМПТКПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСервис1СМаркировкаИСМПТКПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьОтправкуПолучениеИСМП(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеОтправкиПолученияИСМП", ЭтотОбъект);
	
	ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеОтправкиПолученияИСМП);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеДанныхНациональногоКаталогаИСМПТК(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеОбменаСНацКаталогом", ЭтотОбъект);
	
	ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеОбменаСНацКаталогом);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОчисткуПулаКодовМаркировкиИСМП(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеОчисткиПулаКодовМаркировкиИСМП", ЭтотОбъект);
	
	ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеОчисткиПулаКодовИСМП);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПодключенияКСУЗ(Команда)
	
	ОткрытьФорму("РегистрСведений.НастройкиОбменаСУЗИСМПТК.ФормаСписка", , ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокСУЗ(Команда)
	
	ОткрытьФорму("Справочник.СтанцииУправленияЗаказамиИСМПТК.ФормаСписка", , ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ИзменитьРасписаниеОтправкиПолученияИСМП(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеОтправкиПолученияИСМП = РасписаниеЗадания;
	
	ИзменитьРасписаниеЗадания("ОтправкаПолучениеДанныхСУЗИСМПТК", РасписаниеОтправкиПолученияИСМП);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеОбменаСНацКаталогом(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеОбменаСНацКаталогом = РасписаниеЗадания;
	
	ИзменитьРасписаниеЗадания("ПолучениеДанныхНациональногоКаталогаИСМПТК", РасписаниеОбменаСНацКаталогом);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеОчисткиПулаКодовМаркировкиИСМП(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеОчисткиПулаКодовИСМП = РасписаниеЗадания;
	
	ИзменитьРасписаниеЗадания("ОчисткаПулаКодовМаркировкиИСМПТК", РасписаниеОчисткиПулаКодовИСМП);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьИспользованиеЗадания(ИмяЗадания, Использование)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Истина И Использование);
	РегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание.УникальныйИдентификатор, ПараметрыЗадания);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
	
	Элемент = Элементы[ИмяЗадания];
	УстановитьТекстНадписиРегламентнойНастройки(РегЗадание, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРасписаниеЗадания(ИмяЗадания, РасписаниеРегламентногоЗадания)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
	РегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание.УникальныйИдентификатор, ПараметрыЗадания);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
	
	Элемент = Элементы[ИмяЗадания];
	УстановитьТекстНадписиРегламентнойНастройки(РегЗадание, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеРегламентногоЗадания)
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиЗаданий()
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Обновление статусов СУЗ
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", "ОтправкаПолучениеДанныхСУЗИСМПТК");
	ЗаданиеОтправкаПолучениеДанныхИСМПТК = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
	
	РасписаниеОтправкиПолученияИСМП = ЗаданиеОтправкаПолучениеДанныхИСМПТК.Расписание;
	
	Элементы.ОтправкаПолучениеДанныхСУЗИСМПТК.Доступность = ЗаданиеОтправкаПолучениеДанныхИСМПТК.Использование;
	УстановитьТекстНадписиРегламентнойНастройки(ЗаданиеОтправкаПолучениеДанныхИСМПТК, Элементы.ОтправкаПолучениеДанныхСУЗИСМПТК);
	//////
	
	//Очистка Пула
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", "ОчисткаПулаКодовМаркировкиИСМПТК");
	ЗаданиеОчисткаПулаКодовМаркировкиИСМПТК = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
	
	РасписаниеОчисткиПулаКодовИСМП = ЗаданиеОчисткаПулаКодовМаркировкиИСМПТК.Расписание;
	
	Элементы.ОчисткаПулаКодовМаркировкиИСМПТК.Доступность = ЗаданиеОчисткаПулаКодовМаркировкиИСМПТК.Использование;
	УстановитьТекстНадписиРегламентнойНастройки(ЗаданиеОчисткаПулаКодовМаркировкиИСМПТК, Элементы.ОчисткаПулаКодовМаркировкиИСМПТК);
	//////
	
	//Обновление Нац.каталога
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", "ПолучениеДанныхНациональногоКаталогаИСМПТК");
	ЗаданиеПолучениеДанныхНациональногоКаталогаИСМПТК = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
	
	РасписаниеОчисткиПулаКодовИСМП = ЗаданиеПолучениеДанныхНациональногоКаталогаИСМПТК.Расписание;
	
	Элементы.ПолучениеДанныхНациональногоКаталогаИСМПТК.Доступность = ЗаданиеПолучениеДанныхНациональногоКаталогаИСМПТК.Использование;
	УстановитьТекстНадписиРегламентнойНастройки(ЗаданиеПолучениеДанныхНациональногоКаталогаИСМПТК, Элементы.ПолучениеДанныхНациональногоКаталогаИСМПТК);
	//////
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьТекстНадписиРегламентнойНастройки(Задание, Элемент)
	
	Перем ТекстРасписания, РасписаниеАктивно;
	
	ИнтеграцияИСМПТК.ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(Задание, ТекстРасписания, РасписаниеАктивно);
	Элемент.Заголовок = ТекстРасписания;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
		ОбновитьИнтерфейс = Истина;
	КонецЕсли;
	
	Если Результат <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	Результат = Новый Структура;

	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат);
	УправлениеФормой(РеквизитПутьКДанным);
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка возможности изменения значения константы.
	Если НЕ ИнтеграцияИСМПТКПереопределяемый.ПроверитьВозможностьИзменения(РеквизитПутьКДанным, ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ОбновитьФормуНастройкиПриЗаписиПодчиненныхКонстант(ЭтотОбъект, КонстантаИмя, КонстантаЗначение);
		
	КонецЕсли;
		
	ИспользуетсяОчистаКодов = НаборКонстант.СрокХраненияИспользованныхКодовМаркировкиИСМПТК + НаборКонстант.СрокХраненияВыгруженныхКодовМаркировкиИСМПТК;
	
	Если КонстантаИмя = "СрокХраненияИспользованныхКодовМаркировкиИСМПТК" Тогда
		ИзменитьИспользованиеЗадания("ОчисткаПулаКодовМаркировкиИСМПТК", ИспользуетсяОчистаКодов);
	КонецЕсли;
	
	Если КонстантаИмя = "СрокХраненияВыгруженныхКодовМаркировкиИСМПТК" Тогда
		ИзменитьИспользованиеЗадания("ОчисткаПулаКодовМаркировкиИСМПТК", ИспользуетсяОчистаКодов);
	КонецЕсли;
	
	Если КонстантаИмя = "ИспользоватьАвтоматическуюОтправкуПолучениеДанныхИСМПТК" Тогда
		ИзменитьИспользованиеЗадания("ОтправкаПолучениеДанныхСУЗИСМПТК", НаборКонстант.ИспользоватьАвтоматическуюОтправкуПолучениеДанныхИСМПТК);
	КонецЕсли;
	
	Если КонстантаИмя = "ИспользоватьАвтоматическоеОбновлениеДанныхНацКаталогаИСМПТК" Тогда
		ИзменитьИспользованиеЗадания("ПолучениеДанныхНациональногоКаталогаИСМПТК", НаборКонстант.ИспользоватьАвтоматическоеОбновлениеДанныхНацКаталогаИСМПТК);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой(РеквизитПутьКДанным = Неопределено)
	
	////////ОБЩИЕ СВЕДЕНИЯ////////
	//КОНСТАНТЫ УЧЕТА
	ВедетсяУчетМарокПоОбуви    = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойОбувиИСМПТК");
	ВедетсяУчетМарокПоТабаку   = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемогоТабакаИСМПТК");
	ВедетсяУчетМарокПоФарме    = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемыхЛекарствИСМПТК");
	ВедетсяУчетМарокПоАлкоголю = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемогоАлкоголяИСМПТК");
	ВедетсяУчетМарокПоМолочке  = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойМолочкиИСМПТК");
	ВедетсяУчетМарокОбщая 	   = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМПТК");
	ИспользованиеСервиса	   = ?(Не ПравоДоступа("Просмотр", Метаданные.Константы.ИспользоватьСервис1СМаркировкаИСМПТК), Ложь, ПолучитьФункциональнуюОпцию("ИспользоватьСервис1СМаркировкаИСМПТК"));
	//////////////////////////////
	
	//===========================
	
	///////ПЕРЕОПРЕДЕЛЯЕМЫЕ///////
	//Получение параметров настроек модуля с учетом особенностей конфигурации.
	МассивПереопределяемыхНастроек = СобытияФормИСМПТКПереопределяемый.ПолучитьСписокПереопределяемыхНастроекФормыОбменаИСМПТ();
	Для Каждого СтруктураПараметров Из МассивПереопределяемыхНастроек Цикл
		
		ИмяЭлемента = СтруктураПараметров.ИмяЭлементаФормы;
		Свойство	= СтруктураПараметров.Свойство;
		ЗначениеСвойства = СтруктураПараметров.Значение;
		
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, Свойство, ЗначениеСвойства);
		
	КонецЦикла;
	//////////////////////////////
	
	//===========================
	
	///////ОБЩИЕ НАСТРОЙКИ///////
	
	//Видимость разделов
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДополнительно", 			   "Видимость", ИспользованиеСервиса);
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРаботаССУЗ", 				   "Видимость", ИспользованиеСервиса);
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКриптографияИСМПТ", 		   "Видимость", ИспользованиеСервиса);
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаМобильноеПриложение",		   "Видимость", ИспользованиеСервиса);
	
	//Группа ГруппаНастройкиОбъектовБиблиотеки частично доступна без использования сервиса маркировки
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРаботаСНоменклатурой",   "Видимость", ИспользованиеСервиса);
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АвтоматическийОбменССервером", "Видимость", ИспользованиеСервиса);
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаГенерацияШтрихкодов",    "Видимость", ИспользованиеСервиса);
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РозничныеПродажи", "Видимость", ВедетсяУчетМарокПоТабаку);
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Прочее", 		  "Видимость", ИспользованиеСервиса);
		
	//ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВестиУчетМаркируемойМолочкиИСМПТК", "Видимость", ИспользованиеСервиса);
	
	//Указание адресов ИС МПТ и СУЗ
	РазрешеноРучноеЗаполнение = РежимИспользованияСерверов = 3; //Режим самостоятельного заполнения серверов
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АдресСервераИСМПТ",  	 "ТолькоПросмотр", Не РазрешеноРучноеЗаполнение);
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АдресСервераИСМПТСУЗ", 	 "ТолькоПросмотр", Не РазрешеноРучноеЗаполнение);
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияУказаниеАдреса", "Видимость", 	   РазрешеноРучноеЗаполнение);
	//На текущий момент интеграция не завершена!
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АдресСервераНацКаталогаИСМПТК", "Видимость", Ложь);
	
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДобавлятьИдентификаторКодамSSCCПриПечатиИСМПТК", "Доступность", Константы.ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК.Получить());
	//////////////////////////////
	
	//===========================
	
	////////НАСТРОЙКИ СУЗ/////////
	//Регламентные задания
	//Рег.задания
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Элементы.ГруппаНастройкиРегламентногоЗадания.Видимость = Ложь;
	Иначе
		УстановитьНастройкиЗаданий();
	КонецЕсли;
	
	//Обмен с Национальным каталогом
	//На текущий момент интеграция не завершена!
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНастройкиРегламентногоЗаданияСинхронизацияНацКаталог", "Видимость", Ложь);
	//////////////////////////////
	
	//===========================
	
	/////МОБИЛЬНОЕ ПРИЛОЖЕНИЕ/////
	ИспользоватьПриложение = ?(Не ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НастройкиПодключенияМобильноеПриложениеИСМПТК), 
							   Ложь, Константы.ИспользоватьМобильноеПриложениеИСМПТК.Получить());
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Соединение", 		 "Доступность", ИспользоватьПриложение);
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПроверитьСоединение", "Доступность", ИспользоватьПриложение);
	//////////////////////////////
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеФОВедениеУчетаПоМаркировке()
	
	//БМ_ИСМПТ НА_РАЗВИТИЕ	Товарные группы
	Если Не НаборКонстант.ВестиУчетМаркируемогоТабакаИСМПТК 
		И Не НаборКонстант.ВестиУчетМаркируемойОбувиИСМПТК 
		И Не НаборКонстант.ВестиУчетМаркируемыхЛекарствИСМПТК 
		И Не НаборКонстант.ВестиУчетМаркируемойМолочкиИСМПТК
		И Не НаборКонстант.ВестиУчетМаркируемогоАлкоголяИСМПТК
		И Не НаборКонстант.ВестиУчетМаркируемогоТекстиляИСМПТК Тогда
		Константы.ВестиУчетМаркируемойПродукцииИСМПТК.Установить(Ложь);
	Иначе
		Константы.ВестиУчетМаркируемойПродукцииИСМПТК.Установить(Истина);
	КонецЕсли;
	
	ИнтеграцияИСМПТКПереопределяемый.УстановитьЗначениеТиповыхКонстантУчетаМаркировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеКонстантыУчетаТГ(Элемент)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	ОбновитьИнтерфейсПрограммы();
	
КонецПроцедуры

#Область АдресаСервераИСМПТ

&НаСервере
Функция ПолучитьАдресаПоУмолчанию()
	
	//БМ_ИСМПТ КОНТРОЛЬНАЯ_ТОЧКА	Ссылки на сервера ИС МПТ
	ПредопределенныеАдресаСерверов = Новый Структура();
	//Адреса боевого контура
	ПредопределенныеАдресаСерверов.Вставить("ИСМПТ_Прод", "https://elk.prod.markirovka.ismet.kz/");
	ПредопределенныеАдресаСерверов.Вставить("СУЗ_Прод",   "https://omscloud.ismet.kz/");
	
	Возврат ПредопределенныеАдресаСерверов;
	
КонецФункции

&НаКлиенте
Процедура РежимЗаполненияАдресаПриИзменении(Элемент)
	
	Если ТекущееЗначениеРежимИспользованияСерверов = 3 Тогда //ручное заполнение
		//Нужно уточнить о сохранении значений в полях
		ТекстВопроса = НСтр("ru = 'При изменении режима параметров подключения указанные самостоятельно адреса серверов будут потеряны. Продолжить?'");
		ПродолжитьЗаполнениеАдресовПослеОтвета = Новый ОписаниеОповещения("ПродолжитьЗаполнениеАдресовПослеОтвета", ЭтотОбъект);
		ПоказатьВопрос(ПродолжитьЗаполнениеАдресовПослеОтвета, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		Если РежимИспользованияСерверов = 1 Тогда 
			
			ЗаполнитьАдресаСерверов("Боевой");
			ТекущееЗначениеРежимИспользованияСерверов = 1;
			
		ИначеЕсли РежимИспользованияСерверов = 3 Тогда
			
			ЗаполнитьАдресаСерверов("Самостоятельно");
			ТекущееЗначениеРежимИспользованияСерверов = 3;
			
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗаполнениеАдресовПослеОтвета(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		Если РежимИспользованияСерверов = 1 Тогда 
			ЗаполнитьАдресаСерверов("Боевой");
			ТекущееЗначениеРежимИспользованияСерверов = 1;
		КонецЕсли;
	Иначе
		//Сохраняем предыдущее значение
		ТекущееЗначениеРежимИспользованияСерверов = 3;
		РежимИспользованияСерверов = 3;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресаСерверов(ИспользуемыйКонтур) Экспорт
	
	ПредопределенныеАдресаСерверов = ПолучитьАдресаПоУмолчанию();
	
	ИСМПТ_Прод = ПредопределенныеАдресаСерверов.ИСМПТ_Прод;
	СУЗ_Прод   = ПредопределенныеАдресаСерверов.СУЗ_Прод;
	
	Если ИспользуемыйКонтур = "Боевой" Тогда
		
		Константы.АдресСервераИСМПТК.Установить(ИСМПТ_Прод);
		Константы.АдресСервераСУЗИСМПТК.Установить(СУЗ_Прод);
		РазрешеноРучноеЗаполнение = Ложь;
	Иначе	
		РазрешеноРучноеЗаполнение = Истина;
	КонецЕсли;
	
	//Национальный каталог требует уточнения по адресу сервера, на данный момент значение заполняется тестовым контуром 
	Если Не ЗначениеЗаполнено(НаборКонстант.АдресСервераНацКаталогаИСМПТК) Тогда
		Константы.АдресСервераНацКаталогаИСМПТК.Установить("https://nc.stage.ismet.kz/");
	КонецЕсли;
	
	ЭтаФорма.Прочитать();
			
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗначенияАдресовСерверовИУстановитьРежим()
	
	ПредопределенныеАдресаСерверов = ПолучитьАдресаПоУмолчанию();
	
	ИСМПТ_Прод = ПредопределенныеАдресаСерверов.ИСМПТ_Прод;
	СУЗ_Прод   = ПредопределенныеАдресаСерверов.СУЗ_Прод;
	
	ТекущийАдресИСМПТ = Константы.АдресСервераИСМПТК.Получить();
	ТекущийАдресСУЗ	  = Константы.АдресСервераСУЗИСМПТК.Получить();
	
	Если Не ЗначениеЗаполнено(ТекущийАдресИСМПТ) 
		И Не ЗначениеЗаполнено(ТекущийАдресСУЗ) Тогда
		//Первый запуск, адреса не сохранены, устанавливаем боевой контур по умолчанию
		ТекущееЗначениеРежимИспользованияСерверов = 1; 
		РежимИспользованияСерверов = 1;
		ЗаполнитьАдресаСерверов("Боевой"); //Устанавливаем значения констант
	Иначе
		Если ТекущийАдресИСМПТ = ИСМПТ_Прод
			И ТекущийАдресСУЗ = СУЗ_Прод Тогда 
			//Сохранен адрес боевого контура, выставляем соответствующую настройку
			ТекущееЗначениеРежимИспользованияСерверов = 1; 
			РежимИспользованияСерверов = 1;
		Иначе	
			//Режим произвольного заполнения. Адрес указан либо в произвольной форме, либо тестовый стенд.
			ТекущееЗначениеРежимИспользованияСерверов = 3; 
			РежимИспользованияСерверов = 3;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ВестиУчетМаркируемойПродукцииИСМППриИзмененииНаСервере()
	
	УстановитьЗначениеФОВедениеУчетаПоМаркировке();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция МаркировкаТоваровВключена() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМПТК");
	
КонецФункции

&НаКлиенте
Процедура ПроверитьИнтервалГенерацииSSCC()
	
	Если ГенерацияSSCCКонецИнтервала <= ГенерацияSSCCНачалоИнтервала Тогда
		ТекстСообщения = НСтр("ru='Неверно заполнены границы: конец интервала должен быть больше его начала! Данные не сохранены.'");
		ЗаполнитьЗначениеИнтервалаСерийКодов();
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,, ГенерацияSSCCКонецИнтервала, ГенерацияSSCCКонецИнтервала);
	Иначе
		//Обновляем значение константы ИнтервалГенерацииСерийШтрихкодаSSCCИСМПТК
		ЗаполнитьЗначениеКонстантыИнтервал();		
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначениеКонстантыИнтервал() Экспорт
	
	ИнтервалНомеров = Новый Структура();
	ИнтервалНомеров.Вставить("НачалоИнтервала", ГенерацияSSCCНачалоИнтервала);
	ИнтервалНомеров.Вставить("КонецИнтервала",  ГенерацияSSCCКонецИнтервала);
	ИнтервалНомеровХранилище = Новый ХранилищеЗначения(ИнтервалНомеров);
	Константы.ИнтервалГенерацииСерийШтрихкодаSSCCИСМПТК.Установить(ИнтервалНомеровХранилище);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначениеИнтервалаСерийКодов();
	
	ДанныеИнтервала = Константы.ИнтервалГенерацииСерийШтрихкодаSSCCИСМПТК.Получить().Получить();
	Если ТипЗнч(ДанныеИнтервала) = Тип("Структура") Тогда
		ГенерацияSSCCНачалоИнтервала = ДанныеИнтервала.НачалоИнтервала;
		ГенерацияSSCCКонецИнтервала  = ДанныеИнтервала.КонецИнтервала;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьИзменениеИнтервалаСерийныхНомеров(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		//Продолжаем изменение в стандартном режиме
		ПроверитьИнтервалГенерацииSSCC();
	Иначе
		//Восстанавливаем знаечние интервалов из сохраненной константы
		ЗаполнитьЗначениеИнтервалаСерийКодов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДанныеВШтрихкодыSSCCИСМПТК();
	
	РегистрЗаполнен = Ложь;
	ШтрихкодыУпаковок = РегистрыСведений.ШтрихкодыSSCCИСМПТК;
	НаборыШтрихкодов = ШтрихкодыУпаковок.СоздатьНаборЗаписей();
	НаборыШтрихкодов.Прочитать();
	
	Если Не НаборыШтрихкодов.Количество() = 0 Тогда
		РегистрЗаполнен = Истина;
	КонецЕсли;
	
	Возврат РегистрЗаполнен;	
	
КонецФункции

&НаКлиенте
Процедура СкопироватьВБуферОбмена(Команда)
	
	#Если Не ВебКлиент И Не МобильныйКлиент Тогда
		
		ОбъектКопирования = Новый COMОбъект("htmlfile"); 
		ОбъектКопирования.ParentWindow.ClipboardData.SetData("Text", ТехническаяПоддержкаАдрес);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПоддержкудвойногоФорматаКодовПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		НаборКонстант.ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК = Истина;
		Подключаемый_ПриИзмененииРеквизита(Элементы.ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК, Истина);
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗначениеСвязаннойКонстанты(ИмяКонстанты, УстанавливаемоеЗначение) 
	
	Константы[ИмяКонстанты].Установить(УстанавливаемоеЗначение);
		
КонецПроцедуры

#КонецОбласти

#Область Криптобиблиотека

&НаКлиенте
Процедура ОбновитьПредставлениеСтатусаКриптобиблиотеки()
	
	ОбновитьПредставлениеСтатусаКриптобиблиотекиНаКлиенте(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКриптография(ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ, БиблиотекаЗагружена)
	
	ЭтаФорма.Элементы.КартинкаБиблиотекаУстановлена.Видимость = БиблиотекаЗагружена И Не ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ;	
	ЭтаФорма.Элементы.КартинкаБиблиотекаНеОбновлена.Видимость = ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ;	
	ЭтаФорма.Элементы.ГруппаБиблиотекаНеУстановлена.Видимость = НЕ БиблиотекаЗагружена;
	
	ЭтаФорма.Элементы.ГруппаДанныеБД.Видимость 			   	  = БиблиотекаЗагружена;
	ЭтаФорма.Элементы.ГруппаВерсияБиблиотеки.Видимость		  = БиблиотекаЗагружена;
	ЭтаФорма.Элементы.НадписьБиблиотекаУстановлена.Видимость  = БиблиотекаЗагружена И Не ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ;
	ЭтаФорма.Элементы.НадписьБиблиотекаНеОбновлена.Видимость  = ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ;

	Если ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ Тогда
		ЭтаФорма.Элементы.УстановитьКриптобиблиотеку.Видимость = ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ;
		ЭтаФорма.Элементы.УстановитьКриптобиблиотеку.Заголовок = "Обновить";
	ИначеЕсли Не БиблиотекаЗагружена Тогда
		ЭтаФорма.Элементы.УстановитьКриптобиблиотеку.Видимость = Не БиблиотекаЗагружена;
		ЭтаФорма.Элементы.УстановитьКриптобиблиотеку.Заголовок = "Установить";
	Иначе
		ЭтаФорма.Элементы.УстановитьКриптобиблиотеку.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРаботуНЦА(Команда)	
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ИнформацияОСистеме = Символы.ПС + "Сведения об аппаратном и программном обеспечении:";
	ИнформацияОСистеме = ИнформацияОСистеме + Символы.ПС + "ОС: " + СистемнаяИнформация.ВерсияОС;
	ИнформацияОСистеме = ИнформацияОСистеме + Символы.ПС + "Версия 1С:" + СистемнаяИнформация.ВерсияПриложения;
	ИнформацияОСистеме = ИнформацияОСистеме + Символы.ПС + "Тип платформы:" + СистемнаяИнформация.ТипПлатформы;	
	ИнформацияОСистеме = ИнформацияОСистеме + Символы.ПС + "Тип процессора:" + СистемнаяИнформация.Процессор;	
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();
	ВерсияЗагруженная = "";
	Результат = Контейнер.УдалосьПодключитьКриптопровайдерНаКлиенте(ВерсияЗагруженная, Ложь, Истина);
	ВерсияЗагруженная = СтрЗаменить(ВерсияЗагруженная, ",", ".");
	
	Если Результат Тогда
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Библиотека успешно подключена! Версия: %1 %2'"), СокрЛП(ВерсияЗагруженная), Символы.ПС + ИнформацияОСистеме);
	Иначе	
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось подключить библиотеку криптографии. Возможно она не установлена или возникла ошибка при попытке ее подключения. %1 %2'"), Символы.ПС + ОписаниеОшибки(), ИнформацияОСистеме);
	КонецЕсли;
	ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеСтатусаКриптобиблиотекиНаКлиенте(Форма)
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();
	ВерсияЗагруженная = "";
	Контейнер.УдалосьПодключитьКриптопровайдерНаКлиенте(ВерсияЗагруженная,, Истина);//Получаем текущую установленую версию из константы
	
	БиблиотекаЗагружена = ЗначениеЗаполнено(ВерсияЗагруженная); 	
	ВерсияВнешнегоМодуляКриптографии = ?(ЗначениеЗаполнено(ВерсияЗагруженная), СтрЗаменить(Строка(ВерсияЗагруженная), ",","."), "--");
	ВерсияМакетаКриптобиблиотеки = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ВерсияКомпонентыНЦАВБазе();
	
	Форма.ВерсияКриптобиблиотеки   = ВерсияМакетаКриптобиблиотеки;
	Форма.ВерсияКриптобиблиотекиБД = ВерсияВнешнегоМодуляКриптографии; 	
	Форма.Элементы.ГруппаБиблиотекаУстановлена.Видимость = БиблиотекаЗагружена;	
	
	ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ = Ложь;
	Если БиблиотекаЗагружена Тогда
		// Проверяем, соответствует ли версия загруженной библиотеки версии макета
		Если ВерсияВнешнегоМодуляКриптографии = ВерсияМакетаКриптобиблиотеки Тогда 
			//Установлена актуальная, проверяем доступность:
			РезультатПроверки = Контейнер.КриптопровайдерПодключается(); 
		Иначе
			//Требуется обновление
			ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ = Истина;
			РезультатПроверки = Ложь;
		КонецЕсли;
	Иначе
		РезультатПроверки = Ложь;
	КонецЕсли;   
	
	Если МаркировкаТоваровВключена() Тогда	
		ОчиститьСообщения();
		Если БиблиотекаЗагружена И НЕ РезультатПроверки Тогда
			ТекстОшибки = НСтр("ru='Библиотека криптографии недоступна: требуется обновление.'");
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		ИначеЕсли Не БиблиотекаЗагружена Тогда 
			ТекстОшибки = НСтр("ru='Библиотека криптографии недоступна.'");
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьКриптография(ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ, БиблиотекаЗагружена);
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКриптобиблиотеку(Команда)	
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();
	СсылкаНаМодуль = Контейнер.АдресБиблиотекиКриптографии(УникальныйИдентификатор);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановкаКомпонентыЗавершение", ЭтаФорма);
	НачатьУстановкуВнешнейКомпоненты(ОписаниеОповещения, СсылкаНаМодуль);
	ОбновитьПовторноИспользуемыеЗначения(); 

КонецПроцедуры

&НаКлиенте
Процедура УстановкаКомпонентыЗавершение(Результат)Экспорт
	
	Оповестить("ОбновленМодульКриптографииИСМПТ");
	
КонецПроцедуры

#КонецОбласти

#Область МобильноеПриложение

&НаСервере
Процедура ПроверитьСоединениеНаСервере()
	
	Прокси = ОбменДаннымиМобильноеПриложениеМаркировкаИСМПТК.УстановитьСоединениеССервером();
	
	Если Прокси = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтветСериализованный =  Прокси.Test();
	Ответ = ОбменДаннымиМобильноеПриложениеМаркировкаИСМПТК.Десериализовать(ОтветСериализованный);
	
	Текст = НСтр("ru = '"+Ответ.Message+"'");
	
	ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоединение(Команда)
	
	ЗаписатьНастройкиПодключения();
	ПроверитьСоединениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяТочкиПодключенияИСМПТКПриИзменении(Элемент)
	
	ЗаписатьНастройкиПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяСервисаИСМПТКПриИзменении(Элемент)
	
	ЗаписатьНастройкиПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура URIПространстваИменСервисаИСМПТКПриИзменении(Элемент)
	
	ЗаписатьНастройкиПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьWSСсылкиИСМПТКПриИзменении(Элемент)
	
	ЗаписатьНастройкиПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПользователяИСМПТКПриИзменении(Элемент)
	
	ЗаписатьНастройкиПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольИСМПТКПриИзменении(Элемент)
	
	ЗаписатьНастройкиПодключения();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиПодключения()
	
	НаборЗаписей = РегистрыСведений.НастройкиПодключенияМобильноеПриложениеИСМПТК.СоздатьНаборЗаписей();
	Движение = НаборЗаписей.Добавить();
	Движение.ПутьWSСсылкиИСМПТК = ПутьWSСсылкиИСМПТК;
	Движение.URIПространстваИменСервисаИСМПТК = URIПространстваИменСервисаИСМПТК;
	Движение.ИмяСервисаИСМПТК = ИмяСервисаИСМПТК;
	Движение.ИмяТочкиПодключенияИСМПТК = ИмяТочкиПодключенияИСМПТК;
	Движение.ИмяПользователяИСМПТК = ИмяПользователяИСМПТК;
	Движение.ПарольИСМПТК = ПарольИСМПТК;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиПодключения()
	
	НаборДанных = РегистрыСведений.НастройкиПодключенияМобильноеПриложениеИСМПТК.Выбрать();
	НаборДанных.Следующий();
	
	ПутьWSСсылкиИСМПТК = НаборДанных.ПутьWSСсылкиИСМПТК;
	URIПространстваИменСервисаИСМПТК = НаборДанных.URIПространстваИменСервисаИСМПТК;
	ИмяСервисаИСМПТК = НаборДанных.ИмяСервисаИСМПТК;
	ИмяТочкиПодключенияИСМПТК = НаборДанных.ИмяТочкиПодключенияИСМПТК;
	ИмяПользователяИСМПТК = НаборДанных.ИмяПользователяИСМПТК;
	ПарольИСМПТК = НаборДанных.ПарольИСМПТК;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВерсиюСервиса()
	
	Информация = ИнтеграцияИСМПТКПереопределяемый.ПолучитьИнформациюОСервисе();
	ВерсияСервиса = Информация.Основная;
	ИмяКонфигурации = Информация.Конфигурация;
	ВерсияБиблиотекиМаркировки = Информация.Библиотека;
	ТехническаяПоддержкаАдрес = "markirovka@1c-rating.kz";
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВерсиюМобильногоПриложения()
	
	ВерсияМобильногоПриложения = ИнтеграцияИСМПТКВызовСервера.ПолучитьТекущиюВерсиюМобильногоПриложения();
	
КонецПроцедуры

#КонецОбласти