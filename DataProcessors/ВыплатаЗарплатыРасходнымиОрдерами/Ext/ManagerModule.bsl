#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура Автозаполнение(Объект) Экспорт
	
	ЗначениеТаймера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ТекстЗапрос = 	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплатеОрганизаций.Физлицо,
	|	ЕСТЬNULL(ЕСТЬNULL(РасходныйКассовыйОрдер.Ссылка, РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка), &ПустойРКО) КАК РКО,
	|	НЕ ЕСТЬNULL(ЕСТЬNULL(РасходныйКассовыйОрдер.Проведен, РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.Проведен), ЛОЖЬ) КАК Отметка,
	|	СУММА(ЗарплатаКВыплатеОрганизаций.Сумма + ЗарплатаКВыплатеОрганизаций.ДепонированнаяСумма) КАК Сумма
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ПО ЗарплатаКВыплатеОрганизаций.Ссылка = РасходныйКассовыйОрдер.ПлатежнаяВедомость
	|			И ЗарплатаКВыплатеОрганизаций.Физлицо = РасходныйКассовыйОрдер.Контрагент
	|			И (РасходныйКассовыйОрдер.ВидОперации = &ВыплатаЗаработнойПлатыРаботнику)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
	|		ПО ЗарплатаКВыплатеОрганизаций.Ссылка = РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость
	|			И (РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.ВидОперации = &ВыплатаЗаработнойПлатыПоВедомостям)
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизаций.ВыплаченностьЗарплаты = &Выплачено
	|	И ЗарплатаКВыплатеОрганизаций.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизаций.Физлицо,
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка,
	|	НЕ ЕСТЬNULL(ЕСТЬNULL(РасходныйКассовыйОрдер.Проведен, РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.Проведен), ЛОЖЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗарплатаКВыплатеОрганизаций.Физлицо.Наименование";	
	
	Запрос = Новый Запрос(ТекстЗапрос);
	Запрос.УстановитьПараметр("Ссылка",Объект.ПлатежнаяВедомость);
	Запрос.УстановитьПараметр("ПустойРКО",Документы.РасходныйКассовыйОрдер.ПустаяСсылка());
	Запрос.УстановитьПараметр("Выплачено",Перечисления.ВыплаченностьЗарплаты.Выплачено);
	Запрос.УстановитьПараметр("ВыплатаЗаработнойПлатыРаботнику",Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику);
	Запрос.УстановитьПараметр("ВыплатаЗаработнойПлатыПоВедомостям",Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям);
	         
	Объект.РКО.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("Обработка ""выплата зарплаты расходными ордерами"" (заполнение)", ЗначениеТаймера);
	
КонецПроцедуры // Автозаполнение()

// Изменяет даты у существующих документов РКО по отмеченным строкам
//
// Параметры
//  НоваяДатаДок - новое значение даты, которую надо установить
//
Процедура ИзменитьДатыРКО(НоваяДатаДок, Объект) Экспорт
	
	Для Каждого СтрокаТаблицы Из Объект.РКО Цикл
		
		Если СтрокаТаблицы.Отметка 
				И ЗначениеЗаполнено(СтрокаТаблицы.РКО) 
				И НачалоДня(СтрокаТаблицы.РКО.Дата) <> НачалоДня(НоваяДатаДок) Тогда
			
			ДокументРКО 		= СтрокаТаблицы.РКО.ПолучитьОбъект();
			ДокументРКО.Дата	= Объект.ДатаФормирования;
			
			Если ДокументРКО.Проведен Тогда
				Попытка 
					ДокументРКО.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Дата документа %1 не изменена!'"), СтрокаТаблицы.РКО);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
				КонецПопытки;
			Иначе
					ДокументРКО.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Создает документы РКО по отмеченным строкам
//
// Параметры
//  нет
//
Процедура СоздатьРКО(Объект) Экспорт
	
	Основание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru = 'Платежная ведомость № %1 от %2'"), 
												Объект.ПлатежнаяВедомость.Номер, 
												Формат(Объект.ПлатежнаяВедомость.Дата, "ДФ=дд.ММ.гггг"));
	
	Для Каждого СтрокаТаблицы Из Объект.РКО Цикл
		
		Если СтрокаТаблицы.Отметка И НЕ ЗначениеЗаполнено(СтрокаТаблицы.РКО) Тогда
			
			ДокументРКО 									= Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			ДокументРКО.Дата		 						= Объект.ДатаФормирования;
			ДокументРКО.ВидОперации							= Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику;
			ДокументРКО.Контрагент							= СтрокаТаблицы.ФизЛицо;
			ДокументРКО.ПлатежнаяВедомость					= Объект.ПлатежнаяВедомость;
			ДокументРКО.Основание							= Основание;
			ДокументРКО.Организация							= Объект.Организация;
			ДокументРКО.СтруктурноеПодразделениеОтправитель = Объект.СтруктурноеПодразделение;
			ДокументРКО.СтруктурноеПодразделениеПолучатель 	= Объект.СтруктурноеПодразделение;
			ДокументРКО.СтатьяДвиженияДенежныхСредств 		= Объект.СтатьяДвиженияДенежныхСредств;
			ДокументРКО.СчетКасса							= ПланыСчетов.Типовой.ДенежныеСредстваВКассе;
			ДокументРКО.СуммаДокумента						= СтрокаТаблицы.Сумма;
			ДокументРКО.Касса								= Объект.Касса;
			ДокументРКО.Ответственный						= Объект.Ответственный;
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументРКО, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
			УправлениеДенежнымиСредствамиСервер.ЗаполнитьРеквизитыРасчетногоДокумента(ДокументРКО, ДокументРКО.РасшифровкаПлатежа);
			ДокументРКО.ВалютаДокумента						= Константы.ВалютаРегламентированногоУчета.Получить(); // зарплата только в валюте регл. учета
			Документы.РасходныйКассовыйОрдер.ПодставитьРеквизитыФизЛица(СтрокаТаблицы.ФизЛицо, ДокументРКО);
			ДокументРКО.Записать();
	
			СтрокаТаблицы.РКО		= ДокументРКО.Ссылка;
			СтрокаТаблицы.Ссылка 	= ДокументРКО.Ссылка;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры 

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Расходный кассовый ордер
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РасходныйКассовыйОрдер";
	КомандаПечати.Представление = НСтр("ru = 'Расходный кассовый ордер'");
	КомандаПечати.НеВыполнятьЗаписьВФорме = Истина;
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
		
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать расходной накладной
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасходныйКассовыйОрдер");
	Если НужноПечататьМакет Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"РасходныйКассовыйОрдер",
			НСтр("ru = 'Расходный кассовый ордер'"),
			Документы.РасходныйКассовыйОрдер.ПечатьРКО(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.РасходныйКассовыйОрдер.КО2");
	КонецЕсли;

КонецПроцедуры

#КонецЕсли