
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПредставлениеСтатусаКриптобиблиотеки();
	
	ИнициализацияСтатусовСервиса();
	
	Элементы.СтраницаКриптографическаяБиблиотека.Доступность = ИспользоватьОбменЭТД;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьОбменЭТД = Константы.ИспользоватьОбменЭТД.Получить();
	
	АдресСервисаЭТД = ЭТДКлиентСервер.АдресПродуктивногоСтенда();
	
	ПараметрыЭТД = ЭТДСерверПовтИсп.ПолучитьПараметрыЭТД();
	Если ПараметрыЭТД.Свойство("ИспользоватьВнешнююКриптографиюДляКомпоненты") Тогда
		ИспользоватьВнешнююКриптографиюДляКомпоненты = ПараметрыЭТД.ИспользоватьВнешнююКриптографиюДляКомпоненты;
	КонецЕсли;
	
	МестоУстановкиБиблиотеки = Константы.МестоВыполненияКриптографическихОпераций.Получить();
	ИнформационнаяБазаФайловая = ЭТДСервер.ИнформационнаяБазаФайловая();
	
	Если МестоУстановкиБиблиотеки = Перечисления.МестаВыполненияКриптографическихОпераций.ПустаяСсылка() Тогда
		МестоУстановкиБиблиотеки = Перечисления.МестаВыполненияКриптографическихОпераций.НаСервере;
		Константы.МестоВыполненияКриптографическихОпераций.Установить(МестоУстановкиБиблиотеки);
	КонецЕсли;
	
	Если ИнформационнаяБазаФайловая Тогда
		Элементы.МестоУстановкиБиблиотеки.Видимость = Ложь;
		Если МестоУстановкиБиблиотеки <> Перечисления.МестаВыполненияКриптографическихОпераций.НаКлиенте Тогда
			МестоУстановкиБиблиотеки = Перечисления.МестаВыполненияКриптографическихОпераций.НаКлиенте;
			Константы.МестоВыполненияКриптографическихОпераций.Установить(МестоУстановкиБиблиотеки);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаДоступ.ОтображениеСтраниц       = ОтображениеСтраницФормы.Нет;
	Элементы.ГруппаДоступСервис.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаСервереБезКонтекста
Процедура ИспользоватьОбменЭТДПриИзмененииНаСервере(ИспользоватьОбменЭТД, АдресСервисаЭТД, ИспользоватьВнешнююКриптографиюДляКомпоненты)
	
	Константы.ИспользоватьОбменЭТД.Установить(ИспользоватьОбменЭТД);
	
	Если ИспользоватьОбменЭТД Тогда
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("АдресСервисаЭТД", АдресСервисаЭТД);
		ПараметрыЗаполнения.Вставить("ИспользоватьВнешнююКриптографиюДляКомпоненты", ИспользоватьВнешнююКриптографиюДляКомпоненты);
		ЭТДСервер.ЗаполнитьПараметрыЭТД(Истина, ПараметрыЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбменЭТДПриИзменении(Элемент)
	
	ИспользоватьОбменЭТДПриИзмененииНаСервере(ИспользоватьОбменЭТД, АдресСервисаЭТД, ИспользоватьВнешнююКриптографиюДляКомпоненты);
	
	ИнициализацияСтатусовСервиса();
	
	Элементы.СтраницаКриптографическаяБиблиотека.Доступность = ИспользоватьОбменЭТД;
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВнешнююКриптографиюДляКомпонентыПриИзменении(Элемент)
	
	Если ИспользоватьОбменЭТД Тогда
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("АдресСервисаЭТД", АдресСервисаЭТД);
		ПараметрыЗаполнения.Вставить("ИспользоватьВнешнююКриптографиюДляКомпоненты", ИспользоватьВнешнююКриптографиюДляКомпоненты);
		ЭТДВызовСервера.ЗаполнитьПараметрыЭТД(Истина, ПараметрыЗаполнения);
	Иначе
		ИспользоватьВнешнююКриптографиюДляКомпоненты = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьСопоставлениеДолжностей(Команда)  
	
	ОткрытьФормуПоВыбору("СопоставлениеДолжностей"); 
	
КонецПроцедуры   

&НаКлиенте
Процедура ОткрытьСопоставлениеПричинРасторжения(Команда)
	
	ОткрытьФормуПоВыбору("СопоставлениеПричинРасторжения"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСопоставлениеПрофилейНавыков(Команда)
	
	ОткрытьФормуПоВыбору("СопоставлениеПрофилейНавыков");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПоВыбору(ИмяФормы)
	
	Если ИмяФормы = "СопоставлениеДолжностей" Тогда
		ОткрытьФорму("Обработка.ОбменЭТД.Форма.СопоставлениеДолжностей");
	ИначеЕсли ИмяФормы = "СопоставлениеПричинРасторжения" Тогда
		ОткрытьФорму("РегистрСведений.СопоставлениеПричинРасторженияЭТД.ФормаСписка");
	ИначеЕсли ИмяФормы = "СопоставлениеПрофилейНавыков" Тогда
		ОткрытьФорму("РегистрСведений.СопоставлениеПрофилейНавыковЭТД.ФормаСписка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновленМодульКриптографииЭТД" Тогда
		ОбновитьПредставлениеСтатусаКриптобиблиотеки();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПроверитьСтатусы() Экспорт
	
	ПараметрыЭТД = ЭТДКлиентПовтИсп.ПолучитьПараметрыЭТД();
	
	СтатусВебСервиса = ЭТДКлиентСервер.ПроверкаСтатусаСервиса(ПараметрыЭТД.АдресСервисаЭТД, ПараметрыЭТД.АдресПроверкиДоступностиСервиса);
	СтатусЕСУТД		 = ЭТДКлиентСервер.ПроверкаСтатусаСервиса(ПараметрыЭТД.АдресСервисаЭТД, ПараметрыЭТД.АдресПроверкиДоступностиЕСУТД);
	
	Если СтатусВебСервиса Тогда
		Элементы.ГруппаДоступСервис.ТекущаяСтраница = Элементы.СтраницаДоступСервисУспешно;
	Иначе
		Элементы.ГруппаДоступСервис.ТекущаяСтраница = Элементы.СтраницаДоступСервисОшибка;
	КонецЕсли;
	
	Если СтатусЕСУТД Тогда
		Элементы.ГруппаДоступ.ТекущаяСтраница = Элементы.СтраницаДоступУспешно;
	Иначе
		Элементы.ГруппаДоступ.ТекущаяСтраница = Элементы.СтраницаДоступОшибка;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияСтатусовСервиса()
	
	Элементы.ГруппаДоступ.Видимость = ИспользоватьОбменЭТД;
	Элементы.ГруппаДоступСервис.Видимость = ИспользоватьОбменЭТД;
	
	Если ИспользоватьОбменЭТД Тогда
		ПроверитьСтатусы();
		
		ПодключитьОбработчикОжидания("ПроверитьСтатусы", 60);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Криптобиблиотека

&НаКлиенте
Процедура ПолучитьКриптобиблиотеку(Команда)
	
	Контейнер = ЭТДКлиентСервер.КонтейнерМетодов();
	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВерсияМакетаКриптобиблиотеки = Контейнер.ПолучитьТекущуюВерсиюМакета();
	
	ЗагрузитьВКонстанту(ВерсияМакетаКриптобиблиотеки); //загружаем данные из макета в константу
	УстановитьБиблиотеку();

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВКонстанту(ВерсияМакетаКриптобиблиотеки)
		
	// определяем, какие константы будут меняться
	МодифицируемыеКонстанты = Новый Массив;
	АрхивДвоичныхДанных = Обработки.ОбменЭТД.ПолучитьМакет("КриптобиблиотекаЭТД");
	// подготавливаем двоичные данные внешнего модуля
	
	МодифицируемыеКонстанты.Добавить("ВнешнийМодульЭТД");
	МодифицируемыеКонстанты.Добавить("ВерсияВнешнегоМодуляЭТД");
	
	ОбъектВнешнийМодуль = Новый ХранилищеЗначения(АрхивДвоичныхДанных);
	
	СтрМодифицируемыеКонстанты = "";
	Для Счетчик = 0 По МодифицируемыеКонстанты.Количество()-1 Цикл
		Если Счетчик > 0 Тогда
			СтрМодифицируемыеКонстанты = СтрМодифицируемыеКонстанты + ", " ;
		КонецЕсли;
		СтрМодифицируемыеКонстанты = СтрМодифицируемыеКонстанты + МодифицируемыеКонстанты[Счетчик]; 
	КонецЦикла;
	
	// инициализируем значения констант
	Попытка
		
		КонстантыНабор = Константы.СоздатьНабор(СтрМодифицируемыеКонстанты);		
		
		КонстантыНабор.ВнешнийМодульЭТД = ОбъектВнешнийМодуль;
		КонстантыНабор.ВерсияВнешнегоМодуляЭТД = ВерсияМакетаКриптобиблиотеки;
		
		КонстантыНабор.Записать();
		ЗаписьЖурналаРегистрации("Загрузка",,Метаданные.Константы.ВнешнийМодульЭТД,, "Загружен новый модуль криптографии: версия " + ВерсияМакетаКриптобиблиотеки); 
		
	Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБиблиотеку()
	
	Контейнер = ЭТДКлиентСервер.КонтейнерМетодов();
	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СсылкаНаМодуль = Контейнер.АдресБиблиотекиКриптографии(УникальныйИдентификатор);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановкаКомпонентыЗавершение", ЭтаФорма);
	НачатьУстановкуВнешнейКомпоненты(ОписаниеОповещения, СсылкаНаМодуль);

КонецПроцедуры

&НаКлиенте
Процедура УстановкаКомпонентыЗавершение(Результат)Экспорт
	
	ОбновитьПовторноИспользуемыеЗначения();
	Оповестить("ОбновленМодульКриптографииЭТД");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеСтатусаКриптобиблиотеки()
	
	Если ЭтаФорма.ИнформационнаяБазаФайловая Тогда
		ОбновитьПредставлениеСтатусаКриптобиблиотекиНаКлиентеНаСервере(ЭтаФорма);
	Иначе
		
		Если ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте") Тогда
			ОбновитьПредставлениеСтатусаКриптобиблиотекиНаКлиентеНаСервере(ЭтаФорма);
		Иначе
			Если НЕ ЭтаФорма.ИспользоватьВнешнююКриптографиюДляКомпоненты Тогда
				МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте");
				ТекстСообщения = НСтр("ru='Для выполнения криптографии на сервере 1C:Предприятие необходимо включение настройки использование внешней криптографии Kalkan.'", "ru");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ОбновитьПредставлениеСтатусаКриптобиблиотекиНаКлиентеНаСервере(ЭтаФорма);
			Иначе
				ОбновитьПредставлениеСтатусаКриптобиблиотекиНаСервере();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеСтатусаКриптобиблиотекиНаКлиентеНаСервере(Форма)
	
	Контейнер = ЭТДКлиентСервер.КонтейнерМетодов();
	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВерсияВнешнегоМодуляКриптографии = Контейнер.ВерсияВнешнегоМодуляКриптографии();
	БиблиотекаЗагружена = ЗначениеЗаполнено(ВерсияВнешнегоМодуляКриптографии);
	
	РезультатПроверки = Ложь;
	Если БиблиотекаЗагружена Тогда
		Попытка
			РезультатПроверки = Контейнер.КриптопровайдерПодключается(Форма.ВерсияКриптобиблиотекиБД, Ложь, Форма.МестоУстановкиБиблиотеки, Истина);
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецПопытки;
		Форма.ВерсияКриптобиблиотекиБД = СтрЗаменить(Форма.ВерсияКриптобиблиотекиБД, ",", ".");
	КонецЕсли;
	
	ВерсияВБазе = ЭТДКлиентСервер.ПолучитьТекущуюВерсиюМакета();
	Форма.ВерсияКриптобиблиотеки = ВерсияВБазе;
	
	ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ = (ЗначениеЗаполнено(Форма.ВерсияКриптобиблиотекиБД)
		И Форма.ВерсияКриптобиблиотеки <> Форма.ВерсияКриптобиблиотекиБД);
	
	Если Форма.ИспользоватьОбменЭТД Тогда
		Если ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ Тогда
			ТекстОшибки = НСтр("ru = 'Библиотека загружена в информационную базу, требуется установка версии на клиенте'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ИначеЕсли НЕ РезультатПроверки Тогда
			ТекстОшибки = НСтр("ru = 'Библиотека получена, но не установлена'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	СформироватьЗаголовокЛокальнаяВерсияБиблиотеки(Форма, Форма.МестоУстановкиБиблиотеки);
	
	УстановитьВидимостьКриптография(Форма, ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ, РезультатПроверки);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеСтатусаКриптобиблиотекиНаСервере()
	
	ОбновитьПредставлениеСтатусаКриптобиблиотекиНаКлиентеНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКриптография(Форма, ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ, БиблиотекаЗагружена)
	
	Форма.Элементы.КартинкаБиблиотекаУстановлена.Видимость = БиблиотекаЗагружена И Не ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ;
	Форма.Элементы.КартинкаБиблиотекаНеОбновлена.Видимость = ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ;	
	Форма.Элементы.ГруппаБиблиотекаНеУстановлена.Видимость = НЕ БиблиотекаЗагружена;
	
	Форма.Элементы.ГруппаДанныеБД.Видимость				   = БиблиотекаЗагружена;
	Форма.Элементы.ГруппаВерсияБиблиотеки.Видимость		   = БиблиотекаЗагружена;
	Форма.Элементы.НадписьБиблиотекаУстановлена.Видимость  = БиблиотекаЗагружена И Не ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ;
	Форма.Элементы.НадписьБиблиотекаНеОбновлена.Видимость  = ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ;

	Если ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ Тогда
		Форма.Элементы.УстановитьКриптобиблиотеку.Видимость = ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ;
		Форма.Элементы.УстановитьКриптобиблиотеку.Заголовок = НСтр("ru = 'Обновить'");
	ИначеЕсли Не БиблиотекаЗагружена Тогда
		Форма.Элементы.УстановитьКриптобиблиотеку.Видимость = Не БиблиотекаЗагружена;
		Форма.Элементы.УстановитьКриптобиблиотеку.Заголовок = НСтр("ru = 'Установить'");
	Иначе
		Форма.Элементы.УстановитьКриптобиблиотеку.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура МестоУстановкиБиблиотекиПриИзмененииНаСервере()
	
	Константы.МестоВыполненияКриптографическихОпераций.Установить(МестоУстановкиБиблиотеки);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоУстановкиБиблиотекиПриИзменении(Элемент)
	
	МестоУстановкиБиблиотекиПриИзмененииНаСервере();
	
	ОбновитьПредставлениеСтатусаКриптобиблиотеки();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовокЛокальнаяВерсияБиблиотеки(Форма, МестоУстановкиБиблиотеки)
	
	Если МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаСервере") Тогда
		Форма.Элементы.НадписьВерсияКриптобиблиотекиБД.Заголовок = "Версия на сервере:"
	Иначе
		Форма.Элементы.НадписьВерсияКриптобиблиотекиБД.Заголовок = "Версия на машине пользователя:"
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
