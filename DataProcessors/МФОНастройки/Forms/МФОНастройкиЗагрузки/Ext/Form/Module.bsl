

#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьДатуАктуальности(Число(Элементы.КонстантыНаборМФОДнейАктуальностиЛогирования.ТекстРедактирования));
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КонстантыНаборМФОДнейАктуальностиЛогированияПриИзменении(Элемент)
	ОбновитьДатуАктуальности(Число(Элементы.КонстантыНаборМФОДнейАктуальностиЛогирования.ТекстРедактирования));
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы //<ИмяТаблицыФормы>

// Код процедур и функций

#КонецОбласти

#Область ОбработчикиКомандФормы


&НаКлиенте
Процедура ПроверитьСоединение(Команда)
	Хост = Элементы.КонстантыНаборМФОХост.ТекстРедактирования;
	Логин =  Элементы.КонстантыНаборМФОПользователь.ТекстРедактирования;
	Пароль =  Элементы.КонстантыНаборМФОПароль.ТекстРедактирования;
	ПроверитьСоединениеНаСервере(Хост, Логин, Пароль);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПроверитьСоединениеНаСервере(Хост, Логин, Пароль)
	
	КодСостояния = "Ошибка получения кода состояния";
	Попытка
		HTTPСоединение = Новый HTTPСоединение(Хост, ,Логин, Пароль, , 600, Новый ЗащищенноеСоединениеOpenSSL);
		HTTPЗапрос = Новый HTTPЗапрос("/api/1c/branch_offices?page=1");
		
		//@skip-check missing-temporary-file-deletion
		ИмяФайла = ПолучитьИмяВременногоФайла("json");
		HTTPОтвет =  HTTPСоединение.Получить(HTTPЗапрос, ИмяФайла);
		
		Если HTTPОтвет.КодСостояния = 200 Тогда
			ОбщегоНазначения.СообщитьПользователю("Соединение успешно!");
		Иначе
			КодСостояния =  HTTPОтвет.КодСостояния;
			ВызватьИсключение("");
		КонецЕсли;
		
	Исключение
		
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Ошибка подключения. Код состояния: %1 " 
		+ Символы.ПС + " %2 ", КодСостояния,
		ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДатуАктуальности(КоличествоДней = 0)
	
	ДатаАктуальностиЛогирования = ТекущаяДатаСеанса() - (КоличествоДней * (60 * 60 * 24)); 	
	
КонецПроцедуры


#КонецОбласти

#Область Отладка


&НаКлиенте
Процедура ЗапускЗагрузкиЗаймовБезФоновыхПроцессов(Команда) 
	ЗапускЗагрузкиЗаймовБезФоновыхПроцессовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗапускЗагрузкиЗаймов(Команда)
	ЗапускЗагрузкиЗаймовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗапускЗагрузкиПодразделений(Команда)
	ЗапускЗагрузкиПодразделенийНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗапускЗагрузкиПодразделенийБезФоновыхПроцессов(Команда)
	ЗапускЗагрузкиПодразделенийБезФоновыхПроцессовНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗапускЗагрузкиЗаймовБезФоновыхПроцессовНаСервере()
	МФООбщийМодуль.ЗагрузитьЗаймы(Истина);
КонецПроцедуры

&НаСервере
Процедура ЗапускЗагрузкиПодразделенийНаСервере()
	МФООбщийМодуль.ЗагрузитьПодразделения(); 
	ДлительныеОперации.ВыполнитьПроцедуру(,"МФООбщийМодуль.ЗагрузитьПодразделения");
КонецПроцедуры

&НаСервере
Процедура ЗапускЗагрузкиЗаймовНаСервере()
	ДлительныеОперации.ВыполнитьПроцедуру(,"МФООбщийМодуль.ЗагрузитьЗаймы");
КонецПроцедуры

&НаСервере
Процедура ЗапускЗагрузкиПодразделенийБезФоновыхПроцессовНаСервере()
	МФООбщийМодуль.ЗагрузитьПодразделения();
КонецПроцедуры


#КонецОбласти






