
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	ПодключитьОбработчикОжидания = Не ИБФайловая И ЗначениеЗаполнено(ИдентификаторЗадания);
	Если ПодключитьОбработчикОжидания Тогда		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		РезультатПроверки = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если РезультатПроверки.ИзмененаОрганизация ИЛИ РезультатПроверки.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачПриИзменении(Элемент)
	
	Объект.ДатаНач = НачалоМесяца(Объект.ДатаНач);
	ПериодВПределахГода = НачалоГода(Объект.ДатаНач) = НачалоГода(Объект.ДатаКон);
	
	Если НЕ ПериодВПределахГода Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Период должен находиться в пределах одного года!'"));
		Объект.ДатаКон = КонецГода(Объект.ДатаНач);
	КонецЕсли;
	
	Если Объект.ДатаКон < Объект.ДатаНач Тогда
		Объект.ДатаКон = КонецМесяца(Объект.ДатаНач);
	КонецЕсли;
	
	ПериодПроверкиСтрокой = ПредставлениеПериода(НачалоДня(Объект.ДатаНач), КонецДня(Объект.ДатаКон), "ФП = Истина");
	
	ОбновитьДеревоПроверок();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаКонПриИзменении(Элемент)
	
	Объект.ДатаКон = КонецМесяца(Объект.ДатаКон);
	ПериодВПределахГода = НачалоГода(Объект.ДатаНач) = НачалоГода(Объект.ДатаКон);
	
	Если НЕ ПериодВПределахГода Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Период должен находиться в пределах одного года!'"));
		Объект.ДатаНач = НачалоГода(Объект.ДатаКон);
	КонецЕсли;
	
	Если Объект.ДатаНач > Объект.ДатаКон Тогда
		Объект.ДатаНач = НачалоМесяца(Объект.ДатаКон);
	КонецЕсли;
	
	ПериодПроверкиСтрокой = ПредставлениеПериода(НачалоДня(Объект.ДатаНач), КонецДня(Объект.ДатаКон), "ФП = Истина");
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДеревоПроверок

&НаКлиенте
Процедура ДеревоПроверокВключитьПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоПроверок.ТекущиеДанные;
	
	Если ТекущаяСтрока.Включить = 2 Тогда
		ТекущаяСтрока.Включить = 0;
	КонецЕсли;
	
	УстановитьПометкиПодчиненных(ТекущаяСтрока);
	УстановитьПометкиРодителей(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроверокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПроверок.ТекущиеДанные;
	Элементы.ДекорацияПредметКонтроля.Заголовок = ТекущиеДанные.ПредметКонтроля;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыполнитьПроверку(Команда)
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");

	РезультатВыполнения = ВыполнитьПроверкуНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьНастройки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Настроить(Команда)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройки;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКОтчету(Команда)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОтчет;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
		
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Объект.ДатаНач, Объект.ДатаКон);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура Уровень1(Команда)
	
	ПоказатьУровеньОтчета(0);
	
КонецПроцедуры

&НаКлиенте
Процедура Уровень2(Команда)
	
	ПоказатьУровеньОтчета(1);
	
КонецПроцедуры

&НаКлиенте
Процедура Уровень3(Команда)
	
	ПоказатьУровеньОтчета(2);
	
КонецПроцедуры

&НаКлиенте
Процедура Уровень4(Команда)
	
	ПоказатьУровеньОтчета(3);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлаги(Команда)
	
	КорневыеСтроки = Объект.ДеревоПроверок.ПолучитьЭлементы();
	
	Если КорневыеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из КорневыеСтроки Цикл
		УстановитьПометки("Установить", ТекущаяСтрока);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлаги(Команда)
	
	КорневыеСтроки = Объект.ДеревоПроверок.ПолучитьЭлементы();
	
	Если КорневыеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из КорневыеСтроки Цикл
		УстановитьПометки("Снять", ТекущаяСтрока);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Инвертировать(Команда)
	
	КорневыеСтроки = Объект.ДеревоПроверок.ПолучитьЭлементы();
	
	Если КорневыеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из КорневыеСтроки Цикл
		УстановитьПометки("Инвертировать", ТекущаяСтрока);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчанию(Команда)
	
	НастройкиПоУмолчаниюНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПроверки(Команда)
	
	Для Каждого Стр Из Объект.ДеревоПроверок.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПроверок.Развернуть(Стр.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРазделыПроверок(Команда)
	
	Для Каждого Стр Из Объект.ДеревоПроверок.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПроверок.Свернуть(Стр.ПолучитьИдентификатор());
	КонецЦикла;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлятьДеревоПроверок = Объект.ДатаНач <> РезультатВыбора.НачалоПериода;
	
	Объект.ДатаКон = РезультатВыбора.КонецПериода;
	Объект.ДатаНач = РезультатВыбора.НачалоПериода;
	
	Если ОбновлятьДеревоПроверок Тогда
		ОбновитьДеревоПроверок();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	// установим значения по умолчанию
	Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();

	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	Если Объект.ДатаНач = '00010101' Тогда
		Объект.ДатаНач = НачалоГода(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	Если Объект.ДатаКон = '00010101' Тогда
		Объект.ДатаКон = КонецМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	Объект.ПериодПроверкиСтрокой = ПредставлениеПериода(НачалоДня(Объект.ДатаНач), КонецДня(Объект.ДатаКон), "ФП = Истина");

	УправлениеФормой(ЭтаФорма);
	
	//ТаблицаПравилЭСФИИП = РеквизитФормыВЗначение("ОбработкаОбъект").ТаблицаПравилПроверкиСоответствияЭСФИИП();
	//
	//ЗначениеВДанныеФормы(ТаблицаПравилЭСФИИП, ТаблицаПравилЭСФИИП);

	ДеревоПроверок = РеквизитФормыВЗначение("Объект.ДеревоПроверок");

	Обработки.ЭкспрессПроверкаВеденияУчета.ЗаполнитьДеревоПроверокИзМакетаMXL(ДеревоПроверок, Объект.ДатаНач);
	
	ЗначениеВРеквизитФормы(ДеревоПроверок, "Объект.ДеревоПроверок");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
			И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры



&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктураРезультатаВыполнения = Неопределено;
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОтчет Тогда
		Элементы.ПерейтиКОтчету.Видимость = Ложь;
		Элементы.Настроить.Видимость      = Истина;
	Иначе
		Элементы.ПерейтиКОтчету.Видимость = Истина;
		Элементы.Настроить.Видимость      = Ложь;
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Функция ВыполнитьПроверкуНаСервере() Экспорт
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Обработки.ЭкспрессПроверкаВеденияУчета.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.ЭкспрессПроверкаВеденияУчета.СформироватьОтчет",
			ПараметрыОтчета,
			БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ВысотаОбластей = Новый Структура;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация"        		, Объект.Организация);
	ПараметрыОтчета.Вставить("ДатаНач"                 	, Объект.ДатаНач);
	ПараметрыОтчета.Вставить("ДатаКон"                 	, Объект.ДатаКон);
	ПараметрыОтчета.Вставить("ИсходящиеДанные"          , Объект.ИсходящиеДанные);
	ПараметрыОтчета.Вставить("СтруктурноеПодразделение" , Объект.СтруктурноеПодразделение);
	ПараметрыОтчета.Вставить("ДеревоПроверок"			, РеквизитФормыВЗначение("Объект.ДеревоПроверок"));
	ПараметрыОтчета.Вставить("ВыполнятьПроверки"		, Истина);
	ПараметрыОтчета.Вставить("ПериодПроверкиСтрокой"	, Объект.ПериодПроверкиСтрокой);
	ПараметрыОтчета.Вставить("ВысотаОбластей"			, ВысотаОбластей);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"     	, БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ЭтаФорма));
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат.Очистить();
	Результат.Вывести(РезультатВыполнения.Результат);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьНастройки()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОтчет;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура УстановитьПометки(ВидКоманды, ТекущаяСтрока)
	
	Если ВидКоманды = "Установить" Тогда
		ТекущаяСтрока.Включить = Истина;
	ИначеЕсли ВидКоманды = "Снять" Тогда
		ТекущаяСтрока.Включить = Ложь;
	ИначеЕсли ВидКоманды = "Инвертировать" Тогда
		ТекущаяСтрока.Включить = НЕ ТекущаяСтрока.Включить;
	КонецЕсли;

	Подчиненные	= ТекущаяСтрока.ПолучитьЭлементы();

	Если Подчиненные.Количество() > 0 Тогда
		Для Каждого Подчиненный из Подчиненные Цикл
			УстановитьПометки(ВидКоманды, Подчиненный);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьПометкиРодителей(ТекущаяСтрока)

	Родитель = ТекущаяСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	ТекущееСостояние	= Родитель.Включить;

	НайденыВключенные	= Ложь;
	НайденыВыключенные	= Ложь;
	
	Подчиненные 		= Родитель.ПолучитьЭлементы();

	Для Каждого Строка Из Подчиненные Цикл
		
		Если Строка.Включить = 0 Тогда
			НайденыВыключенные	= Истина;
		ИначеЕсли Строка.Включить = 1 Тогда
			НайденыВключенные	= Истина;
		ИначеЕсли Строка.Включить = 2 Тогда
			НайденыВыключенные	= Истина;
			НайденыВключенные	= Истина;						
		КонецЕсли; 
		
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НайденыВключенные И НайденыВыключенные Тогда
		Включить = 2;
	ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
		Включить = 1;
	ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
		Включить = 0;
	ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
		Включить = 2;
	КонецЕсли;

	Если Включить = ТекущееСостояние Тогда
		Возврат;
	Иначе
		Родитель.Включить = Включить;
		УстановитьПометкиРодителей(Родитель);
	КонецЕсли; 

КонецПроцедуры 

&НаКлиенте
Процедура УстановитьПометкиПодчиненных(ТекущаяСтрока)

	Пометка		= ТекущаяСтрока.Включить;
	Подчиненные	= ТекущаяСтрока.ПолучитьЭлементы();

	Если Подчиненные.Количество() > 0 Тогда
		Для Каждого Подчиненный из Подчиненные Цикл
			Подчиненный.Включить = Пометка;
			УстановитьПометкиПодчиненных(Подчиненный);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастройкиПоУмолчаниюНаСервере()
	
	Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();

	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	Объект.ДатаНач = НачалоГода(ОбщегоНазначения.ТекущаяДатаПользователя());
	Объект.ДатаКон = КонецМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
	
	Объект.ПериодПроверкиСтрокой = ПредставлениеПериода(НачалоДня(Объект.ДатаНач), КонецДня(Объект.ДатаКон), "ФП = Истина");

	УправлениеФормой(ЭтаФорма);

	ДеревоПроверок = РеквизитФормыВЗначение("Объект.ДеревоПроверок");

	Обработки.ЭкспрессПроверкаВеденияУчета.ЗаполнитьДеревоПроверокИзМакетаMXL(ДеревоПроверок, Объект.ДатаНач);
	
	ЗначениеВРеквизитФормы(ДеревоПроверок, "Объект.ДеревоПроверок");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьУровеньОтчета(НомерУровня = 0)

	Результат.ПоказатьУровеньГруппировокСтрок(НомерУровня);

КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Для Каждого Настройка Из Настройки Цикл
		Если Настройка.Ключ <> "Объект.ДеревоПроверок" Тогда
			Возврат;
		Конецесли;
		
		ДеревоИзНастроек = Настройка.Значение;
		//ДеревоПроверок = РеквизитФормыВЗначение("Объект.ДеревоПроверок");
		Для Каждого СтрокаДерева ИЗ Объект.ДеревоПроверок.ПолучитьЭлементы() Цикл
			//найдем строку в настройке
			СтрокаИЗНастройки = ДеревоИзНастроек.Строки.Найти(СтрокаДерева.Идентификатор, "Идентификатор");
			Если НЕ СтрокаИЗНастройки = Неопределено Тогда
				СтрокаДерева.Включить = СтрокаИЗНастройки.Включить;			
			КонецЕсли;
			ВложенныеСтроки = СтрокаДерева.ПолучитьЭлементы();
			Если ВложенныеСтроки.Количество() <> 0 Тогда 
				Для Каждого ВложеннаяСтрока Из ВложенныеСтроки Цикл
					СтрокаИЗНастройки = ДеревоИзНастроек.Строки.Найти(ВложеннаяСтрока.Идентификатор, "Идентификатор", Истина);				
					Если НЕ СтрокаИЗНастройки = Неопределено Тогда
						ВложеннаяСтрока.Включить = СтрокаИЗНастройки.Включить;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;				
		КонецЦикла;
		Настройки.Удалить("Объект.ДеревоПроверок");
	КонецЦикла;  	

КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоПроверок()
	
	НовоеДеревоПроверок = РеквизитФормыВЗначение("Объект.ДеревоПроверок");
	ПредДеревоПроверок  = НовоеДеревоПроверок.Скопировать();

	Обработки.ЭкспрессПроверкаВеденияУчета.ЗаполнитьДеревоПроверокИзМакетаMXL(НовоеДеревоПроверок, Объект.ДатаНач);
	
	Для Каждого СтрокаДерева ИЗ НовоеДеревоПроверок.Строки Цикл
		//найдем строку в предыдущей настройке
		СтрокаПред = ПредДеревоПроверок.Строки.Найти(СтрокаДерева.Идентификатор, "Идентификатор");
		Если НЕ СтрокаПред = Неопределено Тогда
			СтрокаДерева.Включить = СтрокаПред.Включить;			
		КонецЕсли;
		ВложенныеСтроки    = СтрокаДерева.Строки;
		НайденыВключенные  = Ложь;
		НайденыВыключенные = Ложь;
		Если ВложенныеСтроки.Количество() <> 0 Тогда 
			Для Каждого ВложеннаяСтрока Из ВложенныеСтроки Цикл
				СтрокаПред = ПредДеревоПроверок.Строки.Найти(ВложеннаяСтрока.Идентификатор, "Идентификатор", Истина);				
				Если НЕ СтрокаПред = Неопределено Тогда
					ВложеннаяСтрока.Включить = СтрокаПред.Включить;
				КонецЕсли;
				Если ВложеннаяСтрока.Включить = 0 Тогда
					НайденыВыключенные = Истина;
				Иначе
					НайденыВключенные  = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если НЕ НайденыВключенные И НЕ НайденыВыключенные Тогда
			// верхний уровень (раздел) проверок не содержит вложенных проверок
			Если СтрокаДерева.Включить > 0 Тогда
				СтрокаДерева.Включить = 1;
			КонецЕсли;
		ИначеЕсли НайденыВключенные И НайденыВыключенные Тогда
			// есть включенные и отключенные вложенные проверки
			СтрокаДерева.Включить = 2;
		ИначеЕсли НайденыВключенные Тогда
			// вложенные проверки все включены
			СтрокаДерева.Включить = 1;
		Иначе
			// вложенные проверки все отключены
			СтрокаДерева.Включить = 0;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(НовоеДеревоПроверок, "Объект.ДеревоПроверок");
	
КонецПроцедуры

