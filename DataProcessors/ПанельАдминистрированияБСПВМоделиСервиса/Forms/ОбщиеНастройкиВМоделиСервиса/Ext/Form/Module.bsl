
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьВнешнийМодуль = Константы.ЭСФИспользоватьВнешнийМодульОбменаДанными.Получить();
	ДанныеМодуля = Константы.ЭСФВнешнийМодульОбменаДанными.Получить().Получить();
	
	ИспользоватьВнешнийМодульСНТ = Константы.СНТИспользоватьВнешнийМодульОбменаДанными.Получить();
	ДанныеМодуляСНТ = Константы.СНТВнешнийМодульОбменаДанными.Получить().Получить();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВнешнийМодульПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	Если ИспользоватьВнешнийМодуль И НЕ ЗначениеЗаполнено(ДанныеМодуля) Тогда
		ВыбратьВнешнийМодуль("ЭСФ");
	ИначеЕсли НЕ ИспользоватьВнешнийМодуль Тогда
		ДанныеМодуля = Неопределено;
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВнешнийМодульСНТПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	Если ИспользоватьВнешнийМодульСНТ И НЕ ЗначениеЗаполнено(ДанныеМодуляСНТ) Тогда
		ВыбратьВнешнийМодуль("СНТ");
	ИначеЕсли НЕ ИспользоватьВнешнийМодульСНТ Тогда
		ДанныеМодуляСНТ = Неопределено;
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеМодульОбменаПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьВнешнийМодуль("ЭСФ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеМодульОбменаПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	ДанныеМодуля = Неопределено;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеМодульОбменаСНТПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьВнешнийМодуль("СНТ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеМодульОбменаСНТПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	ДанныеМодуляСНТ = Неопределено;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВФайл(Команда)
	
	Если ЗначениеЗаполнено(ДанныеМодуля) Тогда
		ТекстСообщения = НСтр("ru = 'Для выгрузки внешней обработки в файл рекомендуется установить расширение для веб-клиента 1С:Предприятие.'");
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяПодсистемы", "ЭСФ");
		Обработчик = Новый ОписаниеОповещения("ВыгрузитьВФайлЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик, ТекстСообщения);
	Иначе
		ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Отсутствует файл внешней обработки для сохранения.'"));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВФайлСНТ(Команда)
	
	Если ЗначениеЗаполнено(ДанныеМодуляСНТ) Тогда
		ТекстСообщения = НСтр("ru = 'Для выгрузки внешней обработки в файл рекомендуется установить расширение для веб-клиента 1С:Предприятие.'");
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяПодсистемы", "СНТ");
		Обработчик = Новый ОписаниеОповещения("ВыгрузитьВФайлЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик, ТекстСообщения);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Отсутствует файл внешней обработки для сохранения.'"));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВнешнийМодуль(ИмяПодсистемы)
	
	ВыбранноеИмяФайла = "";

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяПодсистемы", ИмяПодсистемы);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьВнешнийМодульЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ИмяПодсистемы = "ЭСФ" Тогда
		ДанныеМодуля = Неопределено;
		НачатьПомещениеФайла(ОписаниеОповещения, ДанныеМодуля, ВыбранноеИмяФайла, Истина, УникальныйИдентификатор);
	ИначеЕсли ИмяПодсистемы = "СНТ" Тогда
		ДанныеМодуляСНТ = Неопределено;
		НачатьПомещениеФайла(ОписаниеОповещения, ДанныеМодуляСНТ, ВыбранноеИмяФайла, Истина, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВнешнийМодульЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранКорректныйФайл = ВыбранКорректныйФайл(ВыбранноеИмяФайла, ".epf");
	Если НЕ ВыбранКорректныйФайл Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Загружать можно только файлы с расширением *.epf'"));
	Иначе
		ИмяПодсистемы = ДополнительныеПараметры.ИмяПодсистемы;
		Если ИмяПодсистемы = "СНТ" Тогда
			ДанныеМодуляСНТ = Адрес;
		Иначе
			ДанныеМодуля = Адрес;
		КонецЕсли;
		ВыбратьВнешнийМодульИзменитьПеременные(Результат, ДополнительныеПараметры.ИмяПодсистемы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВнешнийМодульИзменитьПеременные(ФайлыБылиВыбраны, ИмяПодсистемы)
	
	Если ФайлыБылиВыбраны Тогда
	
		Если ИмяПодсистемы = "ЭСФ" И ЗначениеЗаполнено(ДанныеМодуля) Тогда
			стрВерсияМодуля = ПолучитьВерсиюВнешнегоМодуляИзФайла(ДанныеМодуля);
			Если стрВерсияМодуля = Неопределено Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Выбранный файл не является внешним модулем обмена с ИС ЭСФ!'"));
				
			Иначе
				УправлениеФормой(ЭтаФорма);
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяПодсистемы = "СНТ" И ЗначениеЗаполнено(ДанныеМодуляСНТ) Тогда
			стрВерсияМодуля = ПолучитьВерсиюВнешнегоМодуляИзФайла(ДанныеМодуляСНТ);
			УправлениеФормой(ЭтаФорма);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбранКорректныйФайл(Знач ПолныйПуть, Знач ПолноеИмяФайлаБезПути) Экспорт
	
	ПолныйПуть = Врег(ПолныйПуть);
	ПолноеИмяФайлаБезПути = Врег(ПолноеИмяФайлаБезПути);
	
	ДлинаПолногоИмениФайлаБезПути = СтрДлина(ПолноеИмяФайлаБезПути);
	Возврат Прав(ПолныйПуть, ДлинаПолногоИмениФайлаБезПути) = ПолноеИмяФайлаБезПути;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВерсиюВнешнегоМодуляИзФайла(МодульДвоичныеДанные)
	
	// Сохраняем обработку во временный файл.
	Если МодульДвоичныеДанные <> Неопределено Тогда
		ИмяФайлаОбработки = ПолучитьИмяВременногоФайла("epf");
		Если ЭтоАдресВременногоХранилища(МодульДвоичныеДанные) Тогда
			ПолучитьИзВременногоХранилища(МодульДвоичныеДанные).Записать(ИмяФайлаОбработки);
		Иначе
			МодульДвоичныеДанные.Записать(ИмяФайлаОбработки);
		КонецЕсли;
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
	// Пытаемся извлечь версию внешнего модуля.
	Попытка
		Результат = ВнешниеОбработки.Создать(ИмяФайлаОбработки).ВерсияБЭСФ;
	Исключение
		Результат = Неопределено;
	КонецПопытки;
	
	// Удаляем временный файл обработки.
	УдалитьФайлы(ИмяФайлаОбработки);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещенияОЗакрытии, ТекстПредложения = "", 
	ВозможноПродолжениеБезУстановки = Истина) Экспорт
	
	ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("ПоказатьВопросОбУстановкеРасширенияРаботыСФайламиЗавершение",
		ЭтотОбъект, ОписаниеОповещенияОЗакрытии);
	
#Если Не ВебКлиент Тогда
	// В тонком и толстом клиентах расширение подключено всегда.
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияЗавершение, "ПодключениеНеТребуется");
	Возврат;
#КонецЕсли
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещенияЗавершение", ОписаниеОповещенияЗавершение);
	ДополнительныеПараметры.Вставить("ТекстПредложения", ТекстПредложения);
	ДополнительныеПараметры.Вставить("ВозможноПродолжениеБезУстановки", ВозможноПродолжениеБезУстановки);
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьВопросОбУстановкеРасширенияРаботыСФайламиПриУстановкеРасширения",
		ЭтотОбъект, ДополнительныеПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОбУстановкеРасширенияРаботыСФайламиЗавершение(Действие, ОповещениеОЗакрытии) Экспорт
	
	РасширениеПодключено = (Действие = "РасширениеПодключено" Или Действие = "ПодключениеНеТребуется");
#Если ВебКлиент Тогда
	Если Действие = "БольшеНеПредлагать"
		Или Действие = "РасширениеПодключено" Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация();
		ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
		ПараметрыПриложения["СтандартныеПодсистемы.ПредлагатьУстановкуРасширенияРаботыСФайлами"] = Ложь;
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(
			"НастройкиПрограммы/ПредлагатьУстановкуРасширенияРаботыСФайлами", ИдентификаторКлиента, Ложь);
	КонецЕсли;
#КонецЕсли
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗакрытии, РасширениеПодключено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОбУстановкеРасширенияРаботыСФайламиПриУстановкеРасширения(Подключено, ДополнительныеПараметры) Экспорт
	
	// Если расширение и так уже подключено, незачем про него спрашивать.
	Если Подключено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершение, "ПодключениеНеТребуется");
		Возврат;
	КонецЕсли;
	
	// В веб клиенте под MacOS расширение не доступно.
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоMacКлиент = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86
		Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86_64);
	Если ЭтоMacКлиент Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершение);
		Возврат;
	КонецЕсли;
	
	ИмяПараметра = "СтандартныеПодсистемы.ПредлагатьУстановкуРасширенияРаботыСФайлами";
	ПервоеОбращениеЗаСеанс = ПараметрыПриложения[ИмяПараметра] = Неопределено;
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, ОбщегоНазначенияКлиент.ПредлагатьУстановкуРасширенияРаботыСФайлами());
	КонецЕсли;
	ПредлагатьУстановкуРасширенияРаботыСФайлами	= ПараметрыПриложения[ИмяПараметра] Или ПервоеОбращениеЗаСеанс;
	
	Если ДополнительныеПараметры.ВозможноПродолжениеБезУстановки И Не ПредлагатьУстановкуРасширенияРаботыСФайлами Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершение);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекстПредложения", ДополнительныеПараметры.ТекстПредложения);
	ПараметрыФормы.Вставить("ВозможноПродолжениеБезУстановки", ДополнительныеПараметры.ВозможноПродолжениеБезУстановки);
	ОткрытьФорму("ОбщаяФорма.ВопросОбУстановкеРасширенияРаботыСФайлами", ПараметрыФормы,,,,,ДополнительныеПараметры.ОписаниеОповещенияЗавершение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВФайлЗавершение(Подключено, ПараметрыВыгрузки) Экспорт
	
	Перем Адрес;
	
	ИмяПодсистемы = ПараметрыВыгрузки.ИмяПодсистемы;
	
	Если ИмяПодсистемы = "ЭСФ" Тогда
		
		Если ТипЗнч(ДанныеМодуля) = Тип("ДвоичныеДанные") Тогда
			Адрес = ПоместитьВоВременноеХранилище(ДанныеМодуля, Неопределено);
		ИначеЕсли ЭтоАдресВременногоХранилища(ДанныеМодуля) Тогда
			Адрес = ДанныеМодуля;
		КонецЕсли;
		
		ИмяФайла = ЭСФКлиентСервер.ИмяВнешнейОбработкиОбменЭСФ();
		
	КонецЕсли;
	
	Если ИмяПодсистемы = "СНТ" Тогда
		
		Если ТипЗнч(ДанныеМодуляСНТ) = Тип("ДвоичныеДанные") Тогда
			Адрес = ПоместитьВоВременноеХранилище(ДанныеМодуляСНТ, Неопределено);
		ИначеЕсли ЭтоАдресВременногоХранилища(ДанныеМодуляСНТ) Тогда
			Адрес = ДанныеМодуляСНТ;
		КонецЕсли;
		
		ИмяФайла = СНТКлиентСервер.ИмяВнешнейОбработкиОбменСНТ();
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Адрес", Адрес);
	
	Если Не Подключено Тогда
		ПолучитьФайл(Адрес, ИмяФайла, Истина);
		Возврат;
	КонецЕсли;
	
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогСохраненияФайла.ПолноеИмяФайла = ИмяФайла;
	ДиалогСохраненияФайла.Фильтр = НСтр("ru = 'Внешние обработки (*.epf)|*.epf'");
	ДиалогСохраненияФайла.ИндексФильтра = 1;
	ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
	ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите файл'");
	
	Обработчик = Новый ОписаниеОповещения("ВыгрузитьФайлВыборФайла", ЭтотОбъект, ДополнительныеПараметры);
	ДиалогСохраненияФайла.Показать(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлВыборФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		ПолноеИмяФайла = ВыбранныеФайлы[0];
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, ДополнительныеПараметры.Адрес));
		
		Обработчик = Новый ОписаниеОповещения("ОбработкаРезультатаНеТребуется", ЭтотОбъект);
		НачатьПолучениеФайлов(Обработчик, ПолучаемыеФайлы, ПолноеИмяФайла, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаНеТребуется(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	Возврат;
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	// Поля с представлением внешних модулей лаем доступным только если установлены
	// признаки спользования внешних модулей
	Форма.Элементы.ПолеМодульОбменаПредставление.Доступность    = Форма.ИспользоватьВнешнийМодуль;
	Форма.Элементы.ПолеМодульОбменаСНТПредставление.Доступность = Форма.ИспользоватьВнешнийМодульСНТ;
	
	// Формируем представления внешних модулей.
	Если НЕ ЗначениеЗаполнено(Форма.ДанныеМодуля) Тогда
		Форма.МодульОбменаЭСФПредставление = "";
	Иначе
		Форма.МодульОбменаЭСФПредставление = "";
		Если НЕ ЗначениеЗаполнено(Форма.МодульОбменаЭСФПредставление) И ЗначениеЗаполнено(Форма.ДанныеМодуля) Тогда
			ТекстПредставленияМодуля = НСтр("ru = 'Модуль загружен [обработка ""%1.epf""]'");
			ТекстПредставленияМодуля =
				ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстПредставленияМодуля, ЭСФКлиентСервер.ИмяВнешнейОбработкиОбменЭСФ());
			Форма.МодульОбменаЭСФПредставление = ТекстПредставленияМодуля;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.ДанныеМодуляСНТ) Тогда
		Форма.МодульОбменаСНТПредставление = "";
	Иначе
		Форма.МодульОбменаСНТПредставление = "";
		Если НЕ ЗначениеЗаполнено(Форма.МодульОбменаСНТПредставление) И ЗначениеЗаполнено(Форма.ДанныеМодуляСНТ) Тогда
			ТекстПредставленияМодуля = НСтр("ru = 'Модуль загружен [обработка ""%1.epf""]'");
			ТекстПредставленияМодуля =
				СНТКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстПредставленияМодуля, СНТКлиентСервер.ИмяВнешнейОбработкиОбменСНТ());
			Форма.МодульОбменаСНТПредставление = ТекстПредставленияМодуля;
		КонецЕсли;
	КонецЕсли;
	
	Форма.Элементы.ВыгрузитьВФайл.Доступность    = Форма.ИспользоватьВнешнийМодуль    И ЗначениеЗаполнено(Форма.ДанныеМодуля);
	Форма.Элементы.ВыгрузитьВФайлСНТ.Доступность = Форма.ИспользоватьВнешнийМодульСНТ И ЗначениеЗаполнено(Форма.ДанныеМодуляСНТ);

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки(Отказ = Ложь)

	Если ИспользоватьВнешнийМодуль И НЕ ЗначениеЗаполнено(ДанныеМодуля) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите внешний модуль ЭСФ.'"));
		Отказ = Истина;
	КонецЕсли;

	Если ИспользоватьВнешнийМодульСНТ И НЕ ЗначениеЗаполнено(ДанныеМодуляСНТ) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите внешний модуль СНТ.'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// сохраняем общие настройки
	КонстантыНабор = Константы.СоздатьНабор("ЭСФИспользоватьВнешнийМодульОбменаДанными, ЭСФВнешнийМодульОбменаДанными,
		|СНТИспользоватьВнешнийМодульОбменаДанными, СНТВнешнийМодульОбменаДанными");
	КонстантыНабор.ЭСФИспользоватьВнешнийМодульОбменаДанными = ИспользоватьВнешнийМодуль;
	КонстантыНабор.СНТИспользоватьВнешнийМодульОбменаДанными = ИспользоватьВнешнийМодульСНТ;
	
	Если ЗначениеЗаполнено(ДанныеМодуля) Тогда
		Если ТипЗнч(ДанныеМодуля) = Тип("ДвоичныеДанные") Тогда
			КонстантыНабор.ЭСФВнешнийМодульОбменаДанными = Новый ХранилищеЗначения(ДанныеМодуля);
		ИначеЕсли ЭтоАдресВременногоХранилища(ДанныеМодуля) Тогда
			ДанныеМодуля = ПолучитьИзВременногоХранилища(ДанныеМодуля);
			КонстантыНабор.ЭСФВнешнийМодульОбменаДанными = Новый ХранилищеЗначения(ДанныеМодуля);
		КонецЕсли;
	Иначе
		КонстантыНабор.ЭСФВнешнийМодульОбменаДанными = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеМодуляСНТ) Тогда
		Если ТипЗнч(ДанныеМодуляСНТ) = Тип("ДвоичныеДанные") Тогда
			КонстантыНабор.СНТВнешнийМодульОбменаДанными = Новый ХранилищеЗначения(ДанныеМодуляСНТ);
		ИначеЕсли ЭтоАдресВременногоХранилища(ДанныеМодуляСНТ) Тогда
			ДанныеМодуляСНТ = ПолучитьИзВременногоХранилища(ДанныеМодуляСНТ);
			КонстантыНабор.СНТВнешнийМодульОбменаДанными = Новый ХранилищеЗначения(ДанныеМодуляСНТ);
		КонецЕсли;
	Иначе
		КонстантыНабор.СНТВнешнийМодульОбменаДанными = Неопределено;
	КонецЕсли;
	
	КонстантыНабор.Записать();

КонецПроцедуры
