
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Формирует список значений, описывающий государственные праздники РК
//
// Параметры
//  КалендарныйГод - число - год, за который возвращается список праздников
//
// Возвращаемое значение:
//   список значений, содержащий строки-месяцедни праздников
//
Функция СписокПраздниковРК(КалендарныйГод) Экспорт

	СписокПраздников = Новый СписокЗначений();
	
	//Закон Республики Казахстан от 13 декабря 2001 года N 267-II О праздниках в Республике Казахстан 
	СписокПраздников.Добавить("0101", НСтр("ru = 'Новый год'"));
	СписокПраздников.Добавить("0102", НСтр("ru = 'Новый год'"));
	СписокПраздников.Добавить("0308", НСтр("ru = 'Международный женский день'"));
	Если КалендарныйГод > 2009 Тогда
		// Законом РК № 152-IV ЗРК от 22 апреля 2009 года увеличена продолжительность Наурыза
	    СписокПраздников.Добавить("0321", НСтр("ru = 'Наурыз мейрамы'"));
		СписокПраздников.Добавить("0322", НСтр("ru = 'Наурыз мейрамы'"));
		СписокПраздников.Добавить("0323", НСтр("ru = 'Наурыз мейрамы'"));
	Иначе
		СписокПраздников.Добавить("0322", НСтр("ru = 'Наурыз мейрамы'"));	
	КонецЕсли;
	
	СписокПраздников.Добавить("0501", НСтр("ru = 'Праздник единства народа Казахстана'"));
	СписокПраздников.Добавить("0509", НСтр("ru = 'День Победы'"));
	СписокПраздников.Добавить("0830", НСтр("ru = 'День Конституции Республики Казахстан'"));	
	Если КалендарныйГод <= 2008 Тогда
		// Законом РК № 152-IV ЗРК от 22 апреля 2009 года исключен День Республики
		СписокПраздников.Добавить("1025", НСтр("ru = 'День Республики'"));	
	КонецЕсли;
	СписокПраздников.Добавить("1216", НСтр("ru = 'День независимости'"));		
	СписокПраздников.Добавить("1217", НСтр("ru = 'День независимости'"));			
	
	Если КалендарныйГод >= 2006 Тогда
		// В соответствии с изменениями, внесенными в Закон о Труде 04.01.2006
		СписокПраздников.Добавить("0107", "!" + НСтр("ru = 'Православное Рождество'"));
		
		// Первый день Курбан-айта является плавающей датой
		Если КалендарныйГод = 2006 Тогда
			СписокПраздников.Добавить("0110", "!" + НСтр("ru = 'Первый день Курбан-айта'"));
		ИначеЕсли КалендарныйГод = 2007 Тогда
			СписокПраздников.Добавить("1220", "!" + НСтр("ru = 'Первый день Курбан-айта'"));
		ИначеЕсли КалендарныйГод = 2008 Тогда
			СписокПраздников.Добавить("1208", "!" + НСтр("ru = 'Первый день Курбан-айта'"));
		ИначеЕсли КалендарныйГод = 2009 Тогда
			СписокПраздников.Добавить("1127", "!" + НСтр("ru = 'Первый день Курбан-айта'"));
		ИначеЕсли КалендарныйГод = 2010 Тогда
			СписокПраздников.Добавить("1116", "!" + НСтр("ru = 'Первый день Курбан-айта'"));
		ИначеЕсли КалендарныйГод = 2011 Тогда
			СписокПраздников.Добавить("1106", "!" + НСтр("ru = 'Первый день Курбан-айта'"));
		ИначеЕсли КалендарныйГод = 2012 Тогда
			СписокПраздников.Добавить("1026", "!" + НСтр("ru = 'Первый день Курбан-айта'"));
		ИначеЕсли КалендарныйГод = 2013 Тогда
			СписокПраздников.Добавить("1015", "!" + НСтр("ru = 'Первый день Курбан-айта'"));
		ИначеЕсли КалендарныйГод = 2014 Тогда
			СписокПраздников.Добавить("1004", "!" + НСтр("ru = 'Первый день Курбан-айта'"));
		ИначеЕсли КалендарныйГод = 2015 Тогда
			СписокПраздников.Добавить("0924", "!" + НСтр("ru = 'Первый день Курбан-айта'"));
		ИначеЕсли КалендарныйГод = 2016 Тогда
			СписокПраздников.Добавить("0912", "!" + НСтр("ru = 'Первый день Курбан-айта'"));
		ИначеЕсли КалендарныйГод = 2017 Тогда
			СписокПраздников.Добавить("0901", "!" + НСтр("ru = 'Первый день Курбан-айта'"));	
		КонецЕсли;
	КонецЕсли;
	
	Если КалендарныйГод >= 2008 Тогда
		СписокПраздников.Добавить("0706", НСтр("ru = 'День Столицы'"));
	КонецЕсли;
	
	Если КалендарныйГод >= 2012 Тогда
		СписокПраздников.Добавить("1201", НСтр("ru = 'День Первого Президента Республики Казахстан'"));
	КонецЕсли;
	
	Если КалендарныйГод >= 2013 Тогда
		СписокПраздников.Добавить("0507", НСтр("ru = 'День защитника Отечества'"));
	КонецЕсли;

	Возврат СписокПраздников

КонецФункции 

Функция ПолучитьДатыРабочихДней(НачальныеДаты, ПолучатьПредшествующие = Ложь, ВызыватьИсключение = Истина, ИгнорироватьНезаполненностьГрафика = Ложь) Экспорт
	
	ТекстЗапросаВТ = "";
	ПерваяЧасть = Истина;
	Для Каждого НачальнаяДата Из НачальныеДаты Цикл
		Если Не ЗначениеЗаполнено(НачальнаяДата) Тогда
			Продолжить;
		КонецЕсли;
		Если Не ПерваяЧасть Тогда
			ТекстЗапросаВТ = ТекстЗапросаВТ + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапросаВТ = ТекстЗапросаВТ + "
		|ВЫБРАТЬ
		|	ДАТАВРЕМЯ(" + Формат(НачальнаяДата, "ДФ=гггг,ММ,дд") + ")";
		Если ПерваяЧасть Тогда
			ТекстЗапросаВТ = ТекстЗапросаВТ + " КАК Дата 
			|ПОМЕСТИТЬ НачальныеДаты
			|";
		КонецЕсли;
		ПерваяЧасть = Ложь;
	КонецЦикла;

	Если ПустаяСтрока(ТекстЗапросаВТ) Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапросаВТ);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НачальныеДаты.Дата,
	|	%Функция%(ДатыКалендаря.ДатаКалендаря) КАК БлижайшаяДата
	|ИЗ
	|	НачальныеДаты КАК НачальныеДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьРегламентированныйПроизводственныйКалендарь КАК ДатыКалендаря
	|		ПО (ДатыКалендаря.ДатаКалендаря %ЗнакУсловия% НачальныеДаты.Дата)
	|			И (ДатыКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.УдалитьВидыДнейПроизводственногоКалендаря.Рабочий))
	|
	|СГРУППИРОВАТЬ ПО
	|	НачальныеДаты.Дата";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Функция%", 				?(ПолучатьПредшествующие, "МАКСИМУМ", "МИНИМУМ"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ЗнакУсловия%", 			?(ПолучатьПредшествующие, "<=", ">="));
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДатыРабочихДней = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.БлижайшаяДата) Тогда
			ДатыРабочихДней.Вставить(Выборка.Дата, Выборка.БлижайшаяДата);
		Иначе 
			Если ИгнорироватьНезаполненностьГрафика Тогда
				Продолжить;
			КонецЕсли;
			Если ВызыватьИсключение Тогда
				ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Невозможно определить ближайшую рабочую дату для даты %1, возможно, график работы не заполнен.'"), 
									Формат(Выборка.Дата, "ДЛФ=D"));
				ВызватьИсключение(ТекстИсключения);
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДатыРабочихДней;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.


// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Функция Печать(ПараметрыПечати, ИмяМакета = "ПроизводственныйКалендарь") Экспорт
	
	Если ИмяМакета = "ПроизводственныйКалендарь" Тогда
		
		ТабличныйДокумент = ПроизводственныйКалендарь(ПараметрыПечати);
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции


Функция ПроизводственныйКалендарь(ПараметрыПечати)
	
	СоответствиеИменМесяцев = Новый Соответствие;
	СоответствиеИменМесяцев.Вставить(1, "Январь");
	СоответствиеИменМесяцев.Вставить(2, "Февраль");
	СоответствиеИменМесяцев.Вставить(3, "Март");
	СоответствиеИменМесяцев.Вставить(4, "Апрель");
	СоответствиеИменМесяцев.Вставить(5, "Май");
	СоответствиеИменМесяцев.Вставить(6, "Июнь");
	СоответствиеИменМесяцев.Вставить(7, "Июль");
	СоответствиеИменМесяцев.Вставить(8, "Август");
	СоответствиеИменМесяцев.Вставить(9, "Сентябрь");
	СоответствиеИменМесяцев.Вставить(10, "Октябрь");
	СоответствиеИменМесяцев.Вставить(11, "Ноябрь");
	СоответствиеИменМесяцев.Вставить(12, "Декабрь");

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ГОД(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК ГодКалендаря,
		|	КВАРТАЛ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК КварталКалендаря,
		|	МЕСЯЦ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК МесяцКалендаря,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК КалендарныеДни,
		|	РегламентированныйПроизводственныйКалендарь.ВидДня КАК ВидДня
		|ИЗ
		|	РегистрСведений.УдалитьРегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|
		|ГДЕ
		|	ГОД(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) = &Год
		|
		|СГРУППИРОВАТЬ ПО
		|	ГОД(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря),
		|	КВАРТАЛ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря),
		|	МЕСЯЦ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря),
		|	РегламентированныйПроизводственныйКалендарь.ВидДня
		|
		|УПОРЯДОЧИТЬ ПО
		|	КварталКалендаря
		|
		|ИТОГИ ПО
		|	ГодКалендаря,
		|	КварталКалендаря,
		|	МесяцКалендаря";
	
	МакетПечати = РегистрыСведений.УдалитьРегламентированныйПроизводственныйКалендарь.ПолучитьМакет("ПроизводственныйКалендарь");
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ЗаголовокПечати =  МакетПечати.ПолучитьОбласть("Заголовок");
	ЗаголовокПечати.Параметры.Год = Формат(ПараметрыПечати.Год, "ЧЦ=4; ЧГ=0");
	ПечатнаяФорма.Вывести(ЗаголовокПечати);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Год", ПараметрыПечати.Год);
	Результат = Запрос.Выполнить();
	ВыборкаПоГоду = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоГоду.Следующий() Цикл
		ВыборкаПоКварталу = ВыборкаПоГоду.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоКварталу.Следующий() Цикл
			НомерКвартала =  МакетПечати.ПолучитьОбласть("Квартал");
			НомерКвартала.Параметры.НомерКвартала = "" + ВыборкаПоКварталу.КварталКалендаря + " квартал";
			ПечатнаяФорма.Вывести(НомерКвартала);
			ШапкаКвартала = МакетПечати.ПолучитьОбласть("ШапкаКвартала");
			ПечатнаяФорма.Вывести(ШапкаКвартала);
			
			КалендарныеДниКв = 0;
			РабочиеДниКв	 = 0;
			ВыходныеДниКв	 = 0;
			
			Если ВыборкаПоКварталу.КварталКалендаря = 1 или ВыборкаПоКварталу.КварталКалендаря = 3 тогда
				КалендарныеДниПолугодие1 = 0;
				РабочиеДниПолугодие1	 = 0;
				ВыходныеДниПолугодие1	 = 0;
			КонецЕсли;
			
			Если ВыборкаПоКварталу.КварталКалендаря = 1 тогда
				КалендарныеДниГод = 0;
				РабочиеДниГод	 = 0;
				ВыходныеДниГод	 = 0;
			КонецЕсли;
			
			ВыборкаПоМесяцу = ВыборкаПоКварталу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоМесяцу.Следующий() Цикл
				ВыходныеДни 	= 0;
				КалендарныеДни 	= 0;
				РабочиеДни 		= 0;
				ВыборкаПоВидуДня = ВыборкаПоМесяцу.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока ВыборкаПоВидуДня.Следующий() Цикл
					Если ВыборкаПоВидуДня.ВидДня = Перечисления.УдалитьВидыДнейПроизводственногоКалендаря.Суббота или 
						 ВыборкаПоВидуДня.ВидДня = Перечисления.УдалитьВидыДнейПроизводственногоКалендаря.Воскресенье или
						 ВыборкаПоВидуДня.ВидДня = Перечисления.УдалитьВидыДнейПроизводственногоКалендаря.ДополнительныйВыходной или
						 ВыборкаПоВидуДня.ВидДня = Перечисления.УдалитьВидыДнейПроизводственногоКалендаря.Праздник тогда
						 ВыходныеДни = ВыходныеДни + ВыборкаПоВидуДня.КалендарныеДни
					 ИначеЕсли ВыборкаПоВидуДня.ВидДня = Перечисления.УдалитьВидыДнейПроизводственногоКалендаря.Рабочий тогда
						 РабочиеДни 	= РабочиеДни + ВыборкаПоВидуДня.КалендарныеДни;
					 КонецЕсли;
					 КалендарныеДни = КалендарныеДни + ВыборкаПоВидуДня.КалендарныеДни;
				КонецЦикла; // вид дня
				КалендарныеДниКв = КалендарныеДниКв + КалендарныеДни;
				РабочиеДниКв	 = РабочиеДниКв 	+ РабочиеДни;
				ВыходныеДниКв	 = ВыходныеДниКв	+ ВыходныеДни;
				
				КалендарныеДниПолугодие1 = КалендарныеДниПолугодие1 + КалендарныеДни;
				РабочиеДниПолугодие1	 = РабочиеДниПолугодие1 	+ РабочиеДни;
				ВыходныеДниПолугодие1	 = ВыходныеДниПолугодие1	+ ВыходныеДни;
				
				КалендарныеДниГод = КалендарныеДниГод + КалендарныеДни;
				РабочиеДниГод	 = РабочиеДниГод 	+ РабочиеДни;
				ВыходныеДниГод	 = ВыходныеДниГод	+ ВыходныеДни;
				
				КолонкаМесяца = МакетПечати.ПолучитьОбласть("КолонкаМесяца");
				КолонкаМесяца.Параметры.ВыходныеДни = ВыходныеДни;
				КолонкаМесяца.Параметры.КалендарныеДни 	= КалендарныеДни;
				КолонкаМесяца.Параметры.РабочиеДни 		= РабочиеДни;
				КолонкаМесяца.Параметры.ИмяМесяца 		= СоответствиеИменМесяцев[ВыборкаПоМесяцу.МесяцКалендаря];
				ПечатнаяФорма.Присоединить(КолонкаМесяца);
			КонецЦикла; // месяц
			КолонкаМесяца = МакетПечати.ПолучитьОбласть("КолонкаМесяца");
			КолонкаМесяца.Параметры.ВыходныеДни 	= ВыходныеДниКв;
			КолонкаМесяца.Параметры.КалендарныеДни 	= КалендарныеДниКв;
			КолонкаМесяца.Параметры.РабочиеДни 		= РабочиеДниКв;
			КолонкаМесяца.Параметры.ИмяМесяца 		= "" + ВыборкаПоКварталу.КварталКалендаря + " квартал";
			ПечатнаяФорма.Присоединить(КолонкаМесяца);
			
			Если ВыборкаПоКварталу.КварталКалендаря = 2 или ВыборкаПоКварталу.КварталКалендаря = 4 тогда
				КолонкаМесяца = МакетПечати.ПолучитьОбласть("КолонкаМесяца");
				КолонкаМесяца.Параметры.ВыходныеДни 	= ВыходныеДниПолугодие1;
				КолонкаМесяца.Параметры.КалендарныеДни 	= КалендарныеДниПолугодие1;
				КолонкаМесяца.Параметры.РабочиеДни 		= РабочиеДниПолугодие1;
				КолонкаМесяца.Параметры.ИмяМесяца 		= "" + ВыборкаПоКварталу.КварталКалендаря/2 + " полугодие";
				ПечатнаяФорма.Присоединить(КолонкаМесяца);
			КонецЕсли;
			
		КонецЦикла;  // квартал
		КолонкаМесяца = МакетПечати.ПолучитьОбласть("КолонкаМесяца");
		КолонкаМесяца.Параметры.ВыходныеДни 	= ВыходныеДниГод;
		КолонкаМесяца.Параметры.КалендарныеДни 	= КалендарныеДниГод;
		КолонкаМесяца.Параметры.РабочиеДни 		= РабочиеДниГод;
		КолонкаМесяца.Параметры.ИмяМесяца 		= "" + Формат(ВыборкаПоГоду.ГодКалендаря, "ЧЦ=4; ЧГ=0") + " год";
		ПечатнаяФорма.Присоединить(КолонкаМесяца);
		
	КонецЦикла; // год
	
	Возврат ПечатнаяФорма;
	
КонецФункции



#КонецЕсли