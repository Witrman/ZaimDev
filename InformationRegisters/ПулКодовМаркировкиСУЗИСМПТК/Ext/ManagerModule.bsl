#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ДанныеКодовМаркировки(КодыМаркировки) Экспорт
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("КодМаркировки",          Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(200)));
	ИсходныеДанные.Колонки.Добавить("ХешКодаМаркировки", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	
	Для Каждого КодМаркировки Из КодыМаркировки Цикл
		
		НоваяСтрока = ИсходныеДанные.Добавить();
		НоваяСтрока.КодМаркировки     = КодМаркировки;
		НоваяСтрока.ХешКодаМаркировки = ИнтеграцияИСМПТК.ХешированиеДанныхSHA256(КодМаркировки);
		
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ИсходныеДанные.КодМаркировки     КАК КодМаркировки,
	|	ИсходныеДанные.ХешКодаМаркировки КАК ХешКодаМаркировки
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	&ИсходныеДанные КАК ИсходныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулКодовМаркировкиСУЗИСМПТК.ЗаказНаЭмиссию            КАК ЗаказНаЭмиссию,
	|	ПулКодовМаркировкиСУЗИСМПТК.КодМаркировки             КАК КодМаркировки,
	|	ПулКодовМаркировкиСУЗИСМПТК.ХешСуммаКодаМаркировки    КАК ХешСуммаКодаМаркировки,
	|	ПулКодовМаркировкиСУЗИСМПТК.Статус                    КАК Статус,
	|	ПулКодовМаркировкиСУЗИСМПТК.Организация               КАК Организация,
	|	ПулКодовМаркировкиСУЗИСМПТК.СтанцияУправленияЗаказами КАК СтанцияУправленияЗаказами,
	|	ПулКодовМаркировкиСУЗИСМПТК.Номенклатура              КАК Номенклатура,
	|	ПулКодовМаркировкиСУЗИСМПТК.Характеристика            КАК Характеристика,
	|	ПулКодовМаркировкиСУЗИСМПТК.ПолныйКодМаркировки       КАК ПолныйКодМаркировки,
	|	ПулКодовМаркировкиСУЗИСМПТК.ДатаЭмиссииУниверсальная  КАК ДатаЭмиссииУниверсальная,
	|	ПулКодовМаркировкиСУЗИСМПТК.ДатаПечатиУниверсальная   КАК ДатаПечатиУниверсальная,
	|	ПулКодовМаркировкиСУЗИСМПТК.GTIN                      КАК GTIN,
	|	ПулКодовМаркировкиСУЗИСМПТК.ВидПродукции              КАК ВидПродукции,
	|	ПулКодовМаркировкиСУЗИСМПТК.СпособВводаВОборот        КАК СпособВводаВОборот,
	|	ПулКодовМаркировкиСУЗИСМПТК.Шаблон                    КАК Шаблон,
	|	ПулКодовМаркировкиСУЗИСМПТК.ТипШтрихкода              КАК ТипШтрихкода
	|ИЗ
	|	ИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗИСМПТК КАК ПулКодовМаркировкиСУЗИСМПТК
	|		ПО ИсходныеДанные.КодМаркировки = ПулКодовМаркировкиСУЗИСМПТК.КодМаркировки
	|			И ИсходныеДанные.ХешКодаМаркировки = ПулКодовМаркировкиСУЗИСМПТК.ХешСуммаКодаМаркировки");
	
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ДанныеПула = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		СведенийКода = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Выборка);
		ДанныеПула.Вставить(Выборка.КодМаркировки, СведенийКода);
	КонецЦикла;
	
	Возврат ДанныеПула;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СтатусыВыведенИзОборота() Экспорт
	
	Статусы = Новый Массив();
	Статусы.Добавить(Перечисления.СтатусыКодовМаркировкиСУЗИСМПТК.Использован);
	Статусы.Добавить(Перечисления.СтатусыКодовМаркировкиСУЗИСМПТК.Отбракован);
	
	Возврат Статусы;
	
КонецФункции

//Возвращает структуру для наложения отборов на регистр ПулКодовМаркировкиСУЗ
// 
//Параметры:
//   Документ  - ДокументСсылка - источник отбора
//
//Возвращаемое значение:
//   Структура - Где ключ - это имя измерения регистра по типу документа, значение - ссылка на документ
//
Функция СтруктураОтбораДокументаПоТипуДокумента(Документ) Экспорт
	
	СтруктураОтбораДокументы = Новый Структура;
	
	ТипДокумента = ТипЗнч(Документ);
	Если ТипДокумента = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК") Тогда
		СтруктураОтбораДокументы.Вставить("ЗаказНаЭмиссию", Документ);
	КонецЕсли;
	
	Возврат СтруктураОтбораДокументы;
	
КонецФункции

// Процедура выполняет блокировку записей пула, выполняет печать этикеток и сохраняет дату печати
// 
// Параметры:
// 	ДанныеПечати - Структура - Входные данные печаети
// 	ТабличныйДокумент - ТабличныйДокумент - Табличный документ для вывода результатов
// 	СтруктураНастроек - Структура - Дополнительные настройки печати
Процедура РаспечататьЭтикеткиИЗафиксироватьДатуПечати(
	ДанныеПечати,
	ТабличныйДокумент,
	СтруктураНастроек = Неопределено,
	РезультатРезервирования = Неопределено,
	СтруктураМакетаШаблона = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Документ                    = Неопределено;
	СтруктураОбъектовПечати     = Новый Структура();
	СоответствиеКодовМаркировки = Новый Соответствие();
	ОбъектыПечати               = Новый Массив();
	РежимПечати                 = "";
	
	Если ЭтоАдресВременногоХранилища(ДанныеПечати.АдресВХранилище) Тогда
		СтруктураОбъектовПечати = ПолучитьИзВременногоХранилища(ДанныеПечати.АдресВХранилище);
		ОбъектыПечати = СтруктураОбъектовПечати.ОбъектыПечати;
		СтруктураОбъектовПечати.Свойство("РежимПечати", РежимПечати);
	КонецЕсли;
	
	Если СтруктураНастроек = Неопределено Тогда
		СтруктураНастроек = ПечатьКодовМаркировкиИСМПТК.СтруктураНастроекЭтикеткаИСМП();
	КонецЕсли;
	
	Если ДанныеПечати.Свойство("КаждаяЭтикеткаНаНовомЛисте") Тогда
		СтруктураНастроек.Вставить("КаждаяЭтикеткаНаНовомЛисте", ДанныеПечати.КаждаяЭтикеткаНаНовомЛисте);
	КонецЕсли;
	
	Если СтруктураМакетаШаблона <> Неопределено Тогда
		СтруктураНастроек.Вставить("СтруктураМакетаШаблона", СтруктураМакетаШаблона);
	КонецЕсли;
	
	ИсходнаяТаблица = НоваяТаблицаДанныхДляПечатиЭтикеток();
	НомерСтроки = 1;
	
	Для Каждого ОбъектПечати Из ОбъектыПечати Цикл
		НоваяСтрока = ИсходнаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбъектПечати);
		НоваяСтрока.Порядок = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		Если Не ЗначениеЗаполнено(НоваяСтрока.ХешСуммаКодаМаркировки) Тогда
			Если ЗначениеЗаполнено(НоваяСтрока.КодМаркировки) Тогда
				НоваяСтрока.ХешСуммаКодаМаркировки = ИнтеграцияИСМПТК.ХэшСуммаСтроки(НоваяСтрока.КодМаркировки);
			ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Штрихкод) Тогда
				НоваяСтрока.ХешСуммаКодаМаркировки = ИнтеграцияИСМПТК.ХэшСуммаСтроки(НоваяСтрока.Штрихкод);
			КонецЕсли;
		КонецЕсли;
		СоответствиеКодовМаркировки.Вставить(НоваяСтрока.Штрихкод);
	КонецЦикла;
	
	//Печать из обработки печати КМ из загруженных файлов - упрощенный режим без использования Пула кодов
	Если ДанныеПечати.Свойство("Документ") Тогда
		Если ДанныеПечати.Документ = "ПечатьИзФайла" Тогда 
			
			НачатьТранзакцию();
	        Попытка
				Если РежимПечати = "РезервироватьСвободныеКоды" Тогда
					
					СтруктураДанныхПоДокументу = СтруктураДанныхДляПечатиКодовИзФайла(ИсходнаяТаблица);
					ВывестиВТабличныйДокументЭтикеткиОбувь(ТабличныйДокумент, СтруктураДанныхПоДокументу.ТаблицаПечати, СтруктураНастроек);
					
				Иначе
					ВызватьИсключение НСтр("ru = 'Ошибка печати этикеток: Не указан режим печати';
								           |en = 'Ошибка печати этикеток: Не указан режим печати'");
				КонецЕсли;
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ВызватьИсключение;
			КонецПопытки;
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//Стандартная печать КМ с использованием данных Пула кодов
	БлокировкаЗаписей = Новый БлокировкаДанных;
	
	Если ДанныеПечати.Свойство("Документ", Документ) Тогда
		СтруктураОтбораДокументы = СтруктураОтбораДокументаПоТипуДокумента(Документ);
		Для Каждого ПолеОтбора Из СтруктураОтбораДокументы Цикл
			ЭлементБлокировки = БлокировкаЗаписей.Добавить("РегистрСведений.ПулКодовМаркировкиСУЗИСМПТК");
			ЭлементБлокировки.УстановитьЗначение(ПолеОтбора.Ключ, ПолеОтбора.Значение);
		КонецЦикла;
	Иначе
		Для Каждого КлючЗначение Из СоответствиеКодовМаркировки Цикл
			ЭлементБлокировки = БлокировкаЗаписей.Добавить("РегистрСведений.ПулКодовМаркировкиСУЗИСМПТК");
			ЭлементБлокировки.УстановитьЗначение("КодМаркировки", КлючЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаЗаписей.Заблокировать();
		
		Если РежимПечати = "РезервироватьСвободныеКоды" Тогда
			
			СтруктураДанныхПоДокументу = СтруктураДанныхДляПечатиСвободныхКодов(ИсходнаяТаблица, СтруктураОтбораДокументы);
			ВывестиВТабличныйДокументЭтикеткиОбувь(ТабличныйДокумент, СтруктураДанныхПоДокументу.ТаблицаПечати, СтруктураНастроек);
			УстановитьСостояниеРаспечатанПоСтруктуреДокумента(СтруктураДанныхПоДокументу);
	
		Иначе
			ВызватьИсключение НСтр("ru = 'Ошибка печати этикеток: Не указан режим печати';
									|en = 'Ошибка печати этикеток: Не указан режим печати'");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Удаляет использованные коды маркировки из пула в случаях:
//   * Все коды маркировки по основанию распечатаны, основание полностью оформлено (по основанию)
//   * Основание не указано или архивировано, коды маркировки распечатаны (по использованным кодам).
//
Процедура ОчисткаПулаКодовМаркировки() Экспорт
	
	СрокХраненияНапечатанныхКодов = Константы.СрокХраненияИспользованныхКодовМаркировкиИСМПТК.Получить();
	СрокХраненияВыгруженныхКодов  = Константы.СрокХраненияВыгруженныхКодовМаркировкиИСМПТК.Получить();
	
	Если СрокХраненияНапечатанныхКодов = 0 И СрокХраненияВыгруженныхКодов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДеньВСекундах = 86400;
	ДатаОчисткиНапечатанных = ?(СрокХраненияНапечатанныхКодов = 0, Дата(0001,01,01), НачалоДня(ТекущаяДатаСеанса()) - ДеньВСекундах * СрокХраненияНапечатанныхКодов);
	ДатаОчисткиВыгруженных 	= ?(СрокХраненияВыгруженныхКодов  = 0, Дата(0001,01,01), НачалоДня(ТекущаяДатаСеанса()) - ДеньВСекундах * СрокХраненияВыгруженныхКодов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОчисткиНапечатанных", ДатаОчисткиНапечатанных);
	Запрос.УстановитьПараметр("ДатаОчисткиВыгруженных", ДатаОчисткиВыгруженных);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПулКодовМаркировкиСУЗИСМПТК.КодМаркировки КАК КодМаркировки
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗИСМПТК КАК ПулКодовМаркировкиСУЗИСМПТК
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПулКодовМаркировкиСУЗИСМПТК.ДатаПечатиУниверсальная <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ПулКодовМаркировкиСУЗИСМПТК.ДатаПечатиУниверсальная < &ДатаОчисткиНапечатанных
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ПулКодовМаркировкиСУЗИСМПТК.ДатаВыгрузки <> ДАТАВРЕМЯ(1, 1, 1)
	|							И ПулКодовМаркировкиСУЗИСМПТК.ДатаВыгрузки < &ДатаОчисткиВыгруженных
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ
	|	И (ПулКодовМаркировкиСУЗИСМПТК.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКодовМаркировкиСУЗИСМПТК.Сгенерирован)
	|			ИЛИ ПулКодовМаркировкиСУЗИСМПТК.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКодовМаркировкиСУЗИСМПТК.Использован))";
	
	ВыборкаКоды = Запрос.Выполнить().Выбрать();
	
	Набор = РегистрыСведений.ПулКодовМаркировкиСУЗИСМПТК.СоздатьНаборЗаписей();
	Пока ВыборкаКоды.Следующий() Цикл
		Набор.Отбор.КодМаркировки.Установить(ВыборкаКоды.КодМаркировки);
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Используя объект платформы СхемаЗапроса добавляет условие по документу в зависимости от типа документа
// 
// Параметры:
// 	Запрос - Запрос - Экземпляр объекта запроса, текст которого необходимо модифицировать
// 	СтруктураОтбораДокументы - Структура - Описание:
// * Ключ - Строка - Имя поля, на значение которог необходимо установить отбор
// * Значение - ДокументСсылка - Значение отбора, которое необходимо установить
// 	ИндексПакета - Число, Неопределено - Индекс запроса в пакете, в который необходимо добавить условие,
//	если Неопределено - условие добавляется в последний запрос.
Процедура ДобавитьВЗапросПечатиУсловияПоДокументу(Запрос, СтруктураОтбораДокументы, ИндексПакета=Неопределено) Экспорт
	
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	Если ИндексПакета = Неопределено Тогда
		ПоследнийПакет = СхемаЗапроса.ПакетЗапросов.Получить(СхемаЗапроса.ПакетЗапросов.Количество() - 1);
	Иначе
		ПоследнийПакет = СхемаЗапроса.ПакетЗапросов.Получить(ИндексПакета);
	КонецЕсли;
	
	Операторы = ПоследнийПакет.Операторы.Получить(0);
	Для Каждого КлючЗначение Из СтруктураОтбораДокументы Цикл
		Операторы.Отбор.Добавить(СтрШаблон("%1 = &%2", КлючЗначение.Ключ, КлючЗначение.Ключ));
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - Массив - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати - СписокЗначений - значение - ссылка на объект;
//  ПараметрыВывода - Структура - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаКодМаркировкиИСМП") Тогда
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.АвтоМасштаб = Истина;
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПулКодовМаркировкиСУЗИСМПТК_ЭтикеткаИСМП";
		
		ВходящиеДанныеПечати = ПолучитьИзВременногоХранилища(ПараметрыПечати.АдресВХранилище);
		ДанныеПечати = Новый Структура;
		ДанныеПечати.Вставить("АдресВХранилище",            ПараметрыПечати.АдресВХранилище);
		ДанныеПечати.Вставить("Документ",                   ВходящиеДанныеПечати.Документ);
		ДанныеПечати.Вставить("КаждаяЭтикеткаНаНовомЛисте", ВходящиеДанныеПечати.КаждаяЭтикеткаНаНовомЛисте);
		ДанныеПечати.Вставить("РазрешитьПовторнуюПечать",   ИнтеграцияИСМПТК.РазрешенаПовторнаяПечатьКодовМаркировки());
		
		РаспечататьЭтикеткиИЗафиксироватьДатуПечати(ДанныеПечати, ТабличныйДокумент);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЭтикеткаКодМаркировкиИСМП",
			НСтр("ru = 'Этикетки ИС МПТ';
				|en = 'Этикетки ИС МПТ'"),
			ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит на печать этикетки
// 
// Параметры:
// 	ТабличныйДокумент - ТабличныйДокумент - Результат печати
// 	ТаблицаОбъектыПечати - ТаблицаЗначений - Исходные данные для печати
// 	СтруктураНастроек - Структура - (См. ПечатьЭтикетокИСМП.СтруктураНастроекЭтикеткаИСМП).
Процедура ВывестиВТабличныйДокументЭтикеткиОбувь(ТабличныйДокумент, ТаблицаОбъектыПечати, СтруктураНастроек) Экспорт
	
	СтандартнаяОбработка = Истина;
	ПечатьКодовМаркировкиИСМПТКПереопределяемый.ПечатьЭтикетокИСМП(ТаблицаОбъектыПечати, ТабличныйДокумент, СтруктураНастроек, СтандартнаяОбработка);

КонецПроцедуры

// Подготавливает данные для печати этикеток ИС
// 
// Параметры:
// 	ДанныеПечати - Структура - Данные для печати
// Возвращаемое значение:
// 	Структура, Неопределено - Описание:
// * РезультатРезервирования - Массив - Результат резервированных кодов маркировки
// * ТабличныйДокумент - ТабличныйДокумент - Напечатанные коды маркировки
Функция ПечатьЭтикетокСРезервированиемПоДокументу(ДанныеПечати) Экспорт
	
	СтруктураНастроек = ПечатьКодовМаркировкиИСМПТК.СтруктураНастроекЭтикеткаИСМП();
	СтруктураНастроек.КаждаяЭтикеткаНаНовомЛисте = ДанныеПечати.КаждаяЭтикеткаНаНовомЛисте;
	
	ТабличныйДокумент = Новый ТабличныйДокумент();
	РезультатРезервирования = Неопределено;
	Попытка
		РаспечататьЭтикеткиИЗафиксироватьДатуПечати(
			ДанныеПечати, ТабличныйДокумент, СтруктураНастроек, РезультатРезервирования);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	СтруктураРезультат = Новый Структура();
	СтруктураРезультат.Вставить("ТабличныйДокумент",       ТабличныйДокумент);
	СтруктураРезультат.Вставить("РезультатРезервирования", РезультатРезервирования);
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Возвращает структуру данных для печати свободных кодов.
// 
// Параметры:
// 	ТаблицаНоменклатуры - ТаблицаЗначений - Исходные данныех для печати
// 	СтруктураОтбораДокументы - Структура - Описание:
// * ДокументОснование - ДокументСсылка - Документ-основание для резервирования свободных кодов
// Возвращаемое значение:
// 	Структура - Описание:
// * ТаблицаПечати - ТаблицаЗначений - Данные для печати, по структуре частично повторяют ПулКодовМаркировки
// * Отбор - Структура - Структура с полями для отбора по документу, используется для передачи в 
//		(см. РегистрСведений.ПулКодовМаркировкиСУЗИСМПТК.ДобавитьВЗапросПечатиУсловияПоДокументу)
Функция СтруктураДанныхДляПечатиСвободныхКодов(ТаблицаНоменклатуры, СтруктураОтбораДокументы) Экспорт

	//Формируем данные для отбора доступных КМ из Пула.
	//Отбирать данные из регистра нужно строго по связке параметров Заказ-GTIN,
	//т.к. GTIN может встречаться и в рамках других заказов, не выбранных пользователем для печати.
	//При этом таких комбинаций может быть сразу несколько, поэтому параметры придется устанавливать парно,
	//формируя несколько однотипных подзапросов.
	
	ТоварыДляОтбора = ТаблицаНоменклатуры.Скопировать(, "ЗаказКМ, GTIN, Количество");
	ТоварыДляОтбора.Свернуть("ЗаказКМ, GTIN", "Количество");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ИнтеграцияИСМПТКПереопределяемый.ПолучитьТекстЗапросаДляПечатиКМ(ТоварыДляОтбора.Количество());
	
	Если Запрос.Текст = "" Тогда
		ВызватьИсключение НСтр("ru = 'При формировании запроса данных по Пулу кодов произошла ошибка. Печать прервана.'");
	КонецЕсли;
		
	СчетчикЦикла = 1;
	Для Каждого СтрокаТоваров Из ТоварыДляОтбора Цикл
	
		ИмяПараметрGTIN = "GTIN" + Строка(СчетчикЦикла);
		ИмяПараметрКоличество = "%КоличествоКПечати" + Строка(СчетчикЦикла);
		ИмяПараметрЗаказНаЭмиссию = "ЗаказНаЭмиссию" + Строка(СчетчикЦикла);
		
		Запрос.УстановитьПараметр(ИмяПараметрЗаказНаЭмиссию, СтрокаТоваров.ЗаказКМ); 
		Запрос.УстановитьПараметр(ИмяПараметрGTIN, СтрокаТоваров.GTIN); 
		Запрос.Текст = СтрЗаменитьПервое(Запрос.Текст, ИмяПараметрКоличество, Формат(СтрокаТоваров.Количество, "ЧГ=0"));
		
		СчетчикЦикла = СчетчикЦикла + 1;
		
	КонецЦикла;	
	
	РазрешенаПовторнаяПечать = ИнтеграцияИСМПТК.РазрешенаПовторнаяПечатьКодовМаркировки();
	НедоступныеСтатусы =  СтатусыВыведенИзОборота();
	НедоступныеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиСУЗИСМПТК.СгенерированНеНанесен);
	
	Запрос.УстановитьПараметр("НедоступныеСтатусы",       НедоступныеСтатусы);
	Запрос.УстановитьПараметр("РазрешенаПовторнаяПечать", РазрешенаПовторнаяПечать);
	
	СтруктураВозвращаемыхДанных = Новый Структура();
	СтруктураВозвращаемыхДанных.Вставить("Отбор", СтруктураОтбораДокументы);
	
	ТаблицаЗаписей = Запрос.Выполнить().Выгрузить();
	ТаблицаЗаписей.Индексы.Добавить("Организация, Номенклатура, Характеристика, Шаблон, СпособВводаВОборот, ДляПечати, ЗаказНаЭмиссию, КодМаркировки");
	
	ТаблицаЗаписей.Колонки.Добавить("ШаблонЭтикетки", Новый ОписаниеТипов("СправочникСсылка.ХранилищеШаблоновИСМПТК"));
	ТаблицаЗаписей.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ТаблицаЗаписей.Колонки.Добавить("СодержимоеКоличество", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ТаблицаЗаписей.Колонки.Добавить("НомерВГруппе", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	Для Каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
		                                                             
		НайденныеСтрокиКМ = ТаблицаЗаписей.НайтиСтроки(Новый Структура("ЗаказНаЭмиссию, GTIN", СтрокаТаблицы.ЗаказКМ, СтрокаТаблицы.GTIN));
		Для Каждого КМ Из НайденныеСтрокиКМ Цикл
			КМ.ШаблонЭтикетки = СтрокаТаблицы.ШаблонЭтикетки;
			КМ.Количество 	  = 1;
			КМ.СодержимоеКоличество = 1;
			КМ.НомерВГруппе = СтрокаТаблицы.НомерВГруппе;
			КМ.ШтрихКод 	= РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КМ.ШтрихКод);
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураВозвращаемыхДанных.Вставить("ТаблицаПечати", ТаблицаЗаписей);
	
	Возврат СтруктураВозвращаемыхДанных;
	
КонецФункции

Функция СтрЗаменитьПервое(Знач ИсходнаяСтрока, Знач ПодстрокаПоиска, Знач ПодстрокаЗамены) Экспорт
	
	ПозицияЗамены = Найти(ИсходнаяСтрока, ПодстрокаПоиска);
	Если ПозицияЗамены > 0 Тогда
		ВтораяЧасть = Сред(ИсходнаяСтрока, ПозицияЗамены + СтрДлина(ПодстрокаПоиска));
		ИсходнаяСтрока = Лев(ИсходнаяСтрока, ПозицияЗамены - 1) + ПодстрокаЗамены + ВтораяЧасть;
	КонецЕсли; 
	
	Возврат ИсходнаяСтрока;
	
КонецФункции

// Возвращает структуру данных для печати конкретного кода маркировки.
// 
// Параметры:
// 	ТаблицаНоменклатуры - ТаблицаЗначений - Исходные данные
// Возвращаемое значение:
// 	Структура - Описание:
// * ТаблицаПечати - ТаблицаЗначений - ТаблицаЗначений - Данные для печати
Функция СтруктураДанныхДляПечатиВыборочно(ТаблицаНоменклатуры, РазрешитьПовторнуюПечать=Ложь) Экспорт

	СтруктураВозвращаемыхДанных = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсходнаяТаблица.КодМаркировки          КАК КодМаркировки,
		|	ИсходнаяТаблица.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
		|	ИсходнаяТаблица.ТипШтрихкода           КАК ТипШтрихкода,
		|	ИсходнаяТаблица.Номенклатура           КАК Номенклатура,
		|	ИсходнаяТаблица.Характеристика         КАК Характеристика,
		|	ИсходнаяТаблица.ШаблонЭтикетки         КАК ШаблонЭтикетки,
		|	ИсходнаяТаблица.Количество             КАК КоличествоПечать,
		|	ИсходнаяТаблица.Количество             КАК Количество
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	&ТаблицаНоменклатуры КАК ИсходнаяТаблица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КодМаркировки,
		|	ХешСуммаКодаМаркировки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ДанныеРегистра.КодМаркировки,       ТаблицаНоменклатуры.КодМаркировки) КАК КодМаркировки,
		|	ЕСТЬNULL(ДанныеРегистра.ХешСуммаКодаМаркировки, ТаблицаНоменклатуры.ХешСуммаКодаМаркировки) КАК ХешСуммаКодаМаркировки,
		|	ЕСТЬNULL(ДанныеРегистра.ПолныйКодМаркировки, ТаблицаНоменклатуры.КодМаркировки) КАК Штрихкод,
		|	ЕСТЬNULL(ДанныеРегистра.ПолныйКодМаркировки, ТаблицаНоменклатуры.КодМаркировки) КАК ПолныйКодМаркировки,
		|	ДанныеРегистра.ЗаказНаЭмиссию,
		|	ДанныеРегистра.Статус,
		|	ДанныеРегистра.Организация,
		|	ЕСТЬNULL(ДанныеРегистра.Номенклатура, ТаблицаНоменклатуры.Номенклатура)     КАК Номенклатура,
		|	ЕСТЬNULL(ДанныеРегистра.Характеристика, ТаблицаНоменклатуры.Характеристика) КАК Характеристика,
		|	ДанныеРегистра.GTIN,
		|	ДанныеРегистра.ДатаПечатиУниверсальная,
		|	ТаблицаНоменклатуры.ТипШтрихкода Как ТипШтрихкода,
		|	ВЫБОР
		|		КОГДА  ДанныеРегистра.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ИСТИНА 
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДляЗаписи,
		|	ИСТИНА КАК ЭтоКодМаркировки,
		|	ТаблицаНоменклатуры.ШаблонЭтикетки,
		|	0 КАК НомерВГруппе,
		|	0 КАК СодержимоеКоличество,
		|	ВЫБОР
		|		КОГДА ДанныеРегистра.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ИСТИНА 
		|		КОГДА &РазрешенаПовторнаяПечать
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК МожноПечататьПовторно,
		|	ТаблицаНоменклатуры.КоличествоПечать Как Количество
		|ИЗ
		|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗИСМПТК КАК ДанныеРегистра
		|		ПО ДанныеРегистра.КодМаркировки          = ТаблицаНоменклатуры.КодМаркировки
		|		И ДанныеРегистра.ХешСуммаКодаМаркировки  = ТаблицаНоменклатуры.ХешСуммаКодаМаркировки
		|";
	РазрешенаПовторнаяПечать = ИнтеграцияИСМПТК.РазрешенаПовторнаяПечатьКодовМаркировки();
	Запрос.УстановитьПараметр("РазрешенаПовторнаяПечать", РазрешенаПовторнаяПечать);
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры",      ТаблицаНоменклатуры);
	
	ТаблицаПечати = Запрос.Выполнить().Выгрузить();
	
	Отказ = Ложь;
	
	Для Каждого СтрокаТЧ Из ТаблицаПечати Цикл
		
		СтрокаТЧ.Штрихкод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтрокаТЧ.ПолныйКодМаркировки);
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Штрихкод) Тогда
			СтрокаТЧ.Штрихкод = СтрокаТЧ.КодМаркировки;
		КонецЕсли;
		
		Если Не РазрешитьПовторнуюПечать И Не СтрокаТЧ.МожноПечататьПовторно Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Ошибка печати этикетки по %1: уже распечатан. Повторная печать недоступна';
					|en = 'Ошибка печати этикетки по %1: уже распечатан. Повторная печать недоступна'"),
				СтрокаТЧ.КодМаркировки);
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ТаблицаПечати.Количество() Тогда
		ТекстСообщения = НСтр("ru = 'Не найдено данных для печати';
								|en = 'Не найдено данных для печати'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка печати этикеток';
								|en = 'Ошибка печати этикеток'");
	КонецЕсли;
	
	СтруктураВозвращаемыхДанных.Вставить("ТаблицаПечати", ТаблицаПечати);

	Возврат СтруктураВозвращаемыхДанных;
	
КонецФункции

// Устанавливает признак печати кода маркировки в регистре ПулКодовМаркировкиСУЗИСМПТК текущей универсальной датой
// 
// Параметры:
// 	СтруктураДанныхПоДокументу - Структура - Описание:
// * ТаблицаПечати - ТаблицаЗначений - Список записей, для которых нужно установить признак печати
// * Отбор - Структура - Структура данных для отбора и установки блокировки по документу
Процедура УстановитьСостояниеРаспечатанПоСтруктуреДокумента(СтруктураДанныхПоДокументу, ПечатьИзОбработки = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПечатьИзОбработки Тогда
		МассивКМДляПечати = СтруктураДанныхПоДокументу.ВыгрузитьКолонку("КодИдентификации");
	Иначе
		МассивКМДляПечати = СтруктураДанныхПоДокументу.ТаблицаПечати.ВыгрузитьКолонку("КодМаркировки");
	КонецЕсли;
	
	Для Каждого Код Из МассивКМДляПечати Цикл
		
		НаборДанныхДляОбновления = РегистрыСведений.ПулКодовМаркировкиСУЗИСМПТК.СоздатьНаборЗаписей();
		НаборДанныхДляОбновления.Отбор.КодМаркировки.Установить(Код);
		НаборДанныхДляОбновления.Прочитать();
		
		ДатаПечати = ТекущаяДатаСеанса();
		
		НаборДанныхДляОбновления[0].ДатаПечатиУниверсальная = ДатаПечати;
		НаборДанныхДляОбновления[0].Статус = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиСУЗИСМПТК.Использован");
		
		НаборДанныхДляОбновления.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает новую таблицу для печати этикеток
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Новая пустая таблица для заполнения данными печати
Функция НоваяТаблицаДанныхДляПечатиЭтикеток() Экспорт
	
	НаборВременный = РегистрыСведений.ПулКодовМаркировкиСУЗИСМПТК.СоздатьНаборЗаписей();
	
	ОписаниеТипаСтрока = Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗИСМПТК.Измерения.КодМаркировки.Тип;
	ОписаниеТипаЧисло  = ОбщегоНазначения.ОписаниеТипаЧисло(10);
	ТаблицаИтог        = НаборВременный.Выгрузить(,"Номенклатура, Характеристика");
	ТаблицаИтог.Колонки.Добавить("Серия",                ОписаниеТипаСтрока);
	
	ТаблицаИтог.Колонки.Добавить("Количество",           ОписаниеТипаЧисло);
	ТаблицаИтог.Колонки.Добавить("КоличествоПечать",     ОписаниеТипаЧисло);
	ТаблицаИтог.Колонки.Добавить("Порядок",              ОписаниеТипаЧисло);
	ТаблицаИтог.Колонки.Добавить("Штрихкод",             ОписаниеТипаСтрока);
	ТаблицаИтог.Колонки.Добавить("ТипШтрихкода",         Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодовИСМПТК"));
	ТаблицаИтог.Колонки.Добавить("КодМаркировки",        ОписаниеТипаСтрока);
	ТаблицаИтог.Колонки.Добавить("НомерВГруппе",         ОписаниеТипаЧисло);
	ТаблицаИтог.Колонки.Добавить("СодержимоеКоличество", ОписаниеТипаЧисло);
	ТаблицаИтог.Колонки.Добавить("ШаблонЭтикетки",       Метаданные.ОпределяемыеТипы.ШаблонЭтикеткиИСМПТК.Тип);
	ТаблицаИтог.Колонки.Добавить("Шаблон", 			     Новый ОписаниеТипов("ПеречислениеСсылка.ШаблоныКодовМаркировкиСУЗИСМПТК"));
	ТаблицаИтог.Колонки.Добавить("СпособВводаВОборот",   Новый ОписаниеТипов("ПеречислениеСсылка.СпособыВводаВОборотСУЗИСМПТК"));
	ТаблицаИтог.Колонки.Добавить("ЭтоКодМаркировки",     Новый ОписаниеТипов("Булево"));
	ТаблицаИтог.Колонки.Добавить("Организация",          Метаданные.ОпределяемыеТипы.Организация.Тип);
	ТаблицаИтог.Колонки.Добавить("ВидПродукции",         Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИСМПТК"));
	ТаблицаИтог.Колонки.Добавить("ХешСуммаКодаМаркировки",Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗИСМПТК.Измерения.ХешСуммаКодаМаркировки.Тип);
	ТаблицаИтог.Колонки.Добавить("GTIN",        		 ОписаниеТипаСтрока);
	
	ТаблицаИтог.Колонки.Добавить("ЗаказКМ",  			 Новый ОписаниеТипов("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК"));
		
	МассивТиповПризнакаМаркировкиОстатков = Новый Массив();
	МассивТиповПризнакаМаркировкиОстатков.Добавить(Тип("Булево"));
	МассивТиповПризнакаМаркировкиОстатков.Добавить(Тип("ПеречислениеСсылка.ВидыПродукцииИСМПТК"));
	ТаблицаИтог.Колонки.Добавить("МаркировкаОстатков", Новый ОписаниеТипов(МассивТиповПризнакаМаркировкиОстатков));
	
	Возврат ТаблицаИтог;
	
КонецФункции

Функция НоваяТаблицаРезультатаРезервирования() Экспорт
	
	ТаблицаИтог = Новый ТаблицаЗначений;
	ТаблицаИтог.Колонки.Добавить(
		"Номенклатура", Метаданные.ОпределяемыеТипы.НоменклатураИСМПТК.Тип);
	ТаблицаИтог.Колонки.Добавить(
		"Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыИСМПТК.Тип);
	ТаблицаИтог.Колонки.Добавить(
		"КодМаркировки", Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗИСМПТК.Измерения.КодМаркировки.Тип);
	ТаблицаИтог.Колонки.Добавить(
		"ПолныйКодМаркировки",
		Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗИСМПТК.Реквизиты.ПолныйКодМаркировки.Тип);
	ТаблицаИтог.Колонки.Добавить(
		"ХешСуммаКодаМаркировки",
		Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗИСМПТК.Измерения.ХешСуммаКодаМаркировки.Тип);
	ТаблицаИтог.Колонки.Добавить(
		"ТипШтрихкода",
		Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗИСМПТК.Реквизиты.ТипШтрихкода.Тип);
	ТаблицаИтог.Колонки.Добавить("ИННВладельца", Новый ОписаниеТипов("Строка"));
	ТаблицаИтог.Индексы.Добавить("Номенклатура, Характеристика");
	
	Возврат ТаблицаИтог;
	
КонецФункции

// Возвращает признак наличия в конфигурации-потребителе справочника шаблонов для печати этикеток
// 
// Возвращаемое значение:
// 	Булево - Описание
Функция ВидимостьШаблонаЭтикетки() Экспорт
	
	ШаблонЭтикеткиЭтоСправочник = Ложь;
	
	ТипыШаблонаЭтикетки = Метаданные.ОпределяемыеТипы["ШаблонЭтикеткиИСМПТК"].Тип.Типы();
	ТипВсеСправочники   = Справочники.ТипВсеСсылки();
	
	Для Каждого ТипШаблонаЭтикетки Из ТипыШаблонаЭтикетки Цикл
		Если ТипВсеСправочники.СодержитТип(ТипШаблонаЭтикетки) Тогда
			ШаблонЭтикеткиЭтоСправочник = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ШаблонЭтикеткиЭтоСправочник;
	
КонецФункции

#КонецОбласти

#Область ПечатьКМИзЗагруженныхФалов

Функция СтруктураДанныхДляПечатиКодовИзФайла(ТаблицаНоменклатуры) Экспорт

	СтруктураВозвращаемыхДанных = Новый Структура();
	ТаблицаПечати = ТаблицаНоменклатуры.Скопировать();
	Для Каждого СтрокаТЧ Из ТаблицаПечати Цикл
		СтрокаТЧ.Штрихкод = Base64ВШтрихкод(СтрокаТЧ.Штрихкод);
	КонецЦикла;	
	ТаблицаПечати.Индексы.Добавить("КодМаркировки");
	СтруктураВозвращаемыхДанных.Вставить("ТаблицаПечати", ТаблицаПечати);
	
	Возврат СтруктураВозвращаемыхДанных;
	
КонецФункции

Функция Base64ВШтрихкод(ШтрихкодВBase64) Экспорт
	
	ДвоичныеДанные = Base64Значение(ШтрихкодВBase64);
	Если ДвоичныеДанные = Неопределено Тогда
		Штрихкод = ШтрихкодВBase64;
	Иначе
		Штрихкод = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли