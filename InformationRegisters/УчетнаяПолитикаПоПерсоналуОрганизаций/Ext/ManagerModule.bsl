#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Включение режима ведения учета по головной организации
// Производит замену значения измерения "Организация" в регистрах
// на головную организацию
//
// Параметры:
//  Организация
//
// Возвращаемое значение:
//  Истина	- если действе выполнено успешно
//	Ложь	- если действе выполнено неуспешно
//
Функция ВключениеВеденияУчетаПоГоловнойОрганизации(Организация) Экспорт
	
	ГоловнаяОрганизация = Организация.ГоловнаяОрганизация;
	Если НЕ ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Возврат Истина;		
	КонецЕсли;
	
	Если Организация <> ГоловнаяОрганизация Тогда
		Если НЕ(МожноВключатьВедениеУчетаПоГоловнойОрганизации(Организация)) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Включить ведение учета по головной организации невозможно, т.к. некоторые сотрудники работают одновременно по внешнему совместительству и основному месту работы в организации-филиале и головной организации!'")
			);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
    	
	СписокРегистров = Новый СписокЗначений;
	СписокРегистров.Добавить("РаботникиОрганизаций", НСтр("ru = 'Кадровая история сотрудников'"));
	СписокРегистров.Добавить("ПлановыеНачисленияРаботниковОрганизаций", НСтр("ru = 'Плановые начисления сотрудников организаций'"));
	СписокРегистров.Добавить("ПлановыеУдержанияРаботниковОрганизаций", НСтр("ru = 'Плановые удержания сотрудников организаций'"));
	СписокРегистров.Добавить("КоэффициентыИндексацииЗаработка", НСтр("ru = 'Коэффициенты индексации заработка'"));
	СписокРегистров.Добавить("РеглУчетПлановыхНачисленийРаботниковОрганизаций", НСтр("ru = 'Регл. учет плановых начислений сотрудников организаций'"));
	
	Для Каждого Регистр Из СписокРегистров Цикл
		
		ВключениеВеденияУчетаПоГоловнойОрганизации = Истина;
		ОбработатьРегистрДляВеденияУчетаПоГоловнойОрганизации(Организация, Регистр.Значение, Регистр.Представление, ВключениеВеденияУчетаПоГоловнойОрганизации);
		
	КонецЦикла;
	
	// в Кадровых перемещениях, если перемещение происходило в пределах одного филиала
	// заменим реквизит Организация, содержащий ссылку на филиал
	// на головную организацию	
	
	Если Организация <> ГоловнаяОрганизация Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КадровоеПеремещениеОрганизаций.Ссылка
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций КАК КадровоеПеремещениеОрганизаций
		|ГДЕ
		|	КадровоеПеремещениеОрганизаций.Организация = &Организация
		|	И КадровоеПеремещениеОрганизаций.Проведен");
		
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Документ = Выборка.Ссылка.ПолучитьОбъект();
			Документ.Организация = ГоловнаяОрганизация;
			Документ.ОбособленноеПодразделениеКуда   = Организация;
			Документ.ОбособленноеПодразделениеОткуда = Организация;
			Документ.Записать();		
		КонецЦикла;       	
	КонецЕсли;
	
	// В справочник СотрудникиОрганизаций заменим значение реквизита Организация
	// на значение головной организации
	
	Если Организация <> ГоловнаяОрганизация Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Ссылка
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Организация = &Организация");		
		
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Справочник = Выборка.Ссылка.ПолучитьОбъект();
			Справочник.Организация = ГоловнаяОрганизация;			
			Справочник.Записать();		
		КонецЦикла;       	
	КонецЕсли;
		
	Возврат Истина;		
	
КонецФункции

// Отключение режима ведения учета по головной организации
// Производит замену значения измерения "Организация" в регистрах
// с головной организации на организацию
//
// Отключение режима ведения учета по головной организации возможно только
// в том случае, если не было кадровых перемещений по данной организации
// из головы в филиал, или из филиала в голову
//
// Параметры:
//  Организация
//
// Возвращаемое значение:
//  Истина	- если действе выполнено успешно
//	Ложь	- если действе выполнено неуспешно
//
Функция ВыключениеВеденияУчетаПоГоловнойОрганизации(Организация) Экспорт
	
	ГоловнаяОрганизация = Организация.ГоловнаяОрганизация;
	Если НЕ ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Возврат Истина;		
	КонецЕсли;
	
	// проверим можно ли снять признак ведения учета по головной организации
	// если были Кадровые перемещения из филиала в голову - то запрещаем снимать признак
	Если НЕ (МожноОтключатьВедениеУчетаПоГоловнойОрганизации(Организация)) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Отключить ведение учета по головной организации невозможно, т.к. есть кадровые перемещения по данной организации!'")
		);
		Возврат Ложь;		
	КонецЕсли;
		
	СписокРегистров = Новый СписокЗначений;
	СписокРегистров.Добавить("РаботникиОрганизаций", НСтр("ru = 'Кадровая история сотрудников'"));
	СписокРегистров.Добавить("ПлановыеНачисленияРаботниковОрганизаций",  НСтр("ru = 'Плановые начисления сотрудников организаций'"));
	СписокРегистров.Добавить("ПлановыеУдержанияРаботниковОрганизаций",  НСтр("ru = 'Плановые удержания сотрудников организаций'"));
	СписокРегистров.Добавить("КоэффициентыИндексацииЗаработка",  НСтр("ru = 'Коэффициенты индексации заработка'"));
	СписокРегистров.Добавить("РеглУчетПлановыхНачисленийРаботниковОрганизаций",  НСтр("ru = 'Регл. учет плановых начислений сотрудников организаций'"));
	
	Для Каждого Регистр Из СписокРегистров Цикл
		
		ВключениеВеденияУчетаПоГоловнойОрганизации = Ложь;
		ОбработатьРегистрДляВеденияУчетаПоГоловнойОрганизации(Организация, Регистр.Значение, Регистр.Представление, ВключениеВеденияУчетаПоГоловнойОрганизации);
		
	КонецЦикла;
	
	// в Кадровых перемещениях, если перемещение происходило в пределах одного филиала
	// нужно заменить реквизит Организация, содержащий ссылку на голову
	// на ссылку на организацию-филиал, не ведущий учет по голове
	// Документы "Кадровое перемещение", где ОбособленноеПодразделениеОткуда = ОбособленноеПодразделениеКуда = Организация
	
	Если Организация <> ГоловнаяОрганизация Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КадровоеПеремещениеОрганизаций.Ссылка
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций КАК КадровоеПеремещениеОрганизаций
		|ГДЕ
		|	КадровоеПеремещениеОрганизаций.Организация = &ГоловнаяОрганизация
		|	И КадровоеПеремещениеОрганизаций.Проведен
		|	И (КадровоеПеремещениеОрганизаций.ОбособленноеПодразделениеКуда = &Организация
		|			ИЛИ КадровоеПеремещениеОрганизаций.ОбособленноеПодразделениеОткуда = &Организация)
		|	И КадровоеПеремещениеОрганизаций.ОбособленноеПодразделениеКуда = КадровоеПеремещениеОрганизаций.ОбособленноеПодразделениеОткуда");
		
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Документ = Выборка.Ссылка.ПолучитьОбъект();
			Документ.Организация = Организация;
			Документ.Записать();		
		КонецЦикла;       	
	КонецЕсли;
	
	// В справочнике "Сотрудники организации"
	Если Организация <> ГоловнаяОрганизация Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Ссылка
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.ТекущаяСтруктурнаяЕдиница = &Организация
		|   ИЛИ (СотрудникиОрганизаций.ТекущаяСтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И СотрудникиОрганизаций.СтруктурнаяЕдиница = &Организация)");		
				
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Справочник = Выборка.Ссылка.ПолучитьОбъект();
			Справочник.Организация = Организация;
			Справочник.Записать();		
		КонецЦикла;       	
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция проверяет можно ли отключать ведение учета по головной организации
//
// Параметры: 
//	нет
//
// Возвращаемое значение:
//  Истина - можно отключать, Ложь - существуют кадровые перемещения в пределах головной организации =>
//	отключение невозможно
//
// Описание:
//  Проверяет, есть ли кадровые перемещения 
//
Функция МожноОтключатьВедениеУчетаПоГоловнойОрганизации(Организация)
					
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КадровоеПеремещениеОрганизаций.Ссылка
	|ИЗ
	|	Документ.КадровоеПеремещениеОрганизаций КАК КадровоеПеремещениеОрганизаций
	|ГДЕ
	|	КадровоеПеремещениеОрганизаций.Организация = &ГоловнаяОрганизация
	|	И КадровоеПеремещениеОрганизаций.Проведен
	|	И (КадровоеПеремещениеОрганизаций.ОбособленноеПодразделениеКуда = &Организация
	|			ИЛИ КадровоеПеремещениеОрганизаций.ОбособленноеПодразделениеОткуда = &Организация)
	|	И КадровоеПеремещениеОрганизаций.ОбособленноеПодразделениеКуда <> КадровоеПеремещениеОрганизаций.ОбособленноеПодразделениеОткуда");
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",Организация.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Организация",Организация);
	
	Возврат Запрос.Выполнить().Пустой();

КонецФункции

// Функция проверяет можно ли включать ведение учета по головной организации
//
// Параметры: 
//	нет
//
// Возвращаемое значение:
//  Истина - можно включать, Ложь - существуют работники, принятые по внешнему совместительству и основному месту работу
//  одновременно по головной организации и филиалу =>
//	включение ведения учета по головной организации невозможно
//
// Описание:
//  Проверяет, есть ли работники, принятые в один и тот же период по основному месту работы и внешнему совместительству
//  либо принятые и уволенные работники в один день
//
Функция МожноВключатьВедениеУчетаПоГоловнойОрганизации(Организация)
					
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КоличествоДублирующихсяЗаписей.Сотрудник,
	|	КоличествоДублирующихсяЗаписей.Период,
	|	КоличествоДублирующихсяЗаписей.КоличествоПериодов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаписиРегистра.Сотрудник КАК Сотрудник,
	|		ЗаписиРегистра.Период КАК Период,
	|		КОЛИЧЕСТВО(ЗаписиРегистра.Период) КАК КоличествоПериодов
	|	ИЗ
	|		(ВЫБРАТЬ
	|			РаботникиОрганизаций.Период КАК Период,
	|			1 КАК ПериодКоличество,
	|			РаботникиОрганизаций.Сотрудник КАК Сотрудник,
	|			РаботникиОрганизаций.Организация КАК Организация,
	|			РаботникиОрганизаций.ОбособленноеПодразделение КАК ОбособленноеПодразделение
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ГДЕ
	|			(РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
	|					ИЛИ РаботникиОрганизаций.Организация = &Организация)
	|			И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК ЗаписиРегистра
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаписиРегистра.Сотрудник,
	|		ЗаписиРегистра.Период) КАК КоличествоДублирующихсяЗаписей
	|ГДЕ
	|	КоличествоДублирующихсяЗаписей.КоличествоПериодов > 1");
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", Организация.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Организация",		 Организация);	

	Возврат Запрос.Выполнить().Пустой();

КонецФункции

Процедура ОбработатьРегистрДляВеденияУчетаПоГоловнойОрганизации(Организация, ИмяРегистра, ПредставлениеРегистра, ВключениеВеденияУчетаПоГоловнойОрганизации)
		
	// Обработаем регистр
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаРегистра.Регистратор,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаРегистра.Регистратор) КАК ПредставлениеДок,
	|	ТаблицаРегистра.НомерСтроки
	|ИЗ
	|	РегистрСведений." + ИмяРегистра + " КАК ТаблицаРегистра";
	Если ВключениеВеденияУчетаПоГоловнойОрганизации Тогда
		Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	ТаблицаРегистра.Организация = &Организация
			|	И НЕ ТаблицаРегистра.Организация = &ГоловнаяОрганизация";
	Иначе
		Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	ТаблицаРегистра.ОбособленноеПодразделение = &Организация
			|	И НЕ ТаблицаРегистра.Организация = &Организация";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|";

	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", Организация.ГоловнаяОрганизация);
	Выборка = Запрос.Выполнить().Выбрать();
	ЕстьДанные = Выборка.Следующий();	
	
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();

	Пока ЕстьДанные Цикл
	
		ТекущийРегистратор = Выборка.Регистратор;
		НаборЗаписей.Отбор.Регистратор.Значение = ТекущийРегистратор;
		НаборЗаписей.Отбор.Регистратор.Использование = Истина;
		НаборЗаписей.Прочитать();
		
		Пока ЕстьДанные
				И Выборка.Регистратор = ТекущийРегистратор Цикл
			
			Если Выборка.НомерСтроки <= НаборЗаписей.Количество() Тогда
				ЗаписьНабора = НаборЗаписей[Выборка.НомерСтроки - 1];
				
				Если ВключениеВеденияУчетаПоГоловнойОрганизации Тогда
					ЗаписьНабора.Организация = ЗаписьНабора.Организация.ГоловнаяОрганизация;				
				Иначе				
					ЗаписьНабора.Организация = ЗаписьНабора.ОбособленноеПодразделение;				
				КонецЕсли;
				
			КонецЕсли;
				
			ЕстьДанные = Выборка.Следующий();
		КонецЦикла;
		
		// записываем набор 
		Если НаборЗаписей.Модифицированность() Тогда
			Попытка
				НаборЗаписей.Записать();
				НаборЗаписей.Очистить();
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось обработать регистр сведений: ""%1"".
						|По причине: %2'")
						, ПредставлениеРегистра, ОписаниеОшибки())
				);
			КонецПопытки;
		КонецЕсли;
			
	КонецЦикла; 
	
КонецПроцедуры

#КонецЕсли
