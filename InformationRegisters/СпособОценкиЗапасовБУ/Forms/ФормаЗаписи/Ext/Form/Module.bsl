
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийСчетЗапасов   = Запись.СчетЗапасов;
	ТекущийСпособОценки  = Запись.СпособОценки;
	
	ИсходныйСчетЗапасов  = Запись.СчетЗапасов;
	ИсходныйСпособОценки = Запись.СпособОценки;
	
	УстановитьДоступныеДляВыбораСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПланСчетовТиповой" Тогда 
		УстановитьДоступныеДляВыбораСчета();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// если изменился счет запасов и на старом счете было субконто "Партии", то необходимо его удалить
	Если НЕ Запись.ИсходныйКлючЗаписи.Пустой() И ИсходныйСчетЗапасов <> ТекущийОбъект.СчетЗапасов
		И (ИсходныйСпособОценки = Перечисления.СпособыОценки.ФИФО
			ИЛИ ИсходныйСпособОценки = Перечисления.СпособыОценки.ЛИФО) Тогда 
				
		Объект   = ИсходныйСчетЗапасов.ПолучитьОбъект();
		Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Партии, "ВидСубконто");
		
		Если Субконто <> Неопределено Тогда
			Объект.ВидыСубконто.Удалить(Субконто);
			ОбщегоНазначения.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для счета %1 удалено субконто ""Партии""'"), ИсходныйСчетЗапасов),
			);
			
			Объект.Записать();
		КонецЕсли;
	
	КонецЕсли;
	
	// установим свойства выбранного счета в соответствии с установленными настройками
	// субконто добавляем только при первой записи счета 
	// или если изменился способ оценки у существующей записи
	// или если изменился счет запасов у существующей записи
	Если Запись.ИсходныйКлючЗаписи.Пустой()
		ИЛИ (НЕ Запись.ИсходныйКлючЗаписи.Пустой() И ИсходныйСпособОценки <> ТекущийОбъект.СпособОценки)
		ИЛИ (НЕ Запись.ИсходныйКлючЗаписи.Пустой() И ИсходныйСчетЗапасов  <> ТекущийОбъект.СчетЗапасов) Тогда 
		
		Объект   = ТекущийОбъект.СчетЗапасов.ПолучитьОбъект();
		Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Партии, "ВидСубконто");
		
		ОбъектИзменен = Ложь;
		Если Запись.СпособОценки = Перечисления.СпособыОценки.ЛИФО ИЛИ Запись.СпособОценки = Перечисления.СпособыОценки.ФИФО Тогда 
			Если Субконто = Неопределено Тогда
				НовыйВид = Объект.ВидыСубконто.Добавить();
				
				НовыйВид.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Партии;
				НовыйВид.Суммовой    = Истина;
				НовыйВид.Количественный = Истина;
				ОбщегоНазначения.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для счета %1 установлено субконто ""Партии""'"), ТекущийОбъект.СчетЗапасов),
				);
				
				ОбъектИзменен = Истина;
			КонецЕсли;
		Иначе
			Если Субконто <> Неопределено Тогда
				Объект.ВидыСубконто.Удалить(Субконто);
				ОбщегоНазначения.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для счета %1 удалено субконто ""Партии""'"), ТекущийОбъект.СчетЗапасов),
				);
				
				ОбъектИзменен = Истина;
			КонецЕсли;
		КонецЕсли;

		Если ОбъектИзменен Тогда 
			Объект.Записать();
		КонецЕсли;
			
	КонецЕсли;
	
	ИсходныйСчетЗапасов  = ТекущийОбъект.СчетЗапасов;
	ИсходныйСпособОценки = ТекущийОбъект.СпособОценки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СчетЗапасовПриИзменении(Элемент)
	
	Если Запись.СчетЗапасов = ТекущийСчетЗапасов Тогда 
		Возврат;
	КонецЕсли;
	
	СчетЗапасовПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОценкиПриИзменении(Элемент)
	
	Если Запись.СпособОценки = ТекущийСпособОценки Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Запись.СчетЗапасов) Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не указан счет запасов'"),
			,
			"СчетЗапасов",
			"Запись");
		Возврат;
	КонецЕсли;
	
	СпособОценкиПриИзмененииНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьДоступныеДляВыбораСчета()
	
	Запрос = Новый Запрос;
	
	ГруппыСчетовИсключений = Новый Массив;
	ГруппыСчетовИсключений.Добавить(ПланыСчетов.Типовой.НезавершенноеПроизводство);
	ГруппыСчетовИсключений.Добавить(ПланыСчетов.Типовой.РезервПоСписаниюЗапасов);
	
	СчетаИсключения = Новый Массив;
	СчетаИсключения.Добавить(ПланыСчетов.Типовой.ПрочиеЗапасы);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Типовой.Ссылка,
	|	Типовой.Наименование,
	|	Типовой.Код,
	|	Типовой.ПометкаУдаления
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	Типовой.Ссылка В ИЕРАРХИИ(&СчетаЗапасов)
	|	И Типовой.ЗапретитьИспользоватьВПроводках = ЛОЖЬ
	|	И НЕ Типовой.Ссылка В ИЕРАРХИИ (&ГруппыСчетовИсключений)
	|	И НЕ Типовой.Ссылка В (&СчетаИсключения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Типовой.Порядок";
	
	МассивСчетовЗапасов = Новый Массив;
	МассивСчетовЗапасов.Добавить(ПланыСчетов.Типовой.Запасы);
	МассивСчетовЗапасов.Добавить(ПланыСчетов.Типовой.МонтажОборудования);
	
	Запрос.УстановитьПараметр("СчетаЗапасов",           МассивСчетовЗапасов);
	Запрос.УстановитьПараметр("ГруппыСчетовИсключений", ГруппыСчетовИсключений);
	Запрос.УстановитьПараметр("СчетаИсключения",        СчетаИсключения);
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка")));
	
	Элементы.СчетЗапасов.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура СчетЗапасовПриИзмененииНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	""Свернуть"" КАК Свернуть,
	|	ТиповойОбороты.СуммаОборотДт КАК ОборотПоСтаромуСчету,
	|	0 КАК ОборотПоНовомуСчету
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(, , , Счет = &СчетСтарый, , , , ) КАК ТиповойОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Свернуть"",
	|	0,
	|	ТиповойОбороты.СуммаОборотДт
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(, , , Счет = &СчетНовый, , , , ) КАК ТиповойОбороты
	|ИТОГИ
	|	СУММА(ОборотПоСтаромуСчету),
	|	СУММА(ОборотПоНовомуСчету)
	|ПО
	|	Свернуть";
	Запрос.УстановитьПараметр("СчетСтарый", ТекущийСчетЗапасов);
	Запрос.УстановитьПараметр("СчетНовый", Запись.СчетЗапасов);
	
	ВыборкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтоги.Следующий() Цикл
		Если ЗначениеЗаполнено(Запись.СчетЗапасов) И ВыборкаИтоги.ОборотПоНовомуСчету <> 0 
			И НЕ Запись.ИсходныйКлючЗаписи.Пустой() И ВыборкаИтоги.ОборотПоСтаромуСчету <> 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Нельзя менять счет учета запасов, т.к. по счетам %1 и %2 существуют проведенные документы'"),
								ТекущийСчетЗапасов, Запись.СчетЗапасов);
								
			Запись.СчетЗапасов = ТекущийСчетЗапасов;
			ВызватьИсключение ТекстСообщения;
		ИначеЕсли ЗначениеЗаполнено(Запись.СчетЗапасов) И ВыборкаИтоги.ОборотПоНовомуСчету <> 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Нельзя установить счет учета запасов, т.к. по счету %1 существуют проведенные документы'"),
								Запись.СчетЗапасов);
								
			Запись.СчетЗапасов = ТекущийСчетЗапасов;
			ВызватьИсключение ТекстСообщения;
		ИначеЕсли ВыборкаИтоги.ОборотПоСтаромуСчету <> 0 И НЕ Запись.ИсходныйКлючЗаписи.Пустой() Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Нельзя менять счет учета запасов, т.к. по счету %1 существуют проведенные документы'"),
								ТекущийСчетЗапасов);
								
			Запись.СчетЗапасов = ТекущийСчетЗапасов;
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЦикла;
	
	ТекущийСчетЗапасов = Запись.СчетЗапасов;
	
КонецПроцедуры

&НаСервере
Процедура СпособОценкиПриИзмененииНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
    |	ТиповойОбороты.Счет,
    |	ТиповойОбороты.СуммаОборотДт
    |ИЗ
    |	РегистрБухгалтерии.Типовой.Обороты(, , , Счет = &Счет, , , , ) КАК ТиповойОбороты";
	Запрос.УстановитьПараметр("Счет", Запись.СчетЗапасов);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Запись.СпособОценки = ТекущийСпособОценки;
		ВызватьИсключение НСтр("ru = 'Нельзя менять способ оценки запасов, т.к. существуют проведенные документы.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ТекущийСпособОценки = Запись.СпособОценки;
	
КонецПроцедуры
