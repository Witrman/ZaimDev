
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИдентификаторыНастроек = Новый Структура;
	
	Если Параметры.Свойство("Пользователь") Тогда
		
		Пользователь = Параметры.Пользователь;
		
		Если ЗначениеЗаполнено(Пользователь) Тогда
			
			ОсновнаяОрганизация = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация;
			ОсновноеПодразделениеОрганизации = ПланыВидовХарактеристик.НастройкиПользователей.ОсновноеПодразделениеОрганизации;
			ОсновноеСтруктурноеПодразделениеОрганизации = ПланыВидовХарактеристик.НастройкиПользователей.ОсновноеСтруктурноеПодразделениеОрганизации;
			
			ЗначенияНастроекПользователя = ПользователиБКВызовСервераПовтИсп.ЗначенияНастроекПользователя(
				Пользователь, "ОсновнаяОрганизация,ОсновноеСтруктурноеПодразделениеОрганизации");
				
			ЗначениеОсновнойОрганизации = ЗначенияНастроекПользователя.ОсновнаяОрганизация;
			ЗначениеОсновногоСтруктурногоПодразделения = ЗначенияНастроекПользователя.ОсновноеСтруктурноеПодразделениеОрганизации;
			
			ЗаполнитьДерево();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ФормаСкопироватьДругим.Видимость = Пользователи.ЭтоПолноправныйПользователь();
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения("ОбновитьНастройкиИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
	Если НЕ Модифицированность И ОбновлятьНастройки Тогда
		ОбновитьНастройки(Отказ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Пользователи" И Модифицированность Тогда
		Модифицированность = Ложь;
		ОбновлятьНастройки = Истина;
	КонецЕсли;
	
	ПараметрыОбработкиОповещения = Новый Структура("ИмяСобытия, Параметр", ИмяСобытия, Параметр);
	ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьОбработкуОповещения", 0.1, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДеревоНастроек

&НаКлиенте
Процедура ДеревоНастроекПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные = Неопределено ИЛИ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		
		Отказ = Истина;
		Возврат;
		
	ИначеЕсли Элемент.ТекущиеДанные.Настройка = ОсновноеПодразделениеОрганизации Тогда
		
		Если НЕ ЗначениеЗаполнено(ЗначениеОсновнойОрганизации) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Для выбора основного подразделения необходимо выбрать основную организацию!'"),,,, Отказ);
			Возврат;
		КонецЕсли;
		
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Владелец", ЗначениеОсновнойОрганизации));
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями() Тогда
			НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", ЗначениеОсновногоСтруктурногоПодразделения));
		КонецЕсли;
		
		НовыйМассив.Добавить(Новый ПараметрВыбора("ВыбиратьПодразделенияОрганизации", Истина));
		
		Элементы.ДеревоНастроекЗначение.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);;
		
	ИначеЕсли Элемент.ТекущиеДанные.Настройка = ОсновноеСтруктурноеПодразделениеОрганизации Тогда
		
		Если НЕ ЗначениеЗаполнено(ЗначениеОсновнойОрганизации) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Для выбора основного структурного подразделения необходимо выбрать основную организацию!'"),
				,
				"ДеревоНастроек",
				,
				Отказ);
			Возврат;
		КонецЕсли;
		
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Владелец", ЗначениеОсновнойОрганизации));
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ЯвляетсяСтруктурнымПодразделением", Истина));
		НовыйМассив.Добавить(Новый ПараметрВыбора("ВыбиратьСтруктурныеЕдиницы", Истина));
		
		Элементы.ДеревоНастроекЗначение.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
		
	Иначе 
		
		Элементы.ДеревоНастроекЗначение.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда 
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные.Настройка = ОсновнаяОрганизация Тогда
		ЗначениеОсновнойОрганизации = ТекущиеДанные.Значение;
		Если ИдентификаторыНастроек.Свойство("ОсновноеСтруктурноеПодразделениеОрганизации") Тогда
			ОсновноеСтруктурноеПодразделение = ДеревоНастроек.НайтиПоИдентификатору(ИдентификаторыНастроек.ОсновноеСтруктурноеПодразделениеОрганизации);
			Если НЕ ЗначениеЗаполнено(ЗначениеОсновнойОрганизации) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Внимание!!! Основное структурное подразделение не соответствует выбранной организации, перезаполните настройку основного подразделения организации'"));
				ОсновноеСтруктурноеПодразделение.Значение = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");	
			ИначеЕсли ОсновноеСтруктурноеПодразделение <> Неопределено И ЗначениеЗаполнено(ОсновноеСтруктурноеПодразделение.Значение) Тогда
				ПроверитьСоответствиеПодразделенияНаСервере(ОсновноеСтруктурноеПодразделение.Значение);
				ЗначениеОсновногоСтруктурногоПодразделения = ОсновноеСтруктурноеПодразделение.Значение;
			КонецЕсли;
			//КонецЕсли;
		КонецЕсли;
		Если ИдентификаторыНастроек.Свойство("ОсновноеПодразделениеОрганизации") Тогда
			ОсновноеПодразделение = ДеревоНастроек.НайтиПоИдентификатору(ИдентификаторыНастроек.ОсновноеПодразделениеОрганизации);
			Если НЕ ЗначениеЗаполнено(ЗначениеОсновнойОрганизации) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Внимание!!! Основное подразделение не соответствует выбранной организации, перезаполните настройку основного подразделения организации'"));
				ОсновноеПодразделение.Значение = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");	
			ИначеЕсли ОсновноеПодразделение <> Неопределено И ЗначениеЗаполнено(ОсновноеПодразделение.Значение) Тогда
				ПроверитьСоответствиеПодразделенияНаСервере(ОсновноеПодразделение.Значение);
			КонецЕсли;
			//КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.Настройка = ОсновноеСтруктурноеПодразделениеОрганизации Тогда
		ЗначениеОсновногоСтруктурногоПодразделения = ТекущиеДанные.Значение;
		Если ИдентификаторыНастроек.Свойство("ОсновноеПодразделениеОрганизации") Тогда
			ОсновноеПодразделение = ДеревоНастроек.НайтиПоИдентификатору(ИдентификаторыНастроек.ОсновноеПодразделениеОрганизации);
			Если ОсновноеПодразделение <> Неопределено И ЗначениеЗаполнено(ОсновноеПодразделение.Значение) Тогда
				ПроверитьСоответствиеПодразделенияНаСервере(ОсновноеПодразделение.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено 
		И ТекущиеДанные.Настройка = ОсновноеСтруктурноеПодразделениеОрганизации Тогда
		
		РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, ЗначениеОсновнойОрганизации, ТекущиеДанные.Значение, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СкопироватьДругим(Команда)
	
	СкопироватьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ОбновитьНастройкиИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ДополнительныеПараметры = Новый Структура("Закрывать", Ложь);
	ОбновитьНастройкиИЗакрыть(, ДополнительныеПараметры);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//По переданным данным создаем дерево строк на форме
//
// Выборка - выборка запроса с данными в иерархии
// ДеревоЗначений - элементы дерева значения, для которого создаются строки
//
&НаСервере
Функция ДобавитьСтрокиВДерево(Выборка, ДеревоЗначений)
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрокаНастройки = ДеревоЗначений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаНастройки, Выборка);
		НоваяСтрокаНастройки.Значение = Выборка.Настройка.ТипЗначения.ПривестиЗначение(Выборка.Значение);
		
		Если ЗначениеЗаполнено(НоваяСтрокаНастройки.Идентификатор) Тогда
			ИдентификаторыНастроек.Вставить(НоваяСтрокаНастройки.Идентификатор, НоваяСтрокаНастройки.ПолучитьИдентификатор());
		КонецЕсли;
		
		СтрокиВыборки = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Если СтрокиВыборки.Количество() > 0 Тогда
			
			ДобавитьСтрокиВДерево(СтрокиВыборки, НоваяСтрокаНастройки.ПолучитьЭлементы());
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

// Процедура обновляет информацию в таблице настроек.
//
&НаСервере
Процедура ЗаполнитьДерево()

	НастройкиЭлементы = ДеревоНастроек.ПолучитьЭлементы();
	НастройкиЭлементы.Очистить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Настройки.Родитель,
	|	Настройки.Ссылка КАК Настройка,
	|	Настройки.ЭтоГруппа КАК ЭтоГруппа,
	|	Настройки.Предопределенный КАК Предопределенный,
	|	ВЫБОР
	|		КОГДА Настройки.ЭтоГруппа
	|				И НЕ Настройки.Предопределенный
	|			ТОГДА 0
	|		КОГДА Настройки.ЭтоГруппа
	|				И Настройки.Предопределенный
	|			ТОГДА 2
	|		КОГДА НЕ Настройки.ЭтоГруппа
	|				И НЕ Настройки.Предопределенный
	|			ТОГДА 3
	|		КОГДА НЕ Настройки.ЭтоГруппа
	|				И Настройки.Предопределенный
	|			ТОГДА 5
	|	КОНЕЦ КАК НомерКартинки,
	|	ЗначениеНастроек.Значение,
	|	Настройки.Идентификатор
	|ИЗ
	|	ПланВидовХарактеристик.НастройкиПользователей КАК Настройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК ЗначениеНастроек
	|		ПО (ЗначениеНастроек.Настройка = Настройки.Ссылка)
	|			И (ЗначениеНастроек.Пользователь = &Пользователь),
	|	Константы КАК Константы
	|ГДЕ
	|	НЕ Настройки.ПометкаУдаления
	|	И НЕ(Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ОсновноеСтруктурноеПодразделениеОрганизации)
	|				И НЕ Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями)
	|	И НЕ(Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ОсновнойТипЦенПродажи)
	|				И НЕ Константы.ИспользоватьТипыЦенНоменклатуры)
	|	И НЕ(Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.СинхронизацияСИСЭСФПриЗапуске)
	|				И НЕ Константы.ИспользоватьОбменЭСФ)
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.УдалитьАвтоматическиЗагружатьКурсыВалютПриНачалеРаботыСистемы)
	|
	|	И НЕ Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.УдалитьИспользоватьПомощникаПриемаНаРаботу)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоГруппа ИЕРАРХИЯ,
	|	Настройки.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ДобавитьСтрокиВДерево(Выборка, НастройкиЭлементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНастройкиИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	// При немодифицированности работает "отмена"
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("Закрывать") Тогда
		Закрывать = ДополнительныеПараметры.Закрывать;
	Иначе
		Закрывать = Истина;
	КонецЕсли;
	
	Отказ = Ложь;
	Если Модифицированность ИЛИ ОбновлятьНастройки Тогда
		ОбновитьНастройки(Отказ);
		Модифицированность = Ложь;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Модифицированность = Ложь;
		Если Закрывать Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет запись значений настроек в регистр сведений.
//
&НаСервере
Процедура ОбновитьНастройки(Отказ)
	
	ПроверяемыеНастройки = Новый Структура("УчетПоВсемОрганизациям, ОсновнаяОрганизация, ИДОрганизации");
	
	НаборЗаписей = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Пользователь.Использование = Истина;
	НаборЗаписей.Отбор.Пользователь.Значение      = Пользователь;
	
	НастройкиГруппы = ДеревоНастроек.ПолучитьЭлементы();
	Для Каждого ГруппаНастроек Из НастройкиГруппы Цикл
		
		ПодготовитьНаборЗаписей(НаборЗаписей, ГруппаНастроек, ПроверяемыеНастройки);
		
	КонецЦикла;
	
	Если ПроверяемыеНастройки.УчетПоВсемОрганизациям <> Неопределено И НЕ ПроверяемыеНастройки.УчетПоВсемОрганизациям
		И НЕ ЗначениеЗаполнено(ПроверяемыеНастройки.ОсновнаяОрганизация) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'В том случае если учет ведется по одной организации необходимо её указать в настройках'"),
			,
			"ДеревоНастроек",
			,
			Отказ);
	КонецЕсли;
	
	Если НЕ Отказ Тогда 
		НаборЗаписей.Записать();
		
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоддержкаРаботыСоСтруктурнымиПодразделениями()
	
	Возврат ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
КонецФункции

&НаСервере
Процедура ДобавитьЗаписиВНаборЗаписей(НаборЗаписей, СтрокаЗаписи, ПроверяемыеНастройки)
	
	Запись = НаборЗаписей.Добавить();
	
	Запись.Пользователь = Пользователь;
	Запись.Настройка    = СтрокаЗаписи.Настройка;
	Запись.Значение     = СтрокаЗаписи.Настройка.ТипЗначения.ПривестиЗначение(СтрокаЗаписи.Значение);
	
	Если СтрокаЗаписи.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.УчетПоВсемОрганизациям Тогда
		ПроверяемыеНастройки.УчетПоВсемОрганизациям = СтрокаЗаписи.Значение;
	КонецЕсли;
	
	Если СтрокаЗаписи.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация Тогда
		ПроверяемыеНастройки.ОсновнаяОрганизация = СтрокаЗаписи.Значение;
		ПроверяемыеНастройки.ИДОрганизации = СтрокаЗаписи.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьНастройки()
	
	Если Элементы.ДеревоНастроек.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Необходимо выбрать настройки, которые требуется скопировать.'"));
		Возврат;
	КонецЕсли;
	
	ТипПользователя = ТипЗнч(Пользователь);
	ПараметрыФормы = Новый Структура("Пользователь, ТипПользователя, ТипДействия", 
										Пользователь, ТипПользователя, "");
	ОткрытьФорму("Обработка.НастройкиПользователей.Форма.ВыборПользователей", ПараметрыФормы);
	
КонецПроцедуры

// Копирует настройки текущего пользователя другому пользователю.
// Процедура используется при обработке команды СкопироватьДругим.
//
&НаКлиенте
Процедура Подключаемый_ВыполнитьОбработкуОповещения()
	
	ИмяСобытия = ПараметрыОбработкиОповещения.ИмяСобытия;
	Параметр = ПараметрыОбработкиОповещения.Параметр;
	
	Если ВРег(ИмяСобытия) = ВРег("ВыборПользователя") Тогда
		
		ПользователиПриемникиНастроек = Параметр.ПользователиПриемник;		
		СкопироватьНаСервере(ПользователиПриемникиНастроек);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Настройки скопированы'"), 
			,
			НСтр("ru = 'Настройки успешно скопированы другим пользователям.'"),
			БиблиотекаКартинок.Информация32
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция КоличествоСкопированныхИлиУдаленныхНастроек(ЭлементДеревоНастроек)
	
	ВыделенныеСтроки = ЭлементДеревоНастроек.ВыделенныеСтроки;
	// Переносим массив выделенных строк в список значений, чтобы отсортировать выбранные строки
	СписокВыделенныхСтрок = Новый СписокЗначений;
	Для Каждого Элемент Из ВыделенныеСтроки Цикл
		СписокВыделенныхСтрок.Добавить(Элемент);
	КонецЦикла;
	
	СписокВыделенныхСтрок.СортироватьПоЗначению();
	ТекущееДеревоЗначений = ДеревоНастроек;
	
	КоличествоНастроек = 0;
	Для Каждого ВыделеннаяСтрока Из СписокВыделенныхСтрок Цикл
		ЭлементДерева = ТекущееДеревоЗначений.НайтиПоИдентификатору(ВыделеннаяСтрока.Значение);
		КоличествоПодчиненныхЭлементов = ЭлементДерева.ПолучитьЭлементы().Количество();
		РодительЭлемента = ЭлементДерева.ПолучитьРодителя();
		
		Если КоличествоПодчиненныхЭлементов <> 0 Тогда
			КоличествоНастроек = КоличествоНастроек + КоличествоПодчиненныхЭлементов;
			ЭлементВерхнегоУровня = ЭлементДерева;
		ИначеЕсли КоличествоПодчиненныхЭлементов = 0
			И РодительЭлемента = Неопределено Тогда
			КоличествоНастроек = КоличествоНастроек + 1;
		Иначе
			
			Если РодительЭлемента <> ЭлементВерхнегоУровня Тогда
				КоличествоНастроек = КоличествоНастроек + 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоличествоНастроек;
	
КонецФункции

&НаСервере
Процедура СкопироватьНаСервере(ПользователиПриемник)
	
	Результат = ВыделенныеНастройки();
	
	РегистрыСведений.НастройкиПользователей.СкопироватьНастройки(Пользователь, ПользователиПриемник, Результат.МассивНастроек);
	
КонецПроцедуры

&НаСервере
Функция ВыделенныеНастройки()
	
	МассивНастроек = Новый Массив;
	ВыделенныеЭлементы = Элементы.ДеревоНастроек.ВыделенныеСтроки;
	
	Для Каждого ВыделенныйЭлемент Из ВыделенныеЭлементы Цикл
		
		ВыделеннаяНастройка = ДеревоНастроек.НайтиПоИдентификатору(ВыделенныйЭлемент);
		
		Если ВыделеннаяНастройка <> Неопределено Тогда
			ПолучитьНастройки(ВыделеннаяНастройка, МассивНастроек);
		КонецЕсли;

	КонецЦикла;
	
	Возврат Новый Структура("МассивНастроек", МассивНастроек);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьНастройки(ТекущаяНастройка, МассивНастроек)
	
	КоличествоПодчиненныхЭлементов = ТекущаяНастройка.ПолучитьЭлементы().Количество();
	
	Если КоличествоПодчиненныхЭлементов <> 0 Тогда
		Для Каждого ПодчиненнаяНастройка Из ТекущаяНастройка.ПолучитьЭлементы() Цикл
			ПолучитьНастройки(ПодчиненнаяНастройка, МассивНастроек);
		КонецЦикла;
	ИначеЕсли КоличествоПодчиненныхЭлементов = 0 И НЕ ТекущаяНастройка.ЭтоГруппа Тогда
		МассивНастроек.Добавить(ТекущаяНастройка.Настройка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьНаборЗаписей(НаборЗаписей, ТекущаяНастройка, ПроверяемыеНастройки)
	
	Если ТекущаяНастройка.ЭтоГруппа Тогда
		НастройкиЭлементы = ТекущаяНастройка.ПолучитьЭлементы();
		Для Каждого СтрокаНастроек Из НастройкиЭлементы Цикл
			ПодготовитьНаборЗаписей(НаборЗаписей, СтрокаНастроек, ПроверяемыеНастройки);
		КонецЦикла;
	Иначе 
		ДобавитьЗаписиВНаборЗаписей(НаборЗаписей, ТекущаяНастройка, ПроверяемыеНастройки);			
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, ЗначениеОсновнойОрганизации, ЗначениеОсновногоСтруктурногоПодразделения, ТекущиеДанные.Значение);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСоответствиеПодразделенияНаСервере(ОсновноеПодразделение)
	
	Если ТипЗнч(ОсновноеПодразделение) = Тип("СправочникСсылка.Организации") Тогда
		Если ОсновноеПодразделение <> ЗначениеОсновнойОрганизации Тогда
			ОсновноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
	Иначе
		РаботаСДиалогами.ПроверитьСоответствиеПодразделения(ЗначениеОсновнойОрганизации, ЗначениеОсновногоСтруктурногоПодразделения, ОсновноеПодразделение);
	КонецЕсли;

КонецПроцедуры

