#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает список всех используемых в информационной базе систем налогообложения
//
// Параметры:
//  ВидОрганизации         - Строка - имя вида организации
//  СистемаНалогообложения - Строка - имя системы налогообложения
//
// Возвращаемое значение:
//  Структура - где ключ - имя ресурса регистра УчетнаяПолитикаНалоговыйУчет
//
Функция СтруктураУчетнойПолитики(ВидОрганизации, СистемаНалогообложения) Экспорт
	
	СтруктураУчетнойПолитики = Новый Структура;
	
	Если СистемаНалогообложения = "Патент" Тогда
		
		СтруктураУчетнойПолитики.Вставить("ОрганизацияЯвляетсяПлательщикомСН",  Ложь);
		СтруктураУчетнойПолитики.Вставить("ОрганизацияЯвляетсяПлательщикомКПН", Истина);
		СтруктураУчетнойПолитики.Вставить("РежимНалогообложения",               Перечисления.РежимНалогообложения.Патент);
		
	ИначеЕсли СистемаНалогообложения = "УпрощеннаяДекларация" Тогда
		
		СтруктураУчетнойПолитики.Вставить("ОрганизацияЯвляетсяПлательщикомСН",  Ложь);
		СтруктураУчетнойПолитики.Вставить("ОрганизацияЯвляетсяПлательщикомКПН", Ложь);
		СтруктураУчетнойПолитики.Вставить("РежимНалогообложения",               Перечисления.РежимНалогообложения.УпрощеннаяДекларация);
		
	ИначеЕсли СистемаНалогообложения = "ФиксированныйВычет" Тогда
		
		СтруктураУчетнойПолитики.Вставить("ОрганизацияЯвляетсяПлательщикомСН",  Ложь);
		СтруктураУчетнойПолитики.Вставить("ОрганизацияЯвляетсяПлательщикомКПН", Истина);
		СтруктураУчетнойПолитики.Вставить("РежимНалогообложения",               Перечисления.РежимНалогообложения.ФиксированныйВычет); 
		
	ИначеЕсли СистемаНалогообложения = "РозничныйНалог" Тогда
		
		СтруктураУчетнойПолитики.Вставить("ОрганизацияЯвляетсяПлательщикомСН",  Ложь);
		СтруктураУчетнойПолитики.Вставить("ОрганизацияЯвляетсяПлательщикомКПН", Ложь);
		СтруктураУчетнойПолитики.Вставить("РежимНалогообложения",               Перечисления.РежимНалогообложения.РозничныйНалог);
		
	Иначе
		
		СтруктураУчетнойПолитики.Вставить("ОрганизацияЯвляетсяПлательщикомСН",  Истина);
		СтруктураУчетнойПолитики.Вставить("ОрганизацияЯвляетсяПлательщикомКПН", Истина);
		СтруктураУчетнойПолитики.Вставить("РежимНалогообложения",               Перечисления.РежимНалогообложения.Общеустановленный);
		
	КонецЕсли;
	
	Возврат СтруктураУчетнойПолитики;
	
КонецФункции 

Функция ПолучитьФилиалыГоловнойОрганизации(ГоловнаяОрганизация) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.Ссылка = &Организация
	|	И Организации.ГоловнаяОрганизация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", ГоловнаяОрганизация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
	
	СписокФилиалов = Новый СписокЗначений;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СписокФилиалов.Добавить(ВыборкаДетальныеЗаписи.Ссылка);		
		
	КонецЦикла; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СписокФилиалов;
		
КонецФункции 

Функция ПолучитьПорядокОбложенияДоходовРаботниковПоОрганизациям(Организация, Период) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПорядокОбложенияДоходовРаботников КАК ПорядокОбложенияДоходовРаботников,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&ПериодПо, Организация В (&Организации)) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
	|ГДЕ
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.Период >= ДАТАВРЕМЯ(2023, 1, 1)";

	Запрос.УстановитьПараметр("ПериодПо", КонецДня(Период));
	
	Если ТипЗнч(Организация) <> Тип("СписокЗначений") Тогда
		СписокОрганизаций = Новый СписокЗначений;
		СписокОрганизаций.Добавить(Организация);
		
		Запрос.УстановитьПараметр("Организации", СписокОрганизаций);
	Иначе	
		Запрос.УстановитьПараметр("Организации", Организация);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);  
	
	Если ТипЗнч(Организация) <> Тип("СписокЗначений") Тогда 
			
		Если Выборка.Следующий() Тогда
			ПорядокОбложенияДоходовРаботников = Выборка.ПорядокОбложенияДоходовРаботников;
		Иначе
			ПорядокОбложенияДоходовРаботников = Неопределено;
		КонецЕсли; 
			
	Иначе  
		
		ПорядокОбложенияДоходовРаботников = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			
			ПорядокОбложенияДоходовРаботниковСтруктура = Новый Структура;
			
			ПорядокОбложенияДоходовРаботниковСтруктура.Вставить("Организация", Выборка.Организация);
			ПорядокОбложенияДоходовРаботниковСтруктура.Вставить("ПорядокОбложенияДоходовРаботников", Выборка.ПорядокОбложенияДоходовРаботников);
			
			ПорядокОбложенияДоходовРаботников.Добавить(ПорядокОбложенияДоходовРаботниковСтруктура);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПорядокОбложенияДоходовРаботников;
	
КонецФункции
	
#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти
	
#Область ОбработчикиОбновления

Процедура ЗаполнитьПорядокОбложенияДоходовРаботниковФилиалов() Экспорт
    
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация КАК Филиал,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.Период КАК ФилиалПериод,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация.ГоловнаяОрганизация КАК ФилиалГоловнаяОрганизация,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПорядокОбложенияДоходовРаботников КАК ФилиалПорядокОбложенияДоходовРаботников
	|ПОМЕСТИТЬ ВТ_Филиалы
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(, Организация <> Организация.ГоловнаяОрганизация) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
	|ГДЕ
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.Период >= ДАТАВРЕМЯ(2023, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Филиалы.Филиал КАК Филиал,
	|	ВТ_Филиалы.ФилиалПериод КАК ФилиалПериод,
	|	ВТ_Филиалы.ФилиалГоловнаяОрганизация КАК ФилиалГоловнаяОрганизация,
	|	ВТ_Филиалы.ФилиалПорядокОбложенияДоходовРаботников КАК ФилиалПорядокОбложенияДоходовРаботников,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.Период КАК ГоловнаяОрганизацияПериод,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация КАК ГоловнаяОрганизация,
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПорядокОбложенияДоходовРаботников КАК ГоловнаяОрганизацияПорядокОбложенияДоходовРаботников
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Филиалы КАК ВТ_Филиалы
	|		ПО УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация = ВТ_Филиалы.ФилиалГоловнаяОрганизация
	|ГДЕ
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.Период >= ДАТАВРЕМЯ(2023, 1, 1)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СоздатьНаборЗаписей();
	
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        
        НаборЗаписей.Отбор.Организация.Установить(ВыборкаДетальныеЗаписи.Филиал);
        НаборЗаписей.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.ФилиалПериод);
        
        НаборЗаписей.Прочитать();
        
        Если НЕ НаборЗаписей.Количество() = 0 Тогда
            
            Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
                ЗаписьНабора.ПорядокОбложенияДоходовРаботников = ВыборкаДетальныеЗаписи.ГоловнаяОрганизацияПорядокОбложенияДоходовРаботников;
            КонецЦикла;
            
        КонецЕсли;
        
		Если НЕ НаборЗаписей.Количество() = 0 Тогда  
            
            Попытка
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
                НаборЗаписей.Записать(); 	
            Исключение
                ТекстСообщения = НСтр("ru='Операция не выполнена'");
                ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
            КонецПопытки;
            
        КонецЕсли;
        
    КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли   
