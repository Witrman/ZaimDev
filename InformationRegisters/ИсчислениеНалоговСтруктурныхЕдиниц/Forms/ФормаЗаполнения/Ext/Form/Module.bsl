
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьРазделыНалоговогоУчета();
	
	ЗаполнитьСписокОрганизаций();
	
	ЗаполнитьСписокПодразделений();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПодразделенияОрганизаций

&НаКлиенте
Процедура ПодразделенияОрганизацийПометкаПриИзменении(Элемент)
	
	ТекДанные = Элементы.ПодразделенияОрганизаций.ТекущиеДанные;
	
	Если ТекДанные.Пометка = 2 Тогда
		ТекДанные.Пометка = 0;
	КонецЕсли;
	
	УстановитьПометкиПодчиненных(ТекДанные);
	УстановитьПометкиРодителей(ТекДанные);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура РазделыНалоговогоУчетаУстановитьФлаги(Команда)
	
	Для Каждого СтрокаНУ Из РазделыНалоговогоУчета Цикл
		СтрокаНУ.Пометка = Истина;
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура РазделыНалоговогоУчетаСнятьФлаги(Команда)
	
	Для Каждого СтрокаНУ Из РазделыНалоговогоУчета Цикл
		СтрокаНУ.Пометка = Ложь;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыНалоговогоУчетаИнвертировать(Команда)
	
	Для Каждого СтрокаНУ Из РазделыНалоговогоУчета Цикл
		СтрокаНУ.Пометка = Не СтрокаНУ.Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияОрганизацийУстановитьФлаги(Команда)
	
	УстановитьПометкиВоВсемДереве(ПодразделенияОрганизаций, "Установить");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияОрганизацийСнятьФлаги(Команда)
	
	УстановитьПометкиВоВсемДереве(ПодразделенияОрганизаций, "Снять");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияОрганизацийИнвертировать(Команда)
	
	УстановитьПометкиВоВсемДереве(ПодразделенияОрганизаций, "Инвертировать");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииУстановитьФлаги(Команда)
	
	Для Каждого СтрокаОрганизации Из Организации Цикл
		СтрокаОрганизации.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииСнятьФлаги(Команда)
	
	Для Каждого СтрокаОрганизации Из Организации Цикл
		СтрокаОрганизации.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииИнвертировать(Команда)
	
	Для Каждого СтрокаОрганизации Из Организации Цикл
		СтрокаОрганизации.Пометка = Не СтрокаОрганизации.Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Не ЗначениеЗаполнено(Налогоплательщик) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru= 'Не указан налогоплательщик!'"));
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НалоговыйКомитет) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru= 'Не указан налоговый комитет!'"));
		
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ЗаполнитьНаборЗаписейНаСервере(Отказ);
	
	Если Не Отказ Тогда
		Оповестить("ОбновлениеИсчислениеНалоговСтруктурныхЕдиниц", , ЭтаФорма);
		Закрыть(Истина);
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

&НаСервере
Процедура ЗаполнитьРазделыНалоговогоУчета()
	
	Для Каждого РазделНУ Из Метаданные.Перечисления.РазделыНалоговогоУчета.ЗначенияПеречисления Цикл
		НоваяСтрока = РазделыНалоговогоУчета.Добавить();
		НоваяСтрока.РазделНалоговогоУчета = Перечисления.РазделыНалоговогоУчета[РазделНУ.Имя];
	КонецЦикла;		
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьСписокОрганизаций()
	
	// заполним список организаций
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка КАК Организация,
	|	Наименование
	|ИЗ
	|	Справочник.Организации
	|УПОРЯДОЧИТЬ ПО
	|	Наименование 
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Организации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;		
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьСписокПодразделений()
	
	// составим список подразделений
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Владелец,
	|	Родитель,
	|	Ссылка КАК ПодразделениеОрганизации,
	|	Наименование
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций
	|ГДЕ
	|	ЯвляетсяСтруктурнымПодразделением
	|УПОРЯДОЧИТЬ ПО
	|	Владелец,
	|	Родитель ИЕРАРХИЯ,
	|	Наименование
	|";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	СоответствиеРодительскиеСтроки = Новый Соответствие();
	
	Пока Выборка.Следующий() Цикл
			
		РодительскаяСтрока = СоответствиеРодительскиеСтроки[Выборка.Родитель];
		Если РодительскаяСтрока = Неопределено Тогда
			
			// проверим создана ли строка для организации
			РодительскаяСтрока = СоответствиеРодительскиеСтроки[Выборка.Владелец];
			Если РодительскаяСтрока = Неопределено Тогда
				РодительскаяСтрока = ПодразделенияОрганизаций.ПолучитьЭлементы().Добавить();
				РодительскаяСтрока.ПодразделениеОрганизации = Выборка.Владелец;
				РодительскаяСтрока.ЭтоГруппа = Истина;
				
				РодительскаяСтрока.ТипСтруктурнойЕдиницы = 1;
				
				// запоминаем, в какую строку дерева добавили новую строку
				СоответствиеРодительскиеСтроки.Вставить(Выборка.Владелец, РодительскаяСтрока);
			КонецЕсли;
		
			Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
				РодительскаяСтрока = РодительскаяСтрока.ПолучитьЭлементы().Добавить();
				РодительскаяСтрока.ПодразделениеОрганизации = Выборка.Родитель;
				РодительскаяСтрока.ЭтоГруппа = Истина;
				
				РодительскаяСтрока.ТипСтруктурнойЕдиницы = 0;
				
				// запоминаем, куда добавили
				СоответствиеРодительскиеСтроки.Вставить(Выборка.Родитель, РодительскаяСтрока);
			КонецЕсли;
		
		КонецЕсли;
		
		НоваяСтрока = РодительскаяСтрока.ПолучитьЭлементы().Добавить();
		НоваяСтрока.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
		НоваяСтрока.ЭтоГруппа = Истина;
		
		НоваяСтрока.ТипСтруктурнойЕдиницы = 0;
		
		// запоминаем, куда добавили
		СоответствиеРодительскиеСтроки.Вставить(Выборка.ПодразделениеОрганизации, НоваяСтрока);
		
		// создаем еще одну такую строку, которая будет детальной (в случае если само родительское подразделение является структурным)
		НоваяСтрока = НоваяСтрока.ПолучитьЭлементы().Добавить();
		НоваяСтрока.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
		НоваяСтрока.ЭтоГруппа = Ложь;
	
	КонецЦикла;
	
	// удалим из дерева подразделений лишние строки, когда у подразделения нет дочерних
	Стек = Новый Массив();
	Для Каждого СтрокиДерева Из ПодразделенияОрганизаций.ПолучитьЭлементы() Цикл
		// верхний уровень всегда типа организации - их оставляем без изменения, а вот вложенные в них строки - чистим
		Стек.Добавить(СтрокиДерева.ПолучитьЭлементы());
	КонецЦикла;
	
	Пока Стек.Количество() > 0 Цикл
		СтрокиДерева = Стек[Стек.Количество() - 1];
		Стек.Удалить(Стек.Количество() - 1);
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			Если СтрокаДерева.ПолучитьЭлементы().Количество() = 1 Тогда
				Если СтрокаДерева.ПодразделениеОрганизации = СтрокаДерева.ПолучитьЭлементы()[0].ПодразделениеОрганизации Тогда
					// едиственная дочерняя ветвь полностью совпадает с текущей - удалим дочернюю
					СтрокаДерева.ЭтоГруппа = Ложь;
					СтрокаДерева.ПолучитьЭлементы().Удалить(0);
				КонецЕсли;
			Иначе
				// добавляем в стек, чтобы обработать на следующем шаге цикла
				Стек.Добавить(СтрокаДерева.ПолучитьЭлементы());
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Устанавливает указанное значение пометки во всем дереве подразделений
//	РодительскаяСтрока - дерево значений или строка дерева значений, в котором установить пометки
//	ВыполняемоеДействие - строка "Установить", "Снять", "Инвертировать"
//
Процедура УстановитьПометкиВоВсемДереве(РодительскаяСтрока, ВыполняемоеДействие)

	Для Каждого СтрокаДерева Из РодительскаяСтрока.ПолучитьЭлементы() Цикл
		Если ВыполняемоеДействие = "Установить" Тогда
			СтрокаДерева.Пометка = 1;
		ИначеЕсли ВыполняемоеДействие = "Снять" Тогда
			СтрокаДерева.Пометка = 0;
		Иначе
			СтрокаДерева.Пометка = ?(СтрокаДерева.Пометка = 1, 0, ?(СтрокаДерева.Пометка = 0, 1, СтрокаДерева.Пометка));
		КонецЕсли;
		Если СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			УстановитьПометкиВоВсемДереве(СтрокаДерева, ВыполняемоеДействие);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьПометкиВоВсемДереве()

&НаКлиенте
// Устанавливает состояние пометки у подчиненных строк строки дерева значений
// в зависимости от пометки текущей строки
//
// Параметры:
//  ТекСтрока      - Строка дерева значений
// 
Процедура УстановитьПометкиПодчиненных(ТекСтрока)

	Пометка	= ТекСтрока.Пометка;
	Подчиненные	= ТекСтрока.ПолучитьЭлементы();

	Если Подчиненные.Количество() > 0 Тогда
		Для каждого Строка из Подчиненные Цикл
			Строка.Пометка = Пометка;
			УстановитьПометкиПодчиненных(Строка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПометкиПодчиненных()

&НаКлиенте
// Устанавливает состояние пометки у родительских строк строки дерева значений
// в зависимости от пометки текущей строки
//
// Параметры:
//  ТекСтрока      - Строка дерева значений
// 
Процедура УстановитьПометкиРодителей(ТекСтрока)

	Родитель = ТекСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	ТекСостояние		= Родитель.Пометка;

	НайденыВключенные	= Ложь;
	НайденыВыключенные	= Ложь;

	Для каждого Строка из Родитель.ПолучитьЭлементы() Цикл
		
		Если Строка.Пометка = 0 Тогда
			НайденыВыключенные	= Истина;
		ИначеЕсли Строка.Пометка = 1 Тогда
			НайденыВключенные	= Истина;
		ИначеЕсли Строка.Пометка = 2 Тогда
			НайденыВыключенные	= Истина;
			НайденыВключенные	= Истина;						
		КонецЕсли; 
		
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	
	Если НайденыВключенные И НайденыВыключенные Тогда
		Пометка = 2;
	ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
		Пометка = 1;
	ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
		Пометка = 0;
	ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
		Пометка = 2;
	КонецЕсли;

	Если Пометка = ТекСостояние Тогда
		Возврат;
	Иначе
		Родитель.Пометка = Пометка;
		УстановитьПометкиРодителей(Родитель);
	КонецЕсли; 
	
КонецПроцедуры // УстановитьПометкиРодителей()

&НаСервере
Процедура ЗаполнитьНаборЗаписейНаСервере(Отказ)
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Пометка", Истина);
	
	МассивРазделыНУ = РазделыНалоговогоУчета.НайтиСтроки(СтруктураПоиска);
	Если МассивРазделыНУ.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru= 'Не выбраны разделы налогового учета!'"));
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОрганизации Тогда
		МассивСтруктурныхЕдиниц = Организации.НайтиСтроки(СтруктураПоиска);
		ИмяГрафы = "Организация";
	Иначе
		СтруктураПоиска.Пометка = 1;
		СтруктураПоиска.Вставить("ЭтоГруппа", Ложь);
		МассивСтруктурныхЕдиниц = Новый Массив();
		
		ВыдатьСтруктурныеПодразделенияРекурсивно(МассивСтруктурныхЕдиниц);
		
		ИмяГрафы = "ПодразделениеОрганизации";
	КонецЕсли;
	
	Если МассивСтруктурныхЕдиниц.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru= 'Не выбраны структурные подразделения!'"));
		Возврат;
	КонецЕсли;
		
	НаборЗаписей = РегистрыСведений.ИсчислениеНалоговСтруктурныхЕдиниц.СоздатьНаборЗаписей();
	Отказ = Ложь;
	
	Для Каждого РазделНУ Из МассивРазделыНУ Цикл
		Для Каждого СтруктурнаяЕдиница Из МассивСтруктурныхЕдиниц Цикл
			
			НаборЗаписей.Очистить();
			НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(СтруктурнаяЕдиница[ИмяГрафы], Истина);
			НаборЗаписей.Отбор.РазделНалоговогоУчета.Установить(РазделНУ.РазделНалоговогоУчета, Истина);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.СтруктурнаяЕдиница 		= СтруктурнаяЕдиница[ИмяГрафы];
			НоваяЗапись.РазделНалоговогоУчета	= РазделНУ.РазделНалоговогоУчета;
			НоваяЗапись.Налогоплательщик 		= Налогоплательщик;
			НоваяЗапись.НалоговыйКомитет 		= НалоговыйКомитет;
			
			ЕстьОшибки = Не НаборЗаписей.ПроверитьЗаполнение();
			Если Не ЕстьОшибки Тогда
				Попытка
					НаборЗаписей.Записать();
				Исключение
					Отказ = Истина;
				КонецПопытки;
			Иначе
				Отказ = Истина;
			КонецЕсли;	
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыдатьСтруктурныеПодразделенияРекурсивно(МассивСП, ЭлементыДерева = Неопределено)
	
	Если ЭлементыДерева = Неопределено Тогда
		ЭлементыДерева = ПодразделенияОрганизаций.ПолучитьЭлементы();
	КонецЕсли;
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ТипЗнч(ЭлементДерева.ПодразделениеОрганизации) = Тип("СправочникСсылка.ПодразделенияОрганизаций") 
			И ЭлементДерева.Пометка Тогда
			
			МассивСП.Добавить(ЭлементДерева);
		КонецЕсли;
		
		НовыеЭлементы = ЭлементДерева.ПолучитьЭлементы();
		
		Если НовыеЭлементы.Количество() > 0 Тогда
			ВыдатьСтруктурныеПодразделенияРекурсивно(МассивСП, НовыеЭлементы);
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры
