#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Обновляет данные областей РК в адресных объектах
//
// Записи сопоставляются по коду области РК
//
Процедура ОбновитьСоставОбластейРКПоКлассификатору() Экспорт
	
	Классификатор = КлассификаторОбластейРК();
	
	// Выбираем только отсутствующие в регистре
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Параметр.КодОбластиРК КАК КодОбластиРК
		|ПОМЕСТИТЬ
		|	Классификатор
		|ИЗ
		|	&Классификатор КАК Параметр
		|ИНДЕКСИРОВАТЬ ПО
		|	КодОбластиРК
		|;
		|
		|ВЫБРАТЬ
		|	Классификатор.КодОбластиРК КАК КодОбластиРК
		|ИЗ
		|	Классификатор КАК Классификатор
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ПО
		|	  АдресныйКлассификатор.ТипАдресногоЭлемента      = 1
		|	И АдресныйКлассификатор.КодОбластиВКоде           = Классификатор.КодОбластиРК
		|	И АдресныйКлассификатор.КодРайонаВКоде            = 0
		|	И АдресныйКлассификатор.КодНаселенногоПунктаВКоде = 0
		|ГДЕ
		|	АдресныйКлассификатор.Код ЕСТЬ NULL
		|");
	Запрос.УстановитьПараметр("Классификатор", Классификатор);
	НовыеОбластиРК = Запрос.Выполнить().Выгрузить();
	
	// Перезаписываем только отсутствующих
	Набор = РегистрыСведений.АдресныйКлассификатор.СоздатьНаборЗаписей();
	Отбор = Набор.Отбор;
	
	Отбор.ТипАдресногоЭлемента.Установить(1);
	Отбор.КодРайонаВКоде.Установить(0);
	Отбор.КодНаселенногоПунктаВКоде.Установить(0);
	
	Для Каждого ОбластьРК Из НовыеОбластиРК Цикл
		
		ИсходныеДанные = Классификатор.Найти(ОбластьРК.КодОбластиРК, "КодОбластиРК");
		
		Отбор.КодОбластиВКоде.Установить(ОбластьРК.КодОбластиРК);
		Набор.Очистить();
		
		НоваяОбластьРК = Набор.Добавить();
		НоваяОбластьРК.ТипАдресногоЭлемента     = 1;
		НоваяОбластьРК.КодОбластиВКоде          = ОбластьРК.КодОбластиРК;
		НоваяОбластьРК.Код                      = ОбластьРК.КодОбластиРК * АдресныйКлассификаторКлиентСервер.МаскаОбласти();
		
		НоваяОбластьРК.Наименование             = ИсходныеДанные.Наименование;
		НоваяОбластьРК.Сокращение               = ИсходныеДанные.Сокращение;
		НоваяОбластьРК.Индекс                   = ИсходныеДанные.ПочтовыйИндекс;
		
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Возвращает информацию из классификатора областей РК
//
// Возвращаемое значение:
//     ТаблицаЗначений - поставляемые данные. Содержит колонки:
//       * КодОбластиРК   - Число  - код классификатора области, например 71 для Астаны
//       * Наименование   - Строка - наименование области по классификатору. Например "Алматинская"
//       * Сокращение     - Строка - наименование области по классификатору. Например "обл."
//       * ПочтовыйИндекс - Число  - индекс области. Если 0 - то неопределено
//
Функция КлассификаторОбластейРК() Экспорт
	
	Макет = РегистрыСведений.АдресныйКлассификатор.ПолучитьМакет("ОбластиРК");
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Макет.ПолучитьТекст());
	Результат = СериализаторXDTO.ПрочитатьXML(Чтение);
	
	Возврат Результат;
	
КонецФункции

// Возвращает информацию о состоянии загруженности областей
//
// Возвращаемое значение:
//    ТаблицаЗначений - описание состояния. Содержит колонки
//      * КодОбластиРК - Число  - Код области
//      * Представление - Строка - Наименование и сокращение области
//      * Загружено     - Булево - Истина, если классификатор по данной области сейчас загружен
// 
Функция СведенияОЗагрузкеОбластейРК() Экспорт
	
	Классификатор = РегистрыСведений.АдресныйКлассификатор.КлассификаторОбластейРК();
	
	// Выбираем все возможные данные - и из регистра, и из классификатора
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Параметр.Наименование КАК Наименование,
	|	Параметр.Сокращение КАК Сокращение,
	|	Параметр.КодОбластиРК КАК КодОбластиРК
	|ПОМЕСТИТЬ Классификатор
	|ИЗ
	|	&Классификатор КАК Параметр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеОбласти.Наименование + "" "" + ВсеОбласти.Сокращение КАК Представление,
	|	ВсеОбласти.КодОбластиРК КАК КодОбластиРК,
	|	ВЫБОР
	|		КОГДА 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1
	|				ИЗ
	|					РегистрСведений.АдресныйКлассификатор
	|				ГДЕ
	|					РегистрСведений.АдресныйКлассификатор.КодОбластиВКоде = ВсеОбласти.КодОбластиРК
	|					И РегистрСведений.АдресныйКлассификатор.ТипАдресногоЭлемента = 2)
	|			ТОГДА ИСТИНА
	|		КОГДА 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1
	|				ИЗ
	|					РегистрСведений.АдресныйКлассификатор
	|				ГДЕ
	|					РегистрСведений.АдресныйКлассификатор.КодОбластиВКоде = ВсеОбласти.КодОбластиРК
	|					И РегистрСведений.АдресныйКлассификатор.ТипАдресногоЭлемента = 3)
	|			ТОГДА ИСТИНА
	|		КОГДА 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1
	|				ИЗ
	|					РегистрСведений.АдресныйКлассификатор
	|				ГДЕ
	|					РегистрСведений.АдресныйКлассификатор.КодОбластиВКоде = ВсеОбласти.КодОбластиРК
	|					И РегистрСведений.АдресныйКлассификатор.ТипАдресногоЭлемента = 4)
	|			ТОГДА ИСТИНА
	|		КОГДА 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1
	|				ИЗ
	|					РегистрСведений.АдресныйКлассификатор
	|				ГДЕ
	|					РегистрСведений.АдресныйКлассификатор.КодОбластиВКоде = ВсеОбласти.КодОбластиРК
	|					И РегистрСведений.АдресныйКлассификатор.ТипАдресногоЭлемента = 5)
	|			ТОГДА ИСТИНА
	|		КОГДА 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1
	|				ИЗ
	|					РегистрСведений.АдресныйКлассификатор
	|				ГДЕ
	|					РегистрСведений.АдресныйКлассификатор.КодОбластиВКоде = ВсеОбласти.КодОбластиРК
	|					И РегистрСведений.АдресныйКлассификатор.ТипАдресногоЭлемента = 6)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Загружено
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		АдресныйКлассификатор.Наименование КАК Наименование,
	|		АдресныйКлассификатор.Сокращение КАК Сокращение,
	|		АдресныйКлассификатор.КодОбластиВКоде КАК КодОбластиРК
	|	ИЗ
	|		РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|	ГДЕ
	|		АдресныйКлассификатор.ТипАдресногоЭлемента = 1
	|		И АдресныйКлассификатор.КодРайонаВКоде = 0
	|		И АдресныйКлассификатор.КодНаселенногоПунктаВКоде = 0
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		Классификатор.Наименование,
	|		Классификатор.Сокращение,
	|		Классификатор.КодОбластиРК
	|	ИЗ
	|		Классификатор КАК Классификатор) КАК ВсеОбласти
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеОбласти.Наименование + "" "" + ВсеОбласти.Сокращение,
	|	ВсеОбласти.КодОбластиРК
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВсеОбласти.КодОбластиРК,
	|	ВсеОбласти.Наименование + "" "" + ВсеОбласти.Сокращение");
	Запрос.УстановитьПараметр("Классификатор", Классификатор);
	
	ЗагруженныеСведения = Запрос.Выполнить().Выгрузить();
	ЗагруженныеСведения.Индексы.Добавить("КодОбластиРК");
	ЗагруженныеСведения.Индексы.Добавить("Загружено");
	
	Возврат ЗагруженныеСведения;
КонецФункции

// Определяет наименование с сокращением области по его коду.
//
// Параметры:
//    КодОбластиРК - Строка, Число - код области.
//
// Возвращаемое значение:
//    Строка, Неопределено - наименование и сокращение области. Если область не найдена, то возвращается Неопределено
//
Функция НаименованиеОбластиПоКоду(Знач КодОбластиРК) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Наименование + "" "" + Сокращение КАК Наименование
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор
		|ГДЕ
		|	ТипАдресногоЭлемента = 1
		|	И КодОбластиВКоде = &КодОбластиРК
		|");
		
	Если ТипЗнч(КодОбластиРК) = Тип("Строка") Тогда
		ТипЧисло = Новый ОписаниеТипов("Число");
		КодОбластиРК = ТипЧисло.ПривестиЗначение(КодОбластиРК);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КодОбластиРК", КодОбластиРК);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Наименование;
	КонецЕсли;
	
	// Если не нашли, то подсмотрим еще и в классификаторе - макете 
	Классификатор = РегистрыСведений.АдресныйКлассификатор.КлассификаторОбластейРК();
	Вариант = Классификатор.Найти(КодОбластиРК, "КодОбластиРК");
	Если Вариант = Неопределено Тогда
		// Не нашли
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Вариант.Наименование + " " + Вариант.Сокращение;
КонецФункции

// Возвращает код области по наименованию.
//
// Параметры:
//    Название - Строка - наименование или полное наименование (с сокращением) области.
//
// Возвращаемое значение:
//    Число, Неопределено - код области или Неопределено, если данные не найдены
//
Функция КодОбластиПоНаименованию(Знач Название) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ 
		|	Варианты.КодОбластиРК
		|ИЗ (
		|	ВЫБРАТЬ ПЕРВЫЕ 1
		|		1               КАК Порядок,
		|		КодОбластиВКоде КАК КодОбластиРК
		|	ИЗ
		|		РегистрСведений.АдресныйКлассификатор
		|	ГДЕ
		|		ТипАдресногоЭлемента = 1 
		|		И Наименование = &Название
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ ПЕРВЫЕ 1
		|		2               КАК Порядок,
		|		КодОбластиВКоде КАК КодОбластиРК
		|	ИЗ
		|		РегистрСведений.АдресныйКлассификатор
		|	ГДЕ
		|		ТипАдресногоЭлемента = 1 
		|		И Наименование = &Наименование
		|		И Сокращение   = &Сокращение
		|) КАК Варианты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Варианты.Порядок
		|");
		
	ЧастиСлова = НаименованиеИСокращение(Название);
	Запрос.УстановитьПараметр("Наименование", ЧастиСлова.Наименование);
	Запрос.УстановитьПараметр("Сокращение",   ЧастиСлова.Сокращение);
	Запрос.УстановитьПараметр("Название",     Название);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.КодОбластиРК;
	КонецЕсли;

	// Если не нашли, то подсмотрим еще и в классификаторе - макете 
	Классификатор = РегистрыСведений.АдресныйКлассификатор.КлассификаторОбластейРК();
	
	Фильтр = Новый Структура("Наименование", Название);
	Варианты = Классификатор.НайтиСтроки(Фильтр);
	Если Варианты.Количество() = 0 Тогда
		Фильтр.Вставить("Наименование", ЧастиСлова.Наименование);
		Фильтр.Вставить("Сокращение",   ЧастиСлова.Сокращение);
		Варианты = Классификатор.НайтиСтроки(Фильтр);
	КонецЕсли;
	
	Если Варианты.Количество() > 0 Тогда
		Возврат Варианты[0].КодОбластиРК;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Разделяет исходный текст на наименование и сокращение.
// Сокращением считается последнее слово, отделенное пробельным символом
//
// Параметры:
//     Название - Строка - Полное название, например "Москва г"
//
// Возвращаемое значение:
//     Структура - содержит поля
//       * Наименование - Строка - Наименование, например "Москва". Если сокращение выделить не удалось, то исходное название
//       * Сокращение   - Строка - Сокращение, например "г". Если сокращение выделить не удалось, то пустая строка
//
Функция НаименованиеИСокращение(Знач Название)
	ТекстПоиска = СокрП(Название);
	
	Позиция = СтрДлина(ТекстПоиска);
	Пока Позиция > 0 Цикл
		Если ПустаяСтрока(Сред(ТекстПоиска, Позиция, 1)) Тогда
			Прервать;
		КонецЕсли;
		Позиция = Позиция - 1;
	КонецЦикла;
	
	Результат = Новый Структура("Наименование, Сокращение");
	Если Позиция = 0 Тогда
		Результат.Наименование = ТекстПоиска;
		Результат.Сокращение   = "";
	Иначе
		Результат.Наименование = СокрП(Лев(ТекстПоиска, Позиция));
		Результат.Сокращение   = Сред(ТекстПоиска, Позиция + 1);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьАдресныеСведенияОрганизации(Организация, ВидАдресаФЛ = "ИнформАдресФизЛица", ВидАдресаЮЛ = "") Экспорт
	
	АдресныеСведения = Новый Структура;
	
	// Фактический адрес
	// Код по КАТО
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация", Организация);
	ПолеОрганизация = ?(ТипЗнч(Организация) = Тип("СправочникСсылка.Организации"), "Организации", "ФизическиеЛица");
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка,
		|	Организации.Наименование КАК ОрганизацияНаименование
		|ПОМЕСТИТЬ ВТ_Организация
		|ИЗ
		|	Справочник." + ПолеОрганизация + " КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организация.ОрганизацияНаименование КАК ОрганизацияНаименование,
		|	ВЫБОР
		|		КОГДА ФактАдресОрганизации.Ссылка ЕСТЬ NULL 
		|				И ИнформАдресФизЛица.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЮрАдресОрганизации.Представление
		|		КОГДА ФактАдресОрганизации.Ссылка ЕСТЬ NULL 
		|				И ЮрАдресОрганизации.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИнформАдресФизЛица.Представление
		|		ИНАЧЕ ФактАдресОрганизации.Представление
		|	КОНЕЦ КАК АдресПредставление,
		|	ВЫБОР
		|		КОГДА ФактАдресОрганизации.Ссылка ЕСТЬ NULL 
		|				И ИнформАдресФизЛица.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЮрАдресОрганизации.Область
		|		КОГДА ФактАдресОрганизации.Ссылка ЕСТЬ NULL 
		|				И ЮрАдресОрганизации.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИнформАдресФизЛица.Область
		|		ИНАЧЕ ФактАдресОрганизации.Область
		|	КОНЕЦ КАК Область,
		|	ВЫБОР
		|		КОГДА ФактАдресОрганизации.Ссылка ЕСТЬ NULL 
		|				И ИнформАдресФизЛица.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЮрАдресОрганизации.Район
		|		КОГДА ФактАдресОрганизации.Ссылка ЕСТЬ NULL 
		|				И ЮрАдресОрганизации.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИнформАдресФизЛица.Район
		|		ИНАЧЕ ФактАдресОрганизации.Район
		|	КОНЕЦ КАК Район,
		|	ВЫБОР
		|		КОГДА ФактАдресОрганизации.Ссылка ЕСТЬ NULL 
		|				И ИнформАдресФизЛица.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЮрАдресОрганизации.Город
		|		КОГДА ФактАдресОрганизации.Ссылка ЕСТЬ NULL 
		|				И ЮрАдресОрганизации.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИнформАдресФизЛица.Город
		|		ИНАЧЕ ФактАдресОрганизации.Город
		|	КОНЕЦ КАК Город,
		|	ВЫБОР
		|		КОГДА ФактАдресОрганизации.Ссылка ЕСТЬ NULL 
		|				И ИнформАдресФизЛица.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЮрАдресОрганизации.НаселенныйПункт
		|		КОГДА ФактАдресОрганизации.Ссылка ЕСТЬ NULL 
		|				И ЮрАдресОрганизации.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИнформАдресФизЛица.НаселенныйПункт
		|		ИНАЧЕ ФактАдресОрганизации.НаселенныйПункт
		|	КОНЕЦ КАК НаселенныйПункт,
		|	ВЫБОР
		|		КОГДА ФактАдресОрганизации.Ссылка ЕСТЬ NULL 
		|				И ИнформАдресФизЛица.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЮрАдресОрганизации.Улица
		|		КОГДА ФактАдресОрганизации.Ссылка ЕСТЬ NULL 
		|				И ЮрАдресОрганизации.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИнформАдресФизЛица.Улица
		|		ИНАЧЕ ФактАдресОрганизации.Улица
		|	КОНЕЦ КАК Улица,
		|	ВЫБОР
		|		КОГДА ФактАдресОрганизации.Ссылка ЕСТЬ NULL 
		|				И ИнформАдресФизЛица.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЮрАдресОрганизации.Дом
		|		КОГДА ФактАдресОрганизации.Ссылка ЕСТЬ NULL 
		|				И ЮрАдресОрганизации.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИнформАдресФизЛица.Дом
		|		ИНАЧЕ ФактАдресОрганизации.Дом
		|	КОНЕЦ КАК Дом,
		|	ВЫБОР
		|		КОГДА ФактАдресОрганизации.Ссылка ЕСТЬ NULL 
		|				И ИнформАдресФизЛица.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		КОГДА ФактАдресОрганизации.Ссылка ЕСТЬ NULL 
		|				И ЮрАдресОрганизации.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЮридическийАдрес
		|ИЗ
		|	ВТ_Организация КАК Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КонтактнаяИнформация.Представление КАК Представление,
		|			КонтактнаяИнформация.Поле2 КАК Область,
		|			КонтактнаяИнформация.Поле3 КАК Район,
		|			КонтактнаяИнформация.Поле4 КАК Город,
		|			КонтактнаяИнформация.Поле5 КАК НаселенныйПункт,
		|			КонтактнаяИнформация.Поле6 КАК Улица,
		|			КонтактнаяИнформация.Поле7 КАК Дом,
		|			Организация.Ссылка КАК Ссылка
		|		ИЗ
		|			ВТ_Организация КАК Организация
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|				ПО Организация.Ссылка = КонтактнаяИнформация.Объект
		|					И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|					И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации))) КАК ЮрАдресОрганизации
		|		ПО Организация.Ссылка = ЮрАдресОрганизации.Ссылка
		|			И &ИспользоватьЮрАдресОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КонтактнаяИнформация.Представление КАК Представление,
		|			КонтактнаяИнформация.Поле2 КАК Область,
		|			КонтактнаяИнформация.Поле3 КАК Район,
		|			КонтактнаяИнформация.Поле4 КАК Город,
		|			КонтактнаяИнформация.Поле5 КАК НаселенныйПункт,
		|			КонтактнаяИнформация.Поле6 КАК Улица,
		|			КонтактнаяИнформация.Поле7 КАК Дом,
		|			Организация.Ссылка КАК Ссылка
		|		ИЗ
		|			ВТ_Организация КАК Организация
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|				ПО Организация.Ссылка = КонтактнаяИнформация.Объект
		|					И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|					И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации))) КАК ФактАдресОрганизации
		|		ПО Организация.Ссылка = ФактАдресОрганизации.Ссылка
		|			И &ИспользоватьФактАдресОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КонтактнаяИнформация.Представление КАК Представление,
		|			КонтактнаяИнформация.Поле2 КАК Область,
		|			КонтактнаяИнформация.Поле3 КАК Район,
		|			КонтактнаяИнформация.Поле4 КАК Город,
		|			КонтактнаяИнформация.Поле5 КАК НаселенныйПункт,
		|			КонтактнаяИнформация.Поле6 КАК Улица,
		|			КонтактнаяИнформация.Поле7 КАК Дом,
		|			Организация.Ссылка КАК Ссылка
		|		ИЗ
		|			ВТ_Организация КАК Организация
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|				ПО Организация.Ссылка = КонтактнаяИнформация.Объект
		|					И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|					И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ИнформАдресФизЛица))) КАК ИнформАдресФизЛица
		|		ПО Организация.Ссылка = ИнформАдресФизЛица.Ссылка";

	Если НЕ ВРег(ВидАдресаФЛ) = ВРег("ИнформАдресФизЛица") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ВидыКонтактнойИнформации.ИнформАдресФизЛица", "Справочник.ВидыКонтактнойИнформации." + ВидАдресаФЛ);
	КонецЕсли;

	Если ВидАдресаЮЛ = "" Тогда
		ИспользоватьЮрАдресОрганизации = Истина;
		ИспользоватьФактАдресОрганизации = Истина;
	ИначеЕсли ВРег(ВидАдресаЮЛ) = ВРег("ФактАдресОрганизации") Тогда
		ИспользоватьЮрАдресОрганизации = Ложь;
		ИспользоватьФактАдресОрганизации = Истина;
	ИначеЕсли ВРег(ВидАдресаЮЛ) = ВРег("ЮрАдресОрганизации") Тогда
		ИспользоватьЮрАдресОрганизации = Истина;
		ИспользоватьФактАдресОрганизации = Ложь;
	КонецЕсли;
	Запрос.Параметры.Вставить("ИспользоватьЮрАдресОрганизации", ИспользоватьЮрАдресОрганизации);
	Запрос.Параметры.Вставить("ИспользоватьФактАдресОрганизации", ИспользоватьФактАдресОрганизации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	АдресОрганизации = "";
	КодТерритории = "";
	ИнформАдрес = "";
	
	Если Выборка.Следующий() Тогда
		
		АдресОрганизации = СокрЛП(Выборка.Область) +  
										?(Выборка.Район <> "", ", " + СокрЛП(Выборка.Район), "") + 
										?(Выборка.Город <> "", ", " + СокрЛП(Выборка.Город), "") + 
										?(Выборка.НаселенныйПункт <> "", ", " + СокрЛП(Выборка.НаселенныйПункт), "");
										
		ИнформАдрес = СокрЛП(Выборка.Область) +  
										?(Выборка.Район <> "", ", " + СокрЛП(Выборка.Район), "") + 
										?(Выборка.Город <> "", ", " + СокрЛП(Выборка.Город), "") + 
										?(Выборка.НаселенныйПункт <> "", ", " + СокрЛП(Выборка.НаселенныйПункт), "") +
										?(Выборка.Улица <> "", ", " + СокрЛП(Выборка.Улица), "") + 
										?(Выборка.Дом <> "", ", " +   СокрЛП(Выборка.Дом), "");

		Если ЗначениеЗаполнено(Выборка.НаселенныйПункт) Тогда 
			НаименованиеТерритории = СокрЛП(Выборка.НаселенныйПункт);
			ТипАдресногоЭлемента = 4;
		ИначеЕсли ЗначениеЗаполнено(Выборка.Город) Тогда  
			НаименованиеТерритории = СокрЛП(Выборка.Город);
			ТипАдресногоЭлемента = 3;
		ИначеЕсли ЗначениеЗаполнено(Выборка.Район) Тогда  
			НаименованиеТерритории = СокрЛП(Выборка.Район);
			ТипАдресногоЭлемента = 2;
		// в том числе города республиканского значения	
		ИначеЕсли ЗначениеЗаполнено(Выборка.Область) Тогда  
			НаименованиеТерритории = СокрЛП(Выборка.Область);
			ТипАдресногоЭлемента = 1;
		Иначе
			НаименованиеТерритории = "";
			ТипАдресногоЭлемента = 0;
		КонецЕсли;
		
		// Если территория выбиралась из адресного классификатора, то сокращения предопределены
		НаименованиеТерритории = СокрЛП(СтрЗаменить(НаименованиеТерритории, ?(ТипАдресногоЭлемента = 3,"г.", "с."), ""));	
		
		// заменим спецсимволы
		НаименованиеТерритории = СтрЗаменить(НаименованиеТерритории, "~", "~~");
		НаименованиеТерритории = СтрЗаменить(НаименованиеТерритории, "%", "~%");
		НаименованиеТерритории = СтрЗаменить(НаименованиеТерритории, "_", "~_");
		НаименованиеТерритории = СтрЗаменить(НаименованиеТерритории, "[", "~[");
		// не заполняется КАТО по городам с дефисом
		//НаименованиеТерритории = СтрЗаменить(НаименованиеТерритории, "-", "~-");
		НаименованиеТерритории = НаименованиеТерритории + "%";
		
		Запрос.УстановитьПараметр("Наименование", НаименованиеТерритории);
		Запрос.УстановитьПараметр("ТипАдресногоЭлемента", ТипАдресногоЭлемента);
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныйКлассификатор.Код,
		|	АдресныйКлассификатор.Наименование,
		|	АдресныйКлассификатор.АльтернативныеНазвания
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента
		|	И АдресныйКлассификатор.Наименование ПОДОБНО &Наименование";
		
		ВыборкаКод = Запрос.Выполнить().Выбрать();
		Если ВыборкаКод.Следующий() Тогда
			КодТерритории = ВыборкаКод.Код;
		КонецЕсли;
		
	КонецЕсли;
	
	АдресныеСведения.Вставить("ИнформАдрес", ИнформАдрес); // Адрес для информирования физ. лица
	АдресныеСведения.Вставить("КодКато", Строка(КодТерритории)); // Код КАТО
	АдресныеСведения.Вставить("АдресОрганизации", АдресОрганизации); // Фактический адрес
	
	Возврат АдресныеСведения;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

// Корректировка наименований областей для унификации с другими типовыми решениями
//
Процедура ОбновитьЗагруженныеОбластиРКПоКлассификатору() Экспорт
	
	КодыОбластейДляОбновления = Новый Массив;
	КодыОбластейДляОбновления.Добавить(10);  // Абай
	КодыОбластейДляОбновления.Добавить(33);  // Жетісу
	КодыОбластейДляОбновления.Добавить(62);  // Ұлытау
	
	Классификатор = РегистрыСведений.АдресныйКлассификатор.КлассификаторОбластейРК();
	
	Набор = РегистрыСведений.АдресныйКлассификатор.СоздатьНаборЗаписей();
	Отбор = Набор.Отбор;
	
	Отбор.ТипАдресногоЭлемента.Установить(1);
	Отбор.КодРайонаВКоде.Установить(0);
	Отбор.КодНаселенногоПунктаВКоде.Установить(0);
	
	Для Каждого КодОбластиРК Из КодыОбластейДляОбновления Цикл
		
		ИсходныеДанные = Классификатор.Найти(КодОбластиРК, "КодОбластиРК");
		
		Отбор.КодОбластиВКоде.Установить(КодОбластиРК);
		Набор.Прочитать();
		
		Если Набор.Количество() <> 0 Тогда
			
			Попытка
				Набор.Очистить();
				
				НоваяОбластьРК = Набор.Добавить();
				НоваяОбластьРК.ТипАдресногоЭлемента = 1;
				НоваяОбластьРК.КодОбластиВКоде      = КодОбластиРК;
				НоваяОбластьРК.Код                  = КодОбластиРК * АдресныйКлассификаторКлиентСервер.МаскаОбласти();
				
				НоваяОбластьРК.Наименование         = ИсходныеДанные.Наименование;
				НоваяОбластьРК.Сокращение           = ИсходныеДанные.Сокращение;
				НоваяОбластьРК.Индекс               = ИсходныеДанные.ПочтовыйИндекс;
				
				Набор.Записать();
			Исключение
				ТекстСообщения = НСтр("ru='Операция не выполнена'");
				Комментарий = НСтр("ru = 'При записи данных в регистр ""Адресный классификатор"" произошла ошибка:
				|%1'");
				
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, ПодробноеПредставлениеОшибки);
				
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , Комментарий);				
				ОбщегоНазначения.СообщитьПользователю(Комментарий);
			КонецПопытки; 
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли