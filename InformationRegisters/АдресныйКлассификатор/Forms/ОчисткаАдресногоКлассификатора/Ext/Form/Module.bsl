// Флаг подтверждения, используется при закрытии
&НаКлиенте
Перем ПодтверждениеЗакрытияФормы;

// Хранилище передаваемых файлов
&НаКлиенте
Перем ПомещенныеФайлы;

// Параметры загрузки для передачи между клиентскими вызовами
&НаКлиенте
Перем ПараметрыФоновойОчисткиКлассификатора;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДлительнойОперации = Новый Структура("ИнтервалОжидания, Завершено, АдресРезультата, Идентификатор, Ошибка", 5);
	
	// Получаем уже загруженные области
	ТаблицаОбластей = РегистрыСведений.АдресныйКлассификатор.СведенияОЗагрузкеОбластейРК();
	ТаблицаОбластей.Колонки.Добавить("Очищать", Новый ОписаниеТипов("Булево"));
	
	Для Каждого Область Из ТаблицаОбластей Цикл
		Область.Представление = Формат(Область.КодОбластиРК, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=") + ", " + Область.Представление;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаОбластей, "ОбластиРК");
	
	// Автосохранение настроек
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьИнтерфейсПоКоличествуОчищаемых();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, СтандартнаяОбработка)
	
	Если Элементы.ШагиОчистки.ТекущаяСтраница <> Элементы.ОжиданиеОчистки 
		Или ПодтверждениеЗакрытияФормы = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыЗавершение", ЭтотОбъект);
	Текст = НСтр("ru = 'Прервать очистку адресного классификатора?'");
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыДлительнойОперации.Идентификатор <> Неопределено Тогда
		ОтменитьФоновоеЗадание(ПараметрыДлительнойОперации.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОбластиРКВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Поле = Элементы.ОбластиРКПредставление Тогда
		ТекущиеДанные = ОбластиРК.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.Очищать = Не ТекущиеДанные.Очищать;
			ОбновитьИнтерфейсПоКоличествуОчищаемых();
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластиРКОчищатьПриИзменении(Элемент)
	
	ОбновитьИнтерфейсПоКоличествуОчищаемых();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьПометкиСпискаОбластей(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьПометкиСпискаОбластей(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	ОчиститьКлассификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьОчистку(Команда)
	
	ПодтверждениеЗакрытияФормы = Неопределено;
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Завершение диалога закрытия формы
&НаКлиенте
Процедура ЗакрытиеФормыЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПодтверждениеЗакрытияФормы = Истина;
		Закрыть();
	Иначе 
		ПодтверждениеЗакрытияФормы = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРазрешениеОчистки(Знач КоличествоОчищаемых = Неопределено)
	
	Если КоличествоОчищаемых = Неопределено Тогда
		КоличествоОчищаемых = ОбластиРК.НайтиСтроки( Новый Структура("Очищать", Истина) ).Количество();
	КонецЕсли;
	
	Элементы.Очистить.Доступность = КоличествоОчищаемых > 0
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ОбластиРККодОбластиРК");
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ОбластиРКПредставление");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбластиРК.Загружено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСерый);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиСпискаОбластей(Знач Пометка)
	
	// Устанавливаем пометки только для видимых строк
	ЭлементТаблицы = Элементы.ОбластиРК;
	Для Каждого СтрокаОбласти Из ОбластиРК Цикл
		Если ЭлементТаблицы.ДанныеСтроки(СтрокаОбласти.ПолучитьИдентификатор()) <> Неопределено Тогда
			СтрокаОбласти.Очищать = Пометка;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьИнтерфейсПоКоличествуОчищаемых();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПоКоличествуОчищаемых()
	
	// Страница выбора
	ВыбраноОбластейДляОчистки = ОбластиРК.НайтиСтроки( Новый Структура("Очищать", Истина) ).Количество();
	
	// Страница загрузки
	ТекстОписанияОчистки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Очищаются данные выбранных областей (%1)'"), ВыбраноОбластейДляОчистки
	);
	
	УстановитьРазрешениеОчистки(ВыбраноОбластейДляОчистки);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКлассификатор()
	
	ОчиститьСообщения();
	
	// Переключаем режим - страницу
	Элементы.ШагиОчистки.ТекущаяСтраница = Элементы.ОжиданиеОчистки;
	ТекстСостоянияОчистки = НСтр("ru = 'Очистка адресного классификатора ...'");
	
	Элементы.ПрерватьОчистку.Доступность = Ложь;
	
	ПараметрыФоновойОчисткиКлассификатора = Новый Структура;
	ПараметрыФоновойОчисткиКлассификатора.Вставить("КодыОбластей", КодыОбластейДляОчистки());
	
	ПодключитьОбработчикОжидания("ОчиститьКлассификаторКАТО", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКлассификаторКАТО()
	
	КодыОбластей = ПараметрыФоновойОчисткиКлассификатора.КодыОбластей;
	ПараметрыФоновойОчисткиКлассификатора= Неопределено;
	
	ЗапуститьФоновуюОчисткуНаСервере(КодыОбластей);
	ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеДлительнойОперации", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьФоновуюОчисткуНаСервере(Знач КодыОбластей)
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(КодыОбластей);
	
	ПараметрыДлительнойОперации.Идентификатор   = Неопределено;
	ПараметрыДлительнойОперации.Завершено       = Истина;
	ПараметрыДлительнойОперации.АдресРезультата = Неопределено;
	ПараметрыДлительнойОперации.Ошибка          = Неопределено;
	
	Попытка
		РезультатЗапуска = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"АдресныйКлассификатор.ФоновоеЗаданиеОчисткиКлассификатораАдресов",
			ПараметрыМетода,
			НСтр("ru = 'Очистка адресного классификатора'")
		);
	Исключение
		ПараметрыДлительнойОперации.Ошибка = ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
		Возврат;
		
	КонецПопытки;
	
	ПараметрыДлительнойОперации.Идентификатор   = РезультатЗапуска.ИдентификаторЗадания;
	ПараметрыДлительнойОперации.Завершено       = РезультатЗапуска.ЗаданиеВыполнено;
	ПараметрыДлительнойОперации.АдресРезультата = РезультатЗапуска.АдресХранилища;
	
	// Запущенное 
	Элементы.ПрерватьОчистку.Доступность = Истина;
КонецПроцедуры

&НаСервере
Функция СостояниеФоновогоЗадания()
	Результат = Новый Структура("Прогресс, Завершено, Ошибка");
	
	Результат.Ошибка = "";
	Если ПараметрыДлительнойОперации.Идентификатор = Неопределено Тогда
		Результат.Завершено = Истина;
		Результат.Прогресс  = Неопределено;
		Результат.Ошибка    = ПараметрыДлительнойОперации.Ошибка;
	Иначе
		Попытка
			Результат.Завершено = ДлительныеОперации.ЗаданиеВыполнено(ПараметрыДлительнойОперации.Идентификатор);
			Если НЕ Результат.Завершено Тогда
				Результат.Прогресс  = ДлительныеОперации.ПрочитатьПрогресс(ПараметрыДлительнойОперации.Идентификатор);
			КонецЕсли;
		Исключение
			Результат.Ошибка = ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
		КонецПопытки
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьФоновоеЗадание(Знач Идентификатор)
	
	Если Идентификатор <> Неопределено Тогда
		Попытка
			ДлительныеОперации.ОтменитьВыполнениеЗадания(Идентификатор);
		Исключение
			// Действие не требуется, запись в журнал регистрации уже произведена
		КонецПопытки
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОжиданиеДлительнойОперации()
	
	// Обновим статус
	Состояние = СостояниеФоновогоЗадания();
	Если Не ПустаяСтрока(Состояние.Ошибка) Тогда
		// Завершено с ошибкой, сообщим и вернемся на первую страницу
		Элементы.ШагиОчистки.ТекущаяСтраница = Элементы.ВыборОбластейОчистки;
		Сообщить(Состояние.Ошибка);
		Возврат;
		
	ИначеЕсли Состояние.Завершено Тогда
		Элементы.ШагиОчистки.ТекущаяСтраница = Элементы.УспешноеЗавершение;
		ТекстОписанияОчистки = НСтр("ru = 'Адресный классификатор успешно очищен.'");
		
		Оповестить("ОчищенАдресныйКлассификатор", , ЭтотОбъект);
		
		Элементы.Закрыть.КнопкаПоУмолчанию = Истина;
		ТекущийЭлемент = Элементы.Закрыть;
		ПодтверждениеЗакрытияФормы = Истина;
		Возврат;
		
	КонецЕсли;
	
	// Процесс продолжается
	Если ТипЗнч(Состояние.Прогресс) = Тип("Структура") Тогда
		ТекстСостоянияОчистки = Состояние.Прогресс.Текст;
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеДлительнойОперации", ПараметрыДлительнойОперации.ИнтервалОжидания, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция КодыОбластейДляОчистки()
	Результат = Новый Массив;
	
	Для Каждого Область Из ОбластиРК.НайтиСтроки( Новый Структура("Очищать", Истина) ) Цикл
		Результат.Добавить(Область.КодОбластиРК);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти
