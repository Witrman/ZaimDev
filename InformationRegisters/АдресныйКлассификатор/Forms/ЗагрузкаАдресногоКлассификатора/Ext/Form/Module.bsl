// Форма параметризуется. Необязательные параметры:
//     КодОбластиДляЗагрузки      - Число, Строка, Массив - Код области РК (или их массив), загрузка которой предлагается.
//     НазваниеОбластиДляЗагрузки - Строка                - Название области РК, загрузка которой предлагается.
// 
// Если указан хоть один из параметров, то предлагаемая область будет отмечена для загрузки и выделен как текущий
//

// Флаг подтверждения, используется при закрытии
&НаКлиенте
Перем ПодтверждениеЗакрытияФормы;

// Хранилище передаваемых файлов
&НаКлиенте
Перем ПомещенныеФайлы;

// Параметры загрузки для передачи между клиентскими вызовами
&НаКлиенте
Перем ПараметрыФоновойЗагрузкиКлассификатора;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Источник по умолчанию, может быть переопределен при восстановлении параметров
	КодИсточникаЗагрузки = КодИсточникаЗагрузкиПоУмолчанию();
	
	ПараметрыДлительнойОперации = Новый Структура("ИнтервалОжидания, Завершено, АдресРезультата, Идентификатор, Ошибка", 5);
	
	ДоступныеИсточникиЗагрузки.Очистить();
	
	ДоступныеИсточникиЗагрузки.Добавить("КАТАЛОГ", НСтр("ru = 'Из каталога на диске'") );
	
	// Получаем уже загруженные области
	ТаблицаОбластей = РегистрыСведений.АдресныйКлассификатор.СведенияОЗагрузкеОбластейРК();
	ТаблицаОбластей.Колонки.Добавить("Загружать", Новый ОписаниеТипов("Булево"));
	ТаблицаОбластей.ЗагрузитьКолонку(ТаблицаОбластей.ВыгрузитьКолонку("Загружено"), "Загружать");
	
	Для Каждого Область Из ТаблицаОбластей Цикл
		Область.Представление = Формат(Область.КодОбластиРК, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=") + ", " + Область.Представление;
	КонецЦикла;
	
	// Добавляем пометку для загружаемой области-параметра и ставим ее текущей строкой
	НазваниеОбластиДляЗагрузки = Неопределено;
	ТекущийКодОбласти          = Неопределено;
	
	Параметры.Свойство("КодОбластиДляЗагрузки", ТекущийКодОбласти);
	
	ТипТекущегоКодаОбласти = ТипЗнч(ТекущийКодОбласти);
	ТипЧисло               = Новый ОписаниеТипов("Число");
		
	Если ТипТекущегоКодаОбласти = Тип("Массив") И ТекущийКодОбласти.Количество() > 0 Тогда
		// Указан массив для загрузки
		Для Каждого КодОбласти Из ТекущийКодОбласти Цикл 
			Кандидаты = ОбластиРК.НайтиСтроки(Новый Структура("КодОбластиРК", ТипЧисло.ПривестиЗначение(КодОбласти) )); 
			Если Кандидаты.Количество() > 0 Тогда
				Кандидаты[0].Загружать = Истина;
			КонецЕсли;
		КонецЦикла;
		ТекущийКодОбласти = ТекущийКодОбласти[0];
		
	ИначеЕсли ТипТекущегоКодаОбласти = Тип("Строка") Тогда
		ТекущийКодОбласти = ТипЧисло.ПривестиЗначение(ТекущийКодОбласти);
		
	КонецЕсли;
	
	Если ТекущийКодОбласти = Неопределено И Параметры.Свойство("НазваниеОбластиДляЗагрузки", НазваниеОбластиДляЗагрузки) Тогда;
		// Пытаемся установить по наименованию
		ТекущийКодОбласти = РегистрыСведений.АдресныйКлассификатор.КодОбластиПоНаименованию(НазваниеОбластиДляЗагрузки);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТаблицаОбластей, "ОбластиРК");
	
	Если ТекущийКодОбласти <> Неопределено Тогда
		Кандидаты = ОбластиРК.НайтиСтроки(Новый Структура("КодОбластиРК", ТекущийКодОбласти)); 
		Если Кандидаты.Количество() > 0 Тогда
			ТекущаяСтрока = Кандидаты[0];
			ТекущаяСтрока.Загружать = Истина;
			Элементы.ОбластиРК.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	// Если не установили текущую строку по параметру, то пытаемся поставить ее на первый отмеченный
	Если Элементы.ОбластиРК.ТекущаяСтрока = Неопределено Тогда
		Кандидаты = ОбластиРК.НайтиСтроки(Новый Структура("Загружать", Истина)); 
		Если Кандидаты.Количество() > 0 Тогда
			Элементы.ОбластиРК.ТекущаяСтрока = Кандидаты[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	// Зависимости от интерфейса
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.АдресЗагрузки.КартинкаКнопкиВыбора = Новый Картинка;
	КонецЕсли;
	
	// Автосохранение настроек
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Контроль корректности кода источника данных для загрузки
	КодИсточника = Настройки["КодИсточникаЗагрузки"];
	Если ДоступныеИсточникиЗагрузки.НайтиПоЗначению(КодИсточника) = Неопределено Тогда
		Настройки.Удалить("КодИсточникаЗагрузки");
		Настройки.Удалить("АдресЗагрузки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УстановитьНадписьИсточникаДанных();
	ОбновитьИнтерфейсПоКоличествуЗагружаемых();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, СтандартнаяОбработка)
	
	Если Элементы.ШагиЗагрузки.ТекущаяСтраница <> Элементы.ОжиданиеЗагрузки 
		Или ПодтверждениеЗакрытияФормы = Истина Тогда
		Возврат;
	КонецЕсли;		
	
	Отказ = Истина;
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыЗавершение", ЭтотОбъект);
	Текст = НСтр("ru = 'Прервать загрузку адресного классификатора?'");
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыДлительнойОперации.Идентификатор <> Неопределено Тогда
		ОтменитьФоновоеЗадание(ПараметрыДлительнойОперации.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОбластиРКВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Поле = Элементы.ОбластиРКПредставление Тогда
		ТекущиеДанные = ОбластиРК.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.Загружать = Не ТекущиеДанные.Загружать;
			ОбновитьИнтерфейсПоКоличествуЗагружаемых();
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеИсточникаЗагрузкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ЗавершениеИзмененияИсточникаЗагрузки", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(Оповещение, ДоступныеИсточникиЗагрузки, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АдресЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АдресныйКлассификаторКлиент.ВыбратьФайл(ЭтотОбъект, "АдресЗагрузки", 
		НСтр("ru = 'Файл с данными адресного классификатора'"),
		СтандартнаяОбработка
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластиРКЗагружатьПриИзменении(Элемент)
	
	ОбновитьИнтерфейсПоКоличествуЗагружаемых();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьПометкиСпискаОбластей(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьПометкиСпискаОбластей(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	Если КодИсточникаЗагрузки = "КАТАЛОГ" Тогда
		Текст = НСтр("ru = 'Для загрузки адресного классификатора из каталога
		                   |необходимо установить расширение для работы с файлами.'");
		КонтрольРасширенияРаботыСФайлами(Текст, КодИсточникаЗагрузки, АдресЗагрузки);
		
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не указан источник загрузки классификатора.'"), , "НевидимоеПредставлениеИсточникаЗагрузки");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьЗагрузку(Команда)
	ПодтверждениеЗакрытияФормы = Неопределено;
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура КонтрольРасширенияРаботыСФайлами(Знач ТекстПредложения, Знач КодИсточника, Знач АдресИсточника)
	
	Оповещение = Новый ОписаниеОповещения("КонтрольРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("КодИсточникаЗагрузки", КодИсточника);
	Оповещение.ДополнительныеПараметры.Вставить("АдресЗагрузки",        АдресИсточника);
	
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстПредложения, Ложь);
КонецПроцедуры

// Завершение диалога предложения расширения для работы с файлами
&НаКлиенте
Процедура КонтрольРасширенияРаботыСФайламиЗавершение(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;    
	КонецЕсли;
		
	Если ДополнительныеПараметры.КодИсточникаЗагрузки = "КАТАЛОГ" Тогда 
		ЗагрузитьКлассификаторИзКаталога(ДополнительныеПараметры.АдресЗагрузки);		
	КонецЕсли; 
	      	
КонецПроцедуры

// Завершение диалога изменения загрузки
&НаКлиенте
Процедура ЗавершениеИзмененияИсточникаЗагрузки(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодИсточникаЗагрузки = Результат.Значение;
	УстановитьНадписьИсточникаДанных();
КонецПроцедуры

// Завершение диалога закрытия формы
&НаКлиенте
Процедура ЗакрытиеФормыЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПодтверждениеЗакрытияФормы = Истина;
		Закрыть();
	Иначе 
		ПодтверждениеЗакрытияФормы = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНадписьИсточникаДанных()
	
	Если КодИсточникаЗагрузки = "КАТАЛОГ" Тогда
		Текст = ДоступныеИсточникиЗагрузки.НайтиПоЗначению(КодИсточникаЗагрузки).Представление + ":";
		ВидимостьИсточника = Истина;
		
	Иначе 
		Текст = НСтр("ru = 'Источник не указан'");
		ВидимостьИсточника = Ложь;
		
	КонецЕсли;
	
	ПредставлениеИсточникаЗагрузки = Новый ФорматированнаяСтрока(Текст, , , , "Ссылка");
	
	Если ВидимостьИсточника Тогда
		Элементы.ГруппаОтображенияАдресаЗагрузки.ТекущаяСтраница = Элементы.ВидимыйАдресЗагрузки;
		
		ВидимостьКодировки = Ложь;
		Если ЗначениеЗаполнено(АдресЗагрузки) Тогда
			СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(АдресЗагрузки);
			ВидимостьКодировки = ВРег(СтруктураИмениФайла.Расширение) = ".DBF";
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "Кодировка", "Видимость", ВидимостьКодировки);
	Иначе
		Элементы.ГруппаОтображенияАдресаЗагрузки.ТекущаяСтраница = Элементы.НевидимыйАдресЗагрузки;
	КонецЕсли;
	
	УстановитьРазрешениеЗагрузки();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРазрешениеЗагрузки(Знач КоличествоЗагружаемых = Неопределено)
	
	Если КоличествоЗагружаемых = Неопределено Тогда
		КоличествоЗагружаемых = ОбластиРК.НайтиСтроки( Новый Структура("Загружать", Истина) ).Количество();
	КонецЕсли;
	
	Элементы.Загрузить.Доступность = (КоличествоЗагружаемых > 0) 
		И ДоступныеИсточникиЗагрузки.НайтиПоЗначению(КодИсточникаЗагрузки) <> Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ОбластиРККодОбластиРК");
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ОбластиРКПредставление");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбластиРК.Загружено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСерый);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиСпискаОбластей(Знач Пометка)
	
	// Устанавливаем пометки только для видимых строк
	ЭлементТаблицы = Элементы.ОбластиРК;
	Для Каждого СтрокаОбласти Из ОбластиРК Цикл
		Если ЭлементТаблицы.ДанныеСтроки(СтрокаОбласти.ПолучитьИдентификатор() ) <> Неопределено Тогда
			СтрокаОбласти.Загружать = Пометка;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьИнтерфейсПоКоличествуЗагружаемых();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПоКоличествуЗагружаемых()
	
	// Страница выбора
	ВыбраноОбластейДляЗагрузки = ОбластиРК.НайтиСтроки(Новый Структура("Загружать", Истина) ).Количество();
	
	// Страница загрузки
	ТекстОписанияЗагрузки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Загружаются данные по выбранным областям (%1)'"), ВыбраноОбластейДляЗагрузки 
	);
	
	УстановитьРазрешениеЗагрузки(ВыбраноОбластейДляЗагрузки);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКлассификаторИзКаталога(Знач ФайлДанных)
	
	КодыОбластей = КодыОбластейДляЗагрузки();

	// Проверка доступности и наличия файлов.
	ПараметрыЗагрузки = Новый Структура("КодИсточникаЗагрузки, ПолеОшибки", КодИсточникаЗагрузки, "АдресЗагрузки");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьКлассификаторИзКаталогаЗавершение", ЭтотОбъект);
	АдресныйКлассификаторКлиент.АнализДоступностиФайловКлассификатораВКаталоге(ОписаниеОповещения, КодыОбластей, ФайлДанных, ПараметрыЗагрузки);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКлассификаторИзКаталогаЗавершение(РезультатАнализа, ДополнительныеПараметры) Экспорт
	
	Если РезультатАнализа.Ошибки <> Неопределено Тогда
		// Не хватает файлов для загрузки по указанным режимам.
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(РезультатАнализа.Ошибки);
		Возврат;
	КонецЕсли;
	
	// Загружаем в фоне
	УдалитьПослеПередачиНаСервер = Новый Массив;
	РезультатАнализа.Вставить("УдалитьПослеПередачиНаСервер", УдалитьПослеПередачиНаСервер);
	
	ЗапуститьФоновуюЗагрузкуИзКаталогаКлиента(РезультатАнализа);
	
КонецПроцедуры
     // Завершение диалога авторизации
//
&НаКлиенте
Процедура ЗапуститьФоновуюЗагрузкуИзКаталогаКлиента(Знач ПараметрыЗагрузки)
	// Переключаем режим - страницу
	Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ОжиданиеЗагрузки;
	ТекстСостоянияЗагрузки = НСтр("ru = 'Передача файлов на сервер приложения...'");
	
	Элементы.ПрерватьЗагрузку.Доступность = Ложь;
	ПараметрыФоновойЗагрузкиКлассификатора = ПараметрыЗагрузки;
	ПодключитьОбработчикОжидания("ЗапуститьФоновуюЗагрузкуИзКаталогаКлиентаПродолжение", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФоновуюЗагрузкуИзКаталогаКлиентаПродолжение()
	ПараметрыЗагрузки = ПараметрыФоновойЗагрузкиКлассификатора;
	ПараметрыФоновойЗагрузкиКлассификатора = Неопределено;
	
	Если ПараметрыЗагрузки = Неопределено Тогда
		// Возвращаемся на страницу выбора
		Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ВыборОбластейЗагрузки;
		Возврат;
	КонецЕсли;
		
	// Очищаем возможно ранее помещенные файлы
	Если ТипЗнч(ПомещенныеФайлы) = Тип("Массив") Тогда
		Для Каждого Описание Из ПомещенныеФайлы Цикл
			Если Не ПустаяСтрока(Описание.Хранение) Тогда
				УдалитьИзВременногоХранилища(Описание.Хранение);
			КонецЕсли;
		КонецЦикла;
		ПомещенныеФайлы.Очистить();
	КонецЕсли;
	
	// Список передаваемых на сервер файлов
	ПомещаемыеФайлы = Новый Массив;
	Для Каждого КлючЗначение Из ПараметрыЗагрузки.ФайлыПоОбластям Цикл
		Если ТипЗнч(КлючЗначение.Значение) = Тип("Массив") Тогда
			Для Каждого ИмяФайла Из КлючЗначение.Значение Цикл
				ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла) );
			КонецЦикла;
		Иначе
			ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(КлючЗначение.Значение) );
		КонецЕсли;
	КонецЦикла;
	
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыЗагрузки", ПараметрыЗагрузки);
	ДополнительныеПараметры.Вставить("Позиция", 0);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗапуститьФоновуюЗагрузкуИзКаталогаКлиентаПослеПомещенияФайлов",
		ЭтотОбъект, ДополнительныеПараметры);
	НачатьПомещениеФайлов(ОписаниеОповещения, ПомещаемыеФайлы,, Ложь, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрогрессВыполнения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Статус = "Выполняется" Тогда
		Прогресс = ПрочитатьПрогресс(Результат.ИдентификаторЗадания);
		Если Прогресс <> Неопределено Тогда
			ТекстСостоянияЗагрузки = Прогресс.Текст;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьПрогресс(ИдентификаторЗадания)
	Возврат ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗадания);
КонецФункции

&НаКлиенте
Процедура ЗапуститьФоновуюЗагрузкуИзКаталогаКлиентаПослеПомещенияФайлов(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Позиция = ДополнительныеПараметры.Позиция;
	Если Позиция <= ПомещенныеФайлы.ВГраница() Тогда
		
		// Сохраняем время изменения - версию.
		Описание = ПомещенныеФайлы[Позиция];
		ДанныеФайла = Новый Структура("Имя, Хранение");
		ЗаполнитьЗначенияСвойств(ДанныеФайла, Описание);
		ДополнительныеПараметры.Вставить("ДанныеФайла", ДанныеФайла);
		ДополнительныеПараметры.Вставить("ПомещенныеФайлы", ПомещенныеФайлы);
		Файл = Новый Файл(Описание.ПолноеИмя);
		Файл.НачатьПолучениеУниверсальногоВремениИзменения(Новый ОписаниеОповещения("ЗапуститьФоновуюЗагрузкуИзКаталогаКлиентаПослеПолученияВремениИзменения",
			ЭтотОбъект, ДополнительныеПараметры));
		
	Иначе // выход из цикла
		
		Режим = Неопределено;
		ДополнительныеПараметры.ПараметрыЗагрузки.Свойство("Режим", Режим);
		
		ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессВыполнения", ЭтотОбъект);
			
		Кодировка = Неопределено;
		ДополнительныеПараметры.Свойство("Кодировка", Кодировка);
		
		Задание = ЗапуститьФоновуюЗагрузкуНаСервере(ДополнительныеПараметры.ПараметрыЗагрузки.КодыОбластей, ПомещенныеФайлы, Кодировка);

		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		НастройкиОжидания.ОповещениеОПрогрессеВыполнения = ОповещениеОПрогрессеВыполнения;
	
		Обработчик = Новый ОписаниеОповещения("ПослеФоновойЗагрузкиИзКаталога", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Задание, Обработчик, НастройкиОжидания);

		// Запущенное 
		Элементы.ПрерватьЗагрузку.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФоновуюЗагрузкуИзКаталогаКлиентаПослеПолученияВремениИзменения(ВремяИзменения, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.ДанныеФайла.Вставить("ВремяИзменения", ВремяИзменения);
	ДополнительныеПараметры.ПомещенныеФайлы[ДополнительныеПараметры.Позиция] = ДополнительныеПараметры.ДанныеФайла;
	ДополнительныеПараметры.Позиция = ДополнительныеПараметры.Позиция + 1;
	ЗапуститьФоновуюЗагрузкуИзКаталогаКлиентаПослеПомещенияФайлов(ДополнительныеПараметры.ПомещенныеФайлы, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеФоновойЗагрузкиИзКаталога(Задание, ДополнительныеПараметры) Экспорт

	Если Задание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Задание.Статус = "Ошибка" Тогда
		
		ТекстОшибки = НСтр("ru = 'Не удается загрузить адресные объекты из файлов.'");
		ТекстОшибки = ТекстОшибки + НСтр("ru = 'Техническая информация:'") + Символы.ПС + Задание.КраткоеПредставлениеОшибки;
		ВывестиСообщениеОбОшибке(ТекстОшибки);
		
		Возврат;
	ИначеЕсли Задание.Статус = "Выполнено" Тогда
		ЗавершениеЗагрузки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщениеОбОшибке(Знач ТекстОшибки)
	ОчиститьСообщения();
	ПоказатьПредупреждение(, ТекстОшибки);
	Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ВыборОбластейЗагрузки;
КонецПроцедуры


&НаСервере
Функция ЗапуститьФоновуюЗагрузкуНаСервере(Знач КодыОбластей, Знач ОписаниеФайловЗагрузки, Знач Режим = Неопределено)
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(КодыОбластей);
	
	// Файлы преобразуем в двоичные данные - хранилище не может быть разделено с сеансом фонового задания
	ОписаниеФайлов = Новый Массив;
	Для Каждого Описание Из ОписаниеФайловЗагрузки Цикл
		
		ДанныеФайла = Новый Структура("Имя, ВремяИзменения");
		ЗаполнитьЗначенияСвойств(ДанныеФайла, Описание);
		ДанныеФайла.Вставить("Хранение", ПолучитьИзВременногоХранилища(Описание.Хранение));
		
		ОписаниеФайлов.Добавить(ДанныеФайла);
	КонецЦикла;
	ПараметрыМетода.Добавить(ОписаниеФайлов);
	
	ПараметрыМетода.Добавить(Режим);
	
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка адресного классификатора'");
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне("АдресныйКлассификатор.ФоновоеЗаданиеЗагрузкиКлассификатораАдресов",
		ПараметрыМетода, ПараметрыВыполнения);
		
	Возврат ФоновоеЗадание;

	
КонецФункции

&НаСервере
Функция СостояниеФоновогоЗадания()
	Результат = Новый Структура("Прогресс, Завершено, Ошибка");
	
	Результат.Ошибка = "";
	Если ПараметрыДлительнойОперации.Идентификатор = Неопределено Тогда
		Результат.Завершено = Истина;
		Результат.Прогресс  = Неопределено;
		Результат.Ошибка    = ПараметрыДлительнойОперации.Ошибка;
	Иначе
		Попытка
			Результат.Завершено = ДлительныеОперации.ЗаданиеВыполнено(ПараметрыДлительнойОперации.Идентификатор);
			Если НЕ Результат.Завершено Тогда
				Результат.Прогресс  = ДлительныеОперации.ПрочитатьПрогресс(ПараметрыДлительнойОперации.Идентификатор);
			КонецЕсли;
		Исключение
			Результат.Ошибка = ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
		КонецПопытки
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьФоновоеЗадание(Знач Идентификатор)
	
	Если Идентификатор <> Неопределено Тогда
		Попытка
			ДлительныеОперации.ОтменитьВыполнениеЗадания(Идентификатор);
		Исключение
			// Действие не требуется, запись в журнал регистрации уже произведена
		КонецПопытки
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОжиданиеДлительнойОперации()
	
	// Обновим статус
	Состояние = СостояниеФоновогоЗадания();
	Если Не ПустаяСтрока(Состояние.Ошибка) Тогда
		// Завершено с ошибкой, сообщим и вернемся на первую страницу
		Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ВыборОбластейЗагрузки;
		Сообщить(Состояние.Ошибка);
		Возврат;
		
	ИначеЕсли Состояние.Завершено Тогда
		Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.УспешноеЗавершение;
		ТекстОписанияЗагрузки = НСтр("ru = 'Адресный классификатор успешно загружен.'");
		
		Оповестить("ЗагруженАдресныйКлассификатор", , ЭтотОбъект);
		
		Элементы.Закрыть.КнопкаПоУмолчанию = Истина;
		ТекущийЭлемент = Элементы.Закрыть;
		ПодтверждениеЗакрытияФормы = Истина;
		Возврат;
		
	КонецЕсли;
	
	// Процесс продолжается
	Если ТипЗнч(Состояние.Прогресс) = Тип("Структура") Тогда
		ТекстСостоянияЗагрузки = Состояние.Прогресс.Текст;
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеДлительнойОперации", ПараметрыДлительнойОперации.ИнтервалОжидания, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЗагрузки()
	
	// Обновим статус
	Состояние = СостояниеФоновогоЗадания();
	Если Не ПустаяСтрока(Состояние.Ошибка) Тогда
		// Завершено с ошибкой, сообщим и вернемся на первую страницу
		Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ВыборОбластейЗагрузки;
		Сообщить(Состояние.Ошибка);
		Возврат;
		
	ИначеЕсли Состояние.Завершено Тогда
		Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.УспешноеЗавершение;
		ТекстОписанияЗагрузки = НСтр("ru = 'Адресный классификатор успешно загружен.'");
		
		Оповестить("ЗагруженАдресныйКлассификатор", , ЭтотОбъект);
		
		Элементы.Закрыть.КнопкаПоУмолчанию = Истина;
		ТекущийЭлемент = Элементы.Закрыть;
		ПодтверждениеЗакрытияФормы = Истина;
		Возврат;
		
	КонецЕсли;
	
	// Процесс продолжается
	Если ТипЗнч(Состояние.Прогресс) = Тип("Структура") Тогда
		ТекстСостоянияЗагрузки = Состояние.Прогресс.Текст;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция КодыОбластейДляЗагрузки()
	Результат = Новый Массив;
	
	Для Каждого Область Из ОбластиРК.НайтиСтроки( Новый Структура("Загружать", Истина) ) Цикл
		Результат.Добавить(Область.КодОбластиРК);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КодИсточникаЗагрузкиПоУмолчанию()
	
	Возврат "КАТАЛОГ";
	
КонецФункции

#КонецОбласти
