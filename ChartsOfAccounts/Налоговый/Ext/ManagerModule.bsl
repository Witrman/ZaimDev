#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Расходный кассовый ордер
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Описание";
	КомандаПечати.Представление = НСтр("ru = 'План счетов налогового учета (по налогу на прибыль)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
		
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать расходной накладной
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Описание");
	Если НужноПечататьМакет Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Описание",
			НСтр("ru = 'План счетов налогового учета (по налогу на прибыль)'"),
			ПечатьОписание(МассивОбъектов, ОбъектыПечати),
			,
			"ПланСчетов.Налоговый.ПФ_MXL_Описание");
	КонецЕсли;

КонецПроцедуры

Функция ПечатьОписание(МассивОбъектов, ОбъектыПечати)Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;

	ТабДокумент.КлючПараметровПечати = "Описание";
	Макет = УправлениеПечатью.МакетПечатнойФормы("ПланСчетов.Налоговый.ПФ_MXL_Описание");
	
	Шапка            = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху                   = 10;
	ТабДокумент.ПолеСлева                    = 10;
	ТабДокумент.ПолеСнизу                    = 10;
	ТабДокумент.ПолеСправа                   = 10;
	ТабДокумент.РазмерКолонтитулаСверху      = 10;
	ТабДокумент.ВерхнийКолонтитул.ТекстСлева = НСтр("ru='План счетов налогового учета (по налогу на прибыль)'");
	ТабДокумент.ВерхнийКолонтитул.Выводить   = Истина;
	ТабДокумент.ОриентацияСтраницы           = ОриентацияСтраницы.Портрет;
	
	// Выведем шапку
	Шапка.Параметры.Заголовок = НСтр("ru='План счетов налогового учета (по налогу на прибыль)'");
	ТабДокумент.Вывести(Шапка);
	
	// Выведем заголовок таблицы
	ТабДокумент.Вывести(ЗаголовокТаблицы);
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.ЭтоГруппа КАК ЭтоГруппа,
	|	ПланСчетов.Ссылка.Код КАК Код,
	|	ПланСчетов.Ссылка.Наименование КАК Наименование,
	|	ПланСчетов.Ссылка.Количественный КАК Количественный,
	|	ПланСчетов.Ссылка.Вид КАК Вид,
	|	ПланСчетов.Ссылка.ВидыСубконто.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВидСубконто.Наименование КАК Наименование,
	|		ТолькоОбороты КАК ТолькоОбороты
	|	) КАК ВидыСубконто
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПланСчетов1.Ссылка КАК Ссылка,
	|		ВЫБОР
	|			КОГДА КОЛИЧЕСТВО(ПланСчетов2.Ссылка) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЭтоГруппа
	|	ИЗ
	|		ПланСчетов.Налоговый КАК ПланСчетов1
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый КАК ПланСчетов2
	|			ПО ПланСчетов1.Ссылка = ПланСчетов2.Родитель
	|	ГДЕ
	|		ПланСчетов1.ПометкаУдаления = ЛОЖЬ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПланСчетов1.Ссылка) КАК ПланСчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланСчетов.Ссылка.Порядок";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоГруппа Тогда
			Строка = Макет.ПолучитьОбласть("Группа");
		Иначе
			Строка = Макет.ПолучитьОбласть("Строка");
		КонецЕсли;
			
		Строка.Параметры.Заполнить(Выборка);
			
		Если Выборка.Вид = ВидСчета.Активный Тогда
			Строка.Параметры.Активность = "А";
		ИначеЕсли Выборка.Вид = ВидСчета.Пассивный Тогда
			Строка.Параметры.Активность = "П";
		Иначе
			Строка.Параметры.Активность = "АП";
		КонецЕсли;
		
		ВидыСубконто = Выборка.ВидыСубконто.Выбрать();
		Пока ВидыСубконто.Следующий() Цикл
			Строка.Параметры["Субконто" + ВидыСубконто.НомерСтроки] = ?(ВидыСубконто.ТолькоОбороты, "(об) ", "") + ВидыСубконто.Наименование;
		КонецЦикла;
		
		Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, Строка) Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;
		
		ТабДокумент.Вывести(Строка);
		Попытка
			Описание = Макет.ПолучитьОбласть(ПланыСчетов[Выборка.Ссылка.Метаданные().Имя].ПолучитьИмяПредопределенного(Выборка.Ссылка));
			ТабДокумент.Вывести(Описание);
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	ТабДокумент.ФиксацияСверху = 2;
	
	Возврат ТабДокумент;
	
КонецФункции

#КонецЕсли


#Область ОбновлениеИнформационнойБазы

#Область ОбработчикиОбновления_3_0_24 

Процедура ОбработкаНастроекПланаСчетовНалоговый2019() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	МакетОбновленияПС = ПланыСчетов.Налоговый.ПолучитьМакет("ПФ_MXL_ИзменяемыеСчетаДо2019");
	ОбластьИзмененныхСчетов = МакетОбновленияПС.Области.Найти("СписокИзмененныхСчетов");
		
	СписокИзмененныхКодов = Новый Массив;
	
	Для Ном = ОбластьИзмененныхСчетов.Верх По ОбластьИзмененныхСчетов.Низ Цикл				
		СписокИзмененныхКодов.Добавить(СокрЛП(МакетОбновленияПС.Область(Ном, 2).Текст));
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокИзмененныхКодов",СписокИзмененныхКодов);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Налоговый.Код КАК Код,
	               |	Налоговый.Наименование КАК Наименование,
	               |	Налоговый.Ссылка КАК Ссылка,
	               |	Налоговый.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	               |ИЗ
	               |	ПланСчетов.Налоговый КАК Налоговый
	               |ГДЕ
	               |	Налоговый.ИмяПредопределенныхДанных В(&СписокИзмененныхКодов)";
				 	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий()Цикл
		ОбъектИзменен = Ложь;
		ОбластьИзмененногоСчета = МакетОбновленияПС.НайтиТекст(Выборка.ИмяПредопределенныхДанных, , ОбластьИзмененныхСчетов, , Истина);
		Если НЕ ОбластьИзмененногоСчета = Неопределено Тогда
			КодСчета = СокрЛП(МакетОбновленияПС.Область(ОбластьИзмененногоСчета.Верх, 3).Текст);
			Объект = Выборка.Ссылка.ПолучитьОбъект(); 
			Объект.Код = КодСчета;
			Объект.Порядок = Объект.ПолучитьПорядокКода();
			ОбъектИзменен = Истина;		
		КонецЕсли;
		
		Если НЕ ОбъектИзменен Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;	    
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

		
