////////////////////////////////////////////////////////////////////////////////
// Описание формы
// Параметры фомры:
//  Налогоплательщик - СправочникСсылка.Организации - Налогоплательщик, представляющий отчет
//  мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета - Дата - отчетный период формирования отчета
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	мВыбраннаяФорма = "Форма3002021Кв1";
	КодФормы 		= "Форма300";
		
	ВсегоСтраниц	= 1;     	
	мФорматНомераСтроки = "ЧЦ=8; ЧВН=; ЧГ=";
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруФормРегОтчета(ЭтотОбъект);	
	
	СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями = РегламентированнаяОтчетностьПереопределяемый.ПоддержкаРаботыСоСтруктурнымиПодразделениями();	
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов   = Новый СписокЗначений;	
	СтруктураРеквизитовФормы.мПечатныеформы 		  = Новый СписокЗначений;	
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);
	
	Если НалоговыйКомитет = Неопределено Тогда
		Если Параметры.Свойство("мСохраненныйДок") Тогда
			Если ТипЗнч(Параметры.мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
				НалоговыйКомитет = Параметры.мСохраненныйДок.НалоговыйКомитет;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
		
	// Значения по умолчанию
	СтруктураРеквизитовФормы.мПропорцИРаздел	= Ложь; // не поддерживаем этот метод расчета	
	ПредставлениеНомераДокументов 				= Константы.ПредставлениеНомераСчетаФактуры.Получить();	
	ПроверятьИИНБИНКонтрагента 					= Ложь;
	СпособФормированияРеестра					= "ПоРегиструСчетовФактур";
	
	ЗаполнитьСведенияОбОтчетномПериоде();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	//СтруктураРеквизитовФормы.мМетодРасчета 		= ПолучитьМетодОтнесенияНДСВЗачет(Налогоплательщик, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
			ЗаполнитьПараметры(ТекФорма.КодФормы);
		КонецЕсли;
		Если ТекФорма.КодФормы = "Форма300_01" 
			ИЛИ ТекФорма.КодФормы = "Форма300_02" 
			ИЛИ ТекФорма.КодФормы = "Форма300_06" Тогда
			ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекФорма.КодФормы);
		Иначе 	
			РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекФорма.КодФормы);
		КонецЕсли;	
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ДатаПодписи) Тогда
		ДатаПодписи = ТекущаяДатаСеанса();
		ДатаПодписиПриИзмененииНаСервере();
	КонецЕсли;
	
	Если Форма300ПолеТабличногоДокументаСтраница1.Области.ПоУведомлению.Значение = "Х" Тогда
		Форма300ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Ложь;
		Форма300ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита = Ложь;
	Иначе
		Форма300ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Истина;
		Форма300ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита = Истина;
	КонецЕсли;
	
	мМакетКодовСтрок = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_КодыСтрокНалоговыхДеклараций");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;

	Если Модифицированность Тогда
		
		Если НЕ ЗакрытьФорму Тогда
			Отказ = Истина;
			Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);				
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Сохранить данные отчета?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьнаСервере();
		Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да ИЛИ Результат = КодВозвратаДиалога.Нет Тогда
		ЗакрытьФорму = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры   

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(
		мСписокСтруктурныхЕдиниц, 
		ЭтаФорма, 
		СтандартнаяОбработка, 
		"ПоДаннымНалоговогоУчета", 
		Налогоплательщик, 
		НалоговыйКомитет, 
		ПредопределенноеЗначение("Перечисление.РазделыНалоговогоУчета.НДС"),
		Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда		
		мСписокСтруктурныхЕдиниц = Результат;		
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц); 		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ФормаВыбораИзКлассификатора") Тогда
		
		Если ВРег(ИсточникВыбора.ИмяМакета) = ВРег("КОДЫБЮДЖЕТНОЙКЛАССИФИКАЦИИ") Тогда 
			
			Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда 
				Код = ВыбранноеЗначение;
			Иначе 
				Код = ВыбранноеЗначение.КодСтроки;				
			КонецЕсли;
		// выбираются в форме 300.03
		
		
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "Разделы"

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)	
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.КодФормы = Элемент.ТекущиеДанные.КодФормы Тогда
		ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);
		Возврат;
	КонецЕсли;	
	
	РазделыОтчетаПриАктивизацииСтрокиНаСервере(Элемент.ТекущиеДанные.КодФормы, Элемент.ТекущиеДанные.Многострочность);	
		
	//из-за проблем отображения в вебе
	
	//СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	//Для Каждого СтраницаФорм из Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы Цикл
	//	Элементы[СтраницаФорм.Имя].Видимость = СтраницаФорм.Имя = ЭтаФорма.КодФормы;	
	//КонецЦикла;
	
	Элементы[ЭтаФорма.КодФормы].Видимость = Ложь;
	Элементы[Элемент.ТекущиеДанные.КодФормы].Видимость = Истина;
	Элементы.ГруппаСтраницыОтчета.ТекущаяСтраница = Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы[ЭтаФорма.КодФормы]; 		
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;

	ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);
	
	ЗаполнитьПоле300_00_11();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "Отчеты"


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыгрузитьВXML(Команда)
	ГодФормирования = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	
	Если 2022 < ГодФормирования Тогда 
		ТекстСообщения = НСтр("ru = 'Отчет не предназначен для выгрузки в XML в период формирования " + Формат(ГодФормирования,"ЧГ=0") + " г." + Символы.ПС + 
						"Пожалуйста, обновите комплект отчетов.'");
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);		
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект);	
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);

КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохраненияФайла.ПолноеИмяФайла = КодФормы + " " + СтруктураРеквизитовФормы.мГод + "г" + ".xml";
		ДиалогСохраненияФайла.Фильтр = РегламентированнаяОтчетностьКлиентСервер.ФильтрДиалоговВыбораИСохраненияРегламентированногоОтчета();	
		ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
		ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите файл'");		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
		ДиалогСохраненияФайла.Показать(ОписаниеОповещения);
	Иначе   
		НачатьПолучениеФайлаССервера(ВыгрузитьВXMLНаСервере(), КодФормы + ".xml"); 
	КонецЕсли;
	   
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресВременногоХранилища = ВыгрузитьВXMLНаСервере();
		
	ПолноеИмяФайла = Результат[0];
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, АдресВременногоХранилища));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяФайла",ПолноеИмяФайла); 
	Обработчик = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеЗавершение", ЭтотОбъект,ДополнительныеПараметры);
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
	ПараметрыСохранения.Интерактивно = Ложь;
	ФайловаяСистемаКлиент.СохранитьФайлы(Обработчик, ПолучаемыеФайлы, ПараметрыСохранения); 
	
	        
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ТекстЗаголовка = НСтр("ru = 'Данные успешно выгружены в файл'");
	
	СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДополнительныеПараметры.ИмяФайла);
	
	РабочийКаталог = СтруктураФайла.Путь;

	#Если НЕ ВебКлиент Тогда
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка, "file:///" + СтрЗаменить(СокрЛП(РабочийКаталог), "\", "/"),
		РабочийКаталог);
	#Иначе
		Если НЕ ЗначениеЗаполнено(ПолученныеФайлы) Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка,,
		РабочийКаталог);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	Перезаполнить = Истина; // Для выполнения запроса на пересчет данных к пользователю
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения =  РегламентированнаяОтчетностьКлиент.ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Перезаполнить Тогда		
		Если СтрокаФормы.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстВопроса = "Перезаполнить данные формы и ее дополнительных форм?";
		Иначе
			ТекстВопроса = "Перезаполнить данные формы?";
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);
		Оповещение.ДополнительныеПараметры.Вставить("Перезаполнить", Перезаполнить);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);		

	КонецЕсли;		
КонецПроцедуры


&НаКлиенте
Процедура ОчиститьВсе(Команда)
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФормуИПриложения");
КонецПроцедуры


&НаКлиенте
Процедура ОчиститьФорму(Команда)
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	 	
	
	Перезаполнить = ДополнительныеПараметры.Перезаполнить;
	
	Если КодФормы = "Форма300" Тогда 
		Форма300ЗаполнитьАвто(Перезаполнить);
	ИначеЕсли КодФормы = "Форма300_01" Тогда 
		Форма300_01ЗаполнитьАвто(Перезаполнить);
	ИначеЕсли КодФормы = "Форма300_02" Тогда 
		Форма300_02ЗаполнитьАвто(Перезаполнить);	
	ИначеЕсли КодФормы = "Форма300_03" Тогда 
		Форма300_03ЗаполнитьАвто(Перезаполнить);		
	ИначеЕсли КодФормы = "Форма300_04" Тогда 
		Форма300_04ЗаполнитьАвто(Перезаполнить);			
	ИначеЕсли КодФормы = "Форма300_05" Тогда 
		Форма300_05ЗаполнитьАвто(Перезаполнить);				
	ИначеЕсли КодФормы = "Форма300_06" Тогда 
		Форма300_06ЗаполнитьАвто(Перезаполнить);					
	ИначеЕсли КодФормы = "Форма300_07" Тогда 
		Форма300_07ЗаполнитьАвто(Перезаполнить);						
	ИначеЕсли КодФормы = "Форма300_08" Тогда 
		Форма300_08ЗаполнитьАвто(Перезаполнить);						
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере()
	
	Если КодФормы = "Форма300_05" Тогда
		мФорматНомераСтроки = "ЧЦ=6; ЧВН=; ЧГ=";
	КонецЕсли;
	
	РегламентированнаяОтчетность.ДобавитьСтрокуМногострочнойФормы(ЭтотОбъект);
	
	мФорматНомераСтроки = "ЧЦ=8; ЧВН=; ЧГ=";
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	ДобавитьСтрокуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуЯчейки(Команда)
	
	Если мВыбраннаяОбласть = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если СтрНайти(мВыбраннаяОбласть, "text__") = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ДобавитьСтрокуЯчейкиНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуЯчейкиНаСервере()
	
	ТекИмяФормы = КодФормы;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);
	
	ТаблицаДанныхСтрокРасшифровкиЯчейки = ТаблицаДанных.СкопироватьКолонки();

	ИмяОбласти = мВыбраннаяОбласть;
	
	Если Найти(ИмяОбласти, "text__") <> 0 Тогда
		КоличествоСимволовНомераСтроки = СтрДлина(ИмяОбласти) - (Найти(ИмяОбласти, "text__") + 5); 
        ИмяИсходнойОбласти = Лев(ИмяОбласти, СтрДлина(ИмяОбласти)-КоличествоСимволовНомераСтроки);
		МаксимальныйНомерСтроки = 0;
		Для Каждого СтрокаТаблицаДанных Из ТаблицаДанных Цикл
			ИмяОбластиТаблицы = СтрокаТаблицаДанных.ИмяОбласти;
			Если СтрНайти(ИмяОбластиТаблицы, ИмяИсходнойОбласти) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоСимволовНомераСтроки = СтрДлина(ИмяОбластиТаблицы) - (Найти(ИмяОбластиТаблицы, "text__") + 5); 
			НомерСтрокиРасшифровки = Число(Прав(ИмяОбластиТаблицы, КоличествоСимволовНомераСтроки));
			
			Если НомерСтрокиРасшифровки > МаксимальныйНомерСтроки Тогда
				МаксимальныйНомерСтроки = НомерСтрокиРасшифровки;
			КонецЕсли;	
		КонецЦикла;	
		
		МаксимальныйНомерСтроки = МаксимальныйНомерСтроки + 1;
		
		ИмяАтрибута = СтрЗаменить(ИмяИсходнойОбласти, "s_", "field_");
		ИмяАтрибута = СтрЗаменить(ИмяАтрибута, "_text__", "");
		
		СтруктураРеквизитовФормы.мМаксимальныеНормераПодстрокЯчеек.Вставить(ИмяАтрибута,МаксимальныйНомерСтроки);
		
		НоваяСтрокаТД 				= ТаблицаДанных.Добавить();
		НоваяСтрокаТД.ИмяОбласти 	= ИмяИсходнойОбласти + МаксимальныйНомерСтроки;
		НоваяСтрокаТД.Значение 		= "";
		
		Если ТекИмяФормы = "Форма300_06" Тогда
			ИмяОбластиЗначения 			= Лев(ИмяОбласти, 13) + "a__" + МаксимальныйНомерСтроки;
			НоваяСтрокаТД 				= ТаблицаДанных.Добавить();
			НоваяСтрокаТД.ИмяОбласти 	= ИмяОбластиЗначения;
			НоваяСтрокаТД.Значение 		= 0;
			
			ИмяОбластиЗначения 			= Лев(ИмяОбласти, 13) + "b__" + МаксимальныйНомерСтроки;
			НоваяСтрокаТД 				= ТаблицаДанных.Добавить();
			НоваяСтрокаТД.ИмяОбласти 	= ИмяОбластиЗначения;
			НоваяСтрокаТД.Значение 		= 0;
			
		Иначе	
			ИмяОбластиЗначения 			= Лев(ИмяОбласти, 13) + "_" + МаксимальныйНомерСтроки;
			НоваяСтрокаТД 				= ТаблицаДанных.Добавить();
			НоваяСтрокаТД.ИмяОбласти 	= ИмяОбластиЗначения;
			НоваяСтрокаТД.Значение 		= 0;
		КонецЕсли;
		РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);				
		ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);
		
		Модифицированность = Истина;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЯчейки(Команда)
	
	Если мВыбраннаяОбласть = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если СтрНайти(мВыбраннаяОбласть, "text__") = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	УдалитьСтрокуНаСервере(Истина);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуНаСервере(УдаляетсяПодстрока = Ложь)
	
	Если УдаляетсяПодстрока Тогда
		УдалитьПодстрокуЯчейкиНаСервере();
	Иначе
		Если КодФормы = "Форма300_05" Тогда
			мФорматНомераСтроки = "ЧЦ=6; ЧВН=; ЧГ=";
		КонецЕсли;
	
		РегламентированнаяОтчетность.УдалитьСтрокуМногострочнойФормы(ЭтотОбъект, 1);
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы);
		
		мФорматНомераСтроки = "ЧЦ=8; ЧВН=; ЧГ=";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПодстрокуЯчейкиНаСервере()
	
	//ИмяОбласти = мВыбраннаяОбласть;//СтрЗаменить(Форма.мВыбраннаяОбласть, "s_", "");
	//КоличествоСимволовНомераСтроки = СтрДлина(ИмяОбласти) - (Найти(ИмяОбласти, "text__") + 7); 
	//ИмяИсходнойОбласти 		= Лев(ИмяОбласти,12);
	//НомерУдаляемойСтроки 	= Число(Прав(ИмяОбласти, КоличествоСимволовНомераСтроки));
	ТекИмяФормы = КодФормы;//Лев(мВыбраннаяОбласть, 11);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);
	
	Очистить(ТекИмяФормы,Истина);	
	
	ИмяОбластиДляУдаления = мВыбраннаяОбласть;
	УдаляемыеСтроки = ТаблицаДанных.НайтиСтроки(Новый Структура("ИмяОбласти", ИмяОбластиДляУдаления));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ТаблицаДанных.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	ИмяОбластиДляУдаления = СтрЗаменить(ИмяОбластиДляУдаления, "_text", "");
	
	УдаляемыеСтроки = ТаблицаДанных.НайтиСтроки(Новый Структура("ИмяОбласти", ИмяОбластиДляУдаления));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ТаблицаДанных.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	//ТекущаяПанель 	= ЭтаФорма.Элементы["Панель" + ТекИмяФормы];	
	//ТекСтраница  	= ТекущаяПанель.ТекущаяСтраница;
	//ИмяСтраницыБезПрефиксаПанели =  СтрЗаменить(ТекСтраница.Имя, ТекущаяПанель.Имя, ""); // ИмяСтраницыБезПерфиксаПанели
	//
	//ТекПоле = ЭтаФорма[КодФормы + "ПолеТабличногоДокумента" + ИмяСтраницыБезПрефиксаПанели];
	//ОбластьУдаления = ТекПоле.Области.Найти(ИмяОбластиДляУдаления);
	//
	//ТекПоле.УдалитьОбласть(ТекПоле.Область("C" + ОбластьУдаления.Верх + ":C" + (ОбластьУдаления.Верх+1)), ТипСмещенияТабличногоДокумента.ПоВертикали);
	//ТекПоле.Очистить();
	
	ИмяОбласти = Лев(ИмяОбластиДляУдаления,14);
	ТаблицаДанных.Сортировать("ИмяОбласти");
	СтрокиДляПериименования = ТаблицаДанных.НайтиСтроки(Новый Структура("ИмяОбласти", ИмяОбласти));
	МаксимальнаяСтрока 	= 0;
	ТекущаяСтрока 		= 1;
	Для Каждого СтрокаДляПереименования Из СтрокиДляПериименования Цикл
		НомерТекущейОбласти = СтрЗаменить(СтрокаДляПереименования.ИмяОбласти, ИмяОбласти, "");
	КонецЦикла;	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);				
	ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтотОбъект, ТекИмяФормы, Истина);	         			
	Модифицированность = Истина;
	
	//ТаблицаДанныхСтрокРасшифровкиЯчейки = ТаблицаДанных.СкопироватьКолонки();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	УдалитьСтрокуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПредыдущаяСтрНаСервере()
	ТекущаяСтраница = ТекущаяСтраница - 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущаяСтр(Команда)
	ПредыдущаяСтрНаСервере();
КонецПроцедуры

&НаСервере
Процедура СледующаяСтрНаСервере()
	ТекущаяСтраница = ТекущаяСтраница + 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СледующаяСтр(Команда)
	СледующаяСтрНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	СохранитьДанные();
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	ОткрытьФормуНастройкиСтраниц();
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыФормы.Вставить("Налогоплательщик",         Налогоплательщик);
	ПараметрыФормы.Вставить("НалоговыйКомитет",         НалоговыйКомитет);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, мВыбраннаяФорма, "") + "ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);	

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницу(Команда)
	
	ВыбСтраница = 1;
	
	ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаСтраницы", ЭтаФорма); 
	ПоказатьВводЧисла(ОповещениеВводаЗначений,ВыбСтраница, "Введите номер страницы",5,0);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
&НаСервере
// Процедура очистки формы
//
// параметр: ТекИмяФормы - имя очищаемой формы (=КодФормы)
//           ОчиститьВсе - признак вида очистки формы              
//
Процедура Очистить(ТекИмяФормы,ОчиститьВсе = Ложь) Экспорт
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	// Список ячеек, очищать которые не нужно
	Если ОчиститьВсе Тогда
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодВалюты");
	Иначе
		СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
		СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Первоначальная");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Очередная");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Дополнительная");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Ликвидационная");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ПоУведомлению");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Месяц");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Квартал");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Год");		
		СписокПоказателейНеПодлежащихОчистке.Добавить("НомерУведомления");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаУведомления");		
		СписокПоказателейНеПодлежащихОчистке.Добавить("ВнеКонтракта");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ПоКонтракту");
		СписокПоказателейНеПодлежащихОчистке.Добавить("НомерКонтракта");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаКонтракта");            
		СписокПоказателейНеПодлежащихОчистке.Добавить("Пропорциональный");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Раздельный");
		СписокПоказателейНеПодлежащихОчистке.Добавить("СерияСвидетельства");
		СписокПоказателейНеПодлежащихОчистке.Добавить("НомерСвидетельства");
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодВалюты");		
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодНалоговогоОргана");
	КонецЕсли;
	
	Если ТекИмяФормы = "Форма300" И ОчиститьВсе = Истина Тогда		
		мСтруктураЗначений.Очистить();
		СтруктураРеквизитовФормы.мМетодРасчета = УчетнаяПолитикаСервер.ПолучитьМетодОтнесенияНДСВЗачет(Налогоплательщик, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		СтруктураРеквизитовФормы.УдВес = 0;
	КонецЕсли;
	   		
	Если мСтруктураЗначений <> Неопределено И мСтруктураЗначений.Количество() <> 0 Тогда
		НаимФормы = Сред(ТекИмяФормы,6);
		НоваяСтруктураДляУдаления = Новый Структура;
		Для Каждого Элемент Из мСтруктураЗначений Цикл
			 НоваяСтруктураДляУдаления.Вставить(Элемент.Ключ);
		 КонецЦикла;
		 
		Для Каждого Элемент Из НоваяСтруктураДляУдаления Цикл
			Если Найти(Элемент.Ключ,НаимФормы) <> 0 Тогда
				мСтруктураЗначений.Удалить(Элемент.Ключ);
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОчиститьСтруктуруДанныхИТабличноеПолеФормы(ЭтаФорма, ТекИмяФормы, ОчиститьВсе, СписокПоказателейНеПодлежащихОчистке);
	
	// обновим представление списка структурных единиц
	//Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	//	ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СтруктураРеквизитовФормы.мСписокСтруктурныхЕдиниц);
	//КонецЕсли;
	
	СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_03 = Новый Структура;
	СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_05 = Новый Структура;
	//ЗаполнитьПараметры(ТекИмяФормы);
	
КонецПроцедуры // Очистить()

&НаКлиенте
Процедура ОчиститьРеглОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Форма = ДополнительныеПараметры.Форма;	
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", Форма.КодФормы));
		Вложенность = ДополнительныеПараметры.ОчищатьПриложения;	
		
		ОчиститьРеглОтчетЗавершениеНаСервере(СтрокаФормы.КодФормы, СтрокаФормы.Многострочность, Вложенность)	
	КонецЕсли;		
КонецПроцедуры 	

&НаСервере
Процедура ОчиститьРеглОтчетЗавершениеНаСервере(КодФормы, ПризнакМногострочности, Вложенность) Экспорт		
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, ПризнакМногострочности, Вложенность);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры инициализации отчета и структуры его данных

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;	
		
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
														
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();	
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	      	
	// обход проблемы с обработкой реквизитов ПТД в платформе
	МассивРеквизитовФормы = ЭтотОбъект.ПолучитьРеквизиты();			
	Для Счетчик = 0 По МассивРеквизитовФормы.Количество()-1 Цикл		
		РеквизитФормы = МассивРеквизитовФормы[Счетчик];
		Если РеквизитФормы.ТипЗначения.СодержитТип(Тип("ТабличныйДокумент")) Тогда
			ЭтотОбъект[РеквизитФормы.Имя] = ЭтотОбъект[РеквизитФормы.Имя];	
		КонецЕсли;
	КонецЦикла;		

	мСтруктураЗначений = Новый Структура;
	
	Если СтруктураРеквизитовФормы.Свойство("СформироватьФормуОтчетаАвтоматически") И СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически <> Неопределено Тогда
		
		ЗаполнитьАвтоНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокСтруктурныхЕдиниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");			
	СтруктураРеквизитовФормы.Вставить("НалоговыйКомитет");				
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");		
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");		
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");	
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрг");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);	
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");	
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");		
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");	
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);	
	СтруктураРеквизитовФормы.Вставить("мПериодичность", Параметры.мПериодичность);		
	СтруктураРеквизитовФормы.Вставить("мГод");	
	СтруктураРеквизитовФормы.Вставить("мКвартал");	
	СтруктураРеквизитовФормы.Вставить("мМесяц");		
	
	СтруктураРеквизитовФормы.Вставить("мМаксимальныеНормераПодстрокЯчеек", Новый Соответствие);		
	
	// индивидуальные параметры формы
	СтруктураРеквизитовФормы.Вставить("мПоддержкаРаботыСоСтруктурнымиПодразделениями", Ложь);		
	СтруктураРеквизитовФормы.Вставить("мМетодРасчета");			
	СтруктураРеквизитовФормы.Вставить("мПропорцИРаздел", Ложь);				
	СтруктураРеквизитовФормы.Вставить("УдВес", 0);				
	СтруктураРеквизитовФормы.Вставить("СтруктураИтоговыхПолей300_03", Новый Структура());				
	СтруктураРеквизитовФормы.Вставить("СтруктураИтоговыхПолей300_05", Новый Структура());				
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы)
	ОргСведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(Налогоплательщик, ДатаПодписи);
	//Если организация не указана то не выводим никаких сведений
	Если ОргСведения = 0 Тогда
		Возврат;
	КонецЕсли;

	// Инициализируем переменные
	НаимЮЛПол = ""; // Полное наименование 	
	ИИН_БИН = ""; 	// ИИН_БИН	
	Руководитель = ""; 	// ФИО руководителя				
	КодНалоговогоОргана = ""; // Код налогового органа	
	
	
	// Получаем данные
	ОргСведения.Свойство("БИН_ИИН",   			ИИН_БИН);
	ОргСведения.Свойство("ПолноеНаименование", 	НаимЮЛПол);	
	ОргСведения.Свойство("Руководитель",		Руководитель);	
	
                                         		
	// Производим операции связанные с текущей формой отчетности	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН",ИИН_БИН);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"ОргНазв",НаимЮЛПол);
	// Разбиваем название организации
	НазваниеОрганизацииДляРазбиения = НаимЮЛПол;
	НачПозиция = 1;
	Для Шаг = 1 По 3 Цикл
		ДлинаСтроки = ЭтотОбъект[ТекущееИмяФормы + "ПолеТабличногоДокументаСтраница1"].Области["ОргНазв"+Шаг].ТипЗначения.КвалификаторыСтроки.Длина;
		НазОрганизации = Сред(НазваниеОрганизацииДляРазбиения, НачПозиция, ДлинаСтроки); 
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"ОргНазв"+Шаг,НазОрганизации);
		НачПозиция =НачПозиция + ДлинаСтроки;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Руководитель", Руководитель);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ДатаПодачи", ДатаПодписи);
		
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Налогоплательщик.СерияСвидетельстваПоНДС) Тогда		
		ТекстСообщения = НСтр("ru = 'Серия свидетельства по НДС: %1 содержит недопустимые значения. Она должна содержать только цифры.'");		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Налогоплательщик.СерияСвидетельстваПоНДС);			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Налогоплательщик, "СерияСвидетельстваПоНДС");													 		
	Иначе
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекущееИмяФормы,"СерияСвидетельства",Налогоплательщик.СерияСвидетельстваПоНДС);
	КонецЕсли;
		
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Налогоплательщик.НомерСвидетельстваПоНДС) Тогда		
		ТекстСообщения = НСтр("ru = 'Номер свидетельства по НДС: %1 содержит недопустимые значения. Он должна содержать только цифры.'");		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Налогоплательщик.НомерСвидетельстваПоНДС);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Налогоплательщик, "НомерСвидетельстваПоНДС");
	Иначе
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы,"НомерСвидетельства",Налогоплательщик.НомерСвидетельстваПоНДС);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы, "Пропорциональный", "Х");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы, "Раздельный", "");
	Иначе                                    
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы, "Пропорциональный", "");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы, "Раздельный", "Х");  	
	КонецЕсли;

КонецПроцедуры
	
&НаКлиенте
Процедура ЗаполнитьПанель(ПризнакОсновнойФормы, ПризнакМногострочности)
	
	Элементы.ФормаВыгрузитьВXML.Видимость 		= ПризнакОсновнойФормы; 
	Элементы.ФормаОчиститьВсе.Видимость 		= ПризнакОсновнойФормы;
	Элементы.ГруппаКнопокДействияСоСтрокамиИСтраницами.Видимость = ПризнакМногострочности;
	Элементы.ФормаВыгрузитьВExcel.Видимость 	= ПризнакМногострочности И (КодФормы = "Форма300_07" ИЛИ КодФормы = "Форма300_08");
	Элементы.ФормаПредыдущаяСтр.Видимость 		= ПризнакМногострочности;
	Элементы.ФормаКоличествоСтраниц.Видимость 	= ПризнакМногострочности;
	Элементы.ФормаСледующаяСтр.Видимость 		= ПризнакМногострочности;
	Элементы.ФормаПерейти.Видимость 		= ПризнакМногострочности;
	
КонецПроцедуры //ЗаполнитьПанель()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтчетномПериоде() Экспорт

	СтрПериодОтчета = ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ФП = истина");
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
		СтруктураРеквизитовФормы.мКвартал = Лев(СтрПериодОтчета,1);
		СтруктураРеквизитовФормы.мМесяц = Неопределено;
	Иначе
		СтруктураРеквизитовФормы.мМесяц = Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		СтруктураРеквизитовФормы.мКвартал = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мГод = Лев(Прав(СтрПериодОтчета,7),4);
		
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьПараметры(ТекущееИмяФормы) Экспорт
	
	Форма = РеквизитФормыВЗначение("мСписокФормБезИерархии").Строки.Найти(ТекущееИмяФормы, "КодФормы");
	
	Если Форма.Многострочность = 1 Тогда // заполнение структуры шапки(подвала) для многострочных форм
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН", Налогоплательщик.ИдентификационныйНомер, Ложь);
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Квартал", СтруктураРеквизитовФормы.мКвартал, Ложь);
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год", СтруктураРеквизитовФормы.мГод, Ложь);
		
		Если ТекущееИмяФормы = "Форма300_05" Тогда
			//заполним итоговые поля
			Для Каждого Элемент Из СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_05 Цикл
				РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, Элемент.Ключ, Элемент.Значение, Ложь);
			КонецЦикла;
		КонецЕсли;
		
		Если ТекущееИмяФормы = "Форма300_03" Тогда
			//заполним итоговые поля
			Для Каждого Элемент Из СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_03 Цикл
				РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, Элемент.Ключ, Элемент.Значение, Ложь);
			КонецЦикла;
		КонецЕсли;
		
	Иначе //обычная форма
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год", СтруктураРеквизитовФормы.мГод);
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Квартал", СтруктураРеквизитовФормы.мКвартал);
				
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН", Налогоплательщик.ИдентификационныйНомер);			
		
	КонецЕсли;
	
	Если ТекущееИмяФормы = Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7) Тогда 
		ЗаполнитьВидРасчета("Очередная");
		ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы);	
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, "Форма300", "КодВалюты", "KZT");				
		
КонецПроцедуры	

&НаСервере
//Процедура выполняет выбор процедуры расчета.
//ВыборРасчета выполняется при восстановлении данных, при изменении поля табличного документа
//
//Параметры:    ТекФорма - имя текущей формы
//              Индекс - индекс строки для многострочной формы
//              Показатель - имя ячейки, откуда была вызвана процедура расчета многострочной
//                           формы, без указания номера строки (например, без "__1")
//
Процедура ВыборРасчета(ТекФорма, Индекс = Неопределено, Показатель = Неопределено) Экспорт
	Если ТекФорма = "Форма300" Тогда
		Форма300РасчетНаСервере(Индекс, Показатель);
	ИначеЕсли ТекФорма = "Форма300_01" Тогда
		Форма300_01РасчетНаСервере(Индекс, Показатель);
	ИначеЕсли ТекФорма = "Форма300_02" Тогда
		Форма300_02РасчетНаСервере(Индекс, Показатель);	
	ИначеЕсли ТекФорма = "Форма300_03" Тогда
		Форма300_03РасчетНаСервере(Индекс, Показатель);	
	ИначеЕсли ТекФорма = "Форма300_04" Тогда
		Форма300_04РасчетНаСервере(Индекс, Показатель);		
	ИначеЕсли ТекФорма = "Форма300_05" Тогда
		Форма300_05РасчетНаСервере(Индекс, Показатель);			
	ИначеЕсли ТекФорма = "Форма300_06" Тогда
		Форма300_06РасчетНаСервере(Индекс, Показатель);				
	КонецЕсли;		
КонецПроцедуры // ВыборРасчета()

&НаСервере
Процедура РазделыОтчетаПриАктивизацииСтрокиНаСервере(НовыйКодФормы, НовыйПризнакМногострочность)		
	
	//проверим, что стояли не на основной, итоги передаем только когда переходим из доп.форм
	ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	Если ТекФорма <> Неопределено И Не ТекФорма.ПризнакОсновной Тогда
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы, Истина);		
	КонецЕсли;
	// передаем данные в структуру
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	
			
	// установим новые значения реквизитам формы
	ЭтаФорма.КодФормы = НовыйКодФормы;	
	Если  НовыйПризнакМногострочность Тогда
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидРасчета(ВидРасчета)
	ТекИмяФормы = "Форма300";
	//сначала очищаем поля, если были проставлены уже отметки
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"Первоначальная","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"Очередная","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"Дополнительная","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"ПоУведомлению","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"Ликвидационная","");
	
	Если ВидРасчета = "Первоначальная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"Первоначальная","Х");
	ИначеЕсли ВидРасчета = "Очередная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"Очередная","Х");		
	ИначеЕсли ВидРасчета = "Дополнительная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"Дополнительная","Х");		
	ИначеЕсли ВидРасчета = "ПоУведомлению" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"ПоУведомлению","Х");		
	ИначеЕсли ВидРасчета = "Ликвидационная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"Ликвидационная","Х");		
	КонецЕсли;
	
	Если ВидРасчета = "ПоУведомлению" Тогда
		Форма300ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Ложь;
		Форма300ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита = Ложь;
	Иначе
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"НомерУведомления","");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"ДатаУведомления","");
		
		Форма300ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Истина;
		Форма300ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита = Истина;
	КонецЕсли;
	
	Модифированность = Истина;
	
КонецПроцедуры // ЗаполнитьВидРасчета()

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
            
    Перем СтруктураГруппы; 
    
    Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
        ТекстСообщения = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");            
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);                
                
        Возврат Ложь;
        
    КонецЕсли;
            
    СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
    СтруктураРеквизитовФормы.мРежимПечати = Истина;
    
    Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
        ВыборРасчета(КодФормы, Неопределено, Неопределено);
    КонецЕсли; 

    РегламентированнаяОтчетность.СформироватьСписокПечатаемыхЛистов(ЭтаФорма);
                 
        
    Возврат Истина;
    
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуНастройкиСтраниц()
	
// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРаздел = Элементы.РазделыОтчета.ТекущиеДанные.Страницы;		
	КонецЕсли;
	
	Для Каждого ТекФорма ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",ТекФорма.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			ТекущаяСтрокаСписка.Выгружать               = ТекФорма.Выгружать;
			ТекущаяСтрокаСписка.ПоказатьСтраницу        = ТекФорма.ПоказатьСтраницу;			
			ТекущаяСтрокаСписка.АвтополучениеИтогов     = ТекФорма.АвтополучениеИтогов;  
			ТекущаяСтрокаСписка.АвтоЗаполнение          = ТекФорма.АвтоЗаполнение;  
		КонецЕсли;		   
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокФормДерева",СписокФормДерева);
	
	ДопПараметры = Новый Структура("ТекущийРаздел",ТекущийРаздел);
	
	ОповещениеПослеЗакрытияФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастройкиСтраниц",ЭтотОбъект,ДопПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.НастройкиОтчета",ПараметрыФормы, ЭтаФорма,,,,ОповещениеПослеЗакрытияФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьнаСервере();
	РегламентированнаяОтчетность.СохранитьОтчет(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()	
	РегламентированнаяОтчетность.ВосстановитьСохраненныйОтчет(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиСтраниц(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьДанныеФормы(РезультатЗакрытия, СписокФормДерева);
	
	Модифицированность = Истина;
	
	//обновим мСписокФормБезИерархии
	Для Каждого СтрокаФормы ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",СтрокаФормы.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			СтрокаФормы.Выгружать               = ТекущаяСтрокаСписка.Выгружать;
			СтрокаФормы.ПоказатьСтраницу        = ТекущаяСтрокаСписка.ПоказатьСтраницу;			
			СтрокаФормы.АвтополучениеИтогов     = ТекущаяСтрокаСписка.АвтополучениеИтогов;  
			СтрокаФормы.АвтоЗаполнение          = ТекущаяСтрокаСписка.АвтоЗаполнение;  
		КонецЕсли;			
	КонецЦикла; 	

	Если ДополнительныеПараметры.Свойство("ТекущийРаздел") И НЕ ДополнительныеПараметры.ТекущийРаздел = Неопределено Тогда  		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(РазделыОтчета, Новый Структура("СписокФормДереваСтраницы",ДополнительныеПараметры.ТекущийРаздел));
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;			
	КонецЕсли;  	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыФормыНаКлиенте(Параметры) Экспорт
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	ЗаполнитьСведенияОбОтчетномПериоде();
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);		
	КонецЦикла	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормы(ТекФорма, Параметры)
	
	ЗаполнитьЗначенияСвойств(ТекФорма.СтруктураРеквизитовФормы, Параметры);
		
	ТекФорма.Налогоплательщик        						 = Параметры.Налогоплательщик;	
	ТекФорма.мСписокСтруктурныхЕдиниц						 = Параметры.мСписокСтруктурныхЕдиниц;
	ТекФорма.ПредставлениеСпискаСтруктурныхЕдиниц			 = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(Параметры.мСписокСтруктурныхЕдиниц);
	
	//индивидуальные значения
	//при смене налогоплательщика нужно получать метод расчета
	ТекФорма.СтруктураРеквизитовФормы.мМетодРасчета 		= ПолучитьМетодОтнесенияНДСВЗачет(ТекФорма.Налогоплательщик, ТекФорма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	// Заполнить НалоговыйКомитет. 
	Если Параметры.Свойство("НалоговыйКомитет") Тогда
		ТекФорма.НалоговыйКомитет = Параметры.НалоговыйКомитет;
	Иначе
		ТекФорма.НалоговыйКомитет = Неопределено;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМетодОтнесенияНДСВЗачет(Налогоплательщик, Дата)
	Возврат УчетнаяПолитикаСервер.ПолучитьМетодОтнесенияНДСВЗачет(Налогоплательщик, Дата);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции выгрузки данных отчета в XML

&НаСервере
//Выгружает данные отчета в формат XML
// Параметры:
//   ИмяФайла - файл, куда будет идти запись текста XML.
//   Объект - объект регламентированного отчета.
//
Функция ВыгрузитьОтчетВXMLДляСОНО300(Объект, ВыдаватьСообщение = Истина) Экспорт
   	Префикс = Прав(Объект.мВыбраннаяФорма,7);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("tmp");
	
	// запишем общие атрибуты (code, version) и создадим элемент form
	Запись = Новый ЗаписьXML;		
	Запись.ОткрытьФайл(ИмяВременногоФайла,"UTF-8");
	Запись.ЗаписатьОбъявлениеXML();
	
	// Запишем корневой элемент
	Запись.ЗаписатьНачалоЭлемента("fno");
	
	МакетВыгрузки = Объект.РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("ВыгрузкаВXML");
    МногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, ЭтаФорма.КодФормы);
	
	ТаблОбщиеРеквизиты = Новый ТаблицаЗначений;
	ТаблОбщиеРеквизиты.Колонки.Добавить("ИмяАтрибута");
	ТаблОбщиеРеквизиты.Колонки.Добавить("ЗначениеАтрибута");
	
	ОбластьОбщихРеквизитов = МакетВыгрузки.Область("ОбщиеРеквизиты" + Префикс);
	Для Ном = ОбластьОбщихРеквизитов.Верх По ОбластьОбщихРеквизитов.Низ Цикл
		Строка = ТаблОбщиеРеквизиты.Добавить();
		Строка.ИмяАтрибута 		  = СокрП(МакетВыгрузки.Область(Ном, 1).Текст);
		Строка.ЗначениеАтрибута   = СокрП(МакетВыгрузки.Область(Ном, 2).Текст);		
	КонецЦикла;                           	
	
	// Запишем атрибуты корневого элемента
	Для Каждого Строка Из ТаблОбщиеРеквизиты Цикл
		Запись.ЗаписатьАтрибут(Строка.ИмяАтрибута,Строка.ЗначениеАтрибута);			  
	КонецЦикла;
	
	// создадим таблицу для выгрузки
	ТаблицаВыгрузки = Новый ТаблицаЗначений;
	ТаблицаВыгрузки.Колонки.Добавить("Форма");
	ТаблицаВыгрузки.Колонки.Добавить("Страница");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяАтрибута");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяЯчейки");
	ТаблицаВыгрузки.Колонки.Добавить("КоличествоROW");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяФормы");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяЛиста");
	ТаблицаВыгрузки.Колонки.Добавить("Отображение");
	ТаблицаВыгрузки.Колонки.Добавить("ВыгружатьНулевыеЗначения");
	
	ТаблицаВыгрузки.Колонки.Добавить("КоличествоПодстрок");
	
	ТаблицаВыгрузки.Колонки.Добавить("КодФормы");
	ТаблицаВыгрузки.Колонки.Добавить("Выгружать");
	ТаблицаВыгрузки.Колонки.Добавить("Многострочность");
	ТаблицаВыгрузки.Колонки.Добавить("ЗаголовокФормы"); 
	ТаблицаВыгрузки.Колонки.Добавить("КоличествоНаЛисте");    
	ТаблицаВыгрузки.Колонки.Добавить("Значение");    
	
	ОбластьВыгрузки = МакетВыгрузки.Область("Выгрузка" + Префикс);
	СписокФормБезИерархии = РеквизитФормыВЗначение("мСписокФормБезИерархии");
	ТекущееИмяФормы = Неопределено;
	Для Ном = ОбластьВыгрузки.Верх По ОбластьВыгрузки.Низ Цикл
		Строка = ТаблицаВыгрузки.Добавить();
		Строка.Форма 	       			= СокрП(МакетВыгрузки.Область(Ном, 1).Текст);
		Строка.Страница        			= СокрП(МакетВыгрузки.Область(Ном, 2).Текст);		
		Строка.ИмяАтрибута     			= СокрП(МакетВыгрузки.Область(Ном, 3).Текст);		
		Строка.ИмяЯчейки      	 		= СокрП(МакетВыгрузки.Область(Ном, 4).Текст);		
		Строка.КоличествоROW   			= СокрП(МакетВыгрузки.Область(Ном, 5).Текст);		
		Строка.ИмяФормы        			= СокрП(МакетВыгрузки.Область(Ном, 6).Текст);		
		Строка.ИмяЛиста        			= СокрП(МакетВыгрузки.Область(Ном, 7).Текст);		
		Строка.Отображение     			= СокрП(МакетВыгрузки.Область(Ном, 8).Текст);		
		
		Строка.ВыгружатьНулевыеЗначения  = ?(СокрП(МакетВыгрузки.Область(Ном, 9).Текст) = "1", Истина, Ложь);		
		МаксимальныйНормерПодстрокиЯчееки = 2;
		Если СокрП(МакетВыгрузки.Область(Ном, 10).Текст) = "x" Тогда
			Если СтруктураРеквизитовФормы.Свойство("мМаксимальныеНормераПодстрокЯчеек") Тогда
				ИмяАтрибута = СтрЗаменить(Строка.ИмяАтрибута, "_n_1","");
				ИмяАтрибута = СтрЗаменить(ИмяАтрибута, "_n_2","");
				МаксимальныйНормерПодстрокиЯчееки = СтруктураРеквизитовФормы.мМаксимальныеНормераПодстрокЯчеек.Получить(ИмяАтрибута);
				Если МаксимальныйНормерПодстрокиЯчееки = Неопределено или МаксимальныйНормерПодстрокиЯчееки < 5 Тогда
					МаксимальныйНормерПодстрокиЯчееки = 5;
				КонецЕсли;	
			КонецЕсли;	
			Строка.КоличествоПодстрок =  МаксимальныйНормерПодстрокиЯчееки;
		Иначе	
			Строка.КоличествоПодстрок =  "";
		КонецЕсли;	
		НовоеИмяФормы = Строка.ИмяФормы;
		Если НовоеИмяФормы <> ТекущееИмяФормы Тогда
			Форма = СписокФормБезИерархии.Строки.Найти(Строка.ИмяФормы, "ИмяФормы");
		КонецЕсли;
		
		Если Форма <> Неопределено Тогда
			Строка.КодФормы  		 = Форма.КодФормы;
			Строка.Выгружать  		 = Форма.Выгружать;
			Строка.Многострочность   = Форма.Многострочность;
			Строка.ЗаголовокФормы    = Форма.ЗаголовокФормы;
			Строка.КоличествоНаЛисте = Форма.КоличествоНаЛисте;
			Строка.Значение  		 = Форма.Значение;
			
		КонецЕсли;
		ТекущееИмяФормы = Строка.ИмяФормы;
	КонецЦикла;                           	
	
	// выгрузка в XML 
	КоличествоСтрокВТаблице = ТаблицаВыгрузки.Количество();
	НомерСтроки = 0;
	
	ТекущаяФорма = Неопределено;
	ТекущаяИмяСтраницы = Неопределено;
	
	Пока Истина Цикл
		Если НомерСтроки >= КоличествоСтрокВТаблице Тогда
			Прервать;
		КонецЕсли; 
		ВыгрузитьСтрокуВXML300(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки, ТекущаяФорма, ТекущаяИмяСтраницы, МногострочнаяСтруктура);			
		НомерСтроки = НомерСтроки + 1;                                                                                      		
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();		// </form> 
	Запись.ЗаписатьКонецЭлемента();  // fno
	Запись.Закрыть();
	
	//////////////////////////////////////////////////////////////////////////////
	// Обработка XML файла после его записи.
	
	// Прочитать текст XML-файла.
	ТекстДок = Новый ТекстовыйДокумент;
    ТекстДок.Прочитать(ИмяВременногоФайла,"windows-1251");
	
	// Удалить BOM из текста, т.к. в СОНО используется UTF-8 без BOM.
	Строка = ТекстДок.ПолучитьСтроку(1);
    ТекстДок.ЗаменитьСтроку(1,Прав(Строка,СтрДлина(Строка)-3));
	
	// Записать результат обработки XML-файла.
	ВыбФайл = Новый Файл(ИмяВременногоФайла);
    ТекстДок.Записать(ВыбФайл.Путь+ВыбФайл.ИмяБезРасширения+ВыбФайл.Расширение,"windows-1251");
	
	//////////////////////////////////////////////////////////////////////////////
	// Сохранить результат.	
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), ЭтаФорма.УникальныйИдентификатор);
	Если ВыдаватьСообщение Тогда    		
		//выдаем пользователю сообщение о конце выгрузки
		РегламентированнаяОтчетностьКлиентСервер.ВыдатьОтветПриВыгрузке();
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат АдресХранилища
КонецФункции // ВыгрузкаОтчетаВXMLДляСОНО()

&НаСервере
// Формирует построчно структуру XML файла из макета "ВыгрузкаВXML"
//
Процедура ВыгрузитьСтрокуВXML300(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки, ТекущаяФорма = Неопределено, ТекущаяИмяСтраницы = Неопределено, МногострочнаяСтруктура)
	СтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки);
	НоваяФорма = СтрокаВыгрузки.Форма; 
	НоваяСтраница = СтрокаВыгрузки.Страница; 
	
	Если НЕ НоваяФорма = ТекущаяФорма Тогда		
		Если НЕ ТекущаяФорма = Неопределено Тогда
			Запись.ЗаписатьКонецЭлемента();			// </form>
		КонецЕсли;
		Запись.ЗаписатьНачалоЭлемента("form");		
		Запись.ЗаписатьАтрибут("name",СтрокаВыгрузки.Форма);
		
		МногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, НоваяФорма); 
	КонецЕсли;                                       	
	
	Если СтрокаВыгрузки.Многострочность <> Неопределено И СтрокаВыгрузки.Многострочность = 1 Тогда 
		ВыгрузитьМногострочнуюФорму300(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки, МногострочнаяСтруктура);
	// проверим многострочное ли значение
	ИначеЕсли ЗначениеЗаполнено(СтрокаВыгрузки.КоличествоПодстрок) Тогда  // для обычных форм
		КоличествоПодстрок = Число(СтрокаВыгрузки.КоличествоПодстрок);
		ТаблицаМногострочныхТегов = ТаблицаВыгрузки.СкопироватьКолонки();
		Для Н = 1 По КоличествоПодстрок Цикл 				
			СтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки);
			НоваяСтрока = ТаблицаМногострочныхТегов.Добавить();			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыгрузки);
			Если СтрНайти(НоваяСтрока.ИмяАтрибута, "300_06_") = 0 Тогда
				НоваяСтрока.ИмяАтрибута = СтрЗаменить(НоваяСтрока.ИмяАтрибута, "n", Формат(Н,"ЧЦ=2; ЧВН="));
			Иначе
				НоваяСтрока.ИмяАтрибута = СтрЗаменить(НоваяСтрока.ИмяАтрибута, "n", Н);
			КонецЕсли;	
			НоваяСтрока.ИмяЯчейки	= СтрЗаменить(НоваяСтрока.ИмяЯчейки	 , "n", Н);
		КонецЦикла;	
		Для Каждого МногСтрока Из ТаблицаМногострочныхТегов Цикл
			ЗаписатьЗначениеЭлемента300(Запись, МногСтрока,,МногострочнаяСтруктура);	
		КонецЦикла;    			
	ИначеЕсли ЗначениеЗаполнено(СтрокаВыгрузки.КоличествоROW) И СтрокаВыгрузки.КоличествоROW <> "0" Тогда  // для обычных форм
		// если в обычной форме встретилась многострочность 
		КоличествоПовторений = Число(СтрокаВыгрузки.КоличествоROW);
		Для Н = 1 По КоличествоПовторений Цикл 				
			Запись.ЗаписатьНачалоЭлемента("row");
			СтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки);
			Если Н = 1 Тогда
				ТаблицаМногострочныхТегов = ТаблицаВыгрузки.СкопироватьКолонки();
				НоваяСтрока = ТаблицаМногострочныхТегов.Добавить();			
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыгрузки);
				// Проверим многострочная ли следующая строка
				СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
				Пока ЗначениеЗаполнено(СледСтрокаВыгрузки.КоличествоROW) И СледСтрокаВыгрузки.КоличествоROW <> "0" Цикл
					НомерСтроки = НомерСтроки+1;
					НоваяСтрока = ТаблицаМногострочныхТегов.Добавить();			
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СледСтрокаВыгрузки);
					СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
				КонецЦикла;   				
			КонецЕсли;
			
			Для Каждого МногСтрока Из ТаблицаМногострочныхТегов Цикл
				ЗаписатьЗначениеЭлемента300(Запись, МногСтрока,,МногострочнаяСтруктура);	
			КонецЦикла;    			
			Запись.ЗаписатьКонецЭлемента();			// </row>
		КонецЦикла;			
	Иначе
		ЗаписатьЗначениеЭлемента300(Запись, СтрокаВыгрузки,,МногострочнаяСтруктура);
	КонецЕсли;	      	
	
	ТекущаяФорма 		= НоваяФорма;
	ТекущаяИмяСтраницы 	= НоваяСтраница;
	
КонецПроцедуры // ВыгрузитьСтрокуВXML300()

&НаСервере
// Выгружает многострочные формы в XML
//
Процедура ВыгрузитьМногострочнуюФорму300(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки, МногострочнаяСтруктура)
	
	Перем СтруктураГруппы;
	
	СтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки);	
	
	Если СтрокаВыгрузки.КоличествоНаЛисте = 1 Тогда  // форма многостраничная
		
		// для многострочной = одностраничной
		
		НачальнаяСтрока = НомерСтроки;
		КонечнаяСтрока = 0;
		
		ТекущаяФорма = СтрокаВыгрузки.Форма;
		СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
		НоваяФорма = СледСтрокаВыгрузки.Форма;
		Пока НоваяФорма = ТекущаяФорма Цикл
			НомерСтроки = НомерСтроки+1;
			
			ТекущаяФорма = СледСтрокаВыгрузки.Форма;
			Если НомерСтроки+1 < КоличествоСтрокВТаблице Тогда
				СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);						
				НоваяФорма = СледСтрокаВыгрузки.Форма;
				КонечнаяСтрока = НомерСтроки;
			Иначе
				НоваяФорма = Неопределено;
				КонечнаяСтрока = НомерСтроки;
			КонецЕсли;
		КонецЦикла;
        		
		МногСтруктура =  РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, СтрокаВыгрузки.КодФормы);
		
		КоличествоЗаписей = 0;
		
		Для Каждого КлючИЗначение Из МногСтруктура Цикл
			ТаблицаСтрокГруппы = КлючИЗначение.Значение.Строки;
			КоличествоЗаписей =  ТаблицаСтрокГруппы.Количество();
			Прервать;
		КонецЦикла;
		
		ВсегоСтр = 0;
		
		Если КоличествоЗаписей <= 1 Тогда 
			ВсегоСтр = 0;
		Иначе 
			ВсегоСтр = КоличествоЗаписей - 1;	
		КонецЕсли;
		
		ОдинШагНазад = Истина;
		Строка = 0; 
		ОдинШаг = Истина;
			
		Для ШагФорм = 0 По ВсегоСтр Цикл 
			
			Для Шаг = НачальнаяСтрока По КонечнаяСтрока Цикл  
				
				Если Шаг = КонечнаяСтрока Тогда 
					Прервать;
				КонецЕсли;
				
				СтрокаВыгрузкиТек = ТаблицаВыгрузки.Получить(Шаг);
				ТекущаяФорма 	  = СтрокаВыгрузкиТек.Форма; 
				ТекущаяСтраница   = СтрокаВыгрузкиТек.Страница;
				
				СтрокаВыгрузкиСлед = ТаблицаВыгрузки.Получить(Шаг + Строка);
				
				Если ОдинШаг Тогда 
					Строка = 1; 
					ОдинШаг = Ложь;
				КонецЕсли;

				НоваяФорма 		   = СтрокаВыгрузкиСлед.Форма; 
				НоваяСтраница      = СтрокаВыгрузкиСлед.Страница; 			
											
				Если НЕ НоваяФорма = ТекущаяФорма Тогда		
					Запись.ЗаписатьКонецЭлемента();			// </form>
					Запись.ЗаписатьНачалоЭлемента("form");					
					Запись.ЗаписатьАтрибут("name",СтрокаВыгрузкиСлед.Форма);
				КонецЕсли;                                       	
				НомерЛиста = Новый Структура;
				НомерЛиста.Вставить("НомерЛиста",ШагФорм);
				ЗаписатьЗначениеЭлемента300(Запись, СтрокаВыгрузкиСлед, НомерЛиста,МногострочнаяСтруктура);
			КонецЦикла;
			Если ОдинШагНазад Тогда 
				НачальнаяСтрока = НачальнаяСтрока - 1;
				ОдинШагНазад = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	Иначе // форма многострочная
		
		// Определяем одинаковое ли количество строк на всех страницах формы и создаем таблицу значений
		// например, в форме 300.07 и 300.08 одинаковое количество
		// а в других может быть неодинаковое - и там другой механизм выгрузки по строкам
		ОдинаковоеКоличествоСтрок = Истина;
		КоличествоСтрокНаЛисте = 0;
		
		ТаблицаМногострочнойФормы = ТаблицаВыгрузки.СкопироватьКолонки();
		НоваяСтрока = ТаблицаМногострочнойФормы.Добавить();			
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыгрузки);
		
		ТекущаяФорма = СтрокаВыгрузки.Форма;
		СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
		НоваяФорма = СледСтрокаВыгрузки.Форма;
		Пока НоваяФорма = ТекущаяФорма Цикл
			НомерСтроки = НомерСтроки+1;
			НоваяСтрока = ТаблицаМногострочнойФормы.Добавить();			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СледСтрокаВыгрузки);
			Если ЗначениеЗаполнено(СледСтрокаВыгрузки.КоличествоROW) И СледСтрокаВыгрузки.КоличествоROW <> "0" Тогда
				ТекКоличествоСтрокНаЛисте = Число(СледСтрокаВыгрузки.КоличествоROW);
				Если КоличествоСтрокНаЛисте <> 0 И КоличествоСтрокНаЛисте <> ТекКоличествоСтрокНаЛисте Тогда
					 ОдинаковоеКоличествоСтрок = Ложь;
				КонецЕсли;
				КоличествоСтрокНаЛисте = Число(СледСтрокаВыгрузки.КоличествоROW);
			КонецЕсли;
			ТекущаяФорма = СледСтрокаВыгрузки.Форма;
			Если НомерСтроки+1 < КоличествоСтрокВТаблице Тогда
				СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);						
				НоваяФорма = СледСтрокаВыгрузки.Форма;
			Иначе
				НоваяФорма = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		//Выгружаем многострочные данные, у которых одинаковое количество строк
		//Если ОдинаковоеКоличествоСтрок Тогда //как для 300.07, 300.08 и большинства других многострочных
			
			// Определим количество <sheetGroup>						
			МногСтруктура =  РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, СтрокаВыгрузки.КодФормы);
			КоличествоЗаписей = 0;
			Для Каждого КлючИЗначение Из МногСтруктура Цикл
				ТаблицаСтрокГруппы = КлючИЗначение.Значение.Строки;
				КоличествоЗаписей =  ТаблицаСтрокГруппы.Количество();
				Прервать;
			КонецЦикла;
		
			ВсегоСтр = 1;
			
			Если КоличествоЗаписей = 0 Тогда // форма не заполнена, то выгружаем пустые теги
				ВсегоСтр = 1;
			КонецЕсли;
			
			Для КолСтр = 1 По ВсегоСтр Цикл // sheetgroup
				ТекущееИмяСтраницы = СтрокаВыгрузки.Страница;
				Для Ном = 0 По ТаблицаМногострочнойФормы.Количество()-1 Цикл 
					СтрокаТаблицы = ТаблицаМногострочнойФормы[Ном];				
					НоваяСтраница = СтрокаТаблицы.Страница;
					Если Не ТекущееИмяСтраницы = НоваяСтраница Тогда
						Запись.ЗаписатьКонецЭлемента();
						Запись.ЗаписатьНачалоЭлемента("sheet");		
						Запись.ЗаписатьАтрибут("name",СтрокаТаблицы.Страница);
					КонецЕсли;	
					// если перешли на новую страницу
					Если ЗначениеЗаполнено(СтрокаТаблицы.Отображение) И КолСтр <> Число(СтрокаТаблицы.Отображение) Тогда
						Продолжить;
					КонецЕсли;
					// проверим элемент это или нет
					Если Лев(СтрокаТаблицы.ИмяАтрибута,1) = "#" Тогда
						Атрибут = Сред(СтрокаТаблицы.ИмяАтрибута,2);
						// опеределим начальный или конечный элемент
						Если Лев(Атрибут,1) = "/" Тогда // это конечный элемент							
							Запись.ЗаписатьКонецЭлемента();
						Иначе // это начальный
							Запись.ЗаписатьНачалоЭлемента(Атрибут);
						КонецЕсли;						
					ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.КоличествоROW) И СтрокаТаблицы.КоличествоROW <> "0" Тогда
						
						Если ТекущаяФорма = "form_300_05_001" Тогда
							КоличествоПовторений = МногСтруктура.ЛистB.Строки.Количество();
						Иначе	
							КоличествоПовторений = МногСтруктура.ЛистA.Строки.Количество();
						КонецЕсли;	
						
						Для Н = 1 По КоличествоПовторений Цикл // ТаблицаМногострочнойФормы.Количество() Цикл 
							Запись.ЗаписатьНачалоЭлемента("row");							
							Если Н = 1 Тогда
								ТаблицаМногострочныхТегов = ТаблицаМногострочнойФормы.СкопироватьКолонки();
								НоваяСтрока = ТаблицаМногострочныхТегов.Добавить();			
								ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
								
								// Проверим многострочная ли следующая строка
								СледСтрокаВыгрузки = ТаблицаМногострочнойФормы.Получить(Ном+1);
								Пока ЗначениеЗаполнено(СледСтрокаВыгрузки.КоличествоROW) И СледСтрокаВыгрузки.КоличествоROW <> "0" Цикл
									Ном = Ном+1;
									НоваяСтрока = ТаблицаМногострочныхТегов.Добавить();			
									ЗаполнитьЗначенияСвойств(НоваяСтрока, СледСтрокаВыгрузки);
									Если Ном + 1 = ТаблицаМногострочнойФормы.Количество() Тогда
										Прервать;
									КонецЕсли;
									СледСтрокаВыгрузки = ТаблицаМногострочнойФормы.Получить(Ном+1);
								КонецЦикла;   				
							КонецЕсли;
							Для Каждого МногСтрока Из ТаблицаМногострочныхТегов Цикл
								СтруктураПараметров = Новый Структура;
								СтруктураПараметров.Вставить("КоличествоГруппСтраниц", КолСтр);
								СтруктураПараметров.Вставить("НомерЗаписи", Н);
								ЗаписатьЗначениеЭлемента300(Запись, МногСтрока, СтруктураПараметров, МногСтруктура);	
							КонецЦикла;    			
												
							Запись.ЗаписатьКонецЭлемента();			// </row>
						КонецЦикла;	
					Иначе			
						СтруктураПараметров = Новый Структура;
						СтруктураПараметров.Вставить("КоличествоГруппСтраниц", КолСтр);
						ЗаписатьЗначениеЭлемента300(Запись, СтрокаТаблицы, СтруктураПараметров, МногСтруктура);					
					КонецЕсли;				 
					СтрокаТаблицы = ТаблицаМногострочнойФормы[Ном];				
					ТекущееИмяСтраницы = СтрокаТаблицы.Страница;
				КонецЦикла; 
			КонецЦикла; 				
		
	КонецЕсли;	
	
КонецПроцедуры // ВыгрузитьМногострочнуюФорму300()

&НаСервере
// Записываем значение в поле field из структуры хранения данных
//
Процедура ЗаписатьЗначениеЭлемента300(Запись, СтрокаВыгрузки, СтруктураПараметров = Неопределено, МногСтруктура)
	
	Запись.ЗаписатьНачалоЭлемента("field");
	Запись.ЗаписатьАтрибут("name",СтрокаВыгрузки.ИмяАтрибута);
	// Выгрузим значение ячейки, если оно есть в форме
	ИмяЯчейки = СтрокаВыгрузки.ИмяЯчейки;
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		//получаем и записываем значение из отчета		
		Если СтрокаВыгрузки.Выгружать = 1 Тогда
			Если СтрокаВыгрузки.Многострочность Тогда
				// определим имя Листа по имени страницы
				ИмяЛиста = СтрокаВыгрузки.ИмяЛиста;
				СтруктураГруппы = Неопределено;				
				Если ЗначениеЗаполнено(ИмяЛиста) И МногСтруктура.Свойство(ИмяЛиста) Тогда            					
					МногСтруктура.Свойство(ИмяЛиста,СтруктураГруппы);				
				Иначе					
					ТекстСообщения = НСтр("ru = '%1:Не заполнено ""Имя листа"" или ""Имя листа"" указано неверно для ячейки %2 в макете для выгрузки значения в XML!'");								
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаВыгрузки.КодФормы, ИмяЯчейки);			
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
				КонецЕсли;
					
				Если ИмяЯчейки = "НомерСтраницы" Тогда
					КолСтр = Неопределено;
					СтруктураПараметров.Свойство("КоличествоГруппСтраниц", КолСтр);
					Запись.ЗаписатьТекст(XMLСтрока(КолСтр));
				// заполнения многостраничных данных	
				ИначеЕсли СтрокаВыгрузки.КоличествоНаЛисте = 1 Тогда          
					Если СтруктураГруппы <> Неопределено Тогда
						 НомерЛиста = СтруктураПараметров.НомерЛиста;
						 СтрокаЗначений = СтруктураГруппы.Строки[НомерЛиста];
						 Попытка
							 Строка = СтрокаЗначений[ИмяЯчейки];
						 Исключение
							 Строка = Неопределено;
						 КонецПопытки;
						 Если Строка <> Неопределено Тогда
							 Значение = Строка;
							 Значение = ПривестиЗначениеКФорматуСОНО300(Значение); //СтрокаФорматов);
				    		 Запись.ЗаписатьТекст(XMLСтрока(Значение));
						 КонецЕсли;
					 КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(СтрокаВыгрузки.КоличествоROW) И СтрокаВыгрузки.КоличествоROW <> "0" Тогда  // многострочная часть row
					КоличествоНаЛисте = Число(СтрокаВыгрузки.КоличествоROW);
					НомерЗаписиНаЛисте = Неопределено;
					СтруктураПараметров.Свойство("НомерЗаписи", НомерЗаписиНаЛисте);
					КолСтр = Неопределено;
					СтруктураПараметров.Свойство("КоличествоГруппСтраниц", КолСтр);										
					Если СтруктураГруппы <> Неопределено Тогда
						 ТаблицаСтрокГруппы = СтруктураГруппы.Строки;						 					
						 // рассчитаем индекс строки и проверим есть ли такая строка в таблице данных
						 ИндексСтроки = НомерЗаписиНаЛисте + (КолСтр-1)* КоличествоНаЛисте - 1;
						 Если ИндексСтроки < ТаблицаСтрокГруппы.Количество() Тогда  // строк в таблице может быть меньше, чем выгружается в XML
							 Строка = ТаблицаСтрокГруппы.Получить(ИндексСтроки);
							 Если Строка <> Неопределено Тогда // найдена строка для выгрузки значения
								 Если ТаблицаСтрокГруппы.Колонки.Найти(ИмяЯчейки) <> Неопределено Тогда 
									 Значение = Строка[ИмяЯчейки];
									 // для числовых ячеек будем выгружать 0. Так как это обычно требуется в ФЛК суммовых полей
									 Значение = ПривестиЗначениеКФорматуСОНО300(Значение, СтрокаВыгрузки.ВыгружатьНулевыеЗначения); 
					    		 	 Запись.ЗаписатьТекст(XMLСтрока(Значение));
								 КонецЕсли;
							 КонецЕсли;
						 КонецЕсли;
					КонецЕсли;
				Иначе // шапка или подвал
					Если СтруктураГруппы <> Неопределено Тогда
						 ОбщиеЭлементыГруппы = СтруктураГруппы.ШапкаИПодвал;
						 Строка = ОбщиеЭлементыГруппы.Найти(ИмяЯчейки,"ИмяОбласти");
						 Если Строка <> Неопределено Тогда
							 Значение = Строка.Значение;
							 Значение = ПривестиЗначениеКФорматуСОНО300(Значение); //СтрокаФорматов);
				    		 Запись.ЗаписатьТекст(XMLСтрока(Значение));
						 Иначе
							 ТекстСообщения = НСтр("ru = 'Не найден в структуре хранения данных показатель %1 для формы %2'");								
							 ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяЯчейки , СтрокаВыгрузки.Форма);			
							 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
							 
							 Значение = "";
						 КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТаблицаДанных = СтрокаВыгрузки.Значение;
				СтрокаОбласти = ТаблицаДанных.Найти(ИмяЯчейки,"ИмяОбласти");
				Если СтрокаОбласти <> Неопределено Тогда
					Значение = СтрокаОбласти.Значение;
					Значение = ПривестиЗначениеКФорматуСОНО300(Значение); //СтрокаФорматов);
				    Запись.ЗаписатьТекст(XMLСтрока(Значение));
				Иначе					
					ТекстСообщения = НСтр("ru = 'Не найдена ячейка %1  для выгрузки значения в XML'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяЯчейки);			
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	Запись.ЗаписатьКонецЭлемента();			// </field>

КонецПроцедуры // ЗаписатьЗначениеЭлемента300()

&НаСервере
//Приводит значение к нужному формату для выгрузки в формате XML
//
Функция ПривестиЗначениеКФорматуСОНО300(Значение, ВыгружатьНулевыеЗначения = Ложь) 
	
	Если Врег(Значение) = "Х" ИЛИ Врег(Значение) = "X" Тогда
		Значение = Истина;
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Если Значение = Дата('00010101') Тогда
			Значение = "";
		Иначе
			Значение = Лев(Значение,10);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") И Значение = 0 И НЕ ВыгружатьНулевыеЗначения Тогда
		Значение = "";
	ИначеЕсли Значение = Неопределено И ВыгружатьНулевыеЗначения Тогда	
		Значение = 0;
	КонецЕсли;
	
	Возврат Значение;	
	
КонецФункции // ПривестиЗначениеКФорматуСОНО300()

&НаСервере
Функция ВыгрузитьВXMLНаСервере(ВыдаватьСообщение = Ложь)
		
	Возврат ВыгрузитьОтчетВXMLДляСОНО300(ЭтотОбъект, ВыдаватьСообщение);	

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

&НаКлиенте
Процедура СохранитьДанные() Экспорт
	СохранитьНаСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИсключитьЗапрещенныеСимволыИзНомераСФ(НомерСФ, ИсключатьНецифровыеСимволы, ИсключатьЛидирующиеНули)
	
	Результат = НомерСФ;	
	
	// приведем номер СФ в соответствии с настройками
	Если ИсключатьНецифровыеСимволы Тогда
		
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерСФ) Тогда
		
			НовыйНомерСФ = "";
			Для Н=1 По СтрДлина(НомерСФ) Цикл
				ПервСимвол = Сред(НомерСФ,Н,1);
				КодСимвола = КодСимвола(ПервСимвол);
				Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
					ПервСимвол = "";
				КонецЕсли;
				НовыйНомерСФ = Строка(НовыйНомерСФ) + Строка(ПервСимвол);
			КонецЦикла; 
			
			Результат = НовыйНомерСФ;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИсключатьЛидирующиеНули Тогда
		НовыйНомерСФ = "";
		Для Н=1 По СтрДлина(Результат) Цикл
			ПервСимвол = Сред(Результат,Н,1);
			КодСимвола = КодСимвола(ПервСимвол);
			Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
				// добавляем буквенный символ как он есть
			ИначеЕсли КодСимвола = 48 Тогда //если равен нулю
				ПервСимвол = "";
			Иначе // если встретили любое число, то берем весь оставшийся номер
				НовыйНомерСФ = Строка(НовыйНомерСФ) + Сред(Результат,Н);
				Прервать; 
			КонецЕсли;
			НовыйНомерСФ = Строка(НовыйНомерСФ) + Строка(ПервСимвол);
		КонецЦикла;              							 
		Результат = НовыйНомерСФ;						
	КонецЕсли;	
	
	Возврат  Результат;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ Форма300_07  - МНОГОСТРОЧНАЯ

// Формирует данные счетов-фактур исходя из таблиц документов.
// Для типовых решений, в которых отсутствует механизм проведения счетов-фактур
Функция ПолучитьТекстЗапросаСчетовФактурВыданныхПоДокументам()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СУММА(ДанныеСчетовФактур.Сумма * ДанныеСчетовФактур.КурсВзаиморасчетов / ДанныеСчетовФактур.КратностьВзаиморасчетов - ВЫБОР
	|			КОГДА ДанныеСчетовФактур.Ссылка.СуммаВключаетНДС
	|				ТОГДА ДанныеСчетовФактур.СуммаНДС * ДанныеСчетовФактур.КурсВзаиморасчетов / ДанныеСчетовФактур.КратностьВзаиморасчетов
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА НЕ ДанныеСчетовФактур.Ссылка.СуммаВключаетАкциз
	|				ТОГДА ДанныеСчетовФактур.СуммаАкциза * ДанныеСчетовФактур.КурсВзаиморасчетов / ДанныеСчетовФактур.КратностьВзаиморасчетов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(ДанныеСчетовФактур.ОборотПоРеализации * ДанныеСчетовФактур.КурсВзаиморасчетов / ДанныеСчетовФактур.КратностьВзаиморасчетов) КАК ОборотПоРеализации,
	|	ДанныеСчетовФактур.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ДанныеСчетовФактур.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	СУММА(ДанныеСчетовФактур.СуммаНДС * ДанныеСчетовФактур.КурсВзаиморасчетов / ДанныеСчетовФактур.КратностьВзаиморасчетов) КАК СуммаНДС,
	|	ДанныеСчетовФактур.Ссылка.Дата КАК Дата,
	|	ДанныеСчетовФактур.Ссылка.Номер КАК Номер,
	|	Контрагенты.Ссылка КАК Покупатель,
	|	ДанныеСчетовФактур.Ссылка.Контрагент КАК Контрагент,
	|	ДанныеСчетовФактур.Ссылка.Организация КАК Организация,
	|	ДанныеСчетовФактур.Ссылка КАК Ссылка,
	|	Контрагенты.ИдентификационныйКодЛичности,
	|	Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства,
	|	ВЫБОР
	|		КОГДА ДанныеСчетовФактур.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Дополнительный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Дополнительная,
	|	ЛОЖЬ КАК УчастникСовместнойДеятельности,
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|				ИЛИ Контрагенты.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА Контрагенты.КБЕ = &ПустаяСтрока
	|					И НЕ Контрагенты.СтранаРезидентства В (&парамСтрана)
	|				ИЛИ ПОДСТРОКА(Контрагенты.КБЕ, 1, 1) = ""2""
	|			ТОГДА ВЫБОР
	|					КОГДА Контрагенты.ИдентификационныйКодЛичности = &ПустаяСтрока
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НерезидентСПустымБИН
	|ПОМЕСТИТЬ ДанныеСчетовФактур
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеСчетовФактур.Сумма КАК Сумма,
	|		ДанныеСчетовФактур.СуммаНДС КАК СуммаНДС,
	|		ДанныеСчетовФактур.СуммаАкциза КАК СуммаАкциза,
	|		ДанныеСчетовФактур.Ссылка КАК Ссылка,
	|		ДанныеСчетовФактур.ОборотПоРеализации КАК ОборотПоРеализации,
	|		ВЫБОР
	|			КОГДА ДанныеСчетовФактур.Ссылка.КурсВзаиморасчетов = 0
	|				ТОГДА 1
	|			ИНАЧЕ ДанныеСчетовФактур.Ссылка.КурсВзаиморасчетов
	|		КОНЕЦ КАК КурсВзаиморасчетов,
	|		ВЫБОР
	|			КОГДА ДанныеСчетовФактур.Ссылка.КратностьВзаиморасчетов = 0
	|				ТОГДА 1
	|			ИНАЧЕ ДанныеСчетовФактур.Ссылка.КратностьВзаиморасчетов
	|		КОНЕЦ КАК КратностьВзаиморасчетов
	|	ИЗ
	|		(ВЫБРАТЬ
	|			СчетФактураВыданныйТовары.Сумма КАК Сумма,
	|			СчетФактураВыданныйТовары.СуммаНДС КАК СуммаНДС,
	|			СчетФактураВыданныйТовары.СуммаАкциза КАК СуммаАкциза,
	|			СчетФактураВыданныйТовары.Ссылка КАК Ссылка,
	|			СчетФактураВыданныйТовары.ОборотПоРеализации КАК ОборотПоРеализации
	|		ИЗ
	|			Документ.СчетФактураВыданный.Товары КАК СчетФактураВыданныйТовары
	|		ГДЕ
	|			СчетФактураВыданныйТовары.Ссылка В
	|					(ВЫБРАТЬ
	|						ВТ_СчетаФактурыВыданныеОтобранныеДействующиеИДокументыОснования.СчетФактура
	|					ИЗ
	|						ВТ_СчетаФактурыВыданныеОтобранныеДействующиеИДокументыОснования КАК ВТ_СчетаФактурыВыданныеОтобранныеДействующиеИДокументыОснования)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СчетФактураВыданныйУслуги.Сумма,
	|			СчетФактураВыданныйУслуги.СуммаНДС,
	|			0,
	|			СчетФактураВыданныйУслуги.Ссылка,
	|			СчетФактураВыданныйУслуги.ОборотПоРеализации
	|		ИЗ
	|			Документ.СчетФактураВыданный.Услуги КАК СчетФактураВыданныйУслуги
	|		ГДЕ
	|			СчетФактураВыданныйУслуги.Ссылка В
	|					(ВЫБРАТЬ
	|						ВТ_СчетаФактурыВыданныеОтобранныеДействующиеИДокументыОснования.СчетФактура
	|					ИЗ
	|						ВТ_СчетаФактурыВыданныеОтобранныеДействующиеИДокументыОснования КАК ВТ_СчетаФактурыВыданныеОтобранныеДействующиеИДокументыОснования)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СчетФактураВыданныйОС.Сумма,
	|			СчетФактураВыданныйОС.СуммаНДС,
	|			0,
	|			СчетФактураВыданныйОС.Ссылка,
	|			СчетФактураВыданныйОС.ОборотПоРеализации
	|		ИЗ
	|			Документ.СчетФактураВыданный.ОС КАК СчетФактураВыданныйОС
	|		ГДЕ
	|			СчетФактураВыданныйОС.Ссылка В
	|					(ВЫБРАТЬ
	|						ВТ_СчетаФактурыВыданныеОтобранныеДействующиеИДокументыОснования.СчетФактура
	|					ИЗ
	|						ВТ_СчетаФактурыВыданныеОтобранныеДействующиеИДокументыОснования КАК ВТ_СчетаФактурыВыданныеОтобранныеДействующиеИДокументыОснования)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СчетФактураВыданныйНМА.Сумма,
	|			СчетФактураВыданныйНМА.СуммаНДС,
	|			0,
	|			СчетФактураВыданныйНМА.Ссылка,
	|			СчетФактураВыданныйНМА.ОборотПоРеализации
	|		ИЗ
	|			Документ.СчетФактураВыданный.НМА КАК СчетФактураВыданныйНМА
	|		ГДЕ
	|			СчетФактураВыданныйНМА.Ссылка В
	|					(ВЫБРАТЬ
	|						ВТ_СчетаФактурыВыданныеОтобранныеДействующиеИДокументыОснования.СчетФактура
	|					ИЗ
	|						ВТ_СчетаФактурыВыданныеОтобранныеДействующиеИДокументыОснования КАК ВТ_СчетаФактурыВыданныеОтобранныеДействующиеИДокументыОснования)) КАК ДанныеСчетовФактур) КАК ДанныеСчетовФактур
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (ДанныеСчетовФактур.Ссылка.Покупатель = Контрагенты.Ссылка
	|				ИЛИ ДанныеСчетовФактур.Ссылка.Покупатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					И ДанныеСчетовФактур.Ссылка.Контрагент = Контрагенты.Ссылка)
	|ГДЕ
	|	ДанныеСчетовФактур.Ссылка.СтранаНазначения В(&парамСтрана)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеСчетовФактур.Ссылка.Дата,
	|	ДанныеСчетовФактур.Ссылка.Номер,
	|	ДанныеСчетовФактур.Ссылка,
	|	Контрагенты.Ссылка,
	|	Контрагенты.ИдентификационныйКодЛичности,
	|	Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства,
	|	ВЫБОР
	|		КОГДА ДанныеСчетовФактур.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Дополнительный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеСчетовФактур.Ссылка.Организация,
	|	ДанныеСчетовФактур.КурсВзаиморасчетов,
	|	ДанныеСчетовФактур.КратностьВзаиморасчетов,
	|	ДанныеСчетовФактур.Ссылка.Контрагент,
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|				ИЛИ Контрагенты.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Контрагенты.КБЕ = &ПустаяСтрока
	|					И НЕ Контрагенты.СтранаРезидентства В (&парамСтрана)
	|				ИЛИ ПОДСТРОКА(Контрагенты.КБЕ, 1, 1) = ""2""
	|			ТОГДА ВЫБОР
	|					КОГДА Контрагенты.ИдентификационныйКодЛичности = &ПустаяСтрока
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаСчетовФактурВыданныхПоДокументам

// Формирует данные счетов-фактур исходя из регистра накопления.
// Для типовых решений, в которых присутствует механизм проведения счетов-фактур
Функция ПолучитьТекстЗапросаСчетовФактурВыданныхПоРегистру()
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СУММА(ДанныеСчетовФактур.СуммаРегл + ДанныеСчетовФактур.СуммаАкцизаРегл) КАК Сумма,
	|	СУММА(ДанныеСчетовФактур.ОборотПоРеализацииРегл) КАК ОборотПоРеализации,
	|	СУММА(ДанныеСчетовФактур.СуммаНДСРегл) КАК СуммаНДС,
	|	ДанныеСчетовФактур.Организация КАК Организация,
	|	ДанныеСчетовФактур.Контрагент КАК Контрагент,
	|	ДанныеСчетовФактур.Покупатель КАК Покупатель,
	|	ДанныеСчетовФактур.СчетФактура КАК Ссылка,
	|	ДанныеСчетовФактур.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности
	|ПОМЕСТИТЬ ВТ_ДанныеСчетовФактур
	|ИЗ
	|	РегистрНакопления.СведенияСчетовФактурВыданных КАК ДанныеСчетовФактур
	|ГДЕ
	|	ДанныеСчетовФактур.СчетФактура В
	|			(ВЫБРАТЬ
	|				ВТ_СчетаФактурыВыданныеОтобранныеДействующиеИДокументыОснования.СчетФактура
	|			ИЗ
	|				ВТ_СчетаФактурыВыданныеОтобранныеДействующиеИДокументыОснования КАК ВТ_СчетаФактурыВыданныеОтобранныеДействующиеИДокументыОснования)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеСчетовФактур.СчетФактура,
	|	ДанныеСчетовФактур.Контрагент,
	|	ДанныеСчетовФактур.Покупатель,
	|	ДанныеСчетовФактур.Организация,
	|	ДанныеСчетовФактур.УчастникСовместнойДеятельности
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ДанныеСчетовФактур.Сумма) КАК Сумма,
	|	СУММА(ДанныеСчетовФактур.ОборотПоРеализации) КАК ОборотПоРеализации,
	|	СУММА(ДанныеСчетовФактур.СуммаНДС) КАК СуммаНДС,
	|	ДанныеСчетовФактур.Организация КАК Организация,
	|	СчетФактура.Дата КАК Дата,
	|	СчетФактура.Номер КАК Номер,
	|	ДанныеСчетовФактур.Контрагент КАК Контрагент,
	|	Контрагенты.Ссылка КАК Покупатель,
	|	ДанныеСчетовФактур.Ссылка КАК Ссылка,
	|	Контрагенты.ИдентификационныйКодЛичности,
	|	Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства,
	|	ВЫБОР
	|		КОГДА СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Дополнительный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Дополнительная,
	|	ДанныеСчетовФактур.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности,
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|				ИЛИ Контрагенты.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА Контрагенты.КБЕ = &ПустаяСтрока
	|					И НЕ Контрагенты.СтранаРезидентства В (&парамСтрана)
	|				ИЛИ ПОДСТРОКА(Контрагенты.КБЕ, 1, 1) = ""2""
	|			ТОГДА ВЫБОР
	|					КОГДА Контрагенты.ИдентификационныйКодЛичности = &ПустаяСтрока
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НерезидентСПустымБИН
	|ПОМЕСТИТЬ ДанныеСчетовФактур
	|ИЗ
	|	ВТ_ДанныеСчетовФактур КАК ДанныеСчетовФактур
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (ДанныеСчетовФактур.Покупатель = Контрагенты.Ссылка
	|				ИЛИ ДанныеСчетовФактур.Покупатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					И ДанныеСчетовФактур.Контрагент = Контрагенты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактура
	|		ПО ДанныеСчетовФактур.Ссылка = СчетФактура.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактура.Дата,
	|	СчетФактура.Номер,
	|	ДанныеСчетовФактур.Ссылка,
	|	Контрагенты.Ссылка,
	|	ДанныеСчетовФактур.Контрагент,
	|	Контрагенты.ИдентификационныйКодЛичности,
	|	ВЫБОР
	|		КОГДА СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Дополнительный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеСчетовФактур.Организация,
	|	Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства,
	|	ДанныеСчетовФактур.УчастникСовместнойДеятельности,
	|	ВЫБОР
	|		КОГДА Контрагенты.КБЕ = &ПустаяСтрока
	|					И НЕ Контрагенты.СтранаРезидентства В (&парамСтрана)
	|				ИЛИ ПОДСТРОКА(Контрагенты.КБЕ, 1, 1) = ""2""
	|			ТОГДА ВЫБОР
	|					КОГДА Контрагенты.ИдентификационныйКодЛичности = &ПустаяСтрока
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|				ИЛИ Контрагенты.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;";
		
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаСчетовФактурВыданныхПоРегистру

// Формирует данные счетов-фактур исходя из таблиц документов.
// Для типовых решений, в которых отсутствует механизм проведения счетов-фактур
Функция ПолучитьТекстЗапросаСчетовФактурПолученныхПоДокументам()

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДанныеСчетовФактур.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	               |	ДанныеСчетовФактур.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	               |	ДанныеСчетовФактур.Дополнительная КАК Дополнительная,
	               |	ДанныеСчетовФактур.Поставщик КАК Поставщик,
	               |	ДанныеСчетовФактур.Контрагент КАК Контрагент,
	               |	ДанныеСчетовФактур.Контрагент.ИдентификационныйКодЛичности КАК ИдентификационныйКодЛичности,
	               |	ДанныеСчетовФактур.Ссылка КАК Ссылка,
	               |
	               |	ДанныеСчетовФактур.Сумма КАК СуммаОборота,
	               |	ДанныеСчетовФактур.СуммаНДС КАК СуммаНДС,
	               |	ЛОЖЬ КАК УчастникСовместнойДеятельности
	               |ПОМЕСТИТЬ ВТ_ДанныеСчетовФактур
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		СУММА(ВЫРАЗИТЬ(ДанныеСчетовФактур.Сумма * ДанныеСчетовФактур.КурсВзаиморасчетов * ДанныеСчетовФактур.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))) КАК Сумма,
	               |		СУММА(ВЫРАЗИТЬ(ДанныеСчетовФактур.СуммаНДС * ДанныеСчетовФактур.КурсВзаиморасчетов / ДанныеСчетовФактур.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))) КАК СуммаНДС,
	               |		ДанныеСчетовФактур.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	               |		ДанныеСчетовФактур.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	               |		ДанныеСчетовФактур.Контрагент КАК Контрагент,
	               |		ДанныеСчетовФактур.Поставщик КАК Поставщик,
	               |		ДанныеСчетовФактур.Ссылка КАК Ссылка,
	               |
	               |		ДанныеСчетовФактур.Дополнительная КАК Дополнительная
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			СУММА(ВЫБОР
	               |					КОГДА ДанныеСчетовФактур.Ссылка.СуммаВключаетНДС
	               |						ТОГДА ДанныеСчетовФактур.Сумма - ДанныеСчетовФактур.СуммаНДС
	               |					ИНАЧЕ ДанныеСчетовФактур.Сумма
	               |				КОНЕЦ) КАК Сумма,
	               |			СУММА(ДанныеСчетовФактур.СуммаНДС) КАК СуммаНДС,
	               |			ВЫБОР
	               |				КОГДА ДанныеСчетовФактур.Ссылка.КурсВзаиморасчетов = 0
	               |					ТОГДА 1
	               |				ИНАЧЕ ДанныеСчетовФактур.Ссылка.КурсВзаиморасчетов
	               |			КОНЕЦ КАК КурсВзаиморасчетов,
	               |			ВЫБОР
	               |				КОГДА ДанныеСчетовФактур.Ссылка.КратностьВзаиморасчетов = 0
	               |					ТОГДА 1
	               |				ИНАЧЕ ДанныеСчетовФактур.Ссылка.КратностьВзаиморасчетов
	               |			КОНЕЦ КАК КратностьВзаиморасчетов,
	               |			ДанныеСчетовФактур.Ссылка.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	               |			ДанныеСчетовФактур.Ссылка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	               |			ВЫБОР
	               |				КОГДА ДанныеСчетовФактур.Ссылка.Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |					ТОГДА ДанныеСчетовФактур.Ссылка.Контрагент
	               |				ИНАЧЕ ДанныеСчетовФактур.Ссылка.Поставщик
	               |			КОНЕЦ КАК Поставщик,
	               |			ДанныеСчетовФактур.Ссылка.Контрагент КАК Контрагент,
	               |			ДанныеСчетовФактур.Ссылка КАК Ссылка,
	               |			ВЫБОР КОГДА ДанныеСчетовФактур.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Дополнительный) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК Дополнительная
				   |ИЗ
	               |			(ВЫБРАТЬ
	               |				СчетФактураПолученныйТовары.Сумма КАК Сумма,
	               |				СчетФактураПолученныйТовары.СуммаНДС КАК СуммаНДС,
	               |				СчетФактураПолученныйТовары.СтавкаНДС КАК СтавкаНДС,
	               |				СчетФактураПолученныйТовары.Ссылка КАК Ссылка
	               |			ИЗ
	               |				Документ.СчетФактураПолученный.Товары КАК СчетФактураПолученныйТовары
	               |			ГДЕ
	               |				СчетФактураПолученныйТовары.Ссылка В (Выбрать СписокСчетовФактур.Ссылка Из ВТ_СписокСчетовФактур КАК СписокСчетовФактур)
	               |			
	               |			ОБЪЕДИНИТЬ ВСЕ
	               |			
	               |			ВЫБРАТЬ
	               |				СчетФактураПолученныйУслуги.Сумма,
	               |				СчетФактураПолученныйУслуги.СуммаНДС,
	               |				СчетФактураПолученныйУслуги.СтавкаНДС,
	               |				СчетФактураПолученныйУслуги.Ссылка
	               |			ИЗ
	               |				Документ.СчетФактураПолученный.Услуги КАК СчетФактураПолученныйУслуги
	               |			ГДЕ
	               |				СчетФактураПолученныйУслуги.Ссылка   В (Выбрать СписокСчетовФактур.Ссылка Из ВТ_СписокСчетовФактур КАК СписокСчетовФактур)
	               |			
	               |			ОБЪЕДИНИТЬ ВСЕ
	               |			
	               |			ВЫБРАТЬ
	               |				СчетФактураПолученныйОС.Сумма,
	               |				СчетФактураПолученныйОС.СуммаНДС,
	               |				СчетФактураПолученныйОС.СтавкаНДС,
	               |				СчетФактураПолученныйОС.Ссылка
	               |			ИЗ
	               |				Документ.СчетФактураПолученный.ОС КАК СчетФактураПолученныйОС
	               |			ГДЕ
	               |				СчетФактураПолученныйОС.Ссылка  В (Выбрать СписокСчетовФактур.Ссылка Из ВТ_СписокСчетовФактур КАК СписокСчетовФактур)
	               |			
	               |			ОБЪЕДИНИТЬ ВСЕ
	               |			
	               |			ВЫБРАТЬ
	               |				СчетФактураПолученныйНМА.Сумма,
	               |				СчетФактураПолученныйНМА.СуммаНДС,
	               |				СчетФактураПолученныйНМА.СтавкаНДС,
	               |				СчетФактураПолученныйНМА.Ссылка
	               |			ИЗ
	               |				Документ.СчетФактураПолученный.НМА КАК СчетФактураПолученныйНМА
	               |			ГДЕ
	               |				СчетФактураПолученныйНМА.Ссылка  В (Выбрать СписокСчетовФактур.Ссылка Из ВТ_СписокСчетовФактур КАК СписокСчетовФактур)) КАК ДанныеСчетовФактур
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ДанныеСчетовФактур.Ссылка,
	               |			ДанныеСчетовФактур.Ссылка.НомерВходящегоДокумента,
	               |			ВЫБОР
	               |				КОГДА ДанныеСчетовФактур.Ссылка.КурсВзаиморасчетов = 0
	               |					ТОГДА 1
	               |				ИНАЧЕ ДанныеСчетовФактур.Ссылка.КурсВзаиморасчетов
	               |			КОНЕЦ,
	               |			ВЫБОР
	               |				КОГДА ДанныеСчетовФактур.Ссылка.КратностьВзаиморасчетов = 0
	               |					ТОГДА 1
	               |				ИНАЧЕ ДанныеСчетовФактур.Ссылка.КратностьВзаиморасчетов
	               |			КОНЕЦ,
	               |			ВЫБОР
	               |				КОГДА ДанныеСчетовФактур.Ссылка.Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |					ТОГДА ДанныеСчетовФактур.Ссылка.Контрагент
	               |				ИНАЧЕ ДанныеСчетовФактур.Ссылка.Поставщик
	               |			КОНЕЦ,
	               |			ДанныеСчетовФактур.Ссылка.Контрагент,   
	               |			ВЫБОР КОГДА ДанныеСчетовФактур.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Дополнительный) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК ДанныеСчетовФактур
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ДанныеСчетовФактур.НомерВходящегоДокумента,
	               |		ДанныеСчетовФактур.ДатаВходящегоДокумента,
	               |		ДанныеСчетовФактур.Контрагент,
	               |		ДанныеСчетовФактур.Поставщик,
	               |		ДанныеСчетовФактур.Ссылка,
	               |
	               |		ДанныеСчетовФактур.Дополнительная) КАК ДанныеСчетовФактур
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка;";
		Возврат ТекстЗапроса;		   

КонецФункции


// Формирует данные счетов-фактур исходя из регистра накопления.
// Для типовых решений, в которых присутствует механизм проведения счетов-фактур
Функция ПолучитьТекстЗапросаСчетовФактурПолученныхПоРегистру()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СУММА(ДанныеСчетовФактур.СуммаРегл) КАК СуммаОборота,
	               |	СУММА(ДанныеСчетовФактур.СуммаНДСРегл) КАК СуммаНДС,
	               |	ДанныеСчетовФактур.Организация КАК Организация,
	               |	ДанныеСчетовФактур.Контрагент КАК Контрагент,
	               |	ДанныеСчетовФактур.Поставщик КАК Поставщик,
	               |	ДанныеСчетовФактур.СчетФактура КАК СчетФактураСсылка,
	               |	ДанныеСчетовФактур.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности
	               |ПОМЕСТИТЬ ВТ_ДанныеРегистраСчетовФактур
	               |ИЗ
	               |	РегистрНакопления.СведенияСчетовФактурПолученных КАК ДанныеСчетовФактур
	               |ГДЕ
	               |	ДанныеСчетовФактур.СчетФактура В (Выбрать СписокСчетовФактур.Ссылка Из ВТ_СписокСчетовФактур КАК СписокСчетовФактур)
	               |СГРУППИРОВАТЬ ПО
	               |	ДанныеСчетовФактур.СчетФактура,
	               |	ДанныеСчетовФактур.Организация,
	               |	ДанныеСчетовФактур.УчастникСовместнойДеятельности,
	               |	ДанныеСчетовФактур.Контрагент,
	               |	ДанныеСчетовФактур.Поставщик
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СчетФактураСсылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ДанныеСчетовФактур.СуммаОборота) КАК СуммаОборота,
	               |	СУММА(ДанныеСчетовФактур.СуммаНДС) КАК СуммаНДС,
	               |	ДанныеСчетовФактур.Организация КАК Организация,
	               |	СчетФактура.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	               |	СчетФактура.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	               |	Контрагенты.Ссылка КАК Поставщик,
	               |	ДанныеСчетовФактур.Контрагент КАК Контрагент,
	               |	ДанныеСчетовФактур.СчетФактураСсылка КАК Ссылка,
	               |	Контрагенты.ИдентификационныйКодЛичности КАК ИдентификационныйКодЛичности, 
	               |	ВЫБОР КОГДА СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Дополнительный) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК Дополнительная,
	               |	ДанныеСчетовФактур.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности
	               |ПОМЕСТИТЬ ВТ_ДанныеСчетовФактур
	               |ИЗ
	               |	ВТ_ДанныеРегистраСчетовФактур КАК ДанныеСчетовФактур
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО (ДанныеСчетовФактур.Поставщик = Контрагенты.Ссылка
	               |				ИЛИ ДанныеСчетовФактур.Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |					И ДанныеСчетовФактур.Контрагент = Контрагенты.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактура
	               |		ПО ДанныеСчетовФактур.СчетФактураСсылка = СчетФактура.Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СчетФактура.Дата,
	               |	СчетФактура.Номер,
	               |	ДанныеСчетовФактур.СчетФактураСсылка,
	               |
	               |	Контрагенты.Ссылка,
	               |	Контрагенты.ИдентификационныйКодЛичности,
	               |	ДанныеСчетовФактур.Организация,
	               |	ДанныеСчетовФактур.УчастникСовместнойДеятельности,
	               |	ДанныеСчетовФактур.Контрагент, 
	               |	ВЫБОР КОГДА СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Дополнительный) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ,
	               |	СчетФактура.ДатаВходящегоДокумента,				   
	               |	СчетФактура.НомерВходящегоДокумента
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка;";
				   
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция БИНИИНСоответствуетТребованиям(Знач ИИН_БИН, ВыводитьСообщение = Ложь) Экспорт

	ИИН_БИН	     = СокрЛП(ИИН_БИН);
	ДлинаИИН_БИН = СтрДлина(ИИН_БИН);
	
	//Проверка на длину ИИН/БИН
	Если ДлинаИИН_БИН < 12 Тогда
		
		Если ВыводитьСообщение Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСТР("ru = 'Количество знаков в ИИН/БИН меньше 12!'"));
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;

	// В ИИН/БИН имеются символы, отличные от цифр (0..9)
	ИИН_БИНБезНулей = СтрЗаменить(ИИН_БИН, "0", "1");
	
	Попытка
	    ЧислоИИН_БИН = Число(ИИН_БИНБезНулей);
		
		Если ЧислоИИН_БИН <> Цел(ЧислоИИН_БИН) Тогда // Есть символ "." или ","
			Если ВыводитьСообщение Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСТР("ru = 'ИИН/БИН содержит символы отличные от цифр!'"));
			КонецЕсли;
			
			Возврат Ложь;
		КонецЕсли;		

	Исключение
		
		Если ВыводитьСообщение Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСТР("ru = 'ИИН/БИН содержит символы отличные от цифр!'"));
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецПопытки; 

	
	// а12=(а1*b1+а2*b2+а3*b3+а4*b4+а5*b5+а6*b6+а7*b7+а8*b8+а9*b9+a10*b10+a11*b11) mod 11
	ПодстрокаИН11 		= Лев(ИИН_БИН, 11);	// копируем первые 11 символов
	КонтрольноеЗначение = Прав(ИИН_БИН, 1);	// контрольная сумма ИИН/БИН
	         
	//разряд ИИН:  1 2 3 4 5 6 7 8 9 10 11
	//вес разряда: 1 2 3 4 5 6 7 8 9 10 11.

	СуммаРазрядов = 1 * Сред(ИИН_БИН, 1, 1) + 2 * Сред(ИИН_БИН, 2, 1) + 3 * Сред(ИИН_БИН, 3, 1) + 4 * Сред(ИИН_БИН, 4, 1) + 5 * Сред(ИИН_БИН, 5, 1) + 6 * Сред(ИИН_БИН, 6, 1)
					+ 7 * Сред(ИИН_БИН, 7, 1)+ 8 * Сред(ИИН_БИН, 8, 1) + 9 * Сред(ИИН_БИН, 9, 1) + 10 * Сред(ИИН_БИН, 10, 1) + 11 * Сред(ИИН_БИН, 11, 1);
					
	ВычисленноеКонтрольноеЗначение = СуммаРазрядов - Цел(СуммаРазрядов / 11) * 11; // mod - остаток от деления Суммы разрядов на 11.
	
	Если ВычисленноеКонтрольноеЗначение = 10 Тогда
		//разряд ИИН:  1 2 3 4 5 6 7 8 9 10 11 
		//вес разряда: 3 4 5 6 7 8 9 10 11 1 2.

		СуммаРазрядов = 3 * Сред(ИИН_БИН, 1, 1) + 4 * Сред(ИИН_БИН, 2, 1) + 5 * Сред(ИИН_БИН, 3, 1) + 6 * Сред(ИИН_БИН, 4, 1) + 7 * Сред(ИИН_БИН, 5, 1) + 8 * Сред(ИИН_БИН, 6, 1)
						+ 9 * Сред(ИИН_БИН, 7, 1) + 10 * Сред(ИИН_БИН, 8, 1) + 11 * Сред(ИИН_БИН, 9, 1) + 1*Сред(ИИН_БИН, 10, 1) + 2 * Сред(ИИН_БИН, 11, 1);
		ВычисленноеКонтрольноеЗначение = СуммаРазрядов - Цел(СуммаРазрядов / 11) * 11;   
		
	КонецЕсли;
	
	Если ВычисленноеКонтрольноеЗначение <> Число(КонтрольноеЗначение) Тогда
		
		Если ВыводитьСообщение Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСТР("ru = 'Введенный ИИН/БИН не корректен!'"));
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции // БИНСоответствуетТребованиям()

&НаКлиенте
Процедура ПослеВводаСтраницы(Значение, Параметры) Экспорт
	
	Если НЕ Значение = Неопределено Тогда  
		
		ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
		Если ТекФорма = Неопределено Тогда
			ВсегоСтраниц = 1;
		Иначе
			ВсегоСтраниц = ТекФорма.ВсегоСтраниц;
		КонецЕсли;		
			
		Если Значение = 0 Тогда
			ТекущаяСтраница = 1;
		ИначеЕсли Значение > ВсегоСтраниц Тогда
			ТекущаяСтраница = ВсегоСтраниц;
		Иначе
			ТекущаяСтраница = Значение;				
		КонецЕсли;
		
		ПослеВводаСтраницыНаСервере();
		  
	КонецЕсли;
	           	
КонецПроцедуры

&НаСервере
Процедура ПослеВводаСтраницыНаСервере()
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтаФорма);
КонецПроцедуры

///////////////////////////////////////////////////////////////////
// ЛОКАЛЬНЫЕ МЕХАНИЗМЫ ОТЧЕТА

&НаСервере
// Процедура предназначена для автоматического расчет по строкам
// Вызывается из процедуры расчета для обычной формы
// Предполагает расчет ячеек, которые рассчитывается не как сумма входящих значений,
// при этом итоговое значение может быть больше входящих в него значений
//
// Параметры: ТекИмяФормы - текущее имя формы, Строка
//            ИтоговаяЯчейка - наименование итоговой ячейки, которая может иметь значение больше входящих в нее ячеек
//            СтруктураВходящихЯчеек - содержит наименования всех входящих ячеек
//
Функция АвтоматическийРасчетПоСтрокам(ТаблицаДанных, ИтоговаяЯчейка, СтруктураВходящихЯчеек, РассчитыватьСумму = Истина, ТабличноеПолеРезультата)
	
	ИтЗначение = 0;	
	
	Если РассчитыватьСумму Тогда
		
		ЗначИтоговойЯчейки = 0;
		
		СтруктураТекущихЗначений = Новый Структура();	
		// добавляем значения входящих ячеек
		Для Каждого Элемент Из СтруктураВходящихЯчеек Цикл
			ЗначениеЯчейки = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,Элемент.Ключ);
			СтруктураТекущихЗначений.Вставить(Элемент.Ключ, ЗначениеЯчейки);		
		КонецЦикла;
		
		Для Каждого Элемент Из СтруктураТекущихЗначений Цикл
			ЗначИтоговойЯчейки = ЗначИтоговойЯчейки + Элемент.Значение;
		КонецЦикла;
		
		// передаем полученное итоговое значение в структуру и на форму
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИтоговаяЯчейка, ЗначИтоговойЯчейки, ТабличноеПолеРезультата);		
		
		ИтЗначение = ЗначИтоговойЯчейки;
	Иначе	
	
		// получим значение итоговой ячейки
		ЗначИтоговойЯчейки     = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,ИтоговаяЯчейка);
		
		СтруктураТекущихЗначений = Новый Структура();	
		// добавляем значения входящих ячеек
		Для Каждого Элемент Из СтруктураВходящихЯчеек Цикл
			ЗначениеЯчейки = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,Элемент.Ключ);
			СтруктураТекущихЗначений.Вставить(Элемент.Ключ, ЗначениеЯчейки);		
		КонецЦикла;	
		
		// Создадим структуру предыдцщих значений, она не содержит итоговую ячейку
		СтруктураПредыдущихЗначений = Новый Структура;
		Если мСтруктураЗначений <> Неопределено Тогда
			Для Каждого Элемент Из СтруктураВходящихЯчеек Цикл
				Если мСтруктураЗначений.Свойство(Элемент.Ключ) Тогда
					ЗначениеЯчейкиДо = 0;
					мСтруктураЗначений.Свойство(Элемент.Ключ,ЗначениеЯчейкиДо);
					СтруктураПредыдущихЗначений.Вставить(Элемент.Ключ, ЗначениеЯчейкиДо);		
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
		//Рассчитаем итоговую ячейку
		// В случае, если в мСтруктураЗначений еще не было добавлено предыдуших значений, то значение "ДО" будет равно 0
		// Формула, например:
		//s_300_02_004 = s_300_02_004 - s_300_02_004_i_до + s_300_02_004_i - s_300_02_004_ii_до + s_300_02_004_ii
		//					   - s_300_02_004_iii_до + s_300_02_004_iii - s_300_02_004_iv_до + s_300_02_004_iv
		//					   - s_300_02_004_v_до + s_300_02_004_v - s_300_02_004_vi_до + s_300_02_004_vi;
		
		НовЗначИтоговойЯчейки = ЗначИтоговойЯчейки;
		// + все текущие значения + значение итоговой ячейки
		Для Каждого Элемент Из СтруктураТекущихЗначений Цикл
			НовЗначИтоговойЯчейки = НовЗначИтоговойЯчейки + Элемент.Значение;
		КонецЦикла;
		// - все предыдущие значения
		Для Каждого Элемент Из СтруктураПредыдущихЗначений Цикл
			НовЗначИтоговойЯчейки = НовЗначИтоговойЯчейки - Элемент.Значение;
		КонецЦикла;
		
		// запоминаем текущие значения взодящих ячеек в мСтруктураЗначений
		Для Каждого Элемент Из СтруктураТекущихЗначений Цикл				
			мСтруктураЗначений.Вставить(Элемент.Ключ,Элемент.Значение);  //новое значение данной области 		
		КонецЦикла;
		
		// передаем полученное итоговое значение в структуру и на форму
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИтоговаяЯчейка, НовЗначИтоговойЯчейки, ТабличноеПолеРезультата);		
				
		// если итоговое значение ввели меньше чем сумма входящих значений
		// то очищаем все значения, в случае если входящих значений больше одного
		// если входящее значение одно, то приравниваем его со значением итоговой ячейки
		// - Проверим сумму входящих значений
		
		ОбщаяСуммаВходящихЗначений = 0;
		Для Каждого Элемент Из СтруктураТекущихЗначений Цикл		
			ОбщаяСуммаВходящихЗначений = ОбщаяСуммаВходящихЗначений + Элемент.Значение;		
		КонецЦикла;
		
		Если НовЗначИтоговойЯчейки < ОбщаяСуммаВходящихЗначений Тогда
			// определим количество ячеек входящих
			Если СтруктураВходящихЯчеек.Количество() = 1 Тогда
				Для Каждого Элемент Из СтруктураВходящихЯчеек Цикл
					мСтруктураЗначений.Вставить(Элемент.Ключ,НовЗначИтоговойЯчейки);  //новое значение данной области 
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, Элемент.Ключ,НовЗначИтоговойЯчейки, ТабличноеПолеРезультата);
				КонецЦикла;			
			Иначе // больше одного, то обнуляем все входящие значения
				Для Каждого Элемент Из СтруктураВходящихЯчеек Цикл
					мСтруктураЗначений.Вставить(Элемент.Ключ,0);  //новое значение данной области 
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,Элемент.Ключ,0, ТабличноеПолеРезультата);
				КонецЦикла;			
			КонецЕсли;
		КонецЕсли;
		
		ИтЗначение = НовЗначИтоговойЯчейки;
	КонецЕсли;
		
	Возврат ИтЗначение;
	
КонецФункции // АвтоматическийРасчетПоСтрокам()

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, ЭтотОбъект.КодФормы, Ложь,Ложь);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ЭтотОбъект.КодФормы);
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма);	
	
	Форма300РасчетНаСервере(Неопределено, Неопределено);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере 
Процедура ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ИмяЯчейки, Значение, Расчет = Ложь)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, ИмяСтраницы, ИмяЯчейки, Значение, Расчет);				
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПередатьДанныеИзСтруктурыВТабличноеПоле(Форма, КодФормы)  Экспорт 	                                                       
	Перем СтруктураГруппы;
	
	мСписокФормБезИерархии = Форма.РеквизитФормыВЗначение("мСписокФормБезИерархии");
	НайденнаяСтрока = мСписокФормБезИерархии.Строки.Найти(КодФормы,"КодФормы");
	
	Если НайденнаяСтрока = Неопределено Тогда
		// структура формы еще не сформирована
		Возврат;
	КонецЕсли;
	ВсегоСтраницДоВывода = НайденнаяСтрока.ВсегоСтраниц;
	
	ТаблицаДанных = НайденнаяСтрока.Значение;
	ТаблицаДанных.Сортировать("ИмяОбласти");
	ИмяПанелиФормы = "Панель" + КодФормы;
	Если НайденнаяСтрока.Многострочность = 1 Тогда
		
	Иначе		
		Для Каждого Страница Из Форма.Элементы["Панель" + КодФормы].ПодчиненныеЭлементы Цикл
			ИмяСтраницыБезПрефиксаПанели =  СтрЗаменить(Страница.Имя, ИмяПанелиФормы, ""); // ИмяСтраницыБезПерфиксаПанели
			
			ТекПоле = Форма[КодФормы + "ПолеТабличногоДокумента" + ИмяСтраницыБезПрефиксаПанели];
			
			Для Каждого Строка Из ТаблицаДанных Цикл
				Если Найти(Строка.ИмяОбласти, "text__") <> 0 Тогда
					КоличествоСимволовНомераСтроки = СтрДлина(Строка.ИмяОбласти) - (Найти(Строка.ИмяОбласти, "text__") + 5); 
					НомерСтрокиРасшифровки = Число(Прав(Строка.ИмяОбласти, КоличествоСимволовНомераСтроки));	
					
					Если НомерСтрокиРасшифровки > 2 Тогда
						ТекОбласть = ТекПоле.Области.Найти(Строка.ИмяОбласти);
						
						Если ТекОбласть = Неопределено Тогда 
							ИмяИсходнойОбласти = Лев(Строка.ИмяОбласти, СтрДлина(Строка.ИмяОбласти)-КоличествоСимволовНомераСтроки);
							ИмяИсходнойОбласти = ИмяИсходнойОбласти + (НомерСтрокиРасшифровки - 1);
							
							ОбластьЯчейки = ТекПоле.Области[ИмяИсходнойОбласти];
							
							// номера строк исходной области
							НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
							НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ + 1;
							
							СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
							
							НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
							НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
							
							// определяем вставляемую область
							ВставляемаяОбласть = ТекПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
							//ВставляемаяОбласть.Защита = Защита;
							// добавляем в таблицу новую строку
							ТекПоле.ВставитьОбласть(ВставляемаяОбласть, ,ТипСмещенияТабличногоДокумента.ПоВертикали);
							
							ИмяНовойОбласти = ТекПоле.Область(НомерВерхЯчейкиНовойОбласти, , НомерНижнЯчейкиНовойОбласти, ).Имя;
							Если КодФормы = "Форма300_06" Тогда
								ТекПоле.Область(НомерВерхЯчейкиНовойОбласти,4 , НомерВерхЯчейкиНовойОбласти, 4).Текст = ПреобразоватьАрабскуюЦифруВРимскую(НомерСтрокиРасшифровки);
							Иначе	
								ТекПоле.Область(НомерВерхЯчейкиНовойОбласти,5 , НомерВерхЯчейкиНовойОбласти, 5).Текст = ПреобразоватьАрабскуюЦифруВРимскую(НомерСтрокиРасшифровки);
							КонецЕсли;	
							Для Каждого СтрокаОбласти Из ТекПоле.ПолучитьОбласть(ИмяНовойОбласти).Области Цикл
								ИмяОбластиСтроки = СтрокаОбласти.Имя;
								
								ОбластьЯчейки = ТекПоле.Области[ИмяОбластиСтроки];
								НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
								НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
								НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
								НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
								
								Если Найти(ИмяОбластиСтроки, "__") <> 0 Тогда
									НовоеИмяОбласти = Лев(ИмяОбластиСтроки, Найти(ИмяОбластиСтроки, "__")+1) + НомерСтрокиРасшифровки; 
									ТекПоле.Область(ИмяОбластиСтроки).Имя = НовоеИмяОбласти;
									
									ОбластьЯчейкиИсходнойОбласти 		= ТекПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
									ОбластьЯчейкиИсходнойОбласти.Имя 	= ИмяОбластиСтроки;
								КонецЕсли;
							КонецЦикла;	
							
							
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Строка Из ТаблицаДанных Цикл
				ТекОбласть = ТекПоле.Области.Найти(Строка.ИмяОбласти);
				Если ТекОбласть <> Неопределено Тогда 
					Если ТекОбласть.СодержитЗначение Тогда
						ТекОбласть.Значение = Строка.Значение;
					Иначе
						ТекОбласть.Текст = Строка.Значение;
					КонецЕсли;
				КонецЕсли;									      
			КонецЦикла;
		КонецЦикла;   
	КонецЕсли;
	
	Если ВсегоСтраницДоВывода <> НайденнаяСтрока.ВсегоСтраниц  Тогда
		Форма.ЗначениеВРеквизитФормы(мСписокФормБезИерархии, "мСписокФормБезИерархии");
	КонецЕсли;
	
КонецПроцедуры

#Область Форма300

&НаКлиенте
Процедура ДатаПодписиПриИзменении(Элемент)
	ДатаПодписиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, "Форма300", "ДатаПодачи", ДатаПодписи);
КонецПроцедуры

&НаКлиенте
Процедура Форма300ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Элемент.ТекущаяОбласть.Имя;
	Если Область.СодержитЗначение = Неопределено Тогда 
		Значение = "";		
	ИначеЕсли Область.СодержитЗначение Тогда
		Значение = Элемент.ТекущаяОбласть.Значение;
	Иначе
		Значение = "";		
	КонецЕсли;
	
	ПризнакРасчета = Ложь;
	Форма300ПолеТабличногоДокументаВыборНаСервере(Ячейка, Значение, ПризнакРасчета);	    
КонецПроцедуры

&НаКлиенте
Процедура Форма300ПолеТабличногоДокументаСтраница3Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Элемент.ТекущаяОбласть.Имя;
	
	Если Ячейка <> "D4" Тогда
		
		Если Область.СодержитЗначение = Неопределено Тогда 
			Значение = "";		
		ИначеЕсли Область.СодержитЗначение Тогда
			Значение = Элемент.ТекущаяОбласть.Значение;
		Иначе
			Значение = "";		
		КонецЕсли;
		
		ПризнакРасчета = Ложь;
		Форма300ПолеТабличногоДокументаВыборНаСервере(Ячейка, Значение, ПризнакРасчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Форма300ПолеТабличногоДокументаВыборНаСервере(Ячейка, Значение, ПризнакРасчета)	
	ТекимяФормы = "Форма300";
	Если (Найти(Ячейка, "Первоначальная") > 0)
		ИЛИ (Найти(Ячейка, "Очередная") > 0)
		ИЛИ (Найти(Ячейка, "Дополнительная") > 0)
		ИЛИ (Найти(Ячейка, "Ликвидационная") > 0)
		ИЛИ (Найти(Ячейка, "ПоУведомлению") > 0) Тогда
		ЗаполнитьВидРасчета(Ячейка);
	КонецЕсли;	
	
	Если (Найти(Ячейка, "Условие_A") > 0)
		ИЛИ (Найти(Ячейка, "Условие_B") > 0)
		ИЛИ (Найти(Ячейка, "Условие_C") > 0)
		ИЛИ (Найти(Ячейка, "Условие_D") > 0)
		ИЛИ (Найти(Ячейка, "ТребованиеОВозврате_1") > 0) 
		ИЛИ (Найти(Ячейка, "ТребованиеОВозврате_2") > 0) 
		ИЛИ (Найти(Ячейка, "СпособВыписки_A") > 0) 
		ИЛИ (Найти(Ячейка, "СпособВыписки_B") > 0) 
		ИЛИ (Найти(Ячейка, "СпособПолучения_A") > 0) 
		ИЛИ (Найти(Ячейка, "СпособПолучения_B") > 0) Тогда
		
		Если Значение = "Х" Тогда
			НовоеЗначение = "";
		Иначе
			НовоеЗначение = "Х";
		КонецЕсли;		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, Ячейка, НовоеЗначение, Истина);				
		
		Если (Найти(Ячейка, "ТребованиеОВозврате_1") > 0) И НовоеЗначение = "Х" Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "ТребованиеОВозврате_2", "", Истина);					
		ИначеЕсли (Найти(Ячейка, "ТребованиеОВозврате_2") > 0) И НовоеЗначение = "Х" Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "ТребованиеОВозврате_1", "", Истина);					
		КонецЕсли;	
	КонецЕсли;
	
	Если (Найти(Ячейка, "Условие_C1") > 0) Тогда
		Форма300РасчетНаСервере(Ячейка, НовоеЗначение);	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Форма300ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = Область.Имя;	
	
	Если Область.СодержитЗначение Тогда
		Форма300Расчет(Область.Имя, Область.Значение);
	КонецЕсли;
	    	    
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Форма300ПолеТабличногоДокументаСтраница2ПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = Область.Имя;
	
	Если Область.СодержитЗначение Тогда
		Форма300Расчет(Область.Имя, Область.Значение);
	КонецЕсли;
	    	    
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Форма300ПолеТабличногоДокументаСтраница3ПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = Область.Имя;	
	
	Если Область.СодержитЗначение Тогда
		Форма300Расчет(Область.Имя, Область.Значение);
	КонецЕсли;
	    	    
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Форма300ПолеТабличногоДокументаСтраница4ПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма300Расчет(Область.Имя, Область.Значение);
	КонецЕсли;
	    	    
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Форма300Расчет(ИмяЯчейки, ЗначениеЯчейки)
	ТекИмяФормы = "Форма300";	
	Форма300РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки);
КонецПроцедуры

&НаСервере
Процедура Форма300РасчетНаСервере(знач ИмяЯчейки, знач ЗначениеЯчейки)
	ТекИмяФормы = "Форма300";
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,ИмяЯчейки ,ЗначениеЯчейки);
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);			
	
	// рассчитаем ячейку 300.00.001
	//a_s_300_00_001  = s_300_00_001_1 + s_300_00_001_2
	
	s_300_00_001_a = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_00_001_a", 
								Новый Структура("s_300_00_001_1_a, s_300_00_001_2_a"),, Форма300ПолеТабличногоДокументаСтраница1);		
								
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_001_a" , s_300_00_001_a, Форма300ПолеТабличногоДокументаСтраница1);		
	
	s_300_00_001_b = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_00_001_b", 
								Новый Структура("s_300_00_001_1_b, s_300_00_001_2_b"),, Форма300ПолеТабличногоДокументаСтраница1);		
								
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_001_b" , s_300_00_001_b, Форма300ПолеТабличногоДокументаСтраница1);		
	
	// рассчитаем ячейку 300.00.005
	//a_s_300_00_005  = s_300_02_006 + (-)s_300_06_006_a
	a_s_300_00_005 = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_00_005_a", 
								Новый Структура("s_300_00_005_1_a, s_300_00_005_2_a"),, Форма300ПолеТабличногоДокументаСтраница1);		
	
	
	// 300.00.006. Общий оборот (300.00.001А+300.00.002+ 300.00.003 А+300.00.004 +300.00.005)
	
	a_s_300_00_006 = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_00_006_a", 
								Новый Структура("s_300_00_001_a, s_300_00_002_a, s_300_00_003_a, s_300_00_004_a, s_300_00_005_a"),, Форма300ПолеТабличногоДокументаСтраница1);		
								
								
	// 300.00.007. Доля облагаемого оборота в общем обороте
	// 300.00.007 = ((300.00.001A+300.00.002+300.00.003А)/300.00.006x100%)		
	ОбщийОблагаемыйОборот = 0;
	Для Ном = 1 По 3 Цикл
		ИмяОбласти = "s_300_00_00" + Строка(Ном) + "_a";
		ОбщийОблагаемыйОборот = ОбщийОблагаемыйОборот + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,ИмяОбласти);
	КонецЦикла;  
	
	//s_300_00_006_1. Общий облагаемый оборот (300.00.001А+300.00.002А+ 300.00.003А)
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_006_1_a", ОбщийОблагаемыйОборот, Форма300ПолеТабличногоДокументаСтраница1);
	
	// Определение удельного веса
	s_300_00_001_a = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_00_001_a");
 	s_300_00_002_a = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_00_002_a");
 	s_300_00_003_a = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_00_003_a");
 	s_300_00_004_a = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_00_004_a");
 	s_300_00_005_a = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_00_005_a");
	
	//Если a_s_300_00_006 = s_300_00_004_a Тогда
	//	УдельныйВес = 100;
	//	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_007_b", 0, Форма300ПолеТабличногоДокументаСтраница1);		
	//ИначеЕсли s_300_00_001_a = 0
	Если s_300_00_001_a = 0
		И s_300_00_002_a = 0
		И s_300_00_003_a = 0
		И s_300_00_004_a = 0
		И s_300_00_005_a = 0 Тогда
		УдельныйВес = 100;
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_007_b", 0, Форма300ПолеТабличногоДокументаСтраница1);		
	ИначеЕсли a_s_300_00_006 <> 0 Тогда	
		УдельныйВес = Окр(ОбщийОблагаемыйОборот/a_s_300_00_006 * 100, 2);
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_007_b", УдельныйВес, Форма300ПолеТабличногоДокументаСтраница1);		
	Иначе
		УдельныйВес = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_007_b");
	КонецЕсли;
	
	СтруктураРеквизитовФормы.УдВес = УдельныйВес;
		
	
	// 300.00.008. Доля облагаемого оборота по нулевой ставке в общем облагаемом обороте 
	//  (300.00.002/(300.00.001A+300.00.002+300.00.003A)x100%)
	Если ОбщийОблагаемыйОборот <> 0 Тогда
		b_s_300_00_008 = Окр(РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_002_a") / ОбщийОблагаемыйОборот * 100,2); 
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_008_b", b_s_300_00_008, Форма300ПолеТабличногоДокументаСтраница2);						
	КонецЕсли;
	
	// 300.00.012. Всего начислено НДС 
	// (300.00.001B+300.00.003B+300.00.010+300.00.011)																																															
	
	s_300_00_012 = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_00_012_b", 
								Новый Структура("s_300_00_001_b, s_300_00_003_b,s_300_00_010_b, s_300_00_011_b"),,Форма300ПолеТабличногоДокументаСтраница2);		
								
								
	// рассчитаем ячейку 300.00.013
	//a_s_300_00_013  = s_300_00_013_1 + s_300_00_013_2
	
	s_300_00_013_a = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_00_013_a", 
								Новый Структура("s_300_00_013_1_a, s_300_00_013_2_a"),, Форма300ПолеТабличногоДокументаСтраница1);		
								
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_013_a" , s_300_00_013_a, Форма300ПолеТабличногоДокументаСтраница2);		
	
	s_300_00_013_b = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_00_013_b", 
								Новый Структура("s_300_00_013_1_b, s_300_00_013_2_b"),, Форма300ПолеТабличногоДокументаСтраница1);		
								
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_013_b" , s_300_00_013_b, Форма300ПолеТабличногоДокументаСтраница2);
	
	// 300.00.021. Всего приобретено 
	// (300.00.013A + 300.00.014А + 300.00.015 + 300.00.016АI + 300.00.016АII + 300.00.017 + 300.00.020А + 300.00.026А)
					
	a_s_300_00_021 = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_00_021_a", 
								Новый Структура("s_300_00_013_a, s_300_00_014_a, s_300_00_015_a, s_300_00_016_1_a, s_300_00_016_2_a, s_300_00_017_a, , s_300_00_020_a, s_300_00_029_a"),, Форма300ПолеТабличногоДокументаСтраница2);
	
		
	// 300.00.023. Общая сумма НДС, относимого в зачет, за исключением строки 300.00.024
	// (300.00.013В + 300.00.014В + 300.00.016В + 300.00.019В + 300.00.020В + 300.00.022)
	
	b_s_300_00_023 = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_00_023_b", 
								Новый Структура("s_300_00_013_b, s_300_00_014_b, s_300_00_016_1_b, s_300_00_016_2_b, s_300_00_019_b, s_300_00_020_b, s_300_00_022_b"),, Форма300ПолеТабличногоДокументаСтраница2);		
								
	// 300.00.024
	s_300_00_024_b = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_00_024_b", 
								Новый Структура("s_300_00_024_1_b, s_300_00_024_2_b, s_300_00_024_3_b"),,Форма300ПолеТабличногоДокументаСтраница3);		
								
	b_s_300_00_023 = b_s_300_00_023  - РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_024_b");	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_023_b", b_s_300_00_023, Форма300ПолеТабличногоДокументаСтраница2);
	
								
	ПризнакОдновременногоПрименения = Ложь;							
	
	b_s_300_00_025_1 = 0; b_s_300_00_025_2= 0; b_s_300_00_025_3= 0;b_s_300_00_025_4= 0;
	
	s_300_00_026_b = 0;	s_300_00_026_1_b = 0; 	s_300_00_026_3_b = 0;
	
	Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Раздельный Тогда
		// 300.00.025 II.  Сумма разрешенного зачета НДС: при раздельном методе (300.00.023)
		b_s_300_00_025_2 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_023_b"); 
	    b_s_300_00_025_2 = Окр(b_s_300_00_025_2);
		
		
		
	ИначеЕсли СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный Тогда
		// 300.00.025 I.  Сумма разрешенного зачета НДС: при пропорциональном методе (300.00.023х300.00.007)
		s_300_00_006_a = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_006_a");
		
		Если s_300_00_006_a <> 0 И УдельныйВес = 0 Тогда	
			b_s_300_00_025_1 = 0; 
		ИначеЕсли УдельныйВес = 0 Тогда
			b_s_300_00_025_1 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_023_b"); 
		Иначе	
			b_s_300_00_025_1 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_023_b") * УдельныйВес/100; 
		КонецЕсли;	
		
	    b_s_300_00_025_1 = Окр(b_s_300_00_025_1);
		
	    //300.00.026 III. Сумма не разрешенного к отнесению в зачет НДС при пропорциональном методе (300.00.023 - 300.00.025I)
		s_300_00_026_1_b = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_023_b")
							- b_s_300_00_025_1;		
							
	Иначе	
		// Строки 300.00.024 и  300.00.025 III заполняются только для НП, применяющих пропорциональный и раздельный метод	
		ПризнакОдновременногоПрименения = ?(РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"ПропорцИРаздел")="Х",Истина, Ложь);
		Если ПризнакОдновременногоПрименения Тогда
		
			// 300.00.025 III.  Сумма разрешенного зачета НДС: при пропорциональном и раздельном методе 
			// 300.00.025 III = ((300.00.024Iх300.00.009)+(300.00.024IIIх 300.00.007)+ 300.00.024II)
			b_s_300_00_025_3 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_024_1_b") * РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_009_b") + 
							   РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_024_2_b") * УдельныйВес +
							   РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_024_3_b"); 
			b_s_300_00_025_3 = Окр(b_s_300_00_025_3);			   
	
		    //300.00.026 III. Сумма не разрешенного к отнесению в зачет НДС при пропорциональном и раздельном методе (300.00.024 - 300.00.025III)
			s_300_00_026_3_b = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_024_b")
								- b_s_300_00_025_3;		
		КонецЕсли;
	КонецЕсли;	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_025_1_b", b_s_300_00_025_1, Форма300ПолеТабличногоДокументаСтраница2);
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_025_2_b", b_s_300_00_025_2, Форма300ПолеТабличногоДокументаСтраница2);
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_025_3_b", b_s_300_00_025_3, Форма300ПолеТабличногоДокументаСтраница2);
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_025_4_b", b_s_300_00_025_4, Форма300ПолеТабличногоДокументаСтраница3);
	
	
	//Сумма не разрешенного к отнесению в зачет НДС	s_300_00_026_b	s_300_00_026_1_b s_300_00_026_2_b	s_300_00_026_3_b
	
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_026_1_b", s_300_00_026_1_b, Форма300ПолеТабличногоДокументаСтраница3);
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_026_3_b", s_300_00_026_3_b, Форма300ПолеТабличногоДокументаСтраница3);
	
	s_300_00_026_b = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_00_026_b", 
								Новый Структура("s_300_00_026_1_b, s_300_00_026_2_b, s_300_00_026_3_b"),, Форма300ПолеТабличногоДокументаСтраница3);		
	
	//РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_026_b"  , s_300_00_026_b  , Форма300ПолеТабличногоДокументаСтраница3);
	
	
//	(300.00.012-300.00.025I-300.00.027I-300.00.029B) x70% 
//или (300.00.012-300.00.025II+300.00.027I-300.00.029B)х70%
//или (300.00.012-300.00.025III+300.00.027I-300.00.029B) х70%
	
	ДополнительнаяСуммаНДС = 0;
	Если РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Условие_C1") = "Х" Тогда
		Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Раздельный Тогда
			ДополнительнаяСуммаНДС = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_012_b") - 
									РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_025_2_b") - 
									РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_027_1_b") - 
									РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_029_b") 
		ИначеЕсли СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный Тогда	
			ДополнительнаяСуммаНДС = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_012_b") - 
									РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_025_1_b") - 
									РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_027_1_b") - 
									РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_029_b") 
		Иначе
			ДополнительнаяСуммаНДС = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_012_b") - 
									РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_025_3_b") - 
									РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_027_1_b") - 
									РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_029_b") 
		КонецЕсли;	
		
		ДополнительнаяСуммаНДС = Окр(ДополнительнаяСуммаНДС * 0.70);
		Если ДополнительнаяСуммаНДС < 0 Тогда
			ДополнительнаяСуммаНДС = 0;
		КонецЕсли;	
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_025_4_b"  , ДополнительнаяСуммаНДС  , Форма300ПолеТабличногоДокументаСтраница3);
	
	// 300.00.027.1. Сумма НДС, подлежащего уплате в бюджет за налоговый период
	// при раздельном методе:300.00.012-300.00.025I-300.00.026В-300.00.025IV 
	// при пропорциональном: 300.00.012-300.00.025II-300.00.026В-300.00.025IV 
	// при одновременном применении пропорц. и раздельного: 300.00.012-300.00.025III-300.00.026В-300.00.025IV)
	НДСкУплате = 0;
	Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Раздельный Тогда
		НДСкУплате = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_012_b") - 
		             РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_025_2_b") - 
					 РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_029_b") -
					 РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_025_4_b");
					 
	ИначеЕсли СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный Тогда	
		НДСкУплате = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_012_b") - 
		             РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_025_1_b") - 
					 РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_029_b") -
					 РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_025_4_b");			 
		
	ИначеЕсли ПризнакОдновременногоПрименения Тогда
		НДСкУплате = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_012_b") - 
		             РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_025_3_b") - 
					 РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_029_b") -
					 РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_025_4_b");			 			 
		
	КонецЕсли;
	
	// 300.00.030.1. Сумма НДС, подлежащего уплате в бюджет за налоговый период			 
	// 300.00.030.2. Превышение суммы НДС, относимого в зачет, над суммой начисленного налога
	Если НДСкУплате > 0 Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_030_1_b", НДСкУплате, Форма300ПолеТабличногоДокументаСтраница3);
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_030_2_b", 0, Форма300ПолеТабличногоДокументаСтраница3);				
	Иначе
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_030_1_b", 0, Форма300ПолеТабличногоДокументаСтраница3);				
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_030_2_b", -НДСкУплате, Форма300ПолеТабличногоДокументаСтраница3);								
	КонецЕсли;	
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);  

КонецПроцедуры

&НаСервере
Функция Форма300РассчитатьНачислениеНДС(ВыдаватьСообщения = Ложь) 
	 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Налогоплательщик",  Налогоплательщик);
	Запрос.УстановитьПараметр("НачПериода",		   СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", 	   Новый Граница(КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КодСтроки300Формы", "300.00.%");		
	Запрос.УстановитьПараметр("СтавкаНДС",         12);
	Запрос.УстановитьПараметр("КодСтроки001",      "300.00.001%" );
	Запрос.УстановитьПараметр("КодСтроки004",      "300.00.004%" );
	Запрос.УстановитьПараметр("ДатаНачала", 	   НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаОкончания", 	   КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));

	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДС.ВидОперацииРеализации КАК ВидОперацииРеализации,
	|	НДС.ОборотПоРеализацииОборот КАК ОборотПоРеализацииОборот,
	|	НДС.СуммаНДСОборот КАК СуммаНДСОборот,
	|	НДС.СтавкаНДС КАК СтавкаНДС,
	|	НДС.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ вт_НДСОбороты
	|ИЗ
	|	РегистрНакопления.НДС.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			Регистратор,
	|			Налогоплательщик = &Налогоплательщик
	|				И НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСОблагаемыйИмпорт)) КАК НДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаНДС.ВидОперацииКорректировки,
	|	КорректировкаНДС.СуммаКорректировкиОборотаОборот,
	|	КорректировкаНДС.СуммаНДСОборот,
	|	КорректировкаНДС.СтавкаНДС,
	|	КорректировкаНДС.Регистратор
	|ИЗ
	|	РегистрНакопления.КорректировкаНДС.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			Регистратор,
	|			Налогоплательщик = &Налогоплательщик
	|				И НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСОблагаемыйИмпорт)) КАК КорректировкаНДС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидОперацииРеализации,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПОДСТРОКА(КодыСтрокДекларацииПоНДС.КодСтроки, 1, 10) КАК КодСтроки,
	|	вт_НДСОбороты.ВидОперацииРеализации КАК ВидОперацииРеализации,
	|	СУММА(вт_НДСОбороты.ОборотПоРеализацииОборот) КАК ОборотПоРеализацииОборот,
	|	СУММА(вт_НДСОбороты.СуммаНДСОборот) КАК СуммаНДСОборот,
	|	""Реализация"" КАК Раздел,
	|	вт_НДСОбороты.СтавкаНДС,
	|	вт_НДСОбороты.Регистратор
	|ПОМЕСТИТЬ РеализацияВТ
	|ИЗ
	|	вт_НДСОбороты КАК вт_НДСОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДС.СрезПоследних(&КонПериода, ) КАК КодыСтрокДекларацииПоНДС
	|		ПО вт_НДСОбороты.ВидОперацииРеализации = КодыСтрокДекларацииПоНДС.ВидОперации
	|ГДЕ
	|	(КодыСтрокДекларацииПоНДС.КодСтроки ПОДОБНО &КодСтроки300Формы
	|			ИЛИ КодыСтрокДекларацииПоНДС.КодСтроки ЕСТЬ NULL )
	|			И НЕ вт_НДСОбороты.СтавкаНДС.МестоРеализацииНеРК
	|			И НЕ КодыСтрокДекларацииПоНДС.КодСтроки ПОДОБНО &КодСтроки004
	|
	|СГРУППИРОВАТЬ ПО
	|	КодыСтрокДекларацииПоНДС.КодСтроки,
	|	вт_НДСОбороты.ВидОперацииРеализации,
	|	вт_НДСОбороты.СтавкаНДС,
	|	вт_НДСОбороты.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""300.00.004"" КАК КодСтроки,
	|	вт_НДСОбороты.ВидОперацииРеализации КАК ВидОперацииРеализации,
	|	СУММА(вт_НДСОбороты.ОборотПоРеализацииОборот) КАК ОборотПоРеализацииОборот,
	|	СУММА(вт_НДСОбороты.СуммаНДСОборот) КАК СуммаНДСОборот,
	|	""Реализация"" КАК Раздел,
	|	вт_НДСОбороты.СтавкаНДС,
	|	вт_НДСОбороты.Регистратор
	|ИЗ
	|	вт_НДСОбороты КАК вт_НДСОбороты
	|ГДЕ
	|	вт_НДСОбороты.СтавкаНДС.МестоРеализацииНеРК
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_НДСОбороты.ВидОперацииРеализации,
	|	вт_НДСОбороты.СтавкаНДС,
	|	вт_НДСОбороты.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧ_Документов.Ссылка,
	|	ТЧ_Документов.ДокументОснование.Ссылка КАК Регистратор
	|ПОМЕСТИТЬ ВТ_ПодчиненныеДокументы
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК ТЧ_Документов
	|ГДЕ
	|	ТЧ_Документов.ДокументОснование В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				РеализацияВТ.Регистратор
	|			ИЗ
	|				РеализацияВТ КАК РеализацияВТ
	|			ГДЕ
	|				РеализацияВТ.КодСтроки ПОДОБНО &КодСтроки001)
	|	И ТЧ_Документов.Ссылка.Проведен = ИСТИНА
	|	И ТЧ_Документов.Ссылка В
	|			(ВЫБРАТЬ
	|				СведенияСчетовФактурВыданныхОбороты.СчетФактура
	|			ИЗ
	|				РегистрНакопления.СведенияСчетовФактурВыданных.Обороты(&НачПериода, &КонПериода, , Налогоплательщик = &Налогоплательщик) КАК СведенияСчетовФактурВыданныхОбороты
	|			СГРУППИРОВАТЬ ПО
	|				СведенияСчетовФактурВыданныхОбороты.СчетФактура)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПодчиненныеДокументы.Ссылка,
	|	ПодчиненныеДокументы.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ вт_ДействующиеСФ
	|ИЗ
	|	ВТ_ПодчиненныеДокументы КАК ПодчиненныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаФактурыПрекратившиеДействие.СрезПоследних(
	|				,
	|				СчетФактура В
	|					(ВЫБРАТЬ
	|						ВТ_ПодчиненныеДокументы.Ссылка
	|					ИЗ
	|						ВТ_ПодчиненныеДокументы КАК ВТ_ПодчиненныеДокументы)) КАК СчетаФактурыПрекратившиеДействие
	|		ПО ПодчиненныеДокументы.Ссылка = СчетаФактурыПрекратившиеДействие.СчетФактура
	|ГДЕ
	|	СчетаФактурыПрекратившиеДействие.СчетФактура ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияВТ.КодСтроки,
	|	РеализацияВТ.ВидОперацииРеализации,
	|	РеализацияВТ.СтавкаНДС,
	|	СУММА(РеализацияВТ.ОборотПоРеализацииОборот) КАК СуммаБезНДСОборот,
	|	СУММА(РеализацияВТ.СуммаНДСОборот) КАК СуммаНДСОборот,
	|	РеализацияВТ.Раздел КАК Раздел,
	|	СУММА(ВЫБОР
	|			КОГДА вт_ДействующиеСФ.Ссылка ЕСТЬ NULL 
	|				ТОГДА РеализацияВТ.СуммаНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНДСОборот_БезСФ,
	|	СУММА(ВЫБОР
	|			КОГДА вт_ДействующиеСФ.Ссылка ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ РеализацияВТ.СуммаНДСОборот
	|		КОНЕЦ) КАК СуммаНДСОборот_СФ,
	|	СУММА(ВЫБОР
	|			КОГДА вт_ДействующиеСФ.Ссылка ЕСТЬ NULL 
	|				ТОГДА РеализацияВТ.ОборотПоРеализацииОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДСОборот_БезСФ,
	|	СУММА(ВЫБОР
	|			КОГДА вт_ДействующиеСФ.Ссылка ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ РеализацияВТ.ОборотПоРеализацииОборот
	|		КОНЕЦ) КАК СуммаБезНДСОборот_СФ,
	|	ВЫБОР
	|		КОГДА вт_ДействующиеСФ.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ КАК ЕстьЭСФ
	|ИЗ
	|	РеализацияВТ КАК РеализацияВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ДействующиеСФ КАК вт_ДействующиеСФ
	|		ПО РеализацияВТ.Регистратор = вт_ДействующиеСФ.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияВТ.КодСтроки,
	|	РеализацияВТ.СтавкаНДС,
	|	РеализацияВТ.ВидОперацииРеализации,
	|	РеализацияВТ.Раздел,
	|	ВЫБОР
	|		КОГДА вт_ДействующиеСФ.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ";
	
	Результат = Запрос.Выполнить();
	
	ТаблицаРезультата = Результат.Выгрузить();
	
	Возврат ТаблицаРезультата;		 
	
КонецФункции // Форма300РассчитатьНачислениеНДС()

&НаСервере
Функция Форма300РассчитатьЗачетНДС(ВыдаватьСообщения = Ложь) 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Налогоплательщик", 			Налогоплательщик);
	Запрос.УстановитьПараметр("НачПериода",		  			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", 	  			Новый Граница(КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КодСтроки300Формы",			"300.00.%");		
	Запрос.УстановитьПараметр("КодСтрокиМетодаЗачета",  	"300.00.020" );
	Запрос.УстановитьПараметр("ВидНалогаНДСМетодомЗачета", 	Перечисления.ВидыНДС.НДСМетодомЗачета);
	Запрос.УстановитьПараметр("ВидОборота",		  			Перечисления.ВидыОборотовПоРеализации.Общий);
	Запрос.УстановитьПараметр("КодСтроки300",	  			"300.00%");
    Запрос.УстановитьПараметр("КодСтроки300ДляИсключения",	"300.04.%");
	

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.Период КАК Период,
	|	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОперации КАК ВидОперацииПоступления,
	|	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки КАК КодСтроки,
	|	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОборота КАК ВидОборота,
	|	ВЫБОР
	|		КОГДА КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОборота = ЗНАЧЕНИЕ(Перечисление.ВидыОборотовПоРеализации.ПустаяСсылка)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Приоритет
	|ИЗ
	|	РегистрСведений.КодыСтрокДекларацииПоНДСКЗачету.СрезПоследних(&КонПериода, ) КАК КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Приоритет,
	|	ВидОперацииПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОпераций.ВидОперацииПоступления КАК ВидОперацииПоступления,
	|	МИНИМУМ(ТаблицаОпераций.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ вт_ТаблицаДохода
	|ИЗ
	|	ВТ_Приоритет КАК ТаблицаОпераций
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОпераций.ВидОперацииПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ТаблицаДохода.ВидОперацииПоступления КАК ВидОперацииПоступления,
	|	ДанныеОКодахДекларации.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ ВТ_СведенияОкодахСтрокДекларации
	|ИЗ
	|	вт_ТаблицаДохода КАК вт_ТаблицаДохода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоритет КАК ДанныеОКодахДекларации
	|		ПО вт_ТаблицаДохода.Приоритет = ДанныеОКодахДекларации.Приоритет
	|			И вт_ТаблицаДохода.ВидОперацииПоступления = ДанныеОКодахДекларации.ВидОперацииПоступления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидОперацииПоступления,
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСКВозмещению.СуммаБезНДСОборот КАК СуммаБезНДСОборот,
	|	НДСКВозмещению.СуммаНДСОборот КАК СуммаНДСОборот,
	|	НДСКВозмещению.ВидОперацииПоступления КАК ВидОперацииПоступления,
	|	НДСКВозмещению.ВидОборота КАК ВидОборота,
	|	НДСКВозмещению.ВидНалогаНДС КАК ВидНалогаНДС,
	|	НДСКВозмещению.Регистратор,
	|	НДСКВозмещению.СчетФактура
	|ПОМЕСТИТЬ вт_НДСКВозмещениюОбороты
	|ИЗ
	|	РегистрНакопления.НДСКВозмещению.Обороты(&НачПериода, &КонПериода, Регистратор, Налогоплательщик = &Налогоплательщик) КАК НДСКВозмещению
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаНДСКВозмещению.СуммаКорректировкиОборотаОборот,
	|	КорректировкаНДСКВозмещению.СуммаНДСОборот,
	|	КорректировкаНДСКВозмещению.ВидОперацииКорректировки,
	|	КорректировкаНДСКВозмещению.ВидОборота,
	|	КорректировкаНДСКВозмещению.ВидНалогаНДС,
	|	КорректировкаНДСКВозмещению.Регистратор,
	|	NULL
	|ИЗ
	|	РегистрНакопления.КорректировкаНДСКВозмещению.Обороты(&НачПериода, &КонПериода, Регистратор, Налогоплательщик = &Налогоплательщик) КАК КорректировкаНДСКВозмещению
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки КАК КодСтроки,
	|	СУММА(вт_НДСКВозмещениюОбороты.СуммаБезНДСОборот) КАК СуммаБезНДСОборот,
	|	СУММА(вт_НДСКВозмещениюОбороты.СуммаНДСОборот) КАК СуммаНДСОборот,
	|	вт_НДСКВозмещениюОбороты.ВидОперацииПоступления КАК ВидОперацииПоступления,
	|	""Возмещение"" КАК Раздел,
	|	вт_НДСКВозмещениюОбороты.ВидОборота,
	|	вт_НДСКВозмещениюОбороты.ВидНалогаНДС КАК ВидНалогаНДС,
	|	вт_НДСКВозмещениюОбороты.Регистратор КАК Регистратор,
	|	вт_НДСКВозмещениюОбороты.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ ВозмещениеВТ
	|ИЗ
	|	вт_НДСКВозмещениюОбороты КАК вт_НДСКВозмещениюОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДСКЗачету.СрезПоследних(&КонПериода, ) КАК КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних
	|		ПО вт_НДСКВозмещениюОбороты.ВидОборота = КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОборота
	|			И вт_НДСКВозмещениюОбороты.ВидОперацииПоступления = КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОперации
	|ГДЕ
	|	(КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки ПОДОБНО &КодСтроки300
	|			ИЛИ КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки ЕСТЬ NULL )
	|
	|СГРУППИРОВАТЬ ПО
	|	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки,
	|	вт_НДСКВозмещениюОбороты.ВидОборота,
	|	вт_НДСКВозмещениюОбороты.ВидНалогаНДС,
	|	вт_НДСКВозмещениюОбороты.ВидОперацииПоступления,
	|	вт_НДСКВозмещениюОбороты.Регистратор,
	|	вт_НДСКВозмещениюОбороты.СчетФактура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСтроки,
	|	ВидНалогаНДС,
	|	Регистратор,
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.ДокументОснование.Ссылка КАК Регистратор
	|ПОМЕСТИТЬ ВТ_ПодчиненныеДокументы
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Ссылка.Проведен = ИСТИНА
	|	И СчетФактураПолученный.ДокументОснование.Ссылка В
	|			(ВЫБРАТЬ
	|				вт_НДСКВозмещениюОбороты.Регистратор
	|			ИЗ
	|				вт_НДСКВозмещениюОбороты КАК вт_НДСКВозмещениюОбороты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПодчиненныеДокументы.Ссылка,
	|	ПодчиненныеДокументы.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ вт_ДействующиеСФ
	|ИЗ
	|	ВТ_ПодчиненныеДокументы КАК ПодчиненныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаФактурыПрекратившиеДействие.СрезПоследних(
	|				,
	|				СчетФактура В
	|					(ВЫБРАТЬ
	|						ВТ_ПодчиненныеДокументы.Ссылка
	|					ИЗ
	|						ВТ_ПодчиненныеДокументы КАК ВТ_ПодчиненныеДокументы)) КАК СчетаФактурыПрекратившиеДействие
	|		ПО ПодчиненныеДокументы.Ссылка = СчетаФактурыПрекратившиеДействие.СчетФактура
	|ГДЕ
	|	СчетаФактурыПрекратившиеДействие.СчетФактура ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозмещениеВТ.КодСтроки,
	|	ВозмещениеВТ.ВидОперацииПоступления,
	|	СУММА(ВозмещениеВТ.СуммаБезНДСОборот) КАК СуммаБезНДСОборот,
	|	СУММА(ВозмещениеВТ.СуммаНДСОборот) КАК СуммаНДСОборот,
	|	СУММА(ВЫБОР
	|			КОГДА вт_ДействующиеСФ.Ссылка ЕСТЬ NULL 
	|				ТОГДА ВозмещениеВТ.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДСОборот_БезСФ,
	|	СУММА(ВЫБОР
	|			КОГДА вт_ДействующиеСФ.Ссылка ЕСТЬ NULL 
	|				ТОГДА ВозмещениеВТ.СуммаНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНДСОборот_БезСФ,
	|	ВозмещениеВТ.Раздел КАК Раздел,
	|	ВозмещениеВТ.ВидОборота,
	|	СУММА(ВЫБОР
	|			КОГДА вт_ДействующиеСФ.Ссылка ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВозмещениеВТ.СуммаБезНДСОборот
	|		КОНЕЦ) КАК СуммаБезНДСОборот_СФ,
	|	СУММА(ВЫБОР
	|			КОГДА вт_ДействующиеСФ.Ссылка ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВозмещениеВТ.СуммаНДСОборот
	|		КОНЕЦ) КАК СуммаНДСОборот_СФ,
	|	ВЫБОР
	|		КОГДА вт_ДействующиеСФ.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА вт_ДействующиеСФ.Ссылка.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаДокументами.Электронно)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ЕстьЭСФ
	|ИЗ
	|	ВозмещениеВТ КАК ВозмещениеВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ДействующиеСФ КАК вт_ДействующиеСФ
	|		ПО ВозмещениеВТ.Регистратор = вт_ДействующиеСФ.Регистратор
	|			И (ВЫБОР
	|				КОГДА ВозмещениеВТ.Регистратор ССЫЛКА Документ.АвансовыйОтчет
	|					ТОГДА ВозмещениеВТ.СчетФактура = вт_ДействующиеСФ.Ссылка
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	ВозмещениеВТ.ВидНалогаНДС = &ВидНалогаНДСМетодомЗачета
	|	И ВозмещениеВТ.КодСтроки = &КодСтрокиМетодаЗачета
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозмещениеВТ.КодСтроки,
	|	ВозмещениеВТ.ВидОперацииПоступления,
	|	ВозмещениеВТ.Раздел,
	|	ВозмещениеВТ.ВидОборота,
	|	ВЫБОР
	|		КОГДА вт_ДействующиеСФ.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА вт_ДействующиеСФ.Ссылка.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаДокументами.Электронно)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозмещениеВТ.КодСтроки,
	|	ВозмещениеВТ.ВидОперацииПоступления,
	|	СУММА(ВозмещениеВТ.СуммаБезНДСОборот),
	|	СУММА(ВозмещениеВТ.СуммаНДСОборот),
	|	СУММА(ВЫБОР
	|			КОГДА вт_ДействующиеСФ.Ссылка ЕСТЬ NULL 
	|				ТОГДА ВозмещениеВТ.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА вт_ДействующиеСФ.Ссылка ЕСТЬ NULL 
	|				ТОГДА ВозмещениеВТ.СуммаНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	ВозмещениеВТ.Раздел,
	|	ВозмещениеВТ.ВидОборота,
	|	СУММА(ВЫБОР
	|			КОГДА вт_ДействующиеСФ.Ссылка ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВозмещениеВТ.СуммаБезНДСОборот
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА вт_ДействующиеСФ.Ссылка ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВозмещениеВТ.СуммаНДСОборот
	|		КОНЕЦ),
	|	ВЫБОР
	|		КОГДА вт_ДействующиеСФ.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА вт_ДействующиеСФ.Ссылка.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаДокументами.Электронно)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ
	|ИЗ
	|	ВозмещениеВТ КАК ВозмещениеВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ДействующиеСФ КАК вт_ДействующиеСФ
	|		ПО ВозмещениеВТ.Регистратор = вт_ДействующиеСФ.Регистратор
	|			И (ВЫБОР
	|				КОГДА ВозмещениеВТ.Регистратор ССЫЛКА Документ.АвансовыйОтчет
	|					ТОГДА ВозмещениеВТ.СчетФактура = вт_ДействующиеСФ.Ссылка
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	НЕ ВозмещениеВТ.КодСтроки = &КодСтрокиМетодаЗачета
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозмещениеВТ.КодСтроки,
	|	ВозмещениеВТ.ВидОперацииПоступления,
	|	ВозмещениеВТ.Раздел,
	|	ВозмещениеВТ.ВидОборота,
	|	ВЫБОР
	|		КОГДА вт_ДействующиеСФ.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА вт_ДействующиеСФ.Ссылка.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаДокументами.Электронно)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ";
	
	Результат = Запрос.Выполнить();
	
	ТаблицаРезультата = Результат.Выгрузить();
	
	Возврат ТаблицаРезультата;		 
	
КонецФункции // Форма300РассчитатьЗачетНДС()

&НаСервере
Процедура Форма300ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь) 
	
	ТекИмяФормы = "Форма300";
	
	Если Не Перезаполнить Тогда
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", ТекИмяФормы));
		Если СтрокаФормы <> Неопределено Тогда
			Если СтрокаФормы.Автозаполнение = Ложь Тогда
				Возврат;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Очистить(ТекИмяФормы,Истина);
	
	мПропорцИРаздел = Ложь;
	Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "Пропорциональный", 	"Х");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "Раздельный", 		"");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "ПропорцИРаздел", 	"");
	Иначе
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "Пропорциональный", 	"");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "Раздельный", 		"Х");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "ПропорцИРаздел", 	"");	
	КонецЕсли;
	
	// заполнение приложений
	
	// Заполняем строку 300.00.001 и 300.00.005
	ТаблицаРезультатаНачислениеНДС = Форма300РассчитатьНачислениеНДС(Истина);
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);
	
	Для Каждого Строка Из ТаблицаРезультатаНачислениеНДС Цикл
		Если НЕ ЗначениеЗаполнено(Строка.КодСтроки) Тогда
			ТекстСообщения = НСтр("ru = 'Сумма не учтена в Декларации. В виде операции реализации не указан код строки Декларации. '");			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Строка.ВидОперацииРеализации);				
		 
			Продолжить;			
		КонецЕсли;	
		
		Если Строка.ЕстьЭСФ Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "СпособВыписки_B", "X", Форма300ПолеТабличногоДокументаСтраница1);
		КонецЕсли;	
	
		ОбластьНачало = РегламентированнаяОтчетностьКлиентСервер.ПреобразоватьКодДекларации(Строка.КодСтроки);
		Если ОбластьНачало = "s_300_00_010" Тогда
			// НДС методом зачета покажем при расчете строки 300.00.020
            Продолжить;
		КонецЕсли;	
		
		СтрокаДанныхОборота = ОбластьНачало + "_a";
		СтрокаДанныхНДС 	= ОбластьНачало + "_b";
		
		Если ОбластьНачало = "s_300_00_001" Тогда
			
			СуммаБезНДС_СФ 		= Окр(?(Строка.СуммаБезНДСОборот_СФ <> NULL		, Строка.СуммаБезНДСОборот_СФ, 0)) 		+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_00_001_1_a");
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_001_1_a", СуммаБезНДС_СФ, Форма300ПолеТабличногоДокументаСтраница1);
			
			СуммаНДС_СФ    		= Окр(?(Строка.СуммаНДСОборот_СФ <> NULL		, Строка.СуммаНДСОборот_СФ, 0)) 		+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_00_001_1_b");
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_001_1_b", СуммаНДС_СФ, Форма300ПолеТабличногоДокументаСтраница1);
			
			СуммаБезНДС_БезСФ 	= Окр(?(Строка.СуммаБезНДСОборот_БезСФ <> NULL	, Строка.СуммаБезНДСОборот_БезСФ, 0)) 	+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_00_001_2_a");
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_001_2_a", СуммаБезНДС_БезСФ, Форма300ПолеТабличногоДокументаСтраница1);
			
			СуммаНДС_БезСФ    	= Окр(?(Строка.СуммаНДСОборот_БезСФ <> NULL		, Строка.СуммаНДСОборот_БезСФ, 0)) 		+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_00_001_2_b");						
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_001_2_b", СуммаНДС_БезСФ, Форма300ПолеТабличногоДокументаСтраница1);
		КонецЕсли;
		
		Если ОбластьНачало = "s_300_00_001" ИЛИ			
			ОбластьНачало = "s_300_00_004" Тогда
			
			// заполним строку
			СуммаБезНДС = Окр(?(Строка.СуммаБезНДСОборот <> NULL, 	Строка.СуммаБезНДСОборот, 0)) + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,СтрокаДанныхОборота);
			СуммаНДС    = Окр(?(Строка.СуммаНДСОборот <> NULL,		Строка.СуммаНДСОборот, 0)) + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,СтрокаДанныхНДС);						
			
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, СтрокаДанныхОборота, СуммаБезНДС, Форма300ПолеТабличногоДокументаСтраница1);																
			
			Если ОбластьНачало = "s_300_00_004" Тогда
				Если СуммаНДС <> 0 Тогда
					
					ТекстСообщения = НСтр("ru = 'Для строки %1, в регистре накопления %2 указана сумма НДС. Данные не учтены в форме.'");								
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодСтроки,  ?(Строка.Раздел = "Возмещение","НДС к возмещению","НДС"));			
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
				КонецЕсли;	
				
				Продолжить;			 				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, СтрокаДанныхНДС, СуммаНДС, Форма300ПолеТабличногоДокументаСтраница1);																			
		Иначе	
			
			ТекстСообщения = НСтр("ru = 'Данные по коду строки %1, содержащиеся в регистре накопления ""%2"" не учтены в форме.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодСтроки, ?(Строка.Раздел = "Возмещение","НДС к возмещению","НДС"));			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
			
			Продолжить;			 
		КонецЕсли;					
	КонецЦикла;
	
	// обновим реквизит формы
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);

	Форма300_01ЗаполнитьАвтоНаСервере();  // после этой процедуры при передаче данных, даже если форма 300.01 не заполнена произойдет вызов процедуры расчета формы 300.00 и рассчитается строка 300.00.001
	Форма300_02ЗаполнитьАвтоНаСервере();
	Форма300_04ЗаполнитьАвтоНаСервере();  	
	Форма300_06ЗаполнитьАвтоНаСервере(,Ложь);
	Форма300_05ЗаполнитьАвтоНаСервере(); // важна последовательность - чтобы при заполнении 5 приложения мы уже знали удельный вес, рассчитанный в 300.06
	Форма300_03ЗаполнитьАвтоНаСервере();  // важна последовательность, так как при передаче данных из 300.03, уже нужно знать удельный вес
	Форма300_07ЗаполнитьАвтоНаСервере();   
	Форма300_08ЗаполнитьАвтоНаСервере();  
	
	// на данном этапе мы уже знаем удельный вес УдВес	
	Форма300_06ЗаполнитьАвтоНаСервере(,Истина);
	
	// заполняем строку 300.00.013, 300.00.020 
	ТаблицаРезультата = Форма300РассчитатьЗачетНДС(Истина);
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);
	
	s_300_00_026_2_b = Форма300ПолеТабличногоДокументаСтраница3.Области["s_300_00_026_2_b"].Значение;
	Для Каждого Строка Из ТаблицаРезультата Цикл
		Если НЕ ЗначениеЗаполнено(Строка.КодСтроки) Тогда
			ТекстСообщения = НСтр("ru = 'Сумма не учтена в Декларации. Для вида операции поступления не указан код строки Декларации по виду оборота " + Строка(Строка.ВидОборота) + "'");			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Строка.ВидОперацииПоступления);							
			Продолжить;			
		КонецЕсли;	
		
		ОбластьНачало = РегламентированнаяОтчетностьКлиентСервер.ПреобразоватьКодДекларации(Строка.КодСтроки);
		
		Если Строка.ЕстьЭСФ Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "СпособПолучения_B", "X", Форма300ПолеТабличногоДокументаСтраница1);	
		КонецЕсли;
		
		Если ОбластьНачало = "s_300_00_020" Тогда			
			// заполняем данные по методу зачета в разделе начисленного НДС
			СуммаБезНДС = Окр(?(Строка.СуммаБезНДСОборот <> NULL, Строка.СуммаБезНДСОборот, 0));
			СуммаНДС    = Окр(?(Строка.СуммаНДСОборот <> NULL, Строка.СуммаНДСОборот, 0));			
			
			Область = ТаблицаДанных.Найти("s_300_00_010_b","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + СуммаНДС;
			КонецЕсли;
			
			Область = ТаблицаДанных.Найти("s_300_00_020_a","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + СуммаБезНДС;
			КонецЕсли;
			
			// Проверим метод зачета
			Область = ТаблицаДанных.Найти("s_300_00_020_b","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный Тогда
					Область.Значение = Область.Значение + СуммаНДС;
				Иначе
					Если Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Облагаемый Тогда
						Область.Значение = Область.Значение + СуммаНДС;
					ИначеЕсли Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Освобожденный Тогда
						Область.Значение = Область.Значение + 0;
						s_300_00_026_2_b = s_300_00_026_2_b + СуммаНДС;
					ИначеЕсли Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Общий Тогда
						Если  мПропорцИРаздел Тогда
							Область.Значение = Область.Значение + СуммаНДС;
						Иначе	
							Область.Значение = Область.Значение + Окр(СуммаНДС*СтруктураРеквизитовФормы.УдВес/100);
							s_300_00_026_2_b = s_300_00_026_2_b + СуммаНДС - Окр(СуммаНДС*СтруктураРеквизитовФормы.УдВес/100);
						КонецЕсли;
					Иначе
						Если  мПропорцИРаздел Тогда
							Область.Значение = Область.Значение + СуммаНДС;
						Иначе	
							Область.Значение = Область.Значение + Окр(СуммаНДС*СтруктураРеквизитовФормы.УдВес/100);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИНачеЕсли ОбластьНачало = "s_300_00_013" Тогда
			
				// заполняем данные по методу зачета в разделе начисленного НДС
			СуммаБезНДС = Окр(?(Строка.СуммаБезНДСОборот <> NULL, Строка.СуммаБезНДСОборот, 0));
			СуммаНДС    = Окр(?(Строка.СуммаНДСОборот <> NULL, Строка.СуммаНДСОборот, 0));			
		
			СуммаБезНДС_СФ 		= Окр(?(Строка.СуммаБезНДСОборот_СФ 	<> NULL, Строка.СуммаБезНДСОборот_СФ, 0));
			СуммаНДС_СФ    		= Окр(?(Строка.СуммаНДСОборот_СФ 		<> NULL, Строка.СуммаНДСОборот_СФ, 0));
			СуммаБезНДС_БезСФ 	= Окр(?(Строка.СуммаБезНДСОборот_БезСФ 	<> NULL, Строка.СуммаБезНДСОборот_БезСФ, 0));
			СуммаНДС_БезСФ    	= Окр(?(Строка.СуммаНДСОборот_БезСФ 	<> NULL, Строка.СуммаНДСОборот_БезСФ, 0));						
			
			Область = ТаблицаДанных.Найти("s_300_00_013_1_a","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + СуммаБезНДС_СФ;
			КонецЕсли;
			
			Область = ТаблицаДанных.Найти("s_300_00_013_2_a","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + СуммаБезНДС_БезСФ;
			КонецЕсли;
			
			
			Область = ТаблицаДанных.Найти("s_300_00_013_1_b","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный Тогда
					Область.Значение = Область.Значение + СуммаНДС_СФ;
				Иначе
					Если Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Облагаемый Тогда
						Область.Значение = Область.Значение + СуммаНДС_СФ;
					ИначеЕсли Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Освобожденный Тогда
						Область.Значение = Область.Значение + 0;
						s_300_00_026_2_b = s_300_00_026_2_b + СуммаНДС_СФ;
					ИначеЕсли Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Общий Тогда
						Если  мПропорцИРаздел Тогда
							Область.Значение = Область.Значение + СуммаНДС_СФ;
						Иначе	
							Область.Значение = Область.Значение + Окр(СуммаНДС_СФ*СтруктураРеквизитовФормы.УдВес/100);
							s_300_00_026_2_b = s_300_00_026_2_b + СуммаНДС_СФ - Окр(СуммаНДС_СФ*СтруктураРеквизитовФормы.УдВес/100);
						КонецЕсли;						
					Иначе
						Если  мПропорцИРаздел Тогда
							Область.Значение = Область.Значение + СуммаНДС_СФ;
						Иначе	
							Область.Значение = Область.Значение + Окр(СуммаНДС_СФ*СтруктураРеквизитовФормы.УдВес/100);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Область = ТаблицаДанных.Найти("s_300_00_013_2_b","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный Тогда
					Область.Значение = Область.Значение + СуммаНДС_БезСФ;
				Иначе
					Если Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Облагаемый Тогда
						Область.Значение = Область.Значение + СуммаНДС_БезСФ;
					ИначеЕсли Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Освобожденный Тогда
						Область.Значение = Область.Значение + 0;
						s_300_00_026_2_b = s_300_00_026_2_b + СуммаНДС_БезСФ;
					ИначеЕсли Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Общий Тогда
						Если  мПропорцИРаздел Тогда
							Область.Значение = Область.Значение + СуммаНДС_БезСФ;
						Иначе	
							Область.Значение = Область.Значение + Окр(СуммаНДС_БезСФ*СтруктураРеквизитовФормы.УдВес/100);
							s_300_00_026_2_b = s_300_00_026_2_b + СуммаНДС_БезСФ - Окр(СуммаНДС_БезСФ*СтруктураРеквизитовФормы.УдВес/100);
						КонецЕсли;						
					Иначе
						Если  мПропорцИРаздел Тогда
							Область.Значение = Область.Значение + СуммаНДС_БезСФ;
						Иначе	
							Область.Значение = Область.Значение + Окр(СуммаНДС_БезСФ*СтруктураРеквизитовФормы.УдВес/100);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		
		ИначеЕсли ОбластьНачало = "s_300_00_018" ИЛИ ОбластьНачало = "s_300_00_015" ИЛИ ОбластьНачало = "s_300_00_016" ИЛИ ОбластьНачало = "s_300_00_022" Тогда			
			СуммаБезНДС = Окр(?(Строка.СуммаБезНДСОборот <> NULL, Строка.СуммаБезНДСОборот, 0));
			СуммаНДС    = Окр(?(Строка.СуммаНДСОборот <> NULL, Строка.СуммаНДСОборот, 0));							
			
			Область = ТаблицаДанных.Найти("s_300_00_0"+ Прав(ОбластьНачало,2) + "_a","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + СуммаБезНДС;
			КонецЕсли;
			
			// Проверим метод зачета
			Область = ТаблицаДанных.Найти("s_300_00_0"+ Прав(ОбластьНачало,2) + "_b","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный Тогда
					Область.Значение = Область.Значение + СуммаНДС;
				Иначе
					Если Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Облагаемый Тогда
						Область.Значение = Область.Значение + СуммаНДС;
					ИначеЕсли Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Освобожденный Тогда
						Область.Значение = Область.Значение + 0;
						s_300_00_026_2_b = s_300_00_026_2_b + СуммаНДС;
					ИначеЕсли Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Общий Тогда
						Если  мПропорцИРаздел Тогда
							Область.Значение = Область.Значение + СуммаНДС;
						Иначе	
							Область.Значение = Область.Значение + Окр(СуммаНДС*СтруктураРеквизитовФормы.УдВес/100);
							s_300_00_026_2_b = s_300_00_026_2_b + СуммаНДС - Окр(СуммаНДС*СтруктураРеквизитовФормы.УдВес/100);
						КонецЕсли;						
					Иначе
						Если  мПропорцИРаздел Тогда
							Область.Значение = Область.Значение + СуммаНДС;
						Иначе	
							Область.Значение = Область.Значение + Окр(СуммаНДС*СтруктураРеквизитовФормы.УдВес/100);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		
			
		ИначеЕсли ОбластьНачало = "s_300_00_014" Тогда			
			// ничего не делаем, поскольку передаем данные из 300.05
							
		ИначеЕсли ОбластьНачало = "s_300_00_016_i" ИЛИ ОбластьНачало = "s_300_00_016_ii" Тогда			
			Если Прав(ОбластьНачало,2) = "_i" Тогда
				Н = "1";
			Иначе // ИначеЕсли Прав(ОбластьНачало,3) = "_ii" Тогда
				Н = "2";
			КонецЕсли;
			
			СуммаБезНДС = Окр(?(Строка.СуммаБезНДСОборот <> NULL, Строка.СуммаБезНДСОборот, 0));
			СуммаНДС    = Окр(?(Строка.СуммаНДСОборот <> NULL, Строка.СуммаНДСОборот, 0));							
			
			Область = ТаблицаДанных.Найти("s_300_00_016_" + Н + "_a","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + СуммаБезНДС;
			КонецЕсли;
			
			// Проверим метод зачета
			Область = ТаблицаДанных.Найти("s_300_00_016_" + Н + "_b","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный  Тогда
					Область.Значение = Область.Значение + СуммаНДС;
				Иначе
					Если Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Облагаемый Тогда
						Область.Значение = Область.Значение + СуммаНДС;
					ИначеЕсли Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Освобожденный Тогда
						Область.Значение = Область.Значение + 0;
						s_300_00_026_2_b = s_300_00_026_2_b + СуммаНДС;
					ИначеЕсли Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Общий Тогда
						Если  мПропорцИРаздел Тогда
							Область.Значение = Область.Значение + СуммаНДС;
						Иначе	
							Область.Значение = Область.Значение + Окр(СуммаНДС*СтруктураРеквизитовФормы.УдВес/100);
							s_300_00_026_2_b = s_300_00_026_2_b + СуммаНДС - Окр(СуммаНДС*СтруктураРеквизитовФормы.УдВес/100);
						КонецЕсли;
					Иначе
						Если  мПропорцИРаздел Тогда
							Область.Значение = Область.Значение + СуммаНДС;
						Иначе	
							Область.Значение = Область.Значение + Окр(СуммаНДС*СтруктураРеквизитовФормы.УдВес/100);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;		
			
		Иначе		
			ТекстСообщения = НСтр("ru = 'Данные по коду строки %1, содержащиеся в регистре накопления ""%2"" не учтены в форме.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодСтроки, ?(Строка.Раздел = "Возмещение","НДС к возмещению","НДС"));			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);													 
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_026_2_b", s_300_00_026_2_b, Форма300ПолеТабличногоДокументаСтраница3);
	
	// обновим реквизит формы
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);
		
	Для Ном = 1 По 2 Цикл
		мСтруктураЗначений.Вставить("s_300_00_016_" + Строка(Ном) + "_a", РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_00_016_" + Строка(Ном) + "_a"));
		мСтруктураЗначений.Вставить("s_300_00_016_" + Строка(Ном) + "_b", РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_00_016_" + Строка(Ном) + "_b"));
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);
	
	//
	// передаем в качестве признака перезаполнения Истина, т.к. это главная форма
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма,ТекИмяФормы, Истина);
	
	ЗаполнитьПоле300_00_11();
		
	Модифицированность = Истина;	
	
КонецПроцедуры // Форма300ЗаполнитьАвтоНаСервере()

&НаКлиенте
Процедура Форма300ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Состояние("Расчет формы 300.00");		
	
	Форма300ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры	

//обход ситуации при очистки полей в клиент-сервер
&НаКлиенте
Процедура ПанельФорма300ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ПанельФорма300ПриСменеСтраницыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПанельФорма300ПриСменеСтраницыНаСервере()
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоле300_00_11()
	
	КодФормы300_00 = "Форма300";
	
	// Заполнить поле 300.00.01 для всех приложений, кроме 300.09.
	Для Каждого ПриложениеФормы300 Из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		
		// Поле 300.00.01 для приложения 300.09 заполняется ниже, а для приложения 300.00 не заполняется.
		Если ПриложениеФормы300.КодФормы <> "Форма300" Тогда
			
			ИмяОбласти = "Приложение" + Прав(ПриложениеФормы300.КодФормы, 2);
			Если ПриложениеФормы300.Выгружать Тогда
				РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы300_00, ИмяОбласти, "Х", Ложь);
			Иначе
				РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы300_00, ИмяОбласти, "", Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнить поле 300.00.01 для приложения 300.09.
	ИмяОбласти = "Приложение09";
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы300_00, ИмяОбласти, "", Ложь);
	
	// Обновить внешний вид формы 300.00.
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы300_00);
	
КонецПроцедуры

#КонецОбласти

#Область Форма300_01
&НаКлиенте
Процедура Форма300_01ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма300_01Расчет(Область.Имя, Область.Значение);
	КонецЕсли;
	    	    
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Форма300_01Расчет(ИмяЯчейки, ЗначениеЯчейки)
	Форма300_01РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки)
КонецПроцедуры

&НаСервере
Процедура Форма300_01РасчетНаСервере(знач ИмяЯчейки, знач ЗначениеЯчейки)	
	ТекИмяФормы = "Форма300_01";
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,ИмяЯчейки ,ЗначениеЯчейки);
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);			
	 //Расчет вычисляемых ячеек
	
	
	s_300_01_001 	= РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_01_001");
	s_300_01_001_1 	= РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_01_001_1");
	s_300_01_001_2 	= РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_01_001_2");
	s_300_01_001_3 	= РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_01_001_3");
	s_300_01_001_4  = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_01_001_4");
	s_300_01_001_5  = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_01_001_5");
	
	s_300_01_001_1_до = 0;
	s_300_01_001_2_до = 0;
	s_300_01_001_3_до = 0;
	s_300_01_001_4_до = 0;
	s_300_01_001_5_до = 0;
	
	Если мСтруктураЗначений <> Неопределено
		И мСтруктураЗначений.Свойство("s_300_01_001_1")
		И мСтруктураЗначений.Свойство("s_300_01_001_2")
		И мСтруктураЗначений.Свойство("s_300_01_001_3")
		И мСтруктураЗначений.Свойство("s_300_01_001_4")
		И мСтруктураЗначений.Свойство("s_300_01_001_5") Тогда
		
		мСтруктураЗначений.Свойство("s_300_01_001_1",s_300_01_001_1_до);  //прежнее значение данной области 
		мСтруктураЗначений.Свойство("s_300_01_001_2",s_300_01_001_2_до);  //прежнее значение данной области 
		мСтруктураЗначений.Свойство("s_300_01_001_3",s_300_01_001_3_до);  //прежнее значение данной области 
		мСтруктураЗначений.Свойство("s_300_01_001_4",s_300_01_001_4_до);  //прежнее значение данной области 
		мСтруктураЗначений.Свойство("s_300_01_001_5",s_300_01_001_5_до);  //прежнее значение данной области
		
		s_300_01_001 = s_300_01_001 
		- s_300_01_001_1_до + s_300_01_001_1 
		- s_300_01_001_2_до + s_300_01_001_2 
		- s_300_01_001_3_до + s_300_01_001_3 
		- s_300_01_001_4_до + s_300_01_001_4
		- s_300_01_001_5_до + s_300_01_001_5;			
		
	Иначе
		s_300_01_001 = s_300_01_001 + s_300_01_001_1 + s_300_01_001_2 + s_300_01_001_3 + s_300_01_001_4 + s_300_01_001_5;
	КонецЕсли;
	
	мСтруктураЗначений.Вставить("s_300_01_001_1",s_300_01_001_1);  //новое значение данной области 
	мСтруктураЗначений.Вставить("s_300_01_001_2",s_300_01_001_2);  //новое значение данной области 
	мСтруктураЗначений.Вставить("s_300_01_001_3",s_300_01_001_3);  //новое значение данной области
	мСтруктураЗначений.Вставить("s_300_01_001_4",s_300_01_001_4);  //новое значение данной области 
	мСтруктураЗначений.Вставить("s_300_01_001_5",s_300_01_001_5);  //новое значение данной области
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_01_001",s_300_01_001, Форма300_01ПолеТабличногоДокументаСтраница1);
	//Форма300_01ПолеТабличногоДокументаСтраница1.Области["s_300_01_001"].Значение = s_300_01_001;
	
	// если итоговое значение ввели меньше чем сумма входящих значений
	// то очищаем все значения
	Если s_300_01_001 < s_300_01_001_1 + s_300_01_001_2 + s_300_01_001_3 + s_300_01_001_4 + s_300_01_001_5 Тогда
		мСтруктураЗначений.Вставить("s_300_01_001_1",0);  //новое значение данной области 
		мСтруктураЗначений.Вставить("s_300_01_001_2",0);  //новое значение данной области 
		мСтруктураЗначений.Вставить("s_300_01_001_3",0);  //новое значение данной области 
		мСтруктураЗначений.Вставить("s_300_01_001_4",0);  //новое значение данной области 
		мСтруктураЗначений.Вставить("s_300_01_001_5",0);  //новое значение данной области
		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_01_001_1",0, Форма300_01ПолеТабличногоДокументаСтраница1);
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_01_001_2",0, Форма300_01ПолеТабличногоДокументаСтраница1);
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_01_001_3",0, Форма300_01ПолеТабличногоДокументаСтраница1);
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_01_001_4",0, Форма300_01ПолеТабличногоДокументаСтраница1);
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_01_001_5",0, Форма300_01ПолеТабличногоДокументаСтраница1);
	КонецЕсли;
	
	// расчет по строкам 300.01.003
	СтруктураВходящихЯчеек_01_003 = Новый Структура;
	Для Каждого СтрокаТаблицыДанных Из ТаблицаДанных Цикл
		ИмяОбласти = СтрокаТаблицыДанных.ИмяОбласти;
		Если СтрНайти(ИмяОбласти, "s_300_01_003__") <> 0 Тогда
			СтруктураВходящихЯчеек_01_003.Вставить(ИмяОбласти);
		КонецЕсли;	
	КонецЦикла;
	
	s_300_01_003 = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_01_003", СтруктураВходящихЯчеек_01_003, Истина, Форма300_01ПолеТабличногоДокументаСтраница1);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_01_003"  , s_300_01_003  , Форма300_01ПолеТабличногоДокументаСтраница1);
	
	s_300_01_004 = 0; // итого  (с s_300_01_001 по s_300_01_003)
	s_300_01_008 = 0; // итого  (с s_300_01_008 по s_300_01_007)
	
	Для Н = 1 По 3 Цикл
		ИмяГрафы = "s_300_01_00" + Строка(Н);
		s_300_01_004 = s_300_01_004 + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяГрафы);
	КонецЦикла;
	
	Для Н = 5 По 7 Цикл
		ИмяГрафы = "s_300_01_0" + Формат(Н,"ЧЦ=2; ЧВН=");
		s_300_01_008 = s_300_01_008 + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяГрафы);
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_01_004", s_300_01_004, Форма300_01ПолеТабличногоДокументаСтраница1);
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_01_008", s_300_01_008, Форма300_01ПолеТабличногоДокументаСтраница1);
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);			
	
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ТекИмяФормы);
КонецПроцедуры

&НаСервере
Функция Форма300_01РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
    Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("НачПериода", 	  СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", 	  Новый Граница(КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СтавкаНДС",		  0);
	Запрос.УстановитьПараметр("КодСтроки", 		  "300.01%" );
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(НДСОбороты.ОборотПоРеализацииОборот) КАК ОборотПоРеализацииОборот,
	|	КодыСтрокДекларацииПоНДС.КодСтроки КАК КодСтроки,
	|	НДСОбороты.ВидОперацииРеализации
	|ИЗ
	|	РегистрНакопления.НДС.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			Регистратор,
	|			Налогоплательщик = &Налогоплательщик
	|				И СтавкаНДС.Ставка = &СтавкаНДС
	|				И НЕ СтавкаНДС.ДляОсвобожденногоОборота
	|				И НЕ СтавкаНДС.МестоРеализацииНеРК
	|				И НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСОблагаемыйИмпорт)) КАК НДСОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДС.СрезПоследних(&КонПериода, ) КАК КодыСтрокДекларацииПоНДС
	|		ПО НДСОбороты.ВидОперацииРеализации = КодыСтрокДекларацииПоНДС.ВидОперации
	|ГДЕ
	|	КодыСтрокДекларацииПоНДС.КодСтроки ПОДОБНО &КодСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	КодыСтрокДекларацииПоНДС.КодСтроки,
	|	НДСОбороты.ВидОперацииРеализации
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодСтроки" ;
	
	РезультатЗапроса = Запрос.Выполнить();          	
	Если РезультатЗапроса.Пустой() И ВыдаватьСообщения Тогда		
		ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 300.01 за отчетный период отсутствуют...'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);													 
	КонецЕсли;
	
    Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции // Форма300_01РассчитатьДанныеФормы()

&НаКлиенте
Процедура Форма300_01ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Состояние("Расчет формы 300.01");		
	
	Форма300_01ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры	

&НаСервере
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма300_01ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма300_01";
	
	Если Не Перезаполнить Тогда
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", ТекИмяФормы));
		Если СтрокаФормы <> Неопределено Тогда
			Если СтрокаФормы.Автозаполнение = Ложь Тогда
				Возврат;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
			
	Очистить(ТекИмяФормы,Истина);
	
	ТаблицаОтчета = Форма300_01РассчитатьДанныеФормы(Истина);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);
	
	ВидыОперацийРеализации  = Новый Массив;
	МаксимальныйНомерСтроки_300_01_003 = 0;
	Для Каждого Строка Из ТаблицаОтчета Цикл
	    ОбластьНачало = РегламентированнаяОтчетностьКлиентСервер.ПреобразоватьКодДекларации(Строка.КодСтроки);
		Если ОбластьНачало = "s_300_01_001" Тогда
			Область = ТаблицаДанных.Найти("s_300_01_001","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + Окр(?(Строка.ОборотПоРеализацииОборот <> NULL, Строка.ОборотПоРеализацииОборот, 0));
			КонецЕсли;
		ИначеЕсли ОбластьНачало = "s_300_01_001_i" Тогда
			Область = ТаблицаДанных.Найти("s_300_01_001_1","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + Окр(?(Строка.ОборотПоРеализацииОборот <> NULL, Строка.ОборотПоРеализацииОборот, 0));			
			КонецЕсли;
		ИначеЕсли ОбластьНачало = "s_300_01_001_ii" Тогда
			Область = ТаблицаДанных.Найти("s_300_01_001_2","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + Окр(?(Строка.ОборотПоРеализацииОборот <> NULL, Строка.ОборотПоРеализацииОборот, 0));
			КонецЕсли;
		ИначеЕсли ОбластьНачало = "s_300_01_001_iii" Тогда
			Область = ТаблицаДанных.Найти("s_300_01_001_3","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + Окр(?(Строка.ОборотПоРеализацииОборот <> NULL, Строка.ОборотПоРеализацииОборот, 0));
			КонецЕсли;
		ИначеЕсли ОбластьНачало = "s_300_01_001_iv" Тогда
			Область = ТаблицаДанных.Найти("s_300_01_001_4","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + Окр(?(Строка.ОборотПоРеализацииОборот <> NULL, Строка.ОборотПоРеализацииОборот, 0));
			КонецЕсли;	
		ИначеЕсли ОбластьНачало = "s_300_01_001_v" Тогда
			Область = ТаблицаДанных.Найти("s_300_01_001_5","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + Окр(?(Строка.ОборотПоРеализацииОборот <> NULL, Строка.ОборотПоРеализацииОборот, 0));
			КонецЕсли;			
		ИначеЕсли ОбластьНачало = "s_300_01_002" Тогда
			Область = ТаблицаДанных.Найти("s_300_01_002","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + Окр(?(Строка.ОборотПоРеализацииОборот <> NULL, Строка.ОборотПоРеализацииОборот, 0));
			КонецЕсли;
		ИначеЕсли ОбластьНачало = "s_300_01_004" Тогда
			Область = ТаблицаДанных.Найти("s_300_01_004","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + Окр(?(Строка.ОборотПоРеализацииОборот <> NULL, Строка.ОборотПоРеализацииОборот, 0));
			КонецЕсли;
		ИначеЕсли ОбластьНачало = "s_300_01_005" Тогда
			Область = ТаблицаДанных.Найти("s_300_01_005","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + Окр(?(Строка.ОборотПоРеализацииОборот <> NULL, Строка.ОборотПоРеализацииОборот, 0));
			КонецЕсли;
	    ИначеЕсли ОбластьНачало = "s_300_01_006" Тогда
			Область = ТаблицаДанных.Найти("s_300_01_006","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + Окр(?(Строка.ОборотПоРеализацииОборот <> NULL, Строка.ОборотПоРеализацииОборот, 0));
			КонецЕсли;
        ИначеЕсли СтрНайти(Строка.КодСтроки, "300.01.003") <> 0 Тогда
			КодОсновнойСтроки = Лев(Строка.КодСтроки,10);
			ИмяОбластиМакета = "НДС_Реализация_" + СтрЗаменить(КодОсновнойСтроки, ".", "_");
			ОбластьДополнительныхСтрок = мМакетКодовСтрок.Области.Найти(ИмяОбластиМакета);
			КодДополнительнойСтроки = Прав(Строка.КодСтроки, СтрДлина(Строка.КодСтроки) - 11);
			НаименованиеКодаСтрокиДополнительнаяЧасть = "";
			
			Если ОбластьДополнительныхСтрок <> Неопределено Тогда
				НаименованиеКодаСтрокиДополнительнаяЧасть = РегламентированнаяОтчетность.ПолучитьНаименованиеСтрокиКлассификатораПоКоду(мМакетКодовСтрок, ОбластьДополнительныхСтрок, КодДополнительнойСтроки);
			КонецЕсли;
			
			Если НаименованиеКодаСтрокиДополнительнаяЧасть = "" Тогда
				ТекстСообщения = НСтр("ru = 'Данные по коду строки %1, содержащиеся в регистре накопления ""НДС"" не учтены в форме.'");								
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодСтроки);			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			ИндексВидаОперации = ВидыОперацийРеализации.Найти(Строка.КодСтроки);
			Если ИндексВидаОперации = Неопределено И МаксимальныйНомерСтроки_300_01_003 < 5 Тогда
				ВидыОперацийРеализации.Добавить(Строка.КодСтроки);
				ИндексВидаОперации = ВидыОперацийРеализации.Количество() - 1;
				МаксимальныйНомерСтроки_300_01_003 = МаксимальныйНомерСтроки_300_01_003 + 1;
			КонецЕсли;	
			
			Если ИндексВидаОперации = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Данные по коду строки %1, содержащиеся в регистре накопления ""НДС"" не учтены в форме.'");								
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодСтроки);			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
				Продолжить;
			КонецЕсли;	
			ИмяОбласти = "s_300_01_003_text__" + Строка(ИндексВидаОперации + 1);
			Область = ТаблицаДанных.Найти(ИмяОбласти,"ИмяОбласти");
			Если Область = Неопределено Тогда
				Область = ТаблицаДанных.Добавить();
				Область.ИмяОбласти	= ИмяОбласти;
			КонецЕсли;
			
			Область.Значение 	= КодДополнительнойСтроки;
			
			ИмяОбласти = "s_300_01_003__" + Строка(ИндексВидаОперации + 1);
			Область = ТаблицаДанных.Найти(ИмяОбласти,"ИмяОбласти");
			Если Область = Неопределено Тогда
				Область 			= ТаблицаДанных.Добавить();
				Область.ИмяОбласти	= ИмяОбласти;
				Область.Значение	= 0;	
			КонецЕсли;	
			Область.Значение 	= Область.Значение + Окр(?(Строка.ОборотПоРеализацииОборот <> NULL, Строка.ОборотПоРеализацииОборот, 0));
		Иначе
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Данные по коду строки %1, содержащиеся в регистре накопления ""НДС"" не учтены в форме.'"), Строка.КодСтроки);			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);				
		КонецЕсли;		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мМаксимальныеНормераПодстрокЯчеек.Вставить("field_300_01_003",?(МаксимальныйНомерСтроки_300_01_003 < 5, 5, МаксимальныйНомерСтроки_300_01_003));
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);
	ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);	
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма,ТекИмяФормы,Перезаполнить);	         			
КонецПроцедуры // Форма300_01ЗаполнитьАвтоНаСервере()

///////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура Форма300_01ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Элемент.ТекущаяОбласть.Имя;	
	
	Если СтрНайти(Ячейка, "text__") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
		
		ИмяРаздела = Сред(Ячейка,3,10);
		КодРаздела = Прав(ИмяРаздела, 3);
		ИмяОбласти = "НДС_Реализация_" + ИмяРаздела;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИмяМакета"			  	, "КодыСтрокНалоговыхДеклараций");
		ПараметрыФормы.Вставить("ИмяСекции"			  	, ИмяОбласти);
		ПараметрыФормы.Вставить("ПолучатьПолныеДанные"	, Истина);
		ПараметрыФормы.Вставить("ТекущийКодСтроки"	  	, Элемент.ТекущаяОбласть.Значение);
		ПараметрыФормы.Вставить("ИмяЯчейки"	  			, Ячейка);
		
		
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_01ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыФормы);
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура  Форма300_01ОбработкаВыбораЗначений(Результат, ПараметрыВыбора) Экспорт 
	ТекИмяФормы = "Форма300_01";
	Если Результат = Неопределено Тогда
		Возврат;
	Иначе
		ВыбранноеЗначение = Результат;
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 
			ВыбранноеЗначение = ВыбранноеЗначение.Наименование;
		КонецЕсли;
	КонецЕсли;
	
	Форма300_01ОбработкаВыбораЗначенийНаСервере(ВыбранноеЗначение, ПараметрыВыбора.ИмяЯчейки); 	
	
КонецПроцедуры

&НаСервере
Процедура  Форма300_01ОбработкаВыбораЗначенийНаСервере(Результат, ИмяЯчейки)
	
	ЭтотОбъект.Форма300_01ПолеТабличногоДокументаСтраница1.Области[ИмяЯчейки].Значение = Результат;
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, "Форма300_01", ИмяЯчейки, Результат, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Форма300_02

&НаКлиенте
Процедура Форма300_02ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма300_02Расчет(Область.Имя, Область.Значение);
	КонецЕсли;
	    	    
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Форма300_02ПолеТабличногоДокументаСтраница2ПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма300_02Расчет(Область.Имя, Область.Значение);
	КонецЕсли;
	    	    
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Форма300_02Расчет(ИмяЯчейки, ЗначениеЯчейки)
	Форма300_02РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки)
КонецПроцедуры

&НаСервере
Процедура Форма300_02РасчетНаСервере(знач ИмяЯчейки, знач ЗначениеЯчейки)
	ТекИмяФормы = "Форма300_02";
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,ИмяЯчейки ,ЗначениеЯчейки);
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);			
	
	//Расчет вычисляемых ячеек	
	
	СтруктураВходящихЯчеек_02_001 = Новый Структура;
	СтруктураВходящихЯчеек_02_010 = Новый Структура;
	Для Каждого СтрокаТаблицыДанных Из ТаблицаДанных Цикл
		ИмяОбласти = СтрокаТаблицыДанных.ИмяОбласти;
		Если СтрНайти(ИмяОбласти, "s_300_02_001__") <> 0 Тогда
			СтруктураВходящихЯчеек_02_001.Вставить(ИмяОбласти);
		ИначеЕсли СтрНайти(ИмяОбласти, "s_300_02_010__") <> 0  Тогда
			СтруктураВходящихЯчеек_02_010.Вставить(ИмяОбласти);
		КонецЕсли;	
	КонецЦикла;
	
	s_300_02_001 = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_02_001", СтруктураВходящихЯчеек_02_001, Истина, Форма300_02ПолеТабличногоДокументаСтраница1);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_02_001"  , s_300_02_001  , Форма300_02ПолеТабличногоДокументаСтраница1);
	
	s_300_02_010 = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_02_010", СтруктураВходящихЯчеек_02_010, Истина, Форма300_02ПолеТабличногоДокументаСтраница1);
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_02_010"  , s_300_02_010  , Форма300_02ПолеТабличногоДокументаСтраница1);
	
	
	S_300_02_001 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_001");
	S_300_02_002 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_002");
	S_300_02_003 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_003");
	S_300_02_004 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_004");
	S_300_02_005 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_005");
	S_300_02_006 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_006");
	S_300_02_007 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_007");
	S_300_02_008 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_008");
	
	ИтогЗначение = S_300_02_001 + S_300_02_002 + S_300_02_003 + S_300_02_004 + S_300_02_005 + S_300_02_006 + S_300_02_007 + S_300_02_008;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_02_009", ИтогЗначение, Форма300_02ПолеТабличногоДокументаСтраница1);
	
	S_300_02_010 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_010");
	S_300_02_011 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_011");
	S_300_02_012 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_012");
	S_300_02_013 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_013");
	
	ИтогЗначение = S_300_02_010 + S_300_02_011 + S_300_02_012 + S_300_02_013;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_02_014", ИтогЗначение, Форма300_02ПолеТабличногоДокументаСтраница1);						
		
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);			
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ТекИмяФормы);
КонецПроцедуры

&НаСервере
Функция Форма300_02РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
  Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Налогоплательщик", 	Налогоплательщик);
	Запрос.УстановитьПараметр("НачПериода",			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", 		Новый Граница(КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КодСтроки",			"300.02.%" );
	
	КодСтрокИмпорта = Новый Массив;
	КодСтрокИмпорта.Добавить("300.02.011");
	КодСтрокИмпорта.Добавить("300.02.012");
	КодСтрокИмпорта.Добавить("300.02.013");
	
	Запрос.УстановитьПараметр("КодСтроки010",       "300.02.010%");		
	Запрос.УстановитьПараметр("КодСтрокИмпорта",    КодСтрокИмпорта);
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КодыСтрокДекларацииПоНДС.КодСтроки КАК КодСтроки,
	|	СУММА(НДСОбороты.ОборотПоРеализацииОборот) КАК Сумма,
	|	""Реализация"" КАК Раздел
	|ИЗ
	|	РегистрНакопления.НДС.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			,
	|			Налогоплательщик = &Налогоплательщик
	|				И СтавкаНДС.ДляОсвобожденногоОборота = ИСТИНА И СтавкаНДС.МестоРеализацииНеРК = ЛОЖЬ
	|				И НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСОблагаемыйИмпорт)) КАК НДСОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДС.СрезПоследних(&КонПериода, ) КАК КодыСтрокДекларацииПоНДС
	|		ПО НДСОбороты.ВидОперацииРеализации = КодыСтрокДекларацииПоНДС.ВидОперации
	|ГДЕ
	|	КодыСтрокДекларацииПоНДС.КодСтроки ПОДОБНО &КодСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	КодыСтрокДекларацииПоНДС.КодСтроки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки,
	|	СУММА(НДСКВозмещениюОбороты.СуммаБезНДСОборот),
	|	""Возмещение""
	|ИЗ
	|	РегистрНакопления.НДСКВозмещению.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			,
	|			Налогоплательщик = &Налогоплательщик
	|				И СтавкаНДС.ДляОсвобожденногоОборота = ИСТИНА И СтавкаНДС.МестоРеализацииНеРК = ЛОЖЬ) КАК НДСКВозмещениюОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДСКЗачету.СрезПоследних(&КонПериода, ) КАК КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних
	|		ПО НДСКВозмещениюОбороты.ВидОборота = КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОборота
	|			И НДСКВозмещениюОбороты.ВидОперацииПоступления = КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОперации
	|ГДЕ
	|	(КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки ПОДОБНО &КодСтроки010
	|			ИЛИ КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки В (&КодСтрокИмпорта))
	|
	|СГРУППИРОВАТЬ ПО
	|	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();          	
	Если РезультатЗапроса.Пустой() И ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 300.02 за отчетный период отсутствуют...'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);													 
	КонецЕсли;
	
    Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции // Форма300_02РассчитатьДанныеФормы()

&НаКлиенте
Процедура Форма300_02ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Состояние("Расчет формы 300.02");		
	
	Форма300_02ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры	

&НаСервере
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма300_02ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма300_02";
	
	Если Не Перезаполнить Тогда
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", ТекИмяФормы));
		Если СтрокаФормы <> Неопределено Тогда
			Если СтрокаФормы.Автозаполнение = Ложь Тогда
				Возврат;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Очистить(ТекИмяФормы,Истина);
	
	ТаблицаОтчета = Форма300_02РассчитатьДанныеФормы(Истина);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);
	
	ВидыОперацийРеализации  = Новый Массив;
	ВидыОперацийПоступлений = Новый Массив;
	
	МаксимальныйНомерСтроки_300_02_001 = 0;
	МаксимальныйНомерСтроки_300_02_010 = 0;
	Для Каждого Строка Из ТаблицаОтчета Цикл
		ИмяСтроки = РегламентированнаяОтчетностьКлиентСервер.ПреобразоватьКодДекларации(Строка.КодСтроки);				
		
        Если СтрНайти(ИмяСтроки, "s_300_02_001") <> 0 Тогда
			
			КодОсновнойСтроки = Лев(Строка.КодСтроки,10);
			ИмяОбластиМакета = "НДС_Реализация_" + СтрЗаменить(КодОсновнойСтроки, ".", "_");
			ОбластьДополнительныхСтрок = мМакетКодовСтрок.Области.Найти(ИмяОбластиМакета);
			КодДополнительнойСтроки = Прав(Строка.КодСтроки, СтрДлина(Строка.КодСтроки) - 11);
			НаименованиеКодаСтрокиДополнительнаяЧасть = "";
			
			Если ОбластьДополнительныхСтрок <> Неопределено Тогда
				НаименованиеКодаСтрокиДополнительнаяЧасть = РегламентированнаяОтчетность.ПолучитьНаименованиеСтрокиКлассификатораПоКоду(мМакетКодовСтрок, ОбластьДополнительныхСтрок, КодДополнительнойСтроки);
			КонецЕсли;
			
			Если НаименованиеКодаСтрокиДополнительнаяЧасть = "" Тогда
				ТекстСообщения = НСтр("ru = 'Данные по коду строки %1, содержащиеся в регистре накопления ""%2"" не учтены в форме.'");								
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодСтроки,  ?(Строка.Раздел = "Возмещение","НДС к возмещению","НДС"));			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
				Продолжить;
			КонецЕсли;
			
			ИндексВидаОперации = ВидыОперацийРеализации.Найти(Строка.КодСтроки);
			Если ИндексВидаОперации = Неопределено И МаксимальныйНомерСтроки_300_02_001 < 5 Тогда
				ВидыОперацийРеализации.Добавить(Строка.КодСтроки);
				ИндексВидаОперации = ВидыОперацийРеализации.Количество() - 1;
				МаксимальныйНомерСтроки_300_02_001 = МаксимальныйНомерСтроки_300_02_001 + 1;
			КонецЕсли;	
			
			Если ИндексВидаОперации = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Данные по коду строки %1, содержащиеся в регистре накопления ""%2"" не учтены в форме.'");								
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодСтроки,  ?(Строка.Раздел = "Возмещение","НДС к возмещению","НДС"));			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
				Продолжить;
			КонецЕсли;
			
			ИмяОбласти = "s_300_02_001_text__" + Строка(ИндексВидаОперации + 1);
			Область = ТаблицаДанных.Найти(ИмяОбласти,"ИмяОбласти");
			Если Область = Неопределено Тогда
				Область = ТаблицаДанных.Добавить();
				Область.ИмяОбласти	= ИмяОбласти;
			КонецЕсли;
			
			Область.Значение 	= КодДополнительнойСтроки;
			
			ИмяОбласти = "s_300_02_001__" + Строка(ИндексВидаОперации + 1);
			Область = ТаблицаДанных.Найти(ИмяОбласти,"ИмяОбласти");
			Если Область = Неопределено Тогда
				Область 			= ТаблицаДанных.Добавить();
				Область.ИмяОбласти	= ИмяОбласти;
				Область.Значение	= 0;	
			КонецЕсли;	
			Область.Значение 	= Область.Значение + Окр(?(Строка.Сумма <> NULL, Строка.Сумма, 0));
		ИначеЕсли СтрНайти(ИмяСтроки, "s_300_02_010") <> 0 Тогда
			
			КодОсновнойСтроки = Лев(Строка.КодСтроки,10);
			ИмяОбластиМакета = "НДС_Зачет_" + СтрЗаменить(КодОсновнойСтроки, ".", "_");
			ОбластьДополнительныхСтрок = мМакетКодовСтрок.Области.Найти(ИмяОбластиМакета);
			КодДополнительнойСтроки = Прав(Строка.КодСтроки, СтрДлина(Строка.КодСтроки) - 11);
			НаименованиеКодаСтрокиДополнительнаяЧасть = "";
			
			Если ОбластьДополнительныхСтрок <> Неопределено Тогда
				НаименованиеКодаСтрокиДополнительнаяЧасть = РегламентированнаяОтчетность.ПолучитьНаименованиеСтрокиКлассификатораПоКоду(мМакетКодовСтрок, ОбластьДополнительныхСтрок, КодДополнительнойСтроки);
			КонецЕсли;
			
			Если НаименованиеКодаСтрокиДополнительнаяЧасть = "" Тогда
				ТекстСообщения = НСтр("ru = 'Данные по коду строки %1, содержащиеся в регистре накопления ""%2"" не учтены в форме.'");								
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодСтроки,  ?(Строка.Раздел = "Возмещение","НДС к возмещению","НДС"));			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
				Продолжить;
			КонецЕсли;
			
			ИндексВидаОперации = ВидыОперацийПоступлений.Найти(Строка.КодСтроки);
			Если ИндексВидаОперации = Неопределено И МаксимальныйНомерСтроки_300_02_010 < 5 Тогда
				ВидыОперацийПоступлений.Добавить(Строка.КодСтроки);
				ИндексВидаОперации = ВидыОперацийПоступлений.Количество() - 1;
				МаксимальныйНомерСтроки_300_02_010 = МаксимальныйНомерСтроки_300_02_010 + 1;
			КонецЕсли;
			Если ИндексВидаОперации = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Данные по коду строки %1, содержащиеся в регистре накопления ""%2"" не учтены в форме.'");								
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодСтроки,  ?(Строка.Раздел = "Возмещение","НДС к возмещению","НДС"));			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
				Продолжить;
			КонецЕсли;
			ИмяОбласти = "s_300_02_010_text__" + Строка(ИндексВидаОперации + 1);
			Область = ТаблицаДанных.Найти(ИмяОбласти,"ИмяОбласти");
			Если Область = Неопределено Тогда
				Область = ТаблицаДанных.Добавить();
				Область.ИмяОбласти	= ИмяОбласти;
			КонецЕсли;	
			
			Область.Значение 	= КодДополнительнойСтроки;
			
			ИмяОбласти = "s_300_02_010__" + Строка(ИндексВидаОперации + 1);
			Область = ТаблицаДанных.Найти(ИмяОбласти,"ИмяОбласти");
			Если Область = Неопределено Тогда
				Область 			= ТаблицаДанных.Добавить();
				Область.ИмяОбласти	= ИмяОбласти;
				Область.Значение	= 0;	
			КонецЕсли;	
			Область.Значение 	= Область.Значение + Окр(?(Строка.Сумма <> NULL, Строка.Сумма, 0));
		ИначеЕсли ТаблицаДанных.Найти(ИмяСтроки, "ИмяОбласти") <> Неопределено Тогда
			ЗначениеСтроки = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяСтроки) + Окр(?(Строка.Сумма <> NULL, Строка.Сумма, 0));
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяСтроки, ЗначениеСтроки);		
			
			 ////Если это подстрока другой строки, то добавим к итогам
			Если СтрДлина(ИмяСтроки) > 13 Тогда
				ИмяИтоговойСтроки =  Лев(ИмяСтроки,12);
				ОбластьИтог = ТаблицаДанных.Найти(ИмяИтоговойСтроки, "ИмяОбласти");
				Если ОбластьИтог <> Неопределено Тогда
					ОбластьИтог.Значение = ОбластьИтог.Значение + Окр(?(Строка.Сумма <> NULL, Строка.Сумма, 0));
				КонецЕсли;
			КонецЕсли;				
		Иначе						
			ТекстСообщения = НСтр("ru = 'Данные по коду строки %1, содержащиеся в регистре накопления ""%2"" не учтены в форме.'");								
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодСтроки,  ?(Строка.Раздел = "Возмещение","НДС к возмещению","НДС"));			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
		КонецЕсли;
				
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мМаксимальныеНормераПодстрокЯчеек.Вставить("field_300_02_001",?(МаксимальныйНомерСтроки_300_02_001 < 5, 5, МаксимальныйНомерСтроки_300_02_001));
	СтруктураРеквизитовФормы.мМаксимальныеНормераПодстрокЯчеек.Вставить("field_300_02_010",?(МаксимальныйНомерСтроки_300_02_010 < 5, 5, МаксимальныйНомерСтроки_300_02_010));

	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);				
	ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтотОбъект,ТекИмяФормы,Перезаполнить);	         			
КонецПроцедуры // Форма300_02ЗаполнитьАвтоНаСервере()

&НаКлиенте
Процедура Форма300_02ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	
	Ячейка = Элемент.ТекущаяОбласть.Имя;	
	
	Если СтрНайти(Ячейка, "text__") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
		
		ИмяРаздела = Сред(Ячейка,3,10);
		КодРаздела = Прав(ИмяРаздела, 3);
		Если КодРаздела = "001" Тогда
			ИмяОбласти = "НДС_Реализация_" + ИмяРаздела;
		Иначе
			ИмяОбласти = "НДС_Зачет_" + ИмяРаздела;
		КонецЕсли;	
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИмяМакета"			  	, "КодыСтрокНалоговыхДеклараций");
		ПараметрыФормы.Вставить("ИмяСекции"			  	, ИмяОбласти);
		ПараметрыФормы.Вставить("ПолучатьПолныеДанные"	, Истина);
		ПараметрыФормы.Вставить("ТекущийКодСтроки"	  	, Элемент.ТекущаяОбласть.Значение);
		ПараметрыФормы.Вставить("ИмяЯчейки"	  			, Ячейка);
		
		
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_02ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыФормы);
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура  Форма300_02ОбработкаВыбораЗначений(Результат, ПараметрыВыбора) экспорт
	ТекИмяФормы = "Форма300_02";
	Если Результат = Неопределено Тогда
		Возврат;
	Иначе
		ВыбранноеЗначение = Результат;
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 
			ВыбранноеЗначение = ВыбранноеЗначение.Наименование;
		КонецЕсли;
	КонецЕсли;
	
	Форма300_02ОбработкаВыбораЗначенийНаСервере(ВыбранноеЗначение, ПараметрыВыбора.ИмяЯчейки); 	
	
КонецПроцедуры

&НаСервере
Процедура  Форма300_02ОбработкаВыбораЗначенийНаСервере(Результат, ИмяЯчейки)
	
	ЭтотОбъект.Форма300_02ПолеТабличногоДокументаСтраница1.Области[ИмяЯчейки].Значение = Результат;
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, "Форма300_02", ИмяЯчейки, Результат, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Форма300_03

&НаКлиенте
Процедура Форма300_03ОбработкаВыбораЗначений(Результат, ПараметрыВыбора) экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли ПараметрыВыбора.ЭлементВыбора = "КодВидаИмпорта" Тогда
		ВыбранныйЭлемент = Результат.Значение
	Иначе
		ВыбранныйЭлемент = Результат;
	КонецЕсли;
	
	Форма300_03ОбработкаВыбораЗначенийНаСервере(ВыбранныйЭлемент, ПараметрыВыбора);
	
КонецПроцедуры

&НаСервере
Процедура Форма300_03ОбработкаВыбораЗначенийНаСервере(Результат, ПараметрыВыбора)
	
	Значение = Неопределено;
	Расшифровка = Неопределено;
	
	Попытка
		
		НомерЯчейки = Число(Сред(ПараметрыВыбора.Ячейка, Найти(ПараметрыВыбора.Ячейка, "__")+ 2));
		
		Если ТипЗнч(Результат) = Тип("СправочникСсылка.НомераГТД") Тогда
			Значение = СокрЛП(Результат.Код);
			Расшифровка = Результат;
		Иначе
			Значение = Результат;
			Расшифровка = Результат;
		КонецЕсли;		
		
	Исключение
		
		Значение = Результат;
		Расшифровка = Результат;
		
	КонецПопытки;
	
	Форма300_03ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы, ПараметрыВыбора.Ячейка, Значение, Результат, ПараметрыВыбора.ПризнакРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура Форма300_03ПолеТабличногоДокументаЛистAВыбор(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Ячейка = Элемент.ТекущаяОбласть.Имя;	
	Если (Найти(Ячейка, "Ф300_03") = 0) Тогда
		Возврат;
	КонецЕсли;		
	Значение = Элемент.ТекущаяОбласть.Значение;
	
	ТекИмяФормы = "Форма300_03";
	ИмяЛиста 	= "ЛистA";
	ПризнакРасчета = Ложь;        	
		
	Если (Найти(Ячейка, "Ф300_03_B__") > 0) Тогда
		 
		 ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "НомерГТД", ПризнакРасчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_03ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		ОткрытьФорму("Справочник.НомераГТД.ФормаВыбора",,ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
				
		ПризнакРасчета = Истина;
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Показатели", ПризнакРасчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_03ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);		
		
		Если Найти(Ячейка, "Ф300_03_C__") > 0 Тогда
			ПоказатьВводЧисла(ОписаниеОповещения, Значение, "Введите сумму НДС согласно ГТД", 12,0);					
		ИначеЕсли Найти(Ячейка, "Ф300_03_D__") > 0 Тогда
			ПоказатьВводДаты(ОписаниеОповещения, Значение, "Введите срок платежа", ЧастиДаты.Дата)
		Иначе
			Возврат
		//ИначеЕсли Найти(Ячейка, "Ф300_03_C") > 0 Тогда
		//	ПоказатьВводЧисла(ОписаниеОповещения, Значение, "Введите итоговую сумму", 12,0);			 			 
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Форма300_03ПолеТабличногоДокументаЛистBВыбор(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Ячейка = Элемент.ТекущаяОбласть.Имя;	
	Если (Найти(Ячейка, "Ф300_03") = 0) Тогда
		Возврат;
	КонецЕсли;
	Значение = Элемент.ТекущаяОбласть.Значение;
	
	ТекИмяФормы = "Форма300_03";
	ИмяЛиста 	= "ЛистB";
	ПризнакРасчета = Истина;        	
	
	Если Найти(Ячейка, "Ф300_03_") > 0 Тогда
		
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Показатели", ПризнакРасчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_03ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		ПризнакРасчета = Истина;
		Если (Найти(Ячейка, "Ф300_03_E__") > 0) Тогда
			
			ПоказатьВводЧисла(ОписаниеОповещения, Значение, "Введите сумму уплаченного НДС в отчетном периоде", 12,0);
			
		ИначеЕсли (Найти(Ячейка, "Ф300_03_F__") > 0) Тогда
			
			ПоказатьВводЧисла(ОписаниеОповещения, Значение, "Введите сумму уплаченного НДС в предыдущие налоговые периоды", 12,0);
			
		//	// Заполним вручную итоговые ячейки
		//ИначеЕсли (Найти(Ячейка, "Ф300_03_E") > 0) Тогда
		//	ПоказатьВводЧисла(ОписаниеОповещения, Значение, "Введите итоговую сумму", 12,0);			 	 
		//	
		//ИначеЕсли (Найти(Ячейка, "Ф300_03_F") > 0) Тогда
		//	
		//	ПокаатьВводЧисла(ОписаниеОповещения, Значение, "Введите итоговую сумму", 12,0);
			
		Иначе
			Возврат;
		КонецЕсли;		 		 	
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура Форма300_03ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка, Значение, ЗначениеРасшифровки, ПризнакРасчета)
	
	Перем СтруктураГруппы;
	
	ЭтотОбъект["Форма300_03ПолеТабличногоДокумента" + ИмяЛиста].Области[Ячейка].Значение 	= Значение;
	ЭтотОбъект["Форма300_03ПолеТабличногоДокумента" + ИмяЛиста].Области[Ячейка].Расшифровка = ЗначениеРасшифровки;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтотОбъект, ИмяЛиста, Ячейка, Значение, ПризнакРасчета, ЗначениеРасшифровки);		
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ЭтотОбъект.КодФормы);
	
	мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект);
	мМногострочнаяСтруктура.Свойство(ИмяЛиста, СтруктураГруппы);
	ОбщиеЭлементыГруппы = СтруктураГруппы.ШапкаИПодвал; 
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
	
	Если Найти(Ячейка, "Ф300_03_E") > 0 Тогда
		МассивСтрок = ОбщиеЭлементыГруппы.НайтиСтроки(Новый Структура("ИмяОбласти", "Ф300_03_E"));
		Если МассивСтрок.Количество() = 0 Тогда
			Ф300_03_E = 0;
		Иначе
			Ф300_03_E = МассивСтрок[0].Значение;	
		КонецЕсли;	
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтотОбъект, ИмяЛиста, "Знач300_03_E", Ф300_03_E, ПризнакРасчета,ЗначениеРасшифровки);
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ЭтотОбъект.КодФормы);
	ИначеЕсли  Найти(Ячейка, "Ф300_03_C") > 0 Тогда
		МассивСтрок = ОбщиеЭлементыГруппы.НайтиСтроки(Новый Структура("ИмяОбласти", "Ф300_03_C"));
		Если МассивСтрок.Количество() = 0 Тогда
			Ф300_03_C = 0;
		Иначе
			Ф300_03_C = МассивСтрок[0].Значение;	
		КонецЕсли;	
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтотОбъект, ИмяЛиста, "Знач300_03_C", Ф300_03_C, ПризнакРасчета,ЗначениеРасшифровки);
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ЭтотОбъект.КодФормы);
	КонецЕсли;

КонецПроцедуры

&НаСервере
// Процедура расчитывает значения определенных граф по строке
// многострочной формы.
//
// Параметры:
//      Инд - номер строки многострочной формы
//      Колонка - имя графы (ячейки), из которой была вызвана процедура расчета
//
Процедура Форма300_03РасчетНаСервере(знач Инд, знач Колонка)
	
	// Если Инд = 0, значит процедура вызвана из ячеек шапки и подвала
	
	Перем СтруктураГруппы;
	
	ТекИмяФормы = "Форма300_03";
	
	Если ЗначениеЗаполнено(Инд)  Тогда
		Индекс = Инд-1;
	КонецЕсли;
	
	мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект);
	
	мМногострочнаяСтруктура.Свойство("ЛистA", СтруктураГруппы);
	ОбщиеЭлементыГруппы = СтруктураГруппы.ШапкаИПодвал; 
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
	    	
	
	Если Инд <> 0 Тогда
		C = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф300_03_C = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф300_03_C);	
	Иначе
		C = ?(ОбщиеЭлементыГруппы.Найти("Ф300_03_C", "ИмяОбласти") = Неопределено, 0, ОбщиеЭлементыГруппы.Найти("Ф300_03_C", "ИмяОбласти").Значение);	 
	КонецЕсли;	
	
	//рассчитаем вычисляемые ячейки
	//G = C-(E+F)                                                                            	
	
	мМногострочнаяСтруктура.Свойство("ЛистB", СтруктураГруппы);
	ОбщиеЭлементыГруппы = СтруктураГруппы.ШапкаИПодвал; 
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
	
	Если Инд <> 0 Тогда
		E = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф300_03_E = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф300_03_E);
		F = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф300_03_F = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф300_03_F);
		
		G = C-(E+F);
		
		ТаблицаСтрокГруппы.Получить(Индекс).Ф300_03_G = G;
		Форма300_03ПолеТабличногоДокументаЛистB.Области["Ф300_03_G__"+ Строка(Инд)].Значение = G;
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтотОбъект, "ЛистB", "Ф300_03_G__"+ Строка(Инд), G, Ложь, G);		
		
	Иначе
		E = ?(ОбщиеЭлементыГруппы.Найти("Ф300_03_E", "ИмяОбласти") = Неопределено, 0, ОбщиеЭлементыГруппы.Найти("Ф300_03_E", "ИмяОбласти").Значение);	 		
		F = ?(ОбщиеЭлементыГруппы.Найти("Ф300_03_F", "ИмяОбласти") = Неопределено, 0, ОбщиеЭлементыГруппы.Найти("Ф300_03_F", "ИмяОбласти").Значение);	 
		
		G = C-(E+F);
		
		ОбщиеЭлементыГруппы.Найти("Ф300_03_G", "ИмяОбласти").Значение = G;
		
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтотОбъект, "ЛистB", "Ф300_03_G", G, Ложь,  G);
		
	КонецЕсли;	
	
	РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы, мМногострочнаяСтруктура);
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ТекИмяФормы, Истина);			
	Модифицированность = Истина;	
	
	 	
КонецПроцедуры // Форма300_03Расчет()

&НаСервере
Функция Форма300_03РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
	Запрос =  Новый Запрос;
	
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("НачПериода",		  СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", 	  Новый Граница(КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), ВидГраницы.Включая));	
	Запрос.УстановитьПараметр("ДатаКонПериода",   КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));	
	Запрос.УстановитьПараметр("ВидНДС", 	Перечисления.ВидыНДС.НДССИзменениемСрокаУплаты);
	Запрос.УстановитьПараметр("Зачет", 		Перечисления.ВидыВзаиморасчетовСБюджетом.Зачет);
	Запрос.УстановитьПараметр("Уплата", 	Перечисления.ВидыВзаиморасчетовСБюджетом.Уплата);
	
	СписокКодовСтрок = Новый СписокЗначений;
	СписокКодовСтрок.Добавить("300.03.001");
	СписокКодовСтрок.Добавить("300.03.002");
    Запрос.УстановитьПараметр("КодыСтрок",  СписокКодовСтрок); 
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	
	// Результат запроса группируется по номеру ГТД, т.к. в документе ГТДИмпорт
	// имеются строки с разными ссылками на номера ГТД, которые отличаются номером строки,
	// а номер ГТД у них одинаковый.
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БазовыйЗапрос.ГТД,
	|	БазовыйЗапрос.СрокПлатежа,
	|	БазовыйЗапрос.СуммаНДСПоГТД,
	|	ОборотыПоПогашению.ЗачетПредыдущегоПериода,
	|	ОборотыПоПогашению.ЗачетТекущегоПериода,
	|	ОборотыПоПогашению.УплатаПредыдущегоПериода,
	|	ОборотыПоПогашению.УплатаТекущегоПериода,
	|	БазовыйЗапрос.ЗадолженностьПоНДС,
	|	БазовыйЗапрос.ГТД.Код КАК НомерГТД,
	|	БазовыйЗапрос.ВидОперацииПоступления,
	|	КодыСтрокДекларации.КодСтроки
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	(ВЫБРАТЬ
	|		НДССИзмененнымСрокомУплатыОстаткиИОбороты.ГТД КАК ГТД,
	|		НДССИзмененнымСрокомУплатыОстаткиИОбороты.ГТД.Код КАК НомерГТД,
	|		НДССИзмененнымСрокомУплатыОстаткиИОбороты.СрокПлатежа КАК СрокПлатежа,
	|		СУММА(НДССИзмененнымСрокомУплатыОстаткиИОбороты.СуммаНДСПриход) КАК СуммаНДСПоГТД,
	|		СУММА(НДССИзмененнымСрокомУплатыОстаткиИОбороты.СуммаНДСКонечныйОстаток) КАК ЗадолженностьПоНДС,
	|		НДССИзмененнымСрокомУплатыОстаткиИОбороты.ВидОперацииПоступления КАК ВидОперацииПоступления
	|	ИЗ
	|		РегистрНакопления.НДССИзмененнымСрокомУплаты.ОстаткиИОбороты(
	|				,
	|				&КонПериода,
	|				,
	|				,
	|				ВидНалогаНДС = &ВидНДС
	|					И Налогоплательщик = &Налогоплательщик) КАК НДССИзмененнымСрокомУплатыОстаткиИОбороты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НДССИзмененнымСрокомУплатыОстаткиИОбороты.ГТД,
	|		НДССИзмененнымСрокомУплатыОстаткиИОбороты.ГТД.Код,
	|		НДССИзмененнымСрокомУплатыОстаткиИОбороты.СрокПлатежа,
	|		НДССИзмененнымСрокомУплатыОстаткиИОбороты.ВидОперацииПоступления) КАК БазовыйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НДССИзмененнымСрокомУплаты.ГТД КАК ГТД,
	|			НДССИзмененнымСрокомУплаты.СрокПлатежа КАК СрокПлатежа,
	|			СУММА(ВЫБОР
	|					КОГДА НДССИзмененнымСрокомУплаты.СпособПогашения = &Зачет
	|							И НДССИзмененнымСрокомУплаты.Период < &НачПериода
	|						ТОГДА НДССИзмененнымСрокомУплаты.СуммаНДС
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ЗачетПредыдущегоПериода,
	|			СУММА(ВЫБОР
	|					КОГДА НДССИзмененнымСрокомУплаты.СпособПогашения = &Уплата
	|							И НДССИзмененнымСрокомУплаты.Период < &НачПериода
	|						ТОГДА НДССИзмененнымСрокомУплаты.СуммаНДС
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК УплатаПредыдущегоПериода,
	|			СУММА(ВЫБОР
	|					КОГДА НДССИзмененнымСрокомУплаты.СпособПогашения = &Зачет
	|							И НДССИзмененнымСрокомУплаты.Период >= &НачПериода
	|						ТОГДА НДССИзмененнымСрокомУплаты.СуммаНДС
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ЗачетТекущегоПериода,
	|			СУММА(ВЫБОР
	|					КОГДА НДССИзмененнымСрокомУплаты.СпособПогашения = &Уплата
	|							И НДССИзмененнымСрокомУплаты.Период >= &НачПериода
	|						ТОГДА НДССИзмененнымСрокомУплаты.СуммаНДС
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК УплатаТекущегоПериода,
	|			НДССИзмененнымСрокомУплаты.ВидОперацииПоступления КАК ВидОперацииПоступления
	|		ИЗ
	|			РегистрНакопления.НДССИзмененнымСрокомУплаты КАК НДССИзмененнымСрокомУплаты
	|		ГДЕ
	|			НДССИзмененнымСрокомУплаты.Период <= &ДатаКонПериода
	|			И НДССИзмененнымСрокомУплаты.Налогоплательщик = &Налогоплательщик
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НДССИзмененнымСрокомУплаты.ГТД,
	|			НДССИзмененнымСрокомУплаты.СрокПлатежа,
	|			НДССИзмененнымСрокомУплаты.ВидОперацииПоступления) КАК ОборотыПоПогашению
	|		ПО БазовыйЗапрос.ГТД = ОборотыПоПогашению.ГТД
	|			И БазовыйЗапрос.СрокПлатежа = ОборотыПоПогашению.СрокПлатежа
	|			И БазовыйЗапрос.ВидОперацииПоступления = ОборотыПоПогашению.ВидОперацииПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОперации КАК ВидОперации,
	|			КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки КАК КодСтроки
	|		ИЗ
	|			РегистрСведений.КодыСтрокДекларацииПоНДСКЗачету.СрезПоследних(&КонПериода, ) КАК КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних) КАК КодыСтрокДекларации
	|		ПО БазовыйЗапрос.ВидОперацииПоступления = КодыСтрокДекларации.ВидОперации
	|ГДЕ
	|	КодыСтрокДекларации.КодСтроки В(&КодыСтрок)
	|	И НЕ(ЕСТЬNULL(БазовыйЗапрос.ЗадолженностьПоНДС, 0) = 0
	|				И ЕСТЬNULL(ОборотыПоПогашению.УплатаТекущегоПериода, 0) = 0
	|				И ЕСТЬNULL(ОборотыПоПогашению.ЗачетТекущегоПериода, 0) = 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.СрокПлатежа,
	|	СУММА(ВременнаяТаблица.СуммаНДСПоГТД) КАК СуммаНДСПоГТД,
	|	СУММА(ВременнаяТаблица.ЗачетПредыдущегоПериода) КАК ЗачетПредыдущегоПериода,
	|	СУММА(ВременнаяТаблица.ЗачетТекущегоПериода) КАК ЗачетТекущегоПериода,
	|	СУММА(ВременнаяТаблица.УплатаПредыдущегоПериода) КАК УплатаПредыдущегоПериода,
	|	СУММА(ВременнаяТаблица.УплатаТекущегоПериода) КАК УплатаТекущегоПериода,
	|	СУММА(ВременнаяТаблица.ЗадолженностьПоНДС) КАК ЗадолженностьПоНДС,
	|	ВременнаяТаблица.НомерГТД,
	|	ВременнаяТаблица.ВидОперацииПоступления,
	|	ВременнаяТаблица.КодСтроки
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблица.НомерГТД,
	|	ВременнаяТаблица.СрокПлатежа,
	|	ВременнаяТаблица.ВидОперацииПоступления,
	|	ВременнаяТаблица.КодСтроки";
	 
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() И ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 300.03 за отчетный период отсутствуют...'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);		
	КонецЕсли;	
	
	ТаблицаРезультата = Результат.Выгрузить();
	
	Возврат ТаблицаРезультата;		 
	
КонецФункции // Форма300_03РассчитатьДанныеФормы()

&НаСервере
// Рассчитывает зачет по НДС с учетом видов оборота
// в регистра НДС к возмещению  для НП, использующих раздельный метод
Функция Форма300_03РассчитатьДанныеДляЗачетаНДС()
	Запрос =  Новый Запрос;
	
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("НачПериода",		  СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", 	  КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));		
	Запрос.УстановитьПараметр("ВидНалогаНДС", 	Перечисления.ВидыНДС.НДССИзменениемСрокаУплаты);
	
	СписокКодовСтрок = Новый СписокЗначений;
	СписокКодовСтрок.Добавить("300.03.001");
	СписокКодовСтрок.Добавить("300.03.002");
    Запрос.УстановитьПараметр("КодыСтрок",  СписокКодовСтрок); 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.Период КАК Период,
	|	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОперации КАК ВидОперации,
	|	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки КАК КодСтроки,
	|	ВидыОборотовПоРеализации.Ссылка КАК ВидОборота,
	|	ВЫБОР
	|		КОГДА КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОборота = ЗНАЧЕНИЕ(Перечисление.ВидыОборотовПоРеализации.ПустаяСсылка)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Приоритет
	|ИЗ
	|	Перечисление.ВидыОборотовПоРеализации КАК ВидыОборотовПоРеализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДСКЗачету.СрезПоследних(&КонПериода, ) КАК КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних
	|		ПО (КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОборота = ВидыОборотовПоРеализации.Ссылка
	|				ИЛИ КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОборота = ЗНАЧЕНИЕ(Перечисление.ВидыОборотовПоРеализации.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Приоритет,
	|	ВидОперации,
	|	ВидОборота
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДохода.ВидОперацииПоступления КАК ВидОперацииПоступления,
	|	ТаблицаДохода.ВидОборота КАК ВидОборота,
	|	ДанныеОКодахДекларации.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ ВТ_СведенияОкодахСтрокДекларации
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаОпераций.ВидОперации КАК ВидОперацииПоступления,
	|		ТаблицаОпераций.ВидОборота КАК ВидОборота,
	|		МИНИМУМ(ТаблицаОпераций.Приоритет) КАК Приоритет
	|	ИЗ
	|		ВТ_Приоритет КАК ТаблицаОпераций
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаОпераций.ВидОперации,
	|		ТаблицаОпераций.ВидОборота) КАК ТаблицаДохода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоритет КАК ДанныеОКодахДекларации
	|		ПО ТаблицаДохода.Приоритет = ДанныеОКодахДекларации.Приоритет
	|			И ТаблицаДохода.ВидОперацииПоступления = ДанныеОКодахДекларации.ВидОперации
	|			И ТаблицаДохода.ВидОборота = ДанныеОКодахДекларации.ВидОборота
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидОперацииПоступления,
	|	ВидОборота,
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСОбороты.СуммаНДСОборот КАК СуммаНДС,
	|	НДСОбороты.ВидОборота
	|ИЗ
	|	РегистрНакопления.НДСКВозмещению.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			,
	|			Налогоплательщик = &Налогоплательщик
	|				И ВидНалогаНДС = &ВидНалогаНДС) КАК НДСОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СведенияОкодахСтрокДекларации КАК КодыСтрокДекларацииПоНДС
	|		ПО НДСОбороты.ВидОперацииПоступления = КодыСтрокДекларацииПоНДС.ВидОперацииПоступления
	|			И НДСОбороты.ВидОборота = КодыСтрокДекларацииПоНДС.ВидОборота
	|ГДЕ
	|	КодыСтрокДекларацииПоНДС.КодСтроки В(&КодыСтрок)";
				   
	Результат = Запрос.Выполнить();	
	Выборка = Результат.Выбрать();
	СуммаНДС = 0;
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Облагаемый Тогда
			СуммаНДС = СуммаНДС + Выборка.СуммаНДС;
		ИначеЕсли Выборка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Общий Тогда
			СуммаНДС = СуммаНДС + Окр(Выборка.СуммаНДС * СтруктураРеквизитовФормы.УдВес/100,0) ;
		КонецЕсли;			
	КонецЦикла;	
	Возврат СуммаНДС;
КонецФункции // Форма300_03РассчитатьДанныеДляЗачетаНДС()

&НаКлиенте
Процедура Форма300_03ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Состояние("Расчет формы 300.03");		
	
	Форма300_03ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры	

&НаСервере
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма300_03ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма300_03";
	
	Если Не Перезаполнить Тогда
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", ТекИмяФормы));
		Если СтрокаФормы <> Неопределено Тогда
			Если СтрокаФормы.Автозаполнение = Ложь Тогда
				Возврат;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Очистить(ТекИмяФормы, Истина);
	
	ТекущаяСтраница = 1;
	ВсегоСтраниц = 1;
	
	
	ТаблицаОтчета = Форма300_03РассчитатьДанныеФормы(Истина);
	ЗначФ300_03_E = 0;
	ЗначФ300_03_C = 0;
	
	Если ТаблицаОтчета.Количество() <> 0 Тогда
				
		МногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы);					
	
		Для Каждого ЭлементСтруктуры Из МногострочнаяСтруктура Цикл
			НомерСтроки = 2;
			ИмяГруппы = ЭлементСтруктуры.Ключ;			
			ТаблицаСтрокГруппы  = ЭлементСтруктуры.Значение.Строки;
			ТаблицаСтрокГруппы.Очистить();
						
			Для Каждого СтрокаОтчета из ТаблицаОтчета Цикл  			
				Элемент = ТаблицаСтрокГруппы.Добавить();   			 
				
				Если ИмяГруппы = "ЛистA" Тогда
				 	//Так должны заполнять по отдельности значения выборки 
				 	//для каждого листа
				 	Элемент.Ф300_03_A = Формат(НомерСтроки, мФорматНомераСтроки);
					
					КодГТД = СтрокаОтчета.НомерГТД;
					КодГТД = СтрЗаменить(КодГТД, "/", ""); 
					Элемент.Ф300_03_B = СокрЛП(КодГТД);
					
					Элемент.Ф300_03_C = Окр(СтрокаОтчета.СуммаНДСПоГТД);
					
					// рассчитаем итоговую строку
					ЗначФ300_03_C = ЗначФ300_03_C + Элемент.Ф300_03_C;
					
				 	Элемент.Ф300_03_D  = СтрокаОтчета.СрокПлатежа;				 						
				 	
										
				ИначеЕсли ИмяГруппы = "ЛистB" Тогда
					
					//для каждого листа
				 	Элемент.Ф300_03_A2 = Формат(НомерСтроки, мФорматНомераСтроки);
					
					Элемент.Ф300_03_E  = Окр(СтрокаОтчета.УплатаТекущегоПериода);
					ЗначФ300_03_E	   = ЗначФ300_03_E + Элемент.Ф300_03_E;
					
				 	Элемент.Ф300_03_F  = Окр(СтрокаОтчета.УплатаПредыдущегоПериода);
					
				 	Элемент.Ф300_03_G  = Окр(СтрокаОтчета.СуммаНДСПоГТД) - (Окр(СтрокаОтчета.УплатаТекущегоПериода) + Окр(СтрокаОтчета.УплатаПредыдущегоПериода));				 
					
			 	КонецЕсли;
				НомерСтроки = НомерСтроки + 1;           			 
			КонецЦикла; 
			
		КонецЦикла;	 
		
		СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_03.Вставить("Знач300_03_C",	ЗначФ300_03_C);
		
		Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный Тогда
			СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_03.Вставить("Знач300_03_E",	ЗначФ300_03_E); // итог для передачи данных в 300.00			
		Иначе				
			СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_03.Вставить("Знач300_03_E",	Форма300_03РассчитатьДанныеДляЗачетаНДС()); // итог для передачи данных в 300.00						
		КонецЕсли;
		
		РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы, МногострочнаяСтруктура);			
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);		
		РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтотОбъект,ТекИмяФормы,Перезаполнить);	 
		
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ТекИмяФормы, Истина);			
		
	КонецЕсли;		
КонецПроцедуры // Форма300_03ЗаполнитьАвтоНаСервере()
 
&НаСервере
Функция Форма300_03ПолучитьТаблицуДанныхРеестраExcel(ТекКодФормы)	
	СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, ТекКодФормы);
	
	ТаблицаДанныхA = Новый ТаблицаЗначений;              
	ТаблицаДанныхA.Колонки.Добавить("НомерСтроки",,                   "Номер строки");
	ТаблицаДанныхA.Колонки.Добавить("НомерДекларацииЗаявления",,      "Справочный номер  декларации на товары или Заявления о ввозе товаров");
	ТаблицаДанныхA.Колонки.Добавить("СуммаНДСНачисленного",,          "Сумма НДС согласно декларации на товары или Заявления");
	ТаблицаДанныхA.Колонки.Добавить("СрокПлатежа",,                   "Срок платежа");
	ТаблицаДанныхA.Колонки.Добавить("УплаченоНДСВОтчетномПериоде",,   "Уплачено НДС в отчетном налоговом периоде");
	ТаблицаДанныхA.Колонки.Добавить("УплаченоНДСВПредыдущемПериоде",, "Уплачено НДС в предыдущие налоговые периоды");
	ТаблицаДанныхA.Колонки.Добавить("ЗадолженностьНДС",,              "Задолженность по НДС (C-(E+F))");
	
	ТаблицаДанныхB = Новый ТаблицаЗначений;
	ТаблицаДанныхB.Колонки.Добавить("УплаченоНДСВОтчетномПериоде");
	ТаблицаДанныхB.Колонки.Добавить("УплаченоНДСВПредыдущемПериоде");
	ТаблицаДанныхB.Колонки.Добавить("ЗадолженностьНДС");
	
	                             	
	Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
		ИмяГруппы 		   = ЭлементСтруктуры.Ключ;
		ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
				
		Для Каждого Элемент Из ТаблицаСтрокГруппы Цикл
		
			Если ИмяГруппы = "ЛистA" Тогда
				
				НоваяСтрокаДанных = ТаблицаДанныхA.Добавить();	
			
				//Так должны заполнять по отдельности значения выборки 
				//для каждого листа
				НоваяСтрокаДанных.НомерСтроки 	   = Элемент.Ф300_03_A;
				Если ЗначениеЗаполнено(Элемент.Ф300_03_B) Тогда 
					НоваяСтрокаДанных.НомерДекларацииЗаявления = Элемент.Ф300_03_B;
				КонецЕсли;
				НоваяСтрокаДанных.СуммаНДСНачисленного = Элемент.Ф300_03_C;
				Если ЗначениеЗаполнено(Элемент.Ф300_03_D) Тогда 
					НоваяСтрокаДанных.СрокПлатежа = НачалоДня(Элемент.Ф300_03_D);
				КонецЕсли;
				
			ИначеЕсли ИмяГруппы = "ЛистB" Тогда
				

				НоваяСтрокаДанных = ТаблицаДанныхB.Добавить();	

				НоваяСтрокаДанных.УплаченоНДСВОтчетномПериоде   = Элемент.Ф300_03_E;
				НоваяСтрокаДанных.УплаченоНДСВПредыдущемПериоде = Элемент.Ф300_03_F;
				НоваяСтрокаДанных.ЗадолженностьНДС              = Элемент.Ф300_03_G;
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЦикла;
	
	// сводная таблица
	ТаблицаДанныхA.ЗагрузитьКолонку(ТаблицаДанныхB.ВыгрузитьКолонку("УплаченоНДСВОтчетномПериоде"),   "УплаченоНДСВОтчетномПериоде");
	ТаблицаДанныхA.ЗагрузитьКолонку(ТаблицаДанныхB.ВыгрузитьКолонку("УплаченоНДСВПредыдущемПериоде"), "УплаченоНДСВПредыдущемПериоде");
	ТаблицаДанныхA.ЗагрузитьКолонку(ТаблицаДанныхB.ВыгрузитьКолонку("ЗадолженностьНДС"),              "ЗадолженностьНДС");
	
	Возврат ТаблицаДанныхA
КонецФункции

&НаСервере
Функция Форма300_03ПолучитьСтруктуруСоответствияПолейРеестраExcel()
	
	СтруктураСоответствияПолей = Новый Структура();
	
	СтруктураСоответствияПолей.Вставить("НомерСтроки",                   1);
	СтруктураСоответствияПолей.Вставить("КодВидаИмпорта",                2);
	СтруктураСоответствияПолей.Вставить("НомерДекларацииЗаявления",      3);
	СтруктураСоответствияПолей.Вставить("СуммаНДСНачисленного",          4);
	СтруктураСоответствияПолей.Вставить("СрокПлатежа",                   5);
	СтруктураСоответствияПолей.Вставить("ПогашеноНДСВОтчетномПериоде",   6);
	СтруктураСоответствияПолей.Вставить("ПогашеноНДСВПредыдущемПериоде", 7);
	СтруктураСоответствияПолей.Вставить("СуммаНДСНепогашенная",          8);
	СтруктураСоответствияПолей.Вставить("КодБюджетнойКлассификации",     9);
	СтруктураСоответствияПолей.Вставить("УплаченоНДСВОтчетномПериоде",   10);
	СтруктураСоответствияПолей.Вставить("УплаченоНДСВПредыдущемПериоде", 11);
	СтруктураСоответствияПолей.Вставить("ЗадолженностьНДС",              12);
	
	Возврат СтруктураСоответствияПолей;
КонецФункции

&НаСервере
Функция Форма300_03ПолучитьСтруктуруИтоговыхПолейРеестраExcel()
	СтруктураИтоговыхПолей = Новый Структура;
	
	СтруктураИтоговыхПолей.Вставить("СуммаНДСНачисленного",          4);
	СтруктураИтоговыхПолей.Вставить("ПогашеноНДСВОтчетномПериоде",   6);
	СтруктураИтоговыхПолей.Вставить("ПогашеноНДСВПредыдущемПериоде", 7);
	СтруктураИтоговыхПолей.Вставить("СуммаНДСНепогашенная",          8);
	СтруктураИтоговыхПолей.Вставить("УплаченоНДСВОтчетномПериоде",   10);
	СтруктураИтоговыхПолей.Вставить("УплаченоНДСВПредыдущемПериоде", 11);
	СтруктураИтоговыхПолей.Вставить("ЗадолженностьНДС",              12);
	
	Возврат СтруктураИтоговыхПолей;
КонецФункции

#КонецОбласти

#Область Форма300_04

&НаКлиенте
Процедура Форма300_04ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма300_04Расчет(Область.Имя, Область.Значение);
	КонецЕсли;
	    	    
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Форма300_04Расчет(ИмяЯчейки, ЗначениеЯчейки)
	Форма300_04РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки)
КонецПроцедуры

&НаСервере
Процедура Форма300_04РасчетНаСервере(знач ИмяЯчейки, знач ЗначениеЯчейки)
	ТекИмяФормы = "Форма300_04";
	
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,ИмяЯчейки ,ЗначениеЯчейки);
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);
	
	// расчет по строкам 300.04.001
	ИтоговаяЯчейкаА = "s_300_04_001_a";
	ИтоговаяЯчейкаB = "s_300_04_001_b";
	
	СтруктураВходящихЯчеекА = Новый Структура;		
	СтруктураВходящихЯчеекА.Вставить("s_300_04_001_i_a");
	СтруктураВходящихЯчеекА.Вставить("s_300_04_001_ii_a");
	СтруктураВходящихЯчеекА.Вставить("s_300_04_001_iii_a");
	СтруктураВходящихЯчеекА.Вставить("s_300_04_001_iv_a");
	СтруктураВходящихЯчеекА.Вставить("s_300_04_001_v_a");
	СтруктураВходящихЯчеекА.Вставить("s_300_04_001_vi_a");
	СтруктураВходящихЯчеекА.Вставить("s_300_04_001_vii_a");
	СтруктураВходящихЯчеекА.Вставить("s_300_04_001_viii_a");
	СтруктураВходящихЯчеекА.Вставить("s_300_04_001_ix_a");		
	СтруктураВходящихЯчеекА.Вставить("s_300_04_001_x_a");		
	
	СтруктураВходящихЯчеекB = Новый Структура;		
	СтруктураВходящихЯчеекB.Вставить("s_300_04_001_i_b");
	СтруктураВходящихЯчеекB.Вставить("s_300_04_001_ii_b");
	СтруктураВходящихЯчеекB.Вставить("s_300_04_001_iii_b");
	СтруктураВходящихЯчеекB.Вставить("s_300_04_001_iv_b");
	СтруктураВходящихЯчеекB.Вставить("s_300_04_001_v_b");
	СтруктураВходящихЯчеекB.Вставить("s_300_04_001_vi_b");
	СтруктураВходящихЯчеекB.Вставить("s_300_04_001_vii_b");
	СтруктураВходящихЯчеекB.Вставить("s_300_04_001_viii_b");
	СтруктураВходящихЯчеекB.Вставить("s_300_04_001_ix_b");		
	СтруктураВходящихЯчеекB.Вставить("s_300_04_001_x_b");		
	
	АвтоматическийРасчетПоСтрокам(ТаблицаДанных, ИтоговаяЯчейкаА, СтруктураВходящихЯчеекА, Ложь, Форма300_04ПолеТабличногоДокументаСтраница1);			
	АвтоматическийРасчетПоСтрокам(ТаблицаДанных, ИтоговаяЯчейкаB, СтруктураВходящихЯчеекB, Ложь, Форма300_04ПолеТабличногоДокументаСтраница1);		
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);  	
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ТекИмяФормы);		
КонецПроцедуры

&НаСервере
Функция Форма300_04РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("НачПериода",		  СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", 	  Новый Граница(КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КодСтроки",        "300.04.001%");		
	Запрос.УстановитьПараметр("ВидНалога",		  Перечисления.ВидыНДС.НДСМетодомЗачета);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки,
	               |	СУММА(НДСКВозмещениюОбороты.СуммаБезНДСОборот) КАК ОблагаемыйИмпорт,
	               |	СУММА(НДСКВозмещениюОбороты.СуммаНДСОборот) КАК СуммаНДС
	               |ИЗ
	               |	РегистрНакопления.НДСКВозмещению.Обороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			,
	               |			Налогоплательщик = &Налогоплательщик
	               |				И ВидНалогаНДС = &ВидНалога) КАК НДСКВозмещениюОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДСКЗачету.СрезПоследних(&КонПериода, ) КАК КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних
	               |		ПО НДСКВозмещениюОбороты.ВидОборота = КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОборота
	               |			И НДСКВозмещениюОбороты.ВидОперацииПоступления = КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОперации
	               |ГДЕ
	               |	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки ПОДОБНО &КодСтроки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки" ;
				   
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() И ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 300.04 за отчетный период отсутствуют...'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);													 
	КонецЕсли;
	
    Возврат Результат.Выгрузить();
	
КонецФункции // Форма300_04РассчитатьДанныеФормы()

&НаКлиенте
Процедура Форма300_04ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Состояние("Расчет формы 300.04");		
	
	Форма300_04ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры	

&НаСервере
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма300_04ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма300_04";
	
	Если Не Перезаполнить Тогда
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", ТекИмяФормы));
		Если СтрокаФормы <> Неопределено Тогда
			Если СтрокаФормы.Автозаполнение = Ложь Тогда
				Возврат;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Очистить(ТекИмяФормы, Истина);
	
	ТаблицаОтчета = Форма300_04РассчитатьДанныеФормы(Истина);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);
	
	Для Каждого Строка Из ТаблицаОтчета Цикл
		
		ОбластьНачало = РегламентированнаяОтчетностьКлиентСервер.ПреобразоватьКодДекларации(Строка.КодСтроки);
		
		ОбластьA = ТаблицаДанных.Найти(ОбластьНачало + "_a","ИмяОбласти");
		ОбластьB = ТаблицаДанных.Найти(ОбластьНачало + "_b","ИмяОбласти");
		
		Если ОбластьA <> Неопределено И ОбластьB <> Неопределено И ОбластьНачало = "s_300_04_001" Тогда
			ОбластьA.Значение = ОбластьA.Значение + Окр(?(Строка.ОблагаемыйИмпорт <> NULL, Строка.ОблагаемыйИмпорт, 0));
			ОбластьB.Значение = ОбластьB.Значение + Окр(?(Строка.СуммаНДС <> NULL, Строка.СуммаНДС, 0));
		ИначеЕсли ОбластьA <> Неопределено И ОбластьB <> Неопределено Тогда
			ОбластьA.Значение = ОбластьA.Значение + Окр(?(Строка.ОблагаемыйИмпорт <> NULL, Строка.ОблагаемыйИмпорт, 0));
			ОбластьB.Значение = ОбластьB.Значение + Окр(?(Строка.СуммаНДС <> NULL, Строка.СуммаНДС, 0));
			ОбластьИтогА = ТаблицаДанных.Найти("s_300_04_001_a","ИмяОбласти");
			ОбластьИтогB = ТаблицаДанных.Найти("s_300_04_001_b","ИмяОбласти");
			Если ОбластьИтогА <> Неопределено Тогда
				ОбластьИтогА.Значение = ОбластьИтогА.Значение + Окр(?(Строка.ОблагаемыйИмпорт <> NULL, Строка.ОблагаемыйИмпорт, 0));
			КонецЕсли;
			Если ОбластьИтогB <> Неопределено Тогда
				ОбластьИтогB.Значение = ОбластьИтогB.Значение + Окр(?(Строка.СуммаНДС <> NULL, Строка.СуммаНДС, 0));
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Не найдена строка в форме %1. Значение помещено в строку ""300.04.001"".'");								
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодСтроки);			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
			
			ЗначА = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_04_001_a");
			ЗначB = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_04_001_b");
			
			ЗначА = ЗначА + Окр(?(Строка.ОблагаемыйИмпорт <> NULL, Строка.ОблагаемыйИмпорт, 0));
			ЗначB = ЗначB + Окр(?(Строка.СуммаНДС <> NULL, Строка.СуммаНДС, 0));
			
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_04_001_a",ЗначА,);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_04_001_b", ЗначB,);			
		КонецЕсли;
		
	КонецЦикла;
	
	// заполним значения в структуре для последующего правильного авторасчета ячеек
	Для Каждого Строка Из ТаблицаДанных  Цикл 				
		мСтруктураЗначений.Вставить(Строка.ИмяОбласти, Строка.Значение);						
	КонецЦикла;
			
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);				
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтотОбъект,ТекИмяФормы,Перезаполнить);	         			
КонецПроцедуры // Форма300_04ЗаполнитьАвтоНаСервере()

#КонецОбласти

#Область Форма300_05

&НаСервере
Процедура Форма300_05РасчетНаСервере(знач Инд, знач Колонка)
	
	Перем СтруктураГруппы;
	
	Если (Найти(Колонка, "Ф300_05_I") = 0) И (Найти(Колонка, "Ф300_05_L") = 0) Тогда
		Возврат;
	КонецЕсли;

	ТекИмяФормы = "Форма300_05";
	
	//рассчитаем вычисляемые ячейки
	//M = I + L                                                                            	
	
	Если ЗначениеЗаполнено(Инд)  Тогда
		Индекс = Инд-1;
	КонецЕсли;
	
	мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект);
	
	мМногострочнаяСтруктура.Свойство("ЛистB", СтруктураГруппы);
	ОбщиеЭлементыГруппы = СтруктураГруппы.ШапкаИПодвал; 
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
	    	
	Если Инд <> 0 Тогда
		I = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф300_05_I = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф300_05_I);	
	Иначе
		I = ?(ОбщиеЭлементыГруппы.Найти("Ф300_05_I", "ИмяОбласти") = Неопределено, 0, ОбщиеЭлементыГруппы.Найти("Ф300_05_I", "ИмяОбласти").Значение);	 
	КонецЕсли;	

	мМногострочнаяСтруктура.Свойство("ЛистC", СтруктураГруппы);
	ОбщиеЭлементыГруппы = СтруктураГруппы.ШапкаИПодвал; 
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
	    	
	Если Инд <> 0 Тогда
		L = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф300_05_L = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф300_05_L);
		
		M = I + L;
		
		ТаблицаСтрокГруппы.Получить(Индекс).Ф300_05_M = M;
		Форма300_05ПолеТабличногоДокументаЛистC.Области["Ф300_05_M__"+ Строка(Инд)].Значение = M;
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтотОбъект, "ЛистC", "Ф300_05_M__"+ Строка(Инд), M, Ложь, M);		
		
	Иначе
		L = ?(ОбщиеЭлементыГруппы.Найти("Ф300_05_L", "ИмяОбласти") = Неопределено, 0, ОбщиеЭлементыГруппы.Найти("Ф300_05_L", "ИмяОбласти").Значение);	 		
		
		M = I + L;
		
		ОбщиеЭлементыГруппы.Найти("Ф300_05_M", "ИмяОбласти").Значение = M;
		
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтотОбъект, "ЛистC", "Ф300_05_M", M, Ложь,  M);
		
	КонецЕсли;
	
	//СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_05.Вставить("Ф300_05_M", ЗначФ300_05_M);
	
	РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы, мМногострочнаяСтруктура);			
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ТекИмяФормы, Истина);			
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаСервере
Функция Форма300_05РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
    Запрос =  Новый Запрос;
	
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("НачПериода", 	  СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", 	  Новый Граница(КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидНалога", 		  Перечисления.ВидыНДС.НДСЗаНерезидента);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДоговор",    Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
	Запрос.Текст = 
	"// Отчетный период
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НДСЗаНерезидентаОстаткиИОбороты.ДокументПоступления.Дата КАК ДатаОборота,
	|	ВЫБОР
	|		КОГДА НДСЗаНерезидентаОстаткиИОбороты.ДокументПоступления ССЫЛКА Документ.АвансовыйОтчет
	|				ИЛИ НДСЗаНерезидентаОстаткиИОбороты.ДокументПоступления ССЫЛКА Документ.ВводНачальныхОстатков
	|			ТОГДА &ПустойКонтрагент
	|		ИНАЧЕ НДСЗаНерезидентаОстаткиИОбороты.ДокументПоступления.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА НДСЗаНерезидентаОстаткиИОбороты.ДокументПоступления ССЫЛКА Документ.АвансовыйОтчет
	|				ИЛИ НДСЗаНерезидентаОстаткиИОбороты.ДокументПоступления ССЫЛКА Документ.ВводНачальныхОстатков
	|			ТОГДА &ПустойДоговор
	|		ИНАЧЕ НДСЗаНерезидентаОстаткиИОбороты.ДокументПоступления.ДоговорКонтрагента
	|	КОНЕЦ КАК ДоговорКонтрагента,
	|	НДСЗаНерезидентаОстаткиИОбороты.ВидОперацииПоступления КАК ВидОперацииПоступления,
	|	НДСЗаНерезидентаОстаткиИОбороты.ВидОперацииПоступления.КодВидаОблагаемогоОборота КАК КодВидаОборота,
	|	НДСЗаНерезидентаОстаткиИОбороты.СуммаБезНДСПриход КАК ОблагаемыйОборот,
	|	НДСЗаНерезидентаОстаткиИОбороты.СуммаНДСПриход КАК СуммаНДСКУплате,
	|	НДСЗаНерезидентаОстаткиИОбороты.СуммаНДСРасход КАК СуммаНДСУплаченного,
	|	0 КАК ОблагаемыйОборотПред,
	|	0 КАК СуммаНДСКУплатеПред,
	|	0 КАК СуммаНДСУплаченногоПред
	|ПОМЕСТИТЬ ВТ_НеСгруппированыеДанные
	|ИЗ
	|	РегистрНакопления.НДСЗаНерезидента.ОстаткиИОбороты(
	|			&НачПериода,
	|			&КонПериода,
	|			,
	|			,
	|			Налогоплательщик = &Налогоплательщик
	|				И ВидНалогаНДС = &ВидНалога
	|				И ДокументПоступления.Дата >= &НачПериода) КАК НДСЗаНерезидентаОстаткиИОбороты
	|ГДЕ
	|	(НДСЗаНерезидентаОстаткиИОбороты.СуммаНДСНачальныйОстаток > 0
	|			ИЛИ НДСЗаНерезидентаОстаткиИОбороты.СуммаНДСПриход > 0)
	|			
	|// Предыдущий период
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСЗаНерезидентаОстатки.ДокументПоступления.Дата,
	|	ВЫБОР
	|		КОГДА НДСЗаНерезидентаОстатки.ДокументПоступления ССЫЛКА Документ.АвансовыйОтчет
	|				ИЛИ НДСЗаНерезидентаОстатки.ДокументПоступления ССЫЛКА Документ.ВводНачальныхОстатков
	|			ТОГДА &ПустойКонтрагент
	|		ИНАЧЕ НДСЗаНерезидентаОстатки.ДокументПоступления.Контрагент
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаНерезидентаОстатки.ДокументПоступления ССЫЛКА Документ.АвансовыйОтчет
	|				ИЛИ НДСЗаНерезидентаОстатки.ДокументПоступления ССЫЛКА Документ.ВводНачальныхОстатков
	|			ТОГДА &ПустойДоговор
	|		ИНАЧЕ НДСЗаНерезидентаОстатки.ДокументПоступления.ДоговорКонтрагента
	|	КОНЕЦ,
	|	НДСЗаНерезидентаОстатки.ВидОперацииПоступления,
	|	НДСЗаНерезидентаОстатки.ВидОперацииПоступления.КодВидаОблагаемогоОборота,
	|	0,                                                  // ОблагаемыйОборот
	|	0,                                                  // СуммаНДСКУплате
	|	0,                                                  // СуммаНДСУплаченного
	|	СУММА(НДСЗаНерезидентаОстатки.СуммаБезНДСОстаток),  // ОблагаемыйОборотПред
	|	СУММА(НДСЗаНерезидентаОстатки.СуммаНДСОстаток),     // СуммаНДСКУплатеПред
	|	0                                                   // СуммаНДСУплаченногоПред
	|ИЗ
	|	РегистрНакопления.НДСЗаНерезидента.Остатки(&НачПериода, Налогоплательщик = &Налогоплательщик) КАК НДСЗаНерезидентаОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаНерезидентаОстатки.ДокументПоступления.Дата,
	|	ВЫБОР
	|		КОГДА НДСЗаНерезидентаОстатки.ДокументПоступления ССЫЛКА Документ.АвансовыйОтчет
	|				ИЛИ НДСЗаНерезидентаОстатки.ДокументПоступления ССЫЛКА Документ.ВводНачальныхОстатков
	|			ТОГДА &ПустойКонтрагент
	|		ИНАЧЕ НДСЗаНерезидентаОстатки.ДокументПоступления.Контрагент
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаНерезидентаОстатки.ДокументПоступления ССЫЛКА Документ.АвансовыйОтчет
	|				ИЛИ НДСЗаНерезидентаОстатки.ДокументПоступления ССЫЛКА Документ.ВводНачальныхОстатков
	|			ТОГДА &ПустойДоговор
	|		ИНАЧЕ НДСЗаНерезидентаОстатки.ДокументПоступления.ДоговорКонтрагента
	|	КОНЕЦ,
	|	НДСЗаНерезидентаОстатки.ВидОперацииПоступления,
	|	НДСЗаНерезидентаОстатки.ВидОперацииПоступления.КодВидаОблагаемогоОборота
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСЗаНерезидентаОбороты.ДокументПоступления.Дата,
	|	ВЫБОР
	|		КОГДА НДСЗаНерезидентаОбороты.ДокументПоступления ССЫЛКА Документ.АвансовыйОтчет
	|				ИЛИ НДСЗаНерезидентаОбороты.ДокументПоступления ССЫЛКА Документ.ВводНачальныхОстатков
	|			ТОГДА &ПустойКонтрагент
	|		ИНАЧЕ НДСЗаНерезидентаОбороты.ДокументПоступления.Контрагент
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаНерезидентаОбороты.ДокументПоступления ССЫЛКА Документ.АвансовыйОтчет
	|				ИЛИ НДСЗаНерезидентаОбороты.ДокументПоступления ССЫЛКА Документ.ВводНачальныхОстатков
	|			ТОГДА &ПустойДоговор
	|		ИНАЧЕ НДСЗаНерезидентаОбороты.ДокументПоступления.ДоговорКонтрагента
	|	КОНЕЦ,
	|	НДСЗаНерезидентаОбороты.ВидОперацииПоступления,
	|	НДСЗаНерезидентаОбороты.ВидОперацииПоступления.КодВидаОблагаемогоОборота,
	|	0,                                            // ОблагаемыйОборот
	|	0,                                            // СуммаНДСКУплате
	|	0,                                            // СуммаНДСУплаченного
	|	НДСЗаНерезидентаОбороты.СуммаБезНДСПриход,    // ОблагаемыйОборотПред
	|	НДСЗаНерезидентаОбороты.СуммаНДСПриход,       // СуммаНДСКУплатеПред
	|	СУММА(НДСЗаНерезидентаОбороты.СуммаНДСРасход) // СуммаНДСУплаченногоПред
	|ИЗ
	|	РегистрНакопления.НДСЗаНерезидента.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			,
	|			Налогоплательщик = &Налогоплательщик
	|				И ВидНалогаНДС = &ВидНалога
	|				И ДокументПоступления.Дата < &НачПериода) КАК НДСЗаНерезидентаОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаНерезидентаОбороты.ДокументПоступления.Дата,
	|	ВЫБОР
	|		КОГДА НДСЗаНерезидентаОбороты.ДокументПоступления ССЫЛКА Документ.АвансовыйОтчет
	|				ИЛИ НДСЗаНерезидентаОбороты.ДокументПоступления ССЫЛКА Документ.ВводНачальныхОстатков
	|			ТОГДА &ПустойКонтрагент
	|		ИНАЧЕ НДСЗаНерезидентаОбороты.ДокументПоступления.Контрагент
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаНерезидентаОбороты.ДокументПоступления ССЫЛКА Документ.АвансовыйОтчет
	|				ИЛИ НДСЗаНерезидентаОбороты.ДокументПоступления ССЫЛКА Документ.ВводНачальныхОстатков
	|			ТОГДА &ПустойДоговор
	|		ИНАЧЕ НДСЗаНерезидентаОбороты.ДокументПоступления.ДоговорКонтрагента
	|	КОНЕЦ,
	|	НДСЗаНерезидентаОбороты.ВидОперацииПоступления,
	|	НДСЗаНерезидентаОбороты.ВидОперацииПоступления.КодВидаОблагаемогоОборота,
	|	НДСЗаНерезидентаОбороты.СуммаНДСПриход,
	|	НДСЗаНерезидентаОбороты.СуммаБезНДСПриход
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НеСгруппированыеДанные.ДатаОборота КАК ДатаОборота,
	|	ВТ_НеСгруппированыеДанные.Контрагент КАК Контрагент,
	|	ВТ_НеСгруппированыеДанные.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_НеСгруппированыеДанные.ВидОперацииПоступления КАК ВидОперацииПоступления,
	|	ВТ_НеСгруппированыеДанные.КодВидаОборота КАК КодВидаОборота,
	|	СУММА(ВТ_НеСгруппированыеДанные.ОблагаемыйОборот) КАК ОблагаемыйОборот,
	|	СУММА(ВТ_НеСгруппированыеДанные.СуммаНДСКУплате) КАК СуммаНДСКУплате,
	|	СУММА(ВТ_НеСгруппированыеДанные.СуммаНДСУплаченного) КАК СуммаНДСУплаченного,
	|	СУММА(ВТ_НеСгруппированыеДанные.ОблагаемыйОборотПред) КАК ОблагаемыйОборотПред,
	|	СУММА(ВТ_НеСгруппированыеДанные.СуммаНДСКУплатеПред) КАК СуммаНДСКУплатеПред,
	|	СУММА(ВТ_НеСгруппированыеДанные.СуммаНДСУплаченногоПред) КАК СуммаНДСУплаченногоПред
	|ИЗ
	|	ВТ_НеСгруппированыеДанные КАК ВТ_НеСгруппированыеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_НеСгруппированыеДанные.ДатаОборота,
	|	ВТ_НеСгруппированыеДанные.Контрагент,
	|	ВТ_НеСгруппированыеДанные.ДоговорКонтрагента,
	|	ВТ_НеСгруппированыеДанные.ВидОперацииПоступления,
	|	ВТ_НеСгруппированыеДанные.КодВидаОборота";
	
	РезультатЗапроса = Запрос.Выполнить();          		
	Если РезультатЗапроса.Пустой() И ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения приложения 300.05 за отчетный период отсутствуют...'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);													 
	КонецЕсли;
	
    Возврат РезультатЗапроса.Выбрать();
	
КонецФункции // Форма300_05РассчитатьДанныеФормы()

&НаКлиенте
Процедура Форма300_05ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Состояние("Расчет формы 300.05");		
	
	Форма300_05ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры	

&НаСервере
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма300_05ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма300_05";
	
	Если Не Перезаполнить Тогда
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", ТекИмяФормы));
		Если СтрокаФормы <> Неопределено Тогда
			Если СтрокаФормы.Автозаполнение = Ложь Тогда
				Возврат;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Выборка05 = Форма300_05РассчитатьДанныеФормы(Истина);
	
	Очистить(ТекИмяФормы, Истина);	
	
	ТекущаяСтраница = 1;
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", ТекИмяФормы));
	
	Если СтрокаФормы <> Неопределено Тогда
		СтрокаФормы.ВсегоСтраниц = 1;		
	КонецЕсли;   
	
	СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы);		
	
	ЗначФ300_05_G  = 0;
	ЗначФ300_05_M  = 0;
	
	ВыводитьПервуюСтраницу = Ложь;
	
	мФорматНомераСтроки300_05 = "ЧЦ=6; ЧВН=; ЧГ=";   // формат номеров строк в прилождении 300.05 отличается от остальных 
	
	Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
		НомерСтроки = 2;
		
		ИмяГруппы 	= ЭлементСтруктуры.Ключ;
		ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
		ТаблицаСтрокГруппы.Очистить();
		
		Выборка05.Сбросить();
	 
	 	Пока Выборка05.Следующий() Цикл
			
			ВыводитьПервуюСтраницу = Истина;
			
			Элемент = ТаблицаСтрокГруппы.Добавить();   			 
			
			Если ИмяГруппы = "ЛистA" Тогда
				
				Контрагент        = Выборка05.Контрагент; 
				Договор           = Выборка05.ДоговорКонтрагента; 
				
				Элемент.Ф300_05_A = Формат(НомерСтроки, мФорматНомераСтроки300_05);
				
				//Элемент.Ф300_05_B             = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Наименование");
				//Элемент.Ф300_05_B_Расшифровка = Контрагент;
				
				Если ЗначениеЗаполнено(Контрагент) Тогда
					
					Элемент.Ф300_05_B             = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Наименование");
					Элемент.Ф300_05_B_Расшифровка = Контрагент;
					
					СтранаРезидентства = Контрагент.СтранаРезидентства;
					
					Если НЕ ЗначениеЗаполнено(СтранаРезидентства) Тогда
						ТекстСообщения = НСтр("ru = 'Форма 300.05: Контрагент <%1> - не заполнена ""Страна резидентства""'");								
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Контрагент);			
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Иначе
						Если ПустаяСтрока(СтранаРезидентства.КодАльфа2) Тогда
							ТекстСообщения = НСтр("ru = 'Форма 300.05: У страны <%1> - не заполнен код ""Альфа-2"".
							                            |При заполнении формы применяется цифровой код страны.'");								
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтранаРезидентства);			
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							СтранаРезидентстваКод = СтранаРезидентства.Код;
						Иначе
							СтранаРезидентстваКод = СтранаРезидентства.КодАльфа2;
						КонецЕсли;
						Элемент.Ф300_05_C = СтранаРезидентстваКод;
					КонецЕсли;
					Элемент.Ф300_05_C_Расшифровка = Контрагент;
					
					Элемент.Ф300_05_D             = Контрагент.НомерНалоговойРегистрацииВСтранеРезидентства;
					Элемент.Ф300_05_D_Расшифровка = Контрагент;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Договор) Тогда
					
					Элемент.Ф300_05_E               = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "НомерДоговора");
					Элемент.Ф300_05_E_Расшифровка   = Договор;

					Элемент.Ф300_05_E2              = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ДатаДоговора");
					Элемент.Ф300_05_E2_Расшифровка  = Договор;
						
				КонецЕсли;
				
			ИначеЕсли ИмяГруппы = "ЛистB" Тогда
				
				Элемент.Ф300_05_A2 = Формат(НомерСтроки, мФорматНомераСтроки300_05);
				
				Элемент.Ф300_05_F   			= Выборка05.КодВидаОборота;
				//Элемент.Ф300_05_F_Расшифровка   = Выборка05.ВидОперацииПоступления;
				
				Элемент.Ф300_05_G  = Окр(Выборка05.ОблагаемыйОборот);
				// рассчитаем итоговую строку
				ЗначФ300_05_G      = ЗначФ300_05_G + Элемент.Ф300_05_G;
					
				Элемент.Ф300_05_H  = Окр(Выборка05.СуммаНДСКУплате);
				
				Элемент.Ф300_05_I  = Окр(Выборка05.СуммаНДСУплаченного);
				
			ИначеЕсли ИмяГруппы = "ЛистC" Тогда
				
				Элемент.Ф300_05_A3 = Формат(НомерСтроки, мФорматНомераСтроки300_05);
				
				Элемент.Ф300_05_J  = Окр(Выборка05.ОблагаемыйОборотПред);
				
				Элемент.Ф300_05_K  = Окр(Выборка05.СуммаНДСКУплатеПред);
				
				Элемент.Ф300_05_L  = Окр(Выборка05.СуммаНДСУплаченногоПред);
				
				Элемент.Ф300_05_M  = Окр(Выборка05.СуммаНДСУплаченного) + Окр(Выборка05.СуммаНДСУплаченногоПред);
				// рассчитаем итоговую строку
				ЗначФ300_05_M      = ЗначФ300_05_M + Элемент.Ф300_05_M;
					
			КонецЕсли; 
					                                    		 
		 	НомерСтроки = НомерСтроки + 1;           			 					 	
		КонецЦикла; 	 
		
	КонецЦикла; 	
	
	СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_05.Вставить("Ф300_05_G",	ЗначФ300_05_G);
	
	Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный ИЛИ СтруктураРеквизитовФормы.мПропорцИРаздел Тогда
		СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_05.Вставить("Ф300_05_M", ЗначФ300_05_M); // итог для передачи данных в 300.00			
	Иначе				
		ТекстСообщения = НСтр("ru = 'Приложение 300.05: Итоговая сумма передана в форму 300.00 с учетом удельного веса облагаемого оборота в общем обороте в размере %1 %'");								
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктураРеквизитовФормы.УдВес);			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
		СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_05.Вставить("Ф300_05_M", Форма300_05РассчитатьДанныеДляЗачетаНДС()); // итог для передачи данных в 300.00						
	КонецЕсли;
		
	РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы, СтруктураФормы);			
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);		
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтотОбъект,ТекИмяФормы,Перезаполнить);	 
	РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтотОбъект);			
	
	Для Каждого Элемент Из СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_05 Цикл
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ТекИмяФормы, Истина);			
	
КонецПроцедуры // Форма300_05ЗаполнитьАвтоНаСервере()

&НаСервере
Функция  Форма300_05РассчитатьДанныеДляЗачетаНДС()
	Запрос =  Новый Запрос;
	
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("НачПериода"		, СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода"		, КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));		
	
	СписокКодовСтрок = Новый СписокЗначений;
	СписокКодовСтрок.Добавить("300.00.014");
    Запрос.УстановитьПараметр("КодыСтрок",  СписокКодовСтрок); 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.Период КАК Период,
	|	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОперации КАК ВидОперации,
	|	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки КАК КодСтроки,
	|	ВидыОборотовПоРеализации.Ссылка КАК ВидОборота,
	|	ВЫБОР
	|		КОГДА КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОборота = ЗНАЧЕНИЕ(Перечисление.ВидыОборотовПоРеализации.ПустаяСсылка)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Приоритет
	|ИЗ
	|	Перечисление.ВидыОборотовПоРеализации КАК ВидыОборотовПоРеализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДСКЗачету.СрезПоследних(&КонПериода, ) КАК КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних
	|		ПО (КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОборота = ВидыОборотовПоРеализации.Ссылка
	|				ИЛИ КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОборота = ЗНАЧЕНИЕ(Перечисление.ВидыОборотовПоРеализации.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Приоритет,
	|	ВидОперации,
	|	ВидОборота
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДохода.ВидОперацииПоступления КАК ВидОперацииПоступления,
	|	ТаблицаДохода.ВидОборота КАК ВидОборота,
	|	ДанныеОКодахДекларации.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ ВТ_СведенияОкодахСтрокДекларации
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаОпераций.ВидОперации КАК ВидОперацииПоступления,
	|		ТаблицаОпераций.ВидОборота КАК ВидОборота,
	|		МИНИМУМ(ТаблицаОпераций.Приоритет) КАК Приоритет
	|	ИЗ
	|		ВТ_Приоритет КАК ТаблицаОпераций
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаОпераций.ВидОперации,
	|		ТаблицаОпераций.ВидОборота) КАК ТаблицаДохода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоритет КАК ДанныеОКодахДекларации
	|		ПО ТаблицаДохода.Приоритет = ДанныеОКодахДекларации.Приоритет
	|			И ТаблицаДохода.ВидОперацииПоступления = ДанныеОКодахДекларации.ВидОперации
	|			И ТаблицаДохода.ВидОборота = ДанныеОКодахДекларации.ВидОборота
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидОперацииПоступления,
	|	ВидОборота,
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСОбороты.СуммаНДСОборот КАК СуммаНДС,
	|	НДСОбороты.ВидОборота
	|ИЗ
	|	РегистрНакопления.НДСКВозмещению.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			,
	|			Налогоплательщик = &Налогоплательщик
	|				И ВидОперацииПоступления В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТ_СведенияОкодахСтрокДекларации.ВидОперацииПоступления
	|					ИЗ
	|						ВТ_СведенияОкодахСтрокДекларации КАК ВТ_СведенияОкодахСтрокДекларации)) КАК НДСОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СведенияОкодахСтрокДекларации КАК КодыСтрокДекларацииПоНДС
	|		ПО НДСОбороты.ВидОперацииПоступления = КодыСтрокДекларацииПоНДС.ВидОперацииПоступления
	|			И НДСОбороты.ВидОборота = КодыСтрокДекларацииПоНДС.ВидОборота
	|ГДЕ
	|	КодыСтрокДекларацииПоНДС.КодСтроки В(&КодыСтрок)";
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	СуммаНДС = 0;
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Облагаемый Тогда
			СуммаНДС = СуммаНДС + Выборка.СуммаНДС;
		ИначеЕсли Выборка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Общий Тогда
			СуммаНДС = СуммаНДС + Окр(Выборка.СуммаНДС * СтруктураРеквизитовФормы.УдВес/100,0) ;
		КонецЕсли;			
	КонецЦикла;
	
	Возврат СуммаНДС;
	
КонецФункции	

&НаКлиенте
Процедура Форма300_05ПолеТабличногоДокументаЛистAВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Элемент.ТекущаяОбласть.Имя;
	Если (Найти(Ячейка, "Ф300_05") = 0) Тогда
		Возврат;
	КонецЕсли;
	Значение = Элемент.ТекущаяОбласть.Значение;
	ЗначениеРасшифровки = Элемент.ТекущаяОбласть.Расшифровка;
	
	Если Найти(Ячейка, "__") = 0 Тогда
		НомерЯчейки = 0;
	Иначе
		НомерЯчейки = Число(Сред(Ячейка, Найти(Ячейка, "__")+ 2));;
	КонецЕсли;
	             	
	ТекИмяФормы = "Форма300_05";
	ИмяЛиста 	= "ЛистA";
	ПризнакРасчета = Ложь;
	                  	
	Если (Найти(Ячейка, "Ф300_05_B") > 0) 
		ИЛИ (Найти(Ячейка, "Ф300_05_C") > 0) 
		ИЛИ (Найти(Ячейка, "Ф300_05_D") > 0) Тогда
	
		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			 ИмяЯчейкиРасшифровки = "Ф300_05_B" + Сред(Ячейка,Найти(Ячейка,"__"));
			 ОбластьРасширофвки = Форма300_05ПолеТабличногоДокументаЛистA.Области.Найти(ИмяЯчейкиРасшифровки);
			 Если ОбластьРасширофвки <> Неопределено Тогда 
				 ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;				 
				 Форма300_05ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка,Значение, ЗначениеРасшифровки, Ложь);
			 КонецЕсли;				 
		 КонецЕсли;

		Если ЗначениеЗаполнено(Значение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			// стандартная обработка расшифровки
			 Возврат;
		КонецЕсли;
        // открываем справочник для выбора элемента
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяЛиста, ИмяЯчейки, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Контрагент", ПризнакРасчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_05ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",,ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли (Найти(Ячейка, "Ф300_05_E") > 0) Тогда 

		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			Если (Найти(Ячейка, "Ф300_05_E2") > 0) Тогда
				ИмяЯчейкиРасшифровки = "Ф300_05_E2" + Сред(Ячейка,Найти(Ячейка,"__"));
			Иначе
				ИмяЯчейкиРасшифровки = "Ф300_05_E" + Сред(Ячейка,Найти(Ячейка,"__"));
			КонецЕсли;
			ОбластьРасширофвки = Форма300_05ПолеТабличногоДокументаЛистA.Области.Найти(ИмяЯчейкиРасшифровки);
			Если ОбластьРасширофвки <> Неопределено Тогда 
				ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;				 
				Форма300_05ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка,Значение, ЗначениеРасшифровки, Ложь);
			КонецЕсли;				 
		КонецЕсли;

		Если ЗначениеЗаполнено(Значение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			// стандартная обработка расшифровки
			Возврат;
		КонецЕсли;

		ПараметрыВыбора = Новый Структура("КодФормы, ИмяЛиста, ИмяЯчейки, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "ДоговорКонтрагента", ПризнакРасчета);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_05ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Налогоплательщик));

		// добавим отбор по контрагенту в форме выбора договора, если контрагент заполнен в ячейке Ф300_05_B__
		Контрагент = Форма300_05ПолеТабличногоДокументаЛистA.Области["Ф300_05_B__" + НомерЯчейки].Расшифровка;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ПараметрыФормы.Отбор.Вставить("Владелец", Контрагент);
		КонецЕсли;
		
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Форма300_05ПолеТабличногоДокументаЛистBВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Элемент.ТекущаяОбласть.Имя;
	Если (Найти(Ячейка, "Ф300_05") = 0) Тогда
		Возврат;
	КонецЕсли;
	
	Значение = Элемент.ТекущаяОбласть.Значение;
	ЗначениеРасшифровки = Элемент.ТекущаяОбласть.Расшифровка;
	
	ТекИмяФормы = "Форма300_05";
	ИмяЛиста 	= "ЛистB";
	ПризнакРасчета = Ложь;
	
	ПараметрыВыбора = Новый Структура("КодФормы, ИмяЛиста, ИмяЯчейки, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Показатели", Истина);
	ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_05ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
	
	Если (Найти(Ячейка, "Ф300_05_F__") > 0) Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИмяМакета"			  	, "КодыВидовОблагаемогоОборотаНДС");
		ПараметрыФормы.Вставить("ИмяСекции"			  	, "Классификатор");
		ПараметрыФормы.Вставить("ПолучатьПолныеДанные"	, Истина);
		ПараметрыФормы.Вставить("ТекущийКодСтроки"	  	, Элемент.ТекущаяОбласть.Значение);
		
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяЛиста, ИмяЯчейки, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "КодВидаОборота", ПризнакРасчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_05ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	ИначеЕсли (Найти(Ячейка, "Ф300_05_G__") > 0) Тогда
		НачЗначение = Элемент.ТекущаяОбласть.Значение;			
		ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, "Введите облагаемый оборот", 12, 0); 
	ИначеЕсли (Найти(Ячейка, "Ф300_05_H__") > 0) Тогда	
		НачЗначение = Элемент.ТекущаяОбласть.Значение;
		ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, "Сумма НДС, подлежащего уплате", 12, 0); 						 
	ИначеЕсли (Найти(Ячейка, "Ф300_05_I__") > 0) Тогда	
		НачЗначение = Элемент.ТекущаяОбласть.Значение;
		ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, "Сумма НДС, уплаченного в бюджет", 12, 0);
	Иначе
		Возврат;
	КонецЕсли;	
	
	Форма300_05ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка, НачЗначение,, ПризнакРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура Форма300_05ПолеТабличногоДокументаЛистCВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Элемент.ТекущаяОбласть.Имя;
	Если (Найти(Ячейка, "Ф300_05") = 0) Тогда
		Возврат;
	КонецЕсли;
	
	Значение = Элемент.ТекущаяОбласть.Значение;
	ЗначениеРасшифровки = Элемент.ТекущаяОбласть.Расшифровка;
	
	ТекИмяФормы = "Форма300_05";
	ИмяЛиста 	= "ЛистC";
	ПризнакРасчета = Ложь;
	
	ПараметрыВыбора = Новый Структура("КодФормы, ИмяЛиста, ИмяЯчейки, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Показатели", Истина);
	ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_05ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
	
	Если (Найти(Ячейка, "Ф300_05_J__") > 0) Тогда
		НачЗначение = Элемент.ТекущаяОбласть.Значение;			
		ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, "Введите облагаемый оборот за предыдущие налоговые периоды", 12, 0); 
	ИначеЕсли (Найти(Ячейка, "Ф300_05_K__") > 0) Тогда	
		НачЗначение = Элемент.ТекущаяОбласть.Значение;
		ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, "Сумма НДС, подлежащего уплате за предыдущие налоговые периоды", 12, 0); 						 
	ИначеЕсли (Найти(Ячейка, "Ф300_05_L__") > 0) Тогда	
		НачЗначение = Элемент.ТекущаяОбласть.Значение;
		ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, "Сумма НДС, уплаченного в бюджет за предыдущие налоговые периоды", 12, 0);
	Иначе
		Возврат;
	КонецЕсли;	
	
	Форма300_05ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка, НачЗначение,, ПризнакРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура  Форма300_05ОбработкаВыбораЗначений(Результат, ПараметрыВыбора) Экспорт
	
	ТекИмяФормы = "Форма300_05";
	Если Результат = Неопределено Тогда
		Возврат;
	Иначе
		ВыбранныйЭлемент = Результат;
		Если ТипЗнч(ВыбранныйЭлемент) = Тип("Структура") Тогда 
			ВыбранныйЭлемент = ВыбранныйЭлемент.КодСтроки;
		КонецЕсли;
	КонецЕсли;
	Форма300_05ОбработкаВыбораЗначенийНаСервере(ВыбранныйЭлемент, ПараметрыВыбора); 	
	
КонецПроцедуры

&НаСервере
Процедура Форма300_05ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, ИмяЯчейки, Значение, ЗначениеРасшифровки, ПризнакРасчета)	
	
	ЭтотОбъект["Форма300_05ПолеТабличногоДокумента" + ИмяЛиста].Области[ИмяЯчейки].Значение = Значение;
	ЭтотОбъект["Форма300_05ПолеТабличногоДокумента" + ИмяЛиста].Области[ИмяЯчейки].Расшифровка = ЗначениеРасшифровки;
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтотОбъект, ИмяЛиста, ИмяЯчейки, Значение, ПризнакРасчета, ЗначениеРасшифровки);
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ЭтотОбъект.КодФормы);
	
КонецПроцедуры

&НаСервере
Процедура  Форма300_05ОбработкаВыбораЗначенийНаСервере(Результат, ПараметрыВыбора)
	
	ТекИмяФормы = ПараметрыВыбора.КодФормы;
	ИмяЛиста	= ПараметрыВыбора.ИмяЛиста;
	ИмяЯчейки	= ПараметрыВыбора.ИмяЯчейки;
	
	Если ПараметрыВыбора.ЭлементВыбора = "Контрагент" И ЗначениеЗаполнено(Результат) Тогда
		НомерЯчейки = Число(Сред(ПараметрыВыбора.ИмяЯчейки, Найти(ПараметрыВыбора.ИмяЯчейки, "__")+ 2));
		
		// Контрагент
		ИмяЯчейкиКонтрагент = "Ф300_05_B__" + НомерЯчейки;
		Форма300_05ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, ИмяЯчейкиКонтрагент, Результат.Наименование,  Результат, ПараметрыВыбора.ПризнакРасчета);	
		
		// Код страны резиденства
		СтранаРезидентства    = Результат.СтранаРезидентства;
		
		Если НЕ ЗначениеЗаполнено(СтранаРезидентства) Тогда
			ТекстСообщения = НСтр("ru = 'Контрагент <%1> - не заполнена ""Страна резидентства""'");								
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Результат);			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			Если ПустаяСтрока(СтранаРезидентства.КодАльфа2) Тогда
				ТекстСообщения = НСтр("ru = 'У страны <%1> - не заполнен код ""Альфа-2"".
				                            |При заполнении формы применяется цифровой код страны.'");								
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтранаРезидентства);			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				СтранаРезидентстваКод = СтранаРезидентства.Код;
			Иначе
				СтранаРезидентстваКод = СтранаРезидентства.КодАльфа2;
			КонецЕсли;
			ИмяЯчейкиКодСтраныРезидентства = "Ф300_05_C__" + НомерЯчейки;
			Форма300_05ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, ИмяЯчейкиКодСтраныРезидентства, СтранаРезидентстваКод,  Результат, ПараметрыВыбора.ПризнакРасчета);
		КонецЕсли;

		// НомерНалоговойРегистрацииВСтранеРезидентства
		ИмяЯчейкиНомерНалоговойРегистрацииВСтранеРезидентства = "Ф300_05_D__" + НомерЯчейки;
		Форма300_05ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста,ИмяЯчейкиНомерНалоговойРегистрацииВСтранеРезидентства, Результат.НомерНалоговойРегистрацииВСтранеРезидентства, Результат, Ложь);
		
		// Проверка соответствия договора контрагенту
		ДоговорКонтрагента = Форма300_05ПолеТабличногоДокументаЛистA.Области["Ф300_05_E__" + НомерЯчейки].Расшифровка;
		Если ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.Владелец <> Результат Тогда
			ТекстСообщения = НСтр("ru = 'Договор не соответствует выбранному контрагенту. Договор очищен!'");								
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			// Номер договора
			ИмяЯчейкиНомерДоговора = "Ф300_05_E__" + НомерЯчейки;
			Форма300_05ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, ИмяЯчейкиНомерДоговора, "", Неопределено, ПараметрыВыбора.ПризнакРасчета);	
			
			// Дата договора
			ИмяЯчейкиДатаДоговора = "Ф300_05_E2__" + НомерЯчейки;
			Форма300_05ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, ИмяЯчейкиДатаДоговора, "", Неопределено, ПараметрыВыбора.ПризнакРасчета);	
		КонецЕсли;
		
	ИначеЕсли ПараметрыВыбора.ЭлементВыбора = "ДоговорКонтрагента" И ЗначениеЗаполнено(Результат) Тогда
		НомерЯчейки = Число(Сред(ПараметрыВыбора.ИмяЯчейки, Найти(ПараметрыВыбора.ИмяЯчейки, "__")+ 2));
		
		// Номер договора
		ИмяЯчейкиНомерДоговора = "Ф300_05_E__" + НомерЯчейки;
		Форма300_05ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, ИмяЯчейкиНомерДоговора, Результат.НомерДоговора, Результат, ПараметрыВыбора.ПризнакРасчета);	
		
		// Дата договора
		ИмяЯчейкиДатаДоговора = "Ф300_05_E2__" + НомерЯчейки;
		Форма300_05ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, ИмяЯчейкиДатаДоговора, Результат.ДатаДоговора, Результат, ПараметрыВыбора.ПризнакРасчета);	
		
	Иначе
		Форма300_05ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, ИмяЯчейки, Результат, Результат, ПараметрыВыбора.ПризнакРасчета);		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Форма300_06

&НаКлиенте
Процедура Форма300_06ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма300_06Расчет(Область.Имя, Область.Значение);
	КонецЕсли;
	    	    
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Форма300_06ПолеТабличногоДокументаСтраница2ПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма300_06Расчет(Область.Имя, Область.Значение);
	КонецЕсли;
	    	    
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Форма300_06Расчет(ИмяЯчейки, ЗначениеЯчейки)
	Форма300_06РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки)
КонецПроцедуры

&НаСервере
Процедура Форма300_06РасчетНаСервере(знач ИмяЯчейки, знач ЗначениеЯчейки)
	
	ТекИмяФормы = "Форма300_06";
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,ИмяЯчейки ,ЗначениеЯчейки);
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);
	
	СтруктураВходящихЯчеек_06_001_a = Новый Структура;
	СтруктураВходящихЯчеек_06_001_b = Новый Структура;
	СтруктураВходящихЯчеек_06_006_a = Новый Структура;
	СтруктураВходящихЯчеек_06_007_a = Новый Структура;
	СтруктураВходящихЯчеек_06_007_b = Новый Структура;
	
	Для Каждого СтрокаТаблицыДанных Из ТаблицаДанных Цикл
		ИмяОбласти = СтрокаТаблицыДанных.ИмяОбласти;
		Если СтрНайти(ИмяОбласти, "s_300_06_001_a__") <> 0 Тогда
			СтруктураВходящихЯчеек_06_001_a.Вставить(ИмяОбласти);
		ИначеЕсли СтрНайти(ИмяОбласти, "s_300_06_001_b__") <> 0  Тогда
			СтруктураВходящихЯчеек_06_001_b.Вставить(ИмяОбласти);
		ИначеЕсли СтрНайти(ИмяОбласти, "s_300_06_006_a__") <> 0  Тогда
			СтруктураВходящихЯчеек_06_006_a.Вставить(ИмяОбласти);
		//ИначеЕсли СтрНайти(ИмяОбласти, "s_300_06_007_a__") <> 0  Тогда
		//	СтруктураВходящихЯчеек_06_007_a.Вставить(ИмяОбласти);
		ИначеЕсли СтрНайти(ИмяОбласти, "s_300_06_007_b__") <> 0  Тогда
			СтруктураВходящихЯчеек_06_007_b.Вставить(ИмяОбласти);
		КонецЕсли;	
	КонецЦикла;
	
	s_300_06_001_a = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_06_001_a", СтруктураВходящихЯчеек_06_001_a, Истина, Форма300_06ПолеТабличногоДокументаСтраница1);
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_06_001_a"  , s_300_06_001_a  , Форма300_06ПолеТабличногоДокументаСтраница1);
	
	s_300_06_001_b = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_06_001_b", СтруктураВходящихЯчеек_06_001_b, Истина, Форма300_06ПолеТабличногоДокументаСтраница1);
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_06_001_b"  , s_300_06_001_b  , Форма300_06ПолеТабличногоДокументаСтраница1);
	
	s_300_06_006_a = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_06_006_a", СтруктураВходящихЯчеек_06_006_a, Истина, Форма300_06ПолеТабличногоДокументаСтраница1);
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_06_006_a"  , s_300_06_006_a  , Форма300_06ПолеТабличногоДокументаСтраница1);
	
	//s_300_06_007_a = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_06_007_a", СтруктураВходящихЯчеек_06_007_a, Истина, Форма300_06ПолеТабличногоДокументаСтраница1);
	//РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_06_007_a"  , s_300_06_007_a  , Форма300_06ПолеТабличногоДокументаСтраница1);
	
	s_300_06_007_b = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_06_007_b", СтруктураВходящихЯчеек_06_007_b, Истина, Форма300_06ПолеТабличногоДокументаСтраница1);
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_06_007_b"  , s_300_06_007_b  , Форма300_06ПолеТабличногоДокументаСтраница1);
	
	
	// расчет по строкам 300.06.004
	ИтоговаяЯчейкаА = "s_300_06_004_a";
	ИтоговаяЯчейкаB = "s_300_06_004_b";
	СтруктураВходящихЯчеекА = Новый Структура;				
	СтруктураВходящихЯчеекB = Новый Структура;		
	Для Н = 1 По 3 Цикл
		СтруктураВходящихЯчеекА.Вставить("s_300_06_0" + Формат(Н, "ЧЦ=2; ЧН=; ЧВН=") + "_a");		
		СтруктураВходящихЯчеекB.Вставить("s_300_06_0" + Формат(Н, "ЧЦ=2; ЧН=; ЧВН=") + "_b");		
	КонецЦикла;		
	АвтоматическийРасчетПоСтрокам(ТаблицаДанных, ИтоговаяЯчейкаА, СтруктураВходящихЯчеекА,, Форма300_06ПолеТабличногоДокументаСтраница1);		
	АвтоматическийРасчетПоСтрокам(ТаблицаДанных, ИтоговаяЯчейкаB, СтруктураВходящихЯчеекB,, Форма300_06ПолеТабличногоДокументаСтраница1);
	
		
	S_300_06_004_a = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_06_004_a");
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_06_004_a", S_300_06_004_a, Форма300_06ПолеТабличногоДокументаСтраница1);
		
	Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Раздельный Тогда
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтаФорма, ТекИмяФормы, Ложь);
	КонецЕсли;
		
	// расчет по строке 300.06.010
	//ИтоговаяЯчейкаA = "s_300_06_010_a";
	ИтоговаяЯчейкаB = "s_300_06_010_b";
	СтруктураВходящихЯчеекA = Новый Структура;		
	СтруктураВходящихЯчеекB = Новый Структура;		
	Для Н = 7 По 9 Цикл
		//СтруктураВходящихЯчеекA.Вставить("s_300_06_0" + Формат(Н, "ЧЦ=2; ЧН=; ЧВН=")+"_a");				
		СтруктураВходящихЯчеекB.Вставить("s_300_06_0" + Формат(Н, "ЧЦ=2; ЧН=; ЧВН=")+"_b");				
	КонецЦикла;		
	//АвтоматическийРасчетПоСтрокам(ТаблицаДанных, ИтоговаяЯчейкаA, СтруктураВходящихЯчеекA,, Форма300_06ПолеТабличногоДокументаСтраница1);
	АвтоматическийРасчетПоСтрокам(ТаблицаДанных, ИтоговаяЯчейкаB, СтруктураВходящихЯчеекB,, Форма300_06ПолеТабличногоДокументаСтраница1);
	
	S_300_06_010 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_06_010_b");	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "Знач_300_06_010", S_300_06_010);   
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);	
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ТекИмяФормы);	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);	
КонецПроцедуры //Форма300_06РасчетНаСервере

&НаСервере
Функция Форма300_06РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	
	Запрос =  Новый Запрос;
	
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("НачПериода", 	  СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", 	  Новый Граница(КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	
	Запрос.УстановитьПараметр("КодыСтрок"	, "300.06.%");
	Запрос.УстановитьПараметр("КодыСтрок06"	, "300.06.006%");
													  	 
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаНДСОбороты.СуммаКорректировкиОборотаОборот КАК Сумма,
	|	КорректировкаНДСОбороты.СуммаНДСОборот КАК СуммаНДС,
	|	КодыСтрокДекларацииПоНДС.КодСтроки КАК КодСтроки,
	|	КорректировкаНДСОбороты.СтавкаНДС КАК СтавкаНДС,
	|	КорректировкаНДСОбороты.ВидОперацииКорректировки
	|ПОМЕСТИТЬ КорректировкаНДС
	|ИЗ
	|	РегистрНакопления.КорректировкаНДС.Обороты(&НачПериода, &КонПериода, Регистратор, Налогоплательщик = &Налогоплательщик) КАК КорректировкаНДСОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДС.СрезПоследних(&КонПериода, ) КАК КодыСтрокДекларацииПоНДС
	|		ПО КорректировкаНДСОбороты.ВидОперацииКорректировки = КодыСтрокДекларацииПоНДС.ВидОперации
	|ГДЕ
	|	КодыСтрокДекларацииПоНДС.КодСтроки ПОДОБНО &КодыСтрок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.Сумма КАК Сумма,
	|	ИтоговаяТаблица.СуммаНДС КАК СуммаНДС,
	|	NULL КАК ВидОборота,
	|	ИтоговаяТаблица.КодСтроки КАК КодСтроки,
	|	""Реализация"" КАК Вид,
	|	ИтоговаяТаблица.ВидОперацииКорректировки
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ЕСТЬNULL(КорректировкаНДС.Сумма, 0)) КАК Сумма,
	|		СУММА(ЕСТЬNULL(КорректировкаНДС.СуммаНДС, 0)) КАК СуммаНДС,
	|		КорректировкаНДС.КодСтроки КАК КодСтроки,
	|		КорректировкаНДС.ВидОперацииКорректировки КАК ВидОперацииКорректировки
	|	ИЗ
	|		КорректировкаНДС КАК КорректировкаНДС
	|	ГДЕ
	|		КорректировкаНДС.СтавкаНДС.Ставка <> 0
	|		И НЕ КорректировкаНДС.КодСтроки ПОДОБНО &КодыСтрок06
	|	
	|	СГРУППИРОВАТЬ ПО
	|		КорректировкаНДС.КодСтроки,
	|		КорректировкаНДС.ВидОперацииКорректировки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СУММА(ЕСТЬNULL(КорректировкаНДС.Сумма, 0)),
	|		СУММА(ЕСТЬNULL(КорректировкаНДС.СуммаНДС, 0)),
	|		""300.06.005"",
	|		КорректировкаНДС.ВидОперацииКорректировки
	|	ИЗ
	|		КорректировкаНДС КАК КорректировкаНДС
	|	ГДЕ
	|		КорректировкаНДС.СтавкаНДС.Ставка = 0
	|		И КорректировкаНДС.СтавкаНДС.ДляОсвобожденногоОборота = ЛОЖЬ
	|		И КорректировкаНДС.СтавкаНДС.МестоРеализацииНеРК = ЛОЖЬ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		КорректировкаНДС.ВидОперацииКорректировки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СУММА(ЕСТЬNULL(КорректировкаНДС.Сумма, 0)),
	|		СУММА(ЕСТЬNULL(КорректировкаНДС.СуммаНДС, 0)),
	|		КорректировкаНДС.КодСтроки,
	|		КорректировкаНДС.ВидОперацииКорректировки
	|	ИЗ
	|		КорректировкаНДС КАК КорректировкаНДС
	|	ГДЕ
	|		КорректировкаНДС.СтавкаНДС.ДляОсвобожденногоОборота = ИСТИНА
	|		И КорректировкаНДС.СтавкаНДС.МестоРеализацииНеРК = ЛОЖЬ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		КорректировкаНДС.КодСтроки,
	|		КорректировкаНДС.ВидОперацииКорректировки) КАК ИтоговаяТаблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ИтоговаяТаблица.СуммаОборот, 0)),
	|	СУММА(ЕСТЬNULL(ИтоговаяТаблица.СуммаНДСОборот, 0)),
	|	ИтоговаяТаблица.ВидОборота,
	|	ИтоговаяТаблица.КодСтроки,
	|	""Возмещение"",
	|	ИтоговаяТаблица.ВидОперацииКорректировки
	|ИЗ
	|	(ВЫБРАТЬ
	|		КорректировкаНДСКВозмещениюОбороты.СуммаНДСОборот КАК СуммаНДСОборот,
	|		КорректировкаНДСКВозмещениюОбороты.СуммаКорректировкиОборотаОборот КАК СуммаОборот,
	|		КорректировкаНДСКВозмещениюОбороты.ВидОборота КАК ВидОборота,
	|		КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки КАК КодСтроки,
	|		КорректировкаНДСКВозмещениюОбороты.ВидОперацииКорректировки КАК ВидОперацииКорректировки
	|	ИЗ
	|		РегистрНакопления.КорректировкаНДСКВозмещению.Обороты(
	|				&НачПериода,
	|				&КонПериода,
	|				,
	|				Налогоплательщик = &Налогоплательщик
	|					И ВидОперацииКорректировки.ПризнакКорректировки = ИСТИНА) КАК КорректировкаНДСКВозмещениюОбороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДСКЗачету.СрезПоследних(&КонПериода, ) КАК КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних
	|			ПО КорректировкаНДСКВозмещениюОбороты.ВидОперацииКорректировки = КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОперации
	|				И КорректировкаНДСКВозмещениюОбороты.ВидОборота = КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОборота
	|	ГДЕ
	|		КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки ПОДОБНО &КодыСтрок) КАК ИтоговаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтоговаяТаблица.КодСтроки,
	|	ИтоговаяТаблица.ВидОборота,
	|	ИтоговаяТаблица.ВидОперацииКорректировки
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодСтроки";	
					
 	Результат = Запрос.Выполнить();
	Если Результат.Пустой() И ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 300.06 за отчетный период отсутствуют...'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);													 
	КонецЕсли;
	
    Возврат Результат.Выгрузить();
	
КонецФункции // Форма300_06РассчитатьДанныеФормы()

&НаКлиенте
Процедура Форма300_06ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Состояние("Расчет формы 300.06");		
	
	Форма300_06ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры	

&НаСервере
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма300_06ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь,ВыводитьСообщения = Истина)
	
	ТекИмяФормы = "Форма300_06";
	
	Если Не Перезаполнить Тогда
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", ТекИмяФормы));
		Если СтрокаФормы <> Неопределено Тогда
			Если СтрокаФормы.Автозаполнение = Ложь Тогда
				Возврат;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Очистить(ТекИмяФормы, Истина);
	
	ТаблицаОтчета = Форма300_06РассчитатьДанныеФормы(Истина);	
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);
	
	ВидОперацииКорректировки1 = Новый Массив;
	ВидОперацииКорректировки6 = Новый Массив;
	ВидОперацииКорректировки7 = Новый Массив;
	
	s_300_00_026_2_b = 0;
	МаксимальныйНомерСтроки_300_06_001 = 0;
	МаксимальныйНомерСтроки_300_06_006 = 0;
	МаксимальныйНомерСтроки_300_06_007 = 0;
	
	Для Каждого Строка Из ТаблицаОтчета Цикл
		ОбластьНачало = РегламентированнаяОтчетностьКлиентСервер.ПреобразоватьКодДекларации(Строка.КодСтроки);		
		
		Если СтрНайти(ОбластьНачало, "s_300_06_001") <> 0 Тогда
			КодОсновнойСтроки = Лев(Строка.КодСтроки,10);
			ИмяОбластиМакета = "НДС_Реализация_" + СтрЗаменить(КодОсновнойСтроки, ".", "_");
			ОбластьДополнительныхСтрок = мМакетКодовСтрок.Области.Найти(ИмяОбластиМакета);
			КодДополнительнойСтроки = Прав(Строка.КодСтроки, СтрДлина(Строка.КодСтроки) - 11);
			НаименованиеКодаСтрокиДополнительнаяЧасть = "";
			
			Если ОбластьДополнительныхСтрок <> Неопределено Тогда
				НаименованиеКодаСтрокиДополнительнаяЧасть = РегламентированнаяОтчетность.ПолучитьНаименованиеСтрокиКлассификатораПоКоду(мМакетКодовСтрок, ОбластьДополнительныхСтрок, КодДополнительнойСтроки);
			КонецЕсли;
			
			Если НаименованиеКодаСтрокиДополнительнаяЧасть = "" Тогда
				ТекстСообщения = НСтр("ru = 'Данные по коду строки %1, содержащиеся в регистре накопления ""%2"" не учтены в форме.'");								
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодСтроки,  ?(СтрНайти(Строка.КодСтроки, "300.06.007"),"Корректировка НДС к возмещению","Корректировка НДС"));			
				Если ВыводитьСообщения Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
				КонецЕсли;	
				Продолжить;
			КонецЕсли;
			
			ИндексВидаОперации = ВидОперацииКорректировки1.Найти(Строка.КодСтроки);
			Если ИндексВидаОперации = Неопределено  И МаксимальныйНомерСтроки_300_06_001 < 5 Тогда
				ВидОперацииКорректировки1.Добавить(Строка.КодСтроки);
				ИндексВидаОперации = ВидОперацииКорректировки1.Количество() - 1;
				МаксимальныйНомерСтроки_300_06_001 = МаксимальныйНомерСтроки_300_06_001 + 1;
			КонецЕсли;
			
			Если ИндексВидаОперации = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Данные по коду строки %1, содержащиеся в регистре накопления ""%2"" не учтены в форме.'");								
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодСтроки,  ?(СтрНайти(Строка.КодСтроки, "300.06.007"),"Корректировка НДС к возмещению","Корректировка НДС"));			
				Если ВыводитьСообщения Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
				КонецЕсли;	
				Продолжить;
			КонецЕсли;
			
			ИмяОбласти = "s_300_06_001_text__" + Строка(ИндексВидаОперации + 1);
			Область = ТаблицаДанных.Найти(ИмяОбласти,"ИмяОбласти");
			Если Область = Неопределено Тогда
				Область = ТаблицаДанных.Добавить();
				Область.ИмяОбласти	= ИмяОбласти;
			КонецЕсли;
			
			Область.Значение 	= КодДополнительнойСтроки;
			
			ИмяОбластьСумма = "s_300_06_001_a__" + Строка(ИндексВидаОперации + 1);
			ОбластьСумма = ТаблицаДанных.Найти(ИмяОбластьСумма,"ИмяОбласти");
			
			Если ОбластьСумма =  Неопределено Тогда
				ОбластьСумма 			= ТаблицаДанных.Добавить();
				ОбластьСумма.ИмяОбласти	= ИмяОбластьСумма;
				ОбластьСумма.Значение	= 0;	
			КонецЕсли;
			
			ОбластьСумма.Значение = ОбластьСумма.Значение + Окр(?(Строка.Сумма <> NULL, Строка.Сумма, 0));
			
			ИмяОбластьСуммаНДС = "s_300_06_001_b__" + Строка(ИндексВидаОперации + 1);
			ОбластьСуммаНДС = ТаблицаДанных.Найти(ИмяОбластьСуммаНДС,"ИмяОбласти");
			
			Если ОбластьСуммаНДС = Неопределено Тогда
				ОбластьСуммаНДС 			= ТаблицаДанных.Добавить();
				ОбластьСуммаНДС.ИмяОбласти	= ИмяОбластьСуммаНДС;
				ОбластьСуммаНДС.Значение	= 0;	
			КонецЕсли;	
			
			ОбластьСуммаНДС.Значение = ОбластьСуммаНДС.Значение + Окр(?(Строка.СуммаНДС <> NULL, Строка.СуммаНДС, 0));
			
        ИначеЕсли СтрНайти(ОбластьНачало, "s_300_06_006") <> 0 Тогда
			КодОсновнойСтроки = Лев(Строка.КодСтроки,10);
			ИмяОбластиМакета = "НДС_Реализация_" + СтрЗаменить(КодОсновнойСтроки, ".", "_");
			ОбластьДополнительныхСтрок = мМакетКодовСтрок.Области.Найти(ИмяОбластиМакета);
			КодДополнительнойСтроки = Прав(Строка.КодСтроки, СтрДлина(Строка.КодСтроки) - 11);
			НаименованиеКодаСтрокиДополнительнаяЧасть = "";
			
			Если ОбластьДополнительныхСтрок <> Неопределено Тогда
				НаименованиеКодаСтрокиДополнительнаяЧасть = РегламентированнаяОтчетность.ПолучитьНаименованиеСтрокиКлассификатораПоКоду(мМакетКодовСтрок, ОбластьДополнительныхСтрок, КодДополнительнойСтроки);
			КонецЕсли;
			
			Если НаименованиеКодаСтрокиДополнительнаяЧасть = "" Тогда
				ТекстСообщения = НСтр("ru = 'Данные по коду строки %1, содержащиеся в регистре накопления ""%2"" не учтены в форме.'");								
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодСтроки,  ?(СтрНайти(Строка.КодСтроки, "300.06.007"),"Корректировка НДС к возмещению","Корректировка НДС"));			
				Если ВыводитьСообщения Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
				КонецЕсли;	
				Продолжить;
			КонецЕсли;
			
			ИндексВидаОперации = ВидОперацииКорректировки6.Найти(Строка.КодСтроки);
			Если ИндексВидаОперации = Неопределено  И МаксимальныйНомерСтроки_300_06_006 < 5 Тогда
				ВидОперацииКорректировки6.Добавить(Строка.КодСтроки);
				ИндексВидаОперации = ВидОперацииКорректировки6.Количество() - 1;
				МаксимальныйНомерСтроки_300_06_006 = МаксимальныйНомерСтроки_300_06_006 + 1;
			КонецЕсли;
			Если ИндексВидаОперации = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Данные по коду строки %1, содержащиеся в регистре накопления ""%2"" не учтены в форме.'");								
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодСтроки,  ?(СтрНайти(Строка.КодСтроки, "300.06.007"),"Корректировка НДС к возмещению","Корректировка НДС"));			
				Если ВыводитьСообщения Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
				КонецЕсли;	
				Продолжить;
			КонецЕсли;
			ИмяОбласти = "s_300_06_006_text__" + Строка(ИндексВидаОперации + 1);
			Область = ТаблицаДанных.Найти(ИмяОбласти,"ИмяОбласти");
			Если Область = Неопределено Тогда
				Область = ТаблицаДанных.Добавить();
				Область.ИмяОбласти	= ИмяОбласти;
			КонецЕсли;
			
			Область.Значение 	= КодДополнительнойСтроки;
			
			ИмяОбластьСумма = "s_300_06_006_a__" + Строка(ИндексВидаОперации + 1);
			ОбластьСумма = ТаблицаДанных.Найти(ИмяОбластьСумма,"ИмяОбласти");
			
			Если ОбластьСумма =  Неопределено Тогда
				ОбластьСумма 			= ТаблицаДанных.Добавить();
				ОбластьСумма.ИмяОбласти	= ИмяОбластьСумма;
				ОбластьСумма.Значение	= 0;	
			КонецЕсли;
			
			ОбластьСумма.Значение = ОбластьСумма.Значение + Окр(?(Строка.Сумма <> NULL, Строка.Сумма, 0));
			
		ИначеЕсли СтрНайти(ОбластьНачало, "s_300_06_007") <> 0 Тогда
			КодОсновнойСтроки = Лев(Строка.КодСтроки,10);
			ИмяОбластиМакета = "НДС_Зачет_" + СтрЗаменить(КодОсновнойСтроки, ".", "_");
			ОбластьДополнительныхСтрок = мМакетКодовСтрок.Области.Найти(ИмяОбластиМакета);
			КодДополнительнойСтроки = Прав(Строка.КодСтроки, СтрДлина(Строка.КодСтроки) - 11);
			НаименованиеКодаСтрокиДополнительнаяЧасть = "";
			
			Если ОбластьДополнительныхСтрок <> Неопределено Тогда
				НаименованиеКодаСтрокиДополнительнаяЧасть = РегламентированнаяОтчетность.ПолучитьНаименованиеСтрокиКлассификатораПоКоду(мМакетКодовСтрок, ОбластьДополнительныхСтрок, КодДополнительнойСтроки);
			КонецЕсли;
			
			Если НаименованиеКодаСтрокиДополнительнаяЧасть = "" Тогда
				ТекстСообщения = НСтр("ru = 'Данные по коду строки %1, содержащиеся в регистре накопления ""%2"" не учтены в форме.'");								
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодСтроки,  ?(СтрНайти(Строка.КодСтроки, "300.06.007"),"Корректировка НДС к возмещению","Корректировка НДС"));			
				Если ВыводитьСообщения Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
				КонецЕсли;	
				Продолжить;
			КонецЕсли;
			
			ИндексВидаОперации = ВидОперацииКорректировки7.Найти(Строка.КодСтроки);
			Если ИндексВидаОперации = Неопределено   И МаксимальныйНомерСтроки_300_06_007 < 5 Тогда
				ВидОперацииКорректировки7.Добавить(Строка.КодСтроки);
				ИндексВидаОперации = ВидОперацииКорректировки7.Количество() - 1;
				МаксимальныйНомерСтроки_300_06_007 = МаксимальныйНомерСтроки_300_06_007 + 1;
			КонецЕсли;	
			Если ИндексВидаОперации = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Данные по коду строки %1, содержащиеся в регистре накопления ""%2"" не учтены в форме.'");								
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодСтроки,  ?(СтрНайти(Строка.КодСтроки, "300.06.007"),"Корректировка НДС к возмещению","Корректировка НДС"));			
				Если ВыводитьСообщения Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
				КонецЕсли;	
				Продолжить;
			КонецЕсли;
			ИмяОбласти = "s_300_06_007_text__" + Строка(ИндексВидаОперации + 1);
			Область = ТаблицаДанных.Найти(ИмяОбласти,"ИмяОбласти");
			Если Область = Неопределено Тогда
				Область = ТаблицаДанных.Добавить();
				Область.ИмяОбласти	= ИмяОбласти;
			КонецЕсли;
			
			Область.Значение 	= КодДополнительнойСтроки;
			
			//ИмяОбластьСумма = "s_300_06_007_a__" + Строка(ИндексВидаОперации + 1);
			//ОбластьСумма = ТаблицаДанных.Найти(ИмяОбластьСумма,"ИмяОбласти");
			//
			//Если ОбластьСумма =  Неопределено Тогда
			//	ОбластьСумма 			= ТаблицаДанных.Добавить();
			//	ОбластьСумма.ИмяОбласти	= ИмяОбластьСумма;
			//	ОбластьСумма.Значение	= 0;	
			//КонецЕсли;
			//
			//ОбластьСумма.Значение = ОбластьСумма.Значение + Окр(?(Строка.Сумма <> NULL, Строка.Сумма, 0));
			
			ИмяОбластьСуммаНДС = "s_300_06_007_b__" + Строка(ИндексВидаОперации + 1);
			ОбластьСуммаНДС = ТаблицаДанных.Найти(ИмяОбластьСуммаНДС,"ИмяОбласти");
			
			Если ОбластьСуммаНДС = Неопределено Тогда
				ОбластьСуммаНДС 			= ТаблицаДанных.Добавить();
				ОбластьСуммаНДС.ИмяОбласти	= ИмяОбластьСуммаНДС;
				ОбластьСуммаНДС.Значение	= 0;	
			КонецЕсли;	
			
			// корректировку общего оборота берем по удельному весу,
			СуммаНДС = Окр(?(Строка.СуммаНДС <> NULL, Строка.СуммаНДС, 0));				
			Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный Тогда
				ОбластьСуммаНДС.Значение = ОбластьСуммаНДС.Значение + СуммаНДС;
			Иначе
				Если Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Облагаемый Тогда
					ОбластьСуммаНДС.Значение = ОбластьСуммаНДС.Значение + СуммаНДС;
				ИначеЕсли Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Освобожденный Тогда
					s_300_00_026_2_b = s_300_00_026_2_b + СуммаНДС;// 0
				ИначеЕсли Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Общий Тогда
					ОбластьСуммаНДС.Значение = ОбластьСуммаНДС.Значение + Окр(СуммаНДС*СтруктураРеквизитовФормы.УдВес/100);
					s_300_00_026_2_b		 = s_300_00_026_2_b + СуммаНДС - Окр(СуммаНДС*СтруктураРеквизитовФормы.УдВес/100);
				КонецЕсли;
			КонецЕсли;    				
		Иначе
			Если Строка.Вид = "Реализация" Тогда
				ОбластьСумма = ТаблицаДанных.Найти(ОбластьНачало + "_a","ИмяОбласти");
				ОбластьСуммаНДС = ТаблицаДанных.Найти(ОбластьНачало + "_b","ИмяОбласти");
				Если ОбластьСумма <> Неопределено Тогда
					ОбластьСумма.Значение = ОбластьСумма.Значение + Окр(?(Строка.Сумма <> NULL, Строка.Сумма, 0));
				КонецЕсли;
				
				Если ОбластьСуммаНДС <> Неопределено Тогда
					ОбластьСуммаНДС.Значение = ОбластьСуммаНДС.Значение + Окр(?(Строка.СуммаНДС <> NULL, Строка.СуммаНДС, 0));
				КонецЕсли;	
			Иначе //"Возмещение"
				ОбластьСумма = ТаблицаДанных.Найти(ОбластьНачало + "_a","ИмяОбласти");
				ОбластьСуммаНДС = ТаблицаДанных.Найти(ОбластьНачало + "_b","ИмяОбласти");
				
				СуммаНДС = Окр(?(Строка.СуммаНДС <> NULL, Строка.СуммаНДС, 0));				
				Если ОбластьСумма <> Неопределено Тогда
					ОбластьСумма.Значение = ОбластьСумма.Значение + Окр(?(Строка.Сумма <> NULL, Строка.Сумма, 0));
				КонецЕсли;
				
				Если ОбластьСуммаНДС <> Неопределено Тогда
					// корректировку общего оборота берем по удельному весу,
					Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный Тогда
						ОбластьСуммаНДС.Значение = ОбластьСуммаНДС.Значение + СуммаНДС;
					Иначе
						Если Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Облагаемый Тогда
							ОбластьСуммаНДС.Значение = ОбластьСуммаНДС.Значение + СуммаНДС;
						ИначеЕсли Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Освобожденный Тогда
							s_300_00_026_2_b = s_300_00_026_2_b + СуммаНДС;// 0
						ИначеЕсли Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Общий Тогда
							ОбластьСуммаНДС.Значение = ОбластьСуммаНДС.Значение + Окр(СуммаНДС*СтруктураРеквизитовФормы.УдВес/100);
							s_300_00_026_2_b		 = s_300_00_026_2_b + СуммаНДС - Окр(СуммаНДС*СтруктураРеквизитовФормы.УдВес/100);
						КонецЕсли;
					КонецЕсли;    				
				КонецЕсли
			КонецЕсли;				
		КонецЕсли;				
			
	КонецЦикла;
	
	Если СтруктураРеквизитовФормы.мМетодРасчета <> Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный Тогда
		ТаблицаДанных300 = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, "Форма300");
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных300, "s_300_00_026_2_b", s_300_00_026_2_b, Форма300ПолеТабличногоДокументаСтраница3);
		РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, "Форма300", ТаблицаДанных300);
	КонецЕсли;	
	
	СтруктураРеквизитовФормы.мМаксимальныеНормераПодстрокЯчеек.Вставить("field_300_06_001",?(МаксимальныйНомерСтроки_300_06_001 < 5, 5, МаксимальныйНомерСтроки_300_06_001));
	СтруктураРеквизитовФормы.мМаксимальныеНормераПодстрокЯчеек.Вставить("field_300_06_006",?(МаксимальныйНомерСтроки_300_06_006 < 5, 5, МаксимальныйНомерСтроки_300_06_006));
	СтруктураРеквизитовФормы.мМаксимальныеНормераПодстрокЯчеек.Вставить("field_300_06_007",?(МаксимальныйНомерСтроки_300_06_007 < 5, 5, МаксимальныйНомерСтроки_300_06_007));
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);					
	ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтотОбъект,ТекИмяФормы,Перезаполнить);	         				
	
КонецПроцедуры // Форма300_06ЗаполнитьАвтоНаСервере()

&НаСервере
Процедура  Форма300_06ОбработкаВыбораЗначенийНаСервере(Результат, ИмяЯчейки)
	
	ЭтотОбъект.Форма300_06ПолеТабличногоДокументаСтраница1.Области[ИмяЯчейки].Значение = Результат;
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, "Форма300_06", ИмяЯчейки, Результат, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура  Форма300_06ОбработкаВыбораЗначений(Результат, ПараметрыВыбора) экспорт
	ТекИмяФормы = "Форма300_06";
	Если Результат = Неопределено Тогда
		Возврат;
	Иначе
		ВыбранноеЗначение = Результат;
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 
			ВыбранноеЗначение = ВыбранноеЗначение.Наименование;
		КонецЕсли;
	КонецЕсли;
	
	Форма300_06ОбработкаВыбораЗначенийНаСервере(ВыбранноеЗначение, ПараметрыВыбора.ИмяЯчейки); 	
	
КонецПроцедуры

&НаКлиенте
Процедура Форма300_06ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Элемент.ТекущаяОбласть.Имя;	
	
	Если СтрНайти(Ячейка, "text__") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
		
		ИмяРаздела = Сред(Ячейка,3,10);
		КодРаздела = Прав(ИмяРаздела, 3);
		Если КодРаздела = "001" ИЛИ  КодРаздела = "006" Тогда
			ИмяОбласти = "НДС_Реализация_" + ИмяРаздела;
		Иначе
			ИмяОбласти = "НДС_Зачет_" + ИмяРаздела;
		КонецЕсли;	
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИмяМакета"			  	, "КодыСтрокНалоговыхДеклараций");
		ПараметрыФормы.Вставить("ИмяСекции"			  	, ИмяОбласти);
		ПараметрыФормы.Вставить("ПолучатьПолныеДанные"	, Истина);
		ПараметрыФормы.Вставить("ТекущийКодСтроки"	  	, Элемент.ТекущаяОбласть.Значение);
		ПараметрыФормы.Вставить("ИмяЯчейки"	  			, Ячейка);
		
		
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_06ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыФормы);
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область Форма300_07

&НаКлиенте
Процедура  Форма300_07ОбработкаВыбораЗначений(Результат, ПараметрыВыбора) экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли ПараметрыВыбора.ЭлементВыбора  =  "СтатусПоставщика" ИЛИ ПараметрыВыбора.ЭлементВыбора  =  "ПризнакВидаДеятельности" Тогда
		// список выбора
		ВыбранныйЭлемент = Результат.Значение
	Иначе
		ВыбранныйЭлемент = Результат;
	КонецЕсли;
	
	Форма300_07ОбработкаВыбораЗначенийНаСервере(ВыбранныйЭлемент, ПараметрыВыбора); 	
КонецПроцедуры

&НаСервере
Процедура  Форма300_07ОбработкаВыбораЗначенийНаСервере(Результат, ПараметрыВыбора)
	НомерЯчейки = Число(Сред(ПараметрыВыбора.Ячейка, Найти(ПараметрыВыбора.Ячейка, "__")+ 2));
	Если ПараметрыВыбора.ЭлементВыбора = "Контрагент" И ЗначениеЗаполнено(Результат) Тогда
		
		// ИИН
		ИмяЯчейкиБИН = "Ф300_07_C__" + НомерЯчейки;
		Форма300_07ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы,ИмяЯчейкиБИН, Результат.ИдентификационныйКодЛичности, Результат, Ложь);	
		
	ИначеЕсли ПараметрыВыбора.ЭлементВыбора = "СчетФактура"  И ЗначениеЗаполнено(Результат) Тогда	
		// Номер СФ
		ИмяЯчейки = "Ф300_07_D__" + НомерЯчейки;
		
		НомерСФ = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Результат.Номер, Результат, ПредставлениеНомераДокументов);
		НомерСФ = ИсключитьЗапрещенныеСимволыИзНомераСФ(НомерСФ, ИсключатьНецифровыеСимволы300_07, ИсключатьЛидирующиеНули300_07);		
		Форма300_07ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы, ИмяЯчейки, НомерСФ, Результат, Ложь);			
		
		// Дата СФ
		ИмяЯчейки = "Ф300_07_E__" + НомерЯчейки;
		Форма300_07ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы, ИмяЯчейки, Результат.Дата, Результат, Ложь);	
		
		// СуммаСФ		
	Иначе		
		Форма300_07ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы, ПараметрыВыбора.Ячейка,Результат, Результат, ПараметрыВыбора.ПризнакРасчета);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Форма300_07ПолеТабличногоДокументаЛистAВыбор(Элемент, Область, СтандартнаяОбработка)	
	Ячейка = Элемент.ТекущаяОбласть.Имя;	
	Если (Найти(Ячейка, "Ф300_07") = 0) Тогда
		// выбрана не именованная ячейка
		Возврат;
	КонецЕсли;
	
	Значение = Элемент.ТекущаяОбласть.Значение;
	ЗначениеРасшифровки = Элемент.ТекущаяОбласть.Расшифровка;
	НомерЯчейки = Число(Сред(Ячейка, Найти(Ячейка, "__")+ 2));
	
	ТекИмяФормы = "Форма300_07";
	ИмяЛиста 	= "ЛистA";
	ПризнакРасчета = Ложь;
	                      		
	Если Найти(Ячейка, "Ф300_07_C__") > 0 Тогда
		
		 //может быть не заполнена расшировка ячейки при восстановления данных старых форм
		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			 ИмяЯчейкиРасшифровки = "Ф300_07_C" + Сред(Ячейка,Найти(Ячейка,"__"));
			 ОбластьРасширофвки = Форма300_07ПолеТабличногоДокументаЛистA.Области.Найти(ИмяЯчейкиРасшифровки);
			 Если ОбластьРасширофвки <> Неопределено Тогда 
				 ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;				 
				 Форма300_07ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка,Значение, ЗначениеРасшифровки, Ложь);
			 КонецЕсли;				 
		 КонецЕсли;

		Если ЗначениеЗаполнено(Значение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			// стандартная обработка расшифровки
			 Возврат;
		КонецЕсли;
        // открываем справочник для выбора элемента
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Контрагент", Ложь);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_07ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",,ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
	ИначеЕсли Найти(Ячейка, "Ф300_07_B__")> 0 Тогда		
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "СтатусПоставщика", Ложь);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_07ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("", "Пустое значение");
		СписокВыбора.Добавить("К", "К - Поставщик является комитентом");
		СписокВыбора.Добавить("М", "М - Поставщик является комиссионером");
		СписокВыбора.Добавить("Д", "Д - Поставщик является доверителем");
		СписокВыбора.Добавить("П", "П - Поставщик является комиссионером");
		СписокВыбора.Добавить("Э", "Э - Поставщик является экспедитором");
		СписокВыбора.Добавить("Л", "Л - Поставщик является лизингодателем");
		СписокВыбора.Добавить("С", "С - Реализация в рамках договора о совместной деятельности");
		СписокВыбора.Добавить("И", "И - Реализация периодических печатных изданий или иной продукции средств массовой информации, включая размещенные на интернет-ресурсе в общедоступных телекоммуникационных сетях");
		
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения,"Выберите статус поставщика");
		
	иначеЕсли Найти(Ячейка, "Ф300_07_D__")> 0 ИЛИ Найти(Ячейка, "Ф300_07_E__")> 0 Тогда		
		
		 //может быть не заполнена расшировка ячейки при восстановления данных старых форм
		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			 ИмяЯчейкиРасшифровки = "Ф300_07_D" + Сред(Ячейка,Найти(Ячейка,"__"));
			 ОбластьРасширофвки = Форма300_07ПолеТабличногоДокументаЛистA.Области.Найти(ИмяЯчейкиРасшифровки);
			 Если ОбластьРасширофвки <> Неопределено Тогда 
				 ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;				 
				 Форма300_07ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка,Значение, ЗначениеРасшифровки, Ложь);
			 КонецЕсли;				 
		 КонецЕсли;

		Если ЗначениеЗаполнено(Значение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			// стандартная обработка расшифровки
			 Возврат;
		КонецЕсли;

	    // добавим отбор по контрагенту в форме выбора СФ, если контрагент заполнен в ячейке Ф300_07_C__
		Контрагент = Форма300_07ПолеТабличногоДокументаЛистA.Области["Ф300_07_C__" + НомерЯчейки].Расшифровка;
		
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора", ТекИмяФормы, "ЛистA", Ячейка, "СчетФактура");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_07ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		ФормаВыбора = ОткрытьФорму("Документ.СчетФактураВыданный.ФормаВыбора",,ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(ФормаВыбора.Список, "Контрагент",  Контрагент);
		КонецЕсли;	
		
	ИначеЕсли Найти(Ячейка, "Ф300_07_F__")> 0  Тогда				
		
		СтандартнаяОбработка = Ложь;
		
		НачЗначение = Область.Значение;
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "ПризнакВидаДеятельности", Ложь);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_07ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("",  "Пустое значение");
		СписокВыбора.Добавить("1", "СНР.По деятельности в рамках общеустановленного режима");
		СписокВыбора.Добавить("2", "СНР.По деятельности в рамках СНР (ст. 448 – 452 Налогового кодекса)");
				
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения,"Вид деятельности в рамках специального налогового режима (448 - 452 НК)");
			
	Иначе
		 Возврат;
	КонецЕсли; 	 	
КонецПроцедуры

&НаКлиенте
Процедура Форма300_07ПолеТабличногоДокументаЛистBВыбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Элемент.ТекущаяОбласть.Имя;
	Если (Найти(Ячейка, "Ф300_07") = 0) Тогда
		Возврат;
	КонецЕсли;
	
	Значение = Элемент.ТекущаяОбласть.Значение;
	ЗначениеРасшифровки = Элемент.ТекущаяОбласть.Расшифровка;
	НомерЯчейки = Число(Сред(Ячейка, Найти(Ячейка, "__")+ 2));
	
	ТекИмяФормы = "Форма300_07";
	ИмяЛиста 	= "ЛистB";
	ПризнакРасчета = Ложь;
	                    		
	Если (Найти(Ячейка, "Ф300_07") > 0) Тогда
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Показатели", Истина);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_07ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		Расчет = Истина;
		Если (Найти(Ячейка, "Ф300_07_G__") > 0) Тогда
			НачЗначение = Элемент.ТекущаяОбласть.Значение;			
			ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, "Введите всего стоимость без НДС", 12, 0); 
			 
		ИначеЕсли (Найти(Ячейка, "Ф300_07_H__") > 0) Тогда						
			НачЗначение = Элемент.ТекущаяОбласть.Значение;
			ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, "Введите сумму НДС", 12, 0); 						 
		ИначеЕсли (Найти(Ячейка, "Ф300_07_I__") > 0) Тогда			
			НачЗначение = Элемент.ТекущаяОбласть.Значение;
			ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, "Введите сумму начисленного НДС", 12, 0);
		Иначе 
			Возврат;			 
		КонецЕсли;
       		 
		 Форма300_07ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка, НачЗначение,, Расчет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Форма300_07ПолеТабличногоДокументаЛистCВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Элемент.ТекущаяОбласть.Имя;
	Если (Найти(Ячейка, "Ф300_07") = 0) Тогда
		Возврат;
	КонецЕсли;
	Значение = Элемент.ТекущаяОбласть.Значение;
	
	Если Найти(Ячейка, "__") = 0 Тогда
		НомерЯчейки = 0;
	Иначе
		НомерЯчейки = Число(Сред(Ячейка, Найти(Ячейка, "__")+ 2));;
	КонецЕсли;
	             	
	ТекИмяФормы = "Форма300_07";
	ИмяЛиста 	= "ЛистC";
	ПризнакРасчета = Ложь;
	                  	
	Если (Найти(Ячейка, "Ф300_07") > 0) Тогда
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Показатели", Истина);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_07ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		Расчет = Истина;
			
		Если (Найти(Ячейка, "Ф300_07_J__") > 0) Тогда
			НачЗначение = Элемент.ТекущаяОбласть.Значение;			
			ПоказатьВводСтроки(ОписаниеОповещения, НачЗначение, "Вид полезного ископаемого", 50); 
			 
		ИначеЕсли (Найти(Ячейка, "Ф300_07_K__") > 0) Тогда						
			НачЗначение = Элемент.ТекущаяОбласть.Значение;
			ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, "Объем полезного ископаемого", 12, 0);
			
		ИначеЕсли (Найти(Ячейка, "Ф300_07_L__") > 0) Тогда			
			НачЗначение = Элемент.ТекущаяОбласть.Значение;
			ПоказатьВводСтроки(ОписаниеОповещения, НачЗначение, "Единица измерения", 12); 
			
		Иначе 
			Возврат;
			
		КонецЕсли;
		
		Форма300_07ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка, НачЗначение,, Расчет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Форма300_07ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, ИмяЯчейки, Значение, ЗначениеРасшифровки, ПризнакРасчета)	
	
	ЭтотОбъект["Форма300_07ПолеТабличногоДокумента" + ИмяЛиста].Области[ИмяЯчейки].Значение = Значение;
	ЭтотОбъект["Форма300_07ПолеТабличногоДокумента" + ИмяЛиста].Области[ИмяЯчейки].Расшифровка = ЗначениеРасшифровки;
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтотОбъект, ИмяЛиста, ИмяЯчейки, Значение, ПризнакРасчета,ЗначениеРасшифровки);
	
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ЭтотОбъект.КодФормы);
КонецПроцедуры

&НаСервере
// Процедура расчитывает значения определенных граф по строке
// многострочной формы.
//
// Параметры:
//      Инд - номер строки многострочной формы
//      Колонка - имя графы (ячейки), из которой была вызвана процедура расчета
//
Процедура Форма300_07РасчетНаСервере(Инд,Колонка)
	// построчный расчет для формы не определен
КонецПроцедуры // Форма300_07Расчет()

&НаСервере
Функция Форма300_07РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
		
	ЗапросПоСтранам = Новый Запрос;
	ЗапросПоСтранам.УстановитьПараметр("Код", "398");
	ЗапросПоСтранам.Текст = "ВЫБРАТЬ
	                        |	КлассификаторСтранМира.Ссылка
	                        |ИЗ
	                        |	Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
	                        |ГДЕ
	                        |	КлассификаторСтранМира.Код = &Код ИЛИ КлассификаторСтранМира.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)";
							
	Результат = ЗапросПоСтранам.Выполнить();
	
	Страна = Новый Массив;
	
	Если НЕ Результат.Пустой() Тогда
		Результат = Результат.Выбрать();
		Пока Результат.Следующий() Цикл 
			Страна.Добавить(Результат.Ссылка)
		КонецЦикла;	
	КонецЕсли;

	Страна.Добавить(Справочники.КлассификаторСтранМира.ПустаяСсылка());
	
	Запрос =  Новый Запрос;
	 
	Запрос.УстановитьПараметр("ДатаНачала",		    СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);	
	Запрос.УстановитьПараметр("ДатаОкончания",   	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);	                 	
	Запрос.УстановитьПараметр("Налогоплательщик",   Налогоплательщик);	
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	
	Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями и мСписокСтруктурныхЕдиниц.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ОтборПоСтруктурным", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоСтруктурным", Ложь);
	КонецЕсли;                 	
			                 
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	Если СпособФормированияРеестра = "ПоРегиструСчетовФактур" Тогда
		ТекстЗапросаПоДаннымСчетовФактур = ПолучитьТекстЗапросаСчетовФактурВыданныхПоРегистру();
		ПризнакСвязиПоКонтрагенту = Истина;
	Иначе
		ТекстЗапросаПоДаннымСчетовФактур = ПолучитьТекстЗапросаСчетовФактурВыданныхПоДокументам();
		ПризнакСвязиПоКонтрагенту = Ложь;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПризнакСвязиПоКонтрагенту", ПризнакСвязиПоКонтрагенту);
	
	Запрос.УстановитьПараметр("парамСтрана",   		Страна);	
		
	ТекстЗапроса = ТекстЗапросаСчетаФактурыВыданныеИДокументыОснования();
		
	ТекстЗапроса = ТекстЗапроса + 	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_СчетаФактурыВыданныеОтобранныеДействующиеИДокументыОснования.СчетФактура КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА &ПризнакСвязиПоКонтрагенту
	|			ТОГДА ДвиженияПоНДС.Контрагент
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Контрагент,
	|	СУММА(ДвиженияПоНДС.СуммаНДСОборот) КАК СуммаНДСОборот
	|ПОМЕСТИТЬ ДвиженияПоНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		КорректировкаНДСОбороты.Регистратор КАК Регистратор,
	|		КорректировкаНДСОбороты.Контрагент КАК Контрагент,
	|		КорректировкаНДСОбороты.СуммаНДСОборот КАК СуммаНДСОборот,
	|		КорректировкаНДСОбороты.СуммаКорректировкиОборотаОборот КАК СуммаКорректировкиОборотаОборот,
	|		0 КАК СуммаБезНДСОборот,
	|		0 КАК ОборотПоРеализацииОборот
	|	ИЗ
	|		РегистрНакопления.КорректировкаНДС.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, Налогоплательщик = &Налогоплательщик) КАК КорректировкаНДСОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДСОбороты.Регистратор,
	|		НДСОбороты.Контрагент,
	|		НДСОбороты.СуммаНДСОборот,
	|		0,
	|		НДСОбороты.СуммаБезНДСОборот,
	|		НДСОбороты.ОборотПоРеализацииОборот
	|	ИЗ
	|		РегистрНакопления.НДС.Обороты(
	|				&ДатаНачала,
	|				&ДатаОкончания,
	|				Регистратор,
	|				Налогоплательщик = &Налогоплательщик
	|					И НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСОблагаемыйИмпорт)) КАК НДСОбороты) КАК ДвиженияПоНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыВыданныеОтобранныеДействующиеИДокументыОснования КАК ВТ_СчетаФактурыВыданныеОтобранныеДействующиеИДокументыОснования
	|		ПО (ВТ_СчетаФактурыВыданныеОтобранныеДействующиеИДокументыОснования.ДокументОснование = ДвиженияПоНДС.Регистратор)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА &ПризнакСвязиПоКонтрагенту
	|			ТОГДА ДвиженияПоНДС.Контрагент
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВТ_СчетаФактурыВыданныеОтобранныеДействующиеИДокументыОснования.СчетФактура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|" + ТекстЗапросаПоДаннымСчетовФактур + "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСчетовФактур.Сумма КАК СуммаОборота,
	|	ДанныеСчетовФактур.СуммаНДС,
	|	ДанныеСчетовФактур.Номер,
	|	ДанныеСчетовФактур.Дата,
	|	ДанныеСчетовФактур.Покупатель КАК Контрагент,
	|	ДанныеСчетовФактур.Ссылка КАК СФ,
	|	ЕСТЬNULL(ДвиженияПоНДС.СуммаНДСОборот, 0) КАК СуммаНДСОборот,
	|	ДанныеСчетовФактур.ИдентификационныйКодЛичности,
	|	ДанныеСчетовФактур.Дополнительная,
	|	ДанныеСчетовФактур.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности				   
	|ИЗ
	|	ДанныеСчетовФактур КАК ДанныеСчетовФактур
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДвиженияПоНДС КАК ДвиженияПоНДС
	|		ПО ДанныеСчетовФактур.Ссылка = ДвиженияПоНДС.СчетФактура
	|		И (НЕ &ПризнакСвязиПоКонтрагенту ИЛИ ДанныеСчетовФактур.УчастникСовместнойДеятельности И ДанныеСчетовФактур.Покупатель = ДвиженияПоНДС.Контрагент ИЛИ НЕ ДанныеСчетовФактур.УчастникСовместнойДеятельности И ДанныеСчетовФактур.Контрагент = ДвиженияПоНДС.Контрагент)	               
	|ГДЕ
	|	ДанныеСчетовФактур.Ссылка.Проведен = ИСТИНА И (ДанныеСчетовФактур.Сумма <>0 ИЛИ ДанныеСчетовФактур.СуммаНДС<>0 ИЛИ ЕСТЬNULL(ДвиженияПоНДС.СуммаНДСОборот, 0) <>0)               
	|";				   
					    	 
	Если ПризнакПокупателя Тогда
		ТекстЗапроса = ТекстЗапроса + "
				   |	И НЕ ДанныеСчетовФактур.ИдентификационныйКодЛичности  = &ПустаяСтрока";
	КонецЕсли;

	Если ИсключитьСчетаФактурыФизЛицам300_07 Тогда
		ТекстЗапроса = ТекстЗапроса + "
				   |	И ДанныеСчетовФактур.ФизЛицо = ЛОЖЬ";
	КонецЕсли;
	
	Если ИсключитьСчетаФактурыНерезидентамСПустымБИН300_07 Тогда
		ТекстЗапроса = ТекстЗапроса + "
				   |	И ДанныеСчетовФактур.НерезидентСПустымБИН = ЛОЖЬ";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + " 		   
	 			   |
	 			   |УПОРЯДОЧИТЬ ПО
	 			   |	ДанныеСчетовФактур.Дата "; 
	
	Запрос.Текст = ТекстЗапроса;
	 
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() и ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 300.07 за отчетный период отсутствуют...'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);			
	КонецЕсли;	
	
	ТаблицаРезультата = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ТаблицаРезультата;		 
	
КонецФункции // Форма300_07РассчитатьДанныеФормы()

&НаКлиенте
Процедура Форма300_07ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Состояние("Расчет формы 300.07");		
	
	Форма300_07ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры	

&НаСервере
Процедура Форма300_07ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма300_07";
	
	Если Не Перезаполнить Тогда
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", ТекИмяФормы));
		Если СтрокаФормы <> Неопределено Тогда
			Если СтрокаФормы.Автозаполнение = Ложь Тогда
				Возврат;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Очистить(ТекИмяФормы, Истина);	
	
	ТекущаяСтраница = 1;
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", ТекИмяФормы));
	
	Если СтрокаФормы <> Неопределено Тогда
		СтрокаФормы.ВсегоСтраниц = 1;		
	КонецЕсли;   
	               	
	ВыборкаОтчета = Форма300_07РассчитатьДанныеФормы(Истина);
	 
	Если ВыборкаОтчета.Количество() <> 0 Тогда
		СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы);		
		
		ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, "Форма300");
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "СпособВыписки_A", "X", Форма300ПолеТабличногоДокументаСтраница1);
		РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, "Форма300", ТаблицаДанных);
		
		Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
			НомерСтроки = 2;
			
			ИмяГруппы 	= ЭлементСтруктуры.Ключ;
			ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
			ТаблицаСтрокГруппы.Очистить();
			
			ВыборкаОтчета.Сбросить();
		 
		 	Пока ВыборкаОтчета.Следующий() Цикл
				
				Элемент = ТаблицаСтрокГруппы.Добавить();   			 
				
				Если ИмяГруппы = "ЛистA" Тогда
					
					Элемент.Ф300_07_A   = Формат(НомерСтроки, мФорматНомераСтроки);
					// Заполнение закрыто, так как в правилах указано, что 
					// "в графе В указывается заглавными кириллическими буквами статус поставщика". Т.е. анализируется статус поставщика (он не автоматизирован), а не покупателя.
					//Элемент.Ф300_07_B = ?(ВыборкаОтчета.УчастникСовместнойДеятельности = Истина, "С","");
					Если  ВыборкаОтчета.СФ.ДатаОборотаВТабличнойЧасти Тогда
						Элемент.Ф300_07_B = "И";	
					КонецЕсли;	
					
					Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ВыборкаОтчета.ИдентификационныйКодЛичности) Тогда
						СтрокаИИН_БИН = ВыборкаОтчета.ИдентификационныйКодЛичности;
					Иначе
						СтрокаИИН_БИН = "";
						ТекстСообщения = НСтр("ru = 'Форма 300.07. В строке № %1  не заполнена графа C ""ИИН (БИН) покупателя"", т.к. значение содержит символы, отличные от цифр.'");		
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки));			
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);						
					КонецЕсли;
					
					Если ПроверятьИИНБИНКонтрагента И НЕ БИНИИНСоответствуетТребованиям(ВыборкаОтчета.ИдентификационныйКодЛичности, Ложь) Тогда												
						ТекстСообщения = НСтр("ru = 'Форма 300.07. В строке № %1  указан неверный ИИН/БИН контрагента в графе C: %2'");		
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки), СокрЛП(ВыборкаОтчета.ИдентификационныйКодЛичности));			
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);						
					КонецЕсли;	
					
					Элемент.Ф300_07_C = СтрокаИИН_БИН;
					Элемент.Ф300_07_C_Расшифровка = ВыборкаОтчета.Контрагент;
					
					НомерСФ = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаОтчета.Номер, ВыборкаОтчета.СФ, ПредставлениеНомераДокументов);
					НомерСФ = ИсключитьЗапрещенныеСимволыИзНомераСФ(НомерСФ, ИсключатьНецифровыеСимволы300_07, ИсключатьЛидирующиеНули300_07);								
					
					Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерСФ) Тогда
						// убирать все нецифровые смиволы из номера не будем - пользователи должны сами принять решение как им отображать							
						ТекстСообщения = НСтр("ru = 'Форма 300.07. В строке № %1 графа D ""№ счета-фактуры (документа)"", содержит символы, отличные от цифр.'");		
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки), НомерСФ);			
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);												
						
					КонецЕсли;                 
								
					Элемент.Ф300_07_D = НомерСФ;
					Элемент.Ф300_07_D_Расшифровка = ВыборкаОтчета.СФ;
					
					Элемент.Ф300_07_E = ВыборкаОтчета.Дата;
					Элемент.Ф300_07_E_Расшифровка = ВыборкаОтчета.СФ;
					
					// 7) в графе F указывается признак вида деятельности по налогоплательщику,
					// который осуществляет деятельность в рамках специального налогового режима
					// в соответствии со статьями 448 - 452 Налогового кодекса. При этом в данной графе
					// отмечается «1», если счет-фактура выписан исключительно в целях осуществления
					// деятельности, налогообложение которой осуществляется в общеустановленном порядке; 
					// «2» - если счет-фактура выписан исключительно в целях осуществления деятельности, 
					// налогообложение которой осуществляется в рамках специального налогового режима в соответствии
					// со статьями 448 - 452 Налогового кодекса; 
					
					// пока не заполняем. считаем, что значения 1 или 2 ставят только НП, работающие по спец. режиму.
					//Элемент.Ф300_07_F = 1; 									
							 
				ИначеЕсли ИмяГруппы = "ЛистB" Тогда
					
					Элемент.Ф300_07_A2 = Формат(НомерСтроки, мФорматНомераСтроки);
					
					Элемент.Ф300_07_G  = Окр(ВыборкаОтчета.СуммаОборота);							 	
					Элемент.Ф300_07_H  = Окр(ВыборкаОтчета.СуммаНДС);
					Элемент.Ф300_07_I  = Окр(ВыборкаОтчета.СуммаНДСОборот);	
					
				ИначеЕсли ИмяГруппы = "ЛистC" Тогда
							
				 	//заполняем структуру
				 	Элемент.Ф300_07_A3 = Формат(НомерСтроки, мФорматНомераСтроки);
					
				КонецЕсли; 
						                                    		 
			 	НомерСтроки = НомерСтроки + 1;           			 					 	
		 	КонецЦикла; 	 
	 	КонецЦикла; 	 
		
		РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы, СтруктураФормы); 	 
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);
		РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма,ТекИмяФормы,Перезаполнить);	 		  		
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтотОбъект);			
	КонецЕсли;
	
КонецПроцедуры // Форма300_07ЗаполнитьАвто()

&НаСервере
Функция ТекстЗапросаСчетаФактурыВыданныеИДокументыОснования(ВыбиратьТолькоБумажныеСФ = Истина)
	
	ТекстЗапроса = "";
			
	// Если в счетах-фактурах есть реквизит ДатаСовершенияОборотаПоРеализации,
	// то в форму 300.07 и 300.09 должны попасть счета-фактуры,
	// дата совершения оборота которых попадает в период сдачи отчета.
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СчетФактураВыданныйТовары.Ссылка
	|ПОМЕСТИТЬ вт_СчетаФактурыДатаОборотаВТабличнойЧасти
	|ИЗ
	|	Документ.СчетФактураВыданный.Товары КАК СчетФактураВыданныйТовары
	|ГДЕ
	|	СчетФактураВыданныйТовары.Ссылка.ДатаОборотаВТабличнойЧасти = ИСТИНА
	|	" + ?(ВыбиратьТОлькоБумажныеСФ, " И СчетФактураВыданныйТовары.Ссылка.СпособВыставления = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаДокументами.Бумажно)", "") + "
	|	И СчетФактураВыданныйТовары.ДатаОборота МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданныйУслуги.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный.Услуги КАК СчетФактураВыданныйУслуги
	|ГДЕ
	|	СчетФактураВыданныйУслуги.ДатаОборота МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И СчетФактураВыданныйУслуги.Ссылка.ДатаОборотаВТабличнойЧасти = ИСТИНА
	|	" + ?(ВыбиратьТОлькоБумажныеСФ, " И СчетФактураВыданныйУслуги.Ссылка.СпособВыставления = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаДокументами.Бумажно)", "") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданныйОС.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный.ОС КАК СчетФактураВыданныйОС
	|ГДЕ
	|	СчетФактураВыданныйОС.ДатаОборота МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И СчетФактураВыданныйОС.Ссылка.ДатаОборотаВТабличнойЧасти = ИСТИНА
	|	" + ?(ВыбиратьТОлькоБумажныеСФ, " И СчетФактураВыданныйОС.Ссылка.СпособВыставления = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаДокументами.Бумажно)", "") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданныйНМА.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный.НМА КАК СчетФактураВыданныйНМА
	|ГДЕ
	|	СчетФактураВыданныйНМА.ДатаОборота МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И СчетФактураВыданныйНМА.Ссылка.ДатаОборотаВТабличнойЧасти = ИСТИНА
	|	" + ?(ВыбиратьТОлькоБумажныеСФ, " И СчетФактураВыданныйНМА.Ссылка.СпособВыставления = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаДокументами.Бумажно)", "") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураВыданный.Ссылка КАК СчетФактура
	|ПОМЕСТИТЬ ВТ_СчетаФактуры
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДатаСовершенияОборотаПоРеализации МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И СчетФактураВыданный.ДатаОборотаВТабличнойЧасти = ЛОЖЬ
	|	" + ?(ВыбиратьТОлькоБумажныеСФ, " И СчетФактураВыданный.СпособВыставления = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаДокументами.Бумажно)", "") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вт_СчетаФактурыДатаОборотаВТабличнойЧасти.Ссылка
	|ИЗ
	|	вт_СчетаФактурыДатаОборотаВТабличнойЧасти КАК вт_СчетаФактурыДатаОборотаВТабличнойЧасти
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_СчетаФактуры.СчетФактура КАК СчетФактура,
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_СчетаФактурыИДокументыОснования
	|ИЗ
	|	ВТ_СчетаФактуры КАК ВТ_СчетаФактуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ПО ВТ_СчетаФактуры.СчетФактура = СчетФактураВыданныйДокументыОснования.Ссылка
	|;
	|
	|";

	ТекстЗапросаИсключающийОтозванныеИИсправленныеСчетаФактуры = ТекстЗапросаИсключающийОтозванныеИИсправленныеСчетаФактуры(Тип("ДокументСсылка.СчетФактураВыданный"));	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ТекстЗапросаИсключающийОтозванныеИИсправленныеСчетаФактуры + Символы.ПС;
	
	// Добавить дополнительные отборы.
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_СчетаФактурыДействующиеИДокументыОснования.СчетФактура КАК СчетФактура,
	|	ВТ_СчетаФактурыДействующиеИДокументыОснования.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_СчетаФактурыВыданныеОтобранныеДействующиеИДокументыОснования
	|ИЗ
	|	ВТ_СчетаФактурыДействующиеИДокументыОснования КАК ВТ_СчетаФактурыДействующиеИДокументыОснования
	|ГДЕ
	|	ВТ_СчетаФактурыДействующиеИДокументыОснования.СчетФактура.СтранаНазначения В(&парамСтрана)
	|	И (НЕ &ОтборПоСтруктурным
	|				И ВТ_СчетаФактурыДействующиеИДокументыОснования.СчетФактура.Организация = &Налогоплательщик
	|			ИЛИ &ОтборПоСтруктурным
	|				И ВТ_СчетаФактурыДействующиеИДокументыОснования.СчетФактура.Организация В (&парамСписокСтруктурныхЕдиниц))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция Форма300_07ПолучитьТаблицуДанныхРеестраExcel(ТекКодФормы)
	
	СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, ТекКодФормы);
	
	// Создание таблицы А, которая должна содержать свои колонки, а также колонки остальных таблиц.
	ТаблицаДанныхA = Новый ТаблицаЗначений;              
	ТаблицаДанныхA.Колонки.Добавить("НомерСтроки", , 		"Номер строки");
	ТаблицаДанныхA.Колонки.Добавить("СтатусПоставщика", , 	"Статус поставщика");
	ТаблицаДанныхA.Колонки.Добавить("ИННБИНПокупателя", , 	"ИИН (БИН) покупателя");
	
	ТаблицаДанныхA.Колонки.Добавить("НомерСФ", , 			"Номер счета-фактуры");
	ТаблицаДанныхA.Колонки.Добавить("ДатаСФ", , 			"Дата выписки счета - фактуры");	
	ТаблицаДанныхA.Колонки.Добавить("ВидСФПрав", , 			"Вид счета-фактуры");
	
	ТаблицаДанныхA.Колонки.Добавить("СтоимостьБезНДС", , 	"Всего стоимость по счету-фактуре без учета НДС");
	ТаблицаДанныхA.Колонки.Добавить("СуммаНДССФ", , 		"Сумма НДС, указанного в счете-фактуре");
	ТаблицаДанныхA.Колонки.Добавить("СуммаНДСНачисленного", , "Сумма начисленного НДС");
	
	ТаблицаДанныхA.Колонки.Добавить("ВидПолезногоИскопаемого", , 	"Вид полезного ископаемого");
	ТаблицаДанныхA.Колонки.Добавить("ОбъемПолезногоИскопаемого", ,  "Объем полезного ископаемого");
	ТаблицаДанныхA.Колонки.Добавить("ЕдиницаИзмерения", , 	        "Единица измерения");
	
	ТаблицаДанныхB = Новый ТаблицаЗначений;
	ТаблицаДанныхB.Колонки.Добавить("СтоимостьБезНДС");
	ТаблицаДанныхB.Колонки.Добавить("СуммаНДССФ");
	ТаблицаДанныхB.Колонки.Добавить("СуммаНДСНачисленного");
	
	ТаблицаДанныхC = Новый ТаблицаЗначений;
	ТаблицаДанныхC.Колонки.Добавить("ВидПолезногоИскопаемого");
	ТаблицаДанныхC.Колонки.Добавить("ОбъемПолезногоИскопаемого");
	ТаблицаДанныхC.Колонки.Добавить("ЕдиницаИзмерения");	
	
	Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
		ИмяГруппы 		   = ЭлементСтруктуры.Ключ;
		ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
				
		Для Каждого Элемент Из ТаблицаСтрокГруппы Цикл
		
			Если ИмяГруппы = "ЛистA" Тогда
				НоваяСтрокаДанных = ТаблицаДанныхA.Добавить();	
			
				//Так должны заполнять по отдельности значения выборки 
				//для каждого листа
				НоваяСтрокаДанных.НомерСтроки 	   = Элемент.Ф300_07_A;
				НоваяСтрокаДанных.СтатусПоставщика = Элемент.Ф300_07_B;
				Если ЗначениеЗаполнено(Элемент.Ф300_07_C) Тогда 
					НоваяСтрокаДанных.ИННБИНПокупателя = Элемент.Ф300_07_C;
				КонецЕсли;
				
				НоваяСтрокаДанных.НомерСФ 		   = Элемент.Ф300_07_D;
				Если ЗначениеЗаполнено(Элемент.Ф300_07_E) Тогда
					НоваяСтрокаДанных.ДатаСФ	   = НачалоДня(Элемент.Ф300_07_E);
				КонецЕсли;
												
				Если ЗначениеЗаполнено(Элемент.Ф300_07_F) Тогда
					НоваяСтрокаДанных.ВидСФПрав	   = Элемент.Ф300_07_F;
				КонецЕсли;
				
			ИначеЕсли ИмяГруппы = "ЛистB" Тогда
				
				НоваяСтрокаДанных = ТаблицаДанныхB.Добавить();	
				
				НоваяСтрокаДанных.СтоимостьБезНДС	   = Элемент.Ф300_07_G;
				НоваяСтрокаДанных.СуммаНДССФ 		   = Элемент.Ф300_07_H;
				НоваяСтрокаДанных.СуммаНДСНачисленного = Элемент.Ф300_07_I;
				
			ИначеЕсли ИмяГруппы = "ЛистC" Тогда

				НоваяСтрокаДанных = ТаблицаДанныхC.Добавить();	

				НоваяСтрокаДанных.ВидПолезногоИскопаемого	= Элемент.Ф300_07_J;
				НоваяСтрокаДанных.ОбъемПолезногоИскопаемого = Элемент.Ф300_07_K;
				НоваяСтрокаДанных.ЕдиницаИзмерения          = Элемент.Ф300_07_L;
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЦикла;
	
	// сводная таблица
    ТаблицаДанныхA.ЗагрузитьКолонку(ТаблицаДанныхB.ВыгрузитьКолонку("СтоимостьБезНДС"),	"СтоимостьБезНДС");
	ТаблицаДанныхA.ЗагрузитьКолонку(ТаблицаДанныхB.ВыгрузитьКолонку("СуммаНДССФ"), 		"СуммаНДССФ");
	ТаблицаДанныхA.ЗагрузитьКолонку(ТаблицаДанныхB.ВыгрузитьКолонку("СуммаНДСНачисленного"),"СуммаНДСНачисленного");
    ТаблицаДанныхA.ЗагрузитьКолонку(ТаблицаДанныхC.ВыгрузитьКолонку("ВидПолезногоИскопаемого"),	  "ВидПолезногоИскопаемого");
	ТаблицаДанныхA.ЗагрузитьКолонку(ТаблицаДанныхC.ВыгрузитьКолонку("ОбъемПолезногоИскопаемого"), "ОбъемПолезногоИскопаемого");
	ТаблицаДанныхA.ЗагрузитьКолонку(ТаблицаДанныхC.ВыгрузитьКолонку("ЕдиницаИзмерения"),          "ЕдиницаИзмерения");

	Возврат ТаблицаДанныхA;
	
КонецФункции

&НаСервере
Функция Форма300_07ПолучитьСтруктуруСоответствияПолейРеестраExcel()
	
	СтруктураСоответствияПолей = Новый Структура();	
	СтруктураСоответствияПолей.Вставить("НомерСтроки", 		1);
	СтруктураСоответствияПолей.Вставить("СтатусПоставщика", 2);
	СтруктураСоответствияПолей.Вставить("РННПокупателя", 	3);
	СтруктураСоответствияПолей.Вставить("ИННБИНПокупателя", 4);
	СтруктураСоответствияПолей.Вставить("НомерСФ", 			5);
	СтруктураСоответствияПолей.Вставить("ДатаСФ", 			6);
	СтруктураСоответствияПолей.Вставить("ВидСФПрав", 		7);
	СтруктураСоответствияПолей.Вставить("СтоимостьБезНДС", 	8);
	СтруктураСоответствияПолей.Вставить("СуммаНДССФ", 		9);
	СтруктураСоответствияПолей.Вставить("СуммаНДСНачисленного", 10);
	СтруктураСоответствияПолей.Вставить("ВидПолезногоИскопаемого", 	 11);
	СтруктураСоответствияПолей.Вставить("ОбъемПолезногоИскопаемого", 12);
	СтруктураСоответствияПолей.Вставить("ЕдиницаИзмерения",          13);
	
	Возврат СтруктураСоответствияПолей;
КонецФункции

&НаСервере
Функция Форма300_07ПолучитьСтруктуруИтоговыхПолейРеестраExcel()
	СтруктураИтоговыхПолей = Новый Структура;
	СтруктураИтоговыхПолей.Вставить("СтоимостьБезНДС", 		8);
	СтруктураИтоговыхПолей.Вставить("СуммаНДССФ", 			9);
	СтруктураИтоговыхПолей.Вставить("СуммаНДСНачисленного", 10);
	
	Возврат СтруктураИтоговыхПолей;
КонецФункции

#КонецОбласти

#Область Форма300_08

&НаКлиенте
Процедура Форма300_08ОбработкаВыбораЗначений(Результат, ПараметрыВыбора) экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли ПараметрыВыбора.ЭлементВыбора  =  "СтатусПоставщика" ИЛИ ПараметрыВыбора.ЭлементВыбора  =  "ПризнакВидаДеятельности" Тогда
		ВыбранныйЭлемент = Результат.Значение
	Иначе
		ВыбранныйЭлемент = Результат;
	КонецЕсли;
	
	Форма300_08ОбработкаВыбораЗначенийНаСервере(ВыбранныйЭлемент, ПараметрыВыбора); 	
КонецПроцедуры

&НаСервере
Процедура Форма300_08ОбработкаВыбораЗначенийНаСервере(Результат, ПараметрыВыбора)
	НомерЯчейки = Число(Сред(ПараметрыВыбора.Ячейка, Найти(ПараметрыВыбора.Ячейка, "__")+ 2));
	Если ПараметрыВыбора.ЭлементВыбора = "Контрагент"  И ЗначениеЗаполнено(Результат) Тогда
				
		// ИИН
		ИмяЯчейкиБИН = "Ф300_08_C__" + НомерЯчейки;
		Форма300_08ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы,ИмяЯчейкиБИН, Результат.ИдентификационныйКодЛичности, Результат, Ложь);	
		
	ИначеЕсли ПараметрыВыбора.ЭлементВыбора = "СчетФактура"  И ЗначениеЗаполнено(Результат) Тогда	
		// Номер СФ
		ИмяЯчейки = "Ф300_08_D__" + НомерЯчейки;
				
		НомерСФ = Результат.НомерВходящегоДокумента;		
		Форма300_08ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы, ИмяЯчейки, НомерСФ, Результат, Ложь);			
		
		// Дата СФ
		ИмяЯчейки = "Ф300_08_E__" + НомерЯчейки;
		Форма300_08ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы, ИмяЯчейки, Результат.ДатаВходящегоДокумента, Результат, Ложь);	
		
		// СуммаСФ		
	Иначе		
		Форма300_08ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы, ПараметрыВыбора.Ячейка, Результат, Результат, ПараметрыВыбора.ПризнакРасчета);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Форма300_08ПолеТабличногоДокументаЛистAВыбор(Элемент, Область, СтандартнаяОбработка)	
	Ячейка = Элемент.ТекущаяОбласть.Имя;	
	Если (Найти(Ячейка, "Ф300_08") = 0) Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(Ячейка, "__") = 0 Тогда
		НомерЯчейки = 0;
	Иначе
		НомерЯчейки = Число(Сред(Ячейка, Найти(Ячейка, "__")+ 2));;
	КонецЕсли;

	Значение = Элемент.ТекущаяОбласть.Значение;
	ЗначениеРасшифровки = Элемент.ТекущаяОбласть.Расшифровка;
	
	ТекИмяФормы = "Форма300_08";
	ИмяЛиста 	= "ЛистA";
	ПризнакРасчета = Ложь;
	
		
	Если Найти(Ячейка, "Ф300_08_C__") > 0 Тогда		
		
		 //может быть не заполнена расшировка ячейки при восстановления данных старых форм
		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			 ИмяЯчейкиРасшифровки = "Ф300_08_C" + Сред(Ячейка,Найти(Ячейка,"__"));
			 ОбластьРасширофвки = Форма300_08ПолеТабличногоДокументаЛистA.Области.Найти(ИмяЯчейкиРасшифровки);
			 Если ОбластьРасширофвки <> Неопределено Тогда 
				 ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;				 
				 Форма300_08ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка,Значение, ЗначениеРасшифровки, Ложь);
			 КонецЕсли;				 
		 КонецЕсли;

		Если ЗначениеЗаполнено(Значение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			// стандартная обработка расшифровки
			 Возврат;
		КонецЕсли;		
		
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Контрагент", Ложь);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_08ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",,ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
	ИначеЕсли Найти(Ячейка, "Ф300_08_B__")> 0 Тогда		
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "СтатусПоставщика", Ложь);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_08ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("", "Пустое значение");
		СписокВыбора.Добавить("К", "Поставщик является комитентом");		
		СписокВыбора.Добавить("Э", "Поставщик является экспедитором");
		СписокВыбора.Добавить("Л", "Поставщик является лизингодателем");
		СписокВыбора.Добавить("С", "Реализация в рамках договора о совместной деятельности");
		
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения,"Выберите статус поставщика");
		
	ИначеЕсли Найти(Ячейка, "Ф300_08_D__")> 0 ИЛИ Найти(Ячейка, "Ф300_08_E__")> 0 Тогда
		 //может быть не заполнена расшировка ячейки при восстановления данных старых форм
		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			 ИмяЯчейкиРасшифровки = "Ф300_08_D" + Сред(Ячейка,Найти(Ячейка,"__"));
			 ОбластьРасширофвки = Форма300_08ПолеТабличногоДокументаЛистA.Области.Найти(ИмяЯчейкиРасшифровки);
			 Если ОбластьРасширофвки <> Неопределено Тогда 
				 ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;				 
				 Форма300_08ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка,Значение, ЗначениеРасшифровки, Ложь);
			 КонецЕсли;				 
		 КонецЕсли;

		Если ЗначениеЗаполнено(Значение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			// стандартная обработка расшифровки
			 Возврат;
		КонецЕсли;
	    // добавим отбор по контрагенту в форме выбора СФ, если контрагент заполнен в ячейках Ф300_08_C__, Ф300_08_D__
		Контрагент = Форма300_08ПолеТабличногоДокументаЛистA.Области["Ф300_08_C__" + НомерЯчейки].Расшифровка;
		
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора", ТекИмяФормы, "ЛистA", Ячейка, "СчетФактура");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_08ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		ФормаВыбора = ОткрытьФорму("Документ.СчетФактураПолученный.ФормаВыбора",,ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(ФормаВыбора.Список, "Контрагент",  Контрагент);
		КонецЕсли;	
		
	ИначеЕсли Найти(Ячейка, "Ф300_08_F__")> 0  Тогда				
		
		СтандартнаяОбработка = Ложь;
		
		НачЗначение = Область.Значение;
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "ПризнакВидаДеятельности", Ложь);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_08ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("",  "Пустое значение");
		СписокВыбора.Добавить("1", "СНР. По деятельности в рамках общеустановленного режима");
		СписокВыбора.Добавить("2", "СНР. По деятельности в рамках СНР (ст. 448 – 452 Налогового кодекса)");
		СписокВыбора.Добавить("3", "СНР. Подлежит распределение между общеустановленным порядком и  деятельности в рамках СНР (ст. 448 – 452 Налогового кодекса)");
						
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения,"Вид деятельности в рамках специального налогового режима (448 - 452 НК)");
			
	Иначе
		 Возврат;
	КонецЕсли;
	 
КонецПроцедуры

&НаКлиенте
Процедура Форма300_08ПолеТабличногоДокументаЛистBВыбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Элемент.ТекущаяОбласть.Имя;
	Если (Найти(Ячейка, "Ф300_08") = 0) Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(Ячейка, "__") = 0 Тогда
		НомерЯчейки = 0;
	Иначе
		НомерЯчейки = Число(Сред(Ячейка, Найти(Ячейка, "__")+ 2));;
	КонецЕсли;

	Значение = Элемент.ТекущаяОбласть.Значение;
	ЗначениеРасшифровки = Элемент.ТекущаяОбласть.Расшифровка;
	
	ТекИмяФормы = "Форма300_08";
	ИмяЛиста 	= "ЛистB";
	ПризнакРасчета = Ложь;
	
	Если (Найти(Ячейка, "Ф300_08") > 0) Тогда
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Показатели", Истина);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_08ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		Расчет = Истина;
		Если (Найти(Ячейка, "Ф300_08_G__") > 0) Тогда
			НачЗначение = Элемент.ТекущаяОбласть.Значение;			
			ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, "Введите всего стоимость без НДС", 12, 0); 
			 
		ИначеЕсли (Найти(Ячейка, "Ф300_08_H__") > 0) Тогда						
			НачЗначение = Элемент.ТекущаяОбласть.Значение;
			ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, "Введите сумму НДС в счете-фактуре", 12, 0); 						 
		ИначеЕсли (Найти(Ячейка, "Ф300_08_I__") > 0) Тогда			
			НачЗначение = Элемент.ТекущаяОбласть.Значение;
			ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, "Введите сумму НДС, относимого в зачет", 12, 0);
		Иначе 
			Возврат;			 
		КонецЕсли;
       		 
		 Форма300_08ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка, НачЗначение,, Расчет);
	КонецЕсли;
	                    		
КонецПроцедуры

&НаКлиенте
Процедура Форма300_08ПолеТабличногоДокументаЛистCВыбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Элемент.ТекущаяОбласть.Имя;
	Если (Найти(Ячейка, "Ф300_08") = 0) Тогда
		Возврат;
	КонецЕсли;
	Значение = Элемент.ТекущаяОбласть.Значение;
	
	Если Найти(Ячейка, "__") = 0 Тогда
		НомерЯчейки = 0;
	Иначе
		НомерЯчейки = Число(Сред(Ячейка, Найти(Ячейка, "__")+ 2));;
	КонецЕсли;
	
	ТекИмяФормы = "Форма300_08";
	ИмяЛиста 	= "ЛистC";
	ПризнакРасчета = Ложь;
	                  	
	Если (Найти(Ячейка, "Ф300_08") > 0) Тогда
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Показатели", Истина);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_08ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		Расчет = Истина;
		Если (Найти(Ячейка, "Ф300_08_J__") > 0) Тогда
			НачЗначение = Элемент.ТекущаяОбласть.Значение;			
			ПоказатьВводСтроки(ОписаниеОповещения, НачЗначение, "Вид полезного ископаемого", 50); 
			 
		ИначеЕсли (Найти(Ячейка, "Ф300_08_K__") > 0) Тогда						
			НачЗначение = Элемент.ТекущаяОбласть.Значение;
			ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, "Объем полезного ископаемого", 12, 0); 						 
			
		ИначеЕсли (Найти(Ячейка, "Ф300_08_L__") > 0) Тогда			
			НачЗначение = Элемент.ТекущаяОбласть.Значение;
			ПоказатьВводСтроки(ОписаниеОповещения, НачЗначение, "Единица измерения", 12);
			
		Иначе 
			Возврат;			 
			
		КонецЕсли;
       		 
		 Форма300_08ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка, НачЗначение,, Расчет);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Форма300_08ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, ИмяЯчейки, Значение, ЗначениеРасшифровки, ПризнакРасчета)	
	
	ЭтотОбъект["Форма300_08ПолеТабличногоДокумента" + ИмяЛиста].Области[ИмяЯчейки].Значение = Значение;
	ЭтотОбъект["Форма300_08ПолеТабличногоДокумента" + ИмяЛиста].Области[ИмяЯчейки].Расшифровка = ЗначениеРасшифровки;
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтотОбъект, ИмяЛиста, ИмяЯчейки, Значение, ПризнакРасчета,ЗначениеРасшифровки);	
	
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ЭтотОбъект.КодФормы);
КонецПроцедуры

&НаСервере
// Процедура расчитывает значения определенных граф по строке
// многострочной формы.
//
// Параметры:
//      Инд - номер строки многострочной формы
//      Колонка - имя графы (ячейки), из которой была вызвана процедура расчета
//
Процедура Форма300_08РасчетНаСервере(Инд,Колонка)
	// построчный расчет для формы не определен
КонецПроцедуры // Форма300_08Расчет()

&НаСервере
Функция Форма300_08РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	
	Запрос =  Новый Запрос;
	 
	Запрос.УстановитьПараметр("ДатаНачала",			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаОкончания", 		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);	                 	
	Запрос.УстановитьПараметр("Налогоплательщик", 	Налогоплательщик);
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	
	Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями и мСписокСтруктурныхЕдиниц.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ОтборПоСтруктурным", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоСтруктурным", Ложь);
	КонецЕсли;                 	
		                 
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	Если СпособФормированияРеестра = "ПоРегиструСчетовФактур" Тогда
		ТекстЗапросаПоДаннымСчетовФактур = ПолучитьТекстЗапросаСчетовФактурПолученныхПоРегистру();
		ПризнакСвязиПоКонтрагенту = Истина;
	Иначе
		ТекстЗапросаПоДаннымСчетовФактур = ПолучитьТекстЗапросаСчетовФактурПолученныхПоДокументам();
		ПризнакСвязиПоКонтрагенту = Ложь;
	КонецЕсли;
	Запрос.УстановитьПараметр("ПризнакСвязиПоКонтрагенту", ПризнакСвязиПоКонтрагенту);
	
	ТекстЗапроса = 
	ТекстЗапросаСчетаФактурыПолученныеИДокументыОснования() 
	+ Символы.ПС 
	+ ТекстЗапросаПоДаннымСчетовФактур 
	+ "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияПоНДС.Регистратор КАК Регистратор,
	|	ВЫБОР КОГДА &ПризнакСвязиПоКонтрагенту Тогда ДвиженияПоНДС.Контрагент Иначе NULL Конец Как Контрагент,
	|	ДвиженияПоНДС.СчетФактураСтроки КАК СчетФактураСтроки,
	|	СУММА(ДвиженияПоНДС.СуммаНДСОборот) КАК СуммаНДСОборот
	|ПОМЕСТИТЬ ВТ_ДвиженияПоНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		КорректировкаНДСОбороты.Регистратор КАК Регистратор,
	|		КорректировкаНДСОбороты.Контрагент КАК Контрагент,
	|		КорректировкаНДСОбороты.СуммаНДСОборот КАК СуммаНДСОборот,
	|		NULL КАК СчетФактураСтроки
	|	ИЗ
	|		РегистрНакопления.КорректировкаНДСКВозмещению.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, Налогоплательщик = &Налогоплательщик) КАК КорректировкаНДСОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДСКВозмещениюОбороты.Регистратор,
	|		НДСКВозмещениюОбороты.Контрагент КАК Контрагент,
	|		НДСКВозмещениюОбороты.СуммаНДСОборот,
	|		НДСКВозмещениюОбороты.СчетФактура
	|	ИЗ
	|		РегистрНакопления.НДСКВозмещению.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, Налогоплательщик = &Налогоплательщик) КАК НДСКВозмещениюОбороты) КАК ДвиженияПоНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияПоНДС.Регистратор,
	|	ВЫБОР КОГДА &ПризнакСвязиПоКонтрагенту Тогда ДвиженияПоНДС.Контрагент Иначе NULL Конец,
	|	ДвиженияПоНДС.СчетФактураСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СписокСчетовФактур.Ссылка КАК Ссылка,
	|	ВТ_ДвиженияПоНДС.Контрагент,
	|	СУММА(ВТ_ДвиженияПоНДС.СуммаНДСОборот) КАК СуммаНДСОборот
	|ПОМЕСТИТЬ ВТ_ИтоговыеДвиженияПоНДС
	|ИЗ
	|	ВТ_СписокСчетовФактур КАК ВТ_СписокСчетовФактур
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДвиженияПоНДС КАК ВТ_ДвиженияПоНДС
	|		ПО ВТ_СписокСчетовФактур.ДокументОснование = ВТ_ДвиженияПоНДС.Регистратор
	|			И ((НЕ ВТ_ДвиженияПоНДС.Регистратор ССЫЛКА Документ.АвансовыйОтчет)
	|				ИЛИ ВТ_ДвиженияПоНДС.СчетФактураСтроки = ВТ_СписокСчетовФактур.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СписокСчетовФактур.Ссылка,
	|	ВТ_ДвиженияПоНДС.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеСчетовФактур.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ДанныеСчетовФактур.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ДанныеСчетовФактур.Дополнительная КАК Дополнительная,
	|	ДанныеСчетовФактур.Поставщик КАК Контрагент,
	|	ДанныеСчетовФактур.Поставщик.ИдентификационныйКодЛичности КАК ИдентификационныйКодЛичности,
	|	ДанныеСчетовФактур.Ссылка КАК СФ,
	|	ДанныеСчетовФактур.СуммаОборота КАК СуммаОборота,
	|	ДанныеСчетовФактур.СуммаНДС КАК СуммаНДС,
	|	ЕСТЬNULL(ВТ_ИтоговыеДвиженияПоНДС.СуммаНДСОборот, 0) КАК СуммаНДСВЗачет,
	|	ДанныеСчетовФактур.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности
	|ИЗ
	|	ВТ_ДанныеСчетовФактур КАК ДанныеСчетовФактур
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИтоговыеДвиженияПоНДС КАК ВТ_ИтоговыеДвиженияПоНДС
	|		ПО ДанныеСчетовФактур.Ссылка = ВТ_ИтоговыеДвиженияПоНДС.Ссылка				   
	|		И (НЕ &ПризнакСвязиПоКонтрагенту ИЛИ ДанныеСчетовФактур.УчастникСовместнойДеятельности И ДанныеСчетовФактур.Поставщик = ВТ_ИтоговыеДвиженияПоНДС.Контрагент ИЛИ НЕ ДанныеСчетовФактур.УчастникСовместнойДеятельности И ДанныеСчетовФактур.Контрагент = ВТ_ИтоговыеДвиженияПоНДС.Контрагент)				   
	|ГДЕ
	|	ДанныеСчетовФактур.Ссылка.Проведен И (ДанныеСчетовФактур.СуммаОборота <> 0  ИЛИ ДанныеСчетовФактур.СуммаНДС <>0 ИЛИ ЕСТЬNULL(ВТ_ИтоговыеДвиженияПоНДС.СуммаНДСОборот, 0)<>0)";				   
				    	               
	Если ПризнакОтбораПоПериодуДокументов Тогда
		ДатаНачалаОтбораПоДокументам 	=  СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
		ДатаОкончанияОтбораПоДокументам =  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
						
		ДатаОтбораПоДокументам = "Дата";		
		Если  ПризнакПериода = 2 Тогда		
			ДатаНачалаОтбораПоДокументам = ОтборДатаРегистрации;
			ДатаОкончанияОтбораПоДокументам =  '2999.01.01';
		КонецЕсли;
		Запрос.УстановитьПараметр("ДатаНачалаОтбораПоДокументам", 		ДатаНачалаОтбораПоДокументам);
		Запрос.УстановитьПараметр("ДатаОкончанияОтбораПоДокументам", 	ДатаОкончанияОтбораПоДокументам);		
		
		ТекстЗапроса = ТекстЗапроса  + "
				   |	И ДанныеСчетовФактур.Ссылка." + ДатаОтбораПоДокументам + " МЕЖДУ &ДатаНачалаОтбораПоДокументам И &ДатаОкончанияОтбораПоДокументам ";
	КонецЕсли;
		 
	Если ПризнакКонтрагента Тогда
		ТекстЗапроса = ТекстЗапроса + "
				   |	И НЕ ДанныеСчетовФактур.Контрагент.ДатаСвидетельстваПоНДС  = &ПустаяДата
				   |	И НЕ ДанныеСчетовФактур.Контрагент.НомерСвидетельстваПоНДС = &ПустаяСтрока
				   |	И НЕ ДанныеСчетовФактур.Контрагент.СерияСвидетельстваПоНДС = &ПустаяСтрока";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + " 		   
	 			   |
	 			   |УПОРЯДОЧИТЬ ПО
	 			   |	ДанныеСчетовФактур.Ссылка.ДатаВходящегоДокумента 
				   |ИТОГИ				   
				   |	СУММА(СуммаОборота),
				   |	СУММА(СуммаНДС),
				   |	СУММА(СуммаНДСВЗачет)				   
				   |ПО
				   |	ДатаВходящегоДокумента,
   				   |	НомерВходящегоДокумента,				   
                   |	Контрагент,
				   |	УчастникСовместнойДеятельности"; 
	 
	Запрос.Текст = ТекстЗапроса;
	 
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() и ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 300.08 за отчетный период отсутствуют...'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;	
	
	ТаблицаРезультата = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ТаблицаРезультата;		 
	
КонецФункции // Форма300_08РассчитатьДанныеФормы()

&НаКлиенте
Процедура Форма300_08ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Состояние("Расчет формы 300.08");		
	
	Форма300_08ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры	

&НаСервере
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма300_08ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма300_08";
	
	Если Не Перезаполнить Тогда
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", ТекИмяФормы));
		Если СтрокаФормы <> Неопределено Тогда
			Если СтрокаФормы.Автозаполнение = Ложь Тогда
				Возврат;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Очистить(ТекИмяФормы, Истина);
	
	ТекущаяСтраница = 1;
	ВсегоСтраниц = 1;
	
	ВыборкаОтчета = Форма300_08РассчитатьДанныеФормы(Истина);
	 
	Если ВыборкаОтчета.Количество() <> 0 Тогда		
		
		ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, "Форма300");
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "СпособПолучения_A", "X", Форма300ПолеТабличногоДокументаСтраница1);
		РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, "Форма300", ТаблицаДанных);
		
		СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы);		
	                             	
		Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
			НомерСтроки = 2;
			ИмяГруппы 	= ЭлементСтруктуры.Ключ;
			ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
			ТаблицаСтрокГруппы.Очистить();
			
			ВыборкаОтчета.Сбросить();
			
			Пока ВыборкаОтчета.Следующий() Цикл
				СтрокаОтчетаПоДате = ВыборкаОтчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока СтрокаОтчетаПоДате.Следующий() Цикл
					СтрокаОтчетаПоНомеру = СтрокаОтчетаПоДате.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока СтрокаОтчетаПоНомеру.Следующий() Цикл						
						СтрокаОтчета = СтрокаОтчетаПоНомеру.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока СтрокаОтчета.Следующий() Цикл
								
								Если ИсключатьСФсНекорректнымиНомерами Тогда
									// проверим корректный ли номер входящего документа
									Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаОтчета.НомерВходящегоДокумента) Тогда
										Продолжить;
									КонецЕсли;
								КонецЕсли;   
								
								Элемент = ТаблицаСтрокГруппы.Добавить();   			 
								
								Если ИмяГруппы = "ЛистA" Тогда
									//Так должны заполнять по отдельности значения выборки 
									//для каждого листа
									#Если Клиент Тогда
										Состояние("Заполнение строки """  + Формат(НомерСтроки, мФорматНомераСтроки) + """приложения 300.08 ");
									#КонецЕсли
									Элемент.Ф300_08_A = Формат(НомерСтроки, мФорматНомераСтроки);
									Элемент.Ф300_08_B = ?(СтрокаОтчета.УчастникСовместнойДеятельности = Истина, "С","");
									
									Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаОтчета.Контрагент.ИдентификационныйКодЛичности) Тогда
										СтрокаИИН_БИН = СтрокаОтчета.Контрагент.ИдентификационныйКодЛичности;
									Иначе
										СтрокаИИН_БИН = "";
										ТекстСообщения = НСтр("ru = 'Форма 300.08. В строке № %1  не заполнена графа C ""ИИН (БИН) поставщика"", т.к. значение содержит символы, отличные от цифр'");		
										ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки));			
										ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);																														
									КонецЕсли;
									
									Если ПроверятьИИНБИНКонтрагента И НЕ БИНИИНСоответствуетТребованиям(СтрокаОтчета.ИдентификационныйКодЛичности, Ложь) Тогда										
										ТекстСообщения = НСтр("ru = 'Форма 300.08. В строке № %1  указан неверный ИИН/БИН контрагента в графе C: %2'");		
										ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки), СокрЛП(СтрокаОтчета.ИдентификационныйКодЛичности));			
										ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);																														
									КонецЕсли;	
									
									Элемент.Ф300_08_C = СтрокаИИН_БИН;																	
									Элемент.Ф300_08_C_Расшифровка = СтрокаОтчета.Контрагент;
									
									// Номер счета-фактуры отображаем как он был занесен в базу
									НомерСФ = СокрЛП(СтрокаОтчета.НомерВходящегоДокумента);
									Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаОтчета.НомерВходящегоДокумента) Тогда
										ТекстСообщения = НСтр("ru = 'Форма 300.08. В строке № %1  графа D ""№ счета-фактуры (документа) содержит символы, отличные от цифр'");		
										ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки), НомерСФ, СокрЛП(ВыборкаОтчета.ИдентификационныйКодЛичности));			
										ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);																																								
									КонецЕсли;                 
									
									Элемент.Ф300_08_D = НомерСФ;
									Элемент.Ф300_08_E = СтрокаОтчета.ДатаВходящегоДокумента;							
									
									ВыборкаСФ = СтрокаОтчета.Выбрать();
									Пока ВыборкаСФ.Следующий() Цикл
										Элемент.Ф300_08_D_Расшифровка = ВыборкаСФ.СФ;
										Элемент.Ф300_08_E_Расшифровка = ВыборкаСФ.СФ;
									КонецЦикла;						
									
								ИначеЕсли ИмяГруппы = "ЛистB" Тогда
									
									//заполняем структуру
									Элемент.Ф300_08_A2 = Формат(НомерСтроки, мФорматНомераСтроки);
									Элемент.Ф300_08_G  = Окр(СтрокаОтчета.СуммаОборота);							 	
									Элемент.Ф300_08_H  = Окр(СтрокаОтчета.СуммаНДС);								
									Элемент.Ф300_08_I  = Окр(СтрокаОтчета.СуммаНДСВЗачет);	
									
									Если Элемент.Ф300_08_H <> Элемент.Ф300_08_I Тогда
										// Проверим рассчиталась ли сумма НДС в зачет, если не рассчиталась, то сообщаем об этом пользователю
										ВыборкаСФ = СтрокаОтчета.Выбрать();
										Пока ВыборкаСФ.Следующий() Цикл
											Если НЕ ЗначениеЗаполнено(ВыборкаСФ.СуммаНДСВЗачет) И ЗначениеЗаполнено(ВыборкаСФ.СуммаНДС) Тогда
												ТекстСообщения = НСтр(
													"ru = 'Форма 300.08. В строке №%1  для ""%2"" не определена сумма НДС, подлежащего отнесению в зачет.
                                                     |Проверьте наличие документа основания для счета-фактуры, а также правильность введенной даты документа основания.'");		
												ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки), ВыборкаСФ.СФ);			
												ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);																																																														
											КонецЕсли;
										КонецЦикла;
									КонецЕсли;
									
								ИначеЕсли ИмяГруппы = "ЛистC" Тогда
									
									//заполняем структуру
									Элемент.Ф300_08_A3 = Формат(НомерСтроки, мФорматНомераСтроки);
									
								КонецЕсли; 
								
								НомерСтроки = НомерСтроки + 1;           			 												
						КонецЦикла; 	 
					КонецЦикла; 	 
				КонецЦикла; 	 
			КонецЦикла; 	 
		КонецЦикла; 	 
		
		РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекимяФормы,СтруктураФормы); 	 
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма,ТекИмяФормы);
		РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма,ТекИмяФормы,Перезаполнить);
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтотОбъект);
		
	КонецЕсли;	
	
КонецПроцедуры // Форма300_08ЗаполнитьАвто()

&НаСервере
Функция ТекстЗапросаИсключающийОтозванныеИИсправленныеСчетаФактуры(ТипСчетовФактур)
	
	ТекстЗапроса = "";
		
	// Если есть регистр сведений СчетаФактурыПрекратившиеДействие,
	// то исключаются счета-фактуры из этого регистра и сторнированные счета-фактуры.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_СчетаФактурыИДокументыОснования.СчетФактура КАК СчетФактура,
	|	ВТ_СчетаФактурыИДокументыОснования.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_СчетаФактурыИсключаяСторнированныеИДокументыОснования
	|ИЗ
	|	ВТ_СчетаФактурыИДокументыОснования КАК ВТ_СчетаФактурыИДокументыОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Сторнирование КАК Сторнирование
	|		ПО ВТ_СчетаФактурыИДокументыОснования.СчетФактура = Сторнирование.ДокументОснование
	|			И (НЕ Сторнирование.ПометкаУдаления)
	|ГДЕ
	|	Сторнирование.Ссылка ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_СчетаФактурыИсключаяСторнированныеИДокументыОснования.СчетФактура,
	|	ВТ_СчетаФактурыИсключаяСторнированныеИДокументыОснования.ДокументОснование
	|ПОМЕСТИТЬ ВТ_СчетаФактурыДействующиеИДокументыОснования
	|ИЗ
	|	ВТ_СчетаФактурыИсключаяСторнированныеИДокументыОснования КАК ВТ_СчетаФактурыИсключаяСторнированныеИДокументыОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаФактурыПрекратившиеДействие КАК СчетаФактурыПрекратившиеДействие
	|		ПО ВТ_СчетаФактурыИсключаяСторнированныеИДокументыОснования.СчетФактура = СчетаФактурыПрекратившиеДействие.СчетФактура
	|ГДЕ
	|	СчетаФактурыПрекратившиеДействие.СчетФактура ЕСТЬ NULL
	|;
	|
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаСчетаФактурыПолученныеИДокументыОснования()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СчетФактураПолученныйТовары.Ссылка
	|ПОМЕСТИТЬ вт_СчетФактураДатаОборотаВТабличнойЧасти
	|ИЗ
	|	Документ.СчетФактураПолученный.Товары КАК СчетФактураПолученныйТовары
	|ГДЕ
	|	СчетФактураПолученныйТовары.ДатаОборота МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И СчетФактураПолученныйТовары.Ссылка.ДатаОборотаВТабличнойЧасти = ИСТИНА
	|	И СчетФактураПолученныйТовары.Ссылка.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаДокументами.Бумажно)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактураПолученныйТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураПолученныйУслуги.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный.Услуги КАК СчетФактураПолученныйУслуги
	|ГДЕ
	|	СчетФактураПолученныйУслуги.ДатаОборота МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И СчетФактураПолученныйУслуги.Ссылка.ДатаОборотаВТабличнойЧасти = ИСТИНА
	|	И СчетФактураПолученныйУслуги.Ссылка.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаДокументами.Бумажно)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактураПолученныйУслуги.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураПолученныйОС.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный.ОС КАК СчетФактураПолученныйОС
	|ГДЕ
	|	СчетФактураПолученныйОС.ДатаОборота МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И СчетФактураПолученныйОС.Ссылка.ДатаОборотаВТабличнойЧасти = ИСТИНА
	|	И СчетФактураПолученныйОС.Ссылка.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаДокументами.Бумажно)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактураПолученныйОС.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураПолученныйНМА.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный.НМА КАК СчетФактураПолученныйНМА
	|ГДЕ
	|	СчетФактураПолученныйНМА.ДатаОборота МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И СчетФактураПолученныйНМА.Ссылка.ДатаОборотаВТабличнойЧасти = ИСТИНА
	|	И СчетФактураПолученныйНМА.Ссылка.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаДокументами.Бумажно)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактураПолученныйНМА.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураПолученный.Ссылка
	|ПОМЕСТИТЬ ВТ_ВсеСчетаФактурыЗаПериод
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ДатаСовершенияОборотаПоРеализации МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И СчетФактураПолученный.ДатаОборотаВТабличнойЧасти = ЛОЖЬ
	|	И СчетФактураПолученный.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаДокументами.Бумажно)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вт_СчетФактураДатаОборотаВТабличнойЧасти.Ссылка
	|ИЗ
	|	вт_СчетФактураДатаОборотаВТабличнойЧасти КАК вт_СчетФактураДатаОборотаВТабличнойЧасти
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ВсеСчетаФактурыЗаПериод.Ссылка КАК СчетФактура,
	|	NULL КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_СчетаФактурыИДокументыОснования
	|ИЗ
	|	ВТ_ВсеСчетаФактурыЗаПериод КАК ВТ_ВсеСчетаФактурыЗаПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|		ПО ВТ_ВсеСчетаФактурыЗаПериод.Ссылка = СчетФактураПолученныйДокументыОснования.Ссылка
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.Ссылка ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураПолученныйДокументыОснования.Ссылка,
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И СчетФактураПолученныйДокументыОснования.Ссылка.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаДокументами.Бумажно)
	|;
	|
	|";

    ТекстЗапроса = ТекстЗапроса + Символы.ПС + ТекстЗапросаИсключающийОтозванныеИИсправленныеСчетаФактуры(Тип("ДокументСсылка.СчетФактураПолученный"));
	
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_СчетаФактурыДействующиеИДокументыОснования.СчетФактура КАК Ссылка,
	|	ВТ_СчетаФактурыДействующиеИДокументыОснования.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_СписокСчетовФактур
	|ИЗ
	|	ВТ_СчетаФактурыДействующиеИДокументыОснования КАК ВТ_СчетаФактурыДействующиеИДокументыОснования
	|ГДЕ
	|	ВТ_СчетаФактурыДействующиеИДокументыОснования.СчетФактура.Организация В(&парамСписокСтруктурныхЕдиниц)
	|;
	|
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция Форма300_08ПолучитьТаблицуДанныхРеестраExcel(ТекКодФормы)	
	СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, ТекКодФормы);
	
	ТаблицаДанныхA = Новый ТаблицаЗначений;              	
	ТаблицаДанныхA.Колонки.Добавить("НомерСтроки",,               "Номер строки");
	ТаблицаДанныхA.Колонки.Добавить("СтатусПоставщика",,          "Статус поставщика");
	ТаблицаДанныхA.Колонки.Добавить("ИННБИНПоставщика",,          "ИИН (БИН) поставщика");
	ТаблицаДанныхA.Колонки.Добавить("НомерСФ",,                   "Номер счета-фактуры");
	ТаблицаДанныхA.Колонки.Добавить("ДатаСФ",,                    "Дата выписки счета - фактуры");	
	ТаблицаДанныхA.Колонки.Добавить("ВидСФПрав",,                 "Признак счета-фактуры");
	ТаблицаДанныхA.Колонки.Добавить("СтоимостьБезНДС",,           "Всего стоимость по счету-фактуре (документу)  без учета НДС");
	ТаблицаДанныхA.Колонки.Добавить("СуммаНДССФ",,                "Сумма НДС, указанного в счете-фактуре  (документе)");
	ТаблицаДанныхA.Колонки.Добавить("СуммаНДСВЗачет",,            "Сумма НДС, подлежащего отнесению в зачет");
	ТаблицаДанныхA.Колонки.Добавить("ВидПолезногоИскопаемого",,   "Вид полезного ископаемого");
	ТаблицаДанныхA.Колонки.Добавить("ОбъемПолезногоИскопаемого",, "Объем полезного ископаемого");
	ТаблицаДанныхA.Колонки.Добавить("ЕдиницаИзмерения",,          "Единицы измерения");
	
	ТаблицаДанныхB = Новый ТаблицаЗначений;
	ТаблицаДанныхB.Колонки.Добавить("СтоимостьБезНДС");
	ТаблицаДанныхB.Колонки.Добавить("СуммаНДССФ");
	ТаблицаДанныхB.Колонки.Добавить("СуммаНДСВЗачет");
	
	ТаблицаДанныхC = Новый ТаблицаЗначений;
	ТаблицаДанныхC.Колонки.Добавить("ВидПолезногоИскопаемого");
	ТаблицаДанныхC.Колонки.Добавить("ОбъемПолезногоИскопаемого");
	ТаблицаДанныхC.Колонки.Добавить("ЕдиницаИзмерения");
		                            	
	Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
		ИмяГруппы 	= ЭлементСтруктуры.Ключ;
		ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
				
		Для Каждого Элемент Из ТаблицаСтрокГруппы Цикл
		
			Если ИмяГруппы = "ЛистA" Тогда
				
				НоваяСтрокаДанных = ТаблицаДанныхA.Добавить();	
			
				//Так должны заполнять по отдельности значения выборки 
				//для каждого листа
				НоваяСтрокаДанных.НомерСтроки 	   = Элемент.Ф300_08_A;
				НоваяСтрокаДанных.СтатусПоставщика = Элемент.Ф300_08_B;
				Если ЗначениеЗаполнено(Элемент.Ф300_08_C) Тогда 
					НоваяСтрокаДанных.ИННБИНПоставщика = Элемент.Ф300_08_C;
				КонецЕсли;
				
				НоваяСтрокаДанных.НомерСФ 		   = Элемент.Ф300_08_D;
				Если ЗначениеЗаполнено(Элемент.Ф300_08_E) Тогда
					НоваяСтрокаДанных.ДатаСФ	   = НачалоДня(Элемент.Ф300_08_E);
				КонецЕсли;
				Если ЗначениеЗаполнено(Элемент.Ф300_08_F) Тогда
					НоваяСтрокаДанных.ВидСФПрав	   = Элемент.Ф300_08_F;
				КонецЕсли;
				
			ИначеЕсли ИмяГруппы = "ЛистB" Тогда
				
				НоваяСтрокаДанных = ТаблицаДанныхB.Добавить();	
				
				НоваяСтрокаДанных.СтоимостьБезНДС = Элемент.Ф300_08_G;
				НоваяСтрокаДанных.СуммаНДССФ 	  = Элемент.Ф300_08_H;
				НоваяСтрокаДанных.СуммаНДСВЗачет  = Элемент.Ф300_08_I;
				
			ИначеЕсли ИмяГруппы = "ЛистC" Тогда

				НоваяСтрокаДанных = ТаблицаДанныхC.Добавить();	

				НоваяСтрокаДанных.ВидПолезногоИскопаемого	= Элемент.Ф300_08_J;
				НоваяСтрокаДанных.ОбъемПолезногоИскопаемого = Элемент.Ф300_08_K;
				НоваяСтрокаДанных.ЕдиницаИзмерения          = Элемент.Ф300_08_L;
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЦикла;
	
	// сводная таблица
	ТаблицаДанныхA.ЗагрузитьКолонку(ТаблицаДанныхB.ВыгрузитьКолонку("СтоимостьБезНДС"),           "СтоимостьБезНДС");
	ТаблицаДанныхA.ЗагрузитьКолонку(ТаблицаДанныхB.ВыгрузитьКолонку("СуммаНДССФ"),                "СуммаНДССФ");
	ТаблицаДанныхA.ЗагрузитьКолонку(ТаблицаДанныхB.ВыгрузитьКолонку("СуммаНДСВЗачет"),            "СуммаНДСВЗачет");
    ТаблицаДанныхA.ЗагрузитьКолонку(ТаблицаДанныхC.ВыгрузитьКолонку("ВидПолезногоИскопаемого"),	  "ВидПолезногоИскопаемого");
	ТаблицаДанныхA.ЗагрузитьКолонку(ТаблицаДанныхC.ВыгрузитьКолонку("ОбъемПолезногоИскопаемого"), "ОбъемПолезногоИскопаемого");
	ТаблицаДанныхA.ЗагрузитьКолонку(ТаблицаДанныхC.ВыгрузитьКолонку("ЕдиницаИзмерения"),          "ЕдиницаИзмерения");
	
	Возврат ТаблицаДанныхA;
	
КонецФункции

&НаСервере
Функция Форма300_08ПолучитьСтруктуруСоответствияПолейРеестраExcel()
	
	СтруктураСоответствияПолей = Новый Структура();
	
	СтруктураСоответствияПолей.Вставить("НомерСтроки",                1);
	СтруктураСоответствияПолей.Вставить("СтатусПоставщика",           2);
	СтруктураСоответствияПолей.Вставить("РННПоставщика",              3);
	СтруктураСоответствияПолей.Вставить("ИННБИНПоставщика",           4);
	СтруктураСоответствияПолей.Вставить("НомерСФ",                    5);
	СтруктураСоответствияПолей.Вставить("ДатаСФ",                     6);	
	СтруктураСоответствияПолей.Вставить("ВидСФПрав",                  7);
	СтруктураСоответствияПолей.Вставить("СтоимостьБезНДС",            8);
	СтруктураСоответствияПолей.Вставить("СуммаНДССФ",                 9);
	СтруктураСоответствияПолей.Вставить("СуммаНДСВЗачет",            10);
	СтруктураСоответствияПолей.Вставить("ВидПолезногоИскопаемого", 	 11);
	СтруктураСоответствияПолей.Вставить("ОбъемПолезногоИскопаемого", 12);
	СтруктураСоответствияПолей.Вставить("ЕдиницаИзмерения",          13);
	
	Возврат СтруктураСоответствияПолей;
КонецФункции

&НаСервере
Функция Форма300_08ПолучитьСтруктуруИтоговыхПолейРеестраExcel()
	СтруктураИтоговыхПолей = Новый Структура;
	
	СтруктураИтоговыхПолей.Вставить("СтоимостьБезНДС", 8);
	СтруктураИтоговыхПолей.Вставить("СуммаНДССФ",      9);
	СтруктураИтоговыхПолей.Вставить("СуммаНДСВЗачет",  10);
	
	Возврат СтруктураИтоговыхПолей;
КонецФункции

&НаКлиенте
Процедура ПризнакОтбораПоПериодуДокументовПриИзменении(Элемент)
	
	Если ПризнакОтбораПоПериодуДокументов Тогда
		
		Элементы.ПризнакПериода.Доступность = Истина;
		
		Если ПризнакПериода = 2 Тогда // Зарегистрированные после.
			Элементы.ДатаРегистрации.Доступность = Истина;
		Иначе
			Элементы.ДатаРегистрации.Доступность = Ложь;
		КонецЕсли;
		
	Иначе
		
		Элементы.ПризнакПериода.Доступность = Ложь;
		Элементы.ДатаРегистрации.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПризнакПериодаПриИзменении(Элемент)
	
	Если ПризнакПериода = 2 Тогда // Зарегистрированные после.
		Элементы.ДатаРегистрации.Доступность = Истина;
	Иначе
		Элементы.ДатаРегистрации.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////
// ПРОЧЕЕ

//Процедура  заполняет итоговые данные  табличного документа
//
//Параметры:
//  ТаблицаСтрокГруппы - Тип: ТаблицаЗначений, по данным которой
//                    вычисляються итоговые данные
//  ОбщиеЭлементыГруппы - Тип: ТаблицаЗначений, куда записываются итоговые данные
//                        в строки, где в колонке "Итог" значение строки равно Истина
//
&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеИтоговВСтруктуре(ТаблицаСтрокГруппы, ОбщиеЭлементыГруппы) 
	
	Отбор = Новый Структура();
	Отбор.Вставить("Итог",Истина);
	СтрокиИтоговыхЯчеек = ОбщиеЭлементыГруппы.НайтиСтроки(Отбор);
	Для Каждого Строка Из СтрокиИтоговыхЯчеек Цикл
		ТекЗначение = Строка.ИмяОбласти;
		Если ТаблицаСтрокГруппы.Колонки.Найти(ТекЗначение) <> Неопределено Тогда
			Строка.Значение = ТаблицаСтрокГруппы.Итог(ТекЗначение);
		КонецЕсли;                                		
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьДанныеИтоговВСтруктуре()

&НаКлиенте
Процедура Расшифровка(Команда)
	Попытка
		ИмяЯчейки = ЭтотОбъект.ТекущийЭлемент.ТекущаяОбласть.Имя;
	Исключение
		ПоказатьПредупреждение(,"Активизируйте нужную ячейку отчета для расшифровки.");
		Возврат;
	КонецПопытки;
	
	ЦветРасшифровки = Форма300ПолеТабличногоДокументаСтраница1.Области.s_300_00_001_a.ЦветФона;
	
	Если ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда 
		
		Форма300РасшифровкаСКД(ИмяЯчейки);			
	Иначе	
		ПоказатьПредупреждение(, "Расшифровка данной ячейки не поддерживается.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНаКлиенте()
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Форма300ПолучитьСписокКодовСтрокВключаемыхВРасшифровку(ИмяЯчейки)
	
	КодыСтрокРасшифровки = Новый СписокЗначений;
	Если ИмяЯчейки = "300.00.002" Тогда
		КодыСтрокРасшифровки.Добавить("300.00.002");
		
	    КодыСтрокРасшифровки.Добавить("300.01.001");
		КодыСтрокРасшифровки.Добавить("300.01.002");
		КодыСтрокРасшифровки.Добавить("300.01.003");
		КодыСтрокРасшифровки.Добавить("300.01.004");
		
		
		КодыСтрокРасшифровки.Добавить("300.06.001");
		КодыСтрокРасшифровки.Добавить("300.06.002");
		КодыСтрокРасшифровки.Добавить("300.06.003");
		КодыСтрокРасшифровки.Добавить("300.06.004");
		КодыСтрокРасшифровки.Добавить("300.06.005");
	ИначеЕсли ИмяЯчейки = "300.00.003" Тогда
		Для Сч = 1 по 4 Цикл
			КодыСтрокРасшифровки.Добавить("300.06.0"+ Формат(Сч, "ЧЦ=2; ЧН=; ЧВН="));
		КонецЦикла;	     
	ИначеЕсли ИмяЯчейки = "300.00.005" Тогда
		Для Сч = 1 по 9 Цикл
			КодыСтрокРасшифровки.Добавить("300.02.0"+ Формат(Сч, "ЧЦ=2; ЧН=; ЧВН="));
		КонецЦикла;	     	
		Для Сч = 6 по 6 Цикл
			КодыСтрокРасшифровки.Добавить("300.06.0"+ Формат(Сч, "ЧЦ=2; ЧН=; ЧВН="));
		КонецЦикла;	 
		
	ИначеЕсли ИмяЯчейки = "300.00.014" Тогда	
		КодыСтрокРасшифровки.Добавить("300.00.014");
		// НДС за нерезидента
		Для Сч = 1 по 7 Цикл
			КодыСтрокРасшифровки.Добавить("300.05."+ Формат(Сч, "ЧЦ=2; ЧН=; ЧВН="));
		КонецЦикла;	 			
	ИначеЕсли ИмяЯчейки = "300.00.016" Тогда		
	    КодыСтрокРасшифровки.Добавить("300.00.016.I");
	    КодыСтрокРасшифровки.Добавить("300.00.016.II"); 	
	ИначеЕсли ИмяЯчейки = "300.00.017" Тогда
		Для Сч = 10 по 13 Цикл
			КодыСтрокРасшифровки.Добавить("300.02.0"+ Формат(Сч, "ЧЦ=2; ЧН=; ЧВН="));
		КонецЦикла;	 	
	ИначеЕсли ИмяЯчейки = "300.00.019" Тогда
		КодыСтрокРасшифровки.Добавить("300.03.001");
	ИначеЕсли ИмяЯчейки = "300.00.022" Тогда
		Для Сч = 7 по 9 Цикл
			КодыСтрокРасшифровки.Добавить("300.06.0"+ Формат(Сч, "ЧЦ=2; ЧН=; ЧВН="));
		КонецЦикла;	 	
	ИначеЕсли ИмяЯчейки = "300.00.029" Тогда
		КодыСтрокРасшифровки.Добавить("300.00.029");		
		Для Сч = 1 по 10 Цикл
			КодыСтрокРасшифровки.Добавить("300.04.001." + ПреобразоватьАрабскуюЦифруВРимскую(Сч));		
		КонецЦикла;	
	ИначеЕсли ИмяЯчейки = "300.01.001" Тогда 
		
		КодыСтрокРасшифровки.Добавить("300.01.001");
	    КодыСтрокРасшифровки.Добавить("300.01.001.I");
		КодыСтрокРасшифровки.Добавить("300.01.001.II");
		КодыСтрокРасшифровки.Добавить("300.01.001.III");
		КодыСтрокРасшифровки.Добавить("300.01.001.IV");
		КодыСтрокРасшифровки.Добавить("300.01.001.V");
	ИначеЕсли ИмяЯчейки = "300.01.004" Тогда 
		// итоговая строка
		Для Сч = 1 по 3 Цикл
			КодыСтрокРасшифровки.Добавить("300.01.0"+ Формат(Сч, "ЧЦ=2; ЧН=; ЧВН="));
		КонецЦикла;	 	
		
	ИначеЕсли ИмяЯчейки = "300.02.009" Тогда 
		// итоговая строка
		Для Сч = 1 по 8 Цикл
			КодыСтрокРасшифровки.Добавить("300.02.0"+ Формат(Сч, "ЧЦ=2; ЧН=; ЧВН="));
		КонецЦикла;	 	
		
	ИначеЕсли ИмяЯчейки = "300.02.014" Тогда 
		// итоговая строка
		Для Сч = 10 по 13 Цикл
			КодыСтрокРасшифровки.Добавить("300.02.0"+ Формат(Сч, "ЧЦ=2; ЧН=; ЧВН="));
		КонецЦикла;		
	ИначеЕсли ИмяЯчейки = "300.06.004" ИЛИ  ИмяЯчейки = "300.06.005"Тогда 
		
		Для Сч = 1 по 3 Цикл
			КодыСтрокРасшифровки.Добавить("300.06.0"+ Формат(Сч, "ЧЦ=2; ЧН=; ЧВН="));
		КонецЦикла;	     		
	ИначеЕсли ИмяЯчейки = "300.06.010" Тогда 
		// итоговая строка
		Для Сч = 7 по 9 Цикл
			КодыСтрокРасшифровки.Добавить("300.06.0"+ Формат(Сч, "ЧЦ=2; ЧН=; ЧВН="));
		КонецЦикла;	
	ИначеЕсли Найти(ИмяЯчейки, "300.00.013.I") >0 
			ИЛИ Найти(ИмяЯчейки, "300.00.013.II") >0  Тогда 
		КодыСтрокРасшифровки.Добавить("300.00.013");	
	ИначеЕсли Найти(ИмяЯчейки, "300.00.001.I") >0 
			ИЛИ Найти(ИмяЯчейки, "300.00.001.II") >0  Тогда 
		КодыСтрокРасшифровки.Добавить("300.00.001");	
	Иначе 	
		КодыСтрокРасшифровки.Добавить(ИмяЯчейки);
	КонецЕсли;
	
	Возврат КодыСтрокРасшифровки;
	
КонецФункции //Форма300ПолучитьСписокКодовСтрокВключаемыхВРасшифровку

&НаСервере
Функция ПолучитьАдресМакетаСКД(знач ИмяРаздела)
	ОбщаяСКД = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("МакетСКДФорма3002021Кв1");
	СхемаКомпоновкиДанных = ОбщаяСКД.ВложенныеСхемыКомпоновкиДанных.Найти(ИмяРаздела).Схема;
	
	Возврат ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор)
КонецФункции

&НаКлиенте
// Процедура выполняет расшифровку строки
//
Процедура Форма300РасшифровкаСКД(ИмяЯчейки)
		
	ИмяЯчейки = СтрЗаменить(ИмяЯчейки, "s_", "");
	ИмяЯчейки = СтрЗаменить(ИмяЯчейки, "_", ".");
	
	// Отсекаем префикс столбца	
	Если ВРЕГ(Прав(ИмяЯчейки, 2)) = ".A" или ВРЕГ(Прав(ИмяЯчейки, 2)) = ".B" Тогда
		ИмяЯчейки = Лев(ИмяЯчейки, СТрДлина(ИмяЯчейки) - 2);
	КонецЕсли;
	
	ЧислоВхождений = СтрЧислоВхождений(ИмяЯчейки, ".");
	
	Если ЧислоВхождений = 4 Тогда 
		ДлинаСтроки 	= СтрДлина(ИмяЯчейки); 
		Попытка
			АрабскоеЧисло 	= Сред(ИмяЯчейки, 12, ДлинаСтроки - 11); 
			АрабскоеЧисло 	= Лев(АрабскоеЧисло,1);
			БукваКодаСтроки = Прав(ИмяЯчейки, 1);
			Число 			= СтроковыеФункцииКлиентСервер.ПреобразоватьЧислоВРимскуюНотацию(АрабскоеЧисло, Ложь);
			ИмяЯчейки 		= ВРег(Лев(ИмяЯчейки, 11) + Число + БукваКодаСтроки); 
		Исключение
			АрабскоеЧисло 	= Сред(ИмяЯчейки, 14, ДлинаСтроки - 13); 
			АрабскоеЧисло 	= Лев(АрабскоеЧисло,1);
			Число 			= СтроковыеФункцииКлиентСервер.ПреобразоватьЧислоВРимскуюНотацию(АрабскоеЧисло, Ложь);
			ИмяЯчейки 		= ВРег(Лев(ИмяЯчейки, 12) + Число); 
		КонецПопытки;
	Иначе 
		Попытка
			ДлинаСтроки = СтрДлина(ИмяЯчейки); 
			АрабскоеЧисло = Сред(ИмяЯчейки, 12, ДлинаСтроки - 11); 
			Число = СтроковыеФункцииКлиентСервер.ПреобразоватьЧислоВРимскуюНотацию(АрабскоеЧисло, Ложь);
			ИмяЯчейки = Лев(ИмяЯчейки, 11) + Число; 
		Исключение
			// имя ячейки без изменений
			ИмяЯчейки = ВРЕГ(ИмяЯчейки);
		КонецПопытки
	КонецЕсли;	
		
	ОтображатьПоказательСуммаВДекларации 	= Ложь;
	ОтображатьПоказательСуммаОборота		= Истина;
	ОтображатьПоказательСуммаНДС 			= Истина;
	
	// определим раздел формы для расшифровки
	РазделНДС = "НачисленныйНДС";	
	ПредставлениеРазделаНДС = "Начисление НДС";
	
	Попытка
	СокращенныйКод = Число(Сред(ИмяЯчейки, 8,3));
	Если Найти(ИмяЯчейки, "300.00") и СокращенныйКод = 14 Тогда 
		РазделНДС = "НДСЗаНерезидента";
		ПредставлениеРазделаНДС = "НДС за нерезидента";
		ОтображатьПоказательСуммаВДекларации = Истина;
	ИначеЕсли (Найти(ИмяЯчейки, "300.00") > 0 И СокращенныйКод >= 13 И СокращенныйКод <= 29)
		ИЛИ (Найти(ИмяЯчейки, "300.02") > 0 И СокращенныйКод >= 10)
		ИЛИ (Найти(ИмяЯчейки, "300.06") > 0 И СокращенныйКод >= 7)
		ИЛИ (Найти(ИмяЯчейки, "300.04") > 0)Тогда
		
			РазделНДС = "ЗачетныйНДС";
			ПредставлениеРазделаНДС = "Зачет НДС";
			ОтображатьПоказательСуммаВДекларации = Истина;
		КонецЕсли;
	Исключение		
	КонецПопытки;
	
	// определим коды строк регистра для включения в расшифровку данной ячейки
	КодыСтрокРасшифровки = Форма300ПолучитьСписокКодовСтрокВключаемыхВРасшифровку(ИмяЯчейки);
		
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", 	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ТипДанных", 		"РегистрыНакопления");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяОбъекта", 	"НДС");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяТаблицы", 	"Обороты");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ПолучитьАдресМакетаСКД(РазделНДС));

	// Отборы
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";	
    БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Налогоплательщик",  Налогоплательщик, ВидСравненияКомпоновкиДанных.Равно);
	
	// Сортировка
	ПользовательскиеСортировки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ПорядокКомпоновкиДанных"));
	ПользовательскиеСортировки.ИдентификаторПользовательскойНастройки = "Порядок";
	
	НовыйЭлементПорядка = ПользовательскиеСортировки.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовыйЭлементПорядка.Использование  = Истина;
	НовыйЭлементПорядка.Поле  = новый ПолеКомпоновкиДанных("Регистратор.Дата");
	
	// Группировки	
	МассивГруппировок = Новый Массив();
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "КодСтроки", НСтр("ru = 'Код строки'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	Если РазделНДС = "НачисленныйНДС" Тогда	
		МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "ВидОперацииРеализации", НСтр("ru = 'Вид операции реализации'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	Иначе
		МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "ВидОперацииПоступления", НСтр("ru = 'Вид операции поступления'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	КонецЕсли;	
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка",  МассивГруппировок);
	
	// Параметры
	
	МассивПараметровДанных = Новый Массив();   
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодСтрокиРасшифровки", КодыСтрокРасшифровки);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокОрганизаций", мСписокСтруктурныхЕдиниц);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодСтроки", "300.00%");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "НачалоПериода", НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КонецПериода", КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Организация", Налогоплательщик);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Налогоплательщик", Налогоплательщик);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ПустаяОрганизация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	                            		
	// Метод отнесения НДС в зачет.
	// при расшифровке раздельного метода в расшифровку добавляем Вид оборота и Сумму в Декларации (сумма с учетом удельного веса)
	ПризнакРаздельногоМетода = ?(СтруктураРеквизитовФормы.мМетодРасчета = ПредопределенноеЗначение("Перечисление.МетодыОтнесенияНДСВЗачет.Раздельный") и Найти(ИмяЯчейки, "300.04") = 0 и Найти(ИмяЯчейки, "300.00.028") = 0, Истина, Ложь);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "РаздельныйМетод", ПризнакРаздельногоМетода);
	
	УдельныйВес = ?(Не ЗначениеЗаполнено(СтруктураРеквизитовФормы.УдВес), 100, СтруктураРеквизитовФормы.УдВес);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "УдельныйВес", УдельныйВес);
	
	// Дополнительные отборы
	Если Найти(ИмяЯчейки, "300.00.003") >0 Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.Ставка",  0, ВидСравненияКомпоновкиДанных.НеРавно);		
		
	ИначеЕсли Найти(ИмяЯчейки, "300.00.002") >0 Тогда
		// Корректировка по 0 ставке
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.Ставка", 0, ВидСравненияКомпоновкиДанных.Равно, Истина);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.ДляОсвобожденногоОборота", Ложь, ВидСравненияКомпоновкиДанных.Равно, Истина);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.МестоРеализацииНеРК", Ложь, ВидСравненияКомпоновкиДанных.Равно, Истина);
		ОтображатьПоказательСуммаНДС = Ложь;
		
	ИначеЕсли Найти(ИмяЯчейки, "300.00.004") >0 Тогда
		ОтображатьПоказательСуммаНДС = Ложь;
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.МестоРеализацииНеРК", Истина, ВидСравненияКомпоновкиДанных.Равно, Истина);
	ИначеЕсли Найти(ИмяЯчейки, "300.00.005") >0 Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.ДляОсвобожденногоОборота", Истина, ВидСравненияКомпоновкиДанных.Равно, Истина);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.МестоРеализацииНеРК", Ложь, ВидСравненияКомпоновкиДанных.Равно, Истина);
		ОтображатьПоказательСуммаНДС = Ложь;
		
	ИначеЕсли Найти(ИмяЯчейки, "300.00.001.II") >0 Тогда	
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ЕстьСФ", Ложь, ВидСравненияКомпоновкиДанных.Равно, Истина);
		
	ИначеЕсли Найти(ИмяЯчейки, "300.00.001.I") >0 Тогда	
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ЕстьСФ", Истина, ВидСравненияКомпоновкиДанных.Равно, Истина);
		
	ИначеЕсли Найти(ИмяЯчейки, "300.00.013.II") >0 Тогда	
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ЕстьСФ", Ложь, ВидСравненияКомпоновкиДанных.Равно, Истина);
		
	ИначеЕсли Найти(ИмяЯчейки, "300.00.013.I") >0 Тогда	
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ЕстьСФ", Истина, ВидСравненияКомпоновкиДанных.Равно, Истина);
		
	ИначеЕсли Найти(ИмяЯчейки, "300.00.014") >0 Тогда		
		ОтображатьПоказательСуммаВДекларации	= Истина;	
	
	ИначеЕсли Найти(ИмяЯчейки, "300.00.015") >0 Тогда	
		ОтображатьПоказательСуммаНДС 			= Ложь;
		ОтображатьПоказательСуммаВДекларации 	= Ложь;
	
	ИначеЕсли Найти(ИмяЯчейки, "300.00.017") >0 Тогда	
		ОтображатьПоказательСуммаНДС 			= Ложь;
		ОтображатьПоказательСуммаВДекларации 	= Ложь;
		
	ИначеЕсли Найти(ИмяЯчейки, "300.00.018") >0 Тогда	
		ОтображатьПоказательСуммаНДС 			= Ложь;
		ОтображатьПоказательСуммаВДекларации 	= Ложь;	

	ИначеЕсли	Найти(ИмяЯчейки, "300.01") >0 Тогда
		// 0 ставка НДС
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.ДляОсвобожденногоОборота", Ложь, ВидСравненияКомпоновкиДанных.Равно, Истина);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.МестоРеализацииНеРК", Ложь, ВидСравненияКомпоновкиДанных.Равно, Истина);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.Ставка", 0, ВидСравненияКомпоновкиДанных.Равно, Истина);
		ОтображатьПоказательСуммаНДС = Ложь;
		
	ИначеЕсли Найти(ИмяЯчейки, "300.02") >0 Тогда
		// Без НДС (освобожденные обороты)
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.ДляОсвобожденногоОборота", Истина, ВидСравненияКомпоновкиДанных.Равно, Истина);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.МестоРеализацииНеРК", Ложь, ВидСравненияКомпоновкиДанных.Равно, Истина);
		ОтображатьПоказательСуммаНДС = Ложь;
		// освобожденный импорт, к его показателям не применяется удельный вес
		ОтображатьПоказательСуммаВДекларации 	= Ложь;
		
	ИначеЕсли Найти(ИмяЯчейки, "300.04") >0 Тогда	
		// НДС методом зачета, к его показателям не применяется удельный вес
		ОтображатьПоказательСуммаВДекларации 	= Ложь;			
		
	ИначеЕсли ИмяЯчейки =  "300.06.004" ИЛИ ИмяЯчейки =  "300.06.001" Тогда
		// Корректировка по облагаемым оборотам
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.Ставка", 0, ВидСравненияКомпоновкиДанных.НеРавно, Истина);
		
	ИначеЕсли ИмяЯчейки =  "300.06.005" Тогда
		// Корректировка по 0 ставке
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.Ставка", 0, ВидСравненияКомпоновкиДанных.Равно, Истина);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.ДляОсвобожденногоОборота", Ложь, ВидСравненияКомпоновкиДанных.Равно, Истина);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.МестоРеализацииНеРК", Ложь, ВидСравненияКомпоновкиДанных.Равно, Истина);
		ОтображатьПоказательСуммаНДС = Ложь;
		
	ИначеЕсли ИмяЯчейки =  "300.06.006" Тогда
		// Корректировка по ставке БезНДС
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.Ставка", 0, ВидСравненияКомпоновкиДанных.Равно, Истина);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.ДляОсвобожденногоОборота", Истина, ВидСравненияКомпоновкиДанных.Равно, Истина);		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.МестоРеализацииНеРК", Ложь, ВидСравненияКомпоновкиДанных.Равно, Истина);
		ОтображатьПоказательСуммаНДС = Ложь;
	КонецЕсли;

	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПараметрыДанных", МассивПараметровДанных);
	
	ПользовательскиеПоля = ПользовательскиеНастройки.Элементы.Добавить(Тип("ВыбранныеПоляКомпоновкиДанных"));	
	ПользовательскиеПоля.ИдентификаторПользовательскойНастройки = "Выбор";	
	
    Если ОтображатьПоказательСуммаОборота Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаОборота", "Оборот по реализации");
	КонецЕсли;
	Если ОтображатьПоказательСуммаВДекларации Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаВДекларации", "Сумма в декларации");
	КонецЕсли;
	Если ОтображатьПоказательСуммаНДС Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаНДС", "Сумма НДС");
	КонецЕсли;
		
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Контрагент", "Контрагент");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ИИН_БИН", "ИИН/БИН контрагента");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Регистратор", "Документ");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СтавкаНДС", "Ставка НДС");
	
	// Прочие настройки
	ТекстЗаголовка = НСТР("ru = 'Регистр налогового учета к строке %1 для Декларации по НДС'");	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Заголовок", 	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, ИмяЯчейки));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", Истина);	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьПодписи", Истина);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц.Скопировать());
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Налогоплательщик",  Налогоплательщик);
	
	ИмяРазделаРасшифровки = "Декларация по НДС:" + СтруктураРеквизитовФормы.мГод + ", " + ПредставлениеРазделаНДС;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ВыводитьЗаголовок", Истина);	
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", ИмяРазделаРасшифровки);

	ОткрытьФорму("Отчет.УниверсальныйОтчетПоМетаданным.Форма.ФормаОтчета", ПараметрыФормы,, Истина);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПреобразоватьАрабскуюЦифруВРимскую(Знач тЧисло)
   мБуквы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("I,IV,V,IX,X,XL,L,XC,C,CD,D,CM,M", ",");
   мЦифры = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("1,4,5,9,10,40,50,90,100,400,500,900,1000", ",");
 
   тРимскоеЧисло = "";
 
   Для тСчет = 0 По мБуквы.Количество() - 1 Цикл
   тБуква=мБуквы.Количество() - тСчет - 1;
      Пока тЧисло >= Число(мЦифры[тБуква]) Цикл
         тРимскоеЧисло = тРимскоеЧисло + мБуквы[тБуква];
         тЧисло = тЧисло - Число(мЦифры[тБуква]);
      КонецЦикла;
   КонецЦикла;
 
   Возврат тРимскоеЧисло;
КонецФункции


/////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА В EXCEL

&НаКлиенте
Процедура ВыгрузитьВExcel(Команда)
	
	Если КодФормы = "Форма300_03" Тогда
		ТекстСообщения = НСтр("ru = 'Из-за отсутствия актуального шаблона выгрузка в Excel невозможна.'");								
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
		Возврат 	
	КонецЕсли;	
	
	ПараметрыВыгрузкиВExcel = ПолучитьПараметрыВыгрузкиВExcel(КодФормы); 
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыВыгрузкиВExcel", ПараметрыВыгрузкиВExcel);
	ДополнительныеПараметры.Вставить("ИмяФайла",ПараметрыВыгрузкиВExcel.ИмяФайлаШаблона); 
	ДополнительныеПараметры.Вставить("ИмяФормы", КодФормы);

	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьШаблонПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, ДополнительныеПараметры);	
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);КонецПроцедуры

&НаКлиенте
Процедура ВыбратьШаблонПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.ПолноеИмяФайла = ДополнительныеПараметры.ИмяФайла;
		ДиалогОткрытияФайла.Фильтр = НСтр("ru = 'Книга Excel (*.xls;*.xlsx)|*.xls;*.xlsx'");
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Укажите файл шайблона формы для выгрузки в Excel'");
		ДополнительныеПараметры.Вставить("ПодключеноРасширениеРаботыСФайлами", Подключено);

		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьШаблонПослеПодключенияРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	Иначе   
		
		ПараметрыФормы = Новый  Структура;
		ПараметрыФормы.Вставить("ТекстПредложения", НСтр("ru = 'Для выгрузки шаблона Excel 
								|необходимо установить расширение работы с файлами.'"));
		ПараметрыФормы.Вставить("ВозможноПродолжениеБезУстановки", Ложь);
		ОткрытьФорму("ОбщаяФорма.ВопросОбУстановкеРасширенияРаботыСФайлами", ПараметрыФормы);
		Возврат;
	КонецЕсли;
	   
КонецПроцедуры   

&НаКлиенте
Процедура ВыбратьШаблонПослеПодключенияРасширенияРаботыСФайламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайла = Результат[0];
	Оповещение = Новый ОписаниеОповещения("ВыбратьИПередатьФайлШаблонаНаСерверЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПомещениеФайлаНаСервер(Оповещение,,,, ПолноеИмяФайла, УникальныйИдентификатор);
		
КонецПроцедуры    

&НаКлиенте
// Обработчик немодального завершения выбора и передачи файлов на сервер
//
Процедура ВыбратьИПередатьФайлШаблонаНаСерверЗавершение(ПолученныйФайл, ДополнительныеПараметры) Экспорт

	Если ПолученныйФайл = Неопределено Тогда
		Возврат;
	ИначеЕсли ПолученныйФайл.ПомещениеФайлаОтменено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ИмяФайла", ПолученныйФайл.СсылкаНаФайл.Имя);
	ДополнительныеПараметры.Вставить("АдресФайлаШаблона", ПолученныйФайл.Адрес);  
	
	Если Не ДополнительныеПараметры.ПодключеноРасширениеРаботыСФайлами Тогда
		
		ПараметрыФормы = Новый  Структура;
		ПараметрыФормы.Вставить("ТекстПредложения", НСтр("ru = 'Для выгрузки шаблона Excel 
								|необходимо установить расширение работы с файлами.'"));
		ПараметрыФормы.Вставить("ВозможноПродолжениеБезУстановки", Ложь);
		ОткрытьФорму("ОбщаяФорма.ВопросОбУстановкеРасширенияРаботыСФайлами", ПараметрыФормы);
		Возврат;

	КонецЕсли;   
	
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогСохраненияФайла.ПолноеИмяФайла = КодФормы + " " + СтруктураРеквизитовФормы.мГод + "кв" + СтруктураРеквизитовФормы.мКвартал;
	ДиалогСохраненияФайла.Фильтр = НСтр("ru = 'Книга Excel (*.xls)|*.xls'");
	ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
	ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Сохранение многострочного приложения в формате Excel'");

	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьВExcelЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДиалогСохраненияФайла.Показать(ОписаниеОповещения); 
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьВExcelЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыВыгрузкиВExcel = ДополнительныеПараметры.ПараметрыВыгрузкиВExcel; 
	АдресФайлаШаблона       = ДополнительныеПараметры.АдресФайлаШаблона;
	
	#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		РезультатВыгрузки = ВыгрузитьДанныеРеестраВExcelНаСервере(ДополнительныеПараметры.ИмяФормы, АдресФайлаШаблона,ПараметрыВыгрузкиВExcel.ИмяЛистаШаблона, 
														ПараметрыВыгрузкиВExcel.НомерПервойСтроки, ПараметрыВыгрузкиВExcel.ЗаголовокРеестра);
		Если РезультатВыгрузки = Неопределено Тогда
			// не сформирован результат.
			Возврат;
		КонецЕсли;
		
		АдресРеестра = РезультатВыгрузки.АдресРеестраExcel;
		АдресВременногоХранилища = РезультатВыгрузки.АдресФайлаExcel;
	
	#Иначе
		РезультатВыгрузкиРеестра = ВыгрузитьДанныеРеестраНаСервере(ДополнительныеПараметры.ИмяФормы, ПараметрыВыгрузкиВExcel.ЗаголовокРеестра);
		
		Если РезультатВыгрузкиРеестра.АдресРеестраДляВыгрузки <> Неопределено И РезультатВыгрузкиРеестра.КоличествоЗаписей <> 0 Тогда
			РезультатВыгрузкиВФайл = ВыгрузитьДанныеРеестраВExcelНаКлиенте(ДополнительныеПараметры.ИмяФормы, АдресФайлаШаблона, РезультатВыгрузкиРеестра.АдресРеестраДляВыгрузки, ПараметрыВыгрузкиВExcel.ИмяЛистаШаблона, 
																	ПараметрыВыгрузкиВExcel.НомерПервойСтроки, РезультатВыгрузкиРеестра.КоличествоЗаписей);
		Иначе
			Возврат;
		КонецЕсли;
		
		Если РезультатВыгрузкиВФайл = Неопределено Тогда
			// не сформирован результат.
			Возврат;
		КонецЕсли;
		
		АдресРеестра = РезультатВыгрузкиРеестра.АдресРеестраExcel;
		АдресВременногоХранилища = РезультатВыгрузкиВФайл.АдресФайлаExcel;
	#КонецЕсли

	Если НЕ АдресРеестра = Неопределено Тогда

		РеестрСФ = ПолучитьИзВременногоХранилища(АдресРеестра);
		РеестрСФ.ОтображатьСетку = Ложь;
		РеестрСФ.ОтображатьЗаголовки = Ложь;
		РеестрСФ.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		ПараметрыПечати = ОбщегоНазначенияБККлиент.ПустыеПараметрыПечати();
		ПараметрыПечати.ТабличныйДокумент = РеестрСФ;
		ПараметрыПечати.ЗаголовокФормы = НСтр("ru = 'Реестр счетов-фактур'");
		ОбщегоНазначенияБККлиент.ОткрытьФормуПечати(ПараметрыПечати);
	
	КонецЕсли;
	
	Если АдресВременногоХранилища = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайла = Результат[0];
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, АдресВременногоХранилища));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяФайла",ПолноеИмяФайла); 
	Обработчик = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеЗавершение", ЭтотОбъект,ДополнительныеПараметры);
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
	ПараметрыСохранения.Интерактивно = Ложь;
	ФайловаяСистемаКлиент.СохранитьФайлы(Обработчик, ПолучаемыеФайлы, ПараметрыСохранения); 
	
КонецПроцедуры  

#Если Не ВебКлиент И Не МобильныйКлиент Тогда
	
&НаКлиенте
Функция ВыгрузитьДанныеРеестраВExcelНаКлиенте(ИмяФормы, АдресФайлаШаблона, АдресРеестра, ИмяЛиста, НомерНачальнойСтрокиExcel, КоличествоЗаписей)

	Результат = Новый Структура("АдресФайлаExcel", Неопределено);
	
	Реестр = ПолучитьИзВременногоХранилища(АдресРеестра);
	
	// Сохраним шаблон во временный файл
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаШаблона);	
	ИмяВременногоШаблона = ПолучитьИмяВременногоФайла("xls");
	ДвоичныеДанные.Записать(ИмяВременногоШаблона);
	
	СтруктураСоответствияПолей = ПолучитьСтруктуруСоответствияПолейРеестраExcel(ИмяФормы);
	
	Попытка
		ОбъектЭксель = Новый COMОбъект("Excel.Application");
		ОбъектЭксель.ScreenUpdating = Ложь;
		ОбъектЭксель.EnableEvents = Ложь;
	Исключение		
		ТекстСообщения = НСтр("ru = 'Не удалось создать объект Excel!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

		Возврат Результат;
	КонецПопытки;
	
	Попытка
		НоваяКнига = ОбъектЭксель.Workbooks.Add(ИмяВременногоШаблона);
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось создать новый документ Excel, на основании указанного шаблона!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Результат;
	КонецПопытки;

	Если КоличествоЗаписей > 65500 Тогда
		ВсегоСтраниц =  Цел(КоличествоЗаписей/65500);
		Если ВсегоСтраниц = КоличествоЗаписей/65500  Тогда
			ВсегоСтраниц = ВсегоСтраниц;
		Иначе
			ВсегоСтраниц = ВсегоСтраниц + 1;
		КонецЕсли;
	Иначе
		ВсегоСтраниц = 1;
	КонецЕсли;
	
	// переходим на лист для заполнения данных.
	// Если вместо шаблона Excel была указана книга Excel, на этом этапе может возникнуть ошибка.
    Попытка
		РабочийЛистКниги = НоваяКнига.Sheets.Item(ИмяЛиста);
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Возникла ошибка при обработке документа Excel. Проверьте правильность указания шаблона формы!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Результат;
	КонецПопытки;
	
	Если ВсегоСтраниц > 1 Тогда
		РабочийЛистКниги.Copy(,РабочийЛистКниги);
	КонецЕсли;
	
	НомерТекущейСтроки = НомерНачальнойСтрокиExcel;	     
	НомерПП = 0;
	КоличествоСтрок = КоличествоЗаписей;//ТаблицаДанныхДляВыгрузки.Количество();
	ТекСтр = 1;
	
	СтруктураСоответствияКолонок = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураСоответствияПолей Цикл
		Для НомерКолонки = 1 По СтруктураСоответствияПолей.Количество() Цикл
			ОбластьЗаголовок = Реестр.Область("R1C" + НомерКолонки);
			Если СокрЛП(ОбластьЗаголовок.Текст) = КлючИЗначение.Ключ Тогда
				СтруктураСоответствияКолонок.Вставить(КлючИЗначение.Ключ, НомерКолонки);
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЦикла;	
	
	Для НомерСтроки = 2 По КоличествоЗаписей+1 Цикл
		НомерПП = НомерПП + 1;
		
		Если НомерПП > ТекСтр * 65500 Тогда
			ТекСтр = ТекСтр + 1;
			РабочийЛистКниги = НоваяКнига.Sheets.Item(ИмяЛиста + " (" + ТекСтр + ")");							
			НомерТекущейСтроки = НомерНачальнойСтрокиExcel;	     
			// проверим нужно ли еще добавлять листы
			Если ТекСтр < ВсегоСтраниц Тогда
				РабочийЛистКниги.Copy(,РабочийЛистКниги);
			КонецЕсли;
		КонецЕсли;
		Для Каждого КлючИЗначение Из СтруктураСоответствияПолей Цикл
			Если КлючИЗначение.Ключ = "НомерСтроки" 
			 ИЛИ КлючИЗначение.Ключ = "СтатусПоставщика"
			 ИЛИ КлючИЗначение.Ключ = "РННПоставщика"
			 ИЛИ КлючИЗначение.Ключ = "РННПокупателя"
			 ИЛИ КлючИЗначение.Ключ = "ИННБИНПоставщика" 
			 ИЛИ КлючИЗначение.Ключ = "ИННБИНПокупателя" 
			 ИЛИ КлючИЗначение.Ключ = "ИННПокупателя" 
			 ИЛИ КлючИЗначение.Ключ = "КПППокупателя" 
			 ИЛИ КлючИЗначение.Ключ = "УНППокупателя" 
			 ИЛИ КлючИЗначение.Ключ = "ВидОборота" 			 
			 ИЛИ КлючИЗначение.Ключ = "ВидСФЛев" 
			 ИЛИ КлючИЗначение.Ключ = "ВидСФПрав" 
			 ИЛИ КлючИЗначение.Ключ = "НомерСФ" Тогда
				РабочийЛистКниги.Cells(НомерТекущейСтроки,КлючИЗначение.Значение).NumberFormat = "@";  // текстовый формат
			КонецЕсли;
			
			Если КлючИЗначение.Ключ = "СтоимостьБезНДС"
			 ИЛИ КлючИЗначение.Ключ = "СуммаНДССФ" 
			 ИЛИ КлючИЗначение.Ключ = "СуммаНДСВЗачет"
			 ИЛИ КлючИЗначение.Ключ = "СуммаНДСНачисленного" Тогда
			 	РабочийЛистКниги.Cells(НомерТекущейСтроки,КлючИЗначение.Значение).NumberFormat = "0";  // числовой формат
			КонецЕсли;
			
			Если КлючИЗначение.Ключ = "ДатаСФ"
				ИЛИ КлючИЗначение.Ключ = "ДатаОборотаПоРеализации" Тогда
				РабочийЛистКниги.Cells(НомерТекущейСтроки,КлючИЗначение.Значение).NumberFormat = ""; // Формат даты Selection.NumberFormat = "m/d/yyyy"
			КонецЕсли;	
			
			Попытка
				ТекстОбласти = Реестр.Область("R" + Формат(НомерСтроки,"ЧЦ=10; ЧГ=0") + "C" + СтруктураСоответствияКолонок[КлючИЗначение.Ключ]).Текст;
				Если (КлючИЗначение.Ключ = "СтоимостьБезНДС" 
					ИЛИ КлючИЗначение.Ключ = "СуммаНДССФ" 
				 	ИЛИ КлючИЗначение.Ключ = "СуммаНДСВЗачет"
				 	ИЛИ КлючИЗначение.Ключ = "СуммаНДСНачисленного") и ЗначениеЗаполнено(ТекстОбласти) Тогда
				 			ТекстОбласти = Число(ТекстОбласти);
				КонецЕсли;
				РабочийЛистКниги.Cells(НомерТекущейСтроки,КлючИЗначение.Значение).Value = ?(ТекстОбласти="", Неопределено, ТекстОбласти);			
			Исключение
				ТекстСообщения = НСтр("ru = 'При выгрузке строки № %1 произошла ошибка. Строка выгружена частично...'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,СокрЛП(НомерТекущейСтроки));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецПопытки
			
		КонецЦикла;
	
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
	КонецЦикла;

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xls");
	НоваяКнига.SaveAs(ИмяВременногоФайла, 56); //  XlExcel8 (Microsoft Office 97-2003)
	
	ТекстСообщения = НСтр("ru = 'Формирование книги Excel завершено!'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	ОбъектЭксель.Quit();
	ОбъектЭксель = Неопределено;
	
	//////////////////////////////////////////////////////////////////////////////
	// Сохранить результат.	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	Результат.АдресФайлаExcel = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтаФорма.УникальныйИдентификатор);
		
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат Результат;

КонецФункции	

#КонецЕсли

&НаСервере
// Процедура подготавливает таблицу данных для выгрузки и помещает его в реквизит формы.
//
Функция ВыгрузитьДанныеРеестраНаСервере(ИмяФормы, Заголовок)

	Результат = Новый Структура("АдресРеестраExcel, АдресРеестраДляВыгрузки, КоличествоЗаписей", Неопределено, Неопределено, 0);
	
	// сформируем предварительно табличный документ, если вдруг не окажется Excel на компьютере
	ТаблицаДанных = ПолучитьТаблицуДанныхРеестраExcel(ИмяФормы);
	
	СтруктураИтоговыхПолей = ПолучитьСтруктуруИтоговыхПолейРеестраExcel(ИмяФормы);
	
	Реестр = Новый ТабличныйДокумент;
	Макет = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("МакетРеестра2017Кв1");
	
	СведенияОНалогоплательщике = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(Налогоплательщик, ДатаПодписи);
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.Заголовок 		= Заголовок;
	ОбластьЗаголовок.Параметры.ИИН_БИН 			= СведенияОНалогоплательщике.БИН_ИИН;
	ОбластьЗаголовок.Параметры.Налогоплательщик = СведенияОНалогоплательщике.ПолноеНаименование;
	ОбластьЗаголовок.Параметры.НалоговыйПериод 	= ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Реестр.Вывести(ОбластьЗаголовок);
	
	ОбластьЗаголовокКолонки = Макет.ПолучитьОбласть("Шапка|Колонка");
	НомерКолонки = 0;
	
	РеестрДляВыгрузки = Новый ТабличныйДокумент;
	ОбластьЗаголовокКолонкиРеестра = Макет.ПолучитьОбласть("Шапка|Колонка");
	
	НомерКолонки = 0;
	Для Каждого Колонка Из ТаблицаДанных.Колонки Цикл
		НомерКолонки = НомерКолонки + 1;
		ОбластьЗаголовокКолонки.Параметры.ЗаголовокКолонки = Колонка.Заголовок;
		ОбластьЗаголовокКолонкиРеестра.Параметры.ЗаголовокКолонки = Колонка.Имя;
		
		Если НомерКолонки = 1 Тогда
			Реестр.Вывести(ОбластьЗаголовокКолонки);
			РеестрДляВыгрузки.Вывести(ОбластьЗаголовокКолонкиРеестра);
		Иначе
			Реестр.Присоединить(ОбластьЗаголовокКолонки);
			РеестрДляВыгрузки.Присоединить(ОбластьЗаголовокКолонкиРеестра);
		КонецЕсли;
	КонецЦикла;

	ОбластьСтрока = Макет.ПолучитьОбласть("Строка|Колонка");
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		НомерКолонки = 0;
		Для Каждого Колонка Из ТаблицаДанных.Колонки Цикл
			НомерКолонки = НомерКолонки + 1;
			ОбластьСтрока.Параметры.Строка = СтрокаДанных[Колонка.Имя];
			Если НомерКолонки = 1 Тогда
				Реестр.Вывести(ОбластьСтрока);
				РеестрДляВыгрузки.Вывести(ОбластьСтрока);
			Иначе
				Реестр.Присоединить(ОбластьСтрока);
				РеестрДляВыгрузки.Присоединить(ОбластьСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	// подсчитаем итоги по тем полям, которые указаны как итоговые
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал|Колонка");
	НомерКолонки = 0;
	Для Каждого Колонка Из ТаблицаДанных.Колонки Цикл
		НомерКолонки = НомерКолонки + 1;
		Если СтруктураИтоговыхПолей.Свойство(Колонка.Имя) Тогда
			ОбластьПодвал.Параметры.Итог = ТаблицаДанных.Итог(Колонка.Имя);
		Иначе
			ОбластьПодвал.Параметры.Итог = "";
		КонецЕсли;
		Если НомерКолонки = 1 Тогда
			Реестр.Вывести(ОбластьПодвал);
		Иначе
			Реестр.Присоединить(ОбластьПодвал);
		КонецЕсли;
	КонецЦикла;

	Результат.АдресРеестраExcel = ПоместитьВоВременноеХранилище(Реестр, ЭтаФорма.УникальныйИдентификатор);
	Результат.АдресРеестраДляВыгрузки = ПоместитьВоВременноеХранилище(РеестрДляВыгрузки, ЭтаФорма.УникальныйИдентификатор);
	Результат.КоличествоЗаписей = ТаблицаДанных.Количество();
	
	Возврат Результат;
	
КонецФункции// ВыгрузитьВExcel()

&НаСервере
// Процедура выгружает переданную таблицу значений в Excel
//
Функция ВыгрузитьДанныеРеестраВExcelНаСервере(ИмяФормы, АдресФайлаШаблона, ИмяЛиста, 
								НомерНачальнойСтрокиExcel, Заголовок)

								
	Результат = Новый Структура("АдресФайлаExcel, АдресРеестраExcel", Неопределено, Неопределено);
	
	// сформируем предварительно табличный документ, если вдруг не окажется Excel на компьютере
	ТаблицаДанных = ПолучитьТаблицуДанныхРеестраExcel(ИмяФормы);
	СтруктураСоответствияПолей = ПолучитьСтруктуруСоответствияПолейРеестраExcel(ИмяФормы);
	СтруктураИтоговыхПолей = ПолучитьСтруктуруИтоговыхПолейРеестраExcel(ИмяФормы);
	
	Реестр = Новый ТабличныйДокумент;
	Макет = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("МакетРеестра2017Кв1");
	
	СведенияОНалогоплательщике = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(Налогоплательщик, ДатаПодписи);
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.Заголовок 		= Заголовок;
	ОбластьЗаголовок.Параметры.ИИН_БИН 			= СведенияОНалогоплательщике.БИН_ИИН;
	ОбластьЗаголовок.Параметры.Налогоплательщик = СведенияОНалогоплательщике.ПолноеНаименование;
	ОбластьЗаголовок.Параметры.НалоговыйПериод 	= ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Реестр.Вывести(ОбластьЗаголовок);
	
	ОбластьЗаголовокКолонки = Макет.ПолучитьОбласть("Шапка|Колонка");
	НомерКолонки = 0;
	Для Каждого Колонка Из ТаблицаДанных.Колонки Цикл
		НомерКолонки = НомерКолонки + 1;
		ОбластьЗаголовокКолонки.Параметры.ЗаголовокКолонки = Колонка.Заголовок;
		Если НомерКолонки = 1 Тогда
			Реестр.Вывести(ОбластьЗаголовокКолонки);
		Иначе
			Реестр.Присоединить(ОбластьЗаголовокКолонки);
		КонецЕсли;
	КонецЦикла;
	
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка|Колонка");
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		НомерКолонки = 0;
		Для Каждого Колонка Из ТаблицаДанных.Колонки Цикл
			НомерКолонки = НомерКолонки + 1;
			ОбластьСтрока.Параметры.Строка = СтрокаДанных[Колонка.Имя];
			Если НомерКолонки = 1 Тогда
				Реестр.Вывести(ОбластьСтрока);
			Иначе
				Реестр.Присоединить(ОбластьСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	// подсчитаем итоги по тем полям, которые указаны как итоговые
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал|Колонка");
	НомерКолонки = 0;
	Для Каждого Колонка Из ТаблицаДанных.Колонки Цикл
		НомерКолонки = НомерКолонки + 1;
		Если СтруктураИтоговыхПолей.Свойство(Колонка.Имя) Тогда
			ОбластьПодвал.Параметры.Итог = ТаблицаДанных.Итог(Колонка.Имя);
		Иначе
			ОбластьПодвал.Параметры.Итог = "";
		КонецЕсли;
		Если НомерКолонки = 1 Тогда
			Реестр.Вывести(ОбластьПодвал);
		Иначе
			Реестр.Присоединить(ОбластьПодвал);
		КонецЕсли;
	КонецЦикла;

	//УниверсальныеМеханизмы.НапечататьДокумент(Реестр, 1, Ложь, Заголовок);
     	
	
	Попытка
		ОбъектЭксель = Новый COMОбъект("Excel.Application");
		ОбъектЭксель.ScreenUpdating = Ложь;
		ОбъектЭксель.EnableEvents = Ложь;
	Исключение		
		ТекстСообщения = НСтр("ru = 'Не удалось создать объект Excel!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

		Возврат Результат;
	КонецПопытки;
	
	// Сохраним шаблон во временный файл
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаШаблона);	
	ИмяВременногоШаблона = ПолучитьИмяВременногоФайла("xls");
	ДвоичныеДанные.Записать(ИмяВременногоШаблона);
	
	Попытка
		НоваяКнига = ОбъектЭксель.Workbooks.Add(ИмяВременногоШаблона);
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось создать новый документ Excel, на основании указанного шаблона!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Результат;
	КонецПопытки;


	// определим количество листов
	Если ТаблицаДанных.Количество() > 65500 Тогда
		КоличествоЗаписей = ТаблицаДанных.Количество();
		ВсегоСтраниц =  Цел(КоличествоЗаписей/65500);
		Если ВсегоСтраниц = КоличествоЗаписей/65500  Тогда
			ВсегоСтраниц = ВсегоСтраниц;
		Иначе
			ВсегоСтраниц = ВсегоСтраниц + 1;
		КонецЕсли;
	Иначе
		ВсегоСтраниц = 1;
	КонецЕсли;
	
	// переходим на лист для заполнения данных.
	// Если вместо шаблона Excel была указана книга Excel, на этом этапе может возникнуть ошибка.
    Попытка
		РабочийЛистКниги = НоваяКнига.Sheets.Item(ИмяЛиста);
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Возникла ошибка при обработке документа Excel. Проверьте правильность указания шаблона формы!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Результат;
	КонецПопытки;
	
	Если ВсегоСтраниц > 1 Тогда
		РабочийЛистКниги.Copy(,РабочийЛистКниги);
	КонецЕсли;
	
	НомерТекущейСтроки = НомерНачальнойСтрокиExcel;	     
	НомерПП = 0;
	КоличествоСтрок = ТаблицаДанных.Количество();
	ТекСтр = 1;
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
	
		НомерПП = НомерПП + 1;
		//Состояние("Выгружается строка " + НомерПП + " из " + КоличествоСтрок);	
		
		Если НомерПП > ТекСтр * 65500 Тогда
			ТекСтр = ТекСтр + 1;
			РабочийЛистКниги = НоваяКнига.Sheets.Item(ИмяЛиста + " (" + ТекСтр + ")");							
			НомерТекущейСтроки = НомерНачальнойСтрокиExcel;	     
			// проверим нужно ли еще добавлять листы
			Если ТекСтр < ВсегоСтраниц Тогда
				РабочийЛистКниги.Copy(,РабочийЛистКниги);
			КонецЕсли;
		КонецЕсли;
		Для Каждого КлючИЗначение Из СтруктураСоответствияПолей Цикл
			Если КлючИЗначение.Ключ = "НомерСтроки" 
			 ИЛИ КлючИЗначение.Ключ = "СтатусПоставщика"
			 ИЛИ КлючИЗначение.Ключ = "РННПоставщика"
			 ИЛИ КлючИЗначение.Ключ = "РННПокупателя"
			 ИЛИ КлючИЗначение.Ключ = "ИННБИНПоставщика" 
			 ИЛИ КлючИЗначение.Ключ = "ИННБИНПокупателя" 
			 ИЛИ КлючИЗначение.Ключ = "ИННПокупателя" 
			 ИЛИ КлючИЗначение.Ключ = "КПППокупателя" 
			 ИЛИ КлючИЗначение.Ключ = "УНППокупателя" 
			 ИЛИ КлючИЗначение.Ключ = "ВидОборота" 			 
			 ИЛИ КлючИЗначение.Ключ = "ВидСФЛев" 
			 ИЛИ КлючИЗначение.Ключ = "ВидСФПрав" 
			 ИЛИ КлючИЗначение.Ключ = "НомерСФ" Тогда
				РабочийЛистКниги.Cells(НомерТекущейСтроки,КлючИЗначение.Значение).NumberFormat = "@";  // текстовый формат
			КонецЕсли;
			
			Если КлючИЗначение.Ключ = "СтоимостьБезНДС"
			 ИЛИ КлючИЗначение.Ключ = "СуммаНДССФ" 
			 ИЛИ КлючИЗначение.Ключ = "СуммаНДСВЗачет"
			 ИЛИ КлючИЗначение.Ключ = "СуммаНДСНачисленного" Тогда
			 	РабочийЛистКниги.Cells(НомерТекущейСтроки,КлючИЗначение.Значение).NumberFormat = "0";  // числовой формат
			КонецЕсли;
			
			Если КлючИЗначение.Ключ = "ДатаСФ"
				ИЛИ КлючИЗначение.Ключ = "ДатаОборотаПоРеализации" Тогда
				РабочийЛистКниги.Cells(НомерТекущейСтроки,КлючИЗначение.Значение).NumberFormat = ""; // Формат даты Selection.NumberFormat = "m/d/yyyy"
			КонецЕсли;	
			
			Попытка
				РабочийЛистКниги.Cells(НомерТекущейСтроки,КлючИЗначение.Значение).Value = СтрокаТаблицы[КлючИЗначение.Ключ];
			Исключение
				Сообщить("При выгрузке строки №" + СокрЛП(НомерТекущейСтроки) + " произошла ошибка. Строка выгружена частично...");
				Продолжить;
			КонецПопытки
		КонецЦикла;
	
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
	КонецЦикла;

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xls");
	НоваяКнига.SaveAs(ИмяВременногоФайла, 56); //  XlExcel8 (Microsoft Office 97-2003)
	
	ТекстСообщения = НСтр("ru = 'Формирование книги Excel завершено!'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	ОбъектЭксель.Quit();
	ОбъектЭксель = Неопределено;
	
	//////////////////////////////////////////////////////////////////////////////
	// Сохранить результат.	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	Результат.АдресФайлаExcel = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтаФорма.УникальныйИдентификатор);
	Результат.АдресРеестраExcel = ПоместитьВоВременноеХранилище(Реестр, ЭтаФорма.УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат Результат;
	
КонецФункции// ВыгрузитьВExcel()

&НаСервере
Функция ПолучитьТаблицуДанныхРеестраExcel(ИмяФормы)
	Если ИмяФормы = "Форма300_03" Тогда
		Возврат Форма300_03ПолучитьТаблицуДанныхРеестраExcel(ИмяФормы);
	ИначеЕсли ИмяФормы = "Форма300_07" Тогда
		Возврат Форма300_07ПолучитьТаблицуДанныхРеестраExcel(ИмяФормы);	
	ИначеЕсли ИмяФормы = "Форма300_08" Тогда
		Возврат Форма300_08ПолучитьТаблицуДанныхРеестраExcel(ИмяФормы);		
	КонецЕсли;	
КонецФункции	

&НаСервере
Функция ПолучитьСтруктуруСоответствияПолейРеестраExcel(ИмяФормы)
	Если ИмяФормы = "Форма300_03" Тогда
		Возврат Форма300_03ПолучитьСтруктуруСоответствияПолейРеестраExcel();
	ИначеЕсли ИмяФормы = "Форма300_07" Тогда
		Возврат Форма300_07ПолучитьСтруктуруСоответствияПолейРеестраExcel();
	ИначеЕсли ИмяФормы = "Форма300_08" Тогда
		Возврат Форма300_08ПолучитьСтруктуруСоответствияПолейРеестраExcel();
	КонецЕсли;	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруИтоговыхПолейРеестраExcel(ИмяФормы)
	Если ИмяФормы = "Форма300_03" Тогда
		Возврат Форма300_03ПолучитьСтруктуруИтоговыхПолейРеестраExcel();
	ИначеЕсли ИмяФормы = "Форма300_07" Тогда
		Возврат Форма300_07ПолучитьСтруктуруИтоговыхПолейРеестраExcel();	
	ИначеЕсли ИмяФормы = "Форма300_08" Тогда
		Возврат Форма300_08ПолучитьСтруктуруИтоговыхПолейРеестраExcel();		
	КонецЕсли;	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыВыгрузкиВExcel(ИмяФормы)
	ПараметрыВыгрузки = Новый Структура("ИмяФайлаШаблона, ИмяЛистаШаблона, НомерПервойСтроки, ЗаголовокРеестра");
	Если ИмяФормы = "Форма300_03" Тогда
		ПараметрыВыгрузки.ИмяФайлаШаблона = "SONO_300_03_2016.xls";
		ПараметрыВыгрузки.ИмяЛистаШаблона = "300.03.Data1";
		ПараметрыВыгрузки.НомерПервойСтроки = 2;
		ПараметрыВыгрузки.ЗаголовокРеестра = "ИМПОРТ ТОВАРОВ, ПО КОТОРЫМ ИЗМЕНЕН СРОК УПЛАТЫ НДС";
	ИначеЕсли ИмяФормы = "Форма300_07" Тогда
		ПараметрыВыгрузки.ИмяФайлаШаблона = "SONO_300_07_2016.xls";
		ПараметрыВыгрузки.ИмяЛистаШаблона = "300.07.Data1";
		ПараметрыВыгрузки.НомерПервойСтроки = 2;
		ПараметрыВыгрузки.ЗаголовокРеестра = "РЕЕСТР СЧЕТОВ-ФАКТУР ПО РЕАЛИЗОВАННЫМ ТОВАРАМ, РАБОТАМ, УСЛУГАМ В ТЕЧЕНИЕ ОТЧЕТНОГО НАЛОГОВОГО ПЕРИОДА";
	ИначеЕсли ИмяФормы = "Форма300_08" Тогда
		ПараметрыВыгрузки.ИмяФайлаШаблона = "SONO_300_08_2016.xls";
		ПараметрыВыгрузки.ИмяЛистаШаблона = "300.08.Data1";
		ПараметрыВыгрузки.НомерПервойСтроки = 2;
		ПараметрыВыгрузки.ЗаголовокРеестра = "РЕЕСТР СЧЕТОВ-ФАКТУР ПО ПРИОБРЕТЕННЫМ ТОВАРАМ, РАБОТАМ, УСЛУГАМ В ТЕЧЕНИЕ ОТЧЕТНОГО НАЛОГОВОГО ПЕРИОДА";
	КонецЕсли;	
	
	Возврат ПараметрыВыгрузки
КонецФункции	

