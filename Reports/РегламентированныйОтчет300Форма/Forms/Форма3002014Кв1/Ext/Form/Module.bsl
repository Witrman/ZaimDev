////////////////////////////////////////////////////////////////////////////////
// Описание формы
// Параметры фомры:
//  Налогоплательщик - СправочникСсылка.Организации - Налогоплательщик, представляющий отчет
//  мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета - Дата - отчетный период формирования отчета
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	мВыбраннаяФорма = "Форма3002014Кв1";
	КодФормы 		= "Форма300";
	
		
	ВсегоСтраниц	= 1;     	
	мФорматНомераСтроки = "ЧЦ=8; ЧВН=; ЧГ=";
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруФормРегОтчета(ЭтотОбъект);	
	
	
	СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями = РегламентированнаяОтчетностьПереопределяемый.ПоддержкаРаботыСоСтруктурнымиПодразделениями();	
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов   = Новый СписокЗначений;	
	СтруктураРеквизитовФормы.мПечатныеформы 		  = Новый СписокЗначений;	
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);
		
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
	
	
	// Значения по умолчанию
	СтруктураРеквизитовФормы.мПропорцИРаздел	= Ложь; // не поддерживаем этот метод расчета	
	ПредставлениеНомераДокументов 				= Константы.ПредставлениеНомераСчетаФактуры.Получить();	
	ПроверятьИИНБИНКонтрагента 					= Истина;
	СпособФормированияРеестра					= "ПоРегиструСчетовФактур";
	
	ЗаполнитьСведенияОбОтчетномПериоде();
		
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	//СтруктураРеквизитовФормы.мМетодРасчета 		= ПолучитьМетодОтнесенияНДСВЗачет(Налогоплательщик, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекФорма.КодФормы);
	КонецЦикла	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если Модифицированность Тогда 
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);	
		ТекстВопроса = НСТР("ru = 'Сохранить данные отчета?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);	
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(мСписокСтруктурныхЕдиниц, ЭтаФорма, СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда		
		мСписокСтруктурныхЕдиниц = Результат;		
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц); 		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ФормаВыбораИзКлассификатора") Тогда
		
		Если ВРег(ИсточникВыбора.ИмяМакета) = ВРег("КОДЫБЮДЖЕТНОЙКЛАССИФИКАЦИИ") Тогда 
			
			Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда 
				Код = ВыбранноеЗначение;
			Иначе 
				Код = ВыбранноеЗначение.КодСтроки;				
			КонецЕсли;
		// выбираются в форме 300.03
		
		
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "Разделы"

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)	
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.КодФормы = Элемент.ТекущиеДанные.КодФормы Тогда
		ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);
		Возврат;
	КонецЕсли;	
	
	РазделыОтчетаПриАктивизацииСтрокиНаСервере(Элемент.ТекущиеДанные.КодФормы, Элемент.ТекущиеДанные.Многострочность);	
		
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Для Каждого СтраницаФорм из Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы Цикл
		Элементы[СтраницаФорм.Имя].Видимость = СтраницаФорм.Имя = ЭтаФорма.КодФормы;	
	КонецЦикла;
	
	ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "Отчеты"


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыгрузитьВXML(Команда)
	ГодФормирования = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	
	Если 2014 < ГодФормирования Тогда 
		ТекстСообщения = НСтр("ru = 'Отчет не предназначен для выгрузки в XML в период формирования " + Формат(ГодФормирования,"ЧГ=0") + " г." + Символы.ПС + 
						"Пожалуйста, обновите комплект отчетов.'");
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);		
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект);	
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохраненияФайла.ПолноеИмяФайла = КодФормы + " " + СтруктураРеквизитовФормы.мГод + "г" + ".xml";
		ДиалогСохраненияФайла.Фильтр = РегламентированнаяОтчетностьКлиентСервер.ФильтрДиалоговВыбораИСохраненияРегламентированногоОтчета();	
		ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
		ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите файл'");		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
		ДиалогСохраненияФайла.Показать(ОписаниеОповещения);
	Иначе   
		НачатьПолучениеФайлаССервера(ВыгрузитьВXMLНаСервере(), КодФормы + ".xml"); 
	КонецЕсли;
	   
КонецПроцедуры

&НаКлиенте                                            
Процедура ВыгрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресВременногоХранилища = ВыгрузитьВXMLНаСервере();
		
	ПолноеИмяФайла = Результат[0];
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, АдресВременногоХранилища));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяФайла",ПолноеИмяФайла); 
	Обработчик = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеЗавершение", ЭтотОбъект,ДополнительныеПараметры);
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
	ПараметрыСохранения.Интерактивно = Ложь;
	ФайловаяСистемаКлиент.СохранитьФайлы(Обработчик, ПолучаемыеФайлы, ПараметрыСохранения); 
	
	        
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ТекстЗаголовка = НСтр("ru = 'Данные успешно выгружены в файл'");
	
	СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДополнительныеПараметры.ИмяФайла);
	
	РабочийКаталог = СтруктураФайла.Путь;

	#Если НЕ ВебКлиент Тогда
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка, "file:///" + СтрЗаменить(СокрЛП(РабочийКаталог), "\", "/"),
		РабочийКаталог);
	#Иначе
		Если НЕ ЗначениеЗаполнено(ПолученныеФайлы) Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка,,
		РабочийКаталог);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	Перезаполнить = Истина; // Для выполнения запроса на пересчет данных к пользователю
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения =  РегламентированнаяОтчетностьКлиент.ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Перезаполнить Тогда		
		Если СтрокаФормы.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстВопроса = "Перезаполнить данные формы и ее дополнительных форм?";
		Иначе
			ТекстВопроса = "Перезаполнить данные формы?";
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);
		Оповещение.ДополнительныеПараметры.Вставить("Перезаполнить", Перезаполнить);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);		

	КонецЕсли;		
КонецПроцедуры


&НаКлиенте
Процедура ОчиститьВсе(Команда)
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФормуИПриложения");
КонецПроцедуры


&НаКлиенте
Процедура ОчиститьФорму(Команда)
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	 	
	
	Перезаполнить = ДополнительныеПараметры.Перезаполнить;
	
	Если КодФормы = "Форма300" Тогда 
		Форма300ЗаполнитьАвто(Перезаполнить);
	ИначеЕсли КодФормы = "Форма300_01" Тогда 
		Форма300_01ЗаполнитьАвто(Перезаполнить);
	ИначеЕсли КодФормы = "Форма300_02" Тогда 
		Форма300_02ЗаполнитьАвто(Перезаполнить);	
	ИначеЕсли КодФормы = "Форма300_03" Тогда 
		Форма300_03ЗаполнитьАвто(Перезаполнить);		
	ИначеЕсли КодФормы = "Форма300_04" Тогда 
		Форма300_04ЗаполнитьАвто(Перезаполнить);			
	ИначеЕсли КодФормы = "Форма300_05" Тогда 
		Форма300_05ЗаполнитьАвто(Перезаполнить);				
	ИначеЕсли КодФормы = "Форма300_06" Тогда 
		Форма300_06ЗаполнитьАвто(Перезаполнить);					
	ИначеЕсли КодФормы = "Форма300_07" Тогда 
		Форма300_07ЗаполнитьАвто(Перезаполнить);						
	ИначеЕсли КодФормы = "Форма300_08" Тогда 
		Форма300_08ЗаполнитьАвто(Перезаполнить);						
	ИначеЕсли КодФормы = "Форма300_09" Тогда 
		Форма300_09ЗаполнитьАвто(Перезаполнить);								
	ИначеЕсли КодФормы = "Форма300_10" Тогда 
		Форма300_10ЗаполнитьАвто(Перезаполнить);									
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере()
	РегламентированнаяОтчетность.ДобавитьСтрокуМногострочнойФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	ДобавитьСтрокуНаСервере();
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуНаСервере()
	РегламентированнаяОтчетность.УдалитьСтрокуМногострочнойФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	УдалитьСтрокуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПредыдущаяСтрНаСервере()
	ТекущаяСтраница = ТекущаяСтраница - 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущаяСтр(Команда)
	ПредыдущаяСтрНаСервере();
КонецПроцедуры

&НаСервере
Процедура СледующаяСтрНаСервере()
	ТекущаяСтраница = ТекущаяСтраница + 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СледующаяСтр(Команда)
	СледующаяСтрНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	СохранитьДанные();
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	ОткрытьФормуНастройкиСтраниц();
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыФормы.Вставить("Налогоплательщик",         Налогоплательщик);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, мВыбраннаяФорма, "") + "ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);	

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницу(Команда)
	
	ВыбСтраница = 1;
	
	ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаСтраницы", ЭтаФорма); 
	ПоказатьВводЧисла(ОповещениеВводаЗначений,ВыбСтраница, "Введите номер страницы",5,0);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
// Процедура очистки формы
//
// параметр: ТекИмяФормы - имя очищаемой формы (=КодФормы)
//           ОчиститьВсе - признак вида очистки формы              
//
Процедура Очистить(ТекИмяФормы,ОчиститьВсе = Ложь) Экспорт
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	// Список ячеек, очищать которые не нужно
	Если ОчиститьВсе Тогда
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодВалюты");
	Иначе
		СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
		СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Первоначальная");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Очередная");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Дополнительная");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Ликвидационная");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ПоУведомлению");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Месяц");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Квартал");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Год");		
		СписокПоказателейНеПодлежащихОчистке.Добавить("НомерУведомления");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаУведомления");		
		СписокПоказателейНеПодлежащихОчистке.Добавить("ВнеКонтракта");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ПоКонтракту");
		СписокПоказателейНеПодлежащихОчистке.Добавить("НомерКонтракта");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаКонтракта");            
		СписокПоказателейНеПодлежащихОчистке.Добавить("Пропорциональный");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Раздельный");
		СписокПоказателейНеПодлежащихОчистке.Добавить("СерияСвидетельства");
		СписокПоказателейНеПодлежащихОчистке.Добавить("НомерСвидетельства");
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодВалюты");		
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодНалоговогоОргана");
	КонецЕсли;
	
	Если ТекИмяФормы = "Форма300" И ОчиститьВсе = Истина Тогда		
		мСтруктураЗначений.Очистить();
		СтруктураРеквизитовФормы.мМетодРасчета = УчетнаяПолитикаСервер.ПолучитьМетодОтнесенияНДСВЗачет(Налогоплательщик, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		СтруктураРеквизитовФормы.УдВес = 0;
	КонецЕсли;
	   		
	Если мСтруктураЗначений <> Неопределено И мСтруктураЗначений.Количество() <> 0 Тогда
		НаимФормы = Сред(ТекИмяФормы,6);
		НоваяСтруктураДляУдаления = Новый Структура;
		Для Каждого Элемент Из мСтруктураЗначений Цикл
			 НоваяСтруктураДляУдаления.Вставить(Элемент.Ключ);
		 КонецЦикла;
		 
		Для Каждого Элемент Из НоваяСтруктураДляУдаления Цикл
			Если Найти(Элемент.Ключ,НаимФормы) <> 0 Тогда
				мСтруктураЗначений.Удалить(Элемент.Ключ);
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОчиститьСтруктуруДанныхИТабличноеПолеФормы(ЭтаФорма, ТекИмяФормы, ОчиститьВсе, СписокПоказателейНеПодлежащихОчистке);
	
	// обновим представление списка структурных единиц
	//Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	//	ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СтруктураРеквизитовФормы.мСписокСтруктурныхЕдиниц);
	//КонецЕсли;
	
	СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_03 = Новый Структура;
	
КонецПроцедуры // Очистить()

&НаКлиенте
Процедура ОчиститьРеглОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Форма = ДополнительныеПараметры.Форма;	
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", Форма.КодФормы));
		Вложенность = ДополнительныеПараметры.ОчищатьПриложения;	
		
		ОчиститьРеглОтчетЗавершениеНаСервере(СтрокаФормы.КодФормы, СтрокаФормы.Многострочность, Вложенность)	
	КонецЕсли;		
КонецПроцедуры 	

&НаСервере
Процедура ОчиститьРеглОтчетЗавершениеНаСервере(КодФормы, ПризнакМногострочности, Вложенность) Экспорт		
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, ПризнакМногострочности, Вложенность);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры инициализации отчета и структуры его данных

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;	
		
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
														
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();	
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	      	
	// обход проблемы с обработкой реквизитов ПТД в платформе
	МассивРеквизитовФормы = ЭтотОбъект.ПолучитьРеквизиты();			
	Для Счетчик = 0 По МассивРеквизитовФормы.Количество()-1 Цикл		
		РеквизитФормы = МассивРеквизитовФормы[Счетчик];
		Если РеквизитФормы.ТипЗначения.СодержитТип(Тип("ТабличныйДокумент")) Тогда
			ЭтотОбъект[РеквизитФормы.Имя] = ЭтотОбъект[РеквизитФормы.Имя];	
		КонецЕсли;
	КонецЦикла;		

	мСтруктураЗначений = Новый Структура;
	
	Если СтруктураРеквизитовФормы.Свойство("СформироватьФормуОтчетаАвтоматически") И СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически <> Неопределено Тогда
		
		ЗаполнитьАвтоНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокСтруктурныхЕдиниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");			
	СтруктураРеквизитовФормы.Вставить("НалоговыйКомитет");				
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");		
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");		
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");	
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрг");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);	
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");	
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");		
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");	
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);	
	СтруктураРеквизитовФормы.Вставить("мПериодичность", Параметры.мПериодичность);		
	СтруктураРеквизитовФормы.Вставить("мГод");	
	СтруктураРеквизитовФормы.Вставить("мКвартал");	
	СтруктураРеквизитовФормы.Вставить("мМесяц");		
	
	// индивидуальные параметры формы
	СтруктураРеквизитовФормы.Вставить("мПоддержкаРаботыСоСтруктурнымиПодразделениями", Ложь);		
	СтруктураРеквизитовФормы.Вставить("мМетодРасчета");			
	СтруктураРеквизитовФормы.Вставить("мПропорцИРаздел", Ложь);				
	СтруктураРеквизитовФормы.Вставить("УдВес", 0);				
	СтруктураРеквизитовФормы.Вставить("СтруктураИтоговыхПолей300_03", Новый Структура());				
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы)
	ОргСведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(Налогоплательщик, ДатаПодписи);
	//Если организация не указана то не выводим никаких сведений
	Если ОргСведения = 0 Тогда
		Возврат;
	КонецЕсли;

	// Инициализируем переменные
	РННЮЛ = ""; 	// РНН	
	НаимЮЛПол = ""; // Полное наименование 	
	ИИН_БИН = ""; 	// ИИН_БИН	
	Руководитель = ""; 	// ФИО руководителя				
	КодНалоговогоОргана = ""; // Код налогового органа	
	
	
	// Получаем данные
	ОргСведения.Свойство("РННЮЛ",     			РННЮЛ);
	ОргСведения.Свойство("БИН_ИИН",   			ИИН_БИН);
	ОргСведения.Свойство("ПолноеНаименование", 	НаимЮЛПол);	
	ОргСведения.Свойство("Руководитель",		Руководитель);	
	
                                         		
	// Производим операции связанные с текущей формой отчетности	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН",ИИН_БИН);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"ОргНазв",НаимЮЛПол);
	// Разбиваем название организации
	НазваниеОрганизацииДляРазбиения = НаимЮЛПол;
	НачПозиция = 1;
	Для Шаг = 1 По 3 Цикл
		ДлинаСтроки = ЭтотОбъект[ТекущееИмяФормы + "ПолеТабличногоДокументаСтраница1"].Области["ОргНазв"+Шаг].ТипЗначения.КвалификаторыСтроки.Длина;
		НазОрганизации = Сред(НазваниеОрганизацииДляРазбиения, НачПозиция, ДлинаСтроки); 
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"ОргНазв"+Шаг,НазОрганизации);
		НачПозиция =НачПозиция + ДлинаСтроки;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"Руководитель", Руководитель);
	
	// Дата подачи декларации
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"ДатаПодачи",ДатаПодписи);
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Налогоплательщик.СерияСвидетельстваПоНДС) Тогда		
		ТекстСообщения = НСтр("ru = 'Серия свидетельства по НДС: %1 содержит недопустимые значения. Она должна содержать только цифры.'");		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Налогоплательщик.СерияСвидетельстваПоНДС);			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Налогоплательщик, "СерияСвидетельстваПоНДС");													 		
	Иначе
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекущееИмяФормы,"СерияСвидетельства",Налогоплательщик.СерияСвидетельстваПоНДС);
	КонецЕсли;
		
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Налогоплательщик.НомерСвидетельстваПоНДС) Тогда		
		ТекстСообщения = НСтр("ru = 'Номер свидетельства по НДС: %1 содержит недопустимые значения. Он должна содержать только цифры.'");		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Налогоплательщик.НомерСвидетельстваПоНДС);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Налогоплательщик, "НомерСвидетельстваПоНДС");
	Иначе
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы,"НомерСвидетельства",Налогоплательщик.НомерСвидетельстваПоНДС);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы, "Пропорциональный", "Х");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы, "Раздельный", "");
	Иначе                                    
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы, "Пропорциональный", "");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы, "Раздельный", "Х");  	
	КонецЕсли;

КонецПроцедуры
	
&НаКлиенте
Процедура ЗаполнитьПанель(ПризнакОсновнойФормы,ПризнакМногострочности)
	
		
	Элементы.ФормаВыгрузитьВXML.Видимость = ПризнакОсновнойФормы; 
	Элементы.ГруппаКнопокДействияСоСтрокамиИСтраницами.Видимость = ПризнакМногострочности;	
	//Элементы.ФормаВыгрузитьВExcel.Видимость = ПризнакМногострочности;	
	
		    	
КонецПроцедуры //ЗаполнитьПанель()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтчетномПериоде() Экспорт

	СтрПериодОтчета = ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ФП = истина");
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
		СтруктураРеквизитовФормы.мКвартал = Лев(СтрПериодОтчета,1);
		СтруктураРеквизитовФормы.мМесяц = Неопределено;
	Иначе
		СтруктураРеквизитовФормы.мМесяц = Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		СтруктураРеквизитовФормы.мКвартал = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мГод = Лев(Прав(СтрПериодОтчета,7),4);
		
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьПараметры(ТекущееИмяФормы) Экспорт
	Форма = РеквизитФормыВЗначение("мСписокФормБезИерархии").Строки.Найти(ТекущееИмяФормы, "КодФормы");
	
	Если Форма.Многострочность = 1 Тогда // заполнение структуры шапки(подвала) для многострочных форм
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН", Налогоплательщик.ИдентификационныйНомер, Ложь);
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Квартал", СтруктураРеквизитовФормы.мКвартал, Ложь);
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год", СтруктураРеквизитовФормы.мГод, Ложь);
		
		//Если ТекущееИмяФормы = "Форма300_03" Тогда
		//	//заполним итоговые поля
		//	Для Каждого Элемент Из СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_03 Цикл
		//		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, Элемент.Ключ, Элемент.Значение, Ложь);
		//	КонецЦикла;
		//КонецЕсли;
		
	Иначе //обычная форма
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год", СтруктураРеквизитовФормы.мГод);
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Квартал", СтруктураРеквизитовФормы.мКвартал);
				
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН", Налогоплательщик.ИдентификационныйНомер);			
		
	КонецЕсли;
	
	Если ТекущееИмяФормы = Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7) Тогда 
		Если  СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда 
			
			//устанавливаем значения по умолчанию		
			ЗаполнитьВидРасчета("Очередная");
		КонецЕсли;
		//заполним основные сведения об организации
		ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы);	
	КонецЕсли;
		
КонецПроцедуры	

&НаСервере
//Процедура выполняет выбор процедуры расчета.
//ВыборРасчета выполняется при восстановлении данных, при изменении поля табличного документа
//
//Параметры:    ТекФорма - имя текущей формы
//              Индекс - индекс строки для многострочной формы
//              Показатель - имя ячейки, откуда была вызвана процедура расчета многострочной
//                           формы, без указания номера строки (например, без "__1")
//
Процедура ВыборРасчета(ТекФорма, Индекс = Неопределено, Показатель = Неопределено) Экспорт
	Если ТекФорма = "Форма300" Тогда
		Форма300РасчетНаСервере(Индекс, Показатель);
	ИначеЕсли ТекФорма = "Форма300_01" Тогда
		Форма300_01РасчетНаСервере(Индекс, Показатель);
	ИначеЕсли ТекФорма = "Форма300_02" Тогда
		Форма300_02РасчетНаСервере(Индекс, Показатель);	
	ИначеЕсли ТекФорма = "Форма300_03" Тогда
		Форма300_03РасчетНаСервере(Индекс, Показатель);	
	ИначеЕсли ТекФорма = "Форма300_04" Тогда
		Форма300_04РасчетНаСервере(Индекс, Показатель);		
	ИначеЕсли ТекФорма = "Форма300_05" Тогда
		Форма300_05РасчетНаСервере(Индекс, Показатель);			
	ИначеЕсли ТекФорма = "Форма300_06" Тогда
		Форма300_06РасчетНаСервере(Индекс, Показатель);				
	КонецЕсли;		
КонецПроцедуры // ВыборРасчета()

&НаСервере
Процедура РазделыОтчетаПриАктивизацииСтрокиНаСервере(НовыйКодФормы, НовыйПризнакМногострочность)		
	
	//проверим, что стояли не на основной, итоги передаем только когда переходим из доп.форм
	ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	Если ТекФорма <> Неопределено И Не ТекФорма.ПризнакОсновной Тогда
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы, Истина);		
	КонецЕсли;
	// передаем данные в структуру
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	
			
	// установим новые значения реквизитам формы
	ЭтаФорма.КодФормы = НовыйКодФормы;	
	Если  НовыйПризнакМногострочность Тогда
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидРасчета(ВидРасчета)
	ТекИмяФормы = "Форма300";
	//сначала очищаем поля, если были проставлены уже отметки
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"Первоначальная","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"Очередная","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"Дополнительная","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"ПоУведомлению","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"Ликвидационная","");
	
	Если ВидРасчета = "Первоначальная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"Первоначальная","Х");
	ИначеЕсли ВидРасчета = "Очередная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"Очередная","Х");		
	ИначеЕсли ВидРасчета = "Дополнительная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"Дополнительная","Х");		
	ИначеЕсли ВидРасчета = "ПоУведомлению" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"ПоУведомлению","Х");		
	ИначеЕсли ВидРасчета = "Ликвидационная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"Ликвидационная","Х");		
	КонецЕсли;
	
	Если ВидРасчета = "ПоУведомлению" Тогда
		Форма300ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Ложь;
		Форма300ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита = Ложь;
	Иначе
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"НомерУведомления","");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"ДатаУведомления","");
		
		Форма300ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Истина;
		Форма300ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита = Истина;
	КонецЕсли;
	
	Модифированность = Истина;
	
КонецПроцедуры // ЗаполнитьВидРасчета()

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
            
    Перем СтруктураГруппы; 
    
    Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
        ТекстСообщения = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");            
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);                
                
        Возврат Ложь;
        
    КонецЕсли;
            
    СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
    СтруктураРеквизитовФормы.мРежимПечати = Истина;
    
    Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
        ВыборРасчета(КодФормы, Неопределено, Неопределено);
    КонецЕсли; 

    РегламентированнаяОтчетность.СформироватьСписокПечатаемыхЛистов(ЭтаФорма);
                 
        
    Возврат Истина;
    
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуНастройкиСтраниц()
	
// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРаздел = Элементы.РазделыОтчета.ТекущиеДанные.Страницы;		
	КонецЕсли;
	
	Для Каждого ТекФорма ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",ТекФорма.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			ТекущаяСтрокаСписка.Выгружать               = ТекФорма.Выгружать;
			ТекущаяСтрокаСписка.ПоказатьСтраницу        = ТекФорма.ПоказатьСтраницу;			
			ТекущаяСтрокаСписка.АвтополучениеИтогов     = ТекФорма.АвтополучениеИтогов;  
			ТекущаяСтрокаСписка.АвтоЗаполнение          = ТекФорма.АвтоЗаполнение;  
		КонецЕсли;		   
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокФормДерева",СписокФормДерева);
	
	ДопПараметры = Новый Структура("ТекущийРаздел",ТекущийРаздел);
	
	ОповещениеПослеЗакрытияФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастройкиСтраниц",ЭтотОбъект,ДопПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.НастройкиОтчета",ПараметрыФормы, ЭтаФорма,,,,ОповещениеПослеЗакрытияФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьнаСервере();
	РегламентированнаяОтчетность.СохранитьОтчет(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()	
	РегламентированнаяОтчетность.ВосстановитьСохраненныйОтчет(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьнаСервере();
		Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;	
КонецПроцедуры   

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиСтраниц(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьДанныеФормы(РезультатЗакрытия, СписокФормДерева);
	
	Модифицированность = Истина;
	
	//обновим мСписокФормБезИерархии
	Для Каждого СтрокаФормы ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",СтрокаФормы.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			СтрокаФормы.Выгружать               = ТекущаяСтрокаСписка.Выгружать;
			СтрокаФормы.ПоказатьСтраницу        = ТекущаяСтрокаСписка.ПоказатьСтраницу;			
			СтрокаФормы.АвтополучениеИтогов     = ТекущаяСтрокаСписка.АвтополучениеИтогов;  
			СтрокаФормы.АвтоЗаполнение          = ТекущаяСтрокаСписка.АвтоЗаполнение;  
		КонецЕсли;			
	КонецЦикла; 	

	Если ДополнительныеПараметры.Свойство("ТекущийРаздел") И НЕ ДополнительныеПараметры.ТекущийРаздел = Неопределено Тогда  		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(РазделыОтчета, Новый Структура("СписокФормДереваСтраницы",ДополнительныеПараметры.ТекущийРаздел));
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;			
	КонецЕсли;  	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыФормыНаКлиенте(Параметры) Экспорт
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	ЗаполнитьСведенияОбОтчетномПериоде();
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);		
	КонецЦикла	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормы(ТекФорма, Параметры)
	
	ЗаполнитьЗначенияСвойств(ТекФорма.СтруктураРеквизитовФормы, Параметры);
		
	ТекФорма.Налогоплательщик        						 = Параметры.Налогоплательщик;	
	ТекФорма.мСписокСтруктурныхЕдиниц						 = Параметры.мСписокСтруктурныхЕдиниц;
	ТекФорма.ПредставлениеСпискаСтруктурныхЕдиниц			 = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(Параметры.мСписокСтруктурныхЕдиниц);
	
	//индивидуальные значения
	//при смене налогоплательщика нужно получать метод расчета
	ТекФорма.СтруктураРеквизитовФормы.мМетодРасчета 		= ПолучитьМетодОтнесенияНДСВЗачет(ТекФорма.Налогоплательщик, ТекФорма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМетодОтнесенияНДСВЗачет(Налогоплательщик, Дата)
	Возврат УчетнаяПолитикаСервер.ПолучитьМетодОтнесенияНДСВЗачет(Налогоплательщик, Дата);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции выгрузки данных отчета в XML

&НаСервере
//Выгружает данные отчета в формат XML
// Параметры:
//   ИмяФайла - файл, куда будет идти запись текста XML.
//   Объект - объект регламентированного отчета.
//
Функция ВыгрузитьОтчетВXMLДляСОНО300(Объект, ВыдаватьСообщение = Истина) Экспорт
   	Префикс = Прав(Объект.мВыбраннаяФорма,7);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("tmp");
	
	// запишем общие атрибуты (code, version) и создадим элемент form
	Запись = Новый ЗаписьXML;		
	Запись.ОткрытьФайл(ИмяВременногоФайла,"UTF-8");
	Запись.ЗаписатьОбъявлениеXML();
	
	// Запишем корневой элемент
	Запись.ЗаписатьНачалоЭлемента("fno");
	
	МакетВыгрузки = Объект.РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("ВыгрузкаВXML");
    МногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, ЭтаФорма.КодФормы);
	
	ТаблОбщиеРеквизиты = Новый ТаблицаЗначений;
	ТаблОбщиеРеквизиты.Колонки.Добавить("ИмяАтрибута");
	ТаблОбщиеРеквизиты.Колонки.Добавить("ЗначениеАтрибута");
	
	ОбластьОбщихРеквизитов = МакетВыгрузки.Область("ОбщиеРеквизиты" + Префикс);
	Для Ном = ОбластьОбщихРеквизитов.Верх По ОбластьОбщихРеквизитов.Низ Цикл
		Строка = ТаблОбщиеРеквизиты.Добавить();
		Строка.ИмяАтрибута 		  = СокрП(МакетВыгрузки.Область(Ном, 1).Текст);
		Строка.ЗначениеАтрибута   = СокрП(МакетВыгрузки.Область(Ном, 2).Текст);		
	КонецЦикла;                           	
	
	// Запишем атрибуты корневого элемента
	Для Каждого Строка Из ТаблОбщиеРеквизиты Цикл
		Запись.ЗаписатьАтрибут(Строка.ИмяАтрибута,Строка.ЗначениеАтрибута);			  
	КонецЦикла;
	
	// создадим таблицу для выгрузки
	ТаблицаВыгрузки = Новый ТаблицаЗначений;
	ТаблицаВыгрузки.Колонки.Добавить("Форма");
	ТаблицаВыгрузки.Колонки.Добавить("Страница");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяАтрибута");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяЯчейки");
	ТаблицаВыгрузки.Колонки.Добавить("КоличествоROW");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяФормы");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяЛиста");
	ТаблицаВыгрузки.Колонки.Добавить("Отображение");
	ТаблицаВыгрузки.Колонки.Добавить("ВыгружатьНулевыеЗначения");
	
	ТаблицаВыгрузки.Колонки.Добавить("КодФормы");
	ТаблицаВыгрузки.Колонки.Добавить("Выгружать");
	ТаблицаВыгрузки.Колонки.Добавить("Многострочность");
	ТаблицаВыгрузки.Колонки.Добавить("ЗаголовокФормы"); 
	ТаблицаВыгрузки.Колонки.Добавить("КоличествоНаЛисте");    
	ТаблицаВыгрузки.Колонки.Добавить("Значение");    
	
	ОбластьВыгрузки = МакетВыгрузки.Область("Выгрузка" + Префикс);
	СписокФормБезИерархии = РеквизитФормыВЗначение("мСписокФормБезИерархии");
	ТекущееИмяФормы = Неопределено;
	Для Ном = ОбластьВыгрузки.Верх По ОбластьВыгрузки.Низ Цикл
		Строка = ТаблицаВыгрузки.Добавить();
		Строка.Форма 	       			= СокрП(МакетВыгрузки.Область(Ном, 1).Текст);
		Строка.Страница        			= СокрП(МакетВыгрузки.Область(Ном, 2).Текст);		
		Строка.ИмяАтрибута     			= СокрП(МакетВыгрузки.Область(Ном, 3).Текст);		
		Строка.ИмяЯчейки      	 		= СокрП(МакетВыгрузки.Область(Ном, 4).Текст);		
		Строка.КоличествоROW   			= СокрП(МакетВыгрузки.Область(Ном, 5).Текст);		
		Строка.ИмяФормы        			= СокрП(МакетВыгрузки.Область(Ном, 6).Текст);		
		Строка.ИмяЛиста        			= СокрП(МакетВыгрузки.Область(Ном, 7).Текст);		
		Строка.Отображение     			= СокрП(МакетВыгрузки.Область(Ном, 8).Текст);		
		
		Строка.ВыгружатьНулевыеЗначения = ?(СокрП(МакетВыгрузки.Область(Ном, 9).Текст) = "1", Истина, Ложь);		
		
		НовоеИмяФормы = Строка.ИмяФормы;
		Если НовоеИмяФормы <> ТекущееИмяФормы Тогда
			Форма = СписокФормБезИерархии.Строки.Найти(Строка.ИмяФормы, "ИмяФормы");
		КонецЕсли;
		
		Если Форма <> Неопределено Тогда
			Строка.КодФормы  		 = Форма.КодФормы;
			Строка.Выгружать  		 = Форма.Выгружать;
			Строка.Многострочность   = Форма.Многострочность;
			Строка.ЗаголовокФормы    = Форма.ЗаголовокФормы;
			Строка.КоличествоНаЛисте = Форма.КоличествоНаЛисте;
			Строка.Значение  		 = Форма.Значение;
			
		КонецЕсли;
		ТекущееИмяФормы = Строка.ИмяФормы;
	КонецЦикла;                           	
	
	// выгрузка в XML 
	КоличествоСтрокВТаблице = ТаблицаВыгрузки.Количество();
	НомерСтроки = 0;
	
	ТекущаяФорма = Неопределено;
	ТекущаяСтраница = Неопределено;
	
	Пока Истина Цикл
		Если НомерСтроки >= КоличествоСтрокВТаблице Тогда
			Прервать;
		КонецЕсли; 
		ВыгрузитьСтрокуВXML300(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки, ТекущаяФорма, ТекущаяСтраница, МногострочнаяСтруктура);			
		НомерСтроки = НомерСтроки + 1;                                                                                      		
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();		// </form> 
	
	Запись.ЗаписатьКонецЭлемента();  // fno
		
	Запись.Закрыть();
	
	// данный текст модуля добавлен для совместимости с СОНО (в СОНО для UTF-8 нет BOM поля)
	ТекстДок = Новый ТекстовыйДокумент;
    ТекстДок.Прочитать(ИмяВременногоФайла,"windows-1251");
    Строка = ТекстДок.ПолучитьСтроку(1);
    ТекстДок.ЗаменитьСтроку(1,Прав(Строка,СтрДлина(Строка)-3));
    ВыбФайл = Новый Файл(ИмяВременногоФайла);
    ТекстДок.Записать(ВыбФайл.Путь+ВыбФайл.ИмяБезРасширения+ВыбФайл.Расширение,"windows-1251");
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла));
	Если ВыдаватьСообщение Тогда    		
		//выдаем пользователю сообщение о конце выгрузки
		РегламентированнаяОтчетностьКлиентСервер.ВыдатьОтветПриВыгрузке();
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат АдресХранилища
КонецФункции // ВыгрузкаОтчетаВXMLДляСОНО()

&НаСервере
// Формирует построчно структуру XML файла из макета "ВыгрузкаВXML"
//
Процедура ВыгрузитьСтрокуВXML300(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки, ТекущаяФорма = Неопределено, ТекущаяСтраница = Неопределено, МногострочнаяСтруктура)
	СтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки);
	НоваяФорма = СтрокаВыгрузки.Форма; 
	НоваяСтраница = СтрокаВыгрузки.Страница; 
	
	Если НЕ НоваяФорма = ТекущаяФорма Тогда		
		Если НЕ ТекущаяФорма = Неопределено Тогда
			Запись.ЗаписатьКонецЭлемента();			// </form>
		КонецЕсли;
		Запись.ЗаписатьНачалоЭлемента("form");		
		Запись.ЗаписатьАтрибут("name",СтрокаВыгрузки.Форма);
		МногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, НоваяФорма); 
	КонецЕсли;                                       	
	
	Если СтрокаВыгрузки.Многострочность <> Неопределено И СтрокаВыгрузки.Многострочность = 1 Тогда 
		ВыгрузитьМногострочнуюФорму300(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки, МногострочнаяСтруктура);
	// проверим многострочное ли значение
	ИначеЕсли ЗначениеЗаполнено(СтрокаВыгрузки.КоличествоROW) И СтрокаВыгрузки.КоличествоROW <> "0" Тогда  // для обычных форм
		// если в обычной форме встретилась многострочность 
		КоличествоПовторений = Число(СтрокаВыгрузки.КоличествоROW);
		Для Н = 1 По КоличествоПовторений Цикл 				
			Запись.ЗаписатьНачалоЭлемента("row");
			СтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки);
			Если Н = 1 Тогда
				ТаблицаМногострочныхТегов = ТаблицаВыгрузки.СкопироватьКолонки();
				НоваяСтрока = ТаблицаМногострочныхТегов.Добавить();			
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыгрузки);
				
				// Проверим многострочная ли следующая строка
				СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
				Пока ЗначениеЗаполнено(СледСтрокаВыгрузки.КоличествоROW) И СледСтрокаВыгрузки.КоличествоROW <> "0" Цикл
					НомерСтроки = НомерСтроки+1;
					НоваяСтрока = ТаблицаМногострочныхТегов.Добавить();			
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СледСтрокаВыгрузки);
					СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
				КонецЦикла;   				
			КонецЕсли;
			
			Для Каждого МногСтрока Из ТаблицаМногострочныхТегов Цикл
				ЗаписатьЗначениеЭлемента300(Запись, МногСтрока,,МногострочнаяСтруктура);	
			КонецЦикла;    			
			Запись.ЗаписатьКонецЭлемента();			// </row>
		КонецЦикла;			
	Иначе
		ЗаписатьЗначениеЭлемента300(Запись, СтрокаВыгрузки,,МногострочнаяСтруктура);
	КонецЕсли;	      	
	
	ТекущаяФорма = НоваяФорма;
	ТекущаяСтраница = НоваяСтраница;
	
КонецПроцедуры // ВыгрузитьСтрокуВXML300()

&НаСервере
// Выгружает многострочные формы в XML
//
Процедура ВыгрузитьМногострочнуюФорму300(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки, МногострочнаяСтруктура)
	
	Перем СтруктураГруппы;
	
	СтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки);	
	
	Если СтрокаВыгрузки.КоличествоНаЛисте = 1 Тогда  // форма многостраничная
		
		// для многострочной = одностраничной
		
		НачальнаяСтрока = НомерСтроки;
		КонечнаяСтрока = 0;
		
		ТекущаяФорма = СтрокаВыгрузки.Форма;
		СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
		НоваяФорма = СледСтрокаВыгрузки.Форма;
		Пока НоваяФорма = ТекущаяФорма Цикл
			НомерСтроки = НомерСтроки+1;
			
			ТекущаяФорма = СледСтрокаВыгрузки.Форма;
			Если НомерСтроки+1 < КоличествоСтрокВТаблице Тогда
				СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);						
				НоваяФорма = СледСтрокаВыгрузки.Форма;
				КонечнаяСтрока = НомерСтроки;
			Иначе
				НоваяФорма = Неопределено;
				КонечнаяСтрока = НомерСтроки;
			КонецЕсли;
		КонецЦикла;
        		
		МногСтруктура =  РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, СтрокаВыгрузки.КодФормы);
		
		КоличествоЗаписей = 0;
		
		Для Каждого КлючИЗначение Из МногСтруктура Цикл
			ТаблицаСтрокГруппы = КлючИЗначение.Значение.Строки;
			КоличествоЗаписей =  ТаблицаСтрокГруппы.Количество();
			Прервать;
		КонецЦикла;
		
		ВсегоСтр = 0;
		
		Если КоличествоЗаписей <= 1 Тогда 
			ВсегоСтр = 0;
		Иначе 
			ВсегоСтр = КоличествоЗаписей - 1;	
		КонецЕсли;
		
		ОдинШагНазад = Истина;
		Строка = 0; 
		ОдинШаг = Истина;
			
		Для ШагФорм = 0 По ВсегоСтр Цикл 
			
			Для Шаг = НачальнаяСтрока По КонечнаяСтрока Цикл  
				
				Если Шаг = КонечнаяСтрока Тогда 
					Прервать;
				КонецЕсли;
				
				СтрокаВыгрузкиТек = ТаблицаВыгрузки.Получить(Шаг);
				ТекущаяФорма 	  = СтрокаВыгрузкиТек.Форма; 
				ТекущаяСтраница   = СтрокаВыгрузкиТек.Страница;
				
				СтрокаВыгрузкиСлед = ТаблицаВыгрузки.Получить(Шаг + Строка);
				
				Если ОдинШаг Тогда 
					Строка = 1; 
					ОдинШаг = Ложь;
				КонецЕсли;

				НоваяФорма 		   = СтрокаВыгрузкиСлед.Форма; 
				НоваяСтраница      = СтрокаВыгрузкиСлед.Страница; 			
											
				Если НЕ НоваяФорма = ТекущаяФорма Тогда		
					Запись.ЗаписатьКонецЭлемента();			// </form>
					Запись.ЗаписатьНачалоЭлемента("form");					
					Запись.ЗаписатьАтрибут("name",СтрокаВыгрузкиСлед.Форма);
				КонецЕсли;                                       	
				НомерЛиста = Новый Структура;
				НомерЛиста.Вставить("НомерЛиста",ШагФорм);
				ЗаписатьЗначениеЭлемента300(Запись, СтрокаВыгрузкиСлед, НомерЛиста,МногострочнаяСтруктура);
			КонецЦикла;
			Если ОдинШагНазад Тогда 
				НачальнаяСтрока = НачальнаяСтрока - 1;
				ОдинШагНазад = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	Иначе // форма многострочная
		
		// Определяем одинаковое ли количество строк на всех страницах формы и создаем таблицу значений
		// например, в форме 300.07 и 300.08 одинаковое количество
		// а в других может быть неодинаковое - и там другой механизм выгрузки по строкам
		ОдинаковоеКоличествоСтрок = Истина;
		КоличествоСтрокНаЛисте = 0;
		
		ТаблицаМногострочнойФормы = ТаблицаВыгрузки.СкопироватьКолонки();
		НоваяСтрока = ТаблицаМногострочнойФормы.Добавить();			
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыгрузки);
		
		ТекущаяФорма = СтрокаВыгрузки.Форма;
		СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
		НоваяФорма = СледСтрокаВыгрузки.Форма;
		Пока НоваяФорма = ТекущаяФорма Цикл
			НомерСтроки = НомерСтроки+1;
			НоваяСтрока = ТаблицаМногострочнойФормы.Добавить();			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СледСтрокаВыгрузки);
			Если ЗначениеЗаполнено(СледСтрокаВыгрузки.КоличествоROW) И СледСтрокаВыгрузки.КоличествоROW <> "0" Тогда
				ТекКоличествоСтрокНаЛисте = Число(СледСтрокаВыгрузки.КоличествоROW);
				Если КоличествоСтрокНаЛисте <> 0 И КоличествоСтрокНаЛисте <> ТекКоличествоСтрокНаЛисте Тогда
					 ОдинаковоеКоличествоСтрок = Ложь;
				КонецЕсли;
				КоличествоСтрокНаЛисте = Число(СледСтрокаВыгрузки.КоличествоROW);
			КонецЕсли;
			ТекущаяФорма = СледСтрокаВыгрузки.Форма;
			Если НомерСтроки+1 < КоличествоСтрокВТаблице Тогда
				СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);						
				НоваяФорма = СледСтрокаВыгрузки.Форма;
			Иначе
				НоваяФорма = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		//Выгружаем многострочные данные, у которых одинаковое количество строк
		//Если ОдинаковоеКоличествоСтрок Тогда //как для 300.07, 300.08 и большинства других многострочных
			
			// Определим количество <sheetGroup>						
			МногСтруктура =  РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, СтрокаВыгрузки.КодФормы);
			КоличествоЗаписей = 0;
			Для Каждого КлючИЗначение Из МногСтруктура Цикл
				ТаблицаСтрокГруппы = КлючИЗначение.Значение.Строки;
				КоличествоЗаписей =  ТаблицаСтрокГруппы.Количество();
				Прервать;
			КонецЦикла;
		
			ВсегоСтр = 1;
			
			Если КоличествоЗаписей = 0 Тогда // форма не заполнена, то выгружаем пустые теги
				ВсегоСтр = 1;
			КонецЕсли;
			
			Для КолСтр = 1 По ВсегоСтр Цикл // sheetgroup
				ТекущаяСтраница = СтрокаВыгрузки.Страница;
				Для Ном = 0 По ТаблицаМногострочнойФормы.Количество()-1 Цикл 
					СтрокаТаблицы = ТаблицаМногострочнойФормы[Ном];				
					НоваяСтраница = СтрокаТаблицы.Страница;
					// если перешли на новую страницу
					Если ЗначениеЗаполнено(СтрокаТаблицы.Отображение) И КолСтр <> Число(СтрокаТаблицы.Отображение) Тогда
						Продолжить;
					КонецЕсли;
					// проверим элемент это или нет
					Если Лев(СтрокаТаблицы.ИмяАтрибута,1) = "#" Тогда
						Атрибут = Сред(СтрокаТаблицы.ИмяАтрибута,2);
						// опеределим начальный или конечный элемент
						Если Лев(Атрибут,1) = "/" Тогда // это конечный элемент							
							Запись.ЗаписатьКонецЭлемента();
						Иначе // это начальный
							Запись.ЗаписатьНачалоЭлемента(Атрибут);
						КонецЕсли;						
					ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.КоличествоROW) И СтрокаТаблицы.КоличествоROW <> "0" Тогда
						
						КоличествоПовторений = МногСтруктура.ЛистA.Строки.Количество();
						
						Для Н = 1 По КоличествоПовторений Цикл // ТаблицаМногострочнойФормы.Количество() Цикл 
							Запись.ЗаписатьНачалоЭлемента("row");							
							Если Н = 1 Тогда
								ТаблицаМногострочныхТегов = ТаблицаМногострочнойФормы.СкопироватьКолонки();
								НоваяСтрока = ТаблицаМногострочныхТегов.Добавить();			
								ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
								
								// Проверим многострочная ли следующая строка
								СледСтрокаВыгрузки = ТаблицаМногострочнойФормы.Получить(Ном+1);
								Пока ЗначениеЗаполнено(СледСтрокаВыгрузки.КоличествоROW) И СледСтрокаВыгрузки.КоличествоROW <> "0" Цикл
									Ном = Ном+1;
									НоваяСтрока = ТаблицаМногострочныхТегов.Добавить();			
									ЗаполнитьЗначенияСвойств(НоваяСтрока, СледСтрокаВыгрузки);
									Если Ном + 1 = ТаблицаМногострочнойФормы.Количество() Тогда
										Прервать;
									КонецЕсли;
									СледСтрокаВыгрузки = ТаблицаМногострочнойФормы.Получить(Ном+1);
								КонецЦикла;   				
							КонецЕсли;
							Для Каждого МногСтрока Из ТаблицаМногострочныхТегов Цикл
								СтруктураПараметров = Новый Структура;
								СтруктураПараметров.Вставить("КоличествоГруппСтраниц", КолСтр);
								СтруктураПараметров.Вставить("НомерЗаписи", Н);
								ЗаписатьЗначениеЭлемента300(Запись, МногСтрока, СтруктураПараметров, МногСтруктура);	
							КонецЦикла;    			
												
							Запись.ЗаписатьКонецЭлемента();			// </row>
						КонецЦикла;	
					Иначе			
						СтруктураПараметров = Новый Структура;
						СтруктураПараметров.Вставить("КоличествоГруппСтраниц", КолСтр);
						ЗаписатьЗначениеЭлемента300(Запись, СтрокаТаблицы, СтруктураПараметров, МногСтруктура);					
					КонецЕсли;				 
					СтрокаТаблицы = ТаблицаМногострочнойФормы[Ном];				
					ТекущаяСтраница = СтрокаТаблицы.Страница;
				КонецЦикла; 
			КонецЦикла; 				
		
	КонецЕсли;	
	
КонецПроцедуры // ВыгрузитьМногострочнуюФорму300()

&НаСервере
// Записываем значение в поле field из структуры хранения данных
//
Процедура ЗаписатьЗначениеЭлемента300(Запись, СтрокаВыгрузки, СтруктураПараметров = Неопределено, МногСтруктура)
	
	Запись.ЗаписатьНачалоЭлемента("field");
	Запись.ЗаписатьАтрибут("name",СтрокаВыгрузки.ИмяАтрибута);
	// Выгрузим значение ячейки, если оно есть в форме
	ИмяЯчейки = СтрокаВыгрузки.ИмяЯчейки;
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		//получаем и записываем значение из отчета		
		Если СтрокаВыгрузки.Выгружать = 1 Тогда
			Если СтрокаВыгрузки.Многострочность Тогда
				// определим имя Листа по имени страницы
				ИмяЛиста = СтрокаВыгрузки.ИмяЛиста;
				СтруктураГруппы = Неопределено;				
				Если ЗначениеЗаполнено(ИмяЛиста) И МногСтруктура.Свойство(ИмяЛиста) Тогда            					
					МногСтруктура.Свойство(ИмяЛиста,СтруктураГруппы);				
				Иначе					
					ТекстСообщения = НСтр("ru = '%1:Не заполнено ""Имя листа"" или ""Имя листа"" указано неверно для ячейки %2 в макете для выгрузки значения в XML!'");								
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаВыгрузки.КодФормы, ИмяЯчейки);			
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
				КонецЕсли;
					
				Если ИмяЯчейки = "НомерСтраницы" Тогда
					КолСтр = Неопределено;
					СтруктураПараметров.Свойство("КоличествоГруппСтраниц", КолСтр);
					Запись.ЗаписатьТекст(XMLСтрока(КолСтр));
				// заполнения многостраничных данных	
				ИначеЕсли СтрокаВыгрузки.КоличествоНаЛисте = 1 Тогда          
					Если СтруктураГруппы <> Неопределено Тогда
						 НомерЛиста = СтруктураПараметров.НомерЛиста;
						 СтрокаЗначений = СтруктураГруппы.Строки[НомерЛиста];
						 Попытка
							 Строка = СтрокаЗначений[ИмяЯчейки];
						 Исключение
							 Строка = Неопределено;
						 КонецПопытки;
						 Если Строка <> Неопределено Тогда
							 Значение = Строка;
							 Значение = ПривестиЗначениеКФорматуСОНО300(Значение); //СтрокаФорматов);
				    		 Запись.ЗаписатьТекст(XMLСтрока(Значение));
						 КонецЕсли;
					 КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(СтрокаВыгрузки.КоличествоROW) И СтрокаВыгрузки.КоличествоROW <> "0" Тогда  // многострочная часть row
					КоличествоНаЛисте = Число(СтрокаВыгрузки.КоличествоROW);
					НомерЗаписиНаЛисте = Неопределено;
					СтруктураПараметров.Свойство("НомерЗаписи", НомерЗаписиНаЛисте);
					КолСтр = Неопределено;
					СтруктураПараметров.Свойство("КоличествоГруппСтраниц", КолСтр);										
					Если СтруктураГруппы <> Неопределено Тогда
						 ТаблицаСтрокГруппы = СтруктураГруппы.Строки;						 					
						 // рассчитаем индекс строки и проверим есть ли такая строка в таблице данных
						 ИндексСтроки = НомерЗаписиНаЛисте + (КолСтр-1)* КоличествоНаЛисте - 1;
						 Если ИндексСтроки < ТаблицаСтрокГруппы.Количество() Тогда  // строк в таблице может быть меньше, чем выгружается в XML
							 Строка = ТаблицаСтрокГруппы.Получить(ИндексСтроки);
							 Если Строка <> Неопределено Тогда // найдена строка для выгрузки значения
								 Если ТаблицаСтрокГруппы.Колонки.Найти(ИмяЯчейки) <> Неопределено Тогда 
									 Значение = Строка[ИмяЯчейки];
									 // для числовых ячеек будем выгружать 0. Так как это обычно требуется в ФЛК суммовых полей
									 Значение = ПривестиЗначениеКФорматуСОНО300(Значение, СтрокаВыгрузки.ВыгружатьНулевыеЗначения); 
					    		 	 Запись.ЗаписатьТекст(XMLСтрока(Значение));
								 КонецЕсли;
							 КонецЕсли;
						 КонецЕсли;
					КонецЕсли;
				Иначе // шапка или подвал
					Если СтруктураГруппы <> Неопределено Тогда
						 ОбщиеЭлементыГруппы = СтруктураГруппы.ШапкаИПодвал;
						 Строка = ОбщиеЭлементыГруппы.Найти(ИмяЯчейки,"ИмяОбласти");
						 Если Строка <> Неопределено Тогда
							 Значение = Строка.Значение;
							 Значение = ПривестиЗначениеКФорматуСОНО300(Значение); //СтрокаФорматов);
				    		 Запись.ЗаписатьТекст(XMLСтрока(Значение));
						 Иначе
							 ТекстСообщения = НСтр("ru = 'Не найден в структуре хранения данных показатель %1 для формы %2'");								
							 ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяЯчейки , СтрокаВыгрузки.Форма);			
							 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
							 
							 Значение = "";
						 КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТаблицаДанных = СтрокаВыгрузки.Значение;
				СтрокаОбласти = ТаблицаДанных.Найти(ИмяЯчейки,"ИмяОбласти");
				Если СтрокаОбласти <> Неопределено Тогда
					Значение = СтрокаОбласти.Значение;
					Значение = ПривестиЗначениеКФорматуСОНО300(Значение); //СтрокаФорматов);
				    Запись.ЗаписатьТекст(XMLСтрока(Значение));
				Иначе					
					ТекстСообщения = НСтр("ru = 'Не найдена ячейка %1  для выгрузки значения в XML'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяЯчейки);			
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	Запись.ЗаписатьКонецЭлемента();			// </field>

КонецПроцедуры // ЗаписатьЗначениеЭлемента300()

&НаСервере
//Приводит значение к нужному формату для выгрузки в формате XML
//
Функция ПривестиЗначениеКФорматуСОНО300(Значение, ВыгружатьНулевыеЗначения = Ложь) 
	
	Если Врег(Значение) = "Х" ИЛИ Врег(Значение) = "X" Тогда
		Значение = Истина;
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Если Значение = Дата('00010101') Тогда
			Значение = "";
		Иначе
			Значение = Лев(Значение,10);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") И Значение = 0 И НЕ ВыгружатьНулевыеЗначения Тогда
		Значение = "";
	ИначеЕсли Значение = Неопределено И ВыгружатьНулевыеЗначения Тогда	
		Значение = 0;
	КонецЕсли;
	
	Возврат Значение;	
	
КонецФункции // ПривестиЗначениеКФорматуСОНО300()

&НаСервере
Функция ВыгрузитьВXMLНаСервере(ВыдаватьСообщение = Ложь)
		
	Возврат ВыгрузитьОтчетВXMLДляСОНО300(ЭтотОбъект, ВыдаватьСообщение);	

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

&НаКлиенте
Процедура СохранитьДанные() Экспорт
	СохранитьНаСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
КонецПроцедуры

&НаСервере
Функция ИсключитьЗапрещенныеСимволыИзНомераСФ(НомерСФ)
	Результат = НомерСФ;	
	// приведем номер СФ в соответствии с настройками
	Если ИсключатьНецифровыеСимволы Тогда
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерСФ) Тогда			
			НовыйНомерСФ = "";
			Для Н=1 По СтрДлина(НомерСФ) Цикл
				ПервСимвол = Сред(НомерСФ,Н,1);
				КодСимвола = КодСимвола(ПервСимвол);
				Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
					ПервСимвол = "";
				КонецЕсли;
				НовыйНомерСФ = Строка(НовыйНомерСФ) + Строка(ПервСимвол);
			КонецЦикла;              							 			
		КонецЕсли;						
		Результат  = НовыйНомерСФ;
	КонецЕсли;
	
	Если ИсключатьЛидирующиеНули Тогда
		НовыйНомерСФ = "";
		Для Н=1 По СтрДлина(Результат) Цикл
			ПервСимвол = Сред(Результат,Н,1);
			КодСимвола = КодСимвола(ПервСимвол);
			Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
				// добавляем буквенный символ как он есть
			ИначеЕсли КодСимвола = 48 Тогда //если равен нулю
				ПервСимвол = "";
			Иначе // если встретили любое число, то берем весь оставшийся номер
				НовыйНомерСФ = Строка(НовыйНомерСФ) + Сред(Результат,Н);
				Прервать; 
			КонецЕсли;
			НовыйНомерСФ = Строка(НовыйНомерСФ) + Строка(ПервСимвол);
		КонецЦикла;              							 
		Результат = НовыйНомерСФ;						
	КонецЕсли;	
	
	Возврат  Результат;	
КонецФункции

// Формирует данные счетов-фактур исходя из таблиц документов.
// Для типовых решений, в которых отсутствует механизм проведения счетов-фактур
Функция ПолучитьТекстЗапросаСчетовФактурВыданныхПоДокументам()	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СУММА(ДанныеСчетовФактур.Сумма * ДанныеСчетовФактур.КурсВзаиморасчетов / ДанныеСчетовФактур.КратностьВзаиморасчетов - ВЫБОР
	               |			КОГДА ДанныеСчетовФактур.Ссылка.СуммаВключаетНДС
	               |				ТОГДА ДанныеСчетовФактур.СуммаНДС * ДанныеСчетовФактур.КурсВзаиморасчетов / ДанныеСчетовФактур.КратностьВзаиморасчетов
	               |			ИНАЧЕ 0
	               |		КОНЕЦ + ВЫБОР
	               |			КОГДА НЕ ДанныеСчетовФактур.Ссылка.СуммаВключаетАкциз
	               |				ТОГДА ДанныеСчетовФактур.СуммаАкциза * ДанныеСчетовФактур.КурсВзаиморасчетов / ДанныеСчетовФактур.КратностьВзаиморасчетов
	               |			ИНАЧЕ 0
	               |		КОНЕЦ ) КАК Сумма,
	               |	ДанныеСчетовФактур.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	               |	ДанныеСчетовФактур.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	               |	СУММА(ДанныеСчетовФактур.СуммаНДС * ДанныеСчетовФактур.КурсВзаиморасчетов / ДанныеСчетовФактур.КратностьВзаиморасчетов) КАК СуммаНДС,
	               |	ДанныеСчетовФактур.Ссылка.Дата КАК Дата,
	               |	ДанныеСчетовФактур.Ссылка.Номер КАК Номер,
	               |	Контрагенты.Ссылка КАК Покупатель,
				   |	ДанныеСчетовФактур.Ссылка.Контрагент КАК Контрагент,
	               |	ДанныеСчетовФактур.Ссылка.Организация КАК Организация,
	               |	ДанныеСчетовФактур.Ссылка КАК Ссылка,
				   |	ДанныеСчетовФактур.ДатаОборота КАК ДатаОборота,
				   |	ДанныеСчетовФактур.СпособВыставления КАК СпособВыписки,
	               |	Контрагенты.РНН,
	               |	Контрагенты.ИдентификационныйКодЛичности,
	               |	Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства,
				   |	ВЫБОР
	               |		КОГДА ДанныеСчетовФактур.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Дополнительный)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
                   |     Конец КАК Дополнительная,	               	               
	               |	ЛОЖЬ КАК УчастникСовместнойДеятельности
	               |ПОМЕСТИТЬ ДанныеСчетовФактур
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ДанныеСчетовФактур.Сумма КАК Сумма,
	               |		ДанныеСчетовФактур.СуммаНДС КАК СуммаНДС,
				   |		ДанныеСчетовФактур.СуммаАкциза КАК СуммаАкциза,
	               |		ДанныеСчетовФактур.Ссылка КАК Ссылка,				   
				   |		ДанныеСчетовФактур.Ссылка.СпособВыставления КАК СпособВыставления,
				   |		НачалоПериода(ДанныеСчетовФактур.Ссылка.ДатаСовершенияОборотаПоРеализации, День) КАК ДатаОборота,				   
	               |		ВЫБОР
	               |			КОГДА ДанныеСчетовФактур.Ссылка.КурсВзаиморасчетов = 0
	               |				ТОГДА 1
	               |			ИНАЧЕ ДанныеСчетовФактур.Ссылка.КурсВзаиморасчетов
	               |		КОНЕЦ КАК КурсВзаиморасчетов,
	               |		ВЫБОР
	               |			КОГДА ДанныеСчетовФактур.Ссылка.КратностьВзаиморасчетов = 0
	               |				ТОГДА 1
	               |			ИНАЧЕ ДанныеСчетовФактур.Ссылка.КратностьВзаиморасчетов
	               |		КОНЕЦ КАК КратностьВзаиморасчетов
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			СчетФактураВыданныйТовары.Сумма КАК Сумма,
	               |			СчетФактураВыданныйТовары.СуммаНДС КАК СуммаНДС,
				   |			СчетФактураВыданныйТовары.СуммаАкциза КАК СуммаАкциза,
	               |			СчетФактураВыданныйТовары.Ссылка КАК Ссылка
	               |		ИЗ
	               |			Документ.СчетФактураВыданный.Товары КАК СчетФактураВыданныйТовары
	               |		ГДЕ
	               |			СчетФактураВыданныйТовары.Ссылка.ДатаСовершенияОборотаПоРеализации МЕЖДУ &ДатаНачала И &ДатаОкончания

	               |			И СчетФактураВыданныйТовары.Ссылка.СтранаНазначения В(&парамСтрана)
	               |			И (НЕ &ОтборПоСтруктурным
	               |						И СчетФактураВыданныйТовары.Ссылка.Организация = &Налогоплательщик
	               |					ИЛИ &ОтборПоСтруктурным
	               |						И СчетФактураВыданныйТовары.Ссылка.Организация В (&парамСписокСтруктурныхЕдиниц))
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			СчетФактураВыданныйУслуги.Сумма,
	               |			СчетФактураВыданныйУслуги.СуммаНДС,
				   |			0,
	               |			СчетФактураВыданныйУслуги.Ссылка
	               |		ИЗ
	               |			Документ.СчетФактураВыданный.Услуги КАК СчетФактураВыданныйУслуги
	               |		ГДЕ
	               |			СчетФактураВыданныйУслуги.Ссылка.ДатаСовершенияОборотаПоРеализации МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |			И СчетФактураВыданныйУслуги.Ссылка.СтранаНазначения В(&парамСтрана)
	               |			И (НЕ &ОтборПоСтруктурным
	               |						И СчетФактураВыданныйУслуги.Ссылка.Организация = &Налогоплательщик
	               |					ИЛИ &ОтборПоСтруктурным
	               |						И СчетФактураВыданныйУслуги.Ссылка.Организация В (&парамСписокСтруктурныхЕдиниц))
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			СчетФактураВыданныйОС.Сумма,
	               |			СчетФактураВыданныйОС.СуммаНДС,
				   |			0,
	               |			СчетФактураВыданныйОС.Ссылка
	               |		ИЗ
	               |			Документ.СчетФактураВыданный.ОС КАК СчетФактураВыданныйОС
	               |		ГДЕ
	               |			СчетФактураВыданныйОС.Ссылка.ДатаСовершенияОборотаПоРеализации МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |			И СчетФактураВыданныйОС.Ссылка.СтранаНазначения В(&парамСтрана)
	               |			И (НЕ &ОтборПоСтруктурным
	               |						И СчетФактураВыданныйОС.Ссылка.Организация = &Налогоплательщик
	               |					ИЛИ &ОтборПоСтруктурным
	               |						И СчетФактураВыданныйОС.Ссылка.Организация В (&парамСписокСтруктурныхЕдиниц))
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			СчетФактураВыданныйНМА.Сумма,
	               |			СчетФактураВыданныйНМА.СуммаНДС,
				   |			0,
	               |			СчетФактураВыданныйНМА.Ссылка
	               |		ИЗ
	               |			Документ.СчетФактураВыданный.НМА КАК СчетФактураВыданныйНМА
	               |		ГДЕ
	               |			СчетФактураВыданныйНМА.Ссылка.ДатаСовершенияОборотаПоРеализации МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |			И СчетФактураВыданныйНМА.Ссылка.СтранаНазначения В(&парамСтрана)
	               |			И (НЕ &ОтборПоСтруктурным
	               |						И СчетФактураВыданныйНМА.Ссылка.Организация = &Налогоплательщик
	               |					ИЛИ &ОтборПоСтруктурным
	               |						И СчетФактураВыданныйНМА.Ссылка.Организация В (&парамСписокСтруктурныхЕдиниц))) КАК ДанныеСчетовФактур) КАК ДанныеСчетовФактур
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО (ДанныеСчетовФактур.Ссылка.Покупатель = Контрагенты.Ссылка
	               |				ИЛИ ДанныеСчетовФактур.Ссылка.Покупатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |					И ДанныеСчетовФактур.Ссылка.Контрагент = Контрагенты.Ссылка)
	               |ГДЕ
	               |	ДанныеСчетовФактур.Ссылка.СтранаНазначения В(&парамСтрана)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДанныеСчетовФактур.Ссылка.Дата,
	               |	ДанныеСчетовФактур.Ссылка.Номер,
	               |	ДанныеСчетовФактур.Ссылка,
				   |	ДанныеСчетовФактур.СпособВыставления,
				   |	ДанныеСчетовФактур.ДатаОборота,
	               |	Контрагенты.Ссылка,
	               |	Контрагенты.РНН,
	               |	Контрагенты.ИдентификационныйКодЛичности,
	               |	Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства,
	               |	ВЫБОР
	               |		КОГДА ДанныеСчетовФактур.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Дополнительный)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
                   |     Конец,	               
	               |	ДанныеСчетовФактур.Ссылка.Организация,
	               |	ДанныеСчетовФактур.КурсВзаиморасчетов,
	               |	ДанныеСчетовФактур.КратностьВзаиморасчетов
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка;";

		Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаСчетовФактурВыданныхПоДокументам

// Формирует данные счетов-фактур исходя из регистра накопления.
// Для типовых решений, в которых присутствует механизм проведения счетов-фактур
Функция ПолучитьТекстЗапросаСчетовФактурВыданныхПоРегистру()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СУММА(ДанныеСчетовФактур.СуммаРегл + ДанныеСчетовФактур.СуммаАкцизаРегл) КАК Сумма,
	               |	СУММА(ДанныеСчетовФактур.СуммаНДСРегл) КАК СуммаНДС,
	               |	ДанныеСчетовФактур.Организация КАК Организация,
	               |	ДанныеСчетовФактур.Контрагент КАК Контрагент,
	               |	ДанныеСчетовФактур.Покупатель КАК Покупатель,
	               |	ДанныеСчетовФактур.СчетФактура КАК Ссылка,
	               |	ДанныеСчетовФактур.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности
	               |ПОМЕСТИТЬ ВТ_ДанныеСчетовФактур
	               |ИЗ
	               |	РегистрНакопления.СведенияСчетовФактурВыданных КАК ДанныеСчетовФактур
	               |ГДЕ
	               |	ДанныеСчетовФактур.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И ДанныеСчетовФактур.Налогоплательщик = &Налогоплательщик
	               |	И (НЕ &ОтборПоСтруктурным
	               |			ИЛИ ДанныеСчетовФактур.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц))
	               |	И ДанныеСчетовФактур.СтранаНазначения В(&парамСтрана)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДанныеСчетовФактур.СчетФактура,
	               |	ДанныеСчетовФактур.Контрагент,
	               |	ДанныеСчетовФактур.Покупатель,
	               |	ДанныеСчетовФактур.Организация,
	               |	ДанныеСчетовФактур.УчастникСовместнойДеятельности
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ДанныеСчетовФактур.Сумма) КАК Сумма,
	               |	СУММА(ДанныеСчетовФактур.СуммаНДС) КАК СуммаНДС,
	               |	ДанныеСчетовФактур.Организация КАК Организация,
	               |	СчетФактура.Дата КАК Дата,
	               |	СчетФактура.Номер КАК Номер,
				   |	НАЧАЛОПЕРИОДА(СчетФактура.ДатаСовершенияОборотаПоРеализации, День) КАК ДатаОборота,
	               |	ДанныеСчетовФактур.Контрагент КАК Контрагент,
	               |	СчетФактура.СпособВыставления КАК СпособВыписки,
	               |	Контрагенты.Ссылка КАК Покупатель,
	               |	ДанныеСчетовФактур.Ссылка КАК Ссылка,
	               |	Контрагенты.РНН,
	               |	Контрагенты.ИдентификационныйКодЛичности,
	               |	Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства,
	               |	ВЫБОР
	               |		КОГДА СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Дополнительный)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Дополнительная,
	               |	ДанныеСчетовФактур.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности
	               |ПОМЕСТИТЬ ДанныеСчетовФактур
	               |ИЗ
	               |	ВТ_ДанныеСчетовФактур КАК ДанныеСчетовФактур
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО (ДанныеСчетовФактур.Покупатель = Контрагенты.Ссылка
	               |				ИЛИ ДанныеСчетовФактур.Покупатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |					И ДанныеСчетовФактур.Контрагент = Контрагенты.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактура
	               |		ПО ДанныеСчетовФактур.Ссылка = СчетФактура.Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СчетФактура.Дата,
	               |	СчетФактура.Номер,
				   |	СчетФактура.ДатаСовершенияОборотаПоРеализации,
	               |	ДанныеСчетовФактур.Ссылка,
	               |	Контрагенты.Ссылка,
	               |	Контрагенты.РНН,
	               |	ДанныеСчетовФактур.Контрагент,
	               |	Контрагенты.ИдентификационныйКодЛичности,
	               |	ВЫБОР
	               |		КОГДА СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Дополнительный)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ,
	               |	ДанныеСчетовФактур.Организация,
	               |	Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства,
	               |	ДанныеСчетовФактур.УчастникСовместнойДеятельности,
	               |	СчетФактура.СпособВыставления
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка;";

		Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаСчетовФактурВыданныхПоРегистру

// Формирует данные счетов-фактур исходя из таблиц документов.
// Для типовых решений, в которых отсутствует механизм проведения счетов-фактур
Функция ПолучитьТекстЗапросаСчетовФактурПолученныхПоДокументам()

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДанныеСчетовФактур.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	               |	ДанныеСчетовФактур.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	               |	ДанныеСчетовФактур.Дополнительная КАК Дополнительная,
	               |	ДанныеСчетовФактур.Поставщик КАК Поставщик,
	               |	ДанныеСчетовФактур.Контрагент КАК Контрагент,
	               |	ДанныеСчетовФактур.Контрагент.РНН КАК РНН,
	               |	ДанныеСчетовФактур.Контрагент.ИдентификационныйКодЛичности КАК ИдентификационныйКодЛичности,
	               |	ДанныеСчетовФактур.Ссылка КАК Ссылка,
				   |	ДанныеСчетовФактур.СпособВыписки КАК СпособВыписки,
	               |	ДанныеСчетовФактур.Сумма КАК СуммаОборота,
	               |	ДанныеСчетовФактур.СуммаНДС КАК СуммаНДС,
	               |	ЛОЖЬ КАК УчастникСовместнойДеятельности
	               |ПОМЕСТИТЬ ВТ_ДанныеСчетовФактур
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		СУММА(ВЫРАЗИТЬ(ДанныеСчетовФактур.Сумма * ДанныеСчетовФактур.КурсВзаиморасчетов * ДанныеСчетовФактур.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))) КАК Сумма,
	               |		СУММА(ВЫРАЗИТЬ(ДанныеСчетовФактур.СуммаНДС * ДанныеСчетовФактур.КурсВзаиморасчетов / ДанныеСчетовФактур.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))) КАК СуммаНДС,
	               |		ДанныеСчетовФактур.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	               |		ДанныеСчетовФактур.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	               |		ДанныеСчетовФактур.Контрагент КАК Контрагент,
	               |		ДанныеСчетовФактур.Поставщик КАК Поставщик,
	               |		ДанныеСчетовФактур.Ссылка КАК Ссылка,
				   |		ДанныеСчетовФактур.СпособВыписки КАК СпособВыписки,
	               |		ДанныеСчетовФактур.Дополнительная КАК Дополнительная
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			СУММА(ВЫБОР
	               |					КОГДА ДанныеСчетовФактур.Ссылка.СуммаВключаетНДС
	               |						ТОГДА ДанныеСчетовФактур.Сумма - ДанныеСчетовФактур.СуммаНДС
	               |					ИНАЧЕ ДанныеСчетовФактур.Сумма
	               |				КОНЕЦ) КАК Сумма,
	               |			СУММА(ДанныеСчетовФактур.СуммаНДС) КАК СуммаНДС,
	               |			ВЫБОР
	               |				КОГДА ДанныеСчетовФактур.Ссылка.КурсВзаиморасчетов = 0
	               |					ТОГДА 1
	               |				ИНАЧЕ ДанныеСчетовФактур.Ссылка.КурсВзаиморасчетов
	               |			КОНЕЦ КАК КурсВзаиморасчетов,
	               |			ВЫБОР
	               |				КОГДА ДанныеСчетовФактур.Ссылка.КратностьВзаиморасчетов = 0
	               |					ТОГДА 1
	               |				ИНАЧЕ ДанныеСчетовФактур.Ссылка.КратностьВзаиморасчетов
	               |			КОНЕЦ КАК КратностьВзаиморасчетов,
	               |			ДанныеСчетовФактур.Ссылка.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	               |			ДанныеСчетовФактур.Ссылка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	               |			ВЫБОР
	               |				КОГДА ДанныеСчетовФактур.Ссылка.Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |					ТОГДА ДанныеСчетовФактур.Ссылка.Контрагент
	               |				ИНАЧЕ ДанныеСчетовФактур.Ссылка.Поставщик
	               |			КОНЕЦ КАК Поставщик,
	               |			ДанныеСчетовФактур.Ссылка.Контрагент КАК Контрагент,
	               |			ДанныеСчетовФактур.Ссылка КАК Ссылка,
				   |			ДанныеСчетовФактур.Ссылка.СпособПолучения КАК СпособВыписки,
	               |			ВЫБОР
	               |				КОГДА ДанныеСчетовФактур.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Дополнительный)
	               |					ТОГДА ИСТИНА
	               |				ИНАЧЕ ЛОЖЬ
	               |			КОНЕЦ КАК Дополнительная,
	               |			ДанныеСчетовФактур.Ссылка.ВидСчетаФактуры КАК ВидСчетаФактуры
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				СчетФактураПолученныйТовары.Сумма КАК Сумма,
	               |				СчетФактураПолученныйТовары.СуммаНДС КАК СуммаНДС,
	               |				СчетФактураПолученныйТовары.СтавкаНДС КАК СтавкаНДС,
	               |				СчетФактураПолученныйТовары.Ссылка КАК Ссылка
	               |			ИЗ
	               |				Документ.СчетФактураПолученный.Товары КАК СчетФактураПолученныйТовары
	               |			ГДЕ
	               |				СчетФактураПолученныйТовары.Ссылка В (Выбрать СписокСчетовФактур.Ссылка Из ВТ_СписокСчетовФактур КАК СписокСчетовФактур)
	               |			
	               |			ОБЪЕДИНИТЬ ВСЕ
	               |			
	               |			ВЫБРАТЬ
	               |				СчетФактураПолученныйУслуги.Сумма,
	               |				СчетФактураПолученныйУслуги.СуммаНДС,
	               |				СчетФактураПолученныйУслуги.СтавкаНДС,
	               |				СчетФактураПолученныйУслуги.Ссылка
	               |			ИЗ
	               |				Документ.СчетФактураПолученный.Услуги КАК СчетФактураПолученныйУслуги
	               |			ГДЕ
	               |				СчетФактураПолученныйУслуги.Ссылка   В (Выбрать СписокСчетовФактур.Ссылка Из ВТ_СписокСчетовФактур КАК СписокСчетовФактур)
	               |			
	               |			ОБЪЕДИНИТЬ ВСЕ
	               |			
	               |			ВЫБРАТЬ
	               |				СчетФактураПолученныйОС.Сумма,
	               |				СчетФактураПолученныйОС.СуммаНДС,
	               |				СчетФактураПолученныйОС.СтавкаНДС,
	               |				СчетФактураПолученныйОС.Ссылка
	               |			ИЗ
	               |				Документ.СчетФактураПолученный.ОС КАК СчетФактураПолученныйОС
	               |			ГДЕ
	               |				СчетФактураПолученныйОС.Ссылка  В (Выбрать СписокСчетовФактур.Ссылка Из ВТ_СписокСчетовФактур КАК СписокСчетовФактур)
	               |			
	               |			ОБЪЕДИНИТЬ ВСЕ
	               |			
	               |			ВЫБРАТЬ
	               |				СчетФактураПолученныйНМА.Сумма,
	               |				СчетФактураПолученныйНМА.СуммаНДС,
	               |				СчетФактураПолученныйНМА.СтавкаНДС,
	               |				СчетФактураПолученныйНМА.Ссылка
	               |			ИЗ
	               |				Документ.СчетФактураПолученный.НМА КАК СчетФактураПолученныйНМА
	               |			ГДЕ
	               |				СчетФактураПолученныйНМА.Ссылка  В (Выбрать СписокСчетовФактур.Ссылка Из ВТ_СписокСчетовФактур КАК СписокСчетовФактур)) КАК ДанныеСчетовФактур
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ДанныеСчетовФактур.Ссылка,
				   |			ДанныеСчетовФактур.Ссылка.СпособПолучения,
	               |			ДанныеСчетовФактур.Ссылка.НомерВходящегоДокумента,
	               |			ДанныеСчетовФактур.Ссылка.ДатаСовершенияОборотаПоРеализации,
	               |			ВЫБОР
	               |				КОГДА ДанныеСчетовФактур.Ссылка.КурсВзаиморасчетов = 0
	               |					ТОГДА 1
	               |				ИНАЧЕ ДанныеСчетовФактур.Ссылка.КурсВзаиморасчетов
	               |			КОНЕЦ,
	               |			ВЫБОР
	               |				КОГДА ДанныеСчетовФактур.Ссылка.КратностьВзаиморасчетов = 0
	               |					ТОГДА 1
	               |				ИНАЧЕ ДанныеСчетовФактур.Ссылка.КратностьВзаиморасчетов
	               |			КОНЕЦ,
	               |			ВЫБОР
	               |				КОГДА ДанныеСчетовФактур.Ссылка.Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |					ТОГДА ДанныеСчетовФактур.Ссылка.Контрагент
	               |				ИНАЧЕ ДанныеСчетовФактур.Ссылка.Поставщик
	               |			КОНЕЦ,
	               |			ДанныеСчетовФактур.Ссылка.Контрагент,
	               |			ВЫБОР
	               |				КОГДА ДанныеСчетовФактур.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Дополнительный)
	               |					ТОГДА ИСТИНА
	               |				ИНАЧЕ ЛОЖЬ
	               |			КОНЕЦ) КАК ДанныеСчетовФактур
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ДанныеСчетовФактур.НомерВходящегоДокумента,
	               |		ДанныеСчетовФактур.ДатаВходящегоДокумента,
	               |		ДанныеСчетовФактур.Контрагент,
	               |		ДанныеСчетовФактур.Поставщик,
	               |		ДанныеСчетовФактур.Ссылка,
				   |		ДанныеСчетовФактур.СпособВыписки,
	               |		ДанныеСчетовФактур.Дополнительная) КАК ДанныеСчетовФактур
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка;";
		Возврат ТекстЗапроса;		   

КонецФункции

// Формирует данные счетов-фактур исходя из регистра накопления.
// Для типовых решений, в которых присутствует механизм проведения счетов-фактур
Функция ПолучитьТекстЗапросаСчетовФактурПолученныхПоРегистру()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СУММА(ДанныеСчетовФактур.СуммаРегл) КАК СуммаОборота,
	               |	СУММА(ДанныеСчетовФактур.СуммаНДСРегл) КАК СуммаНДС,
	               |	ДанныеСчетовФактур.Организация КАК Организация,
	               |	ДанныеСчетовФактур.Контрагент КАК Контрагент,
	               |	ДанныеСчетовФактур.Поставщик КАК Поставщик,
	               |	ДанныеСчетовФактур.СчетФактура КАК СчетФактураСсылка,
	               |	ДанныеСчетовФактур.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности
	               |ПОМЕСТИТЬ ВТ_ДанныеРегистраСчетовФактур
	               |ИЗ
	               |	РегистрНакопления.СведенияСчетовФактурПолученных КАК ДанныеСчетовФактур
	               |ГДЕ
	               |	ДанныеСчетовФактур.СчетФактура В (Выбрать СписокСчетовФактур.Ссылка Из ВТ_СписокСчетовФактур КАК СписокСчетовФактур)
	               |СГРУППИРОВАТЬ ПО
	               |	ДанныеСчетовФактур.СчетФактура,
	               |	ДанныеСчетовФактур.Организация,
	               |	ДанныеСчетовФактур.УчастникСовместнойДеятельности,
	               |	ДанныеСчетовФактур.Контрагент,
	               |	ДанныеСчетовФактур.Поставщик
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СчетФактураСсылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ДанныеСчетовФактур.СуммаОборота) КАК СуммаОборота,
	               |	СУММА(ДанныеСчетовФактур.СуммаНДС) КАК СуммаНДС,
	               |	ДанныеСчетовФактур.Организация КАК Организация,
	               |	СчетФактура.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	               |	СчетФактура.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	               |	СчетФактура.СпособПолучения КАК СпособВыписки,
	               |	Контрагенты.Ссылка КАК Поставщик,
	               |	ДанныеСчетовФактур.Контрагент КАК Контрагент,
	               |	ДанныеСчетовФактур.СчетФактураСсылка КАК Ссылка,
	               |	Контрагенты.РНН КАК РНН,
	               |	Контрагенты.ИдентификационныйКодЛичности КАК ИдентификационныйКодЛичности,
	               |	ВЫБОР
	               |		КОГДА СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Дополнительный)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Дополнительная,
	               |	ДанныеСчетовФактур.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности
	               |ПОМЕСТИТЬ ВТ_ДанныеСчетовФактур
	               |ИЗ
	               |	ВТ_ДанныеРегистраСчетовФактур КАК ДанныеСчетовФактур
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО (ДанныеСчетовФактур.Поставщик = Контрагенты.Ссылка
	               |				ИЛИ ДанныеСчетовФактур.Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |					И ДанныеСчетовФактур.Контрагент = Контрагенты.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактура
	               |		ПО ДанныеСчетовФактур.СчетФактураСсылка = СчетФактура.Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СчетФактура.Дата,
	               |	СчетФактура.Номер,
	               |	ДанныеСчетовФактур.СчетФактураСсылка,
	               |	СчетФактура.СпособПолучения,
	               |	Контрагенты.Ссылка,
	               |	Контрагенты.РНН,
	               |	Контрагенты.ИдентификационныйКодЛичности,
	               |	ДанныеСчетовФактур.Организация,
	               |	ДанныеСчетовФактур.УчастникСовместнойДеятельности,
	               |	ДанныеСчетовФактур.Контрагент,
	               |	ВЫБОР
	               |		КОГДА СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Дополнительный)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ,
	               |	СчетФактура.ДатаВходящегоДокумента,
	               |	СчетФактура.НомерВходящегоДокумента
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка;";

		Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РННСоответствуетТребованиям(Знач РНН)

	РНН		 = СокрЛП(РНН);
	ДлинаРНН = СтрДлина(РНН);
	
	Если ДлинаРНН = 0 Тогда
	// не проверяем если РНН пустой	
		Возврат Истина;
	КонецЕсли;
	
	//Проверка на длину РНН
	Если ДлинаРНН < 12 Тогда    		
		Возврат ("Количество знаков в РНН меньше 12!");
	КонецЕсли;
	
	// В РНН имеются символы, отличные от цифр (0..9)
	РННБезНулей = СтрЗаменить(РНН,"0","1");
	Попытка
	    ЧислоРНН = Число(РННБезНулей);
	Исключение
		
		Возврат ("РНН содержит символы отличные от цифр!");
	КонецПопытки; 
		
	// Проверка на одинаковость всех цифр
	Если СтрЧислоВхождений(РНН, Лев(РНН, 1)) = 12 Тогда 
		
		Возврат ("Цифра " + Лев(РНН, 1) + " повторяется 12 раз!");
	КонецЕсли;
	
	// Проверка РНН на корректность   
	ПодстрокаРНН11 	 = Лев(РНН, 11);	// копируем первые 11 символов
	КонтрольнаяСумма = Прав(РНН, 1);	// контрольная сумма РНН
	
	Для СчетчикЦикла1 = 1 По 10 Цикл
		
		СуммаПроизведений = 0;
		Вес = СчетчикЦикла1 - 1;
		
		// Накапливаем сумму произведений
		Для СчетчикЦикла2 = 1 По 11 Цикл
			
			Вес = Вес + 1;
			
			Если Вес = 11 Тогда 
				Вес = 1; //сбросили вес на единицу
			КонецЕсли;
			
			СуммаПроизведений =  СуммаПроизведений + Вес * Число(Сред(ПодстрокаРНН11, СчетчикЦикла2, 1));
			
		КонецЦикла;
		
		//Рассчитываем коэфиициент для проверка РНН 
		Коэффициент = СуммаПроизведений - Цел((СуммаПроизведений) / 11) * 11;
		
		Если Коэффициент < 10 Тогда 
			
			Если Коэффициент <> Число(КонтрольнаяСумма) Тогда // Проверка равенства полученного коэффициента Контрольной сумме
				//Сообщить("Введенный РНН не корректен!");
				Возврат ("Введенный РНН не корректен!");
			КонецЕсли; 
			
			Прервать;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // РННСоответствуетТребованиям()

&НаКлиентеНаСервереБезКонтекста
Функция БИНИИНСоответствуетТребованиям(Знач ИИН_БИН, ВыводитьСообщение = Ложь) Экспорт

	ИИН_БИН	     = СокрЛП(ИИН_БИН);
	ДлинаИИН_БИН = СтрДлина(ИИН_БИН);
	
	//Проверка на длину ИИН/БИН
	Если ДлинаИИН_БИН < 12 Тогда
		
		Если ВыводитьСообщение Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСТР("ru = 'Количество знаков в ИИН/БИН меньше 12!'"));
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;

	// В ИИН/БИН имеются символы, отличные от цифр (0..9)
	ИИН_БИНБезНулей = СтрЗаменить(ИИН_БИН, "0", "1");
	
	Попытка
	    ЧислоИИН_БИН = Число(ИИН_БИНБезНулей);
		
		Если ЧислоИИН_БИН <> Цел(ЧислоИИН_БИН) Тогда // Есть символ "." или ","
			Если ВыводитьСообщение Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСТР("ru = 'ИИН/БИН содержит символы отличные от цифр!'"));
			КонецЕсли;
			
			Возврат Ложь;
		КонецЕсли;		

	Исключение
		
		Если ВыводитьСообщение Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСТР("ru = 'ИИН/БИН содержит символы отличные от цифр!'"));
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецПопытки; 

	
	// а12=(а1*b1+а2*b2+а3*b3+а4*b4+а5*b5+а6*b6+а7*b7+а8*b8+а9*b9+a10*b10+a11*b11) mod 11
	ПодстрокаИН11 		= Лев(ИИН_БИН, 11);	// копируем первые 11 символов
	КонтрольноеЗначение = Прав(ИИН_БИН, 1);	// контрольная сумма ИИН/БИН
	         
	//разряд ИИН:  1 2 3 4 5 6 7 8 9 10 11
	//вес разряда: 1 2 3 4 5 6 7 8 9 10 11.

	СуммаРазрядов = 1 * Сред(ИИН_БИН, 1, 1) + 2 * Сред(ИИН_БИН, 2, 1) + 3 * Сред(ИИН_БИН, 3, 1) + 4 * Сред(ИИН_БИН, 4, 1) + 5 * Сред(ИИН_БИН, 5, 1) + 6 * Сред(ИИН_БИН, 6, 1)
					+ 7 * Сред(ИИН_БИН, 7, 1)+ 8 * Сред(ИИН_БИН, 8, 1) + 9 * Сред(ИИН_БИН, 9, 1) + 10 * Сред(ИИН_БИН, 10, 1) + 11 * Сред(ИИН_БИН, 11, 1);
					
	ВычисленноеКонтрольноеЗначение = СуммаРазрядов - Цел(СуммаРазрядов / 11) * 11; // mod - остаток от деления Суммы разрядов на 11.
	
	Если ВычисленноеКонтрольноеЗначение = 10 Тогда
		//разряд ИИН:  1 2 3 4 5 6 7 8 9 10 11 
		//вес разряда: 3 4 5 6 7 8 9 10 11 1 2.

		СуммаРазрядов = 3 * Сред(ИИН_БИН, 1, 1) + 4 * Сред(ИИН_БИН, 2, 1) + 5 * Сред(ИИН_БИН, 3, 1) + 6 * Сред(ИИН_БИН, 4, 1) + 7 * Сред(ИИН_БИН, 5, 1) + 8 * Сред(ИИН_БИН, 6, 1)
						+ 9 * Сред(ИИН_БИН, 7, 1) + 10 * Сред(ИИН_БИН, 8, 1) + 11 * Сред(ИИН_БИН, 9, 1) + 1*Сред(ИИН_БИН, 10, 1) + 2 * Сред(ИИН_БИН, 11, 1);
		ВычисленноеКонтрольноеЗначение = СуммаРазрядов - Цел(СуммаРазрядов / 11) * 11;   
		
	КонецЕсли;
	
	Если ВычисленноеКонтрольноеЗначение <> Число(КонтрольноеЗначение) Тогда
		
		Если ВыводитьСообщение Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСТР("ru = 'Введенный ИИН/БИН не корректен!'"));
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции // БИНСоответствуетТребованиям()

&НаКлиенте
Процедура ПослеВводаСтраницы(Значение, Параметры) Экспорт
	
	Если НЕ Значение = Неопределено Тогда  
		
		ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
		Если ТекФорма = Неопределено Тогда
			ВсегоСтраниц = 1;
		Иначе
			ВсегоСтраниц = ТекФорма.ВсегоСтраниц;
		КонецЕсли;		
			
		Если Значение = 0 Тогда
			ТекущаяСтраница = 1;
		ИначеЕсли Значение > ВсегоСтраниц Тогда
			ТекущаяСтраница = ВсегоСтраниц;
		Иначе
			ТекущаяСтраница = Значение;				
		КонецЕсли;
		
		ПослеВводаСтраницыНаСервере();
		  
	КонецЕсли;
	           	
КонецПроцедуры

&НаСервере
Процедура ПослеВводаСтраницыНаСервере()
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтаФорма);
КонецПроцедуры

///////////////////////////////////////////////////////////////////
// ЛОКАЛЬНЫЕ МЕХАНИЗМЫ ОТЧЕТА

&НаСервере
// Процедура предназначена для автоматического расчет по строкам
// Вызывается из процедуры расчета для обычной формы
// Предполагает расчет ячеек, которые рассчитывается не как сумма входящих значений,
// при этом итоговое значение может быть больше входящих в него значений
//
// Параметры: ТекИмяФормы - текущее имя формы, Строка
//            ИтоговаяЯчейка - наименование итоговой ячейки, которая может иметь значение больше входящих в нее ячеек
//            СтруктураВходящихЯчеек - содержит наименования всех входящих ячеек
//
Функция АвтоматическийРасчетПоСтрокам(ТаблицаДанных, ИтоговаяЯчейка, СтруктураВходящихЯчеек, РассчитыватьСумму = Истина, ТабличноеПолеРезультата)
	
	ИтЗначение = 0;	
	
	Если РассчитыватьСумму Тогда
		
		ЗначИтоговойЯчейки = 0;
		
		СтруктураТекущихЗначений = Новый Структура();	
		// добавляем значения входящих ячеек
		Для Каждого Элемент Из СтруктураВходящихЯчеек Цикл
			ЗначениеЯчейки = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,Элемент.Ключ);
			СтруктураТекущихЗначений.Вставить(Элемент.Ключ, ЗначениеЯчейки);		
		КонецЦикла;
		
		Для Каждого Элемент Из СтруктураТекущихЗначений Цикл
			ЗначИтоговойЯчейки = ЗначИтоговойЯчейки + Элемент.Значение;
		КонецЦикла;
		
		// передаем полученное итоговое значение в структуру и на форму
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИтоговаяЯчейка, ЗначИтоговойЯчейки, ТабличноеПолеРезультата);		
		
		ИтЗначение = ЗначИтоговойЯчейки;
	Иначе	
	
		// получим значение итоговой ячейки
		ЗначИтоговойЯчейки     = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,ИтоговаяЯчейка);
		
		СтруктураТекущихЗначений = Новый Структура();	
		// добавляем значения входящих ячеек
		Для Каждого Элемент Из СтруктураВходящихЯчеек Цикл
			ЗначениеЯчейки = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,Элемент.Ключ);
			СтруктураТекущихЗначений.Вставить(Элемент.Ключ, ЗначениеЯчейки);		
		КонецЦикла;	
		
		// Создадим структуру предыдцщих значений, она не содержит итоговую ячейку
		СтруктураПредыдущихЗначений = Новый Структура;
		Если мСтруктураЗначений <> Неопределено Тогда
			Для Каждого Элемент Из СтруктураВходящихЯчеек Цикл
				Если мСтруктураЗначений.Свойство(Элемент.Ключ) Тогда
					ЗначениеЯчейкиДо = 0;
					мСтруктураЗначений.Свойство(Элемент.Ключ,ЗначениеЯчейкиДо);
					СтруктураПредыдущихЗначений.Вставить(Элемент.Ключ, ЗначениеЯчейкиДо);		
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
		//Рассчитаем итоговую ячейку
		// В случае, если в мСтруктураЗначений еще не было добавлено предыдуших значений, то значение "ДО" будет равно 0
		// Формула, например:
		//s_300_02_004 = s_300_02_004 - s_300_02_004_i_до + s_300_02_004_i - s_300_02_004_ii_до + s_300_02_004_ii
		//					   - s_300_02_004_iii_до + s_300_02_004_iii - s_300_02_004_iv_до + s_300_02_004_iv
		//					   - s_300_02_004_v_до + s_300_02_004_v - s_300_02_004_vi_до + s_300_02_004_vi;
		
		НовЗначИтоговойЯчейки = ЗначИтоговойЯчейки;
		// + все текущие значения + значение итоговой ячейки
		Для Каждого Элемент Из СтруктураТекущихЗначений Цикл
			НовЗначИтоговойЯчейки = НовЗначИтоговойЯчейки + Элемент.Значение;
		КонецЦикла;
		// - все предыдущие значения
		Для Каждого Элемент Из СтруктураПредыдущихЗначений Цикл
			НовЗначИтоговойЯчейки = НовЗначИтоговойЯчейки - Элемент.Значение;
		КонецЦикла;
		
		// запоминаем текущие значения взодящих ячеек в мСтруктураЗначений
		Для Каждого Элемент Из СтруктураТекущихЗначений Цикл				
			мСтруктураЗначений.Вставить(Элемент.Ключ,Элемент.Значение);  //новое значение данной области 		
		КонецЦикла;
		
		// передаем полученное итоговое значение в структуру и на форму
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИтоговаяЯчейка, НовЗначИтоговойЯчейки, ТабличноеПолеРезультата);		
				
		// если итоговое значение ввели меньше чем сумма входящих значений
		// то очищаем все значения, в случае если входящих значений больше одного
		// если входящее значение одно, то приравниваем его со значением итоговой ячейки
		// - Проверим сумму входящих значений
		
		ОбщаяСуммаВходящихЗначений = 0;
		Для Каждого Элемент Из СтруктураТекущихЗначений Цикл		
			ОбщаяСуммаВходящихЗначений = ОбщаяСуммаВходящихЗначений + Элемент.Значение;		
		КонецЦикла;
		
		Если НовЗначИтоговойЯчейки < ОбщаяСуммаВходящихЗначений Тогда
			// определим количество ячеек входящих
			Если СтруктураВходящихЯчеек.Количество() = 1 Тогда
				Для Каждого Элемент Из СтруктураВходящихЯчеек Цикл
					мСтруктураЗначений.Вставить(Элемент.Ключ,НовЗначИтоговойЯчейки);  //новое значение данной области 
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, Элемент.Ключ,НовЗначИтоговойЯчейки, ТабличноеПолеРезультата);
				КонецЦикла;			
			Иначе // больше одного, то обнуляем все входящие значения
				Для Каждого Элемент Из СтруктураВходящихЯчеек Цикл
					мСтруктураЗначений.Вставить(Элемент.Ключ,0);  //новое значение данной области 
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,Элемент.Ключ,0, ТабличноеПолеРезультата);
				КонецЦикла;			
			КонецЕсли;
		КонецЕсли;
		
		ИтЗначение = НовЗначИтоговойЯчейки;
	КонецЕсли;
		
	Возврат ИтЗначение;
	
КонецФункции // АвтоматическийРасчетПоСтрокам()

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, ЭтотОбъект.КодФормы, Ложь,Ложь);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ЭтотОбъект.КодФормы);
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма);	
	
	Форма300РасчетНаСервере(Неопределено, Неопределено);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере 
Процедура ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ИмяЯчейки, Значение, Расчет = Ложь)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, ИмяСтраницы, ИмяЯчейки, Значение, Расчет);				
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////
// ФОРМА 300.00

&НаКлиенте
Процедура Форма300ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Элемент.ТекущаяОбласть.Имя;
	Если Область.СодержитЗначение Тогда
		Значение = Элемент.ТекущаяОбласть.Значение;
	Иначе
		Значение = "";		
	КонецЕсли;
	
	ПризнакРасчета = Ложь;
	Форма300ПолеТабличногоДокументаВыборНаСервере(Ячейка, Значение, ПризнакРасчета);	    
КонецПроцедуры

&НаКлиенте
Процедура Форма300ПолеТабличногоДокументаСтраница4Выбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Элемент.ТекущаяОбласть.Имя;
	Если Область.СодержитЗначение Тогда
		Значение = Элемент.ТекущаяОбласть.Значение;
	Иначе
		Значение = "";		
	КонецЕсли;
	
	ПризнакРасчета = Ложь;
	Форма300ПолеТабличногоДокументаВыборНаСервере(Ячейка, Значение, ПризнакРасчета);	    
КонецПроцедуры

&НаСервере
Процедура Форма300ПолеТабличногоДокументаВыборНаСервере(Ячейка, Значение, ПризнакРасчета)	
	ТекимяФормы = "Форма300";
	Если (Найти(Ячейка, "Первоначальная") > 0)
		ИЛИ (Найти(Ячейка, "Очередная") > 0)
		ИЛИ (Найти(Ячейка, "Дополнительная") > 0)
		ИЛИ (Найти(Ячейка, "Ликвидационная") > 0)
		ИЛИ (Найти(Ячейка, "ПоУведомлению") > 0) Тогда
		ЗаполнитьВидРасчета(Ячейка);
	КонецЕсли;	
	
	Если (Найти(Ячейка, "Условие_A") > 0)
		ИЛИ (Найти(Ячейка, "Условие_B") > 0)
		ИЛИ (Найти(Ячейка, "ОтказОтВозврата") > 0) Тогда
		
		Если Значение = "Х" Тогда
			НовоеЗначение = "";
		Иначе
			НовоеЗначение = "Х";
		КонецЕсли;		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, Ячейка, НовоеЗначение, Истина);				
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Форма300ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма300Расчет(Область.Имя, Область.Значение);
	КонецЕсли;
	    	    
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Форма300ПолеТабличногоДокументаСтраница2ПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма300Расчет(Область.Имя, Область.Значение);
	КонецЕсли;
	    	    
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Форма300ПолеТабличногоДокументаСтраница3ПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма300Расчет(Область.Имя, Область.Значение);
	КонецЕсли;
	    	    
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Форма300ПолеТабличногоДокументаСтраница4ПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма300Расчет(Область.Имя, Область.Значение);
	КонецЕсли;
	    	    
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Форма300Расчет(ИмяЯчейки, ЗначениеЯчейки)
	ТекИмяФормы = "Форма300";	
	Форма300РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки);
КонецПроцедуры

&НаСервере
Процедура Форма300РасчетНаСервере(знач ИмяЯчейки, знач ЗначениеЯчейки)
	ТекИмяФормы = "Форма300";
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,ИмяЯчейки ,ЗначениеЯчейки);
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);			
	
	// рассчитаем ячейку 300.00.005
	//a_s_300_00_005  = s_300_02_006 + (-)s_300_06_011_a
	a_s_300_00_005 = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_00_005_a", 
								Новый Структура("s_300_00_005_1_a, s_300_00_005_2_a"),, Форма300ПолеТабличногоДокументаСтраница1);		
	
	
	// 300.00.006. Общий оборот (300.00.001А+300.00.002+ 300.00.003 А+300.00.004 +300.00.005)
	
	a_s_300_00_006 = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_00_006_a", 
								Новый Структура("s_300_00_001_a, s_300_00_002_a, s_300_00_003_a, s_300_00_004_a, s_300_00_005_a"),, Форма300ПолеТабличногоДокументаСтраница1);		
	
								
	// 300.00.007. Доля облагаемого оборота в общем обороте
	// 300.00.007 = ((300.00.001A+300.00.002+300.00.003А)/300.00.006x100%)		
	ОбщийОблагаемыйОборот = 0;
	Для Ном = 1 По 3 Цикл
		ИмяОбласти = "s_300_00_00" + Строка(Ном) + "_a";
		ОбщийОблагаемыйОборот = ОбщийОблагаемыйОборот + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,ИмяОбласти);
	КонецЦикла;  
	
	Если a_s_300_00_006 <> 0 Тогда	
		СтруктураРеквизитовФормы.УдВес  = Окр(ОбщийОблагаемыйОборот/a_s_300_00_006 * 100, 2);
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_007_b", СтруктураРеквизитовФормы.УдВес, Форма300ПолеТабличногоДокументаСтраница2);		
	Иначе
		СтруктураРеквизитовФормы.УдВес = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_007_b");
	КонецЕсли;
	
	// 300.00.008. Доля облагаемого оборота по нулевой ставке в общем облагаемом обороте 
	//  (300.00.002/(300.00.001A+300.00.002+300.00.003A)x100%)
																						
	
	Если ОбщийОблагаемыйОборот <> 0 Тогда
		b_s_300_00_008 = Окр(РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_002_a") / ОбщийОблагаемыйОборот * 100,2); 
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_008_b", b_s_300_00_008, Форма300ПолеТабличногоДокументаСтраница2);						
	КонецЕсли;
	
	// 300.00.012. Всего начислено НДС 
	// (300.00.001B+300.00.003B+300.00.010+300.00.011)																																															
	
	s_300_00_012 = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_00_012_b", 
								Новый Структура("s_300_00_001_b, s_300_00_003_b,s_300_00_010_b, s_300_00_011_b"),,Форма300ПолеТабличногоДокументаСтраница2);		
								
		
	// 300.00.016. Импорт с уплатой НДС при таможенном декларировании (на основании декларации на товары,на основанииде кларации ф.320.00),
	// в том числе : 300.00.016 I, 300.00.016 II	
	АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_00_016_a", Новый Структура("s_300_00_016_1_a, s_300_00_016_2_a"),Ложь, Форма300ПолеТабличногоДокументаСтраница2);
	АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_00_016_b", Новый Структура("s_300_00_016_1_b, s_300_00_016_2_b"),Ложь, Форма300ПолеТабличногоДокументаСтраница2);
		
	// 300.00.021. Всего приобретено 
	// (300.00.013A + 300.00.014А + 300.00.015 + 300.00.016А + 300.00.017 + 300.00.018 + 300.00.020А + 300.00.026А)
					
	a_s_300_00_021 = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_00_021_a", 
								Новый Структура("s_300_00_013_a,s_300_00_014_a, s_300_00_015_a, s_300_00_016_a, s_300_00_017_a, s_300_00_018_a,s_300_00_020_a, s_300_00_026_a"),, Форма300ПолеТабличногоДокументаСтраница2);
								
	
		
	// 300.00.023. Общая сумма НДС, относимого в зачет, за исключением строки 300.00.024
	// (300.00.013В+300.00.014В+300.00.016В+300.00.019В+300.00.020В+300.00.022)
																							
	
	b_s_300_00_023 = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_00_023_b", 
								Новый Структура("s_300_00_013_b, s_300_00_014_b, s_300_00_016_b, s_300_00_019_b, s_300_00_020_b, s_300_00_022_b"),, Форма300ПолеТабличногоДокументаСтраница2);		
	
	b_s_300_00_023 = b_s_300_00_023  - РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_024_b");	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_023_b", b_s_300_00_023, Форма300ПолеТабличногоДокументаСтраница2);
	
								
	// 300.00.024
	s_300_00_024_b = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, "s_300_00_024_b", 
								Новый Структура("s_300_00_024_1_b, s_300_00_024_2_b, s_300_00_024_3_b"),,Форма300ПолеТабличногоДокументаСтраница3);		
								
	ПризнакОдновременногоПрименения = Ложь;							
	
	b_s_300_00_025_1 = 0; b_s_300_00_025_2= 0; b_s_300_00_025_3= 0;
	Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Раздельный Тогда
		// 300.00.025 I.  Сумма разрешенного зачета НДС: при раздельном методе (300.00.023)
		b_s_300_00_025_1 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_023_b"); 
	
	ИначеЕсли СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный Тогда
		// 300.00.025 II.  Сумма разрешенного зачета НДС: при пропорциональном методе (300.00.023х300.00.007)
		b_s_300_00_025_2 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_023_b") * РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_007_b")/100; 
	
	
	Иначе	
		// Строки 300.00.024 и  300.00.025 III заполняются только для НП, применяющих пропорциональный и раздельный метод	
		ПризнакОдновременногоПрименения = ?(РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"ПропорцИРаздел")="Х",Истина, Ложь);
		Если ПризнакОдновременногоПрименения Тогда
		
			// 300.00.025 III.  Сумма разрешенного зачета НДС: при пропорциональном и раздельном методе 
			// 300.00.025 III = ((300.00.024Iх300.00.009)+(300.00.024IIIх 300.00.007)+ 300.00.024II)
			b_s_300_00_025_3 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_024_1_b") * РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_009_b") + 
							   РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_024_2_b") * РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_007_b") +
							   РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_024_3_b"); 
						   
	
		
		КонецЕсли;
	КонецЕсли;	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_025_1_b", b_s_300_00_025_1, Форма300ПолеТабличногоДокументаСтраница3);
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_025_2_b", b_s_300_00_025_2, Форма300ПолеТабличногоДокументаСтраница3);
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_025_3_b", b_s_300_00_025_3, Форма300ПолеТабличногоДокументаСтраница3);
	
				
	// 300.00.027.1. Сумма НДС, подлежащего уплате в бюджет за налоговый период
	// при раздельном методе:300.00.012-300.00.025I-300.00.026В 
	// при пропорциональном: 300.00.012-300.00.025II-300.00.026В 
	// при одновременном применении пропорц. и раздельного: 300.00.012-300.00.025III-300.00.026В)
	НДСкУплате = 0;
	Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Раздельный Тогда
		НДСкУплате = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_012_b") - 
		             РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_025_1_b") - 
					 РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_026_b");
					 
	ИначеЕсли СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный Тогда	
		НДСкУплате = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_012_b") - 
		             РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_025_2_b") - 
					 РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_026_b");			 
		
	ИначеЕсли ПризнакОдновременногоПрименения Тогда
		НДСкУплате = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_012_b") - 
		             РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_025_3_b") - 
					 РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_00_026_b");			 			 
		
	КонецЕсли;
	
	
	// 300.00.027.1. Сумма НДС, подлежащего уплате в бюджет за налоговый период			 
	// 300.00.027.2. Превышение суммы НДС, относимого в зачет, над суммой начисленного налога
	Если НДСкУплате > 0 Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_027_1_b", НДСкУплате, Форма300ПолеТабличногоДокументаСтраница3);
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_027_2_b", 0, Форма300ПолеТабличногоДокументаСтраница3);				
	Иначе
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_027_1_b", 0, Форма300ПолеТабличногоДокументаСтраница3);				
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_00_027_2_b", -НДСкУплате, Форма300ПолеТабличногоДокументаСтраница3);								
	КонецЕсли;	
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);  

КонецПроцедуры

&НаСервере
Функция Форма300РассчитатьНачислениеНДС(ВыдаватьСообщения = Ложь) 
	 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("НачПериода",		  СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", 	  Новый Граница(КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КодСтроки300Формы","300.00.%");		
	Запрос.УстановитьПараметр("СтавкаНДС", 12);
	Запрос.УстановитьПараметр("КодСтроки001", "300.00.001%" );	

	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПОДСТРОКА(КодыСтрокДекларацииПоНДС.КодСтроки, 1, 10) КАК КодСтроки,
	               |	НДСОбороты.ВидОперацииРеализации КАК ВидОперацииРеализации,
	               |	СУММА(НДСОбороты.ОборотПоРеализацииОборот) КАК ОборотПоРеализацииОборот,
	               |	СУММА(НДСОбороты.СуммаНДСОборот) КАК СуммаНДСОборот,
	               |	""Реализация"" КАК Раздел,
	               |	НДСОбороты.СтавкаНДС
	               |ПОМЕСТИТЬ РеализацияВТ
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		НДС.ВидОперацииРеализации КАК ВидОперацииРеализации,
	               |		НДС.ОборотПоРеализацииОборот КАК ОборотПоРеализацииОборот,
	               |		НДС.СуммаНДСОборот КАК СуммаНДСОборот,
	               |		НДС.СтавкаНДС КАК СтавкаНДС
	               |	ИЗ
	               |		РегистрНакопления.НДС.Обороты(
	               |				&НачПериода,
	               |				&КонПериода,
	               |				,
	               |				Налогоплательщик = &Налогоплательщик
	               |					И НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСОблагаемыйИмпорт)) КАК НДС
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		КорректировкаНДС.ВидОперацииКорректировки,
	               |		КорректировкаНДС.СуммаКорректировкиОборотаОборот,
	               |		КорректировкаНДС.СуммаНДСОборот,
	               |		КорректировкаНДС.СтавкаНДС
	               |	ИЗ
	               |		РегистрНакопления.КорректировкаНДС.Обороты(
	               |				&НачПериода,
	               |				&КонПериода,
	               |				,
	               |				Налогоплательщик = &Налогоплательщик
	               |					И НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСОблагаемыйИмпорт)) КАК КорректировкаНДС) КАК НДСОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДС.СрезПоследних(&КонПериода, ) КАК КодыСтрокДекларацииПоНДС
	               |		ПО НДСОбороты.ВидОперацииРеализации = КодыСтрокДекларацииПоНДС.ВидОперации
	               |ГДЕ
	               |	(КодыСтрокДекларацииПоНДС.КодСтроки ПОДОБНО &КодСтроки300Формы
	               |			ИЛИ КодыСтрокДекларацииПоНДС.КодСтроки ЕСТЬ NULL )
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КодыСтрокДекларацииПоНДС.КодСтроки,
	               |	НДСОбороты.ВидОперацииРеализации,
	               |	НДСОбороты.СтавкаНДС
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	КодСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РеализацияВТ.КодСтроки,
	               |	РеализацияВТ.ВидОперацииРеализации,
	               |	РеализацияВТ.СтавкаНДС,
	               |	СУММА(РеализацияВТ.ОборотПоРеализацииОборот) КАК СуммаБезНДСОборот,
	               |	СУММА(РеализацияВТ.СуммаНДСОборот) КАК СуммаНДСОборот,
	               |	РеализацияВТ.Раздел КАК Раздел
	               |ИЗ
	               |	РеализацияВТ КАК РеализацияВТ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РеализацияВТ.КодСтроки,
	               |	РеализацияВТ.СтавкаНДС,
	               |	РеализацияВТ.ВидОперацииРеализации,
	               |	РеализацияВТ.Раздел";
	
	Результат = Запрос.Выполнить();
	
	ТаблицаРезультата = Результат.Выгрузить();
	
	Возврат ТаблицаРезультата;		 
	
КонецФункции // Форма300РассчитатьНачислениеНДС()

&НаСервере
Функция Форма300РассчитатьЗачетНДС(ВыдаватьСообщения = Ложь) 
	 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Налогоплательщик", 			Налогоплательщик);
	Запрос.УстановитьПараметр("НачПериода",		  			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", 	  			Новый Граница(КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КодСтроки300Формы",			"300.00.%");		
	Запрос.УстановитьПараметр("КодСтрокиМетодаЗачета",  	"300.00.020" );
	Запрос.УстановитьПараметр("ВидНалогаНДСМетодомЗачета", 	Перечисления.ВидыНДС.НДСМетодомЗачета);
	Запрос.УстановитьПараметр("ВидОборота",		  			Перечисления.ВидыОборотовПоРеализации.Общий);
	Запрос.УстановитьПараметр("КодСтроки300",	  			"300.00%");
    Запрос.УстановитьПараметр("КодСтроки300ДляИсключения",	"300.04.%");
	

	Запрос.Текст = "ВЫБРАТЬ
	               |	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.Период КАК Период,
	               |	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОперации КАК ВидОперацииПоступления,
	               |	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки КАК КодСтроки,
	               |	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОборота КАК ВидОборота,
	               |	ВЫБОР
	               |		КОГДА КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОборота = ЗНАЧЕНИЕ(Перечисление.ВидыОборотовПоРеализации.ПустаяСсылка)
	               |			ТОГДА 2
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_Приоритет
	               |ИЗ
	               |	РегистрСведений.КодыСтрокДекларацииПоНДСКЗачету.СрезПоследних(&КонПериода, ) КАК КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Приоритет,
	               |	ВидОперацииПоступления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДохода.ВидОперацииПоступления КАК ВидОперацииПоступления,
	               |	ДанныеОКодахДекларации.КодСтроки КАК КодСтроки
	               |ПОМЕСТИТЬ ВТ_СведенияОкодахСтрокДекларации
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТаблицаОпераций.ВидОперацииПоступления КАК ВидОперацииПоступления,
	               |		МИНИМУМ(ТаблицаОпераций.Приоритет) КАК Приоритет
	               |	ИЗ
	               |		ВТ_Приоритет КАК ТаблицаОпераций
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ТаблицаОпераций.ВидОперацииПоступления) КАК ТаблицаДохода
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоритет КАК ДанныеОКодахДекларации
	               |		ПО ТаблицаДохода.Приоритет = ДанныеОКодахДекларации.Приоритет
	               |			И ТаблицаДохода.ВидОперацииПоступления = ДанныеОКодахДекларации.ВидОперацииПоступления
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВидОперацииПоступления,
	               |	КодСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки КАК КодСтроки,
	               |	СУММА(НДСКВозмещениюОбороты.СуммаБезНДСОборот) КАК СуммаБезНДСОборот,
	               |	СУММА(НДСКВозмещениюОбороты.СуммаНДСОборот) КАК СуммаНДСОборот,
	               |	НДСКВозмещениюОбороты.ВидОперацииПоступления КАК ВидОперацииПоступления,
	               |	""Возмещение"" КАК Раздел,
	               |	НДСКВозмещениюОбороты.ВидОборота,
	               |	НДСКВозмещениюОбороты.ВидНалогаНДС КАК ВидНалогаНДС
	               |ПОМЕСТИТЬ ВозмещениеВТ
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		НДСКВозмещению.СуммаБезНДСОборот КАК СуммаБезНДСОборот,
	               |		НДСКВозмещению.СуммаНДСОборот КАК СуммаНДСОборот,
	               |		НДСКВозмещению.ВидОперацииПоступления КАК ВидОперацииПоступления,
	               |		НДСКВозмещению.ВидОборота КАК ВидОборота,
	               |		НДСКВозмещению.ВидНалогаНДС КАК ВидНалогаНДС
	               |	ИЗ
	               |		РегистрНакопления.НДСКВозмещению.Обороты(&НачПериода, &КонПериода, , Налогоплательщик = &Налогоплательщик) КАК НДСКВозмещению
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		КорректировкаНДСКВозмещению.СуммаКорректировкиОборотаОборот,
	               |		КорректировкаНДСКВозмещению.СуммаНДСОборот,
	               |		КорректировкаНДСКВозмещению.ВидОперацииКорректировки,
	               |		КорректировкаНДСКВозмещению.ВидОборота,
	               |		КорректировкаНДСКВозмещению.ВидНалогаНДС
	               |	ИЗ
	               |		РегистрНакопления.КорректировкаНДСКВозмещению.Обороты(&НачПериода, &КонПериода, , Налогоплательщик = &Налогоплательщик) КАК КорректировкаНДСКВозмещению) КАК НДСКВозмещениюОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДСКЗачету.СрезПоследних(&КонПериода, ) КАК КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних
	               |		ПО НДСКВозмещениюОбороты.ВидОборота = КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОборота
	               |			И НДСКВозмещениюОбороты.ВидОперацииПоступления = КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОперации
	               |ГДЕ
	               |	(КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки ПОДОБНО &КодСтроки300
	               |			ИЛИ КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки ЕСТЬ NULL )
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки,
	               |	НДСКВозмещениюОбороты.ВидОборота,
	               |	НДСКВозмещениюОбороты.ВидНалогаНДС,
	               |	НДСКВозмещениюОбороты.ВидОперацииПоступления
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	КодСтроки,
	               |	ВидНалогаНДС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВозмещениеВТ.КодСтроки,
	               |	ВозмещениеВТ.ВидОперацииПоступления,
	               |	ВозмещениеВТ.СуммаБезНДСОборот КАК СуммаБезНДСОборот,
	               |	ВозмещениеВТ.СуммаНДСОборот КАК СуммаНДСОборот,
	               |	ВозмещениеВТ.Раздел КАК Раздел,
	               |	ВозмещениеВТ.ВидОборота
	               |ИЗ
	               |	ВозмещениеВТ КАК ВозмещениеВТ
	               |ГДЕ
	               |	ВозмещениеВТ.ВидНалогаНДС = &ВидНалогаНДСМетодомЗачета
	               |	И ВозмещениеВТ.КодСтроки = &КодСтрокиМетодаЗачета
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВозмещениеВТ.КодСтроки,
	               |	ВозмещениеВТ.ВидОперацииПоступления,
	               |	ВозмещениеВТ.СуммаБезНДСОборот,
	               |	ВозмещениеВТ.СуммаНДСОборот,
	               |	ВозмещениеВТ.Раздел,
	               |	ВозмещениеВТ.ВидОборота
	               |ИЗ
	               |	ВозмещениеВТ КАК ВозмещениеВТ
	               |ГДЕ
	               |	НЕ ВозмещениеВТ.КодСтроки = &КодСтрокиМетодаЗачета";
	
	Результат = Запрос.Выполнить();
	
	ТаблицаРезультата = Результат.Выгрузить();
	
	Возврат ТаблицаРезультата;		 
	
КонецФункции // Форма300РассчитатьЗачетНДС()

&НаСервере
Процедура Форма300ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь) 
	
	ТекИмяФормы = "Форма300";	
	Очистить(ТекИмяФормы,Истина);
	
	мПропорцИРаздел = Ложь;
	Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "Пропорциональный", 	"Х");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "Раздельный", 		"");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "ПропорцИРаздел", 	"");
	Иначе
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "Пропорциональный", 	"");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "Раздельный", 		"Х");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "ПропорцИРаздел", 	"");	
	КонецЕсли;
	
	// заполнение приложений
	
	// Заполняем строку 300.00.001 и 300.00.005
	ТаблицаРезультатаНачислениеНДС = Форма300РассчитатьНачислениеНДС(Истина);
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);
	
	Для Каждого Строка Из ТаблицаРезультатаНачислениеНДС Цикл
		Если НЕ ЗначениеЗаполнено(Строка.КодСтроки) Тогда
			ТекстСообщения = НСтр("ru = 'Сумма не учтена в Декларации. В виде операции реализации не указан код строки Декларации. '");			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Строка.ВидОперацииРеализации);				
		 
			Продолжить;			
		КонецЕсли;	
		
		ОбластьНачало = РегламентированнаяОтчетностьКлиентСервер.ПреобразоватьКодДекларации(Строка.КодСтроки);
		Если ОбластьНачало = "s_300_00_010" Тогда
			// НДС методом зачета покажем при расчете строки 300.00.020
            Продолжить;
		КонецЕсли;	
		
		СтрокаДанныхОборота = ОбластьНачало + "_a";
		СтрокаДанныхНДС 	= ОбластьНачало + "_b";
		Если ОбластьНачало = "s_300_00_001" ИЛИ			
			ОбластьНачало = "s_300_00_004" Тогда
			
			// заполним строку
			СуммаБезНДС = Окр(?(Строка.СуммаБезНДСОборот <> NULL, 	Строка.СуммаБезНДСОборот, 0)) + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,СтрокаДанныхОборота);
			СуммаНДС    = Окр(?(Строка.СуммаНДСОборот <> NULL,		Строка.СуммаНДСОборот, 0)) + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,СтрокаДанныхНДС);						
			
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, СтрокаДанныхОборота, СуммаБезНДС, Форма300ПолеТабличногоДокументаСтраница1);																
			
			Если ОбластьНачало = "s_300_00_004" Тогда
				Если СуммаНДС <> 0 Тогда
					
					ТекстСообщения = НСтр("ru = 'Для строки %1, в регистре накопления %2 указана сумма НДС. Данные не учтены в форме.'");								
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодСтроки,  ?(Строка.Раздел = "Возмещение","НДС к возмещению","НДС"));			
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
				КонецЕсли;	
				
				Продолжить;			 				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, СтрокаДанныхНДС, СуммаНДС, Форма300ПолеТабличногоДокументаСтраница1);																			
		Иначе	
			
			ТекстСообщения = НСтр("ru = 'Данные по коду строки %1 , содержащиеся в регистре накопления %2 не учтены в форме.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодСтроки, ?(Строка.Раздел = "Возмещение","НДС к возмещению","НДС"));			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
			
			Продолжить;			 
		КонецЕсли;					
	КонецЦикла;
	
	// обновим реквизит формы
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);

	Форма300_01ЗаполнитьАвтоНаСервере();  // после этой процедуры при передаче данных, даже если форма 300.01 не заполнена произойдет вызов процедуры расчета формы 300.00 и рассчитается строка 300.00.001
	Форма300_02ЗаполнитьАвтоНаСервере();  
	Форма300_04ЗаполнитьАвтоНаСервере();  	
	Форма300_06ЗаполнитьАвтоНаСервере();
	Форма300_05ЗаполнитьАвтоНаСервере(); // важна последовательность - чтобы при заполнении 5 приложения мы уже знали удельный вес, рассчитанный в 300.06
	Форма300_03ЗаполнитьАвтоНаСервере();  // важна последовательность, так как при передаче данных из 300.03, уже нужно знать удельный вес
	Форма300_07ЗаполнитьАвтоНаСервере();   
	Форма300_08ЗаполнитьАвтоНаСервере();  
	Форма300_09ЗаполнитьАвтоНаСервере();  
	Форма300_10ЗаполнитьАвтоНаСервере();  
	
	// на данном этапе мы уже знаем удельный вес УдВес	
	Форма300_06ЗаполнитьАвтоНаСервере();
	
	// заполняем строку 300.00.013, 300.00.020 
	ТаблицаРезультата = Форма300РассчитатьЗачетНДС(Истина);
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);
	
	Для Каждого Строка Из ТаблицаРезультата Цикл
		Если НЕ ЗначениеЗаполнено(Строка.КодСтроки) Тогда
			ТекстСообщения = НСтр("ru = 'Сумма не учтена в Декларации. Для вида операции поступления не указан код строки Декларации по виду оборота " + Строка(Строка.ВидОборота) + "'");			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Строка.ВидОперацииПоступления);							
			Продолжить;			
		КонецЕсли;	
		
		ОбластьНачало = РегламентированнаяОтчетностьКлиентСервер.ПреобразоватьКодДекларации(Строка.КодСтроки);
		
		Если ОбластьНачало = "s_300_00_020" Тогда			
			// заполняем данные по методу зачета в разделе начисленного НДС
			СуммаБезНДС = Окр(?(Строка.СуммаБезНДСОборот <> NULL, Строка.СуммаБезНДСОборот, 0));
			СуммаНДС    = Окр(?(Строка.СуммаНДСОборот <> NULL, Строка.СуммаНДСОборот, 0));			
			
			Область = ТаблицаДанных.Найти("s_300_00_010_b","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + СуммаНДС;
			КонецЕсли;
			
			Область = ТаблицаДанных.Найти("s_300_00_020_a","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + СуммаБезНДС;
			КонецЕсли;
			
			// Проверим метод зачета
			Область = ТаблицаДанных.Найти("s_300_00_020_b","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный Тогда
					Область.Значение = Область.Значение + СуммаНДС;
				Иначе
					Если Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Облагаемый Тогда
						Область.Значение = Область.Значение + СуммаНДС;
					ИначеЕсли Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Освобожденный Тогда
						Область.Значение = Область.Значение + 0;
					ИначеЕсли Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Общий Тогда
						Если  мПропорцИРаздел Тогда
							Область.Значение = Область.Значение + СуммаНДС;
						Иначе	
							Область.Значение = Область.Значение + Окр(СуммаНДС*СтруктураРеквизитовФормы.УдВес/100);
						КонецЕсли;
					Иначе
						Если  мПропорцИРаздел Тогда
							Область.Значение = Область.Значение + СуммаНДС;
						Иначе	
							Область.Значение = Область.Значение + Окр(СуммаНДС*СтруктураРеквизитовФормы.УдВес/100);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ОбластьНачало = "s_300_00_013" ИЛИ ОбластьНачало = "s_300_00_018" ИЛИ ОбластьНачало = "s_300_00_015" ИЛИ ОбластьНачало = "s_300_00_016" ИЛИ ОбластьНачало = "s_300_00_022" Тогда			
			СуммаБезНДС = Окр(?(Строка.СуммаБезНДСОборот <> NULL, Строка.СуммаБезНДСОборот, 0));
			СуммаНДС    = Окр(?(Строка.СуммаНДСОборот <> NULL, Строка.СуммаНДСОборот, 0));							
			
			Область = ТаблицаДанных.Найти("s_300_00_0"+ Прав(ОбластьНачало,2) + "_a","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + СуммаБезНДС;
			КонецЕсли;
			
			// Проверим метод зачета
			Область = ТаблицаДанных.Найти("s_300_00_0"+ Прав(ОбластьНачало,2) + "_b","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный Тогда
					Область.Значение = Область.Значение + СуммаНДС;
				Иначе
					Если Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Облагаемый Тогда
						Область.Значение = Область.Значение + СуммаНДС;
					ИначеЕсли Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Освобожденный Тогда
						Область.Значение = Область.Значение + 0;
					ИначеЕсли Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Общий Тогда
						Если  мПропорцИРаздел Тогда
							Область.Значение = Область.Значение + СуммаНДС;
						Иначе	
							Область.Значение = Область.Значение + Окр(СуммаНДС*СтруктураРеквизитовФормы.УдВес/100);
						КонецЕсли;						
					Иначе
						Если  мПропорцИРаздел Тогда
							Область.Значение = Область.Значение + СуммаНДС;
						Иначе	
							Область.Значение = Область.Значение + Окр(СуммаНДС*СтруктураРеквизитовФормы.УдВес/100);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		
			
		ИначеЕсли ОбластьНачало = "s_300_00_014" Тогда			
			// ничего не делаем, поскольку передаем данные из 300.05
							
		ИначеЕсли ОбластьНачало = "s_300_00_016_i" ИЛИ ОбластьНачало = "s_300_00_016_ii" Тогда			
			Если Прав(ОбластьНачало,2) = "_i" Тогда
				Н = "1";
			ИначеЕсли Прав(ОбластьНачало,3) = "_ii" Тогда
				Н = "2";
			Иначе 
				Н = "3";
			КонецЕсли;
			
			СуммаБезНДС = Окр(?(Строка.СуммаБезНДСОборот <> NULL, Строка.СуммаБезНДСОборот, 0));
			СуммаНДС    = Окр(?(Строка.СуммаНДСОборот <> NULL, Строка.СуммаНДСОборот, 0));							
			
			Область = ТаблицаДанных.Найти("s_300_00_016_" + Н + "_a","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + СуммаБезНДС;
			КонецЕсли;
			
			// Проверим метод зачета
			Область = ТаблицаДанных.Найти("s_300_00_016_" + Н + "_b","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный  Тогда
					Область.Значение = Область.Значение + СуммаНДС;
				Иначе
					Если Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Облагаемый Тогда
						Область.Значение = Область.Значение + СуммаНДС;
					ИначеЕсли Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Освобожденный Тогда
						Область.Значение = Область.Значение + 0;
					ИначеЕсли Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Общий Тогда
						Если  мПропорцИРаздел Тогда
							Область.Значение = Область.Значение + СуммаНДС;
						Иначе	
							Область.Значение = Область.Значение + Окр(СуммаНДС*СтруктураРеквизитовФормы.УдВес/100);
						КонецЕсли;
					Иначе
						Если  мПропорцИРаздел Тогда
							Область.Значение = Область.Значение + СуммаНДС;
						Иначе	
							Область.Значение = Область.Значение + Окр(СуммаНДС*СтруктураРеквизитовФормы.УдВес/100);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;		
			
		Иначе		
			ТекстСообщения = НСтр("ru = 'Данные по коду строки %1 , содержащиеся в регистре накопления %2 не учтены в форме.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодСтроки, ?(Строка.Раздел = "Возмещение","НДС к возмещению","НДС"));			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);													 
		КонецЕсли;
	КонецЦикла;
	// обновим реквизит формы
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);
	
	// Заполняем поле 11 "Представленные приложения"
	Для Каждого Форма Из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл            
		ИмяОбласти = "Приложение" + Прав(Форма.КодФормы,2);
		Если Форма300ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяОбласти) <> Неопределено Тогда
			//Строка = мСписокФормБезИерархии.Строки.Найти(Форма.КодФормы, "КодФормы");
			Если Форма.Выгружать = 1 Тогда
				РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, ИмяОбласти, "Х", Истина);				
			Иначе
				РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, ИмяОбласти, "", Истина);				
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;	
	
	// рассчитаем итоговые значения в 300.00.016, поскольку при заполнении в них не были переданы значения
	Знач300_00_016А = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_00_016_a")
					+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_00_016_1_a")
					+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_00_016_2_a");
					
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "s_300_00_016_a", Знач300_00_016А, Ложь);
	
	Знач300_00_016B = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_00_016_b")
					+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_00_016_1_b")
					+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_00_016_2_b");
					
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "s_300_00_016_b", Знач300_00_016B, Ложь);
	
	
	Для Ном = 1 По 2 Цикл
		мСтруктураЗначений.Вставить("s_300_00_016_" + Строка(Ном) + "_a", РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_00_016_" + Строка(Ном) + "_a"));
		мСтруктураЗначений.Вставить("s_300_00_016_" + Строка(Ном) + "_b", РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_00_016_" + Строка(Ном) + "_b"));
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);
	
	//
	// передаем в качестве признака перезаполнения Истина, т.к. это главная форма
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма,ТекИмяФормы, Истина);
	
	Модифицированность = Истина;	
	
КонецПроцедуры // Форма300ЗаполнитьАвтоНаСервере()

&НаКлиенте
Процедура Форма300ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Состояние("Расчет формы 300.00");		
	
	Форма300ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры	

//обход ситуации при очистки полей в клиент-сервер
&НаКлиенте
Процедура ПанельФорма300ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ПанельФорма300ПриСменеСтраницыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПанельФорма300ПриСменеСтраницыНаСервере()
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	
КонецПроцедуры

///////////////////////////////////////////////////////////////////
// ФОРМА 300.01

&НаКлиенте
Процедура Форма300_01ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма300_01Расчет(Область.Имя, Область.Значение);
	КонецЕсли;
	    	    
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Форма300_01Расчет(ИмяЯчейки, ЗначениеЯчейки)
	Форма300_01РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки)
КонецПроцедуры

&НаСервере
Процедура Форма300_01РасчетНаСервере(знач ИмяЯчейки, знач ЗначениеЯчейки)	
	ТекИмяФормы = "Форма300_01";
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,ИмяЯчейки ,ЗначениеЯчейки);
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);			
	 //Расчет вычисляемых ячеек
	
	
	s_300_01_001 	= РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_01_001");
	s_300_01_001_1 	= РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_01_001_1");
	s_300_01_001_2 	= РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_01_001_2");
	s_300_01_001_3 	= РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_01_001_3");
		
	s_300_01_001_1_до = 0;
	s_300_01_001_2_до = 0;
	s_300_01_001_3_до = 0;
	Если мСтруктураЗначений <> Неопределено И мСтруктураЗначений.Свойство("s_300_01_001_1")
		И мСтруктураЗначений.Свойство("s_300_01_001_2") Тогда 
		мСтруктураЗначений.Свойство("s_300_01_001_1",s_300_01_001_1_до);  //прежнее значение данной области 
		мСтруктураЗначений.Свойство("s_300_01_001_2",s_300_01_001_2_до);  //прежнее значение данной области 
		мСтруктураЗначений.Свойство("s_300_01_001_3",s_300_01_001_3_до);  //прежнее значение данной области 
		s_300_01_001 = s_300_01_001 - s_300_01_001_1_до + s_300_01_001_1 - s_300_01_001_2_до + s_300_01_001_2 - s_300_01_001_3_до + s_300_01_001_3;			
	Иначе
		s_300_01_001 = s_300_01_001 + s_300_01_001_1 + s_300_01_001_2 + s_300_01_001_3;
	КонецЕсли;
	
	мСтруктураЗначений.Вставить("s_300_01_001_1",s_300_01_001_1);  //новое значение данной области 
	мСтруктураЗначений.Вставить("s_300_01_001_2",s_300_01_001_2);  //новое значение данной области 
	мСтруктураЗначений.Вставить("s_300_01_001_3",s_300_01_001_3);  //новое значение данной области 
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_01_001",s_300_01_001, Форма300_01ПолеТабличногоДокументаСтраница1);
	//Форма300_01ПолеТабличногоДокументаСтраница1.Области["s_300_01_001"].Значение = s_300_01_001;
	
	// если итоговое значение ввели меньше чем сумма входящих значений
	// то очищаем все значения
	Если s_300_01_001 < s_300_01_001_1 + s_300_01_001_2 + s_300_01_001_3 Тогда                         
		мСтруктураЗначений.Вставить("s_300_01_001_1",0);  //новое значение данной области 
		мСтруктураЗначений.Вставить("s_300_01_001_2",0);  //новое значение данной области 
		мСтруктураЗначений.Вставить("s_300_01_001_3",0);  //новое значение данной области 
		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_01_001_1",0, Форма300_01ПолеТабличногоДокументаСтраница1);
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_01_001_2",0, Форма300_01ПолеТабличногоДокументаСтраница1);
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_01_001_3",0, Форма300_01ПолеТабличногоДокументаСтраница1);		
	КонецЕсли;
		
	s_300_01_004 = 0; // итого  (с s_300_01_001 по s_300_01_003)
	s_300_01_008 = 0; // итого  (с s_300_01_008 по s_300_01_007)
	
	Для Н = 1 По 3 Цикл
		ИмяГрафы = "s_300_01_00" + Строка(Н);
		s_300_01_004 = s_300_01_004 + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяГрафы);
	КонецЦикла;
	
	Для Н = 5 По 7 Цикл
		ИмяГрафы = "s_300_01_0" + Формат(Н,"ЧЦ=2; ЧВН=");
		s_300_01_008 = s_300_01_008 + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяГрафы);
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_01_004", s_300_01_004, Форма300_01ПолеТабличногоДокументаСтраница1);
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_01_008", s_300_01_008, Форма300_01ПолеТабличногоДокументаСтраница1);
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);			
	
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ТекИмяФормы);
КонецПроцедуры

&НаСервере
Функция Форма300_01РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
    Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("НачПериода", 	  СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", 	  Новый Граница(КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СтавкаНДС",		  0);
	Запрос.УстановитьПараметр("КодСтроки", 		  "300.01%" );	

	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(НДСОбороты.ОборотПоРеализацииОборот) КАК ОборотПоРеализацииОборот,
	               |	КодыСтрокДекларацииПоНДС.КодСтроки
	               |ИЗ
	               |	РегистрНакопления.НДС.Обороты(
	               |		&НачПериода,
	               |		&КонПериода,
	               |		,
	               |		Налогоплательщик = &Налогоплательщик
	               |			И СтавкаНДС.Ставка = &СтавкаНДС
	               |			И (НЕ СтавкаНДС.ДляОсвобожденногоОборота) И (НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСОблагаемыйИмпорт))) КАК НДСОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДС.СрезПоследних(&КонПериода, ) КАК КодыСтрокДекларацииПоНДС
	               |		ПО НДСОбороты.ВидОперацииРеализации = КодыСтрокДекларацииПоНДС.ВидОперации
	               |
				   |ГДЕ
	               |	КодыСтрокДекларацииПоНДС.КодСтроки ПОДОБНО &КодСтроки				   
				   |СГРУППИРОВАТЬ ПО
	               |	КодыСтрокДекларацииПоНДС.КодСтроки" ;
	
	РезультатЗапроса = Запрос.Выполнить();          	
	Если РезультатЗапроса.Пустой() И ВыдаватьСообщения Тогда		
		ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 300.01 за отчетный период отсутствуют...'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);													 
	КонецЕсли;
	
    Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции // Форма300_01РассчитатьДанныеФормы()

&НаКлиенте
Процедура Форма300_01ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Состояние("Расчет формы 300.01");		
	
	Форма300_01ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры	

&НаСервере
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма300_01ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма300_01";
	Очистить(ТекИмяФормы,Истина);
	
	ТаблицаОтчета = Форма300_01РассчитатьДанныеФормы(Истина);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);
	
	Для Каждого Строка Из ТаблицаОтчета Цикл
	    ОбластьНачало = РегламентированнаяОтчетностьКлиентСервер.ПреобразоватьКодДекларации(Строка.КодСтроки);
		Если ОбластьНачало = "s_300_01_001" Тогда
			Область = ТаблицаДанных.Найти("s_300_01_001","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + Окр(?(Строка.ОборотПоРеализацииОборот <> NULL, Строка.ОборотПоРеализацииОборот, 0));
			КонецЕсли;
		ИначеЕсли ОбластьНачало = "s_300_01_001_i" Тогда
			Область = ТаблицаДанных.Найти("s_300_01_001_1","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + Окр(?(Строка.ОборотПоРеализацииОборот <> NULL, Строка.ОборотПоРеализацииОборот, 0));			
			КонецЕсли;
		ИначеЕсли ОбластьНачало = "s_300_01_001_ii" Тогда
			Область = ТаблицаДанных.Найти("s_300_01_001_2","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + Окр(?(Строка.ОборотПоРеализацииОборот <> NULL, Строка.ОборотПоРеализацииОборот, 0));
			КонецЕсли;
		ИначеЕсли ОбластьНачало = "s_300_01_001_iii" Тогда
			Область = ТаблицаДанных.Найти("s_300_01_001_3","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + Окр(?(Строка.ОборотПоРеализацииОборот <> NULL, Строка.ОборотПоРеализацииОборот, 0));
			КонецЕсли;
		ИначеЕсли ОбластьНачало = "s_300_01_002" Тогда
			Область = ТаблицаДанных.Найти("s_300_01_002","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + Окр(?(Строка.ОборотПоРеализацииОборот <> NULL, Строка.ОборотПоРеализацииОборот, 0));
			КонецЕсли;
		ИначеЕсли ОбластьНачало = "s_300_01_003" Тогда
			Область = ТаблицаДанных.Найти("s_300_01_003","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + Окр(?(Строка.ОборотПоРеализацииОборот <> NULL, Строка.ОборотПоРеализацииОборот, 0));
			КонецЕсли;
		ИначеЕсли ОбластьНачало = "s_300_01_004" Тогда
			Область = ТаблицаДанных.Найти("s_300_01_004","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + Окр(?(Строка.ОборотПоРеализацииОборот <> NULL, Строка.ОборотПоРеализацииОборот, 0));
			КонецЕсли;
		ИначеЕсли ОбластьНачало = "s_300_01_005" Тогда
			Область = ТаблицаДанных.Найти("s_300_01_005","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + Окр(?(Строка.ОборотПоРеализацииОборот <> NULL, Строка.ОборотПоРеализацииОборот, 0));
			КонецЕсли;
	    ИначеЕсли ОбластьНачало = "s_300_01_006" Тогда
			Область = ТаблицаДанных.Найти("s_300_01_006","ИмяОбласти");
			Если Область <> Неопределено Тогда
				Область.Значение = Область.Значение + Окр(?(Строка.ОборотПоРеализацииОборот <> NULL, Строка.ОборотПоРеализацииОборот, 0));
			КонецЕсли;
		Иначе
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Данные по коду строки %1, содержащиеся в регистре накопления ""НДС"" не учтены в форме.'", Строка.КодСтроки));			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);				
		КонецЕсли;		
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);	
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма,ТекИмяФормы,Перезаполнить);	         			
КонецПроцедуры // Форма300_01ЗаполнитьАвтоНаСервере()


///////////////////////////////////////////////////////////////////
// ФОРМА 300.02

&НаКлиенте
Процедура Форма300_02ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма300_02Расчет(Область.Имя, Область.Значение);
	КонецЕсли;
	    	    
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Форма300_02Расчет(ИмяЯчейки, ЗначениеЯчейки)
	Форма300_02РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки)
КонецПроцедуры

&НаСервере
Процедура Форма300_02РасчетНаСервере(знач ИмяЯчейки, знач ЗначениеЯчейки)
	ТекИмяФормы = "Форма300_02";
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,ИмяЯчейки ,ЗначениеЯчейки);
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);			
	
	//Расчет вычисляемых ячеек	
	S_300_02_001 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_001");
	S_300_02_002 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_002");
	S_300_02_003 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_003");
	S_300_02_004 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_004");
	S_300_02_005 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_005");
	
	ИтогЗначение = S_300_02_001 + S_300_02_002 + S_300_02_003 + S_300_02_004 + S_300_02_005;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_02_006", ИтогЗначение, Форма300_02ПолеТабличногоДокументаСтраница1);
		
	// расчет по строкам 300.02.007
	s_300_02_007     = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_02_007");
	s_300_02_007_i   = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_02_007_i");
	s_300_02_007_ii  = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_02_007_ii");
	s_300_02_007_iii = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_02_007_iii");
	s_300_02_007_iv  = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_02_007_iv");
	s_300_02_007_v   = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_02_007_v");
	
	
	s_300_02_007_i_до = 0;
	s_300_02_007_ii_до = 0;
	s_300_02_007_iii_до = 0;
	s_300_02_007_iv_до = 0;
	s_300_02_007_v_до = 0;
	Если мСтруктураЗначений <> Неопределено И мСтруктураЗначений.Свойство("s_300_02_007_i")
		И мСтруктураЗначений.Свойство("s_300_02_007_ii")
		И мСтруктураЗначений.Свойство("s_300_02_007_iii")
		И мСтруктураЗначений.Свойство("s_300_02_007_iv")
		И мСтруктураЗначений.Свойство("s_300_02_007_v") Тогда 
		
		мСтруктураЗначений.Свойство("s_300_02_007_i",s_300_02_007_i_до);  //прежнее значение данной области 
		мСтруктураЗначений.Свойство("s_300_02_007_ii",s_300_02_007_ii_до);  //прежнее значение данной области 
		мСтруктураЗначений.Свойство("s_300_02_007_iii",s_300_02_007_iii_до);  //прежнее значение данной области 
		мСтруктураЗначений.Свойство("s_300_02_007_iv",s_300_02_007_iv_до);  //прежнее значение данной области 
		мСтруктураЗначений.Свойство("s_300_02_007_v",s_300_02_007_v_до);  //прежнее значение данной области 
		s_300_02_007 = s_300_02_007 - s_300_02_007_i_до + s_300_02_007_i - s_300_02_007_ii_до + s_300_02_007_ii
		- s_300_02_007_iii_до + s_300_02_007_iii - s_300_02_007_iv_до + s_300_02_007_iv
		- s_300_02_007_v_до + s_300_02_007_v;
	Иначе
		s_300_02_007 = s_300_02_007 + s_300_02_007_i + s_300_02_007_ii + s_300_02_007_iii + s_300_02_007_iv
		+ s_300_02_007_v;
	КонецЕсли;
	мСтруктураЗначений.Вставить("s_300_02_007_i",s_300_02_007_i);  //новое значение данной области 
	мСтруктураЗначений.Вставить("s_300_02_007_ii",s_300_02_007_ii);  //новое значение данной области 
	мСтруктураЗначений.Вставить("s_300_02_007_iii",s_300_02_007_iii);  //новое значение данной области 
	мСтруктураЗначений.Вставить("s_300_02_007_iv",s_300_02_007_iv);  //новое значение данной области 
	мСтруктураЗначений.Вставить("s_300_02_007_v",s_300_02_007_v);  //новое значение данной области 
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_02_007", s_300_02_007, Форма300_02ПолеТабличногоДокументаСтраница1);		
	
	// если итоговое значение ввели меньше чем сумма входящих значений
	// то очищаем все значения
	Если s_300_02_007 < s_300_02_007_i + s_300_02_007_ii + s_300_02_007_iii + s_300_02_007_iv + s_300_02_007_v  Тогда                         
		мСтруктураЗначений.Вставить("s_300_02_007_i",0);  //новое значение данной области 
		мСтруктураЗначений.Вставить("s_300_02_007_ii",0);  //новое значение данной области 
		мСтруктураЗначений.Вставить("s_300_02_007_iii",0);  //новое значение данной области 
		мСтруктураЗначений.Вставить("s_300_02_007_iv",0);  //новое значение данной области 
		мСтруктураЗначений.Вставить("s_300_02_007_v",0);  //новое значение данной области 
		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_02_007_i", 0, Форма300_02ПолеТабличногоДокументаСтраница1);		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_02_007_ii", 0, Форма300_02ПолеТабличногоДокументаСтраница1);		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_02_007_iii", 0, Форма300_02ПолеТабличногоДокументаСтраница1);		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_02_007_iv", 0, Форма300_02ПолеТабличногоДокументаСтраница1);		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_02_007_v", 0, Форма300_02ПолеТабличногоДокументаСтраница1);						
	КонецЕсли;	
	
	S_300_02_007 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_007");
	S_300_02_008 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_008");
	S_300_02_009 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_009");
	S_300_02_010 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_010");
	
	ИтогЗначение = S_300_02_007 + S_300_02_008 + S_300_02_009 + S_300_02_010;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_02_011", ИтогЗначение, Форма300_02ПолеТабличногоДокументаСтраница2);						
		
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);			
	
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ТекИмяФормы);
КонецПроцедуры

&НаСервере
Функция Форма300_02РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
  Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Налогоплательщик", 	Налогоплательщик);
	Запрос.УстановитьПараметр("НачПериода",			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", 		Новый Граница(КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КодСтроки",			"300.02.%" );
	
	КодСтрокИмпорта = Новый Массив;
	КодСтрокИмпорта.Добавить("300.02.008");
	КодСтрокИмпорта.Добавить("300.02.009");
	КодСтрокИмпорта.Добавить("300.02.010");
	
	Запрос.УстановитьПараметр("КодСтроки007",       "300.02.007%");		
	Запрос.УстановитьПараметр("КодСтрокИмпорта",    КодСтрокИмпорта);
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КодыСтрокДекларацииПоНДС.КодСтроки,
	               |	СУММА(НДСОбороты.ОборотПоРеализацииОборот) КАК Сумма,
	               |	""Реализация"" КАК Раздел
	               |ИЗ
	               |	РегистрНакопления.НДС.Обороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			,
	               |			Налогоплательщик = &Налогоплательщик
	               |				И СтавкаНДС.ДляОсвобожденногоОборота = ИСТИНА И (НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСОблагаемыйИмпорт))) КАК НДСОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДС.СрезПоследних(&КонПериода, ) КАК КодыСтрокДекларацииПоНДС
	               |		ПО НДСОбороты.ВидОперацииРеализации = КодыСтрокДекларацииПоНДС.ВидОперации
	               |ГДЕ
	               |	КодыСтрокДекларацииПоНДС.КодСтроки ПОДОБНО &КодСтроки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КодыСтрокДекларацииПоНДС.КодСтроки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки,
	               |	СУММА(НДСКВозмещениюОбороты.СуммаБезНДСОборот),
	               |	""Возмещение""
	               |ИЗ
	               |	РегистрНакопления.НДСКВозмещению.Обороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			,
	               |			Налогоплательщик = &Налогоплательщик
	               |				И СтавкаНДС.ДляОсвобожденногоОборота = ИСТИНА) КАК НДСКВозмещениюОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДСКЗачету.СрезПоследних КАК КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних
	               |		ПО НДСКВозмещениюОбороты.ВидОборота = КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОборота
	               |			И НДСКВозмещениюОбороты.ВидОперацииПоступления = КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОперации
	               |ГДЕ
	               |	(КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки ПОДОБНО &КодСтроки007
	               |			ИЛИ КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки В (&КодСтрокИмпорта))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();          	
	Если РезультатЗапроса.Пустой() И ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 300.02 за отчетный период отсутствуют...'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);													 
	КонецЕсли;
	
    Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции // Форма300_02РассчитатьДанныеФормы()

&НаКлиенте
Процедура Форма300_02ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Состояние("Расчет формы 300.02");		
	
	Форма300_02ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры	

&НаСервере
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма300_02ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма300_02";
	Очистить(ТекИмяФормы,Истина);
	
	ТаблицаОтчета = Форма300_02РассчитатьДанныеФормы(Истина);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);
	
	Для Каждого Строка Из ТаблицаОтчета Цикл
		ИмяСтроки = РегламентированнаяОтчетностьКлиентСервер.ПреобразоватьКодДекларации(Строка.КодСтроки);				
		// Добавим к существующему значению
		Если ТаблицаДанных.Найти(ИмяСтроки, "ИмяОбласти") <> Неопределено Тогда
			ЗначениеСтроки = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяСтроки) + Окр(?(Строка.Сумма <> NULL, Строка.Сумма, 0));
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяСтроки, ЗначениеСтроки);		
			
			// Если это подстрока другой строки, то добавим к итогам
			Если СтрДлина(ИмяСтроки) > 13 Тогда
				ИмяИтоговойСтроки =  Лев(ИмяСтроки,12);
				ОбластьИтог = ТаблицаДанных.Найти(ИмяИтоговойСтроки, "ИмяОбласти");
				Если ОбластьИтог <> Неопределено Тогда
					ОбластьИтог.Значение = ОбластьИтог.Значение + Окр(?(Строка.Сумма <> NULL, Строка.Сумма, 0));
				КонецЕсли;
			КонецЕсли;				
		Иначе						
			ТекстСообщения = НСтр("ru = 'Данные по коду строки %1, содержащиеся в регистре накопления  %2 не учтены в форме.'");								
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодСтроки,  ?(Строка.Раздел = "Возмещение","НДС к возмещению","НДС"));			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
		КонецЕсли;
				
	КонецЦикла;
	
	// заполним значения в структуре для последующего правильного авторасчета ячеек	
	мСтруктураЗначений.Вставить("s_300_02_007_i", 	РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_007_i"));
	мСтруктураЗначений.Вставить("s_300_02_007_ii", 	РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_007_ii"));
	мСтруктураЗначений.Вставить("s_300_02_007_iii", РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_007_iii"));
	мСтруктураЗначений.Вставить("s_300_02_007_iv", 	РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_007_iv"));
	мСтруктураЗначений.Вставить("s_300_02_007_v", 	РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_02_007_v"));
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);				
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтотОбъект,ТекИмяФормы,Перезаполнить);	         			
КонецПроцедуры // Форма300_02ЗаполнитьАвтоНаСервере()


///////////////////////////////////////////////////////////////////
// ФОРМА 300.03

&НаКлиенте
Процедура  Форма300_03ОбработкаВыбораЗначений(Результат, ПараметрыВыбора) экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли ПараметрыВыбора.ЭлементВыбора  =  "КодВидаИмпорта"  Тогда
		// список выбора
		ВыбранныйЭлемент = Результат.Значение
	Иначе
		ВыбранныйЭлемент = Результат;
	КонецЕсли;
	
	Форма300_03ОбработкаВыбораЗначенийНаСервере(ВыбранныйЭлемент, ПараметрыВыбора); 	
КонецПроцедуры

&НаСервере
Процедура  Форма300_03ОбработкаВыбораЗначенийНаСервере(Результат, ПараметрыВыбора)
	Попытка
		НомерЯчейки = Число(Сред(ПараметрыВыбора.Ячейка, Найти(ПараметрыВыбора.Ячейка, "__")+ 2));		
	Исключение
		
	КонецПопытки;
	
	Форма300_03ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы, ПараметрыВыбора.Ячейка, Результат, Результат, ПараметрыВыбора.ПризнакРасчета);		
КонецПроцедуры

&НаКлиенте
Процедура Форма300_03ПолеТабличногоДокументаЛистAВыбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Элемент.ТекущаяОбласть.Имя;	
	Если (Найти(Ячейка, "Ф300_03") = 0) Тогда
		Возврат;
	КонецЕсли;		
	Значение = Элемент.ТекущаяОбласть.Значение;
	
	ТекИмяФормы = "Форма300_03";
	ИмяЛиста 	= "ЛистA";
	ПризнакРасчета = Ложь;        	
		
	Если Найти(Ячейка, "Ф300_03_B__")> 0 Тогда				
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "КодВидаИмпорта", ПризнакРасчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_03ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("","Пустое значение"); 
		СписокВыбора.Добавить("1","Импорт товаров для промышленной переработки"); 
		СписокВыбора.Добавить("2","Импорт воды, газа, электроэнергии"); 
		
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения,"Выберите код вида импорта");
	
	 ИначеЕсли (Найти(Ячейка, "Ф300_03_C__") > 0) Тогда
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "НомерГТД", ПризнакРасчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_03ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		ОткрытьФорму("Справочник.НомераГТД.ФормаВыбора",,ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		ПризнакРасчета = Истина;
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Показатели", ПризнакРасчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_03ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);		
		
		Если Найти(Ячейка, "Ф300_03_D__") > 0 Тогда
			ПоказатьВводЧисла(ОписаниеОповещения, Значение, "Введите сумму НДС согласно ГТД", 12,0);					
		 ИначеЕсли Найти(Ячейка, "Ф300_03_E__") > 0 Тогда
			ПоказатьВводДаты(ОписаниеОповещения, Значение, "Введите срок платежа", ЧастиДаты.Дата)
		ИначеЕсли Найти(Ячейка, "Ф300_03_D1") > 0  ИЛИ Найти(Ячейка, "Ф300_03_D2") > 0 Тогда
			 ПоказатьВводЧисла(ОписаниеОповещения, Значение, "Введите итоговую сумму", 12,0);			 			 
		 КонецЕсли;	 		
	КонецЕсли;  	
КонецПроцедуры

&НаКлиенте
Процедура Форма300_03ПолеТабличногоДокументаЛистBВыбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Элемент.ТекущаяОбласть.Имя;	
	Если (Найти(Ячейка, "Ф300_03") = 0) Тогда
		Возврат;
	КонецЕсли;
	Значение = Элемент.ТекущаяОбласть.Значение;
	
	ТекИмяФормы = "Форма300_03";
	ИмяЛиста 	= "ЛистB";
	ПризнакРасчета = Истина;        	
	
	Если (Найти(Ячейка, "Ф300_03_") > 0) Тогда
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Показатели", ПризнакРасчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_03ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		 Если Найти(Ячейка, "Ф300_03_F__") > 0 Тогда			 
			 ПоказатьВводЧисла(ОписаниеОповещения, Значение, "Введите сумму НДС, погашенного в отчетном периоде", 12,0);
			 
		 ИначеЕсли (Найти(Ячейка, "Ф300_03_G__") > 0) Тогда
			 ПоказатьВводЧисла(ОписаниеОповещения, Значение, "Введите сумму погашенного НДС в предыдущие налоговые периоды", 12,0);
		 ИначеЕсли (Найти(Ячейка, "Ф300_03_F1") > 0) 
			 ИЛИ (Найти(Ячейка, "Ф300_03_F2") > 0) 
			 ИЛИ (Найти(Ячейка, "Ф300_03_G1") > 0) 
			 ИЛИ (Найти(Ячейка, "Ф300_03_G2") > 0) Тогда
			 
			 ПоказатьВводЧисла(ОписаниеОповещения, Значение, "Введите итоговую сумму", 12,0);
		 КонецЕсли;		 		 
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Форма300_03ПолеТабличногоДокументаЛистCВыбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Элемент.ТекущаяОбласть.Имя;	
	Если (Найти(Ячейка, "Ф300_03") = 0) Тогда
		Возврат;
	КонецЕсли;
	Значение = Элемент.ТекущаяОбласть.Значение;
	
	ТекИмяФормы = "Форма300_03";
	ИмяЛиста 	= "ЛистC";
	ПризнакРасчета = Истина;     
	
	Если Найти(Ячейка, "Ф300_03_I__")> 0 Тогда
		ТекущийКодСтроки = ?(НЕ ЗначениеЗаполнено(Формат(Значение,"ЧГ=")), Неопределено, СокрЛП(Формат(Значение,"ЧГ=")));
		ПризнакРасчета = Ложь;
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "КодБюджетнойКлассифкации", ПризнакРасчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_03ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		ПараметрыФормы =  Новый Структура();
		ПараметрыФормы.Вставить("ИмяСекции", "Классификатор");
		ПараметрыФормы.Вставить("ИмяМакета", "КодыБюджетнойКлассификации");
		ПараметрыФормы.Вставить("ТекущийКодСтроки", ТекущийКодСтроки);
		 
		ФормаВыбора = ПолучитьФорму("ОбщаяФорма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма);	
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		 
	ИначеЕсли Найти(Ячейка, "Ф300_03_") > 0 Тогда
	
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Показатели", ПризнакРасчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_03ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		ПризнакРасчета = Истина;
		Если (Найти(Ячейка, "Ф300_03_J__") > 0) Тогда
			
			ПоказатьВводЧисла(ОписаниеОповещения, Значение, "Введите сумму уплаченного НДС в отчетном периоде", 12,0);
			
		 ИначеЕсли (Найти(Ячейка, "Ф300_03_K__") > 0) Тогда
			 
			 ПоказатьВводЧисла(ОписаниеОповещения, Значение, "Введите сумму уплаченного НДС в предыдущие налоговые периоды", 12,0);
				 
		 // Заполним вручную итоговые ячейки
	     ИначеЕсли (Найти(Ячейка, "Ф300_03_J1") > 0)
		       ИЛИ (Найти(Ячейка, "Ф300_03_J2") > 0) Тогда
			 ПоказатьВводЧисла(ОписаниеОповещения, Значение, "Введите итоговую сумму", 12,0);			 	 
			 
		 ИначеЕсли (Найти(Ячейка, "Ф300_03_K1") > 0) 
			   ИЛИ (Найти(Ячейка, "Ф300_03_K2") > 0) Тогда
			 
			 ПоказатьВводЧисла(ОписаниеОповещения, Значение, "Введите итоговую сумму", 12,0);
		 КонецЕсли;		 		 	
	 КонецЕсли;		
	 
КонецПроцедуры

&НаСервере
Процедура Форма300_03ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка, Значение, ЗначениеРасшифровки, ПризнакРасчета)
	
	ЭтотОбъект["Форма300_03ПолеТабличногоДокумента" + ИмяЛиста].Области[Ячейка].Значение = Значение;
	ЭтотОбъект["Форма300_03ПолеТабличногоДокумента" + ИмяЛиста].Области[Ячейка].Расшифровка = ЗначениеРасшифровки;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтотОбъект, ИмяЛиста, Ячейка, Значение, ПризнакРасчета, ЗначениеРасшифровки);		
	
	Если  Найти(Ячейка, "Ф300_03_J") > 0 Тогда
		ИтоговоеЗначение = ЭтотОбъект["Форма300_03ПолеТабличногоДокумента" + ИмяЛиста].Области.Ф300_03_J1.Значение + ЭтотОбъект["Форма300_03ПолеТабличногоДокумента" + ИмяЛиста].Области.Ф300_03_J2.Значение;
		ЭтотОбъект["Форма300_03ПолеТабличногоДокумента" + ИмяЛиста].Области.Знач300_03_J.Значение = ИтоговоеЗначение;
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтотОбъект, ИмяЛиста, "Знач300_03_J", ИтоговоеЗначение, Ложь, ИтоговоеЗначение);	
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ЭтотОбъект.КодФормы);
	КонецЕсли;

КонецПроцедуры

&НаСервере
// Процедура расчитывает значения определенных граф по строке
// многострочной формы.
//
// Параметры:
//      Инд - номер строки многострочной формы
//      Колонка - имя графы (ячейки), из которой была вызвана процедура расчета
//
Процедура Форма300_03РасчетНаСервере(знач Инд, знач Колонка)
	
	// Если Инд = 0, значит процедура вызвана из ячеек шапки и подвала
	
	Перем СтруктураГруппы;
	
	ТекИмяФормы = "Форма300_03";
	
	Если ЗначениеЗаполнено(Инд)  Тогда
		Индекс = Инд-1;
	КонецЕсли;
	
	мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект);
	//рассчитаем вычисляемые ячейки
	// H = D - (F + G)
	мМногострочнаяСтруктура.Свойство("ЛистA", СтруктураГруппы);
	ОбщиеЭлементыГруппы = СтруктураГруппы.ШапкаИПодвал; 
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
	    	
	Если Инд <> 0 Тогда
		D = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф300_03_D = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф300_03_D);	
	Иначе
		D1 = ?(ОбщиеЭлементыГруппы.Найти("Ф300_03_D1", "ИмяОбласти") = Неопределено, 0, ОбщиеЭлементыГруппы.Найти("Ф300_03_D1", "ИмяОбласти").Значение);	 
		D1 = ?(D1 = Неопределено, 0, D1);
		D2 = ?(ОбщиеЭлементыГруппы.Найти("Ф300_03_D2", "ИмяОбласти") = Неопределено, 0, ОбщиеЭлементыГруппы.Найти("Ф300_03_D2", "ИмяОбласти").Значение);	 	
		D2 = ?(D2 = Неопределено, 0, D2);
	КонецЕсли;	
	
	мМногострочнаяСтруктура.Свойство("ЛистB", СтруктураГруппы);
	ОбщиеЭлементыГруппы = СтруктураГруппы.ШапкаИПодвал; 
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
	
	Если Инд <> 0 Тогда
		F = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф300_03_F = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф300_03_F);
	Иначе
		F1 = ?(ОбщиеЭлементыГруппы.Найти("Ф300_03_F1", "ИмяОбласти") = Неопределено, 0, ОбщиеЭлементыГруппы.Найти("Ф300_03_F1", "ИмяОбласти").Значение);	 
		F1  = ?(F1  = Неопределено, 0, F1);
		F2 = ?(ОбщиеЭлементыГруппы.Найти("Ф300_03_F2", "ИмяОбласти") = Неопределено, 0, ОбщиеЭлементыГруппы.Найти("Ф300_03_F2", "ИмяОбласти").Значение);	 
		F2  = ?(F2  = Неопределено, 0, F2);
	КонецЕсли;
	
	Если Инд <> 0 Тогда
		G = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф300_03_G = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф300_03_G);
	Иначе
		G1 = ?(ОбщиеЭлементыГруппы.Найти("Ф300_03_G1", "ИмяОбласти") = Неопределено, 0, ОбщиеЭлементыГруппы.Найти("Ф300_03_G1", "ИмяОбласти").Значение);	 
		G1  = ?(G1  = Неопределено, 0, G1);
		G2 = ?(ОбщиеЭлементыГруппы.Найти("Ф300_03_G2", "ИмяОбласти") = Неопределено, 0, ОбщиеЭлементыГруппы.Найти("Ф300_03_G2", "ИмяОбласти").Значение);	 
		G2  = ?(G2  = Неопределено, 0, G2);
	КонецЕсли;
	
	Если Инд <> 0 Тогда
		ТаблицаСтрокГруппы.Получить(Индекс).Ф300_03_H = D - (F+G);	
		Форма300_03ПолеТабличногоДокументаЛистB.Области["Ф300_03_H__"+ Строка(Инд)].Значение = D - (F+G);
		//Если ТекущаяСтраница <> Неопределено И ТекущаяСтраница = 1 Тогда 
		//	ЭлементыФормы.Форма300_03ПолеТабличногоДокументаЛистB.Области["Ф300_03_H"].Значение = ТаблицаСтрокГруппы.Итог("Ф300_03_H"); 
		//КонецЕсли;
	Иначе
		ОбщиеЭлементыГруппы.Найти("Ф300_03_H1", "ИмяОбласти").Значение = D1 - (F1+G1);
		Форма300_03ПолеТабличногоДокументаЛистB.Области["Ф300_03_H1"].Значение = D1 - (F1+G1);
		ОбщиеЭлементыГруппы.Найти("Ф300_03_H2", "ИмяОбласти").Значение = D2 - (F2+G2);
		Форма300_03ПолеТабличногоДокументаЛистB.Области["Ф300_03_H2"].Значение = D2 - (F2+G2);
	КонецЕсли;
	
	//рассчитаем вычисляемые ячейки
	//L = D-(F+G+J+K)                                                                            	
	
	мМногострочнаяСтруктура.Свойство("ЛистC", СтруктураГруппы);
	ОбщиеЭлементыГруппы = СтруктураГруппы.ШапкаИПодвал; 
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
	
	Если Инд <> 0 Тогда
		J = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф300_03_J = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф300_03_J);
	Иначе
		J1 = ?(ОбщиеЭлементыГруппы.Найти("Ф300_03_J1", "ИмяОбласти") = Неопределено, 0, ОбщиеЭлементыГруппы.Найти("Ф300_03_J1", "ИмяОбласти").Значение);	 		
		J1 = ?(J1  = Неопределено, 0, J1);
		J2 = ?(ОбщиеЭлементыГруппы.Найти("Ф300_03_J2", "ИмяОбласти") = Неопределено, 0, ОбщиеЭлементыГруппы.Найти("Ф300_03_J2", "ИмяОбласти").Значение);	 
		J2 = ?(J2  = Неопределено, 0, J2);
	КонецЕсли;
	
	Если Инд <> 0 Тогда
		K = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф300_03_K = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф300_03_K);
	Иначе
		K1 = ?(ОбщиеЭлементыГруппы.Найти("Ф300_03_K1", "ИмяОбласти") = Неопределено, 0, ОбщиеЭлементыГруппы.Найти("Ф300_03_K1", "ИмяОбласти").Значение);	 
		K1 = ?(K1  = Неопределено, 0, K1);
		K2 = ?(ОбщиеЭлементыГруппы.Найти("Ф300_03_K2", "ИмяОбласти") = Неопределено, 0, ОбщиеЭлементыГруппы.Найти("Ф300_03_K2", "ИмяОбласти").Значение);	 
		K2 = ?(K2  = Неопределено, 0, K2);
	КонецЕсли;
	
	Если Инд <> 0 Тогда
		//вычислим Сумму НДС непогашенного в течение 3-х месячного периода
		ТаблицаСтрокГруппы.Получить(Индекс).Ф300_03_L = D - (F+G+J+K);
		Форма300_03ПолеТабличногоДокументаЛистC.Области["Ф300_03_L__"+ Строка(Инд)].Значение = D - (F+G+J+K);
		//Если ТекущаяСтраница <> Неопределено И ТекущаяСтраница = 1 Тогда 
		//	ЭлементыФормы.Форма300_03ПолеТабличногоДокументаЛистC.Области["Ф300_03_L"].Значение = ТаблицаСтрокГруппы.Итог("Ф300_03_L"); 
		//КонецЕсли;
	Иначе
		ОбщиеЭлементыГруппы.Найти("Ф300_03_L1", "ИмяОбласти").Значение = D1 - (F1+G1+J1+K1);
		Форма300_03ПолеТабличногоДокументаЛистC.Области["Ф300_03_L1"].Значение = D1 - (F1+G1+J1+K1);
		ОбщиеЭлементыГруппы.Найти("Ф300_03_L2", "ИмяОбласти").Значение = D2 - (F2+G2+J2+K2);
		Форма300_03ПолеТабличногоДокументаЛистC.Области["Ф300_03_L2"].Значение = D2 - (F2+G2+J2+K2);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы, мМногострочнаяСтруктура);
	Модифицированность = Истина;	
	 	
КонецПроцедуры // Форма300_03Расчет()

&НаСервере
Функция Форма300_03РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
	Запрос =  Новый Запрос;
	
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("НачПериода",		  СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", 	  Новый Граница(КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), ВидГраницы.Включая));	
	Запрос.УстановитьПараметр("ДатаКонПериода",   КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));	
	Запрос.УстановитьПараметр("ВидНДС", 	Перечисления.ВидыНДС.НДССИзменениемСрокаУплаты);
	Запрос.УстановитьПараметр("Зачет", 		Перечисления.ВидыВзаиморасчетовСБюджетом.Зачет);
	Запрос.УстановитьПараметр("Уплата", 	Перечисления.ВидыВзаиморасчетовСБюджетом.Уплата);
	
	СписокКодовСтрок = Новый СписокЗначений;
	СписокКодовСтрок.Добавить("300.03.001");
	СписокКодовСтрок.Добавить("300.03.002");
    Запрос.УстановитьПараметр("КодыСтрок",  СписокКодовСтрок); 
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	БазовыйЗапрос.ГТД,
	               |	БазовыйЗапрос.СрокПлатежа,
	               |	БазовыйЗапрос.СуммаНДСПоГТД,
	               |	ОборотыПоПогашению.ЗачетПредыдущегоПериода,
	               |	ОборотыПоПогашению.ЗачетТекущегоПериода,
	               |	ОборотыПоПогашению.УплатаПредыдущегоПериода,
	               |	ОборотыПоПогашению.УплатаТекущегоПериода,
	               |	БазовыйЗапрос.ЗадолженностьПоНДС,
	               |	БазовыйЗапрос.ГТД.Код КАК НомерГТД,
	               |	БазовыйЗапрос.ВидОперацииПоступления,
	               |	КодыСтрокДекларации.КодСтроки
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		НДССИзмененнымСрокомУплатыОстаткиИОбороты.ГТД КАК ГТД,
	               |		НДССИзмененнымСрокомУплатыОстаткиИОбороты.ГТД.Код КАК НомерГТД,
	               |		НДССИзмененнымСрокомУплатыОстаткиИОбороты.СрокПлатежа КАК СрокПлатежа,
	               |		СУММА(НДССИзмененнымСрокомУплатыОстаткиИОбороты.СуммаНДСПриход) КАК СуммаНДСПоГТД,
	               |		СУММА(НДССИзмененнымСрокомУплатыОстаткиИОбороты.СуммаНДСКонечныйОстаток) КАК ЗадолженностьПоНДС,
	               |		НДССИзмененнымСрокомУплатыОстаткиИОбороты.ВидОперацииПоступления КАК ВидОперацииПоступления
	               |	ИЗ
	               |		РегистрНакопления.НДССИзмененнымСрокомУплаты.ОстаткиИОбороты(
	               |				,
	               |				&КонПериода,
	               |				,
	               |				,
	               |				ВидНалогаНДС = &ВидНДС
	               |					И Налогоплательщик = &Налогоплательщик) КАК НДССИзмененнымСрокомУплатыОстаткиИОбороты
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		НДССИзмененнымСрокомУплатыОстаткиИОбороты.ГТД,
	               |		НДССИзмененнымСрокомУплатыОстаткиИОбороты.ГТД.Код,
	               |		НДССИзмененнымСрокомУплатыОстаткиИОбороты.СрокПлатежа,
	               |		НДССИзмененнымСрокомУплатыОстаткиИОбороты.ВидОперацииПоступления) КАК БазовыйЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			НДССИзмененнымСрокомУплаты.ГТД КАК ГТД,
	               |			НДССИзмененнымСрокомУплаты.СрокПлатежа КАК СрокПлатежа,
	               |			СУММА(ВЫБОР
	               |					КОГДА НДССИзмененнымСрокомУплаты.СпособПогашения = &Зачет
	               |							И НДССИзмененнымСрокомУплаты.Период < &НачПериода
	               |						ТОГДА НДССИзмененнымСрокомУплаты.СуммаНДС
	               |					ИНАЧЕ 0
	               |				КОНЕЦ) КАК ЗачетПредыдущегоПериода,
	               |			СУММА(ВЫБОР
	               |					КОГДА НДССИзмененнымСрокомУплаты.СпособПогашения = &Уплата
	               |							И НДССИзмененнымСрокомУплаты.Период < &НачПериода
	               |						ТОГДА НДССИзмененнымСрокомУплаты.СуммаНДС
	               |					ИНАЧЕ 0
	               |				КОНЕЦ) КАК УплатаПредыдущегоПериода,
	               |			СУММА(ВЫБОР
	               |					КОГДА НДССИзмененнымСрокомУплаты.СпособПогашения = &Зачет
	               |							И НДССИзмененнымСрокомУплаты.Период >= &НачПериода
	               |						ТОГДА НДССИзмененнымСрокомУплаты.СуммаНДС
	               |					ИНАЧЕ 0
	               |				КОНЕЦ) КАК ЗачетТекущегоПериода,
	               |			СУММА(ВЫБОР
	               |					КОГДА НДССИзмененнымСрокомУплаты.СпособПогашения = &Уплата
	               |							И НДССИзмененнымСрокомУплаты.Период >= &НачПериода
	               |						ТОГДА НДССИзмененнымСрокомУплаты.СуммаНДС
	               |					ИНАЧЕ 0
	               |				КОНЕЦ) КАК УплатаТекущегоПериода,
	               |			НДССИзмененнымСрокомУплаты.ВидОперацииПоступления КАК ВидОперацииПоступления
	               |		ИЗ
	               |			РегистрНакопления.НДССИзмененнымСрокомУплаты КАК НДССИзмененнымСрокомУплаты
	               |		ГДЕ
	               |			НДССИзмененнымСрокомУплаты.Период <= &ДатаКонПериода
	               |			И НДССИзмененнымСрокомУплаты.Налогоплательщик = &Налогоплательщик
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			НДССИзмененнымСрокомУплаты.ГТД,
	               |			НДССИзмененнымСрокомУплаты.СрокПлатежа,
	               |			НДССИзмененнымСрокомУплаты.ВидОперацииПоступления) КАК ОборотыПоПогашению
	               |		ПО БазовыйЗапрос.ГТД = ОборотыПоПогашению.ГТД
	               |			И БазовыйЗапрос.СрокПлатежа = ОборотыПоПогашению.СрокПлатежа
	               |			И БазовыйЗапрос.ВидОперацииПоступления = ОборотыПоПогашению.ВидОперацииПоступления
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОперации КАК ВидОперации,
	               |			КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки КАК КодСтроки
	               |		ИЗ
	               |			РегистрСведений.КодыСтрокДекларацииПоНДСКЗачету.СрезПоследних(&КонПериода, ) КАК КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних) КАК КодыСтрокДекларации
	               |		ПО БазовыйЗапрос.ВидОперацииПоступления = КодыСтрокДекларации.ВидОперации
	               |ГДЕ
	               |	КодыСтрокДекларации.КодСтроки В(&КодыСтрок)
	               |	И (НЕ(ЕСТЬNULL(БазовыйЗапрос.ЗадолженностьПоНДС, 0) = 0
	               |				И ЕСТЬNULL(ОборотыПоПогашению.УплатаТекущегоПериода, 0) = 0
	               |				И ЕСТЬNULL(ОборотыПоПогашению.ЗачетТекущегоПериода, 0) = 0))" ;
	 
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() И ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 300.03 за отчетный период отсутствуют...'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);		
	КонецЕсли;	
	
	ТаблицаРезультата = Результат.Выгрузить();
	
	Возврат ТаблицаРезультата;		 
	
КонецФункции // Форма300_03РассчитатьДанныеФормы()

&НаСервере
// Рассчитывает зачет по НДС с учетом видов оборота
// в регистра НДС к возмещению  для НП, использующих раздельный метод
Функция Форма300_03РассчитатьДанныеДляЗачетаНДС()
	Запрос =  Новый Запрос;
	
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("НачПериода",		  СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", 	  КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));		
	Запрос.УстановитьПараметр("ВидНалогаНДС", 	Перечисления.ВидыНДС.НДССИзменениемСрокаУплаты);
	
	СписокКодовСтрок = Новый СписокЗначений;
	СписокКодовСтрок.Добавить("300.03.001");
	СписокКодовСтрок.Добавить("300.03.002");
    Запрос.УстановитьПараметр("КодыСтрок",  СписокКодовСтрок); 
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.Период КАК Период,
	               |	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОперации КАК ВидОперации,
	               |	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки КАК КодСтроки,
	               |	ВидыОборотовПоРеализации.Ссылка КАК ВидОборота,
	               |	ВЫБОР
	               |		КОГДА КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОборота = ЗНАЧЕНИЕ(Перечисление.ВидыОборотовПоРеализации.ПустаяСсылка)
	               |			ТОГДА 2
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_Приоритет
	               |ИЗ
	               |	Перечисление.ВидыОборотовПоРеализации КАК ВидыОборотовПоРеализации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДСКЗачету.СрезПоследних(&КонПериода, ) КАК КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних
	               |		ПО (КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОборота = ВидыОборотовПоРеализации.Ссылка
	               |				ИЛИ КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОборота = ЗНАЧЕНИЕ(Перечисление.ВидыОборотовПоРеализации.ПустаяСсылка))
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Приоритет,
	               |	ВидОперации,
	               |	ВидОборота
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДохода.ВидОперацииПоступления КАК ВидОперацииПоступления,
	               |	ТаблицаДохода.ВидОборота КАК ВидОборота,
	               |	ДанныеОКодахДекларации.КодСтроки КАК КодСтроки
	               |ПОМЕСТИТЬ ВТ_СведенияОкодахСтрокДекларации
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТаблицаОпераций.ВидОперации КАК ВидОперацииПоступления,
	               |		ТаблицаОпераций.ВидОборота КАК ВидОборота,
	               |		МИНИМУМ(ТаблицаОпераций.Приоритет) КАК Приоритет
	               |	ИЗ
	               |		ВТ_Приоритет КАК ТаблицаОпераций
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ТаблицаОпераций.ВидОперации,
	               |		ТаблицаОпераций.ВидОборота) КАК ТаблицаДохода
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоритет КАК ДанныеОКодахДекларации
	               |		ПО ТаблицаДохода.Приоритет = ДанныеОКодахДекларации.Приоритет
	               |			И ТаблицаДохода.ВидОперацииПоступления = ДанныеОКодахДекларации.ВидОперации
	               |			И ТаблицаДохода.ВидОборота = ДанныеОКодахДекларации.ВидОборота
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВидОперацииПоступления,
	               |	ВидОборота,
	               |	КодСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ	               
	               |	НДСОбороты.СуммаНДСОборот КАК СуммаНДС,	               
	               |	НДСОбороты.ВидОборота
	               |ИЗ
	               |	РегистрНакопления.НДСКВозмещению.Обороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			,
	               |			Налогоплательщик = &Налогоплательщик
	               |				И ВидНалогаНДС = &ВидНалогаНДС) КАК НДСОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СведенияОкодахСтрокДекларации КАК КодыСтрокДекларацииПоНДС
	               |		ПО НДСОбороты.ВидОперацииПоступления = КодыСтрокДекларацииПоНДС.ВидОперацииПоступления
	               |			И НДСОбороты.ВидОборота = КодыСтрокДекларацииПоНДС.ВидОборота
	               |ГДЕ
	               |	КодыСтрокДекларацииПоНДС.КодСтроки В (&КодыСтрок)";
				   
	Результат = Запрос.Выполнить();	
	Выборка = Результат.Выбрать();
	СуммаНДС = 0;
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Облагаемый Тогда
			СуммаНДС = СуммаНДС + Выборка.СуммаНДС;
		ИначеЕсли Выборка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Общий Тогда
			СуммаНДС = СуммаНДС + Окр(Выборка.СуммаНДС * СтруктураРеквизитовФормы.УдВес/100,0) ;
		КонецЕсли;			
	КонецЦикла;	
	Возврат СуммаНДС;
КонецФункции // Форма300_03РассчитатьДанныеДляЗачетаНДС()

&НаКлиенте
Процедура Форма300_03ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Состояние("Расчет формы 300.03");		
	
	Форма300_03ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры	

&НаСервере
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма300_03ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма300_03";
	Очистить(ТекИмяФормы, Истина);
	
	ТекущаяСтраница = 1;
	ВсегоСтраниц = 1;
	
	
	ТаблицаОтчета = Форма300_03РассчитатьДанныеФормы(Истина);
	// 
	Если ТаблицаОтчета.Количество() <> 0 Тогда
				
		МногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы);					
	
		// Лист А
		ЗначФ300_03_D1 = 0;
		ЗначФ300_03_D2 = 0;
			
		// Лист В
		ЗначФ300_03_F1 = 0;
		ЗначФ300_03_F2 = 0;
		ЗначФ300_03_G1 = 0;
		ЗначФ300_03_G2 = 0;
		ЗначФ300_03_H1 = 0;
		ЗначФ300_03_H2 = 0;
			
		// Лист С
		ЗначФ300_03_J1 = 0;
		ЗначФ300_03_J2 = 0;
		ЗначФ300_03_K1 = 0;
		ЗначФ300_03_K2 = 0;
		ЗначФ300_03_L1 = 0;
		ЗначФ300_03_L2 = 0;
			
		Для Каждого ЭлементСтруктуры Из МногострочнаяСтруктура Цикл
			НомерСтроки = 3;
			ИмяГруппы = ЭлементСтруктуры.Ключ;			
			ТаблицаСтрокГруппы  = ЭлементСтруктуры.Значение.Строки;
			ТаблицаСтрокГруппы.Очистить();
						
			Для Каждого СтрокаОтчета из ТаблицаОтчета Цикл  			
				Элемент = ТаблицаСтрокГруппы.Добавить();   			 
				
				Если ИмяГруппы = "ЛистA" Тогда
				 	//Так должны заполнять по отдельности значения выборки 
				 	//для каждого листа
				 	Элемент.Ф300_03_A = Формат(НомерСтроки, мФорматНомераСтроки);
					
					Если ЗначениеЗаполнено(СтрокаОтчета.КодСтроки) Тогда
						ВидИмпорта = Прав(СокрЛП(СтрокаОтчета.КодСтроки),1);
						Элемент.Ф300_03_B = ВидИмпорта;
					КонецЕсли;
					
					Если СтрДлина(СокрЛП(СтрокаОтчета.ГТД.Код))< 20 Тогда 
						ТекстСообщения = НСтр("ru = 'В графе «Справочный номер ГТД»  строки %1 значение указано в старом формате.'");
						ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,НомерСтроки));
					КонецЕсли;	
					
					КодГТД = СтрокаОтчета.ГТД.Код;				 	 
					Если НЕ КодГТД = "" Тогда
						КодГТД = СтрЗаменить(КодГТД, "/", ""); 
						Элемент.Ф300_03_C = СокрЛП(КодГТД);
					КонецЕсли;   
					Элемент.Ф300_03_D  = Окр(СтрокаОтчета.СуммаНДСПоГТД);
					
					// рассчитаем итоговую строку
					Если Прав(СокрЛП(СтрокаОтчета.КодСтроки),1) = "2" Тогда
						ЗначФ300_03_D2 = ЗначФ300_03_D2 + Элемент.Ф300_03_D;
					Иначе
						ЗначФ300_03_D1 = ЗначФ300_03_D1 + Элемент.Ф300_03_D;
					КонецЕсли;
					
				 	Элемент.Ф300_03_E  = СтрокаОтчета.СрокПлатежа;				 						
				 	
										
				ИначеЕсли ИмяГруппы = "ЛистB" Тогда
				 	//Так должны заполнять по отдельности значения выборки 
				 	//для каждого листа
				 	Элемент.Ф300_03_A2 = Формат(НомерСтроки, мФорматНомераСтроки);
					
					Элемент.Ф300_03_F  = Окр(СтрокаОтчета.ЗачетТекущегоПериода);					
					// рассчитаем итоговую строку
					Если Прав(СокрЛП(СтрокаОтчета.КодСтроки),1) = "2" Тогда
						ЗначФ300_03_F2 = ЗначФ300_03_F2 + Элемент.Ф300_03_F;
					Иначе
						ЗначФ300_03_F1 = ЗначФ300_03_F1 + Элемент.Ф300_03_F;
					КонецЕсли;
					
				 	Элемент.Ф300_03_G  = Окр(СтрокаОтчета.ЗачетПредыдущегоПериода);
					// рассчитаем итоговую строку
					Если Прав(СокрЛП(СтрокаОтчета.КодСтроки),1) = "2" Тогда
						ЗначФ300_03_G2 = ЗначФ300_03_G2 + Элемент.Ф300_03_G;
					Иначе
						ЗначФ300_03_G1 = ЗначФ300_03_G1 + Элемент.Ф300_03_G;
					КонецЕсли;
					
					// H = D - (F + G)
				 	Элемент.Ф300_03_H  = Окр(СтрокаОтчета.СуммаНДСПоГТД - (СтрокаОтчета.ЗачетТекущегоПериода + СтрокаОтчета.ЗачетПредыдущегоПериода));
					// рассчитаем итоговую строку
					Если Прав(СокрЛП(СтрокаОтчета.КодСтроки),1) = "2" Тогда
						ЗначФ300_03_H2 = ЗначФ300_03_H2 + Элемент.Ф300_03_H;
					Иначе
						ЗначФ300_03_H1 = ЗначФ300_03_H1 + Элемент.Ф300_03_H;
					КонецЕсли;
					
				ИначеЕсли ИмяГруппы = "ЛистC" Тогда
				 	//Так должны заполнять по отдельности значения выборки 
				 	//для каждого листа
					Элемент.Ф300_03_A3 = Формат(НомерСтроки, мФорматНомераСтроки);
					Элемент.Ф300_03_I  = СокрЛП(Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьСИзмененнымСрокомУплаты.КодБК);
					
					Элемент.Ф300_03_J  = Окр(СтрокаОтчета.УплатаТекущегоПериода);
					// рассчитаем итоговую строку
					Если Прав(СокрЛП(СтрокаОтчета.КодСтроки),1) = "2" Тогда
						ЗначФ300_03_J2 = ЗначФ300_03_J2 + Элемент.Ф300_03_J;
					Иначе
						ЗначФ300_03_J1 = ЗначФ300_03_J1 + Элемент.Ф300_03_J;
					КонецЕсли;
					
				 	Элемент.Ф300_03_K  = Окр(СтрокаОтчета.УплатаПредыдущегоПериода);
					// рассчитаем итоговую строку
					Если Прав(СокрЛП(СтрокаОтчета.КодСтроки),1) = "2" Тогда
						ЗначФ300_03_K2 = ЗначФ300_03_K2 + Элемент.Ф300_03_K;
					Иначе
						ЗначФ300_03_K1 = ЗначФ300_03_K1 + Элемент.Ф300_03_K;
					КонецЕсли;
					
				 	Элемент.Ф300_03_L  = Окр(СтрокаОтчета.ЗадолженностьПоНДС);				 
					// рассчитаем итоговую строку
					Если Прав(СокрЛП(СтрокаОтчета.КодСтроки),1) = "2" Тогда
						ЗначФ300_03_L2 = ЗначФ300_03_L2 + Элемент.Ф300_03_L;
					Иначе
						ЗначФ300_03_L1 = ЗначФ300_03_L1 + Элемент.Ф300_03_L;
					КонецЕсли;
					
			 	КонецЕсли;
				НомерСтроки = НомерСтроки + 1;           			 
			КонецЦикла; 
			
		КонецЦикла;	 
		
		//СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_03 = Новый Структура;
		// Лист А
		СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_03.Вставить("ЗначФ300_03_D1",	ЗначФ300_03_D1);
		СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_03.Вставить("ЗначФ300_03_D2",	ЗначФ300_03_D2);
		// Лист В
		СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_03.Вставить("ЗначФ300_03_F1",	ЗначФ300_03_F1);
		СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_03.Вставить("ЗначФ300_03_F2",	ЗначФ300_03_F2);
		СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_03.Вставить("ЗначФ300_03_G1",	ЗначФ300_03_G1);
		СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_03.Вставить("ЗначФ300_03_G2",	ЗначФ300_03_G2);
		СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_03.Вставить("ЗначФ300_03_H1",	ЗначФ300_03_H1);
		СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_03.Вставить("ЗначФ300_03_H2",	ЗначФ300_03_H2);
		// Лист С
		СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_03.Вставить("ЗначФ300_03_J1",	ЗначФ300_03_J1);
		СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_03.Вставить("ЗначФ300_03_J2",	ЗначФ300_03_J2);
		ЗначФ300_03_J = ЗначФ300_03_J1 + ЗначФ300_03_J2;		
		Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный Тогда
			СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_03.Вставить("ЗначФ300_03_J",	ЗначФ300_03_J); // итог для передачи данных в 300.00			
		Иначе				
			СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_03.Вставить("ЗначФ300_03_J",	Форма300_03РассчитатьДанныеДляЗачетаНДС()); // итог для передачи данных в 300.00						
		КонецЕсли;
		
		СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_03.Вставить("ЗначФ300_03_K1",	ЗначФ300_03_K1);
		СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_03.Вставить("ЗначФ300_03_K2",	ЗначФ300_03_K2);
		СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_03.Вставить("ЗначФ300_03_L1",	ЗначФ300_03_L1);
		СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_03.Вставить("ЗначФ300_03_L2",	ЗначФ300_03_L2);
		
		РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы, МногострочнаяСтруктура);			
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);		
		РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтотОбъект,ТекИмяФормы,Перезаполнить);	 
		
		Для Каждого Элемент Из СтруктураРеквизитовФормы.СтруктураИтоговыхПолей300_03 Цикл
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
		
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ТекИмяФормы, Истина);			
		
	КонецЕсли;		
КонецПроцедуры // Форма300_03ЗаполнитьАвтоНаСервере()
 

///////////////////////////////////////////////////////////////////
// ФОРМА 300.04

&НаКлиенте
Процедура Форма300_04ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма300_04Расчет(Область.Имя, Область.Значение);
	КонецЕсли;
	    	    
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Форма300_04Расчет(ИмяЯчейки, ЗначениеЯчейки)
	Форма300_04РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки)
КонецПроцедуры

&НаСервере
Процедура Форма300_04РасчетНаСервере(знач ИмяЯчейки, знач ЗначениеЯчейки)
	ТекИмяФормы = "Форма300_04";
	
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,ИмяЯчейки ,ЗначениеЯчейки);
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);
	
	// расчет по строкам 300.04.001
	ИтоговаяЯчейкаА = "s_300_04_001_a";
	ИтоговаяЯчейкаB = "s_300_04_001_b";
	
	СтруктураВходящихЯчеекА = Новый Структура;		
	СтруктураВходящихЯчеекА.Вставить("s_300_04_001_i_a");
	СтруктураВходящихЯчеекА.Вставить("s_300_04_001_ii_a");
	СтруктураВходящихЯчеекА.Вставить("s_300_04_001_iii_a");
	СтруктураВходящихЯчеекА.Вставить("s_300_04_001_iv_a");
	СтруктураВходящихЯчеекА.Вставить("s_300_04_001_v_a");
	СтруктураВходящихЯчеекА.Вставить("s_300_04_001_vi_a");
	СтруктураВходящихЯчеекА.Вставить("s_300_04_001_vii_a");
	СтруктураВходящихЯчеекА.Вставить("s_300_04_001_viii_a");
	СтруктураВходящихЯчеекА.Вставить("s_300_04_001_ix_a");		
	
	СтруктураВходящихЯчеекB = Новый Структура;		
	СтруктураВходящихЯчеекB.Вставить("s_300_04_001_i_b");
	СтруктураВходящихЯчеекB.Вставить("s_300_04_001_ii_b");
	СтруктураВходящихЯчеекB.Вставить("s_300_04_001_iii_b");
	СтруктураВходящихЯчеекB.Вставить("s_300_04_001_iv_b");
	СтруктураВходящихЯчеекB.Вставить("s_300_04_001_v_b");
	СтруктураВходящихЯчеекB.Вставить("s_300_04_001_vi_b");
	СтруктураВходящихЯчеекB.Вставить("s_300_04_001_vii_b");
	СтруктураВходящихЯчеекB.Вставить("s_300_04_001_viii_b");
	СтруктураВходящихЯчеекB.Вставить("s_300_04_001_ix_b");		
	
	АвтоматическийРасчетПоСтрокам(ТаблицаДанных, ИтоговаяЯчейкаА, СтруктураВходящихЯчеекА, Ложь, Форма300_04ПолеТабличногоДокументаСтраница1);			
	АвтоматическийРасчетПоСтрокам(ТаблицаДанных, ИтоговаяЯчейкаB, СтруктураВходящихЯчеекB, Ложь, Форма300_04ПолеТабличногоДокументаСтраница1);		
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);  	
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ТекИмяФормы);		
КонецПроцедуры

&НаСервере
Функция Форма300_04РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("НачПериода",		  СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", 	  Новый Граница(КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КодСтроки",        "300.04.001%");		
	Запрос.УстановитьПараметр("ВидНалога",		  Перечисления.ВидыНДС.НДСМетодомЗачета);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки,
	               |	СУММА(НДСКВозмещениюОбороты.СуммаБезНДСОборот) КАК ОблагаемыйИмпорт,
	               |	СУММА(НДСКВозмещениюОбороты.СуммаНДСОборот) КАК СуммаНДС
	               |ИЗ
	               |	РегистрНакопления.НДСКВозмещению.Обороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			,
	               |			Налогоплательщик = &Налогоплательщик
	               |				И ВидНалогаНДС = &ВидНалога) КАК НДСКВозмещениюОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДСКЗачету.СрезПоследних КАК КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних
	               |		ПО НДСКВозмещениюОбороты.ВидОборота = КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОборота
	               |			И НДСКВозмещениюОбороты.ВидОперацииПоступления = КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОперации
	               |ГДЕ
	               |	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки ПОДОБНО &КодСтроки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки" ;
				   
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() И ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 300.04 за отчетный период отсутствуют...'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);													 
	КонецЕсли;
	
    Возврат Результат.Выгрузить();
	
КонецФункции // Форма300_04РассчитатьДанныеФормы()

&НаКлиенте
Процедура Форма300_04ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Состояние("Расчет формы 300.04");		
	
	Форма300_04ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры	

&НаСервере
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма300_04ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма300_04";
	Очистить(ТекИмяФормы, Истина);
	
	ТаблицаОтчета = Форма300_04РассчитатьДанныеФормы(Истина);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);
	
	Для Каждого Строка Из ТаблицаОтчета Цикл
		
		ОбластьНачало = РегламентированнаяОтчетностьКлиентСервер.ПреобразоватьКодДекларации(Строка.КодСтроки);
		
		ОбластьA = ТаблицаДанных.Найти(ОбластьНачало + "_a","ИмяОбласти");
		ОбластьB = ТаблицаДанных.Найти(ОбластьНачало + "_b","ИмяОбласти");
		
		Если ОбластьA <> Неопределено И ОбластьB <> Неопределено И ОбластьНачало = "s_300_04_001" Тогда
			ОбластьA.Значение = ОбластьA.Значение + Окр(?(Строка.ОблагаемыйИмпорт <> NULL, Строка.ОблагаемыйИмпорт, 0));
			ОбластьB.Значение = ОбластьB.Значение + Окр(?(Строка.СуммаНДС <> NULL, Строка.СуммаНДС, 0));
		ИначеЕсли ОбластьA <> Неопределено И ОбластьB <> Неопределено Тогда
			ОбластьA.Значение = ОбластьA.Значение + Окр(?(Строка.ОблагаемыйИмпорт <> NULL, Строка.ОблагаемыйИмпорт, 0));
			ОбластьB.Значение = ОбластьB.Значение + Окр(?(Строка.СуммаНДС <> NULL, Строка.СуммаНДС, 0));
			ОбластьИтогА = ТаблицаДанных.Найти("s_300_04_001_a","ИмяОбласти");
			ОбластьИтогB = ТаблицаДанных.Найти("s_300_04_001_b","ИмяОбласти");
			Если ОбластьИтогА <> Неопределено Тогда
				ОбластьИтогА.Значение = ОбластьИтогА.Значение + Окр(?(Строка.ОблагаемыйИмпорт <> NULL, Строка.ОблагаемыйИмпорт, 0));
			КонецЕсли;
			Если ОбластьИтогB <> Неопределено Тогда
				ОбластьИтогB.Значение = ОбластьИтогB.Значение + Окр(?(Строка.СуммаНДС <> NULL, Строка.СуммаНДС, 0));
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Не найдена строка в форме %1. Значение помещено в строку ""300.04.001"".'");								
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.КодСтроки);			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
			
			ЗначА = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_04_001_a");
			ЗначB = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_300_04_001_b");
			
			ЗначА = ЗначА + Окр(?(Строка.ОблагаемыйИмпорт <> NULL, Строка.ОблагаемыйИмпорт, 0));
			ЗначB = ЗначB + Окр(?(Строка.СуммаНДС <> NULL, Строка.СуммаНДС, 0));
			
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_04_001_a",ЗначА,);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_04_001_b", ЗначB,);			
		КонецЕсли;
		
	КонецЦикла;
	
	// заполним значения в структуре для последующего правильного авторасчета ячеек
	Для Каждого Строка Из ТаблицаДанных  Цикл 				
		мСтруктураЗначений.Вставить(Строка.ИмяОбласти, Строка.Значение);						
	КонецЦикла;
			
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);				
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтотОбъект,ТекИмяФормы,Перезаполнить);	         			
КонецПроцедуры // Форма300_04ЗаполнитьАвтоНаСервере()

///////////////////////////////////////////////////////////////////
// ФОРМА 300.05

&НаКлиенте
Процедура Форма300_05ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма300_05Расчет(Область.Имя, Область.Значение);
	КонецЕсли;
	    	    
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Форма300_05Расчет(ИмяЯчейки, ЗначениеЯчейки)
	Форма300_05РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки)
КонецПроцедуры

&НаСервере
Процедура Форма300_05РасчетНаСервере(знач ИмяЯчейки, знач ЗначениеЯчейки)
	
	ТекИмяФормы = "Форма300_05";
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,ИмяЯчейки ,ЗначениеЯчейки);
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);
	
	ИтоговаяЯчейка = "s_300_05_007";
	СтруктураВходящихЯчеек = Новый Структура;		
	СтруктураВходящихЯчеек.Вставить("s_300_05_003");
	СтруктураВходящихЯчеек.Вставить("s_300_05_006");
	
	s_300_05_007 = АвтоматическийРасчетПоСтрокам(ТаблицаДанных, ИтоговаяЯчейка, СтруктураВходящихЯчеек, , Форма300_05ПолеТабличногоДокументаСтраница1);
	
	Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный ИЛИ СтруктураРеквизитовФормы.мПропорцИРаздел Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "Знач_300_05_007", s_300_05_007, Форма300_05ПолеТабличногоДокументаСтраница1);		
	Иначе
		ТекстСообщения = НСтр("ru = 'Приложение 300.05: Итоговая сумма передана в форму 300.00 с учетом удельного веса облагаемого оборота в общем обороте в размере %1 %'");								
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктураРеквизитовФормы.УдВес);			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "Знач_300_05_007", Окр(s_300_05_007 * СтруктураРеквизитовФормы.УдВес / 100), Форма300_05ПолеТабличногоДокументаСтраница1);				
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);  	
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ТекИмяФормы);			                 	
КонецПроцедуры

&НаСервере
Функция Форма300_05_002РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
    Запрос =  Новый Запрос;
	
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("НачПериода", 	  СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", 	  Новый Граница(КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидНалога", 		  Перечисления.ВидыНДС.НДСЗаНерезидента);

	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСЗаНерезидентаОстаткиИОбороты.СуммаНДСПриход КАК Знач300_05_002,
	               |	НДСЗаНерезидентаОстаткиИОбороты.СуммаНДСРасход КАК Знач300_05_003
	               |ИЗ
	               |	РегистрНакопления.НДСЗаНерезидента.ОстаткиИОбороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			,
	               |			,
	               |			Налогоплательщик = &Налогоплательщик
	               |				И ВидНалогаНДС = &ВидНалога
	               |				И ДокументПоступления.Дата >= &НачПериода) КАК НДСЗаНерезидентаОстаткиИОбороты
	               |ГДЕ
	               |	(НДСЗаНерезидентаОстаткиИОбороты.СуммаНДСНачальныйОстаток > 0
	               |			ИЛИ НДСЗаНерезидентаОстаткиИОбороты.СуммаНДСПриход > 0)";
	
	РезультатЗапроса = Запрос.Выполнить();          	
	Если РезультатЗапроса.Пустой() И ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения строк 300.05.002, 300.05.003 формы 300.05 за отчетный период отсутствуют...'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);													 
	КонецЕсли;
	
    Возврат РезультатЗапроса.Выбрать();	
КонецФункции // Форма300_05_002РассчитатьДанныеФормы()

&НаСервере
Функция Форма300_05_005РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
    Запрос =  Новый Запрос;
	
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("НачПериода", 	  СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", 	  Новый Граница(КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидНалога", 		  Перечисления.ВидыНДС.НДСЗаНерезидента);

	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(УплаченныйНДС.СуммаНДСРасходУплачено) КАК Знач300_05_006,
	               |	СУММА(НДСЗаНерезидентаОстатки.СуммаНДСОстаток) КАК Знач300_05_005
	               |ИЗ
	               |	РегистрНакопления.НДСЗаНерезидента.Остатки(&НачПериода, Налогоплательщик = &Налогоплательщик) КАК НДСЗаНерезидентаОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			НДСЗаНерезидентаОбороты.СуммаНДСРасход КАК СуммаНДСРасходУплачено,
	               |			НДСЗаНерезидентаОбороты.Регистратор КАК Регистратор,
	               |			НДСЗаНерезидентаОбороты.Номенклатура КАК Номенклатура
	               |		ИЗ
	               |			РегистрНакопления.НДСЗаНерезидента.Обороты(
	               |					&НачПериода,
	               |					&КонПериода,
	               |					Регистратор,
	               |					Налогоплательщик = &Налогоплательщик
	               |						И ВидНалогаНДС = &ВидНалога
	               |						И ДокументПоступления.Дата < &НачПериода) КАК НДСЗаНерезидентаОбороты
	               |		ГДЕ
	               |			НДСЗаНерезидентаОбороты.Регистратор.Дата >= НДСЗаНерезидентаОбороты.ДокументПоступления.Дата) КАК УплаченныйНДС
	               |		ПО НДСЗаНерезидентаОстатки.Номенклатура = УплаченныйНДС.Номенклатура";
	
	РезультатЗапроса = Запрос.Выполнить();          		
	Если РезультатЗапроса.Пустой() И ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения строк 300.05.005, 300.05.006 формы 300.05 за отчетный период отсутствуют...'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);													 
	КонецЕсли;
	
    Возврат РезультатЗапроса.Выбрать();
	
КонецФункции // Форма300_05_005РассчитатьДанныеФормы()

&НаКлиенте
Процедура Форма300_05ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Состояние("Расчет формы 300.05");		
	
	Форма300_05ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры	

&НаСервере
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма300_05ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма300_05";
	Очистить(ТекИмяФормы, Истина);
	
	Выборка002 = Форма300_05_002РассчитатьДанныеФормы(Истина);
	Выборка005 = Форма300_05_005РассчитатьДанныеФормы(Истина);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);
	
	Если Выборка002.Следующий() Тогда
		Знач300_05_002 = ?(Выборка002.Знач300_05_002=NULL, 0, Выборка002.Знач300_05_002); 
		Знач300_05_003 = ?(Выборка002.Знач300_05_003=NULL, 0, Выборка002.Знач300_05_003);
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_05_002", Знач300_05_002, Форма300_05ПолеТабличногоДокументаСтраница1);
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_05_003", Знач300_05_003, Форма300_05ПолеТабличногоДокументаСтраница1);		
	КонецЕсли;
	
	Если Выборка005.Следующий() Тогда
		Знач300_05_005 = ?(Выборка005.Знач300_05_005=NULL, 0, Выборка005.Знач300_05_005); 
		Знач300_05_006 = ?(Выборка005.Знач300_05_006=NULL, 0, Выборка005.Знач300_05_006);
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_05_005",Знач300_05_005, Форма300_05ПолеТабличногоДокументаСтраница1);
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_05_006",Знач300_05_006, Форма300_05ПолеТабличногоДокументаСтраница1);		
	КонецЕсли;
	    		
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);					
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ТекИмяФормы, Истина);
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма,ТекИмяФормы,Перезаполнить);	         			
КонецПроцедуры // Форма300_05ЗаполнитьАвтоНаСервере()


///////////////////////////////////////////////////////////////////
// ФОРМА 300.06

&НаКлиенте
Процедура Форма300_06ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма300_06Расчет(Область.Имя, Область.Значение);
	КонецЕсли;
	    	    
	Модифицированность = Истина;
КонецПроцедуры


&НаКлиенте
Процедура Форма300_06ПолеТабличногоДокументаСтраница2ПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма300_06Расчет(Область.Имя, Область.Значение);
	КонецЕсли;
	    	    
	Модифицированность = Истина;
КонецПроцедуры


&НаКлиенте
Процедура Форма300_06Расчет(ИмяЯчейки, ЗначениеЯчейки)
	Форма300_06РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки)
КонецПроцедуры

&НаСервере
Процедура Форма300_06РасчетНаСервере(знач ИмяЯчейки, знач ЗначениеЯчейки)
	
	ТекИмяФормы = "Форма300_06";
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,ИмяЯчейки ,ЗначениеЯчейки);
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);
	
	// расчет по строкам 300.06.009
	ИтоговаяЯчейкаА = "s_300_06_009_a";
	ИтоговаяЯчейкаB = "s_300_06_009_b";
	СтруктураВходящихЯчеекА = Новый Структура;				
	СтруктураВходящихЯчеекB = Новый Структура;		
	Для Н = 1 По 8 Цикл
		СтруктураВходящихЯчеекА.Вставить("s_300_06_0" + Формат(Н, "ЧЦ=2; ЧН=; ЧВН=") + "_a");		
		СтруктураВходящихЯчеекB.Вставить("s_300_06_0" + Формат(Н, "ЧЦ=2; ЧН=; ЧВН=") + "_b");		
	КонецЦикла;		
	АвтоматическийРасчетПоСтрокам(ТаблицаДанных, ИтоговаяЯчейкаА, СтруктураВходящихЯчеекА,, Форма300_06ПолеТабличногоДокументаСтраница1);		
	АвтоматическийРасчетПоСтрокам(ТаблицаДанных, ИтоговаяЯчейкаB, СтруктураВходящихЯчеекB,, Форма300_06ПолеТабличногоДокументаСтраница1);
	
		
	S_300_06_009_a = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_06_009_a");
	S_300_06_010_a = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_06_010_a");
	S_300_06_011_a = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_06_011_a");
		
	S_300_06_009_a = S_300_06_009_a - S_300_06_010_a - S_300_06_011_a;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_300_06_009_a", S_300_06_009_a, Форма300_06ПолеТабличногоДокументаСтраница1);
		
	Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Раздельный Тогда
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтаФорма, ТекИмяФормы, Ложь);
	КонецЕсли;
		
	// расчет по строке 300.06.026
	ИтоговаяЯчейкаA = "s_300_06_024_a";
	ИтоговаяЯчейкаB = "s_300_06_024_b";
	СтруктураВходящихЯчеекA = Новый Структура;		
	СтруктураВходящихЯчеекB = Новый Структура;		
	Для Н = 12 По 23 Цикл
		СтруктураВходящихЯчеекA.Вставить("s_300_06_0" + Формат(Н, "ЧЦ=2; ЧН=; ЧВН=")+"_a");				
		СтруктураВходящихЯчеекB.Вставить("s_300_06_0" + Формат(Н, "ЧЦ=2; ЧН=; ЧВН=")+"_b");				
	КонецЦикла;		
	АвтоматическийРасчетПоСтрокам(ТаблицаДанных, ИтоговаяЯчейкаA, СтруктураВходящихЯчеекA,, Форма300_06ПолеТабличногоДокументаСтраница2);
	АвтоматическийРасчетПоСтрокам(ТаблицаДанных, ИтоговаяЯчейкаB, СтруктураВходящихЯчеекB,, Форма300_06ПолеТабличногоДокументаСтраница2);
	
	S_300_06_024 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_300_06_024_b");	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "Знач_300_06_024", S_300_06_024);   
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);	
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ТекИмяФормы);	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);	
КонецПроцедуры //Форма300_06РасчетНаСервере

&НаСервере
Функция Форма300_06РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	
		Запрос =  Новый Запрос;
	
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("НачПериода", 	  СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", 	  Новый Граница(КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	
	КодыСтрокРеализация = Новый СписокЗначений;	
	Для Н = 1 По 8 Цикл
		КодыСтрокРеализация.Добавить("300.06.0" + Формат(Н, "ЧЦ=2; ЧН=; ЧВН="));
	КонецЦикла;
	Запрос.УстановитьПараметр("КодыСтрокРеализация", 		  КодыСтрокРеализация);
	
	КодыСтрокВозмещение = Новый СписокЗначений;
	Для Н = 11 По 25 Цикл
		КодыСтрокВозмещение.Добавить("300.06.0" + Формат(Н, "ЧЦ=2; ЧН=; ЧВН="));
	КонецЦикла;
	Запрос.УстановитьПараметр("КодыСтрокВозмещение", 		  КодыСтрокВозмещение);

													  	 
	Запрос.Текст = "ВЫБРАТЬ
	               |	КорректировкаНДСОбороты.СуммаКорректировкиОборотаОборот КАК Сумма,
	               |	КорректировкаНДСОбороты.СуммаНДСОборот КАК СуммаНДС,
	               |	КодыСтрокДекларацииПоНДС.КодСтроки КАК КодСтроки,
	               |	КорректировкаНДСОбороты.СтавкаНДС КАК СтавкаНДС
	               |ПОМЕСТИТЬ КорректировкаНДС
	               |ИЗ
	               |	РегистрНакопления.КорректировкаНДС.Обороты(&НачПериода, &КонПериода, Регистратор, Налогоплательщик = &Налогоплательщик) КАК КорректировкаНДСОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДС.СрезПоследних(&КонПериода, ) КАК КодыСтрокДекларацииПоНДС
	               |		ПО КорректировкаНДСОбороты.ВидОперацииКорректировки = КодыСтрокДекларацииПоНДС.ВидОперации
	               |ГДЕ
	               |	КодыСтрокДекларацииПоНДС.КодСтроки В(&КодыСтрокРеализация)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтавкаНДС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИтоговаяТаблица.Сумма КАК Сумма,
	               |	ИтоговаяТаблица.СуммаНДС КАК СуммаНДС,
				   |	Null КАК ВидОборота,
	               |	ИтоговаяТаблица.КодСтроки,
	               |	""Реализация"" КАК Вид
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		СУММА(ЕСТЬNULL(КорректировкаНДС.Сумма, 0)) КАК Сумма,
	               |		СУММА(ЕСТЬNULL(КорректировкаНДС.СуммаНДС, 0)) КАК СуммаНДС,
	               |		КорректировкаНДС.КодСтроки КАК КодСтроки
	               |	ИЗ
	               |		КорректировкаНДС КАК КорректировкаНДС
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		КорректировкаНДС.КодСтроки
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		СУММА(ЕСТЬNULL(КорректировкаНДС.Сумма, 0)),
	               |		СУММА(ЕСТЬNULL(КорректировкаНДС.СуммаНДС, 0)),
	               |		ВЫБОР
	               |			КОГДА КорректировкаНДС.СтавкаНДС.ДляОсвобожденногоОборота = ИСТИНА
	               |				ТОГДА ""300.06.011""
	               |			ИНАЧЕ ""300.06.010""
	               |		КОНЕЦ
	               |	ИЗ
	               |		КорректировкаНДС КАК КорректировкаНДС
	               |	ГДЕ
	               |		(КорректировкаНДС.СтавкаНДС.ДляОсвобожденногоОборота = ИСТИНА
	               |				ИЛИ КорректировкаНДС.СтавкаНДС.Ставка = 0)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВЫБОР
	               |			КОГДА КорректировкаНДС.СтавкаНДС.ДляОсвобожденногоОборота = ИСТИНА
	               |				ТОГДА ""300.06.011""
	               |			ИНАЧЕ ""300.06.010""
	               |		КОНЕЦ) КАК ИтоговаяТаблица
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СУММА(ЕСТЬNULL(ИтоговаяТаблица.СуммаОборот, 0)),
	               |	СУММА(ЕСТЬNULL(ИтоговаяТаблица.СуммаНДСОборот, 0)),
				   |	ИтоговаяТаблица.ВидОборота,
	               |	ИтоговаяТаблица.КодСтроки,
	               |	""Возмещение""
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		КорректировкаНДСКВозмещениюОбороты.СуммаНДСОборот КАК СуммаНДСОборот,
	               |		КорректировкаНДСКВозмещениюОбороты.СуммаКорректировкиОборотаОборот КАК СуммаОборот,
	               |		КорректировкаНДСКВозмещениюОбороты.ВидОборота КАК ВидОборота,
	               |		КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки КАК КодСтроки,
	               |		КорректировкаНДСКВозмещениюОбороты.ВидОперацииКорректировки КАК ВидОперацииКорректировки
				   |	ИЗ
	               |		РегистрНакопления.КорректировкаНДСКВозмещению.Обороты(
	               |				&НачПериода,
	               |				&КонПериода,
	               |				,
	               |				Налогоплательщик = &Налогоплательщик
	               |					И ВидОперацииКорректировки.ПризнакКорректировки = ИСТИНА) КАК КорректировкаНДСКВозмещениюОбороты
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДСКЗачету.СрезПоследних(&КонПериода, ) КАК КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних
	               |			ПО КорректировкаНДСКВозмещениюОбороты.ВидОперацииКорректировки = КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОперации
	               |				И КорректировкаНДСКВозмещениюОбороты.ВидОборота = КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.ВидОборота
	               |	ГДЕ
	               |		КодыСтрокДекларацииПоНДСКЗачетуСрезПоследних.КодСтроки В(&КодыСтрокВозмещение)) КАК ИтоговаяТаблица
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ИтоговаяТаблица.КодСтроки, ИтоговаяТаблица.ВидОборота";	
					
 	Результат = Запрос.Выполнить();
	Если Результат.Пустой() И ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 300.06 за отчетный период отсутствуют...'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);													 
	КонецЕсли;
	
    Возврат Результат.Выгрузить();
	
КонецФункции // Форма300_06РассчитатьДанныеФормы()

&НаКлиенте
Процедура Форма300_06ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Состояние("Расчет формы 300.06");		
	
	Форма300_06ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры	

&НаСервере
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма300_06ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма300_06";
	Очистить(ТекИмяФормы, Истина);
	
	ТаблицаОтчета = Форма300_06РассчитатьДанныеФормы(Истина);	
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);
	Для Каждого Строка Из ТаблицаОтчета Цикл
		ОбластьНачало = РегламентированнаяОтчетностьКлиентСервер.ПреобразоватьКодДекларации(Строка.КодСтроки);		
		Если Строка.Вид = "Реализация" Тогда
			ОбластьСумма = ТаблицаДанных.Найти(ОбластьНачало + "_a","ИмяОбласти");
			ОбластьСуммаНДС = ТаблицаДанных.Найти(ОбластьНачало + "_b","ИмяОбласти");
			Если ОбластьСумма <> Неопределено Тогда
				ОбластьСумма.Значение = Окр(?(Строка.Сумма <> NULL, Строка.Сумма, 0));
			КонецЕсли;
			
			Если ОбластьСуммаНДС <> Неопределено Тогда
				ОбластьСуммаНДС.Значение = Окр(?(Строка.СуммаНДС <> NULL, Строка.СуммаНДС, 0));
			КонецЕсли;	
		Иначе //"Возмещение"
			ОбластьСумма = ТаблицаДанных.Найти(ОбластьНачало + "_a","ИмяОбласти");
			ОбластьСуммаНДС = ТаблицаДанных.Найти(ОбластьНачало + "_b","ИмяОбласти");
			
			Если ОбластьНачало = "s_300_06_013" И НЕ Строка.СуммаНДС < 0 Тогда 
				// если сумма положительная то ничего не делаем. Сообщаем, что сумма должна быть меньше 0.				
				ТекстСообщения = НСтр("ru = 'Сумма в строке 300.06.013 должна быть отрицательной. Операция по корректировке НДС в сумме %1 не учтены в форме.'");								
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СокрЛП(Строка.СуммаНДС));			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);									
			Иначе 
				СуммаНДС = Окр(?(Строка.СуммаНДС <> NULL, Строка.СуммаНДС, 0));				
				Если ОбластьСумма <> Неопределено Тогда
					ОбластьСумма.Значение = ОбластьСумма.Значение + Окр(?(Строка.Сумма <> NULL, Строка.Сумма, 0));
				КонецЕсли;
				
				Если ОбластьСуммаНДС <> Неопределено Тогда
					// корректировку общего оборота берем по удельному весу,
					Если СтруктураРеквизитовФормы.мМетодРасчета = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный Тогда
						ОбластьСуммаНДС.Значение = ОбластьСуммаНДС.Значение + СуммаНДС;
					Иначе
						Если Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Облагаемый Тогда
							ОбластьСуммаНДС.Значение = ОбластьСуммаНДС.Значение + СуммаНДС;
						ИначеЕсли Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Освобожденный Тогда
							// 0
						ИначеЕсли Строка.ВидОборота = Перечисления.ВидыОборотовПоРеализации.Общий Тогда
							ОбластьСуммаНДС.Значение = ОбластьСуммаНДС.Значение + Окр(СуммаНДС*СтруктураРеквизитовФормы.УдВес/100);							
						КонецЕсли;
					КонецЕсли;    				
				КонецЕсли
			КонецЕсли;
		КонецЕсли;				
	КонецЦикла;
	                        			
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);					
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);
	//гламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ТекИмяФормы, Истина);
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтотОбъект,ТекИмяФормы,Перезаполнить);	         				
КонецПроцедуры // Форма300_06ЗаполнитьАвтоНаСервере()


///////////////////////////////////////////////////////////////////
// ФОРМА 300.07

&НаКлиенте
Процедура  Форма300_07ОбработкаВыбораЗначений(Результат, ПараметрыВыбора) экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли ПараметрыВыбора.ЭлементВыбора  =  "СтатусПоставщика" ИЛИ ПараметрыВыбора.ЭлементВыбора  =  "ПризнакВидаДеятельности" Тогда
		// список выбора
		ВыбранныйЭлемент = Результат.Значение
	Иначе
		ВыбранныйЭлемент = Результат;
	КонецЕсли;
	
	Форма300_07ОбработкаВыбораЗначенийНаСервере(ВыбранныйЭлемент, ПараметрыВыбора); 	
КонецПроцедуры

&НаСервере
Процедура  Форма300_07ОбработкаВыбораЗначенийНаСервере(Результат, ПараметрыВыбора)
	НомерЯчейки = Число(Сред(ПараметрыВыбора.Ячейка, Найти(ПараметрыВыбора.Ячейка, "__")+ 2));
	Если ПараметрыВыбора.ЭлементВыбора = "Контрагент" И ЗначениеЗаполнено(Результат) Тогда
		
		// РНН
		ИмяЯчейкиРНН = "Ф300_07_C__" + НомерЯчейки;
		Форма300_07ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы, ИмяЯчейкиРНН, Результат.РНН,  Результат, Ложь);	
				
		// ИИН
		ИмяЯчейкиБИН = "Ф300_07_D__" + НомерЯчейки;
		Форма300_07ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы,ИмяЯчейкиБИН, Результат.ИдентификационныйКодЛичности, Результат, Ложь);	
		
	ИначеЕсли ПараметрыВыбора.ЭлементВыбора = "СчетФактура"  И ЗначениеЗаполнено(Результат) Тогда	
		// Номер СФ
		ИмяЯчейки = "Ф300_07_E__" + НомерЯчейки;
		
		НомерСФ = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Результат.Номер, Результат, ПредставлениеНомераДокументов);
		НомерСФ = ИсключитьЗапрещенныеСимволыИзНомераСФ(НомерСФ);		
		Форма300_07ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы, ИмяЯчейки, НомерСФ, Результат, Ложь);			
		
		// Дата СФ
		ИмяЯчейки = "Ф300_07_F__" + НомерЯчейки;
		Форма300_07ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы, ИмяЯчейки, Результат.Дата, Результат, Ложь);	
		
		// СуммаСФ		
	Иначе		
		Форма300_07ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы, ПараметрыВыбора.Ячейка,Результат, Результат, ПараметрыВыбора.ПризнакРасчета);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Форма300_07ПолеТабличногоДокументаЛистAВыбор(Элемент, Область, СтандартнаяОбработка)	
	Ячейка = Элемент.ТекущаяОбласть.Имя;	
	Если (Найти(Ячейка, "Ф300_07") = 0) Тогда
		// выбрана не именованная ячейка
		Возврат;
	КонецЕсли;
	
	Значение = Элемент.ТекущаяОбласть.Значение;
	ЗначениеРасшифровки = Элемент.ТекущаяОбласть.Расшифровка;
	
	ТекИмяФормы = "Форма300_07";
	ИмяЛиста 	= "ЛистA";
	ПризнакРасчета = Ложь;
	                      		
	Если Найти(Ячейка, "Ф300_07_C__")> 0 ИЛИ Найти(Ячейка, "Ф300_07_D__")> 0 Тогда
		
		 //может быть не заполнена расшировка ячейки при восстановления данных старых форм
		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			 ИмяЯчейкиРасшифровки = "Ф300_07_C" + Сред(Ячейка,Найти(Ячейка,"__"));
			 ОбластьРасширофвки = Форма300_07ПолеТабличногоДокументаЛистA.Области.Найти(ИмяЯчейкиРасшифровки);
			 Если ОбластьРасширофвки <> Неопределено Тогда 
				 ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;				 
				 Форма300_07ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка,Значение, ЗначениеРасшифровки, Ложь);
			 КонецЕсли;				 
		 КонецЕсли;

		Если ЗначениеЗаполнено(Значение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			// стандартная обработка расшифровки
			 Возврат;
		КонецЕсли;
        // открываем справочник для выбора элемента
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Контрагент", Ложь);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_07ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",,ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
	ИначеЕсли Найти(Ячейка, "Ф300_07_B__")> 0 Тогда		
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "СтатусПоставщика", Ложь);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_07ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("", "Пустое значение");
		СписокВыбора.Добавить("К", "Поставщик является комитентом");
		СписокВыбора.Добавить("М", "Поставщик является комиссионером");
		СписокВыбора.Добавить("Д", "Поставщик является доверителем");
		СписокВыбора.Добавить("Э", "Поставщик является экспедитором");
		СписокВыбора.Добавить("Л", "Поставщик является лизингодателем");
		СписокВыбора.Добавить("С", "Реализация в рамках договора о совместной деятельности");
		
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения,"Выберите статус поставщика");
		
	Иначе
		 Возврат;
	КонецЕсли; 	 	
КонецПроцедуры

&НаКлиенте
Процедура Форма300_07ПолеТабличногоДокументаЛистBВыбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Элемент.ТекущаяОбласть.Имя;
	Если (Найти(Ячейка, "Ф300_07") = 0) Тогда
		Возврат;
	КонецЕсли;
	
	Значение = Элемент.ТекущаяОбласть.Значение;
	ЗначениеРасшифровки = Элемент.ТекущаяОбласть.Расшифровка;
	НомерЯчейки = Число(Сред(Ячейка, Найти(Ячейка, "__")+ 2));
	
	ТекИмяФормы = "Форма300_07";
	ИмяЛиста 	= "ЛистB";
	ПризнакРасчета = Ложь;
	                    		
	Если Найти(Ячейка, "Ф300_07_E__")> 0 ИЛИ Найти(Ячейка, "Ф300_07_F__")> 0 Тогда		
		
		 //может быть не заполнена расшировка ячейки при восстановления данных старых форм
		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			 ИмяЯчейкиРасшифровки = "Ф300_07_E" + Сред(Ячейка,Найти(Ячейка,"__"));
			 ОбластьРасширофвки = Форма300_07ПолеТабличногоДокументаЛистB.Области.Найти(ИмяЯчейкиРасшифровки);
			 Если ОбластьРасширофвки <> Неопределено Тогда 
				 ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;				 
				 Форма300_07ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка,Значение, ЗначениеРасшифровки, Ложь);
			 КонецЕсли;				 
		 КонецЕсли;

		Если ЗначениеЗаполнено(Значение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			// стандартная обработка расшифровки
			 Возврат;
		КонецЕсли;

	    // добавим отбор по контрагенту в форме выбора СФ, если контрагент заполнен в ячейках Ф300_07_C__, Ф300_07_D__
		Контрагент = Форма300_07ПолеТабличногоДокументаЛистA.Области["Ф300_07_D__" + НомерЯчейки].Расшифровка;
		
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора", ТекИмяФормы, "ЛистB", Ячейка, "СчетФактура");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_07ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		ФормаВыбора = ОткрытьФорму("Документ.СчетФактураВыданный.ФормаВыбора",,ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(ФормаВыбора.Список, "Контрагент",  Контрагент);
		КонецЕсли;	
		
	ИначеЕсли Найти(Ячейка, "Ф300_07_G__")> 0  Тогда				
		НачЗначение = Область.Значение;
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "ПризнакВидаДеятельности", Ложь);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_07ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("",  "Пустое значение");
		СписокВыбора.Добавить("1", "СНР.По деятельности в рамках общеустановленного режима");
		СписокВыбора.Добавить("2", "СНР.По деятельности в рамках СНР (ст. 448 – 452 Налогового кодекса)");
				
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения,"Вид деятельности в рамках специального налогового режима (448 - 452 НК)");
			
	Иначе
		Возврат;
	КонецЕсли; 	 
	
КонецПроцедуры

&НаКлиенте
Процедура Форма300_07ПолеТабличногоДокументаЛистCВыбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Элемент.ТекущаяОбласть.Имя;
	Если (Найти(Ячейка, "Ф300_07") = 0) Тогда
		Возврат;
	КонецЕсли;
	Значение = Элемент.ТекущаяОбласть.Значение;
	
	Если Найти(Ячейка, "__") = 0 Тогда
		НомерЯчейки = 0;
	Иначе
		НомерЯчейки = Число(Сред(Ячейка, Найти(Ячейка, "__")+ 2));;
	КонецЕсли;
	             	
	ТекИмяФормы = "Форма300_07";
	ИмяЛиста 	= "ЛистC";
	ПризнакРасчета = Ложь;
	                  	
	Если (Найти(Ячейка, "Ф300_07") > 0) Тогда
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Показатели", Истина);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_07ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		Расчет = Истина;
		Если (Найти(Ячейка, "Ф300_07_H__") > 0) Тогда
			НачЗначение = Элемент.ТекущаяОбласть.Значение;			
			ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, "Введите всего стоимость без НДС", 12, 0); 
			 
		ИначеЕсли (Найти(Ячейка, "Ф300_07_I__") > 0) Тогда						
			НачЗначение = Элемент.ТекущаяОбласть.Значение;
			ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, "Введите сумму НДС", 12, 0); 						 
		ИначеЕсли (Найти(Ячейка, "Ф300_07_J__") > 0) Тогда			
			НачЗначение = Элемент.ТекущаяОбласть.Значение;
			ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, "Введите сумму начисленного НДС", 12, 0);
		Иначе 
			Возврат;			 
		КонецЕсли;
       		 
		 Форма300_07ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка, НачЗначение,, Расчет);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Форма300_07ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, ИмяЯчейки, Значение, ЗначениеРасшифровки, ПризнакРасчета)	
	
	ЭтотОбъект["Форма300_07ПолеТабличногоДокумента" + ИмяЛиста].Области[ИмяЯчейки].Значение = Значение;
	ЭтотОбъект["Форма300_07ПолеТабличногоДокумента" + ИмяЛиста].Области[ИмяЯчейки].Расшифровка = ЗначениеРасшифровки;
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтотОбъект, ИмяЛиста, ИмяЯчейки, Значение, ПризнакРасчета,ЗначениеРасшифровки);
	
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ЭтотОбъект.КодФормы);
КонецПроцедуры

&НаСервере
// Процедура расчитывает значения определенных граф по строке
// многострочной формы.
//
// Параметры:
//      Инд - номер строки многострочной формы
//      Колонка - имя графы (ячейки), из которой была вызвана процедура расчета
//
Процедура Форма300_07РасчетНаСервере(Инд,Колонка)
	// построчный расчет для формы не определен
КонецПроцедуры // Форма300_07Расчет()

&НаСервере
Функция Форма300_07РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
		
	ЗапросПоСтранам = Новый Запрос;
	ЗапросПоСтранам.УстановитьПараметр("Код", "398");
	ЗапросПоСтранам.Текст = "ВЫБРАТЬ
	                        |	КлассификаторСтранМира.Ссылка
	                        |ИЗ
	                        |	Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
	                        |ГДЕ
	                        |	КлассификаторСтранМира.Код = &Код ИЛИ КлассификаторСтранМира.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)";
							
	Результат = ЗапросПоСтранам.Выполнить();
	
	Страна = Новый Массив;
	
	Если НЕ Результат.Пустой() Тогда
		Результат = Результат.Выбрать();
		Пока Результат.Следующий() Цикл 
			Страна.Добавить(Результат.Ссылка)
		КонецЦикла;	
	КонецЕсли;

	Страна.Добавить(Справочники.КлассификаторСтранМира.ПустаяСсылка());
	
	Запрос =  Новый Запрос;
	 
	Запрос.УстановитьПараметр("ДатаНачала",		    СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);	
	Запрос.УстановитьПараметр("ДатаОкончания",   	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);	                 	
	Запрос.УстановитьПараметр("Налогоплательщик",   Налогоплательщик);	
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	
	Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями и мСписокСтруктурныхЕдиниц.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ОтборПоСтруктурным", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоСтруктурным", Ложь);
	КонецЕсли;                 	
			                 
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	Если СпособФормированияРеестра = "ПоРегиструСчетовФактур" Тогда
		ТекстЗапросаПоДаннымСчетовФактур = ПолучитьТекстЗапросаСчетовФактурВыданныхПоРегистру();
		ПризнакСвязиПоКонтрагенту = Истина;
	Иначе
		ТекстЗапросаПоДаннымСчетовФактур = ПолучитьТекстЗапросаСчетовФактурВыданныхПоДокументам();
		ПризнакСвязиПоКонтрагенту = Ложь;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПризнакСвязиПоКонтрагенту", ПризнакСвязиПоКонтрагенту);
	
	Запрос.УстановитьПараметр("парамСтрана",   		Страна);	
	
	СтатусыПриемаЭСФ = Новый Массив;
	СтатусыПриемаЭСФ.Добавить(Перечисления.СтатусыЭСФ.Доставленный);
	СтатусыПриемаЭСФ.Добавить(Перечисления.СтатусыЭСФ.Созданный);
	Запрос.УстановитьПараметр("СтатусыПриемаЭСФ",   СтатусыПриемаЭСФ);	
		
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактура,
	               |	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументРеализации
	               |ПОМЕСТИТЬ ДокументОснованиеВТ
	               |ИЗ
	               |	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	               |ГДЕ
	               |	СчетФактураВыданныйДокументыОснования.Ссылка.ДатаСовершенияОборотаПоРеализации МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СчетФактураВыданныйДокументыОснования.Ссылка
	               |;
	               |	               
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СчетФактураВыданныйДокументыОснования.СчетФактура КАК СчетФактура,	               
				   |	Выбор Когда &ПризнакСвязиПоКонтрагенту Тогда ДвиженияПоНДС.Контрагент Иначе NULL Конец Как Контрагент,
	               |	СУММА(ДвиженияПоНДС.СуммаНДСОборот) КАК СуммаНДСОборот
	               |ПОМЕСТИТЬ ДвиженияПоНДС
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		КорректировкаНДСОбороты.Регистратор КАК Регистратор,
				   |		КорректировкаНДСОбороты.Контрагент КАК Контрагент,
	               |		КорректировкаНДСОбороты.СуммаНДСОборот КАК СуммаНДСОборот,
	               |		КорректировкаНДСОбороты.СуммаКорректировкиОборотаОборот КАК СуммаКорректировкиОборотаОборот,
	               |		0 КАК СуммаБезНДСОборот,
	               |		0 КАК ОборотПоРеализацииОборот
	               |	ИЗ
	               |		РегистрНакопления.КорректировкаНДС.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, Налогоплательщик = &Налогоплательщик) КАК КорректировкаНДСОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		НДСОбороты.Регистратор,
				   |		НДСОбороты.Контрагент КАК Контрагент,
	               |		НДСОбороты.СуммаНДСОборот,
	               |		0,
	               |		НДСОбороты.СуммаБезНДСОборот,
	               |		НДСОбороты.ОборотПоРеализацииОборот
	               |	ИЗ
	               |		РегистрНакопления.НДС.Обороты(
	               |				&ДатаНачала,
	               |				&ДатаОкончания,
	               |				Регистратор,
	               |				Налогоплательщик = &Налогоплательщик
	               |					И НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСОблагаемыйИмпорт)) КАК НДСОбороты) КАК ДвиженияПоНДС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДокументОснованиеВТ КАК СчетФактураВыданныйДокументыОснования
	               |		ПО (СчетФактураВыданныйДокументыОснования.ДокументРеализации = ДвиженияПоНДС.Регистратор)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Выбор Когда &ПризнакСвязиПоКонтрагенту Тогда ДвиженияПоНДС.Контрагент Иначе NULL Конец,
	               |	СчетФактураВыданныйДокументыОснования.СчетФактура
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СчетФактура
	               |;
	               |" + ТекстЗапросаПоДаннымСчетовФактур + "
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеСчетовФактур.Сумма КАК СуммаОборота,
	               |	ДанныеСчетовФактур.СуммаНДС,
	               |	ДанныеСчетовФактур.Номер,
	               |	ДанныеСчетовФактур.Дата,
	               |	ДанныеСчетовФактур.Покупатель КАК Контрагент,
	               |	ДанныеСчетовФактур.Ссылка КАК СФ,
	               |	ЕСТЬNULL(ДвиженияПоНДС.СуммаНДСОборот, 0) КАК СуммаНДСОборот,
	               |	ДанныеСчетовФактур.РНН,
	               |	ДанныеСчетовФактур.ИдентификационныйКодЛичности,
	               |	ДанныеСчетовФактур.Дополнительная,
				   |	ДанныеСчетовФактур.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности				   
	               |ИЗ
	               |	ДанныеСчетовФактур КАК ДанныеСчетовФактур
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДвиженияПоНДС КАК ДвиженияПоНДС
	               |		ПО ДанныеСчетовФактур.Ссылка = ДвиженияПоНДС.СчетФактура
	               |		И (НЕ &ПризнакСвязиПоКонтрагенту ИЛИ ДанныеСчетовФактур.УчастникСовместнойДеятельности И ДанныеСчетовФактур.Покупатель = ДвиженияПоНДС.Контрагент ИЛИ НЕ ДанныеСчетовФактур.УчастникСовместнойДеятельности И ДанныеСчетовФактур.Контрагент = ДвиженияПоНДС.Контрагент)	               
	               |ГДЕ
	               |	ДанныеСчетовФактур.Ссылка.Проведен = ИСТИНА И (ДанныеСчетовФактур.Сумма <>0 ИЛИ ДанныеСчетовФактур.СуммаНДС<>0 ИЛИ ЕСТЬNULL(ДвиженияПоНДС.СуммаНДСОборот, 0) <>0)               
				   |";				   
				    	 
	Если ПризнакПокупателя Тогда
		ТекстЗапроса = ТекстЗапроса + "
				   |	И НЕ ДанныеСчетовФактур.ИдентификационныйКодЛичности  = &ПустаяСтрока";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + " 		   
	 			   |
	 			   |УПОРЯДОЧИТЬ ПО
	 			   |	ДанныеСчетовФактур.Дата"; 
	
	
	 
	Запрос.Текст = ТекстЗапроса;
	 
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() и ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 300.07 за отчетный период отсутствуют...'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);			
	КонецЕсли;	
	
	ТаблицаРезультата = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ТаблицаРезультата;		 
	
КонецФункции // Форма300_07РассчитатьДанныеФормы()

&НаКлиенте
Процедура Форма300_07ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Состояние("Расчет формы 300.07");		
	
	Форма300_07ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры	

&НаСервере
Процедура Форма300_07ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма300_07";
	Очистить(ТекИмяФормы, Истина);	
	
	ТекущаяСтраница = 1;
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", ТекИмяФормы));
	
	Если СтрокаФормы <> Неопределено Тогда
		СтрокаФормы.ВсегоСтраниц = 1;		
	КонецЕсли;   
	               	
	ВыборкаОтчета = Форма300_07РассчитатьДанныеФормы(Истина);
	 
	Если ВыборкаОтчета.Количество() <> 0 Тогда
		СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы);		
	                             	
		Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
			НомерСтроки = 2;
			
			ИмяГруппы 	= ЭлементСтруктуры.Ключ;
			ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
			ТаблицаСтрокГруппы.Очистить();
			
			ВыборкаОтчета.Сбросить();
		 
		 	Пока ВыборкаОтчета.Следующий() Цикл
				
				Элемент = ТаблицаСтрокГруппы.Добавить();   			 
				
				Если ИмяГруппы = "ЛистA" Тогда
					//Так должны заполнять по отдельности значения выборки 
					//для каждого листа
					
					Элемент.Ф300_07_A   = Формат(НомерСтроки, мФорматНомераСтроки);
					// Заполнение закрыто, так как в правилах указано, что 
					// "в графе В указывается заглавными кириллическими буквами статус поставщика". Т.е. анализируется статус поставщика (он не автоматизирован), а не покупателя.
					//Элемент.Ф300_07_B = ?(ВыборкаОтчета.УчастникСовместнойДеятельности = Истина, "С","");
					
					Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ВыборкаОтчета.РНН) Тогда
						СтрокаРНН = ВыборкаОтчета.РНН;
						// проверим рнн на требования
						ПроверкаРНН = РННСоответствуетТребованиям(ВыборкаОтчета.РНН);
						Если НЕ ПроверкаРНН = Истина Тогда 
							ТекстСообщения = НСтр("ru = 'Форма 300.07. В строке № %1 %2'");		
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки), ПроверкаРНН);			
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);										
						КонецЕсли;
						
					Иначе
						СтрокаРНН = "";
						
						ТекстСообщения = НСтр("ru = 'Форма 300.07. В строке № %1  не заполнена графа C ""РНН покупателя"", т.к. значение содержит символы, отличные от цифр.'");		
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки));			
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);																
					КонецЕсли;
					
					Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ВыборкаОтчета.ИдентификационныйКодЛичности) Тогда
						СтрокаИИН_БИН = ВыборкаОтчета.ИдентификационныйКодЛичности;
					Иначе
						СтрокаИИН_БИН = "";
						ТекстСообщения = НСтр("ru = 'Форма 300.07. В строке № %1  не заполнена графаD ""ИИН (БИН) покупателя"", т.к. значение содержит символы, отличные от цифр.'");		
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки));			
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);						
					КонецЕсли;
					
					Если ПроверятьИИНБИНКонтрагента И НЕ БИНИИНСоответствуетТребованиям(ВыборкаОтчета.ИдентификационныйКодЛичности, Ложь) Тогда												
						ТекстСообщения = НСтр("ru = 'Форма 300.07. В строке № %1  указан неверный ИИН/БИН контрагента в графе D: %2'");		
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки), СокрЛП(ВыборкаОтчета.ИдентификационныйКодЛичности));			
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);						
					КонецЕсли;	
												
					Элемент.Ф300_07_C = СтрокаРНН;
					Элемент.Ф300_07_D = СтрокаИИН_БИН;
																 
							 
				ИначеЕсли ИмяГруппы = "ЛистB" Тогда
					
					Элемент.Ф300_07_A2 = Формат(НомерСтроки, мФорматНомераСтроки);
					
					НомерСФ = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаОтчета.Номер, ВыборкаОтчета.СФ, ПредставлениеНомераДокументов);
					НомерСФ = ИсключитьЗапрещенныеСимволыИзНомераСФ(НомерСФ);								
					
					Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерСФ) Тогда
						// убирать все нецифровые смиволы из номера не будем - пользователи должны сами принять решение как им отображать							
						ТекстСообщения = НСтр("ru = 'Форма 300.07. В строке № %1 графа E ""№ счета-фактуры (документа)"", содержит символы, отличные от цифр.'");		
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки), НомерСФ);			
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);												
						
					КонецЕсли;                 
								
					Элемент.Ф300_07_E = НомерСФ;
					Элемент.Ф300_07_F = ВыборкаОтчета.Дата;
					
					// 7) в графе G указывается признак вида деятельности по налогоплательщику,
					// который осуществляет деятельность в рамках специального налогового режима
					// в соответствии со статьями 448 - 452 Налогового кодекса. При этом в данной графе
					// отмечается «1», если счет-фактура выписан исключительно в целях осуществления
					// деятельности, налогообложение которой осуществляется в общеустановленном порядке; 
					// «2» - если счет-фактура выписан исключительно в целях осуществления деятельности, 
					// налогообложение которой осуществляется в рамках специального налогового режима в соответствии
					// со статьями 448 - 452 Налогового кодекса; 
					
					// пока не заполняем. считаем, что значения 1 или 2 ставят только НП, работающие по спец. режиму.
					//Элемент.Ф300_07_G = 1; 									
					
									 	
				ИначеЕсли ИмяГруппы = "ЛистC" Тогда
							
				 	//заполняем структуру
				 	Элемент.Ф300_07_A3 = Формат(НомерСтроки, мФорматНомераСтроки);
					Элемент.Ф300_07_H  = Окр(ВыборкаОтчета.СуммаОборота);							 	
					Элемент.Ф300_07_I  = Окр(ВыборкаОтчета.СуммаНДС);
					Элемент.Ф300_07_J  = Окр(ВыборкаОтчета.СуммаНДСОборот);	
				КонецЕсли; 
						                                    		 
			 	НомерСтроки = НомерСтроки + 1;           			 					 	
		 	КонецЦикла; 	 
	 	КонецЦикла; 	 
		
		РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы,СтруктураФормы); 	 
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);
		РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма,ТекИмяФормы,Перезаполнить);	 		  		
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтотОбъект);			
	КонецЕсли;
	
КонецПроцедуры // Форма300_07ЗаполнитьАвто()


///////////////////////////////////////////////////////////////////
// ФОРМА 300.08

&НаКлиенте
Процедура  Форма300_08ОбработкаВыбораЗначений(Результат, ПараметрыВыбора) экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли ПараметрыВыбора.ЭлементВыбора  =  "СтатусПоставщика" ИЛИ ПараметрыВыбора.ЭлементВыбора  =  "ПризнакВидаДеятельности" Тогда
		ВыбранныйЭлемент = Результат.Значение
	Иначе
		ВыбранныйЭлемент = Результат;
	КонецЕсли;
	
	Форма300_08ОбработкаВыбораЗначенийНаСервере(ВыбранныйЭлемент, ПараметрыВыбора); 	
КонецПроцедуры

&НаСервере
Процедура  Форма300_08ОбработкаВыбораЗначенийНаСервере(Результат, ПараметрыВыбора)
	НомерЯчейки = Число(Сред(ПараметрыВыбора.Ячейка, Найти(ПараметрыВыбора.Ячейка, "__")+ 2));
	Если ПараметрыВыбора.ЭлементВыбора = "Контрагент"  И ЗначениеЗаполнено(Результат) Тогда
		// РНН
		ИмяЯчейкиРНН = "Ф300_08_C__" + НомерЯчейки;
		Форма300_08ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы, ИмяЯчейкиРНН, Результат.РНН,  Результат, Ложь);	
				
		// ИИН
		ИмяЯчейкиБИН = "Ф300_08_D__" + НомерЯчейки;
		Форма300_08ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы,ИмяЯчейкиБИН, Результат.ИдентификационныйКодЛичности, Результат, Ложь);	
		
	ИначеЕсли ПараметрыВыбора.ЭлементВыбора = "СчетФактура"  И ЗначениеЗаполнено(Результат) Тогда	
		// Номер СФ
		ИмяЯчейки = "Ф300_08_E__" + НомерЯчейки;
				
		НомерСФ = ИсключитьЗапрещенныеСимволыИзНомераСФ(Результат.НомерВходящегоДокумента);		
		Форма300_08ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы, ИмяЯчейки, НомерСФ, Результат, Ложь);			
		
		// Дата СФ
		ИмяЯчейки = "Ф300_08_F__" + НомерЯчейки;
		Форма300_08ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы, ИмяЯчейки, Результат.ДатаВходящегоДокумента, Результат, Ложь);	
		
		// СуммаСФ		
	Иначе		
		Форма300_08ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы, ПараметрыВыбора.Ячейка, Результат, Результат, ПараметрыВыбора.ПризнакРасчета);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Форма300_08ПолеТабличногоДокументаЛистAВыбор(Элемент, Область, СтандартнаяОбработка)	
	Ячейка = Элемент.ТекущаяОбласть.Имя;	
	Если (Найти(Ячейка, "Ф300_08") = 0) Тогда
		Возврат;
	КонецЕсли;
	
	Значение = Элемент.ТекущаяОбласть.Значение;
	ЗначениеРасшифровки = Элемент.ТекущаяОбласть.Расшифровка;
	
	ТекИмяФормы = "Форма300_08";
	ИмяЛиста 	= "ЛистA";
	ПризнакРасчета = Ложь;
	
		
	Если Найти(Ячейка, "Ф300_08_C__")> 0 ИЛИ Найти(Ячейка, "Ф300_08_D__")> 0 Тогда		
		
		 //может быть не заполнена расшировка ячейки при восстановления данных старых форм
		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			 ИмяЯчейкиРасшифровки = "Ф300_08_C" + Сред(Ячейка,Найти(Ячейка,"__"));
			 ОбластьРасширофвки = Форма300_08ПолеТабличногоДокументаЛистA.Области.Найти(ИмяЯчейкиРасшифровки);
			 Если ОбластьРасширофвки <> Неопределено Тогда 
				 ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;				 
				 Форма300_08ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка,Значение, ЗначениеРасшифровки, Ложь);
			 КонецЕсли;				 
		 КонецЕсли;

		Если ЗначениеЗаполнено(Значение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			// стандартная обработка расшифровки
			 Возврат;
		КонецЕсли;		
		
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Контрагент", Ложь);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_08ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",,ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
	ИначеЕсли Найти(Ячейка, "Ф300_08_B__")> 0 Тогда		
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "СтатусПоставщика", Ложь);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_08ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("", "Пустое значение");
		СписокВыбора.Добавить("К", "Поставщик является комитентом");		
		СписокВыбора.Добавить("Э", "Поставщик является экспедитором");
		СписокВыбора.Добавить("Л", "Поставщик является лизингодателем");
		СписокВыбора.Добавить("С", "Реализация в рамках договора о совместной деятельности");
		
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения,"Выберите статус поставщика");
		
	Иначе
		 Возврат;
	КонецЕсли; 	 	
КонецПроцедуры

&НаКлиенте
Процедура Форма300_08ПолеТабличногоДокументаЛистBВыбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Элемент.ТекущаяОбласть.Имя;
	Если (Найти(Ячейка, "Ф300_08") = 0) Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(Ячейка, "__") = 0 Тогда
		НомерЯчейки = 0;
	Иначе
		НомерЯчейки = Число(Сред(Ячейка, Найти(Ячейка, "__")+ 2));;
	КонецЕсли;

	Значение = Элемент.ТекущаяОбласть.Значение;
	ЗначениеРасшифровки = Элемент.ТекущаяОбласть.Расшифровка;
	
	
	ТекИмяФормы = "Форма300_08";
	ИмяЛиста 	= "ЛистB";
	ПризнакРасчета = Ложь;
	                    		
	Если Найти(Ячейка, "Ф300_08_E__")> 0 ИЛИ Найти(Ячейка, "Ф300_08_F__")> 0 Тогда
		 //может быть не заполнена расшировка ячейки при восстановления данных старых форм
		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			 ИмяЯчейкиРасшифровки = "Ф300_08_E" + Сред(Ячейка,Найти(Ячейка,"__"));
			 ОбластьРасширофвки = Форма300_08ПолеТабличногоДокументаЛистB.Области.Найти(ИмяЯчейкиРасшифровки);
			 Если ОбластьРасширофвки <> Неопределено Тогда 
				 ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;				 
				 Форма300_08ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка,Значение, ЗначениеРасшифровки, Ложь);
			 КонецЕсли;				 
		 КонецЕсли;

		Если ЗначениеЗаполнено(Значение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			// стандартная обработка расшифровки
			 Возврат;
		КонецЕсли;
	    // добавим отбор по контрагенту в форме выбора СФ, если контрагент заполнен в ячейках Ф300_08_C__, Ф300_08_D__
		Контрагент = Форма300_08ПолеТабличногоДокументаЛистA.Области["Ф300_08_D__" + НомерЯчейки].Расшифровка;
		
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора", ТекИмяФормы, "ЛистB", Ячейка, "СчетФактура");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_08ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		ФормаВыбора = ОткрытьФорму("Документ.СчетФактураПолученный.ФормаВыбора",,ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(ФормаВыбора.Список, "Контрагент",  Контрагент);
		КонецЕсли;	
		
	ИначеЕсли Найти(Ячейка, "Ф300_08_G__")> 0  Тогда				
		НачЗначение = Область.Значение;
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "ПризнакВидаДеятельности", Ложь);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_08ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("",  "Пустое значение");
		СписокВыбора.Добавить("1", "СНР. По деятельности в рамках общеустановленного режима");
		СписокВыбора.Добавить("2", "СНР. По деятельности в рамках СНР (ст. 448 – 452 Налогового кодекса)");
		СписокВыбора.Добавить("3", "СНР. Подлежит распределение между общеустановленным порядком и  деятельности в рамках СНР (ст. 448 – 452 Налогового кодекса)");
						
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения,"Вид деятельности в рамках специального налогового режима (448 - 452 НК)");
			
	Иначе
		Возврат;
	КонецЕсли; 	 
	
КонецПроцедуры

&НаКлиенте
Процедура Форма300_08ПолеТабличногоДокументаЛистCВыбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Элемент.ТекущаяОбласть.Имя;
	Если (Найти(Ячейка, "Ф300_08") = 0) Тогда
		Возврат;
	КонецЕсли;
	Значение = Элемент.ТекущаяОбласть.Значение;
	
	Если Найти(Ячейка, "__") = 0 Тогда
		НомерЯчейки = 0;
	Иначе
		НомерЯчейки = Число(Сред(Ячейка, Найти(Ячейка, "__")+ 2));;
	КонецЕсли;
	
	ТекИмяФормы = "Форма300_08";
	ИмяЛиста 	= "ЛистC";
	ПризнакРасчета = Ложь;
	                  	
	Если (Найти(Ячейка, "Ф300_08") > 0) Тогда
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Показатели", Истина);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_08ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		Расчет = Истина;
		Если (Найти(Ячейка, "Ф300_08_H__") > 0) Тогда
			НачЗначение = Элемент.ТекущаяОбласть.Значение;			
			ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, "Введите всего стоимость без НДС", 12, 0); 
			 
		ИначеЕсли (Найти(Ячейка, "Ф300_08_I__") > 0) Тогда						
			НачЗначение = Элемент.ТекущаяОбласть.Значение;
			ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, "Введите сумму НДС в счете-фактуре", 12, 0); 						 
		ИначеЕсли (Найти(Ячейка, "Ф300_08_J__") > 0) Тогда			
			НачЗначение = Элемент.ТекущаяОбласть.Значение;
			ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, "Введите сумму НДС, относимого в зачет", 12, 0);
		Иначе 
			Возврат;			 
		КонецЕсли;
       		 
		 Форма300_08ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка, НачЗначение,, Расчет);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Форма300_08ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, ИмяЯчейки, Значение, ЗначениеРасшифровки, ПризнакРасчета)	
	
	ЭтотОбъект["Форма300_08ПолеТабличногоДокумента" + ИмяЛиста].Области[ИмяЯчейки].Значение = Значение;
	ЭтотОбъект["Форма300_08ПолеТабличногоДокумента" + ИмяЛиста].Области[ИмяЯчейки].Расшифровка = ЗначениеРасшифровки;
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтотОбъект, ИмяЛиста, ИмяЯчейки, Значение, ПризнакРасчета,ЗначениеРасшифровки);	
	
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ЭтотОбъект.КодФормы);
КонецПроцедуры

&НаСервере
// Процедура расчитывает значения определенных граф по строке
// многострочной формы.
//
// Параметры:
//      Инд - номер строки многострочной формы
//      Колонка - имя графы (ячейки), из которой была вызвана процедура расчета
//
Процедура Форма300_08РасчетНаСервере(Инд,Колонка)
	// построчный расчет для формы не определен
КонецПроцедуры // Форма300_08Расчет()

&НаСервере
Функция Форма300_08РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	
	Запрос =  Новый Запрос;
	 
	Запрос.УстановитьПараметр("ДатаНачала",			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	//Запрос.УстановитьПараметр("ДатаНачалаЗа10Дней",	мДатаНачалаПериодаОтчета - 10*86400); //-10 дней
	Запрос.УстановитьПараметр("ДатаОкончания", 		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);	                 	
	Запрос.УстановитьПараметр("Налогоплательщик", 	Налогоплательщик);
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	
	Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями и мСписокСтруктурныхЕдиниц.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ОтборПоСтруктурным", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоСтруктурным", Ложь);
	КонецЕсли;                 	
		                 
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	Если СпособФормированияРеестра = "ПоРегиструСчетовФактур" Тогда
		ТекстЗапросаПоДаннымСчетовФактур = ПолучитьТекстЗапросаСчетовФактурПолученныхПоРегистру();
		ПризнакСвязиПоКонтрагенту = Истина;
	Иначе
		ТекстЗапросаПоДаннымСчетовФактур = ПолучитьТекстЗапросаСчетовФактурПолученныхПоДокументам();
		ПризнакСвязиПоКонтрагенту = Ложь;
	КонецЕсли;
	Запрос.УстановитьПараметр("ПризнакСвязиПоКонтрагенту", ПризнакСвязиПоКонтрагенту);
	
	СтатусыПриемаЭСФ = Новый Массив;
	СтатусыПриемаЭСФ.Добавить(Перечисления.СтатусыЭСФ.Доставленный);
	СтатусыПриемаЭСФ.Добавить(Перечисления.СтатусыЭСФ.Созданный);
	Запрос.УстановитьПараметр("СтатусыПриемаЭСФ",   СтатусыПриемаЭСФ);	

	
	ТекстЗапроса = "
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ Разрешенные
	               |	СчетФактураПолученный.Ссылка КАК Ссылка,
	               |	СчетФактураПолученный.ДокументОснование
	               |ПОМЕСТИТЬ ВТ_СписокСчетовФактур
	               |ИЗ
	               |	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	               |ГДЕ
	               |	(СчетФактураПолученный.Ссылка.ДатаСовершенияОборотаПоРеализации МЕЖДУ &ДатаНачала И &ДатаОкончания
				   |	ИЛИ СчетФактураПолученный.ДокументОснование.Дата Между &ДатаНачала И &ДатаОкончания) И СчетФактураПолученный.Ссылка.Организация В (&парамСписокСтруктурныхЕдиниц)
	               |; 
				   | " + ТекстЗапросаПоДаннымСчетовФактур + "
				   |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДвиженияПоНДС.Регистратор КАК Регистратор,
				   |	ВЫБОР КОГДА &ПризнакСвязиПоКонтрагенту Тогда ДвиженияПоНДС.Контрагент Иначе NULL Конец Как Контрагент,
	               |	ДвиженияПоНДС.СчетФактураСтроки КАК СчетФактураСтроки,
	               |	СУММА(ДвиженияПоНДС.СуммаНДСОборот) КАК СуммаНДСОборот
	               |ПОМЕСТИТЬ ВТ_ДвиженияПоНДС
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		КорректировкаНДСОбороты.Регистратор КАК Регистратор,
				   |		КорректировкаНДСОбороты.Контрагент КАК Контрагент,
	               |		КорректировкаНДСОбороты.СуммаНДСОборот КАК СуммаНДСОборот,
	               |		NULL КАК СчетФактураСтроки
	               |	ИЗ
	               |		РегистрНакопления.КорректировкаНДСКВозмещению.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, Налогоплательщик = &Налогоплательщик) КАК КорректировкаНДСОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		НДСКВозмещениюОбороты.Регистратор,
				   |		НДСКВозмещениюОбороты.Контрагент КАК Контрагент,
	               |		НДСКВозмещениюОбороты.СуммаНДСОборот,
	               |		НДСКВозмещениюОбороты.СчетФактура
	               |	ИЗ
	               |		РегистрНакопления.НДСКВозмещению.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, Налогоплательщик = &Налогоплательщик) КАК НДСКВозмещениюОбороты) КАК ДвиженияПоНДС
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДвиженияПоНДС.Регистратор,
				   |	ВЫБОР КОГДА &ПризнакСвязиПоКонтрагенту Тогда ДвиженияПоНДС.Контрагент Иначе NULL Конец,
	               |	ДвиженияПоНДС.СчетФактураСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СписокСчетовФактур.Ссылка КАК Ссылка,
				   |	ВТ_ДвиженияПоНДС.Контрагент,
	               |	СУММА(ВТ_ДвиженияПоНДС.СуммаНДСОборот) КАК СуммаНДСОборот
	               |ПОМЕСТИТЬ ВТ_ИтоговыеДвиженияПоНДС
	               |ИЗ
	               |	ВТ_СписокСчетовФактур КАК ВТ_СписокСчетовФактур
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДвиженияПоНДС КАК ВТ_ДвиженияПоНДС
	               |		ПО ВТ_СписокСчетовФактур.ДокументОснование = ВТ_ДвиженияПоНДС.Регистратор
	               |			И ((НЕ ВТ_ДвиженияПоНДС.Регистратор ССЫЛКА Документ.АвансовыйОтчет)
	               |				ИЛИ ВТ_ДвиженияПоНДС.СчетФактураСтроки = ВТ_СписокСчетовФактур.Ссылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_СписокСчетовФактур.Ссылка,
				   |	ВТ_ДвиженияПоНДС.Контрагент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДанныеСчетовФактур.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	               |	ДанныеСчетовФактур.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	               |	ДанныеСчетовФактур.Дополнительная КАК Дополнительная,
	               |	ДанныеСчетовФактур.Поставщик КАК Контрагент,
				   |	ДанныеСчетовФактур.Поставщик.ИдентификационныйКодЛичности КАК ИдентификационныйКодЛичности,
	               |	ДанныеСчетовФактур.Ссылка КАК СФ,
	               |	ДанныеСчетовФактур.СуммаОборота КАК СуммаОборота,
	               |	ДанныеСчетовФактур.СуммаНДС КАК СуммаНДС,
	               |	ЕСТЬNULL(ВТ_ИтоговыеДвиженияПоНДС.СуммаНДСОборот, 0) КАК СуммаНДСВЗачет,
				   |	ДанныеСчетовФактур.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности
	               |ИЗ
	               |	ВТ_ДанныеСчетовФактур КАК ДанныеСчетовФактур
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИтоговыеДвиженияПоНДС КАК ВТ_ИтоговыеДвиженияПоНДС
	               |		ПО ДанныеСчетовФактур.Ссылка = ВТ_ИтоговыеДвиженияПоНДС.Ссылка				   
				   |		И (НЕ &ПризнакСвязиПоКонтрагенту ИЛИ ДанныеСчетовФактур.УчастникСовместнойДеятельности И ДанныеСчетовФактур.Поставщик = ВТ_ИтоговыеДвиженияПоНДС.Контрагент ИЛИ НЕ ДанныеСчетовФактур.УчастникСовместнойДеятельности И ДанныеСчетовФактур.Контрагент = ВТ_ИтоговыеДвиженияПоНДС.Контрагент)				   
	               |ГДЕ
	               |	ДанныеСчетовФактур.Ссылка.Проведен И (ДанныеСчетовФактур.СуммаОборота <> 0  ИЛИ ДанныеСчетовФактур.СуммаНДС <>0 ИЛИ ЕСТЬNULL(ВТ_ИтоговыеДвиженияПоНДС.СуммаНДСОборот, 0)<>0)";				   
				    	               
	Если ПризнакОтбораПоПериодуДокументов Тогда
		ДатаНачалаОтбораПоДокументам 	=  СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
		ДатаОкончанияОтбораПоДокументам =  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
						
		ДатаОтбораПоДокументам = "Дата";		
		Если  ПризнакПериода = 2 Тогда		
			ДатаНачалаОтбораПоДокументам = ОтборДатаРегистрации;
			ДатаОкончанияОтбораПоДокументам =  '2999.01.01';
		КонецЕсли;
		Запрос.УстановитьПараметр("ДатаНачалаОтбораПоДокументам", 		ДатаНачалаОтбораПоДокументам);
		Запрос.УстановитьПараметр("ДатаОкончанияОтбораПоДокументам", 	ДатаОкончанияОтбораПоДокументам);		
		
		ТекстЗапроса = ТекстЗапроса  + "
				   |	И ДанныеСчетовФактур.Ссылка." + ДатаОтбораПоДокументам + " МЕЖДУ &ДатаНачалаОтбораПоДокументам И &ДатаОкончанияОтбораПоДокументам ";
	КонецЕсли;
		 
	Если ПризнакКонтрагента Тогда
		ТекстЗапроса = ТекстЗапроса + "
				   |	И НЕ ДанныеСчетовФактур.Контрагент.ДатаСвидетельстваПоНДС  = &ПустаяДата
				   |	И НЕ ДанныеСчетовФактур.Контрагент.НомерСвидетельстваПоНДС = &ПустаяСтрока
				   |	И НЕ ДанныеСчетовФактур.Контрагент.СерияСвидетельстваПоНДС = &ПустаяСтрока";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + " 		   
	 			   |
	 			   |УПОРЯДОЧИТЬ ПО
	 			   |	ДанныеСчетовФактур.Ссылка.ДатаВходящегоДокумента 
				   |ИТОГИ				   
				   |	СУММА(СуммаОборота),
				   |	СУММА(СуммаНДС),
				   |	СУММА(СуммаНДСВЗачет)				   
				   |ПО
				   |	ДатаВходящегоДокумента,
   				   |	НомерВходящегоДокумента,				   
                   |	Контрагент,
				   |	УчастникСовместнойДеятельности"; 
	 
	Запрос.Текст = ТекстЗапроса;
	 
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() и ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 300.08 за отчетный период отсутствуют...'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;	
	
	ТаблицаРезультата = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ТаблицаРезультата;		 
	
КонецФункции // Форма300_08РассчитатьДанныеФормы()

&НаКлиенте
Процедура Форма300_08ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Состояние("Расчет формы 300.08");		
	
	Форма300_08ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры	

&НаСервере
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма300_08ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма300_08";
	Очистить(ТекИмяФормы, Истина);
	
	ТекущаяСтраница = 1;
	ВсегоСтраниц = 1;
	
	ВыборкаОтчета = Форма300_08РассчитатьДанныеФормы(Истина);
	 
	Если ВыборкаОтчета.Количество() <> 0 Тогда		
		СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы);		
	                             	
		Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
			НомерСтроки = 2;
			ИмяГруппы 	= ЭлементСтруктуры.Ключ;
			ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
			ТаблицаСтрокГруппы.Очистить();
			
			ВыборкаОтчета.Сбросить();
			
			Пока ВыборкаОтчета.Следующий() Цикл
				СтрокаОтчетаПоДате = ВыборкаОтчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока СтрокаОтчетаПоДате.Следующий() Цикл
					СтрокаОтчетаПоНомеру = СтрокаОтчетаПоДате.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока СтрокаОтчетаПоНомеру.Следующий() Цикл						
						СтрокаОтчета = СтрокаОтчетаПоНомеру.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока СтрокаОтчета.Следующий() Цикл
								
								Если ИсключатьСФсНекорректнымиНомерами Тогда
									// проверим корректный ли номер входящего документа
									Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаОтчета.НомерВходящегоДокумента) Тогда
										Продолжить;
									КонецЕсли;
								КонецЕсли;   
								
								Элемент = ТаблицаСтрокГруппы.Добавить();   			 
								
								Если ИмяГруппы = "ЛистA" Тогда
									//Так должны заполнять по отдельности значения выборки 
									//для каждого листа
									#Если Клиент Тогда
										Состояние("Заполнение строки """  + Формат(НомерСтроки, мФорматНомераСтроки) + """приложения 300.08 ");
									#КонецЕсли
									Элемент.Ф300_08_A   = Формат(НомерСтроки, мФорматНомераСтроки);
									Элемент.Ф300_08_B = ?(СтрокаОтчета.УчастникСовместнойДеятельности = Истина, "С","");
									Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаОтчета.Контрагент.РНН) Тогда
										СтрокаРНН = СтрокаОтчета.Контрагент.РНН;
										// проверяем РНН
										ПроверкаРНН = РННСоответствуетТребованиям(СтрокаОтчета.Контрагент.РНН);
										Если НЕ ПроверкаРНН = Истина Тогда 											
											ТекстСообщения = НСтр("ru = 'Форма 300.08. В строке № %1 %2.'");		
											ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки), ПроверкаРНН);			
											ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);												
										КонецЕсли;
										
									Иначе
										СтрокаРНН = "";                        
										ТекстСообщения = НСтр("ru = 'Форма 300.08. В строке № %1  не заполнена графа C ""РНН поставщика"", т.к. значение содержит символы, отличные от цифр'");		
										ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки), ПроверкаРНН);			
										ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);																						
									КонецЕсли;
									
									Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаОтчета.Контрагент.ИдентификационныйКодЛичности) Тогда
										СтрокаИИН_БИН = СтрокаОтчета.Контрагент.ИдентификационныйКодЛичности;
									Иначе
										СтрокаИИН_БИН = "";
										ТекстСообщения = НСтр("ru = 'Форма 300.08. В строке № %1  не заполнена графа D ""ИИН (БИН) поставщика"", т.к. значение содержит символы, отличные от цифр'");		
										ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки));			
										ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);																														
									КонецЕсли;
									
									Если ПроверятьИИНБИНКонтрагента И НЕ БИНИИНСоответствуетТребованиям(ВыборкаОтчета.ИдентификационныйКодЛичности, Ложь) Тогда										
										ТекстСообщения = НСтр("ru = 'Форма 300.08. В строке № %1  указан неверный ИИН/БИН контрагента в графе D: %2'");		
										ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки), СокрЛП(ВыборкаОтчета.ИдентификационныйКодЛичности));			
										ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);																														
									КонецЕсли;	
									
									Элемент.Ф300_08_C = СтрокаРНН;
									Элемент.Ф300_08_D = СтрокаИИН_БИН;																	
									
								ИначеЕсли ИмяГруппы = "ЛистB" Тогда
									
									//заполняем структуру
									Элемент.Ф300_08_A2 = Формат(НомерСтроки, мФорматНомераСтроки);
									
									// Номер счета-фактуры отображаем как он был занесен в базу
									НомерСФ = СокрЛП(СтрокаОтчета.НомерВходящегоДокумента);
									Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаОтчета.НомерВходящегоДокумента) Тогда
										ТекстСообщения = НСтр("ru = 'Форма 300.08. В строке № %1  графа E ""№ счета-фактуры (документа) содержит символы, отличные от цифр'");		
										ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки), НомерСФ, СокрЛП(ВыборкаОтчета.ИдентификационныйКодЛичности));			
										ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);																																								
									КонецЕсли;                 
									
									Элемент.Ф300_08_E = НомерСФ;
									Элемент.Ф300_08_F = СтрокаОтчета.ДатаВходящегоДокумента;							
									
									ВыборкаСФ = СтрокаОтчета.Выбрать();
									Пока ВыборкаСФ.Следующий() Цикл
										Элемент.Ф300_08_E_Расшифровка = ВыборкаСФ.СФ;
										Элемент.Ф300_08_F_Расшифровка = ВыборкаСФ.СФ;
									КонецЦикла;						
									
								ИначеЕсли ИмяГруппы = "ЛистC" Тогда
									
									//заполняем структуру
									Элемент.Ф300_08_A3 = Формат(НомерСтроки, мФорматНомераСтроки);
									Элемент.Ф300_08_H  = Окр(СтрокаОтчета.СуммаОборота);							 	
									Элемент.Ф300_08_I  = Окр(СтрокаОтчета.СуммаНДС);								
									Элемент.Ф300_08_J  = Окр(СтрокаОтчета.СуммаНДСВЗачет);	
									
									Если Элемент.Ф300_08_I <> Элемент.Ф300_08_J Тогда
										// Проверим рассчиталась ли сумма НДС в зачет, если не рассчиталась, то сообщаем об этом пользователю
										ВыборкаСФ = СтрокаОтчета.Выбрать();
										Пока ВыборкаСФ.Следующий() Цикл
											Если НЕ ЗначениеЗаполнено(ВыборкаСФ.СуммаНДСВЗачет) И ЗначениеЗаполнено(ВыборкаСФ.СуммаНДС) Тогда
												ТекстСообщения = НСтр("ru = 'Форма 300.08. В строке № %1  для счета-фактуры  %2 не определена сумма НДС, подлежащего отнесению в зачет. Проверьте правильность введенной даты документа основания для счета-фактуры'");		
												ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки), ВыборкаСФ.СФ);			
												ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);																																																														
											КонецЕсли;
										КонецЦикла;
									КонецЕсли;
									
								КонецЕсли; 
								
								НомерСтроки = НомерСтроки + 1;           			 												
						КонецЦикла; 	 
					КонецЦикла; 	 
				КонецЦикла; 	 
			КонецЦикла; 	 
		КонецЦикла; 	 
		
		РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекимяФормы,СтруктураФормы); 	 
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма,ТекИмяФормы);
		РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма,ТекИмяФормы,Перезаполнить);		 		 		
	КонецЕсли;	
	
КонецПроцедуры // Форма300_08ЗаполнитьАвто()


///////////////////////////////////////////////////////////////////
// ФОРМА 300.09

&НаКлиенте
Процедура  Форма300_09ОбработкаВыбораЗначений(Результат, ПараметрыВыбора) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли ПараметрыВыбора.ЭлементВыбора  =  "СтатусПоставщика" ИЛИ ПараметрыВыбора.ЭлементВыбора  =  "ВидОборота" Тогда
		ВыбранныйЭлемент = Результат.Значение
	Иначе
		ВыбранныйЭлемент = Результат;
	КонецЕсли;
	
	Форма300_09ОбработкаВыбораЗначенийНаСервере(ВыбранныйЭлемент, ПараметрыВыбора); 	
КонецПроцедуры

&НаСервере
Процедура  Форма300_09ОбработкаВыбораЗначенийНаСервере(Результат, ПараметрыВыбора)
	НомерЯчейки = Число(Сред(ПараметрыВыбора.Ячейка, Найти(ПараметрыВыбора.Ячейка, "__")+ 2));
	Если ПараметрыВыбора.ЭлементВыбора = "Контрагент" И ЗначениеЗаполнено(Результат) Тогда
		
		СтруктураИННиКПП = РегламентированнаяОтчетностьКлиентСервер.ПолучитьИИНиКППКонтрагента(Результат.НомерНалоговойРегистрацииВСтранеРезидентства);
		
		// ИИН
		ИмяЯчейкиИНН = "Ф300_09_B1__" + НомерЯчейки;
		Форма300_09ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы, ИмяЯчейкиИНН, СтруктураИННиКПП.ИНН,  Результат, Ложь);	
				
		// КПП
		ИмяЯчейкиКПП = "Ф300_09_B2__" + НомерЯчейки;
		Форма300_09ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы,ИмяЯчейкиКПП, СтруктураИННиКПП.КПП, Результат, Ложь);	
		
	ИначеЕсли ПараметрыВыбора.ЭлементВыбора = "СчетФактура" И ЗначениеЗаполнено(Результат) Тогда	
		// Номер СФ
		ИмяЯчейки = "Ф300_09_C__" + НомерЯчейки;
		
		НомерСФ = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Результат.Номер, Результат, ПредставлениеНомераДокументов);
		НомерСФ = ИсключитьЗапрещенныеСимволыИзНомераСФ(НомерСФ);		
		Форма300_09ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы, ИмяЯчейки, НомерСФ, Результат, Ложь);			
		
		// Дата СФ
		ИмяЯчейки = "Ф300_09_D__" + НомерЯчейки;
		Форма300_09ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы, ИмяЯчейки, Результат.Дата, Результат, Ложь);	
		
		// СуммаСФ		
	Иначе		
		Форма300_09ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы, ПараметрыВыбора.Ячейка, Результат, Результат, ПараметрыВыбора.ПризнакРасчета);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Форма300_09ПолеТабличногоДокументаЛистAВыбор(Элемент, Область, СтандартнаяОбработка)	
	Ячейка = Элемент.ТекущаяОбласть.Имя;	
	Если (Найти(Ячейка, "Ф300_09") = 0) Тогда
		Возврат;
	КонецЕсли;
	
	Значение = Элемент.ТекущаяОбласть.Значение;
	ЗначениеРасшифровки = Элемент.ТекущаяОбласть.Расшифровка;
	
	Если Найти(Ячейка, "__") = 0 Тогда
		НомерЯчейки = 0;
	Иначе
		НомерЯчейки = Число(Сред(Ячейка, Найти(Ячейка, "__")+ 2));;
	КонецЕсли;

	
	ТекИмяФормы = "Форма300_09";
	ИмяЛиста 	= "ЛистA";
	ПризнакРасчета = Ложь;
	
		
	Если Найти(Ячейка, "Ф300_09_B1__")> 0 ИЛИ Найти(Ячейка, "Ф300_09_B2__")> 0 Тогда				
		
		 //может быть не заполнена расшировка ячейки при восстановления данных старых форм
		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			 ИмяЯчейкиРасшифровки = "Ф300_09_B1" + Сред(Ячейка,Найти(Ячейка,"__"));
			 ОбластьРасширофвки = Форма300_09ПолеТабличногоДокументаЛистA.Области.Найти(ИмяЯчейкиРасшифровки);
			 Если ОбластьРасширофвки <> Неопределено Тогда 
				 ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;				 
				 Форма300_09ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка,Значение, ЗначениеРасшифровки, Ложь);
			 КонецЕсли;				 
		 КонецЕсли;

		Если ЗначениеЗаполнено(Значение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			// стандартная обработка расшифровки
			 Возврат;
		КонецЕсли;
		 
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Контрагент", Ложь);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_09ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",,ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
	ИначеЕсли Найти(Ячейка, "Ф300_09_C__")> 0 ИЛИ Найти(Ячейка, "Ф300_09_D__")> 0 Тогда	
		 //может быть не заполнена расшировка ячейки при восстановления данных старых форм
		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			 ИмяЯчейкиРасшифровки = "Ф300_09_C" + Сред(Ячейка,Найти(Ячейка,"__"));
			 ОбластьРасширофвки = Форма300_09ПолеТабличногоДокументаЛистA.Области.Найти(ИмяЯчейкиРасшифровки);
			 Если ОбластьРасширофвки <> Неопределено Тогда 
				 ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;				 
				 Форма300_09ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка,Значение, ЗначениеРасшифровки, Ложь);
			 КонецЕсли;				 
		 КонецЕсли;

		Если ЗначениеЗаполнено(Значение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			// стандартная обработка расшифровки
			 Возврат;
		КонецЕсли;
		 
	    // добавим отбор по контрагенту в форме выбора СФ, если контрагент заполнен в ячейках Ф300_09_B1__, Ф300_09_B2__
		Контрагент = Форма300_09ПолеТабличногоДокументаЛистA.Области["Ф300_09_B1__" + НомерЯчейки].Расшифровка;
		
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора", ТекИмяФормы, ИмяЛиста, Ячейка, "СчетФактура");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_09ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		ФормаВыбора = ОткрытьФорму("Документ.СчетФактураВыданный.ФормаВыбора",,ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		//ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(ФормаВыбора.Список, "Организация", мСписокСтруктурныхЕдиниц);
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(ФормаВыбора.Список, "Контрагент",  Контрагент);
		КонецЕсли;	

		
	Иначе
		 Возврат;
	КонецЕсли; 	 	
КонецПроцедуры

&НаКлиенте
Процедура Форма300_09ПолеТабличногоДокументаЛистBВыбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Элемент.ТекущаяОбласть.Имя;
	Если (Найти(Ячейка, "Ф300_09") = 0) Тогда
		Возврат;
	КонецЕсли;
	Значение = Элемент.ТекущаяОбласть.Значение;
	
	Если Найти(Ячейка, "__") = 0 Тогда
		НомерЯчейки = 0;
	Иначе
		НомерЯчейки = Число(Сред(Ячейка, Найти(Ячейка, "__")+ 2));;
	КонецЕсли;

	ТекИмяФормы = "Форма300_09";
	ИмяЛиста 	= "ЛистB";
	ПризнакРасчета = Ложь;
	Если (Найти(Ячейка, "Ф300_09") > 0) Тогда
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Показатели", Истина);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_09ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		Расчет = Истина;
		Если (Найти(Ячейка, "Ф300_09_E__") > 0) Тогда
			НачЗначение = Элемент.ТекущаяОбласть.Значение;			
			ПоказатьВводДаты(ОписаниеОповещения, НачЗначение, "Введите дату совершения оборота", ЧастиДаты.Дата); 
			 
		ИначеЕсли (Найти(Ячейка, "Ф300_09_F__") > 0) Тогда						
			НачЗначение = Область.Значение;
			ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "ВидОборота", Ложь);
			ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_09ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
			
			СписокВыбора = Новый СписокЗначений;
			СписокВыбора.Добавить("",  "Пустое значение");
			СписокВыбора.Добавить("Э", "товары, экспортированные в государства-члены таможенного союза");
			СписокВыбора.Добавить("Г", "грузополучателем товаров является резидент Российской Федерации");
			СписокВыбора.Добавить("Р", "работы по переработке давальческого сырья");
			
			СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения,"Вид оборота по реализации");
					 
		ИначеЕсли (Найти(Ячейка, "Ф300_09_G__") > 0) Тогда			
			НачЗначение = Элемент.ТекущаяОбласть.Значение;
			ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, "Введите размер оборота", 12, 0);
		Иначе 
			Возврат;			 
		КонецЕсли;
       		 
		 Форма300_09ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка, НачЗначение,, Расчет);
	КонецЕсли;                		
		
КонецПроцедуры

&НаСервере
Процедура Форма300_09ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, ИмяЯчейки, Значение, ЗначениеРасшифровки, ПризнакРасчета)	
	
	ЭтотОбъект["Форма300_09ПолеТабличногоДокумента" + ИмяЛиста].Области[ИмяЯчейки].Значение = Значение;
	ЭтотОбъект["Форма300_09ПолеТабличногоДокумента" + ИмяЛиста].Области[ИмяЯчейки].Расшифровка = ЗначениеРасшифровки;
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтотОбъект, ИмяЛиста, ИмяЯчейки, Значение, ПризнакРасчета,ЗначениеРасшифровки);	
	
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ЭтотОбъект.КодФормы);
КонецПроцедуры

&НаСервере
// Процедура расчитывает значения определенных граф по строке
// многострочной формы.
//
// Параметры:
//      Инд - номер строки многострочной формы
//      Колонка - имя графы (ячейки), из которой была вызвана процедура расчета
//
Процедура Форма300_09РасчетНаСервере(Инд,Колонка)
	// построчный расчет для формы не определен
КонецПроцедуры // Форма300_08Расчет()

&НаСервере
Функция Форма300_09РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	
	Если Метаданные.Справочники.Найти("СтраныУчастникиТаможенногоСоюза") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
    ЗапросПоСтранам = Новый Запрос;
	ЗапросПоСтранам.УстановитьПараметр("РФ", Справочники.СтраныУчастникиТаможенногоСоюза.Россия);		
	ЗапросПоСтранам.УстановитьПараметр("Код", "643");
	
	ЗапросПоСтранам.Текст = "ВЫБРАТЬ
	                        |	КлассификаторСтранМира.Ссылка
	                        |ИЗ
	                        |	Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
	                        |ГДЕ КлассификаторСтранМира.УчастникТаможенногоСоюза = &РФ ИЛИ 
	                        |	КлассификаторСтранМира.Код = &Код";
							
	Результат = ЗапросПоСтранам.Выполнить();
	СписокСтран = Новый СписокЗначений;
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл 
			СписокСтран.Добавить(Выборка.Ссылка);
		КонецЦикла;
	Иначе 		
		Возврат Неопределено;
	КонецЕсли;

	Запрос =  Новый Запрос;
	 
	Запрос.УстановитьПараметр("ДатаНачала",		    СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);	
	Запрос.УстановитьПараметр("ДатаОкончания",   	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Запрос.УстановитьПараметр("Налогоплательщик",   Налогоплательщик);	
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями и мСписокСтруктурныхЕдиниц.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ОтборПоСтруктурным", Истина);	
	Иначе		
		Запрос.УстановитьПараметр("ОтборПоСтруктурным", Ложь);
	КонецЕсли;          
	
	Если СпособФормированияРеестра = "ПоРегиструСчетовФактур" Тогда
		ТекстЗапросаПоДаннымСчетовФактур = ПолучитьТекстЗапросаСчетовФактурВыданныхПоРегистру();
		ПризнакСвязиПоКонтрагенту = Истина;
	Иначе
		ТекстЗапросаПоДаннымСчетовФактур = ПолучитьТекстЗапросаСчетовФактурВыданныхПоДокументам();
		ПризнакСвязиПоКонтрагенту = Ложь;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПризнакСвязиПоКонтрагенту", ПризнакСвязиПоКонтрагенту);	
	
	Запрос.УстановитьПараметр("парамСтрана", СписокСтран);	
			                 
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("ПустаяСтрока", "");

	
	ТекстЗапроса = " ВЫБРАТЬ
	               |	ДвиженияПоНДС.Регистратор КАК Регистратор,
				   |	ВЫБОР КОГДА &ПризнакСвязиПоКонтрагенту Тогда ДвиженияПоНДС.Контрагент Иначе NULL Конец КАК Контрагент,
	               |	СУММА(ДвиженияПоНДС.СуммаНДСОборот) КАК СуммаНДСОборот,
	               |	ДвиженияПоНДС.ОборотПоРеализацииОборот
	               |ПОМЕСТИТЬ ДвиженияПоНДС
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		КорректировкаНДСОбороты.Регистратор КАК Регистратор,
				   |		КорректировкаНДСОбороты.Контрагент КАК Контрагент,
	               |		КорректировкаНДСОбороты.СуммаНДСОборот КАК СуммаНДСОборот,	               
	               |		КорректировкаНДСОбороты.СуммаКорректировкиОборотаОборот КАК СуммаБезНДСОборот,
	               |		КорректировкаНДСОбороты.СуммаКорректировкиОборотаОборот КАК ОборотПоРеализацииОборот
	               |	ИЗ
	               |		РегистрНакопления.КорректировкаНДС.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, Налогоплательщик = &Налогоплательщик) КАК КорректировкаНДСОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ				   
	               |		НДСОбороты.Регистратор,
				   |		НДСОбороты.Контрагент КАК Контрагент,
	               |		НДСОбороты.СуммаНДСОборот,	               
	               |		НДСОбороты.СуммаБезНДСОборот,
	               |		НДСОбороты.ОборотПоРеализацииОборот
	               |	ИЗ
	               |		РегистрНакопления.НДС.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, Налогоплательщик = &Налогоплательщик И (НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСОблагаемыйИмпорт))) КАК НДСОбороты) КАК ДвиженияПоНДС
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДвиженияПоНДС.Регистратор,
				   |	ВЫБОР КОГДА &ПризнакСвязиПоКонтрагенту Тогда ДвиженияПоНДС.Контрагент Иначе NULL Конец,
	               |	ДвиженияПоНДС.ОборотПоРеализацииОборот
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Регистратор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактура,
	               |	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК Ссылка,
	               |	ДвиженияПоНДС.Контрагент КАК Контрагент,
	               |	СУММА(ЕСТЬNULL(ДвиженияПоНДС.СуммаНДСОборот, 0)) КАК СуммаНДСОборот,
	               |	СчетФактураВыданныйДокументыОснования.ДокументОснование.Дата КАК ДатаСовершенияОборота,
	               |	СУММА(ЕСТЬNULL(ДвиженияПоНДС.ОборотПоРеализацииОборот, 0)) КАК СуммаОборот
	               |ПОМЕСТИТЬ ДокументОснованиеВТ
	               |ИЗ
	               |	ДвиженияПоНДС КАК ДвиженияПоНДС
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	               |		ПО ДвиженияПоНДС.Регистратор = СчетФактураВыданныйДокументыОснования.ДокументОснование
	               |ГДЕ
	               |	СчетФактураВыданныйДокументыОснования.Ссылка.СтранаНазначения В (&парамСтрана)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СчетФактураВыданныйДокументыОснования.Ссылка, СчетФактураВыданныйДокументыОснования.ДокументОснование, ДвиженияПоНДС.Контрагент,
	               |	СчетФактураВыданныйДокументыОснования.ДокументОснование.Дата
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СчетФактура
	               |; " + ТекстЗапросаПоДаннымСчетовФактур +"					  				   
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеСчетовФактур.Номер,
	               |	ДанныеСчетовФактур.Дата,
	               |	ДанныеСчетовФактур.Покупатель КАК Контрагент,
	               |	ДанныеСчетовФактур.Ссылка КАК СФ,
	               |	ДанныеСчетовФактур.Дополнительная,
	               |	ДанныеСчетовФактур.НомерНалоговойРегистрацииВСтранеРезидентства,
	               |	НАЧАЛОПЕРИОДА(ДанныеСчетовФактур.ДатаОборота, ДЕНЬ) КАК ДатаСовершенияОборота,
	               |	ДокументОснованиеВТ.Ссылка КАК ДокументОснованиеСсылка,
				   |	Сумма(ДанныеСчетовФактур.Сумма) КАК СуммаОборот,
	               |	СУММА(ЕстьNull(ДокументОснованиеВТ.СуммаОборот, 0)) КАК СуммаОборотПоРегистру,
				   |	ДанныеСчетовФактур.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности
	               |ИЗ
	               |	ДанныеСчетовФактур КАК ДанныеСчетовФактур
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДокументОснованиеВТ КАК ДокументОснованиеВТ
	               |		ПО ДанныеСчетовФактур.Ссылка = ДокументОснованиеВТ.СчетФактура				   
				   |		И (НЕ &ПризнакСвязиПоКонтрагенту ИЛИ ДанныеСчетовФактур.УчастникСовместнойДеятельности И ДанныеСчетовФактур.Покупатель = ДокументОснованиеВТ.Контрагент ИЛИ НЕ ДанныеСчетовФактур.УчастникСовместнойДеятельности И ДанныеСчетовФактур.Контрагент = ДокументОснованиеВТ.Контрагент)
	               |ГДЕ
	               |	ДанныеСчетовФактур.Ссылка.Проведен = ИСТИНА";
				   				    	 
	Если ПризнакПокупателя Тогда
		ТекстЗапроса = ТекстЗапроса + "
				   |	И НЕ ДанныеСчетовФактур.НомерНалоговойРегистрацииВСтранеРезидентства  = &ПустаяСтрока";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + " 		   
	        	   |СГРУППИРОВАТЬ ПО
				   |	ДанныеСчетовФактур.Номер,
				   |	ДанныеСчетовФактур.Дата,
				   |	ДанныеСчетовФактур.Покупатель,
				   |	ДанныеСчетовФактур.Ссылка,
				   |	ДанныеСчетовФактур.Дополнительная,
				   |	ДанныеСчетовФактур.НомерНалоговойРегистрацииВСтранеРезидентства,
				   |	ДокументОснованиеВТ.Ссылка,
				   |	НАЧАЛОПЕРИОДА(ДанныеСчетовФактур.ДатаОборота, ДЕНЬ),
				   |	ДанныеСчетовФактур.УчастникСовместнойДеятельности"; 
	
	ТекстЗапроса = ТекстЗапроса + " 		   
	 			   |
	 			   |УПОРЯДОЧИТЬ ПО
	 			   |	ДанныеСчетовФактур.Дата"; 
	 
	Запрос.Текст = ТекстЗапроса;
	 
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() и ВыдаватьСообщения Тогда		
		ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 300.09 за отчетный период отсутствуют...'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;	
	
	ТаблицаРезультата = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ТаблицаРезультата;		 
КонецФункции

&НаКлиенте
Процедура Форма300_09ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Состояние("Расчет формы 300.09");		
	
	Форма300_09ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры	

&НаСервере
Процедура Форма300_09ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)	
	ТекИмяФормы = "Форма300_09";		
	Очистить(ТекИмяФормы, Истина);
	
	ТекущаяСтраница = 1;
	ВсегоСтраниц = 1;

	ВыборкаОтчета = Форма300_09РассчитатьДанныеФормы(Истина);
	
	Если ВыборкаОтчета = Неопределено Тогда 	
		Возврат
	КонецЕсли;
		
	Если ВыборкаОтчета.Количество() <> 0 Тогда
		СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы);		
	                             	
		Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
			НомерСтроки = 2;
			ИмяГруппы 	= ЭлементСтруктуры.Ключ;
			ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
			ТаблицаСтрокГруппы.Очистить();
			
			ВыборкаОтчета.Сбросить();
		 
		 	Пока ВыборкаОтчета.Следующий() Цикл
				
				Элемент = ТаблицаСтрокГруппы.Добавить();   			 
				
				Если ИмяГруппы = "ЛистA" Тогда
					//Так должны заполнять по отдельности значения выборки 
					//для каждого листа
			
					Элемент.Ф300_09_A   = Формат(НомерСтроки, мФорматНомераСтроки);
					СтруктураИННиКПП = РегламентированнаяОтчетностьКлиентСервер.ПолучитьИИНиКППКонтрагента(ВыборкаОтчета.НомерНалоговойРегистрацииВСтранеРезидентства);
					
					Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтруктураИННиКПП.ИНН) Тогда
						СтрокаИНН = СтруктураИННиКПП.ИНН;						
					Иначе
						СтрокаИНН = "";
						ТекстСообщения = НСтр("ru = 'Форма 300.09. В строке %1 не заполнена графа B ""ИИН покупателя"". Значение %2 содержит символы, отличные от цифр.'");		
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки), СтруктураИННиКПП.ИНН);			
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ВыборкаОтчета.Контрагент, "НомерНалоговойРегистрацииВСтранеРезидентства");							
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтруктураИННиКПП.КПП) ИЛИ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтруктураИННиКПП.КПП) Тогда
						СтрокаКПП = СтруктураИННиКПП.КПП;
						
					Иначе
						СтрокаКПП = "";
						
						ТекстСообщения = НСтр("ru = 'Форма 300.09. В строке %1 не заполнена графаB2 ""КПП покупателя"". Значение %2 содержит символы, отличные от цифр.'");		
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки), СтруктураИННиКПП.КПП );			
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ВыборкаОтчета.Контрагент, "НомерНалоговойРегистрацииВСтранеРезидентства");													
					КонецЕсли;
					
																	
					Элемент.Ф300_09_B1 = СтрокаИНН;					
					Элемент.Ф300_09_B2 = СтрокаКПП;
					
					Элемент.Ф300_09_B1_Расшифровка =  ВыборкаОтчета.Контрагент;
					Элемент.Ф300_09_B2_Расшифровка =  ВыборкаОтчета.Контрагент;
									
					
					НомерСФ =  ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаОтчета.Номер, ВыборкаОтчета.СФ, ПредставлениеНомераДокументов);
					НомерСФ = ИсключитьЗапрещенныеСимволыИзНомераСФ(НомерСФ);		
													
					Элемент.Ф300_09_C = НомерСФ;
					Элемент.Ф300_09_D = ВыборкаОтчета.Дата;
					
					Элемент.Ф300_09_C_Расшифровка = ВыборкаОтчета.СФ;
					Элемент.Ф300_09_D_Расшифровка = ВыборкаОтчета.СФ;				
										
				ИначеЕсли ИмяГруппы = "ЛистB" Тогда
					
					Элемент.Ф300_09_A2 = Формат(НомерСтроки, мФорматНомераСтроки);
					
					Элемент.Ф300_09_E = ВыборкаОтчета.ДатаСовершенияОборота;					
					
					Если ТипЗнч(ВыборкаОтчета.ДокументОснованиеСсылка) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
   						Элемент.Ф300_09_F = "Р";
					Иначе 
						Элемент.Ф300_09_F = "Э";
					КонецЕсли;
					
					//заполняем структуру
				 	Элемент.Ф300_09_G  = Окр(ВыборкаОтчета.СуммаОборот);							 	
					
				КонецЕсли; 
				НомерСтроки = НомерСтроки + 1;           			 					 	
		 	КонецЦикла; 	 
	 	КонецЦикла; 	 
		
		РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекимяФормы, СтруктураФормы); 	 
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);
		РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма,ТекИмяФормы,Перезаполнить);	 		
	КонецЕсли;
	
КонецПроцедуры	

///////////////////////////////////////////////////////////////////
// ФОРМА 300.10

&НаКлиенте
Процедура  Форма300_10ОбработкаВыбораЗначений(Результат, ПараметрыВыбора) экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли ПараметрыВыбора.ЭлементВыбора  =  "СтатусПоставщика" ИЛИ ПараметрыВыбора.ЭлементВыбора  =  "ВидОборота" Тогда
		ВыбранныйЭлемент = Результат.Значение
	Иначе
		ВыбранныйЭлемент = Результат;
	КонецЕсли;
	
	Форма300_10ОбработкаВыбораЗначенийНаСервере(ВыбранныйЭлемент, ПараметрыВыбора); 	
КонецПроцедуры

&НаСервере
Процедура  Форма300_10ОбработкаВыбораЗначенийНаСервере(Результат, ПараметрыВыбора)
	НомерЯчейки = Число(Сред(ПараметрыВыбора.Ячейка, Найти(ПараметрыВыбора.Ячейка, "__")+ 2));
	Если ПараметрыВыбора.ЭлементВыбора = "Контрагент" Тогда
		// УПН
		ИмяЯчейки = "Ф300_10_B__" + НомерЯчейки;
		Форма300_10ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы, ИмяЯчейки, СокрЛП(Результат.НомерНалоговойРегистрацииВСтранеРезидентства),  Результат, Ложь);				
		
	ИначеЕсли ПараметрыВыбора.ЭлементВыбора = "СчетФактура" Тогда	
		// Номер СФ
		ИмяЯчейки = "Ф300_10_C__" + НомерЯчейки;
		
		НомерСФ = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Результат.Номер, Результат, ПредставлениеНомераДокументов);
		НомерСФ = ИсключитьЗапрещенныеСимволыИзНомераСФ(НомерСФ);		
		Форма300_10ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы, ИмяЯчейки, НомерСФ, Результат, Ложь);			
		
		// Дата СФ
		ИмяЯчейки = "Ф300_10_D__" + НомерЯчейки;
		Форма300_10ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы, ИмяЯчейки, Результат.Дата, Результат, Ложь);	
		
		// СуммаСФ		
	Иначе		
		Форма300_10ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы, ПараметрыВыбора.Ячейка, Результат, Результат, ПараметрыВыбора.ПризнакРасчета);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Форма300_10ПолеТабличногоДокументаЛистAВыбор(Элемент, Область, СтандартнаяОбработка)	
	Ячейка = Элемент.ТекущаяОбласть.Имя;	
	Если (Найти(Ячейка, "Ф300_10") = 0) Тогда
		Возврат;
	КонецЕсли;
	
	Значение = Элемент.ТекущаяОбласть.Значение;
	ЗначениеРасшифровки = Элемент.ТекущаяОбласть.Расшифровка;
	Если Найти(Ячейка, "__") = 0 Тогда
		НомерЯчейки = 0;
	Иначе
		НомерЯчейки = Число(Сред(Ячейка, Найти(Ячейка, "__")+ 2));;
	КонецЕсли;
	
	ТекИмяФормы = "Форма300_10";
	ИмяЛиста 	= "ЛистA";
	ПризнакРасчета = Ложь;
	
		
	Если Найти(Ячейка, "Ф300_10_B__")> 0 Тогда
		
		Если ЗначениеЗаполнено(Значение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			// стандартная обработка расшифровки
			 Возврат;
		КонецЕсли;		
		
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Контрагент", Ложь);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_10ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",,ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
	ИначеЕсли Найти(Ячейка, "Ф300_10_C__")> 0 ИЛИ Найти(Ячейка, "Ф300_10_D__")> 0 Тогда	
		
		 //может быть не заполнена расшировка ячейки при восстановления данных старых форм
		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			 ИмяЯчейкиРасшифровки = "Ф300_10_C" + Сред(Ячейка,Найти(Ячейка,"__"));
			 ОбластьРасширофвки = Форма300_10ПолеТабличногоДокументаЛистA.Области.Найти(ИмяЯчейкиРасшифровки);
			 Если ОбластьРасширофвки <> Неопределено Тогда 
				 ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;				 
				 Форма300_10ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка,Значение, ЗначениеРасшифровки, Ложь);
			 КонецЕсли;				 
		 КонецЕсли;   
		 
		Если ЗначениеЗаполнено(Значение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			// стандартная обработка расшифровки
			 Возврат;
		КонецЕсли;		
	    // добавим отбор по контрагенту в форме выбора СФ, если контрагент заполнен в ячейках Ф300_10_B__
		Контрагент = Форма300_10ПолеТабличногоДокументаЛистA.Области["Ф300_10_B__" + НомерЯчейки].Расшифровка;
		
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора", ТекИмяФормы, ИмяЛиста, Ячейка, "СчетФактура");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_10ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		ФормаВыбора = ОткрытьФорму("Документ.СчетФактураВыданный.ФормаВыбора",,ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(ФормаВыбора.Список, "Контрагент",  Контрагент);
		КонецЕсли;	
	ИначеЕсли (Найти(Ячейка, "Ф300_10_E__") > 0) Тогда
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Показатели", Истина);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_10ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		
		НачЗначение = Элемент.ТекущаяОбласть.Значение;			
		ПоказатьВводДаты(ОписаниеОповещения, НачЗначение, "Введите дату совершения оборота", ЧастиДаты.Дата); 
		
	Иначе
		 Возврат;
	КонецЕсли; 	 	
КонецПроцедуры


&НаКлиенте
Процедура Форма300_10ПолеТабличногоДокументаЛистBВыбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Элемент.ТекущаяОбласть.Имя;
	
	Если Найти(Ячейка, "Ф300_10") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Значение = Элемент.ТекущаяОбласть.Значение;
	Если Найти(Ячейка, "__") = 0 Тогда
		НомерЯчейки = 0;
	Иначе
		НомерЯчейки = Число(Сред(Ячейка, Найти(Ячейка, "__")+ 2));;
	КонецЕсли;
	
	ТекИмяФормы = "Форма300_10";
	ИмяЛиста 	= "ЛистB";
	
	ПризнакРасчета = Ложь;
	Если (Найти(Ячейка, "Ф300_10") > 0) Тогда
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Показатели", Истина);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_10ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		Расчет = Истина;
		Если (Найти(Ячейка, "Ф300_10_F__") > 0) Тогда						
			НачЗначение = Область.Значение;
			ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "ВидОборота", Ложь);
			ОписаниеОповещения = Новый ОписаниеОповещения("Форма300_10ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
			
			СписокВыбора = Новый СписокЗначений;
			СписокВыбора.Добавить("",  "Пустое значение");
			СписокВыбора.Добавить("Э", "товары, экспортированные в государства-члены таможенного союза");
			СписокВыбора.Добавить("Г", "грузополучателем товаров является резидент Республики Беларусь");
			СписокВыбора.Добавить("Р", "работы по переработке давальческого сырья");
			
			СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения,"Вид оборота по реализации");
					 
		ИначеЕсли (Найти(Ячейка, "Ф300_10_G__") > 0) Тогда			
			НачЗначение = Элемент.ТекущаяОбласть.Значение;
			ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, "Введите размер облагаемого оборота", 12, 0);
		Иначе 
			Возврат;			 
		КонецЕсли;
       		 
		Форма300_10ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка, НачЗначение,, Расчет);
	КонецЕсли;                		
		
КонецПроцедуры


&НаСервере
Процедура Форма300_10ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, ИмяЯчейки, Значение, ЗначениеРасшифровки, ПризнакРасчета)	
	
	ЭтотОбъект["Форма300_10ПолеТабличногоДокумента" + ИмяЛиста].Области[ИмяЯчейки].Значение = Значение;
	ЭтотОбъект["Форма300_10ПолеТабличногоДокумента" + ИмяЛиста].Области[ИмяЯчейки].Расшифровка = ЗначениеРасшифровки;
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтотОбъект, ИмяЛиста, ИмяЯчейки, Значение, ПризнакРасчета,ЗначениеРасшифровки);	
	
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ЭтотОбъект.КодФормы);
КонецПроцедуры

&НаСервере
// Процедура расчитывает значения определенных граф по строке
// многострочной формы.
//
// Параметры:
//      Инд - номер строки многострочной формы
//      Колонка - имя графы (ячейки), из которой была вызвана процедура расчета
//
Процедура Форма300_10РасчетНаСервере(Инд,Колонка)
	// построчный расчет для формы не определен
КонецПроцедуры // Форма300_10Расчет()

&НаСервере
Функция Форма300_10РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	
	ЗапросПоСтранам = Новый Запрос;
	ЗапросПоСтранам.УстановитьПараметр("РБ", Справочники.СтраныУчастникиТаможенногоСоюза.Беларусь);		
	ЗапросПоСтранам.УстановитьПараметр("Код", "112");
	
	ЗапросПоСтранам.Текст = "ВЫБРАТЬ
	                        |	КлассификаторСтранМира.Ссылка
	                        |ИЗ
	                        |	Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
	                        |ГДЕ КлассификаторСтранМира.УчастникТаможенногоСоюза = &РБ ИЛИ 
	                        |	КлассификаторСтранМира.Код = &Код";
							
	Результат = ЗапросПоСтранам.Выполнить();
	СписокСтран = Новый СписокЗначений;
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл 
			СписокСтран.Добавить(Выборка.Ссылка);
		КонецЦикла;
	Иначе 		
		Возврат Неопределено;
	КонецЕсли;
     	
	Запрос =  Новый Запрос;
	 
	Запрос.УстановитьПараметр("ДатаНачала",		    СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	// Запрос.УстановитьПараметр("ДатаНачалаЗа10Дней",	мДатаНачалаПериодаОтчета - 10*86400); //-10 дней
	Запрос.УстановитьПараметр("ДатаОкончания",   	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);	                 	
	Запрос.УстановитьПараметр("Налогоплательщик",   Налогоплательщик);	
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями и мСписокСтруктурныхЕдиниц.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ОтборПоСтруктурным", Истина);
	Иначе		
		Запрос.УстановитьПараметр("ОтборПоСтруктурным", Ложь);
	КонецЕсли;          
	
	Если СпособФормированияРеестра = "ПоРегиструСчетовФактур" Тогда
		ТекстЗапросаПоДаннымСчетовФактур = ПолучитьТекстЗапросаСчетовФактурВыданныхПоРегистру();
		ПризнакСвязиПоКонтрагенту = Истина;
	Иначе
		ТекстЗапросаПоДаннымСчетовФактур = ПолучитьТекстЗапросаСчетовФактурВыданныхПоДокументам();
		ПризнакСвязиПоКонтрагенту = Ложь;
	КонецЕсли;
    Запрос.УстановитьПараметр("ПризнакСвязиПоКонтрагенту", ПризнакСвязиПоКонтрагенту);	
	
	Запрос.УстановитьПараметр("парамСтрана", СписокСтран);	
	
			                 
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ДвиженияПоНДС.Регистратор КАК Регистратор,
	               |	ВЫБОР Когда &ПризнакСвязиПоКонтрагенту Тогда ДвиженияПоНДС.Контрагент Иначе NULL Конец КАК Контрагент,
	               |	СУММА(ДвиженияПоНДС.СуммаНДСОборот) КАК СуммаНДСОборот,
	               |	ДвиженияПоНДС.ОборотПоРеализацииОборот
	               |ПОМЕСТИТЬ ДвиженияПоНДС
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		КорректировкаНДСОбороты.Регистратор КАК Регистратор,
				   |		КорректировкаНДСОбороты.Контрагент КАК Контрагент,				   
	               |		КорректировкаНДСОбороты.СуммаНДСОборот КАК СуммаНДСОборот,	               
	               |		КорректировкаНДСОбороты.СуммаКорректировкиОборотаОборот КАК СуммаБезНДСОборот,
	               |		КорректировкаНДСОбороты.СуммаКорректировкиОборотаОборот КАК ОборотПоРеализацииОборот
	               |	ИЗ
	               |		РегистрНакопления.КорректировкаНДС.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, Налогоплательщик = &Налогоплательщик) КАК КорректировкаНДСОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		НДСОбороты.Регистратор,
				   |		НДСОбороты.Контрагент КАК Контрагент,				   
	               |		НДСОбороты.СуммаНДСОборот,	               
	               |		НДСОбороты.СуммаБезНДСОборот,
	               |		НДСОбороты.ОборотПоРеализацииОборот
	               |	ИЗ
	               |		РегистрНакопления.НДС.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, Налогоплательщик = &Налогоплательщик И (НЕ ВидНалогаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСОблагаемыйИмпорт))) КАК НДСОбороты) КАК ДвиженияПоНДС
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДвиженияПоНДС.Регистратор,
				   |	ВЫБОР Когда &ПризнакСвязиПоКонтрагенту Тогда ДвиженияПоНДС.Контрагент Иначе NULL Конец ,				   
	               |	ДвиженияПоНДС.ОборотПоРеализацииОборот
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Регистратор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактура,
	               |	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК Ссылка,
	               |	ДвиженияПоНДС.Контрагент КАК Контрагент,
	               |	СУММА(ЕСТЬNULL(ДвиженияПоНДС.СуммаНДСОборот, 0)) КАК СуммаНДСОборот,
	               |	СчетФактураВыданныйДокументыОснования.ДокументОснование.Дата КАК ДатаСовершенияОборота,
	               |	СУММА(ЕСТЬNULL(ДвиженияПоНДС.ОборотПоРеализацииОборот, 0)) КАК СуммаОборот
	               |ПОМЕСТИТЬ ДокументОснованиеВТ
	               |ИЗ
	               |	ДвиженияПоНДС КАК ДвиженияПоНДС
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	               |		ПО ДвиженияПоНДС.Регистратор = СчетФактураВыданныйДокументыОснования.ДокументОснование
	               |ГДЕ
	               |	СчетФактураВыданныйДокументыОснования.Ссылка.СтранаНазначения В (&парамСтрана)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СчетФактураВыданныйДокументыОснования.Ссылка, СчетФактураВыданныйДокументыОснования.ДокументОснование,
				   |	ДвиженияПоНДС.Контрагент,
	               |	СчетФактураВыданныйДокументыОснования.ДокументОснование.Дата
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СчетФактура
	               |; " + ТекстЗапросаПоДаннымСчетовФактур + "
	               |	               
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеСчетовФактур.Номер,
	               |	ДанныеСчетовФактур.Дата,
	               |	ДанныеСчетовФактур.Покупатель КАК Контрагент,
	               |	ДанныеСчетовФактур.Ссылка КАК СФ,
	               |	ДанныеСчетовФактур.Дополнительная,
	               |	ДанныеСчетовФактур.НомерНалоговойРегистрацииВСтранеРезидентства,
	               |	ДанныеСчетовФактур.ДатаОборота КАК ДатаСовершенияОборота,
	               |	ДокументОснованиеВТ.Ссылка КАК ДокументОснованиеСсылка,
	               |	СУММА(ЕстьNull(ДокументОснованиеВТ.СуммаОборот, 0)) КАК СуммаОборот,
				   |	ДанныеСчетовФактур.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности
	               |ИЗ
	               |	ДанныеСчетовФактур КАК ДанныеСчетовФактур 
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДокументОснованиеВТ КАК ДокументОснованиеВТ
	               |		ПО ДанныеСчетовФактур.Ссылка = ДокументОснованиеВТ.СчетФактура	               
				   |		И (НЕ &ПризнакСвязиПоКонтрагенту ИЛИ ДанныеСчетовФактур.УчастникСовместнойДеятельности И ДанныеСчетовФактур.Покупатель = ДокументОснованиеВТ.Контрагент ИЛИ НЕ ДанныеСчетовФактур.УчастникСовместнойДеятельности И ДанныеСчетовФактур.Контрагент = ДокументОснованиеВТ.Контрагент)
	               |ГДЕ
	               |	ДанныеСчетовФактур.Ссылка.Проведен = ИСТИНА";				   
				    	 
	Если ПризнакПокупателя Тогда
		ТекстЗапроса = ТекстЗапроса + "
				   |	И НЕ ДанныеСчетовФактур.НомерНалоговойРегистрацииВСтранеРезидентства  = &ПустаяСтрока";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + " 		   
				   |СГРУППИРОВАТЬ ПО
				   |	ДанныеСчетовФактур.Номер,
				   |	ДанныеСчетовФактур.Дата,
				   |	ДанныеСчетовФактур.Покупатель,
				   |	ДанныеСчетовФактур.Ссылка,
				   |	ДанныеСчетовФактур.Дополнительная,
				   |	ДанныеСчетовФактур.НомерНалоговойРегистрацииВСтранеРезидентства,
				   |	ДокументОснованиеВТ.Ссылка,
				   |	ДанныеСчетовФактур.ДатаОборота,
				   |	ДанныеСчетовФактур.УчастникСовместнойДеятельности"; 
				   
				   
	ТекстЗапроса = ТекстЗапроса + " 		   
	 			   |
	 			   |УПОРЯДОЧИТЬ ПО
	 			   |	ДанныеСчетовФактур.Дата"; 
	 
	Запрос.Текст = ТекстЗапроса;
	 
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() и ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 300.10 за отчетный период отсутствуют...'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;	
	
	ТаблицаРезультата = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ТаблицаРезультата;		 	
КонецФункции

&НаКлиенте
Процедура Форма300_10ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Состояние("Расчет формы 300.10");		
	
	Форма300_10ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры	

&НаСервере
Процедура Форма300_10ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)	
	ТекИмяФормы = "Форма300_10";
	Очистить(ТекИмяФормы, Истина);
	
	ТекущаяСтраница = 1;
	ВсегоСтраниц = 1;
	ВыборкаОтчета = Форма300_10РассчитатьДанныеФормы(Истина);
	Если ВыборкаОтчета = Неопределено Тогда 	
		Возврат
	КонецЕсли;
		

	
	Если ВыборкаОтчета.Количество() <> 0 Тогда
		СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы);		
	                             	
		Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
			НомерСтроки = 2;
			ИмяГруппы 	= ЭлементСтруктуры.Ключ;
			ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
			
			ВыборкаОтчета.Сбросить();
		 
		 	Пока ВыборкаОтчета.Следующий() Цикл
				
				Элемент = ТаблицаСтрокГруппы.Добавить();   			 
				
				Если ИмяГруппы = "ЛистA" Тогда
					//Так должны заполнять по отдельности значения выборки 
					//для каждого листа					
					Элемент.Ф300_10_A   = Формат(НомерСтроки, мФорматНомераСтроки);
					
					Если  СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ВыборкаОтчета.НомерНалоговойРегистрацииВСтранеРезидентства) Тогда
						СтрокаУНП = ВыборкаОтчета.НомерНалоговойРегистрацииВСтранеРезидентства;						
					Иначе
						СтрокаУНП = "";						
						ТекстСообщения = НСтр("ru = 'Форма 300.10. В строке %1 не заполнена графаB ""УНП покупателя"". Значение %2 содержит символы, отличные от цифр.'");		
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки), ВыборкаОтчета.НомерНалоговойРегистрацииВСтранеРезидентства);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ВыборкаОтчета.Контрагент, "НомерНалоговойРегистрацииВСтранеРезидентства");							
					КонецЕсли;
												
					Элемент.Ф300_10_B = СтрокаУНП;
					Элемент.Ф300_10_B_Расшифровка = ВыборкаОтчета.Контрагент;
																 
					
					НомерСФ = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаОтчета.Номер, ВыборкаОтчета.СФ, ПредставлениеНомераДокументов);
					НомерСФ = ИсключитьЗапрещенныеСимволыИзНомераСФ(НомерСФ);		
					          								
					Элемент.Ф300_10_C = НомерСФ;
					Элемент.Ф300_10_D = ВыборкаОтчета.Дата;
					Элемент.Ф300_10_E = ВыборкаОтчета.ДатаСовершенияОборота;
					
					Элемент.Ф300_10_C_Расшифровка = ВыборкаОтчета.СФ;
					Элемент.Ф300_10_D_Расшифровка = ВыборкаОтчета.СФ;
					Элемент.Ф300_10_E_Расшифровка = ВыборкаОтчета.СФ;								
			
				ИначеЕсли ИмяГруппы = "ЛистB" Тогда
					
					Элемент.Ф300_10_A2 = Формат(НомерСтроки, мФорматНомераСтроки);
					
					Если ТипЗнч(ВыборкаОтчета.ДокументОснованиеСсылка) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
   						Элемент.Ф300_10_F = "Р";
					Иначе 
						Элемент.Ф300_10_F = "Э";
					КонецЕсли;
									
					//заполняем структуру
				 	Элемент.Ф300_10_G = Окр(ВыборкаОтчета.СуммаОборот);							 						
				КонецЕсли; 
						                                    		 
			 	НомерСтроки = НомерСтроки + 1;           			 					 	
		 	КонецЦикла; 	 
		КонецЦикла; 	 	
		
		РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекимяФормы, СтруктураФормы); 	 
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);
		РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма,ТекИмяФормы,Перезаполнить);	 		
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура Расшифровка(Команда)
	Попытка
		ИмяЯчейки = ЭтотОбъект.ТекущийЭлемент.ТекущаяОбласть.Имя;
	Исключение
		ПоказатьПредупреждение(,"Активизируйте нужную ячейку отчета для расшифровки.");
		Возврат;
	КонецПопытки;
	
	ЦветРасшифровки = Форма300ПолеТабличногоДокументаСтраница1.Области.s_300_00_001_a.ЦветФона;
	
	Если ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда 
		
		Форма300РасшифровкаСКД(ИмяЯчейки);			
	Иначе	
		ПоказатьПредупреждение(, "Расшифровка данной ячейки не поддерживается.");
	КонецЕсли;	


КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНаКлиенте()
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Форма300ПолучитьСписокКодовСтрокВключаемыхВРасшифровку(ИмяЯчейки)
	
	КодыСтрокРасшифровки = Новый СписокЗначений;
	Если ИмяЯчейки = "300.00.002" Тогда
		КодыСтрокРасшифровки.Добавить("300.00.002");
		
	    КодыСтрокРасшифровки.Добавить("300.01.001");
		КодыСтрокРасшифровки.Добавить("300.01.002");
		КодыСтрокРасшифровки.Добавить("300.01.003");
		КодыСтрокРасшифровки.Добавить("300.01.004");
		
		
		КодыСтрокРасшифровки.Добавить("300.06.001");
		КодыСтрокРасшифровки.Добавить("300.06.002");
		КодыСтрокРасшифровки.Добавить("300.06.003");
		КодыСтрокРасшифровки.Добавить("300.06.004");
		КодыСтрокРасшифровки.Добавить("300.06.005");
		КодыСтрокРасшифровки.Добавить("300.06.006");
		КодыСтрокРасшифровки.Добавить("300.06.007");
		КодыСтрокРасшифровки.Добавить("300.06.008");
	ИначеЕсли ИмяЯчейки = "300.00.003" Тогда
		Для Сч = 1 по 8 Цикл
			КодыСтрокРасшифровки.Добавить("300.06.0"+ Формат(Сч, "ЧЦ=2; ЧН=; ЧВН="));
		КонецЦикла;	     
	ИначеЕсли ИмяЯчейки = "300.00.005" Тогда
		Для Сч = 1 по 5 Цикл
			КодыСтрокРасшифровки.Добавить("300.02.0"+ Формат(Сч, "ЧЦ=2; ЧН=; ЧВН="));
		КонецЦикла;	     	
		Для Сч = 1 по 8 Цикл
			КодыСтрокРасшифровки.Добавить("300.06.0"+ Формат(Сч, "ЧЦ=2; ЧН=; ЧВН="));
		КонецЦикла;	 
		
	ИначеЕсли ИмяЯчейки = "300.00.014" Тогда	
		КодыСтрокРасшифровки.Добавить("300.00.014");
		// НДС за нерезидента
		Для Сч = 1 по 7 Цикл
			КодыСтрокРасшифровки.Добавить("300.05.0"+ Формат(Сч, "ЧЦ=2; ЧН=; ЧВН="));
		КонецЦикла;	 			
	ИначеЕсли ИмяЯчейки = "300.00.016" Тогда 
		
		КодыСтрокРасшифровки.Добавить("300.00.016");
	    КодыСтрокРасшифровки.Добавить("300.00.016.I");
	    КодыСтрокРасшифровки.Добавить("300.00.016.II"); 	
	ИначеЕсли ИмяЯчейки = "300.00.017" Тогда
		Для Сч = 7 по 10 Цикл
			КодыСтрокРасшифровки.Добавить("300.02.0"+ Формат(Сч, "ЧЦ=2; ЧН=; ЧВН="));
		КонецЦикла;	 	
	ИначеЕсли ИмяЯчейки = "300.00.019" Тогда
		КодыСтрокРасшифровки.Добавить("300.03.001");
		КодыСтрокРасшифровки.Добавить("300.03.002");							
	ИначеЕсли ИмяЯчейки = "300.00.022" Тогда
		Для Сч = 12 по 23 Цикл
			КодыСтрокРасшифровки.Добавить("300.06.0"+ Формат(Сч, "ЧЦ=2; ЧН=; ЧВН="));
		КонецЦикла;	 	
	ИначеЕсли ИмяЯчейки = "300.00.026" Тогда
		КодыСтрокРасшифровки.Добавить("300.00.026");		
		КодыСтрокРасшифровки.Добавить("300.04.001");		
	ИначеЕсли ИмяЯчейки = "300.01.001" Тогда 
		
		КодыСтрокРасшифровки.Добавить("300.01.001");
	    КодыСтрокРасшифровки.Добавить("300.01.001.I");
		КодыСтрокРасшифровки.Добавить("300.01.001.II");
		КодыСтрокРасшифровки.Добавить("300.01.001.III");
	ИначеЕсли ИмяЯчейки = "300.01.004" Тогда 
		// итоговая строка
		Для Сч = 1 по 3 Цикл
			КодыСтрокРасшифровки.Добавить("300.01.0"+ Формат(Сч, "ЧЦ=2; ЧН=; ЧВН="));
		КонецЦикла;	 	
		
	ИначеЕсли ИмяЯчейки = "300.02.006" Тогда 
		// итоговая строка
		Для Сч = 1 по 5 Цикл
			КодыСтрокРасшифровки.Добавить("300.02.0"+ Формат(Сч, "ЧЦ=2; ЧН=; ЧВН="));
		КонецЦикла;	 	
		
	ИначеЕсли ИмяЯчейки = "300.02.007" Тогда 
		
		КодыСтрокРасшифровки.Добавить("300.02.007");
	    КодыСтрокРасшифровки.Добавить("300.02.007.I");
		КодыСтрокРасшифровки.Добавить("300.02.007.II");
		КодыСтрокРасшифровки.Добавить("300.02.007.III");
		КодыСтрокРасшифровки.Добавить("300.02.007.IV");
		КодыСтрокРасшифровки.Добавить("300.02.007.V");   
	ИначеЕсли ИмяЯчейки = "300.02.011" Тогда 
		// итоговая строка
		Для Сч = 7 по 10 Цикл
			КодыСтрокРасшифровки.Добавить("300.02.0"+ Формат(Сч, "ЧЦ=2; ЧН=; ЧВН="));
		КонецЦикла;		
	ИначеЕсли ИмяЯчейки = "300.06.009" ИЛИ ИмяЯчейки = "300.06.010" ИЛИ ИмяЯчейки = "300.06.011" Тогда 
		
		Для Сч = 1 по 8 Цикл
			КодыСтрокРасшифровки.Добавить("300.06.0"+ Формат(Сч, "ЧЦ=2; ЧН=; ЧВН="));
		КонецЦикла;	     		
	ИначеЕсли ИмяЯчейки = "300.06.024" Тогда 
		// итоговая строка
		Для Сч = 12 по 23 Цикл
			КодыСтрокРасшифровки.Добавить("300.06.0"+ Формат(Сч, "ЧЦ=2; ЧН=; ЧВН="));
		КонецЦикла;		
	Иначе 	
		КодыСтрокРасшифровки.Добавить(ИмяЯчейки);
	КонецЕсли;
	
	Возврат КодыСтрокРасшифровки;
	
КонецФункции //Форма300ПолучитьСписокКодовСтрокВключаемыхВРасшифровку

&НаСервере
Функция ПолучитьАдресМакетаСКД(знач ИмяРаздела)
	ОбщаяСКД = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("МакетСКДФорма3002014Кв1");
	СхемаКомпоновкиДанных = ОбщаяСКД.ВложенныеСхемыКомпоновкиДанных.Найти(ИмяРаздела).Схема;
	
	Возврат ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор)
КонецФункции

&НаКлиенте
// Процедура выполняет расшифровку строки
//
Процедура Форма300РасшифровкаСКД(ИмяЯчейки)
		
	ИмяЯчейки = СтрЗаменить(ИмяЯчейки, "s_", "");
	ИмяЯчейки = СтрЗаменить(ИмяЯчейки, "_", ".");
	
	// Отсекаем префикс столбца	
	Если ВРЕГ(Прав(ИмяЯчейки, 2)) = ".A" или ВРЕГ(Прав(ИмяЯчейки, 2)) = ".B" Тогда
		ИмяЯчейки = Лев(ИмяЯчейки, СТрДлина(ИмяЯчейки) - 2);
	КонецЕсли;
	
	ЧислоВхождений = СтрЧислоВхождений(ИмяЯчейки, ".");
	
	Если ЧислоВхождений = 4 Тогда 
		ДлинаСтроки 	= СтрДлина(ИмяЯчейки); 
		Попытка
			АрабскоеЧисло 	= Сред(ИмяЯчейки, 12, ДлинаСтроки - 11); 
			АрабскоеЧисло 	= Лев(АрабскоеЧисло,1);
			БукваКодаСтроки = Прав(ИмяЯчейки, 1);
			Число 			= СтроковыеФункцииКлиентСервер.ПреобразоватьЧислоВРимскуюНотацию(АрабскоеЧисло, Ложь);
			ИмяЯчейки 		= ВРег(Лев(ИмяЯчейки, 11) + Число + БукваКодаСтроки); 
		Исключение
			АрабскоеЧисло 	= Сред(ИмяЯчейки, 14, ДлинаСтроки - 13); 
			АрабскоеЧисло 	= Лев(АрабскоеЧисло,1);
			Число 			= СтроковыеФункцииКлиентСервер.ПреобразоватьЧислоВРимскуюНотацию(АрабскоеЧисло, Ложь);
			ИмяЯчейки 		= ВРег(Лев(ИмяЯчейки, 12) + Число); 
		КонецПопытки;
	Иначе 
		Попытка
			ДлинаСтроки = СтрДлина(ИмяЯчейки); 
			АрабскоеЧисло = Сред(ИмяЯчейки, 12, ДлинаСтроки - 11); 
			Число = СтроковыеФункцииКлиентСервер.ПреобразоватьЧислоВРимскуюНотацию(АрабскоеЧисло, Ложь);
			ИмяЯчейки = Лев(ИмяЯчейки, 11) + Число; 
		Исключение
			// имя ячейки без изменений
			ИмяЯчейки = ВРЕГ(ИмяЯчейки);
		КонецПопытки
	КонецЕсли;	
		
		
	ОтображатьПоказательСуммаВДекларации 	= Ложь;
	ОтображатьПоказательСуммаОборота		= Истина;
	ОтображатьПоказательСуммаНДС 			= Истина;
	
	
	// определим раздел формы для расшифровки
	РазделНДС = "НачисленныйНДС";	
	ПредставлениеРазделаНДС = "Начисление НДС";
	
	Попытка
	СокращенныйКод = Число(Сред(ИмяЯчейки, 8,3));
	Если (Найти(ИмяЯчейки, "300.00") > 0 И СокращенныйКод >= 13 И СокращенныйКод <= 26)
		ИЛИ (Найти(ИмяЯчейки, "300.02") > 0 И СокращенныйКод >= 7)
		ИЛИ (Найти(ИмяЯчейки, "300.06") > 0 И СокращенныйКод >= 12)
		ИЛИ (Найти(ИмяЯчейки, "300.04") > 0)Тогда
		
			РазделНДС = "ЗачетныйНДС";
			ПредставлениеРазделаНДС = "Зачет НДС";
			ОтображатьПоказательСуммаВДекларации = Истина;
		КонецЕсли;
	Исключение		
	КонецПопытки;
		
	
	// определим коды строк регистра для включения в расшифровку данной ячейки
	КодыСтрокРасшифровки = Форма300ПолучитьСписокКодовСтрокВключаемыхВРасшифровку(ИмяЯчейки);
		
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", 	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ТипДанных", 		"РегистрыНакопления");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяОбъекта", 	"НДС");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяТаблицы", 	"Обороты");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ПолучитьАдресМакетаСКД(РазделНДС));

	// Отборы
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";	
    БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Налогоплательщик",  Налогоплательщик, ВидСравненияКомпоновкиДанных.Равно);
	
	// Сортировка
	ПользовательскиеСортировки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ПорядокКомпоновкиДанных"));
	ПользовательскиеСортировки.ИдентификаторПользовательскойНастройки = "Порядок";
	
	НовыйЭлементПорядка = ПользовательскиеСортировки.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовыйЭлементПорядка.Использование  = Истина;
	НовыйЭлементПорядка.Поле  = новый ПолеКомпоновкиДанных("Регистратор.Дата");
	
	

	
	// Группировки	
	МассивГруппировок = Новый Массив();
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "КодСтроки", НСтр("ru = 'Код строки'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	Если РазделНДС = "НачисленныйНДС" Тогда	
		МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "ВидОперацииРеализации", НСтр("ru = 'Вид операции реализации'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	Иначе
		МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "ВидОперацииПоступления", НСтр("ru = 'Вид операции поступления'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	КонецЕсли;	
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка",  МассивГруппировок);
	
	// Параметры
	
	МассивПараметровДанных = Новый Массив();   
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодСтрокиРасшифровки", КодыСтрокРасшифровки);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокОрганизаций", мСписокСтруктурныхЕдиниц);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодСтроки", "300.00%");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "НачалоПериода", НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КонецПериода", КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Организация", Налогоплательщик);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Налогоплательщик", Налогоплательщик);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ПустаяОрганизация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	                            		
	// Метод отнесения НДС в зачет.
	// при расшифровке раздельного метода в расшифровку добавляем Вид оборота и Сумму в Декларации (сумма с учетом удельного веса)
	ПризнакРаздельногоМетода = ?(СтруктураРеквизитовФормы.мМетодРасчета = ПредопределенноеЗначение("Перечисление.МетодыОтнесенияНДСВЗачет.Раздельный") и Найти(ИмяЯчейки, "300.04") = 0 и Найти(ИмяЯчейки, "300.00.028") = 0, Истина, Ложь);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "РаздельныйМетод", ПризнакРаздельногоМетода);
	
	
	//ПараметрыВывода.Значение = "Регистр налогового учета к строке "+ИмяЯчейки+" для Декларации по НДС";
	
	УдельныйВес = ?(Не ЗначениеЗаполнено(СтруктураРеквизитовФормы.УдВес),1, СтруктураРеквизитовФормы.УдВес);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "УдельныйВес", УдельныйВес);
	
	// Дополнительные отборы
	Если Найти(ИмяЯчейки, "300.00.003") >0 Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.Ставка",  0, ВидСравненияКомпоновкиДанных.НеРавно);		
		
	ИначеЕсли Найти(ИмяЯчейки, "300.00.002") >0 Тогда
		// Корректировка по 0 ставке
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.Ставка", 0, ВидСравненияКомпоновкиДанных.Равно, Истина);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.ДляОсвобожденногоОборота", Ложь, ВидСравненияКомпоновкиДанных.Равно, Истина);
		ОтображатьПоказательСуммаНДС = Ложь;
		
	ИначеЕсли Найти(ИмяЯчейки, "300.00.004") >0 Тогда
		ОтображатьПоказательСуммаНДС = Ложь;
		
	ИначеЕсли Найти(ИмяЯчейки, "300.00.005") >0 Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.ДляОсвобожденногоОборота", Истина, ВидСравненияКомпоновкиДанных.Равно, Истина);
		ОтображатьПоказательСуммаНДС = Ложь;
		
	ИначеЕсли Найти(ИмяЯчейки, "300.00.015") >0 Тогда	
		ОтображатьПоказательСуммаНДС 			= Ложь;
		ОтображатьПоказательСуммаВДекларации 	= Ложь;
	
	ИначеЕсли Найти(ИмяЯчейки, "300.00.017") >0 Тогда	
		ОтображатьПоказательСуммаНДС 			= Ложь;
		ОтображатьПоказательСуммаВДекларации 	= Ложь;
		
	ИначеЕсли Найти(ИмяЯчейки, "300.00.018") >0 Тогда	
		ОтображатьПоказательСуммаНДС 			= Ложь;
		ОтображатьПоказательСуммаВДекларации 	= Ложь;	
	ИначеЕсли Найти(ИмяЯчейки, "300.00.026") >0 Тогда	
		// НДС методом зачета, к его показателям не применяется удельный вес
		ОтображатьПоказательСуммаВДекларации 	= Ложь;		
	ИначеЕсли	Найти(ИмяЯчейки, "300.01") >0 Тогда
		// 0 ставка НДС
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.ДляОсвобожденногоОборота", Ложь, ВидСравненияКомпоновкиДанных.Равно, Истина);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.Ставка", 0, ВидСравненияКомпоновкиДанных.Равно, Истина);
		ОтображатьПоказательСуммаНДС = Ложь;
	ИначеЕсли Найти(ИмяЯчейки, "300.02") >0 Тогда
		// Без НДС (освобожденные обороты)
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.ДляОсвобожденногоОборота", Истина, ВидСравненияКомпоновкиДанных.Равно, Истина);
		ОтображатьПоказательСуммаНДС = Ложь;
		// освобожденный импорт, к его показателям не применяется удельный вес
		ОтображатьПоказательСуммаВДекларации 	= Ложь;		
	ИначеЕсли Найти(ИмяЯчейки, "300.04") >0 Тогда	
		// НДС методом зачета, к его показателям не применяется удельный вес
		ОтображатьПоказательСуммаВДекларации 	= Ложь;			
	ИначеЕсли ИмяЯчейки =  "300.06.009" Тогда
		// Корректировка по облагаемым оборотам
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.Ставка", 0, ВидСравненияКомпоновкиДанных.НеРавно, Истина);
	ИначеЕсли ИмяЯчейки =  "300.06.010" Тогда
		// Корректировка по 0 ставке
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.Ставка", 0, ВидСравненияКомпоновкиДанных.Равно, Истина);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.ДляОсвобожденногоОборота", Ложь, ВидСравненияКомпоновкиДанных.Равно, Истина);
		ОтображатьПоказательСуммаНДС = Ложь;
	   ИначеЕсли ИмяЯчейки =  "300.06.011" Тогда
		// Корректировка по ставке БезНДС
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.Ставка", 0, ВидСравненияКомпоновкиДанных.Равно, Истина);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СтавкаНДС.ДляОсвобожденногоОборота", Истина, ВидСравненияКомпоновкиДанных.Равно, Истина);		
		ОтображатьПоказательСуммаНДС = Ложь;
	КонецЕсли;

	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПараметрыДанных", МассивПараметровДанных);
	
	ПользовательскиеПоля = ПользовательскиеНастройки.Элементы.Добавить(Тип("ВыбранныеПоляКомпоновкиДанных"));	
	ПользовательскиеПоля.ИдентификаторПользовательскойНастройки = "Выбор";	
	
    Если ОтображатьПоказательСуммаОборота Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаОборота", "Оборот по реализации");
	КонецЕсли;
	Если ОтображатьПоказательСуммаВДекларации Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаВДекларации", "Сумма в декларации");
	КонецЕсли;
	Если ОтображатьПоказательСуммаНДС Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаНДС", "Сумма НДС");
	КонецЕсли;
		
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Контрагент", "Контрагент");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ИИН_БИН", "ИИН/БИН контрагента");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Регистратор", "Документ");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СтавкаНДС", "Ставка НДС");
	
	// Прочие настройки
	ТекстЗаголовка = НСТР("ru = 'Регистр налогового учета к строке %1 для Декларации по НДС'");	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Заголовок", 	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, ИмяЯчейки));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", Истина);	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьПодписи", Истина); 	
	
	ИмяРазделаРасшифровки = "Декларация по НДС:" + СтруктураРеквизитовФормы.мГод + ", " + ПредставлениеРазделаНДС;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ВыводитьЗаголовок", Истина);	
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", ИмяРазделаРасшифровки);
	//ПараметрыФормы.Вставить("ЗаполняемыеНастройки",ЗаполняемыеНастройки );	
    
	ОткрытьФорму("Отчет.УниверсальныйОтчетПоМетаданным.Форма.ФормаОтчета", ПараметрыФормы,, Истина);
КонецПроцедуры





