////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	мВыбраннаяФорма = "Форма9102016Кв1";
	КодФормы 		= "Форма910";
	
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруФормРегОтчета(ЭтотОбъект);	
	//РеквизитФормыВЗначение("СписокФормДерева", Тип("ДеревоЗначений"))
	СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями = РегламентированнаяОтчетностьПереопределяемый.ПоддержкаРаботыСоСтруктурнымиПодразделениями();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов  = Новый СписокЗначений;	
	СтруктураРеквизитовФормы.мПечатныеформы 		 = Новый СписокЗначений;	
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);
	
	ЗаполнитьСведенияОбОтчетномПериоде();
		
	ИнициализироватьВспомогательныеПеременные(ОтчетОбъект, СтруктураРеквизитовФормы);

	ОтчетОбъект.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
	ОтчетОбъект.ТочностьЕдиницыИзмерения = 0;

	ОтчетОбъект.ДатаПодписи	= ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	ОтчетОбъект.Налогоплательщик         = Налогоплательщик;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если Модифицированность Тогда 
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);	
		ТекстВопроса = НСТР("ru = 'Сохранить данные отчета?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_ОтражениеНалоговойОтчетностиВРеглУчете" Тогда
		Элементы.ФормаОтражениеВУчете.Заголовок = ПолучитьЗаголовокОтражениеВУчете(Источник);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(мСписокСтруктурныхЕдиниц, ЭтаФорма, СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда		
		мСписокСтруктурныхЕдиниц = Результат;		
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц); 		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЗаполнитьВидРасчета(ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ДатаПодписиПриИзменении(Элемент)
	
	ПередатьЗначениеВСтруктуруНаСервере("ДатаПодачи", ОтчетОбъект.ДатаПодписи, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Форма910Расшифровка(НомерЯчейки)
	
	Если СтруктураРеквизитовФормы.ЕстьРегистрБУ И НомерЯчейки = 1 Тогда
		ПоказатьРасшифроку910ВВидеОСВ();
	Иначе	
		// вычислим список для отбора
		ОтборПоФизЛицам 			= Неопределено;
		ОтборПоСтране 				= Неопределено;
		ВидСравненияОтбораПоСтране 	= Неопределено;
		ИсключатьНерезидентов 		= Неопределено;
		Если НомерЯчейки = 14 Тогда
			// граждане РК		
			ОтборПоСтране 				= ПредопределенноеЗначение("Справочник.КлассификаторСтранМира.Казахстан");
			ВидСравненияОтбораПоСтране 	= ВидСравненияКомпоновкиДанных.ВСписке;
		ИначеЕсли НомерЯчейки = 15 Тогда
			// иностранцы			
			ОтборПоСтране				= ПредопределенноеЗначение("Справочник.КлассификаторСтранМира.Казахстан");
			ВидСравненияОтбораПоСтране  = ВидСравненияКомпоновкиДанных.НеВСписке;		
		КонецЕсли;
		МесяцДляРасшифровки = Неопределено; // с 2012 форма не содержит разделения по месяцам квартала
		ПоказатьРасшифровку910ВВидеРегистраНУпоИПНиСН(,МесяцДляРасшифровки, ОтборПоФизЛицам, ОтборПоСтране, ВидСравненияОтбораПоСтране, ИсключатьНерезидентов);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "Разделы"

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)	
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.КодФормы = Элемент.ТекущиеДанные.КодФормы Тогда
		Возврат;
	КонецЕсли;
	
	РазделыОтчетаПриАктивизацииСтрокиНаСервере(Элемент.ТекущиеДанные.КодФормы, Элемент.ТекущиеДанные.Многострочность);	
		
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Для Каждого СтраницаФорм из Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы Цикл
		Элементы[СтраницаФорм.Имя].Видимость = СтраницаФорм.Имя = ЭтаФорма.КодФормы;	
	КонецЦикла;   
	
КонецПроцедуры

&НаКлиенте
Процедура Форма910ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Элемент.ТекущаяОбласть.Имя;
	
	Если (Найти(Ячейка, "ДоверительныйУправляющий") > 0)
	 ИЛИ (Найти(Ячейка, "Учредитель") > 0)
	 ИЛИ (Найти(Ячейка, "ВедетБУ") > 0)
	 ИЛИ (Найти(Ячейка, "НеВедетБУ") > 0)	 
	 
	 Тогда  
	 	Если Элемент.ТекущаяОбласть.Значение = "Х" Тогда
			Элемент.ТекущаяОбласть.Значение = "";
		Иначе
			Элемент.ТекущаяОбласть.Значение = "Х";
		КонецЕсли;		
		ПередатьЗначениеВСтруктуруНаСервере(Ячейка, Элемент.ТекущаяОбласть.Значение, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Форма910ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Форма910ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Область);
	
КонецПроцедуры

&НаКлиенте
Процедура Форма910ПолеТабличногоДокументаСтраница2ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Форма910ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Область);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Заполнить(Команда)
	
	Перезаполнить = Истина; // Для выполнения запроса на пересчет данных к пользователю
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения =  РегламентированнаяОтчетностьКлиент.ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Перезаполнить Тогда		
		Если СтрокаФормы.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстВопроса = "Перезаполнить данные формы и ее дополнительных форм?";
		Иначе
			ТекстВопроса = "Перезаполнить данные формы?";
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);
		Оповещение.ДополнительныеПараметры.Вставить("Перезаполнить", Перезаполнить);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);		

	КонецЕсли;		

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	 	
	
	Перезаполнить = ДополнительныеПараметры.Перезаполнить;
	Очистить(КодФормы,Истина);
	
	ЗаполнитьНаСервере();

КонецПроцедуры

&НаСервере
Процедура Очистить(ТекИмяФормы, ОчиститьВсе = Ложь) Экспорт
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	// Список ячеек, очищать которые не нужно
	Если ОчиститьВсе Тогда
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодВалюты");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДеятельностьСобственная");
	Иначе
		СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
		СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Год");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Полугодие");		
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодВалюты");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДеятельностьСобственная");
		СписокПоказателейНеПодлежащихОчистке.Добавить("НомерУведомления");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаУведомления");
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодНалоговогоОргана");
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодНалоговогоОргана1");
	КонецЕсли;
		
	РегламентированнаяОтчетность.ОчиститьСтруктуруДанныхИТабличноеПолеФормы(ЭтаФорма,ТекИмяФормы,ОчиститьВсе,СписокПоказателейНеПодлежащихОчистке);
	
КонецПроцедуры // Очистить()

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВXML(Команда)
	
	ГодФормирования = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	
	Если 2016 < ГодФормирования Тогда 
		ТекстСообщения = НСтр("ru = 'Отчет не предназначен для выгрузки в XML в период формирования " + Формат(ГодФормирования,"ЧГ=0") + " г." + Символы.ПС + 
						"Пожалуйста, обновите комплект отчетов.'");
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);		
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект);	
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохраненияФайла.ПолноеИмяФайла = КодФормы + " " + СтруктураРеквизитовФормы.мГод + "г" + ".xml";
		ДиалогСохраненияФайла.Фильтр = РегламентированнаяОтчетностьКлиентСервер.ФильтрДиалоговВыбораИСохраненияРегламентированногоОтчета();	
		ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
		ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите файл'");		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
		ДиалогСохраненияФайла.Показать(ОписаниеОповещения);
	Иначе   
		НачатьПолучениеФайлаССервера(ВыгрузитьВXMLНаСервере(), КодФормы + ".xml"); 
	КонецЕсли;
	   
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресВременногоХранилища = ВыгрузитьВXMLНаСервере();
		
	ПолноеИмяФайла = Результат[0];
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, АдресВременногоХранилища));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяФайла",ПолноеИмяФайла); 
	Обработчик = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеЗавершение", ЭтотОбъект,ДополнительныеПараметры);
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
	ПараметрыСохранения.Интерактивно = Ложь;
	ФайловаяСистемаКлиент.СохранитьФайлы(Обработчик, ПолучаемыеФайлы, ПараметрыСохранения); 
	
	        
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ТекстЗаголовка = НСтр("ru = 'Данные успешно выгружены в файл'");
	
	СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДополнительныеПараметры.ИмяФайла);
	
	РабочийКаталог = СтруктураФайла.Путь;

	#Если НЕ ВебКлиент Тогда
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка, "file:///" + СтрЗаменить(СокрЛП(РабочийКаталог), "\", "/"),
		РабочийКаталог);
	#Иначе
		Если НЕ ЗначениеЗаполнено(ПолученныеФайлы) Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка,,
		РабочийКаталог);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчете(Команда)
	
	Если НЕ СтруктураРеквизитовФормы.ЕстьВозможностьОтраженияВУчете Тогда
		Возврат;
	КонецЕсли;
	
	СохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(СохраненныйДок) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Регламентированный отчет не записан в информационной базе.'"));
		Возврат;
	КонецЕсли;
	
	ДокументОтраженияВУчете = ПолучитьЗначениеРеквизита(СохраненныйДок, "ДокументОтраженияВУчете");
	
	Если ЗначениеЗаполнено(ДокументОтраженияВУчете) Тогда
		РегламентированнаяОтчетностьКлиент.ОткрытьДокументОтраженияНалОтчетностиВУчете(СохраненныйДок, ДокументОтраженияВУчете, ЭтотОбъект);
	Иначе
		ДополнительныеПараметрыОтражения = СформироватьДополнительныеПараметрыОтраженияДанных(СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП);
		РегламентированнаяОтчетностьКлиент.СоздатьДокументОтраженияНалОтчетностиВУчете(СохраненныйДок, ЭтотОбъект, ДополнительныеПараметрыОтражения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровка(Команда)
	
	НомерЯчейки = 0;	
	Попытка
		ИмяЯчейки = ТекущийЭлемент.ТекущаяОбласть.Имя;
		БукваИмени = Сред(ИмяЯчейки, 1, 2);
		Если БукваИмени = "s_" Тогда 
			НомерЯчейки = Число(Сред(ИмяЯчейки, 11, 2));
						
		КонецЕсли;
	Исключение
		ПоказатьПредупреждение(, НСтр("ru = 'Активизируйте нужную ячейку отчета для расшифровки.'"));
		Возврат;
	КонецПопытки;
	
	Если НомерЯчейки = 0 Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Активизируйте нужную ячейку отчета для расшифровки.'"));
		Возврат;
	КонецЕсли;	
	
	Форма910Расшифровка(НомерЯчейки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюФорму(Команда)
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму");
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФормуИПриложенияКНей(Команда)
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФормуИПриложения");
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыФормы.Вставить("Налогоплательщик",         ОтчетОбъект.Налогоплательщик);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, мВыбраннаяФорма, "") + "ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);	

	
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	ОткрытьФормуНастройкиСтраниц()	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ПриЗакрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьДанныеСервере();
		Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанные() Экспорт
	СохранитьДанныеСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеСервере()
	ДополнительныеПараметрыОтражения = СформироватьДополнительныеПараметрыОтраженияДанных(СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП);
	СтруктураРеквизитовФормы.Вставить("ДополнительныеПараметрыОтражения", ДополнительныеПараметрыОтражения);
	РегламентированнаяОтчетность.СохранитьОтчет(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура РазделыОтчетаПриАктивизацииСтрокиНаСервере(НовыйКодФормы, НовыйПризнакМногострочность)		
	
	//проверим, что стояли не на основной, итоги передаем только когда переходим из доп.форм
	ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	Если ТекФорма <> Неопределено И Не ТекФорма.ПризнакОсновной Тогда
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы, Истина);		
	КонецЕсли;	
			
	// установим новые значения реквизитам формы
	ЭтаФорма.КодФормы = НовыйКодФормы;	
	
	// передаем данные из структуры В ТП
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	
	
	Если  НовыйПризнакМногострочность Тогда
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОчиститьРеглОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Форма = ДополнительныеПараметры.Форма;	
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", Форма.КодФормы));
		Вложенность = ДополнительныеПараметры.ОчищатьПриложения;	
		
		ОчиститьРеглОтчетЗавершениеНаСервере(СтрокаФормы.КодФормы, СтрокаФормы.Многострочность, Вложенность)	
	КонецЕсли;		
КонецПроцедуры 	

&НаСервере
Процедура ОчиститьРеглОтчетЗавершениеНаСервере(КодФормы, ПризнакМногострочности, Вложенность) Экспорт		
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, ПризнакМногострочности, Вложенность);
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокСтруктурныхЕдиниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");			
	СтруктураРеквизитовФормы.Вставить("НалоговыйКомитет");				
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");		
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");		
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");	
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрг");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);	
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");	
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");		
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");	
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);	
	СтруктураРеквизитовФормы.Вставить("мПериодичность", Параметры.мПериодичность);			
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);
	СтруктураРеквизитовФормы.Вставить("мНалогоплательщикЯвляетсяИП");
	СтруктураРеквизитовФормы.Вставить("мНалогоплательщикИндивидуальныйПредприниматель");
	СтруктураРеквизитовФормы.Вставить("мПризнакСистемыСотрудниковЗУП20", Метаданные.РегистрыСведений.РаботникиОрганизаций.Измерения.Найти("ФизЛицо") = Неопределено);
	СтруктураРеквизитовФормы.Вставить("мРазмерМЗП");
	СтруктураРеквизитовФормы.Вставить("мРазмерМЗПДляЦелейНалогообложения");
	СтруктураРеквизитовФормы.Вставить("мСтавкаСО");
	СтруктураРеквизитовФормы.Вставить("мСтавкаОПВ");
	СтруктураРеквизитовФормы.Вставить("мОтчетныйПериодПолугодие");
	СтруктураРеквизитовФормы.Вставить("мКоличествоМесяцев");
	СтруктураРеквизитовФормы.Вставить("РасчетПоВидамДоходовИОблагаемойБазе", Метаданные.РегистрыНакопления.ИПНСведенияОДоходах.Ресурсы.Найти("ОблагаемаяБаза") <> Неопределено);
	СтруктураРеквизитовФормы.Вставить("ВедетсяУчетОППВ", Метаданные.РегистрыНакопления.Найти("ОППВРасчетыСФондами") <> Неопределено);
	СтруктураРеквизитовФормы.Вставить("ЕстьВозможностьОтраженияВУчете", Найти(Метаданные.Имя, "ЗарплатаИУправлениеПерсоналом") = 0 И Найти(Метаданные.Имя, "УправлениеПроизводственнымПредприятием") = 0);
	СтруктураРеквизитовФормы.Вставить("ЕстьРегистрБУ", Метаданные.РегистрыБухгалтерии.Найти("Типовой") <> Неопределено);
	СтруктураРеквизитовФормы.Вставить("мСписокФизЛицаИностранцыНеРезиденты");
	СтруктураРеквизитовФормы.Вставить("мСписокФизЛицаИностранцыРезиденты");
	СтруктураРеквизитовФормы.Вставить("мСписокФизЛицаКазахстанцы");   	
	СтруктураРеквизитовФормы.Вставить("мГод");	
	СтруктураРеквизитовФормы.Вставить("мПолугодие");	
	
	// индивидуальные параметры формы
	СтруктураРеквизитовФормы.Вставить("мПоддержкаРаботыСоСтруктурнымиПодразделениями");		
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			
			СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
			СписокСохранения.Вставить("ДеревоНастройкиСтраниц",	РеквизитФормыВЗначение("мДеревоСтраницОтчета").Скопировать());	
						
			ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
			мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()	
	РегламентированнаяОтчетность.ВосстановитьСохраненныйОтчет(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Перем СтруктураГруппы;  
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ТекстСообщения = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);				
				
		Возврат Ложь;
		
	КонецЕсли;
			
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		 Форма910РасчетНаСервере(Неопределено, Неопределено);
	КонецЕсли; 

	РегламентированнаяОтчетность.СформироватьСписокПечатаемыхЛистов(ЭтаФорма);	       		
		
	Возврат Истина;                                                           
	
КонецФункции

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;	
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
						
		КонецЕсли;
		
		ЗаполнитьДанныеПоОрганизации();

		//ЗаполнитьДатуПодписи(ЭтаФорма);
		
		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();
	
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ЕстьВозможностьОтраженияВУчете Тогда
		Элементы.ФормаОтражениеВУчете.Видимость = Ложь;
	ИначеЕсли СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		ДокументОтражения = ПолучитьЗначениеРеквизита(СтруктураРеквизитовФормы.мСохраненныйДок, "ДокументОтраженияВУчете");
		Элементы.ФормаОтражениеВУчете.Заголовок = ПолучитьЗаголовокОтражениеВУчете(ДокументОтражения);
	КонецЕсли;
	
	// обход проблемы с обработкой реквизитов ПТД в платформе
	МассивРеквизитовФормы = ЭтотОбъект.ПолучитьРеквизиты();			
	Для Счетчик = 0 По МассивРеквизитовФормы.Количество()-1 Цикл		
		РеквизитФормы = МассивРеквизитовФормы[Счетчик];
		Если РеквизитФормы.ТипЗначения.СодержитТип(Тип("ТабличныйДокумент")) Тогда
			ЭтотОбъект[РеквизитФормы.Имя] = ЭтотОбъект[РеквизитФормы.Имя];	
		КонецЕсли;
	КонецЦикла;		
		
	Если СтруктураРеквизитовФормы.Свойство("СформироватьФормуОтчетаАвтоматически") И СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически <> Неопределено Тогда
		
		ЗаполнитьАвтоНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////
// ЛОКАЛЬНЫЕ МЕХАНИЗМЫ ОТЧЕТА

&НаКлиенте
Процедура ОбновитьПараметрыФормыНаКлиенте(Параметры) Экспорт
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	ОбновитьПараметрыФормыНаСервере(Параметры);
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыФормыНаСервере(Параметры) Экспорт
	
	ЗаполнитьСведенияОбОтчетномПериоде();

	ИнициализироватьВспомогательныеПеременные(ОтчетОбъект, СтруктураРеквизитовФормы); 
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);		
	КонецЦикла	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормы(ТекФорма, Параметры)
	
	ЗаполнитьЗначенияСвойств(ТекФорма.СтруктураРеквизитовФормы, Параметры);
	
	ТекФорма.Налогоплательщик        						 = Параметры.Налогоплательщик;	
	ТекФорма.ОтчетОбъект.Налогоплательщик        			 = ТекФорма.Налогоплательщик;	
	ТекФорма.мСписокСтруктурныхЕдиниц						 = Параметры.мСписокСтруктурныхЕдиниц;	
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтчетномПериоде() Экспорт

	СтрПериодОтчета = ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ФП = истина");
	
	СтруктураРеквизитовФормы.мГод     	= Формат(Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), "ЧГ="); // удаляем разделительный пробел, так как 		
	СтруктураРеквизитовФормы.мПолугодие	= ?(Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) < 6, 1, 2); // удаляем разделительный пробел, так как 	
			
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, ЭтотОбъект.КодФормы, Ложь, Ложь);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ЭтотОбъект.КодФормы);
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ЭтотОбъект.КодФормы);	
	
	Форма910РасчетНаСервере(Неопределено, Неопределено);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура Форма910РасчетНаСервере(ИмяЯчейки, Знач ЗначениеЯчейки)
	
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяЯчейки, ЗначениеЯчейки);
		
	КонецЕсли;

	Форма910Расчет(Истина, ИмяЯчейки);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Форма910ЗаполнитьАвто(Истина);
	
КонецПроцедуры

&НаСервере
Функция Форма910РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
	СтруктураРезультата = Новый Структура();
	
	ЗаполнитьСпискиФизЛицПоГражданству();
	
    Запрос =  Новый Запрос;
     
    Запрос.УстановитьПараметр("НачПериода", 			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
    Запрос.УстановитьПараметр("КонПериода", 			СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
    Запрос.УстановитьПараметр("парамНалогоплательщик",	ОтчетОбъект.Налогоплательщик);
    
 	Запрос.УстановитьПараметр("парамГоловнаяОрганизация",		 ОбщегоНазначенияБК.ГоловнаяОрганизация(ОтчетОбъект.Налогоплательщик));
	Запрос.УстановитьПараметр("парамВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("парамУвольнение", 				 Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("парамПоСреднемуЗаработкуДляОтпуска", Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
	
	Если СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП Тогда
		// ссылка на физлицо, которое описывает самого индивидуального предпринимателя
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", ОтчетОбъект.Налогоплательщик.ИндивидуальныйПредприниматель);
	
	Иначе
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Неопределено);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамПриход", 			ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамИсчисление", 		Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежаНалог", 	Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());
	
	//////////////////////////////////////////////////////
    // строка 910.00.001 - Доход за налоговый период
    
    Если Метаданные.РегистрыБухгалтерии.Найти("Типовой") <> Неопределено Тогда
    
	    Запрос.УстановитьПараметр("СчетПрибыльУбытокОтчетногоГода", ПланыСчетов.Типовой.ИтоговаяПрибыльИтоговыйУбыток); // 5610
	    
	    СписокСчетовДоходов = ПолучитьСписокСчетовДоходов();	    
	    
	    Запрос.УстановитьПараметр("СписокСчетовДоходов", СписокСчетовДоходов);
	    
	    МассивВидыСубконто = Новый Массив();
	    МассивВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Доходы);
	    
	    Запрос.УстановитьПараметр("МассивВидыСубконто", МассивВидыСубконто);
    
	    // определим облагаемые доход за период
	    Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) КАК СуммаОборотДт,
		|	ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) КАК СуммаОборотКт
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Обороты(
		|			&НачПериода, 
		|			&КонПериода, 
		|			, 
		|			Счет В ИЕРАРХИИ (&СписокСчетовДоходов), 
		|			&МассивВидыСубконто,
		|			Организация = &парамНалогоплательщик
		|				И ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Доходы).ЯвляетсяОбъектомНалогообложенияПриСпециальныхНалоговыхРежимах, ЛОЖЬ), 
		|			КорСчет <> &СчетПрибыльУбытокОтчетногоГода, ) КАК ТиповойОбороты
		|";	
	  			 	
	    Выборка = Запрос.Выполнить().Выбрать();
	    
	    СтруктураРезультата.Вставить("s_910_00_001", 0);
	    
	    Если Выборка.Следующий() Тогда
	    
	    	СтруктураРезультата.s_910_00_001 = Выборка.СуммаОборотКт - Выборка.СуммаОборотДт;
	    
	    КонецЕсли;    
    
    Иначе

	    СтруктураРезультата.Вставить("s_910_00_001", 0);
    
	КонецЕсли;
		

	МТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МТ;
	
	// определим гражданство по периодам
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Период
	               |ПОМЕСТИТЬ ВТ_ДатыПериодовГода
	               |ИЗ
	               |	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	               |ГДЕ
	               |	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	               |	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &НачПериода И &КонПериода
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГражданствоФизЛицСрезПоследних.Период КАК Период,
	               |	ГражданствоФизЛицСрезПоследних.ФИО КАК ФИО,
	               |	ВЫБОР
	               |		КОГДА ГражданствоФизЛиц.Страна ЕСТЬ NULL 
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	               |		ИНАЧЕ ГражданствоФизЛиц.Страна
	               |	КОНЕЦ КАК Страна
	               |ПОМЕСТИТЬ ВТ_Гражданство
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Периоды.Период КАК Период,
	               |		Периоды.ФИО КАК ФИО,
	               |		МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСреза
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			Периоды.Период КАК Период,
	               |			ФизическиеЛица.Ссылка КАК ФИО
	               |		ИЗ
	               |			ВТ_ДатыПериодовГода КАК Периоды
	               |				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |				ПО (ИСТИНА)
	               |		ГДЕ
	               |			ФизическиеЛица.ЭтоГруппа = ЛОЖЬ) КАК Периоды
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	               |			ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(ГражданствоФизЛиц.Период, МЕСЯЦ))
	               |				И Периоды.ФИО = ГражданствоФизЛиц.ФизЛицо
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		Периоды.Период,
	               |		Периоды.ФИО) КАК ГражданствоФизЛицСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	               |		ПО ГражданствоФизЛицСрезПоследних.ПериодСреза = ГражданствоФизЛиц.Период
	               |			И ГражданствоФизЛицСрезПоследних.ФИО = ГражданствоФизЛиц.ФизЛицо
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Периоды.Период,
	               |	Контрагенты.Ссылка,
	               |	ВЫБОР
	               |		КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	               |		ИНАЧЕ Контрагенты.СтранаРезидентства
	               |	КОНЕЦ
	               |ИЗ
	               |	ВТ_ДатыПериодовГода КАК Периоды
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО (ИСТИНА)
	               |ГДЕ
	               |	Контрагенты.ЭтоГруппа = ЛОЖЬ
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Период,
	               |	ФИО";
				   
	Запрос.Выполнить();

    //////////////////////////////////////////////////////
    // строка 910.00.003  - Количество работников (для ИП - включая самого ИП)

	// Сформируем текст запроса с датами месяцев периода
	// первый месяц квартала
	НачалоМесяца = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ПериодыТекст = "ВЫБРАТЬ 
					|	ДАТАВРЕМЯ(" + Формат (НачалоМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК НачалоМесяца,
					|	ДАТАВРЕМЯ(" + Формат (КонецМесяца(НачалоМесяца),"ДФ=гггг,М,д,Ч,м,с") + ") КАК КонецМесяца
					|";
	// прибавим остальные месяцы
	Пока НачалоМесяца <= НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Цикл
		НачалоМесяца = КонецМесяца(НачалоМесяца) + 1;
    	ПериодыТекст = ПериодыТекст + "
    								  |ОБЪЕДИНИТЬ ВСЕ 
    								  |
    								  |ВЫБРАТЬ 
    								  |	   ДАТАВРЕМЯ(" + Формат(НачалоМесяца,"ДФ=гггг,М,д,Ч,м,с") + "),
    								  |	   ДАТАВРЕМЯ(" + Формат(КонецМесяца(НачалоМесяца),"ДФ=гггг,М,д,Ч,м,с") + ")
    								  |";
	КонецЦикла;	

	// Получим даты приема и увольнения для работников организации за период
	РаботникиОрганизацииТекст = "
	|ВЫБРАТЬ
	|	РаботникиОрганизации." +?(СтруктураРеквизитовФормы.мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ФизЛицо КАК ФизЛицо,
	|	РаботникиОрганизации.ОбособленноеПодразделение,
	|	&НачПериода КАК Период,
	|	РаботникиОрганизации.ПричинаИзмененияСостояния
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&НачПериода, 
	|				Организация = &парамГоловнаяОрганизация
	|				И " +?(СтруктураРеквизитовФормы.мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ФизЛицо <> &парамИндивидуальныйПредприниматель
	|				И " +?(СтруктураРеквизитовФормы.мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ВидЗанятости <> &парамВнутреннееСовместительство) КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУвольнение
	|	И РаботникиОрганизации.ОбособленноеПодразделение = &парамНалогоплательщик
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизации." +?(СтруктураРеквизитовФормы.мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ФизЛицо КАК ФизЛицо,
	|	РаботникиОрганизации.ОбособленноеПодразделение,
	|	РаботникиОрганизации.Период, 
	|	РаботникиОрганизации.ПричинаИзмененияСостояния
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Период > &НачПериода
	|	И РаботникиОрганизации.Период <= &КонПериода
	|	И РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
	|	И (РаботникиОрганизации." +?(СтруктураРеквизитовФормы.мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ВидЗанятости <> &парамВнутреннееСовместительство)
	|	И РаботникиОрганизации." +?(СтруктураРеквизитовФормы.мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ФизЛицо <> &парамИндивидуальныйПредприниматель
	|";

	Запрос.Текст = РаботникиОрганизацииТекст;

	// Получим периоды назначений работников
	ПериодыНазначенийТекст = "
	|ВЫБРАТЬ
	|	ТекущееНазначение.ФизЛицо,
	|	ТекущееНазначение.Период КАК ДатаНачала,
	|	МИНИМУМ(ВЫБОР 
	|				КОГДА СледующееНазначение.Период ЕСТЬ NULL ТОГДА &КонПериода 
	|				ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(СледующееНазначение.Период, ДЕНЬ, -1), ДЕНЬ)
	|			КОНЕЦ) КАК ДатаОкончания
	|ИЗ
	|	(" + РаботникиОрганизацииТекст + ") КАК ТекущееНазначение
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + РаботникиОрганизацииТекст + ") КАК СледующееНазначение
	|		ПО ТекущееНазначение.ФизЛицо = СледующееНазначение.ФизЛицо
	|		   И ТекущееНазначение.Период < СледующееНазначение.Период
	|ГДЕ
	|	ТекущееНазначение.ПричинаИзмененияСостояния <> &парамУвольнение	
	|	И ТекущееНазначение.ОбособленноеПодразделение = &парамНалогоплательщик
	|СГРУППИРОВАТЬ ПО
	|	ТекущееНазначение.ФизЛицо,
	|	ТекущееНазначение.Период	
	|";

	Запрос.Текст = ПериодыНазначенийТекст;

	// Разобьем данные о назначениях на помесячные записи и подсчитаем число дней за каждый период
	ПериодыНазначенийТекст = "
	|ВЫБРАТЬ
	|	ПериодыНазначений.ФизЛицо,
	|	ДЕНЬ(ВЫБОР // ДатаОкончания
	|			КОГДА ПериодыНазначений.ДатаОкончания < Периоды.КонецМесяца ТОГДА ПериодыНазначений.ДатаОкончания
	|			ИНАЧЕ Периоды.КонецМесяца 
	|		КОНЕЦ) - 
    |	ДЕНЬ(ВЫБОР // ДатаНачала
	|			КОГДА ПериодыНазначений.ДатаНачала > Периоды.НачалоМесяца ТОГДА ПериодыНазначений.ДатаНачала
	|			ИНАЧЕ Периоды.НачалоМесяца
	|		КОНЕЦ) + 1 КАК ДнейРаботыВМесяце,
	|	Периоды.НачалоМесяца,
	|	Периоды.КонецМесяца
	|ИЗ
	|	(" + ПериодыНазначенийТекст + ") КАК ПериодыНазначений
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ПериодыТекст + ") КАК Периоды
	|		ПО ПериодыНазначений.ДатаНачала <= Периоды.КонецМесяца 
	|		   И ПериодыНазначений.ДатаОкончания >= Периоды.НачалоМесяца 
	|";
	
	Запрос.Текст = ПериодыНазначенийТекст;
	
	// Определим среднесписочную за каждый месяц
	ЧисленностьТекст = "
	|ВЫБРАТЬ
	|	ПериодыНазначений.НачалоМесяца,
	|	ВЫРАЗИТЬ(СУММА(ПериодыНазначений.ДнейРаботыВМесяце) / ДЕНЬ(ПериодыНазначений.КонецМесяца) КАК ЧИСЛО(10, 0)) КАК Среднесписочная
	|ИЗ
	|	(" + ПериодыНазначенийТекст + ") КАК ПериодыНазначений
	|СГРУППИРОВАТЬ ПО
	|	ПериодыНазначений.НачалоМесяца, 
	|	ПериодыНазначений.КонецМесяца 
	|";

	Запрос.Текст = ЧисленностьТекст;
	Выборка = Запрос.Выполнить().Выбрать();     
	
	СтруктураРезультата.Вставить("СреднесписочнаяЧисленность_1", 0);
	СтруктураРезультата.Вставить("СреднесписочнаяЧисленность_2", 0);
	СтруктураРезультата.Вставить("СреднесписочнаяЧисленность_3", 0);
	СтруктураРезультата.Вставить("СреднесписочнаяЧисленность_4", 0);
	СтруктураРезультата.Вставить("СреднесписочнаяЧисленность_5", 0);
	СтруктураРезультата.Вставить("СреднесписочнаяЧисленность_6", 0);
	
	СтруктураРеквизитовФормы.мКоличествоМесяцев = 0;	
	СреднесписочнаяЧисленность = 0;
	
	Пока Выборка.Следующий() Цикл
	    КоличествоРаботников = Выборка.Среднесписочная;		
		Если КоличествоРаботников <> 0 Тогда // вдруг начали работать с середины квартала
			СреднесписочнаяЧисленность = СреднесписочнаяЧисленность + КоличествоРаботников;			
			СтруктураРеквизитовФормы.мКоличествоМесяцев = СтруктураРеквизитовФормы.мКоличествоМесяцев + 1;		
		КонецЕсли;			
		
		// Сохраняем данные в структуре за каждый месяц для последующего расчета среднемесячной з/п
		Если Выборка.НачалоМесяца = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
			СтруктураРезультата.СреднесписочнаяЧисленность_1 = Выборка.Среднесписочная;
		ИначеЕсли Выборка.НачалоМесяца = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, 1) Тогда
			СтруктураРезультата.СреднесписочнаяЧисленность_2 = Выборка.Среднесписочная;
		ИначеЕсли Выборка.НачалоМесяца = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, 2) Тогда
			СтруктураРезультата.СреднесписочнаяЧисленность_3 = Выборка.Среднесписочная;
		ИначеЕсли Выборка.НачалоМесяца = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, 3) Тогда
			СтруктураРезультата.СреднесписочнаяЧисленность_4 = Выборка.Среднесписочная;
		ИначеЕсли Выборка.НачалоМесяца = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, 4) Тогда
			СтруктураРезультата.СреднесписочнаяЧисленность_5 = Выборка.Среднесписочная;		
		Иначе
			СтруктураРезультата.СреднесписочнаяЧисленность_6 = Выборка.Среднесписочная;
		КонецЕсли;
	КонецЦикла;
               			
	// Если это ИП, то наемных работников может не быть. В этом
	// случае количество месяцев можно определить по дате регистрации	
	Если СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП Тогда			
		// В некоторых отраслевых конфигурациях, например ЗУП,  этих данных может не быть
		Если Метаданные.Справочники.Организации.Реквизиты.Найти("ДатаРегистрации") = Неопределено Тогда
			СтруктураРеквизитовФормы.мКоличествоМесяцев = 6
		Иначе
			Если ОтчетОбъект.Налогоплательщик.ДатаРегистрации < ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,1) Тогда
				СтруктураРеквизитовФормы.мКоличествоМесяцев = 6;
			ИначеЕсли ОтчетОбъект.Налогоплательщик.ДатаРегистрации < ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,2) Тогда
				СтруктураРеквизитовФормы.мКоличествоМесяцев = 5;	
			ИначеЕсли ОтчетОбъект.Налогоплательщик.ДатаРегистрации < ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,3) Тогда
				СтруктураРеквизитовФормы.мКоличествоМесяцев = 4;
			ИначеЕсли ОтчетОбъект.Налогоплательщик.ДатаРегистрации < ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,4) Тогда
				СтруктураРеквизитовФормы.мКоличествоМесяцев = 3;
			ИначеЕсли ОтчетОбъект.Налогоплательщик.ДатаРегистрации < ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,5) Тогда
				СтруктураРеквизитовФормы.мКоличествоМесяцев = 2;
			ИначеЕсли ОтчетОбъект.Налогоплательщик.ДатаРегистрации < ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,6) Тогда
				СтруктураРеквизитовФормы.мКоличествоМесяцев = 1;	
			Иначе		
				СтруктураРеквизитовФормы.мКоличествоМесяцев = 0;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;	
	
	СреднесписочнаяЧисленность = ?(СтруктураРеквизитовФормы.мКоличествоМесяцев <> 0, Окр(СреднесписочнаяЧисленность / СтруктураРеквизитовФормы.мКоличествоМесяцев), 0); 	
	
	Если СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП Тогда
		//////////////////////////////////////////////////////////////////////
		// Среднесписочная численность, включая самого ИП
		СреднесписочнаяЧисленность= ?(СтруктураРеквизитовФормы.мКоличествоМесяцев <> 0, СреднесписочнаяЧисленность + 1, 0);		
	КонецЕсли;
	
	СтруктураРезультата.Вставить("s_910_00_003", СреднесписочнаяЧисленность);
	

    ////////////////////////////////////////////////////////////////////////////////////////////////
    // для расчета строки 910.00.004 - среднемесячная заработная плата на одного наемного работника
    
    РасчетНаРегистрах = Метаданные.РегистрыРасчета.Найти("ОсновныеНачисленияРаботниковОрганизаций") <> Неопределено;
    
    // узнаем фонд заработной платы наемных работников (без самого индивидуального предпринимателя,
    // если организация - ИП)
    
	Если РасчетНаРегистрах Тогда

		ФондЗаработнойПлатыТекст = "
		|ВЫБРАТЬ
		|	ОсновныеНачисления.ФизЛицо КАК ФизЛицо,
		|	ВЫБОР
		|		КОГДА ОсновныеНачисления.ВидРасчета.СпособРасчета = &парамПоСреднемуЗаработкуДляОтпуска 
		|				И ОсновныеНачисления.ПериодДействия >= ОсновныеНачисления.ПериодРегистрации
		|			ТОГДА НАЧАЛОПЕРИОДА(ОсновныеНачисления.ПериодДействия, МЕСЯЦ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ОсновныеНачисления.ПериодРегистрации, МЕСЯЦ)
		|	КОНЕЦ КАК НачалоМесяца,
		|	ОсновныеНачисления.Результат КАК Результат
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|ГДЕ
		|	ОсновныеНачисления.Организация = &парамГоловнаяОрганизация И
		|	ОсновныеНачисления.ПодразделениеОрганизации.Владелец = &парамНалогоплательщик И
		|	((ОсновныеНачисления.ПериодРегистрации МЕЖДУ &НачПериода И &КонПериода И
		|	  (ОсновныеНачисления.ВидРасчета.СпособРасчета <> &парамПоСреднемуЗаработкуДляОтпуска ИЛИ
		|	   ОсновныеНачисления.ПериодДействия < ОсновныеНачисления.ПериодРегистрации)) ИЛИ 
		|	 (ОсновныеНачисления.ПериодДействия МЕЖДУ &НачПериода И &КонПериода И
		|	  ОсновныеНачисления.ВидРасчета.СпособРасчета = &парамПоСреднемуЗаработкуДляОтпуска И
		|	  ОсновныеНачисления.ПериодДействия >= ОсновныеНачисления.ПериодРегистрации)) И
		|	ЕСТЬNULL(ОсновныеНачисления.ВидРасчета.ФондВыплат.ФондЗаработнойПлаты, ЛОЖЬ) И
		|	ОсновныеНачисления.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДополнительныеНачисления.ФизЛицо КАК ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ) КАК НачалоМесяца,
		|	ДополнительныеНачисления.Результат КАК Результат
		|ИЗ
		|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисления
		|ГДЕ
		|	ДополнительныеНачисления.Организация = &парамГоловнаяОрганизация И
		|	ДополнительныеНачисления.ПодразделениеОрганизации.Владелец = &парамНалогоплательщик И
		|	ДополнительныеНачисления.ПериодРегистрации МЕЖДУ &НачПериода И &КонПериода И
		|	ЕСТЬNULL(ДополнительныеНачисления.ВидРасчета.ФондВыплат.ФондЗаработнойПлаты, ЛОЖЬ) И
		|	ДополнительныеНачисления.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// прочие доходы, зарегистрированные в целях налогообложения
		|ВЫБРАТЬ
		|	СНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) КАК НачалоМесяца,
		|	СНСведенияОДоходах.СуммаДохода КАК Результат
		|ИЗ
		|	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
		|ГДЕ
		|	СНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик И
		|	СНСведенияОДоходах.ПериодРегистрации МЕЖДУ &НачПериода И &КонПериода И
		|	ЕСТЬNULL(СНСведенияОДоходах.ВидРасчета.ФондВыплат.ФондЗаработнойПлаты, ЛОЖЬ) И
		|	СНСведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения И
		|	СНСведенияОДоходах.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|";
		
	Иначе
	
		ФондЗаработнойПлатыТекст = "
		|ВЫБРАТЬ
		|	ОсновныеНачисления.ФизЛицо КАК ФизЛицо,
		|	ВЫБОР
		|		КОГДА ОсновныеНачисления.ВидРасчета.СпособРасчета = &парамПоСреднемуЗаработкуДляОтпуска 
		|				И НАЧАЛОПЕРИОДА(ОсновныеНачисления.ДатаНачала, МЕСЯЦ) >= НАЧАЛОПЕРИОДА(ОсновныеНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)
		|			ТОГДА НАЧАЛОПЕРИОДА(ОсновныеНачисления.ДатаНачала, МЕСЯЦ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ОсновныеНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)
		|	КОНЕЦ КАК НачалоМесяца,
		|	ОсновныеНачисления.Результат КАК Результат
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК ОсновныеНачисления
		|ГДЕ
		|	ОсновныеНачисления.Ссылка.Проведен И
		|	ОсновныеНачисления.Ссылка.Организация = &парамНалогоплательщик И
		|	((ОсновныеНачисления.Ссылка.ПериодРегистрации МЕЖДУ &НачПериода И &КонПериода И
		|	  (ОсновныеНачисления.ВидРасчета.СпособРасчета <> &парамПоСреднемуЗаработкуДляОтпуска ИЛИ
		|	   НАЧАЛОПЕРИОДА(ОсновныеНачисления.ДатаНачала, МЕСЯЦ) < ОсновныеНачисления.Ссылка.ПериодРегистрации)) ИЛИ 
		|	 (НАЧАЛОПЕРИОДА(ОсновныеНачисления.ДатаНачала, МЕСЯЦ) МЕЖДУ &НачПериода И &КонПериода И
		|	  ОсновныеНачисления.ВидРасчета.СпособРасчета = &парамПоСреднемуЗаработкуДляОтпуска И
		|	  НАЧАЛОПЕРИОДА(ОсновныеНачисления.ДатаНачала, МЕСЯЦ) >= ОсновныеНачисления.Ссылка.ПериодРегистрации)) И
		|	ЕСТЬNULL(ОсновныеНачисления.ВидРасчета.ФондВыплат.ФондЗаработнойПлаты, ЛОЖЬ) И
		|	ОсновныеНачисления.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// прочие доходы, зарегистрированные в целях налогообложения
		|ВЫБРАТЬ
		|	СНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) КАК НачалоМесяца,
		|	СНСведенияОДоходах.СуммаДохода КАК Результат
		|ИЗ
		|	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
		|ГДЕ
		|	СНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик И
		|	СНСведенияОДоходах.ПериодРегистрации МЕЖДУ &НачПериода И &КонПериода И
		|	ЕСТЬNULL(СНСведенияОДоходах.ВидРасчета.ФондВыплат.ФондЗаработнойПлаты, ЛОЖЬ) И
		|	СНСведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения И
		|	СНСведенияОДоходах.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|";
		
	КонецЕсли;

	// Сложим ФЗП по-месячно
	ФондЗаработнойПлатыТекст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФЗП.НачалоМесяца,
	|	СУММА(ФЗП.Результат) КАК Результат
	|ИЗ
	|	(" + ФондЗаработнойПлатыТекст + ") КАК ФЗП
	|
	|СГРУППИРОВАТЬ ПО
	|	ФЗП.НачалоМесяца
	|УПОРЯДОЧИТЬ ПО
	|	ФЗП.НачалоМесяца
	|";

	Запрос.Текст = ФондЗаработнойПлатыТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураРеквизитовФормы.мКоличествоМесяцев = 0;
	СуммаЗарплаты = 0;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Расчет среднемесячной з/п'"));
	
	Пока Выборка.Следующий() Цикл
	    
		СтруктураРеквизитовФормы.мКоличествоМесяцев = СтруктураРеквизитовФормы.мКоличествоМесяцев + 1;
		
		Если Выборка.НачалоМесяца = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
			
			Если (СтруктураРезультата.СреднесписочнаяЧисленность_1 ) <> 0 И Выборка.Результат <> NULL Тогда // были наемные работники в месяце
				СуммаЗарплаты = СуммаЗарплаты + Окр(Выборка.Результат / (СтруктураРезультата.СреднесписочнаяЧисленность_1));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='1 месяц. ФЗП: %1 Среднесписочная численность: %2 человек. Среднемесячная з/п: %3'"), 
																	СокрЛП(Выборка.Результат), СтруктураРезультата.СреднесписочнаяЧисленность_1, Окр(Выборка.Результат / (СтруктураРезультата.СреднесписочнаяЧисленность_1))));
			КонецЕсли;
		
		ИначеЕсли Выборка.НачалоМесяца = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, 1) Тогда
		
			Если (СтруктураРезультата.СреднесписочнаяЧисленность_2) <> 0 И Выборка.Результат <> NULL Тогда // были наемные работники в месяце
				СуммаЗарплаты = СуммаЗарплаты + Окр(Выборка.Результат / (СтруктураРезультата.СреднесписочнаяЧисленность_2));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='2 месяц. ФЗП: %1 Среднесписочная численность: %2 человек. Среднемесячная з/п: %3'"), 
																	СокрЛП(Выборка.Результат), СтруктураРезультата.СреднесписочнаяЧисленность_2, Окр(Выборка.Результат / (СтруктураРезультата.СреднесписочнаяЧисленность_2))));
			КонецЕсли;
		ИначеЕсли Выборка.НачалоМесяца = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, 2) Тогда
		
			Если (СтруктураРезультата.СреднесписочнаяЧисленность_3) <> 0 И Выборка.Результат <> NULL Тогда // были наемные работники в месяце
				СуммаЗарплаты = СуммаЗарплаты + Окр(Выборка.Результат / (СтруктураРезультата.СреднесписочнаяЧисленность_3));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='3 месяц. ФЗП: %1 Среднесписочная численность: %2 человек. Среднемесячная з/п: %3'"), 
																	СокрЛП(Выборка.Результат), СтруктураРезультата.СреднесписочнаяЧисленность_3, Окр(Выборка.Результат / (СтруктураРезультата.СреднесписочнаяЧисленность_3))));
			КонецЕсли;	
		ИначеЕсли Выборка.НачалоМесяца = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, 3) Тогда
		
			Если (СтруктураРезультата.СреднесписочнаяЧисленность_4) <> 0 И Выборка.Результат <> NULL Тогда // были наемные работники в месяце
				СуммаЗарплаты = СуммаЗарплаты + Окр(Выборка.Результат / (СтруктураРезультата.СреднесписочнаяЧисленность_4));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='4 месяц. ФЗП: %1 Среднесписочная численность: %2 человек. Среднемесячная з/п: %3'"), 
																	СокрЛП(Выборка.Результат), СтруктураРезультата.СреднесписочнаяЧисленность_4, Окр(Выборка.Результат / (СтруктураРезультата.СреднесписочнаяЧисленность_4))));
			КонецЕсли;	
		ИначеЕсли Выборка.НачалоМесяца = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, 4) Тогда
		
			Если (СтруктураРезультата.СреднесписочнаяЧисленность_5) <> 0 И Выборка.Результат <> NULL Тогда // были наемные работники в месяце
				СуммаЗарплаты = СуммаЗарплаты + Окр(Выборка.Результат / (СтруктураРезультата.СреднесписочнаяЧисленность_5));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='5 месяц. ФЗП: %1 Среднесписочная численность: %2 человек. Среднемесячная з/п: %3'"), 
																	СокрЛП(Выборка.Результат), СтруктураРезультата.СреднесписочнаяЧисленность_5, Окр(Выборка.Результат / (СтруктураРезультата.СреднесписочнаяЧисленность_5))));
			КонецЕсли;	
			
		Иначе

			Если (СтруктураРезультата.СреднесписочнаяЧисленность_6) <> 0 И Выборка.Результат <> NULL Тогда // были наемные работники в месяце
				СуммаЗарплаты = СуммаЗарплаты + Окр(Выборка.Результат / (СтруктураРезультата.СреднесписочнаяЧисленность_6));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='6 месяц. ФЗП: %1 Среднесписочная численность: %2 человек. Среднемесячная з/п: %3'"), 
																	СокрЛП(Выборка.Результат), СтруктураРезультата.СреднесписочнаяЧисленность_6, Окр(Выборка.Результат / (СтруктураРезультата.СреднесписочнаяЧисленность_6))));
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	// Среднемесячная з/п одного работника
	СреднемесячнаяЗП = 0;
	Если СтруктураРеквизитовФормы.мКоличествоМесяцев <> 0 Тогда
		СреднемесячнаяЗП = Окр(СуммаЗарплаты / СтруктураРеквизитовФормы.мКоличествоМесяцев);
		СтруктураРезультата.Вставить("s_910_00_004", СреднемесячнаяЗП);
	Иначе
		СтруктураРезультата.Вставить("s_910_00_004", 0);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сумма среднемесячной з/п за отчетный период: %1 Количество месяцев в отчетном периоде: %2. Среднемесячная з/п за период: %3'"), 
														СокрЛП(СуммаЗарплаты), СокрЛП(СтруктураРеквизитовФормы.мКоличествоМесяцев), СокрЛП(СреднемесячнаяЗП)));
	
	ЗаполнитьСпискиФизЛицПоГражданству();
	
	//Запрос = Новый Запрос;
	Признак_ИПЮрЛицо = Ложь;
	// если налогоплательщик - ИП, то исключим данные самого индивидуального предпринимателя
	Если ОтчетОбъект.Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", ОтчетОбъект.Налогоплательщик.ИндивидуальныйПредприниматель);
	Иначе
		Признак_ИПЮрЛицо = Истина;
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Неопределено);
	КонецЕсли;

	Запрос.УстановитьПараметр("парамНачГода", 				НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парам1Мес", 					НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парам2Мес", 					ДобавитьМесяц(НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), 1));
	Запрос.УстановитьПараметр("парам3Мес", 					ДобавитьМесяц(НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), 2));
	Запрос.УстановитьПараметр("парамПериодПо", 				КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПослеПериодПо", 		КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) + 1);
	Запрос.УстановитьПараметр("парамНалогоплательщик",	 	ОтчетОбъект.Налогоплательщик);
	
	Запрос.УстановитьПараметр("парамФизЛицаКазахстанцы", 			СтруктураРеквизитовФормы.мСписокФизЛицаКазахстанцы);	
	Запрос.УстановитьПараметр("парамФизЛицаИностранцыНеРезиденты", 	СтруктураРеквизитовФормы.мСписокФизЛицаИностранцыНеРезиденты);
	Запрос.УстановитьПараметр("парамФизЛицаИностранцыРезиденты",	СтруктураРеквизитовФормы.мСписокФизЛицаИностранцыРезиденты);
	
	// Получим данные учетной политики
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации,
	|	УчетнаяПолитикаНУ.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ,
	|	УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН,
	|	УчетнаяПолитикаНУ.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя,
	|	УчетнаяПолитикаНУ.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодПо, Организация = &парамНалогоплательщик) КАК УчетнаяПолитикаНУ
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОтражениеПоПериодуРегистрации 				= Выборка.ОтражениеПоПериодуРегистрации;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Выборка.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ;
		ОрганизацияЯвляетсяПлательщикомСН			= Выборка.ОрганизацияЯвляетсяПлательщикомСН;
		КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = Выборка.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя;
		КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника = Выборка.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника;
	Иначе
		ОтражениеПоПериодуРегистрации 				= Ложь;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Ложь;
		ОрганизацияЯвляетсяПлательщикомСН			= Ложь;
		КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = 0;
		КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника = 0;
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////
	// Сумма индивидуального подоходного налога, подлежащего перечислению в бюджет	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	               |	ИПНРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	               |	СУММА(ИПНРасчетыСБюджетом.Налог) КАК СуммаИПНПодлежащегоПеречислению
	               |ПОМЕСТИТЬ ВТ_ИПНРасчетыСБюджетомУдержание
	               |ИЗ
	               |	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	               |ГДЕ
	               |	ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик
	               |	И ИПНРасчетыСБюджетом.Период МЕЖДУ &НачПериода И &парамПериодПо
	               |	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |	И ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	               |	И ИПНРасчетыСБюджетом.ФизЛицо <> &парамИндивидуальныйПредприниматель
				   |	И (ВЫБОР
				   |		КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
				   |			ТОГДА НЕ ИПНРасчетыСБюджетом.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
				   |		ИНАЧЕ ИСТИНА
				   |	  КОНЕЦ)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ),
	               |	ИПНРасчетыСБюджетом.ФизЛицо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИПНРасчетыСБюджетом.МесяцНалоговогоПериода,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	               |				ТОГДА ИПНРасчетыСБюджетом.СуммаИПНПодлежащегоПеречислению
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СуммаИПНПодлежащегоПеречислениюГражданРК,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) <> ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	               |				ТОГДА ИПНРасчетыСБюджетом.СуммаИПНПодлежащегоПеречислению
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СуммаИПНПодлежащегоПеречислениюИностранцевРК
	               |ИЗ
	               |	ВТ_ИПНРасчетыСБюджетомУдержание КАК ИПНРасчетыСБюджетом
	               |	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ГражданствоФизЛиц                                         
				   |			ПО (НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) = ГражданствоФизЛиц.Период)               				   
				   |			И (ВЫБОР
    			   |				КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
				   |						И ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
				   |					ТОГДА ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо = ГражданствоФизЛиц.ФИО
				   |				ИНАЧЕ ИПНРасчетыСБюджетом.ФизЛицо = ГражданствоФизЛиц.ФИО
				   |			КОНЕЦ)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ИПНРасчетыСБюджетом.МесяцНалоговогоПериода";
	
	Выборка = Запрос.Выполнить().Выбрать();
	СуммаИПНПодлежащегоПеречислениюГражданРК = 0;
	СуммаИПНПодлежащегоПеречислениюИностранцевРК = 0;
	Пока Выборка.Следующий() Цикл
	    СуммаИПНПодлежащегоПеречислениюГражданРК 		= СуммаИПНПодлежащегоПеречислениюГражданРК + Выборка.СуммаИПНПодлежащегоПеречислениюГражданРК;
		СуммаИПНПодлежащегоПеречислениюИностранцевРК 	= СуммаИПНПодлежащегоПеречислениюИностранцевРК + Выборка.СуммаИПНПодлежащегоПеречислениюИностранцевРК;    

	КонецЦикла;
	// сумма ИПН, подлежащая перечислению в бюджет		
	// По гражданам РК
	СтруктураРезультата.Вставить("s_910_00_014", СуммаИПНПодлежащегоПеречислениюГражданРК);		
	// По иностранцам
	СтруктураРезультата.Вставить("s_910_00_015", СуммаИПНПодлежащегоПеречислениюИностранцевРК);
		
	/////////////////////////////////////////////////////////////////////////////////////	
	// Исчисленные пенсионные взносы

	Если РасчетПоВидамДоходовИОблагаемойБазе Тогда
		Запрос.Текст =  "ВЫБРАТЬ
					    |	НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
					    |	СУММА(ВЫБОР
					    |			КОГДА ОПВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
					    |				ТОГДА ОПВСведенияОДоходах.ОблагаемаяБазаОборот
					    |			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
					    |		КОНЕЦ) КАК ОблагаемаяБазаОПВ
					    |ИЗ
					    |	РегистрНакопления.ОПВСведенияОДоходах.Обороты(
					    |			&НачПериода,
					    |			&парамПериодПо,
					    |			МЕСЯЦ,
					    |			Налогоплательщик = &парамНалогоплательщик					    
					    |				И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ОПВСведенияОДоходах
					    |
					    |СГРУППИРОВАТЬ ПО
					    |	НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ)";   
		
		Выборка = Запрос.Выполнить().Выбрать();
		ОблагаемаяБазаОПВ = 0;
		Пока Выборка.Следующий() Цикл	
			ОблагаемаяБазаОПВ = ОблагаемаяБазаОПВ + Выборка.ОблагаемаяБазаОПВ;		
		КонецЦикла;
		СтруктураРезультата.Вставить("s_910_00_016", ОблагаемаяБазаОПВ);

	Иначе
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныеОПВ
		|ИЗ
		|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
		|ГДЕ
		|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И ОПВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &НачПериода И &парамПериодПо
		|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)	
		|	И ОПВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		ИсчисленныеОПВ = 0;
		Пока Выборка.Следующий() Цикл
		
		  	// для расчета строки 910.01.016 начисленные доходы, с которых удерживаются (начисляются) ОПВ
			ИсчисленныеОПВ = ИсчисленныеОПВ + Выборка.ИсчисленныеОПВ;		
		КонецЦикла;
		СтруктураРезультата.Вставить("s_910_00_016", ИсчисленныеОПВ);
	КонецЕсли;
       

	/////////////////////////////////////////////////////////
	// Раздел. Исчисление обязательных пенсионных взносов
	
	// Сумма ОПВ, подлежащих перечислению	
	Запрос.Текст = "
	|// ОПВ, подлежащие перечислению
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(ОПВПодлежитПеречислениюВФонды.Взнос) КАК СуммаОПВПодлежащихПеречислению	
	|ИЗ                         
	|	РегистрНакопления.ОПВПодлежитПеречислениюВФонды КАК ОПВПодлежитПеречислениюВФонды
	|ГДЕ
	|	ОПВПодлежитПеречислениюВФонды.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВПодлежитПеречислениюВФонды.Период МЕЖДУ &НачПериода И &парамПериодПо
	|	И ОПВПодлежитПеречислениюВФонды.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|	И ОПВПодлежитПеречислениюВФонды.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	СуммаОПВПодлежащихПеречислению = 0;
	Пока Выборка.Следующий() Цикл
		
		СуммаОПВПодлежащихПеречислению = СуммаОПВПодлежащихПеречислению + Выборка.СуммаОПВПодлежащихПеречислению;
	    			
	КонецЦикла;
	
	// сумма ОПВ, подлежащих перечислению
	СтруктураРезультата.Вставить("s_910_00_017", СуммаОПВПодлежащихПеречислению);
	
	/////////////////////////////////////////////////////////
	// Раздел. Исчисление обязательных профессиональных пенсионных взносов

	Если СтруктураРеквизитовФормы.ВедетсяУчетОППВ Тогда
		// Доходы, облагаемые ОППВ
		Запрос.Текст = "ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ОППВСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ВЫБОР
		|			КОГДА ОППВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА ОППВСведенияОДоходах.ОблагаемаяБазаОборот
		|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		|		КОНЕЦ) КАК ОблагаемаяБазаОППВ
		|ИЗ
		|	РегистрНакопления.ОППВСведенияОДоходах.Обороты(
		|			&НачПериода,
		|			&парамПериодПо,
		|			МЕСЯЦ,
		|			Налогоплательщик = &парамНалогоплательщик			
		|				И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ОППВСведенияОДоходах			
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ОППВСведенияОДоходах.Период, МЕСЯЦ)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		ОблагаемаяБазаОППВ = 0;
		Пока Выборка.Следующий() Цикл	
			ОблагаемаяБазаОППВ = ОблагаемаяБазаОППВ + Выборка.ОблагаемаяБазаОППВ;		
		КонецЦикла;
		СтруктураРезультата.Вставить("s_910_00_018", ОблагаемаяБазаОППВ);			
		
		// Сумма ОППВ к уплате	
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОППВРасчетыСФондами.СтруктурнаяЕдиница,
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ОППВРасчетыСФондами.Взнос) КАК ОППВ
		|ИЗ
		|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами		                                     
		|ГДЕ
		|	ОППВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик		
		|	И ОППВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &НачПериода И &парамПериодПо
		|	И ОППВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОППВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ОППВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ОППВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель	
		|
		|СГРУППИРОВАТЬ ПО
		|	ОППВРасчетыСФондами.СтруктурнаяЕдиница,
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		СуммаОППВПодлежащихПеречислению = 0;
		Пока Выборка.Следующий() Цикл	
			СуммаОППВПодлежащихПеречислению = СуммаОППВПодлежащихПеречислению + Выборка.ОППВ;		
		КонецЦикла;
		СтруктураРезультата.Вставить("s_910_00_019", СуммаОППВПодлежащихПеречислению);			
	КонецЕсли;

	/////////////////////////////////////////////////////////
	// Раздел. Исчисление социальных отчислений
	
	Если РасчетПоВидамДоходовИОблагаемойБазе Тогда	
		Запрос.Текст =  "ВЫБРАТЬ
					    |	НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
					    |	СУММА(ВЫБОР
					    |			КОГДА СОСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
					    |				ТОГДА СОСведенияОДоходах.ОблагаемаяБазаОборот
					    |			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
					    |		КОНЕЦ) КАК ОблагаемаяБазаСО
						|ИЗ
					    |	РегистрНакопления.СОСведенияОДоходах.Обороты(
					    |			&НачПериода,
					    |			&парамПериодПо,
					    |			МЕСЯЦ,
					    |			Налогоплательщик = &парамНалогоплательщик
					    |				И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК СОСведенияОДоходах
					    |
					    |СГРУППИРОВАТЬ ПО
						|	НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ)"; 

		Выборка = Запрос.Выполнить().Выбрать();
		ОблагаемаяБазаСО = 0;
		Пока Выборка.Следующий() Цикл		
			ОблагаемаяБазаСО = ОблагаемаяБазаСО + Выборка.ОблагаемаяБазаСО;	       	
		КонецЦикла;
		СтруктураРезультата.Вставить("s_910_00_020", ОблагаемаяБазаСО);
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(СОРасчетыСФондами.Отчисление) КАК СоциальныеОтчисления	
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|ГДЕ
	|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &НачПериода И &парамПериодПо
	|	И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И СОРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель	
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	СоциальныеОтчисления = 0;
	
	Пока Выборка.Следующий() Цикл		
		СоциальныеОтчисления = СоциальныеОтчисления + Выборка.СоциальныеОтчисления;			
	КонецЦикла;
	
	Если НЕ РасчетПоВидамДоходовИОблагаемойБазе Тогда
		// для расчета потом доходов физлиц, с которых исчисляются социальные отчисления
		СтруктураРезультата.Вставить("s_910_00_020", СоциальныеОтчисления);
	КонецЕсли;
	
	СтруктураРезультата.Вставить("s_910_00_021", СоциальныеОтчисления);
		
	// теперь расчетные строки
	
	Если НЕ РасчетПоВидамДоходовИОблагаемойБазе Тогда
		// начисленные доходы, с которых удерживаются (начисляются) ОПВ - рассчитываем обратным ходом от фактически исчисленных ОПВ
		ПроцентОПВ = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(ОтчетОбъект.Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ДоходыОблагаемыеОПВ	= ИсчисленныеОПВ* 100 / ПроцентОПВ;
		

		// доходы физических лиц, с которых исчисляются СО - рассчитываем обратным ходом от фактически исчисленных СО
		ПроцентСО = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(ОтчетОбъект.Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ДоходыОблагаемыеСО = СоциальныеОтчисления* 100 / ПроцентСО;
		
		СтруктураРезультата.Вставить("s_910_00_016", ДоходыОблагаемыеОПВ);
		СтруктураРезультата.Вставить("s_910_00_020", ДоходыОблагаемыеСО);
	КонецЕсли;
	
	Если СтруктураРезультата.Количество() = 0 И ВыдаватьСообщения Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данные для заполнения формы 910.00 за отчетный период отсутствуют...'"));

	КонецЕсли;   	
	    
    Возврат СтруктураРезультата;		 

	
КонецФункции // Форма910РассчитатьДанныеФормы()

&НаСервере
Процедура Форма910ЗаполнитьАвто(Перезаполнить = Ложь) 
	
	КодФормы = "Форма910";
	
	//#Если Клиент Тогда
	//	Состояние("Заполнение формы 910.00 ");
	//#КонецЕсли

	//Если Не РегламентированнаяОтчетность.ПересчитыватьДанныеФормы(ЭтаФорма,КодФормы,Перезаполнить) Тогда
	//	Возврат;
	//КонецЕсли;

	//Если Перезаполнить Тогда	
	//	Сообщить("Расчет основной формы 910.00 " + Символы.ПС, СтатусСообщения.Информация);
	//КонецЕсли;	
	//
	//#Если Клиент Тогда
	//	Состояние("Расчет основной формы 910.00 ");    
	//#КонецЕсли
		
	//////////////////////////////////////////
	// Раздел. Расчетные показатели        	

	СтруктураРезультата = Форма910РассчитатьДанныеФормы();
	
	// переносим в структуру формы значения рассчитанных ячеек
	Для Каждого КлючИЗначение Из СтруктураРезультата Цикл
		Если Найти(КлючИЗначение.Ключ, "s_") > 0 Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, КлючИЗначение.Ключ, КлючИЗначение.Значение, Ложь);
		КонецЕсли;	
	Конеццикла;
	
	Форма910Расчет();

	Модифицированность = Истина;
	
КонецПроцедуры // Форма910ЗаполнитьАвто()

&НаСервере
Процедура Форма910Расчет(Изменено = Ложь, ИмяОбласти = Неопределено)

	// Расчет вычисляемых ячеек   	
	КодФормы = "Форма910";
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, КодФормы);			

	s_910_00_001 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_001");	
	
	//////////////////////////////////////////////////////////////////////
	// 910.00.005 - Сумма налога
	s_910_00_005 = Окр(s_910_00_001 * 0.03);

	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_005", s_910_00_005);
	
	//////////////////////////////////////////////////////////////////////
	// 910.00.006 - Корректировка налога в соответствии со статьей 433
	
	// 1. Сумма налогов с дохода, превышающего предельную сумму дохода
	
	s_910_00_001 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_001");	
	
	//////////////////////////////////////////////////////////////////////
	// 2. Превышение предельной среднесписочной численности, человек
    s_910_00_003 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_003");	
    
	//////////////////////////////////////////////////////////////////////
	// 910.00.006 - Уменьшение юридическим лицом суммы налога в зависимости от среднесписочной численности работников
	// Статья 436:
	// 2. Сумма налогов, исчисленная за налоговый период согласно пункту 1 настоящей статьи, подлежит корректировке в сторону уменьшения на сумму в размере 1,5 процента от суммы налога за
	// каждого работника, исходя из среднесписочной численности работников, если среднемесячная  заработная плата работников по итогам отчетного периода составила у индивидуальных
	// предпринимателей не менее 2-кратного, юридических лиц - не менее 2,5-кратного минимального размера заработной платы.
	// 4. В случае, указанном в пункте 3 настоящей статьи, корректировке, предусмотренной пунктом
	// 2 настоящей статьи, подлежит только сумма налога, исчисленного с суммы дохода, установленного статьей 433 настоящего Кодекса.
	//	5. При превышении за налоговый период предельной среднесписочной численности,
	//	установленной статьей 433 настоящего Кодекса, корректировка, предусмотренная пунктом 2 настоящей статьи, производится только на предельную среднесписочную численность.
		
	s_910_00_004 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_004");	
	s_910_00_006 = 0;
	Если (СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП и s_910_00_004 >= 2 * СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения)
		 ИЛИ (НЕ СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП И s_910_00_004 >= 2.5 * СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения) Тогда
		// статья 436
		// для ИП корректировка осуществляется, если средняя заработная плата на одного наемного работника не менее 2-х МЗП
		// для ЮЛ - не менее 2,5 МЗП		
		s_910_00_006 =  s_910_00_005 * s_910_00_003 * 0.015;
	КонецЕсли;

	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_006", s_910_00_006);

	
	//////////////////////////////////////////////////////////////////////
	// 910.00.007 - Сумма налогов после корректировки
	
	s_910_00_007 = Макс(s_910_00_005 - s_910_00_006, 0);

	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_007", s_910_00_007);

	
	//////////////////////////////////////////////////////////////////////
	// 910.00.008 - Сумма индивидуального (корпоративного) подоходного налога, подлежащая уплате в бюджет
	// 910.00.007*0,5

	s_910_00_008 = Окр(s_910_00_007 * 0.5);

	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_008", s_910_00_008);

	//////////////////////////////////////////////////////////////////////
	// 910.00.011 - Сумма социальных отчислений за индивидуального предпринимателя
	
	s_910_00_011 = 0;
	
	Если СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП Тогда
		// Размер дохода для исчисления СО за ИП перерасчитываем только в случае если пользователь изменил размер дохода за период
		// или в случае если выполняется общий расчет формы
		Если ИмяОбласти = "s_910_00_001" Или ИмяОбласти = Неопределено Тогда
			s_910_00_001 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_001"); // доход для исчисления СО за ИП в 2014 году равен фактическому доходу
			
			
			// верхний и нижний предел для дохода ИП
			s_910_00_010 = Макс(s_910_00_001, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения*?(НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мКоличествоМесяцев), 6, СтруктураРеквизитовФормы.мКоличествоМесяцев));
			s_910_00_010 = Мин(s_910_00_010, 10*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения*?(НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мКоличествоМесяцев), 6, СтруктураРеквизитовФормы.мКоличествоМесяцев));
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010", s_910_00_010);
			
		КонецЕсли;
		
		s_910_00_010 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_010");
		Если s_910_00_010 > 0 Тогда
			// СО уплачиваются с дохода не более 10 МЗП за один месяц
			s_910_00_011 = Окр(Мин(s_910_00_010, 10 * СтруктураРеквизитовФормы.мРазмерМЗП * ?(НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мКоличествоМесяцев), 6, СтруктураРеквизитовФормы.мКоличествоМесяцев)) * СтруктураРеквизитовФормы.мСтавкаСО / 100);
			// СО не должны превышать сумму исчисленного СН
			s_910_00_009 = s_910_00_007 * 0.5; // сумма исчисленного социального налога
			Если НЕ ИсчислятьСОБезОграниченияНаСуммуИсчисленногоСН Тогда // со 2 полугодия 2015 года ограничение не применяется
				s_910_00_011 = Мин(s_910_00_011, s_910_00_009);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_011", s_910_00_011);
		
	//////////////////////////////////////////////////////////////////////
	// 910.00.009 - Сумма социального налога, подлежащая уплате в бюджет (за вычетом социальных отчислений)
	
	s_910_00_021 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_021"); // сумма социальных отчислений за наемных работников
	
	s_910_00_009 = Макс(s_910_00_007 * 0.5 - s_910_00_011 - s_910_00_021, 0);

	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_009", s_910_00_009);
	
	//////////////////////////////////////////////////////////////////////
	// 910.00.013 - Сумма ОПВ за индивидуального предпринимателя

	s_910_00_013 = 0;

	Если СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП Тогда
		s_910_00_012 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_012"); // доход для исчисления ОПВ за ИП
		
		// ОПВ берутся с дохода не более 75 МЗП за один месяц и не менее МЗП за один месяц
		s_910_00_012 = Макс(s_910_00_012, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения*?(НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мКоличествоМесяцев), 6, СтруктураРеквизитовФормы.мКоличествоМесяцев));
		s_910_00_012 = Мин(s_910_00_012, 75*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения*?(НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мКоличествоМесяцев), 6, СтруктураРеквизитовФормы.мКоличествоМесяцев));
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012", s_910_00_012);
		
		Если s_910_00_012 > 0 Тогда
			// ОПВ берутся с дохода не более 75 МЗП за один месяц
			s_910_00_013 = Окр(s_910_00_012 * СтруктураРеквизитовФормы.мСтавкаОПВ / 100);
		КонецЕсли;
	КонецЕсли;

	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_013", s_910_00_013);
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, КодФормы, ТаблицаДанных);

	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, ЭтотОбъект.КодФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиФизЛицПоГражданству()
	
	Запрос  = Новый Запрос;
	Запрос.УстановитьПараметр("парамПериодПо", КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
	// если налогоплательщик - ИП, то исключим данные самого индивидуального предпринимателя
	Если ОтчетОбъект.Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", ОтчетОбъект.Налогоплательщик.ИндивидуальныйПредприниматель);
	Иначе
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Неопределено);
	КонецЕсли;
	
	// выберем иностранцев нерезидентов
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГражданствоФизЛиц.ФизЛицо КАК ФизЛицо
	               |ПОМЕСТИТЬ ВТ_Физлица
	               |ИЗ
	               |	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамПериодПо, ) КАК ГражданствоФизЛиц
	               |ГДЕ
	               |	ГражданствоФизЛиц.Страна <> ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	               |	И ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК
	               |	И ГражданствоФизЛиц.ФизЛицо <> &парамИндивидуальныйПредприниматель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Физлица.ФизЛицо
	               |ИЗ
	               |	ВТ_Физлица КАК ВТ_Физлица
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Контрагенты.Ссылка
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.ФизЛицо В
	               |			(ВЫБРАТЬ
	               |				ВТ_Физлица.ФизЛицо
	               |			ИЗ
	               |				ВТ_Физлица)";
	СтруктураРеквизитовФормы.мСписокФизЛицаИностранцыНеРезиденты = 	Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо");
	
	
	// выберем иностранцев резидентов
	Запрос.Текст = "
		           |	ВЫБРАТЬ
		           |	ГражданствоФизЛиц.ФизЛицо КАК ФизЛицо
	               |ПОМЕСТИТЬ ВТ_Физлица
	               |ИЗ
	               |	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамПериодПо, ) КАК ГражданствоФизЛиц
	               |ГДЕ	               
	               |	ГражданствоФизЛиц.Страна <> ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	               |	И НЕ ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК
	               |	И ФизЛицо <> &парамИндивидуальныйПредприниматель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Физлица.ФизЛицо
	               |ИЗ
	               |	ВТ_Физлица КАК ВТ_Физлица
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Контрагенты.Ссылка
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.ФизЛицо В
	               |			(ВЫБРАТЬ
	               |				ВТ_Физлица.ФизЛицо
	               |			ИЗ
	               |				ВТ_Физлица)";
		
	СтруктураРеквизитовФормы.мСписокФизЛицаИностранцыРезиденты = 	Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо");
	
	// выберем иностранцев резидентов
	Запрос.Текст = 				  "ВЫБРАТЬ
	               				  |	СправочникФизическиеЛица.Ссылка КАК ФизЛицо
	               				  |ПОМЕСТИТЬ ВТ_ФизЛица
	               				  |ИЗ
	               				  |	Справочник.ФизическиеЛица КАК СправочникФизическиеЛица
	               				  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамПериодПо, ) КАК ГражданствоФизЛиц
	               				  |		ПО СправочникФизическиеЛица.Ссылка = ГражданствоФизЛиц.ФизЛицо
	               				  |ГДЕ
	               				  |	ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	               				  |	И СправочникФизическиеЛица.Ссылка <> &парамИндивидуальныйПредприниматель
	               				  |;
	               				  |
	               				  |////////////////////////////////////////////////////////////////////////////////
	               				  |ВЫБРАТЬ
	               				  |	ВТ_Физлица.ФизЛицо
	               				  |ИЗ
	               				  |	ВТ_ФизЛица КАК ВТ_Физлица
	               				  |
	               				  |ОБЪЕДИНИТЬ ВСЕ
	               				  |
	               				  |ВЫБРАТЬ
	               				  |	Контрагенты.Ссылка
	               				  |ИЗ
	               				  |	Справочник.Контрагенты КАК Контрагенты
	               				  |ГДЕ
	               				  |	Контрагенты.ФизЛицо В
	               				  |			(ВЫБРАТЬ
	               				  |				ВТ_Физлица.ФизЛицо
	               				  |			ИЗ
	               				  |				ВТ_Физлица)";
	СтруктураРеквизитовФормы.мСписокФизЛицаКазахстанцы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо");
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокСчетовДоходов()
	
	СписокСчетовДоходов = Новый СписокЗначений();
	СписокСчетовДоходов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг_")); // 6000
	СписокСчетовДоходов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ДоходыОтФинансирования")); 					// 6100
	СписокСчетовДоходов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ПрочиеДоходы_")); 							// 6200
	СписокСчетовДоходов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ДоходыСвязанныеСПрекращаемойДеятельностью_")); // 6300
	СписокСчетовДоходов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ДоляПрибылиОрганизацийУчитываемыхПоМетодуДолевогоУчастия")); // 6400
	
	Возврат СписокСчетовДоходов;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьВспомогательныеПеременные(ОтчетОбъект, СтруктураРеквизитовФормы) Экспорт

	СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП = (ОтчетОбъект.Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);
	СтруктураРеквизитовФормы.мНалогоплательщикИндивидуальныйПредприниматель = ОтчетОбъект.Налогоплательщик.ИндивидуальныйПредприниматель;
	
	// размер минимальной заработной платы
	Запрос = Новый Запрос;
	Если СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета >= Дата(2010,1,1) Тогда
		// с 2010 года в статье 436 указано, что для расчетов используется показатель по состоянию на начало года
		Запрос.УстановитьПараметр("ДатаАктуальности", НачалоГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));		
	Иначе	
		// до 2010 года уточнения в кодексе не было, поэтому берем показатель на конец отчетного периода
		Запрос.УстановитьПараметр("ДатаАктуальности", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегламентированныеРасчетныеПоказатели.РазмерМЗП,
	               |	РегламентированныеРасчетныеПоказатели.РазмерМЗПДляЦелейНалогообложения
	               |ИЗ
	               |	РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&ДатаАктуальности, ) КАК РегламентированныеРасчетныеПоказатели";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураРеквизитовФормы.мРазмерМЗП = Выборка.РазмерМЗП;
		СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения = Выборка.РазмерМЗПДляЦелейНалогообложения;
	Иначе
		СтруктураРеквизитовФормы.мРазмерМЗП = 0;
		СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения = 0;
	КонецЕсли;

	// ставки взносов, отчислений
	СтруктураРеквизитовФормы.мСтавкаОПВ = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(ОтчетОбъект.Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	СтруктураРеквизитовФормы.мСтавкаСО = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(ОтчетОбъект.Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	

КонецПроцедуры // ИнициализироватьВспомогательныеПеременные()

&НаСервере
Процедура ЗаполнитьВидРасчета(ВидРасчета)
	
	//сначала очищаем поля, если были проставлены уже отметки
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Первоначальный","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Очередной","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Дополнительный","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"ПоУведомлению","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Ликвидационный","");
	
	Если ВидРасчета = "Первоначальный" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Первоначальный","Х");
	ИначеЕсли ВидРасчета = "Очередной" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Очередной","Х");		
	ИначеЕсли ВидРасчета = "Дополнительный" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Дополнительный","Х");		
	ИначеЕсли ВидРасчета = "ПоУведомлению" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"ПоУведомлению","Х");		
	ИначеЕсли ВидРасчета = "Ликвидационный" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Ликвидационный","Х");		
	КонецЕсли;
	
	Если ВидРасчета = "ПоУведомлению" Тогда
		Форма910ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Ложь;
		Форма910ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита = Ложь;
	Иначе
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"НомерУведомления","");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"ДатаУведомления","");
		Форма910ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Истина;
		Форма910ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита = Истина;
	КонецЕсли;
	
	Модифированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметры(ТекИмяФормы) Экспорт
	
	СписокФормБезИерархии = РеквизитФормыВЗначение("мСписокФормБезИерархии", Тип("ДеревоЗначений"));
	
	Форма = СписокФормБезИерархии.Строки.Найти(КодФормы,"КодФормы");
	
	Если Форма.Многострочность = 1 Тогда // заполнение структуры шапки(подвала) для многострочных форм
		
		Если Не ((ОтчетОбъект.Налогоплательщик  = Неопределено) Или (ОтчетОбъект.Налогоплательщик = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации"))) Тогда			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "ИИН_БИН", ОтчетОбъект.Налогоплательщик.ИдентификационныйНомер, Ложь);
		КонецЕсли;                                                  
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "Полугодие", Истина, Ложь);
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "Год", СтруктураРеквизитовФормы.мГод, Ложь);
							
	Иначе //обычная форма
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"Год",СтруктураРеквизитовФормы.мГод);		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"Полугодие", СтруктураРеквизитовФормы.мПолугодие);		
		Если Не ((ОтчетОбъект.Налогоплательщик  = Неопределено) Или (ОтчетОбъект.Налогоплательщик = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации"))) Тогда			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "ИИН_БИН", ОтчетОбъект.Налогоплательщик.ИдентификационныйНомер);
		КонецЕсли;
				
	КонецЕсли;
	
	Если ТекИмяФормы = Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7) Тогда 
		
		//устанавливаем значения по умолчанию
		СписокРасчетов = Элементы.СписокРасчетов.СписокВыбора[1];
		ЗаполнитьВидРасчета("Очередной");
		
		//заполним основные сведения об организации
		ЗаполнитьСведенияОрганизации();
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "КодВалюты", "KZT");
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПараметры()

&НаСервере
Процедура ЗаполнитьСведенияОрганизации()
	
	ОргСведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(ОтчетОбъект.Налогоплательщик, ОтчетОбъект.ДатаПодписи);
	//Если организация не указана то не выводим никаких сведений
	Если ОргСведения = 0 Тогда
		Возврат;
	КонецЕсли;

	// Инициализируем переменные
	РННЮЛ = ""; // РНН
		
	ИИН_БИН = ""; // ИИН_БИН

	НаимЮЛПол = ""; // Полное наименование 
	
	ФИОРук = ""; // ФИО руководителя
				
	КодНалоговогоОргана = ""; // Код налогового органа
	
	ПризнакРезидентства = Истина; // Признак резидентства
	
	// Добавим сведения о кодах налоговых органов
	НКСведения = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ОтчетОбъект.НалоговыйКомитет, ОтчетОбъект.ДатаПодписи);
	
	ОргСведения.Вставить("КодНалоговогоОргана", СокрЛП(Лев(НКСведения.РНН, 4)));
	
	ПризнакРезидентства = ?(Лев(ОтчетОбъект.Налогоплательщик.КБЕ,1) = "2", Ложь, Истина);
	ОргСведения.Вставить("ПризнакРезидентства", ПризнакРезидентства);
	

	// Получаем данные
	ОргСведения.Свойство("РНН",    			    РННЮЛ);
	ОргСведения.Свойство("БИН_ИИН",  		    ИИН_БИН);
	ОргСведения.Свойство("ПолноеНаименование",  НаимЮЛПол);
	ОргСведения.Свойство("Руководитель",    	ФИОРук);
	ОргСведения.Свойство("КодНалоговогоОргана", КодНалоговогоОргана);
	ОргСведения.Свойство("ПризнакРезидентства", ПризнакРезидентства);
	                  
	// Производим операции связанные с текущей формой отчетности	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы,"ИИН_БИН",ИИН_БИН);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"ОргНазв",НаимЮЛПол);
	
	Если ПризнакРезидентства Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Резидент","X");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Нерезидент","");
	Иначе
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Резидент","");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Нерезидент","X");
	КонецЕсли;
	
	// Разбиваем название организации
	НазваниеОрганизацииДляРазбиения = НаимЮЛПол;
	НачПозиция = 1;
	Для Шаг = 1 По 3 Цикл
		ДлинаСтроки = ЭтаФорма[КодФормы + "ПолеТабличногоДокументаСтраница1"].Области["ОргНазв"+Шаг].ТипЗначения.КвалификаторыСтроки.Длина;
		НазОрганизации = Сред(НазваниеОрганизацииДляРазбиения, НачПозиция, ДлинаСтроки); 
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"ОргНазв"+Шаг,НазОрганизации);
		НачПозиция =НачПозиция + ДлинаСтроки;
	КонецЦикла;

	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Руководитель",ФИОРук);
	
	// Дата подачи декларации
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"ДатаПодачи", ОтчетОбъект.ДатаПодписи);
	
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

&НаСервере
Процедура ЗаполнитьДанныеПоОрганизации()
	
	СписокФормБезИерархии = РеквизитФормыВЗначение("мСписокФормБезИерархии", Тип("ДеревоЗначений"));
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		// Заполняем поле 11 "Представленные приложения"
		Для Каждого Форма Из СписокФормДерева.Строки[0].Строки Цикл            
			ИмяОбласти = "Приложение" + Прав(Форма.КодФормы,2);
			Если Форма910ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяОбласти) <> Неопределено Тогда
				Строка = СписокФормБезИерархии.Строки.Найти(Форма.КодФормы, "КодФормы");
				Если Строка.Выгружать = 1 Тогда
					РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7),ИмяОбласти,"Х",Ложь);				
				Иначе
					РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7),ИмяОбласти,"",Ложь);				
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;

		ВосстановитьСохраненныеДанные();
	Иначе	
		ЗаполнитьПараметры(КодФормы); 			
	КонецЕсли;   
	
КонецПроцедуры

&НаСервере
Процедура ПередатьЗначениеВСтруктуруНаСервере(Ячейка, ТекущаяОбластьЗначение, ПередаватьВТабличноеПоле)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, Ячейка, ТекущаяОбластьЗначение, ПередаватьВТабличноеПоле);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьВXMLНаСервере(ВыдаватьСообщение = Ложь)
	
	//Если НЕ ПризнакМногострочности Тогда
		РегламентированнаяОтчетность.ПередатьДанныеИзТабличногоПоляВСтруктуру(ЭтаФорма);
	//КонецЕсли;
	
	Возврат РегламентированнаяОтчетность.ВыгрузитьОтчетВXMLДляСОНО(ЭтотОбъект, ВыдаватьСообщение);	

КонецФункции

&НаКлиенте
Процедура ПоказатьРасшифроку910ВВидеОСВ()	
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);

	СписокСтруктурныхЕдиниц = Новый СписокЗначений;
	СписокСтруктурныхЕдиниц.Добавить(ОтчетОбъект.Налогоплательщик);

	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", СписокСтруктурныхЕдиниц);
	ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПредставлениеСпискаОрганизаций", ПредставлениеСпискаОрганизаций);

	СписокСчетов = ПолучитьСписокСчетовДоходов();
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет", СписокСчетов, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);

	ГруппировкиРасшифровки = Новый Массив();

	// Добавим необходимые для понимания отчета группировки по аналитике счетов доходов
	Для Каждого ЭлементСпискаСчетов Из СписокСчетов Цикл
		// "+1-2-3" - субконто Доходы (об.) является первым
		ГруппировкиРасшифровки.Добавить(Новый Структура("Счет, Представление, ПоСубсчетам, ПоСубконто", ЭлементСпискаСчетов.Значение, "Доходы", Ложь, "+1-2-3"));
		
	КонецЦикла;
	
	ДополнительныеПоляРасшифровки = Новый Массив();
	ДополнительныеПоляРасшифровки.Добавить(Новый Структура("Поле, Представление", "Субконто1.ЯвляетсяОбъектомНалогообложенияПриСпециальныхНалоговыхРежимах", НСтр("ru = 'Является объектом налогообложения при СНР'")));

	ЗаполняемыеНастройки = Новый Структура("Реквизиты, ГруппировкаДоп, ДополнительныеПоля, Показатели, Группировка, ГруппировкиРасшифровки, ДополнительныеПоляРасшифровки, РазмещениеДополнительныхПолей",
	                                        Истина, Истина, Истина, Истина, Истина, ГруппировкиРасшифровки, ДополнительныеПоляРасшифровки, 1);


	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РазмещениеДополнительныхПолей", 1);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("ЗаполняемыеНастройки", ЗаполняемыеНастройки);	

	ОткрытьФорму("Отчет.ОборотноСальдоваяВедомостьТиповой.Форма.ФормаОтчета", ПараметрыФормы,, Истина);

КонецПроцедуры	

&НаКлиенте
Процедура ПоказатьРасшифровку910ВВидеРегистраНУпоИПНиСН(СтруктурнаяЕдиницаДляОтбора = Неопределено, МесяцДляРасшифровки = Неопределено, СписокФизЛиц = Неопределено, Гражданство = Неопределено, ВидСравненияГражданства = Неопределено, ИсключатьНерезидентов)

	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	// настраиваем параметры отчета в зависимости от параметров формы 910
	Если МесяцДляРасшифровки <> Неопределено Тогда 
		Если МесяцДляРасшифровки < 4 Тогда  
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", ДобавитьМесяц(НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), МесяцДляРасшифровки - 1));
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  ДобавитьМесяц(КонецМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), МесяцДляРасшифровки - 1));
		ИначеЕсли МесяцДляРасшифровки = 4 Тогда 
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	    ИначеЕсли МесяцДляРасшифровки = 5 Тогда
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		Иначе 
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		КонецЕсли;
	Иначе 
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода", КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	КонецЕсли;

	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Налогоплательщик", ОтчетОбъект.Налогоплательщик);	

	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";

	Если НЕ СписокФизЛиц = Неопределено  Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ФизЛицо", СписокФизЛиц, ВидСравненияКомпоновкиДанных.ВСписке);
	Иначе
		Если СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ФизЛицо", СтруктураРеквизитовФормы.мНалогоплательщикИндивидуальныйПредприниматель, ВидСравненияКомпоновкиДанных.НеРавно);
		КонецЕсли;
	КонецЕсли;

	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.СформироватьСписокСтруктурныхЕдиниц(ПредопределенноеЗначение("Перечисление.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты"), Неопределено, ОтчетОбъект.Налогоплательщик));
	ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПредставлениеСпискаОрганизаций", ПредставлениеСпискаОрганизаций);
	
	// Отбор по стране гражданства
	Если Гражданство <> Неопределено Тогда

		// отбор по стране гражданства
		СписокСтран = Новый СписокЗначений;
		СписокСтран.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторСтранМира.Казахстан"));
		СписокСтран.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторСтранМира.ПустаяСсылка"));
		Если ВидСравненияГражданства <> Неопределено Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Страна",  СписокСтран, ВидСравненияГражданства);
		Иначе
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Страна",  СписокСтран, ВидСравненияКомпоновкиДанных.ВСписке);
		КонецЕсли;
		
	КонецЕсли;

	// отбор по нерезидентам	
	Если ИсключатьНерезидентов <> Неопределено Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "НеЯвляетсяНалоговымРезидентомРК", ИсключатьНерезидентов, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;

	ГруппировкиРасшифровки = Новый Массив();
	
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "Налогоплательщик", НСтр("ru = 'Налогоплательщик'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "МесяцНалоговогоПериода", НСтр("ru = 'Месяц налог. периода'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "НалоговыйКомитет", НСтр("ru = 'Налоговый комитет'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "СтруктурнаяЕдиница", НСтр("ru = 'Структурное подразделение'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	КонецЕсли;
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "ФизЛицо", НСтр("ru = 'Работник'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));

	ДополнительныеПоляРасшифровки = Новый Массив();
	ДополнительныеПоляРасшифровки.Добавить(Новый Структура("Поле, Представление", "ТабельныйНомер", НСтр("ru = 'Табельный номер'")));
	ДополнительныеПоляРасшифровки.Добавить(Новый Структура("Поле, Представление", "ИИН", НСтр("ru = 'ИИН'")));

	ЗаполняемыеНастройки = Новый Структура("Группировка, Показатели, ДополнительныеПоля, ГруппировкиРасшифровки, ДополнительныеПоляРасшифровки",
											Истина, Истина, Истина, ГруппировкиРасшифровки, ДополнительныеПоляРасшифровки);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ЗаполняемыеНастройки",ЗаполняемыеНастройки );	

	ОткрытьФорму("Отчет.РегистрНалоговогоУчетаПоИПНиСН.Форма.ФормаОтчета", ПараметрыФормы,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиСтраниц()
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРаздел = Элементы.РазделыОтчета.ТекущиеДанные.Страницы;		
	КонецЕсли;
	
	Для Каждого ТекФорма ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",ТекФорма.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			ТекущаяСтрокаСписка.Выгружать               = ТекФорма.Выгружать;
			ТекущаяСтрокаСписка.ПоказатьСтраницу        = ТекФорма.ПоказатьСтраницу;			
			ТекущаяСтрокаСписка.АвтополучениеИтогов     = ТекФорма.АвтополучениеИтогов;  
			ТекущаяСтрокаСписка.АвтоЗаполнение          = ТекФорма.АвтоЗаполнение;  
		КонецЕсли;		   
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокФормДерева",СписокФормДерева);
	
	ДопПараметры = Новый Структура("ТекущийРаздел",ТекущийРаздел);
	
	ОповещениеПослеЗакрытияФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастройкиСтраниц",ЭтотОбъект,ДопПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.НастройкиОтчета",ПараметрыФормы, ЭтаФорма,,,,ОповещениеПослеЗакрытияФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиСтраниц(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьДанныеФормы(РезультатЗакрытия, СписокФормДерева);
	
	Модифицированность = Истина;
	
	//обновим мСписокФормБезИерархии
	Для Каждого СтрокаФормы ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",СтрокаФормы.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			СтрокаФормы.Выгружать               = ТекущаяСтрокаСписка.Выгружать;
			СтрокаФормы.ПоказатьСтраницу        = ТекущаяСтрокаСписка.ПоказатьСтраницу;			
			СтрокаФормы.АвтополучениеИтогов     = ТекущаяСтрокаСписка.АвтополучениеИтогов;  
			СтрокаФормы.АвтоЗаполнение          = ТекущаяСтрокаСписка.АвтоЗаполнение;  
		КонецЕсли;			
	КонецЦикла; 	

	Если ДополнительныеПараметры.Свойство("ТекущийРаздел") И НЕ ДополнительныеПараметры.ТекущийРаздел = Неопределено Тогда  		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(РазделыОтчета, Новый Структура("СписокФормДереваСтраницы",ДополнительныеПараметры.ТекущийРаздел));
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;			
	КонецЕсли;  	
	
КонецПроцедуры

&НаКлиенте
Процедура Форма910ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Область)
	
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма910РасчетНаСервере(Область.Имя, Область.Значение);
	КонецЕсли;
	    	    
	Модифицированность = Истина;
	
КонецПроцедуры	

////Обход ситуации с очисткой ячеек в ТП в клиент-серверном режиме работы
&НаКлиенте
Процедура ПанельФорма910ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ПанельФорма910ПриСменеСтраницыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПанельФорма910ПриСменеСтраницыНаСервере()
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ЗначениеРеквизита)
											
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ЗначениеРеквизита);										
											
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗаголовокОтражениеВУчете(ДокументОтражения)
	
	Если ЗначениеЗаполнено(ДокументОтражения) Тогда
		Возврат НСТР("ru = 'Открыть документ отражения в учете'");
	Иначе
		Возврат НСТР("ru = 'Ввести документ отражения в учете'");
	КонецЕсли;
	
КонецФункции // ПолучитьЗаголовокОтражениеВУчете()

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьДополнительныеПараметрыОтраженияДанных(НалогоплательщикЯвляетсяИП)
	
	СтруктураПараметров = Новый Структура;
	
	// Для опционального отображения колонок для ИП и проведения по РН
	СтруктураПараметров.Вставить("ОтражениеДанныхИП", НалогоплательщикЯвляетсяИП);
	
	// Сформируем имена реквизитов и адреса ячеек данных для заполнения колонок документа
	// в данную структуру передаем только числовые значения, которые надо отразить
	// 		Ключ - имя колонки ТЧ документа ОтражениеНалоговойОтчетностиВРеглУчете с типом "Число"
	// 		Значение - номер колонки в макете, в колонке макета указываем имя ячейки с содержанием данных
	ПоказателиОтчета = Новый Структура;
	ПоказателиОтчета.Вставить("СуммаДохода", 12);
	
	СтруктураПараметров.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// В данную структуру передаем все прочие параметры нечислового типа
	// далее данные параметры будут использоваться в дополнительных колонках
	// 		Ключ - имя колонки ТЧ документа ОтражениеНалоговойОтчетностиВРеглУчете
	// 		Значение - номер колонки в макете, в колонке указываем путь к получению данных,
	//				получение будет осуществляться через данные отчета, например, Организация = Вычислить("РеглОтчет." + Значение), где Значение = "Организация"
	ПараметрыОтчета = Новый Структура; 
	ПараметрыОтчета.Вставить("ФизЛицо", 13);
	
	СтруктураПараметров.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	
	Возврат СтруктураПараметров;
	
КонецФункции

