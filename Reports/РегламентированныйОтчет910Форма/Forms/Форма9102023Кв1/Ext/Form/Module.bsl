////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	мВыбраннаяФорма = "Форма9102023Кв1";
	КодФормы 		= "Форма910";
	
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруФормРегОтчета(ЭтотОбъект);	
	СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями = РегламентированнаяОтчетностьПереопределяемый.ПоддержкаРаботыСоСтруктурнымиПодразделениями();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов  = Новый СписокЗначений;	
	СтруктураРеквизитовФормы.мПечатныеформы 		 = Новый СписокЗначений;
	СтруктураРеквизитовФормы.ОтметкаРезидентов 	 = "1";
	СтруктураРеквизитовФормы.ОтметкаНерезидентов = "2";
	СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе = (Метаданные.РегистрыНакопления.ИПНСведенияОДоходах.Ресурсы.Найти("ОблагаемаяБаза") <> Неопределено);	
	СтруктураРеквизитовФормы.ВедетсяУчетОППВ     = (Метаданные.РегистрыНакопления.Найти("ОППВРасчетыСФондами") <> Неопределено);
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);
	
	мФорматНомераСтроки = "ЧЦ=6; ЧВН=; ЧГ=";	
	
	ЗаполнитьСведенияОбОтчетномПериоде();
		
	ИнициализироватьВспомогательныеПеременные(ОтчетОбъект, СтруктураРеквизитовФормы);

	ОтчетОбъект.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
	ОтчетОбъект.ТочностьЕдиницыИзмерения = 0;

	ОтчетОбъект.ДатаПодписи	= ТекущаяДатаСеанса();
	
	СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПолучитьПорядокОбложенияДоходовРаботников(Налогоплательщик, КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) + 1); 
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	ОтчетОбъект.Налогоплательщик         = Налогоплательщик;
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
			ЗаполнитьПараметры(ТекФорма.КодФормы);
		КонецЕсли;
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекФорма.КодФормы);
	КонецЦикла;
	
	////////////////////////////////////////////////////////////////////////////////
	// Подключаемые
	ОтчетыПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если Модифицированность Тогда 
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);	
		ТекстВопроса = НСТР("ru = 'Сохранить данные отчета?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_ОтражениеНалоговойОтчетностиВРеглУчете" Тогда
		Элементы.ФормаОтражениеВУчете.Заголовок = ПолучитьЗаголовокОтражениеВУчете(Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если КодФормы = "Форма910_01" И 
		НЕ (ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты")
	 		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица")) Тогда
		Форма910_01ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора);
	ИначеЕсли КодФормы = "Форма910_02" И 
		НЕ (ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты")
	 		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица")) Тогда
		Форма910_02ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора);
	ИначеЕсли КодФормы = "Форма910_03" И 
		НЕ (ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты")
	 		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица")) Тогда
		Форма910_03ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(мСписокСтруктурныхЕдиниц, ЭтаФорма, СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда		
		мСписокСтруктурныхЕдиниц = Результат;		
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц); 		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЗаполнитьВидРасчета(ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ДатаПодписиПриИзменении(Элемент)
	
	ПередатьЗначениеВСтруктуруНаСервере("ДатаПодачи", ОтчетОбъект.ДатаПодписи, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Форма910Расшифровка(НомерЯчейки, МесяцЯчейки, ИмяЯчейки)
	
	Если СтруктураРеквизитовФормы.ЕстьРегистрБУ И НомерЯчейки = 1 Тогда
		ПоказатьРасшифроку910АнализСубконто(ИмяЯчейки);
	Иначе	
		// вычислим список для отбора
		ОтборПоФизЛицам 			= Неопределено;
		ОтборПоСтране 				= Неопределено;
		ВидСравненияОтбораПоСтране 	= Неопределено;
		ИсключатьНерезидентов 		= Неопределено;
		Если НомерЯчейки = 19 Тогда
			// граждане РК		
			ОтборПоСтране 				= ПредопределенноеЗначение("Справочник.КлассификаторСтранМира.Казахстан");
			ВидСравненияОтбораПоСтране 	= ВидСравненияКомпоновкиДанных.ВСписке;
		ИначеЕсли НомерЯчейки = 20 Тогда
			// иностранцы			
			ОтборПоСтране				= ПредопределенноеЗначение("Справочник.КлассификаторСтранМира.Казахстан");
			ВидСравненияОтбораПоСтране  = ВидСравненияКомпоновкиДанных.НеВСписке;		
		КонецЕсли;
		Если МесяцЯчейки = 7 или МесяцЯчейки = 0 Тогда
			МесяцДляРасшифровки = Неопределено;
		Иначе
			МесяцДляРасшифровки = МесяцЯчейки; 
		КонецЕсли;
		
		ЯчейкаСОтбором = Истина;
		
		// с 2012 по 2017 2 полугодие  форма не содержит разделения по месяцам 
		ПоказатьРасшифровку910ВВидеРегистраНУпоИПНиСН(,МесяцДляРасшифровки, ОтборПоФизЛицам, ОтборПоСтране, ВидСравненияОтбораПоСтране, ИсключатьНерезидентов, ЯчейкаСОтбором, ?(НомерЯчейки = 17 ИЛИ НомерЯчейки = 18,Истина,Ложь));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Форма910_01Расшифровка(ИмяЯчейки)
	
	СтруктураПоФизЛицу = Новый Структура;
	// определим работника
	Если Найти(ИмяЯчейки,"__") > 0 Тогда		
		НомерЯчейки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "__") + 2));
		
		ОбластьРасшифровки = Форма910_01ПолеТабличногоДокументаСтраница1.Области.Найти("Ф910_01ФИО__" +  НомерЯчейки);		
		Если ОбластьРасшифровки <> Неопределено Тогда
			Если ЗначениеЗаполнено(ОбластьРасшифровки.Расшифровка) Тогда
				СтруктураПоФизЛицу.Вставить("ФизЛицо", ОбластьРасшифровки.Расшифровка);
				СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);					
			Иначе
				ПоказатьПредупреждение(,НСтр("ru = 'Для формирования расшифровки заполните физическое лицо в графе ""В"" на странице 1.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки не поддерживается."+Символы.ПС+"Расшифровку содержат ячейки формы, выделенные голубым цветом.'"));
		Возврат;
	КонецЕсли;
	
	ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,, СтруктураПоФизЛицу,,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Форма910_01РасшифровкаОбщая()
	
	СтруктураПоФизЛицу = Новый Структура;
	Если ПолучитьЗначениеРеквизита(Налогоплательщик, "ЮрФизЛицо") = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		СтруктураПоФизЛицу.Вставить("ФизЛицо", ПолучитьЗначениеРеквизита(Налогоплательщик, "ИндивидуальныйПредприниматель"));
		СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.НеРавно);											
	КонецЕсли;
	
	ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,, СтруктураПоФизЛицу,,, Истина);	
	
КонецПроцедуры

&НаКлиенте
// Процедура отображает отчет "Регистр НУ по ИПН и СН" 
// с учетом параметров формирования регламентированного отчета
//  
// Параметры: ДатаНачала - обозначает дату начала расшифровки - с начала года или с начала периода отчета
//            СтруктурнаяЕдиницаДляОтбора - для расшифровки формы 200.03
//
Процедура ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(ДатаНачала, ДатаОкончания, СтруктурнаяЕдиницаДляОтбора = Неопределено, СтруктураФизЛицоДляОтбора = Неопределено, Режим = "БезДетализации", ПризнакНеРезиденства = Ложь, Приложение910_01 = Ложь, Приложение910_02 = Ложь, Приложение910_03 = Ложь)

	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоМесяца(ДатаНачала));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецМесяца(ДатаОкончания));
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВключитьИП", Истина);	
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Налогоплательщик", Налогоплательщик);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВключитьПолучателейАлиментов", ПризнакАлиментов);
	
	ВидОтчета = "РегистрНалоговогоУчетаПоИПНиСН";
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВидОтчета", ВидОтчета);
	
	СписокСтруктурныхЕдиниц = Новый СписокЗначений;
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиницаДляОтбора) Тогда
		СписокСтруктурныхЕдиниц = мСписокСтруктурныхЕдиниц;
	Иначе
		СписокСтруктурныхЕдиниц.Добавить(СтруктурнаяЕдиницаДляОтбора);
	КонецЕсли;
	
	ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПредставлениеСпискаОрганизаций", ПредставлениеСпискаОрганизаций);
	
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Если СтруктураФизЛицоДляОтбора <> Неопределено Тогда
		Если ТипЗнч(СтруктураФизЛицоДляОтбора) = Тип("Структура") Тогда
			ФизЛицоДляОтбора = Неопределено;
			СтруктураФизЛицоДляОтбора.Свойство("ФизЛицо",ФизЛицоДляОтбора);
			Если ФизЛицоДляОтбора <> Неопределено Тогда
				ВидСравненияОтбор = СтруктураФизЛицоДляОтбора.ВидСравнения;
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ФизЛицо",  ФизЛицоДляОтбора, ВидСравненияОтбор);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ГруппировкиРасшифровки = Новый Массив();
	
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "Налогоплательщик", НСтр("ru = 'Налогоплательщик'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "МесяцНалоговогоПериода", НСтр("ru = 'Месяц налог. периода'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "НалоговыйКомитет", НСтр("ru = 'Налоговый комитет'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "СтруктурнаяЕдиница", НСтр("ru = 'Структурная единица'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "ФизЛицо", НСтр("ru = 'Работник'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	
	Если НЕ Режим = "БезДетализации" Тогда
		ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "Регистратор", НСтр("ru = 'Документ движения (регистратор)'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	КонецЕсли;   	

	Если Не Приложение910_02 ИЛИ (Приложение910_02 И Не ПризнакИП) Тогда 
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ИндивидуальныйПредпринимательАдвокатЧастныйНотариус", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	// отбор по стране гражданства
	СписокСтран = Новый СписокЗначений;
	СписокСтран.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторСтранМира.Казахстан"));
	
	Если ПризнакНеРезиденства Тогда // если расшифровка вызвана из формы 910.02
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Страна", СписокСтран, ВидСравненияКомпоновкиДанных.НеВСписке);
	ИначеЕсли Приложение910_01 Тогда 
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Страна", СписокСтран, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли; 
	
	//Отбор по физ лицам для ЕП
	ПорядокОбложенияЕП = ?(СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж"), Истина, Ложь);	
		
	Если ПорядокОбложенияЕП Тогда 
		
		Если Приложение910_01 ИЛИ Приложение910_02 ИЛИ Приложение910_03 Тогда 
			
			МассивФизЛиц = Новый Массив;

			Если Приложение910_03 Тогда
				МассивФизЛиц = ПолучитьМассивФизЛиц("Форма910_03");
			ИначеЕсли Приложение910_01 Тогда
				МассивФизЛиц = ПолучитьМассивФизЛиц("Форма910_01");
			ИначеЕсли Приложение910_02 Тогда
				МассивФизЛиц = ПолучитьМассивФизЛиц("Форма910_02");
			КонецЕсли;
			
			СписокФизЛиц = Новый СписокЗначений;	
			СписокФизЛиц.ЗагрузитьЗначения(МассивФизЛиц);
				
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ФизЛицо",  СписокФизЛиц, ВидСравненияКомпоновкиДанных.ВСписке);
		
		КонецЕсли;

	КонецЕсли;
	
	ЗаполняемыеНастройки = Новый Структура("Группировка, Показатели, ДополнительныеПоля, ГруппировкиРасшифровки",
											Истина, Истина, Истина, ГруппировкиРасшифровки);
											
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ЗаполняемыеНастройки",ЗаполняемыеНастройки );	
	
	ОткрытьФорму("Отчет.РегистрНалоговогоУчетаПоИПНиСН.Форма.ФормаОтчета", ПараметрыФормы,, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "Разделы"

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)	
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.КодФормы = Элемент.ТекущиеДанные.КодФормы Тогда
		ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);
		Возврат;
	КонецЕсли;
	
	РазделыОтчетаПриАктивизацииСтрокиНаСервере(Элемент.ТекущиеДанные.КодФормы, Элемент.ТекущиеДанные.Многострочность);	
		
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Для Каждого СтраницаФорм из Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы Цикл
		Элементы[СтраницаФорм.Имя].Видимость = СтраницаФорм.Имя = ЭтаФорма.КодФормы;	
	КонецЦикла;   
	
	Элементы.ГруппаСтраницыОтчета.ТекущаяСтраница = Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы[ЭтаФорма.КодФормы];

	ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);	
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПанель(ПризнакОсновнойФормы, ПризнакМногострочности)
			
	Элементы.ФормаВыгрузитьВXML.Видимость 						 = ПризнакОсновнойФормы; 
	Элементы.ГруппаКнопокДействияСоСтрокамиИСтраницами.Видимость = ПризнакМногострочности;
	Элементы.ФормаРасшифровка.Видимость  = (КодФормы <> "Форма910_01" И КодФормы <> "Форма910_02" И КодФормы <> "Форма910_03");	
	Элементы.Расшифровка910_01.Видимость = (КодФормы = "Форма910_01" ИЛИ КодФормы = "Форма910_02" ИЛИ КодФормы = "Форма910_03");	
			    	
КонецПроцедуры //ЗаполнитьПанель()

&НаКлиенте
Процедура Форма910ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Элемент.ТекущаяОбласть.Имя;
	
	Если (Найти(Ячейка, "ДоверительныйУправляющий") > 0)
	 ИЛИ (Найти(Ячейка, "Учредитель") > 0)
	 ИЛИ (Найти(Ячейка, "ВедетБУ") > 0)
	 ИЛИ (Найти(Ячейка, "НеВедетБУ") > 0)
	 ИЛИ (Найти(Ячейка, "ТрехкомпонентнаяИС") > 0)
	 ИЛИ (Найти(Ячейка, "ПлательщикЕП") > 0)
	 
	 Тогда  
	 	Если Элемент.ТекущаяОбласть.Значение = "Х" Тогда
			Элемент.ТекущаяОбласть.Значение = "";
		Иначе
			Элемент.ТекущаяОбласть.Значение = "Х";
		КонецЕсли;
		
		Если (Найти(Ячейка, "ПлательщикЕП") > 0) Тогда
			СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ?(Элемент.ТекущаяОбласть.Значение = "Х", ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж"), Неопределено); 	
		КонецЕсли;	
		
		ПередатьЗначениеВСтруктуруНаСервере(Ячейка, Элемент.ТекущаяОбласть.Значение, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Форма910ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Форма910ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Область);
	
КонецПроцедуры

&НаКлиенте
Процедура Форма910ПолеТабличногоДокументаСтраница2ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Форма910ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Область);
	
КонецПроцедуры

&НаКлиенте
Процедура Форма910ПолеТабличногоДокументаСтраница3ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Форма910ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Область);
	
КонецПроцедуры

&НаКлиенте
Процедура Форма910ПолеТабличногоДокументаСтраница4ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Форма910ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Область);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДОП ФОРМЫ Форма910_01

&НаКлиенте
Процедура Форма910_01ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;	
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница1");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	
	Если Найти(Ячейка, "Ф910_01ФИО__")> 0
	 ИЛИ Найти(Ячейка, "Ф910_01ИИН__")> 0 Тогда
		 НачЗначение = Область.Значение;
		 
		 ЗначениеРасшифровки = Область.Расшифровка;
		 
		 //может быть не заполнена расшировка ячейки при восстановления данных старых форм
		 Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			 ИмяЯчейкиРасшифровки = "Ф910_01ФИО" + Сред(Ячейка,Найти(Ячейка,"__"));
			 ОбластьРасширофвки = Форма910_01ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяЯчейкиРасшифровки);
			 Если ОбластьРасширофвки <> Неопределено Тогда 
				 ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;
				 Область.Расшифровка = ЗначениеРасшифровки;
				 ПередатьЗначениеВСтруктуруНаСервере(Ячейка,НачЗначение, Ложь);
			 КонецЕсли;				 
		 КонецЕсли;

		 Если ЗначениеЗаполнено(НачЗначение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			 Возврат;
		 КонецЕсли; 	 
		 
		 СписокВыбора = Новый СписокЗначений;
		 СписокВыбора.Добавить("Справочник.Контрагенты.Форма.ФормаВыбора","Контрагенты");
		 СписокВыбора.Добавить("Справочник.ФизическиеЛица.Форма.ФормаВыбора","Физические лица");
		 
		 ОповещениеВыбора = Новый ОписаниеОповещения("ПослеВыбораЭлемента", ЭтаФорма, ПараметрыСтраницы); 		 
		 СписокВыбора.ПоказатьВыборЭлемента(ОповещениеВыбора, "Выберите расшифровку", СписокВыбора[0]);				 
		 
	ИначеЕсли (Найти(Ячейка, "Ф910_01Статус__") > 0) Тогда
		НачЗначение = Область.Значение;
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
		ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
		ПараметрыФормы.Вставить("ИмяСекции"			  ,	"СтатусыФизическихЛиц2022");
		ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
		
		ПараметрыФормы.Вставить("ИмяОтчета"           , "РегламентированныйОтчет910Форма");
	
		ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(НачЗначение), Неопределено, СокрЛП(НачЗначение)));
		
		ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
		Если ВнешнийОтчет Тогда
			ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		Иначе
			ОткрытьФорму("Отчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		КонецЕсли;
		
	ИначеЕсли (Найти(Ячейка, "Ф910_01Категория__") > 0) Тогда
		НачЗначение = Область.Значение;
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
		ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
		ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КатегорииФизическихЛиц2023");
		ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
		
		ПараметрыФормы.Вставить("ИмяОтчета"           , "РегламентированныйОтчет910Форма");
	
       	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ?(НЕ ЗначениеЗаполнено(НачЗначение), Неопределено, НачЗначение)));
		
		ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
		Если ВнешнийОтчет Тогда
			ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		Иначе
			ОткрытьФорму("Отчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		КонецЕсли;
        
	ИначеЕсли (Найти(Ячейка, "Ф910_01_F__") > 0) Тогда
		
		ПараметрыСтраницы.Вставить("Расчет", Истина);		
		
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму начисленных доходов'"), 12,0);
		
	Иначе
		 Возврат;
	КонецЕсли; 	 

КонецПроцедуры

&НаКлиенте
Процедура Форма910_01ПолеТабличногоДокументаСтраница2Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;	
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница2");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	
	Если (Найти(Ячейка, "Ф910_01_G__") > 0) 
			ИЛИ (Найти(Ячейка, "Ф910_01_H__") > 0) 
	 		ИЛИ (Найти(Ячейка, "Ф910_01_I__") > 0) 
			ИЛИ (Найти(Ячейка, "Ф910_01_J__") > 0) Тогда
			
		НачЗначение = Область.Значение;
		
		Если (Найти(Ячейка, "Ф910_01_G__") > 0) Тогда
			            
            НачЗначение = Область.Значение;
            СтандартнаяОбработка = Ложь;
            
            ПараметрыФормы = Новый Структура;
            ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
            ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
            ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КодыВидовДоходовНеПодлежащихНалогообложению910_01");
            ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
            
            ПараметрыФормы.Вставить("ИмяОтчета"           , "РегламентированныйОтчет910Форма");
            
		    ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(Область.Значение), Неопределено, СокрЛП(Область.Значение)));
            
            ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
            Если ВнешнийОтчет Тогда
                ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
            Иначе
                ОткрытьФорму("Отчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
            КонецЕсли;
              		
		ИначеЕсли (Найти(Ячейка, "Ф910_01_H__") > 0) Тогда

			ПараметрыСтраницы.Вставить("Расчет", Истина);		
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму доходов, не подлежащих налогообложению (корректировка)'"), 12,0) ;
						
		ИначеЕсли (Найти(Ячейка, "Ф910_01_I__") > 0) Тогда
            
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму обязательных пенсионных взносов, исчисленных с начисленных доходов'"), 12,0) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф910_01_J__") > 0) Тогда
			
			ПараметрыСтраницы.Вставить("Расчет", Истина);					
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму взносов на ОСМС, исчисленных с начисленных доходов'"), 12,0) ;
		
		КонецЕсли;   		
				
	Иначе
		 Возврат;
	КонецЕсли; 	 

КонецПроцедуры

&НаКлиенте
Процедура Форма910_01ПолеТабличногоДокументаСтраница3Выбор(Элемент, Область, СтандартнаяОбработка)
	 	
	Ячейка = Область.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница3");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	 
	Если (Найти(Ячейка, "Ф910_01_K__") > 0) 
			ИЛИ (Найти(Ячейка, "Ф910_01_L__") > 0) 
	 		ИЛИ (Найти(Ячейка, "Ф910_01_M__") > 0) 
			ИЛИ (Найти(Ячейка, "Ф910_01_N__") > 0) Тогда
			
		НачЗначение = Область.Значение;
		
		Если (Найти(Ячейка, "Ф910_01_K__") > 0) Тогда
			
            НачЗначение = Область.Значение;
            СтандартнаяОбработка = Ложь;
            
            ПараметрыФормы = Новый Структура;
            ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
            ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
            ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КодыСтандартныхВычетов2021");
            ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
            
            ПараметрыФормы.Вставить("ИмяОтчета"           , "РегламентированныйОтчет910Форма");
            
		    ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(Область.Значение), Неопределено, СокрЛП(Область.Значение)));
            
            ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
            Если ВнешнийОтчет Тогда
                ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
            Иначе
                ОткрытьФорму("Отчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
            КонецЕсли;
              		
		ИначеЕсли (Найти(Ячейка, "Ф910_01_L__") > 0) Тогда
							
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму стандартных налоговых вычетов'"), 12,0) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф910_01_M__") > 0) Тогда
			            
            НачЗначение = Область.Значение;
            СтандартнаяОбработка = Ложь;
            
            ПараметрыФормы = Новый Структура;
            ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
            ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
            ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КодыПрочихВычетов2021");
            ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
            
            ПараметрыФормы.Вставить("ИмяОтчета"           , "РегламентированныйОтчет910Форма");
            
		    ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(Область.Значение), Неопределено, СокрЛП(Область.Значение)));
            
            ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
            Если ВнешнийОтчет Тогда
                ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
            Иначе
                ОткрытьФорму("Отчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
            КонецЕсли;
            		
		ИначеЕсли (Найти(Ячейка, "Ф910_01_N__") > 0) Тогда
			
			ПараметрыСтраницы.Вставить("Расчет", Истина);		
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму прочих налоговых вычетов'"), 12,0) ;
			            
		КонецЕсли;   		
				
	Иначе
		 Возврат;
	КонецЕсли; 	 
	
КонецПроцедуры

&НаКлиенте
Процедура Форма910_01ПолеТабличногоДокументаСтраница4Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;

	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница4");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
		
	Если (Найти(Ячейка, "Ф910_01_O__") > 0) 
			ИЛИ (Найти(Ячейка, "Ф910_01_P__") > 0) 
	 		ИЛИ (Найти(Ячейка, "Ф910_01_Q__") > 0) 
			ИЛИ (Найти(Ячейка, "Ф910_01_R__") > 0) Тогда
			
		НачЗначение = Область.Значение;
		
		Если (Найти(Ячейка, "Ф910_01_O__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму индивидуального подоходного налога, исчисленного с начисленных доходов'"), 12,0) ;
				
		ИначеЕсли (Найти(Ячейка, "Ф910_01_P__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму задолженности за отчетный период'"), 12,0) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф910_01_Q__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму выплаченных доходов'"), 12,0) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф910_01_R__") > 0) Тогда
			
			ПараметрыСтраницы.Вставить("Расчет", Истина);		
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму ИПН, подлежащего уплате в бюджет'"), 12,0) ;
			
		КонецЕсли;   		
				
	Иначе
		 Возврат;
	КонецЕсли; 	 

КонецПроцедуры

&НаКлиенте
Процедура Форма910_01ПолеТабличногоДокументаСтраница5Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница5");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
		
	Если (Найти(Ячейка, "Ф910_01_S__") > 0) 
			ИЛИ (Найти(Ячейка, "Ф910_01_T__") > 0) 
	 		ИЛИ (Найти(Ячейка, "Ф910_01_U__") > 0) 
			ИЛИ (Найти(Ячейка, "Ф910_01_V__") > 0) Тогда

		НачЗначение = Область.Значение;

		Если (Найти(Ячейка, "Ф910_01_S__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму обязательных пенсионных взносов, подлежащих перечислению'"), 12,0) ;
            
      	ИначеЕсли (Найти(Ячейка, "Ф910_01_T__") > 0) Тогда			
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму взносов на ОСМС, подлежащих перечислению'"), 12,0) ;
						
		ИначеЕсли (Найти(Ячейка, "Ф910_01_U__") > 0) Тогда			
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму отчислений в ГФСС'"), 12,0) ;
						
		ИначеЕсли (Найти(Ячейка, "Ф910_01_V__") > 0) Тогда			
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму обязательных профессиональных пенсионных взносов, подлежащих уплате'"), 12,0) ;
		
		КонецЕсли;

	КонецЕсли; 	 

КонецПроцедуры

&НаКлиенте
Процедура Форма910_01ПолеТабличногоДокументаСтраница6Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница6");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
		
	Если (Найти(Ячейка, "Ф910_01_W__") > 0) Тогда
		
		НачЗначение = Область.Значение;
		
		ПараметрыСтраницы.Вставить("Расчет", Истина);		
		
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму отчислений на ОСМС, подлежащих уплате'"), 12,0) ;
						
	Иначе
		 Возврат;
	КонецЕсли; 	 

КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДОП ФОРМЫ Форма910_02

&НаКлиенте
Процедура Форма910_02ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;	
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница1");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	
	Если Найти(Ячейка, "Ф910_02ФИОРезидента__")> 0
	 ИЛИ Найти(Ячейка, "Ф910_02ИИНРезидента__")> 0 Тогда
		 НачЗначение = Область.Значение;
		 
		 ЗначениеРасшифровки = Область.Расшифровка;
		 
		 //может быть не заполнена расшировка ячейки при восстановления данных старых форм
		 Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			 ИмяЯчейкиРасшифровки = "Ф910_02ФИО" + Сред(Ячейка,Найти(Ячейка,"__"));
			 ОбластьРасширофвки = Форма910_02ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяЯчейкиРасшифровки);
			 Если ОбластьРасширофвки <> Неопределено Тогда 
				 ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;
				 Область.Расшифровка = ЗначениеРасшифровки;
				 ПередатьЗначениеВСтруктуруНаСервере(Ячейка,НачЗначение, Ложь);
			 КонецЕсли;				 
		 КонецЕсли;

		 Если ЗначениеЗаполнено(НачЗначение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			 Возврат;
		 КонецЕсли; 	 
		 
		 СписокВыбора = Новый СписокЗначений;
		 СписокВыбора.Добавить("Справочник.Контрагенты.Форма.ФормаВыбора","Контрагенты");
		 СписокВыбора.Добавить("Справочник.ФизическиеЛица.Форма.ФормаВыбора","Физические лица");
		 
		 ОповещениеВыбора = Новый ОписаниеОповещения("ПослеВыбораЭлемента", ЭтаФорма, ПараметрыСтраницы); 		 
		 СписокВыбора.ПоказатьВыборЭлемента(ОповещениеВыбора, "Выберите расшифровку", СписокВыбора[0]);				 
		 
	Иначе
		 Возврат;
	КонецЕсли; 	 

КонецПроцедуры

&НаКлиенте
Процедура Форма910_02ПолеТабличногоДокументаСтраница2Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;	
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница2");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	
	Если (Найти(Ячейка, "Ф910_02ВидДокРезидента__") > 0) Тогда
		
		НачЗначение = Область.Значение;
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
		ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
		ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КодыВидовДокументов");
		ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
		
		ПараметрыФормы.Вставить("ИмяОтчета",          "РегламентированныйОтчет910Форма");
	
		ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(НачЗначение), Неопределено, СокрЛП(НачЗначение)));
		
		ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
		Если ВнешнийОтчет Тогда
			ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		Иначе
			ОткрытьФорму("Отчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		КонецЕсли;

	ИначеЕсли (Найти(Ячейка, "Ф910_02ДатаДокРезидента__") > 0) Тогда
		НачЗначение = Область.Значение;
			
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводДаты(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите дату выдачи документа'"), ЧастиДаты.Дата) ; 
				
	ИначеЕсли (Найти(Ячейка, "Ф910_02НомерДокРезидента__") > 0) Тогда
		НачЗначение = Область.Значение;	
		
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите номер документа'"),100) ; 	
		
	КонецЕсли;
	
	Если Найти(Ячейка, "Ф910_02НомерРегистрацииРезидента__")> 0  Тогда
		
		НачЗначение = Область.Значение;		
		ЗначениеРасшифровки = Область.Расшифровка;
		
		//может быть не заполнена расшировка ячейки при восстановления данных старых форм
		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			ИмяЯчейкиРасшифровки = "Ф910_02ФИОРезидента" + Сред(Ячейка,Найти(Ячейка,"__"));
			ОбластьРасширофвки = Форма910_02ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяЯчейкиРасшифровки);
			Если ОбластьРасширофвки <> Неопределено Тогда 
				ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;
				Область.Расшифровка = ЗначениеРасшифровки;
				 ПередатьЗначениеВСтруктуруНаСервере(Ячейка,НачЗначение, Ложь);
			КонецЕсли;				 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НачЗначение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			Возврат;
		КонецЕсли; 	
		
		СтандартнаяОбработка = Ложь; 
		
		 СписокВыбора = Новый СписокЗначений;
		 СписокВыбора.Добавить("Справочник.Контрагенты.Форма.ФормаВыбора","Контрагенты");
		 СписокВыбора.Добавить("Справочник.ФизическиеЛица.Форма.ФормаВыбора","Физические лица");
		 
		 ОповещениеВыбора = Новый ОписаниеОповещения("ПослеВыбораЭлемента", ЭтаФорма, ПараметрыСтраницы); 		 
		 СписокВыбора.ПоказатьВыборЭлемента(ОповещениеВыбора, "Выберите расшифровку", СписокВыбора[0]);			
	КонецЕсли; 	 

КонецПроцедуры

&НаКлиенте
Процедура Форма910_02ПолеТабличногоДокументаСтраница3Выбор(Элемент, Область, СтандартнаяОбработка)
	 	
	Ячейка = Область.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница3");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		

    Если Найти(Ячейка, "Ф910_02КодДохРезидента__")> 0 Тогда
        
        СтандартнаяОбработка = Ложь;
        
        ПараметрыФормы = Новый Структура;
        ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
        ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
        ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КодыВидовДоходов2022");
        ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
        ПараметрыФормы.Вставить("ИмяОтчета",          "РегламентированныйОтчет910Форма");
        
        ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(Область.Значение), Неопределено, СокрЛП(Область.Значение)));
        
        ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
        Если ВнешнийОтчет Тогда
            ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
        Иначе
            ОткрытьФорму("Отчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
        КонецЕсли;
        
	ИначеЕсли (Найти(Ячейка, "Ф910_02ВидДоговора__") > 0)  Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
		ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
		ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КодыВидовДоговоров2021");
		ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
		ПараметрыФормы.Вставить("ИмяОтчета",          "РегламентированныйОтчет910Форма");
		
		ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(Область.Значение), Неопределено, СокрЛП(Область.Значение)));
		
		ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
		Если ВнешнийОтчет Тогда
			ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		Иначе
			ОткрытьФорму("Отчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		КонецЕсли;	
	ИначеЕсли (Найти(Ячейка, "Ф910_02_НаименованиеДоговора__") > 0)  Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
		ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
		ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КодыВидовДоговоров2021");
		ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
		ПараметрыФормы.Вставить("ИмяОтчета",          "РегламентированныйОтчет910Форма");
		
		ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(Область.Значение), Неопределено, СокрЛП(Область.Значение)));
		
		ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
		Если ВнешнийОтчет Тогда
			ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		Иначе
			ОткрытьФорму("Отчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		КонецЕсли;	

	ИначеЕсли (Найти(Ячейка, "Ф910_02КодСтраныДоговора__") > 0)  Тогда
		НачЗначение = Элемент.ТекущаяОбласть.Значение;
		СтандартнаяОбработка = Ложь;

		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите код страны, с которой заключен международный договор'"), 100) ;
		
	ИначеЕсли (Найти(Ячейка, "Ф910_02СтавкаНалога") > 0) Тогда
		НачЗначение = Область.Значение;
				
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите ставку налога'"), 4, 1) ;
				
	ИначеЕсли (Найти(Ячейка, "Ф910_02_N__") > 0) Тогда
			
		НачЗначение = Область.Значение;
		
			ПараметрыСтраницы.Вставить("Расчет", Истина);		
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму начисленных доходов'"), 12,0) ;

	Иначе
		 Возврат;
	КонецЕсли; 	 
	
КонецПроцедуры

&НаКлиенте
Процедура Форма910_02ПолеТабличногоДокументаСтраница4Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;

	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница4");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
		
	Если (Найти(Ячейка, "Ф910_02_ВидДохода__") > 0)  
			ИЛИ (Найти(Ячейка, "Ф910_02_P__") > 0) 
	 		ИЛИ (Найти(Ячейка, "Ф910_02_Q__") > 0) 
			ИЛИ (Найти(Ячейка, "Ф910_02_R__") > 0) Тогда
			
		НачЗначение = Область.Значение;
		
		Если (Найти(Ячейка, "Ф910_02_ВидДохода__") > 0) Тогда
			
            НачЗначение = Область.Значение;
            СтандартнаяОбработка = Ложь;
            
            ПараметрыФормы = Новый Структура;
            ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
            ПараметрыФормы.Вставить("МножественныйВыбор"  , Истина);
            ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
            ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КодыВидовДоходовНеПодлежащихНалогообложению910_02");
            ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
            
            ПараметрыФормы.Вставить("ИмяОтчета",          "РегламентированныйОтчет910Форма");
            
		    ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(Область.Значение), Неопределено, СокрЛП(Область.Значение)));
            
            ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
            Если ВнешнийОтчет Тогда
                ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
            Иначе
                ОткрытьФорму("Отчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
            КонецЕсли;
    						
		ИначеЕсли (Найти(Ячейка, "Ф910_02_P__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 			
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму доходов, не подлежащих налогообложению соответствии пункту 1 статьи 341 Налогового кодекса (корректировка)'"), 12,0) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф910_02_Q__") > 0) Тогда
			
			ПараметрыСтраницы.Вставить("Расчет", Истина);					
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму доходов, не подлежащих налогообложению в соответствии со статьей 654 Налогового кодекса'"), 12,0) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф910_02_R__") > 0) Тогда
							
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму обязательных пенсионных взносов, исчисленных с начисленных доходов'"), 12,0) ;

		КонецЕсли;   		
				
	Иначе
		 Возврат;
	КонецЕсли; 	 

КонецПроцедуры

&НаКлиенте
Процедура Форма910_02ПолеТабличногоДокументаСтраница5Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;

	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница5");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
		
	Если (Найти(Ячейка, "Ф910_02_S__") > 0)  
			ИЛИ (Найти(Ячейка, "Ф910_02_СтандартныеВычеты__") > 0) 
	 		ИЛИ (Найти(Ячейка, "Ф910_02_U__") > 0) 
			ИЛИ (Найти(Ячейка, "Ф910_02_ПрочиеВычеты__") > 0)  Тогда
			
		НачЗначение = Область.Значение;
		
		Если (Найти(Ячейка, "Ф910_02_S__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 			
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму взносов на ОСМС исчисленных с начисленных доходов'"), 12,0) ;
			

		ИначеЕсли (Найти(Ячейка, "Ф910_02_СтандартныеВычеты__") > 0) Тогда
			
            ПараметрыСтраницы.Вставить("Расчет", Истина);					
            НачЗначение = Область.Значение;
            СтандартнаяОбработка = Ложь;
                      
            ПараметрыФормы = Новый Структура;
            ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
            ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
            ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КодыСтандартныхВычетов2021");
            ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
            
            ПараметрыФормы.Вставить("ИмяОтчета",          "РегламентированныйОтчет910Форма");
            
		    ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(Область.Значение), Неопределено, СокрЛП(Область.Значение)));
            
            ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
            Если ВнешнийОтчет Тогда
                ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
            Иначе
                ОткрытьФорму("Отчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
            КонецЕсли;
    						
		ИначеЕсли (Найти(Ячейка, "Ф910_02_U__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 			
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму стандартных налоговых вычетов'"), 12,0) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф910_02_ПрочиеВычеты__") > 0) Тогда
			
            НачЗначение = Область.Значение;
            СтандартнаяОбработка = Ложь;
            
            ПараметрыФормы = Новый Структура;
            ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
            ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
            ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КодыПрочихВычетов2021");
            ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
            
            ПараметрыФормы.Вставить("ИмяОтчета",          "РегламентированныйОтчет910Форма");
            
		    ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(Область.Значение), Неопределено, СокрЛП(Область.Значение)));
            
            ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
            Если ВнешнийОтчет Тогда
                ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
            Иначе
                ОткрытьФорму("Отчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
            КонецЕсли;
   			
		КонецЕсли;   		
				
	Иначе
		 Возврат;
	КонецЕсли; 	 

КонецПроцедуры

&НаКлиенте
Процедура Форма910_02ПолеТабличногоДокументаСтраница6Выбор(Элемент, Область, СтандартнаяОбработка)
	 	
	Ячейка = Область.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница6");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	 
	Если (Найти(Ячейка, "Ф910_02_W__") > 0) 
			ИЛИ (Найти(Ячейка, "Ф910_02_X__") > 0) 
	 		ИЛИ (Найти(Ячейка, "Ф910_02_Y__") > 0) 
			ИЛИ (Найти(Ячейка, "Ф910_02_Z__") > 0) Тогда
			
		НачЗначение = Область.Значение;
		
		Если (Найти(Ячейка, "Ф910_02_W__") > 0) Тогда
			
			ПараметрыСтраницы.Вставить("Расчет", Истина);		
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму прочих налоговых вычетов'"), 12,0) ;
						
		ИначеЕсли (Найти(Ячейка, "Ф910_02_X__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 			
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму индивидуального подоходного налога, исчисленного с начисленных доходов'"), 12,0) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф910_02_Y__") > 0) Тогда
			
			ПараметрыСтраницы.Вставить("Расчет", Истина);					
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму задолженности за отчетное полугодие'"), 12,0) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф910_02_Z__") > 0) Тогда
							
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму выплаченных доходов'"), 12,0) ;

		КонецЕсли;   		
				
	Иначе
		 Возврат;
	КонецЕсли; 	 
	
КонецПроцедуры

&НаКлиенте
Процедура Форма910_02ПолеТабличногоДокументаСтраница7Выбор(Элемент, Область, СтандартнаяОбработка)
	 	
	Ячейка = Область.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница7");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	 
	Если (Найти(Ячейка, "Ф910_02_AA__") > 0) 
			ИЛИ (Найти(Ячейка, "Ф910_02_AB__") > 0) 
	 		ИЛИ (Найти(Ячейка, "Ф910_02_AC__") > 0) 
			ИЛИ (Найти(Ячейка, "Ф910_02_AD__") > 0) Тогда
			
		НачЗначение = Область.Значение;
		
		Если (Найти(Ячейка, "Ф910_02_AA__") > 0) Тогда
			
			ПараметрыСтраницы.Вставить("Расчет", Истина);		
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму ИПН, подлежащего в бюджет'"), 12,0) ;
						
		ИначеЕсли (Найти(Ячейка, "Ф910_02_AB__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 			
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму ОПВ, подлежащих перечислению'"), 12,0) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф910_02_AC__") > 0) Тогда
			
			ПараметрыСтраницы.Вставить("Расчет", Истина);					
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму взносов на ОСМС подлежащих перечислению'"), 12,0) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф910_02_AD__") > 0) Тогда
							
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму социальных отчислений'"), 12,0) ;

		КонецЕсли;   		
				
	Иначе
		 Возврат;
	КонецЕсли; 	 
	
КонецПроцедуры

&НаКлиенте
Процедура Форма910_02ПолеТабличногоДокументаСтраница8Выбор(Элемент, Область, СтандартнаяОбработка)
	 	
	Ячейка = Область.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница8");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	 
	Если (Найти(Ячейка, "Ф910_02_AE__") > 0) 
			ИЛИ (Найти(Ячейка, "Ф910_02_AF__") > 0) Тогда
			
		НачЗначение = Область.Значение;
		
		Если (Найти(Ячейка, "Ф910_02_AE__") > 0) Тогда
			
			ПараметрыСтраницы.Вставить("Расчет", Истина);		
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму ОПВ, подлежащих уплате'"), 12,0) ;
						
		ИначеЕсли (Найти(Ячейка, "Ф910_02_AF__") > 0) Тогда
							
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму отчислений на ОСМС, подлежащих уплате'"), 12,0) ;

		КонецЕсли;   		
				
	Иначе
		 Возврат;
	КонецЕсли; 	 
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДОП ФОРМЫ Форма910_03

&НаКлиенте
Процедура Форма910_03ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)

	Ячейка = Область.Имя;	
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница1");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	
	Если Найти(Ячейка, "Ф910_03ФИОЕП__")> 0
	 ИЛИ Найти(Ячейка, "Ф910_03ИИНЕП__")> 0 Тогда
		 НачЗначение = Область.Значение;
		 
		 ЗначениеРасшифровки = Область.Расшифровка;
		 
		 //может быть не заполнена расшировка ячейки при восстановления данных старых форм
		 Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			 ИмяЯчейкиРасшифровки = "Ф910_03ФИОЕП" + Сред(Ячейка,Найти(Ячейка,"__"));
			 ОбластьРасширофвки = Форма910_03ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяЯчейкиРасшифровки);
			 Если ОбластьРасширофвки <> Неопределено Тогда 
				 ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;
				 Область.Расшифровка = ЗначениеРасшифровки;
				 ПередатьЗначениеВСтруктуруНаСервере(Ячейка,НачЗначение, Ложь);
			 КонецЕсли;				 
		 КонецЕсли;

		 Если ЗначениеЗаполнено(НачЗначение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			 Возврат;
		 КонецЕсли; 	 
		 
		 СписокВыбора = Новый СписокЗначений;
		 СписокВыбора.Добавить("Справочник.ФизическиеЛица.Форма.ФормаВыбора","Физические лица");
		 
		 ОповещениеВыбора = Новый ОписаниеОповещения("ПослеВыбораЭлемента", ЭтаФорма, ПараметрыСтраницы); 		 
		 СписокВыбора.ПоказатьВыборЭлемента(ОповещениеВыбора, "Выберите расшифровку", СписокВыбора[0]);				 
		 
	ИначеЕсли (Найти(Ячейка, "Ф910_03Категория__") > 0) Тогда
		НачЗначение = Область.Значение;
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
		ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
		ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КатегорииФизическихЛиц2023");
		ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
		
		ПараметрыФормы.Вставить("ИмяОтчета"           , "РегламентированныйОтчет910Форма");
	
       	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ?(НЕ ЗначениеЗаполнено(НачЗначение), Неопределено, НачЗначение)));
		
		ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
		Если ВнешнийОтчет Тогда
			ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		Иначе
			ОткрытьФорму("Отчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		КонецЕсли;
        
	ИначеЕсли (Найти(Ячейка, "Ф910_03_E__") > 0) Тогда
		
		ПараметрыСтраницы.Вставить("Расчет", Истина);		
		
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму начисленных доходов'"), 12,0);
		
	Иначе
		 Возврат;
	КонецЕсли; 	 

	
КонецПроцедуры

&НаКлиенте
Процедура Форма910_03ПолеТабличногоДокументаСтраница2Выбор(Элемент, Область, СтандартнаяОбработка)

	Ячейка = Область.Имя;

	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница2");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
		
	Если (Найти(Ячейка, "Ф910_03_F__") > 0) 
			ИЛИ (Найти(Ячейка, "Ф910_03_G__") > 0) 
	 		ИЛИ (Найти(Ячейка, "Ф910_03_H__") > 0) 
			ИЛИ (Найти(Ячейка, "Ф910_03_I__") > 0) Тогда
			
		НачЗначение = Область.Значение;
		
		Если (Найти(Ячейка, "Ф910_03_F__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму единого платежа, исчисленного с начисленных доходов'"), 12,2);
				
		ИначеЕсли (Найти(Ячейка, "Ф910_03_G__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму ИПН, подлежащего уплате в бюджет'"), 12,2);
			
		ИначеЕсли (Найти(Ячейка, "Ф910_03_H__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму ОПВ, подлежащих уплате в бюджет'"), 12,2);
			
		ИначеЕсли (Найти(Ячейка, "Ф910_03_I__") > 0) Тогда
			
			ПараметрыСтраницы.Вставить("Расчет", Истина);		
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму ВОСМС, подлежащих перечислению'"), 12,2);
			
		КонецЕсли;   		
				
	Иначе
		 Возврат;
	КонецЕсли; 	 

КонецПроцедуры

&НаКлиенте
Процедура Форма910_03ПолеТабличногоДокументаСтраница3Выбор(Элемент, Область, СтандартнаяОбработка)

	Ячейка = Область.Имя;

	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница3");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
		
	Если (Найти(Ячейка, "Ф910_03_J__") > 0) 
			ИЛИ (Найти(Ячейка, "Ф910_03_K__") > 0) 
	 		ИЛИ (Найти(Ячейка, "Ф910_03_L__") > 0) 
			ИЛИ (Найти(Ячейка, "Ф910_03_M__") > 0) Тогда
			
		НачЗначение = Область.Значение;
		
		Если (Найти(Ячейка, "Ф910_03_J__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму СО'"), 12,2) ;
				
		ИначеЕсли (Найти(Ячейка, "Ф910_03_K__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму ОСМС, подлежащих уплате'"), 12,2) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф910_03_L__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму ОПВР, подлежащих перечислению'"), 12,2) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф910_03_M__") > 0) Тогда
			
			ПараметрыСтраницы.Вставить("Расчет", Истина);		
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму единого платежа, подлежащего перечислению'"), 12,2) ;
			
		КонецЕсли;   		
				
	Иначе
		 Возврат;
	КонецЕсли; 	 

КонецПроцедуры

 ////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Заполнить(Команда)
	
	Перезаполнить = Истина; // Для выполнения запроса на пересчет данных к пользователю
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения =  РегламентированнаяОтчетностьКлиент.ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Перезаполнить Тогда		
		Если СтрокаФормы.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстВопроса = "Перезаполнить данные формы и ее дополнительных форм?";
		Иначе
			ТекстВопроса = "Перезаполнить данные формы?";
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);
		Оповещение.ДополнительныеПараметры.Вставить("Перезаполнить", Перезаполнить);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);		

	КонецЕсли;		

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	 	
	
	Перезаполнить = ДополнительныеПараметры.Перезаполнить;
	
	НачатьЗамерВремени();
	
	ЗаполнитьНаСервере(Перезаполнить);
	
КонецПроцедуры

&НаСервере
Процедура Очистить(ТекИмяФормы, ОчиститьВсе = Ложь) Экспорт
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	// Список ячеек, очищать которые не нужно
	Если ОчиститьВсе Тогда
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодВалюты");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДеятельностьСобственная");
	Иначе
		СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
		СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Год");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Полугодие");		
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодВалюты");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДеятельностьСобственная");
		СписокПоказателейНеПодлежащихОчистке.Добавить("НомерУведомления");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаУведомления");
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодНалоговогоОргана");
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодНалоговогоОргана1");
	КонецЕсли;
		
	РегламентированнаяОтчетность.ОчиститьСтруктуруДанныхИТабличноеПолеФормы(ЭтаФорма,ТекИмяФормы,ОчиститьВсе,СписокПоказателейНеПодлежащихОчистке);
	
	Если ТекИмяФормы = Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7) Тогда
		мСтруктураЗначений.Очистить();
	КонецЕсли;
	
КонецПроцедуры // Очистить()

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВXML(Команда)
	
	ГодФормирования = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	
	Если 2024 < ГодФормирования Тогда 
		ТекстСообщения = НСтр("ru = 'Отчет не предназначен для выгрузки в XML в выбранном отчетном периоде." + Символы.ПС + 
						"Пожалуйста, обновите комплект отчетов.'");
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);		
		Возврат;
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект);	
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	   
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохраненияФайла.ПолноеИмяФайла = КодФормы + " " + СтруктураРеквизитовФормы.мГод + "г" + ".xml";
		ДиалогСохраненияФайла.Фильтр = РегламентированнаяОтчетностьКлиентСервер.ФильтрДиалоговВыбораИСохраненияРегламентированногоОтчета();	
		ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
		ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите файл'");		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
		ДиалогСохраненияФайла.Показать(ОписаниеОповещения);
	Иначе   
		НачатьПолучениеФайлаССервера(ВыгрузитьВXMLНаСервере(), КодФормы + ".xml"); 
	КонецЕсли;
	   
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресВременногоХранилища = ВыгрузитьВXMLНаСервере();
		
	ПолноеИмяФайла = Результат[0];
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, АдресВременногоХранилища));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяФайла",ПолноеИмяФайла); 
	Обработчик = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеЗавершение", ЭтотОбъект,ДополнительныеПараметры);
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
	ПараметрыСохранения.Интерактивно = Ложь;
	ФайловаяСистемаКлиент.СохранитьФайлы(Обработчик, ПолучаемыеФайлы, ПараметрыСохранения); 
	        
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ТекстЗаголовка = НСтр("ru = 'Данные успешно выгружены в файл'");
	
	СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДополнительныеПараметры.ИмяФайла);
	
	РабочийКаталог = СтруктураФайла.Путь;

	#Если НЕ ВебКлиент Тогда
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка, "file:///" + СтрЗаменить(СокрЛП(РабочийКаталог), "\", "/"),
		РабочийКаталог);
	#Иначе
		Если НЕ ЗначениеЗаполнено(ПолученныеФайлы) Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка,,
		РабочийКаталог);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчете(Команда)
	
	Если НЕ СтруктураРеквизитовФормы.ЕстьВозможностьОтраженияВУчете Тогда
		Возврат;
	КонецЕсли;
	
	СохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(СохраненныйДок) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Регламентированный отчет не записан в информационной базе.'"));
		Возврат;
	КонецЕсли;
	
	ДокументОтраженияВУчете = ПолучитьЗначениеРеквизита(СохраненныйДок, "ДокументОтраженияВУчете");
	Если ЗначениеЗаполнено(ДокументОтраженияВУчете) Тогда
		РегламентированнаяОтчетностьКлиент.ОткрытьДокументОтраженияНалОтчетностиВУчете(СохраненныйДок, ДокументОтраженияВУчете, ЭтотОбъект);
	Иначе
		ДополнительныеПараметрыОтражения = СформироватьДополнительныеПараметрыОтраженияДанных(СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП);
		РегламентированнаяОтчетностьКлиент.СоздатьДокументОтраженияНалОтчетностиВУчете(СохраненныйДок, ЭтотОбъект, ДополнительныеПараметрыОтражения);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура Расшифровка(Команда)
	
	Попытка
		ИмяЯчейки = ТекущийЭлемент.ТекущаяОбласть.Имя;
	Исключение
		ПоказатьПредупреждение(,НСтр("ru = 'Активизируйте нужную ячейку отчета для расшифровки.'"));
		Возврат;
	КонецПопытки;
	
	ЦветРасшифровки = Форма910ПолеТабличногоДокументаСтраница1.Области.s_910_00_001.ЦветФона;
	
	НомерЯчейки = 0;
	МесяцЯчейки = 0;
	БукваЯчейки = "";
	Попытка
		БукваИмени = Сред(ИмяЯчейки, 1, 2);
		Если БукваИмени = "s_" Тогда
			
			НомерЯчейки = Число(Сред(ИмяЯчейки, 11, 2));
			
			МесяцЯчейки = ?(
				Сред(ИмяЯчейки, 14, 1) = ""  или Сред(ИмяЯчейки, 14, 1) = "A" или Сред(ИмяЯчейки, 14, 1) = "B" или
				Сред(ИмяЯчейки, 14, 1) = "C" или Сред(ИмяЯчейки, 14, 1) = "D" или Сред(ИмяЯчейки, 14, 1) = "E", 0, Число(Сред(ИмяЯчейки, 14, 1)));
				
			БукваЯчейки =?(
				Сред(ИмяЯчейки, 14, 1) = "A" или Сред(ИмяЯчейки, 14, 1) = "B" или Сред(ИмяЯчейки, 14, 1) = "C" или
				Сред(ИмяЯчейки, 14, 1) = "D" или Сред(ИмяЯчейки, 14, 1) = "E", Сред(ИмяЯчейки, 14, 1), "");

		КонецЕсли;
	Исключение
		ПоказатьПредупреждение(, НСтр("ru = 'Активизируйте нужную ячейку отчета для расшифровки.'"));
		Возврат;
	КонецПопытки;
	
	Если НомерЯчейки = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Активизируйте нужную ячейку отчета для расшифровки.'"));
		Возврат;
	ИначеЕсли НомерЯчейки = 2 или НомерЯчейки = 3 или 
		НомерЯчейки = 4 или НомерЯчейки = 5 или
		НомерЯчейки = 6 или НомерЯчейки = 7 или
		НомерЯчейки = 8 или НомерЯчейки = 9 или
		НомерЯчейки = 10 или НомерЯчейки = 11 или
		НомерЯчейки = 12 или НомерЯчейки = 13 или 
		НомерЯчейки = 14 или НомерЯчейки = 15 или 
		ИмяЯчейки = "s_910_00_001_A1" или ИмяЯчейки = "s_910_00_001_A2" Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки не поддерживается. Расшифровку содержат ячейки формы, выделенные голубым цветом.'"));
		Возврат;	
	КонецЕсли;
	
	Форма910Расшифровка(НомерЯчейки, МесяцЯчейки, ИмяЯчейки);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаОбщая(Команда)
	
	Если КодФормы = "Форма910_01" Тогда
		Форма910_01РасшифровкаОбщая();
	ИначеЕсли КодФормы = "Форма910_02" Тогда
		Форма910_02РасшифровкаОбщая();
	ИначеЕсли КодФормы = "Форма910_03" Тогда
		Форма910_03РасшифровкаОбщая();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПоРаботнику(Команда)
	
	Попытка
		ИмяЯчейки = ТекущийЭлемент.ТекущаяОбласть.Имя;
	Исключение
		ПоказатьПредупреждение(, Нстр("ru = 'Активизируйте нужную ячейку отчета для расшифровки.'"));
		Возврат;
	КонецПопытки;
		
	ЦветРасшифровки = Форма910ПолеТабличногоДокументаСтраница1.Области.s_910_00_001.ЦветФона;
	                              
	Если Лев(ТекущийЭлемент.Имя,СтрДлина(ТекущийЭлемент.Имя)-1) = "Форма910_01ПолеТабличногоДокументаСтраница"
	 	И ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда
		Если КодФормы = "Форма910_01" Тогда
			Форма910_01Расшифровка(ИмяЯчейки);		
		КонецЕсли;
		
	ИначеЕсли  Лев(ТекущийЭлемент.Имя,СтрДлина(ТекущийЭлемент.Имя)-1) = "Форма910_02ПолеТабличногоДокументаСтраница"
	 	И ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда
		Если КодФормы = "Форма910_02" Тогда
			Форма910_02Расшифровка(ИмяЯчейки);		
		КонецЕсли;
		
	ИначеЕсли  Лев(ТекущийЭлемент.Имя,СтрДлина(ТекущийЭлемент.Имя)-1) = "Форма910_03ПолеТабличногоДокументаСтраница"
	 	И ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда
		Если КодФормы = "Форма910_03" Тогда
			Форма910_03Расшифровка(ИмяЯчейки);		
		КонецЕсли;
		
	Иначе	
		ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки не поддерживается."+Символы.ПС+"Расшифровку содержат ячейки формы, выделенные голубым цветом.'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюФорму(Команда)
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму");
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФормуИПриложенияКНей(Команда)
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФормуИПриложения");
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыФормы.Вставить("Налогоплательщик",         ОтчетОбъект.Налогоплательщик);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, мВыбраннаяФорма, "") + "ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);	

КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	ОткрытьФормуНастройкиСтраниц()	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ДобавитьСтрокуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	УдалитьСтрокуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущаяСтр(Команда)
	
	ПредыдущаяСтрНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СледующаяСтр(Команда)
	
	СледующаяСтрНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаПерейти(Команда)
	
	ВыбСтраница = 1;
	
	ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаСтраницы", ЭтаФорма); 
	ПоказатьВводЧисла(ОповещениеВводаЗначений,ВыбСтраница, "Введите номер страницы",5,0);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ОценкаПроизводительности

&НаКлиенте
Функция НачатьЗамерВремени()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "Регламентированный отчет ""%1 Упрощенная декларация для субъектов малого бизнеса"" (заполнение)";
		КлючеваяОперация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(КлючеваяОперация,?(ЗначениеЗаполнено(КодФормы), НРег(КодФормы), "форма 910")); 
		ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент").НачатьЗамерВремени(Истина, КлючеваяОперация);
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеТаймера()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда 
		
		Возврат ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").НачатьЗамерВремени();
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьЗамер(ВремяНачала)
	
	Если ВремяНачала <> Неопределено 
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "Регламентированный отчет ""форма 910 Упрощенная декларация для субъектов малого бизнеса"" (заполнение)";
		ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПриЗакрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьДанныеСервере();
		Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанные() Экспорт
	СохранитьДанныеСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеСервере()
	ДополнительныеПараметрыОтражения = СформироватьДополнительныеПараметрыОтраженияДанных(СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП);
	СтруктураРеквизитовФормы.Вставить("ДополнительныеПараметрыОтражения", ДополнительныеПараметрыОтражения);
	РегламентированнаяОтчетность.СохранитьОтчет(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура РазделыОтчетаПриАктивизацииСтрокиНаСервере(НовыйКодФормы, НовыйПризнакМногострочность)		
	
	//проверим, что стояли не на основной, итоги передаем только когда переходим из доп.форм
	ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	Если ТекФорма <> Неопределено И Не ТекФорма.ПризнакОсновной Тогда
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы, Истина);		
	КонецЕсли;	

	// установим новые значения реквизитам формы
	ЭтаФорма.КодФормы = НовыйКодФормы;	
	
	//передаем данные из структуры в ТП
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	
	
	Если  НовыйПризнакМногострочность Тогда
		
		Если ТекФорма = Неопределено Тогда
			ВсегоСтраниц = 1;
		Иначе
			ВсегоСтраниц = ТекФорма.ВсегоСтраниц;
		КонецЕсли;
		
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтотОбъект);
		
	КонецЕсли;  
	
КонецПроцедуры	

&НаКлиенте
Процедура ОчиститьРеглОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Форма = ДополнительныеПараметры.Форма;	
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", Форма.КодФормы));
		Вложенность = ДополнительныеПараметры.ОчищатьПриложения;	
		
		ОчиститьРеглОтчетЗавершениеНаСервере(СтрокаФормы.КодФормы, СтрокаФормы.Многострочность, Вложенность)	
	КонецЕсли;		
КонецПроцедуры 	

&НаСервере
Процедура ОчиститьРеглОтчетЗавершениеНаСервере(КодФормы, ПризнакМногострочности, Вложенность) Экспорт		
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, ПризнакМногострочности, Вложенность);
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокСтруктурныхЕдиниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");			
	СтруктураРеквизитовФормы.Вставить("НалоговыйКомитет");				
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");		
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");		
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");	
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрг");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);	
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");	
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");		
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");	
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);	
	СтруктураРеквизитовФормы.Вставить("мПериодичность", Параметры.мПериодичность);			
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);
	СтруктураРеквизитовФормы.Вставить("мНалогоплательщикЯвляетсяИП");
	СтруктураРеквизитовФормы.Вставить("мНалогоплательщикИндивидуальныйПредприниматель");
	СтруктураРеквизитовФормы.Вставить("мПризнакСистемыСотрудниковЗУП20", Метаданные.РегистрыСведений.РаботникиОрганизаций.Измерения.Найти("ФизЛицо") = Неопределено);
	СтруктураРеквизитовФормы.Вставить("мРазмерМЗП");
	СтруктураРеквизитовФормы.Вставить("мРазмерМЗПДляЦелейНалогообложения");
	СтруктураРеквизитовФормы.Вставить("мРазмерМРП");
	СтруктураРеквизитовФормы.Вставить("мСтавкаСО");
	СтруктураРеквизитовФормы.Вставить("мСтавкаОПВ");
	СтруктураРеквизитовФормы.Вставить("мСтавкаВОСМС");
	СтруктураРеквизитовФормы.Вставить("мОтчетныйПериодПолугодие");
	СтруктураРеквизитовФормы.Вставить("мКоличествоМесяцев");
	СтруктураРеквизитовФормы.Вставить("ЕстьВозможностьОтраженияВУчете", Найти(Метаданные.Имя, "ЗарплатаИУправлениеПерсоналом") = 0 И Найти(Метаданные.Имя, "УправлениеПроизводственнымПредприятием") = 0);
	СтруктураРеквизитовФормы.Вставить("ЕстьРегистрБУ", Метаданные.РегистрыБухгалтерии.Найти("Типовой") <> Неопределено);
	СтруктураРеквизитовФормы.Вставить("мСписокФизЛицаИностранцыНеРезиденты");
	СтруктураРеквизитовФормы.Вставить("мСписокФизЛицаИностранцыРезиденты");
	СтруктураРеквизитовФормы.Вставить("мСписокФизЛицаКазахстанцы");   	
	СтруктураРеквизитовФормы.Вставить("мГод");	
	СтруктураРеквизитовФормы.Вставить("мПолугодие");
	СтруктураРеквизитовФормы.Вставить("мМесяцЗаполнения");
	СтруктураРеквизитовФормы.Вставить("мЕжемесячныйРасчетВзносовИОтчисленийЗаИП");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалоПериодаОтчетаУпрощенка");
	СтруктураРеквизитовФормы.Вставить("мИППенсионер");
	СтруктураРеквизитовФормы.Вставить("мМесяцИППенсионер");
	
	СтруктураРеквизитовФормы.Вставить("ОтметкаРезидентов");		
	СтруктураРеквизитовФормы.Вставить("ОтметкаНерезидентов");
	
	// индивидуальные параметры формы
	СтруктураРеквизитовФормы.Вставить("мПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	СтруктураРеквизитовФормы.Вставить("РасчетПоВидамДоходовИОблагаемойБазе");
	СтруктураРеквизитовФормы.Вставить("ВедетсяУчетОППВ"); 
	
	СтруктураРеквизитовФормы.Вставить("ПорядокОбложенияДоходовРаботников");
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			
			СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
			СписокСохранения.Вставить("ДеревоНастройкиСтраниц",	РеквизитФормыВЗначение("мДеревоСтраницОтчета").Скопировать());	
						
			ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
			мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()	
	РегламентированнаяОтчетность.ВосстановитьСохраненныйОтчет(ЭтотОбъект);
	//так как форма была выпущена ранее, без данных праметров, при восстановлении сохраненного отчета их нужно дозаполнить
	Если НЕ СтруктураРеквизитовФормы.Свойство("мСтавкаВОСМС") Тогда
		СтруктураРеквизитовФормы.Вставить("мСтавкаВОСМС", ПолучитьСтавкуОСМС(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, ОтчетОбъект.Налогоплательщик));
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Перем СтруктураГруппы;  
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ТекстСообщения = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);				
				
		Возврат Ложь;
		
	КонецЕсли;
			
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		 Форма910РасчетНаСервере(Неопределено, Неопределено);
	КонецЕсли; 

	РегламентированнаяОтчетность.СформироватьСписокПечатаемыхЛистов(ЭтаФорма);	       		
		
	Возврат Истина;                                                           
	
КонецФункции

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;	
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
						
		КонецЕсли;
		
		ЗаполнитьДанныеПоОрганизации();

		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();
	
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ЕстьВозможностьОтраженияВУчете Тогда
		Элементы.ФормаОтражениеВУчете.Видимость = Ложь;
	ИначеЕсли СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		ДокументОтражения = ПолучитьЗначениеРеквизита(СтруктураРеквизитовФормы.мСохраненныйДок, "ДокументОтраженияВУчете");
		Элементы.ФормаОтражениеВУчете.Заголовок = ПолучитьЗаголовокОтражениеВУчете(ДокументОтражения);
	КонецЕсли;
	
	// обход проблемы с обработкой реквизитов ПТД в платформе
	МассивРеквизитовФормы = ЭтотОбъект.ПолучитьРеквизиты();			
	Для Счетчик = 0 По МассивРеквизитовФормы.Количество()-1 Цикл		
		РеквизитФормы = МассивРеквизитовФормы[Счетчик];
		Если РеквизитФормы.ТипЗначения.СодержитТип(Тип("ТабличныйДокумент")) Тогда
			ЭтотОбъект[РеквизитФормы.Имя] = ЭтотОбъект[РеквизитФормы.Имя];	
		КонецЕсли;
	КонецЦикла;		
	
	Если мСтруктураЗначений = Неопределено Тогда
		мСтруктураЗначений = Новый Структура;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.Свойство("СформироватьФормуОтчетаАвтоматически") И СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически <> Неопределено Тогда
		
		ЗначениеТаймера = ЗначениеТаймера();
		
		ЗаполнитьАвтоНаСервере();
		
		ЗаписатьЗамер(ЗначениеТаймера);
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////
// ЛОКАЛЬНЫЕ МЕХАНИЗМЫ ОТЧЕТА

&НаКлиенте
Процедура ОбновитьПараметрыФормыНаКлиенте(Параметры) Экспорт
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	ОбновитьПараметрыФормыНаСервере(Параметры);
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыФормыНаСервере(Параметры) Экспорт
	
	ЗаполнитьСведенияОбОтчетномПериоде();

	ИнициализироватьВспомогательныеПеременные(ОтчетОбъект, СтруктураРеквизитовФормы); 
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);		
	КонецЦикла	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормы(ТекФорма, Параметры)
	
	ЗаполнитьЗначенияСвойств(ТекФорма.СтруктураРеквизитовФормы, Параметры);
	
	ТекФорма.Налогоплательщик        						 = Параметры.Налогоплательщик;	
	ТекФорма.ОтчетОбъект.Налогоплательщик        			 = ТекФорма.Налогоплательщик;	
	ТекФорма.мСписокСтруктурныхЕдиниц						 = Параметры.мСписокСтруктурныхЕдиниц;	
			
КонецПроцедуры

&НаСервере                                 
Процедура ЗаполнитьСведенияОбОтчетномПериоде() Экспорт

	СтрПериодОтчета = ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ФП = истина");
	
	СтруктураРеквизитовФормы.мГод     	= Формат(Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), "ЧГ="); // удаляем разделительный пробел, так как 		
	СтруктураРеквизитовФормы.мПолугодие	= ?(Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) < 6, 1, 2); // удаляем разделительный пробел, так как 	
			
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, ЭтотОбъект.КодФормы, Ложь, Ложь);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ЭтотОбъект.КодФормы);
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ЭтотОбъект.КодФормы);	
	
	Форма910РасчетНаСервере(Неопределено, Неопределено);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура Форма910РасчетНаСервере(ИмяЯчейки, Знач ЗначениеЯчейки)
	
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяЯчейки, ЗначениеЯчейки);
		
	КонецЕсли;

	Форма910Расчет(Истина, ИмяЯчейки);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере(Перезаполнить)
	
	ТекКодФормы = КодФормы;
	
	ИнициализироватьВспомогательныеПеременные(ЭтотОбъект, ЭтотОбъект.СтруктураРеквизитовФормы);
	
	Если КодФормы = "Форма910" Тогда 
		Форма910ЗаполнитьАвто(Перезаполнить);		
	ИначеЕсли КодФормы = "Форма910_01" Тогда     
		Форма910_01ЗаполнитьАвтоНаСервере(Перезаполнить);
	ИначеЕсли КодФормы = "Форма910_02" Тогда 		
		Форма910_02ЗаполнитьАвтоНаСервере(Перезаполнить);
	ИначеЕсли КодФормы = "Форма910_03" Тогда 		
		Форма910_03ЗаполнитьАвтоНаСервере(Перезаполнить);
	КонецЕсли;
	
	КодФормы = ТекКодФормы;
		
КонецПроцедуры

&НаСервере
Функция Форма910РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
	СтруктураРезультата = Новый Структура();
	
	ЗаполнитьСпискиФизЛицПоГражданству();
	
    Запрос =  Новый Запрос;
	
	// НачалоПериода с которого заполняется отчет, если был изменен на упрощенку  
	Если СтруктураРеквизитовФормы.мДатаНачалоПериодаОтчетаУпрощенка <> Неопределено Тогда 
		Запрос.УстановитьПараметр("НачПериода", 		СтруктураРеквизитовФормы.мДатаНачалоПериодаОтчетаУпрощенка);
	Иначе
		Запрос.УстановитьПараметр("НачПериода", 		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);	
	КонецЕсли;
   	
    Запрос.УстановитьПараметр("КонПериода", 			СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
    Запрос.УстановитьПараметр("парамНалогоплательщик",  ОтчетОбъект.Налогоплательщик);
	
 	Запрос.УстановитьПараметр("парамГоловнаяОрганизация",		 ОбщегоНазначенияБК.ГоловнаяОрганизация(ОтчетОбъект.Налогоплательщик));
	Запрос.УстановитьПараметр("парамВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("парамУвольнение", 				 Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("парамПоСреднемуЗаработкуДляОтпуска", Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
	
	Если СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП Тогда
		// ссылка на физлицо, которое описывает самого индивидуального предпринимателя
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", ОтчетОбъект.Налогоплательщик.ИндивидуальныйПредприниматель);
	
	Иначе
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Неопределено);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамПриход", 			ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамИсчисление", 		Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежаНалог", 	Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());    
	
	//ЕП
	ОрганизацияЯвляетсяПлательщикомЕП = ?(СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж"), Истина, Ложь);
		
	//////////////////////////////////////////////////////
    // строка 910.00.001 - Доход за налоговый период
    
    Если Метаданные.РегистрыБухгалтерии.Найти("Типовой") <> Неопределено Тогда
    
	    Запрос.УстановитьПараметр("СчетПрибыльУбытокОтчетногоГода", ПланыСчетов.Типовой.ИтоговаяПрибыльИтоговыйУбыток); // 5610
	    
	    СписокСчетовДоходов = ПолучитьСписокСчетовДоходов();	    
	    
	    Запрос.УстановитьПараметр("СписокСчетовДоходов", СписокСчетовДоходов);
	    
	    МассивВидыСубконто = Новый Массив();
	    МассивВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Доходы);
	    
	    Запрос.УстановитьПараметр("МассивВидыСубконто", МассивВидыСубконто);
		
		ДоходыРасходыПоКоду = ПолучитьТаблицуКодыСтрокДоходов();
		Запрос.УстановитьПараметр("ДоходыРасходыПоКоду", 		ДоходыРасходыПоКоду);

		// определим облагаемые доход за период
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоходыРасходыПоКоду.ВидДоходаРасхода КАК ВидДоходаРасхода,
		|	ДоходыРасходыПоКоду.Приоритет КАК Приоритет,
		|	ДоходыРасходыПоКоду.КодСтроки КАК КодСтроки
		|ПОМЕСТИТЬ ВТ_ДоходыРасходыПоКоду   				
		|ИЗ
		|	&ДоходыРасходыПоКоду КАК ДоходыРасходыПоКоду
		|;
		|///////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоходыРасходыПоКоду.КодСтроки КАК КодСтроки,
		|	ТиповойОбороты.Субконто1 КАК ВидДоходаРасхода,
		|	ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) КАК СуммаОборотДт,
		|	ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) КАК СуммаОборотКт
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Обороты(
		|			&НачПериода, 
		|			&КонПериода, 
		|			, 
		|			Счет В ИЕРАРХИИ (&СписокСчетовДоходов), 
		|			&МассивВидыСубконто,
		|			Организация = &парамНалогоплательщик
		|				И ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Доходы).ЯвляетсяОбъектомНалогообложенияПриСпециальныхНалоговыхРежимах, ЛОЖЬ), 
		|			КорСчет <> &СчетПрибыльУбытокОтчетногоГода, ) КАК ТиповойОбороты
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоходыРасходыПоКоду КАК ДоходыРасходыПоКоду
		|	ПО ТиповойОбороты.Субконто1 = ДоходыРасходыПоКоду.ВидДоходаРасхода
		|";	
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		СуммаОборотКт = 0;
		СуммаОборотДт = 0;
		
		СтруктураРезультата.Вставить("s_910_00_001_A", 0);
		СтруктураРезультата.Вставить("s_910_00_001",   0);
		
		s_910_00_001_Прочие = 0;
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.КодСтроки = "910.00.001.А" ИЛИ Выборка.КодСтроки = "910.00.001.A" Тогда 
				СтруктураРезультата.s_910_00_001_A = СтруктураРезультата.s_910_00_001_A + (Выборка.СуммаОборотКт - Выборка.СуммаОборотДт);
			Иначе
			    s_910_00_001_Прочие = s_910_00_001_Прочие + (Выборка.СуммаОборотКт - Выборка.СуммаОборотДт);
			КонецЕсли;
			
		КонецЦикла;    
		
		СтруктураРезультата.s_910_00_001 = СтруктураРезультата.s_910_00_001_A + s_910_00_001_Прочие;

	Иначе
		
		СтруктураРезультата.Вставить("s_910_00_001", 0);
		СтруктураРезультата.Вставить("s_910_00_001_A", 0);
		
	КонецЕсли;
	
	// заполним значения в структуре для последующего правильного авторасчета ячеек, которые входят в основную строку
	// 910.00.001 включает 910.00.001.A
	мСтруктураЗначений.Вставить("s_910_00_001",   СтруктураРезультата.s_910_00_001);
	мСтруктураЗначений.Вставить("s_910_00_001_A", СтруктураРезультата.s_910_00_001_A);	
		

	МТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МТ;
	
	// определим гражданство по периодам
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Период
	               |ПОМЕСТИТЬ ВТ_ДатыПериодовГода
	               |ИЗ
	               |	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	               |ГДЕ
	               |	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	               |	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &НачПериода И &КонПериода
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГражданствоФизЛицСрезПоследних.Период КАК Период,
	               |	ГражданствоФизЛицСрезПоследних.ФИО КАК ФИО,
	               |	ВЫБОР
	               |		КОГДА ГражданствоФизЛиц.Страна ЕСТЬ NULL 
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	               |		ИНАЧЕ ГражданствоФизЛиц.Страна
	               |	КОНЕЦ КАК Страна
	               |ПОМЕСТИТЬ ВТ_Гражданство
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Периоды.Период КАК Период,
	               |		Периоды.ФИО КАК ФИО,
	               |		МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСреза
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			Периоды.Период КАК Период,
	               |			ФизическиеЛица.Ссылка КАК ФИО
	               |		ИЗ
	               |			ВТ_ДатыПериодовГода КАК Периоды
	               |				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |				ПО (ИСТИНА)
	               |		ГДЕ
	               |			ФизическиеЛица.ЭтоГруппа = ЛОЖЬ) КАК Периоды
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	               |			ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(ГражданствоФизЛиц.Период, МЕСЯЦ))
	               |				И Периоды.ФИО = ГражданствоФизЛиц.ФизЛицо
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		Периоды.Период,
	               |		Периоды.ФИО) КАК ГражданствоФизЛицСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	               |		ПО ГражданствоФизЛицСрезПоследних.ПериодСреза = ГражданствоФизЛиц.Период
	               |			И ГражданствоФизЛицСрезПоследних.ФИО = ГражданствоФизЛиц.ФизЛицо
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Периоды.Период,
	               |	Контрагенты.Ссылка,
	               |	ВЫБОР
	               |		КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	               |		ИНАЧЕ Контрагенты.СтранаРезидентства
	               |	КОНЕЦ
	               |ИЗ
	               |	ВТ_ДатыПериодовГода КАК Периоды
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО (ИСТИНА)
	               |ГДЕ
	               |	Контрагенты.ЭтоГруппа = ЛОЖЬ
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Период,
	               |	ФИО";
				   
	Запрос.Выполнить();

    //////////////////////////////////////////////////////
    // строка 910.00.003  - Количество работников (для ИП - включая самого ИП)

	// Сформируем текст запроса с датами месяцев периода
	// первый месяц квартала
	НачалоМесяца = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ПериодыТекст = "ВЫБРАТЬ 
					|	ДАТАВРЕМЯ(" + Формат (НачалоМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК НачалоМесяца,
					|	ДАТАВРЕМЯ(" + Формат (КонецМесяца(НачалоМесяца),"ДФ=гггг,М,д,Ч,м,с") + ") КАК КонецМесяца
					|";
	// прибавим остальные месяцы
	Пока НачалоМесяца <= НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Цикл
		НачалоМесяца = КонецМесяца(НачалоМесяца) + 1;
    	ПериодыТекст = ПериодыТекст + "
    								  |ОБЪЕДИНИТЬ ВСЕ 
    								  |
    								  |ВЫБРАТЬ 
    								  |	   ДАТАВРЕМЯ(" + Формат(НачалоМесяца,"ДФ=гггг,М,д,Ч,м,с") + "),
    								  |	   ДАТАВРЕМЯ(" + Формат(КонецМесяца(НачалоМесяца),"ДФ=гггг,М,д,Ч,м,с") + ")
    								  |";
	КонецЦикла;	

	// Получим даты приема и увольнения для работников организации за период
	РаботникиОрганизацииТекст = "
	|ВЫБРАТЬ
	|	РаботникиОрганизации." +?(СтруктураРеквизитовФормы.мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ФизЛицо КАК ФизЛицо,
	|	РаботникиОрганизации.ОбособленноеПодразделение,
	|	&НачПериода КАК Период,
	|	РаботникиОрганизации.ПричинаИзмененияСостояния
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&НачПериода, 
	|				Организация = &парамГоловнаяОрганизация
	|				И " +?(СтруктураРеквизитовФормы.мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ФизЛицо <> &парамИндивидуальныйПредприниматель
	|				И " +?(СтруктураРеквизитовФормы.мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ВидЗанятости <> &парамВнутреннееСовместительство) КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУвольнение
	|	И РаботникиОрганизации.ОбособленноеПодразделение = &парамНалогоплательщик
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизации." +?(СтруктураРеквизитовФормы.мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ФизЛицо КАК ФизЛицо,
	|	РаботникиОрганизации.ОбособленноеПодразделение,
	|	РаботникиОрганизации.Период, 
	|	РаботникиОрганизации.ПричинаИзмененияСостояния
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Период > &НачПериода
	|	И РаботникиОрганизации.Период <= &КонПериода
	|	И РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
	|	И (РаботникиОрганизации." +?(СтруктураРеквизитовФормы.мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ВидЗанятости <> &парамВнутреннееСовместительство)
	|	И РаботникиОрганизации." +?(СтруктураРеквизитовФормы.мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ФизЛицо <> &парамИндивидуальныйПредприниматель
	|";

	Запрос.Текст = РаботникиОрганизацииТекст;

	// Получим периоды назначений работников
	ПериодыНазначенийТекст = "
	|ВЫБРАТЬ
	|	ТекущееНазначение.ФизЛицо,
	|	ТекущееНазначение.Период КАК ДатаНачала,
	|	МИНИМУМ(ВЫБОР 
	|				КОГДА СледующееНазначение.Период ЕСТЬ NULL ТОГДА &КонПериода 
	|				ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(СледующееНазначение.Период, ДЕНЬ, -1), ДЕНЬ)
	|			КОНЕЦ) КАК ДатаОкончания
	|ИЗ
	|	(" + РаботникиОрганизацииТекст + ") КАК ТекущееНазначение
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + РаботникиОрганизацииТекст + ") КАК СледующееНазначение
	|		ПО ТекущееНазначение.ФизЛицо = СледующееНазначение.ФизЛицо
	|		   И ТекущееНазначение.Период < СледующееНазначение.Период
	|ГДЕ
	|	ТекущееНазначение.ПричинаИзмененияСостояния <> &парамУвольнение	
	|	И ТекущееНазначение.ОбособленноеПодразделение = &парамНалогоплательщик
	|СГРУППИРОВАТЬ ПО
	|	ТекущееНазначение.ФизЛицо,
	|	ТекущееНазначение.Период	
	|";

	Запрос.Текст = ПериодыНазначенийТекст;

	// Разобьем данные о назначениях на помесячные записи и подсчитаем число дней за каждый период
	ПериодыНазначенийТекст = "
	|ВЫБРАТЬ
	|	ПериодыНазначений.ФизЛицо,
	|	ДЕНЬ(ВЫБОР // ДатаОкончания
	|			КОГДА ПериодыНазначений.ДатаОкончания < Периоды.КонецМесяца ТОГДА ПериодыНазначений.ДатаОкончания
	|			ИНАЧЕ Периоды.КонецМесяца 
	|		КОНЕЦ) - 
	|	ДЕНЬ(ВЫБОР // ДатаНачала
	|			КОГДА ПериодыНазначений.ДатаНачала > Периоды.НачалоМесяца ТОГДА ПериодыНазначений.ДатаНачала
	|			ИНАЧЕ Периоды.НачалоМесяца
	|		КОНЕЦ) + 1 КАК ДнейРаботыВМесяце,
	|	(ДЕНЬ(ВЫБОР // ДатаОкончания
	|			КОГДА ПериодыНазначений.ДатаОкончания < Периоды.КонецМесяца ТОГДА ПериодыНазначений.ДатаОкончания
	|			ИНАЧЕ Периоды.КонецМесяца 
	|		КОНЕЦ) - 
	|	ДЕНЬ(ВЫБОР // ДатаНачала
	|			КОГДА ПериодыНазначений.ДатаНачала > Периоды.НачалоМесяца ТОГДА ПериодыНазначений.ДатаНачала
	|			ИНАЧЕ Периоды.НачалоМесяца
	|		КОНЕЦ) + 1) * (ВЫБОР КОГДА  ЕСТЬNULL(СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности, ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)
	| ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК ДнейРаботыВМесяцеИнвалид,
	|	(ДЕНЬ(ВЫБОР // ДатаОкончания
	|			КОГДА ПериодыНазначений.ДатаОкончания < Периоды.КонецМесяца ТОГДА ПериодыНазначений.ДатаОкончания
	|			ИНАЧЕ Периоды.КонецМесяца 
	|		КОНЕЦ) - 
	|	ДЕНЬ(ВЫБОР // ДатаНачала
	|			КОГДА ПериодыНазначений.ДатаНачала > Периоды.НачалоМесяца ТОГДА ПериодыНазначений.ДатаНачала
	|			ИНАЧЕ Периоды.НачалоМесяца
	|		КОНЕЦ) + 1) * (ВЫБОР КОГДА ЕСТЬNULL(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер, ЛОЖЬ) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК ДнейРаботыВМесяцеПенсионер,
	|	Периоды.НачалоМесяца,
	|	Периоды.КонецМесяца
	|ИЗ
	|	(" + ПериодыНазначенийТекст + ") КАК ПериодыНазначений
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ПериодыТекст + ") КАК Периоды
	|		ПО ПериодыНазначений.ДатаНачала <= Периоды.КонецМесяца 
	|		   И ПериодыНазначений.ДатаОкончания >= Периоды.НачалоМесяца 
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(
	|				&КонПериода) КАК СведенияОбИнвалидностиФизлиц
	|	ПО (ПериодыНазначений.Физлицо = СведенияОбИнвалидностиФизлиц.Физлицо)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(
	|				&КонПериода) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|	ПО (ПериодыНазначений.Физлицо = СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо)";
	
	Запрос.Текст = ПериодыНазначенийТекст;
	
	// Определим среднесписочную за каждый месяц
	ЧисленностьТекст = "
	|ВЫБРАТЬ
	|	ПериодыНазначений.НачалоМесяца,
	|	ВЫРАЗИТЬ(СУММА(ПериодыНазначений.ДнейРаботыВМесяце) / ДЕНЬ(ПериодыНазначений.КонецМесяца) КАК ЧИСЛО(10, 0)) КАК Среднесписочная,
	|	ВЫРАЗИТЬ(СУММА(ПериодыНазначений.ДнейРаботыВМесяцеИнвалид) / ДЕНЬ(ПериодыНазначений.КонецМесяца) КАК ЧИСЛО(10, 0)) КАК СреднесписочнаяИнвалид,	
	|	ВЫРАЗИТЬ(СУММА(ПериодыНазначений.ДнейРаботыВМесяцеПенсионер) / ДЕНЬ(ПериодыНазначений.КонецМесяца) КАК ЧИСЛО(10, 0)) КАК СреднесписочнаяПенсионер
	|ИЗ
	|	(" + ПериодыНазначенийТекст + ") КАК ПериодыНазначений
	|СГРУППИРОВАТЬ ПО
	|	ПериодыНазначений.НачалоМесяца, 
	|	ПериодыНазначений.КонецМесяца 
	|";

	Запрос.Текст = ЧисленностьТекст;
	Выборка = Запрос.Выполнить().Выбрать();     
	
	СтруктураРезультата.Вставить("СреднесписочнаяЧисленность_1", 0);
	СтруктураРезультата.Вставить("СреднесписочнаяЧисленность_2", 0);
	СтруктураРезультата.Вставить("СреднесписочнаяЧисленность_3", 0);
	СтруктураРезультата.Вставить("СреднесписочнаяЧисленность_4", 0);
	СтруктураРезультата.Вставить("СреднесписочнаяЧисленность_5", 0);
	СтруктураРезультата.Вставить("СреднесписочнаяЧисленность_6", 0);
	
	//среднесписочная численность работников субъектов предпринимательства рассчитывается как сумма количества работников за налоговый период, поделенная на шесть
	СтруктураРеквизитовФормы.мКоличествоМесяцев = 6;	
	СреднесписочнаяЧисленность = 0;
	СреднесписочнаяЧисленностьИнвалид = 0;
	СреднесписочнаяЧисленностьПенсионер = 0;

	Пока Выборка.Следующий() Цикл
	    КоличествоРаботников = Выборка.Среднесписочная;
		КоличествоРаботниковИнвалид = Выборка.СреднесписочнаяИнвалид;
		КоличествоРаботниковПенсионер = Выборка.СреднесписочнаяПенсионер;
		Если КоличествоРаботников <> 0 Тогда // вдруг начали работать с середины квартала
			СреднесписочнаяЧисленность = СреднесписочнаяЧисленность + КоличествоРаботников;				
		КонецЕсли;
		Если КоличествоРаботниковИнвалид <> 0 Тогда // вдруг начали работать с середины квартала
			СреднесписочнаяЧисленностьИнвалид = СреднесписочнаяЧисленностьИнвалид + КоличествоРаботниковИнвалид;					
		КонецЕсли;	
		Если КоличествоРаботниковПенсионер <> 0 Тогда // вдруг начали работать с середины квартала
			СреднесписочнаяЧисленностьПенсионер = СреднесписочнаяЧисленностьПенсионер + КоличествоРаботниковПенсионер;					
		КонецЕсли;		
		
		// Сохраняем данные в структуре за каждый месяц для последующего расчета среднемесячной з/п
		Если Выборка.НачалоМесяца = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
			СтруктураРезультата.СреднесписочнаяЧисленность_1 = Выборка.Среднесписочная;
		ИначеЕсли Выборка.НачалоМесяца = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, 1) Тогда
			СтруктураРезультата.СреднесписочнаяЧисленность_2 = Выборка.Среднесписочная;
		ИначеЕсли Выборка.НачалоМесяца = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, 2) Тогда
			СтруктураРезультата.СреднесписочнаяЧисленность_3 = Выборка.Среднесписочная;
		ИначеЕсли Выборка.НачалоМесяца = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, 3) Тогда
			СтруктураРезультата.СреднесписочнаяЧисленность_4 = Выборка.Среднесписочная;
		ИначеЕсли Выборка.НачалоМесяца = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, 4) Тогда
			СтруктураРезультата.СреднесписочнаяЧисленность_5 = Выборка.Среднесписочная;		
		Иначе
			СтруктураРезультата.СреднесписочнаяЧисленность_6 = Выборка.Среднесписочная;
		КонецЕсли;
	КонецЦикла;
               				
	СреднесписочнаяЧисленность = ?(СтруктураРеквизитовФормы.мКоличествоМесяцев <> 0, СреднесписочнаяЧисленность / СтруктураРеквизитовФормы.мКоличествоМесяцев, 0); 	
	СреднесписочнаяЧисленностьИнвалид = ?(СтруктураРеквизитовФормы.мКоличествоМесяцев <> 0, СреднесписочнаяЧисленностьИнвалид / СтруктураРеквизитовФормы.мКоличествоМесяцев, 0); 
	СреднесписочнаяЧисленностьПенсионер = ?(СтруктураРеквизитовФормы.мКоличествоМесяцев <> 0, СреднесписочнаяЧисленностьПенсионер / СтруктураРеквизитовФормы.мКоличествоМесяцев, 0); 
	
	СтруктураРезультата.Вставить("s_910_00_003", Окр(СреднесписочнаяЧисленность));
	СтруктураРезультата.Вставить("s_910_00_003_A", СреднесписочнаяЧисленностьПенсионер);
	СтруктураРезультата.Вставить("s_910_00_003_B", СреднесписочнаяЧисленностьИнвалид);


    ////////////////////////////////////////////////////////////////////////////////////////////////
    // для расчета строки 910.00.004 - среднемесячная заработная плата на одного наемного работника
    
    РасчетНаРегистрах = Метаданные.РегистрыРасчета.Найти("ОсновныеНачисленияРаботниковОрганизаций") <> Неопределено;
    
    // узнаем фонд заработной платы наемных работников (без самого индивидуального предпринимателя,
    // если организация - ИП)
    
	Если РасчетНаРегистрах Тогда

		ФондЗаработнойПлатыТекст = "
		|ВЫБРАТЬ
		|	ОсновныеНачисления.ФизЛицо КАК ФизЛицо,
		|	ВЫБОР
		|		КОГДА ОсновныеНачисления.ВидРасчета.СпособРасчета = &парамПоСреднемуЗаработкуДляОтпуска 
		|				И ОсновныеНачисления.ПериодДействия >= ОсновныеНачисления.ПериодРегистрации
		|			ТОГДА НАЧАЛОПЕРИОДА(ОсновныеНачисления.ПериодДействия, МЕСЯЦ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ОсновныеНачисления.ПериодРегистрации, МЕСЯЦ)
		|	КОНЕЦ КАК НачалоМесяца,
		|	ОсновныеНачисления.Результат КАК Результат
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|ГДЕ
		|	ОсновныеНачисления.Организация = &парамГоловнаяОрганизация И
		|	ОсновныеНачисления.ПодразделениеОрганизации.Владелец = &парамНалогоплательщик И
		|	((ОсновныеНачисления.ПериодРегистрации МЕЖДУ &НачПериода И &КонПериода И
		|	  (ОсновныеНачисления.ВидРасчета.СпособРасчета <> &парамПоСреднемуЗаработкуДляОтпуска ИЛИ
		|	   ОсновныеНачисления.ПериодДействия < ОсновныеНачисления.ПериодРегистрации)) ИЛИ 
		|	 (ОсновныеНачисления.ПериодДействия МЕЖДУ &НачПериода И &КонПериода И
		|	  ОсновныеНачисления.ВидРасчета.СпособРасчета = &парамПоСреднемуЗаработкуДляОтпуска И
		|	  ОсновныеНачисления.ПериодДействия >= ОсновныеНачисления.ПериодРегистрации)) И
		|	ЕСТЬNULL(ОсновныеНачисления.ВидРасчета.ФондВыплат.ФондЗаработнойПлаты, ЛОЖЬ) И
		|	ОсновныеНачисления.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДополнительныеНачисления.ФизЛицо КАК ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ) КАК НачалоМесяца,
		|	ДополнительныеНачисления.Результат КАК Результат
		|ИЗ
		|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисления
		|ГДЕ
		|	ДополнительныеНачисления.Организация = &парамГоловнаяОрганизация И
		|	ДополнительныеНачисления.ПодразделениеОрганизации.Владелец = &парамНалогоплательщик И
		|	ДополнительныеНачисления.ПериодРегистрации МЕЖДУ &НачПериода И &КонПериода И
		|	ЕСТЬNULL(ДополнительныеНачисления.ВидРасчета.ФондВыплат.ФондЗаработнойПлаты, ЛОЖЬ) И
		|	ДополнительныеНачисления.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// прочие доходы, зарегистрированные в целях налогообложения
		|ВЫБРАТЬ
		|	СНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) КАК НачалоМесяца,
		|	СНСведенияОДоходах.СуммаДохода КАК Результат
		|ИЗ
		|	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
		|ГДЕ
		|	СНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик И
		|	СНСведенияОДоходах.ПериодРегистрации МЕЖДУ &НачПериода И &КонПериода И
		|	ЕСТЬNULL(СНСведенияОДоходах.ВидРасчета.ФондВыплат.ФондЗаработнойПлаты, ЛОЖЬ) И
		|	СНСведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения И
		|	СНСведенияОДоходах.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|	И СНСведенияОДоходах.Активность
		|";
		
	Иначе
	
		ФондЗаработнойПлатыТекст = "
		|ВЫБРАТЬ
		|	ОсновныеНачисления.ФизЛицо КАК ФизЛицо,
		|	ВЫБОР
		|		КОГДА ОсновныеНачисления.ВидРасчета.СпособРасчета = &парамПоСреднемуЗаработкуДляОтпуска 
		|				И НАЧАЛОПЕРИОДА(ОсновныеНачисления.ДатаНачала, МЕСЯЦ) >= НАЧАЛОПЕРИОДА(ОсновныеНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)
		|			ТОГДА НАЧАЛОПЕРИОДА(ОсновныеНачисления.ДатаНачала, МЕСЯЦ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ОсновныеНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)
		|	КОНЕЦ КАК НачалоМесяца,
		|	ОсновныеНачисления.Результат КАК Результат
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК ОсновныеНачисления
		|ГДЕ
		|	ОсновныеНачисления.Ссылка.Проведен И
		|	ОсновныеНачисления.Ссылка.Организация = &парамНалогоплательщик И
		|	((ОсновныеНачисления.Ссылка.ПериодРегистрации МЕЖДУ &НачПериода И &КонПериода И
		|	  (ОсновныеНачисления.ВидРасчета.СпособРасчета <> &парамПоСреднемуЗаработкуДляОтпуска ИЛИ
		|	   НАЧАЛОПЕРИОДА(ОсновныеНачисления.ДатаНачала, МЕСЯЦ) < ОсновныеНачисления.Ссылка.ПериодРегистрации)) ИЛИ 
		|	 (НАЧАЛОПЕРИОДА(ОсновныеНачисления.ДатаНачала, МЕСЯЦ) МЕЖДУ &НачПериода И &КонПериода И
		|	  ОсновныеНачисления.ВидРасчета.СпособРасчета = &парамПоСреднемуЗаработкуДляОтпуска И
		|	  НАЧАЛОПЕРИОДА(ОсновныеНачисления.ДатаНачала, МЕСЯЦ) >= ОсновныеНачисления.Ссылка.ПериодРегистрации)) И
		|	ЕСТЬNULL(ОсновныеНачисления.ВидРасчета.ФондВыплат.ФондЗаработнойПлаты, ЛОЖЬ) И
		|	ОсновныеНачисления.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// прочие доходы, зарегистрированные в целях налогообложения
		|ВЫБРАТЬ
		|	СНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) КАК НачалоМесяца,
		|	СНСведенияОДоходах.СуммаДохода КАК Результат
		|ИЗ
		|	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
		|ГДЕ
		|	СНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик И
		|	СНСведенияОДоходах.ПериодРегистрации МЕЖДУ &НачПериода И &КонПериода И
		|	ЕСТЬNULL(СНСведенияОДоходах.ВидРасчета.ФондВыплат.ФондЗаработнойПлаты, ЛОЖЬ) И
		|	СНСведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения И
		|	СНСведенияОДоходах.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|	И СНСведенияОДоходах.Активность
		|";
		
	КонецЕсли;

	ФондЗаработнойПлатыТекст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ФЗП.Результат) КАК Результат
	|ИЗ
	|	(" + ФондЗаработнойПлатыТекст + ") КАК ФЗП
	|";

	Запрос.Текст = ФондЗаработнойПлатыТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	
	СуммаЗарплаты = 0;
	
	Пока Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Результат) Цикл
		СуммаЗарплаты = Выборка.Результат;
	КонецЦикла;
	
	// Среднемесячная з/п одного работника
	СреднемесячнаяЗП = 0;
	Если СтруктураРеквизитовФормы.мКоличествоМесяцев <> 0 И СреднесписочнаяЧисленность <> 0 Тогда
		СреднемесячнаяЗП = Окр(СуммаЗарплаты / СреднесписочнаяЧисленность / СтруктураРеквизитовФормы.мКоличествоМесяцев);
		СтруктураРезультата.Вставить("s_910_00_004", СреднемесячнаяЗП);
	Иначе
		СтруктураРезультата.Вставить("s_910_00_004", 0);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Фонд з/п за отчетный период: %1. Среднесписочная численность в отчетном периоде: %2. Среднемесячная з/п за период: %3'"), 
														СокрЛП(СуммаЗарплаты), СокрЛП(СреднесписочнаяЧисленность), СокрЛП(СреднемесячнаяЗП)));
														
	ЗаполнитьСпискиФизЛицПоГражданству();
	
	//Запрос = Новый Запрос;
	Признак_ИПЮрЛицо = Ложь;
	// если налогоплательщик - ИП, то исключим данные самого индивидуального предпринимателя
	Если ОтчетОбъект.Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", ОтчетОбъект.Налогоплательщик.ИндивидуальныйПредприниматель);
	Иначе
		Признак_ИПЮрЛицо = Истина;
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Неопределено);
	КонецЕсли;

	Запрос.УстановитьПараметр("парамНачГода", 				НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парам1Мес", 					НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парам2Мес", 					ДобавитьМесяц(НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), 1));
	Запрос.УстановитьПараметр("парам3Мес", 					ДобавитьМесяц(НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), 2));
	Запрос.УстановитьПараметр("парамПериодПо", 				КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПослеПериодПо", 		КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) + 1);
	Запрос.УстановитьПараметр("парамНалогоплательщик",	 	ОтчетОбъект.Налогоплательщик);
	
	Запрос.УстановитьПараметр("парамФизЛицаКазахстанцы", 			СтруктураРеквизитовФормы.мСписокФизЛицаКазахстанцы);	
	Запрос.УстановитьПараметр("парамФизЛицаИностранцыНеРезиденты", 	СтруктураРеквизитовФормы.мСписокФизЛицаИностранцыНеРезиденты);
	Запрос.УстановитьПараметр("парамФизЛицаИностранцыРезиденты",	СтруктураРеквизитовФормы.мСписокФизЛицаИностранцыРезиденты);
	

	// Сформируем текст запроса с датами месяцев периода
	// первый месяц квартала
	НачалоМесяца = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ПериодыТекст = "ВЫБРАТЬ 
	|	ДАТАВРЕМЯ(" + Формат (НачалоМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК НачалоМесяца,
	|	ДАТАВРЕМЯ(" + Формат (КонецМесяца(НачалоМесяца),"ДФ=гггг,М,д,Ч,м,с") + ") КАК КонецМесяца
	|ПОМЕСТИТЬ Периоды";
	// прибавим остальные месяцы
	Пока НачалоМесяца < НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Цикл
		НачалоМесяца = КонецМесяца(НачалоМесяца) + 1;
		ПериодыТекст = ПериодыТекст + "
		|ОБЪЕДИНИТЬ ВСЕ 
		|
		|ВЫБРАТЬ 
		|	   ДАТАВРЕМЯ(" + Формат(НачалоМесяца,"ДФ=гггг,М,д,Ч,м,с") + "),
		|	   ДАТАВРЕМЯ(" + Формат(КонецМесяца(НачалоМесяца),"ДФ=гггг,М,д,Ч,м,с") + ")
		|";
	КонецЦикла;
	
	ПериодыТекст = ПериодыТекст +" 
	|ИНДЕКСИРОВАТЬ ПО
	|	НачалоМесяца";
	

	/////////////////////////////////////////////////////////
	// Начисленные доходы физических лиц
 	
	ТекстЗапроса = ПериодыТекст + "
	|;
	|/////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ВЫБОР КОГДА ИПНСведенияОДоходах.ФизЛицо Ссылка Справочник.ФизическиеЛица Тогда ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ""A"") ИНАЧЕ ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ""E"") КОНЕЦ КАК КодСтроки, // для контрагентов калссифицируем доход с незаполненным кодом строки как прочий доход
	|	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) КАК НачисленныеДоходы
	|ПОМЕСТИТЬ ВТ_ИПНСведенияОДоходах
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	|			&НачПериода,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|				И ФизЛицо <> &парамИндивидуальныйПредприниматель
	|				И ВЫБОР
	|					КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						ТОГДА НЕ ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК ИПНСведенияОДоходах
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоСН.СрезПоследних(&парамПериодПо, ) КАК КодыСтрокДекларации
	|		ПО ИПНСведенияОДоходах.ВидРасчета = КодыСтрокДекларации.ВидРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ),
	|	ВЫБОР КОГДА ИПНСведенияОДоходах.ФизЛицо Ссылка Справочник.ФизическиеЛица Тогда ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ""A"") ИНАЧЕ ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ""E"") КОНЕЦ
	|";		
				
	// Необходимо добавить получателей по исполнительным листам
	Если ПризнакАлиментов Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// ставим приходы по ИЛ как начисление получателям алиментов
		|ВЫБРАТЬ		
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	"""" КАК КодСтроки,
		|	СУММА(ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовПриход) КАК НачисленныеДоходы
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Обороты(
		|				&НачПериода,
		|				&парамПериодПо,
		|				МЕСЯЦ,
		|				Налогоплательщик = &парамНалогоплательщик
		|				И Получатель.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)		
		|				) КАК ВзаиморасчетыСПолучателямиИЛ
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.Период, МЕСЯЦ)
		|";		
				
	КонецЕсли;
	
	// В сумму начисленных доходов могут включаться начисление ОППВ
	Если ВключатьОППВВДоходыРаботников Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	""A"" КАК КодСтроки,
		|	СУММА(ОППВРасчетыСФондами.Взнос) КАК НачисленныеДоходы   // ОППВ
		|ИЗ
		|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
		|ГДЕ
		|	ОППВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И ОППВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &НачПериода И &парамПериодПо
		|	И ОППВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОППВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ОППВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ОППВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|	И ОППВРасчетыСФондами.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
		|	""A""
		|";

	КонецЕсли;   
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИНДЕКСИРОВАТЬ ПО
	|	МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.НачалоМесяца КАК НачалоМесяца,
	|	ЕСТЬNULL(ИПНСведенияОДоходах.КодСтроки, """") КАК КодСтроки,
	|	СУММА(ЕСТЬNULL(ИПНСведенияОДоходах.НачисленныеДоходы, 0)) КАК НачисленныеДоходы
	|ИЗ
	|	Периоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	|		ПО Периоды.НачалоМесяца = ИПНСведенияОДоходах.МесяцНалоговогоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.НачалоМесяца,
	|	ЕСТЬNULL(ИПНСведенияОДоходах.КодСтроки, """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоМесяца
	|
	|ИТОГИ
	|	СУММА(НачисленныеДоходы)
	|ПО
	|	НачалоМесяца";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтруктураРезультата.Вставить("s_910_00_016_1", 0);
	СтруктураРезультата.Вставить("s_910_00_016_2", 0);
	СтруктураРезультата.Вставить("s_910_00_016_3", 0);
	СтруктураРезультата.Вставить("s_910_00_016_4", 0);
	СтруктураРезультата.Вставить("s_910_00_016_5", 0);
	СтруктураРезультата.Вставить("s_910_00_016_6", 0);	
	СтруктураРезультата.Вставить("s_910_00_016_A", 0);
	СтруктураРезультата.Вставить("s_910_00_016_B", 0);
	СтруктураРезультата.Вставить("s_910_00_016_C", 0);
	СтруктураРезультата.Вставить("s_910_00_016_D", 0);
	СтруктураРезультата.Вставить("s_910_00_016_E", 0);
	НачисленныеДоходы = 0;
	Номер = 1;
	Пока Выборка.Следующий() Цикл
		НачисленныеДоходы = НачисленныеДоходы + Окр(Выборка.НачисленныеДоходы);
		СтруктураРезультата.Вставить("s_910_00_016_" + Номер, Окр(Выборка.НачисленныеДоходы));    
		Номер = Номер + 1;
		
		ВыборкаКодСтроки = Выборка.Выбрать();
		
		Пока ВыборкаКодСтроки.Следующий() Цикл
			// доход относим к строке А, B, C, D или E
			// код строки может содержать символы "А",  "B", "С",  "D" или  "E" русскими либо латинскими буквами
			Если (Найти(СокрЛП(ВыборкаКодСтроки.КодСтроки), "A") > 0)
				ИЛИ (Найти(СокрЛП(ВыборкаКодСтроки.КодСтроки), "А") > 0) Тогда
				
				СтруктураРезультата.s_910_00_016_A = СтруктураРезультата.s_910_00_016_A + ВыборкаКодСтроки.НачисленныеДоходы;

			ИначеЕсли (Найти(СокрЛП(ВыборкаКодСтроки.КодСтроки), "B") > 0)
				Или (Найти(СокрЛП(ВыборкаКодСтроки.КодСтроки), "В") > 0) Тогда
				
				СтруктураРезультата.s_910_00_016_B = СтруктураРезультата.s_910_00_016_B + ВыборкаКодСтроки.НачисленныеДоходы;

			ИначеЕсли (Найти(СокрЛП(ВыборкаКодСтроки.КодСтроки), "С") > 0)
				ИЛИ (Найти(СокрЛП(ВыборкаКодСтроки.КодСтроки), "C") > 0) Тогда
				
				СтруктураРезультата.s_910_00_016_C = СтруктураРезультата.s_910_00_016_C + ВыборкаКодСтроки.НачисленныеДоходы;

			ИначеЕсли (Найти(СокрЛП(ВыборкаКодСтроки.КодСтроки), "D") > 0) Тогда
				
				СтруктураРезультата.s_910_00_016_D = СтруктураРезультата.s_910_00_016_D + ВыборкаКодСтроки.НачисленныеДоходы;

			ИначеЕсли (Найти(СокрЛП(ВыборкаКодСтроки.КодСтроки), "Е") > 0)
				ИЛИ (Найти(СокрЛП(ВыборкаКодСтроки.КодСтроки), "E") > 0) Тогда
				
				СтруктураРезультата.s_910_00_016_E = СтруктураРезультата.s_910_00_016_E + ВыборкаКодСтроки.НачисленныеДоходы;

			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
		
	СтруктураРезультата.Вставить("s_910_00_016_7", НачисленныеДоходы);
	СтруктураРезультата.s_910_00_016_A = Окр(СтруктураРезультата.s_910_00_016_A);
	СтруктураРезультата.s_910_00_016_B = Окр(СтруктураРезультата.s_910_00_016_B);
	СтруктураРезультата.s_910_00_016_C = Окр(СтруктураРезультата.s_910_00_016_C);
	СтруктураРезультата.s_910_00_016_D = Окр(СтруктураРезультата.s_910_00_016_D);
	СтруктураРезультата.s_910_00_016_E = Окр(СтруктураРезультата.s_910_00_016_E);   
		
	//ЕП	
	//Если ОрганизацияЯвляетсяПлательщикомЕП Тогда  
		  		
		Запрос.Текст = "ВЫБРАТЬ
		|	Периоды.НачалоМесяца КАК НачалоМесяца,
		|	СУММА(ВЫБОР
		|			КОГДА ЕПСведенияОДоходахОбороты.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА ЕПСведенияОДоходахОбороты.ОблагаемаяБазаОборот
		|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		|		КОНЕЦ) КАК ОблагаемаяБазаЕП
		|ИЗ
		|	Периоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЕПСведенияОДоходах.Обороты(
		|				&НачПериода,
		|				&парамПериодПо,
		|				МЕСЯЦ,
		|				Налогоплательщик = &парамНалогоплательщик) КАК ЕПСведенияОДоходахОбороты
		|		ПО (Периоды.НачалоМесяца = НАЧАЛОПЕРИОДА(ЕПСведенияОДоходахОбороты.Период, МЕСЯЦ))
		|
		|СГРУППИРОВАТЬ ПО
		|	Периоды.НачалоМесяца
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачалоМесяца"; 
		    
		Выборка = Запрос.Выполнить().Выбрать();
		
		ОблагаемаяБазаЕП = 0;
		СтруктураРезультата.Вставить("s_910_00_017_1", 0);
		СтруктураРезультата.Вставить("s_910_00_017_2", 0);
		СтруктураРезультата.Вставить("s_910_00_017_3", 0);
		СтруктураРезультата.Вставить("s_910_00_017_4", 0);
		СтруктураРезультата.Вставить("s_910_00_017_5", 0);
		СтруктураРезультата.Вставить("s_910_00_017_6", 0);
		Номер = 1;
		Пока Выборка.Следующий() Цикл		
			СтруктураРезультата.Вставить("s_910_00_017_" + Номер, Окр(Выборка.ОблагаемаяБазаЕП));    
			ОблагаемаяБазаЕП = ОблагаемаяБазаЕП + Окр(Выборка.ОблагаемаяБазаЕП);
			
			Номер = Номер + 1;	
		КонецЦикла;
		СтруктураРезультата.Вставить("s_910_00_017_7", ОблагаемаяБазаЕП);		
	
		// Сумма единого платежа с доходов работников, подлежащего перечислению	
		
		Запрос.Текст =   
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ЕПРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ЕПРасчетыСФондами.СуммаПлатежа) КАК ЕП
		|ПОМЕСТИТЬ ЕПРасчетыСФондами
		|ИЗ
		|	РегистрНакопления.ЕПРасчетыСФондами КАК ЕПРасчетыСФондами
		|ГДЕ
		|	ЕПРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И ЕПРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &НачПериода И &парамПериодПо
		|	И ЕПРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ЕПРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ЕПРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ЕПРасчетыСФондами.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ЕПРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Периоды.НачалоМесяца КАК НачалоМесяца,
		|	ЕстьNULL(ЕПРасчетыСФондами.ЕП,0) КАК ЕП
		|ИЗ
		|	Периоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЕПРасчетыСФондами КАК ЕПРасчетыСФондами
		|		ПО Периоды.НачалоМесяца = ЕПРасчетыСФондами.МесяцНалоговогоПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	Периоды.НачалоМесяца,
		|	ЕПРасчетыСФондами.ЕП
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачалоМесяца";
		    
		Выборка = Запрос.Выполнить().Выбрать();
			
		СтруктураРезультата.Вставить("s_910_00_018_1", 0);
		СтруктураРезультата.Вставить("s_910_00_018_2", 0);
		СтруктураРезультата.Вставить("s_910_00_018_3", 0);
		СтруктураРезультата.Вставить("s_910_00_018_4", 0);
		СтруктураРезультата.Вставить("s_910_00_018_5", 0);
		СтруктураРезультата.Вставить("s_910_00_018_6", 0);

		Номер = 1;    
		
		Пока Выборка.Следующий() Цикл
				
			СтруктураРезультата.Вставить("s_910_00_018_" + Номер, Выборка.ЕП);
			
			Номер = Номер + 1;	 
			
		КонецЦикла;
  	
	//КонецЕсли;	  
	
	
	/////////////////////////////////////////////////////////////////////////////////////
	// Сумма индивидуального подоходного налога, подлежащего перечислению в бюджет	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	               |	ИПНРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	               |	СУММА(ИПНРасчетыСБюджетом.Налог) КАК СуммаИПНПодлежащегоПеречислению
	               |ПОМЕСТИТЬ ВТ_ИПНРасчетыСБюджетомУдержание
	               |ИЗ
	               |	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	               |ГДЕ
	               |	ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик
	               |	И ИПНРасчетыСБюджетом.Период МЕЖДУ &НачПериода И &парамПериодПо
	               |	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |	И ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	               |	И ИПНРасчетыСБюджетом.ФизЛицо <> &парамИндивидуальныйПредприниматель
	               |	И ВЫБОР
	               |			КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |				ТОГДА НЕ ИПНРасчетыСБюджетом.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
				   |	И ИПНРасчетыСБюджетом.Активность
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ),
	               |	ИПНРасчетыСБюджетом.ФизЛицо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Периоды.НачалоМесяца КАК НачалоМесяца,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	               |				ТОГДА ЕстьNull(ИПНРасчетыСБюджетом.СуммаИПНПодлежащегоПеречислению,0)
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СуммаИПНПодлежащегоПеречислениюГражданРК,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) <> ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	               |				ТОГДА ЕстьNull(ИПНРасчетыСБюджетом.СуммаИПНПодлежащегоПеречислению,0)
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СуммаИПНПодлежащегоПеречислениюИностранцевРК
	               |ИЗ
	               |	Периоды КАК Периоды
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИПНРасчетыСБюджетомУдержание КАК ИПНРасчетыСБюджетом
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ГражданствоФизЛиц
	               |			ПО (НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) = ГражданствоФизЛиц.Период)
	               |				И (ВЫБОР
	               |					КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |							И ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |						ТОГДА ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо = ГражданствоФизЛиц.ФИО
	               |					ИНАЧЕ ИПНРасчетыСБюджетом.ФизЛицо = ГражданствоФизЛиц.ФИО
	               |				КОНЕЦ)
	               |		ПО (Периоды.НачалоМесяца = НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Периоды.НачалоМесяца
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НачалоМесяца";
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	СтруктураРезультата.Вставить("s_910_00_019_1", 0);
	СтруктураРезультата.Вставить("s_910_00_019_2", 0);
	СтруктураРезультата.Вставить("s_910_00_019_3", 0);
	СтруктураРезультата.Вставить("s_910_00_019_4", 0);
	СтруктураРезультата.Вставить("s_910_00_019_5", 0);
	СтруктураРезультата.Вставить("s_910_00_019_6", 0);
	СтруктураРезультата.Вставить("s_910_00_020_1", 0);
	СтруктураРезультата.Вставить("s_910_00_020_2", 0);
	СтруктураРезультата.Вставить("s_910_00_020_3", 0);
	СтруктураРезультата.Вставить("s_910_00_020_4", 0);
	СтруктураРезультата.Вставить("s_910_00_020_5", 0);
	СтруктураРезультата.Вставить("s_910_00_020_6", 0);
	Номер = 1;
	Пока Выборка.Следующий() Цикл
			
		СтруктураРезультата.Вставить("s_910_00_019_" + Номер, Окр(Выборка.СуммаИПНПодлежащегоПеречислениюГражданРК));    
		СтруктураРезультата.Вставить("s_910_00_020_" + Номер, Окр(Выборка.СуммаИПНПодлежащегоПеречислениюИностранцевРК));
		
		Номер = Номер + 1;	
	КонецЦикла;
	
	Если СтруктураРеквизитовФормы.мЕжемесячныйРасчетВзносовИОтчисленийЗаИП Тогда
		
		/////////////////////////////////////////////////////////
		// Раздел. Исчисление социальных отчислений за ИП
		
		Запрос.Текст =	"ВЫБРАТЬ
		|	Периоды.НачалоМесяца КАК НачалоМесяца,
		|	СУММА(ВЫБОР
		|			КОГДА СОСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА СОСведенияОДоходах.ОблагаемаяБазаОборот
		|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		|		КОНЕЦ) КАК ОблагаемаяБазаСО
		|ИЗ
		|	Периоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СОСведенияОДоходах.Обороты(
		|				&НачПериода,
		|				&парамПериодПо,
		|				МЕСЯЦ,
		|				Налогоплательщик = &парамНалогоплательщик
		|					И ФизЛицо = &парамИндивидуальныйПредприниматель) КАК СОСведенияОДоходах
		|		ПО (Периоды.НачалоМесяца = НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ))
		|
		|СГРУППИРОВАТЬ ПО
		|	Периоды.НачалоМесяца
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачалоМесяца"; 
		
		Выборка = Запрос.Выполнить().Выбрать();
		ОблагаемаяБазаСО = 0;
		СтруктураРезультата.Вставить("s_910_00_010_1", 0);
		СтруктураРезультата.Вставить("s_910_00_010_2", 0);
		СтруктураРезультата.Вставить("s_910_00_010_3", 0);
		СтруктураРезультата.Вставить("s_910_00_010_4", 0);
		СтруктураРезультата.Вставить("s_910_00_010_5", 0);
		СтруктураРезультата.Вставить("s_910_00_010_6", 0);
		Номер = 1;
		Пока Выборка.Следующий() Цикл		
			СтруктураРезультата.Вставить("s_910_00_010_" + Номер, Окр(Выборка.ОблагаемаяБазаСО));    
			ОблагаемаяБазаСО = ОблагаемаяБазаСО + Окр(Выборка.ОблагаемаяБазаСО);
			
			Номер = Номер + 1;	
		КонецЦикла;
		СтруктураРезультата.Вставить("s_910_00_010_7", ОблагаемаяБазаСО);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(СОРасчетыСФондами.Отчисление) КАК СоциальныеОтчисления
		|ПОМЕСТИТЬ СОРасчетыСФондамиИП
		|ИЗ
		|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
		|ГДЕ
		|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &НачПериода И &парамПериодПо
		|	И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И СОРасчетыСФондами.ФизЛицо = &парамИндивидуальныйПредприниматель
		|	И СОРасчетыСФондами.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Периоды.НачалоМесяца КАК НачалоМесяца,
		|	ЕстьNull(СОРасчетыСФондами.СоциальныеОтчисления,0) КАК СоциальныеОтчисления
		|ИЗ
		|	Периоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ СОРасчетыСФондамиИП КАК СОРасчетыСФондами
		|		ПО Периоды.НачалоМесяца = СОРасчетыСФондами.МесяцНалоговогоПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	Периоды.НачалоМесяца,
		|	СОРасчетыСФондами.СоциальныеОтчисления
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачалоМесяца";
		Выборка = Запрос.Выполнить().Выбрать();
		СоциальныеОтчисления = 0;
		Номер = 1;
		СтруктураРезультата.Вставить("s_910_00_011_1", 0);
		СтруктураРезультата.Вставить("s_910_00_011_2", 0);
		СтруктураРезультата.Вставить("s_910_00_011_3", 0);
		СтруктураРезультата.Вставить("s_910_00_011_4", 0);
		СтруктураРезультата.Вставить("s_910_00_011_5", 0);
		СтруктураРезультата.Вставить("s_910_00_011_6", 0);
		Пока Выборка.Следующий() Цикл		
			СоциальныеОтчисления = СоциальныеОтчисления + Окр(Выборка.СоциальныеОтчисления);	
			СтруктураРезультата.Вставить("s_910_00_011_" + Номер, Окр(Выборка.СоциальныеОтчисления));    
			
			Номер = Номер + 1;
		КонецЦикла;
		
		СтруктураРезультата.Вставить("s_910_00_011_7", СоциальныеОтчисления);
		
		//Необходимо учесть ОПВР
		/////////////////////////////////////////////////////////////////////////////////////	
		// Исчисленные пенсионные взносы за ИП
		СтруктураРезультата.Вставить("s_910_00_012_1", 0);
		СтруктураРезультата.Вставить("s_910_00_012_2", 0);
		СтруктураРезультата.Вставить("s_910_00_012_3", 0);
		СтруктураРезультата.Вставить("s_910_00_012_4", 0);
		СтруктураРезультата.Вставить("s_910_00_012_5", 0);
		СтруктураРезультата.Вставить("s_910_00_012_6", 0);
		
		Запрос.Текст =  "ВЫБРАТЬ
		                |	НАЧАЛОПЕРИОДА(ОПВ_ОПВРСведенияОДоходах.НачалоМесяца, МЕСЯЦ) КАК НачалоМесяца,
		                |	МАКСИМУМ(ОПВ_ОПВРСведенияОДоходах.ОблагаемаяБазаОПВиОПВР) КАК ОблагаемаяБазаОПВиОПВР
		                |ИЗ
		                |	(ВЫБРАТЬ
						|	СУММА(ВЫБОР
						|			КОГДА ОПВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
						|				ТОГДА ОПВСведенияОДоходах.ОблагаемаяБазаОборот
						|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
						|		КОНЕЦ) КАК ОблагаемаяБазаОПВиОПВР,
						|	Периоды.НачалоМесяца КАК НачалоМесяца
						|ИЗ
						|	Периоды КАК Периоды
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОПВСведенияОДоходах.Обороты(
						|				&НачПериода,
						|				&парамПериодПо,
						|				МЕСЯЦ,
						|				Налогоплательщик = &парамНалогоплательщик
						|					И ФизЛицо = &парамИндивидуальныйПредприниматель) КАК ОПВСведенияОДоходах
						|		ПО (Периоды.НачалоМесяца = НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ))
						|
						|СГРУППИРОВАТЬ ПО
						|	Периоды.НачалоМесяца
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
						|	СУММА(ВЫБОР
						|			КОГДА ОПВРСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
						|				ТОГДА ОПВРСведенияОДоходах.ОблагаемаяБазаОборот
						|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
						|		КОНЕЦ) КАК ОблагаемаяБазаОПВиОПВР,
						|	Периоды.НачалоМесяца КАК НачалоМесяца
						|ИЗ
						|	Периоды КАК Периоды
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОПВРСведенияОДоходах.Обороты(
						|				&НачПериода,
						|				&парамПериодПо,
						|				МЕСЯЦ,
						|				Налогоплательщик = &парамНалогоплательщик
						|					И ФизЛицо = &парамИндивидуальныйПредприниматель) КАК ОПВРСведенияОДоходах
						|		ПО (Периоды.НачалоМесяца = НАЧАЛОПЕРИОДА(ОПВРСведенияОДоходах.Период, МЕСЯЦ))
						|
						|СГРУППИРОВАТЬ ПО
						|	Периоды.НачалоМесяца) КАК ОПВ_ОПВРСведенияОДоходах 
		                |
		                |СГРУППИРОВАТЬ ПО
		                |	НАЧАЛОПЕРИОДА(ОПВ_ОПВРСведенияОДоходах.НачалоМесяца, МЕСЯЦ)
						|
						|УПОРЯДОЧИТЬ ПО
						|	НачалоМесяца";
		// доход ОПВ и ОПВР одинаков для ИП
		
		Выборка = Запрос.Выполнить().Выбрать();
		ОблагаемаяБазаОПВиОПВР = 0;
		Номер = 1;
		Пока Выборка.Следующий() Цикл
			
			ОблагаемаяБазаОПВиОПВР = ОблагаемаяБазаОПВиОПВР + Окр(Выборка.ОблагаемаяБазаОПВиОПВР);
			
			СтруктураРезультата.Вставить("s_910_00_012_" + Номер, Окр(Выборка.ОблагаемаяБазаОПВиОПВР));    
			
			Номер = Номер + 1;	
		КонецЦикла;
		СтруктураРезультата.Вставить("s_910_00_012_7", ОблагаемаяБазаОПВиОПВР);
		
		
		/////////////////////////////////////////////////////////
		// Раздел. Исчисление обязательных пенсионных взносов за ИП
		
		// Сумма ОПВ, подлежащих перечислению	
		Запрос.Текст = "ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ОПВПодлежитПеречислениюВФонды.Взнос) КАК СуммаОПВПодлежащихПеречислению
		|ПОМЕСТИТЬ ОПВПодлежитПеречислениюВФондыИП
		|ИЗ
		|	РегистрНакопления.ОПВПодлежитПеречислениюВФонды КАК ОПВПодлежитПеречислениюВФонды
		|ГДЕ
		|	ОПВПодлежитПеречислениюВФонды.Налогоплательщик = &парамНалогоплательщик
		|	И ОПВПодлежитПеречислениюВФонды.Период МЕЖДУ &НачПериода И &парамПериодПо
		|	И ОПВПодлежитПеречислениюВФонды.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОПВПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
		|	И ОПВПодлежитПеречислениюВФонды.ФизЛицо = &парамИндивидуальныйПредприниматель 
		|	И ОПВПодлежитПеречислениюВФонды.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ОПВПодлежитПеречислениюВФонды.СуммаОПВПодлежащихПеречислению,0) КАК СуммаОПВПодлежащихПеречислению,
		|	Периоды.НачалоМесяца КАК НачалоМесяца
		|ИЗ
		|	Периоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОПВПодлежитПеречислениюВФондыИП КАК ОПВПодлежитПеречислениюВФонды
		|		ПО (ОПВПодлежитПеречислениюВФонды.МесяцНалоговогоПериода = Периоды.НачалоМесяца)
		|УПОРЯДОЧИТЬ ПО
		|	НачалоМесяца";
		
		Выборка = Запрос.Выполнить().Выбрать();
		СуммаОПВПодлежащихПеречислению = 0;
		СтруктураРезультата.Вставить("s_910_00_013_1", 0);
		СтруктураРезультата.Вставить("s_910_00_013_2", 0);
		СтруктураРезультата.Вставить("s_910_00_013_3", 0);
		СтруктураРезультата.Вставить("s_910_00_013_4", 0);
		СтруктураРезультата.Вставить("s_910_00_013_5", 0);
		СтруктураРезультата.Вставить("s_910_00_013_6", 0);
		Номер = 1;
		Пока Выборка.Следующий() Цикл
			
			СуммаОПВПодлежащихПеречислению = СуммаОПВПодлежащихПеречислению + Окр(Выборка.СуммаОПВПодлежащихПеречислению);
			СтруктураРезультата.Вставить("s_910_00_013_" + Номер, Окр(Выборка.СуммаОПВПодлежащихПеречислению));    
			
			Номер = Номер + 1;
		КонецЦикла;
		
		// сумма ОПВ, подлежащих перечислению
		СтруктураРезультата.Вставить("s_910_00_013_7", СуммаОПВПодлежащихПеречислению);
		

		/////////////////////////////////////////////////////////
		// Раздел. Исчисление ОПВР за ИП
		Запрос.Текст = "ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ОПВРРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ОПВРРасчетыСФондами.Взнос) КАК Взнос
		|ПОМЕСТИТЬ ОПВРРасчетыСФондамиИП
		|ИЗ
		|	РегистрНакопления.ОПВРРасчетыСФондами КАК ОПВРРасчетыСФондами
		|ГДЕ
		|	ОПВРРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И ОПВРРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &НачПериода И &парамПериодПо
		|	И ОПВРРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОПВРРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ОПВРРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ОПВРРасчетыСФондами.ФизЛицо = &парамИндивидуальныйПредприниматель
		|	И ОПВРРасчетыСФондами.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ОПВРРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Периоды.НачалоМесяца КАК НачалоМесяца,
		|	ЕстьNull(ОПВРРасчетыСФондами.Взнос,0) КАК Взнос
		|ИЗ
		|	Периоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОПВРРасчетыСФондамиИП КАК ОПВРРасчетыСФондами
		|		ПО Периоды.НачалоМесяца = ОПВРРасчетыСФондами.МесяцНалоговогоПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	Периоды.НачалоМесяца,
		|	ОПВРРасчетыСФондами.Взнос
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачалоМесяца";
		Выборка = Запрос.Выполнить().Выбрать();
		Взнос = 0;
		Номер = 1;
		СтруктураРезультата.Вставить("s_910_00_014_1", 0);
		СтруктураРезультата.Вставить("s_910_00_014_2", 0);
		СтруктураРезультата.Вставить("s_910_00_014_3", 0);
		СтруктураРезультата.Вставить("s_910_00_014_4", 0);
		СтруктураРезультата.Вставить("s_910_00_014_5", 0);
		СтруктураРезультата.Вставить("s_910_00_014_6", 0);
		Пока Выборка.Следующий() Цикл		
			Взнос = Взнос + Окр(Выборка.Взнос);	
			СтруктураРезультата.Вставить("s_910_00_014_" + Номер, Окр(Выборка.Взнос));    
			
			Номер = Номер + 1;
		КонецЦикла;
		
		СтруктураРезультата.Вставить("s_910_00_014_7", Взнос);

		/////////////////////////////////////////////////////////
		// Раздел. Исчисление ВОСМС за ИП
		
		// Сумма ВОСМС, подлежащих перечислению	
		Запрос.Текст = "ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ВОСМСПодлежитПеречислениюВФонды.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ВОСМСПодлежитПеречислениюВФонды.Взнос) КАК СуммаВОСМСПодлежащихПеречислению
		|ПОМЕСТИТЬ ВОСМСПодлежитПеречислениюВФондыИП
		|ИЗ
		|	РегистрНакопления.ВОСМСПодлежитПеречислениюВФонды КАК ВОСМСПодлежитПеречислениюВФонды
		|ГДЕ
		|	ВОСМСПодлежитПеречислениюВФонды.Налогоплательщик = &парамНалогоплательщик
		|	И ВОСМСПодлежитПеречислениюВФонды.Период МЕЖДУ &НачПериода И &парамПериодПо
		|	И ВОСМСПодлежитПеречислениюВФонды.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ВОСМСПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
		|	И ВОСМСПодлежитПеречислениюВФонды.ФизЛицо = &парамИндивидуальныйПредприниматель
		|	И ВОСМСПодлежитПеречислениюВФонды.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ВОСМСПодлежитПеречислениюВФонды.Период, МЕСЯЦ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВОСМСПодлежитПеречислениюВФонды.СуммаВОСМСПодлежащихПеречислению,0) КАК СуммаВОСМСПодлежащихПеречислению,
		|	Периоды.НачалоМесяца КАК НачалоМесяца
		|ИЗ
		|	Периоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВОСМСПодлежитПеречислениюВФондыИП КАК ВОСМСПодлежитПеречислениюВФонды
		|		ПО (ВОСМСПодлежитПеречислениюВФонды.МесяцНалоговогоПериода = Периоды.НачалоМесяца)
		|УПОРЯДОЧИТЬ ПО
		|	НачалоМесяца";
		
		Выборка = Запрос.Выполнить().Выбрать();
		СуммаВОСМСПодлежащихПеречислению = 0;
		СтруктураРезультата.Вставить("s_910_00_015_1", 0);
		СтруктураРезультата.Вставить("s_910_00_015_2", 0);
		СтруктураРезультата.Вставить("s_910_00_015_3", 0);
		СтруктураРезультата.Вставить("s_910_00_015_4", 0);
		СтруктураРезультата.Вставить("s_910_00_015_5", 0);
		СтруктураРезультата.Вставить("s_910_00_015_6", 0);
		Номер = 1;
		Пока Выборка.Следующий() Цикл
			
			СуммаОПВПодлежащихПеречислению = СуммаВОСМСПодлежащихПеречислению + Окр(Выборка.СуммаВОСМСПодлежащихПеречислению);
			СтруктураРезультата.Вставить("s_910_00_015_" + Номер, Окр(Выборка.СуммаВОСМСПодлежащихПеречислению));    
			
			Номер = Номер + 1;
		КонецЦикла;
		
		// сумма ВОСМС, подлежащих перечислению
		СтруктураРезультата.Вставить("s_910_00_015_7", СуммаВОСМСПодлежащихПеречислению);
	КонецЕсли;

	/////////////////////////////////////////////////////////
	// Раздел. Исчисление социальных отчислений
			
	Запрос.Текст = "ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(СОРасчетыСФондами.Отчисление) КАК СоциальныеОтчисления
	|ПОМЕСТИТЬ СОРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|ГДЕ
	|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &НачПериода И &парамПериодПо
	|	И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И СОРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И СОРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.НачалоМесяца КАК НачалоМесяца,
	|	ЕстьNull(СОРасчетыСФондами.СоциальныеОтчисления,0) КАК СоциальныеОтчисления
	|ИЗ
	|	Периоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ СОРасчетыСФондами КАК СОРасчетыСФондами
	|		ПО Периоды.НачалоМесяца = СОРасчетыСФондами.МесяцНалоговогоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.НачалоМесяца,
	|	СОРасчетыСФондами.СоциальныеОтчисления
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоМесяца";
	Выборка = Запрос.Выполнить().Выбрать();
	СоциальныеОтчисления = 0;
	Номер = 1;
	СтруктураРезультата.Вставить("s_910_00_021_1", 0);
	СтруктураРезультата.Вставить("s_910_00_021_2", 0);
	СтруктураРезультата.Вставить("s_910_00_021_3", 0);
	СтруктураРезультата.Вставить("s_910_00_021_4", 0);
	СтруктураРезультата.Вставить("s_910_00_021_5", 0);
	СтруктураРезультата.Вставить("s_910_00_021_6", 0);
	Пока Выборка.Следующий() Цикл		
		СоциальныеОтчисления = СоциальныеОтчисления + Окр(Выборка.СоциальныеОтчисления);	
		СтруктураРезультата.Вставить("s_910_00_021_" + Номер, Окр(Выборка.СоциальныеОтчисления));    
		
		Номер = Номер + 1;
	КонецЦикла;
	
	СтруктураРезультата.Вставить("s_910_00_021_7", СоциальныеОтчисления);


	/////////////////////////////////////////////////////////
	// Раздел. Исчисление обязательных пенсионных взносов
	
	// Сумма ОПВ, подлежащих перечислению	
	Запрос.Текст = "ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(ОПВПодлежитПеречислениюВФонды.Взнос) КАК СуммаОПВПодлежащихПеречислению
	|ПОМЕСТИТЬ ОПВПодлежитПеречислениюВФонды
	|ИЗ
	|	РегистрНакопления.ОПВПодлежитПеречислениюВФонды КАК ОПВПодлежитПеречислениюВФонды
	|ГДЕ
	|	ОПВПодлежитПеречислениюВФонды.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВПодлежитПеречислениюВФонды.Период МЕЖДУ &НачПериода И &парамПериодПо
	|	И ОПВПодлежитПеречислениюВФонды.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|	И ОПВПодлежитПеречислениюВФонды.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ВЫБОР
	|			КОГДА ОПВПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|				ТОГДА НЕ ОПВПодлежитПеречислениюВФонды.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ОПВПодлежитПеречислениюВФонды.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ОПВПодлежитПеречислениюВФонды.СуммаОПВПодлежащихПеречислению,0) КАК СуммаОПВПодлежащихПеречислению,
	|	Периоды.НачалоМесяца КАК НачалоМесяца
	|ИЗ
	|	Периоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОПВПодлежитПеречислениюВФонды КАК ОПВПодлежитПеречислениюВФонды
	|		ПО (ОПВПодлежитПеречислениюВФонды.МесяцНалоговогоПериода = Периоды.НачалоМесяца)
	|УПОРЯДОЧИТЬ ПО
	|	НачалоМесяца";
	
	Выборка = Запрос.Выполнить().Выбрать();
	СуммаОПВПодлежащихПеречислению = 0;
	СтруктураРезультата.Вставить("s_910_00_022_1", 0);
	СтруктураРезультата.Вставить("s_910_00_022_2", 0);
	СтруктураРезультата.Вставить("s_910_00_022_3", 0);
	СтруктураРезультата.Вставить("s_910_00_022_4", 0);
	СтруктураРезультата.Вставить("s_910_00_022_5", 0);
	СтруктураРезультата.Вставить("s_910_00_022_6", 0);
	Номер = 1;
	Пока Выборка.Следующий() Цикл
		
		СуммаОПВПодлежащихПеречислению = СуммаОПВПодлежащихПеречислению + Окр(Выборка.СуммаОПВПодлежащихПеречислению);
		СтруктураРезультата.Вставить("s_910_00_022_" + Номер, Окр(Выборка.СуммаОПВПодлежащихПеречислению));    
							
		Номер = Номер + 1;
	КонецЦикла;
	
	// сумма ОПВ, подлежащих перечислению
	СтруктураРезультата.Вставить("s_910_00_022_7", СуммаОПВПодлежащихПеречислению);


	/////////////////////////////////////////////////////////
	// Раздел. Исчисление обязательных пенсионных взносов работодателя

	// Сумма ОПВР к уплате	
	Запрос.Текст = "ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ОПВРРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(ОПВРРасчетыСФондами.Взнос) КАК ОПВР
	|ПОМЕСТИТЬ ОПВРРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ОПВРРасчетыСФондами КАК ОПВРРасчетыСФондами
	|ГДЕ
	|	ОПВРРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВРРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &НачПериода И &парамПериодПо
	|	И ОПВРРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВРРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И ОПВРРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ОПВРРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ОПВРРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ОПВРРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|ИНДЕКСИРОВАТЬ ПО
	|	МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.НачалоМесяца КАК НачалоМесяца,
	|	ЕСТЬNULL(ОПВРРасчетыСФондами.ОПВР,0) КАК ОПВР
	|ИЗ
	|	Периоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОПВРРасчетыСФондами КАК ОПВРРасчетыСФондами
	|		ПО (ОПВРРасчетыСФондами.МесяцНалоговогоПериода = Периоды.НачалоМесяца)
	|УПОРЯДОЧИТЬ ПО
	|	НачалоМесяца";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СуммаОПВРПодлежащихПеречислению = 0;
	СтруктураРезультата.Вставить("s_910_00_023_1", 0);
	СтруктураРезультата.Вставить("s_910_00_023_2", 0);
	СтруктураРезультата.Вставить("s_910_00_023_3", 0);
	СтруктураРезультата.Вставить("s_910_00_023_4", 0);
	СтруктураРезультата.Вставить("s_910_00_023_5", 0);
	СтруктураРезультата.Вставить("s_910_00_023_6", 0);
	Номер = 1;
	Пока Выборка.Следующий() Цикл	
		СуммаОПВРПодлежащихПеречислению = СуммаОПВРПодлежащихПеречислению + Окр(Выборка.ОПВР);
		СтруктураРезультата.Вставить("s_910_00_023_" + Номер, Окр(Выборка.ОПВР));    
						
		Номер = Номер + 1;	
	КонецЦикла;
	СтруктураРезультата.Вставить("s_910_00_023_7", СуммаОПВРПодлежащихПеречислению);

	
	/////////////////////////////////////////////////////////
	// Раздел. Исчисление обязательных профессиональных пенсионных взносов

	// Сумма ОППВ к уплате	
	Запрос.Текст = "ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(ОППВРасчетыСФондами.Взнос) КАК ОППВ
	|ПОМЕСТИТЬ ОППВРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
	|ГДЕ
	|	ОППВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ОППВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &НачПериода И &парамПериодПо
	|	И ОППВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОППВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И ОППВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ОППВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ОППВРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|ИНДЕКСИРОВАТЬ ПО
	|	МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.НачалоМесяца КАК НачалоМесяца,
	|	ЕСТЬNULL(ОППВРасчетыСФондами.ОППВ,0) КАК ОППВ
	|ИЗ
	|	Периоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
	|		ПО (ОППВРасчетыСФондами.МесяцНалоговогоПериода = Периоды.НачалоМесяца)
	|УПОРЯДОЧИТЬ ПО
	|	НачалоМесяца";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СуммаОППВПодлежащихПеречислению = 0;
	СтруктураРезультата.Вставить("s_910_00_024_1", 0);
	СтруктураРезультата.Вставить("s_910_00_024_2", 0);
	СтруктураРезультата.Вставить("s_910_00_024_3", 0);
	СтруктураРезультата.Вставить("s_910_00_024_4", 0);
	СтруктураРезультата.Вставить("s_910_00_024_5", 0);
	СтруктураРезультата.Вставить("s_910_00_024_6", 0);
	Номер = 1;
	Пока Выборка.Следующий() Цикл	
		СуммаОППВПодлежащихПеречислению = СуммаОППВПодлежащихПеречислению + Окр(Выборка.ОППВ);
		СтруктураРезультата.Вставить("s_910_00_024_" + Номер, Окр(Выборка.ОППВ));    
						
		Номер = Номер + 1;	
	КонецЦикла;
	СтруктураРезультата.Вставить("s_910_00_024_7", СуммаОППВПодлежащихПеречислению);
	

	/////////////////////////////////////////////////////////
	// Раздел. Исчисление взносов и отчислений на обязательное социальное медицинское страхование
	
	// Сумма ООСМС и ВОСМС к уплате	
	Запрос.Текст = "ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(ООСМСРасчетыСФондами.Отчисление) КАК Сумма
	|ПОМЕСТИТЬ ООСМСРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
	|ГДЕ
	|	ООСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ООСМСРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &НачПериода И &парамПериодПо
	|	И ООСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ООСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И ООСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ООСМСРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ООСМСРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ 
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
	|	СУММА(ВОСМСРасчетыСФондами.Взнос)
	|ИЗ
	|	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	|ГДЕ
	|	ВОСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ВОСМСРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &НачПериода И &парамПериодПо
	|	И ВОСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ВОСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ВОСМСРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ВЫБОР
	|			КОГДА ВОСМСРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|				ТОГДА НЕ ВОСМСРасчетыСФондами.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВОСМСРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода
	|ИНДЕКСИРОВАТЬ ПО
	|	МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.НачалоМесяца КАК НачалоМесяца,
	|	Сумма(ЕСТЬNULL(ООСМСРасчетыСФондами.Сумма,0)) КАК Сумма
	|ИЗ
	|	Периоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
	|		ПО (ООСМСРасчетыСФондами.МесяцНалоговогоПериода = Периоды.НачалоМесяца)
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.НачалоМесяца
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоМесяца";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СуммаООСМСПодлежащихПеречислению = 0;
	СтруктураРезультата.Вставить("s_910_00_025_1", 0);
	СтруктураРезультата.Вставить("s_910_00_025_2", 0);
	СтруктураРезультата.Вставить("s_910_00_025_3", 0);
	СтруктураРезультата.Вставить("s_910_00_025_4", 0);
	СтруктураРезультата.Вставить("s_910_00_025_5", 0);
	СтруктураРезультата.Вставить("s_910_00_025_6", 0);
	Номер = 1;
	Пока Выборка.Следующий() Цикл	
		СуммаООСМСПодлежащихПеречислению = СуммаООСМСПодлежащихПеречислению + Окр(Выборка.Сумма);
		СтруктураРезультата.Вставить("s_910_00_025_" + Номер, Окр(Выборка.Сумма));    				
		Номер = Номер + 1;	
	КонецЦикла;
	СтруктураРезультата.Вставить("s_910_00_025_7", СуммаООСМСПодлежащихПеречислению);
	
	Если СтруктураРезультата.Количество() = 0 И ВыдаватьСообщения Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данные для заполнения формы 910.00 за отчетный период отсутствуют...'"));

	КонецЕсли;   	
	    
    Возврат СтруктураРезультата;		 
	
КонецФункции // Форма910РассчитатьДанныеФормы()

&НаСервере
Процедура Форма910ЗаполнитьАвто(Перезаполнить = Ложь) 
	
	КодФормы = "Форма910";
	Очистить(КодФормы, Истина); 
	мСтруктураЗначений.Очистить();
	
	СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПолучитьПорядокОбложенияДоходовРаботников(Налогоплательщик, КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)); 
	
	Форма910_01ЗаполнитьАвтоНаСервере();
	Форма910_02ЗаполнитьАвтоНаСервере();
	Форма910_03ЗаполнитьАвтоНаСервере();
	
	//////////////////////////////////////////
	// Раздел. Расчетные показатели        	

	СтруктураРезультата = Форма910РассчитатьДанныеФормы();
	
	// переносим в структуру формы значения рассчитанных ячеек
	Для Каждого КлючИЗначение Из СтруктураРезультата Цикл
		Если Найти(КлючИЗначение.Ключ, "s_") > 0 Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, КлючИЗначение.Ключ, КлючИЗначение.Значение, Ложь);
		КонецЕсли;	
	Конеццикла;
	
	Форма910Расчет();

	Модифицированность = Истина;
	
КонецПроцедуры // Форма910ЗаполнитьАвто()

&НаСервере
Процедура Форма910Расчет(Изменено = Ложь, ИмяОбласти = Неопределено)
	
	// Расчет вычисляемых ячеек   	
	КодФормы = "Форма910";
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, КодФормы);			
	
	//Рассчитаем ячейку s_910_00_001, с учетом входящей в нее s_910_00_001_A
	Если Изменено Тогда
		СтруктураА = Новый Структура;
		ИмяОбластиА = "s_910_00_001_A";
		СтруктураА.Вставить(ИмяОбластиА);			
		s_910_00_001 = АвтоматическийРасчетПоСтрокам(КодФормы, ТаблицаДанных, "s_910_00_001", СтруктураА, Форма910ПолеТабличногоДокументаСтраница1, Ложь);		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_001", s_910_00_001);
	КонецЕсли;
	
	// 1. Сумма налогов с дохода, превышающего предельную сумму дохода
	
	s_910_00_001 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_001");		

	//////////////////////////////////////////////////////////////////////
	// 910.00.005 - Сумма налога
	s_910_00_005 = Окр(s_910_00_001 * 0.03);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_005", s_910_00_005);
	
	//////////////////////////////////////////////////////////////////////
	// 910.00.006 - Корректировка налога в соответствии со статьей 433
	
	
	//////////////////////////////////////////////////////////////////////
	// 2. Превышение предельной среднесписочной численности, человек
	s_910_00_003 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_003");
	
	//////////////////////////////////////////////////////////////////////
	// 910.00.006 - Уменьшение юридическим лицом суммы налога в зависимости от среднесписочной численности работников
	// Статья 436:
	// 2. Сумма налогов, исчисленная за налоговый период согласно пункту 1 настоящей статьи, подлежит корректировке в сторону уменьшения на сумму в размере 1,5 процента от суммы налога за
	// каждого работника, исходя из среднесписочной численности работников, если среднемесячная  заработная плата работников по итогам отчетного периода составила у индивидуальных
	// предпринимателей не менее 2-кратного, юридических лиц - не менее 2,5-кратного минимального размера заработной платы.
	// 4. В случае, указанном в пункте 3 настоящей статьи, корректировке, предусмотренной пунктом
	// 2 настоящей статьи, подлежит только сумма налога, исчисленного с суммы дохода, установленного статьей 433 настоящего Кодекса.
	//	5. При превышении за налоговый период предельной среднесписочной численности,
	//	установленной статьей 433 настоящего Кодекса, корректировка, предусмотренная пунктом 2 настоящей статьи, производится только на предельную среднесписочную численность.
	
	s_910_00_004 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_004");	
	s_910_00_006 = 0;
	Если (СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП и s_910_00_004 >= 23 * СтруктураРеквизитовФормы.мРазмерМРП)
		ИЛИ (НЕ СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП И s_910_00_004 >= 29 * СтруктураРеквизитовФормы.мРазмерМРП) Тогда
		// статья 687
		// для ИП корректировка осуществляется, если средняя заработная плата на одного наемного работника не менее 23-х МРП
		// для ЮЛ - не менее 29 МРП		
		s_910_00_006 =  Окр(s_910_00_005 * s_910_00_003 * 0.015);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_006", s_910_00_006);
	
	
	//////////////////////////////////////////////////////////////////////
	// 910.00.007 - Сумма налогов после корректировки
	
	s_910_00_007 = Макс(s_910_00_005 - s_910_00_006, 0);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_007", s_910_00_007);
	
	
	//////////////////////////////////////////////////////////////////////
	// 910.00.008 - Сумма индивидуального (корпоративного) подоходного налога, подлежащая уплате в бюджет
	// 910.00.007*0,5

	s_910_00_008 = Окр(s_910_00_007 * 0.5);

	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_008", s_910_00_008);


	//////////////////////////////////////////////////////////////////////
	// 910.00.011 - Сумма социальных отчислений за индивидуального предпринимателя
	
	s_910_00_011_1 = 0;
	s_910_00_011_2 = 0;
	s_910_00_011_3 = 0;
	s_910_00_011_4 = 0;
	s_910_00_011_5 = 0;
	s_910_00_011_6 = 0;
	s_910_00_011_7 = 0;
		
	Если СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП  Тогда
		Если НЕ СтруктураРеквизитовФормы.мЕжемесячныйРасчетВзносовИОтчисленийЗаИП Тогда
			// Размер дохода для исчисления СО за ИП перерасчитываем только в случае если пользователь изменил размер дохода за период
			// или в случае если выполняется общий расчет формы
			Если ИмяОбласти = "s_910_00_001" Или ИмяОбласти = Неопределено Тогда
				s_910_00_001 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_001"); // доход для исчисления СО за ИП в 2014 году равен фактическому доходу
				
				ДоходЗаМесяц = Окр(s_910_00_001 /6);
				
				РазницаОкругления = s_910_00_001 - ДоходЗаМесяц * 6;
				
				// верхний и нижний предел для дохода ИП
				Если СтруктураРеквизитовФормы.мМесяцЗаполнения = 1 Тогда
					s_910_00_010_1 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_010_1 = Мин(s_910_00_010_1, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);

					s_910_00_010_2 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_010_2 = Мин(s_910_00_010_2, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					
					s_910_00_010_3 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_010_3 = Мин(s_910_00_010_3, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					
					s_910_00_010_4 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_010_4 = Мин(s_910_00_010_4, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					
					s_910_00_010_5 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_010_5 = Мин(s_910_00_010_5, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					
					s_910_00_010_6 = Макс(ДоходЗаМесяц + РазницаОкругления, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_010_6 = Мин(s_910_00_010_6, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);			
				ИначеЕсли СтруктураРеквизитовФормы.мМесяцЗаполнения = 2 Тогда
					s_910_00_010_2 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_010_2 = Мин(s_910_00_010_2, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					
					s_910_00_010_3 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_010_3 = Мин(s_910_00_010_3, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					
					s_910_00_010_4 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_010_4 = Мин(s_910_00_010_4, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					
					s_910_00_010_5 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_010_5 = Мин(s_910_00_010_5, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					
					s_910_00_010_6 = Макс(ДоходЗаМесяц + РазницаОкругления, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_010_6 = Мин(s_910_00_010_6, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
				ИначеЕсли СтруктураРеквизитовФормы.мМесяцЗаполнения = 3 Тогда
					s_910_00_010_3 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_010_3 = Мин(s_910_00_010_3, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					
					s_910_00_010_4 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_010_4 = Мин(s_910_00_010_4, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					
					s_910_00_010_5 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_010_5 = Мин(s_910_00_010_5, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					
					s_910_00_010_6 = Макс(ДоходЗаМесяц + РазницаОкругления, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_010_6 = Мин(s_910_00_010_6, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
				ИначеЕсли СтруктураРеквизитовФормы.мМесяцЗаполнения = 4 Тогда
					s_910_00_010_4 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_010_4 = Мин(s_910_00_010_4, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					
					s_910_00_010_5 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_010_5 = Мин(s_910_00_010_5, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					
					s_910_00_010_6 = Макс(ДоходЗаМесяц + РазницаОкругления, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_010_6 = Мин(s_910_00_010_6, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
				ИначеЕсли СтруктураРеквизитовФормы.мМесяцЗаполнения = 5 Тогда
					s_910_00_010_5 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_010_5 = Мин(s_910_00_010_5, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					
					s_910_00_010_6 = Макс(ДоходЗаМесяц + РазницаОкругления, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_010_6 = Мин(s_910_00_010_6, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
				ИначеЕсли СтруктураРеквизитовФормы.мМесяцЗаполнения = 6 Тогда
					s_910_00_010_6 = Макс(ДоходЗаМесяц + РазницаОкругления, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_010_6 = Мин(s_910_00_010_6, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
				КонецЕсли;
				Если ?(СтруктураРеквизитовФормы.Свойство("мИППенсионер"), СтруктураРеквизитовФормы.мИППенсионер, Ложь) Тогда
					Если СтруктураРеквизитовФормы.мМесяцИППенсионер < 2 Тогда 
						s_910_00_010_1 = 0;
						s_910_00_010_2 = 0;
						s_910_00_010_3 = 0;
						s_910_00_010_4 = 0;
						s_910_00_010_5 = 0;
						s_910_00_010_6 = 0;
					ИначеЕсли СтруктураРеквизитовФормы.мМесяцИППенсионер = 2 Тогда 
						s_910_00_010_2 = 0;
						s_910_00_010_3 = 0;
						s_910_00_010_4 = 0;
						s_910_00_010_5 = 0;
						s_910_00_010_6 = 0;
					ИначеЕсли СтруктураРеквизитовФормы.мМесяцИППенсионер = 3 Тогда
						s_910_00_010_3 = 0;
						s_910_00_010_4 = 0;
						s_910_00_010_5 = 0;
						s_910_00_010_6 = 0;
					ИначеЕсли СтруктураРеквизитовФормы.мМесяцИППенсионер = 4 Тогда
						s_910_00_010_4 = 0;
						s_910_00_010_5 = 0;
						s_910_00_010_6 = 0;
					ИначеЕсли СтруктураРеквизитовФормы.мМесяцИППенсионер = 5 Тогда
						s_910_00_010_5 = 0;
						s_910_00_010_6 = 0;
					ИначеЕсли СтруктураРеквизитовФормы.мМесяцИППенсионер = 6 Тогда
						s_910_00_010_6 = 0;
					КонецЕсли;
				КонецЕсли;
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_1", s_910_00_010_1);
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_2", s_910_00_010_2);
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_3", s_910_00_010_3);
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_4", s_910_00_010_4);
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_5", s_910_00_010_5);
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_6", s_910_00_010_6);

			ИначеЕсли ИмяОбласти = "s_910_00_010_1" 
				ИЛИ ИмяОбласти = "s_910_00_010_2"
				ИЛИ ИмяОбласти = "s_910_00_010_3" 
				ИЛИ ИмяОбласти = "s_910_00_010_4"
				ИЛИ ИмяОбласти = "s_910_00_010_5"
				ИЛИ ИмяОбласти = "s_910_00_010_6" Тогда
				
				s_910_00_010_1 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_010_1");
				s_910_00_010_2 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_010_2");
				s_910_00_010_3 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_010_3");
				s_910_00_010_4 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_010_4");
				s_910_00_010_5 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_010_5");
				s_910_00_010_6 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_010_6");
				
				// верхний и нижний предел для дохода ИП
				Если СтруктураРеквизитовФормы.мМесяцЗаполнения = 1 Тогда
					s_910_00_010_1 = ?(s_910_00_010_1 = 0, 0, Макс(s_910_00_010_1, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_010_1 = ?(s_910_00_010_1 = 0, 0, Мин(s_910_00_010_1, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_1", s_910_00_010_1);
					s_910_00_010_2 = ?(s_910_00_010_2 = 0, 0, Макс(s_910_00_010_2, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_010_2 = ?(s_910_00_010_2 = 0, 0, Мин(s_910_00_010_2, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_2", s_910_00_010_2);
					s_910_00_010_3 = ?(s_910_00_010_3 = 0, 0, Макс(s_910_00_010_3, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_010_3 = ?(s_910_00_010_3 = 0, 0, Мин(s_910_00_010_3, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_3", s_910_00_010_3);
					s_910_00_010_4 = ?(s_910_00_010_4 = 0, 0, Макс(s_910_00_010_4, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_010_4 = ?(s_910_00_010_4 = 0, 0, Мин(s_910_00_010_4, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_4", s_910_00_010_4);
					s_910_00_010_5 = ?(s_910_00_010_5 = 0, 0, Макс(s_910_00_010_5, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_010_5 = ?(s_910_00_010_5 = 0, 0, Мин(s_910_00_010_5, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_5", s_910_00_010_5);
					s_910_00_010_6 = ?(s_910_00_010_6 = 0, 0, Макс(s_910_00_010_6, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_010_6 = ?(s_910_00_010_6 = 0, 0, Мин(s_910_00_010_6, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_6", s_910_00_010_6);
				ИначеЕсли СтруктураРеквизитовФормы.мМесяцЗаполнения = 2 Тогда
					s_910_00_010_2 = ?(s_910_00_010_2 = 0, 0, Макс(s_910_00_010_2, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_010_2 = ?(s_910_00_010_2 = 0, 0, Мин(s_910_00_010_2, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_2", s_910_00_010_2);
					s_910_00_010_3 = ?(s_910_00_010_3 = 0, 0, Макс(s_910_00_010_3, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_010_3 = ?(s_910_00_010_3 = 0, 0, Мин(s_910_00_010_3, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_3", s_910_00_010_3);
					s_910_00_010_4 = ?(s_910_00_010_4 = 0, 0, Макс(s_910_00_010_4, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_010_4 = ?(s_910_00_010_4 = 0, 0, Мин(s_910_00_010_4, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_4", s_910_00_010_4);
					s_910_00_010_5 = ?(s_910_00_010_5 = 0, 0, Макс(s_910_00_010_5, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_010_5 = ?(s_910_00_010_5 = 0, 0, Мин(s_910_00_010_5, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_5", s_910_00_010_5);
					s_910_00_010_6 = ?(s_910_00_010_6 = 0, 0, Макс(s_910_00_010_6, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_010_6 = ?(s_910_00_010_6 = 0, 0, Мин(s_910_00_010_6, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_6", s_910_00_010_6);
				ИначеЕсли СтруктураРеквизитовФормы.мМесяцЗаполнения = 3 Тогда
					s_910_00_010_3 = ?(s_910_00_010_3 = 0, 0, Макс(s_910_00_010_3, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_010_3 = ?(s_910_00_010_3 = 0, 0, Мин(s_910_00_010_3, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_3", s_910_00_010_3);
					s_910_00_010_4 = ?(s_910_00_010_4 = 0, 0, Макс(s_910_00_010_4, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_010_4 = ?(s_910_00_010_4 = 0, 0, Мин(s_910_00_010_4, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_4", s_910_00_010_4);
					s_910_00_010_5 = ?(s_910_00_010_5 = 0, 0, Макс(s_910_00_010_5, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_010_5 = ?(s_910_00_010_5 = 0, 0, Мин(s_910_00_010_5, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_5", s_910_00_010_5);
					s_910_00_010_6 = ?(s_910_00_010_6 = 0, 0, Макс(s_910_00_010_6, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_010_6 = ?(s_910_00_010_6 = 0, 0, Мин(s_910_00_010_6, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_6", s_910_00_010_6);
				ИначеЕсли СтруктураРеквизитовФормы.мМесяцЗаполнения = 4 Тогда
					s_910_00_010_4 = ?(s_910_00_010_4 = 0, 0, Макс(s_910_00_010_4, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_010_4 = ?(s_910_00_010_4 = 0, 0, Мин(s_910_00_010_4, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_4", s_910_00_010_4);
					s_910_00_010_5 = ?(s_910_00_010_5 = 0, 0, Макс(s_910_00_010_5, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_010_5 = ?(s_910_00_010_5 = 0, 0, Мин(s_910_00_010_5, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_5", s_910_00_010_5);
					s_910_00_010_6 = ?(s_910_00_010_6 = 0, 0, Макс(s_910_00_010_6, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_010_6 = ?(s_910_00_010_6 = 0, 0, Мин(s_910_00_010_6, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_6", s_910_00_010_6);
				ИначеЕсли СтруктураРеквизитовФормы.мМесяцЗаполнения = 5 Тогда
					s_910_00_010_5 = ?(s_910_00_010_5 = 0, 0, Макс(s_910_00_010_5, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_010_5 = ?(s_910_00_010_5 = 0, 0, Мин(s_910_00_010_5, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_5", s_910_00_010_5);
					s_910_00_010_6 = ?(s_910_00_010_6 = 0, 0, Макс(s_910_00_010_6, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_010_6 = ?(s_910_00_010_6 = 0, 0, Мин(s_910_00_010_6, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_6", s_910_00_010_6);
				ИначеЕсли СтруктураРеквизитовФормы.мМесяцЗаполнения = 6 Тогда
					s_910_00_010_6 = ?(s_910_00_010_6 = 0, 0, Макс(s_910_00_010_6, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_010_6 = ?(s_910_00_010_6 = 0, 0, Мин(s_910_00_010_6, 7*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_6", s_910_00_010_6);
				КонецЕсли;
			КонецЕсли;
		
			s_910_00_010_1 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_010_1");
			s_910_00_010_2 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_010_2");
			s_910_00_010_3 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_010_3");
			s_910_00_010_4 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_010_4");
			s_910_00_010_5 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_010_5");
			s_910_00_010_6 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_010_6");
			
			s_910_00_010_7 = s_910_00_010_1 + s_910_00_010_2 + s_910_00_010_3 + s_910_00_010_4 + s_910_00_010_5 + s_910_00_010_6;
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_7", s_910_00_010_7);

			// Получим правило округления, действовавшее в периоде 
			ПравилоОкругления = ПроведениеРасчетовСервер.ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
			// СО уплачиваются с дохода не более 7 МЗП за один месяц
			Если s_910_00_010_1 > 0 Тогда
				s_910_00_011_1 = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Мин(s_910_00_010_1, 7 * СтруктураРеквизитовФормы.мРазмерМЗП) * СтруктураРеквизитовФормы.мСтавкаСО / 100, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
			КонецЕсли;
			
			Если s_910_00_010_2 > 0 Тогда
				s_910_00_011_2 = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Мин(s_910_00_010_2, 7 * СтруктураРеквизитовФормы.мРазмерМЗП) * СтруктураРеквизитовФормы.мСтавкаСО / 100, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
			КонецЕсли;
			
			Если s_910_00_010_3 > 0 Тогда
				s_910_00_011_3 = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Мин(s_910_00_010_3, 7 * СтруктураРеквизитовФормы.мРазмерМЗП) * СтруктураРеквизитовФормы.мСтавкаСО / 100, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
			КонецЕсли;
			
			Если s_910_00_010_4 > 0 Тогда
				s_910_00_011_4 = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Мин(s_910_00_010_4, 7 * СтруктураРеквизитовФормы.мРазмерМЗП) * СтруктураРеквизитовФормы.мСтавкаСО / 100, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
			КонецЕсли;
			
			Если s_910_00_010_5 > 0 Тогда
				s_910_00_011_5 = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Мин(s_910_00_010_5, 7 * СтруктураРеквизитовФормы.мРазмерМЗП) * СтруктураРеквизитовФормы.мСтавкаСО / 100, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
			КонецЕсли;
			
			Если s_910_00_010_6 > 0 Тогда
				s_910_00_011_6 = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Мин(s_910_00_010_6, 7 * СтруктураРеквизитовФормы.мРазмерМЗП) * СтруктураРеквизитовФормы.мСтавкаСО / 100, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
			КонецЕсли;
			
			s_910_00_011_7 = Окр(s_910_00_011_1) + Окр(s_910_00_011_2) + Окр(s_910_00_011_3) + Окр(s_910_00_011_4) + Окр(s_910_00_011_5) + Окр(s_910_00_011_6);
			
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_011_1", Окр(s_910_00_011_1));
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_011_2", Окр(s_910_00_011_2));
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_011_3", Окр(s_910_00_011_3));
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_011_4", Окр(s_910_00_011_4));
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_011_5", Окр(s_910_00_011_5));
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_011_6", Окр(s_910_00_011_6));
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_011_7", s_910_00_011_7);
		Иначе
			s_910_00_010_1 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_010_1");
			s_910_00_010_2 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_010_2");
			s_910_00_010_3 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_010_3");
			s_910_00_010_4 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_010_4");
			s_910_00_010_5 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_010_5");
			s_910_00_010_6 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_010_6");
			
			s_910_00_010_7 = s_910_00_010_1 + s_910_00_010_2 + s_910_00_010_3 + s_910_00_010_4 + s_910_00_010_5 + s_910_00_010_6;
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_010_7", s_910_00_010_7);
			
			s_910_00_011_1 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_011_1");
			s_910_00_011_2 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_011_2");
			s_910_00_011_3 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_011_3");
			s_910_00_011_4 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_011_4");
			s_910_00_011_5 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_011_5");
			s_910_00_011_6 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_011_6");
			
			s_910_00_011_7 = s_910_00_011_1 + s_910_00_011_2 + s_910_00_011_3 + s_910_00_011_4 + s_910_00_011_5 + s_910_00_011_6;
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_011_7", s_910_00_011_7);
			
		КонецЕсли;
	КонецЕсли;	
	
	//////////////////////////////////////////////////////////////////////
	// 910.00.015 - Сумма ОПВ за индивидуального предпринимателя
	s_910_00_013_1 = 0;
	s_910_00_013_2 = 0;
	s_910_00_013_3 = 0;
	s_910_00_013_4 = 0;
	s_910_00_013_5 = 0;
	s_910_00_013_6 = 0;
	s_910_00_013_7 = 0;
	
	//////////////////////////////////////////////////////////////////////
	// 910.00.016 - Сумма ВОСМС за индивидуального предпринимателя
	s_910_00_015_1 = 0;
	s_910_00_015_2 = 0;
	s_910_00_015_3 = 0;
	s_910_00_015_4 = 0;
	s_910_00_015_5 = 0;
	s_910_00_015_6 = 0;
	s_910_00_015_7 = 0;
	
	Если СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП Тогда
		Если НЕ СтруктураРеквизитовФормы.мЕжемесячныйРасчетВзносовИОтчисленийЗаИП Тогда
			Если ИмяОбласти = "s_910_00_001" Или ИмяОбласти = Неопределено Тогда
				s_910_00_001 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_001"); // доход для исчисления СО за ИП в 2014 году равен фактическому доходу
				
				ДоходЗаМесяц = Окр(s_910_00_001 /6);
				
				РазницаОкругления = s_910_00_001 - ДоходЗаМесяц * 6;
				
				// ОПВ берутся с дохода не более 50 МЗП за один месяц и не менее МЗП за один месяц
				Если СтруктураРеквизитовФормы.мМесяцЗаполнения = 1 Тогда
					s_910_00_012_1 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_012_1 = Мин(s_910_00_012_1, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					
					s_910_00_012_2 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_012_2 = Мин(s_910_00_012_2, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					
					s_910_00_012_3 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_012_3 = Мин(s_910_00_012_3, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					
					s_910_00_012_4 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_012_4 = Мин(s_910_00_012_4, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					
					s_910_00_012_5 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_012_5 = Мин(s_910_00_012_5, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					
					s_910_00_012_6 = Макс(ДоходЗаМесяц + РазницаОкругления, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_012_6 = Мин(s_910_00_012_6, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);		
				ИначеЕсли СтруктураРеквизитовФормы.мМесяцЗаполнения = 2 Тогда
					s_910_00_012_2 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_012_2 = Мин(s_910_00_012_2, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);

					s_910_00_012_3 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_012_3 = Мин(s_910_00_012_3, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					
					s_910_00_012_4 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_012_4 = Мин(s_910_00_012_4, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);

					s_910_00_012_5 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_012_5 = Мин(s_910_00_012_5, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);

					s_910_00_012_6 = Макс(ДоходЗаМесяц + РазницаОкругления, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_012_6 = Мин(s_910_00_012_6, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
				ИначеЕсли СтруктураРеквизитовФормы.мМесяцЗаполнения = 3 Тогда
					s_910_00_012_3 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_012_3 = Мин(s_910_00_012_3, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);

					s_910_00_012_4 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_012_4 = Мин(s_910_00_012_4, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					
					s_910_00_012_5 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_012_5 = Мин(s_910_00_012_5, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					
					s_910_00_012_6 = Макс(ДоходЗаМесяц + РазницаОкругления, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_012_6 = Мин(s_910_00_012_6, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);	
				ИначеЕсли СтруктураРеквизитовФормы.мМесяцЗаполнения = 4 Тогда
					s_910_00_012_4 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_012_4 = Мин(s_910_00_012_4, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					
					s_910_00_012_5 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_012_5 = Мин(s_910_00_012_5, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					
					s_910_00_012_6 = Макс(ДоходЗаМесяц + РазницаОкругления, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_012_6 = Мин(s_910_00_012_6, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
				ИначеЕсли СтруктураРеквизитовФормы.мМесяцЗаполнения = 5 Тогда
					s_910_00_012_5 = Макс(ДоходЗаМесяц, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_012_5 = Мин(s_910_00_012_5, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					
					s_910_00_012_6 = Макс(ДоходЗаМесяц + РазницаОкругления, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_012_6 = Мин(s_910_00_012_6, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
				ИначеЕсли СтруктураРеквизитовФормы.мМесяцЗаполнения = 6 Тогда 
					s_910_00_012_6 = Макс(ДоходЗаМесяц + РазницаОкругления, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
					s_910_00_012_6 = Мин(s_910_00_012_6, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения);
				КонецЕсли;
				Если ?(СтруктураРеквизитовФормы.Свойство("мИППенсионер"), СтруктураРеквизитовФормы.мИППенсионер, Ложь) Тогда
					Если СтруктураРеквизитовФормы.мМесяцИППенсионер < 2 Тогда 
						s_910_00_012_1 = 0;
						s_910_00_012_2 = 0;
						s_910_00_012_3 = 0;
						s_910_00_012_4 = 0;
						s_910_00_012_5 = 0;
						s_910_00_012_6 = 0;
					ИначеЕсли СтруктураРеквизитовФормы.мМесяцИППенсионер = 2 Тогда 
						s_910_00_012_2 = 0;
						s_910_00_012_3 = 0;
						s_910_00_012_4 = 0;
						s_910_00_012_5 = 0;
						s_910_00_012_6 = 0;
					ИначеЕсли СтруктураРеквизитовФормы.мМесяцИППенсионер = 3 Тогда
						s_910_00_012_3 = 0;
						s_910_00_012_4 = 0;
						s_910_00_012_5 = 0;
						s_910_00_012_6 = 0;
					ИначеЕсли СтруктураРеквизитовФормы.мМесяцИППенсионер = 4 Тогда
						s_910_00_012_4 = 0;
						s_910_00_012_5 = 0;
						s_910_00_012_6 = 0;
					ИначеЕсли СтруктураРеквизитовФормы.мМесяцИППенсионер = 5 Тогда
						s_910_00_012_5 = 0;
						s_910_00_012_6 = 0;
					ИначеЕсли СтруктураРеквизитовФормы.мМесяцИППенсионер = 6 Тогда
						s_910_00_012_6 = 0;
					КонецЕсли;
				КонецЕсли;
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_1", s_910_00_012_1);
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_2", s_910_00_012_2);
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_3", s_910_00_012_3);
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_4", s_910_00_012_4);
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_5", s_910_00_012_5);
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_6", s_910_00_012_6);
				
			ИначеЕсли ИмяОбласти = "s_910_00_012_1" 
				ИЛИ ИмяОбласти = "s_910_00_012_2"
				ИЛИ ИмяОбласти = "s_910_00_012_3" 
				ИЛИ ИмяОбласти = "s_910_00_012_4"
				ИЛИ ИмяОбласти = "s_910_00_012_5"
				ИЛИ ИмяОбласти = "s_910_00_012_6" Тогда
				
				s_910_00_012_1 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_012_1"); // доход для исчисления ОПВ за ИП
				s_910_00_012_2 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_012_2");
				s_910_00_012_3 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_012_3");
				s_910_00_012_4 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_012_4");
				s_910_00_012_5 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_012_5");
				s_910_00_012_6 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_012_6");
				
				// ОПВ берутся с дохода не более 50 МЗП за один месяц и не менее МЗП за один месяц
				Если СтруктураРеквизитовФормы.мМесяцЗаполнения = 1 Тогда
					s_910_00_012_1 = ?(s_910_00_012_1 = 0, 0, Макс(s_910_00_012_1, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_012_1 = ?(s_910_00_012_1 = 0, 0, Мин(s_910_00_012_1, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_1", s_910_00_012_1);
					s_910_00_012_2 = ?(s_910_00_012_2 = 0, 0, Макс(s_910_00_012_2, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_012_2 = ?(s_910_00_012_2 = 0, 0, Мин(s_910_00_012_2, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_2", s_910_00_012_2);
					s_910_00_012_3 = ?(s_910_00_012_3 = 0, 0, Макс(s_910_00_012_3, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_012_3 = ?(s_910_00_012_3 = 0, 0, Мин(s_910_00_012_3, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_3", s_910_00_012_3);
					s_910_00_012_4 = ?(s_910_00_012_4 = 0, 0, Макс(s_910_00_012_4, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_012_4 = ?(s_910_00_012_4 = 0, 0, Мин(s_910_00_012_4, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_4", s_910_00_012_4);
					s_910_00_012_5 = ?(s_910_00_012_5 = 0, 0, Макс(s_910_00_012_5, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_012_5 = ?(s_910_00_012_5 = 0, 0, Мин(s_910_00_012_5, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_5", s_910_00_012_5);
					s_910_00_012_6 = ?(s_910_00_012_6 = 0, 0, Макс(s_910_00_012_6, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_012_6 = ?(s_910_00_012_6 = 0, 0, Мин(s_910_00_012_6, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_6", s_910_00_012_6);
				ИначеЕсли СтруктураРеквизитовФормы.мМесяцЗаполнения = 2 Тогда
					s_910_00_012_2 = ?(s_910_00_012_2 = 0, 0, Макс(s_910_00_012_2, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_012_2 = ?(s_910_00_012_2 = 0, 0, Мин(s_910_00_012_2, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_2", s_910_00_012_2);
					s_910_00_012_3 = ?(s_910_00_012_3 = 0, 0, Макс(s_910_00_012_3, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_012_3 = ?(s_910_00_012_3 = 0, 0, Мин(s_910_00_012_3, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_3", s_910_00_012_3);
					s_910_00_012_4 = ?(s_910_00_012_4 = 0, 0, Макс(s_910_00_012_4, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_012_4 = ?(s_910_00_012_4 = 0, 0, Мин(s_910_00_012_4, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_4", s_910_00_012_4);
					s_910_00_012_5 = ?(s_910_00_012_5 = 0, 0, Макс(s_910_00_012_5, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_012_5 = ?(s_910_00_012_5 = 0, 0, Мин(s_910_00_012_5, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_5", s_910_00_012_5);
					s_910_00_012_6 = ?(s_910_00_012_6 = 0, 0, Макс(s_910_00_012_6, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_012_6 = ?(s_910_00_012_6 = 0, 0, Мин(s_910_00_012_6, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_6", s_910_00_012_6);
				ИначеЕсли СтруктураРеквизитовФормы.мМесяцЗаполнения = 3 Тогда
					s_910_00_012_3 = ?(s_910_00_012_3 = 0, 0, Макс(s_910_00_012_3, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_012_3 = ?(s_910_00_012_3 = 0, 0, Мин(s_910_00_012_3, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_3", s_910_00_012_3);
					s_910_00_012_4 = ?(s_910_00_012_4 = 0, 0, Макс(s_910_00_012_4, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_012_4 = ?(s_910_00_012_4 = 0, 0, Мин(s_910_00_012_4, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_4", s_910_00_012_4);
					s_910_00_012_5 = ?(s_910_00_012_5 = 0, 0, Макс(s_910_00_012_5, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_012_5 = ?(s_910_00_012_5 = 0, 0, Мин(s_910_00_012_5, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_5", s_910_00_012_5);
					s_910_00_012_6 = ?(s_910_00_012_6 = 0, 0, Макс(s_910_00_012_6, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_012_6 = ?(s_910_00_012_6 = 0, 0, Мин(s_910_00_012_6, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_6", s_910_00_012_6);
				ИначеЕсли СтруктураРеквизитовФормы.мМесяцЗаполнения = 4 Тогда
					s_910_00_012_4 = ?(s_910_00_012_4 = 0, 0, Макс(s_910_00_012_4, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_012_4 = ?(s_910_00_012_4 = 0, 0, Мин(s_910_00_012_4, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_4", s_910_00_012_4);
					s_910_00_012_5 = ?(s_910_00_012_5 = 0, 0, Макс(s_910_00_012_5, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_012_5 = ?(s_910_00_012_5 = 0, 0, Мин(s_910_00_012_5, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_5", s_910_00_012_5);
					s_910_00_012_6 = ?(s_910_00_012_6 = 0, 0, Макс(s_910_00_012_6, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_012_6 = ?(s_910_00_012_6 = 0, 0, Мин(s_910_00_012_6, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_6", s_910_00_012_6);
				ИначеЕсли СтруктураРеквизитовФормы.мМесяцЗаполнения = 5 Тогда
					s_910_00_012_5 = ?(s_910_00_012_5 = 0, 0, Макс(s_910_00_012_5, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_012_5 = ?(s_910_00_012_5 = 0, 0, Мин(s_910_00_012_5, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_5", s_910_00_012_5);
					s_910_00_012_6 = ?(s_910_00_012_6 = 0, 0, Макс(s_910_00_012_6, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_012_6 = ?(s_910_00_012_6 = 0, 0, Мин(s_910_00_012_6, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_6", s_910_00_012_6);
				ИначеЕсли СтруктураРеквизитовФормы.мМесяцЗаполнения = 6 Тогда 
					s_910_00_012_6 = ?(s_910_00_012_6 = 0, 0, Макс(s_910_00_012_6, СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					s_910_00_012_6 = ?(s_910_00_012_6 = 0, 0, Мин(s_910_00_012_6, 50*СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения));
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_6", s_910_00_012_6);
				КонецЕсли;
				
			КонецЕсли;
			
			s_910_00_012_1 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_012_1"); // доход для исчисления ОПВ за ИП
			s_910_00_012_2 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_012_2");
			s_910_00_012_3 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_012_3");
			s_910_00_012_4 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_012_4");
			s_910_00_012_5 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_012_5");
			s_910_00_012_6 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_012_6");

			s_910_00_012_7 = s_910_00_012_1 + s_910_00_012_2 + s_910_00_012_3 + s_910_00_012_4 + s_910_00_012_5 + s_910_00_012_6;
			
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_7", s_910_00_012_7);

			// Получим правило округления, действовавшее в периоде 
			ПравилоОкругления = ПроведениеРасчетовСервер.ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
			// ОПВ берутся с дохода не более 50 МЗП за один месяц
			Если s_910_00_012_1 > 0 Тогда
				s_910_00_013_1 = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(s_910_00_012_1 * СтруктураРеквизитовФормы.мСтавкаОПВ / 100, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
			КонецЕсли;
			
			Если s_910_00_012_2 > 0 Тогда
				s_910_00_013_2 = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(s_910_00_012_2 * СтруктураРеквизитовФормы.мСтавкаОПВ / 100, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
			КонецЕсли;
			
			Если s_910_00_012_3 > 0 Тогда
				s_910_00_013_3 = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(s_910_00_012_3 * СтруктураРеквизитовФормы.мСтавкаОПВ / 100, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
			КонецЕсли;
			
			Если s_910_00_012_4 > 0 Тогда
				s_910_00_013_4 = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(s_910_00_012_4 * СтруктураРеквизитовФормы.мСтавкаОПВ / 100, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
			КонецЕсли;
			
			Если s_910_00_012_5 > 0 Тогда
				s_910_00_013_5 = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(s_910_00_012_5 * СтруктураРеквизитовФормы.мСтавкаОПВ / 100, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
			КонецЕсли;
			
			Если s_910_00_012_6 > 0 Тогда
				s_910_00_013_6 = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(s_910_00_012_6 * СтруктураРеквизитовФормы.мСтавкаОПВ / 100, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
			КонецЕсли;
			
			s_910_00_013_7 = s_910_00_013_1 + s_910_00_013_2 + s_910_00_013_3 + s_910_00_013_4 + s_910_00_013_5 + s_910_00_013_6;
			
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_013_1", s_910_00_013_1);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_013_2", s_910_00_013_2);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_013_3", s_910_00_013_3);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_013_4", s_910_00_013_4);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_013_5", s_910_00_013_5);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_013_6", s_910_00_013_6);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_013_7", s_910_00_013_7);
			
			// ОПВ берутся с дохода не более 50 МЗП за один месяц
			Если s_910_00_012_1 > 0 Тогда
				s_910_00_013_1 = Окр(s_910_00_012_1 * СтруктураРеквизитовФормы.мСтавкаОПВ / 100);
			КонецЕсли;
			
			Если s_910_00_012_2 > 0 Тогда
				s_910_00_013_2 = Окр(s_910_00_012_2 * СтруктураРеквизитовФормы.мСтавкаОПВ / 100);
			КонецЕсли;
			
			Если s_910_00_012_3 > 0 Тогда
				s_910_00_013_3 = Окр(s_910_00_012_3 * СтруктураРеквизитовФормы.мСтавкаОПВ / 100);
			КонецЕсли;
			
			Если s_910_00_012_4 > 0 Тогда
				s_910_00_013_4 = Окр(s_910_00_012_4 * СтруктураРеквизитовФормы.мСтавкаОПВ / 100);
			КонецЕсли;
			
			Если s_910_00_012_5 > 0 Тогда
				s_910_00_013_5 = Окр(s_910_00_012_5 * СтруктураРеквизитовФормы.мСтавкаОПВ / 100);
			КонецЕсли;
			
			Если s_910_00_012_6 > 0 Тогда
				s_910_00_013_6 = Окр(s_910_00_012_6 * СтруктураРеквизитовФормы.мСтавкаОПВ / 100);
			КонецЕсли;
			
			s_910_00_013_7 = s_910_00_013_1 + s_910_00_013_2 + s_910_00_013_3 + s_910_00_013_4 + s_910_00_013_5 + s_910_00_013_6;
			
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_013_1", s_910_00_013_1);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_013_2", s_910_00_013_2);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_013_3", s_910_00_013_3);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_013_4", s_910_00_013_4);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_013_5", s_910_00_013_5);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_013_6", s_910_00_013_6);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_013_7", s_910_00_013_7);
			
			ВОСМС = Окр(1.4 * СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения*СтруктураРеквизитовФормы.мСтавкаВОСМС/100);
			
			Если СтруктураРеквизитовФормы.мИППенсионер Тогда
				мМесяцИППенсионер = СтруктураРеквизитовФормы.мМесяцИППенсионер;
				ВОСМСЗаПериод = 0;
				Для Мес = 1 По 6 Цикл
					ВОСМСЗаМесяц = 0;
					Если мМесяцИППенсионер <> 0 И Мес < мМесяцИППенсионер Тогда
						ВОСМСЗаМесяц = ВОСМС;
						ВОСМСЗаПериод = ВОСМСЗаПериод + ВОСМС;
					КонецЕсли;
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_015_" + Мес, ВОСМСЗаМесяц);
				КонецЦикла;
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_015_7", ВОСМСЗаПериод);
			Иначе
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_015_1", ВОСМС);
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_015_2", ВОСМС);
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_015_3", ВОСМС);
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_015_4", ВОСМС);
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_015_5", ВОСМС);
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_015_6", ВОСМС);
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_015_7", ВОСМС*6);
			КонецЕсли;
			
			//исчисления ВОСМС
			ОбъектИсчисленияВОСМС = 1.4 * СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения * 6;
			
			//исчисления ВОСМС
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "ОбъектИсчисленияВОСМС", ОбъектИсчисленияВОСМС);
			
		Иначе
			s_910_00_012_1 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_012_1"); // доход для исчисления ОПВ за ИП
			s_910_00_012_2 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_012_2");
			s_910_00_012_3 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_012_3");
			s_910_00_012_4 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_012_4");
			s_910_00_012_5 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_012_5");
			s_910_00_012_6 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_012_6");
			s_910_00_012_7 = s_910_00_012_1 + s_910_00_012_2 + s_910_00_012_3 + s_910_00_012_4 + s_910_00_012_5 + s_910_00_012_6;	
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_012_7", s_910_00_012_7);
			
			s_910_00_013_1 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_013_1"); // доход для исчисления ОПВ за ИП
			s_910_00_013_2 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_013_2");
			s_910_00_013_3 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_013_3");
			s_910_00_013_4 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_013_4");
			s_910_00_013_5 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_013_5");
			s_910_00_013_6 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_013_6");
			s_910_00_013_7 = s_910_00_013_1 + s_910_00_013_2 + s_910_00_013_3 + s_910_00_013_4 + s_910_00_013_5 + s_910_00_013_6;
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_013_7", s_910_00_013_7);
			
			s_910_00_015_1 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_015_1");
			s_910_00_015_2 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_015_2");
			s_910_00_015_3 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_015_3");
			s_910_00_015_4 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_015_4");
			s_910_00_015_5 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_015_5");
			s_910_00_015_6 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_015_6");
			
			s_910_00_015_7 = s_910_00_015_1 + s_910_00_015_2 + s_910_00_015_3 + s_910_00_015_4 + s_910_00_015_5 + s_910_00_015_6;
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_015_7", s_910_00_015_7);
			
			//исчисления ВОСМС
			СтавкаВОСМС = ?(СтруктураРеквизитовФормы.мСтавкаВОСМС = 0, 100, СтруктураРеквизитовФормы.мСтавкаВОСМС);
			ОбъектИсчисленияВОСМС = s_910_00_015_7 / СтавкаВОСМС * 100;
			
			//исчисления ВОСМС
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "ОбъектИсчисленияВОСМС", ОбъектИсчисленияВОСМС);
			
		КонецЕсли;
	КонецЕсли;

	// начисленные доходы	
	s_910_00_016_1 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_016_1");
	s_910_00_016_2 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_016_2");
	s_910_00_016_3 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_016_3");
	s_910_00_016_4 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_016_4");
	s_910_00_016_5 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_016_5");
	s_910_00_016_6 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_016_6");
	
	s_910_00_016_7 = s_910_00_016_1 + s_910_00_016_2 + s_910_00_016_3 + s_910_00_016_4 + s_910_00_016_5 + s_910_00_016_6;
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_016_7", s_910_00_016_7);
	
	//Доходы для исчисления ЕП
	s_910_00_017_1 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_017_1");
	s_910_00_017_2 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_017_2");
	s_910_00_017_3 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_017_3");
	s_910_00_017_4 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_017_4");
	s_910_00_017_5 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_017_5");
	s_910_00_017_6 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_017_6");
	
	s_910_00_017_7 = s_910_00_017_1 + s_910_00_017_2 + s_910_00_017_3 + s_910_00_017_4 + s_910_00_017_5 + s_910_00_017_6;
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_017_7", s_910_00_017_7);
	
	//Сумма ЕП
	s_910_00_018_1 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_018_1");
	s_910_00_018_2 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_018_2");
	s_910_00_018_3 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_018_3");
	s_910_00_018_4 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_018_4");
	s_910_00_018_5 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_018_5");
	s_910_00_018_6 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_018_6");
	
	s_910_00_018_7 = s_910_00_018_1 + s_910_00_018_2 + s_910_00_018_3 + s_910_00_018_4 + s_910_00_018_5 + s_910_00_018_6;
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_018_7", s_910_00_018_7);
	
	
	// сумма ИПН, подлежащая перечислению в бюджет	
	// По гражданам РК	
	s_910_00_019_1 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_019_1");
	s_910_00_019_2 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_019_2");
	s_910_00_019_3 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_019_3");
	s_910_00_019_4 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_019_4");
	s_910_00_019_5 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_019_5");
	s_910_00_019_6 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_019_6");
	
	s_910_00_019_7 = s_910_00_019_1 + s_910_00_019_2 + s_910_00_019_3 + s_910_00_019_4 + s_910_00_019_5 + s_910_00_019_6;
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_019_7", s_910_00_019_7);
	
	// По иностранцам	
	s_910_00_020_1 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_020_1");
	s_910_00_020_2 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_020_2");
	s_910_00_020_3 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_020_3");
	s_910_00_020_4 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_020_4");
	s_910_00_020_5 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_020_5");
	s_910_00_020_6 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_020_6");
	
	s_910_00_020_7 = s_910_00_020_1 + s_910_00_020_2 + s_910_00_020_3 + s_910_00_020_4 + s_910_00_020_5 + s_910_00_020_6;
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_020_7", s_910_00_020_7);
	
	
	// Сумма социальных отчислений, к уплате
	s_910_00_021_1 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_021_1");
	s_910_00_021_2 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_021_2");
	s_910_00_021_3 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_021_3");
	s_910_00_021_4 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_021_4");
	s_910_00_021_5 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_021_5");
	s_910_00_021_6 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_021_6");
	
	s_910_00_021_7 = s_910_00_021_1 + s_910_00_021_2 + s_910_00_021_3 + s_910_00_021_4 + s_910_00_021_5 + s_910_00_021_6;
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_021_7", s_910_00_021_7);

	//////////////////////////////////////////////////////////////////////
	// 910.00.009 - Сумма социального налога, подлежащая уплате в бюджет (за вычетом социальных отчислений)

	s_910_00_021_7 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_021_7"); // сумма социальных отчислений за наемных работников
	s_910_00_011_7 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_011_7");
	
	//Добавлена норма, что в случае, если предприниматель является плательщиком ЕП, то сумма СН уменьшается на сумма социальных отчислений за себя. 
	ПлательщикЕП = ?(СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж"), Истина, Ложь); 
	
    СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, "Форма910_03");
	
	ТаблицаСтрокГруппы = СтруктураФормы["Страница3"].Строки;
	СоциальныеОтчисленияЕП = ТаблицаСтрокГруппы.ВыгрузитьКолонку("Ф910_03_J"); 
	
	СуммаСоциальныеОтчисленияЕП = 0;
	
	Для Каждого Элемент Из СоциальныеОтчисленияЕП Цикл
		СуммаСоциальныеОтчисленияЕП =  СуммаСоциальныеОтчисленияЕП + ?(Элемент <> Неопределено, Элемент, 0);		
	КонецЦикла;
	
	s_910_00_009 = Окр(Макс(s_910_00_007 * 0.5 - Окр(s_910_00_011_7) - Окр(s_910_00_021_7) - Окр(СуммаСоциальныеОтчисленияЕП), 0));
	
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_009", s_910_00_009);
	
	// Сумма обязательных пенсионных взносов, к уплате
	s_910_00_022_1 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_022_1");
	s_910_00_022_2 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_022_2");
	s_910_00_022_3 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_022_3");
	s_910_00_022_4 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_022_4");
	s_910_00_022_5 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_022_5");
	s_910_00_022_6 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_022_6");
	
	s_910_00_022_7 = s_910_00_022_1 + s_910_00_022_2 + s_910_00_022_3 + s_910_00_022_4 + s_910_00_022_5 + s_910_00_022_6;
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_022_7", s_910_00_022_7);
	
	// Сумма обязательных пенсионных взносов работодателя, к уплате 
	s_910_00_023_1 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_023_1");
	s_910_00_023_2 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_023_2");
	s_910_00_023_3 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_023_3");
	s_910_00_023_4 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_023_4");
	s_910_00_023_5 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_023_5");
	s_910_00_023_6 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_023_6");
	
	s_910_00_023_7 = s_910_00_023_1 + s_910_00_023_2 + s_910_00_023_3 + s_910_00_023_4 + s_910_00_023_5 + s_910_00_023_6;
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_023_7", s_910_00_023_7);
	
	
	// Сумма обязательных профессиональных пенсионных взносов, к уплате 
	s_910_00_024_1 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_024_1");
	s_910_00_024_2 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_024_2");
	s_910_00_024_3 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_024_3");
	s_910_00_024_4 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_024_4");
	s_910_00_024_5 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_024_5");
	s_910_00_024_6 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_024_6");
	
	s_910_00_024_7 = s_910_00_024_1 + s_910_00_024_2 + s_910_00_024_3 + s_910_00_024_4 + s_910_00_024_5 + s_910_00_024_6;
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_024_7", s_910_00_024_7);


	// Сумма отчислений на обязательное социальное медицинское страхование, к уплате
	s_910_00_025_1 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_025_1");
	s_910_00_025_2 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_025_2");
	s_910_00_025_3 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_025_3");
	s_910_00_025_4 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_025_4");
	s_910_00_025_5 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_025_5");
	s_910_00_025_6 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_910_00_025_6");
	
	s_910_00_025_7 = s_910_00_025_1 + s_910_00_025_2 + s_910_00_025_3 + s_910_00_025_4 + s_910_00_025_5 + s_910_00_025_6;
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_910_00_025_7", s_910_00_025_7);

	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, КодФормы, ТаблицаДанных);
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, ЭтотОбъект.КодФормы);
		
КонецПроцедуры

&НаСервере
Функция АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, ИтоговаяЯчейка, СтруктураВходящихЯчеек, ПолеТабДока, РассчитыватьСумму = Истина)
	
	ИтЗначение = 0;
	
	Если РассчитыватьСумму Тогда
		
		ЗначИтоговойЯчейки = 0;
		
		СтруктураТекущихЗначений = Новый Структура();	
		// добавляем значения входящих ячеек
		Для Каждого Элемент Из СтруктураВходящихЯчеек Цикл
			ЗначениеЯчейки = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, Элемент.Ключ);
			СтруктураТекущихЗначений.Вставить(Элемент.Ключ, ЗначениеЯчейки);		
		КонецЦикла;
		
		Для Каждого Элемент Из СтруктураТекущихЗначений Цикл
			ЗначИтоговойЯчейки = ЗначИтоговойЯчейки + Элемент.Значение;
		КонецЦикла;
		
		// передаем полученное итоговое значение в структуру и на форму
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИтоговаяЯчейка, Окр(ЗначИтоговойЯчейки), ПолеТабДока);
		
		ИтЗначение = ЗначИтоговойЯчейки;
		
	Иначе	
		
		// получим значение итоговой ячейки
		ЗначИтоговойЯчейки = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИтоговаяЯчейка);
		
		СтруктураТекущихЗначений = Новый Структура();	
		// добавляем значения входящих ячеек
		Для Каждого Элемент Из СтруктураВходящихЯчеек Цикл
			ЗначениеЯчейки = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, Элемент.Ключ);
			СтруктураТекущихЗначений.Вставить(Элемент.Ключ, ЗначениеЯчейки);		
		КонецЦикла;	
		
		// Создадим структуру предыдцщих значений, она не содержит итоговую ячейку
		СтруктураПредыдущихЗначений = Новый Структура;
		Если мСтруктураЗначений <> Неопределено Тогда
			Для Каждого Элемент Из СтруктураВходящихЯчеек Цикл
				Если мСтруктураЗначений.Свойство(Элемент.Ключ) Тогда
					ЗначениеЯчейкиДо = 0;
					мСтруктураЗначений.Свойство(Элемент.Ключ, ЗначениеЯчейкиДо);
					СтруктураПредыдущихЗначений.Вставить(Элемент.Ключ, ЗначениеЯчейкиДо);		
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
		//Рассчитаем итоговую ячейку
		// В случае, если в мСтруктураЗначений еще не было добавлено предыдуших значений, то значение "ДО" будет равно 0
		// Формула, например:
		//s_300_02_004 = s_300_02_004 - s_300_02_004_i_до + s_300_02_004_i - s_300_02_004_ii_до + s_300_02_004_ii
		//					   - s_300_02_004_iii_до + s_300_02_004_iii - s_300_02_004_iv_до + s_300_02_004_iv
		//					   - s_300_02_004_v_до + s_300_02_004_v - s_300_02_004_vi_до + s_300_02_004_vi;
		
		НовЗначИтоговойЯчейки = ЗначИтоговойЯчейки;
		// + все текущие значения + значение итоговой ячейки
		Для Каждого Элемент Из СтруктураТекущихЗначений Цикл
			НовЗначИтоговойЯчейки = НовЗначИтоговойЯчейки + Элемент.Значение;
		КонецЦикла;
		// - все предыдущие значения
		Для Каждого Элемент Из СтруктураПредыдущихЗначений Цикл
			НовЗначИтоговойЯчейки = НовЗначИтоговойЯчейки - Элемент.Значение;
		КонецЦикла;
		
		// запоминаем текущие значения взодящих ячеек в мСтруктураЗначений
		Для Каждого Элемент Из СтруктураТекущихЗначений Цикл				
			мСтруктураЗначений.Вставить(Элемент.Ключ, Элемент.Значение);  //новое значение данной области 		
		КонецЦикла;
		
		// передаем полученное итоговое значение в структуру и на форму
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, ИтоговаяЯчейка, НовЗначИтоговойЯчейки, Истина);		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИтоговаяЯчейка, Окр(НовЗначИтоговойЯчейки), ПолеТабДока);			
		
		// если итоговое значение ввели меньше чем сумма входящих значений
		// то очищаем все значения, в случае если входящих значений больше одного
		// если входящее значение одно, то приравниваем его со значением итоговой ячейки
		// - Проверим сумму входящих значений
		
		ОбщаяСуммаВходящихЗначений = 0;
		Для Каждого Элемент Из СтруктураТекущихЗначений Цикл		
			ОбщаяСуммаВходящихЗначений = ОбщаяСуммаВходящихЗначений + Элемент.Значение;		
		КонецЦикла;
		
		Если НовЗначИтоговойЯчейки < 0 И ОбщаяСуммаВходящихЗначений < 0 Тогда
			КонтрольНовЗнач    = (-1) * НовЗначИтоговойЯчейки;
			КонтрольОбщаяСумма = (-1) * ОбщаяСуммаВходящихЗначений;
		Иначе
			КонтрольНовЗнач    = НовЗначИтоговойЯчейки;
			КонтрольОбщаяСумма = ОбщаяСуммаВходящихЗначений;
		КонецЕсли;
		
		Если КонтрольНовЗнач < КонтрольОбщаяСумма Тогда
			// определим количество ячеек входящих
			Если СтруктураВходящихЯчеек.Количество() = 1 Тогда
				Для Каждого Элемент Из СтруктураВходящихЯчеек Цикл
					мСтруктураЗначений.Вставить(Элемент.Ключ, НовЗначИтоговойЯчейки);  //новое значение данной области 
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, Элемент.Ключ, Окр(НовЗначИтоговойЯчейки), ПолеТабДока);			
				КонецЦикла;			
			Иначе // больше одного, то обнуляем все входящие значения
				Для Каждого Элемент Из СтруктураВходящихЯчеек Цикл
					мСтруктураЗначений.Вставить(Элемент.Ключ, 0);  //новое значение данной области 
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, Элемент.Ключ, 0, ПолеТабДока);			
				КонецЦикла;			
			КонецЕсли;
		КонецЕсли;
		
		ИтЗначение = НовЗначИтоговойЯчейки;
		
	КонецЕсли;
	
	Возврат ИтЗначение;
	
КонецФункции // АвтоматическийРасчетПоСтрокам()

&НаСервере
Процедура ЗаполнитьСпискиФизЛицПоГражданству()
	
	Запрос  = Новый Запрос;
	Запрос.УстановитьПараметр("парамПериодПо", КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
	// если налогоплательщик - ИП, то исключим данные самого индивидуального предпринимателя
	Если ОтчетОбъект.Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", ОтчетОбъект.Налогоплательщик.ИндивидуальныйПредприниматель);
	Иначе
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Неопределено);
	КонецЕсли;
	
	// выберем иностранцев нерезидентов
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГражданствоФизЛиц.ФизЛицо КАК ФизЛицо
	               |ПОМЕСТИТЬ ВТ_Физлица
	               |ИЗ
	               |	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамПериодПо, ) КАК ГражданствоФизЛиц
	               |ГДЕ
	               |	ГражданствоФизЛиц.Страна <> ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	               |	И ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК
	               |	И ГражданствоФизЛиц.ФизЛицо <> &парамИндивидуальныйПредприниматель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Физлица.ФизЛицо
	               |ИЗ
	               |	ВТ_Физлица КАК ВТ_Физлица
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Контрагенты.Ссылка
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.ФизЛицо В
	               |			(ВЫБРАТЬ
	               |				ВТ_Физлица.ФизЛицо
	               |			ИЗ
	               |				ВТ_Физлица)";
	СтруктураРеквизитовФормы.мСписокФизЛицаИностранцыНеРезиденты = 	Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо");
	
	
	// выберем иностранцев резидентов
	Запрос.Текст = "
	               |ВЫБРАТЬ
	               |	ГражданствоФизЛиц.ФизЛицо КАК ФизЛицо
	               |ПОМЕСТИТЬ ВТ_Физлица
	               |ИЗ
	               |	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамПериодПо, ) КАК ГражданствоФизЛиц
	               |ГДЕ	               
	               |	ГражданствоФизЛиц.Страна <> ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	               |	И НЕ ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК
	               |	И ФизЛицо <> &парамИндивидуальныйПредприниматель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Физлица.ФизЛицо
	               |ИЗ
	               |	ВТ_Физлица КАК ВТ_Физлица
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Контрагенты.Ссылка
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.ФизЛицо В
	               |			(ВЫБРАТЬ
	               |				ВТ_Физлица.ФизЛицо
	               |			ИЗ
	               |				ВТ_Физлица)";
		
	СтруктураРеквизитовФормы.мСписокФизЛицаИностранцыРезиденты = 	Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо");
	
	// выберем иностранцев резидентов
	Запрос.Текст = "
	               |ВЫБРАТЬ
	               |	СправочникФизическиеЛица.Ссылка КАК ФизЛицо
	               |ПОМЕСТИТЬ ВТ_ФизЛица
	               |ИЗ
	               |	Справочник.ФизическиеЛица КАК СправочникФизическиеЛица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамПериодПо, ) КАК ГражданствоФизЛиц
	               |		ПО СправочникФизическиеЛица.Ссылка = ГражданствоФизЛиц.ФизЛицо
	               |ГДЕ
	               |	ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	               |	И СправочникФизическиеЛица.Ссылка <> &парамИндивидуальныйПредприниматель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Физлица.ФизЛицо
	               |ИЗ
	               |	ВТ_ФизЛица КАК ВТ_Физлица
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Контрагенты.Ссылка
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.ФизЛицо В
	               |			(ВЫБРАТЬ
	               |				ВТ_Физлица.ФизЛицо
	               |			ИЗ
	               |				ВТ_Физлица)";
	СтруктураРеквизитовФормы.мСписокФизЛицаКазахстанцы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо");
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокСчетовДоходов()
	
	СписокСчетовДоходов = Новый СписокЗначений();
	СписокСчетовДоходов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг_")); // 6000
	СписокСчетовДоходов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ДоходыОтФинансирования")); 					// 6100
	СписокСчетовДоходов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ПрочиеДоходы_")); 							// 6200
	СписокСчетовДоходов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ДоходыСвязанныеСПрекращаемойДеятельностью_")); // 6300
	СписокСчетовДоходов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ДоляПрибылиОрганизацийУчитываемыхПоМетодуДолевогоУчастия")); // 6400
	
	Возврат СписокСчетовДоходов;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьВспомогательныеПеременные(ОтчетОбъект, СтруктураРеквизитовФормы) Экспорт

	СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП = (ОтчетОбъект.Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);
	СтруктураРеквизитовФормы.мНалогоплательщикИндивидуальныйПредприниматель = ОтчетОбъект.Налогоплательщик.ИндивидуальныйПредприниматель;
	
	// размер минимальной заработной платы
	Запрос = Новый Запрос;
	Если СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета >= Дата(2010,1,1) Тогда
		// с 2010 года в статье 436 указано, что для расчетов используется показатель по состоянию на начало года
		Запрос.УстановитьПараметр("ДатаАктуальности", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);		
	Иначе	
		// до 2010 года уточнения в кодексе не было, поэтому берем показатель на конец отчетного периода
		Запрос.УстановитьПараметр("ДатаАктуальности", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегламентированныеРасчетныеПоказатели.РазмерМЗП,
	               |	РегламентированныеРасчетныеПоказатели.РазмерМЗПДляЦелейНалогообложения,
	               |	РегламентированныеРасчетныеПоказатели.РазмерМРП
	               |ИЗ
	               |	РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&ДатаАктуальности, ) КАК РегламентированныеРасчетныеПоказатели";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураРеквизитовФормы.мРазмерМЗП = Выборка.РазмерМЗП;
		СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения = Выборка.РазмерМЗПДляЦелейНалогообложения;
		СтруктураРеквизитовФормы.мРазмерМРП = Выборка.РазмерМРП;
	Иначе
		СтруктураРеквизитовФормы.мРазмерМЗП = 0;
		СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения = 0;
		СтруктураРеквизитовФормы.мРазмерМРП = 0;
	КонецЕсли;

	//Месяц начиная с которого заполняется отчет  
	Запрос.УстановитьПараметр("парамНалогоплательщик", ОтчетОбъект.Налогоплательщик);
	Запрос.Текст = "ВЫБРАТЬ
	               |	МИНИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК Период
	               |ИЗ
	               |	РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
	               |ГДЕ
	               |	УчетнаяПолитикаНалоговыйУчет.ОрганизацияЯвляетсяПлательщикомСН = ЛОЖЬ
	               |	И УчетнаяПолитикаНалоговыйУчет.Организация = &парамНалогоплательщик";
	
	Выборка = Запрос.Выполнить().Выбрать();
	МесяцЗаполнения = 1;
	СтруктураРеквизитовФормы.мДатаНачалоПериодаОтчетаУпрощенка = Неопределено;
	Если Выборка.Следующий() Тогда
		Если  ТипЗнч(Выборка.Период) = Тип("Дата") 
			И Выборка.Период > СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
			МесяцЗаполнения = (Месяц(Выборка.Период ) - Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)) + 1;
			СтруктураРеквизитовФормы.мДатаНачалоПериодаОтчетаУпрощенка = Выборка.Период;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мМесяцЗаполнения = МесяцЗаполнения;
	
	// Выполнять ежемесячный расчет взносов и отчислений за ИП  
	// ставки взносов, отчислений
	Запрос.УстановитьПараметр("парамНалогоплательщик", ОтчетОбъект.Налогоплательщик);
	Запрос.УстановитьПараметр("парамПериод", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ЕжемесячныйРасчетВзносовИОтчисленийЗаИП,
	               |	УчетнаяПолитикаНалоговыйУчетСрезПоследних.СтавкаОПВДляИП,
	               |	УчетнаяПолитикаНалоговыйУчетСрезПоследних.СтавкаСОДляИП,
	               |	УчетнаяПолитикаНалоговыйУчетСрезПоследних.СтавкаВОСМСДляИП
	               |ИЗ
	               |	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериод, Организация = &парамНалогоплательщик) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураРеквизитовФормы.мЕжемесячныйРасчетВзносовИОтчисленийЗаИП = Выборка.ЕжемесячныйРасчетВзносовИОтчисленийЗаИП;
		СтруктураРеквизитовФормы.мСтавкаОПВ = Выборка.СтавкаОПВДляИП;
		СтруктураРеквизитовФормы.мСтавкаСО = Выборка.СтавкаСОДляИП;
		СтруктураРеквизитовФормы.мСтавкаВОСМС = Выборка.СтавкаВОСМСДляИП;
	КонецЕсли;
	  
	Запрос.УстановитьПараметр("парамФизЛицоИП", ОтчетОбъект.Налогоплательщик.ИндивидуальныйПредприниматель);
	Запрос.УстановитьПараметр("парамПериод", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СведенияОПенсионномОбеспеченииФизЛицСрезПоследних.Пенсионер КАК Пенсионер,
	               |	СведенияОПенсионномОбеспеченииФизЛицСрезПоследних.Период КАК Период
	               |ИЗ
	               |	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамПериод, ФизЛицо = &парамФизЛицоИП) КАК СведенияОПенсионномОбеспеченииФизЛицСрезПоследних";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если СтруктураРеквизитовФормы.Свойство("мИППенсионер") Тогда
		СтруктураРеквизитовФормы.мИППенсионер = Ложь;
		СтруктураРеквизитовФормы.мМесяцИППенсионер = 0;
		
		Если Выборка.Следующий() Тогда
			СтруктураРеквизитовФормы.мИППенсионер = Выборка.Пенсионер;
			Если Выборка.Период > СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
				СтруктураРеквизитовФормы.мМесяцИППенсионер = (Месяц(Выборка.Период ) - Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)) + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ИнициализироватьВспомогательныеПеременные()

&НаСервере
Процедура ЗаполнитьВидРасчета(ВидРасчета)
	
	//сначала очищаем поля, если были проставлены уже отметки
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Первоначальный","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Очередной","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Дополнительный","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"ПоУведомлению","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Ликвидационный","");
	
	Если ВидРасчета = "Первоначальный" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Первоначальный","Х");
	ИначеЕсли ВидРасчета = "Очередной" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Очередной","Х");		
	ИначеЕсли ВидРасчета = "Дополнительный" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Дополнительный","Х");		
	ИначеЕсли ВидРасчета = "ПоУведомлению" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"ПоУведомлению","Х");		
	ИначеЕсли ВидРасчета = "Ликвидационный" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Ликвидационный","Х");		
	КонецЕсли;
	
	Если ВидРасчета = "ПоУведомлению" Тогда
		Форма910ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Ложь;
		Форма910ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита = Ложь;
	Иначе
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"НомерУведомления","");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"ДатаУведомления","");
		Форма910ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Истина;
		Форма910ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита = Истина;
	КонецЕсли;
	
	Модифированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметры(ТекИмяФормы) Экспорт
	
	СписокФормБезИерархии = РеквизитФормыВЗначение("мСписокФормБезИерархии", Тип("ДеревоЗначений"));
	
	Форма = СписокФормБезИерархии.Строки.Найти(ТекИмяФормы, "КодФормы");
	
	Если Форма.Многострочность = 1 Тогда // заполнение структуры шапки(подвала) для многострочных форм
		
		Если Не ((ОтчетОбъект.Налогоплательщик  = Неопределено) Или (ОтчетОбъект.Налогоплательщик = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации"))) Тогда			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "ИИН_БИН", ОтчетОбъект.Налогоплательщик.ИдентификационныйНомер, Ложь);
		КонецЕсли;
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "Полугодие", СтруктураРеквизитовФормы.мПолугодие, Ложь);
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "Год", СтруктураРеквизитовФормы.мГод, Ложь);
							
	Иначе //обычная форма
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"Год",СтруктураРеквизитовФормы.мГод);		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"Полугодие", СтруктураРеквизитовФормы.мПолугодие);		
		Если Не ((ОтчетОбъект.Налогоплательщик  = Неопределено) Или (ОтчетОбъект.Налогоплательщик = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации"))) Тогда			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "ИИН_БИН", ОтчетОбъект.Налогоплательщик.ИдентификационныйНомер);
		КонецЕсли;
				
	КонецЕсли;
	
	Если ТекИмяФормы = Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7) Тогда 
		
		//устанавливаем значения по умолчанию
		СписокРасчетов = Элементы.СписокРасчетов.СписокВыбора[1];
		ЗаполнитьВидРасчета("Очередной");
		
		//заполним основные сведения об организации
		ЗаполнитьСведенияОрганизации();
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "КодВалюты", "KZT");
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПараметры()

&НаСервере
Процедура ЗаполнитьСведенияОрганизации()
	
	ОргСведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(ОтчетОбъект.Налогоплательщик, ОтчетОбъект.ДатаПодписи, Налогоплательщик.НалоговыйКомитет);
	ОтветственныеЛица = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(ОтчетОбъект.Налогоплательщик, ОтчетОбъект.ДатаПодписи,,,Истина);	
	//Если организация не указана то не выводим никаких сведений
	Если ОргСведения = 0 Тогда
		Возврат;
	КонецЕсли;

	// Инициализируем переменные
	РННЮЛ = ""; // РНН
		
	ИИН_БИН = ""; // ИИН_БИН

	НаимЮЛПол = ""; // Полное наименование 
	
	ФИОРук = ""; // ФИО руководителя
				
	КодНалоговогоОргана = ""; // Код налогового органа
	
	ПризнакРезидентства = Истина; // Признак резидентства
	
	// Добавим сведения о кодах налоговых органов
	НКСведения = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ОтчетОбъект.НалоговыйКомитет, ОтчетОбъект.ДатаПодписи);
	
	//ОргСведения.Вставить("КодНалоговогоОргана", СокрЛП(Лев(НКСведения.РНН, 4))); 
	ОргСведения.Вставить("КодНалоговогоОргана", СокрЛП(Лев(ОргСведения.КодОрганаГосударственныхДоходов, 4)));	
	
	ПризнакРезидентства = ?(Лев(ОтчетОбъект.Налогоплательщик.КБЕ,1) = "2", Ложь, Истина);
	ОргСведения.Вставить("ПризнакРезидентства", ПризнакРезидентства);
	
	// Получаем данные
	ОргСведения.Свойство("РНН",    			    РННЮЛ);
	ОргСведения.Свойство("БИН_ИИН",  		    ИИН_БИН);
	ОргСведения.Свойство("ПолноеНаименование",  НаимЮЛПол);
	ОргСведения.Свойство("КодНалоговогоОргана", КодНалоговогоОргана);
	ОргСведения.Свойство("ПризнакРезидентства", ПризнакРезидентства);	
	ОтветственныеЛица.Свойство("Руководитель",  ФИОРук);
	                  
	// Производим операции связанные с текущей формой отчетности	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы,"ИИН_БИН",ИИН_БИН);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"ОргНазв",НаимЮЛПол);
	
	Если ПризнакРезидентства Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Резидент","X");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Нерезидент","");
	Иначе
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Резидент","");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Нерезидент","X");
	КонецЕсли;
	
	Если КодФормы = "Форма910" Тогда
		// Разбиваем название организации
		НазваниеОрганизацииДляРазбиения = НаимЮЛПол;
		НачПозиция = 1;
		Для Шаг = 1 По 3 Цикл
			ДлинаСтроки = ЭтаФорма[КодФормы + "ПолеТабличногоДокументаСтраница1"].Области["ОргНазв"+Шаг].ТипЗначения.КвалификаторыСтроки.Длина;
			НазОрганизации = Сред(НазваниеОрганизацииДляРазбиения, НачПозиция, ДлинаСтроки); 
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"ОргНазв"+Шаг,НазОрганизации);
			НачПозиция =НачПозиция + ДлинаСтроки;
		КонецЦикла;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Руководитель",ФИОРук);
	
	// Дата подачи декларации
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"ДатаПодачи", ОтчетОбъект.ДатаПодписи);	
	
	Если СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОрганизацияСсылка", ОтчетОбъект.Налогоплательщик);
		Запрос.Текст = "ВЫБРАТЬ
		|	Контрагенты.ИдентификационныйКодЛичности Как БИНАппаратаАкимов
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО Организации.МестныйБюджет = Контрагенты.Ссылка
		|ГДЕ
		|	Организации.Ссылка = &ОрганизацияСсылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"БИНАппаратаАкимов", Выборка.БИНАппаратаАкимов);
		КонецЕсли;
	КонецЕсли;     
	
	//Категория плательщика ЕП
	ПорядокОбложенияДоходовРаботников = СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников;
	Если ПорядокОбложенияДоходовРаботников <> Неопределено Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "ПлательщикЕП", ?(ПорядокОбложенияДоходовРаботников = ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж"), "Х", ""));
	КонецЕсли;
	 
	//Код органа государственных доходов
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "КодНалоговогоОргана", КодНалоговогоОргана);		
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

&НаСервере
Процедура ЗаполнитьДанныеПоОрганизации()
	
	СписокФормБезИерархии = РеквизитФормыВЗначение("мСписокФормБезИерархии", Тип("ДеревоЗначений"));
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		// Заполняем поле 11 "Представленные приложения"
		Для Каждого Форма Из СписокФормДерева.Строки[0].Строки Цикл
			ИмяОбласти = "Приложение" + Прав(Форма.КодФормы,2);
			Если Форма910ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяОбласти) <> Неопределено Тогда
				Строка = СписокФормБезИерархии.Строки.Найти(Форма.КодФормы, "КодФормы");
				Если Строка.Выгружать = 1 Тогда
					РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7),ИмяОбласти,"Х",Ложь);				
				Иначе
					РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7),ИмяОбласти,"",Ложь);				
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;

		ВосстановитьСохраненныеДанные();
	Иначе	
		ЗаполнитьПараметры(КодФормы); 			
	КонецЕсли;   
	
КонецПроцедуры

&НаСервере
Процедура ПередатьЗначениеВСтруктуруНаСервере(Ячейка, ТекущаяОбластьЗначение, ПередаватьВТабличноеПоле)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, Ячейка, ТекущаяОбластьЗначение, ПередаватьВТабличноеПоле);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьВXMLНаСервере(ВыдаватьСообщение = Ложь)
	
	РегламентированнаяОтчетность.ПередатьДанныеИзТабличногоПоляВСтруктуру(ЭтаФорма);
	
	Возврат РегламентированнаяОтчетность.ВыгрузитьОтчетВXMLДляСОНО(ЭтотОбъект, ВыдаватьСообщение);	

КонецФункции

&НаКлиенте
Процедура ПоказатьРасшифроку910ВВидеОСВ()	
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);

	СписокСтруктурныхЕдиниц = Новый СписокЗначений;
	СписокСтруктурныхЕдиниц.Добавить(ОтчетОбъект.Налогоплательщик);

	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", СписокСтруктурныхЕдиниц);
	ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПредставлениеСпискаОрганизаций", ПредставлениеСпискаОрганизаций);

	СписокСчетов = ПолучитьСписокСчетовДоходов();
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет", СписокСчетов, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
	
	ГруппировкиРасшифровки = Новый Массив();

	// Добавим необходимые для понимания отчета группировки по аналитике счетов доходов
	Для Каждого ЭлементСпискаСчетов Из СписокСчетов Цикл
		// "+1-2-3" - субконто Доходы (об.) является первым
		ГруппировкиРасшифровки.Добавить(Новый Структура("Счет, Представление, ПоСубсчетам, ПоСубконто", ЭлементСпискаСчетов.Значение, "Доходы", Ложь, "+1-2-3"));
		
	КонецЦикла;
	
	ДополнительныеПоляРасшифровки = Новый Массив();
	ДополнительныеПоляРасшифровки.Добавить(Новый Структура("Поле, Представление", "Субконто1.ЯвляетсяОбъектомНалогообложенияПриСпециальныхНалоговыхРежимах", НСтр("ru = 'Является объектом налогообложения при СНР'")));

	ЗаполняемыеНастройки = Новый Структура("Реквизиты, ГруппировкаДоп, ДополнительныеПоля, Показатели, Группировка, ГруппировкиРасшифровки, ДополнительныеПоляРасшифровки, РазмещениеДополнительныхПолей",
	                                        Истина, Истина, Истина, Истина, Истина, ГруппировкиРасшифровки, ДополнительныеПоляРасшифровки, 1);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РазмещениеДополнительныхПолей", 1);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("ЗаполняемыеНастройки", ЗаполняемыеНастройки);	

	ОткрытьФорму("Отчет.ОборотноСальдоваяВедомостьТиповой.Форма.ФормаОтчета", ПараметрыФормы,, Истина);

КонецПроцедуры	

&НаКлиенте
Процедура ПоказатьРасшифроку910АнализСубконто(ИмяЯчейки)	
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);

	СписокСтруктурныхЕдиниц = Новый СписокЗначений;
	СписокСтруктурныхЕдиниц.Добавить(ОтчетОбъект.Налогоплательщик);

	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", СписокСтруктурныхЕдиниц);
	ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПредставлениеСпискаОрганизаций", ПредставлениеСпискаОрганизаций);

	СписокСчетов = ПолучитьСписокСчетовДоходов();
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет", СписокСчетов, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
	
	ГруппировкиРасшифровки = Новый Массив();

	ЗаполняемыеНастройки = Новый Структура("Реквизиты, ГруппировкаДоп, ДополнительныеПоля, Показатели, Группировка, ГруппировкиРасшифровки, РазмещениеДополнительныхПолей",
	                                        Истина, Истина, Истина, Истина, Истина, ГруппировкиРасшифровки, 1);

	СписокВидовСубконто = ПолучитьВидСубконтоДоходы();
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокВидовСубконто", СписокВидовСубконто);

	СписокДоходовБезналичные = ПолучитьСписокДоходовБезналичные();
	
	Если ИмяЯчейки = "s_910_00_001_A" Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Субконто1", СписокДоходовБезналичные, ВидСравненияКомпоновкиДанных.ВСписке, Истина);
	КонецЕсли;

	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Субконто1.ЯвляетсяОбъектомНалогообложенияПриСпециальныхНалоговыхРежимах", Истина, ВидСравненияКомпоновкиДанных.Равно, Истина);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РазмещениеДополнительныхПолей", 1);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("ЗаполняемыеНастройки", ЗаполняемыеНастройки);	

	ОткрытьФорму("Отчет.АнализСубконтоТиповой.Форма.ФормаОтчета", ПараметрыФормы,, Истина);

КонецПроцедуры	

&НаСервере
Функция ПолучитьВидСубконтоДоходы()
	
	СписокВидовСубконто = Новый СписокЗначений();
	СписокВидовСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.Доходы")); // Доходы
	
	Возврат СписокВидовСубконто;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокДоходовБезналичные()
	
	ДоходыРасходыПоКоду = ПолучитьТаблицуКодыСтрокДоходов();
	СписокДоходов = Новый СписокЗначений();
	
	Для Каждого Строка Из ДоходыРасходыПоКоду Цикл
		Если Строка.КодСтроки = "910.00.001.А" ИЛИ Строка.КодСтроки = "910.00.001.A" Тогда
			СписокДоходов.Добавить(Строка.ВидДоходаРасхода);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокДоходов;
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуКодыСтрокДоходов()

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонПериода", 		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", 		ОтчетОбъект.Налогоплательщик);
	Запрос.УстановитьПараметр("ПустаяОрганизация", 	ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	Запрос.УстановитьПараметр("ПустоеЗначение", 	Неопределено);
	
	МассивКодыСтрок910Формы = Новый СписокЗначений();
	МассивКодыСтрок910Формы.Добавить("910.00.001.А");
	МассивКодыСтрок910Формы.Добавить("910.00.001.A");
	Запрос.УстановитьПараметр("КодыСтрок910Формы", МассивКодыСтрок910Формы);

	// определим облагаемые доход за период
	Запрос.Текст = 
	"ВЫБРАТЬ
	|   КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Период КАК Период,
	|   КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.ВидДоходаРасхода КАК ВидДоходаРасхода,
	|   КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик КАК Организация,
	|   КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.КодСтроки КАК КодСтроки,
	|   ВЫБОР
	|   	КОГДА КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик = &ПустаяОрганизация
	|   		ТОГДА 3
	|   	КОГДА КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик = &ПустоеЗначение
	|   		ТОГДА 2
	|   	КОГДА КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик = &Организация
	|   		ТОГДА 1
	|   КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Приоритет
	|ИЗ
	|   РегистрСведений.КодыСтрокДекларацииПоНалогуНаПрибыль.СрезПоследних(
	|   		&КонПериода,
	|   		(Налогоплательщик = &ПустаяОрганизация
	|   			ИЛИ Налогоплательщик = &ПустоеЗначение
	|   			ИЛИ Налогоплательщик = &Организация)
	|   			И КодСтроки В (&КодыСтрок910Формы)) КАК КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних		
	|ИНДЕКСИРОВАТЬ ПО
	|   ВидДоходаРасхода,
	|   Приоритет
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидаДоходаРасхода.ВидДоходаРасхода КАК ВидДоходаРасхода,
	|	МИНИМУМ(ТаблицаВидаДоходаРасхода.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ВТ_ТаблицаВидаДоходаРасхода	
	|ИЗ
	|	ВТ_Приоритет КАК ТаблицаВидаДоходаРасхода
	|   
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВидаДоходаРасхода.ВидДоходаРасхода
	|;   	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидаДоходаРасхода.ВидДоходаРасхода КАК ВидДоходаРасхода,
	|	ТаблицаВидаДоходаРасхода.Приоритет КАК Приоритет,
	|	ДанныеОКодахДекларации.КодСтроки КАК КодСтроки
	|ИЗ
	|	ВТ_ТаблицаВидаДоходаРасхода КАК ТаблицаВидаДоходаРасхода
	|   		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоритет КАК ДанныеОКодахДекларации
	|		   	ПО ТаблицаВидаДоходаРасхода.ВидДоходаРасхода = ДанныеОКодахДекларации.ВидДоходаРасхода
	|			И ТаблицаВидаДоходаРасхода.Приоритет = ДанныеОКодахДекларации.Приоритет
	|"; 
	
	ТаблицаДоходыРасходыПоКоду = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДоходыРасходыПоКоду;
		
КонецФункции

&НаКлиенте
Процедура ПоказатьРасшифровку910ВВидеРегистраНУпоИПНиСН(СтруктурнаяЕдиницаДляОтбора = Неопределено, МесяцДляРасшифровки = Неопределено, СписокФизЛиц = Неопределено, Гражданство = Неопределено, ВидСравненияГражданства = Неопределено, ИсключатьНерезидентов, ЯчейкаСОтбором=Ложь, ЯчейкаЕП=Ложь)

	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	// настраиваем параметры отчета в зависимости от параметров формы 910
	Если МесяцДляРасшифровки <> Неопределено Тогда 
		
		Если МесяцДляРасшифровки = 1 Тогда
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
		ИначеЕсли МесяцДляРасшифровки = 2 Тогда
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", ДобавитьМесяц(НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),1));
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецМесяца(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,1)));
		ИначеЕсли МесяцДляРасшифровки = 3 Тогда
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", ДобавитьМесяц(НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),2));
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецМесяца(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,2)));
		ИначеЕсли МесяцДляРасшифровки = 4 Тогда
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", ДобавитьМесяц(НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),3));
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецМесяца(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,3)));
		ИначеЕсли МесяцДляРасшифровки = 5 Тогда
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", ДобавитьМесяц(НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),4));
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецМесяца(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,4)));
		ИначеЕсли МесяцДляРасшифровки = 6 Тогда 
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		КонецЕсли;
	Иначе 
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода", КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	КонецЕсли;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Налогоплательщик", ОтчетОбъект.Налогоплательщик);	

	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";

	Если НЕ СписокФизЛиц = Неопределено  Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ФизЛицо", СписокФизЛиц, ВидСравненияКомпоновкиДанных.ВСписке);
	Иначе
		Если СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ФизЛицо", СтруктураРеквизитовФормы.мНалогоплательщикИндивидуальныйПредприниматель, ВидСравненияКомпоновкиДанных.НеРавно);
		КонецЕсли;
	КонецЕсли;

	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.СформироватьСписокСтруктурныхЕдиниц(ПредопределенноеЗначение("Перечисление.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты"), Неопределено, ОтчетОбъект.Налогоплательщик));
	ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПредставлениеСпискаОрганизаций", ПредставлениеСпискаОрганизаций);
	
	// Отбор по стране гражданства
	Если Гражданство <> Неопределено Тогда

		// отбор по стране гражданства
		СписокСтран = Новый СписокЗначений;
		СписокСтран.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторСтранМира.Казахстан"));
		Если ВидСравненияГражданства <> Неопределено Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Страна",  СписокСтран, ВидСравненияГражданства);
		Иначе
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Страна",  СписокСтран, ВидСравненияКомпоновкиДанных.ВСписке);
		КонецЕсли;
		
	КонецЕсли;

	// отбор по нерезидентам	
	Если ИсключатьНерезидентов <> Неопределено Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "НеЯвляетсяНалоговымРезидентомРК", ИсключатьНерезидентов, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;

	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВключитьИП", Истина);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВключитьПолучателейАлиментов", ПризнакАлиментов);
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ИндивидуальныйПредпринимательАдвокатЧастныйНотариус", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	
	//Отбор по физ лицам для ЕП
	ПорядокОбложенияЕП = ?(СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж"), Истина, Ложь); 
	
	Если ПорядокОбложенияЕП Тогда 
		
		Если ЯчейкаСОтбором Тогда
				
				МассивФизЛиц = Новый Массив;
				СписокФизЛиц = Новый СписокЗначений;
				
				Если ЯчейкаЕП Тогда 
					
					МассивФизЛиц = ПолучитьМассивФизЛиц("Форма910_03"); 		
					СписокФизЛиц.ЗагрузитьЗначения(МассивФизЛиц);  
					
				Иначе			
					
					МассивФизЛиц = ПолучитьМассивФизЛиц("Форма910_01");		
					МассивФизЛиц1 = ПолучитьМассивФизЛиц("Форма910_02"); 
					
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФизЛиц, МассивФизЛиц1);
					СписокФизЛиц.ЗагрузитьЗначения(МассивФизЛиц);
					
				КонецЕсли;  
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ФизЛицо",  СписокФизЛиц, ВидСравненияКомпоновкиДанных.ВСписке);
				
		КонецЕсли;
					
	КонецЕсли;
	
	ГруппировкиРасшифровки = Новый Массив();
	
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "Налогоплательщик", НСтр("ru = 'Налогоплательщик'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "МесяцНалоговогоПериода", НСтр("ru = 'Месяц налог. периода'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "НалоговыйКомитет", НСтр("ru = 'Налоговый комитет'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "СтруктурнаяЕдиница", НСтр("ru = 'Структурное подразделение'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	КонецЕсли;
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "ФизЛицо", НСтр("ru = 'Работник'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));

	ДополнительныеПоляРасшифровки = Новый Массив();
	ДополнительныеПоляРасшифровки.Добавить(Новый Структура("Поле, Представление", "ТабельныйНомер", НСтр("ru = 'Табельный номер'")));
	ДополнительныеПоляРасшифровки.Добавить(Новый Структура("Поле, Представление", "ИИН", НСтр("ru = 'ИИН'")));

	ЗаполняемыеНастройки = Новый Структура("Группировка, Показатели, ДополнительныеПоля, ГруппировкиРасшифровки, ДополнительныеПоляРасшифровки",
											Истина, Истина, Истина, ГруппировкиРасшифровки, ДополнительныеПоляРасшифровки);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ЗаполняемыеНастройки",ЗаполняемыеНастройки );	

	ОткрытьФорму("Отчет.РегистрНалоговогоУчетаПоИПНиСН.Форма.ФормаОтчета", ПараметрыФормы,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиСтраниц()
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРаздел = Элементы.РазделыОтчета.ТекущиеДанные.Страницы;		
	КонецЕсли;
	
	Для Каждого ТекФорма ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",ТекФорма.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			ТекущаяСтрокаСписка.Выгружать               = ТекФорма.Выгружать;
			ТекущаяСтрокаСписка.ПоказатьСтраницу        = ТекФорма.ПоказатьСтраницу;			
			ТекущаяСтрокаСписка.АвтополучениеИтогов     = ТекФорма.АвтополучениеИтогов;  
			ТекущаяСтрокаСписка.АвтоЗаполнение          = ТекФорма.АвтоЗаполнение;  
		КонецЕсли;		   
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокФормДерева",СписокФормДерева);
	
	ДопПараметры = Новый Структура("ТекущийРаздел",ТекущийРаздел);
	
	ОповещениеПослеЗакрытияФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастройкиСтраниц",ЭтотОбъект,ДопПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.НастройкиОтчета",ПараметрыФормы, ЭтаФорма,,,,ОповещениеПослеЗакрытияФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

//ЕП
&НаСервере
Функция ПолучитьПорядокОбложенияДоходовРаботников(парамНалогоплательщик, парамПериодПо) 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетнаяПолитикаНУ.ПорядокОбложенияДоходовРаботников КАК ПорядокОбложенияДоходовРаботников
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодПо, Организация = &парамНалогоплательщик) КАК УчетнаяПолитикаНУ";
	
	Запрос.УстановитьПараметр("парамНалогоплательщик", парамНалогоплательщик);
	Запрос.УстановитьПараметр("парамПериодПо", парамПериодПо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ПорядокОбложенияДоходовРаботников = Неопределено;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	
    	ПорядокОбложенияДоходовРаботников = ВыборкаДетальныеЗаписи.ПорядокОбложенияДоходовРаботников;	
	
	КонецЦикла;
	
	Возврат ПорядокОбложенияДоходовРаботников;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиСтраниц(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьДанныеФормы(РезультатЗакрытия, СписокФормДерева);
	
	Модифицированность = Истина;
	
	//обновим мСписокФормБезИерархии
	Для Каждого СтрокаФормы ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",СтрокаФормы.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			СтрокаФормы.Выгружать               = ТекущаяСтрокаСписка.Выгружать;
			СтрокаФормы.ПоказатьСтраницу        = ТекущаяСтрокаСписка.ПоказатьСтраницу;			
			СтрокаФормы.АвтополучениеИтогов     = ТекущаяСтрокаСписка.АвтополучениеИтогов;  
			СтрокаФормы.АвтоЗаполнение          = ТекущаяСтрокаСписка.АвтоЗаполнение;  
		КонецЕсли;			
	КонецЦикла; 	

	Если ДополнительныеПараметры.Свойство("ТекущийРаздел") И НЕ ДополнительныеПараметры.ТекущийРаздел = Неопределено Тогда  		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(РазделыОтчета, Новый Структура("СписокФормДереваСтраницы",ДополнительныеПараметры.ТекущийРаздел));
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;			
	КонецЕсли;  	
	
КонецПроцедуры

&НаКлиенте
Процедура Форма910ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Область)
	
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма910РасчетНаСервере(Область.Имя, Область.Значение);
	КонецЕсли;

	Модифицированность = Истина;
	
КонецПроцедуры	

////Обход ситуации с очисткой ячеек в ТП в клиент-серверном режиме работы
&НаКлиенте
Процедура ПанельФорма910ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ПанельФорма910ПриСменеСтраницыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПанельФорма910ПриСменеСтраницыНаСервере()
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ЗначениеРеквизита)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ЗначениеРеквизита);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗаголовокОтражениеВУчете(ДокументОтражения)
	
	Если ЗначениеЗаполнено(ДокументОтражения) Тогда
		Возврат НСТР("ru = 'Открыть документ отражения в учете'");
	Иначе
		Возврат НСТР("ru = 'Ввести документ отражения в учете'");
	КонецЕсли;
	
КонецФункции // ПолучитьЗаголовокОтражениеВУчете()

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьДополнительныеПараметрыОтраженияДанных(НалогоплательщикЯвляетсяИП)
	
	СтруктураПараметров = Новый Структура;
	
	// Для опционального отображения колонок для ИП и проведения по РН
	СтруктураПараметров.Вставить("ОтражениеДанныхИП", НалогоплательщикЯвляетсяИП);
	
	// Сформируем имена реквизитов и адреса ячеек данных для заполнения колонок документа
	// в данную структуру передаем только числовые значения, которые надо отразить
	// 		Ключ - имя колонки ТЧ документа ОтражениеНалоговойОтчетностиВРеглУчете с типом "Число"
	// 		Значение - номер колонки в макете, в колонке макета указываем имя ячейки с содержанием данных
	ПоказателиОтчета = Новый Структура;
	ПоказателиОтчета.Вставить("СуммаДохода", 12);
	
	СтруктураПараметров.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// В данную структуру передаем все прочие параметры нечислового типа
	// далее данные параметры будут использоваться в дополнительных колонках
	// 		Ключ - имя колонки ТЧ документа ОтражениеНалоговойОтчетностиВРеглУчете
	// 		Значение - номер колонки в макете, в колонке указываем путь к получению данных,
	//				получение будет осуществляться через данные отчета, например, Организация = Вычислить("РеглОтчет." + Значение), где Значение = "Организация"
	ПараметрыОтчета = Новый Структура; 
	ПараметрыОтчета.Вставить("ФизЛицо", 13);
	
	СтруктураПараметров.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПолучитьСтавкуОСМС(Дата, Налогоплательщик)
	
	Ставка = 0;
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.СтавкаВОСМСДляИП КАК СтавкаВОСМСДляИП
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(
		|			&Дата,
		|			Организация = &Налогоплательщик) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних");
						  
	Запрос.УстановитьПараметр("Дата", Дата);					  
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);					  
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Ставка = Выборка["СтавкаВОСМСДляИП"];
	КонецЕсли;	
	
	Возврат Ставка;
	
КонецФункции 

&НаСервере
Процедура ДобавитьСтрокуНаСервере()
	
	РегламентированнаяОтчетность.ДобавитьСтрокуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуНаСервере()
	
	РегламентированнаяОтчетность.УдалитьСтрокуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПредыдущаяСтрНаСервере()
	
	ТекущаяСтраница = ТекущаяСтраница - 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СледующаяСтрНаСервере()
	
	ТекущаяСтраница = ТекущаяСтраница + 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСтраницы(Значение, Параметры) Экспорт
	
	Если НЕ Значение = Неопределено Тогда  
		
		ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
		Если ТекФорма = Неопределено Тогда
			ВсегоСтраниц = 1;
		Иначе
			ВсегоСтраниц = ТекФорма.ВсегоСтраниц;
		КонецЕсли;		
			
		Если Значение = 0 Тогда
			ТекущаяСтраница = 1;
		ИначеЕсли Значение > ВсегоСтраниц Тогда
			ТекущаяСтраница = ВсегоСтраниц;
		Иначе
			ТекущаяСтраница = Значение;				
		КонецЕсли;
		
		ПослеВводаСтраницыНаСервере();
		  
	КонецЕсли;
	           	
КонецПроцедуры

&НаСервере
Процедура ПослеВводаСтраницыНаСервере()
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЭлемента(ВыбЭлемент, ПараметрыВыбора) Экспорт
	
	Если НЕ ВыбЭлемент = Неопределено Тогда
		
		ВыбранноеЗначение = ВыбЭлемент.Значение;
		ПараметрыФормы = Новый Структура;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма910ОбработкаВыбораЭлемента", ЭтотОбъект, ПараметрыВыбора);
		ОткрытьФорму(ВыбранноеЗначение,ПараметрыФормы,ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаЗначения(Значение, Параметры) Экспорт   
		
	Если НЕ Значение = Неопределено Тогда         	
		
		ПроверятьЦифрыВСтроке = Ложь;
		ПроверитьСтатусФизЛица = Ложь;
		
		Если Параметры.Свойство("ПроверятьЦифрыВСтроке" , ПроверятьЦифрыВСтроке) И ПроверятьЦифрыВСтроке Тогда
			Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Значение) Тогда				
				ТекстСообщения = НСтр("ru = 'Значение содержит нецифровые символы, значение будет очищено'");							  
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);				
				Значение = "";
			КонецЕсли;         		
		КонецЕсли;
		
		Если Параметры.Свойство("ПроверитьСтатусФизЛица" , ПроверитьСтатусФизЛица) И ПроверитьСтатусФизЛица Тогда
			Если Значение > 3 Тогда 
				ПоказатьПредупреждение(, НСтр("ru = 'Введено неправильное значение статуса. Статус может принимать значение от 1 до 3.'"));
				Значение = "";
			КонецЕсли;	
		КонецЕсли;    
				
		Параметры.Область.Значение = Значение;			
		ПередатьЗначениеВМногострочнуюСтруктуру(Параметры.ИмяСтраницы, Параметры.Область.Имя, Значение, Параметры.Расчет);
	
		Если Найти(Параметры.Область.Имя, "Ф910_03_J") > 0 Тогда
			
				КодТекущейФормы = КодФормы;
				
				Форма910Расчет(Истина);
				
				Модифицированность = Истина;  
				
				КодФормы = КодТекущейФормы;
			
		КонецЕсли;
		
	КонецЕсли;
	           	
КонецПроцедуры

&НаСервере 
Процедура ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ИмяЯчейки, Значение, Расчет = Ложь)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, ИмяСтраницы, ИмяЯчейки, Значение, Расчет);				
	
КонецПроцедуры

&НаКлиенте
Процедура Форма910ОбработкаВыбораЭлемента(Результат, ПараметрыВыбора) экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	Иначе
		ВыбранныйЭлемент = Результат;
	КонецЕсли;
	
	ОбластьРасшифровки = ПараметрыВыбора.Область;	
	НомерСтроки = Сред(ОбластьРасшифровки.Имя, Найти(ОбластьРасшифровки.Имя, "__") + 2);
	
	Если ТипЗнч(ВыбранныйЭлемент) = Тип("СправочникСсылка.Контрагенты") 
		ИЛИ ТипЗнч(ВыбранныйЭлемент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Если КодФормы = "Форма910_01" Тогда 
			ИмяГруппы = "Страница1";                                                    
			Ячейка  = "Ф910_01ФИО";	
			
			Форма910_01ОбработкаПодбораНаСервере(ВыбранныйЭлемент, Ячейка, ИмяГруппы, НомерСтроки); 
		ИначеЕсли КодФормы = "Форма910_02" Тогда 
			ИмяГруппы = "Страница1";                                                    
			Ячейка  = "Ф910_02ФИОРезидента";	
			
			Форма910_02ОбработкаПодбораНаСервере(ВыбранныйЭлемент, Ячейка, ИмяГруппы, НомерСтроки);
		ИначеЕсли КодФормы = "Форма910_03" Тогда 
			ИмяГруппы = "Страница1";                                                    
			Ячейка  = "Ф910_03ФИОЕП";	
			
			Форма910_03ОбработкаПодбораНаСервере(ВыбранныйЭлемент, Ячейка, ИмяГруппы, НомерСтроки);
			
		КонецЕсли;
		
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура Форма910_01ОбработкаПодбораНаСервере(Расшифровка, ИмяЯчейки, ИмяГруппы, НомерСтроки) Экспорт   

	Если ИмяЯчейки = "Ф910_01ФИО" Тогда
		СсылкаФизЛица = Расшифровка;
		
		ОбластьНаименование = "Ф910_01ФИО__" + НомерСтроки;		
		ОбластьИИН = "Ф910_01ИИН__" + НомерСтроки;
		
		Если ТипЗнч(Расшифровка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			// Определим сведения о полном ФИО, РНН, ИИН
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("парамФизЛицо", 	СсылкаФизЛица);
			Запрос.УстановитьПараметр("парамПериодПо", 	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			Запрос.УстановитьПараметр("парамНачГода", 	НачалоГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
			Запрос.УстановитьПараметр("парамПустаяДата", '00010101');
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	ФизическиеЛица.Наименование КАК Наименование,
			               |	ФизическиеЛица.РНН КАК РНН,
			               |	ФизическиеЛица.ИдентификационныйКодЛичности КАК ИИН
			               |ПОМЕСТИТЬ ФизическиеЛица
			               |ИЗ
			               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
			               |ГДЕ
			               |	ФизическиеЛица.Ссылка = &парамФизЛицо
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ГражданствоФизЛицСрезПоследних.Период КАК Период,
			               |	ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НомерНалоговойРегистрацииВСтранеРезидентства, """") КАК НомерНалоговойРегистрацииВСтранеРезидентства,
			               |	ГражданствоФизЛицСрезПоследних.Страна,
			               |	ВЫБОР
			               |		КОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ)
			               |			ТОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
			               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
			               |	КОНЕЦ КАК СтранаРезидентства,
			               |	ВЫБОР
			               |		КОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
			               |			ТОГДА ЛОЖЬ
			               |		ИНАЧЕ ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРК, ИСТИНА)
			               |	КОНЕЦ КАК НеЯвляетсяНалоговымРезидентомРК
			               |ПОМЕСТИТЬ ГражданствоФизЛиц
			               |ИЗ
			               |	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамПериодПо, ФизЛицо = &парамФизЛицо) КАК ГражданствоФизЛицСрезПоследних
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВЫБОР
			               |		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL 
			               |			ТОГДА ФизическиеЛица.Наименование
			               |		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
			               |				КОГДА ФИОФизЛиц.Имя <> """"
			               |					ТОГДА "" "" + ФИОФизЛиц.Имя
			               |				ИНАЧЕ """"
			               |			КОНЕЦ + ВЫБОР
			               |				КОГДА ФИОФизЛиц.Отчество <> """"
			               |					ТОГДА "" "" + ФИОФизЛиц.Отчество
			               |				ИНАЧЕ """"
			               |			КОНЕЦ
			               |	КОНЕЦ КАК ФИО,
			               |	ФизическиеЛица.РНН КАК РНН,
			               |	ФизическиеЛица.ИИН КАК ИИН,
			               |	ЕСТЬNULL(КлассификаторСтранМира.КодАльфа2, """") КАК КодСтраны,
			               |	ГражданствоФизЛиц.НомерНалоговойРегистрацииВСтранеРезидентства КАК НомерНалоговойРегистрацииВСтранеРезидентства,
			               |	ГражданствоФизЛиц.Страна,
			               |	ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК КАК НеЯвляетсяНалоговымРезидентомРК,
			               |	ГражданствоФизЛиц.СтранаРезидентства
			               |ИЗ
			               |	ФизическиеЛица КАК ФизическиеЛица
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамПериодПо, ФизЛицо = &парамФизЛицо) КАК ФИОФизЛиц
			               |		ПО (ИСТИНА)
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ГражданствоФизЛиц КАК ГражданствоФизЛиц
			               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
			               |			ПО ГражданствоФизЛиц.СтранаРезидентства = КлассификаторСтранМира.Ссылка
			               |		ПО (ИСТИНА)";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
													  
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.ИИН) Тогда
					СтрокаИИН = Выборка.ИИН;
				Иначе
					СтрокаИИН = "";
					ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа C ""ИИН"",
							  |т.к. значение содержит символы, отличные от цифр'");
							  
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,  Формат(Число(НомерСтроки)+1,мФорматНомераСтроки)));
							  
				КонецЕсли;
				
				Форма910_01ПолеТабличногоДокументаСтраница1.Области[ОбластьНаименование].Значение = Выборка.ФИО;				
				Форма910_01ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение 			= СтрокаИИН;
				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьНаименование, 		Выборка.ФИО, ,СсылкаФизЛица);				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьИИН, 				Форма910_01ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение, , СсылкаФизЛица);
						
			КонецЕсли;
		
		Иначе // если тип Расшифровка "Контрагент"
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("парамКонтрагент"	, СсылкаФизЛица);
			Запрос.УстановитьПараметр("парамПериодПо", 	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Контрагенты.Наименование КАК Контрагент,
			|	Контрагенты.ИдентификационныйКодЛичности КАК ИИН,
			|	Контрагенты.РНН КАК РНН,
			|	Контрагенты.ФизЛицо КАК ФизЛицо
			|ПОМЕСТИТЬ Контрагенты
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Ссылка = &парамКонтрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НомерНалоговойРегистрацииВСтранеРезидентства, """") КАК НомерНалоговойРегистрацииВСтранеРезидентства,
			|	ГражданствоФизЛицСрезПоследних.Страна КАК Страна,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ)
			|			ТОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
			|	КОНЕЦ КАК СтранаРезидентства,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРК, ИСТИНА)
			|	КОНЕЦ КАК НеЯвляетсяНалоговымРезидентомРК
			|ПОМЕСТИТЬ ГражданствоФизЛиц
			|ИЗ
			|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(
			|			&парамПериодПо,
			|			ФизЛицо В
			|				(ВЫБРАТЬ
			|					Контрагенты.ФизЛицо
			|				ИЗ
			|					Контрагенты КАК Контрагенты)) КАК ГражданствоФизЛицСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL
			|			ТОГДА Контрагенты.Контрагент
			|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
			|				КОГДА ФИОФизЛиц.Имя <> """"
			|					ТОГДА "" "" + ФИОФизЛиц.Имя
			|				ИНАЧЕ """"
			|			КОНЕЦ + ВЫБОР
			|				КОГДА ФИОФизЛиц.Отчество <> """"
			|					ТОГДА "" "" + ФИОФизЛиц.Отчество
			|				ИНАЧЕ """"
			|			КОНЕЦ
			|	КОНЕЦ КАК ФИО,
			|	Контрагенты.РНН КАК РНН,
			|	Контрагенты.ИИН КАК ИИН,
			|	ЕСТЬNULL(КлассификаторСтранМира.КодАльфа2, """") КАК КодСтраны,
			|	ГражданствоФизЛиц.НомерНалоговойРегистрацииВСтранеРезидентства КАК НомерНалоговойРегистрацииВСтранеРезидентства,
			|	ГражданствоФизЛиц.Страна КАК Страна,
			|	ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК КАК НеЯвляетсяНалоговымРезидентомРК
			|ИЗ
			|	Контрагенты КАК Контрагенты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
			|				&парамПериодПо,
			|				ФизЛицо В
			|					(ВЫБРАТЬ
			|						Контрагенты.ФизЛицо
			|					ИЗ
			|						Контрагенты КАК Контрагенты)) КАК ФИОФизЛиц
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ГражданствоФизЛиц КАК ГражданствоФизЛиц
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
			|			ПО ГражданствоФизЛиц.СтранаРезидентства = КлассификаторСтранМира.Ссылка
			|		ПО (ИСТИНА)";
			
			Выборка = Запрос.Выполнить().Выбрать();
									
			Если Выборка.Следующий() Тогда
											
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.ИИН) Тогда
					СтрокаИИН = Выборка.ИИН;
				Иначе
					СтрокаИИН = "";
					
					
					ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа C ""ИИН"",
							  |т.к. значение содержит символы, отличные от цифр'");
							  
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,  Формат(Число(НомерСтроки)+1, мФорматНомераСтроки)));
					
				КонецЕсли;
				
				Форма910_01ПолеТабличногоДокументаСтраница1.Области[ОбластьНаименование].Значение = Выборка.ФИО;				
				Форма910_01ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение          = СтрокаИИН;			
				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьНаименование, Выборка.ФИО,,СсылкаФизЛица);				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьИИН, Форма910_01ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение,,СсылкаФизЛица);
				 
			КонецЕсли;  			
		КонецЕсли; 
		
		Форма910_01ПолеТабличногоДокументаСтраница1.Области[ОбластьНаименование].Расшифровка      = СсылкаФизЛица;				
		Форма910_01ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Расшифровка               = СсылкаФизЛица;			
		
	КонецЕсли;
		
КонецПроцедуры 

&НаКлиенте
Процедура Форма910_01ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СсылкаРасшифровки = ВыбранноеЗначение;
	
	ОбластьРасшифровки = ЭтаФорма.ТекущийЭлемент.ТекущаяОбласть;	
	НомерСтроки = Сред(ОбластьРасшифровки.Имя, Найти(ОбластьРасшифровки.Имя, "__") + 2);
    
    Если ВРег(ИсточникВыбора.ИмяФормы) = ?(СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0, ВРег("ВнешнийОтчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора"), 
        ВРег("Отчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора")) Тогда
        Если ВРег(ИсточникВыбора.ИмяСекции) = ВРег("СтатусыФизическихЛиц2022") Тогда 
            Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
                ОбластьРасшифровки.Значение = ВыбранноеЗначение;	
            Иначе
                ОбластьРасшифровки.Значение = ВыбранноеЗначение.КодСтроки;
            КонецЕсли;
            ИмяСтраницы = "Страница" + Прав(ЭтаФорма.ТекущийЭлемент.Имя,1);			
            ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ОбластьРасшифровки.Имя,ОбластьРасшифровки.Значение);
			
		ИначеЕсли ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КатегорииФизическихЛиц2023") Тогда 			
            Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
                ОбластьРасшифровки.Значение = ВыбранноеЗначение;	
            Иначе
                ОбластьРасшифровки.Значение = ВыбранноеЗначение.КодСтроки;
            КонецЕсли;
            ИмяСтраницы = "Страница" + Прав(ЭтаФорма.ТекущийЭлемент.Имя,1);			
            ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ОбластьРасшифровки.Имя,ОбластьРасшифровки.Значение);	
                      
        ИначеЕсли ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КодыСтандартныхВычетов2021")  
            ИЛИ ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КодыПрочихВычетов2021")
            ИЛИ ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КодыВидовДоходовНеПодлежащихНалогообложению910_01") Тогда 			
            Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
                ОбластьРасшифровки.Значение = ВыбранноеЗначение;	
            Иначе
                ОбластьРасшифровки.Значение = ВыбранноеЗначение.КодСтроки;
            КонецЕсли;
            ИмяСтраницы = "Страница" + Прав(ЭтаФорма.ТекущийЭлемент.Имя,1);			
            ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ОбластьРасшифровки.Имя,ОбластьРасшифровки.Значение);	
        КонецЕсли;
    КонецЕсли;
    	
КонецПроцедуры

&НаСервере
Процедура Форма910_02ОбработкаПодбораНаСервере(Расшифровка, ИмяЯчейки, ИмяГруппы, НомерСтроки) Экспорт   

	Если ИмяЯчейки = "Ф910_02ФИОРезидента" Тогда
		СсылкаФизЛица = Расшифровка;
		
		ОбластьНаименование = "Ф910_02ФИОРезидента__" + НомерСтроки;		
		ОбластьИИН = "Ф910_02ИИНРезидента__" + НомерСтроки;
		ОбластьКодСтраны = "Ф910_02КодСтраныРезидента__" + НомерСтроки;
   		ОбластьКодСтраныГражданства = "Ф910_02КодСтраныГражданства__" + НомерСтроки;
		ОбластьНомерРегистрации = "Ф910_02НомерРегистрацииРезидента__" + НомерСтроки;
		ОбластьПризнакРезидентства = "Ф910_02ПризнакРезидентства__" + НомерСтроки;
		
		Если ТипЗнч(Расшифровка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			// Определим сведения о полном ФИО, РНН, ИИН
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("парамФизЛицо", 	СсылкаФизЛица);
			Запрос.УстановитьПараметр("парамПериодПо", 	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			Запрос.УстановитьПараметр("парамНачГода", 	НачалоГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
			Запрос.УстановитьПараметр("парамПустаяДата", '00010101');
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	ФизическиеЛица.Наименование КАК Наименование,
			               |	ФизическиеЛица.РНН КАК РНН,
			               |	ФизическиеЛица.ИдентификационныйКодЛичности КАК ИИН
			               |ПОМЕСТИТЬ ФизическиеЛица
			               |ИЗ
			               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
			               |ГДЕ
			               |	ФизическиеЛица.Ссылка = &парамФизЛицо
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ГражданствоФизЛицСрезПоследних.Период КАК Период,
			               |	ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НомерНалоговойРегистрацииВСтранеРезидентства, """") КАК НомерНалоговойРегистрацииВСтранеРезидентства,
			               |	ГражданствоФизЛицСрезПоследних.Страна,
			               |	ВЫБОР
			               |		КОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ)
			               |			ТОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
			               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
			               |	КОНЕЦ КАК СтранаРезидентства,
			               |	ВЫБОР
			               |		КОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
			               |			ТОГДА ЛОЖЬ
			               |		ИНАЧЕ ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРК, ИСТИНА)
			               |	КОНЕЦ КАК НеЯвляетсяНалоговымРезидентомРК
			               |ПОМЕСТИТЬ ГражданствоФизЛиц
			               |ИЗ
			               |	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамПериодПо, ФизЛицо = &парамФизЛицо) КАК ГражданствоФизЛицСрезПоследних
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВЫБОР
			               |		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL 
			               |			ТОГДА ФизическиеЛица.Наименование
			               |		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
			               |				КОГДА ФИОФизЛиц.Имя <> """"
			               |					ТОГДА "" "" + ФИОФизЛиц.Имя
			               |				ИНАЧЕ """"
			               |			КОНЕЦ + ВЫБОР
			               |				КОГДА ФИОФизЛиц.Отчество <> """"
			               |					ТОГДА "" "" + ФИОФизЛиц.Отчество
			               |				ИНАЧЕ """"
			               |			КОНЕЦ
			               |	КОНЕЦ КАК ФИО,
			               |	ФизическиеЛица.РНН КАК РНН,
			               |	ФизическиеЛица.ИИН КАК ИИН,
			               |	ВЫБОР 
			               |		КОГДА ГражданствоФизЛиц.СтранаРезидентства = КлассификаторСтранМира.Ссылка 
			               |			ТОГДА ЕСТЬNULL(КлассификаторСтранМира.КодАльфа2, """")
			               |		ИНАЧЕ """"
			               |	КОНЕЦ КАК КодСтраны,
			               |	ВЫБОР 
			               |		КОГДА ГражданствоФизЛиц.Страна = КлассификаторСтранМира.Ссылка 
			               |			ТОГДА ЕСТЬNULL(КлассификаторСтранМира.КодАльфа2, """")
			               |		ИНАЧЕ """"
			               |	КОНЕЦ КАК КодСтраныГражданства,
			               |	ГражданствоФизЛиц.НомерНалоговойРегистрацииВСтранеРезидентства КАК НомерНалоговойРегистрацииВСтранеРезидентства,
			               |	ГражданствоФизЛиц.Страна,
			               |	ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК КАК НеЯвляетсяНалоговымРезидентомРК,
			               |	ГражданствоФизЛиц.СтранаРезидентства
			               |ИЗ
			               |	ФизическиеЛица КАК ФизическиеЛица
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамПериодПо, ФизЛицо = &парамФизЛицо) КАК ФИОФизЛиц
			               |		ПО (ИСТИНА)
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ГражданствоФизЛиц КАК ГражданствоФизЛиц
			               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
			               |			ПО ГражданствоФизЛиц.Страна = КлассификаторСтранМира.Ссылка
			               |		ПО (ИСТИНА)";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
													  
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.ИИН) Тогда
					СтрокаИИН = Выборка.ИИН;
				Иначе
					СтрокаИИН = "";
					ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа C ""ИИН"",
							  |т.к. значение содержит символы, отличные от цифр'");
							  
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,  Формат(Число(НомерСтроки)+1,мФорматНомераСтроки)));
							  
				КонецЕсли;
				
				НомерРегистрации 	= Выборка.НомерНалоговойРегистрацииВСтранеРезидентства;
				ПризнакРезидентства = Выборка.НеЯвляетсяНалоговымРезидентомРК;
				
				Если Не ЗначениеЗаполнено(ПризнакРезидентства) Тогда 
					ТекстСообщения = НСтр("ru = 'Для ""%1"" не заполнена информация о гражданстве.
							  |Для физического лица признак ""Не является налоговым резидентом РК"" установлен в ""ИСТИНА""'");
							  
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,  Выборка.ФИО));
					
					ПризнакРезидентства = Истина;
				КонецЕсли;
				
				КодСтраны            = ?(ПризнакРезидентства, Выборка.КодСтраны, "KZ");
				КодСтраныГражданства = ?(Выборка.Страна = Справочники.КлассификаторСтранМира.Казахстан ИЛИ Выборка.Страна = Null, "",
					?(ЗначениеЗаполнено(Выборка.КодСтраныГражданства), Выборка.КодСтраныГражданства, "00"));
				
				Форма910_02ПолеТабличногоДокументаСтраница1.Области[ОбластьПризнакРезидентства].Значение = ?(ПризнакРезидентства, СтруктураРеквизитовФормы.ОтметкаНеРезидентов,СтруктураРеквизитовФормы.ОтметкаРезидентов);				
				Форма910_02ПолеТабличногоДокументаСтраница1.Области[ОбластьНаименование].Значение = Выборка.ФИО;				
				Форма910_02ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение 			= СтрокаИИН;
				Форма910_02ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраны].Значение 		= КодСтраны;
   				Форма910_02ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраныГражданства].Значение   = КодСтраныГражданства;
				Форма910_02ПолеТабличногоДокументаСтраница2.Области[ОбластьНомерРегистрации].Значение       = НомерРегистрации;

				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьНаименование, 		Выборка.ФИО, ,СсылкаФизЛица);				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьИИН, 				Форма910_02ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение, , СсылкаФизЛица);
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьКодСтраны, 			Форма910_02ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраны].Значение, ,СсылкаФизЛица);				
   				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьКодСтраныГражданства, Форма910_02ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраныГражданства].Значение, ,СсылкаФизЛица);				
                РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьПризнакРезидентства, ?(ПризнакРезидентства, СтруктураРеквизитовФормы.ОтметкаНЕРезидентов, СтруктураРеквизитовФормы.ОтметкаРезидентов), ,СсылкаФизЛица);

				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница2", ОбластьНомерРегистрации, Форма910_02ПолеТабличногоДокументаСтраница2.Области[ОбластьНомерРегистрации].Значение, , СсылкаФизЛица);

			КонецЕсли;
		
		Иначе // если тип Расшифровка "Контрагент"
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("парамКонтрагент"	, СсылкаФизЛица);
			Запрос.УстановитьПараметр("парамПериодПо", 	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Контрагенты.Наименование КАК Контрагент,
			|	Контрагенты.ИдентификационныйКодЛичности КАК ИИН,
			|	Контрагенты.РНН КАК РНН,
			|	Контрагенты.ФизЛицо КАК ФизЛицо
			|ПОМЕСТИТЬ Контрагенты
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Ссылка = &парамКонтрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НомерНалоговойРегистрацииВСтранеРезидентства, """") КАК НомерНалоговойРегистрацииВСтранеРезидентства,
			|	ГражданствоФизЛицСрезПоследних.Страна КАК Страна,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ)
			|			ТОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
			|	КОНЕЦ КАК СтранаРезидентства,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРК, ИСТИНА)
			|	КОНЕЦ КАК НеЯвляетсяНалоговымРезидентомРК
			|ПОМЕСТИТЬ ГражданствоФизЛиц
			|ИЗ
			|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(
			|			&парамПериодПо,
			|			ФизЛицо В
			|				(ВЫБРАТЬ
			|					Контрагенты.ФизЛицо
			|				ИЗ
			|					Контрагенты КАК Контрагенты)) КАК ГражданствоФизЛицСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL
			|			ТОГДА Контрагенты.Контрагент
			|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
			|				КОГДА ФИОФизЛиц.Имя <> """"
			|					ТОГДА "" "" + ФИОФизЛиц.Имя
			|				ИНАЧЕ """"
			|			КОНЕЦ + ВЫБОР
			|				КОГДА ФИОФизЛиц.Отчество <> """"
			|					ТОГДА "" "" + ФИОФизЛиц.Отчество
			|				ИНАЧЕ """"
			|			КОНЕЦ
			|	КОНЕЦ КАК ФИО,
			|	Контрагенты.РНН КАК РНН,
			|	Контрагенты.ИИН КАК ИИН,
			|	ВЫБОР 
			|       КОГДА ГражданствоФизЛиц.СтранаРезидентства = КлассификаторСтранМира.Ссылка 
			|           ТОГДА ЕСТЬNULL(КлассификаторСтранМира.КодАльфа2, """")
			|       ИНАЧЕ """"
			|   КОНЕЦ КАК КодСтраны,
			|	ВЫБОР 
			|       КОГДА ГражданствоФизЛиц.Страна = КлассификаторСтранМира.Ссылка 
			|           ТОГДА ЕСТЬNULL(КлассификаторСтранМира.КодАльфа2, """")
			|       ИНАЧЕ """"
			|   КОНЕЦ КАК КодСтраныГражданства,
			|	ГражданствоФизЛиц.НомерНалоговойРегистрацииВСтранеРезидентства КАК НомерНалоговойРегистрацииВСтранеРезидентства,
			|	ГражданствоФизЛиц.Страна КАК Страна,
			|	ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК КАК НеЯвляетсяНалоговымРезидентомРК
			|ИЗ
			|	Контрагенты КАК Контрагенты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
			|				&парамПериодПо,
			|				ФизЛицо В
			|					(ВЫБРАТЬ
			|						Контрагенты.ФизЛицо
			|					ИЗ
			|						Контрагенты КАК Контрагенты)) КАК ФИОФизЛиц
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ГражданствоФизЛиц КАК ГражданствоФизЛиц
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
			|			ПО ГражданствоФизЛиц.Страна = КлассификаторСтранМира.Ссылка
			|		ПО (ИСТИНА)";
			
			Выборка = Запрос.Выполнить().Выбрать();
									
			Если Выборка.Следующий() Тогда
											
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.ИИН) Тогда
					СтрокаИИН = Выборка.ИИН;
				Иначе
					СтрокаИИН = "";
					
					
					ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа C ""ИИН"",
							  |т.к. значение содержит символы, отличные от цифр'");
							  
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,  Формат(Число(НомерСтроки)+1, мФорматНомераСтроки)));
					
				КонецЕсли;
				
				НомерРегистрации 	= Выборка.НомерНалоговойРегистрацииВСтранеРезидентства;
				Если Не ЗначениеЗаполнено(Выборка.НеЯвляетсяНалоговымРезидентомРК) Тогда
					ПризнакРезидентства = Ложь;
				Иначе
					ПризнакРезидентства = Выборка.НеЯвляетсяНалоговымРезидентомРК;
				КонецЕсли;
				
				НомерРегистрации = Выборка.НомерНалоговойРегистрацииВСтранеРезидентства;
				
				КодСтраны            = ?(ПризнакРезидентства, Выборка.КодСтраны, "KZ");
				КодСтраныГражданства = ?(Выборка.Страна = Справочники.КлассификаторСтранМира.Казахстан ИЛИ Выборка.Страна = Null, "",
					?(ЗначениеЗаполнено(Выборка.КодСтраныГражданства), Выборка.КодСтраныГражданства, "00"));
				
				Форма910_02ПолеТабличногоДокументаСтраница1.Области[ОбластьНаименование].Значение = Выборка.ФИО;				
				Форма910_02ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение          = СтрокаИИН;			
				Форма910_02ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраны].Значение    = КодСтраны;
  				Форма910_02ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраныГражданства].Значение = КодСтраныГражданства;
				Форма910_02ПолеТабличногоДокументаСтраница1.Области[ОбластьПризнакРезидентства].Значение  = ?(ПризнакРезидентства, СтруктураРеквизитовФормы.ОтметкаНЕРезидентов, СтруктураРеквизитовФормы.ОтметкаРезидентов);
				Форма910_02ПолеТабличногоДокументаСтраница2.Области[ОбластьНомерРегистрации].Значение     = НомерРегистрации;
				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьНаименование, Выборка.ФИО,,СсылкаФизЛица);				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьИИН, Форма910_02ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение,,СсылкаФизЛица);
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьПризнакРезидентства, ?(ПризнакРезидентства, СтруктураРеквизитовФормы.ОтметкаНеРезидентов, СтруктураРеквизитовФормы.ОтметкаРезидентов),,СсылкаФизЛица);
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьКодСтраны, Форма910_02ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраны].Значение,,СсылкаФизЛица);
   				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьКодСтраныГражданства, Форма910_02ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраныГражданства].Значение,,СсылкаФизЛица);
                РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница2", ОбластьНомерРегистрации, Форма910_02ПолеТабличногоДокументаСтраница2.Области[ОбластьНомерРегистрации].Значение,,СсылкаФизЛица);

			КонецЕсли;  			
		КонецЕсли; 
		
		Форма910_02ПолеТабличногоДокументаСтраница1.Области[ОбластьНаименование].Расшифровка        = СсылкаФизЛица;				
		Форма910_02ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Расшифровка 			    = СсылкаФизЛица;			
		Форма910_02ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраны].Расшифровка 	        = СсылкаФизЛица;
  		Форма910_02ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраныГражданства].Расшифровка= СсылкаФизЛица;
		Форма910_02ПолеТабличногоДокументаСтраница1.Области[ОбластьПризнакРезидентства].Расшифровка = СсылкаФизЛица;
		Форма910_02ПолеТабличногоДокументаСтраница2.Области[ОбластьНомерРегистрации].Расшифровка 	= СсылкаФизЛица;
		
	КонецЕсли;
		
КонецПроцедуры 

&НаСервере
Процедура Форма910_01РасчетНаСервере(Инд,Колонка)
	
	КодФормы = "Форма910_01";  	
	Индекс = Инд-1;
	
	мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, КодФормы);
	
	РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтаФорма, КодФормы,мМногострочнаяСтруктура);
	Модифицированность = Истина;
	
КонецПроцедуры // Форма910_01РасчетНаСервере()

////////////////////////////////////////////////////////////////////////////////
// Форма 910.01

&НаСервере
//Процедура выполняет выбор процедуры расчета.
//ВыборРасчета выполняется при восстановлении данных, при изменении поля табличного документа
//
//Параметры:    ТекФорма - имя текущей формы
//              Индекс - индекс строки для многострочной формы
//              Показатель - имя ячейки, откуда была вызвана процедура расчета многострочной
//                           формы, без указания номера строки (например, без "__1")
//
Процедура ВыборРасчета(ТекФорма, Индекс = Неопределено, Показатель = Неопределено) Экспорт
	
	Если ТекФорма = "Форма910_01" Тогда
		Форма910_01РасчетНаСервере(Индекс, Показатель);
	КонецЕсли;		
	
КонецПроцедуры // ВыборРасчета()

&НаСервере
Функция Форма910_01РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
	Запрос =  Новый Запрос;
	Запрос.УстановитьПараметр("парамНалогоплательщик", 		Налогоплательщик);
	Запрос.УстановитьПараметр("парамПериодС", 				НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПериодПо", 				КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПослеПериодПо", 		КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) + 1);
	Запрос.УстановитьПараметр("парамПриход",				ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамРасход",				ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("парамВидСтрокиИсчисление",	Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежаНалог",		Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	Запрос.УстановитьПараметр("парамНеОблагаетсяЦеликом",	Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом);
	Запрос.УстановитьПараметр("парамФизЛицо",				Перечисления.ЮрФизЛицо.ФизЛицо);
	Запрос.УстановитьПараметр("парамПустаяДата",			'00010101');
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", 	мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());
	
	// если налогоплательщик - ИП, то исключим данные самого индивидуального предпринимателя
	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Налогоплательщик.ИндивидуальныйПредприниматель);
	Иначе
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Неопределено);
	КонецЕсли;
	
	// Определим учетную политику по НУ
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации,
	|	УчетнаяПолитикаНУ.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ,
    |	УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН
	|ИЗ	
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодПо, Организация = &парамНалогоплательщик) КАК УчетнаяПолитикаНУ
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОтражениеПоПериодуРегистрации 				= Выборка.ОтражениеПоПериодуРегистрации;
		ОрганизацияЯвляетсяПлательщикомСН			= Выборка.ОрганизацияЯвляетсяПлательщикомСН;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Выборка.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ;
	Иначе
		ОтражениеПоПериодуРегистрации 				= Ложь;
		ОрганизацияЯвляетсяПлательщикомСН			= Ложь;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Ложь;
	КонецЕсли; 
	
	//ЕП
	ОрганизацияЯвляетсяПлательщикомЕП = ?(СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж"), Истина, Ложь);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	ТекстЗапроса = " 
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТ_ДатыПериодовГода
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря  КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &парамПериодС И &парамПериодПо
	|;
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	МАКСИМУМ(УчетнаяПолитикаНУ.Период) КАК ПериодСреза,
	|	УчетнаяПолитикаНУ.Организация КАК Организация
	|ПОМЕСТИТЬ УчетнаяПолитикаНУПериоды
	|ИЗ
	|	ВТ_ДатыПериодовГода КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНУ
	|		ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(УчетнаяПолитикаНУ.Период, МЕСЯЦ))
	|ГДЕ
	|	УчетнаяПолитикаНУ.Организация = &парамНалогоплательщик
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	УчетнаяПолитикаНУ.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период,
	|	УчетнаяПолитикаНУ.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНУПериоды.Период КАК Период,
	|	УчетнаяПолитикаНУ.НеПрименятьКорректировкуПрочихНалоговВзносовОтчислений КАК НеПрименятьКорректировкуСН,
    |   УчетнаяПолитикаНУ.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника КАК КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника, 
	|	УчетнаяПолитикаНУ.ПорядокОбложенияДоходовРаботников КАК ПорядокОбложенияДоходовРаботников
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитикаПоМесяцам
	|ИЗ
	|	УчетнаяПолитикаНУПериоды КАК УчетнаяПолитикаНУПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНУ
	|		ПО (УчетнаяПолитикаНУПериоды.ПериодСреза = НАЧАЛОПЕРИОДА(УчетнаяПолитикаНУ.Период, МЕСЯЦ))
	|			И УчетнаяПолитикаНУПериоды.Организация = УчетнаяПолитикаНУ.Организация
	|;
	|
    |////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|ПОМЕСТИТЬ РасчетныеПоказателиПериоды
	|ИЗ
	|	ВТ_ДатыПериодовГода КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(РасчетныеПоказатели.Период, МЕСЯЦ))
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетныеПоказателиПериоды.Период КАК Период,
	|	РасчетныеПоказатели.РазмерМРП КАК РазмерМРП
	|ПОМЕСТИТЬ ВТ_РасчетныеПоказателиПоМесяцам
	|ИЗ
	|	РасчетныеПоказателиПериоды КАК РасчетныеПоказателиПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО (РасчетныеПоказателиПериоды.ПериодСреза = НАЧАЛОПЕРИОДА(РасчетныеПоказатели.Период, МЕСЯЦ))
	|;
    |
    |////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
    |	Периоды.Период КАК Период,
    |	ФизическиеЛица.Ссылка КАК ФИО
	|ПОМЕСТИТЬ ВТ_Периоды
    |ИЗ
    |	ВТ_ДатыПериодовГода КАК Периоды
    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
    |		ПО (ИСТИНА)
    |ГДЕ
    |	ФизическиеЛица.ЭтоГруппа = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
    |	Период,
    |	ФИО
	|;
	|/////////////////////////////////////////////////
	|ВЫБРАТЬ
    |	Периоды.Период КАК Период,
    |	Периоды.ФИО КАК ФИО,
    |	МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСреза
	|ПОМЕСТИТЬ ВТ_ГражданствоФизЛицСрезПоследних 
    |	ИЗ
    |		ВТ_Периоды КАК Периоды
    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
    |			ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(ГражданствоФизЛиц.Период, МЕСЯЦ))
    |				И Периоды.ФИО = ГражданствоФизЛиц.ФизЛицо
    |		
    |СГРУППИРОВАТЬ ПО
    |	Периоды.Период,
    |	Периоды.ФИО
	|ИНДЕКСИРОВАТЬ ПО
    |	ПериодСреза,
    |	ФИО
	|;
	|/////////////////////////////////////////////////////
	|ВЫБРАТЬ
    |	ГражданствоФизЛицСрезПоследних.Период КАК Период,
    |	ГражданствоФизЛицСрезПоследних.ФИО КАК ФИО
	|ПОМЕСТИТЬ ВТ_ИтогГражданство
    |	ИЗ
    |		ВТ_ГражданствоФизЛицСрезПоследних КАК ГражданствоФизЛицСрезПоследних
    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
    |			ПО ГражданствоФизЛицСрезПоследних.ПериодСреза = ГражданствоФизЛиц.Период
    |				И ГражданствоФизЛицСрезПоследних.ФИО = ГражданствоФизЛиц.ФизЛицо
    |	ГДЕ
    |		(ВЫБОР
    |					КОГДА ГражданствоФизЛиц.Страна ЕСТЬ NULL 
    |						ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
    |					ИНАЧЕ ГражданствоФизЛиц.Страна
    |				КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
    |	
    |	ОБЪЕДИНИТЬ ВСЕ
    |	
    |	ВЫБРАТЬ
    |		Периоды.Период,
    |		Контрагенты.Ссылка
    |	ИЗ
    |		ВТ_ДатыПериодовГода КАК Периоды
    |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
    |			ПО (ИСТИНА)
    |	ГДЕ
    |		Контрагенты.ЭтоГруппа = ЛОЖЬ
    |		И (ВЫБОР
    |					КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
    |						ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
    |					ИНАЧЕ Контрагенты.СтранаРезидентства
    |				КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
	|;
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ИтогГражданство.Период КАК Период,
    |	ИтогГражданство.ФИО КАК ФИО
    |ПОМЕСТИТЬ ВТ_Гражданство
    |ИЗ
    |	ВТ_ИтогГражданство КАК ИтогГражданство
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	Период,
    |	ФИО";
		
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИПНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ИПНСведенияОДоходах.СтруктурнаяЕдиница,
	|	0 КАК ДополнительныйРазрез,
	|	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) КАК НачисленныеДоходы,
	|	СУММА(ВЫБОР
	|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НеПодлежащиеНалогооблажению,
	|	СУММА(0) КАК НалоговыеВычеты,
	|	СУММА(0) КАК ИПНИсчисленный,
	|	СУММА(0) КАК ОПВ,
	|	СУММА(0) КАК ВОСМС,
	|	СУММА(0) КАК ПрочиеНалоговыеВычеты,
	|	СУММА(ВЫБОР
	|		КОГДА ИПНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|			ТОГДА ИПНСведенияОДоходах.ОблагаемаяБазаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК ОблагаемыйДоходИПН,
	|	СУММА(0) КАК ВыплаченоДоходов,
	|	СУММА(0) КАК ИПНПодлежащийУплате,
	|	СУММА(0) КАК СоциальныеОтчисления,
	|	СУММА(0) КАК ОППВ,
	|	СУММА(0) КАК ООСМС,
	|	ВЫБОР 
	|		КОГДА ИПНСведенияОДоходах.СпособНалогообложения = &парамНеОблагаетсяЦеликом 
	|			И ИПНСведенияОДоходах.СуммаДоходаОборот <> 0
	|			ТОГДА ЕСТЬNULL(КодыСтрокДекларации.ВидРасчета, ИПНСведенияОДоходах.ВидРасчета)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка)
	|	КОНЕЦ КАК ВидВычета,
	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
	|	СУММА(0) КАК ВОСМСПодлежащийПеречислению,
	|	СУММА(0) КАК ЗадолженностьПоДоходам,
	|	ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ИПНСведенияОДоходах.ВидРасчета) КАК КодСтроки,
	|	СУММА(0) КАК ОПВР
	|ПОМЕСТИТЬ вт_Данные
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|				И ВЫБОР
	|					КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						ТОГДА НЕ ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ИПНСведенияОДоходах
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                
	|		ПО (НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) = ВТ_Гражданство.Период)      	
	|			 И (ВЫБОР
	|					КОГДА ИПНСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ИПНСведенияОДоходах.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ИПНСведенияОДоходах.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ИПНСведенияОДоходах.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоСН.СрезПоследних(&парамПериодПо, ) КАК КодыСтрокДекларации
	|			ПО ИПНСведенияОДоходах.ВидРасчета = КодыСтрокДекларации.ВидРасчета 
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
	|ГДЕ
	|	ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ИПНСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
  	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ),
	|	ИПНСведенияОДоходах.СтруктурнаяЕдиница,
	|	ИПНСведенияОДоходах.ФизЛицо,
	|	ВЫБОР 
	|		КОГДА ИПНСведенияОДоходах.СпособНалогообложения = &парамНеОблагаетсяЦеликом 
	|			И ИПНСведенияОДоходах.СуммаДоходаОборот <> 0
	|			ТОГДА ЕСТЬNULL(КодыСтрокДекларации.ВидРасчета, ИПНСведенияОДоходах.ВидРасчета)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ИПНСведенияОДоходах.ВидРасчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ),
	|	СведенияОбИсчисленииВычетовИПНОбороты.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета КАК ВидВычета,
	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
	|	СУММА(0) КАК ВОСМСПодлежащийПеречислению,
	|	СУММА(0) КАК ЗадолженностьПоДоходам,
	|	"""" КАК КодСтроки,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			Месяц,
	|			Налогоплательщик = &парамНалогоплательщик
	|				И (ВидВычета = Значение(Справочник.ВычетыИПН.Стандартный1МЗП)
	|					ИЛИ ВидВычета = Значение(Справочник.ВычетыИПН.Стандартный75МЗПИнвалиды)
	|					ИЛИ ВидВычета = Значение(Справочник.ВычетыИПН.Стандартный75МЗПРодители))
	|				И ВЫБОР
	|					КОГДА ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
	|						ТОГДА НЕ ФизическоеЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И ФизическоеЛицо <> &парамИндивидуальныйПредприниматель) КАК СведенияОбИсчисленииВычетовИПНОбороты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                
	|		ПО (НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.ПериодРегистрации, МЕСЯЦ) = ВТ_Гражданство.Период)      	
	|			 И (ВЫБОР
	|					КОГДА СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
	|						И СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)  
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
	|ГДЕ
	|	ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ),
	|	СведенияОбИсчисленииВычетовИПНОбороты.СтруктурнаяЕдиница,
	|	СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо,
	|	СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИПНРасчетыСБюджетом.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ),
	|	ИПНРасчетыСБюджетом.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(ИПНРасчетыСБюджетом.Налог),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
	|	СУММА(0) КАК ВОСМСПодлежащийПеречислению,
	|	СУММА(0) КАК ЗадолженностьПоДоходам,
	|	"""" КАК КодСтроки,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                
	|		ПО (НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)      	
	|			 И (ВЫБОР
	|					КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ИПНРасчетыСБюджетом.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ) 
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
	|ГДЕ
	|	ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик
	|	И ИПНРасчетыСБюджетом.Период МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ВЫБОР
	|			КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|				ТОГДА НЕ ИПНРасчетыСБюджетом.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ИПНРасчетыСБюджетом.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|	И ИПНРасчетыСБюджетом.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ),
	|	ИПНРасчетыСБюджетом.СтруктурнаяЕдиница,
	|	ИПНРасчетыСБюджетом.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОПВРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.Период, МЕСЯЦ),
	|	ОПВРасчетыСФондами.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(ОПВРасчетыСФондами.Взнос),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
	|	СУММА(0) КАК ВОСМСПодлежащийПеречислению,
	|	СУММА(0) КАК ЗадолженностьПоДоходам,
	|	"""" КАК КодСтроки,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                
	|		ПО (НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)      	
	|			 И (ВЫБОР
	|					КОГДА ОПВРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ОПВРасчетыСФондами.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ОПВРасчетыСФондами.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ОПВРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
	|ГДЕ
	|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВРасчетыСФондами.Период МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ВЫБОР
	|			КОГДА ОПВРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|				ТОГДА НЕ ОПВРасчетыСФондами.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ОПВРасчетыСФондами.ВидПлатежа = &парамВидПлатежаНалог
	|	И ОПВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ОПВРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ЛОЖЬ 
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|	И ОПВРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.Период, МЕСЯЦ),
	|	ОПВРасчетыСФондами.СтруктурнаяЕдиница,
	|	ОПВРасчетыСФондами.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВОСМСРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.Период, МЕСЯЦ),
	|	ВОСМСРасчетыСФондами.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(ВОСМСРасчетыСФондами.Взнос),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
	|	СУММА(0) КАК ВОСМСПодлежащийПеречислению,
	|	СУММА(0) КАК ЗадолженностьПоДоходам,
	|	"""" КАК КодСтроки,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                
	|		ПО (НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)      	
	|			 И (ВЫБОР
	|					КОГДА ВОСМСРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ВОСМСРасчетыСФондами.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ВОСМСРасчетыСФондами.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ВОСМСРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
	|ГДЕ
	|	ВОСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ВОСМСРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ВОСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ВОСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ВЫБОР
	|			КОГДА ВОСМСРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|				ТОГДА НЕ ВОСМСРасчетыСФондами.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВОСМСРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ВОСМСРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|	И ВОСМСРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.Период, МЕСЯЦ),
	|	ВОСМСРасчетыСФондами.СтруктурнаяЕдиница,
	|	ВОСМСРасчетыСФондами.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// ОПВ к перечислению
	|ВЫБРАТЬ
	|	ОПВПодлежитПеречислениюВФонды.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ),
	|	ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
	|	СУММА(ОПВПодлежитПеречислениюВФонды.Взнос) КАК ОПВПодлежащийПеречислению,
	|	СУММА(0) КАК ВОСМСПодлежащийПеречислению,
	|	СУММА(0) КАК ЗадолженностьПоДоходам,
	|	"""" КАК КодСтроки,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.ОПВПодлежитПеречислениюВФонды КАК ОПВПодлежитПеречислениюВФонды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство
	|		ПО (НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ) = ВТ_Гражданство.Период)
	|			И (ВЫБОР
	|					КОГДА ОПВПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ОПВПодлежитПеречислениюВФонды.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ОПВПодлежитПеречислениюВФонды.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ОПВПодлежитПеречислениюВФонды.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
  	|ГДЕ
	|	ОПВПодлежитПеречислениюВФонды.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВПодлежитПеречислениюВФонды.Период МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ОПВПодлежитПеречислениюВФонды.ВидДвижения  = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВПодлежитПеречислениюВФонды.ВидСтроки  = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|   И ВЫБОР
	|	    КОГДА ОПВПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|				ТОГДА НЕ ОПВПодлежитПеречислениюВФонды.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|		ИНАЧЕ ИСТИНА
	|	  КОНЕЦ
	|	И ОПВПодлежитПеречислениюВФонды.Активность = ИСТИНА
	|	И ОПВПодлежитПеречислениюВФонды.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ОПВПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ),
	|	ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница,
	|	ОПВПодлежитПеречислениюВФонды.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// ВОСМС к перечислению
	|ВЫБРАТЬ
	|	ВОСМСПодлежитПеречислениюВФонды.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ВОСМСПодлежитПеречислениюВФонды.Период, МЕСЯЦ),
	|	ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
	|   СУММА(0) КАК ОПВПодлежащийПеречислению, 
	|	СУММА(ВОСМСПодлежитПеречислениюВФонды.Взнос) КАК ВОСМСПодлежащийПеречислению,
	|   СУММА(0) КАК ЗадолженностьПоДоходам,
	|	"""" КАК КодСтроки,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.ВОСМСПодлежитПеречислениюВФонды КАК ВОСМСПодлежитПеречислениюВФонды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство
	|		ПО (НАЧАЛОПЕРИОДА(ВОСМСПодлежитПеречислениюВФонды.Период, МЕСЯЦ) = ВТ_Гражданство.Период)
	|			И (ВЫБОР
	|					КОГДА ВОСМСПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ВОСМСПодлежитПеречислениюВФонды.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ВОСМСПодлежитПеречислениюВФонды.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ВОСМСПодлежитПеречислениюВФонды.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ) 
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ВОСМСПодлежитПеречислениюВФонды.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
	|ГДЕ
	|	ВОСМСПодлежитПеречислениюВФонды.Налогоплательщик = &парамНалогоплательщик
	|	И ВОСМСПодлежитПеречислениюВФонды.Период МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ВОСМСПодлежитПеречислениюВФонды.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ВОСМСПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|   И ВЫБОР
	|		КОГДА ВОСМСПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|	        ТОГДА НЕ ВОСМСПодлежитПеречислениюВФонды.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|		ИНАЧЕ ИСТИНА
	|	  КОНЕЦ
	|	И ВОСМСПодлежитПеречислениюВФонды.Активность = ИСТИНА
   	|	И ВОСМСПодлежитПеречислениюВФонды.ФизЛицо <> &парамИндивидуальныйПредприниматель 
	|	И ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ВОСМСПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|	И ВОСМСПодлежитПеречислениюВФонды.Активность
   	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВОСМСПодлежитПеречислениюВФонды.Период, МЕСЯЦ),
	|	ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница,
	|	ВОСМСПодлежитПеречислениюВФонды.ФизЛицо
    |
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ),
	|	СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(СведенияОбИсчисленииВычетовИПН.ПримененныйВычетОборот),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
    |   СведенияОбИсчисленииВычетовИПН.ВидВычета КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |   СУММА(0) КАК ЗадолженностьПоДоходам,
    |	"""" КАК КодСтроки,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И ФизическоеЛицо <> &парамИндивидуальныйПредприниматель 
	|			И (ВидВычета = Значение(Справочник.ВычетыИПН.ДобровольныеПенсионныеВзносы)
	|				ИЛИ ВидВычета = Значение(Справочник.ВычетыИПН.ПогашениеВознагражденияПоЖилищнымЗаймам)
	|				ИЛИ ВидВычета = Значение(Справочник.ВычетыИПН.НаОплатуМедицинскихУслуг)
	// суммы вручную созданных вычетов пользователя отнесем в графу прочих вычетов L
	|					ИЛИ НЕ ВидВычета.Предопределенный)
	|			И ВЫБОР
	|				КОГДА ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
	|					ТОГДА НЕ ФизическоеЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ) КАК СведенияОбИсчисленииВычетовИПН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                    
	|			ПО (НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ) = ВТ_Гражданство.Период)        
	|			И (ВЫБОР
	|					КОГДА СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
	|						И СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ) 
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период) 
	|ГДЕ
	|	ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	| 
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ),
	|	СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница,
	|	СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо,
    |   СведенияОбИсчисленииВычетовИПН.ВидВычета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// выплаченные доходы
	|ВЫБРАТЬ
	|	ВыплаченныеДоходы.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ВыплаченныеДоходы.Период, МЕСЯЦ),
	|	ВыплаченныеДоходы.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(ВыплаченныеДоходы.СуммаДоходаОборот),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |   СУММА(0) КАК ЗадолженностьПоДоходам,
    |	"""" КАК КодСтроки,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.ВыплаченныеДоходыРаботникамОрганизацийНУ.Обороты(
	|		    &парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель
	|			И ВЫБОР
	|				КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	|					ТОГДА НЕ ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|			) КАК ВыплаченныеДоходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
	|			ПО (НАЧАЛОПЕРИОДА(ВыплаченныеДоходы.Период, МЕСЯЦ) = ВТ_Гражданство.Период)                        	
	|				И (ВЫБОР
	|						КОГДА ВыплаченныеДоходы.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|							И ВыплаченныеДоходы.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|							ТОГДА ВыплаченныеДоходы.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|						ИНАЧЕ ВыплаченныеДоходы.ФизЛицо = ВТ_Гражданство.ФИО
	|		   		   КОНЕЦ)  
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ВыплаченныеДоходы.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
	|ГДЕ
	|	ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ВыплаченныеДоходы.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВыплаченныеДоходы.Период, МЕСЯЦ),
	|	ВыплаченныеДоходы.СтруктурнаяЕдиница,
	|	ВыплаченныеДоходы.ФизЛицо
    |
    |// Задолженность по доходам, невыплаченным физлицам, из текущих взаиморасчетов
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
    |	ВзаиморасчетыСРаботниками.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов, МЕСЯЦ),
	|	ВзаиморасчетыСРаботниками.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |	СУММА(ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток) КАК ЗадолженностьПоДоходам,
    |	"""" КАК КодСтроки,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(
	|			&парамПослеПериодПо,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ВзаиморасчетыСРаботниками 
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
	|		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов, МЕСЯЦ) = ВТ_Гражданство.Период)             
	|				И ВзаиморасчетыСРаботниками.ФизЛицо = ВТ_Гражданство.ФИО  
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
	|ГДЕ
	|	ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ВзаиморасчетыСРаботниками.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
   	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов, МЕСЯЦ),
	|	ВзаиморасчетыСРаботниками.СтруктурнаяЕдиница,
	|	ВзаиморасчетыСРаботниками.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Задолженность по доходам, невыплаченным физлицам, из депонированных сумм
	|ВЫБРАТЬ
    |	ВзаиморасчетыСДепонентами.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСДепонентами.ПериодВзаиморасчетов, МЕСЯЦ),
	|	ВзаиморасчетыСДепонентами.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |	СУММА(ВзаиморасчетыСДепонентами.СуммаВзаиморасчетовОстаток) КАК ЗадолженностьПоДоходам,
    |	"""" КАК КодСтроки,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций.Остатки(
	|			&парамПослеПериодПо,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ВзаиморасчетыСДепонентами 
   	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
	|		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСДепонентами.ПериодВзаиморасчетов, МЕСЯЦ) = ВТ_Гражданство.Период)             
	|				И ВзаиморасчетыСДепонентами.ФизЛицо = ВТ_Гражданство.ФИО  
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСДепонентами.ПериодВзаиморасчетов, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
	|ГДЕ
	|	ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ВзаиморасчетыСДепонентами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
   	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСДепонентами.ПериодВзаиморасчетов, МЕСЯЦ),
	|	ВзаиморасчетыСДепонентами.СтруктурнаяЕдиница,
	|	ВзаиморасчетыСДепонентами.ФизЛицо
    |
    |ОБЪЕДИНИТЬ ВСЕ
	|
	|// Задолженность по доходам, невыплаченным физлицам, из оплаты по актам закупа
	|ВЫБРАТЬ
    |	ВзаиморасчетыСКонтрагентамиФизЛицами.Контрагент КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСКонтрагентамиФизЛицами.ПериодВзаиморасчетов, МЕСЯЦ),
	|	ВзаиморасчетыСКонтрагентамиФизЛицами.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
	|	СУММА(ВзаиморасчетыСКонтрагентамиФизЛицами.СуммаВзаиморасчетовОстаток) КАК ЗадолженностьПоДоходам,
    |	"""" КАК КодСтроки,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами.Остатки(
	|			&парамПослеПериодПо,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И НЕ Контрагент.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус) КАК ВзаиморасчетыСКонтрагентамиФизЛицами
   	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
	|		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСКонтрагентамиФизЛицами.ПериодВзаиморасчетов, МЕСЯЦ) = ВТ_Гражданство.Период)             
	|				И ВзаиморасчетыСКонтрагентамиФизЛицами.Контрагент.ФизЛицо = ВТ_Гражданство.ФИО  
   	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСКонтрагентамиФизЛицами.ПериодВзаиморасчетов, МЕСЯЦ),
	|	ВзаиморасчетыСКонтрагентамиФизЛицами.СтруктурнаяЕдиница,
	|	ВзаиморасчетыСКонтрагентамиФизЛицами.Контрагент
    |
	|";		
		
	// Если суммы удержаний по исполнительным листам включаются по фактическому перечислению
	Если Не ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ Тогда

		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// ставим остатки сумм по ИЛ как задолженность по невыплаченным доходам работникам, с которых удержаны ИЛ
        |ВЫБРАТЬ
        |	ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо КАК ФизЛицо,
    	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.ПериодВзаиморасчетов, МЕСЯЦ),
    	|	ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница,
    	|	0,
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
        |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
       	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
        |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
        |	СУММА(ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовОстаток + ВзаиморасчетыСПолучателямиИЛ.СуммаСборовОстаток) КАК ЗадолженностьПоДоходам,
        |	"""" КАК КодСтроки,
		|	СУММА(0) КАК ОПВР
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Остатки(
		|				&парамПослеПериодПо,
		|				Налогоплательщик = &парамНалогоплательщик
        |				И ДокументОснование.ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ВзаиморасчетыСПолучателямиИЛ
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
        |		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.ПериодВзаиморасчетов, МЕСЯЦ) = ВТ_Гражданство.Период)             
        |				И ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо = ВТ_Гражданство.ФИО 
        |
        |СГРУППИРОВАТЬ ПО
        |	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.ПериодВзаиморасчетов, МЕСЯЦ),
        |	ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница,
        |	ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо
        |
        |";		
		
	//Иначе
		// удержания по ИЛ уже находятся в регистре накопления ВыплаченныеДоходыРаботникамОрганизацийНУ
	КонецЕсли;
	
	// Необходимо добавить получателей по исполнительным листам
	Если ПризнакАлиментов Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// ставим остатки сумм по ИЛ как задолженность по невыплаченным доходам получателям ИЛ
		|ВЫБРАТЬ
        |	ВзаиморасчетыСПолучателямиИЛ.Получатель КАК ФизЛицо,
  	    |	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.ПериодВзаиморасчетов, МЕСЯЦ),
    	|	ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница,
    	|	1,
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
        |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
       	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
        |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
		|	СУММА(ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовОстаток) КАК ЗадолженностьПоДоходам,
        |	"""" КАК КодСтроки,
		|	СУММА(0) КАК ОПВР
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Остатки(
		|				&парамПослеПериодПо,
		|				Налогоплательщик = &парамНалогоплательщик
		|			    И Получатель.ЮрФизЛицо = &парамФизЛицо 
		|			    И Получатель.ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ВзаиморасчетыСПолучателямиИЛ
   		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
		|		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.ПериодВзаиморасчетов, МЕСЯЦ) = ВТ_Гражданство.Период)             
		|				И ВзаиморасчетыСПолучателямиИЛ.Получатель.ФизЛицо = ВТ_Гражданство.ФИО
        |
        |СГРУППИРОВАТЬ ПО
        |	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.ПериодВзаиморасчетов, МЕСЯЦ),
        |	ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница,
        |	ВзаиморасчетыСПолучателямиИЛ.Получатель
        |
		|";		
		
	КонецЕсли;

	// Если включаем суммы удержаний по исполнительным листам по фактическому перечислению
	Если Не ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// выплата по исполнительным листам
		|ВЫБРАТЬ
		|	ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.Период, МЕСЯЦ),
		|	ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница,
		|	0,
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовРасход + ВзаиморасчетыСПолучателямиИЛ.СуммаСборовРасход) КАК ВыплаченоДоходов,
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
        |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
      	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
        |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
        |   СУММА(0) КАК ЗадолженностьПоДоходам,
        |	"""" КАК КодСтроки,
		|	СУММА(0) КАК ОПВР
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Обороты(
		|			&парамПериодС,
		|			&парамПериодПо,
		|			МЕСЯЦ,
		|			Налогоплательщик = &парамНалогоплательщик
		|			И ДокументОснование.ФизЛицо <> &парамИндивидуальныйПредприниматель ) КАК ВзаиморасчетыСПолучателямиИЛ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
		|		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.Период, МЕСЯЦ) = ВТ_Гражданство.Период)             
		|				И ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо = ВТ_Гражданство.ФИО              		
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.Период, МЕСЯЦ),
		|	ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница,
		|	ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо
		|";
	КонецЕсли;
	
	// Добавим данные по получателям по исполнительным листам
	Если ПризнакАлиментов Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// выплата по исполнительным листам получателям сумм
		|ВЫБРАТЬ
		|	ВзаиморасчетыСПолучателямиИЛ.Получатель КАК ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.Период, МЕСЯЦ),
		|	ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница,
		|	1,
		|	СУММА(ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовПриход) КАК НачисленныеДоходы,
		|	СУММА(ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовПриход) КАК НеПодлежащиеНалогооблажению,
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовРасход) КАК ВыплаченоДоходов,
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
        |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
        |	СУММА(0) КАК ОПВПодлежащийПеречислению,
        |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
        |   СУММА(0) КАК ЗадолженностьПоДоходам,
        |	""A.341-1-1"" КАК КодСтроки,
		|	СУММА(0) КАК ОПВР
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Обороты(
		|			&парамПериодС,
		|			&парамПериодПо,
		|			МЕСЯЦ,
		|			Налогоплательщик = &парамНалогоплательщик
		|			И Получатель.ЮрФизЛицо = &парамФизЛицо 
		|			И Получатель.ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ВзаиморасчетыСПолучателямиИЛ	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
		|		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.Период, МЕСЯЦ) = ВТ_Гражданство.Период)             
		|				И ВзаиморасчетыСПолучателямиИЛ.Получатель.ФизЛицо = ВТ_Гражданство.ФИО
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.Период, МЕСЯЦ),
		|	ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница,
		|	ВзаиморасчетыСПолучателямиИЛ.Получатель
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИПНРасчетыСБюджетом.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ),
	|	ИПНРасчетыСБюджетом.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),                                         
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(ИПНРасчетыСБюджетом.Налог),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |   СУММА(0) КАК ЗадолженностьПоДоходам,
    |	"""" КАК КодСтроки,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                
	|		ПО (НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ) = ВТ_Гражданство.Период)      	
	|			 И (ВЫБОР
	|					КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ИПНРасчетыСБюджетом.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ) 
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)	
  	|ГДЕ
	|	ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик
	|	И ИПНРасчетыСБюджетом.Период МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|	И ВЫБОР
	|			КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|				ТОГДА НЕ ИПНРасчетыСБюджетом.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ИПНРасчетыСБюджетом.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|	И ИПНРасчетыСБюджетом.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ),
	|	ИПНРасчетыСБюджетом.СтруктурнаяЕдиница,
	|	ИПНРасчетыСБюджетом.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СОРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.Период, МЕСЯЦ),
	|	СОРасчетыСФондами.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(СОРасчетыСФондами.Отчисление),
	|	СУММА(0),
	|	СУММА(0),
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |   СУММА(0) КАК ЗадолженностьПоДоходам,
    |	"""" КАК КодСтроки,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
	|			И СОРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО 
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(СОРасчетыСФондами.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период) 
  	|ГДЕ
	|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И СОРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
	|	И СОРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление
	|	И СОРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И СОРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ЛОЖЬ 
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|	И СОРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.Период, МЕСЯЦ),
	|	СОРасчетыСФондами.СтруктурнаяЕдиница,
	|	СОРасчетыСФондами.ФизЛицо
    |
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОППВРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.Период, МЕСЯЦ),
	|	ОППВРасчетыСФондами.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(ОППВРасчетыСФондами.Взнос),
	|	СУММА(0),
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |   СУММА(0) КАК ЗадолженностьПоДоходам,
    |	"""" КАК КодСтроки,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
	|			И ОППВРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период) 
	|ГДЕ
	|	ОППВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ОППВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ОППВРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
	|	И ОППВРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление
	|	И ОППВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ОППВРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|	И ОППВРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.Период, МЕСЯЦ),
	|	ОППВРасчетыСФондами.СтруктурнаяЕдиница,
	|	ОППВРасчетыСФондами.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// отчисления  ОСМС
	|ВЫБРАТЬ
	|	ООСМСРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.Период, МЕСЯЦ),
	|	ООСМСРасчетыСФондами.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(ООСМСРасчетыСФондами.Отчисление) КАК ООСМС,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |   СУММА(0) КАК ЗадолженностьПоДоходам,
    |	"""" КАК КодСтроки,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
	|			И ООСМСРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО 
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
	|ГДЕ
	|	ООСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ООСМСРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ООСМСРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
	|	И ООСМСРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление
	|	И ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ООСМСРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|	И ООСМСРасчетыСФондами.Активность
	|	" + ?(ОрганизацияЯвляетсяПлательщикомСН, "", "И ООСМСРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель") + "
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.Период, МЕСЯЦ),
	|	ООСМСРасчетыСФондами.СтруктурнаяЕдиница,
	|	ООСМСРасчетыСФондами.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// ОПВР
	|ВЫБРАТЬ
	|	ОПВРРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОПВРРасчетыСФондами.Период, МЕСЯЦ),
	|	ОПВРРасчетыСФондами.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0) КАК ООСМС,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |   СУММА(0) КАК ЗадолженностьПоДоходам,
    |	"""" КАК КодСтроки,
	|	СУММА(ОПВРРасчетыСФондами.Взнос) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.ОПВРРасчетыСФондами КАК ОПВРРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(ОПВРРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
	|			И ОПВРРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО 
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ОПВРРасчетыСФондами.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
	|ГДЕ
	|	ОПВРРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВРРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ОПВРРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
	|	И ОПВРРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление
	|	И ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ОПВРРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ 
	|	И ОПВРРасчетыСФондами.Активность
	|	" + ?(ОрганизацияЯвляетсяПлательщикомСН, "", "И ОПВРРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель") + "
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ОПВРРасчетыСФондами.Период, МЕСЯЦ),
	|	ОПВРРасчетыСФондами.СтруктурнаяЕдиница,
	|	ОПВРРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиОрганизаций.Сотрудник.Физлицо КАК ФизЛицо,
	|	РаботникиОрганизаций.Период КАК Период,
    |   РаботникиОрганизаций.Сотрудник.ВидЗанятости КАК ВидЗанятости
	|ПОМЕСТИТЬ ВТРаботникиОрганизации
	|ИЗ
	|	вт_Данные КАК вт_Данные
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамПериодС, 
	|			Организация = &парамНалогоплательщик
	|				ИЛИ ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц)) КАК РаботникиОрганизаций
	|		ПО вт_Данные.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизаций.Сотрудник.Физлицо,
	|	РаботникиОрганизаций.Период,
    |   РаботникиОрганизаций.Сотрудник.ВидЗанятости КАК ВидЗанятости
	|ИЗ
	|	вт_Данные КАК вт_Данные
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО вт_Данные.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
	|ГДЕ
	|	РаботникиОрганизаций.Период МЕЖДУ &парамПериодС И &парамПериодПо
	|	И РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|	И (РаботникиОрганизаций.Организация = &парамНалогоплательщик
	|		ИЛИ РаботникиОрганизаций.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц))
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиОрганизацииСостояния.ФизЛицо КАК ФизЛицо,
	|	МАКСИМУМ(РаботникиОрганизацииСостояния.Период) КАК Период
	|ПОМЕСТИТЬ ВТРаботникиОрганизацийПоследнийСотрудник
	|ИЗ
	|	ВТРаботникиОрганизации КАК РаботникиОрганизацииСостояния
    |
    |ГДЕ
   	|	РаботникиОрганизацииСостояния.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)) 
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизацииСостояния.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоследнийСотрудник.ФизЛицо КАК ФизЛицо,
	|	ЕСТЬNULL(РаботникиОрганизаций.ПричинаИзмененияСостояния, ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК ПричинаИзмененияСостояния
	|ПОМЕСТИТЬ ВТСостояниеСотрудника
	|ИЗ
	|	ВТРаботникиОрганизацийПоследнийСотрудник КАК ПоследнийСотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО ПоследнийСотрудник.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
	|			И ПоследнийСотрудник.Период = РаботникиОрганизаций.Период
	|			И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			И (РаботникиОрганизаций.Организация = &парамНалогоплательщик
	|				ИЛИ РаботникиОрганизаций.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Данные.ФизЛицо КАК ФизЛицо,
	|	МАКСИМУМ(ВЫБОР
    |		КОГДА вт_Данные.ФизЛицо ССЫЛКА Справочник.Контрагенты
    |			ТОГДА вт_Данные.ФизЛицо.ФизЛицо.ДатаРождения
    |		ИНАЧЕ вт_Данные.ФизЛицо.ДатаРождения
    |	КОНЕЦ) КАК ДатаРождения
	|ПОМЕСТИТЬ ВТ_ФизЛицаДатыРождения
	|ИЗ
	|	вт_Данные КАК вт_Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_Данные.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизЛицаДатыРождения.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА РАЗНОСТЬДАТ(ФизЛицаДатыРождения.ДатаРождения, &парамПериодПо, ГОД) = 18
	|				И ДОБАВИТЬКДАТЕ(ФизЛицаДатыРождения.ДатаРождения, ГОД, РАЗНОСТЬДАТ(ФизЛицаДатыРождения.ДатаРождения, &парамПериодПо, ГОД)) > НАЧАЛОПЕРИОДА(&парамПериодПо, ДЕНЬ)
	|			ТОГДА РАЗНОСТЬДАТ(ФизЛицаДатыРождения.ДатаРождения, &парамПериодПо, ГОД) - 1
	|		ИНАЧЕ РАЗНОСТЬДАТ(ФизЛицаДатыРождения.ДатаРождения, &парамПериодПо, ГОД)
	|	КОНЕЦ КАК ПолныхЛет
	|	
	|ПОМЕСТИТЬ ВТ_ФизЛицаРасчетПолныхЛет
	|ИЗ
	|	ВТ_ФизЛицаДатыРождения КАК ФизЛицаДатыРождения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Данные.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL ТОГДА вт_Данные.ФизЛицо.Наименование 
	|		ИНАЧЕ ФИОФИзЛиц.Фамилия + ВЫБОР
	|									КОГДА ФИОФизЛиц.Имя <> """" ТОГДА "" "" + ФИОФизЛиц.Имя
	|									ИНАЧЕ """"
	|								  КОНЕЦ + 
	|								  ВЫБОР
	|									КОГДА ФИОФизЛиц.Отчество <> """" ТОГДА "" "" + ФИОФизЛиц.Отчество
	|									ИНАЧЕ """"
	|								  КОНЕЦ 
	|	КОНЕЦ КАК ФИОФизЛица,
	|	вт_Данные.ФизЛицо.ИдентификационныйКодЛичности КАК ИИН,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.НачисленныеДоходы) КАК ЧИСЛО(19, 0)) КАК НачисленныеДоходы,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.НеПодлежащиеНалогооблажению) КАК ЧИСЛО(19, 0)) КАК НеПодлежащиеНалогооблажению,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.НалоговыеВычеты) КАК ЧИСЛО(19, 0)) КАК НалоговыеВычеты,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.ИПНИсчисленный) КАК ЧИСЛО(19, 0)) КАК ИПНИсчисленный,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.ОПВ) КАК ЧИСЛО(19, 0)) КАК ОПВ,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.ВОСМС) КАК ЧИСЛО(19, 0)) КАК ВОСМС,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.ПрочиеНалоговыеВычеты) КАК ЧИСЛО(19, 0)) КАК ПрочиеНалоговыеВычеты,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.ОблагаемыйДоходИПН) КАК ЧИСЛО(19, 0)) КАК ОблагаемыйДоходИПН,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.ВыплаченоДоходов) КАК ЧИСЛО(19, 0)) КАК ВыплаченоДоходов,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.ИПНПодлежащийУплате) КАК ЧИСЛО(19, 0)) КАК ИПНПодлежащийУплате,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.СоциальныеОтчисления) КАК ЧИСЛО(19, 0)) КАК СоциальныеОтчисления,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.ОППВ) КАК ЧИСЛО(19, 0)) КАК ОППВ,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.ОПВР) КАК ЧИСЛО(19, 0)) КАК ОПВР,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.ООСМС) КАК ЧИСЛО(19, 0)) КАК ООСМС,
	|	ВЫБОР
	|		КОГДА вт_Данные.ДополнительныйРазрез = 1
	|			ТОГДА ""11""
	|		КОГДА вт_Данные.ФизЛицо ССЫЛКА Справочник.Контрагенты И (НЕ вт_Данные.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус)
	|			ТОГДА ""2""
	|		КОГДА СостояниеСотрудника.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение) 
	|			ТОГДА ""1""
	|		ИНАЧЕ ""11""
	|	КОНЕЦ КАК Статус,
	// По данным информационной базы можно определить некоторые категории физ. лица
	// Порядок категорий в запросе НЕ совпадает с категориями в форме
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер, Ложь)
	|			ТОГДА ""1""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Категория1,
	|	ВЫБОР
	|		КОГДА СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)
	|			ТОГДА ""2""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Категория2,
	|	ВЫБОР
	|		КОГДА НЕ СведенияОФизлицахУчастникахВОВ.Статус ЕСТЬ NULL 
	|			ТОГДА ""3""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Категория3,
	|	ВЫБОР
	|		КОГДА СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.РодительИнвалидаСДетства)  
	|			ТОГДА ""4""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Категория4,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ФизЛицаРасчетПолныхЛет.ПолныхЛет, 18) < 18
	|			ТОГДА ""5""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Категория5,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ГражданствоФизЛиц.НеИмеетПравоНаПенсию, ЛОЖЬ) И ЕСТЬNULL(ГражданствоФизЛиц.НеПодлежитСоциальномуМедицинскомуСтрахованию, ЛОЖЬ)
	|			И ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	|			ТОГДА ""6""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Категория6,
    |   вт_Данные.ВидВычета КАК ВидВычета,
   	|	ВЫРАЗИТЬ (СУММА(вт_Данные.ОПВПодлежащийПеречислению) КАК ЧИСЛО(19, 0)) КАК ОПВПодлежащийПеречислению,
    |   ВЫРАЗИТЬ (СУММА(вт_Данные.ВОСМСПодлежащийПеречислению) КАК ЧИСЛО(19, 0)) КАК ВОСМСПодлежащийПеречислению,
    |   ВЫРАЗИТЬ (СУММА(вт_Данные.ЗадолженностьПоДоходам) КАК ЧИСЛО(19, 0)) КАК ЗадолженностьПоДоходам,
    |	вт_Данные.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ ВТ_ИтоговыеДанные
    |
	|ИЗ
	|	вт_Данные КАК вт_Данные
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамПериодПо) КАК ФИОФизЛиц
	|		ПО (ВЫБОР
    |				КОГДА вт_Данные.ФизЛицо ССЫЛКА Справочник.Контрагенты
    |					И вт_Данные.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |					ТОГДА вт_Данные.ФизЛицо.ФизЛицо = ФИОФизЛиц.ФизЛицо
    |				ИНАЧЕ вт_Данные.ФизЛицо = ФИОФизЛиц.ФизЛицо
    |			  КОНЕЦ)
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТСостояниеСотрудника КАК СостояниеСотрудника                                                  	
	|		ПО (ВЫБОР
    |				КОГДА вт_Данные.ФизЛицо ССЫЛКА Справочник.Контрагенты
    |					И вт_Данные.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |					ТОГДА вт_Данные.ФизЛицо.ФизЛицо = СостояниеСотрудника.Физлицо
    |				ИНАЧЕ вт_Данные.ФизЛицо = СостояниеСотрудника.Физлицо
    |			  КОНЕЦ)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамПериодПо, Пенсионер) КАК СведенияОПенсионномОбеспеченииФизЛиц                                                  	
	|		ПО (ВЫБОР
    |				КОГДА вт_Данные.ФизЛицо ССЫЛКА Справочник.Контрагенты
    |					И вт_Данные.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |					ТОГДА вт_Данные.ФизЛицо.ФизЛицо =  СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
    |				ИНАЧЕ вт_Данные.ФизЛицо = СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
    |			  КОНЕЦ)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&парамПериодПо, ВЫБОР 
	|																									КОГДА СрокДействияСправки <> ДАТАВРЕМЯ(1,1,1) 
	|																										ТОГДА (СрокДействияСправки >=&парамПериодС) 
	|																									ИНАЧЕ ИСТИНА 
	|																								КОНЕЦ) КАК СведенияОбИнвалидностиФизлиц                                                  	
	|		ПО (ВЫБОР
    |				КОГДА вт_Данные.ФизЛицо ССЫЛКА Справочник.Контрагенты
    |					И вт_Данные.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |					ТОГДА вт_Данные.ФизЛицо.ФизЛицо =  СведенияОбИнвалидностиФизлиц.Физлицо
    |				ИНАЧЕ вт_Данные.ФизЛицо = СведенияОбИнвалидностиФизлиц.Физлицо
    |			  КОНЕЦ)	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ.СрезПоследних(&парамПериодПо, 
	|						Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.ЛицоПриравненноеКУчастникамВОВ)
    |                       ИЛИ Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.ВетераныБоевыхДействийНаТерриторииДругихГосударств)) КАК СведенияОФизлицахУчастникахВОВ                                                  	
	|		ПО (ВЫБОР
    |				КОГДА вт_Данные.ФизЛицо ССЫЛКА Справочник.Контрагенты
    |					И вт_Данные.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |					ТОГДА вт_Данные.ФизЛицо.ФизЛицо =  СведенияОФизлицахУчастникахВОВ.Физлицо
    |				ИНАЧЕ вт_Данные.ФизЛицо = СведенияОФизлицахУчастникахВОВ.Физлицо
    |			  КОНЕЦ)
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФизЛицаРасчетПолныхЛет КАК ФизЛицаРасчетПолныхЛет                                                  	
	|		ПО вт_Данные.ФизЛицо = ФизЛицаРасчетПолныхЛет.Физлицо
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамПериодПо) КАК ГражданствоФизЛиц                                                  	
	|		ПО (ВЫБОР
	|				КОГДА вт_Данные.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|					И вт_Данные.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|					ТОГДА вт_Данные.ФизЛицо.ФизЛицо =  ГражданствоФизЛиц.ФизЛицо
	|				ИНАЧЕ вт_Данные.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
	|			  КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_Данные.ФизЛицо,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL ТОГДА вт_Данные.ФизЛицо.Наименование 
	|		ИНАЧЕ ФИОФИзЛиц.Фамилия + ВЫБОР
	|									КОГДА ФИОФизЛиц.Имя <> """" ТОГДА "" "" + ФИОФизЛиц.Имя
	|									ИНАЧЕ """"
	|								  КОНЕЦ + 
	|								  ВЫБОР
	|									КОГДА ФИОФизЛиц.Отчество <> """" ТОГДА "" "" + ФИОФизЛиц.Отчество
	|									ИНАЧЕ """"
	|								  КОНЕЦ 
	|	КОНЕЦ,
	|	вт_Данные.ФизЛицо.ИдентификационныйКодЛичности,
	|	ВЫБОР
	|		КОГДА вт_Данные.ДополнительныйРазрез = 1
	|			ТОГДА ""11""
	|		КОГДА вт_Данные.ФизЛицо ССЫЛКА Справочник.Контрагенты И (НЕ вт_Данные.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус)
	|			ТОГДА ""2""
	|		КОГДА СостояниеСотрудника.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение) 
	|			ТОГДА ""1""
	|		ИНАЧЕ ""11""
	|	КОНЕЦ,  
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер, Ложь)
	|			ТОГДА ""1""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)
	|			ТОГДА ""2""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ СведенияОФизлицахУчастникахВОВ.Статус ЕСТЬ NULL
	|			ТОГДА ""3""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.РодительИнвалидаСДетства)  
	|			ТОГДА ""4""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ФизЛицаРасчетПолныхЛет.ПолныхЛет, 18) < 18
	|			ТОГДА ""5""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ГражданствоФизЛиц.НеИмеетПравоНаПенсию, ЛОЖЬ) И ЕСТЬNULL(ГражданствоФизЛиц.НеПодлежитСоциальномуМедицинскомуСтрахованию, ЛОЖЬ)
	|			И ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	|			ТОГДА ""6""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
    |   вт_Данные.ВидВычета,
    |	вт_Данные.КодСтроки
	|
    |;
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ВТ_ИтоговыеДанные.ФизЛицо КАК ФизЛицо,
    |	ВТ_ИтоговыеДанные.ФИОФизЛица КАК ФИОФизЛица,
    |	ВТ_ИтоговыеДанные.ИИН КАК ИИН,
    |	ВТ_ИтоговыеДанные.НачисленныеДоходы КАК НачисленныеДоходы,
    |	ВТ_ИтоговыеДанные.НеПодлежащиеНалогооблажению КАК НеПодлежащиеНалогооблажению,
    |	ВТ_ИтоговыеДанные.НалоговыеВычеты КАК НалоговыеВычеты,
    |	ВТ_ИтоговыеДанные.ИПНИсчисленный КАК ИПНИсчисленный,
    |	ВТ_ИтоговыеДанные.ОПВ КАК ОПВ,
    |	ВТ_ИтоговыеДанные.ВОСМС КАК ВОСМС,
    |	ВТ_ИтоговыеДанные.ПрочиеНалоговыеВычеты КАК ПрочиеНалоговыеВычеты,
    |	ВТ_ИтоговыеДанные.ОблагаемыйДоходИПН КАК ОблагаемыйДоходИПН,
    |	ВТ_ИтоговыеДанные.ВыплаченоДоходов КАК ВыплаченоДоходов,
    |	ВТ_ИтоговыеДанные.ИПНПодлежащийУплате КАК ИПНПодлежащийУплате,
    |	ВТ_ИтоговыеДанные.СоциальныеОтчисления КАК СоциальныеОтчисления,
    |	ВТ_ИтоговыеДанные.ОППВ КАК ОППВ,
    |	ВТ_ИтоговыеДанные.ОПВР КАК ОПВР,
    |	ВТ_ИтоговыеДанные.ООСМС КАК ООСМС,
    |	ВТ_ИтоговыеДанные.Статус КАК Статус,
    |	ВТ_ИтоговыеДанные.Категория1 КАК Категория1,
    |	ВТ_ИтоговыеДанные.Категория2 КАК Категория2,
    |	ВТ_ИтоговыеДанные.Категория4 КАК Категория4,
    |	ВТ_ИтоговыеДанные.Категория3 КАК Категория3,
	|	ВТ_ИтоговыеДанные.Категория5 КАК Категория5,
	|	ВТ_ИтоговыеДанные.Категория6 КАК Категория6,
    |	ВТ_ИтоговыеДанные.ВидВычета КАК ВидВычета,
   	|	ВТ_ИтоговыеДанные.ОПВПодлежащийПеречислению КАК ОПВПодлежащийПеречислению,
    |   ВТ_ИтоговыеДанные.ВОСМСПодлежащийПеречислению КАК ВОСМСПодлежащийПеречислению,
    |   ВТ_ИтоговыеДанные.ЗадолженностьПоДоходам КАК ЗадолженностьПоДоходам,
    |	ВТ_ИтоговыеДанные.КодСтроки КАК КодСтроки
    |ИЗ
    |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
    |
    |УПОРЯДОЧИТЬ ПО
    |	ВТ_ИтоговыеДанные.ФИОФизЛица,
    |   ВТ_ИтоговыеДанные.ВидВычета
    |ИТОГИ
    |	СУММА(НачисленныеДоходы),
    |	СУММА(ИПНИсчисленный),
    |	СУММА(ОПВ),
    |	СУММА(ВОСМС),
    |	СУММА(ОблагаемыйДоходИПН),
    |	СУММА(ВыплаченоДоходов),
    |	СУММА(ИПНПодлежащийУплате),
    |	СУММА(СоциальныеОтчисления),
    |	СУММА(ОППВ),
    |	СУММА(ОПВР),
    |	СУММА(ООСМС),
    |	МАКСИМУМ(Статус),
    |	МАКСИМУМ(Категория1),
    |	МАКСИМУМ(Категория2),
    |	МАКСИМУМ(Категория4),
    |	МАКСИМУМ(Категория3),
	|	МАКСИМУМ(Категория5),
	|	МАКСИМУМ(Категория6),
   	|	СУММА(ОПВПодлежащийПеречислению),
    |   СУММА(ВОСМСПодлежащийПеречислению),
    |   СУММА(ЗадолженностьПоДоходам)
    |ПО
    |	ФизЛицо
    |";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() и ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 910.01 за отчетный период отсутствуют...'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура Форма910_01ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма910_01";
	Очистить(ТекИмяФормы, Истина);

	ТекущаяСтраница = 1;
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы",ТекИмяФормы));
	
	Если СтрокаФормы <> Неопределено Тогда
		СтрокаФормы.ВсегоСтраниц = 1;
	КонецЕсли;     		
	
	Если НЕ Перезаполнить Тогда  
		Текст = НСтр("ru = 'Расчет приложения 910.01'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли;  
	
	СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПолучитьПорядокОбложенияДоходовРаботников(Налогоплательщик, КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)); 
	
	ВыборкаФИО = Форма910_01РассчитатьДанныеФормы(Истина).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, ТекИмяФормы);
    
	ОписаниеТиповСтрока12 = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12));
	ОписаниеТиповЧисло12  = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 0));
	
	ТаблицаСтандартныхВычетов = Новый ТаблицаЗначений;
	ТаблицаПрочихВычетов = Новый ТаблицаЗначений;
	ТаблицаНеоблагаемыхДоходов = Новый ТаблицаЗначений;
	
	ТаблицаСтандартныхВычетов.Колонки.Добавить("КодСтроки", ОписаниеТиповСтрока12);
	ТаблицаСтандартныхВычетов.Колонки.Добавить("Сумма", ОписаниеТиповЧисло12);
	
	ТаблицаПрочихВычетов.Колонки.Добавить("КодСтроки", ОписаниеТиповСтрока12);
	ТаблицаПрочихВычетов.Колонки.Добавить("Сумма", ОписаниеТиповЧисло12);

	ТаблицаНеоблагаемыхДоходов.Колонки.Добавить("КодСтроки");
	ТаблицаНеоблагаемыхДоходов.Колонки.Добавить("Сумма", ОписаниеТиповЧисло12);

	Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
		НомерСтроки = 2;
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
		ТаблицаСтрокГруппы.Очистить();
        
        КлючевыеПоляСтраница1 = Новый Структура("Ф910_01ФИО, Ф910_01ИИН, Ф910_01Статус, Ф910_01Категория,
                                                |Ф910_01ФИО_Расшифровка, Ф910_01ИИН_Расшифровка, Ф910_01Статус_Расшифровка, Ф910_01Категория_Расшифровка");
        
		ВыборкаФИО.Сбросить();
		
		Пока ВыборкаФИО.Следующий() Цикл  			
		
			Выборка = ВыборкаФИО.Выбрать();
			
			Элемент = ТаблицаСтрокГруппы.Добавить();
			
			ТаблицаСтандартныхВычетов.Очистить();
			ТаблицаПрочихВычетов.Очистить();
			ТаблицаНеоблагаемыхДоходов.Очистить();
			
			ПерваяСтрокаСтандартныхВычетовЗаполнена = Ложь;
			ПерваяСтрокаПрочихВычетовЗаполнена = Ложь;
			ПерваяСтрокаНеоблагаемыхДоходовЗаполнена = Ложь;

			СуммаФ910_01_H = 0;  // Доходы, не подлежащие налогообложению
			Ф910_01_G = "";      // Виды доходов, не подлежащих налогообложению
			СуммаФ910_01_L = 0;  // Стандартные вычеты
			Ф910_01_K = "";      // Виды стандартных вычетов
			СуммаФ910_01_N = 0;  // Прочие вычеты
			Ф910_01_M = "";      // Виды прочих вычетов
			
			Пока Выборка.Следующий() Цикл
				
	            КодСтандартногоВычета   = "";
	            КодПрочегоВычета        = "";
	            КодНеОблагаемогоДохода  = "";
				
	            Если Выборка.КодСтроки <> "" 
	                И Выборка.НеПодлежащиеНалогооблажению <> 0 Тогда
					
					Если ТипЗнч(Выборка.КодСтроки) = Тип("Строка") И СтрНайти(Выборка.КодСтроки, "341") <> 0 Тогда
						НачалоСтатьиНК = СтрНайти(Выборка.КодСтроки, "341");
						КодСтроки      = СокрЛП(Сред(Выборка.КодСтроки, НачалоСтатьиНК, 10)); 
					Иначе
						КодСтроки = Выборка.КодСтроки;
					КонецЕсли;
					
	                Если НЕ ПерваяСтрокаНеоблагаемыхДоходовЗаполнена Тогда
	                    Если ТипЗнч(КодСтроки) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций")
	                        ИЛИ (ТипЗнч(КодСтроки) = Тип("Строка") 
	                        	И СтрНайти(КодСтроки, "341") = 0) Тогда
	                        Если ТипЗнч(КодСтроки) = Тип("Строка") Тогда
	                            Ф910_01_G = Выборка.ВидВычета;                   
	                        Иначе
	                            Ф910_01_G = КодСтроки;                   
	                        КонецЕсли;
	                        СуммаФ910_01_H = Выборка.НеПодлежащиеНалогооблажению;
	                        ПерваяСтрокаНеоблагаемыхДоходовЗаполнена = Истина;
	                    Иначе
	                        ПерваяСтрокаНеоблагаемыхДоходовЗаполнена = Истина;
	                        Если СтрНайти(КодСтроки, "341") > 0 Тогда
	                            СуммаФ910_01_H = Выборка.НеПодлежащиеНалогооблажению;
	                        КонецЕсли;
	                        Ф910_01_G = КодСтроки; 
	                    КонецЕсли; 
	                Иначе
	                    Если Выборка.НеПодлежащиеНалогооблажению <> 0 Тогда
	                        Строка = ТаблицаНеоблагаемыхДоходов.Добавить();
	                        Если ТипЗнч(КодСтроки) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций")
	                            ИЛИ (ТипЗнч(КодСтроки) = Тип("Строка") 
	                            И СтрНайти(КодСтроки, "341") = 0) Тогда
	                            Строка.КодСтроки = Выборка.ВидВычета;
	                        Иначе
	                            Строка.КодСтроки = КодСтроки;
	                        КонецЕсли;
	                        Строка.Сумма = Окр(Выборка.НеПодлежащиеНалогооблажению);
	                    КонецЕсли; 
	                КонецЕсли;
	            КонецЕсли;
	            Если Выборка.ВидВычета <> ПредопределенноеЗначение("Справочник.ВычетыИПН.ПустаяСсылка")
	                И Выборка.НалоговыеВычеты <> 0 Тогда
	                Если НЕ ПерваяСтрокаСтандартныхВычетовЗаполнена Тогда
	                    ПерваяСтрокаСтандартныхВычетовЗаполнена = Истина;
	                    СуммаФ910_01_L = Выборка.НалоговыеВычеты;
	                    Если Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.Стандартный1МЗП") Тогда
	                        Ф910_01_K = "1";
	                    ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.Стандартный75МЗПИнвалиды") Тогда
	                        Ф910_01_K = "2";
	                    ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.Стандартный75МЗПРодители") Тогда
	                        Ф910_01_K = "3";
	                    КонецЕсли;
	                Иначе
	                    Если Выборка.НалоговыеВычеты <> 0 Тогда
	                        Строка = ТаблицаСтандартныхВычетов.Добавить();
	                        Если Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.Стандартный1МЗП") Тогда
	                            Строка.КодСтроки = "1";
	                        ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.Стандартный75МЗПИнвалиды") Тогда
	                            Строка.КодСтроки = "2";
	                        ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.Стандартный75МЗПРодители") Тогда
	                            Строка.КодСтроки = "3";
	                        КонецЕсли;
	                        Строка.Сумма = Выборка.НалоговыеВычеты;
	                    КонецЕсли;
	                КонецЕсли;
	            КонецЕсли;
	            Если Выборка.ВидВычета <> ПредопределенноеЗначение("Справочник.ВычетыИПН.ПустаяСсылка") 
	                И Выборка.ПрочиеНалоговыеВычеты <> 0 Тогда
	                Если Выборка.ПрочиеНалоговыеВычеты <> 0 Тогда
	                    Если НЕ ПерваяСтрокаПрочихВычетовЗаполнена Тогда
	                        ПерваяСтрокаПрочихВычетовЗаполнена = Истина;
	                        Если Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.ДобровольныеПенсионныеВзносы") Тогда
	                            Ф910_01_M = "1";
	                        ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.НаОплатуМедицинскихУслуг") Тогда
	                            Ф910_01_M = "2";
	                        ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.ПогашениеВознагражденияПоЖилищнымЗаймам") Тогда
	                            Ф910_01_M = "3";
	                        КонецЕсли;
	                        СуммаФ910_01_N = Выборка.ПрочиеНалоговыеВычеты;
	                    Иначе
	                        Строка = ТаблицаПрочихВычетов.Добавить();
	                        Если Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.ДобровольныеПенсионныеВзносы") Тогда
	                            Строка.КодСтроки = "1";
	                        ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.НаОплатуМедицинскихУслуг") Тогда
	                            Строка.КодСтроки = "2";
	                        ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.ПогашениеВознагражденияПоЖилищнымЗаймам") Тогда
	                            Строка.КодСтроки = "3";
	                        КонецЕсли;
	                        Строка.Сумма = Выборка.ПрочиеНалоговыеВычеты;
	                    КонецЕсли;
	                КонецЕсли;
	            КонецЕсли;
	                
				// заполняем данные строки в форме отчета
				Если ИмяГруппы = "Страница1" Тогда
					
					//Так должны заполнять по отдельности значения выборки 
					//для каждого листа
					Элемент.Ф910_01_A1 = Формат(НомерСтроки, мФорматНомераСтроки);
					Элемент.Ф910_01ФИО = Выборка.ФИОФизЛица;
					
					Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.ИИН) Тогда  					
						 СтрокаИИН = Выборка.ИИН;
					Иначе
						 СтрокаИИН = "";
						 
						 ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа с ""ИИН"",
							  |т.к. значение содержит символы, отличные от цифр'");
							  
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки)));
						
					КонецЕсли;

					Элемент.Ф910_01ИИН = СтрокаИИН;
					РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф910_01ФИО", Выборка.ФизЛицо);
					РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф910_01ИИН", Выборка.ФизЛицо);

					Элемент.Ф910_01Статус  = Выборка.Статус;		
					
					// В результате запроса: 
					// Категория1 - пенсионеры
					// Категория2 - инвалиды
					// Категория3 - участники ВОВ
					// Категория4 - родители детей-инвалидов
					// Категория5 - дети
					// Категория6 - пенсионеры за выслугу лет
	                Категория = Новый СписокЗначений;
					Если Выборка.Категория1 <> "" ИЛИ Выборка.Категория6 <> "" Тогда
					    Категория.Добавить("1");
					КонецЕсли;
	                Если Выборка.Категория2 <> "" Тогда
	                    Категория.Добавить("2");
	                КонецЕсли;
	                Если Выборка.Категория3 <> "" Тогда
	                    Категория.Добавить("3");
	                КонецЕсли;
	                Если Выборка.Категория4 <> "" Тогда
	                    Категория.Добавить("4");
	                КонецЕсли;
	                Если Выборка.Категория5 <> "" Тогда
	                    Категория.Добавить("7");
	                КонецЕсли;
					Элемент.Ф910_01Категория = Категория;

					Элемент.Ф910_01_F = ВыборкаФИО.НачисленныеДоходы;

				ИначеЕсли ИмяГруппы = "Страница2" Тогда
					
					Элемент.Ф910_01_A2 = Формат(НомерСтроки, мФорматНомераСтроки);
					
                    Если СуммаФ910_01_H <> 0
                        И ТипЗнч(Ф910_01_G) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
                        Элемент.Ф910_01_G = "";
                        ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'При заполнении приложения 910.01 для вида расчета <%1> не задан код строки Декларации!'"),
                        Строка(Ф910_01_G));                    
                        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ф910_01_G);
                    Иначе
                        Элемент.Ф910_01_G  = Ф910_01_G;   // Виды доходов, не подлежащих налогообложению
                    КонецЕсли;
					Элемент.Ф910_01_H  = СуммаФ910_01_H;  // НеПодлежащиеНалогооблажению
					
					Элемент.Ф910_01_I  = ВыборкаФИО.ОПВ;
					Элемент.Ф910_01_J  = ВыборкаФИО.ВОСМС;
					
				ИначеЕсли ИмяГруппы = "Страница3" Тогда
					
					Элемент.Ф910_01_A3 = Формат(НомерСтроки, мФорматНомераСтроки);
					Элемент.Ф910_01_K  = Ф910_01_K;       // Виды стандартных вычетов
					Элемент.Ф910_01_L  = СуммаФ910_01_L;  // НалоговыеВычеты;
					Элемент.Ф910_01_M  = Ф910_01_M;       // Виды прочих вычетов  
					Элемент.Ф910_01_N  = СуммаФ910_01_N;  // ПрочиеНалоговыеВычеты
					
				ИначеЕсли ИмяГруппы = "Страница4" Тогда
					
					Элемент.Ф910_01_A4 = Формат(НомерСтроки, мФорматНомераСтроки);
					Элемент.Ф910_01_O  = ВыборкаФИО.ИПНИсчисленный;
					Элемент.Ф910_01_P  = ВыборкаФИО.ЗадолженностьПоДоходам;  //Сумма задолженности за отчетный период
					Элемент.Ф910_01_Q  = ВыборкаФИО.ВыплаченоДоходов;
					Элемент.Ф910_01_R  = ВыборкаФИО.ИПНПодлежащийУплате;
					
				ИначеЕсли ИмяГруппы = "Страница5" Тогда
					
					Элемент.Ф910_01_A5 = Формат(НомерСтроки, мФорматНомераСтроки);
					Элемент.Ф910_01_S  = ВыборкаФИО.ОПВПодлежащийПеречислению;
					Элемент.Ф910_01_T  = ВыборкаФИО.ВОСМСПодлежащийПеречислению;
					Элемент.Ф910_01_U  = ВыборкаФИО.СоциальныеОтчисления;  // Сумма отчислений на ГФСС
					Элемент.Ф910_01_V  = ВыборкаФИО.ОППВ;
					
				ИначеЕсли ИмяГруппы = "Страница6" Тогда
					
					Элемент.Ф910_01_A6 = Формат(НомерСтроки, мФорматНомераСтроки);
					Элемент.Ф910_01_W  = ВыборкаФИО.ООСМС;
					Элемент.Ф910_01_X  = ВыборкаФИО.ОПВР;
					
				КонецЕсли;
				
			КонецЦикла;
		
			ТаблицаСтандартныхВычетов.Свернуть("КодСтроки", "Сумма");
            ТаблицаПрочихВычетов.Свернуть("КодСтроки", "Сумма");
            ТаблицаНеоблагаемыхДоходов.Свернуть("КодСтроки", "Сумма");
            
            КоличествоТаблицаСтандартныхВычетов = ТаблицаСтандартныхВычетов.Количество();
            КоличествоТаблицаПрочихВычетов      = ТаблицаПрочихВычетов.Количество();
            КоличествоНеоблагаемыхДоходов       = ТаблицаНеоблагаемыхДоходов.Количество();
            
            Если ИмяГруппы = "Страница1" Тогда
                ЗаполнитьЗначенияСвойств(КлючевыеПоляСтраница1, Элемент);
            КонецЕсли;
            
            МаксимальноеКоличествоСтрок = Макс(КоличествоТаблицаСтандартныхВычетов, КоличествоТаблицаПрочихВычетов, КоличествоНеоблагаемыхДоходов);
            
            Счетчик = 0;
            
            Пока Счетчик < МаксимальноеКоличествоСтрок Цикл
                
                НомерСтроки = НомерСтроки + 1;
                Счетчик = Счетчик + 1;
                // заполняем данные строки в форме отчета
                Элемент = ТаблицаСтрокГруппы.Добавить(); 
                Если ИмяГруппы = "Страница1" Тогда
                    Элемент.Ф910_01_A1 = Формат(НомерСтроки, мФорматНомераСтроки);
                    ЗаполнитьЗначенияСвойств(Элемент, КлючевыеПоляСтраница1); 
                ИначеЕсли ИмяГруппы = "Страница2" Тогда
                    Элемент.Ф910_01_A2 = Формат(НомерСтроки, мФорматНомераСтроки);
                    Если КоличествоНеоблагаемыхДоходов >= Счетчик Тогда
                        Если ТипЗнч(ТаблицаНеоблагаемыхДоходов[Счетчик - 1].КодСтроки) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
                            Элемент.Ф910_01_G = "";
                            ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'При заполнении приложения 910.01 для вида расчета <%1> не задан код строки Декларации!'"),
                            Строка(ТаблицаНеоблагаемыхДоходов[Счетчик - 1].КодСтроки));                    
                            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ТаблицаНеоблагаемыхДоходов[Счетчик - 1].КодСтроки);
                        Иначе
                            Элемент.Ф910_01_G = ТаблицаНеоблагаемыхДоходов[Счетчик - 1].КодСтроки;
                        КонецЕсли;
                        Элемент.Ф910_01_H = ТаблицаНеоблагаемыхДоходов[Счетчик - 1].Сумма;
                    КонецЕсли;
                ИначеЕсли ИмяГруппы = "Страница3" Тогда
                    Элемент.Ф910_01_A3 = Формат(НомерСтроки, мФорматНомераСтроки);
                    Если КоличествоТаблицаСтандартныхВычетов >= Счетчик Тогда                    
                        Элемент.Ф910_01_K = ТаблицаСтандартныхВычетов[Счетчик - 1].КодСтроки;
                        Элемент.Ф910_01_L = ТаблицаСтандартныхВычетов[Счетчик - 1].Сумма;
                    КонецЕсли;
                    Если КоличествоТаблицаПрочихВычетов >= Счетчик Тогда
                        Элемент.Ф910_01_M = ТаблицаПрочихВычетов[Счетчик - 1].КодСтроки;
                        Элемент.Ф910_01_N = ТаблицаПрочихВычетов[Счетчик - 1].Сумма;
                    КонецЕсли;
                ИначеЕсли ИмяГруппы = "Страница4" Тогда
                    Элемент.Ф910_01_A4 = Формат(НомерСтроки, мФорматНомераСтроки);
                ИначеЕсли ИмяГруппы = "Страница5" Тогда
                    Элемент.Ф910_01_A5 = Формат(НомерСтроки, мФорматНомераСтроки);
                ИначеЕсли ИмяГруппы = "Страница6" Тогда
                    Элемент.Ф910_01_A6 = Формат(НомерСтроки, мФорматНомераСтроки);
                КонецЕсли;
                
            КонецЦикла;
			
			НомерСтроки = НомерСтроки + 1;
				
		КонецЦикла; 
		
	КонецЦикла;	  			 
	
	РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы, СтруктураФормы); 	 
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, ТекИмяФормы);	
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, ТекИмяФормы, Перезаполнить);     
	
	РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтаФорма);
	
	ТекущаяСтраница = СтрокаФормы.ВсегоСтраниц;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Форма 910.02

&НаКлиенте
Процедура Форма910_02ЗаполнитьАвто(Перезаполнить = Ложь) 
	                	
	Состояние("Расчет формы 910.02");		
	
	Форма910_02ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры // Форма910_02ЗаполнитьАвто()

&НаСервере
Процедура Форма910_02ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма910_02";
	Очистить(ТекИмяФормы, Истина);

	ТекущаяСтраница = 1;
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы",ТекИмяФормы));
	
	Если СтрокаФормы <> Неопределено Тогда
		СтрокаФормы.ВсегоСтраниц = 1;
	КонецЕсли;     		
	
	Если НЕ Перезаполнить Тогда  
		Текст = НСтр("ru = 'Расчет приложения 910.02'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПолучитьПорядокОбложенияДоходовРаботников(Налогоплательщик, КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)); 
        
	ВыборкаФИО = Форма910_02РассчитатьДанныеФормы(Истина).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
    
    СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, ТекИмяФормы);
    
    // используется в 910.02
	ОписаниеТиповСтрока12 = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12));
	ОписаниеТиповЧисло12  = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 0));
	
	ТаблицаСтандартныхВычетов = Новый ТаблицаЗначений;
	ТаблицаПрочихВычетов = Новый ТаблицаЗначений;
	ТаблицаНеоблагаемыхДоходов = Новый ТаблицаЗначений;
	
	ТаблицаСтандартныхВычетов.Колонки.Добавить("КодСтроки", ОписаниеТиповСтрока12);
	ТаблицаСтандартныхВычетов.Колонки.Добавить("Сумма", ОписаниеТиповЧисло12);
	
	ТаблицаПрочихВычетов.Колонки.Добавить("КодСтроки", ОписаниеТиповСтрока12);
	ТаблицаПрочихВычетов.Колонки.Добавить("Сумма", ОписаниеТиповЧисло12);

	ТаблицаНеоблагаемыхДоходов.Колонки.Добавить("КодСтроки");
	ТаблицаНеоблагаемыхДоходов.Колонки.Добавить("Сумма", ОписаниеТиповЧисло12);
    
    Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
        НомерСтроки = 2;
        ИмяГруппы = ЭлементСтруктуры.Ключ;
        ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
        ТаблицаСтрокГруппы.Очистить();
        
        КлючевыеПоляСтраница1 = Новый Структура("Ф910_02ФИОРезидента, Ф910_02ИИНРезидента, Ф910_02КодСтраныРезидента, Ф910_02КодСтраныГражданства, Ф910_02ПризнакРезидентства,
                                                |Ф910_02ФИОРезидента_Расшифровка, Ф910_02ИИНРезидента_Расшифровка, Ф910_02КодСтраныРезидента_Расшифровка, Ф910_02КодСтраныГражданства_Расшифровка, Ф910_02ПризнакРезидентства_Расшифровка");
        КлючевыеПоляСтраница2 = Новый Структура("Ф910_02НомерРегистрацииРезидента, Ф910_02ВидДокРезидента, Ф910_02НомерДокРезидента, Ф910_02ДатаДокРезидента,
                                                |Ф910_02НомерРегистрацииРезидента_Расшифровка, Ф910_02ВидДокРезидента_Расшифровка, Ф910_02НомерДокРезидента_Расшифровка, Ф910_02ДатаДокРезидента_Расшифровка");
        КлючевыеПоляСтраница3 = Новый Структура("Ф910_02КодДохРезидента, Ф910_02ВидДоговора, Ф910_02_НаименованиеДоговора, Ф910_02КодСтраныДоговора, Ф910_02СтавкаНалога,
                                                |Ф910_02КодДохРезидента_Расшифровка, Ф910_02ВидДоговора_Расшифровка, Ф910_02_НаименованиеДоговора_Расшифровка, Ф910_02КодСтраныДоговора_Расшифровка, Ф910_02СтавкаНалога_Расшифровка");
        
        ВыборкаФИО.Сбросить();
        
        Пока ВыборкаФИО.Следующий() Цикл 
            
            ВыборкаПоСтруктурному = ВыборкаФИО.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
            
            Пока ВыборкаПоСтруктурному.Следующий() Цикл                   	
                
                ТаблицаСтандартныхВычетов.Очистить();
                ТаблицаПрочихВычетов.Очистить();
                ТаблицаНеоблагаемыхДоходов.Очистить();
                
                ПерваяСтрокаСтандартныхВычетовЗаполнена = Ложь;
                ПерваяСтрокаПрочихВычетовЗаполнена = Ложь;
                ПерваяСтрокаНеоблагаемыхДоходовЗаполнена = Ложь;
                
                Ф910_02_ВидДохода = "";
                СуммаФ910_02_P = 0;
                СуммаФ910_02_Q = 0;
                Ф910_02_СтандартныеВычеты = "";
                СуммаФ910_02_U = 0;
                Ф910_02_ПрочиеВычеты = "";
                СуммаФ910_02_W = 0;
                
                Выборка = ВыборкаПоСтруктурному.Выбрать();
                // заполняем данные строки в форме отчета
                Элемент = ТаблицаСтрокГруппы.Добавить();   			 

                Пока Выборка.Следующий() Цикл
                    КодСтандартногоВычета   = "";
                    КодПрочегоВычета        = "";
                    КодНеОблагаемогоДохода  = "";
                    Если Выборка.КодСтроки <> "" 
                        И Выборка.ДоходыНеОблагаемыеИПН <> 0 Тогда
						
						Если ТипЗнч(Выборка.КодСтроки) = Тип("Строка") И 
								(СтрНайти(Выборка.КодСтроки, "341") <> 0 ИЛИ СтрНайти(Выборка.КодСтроки, "654") <> 0) Тогда
							НачалоСтатьиНК = СтрНайти(Выборка.КодСтроки, "341");
							Если НачалоСтатьиНК = 0 Тогда
								НачалоСтатьиНК = СтрНайти(Выборка.КодСтроки, "654");
							КонецЕсли;
							КодСтроки = СокрЛП(Сред(Выборка.КодСтроки, НачалоСтатьиНК, 10)); 
						Иначе
							КодСтроки = Выборка.КодСтроки;
						КонецЕсли;
						
                        Если НЕ ПерваяСтрокаНеоблагаемыхДоходовЗаполнена Тогда                
                            Если ТипЗнч(КодСтроки) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций")  
                                ИЛИ (ТипЗнч(КодСтроки) = Тип("Строка")
                                И (СтрНайти(КодСтроки, "341") = 0
                                И СтрНайти(КодСтроки, "654") = 0)) Тогда
                                Если ТипЗнч(КодСтроки) = Тип("Строка") Тогда 
                                    Ф910_02_ВидДохода = Выборка.ВидВычета
                                Иначе
                                    Ф910_02_ВидДохода = КодСтроки;
                                КонецЕсли;
                                СуммаФ910_02_P = Выборка.ДоходыНеОблагаемыеИПН;
                                ПерваяСтрокаНеоблагаемыхДоходовЗаполнена = Истина;
                            Иначе
                                ПерваяСтрокаНеоблагаемыхДоходовЗаполнена = Истина;
                                Если СтрНайти(КодСтроки, "341") > 0 Тогда
                                    СуммаФ910_02_P = Выборка.ДоходыНеОблагаемыеИПН;
                                ИначеЕсли СтрНайти(КодСтроки, "654") > 0  Тогда
                                    СуммаФ910_02_Q = Выборка.ДоходыНеОблагаемыеИПН;
                                КонецЕсли;
                                Ф910_02_ВидДохода = КодСтроки;
                            КонецЕсли;
                        Иначе
                            Строка = ТаблицаНеоблагаемыхДоходов.Добавить();
                            Если ТипЗнч(КодСтроки) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций")  
                                ИЛИ (ТипЗнч(КодСтроки) = Тип("Строка")
                                И (СтрНайти(КодСтроки, "341") = 0
                                И СтрНайти(КодСтроки, "654") = 0)) Тогда
                                Строка.КодСтроки = Выборка.ВидВычета;
                            Иначе
                                Строка.КодСтроки = КодСтроки;
                            КонецЕсли;
                            Строка.Сумма = Окр(Выборка.ДоходыНеОблагаемыеИПН);
                        КонецЕсли;
                    КонецЕсли;
                    Если Выборка.ВидВычета <> ПредопределенноеЗначение("Справочник.ВычетыИПН.ПустаяСсылка") 
                        И Выборка.НалоговыеВычеты <> 0 Тогда
                        Если НЕ ПерваяСтрокаСтандартныхВычетовЗаполнена Тогда
                            ПерваяСтрокаСтандартныхВычетовЗаполнена = Истина;
                            СуммаФ910_02_U = Выборка.НалоговыеВычеты;
                            Если Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.Стандартный1МЗП") Тогда
                                Ф910_02_СтандартныеВычеты = "1";
                            ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.Стандартный75МЗПИнвалиды") Тогда
                                Ф910_02_СтандартныеВычеты = "2";
                            ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.Стандартный75МЗПРодители") Тогда
                                Ф910_02_СтандартныеВычеты = "3";
                            КонецЕсли;
                        Иначе
                            Строка = ТаблицаСтандартныхВычетов.Добавить();
                            Если Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.Стандартный1МЗП") Тогда
                                Строка.КодСтроки = "1";
                            ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.Стандартный75МЗПИнвалиды") Тогда
                                Строка.КодСтроки = "2";
                            ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.Стандартный75МЗПРодители") Тогда
                                Строка.КодСтроки = "3";
                            КонецЕсли;
                            Строка.Сумма = Выборка.НалоговыеВычеты;
                        КонецЕсли;
                    КонецЕсли;
                    Если Выборка.ВидВычета <> ПредопределенноеЗначение("Справочник.ВычетыИПН.ПустаяСсылка") 
                        И (Выборка.ДобровольныеПенсионныеВзносы <> 0 
                        ИЛИ Выборка.НаОплатуМедицинскихУслуг <> 0
                        ИЛИ Выборка.ПогашениеЖилищныхЗаймов <> 0) Тогда
                        Если НЕ ПерваяСтрокаПрочихВычетовЗаполнена Тогда
                            ПерваяСтрокаПрочихВычетовЗаполнена = Истина;
                            Если Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.ДобровольныеПенсионныеВзносы") Тогда
                                Ф910_02_ПрочиеВычеты = "1";
                                СуммаФ910_02_W = Выборка.ДобровольныеПенсионныеВзносы;
                            ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.НаОплатуМедицинскихУслуг") Тогда
                                Ф910_02_ПрочиеВычеты = "2";
                                СуммаФ910_02_W = Выборка.НаОплатуМедицинскихУслуг;
                            ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.ПогашениеВознагражденияПоЖилищнымЗаймам") Тогда
                                Ф910_02_ПрочиеВычеты = "3";
                                СуммаФ910_02_W = Выборка.ПогашениеЖилищныхЗаймов;
                            КонецЕсли;
                        Иначе
                            Строка = ТаблицаПрочихВычетов.Добавить();
                            Если Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.ДобровольныеПенсионныеВзносы") Тогда
                                Строка.КодСтроки = "1";
                                Строка.Сумма = Выборка.ДобровольныеПенсионныеВзносы;
                            ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.НаОплатуМедицинскихУслуг") Тогда
                                Строка.КодСтроки = "2";
                                Строка.Сумма = Выборка.НаОплатуМедицинскихУслуг;
                            ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.ПогашениеВознагражденияПоЖилищнымЗаймам") Тогда
                                Строка.КодСтроки = "3";
                                Строка.Сумма = Выборка.ПогашениеЖилищныхЗаймов;
                            КонецЕсли;
                        КонецЕсли;
                    КонецЕсли;
                    
                    Если ИмяГруппы = "Страница1" Тогда
                        //Так должны заполнять по отдельности значения выборки 
                        //для каждого листа
                        Элемент.Ф910_02_A1 = Формат(НомерСтроки, мФорматНомераСтроки);
                        Элемент.Ф910_02ФИОРезидента = Выборка.ФИОФизЛица;
                        
                        Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.ИИН) Тогда  					
                            СтрокаИИН = Выборка.ИИН;
                        Иначе
                            СтрокаИИН = "";
                            
                            ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа D ""ИИН"",
                            |т.к. значение содержит символы, отличные от цифр'");
                            
                            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки)));
                            
                        КонецЕсли;
                        
                        Элемент.Ф910_02ИИНРезидента = СтрокаИИН;
                        
                        ПризнакРезидентства = Выборка.НеЯвляетсяНалоговымРезидентомРК;
                        Элемент.Ф910_02ПризнакРезидентства = ?(ПризнакРезидентства, СтруктураРеквизитовФормы.ОтметкаНерезидентов, СтруктураРеквизитовФормы.ОтметкаРезидентов);
                        
                        Элемент.Ф910_02КодСтраныРезидента = ?(ПризнакРезидентства, Выборка.КодСтраны, "KZ");
                        Элемент.Ф910_02КодСтраныГражданства = ?(ЗначениеЗаполнено(Выборка.КодСтраныГражданства), Выборка.КодСтраныГражданства, "00");
                        
                        РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф910_02ФИОРезидента",         Выборка.ФизЛицо);
                        РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф910_02ИИНРезидента",         Выборка.ФизЛицо);
                        РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф910_02КодСтраныГражданства", Выборка.ФизЛицо);
                        РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф910_02ПризнакРезидентства",  Выборка.ФизЛицо);
                        РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф910_02КодСтраныРезидента",   Выборка.ФизЛицо);
                        
                    ИначеЕсли ИмяГруппы = "Страница2" Тогда
                        Элемент.Ф910_02_A2 = Формат(НомерСтроки, мФорматНомераСтроки);
                        Элемент.Ф910_02НомерРегистрацииРезидента = Выборка.НомерРегистрации;
                        
                        Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.КодВидаДокументаВНалоговойОтчетности) Тогда
                            КодВидаДокументаВНалоговойОтчетности = Выборка.КодВидаДокументаВНалоговойОтчетности;					
                        Иначе
                            КодВидаДокументаВНалоговойОтчетности = "";
                            
                            ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа H ""Код вида документа"",
                            |т.к. значение содержит символы, отличные от цифр'");
                            
                            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки)));
                            
                        КонецЕсли;
                        
                        Элемент.Ф910_02ВидДокРезидента   = КодВидаДокументаВНалоговойОтчетности;
                        Элемент.Ф910_02НомерДокРезидента = Выборка.НомерДокумента;
                        Элемент.Ф910_02ДатаДокРезидента  = Выборка.ДатаДокумента;
                        
                        РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф910_02НомерРегистрацииРезидента", Выборка.ФизЛицо);					
                        
                    ИначеЕсли ИмяГруппы = "Страница3" Тогда
                        Элемент.Ф910_02_A3 = Формат(НомерСтроки,мФорматНомераСтроки);					
                        Если Налогоплательщик.ИностраннаяОрганизация Тогда
                            КодДохРезидента = "1210";
                        Иначе
                            КодДохРезидента = "1200";
                        КонецЕсли;
                        Элемент.Ф910_02КодДохРезидента = КодДохРезидента;
                        Элемент.Ф910_02СтавкаНалога = 10;
                        Элемент.Ф910_02_N = ВыборкаПоСтруктурному.НачисленоДоходов;
                    ИначеЕсли ИмяГруппы = "Страница4" Тогда
                        Элемент.Ф910_02_A4 = Формат(НомерСтроки, мФорматНомераСтроки);									
                        Если СуммаФ910_02_P <> 0 
                            И ТипЗнч(Ф910_02_ВидДохода) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
                            Элемент.Ф910_02_ВидДохода = "";
                            ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'При заполнении приложения 910.02 для вида расчета <%1> не задан код строки Декларации!'"),
                            Строка(Ф910_02_ВидДохода));                    
                            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ф910_02_ВидДохода);
                        Иначе
                            Элемент.Ф910_02_ВидДохода = Ф910_02_ВидДохода;
                        КонецЕсли;
                        Элемент.Ф910_02_P = СуммаФ910_02_P;
                        Элемент.Ф910_02_Q = СуммаФ910_02_Q;
                        Элемент.Ф910_02_R = ВыборкаПоСтруктурному.ОбязательныеПенсионныеВзносы;
                    ИначеЕсли ИмяГруппы = "Страница5" Тогда
                        Элемент.Ф910_02_A5 = Формат(НомерСтроки,мФорматНомераСтроки);
                        Элемент.Ф910_02_S = ВыборкаПоСтруктурному.СуммаВОСМС;
                        Элемент.Ф910_02_U = СуммаФ910_02_U;
                        Элемент.Ф910_02_СтандартныеВычеты = Ф910_02_СтандартныеВычеты;
                        Элемент.Ф910_02_ПрочиеВычеты = Ф910_02_ПрочиеВычеты;
                    ИначеЕсли ИмяГруппы = "Страница6" Тогда
                        Элемент.Ф910_02_A6 = Формат(НомерСтроки, мФорматНомераСтроки);
                        Элемент.Ф910_02_X = ВыборкаПоСтруктурному.ИндивидуальныйПодоходныйНалог;
                        Элемент.Ф910_02_W = СуммаФ910_02_W; 
                        Элемент.Ф910_02_Y = ВыборкаПоСтруктурному.ЗадолженностьПоДоходам; //сумма задолженности за квартал
                        Элемент.Ф910_02_Z = ВыборкаПоСтруктурному.ВыплаченоДоходов;
                    ИначеЕсли ИмяГруппы = "Страница7" Тогда
                        Элемент.Ф910_02_A7 = Формат(НомерСтроки, мФорматНомераСтроки);	
                        Элемент.Ф910_02_AA = ВыборкаПоСтруктурному.ИПНПодлежащийПеречислению;
                        Элемент.Ф910_02_AB = ВыборкаПоСтруктурному.ОПВПодлежащийПеречислению; //ОПВ к перечислению
                        Элемент.Ф910_02_AC = ВыборкаПоСтруктурному.ВОСМСПодлежащийПеречислению;  //ВОСМС к перечислению
                        Элемент.Ф910_02_AD = ВыборкаПоСтруктурному.СоциальныеОтчисления;
                    ИначеЕсли ИмяГруппы = "Страница8" Тогда
                        Элемент.Ф910_02_A8 = Формат(НомерСтроки, мФорматНомераСтроки);
                        Элемент.Ф910_02_AE = ВыборкаПоСтруктурному.ОбязательныеПрофессиональныеПенсионныеВзносы; // ОППВ подлежащие уплате в бюджет 
                        Элемент.Ф910_02_AF = ВыборкаПоСтруктурному.СуммаООСМС;
                        Элемент.Ф910_02_AG = ВыборкаПоСтруктурному.ОбязательныеПенсионныеВзносыРаботодателя;
                    КонецЕсли;
                    
                КонецЦикла;
                ТаблицаСтандартныхВычетов.Свернуть("КодСтроки", "Сумма");
                ТаблицаПрочихВычетов.Свернуть("КодСтроки", "Сумма");
                ТаблицаНеоблагаемыхДоходов.Свернуть("КодСтроки", "Сумма");
                
                КоличествоТаблицаСтандартныхВычетов = ТаблицаСтандартныхВычетов.Количество();
                КоличествоТаблицаПрочихВычетов = ТаблицаПрочихВычетов.Количество();
                КоличествоНеоблагаемыхДоходов = ТаблицаНеоблагаемыхДоходов.Количество();
                
                Если ИмяГруппы = "Страница1" Тогда
                    ЗаполнитьЗначенияСвойств(КлючевыеПоляСтраница1, Элемент);
                ИначеЕсли ИмяГруппы = "Страница2" Тогда
                    ЗаполнитьЗначенияСвойств(КлючевыеПоляСтраница2, Элемент);
                ИначеЕсли ИмяГруппы = "Страница3" Тогда
                    ЗаполнитьЗначенияСвойств(КлючевыеПоляСтраница3, Элемент);
                КонецЕсли;
                
                МаксимальноеКоличествоСтрок = Макс(КоличествоТаблицаСтандартныхВычетов, КоличествоТаблицаПрочихВычетов, КоличествоНеоблагаемыхДоходов);
                
                Счетчик = 0;
                
                Пока Счетчик < МаксимальноеКоличествоСтрок Цикл
                    
                    НомерСтроки = НомерСтроки + 1;
                    Счетчик = Счетчик + 1;
                    
                    // заполняем данные строки в форме отчета
                    Элемент = ТаблицаСтрокГруппы.Добавить(); 
                    Если ИмяГруппы = "Страница1" Тогда
                        Элемент.Ф910_02_A1 = Формат(НомерСтроки, мФорматНомераСтроки);
                        ЗаполнитьЗначенияСвойств(Элемент, КлючевыеПоляСтраница1); 
                    ИначеЕсли ИмяГруппы = "Страница2" Тогда
                        Элемент.Ф910_02_A2 = Формат(НомерСтроки, мФорматНомераСтроки);
                        ЗаполнитьЗначенияСвойств(Элемент, КлючевыеПоляСтраница2); 
                    ИначеЕсли ИмяГруппы = "Страница3" Тогда
                        Элемент.Ф910_02_A3 = Формат(НомерСтроки, мФорматНомераСтроки);
                        ЗаполнитьЗначенияСвойств(Элемент, КлючевыеПоляСтраница3); 
                    ИначеЕсли ИмяГруппы = "Страница4" Тогда
                        Элемент.Ф910_02_A4 = Формат(НомерСтроки, мФорматНомераСтроки);
                        Если КоличествоНеоблагаемыхДоходов >= Счетчик Тогда
                            Если ТипЗнч(ТаблицаНеоблагаемыхДоходов[Счетчик - 1].КодСтроки) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций")
                                И ТаблицаНеоблагаемыхДоходов[Счетчик - 1].Сумма <> 0 Тогда
                                Элемент.Ф910_02_ВидДохода = "";
                                ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'При заполнении приложения 910.02 для вида расчета <%1> не задан код строки Декларации!'"),
                                Строка(ТаблицаНеоблагаемыхДоходов[Счетчик - 1].КодСтроки));                    
                                ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ТаблицаНеоблагаемыхДоходов[Счетчик - 1].КодСтроки);
                            Иначе
                                Элемент.Ф910_02_ВидДохода = ТаблицаНеоблагаемыхДоходов[Счетчик - 1].КодСтроки;
                            КонецЕсли;
                            Если СтрНайти(ТаблицаНеоблагаемыхДоходов[Счетчик - 1].КодСтроки, "654") > 0 Тогда
                                Элемент.Ф910_02_Q = ТаблицаНеоблагаемыхДоходов[Счетчик - 1].Сумма;
                            Иначе
                                Элемент.Ф910_02_P = ТаблицаНеоблагаемыхДоходов[Счетчик - 1].Сумма;
                            КонецЕсли;
                        КонецЕсли;
                    ИначеЕсли ИмяГруппы = "Страница5" Тогда
                        Элемент.Ф910_02_A5 = Формат(НомерСтроки,мФорматНомераСтроки);
                        Если КоличествоТаблицаСтандартныхВычетов >= Счетчик Тогда                    
                            Элемент.Ф910_02_СтандартныеВычеты = ТаблицаСтандартныхВычетов[Счетчик - 1].КодСтроки;
                            Элемент.Ф910_02_U = ТаблицаСтандартныхВычетов[Счетчик - 1].Сумма;
						КонецЕсли;
                        Если КоличествоТаблицаПрочихВычетов >= Счетчик Тогда
                            Элемент.Ф910_02_ПрочиеВычеты = ТаблицаПрочихВычетов[Счетчик - 1].КодСтроки;
                        КонецЕсли;
                    ИначеЕсли ИмяГруппы = "Страница6" Тогда
                        Элемент.Ф910_02_A6 = Формат(НомерСтроки, мФорматНомераСтроки);
                        Если КоличествоТаблицаПрочихВычетов >= Счетчик Тогда
                            Элемент.Ф910_02_W = ТаблицаПрочихВычетов[Счетчик - 1].Сумма;
                        КонецЕсли;
                    ИначеЕсли ИмяГруппы = "Страница7" Тогда
                        Элемент.Ф910_02_A7 = Формат(НомерСтроки, мФорматНомераСтроки);
                    ИначеЕсли ИмяГруппы = "Страница8" Тогда
                        Элемент.Ф910_02_A8 = Формат(НомерСтроки, мФорматНомераСтроки);
                    КонецЕсли;
                    
                КонецЦикла;
                
                НомерСтроки = НомерСтроки + 1;
                
            КонецЦикла;  
        КонецЦикла;
    КонецЦикла;	  			 
    
    РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы,СтруктураФормы); 	 
    РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма,ТекИмяФормы);	
    РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма,ТекИмяФормы,Перезаполнить);     
    
    РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтаФорма);
    
    ТекущаяСтраница = СтрокаФормы.ВсегоСтраниц;  		
	
	 	      	 
КонецПроцедуры // Форма910_02ЗаполнитьАвтоНаСервере()

&НаСервере
Функция Форма910_02РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
	//должен быть предрасчет
	Запрос =  Новый Запрос;
 	Запрос.УстановитьПараметр("парамНалогоплательщик", 		Налогоплательщик);
	Запрос.УстановитьПараметр("парамПериодС", 				НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПериодПо", 				КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПослеПериодПо", 		КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) + 1);
	Запрос.УстановитьПараметр("парамПриход",				ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамРасход",				ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("парамВидСтрокиИсчисление",	Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежаНалог",		Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	Запрос.УстановитьПараметр("парамНеОблагаетсяЦеликом",	Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом);
	Запрос.УстановитьПараметр("парамФизЛицо",				Перечисления.ЮрФизЛицо.ФизЛицо);
	Запрос.УстановитьПараметр("парамПустаяДата",			'00010101');
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", 	мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("парамПогашениеЖилищныхЗаймов", 	Справочники.ВычетыИПН.ПогашениеВознагражденияПоЖилищнымЗаймам);
	Запрос.УстановитьПараметр("парамСтраховыеПремии", 			Справочники.ВычетыИПН.СтраховыеПремииПоДоговорамНакопительногоСтрахования);
	Запрос.УстановитьПараметр("ВключатьОППВВДоходыРаботников",	ВключатьОППВВДоходыРаботников);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());
	
	Если НЕ СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе Тогда
		// Ставка СО
		Запрос.УстановитьПараметр("парамСтавкаСО",			ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)) / 100);
	КонецЕсли;
	
	// если налогоплательщик - ИП, то исключим данные самого индивидуального предпринимателя
	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Налогоплательщик.ИндивидуальныйПредприниматель);
	Иначе
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Неопределено);
	КонецЕсли;   
	
	//ЕП
	ОрганизацияЯвляетсяПлательщикомЕП = ?(СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж"), Истина, Ложь);
	
	// Определим учетную политику по НУ
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации,
	|	УчетнаяПолитикаНУ.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ,
    |	УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН
	|ИЗ	
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодПо, Организация = &парамНалогоплательщик) КАК УчетнаяПолитикаНУ
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОтражениеПоПериодуРегистрации 				= Выборка.ОтражениеПоПериодуРегистрации;
		ОрганизацияЯвляетсяПлательщикомСН			= Выборка.ОрганизацияЯвляетсяПлательщикомСН;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Выборка.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ;
	Иначе
		ОтражениеПоПериодуРегистрации 				= Ложь;
		ОрганизацияЯвляетсяПлательщикомСН			= Ложь;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Ложь;
	КонецЕсли;
	
	// Выбор данных для заполнения формы расшифровки
	
	ДоходыИНалогиТекст = "
	|// Начисленные и необлагаемые ИПН доходы
	|ВЫБРАТЬ
	|	ИПНСведенияОДоходах.ФизЛицо,
	|	ИПНСведенияОДоходах.СуммаДоходаОборот КАК НачисленоДоходов,";
	Если СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	ИПНСведенияОДоходах.ПримененныйВычетОборот КАК НалоговыеВычеты,";
	Иначе
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	0 КАК НалоговыеВычеты,";
	КонецЕсли;
	
	ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	ВЫБОР
	|		КОГДА ИПНСведенияОДоходах.ВидРасчета = &парамПогашениеЖилищныхЗаймов
	|			ТОГДА ИПНСведенияОДоходах.СуммаВычетаОборот
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ПогашениеЖилищныхЗаймов,
	|	ВЫБОР
	|		КОГДА ИПНСведенияОДоходах.ВидРасчета = &парамСтраховыеПремии
	|			ТОГДА ИПНСведенияОДоходах.СуммаВычетаОборот
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |	ВЫБОР 
	|		КОГДА ИПНСведенияОДоходах.СпособНалогообложения = &парамНеОблагаетсяЦеликом 
	|			ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот 
    |       ИНАЧЕ 0
	|	КОНЕЦ КАК ДоходыНеОблагаемыеИПН,
    |	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	ВЫБОР 
	|		КОГДА Не УчетнаяПолитикаПоМесяцам.НеПрименятьКорректировкуСН
	|           ТОГДА ИПНСведенияОДоходах.ПримененнаяЛьготаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВыплатыНеОблагаемыеСН,	
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА ИПНСведенияОДоходах.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |	ВЫБОР 
	|		КОГДА ИПНСведенияОДоходах.СпособНалогообложения = &парамНеОблагаетсяЦеликом 
	|			И ИПНСведенияОДоходах.СуммаДоходаОборот <> 0
    |           ТОГДА ЕСТЬNULL(КодыСтрокДекларации.ВидРасчета, ИПНСведенияОДоходах.ВидРасчета)
    |       ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка)
    |   КОНЕЦ КАК ВидВычета,
  	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |	ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ИПНСведенияОДоходах.ВидРасчета) КАК КодСтроки,
    |	ИПНСведенияОДоходах.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	|			&парамПериодС, 
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			// ИП, авдокатов и частных нотариусов включаем только по требованию
	|			" + ?(НЕ ПризнакИП, "И ВЫБОР
	|										КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	|											ТОГДА НЕ ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|									    ИНАЧЕ ИСТИНА
	|								   КОНЕЦ", "") + "
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель ) КАК ИПНСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                         
	|			ПО (НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) = ВТ_Гражданство.Период)               
	|			 И (ВЫБОР
	|					КОГДА ИПНСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ИПНСведенияОДоходах.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ИПНСведенияОДоходах.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ИПНСведенияОДоходах.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоСН.СрезПоследних(&парамПериодПо, ) КАК КодыСтрокДекларации
    |			ПО ИПНСведенияОДоходах.ВидРасчета = КодыСтрокДекларации.ВидРасчета
	|ГДЕ 
	|	ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ИПНСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина 
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// налоговые взносы, доходы не облагаемые ИПН, ИПН
	|ВЫБРАТЬ
	|	ИПНРасчетыСБюджетом.ФизЛицо,
	|	0 КАК НачисленоДоходов,";
	Если СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	0 КАК НалоговыеВычеты,";
	Иначе
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	ИПНРасчетыСБюджетом.ПримененныйВычет КАК НалоговыеВычеты,";
	КонецЕсли;                        	
	ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
    |	ИПНРасчетыСБюджетом.Налог КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА ИПНРасчетыСБюджетом.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |	"" "",
    |	ИПНРасчетыСБюджетом.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                
	|		ПО (НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)      	
	|			 И (ВЫБОР
	|					КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ИПНРасчетыСБюджетом.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
	|
	|ГДЕ
	|	ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик
	|	И ИПНРасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ИПНРасчетыСБюджетом.ВидДвижения = &парамПриход
	|	И ИПНРасчетыСБюджетом.ВидСтроки = &парамВидСтрокиИсчисление
	|	И ИПНРасчетыСБюджетом.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ИПНРасчетыСБюджетом.Активность = ИСТИНА
	|	И ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина  
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|	И ИПНРасчетыСБюджетом.Активность
	|	" + ?(НЕ ПризнакИП, "И ВЫБОР
	|								КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|									ТОГДА НЕ ИПНРасчетыСБюджетом.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|							    ИНАЧЕ ИСТИНА
	|						   КОНЕЦ", "") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// ИПН, подлежащий к уплате в бюджет
	|ВЫБРАТЬ
	|	ИПНРасчетыСБюджетом.ФизЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	ИПНРасчетыСБюджетом.Налог КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА ИПНРасчетыСБюджетом.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
  	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |	"""",
    |	ИПНРасчетыСБюджетом.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                
	|		ПО (НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ) = ВТ_Гражданство.Период)      	
	|			 И (ВЫБОР
	|					КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ИПНРасчетыСБюджетом.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
	|ГДЕ
	|	ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик
	|	И ИПНРасчетыСБюджетом.Период МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|	И ИПНРасчетыСБюджетом.ФизЛицо <> &парамИндивидуальныйПредприниматель 
	|	И ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина 
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|	И ИПНРасчетыСБюджетом.Активность
	|	" + ?(НЕ ПризнакИП, "И ВЫБОР
	|								КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|									ТОГДА НЕ ИПНРасчетыСБюджетом.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|							    ИНАЧЕ ИСТИНА
	|						   КОНЕЦ", "") + "
	|
    |ОБЪЕДИНИТЬ ВСЕ
	|
	|// ОПВ к перечислению
	|ВЫБРАТЬ
	|	ОПВПодлежитПеречислениюВФонды.ФизЛицо КАК ФизЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	ОПВПодлежитПеречислениюВФонды.Взнос КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.ОПВПодлежитПеречислениюВФонды КАК ОПВПодлежитПеречислениюВФонды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство
	|		ПО (НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ) = ВТ_Гражданство.Период)
	|			И (ВЫБОР
	|					КОГДА ОПВПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ОПВПодлежитПеречислениюВФонды.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ОПВПодлежитПеречислениюВФонды.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ОПВПодлежитПеречислениюВФонды.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ) 
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
	|ГДЕ
	|	ОПВПодлежитПеречислениюВФонды.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВПодлежитПеречислениюВФонды.Период МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ОПВПодлежитПеречислениюВФонды.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|	И ОПВПодлежитПеречислениюВФонды.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ОПВПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина 
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|" + ?(НЕ ПризнакИП, "И ВЫБОР
	|							КОГДА ОПВПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|								ТОГДА НЕ ОПВПодлежитПеречислениюВФонды.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ", "") + "
	|	И ОПВПодлежитПеречислениюВФонды.Активность = ИСТИНА
   	|
    |ОБЪЕДИНИТЬ ВСЕ
	|
	|// ВОСМС к перечислению
	|ВЫБРАТЬ
	|	ВОСМСПодлежитПеречислениюВФонды.ФизЛицо КАК ФизЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
    |   0 КАК ОПВПодлежащийПеречислению, 
   	|	ВОСМСПодлежитПеречислениюВФонды.Взнос КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.ВОСМСПодлежитПеречислениюВФонды КАК ВОСМСПодлежитПеречислениюВФонды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство
	|		ПО (НАЧАЛОПЕРИОДА(ВОСМСПодлежитПеречислениюВФонды.Период, МЕСЯЦ) = ВТ_Гражданство.Период)
	|			И (ВЫБОР
	|					КОГДА ВОСМСПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ВОСМСПодлежитПеречислениюВФонды.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ВОСМСПодлежитПеречислениюВФонды.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ВОСМСПодлежитПеречислениюВФонды.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ) 
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ВОСМСПодлежитПеречислениюВФонды.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
	|ГДЕ
	|	ВОСМСПодлежитПеречислениюВФонды.Налогоплательщик = &парамНалогоплательщик
	|	И ВОСМСПодлежитПеречислениюВФонды.Период МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ВОСМСПодлежитПеречислениюВФонды.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ВОСМСПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|	И ВОСМСПодлежитПеречислениюВФонды.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ВЫБОР 
	|		КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ВОСМСПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица 
	|			ТОГДА ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина  
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|" + ?(НЕ ПризнакИП, "И ВЫБОР
	|							КОГДА ВОСМСПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|								ТОГДА НЕ ВОСМСПодлежитПеречислениюВФонды.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ", "") + "
	|	И ВОСМСПодлежитПеречислениюВФонды.Активность = ИСТИНА 
    |
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Стандартные вычеты ИПН
	|ВЫБРАТЬ
	|	СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо,
	|	0 КАК НачисленоДоходов,
	|	СведенияОбИсчисленииВычетовИПН.ПримененныйВычетОборот КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   СведенияОбИсчисленииВычетовИПН.ВидВычета КАК ВидВычета,
  	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			// ИП, авдокатов и частных нотариусов включаем только по требованию
	|			" + ?(НЕ ПризнакИП, "И ВЫБОР
	|										КОГДА ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
	|											ТОГДА НЕ ФизическоеЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|									    ИНАЧЕ ИСТИНА
	|								   КОНЕЦ", "") + "
	|			И ФизическоеЛицо <> &парамИндивидуальныйПредприниматель 
	|			И (ВидВычета <> Значение(Справочник.ВычетыИПН.ВычетОПВ)
	|			И ВидВычета <> Значение(Справочник.ВычетыИПН.ДобровольныеПенсионныеВзносы)
	|			И ВидВычета <> Значение(Справочник.ВычетыИПН.ПогашениеВознагражденияПоЖилищнымЗаймам)
	|			И ВидВычета <> Значение(Справочник.ВычетыИПН.НаОплатуМедицинскихУслуг)
	|			И ВидВычета <> Значение(Справочник.ВычетыИПН.СтраховыеПремииПоДоговорамНакопительногоСтрахования)
	|			И ВидВычета <> Значение(Справочник.ВычетыИПН.ВычетВОСМС))) КАК СведенияОбИсчисленииВычетовИПН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                    
	|			ПО (НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ) = ВТ_Гражданство.Период)        
	|			И (ВЫБОР
	|					КОГДА СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
	|						И СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период) 
	|ГДЕ 
	|	ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина 
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
    //Прочие налоговые вычеты
    |
	|ВЫБРАТЬ
	|	СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	СведенияОбИсчисленииВычетовИПН.ПримененныйВычетОборот КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   СведенияОбИсчисленииВычетовИПН.ВидВычета  КАК ВидВычета,
  	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			" + ?(НЕ ПризнакИП, "И ВЫБОР
	|										КОГДА ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
	|											ТОГДА НЕ ФизическоеЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|									    ИНАЧЕ ИСТИНА
	|								   КОНЕЦ", "") + "
	|			И ФизическоеЛицо <> &парамИндивидуальныйПредприниматель 
	|			И ВидВычета = Значение(Справочник.ВычетыИПН.ПогашениеВознагражденияПоЖилищнымЗаймам)) КАК СведенияОбИсчисленииВычетовИПН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                    
	|			ПО (НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ) = ВТ_Гражданство.Период)        
	|			И (ВЫБОР
	|					КОГДА СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
	|						И СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
	|ГДЕ 
	|	ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина 
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	СведенияОбИсчисленииВычетовИПН.ПримененныйВычетОборот КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   СведенияОбИсчисленииВычетовИПН.ВидВычета КАК ВидВычета,
   	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
    |ИЗ
	|	РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И ФизическоеЛицо <> &парамИндивидуальныйПредприниматель
	|			" + ?(НЕ ПризнакИП, "И ВЫБОР
	|										КОГДА ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
	|											ТОГДА НЕ ФизическоеЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|									    ИНАЧЕ ИСТИНА
	|								   КОНЕЦ", "") + "
	|			И ВидВычета = Значение(Справочник.ВычетыИПН.ДобровольныеПенсионныеВзносы)) КАК СведенияОбИсчисленииВычетовИПН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                    
	|			ПО (НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ) = ВТ_Гражданство.Период)        
	|			И (ВЫБОР
	|					КОГДА СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
	|						И СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)  
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
	|ГДЕ 
	|	ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина 
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	СведенияОбИсчисленииВычетовИПН.ПримененныйВычетОборот КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   СведенияОбИсчисленииВычетовИПН.ВидВычета КАК ВидВычета,
   	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			" + ?(НЕ ПризнакИП, "И ВЫБОР
	|										КОГДА ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
	|											ТОГДА НЕ ФизическоеЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|									    ИНАЧЕ ИСТИНА
	|								   КОНЕЦ", "") + "
	|			И ФизическоеЛицо <> &парамИндивидуальныйПредприниматель 
	|			И ВидВычета = Значение(Справочник.ВычетыИПН.НаОплатуМедицинскихУслуг)) КАК СведенияОбИсчисленииВычетовИПН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                    
	|			ПО (НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ) = ВТ_Гражданство.Период)        
	|			И (ВЫБОР
	|					КОГДА СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
	|						И СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
	|ГДЕ 
	|	ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина 
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// ОПВ
	|ВЫБРАТЬ
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	ОПВРасчетыСФондами.Взнос КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА ОПВРасчетыСФондами.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
    |	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	ОПВРасчетыСФондами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
    |ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство
	|		ПО (НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)
	|			И (ВЫБОР
	|					КОГДА ОПВРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ОПВРасчетыСФондами.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ОПВРасчетыСФондами.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ОПВРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ) 
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
	|ГДЕ
	|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ОПВРасчетыСФондами.ВидДвижения = &парамПриход
	|	И ОПВРасчетыСФондами.ВидПлатежа = &парамВидПлатежаНалог
	|	И ОПВРасчетыСФондами.ВидСтроки = &парамВидСтрокиИсчисление
	|	И ОПВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ОПВРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина 
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|	И ОПВРасчетыСФондами.Активность
	|" + ?(НЕ ПризнакИП, "И ВЫБОР
	|							КОГДА ОПВРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|								ТОГДА НЕ ОПВРасчетыСФондами.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ", "") + "
	|	И ОПВРасчетыСФондами.Активность = ИСТИНА";
	Если СтруктураРеквизитовФормы.ВедетсяУчетОППВ Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "	
		|ОБЪЕДИНИТЬ ВСЕ 
		|// ОППВ
		|
		|ВЫБРАТЬ
		|	ОППВРасчетыСФондами.ФизЛицо,
		|	ВЫБОР КОГДА &ВключатьОППВВДоходыРаботников Тогда ОППВРасчетыСФондами.Взнос Иначе 0 КОНЕЦ КАК НачисленоДоходов, // включаем ОППВ в сумму доходов, если установлен признак ВключатьОППВВДоходыРаботников
		|	0 КАК НалоговыеВычеты,
		|	0 КАК ОбязательныеПенсионныеВзносы,
		|	ОППВРасчетыСФондами.Взнос КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
		|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
		|	0 КАК ДобровольныеПенсионныеВзносы,
		|	0 КАК ПогашениеЖилищныхЗаймов,
		|	0 КАК СтраховыеПремии,
    	|	0 КАК НаОплатуМедицинскихУслуг,
        |   0 КАК ДоходыНеОблагаемыеИПН,
		|	0 КАК ИндивидуальныйПодоходныйНалог,
		|	0 КАК ВыплаченоДоходов,
		|	ВЫБОР КОГДА &ВключатьОППВВДоходыРаботников Тогда ОППВРасчетыСФондами.Взнос Иначе 0 КОНЕЦ КАК ВыплатыНеОблагаемыеСН, // включаем ОППВ в сумму доходов, если установлен признак ВключатьОППВВДоходыРаботников
		|	0 КАК ВыплатыОблагаемыеСН,  
		|	0 КАК СоциальныеНалог,
		|	0 КАК СоциальныеОтчисления,
		|	ЛОЖЬ КАК ВыплатыПоИЛ,
		|	0 КАК СуммаООСМС,
		|	0 КАК СуммаВОСМС,
		|	0 КАК ИПНПодлежащийПеречислению,
		|	ВЫБОР 
		|		КОГДА ОППВРасчетыСФондами.СтруктурнаяЕдиница <> &парамНалогоплательщик
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
        |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
       	|	0 КАК ОПВПодлежащийПеречислению,
        |   0 КАК ВОСМСПодлежащийПеречислению,
        |   0 КАК ЗадолженностьПоДоходам,
        |   """" КАК КодСтроки,
        |	ОППВРасчетыСФондами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
       	|	0 КАК СНИсчисленный
		|ИЗ
		|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                              
		|		ПО (НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)     
		|			И ОППВРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО 
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
		|		ПО (НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
		|ГДЕ
		|	ОППВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И ОППВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		|	И ОППВРасчетыСФондами.ВидДвижения 	= &парамПриход
		|	И ОППВРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
		|	И ОППВРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление
		|	И ОППВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|	И ОППВРасчетыСФондами.Активность
		|	И ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ОППВРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
		|		ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина 
		|	ИНАЧЕ
		|		ИСТИНА
		|	КОНЕЦ";
	КонецЕсли;
	
	ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// доходы, облагаемые и необлагаемые СН
	|ВЫБРАТЬ
	|	СНСведенияОДоходах.ФизЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	ВЫБОР
	|		КОГДА СНСведенияОДоходах.СпособНалогообложения = &парамНеОблагаетсяЦеликом 
	|			ТОГДА СНСведенияОДоходах.СуммаДоходаОборот
	|		ИНАЧЕ СНСведенияОДоходах.СуммаВычетаОборот
	|	КОНЕЦ КАК ВыплатыНеОблагаемыеСН,
	|	ВЫБОР
	|		КОГДА СНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|			ТОГДА СНСведенияОДоходах.ОблагаемаяБазаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА СНСведенияОДоходах.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
  	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	СНСведенияОДоходах.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.СНСведенияОДоходах.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель ) КАК СНСведенияОДоходах
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                    
	|			ПО (НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ) = ВТ_Гражданство.Период)        
	|			И СНСведенияОДоходах.ФизЛицо = ВТ_Гражданство.ФИО
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|		ПО (НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
	|ГДЕ 
	|	ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И СНСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина 
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// социальный налог
	|ВЫБРАТЬ
	|	СНИсчисленный.ФизЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	СНИсчисленный.Налог КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА СНИсчисленный.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	СНИсчисленный.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	(ВЫБОР
    |       КОГДА СНИсчисленный.Налогоплательщик.ЮрФизЛицо = &парамФизЛицо 
    |           ТОГДА УчетнаяПолитикаПоМесяцам.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника * РасчетныеПоказателиПоМесяцам.РазмерМРП 
    |       ИНАЧЕ 0 
    |   КОНЕЦ) КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.СНИсчисленный КАК СНИсчисленный 
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                        
	|		ПО (НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)        
	|			И СНИсчисленный.ФизЛицо = ВТ_Гражданство.ФИО 
    |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(СНИсчисленный.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
   	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасчетныеПоказателиПоМесяцам КАК РасчетныеПоказателиПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(СНИсчисленный.Период, МЕСЯЦ) = РасчетныеПоказателиПоМесяцам.Период)
	|ГДЕ
	|	СНИсчисленный.Налогоплательщик = &парамНалогоплательщик
	|	И СНИсчисленный.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо 
	|	И СНИсчисленный.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И СНИсчисленный.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина 
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|	И СНИсчисленный.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// социальные отчисления
	|ВЫБРАТЬ
	|	СОРасчетыСФондами.ФизЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	СОРасчетыСФондами.Отчисление КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА СОРасчетыСФондами.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	СОРасчетыСФондами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
	|			И СОРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(СОРасчетыСФондами.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
	|ГДЕ
	|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И СОРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
	|	И СОРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление
	|	И СОРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И СОРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина 
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|	И СОРасчетыСФондами.Активность
    |
    |ОБЪЕДИНИТЬ ВСЕ
	|
	|// расчет социального налога для работников ИП на ОУР
	|ВЫБРАТЬ
	|	СОРасчетыСФондами.ФизЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА СОРасчетыСФондами.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	СОРасчетыСФондами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	(УчетнаяПолитикаПоМесяцам.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника * РасчетныеПоказателиПоМесяцам.РазмерМРП) КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
	|			И СОРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО
    |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(СОРасчетыСФондами.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
   	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасчетныеПоказателиПоМесяцам КАК РасчетныеПоказателиПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(СОРасчетыСФондами.Период, МЕСЯЦ) = РасчетныеПоказателиПоМесяцам.Период)   
	|ГДЕ
	|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И СОРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
	|	И СОРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление
	|	И СОРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
    |	И СОРасчетыСФондами.Налогоплательщик.ЮрФизЛицо = &парамФизЛицо
    |   И СОРасчетыСФондами.Отчисление > (УчетнаяПолитикаПоМесяцам.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника * РасчетныеПоказателиПоМесяцам.РазмерМРП)
	|	И ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И СОРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина 
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|	И СОРасчетыСФондами.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// отчисления  ОСМС
	|ВЫБРАТЬ
	|	ООСМСРасчетыСФондами.ФизЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	ООСМСРасчетыСФондами.Отчисление КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА ООСМСРасчетыСФондами.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	ООСМСРасчетыСФондами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
	|			И ООСМСРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
	|ГДЕ
	|	ООСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ООСМСРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ООСМСРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
	|	И ООСМСРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление
	|	И ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ООСМСРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина 
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|	И ООСМСРасчетыСФондами.Активность
	|	" + ?(ОрганизацияЯвляетсяПлательщикомСН, "", "И ООСМСРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// взносы  ОСМС
	|ВЫБРАТЬ
	|	ВОСМСРасчетыСФондами.ФизЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	ВОСМСРасчетыСФондами.Взнос   КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА ВОСМСРасчетыСФондами.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
  	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	ВОСМСРасчетыСФондами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
	|			И (ВЫБОР
	|					КОГДА ВОСМСРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ВОСМСРасчетыСФондами.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ВОСМСРасчетыСФондами.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ВОСМСРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ) 
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
	|ГДЕ
	|	ВОСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ВОСМСРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ВОСМСРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
	|	И ВОСМСРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление
	|	И ВОСМСРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель 
	|	И ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ВОСМСРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина 
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|	И ВОСМСРасчетыСФондами.Активность
	|	" + ?(НЕ ПризнакИП, "И ВЫБОР
	|							КОГДА ВОСМСРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|								ТОГДА НЕ ВОСМСРасчетыСФондами.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ", "") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// ОПВР
	|ВЫБРАТЬ
	|	ОПВРРасчетыСФондами.ФизЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ОПВРРасчетыСФондами.Взнос КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА ОПВРРасчетыСФондами.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	ОПВРРасчетыСФондами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.ОПВРРасчетыСФондами КАК ОПВРРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(ОПВРРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
	|			И ОПВРРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ОПВРРасчетыСФондами.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
	|ГДЕ
	|	ОПВРРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВРРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ОПВРРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
	|	И ОПВРРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление
	|	И ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ОПВРРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина 
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|	И ОПВРРасчетыСФондами.Активность
	|	" + ?(ОрганизацияЯвляетсяПлательщикомСН, "", "И ОПВРРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// выплаченные доходы
	|ВЫБРАТЬ
	|	ВыплаченныеДоходы.ФизЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	ВыплаченныеДоходы.СуммаДоходаОборот КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА ВыплаченныеДоходы.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
  	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	ВыплаченныеДоходы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.ВыплаченныеДоходыРаботникамОрганизацийНУ.Обороты(
	|		    &парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель
	|			" + ?(НЕ ПризнакИП, "И ВЫБОР
	|										КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	|											ТОГДА НЕ ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|									    ИНАЧЕ ИСТИНА
	|								   КОНЕЦ", "") + "
	|			) КАК ВыплаченныеДоходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
	|			ПО (НАЧАЛОПЕРИОДА(ВыплаченныеДоходы.Период, МЕСЯЦ) = ВТ_Гражданство.Период)                        	
	|				И (ВЫБОР
	|						КОГДА ВыплаченныеДоходы.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|							И ВыплаченныеДоходы.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|							ТОГДА ВыплаченныеДоходы.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|						ИНАЧЕ ВыплаченныеДоходы.ФизЛицо = ВТ_Гражданство.ФИО
	|		   		   КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ВыплаченныеДоходы.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
	|ГДЕ 
	|	ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ВыплаченныеДоходы.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина 
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
  	|";
	
	// Если включаем суммы удержаний по исполнительным листам по фактическому перечислению
	Если Не ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// выплата по исполнительным листам
		|ВЫБРАТЬ
		|	ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо КАК ФизЛицо,
		|	0 КАК НачисленоДоходов,
		|	0 КАК НалоговыеВычеты,
		|	0 КАК ОбязательныеПенсионныеВзносы,
		|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
		|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
		|	0 КАК ДобровольныеПенсионныеВзносы,
		|	0 КАК ПогашениеЖилищныхЗаймов,
		|	0 КАК СтраховыеПремии,
    	|	0 КАК НаОплатуМедицинскихУслуг,
        |   0 КАК ДоходыНеОблагаемыеИПН,
		|	0 КАК ИндивидуальныйПодоходныйНалог,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовРасход + ВзаиморасчетыСПолучателямиИЛ.СуммаСборовРасход КАК ВыплаченоДоходов,
		|	0 КАК ВыплатыНеОблагаемыеСН,
		|	0 КАК ВыплатыОблагаемыеСН,
		|	0 КАК СоциальныеНалог,
		|	0 КАК СоциальныеОтчисления,
		|	ЛОЖЬ КАК ВыплатыПоИЛ,
		|	0 КАК СуммаООСМС,
		|	0 КАК СуммаВОСМС,
		|	0 КАК ИПНПодлежащийПеречислению,
		|	ВЫБОР 
		|		КОГДА ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница <> &парамНалогоплательщик
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
        |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
       	|	0 КАК ОПВПодлежащийПеречислению,
        |   0 КАК ВОСМСПодлежащийПеречислению,
        |   0 КАК ЗадолженностьПоДоходам,
        |   """" КАК КодСтроки,
        |	ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
       	|	0 КАК СНИсчисленный
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Обороты(
		|			&парамПериодС,
		|			&парамПериодПо,
		|			МЕСЯЦ,
		|			Налогоплательщик = &парамНалогоплательщик
		|			И ДокументОснование.ФизЛицо <> &парамИндивидуальныйПредприниматель ) КАК ВзаиморасчетыСПолучателямиИЛ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
		|		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.ПериодВзаиморасчетов, МЕСЯЦ) = ВТ_Гражданство.Период)             
		|				И ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо = ВТ_Гражданство.ФИО              		
		|";
	//Иначе
		// удержания по ИЛ уже находятся в регистр накопления ВыплаченныеДоходыРаботникамОрганизацийНУ
	КонецЕсли;
	
	// Добавим данные по получателям по исполнительным листам
	Если ПризнакАлиментов Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// выплата по исполнительным листам получателям сумм
		|ВЫБРАТЬ
		|	ВзаиморасчетыСПолучателямиИЛ.Получатель КАК ФизЛицо,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовПриход КАК НачисленоДоходов,
		|	0 КАК НалоговыеВычеты,
		|	0 КАК ОбязательныеПенсионныеВзносы,
		|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
		|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
		|	0 КАК ДобровольныеПенсионныеВзносы,
		|	0 КАК ПогашениеЖилищныхЗаймов,
		|	0 КАК СтраховыеПремии,
    	|	0 КАК НаОплатуМедицинскихУслуг,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовПриход КАК ДоходыНеОблагаемыеИПН,
        |	0 КАК ИндивидуальныйПодоходныйНалог,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовРасход КАК ВыплаченоДоходов,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовПриход КАК ВыплатыНеОблагаемыеСН,
		|	0 КАК ВыплатыОблагаемыеСН,
		|	0 КАК СоциальныеНалог,
		|	0 КАК СоциальныеОтчисления,
		|	ИСТИНА КАК ВыплатыПоИЛ,
		|	0 КАК СуммаООСМС,
		|	0 КАК СуммаВОСМС,
		|	0 КАК ИПНПодлежащийПеречислению,
		|	ВЫБОР 
		|		КОГДА ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница <> &парамНалогоплательщик
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
        |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
       	|	0 КАК ОПВПодлежащийПеречислению,
        |   0 КАК ВОСМСПодлежащийПеречислению,
        |   0 КАК ЗадолженностьПоДоходам,
        |	""A.341-1-1"" КАК КодСтроки,
        |	ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
       	|	0 КАК СНИсчисленный
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Обороты(
		|			&парамПериодС,
		|			&парамПериодПо,
		|			МЕСЯЦ,
		|			Налогоплательщик = &парамНалогоплательщик
		|			И Получатель.ЮрФизЛицо = &парамФизЛицо
		|			И НЕ Получатель.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) КАК ВзаиморасчетыСПолучателямиИЛ
		|";
    КонецЕсли;
    
	ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
    |// Задолженность по доходам, невыплаченным физлицам, из текущих взаиморасчетов
   	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
    |	ВзаиморасчетыСРаботниками.ФизЛицо КАК ФизЛицо,
    |	0 КАК НачисленоДоходов,
    |	0 КАК НалоговыеВычеты,
    |	0 КАК ОбязательныеПенсионныеВзносы,
    |	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
    |	0 КАК ДобровольныеПенсионныеВзносы,
    |	0 КАК ПогашениеЖилищныхЗаймов,
    |	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
    |	0 КАК ИндивидуальныйПодоходныйНалог,
    |	0 КАК ВыплаченоДоходов,
    |	0 КАК ВыплатыНеОблагаемыеСН,
    |	0 КАК ВыплатыОблагаемыеСН,
    |	0 КАК СоциальныеНалог,
    |	0 КАК СоциальныеОтчисления,
    |	Ложь КАК ВыплатыПоИЛ,
    |	0 КАК СуммаООСМС,
    |	0 КАК СуммаВОСМС,
    |	0 КАК ИПНПодлежащийПеречислению,
    |	ВЫБОР 
    |		КОГДА ВзаиморасчетыСРаботниками.СтруктурнаяЕдиница <> &парамНалогоплательщик
    |			ТОГДА 1
    |		ИНАЧЕ 0
    |	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
    |	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |	ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	ВзаиморасчетыСРаботниками.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(
	|			&парамПослеПериодПо,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ВзаиморасчетыСРаботниками 
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
	|		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов, МЕСЯЦ) = ВТ_Гражданство.Период)             
	|				И ВзаиморасчетыСРаботниками.ФизЛицо = ВТ_Гражданство.ФИО
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период) 
	|ГДЕ 
	|	ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ВзаиморасчетыСРаботниками.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина 
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Задолженность по доходам, невыплаченным физлицам, из депонированных сумм
	|ВЫБРАТЬ
    |	ВзаиморасчетыСДепонентами.ФизЛицо КАК ФизЛицо,
    |	0 КАК НачисленоДоходов,
    |	0 КАК НалоговыеВычеты,
    |	0 КАК ОбязательныеПенсионныеВзносы,
    |	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
    |	0 КАК ДобровольныеПенсионныеВзносы,
    |	0 КАК ПогашениеЖилищныхЗаймов,
    |	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
    |	0 КАК ИндивидуальныйПодоходныйНалог,
    |	0 КАК ВыплаченоДоходов,
    |	0 КАК ВыплатыНеОблагаемыеСН,
    |	0 КАК ВыплатыОблагаемыеСН,
    |	0 КАК СоциальныеНалог,
    |	0 КАК СоциальныеОтчисления,
    |	Ложь КАК ВыплатыПоИЛ,
    |	0 КАК СуммаООСМС,
    |	0 КАК СуммаВОСМС,
    |	0 КАК ИПНПодлежащийПеречислению,
    |	ВЫБОР 
    |		КОГДА ВзаиморасчетыСДепонентами.СтруктурнаяЕдиница <> &парамНалогоплательщик
    |			ТОГДА 1
    |		ИНАЧЕ 0
    |	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
    |	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
	|	ВзаиморасчетыСДепонентами.СуммаВзаиморасчетовОстаток КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	ВзаиморасчетыСДепонентами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций.Остатки(
	|			&парамПослеПериодПо,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ВзаиморасчетыСДепонентами 
   	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
	|		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСДепонентами.ПериодВзаиморасчетов, МЕСЯЦ) = ВТ_Гражданство.Период)             
	|				И ВзаиморасчетыСДепонентами.ФизЛицо = ВТ_Гражданство.ФИО  
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСДепонентами.ПериодВзаиморасчетов, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период) 
	|ГДЕ 
	|	ВЫБОР КОГДА УчетнаяПолитикаПоМесяцам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ВзаиморасчетыСДепонентами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица ТОГДА
	|		ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина 
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Задолженность по доходам, невыплаченным физлицам, из оплаты по актам закупа
	|ВЫБРАТЬ
    |	ВзаиморасчетыСКонтрагентамиФизЛицами.Контрагент КАК ФизЛицо,
    |	0 КАК НачисленоДоходов,
    |	0 КАК НалоговыеВычеты,
    |	0 КАК ОбязательныеПенсионныеВзносы,
    |	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
    |	0 КАК ДобровольныеПенсионныеВзносы,
    |	0 КАК ПогашениеЖилищныхЗаймов,
    |	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
    |	0 КАК ИндивидуальныйПодоходныйНалог,
    |	0 КАК ВыплаченоДоходов,
    |	0 КАК ВыплатыНеОблагаемыеСН,
    |	0 КАК ВыплатыОблагаемыеСН,
    |	0 КАК СоциальныеНалог,
    |	0 КАК СоциальныеОтчисления,
    |	Ложь КАК ВыплатыПоИЛ,
    |	0 КАК СуммаООСМС,
    |	0 КАК СуммаВОСМС,
    |	0 КАК ИПНПодлежащийПеречислению,
    |	ВЫБОР 
    |		КОГДА ВзаиморасчетыСКонтрагентамиФизЛицами.СтруктурнаяЕдиница <> &парамНалогоплательщик
    |			ТОГДА 1
    |		ИНАЧЕ 0
    |	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
    |	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
	|	ВзаиморасчетыСКонтрагентамиФизЛицами.СуммаВзаиморасчетовОстаток КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	ВзаиморасчетыСКонтрагентамиФизЛицами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами.Остатки(
	|			&парамПослеПериодПо,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И НЕ Контрагент.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус) КАК ВзаиморасчетыСКонтрагентамиФизЛицами
   	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
	|		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСКонтрагентамиФизЛицами.ПериодВзаиморасчетов, МЕСЯЦ) = ВТ_Гражданство.Период)             
	|				И ВзаиморасчетыСКонтрагентамиФизЛицами.Контрагент.ФизЛицо = ВТ_Гражданство.ФИО  
	|";		
		
	// Если суммы удержаний по исполнительным листам включаются по фактическому перечислению
	Если Не ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ Тогда

		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// ставим остатки сумм по ИЛ как задолженность по невыплаченным доходам работникам, с которых удержаны ИЛ
        |ВЫБРАТЬ
        |	ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо КАК ФизЛицо,
        |	0 КАК НачисленоДоходов,
        |	0 КАК НалоговыеВычеты,
        |	0 КАК ОбязательныеПенсионныеВзносы,
        |	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
		|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
        |	0 КАК ДобровольныеПенсионныеВзносы,
        |	0 КАК ПогашениеЖилищныхЗаймов,
        |	0 КАК СтраховыеПремии,
    	|	0 КАК НаОплатуМедицинскихУслуг,
        |   0 КАК ДоходыНеОблагаемыеИПН,
        |	0 КАК ИндивидуальныйПодоходныйНалог,
        |	0 КАК ВыплаченоДоходов,
        |	0 КАК ВыплатыНеОблагаемыеСН,
        |	0 КАК ВыплатыОблагаемыеСН,
        |	0 КАК СоциальныеНалог,
        |	0 КАК СоциальныеОтчисления,
        |	Ложь КАК ВыплатыПоИЛ,
        |	0 КАК СуммаООСМС,
        |	0 КАК СуммаВОСМС,
        |	0 КАК ИПНПодлежащийПеречислению,
        |	ВЫБОР 
        |		КОГДА ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница <> &парамНалогоплательщик
        |			ТОГДА 1
        |		ИНАЧЕ 0
        |	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
        |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
        |	0 КАК ОПВПодлежащийПеречислению,
        |   0 КАК ВОСМСПодлежащийПеречислению,
        |	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовОстаток + ВзаиморасчетыСПолучателямиИЛ.СуммаСборовОстаток КАК ЗадолженностьПоДоходам,
        |   """" КАК КодСтроки,
        |	ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
      	|	0 КАК СНИсчисленный
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Остатки(
		|				&парамПослеПериодПо,
		|				Налогоплательщик = &парамНалогоплательщик
        |				И ДокументОснование.ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ВзаиморасчетыСПолучателямиИЛ
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
        |		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.ПериодВзаиморасчетов, МЕСЯЦ) = ВТ_Гражданство.Период)             
        |				И ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо = ВТ_Гражданство.ФИО              		
        |";		
		
	//Иначе
		// удержания по ИЛ уже находятся в регистре накопления ВыплаченныеДоходыРаботникамОрганизацийНУ
	КонецЕсли;
	
	// Необходимо добавить получателей по исполнительным листам
	Если ПризнакАлиментов Тогда
		
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// ставим остатки сумм по ИЛ как задолженность по невыплаченным доходам получателям ИЛ
		|ВЫБРАТЬ
        |	ВзаиморасчетыСПолучателямиИЛ.Получатель КАК ФизЛицо,
        |	0 КАК НачисленоДоходов,
        |	0 КАК НалоговыеВычеты,
        |	0 КАК ОбязательныеПенсионныеВзносы,
        |	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
		|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
        |	0 КАК ДобровольныеПенсионныеВзносы,
        |	0 КАК ПогашениеЖилищныхЗаймов,
        |	0 КАК СтраховыеПремии,
    	|	0 КАК НаОплатуМедицинскихУслуг,
        |   0 КАК ДоходыНеОблагаемыеИПН,
        |	0 КАК ИндивидуальныйПодоходныйНалог,
        |	0 КАК ВыплаченоДоходов,
        |	0 КАК ВыплатыНеОблагаемыеСН,
        |	0 КАК ВыплатыОблагаемыеСН,
        |	0 КАК СоциальныеНалог,
        |	0 КАК СоциальныеОтчисления,
        |	Ложь КАК ВыплатыПоИЛ,
        |	0 КАК СуммаООСМС,
        |	0 КАК СуммаВОСМС,
        |	0 КАК ИПНПодлежащийПеречислению,
        |	ВЫБОР 
        |		КОГДА ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница <> &парамНалогоплательщик
        |			ТОГДА 1
        |		ИНАЧЕ 0
        |	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
        |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
        |	0 КАК ОПВПодлежащийПеречислению,
        |   0 КАК ВОСМСПодлежащийПеречислению,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовОстаток КАК ЗадолженностьПоДоходам,
        |   """" КАК КодСтроки,
        |	ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
       	|	0 КАК СНИсчисленный
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Остатки(
		|				&парамПослеПериодПо,
		|				Налогоплательщик = &парамНалогоплательщик
		|			    И Получатель.ЮрФизЛицо = &парамФизЛицо 
		|			    И НЕ Получатель.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) КАК ВзаиморасчетыСПолучателямиИЛ 
		|";		
		
	КонецЕсли;


	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = " 
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТ_ДатыПериодовГода
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря  КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &парамПериодС И &парамПериодПо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	МАКСИМУМ(УчетнаяПолитикаНУ.Период) КАК ПериодСреза,
	|	УчетнаяПолитикаНУ.Организация КАК Организация
	|ПОМЕСТИТЬ УчетнаяПолитикаНУПериоды
	|ИЗ
	|	ВТ_ДатыПериодовГода КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНУ
	|		ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(УчетнаяПолитикаНУ.Период, МЕСЯЦ))
	|ГДЕ
	|	УчетнаяПолитикаНУ.Организация = &парамНалогоплательщик
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	УчетнаяПолитикаНУ.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период,
	|	УчетнаяПолитикаНУ.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНУПериоды.Период КАК Период,
	|	УчетнаяПолитикаНУ.НеПрименятьКорректировкуПрочихНалоговВзносовОтчислений КАК НеПрименятьКорректировкуСН,
    |   УчетнаяПолитикаНУ.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника КАК КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника,
	|	УчетнаяПолитикаНУ.ПорядокОбложенияДоходовРаботников КАК ПорядокОбложенияДоходовРаботников
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитикаПоМесяцам
	|ИЗ
	|	УчетнаяПолитикаНУПериоды КАК УчетнаяПолитикаНУПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНУ
	|		ПО (УчетнаяПолитикаНУПериоды.ПериодСреза = НАЧАЛОПЕРИОДА(УчетнаяПолитикаНУ.Период, МЕСЯЦ))
	|			И УчетнаяПолитикаНУПериоды.Организация = УчетнаяПолитикаНУ.Организация
	|;
	|
    |////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|ПОМЕСТИТЬ РасчетныеПоказателиПериоды
	|ИЗ
	|	ВТ_ДатыПериодовГода КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(РасчетныеПоказатели.Период, МЕСЯЦ))
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетныеПоказателиПериоды.Период КАК Период,
	|	РасчетныеПоказатели.РазмерМРП КАК РазмерМРП
	|ПОМЕСТИТЬ ВТ_РасчетныеПоказателиПоМесяцам
	|ИЗ
	|	РасчетныеПоказателиПериоды КАК РасчетныеПоказателиПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО (РасчетныеПоказателиПериоды.ПериодСреза = НАЧАЛОПЕРИОДА(РасчетныеПоказатели.Период, МЕСЯЦ))
	|;
	|
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ
    |	Периоды.Период КАК Период,
    |	ФизическиеЛица.Ссылка КАК ФИО
	|ПОМЕСТИТЬ ВТ_Периоды
    |ИЗ
    |	ВТ_ДатыПериодовГода КАК Периоды
    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
    |		ПО (ИСТИНА)
    |ГДЕ
    |	ФизическиеЛица.ЭтоГруппа = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
    |	Период,
    |	ФИО
	|;
	|/////////////////////////////////////////////////
	|ВЫБРАТЬ
    |	Периоды.Период КАК Период,
    |	Периоды.ФИО КАК ФИО,
    |	МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСреза
	|ПОМЕСТИТЬ ВТ_ГражданствоФизЛицСрезПоследних 
    |	ИЗ
    |		ВТ_Периоды КАК Периоды
    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
    |			ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(ГражданствоФизЛиц.Период, МЕСЯЦ))
    |				И Периоды.ФИО = ГражданствоФизЛиц.ФизЛицо
    |		
    |СГРУППИРОВАТЬ ПО
    |	Периоды.Период,
    |	Периоды.ФИО
	|ИНДЕКСИРОВАТЬ ПО
    |	ПериодСреза,
    |	ФИО
	|;
	|/////////////////////////////////////////////////////
	|ВЫБРАТЬ
    |	ГражданствоФизЛицСрезПоследних.Период КАК Период,
    |	ГражданствоФизЛицСрезПоследних.ФИО КАК ФИО,
	|	ВЫБОР
	|		КОГДА ГражданствоФизЛиц.Страна ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	|		ИНАЧЕ ГражданствоФизЛиц.Страна
	|	КОНЕЦ КАК Страна,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ) 
	|			ТОГДА ГражданствоФизЛиц.Страна 
	|       ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
	|	КОНЕЦ КАК СтранаРезидентства,
	|	ГражданствоФизЛиц.НомерНалоговойРегистрацииВСтранеРезидентства,
	|	ГражданствоФизЛиц.НеЯвляетсяналоговымРезидентомРК
	|ПОМЕСТИТЬ ВТ_ИтогГражданство
    |	ИЗ
    |		ВТ_ГражданствоФизЛицСрезПоследних КАК ГражданствоФизЛицСрезПоследних
    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
    |			ПО ГражданствоФизЛицСрезПоследних.ПериодСреза = ГражданствоФизЛиц.Период
    |				И ГражданствоФизЛицСрезПоследних.ФИО = ГражданствоФизЛиц.ФизЛицо
    |	ГДЕ
	|		(НЕ ВЫБОР
	|					КОГДА ГражданствоФизЛиц.Страна ЕСТЬ NULL 
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	|					ИНАЧЕ ГражданствоФизЛиц.Страна
	|				КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
    |	
    |	ОБЪЕДИНИТЬ ВСЕ
    |	
    |	ВЫБРАТЬ
    |		Периоды.Период,
    |		Контрагенты.Ссылка,
	|		ВЫБОР
	|			КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	|			ИНАЧЕ Контрагенты.СтранаРезидентства
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	|			ИНАЧЕ Контрагенты.СтранаРезидентства
	|		КОНЕЦ,
	|		Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства,
	|		ВЫБОР КОГДА Подстрока(Контрагенты.КБЕ,1,1) = ""2"" Тогда Истина иначе Ложь КОНЕЦ
    |	ИЗ
    |		ВТ_ДатыПериодовГода КАК Периоды
    |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
    |			ПО (ИСТИНА)
    |	ГДЕ
    |		Контрагенты.ЭтоГруппа = ЛОЖЬ
	|		И (НЕ ВЫБОР
	|					КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	|					ИНАЧЕ Контрагенты.СтранаРезидентства
	|				КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
	|;
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ИтогГражданство.Период КАК Период,
    |	ИтогГражданство.ФИО КАК ФИО,
    |	ИтогГражданство.Страна,
	|	ИтогГражданство.НомерНалоговойРегистрацииВСтранеРезидентства,	
	|	ИтогГражданство.НеЯвляетсяналоговымРезидентомРК,
	|	ИтогГражданство.СтранаРезидентства
    |ПОМЕСТИТЬ ВТ_Гражданство
    |ИЗ
    |	ВТ_ИтогГражданство КАК ИтогГражданство
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	Период,
    |	ФИО";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();

	// Свернем строки по физлицам
	ДоходыИНалогиТекст = "
	|ВЫБРАТЬ
	|	ДоходыИНалоги.ФизЛицо КАК ФизЛицо,
	|	ДоходыИНалоги.ВыплатыПоИЛ КАК ВыплатыПоИЛ,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.НачисленоДоходов) 							КАК ЧИСЛО(19, 0)) КАК НачисленоДоходов,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.НалоговыеВычеты) 							КАК ЧИСЛО(19, 0)) КАК НалоговыеВычеты,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ОбязательныеПенсионныеВзносы) 				КАК ЧИСЛО(19, 0)) КАК ОбязательныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ОбязательныеПрофессиональныеПенсионныеВзносы) КАК ЧИСЛО(19, 0)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ОбязательныеПенсионныеВзносыРаботодателя) КАК ЧИСЛО(19, 0)) КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ДобровольныеПенсионныеВзносы) 				КАК ЧИСЛО(19, 0)) КАК ДобровольныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ПогашениеЖилищныхЗаймов) 					КАК ЧИСЛО(19, 0)) КАК ПогашениеЖилищныхЗаймов,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.СтраховыеПремии) 							КАК ЧИСЛО(19, 0)) КАК СтраховыеПремии,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.НаОплатуМедицинскихУслуг) 					КАК ЧИСЛО(19, 0)) КАК НаОплатуМедицинскихУслуг,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ДоходыНеОблагаемыеИПН) 					КАК ЧИСЛО(19, 0)) КАК ДоходыНеОблагаемыеИПН,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ИндивидуальныйПодоходныйНалог) 			КАК ЧИСЛО(19, 0)) КАК ИндивидуальныйПодоходныйНалог,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ВыплаченоДоходов) 							КАК ЧИСЛО(19, 0)) КАК ВыплаченоДоходов,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ВыплатыНеОблагаемыеСН) 					КАК ЧИСЛО(19, 0)) КАК ВыплатыНеОблагаемыеСН,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ВыплатыОблагаемыеСН)						КАК ЧИСЛО(19, 0)) КАК ВыплатыОблагаемыеСН,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.СоциальныеНалог) 							КАК ЧИСЛО(19, 0)) КАК СоциальныеНалог,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.СоциальныеОтчисления) 						КАК ЧИСЛО(19, 0)) КАК СоциальныеОтчисления,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.СуммаООСМС)			 					КАК ЧИСЛО(19, 0)) КАК СуммаООСМС,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.СуммаВОСМС)			 					КАК ЧИСЛО(19, 0)) КАК СуммаВОСМС,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ИПНПодлежащийПеречислению)  				КАК ЧИСЛО(19, 0)) КАК ИПНПодлежащийПеречислению,
	|	ВЫРАЗИТЬ(МАКСИМУМ(ДоходыИНалоги.ФизЛицоСтруктурногоПодразделения)		КАК ЧИСЛО(19, 0)) КАК ФизЛицоСтруктурногоПодразделения,
    |	ДоходыИНалоги.ВидВычета                                                 КАК ВидВычета,
   	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ОПВПодлежащийПеречислению) 				КАК ЧИСЛО(19, 0)) КАК ОПВПодлежащийПеречислению,
    |   ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ВОСМСПодлежащийПеречислению) 				КАК ЧИСЛО(19, 0)) КАК ВОСМСПодлежащийПеречислению,
    |   ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ЗадолженностьПоДоходам) 					КАК ЧИСЛО(19, 0)) КАК ЗадолженностьПоДоходам,
    |   ДоходыИНалоги.КодСтроки КАК КодСтроки,
    |   ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.СНИсчисленный) 						    КАК ЧИСЛО(19, 0)) КАК СНИсчисленный,
    |	ДоходыИНалоги.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|  ПОМЕСТИТЬ ВТ_ДоходыИНалоги
	|ИЗ
	|	(" + ДоходыИНалогиТекст + ") КАК ДоходыИНалоги
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоходыИНалоги.ФизЛицо,
	|	ДоходыИНалоги.ВыплатыПоИЛ,
    |	ДоходыИНалоги.ВидВычета,
    |   ДоходыИНалоги.КодСтроки,
    |	ДоходыИНалоги.СтруктурнаяЕдиница
    |";	
	Запрос.Текст = ДоходыИНалогиТекст;
	Запрос.Выполнить();
	// Выберем прочую информацию, относящуюся к физлицам
	ТекстЗапроса = "
	|//////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТ_Гражданство.Период) КАК ПериодСреза,
	|	ВТ_Гражданство.ФИО КАК ФИО
	|ПОМЕСТИТЬ ТаблПериодСреза
	|	ИЗ
	|	ВТ_Гражданство КАК ВТ_Гражданство
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Гражданство.ФИО;
	|
	|//////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблПериодСреза.ПериодСреза КАК Период,
	|	ТаблПериодСреза.ФИО КАК ФизЛицо,
	|	ТаблГражданство.Страна,
	|	ТаблГражданство.СтранаРезидентства,
	|	ТаблГражданство.НомерНалоговойРегистрацииВСтранеРезидентства,
	|	ТаблГражданство.НеЯвляетсяНалоговымРезидентомРК,
    |	ВЫБОР 
    |       КОГДА ТаблГражданство.СтранаРезидентства = КлассификаторСтранМира.Ссылка 
    |           ТОГДА ЕСТЬNULL(КлассификаторСтранМира.КодАльфа2, """")
    |       ИНАЧЕ """"
    |   КОНЕЦ КАК КодСтраны,
    |	ВЫБОР 
    |       КОГДА ТаблГражданство.Страна = КлассификаторСтранМира.Ссылка 
    |           ТОГДА ЕСТЬNULL(КлассификаторСтранМира.КодАльфа2, """")
    |       ИНАЧЕ """"
    |   КОНЕЦ КАК КодСтраныГражданства
	|ПОМЕСТИТЬ ТаблНеГраждане
	|ИЗ
	|	ТаблПериодСреза КАК ТаблПериодСреза
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ТаблГражданство
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
	|			ПО ТаблГражданство.Страна = КлассификаторСтранМира.Ссылка
	|	ПО ТаблПериодСреза.ПериодСреза = ТаблГражданство.Период
	|	И ТаблПериодСреза.ФИО = ТаблГражданство.ФИО;
	|
	|/////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоходыИНалоги.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL ТОГДА ДоходыИНалоги.ФизЛицо.Наименование 
	|		ИНАЧЕ ФИОФИзЛиц.Фамилия + ВЫБОР
	|									КОГДА ФИОФизЛиц.Имя <> """" ТОГДА "" "" + ФИОФизЛиц.Имя
	|									ИНАЧЕ """"
	|								  КОНЕЦ + 
	|								  ВЫБОР
	|									КОГДА ФИОФизЛиц.Отчество <> """" ТОГДА "" "" + ФИОФизЛиц.Отчество
	|									ИНАЧЕ """"
	|								  КОНЕЦ 
	|	КОНЕЦ КАК ФИОФизЛица,
	|	ДоходыИНалоги.ФизЛицо.РНН КАК РНН,
	|	ДоходыИНалоги.ФизЛицо.ИдентификационныйКодЛичности КАК ИИН,
	|	ТаблНеГраждане.КодСтраны КАК КодСтраны,
    |   ТаблНеГраждане.КодСтраныГражданства КАК КодСтраныГражданства,
	|	ЕСТЬNULL(ТаблНеГраждане.НомерНалоговойРегистрацииВСтранеРезидентства,"""") КАК НомерРегистрации,
	|	ЕСТЬNULL(ТаблНеГраждане.НеЯвляетсяНалоговымРезидентомРК,Истина) КАК НеЯвляетсяНалоговымРезидентомРК,
	|	ЕСТЬNULL(ПаспортныеДанныеФизЛиц.ДокументВид.КодВидаДокументаВНалоговойОтчетности,"""") КАК КодВидаДокументаВНалоговойОтчетности,
	|	ЕСТЬNULL(ПаспортныеДанныеФизЛиц.ДокументНомер, """") КАК НомерДокумента,
	|	ЕСТЬNULL(ПаспортныеДанныеФизЛиц.ДокументДатаВыдачи, &парамПустаяДата) КАК ДатаДокумента,			
	|	ВЫБОР
	|		КОГДА ДоходыИНалоги.ФизЛицо ССЫЛКА Справочник.Контрагенты И ДоходыИНалоги.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|			И НЕ ДоходыИНалоги.ВыплатыПоИЛ ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИндивидуальныйПредпринимательАдвокатЧастныйНотариус,	
	|	ДоходыИНалоги.НачисленоДоходов КАК НачисленоДоходов,
	|	ЕСТЬNULL(ДоходыИНалоги.НалоговыеВычеты, 0) КАК НалоговыеВычеты,
	|	ДоходыИНалоги.ОбязательныеПенсионныеВзносы КАК ОбязательныеПенсионныеВзносы,
	|	ДоходыИНалоги.ОбязательныеПрофессиональныеПенсионныеВзносы КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ДоходыИНалоги.ОбязательныеПенсионныеВзносыРаботодателя КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	ДоходыИНалоги.ДобровольныеПенсионныеВзносы КАК ДобровольныеПенсионныеВзносы,
	|	ДоходыИНалоги.ПогашениеЖилищныхЗаймов КАК ПогашениеЖилищныхЗаймов,
	|	ДоходыИНалоги.СтраховыеПремии КАК СтраховыеПремии,
	|	ДоходыИНалоги.НаОплатуМедицинскихУслуг КАК НаОплатуМедицинскихУслуг,
   	|	ДоходыИНалоги.ДоходыНеОблагаемыеИПН КАК ДоходыНеОблагаемыеИПН,
	|	ДоходыИНалоги.ИндивидуальныйПодоходныйНалог КАК ИндивидуальныйПодоходныйНалог,
	|	ДоходыИНалоги.ВыплаченоДоходов КАК ВыплаченоДоходов,
	|	ДоходыИНалоги.ВыплатыНеОблагаемыеСН КАК ВыплатыНеОблагаемыеСН,
	|	ДоходыИНалоги.ВыплатыОблагаемыеСН КАК ВыплатыОблагаемыеСН,
	|	ДоходыИНалоги.СоциальныеНалог КАК СоциальныеНалог,
	|	ДоходыИНалоги.СоциальныеОтчисления КАК СоциальныеОтчисления,
	|	ДоходыИНалоги.СуммаООСМС КАК СуммаООСМС,
	|	ДоходыИНалоги.СуммаВОСМС КАК СуммаВОСМС,
	|	ДоходыИНалоги.ИПНПодлежащийПеречислению КАК ИПНПодлежащийПеречислению,
	|	ДоходыИНалоги.ФизЛицоСтруктурногоПодразделения КАК ФизЛицоСтруктурногоПодразделения,
    |	ЕСТЬNULL(ДоходыИНалоги.ВидВычета, ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка)) КАК ВидВычета,
    |	ДоходыИНалоги.ОПВПодлежащийПеречислению КАК ОПВПодлежащийПеречислению,
    |   ДоходыИНалоги.ВОСМСПодлежащийПеречислению КАК ВОСМСПодлежащийПеречислению,
    |   ДоходыИНалоги.ЗадолженностьПоДоходам КАК ЗадолженностьПоДоходам,
    |   ДоходыИНалоги.КодСтроки КАК КодСтроки,
    |   ДоходыИНалоги.СНИсчисленный КАК СНИсчисленный,
    |	ДоходыИНалоги.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|
	|ИЗ
	|	ВТ_ДоходыИНалоги КАК ДоходыИНалоги
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамПериодПо) КАК ФИОФизЛиц
	|		ПО (ВЫБОР
    |				КОГДА ДоходыИНалоги.ФизЛицо ССЫЛКА Справочник.Контрагенты
    |					И ДоходыИНалоги.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |					ТОГДА ДоходыИНалоги.ФизЛицо.ФизЛицо = ФИОФизЛиц.ФизЛицо
    |				ИНАЧЕ ДоходыИНалоги.ФизЛицо = ФИОФизЛиц.ФизЛицо
    |			  КОНЕЦ)
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблНеГраждане КАК ТаблНеГраждане  // выберем последнюю страну нерезидентства	
	|		ПО (ВЫБОР
    |				КОГДА ДоходыИНалоги.ФизЛицо ССЫЛКА Справочник.Контрагенты
    |					И ДоходыИНалоги.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |					ТОГДА ДоходыИНалоги.ФизЛицо.ФизЛицо = ТаблНеГраждане.ФизЛицо
    |				ИНАЧЕ ДоходыИНалоги.ФизЛицо = ТаблНеГраждане.ФизЛицо
    |			  КОНЕЦ)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&парамПериодПо) КАК ПаспортныеДанныеФизЛиц
	|		ПО (ВЫБОР
    |				КОГДА ДоходыИНалоги.ФизЛицо ССЫЛКА Справочник.Контрагенты
    |					И ДоходыИНалоги.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |					ТОГДА ДоходыИНалоги.ФизЛицо.ФизЛицо = ПаспортныеДанныеФизЛиц.ФизЛицо
    |				ИНАЧЕ  ДоходыИНалоги.ФизЛицо = ПаспортныеДанныеФизЛиц.ФизЛицо
    |			  КОНЕЦ)	
	|
	|ГДЕ
	|	(ДоходыИНалоги.НачисленоДоходов <> 0
	|	ИЛИ ДоходыИНалоги.НалоговыеВычеты <> 0
	|	ИЛИ ДоходыИНалоги.ОбязательныеПенсионныеВзносы <> 0
	|	ИЛИ ДоходыИНалоги.ОбязательныеПрофессиональныеПенсионныеВзносы <> 0
	|	ИЛИ ДоходыИНалоги.ОбязательныеПенсионныеВзносыРаботодателя <> 0
	|	ИЛИ ДоходыИНалоги.ДобровольныеПенсионныеВзносы <> 0
	|	ИЛИ ДоходыИНалоги.ПогашениеЖилищныхЗаймов <> 0
	|	ИЛИ ДоходыИНалоги.СтраховыеПремии <> 0
	|	ИЛИ ДоходыИНалоги.НаОплатуМедицинскихУслуг <> 0
   	|	ИЛИ ДоходыИНалоги.ДоходыНеОблагаемыеИПН <> 0
	|	ИЛИ ДоходыИНалоги.ИндивидуальныйПодоходныйНалог <> 0
	|	ИЛИ ДоходыИНалоги.ВыплаченоДоходов <> 0
	|	ИЛИ ДоходыИНалоги.ВыплатыНеОблагаемыеСН <> 0
	|	ИЛИ ДоходыИНалоги.ВыплатыОблагаемыеСН <> 0
	|	ИЛИ ДоходыИНалоги.СоциальныеНалог <> 0
	|	ИЛИ ДоходыИНалоги.СоциальныеОтчисления <> 0
	|	ИЛИ ДоходыИНалоги.СуммаООСМС <> 0
	|	ИЛИ ДоходыИНалоги.СуммаВОСМС <> 0
	|	ИЛИ ДоходыИНалоги.ИПНПодлежащийПеречислению <> 0
	|	ИЛИ ДоходыИНалоги.ОПВПодлежащийПеречислению <> 0
    |   ИЛИ ДоходыИНалоги.ВОСМСПодлежащийПеречислению <> 0
    |   ИЛИ ДоходыИНалоги.ЗадолженностьПоДоходам <> 0
    |   ИЛИ ДоходыИНалоги.СНИсчисленный <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL ТОГДА ДоходыИНалоги.ФизЛицо.Наименование 
	|		ИНАЧЕ ФИОФИзЛиц.Фамилия + ВЫБОР
	|									КОГДА ФИОФизЛиц.Имя <> """" ТОГДА "" "" + ФИОФизЛиц.Имя
	|									ИНАЧЕ """"
	|								  КОНЕЦ + 
	|								  ВЫБОР
	|									КОГДА ФИОФизЛиц.Отчество <> """" ТОГДА "" "" + ФИОФизЛиц.Отчество
	|									ИНАЧЕ """"
	|								  КОНЕЦ 
	|	КОНЕЦ,
    |   ДоходыИНалоги.ВидВычета
    |ИТОГИ
    |	СУММА(НачисленоДоходов),
    |	СУММА(ОбязательныеПенсионныеВзносы),
    |	СУММА(ОбязательныеПрофессиональныеПенсионныеВзносы),
    |	СУММА(ОбязательныеПенсионныеВзносыРаботодателя),
   	|	СУММА(СтраховыеПремии),
    |	СУММА(ИндивидуальныйПодоходныйНалог),
    |	СУММА(ВыплаченоДоходов),
    |	СУММА(ВыплатыНеОблагаемыеСН),
    |	СУММА(ВыплатыОблагаемыеСН),
    |	СУММА(СоциальныеНалог),
    |	СУММА(СоциальныеОтчисления),
    |	СУММА(СуммаООСМС),
    |	СУММА(СуммаВОСМС),
    |	СУММА(ИПНПодлежащийПеречислению),
    |   СУММА(ОПВПодлежащийПеречислению),
    |   СУММА(ВОСМСПодлежащийПеречислению),
    |   СУММА(ЗадолженностьПоДоходам),
    |   СУММА(СНИсчисленный)
    |ПО
    |	ФизЛицо,
    |   ФизЛицоСтруктурногоПодразделения
    |";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() и ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 910.02 за отчетный период отсутствуют...'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	    
    Возврат Результат;
	
КонецФункции // Форма910_02РассчитатьДанныеФормы()

&НаКлиенте
Процедура Форма910_02ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СсылкаРасшифровки = ВыбранноеЗначение;
	
	ОбластьРасшифровки = ЭтаФорма.ТекущийЭлемент.ТекущаяОбласть;	
	НомерСтроки = Сред(ОбластьРасшифровки.Имя, Найти(ОбластьРасшифровки.Имя, "__") + 2);
	
    Если ВРег(ИсточникВыбора.ИмяФормы) = ?(СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0, ВРег("ВнешнийОтчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора"), 
        ВРег("Отчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора")) Тогда
        Если ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КодыВидовДоходов2022")  
            ИЛИ ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КодыВидовДокументов")
            ИЛИ ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КодыСтандартныхВычетов2021")  
            ИЛИ ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КодыПрочихВычетов2021")
            ИЛИ ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КодыВидовДоходовНеПодлежащихНалогообложению910_02") Тогда 			
            Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
                ОбластьРасшифровки.Значение = ВыбранноеЗначение;	
            Иначе
                ОбластьРасшифровки.Значение = ВыбранноеЗначение.КодСтроки;
            КонецЕсли;
            ИмяСтраницы = "Страница" + Прав(ЭтаФорма.ТекущийЭлемент.Имя,1);			
            ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ОбластьРасшифровки.Имя,ОбластьРасшифровки.Значение);						
        ИначеЕсли ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КодыВидовДоговоров2021") Тогда 
            Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
                ОбластьРасшифровки.Значение = ВыбранноеЗначение;	
            Иначе
                НомерСтроки = Сред(ОбластьРасшифровки.Имя, Найти(ОбластьРасшифровки.Имя, "__") + 2);
				
				НаименованиеДоговора = СокрЛП(ВыбранноеЗначение.Наименование);
				Если СтрНайти(НаименованиеДоговора, "Пустое значение") Тогда
					НаименованиеДоговора = "";
				КонецЕсли;
                
                Если Найти(ОбластьРасшифровки.Имя, "ВидДоговора") > 0 Тогда 
                    ОбластьНаименование = "Ф910_02_НаименованиеДоговора__" + НомерСтроки;
                    ОбластьРасшифровки.Значение = ВыбранноеЗначение.КодСтроки;
                    Форма910_02ПолеТабличногоДокументаСтраница3.Области[ОбластьНаименование].Значение = НаименованиеДоговора;	
                    
                    ПередатьЗначениеВМногострочнуюСтруктуру("Страница3", ОбластьНаименование, НаименованиеДоговора);
                ИначеЕсли Найти(ОбластьРасшифровки.Имя, "НаименованиеДоговора") > 0 Тогда
                    ОбластьВидДоговора = "Ф910_02ВидДоговора__" + НомерСтроки;
                    ОбластьРасшифровки.Значение = НаименованиеДоговора;
                    Форма910_02ПолеТабличногоДокументаСтраница3.Области[ОбластьВидДоговора].Значение = ВыбранноеЗначение.КодСтроки;
                    
                    ПередатьЗначениеВМногострочнуюСтруктуру("Страница3", ОбластьВидДоговора, ВыбранноеЗначение.КодСтроки);
                КонецЕсли;
            КонецЕсли;
            ИмяСтраницы = "Страница" + Прав(ЭтаФорма.ТекущийЭлемент.Имя,1);			
            ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ОбластьРасшифровки.Имя,ОбластьРасшифровки.Значение);         
        КонецЕсли;
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Форма910_02Расшифровка(ИмяЯчейки)
	
	СтруктураПоФизЛицу = Новый Структура;
	// определим работника
	Если Найти(ИмяЯчейки,"__") > 0 Тогда		
		НомерЯчейки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "__")+ 2));
		
		ОбластьРасшифровки = Форма910_02ПолеТабличногоДокументаСтраница1.Области.Найти("Ф910_02ФИОРезидента__" +  НомерЯчейки);		
		Если ОбластьРасшифровки <> Неопределено Тогда
			Если ЗначениеЗаполнено(ОбластьРасшифровки.Расшифровка) Тогда
				СтруктураПоФизЛицу.Вставить("ФизЛицо", ОбластьРасшифровки.Расшифровка);
				СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);					
			Иначе
				ПоказатьПредупреждение(,НСтр("ru = 'Для формирования расшифровки заполните физическое лицо в графе ""В"" на странице 1.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки не поддерживается."+Символы.ПС+"Расшифровку содержат ячейки формы, выделенные голубым цветом.'"));
		Возврат;
	КонецЕсли;
	
	ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,, СтруктураПоФизЛицу, "Детальный", Истина,, Истина);
	
КонецПроцедуры // Форма910_02Расшифровка()

&НаКлиенте
Процедура Форма910_02РасшифровкаОбщая()
	
	СтруктураПоФизЛицу = Новый Структура;
	Если ПолучитьЗначениеРеквизита(Налогоплательщик, "ЮрФизЛицо") = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		СтруктураПоФизЛицу.Вставить("ФизЛицо", ПолучитьЗначениеРеквизита(Налогоплательщик, "ИндивидуальныйПредприниматель"));
		СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.НеРавно);											
	КонецЕсли;
	
	ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,, СтруктураПоФизЛицу,, Истина,, Истина);	
	
КонецПроцедуры // Форма910_02Расшифровкаобщая()


////////////////////////////////////////////////////////////////////////////////
// Форма 910.03

&НаКлиенте
Процедура Форма910_03ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СсылкаРасшифровки = ВыбранноеЗначение;
	
	ОбластьРасшифровки = ЭтаФорма.ТекущийЭлемент.ТекущаяОбласть;	
	НомерСтроки = Сред(ОбластьРасшифровки.Имя, Найти(ОбластьРасшифровки.Имя, "__") + 2);
    
    Если ВРег(ИсточникВыбора.ИмяФормы) = ?(СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0, ВРег("ВнешнийОтчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора"), 
        ВРег("Отчет.РегламентированныйОтчет910Форма.Форма.ФормаВыбораИзКлассификатора")) Тогда
       Если ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КатегорииФизическихЛиц2023") Тогда 			
            Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
                ОбластьРасшифровки.Значение = ВыбранноеЗначение;	
            Иначе
                ОбластьРасшифровки.Значение = ВыбранноеЗначение.КодСтроки;
            КонецЕсли;
            ИмяСтраницы = "Страница" + Прав(ЭтаФорма.ТекущийЭлемент.Имя,1);			
            ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ОбластьРасшифровки.Имя,ОбластьРасшифровки.Значение);	
       КонецЕсли;
    КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Форма910_03ОбработкаПодбораНаСервере(Расшифровка, ИмяЯчейки, ИмяГруппы, НомерСтроки) Экспорт   

	Если ИмяЯчейки = "Ф910_03ФИОЕП" Тогда
		СсылкаФизЛица = Расшифровка;
		
		ОбластьНаименование = "Ф910_03ФИОЕП__" + НомерСтроки;		
		ОбластьИИН = "Ф910_03ИИНЕП__" + НомерСтроки; 
		ОбластьКодСтраныГражданства = "Ф910_03КодСтраныГражданства__" + НомерСтроки;
		
		Если ТипЗнч(Расшифровка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			// Определим сведения о полном ФИО, РНН, ИИН
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("парамФизЛицо", 	СсылкаФизЛица);
			Запрос.УстановитьПараметр("парамПериодПо", 	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			Запрос.УстановитьПараметр("парамНачГода", 	НачалоГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
			Запрос.УстановитьПараметр("парамПустаяДата", '00010101');
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	ФизическиеЛица.Наименование КАК Наименование,
			               |	ФизическиеЛица.РНН КАК РНН,
			               |	ФизическиеЛица.ИдентификационныйКодЛичности КАК ИИН
			               |ПОМЕСТИТЬ ФизическиеЛица
			               |ИЗ
			               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
			               |ГДЕ
			               |	ФизическиеЛица.Ссылка = &парамФизЛицо
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ГражданствоФизЛицСрезПоследних.Период КАК Период,
			               |	ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НомерНалоговойРегистрацииВСтранеРезидентства, """") КАК НомерНалоговойРегистрацииВСтранеРезидентства,
			               |	ГражданствоФизЛицСрезПоследних.Страна,
			               |	ВЫБОР
			               |		КОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ)
			               |			ТОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
			               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
			               |	КОНЕЦ КАК СтранаРезидентства,
			               |	ВЫБОР
			               |		КОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
			               |			ТОГДА ЛОЖЬ
			               |		ИНАЧЕ ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРК, ИСТИНА)
			               |	КОНЕЦ КАК НеЯвляетсяНалоговымРезидентомРК
			               |ПОМЕСТИТЬ ГражданствоФизЛиц
			               |ИЗ
			               |	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамПериодПо, ФизЛицо = &парамФизЛицо) КАК ГражданствоФизЛицСрезПоследних
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВЫБОР
			               |		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL 
			               |			ТОГДА ФизическиеЛица.Наименование
			               |		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
			               |				КОГДА ФИОФизЛиц.Имя <> """"
			               |					ТОГДА "" "" + ФИОФизЛиц.Имя
			               |				ИНАЧЕ """"
			               |			КОНЕЦ + ВЫБОР
			               |				КОГДА ФИОФизЛиц.Отчество <> """"
			               |					ТОГДА "" "" + ФИОФизЛиц.Отчество
			               |				ИНАЧЕ """"
			               |			КОНЕЦ
			               |	КОНЕЦ КАК ФИО,
			               |	ФизическиеЛица.РНН КАК РНН,
			               |	ФизическиеЛица.ИИН КАК ИИН,
			               |	ЕСТЬNULL(КлассификаторСтранМира.КодАльфа2, """") КАК КодСтраны,
						   |	ВЫБОР 
			               |		КОГДА ГражданствоФизЛиц.Страна = КлассификаторСтранМира.Ссылка 
			               |			ТОГДА ЕСТЬNULL(КлассификаторСтранМира.КодАльфа2, """")
			               |		ИНАЧЕ """"
			               |	КОНЕЦ КАК КодСтраныГражданства,
						   |	ГражданствоФизЛиц.НомерНалоговойРегистрацииВСтранеРезидентства КАК НомерНалоговойРегистрацииВСтранеРезидентства,
			               |	ГражданствоФизЛиц.Страна,
			               |	ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК КАК НеЯвляетсяНалоговымРезидентомРК,
			               |	ГражданствоФизЛиц.СтранаРезидентства
			               |ИЗ
			               |	ФизическиеЛица КАК ФизическиеЛица
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамПериодПо, ФизЛицо = &парамФизЛицо) КАК ФИОФизЛиц
			               |		ПО (ИСТИНА)
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ГражданствоФизЛиц КАК ГражданствоФизЛиц
			               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
			               |			ПО ГражданствоФизЛиц.СтранаРезидентства = КлассификаторСтранМира.Ссылка
			               |		ПО (ИСТИНА)";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
													  
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.ИИН) Тогда
					СтрокаИИН = Выборка.ИИН;
				Иначе
					СтрокаИИН = "";
					ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа C ""ИИН"",
							  |т.к. значение содержит символы, отличные от цифр'");
							  
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,  Формат(Число(НомерСтроки)+1,мФорматНомераСтроки)));
							  
				КонецЕсли; 
				
				КодСтраныГражданства = ?(Выборка.Страна = Справочники.КлассификаторСтранМира.Казахстан ИЛИ Выборка.Страна = Null, "",
					?(ЗначениеЗаполнено(Выборка.КодСтраныГражданства), Выборка.КодСтраныГражданства, "00"));
				
				Форма910_03ПолеТабличногоДокументаСтраница1.Области[ОбластьНаименование].Значение = Выборка.ФИО;				
				Форма910_03ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение 			= СтрокаИИН; 
				Форма910_03ПолеТабличногоДокументаСтраница3.Области[ОбластьКодСтраныГражданства].Значение   = КодСтраныГражданства;
				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьНаименование, 		Выборка.ФИО, ,СсылкаФизЛица);				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьИИН, 				Форма910_03ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение, , СсылкаФизЛица);
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница3", ОбластьКодСтраныГражданства, Форма910_03ПолеТабличногоДокументаСтраница3.Области[ОбластьКодСтраныГражданства].Значение, ,СсылкаФизЛица);	
				
			КонецЕсли;
		
		Иначе // если тип Расшифровка "Контрагент"
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("парамКонтрагент"	, СсылкаФизЛица);
			Запрос.УстановитьПараметр("парамПериодПо", 	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Контрагенты.Наименование КАК Контрагент,
			|	Контрагенты.ИдентификационныйКодЛичности КАК ИИН,
			|	Контрагенты.РНН КАК РНН,
			|	Контрагенты.ФизЛицо КАК ФизЛицо
			|ПОМЕСТИТЬ Контрагенты
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Ссылка = &парамКонтрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НомерНалоговойРегистрацииВСтранеРезидентства, """") КАК НомерНалоговойРегистрацииВСтранеРезидентства,
			|	ГражданствоФизЛицСрезПоследних.Страна КАК Страна,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ)
			|			ТОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
			|	КОНЕЦ КАК СтранаРезидентства,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРК, ИСТИНА)
			|	КОНЕЦ КАК НеЯвляетсяНалоговымРезидентомРК
			|ПОМЕСТИТЬ ГражданствоФизЛиц
			|ИЗ
			|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(
			|			&парамПериодПо,
			|			ФизЛицо В
			|				(ВЫБРАТЬ
			|					Контрагенты.ФизЛицо
			|				ИЗ
			|					Контрагенты КАК Контрагенты)) КАК ГражданствоФизЛицСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL
			|			ТОГДА Контрагенты.Контрагент
			|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
			|				КОГДА ФИОФизЛиц.Имя <> """"
			|					ТОГДА "" "" + ФИОФизЛиц.Имя
			|				ИНАЧЕ """"
			|			КОНЕЦ + ВЫБОР
			|				КОГДА ФИОФизЛиц.Отчество <> """"
			|					ТОГДА "" "" + ФИОФизЛиц.Отчество
			|				ИНАЧЕ """"
			|			КОНЕЦ
			|	КОНЕЦ КАК ФИО,
			|	Контрагенты.РНН КАК РНН,
			|	Контрагенты.ИИН КАК ИИН,
			|	ЕСТЬNULL(КлассификаторСтранМира.КодАльфа2, """") КАК КодСтраны,
			|	ГражданствоФизЛиц.НомерНалоговойРегистрацииВСтранеРезидентства КАК НомерНалоговойРегистрацииВСтранеРезидентства,
			|	ГражданствоФизЛиц.Страна КАК Страна,
			|	ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК КАК НеЯвляетсяНалоговымРезидентомРК
			|ИЗ
			|	Контрагенты КАК Контрагенты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
			|				&парамПериодПо,
			|				ФизЛицо В
			|					(ВЫБРАТЬ
			|						Контрагенты.ФизЛицо
			|					ИЗ
			|						Контрагенты КАК Контрагенты)) КАК ФИОФизЛиц
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ГражданствоФизЛиц КАК ГражданствоФизЛиц
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
			|			ПО ГражданствоФизЛиц.СтранаРезидентства = КлассификаторСтранМира.Ссылка
			|		ПО (ИСТИНА)";
			
			Выборка = Запрос.Выполнить().Выбрать();
									
			Если Выборка.Следующий() Тогда
											
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.ИИН) Тогда
					СтрокаИИН = Выборка.ИИН;
				Иначе
					СтрокаИИН = "";
					
					
					ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа C ""ИИН"",
							  |т.к. значение содержит символы, отличные от цифр'");
							  
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,  Формат(Число(НомерСтроки)+1, мФорматНомераСтроки)));
					
				КонецЕсли;
				
				Форма910_01ПолеТабличногоДокументаСтраница1.Области[ОбластьНаименование].Значение = Выборка.ФИО;				
				Форма910_01ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение          = СтрокаИИН;			
				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьНаименование, Выборка.ФИО,,СсылкаФизЛица);				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьИИН, Форма910_01ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение,,СсылкаФизЛица);
				 
			КонецЕсли;  			
		КонецЕсли; 
		
		Форма910_03ПолеТабличногоДокументаСтраница1.Области[ОбластьНаименование].Расшифровка      = СсылкаФизЛица;				
		Форма910_03ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Расшифровка               = СсылкаФизЛица;			
		
	КонецЕсли;
		
КонецПроцедуры  

&НаСервере
Функция Форма910_03РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь)
	
	//должен быть предрасчет
	Запрос =  Новый Запрос;
	Запрос.УстановитьПараметр("парамНалогоплательщик", 		Налогоплательщик);
	Запрос.УстановитьПараметр("парамПериодС", 				НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПериодПо", 				КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПослеПериодПо", 		КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) + 1);
	Запрос.УстановитьПараметр("парамПриход",				ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамРасход",				ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("парамВидСтрокиИсчисление",	Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежаНалог",		Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	Запрос.УстановитьПараметр("парамНеОблагаетсяЦеликом",	Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом);
	Запрос.УстановитьПараметр("парамФизЛицо",				Перечисления.ЮрФизЛицо.ФизЛицо);
	Запрос.УстановитьПараметр("парамПустаяДата",			'00010101');
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", 	мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("парамПогашениеЖилищныхЗаймов", 	Справочники.ВычетыИПН.ПогашениеВознагражденияПоЖилищнымЗаймам);
	Запрос.УстановитьПараметр("парамСтраховыеПремии", 			Справочники.ВычетыИПН.СтраховыеПремииПоДоговорамНакопительногоСтрахования);
	Запрос.УстановитьПараметр("ВключатьОППВВДоходыРаботников",	ВключатьОППВВДоходыРаботников);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());
	
	Если НЕ СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе Тогда
		// Ставка СО
		Запрос.УстановитьПараметр("парамСтавкаСО",			ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)) / 100);
	КонецЕсли;
	
	// если налогоплательщик - ИП, то исключим данные самого индивидуального предпринимателя
	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Налогоплательщик.ИндивидуальныйПредприниматель);
	Иначе
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Неопределено);
	КонецЕсли; 
	
	// Определим учетную политику по НУ
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации,
	|	УчетнаяПолитикаНУ.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ,
    |	УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН
	|ИЗ	
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодПо, Организация = &парамНалогоплательщик) КАК УчетнаяПолитикаНУ
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОтражениеПоПериодуРегистрации 				= Выборка.ОтражениеПоПериодуРегистрации;
		ОрганизацияЯвляетсяПлательщикомСН			= Выборка.ОрганизацияЯвляетсяПлательщикомСН;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Выборка.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ;
	Иначе
		ОтражениеПоПериодуРегистрации 				= Ложь;
		ОрганизацияЯвляетсяПлательщикомСН			= Ложь;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Ложь;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОтражатьПоПериодуДействия", НЕ ОтражениеПоПериодуРегистрации);
	
	//ЕП
	ОрганизацияЯвляетсяПлательщикомЕП = ?(СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж"), Истина, Ложь);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса =	
	"ВЫБРАТЬ
	|	ЕПСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ЕПСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ЕПСведенияОДоходах.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СУММА(ВЫБОР
	|			КОГДА ЕПСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА ЕПСведенияОДоходах.ОблагаемаяБазаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленныеДоходы,
	|	СУММА(0) КАК ЕПИсчисленный,
	|	СУММА(0) КАК ИПНПодлежащийУплате,
	|	СУММА(0) КАК ОПВПодлежащиеПеречислению,
	|	СУММА(0) КАК ВОСМСПодлежащийПеречислению,
	|	СУММА(0) КАК СоциальныеОтчисления,
	|	СУММА(0) КАК ООСМСПодлежащиеУплате,
	|	СУММА(0) КАК ОПВРПодлежащиеПеречислению,
	|	СУММА(0) КАК ЕППодлежащийПеречислению,
	|	ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ЕПСведенияОДоходах.ВидРасчета) КАК КодСтроки
	|ПОМЕСТИТЬ вт_Данные
	|ИЗ
	|	РегистрНакопления.ЕПСведенияОДоходах.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			Месяц,
	|			Налогоплательщик = &парамНалогоплательщик
	|				) КАК ЕПСведенияОДоходах
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоСН.СрезПоследних(&парамПериодПо, ) КАК КодыСтрокДекларации
	|		ПО ЕПСведенияОДоходах.ВидРасчета = КодыСтрокДекларации.ВидРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕПСведенияОДоходах.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(ЕПСведенияОДоходах.Период, МЕСЯЦ),
	|	ЕПСведенияОДоходах.ФизЛицо,
	|	ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ЕПСведенияОДоходах.ВидРасчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕПРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ЕПРасчетыСФондами.Период, МЕСЯЦ),
	|	ЕПРасчетыСФондами.СтруктурнаяЕдиница,
	|	СУММА(0),
	|	СУММА(ЕПРасчетыСФондами.СуммаПлатежа),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	""""
	|ИЗ
	|	РегистрНакопления.ЕПРасчетыСФондами КАК ЕПРасчетыСФондами
	|ГДЕ
	|	ЕПРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ЕПРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ЕПРасчетыСФондами.ВидПлатежа = &парамВидПлатежаНалог
	|	И ЕПРасчетыСФондами.ВидСтроки = &парамВидСтрокиИсчисление
	|	И ЕПРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ЕПРасчетыСФондами.Период, МЕСЯЦ),
	|	ЕПРасчетыСФондами.СтруктурнаяЕдиница,
	|	ЕПРасчетыСФондами.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕПКомпоненты.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА &ОтражатьПоПериодуДействия
	|				ТОГДА ЕПКомпоненты.МесяцНалоговогоПериода
	|			ИНАЧЕ ЕПКомпоненты.Период
	|		КОНЕЦ, МЕСЯЦ),
	|	ЕПКомпоненты.СтруктурнаяЕдиница,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(ЕПКомпоненты.СуммаИПНОборот),
	|	СУММА(ЕПКомпоненты.СуммаОПВОборот),
	|	СУММА(ЕПКомпоненты.СуммаВОСМСОборот),
	|	СУММА(ЕПКомпоненты.СуммаСООборот),
	|	СУММА(ЕПКомпоненты.СуммаООСМСОборот),
	|	СУММА(ЕПКомпоненты.СуммаОПВРОборот),
	|	СУММА(0),
	|	""""
	|ИЗ
	|	РегистрНакопления.ЕПКомпоненты.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			Месяц,
	|			Налогоплательщик = &парамНалогоплательщик
	|				) КАК ЕПКомпоненты  
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА &ОтражатьПоПериодуДействия
	|				ТОГДА ЕПКомпоненты.МесяцНалоговогоПериода
	|			ИНАЧЕ ЕПКомпоненты.Период
	|		КОНЕЦ, МЕСЯЦ),
	|	ЕПКомпоненты.СтруктурнаяЕдиница,
	|	ЕПКомпоненты.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕПРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ЕПРасчетыСФондами.Период, МЕСЯЦ),
	|	ЕПРасчетыСФондами.СтруктурнаяЕдиница,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(ЕПРасчетыСФондами.СуммаПлатежа),
	|	""""
	|ИЗ
	|	РегистрНакопления.ЕПРасчетыСФондами КАК ЕПРасчетыСФондами 
	|ГДЕ
	|	ЕПРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ЕПРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ЕПРасчетыСФондами.ВидПлатежа = &парамВидПлатежаНалог
	|	И ЕПРасчетыСФондами.ВидСтроки = &парамВидСтрокиИсчисление 
	|	И ЕПРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ЕПРасчетыСФондами.Период, МЕСЯЦ),
	|	ЕПРасчетыСФондами.СтруктурнаяЕдиница,
	|	ЕПРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Данные.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВЫРАЗИТЬ(СУММА(вт_Данные.НачисленныеДоходы) КАК ЧИСЛО(19, 0)) КАК НачисленныеДоходы,
	|	ВЫРАЗИТЬ(СУММА(вт_Данные.ИПНПодлежащийУплате) КАК ЧИСЛО(19, 2)) КАК ИПНПодлежащийУплате,
	|	ВЫРАЗИТЬ(СУММА(вт_Данные.СоциальныеОтчисления) КАК ЧИСЛО(19, 2)) КАК СоциальныеОтчисления,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер, ЛОЖЬ)
	|			ТОГДА ""1""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Категория1,
	|	ВЫБОР
	|		КОГДА СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)
	|			ТОГДА ""2""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Категория2,
	|	ВЫБОР
	|		КОГДА СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.РодительИнвалидаСДетства)
	|			ТОГДА ""4""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Категория4,
	|	ВЫБОР
	|		КОГДА НЕ СведенияОФизлицахУчастникахВОВ.Статус ЕСТЬ NULL
	|			ТОГДА ""3""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Категория3,
	|	ВЫБОР
	|		КОГДА вт_Данные.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
	|	ВЫРАЗИТЬ(СУММА(вт_Данные.ВОСМСПодлежащийПеречислению) КАК ЧИСЛО(19, 2)) КАК ВОСМСПодлежащийПеречислению,
	|	вт_Данные.ФизЛицо КАК ФизЛицо,
	|	вт_Данные.ФизЛицо.ИдентификационныйКодЛичности КАК ИИН,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL
	|			ТОГДА вт_Данные.ФизЛицо.Наименование
	|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
	|				КОГДА ФИОФизЛиц.Имя <> """"
	|					ТОГДА "" "" + ФИОФизЛиц.Имя
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ФИОФизЛиц.Отчество <> """"
	|					ТОГДА "" "" + ФИОФизЛиц.Отчество
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК ФИОФизЛица,
	|	ВЫРАЗИТЬ(СУММА(вт_Данные.ЕПИсчисленный) КАК ЧИСЛО(19, 2)) КАК ЕПИсчисленный,
	|	ВЫРАЗИТЬ(СУММА(вт_Данные.ОПВПодлежащиеПеречислению) КАК ЧИСЛО(19, 2)) КАК ОПВПодлежащиеПеречислению,
	|	ВЫРАЗИТЬ(СУММА(вт_Данные.ООСМСПодлежащиеУплате) КАК ЧИСЛО(19, 2)) КАК ООСМСПодлежащиеУплате,
	|	ВЫРАЗИТЬ(СУММА(вт_Данные.ОПВРПодлежащиеПеречислению) КАК ЧИСЛО(19, 2)) КАК ОПВРПодлежащиеПеречислению,
	|	ВЫРАЗИТЬ(СУММА(вт_Данные.ЕППодлежащийПеречислению) КАК ЧИСЛО(19, 2)) КАК ЕППодлежащийперечислению,
	|	вт_Данные.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ ВТ_ИтоговыеДанные
	|ИЗ
	|	вт_Данные КАК вт_Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамПериодПо, ) КАК ФИОФизЛиц
	|		ПО вт_Данные.ФизЛицо = ФИОФизЛиц.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамПериодПо, Пенсионер) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|		ПО вт_Данные.ФизЛицо = СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(
	|				&парамПериодПо,
	|				ВЫБОР
	|					КОГДА СрокДействияСправки <> ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА СрокДействияСправки >= &парамПериодС
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК СведенияОбИнвалидностиФизлиц
	|		ПО вт_Данные.ФизЛицо = СведенияОбИнвалидностиФизлиц.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ.СрезПоследних(
	|				&парамПериодПо,
	|				Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.ЛицоПриравненноеКУчастникамВОВ)
	|					ИЛИ Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.ВетераныБоевыхДействийНаТерриторииДругихГосударств)) КАК СведенияОФизлицахУчастникахВОВ
	|		ПО вт_Данные.ФизЛицо = СведенияОФизлицахУчастникахВОВ.Физлицо
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_Данные.СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер, ЛОЖЬ)
	|			ТОГДА ""1""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)
	|			ТОГДА ""2""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.РодительИнвалидаСДетства)
	|			ТОГДА ""4""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ СведенияОФизлицахУчастникахВОВ.Статус ЕСТЬ NULL
	|			ТОГДА ""3""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА вт_Данные.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	вт_Данные.ФизЛицо,
	|	вт_Данные.ФизЛицо.ИдентификационныйКодЛичности,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL
	|			ТОГДА вт_Данные.ФизЛицо.Наименование
	|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
	|				КОГДА ФИОФизЛиц.Имя <> """"
	|					ТОГДА "" "" + ФИОФизЛиц.Имя
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ФИОФизЛиц.Отчество <> """"
	|					ТОГДА "" "" + ФИОФизЛиц.Отчество
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ,
	|	вт_Данные.КодСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
		
	ТекстЗапроса = " 
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТ_ДатыПериодовГода
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря  КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &парамПериодС И &парамПериодПо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	МАКСИМУМ(УчетнаяПолитикаНУ.Период) КАК ПериодСреза,
	|	УчетнаяПолитикаНУ.Организация КАК Организация
	|ПОМЕСТИТЬ УчетнаяПолитикаНУПериоды
	|ИЗ
	|	ВТ_ДатыПериодовГода КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНУ
	|		ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(УчетнаяПолитикаНУ.Период, МЕСЯЦ))
	|ГДЕ
	|	УчетнаяПолитикаНУ.Организация = &парамНалогоплательщик
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	УчетнаяПолитикаНУ.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период,
	|	УчетнаяПолитикаНУ.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНУПериоды.Период КАК Период,
	|	УчетнаяПолитикаНУ.НеПрименятьКорректировкуПрочихНалоговВзносовОтчислений КАК НеПрименятьКорректировкуСН,
	|   УчетнаяПолитикаНУ.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника КАК КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника,
	|	УчетнаяПолитикаНУ.ПорядокОбложенияДоходовРаботников КАК ПорядокОбложенияДоходовРаботников
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитикаПоМесяцам
	|ИЗ
	|	УчетнаяПолитикаНУПериоды КАК УчетнаяПолитикаНУПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНУ
	|		ПО (УчетнаяПолитикаНУПериоды.ПериодСреза = НАЧАЛОПЕРИОДА(УчетнаяПолитикаНУ.Период, МЕСЯЦ))
	|			И УчетнаяПолитикаНУПериоды.Организация = УчетнаяПолитикаНУ.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|ПОМЕСТИТЬ РасчетныеПоказателиПериоды
	|ИЗ
	|	ВТ_ДатыПериодовГода КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(РасчетныеПоказатели.Период, МЕСЯЦ))
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетныеПоказателиПериоды.Период КАК Период,
	|	РасчетныеПоказатели.РазмерМРП КАК РазмерМРП
	|ПОМЕСТИТЬ ВТ_РасчетныеПоказателиПоМесяцам
	|ИЗ
	|	РасчетныеПоказателиПериоды КАК РасчетныеПоказателиПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО (РасчетныеПоказателиПериоды.ПериодСреза = НАЧАЛОПЕРИОДА(РасчетныеПоказатели.Период, МЕСЯЦ))
	|;
	|
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	ФизическиеЛица.Ссылка КАК ФИО
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	ВТ_ДатыПериодовГода КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ФизическиеЛица.ЭтоГруппа = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ФИО
	|;
	|/////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	Периоды.ФИО КАК ФИО,
	|	МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСреза
	|ПОМЕСТИТЬ ВТ_ГражданствоФизЛицСрезПоследних 
	|	ИЗ
	|		ВТ_Периоды КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|			ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(ГражданствоФизЛиц.Период, МЕСЯЦ))
	|				И Периоды.ФИО = ГражданствоФизЛиц.ФизЛицо
	|		
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	Периоды.ФИО
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодСреза,
	|	ФИО
	|;
	|/////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГражданствоФизЛицСрезПоследних.Период КАК Период,
	|	ГражданствоФизЛицСрезПоследних.ФИО КАК ФИО,
	|	ГражданствоФизЛиц.Страна КАК Страна,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ) 
	|			ТОГДА ГражданствоФизЛиц.Страна 
	|       ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
	|	КОНЕЦ КАК СтранаРезидентства,
	|	ГражданствоФизЛиц.НомерНалоговойРегистрацииВСтранеРезидентства,
	|	ГражданствоФизЛиц.НеЯвляетсяналоговымРезидентомРК
	|ПОМЕСТИТЬ ВТ_ИтогГражданство
	|	ИЗ
	|		ВТ_ГражданствоФизЛицСрезПоследних КАК ГражданствоФизЛицСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|			ПО ГражданствоФизЛицСрезПоследних.ПериодСреза = ГражданствоФизЛиц.Период
	|				И ГражданствоФизЛицСрезПоследних.ФИО = ГражданствоФизЛиц.ФизЛицо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Периоды.Период,
	|		Контрагенты.Ссылка,
	|		ВЫБОР
	|			КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	|			ИНАЧЕ Контрагенты.СтранаРезидентства
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	|			ИНАЧЕ Контрагенты.СтранаРезидентства
	|		КОНЕЦ,
	|		Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства,
	|		ВЫБОР КОГДА Подстрока(Контрагенты.КБЕ,1,1) = ""2"" Тогда Истина иначе Ложь КОНЕЦ
	|	ИЗ
	|		ВТ_ДатыПериодовГода КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|			ПО (ИСТИНА)
	|	ГДЕ
	|		Контрагенты.ЭтоГруппа = ЛОЖЬ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтогГражданство.Период КАК Период,
	|	ИтогГражданство.ФИО КАК ФИО,
	|	ИтогГражданство.Страна,
	|	ИтогГражданство.НомерНалоговойРегистрацииВСтранеРезидентства,	
	|	ИтогГражданство.НеЯвляетсяналоговымРезидентомРК,
	|	ИтогГражданство.СтранаРезидентства
	|ПОМЕСТИТЬ ВТ_Гражданство
	|ИЗ
	|	ВТ_ИтогГражданство КАК ИтогГражданство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ФИО"; 
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();  	

	
	//// Выберем прочую информацию, относящуюся к физлицам
	ТекстЗапроса = "
	|//////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТ_Гражданство.Период) КАК ПериодСреза,
	|	ВТ_Гражданство.ФИО КАК ФИО
	|ПОМЕСТИТЬ ТаблПериодСреза
	|	ИЗ
	|	ВТ_Гражданство КАК ВТ_Гражданство
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Гражданство.ФИО;
	|
	|//////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблПериодСреза.ПериодСреза КАК Период,
	|	ТаблПериодСреза.ФИО КАК ФизЛицо,
	|	ТаблГражданство.Страна,
	|	ТаблГражданство.СтранаРезидентства,
	|	ТаблГражданство.НомерНалоговойРегистрацииВСтранеРезидентства,
	|	ТаблГражданство.НеЯвляетсяНалоговымРезидентомРК,
	|	ВЫБОР 
	|       КОГДА ТаблГражданство.СтранаРезидентства = КлассификаторСтранМира.Ссылка 
	|           ТОГДА ЕСТЬNULL(КлассификаторСтранМира.КодАльфа2, """")
	|       ИНАЧЕ """"
	|   КОНЕЦ КАК КодСтраны,
	|	ВЫБОР 
	|       КОГДА ТаблГражданство.Страна = КлассификаторСтранМира.Ссылка 
	|           ТОГДА ЕСТЬNULL(КлассификаторСтранМира.КодАльфа2, """")
	|       ИНАЧЕ """"
	|   КОНЕЦ КАК КодСтраныГражданства
	|ПОМЕСТИТЬ ТаблНеГраждане
	|ИЗ
	|	ТаблПериодСреза КАК ТаблПериодСреза
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ТаблГражданство
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
	|			ПО ТаблГражданство.Страна = КлассификаторСтранМира.Ссылка
	|	ПО ТаблПериодСреза.ПериодСреза = ТаблГражданство.Период
	|	И ТаблПериодСреза.ФИО = ТаблГражданство.ФИО
	|;
	|	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИтоговыеДанные.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВТ_ИтоговыеДанные.НачисленныеДоходы КАК НачисленныеДоходы,
	|	ВТ_ИтоговыеДанные.ИПНПодлежащийУплате КАК ИПНПодлежащийУплате,
	|	ВТ_ИтоговыеДанные.СоциальныеОтчисления КАК СоциальныеОтчисления,
	|	ВТ_ИтоговыеДанные.Категория1 КАК Категория1,
	|	ВТ_ИтоговыеДанные.Категория2 КАК Категория2,
	|	ВТ_ИтоговыеДанные.Категория4 КАК Категория4,
	|	ВТ_ИтоговыеДанные.Категория3 КАК Категория3,
	|	ВТ_ИтоговыеДанные.ФизЛицоСтруктурногоПодразделения КАК ФизЛицоСтруктурногоПодразделения,
	|	ВТ_ИтоговыеДанные.ВОСМСПодлежащийПеречислению КАК ВОСМСПодлежащийПеречислению,
	|	ВТ_ИтоговыеДанные.ФизЛицо КАК ФизЛицо,
	|	ВТ_ИтоговыеДанные.ЕПИсчисленный КАК ЕПИсчисленный,
	|	ВТ_ИтоговыеДанные.ОПВПодлежащиеПеречислению КАК ОПВПодлежащиеПеречислению,
	|	ВТ_ИтоговыеДанные.ООСМСПодлежащиеУплате КАК ООСМСПодлежащиеУплате,
	|	ВТ_ИтоговыеДанные.ОПВРПодлежащиеПеречислению КАК ОПВРПодлежащиеПеречислению,
	|	ВТ_ИтоговыеДанные.ЕППодлежащийперечислению КАК ЕППодлежащийперечислению,
	|	ВТ_ИтоговыеДанные.ФИОФизЛица КАК ФИОФизЛица,
	|	ВТ_ИтоговыеДанные.ИИН КАК ИИН,
	|	ВТ_ИтоговыеДанные.КодСтроки КАК КодСтроки,
	|   ТаблНеГраждане.КодСтраныГражданства КАК КодСтраныГражданства
	|ИЗ
	|	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамПериодПо) КАК ФИОФизЛиц
	|		ПО (ВТ_ИтоговыеДанные.ФизЛицо = ФИОФизЛиц.ФизЛицо)
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблНеГраждане КАК ТаблНеГраждане  // выберем последнюю страну нерезидентства	
	|		ПО (ВТ_ИтоговыеДанные.ФизЛицо = ТаблНеГраждане.ФизЛицо)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&парамПериодПо) КАК ПаспортныеДанныеФизЛиц
	|		ПО (ВТ_ИтоговыеДанные.ФизЛицо = ПаспортныеДанныеФизЛиц.ФизЛицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ИтоговыеДанные.ФИОФизЛица,
	|	ВТ_ИтоговыеДанные.ФизЛицоСтруктурногоПодразделения
	|ИТОГИ
	|	СУММА(НачисленныеДоходы),
	|	СУММА(ИПНПодлежащийУплате),
	|	СУММА(СоциальныеОтчисления),
	|	МАКСИМУМ(Категория1),
	|	МАКСИМУМ(Категория2),
	|	МАКСИМУМ(Категория4),
	|	МАКСИМУМ(Категория3),
	|	СУММА(ВОСМСПодлежащийПеречислению),
	|	СУММА(ЕПИсчисленный),
	|	СУММА(ОПВПодлежащиеПеречислению),
	|	СУММА(ООСМСПодлежащиеУплате),
	|	СУММА(ОПВРПодлежащиеПеречислению),
	|	СУММА(ЕППодлежащийперечислению)
	|ПО
	|	ФизЛицо,
	|	ФизЛицоСтруктурногоПодразделения";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() и ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 910.03 за отчетный период отсутствуют...'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура Форма910_03ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма910_03";
	Очистить(ТекИмяФормы, Истина);

	ТекущаяСтраница = 1;
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы",ТекИмяФормы));
	
	Если СтрокаФормы <> Неопределено Тогда
		СтрокаФормы.ВсегоСтраниц = 1;
	КонецЕсли;     		
	
	Если НЕ Перезаполнить Тогда  
		Текст = НСтр("ru = 'Расчет приложения 910.03'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли; 
	
	СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПолучитьПорядокОбложенияДоходовРаботников(Налогоплательщик, КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)); 
	
	ВыборкаФИО = Форма910_03РассчитатьДанныеФормы(Истина).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, ТекИмяФормы);
    
	ОписаниеТиповСтрока12 = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12));
	ОписаниеТиповЧисло12  = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 0));
	
	Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
        НомерСтроки = 2;
        ИмяГруппы = ЭлементСтруктуры.Ключ;
        ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
        ТаблицаСтрокГруппы.Очистить();
        
        КлючевыеПоляСтраница1 = Новый Структура("Ф910_03ФИОЕП, Ф910_03ИИНЕП, Ф910_03Категория,
                                                |Ф910_03ФИОЕП_Расшифровка, Ф910_03ИИНЕП_Расшифровка, Ф910_03Категория_Расшифровка"); 
		
		КлючевыеПоляСтраница3 = Новый Структура("Ф910_03КодСтраныГражданства, Ф910_03КодСтраныГражданства_Расшифровка");
        
        ВыборкаФИО.Сбросить();
        
        Пока ВыборкаФИО.Следующий() Цикл  
            
            ВыборкаПоСтруктурному = ВыборкаФИО.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
                     
            Пока ВыборкаПоСтруктурному.Следующий() Цикл
                
                // заполняем данные строки в форме отчета
                Элемент = ТаблицаСтрокГруппы.Добавить();   			 
                                
                Выборка = ВыборкаПоСтруктурному.Выбрать();

                Пока Выборка.Следующий() Цикл
					                    
                    Если ИмяГруппы = "Страница1" Тогда
                        
                        //Так должны заполнять по отдельности значения выборки 
                        //для каждого листа
                        Элемент.Ф910_03_A1 = Формат(НомерСтроки, мФорматНомераСтроки);
						
						Элемент.Ф910_03ФИОЕП = Выборка.ФИОФизЛица;
                        
                        Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.ИИН) Тогда  					
                            СтрокаИИН = Выборка.ИИН;
                        Иначе                                                   
                            СтрокаИИН = "";
                            
                            ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа C ""ИНН"",
                            |т.к. значение содержит символы, отличные от цифр'");
                            
                            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки)));
                            
                        КонецЕсли;
                        
                        Элемент.Ф910_03ИИНЕП = СтрокаИИН;
                        РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф910_03ФИОЕП",        Выборка.ФизЛицо);
                        РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф910_03ИИНЕП",        Выборка.ФизЛицо);
                        
                        Категория = Новый СписокЗначений;
                        Если Выборка.Категория1 <> "" Тогда
                            Категория.Добавить(ВыборкаПоСтруктурному.Категория1);
                        КонецЕсли;
                        Если Выборка.Категория2 <> "" Тогда
                            Категория.Добавить(ВыборкаПоСтруктурному.Категория2);
                        КонецЕсли;
                        Если Выборка.Категория3 <> "" Тогда
                            Категория.Добавить(ВыборкаПоСтруктурному.Категория3);
                        КонецЕсли;
                        Если Выборка.Категория4 <> "" Тогда
                            Категория.Добавить(ВыборкаПоСтруктурному.Категория4);
                        КонецЕсли;
                        
                        Элемент.Ф910_03Категория  = Категория; 
						
						Элемент.Ф910_03_E  = ВыборкаПоСтруктурному.НачисленныеДоходы;
                        
                    ИначеЕсли ИмяГруппы = "Страница2" Тогда
                        
                        Элемент.Ф910_03_A2 = Формат(НомерСтроки, мФорматНомераСтроки);
						
                        Элемент.Ф910_03_F = ВыборкаПоСтруктурному.ЕПИсчисленный;
						Элемент.Ф910_03_G = ВыборкаПоСтруктурному.ИПНПодлежащийУплате;
						Элемент.Ф910_03_H = ВыборкаПоСтруктурному.ОПВПодлежащиеПеречислению;
						Элемент.Ф910_03_I = ВыборкаПоСтруктурному.ВОСМСПодлежащийПеречислению;            
                        
                    ИначеЕсли ИмяГруппы = "Страница3" Тогда
                        
                        Элемент.Ф910_03_A3 = Формат(НомерСтроки, мФорматНомераСтроки);  
						
						Элемент.Ф910_03КодСтраныГражданства = ?(ЗначениеЗаполнено(Выборка.КодСтраныГражданства), ?(Выборка.КодСтраныГражданства = "KZ", "", Выборка.КодСтраныГражданства), "00");
						РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф910_03КодСтраныГражданства",        Выборка.ФизЛицо);
						
						Элемент.Ф910_03_J  = ВыборкаПоСтруктурному.СоциальныеОтчисления;
                        Элемент.Ф910_03_K  = ВыборкаПоСтруктурному.ООСМСПодлежащиеУплате;
                        Элемент.Ф910_03_L  = ВыборкаПоСтруктурному.ОПВРПодлежащиеПеречислению;
						Элемент.Ф910_03_M  = ВыборкаПоСтруктурному.ЕППодлежащийПеречислению; 
						
                   КонецЕсли;
                                                    
                КонецЦикла;
                
                Если ИмяГруппы = "Страница1" Тогда
                    ЗаполнитьЗначенияСвойств(КлючевыеПоляСтраница1, Элемент);
                КонецЕсли;
                                
                НомерСтроки = НомерСтроки + 1;	           			 				
            КонецЦикла; 
        КонецЦикла;
    КонецЦикла;	  			 
	
	РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы, СтруктураФормы); 	 
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, ТекИмяФормы);	
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, ТекИмяФормы, Перезаполнить);     
	
	РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтаФорма);
	
	ТекущаяСтраница = СтрокаФормы.ВсегоСтраниц;
	
КонецПроцедуры

&НаКлиенте
Процедура Форма910_03РасшифровкаОбщая()
	
	СтруктураПоФизЛицу = Новый Структура;  
	
	Если ПолучитьЗначениеРеквизита(Налогоплательщик, "ЮрФизЛицо") = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда 
		
		СтруктураПоФизЛицу.Вставить("ФизЛицо", ПолучитьЗначениеРеквизита(Налогоплательщик, "ИндивидуальныйПредприниматель"));
		СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.НеРавно);													
		
	КонецЕсли;	  
	
	Если Найти(Элементы.ПанельФорма910_03.ТекущаяСтраница.Имя, "Страница1") > 0 Тогда 
		ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,, СтруктураПоФизЛицу,,,,,Истина);	
	ИначеЕсли Найти(Элементы.ПанельФорма910_03.ТекущаяСтраница.Имя, "Страница2") > 0 ИЛИ Найти(Элементы.ПанельФорма910_03.ТекущаяСтраница.Имя, "Страница3") > 0 Тогда 
		ПоказатьРасшифровкуВВидеРегистраЗадолженностиОрганизацийПоЕП(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);		
	КонецЕсли; 
	
КонецПроцедуры // Форма910_03Расшифровкаобщая()    

&НаКлиенте
Процедура Форма910_03Расшифровка(ИмяЯчейки)
	
	СтруктураПоФизЛицу = Новый Структура;
	// определим работника
	Если Найти(ИмяЯчейки,"__") > 0 Тогда		
		НомерЯчейки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "__")+ 2));
		
		ОбластьРасшифровки = Форма910_03ПолеТабличногоДокументаСтраница1.Области.Найти("Ф910_03ФИОЕП__" +  НомерЯчейки);		
		Если ОбластьРасшифровки <> Неопределено Тогда
			Если ЗначениеЗаполнено(ОбластьРасшифровки.Расшифровка) Тогда
				СтруктураПоФизЛицу.Вставить("ФизЛицо", ОбластьРасшифровки.Расшифровка);
				СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);					
			Иначе
				ПоказатьПредупреждение(,НСтр("ru = 'Для формирования расшифровки заполните физическое лицо в графе ""В"" на странице 1.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки не поддерживается."+Символы.ПС+"Расшифровку содержат ячейки формы, выделенные голубым цветом.'"));
		Возврат;
	КонецЕсли;
	
	ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,, СтруктураПоФизЛицу, "Детальный",,,,);
	
КонецПроцедуры // Форма910_02Расшифровка()

&НаКлиенте
Процедура ПоказатьРасшифровкуВВидеРегистраЗадолженностиОрганизацийПоЕП(ДатаНачала, ДатаОкончания, СтруктурнаяЕдиницаДляОтбора = Неопределено, СтруктураФизЛицоДляОтбора = Неопределено, Режим = "БезДетализации")
	
  	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоМесяца(ДатаНачала));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецМесяца(ДатаОкончания));
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Налогоплательщик", 			  Налогоплательщик); 
		
	ВидОтчета = "СтруктураЗадолженностиОрганизацийПоЕП";
	             	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВидОтчета", ВидОтчета);
	
	СписокСтруктурныхЕдиниц = Новый СписокЗначений;
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиницаДляОтбора) Тогда
		СписокСтруктурныхЕдиниц = мСписокСтруктурныхЕдиниц;
	Иначе
		СписокСтруктурныхЕдиниц.Добавить(СтруктурнаяЕдиницаДляОтбора);
	КонецЕсли;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", СписокСтруктурныхЕдиниц);
	ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПредставлениеСпискаОрганизаций", ПредставлениеСпискаОрганизаций);
	
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Если СтруктураФизЛицоДляОтбора <> Неопределено Тогда
		Если ТипЗнч(СтруктураФизЛицоДляОтбора) = Тип("Структура") Тогда
			ФизЛицоДляОтбора = Неопределено;
			СтруктураФизЛицоДляОтбора.Свойство("ФизЛицо",ФизЛицоДляОтбора);
			Если ФизЛицоДляОтбора <> Неопределено Тогда
				ВидСравненияОтбор = СтруктураФизЛицоДляОтбора.ВидСравнения;
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ФизЛицо",  ФизЛицоДляОтбора, ВидСравненияОтбор);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//ЕП Отбор по фил лицам
	МассивФизЛиц = ПолучитьМассивФизЛиц("Форма910_03");
	
	СписокФизЛиц = Новый СписокЗначений;	
	СписокФизЛиц.ЗагрузитьЗначения(МассивФизЛиц); 
	
	Если СписокФизЛиц.Количество() > 0 Тогда	
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ФизЛицо",  СписокФизЛиц, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;

  	ГруппировкиРасшифровки = Новый Массив();
	
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "Налогоплательщик", НСтр("ru = 'Налогоплательщик'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "МесяцНалоговогоПериода", НСтр("ru = 'Месяц налог. периода'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "НалоговыйКомитет", НСтр("ru = 'Налоговый комитет'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "СтруктурнаяЕдиница", НСтр("ru = 'Структурная единица'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "ФизЛицо", НСтр("ru = 'Работник'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	
	Если НЕ Режим = "БезДетализации" Тогда
		ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "Регистратор", НСтр("ru = 'Документ движения (регистратор)'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	КонецЕсли;   	
	
	
	ЗаполняемыеНастройки = Новый Структура("Группировка, Показатели, ДополнительныеПоля, ГруппировкиРасшифровки",
											Истина, Истина, Истина, ГруппировкиРасшифровки);  
											
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ЗаполняемыеНастройки",ЗаполняемыеНастройки);
		
	ОткрытьФорму("Отчет.СтруктураЗадолженностиОрганизацийПоЕП.Форма.ФормаОтчета", ПараметрыФормы,, Истина);
			
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивФизЛиц(КодФормы)
	
	СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, КодФормы);
	
	ТаблицаСтрокГруппы = СтруктураФормы["Страница1"].Строки;
	
	МассивФизЛиц = Новый Массив;
	
	Если КодФормы = "Форма910_03" Тогда
		МассивФизЛиц = ТаблицаСтрокГруппы.ВыгрузитьКолонку("Ф910_03ФИОЕП_Расшифровка");
	ИначеЕсли КодФормы = "Форма910_01" Тогда
		МассивФизЛиц = ТаблицаСтрокГруппы.ВыгрузитьКолонку("Ф910_01ФИО_Расшифровка");	
	ИначеЕсли КодФормы = "Форма910_02" Тогда
		МассивФизЛиц = ТаблицаСтрокГруппы.ВыгрузитьКолонку("Ф910_02ФИОРезидента_Расшифровка");	
	КонецЕсли;
			
	Возврат МассивФизЛиц;   
				
КонецФункции
	
////////////////////////////////////////////////////////////////////////////////
// Подключаемые

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, ОтчетОбъект);
КонецПроцедуры

// Параметры:
//  Команда - КомандаФормы
//
&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	ОтчетыКлиентПереопределяемый.ОбработчикКоманды(ЭтотОбъект, Команда, Ложь);
КонецПроцедуры
