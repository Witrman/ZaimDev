#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета" , Ложь);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата" , Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки"     , Истина);
	Результат.Вставить("ИспользоватьПриВыводеЗаголовка"    , Истина);
	
	Возврат Результат;
	
КонецФункции

Процедура ПриВыводеЗаголовка(ПараметрыОтчета, Результат) Экспорт
	
	МакетЗаголовок   = ПолучитьОбщийМакет("ЗаголовокОтчета");
	ОбластьЗаголовок = МакетЗаголовок.ПолучитьОбласть("Заголовок");
	
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ПолучитьТекстЗаголовка(ПараметрыОтчета);
	
	Результат.Вывести(ОбластьЗаголовок);
	
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт
	
	ТекстОрганизации = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ПараметрыОтчета.СписокСтруктурныхЕдиниц,,, Истина);
	
	ЗаголовокОтчета = НСтр("ru = 'Движение товаров %1'");
	ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ЗаголовокОтчета, БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода));
		
	Если ОрганизацияВНачале Тогда
		ЗаголовокОтчета = ТекстОрганизации + Символы.ПС + ЗаголовокОтчета;
	Иначе
		ЗаголовокОтчета = ЗаголовокОтчета + " " + ТекстОрганизации;
	КонецЕсли;
	
	Возврат ЗаголовокОтчета;
	
КонецФункции

Процедура ДобавитьРесурсыОтчета(Элемент, ПараметрыОтчета)
	
	ГруппаНачОст = Элемент.Выбор.Элементы.Добавить(тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаНачОст.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаНачОст.Заголовок = "Нач ост";
	
	ГруппаПоступление = Элемент.Выбор.Элементы.Добавить(тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаПоступление.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаПоступление.Заголовок = "Поступление";
	
	ГруппаВыбытие = Элемент.Выбор.Элементы.Добавить(тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаВыбытие.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаВыбытие.Заголовок = "Выбытие";
	
	ГруппаКонОст = Элемент.Выбор.Элементы.Добавить(тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаКонОст.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаКонОст.Заголовок = "Кон. ост";
	
	Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
			
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаНачОст,			"" + ИмяПоказателя + "НачОст");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПоступление,	"" + ИмяПоказателя + "Поступление");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаВыбытие,		"" + ИмяПоказателя + "Выбытие");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаКонОст,			"" + ИмяПоказателя + "КонОст");
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	
	Таблица = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Таблица, "ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Конец);
	
	КоличествоПоказателей = БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);
	
	// Колонка "показатели"
	Если КоличествоПоказателей > 1 Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = "Показатели";
		Колонка.Использование = Истина;
		
		ГруппаПоказатели = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаПоказатели.Использование = Истина;
		ГруппаПоказатели.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПоказатели, "Показатели." + ИмяПоказателя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда		
		ГраницаПериода = Новый Граница(КонецДня(ПараметрыОтчета.КонецПериода), ВидГраницы.Включая);
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", ГраницаПериода);
	КонецЕсли;
	
	СтруктураСчетов = СтруктураСчетов(БухгалтерскиеОтчеты.СчетаУчетаТоваров());
	
	Для Каждого Счета Из СтруктураСчетов Цикл
		
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, Счета.Ключ, Счета.Значение);
		
	КонецЦикла;
	
	ГоризонтальнаяГруппировка = Таблица.Строки;
	ВертикальнаяГруппировка = Таблица.Колонки;
	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
		
		Если ПараметрыОтчета.ВертикальнаяГруппировкаПоСкладам И ПолеВыбраннойГруппировки.Поле = "Склад" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Группировка = ГоризонтальнаяГруппировка.Добавить();
			ГоризонтальнаяГруппировка = Группировка.Структура;
			БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка);
		КонецЕсли;
	КонецЦикла;
	
	Группировка = ВертикальнаяГруппировка.Добавить();
	
	Если ПараметрыОтчета.ВертикальнаяГруппировкаПоСкладам тогда
		
		Группировка.Имя = "Склад";
		
		ДанныеГруппировки = Новый Структура();
		ДанныеГруппировки.Вставить("Использование", 	Истина);
		ДанныеГруппировки.Вставить("Поле", 				"Склад");
		ДанныеГруппировки.Вставить("Представление", 	"Склад");
		ДанныеГруппировки.Вставить("ТипГруппировки", 	0);
		
		БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ДанныеГруппировки, Группировка);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Группировка, "РасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Начало);
	Иначе
		
		Группировка = ВертикальнаяГруппировка.Добавить();
		Группировка.Имя = "Колонки";
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Группировка, "РасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	КонецЕсли;
	
	
	ДобавитьРесурсыОтчета(Группировка, ПараметрыОтчета);
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	БухгалтерскиеОтчеты.ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, ПараметрыОтчета);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант из Схема.ВариантыНастроек Цикл
		НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, Вариант.Имя);
		НастройкиВарианта.Размещение.Вставить(Метаданные.Подсистемы.Руководителю.Подсистемы.Склад, "");
	КонецЦикла;
	
КонецПроцедуры

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление","ДвижениеТоваров", "Движение товаров"));
	
	Возврат Массив;
	
КонецФункции

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("Сумма");
	НаборПоказателей.Добавить("Количество");
	
	Возврат НаборПоказателей;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция СтруктураСчетов(СчетаУчетаТоваров) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТиповойВидыСубконто.Ссылка КАК Счет,
	|	ТиповойВидыСубконто.ВидСубконто,
	|	ТиповойВидыСубконто.Суммовой
	|ПОМЕСТИТЬ ВидыСубконто
	|ИЗ
	|	ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто
	|ГДЕ
	|	ТиповойВидыСубконто.Ссылка В(&СчетаУчетаТоваров)
	|	И ТиповойВидыСубконто.ВидСубконто = &ВидСубконтоСклады
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыСубконто.Счет КАК Счет
	|ИЗ
	|	ВидыСубконто КАК ВидыСубконто
	|ГДЕ
	|	ВидыСубконто.Суммовой = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыСубконто.Счет
	|ИЗ
	|	ВидыСубконто КАК ВидыСубконто
	|ГДЕ
	|	ВидыСубконто.Суммовой = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Типовой.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	НЕ Типовой.Ссылка В
	|				(ВЫБРАТЬ
	|					ВидыСубконто.Счет КАК Счет
	|				ИЗ
	|					ВидыСубконто КАК ВидыСубконто)
	|	И Типовой.Ссылка В(&СчетаУчетаТоваров)";
	
	Запрос.УстановитьПараметр("СчетаУчетаТоваров", СчетаУчетаТоваров);
	Запрос.УстановитьПараметр("ВидСубконтоСклады", ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);
	
	Результат = Запрос.ВыполнитьПакет();
	
	СтруктураСчетов = Новый Структура;
	
	СтруктураСчетов.Вставить("СчетаУчетаСкладИНоменклатура", Результат[1].Выгрузить().ВыгрузитьКолонку("Счет"));
	
	СтруктураСчетов.Вставить("СчетаУчетаСкладТолькоКоличествоИНоменклатура", Результат[2].Выгрузить().ВыгрузитьКолонку("Счет"));
	
	СтруктураСчетов.Вставить("СчетаУчетаНоменклатураБезСклада", Результат[3].Выгрузить().ВыгрузитьКолонку("Счет"));
	
	Возврат СтруктураСчетов;
	
КонецФункции

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета.
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт
	
	ПараметрыОтчета = РассылкаОтчетовБК.НастройкиОтчетаСохраняемыеВРассылке();
	ПараметрыОтчета.Вставить("НаборПоказателей"    , ПолучитьНаборПоказателей());
	ПараметрыОтчета.Вставить("ПоказательСумма"     , 0);
	ПараметрыОтчета.Вставить("ПоказательКоличество", 0);
	ПараметрыОтчета.Вставить("ВертикальнаяГруппировкаПоСкладам" , Ложь);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

#КонецЕсли