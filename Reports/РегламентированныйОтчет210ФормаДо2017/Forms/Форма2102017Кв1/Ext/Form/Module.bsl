
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	мВыбраннаяФорма = "Форма2102017Кв1";
	КодФормы 		= "Форма210";
			
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруФормРегОтчета(ЭтотОбъект);	
	 	
	СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями"); // вынести в переопределяемый модуль	
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;		
	СтруктураРеквизитовФормы.мПечатныеформы 		 = Новый СписокЗначений;
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);
	
	ДатаПодписи	= ТекущаяДатаСеанса();		
	
	ЗаполнениеКодаСтраны = "КодАльфа2";
	мФорматНомераСтроки = "ЧЦ=8; ЧВН=; ЧГ=";
		
	ЗаполнитьСведенияОбОтчетномПериоде();
	
	//индивидуальные ключи формы
	СтруктураРеквизитовФормы.мЕстьРеквизитыСП    = (Метаданные.Справочники.ПодразделенияОрганизаций.Реквизиты.Найти("РНН") <> Неопределено);	
	СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе = (Метаданные.РегистрыНакопления.ИПНСведенияОДоходах.Ресурсы.Найти("ОблагаемаяБаза") <> Неопределено);	
	СтруктураРеквизитовФормы.ОтметкаРезидентов 	 = "1";
	СтруктураРеквизитовФормы.ОтметкаНерезидентов = "2";
	СтруктураРеквизитовФормы.ВедетсяУчетОППВ     = (Метаданные.РегистрыНакопления.Найти("ОППВРасчетыСФондами") <> Неопределено);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл	
		Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
			ЗаполнитьПараметры(ТекФорма.КодФормы);
		КонецЕсли;
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекФорма.КодФормы);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если Модифицированность Тогда 
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);	
		ТекстВопроса = НСТР("ru = 'Сохранить данные отчета?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если КодФормы = "Форма210_01" Тогда
		Форма210_01ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора);
	ИначеЕсли КодФормы = "Форма210_02" Тогда
		Форма210_02ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)	
		
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.КодФормы = Элемент.ТекущиеДанные.КодФормы Тогда
		ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);
		Возврат;
	КонецЕсли;	
	
	РазделыОтчетаПриАктивизацииСтрокиНаСервере(Элемент.ТекущиеДанные.КодФормы, Элемент.ТекущиеДанные.Многострочность);	
		
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Для Каждого СтраницаФорм из Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы Цикл
		Элементы[СтраницаФорм.Имя].Видимость = СтраницаФорм.Имя = ЭтаФорма.КодФормы;	
	КонецЦикла;
	
	ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);	
	
КонецПроцедуры

&НаСервере
Процедура РазделыОтчетаПриАктивизацииСтрокиНаСервере(НовыйКодФормы, НовыйПризнакМногострочность);
	
	//проверим, что стояли не на основной, итоги передаем только когда переходим из доп.форм
	ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	Если ТекФорма <> Неопределено И Не ТекФорма.ПризнакОсновной Тогда
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы, Истина);		
	КонецЕсли;
				
	// установим новые значения реквизитам формы
	ЭтаФорма.КодФормы = НовыйКодФормы;	   
	
	//передаем данные из структуры в ТП
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	
	
	Если  НовыйПризнакМногострочность Тогда
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура СписокРасчетовПриИзменении(Элемент)
	
	ЗаполнитьВидРасчета(СписокРасчетов);
	
КонецПроцедуры 

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Комментарий");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма210ПолеТабличногоДокументаСтраница1

&НаКлиенте
Процедура Форма210ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если Область.Имя = "НомерУведомления" ИЛИ Область.Имя = "ДатаУведомления" Тогда	
		ПередатьЗначениеВСтруктуруНаСервере(Область.Имя,Область.Значение,Истина,Истина);
	КонецЕсли;   
	
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма210РасчетНаСервере(Область.Имя, Область.Значение, КодФормы, Истина);
	КонецЕсли;
	Модифицированность = Истина;             
	
КонецПроцедуры

&НаКлиенте
Процедура Форма210ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;
	  	
	Если (Найти(Ячейка, "Признак7A") > 0)
	 ИЛИ (Найти(Ячейка, "Признак7B") > 0)
	 ИЛИ (Найти(Ячейка, "Признак7C") > 0)
	 Тогда  
	 	Если Область.Значение = "Х" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "Х";
		КонецЕсли;
		
		ПередатьЗначениеВСтруктуруНаСервере(Ячейка, Область.Значение);		
	КонецЕсли;
		                                                                                                                                
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма210ПолеТабличногоДокументаСтраница2

&НаКлиенте
Процедура Форма210ПолеТабличногоДокументаСтраница2ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма210РасчетНаСервере(Область.Имя, Область.Значение, КодФормы, Истина);
	КонецЕсли;
	Модифицированность = Истина;             

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма210ПолеТабличногоДокументаСтраница3

&НаКлиенте
Процедура Форма210ПолеТабличногоДокументаСтраница3ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма210РасчетНаСервере(Область.Имя, Область.Значение, КодФормы, Истина);
	КонецЕсли;

	Модифицированность = Истина;             
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма210ПолеТабличногоДокументаСтраница4

&НаКлиенте
Процедура Форма210ПолеТабличногоДокументаСтраница4ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма210РасчетНаСервере(Область.Имя, Область.Значение, КодФормы, Истина);
	КонецЕсли;

	Модифицированность = Истина;             

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма210_01ПолеТабличногоДокументаСтраница1

&НаКлиенте
Процедура Форма210_01ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;	
	
	Если Найти(Ячейка, "Ф210_01ФИОРезидента__")> 0 ИЛИ Найти(Ячейка, "Ф210_01РННРезидента__")> 0
	 ИЛИ Найти(Ячейка, "Ф210_01ИИНРезидента__")> 0 ИЛИ Найти(Ячейка, "Ф210_01КодСтраныРезидента__")> 0 Тогда
		 НачЗначение = Область.Значение;
		 
		 ЗначениеРасшифровки = Область.Расшифровка;
		 
		 //может быть не заполнена расшировка ячейки при восстановления данных старых форм
		 Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			 ИмяЯчейкиРасшифровки = "Ф210_01ФИОРезидента" + Сред(Ячейка,Найти(Ячейка,"__"));
			 ОбластьРасширофвки = Форма210_01ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяЯчейкиРасшифровки);
			 Если ОбластьРасширофвки <> Неопределено Тогда 
				 ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;
				 Область.Расшифровка = ЗначениеРасшифровки;
				 ПередатьЗначениеВСтруктуруНаСервере(Ячейка,НачЗначение,,,ЗначениеРасшифровки);
			 КонецЕсли;				 
		 КонецЕсли;

		 Если ЗначениеЗаполнено(НачЗначение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			 Возврат;
		 КонецЕсли; 	 
		 
		 СписокВыбора = Новый СписокЗначений;
		 СписокВыбора.Добавить("Справочник.Контрагенты.Форма.ФормаВыбора","Контрагенты");
		 СписокВыбора.Добавить("Справочник.ФизическиеЛица.Форма.ФормаВыбора","Физические лица");
		 
		 ОповещениеВыбора = Новый ОписаниеОповещения("ПослеВыбораЭлемента", ЭтаФорма); 		 
		 СписокВыбора.ПоказатьВыборЭлемента(ОповещениеВыбора, "Выберите расшифровку", СписокВыбора[0]);				 
	Иначе
		 Возврат;
	КонецЕсли; 	 

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма210_01ПолеТабличногоДокументаСтраница2

&НаКлиенте
Процедура Форма210_01ПолеТабличногоДокументаСтраница2Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;	
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница2");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	
	Если (Найти(Ячейка, "Ф210_01ВидДокРезидента__") > 0) Тогда
		
		НачЗначение = Область.Значение;
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
		ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
		ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КодыВидовДокументов");
		ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
		ПараметрыФормы.Вставить("ИмяОтчета",          "РегламентированныйОтчет210Форма");
		ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(НачЗначение), Неопределено, СокрЛП(НачЗначение)));
		
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		
	ИначеЕсли (Найти(Ячейка, "Ф210_01ДатаДокРезидента__") > 0) Тогда
		НачЗначение = Область.Значение;
			
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводДаты(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите дату выдачи документа'"), ЧастиДаты.Дата) ; 
				
	ИначеЕсли (Найти(Ячейка, "Ф210_01НомерДокРезидента__") > 0) Тогда
		НачЗначение = Область.Значение;	
		
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите номер договора'"),100) ; 	
		
	КонецЕсли;
	
	Если Найти(Ячейка, "Ф210_01НомерРегистрацииРезидента__")> 0  Тогда
		
		НачЗначение = Область.Значение;		
		ЗначениеРасшифровки = Область.Расшифровка;
		
		//может быть не заполнена расшировка ячейки при восстановления данных старых форм
		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			ИмяЯчейкиРасшифровки = "Ф210_01ФИОРезидента" + Сред(Ячейка,Найти(Ячейка,"__"));
			ОбластьРасширофвки = Форма210_01ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяЯчейкиРасшифровки);
			Если ОбластьРасширофвки <> Неопределено Тогда 
				ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;
				Область.Расшифровка = ЗначениеРасшифровки;
				ПередатьЗначениеВСтруктуруНаСервере(Ячейка,НачЗначение,,,ЗначениеРасшифровки);
			КонецЕсли;				 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НачЗначение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			Возврат;
		КонецЕсли; 	
		
		СтандартнаяОбработка = Ложь; 
		
		 СписокВыбора = Новый СписокЗначений;
		 СписокВыбора.Добавить("Справочник.Контрагенты.Форма.ФормаВыбора","Контрагенты");
		 СписокВыбора.Добавить("Справочник.ФизическиеЛица.Форма.ФормаВыбора","Физические лица");
		 
		 ОповещениеВыбора = Новый ОписаниеОповещения("ПослеВыбораЭлемента", ЭтаФорма); 		 
		 СписокВыбора.ПоказатьВыборЭлемента(ОповещениеВыбора, "Выберите расшифровку", СписокВыбора[0]);			
	КонецЕсли; 	 
	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма210_01ПолеТабличногоДокументаСтраница3

&НаКлиенте
Процедура Форма210_01ПолеТабличногоДокументаСтраница3Выбор(Элемент, Область, СтандартнаяОбработка)
	 	
	Ячейка = Область.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница3");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		

	
	Если Найти(Ячейка, "Ф210_01КодДохРезидента__")> 0 Тогда
			
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
	ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
	ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КодыВидовДоходов");
	ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
	ПараметрыФормы.Вставить("ИмяОтчета",          "РегламентированныйОтчет210Форма");
	ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(Область.Значение), Неопределено, СокрЛП(Область.Значение)));

	ОткрытьФорму("ОбщаяФорма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
	
	
	ИначеЕсли (Найти(Ячейка, "Ф210_01ВидДоговора__") > 0)  Тогда
		НачЗначение = Элемент.ТекущаяОбласть.Значение;
		
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите вид договора'"),2) ; 			
			
	ИначеЕсли (Найти(Ячейка, "Ф210_01_НаименованиеДоговора__") > 0)  Тогда
		НачЗначение = Элемент.ТекущаяОбласть.Значение;
		
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите наименование договора'"), 100) ; 			


	ИначеЕсли (Найти(Ячейка, "Ф210_01_КодСтраныДоговора__") > 0)  Тогда
		НачЗначение = Элемент.ТекущаяОбласть.Значение;
		СтандартнаяОбработка = Ложь;

		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите код страны, с которой заключен договор'"), 100) ;
			 			 
	Иначе
		 Возврат;
	КонецЕсли;                	
	 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма210_01ПолеТабличногоДокументаСтраница4

&НаКлиенте
Процедура Форма210_01ПолеТабличногоДокументаСтраница4Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;

	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница4");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
		
	Если (Найти(Ячейка, "Ф210_01СтавкаНалога") > 0) Тогда
		НачЗначение = Область.Значение;
				
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите ставку налога'"), 4, 1) ;
				
	ИначеЕсли 	(Найти(Ячейка, "Ф210_01_M__") > 0) 
	 		ИЛИ (Найти(Ячейка, "Ф210_01_N__") > 0)
	 		ИЛИ (Найти(Ячейка, "Ф210_01_O__") > 0) Тогда
			
		НачЗначение = Область.Значение;
		
		Если (Найти(Ячейка, "Ф210_01_M__") > 0) Тогда
			
			ПараметрыСтраницы.Вставить("Расчет", Истина);		
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму начисленных доходов'"), 12,0) ;
						
		ИначеЕсли (Найти(Ячейка, "Ф210_01_N__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 			
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму налоговых вычетов'"), 12,0) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф210_01_O__") > 0) Тогда
			
			ПараметрыСтраницы.Вставить("Расчет", Истина);					
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму ОПВ'"), 12,0) ;

		КонецЕсли;   		
		
		
	Иначе
		 Возврат;
	КонецЕсли; 	 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма210_01ПолеТабличногоДокументаСтраница5

&НаКлиенте
Процедура Форма210_01ПолеТабличногоДокументаСтраница5Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница5");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		

	Если (Найти(Ячейка, "Ф210_01_P__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф210_01_Q__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф210_01_R__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф210_01_S__") > 0) Тогда
		НачЗначение = Область.Значение;
		
		Если (Найти(Ячейка, "Ф210_01_P__") > 0) Тогда	
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму обязательных профессиональных пенсионных взносов'"), 12,0) ;					
			
		ИначеЕсли (Найти(Ячейка, "Ф210_01_Q__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму добровольных пенсионных взносов'"), 12,0) ;
									
		ИначеЕсли (Найти(Ячейка, "Ф210_01_R__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму страховых премий'"), 12,0) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф210_01_S__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму'"), 12,0) ;
		 			
		КонецЕсли;   		
			
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма210_01ПолеТабличногоДокументаСтраница6

&НаКлиенте
Процедура Форма210_01ПолеТабличногоДокументаСтраница6Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница6");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	
	Если (Найти(Ячейка, "Ф210_01_T__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф210_01_U__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф210_01_V__") > 0) Тогда
		НачЗначение = Область.Значение;
		Если (Найти(Ячейка, "Ф210_01_T__") > 0) Тогда 
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму оплаты мед.услуг'"), 12,0) ;
		
		ИначеЕсли (Найти(Ячейка, "Ф210_01_U__") > 0) Тогда			
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму доходов, не подлежащих налогообложению'"), 12,0) ;
				
		ИначеЕсли (Найти(Ячейка, "Ф210_01_V__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму ИПН'"), 12,0) ;
				
		КонецЕсли;   		
				
	КонецЕсли;    	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма210_01ПолеТабличногоДокументаСтраница7

&НаКлиенте
Процедура Форма210_01ПолеТабличногоДокументаСтраница7Выбор(Элемент, Область, СтандартнаяОбработка)
	  
	Ячейка = Область.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница7");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		

	Если (Найти(Ячейка, "Ф210_01_W__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф210_01_X__") > 0) Тогда
		НачЗначение = Область.Значение;
				
		Если (Найти(Ячейка, "Ф210_01_W__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму выплаченных доходов'"), 12,0) ;
								
		ИначеЕсли (Найти(Ячейка, "Ф210_01_X__") > 0) Тогда
			
			ПараметрыСтраницы.Вставить("Расчет", Истина);			

			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму выплат, не облагаемых СН, за исключением ОПВ'"), 12,0) ;
						
		КонецЕсли;   		
		
		
	КонецЕсли;
	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма210_01ПолеТабличногоДокументаСтраница8

&НаКлиенте
Процедура Форма210_01ПолеТабличногоДокументаСтраница8Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница8");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	
	Если (Найти(Ячейка, "Ф210_01_Z__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф210_01_AA__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф210_01_AB__") > 0) Тогда
	 
	 	НачЗначение = Область.Значение;
		
		Если (Найти(Ячейка, "Ф210_01_Z__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму СН'"), 12,0) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф210_01_AA__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму расходов работодателя'"), 12,0) ; 			 

		ИначеЕсли (Найти(Ячейка, "Ф210_01_AB__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму СО'"), 12,0) ;			 
					
		КонецЕсли;   		
		
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма210_02ПолеТабличногоДокументаСтраница1

&НаКлиенте
Процедура Форма210_02ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя; 
	НачальноеИмяЯчейки = Лев(Ячейка,Найти(Ячейка, "__")-1);
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница1");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		

	Если НачальноеИмяЯчейки = "КНОНалогоплательщика" Тогда
		
		ПараметрыСтраницы.Вставить("ПроверятьЦифрыВСтроке", Истина);		
		НачЗначение = Область.Значение;
		
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите КНО налогоплательщика'"), 4) ; 			 
						
			
	ИначеЕсли НачальноеИмяЯчейки = "КНОФилиала" Тогда
		
		ПараметрыСтраницы.Вставить("ПроверятьЦифрыВСтроке", Истина);		
		НачЗначение = Область.Значение;
		
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите код органа государственных доходов филиала'"), 4) ; 	
						
	ИначеЕсли НачальноеИмяЯчейки = "Ф210_02_001_1" ИЛИ НачальноеИмяЯчейки = "Ф210_02_001_2" ИЛИ НачальноеИмяЯчейки = "Ф210_02_001_3" Тогда
		
		НачЗначение = Область.Значение;
		ПараметрыСтраницы.Вставить("Расчет", Истина);				
		
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму ИПН, подлежащего перечислению'"), 12,0) ;
			
	ИначеЕсли НачальноеИмяЯчейки = "Ф210_02_002_1" ИЛИ НачальноеИмяЯчейки = "Ф210_02_002_2" ИЛИ НачальноеИмяЯчейки = "Ф210_02_002_3" Тогда
		
		НачЗначение = Область.Значение;
		ПараметрыСтраницы.Вставить("Расчет", Истина);		
		
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму ОПВ, подлежащих перечислению'"), 12,0) ;
		
	ИначеЕсли НачальноеИмяЯчейки = "Ф210_02_003_1" ИЛИ НачальноеИмяЯчейки = "Ф210_02_003_2" ИЛИ НачальноеИмяЯчейки = "Ф210_02_003_3" Тогда
		
		НачЗначение = Элемент.ТекущаяОбласть.Значение;
		ПараметрыСтраницы.Вставить("Расчет", Истина);		
		
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму ОППВ, подлежащих перечислению'"), 12,0) ;
							
	КонецЕсли;    
	
	Если (Найти(Ячейка, "РННФилиала__")> 0) ИЛИ (Найти(Ячейка, "ИИН_БИНФилиала__")> 0) 
	 ИЛИ (Найти(Ячейка, "ФилиалНазв__")> 0) Тогда		
	 
	    НачЗначение = Область.Значение; 
	 	ЗначениеРасшифровки = Область.Расшифровка;
		
		//может быть не заполнена расшировка ячейки при восстановления данных старых форм
		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			ИмяЯчейкиРасшифровки = "ФилиалНазв" + Сред(Ячейка,Найти(Ячейка,"__"));
			ОбластьРасширофвки = Форма210_02ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяЯчейкиРасшифровки);
			Если ОбластьРасширофвки <> Неопределено Тогда 
				ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;
				Область.Расшифровка = ЗначениеРасшифровки;
				ПередатьЗначениеВСтруктуруНаСервере(Ячейка,НачЗначение,,,ЗначениеРасшифровки);
			КонецЕсли;				 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НачЗначение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			Возврат;
		КонецЕсли; 
		 
		 СписокВыбора = Новый СписокЗначений;
		 СписокВыбора.Добавить("Справочник.Организации.Форма.ФормаВыбора","Организации");
		 СписокВыбора.Добавить("Справочник.ПодразделенияОрганизаций.Форма.ФормаВыбора","Подразделения организаций");
		 
		 ОповещениеВыбора = Новый ОписаниеОповещения("ПослеВыбораЭлемента", ЭтаФорма); 		 
		 СписокВыбора.ПоказатьВыборЭлемента(ОповещениеВыбора, "Выберите расшифровку", СписокВыбора[0]);	
		 
		Иначе
		 Возврат;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма210_02ПолеТабличногоДокументаСтраница2

&НаКлиенте
Процедура Форма210_02ПолеТабличногоДокументаСтраница2Выбор(Элемент, Область, СтандартнаяОбработка)

	Ячейка = Область.Имя; // начало имени ячейки  
	НачальноеИмяЯчейки = Лев(Ячейка, 13);
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница2");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Истина);		
	
	Если НачальноеИмяЯчейки = "Ф210_02_004_1" ИЛИ НачальноеИмяЯчейки = "Ф210_02_004_2" ИЛИ НачальноеИмяЯчейки = "Ф210_02_004_3" Тогда		
		НачЗначение = Область.Значение;
		
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму СН'"), 12,0) ; 				

	ИначеЕсли НачальноеИмяЯчейки = "Ф210_02_005_1" ИЛИ НачальноеИмяЯчейки = "Ф210_02_005_2" ИЛИ НачальноеИмяЯчейки = "Ф210_02_005_3" Тогда
		
		
		НачЗначение = Область.Значение;    				
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму СО'"), 12,0) ; 		
		
	ИначеЕсли Найти(Ячейка, "ДатаПодачи") Тогда
		НачЗначение = Область.Значение;
		
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводДаты(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите дату подачи'"), ЧастиДаты.Дата) ; 	
		
	ИначеЕсли Найти(Ячейка, "КодНалоговогоОргана") > 0 Тогда		
		
		НачЗначение = Область.Значение;			
		ПараметрыСтраницы.Вставить("ПроверятьЦифрыВСтроке", Истина);		
		ПараметрыСтраницы.Вставить("Расчет", Ложь);		
		НачЗначение = Область.Значение;
		
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите код органа государственных доходов'"), 4) ; 
		
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыФормы.Вставить("Налогоплательщик",         Налогоплательщик);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, мВыбраннаяФорма, "") + "ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ДобавитьСтрокуНаСервере();

КонецПроцедуры      

&НаКлиенте
Процедура ПредыдущаяСтр(Команда)
	ПредыдущаяСтрНаСервере();	
КонецПроцедуры

&НаКлиенте
Процедура СледующаяСтр(Команда)
	СледующаяСтрНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)	
	УдалитьСтрокуНаСервере();	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Перезаполнить = Истина; // Для выполнения запроса на пересчет данных к пользователю
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения =  РегламентированнаяОтчетностьКлиент.ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Перезаполнить Тогда		
		Если СтрокаФормы.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстВопроса = "Перезаполнить данные формы и ее дополнительных форм?";
		Иначе
			ТекстВопроса = "Перезаполнить данные формы?";
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);
		Оповещение.ДополнительныеПараметры.Вставить("Перезаполнить", Перезаполнить);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);		

	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВXML(Команда)
	
	ГодФормирования = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	
	Если 2017 < ГодФормирования Тогда 
		ТекстСообщения = НСтр("ru = 'Отчет не предназначен для выгрузки в XML в период формирования " + Формат(ГодФормирования,"ЧГ=0") + " г." + Символы.ПС + 
						"Пожалуйста, обновите комплект отчетов.'");
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);		
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект);	
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохраненияФайла.ПолноеИмяФайла = КодФормы + " " + СтруктураРеквизитовФормы.мГод + "г" + ".xml";
		ДиалогСохраненияФайла.Фильтр = РегламентированнаяОтчетностьКлиентСервер.ФильтрДиалоговВыбораИСохраненияРегламентированногоОтчета();	
		ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
		ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите файл'");		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
		ДиалогСохраненияФайла.Показать(ОписаниеОповещения);
	Иначе   
		НачатьПолучениеФайлаССервера(ВыгрузитьВXMLНаСервере(), КодФормы + ".xml"); 
	КонецЕсли;
	   
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресВременногоХранилища = ВыгрузитьВXMLНаСервере();
		
	ПолноеИмяФайла = Результат[0];
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, АдресВременногоХранилища));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяФайла",ПолноеИмяФайла); 
	Обработчик = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеЗавершение", ЭтотОбъект,ДополнительныеПараметры);
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
	ПараметрыСохранения.Интерактивно = Ложь;
	ФайловаяСистемаКлиент.СохранитьФайлы(Обработчик, ПолучаемыеФайлы, ПараметрыСохранения); 
	
	        
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ТекстЗаголовка = НСтр("ru = 'Данные успешно выгружены в файл'");
	
	СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДополнительныеПараметры.ИмяФайла);
	
	РабочийКаталог = СтруктураФайла.Путь;

	#Если НЕ ВебКлиент Тогда
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка, "file:///" + СтрЗаменить(СокрЛП(РабочийКаталог), "\", "/"),
		РабочийКаталог);
	#Иначе
		Если НЕ ЗначениеЗаполнено(ПолученныеФайлы) Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка,,
		РабочийКаталог);
	#КонецЕсли
	
КонецПроцедуры
  
&НаКлиенте
Процедура Расшифровка(Команда)
	
	Попытка
		ИмяЯчейки = ТекущийЭлемент.ТекущаяОбласть.Имя;
	Исключение
		 ПоказатьПредупреждение(, Нстр("ru = 'Активизируйте нужную ячейку отчета для расшифровки.'"));
		Возврат;
	КонецПопытки;
	
	ЦветРасшифровки = Форма210ПолеТабличногоДокументаСтраница1.Области.s_210_00_001_1.ЦветФона;
	
	Если КодФормы = "Форма210"
		И ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда
		
		
		Если ПолучитьЗначениеРеквизита(Налогоплательщик, "ЮрФизЛицо") = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда 
			НомерЯчейки = Число(Сред(ИмяЯчейки,10,3));
			
			НомераДляОтбора = Новый Массив;
			НомераДляОтбора.Добавить(6);
			НомераДляОтбора.Добавить(7);
			НомераДляОтбора.Добавить(11);
			НомераДляОтбора.Добавить(12);
			НомераДляОтбора.Добавить(16);
			НомераДляОтбора.Добавить(17);						
			НомераДляОтбора.Добавить(18);			
			НомераДляОтбора.Добавить(19);			
			НомераДляОтбора.Добавить(20);			
			НомераДляОтбора.Добавить(24);
			НомераДляОтбора.Добавить(25);
			
			Если НомераДляОтбора.Найти(НомерЯчейки) <> Неопределено Тогда 
				
				ПоказатьПредупреждение(,НСтр("ru = 'Расшифровка данной ячейки не поддерживается для индивидуального предпринимателя.'"));
				
			Иначе 
				Форма210Расшифровка(ИмяЯчейки);
			КонецЕсли;
		Иначе 
			НомерЯчейки = Число(Сред(ИмяЯчейки,10,3));
			
			Форма210Расшифровка(ИмяЯчейки);			
		КонецЕсли;
	ИначеЕсли КодФормы = "Форма210_01" 
		И ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда
		
		Форма210_01Расшифровка(ИмяЯчейки);
		
	ИначеЕсли КодФормы = "Форма210_02" 
		И ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда
		
		Форма210_02Расшифровка(ИмяЯчейки);
	Иначе	
		ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки не поддерживается.
											|Расшифровку содержат ячейки формы, выделенные голубым цветом.'"));
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаОбщая(Команда)
	
	Если КодФормы = "Форма210_01" Тогда
		Форма210_01РасшифровкаОбщая();		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсеПриложения(Команда)
	
	ВыгрузитьПриложенияНаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьТекущееПриложение(Команда)
	
	ВыгрузитьПриложенияНаКлиенте(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФорму(Команда)
	
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму");
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФормуИПриложения(Команда)
	
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФормуИПриложения");
	
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	ОткрытьФормуНастройкиСтраниц()
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницу(Команда)
	
	ВыбСтраница = 1;
	
	ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаСтраницы", ЭтаФорма); 
	ПоказатьВводЧисла(ОповещениеВводаЗначений,ВыбСтраница, "Введите номер страницы",5,0);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ПРОЦЕДУРЫ И ФУНКЦЦИИ

&НаКлиенте
Процедура ПослеВводаСтраницы(Значение, Параметры) Экспорт
	
	Если НЕ Значение = Неопределено Тогда  
		
		ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
		Если ТекФорма = Неопределено Тогда
			ВсегоСтраниц = 1;
		Иначе
			ВсегоСтраниц = ТекФорма.ВсегоСтраниц;
		КонецЕсли;		
			
		Если Значение = 0 Тогда
			ТекущаяСтраница = 1;
		ИначеЕсли Значение > ВсегоСтраниц Тогда
			ТекущаяСтраница = ВсегоСтраниц;
		Иначе
			ТекущаяСтраница = Значение;				
		КонецЕсли;
		
		ПослеВводаСтраницыНаСервере();
		  
	КонецЕсли;
	           	
КонецПроцедуры

&НаСервере
Процедура ПослеВводаСтраницыНаСервере()
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ПредыдущаяСтрНаСервере()
	ТекущаяСтраница = ТекущаяСтраница - 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура СледующаяСтрНаСервере()
	ТекущаяСтраница = ТекущаяСтраница + 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
		
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокСтруктурныхЕдиниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");			
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("НалоговыйКомитет");				
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");	
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");	
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");		
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");	
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрг");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");	
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");		
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");	
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);	
	СтруктураРеквизитовФормы.Вставить("мГод");	
	СтруктураРеквизитовФормы.Вставить("мКвартал");	
	СтруктураРеквизитовФормы.Вставить("мМесяц");
	СтруктураРеквизитовФормы.Вставить("КодНалоговогоОрганаИПН");	
	СтруктураРеквизитовФормы.Вставить("КодНалоговогоОрганаОПВиСО");		
	
	// индивидуальные параметры формы
	СтруктураРеквизитовФормы.Вставить("мПоддержкаРаботыСоСтруктурнымиПодразделениями");		
	СтруктураРеквизитовФормы.Вставить("ОтметкаРезидентов");		
	СтруктураРеквизитовФормы.Вставить("ОтметкаНерезидентов");
	СтруктураРеквизитовФормы.Вставить("мЕстьРеквизитыСП");
	СтруктураРеквизитовФормы.Вставить("РасчетПоВидамДоходовИОблагаемойБазе");
	СтруктураРеквизитовФормы.Вставить("КоличествоСтруктурныхЕдиницБезНалогоплательщика",0);
	СтруктураРеквизитовФормы.Вставить("ВедетсяУчетОППВ", Ложь);
	СтруктураРеквизитовФормы.Вставить("ШагФорм",  0);
	СтруктураРеквизитовФормы.Вставить("ВсегоСтр", 0);
				
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтчетномПериоде() Экспорт

	СтрПериодОтчета = ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ФП = истина");
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
		СтруктураРеквизитовФормы.мКвартал = Лев(СтрПериодОтчета,1);
		СтруктураРеквизитовФормы.мМесяц = Неопределено;
	Иначе
		СтруктураРеквизитовФормы.мМесяц = Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		СтруктураРеквизитовФормы.мКвартал = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мГод = Лев(Прав(СтрПериодОтчета,7),4);
		
КонецПроцедуры 

&НаСервере
Процедура ВосстановитьСохраненныеДанные()	
	РегламентированнаяОтчетность.ВосстановитьСохраненныйОтчет(ЭтаФорма);	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Перем СтруктураГруппы;  
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ТекстСообщения = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);				
				
		Возврат Ложь;
		
	КонецЕсли;
			
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		ВыборРасчета(КодФормы);		
	КонецЕсли; 

	РегламентированнаяОтчетность.СформироватьСписокПечатаемыхЛистов(ЭтаФорма);	       		
		
	Возврат Истина;                                                           
	
КонецФункции

&НаСервере
Процедура ВыборРасчета(ТекФорма, Индекс = Неопределено, Показатель = Неопределено) Экспорт
	
	Если ТекФорма = "Форма210" Тогда
		Форма210РасчетНаСервере(Неопределено, Неопределено, ТекФорма);
	ИначеЕсли ТекФорма = "Форма210_01" Тогда
		Форма210_01РасчетНаСервере(Индекс, Показатель);
	ИначеЕсли ТекФорма = "Форма210_02" Тогда
		Форма210_02РасчетНаСервере(Индекс, Показатель);		
	КонецЕсли;
	
КонецПроцедуры // ВыборРасчета()

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(мСписокСтруктурныхЕдиниц, ЭтаФорма, СтандартнаяОбработка,"", Налогоплательщик,,ПредопределенноеЗначение("Перечисление.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты"),Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда		
		мСписокСтруктурныхЕдиниц = Результат;		
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц); 		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ЗначениеРеквизита)
											
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ЗначениеРеквизита);										
											
КонецФункции

///////////////////////////////////////////////////////////////
// Общие механизмы отчета

&НаКлиенте
Процедура СохранитьДанные() Экспорт
	СохранитьНаСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыФормыНаКлиенте(Параметры) Экспорт
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	ЗаполнитьСведенияОбОтчетномПериоде();
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);		
	КонецЦикла	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормы(ТекФорма, Параметры)
	
	ЗаполнитьЗначенияСвойств(ТекФорма.СтруктураРеквизитовФормы, Параметры);
		
	ТекФорма.Налогоплательщик        						 = Параметры.Налогоплательщик;		
	ТекФорма.мСписокСтруктурныхЕдиниц						 = Параметры.мСписокСтруктурныхЕдиниц;
	ТекФорма.ПредставлениеСпискаСтруктурныхЕдиниц			 = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ТекФорма.мСписокСтруктурныхЕдиниц);
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;	
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
												
		КонецЕсли;	
			
		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();
				
	КонецЕсли;

	МассивРеквизитовФормы = ЭтотОбъект.ПолучитьРеквизиты();
	Для Счетчик = 0 По МассивРеквизитовФормы.Количество()-1 Цикл		
		РеквизитФормы = МассивРеквизитовФормы[Счетчик];
		Если РеквизитФормы.ТипЗначения.СодержитТип(Тип("ТабличныйДокумент")) Тогда
			ЭтотОбъект[РеквизитФормы.Имя] = ЭтотОбъект[РеквизитФормы.Имя];	
		КонецЕсли;
	КонецЦикла;	

	мСтруктураЗначений = Новый Структура;
	
	Если СтруктураРеквизитовФормы.Свойство("СформироватьФормуОтчетаАвтоматически") И СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически <> Неопределено Тогда
		
		ЗначениеТаймера = ЗначениеТаймера();
		
		ЗаполнитьАвтоНаСервере();
		
		ЗаписатьЗамер(ЗначениеТаймера);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, ЭтотОбъект.КодФормы, Ложь,Ложь);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ЭтаФорма.КодФормы);
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма);	
	
	Форма210РасчетНаСервере(Неопределено, Неопределено,КодФормы);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметры(ТекущееИмяФормы) Экспорт
	
	Форма = РеквизитФормыВЗначение("мСписокФормБезИерархии").Строки.Найти(ТекущееИмяФормы, "КодФормы");
	
	Если ТекущееИмяФормы = Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7) Тогда 
		
		//заполним основные сведения об организации
		ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы);
		СписокРасчетов  = Элементы.СписокРасчетов.СписокВыбора.Получить(1).Значение;
		ЗаполнитьВидРасчета("Очередная");
		
	КонецЕсли;

	Если Форма.Многострочность = 1 Тогда	
		
		Если ТекущееИмяФормы = "Форма210_02" Тогда 
			// заполним общие реквизиты на всех строках многостраничной формы
			
			//страница 1
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИННалогоплательщика", Налогоплательщик.ИдентификационныйНомер,Истина,Истина);		
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Квартал", СтруктураРеквизитовФормы.мКвартал,Истина, Истина);  		
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год",     СтруктураРеквизитовФормы.мГод,Истина, Истина);
			// страница 2
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИННалогоплательщика1", Налогоплательщик.ИдентификационныйНомер,Истина, Истина);			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Квартал1", СтруктураРеквизитовФормы.мКвартал, Истина, Истина); 			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год1",     СтруктураРеквизитовФормы.мГод, Истина, Истина);
			
			// общие сведения
			ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма,"Форма210");
			НаимЮЛПол    = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"ОргНазв"); // Полное наименование
			ФИОРук       = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Руководитель"); // ФИО руководителя
			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы, "ОргНазв", НаимЮЛПол, Истина, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы, "Руководитель", ФИОРук, Истина, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы, "ДатаПодачи", ДатаПодписи, Истина, Истина);
			
			// Разобьем наименование организации для выгрузки в XML
			НазваниеОрганизацииДляРазбиения = НаимЮЛПол;
			НачПозиция = 1;
			ДлинаСтроки = 29;
			Для Шаг = 1 По 2 Цикл
				НазОрганизации = Сред(НазваниеОрганизацииДляРазбиения, НачПозиция, ДлинаСтроки); 						
				РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекущееИмяФормы,"ОргНазв"+Шаг,НазОрганизации, Истина, Истина);
				НачПозиция =НачПозиция + ДлинаСтроки;
				ДлинаСтроки = 36;
			КонецЦикла;
			
			// перенесем вид декларации
			ВидРасчетаПервоначальный = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Первоначальная");
			ВидРасчетаОчередной = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Очередная");
			ВидРасчетаДополнительный = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Дополнительная");
			ВидРасчетаПоУведомлению = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"ПоУведомлению");
			ВидРасчетаЛиквидационный = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Ликвидационная");
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы, "Первоначальная", ВидРасчетаПервоначальный,Истина, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы, "Очередная", ВидРасчетаОчередной,Истина, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы, "Дополнительная", ВидРасчетаДополнительный,Истина, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы, "ПоУведомлению", ВидРасчетаПоУведомлению,Истина, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы, "Ликвидационная", ВидРасчетаЛиквидационный,Истина, Истина);
			
			НомерУведомления = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"НомерУведомления");
			ДатаУведомления  = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"ДатаУведомления");
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы, "НомерУведомления", НомерУведомления, Истина , Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы, "ДатаУведомления", ДатаУведомления,Истина, Истина);			
		Иначе 			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН", Налогоплательщик.ИдентификационныйНомер, Ложь);			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Квартал", СтруктураРеквизитовФормы.мКвартал, Ложь);			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год", СтруктураРеквизитовФормы.мГод, Ложь);
		КонецЕсли;    	
		
	Иначе //обычная форма
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год",    СтруктураРеквизитовФормы.мГод);
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Квартал", СтруктураРеквизитовФормы.мКвартал);
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН", Налогоплательщик.ИдентификационныйНомер);			
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"ДатаПодачи",ДатаПодписи);
	КонецЕсли;
		
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы)
	
	ОргСведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(Налогоплательщик, ДатаПодписи);
	//Если организация не указана то не выводим никаких сведений
	Если ОргСведения = 0 Тогда
		Возврат;
	КонецЕсли;

	// Инициализируем переменные
	РННЮЛ = ""; 	// РНН	
	НаимЮЛПол = ""; // Полное наименование 	
	ИИН_БИН = ""; 	// ИИН_БИН	
	Руководитель = ""; 	// ФИО руководителя				
	КодНалоговогоОргана = ""; // Код налогового органа	
	
		
	// Получаем данные
	ОргСведения.Свойство("РННЮЛ",     			РННЮЛ);
	ОргСведения.Свойство("БИН_ИИН",   			ИИН_БИН);
	ОргСведения.Свойство("ПолноеНаименование", 	НаимЮЛПол);	
	ОргСведения.Свойство("Руководитель",		Руководитель);	
	
	// Производим операции связанные с текущей формой отчетности	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН",ИИН_БИН);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"ОргНазв",НаимЮЛПол);
	// Разбиваем название организации
	НазваниеОрганизацииДляРазбиения = НаимЮЛПол;
	НачПозиция = 1;
	Для Шаг = 1 По 3 Цикл
		ДлинаСтроки = ЭтотОбъект[ТекущееИмяФормы + "ПолеТабличногоДокументаСтраница1"].Области["ОргНазв"+Шаг].ТипЗначения.КвалификаторыСтроки.Длина;
		НазОрганизации = Сред(НазваниеОрганизацииДляРазбиения, НачПозиция, ДлинаСтроки); 
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"ОргНазв"+Шаг,НазОрганизации);
		НачПозиция =НачПозиция + ДлинаСтроки;
	КонецЦикла;
	     	
	Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Если мСписокСтруктурныхЕдиниц.Количество() = 1 И мСписокСтруктурныхЕдиниц.НайтиПоЗначению(Налогоплательщик) <> Неопределено Тогда
			// у налогоплательщика структурных подразделений нет
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекущееИмяФормы,"СтруктурныеПодразделенияИмеютсяНет","Х");								
		Иначе
			// у налогоплательщика имеется несколько структурных единиц
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекущееИмяФормы,"СтруктурныеПодразделенияИмеютсяДа","Х");			
		КонецЕсли;
	Иначе
		// работы со структурными подразделениями в базе не ведется
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекущееИмяФормы,"СтруктурныеПодразделенияИмеютсяНет","Х");							
	КонецЕсли;
	       
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"Руководитель",Руководитель);
	
	// Дата подачи декларации
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"ДатаПодачи",ДатаПодписи);
		
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуНаСервере()
	РегламентированнаяОтчетность.УдалитьСтрокуМногострочнойФормы(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере()
	
	РегламентированнаяОтчетность.ДобавитьСтрокуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПанель(ПризнакОсновнойФормы,ПризнакМногострочности)
			
	Элементы.ФормаВыгрузитьВXML.Видимость = ПризнакОсновнойФормы; 
	Элементы.ГруппаКнопокДействияСоСтрокамиИСтраницами.Видимость = ПризнакМногострочности;	
	Элементы.Расшифровка210_01.Видимость = (КодФормы = "Форма210_01");	
	Элементы.ФормаРасшифровка.Видимость  = (КодФормы <> "Форма210_01");	
	Элементы.ВыгрузитьВXMLПриложение21002.Видимость = (КодФормы = "Форма210_02");
		    	
КонецПроцедуры //ЗаполнитьПанель()

&НаСервере 
Процедура ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ИмяЯчейки, Значение, Расчет = Ложь)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, ИмяСтраницы, ИмяЯчейки, Значение, Расчет);				
	
КонецПроцедуры

&НаСервере 
Процедура ПередатьЗначениеВСтруктуруНаСервере(ИмяЯчейки, ЗначениеЯчейки, ПередаватьВТП = Ложь, ПередаватьВМногострочнуюЧасть = Ложь, ПоказательРасшифровки = Неопределено)
	
	Если ИмяЯчейки = "НомерУведомления" ИЛИ ИмяЯчейки = "ДатаУведомления" Тогда	
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма210_02", ИмяЯчейки ,ЗначениеЯчейки, Истина, Истина);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяЯчейки ,ЗначениеЯчейки, ПередаватьВТП, ПередаватьВМногострочнуюЧасть,ПоказательРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЭлемента(ВыбЭлемент, Параметры) Экспорт
	
	Если НЕ ВыбЭлемент = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		ВыбранноеЗначение = ВыбЭлемент.Значение;
		Если ВыбранноеЗначение = "Справочник.ПодразделенияОрганизаций.Форма.ФормаВыбора" Тогда
			ЗначенияОтборов = Новый Структура;			
			ЗначенияОтборов.Вставить("Владелец", Налогоплательщик);			
			ПараметрыФормы.Вставить("Отбор", ЗначенияОтборов);
			ПараметрыФормы.Вставить("ВыбиратьПодразделенияОрганизации", Истина);
		КонецЕсли; 
		ОткрытьФорму(ВыбранноеЗначение,ПараметрыФормы,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца) ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаЗначения(Значение, Параметры) Экспорт
	
	Если НЕ Значение = Неопределено Тогда         	
		ПроверятьЦифрыВСтроке = Ложь;
		Если Параметры.Свойство("ПроверятьЦифрыВСтроке" , ПроверятьЦифрыВСтроке) И ПроверятьЦифрыВСтроке Тогда
			Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Значение) Тогда				
				ТекстСообщения = НСтр("ru = 'Значение содержит нецифровые символы, значение будет очищено'");							  
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);				
				Значение = "";
			КонецЕсли;         		
		КонецЕсли;
		
		Параметры.Область.Значение = Значение;			
		ПередатьЗначениеВМногострочнуюСтруктуру(Параметры.ИмяСтраницы, Параметры.Область.Имя, Значение, Параметры.Расчет);       
	КонецЕсли;
	           	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиСтраниц(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьДанныеФормы(РезультатЗакрытия, СписокФормДерева);
	
	Модифицированность = Истина;
	
	//обновим мСписокФормБезИерархии
	Для Каждого СтрокаФормы ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",СтрокаФормы.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			СтрокаФормы.Выгружать               = ТекущаяСтрокаСписка.Выгружать;
			СтрокаФормы.ПоказатьСтраницу        = ТекущаяСтрокаСписка.ПоказатьСтраницу;			
			СтрокаФормы.АвтополучениеИтогов     = ТекущаяСтрокаСписка.АвтополучениеИтогов;  
			СтрокаФормы.АвтоЗаполнение          = ТекущаяСтрокаСписка.АвтоЗаполнение;  
		КонецЕсли;			
	КонецЦикла; 	

	Если ДополнительныеПараметры.Свойство("ТекущийРаздел") И НЕ ДополнительныеПараметры.ТекущийРаздел = Неопределено Тогда  		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(РазделыОтчета, Новый Структура("СписокФормДереваСтраницы",ДополнительныеПараметры.ТекущийРаздел));
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;			
	КонецЕсли;  	
	
КонецПроцедуры

&НаКлиенте                                                        
Процедура ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(ДатаНачала, ДатаОкончания, СтруктурнаяЕдиницаДляОтбора = Неопределено, СтруктураФизЛицоДляОтбора = Неопределено, Режим = "БезДетализации", ПризнакНеРезиденства = Неопределено)

	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", ДатаНачала);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  ДатаОкончания);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВключитьПолучателейАлиментов", ПризнакАлиментов);
	Если ИмяФормы = "Форма210_01" Тогда // если расшифровка вызвана из формы 210.02
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВключитьИП", ПризнакИП);		
	КонецЕсли;
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Налогоплательщик", Налогоплательщик);	
	
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиницаДляОтбора) Тогда
		СписокСтруктурныхЕдиниц = мСписокСтруктурныхЕдиниц;
	Иначе
		СписокСтруктурныхЕдиниц = СтруктурнаяЕдиницаДляОтбора;
	КонецЕсли;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", СписокСтруктурныхЕдиниц);
	ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПредставлениеСпискаОрганизаций", ПредставлениеСпискаОрганизаций);
	
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Если СтруктураФизЛицоДляОтбора <> Неопределено Тогда
		Если ТипЗнч(СтруктураФизЛицоДляОтбора) = Тип("Структура") Тогда
			ФизЛицоДляОтбора = Неопределено;
			СтруктураФизЛицоДляОтбора.Свойство("ФизЛицо",ФизЛицоДляОтбора);
			Если ФизЛицоДляОтбора <> Неопределено Тогда
				ВидСравненияОтбор = СтруктураФизЛицоДляОтбора.ВидСравнения;
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ФизЛицо",  ФизЛицоДляОтбора, ВидСравненияОтбор);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// отбор по стране гражданства
	СписокСтран = Новый СписокЗначений;
	СписокСтран.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторСтранМира.Казахстан"));
	СписокСтран.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторСтранМира.ПустаяСсылка"));
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Страна",  СписокСтран, ВидСравненияКомпоновкиДанных.НеВСписке);
	
	
	ГруппировкиРасшифровки = Новый Массив();
	
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "Налогоплательщик", НСтр("ru = 'Налогоплательщик'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "МесяцНалоговогоПериода", НСтр("ru = 'Месяц налог. периода'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "НалоговыйКомитет", НСтр("ru = 'Налоговый комитет'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "СтруктурнаяЕдиница", НСтр("ru = 'Структурная единица'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "ФизЛицо", НСтр("ru = 'Работник'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	
	Если НЕ Режим = "БезДетализации" Тогда
		ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "Регистратор", НСтр("ru = 'Документ движения (регистратор)'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	КонецЕсли;   	
	
	ЗаполняемыеНастройки = Новый Структура("Группировка, Показатели, ДополнительныеПоля, ГруппировкиРасшифровки",
											Истина, Истина, Истина, ГруппировкиРасшифровки);
											
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ЗаполняемыеНастройки",ЗаполняемыеНастройки );	

	ОткрытьФорму("Отчет.РегистрНалоговогоУчетаПоИПНиСН.Форма.ФормаОтчета", ПараметрыФормы,, Истина);
	
КонецПроцедуры // ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН()

&НаКлиенте
Процедура ВыгрузитьПриложенияНаКлиенте(ВыгружатьВсеПриложения = Ложь)
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	Если СтрокаФормы = Неопределено Тогда
		ВсегоСтраниц = 1;
	Иначе
		ВсегоСтраниц = СтрокаФормы.ВсегоСтраниц;
	КонецЕсли;
	      		
	Если ВыгружатьВсеПриложения Тогда
		СтруктураРеквизитовФормы.ШагФорм  = 0;
		СтруктураРеквизитовФормы.ВсегоСтр = ВсегоСтраниц-1;
		ИмяФайла = "Приложение 210.02 №1";		
	Иначе
		СтруктураРеквизитовФормы.ШагФорм  = ТекущаяСтраница - 1;
		СтруктураРеквизитовФормы.ВсегоСтр = ТекущаяСтраница - 1;
		ИмяФайла = "Приложение 210.02 №"+ ТекущаяСтраница;
	КонецЕсли;
	
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогСохраненияФайла.ПолноеИмяФайла = ИмяФайла;
	ДиалогСохраненияФайла.Фильтр = РегламентированнаяОтчетностьКлиентСервер.ФильтрДиалоговВыбораИСохраненияРегламентированногоОтчета();	
	ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
	ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите файл'");
	
	Если ДиалогСохраненияФайла.Выбрать() Тогда	 
		ПолноеИмя = ДиалогСохраненияФайла.ПолноеИмяФайла;
		КоличествоСимволовКаталога = СтрДлина(ДиалогСохраненияФайла.Каталог);
		ИмяФайлаСРасширением       = Сред(ПолноеИмя,КоличествоСимволовКаталога+1);
		ПозицияТочки = Найти(ИмяФайлаСРасширением, ".");
		Если ПозицияТочки = 0 Тогда
			ИмяФайла = ИмяФайлаСРасширением;
			Расширение = ".xml";
		Иначе
			Расширение = Прав(ИмяФайлаСРасширением,4);
			ИмяФайла   = Сред(ИмяФайлаСРасширением,1,СтрДлина(ИмяФайлаСРасширением) - 4);
		КонецЕсли;    				
		
	Иначе 
	   Возврат;
   КонецЕсли;
      	
   
   	АдресСтруктурыФайлов = ВыгрузитьОтчетВXMLНаСервере(ИмяФайла,, ВыгружатьВсеПриложения);
		           	
	ПередаваемыеФайлы = Новый Массив;
	ПереданныеФайлы   = Новый Массив;
	МассивВызовов     = Новый Массив;
	
	СоответствиеФайлов = ПолучитьИзВременногоХранилища(АдресСтруктурыФайлов);
	Для Каждого ДанныеФайла Из СоответствиеФайлов Цикл
				
		ПолноеИмяФайла = ДиалогСохраненияФайла.Каталог + ДанныеФайла.Ключ + Расширение;
		
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, ДанныеФайла.Значение);
		
		ПередаваемыеФайлы.Добавить(ОписаниеФайла);
		
	КонецЦикла;
	
	Если ПередаваемыеФайлы.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Выгрузка не выполнена!'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстСообщения
		);   		
		Возврат;
	КонецЕсли;         		
	
	МассивВызовов.Добавить(Новый Массив);
	
	МассивВызовов[0].Добавить("ПолучитьФайлы");
	МассивВызовов[0].Добавить(ПередаваемыеФайлы);
	МассивВызовов[0].Добавить(ПереданныеФайлы);
	МассивВызовов[0].Добавить("");
	МассивВызовов[0].Добавить(Ложь);
	
	Если ЗапроситьРазрешениеПользователя(МассивВызовов) Тогда			
		ПолучитьФайлы(ПередаваемыеФайлы, ПереданныеФайлы,, Ложь);
		Если ПередаваемыеФайлы.Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru = 'Данные успешно выгружены в'");		
			
			#Если НЕ ВебКлиент Тогда
				ПоказатьОповещениеПользователя(
				ТекстСообщения, "file:///" + СтрЗаменить(СокрЛП(ДиалогСохраненияФайла.Каталог), "\", "/"),
				ДиалогСохраненияФайла.Каталог);
			#Иначе
				ПоказатьОповещениеПользователя(
				ТекстСообщения,,
				ДиалогСохраненияФайла.Каталог);
			#КонецЕсли  							
		КонецЕсли;   			
	КонецЕсли;		
	
	СтруктураРеквизитовФормы.ШагФорм  = 0;
	СтруктураРеквизитовФормы.ВсегоСтр = 0;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидРасчета(ВидРасчета)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Первоначальная","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма210_02", "Первоначальная", "", Истина, Истина);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Очередная","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма210_02", "Очередная", "", Истина, Истина);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Дополнительная","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма210_02", "Дополнительная", "", Истина, Истина);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"ПоУведомлению","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма210_02", "ПоУведомлению", "", Истина, Истина);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Ликвидационная","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма210_02", "Ликвидационная", "", Истина, Истина);
	
	Если ВидРасчета = "Первоначальная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Первоначальная","Х");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма210_02", "Первоначальная", "Х", Истина, Истина);
	ИначеЕсли ВидРасчета = "Очередная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Очередная","Х");		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма210_02", "Очередная", "Х", Истина, Истина);
	ИначеЕсли ВидРасчета = "Дополнительная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Дополнительная","Х");		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма210_02", "Дополнительная", "Х", Истина, Истина);
	ИначеЕсли ВидРасчета = "ПоУведомлению" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"ПоУведомлению","Х");		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма210_02", "ПоУведомлению", "Х", Истина, Истина);
	ИначеЕсли ВидРасчета = "Ликвидационная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Ликвидационная","Х");		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма210_02", "Ликвидационная", "Х", Истина, Истина);
	КонецЕсли;
	
	Если ВидРасчета = "ПоУведомлению" Тогда
		Форма210ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Ложь;
		Форма210ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита = Ложь;
		// передаем номер и дату уведомления в форму 210.04
		НомерУведомления = Форма210ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Значение;
		ДатаУведомления  = Форма210ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Значение;
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма210_02", "НомерУведомления", НомерУведомления, Истина, Истина);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма210_02", "ДатаУведомления",  ДатаУведомления,  Истина, Истина);
	Иначе
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"НомерУведомления","");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"ДатаУведомления","");
		Форма210ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Истина;
		Форма210ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита = Истина;
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма210_02", "НомерУведомления", "", Истина, Истина);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма210_02", "ДатаУведомления",  "",  Истина, Истина);
	КонецЕсли;
	
	Модифированность = Истина;
	
КонецПроцедуры // ЗаполнитьВидРасчета()

&НаСервере
Процедура ОчиститьФормуНаСервере(ВидОчистки)
	               
	//РегламентированнаяОтчетность.ОчиститьРеглОтчет(ЭтаФорма, ВидОчи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиСтраниц()
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРаздел = Элементы.РазделыОтчета.ТекущиеДанные.Страницы;		
	КонецЕсли;
	
	Для Каждого ТекФорма ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",ТекФорма.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			ТекущаяСтрокаСписка.Выгружать               = ТекФорма.Выгружать;
			ТекущаяСтрокаСписка.ПоказатьСтраницу        = ТекФорма.ПоказатьСтраницу;			
			ТекущаяСтрокаСписка.АвтополучениеИтогов     = ТекФорма.АвтополучениеИтогов;  
			ТекущаяСтрокаСписка.АвтоЗаполнение          = ТекФорма.АвтоЗаполнение;  
		КонецЕсли;		   
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокФормДерева",СписокФормДерева);
	
	ДопПараметры = Новый Структура("ТекущийРаздел",ТекущийРаздел);
	
	ОповещениеПослеЗакрытияФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастройкиСтраниц",ЭтотОбъект,ДопПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.НастройкиОтчета",ПараметрыФормы, ЭтаФорма,,,,ОповещениеПослеЗакрытияФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	 	
	
	Перезаполнить = ДополнительныеПараметры.Перезаполнить;
	Очистить(КодФормы,Истина);
	
	НачатьЗамерВремени();
	
	Если КодФормы = "Форма210" Тогда 		
		Форма210ЗаполнитьАвто(Перезаполнить);		 
	ИначеЕсли КодФормы = "Форма210_01" Тогда 		
		Форма210_01ЗаполнитьАвто(Перезаполнить);
	ИначеЕсли КодФормы = "Форма210_02" Тогда  
		Форма210_02ЗаполнитьАвто(Перезаполнить);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьнаСервере();
		Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;	
КонецПроцедуры 

&НаСервере
Процедура СохранитьнаСервере();
	РегламентированнаяОтчетность.СохранитьОтчет(ЭтотОбъект);
КонецПроцедуры

///////////////////////////////////////////////////////////////
// Очистка

&НаКлиенте
Процедура ОчиститьРеглОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Форма = ДополнительныеПараметры.Форма;	
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", Форма.КодФормы));
		Вложенность = ДополнительныеПараметры.ОчищатьПриложения;	
		
		ОчиститьРеглОтчетЗавершениеНаСервере(СтрокаФормы.КодФормы, СтрокаФормы.Многострочность, Вложенность)	
	КонецЕсли;		
КонецПроцедуры 	

&НаСервере
Процедура ОчиститьРеглОтчетЗавершениеНаСервере(КодФормы, ПризнакМногострочности, Вложенность) Экспорт		
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, ПризнакМногострочности, Вложенность);
КонецПроцедуры

&НаСервере
Процедура Очистить(ТекИмяФормы, ОчиститьВсе = Ложь) Экспорт
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	// Список ячеек, очищать которые не нужно
	Если ОчиститьВсе Тогда
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодВалюты");
	Иначе
		СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
		СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Первоначальная");
	    СписокПоказателейНеПодлежащихОчистке.Добавить("Очередная");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Дополнительная");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Ликвидационная");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ПоУведомлению");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Квартал");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Год");
		СписокПоказателейНеПодлежащихОчистке.Добавить("НомерУведомления");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаУведомления");
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодСтраны");
		СписокПоказателейНеПодлежащихОчистке.Добавить("НомерНалРегистрации");		
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодНалоговогоОрганаИПН");
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодНалоговогоОрганаОПВиСО");
	КонецЕсли;
		
	РегламентированнаяОтчетность.ОчиститьСтруктуруДанныхИТабличноеПолеФормы(ЭтаФорма,ТекИмяФормы,ОчиститьВсе,СписокПоказателейНеПодлежащихОчистке);
	
КонецПроцедуры // Очистить()

///////////////////////////////////////////////////////////////
// Печать

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

#Область ОценкаПроизводительности

&НаКлиенте
Функция НачатьЗамерВремени()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "Регламентированный отчет ""%1 декларация по ипн и сн"" (заполнение)";
		КлючеваяОперация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(КлючеваяОперация,?(ЗначениеЗаполнено(КодФормы), НРег(КодФормы), "форма 210")); 
		ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент").НачатьЗамерВремени(Истина, КлючеваяОперация);
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеТаймера()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда 
		
		Возврат ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").НачатьЗамерВремени();
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьЗамер(ВремяНачала)
	
	Если ВремяНачала <> Неопределено 
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "Регламентированный отчет ""форма 210 декларация по ипн и сн"" (заполнение)";
		ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////
// Процедуры и функции для расчета(заполнения) формы 210.00

&НаСервере
Процедура Форма210РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки, ТекИмяФормы, ДействиеИзменения = Ложь)
	
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,ИмяЯчейки ,ЗначениеЯчейки);					
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ТекИмяФормы);			
	    	
	Для ТекущийНомерСтроки = 1 По 25 Цикл
		Если ТекущийНомерСтроки = 3		 
		 ИЛИ (ТекущийНомерСтроки >= 13 и ТекущийНомерСтроки <= 15)		 
		  Тогда
			Продолжить;
		КонецЕсли;
		  		
		Если ДействиеИзменения Тогда
			Если ТекущийНомерСтроки <= 2  Тогда
				НомерСтраницы = "1";
			ИначеЕсли ТекущийНомерСтроки >= 3 И ТекущийНомерСтроки <= 12 Тогда
				НомерСтраницы = "2";
			ИначеЕсли ТекущийНомерСтроки >= 13 И ТекущийНомерСтроки <= 21 Тогда
				НомерСтраницы = "3";			
			Иначе
				НомерСтраницы = "4";			
			КонецЕсли;
		КонецЕсли;
		
		Номер = Формат(ТекущийНомерСтроки,"ЧЦ=2; ЧДЦ=0; ЧВН=");
		// графа 4
		ИтогЗначение = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_210_00_0" + Номер + "_1")
						+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_210_00_0" + Номер + "_2")
						+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_210_00_0" + Номер + "_3");

			
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"s_210_00_0" + Номер + "_4", ИтогЗначение, ДействиеИзменения);
		
		
	КонецЦикла; 	
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);
	
КонецПроцедуры

&НаСервере
Процедура Форма210ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь) 
	
	ТекИмяФормы = "Форма210";
	   	
	Если Перезаполнить Тогда	
		ТекстСообщения = НСтр("ru = 'Расчет основной формы 210.00'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;	
	
	ЗаполнитьПараметры(ТекИмяФормы);
	
	СтрокаФормы210_01 = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", "Форма210.01"));
	СтрокаФормы210_02 = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", "Форма210.02"));
	
	Форма210_01ЗаполнитьАвтоНаСервере(); 
	
	Форма210_02ЗаполнитьАвтоНаСервере();  
                          	
	//////////////////////////////////////////
	// Раздел. Расчетные показатели        	

	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, КодФормы);

	ТаблицаРезультат = Форма210РассчитатьДанныеФормы();
	
	Для Каждого СтрокаРезультат Из ТаблицаРезультат Цикл

		Если СтрокаРезультат.КодСтроки = "КоличествоСтруктурныхЕдиницБезНалогоплательщика" Тогда
			
			Если СтруктураРеквизитовФормы.КоличествоСтруктурныхЕдиницБезНалогоплательщика <> 0 Тогда

				ИмяЯчейки = "КоличествоПриложений210_02";
				РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, ИмяЯчейки, СтруктураРеквизитовФормы.КоличествоСтруктурныхЕдиницБезНалогоплательщика);
				
			КонецЕсли;
			
		ИначеЕсли СтрокаРезультат.КодСтроки = "МРП" Тогда

			ИмяЯчейки = "МРП";
			ИтогЗнач = СтрокаРезультат.Значение3Мес;
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, ИмяЯчейки, ИтогЗнач);
		
		ИначеЕсли СтрокаРезультат.КодСтроки = "ЧисленностьРаботников" Тогда
		
			Для Н = 1 По 3 Цикл
				ИмяЯчейки = "ЧисленностьРаботников" + Н;
				ИтогЗнач = Окр(СтрокаРезультат["Значение" + Н + "Мес"]);
				РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, ИмяЯчейки, ИтогЗнач);
			КонецЦикла;
		
		ИначеЕсли СтрокаРезультат.КодСтроки = "s_210_00_003" Тогда

			ИмяЯчейки = "s_210_00_003";
			ИтогЗнач = Окр(СтрокаРезультат.Значение3Мес);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, ИмяЯчейки, ИтогЗнач);
		ИначеЕсли СтрокаРезультат.КодСтроки = "s_210_00_001_A"  или СтрокаРезультат.КодСтроки = "s_210_00_001_B" Тогда

			ИмяЯчейки = СтрокаРезультат.КодСтроки;
			ИтогЗнач = Окр(СтрокаРезультат.Значение1Мес + СтрокаРезультат.Значение2Мес + СтрокаРезультат.Значение3Мес);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, ИмяЯчейки, ИтогЗнач);		
			
		Иначе // все остальные ячейки обрабатываются одинаковым образом
			
			// округленное значение за квартал может оказаться больше суммы значений по месяцам
			// проверим и добавим к значению 1, т.к. максимальная погрешность при округлении может быть 1,47.
			Если Окр(СтрокаРезультат.ЗначениеКвартал) > Окр(СтрокаРезультат.Значение1Мес) + Окр(СтрокаРезультат.Значение2Мес)
				+ Окр(СтрокаРезультат.Значение3Мес) Тогда
				Если Окр(СтрокаРезультат.Значение1Мес) <> 0 Тогда
					СтрокаРезультат.Значение1Мес = СтрокаРезультат.Значение1Мес + 1;
				ИначеЕсли Окр(СтрокаРезультат.Значение2Мес) <> 0 Тогда
					СтрокаРезультат.Значение2Мес = СтрокаРезультат.Значение2Мес + 1;
				ИначеЕсли Окр(СтрокаРезультат.Значение3Мес) <> 0 Тогда
					СтрокаРезультат.Значение3Мес = СтрокаРезультат.Значение3Мес + 1;
				КонецЕсли;
			КонецЕсли;
			
			ИмяЯчейки = СтрокаРезультат.КодСтроки;
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, ИмяЯчейки + "_1", Окр(СтрокаРезультат.Значение1Мес));
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, ИмяЯчейки + "_2", Окр(СтрокаРезультат.Значение2Мес));
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, ИмяЯчейки + "_3", Окр(СтрокаРезультат.Значение3Мес));
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, ИмяЯчейки + "_4", Окр(СтрокаРезультат.ЗначениеКвартал));			
		КонецЕсли;
	КонецЦикла;            	 
	
	// Заполняем поле "Представленные приложения"
	ТекущаяСтрока = СписокФормДерева.ПолучитьЭлементы()[0];
	Для Каждого Форма Из ТекущаяСтрока.ПолучитьЭлементы() Цикл            
		ИмяОбласти = "Приложение" + Прав(Форма.КодФормы,2);
		Если Форма210ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяОбласти) <> Неопределено Тогда 			
			СтрокиФорм = мСписокФормБезИерархии.ПолучитьЭлементы();			
			Для Каждого Строка Из СтрокиФорм Цикл
				Если Строка.КодФормы = Форма.КодФормы Тогда					
					Если Строка.Выгружать = 1 Тогда
						РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,ИмяОбласти,"Х");				
					Иначе
						РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,ИмяОбласти,"");				
					КонецЕсли;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 			
		КонецЕсли;
	КонецЦикла;
	
	//// передаем в качестве признака перезаполнения Истина, т.к. это главная форма
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма,ТекИмяФормы, Истина);
		        	
	Модифицированность = Истина;
	
КонецПроцедуры // Форма210ЗаполнитьАвто()

&НаКлиенте
Процедура Форма210ЗаполнитьАвто(Перезаполнить = Ложь) 
	                	
	Состояние("Расчет формы 210.00");		
	Форма210ЗаполнитьАвтоНаСервере(Перезаполнить);	
	Состояние("");	 
	
КонецПроцедуры // Форма210ЗаполнитьАвто()

&НаСервере
Функция Форма210РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
	ТаблицаПоМесяцам = Новый ТаблицаЗначений;
	
	ТаблицаПоМесяцам.Колонки.Добавить("КодСтроки", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаПоМесяцам.Колонки.Добавить("МесяцНалоговогоПериода", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаПоМесяцам.Колонки.Добавить("Значение", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));

	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("КодСтроки", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаРезультат.Колонки.Добавить("Значение1Мес", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Значение2Мес", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Значение3Мес", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("ЗначениеКвартал", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("ЗначениеСНачГода", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ТаблицаРезультат.Индексы.Добавить("КодСтроки");

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамНачГода", 				НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));	
	Запрос.УстановитьПараметр("парам1Мес", 					НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парам2Мес", 					ДобавитьМесяц(НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), 1));
	Запрос.УстановитьПараметр("парам3Мес", 					ДобавитьМесяц(НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), 2));
	Запрос.УстановитьПараметр("парамПериодПо", 				КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПослеПериодПо", 		КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) + 1);
	Запрос.УстановитьПараметр("парамНалогоплательщик",	 	Налогоплательщик);
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());
	
	// если налогоплательщик - ИП, то исключим данные самого индивидуального предпринимателя
	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Налогоплательщик.ИндивидуальныйПредприниматель);
	Иначе
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Неопределено);
	КонецЕсли;
	
	МТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МТ;
	// определим гражданство по периодам
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Период
				   |ПОМЕСТИТЬ ВТ_ДатыПериодовГода
				   |ИЗ
				   |	РегистрСведений.ДанныеПроизводственногоКалендаря  КАК ДанныеПроизводственногоКалендаря
				   |ГДЕ
				   |	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
				   |	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &парамНачГода И &парамПериодПо
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГражданствоФизЛицСрезПоследних.Период КАК Период,
	               |	ГражданствоФизЛицСрезПоследних.ФИО КАК ФИО,
	               |	ВЫБОР
	               |		КОГДА ГражданствоФизЛиц.Страна ЕСТЬ NULL 
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	               |		ИНАЧЕ ГражданствоФизЛиц.Страна
	               |	КОНЕЦ КАК Страна				   
	               |ПОМЕСТИТЬ ВТ_Гражданство
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Периоды.Период КАК Период,
	               |		Периоды.ФИО КАК ФИО,
	               |		МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСреза
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			Периоды.Период КАК Период,
	               |			ФизическиеЛица.Ссылка КАК ФИО
	               |		ИЗ
	               |			ВТ_ДатыПериодовГода КАК Периоды
	               |				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |				ПО (ИСТИНА)
	               |		ГДЕ
	               |			ФизическиеЛица.ЭтоГруппа = ЛОЖЬ) КАК Периоды
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	               |			ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(ГражданствоФизЛиц.Период, МЕСЯЦ))
	               |				И Периоды.ФИО = ГражданствоФизЛиц.ФизЛицо
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		Периоды.Период,
	               |		Периоды.ФИО) КАК ГражданствоФизЛицСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	               |		ПО ГражданствоФизЛицСрезПоследних.ПериодСреза = ГражданствоФизЛиц.Период
	               |			И ГражданствоФизЛицСрезПоследних.ФИО = ГражданствоФизЛиц.ФизЛицо
	               |ГДЕ
	               |	(НЕ ВЫБОР
	               |			КОГДА ГражданствоФизЛиц.Страна ЕСТЬ NULL 
	               |				ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	               |			ИНАЧЕ ГражданствоФизЛиц.Страна
	               |		КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
				   |	
				   |ОБЪЕДИНИТЬ ВСЕ
				   |	
				   |ВЫБРАТЬ
				   |	Периоды.Период,
				   |	Контрагенты.Ссылка,
				   |	ВЫБОР
				   |		КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
				   |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
				   |		ИНАЧЕ Контрагенты.СтранаРезидентства
				   |	КОНЕЦ
				   |ИЗ
				   |	ВТ_ДатыПериодовГода КАК Периоды
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
				   |		ПО (ИСТИНА)
				   |ГДЕ
				   |	Контрагенты.ЭтоГруппа = ЛОЖЬ
				   |	И НЕ (ВЫБОР
				   |			 КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
				   |				ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
				   |			 ИНАЧЕ Контрагенты.СтранаРезидентства
    			   |		  КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Период,
	               |	ФИО";
				   
	Запрос.Выполнить();
	
	// определим гражданство на конец квартала (конец даты отчета)
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГражданствоФЛ.Ссылка КАК ФизЛицо,
	               |	ВЫБОР
	               |		КОГДА ГражданствоФЛ.Страна ЕСТЬ NULL 
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	               |		ИНАЧЕ ГражданствоФЛ.Страна
	               |	КОНЕЦ КАК Страна				   
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ФизическиеЛица.Ссылка КАК Ссылка,
	               |		ГражданствоФизЛицСрезПоследних.ФизЛицо КАК ФизЛицо,
	               |		ВЫБОР
	               |			КОГДА ГражданствоФизЛицСрезПоследних.Страна ЕСТЬ NULL
	               |				ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	               |			ИНАЧЕ ГражданствоФизЛицСрезПоследних.Страна
	               |		КОНЕЦ КАК Страна
	               |	ИЗ
	               |		Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамПериодПо, ) КАК ГражданствоФизЛицСрезПоследних
	               |			ПО (ГражданствоФизЛицСрезПоследних.ФизЛицо = ФизическиеЛица.Ссылка)
	               |	ГДЕ
	               |		ФизическиеЛица.ЭтоГруппа = ЛОЖЬ) КАК ГражданствоФЛ
	               |ГДЕ
	               |	(НЕ ВЫБОР
	               |			КОГДА ГражданствоФЛ.Страна ЕСТЬ NULL 
	               |				ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	               |			ИНАЧЕ ГражданствоФЛ.Страна
	               |		КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
				   |	
				   |ОБЪЕДИНИТЬ ВСЕ
				   |	
				   |ВЫБРАТЬ				   
				   |	Контрагенты.Ссылка,
				   |	ВЫБОР
				   |		КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
				   |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
				   |		ИНАЧЕ Контрагенты.СтранаРезидентства
				   |	КОНЕЦ
				   |ИЗ
				   |	Справочник.Контрагенты КАК Контрагенты
				   |ГДЕ
				   |	Контрагенты.ЭтоГруппа = ЛОЖЬ
				   |	И НЕ (ВЫБОР
				   |			КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
				   |				ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
				   |			ИНАЧЕ Контрагенты.СтранаРезидентства
    			   |		КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))";
	
	Запрос.УстановитьПараметр("парамФизЛицаНеГраждане", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));
	СписокГраждан = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо");
			
	
	// Получим данные учетной политики
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации,
	|	УчетнаяПолитикаНУ.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ,
	|	УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН,
	|	УчетнаяПолитикаНУ.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя,
	|	УчетнаяПолитикаНУ.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодПо, Организация = &парамНалогоплательщик) КАК УчетнаяПолитикаНУ
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОтражениеПоПериодуРегистрации 				= Выборка.ОтражениеПоПериодуРегистрации;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Выборка.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ;
		ОрганизацияЯвляетсяПлательщикомСН			= Выборка.ОрганизацияЯвляетсяПлательщикомСН;
		КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = Выборка.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя;
		КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника = Выборка.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника;
	Иначе
		ОтражениеПоПериодуРегистрации 				= Ложь;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Ложь;
		ОрганизацияЯвляетсяПлательщикомСН			= Ложь;
		КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = 0;
		КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника = 0;
	КонецЕсли; 	

	// ряд строк заполняются только в случае наличия у налогового агента структурных подразделений
	Если мСписокСтруктурныхЕдиниц.Количество() = 1 И мСписокСтруктурныхЕдиниц.НайтиПоЗначению(Налогоплательщик) <> Неопределено Тогда
		ЕстьСтруктурныеЕдиницыУНалогоплательщика = Ложь;
	Иначе
		ЕстьСтруктурныеЕдиницыУНалогоплательщика = Истина;
	КонецЕсли;
	
	/////////////////////////////////////////////////////////
	// Раздел. Численность работников

	// Численность работников, которым выплачивались доходы
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИПНСведенияОДоходах.ФизЛицо) КАК ЧисленностьРаботников,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|							КОГДА ИПНСведенияОДоходах.СтруктурнаяЕдиница <> ИПНСведенияОДоходах.Налогоплательщик
	|								ТОГДА ИПНСведенияОДоходах.СтруктурнаяЕдиница
	|							ИНАЧЕ NULL
	|						КОНЕЦ) КАК КоличествоСтруктурныхЕдиницБезНалогоплательщика,
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,	
	|	
	|	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) КАК НачисленныеДоходы	
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	|			&парамНачГода,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель	
	|			// в форму 200.00 не включаются индивидуальные предприниматели безусловно
	|			И ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ИПНСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                         
	|			ПО (НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) = ВТ_Гражданство.Период)               
	|			И ИПНСведенияОДоходах.ФизЛицо = ВТ_Гражданство.ФИО                                          	
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
	|";
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

		// численность работников
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "КоличествоСтруктурныхЕдиницБезНалогоплательщика";
		НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение = Выборка.КоличествоСтруктурныхЕдиницБезНалогоплательщика;
		
		// численность работников
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "ЧисленностьРаботников";
		НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение = Выборка.ЧисленностьРаботников;		
						
		
	КонецЦикла;


	/////////////////////////////////////////////////////////
	// Раздел. Исчисление индивидуального подоходного налога

	// начисленные и облагаемые доходы
	ТекстЗапроса = "ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	               |	ВЫБОР КОГДА ИПНСведенияОДоходах.ФизЛицо Ссылка Справочник.ФизическиеЛица Тогда ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ""210.00.001.A"") Иначе ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ""210.00.001"") КОНЕЦ КАК КодСтроки,
	               |	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) КАК НачисленныеДоходы,
	               |	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) КАК НачисленныеДоходыНерезидента,
	               |	СУММА(ВЫБОР
	               |			КОГДА ИПНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	               |				ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот - ИПНСведенияОДоходах.СуммаВычетаОборот
	               |			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	               |		КОНЕЦ) КАК ДоходыОблагаемыеИПН
	               |ИЗ
	               |	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	               |			&парамНачГода,
	               |			&парамПериодПо,
	               |			МЕСЯЦ,
	               |			Налогоплательщик = &парамНалогоплательщик
	               |				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	               |				И ФизЛицо <> &парамИндивидуальныйПредприниматель
	               |				И ВЫБОР
	               |					КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |						ТОГДА НЕ ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ) КАК ИПНСведенияОДоходах
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство
	               |		ПО (НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) = ВТ_Гражданство.Период)	              
				   |			И (ВЫБОР
	               |				КОГДА ИПНСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |						И ИПНСведенияОДоходах.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |					ТОГДА ИПНСведенияОДоходах.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	               |				ИНАЧЕ ИПНСведенияОДоходах.ФизЛицо = ВТ_Гражданство.ФИО
	               |			КОНЕЦ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоСН.СрезПоследних(&парамПериодПо, ) КАК КодыСтрокДекларации
	               |		ПО ИПНСведенияОДоходах.ВидРасчета = КодыСтрокДекларации.ВидРасчета
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ),
	               |	ВЫБОР КОГДА ИПНСведенияОДоходах.ФизЛицо Ссылка Справочник.ФизическиеЛица Тогда ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ""210.00.001.A"") Иначе ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ""210.00.001"") КОНЕЦ";
		
	// Необходимо добавить получателей по исполнительным листам
	Если ПризнакАлиментов Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// ставим приходы по ИЛ как начисление получателям алиментов
		|ВЫБРАТЬ		
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	Неопределено,	
		|	СУММА(ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовПриход) КАК НачисленныеДоходы,
		|	СУММА(ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовПриход) КАК НачисленныеДоходыНерезидента,		
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДоходыОблагаемыеИПН
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Обороты(
		|				&парамНачГода,
		|				&парамПериодПо,
		|				МЕСЯЦ,
		|				Налогоплательщик = &парамНалогоплательщик
		|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|				И Получатель.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)		
		|				И (ВЫБОР
	    |						КОГДА Получатель.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	    |							ТОГДА Получатель.ФизЛицо В (&парамФизЛицаНеГраждане)
	    |						ИНАЧЕ Получатель В (&парамФизЛицаНеГраждане)
	    |					КОНЕЦ)
		|				) КАК ВзаиморасчетыСПолучателямиИЛ		
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.Период, МЕСЯЦ)
		|";		
				
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
        		
		// начисленные доходы (резиденты)
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_210_00_001";
		НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение = Выборка.НачисленныеДоходы;
				
		// доход относим к строке А	или B
		// может быть указан код "200.00.001.B",  "210.00.001.B", "910.00.001.B",  "910.00.019.B" или  "910.00.021.B"
		// русскими либо латинскими буквами
		Если (Найти(СокрЛП(Выборка.КодСтроки), "B") > 0)
			Или (Найти(СокрЛП(Выборка.КодСтроки), "В") > 0) Тогда
			
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки ="s_210_00_001_B";
			НоваяСтрока.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.НачисленныеДоходы;		
		ИначеЕсли (Найти(СокрЛП(Выборка.КодСтроки), "A") > 0)
			Или (Найти(СокрЛП(Выборка.КодСтроки), "А") > 0)
			ИЛИ (Найти(СокрЛП(Выборка.КодСтроки), "200.02") > 0) Тогда

			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_210_00_001_A";
			НоваяСтрока.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.НачисленныеДоходы;		
		КонецЕсли;		
	КонецЦикла;
	
	Если ВключатьОППВВДоходыРаботников Тогда
		// Сумма ОППВ
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОППВРасчетыСФондами.СтруктурнаяЕдиница,
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ОППВРасчетыСФондами.Взнос) КАК ОППВ
		|ИЗ
		|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
		|		ПО (НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
		|			И ОППВРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО                                                  	
		|ГДЕ
		|	ОППВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И ОППВРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|	И ОППВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамНачГода И &парамПериодПо
		|	И ОППВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОППВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ОППВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ОППВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель	
		|
		|СГРУППИРОВАТЬ ПО
		|	ОППВРасчетыСФондами.СтруктурнаяЕдиница,
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			// Включаем ОППВ в доходы работника
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_210_00_001_A";
			НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение = Выборка.ОППВ;
			
			// Включаем ОППВ в общие доходы
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();			
			НоваяСтрока.КодСтроки = "s_210_00_001";
			НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение = Выборка.ОППВ;
			
		КонецЦикла;
	КонецЕсли;
	
	// Вычеты, льготы и налог
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(ИПНРасчетыСБюджетом.Налог) КАК ИндивидуальныйПодоходныйНалог	
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                
	|		ПО (НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)      	
	|			И (ВЫБОР
    |				КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
    |						И ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |					ТОГДА ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
    |				ИНАЧЕ ИПНРасчетыСБюджетом.ФизЛицо = ВТ_Гражданство.ФИО
    |			КОНЕЦ)
	|ГДЕ
	|	ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик
	|	И ИПНРасчетыСБюджетом.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И ИПНРасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ &парамНачГода И &парамПериодПо
	|	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)	
	|	И ИПНРасчетыСБюджетом.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И (ВЫБОР
	|		КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|			ТОГДА НЕ ИПНРасчетыСБюджетом.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|		ИНАЧЕ ИСТИНА
	|	  КОНЕЦ)
	|	И ИПНРасчетыСБюджетом.Активность = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ)
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	    	
	
		// сумма исчисленного индивидуального подоходного налога (резиденты)
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_210_00_002";
		НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение = Выборка.ИндивидуальныйПодоходныйНалог;
						
	КонецЦикла;
	          
	// Задолженность по доходам, невыплаченным физическим лицам
	
	ТекстЗапроса = "
	|// Задолженность по доходам, невыплаченным физлицам, из текущих взаиморасчетов
	|ВЫБРАТЬ
	|	ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток КАК ЗадолженностьПоДоходам
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(
	|			&парамПослеПериодПо,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель	
	|			И ФизЛицо В (&парамФизЛицаНеГраждане)) КАК ВзаиморасчетыСРаботниками                         
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Задолженность по доходам, невыплаченным физлицам, из депонированных сумм
	|ВЫБРАТЬ
	|	ВзаиморасчетыСДепонентами.СуммаВзаиморасчетовОстаток КАК ЗадолженностьПоДоходам
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций.Остатки(
	|			&парамПослеПериодПо,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель	
	|			И ФизЛицо В (&парамФизЛицаНеГраждане)) КАК ВзаиморасчетыСДепонентами                          
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Задолженность по доходам, невыплаченным физлицам, из оплаты по актам закупа
	|ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиФизЛицами.СуммаВзаиморасчетовОстаток КАК ЗадолженностьПоДоходам
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами.Остатки(
	|			&парамПослеПериодПо,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И НЕ Контрагент.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус 
	|			И (ВЫБОР
	|					КОГДА Контрагент.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА Контрагент.ФизЛицо В (&парамФизЛицаНеГраждане)
	|					ИНАЧЕ Контрагент В (&парамФизЛицаНеГраждане)
	|				КОНЕЦ)) КАК ВзаиморасчетыСКонтрагентамиФизЛицами
	|";		
	
	
	// Если суммы удержаний по исполнительным листам включаются по фактическому перечислению
	Если Не ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ Тогда

		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// ставим остатки сумм по ИЛ как задолженность по невыплаченным доходам работникам, с которых удержаны ИЛ
		|ВЫБРАТЬ
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовОстаток + ВзаиморасчетыСПолучателямиИЛ.СуммаСборовОстаток КАК ЗадолженностьПоДоходам
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Остатки(
		|				&парамПослеПериодПо,
		|				Налогоплательщик = &парамНалогоплательщик
		|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|				И ДокументОснование.ФизЛицо <> &парамИндивидуальныйПредприниматель		
		|				И ДокументОснование.ФизЛицо В (&парамФизЛицаНеГраждане)) КАК ВзаиморасчетыСПолучателямиИЛ            
		|";		
		
	//Иначе
		// удержания по ИЛ уже находятся в регистре накопления ВыплаченныеДоходыРаботникамОрганизацийНУ
	КонецЕсли;
	
	// Необходимо добавить получателей по исполнительным листам
	Если ПризнакАлиментов Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// ставим остатки сумм по ИЛ как задолженность по невыплаченным доходам получателям ИЛ
		|ВЫБРАТЬ
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовОстаток КАК ЗадолженностьПоДоходам
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Остатки(
		|				&парамПослеПериодПо,
		|				Налогоплательщик = &парамНалогоплательщик
		|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|				И Получатель.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)		
		|				И (ВЫБОР
	    |					КОГДА Получатель.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	    |						ТОГДА Получатель.ФизЛицо В (&парамФизЛицаНеГраждане)
	    |					ИНАЧЕ Получатель В (&парамФизЛицаНеГраждане)
	    |				КОНЕЦ)    								       
		|				) КАК ВзаиморасчетыСПолучателямиИЛ
		|";		
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

		// задолженность по доходам, невыплаченным иностранцам и лицам без гражданства
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_210_00_003";
		НоваяСтрока.МесяцНалоговогоПериода = НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		НоваяСтрока.Значение = Выборка.ЗадолженностьПоДоходам;
	
	КонецЦикла;
	
	// Выплачено доходов
	
	ТекстЗапроса = "
	|// Выплата доходов
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВыплаченныеДоходы.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,	
	|	ВыплаченныеДоходы.СуммаДоходаОборот КАК ВыплаченоДоходов
	|ИЗ
	|	РегистрНакопления.ВыплаченныеДоходыРаботникамОрганизацийНУ.Обороты(
	|			&парамНачГода,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель
	|			И ВЫБОР
	|				КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	|					ТОГДА НЕ ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|				ИНАЧЕ ИСТИНА
	|			  КОНЕЦ) КАК ВыплаченныеДоходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
	|			ПО (НАЧАЛОПЕРИОДА(ВыплаченныеДоходы.Период, МЕСЯЦ) = ВТ_Гражданство.Период)                        
	|				И (ВЫБОР
    |					КОГДА ВыплаченныеДоходы.ФизЛицо ССЫЛКА Справочник.Контрагенты
    |						И ВыплаченныеДоходы.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |						ТОГДА ВыплаченныеДоходы.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
    |					ИНАЧЕ ВыплаченныеДоходы.ФизЛицо = ВТ_Гражданство.ФИО
    |				   КОНЕЦ)
	|";		
	
	// Если суммы удержаний по исполнительным листам включаются по фактическому перечислению
	Если Не ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ Тогда

		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// ставим перечисление алиментов - как выплату доходов для работников-алименщиков
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовРасход + ВзаиморасчетыСПолучателямиИЛ.СуммаСборовРасход КАК ВыплаченоДоходов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Обороты(
		|				&парамНачГода,
		|				&парамПериодПо,
		|				МЕСЯЦ,
		|				Налогоплательщик = &парамНалогоплательщик
		|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|				И ДокументОснование.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|				) КАК ВзаиморасчетыСПолучателямиИЛ
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
		|			ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.Период, МЕСЯЦ) = ВТ_Гражданство.Период)             
		|					И ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо = ВТ_Гражданство.ФИО              		
		|";		
		
	//Иначе
		// удержания по ИЛ уже находятся в регистре накопления ВыплаченныеДоходыРаботникамОрганизацийНУ
	КонецЕсли;
	
	// Необходимо добавить получателей по исполнительным листам
	Если ПризнакАлиментов Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// ставим перечисление алиментов как выплату доходов получателям ИЛ
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовРасход КАК ВыплаченоДоходов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Обороты(
		|				&парамНачГода,
		|				&парамПериодПо,
		|				МЕСЯЦ,
		|				Налогоплательщик = &парамНалогоплательщик
		|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|				И Получатель.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)				
		|				И (ВЫБОР
	    |					КОГДА Получатель.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	    |						ТОГДА Получатель.ФизЛицо В (&парамФизЛицаНеГраждане)
	    |					ИНАЧЕ Получатель В (&парамФизЛицаНеГраждане)
	    |				КОНЕЦ)
		|				) КАК ВзаиморасчетыСПолучателямиИЛ		
		|";		
		
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		// выплачено доходов
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_210_00_004";
		НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение = Выборка.ВыплаченоДоходов;
		
	КонецЦикла;
	
	// Сумма индивидуального подоходного налога, подлежащего перечислению в бюджет
	// с выделением суммы по головной организации и филиалам
	
	Запрос.Текст = "
	|// ИПН, подлежащий перечислению
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	// по резидентам данные
	|	СУММА(ИПНРасчетыСБюджетом.Налог) КАК СуммаИПНПодлежащегоПеречислению,	
	|	СУММА(ВЫБОР
	|			КОГДА ИПНРасчетыСБюджетом.СтруктурнаяЕдиница = ИПНРасчетыСБюджетом.Налогоплательщик
	|				ТОГДА ИПНРасчетыСБюджетом.Налог
	|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК СуммаИПНПодлежащегоПеречислениюЗаГоловнуюОрганизацию,
	|	СУММА(ВЫБОР
	|			КОГДА  ИПНРасчетыСБюджетом.СтруктурнаяЕдиница <> ИПНРасчетыСБюджетом.Налогоплательщик
	|				ТОГДА ИПНРасчетыСБюджетом.Налог
	|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК СуммаИПНПодлежащегоПеречислениюПоФилиалам,
	// по нерезидентам данные
	|	СУММА(0) КАК СуммаИПНПодлежащегоПеречислениюЗаНерезидента,
	|	СУММА(0) КАК СуммаИПНПодлежащегоПеречислениюЗаГоловнуюОрганизациюЗаНерезидента,
	|	СУММА(0) КАК СуммаИПНПодлежащегоПеречислениюПоФилиаламЗаНерезидента
	|	
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                              
	|			ПО (НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ) = ВТ_Гражданство.Период)                	
	|				И (ВЫБОР
    |						КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
    |							И ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |							ТОГДА ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
    |						ИНАЧЕ ИПНРасчетыСБюджетом.ФизЛицо = ВТ_Гражданство.ФИО
    |					КОНЕЦ)
	|ГДЕ
	|	ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик
	|	И ИПНРасчетыСБюджетом.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И ИПНРасчетыСБюджетом.Период МЕЖДУ &парамНачГода И &парамПериодПо
	|	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|	И ИПНРасчетыСБюджетом.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И (ВЫБОР
	|		КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|			ТОГДА НЕ ИПНРасчетыСБюджетом.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|		ИНАЧЕ ИСТИНА
	|	  КОНЕЦ)
	|	И ИПНРасчетыСБюджетом.Активность = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		// сумма ИПН, подлежащая перечислению в бюджет
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_210_00_005";
		НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение = Выборка.СуммаИПНПодлежащегоПеречислению;

		Если ЕстьСтруктурныеЕдиницыУНалогоплательщика Тогда

			// сумма налога, подлежащая перечислению за головную организацию
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_210_00_006";
			НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение = Выборка.СуммаИПНПодлежащегоПеречислениюЗаГоловнуюОрганизацию;

			// сумма налога, подлежащая перечислению по филиалам/представительствам
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_210_00_007";
			НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение = Выборка.СуммаИПНПодлежащегоПеречислениюПоФилиалам;
		
		КонецЕсли; 
	КонецЦикла;

	/////////////////////////////////////////////////////////
	// Раздел. Исчисление обязательных пенсионных взносов
	
	Если СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе Тогда
		// Сумма Исчисленных ОПВ
		Запрос.Текст =  "ВЫБРАТЬ
					    |	НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
					    |	СУММА(ВЫБОР
					    |			КОГДА ОПВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
					    |				ТОГДА ОПВСведенияОДоходах.ОблагаемаяБазаОборот
					    |			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
					    |		КОНЕЦ) КАК ОблагаемаяБазаОПВ
					    |ИЗ
					    |	РегистрНакопления.ОПВСведенияОДоходах.Обороты(
					    |			&парамНачГода,
					    |			&парамПериодПо,
					    |			МЕСЯЦ,
					    |			Налогоплательщик = &парамНалогоплательщик
					    |				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
					    |				И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ОПВСведенияОДоходах
					    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство
					    |		ПО (НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ) = ВТ_Гражданство.Период)
					    |			И ОПВСведенияОДоходах.ФизЛицо = ВТ_Гражданство.ФИО
					    |
					    |СГРУППИРОВАТЬ ПО
					    |	НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ)";   
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
		     //210.00.008. Начисленные доходы, с которых удерживаются (начисляются) обязательные пенсионные взносы		
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_210_00_008";
			НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение = Выборка.ОблагаемаяБазаОПВ;		
		КонецЦикла;
	Иначе
		// Сумма Исчисленных ОПВ
		Запрос.Текст = "
		|// ОПВ, подлежащие перечислению
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ОПВРасчетыСФондами.Взнос) КАК СуммаОПВ	
		|ИЗ                         
		|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
		|		ПО (НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.Период, МЕСЯЦ) = ВТ_Гражданство.Период)               
		|			И ОПВРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО                                      	
		|ГДЕ
		|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И ОПВРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|	И ОПВРасчетыСФондами.Период МЕЖДУ &парамНачГода И &парамПериодПо
		|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ОПВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель	
		|	И ОПВРасчетыСФондами.Активность = Истина
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.Период, МЕСЯЦ)
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
		     //210.00.008. Начисленные доходы, с которых удерживаются (начисляются) обязательные пенсионные взносы		
			 // рассчитаем от суммы начисленных ОПВ
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_210_00_008";
			НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение = Выборка.СуммаОПВ;
			
		КонецЦикла;
	КонецЕсли;
	

	// Сумма ОПВ, подлежащих перечислению
	// с выделение суммы по головной организации и филиалам	
	
	Запрос.Текст = "
	|// ОПВ, подлежащие перечислению
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(ОПВПодлежитПеречислениюВФонды.Взнос) КАК СуммаОПВПодлежащихПеречислению,
	|	СУММА(ВЫБОР
	|			КОГДА ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница = ОПВПодлежитПеречислениюВФонды.Налогоплательщик
	|				ТОГДА ОПВПодлежитПеречислениюВФонды.Взнос
	|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК СуммаОПВПодлежащихПеречислениюЗаГоловнуюОрганизацию,
	|	СУММА(ВЫБОР
	|			КОГДА ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница <> ОПВПодлежитПеречислениюВФонды.Налогоплательщик
	|				ТОГДА ОПВПодлежитПеречислениюВФонды.Взнос
	|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК СуммаОПВПодлежащихПеречислениюПоФилиалам
	|ИЗ                         
	|	РегистрНакопления.ОПВПодлежитПеречислениюВФонды КАК ОПВПодлежитПеречислениюВФонды
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ) = ВТ_Гражданство.Период)               
	|			И ОПВПодлежитПеречислениюВФонды.ФизЛицо = ВТ_Гражданство.ФИО                                      	
	|ГДЕ
	|	ОПВПодлежитПеречислениюВФонды.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И ОПВПодлежитПеречислениюВФонды.Период МЕЖДУ &парамНачГода И &парамПериодПо
	|	И ОПВПодлежитПеречислениюВФонды.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|	И ОПВПодлежитПеречислениюВФонды.ФизЛицо <> &парамИндивидуальныйПредприниматель	
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		// сумма ОПВ, подлежащих перечислению
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_210_00_009";
		НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение = Выборка.СуммаОПВПодлежащихПеречислению;

		Если ЕстьСтруктурныеЕдиницыУНалогоплательщика Тогда

			// сумма ОПВ, подлежащих перечислению за головную организацию
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_210_00_011";
			НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение = Выборка.СуммаОПВПодлежащихПеречислениюЗаГоловнуюОрганизацию;

			// сумма ОПВ, подлежащих перечислению по филиалам/представительствам
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_210_00_012";
			НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение = Выборка.СуммаОПВПодлежащихПеречислениюПоФилиалам;
		
		КонецЕсли;
	
	КонецЦикла;
	
	// Сумма обязательных профессиональных пенсионных взносов
	Если СтруктураРеквизитовФормы.ВедетсяУчетОППВ Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ОППВРасчетыСФондами.Взнос) КАК ОППВ,
		|	СУММА(ВЫБОР
		|			КОГДА ОППВРасчетыСФондами.СтруктурнаяЕдиница = ОППВРасчетыСФондами.Налогоплательщик
		|				ТОГДА ОППВРасчетыСФондами.Взнос
		|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		|		КОНЕЦ) КАК ОППВЗаГоловнуюОрганизацию,
		|	СУММА(ВЫБОР
		|			КОГДА ОППВРасчетыСФондами.СтруктурнаяЕдиница <> ОППВРасчетыСФондами.Налогоплательщик
		|				ТОГДА ОППВРасчетыСФондами.Взнос
		|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		|		КОНЕЦ) КАК ОППВПоФилиалам
		|ИЗ
		|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
		|		ПО (НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
		|			И ОППВРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО                                                  	
		|ГДЕ
		|	ОППВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И ОППВРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|	И ОППВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамНачГода И &парамПериодПо
		|	И ОППВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОППВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ОППВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ОППВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель	
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
		|";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			// сумма ОППВ
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_210_00_010";
			НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение = Выборка.ОППВ;			
		КонецЦикла;
	КонецЕсли;
	
	// Исчисленные пенсионные взносы	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныеОПВ,
	|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныеОПВПоРезидентам		
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                              
	|		ПО (НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)     
	|			И ОПВРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО                                            	
	|ГДЕ
	|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И ОПВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамНачГода И &парамПериодПо
	|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)	
	|	И ОПВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ОПВРасчетыСФондами.Активность = Истина
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 		    		
		
		Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо И ОрганизацияЯвляетсяПлательщикомСН Тогда
			
			// для расчета строки 210.00.016 Облагаемые социальным налогом доходы
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_210_00_016";
			НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение = - Выборка.ИсчисленныеОПВ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	/////////////////////////////////////////////////////////
	// Раздел. Исчисление социального налога с применением ставок, установленных п. 1, 3 ст. 358 Налогового кодекса
	// (общеустановленный режим)
	
	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо И ОрганизацияЯвляетсяПлательщикомСН Тогда
	
		// доходы работников, облагаемые и необлагаемые СН
		Запрос.Текст = "ВЫБРАТЬ
		|	СНСведенияОДоходахОбороты.Период КАК МесяцНалоговогоПериода,
		|	СНСведенияОДоходахОбороты.СуммаДоходаОборот КАК СуммаДохода,
		|	ВЫБОР
		|		КОГДА СНСведенияОДоходахОбороты.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|			ТОГДА СНСведенияОДоходахОбороты.СуммаДоходаОборот
		|		ИНАЧЕ СНСведенияОДоходахОбороты.СуммаВычетаОборот
		|	КОНЕЦ КАК СуммаДоходаНеоблагаемогоСН
		|ИЗ
		|	РегистрНакопления.СНСведенияОДоходах.Обороты(
		|			&парамНачГода,
		|			&парамПериодПо,
		|			Месяц,
		|			Налогоплательщик = &парамНалогоплательщик
		|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|			) КАК СНСведенияОДоходахОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                    
		|			ПО (НАЧАЛОПЕРИОДА(СНСведенияОДоходахОбороты.Период, МЕСЯЦ) = ВТ_Гражданство.Период)        
		|			И СНСведенияОДоходахОбороты.ФизЛицо = ВТ_Гражданство.ФИО
		|";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// облагаемые доходы работников
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_210_00_016";
			НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение = Выборка.СуммаДохода - Выборка.СуммаДоходаНеоблагаемогоСН;
			
		КонецЦикла;
	
		// сумма исчисленного налога
		 
		Запрос.Текст = "ВЫБРАТЬ
					   |	НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
					   |	СУММА(СНИсчисленный.Налог) КАК Налог,
					   |	СУММА(ВЫБОР
					   |			КОГДА СНИсчисленный.СтруктурнаяЕдиница = СНИсчисленный.Налогоплательщик
					   |				ТОГДА СНИсчисленный.Налог
					   |			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
					   |		КОНЕЦ) КАК НалогЗаГоловнуюОрганизацию,
					   |	СУММА(ВЫБОР
					   |			КОГДА СНИсчисленный.СтруктурнаяЕдиница <> СНИсчисленный.Налогоплательщик
					   |				ТОГДА СНИсчисленный.Налог
					   |			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
					   |		КОНЕЦ) КАК НалогПоФилиалам
					   |ИЗ
					   |	РегистрНакопления.СНИсчисленный КАК СНИсчисленный
					   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                        
					   |		ПО (НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)        
					   |			И СНИсчисленный.ФизЛицо = ВТ_Гражданство.ФИО                                               					   
					   |ГДЕ
					   |	СНИсчисленный.МесяцНалоговогоПериода МЕЖДУ &парамНачГода И &парамПериодПо
					   |	И СНИсчисленный.Налогоплательщик = &парамНалогоплательщик
					   |	И СНИсчисленный.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)					   
					   |
					   |СГРУППИРОВАТЬ ПО
					   |	НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// сумма исчисленного налога
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_210_00_017";
			НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение = Выборка.Налог;

			Если ЕстьСтруктурныеЕдиницыУНалогоплательщика Тогда

				// сумма исчисленного налога за головную организацию
				НоваяСтрока = ТаблицаПоМесяцам.Добавить();
				НоваяСтрока.КодСтроки = "s_210_00_018";
				НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
				НоваяСтрока.Значение = Выборка.НалогЗаГоловнуюОрганизацию;

				// сумма исчисленного налога по филиалам / представительствам
				НоваяСтрока = ТаблицаПоМесяцам.Добавить();
				НоваяСтрока.КодСтроки = "s_210_00_019";
				НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
				НоваяСтрока.Значение = Выборка.НалогПоФилиалам;
			
			КонецЕсли;
		
		КонецЦикла;
							  
	КонецЕсли;
	
	/////////////////////////////////////////////////////////
	// Раздел. Исчисление социального налога с применением ставки, установленной п. 2 ст. 358 Налогового кодекса
	// (ИП на общеустановленном режиме - 2 МРП за себя и 1 МРП за наемных работников)
	
	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И ОрганизацияЯвляетсяПлательщикомСН Тогда
		
		// возможно, что перешли на общеустановленный режим с упрощенного в середине налогового года, 
		// поэтому найдем по учетной политике НУ дату, с которой применяется общеустановленный режим
				
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	МИНИМУМ(УчетнаяПолитикаНУ.Период) КАК Период
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНУ
		|ГДЕ
		|	УчетнаяПолитикаНУ.Организация = &парамНалогоплательщик
		|	И УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН = ИСТИНА
		|	И УчетнаяПолитикаНУ.Период <= &парамПериодПо
		|";
				
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаНачалаРаботыНаОбщеустановленномРежиме = Макс(НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), Выборка.Период);
		Иначе
			ДатаНачалаРаботыНаОбщеустановленномРежиме = НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		КонецЕсли;
				
		Запрос.УстановитьПараметр("парамДатаНачалаРаботыНаОбщеустановленномРежиме", ДатаНачалаРаботыНаОбщеустановленномРежиме);
		
				
		// сумма налога
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|							КОГДА СНИсчисленный.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|								ТОГДА СНИсчисленный.ФизЛицо
		|							ИНАЧЕ NULL
		|						КОНЕЦ) КАК ЧисленностьНаемныхРаботников,
		|	СУММА(СНИсчисленный.Налог) КАК Налог,
		|	СУММА(ВЫБОР
		|			КОГДА СНИсчисленный.ФизЛицо = &парамИндивидуальныйПредприниматель
		|				ТОГДА СНИсчисленный.Налог
		|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		|		КОНЕЦ) КАК НалогЗаИП,
		|	СУММА(ВЫБОР
		|			КОГДА СНИсчисленный.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|				ТОГДА СНИсчисленный.Налог
		|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		|		КОНЕЦ) КАК НалогЗаРаботников
		|ИЗ
		|	РегистрНакопления.СНИсчисленный КАК СНИсчисленный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                        
		|		ПО (НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)        
		|			И СНИсчисленный.ФизЛицо = ВТ_Гражданство.ФИО                                               		
		|ГДЕ
		|	СНИсчисленный.МесяцНалоговогоПериода МЕЖДУ &парамДатаНачалаРаботыНаОбщеустановленномРежиме И &парамПериодПо
		|	И СНИсчисленный.Налогоплательщик = &парамНалогоплательщик
		|	И СНИсчисленный.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)		
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ)		
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
				
		Пока Выборка.Следующий() Цикл
		               			
			// Всего сумма налога
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_210_00_021";
			НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение = Выборка.Налог;
			
		КонецЦикла;
				
	КонецЕсли;
	
	/////////////////////////////////////////////////////////
	// Раздел. Исчисление социальных отчислений
	
	// Сумма социальных отчислений, в том числе по головной организации и по филиалам
	Если СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе Тогда	
		Запрос.Текст =  "ВЫБРАТЬ
					    |	НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
					    |	СУММА(ВЫБОР
					    |			КОГДА СОСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
					    |				ТОГДА СОСведенияОДоходах.ОблагаемаяБазаОборот
					    |			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
					    |		КОНЕЦ) КАК ОблагаемаяБазаСО
						|ИЗ
					    |	РегистрНакопления.СОСведенияОДоходах.Обороты(
					    |			&парамНачГода,
					    |			&парамПериодПо,
					    |			МЕСЯЦ,
					    |			Налогоплательщик = &парамНалогоплательщик
					    |				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
					    |				И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК СОСведенияОДоходах
					    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство
					    |		ПО (НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ) = ВТ_Гражданство.Период)
					    |			И СОСведенияОДоходах.ФизЛицо = ВТ_Гражданство.ФИО
					    |
					    |СГРУППИРОВАТЬ ПО
						|	НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ)"; 

		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			// для расчета потом доходов физлиц, с которых исчисляются социальные отчисления
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_210_00_022";
			НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение = Выборка.ОблагаемаяБазаСО;
	       	
		КонецЦикла;
	КонецЕсли;

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(СОРасчетыСФондами.Отчисление) КАК СоциальныеОтчисления,
	|	СУММА(ВЫБОР
	|			КОГДА СОРасчетыСФондами.СтруктурнаяЕдиница = СОРасчетыСФондами.Налогоплательщик
	|				ТОГДА СОРасчетыСФондами.Отчисление
	|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК СоциальныеОтчисленияЗаГоловнуюОрганизацию,
	|	СУММА(ВЫБОР
	|			КОГДА СОРасчетыСФондами.СтруктурнаяЕдиница <> СОРасчетыСФондами.Налогоплательщик
	|				ТОГДА СОРасчетыСФондами.Отчисление
	|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК СоциальныеОтчисленияПоФилиалам
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
	|			И СОРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО                                                  	
	|ГДЕ
	|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И СОРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамНачГода И &парамПериодПо
	|	И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И СОРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель	
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе Тогда
			// для расчета потом доходов физлиц, с которых исчисляются социальные отчисления
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_210_00_022";
			НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение = Выборка.СоциальныеОтчисления;
		КонецЕсли;
		
		// сумма социальных отчислений
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_210_00_023";
		НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение = Выборка.СоциальныеОтчисления;

		Если ЕстьСтруктурныеЕдиницыУНалогоплательщика Тогда

			// сумма социальных отчислений по головной организации
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_210_00_024";
			НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение = Выборка.СоциальныеОтчисленияЗаГоловнуюОрганизацию;

			// сумма социальных отчислений по филиалам/представительствам
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_210_00_025";
			НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение = Выборка.СоциальныеОтчисленияПоФилиалам;
		
		КонецЕсли;
	
	КонецЦикла;
	
	// свернем строки по-месячно
	ТаблицаПоМесяцам.Свернуть("КодСтроки, МесяцНалоговогоПериода", "Значение");
	
	// рассчитываем итоговые графы за квартал и с начала года
	
	Начало1Мес = НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Начало2Мес = ДобавитьМесяц(Начало1Мес, 1);
	Начало3Мес = ДобавитьМесяц(Начало2Мес, 1);
	
	Для Каждого СтрокаТЗ Из ТаблицаПоМесяцам Цикл
			
		СтрокаРезультат = ТаблицаРезультат.Найти(СтрокаТЗ.КодСтроки, "КодСтроки");
		Если СтрокаРезультат = Неопределено Тогда
			СтрокаРезультат = ТаблицаРезультат.Добавить();
			СтрокаРезультат.КодСтроки = СтрокаТЗ.КодСтроки;
		КонецЕсли;
		
		Если СтрокаТЗ.МесяцНалоговогоПериода = Начало1Мес Тогда
			СтрокаРезультат.Значение1Мес = СтрокаРезультат.Значение1Мес + СтрокаТЗ.Значение;
		ИначеЕсли СтрокаТЗ.МесяцНалоговогоПериода = Начало2Мес Тогда
			СтрокаРезультат.Значение2Мес = СтрокаРезультат.Значение2Мес + СтрокаТЗ.Значение;
		ИначеЕсли СтрокаТЗ.МесяцНалоговогоПериода = Начало3Мес Тогда
			СтрокаРезультат.Значение3Мес = СтрокаРезультат.Значение3Мес + СтрокаТЗ.Значение;
		КонецЕсли;
		
		// квартальные итоги
		Если СтрокаТЗ.МесяцНалоговогоПериода >= Начало1Мес Тогда
			СтрокаРезультат.ЗначениеКвартал = СтрокаРезультат.ЗначениеКвартал + СтрокаТЗ.Значение;
		КонецЕсли;			
		
	КонецЦикла;
	
	Если НЕ СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе Тогда
		// теперь расчетные строки
	
		// начисленные доходы, с которых удерживаются (начисляются) ОПВ - рассчитываем обратным ходом от фактически исчисленных ОПВ
		НайденнаяСтрока = ТаблицаРезультат.Найти("s_210_00_008", "КодСтроки");
		Если НайденнаяСтрока <> Неопределено Тогда
			ПроцентОПВ = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы,СтруктураРеквизитовФормы. мДатаКонцаПериодаОтчета);
			
			Если ПроцентОПВ <> 0 Тогда
				НайденнаяСтрока.Значение1Мес = НайденнаяСтрока.Значение1Мес * 100 / ПроцентОПВ;
				НайденнаяСтрока.Значение2Мес = НайденнаяСтрока.Значение2Мес * 100 / ПроцентОПВ;
				НайденнаяСтрока.Значение3Мес = НайденнаяСтрока.Значение3Мес * 100 / ПроцентОПВ;
				НайденнаяСтрока.ЗначениеКвартал = НайденнаяСтрока.ЗначениеКвартал * 100 / ПроцентОПВ;
				НайденнаяСтрока.ЗначениеСНачГода = НайденнаяСтрока.ЗначениеСНачГода * 100 / ПроцентОПВ;
			КонецЕсли;
		КонецЕсли;

		// доходы физических лиц, с которых исчисляются СО - рассчитываем обратным ходом от фактически исчисленных СО
		НайденнаяСтрока = ТаблицаРезультат.Найти("s_210_00_022", "КодСтроки");
		Если НайденнаяСтрока <> Неопределено Тогда
			ПроцентСО = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления,  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			
			Если ПроцентСО <> 0 Тогда
				НайденнаяСтрока.Значение1Мес = НайденнаяСтрока.Значение1Мес *  100 / ПроцентСО;
				НайденнаяСтрока.Значение2Мес = НайденнаяСтрока.Значение2Мес * 100 / ПроцентСО;
				НайденнаяСтрока.Значение3Мес = НайденнаяСтрока.Значение3Мес * 100 / ПроцентСО;
				НайденнаяСтрока.ЗначениеКвартал = НайденнаяСтрока.ЗначениеКвартал * 100 / ПроцентСО;
				НайденнаяСтрока.ЗначениеСНачГода = НайденнаяСтрока.ЗначениеСНачГода * 100 / ПроцентСО;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;          

	Если ТаблицаРезультат.Количество() = 0 и ВыдаватьСообщения Тогда
		Текст = НСтр("ru = 'Данные для заполнения формы 210.00 за отчетный период отсутствуют...'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);    		
	КонецЕсли;
					 	
	Возврат ТаблицаРезультат;		 
	
КонецФункции // Форма210РассчитатьДанныеФормы()

&НаКлиенте
Процедура Форма210Расшифровка(ИмяЯчейки)
	
	ДатаНачала    = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ДатаОкончания = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
		
	Если Прав(ИмяЯчейки,1) = "1" Тогда // месяц 1
		ДатаНачала    = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
		ДатаОкончания = КонецМесяца(ДатаНачала);
	ИначеЕсли Прав(ИмяЯчейки,1) = "2" Тогда // месяц 
		ДатаНачала = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,1);
		ДатаОкончания = КонецМесяца(ДатаНачала);
	ИначеЕсли Прав(ИмяЯчейки,1) = "3" Тогда // месяц 
		ДатаНачала = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,2);
		ДатаОкончания = КонецМесяца(ДатаНачала);
	ИначеЕсли Прав(ИмяЯчейки,1) = "4" Тогда // месяц 
		ДатаНачала    = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
		ДатаОкончания = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	ИначеЕсли Прав(ИмяЯчейки,1) = "5" Тогда // с начала года
		ДатаНачала    = НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ДатаОкончания = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	КонецЕсли;
	
	СтруктурнаяЕдиница = Неопределено;
	Если Лев(ИмяЯчейки,12) = "s_210_00_006"                   
	 ИЛИ Лев(ИмяЯчейки,12) = "s_210_00_011" 
	 ИЛИ Лев(ИмяЯчейки,12) = "s_210_00_018" 
	 ИЛИ Лев(ИмяЯчейки,12) = "s_210_00_024" Тогда
		// это голова
		СтруктурнаяЕдиница = новый СписокЗначений;
		СтруктурнаяЕдиница.Добавить(Налогоплательщик);
	ИначеЕсли Лев(ИмяЯчейки,12) = "s_210_00_007" 
	 ИЛИ Лев(ИмяЯчейки,12) = "s_210_00_012" 
	 ИЛИ Лев(ИмяЯчейки,12) = "s_210_00_019"
	 ИЛИ Лев(ИмяЯчейки,12) = "s_210_00_025" Тогда
		// это структурные надо из списка удалить голову
		СтруктурнаяЕдиница = новый СписокЗначений;
		Для Каждого Элемент Из мСписокСтруктурныхЕдиниц Цикл
			Если Элемент.Значение = Налогоплательщик Тогда
				Продолжить;
			КонецЕсли;
			СтруктурнаяЕдиница.Добавить(Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
				
	СтруктураПоФизЛицу = Новый Структура;
	Если ПолучитьЗначениеРеквизита(Налогоплательщик, "ЮрФизЛицо") = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		Если Лев(ИмяЯчейки,12) <> "s_210_00_021" Тогда
			СтруктураПоФизЛицу.Вставить("ФизЛицо", ПолучитьЗначениеРеквизита(Налогоплательщик, "ИндивидуальныйПредприниматель"));
			СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.НеРавно);									
		КонецЕсли;
	КонецЕсли;
	  	
	// признак резиденства
	ПризнакНеРезидентства = Неопределено;
	НомерЯчейки = Число(Сред(ИмяЯчейки,10,3));
		
	ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(ДатаНачала, ДатаОкончания, СтруктурнаяЕдиница, СтруктураПоФизЛицу,,ПризнакНеРезидентства);
	
КонецПроцедуры // Форма210Расшифровка()

///////////////////////////////////////////////////////////////
// Процедуры и функции для расчета(заполнения) формы 210.01

&НаКлиенте
Процедура Форма210_01ЗаполнитьАвто(Перезаполнить = Ложь) 
	                	
	Состояние("Расчет формы 210.01");		
	
	Форма210_01ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры // Форма210ЗаполнитьАвто()

&НаСервере
Процедура Форма210_01ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма210_01";
	
	Если Не ЗначениеЗаполнено(ЗаполнениеКодаСтраны)Тогда
		ЗаполнениеКодаСтраны = "КодАльфа2";
	КонецЕсли;
	
	ТекущаяСтраница = 1;
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы",ТекИмяФормы));
	
	Если СтрокаФормы <> Неопределено Тогда
		СтрокаФормы.ВсегоСтраниц = 1;
	КонецЕсли;     		
	
	Если НЕ Перезаполнить Тогда  
		Текст = НСтр("ru = 'Расчет приложения 210.01'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли;      
	
	Выборка = Форма210_01РассчитатьДанныеФормы(Истина).Выбрать();	
	
	СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, ТекИмяФормы);
			                             	
		Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
			НомерСтроки = 2;
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
			ТаблицаСтрокГруппы.Очистить();
			
			Выборка.Сбросить();
			
			Пока Выборка.Следующий() Цикл  			
			
				// заполняем данные строки в форме отчета
			 	Элемент = ТаблицаСтрокГруппы.Добавить();   			 
				Если ИмяГруппы = "Страница1" Тогда
					//Так должны заполнять по отдельности значения выборки 
					//для каждого листа
					Элемент.Ф210_01_A1 = Формат(НомерСтроки, мФорматНомераСтроки);
					Элемент.Ф210_01ФИОРезидента = Выборка.ФИОФизЛица;
					
					Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.ИИН) Тогда  					
						 СтрокаИИН = Выборка.ИИН;
					Иначе
						 СтрокаИИН = "";
						 
						 ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа D ""ИИН"",
							  |т.к. значение содержит символы, отличные от цифр'");
							  
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки)));
						
					КонецЕсли;

					Элемент.Ф210_01ИИНРезидента = СтрокаИИН;
					
					Элемент.Ф210_01КодСтраныРезидента = Выборка.КодСтраны;
					
					ПризнакРезидентства = Выборка.НеЯвляетсяНалоговымРезидентомРК;
					Элемент.Ф210_01ПризнакРезидентства = ?(ПризнакРезидентства, СтруктураРеквизитовФормы.ОтметкаНерезидентов, СтруктураРеквизитовФормы.ОтметкаРезидентов);
				
					РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф210_01ФИОРезидента",        Выборка.ФизЛицо);
					РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф210_01ИИНРезидента",        Выборка.ФизЛицо);
					РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф210_01КодСтраныРезидента",  Выборка.ФизЛицо);
					РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф210_01ПризнакРезидентства", Выборка.ФизЛицо);					
				 
				ИначеЕсли ИмяГруппы = "Страница2" Тогда
					Элемент.Ф210_01_A2 = Формат(НомерСтроки, мФорматНомераСтроки);
					Элемент.Ф210_01НомерРегистрацииРезидента = Выборка.НомерРегистрации;
										
					Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.КодВидаДокументаВНалоговойОтчетности) Тогда
						КодВидаДокументаВНалоговойОтчетности = Выборка.КодВидаДокументаВНалоговойОтчетности;					
					Иначе
						КодВидаДокументаВНалоговойОтчетности = "";
						
						ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа G ""Код вида документа"",
							  |т.к. значение содержит символы, отличные от цифр'");
							  
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки)));
						
					КонецЕсли;
					
					Элемент.Ф210_01ВидДокРезидента   = КодВидаДокументаВНалоговойОтчетности;
					Элемент.Ф210_01НомерДокРезидента = Выборка.НомерДокумента;
					Элемент.Ф210_01ДатаДокРезидента  = Выборка.ДатаДокумента;
					
					РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф210_01НомерРегистрацииРезидента", Выборка.ФизЛицо);					
					
			    ИначеЕсли ИмяГруппы = "Страница3" Тогда
					Элемент.Ф210_01_A3 = Формат(НомерСтроки,мФорматНомераСтроки);					
					Если Налогоплательщик.ИностраннаяОрганизация Тогда
						КодДохРезидента = "1181";
					Иначе
						КодДохРезидента = "1180";
					КонецЕсли;
					Элемент.Ф210_01КодДохРезидента = КодДохРезидента;
				ИначеЕсли ИмяГруппы = "Страница4" Тогда
					Элемент.Ф210_01_A4 = Формат(НомерСтроки, мФорматНомераСтроки);					
					Элемент.Ф210_01СтавкаНалога = 10;					
					Элемент.Ф210_01_M = Выборка.НачисленоДоходов;
					Элемент.Ф210_01_N = Выборка.НалоговыеВычеты;
					Элемент.Ф210_01_O = Выборка.ОбязательныеПенсионныеВзносы;
					
				ИначеЕсли ИмяГруппы = "Страница5" Тогда
					Элемент.Ф210_01_A5 = Формат(НомерСтроки,мФорматНомераСтроки);
					Элемент.Ф210_01_P = Выборка.ОбязательныеПрофессиональныеПенсионныеВзносы;
					Элемент.Ф210_01_Q = Выборка.ДобровольныеПенсионныеВзносы;
					Элемент.Ф210_01_R = Выборка.СтраховыеПремии;
					Элемент.Ф210_01_S = Выборка.ПогашениеЖилищныхЗаймов;					
			
				ИначеЕсли ИмяГруппы = "Страница6" Тогда
					Элемент.Ф210_01_A6 = Формат(НомерСтроки, мФорматНомераСтроки);
					Элемент.Ф210_01_T = 0;
					Элемент.Ф210_01_U = Выборка.ДоходыНеОблагаемыеИПН;					
					Элемент.Ф210_01_V = Выборка.ИндивидуальныйПодоходныйНалог;					
					
				ИначеЕсли ИмяГруппы = "Страница7" Тогда
					Элемент.Ф210_01_A7 = Формат(НомерСтроки, мФорматНомераСтроки);
					Элемент.Ф210_01_W = Выборка.ВыплаченоДоходов;
					Элемент.Ф210_01_X = Выборка.ВыплатыНеОблагаемыеСН;					
					Элемент.Ф210_01_Y = Выборка.ВыплатыОблагаемыеСН;
					
				ИначеЕсли ИмяГруппы = "Страница8" Тогда
					Элемент.Ф210_01_A8 = Формат(НомерСтроки, мФорматНомераСтроки);
					Элемент.Ф210_01_Z = Выборка.СоциальныеНалог;
					Элемент.Ф210_01_AA = Выборка.РасходыРаботодателяСКоторыхИсчисляютсяСО;					
					Элемент.Ф210_01_AB = Выборка.СоциальныеОтчисления;
					
				КонецЕсли;
				НомерСтроки = НомерСтроки + 1;	           			 				
			КонецЦикла; 
			
			
		КонецЦикла;	  			 
		
		РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы,СтруктураФормы); 	 
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма,ТекИмяФормы);	
		РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма,ТекИмяФормы,Перезаполнить);     
		
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтаФорма);
		
		ТекущаяСтраница = СтрокаФормы.ВсегоСтраниц;
		
	
	 	      	 
КонецПроцедуры // Форма210_01ЗаполнитьАвто()

&НаСервере
Процедура Форма210_01РасчетНаСервере(Инд,Колонка)
	
	Перем СтруктураГруппы;
	
	КодФормы = "Форма210_01";  	
	Индекс = Инд-1;
	
	мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, КодФормы);
	мМногострочнаяСтруктура.Свойство("Страница4" ,СтруктураГруппы);
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
	
	//рассчитаем вычисляемые ячейки	
	// Y Выплаты, облагаемые социальным налогом (M - X - O)
	M = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф210_01_M = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф210_01_M);
	O = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф210_01_O = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф210_01_O);	
	
								
	мМногострочнаяСтруктура.Свойство("Страница7" ,СтруктураГруппы);
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
	X = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф210_01_X = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф210_01_X);

		
	ТаблицаСтрокГруппы.Получить(Индекс).Ф210_01_Y = M - X - O;
	Форма210_01ПолеТабличногоДокументаСтраница7.Области["Ф210_01_Y__"+ Строка(Инд)].Значение = M - X - O;
	Если ТекущаяСтраница <> Неопределено И ТекущаяСтраница = 1 Тогда 
	 	Форма210_01ПолеТабличногоДокументаСтраница7.Области["Ф210_01_Y"].Значение = ТаблицаСтрокГруппы.Итог("Ф210_01_Y"); 
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтаФорма, КодФормы,мМногострочнаяСтруктура);
	Модифицированность = Истина;
	
КонецПроцедуры // Форма210_02Расчет()

&НаКлиенте
Процедура Форма210_01ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СсылкаРасшифровки = ВыбранноеЗначение;
	
	ОбластьРасшифровки = ЭтаФорма.ТекущийЭлемент.ТекущаяОбласть;	
	НомерСтроки = Сред(ОбластьРасшифровки.Имя, Найти(ОбластьРасшифровки.Имя, "__") + 2);
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты")
	 ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		 ИмяГруппы = "Страница1";                                                    
	 	 Ячейка  = "Ф210_01ФИОРезидента";	
		 
 	Форма210_01ОбработкаПодбораНаСервере(СсылкаРасшифровки, Ячейка, ИмяГруппы, НомерСтроки); 

	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ФормаВыбораИзКлассификатора") Тогда
		
		Если ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КодыВидовДоходов")  
			ИЛИ ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КодыВидовДокументов") Тогда 			
			Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
				ОбластьРасшифровки.Значение = ВыбранноеЗначение;	
			Иначе
				ОбластьРасшифровки.Значение = ВыбранноеЗначение.КодСтроки;
			КонецЕсли;
			ИмяСтраницы = "Страница" + Прав(ЭтаФорма.ТекущийЭлемент.Имя,1);			
			ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ОбластьРасшифровки.Имя,ОбластьРасшифровки.Значение);						
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Форма210_01ОбработкаПодбораНаСервере(Расшифровка, ИмяЯчейки, ИмяГруппы, НомерСтроки) Экспорт   

	Если ИмяЯчейки = "Ф210_01ФИОРезидента" Тогда
		СсылкаФизЛица = Расшифровка;
		
		ОбластьНаименование = "Ф210_01ФИОРезидента__" + НомерСтроки;		
		ОбластьИИН = "Ф210_01ИИНРезидента__" + НомерСтроки;
		ОбластьКодСтраны = "Ф210_01КодСтраныРезидента__" + НомерСтроки;
		ОбластьНомерРегистрации = "Ф210_01НомерРегистрацииРезидента__" + НомерСтроки;
		ОбластьПризнакРезидентства = "Ф210_01ПризнакРезидентства__" + НомерСтроки;
		
		Если ТипЗнч(Расшифровка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			// Определим сведения о полном ФИО, РНН, ИИН
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("парамФизЛицо", 	СсылкаФизЛица);
			Запрос.УстановитьПараметр("парамПериодПо", 	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			Запрос.УстановитьПараметр("парамНачГода", 	НачалоГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
			Запрос.УстановитьПараметр("парамПустаяДата", '00010101');
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	ВЫБОР
			               |		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL 
			               |			ТОГДА ФизическиеЛица.Наименование
			               |		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
			               |				КОГДА ФИОФизЛиц.Имя <> """"
			               |					ТОГДА "" "" + ФИОФизЛиц.Имя
			               |				ИНАЧЕ """"
			               |			КОНЕЦ + ВЫБОР
			               |				КОГДА ФИОФизЛиц.Отчество <> """"
			               |					ТОГДА "" "" + ФИОФизЛиц.Отчество
			               |				ИНАЧЕ """"
			               |			КОНЕЦ
			               |	КОНЕЦ КАК ФИО,
			               |	ФизическиеЛица.РНН КАК РНН,
			               |	ФизическиеЛица.ИИН КАК ИИН,
			               |	ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.Страна."+ЗаполнениеКодаСтраны+", """") КАК КодСтраны,
			               |	ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НомерНалоговойРегистрацииВСтранеРезидентства, """") КАК НомерНалоговойРегистрацииВСтранеРезидентства,
			               |	ГражданствоФизЛицСрезПоследних.Страна,
			               |	ВЫБОР
			               |		КОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
			               |			ТОГДА ЛОЖЬ
			               |		ИНАЧЕ ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРК, ИСТИНА)
			               |	КОНЕЦ КАК НеЯвляетсяНалоговымРезидентомРК
			               |ИЗ
			               |	(ВЫБРАТЬ
			               |		ФизическиеЛица.Наименование КАК Наименование,
			               |		ФизическиеЛица.РНН КАК РНН,
			               |		ФизическиеЛица.ИдентификационныйКодЛичности КАК ИИН
			               |	ИЗ
			               |		Справочник.ФизическиеЛица КАК ФизическиеЛица
			               |	ГДЕ
			               |		ФизическиеЛица.Ссылка = &парамФизЛицо) КАК ФизическиеЛица
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамПериодПо, ФизЛицо = &парамФизЛицо) КАК ФИОФизЛиц
			               |		ПО (ИСТИНА)
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамПериодПо, ФизЛицо = &парамФизЛицо) КАК ГражданствоФизЛицСрезПоследних
			               |		ПО (ИСТИНА)";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
													  
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.ИИН) Тогда
					СтрокаИИН = Выборка.ИИН;
				Иначе
					СтрокаИИН = "";
					ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа D ""ИИН"",
							  |т.к. значение содержит символы, отличные от цифр'");
							  
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,  Формат(НомерСтроки+1,мФорматНомераСтроки)));
							  
				КонецЕсли;
												
				НомерРегистрации 	= Выборка.НомерНалоговойРегистрацииВСтранеРезидентства;
				ПризнакРезидентства = Выборка.НеЯвляетсяНалоговымРезидентомРК;
				
				Форма210_01ПолеТабличногоДокументаСтраница1.Области[ОбластьПризнакРезидентства].Значение = ?(ПризнакРезидентства, СтруктураРеквизитовФормы.ОтметкаНеРезидентов,СтруктураРеквизитовФормы.ОтметкаРезидентов);				
				Форма210_01ПолеТабличногоДокументаСтраница1.Области[ОбластьНаименование].Значение = Выборка.ФИО;				
				Форма210_01ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение 			= СтрокаИИН;
				Форма210_01ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраны].Значение 		= Выборка.КодСтраны;
				Форма210_01ПолеТабличногоДокументаСтраница2.Области[ОбластьНомерРегистрации].Значение = НомерРегистрации;
				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьНаименование, 		Выборка.ФИО, ,СсылкаФизЛица);				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьИИН, 				Форма210_01ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение, , СсылкаФизЛица);
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьКодСтраны, 			Форма210_01ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраны].Значение, ,СсылкаФизЛица);				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьПризнакРезидентства, ?(ПризнакРезидентства, СтруктураРеквизитовФормы.ОтметкаНЕРезидентов, СтруктураРеквизитовФормы.ОтметкаРезидентов), ,СсылкаФизЛица);

				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница2", ОбластьНомерРегистрации, Форма210_01ПолеТабличногоДокументаСтраница2.Области[ОбластьНомерРегистрации].Значение, , СсылкаФизЛица);
						
			КонецЕсли;
		
		Иначе // если тип Расшифровка "Контрагент"
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("парамКонтрагент", СсылкаФизЛица);
						
			Запрос.Текст = "ВЫБРАТЬ
			               |	Контрагенты.Наименование КАК Контрагент,
			               |	Контрагенты.ИдентификационныйКодЛичности КАК ИИН,
			               |	Контрагенты.РНН,
			               |	ЕСТЬNULL(Контрагенты.СтранаРезидентства."+ЗаполнениеКодаСтраны+","""") КАК КодСтраны,
			               |	Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства,
			               |	Контрагенты.КБЕ
			               |ИЗ
			               |	Справочник.Контрагенты КАК Контрагенты
			               |ГДЕ
			               |	Контрагенты.Ссылка = &парамКонтрагент";
						   
			Выборка = Запрос.Выполнить().Выбрать();
									
			Если Выборка.Следующий() Тогда
											
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.ИИН) Тогда
					СтрокаИИН = Выборка.ИИН;
				Иначе
					СтрокаИИН = "";
					
					
					ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа D ""ИИН"",
							  |т.к. значение содержит символы, отличные от цифр'");
							  
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,  Формат(НомерСтроки+1, мФорматНомераСтроки)));
					
				КонецЕсли;
				
				Если Лев(Выборка.КБе,1) = "2" тогда
					ПризнакРезиденства = Истина;
				Иначе
					ПризнакРезиденства = Ложь;
				КонецЕсли; 				
				
				НомерРегистрации = Выборка.НомерНалоговойРегистрацииВСтранеРезидентства;
				
				Форма210_01ПолеТабличногоДокументаСтраница1.Области[ОбластьНаименование].Значение = Выборка.Контрагент;				
				Форма210_01ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение 			= СтрокаИИН;			
				Форма210_01ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраны].Значение 	= Выборка.КодСтраны;
				Форма210_01ПолеТабличногоДокументаСтраница1.Области[ОбластьПризнакРезидентства].Значение 	= ?(ПризнакРезиденства, СтруктураРеквизитовФормы.ОтметкаНЕРезидентов, СтруктураРеквизитовФормы.ОтметкаРезидентов);
				Форма210_01ПолеТабличногоДокументаСтраница2.Области[ОбластьНомерРегистрации].Значение 	= НомерРегистрации;
				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьНаименование, Выборка.Контрагент,,СсылкаФизЛица);				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьИИН, Форма210_01ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение,,СсылкаФизЛица);
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьПризнакРезидентства, ?(ПризнакРезиденства, СтруктураРеквизитовФормы.ОтметкаНеРезидентов, СтруктураРеквизитовФормы.ОтметкаРезидентов),,СсылкаФизЛица);
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьКодСтраны, Форма210_01ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраны].Значение,,СсылкаФизЛица);
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница2", ОбластьНомерРегистрации, Форма210_01ПолеТабличногоДокументаСтраница2.Области[ОбластьНомерРегистрации].Значение,,СсылкаФизЛица);
				 
			КонецЕсли;  			
		КонецЕсли; 
		
		Форма210_01ПолеТабличногоДокументаСтраница1.Области[ОбластьНаименование].Расшифровка        = СсылкаФизЛица;				
		Форма210_01ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Расшифровка 			    = СсылкаФизЛица;			
		Форма210_01ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраны].Расшифровка 	        = СсылкаФизЛица;
		Форма210_01ПолеТабличногоДокументаСтраница1.Области[ОбластьПризнакРезидентства].Расшифровка = СсылкаФизЛица;
		Форма210_01ПолеТабличногоДокументаСтраница2.Области[ОбластьНомерРегистрации].Расшифровка 	= СсылкаФизЛица;
		
	КонецЕсли;
		
КонецПроцедуры 

&НаСервере
Функция Форма210_01РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
	//должен быть предрасчет
	Запрос =  Новый Запрос;
	Запрос.УстановитьПараметр("парамНалогоплательщик", 		Налогоплательщик);
	Запрос.УстановитьПараметр("парамПериодС", 				НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПериодПо", 				КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПослеПериодПо", 		КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) + 1);
	Запрос.УстановитьПараметр("парамПриход",				ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамРасход",				ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("парамВидСтрокиИсчисление",	Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежаНалог",		Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	Запрос.УстановитьПараметр("парамНеОблагаетсяЦеликом",	Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом);
	Запрос.УстановитьПараметр("парамФизЛицо",				Перечисления.ЮрФизЛицо.ФизЛицо);
	Запрос.УстановитьПараметр("парамПустаяДата",			'00010101');
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", 	мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("парамПогашениеЖилищныхЗаймов", 	Справочники.ВычетыИПН.ПогашениеВознагражденияПоЖилищнымЗаймам);
	Запрос.УстановитьПараметр("парамСтраховыеПремии", 			Справочники.ВычетыИПН.СтраховыеПремииПоДоговорамНакопительногоСтрахования);
	Запрос.УстановитьПараметр("ВключатьОППВВДоходыРаботников",	ВключатьОППВВДоходыРаботников);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());
	
	Если НЕ СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе Тогда
		// Ставка СО
		Запрос.УстановитьПараметр("парамСтавкаСО",			ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)) / 100);
	КонецЕсли;
	
	// если налогоплательщик - ИП, то исключим данные самого индивидуального предпринимателя
	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Налогоплательщик.ИндивидуальныйПредприниматель);
	Иначе
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Неопределено);
	КонецЕсли;
	
	// Определим учетную политику по НУ
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации,
	|	УчетнаяПолитикаНУ.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ
	|ИЗ	
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодПо, Организация = &парамНалогоплательщик) КАК УчетнаяПолитикаНУ
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОтражениеПоПериодуРегистрации 				= Выборка.ОтражениеПоПериодуРегистрации;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Выборка.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ;
	Иначе
		ОтражениеПоПериодуРегистрации 				= Ложь;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Ложь;
	КонецЕсли;
	
	// Выбор данных для заполнения формы расшифровки
	
	ДоходыИНалогиТекст = "
	|// Начисленные и необлагаемые ИПН доходы
	|ВЫБРАТЬ
	|	ИПНСведенияОДоходах.ФизЛицо,
	|	ИПНСведенияОДоходах.СуммаДоходаОборот КАК НачисленоДоходов,";
	Если СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	ИПНСведенияОДоходах.ПримененныйВычетОборот КАК НалоговыеВычеты,";
	Иначе
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,";
	КонецЕсли;
	
	ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
	|	ВЫБОР
	|		КОГДА ИПНСведенияОДоходах.ВидРасчета = &парамПогашениеЖилищныхЗаймов
	|			ТОГДА ИПНСведенияОДоходах.СуммаВычетаОборот
	|		ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) 
	|	КОНЕЦ КАК ПогашениеЖилищныхЗаймов,
	|	ВЫБОР
	|		КОГДА ИПНСведенияОДоходах.ВидРасчета = &парамСтраховыеПремии
	|			ТОГДА ИПНСведенияОДоходах.СуммаВычетаОборот
	|		ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) 
	|	КОНЕЦ КАК СтраховыеПремии,";
	Если СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	ВЫБОР 
		|		// для ИП, адвокатов и частных нотариусов как необлагаемые доходы не показываем
		|		КОГДА ИПНСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты 
		|				И ИПНСведенияОДоходах.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
		|			ТОГДА ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) 
		|		КОГДА ИПНСведенияОДоходах.СпособНалогообложения = &парамНеОблагаетсяЦеликом 
		|			ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот 
		|		КОГДА НЕ(ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН) 
		|			ТОГДА ИПНСведенияОДоходах.СуммаВычетаОборот
		|		ИНАЧЕ ИПНСведенияОДоходах.ПримененнаяЛьготаОборот
		|	КОНЕЦ + ИПНСведенияОДоходах.ПримененнаяЛьготаОборот КАК ДоходыНеОблагаемыеИПН,";
	Иначе
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	ВЫБОР 
		|		// для ИП, адвокатов и частных нотариусов как необлагаемые доходы не показываем
		|		КОГДА ИПНСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты
		|				И ИПНСведенияОДоходах.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
		|			ТОГДА ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) 
		|		КОГДА ИПНСведенияОДоходах.СпособНалогообложения = &парамНеОблагаетсяЦеликом 
		|			ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот 
		|		КОГДА НЕ(ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН) 
		|			ТОГДА ИПНСведенияОДоходах.СуммаВычетаОборот
		|		ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК ДоходыНеОблагаемыеИПН,";
	КонецЕсли;                        	
	ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплаченоДоходов,
	|	ВЫБОР 
	|		// для контрагентов нет возможности зарегистрировать эти доходы как необлагаемые СН
	|		КОГДА ИПНСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты 		
	|			ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот  		
	|		ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК ВыплатыНеОблагаемыеСН,	
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	|			&парамПериодС, 
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			// ИП, авдокатов и частных нотариусов включаем только по требованию
	|			" + ?(НЕ ПризнакИП, "И ВЫБОР
	|										КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	|											ТОГДА НЕ ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|									    ИНАЧЕ ИСТИНА
	|								   КОНЕЦ", "") + "
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель ) КАК ИПНСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                         
	|			ПО (НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) = ВТ_Гражданство.Период)               
	|			 И (ВЫБОР
	|					КОГДА ИПНСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ИПНСведенияОДоходах.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ИПНСведенияОДоходах.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ИПНСведенияОДоходах.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// налоговые взносы, доходы не облагаемые ИПН, ИПН
	|ВЫБРАТЬ
	|	ИПНРасчетыСБюджетом.ФизЛицо,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НачисленоДоходов,";
	Если СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,";
	Иначе
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	ИПНРасчетыСБюджетом.ПримененныйВычет КАК НалоговыеВычеты,";
	КонецЕсли;                        	
	ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПогашениеЖилищныхЗаймов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,";
	Если СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДоходыНеОблагаемыеИПН,";
	Иначе
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	ИПНРасчетыСБюджетом.ПримененнаяЛьгота КАК ДоходыНеОблагаемыеИПН,";
	КонецЕсли;                        	
	ДоходыИНалогиТекст = ДоходыИНалогиТекст + "	
	|	ИПНРасчетыСБюджетом.Налог КАК ИндивидуальныйПодоходныйНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплаченоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыНеОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                
	|		ПО (НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)      	
	|			 И (ВЫБОР
	|					КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ИПНРасчетыСБюджетом.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)
	|ГДЕ
	|	ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик
	|	И ИПНРасчетыСБюджетом.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И ИПНРасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ИПНРасчетыСБюджетом.ВидДвижения = &парамПриход
	|	И ИПНРасчетыСБюджетом.ВидСтроки = &парамВидСтрокиИсчисление
	|	И ИПНРасчетыСБюджетом.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ИПНРасчетыСБюджетом.Активность = ИСТИНА
	|	" + ?(НЕ ПризнакИП, "И ВЫБОР
	|								КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|									ТОГДА НЕ ИПНРасчетыСБюджетом.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|							    ИНАЧЕ ИСТИНА
	|						   КОНЕЦ", "") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// ОПВ
	|ВЫБРАТЬ
	|	ОПВРасчетыСФондами.ФизЛицо,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НачисленоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,
	|	ОПВРасчетыСФондами.Взнос КАК ОбязательныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПогашениеЖилищныхЗаймов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДоходыНеОблагаемыеИПН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплаченоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыНеОблагаемыеСН,
	|	- ОПВРасчетыСФондами.Взнос КАК ВыплатыОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                              
	|		ПО (НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)     
	|			И ОПВРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО                                            	
	|ГДЕ
	|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И ОПВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ОПВРасчетыСФондами.ВидДвижения = &парамПриход
	|	И ОПВРасчетыСФондами.ВидПлатежа = &парамВидПлатежаНалог
	|	И ОПВРасчетыСФондами.ВидСтроки = &парамВидСтрокиИсчисление
	|	И ОПВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель	
	|	И ОПВРасчетыСФондами.Активность = Истина
	|	";
	Если СтруктураРеквизитовФормы.ВедетсяУчетОППВ Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "	
		|ОБЪЕДИНИТЬ ВСЕ 
		|// ОППВ
		|
		|ВЫБРАТЬ
		|	ОППВРасчетыСФондами.ФизЛицо,
		|	ВЫБОР КОГДА &ВключатьОППВВДоходыРаботников Тогда ОППВРасчетыСФондами.Взнос Иначе ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КОНЕЦ КАК НачисленоДоходов, // включаем ОППВ в сумму доходов, если установлен признак ВключатьОППВВДоходыРаботников
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
		|	ОППВРасчетыСФондами.Взнос 	 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПогашениеЖилищныхЗаймов,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,
		|	ВЫБОР КОГДА &ВключатьОППВВДоходыРаботников Тогда ОППВРасчетыСФондами.Взнос Иначе ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) Конец  КАК ДоходыНеОблагаемыеИПН, // включаем ОППВ в сумму доходов, если установлен признак ВключатьОППВВДоходыРаботников
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплаченоДоходов,
		|	ВЫБОР КОГДА &ВключатьОППВВДоходыРаботников Тогда ОППВРасчетыСФондами.Взнос Иначе ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КОНЕЦ КАК ВыплатыНеОблагаемыеСН, // включаем ОППВ в сумму доходов, если установлен признак ВключатьОППВВДоходыРаботников
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыОблагаемыеСН,  
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
		|	ЛОЖЬ КАК ВыплатыПоИЛ
		|ИЗ
		|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                              
		|		ПО (НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)     
		|			И ОППВРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО                                            	
		|ГДЕ
		|	ОППВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И ОППВРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|	И ОППВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		|	И ОППВРасчетыСФондами.ВидДвижения 	= &парамПриход
		|	И ОППВРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
		|	И ОППВРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление
		|	И ОППВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель";
	КонецЕсли;
	
	ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// доходы, облагаемые и необлагаемые СН
	|ВЫБРАТЬ
	|	СНСведенияОДоходах.ФизЛицо,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НачисленоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПогашениеЖилищныхЗаймов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДоходыНеОблагаемыеИПН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплаченоДоходов,
	|	ВЫБОР
	|		КОГДА СНСведенияОДоходах.СпособНалогообложения = &парамНеОблагаетсяЦеликом 
	|			ТОГДА СНСведенияОДоходах.СуммаДоходаОборот
	|		ИНАЧЕ СНСведенияОДоходах.СуммаВычетаОборот
	|	КОНЕЦ КАК ВыплатыНеОблагаемыеСН,
	|	ВЫБОР
	|		КОГДА СНСведенияОДоходах.СпособНалогообложения <> &парамНеОблагаетсяЦеликом
	|			ТОГДА СНСведенияОДоходах.СуммаДоходаОборот - СНСведенияОДоходах.СуммаВычетаОборот
	|		ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК ВыплатыОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ
	|ИЗ
	|	РегистрНакопления.СНСведенияОДоходах.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель ) КАК СНСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                    
	|			ПО (НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ) = ВТ_Гражданство.Период)        
	|			И СНСведенияОДоходах.ФизЛицо = ВТ_Гражданство.ФИО  	
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// социальный налог
	|ВЫБРАТЬ
	|	СНИсчисленный.ФизЛицо,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НачисленоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПогашениеЖилищныхЗаймов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДоходыНеОблагаемыеИПН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплаченоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыНеОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыОблагаемыеСН,
	|	СНИсчисленный.Налог КАК СоциальныеНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ
	|ИЗ
	|	РегистрНакопления.СНИсчисленный КАК СНИсчисленный 
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                        
	|		ПО (НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)        
	|			И СНИсчисленный.ФизЛицо = ВТ_Гражданство.ФИО                                               	
	|ГДЕ
	|	СНИсчисленный.Налогоплательщик = &парамНалогоплательщик
	|	И СНИсчисленный.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И СНИсчисленный.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо 
	|	И СНИсчисленный.ФизЛицо <> &парамИндивидуальныйПредприниматель 	
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// социальные отчисления
	|ВЫБРАТЬ
	|	СОРасчетыСФондами.ФизЛицо,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НачисленоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПогашениеЖилищныхЗаймов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДоходыНеОблагаемыеИПН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплаченоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыНеОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,";
	Если СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,";
	Иначе
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	ВЫБОР
		|		КОГДА &парамСтавкаСО = 0
		|			ТОГДА 0
		|		ИНАЧЕ СОРасчетыСФондами.Отчисление / &парамСтавкаСО
		|	КОНЕЦ КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,";
	КонецЕсли;                        	
	ДоходыИНалогиТекст = ДоходыИНалогиТекст + " 	
	|	СОРасчетыСФондами.Отчисление КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
	|			И СОРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО                                                  	
	|ГДЕ
	|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И СОРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И СОРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
	|	И СОРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление
	|	И СОРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель";	
	
	Если СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "	
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// доходы, облагаемые социальными отчислениями
		|ВЫБРАТЬ
		|	СОСведенияОДоходах.ФизЛицо,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НачисленоДоходов,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПогашениеЖилищныхЗаймов,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДоходыНеОблагаемыеИПН,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплаченоДоходов,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыНеОблагаемыеСН,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыОблагаемыеСН,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,
		|	СОСведенияОДоходах.ОблагаемаяБазаОборот КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
		|	ЛОЖЬ КАК ВыплатыПоИЛ
		|ИЗ
		|	РегистрНакопления.СОСведенияОДоходах.Обороты(
		|			&парамПериодС,
		|			&парамПериодПо,
		|			МЕСЯЦ,
		|			Налогоплательщик = &парамНалогоплательщик
		|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|			И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК СОСведенияОДоходах
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
		|		ПО (НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ) = ВТ_Гражданство.Период)           
		|			И СОСведенияОДоходах.ФизЛицо = ВТ_Гражданство.ФИО";
	КонецЕсли;                        	
	ДоходыИНалогиТекст = ДоходыИНалогиТекст + "                                                  	
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// выплаченные доходы
	|ВЫБРАТЬ
	|	ВыплаченныеДоходы.ФизЛицо,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НачисленоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПогашениеЖилищныхЗаймов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДоходыНеОблагаемыеИПН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
	|	ВыплаченныеДоходы.СуммаДоходаОборот КАК ВыплаченоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыНеОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ
	|ИЗ
	|	РегистрНакопления.ВыплаченныеДоходыРаботникамОрганизацийНУ.Обороты(
	|		    &парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель
	|			" + ?(НЕ ПризнакИП, "И ВЫБОР
	|										КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	|											ТОГДА НЕ ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|									    ИНАЧЕ ИСТИНА
	|								   КОНЕЦ", "") + "
	|			) КАК ВыплаченныеДоходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
	|			ПО (НАЧАЛОПЕРИОДА(ВыплаченныеДоходы.Период, МЕСЯЦ) = ВТ_Гражданство.Период)                        	
	|				И (ВЫБОР
	|						КОГДА ВыплаченныеДоходы.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|							И ВыплаченныеДоходы.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|							ТОГДА ВыплаченныеДоходы.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|						ИНАЧЕ ВыплаченныеДоходы.ФизЛицо = ВТ_Гражданство.ФИО
	|		   		   КОНЕЦ)
	|";
	
	// Если включаем суммы удержаний по исполнительным листам по фактическому перечислению
	Если Не ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// выплата по исполнительным листам
		|ВЫБРАТЬ
		|	ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо КАК ФизЛицо,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НачисленоДоходов,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПогашениеЖилищныхЗаймов,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДоходыНеОблагаемыеИПН,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовРасход + ВзаиморасчетыСПолучателямиИЛ.СуммаСборовРасход КАК ВыплаченоДоходов,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыНеОблагаемыеСН,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыОблагаемыеСН,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
		|	ЛОЖЬ КАК ВыплатыПоИЛ
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Обороты(
		|			&парамПериодС,
		|			&парамПериодПо,
		|			МЕСЯЦ,
		|			Налогоплательщик = &парамНалогоплательщик
		|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|			И ДокументОснование.ФизЛицо <> &парамИндивидуальныйПредприниматель ) КАК ВзаиморасчетыСПолучателямиИЛ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
		|		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.Период, МЕСЯЦ) = ВТ_Гражданство.Период)             
		|				И ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо = ВТ_Гражданство.ФИО              		
		|";
	//Иначе
		// удержания по ИЛ уже находятся в регистр накопления ВыплаченныеДоходыРаботникамОрганизацийНУ
	КонецЕсли;
	
	// Добавим данные по получателям по исполнительным листам
	Если ПризнакАлиментов Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// выплата по исполнительным листам получателям сумм
		|ВЫБРАТЬ
		|	ВзаиморасчетыСПолучателямиИЛ.Получатель КАК ФизЛицо,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовПриход КАК НачисленоДоходов,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПогашениеЖилищныхЗаймов,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовПриход КАК ДоходыНеОблагаемыеИПН,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовРасход КАК ВыплаченоДоходов,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовПриход КАК ВыплатыНеОблагаемыеСН,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыОблагаемыеСН,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
		|	ИСТИНА КАК ВыплатыПоИЛ
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Обороты(
		|			&парамПериодС,
		|			&парамПериодПо,
		|			МЕСЯЦ,
		|			Налогоплательщик = &парамНалогоплательщик
		|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|			И Получатель.ЮрФизЛицо = &парамФизЛицо 
		|			И НЕ ВЫБОР
		|					КОГДА Получатель.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
		|							ИЛИ Получатель.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан) ТОГДА
		|						ИСТИНА
		|					ИНАЧЕ
		|						ЛОЖЬ
		|					КОНЕЦ) КАК ВзаиморасчетыСПолучателямиИЛ				
		|";
	КонецЕсли;
	
	// Свернем строки по физлицам
	ДоходыИНалогиТекст = "
	|ВЫБРАТЬ
	|	ДоходыИНалоги.ФизЛицо КАК ФизЛицо,
	|	ДоходыИНалоги.ВыплатыПоИЛ КАК ВыплатыПоИЛ,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.НачисленоДоходов) 							КАК ЧИСЛО(19, 0)) КАК НачисленоДоходов,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.НалоговыеВычеты) 							КАК ЧИСЛО(19, 0)) КАК НалоговыеВычеты,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ОбязательныеПенсионныеВзносы) 				КАК ЧИСЛО(19, 0)) КАК ОбязательныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ОбязательныеПрофессиональныеПенсионныеВзносы) КАК ЧИСЛО(19, 0)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ДобровольныеПенсионныеВзносы) 				КАК ЧИСЛО(19, 0)) КАК ДобровольныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ПогашениеЖилищныхЗаймов) 					КАК ЧИСЛО(19, 0)) КАК ПогашениеЖилищныхЗаймов,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.СтраховыеПремии) 							КАК ЧИСЛО(19, 0)) КАК СтраховыеПремии,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ДоходыНеОблагаемыеИПН) 					КАК ЧИСЛО(19, 0)) КАК ДоходыНеОблагаемыеИПН,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ИндивидуальныйПодоходныйНалог) 			КАК ЧИСЛО(19, 0)) КАК ИндивидуальныйПодоходныйНалог,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ВыплаченоДоходов) 							КАК ЧИСЛО(19, 0)) КАК ВыплаченоДоходов,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ВыплатыНеОблагаемыеСН) 					КАК ЧИСЛО(19, 0)) КАК ВыплатыНеОблагаемыеСН,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ВыплатыОблагаемыеСН)						КАК ЧИСЛО(19, 0)) КАК ВыплатыОблагаемыеСН,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.СоциальныеНалог) 							КАК ЧИСЛО(19, 0)) КАК СоциальныеНалог,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.РасходыРаботодателяСКоторыхИсчисляютсяСО) 	КАК ЧИСЛО(19, 0)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.СоциальныеОтчисления) 						КАК ЧИСЛО(19, 0)) КАК СоциальныеОтчисления
	|
	|ИЗ
	|	(" + ДоходыИНалогиТекст + ") КАК ДоходыИНалоги
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоходыИНалоги.ФизЛицо,
	|	ДоходыИНалоги.ВыплатыПоИЛ
	|";
	
	// Выберем прочую информацию, относящуюся к физлицам
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТ_ДатыПериодовГода
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря  КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &парамПериодС И &парамПериодПо
	|;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ИтогГражданство.Период КАК Период,
    |	ИтогГражданство.ФИО КАК ФИО,
    |	ИтогГражданство.Страна,
	|	ИтогГражданство.НомерНалоговойРегистрацииВСтранеРезидентства,	
	|	ИтогГражданство.НеЯвляетсяналоговымРезидентомРК
    |ПОМЕСТИТЬ ВТ_Гражданство
    |ИЗ
    |	(ВЫБРАТЬ
    |		ГражданствоФизЛицСрезПоследних.Период КАК Период,
    |		ГражданствоФизЛицСрезПоследних.ФИО КАК ФИО,
    |		ВЫБОР
    |			КОГДА ГражданствоФизЛиц.Страна ЕСТЬ NULL 
    |				ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
    |			ИНАЧЕ ГражданствоФизЛиц.Страна
    |		КОНЕЦ КАК Страна,
	|		ГражданствоФизЛиц.НомерНалоговойРегистрацииВСтранеРезидентства,
	|		ГражданствоФизЛиц.НеЯвляетсяналоговымРезидентомРК
    |	ИЗ
    |		(ВЫБРАТЬ
    |			Периоды.Период КАК Период,
    |			Периоды.ФИО КАК ФИО,
    |			МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСреза
    |		ИЗ
    |			(ВЫБРАТЬ
    |				Периоды.Период КАК Период,
    |				ФизическиеЛица.Ссылка КАК ФИО
    |			ИЗ
    |				ВТ_ДатыПериодовГода КАК Периоды
    |					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
    |					ПО (ИСТИНА)
    |			ГДЕ
    |				ФизическиеЛица.ЭтоГруппа = ЛОЖЬ) КАК Периоды
    |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
    |				ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(ГражданствоФизЛиц.Период, МЕСЯЦ))
    |					И Периоды.ФИО = ГражданствоФизЛиц.ФизЛицо
    |		
    |		СГРУППИРОВАТЬ ПО
    |			Периоды.Период,
    |			Периоды.ФИО) КАК ГражданствоФизЛицСрезПоследних
    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
    |			ПО ГражданствоФизЛицСрезПоследних.ПериодСреза = ГражданствоФизЛиц.Период
    |				И ГражданствоФизЛицСрезПоследних.ФИО = ГражданствоФизЛиц.ФизЛицо
    |	ГДЕ
    |		(НЕ ВЫБОР
    |					КОГДА ГражданствоФизЛиц.Страна ЕСТЬ NULL 
    |						ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
    |					ИНАЧЕ ГражданствоФизЛиц.Страна
    |				КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
    |	
    |	ОБЪЕДИНИТЬ ВСЕ
    |	
    |	ВЫБРАТЬ
    |		Периоды.Период,
    |		Контрагенты.Ссылка,
    |		ВЫБОР
    |			КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
    |				ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
    |			ИНАЧЕ Контрагенты.СтранаРезидентства
    |		КОНЕЦ,
	|		Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства,
	|		ВЫБОР КОГДА Подстрока(Контрагенты.КБЕ,1,1) = ""2"" Тогда Истина иначе Ложь КОНЕЦ
    |	ИЗ
    |		ВТ_ДатыПериодовГода КАК Периоды
    |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
    |			ПО (ИСТИНА)
    |	ГДЕ
    |		Контрагенты.ЭтоГруппа = ЛОЖЬ
    |		И (НЕ ВЫБОР
    |					КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
    |						ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
    |					ИНАЧЕ Контрагенты.СтранаРезидентства
    |				КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))) КАК ИтогГражданство
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	Период,
    |	ФИО;
	|/////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоходыИНалоги.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL ТОГДА ДоходыИНалоги.ФизЛицо.Наименование 
	|		ИНАЧЕ ФИОФИзЛиц.Фамилия + ВЫБОР
	|									КОГДА ФИОФизЛиц.Имя <> """" ТОГДА "" "" + ФИОФизЛиц.Имя
	|									ИНАЧЕ """"
	|								  КОНЕЦ + 
	|								  ВЫБОР
	|									КОГДА ФИОФизЛиц.Отчество <> """" ТОГДА "" "" + ФИОФизЛиц.Отчество
	|									ИНАЧЕ """"
	|								  КОНЕЦ 
	|	КОНЕЦ КАК ФИОФизЛица,
	|	ДоходыИНалоги.ФизЛицо.РНН КАК РНН,
	|	ДоходыИНалоги.ФизЛицо.ИдентификационныйКодЛичности КАК ИИН,
	|	ЕСТЬNULL(ТаблНеГраждане.Страна."+ЗаполнениеКодаСтраны+", """") КАК КодСтраны,
	|	ЕСТЬNULL(ТаблНеГраждане.НомерНалоговойРегистрацииВСтранеРезидентства,"""") КАК НомерРегистрации,
	|	ЕСТЬNULL(ТаблНеГраждане.НеЯвляетсяНалоговымРезидентомРК,Истина) КАК НеЯвляетсяНалоговымРезидентомРК,
	|	ЕСТЬNULL(ПаспортныеДанныеФизЛиц.ДокументВид.КодВидаДокументаВНалоговойОтчетности,"""") КАК КодВидаДокументаВНалоговойОтчетности,
	|	ЕСТЬNULL(ПаспортныеДанныеФизЛиц.ДокументНомер, """") КАК НомерДокумента,
	|	ЕСТЬNULL(ПаспортныеДанныеФизЛиц.ДокументДатаВыдачи, &парамПустаяДата) КАК ДатаДокумента,			
	|	ВЫБОР
	|		КОГДА ДоходыИНалоги.ФизЛицо ССЫЛКА Справочник.Контрагенты И ДоходыИНалоги.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|			И НЕ ДоходыИНалоги.ВыплатыПоИЛ ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИндивидуальныйПредпринимательАдвокатЧастныйНотариус,	
	|	ДоходыИНалоги.НачисленоДоходов КАК НачисленоДоходов,
	|	ДоходыИНалоги.НалоговыеВычеты КАК НалоговыеВычеты,
	|	ДоходыИНалоги.ОбязательныеПенсионныеВзносы КАК ОбязательныеПенсионныеВзносы,
	|	ДоходыИНалоги.ОбязательныеПрофессиональныеПенсионныеВзносы КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ДоходыИНалоги.ДобровольныеПенсионныеВзносы КАК ДобровольныеПенсионныеВзносы,
	|	ДоходыИНалоги.ПогашениеЖилищныхЗаймов КАК ПогашениеЖилищныхЗаймов,
	|	ДоходыИНалоги.СтраховыеПремии КАК СтраховыеПремии,
	|	ДоходыИНалоги.ДоходыНеОблагаемыеИПН КАК ДоходыНеОблагаемыеИПН,
	|	ДоходыИНалоги.ИндивидуальныйПодоходныйНалог КАК ИндивидуальныйПодоходныйНалог,
	|	ДоходыИНалоги.ВыплаченоДоходов КАК ВыплаченоДоходов,
	|	ДоходыИНалоги.ВыплатыНеОблагаемыеСН КАК ВыплатыНеОблагаемыеСН,
	|	ДоходыИНалоги.ВыплатыОблагаемыеСН КАК ВыплатыОблагаемыеСН,
	|	ДоходыИНалоги.СоциальныеНалог КАК СоциальныеНалог,
	|	ДоходыИНалоги.РасходыРаботодателяСКоторыхИсчисляютсяСО КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
	|	ДоходыИНалоги.СоциальныеОтчисления КАК СоциальныеОтчисления
	|
	|ИЗ
	|	(" + ДоходыИНалогиТекст + ") КАК ДоходыИНалоги
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамПериодПо) КАК ФИОФизЛиц
	|		ПО ДоходыИНалоги.ФизЛицо = ФИОФизЛиц.ФизЛицо	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|						ТаблПериодСреза.ПериодСреза КАК Период,
	|						ТаблПериодСреза.ФИО КАК ФизЛицо,
	|						ТаблГражданство.Страна,
	|						ТаблГражданство.НомерНалоговойРегистрацииВСтранеРезидентства,
	|						ТаблГражданство.НеЯвляетсяНалоговымРезидентомРК
	|					  ИЗ
	|						(ВЫБРАТЬ
	|							МАКСИМУМ(ВТ_Гражданство.Период) КАК ПериодСреза,
	|							ВТ_Гражданство.ФИО КАК ФИО
	|						ИЗ
	|							ВТ_Гражданство КАК ВТ_Гражданство
	|                       СГРУППИРОВАТЬ ПО
	|							ВТ_Гражданство.ФИО) КАК ТаблПериодСреза
	|						ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ТаблГражданство
	|							ПО ТаблПериодСреза.ПериодСреза = ТаблГражданство.Период
	|								И ТаблПериодСреза.ФИО = ТаблГражданство.ФИО) КАК ТаблНеГраждане  // выберем последнюю страну нерезидентства	
	|		ПО (ВЫБОР
    |				КОГДА ДоходыИНалоги.ФизЛицо ССЫЛКА Справочник.Контрагенты
    |					И ДоходыИНалоги.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |					ТОГДА ДоходыИНалоги.ФизЛицо.ФизЛицо = ТаблНеГраждане.ФизЛицо
    |				ИНАЧЕ ДоходыИНалоги.ФизЛицо = ТаблНеГраждане.ФизЛицо
    |			  КОНЕЦ)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&парамПериодПо) КАК ПаспортныеДанныеФизЛиц
	|		ПО ДоходыИНалоги.ФизЛицо = ПаспортныеДанныеФизЛиц.ФизЛицо		
	|
	|ГДЕ
	|	(ДоходыИНалоги.НачисленоДоходов <> 0
	|	ИЛИ ДоходыИНалоги.НалоговыеВычеты <> 0
	|	ИЛИ ДоходыИНалоги.ОбязательныеПенсионныеВзносы <> 0
	|	ИЛИ ДоходыИНалоги.ОбязательныеПрофессиональныеПенсионныеВзносы <> 0
	|	ИЛИ ДоходыИНалоги.ДобровольныеПенсионныеВзносы <> 0
	|	ИЛИ ДоходыИНалоги.ПогашениеЖилищныхЗаймов <> 0
	|	ИЛИ ДоходыИНалоги.СтраховыеПремии <> 0
	|	ИЛИ ДоходыИНалоги.ДоходыНеОблагаемыеИПН <> 0
	|	ИЛИ ДоходыИНалоги.ИндивидуальныйПодоходныйНалог <> 0
	|	ИЛИ ДоходыИНалоги.ВыплаченоДоходов <> 0
	|	ИЛИ ДоходыИНалоги.ВыплатыНеОблагаемыеСН <> 0
	|	ИЛИ ДоходыИНалоги.ВыплатыОблагаемыеСН <> 0
	|	ИЛИ ДоходыИНалоги.СоциальныеНалог <> 0
	|	ИЛИ ДоходыИНалоги.РасходыРаботодателяСКоторыхИсчисляютсяСО <> 0
	|	ИЛИ ДоходыИНалоги.СоциальныеОтчисления <> 0)	
	|
	|УПОРЯДОЧИТЬ ПО
	|
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL ТОГДА ДоходыИНалоги.ФизЛицо.Наименование 
	|		ИНАЧЕ ФИОФИзЛиц.Фамилия + ВЫБОР
	|									КОГДА ФИОФизЛиц.Имя <> """" ТОГДА "" "" + ФИОФизЛиц.Имя
	|									ИНАЧЕ """"
	|								  КОНЕЦ + 
	|								  ВЫБОР
	|									КОГДА ФИОФизЛиц.Отчество <> """" ТОГДА "" "" + ФИОФизЛиц.Отчество
	|									ИНАЧЕ """"
	|								  КОНЕЦ 
	|	КОНЕЦ
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() и ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 210.01 за отчетный период отсутствуют...'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	    
    Возврат Результат;
	
КонецФункции // Форма210_01РассчитатьДанныеФормы()

&НаКлиенте
Процедура Форма210_01Расшифровка(ИмяЯчейки)
	
	СтруктураПоФизЛицу = Новый Структура;
	// определим работника
	Если Найти(ИмяЯчейки,"__") > 0 Тогда		
		НомерЯчейки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "__")+ 2));
		
		ОбластьРасшифровки = Форма210_01ПолеТабличногоДокументаСтраница1.Области.Найти("Ф210_01ФИОРезидента__" +  НомерЯчейки);		
		Если ОбластьРасшифровки <> Неопределено Тогда
			Если ЗначениеЗаполнено(ОбластьРасшифровки.Расшифровка) Тогда
				СтруктураПоФизЛицу.Вставить("ФизЛицо", ОбластьРасшифровки.Расшифровка);
				СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);					
			Иначе
				ПоказатьПредупреждение(,НСтр("ru = 'Для формирования расшифровки заполните физическое лицо в графе ""В"" на странице 1.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки не поддерживается."+Символы.ПС+"Расшифровку содержат ячейки формы, выделенные голубым цветом.'"));
		Возврат;
	КонецЕсли;
	
	ПризнакНеРезиденства = Ложь;
	
	ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,, СтруктураПоФизЛицу, "Детальный", ПризнакНеРезиденства);
	
КонецПроцедуры // Форма210_01Расшифровка()

&НаКлиенте
Процедура Форма210_01Расшифровкаобщая()
	
	СтруктураПоФизЛицу = Новый Структура;
	Если ПолучитьЗначениеРеквизита(Налогоплательщик, "ЮрФизЛицо") = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		СтруктураПоФизЛицу.Вставить("ФизЛицо", ПолучитьЗначениеРеквизита(Налогоплательщик, "ИндивидуальныйПредприниматель"));
		СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.НеРавно);											
	КонецЕсли;
	
	ПризнакНеРезиденства = Ложь;
	
	ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,,СтруктураПоФизЛицу,,ПризнакНеРезиденства);	
	
КонецПроцедуры // Форма210_01Расшифровкаобщая()

&НаКлиенте
Процедура РасшифровкаПоРаботнику(Команда)
	
	Попытка
		ИмяЯчейки = ТекущийЭлемент.ТекущаяОбласть.Имя;
	Исключение
		 ПоказатьПредупреждение(, Нстр("ru = 'Активизируйте нужную ячейку отчета для расшифровки.'"));
		Возврат;
	КонецПопытки;
		
	ЦветРасшифровки = Форма210ПолеТабличногоДокументаСтраница1.Области.s_210_00_001_1.ЦветФона;
	                              
	Если Лев(ТекущийЭлемент.Имя,СтрДлина(ТекущийЭлемент.Имя)-1) = "Форма210_01ПолеТабличногоДокументаСтраница"
	 	И ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда
		Если КодФормы = "Форма210_01" Тогда
			Форма210_01Расшифровка(ИмяЯчейки);		
		КонецЕсли;
	Иначе	
		ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки не поддерживается."+Символы.ПС+"Расшифровку содержат ячейки формы, выделенные голубым цветом.'"));
	КонецЕсли;

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для расчета(заполнения) формы 210.02

&НаКлиенте
Процедура Форма210_02ЗаполнитьАвто(Перезаполнить = Ложь) 
	                	
	Состояние("Расчет формы 210.02");		
	
	Форма210_02ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	

	
КонецПроцедуры // Форма210ЗаполнитьАвто()

&НаСервере
Процедура Форма210_02РасчетНаСервере(Инд,Колонка)
	
	Перем СтруктураГруппы;
	
	КодФормы = "Форма210_02";  	
	Индекс = Инд-1;
	
	мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, КодФормы);
		
	//рассчитаем вычисляемые ячейки
	мМногострочнаяСтруктура.Свойство("Страница1" ,СтруктураГруппы);
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
	СтрокаТаблицы = ТаблицаСтрокГруппы.Получить(Индекс);
	
	Для Н = 1 По 3 Цикл            		
		Значение1Мес = ?(СтрокаТаблицы["Ф210_02_00" + Н + "_1"] = Неопределено, 0, СтрокаТаблицы["Ф210_02_00" + Н + "_1"]);
		Значение2Мес = ?(СтрокаТаблицы["Ф210_02_00" + Н + "_2"] = Неопределено, 0, СтрокаТаблицы["Ф210_02_00" + Н + "_2"]);
		Значение3Мес = ?(СтрокаТаблицы["Ф210_02_00" + Н + "_3"] = Неопределено, 0, СтрокаТаблицы["Ф210_02_00" + Н + "_3"]);		
		
		СтрокаТаблицы["Ф210_02_00" + Н + "_4"] = Значение1Мес + Значение2Мес + Значение3Мес;		
		Форма210_02ПолеТабличногоДокументаСтраница1.Области["Ф210_02_00" + Н + "_4__"+ Строка(Инд)].Значение = Значение1Мес + Значение2Мес + Значение3Мес;
	КонецЦикла;

	// на второй странице
	мМногострочнаяСтруктура.Свойство("Страница2" ,СтруктураГруппы);
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
	СтрокаТаблицы = ТаблицаСтрокГруппы.Получить(Индекс);
	
	Для Н = 4 По 5 Цикл  		
		
		Значение1Мес = ?(СтрокаТаблицы["Ф210_02_00" + Н + "_1"] = Неопределено, 0, СтрокаТаблицы["Ф210_02_00" + Н + "_1"]);
		Значение2Мес = ?(СтрокаТаблицы["Ф210_02_00" + Н + "_2"] = Неопределено, 0, СтрокаТаблицы["Ф210_02_00" + Н + "_2"]);
		Значение3Мес = ?(СтрокаТаблицы["Ф210_02_00" + Н + "_3"] = Неопределено, 0, СтрокаТаблицы["Ф210_02_00" + Н + "_3"]);		
		
		СтрокаТаблицы["Ф210_02_00" + Н + "_4"] = Значение1Мес + Значение2Мес + Значение3Мес;		
		Форма210_02ПолеТабличногоДокументаСтраница2.Области["Ф210_02_00" + Н + "_4__"+ Строка(Инд)].Значение = Значение1Мес + Значение2Мес + Значение3Мес;		

	КонецЦикла;
	
	РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, КодФормы,мМногострочнаяСтруктура); 	
	
	Модифицированность = Истина;	

КонецПроцедуры // Форма210_02Расчет()

&НаКлиенте
Процедура Форма210_02ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбластьРасшифровки = ЭтаФорма.ТекущийЭлемент.ТекущаяОбласть;	
	НомерСтроки = Сред(ОбластьРасшифровки.Имя, Найти(ОбластьРасшифровки.Имя, "__") + 2);
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Организации")
	 ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
	 	 ИмяГруппы = "Страница1";                                                    
	 	 Ячейка  = "ФилиалНазв";  
		 
 		Форма210_02ОбработкаПодбораНаСервере(ВыбранноеЗначение, Ячейка, ИмяГруппы, НомерСтроки); 
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Форма210_02ОбработкаПодбораНаСервере(Расшифровка, ИмяЯчейки, ИмяГруппы, НомерСтроки) Экспорт   

	Если ИмяЯчейки = "ФилиалНазв" Тогда
	  			
		ОбластьБИН = "ИИН_БИНФилиала__" + НомерСтроки;
		ОбластьКНОФилиала = "КНОФилиала__" + НомерСтроки;
		ОбластьФилиалНазв = "ФилиалНазв__" + НомерСтроки;
		ОбластьФилиалНазв1 = "ФилиалНазв1__" + НомерСтроки;
		ОбластьФилиалНазв2 = "ФилиалНазв2__" + НомерСтроки;
				
		БИНФилиала = "";
		ФилиалНазв = "";
		Если ТипЗнч(Расшифровка) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			Если СтруктураРеквизитовФормы.мЕстьРеквизитыСП И НЕ Расшифровка.УказыватьРеквизитыГоловнойОрганизации Тогда								
				БИНФилиала = Расшифровка.ИдентификационныйНомер;
				ФилиалНазв = Расшифровка.НаименованиеПолное;
			Иначе				
				БИНФилиала = Расшифровка.Владелец.ИдентификационныйНомер;
				ФилиалНазв = Расшифровка.Наименование;
			КонецЕсли;

		Иначе			
			БИНФилиала = Расшифровка.ИдентификационныйНомер;
			ФилиалНазв = СокрЛП(Расшифровка.НаименованиеПолное);
			Если ПустаяСтрока(ФилиалНазв) Тогда
				ФилиалНазв = Расшифровка.Наименование;
			КонецЕсли;
		КонецЕсли;
		
		НазваниеФилиала = ФилиалНазв;
		ФилиалНазв1 = Сред(НазваниеФилиала, 1, 27);
		ФилиалНазв2 = Сред(НазваниеФилиала, 28, 36);			
			
		ТекНалоговыйКомитет = ПроцедурыНалоговогоУчета.ПолучитьНалоговыйКомитетСтруктурнойЕдиницы(Расшифровка, 
			Налогоплательщик,
			ПолныеПраваПовтИсп.ЗаполнитьИсчислениеНалоговСтруктурныхЕдиниц(),
			Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
				
		Форма210_02ПолеТабличногоДокументаСтраница1.Области[ОбластьБИН].Значение = БИНФилиала;
		Форма210_02ПолеТабличногоДокументаСтраница1.Области[ОбластьФилиалНазв].Значение 	= ФилиалНазв;
		Форма210_02ПолеТабличногоДокументаСтраница1.Области[ОбластьФилиалНазв1].Значение	= ФилиалНазв1;
		Форма210_02ПолеТабличногоДокументаСтраница1.Области[ОбластьФилиалНазв2].Значение 	= ФилиалНазв2;
				
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьБИН, БИНФилиала, ,Расшифровка);
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьФилиалНазв, 	ФилиалНазв, ,Расшифровка);
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьФилиалНазв1, ФилиалНазв1, ,Расшифровка);
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьФилиалНазв2, ФилиалНазв2, ,Расшифровка);
		
		Форма210_02ПолеТабличногоДокументаСтраница1.Области[ОбластьБИН].Расшифровка         = Расшифровка;
		Форма210_02ПолеТабличногоДокументаСтраница1.Области[ОбластьФилиалНазв].Расшифровка 	= Расшифровка;
		Форма210_02ПолеТабличногоДокументаСтраница1.Области[ОбластьФилиалНазв1].Расшифровка	= Расшифровка;
		Форма210_02ПолеТабличногоДокументаСтраница1.Области[ОбластьФилиалНазв2].Расшифровка = Расшифровка;
		
	КонецЕсли;      	
	
КонецПроцедуры 

&НаСервере
Функция Форма210_02РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
	//должен быть предрасчет
	ТаблицаПоМесяцам = Новый ТаблицаЗначений;
	
	ТаблицаПоМесяцам.Колонки.Добавить("СтруктурнаяЕдиница");
	ТаблицаПоМесяцам.Колонки.Добавить("КодСтроки",              ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаПоМесяцам.Колонки.Добавить("МесяцНалоговогоПериода", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаПоМесяцам.Колонки.Добавить("Значение",               ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));

	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("СтруктурнаяЕдиница");
	ТаблицаРезультат.Колонки.Добавить("НалоговыйКомитет");
	ТаблицаРезультат.Колонки.Добавить("Ф210_02_001_1", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф210_02_001_2", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф210_02_001_3", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф210_02_001_4", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	
	ТаблицаРезультат.Колонки.Добавить("Ф210_02_002_1", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф210_02_002_2", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф210_02_002_3", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф210_02_002_4", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	
	ТаблицаРезультат.Колонки.Добавить("Ф210_02_003_1", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф210_02_003_2", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф210_02_003_3", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф210_02_003_4", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	

	ТаблицаРезультат.Колонки.Добавить("Ф210_02_004_1", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф210_02_004_2", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф210_02_004_3", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф210_02_004_4", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ТаблицаРезультат.Колонки.Добавить("Ф210_02_005_1", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф210_02_005_2", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф210_02_005_3", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф210_02_005_4", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	
	ТаблицаРезультат.Индексы.Добавить("СтруктурнаяЕдиница");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамНачГода", 				НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПериодПо", 				КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамНалогоплательщик",	 	Налогоплательщик);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());
	
	// из списка структурных единиц исключим саму головную организацию - налогоплательщика, 
	// т.к. приложение 210.02 составляется только по филиалам/представительствам
	СписокДляОтбора = Новый Массив;
	Для Каждого ЭлементСписка Из мСписокСтруктурныхЕдиниц Цикл
		Если ЭлементСписка.Значение <> Налогоплательщик Тогда
			СписокДляОтбора.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", СписокДляОтбора);
	
	// если налогоплательщик - ИП, то исключим данные самого индивидуального предпринимателя
	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Налогоплательщик.ИндивидуальныйПредприниматель);
	Иначе
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Неопределено);
	КонецЕсли;
		
	МТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МТ;
	// определим гражданство по периодам
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Период
				   |ПОМЕСТИТЬ ВТ_ДатыПериодовГода
				   |ИЗ
				   |	РегистрСведений.ДанныеПроизводственногоКалендаря  КАК ДанныеПроизводственногоКалендаря
				   |ГДЕ
				   |	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
				   |	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &парамНачГода И &парамПериодПо
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГражданствоФизЛицСрезПоследних.Период КАК Период,
	               |	ГражданствоФизЛицСрезПоследних.ФИО КАК ФИО,
	               |	ВЫБОР
	               |		КОГДА ГражданствоФизЛиц.Страна ЕСТЬ NULL 
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	               |		ИНАЧЕ ГражданствоФизЛиц.Страна
	               |	КОНЕЦ КАК Страна				   
	               |ПОМЕСТИТЬ ВТ_Гражданство
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Периоды.Период КАК Период,
	               |		Периоды.ФИО КАК ФИО,
	               |		МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСреза
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			Периоды.Период КАК Период,
	               |			ФизическиеЛица.Ссылка КАК ФИО
	               |		ИЗ
	               |			ВТ_ДатыПериодовГода КАК Периоды
	               |				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |				ПО (ИСТИНА)
	               |		ГДЕ
	               |			ФизическиеЛица.ЭтоГруппа = ЛОЖЬ) КАК Периоды
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	               |			ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(ГражданствоФизЛиц.Период, МЕСЯЦ))
	               |				И Периоды.ФИО = ГражданствоФизЛиц.ФизЛицо
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		Периоды.Период,
	               |		Периоды.ФИО) КАК ГражданствоФизЛицСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	               |		ПО ГражданствоФизЛицСрезПоследних.ПериодСреза = ГражданствоФизЛиц.Период
	               |			И ГражданствоФизЛицСрезПоследних.ФИО = ГражданствоФизЛиц.ФизЛицо
	               |ГДЕ
	               |	(НЕ ВЫБОР
	               |			КОГДА ГражданствоФизЛиц.Страна ЕСТЬ NULL 
	               |				ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	               |			ИНАЧЕ ГражданствоФизЛиц.Страна
	               |		КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
				   |	
				   |ОБЪЕДИНИТЬ ВСЕ
				   |	
				   |ВЫБРАТЬ
				   |	Периоды.Период,
				   |	Контрагенты.Ссылка,
				   |	ВЫБОР
				   |		КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
				   |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
				   |		ИНАЧЕ Контрагенты.СтранаРезидентства
				   |	КОНЕЦ
				   |ИЗ
				   |	ВТ_ДатыПериодовГода КАК Периоды
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
				   |		ПО (ИСТИНА)
				   |ГДЕ
				   |	Контрагенты.ЭтоГруппа = ЛОЖЬ
				   |	И НЕ (ВЫБОР
				   |			КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
				   |				ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
				   |			ИНАЧЕ Контрагенты.СтранаРезидентства
    			   |		КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Период,
	               |	ФИО";
				   
	Запрос.Выполнить();
		
	// Сумма индивидуального подоходного налога, подлежащего перечислению
	
	Запрос.Текст = "
	|// ИПН, подлежащий перечислению
	|ВЫБРАТЬ
	|	ИПНРасчетыСБюджетом.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(ИПНРасчетыСБюджетом.Налог) КАК СуммаИПНПодлежащегоПеречислению
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                
	|		ПО (НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ) = ВТ_Гражданство.Период)      	
	|			И (ВЫБОР
    |				КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
    |						И ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |					ТОГДА ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
    |				ИНАЧЕ ИПНРасчетыСБюджетом.ФизЛицо = ВТ_Гражданство.ФИО
    |			КОНЕЦ)
	|ГДЕ
	|	ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик
	|	И ИПНРасчетыСБюджетом.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И ИПНРасчетыСБюджетом.Период МЕЖДУ &парамНачГода И &парамПериодПо
	|	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|	И ИПНРасчетыСБюджетом.ФизЛицо <> &парамИндивидуальныйПредприниматель	
	|	И (ВЫБОР
	|		КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|			ТОГДА НЕ ИПНРасчетыСБюджетом.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|		ИНАЧЕ ИСТИНА
	|	  КОНЕЦ)
	|	И ИПНРасчетыСБюджетом.Активность = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПНРасчетыСБюджетом.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ)
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
		НоваяСтрока.КодСтроки = "Ф210_02_001";
		НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение = Выборка.СуммаИПНПодлежащегоПеречислению;
	
	КонецЦикла;

	// Сумма обязательных пенсионных взносов, подлежащих перечислению
	
	Запрос.Текст = "
	|// ОПВ, подлежащие перечислению
	|ВЫБРАТЬ
	|	ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(ОПВПодлежитПеречислениюВФонды.Взнос) КАК СуммаОПВПодлежащихПеречислению
	|ИЗ                         
	|	РегистрНакопления.ОПВПодлежитПеречислениюВФонды КАК ОПВПодлежитПеречислениюВФонды
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ) = ВТ_Гражданство.Период)               
	|			И ОПВПодлежитПеречислениюВФонды.ФизЛицо = ВТ_Гражданство.ФИО                                      	
	|ГДЕ
	|	ОПВПодлежитПеречислениюВФонды.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И ОПВПодлежитПеречислениюВФонды.Период МЕЖДУ &парамНачГода И &парамПериодПо
	|	И ОПВПодлежитПеречислениюВФонды.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|	И ОПВПодлежитПеречислениюВФонды.ФизЛицо <> &парамИндивидуальныйПредприниматель	
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
		НоваяСтрока.КодСтроки = "Ф210_02_002";
		НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение = Выборка.СуммаОПВПодлежащихПеречислению;
	
	КонецЦикла;
	
	// Сумма ОППВ
	Если СтруктураРеквизитовФормы.ВедетсяУчетОППВ Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОППВРасчетыСФондами.СтруктурнаяЕдиница,
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ОППВРасчетыСФондами.Взнос) КАК ОППВ
		|ИЗ
		|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
		|		ПО (НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
		|			И ОППВРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО                                                  	
		|ГДЕ
		|	ОППВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И ОППВРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|	И ОППВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамНачГода И &парамПериодПо
		|	И ОППВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОППВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ОППВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ОППВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель	
		|
		|СГРУППИРОВАТЬ ПО
		|	ОППВРасчетыСФондами.СтруктурнаяЕдиница,
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
			НоваяСтрока.КодСтроки = "Ф210_02_003";
			НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение = Выборка.ОППВ;
			
		КонецЦикла;
	КонецЕсли;
	// Сумма исчисленного социального налога
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СНИсчисленный.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(СНИсчисленный.Налог) КАК Налог
	|ИЗ
	|	РегистрНакопления.СНИсчисленный КАК СНИсчисленный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                        
	|		ПО (НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)        
	|			И СНИсчисленный.ФизЛицо = ВТ_Гражданство.ФИО                                               	
	|ГДЕ
	|	СНИсчисленный.МесяцНалоговогоПериода МЕЖДУ &парамНачГода И &парамПериодПо
	|	И СНИсчисленный.Налогоплательщик = &парамНалогоплательщик
	|	И СНИсчисленный.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)	
	|
	|СГРУППИРОВАТЬ ПО
	|	СНИсчисленный.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ)";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
		НоваяСтрока.КодСтроки = "Ф210_02_004";
		НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение = Выборка.Налог;
	
	КонецЦикла;

	// Сумма социальных отчислений

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СОРасчетыСФондами.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(СОРасчетыСФондами.Отчисление) КАК СоциальныеОтчисления
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
	|			И СОРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО                                                  	
	|ГДЕ
	|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И СОРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамНачГода И &парамПериодПо
	|	И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И СОРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель	
	|
	|СГРУППИРОВАТЬ ПО
	|	СОРасчетыСФондами.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
		НоваяСтрока.КодСтроки = "Ф210_02_005";
		НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение = Выборка.СоциальныеОтчисления;
	
	КонецЦикла;

	// отсортируем строки по структурной единице
	ТаблицаПоМесяцам.Сортировать("СтруктурнаяЕдиница, КодСтроки");
	
	// рассчитываем итоговые графы за квартал и с начала года
	
	Начало1Мес = НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Начало2Мес = ДобавитьМесяц(Начало1Мес, 1);
	Начало3Мес = ДобавитьМесяц(Начало2Мес, 1);
	
	Для Каждого СтрокаТЗ Из ТаблицаПоМесяцам Цикл
		
		// округлим месячную сумму
		СтрокаТЗ.Значение = Окр(СтрокаТЗ.Значение);
		
		СтрокаРезультат = ТаблицаРезультат.Найти(СтрокаТЗ.СтруктурнаяЕдиница, "СтруктурнаяЕдиница");
		Если СтрокаРезультат = Неопределено Тогда
			СтрокаРезультат = ТаблицаРезультат.Добавить();
			СтрокаРезультат.СтруктурнаяЕдиница = СтрокаТЗ.СтруктурнаяЕдиница;
			СтрокаРезультат.НалоговыйКомитет = ПроцедурыНалоговогоУчета.ПолучитьНалоговыйКомитетСтруктурнойЕдиницы(СтрокаТЗ.СтруктурнаяЕдиница,
																													Налогоплательщик,
																													ПолныеПраваПовтИсп.ЗаполнитьИсчислениеНалоговСтруктурныхЕдиниц(),
																													Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
		КонецЕсли;
		
		ИмяГрафы = СтрокаТЗ.КодСтроки;
		
		Если СтрокаТЗ.МесяцНалоговогоПериода = Начало1Мес Тогда
			СтрокаРезультат[ИмяГрафы + "_1"] = СтрокаРезультат[ИмяГрафы + "_1"] + СтрокаТЗ.Значение;
		ИначеЕсли СтрокаТЗ.МесяцНалоговогоПериода = Начало2Мес Тогда
			СтрокаРезультат[ИмяГрафы + "_2"] = СтрокаРезультат[ИмяГрафы + "_2"] + СтрокаТЗ.Значение;
		ИначеЕсли СтрокаТЗ.МесяцНалоговогоПериода = Начало3Мес Тогда
			СтрокаРезультат[ИмяГрафы + "_3"] = СтрокаРезультат[ИмяГрафы + "_3"] + СтрокаТЗ.Значение;
		КонецЕсли;
		
		// квартальные итоги
		Если СтрокаТЗ.МесяцНалоговогоПериода >= Начало1Мес Тогда
			СтрокаРезультат[ИмяГрафы + "_4"] = СтрокаРезультат[ИмяГрафы + "_4"] + СтрокаТЗ.Значение;
		КонецЕсли;  				
		
	КонецЦикла;
	
	Если ТаблицаРезультат.Количество() = 0 и ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 210.02 за отчетный период отсутствуют...'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
					 	
	Возврат ТаблицаРезультат;		 
	
КонецФункции // Форма210_02РассчитатьДанныеФормы()
 
&НаСервере
Процедура Форма210_02ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма210_02";
	 	
		
	ТекущаяСтраница = 1;
	
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы",ТекИмяФормы));
		
	Если СтрокаФормы <> Неопределено Тогда	
		СтрокаФормы.ВсегоСтраниц = 1;
	КонецЕсли;                       	
	
	Если Не Перезаполнить Тогда  
		Текст = НСтр("ru = 'Расчет приложения 210.02'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли;      

	ТаблицаРезультат = Форма210_02РассчитатьДанныеФормы(Истина);	
	
	СтруктураРеквизитовФормы.КоличествоСтруктурныхЕдиницБезНалогоплательщика = 0;
	
	СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, ТекИмяФормы);
	
	Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл			
		НомерСтроки = 2;
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
		ТаблицаСтрокГруппы.Очистить();
		
		Для Каждого СтрокаРезультат Из ТаблицаРезультат Цикл
			
			// заполняем данные строки в форме отчета
			Элемент = ТаблицаСтрокГруппы.Добавить();   			 
			Если ИмяГруппы = "Страница1" Тогда
				//Так должны заполнять по отдельности значения выборки 
				//для каждого листа			
				СтруктураРеквизитовФормы.КоличествоСтруктурныхЕдиницБезНалогоплательщика = СтруктураРеквизитовФормы.КоличествоСтруктурныхЕдиницБезНалогоплательщика + 1;										
				БИНФилиала = "";
				ФилиалНазв = "";
				Если ТипЗнч(СтрокаРезультат.СтруктурнаяЕдиница) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
					Если СтруктураРеквизитовФормы.мЕстьРеквизитыСП И НЕ СтрокаРезультат.СтруктурнаяЕдиница.УказыватьРеквизитыГоловнойОрганизации Тогда										
						БИНФилиала = СтрокаРезультат.СтруктурнаяЕдиница.ИдентификационныйНомер;
						ФилиалНазв = СтрокаРезультат.СтруктурнаяЕдиница.НаименованиеПолное;
					Иначе							
						БИНФилиала = СтрокаРезультат.СтруктурнаяЕдиница.Владелец.ИдентификационныйНомер;
						ФилиалНазв = СтрокаРезультат.СтруктурнаяЕдиница.Наименование;
					КонецЕсли; 
				Иначе						
					БИНФилиала = СтрокаРезультат.СтруктурнаяЕдиница.ИдентификационныйНомер;
					ФилиалНазв = СокрЛП(СтрокаРезультат.СтруктурнаяЕдиница.НаименованиеПолное);
					Если ПустаяСтрока(ФилиалНазв) Тогда
						ФилиалНазв = СтрокаРезультат.СтруктурнаяЕдиница.Наименование;
					КонецЕсли;
				КонецЕсли;
				Элемент.ИИН_БИНФилиала = БИНФилиала;
				Элемент.ФилиалНазв = ФилиалНазв;
				
				НазваниеФилиала = ФилиалНазв;
				НачПозиция = 1;
				ДлинаСтроки = 27;
				Для Шаг = 1 По 2 Цикл
					НазФилиала = Сред(НазваниеФилиала, НачПозиция, ДлинаСтроки); 
					Элемент["ФилиалНазв"+Шаг] = НазФилиала;
					НачПозиция =НачПозиция + ДлинаСтроки;
					ДлинаСтроки = 36;
				КонецЦикла;
				
				РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "ИИН_БИНФилиала",  СтрокаРезультат.СтруктурнаяЕдиница);
				РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "ФилиалНазв",  СтрокаРезультат.СтруктурнаяЕдиница);
				РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "ФилиалНазв1",  СтрокаРезультат.СтруктурнаяЕдиница);
				РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "ФилиалНазв2",  СтрокаРезультат.СтруктурнаяЕдиница);
				
				Для Н = 1 По 4 Цикл						
					Элемент["Ф210_02_001_" + Н] = СтрокаРезультат["Ф210_02_001_" + Н];
					Элемент["Ф210_02_002_" + Н] = СтрокаРезультат["Ф210_02_002_" + Н];
					Элемент["Ф210_02_003_" + Н] = СтрокаРезультат["Ф210_02_003_" + Н];
				КонецЦикла;
				
				
			ИначеЕсли ИмяГруппы = "Страница2" Тогда
				
				Для Н = 1 По 4 Цикл						
					
					Элемент["Ф210_02_004_" + Н] = СтрокаРезультат["Ф210_02_004_" + Н];
					Элемент["Ф210_02_005_" + Н] = СтрокаРезультат["Ф210_02_005_" + Н];
				КонецЦикла;
				
			КонецЕсли;
			НомерСтроки = НомерСтроки + 1;	           			 
		КонецЦикла; 
		
	КонецЦикла;	 
	
	РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы,СтруктураФормы); 	 
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма,ТекИмяФормы);	
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма,ТекИмяФормы,Перезаполнить);		
	
	РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтаФорма);
	
	
КонецПроцедуры // Форма210_02ЗаполнитьАвто()

&НаКлиенте
Процедура Форма210_02Расшифровка(ИмяЯчейки)
	
	// определим, по какой структурной единице заполнено приложение
	ОбластиДокумента = Форма210_02ПолеТабличногоДокументаСтраница1.Области;
	ИскомаяОбласть = Неопределено;
	Ячейка = "";
	НомерСтроки = 0;
	Для Каждого ТекОбласть Из ОбластиДокумента Цикл
		Если Найти(ТекОбласть.Имя, "ФилиалНазв") <> 0 Тогда
			ИскомаяОбласть = ТекОбласть;
			Ячейка = Лев(ТекОбласть.Имя, 10); // СтрДлина("ФилиалНазв") = 10
			НомерСтроки = Сред(ТекОбласть.Имя, Найти(ТекОбласть.Имя, "__") + 2);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИскомаяОбласть = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИскомаяОбласть.Расшифровка) Тогда
		СтруктурнаяЕдиница = ИскомаяОбласть.Расшифровка;
		СписокСтруктурныхЕдиниц = Новый СписокЗначений();
		СписокСтруктурныхЕдиниц.Добавить(СтруктурнаяЕдиница);		
	Иначе
		
		СписокСтруктурныхЕдиниц = Неопределено;		
	КонецЕсли;

	// определим даты расшифровки
	
	ДатаНачала    = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ДатаОкончания = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
		             
	Если Лев(ИмяЯчейки,13) = "Ф210_02_001_1" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф210_02_002_1" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф210_02_003_1" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф210_02_004_1" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф210_02_005_1" Тогда // месяц 1
		ДатаНачала = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
		ДатаОкончания = КонецМесяца(ДатаНачала);
	ИначеЕсли Лев(ИмяЯчейки,13) = "Ф210_02_001_2" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф210_02_002_2" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф210_02_003_2" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф210_02_004_2" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф210_02_005_2" Тогда // месяц 2
		ДатаНачала = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,1);
		ДатаОкончания = КонецМесяца(ДатаНачала);
	ИначеЕсли Лев(ИмяЯчейки,13) = "Ф210_02_001_3" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф210_02_002_3" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф210_02_003_3" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф210_02_004_3" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф210_02_005_3" Тогда // месяц 3
		ДатаНачала = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,2);
		ДатаОкончания = КонецМесяца(ДатаНачала);
	ИначеЕсли Лев(ИмяЯчейки,13) = "Ф210_02_001_4" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф210_02_002_4" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф210_02_003_4" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф210_02_004_4" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф210_02_005_4" Тогда // весь период
		ДатаНачала    = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
		ДатаОкончания = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;  	
	КонецЕсли;

	 СтруктураПоФизЛицу = Новый Структура;
	Если ПолучитьЗначениеРеквизита(Налогоплательщик, "ЮрФизЛицо") = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		СтруктураПоФизЛицу.Вставить("ФизЛицо", ПолучитьЗначениеРеквизита(Налогоплательщик, "ИндивидуальныйПредприниматель"));
		СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.НеРавно);									
	КонецЕсли;
	
	ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(ДатаНачала, ДатаОкончания, СписокСтруктурныхЕдиниц, СтруктураПоФизЛицу,,Неопределено);
	
КонецПроцедуры // Форма210_02Расшифровка()

/////////////////////////////////////////////////////////////////////////////////////
// Выгрузка в ХМL 

&НаСервере
Функция ВыгрузитьВXMLНаСервере(ВыдаватьСообщение = Ложь)
		
	Возврат РегламентированнаяОтчетность.ВыгрузитьОтчетВXMLДляСОНО(ЭтотОбъект, ВыдаватьСообщение);	

КонецФункции

/////////////////////////////////////////////////////////////////////////////////////
// Выгрузка в ХМL приложения 210.02

&НаСервере
Функция ВыгрузитьОтчетВXMLНаСервере(ИмяФайла, ВыдаватьСообщение = Ложь, ВыгружатьВсеПриложения = Ложь)
	
	мВыбраннаяФорма = "Форма2102017Пр2";
	
	СоответствиеФайлов = Новый Соответствие;
	
	ВыгрузитьОтчетВXMLДляСОНОПриложение(ИмяФайла, ЭтотОбъект, СоответствиеФайлов,ВыдаватьСообщение, ВыгружатьВсеПриложения);
	
	мВыбраннаяФорма = "Форма2102017Кв1";
	
	Возврат ПоместитьВоВременноеХранилище(СоответствиеФайлов); 

КонецФункции

&НаСервере
Процедура ВыгрузитьОтчетВXMLДляСОНОПриложение(ИмяФайла, Объект, СоответствиеФайлов,  ВыдаватьСообщение = Истина, ВыгружатьВсеПриложения = Истина) Экспорт

	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтаФорма,КодФормы);
	
	Префикс = Прав(Объект.мВыбраннаяФорма,7);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	// запишем общие атрибуты (code, version) и создадим элемент form
	Запись = Новый ЗаписьXML;		
	Запись.ОткрытьФайл(ИмяВременногоФайла,"UTF-8");
	Запись.ЗаписатьОбъявлениеXML();
	
	// Запишем корневой элемент
	Запись.ЗаписатьНачалоЭлемента("fno");

	МакетВыгрузки = Объект.РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("ВыгрузкаВXML");

	ТаблОбщиеРеквизиты = Новый ТаблицаЗначений;
	ТаблОбщиеРеквизиты.Колонки.Добавить("ИмяАтрибута");
	ТаблОбщиеРеквизиты.Колонки.Добавить("ЗначениеАтрибута");
	
	ОбластьОбщихРеквизитов = МакетВыгрузки.Область("ОбщиеРеквизиты" + Префикс);
	Для Ном = ОбластьОбщихРеквизитов.Верх По ОбластьОбщихРеквизитов.Низ Цикл
		Строка = ТаблОбщиеРеквизиты.Добавить();
		Строка.ИмяАтрибута 		  = СокрП(МакетВыгрузки.Область(Ном, 1).Текст);
		Строка.ЗначениеАтрибута   = СокрП(МакетВыгрузки.Область(Ном, 2).Текст);		
	КонецЦикла;                           	
	
	// Запишем атрибуты корневого элемента
	Для Каждого Строка Из ТаблОбщиеРеквизиты Цикл
		Запись.ЗаписатьАтрибут(Строка.ИмяАтрибута,Строка.ЗначениеАтрибута);			  
	КонецЦикла;
	
	// создадим таблицу для выгрузки
	ТаблицаВыгрузки = Новый ТаблицаЗначений;
	ТаблицаВыгрузки.Колонки.Добавить("Форма");
	ТаблицаВыгрузки.Колонки.Добавить("Страница");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяАтрибута");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяЯчейки");
	ТаблицаВыгрузки.Колонки.Добавить("КоличествоROW");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяФормы");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяЛиста");
	ТаблицаВыгрузки.Колонки.Добавить("Отображение");
	
	ТаблицаВыгрузки.Колонки.Добавить("КодФормы");
	ТаблицаВыгрузки.Колонки.Добавить("Выгружать");
	ТаблицаВыгрузки.Колонки.Добавить("Многострочность");
	ТаблицаВыгрузки.Колонки.Добавить("ЗаголовокФормы"); 
	ТаблицаВыгрузки.Колонки.Добавить("КоличествоНаЛисте");    
	ТаблицаВыгрузки.Колонки.Добавить("Значение");    
	
	ОбластьВыгрузки = МакетВыгрузки.Область("Выгрузка" + Префикс);
	СписокФормБезИерархии = РеквизитФормыВЗначение("мСписокФормБезИерархии");
	ТекущееИмяФормы = Неопределено;
	Для Ном = ОбластьВыгрузки.Верх По ОбластьВыгрузки.Низ Цикл
		Строка = ТаблицаВыгрузки.Добавить();
		Строка.Форма 	       = СокрП(МакетВыгрузки.Область(Ном, 1).Текст);
		Строка.Страница        = СокрП(МакетВыгрузки.Область(Ном, 2).Текст);		
		Строка.ИмяАтрибута     = СокрП(МакетВыгрузки.Область(Ном, 3).Текст);		
		Строка.ИмяЯчейки       = СокрП(МакетВыгрузки.Область(Ном, 4).Текст);		
		Строка.КоличествоROW   = СокрП(МакетВыгрузки.Область(Ном, 5).Текст);		
		Строка.ИмяФормы        = СокрП(МакетВыгрузки.Область(Ном, 6).Текст);		
		Строка.ИмяЛиста        = СокрП(МакетВыгрузки.Область(Ном, 7).Текст);		
		Строка.Отображение     = СокрП(МакетВыгрузки.Область(Ном, 8).Текст);		
		НовоеИмяФормы = Строка.ИмяФормы;
		
		НовоеИмяФормы = Строка.ИмяФормы;
		Если НовоеИмяФормы <> ТекущееИмяФормы Тогда
			Форма = СписокФормБезИерархии.Строки.Найти(Строка.ИмяФормы, "ИмяФормы");
		КонецЕсли;
		
		Если Форма <> Неопределено Тогда
			Строка.КодФормы  		 = Форма.КодФормы;
			Строка.Выгружать  		 = Форма.Выгружать;
			Строка.Многострочность   = Форма.Многострочность;
			Строка.ЗаголовокФормы    = Форма.ЗаголовокФормы;
			Строка.КоличествоНаЛисте = Форма.КоличествоНаЛисте;
			Строка.Значение  		 = Форма.Значение;			
		КонецЕсли;
		ТекущееИмяФормы = Строка.ИмяФормы;
	КонецЦикла;                           	
	
	// выгрузка в XML 
	КоличествоСтрокВТаблице = ТаблицаВыгрузки.Количество();
	НомерСтроки = 0;
	
	ТекущаяФорма = Неопределено;
	ТекущаяСтраницаПриложения = Неопределено;
	
	Пока Истина Цикл
		Если НомерСтроки >= КоличествоСтрокВТаблице Тогда
			Прервать;
		КонецЕсли; 
		ВыгрузитьСтрокуВXMLПриложение(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки, ТекущаяФорма, ТекущаяСтраницаПриложения);			
		НомерСтроки = НомерСтроки + 1;                                                                                      		
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();	// </sheet>
	Запись.ЗаписатьКонецЭлемента();	// </sheetGroup>
	Запись.ЗаписатьКонецЭлемента();	// </form> 
	
	Запись.ЗаписатьКонецЭлемента(); // fno
		
	Запись.Закрыть();
	
	// данный текст модуля добавлен для совместимости с СОНО (в СОНО для UTF-8 нет BOM поля)
	ТекстДок = Новый ТекстовыйДокумент;
    ТекстДок.Прочитать(ИмяВременногоФайла,"windows-1251");
    Строка = ТекстДок.ПолучитьСтроку(1);
    ТекстДок.ЗаменитьСтроку(1,Прав(Строка,СтрДлина(Строка)-3));
	ТекстДок.Записать(ИмяВременногоФайла,"windows-1251");	
	АдресХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла));
	
	Если СтруктураРеквизитовФормы.ШагФорм > 1 Тогда		
		НазваниеФайла 	=  Лев(ИмяФайла,СтрДлина(ИмяФайла)-1);
		ИмяКлюча = НазваниеФайла + (СтруктураРеквизитовФормы.ШагФорм);	
	Иначе
		ИмяКлюча = ИмяФайла;
	КонецЕсли;           	
	СоответствиеФайлов.Вставить(ИмяКлюча, АдресХранилища);
	        	
	Если  ВыгружатьВсеПриложения И СтруктураРеквизитовФормы.ШагФорм <= СтруктураРеквизитовФормы.ВсегоСтр Тогда 			
		ВыгрузитьОтчетВXMLДляСОНОПриложение(ИмяФайла,ЭтотОбъект, СоответствиеФайлов, Ложь, ВыгружатьВсеПриложения);
	КонецЕсли;
	
КонецПроцедуры // ВыгрузкаОтчетаВXMLДляСОНО()

&НаСервере
Процедура ВыгрузитьСтрокуВXMLПриложение(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки, ТекущаяФорма = Неопределено, ТекущаяСтраницаПриложения = Неопределено)
	
	СтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки);
	НоваяФорма = СтрокаВыгрузки.Форма; 
	НоваяСтраница = СтрокаВыгрузки.Страница; 
	
	Если ТекущаяФорма <> Неопределено И НоваяФорма <> ТекущаяФорма Тогда
	   Запись.ЗаписатьКонецЭлемента();			// </sheet>
	КонецЕсли;
	Если НЕ НоваяФорма = ТекущаяФорма Тогда		
		Если НЕ ТекущаяФорма = Неопределено Тогда
			Запись.ЗаписатьКонецЭлемента();			// </sheetGroup>
			Запись.ЗаписатьКонецЭлемента();			// </form>
		КонецЕсли;
		Запись.ЗаписатьНачалоЭлемента("form");
		//Состояние("Выгружается форма " + НоваяФорма);
		Запись.ЗаписатьАтрибут("name",СтрокаВыгрузки.Форма);
		Запись.ЗаписатьНачалоЭлемента("sheetGroup");
	КонецЕсли;                                       	
	Если НЕ НоваяСтраница = ТекущаяСтраницаПриложения Тогда
		Если ТекущаяФорма <> Неопределено И НоваяФорма <> ТекущаяФорма Тогда
			// ничего не делаем
	    ИначеЕсли НЕ ТекущаяСтраницаПриложения = Неопределено Тогда		
			Запись.ЗаписатьКонецЭлемента();			// </sheet>
		КонецЕсли;
		Запись.ЗаписатьНачалоЭлемента("sheet");
		Запись.ЗаписатьАтрибут("name",СтрокаВыгрузки.Страница);
	КонецЕсли;
	
	Если СтрокаВыгрузки.Многострочность <> Неопределено И СтрокаВыгрузки.Многострочность = 1 Тогда 
		ВыгрузитьМногострочнуюФормуПриложение(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки);
	// проверим многострочное ли значение
	ИначеЕсли ЗначениеЗаполнено(СтрокаВыгрузки.КоличествоROW) И СтрокаВыгрузки.КоличествоROW <> "0" Тогда  // для обычных форм
		// если в обычной форме встретилась многострочность 
		КоличествоПовторений = Число(СтрокаВыгрузки.КоличествоROW);
		Для Н = 1 По КоличествоПовторений Цикл 				
			Запись.ЗаписатьНачалоЭлемента("row");
			СтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки);
			Если Н = 1 Тогда
				ТаблицаМногострочныхТегов = ТаблицаВыгрузки.СкопироватьКолонки();
				НоваяСтрока = ТаблицаМногострочныхТегов.Добавить();			
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыгрузки);
				
				// Проверим многострочная ли следующая строка
				СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
				Пока ЗначениеЗаполнено(СледСтрокаВыгрузки.КоличествоROW) И СледСтрокаВыгрузки.КоличествоROW <> "0" Цикл
					НомерСтроки = НомерСтроки+1;
					НоваяСтрока = ТаблицаМногострочныхТегов.Добавить();			
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СледСтрокаВыгрузки);
					СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
				КонецЦикла;   				
			КонецЕсли;
			Для Каждого МногСтрока Из ТаблицаМногострочныхТегов Цикл
				ЗаписатьЗначениеЭлементаПриложение(Запись, МногСтрока);	
			КонецЦикла;    			
			Запись.ЗаписатьКонецЭлемента();			// </row>
		КонецЦикла;			
	Иначе
		ЗаписатьЗначениеЭлементаПриложение(Запись, СтрокаВыгрузки);
	КонецЕсли;	      	
	
	ТекущаяФорма = НоваяФорма;
	ТекущаяСтраницаПриложения = НоваяСтраница;
		
КонецПроцедуры // ВыгрузитьСтрокуВXMLПриложение()

&НаСервере
Процедура ВыгрузитьМногострочнуюФормуПриложение(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки)
	
	Перем СтруктураГруппы;
	
	СтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки);	
	
	Если СтрокаВыгрузки.КоличествоНаЛисте = 1 Тогда  // форма многостраничная
		
		// для многострочной = одностраничной
		
		НачальнаяСтрока = НомерСтроки;
		КонечнаяСтрока = 0;
		
		ТекущаяФорма = СтрокаВыгрузки.Форма;
		СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
		НоваяФорма = СледСтрокаВыгрузки.Форма;
		Пока НоваяФорма = ТекущаяФорма Цикл
			НомерСтроки = НомерСтроки+1;
			
			ТекущаяФорма = СледСтрокаВыгрузки.Форма;
			Если НомерСтроки+1 < КоличествоСтрокВТаблице Тогда
				СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);						
				НоваяФорма = СледСтрокаВыгрузки.Форма;
				КонечнаяСтрока = НомерСтроки;
			Иначе
				НоваяФорма = Неопределено;
				КонечнаяСтрока = НомерСтроки;
			КонецЕсли;
		КонецЦикла;
		
		МногСтруктура =  РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, СтрокаВыгрузки.КодФормы);
		
		КоличествоЗаписей = 0;
		
		Для Каждого КлючИЗначение Из МногСтруктура Цикл
			ТаблицаСтрокГруппы = КлючИЗначение.Значение.Строки;
			КоличествоЗаписей =  ТаблицаСтрокГруппы.Количество();
			Прервать;
		КонецЦикла;
		
		Если СтруктураРеквизитовФормы.ВсегоСтр = 0 Тогда 
			Если НЕ КоличествоЗаписей <= 1 Тогда 
				СтруктураРеквизитовФормы.ВсегоСтр = КоличествоЗаписей - 1;	
			КонецЕсли;
		КонецЕсли;
				
		ОдинШаг = Истина;
		ШагФорм = СтруктураРеквизитовФормы.ШагФорм; 
		 
		Для ШагФорм = ШагФорм По СтруктураРеквизитовФормы.ВсегоСтр Цикл 
			
			Для Шаг = НачальнаяСтрока По КонечнаяСтрока Цикл  
				
				Если Шаг = КонечнаяСтрока Тогда 
					Прервать;
				КонецЕсли;
				
				СтрокаВыгрузкиТек = ТаблицаВыгрузки.Получить(Шаг);
				ТекущаяФорма 	  = СтрокаВыгрузкиТек.Форма; 
				ТекущаяСтраницаПриложения   = СтрокаВыгрузкиТек.Страница;
				
				СтрокаВыгрузкиСлед = ТаблицаВыгрузки.Получить(Шаг + 1);
				
				НоваяФорма 		   = СтрокаВыгрузкиСлед.Форма; 
				НоваяСтраница      = СтрокаВыгрузкиСлед.Страница; 			
				
				Если ОдинШаг Тогда 
					НомерЛиста = Новый Структура;
					НомерЛиста.Вставить("НомерЛиста",СтруктураРеквизитовФормы.ШагФорм);
					ЗаписатьЗначениеЭлементаПриложение(Запись, СтрокаВыгрузкиСлед, МногСтруктура, НомерЛиста);
					ОдинШаг = Ложь;
					Продолжить;
				КонецЕсли;
				
				
				Если НоваяФорма <> ТекущаяФорма Тогда
					Запись.ЗаписатьКонецЭлемента();			// </sheet>
				КонецЕсли;
				Если НЕ НоваяФорма = ТекущаяФорма Тогда		
					Запись.ЗаписатьКонецЭлемента();			// </sheetGroup>
					Запись.ЗаписатьКонецЭлемента();			// </form>
					Запись.ЗаписатьНачалоЭлемента("form");
					//Состояние("Выгружается форма " + НоваяФорма);
					Запись.ЗаписатьАтрибут("name",СтрокаВыгрузкиСлед.Форма);
					Запись.ЗаписатьНачалоЭлемента("sheetGroup");
				КонецЕсли;                                       	
				Если НЕ НоваяСтраница = ТекущаяСтраницаПриложения Тогда
					Если НоваяФорма <> ТекущаяФорма Тогда
						// ничего не делаем
					Иначе
						Запись.ЗаписатьКонецЭлемента();			// </sheet>
					КонецЕсли;
					Запись.ЗаписатьНачалоЭлемента("sheet");
					Запись.ЗаписатьАтрибут("name",СтрокаВыгрузкиСлед.Страница);
				КонецЕсли;
				НомерЛиста = Новый Структура;
				НомерЛиста.Вставить("НомерЛиста",СтруктураРеквизитовФормы.ШагФорм);
				ЗаписатьЗначениеЭлементаПриложение(Запись, СтрокаВыгрузкиСлед, МногСтруктура,НомерЛиста);
			КонецЦикла;
			
			ШагФорм = ШагФорм + 1;
			СтруктураРеквизитовФормы.ШагФорм  = ШагФорм;
			Прервать;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	
КонецПроцедуры // ВыгрузитьМногострочнуюФормуПриложение()

&НаСервере
Процедура ЗаписатьЗначениеЭлементаПриложение(Запись, СтрокаВыгрузки, МногСтруктура = Неопределено, СтруктураПараметров = Неопределено)
	
	Запись.ЗаписатьНачалоЭлемента("field");
	Запись.ЗаписатьАтрибут("name",СтрокаВыгрузки.ИмяАтрибута);
	// Выгрузим значение ячейки, если оно есть в форме
	ИмяЯчейки = СтрокаВыгрузки.ИмяЯчейки;
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		//получаем и записываем значение из отчета		
		Если СтрокаВыгрузки.Выгружать = 1 Тогда
			Если СтрокаВыгрузки.Многострочность Тогда
				// определим имя Листа по имени страницы
				ИмяЛиста = СтрокаВыгрузки.ИмяЛиста;
				СтруктураГруппы = Неопределено;
				Если МногСтруктура = Неопределено Тогда
					МногСтруктура = СтрокаВыгрузки.Значение[0].Данные;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИмяЛиста) И МногСтруктура.Свойство(ИмяЛиста) Тогда            					
					МногСтруктура.Свойство(ИмяЛиста,СтруктураГруппы);				
				Иначе
					ТекстСообщения = НСтр("ru = 'Не заполнено ""Имя листа"" или ""Имя листа"" указано неверно для ячейки ""%1"" в макете для выгрузки значения в XML!'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяЯчейки));
				КонецЕсли;
					
				Если ИмяЯчейки = "НомерСтраницы" Тогда
					КолСтр = Неопределено;
					СтруктураПараметров.Свойство("КоличествоГруппСтраниц", КолСтр);
					Запись.ЗаписатьТекст(XMLСтрока(Формат(КолСтр,"ЧЦ=3; ЧВН=")));
				// заполнения многостроничных данных	
				ИначеЕсли СтрокаВыгрузки.КоличествоНаЛисте = 1 Тогда 
					Если СтруктураГруппы <> Неопределено Тогда
						 НомерЛиста = СтруктураПараметров.НомерЛиста;
						 СтрокаЗначений = СтруктураГруппы.Строки[НомерЛиста];
						 Попытка
							 Строка = СтрокаЗначений[ИмяЯчейки];
						 Исключение
							 Строка = Неопределено;
						 КонецПопытки;
						 Если Строка <> Неопределено Тогда
							 Значение = Строка;
							 Значение = ПривестиЗначениеКФорматуСОНОПриложение(Значение); //СтрокаФорматов);
				    		 Запись.ЗаписатьТекст(XMLСтрока(Значение));
						 КонецЕсли;
					 КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(СтрокаВыгрузки.КоличествоROW) И СтрокаВыгрузки.КоличествоROW <> "0" Тогда  // многострочная часть row
					КоличествоНаЛисте = Число(СтрокаВыгрузки.КоличествоROW);
					НомерЗаписиНаЛисте = Неопределено;
					СтруктураПараметров.Свойство("НомерЗаписи", НомерЗаписиНаЛисте);
					КолСтр = Неопределено;
					СтруктураПараметров.Свойство("КоличествоГруппСтраниц", КолСтр);										
					Если СтруктураГруппы <> Неопределено Тогда
						 ТаблицаСтрокГруппы = СтруктураГруппы.Строки;						 					
						 // рассчитаем индекс строки и проверим есть ли такая строка в таблице данных
						 ИндексСтроки = НомерЗаписиНаЛисте + (КолСтр-1)* КоличествоНаЛисте - 1;
						 Если ИндексСтроки < ТаблицаСтрокГруппы.Количество() Тогда  // строк в таблице может быть меньше, чем выгружается в XML
							 Строка = ТаблицаСтрокГруппы.Получить(ИндексСтроки);
							 Если Строка <> Неопределено Тогда // найдена строка для выгрузки значения
								 Если ТаблицаСтрокГруппы.Колонки.Найти(ИмяЯчейки) <> Неопределено Тогда 
									 Значение = Строка[ИмяЯчейки];
									 Значение = ПривестиЗначениеКФорматуСОНОПриложение(Значение); //СтрокаФорматов);
					    		 	 Запись.ЗаписатьТекст(XMLСтрока(Значение));
								 КонецЕсли;
							 КонецЕсли;
						 КонецЕсли;
					КонецЕсли;
				Иначе // шапка или подвал
					Если СтруктураГруппы <> Неопределено Тогда
						 ОбщиеЭлементыГруппы = СтруктураГруппы.ШапкаИПодвал;
						 Строка = ОбщиеЭлементыГруппы.Найти(ИмяЯчейки,"ИмяОбласти");
						 Если Строка <> Неопределено Тогда
							 Значение = Строка.Значение;
							 Значение = ПривестиЗначениеКФорматуСОНОПриложение(Значение); //СтрокаФорматов);
				    		 Запись.ЗаписатьТекст(XMLСтрока(Значение));
						 Иначе
							 ТекстСообщения = НСтр("ru = 'Не найден в структуре хранения данных показатель ""%1"" для формы.'");
							 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяЯчейки));							 
							 Значение = "";
						 КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТаблицаДанных = СтрокаВыгрузки.Значение;
				СтрокаОбласти = ТаблицаДанных.Найти(ИмяЯчейки,"ИмяОбласти");
				Если СтрокаОбласти <> Неопределено Тогда
					Значение = СтрокаОбласти.Значение;
					Значение = ПривестиЗначениеКФорматуСОНОПриложение(Значение); //СтрокаФорматов);
				    Запись.ЗаписатьТекст(XMLСтрока(Значение));
				Иначе
					 ТекстСообщения = НСтр("ru = 'Не найдена ячейка ""%1"" для выгрузки значения в XML!'");
				     ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяЯчейки));							 					
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	Запись.ЗаписатьКонецЭлемента();			// </field>

КонецПроцедуры // ЗаписатьЗначениеЭлементаПриложение()

&НаСервере
Функция ПривестиЗначениеКФорматуСОНОПриложение(Значение) 
	
	Если Врег(Значение) = "Х" ИЛИ Врег(Значение) = "X" Тогда
		Значение = Истина;
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Если Значение = Дата('00010101') Тогда
			Значение = "";
		Иначе
			Значение = Лев(Значение,10);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") И Значение = 0 Тогда
		Значение = "";
	КонецЕсли;
	
	Возврат Значение;	
	
КонецФункции // ПривестиЗначениеКФорматуСОНОПриложение()

/////////////////////////////////

//Обход проблемы с очисткой ячеек в ТП в клиент-серверном взаимодействии
&НаКлиенте
Процедура ПанельФорма210ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ПанельФорма210ПриСменеСтраницыНаСервере();
КонецПроцедуры


&НаСервере
Процедура ПанельФорма210ПриСменеСтраницыНаСервере()
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	
КонецПроцедуры

