
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем УИДЗамера;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьДанныеРегистров();
	
	Отчет.ИмяРегистра = Элементы.ИмяРегистра.СписокВыбора[0].Значение;
	
	ПеречислениеРазделыНалоговогоУчета = СтруктураРегистровИРазделовНУ[Отчет.ИмяРегистра];
	
	БухгалтерскиеОтчетыВызовСервера.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ОбновитьСписокВыбораТаблиц();
	
	Если Отчет.РежимРасшифровки Тогда
		ОбновитьТекстЗаголовка(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Если компоновщик до сих пор не инициализирован то нужно это сделать
	// серверный вызов
	Если Не ЭтаФорма.КомпоновщикИнициализирован Тогда
		ИнициализацияОтчетаНаСервере();
	КонецЕсли;
	
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	ПодключитьОбработчикОжидания = Не ИБФайловая И ЗначениеЗаполнено(ИдентификаторЗадания);
	Если ПодключитьОбработчикОжидания Тогда		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиент.ПриОткрытии(ЭтаФорма, Отказ);
	
	Отчет.ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// Установка модифицированности пользовательских настроек 
	// для их автоматического сохранения при закрытии формы
	Если Отчет.Свойство("РежимРасшифровки") Тогда
		ПользовательскиеНастройкиМодифицированы = Не Отчет.РежимРасшифровки;
	Иначе
		ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОтменитьВыполнениеЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	СохраняемыеРеквизитыФормы = Новый Массив;
	СохраняемыеРеквизитыФормы.Добавить("ПеречислениеРазделыНалоговогоУчета");
	
	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки,, СохраняемыеРеквизитыФормы);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	ЗагружаемыеРеквизитыФормы = Новый Массив;
	ЗагружаемыеРеквизитыФормы.Добавить("ПеречислениеРазделыНалоговогоУчета");
	
	БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки,, ЗагружаемыеРеквизитыФормы);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	ИнициализацияОтчетаНаСервере(Ложь);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяРегистраПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Отчет.ИмяРегистра) Тогда
		Возврат;
	КонецЕсли;
	
	ПеречислениеРазделыНалоговогоУчета = СтруктураРегистровИРазделовНУ[Отчет.ИмяРегистра];
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	ИнициализацияОтчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяТаблицыПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	ИнициализацияОтчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НалогоплательщикПриИзменении(Элемент)
	
	СписокСтруктурныхЕдиниц.Очистить();
	Отчет.ПредставлениеСпискаСтруктурныхЕдиниц = "";
	
	// переформируем список структурных единиц
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		СписокСтруктурныхЕдиниц = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.СформироватьСписокСтруктурныхЕдиниц(ПеречислениеРазделыНалоговогоУчета,, Отчет.Налогоплательщик);
		Отчет.ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
    Иначе
		СписокСтруктурныхЕдиниц.Добавить(Отчет.Налогоплательщик);
		Отчет.ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
    КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(
		СписокСтруктурныхЕдиниц, ЭтаФорма, СтандартнаяОбработка, "ПоНалогоплательщику", Отчет.Налогоплательщик,, ПеречислениеРазделыНалоговогоУчета, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницОчистка(Элемент, СтандартнаяОбработка)
	
	СписокСтруктурныхЕдиниц.Очистить();
	Отчет.Налогоплательщик = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура МакетОформленияПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки, "МакетОформления", МакетОформления);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЗаголовокПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПодписиПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ ТАБЛИЧНОГО ДОКУМЕНТА

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ОбработкаРасшифровкиСтандартногоОтчета(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОТБОРЫ

&НаКлиенте
Процедура ОтборыПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПриИзменении(ЭтаФорма, Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПараметров = ПолучитьПараметрыВыбораЗначенияОтбора();
	БухгалтерскиеОтчетыКлиент.ОтборыПравоеЗначениеНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, СписокПараметров);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СОРТИРОВКА

&НаКлиенте
Процедура СортировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Отчет.НачалоПериода, Отчет.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьНастройки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	Если Не ЗначениеЗаполнено(Отчет.ИмяРегистра) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан регистр, по которому формировать отчет!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);	
		Возврат;
	КонецЕсли;	
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	НаименованиеРегистра = Элементы.ИмяРегистра.СписокВыбора.НайтиПоЗначению(Отчет.ИмяРегистра);
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "Отчет ""универсальный регистр ну"" (" + НРег(НаименованиеРегистра) + ")."); 
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	Иначе
		ЗафиксироватьДлительностьКлючевойОперации();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьНастройки", 0.1, Истина);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Отчет, РезультатВыбора, "НачалоПериода,КонецПериода");
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;
	
	ЗаголовокОтчета = НСтр("ru = 'Регистр налогового учета %1'");
	
	ИмяРегистра = ?(НЕ ПустаяСтрока(Отчет.ИмяРегистра), """" + Метаданные.РегистрыНакопления[Отчет.ИмяРегистра].Синоним + """", "");
	
	ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокОтчета, ИмяРегистра);

	Форма.Заголовок = ЗаголовокОтчета;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ОтменитьВыполнениеЗадания()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетНаСервере() Экспорт
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	
	ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет",
			ПараметрыОтчета,
			БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("НачалоПериода"                 , Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода"                  , Отчет.КонецПериода);
	ПараметрыОтчета.Вставить("Налогоплательщик"              , Отчет.Налогоплательщик);
	ПараметрыОтчета.Вставить("ИмяРегистра"                   , Отчет.ИмяРегистра);
	ПараметрыОтчета.Вставить("ИмяТаблицы"                    , Отчет.ИмяТаблицы);
	ПараметрыОтчета.Вставить("СтруктураРегистровИРазделовНУ" , СтруктураРегистровИРазделовНУ);
	ПараметрыОтчета.Вставить("РежимРасшифровки"              , Отчет.РежимРасшифровки);
	ПараметрыОтчета.Вставить("СписокСтруктурныхЕдиниц"       , СписокСтруктурныхЕдиниц);
	ПараметрыОтчета.Вставить("ПоддержкаРаботыСоСтруктурнымиПодразделениями" , ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	ПараметрыОтчета.Вставить("ВыводитьЗаголовок"             , ВыводитьЗаголовок);
	ПараметрыОтчета.Вставить("ВыводитьПодписи"               , ВыводитьПодписи);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"             , ДанныеРасшифровки);
	ПараметрыОтчета.Вставить("МакетОформления"               , МакетОформления);	
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных"         , ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных));
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"           , БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ЭтаФорма));
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных"     , Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат           = РезультатВыполнения.Результат;
	ДанныеРасшифровки   = РезультатВыполнения.ДанныеРасшифровки;
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 

			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		    ЗафиксироватьДлительностьКлючевойОперации();
			
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		УИДЗамера = Неопределено;
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗапрещенныеПоля(Режим = "") Экспорт
	
	СписокПолей = Новый Массив;
	
	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
	
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыВыбораЗначенияОтбора() Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата"        , Отчет.КонецПериода);
	СписокПараметров.Вставить("Организация" , СписокСтруктурныхЕдиниц);
	СписокПараметров.Вставить("ПоддержкаРаботыСоСтруктурнымиПодразделениями", ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	Возврат СписокПараметров;
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда
		
		СписокСтруктурныхЕдиниц = Результат;
		Отчет.ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(Результат); 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДопПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияОтчетаНаСервере(ОчиститьНастройки = Истина)
	
	ПриИзмененииПараметровОтчетаНаСервере(ОчиститьНастройки);
	ИзменениеСхемыКомпоновкиДанныхНаСервере(, ОчиститьНастройки);
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеСхемыКомпоновкиДанныхНаСервере(Схема = Неопределено, ОчиститьНастройки = Истина) Экспорт
	
	Если ПустаяСтрока(Отчет.ИмяРегистра) ИЛИ ПустаяСтрока(Отчет.ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	Схема = ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных);
	СтарыйНаборДанных = Схема.НаборыДанных.Найти("НаборДанныхИсточникДанных");
	Если СтарыйНаборДанных <> Неопределено Тогда
		Схема.НаборыДанных.Удалить(СтарыйНаборДанных);
	КонецЕсли;
	
	// очистим поля итогов (Ресурсы) перед новым созданием
	Н = Схема.ПоляИтога.Количество() - 1;
	Пока Н >= 0 Цикл
		ТекущееПолеИтога = Схема.ПоляИтога[Н];
		Схема.ПоляИтога.Удалить(ТекущееПолеИтога);
		Н = Н - 1;
	КонецЦикла;
	
	ИсточникДанных = Схема.ИсточникиДанных[0];
	
	НаборДанных = БухгалтерскиеОтчетыВызовСервера.ДобавитьНаборДанныхЗапрос(Схема.НаборыДанных, ИсточникДанных, "НаборДанныхИсточникДанных");
	
	НаборДанных.Запрос = СформироватьЗапросПоМетаданным(Отчет.ИмяРегистра, Отчет.ИмяТаблицы);
	ДобавитьПоляНабораДанных(Отчет.ИмяРегистра, Отчет.ИмяТаблицы, НаборДанных, Схема);
	
	Если ОчиститьНастройки Тогда
		НастройкиПоУмолчанию = Схема.НастройкиПоУмолчанию;
	Иначе
		НастройкиПоУмолчанию = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	КонецЕсли;
	
	ЗаполнитьСтруктуруПоУмолчанию(Отчет.ИмяРегистра, Отчет.ИмяТаблицы, НаборДанных, НастройкиПоУмолчанию, ПоддержкаРаботыСоСтруктурнымиПодразделениями);

	СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(Схема, СхемаКомпоновкиДанных);
	
	Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиПоУмолчанию);
	
	КомпоновщикИнициализирован = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеРегистров() Экспорт
	
	СтруктураРегистровИРазделовНУ = Новый Структура;
	ВспомогательнаяСтруктураРегистровИРазделовНУ = Новый Структура;

	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("Акциз", "Акциз");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами", "НалогиСЗаработнойПлаты");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ВзаиморасчетыОрганизацийСПолучателямиИЛ", "НалогиСЗаработнойПлаты");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ВзаиморасчетыСДепонентамиОрганизаций", "НалогиСЗаработнойПлаты");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ВзаиморасчетыСРаботникамиОрганизаций", "НалогиСЗаработнойПлаты");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ВыплаченныеДоходыРаботникамОрганизацийНУ", "НалогиСЗаработнойПлаты");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ИПНРасчетыСБюджетом", "НалогиСЗаработнойПлаты");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ИПНСведенияОДоходах", "НалогиСЗаработнойПлаты");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("КорректировкаНДС", "НДС");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("КорректировкаНДСКВозмещению", "НДС");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("НДС", "НДС");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("НДСВзаиморасчетыСБюджетом", "НДС");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("НДСЗаНерезидента", "НДС");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("НДСКВозмещению", "НДС");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("НДССИзмененнымСрокомУплаты", "НДС");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ОПВПодлежитПеречислениюВФонды", "НалогиСЗаработнойПлаты");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ОПВРасчетыСФондами", "НалогиСЗаработнойПлаты");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ОПВСведенияОДоходах", "НалогиСЗаработнойПлаты");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("СНИсчисленный", "НалогиСЗаработнойПлаты");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("СНСведенияОДоходах", "НалогиСЗаработнойПлаты");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("СОРасчетыСФондами", "НалогиСЗаработнойПлаты");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("СОСведенияОДоходах", "НалогиСЗаработнойПлаты");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ВОСМСПодлежитПеречислениюВФонды", "НалогиСЗаработнойПлаты");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ВОСМСРасчетыСФондами", "НалогиСЗаработнойПлаты");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ВОСМССведенияОДоходах", "НалогиСЗаработнойПлаты");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ООСМСРасчетыСФондами", "НалогиСЗаработнойПлаты");
	ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ООСМССведенияОДоходах", "НалогиСЗаработнойПлаты");

	Для Каждого КлючИЗначение Из ВспомогательнаяСтруктураРегистровИРазделовНУ Цикл
		Если Метаданные.Перечисления.РазделыНалоговогоУчета.ЗначенияПеречисления.Найти(КлючИЗначение.Значение) <> Неопределено Тогда
			СтруктураРегистровИРазделовНУ.Вставить(КлючИЗначение.Ключ, Перечисления.РазделыНалоговогоУчета[КлючИЗначение.Значение]);
		КонецЕсли;
	КонецЦикла;
	
	СписокРегистровНУ = Новый СписокЗначений;
	
	Для Каждого КлючЗначение Из СтруктураРегистровИРазделовНУ Цикл
		МетаРегистр = Метаданные.РегистрыНакопления[КлючЗначение.Ключ];
		Элементы.ИмяРегистра.СписокВыбора.Добавить(МетаРегистр.Имя, МетаРегистр.Синоним);
		Элементы.ИмяРегистра.СписокВыбора.СортироватьПоПредставлению();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораТаблиц()
	
	Элементы.ИмяТаблицы.СписокВыбора.Очистить();
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(Отчет.ИмяРегистра);
	
	Если МетаданныеРегистра <> Неопределено Тогда
		Элементы.ИмяТаблицы.СписокВыбора.Добавить("Движения", НСтр("ru = 'Движения первичных документов'")); // основная таблица движений регистра
		Если МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			Элементы.ИмяТаблицы.СписокВыбора.Добавить("ОстаткиИОбороты", НСтр("ru = 'Остатки и обороты'"));
		Иначе
			Элементы.ИмяТаблицы.СписокВыбора.Добавить("Обороты", НСтр("ru = 'Обороты'"));
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ИмяТаблицы.СписокВыбора.НайтиПоЗначению(Отчет.ИмяТаблицы) = Неопределено Тогда
		Если Элементы.ИмяТаблицы.СписокВыбора.Количество() > 0 Тогда
			// по умолчанию выставляем на виртуальную таблицу, если она есть
			Отчет.ИмяТаблицы = Элементы.ИмяТаблицы.СписокВыбора[Элементы.ИмяТаблицы.СписокВыбора.Количество()-1].Значение;
		Иначе
			Отчет.ИмяТаблицы = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСписокВыбораТаблиц()

&НаСервере
Процедура ПриИзмененииПараметровОтчетаНаСервере(ОчиститьНастройки) 

	Если Не ЗначениеЗаполнено(Отчет.ИмяРегистра) Тогда
		Возврат;
	КонецЕсли;	
		
	РазделНУ = СтруктураРегистровИРазделовНУ[Отчет.ИмяРегистра];
	МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(Отчет.ИмяРегистра);

	// перестроим список доступных для выбора таблиц
	ОбновитьСписокВыбораТаблиц();

	ВидимостьСтруктурныхЕдиниц = Ложь;

	// переформируем список структурных единиц
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		
		Если ОчиститьНастройки Тогда
			СписокСтруктурныхЕдиниц = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.СформироватьСписокСтруктурныхЕдиниц(РазделНУ,, Отчет.Налогоплательщик);
			// выведем вновь заполненный список
			Отчет.ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
		КонецЕсли;
		
		// определим видимость списка структурных единиц
		Если МетаданныеРегистра <> Неопределено Тогда
			Если МетаданныеРегистра.Измерения.Найти("СтруктурнаяЕдиница") <> Неопределено Тогда
				// структурные единицы как измерения видимы всегда
				ВидимостьСтруктурныхЕдиниц = Истина;
			ИначеЕсли МетаданныеРегистра.Реквизиты.Найти("СтруктурнаяЕдиница") <> Неопределено Тогда
				// структурные единицы как реквизиты видимы только в режим просмотра первичных движений регистра
				Если Отчет.ИмяТаблицы = "Движения" Тогда
					ВидимостьСтруктурныхЕдиниц = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если ОчиститьНастройки Тогда
	    	СписокСтруктурныхЕдиниц.Очистить();
	    	СписокСтруктурныхЕдиниц.Добавить(Отчет.Налогоплательщик);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
    
	УправлениеФормой(ЭтаФорма);
    
КонецПроцедуры // ПриИзмененииПараметровОтчетаНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Элементы.ПредставлениеСпискаСтруктурныхЕдиниц.Видимость = Форма.ВидимостьСтруктурныхЕдиниц;
	Элементы.ДекорацияСписокСтруктурныхЕдиниц.Видимость     = НЕ Форма.ВидимостьСтруктурныхЕдиниц;
	Элементы.Налогоплательщик.ТолькоПросмотр                = НЕ Форма.УчетПоВсемОрганизациям;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьЗапросПоМетаданным(ИмяРегистра, ИмяТаблицы)

	ТекстПоля = "";
	ТекстСоединения = "";
	ЕстьФизЛицо = Ложь;

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА (НЕ ИсчислениеНалогов.НалоговыйКомитет ЕСТЬ NULL )
	|				И ИсчислениеНалогов.НалоговыйКомитет <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ИсчислениеНалогов.НалоговыйКомитет
	|		ИНАЧЕ Организации.НалоговыйКомитет
	|	КОНЕЦ КАК НалоговыйКомитет
	|
	|ПОМЕСТИТЬ ВТ_ИсчислениеНалогов
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов
	|		ПО Организации.Ссылка = ИсчислениеНалогов.СтруктурнаяЕдиница
	|			И (ИсчислениеНалогов.РазделНалоговогоУчета = &РазделНалоговогоУчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка,
	|	ВЫБОР
	|		КОГДА ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением
	|			ТОГДА ВЫБОР
	|					КОГДА (НЕ ИсчислениеНалогов_Подр.НалоговыйКомитет ЕСТЬ NULL )
	|							И ИсчислениеНалогов_Подр.НалоговыйКомитет <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|						ТОГДА ИсчислениеНалогов_Подр.НалоговыйКомитет
	|					КОГДА (НЕ ИсчислениеНалогов_Орг.НалоговыйКомитет ЕСТЬ NULL )
	|							И ИсчислениеНалогов_Орг.НалоговыйКомитет <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|						ТОГДА ИсчислениеНалогов_Орг.НалоговыйКомитет
	|					ИНАЧЕ ПодразделенияОрганизаций.Владелец.НалоговыйКомитет
	|				КОНЕЦ
	|		КОГДА (НЕ ИсчислениеНалогов_Орг.НалоговыйКомитет ЕСТЬ NULL )
	|				И ИсчислениеНалогов_Орг.НалоговыйКомитет <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ИсчислениеНалогов_Орг.НалоговыйКомитет
	|		ИНАЧЕ ПодразделенияОрганизаций.Владелец.НалоговыйКомитет
	|	КОНЕЦ
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов_Подр
	|		ПО ПодразделенияОрганизаций.Ссылка = ИсчислениеНалогов_Подр.СтруктурнаяЕдиница
	|			И (ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением)
	|			И (ИсчислениеНалогов_Подр.РазделНалоговогоУчета = &РазделНалоговогоУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов_Орг
	|		ПО ПодразделенияОрганизаций.Владелец = ИсчислениеНалогов_Орг.СтруктурнаяЕдиница
	|			И (ИсчислениеНалогов_Орг.РазделНалоговогоУчета = &РазделНалоговогоУчета)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтруктурнаяЕдиница
	|;
	|";
	
	// для физлиц добавим еще получение информации о гражданстве
	Если Метаданные.РегистрыНакопления[ИмяРегистра].Измерения.Найти("Физлицо") <> Неопределено Тогда
		
		ЕстьФизлицо = Истина; // при наличии физлица выполняем еще получение данных о его гражданстве, поэтому необходимо обороты по месяца
	
		ТекстЗапроса = ТекстЗапроса + "
		|
		|//////////////////////////////
		|// все возможные даты месяцев, за которые могут быть данные - считаем, что есть в календаре, тот период и в базе 
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(РеглКалендарь.Дата, МЕСЯЦ) КАК МесяцНалоговогоПериода
		|
		|ПОМЕСТИТЬ ВТ_Календарь
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК РеглКалендарь
		|{ГДЕ
		|	РеглКалендарь.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|	И РеглКалендарь.Дата МЕЖДУ &НачалоПериода И ВЫБОР КОГДА &КонецПериода = ДАТАВРЕМЯ(1, 1, 1) ТОГДА ДАТАВРЕМЯ(2999, 12, 31) ИНАЧЕ &КонецПериода КОНЕЦ}
		|;
		|
		|//////////////////////////////
		|// сведения о гражданстве
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Календарь.МесяцНалоговогоПериода,
		|	ГражданствоФизЛиц.ФизЛицо,
		|	МАКСИМУМ(ГражданствоФизЛиц.Период) КАК Период
		|ПОМЕСТИТЬ ВТ_ПоследняяДатаГражданства
		|ИЗ
		|	ВТ_Календарь КАК Календарь
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
		|		ПО ГражданствоФизЛиц.Период <= КОНЕЦПЕРИОДА(Календарь.МесяцНалоговогоПериода, МЕСЯЦ)
		|
		|СГРУППИРОВАТЬ ПО
		|	Календарь.МесяцНалоговогоПериода,
		|	ГражданствоФизЛиц.ФизЛицо
		|ИНДЕКСИРОВАТЬ ПО
		|	ГражданствоФизЛиц.ФизЛицо,
		|	Период
		|;
		|
		|//////////////////////////////
		|// данные о гражданстве
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоследняяДатаГражданства.ФизЛицо КАК ФизЛицо,
		|	ПоследняяДатаГражданства.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВЫБОР
		|		КОГДА ГражданствоФизЛиц.Страна = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
		|		ИНАЧЕ ГражданствоФизЛиц.Страна
		|	КОНЕЦ КАК СтранаРезидентства,
		|	ГражданствоФизЛиц.НомерНалоговойРегистрацииВСтранеРезидентства,
		|	ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК
		|
		|ПОМЕСТИТЬ ВТ_ГражданствоФизЛиц
		|ИЗ
		|	ВТ_ПоследняяДатаГражданства КАК ПоследняяДатаГражданства
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
		|		ПО ПоследняяДатаГражданства.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
		|			И ПоследняяДатаГражданства.Период = ГражданствоФизЛиц.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо,
		|	МесяцНалоговогоПериода
		|;
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|//////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсточникДанных.*
	|	//ДОПОЛНИТЕЛЬНЫЕ_ПОЛЯ
	|	
	|ИЗ РегистрНакопления." + ИмяРегистра;
	
	Если ИмяТаблицы <> "Движения" Тогда
		ТекстЗапроса = ТекстЗапроса + "." + ИмяТаблицы;
	КонецЕсли;

    Если ИмяТаблицы = "ОстаткиИОбороты" ИЛИ ИмяТаблицы = "Обороты" Тогда
		ТекстЗапроса = ТекстЗапроса + "({&НачалоПериода} ,{&КонецПериода} ," + ?(ЕстьФизЛицо, "МЕСЯЦ", "Авто")+ ")";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + " КАК ИсточникДанных
	|//ДОПОЛНИТЕЛЬНЫЕ_СОЕДИНЕНИЯ
	|";
	
	// в зависимости от имени регистра присоединяем еще вспомогательные регистры

	Если ИмяРегистра = "Акциз" Тогда
		
		ТекстПоля = ",
		|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет КАК НалоговыйКомитет,
		|	КодыСтрокДекларацииПоАкцизу.КодСтроки КАК КодСтрокиДекларации";
		
		ТекстСоединения = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсчислениеНалогов КАК ИсчислениеНалоговСтруктурныхЕдиниц
		|		ПО ИсточникДанных.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.СтруктурнаяЕдиница
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоАкцизу.СрезПоследних({&КонецПериода}) КАК КодыСтрокДекларацииПоАкцизу
		|		ПО ИсточникДанных.ТМЗ.ВидПодакцизногоТМЗ = КодыСтрокДекларацииПоАкцизу.ВидТМЗ
		|			И ИсточникДанных.ВидОперации = КодыСтрокДекларацииПоАкцизу.ВидОперации";
		
	ИначеЕсли ИмяРегистра = "ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами"
		Или ИмяРегистра = "ВзаиморасчетыОрганизацийСПолучателямиИЛ"
		Или ИмяРегистра = "ВзаиморасчетыСДепонентамиОрганизаций"
		Или ИмяРегистра = "ВзаиморасчетыСРаботникамиОрганизаций"
		Или ИмяРегистра = "ВыплаченныеДоходыРаботникамОрганизацийНУ"
		Или ИмяРегистра = "ИПНРасчетыСБюджетом"
		Или ИмяРегистра = "ИПНСведенияОДоходах"
		Или ИмяРегистра = "ОПВПодлежитПеречислениюВФонды"
		Или ИмяРегистра = "ОПВРасчетыСФондами"
		Или ИмяРегистра = "ОПВСведенияОДоходах"
		Или ИмяРегистра = "СНИсчисленный"
		Или ИмяРегистра = "СОРасчетыСФондами"
		Или ИмяРегистра = "СОСведенияОДоходах" 
		Или ИмяРегистра = "ВОСМСПодлежитПеречислениюВФонды"
		Или ИмяРегистра = "ВОСМСРасчетыСФондами"
		Или ИмяРегистра = "ВОСМССведенияОДоходах"
		Или ИмяРегистра = "ООСМСРасчетыСФондами"
		Или ИмяРегистра = "ООСМССведенияОДоходах"Тогда
		
		ТекстПоля = ",
		|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет КАК НалоговыйКомитет";
		
		ТекстСоединения = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсчислениеНалогов КАК ИсчислениеНалоговСтруктурныхЕдиниц
		|		ПО ИсточникДанных.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.СтруктурнаяЕдиница";
		
		// соединяем еще с данными о гражданстве
		Если ИмяРегистра <> "ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами"
			И ИмяРегистра <> "ВзаиморасчетыОрганизацийСПолучателямиИЛ" Тогда
			
			Если ИмяРегистра = "ИПНСведенияОДоходах" 
				ИЛИ ИмяРегистра = "ВОСМССведенияОДоходах" Тогда
				ТекстПоля = ТекстПоля + ",
				|	ВЫБОР
				|		КОГДА ИсточникДанных.Физлицо ССЫЛКА Справочник.Контрагенты 
				|			ТОГДА ВЫБОР
				|					КОГДА ВЫРАЗИТЬ(ИсточникДанных.Физлицо КАК Справочник.Контрагенты).СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
				|						ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
				|					ИНАЧЕ ВЫРАЗИТЬ(ИсточникДанных.Физлицо КАК Справочник.Контрагенты).СтранаРезидентства
				|				КОНЕЦ
				|		ИНАЧЕ ЕСТЬNULL(ВТ_ГражданствоФизЛиц.СтранаРезидентства, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) 
				|	КОНЕЦ КАК Страна,
				|	ВЫБОР
				|		КОГДА ИсточникДанных.Физлицо ССЫЛКА Справочник.Контрагенты 
				|			ТОГДА ВЫРАЗИТЬ(ИсточникДанных.Физлицо КАК Справочник.Контрагенты).НомерНалоговойРегистрацииВСтранеРезидентства
				|		ИНАЧЕ ЕСТЬNULL(ВТ_ГражданствоФизЛиц.НомерНалоговойРегистрацииВСтранеРезидентства, """") 
				|	КОНЕЦ КАК НомерНалоговойРегистрацииВСтранеРезидентства,
				|	ВЫБОР
				|		КОГДА ИсточникДанных.Физлицо ССЫЛКА Справочник.Контрагенты 
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ЕСТЬNULL(ВТ_ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ) 
				|	КОНЕЦ КАК НеЯвляетсяНалоговымРезидентомРК";
			Иначе
				ТекстПоля = ТекстПоля + ",
				|	ЕСТЬNULL(ВТ_ГражданствоФизЛиц.СтранаРезидентства, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) КАК Страна,
				|	ЕСТЬNULL(ВТ_ГражданствоФизЛиц.НомерНалоговойРегистрацииВСтранеРезидентства, """") КАК НомерНалоговойРегистрацииВСтранеРезидентства,
				|	ЕСТЬNULL(ВТ_ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ) КАК НеЯвляетсяНалоговымРезидентомРК";
			КонецЕсли;
			
			Если ИмяРегистра = "ОПВРасчетыСФондами"
				ИЛИ ИмяРегистра = "СНИсчисленный"
				ИЛИ ИмяРегистра = "СОРасчетыСФондами" 
				ИЛИ ИмяРегистра = "ООСМСРасчетыСФондами" 
				ИЛИ ИмяРегистра = "ВОСМСРасчетыСФондами" Тогда
				
				ТекстСоединения = ТекстСоединения + "
				|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГражданствоФизЛиц КАК ВТ_ГражданствоФизЛиц
				|		ПО ИсточникДанных.ФизЛицо = ВТ_ГражданствоФизЛиц.ФизЛицо
				|			И ИсточникДанных.МесяцНалоговогоПериода = ВТ_ГражданствоФизЛиц.МесяцНалоговогоПериода";
			
			Иначе
			
				ТекстСоединения = ТекстСоединения + "
				|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГражданствоФизЛиц КАК ВТ_ГражданствоФизЛиц
				|		ПО ИсточникДанных.ФизЛицо = ВТ_ГражданствоФизЛиц.ФизЛицо
				|			И НАЧАЛОПЕРИОДА(ИсточникДанных.Период, МЕСЯЦ) = ВТ_ГражданствоФизЛиц.МесяцНалоговогоПериода";
				
			КонецЕсли;
			
		КонецЕсли;		
		
	ИначеЕсли ИмяРегистра = "СНСведенияОДоходах" Тогда
		
		ТекстПоля = ",
		|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет КАК НалоговыйКомитет,
		|	КодыСтрокДекларацииПоСН.КодСтроки КАК КодСтрокиДекларации";
		
		ТекстСоединения = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсчислениеНалогов КАК ИсчислениеНалоговСтруктурныхЕдиниц
		|		ПО ИсточникДанных.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.СтруктурнаяЕдиница
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоСН.СрезПоследних({&КонецПериода}) КАК КодыСтрокДекларацииПоСН
		|		ПО ИсточникДанных.ВидРасчета = КодыСтрокДекларацииПоСН.ВидРасчета";

		ТекстПоля = ТекстПоля + ",
		|	ЕСТЬNULL(ВТ_ГражданствоФизЛиц.СтранаРезидентства, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) КАК Страна,
		|	ЕСТЬNULL(ВТ_ГражданствоФизЛиц.НомерНалоговойРегистрацииВСтранеРезидентства, """") КАК НомерНалоговойРегистрацииВСтранеРезидентства,
		|	ЕСТЬNULL(ВТ_ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ) КАК НеЯвляетсяНалоговымРезидентомРК";
		
		ТекстСоединения = ТекстСоединения + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГражданствоФизЛиц КАК ВТ_ГражданствоФизЛиц
		|		ПО ИсточникДанных.ФизЛицо = ВТ_ГражданствоФизЛиц.ФизЛицо
		|			И НАЧАЛОПЕРИОДА(ИсточникДанных.Период, МЕСЯЦ) = ВТ_ГражданствоФизЛиц.МесяцНалоговогоПериода";
			
	ИначеЕсли ИмяРегистра = "КорректировкаНДС" Тогда
		
		ТекстПоля = ",
		|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет КАК НалоговыйКомитет,
		|	КодыСтрокДекларацииПоНДС.КодСтроки КАК КодСтрокиДекларации";
		
		ТекстСоединения = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсчислениеНалогов КАК ИсчислениеНалоговСтруктурныхЕдиниц
		|		ПО ИсточникДанных.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.СтруктурнаяЕдиница
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДС.СрезПоследних({&КонецПериода}) КАК КодыСтрокДекларацииПоНДС
		|		ПО ИсточникДанных.ВидОперацииКорректировки = КодыСтрокДекларацииПоНДС.ВидОперации";
		
	
	ИначеЕсли ИмяРегистра = "КорректировкаНДСКВозмещению" Тогда
		
		ТекстПоля = ",
		|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет КАК НалоговыйКомитет,
		|	КодыСтрокДекларацииПоНДСКЗачету.КодСтроки КАК КодСтрокиДекларации";
		
		ТекстСоединения = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсчислениеНалогов КАК ИсчислениеНалоговСтруктурныхЕдиниц
		|		ПО ИсточникДанных.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.СтруктурнаяЕдиница
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДСКЗачету.СрезПоследних({&КонецПериода}) КАК КодыСтрокДекларацииПоНДСКЗачету
		|		ПО ИсточникДанных.ВидОперацииКорректировки = КодыСтрокДекларацииПоНДСКЗачету.ВидОперации
		|			И ИсточникДанных.ВидОборота = КодыСтрокДекларацииПоНДСКЗачету.ВидОборота";
		
	ИначеЕсли ИмяРегистра = "НДС" Тогда
		
		ТекстПоля = ",
		|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет КАК НалоговыйКомитет,
		|	КодыСтрокДекларацииПоНДС.КодСтроки КАК КодСтрокиДекларации";
		
		ТекстСоединения = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсчислениеНалогов КАК ИсчислениеНалоговСтруктурныхЕдиниц
		|		ПО ИсточникДанных.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.СтруктурнаяЕдиница
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДС.СрезПоследних({&КонецПериода}) КАК КодыСтрокДекларацииПоНДС
		|		ПО ИсточникДанных.ВидОперацииРеализации = КодыСтрокДекларацииПоНДС.ВидОперации";
		
	ИначеЕсли ИмяРегистра = "НДСКВозмещению" Тогда
		
		ТекстПоля = ",
		|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет КАК НалоговыйКомитет,
		|	КодыСтрокДекларацииПоНДСКЗачету.КодСтроки КАК КодСтрокиДекларации";
		
		ТекстСоединения = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсчислениеНалогов КАК ИсчислениеНалоговСтруктурныхЕдиниц
		|		ПО ИсточникДанных.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.СтруктурнаяЕдиница
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДСКЗачету.СрезПоследних({&КонецПериода}) КАК КодыСтрокДекларацииПоНДСКЗачету
		|		ПО ИсточникДанных.ВидОперацииПоступления = КодыСтрокДекларацииПоНДСКЗачету.ВидОперации
		|			И ИсточникДанных.ВидОборота = КодыСтрокДекларацииПоНДСКЗачету.ВидОборота";
		
	Иначе // все прочие регистры
	
		ТекстПоля = ",
		|	ЕСТЬNULL(ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет, ИсточникДанных.Налогоплательщик.НалоговыйКомитет) КАК НалоговыйКомитет";
		
		ТекстСоединения = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсчислениеНалогов КАК ИсчислениеНалоговСтруктурныхЕдиниц
		|		ПО ИсточникДанных.Налогоплательщик = ИсчислениеНалоговСтруктурныхЕдиниц.СтруктурнаяЕдиница";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДОПОЛНИТЕЛЬНЫЕ_ПОЛЯ", ТекстПоля);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДОПОЛНИТЕЛЬНЫЕ_СОЕДИНЕНИЯ", ТекстСоединения);
	
    Если ИмяТаблицы = "Движения" Тогда
		ТекстЗапроса = ТекстЗапроса + "ГДЕ ИсточникДанных.Период МЕЖДУ &НачалоПериода И ВЫБОР КОГДА &КонецПериода = ДАТАВРЕМЯ(1, 1, 1) ТОГДА ДАТАВРЕМЯ(2999, 12, 31) ИНАЧЕ &КонецПериода КОНЕЦ";
	КонецЕсли;
	
	//// добавим в запрос возможность получения характеристик объектов
	//ВыборкаВидовОбъектовСоСвойствами = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Выбрать();
	//Пока ВыборкаВидовОбъектовСоСвойствами.Следующий() Цикл
	//	
	//	Если ВыборкаВидовОбъектовСоСвойствами.ЭтоГруппа Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Если ВыборкаВидовОбъектовСоСвойствами.ПометкаУдаления Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Если НЕ ВыборкаВидовОбъектовСоСвойствами.Предопределенный Тогда
	//		Продолжить;
	//	КонецЕсли;
	//
	//	ИмяПредопределенногоЭлемента = ПланыВидовХарактеристик.УдалитьНазначенияСвойствКатегорийОбъектов.ПолучитьИмяПредопределенного(ВыборкаВидовОбъектовСоСвойствами.Ссылка);
	//	ТипЭлемента = ВыборкаВидовОбъектовСоСвойствами.ТипЗначения.Типы()[0];
	//	МетаданныеСправочника = Метаданные.НайтиПоТипу(ТипЭлемента);
	//	Если МетаданныеСправочника = Неопределено Или НЕ Метаданные.Справочники.Содержит(МетаданныеСправочника) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	ТекстЗапроса = ТекстЗапроса + "
	//	|{ХАРАКТЕРИСТИКИ
	//	|	ТИП(Справочник." + МетаданныеСправочника.Имя + ")
	//	|	СПИСОК (ВЫБРАТЬ
	//	|				СвойстваОбъектов.Ссылка,
	//	|				"" Дополнительное свойство: "" + СвойстваОбъектов.Наименование КАК Наименование,
	//	|				СвойстваОбъектов.ТипЗначения
	//	|			ИЗ
	//	|				ПланВидовХарактеристик.УдалитьСвойстваОбъектов КАК СвойстваОбъектов
	//	|			ГДЕ
	//	|				СвойстваОбъектов.НазначениеСвойства = ЗНАЧЕНИЕ(ПланВидовХарактеристик.УдалитьНазначенияСвойствКатегорийОбъектов." + ИмяПредопределенногоЭлемента + ")
	//	|				И НЕ СвойстваОбъектов.ПометкаУдаления) 
	//	|	ИДЕНТИФИКАТОР Ссылка
	//	|	ИМЯ Наименование
	//	|	ТИПЗНАЧЕНИЯ ТипЗначения
	//	|	ЗНАЧЕНИЯ РегистрСведений.УдалитьЗначенияСвойствОбъектов
	//	|	ОБЪЕКТ Объект
	//	|	ХАРАКТЕРИСТИКА Свойство
	//	|	ЗНАЧЕНИЕ Значение}
	//	|{ХАРАКТЕРИСТИКИ
	//	|	ТИП(Справочник." + МетаданныеСправочника.Имя + ")
	//	|	СПИСОК (ВЫБРАТЬ
	//	|				КатегорииОбъектов.Ссылка,
	//	|				"" Дополнительная категория: "" + КатегорииОбъектов.Наименование КАК Наименование
	//	|			ИЗ
	//	|				Справочник.УдалитьКатегорииОбъектов КАК КатегорииОбъектов
	//	|			ГДЕ
	//	|				КатегорииОбъектов.НазначениеКатегории = ЗНАЧЕНИЕ(ПланВидовХарактеристик.УдалитьНазначенияСвойствКатегорийОбъектов." + ИмяПредопределенногоЭлемента + ")
	//	|				И НЕ КатегорииОбъектов.ПометкаУдаления) 
	//	|	ИДЕНТИФИКАТОР Ссылка
	//	|	ИМЯ Наименование
	//	|	ЗНАЧЕНИЯ РегистрСведений.УдалитьКатегорииОбъектов
	//	|	ОБЪЕКТ Объект
	//	|	ХАРАКТЕРИСТИКА Категория}
	//	|";
	//	
	//КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьЗапросПоМетаданным()

&НаСервереБезКонтекста
Процедура ДобавитьПоляНабораДанных(ИмяРегистра, ИмяТаблицы, НаборДанных, Схема)
		
	МетаданныеРегистра = Метаданные.РегистрыНакопления[ИмяРегистра];

	// Добавляем измерения
	Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		ПолеНаборДанных = БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, Измерение.Имя, Измерение.Синоним);
	КонецЦикла;
	
	// добавим НалоговыйКомитет
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "НалоговыйКомитет", НСтр("ru = 'Налоговый комитет'"));
	
	// еще может быть КодСтрокиДекларации
	Если Найти(НаборДанных.Запрос, "КодСтрокиДекларации") > 0 Тогда
		БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "КодСтрокиДекларации", НСтр("ru = 'Код строки декларации'"));
	КонецЕсли;
	
	// Добавляем реквизиты
	Если ИмяТаблицы = "Движения" Тогда
		Для каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
			БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
	КонецЕсли;
	
	// Добавляем поля периода
	Если ИмяТаблицы = "ОстаткиИОбороты" ИЛИ ИмяТаблицы = "Обороты" Тогда
		БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "Период", НСтр("ru = 'Период'"));
		БухгалтерскиеОтчетыВызовСервера.ДобавитьПоляПериодаВНаборДанных(НаборДанных);
	КонецЕсли;
	
	// Добавляем ресурсы
	Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		Если ИмяТаблицы = "Обороты" Тогда
			
			БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, Ресурс.Имя + "Оборот", Ресурс.Синоним);
			БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеИтога(Схема, Ресурс.Имя + "Оборот");

		ИначеЕсли ИмяТаблицы = "ОстаткиИОбороты" Тогда
			
			ПапкаПолейНабораДанных = НаборДанных.Поля.Добавить(Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных"));
			ПапкаПолейНабораДанных.Заголовок   = Ресурс.Синоним;
			ПапкаПолейНабораДанных.ПутьКДанным = Ресурс.Имя;
																						 
			БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, Ресурс.Имя + "НачальныйОстаток", Ресурс.Синоним + НСтр("ru = ' нач. остаток'"), Ресурс.Имя + "." + Ресурс.Имя + "НачальныйОстаток");
			БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеИтога(Схема, Ресурс.Имя + "." + Ресурс.Имя + "НачальныйОстаток");
			
			БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, Ресурс.Имя + "Приход", Ресурс.Синоним + НСтр("ru = ' приход'"), Ресурс.Имя + "." + Ресурс.Имя + "Приход");
			БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеИтога(Схема, Ресурс.Имя + "." + Ресурс.Имя + "Приход");
			
			БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, Ресурс.Имя + "Расход", Ресурс.Синоним + НСтр("ru = ' расход'"), Ресурс.Имя + "." + Ресурс.Имя + "Расход");
			БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеИтога(Схема, Ресурс.Имя + "." + Ресурс.Имя + "Расход");
			
			БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, Ресурс.Имя + "Оборот", Ресурс.Синоним + НСтр("ru = ' оборот'"), Ресурс.Имя + "." + Ресурс.Имя + "Оборот");
			БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеИтога(Схема, Ресурс.Имя + "." + Ресурс.Имя + "Оборот");
			
			БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, Ресурс.Имя + "КонечныйОстаток", Ресурс.Синоним + НСтр("ru = ' кон. остаток'"), Ресурс.Имя + "." + Ресурс.Имя + "КонечныйОстаток");
			БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеИтога(Схема, Ресурс.Имя + "." + Ресурс.Имя + "КонечныйОстаток");
			
		ИначеЕсли ИмяТаблицы = "Движения" Тогда
			
			БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, Ресурс.Имя, Ресурс.Синоним);
			БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеИтога(Схема, Ресурс.Имя);
			
		КонецЕсли;	
	КонецЦикла;
	
	Если Найти(НаборДанных.Запрос, "Страна") > 0 Тогда
		// добавляем сведения о стране и НомерНалоговойРегистрацииВСтранеРезидентства
		БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "Страна", НСтр("ru = 'Страна'"));
		БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "НомерНалоговойРегистрацииВСтранеРезидентства", НСтр("ru = 'Номер налоговой регистрации в стране резидентства'"));
		
		НовоеПоле = БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "НеЯвляетсяНалоговымРезидентомРК", НСтр("ru = 'Резидент/Нерезидент'"));
		НовоеПоле.ВыражениеПредставления = "ВЫБОР КОГДА НеЯвляетсяНалоговымРезидентомРК ТОГДА ""Нерезидент"" ИНАЧЕ ""Резидент"" КОНЕЦ";
	КонецЕсли;
	
КонецПроцедуры // ДобавитьПоляНабораДанных()

&НаСервереБезКонтекста
Процедура ЗаполнитьСтруктуруПоУмолчанию(ИмяРегистра, ИмяТаблицы, НаборДанных, НастройкиКомпоновкиДанных, ПоддержкаРаботыСоСтруктурнымиПодразделениями)
	
	// добавляем динамически формируемую структуру после заголовка отчета
	
	ЭлементСтруктурыТаблицаРегистра = Неопределено;
	
	Для Каждого ЭлементСтруктуры Из НастройкиКомпоновкиДанных.Структура Цикл
		Если ЭлементСтруктуры.Имя = "ТаблицаРегистра" Тогда
			ЭлементСтруктурыТаблицаРегистра = ЭлементСтруктуры;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементСтруктурыТаблицаРегистра <> Неопределено Тогда
		НастройкиКомпоновкиДанных.Структура.Удалить(ЭлементСтруктурыТаблицаРегистра);
	КонецЕсли;
	
	ЭлементСтруктуры = НастройкиКомпоновкиДанных.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ЭлементСтруктуры.Имя = "ТаблицаРегистра";
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления[ИмяРегистра];

	// Код строки декларации ставим первой, т.к. основное назначение регистров - это расшифровка отдельных строк
	Если Найти(НаборДанных.Запрос, "КодСтрокиДекларации") > 0 Тогда
		ДобавитьПолеВГруппировку(ЭлементСтруктуры, "КодСтрокиДекларации");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ЭлементСтруктуры.Выбор, "КодСтрокиДекларации", НСтр("ru = 'Код строки декларации'"));
		
		// установим сортировку по код строки
		ПолеПорядка = ЭлементСтруктуры.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПолеПорядка.Поле = Новый ПолеКомпоновкиДанных("КодСтрокиДекларации");
		ПолеПорядка.Использование = Истина;
		
		// добавляем в итоги по коду строки все ресурсы из регистра
		ДобавитьПоказатели(ИмяРегистра, ИмяТаблицы, ЭлементСтруктуры);
		
		// создаем еще один уровень - группировку, вложенную в код строки декларации
		ЭлементСтруктуры = ЭлементСтруктуры.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	КонецЕсли;

	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ЭлементСтруктуры.Выбор, "SystemFields.SerialNumber", НСтр("ru = '№ п/п'"));
	
	// по умолчанию выводим все поля из регистра
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Если ВРег(Лев(Измерение.Имя, 7)) = "УДАЛИТЬ" Тогда  // помеченные на удаление поля не учитываем
			Продолжить;
		КонецЕсли;
		
		Если Измерение.Имя = "Налогоплательщик" Тогда
			// по налогоплательщику по умолчанию и так отбор стоит
			Продолжить;
		КонецЕсли;
		
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями = ЛОЖЬ Тогда
			Если Измерение.Имя = "Организация" Или Измерение.Имя = "СтруктурнаяЕдиница" Тогда
				// если в базе не ведется учет по структурным подразделениям, 
				// то организация и структурная единица должны совпадать с налогоплательщиком
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьПолеВГруппировку(ЭлементСтруктуры, Измерение.Имя);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ЭлементСтруктуры.Выбор, Измерение.Имя, Измерение.Синоним);
	КонецЦикла;
	
	// измерения, которые получаются из других источников
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ДобавитьПолеВГруппировку(ЭлементСтруктуры, "НалоговыйКомитет");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ЭлементСтруктуры.Выбор, "НалоговыйКомитет", НСтр("ru = 'Налоговый комитет'"));
	КонецЕсли;
	
	ДобавитьПоказатели(ИмяРегистра, ИмяТаблицы, ЭлементСтруктуры);
	
	Если ИмяТаблицы = "Движения" Тогда // если таблица движений, то добавим еще и реквизиты
		Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
			Если ВРег(Лев(Реквизит.Имя, 7)) = "УДАЛИТЬ" Тогда // помеченные на удаление поля не учитываем
				Продолжить;
			КонецЕсли;

			Если ПоддержкаРаботыСоСтруктурнымиПодразделениями = ЛОЖЬ Тогда
				Если Реквизит.Имя = "Организация" Или Реквизит.Имя = "СтруктурнаяЕдиница" Тогда
					// если в базе не ведется учет по структурным подразделениям, 
					// то организация и структурная единица должны совпадать с налогоплательщиком
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ДобавитьПолеВГруппировку(ЭлементСтруктуры, Реквизит.Имя);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ЭлементСтруктуры.Выбор, Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтруктуруПоУмолчанию()

&НаСервереБезКонтекста
Процедура ДобавитьПолеВГруппировку(ЭлементСтруктуры, ИмяПоля)
	
	НовоеПолеГруппировки = ЭлементСтруктуры.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	НовоеПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	НовоеПолеГруппировки.Использование = Истина;	

КонецПроцедуры // ДобавитьПолеВГруппировку()

&НаСервереБезКонтекста
Процедура ДобавитьПоказатели(ИмяРегистра, ИмяТаблицы, ЭлементСтруктуры)
	
	Если ИмяТаблицы = "ОстаткиИОбороты" Тогда
		ВыбранныеПоляНачальныйОстаток = ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ВыбранныеПоляНачальныйОстаток.Заголовок = НСтр("ru = 'Нач. остаток'");
		ВыбранныеПоляНачальныйОстаток.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
		ВыбранныеПоляПриход = ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ВыбранныеПоляПриход.Заголовок = НСтр("ru = 'Приход'");
		ВыбранныеПоляПриход.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
		ВыбранныеПоляРасход = ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ВыбранныеПоляРасход.Заголовок = НСтр("ru = 'Расход'");
		ВыбранныеПоляРасход.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
		ВыбранныеПоляКонечныйОстаток = ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ВыбранныеПоляКонечныйОстаток.Заголовок = НСтр("ru = 'Кон. остаток'");
		ВыбранныеПоляКонечныйОстаток.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
	КонецЕсли;
	
	Для каждого Ресурс Из Метаданные.РегистрыНакопления[ИмяРегистра].Ресурсы Цикл
		ВыбранныеПоля = ЭлементСтруктуры.Выбор;
		Если ИмяТаблицы = "Обороты" Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Оборот");
		ИначеЕсли ИмяТаблицы = "ОстаткиИОбороты" Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляНачальныйОстаток, Ресурс.Имя + "." + Ресурс.Имя + "НачальныйОстаток", Ресурс.Синоним);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляПриход, Ресурс.Имя + "." + Ресурс.Имя + "Приход", Ресурс.Синоним);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляРасход, Ресурс.Имя + "." + Ресурс.Имя + "Расход", Ресурс.Синоним);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляКонечныйОстаток, Ресурс.Имя + "." + Ресурс.Имя + "КонечныйОстаток", Ресурс.Синоним);
		ИначеЕсли ИмяТаблицы = "Движения" Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ДобавитьПоказатели()

&НаКлиенте
Процедура ВыборПоляРасшифровкиЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	ВыборПоляРасшифровкиЗавершениеСервер(РезультатЗакрытия);
	
	БухгалтерскиеОтчетыКлиент.ВыборПоляРасшифровкиЗавершение(РезультатЗакрытия, ДопПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ВыборПоляРасшифровкиЗавершениеСервер(РезультатЗакрытия) Экспорт
	
	ДанныеОбъекта = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеОбъекта.ДанныеРасшифровки, 
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	НастройкиКомпоновки = ОбработкаРасшифровки.Расшифровать(ДанныеОбъекта.НастройкиРасшифровки.Расшифровка, Новый ПолеКомпоновкиДанных(РезультатЗакрытия.Поле));
	
	ДанныеОбъекта.ДанныеРасшифровки.Настройки = НастройкиКомпоновки;
	
	Группировка = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПоследнийЭлементСтруктуры(ДанныеОбъекта.ДанныеРасшифровки);
	Если Группировка.Порядок.Элементы.Количество() = 0 Тогда
		Группировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	КонецЕсли;
	
	ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеОбъекта, ДанныеРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации()
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
	
КонецПроцедуры