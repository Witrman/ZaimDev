#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьПриВыводеЗаголовка,
							|ИспользоватьПриВыводеПодвала,
							|ИспользоватьДанныеРасшифровки,
							|ИспользоватьРасширенныеПараметрыРасшифровки",
							Истина, Истина, Истина, Истина, Ложь, Ложь);
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт
	
	ЗаголовокОтчета = НСтр("ru = 'Регистр налогового учета %1'");
	
	ИмяРегистра = ?(НЕ ПустаяСтрока(ПараметрыОтчета.ИмяРегистра), """" + Метаданные.РегистрыНакопления[ПараметрыОтчета.ИмяРегистра].Синоним + """", "");
	
	ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокОтчета, ИмяРегистра);
		
	Возврат ЗаголовокОтчета;
	
КонецФункции

Процедура ПриВыводеЗаголовка(ПараметрыОтчета,Результат) Экспорт
	
	СведенияОНалогоплательщике = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ПараметрыОтчета.Налогоплательщик, ПараметрыОтчета.КонецПериода);
	
	Макет = ПолучитьОбщийМакет("ЗаголовокРегистраНалоговогоУчета");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ПолучитьТекстЗаголовка(ПараметрыОтчета);

	Если СведенияОНалогоплательщике <> Неопределено Тогда 
		ОбластьЗаголовок.Параметры.Заполнить(СведенияОНалогоплательщике);
		ОбластьЗаголовок.Параметры.НалоговыйПериод = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(НачалоДня(ПараметрыОтчета.НачалоПериода), КонецДня(ПараметрыОтчета.КонецПериода), Истина);
	КонецЕсли;
	
	Результат.Вывести(ОбластьЗаголовок);
	
КонецПроцедуры

Процедура ПриВыводеПодвала(ПараметрыОтчета, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ЗаголовокРегистраНалоговогоУчета");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	Если ПараметрыОтчета.Налогоплательщик <> Неопределено Тогда 
		ОтветЛица = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(ПараметрыОтчета.Налогоплательщик, ПараметрыОтчета.КонецПериода);
		ОбластьПодвал.Параметры.ФИОРуководителя = ОтветЛица.Руководитель;
		ОбластьПодвал.Параметры.ФИОглБухгалтера = ОтветЛица.ГлавныйБухгалтер;
		ОбластьПодвал.Параметры.ФИОИсполнителя 	= ОтветЛица.ОтветственныйЗаРегистры;
		ОбластьПодвал.Параметры.ДатаСоставления = Формат(ОбщегоНазначения.ТекущаяДатаПользователя(), "ДФ=""дд ММММ гггг 'г.'""");	
	КонецЕсли;
	
	Результат.Вывести(ОбластьПодвал);
	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", ПараметрыОтчета.НачалоПериода);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", ?(ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода),КонецДня(ПараметрыОтчета.КонецПериода), ПараметрыОтчета.КонецПериода));
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПроизводственныйКалендарь"     , КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());

	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек, "Налогоплательщик", ПараметрыОтчета.Налогоплательщик, ВидСравненияКомпоновкиДанных.Равно);
	Если ПараметрыОтчета.ПоддержкаРаботыСоСтруктурнымиПодразделениями 
		И Схема.НаборыДанных["НаборДанныхИсточникДанных"].Поля.Найти("СтруктурнаяЕдиница") <> Неопределено Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек, "СтруктурнаяЕдиница", ПараметрыОтчета.СписокСтруктурныхЕдиниц, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Налогоплательщик"     , ПараметрыОтчета.Налогоплательщик);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "РазделНалоговогоУчета", ПараметрыОтчета.СтруктураРегистровИРазделовНУ[ПараметрыОтчета.ИмяРегистра]);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
		
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеОтборы    = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
		
	ДанныеОбъекта = ПолучитьИзВременногоХранилища(Адрес);
	
	ОтчетОбъект       = ДанныеОбъекта.Объект;
	ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;
	
	ДополнительныеСвойства.Вставить("РежимРасшифровки"       , Истина);
	ДополнительныеСвойства.Вставить("Налогоплательщик"       , ОтчетОбъект.Налогоплательщик);
	ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", ОтчетОбъект.СписокСтруктурныхЕдиниц);
	ДополнительныеСвойства.Вставить("ИмяРегистра"            , ОтчетОбъект.ИмяРегистра);
	ДополнительныеСвойства.Вставить("ИмяТаблицы"             , ОтчетОбъект.ИмяТаблицы);
	ДополнительныеСвойства.Вставить("НачалоПериода"          , ОтчетОбъект.НачалоПериода);
	ДополнительныеСвойства.Вставить("КонецПериода"           , ОтчетОбъект.КонецПериода);

	Период = Неопределено;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ДанныеРасшифровки.Настройки);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ДанныеОбъекта.Объект.СхемаКомпоновкиДанных));
	
	ЭтоДетальнаяЗапись = БухгалтерскиеОтчетыВызовСервера.ЭтоДетальнаяЗапись(ДанныеРасшифровки, Расшифровка);
	МассивПолейРасшифровки = БухгалтерскиеОтчетыВызовСервера.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки);
	МассивПолейРасшифровкиСРесурсами = БухгалтерскиеОтчетыВызовСервера.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, , Истина);
	
	// Получим имена полей расшифровываемой ячейки
	МассивПолей = Новый Массив; 
	Для каждого ПолеРасшифровки Из МассивПолейРасшифровкиСРесурсами Цикл
		Если ТипЗнч(ПолеРасшифровки) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда 
			МассивПолей.Добавить(ПолеРасшифровки.Поле);
		КонецЕсли;
	КонецЦикла;
	
	ПредставлениеОткрытьОбъект = НСтр("ru = 'Открыть ""%Значение%""'");
	ПредставлениеРасшифровать  = НСтр("ru = 'Расшифровать...'");
	
	СписокПунктовМеню = Новый СписокЗначений;
	
	Индекс = 0;
	Для каждого ПолеРасшифровки Из МассивПолейРасшифровки Цикл
		Если ТипЗнч(ПолеРасшифровки) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных")
		   И ПолеРасшифровки.Значение <> Null И Не БухгалтерскиеОтчетыКлиентСервер.ПростойТип(ПолеРасшифровки.Значение) Тогда
			Представление = СтрЗаменить(ПредставлениеОткрытьОбъект, "%Значение%", "" + ПолеРасшифровки.Поле + " = """ +  ПолеРасшифровки.Значение + """");
			СписокПунктовМеню.Добавить(ПолеРасшифровки.Значение, Представление,, БиблиотекаКартинок.Лупа);
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если Не ЭтоДетальнаяЗапись Тогда
		СписокПунктовМеню.Добавить("Расшифровать", ПредставлениеРасшифровать);
		РодителиПоля = Новый Массив;
		БухгалтерскиеОтчетыВызовСервера.ДобавитьРодителей(ДанныеРасшифровки.Элементы[Расшифровка], ДанныеРасшифровки, РодителиПоля);
		РодителиПоляПараметр = Новый СписокЗначений;
		Для Каждого Родитель Из РодителиПоля Цикл
			РодителиПоляПараметр.Добавить(Родитель.Поле);
		КонецЦикла;
		ПараметрыРасшифровки.Вставить("РодителиПоля", РодителиПоляПараметр);
	КонецЕсли;
	
	НастройкиРасшифровки = Новый Структура;
	НастройкиРасшифровки.Вставить("УниверсальныйРегистрНалоговогоУчета", ПользовательскиеНастройки);
	НастройкиРасшифровки.Вставить("Расшифровка", Расшифровка);
		
	ДанныеОбъекта.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
	Адрес = ПоместитьВоВременноеХранилище(ДанныеОбъекта, Адрес);
	ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
	ПараметрыРасшифровки.Вставить("ОткрытьОбъект"    , Ложь);
	
КонецПроцедуры

Процедура ОбработкаРасшифровкиОтчета(Расшифровка, СтандартнаяОбработка, ОтчетОбъект, ФормаОтчета) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЭтоДетальнаяЗапись = БухгалтерскиеОтчетыВызовСервера.ЭтоДетальнаяЗапись(ФормаОтчета.ДанныеРасшифровки, Расшифровка);
	
КонецПроцедуры


#КонецЕсли