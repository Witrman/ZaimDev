////////////////////////////////////////////////////////////////////////////////
// Описание формы
// Параметры фомры:
//  Организация - СправочникСсылка.Организации - Налогоплательщик, представляющий отчет
//  мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета - Дата - отчетный период формирования отчета
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	мВыбраннаяФорма = "ФормаОтчета2013Кв1";
	КодФормы 		= "ФормаОтчета";
	               		
	ВсегоСтраниц	= 1;     	
	мФорматНомераСтроки = "ЧЦ=8; ЧВН=; ЧГ=";
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруФормРегОтчета(ЭтотОбъект);	
			
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов   = Новый СписокЗначений;	
	СтруктураРеквизитовФормы.мПечатныеформы 		  = Новый СписокЗначений;	
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	// Значения по умолчанию
	мКодыСтрокПрочиеПоступления		= Новый Соответствие;
	мКодыСтрокПрочиеПоступления.Вставить(Перечисления.РазрезыДеятельности.Операционная, 	"15");
	мКодыСтрокПрочиеПоступления.Вставить(Перечисления.РазрезыДеятельности.Инвестиционная, 	"47");
	мКодыСтрокПрочиеПоступления.Вставить(Перечисления.РазрезыДеятельности.Финансовая, 		"74");
	
	СтруктураРеквизитовФормы.мКодыСтрокПрочиеПоступления =  мКодыСтрокПрочиеПоступления;	
	
	мКодыСтрокПрочиеВыбытия		= Новый Соответствие;
	мКодыСтрокПрочиеВыбытия.Вставить(Перечисления.РазрезыДеятельности.Операционная, 	"27");
	мКодыСтрокПрочиеВыбытия.Вставить(Перечисления.РазрезыДеятельности.Инвестиционная, 	"57");
	мКодыСтрокПрочиеВыбытия.Вставить(Перечисления.РазрезыДеятельности.Финансовая, 		"84");
	СтруктураРеквизитовФормы.мКодыСтрокПрочиеВыбытия =  мКодыСтрокПрочиеВыбытия;	
	
	СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями = РегламентированнаяОтчетностьПереопределяемый.ПоддержкаРаботыСоСтруктурнымиПодразделениями(); // перевести в переопределяемый модуль 

	СтруктураРеквизитовФормы.СтруктураСоответствияЭлементов = ЗаполнитьСтруктуруСоответствийЭлементов();
		
	// Общие механизмы
	ЗаполнитьСведенияОбОтчетномПериоде();
		
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	УстановитьФорматВывода();
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекФорма.КодФормы);
	КонецЦикла	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если Модифицированность Тогда 
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);	
		ТекстВопроса = НСТР("ru = 'Сохранить данные отчета?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);	
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(мСписокСтруктурныхЕдиниц, ЭтаФорма, СтандартнаяОбработка,,Налогоплательщик);	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда		
		мСписокСтруктурныхЕдиниц = Результат;		
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц); 		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ФормаВыбораИзКлассификатора") Тогда
		
		Если ВРег(ИсточникВыбора.ИмяМакета) = ВРег("КОДЫБЮДЖЕТНОЙКЛАССИФИКАЦИИ") Тогда 
			
			Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда 
				Код = ВыбранноеЗначение;
			Иначе 
				Код = ВыбранноеЗначение.КодСтроки;				
			КонецЕсли;
		// выбираются в форме 300.03
		
		
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЯзыкФормированияПриИзменении(Элемент)
	ЯзыкФормированияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	ЕдиницаИзмеренияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТочностьЕдиницыИзмеренияПриИзменении(Элемент)
	УстановитьФорматВывода();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "Разделы"

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)	
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.КодФормы = Элемент.ТекущиеДанные.КодФормы тогда
		Возврат;
	КонецЕсли;	
	
	//РазделыОтчетаПриАктивизацииСтрокиНаСервере(Элемент.ТекущиеДанные.КодФормы, Элемент.ТекущиеДанные.Многострочность, Элемент.ТекущиеДанные.ПризнакОсновной);	
		
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Для Каждого СтраницаФорм из Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы Цикл
		Элементы[СтраницаФорм.Имя].Видимость = СтраницаФорм.Имя = ЭтаФорма.КодФормы;	
	КонецЦикла;
	
	//ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "Отчеты"

&НаКлиенте
Процедура ФормаОтчетаПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = Область.Имя;	
	
	Если Найти(ИмяОбласти, "s_") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФормаОтчетаРасчет(Область.Имя, Область.Значение, Истина);
	
	Модифицированность = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Заполнить(Команда)
	Перезаполнить = Истина; // Для выполнения запроса на пересчет данных к пользователю
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения =  РегламентированнаяОтчетностьКлиент.ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Перезаполнить Тогда		
		Если СтрокаФормы.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстВопроса = "Перезаполнить данные формы и ее дополнительных форм?";
		Иначе
			ТекстВопроса = "Перезаполнить данные формы?";
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);
		Оповещение.ДополнительныеПараметры.Вставить("Перезаполнить", Перезаполнить);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);		

	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФорму(Команда)
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	 	
	
	Перезаполнить = ДополнительныеПараметры.Перезаполнить;
	
	НачатьЗамерВремени();
	
	ЗаполнитьАвтоНаСервере();	
	УстановитьФорматВывода();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	СохранитьДанные(); 
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	ОткрытьФормуНастройкиСтраниц();
КонецПроцедуры

&НаКлиенте
Процедура Расшифровка(Команда)
	Попытка
		ИмяЯчейки = ЭтотОбъект.ТекущийЭлемент.ТекущаяОбласть.Имя;
	Исключение
		ПоказатьПредупреждение(,"Активизируйте нужную ячейку отчета для расшифровки.");
		Возврат;
	КонецПопытки;
	
	ЦветРасшифровки = ФормаОтчетаПолеТабличногоДокументаСтраница1.Области.s_11_1.ЦветФона;
	
	Если ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда 
		
		ФормаОтчетаРасшифровкаСКД(ИмяЯчейки);			
	Иначе	
		ПоказатьПредупреждение(, "Расшифровка данной ячейки не поддерживается."+Символы.ПС+"Расшифровку содержат ячейки формы, выделенные желтым цветом.");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыФормы.Вставить("Организация",              Налогоплательщик);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	ПараметрыФормы.Вставить("мДатаНачалаСравнительногоПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаСравнительногоПериодаОтчета);
	ПараметрыФормы.Вставить("мДатаКонцаСравнительногоПериодаОтчета", СтруктураРеквизитовФормы.мДатаКонцаСравнительногоПериодаОтчета);
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, мВыбраннаяФорма, "") + "ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ОценкаПроизводительности

&НаКлиенте
Функция НачатьЗамерВремени()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "Регламентированный отчет ""о движении денежных средств (мсфо мсб)"" (заполнение)";
		ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент").НачатьЗамерВремени(Истина, КлючеваяОперация);
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеТаймера()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда 
		
		Возврат ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").НачатьЗамерВремени();
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьЗамер(ВремяНачала)
	
	Если ВремяНачала <> Неопределено 
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "Регламентированный отчет ""о движении денежных средств (мсфо мсб)"" (заполнение)";
		ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СохранитьДанные() Экспорт
	СохранитьДанныеСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
КонецПроцедуры

&НаСервере
// Процедура очистки формы
//
// параметр: ТекИмяФормы - имя очищаемой формы (=КодФормы)
//           ОчиститьВсе - признак вида очистки формы              
//
Процедура Очистить(ТекИмяФормы,ОчиститьВсе = Ложь) Экспорт
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОбластьФорматирования"); // служебная область, очистка которой не возможна		
    СписокПоказателейНеПодлежащихОчистке.Добавить("НаименованиеОрганизации");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ВидДеятельности");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Адрес");			
	СписокПоказателейНеПодлежащихОчистке.Добавить("РазмерностьПрописью");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Руководитель");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ГлавныйБухгалтер");
		
	РегламентированнаяОтчетность.ОчиститьСтруктуруДанныхИТабличноеПолеФормы(ЭтаФорма, ТекИмяФормы, ОчиститьВсе, СписокПоказателейНеПодлежащихОчистке);
	
КонецПроцедуры // Очистить()

&НаКлиенте
Процедура ОчиститьРеглОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Форма = ДополнительныеПараметры.Форма;	
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", Форма.КодФормы));
		Вложенность = СтрокаФормы.ПолучитьЭлементы().Количество() >0;	
		
		ОчиститьРеглОтчетЗавершениеНаСервере(СтрокаФормы.КодФормы, СтрокаФормы.Многострочность, Вложенность)	
	КонецЕсли;		
КонецПроцедуры 	

&НаСервере
Процедура ОчиститьРеглОтчетЗавершениеНаСервере(КодФормы, ПризнакМногострочности, Вложенность)		
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, ПризнакМногострочности, Вложенность);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеглОтчет(ВидОчистки)
	//ФормаЗаполнена = РегламентированнаяОтчетностьКлиентСервер.формаЗ(Форма.ИмяФормы, Форма.мСписокФормБезИерархии);
	Вложенность = Ложь;
	//
	Если ВидОчистки = "ОчиститьФорму" Тогда    				
		ТекстВопроса = НСТР("ru = 'Очистить данные формы?'");
		Вложенность = Ложь;  		
	ИначеЕсли ВидОчистки = "ОчиститьФормуИПриложения" Тогда				
		ТекстВопроса = НСТР("ru = 'Очистить форму и ее приложения?'");		
		Вложенность = Истина;		
		
	КонецЕсли;	
	Оповещение = Новый ОписаниеОповещения("ОчиститьРеглОтчетЗавершение", ЭтотОбъект, Новый Структура);		
	Оповещение.ДополнительныеПараметры.Вставить("Форма",    ЭтотОбъект);
	Оповещение.ДополнительныеПараметры.Вставить("КодФормы", ЭтотОбъект.КодФормы);
		
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, ,КодВозвратаДиалога.Да);

	
	//РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму")
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьПараметрыФормыНаКлиенте(Параметры) экспорт
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	УстановитьПериодОтчета();
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);		
	КонецЦикла		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормы(ТекФорма, Параметры)
	ЗаполнитьЗначенияСвойств(ТекФорма.СтруктураРеквизитовФормы, Параметры);
	
	ТекФорма.Налогоплательщик = Параметры.Организация;
	ТекФорма.мСписокСтруктурныхЕдиниц = Параметры.мСписокСтруктурныхЕдиниц;
	ТекФорма.ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ТекФорма.мСписокСтруктурныхЕдиниц);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяГлавнойФормы(ВыбраннаяФорма) экспорт
	Возврат СтрДлина(ВыбраннаяФорма)-7
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры инициализации отчета и структуры его данных

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокСтруктурныхЕдиниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");			
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");	
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаСравнительногоПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаСравнительногоПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");		
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");		
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");	
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);			
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);	
	СтруктураРеквизитовФормы.Вставить("мПериодичность", Параметры.мПериодичность);		
	СтруктураРеквизитовФормы.Вставить("НалоговыйКомитет", Неопределено);			
	СтруктураРеквизитовФормы.Вставить("мГод");	
	СтруктураРеквизитовФормы.Вставить("мКвартал");	
	СтруктураРеквизитовФормы.Вставить("мМесяц");	
	// индивидуальные параметры формы
	СтруктураРеквизитовФормы.Вставить("мПоддержкаРаботыСоСтруктурнымиПодразделениями");	
	СтруктураРеквизитовФормы.Вставить("СтруктураСоответствияЭлементов");
	
	СтруктураРеквизитовФормы.Вставить("мКодыСтрокПрочиеПоступления");		
	СтруктураРеквизитовФормы.Вставить("мКодыСтрокПрочиеВыбытия");	

КонецПроцедуры // СформироватьСтруктуруРеквизитовФормы

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;			
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	//ФормироватьСтруктуруСтраницОтчета();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
			ТочностьЕдиницыИзмерения = 0;
			ЯзыкФормирования 		 = "ru";
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();	
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	
	мСтруктураЗначений = Новый Структура;
	
	Если СтруктураРеквизитовФормы.Свойство("СформироватьФормуОтчетаАвтоматически") И СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически <> Неопределено Тогда		
		ЗначениеТаймера = ЗначениеТаймера();
		
		ЗаполнитьАвтоНаСервере();
		
		ЗаписатьЗамер(ЗначениеТаймера);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтчетномПериоде() Экспорт

	СтрПериодОтчета = ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ФП = истина");
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
		СтруктураРеквизитовФормы.мКвартал = Лев(СтрПериодОтчета,1);
		СтруктураРеквизитовФормы.мМесяц = Неопределено;
	Иначе
		СтруктураРеквизитовФормы.мМесяц = Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		СтруктураРеквизитовФормы.мКвартал = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мГод = Лев(Прав(СтрПериодОтчета,7),4);
		
КонецПроцедуры 

&НаСервере
// В зависимости от языка заполнения процедура загружает макет в поле табличного документа
//
Процедура ЗагрузитьМакетВТабличныйДокумент() экспорт
	
	// очищаем текущие данные
	
	Макет = мМакет;
	
	Если ЗначениеЗаполнено(ЯзыкФормирования) Тогда
		Макет.КодЯзыкаМакета = ЯзыкФормирования;		
	КонецЕсли;
	
	ВсегоСтраниц = 2;
	Для Сч = 1 по ВсегоСтраниц Цикл
		ТекТабличныйДокумент = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница"+ Сч];	
		
		ОбластьОтчета = Макет.ПолучитьОбласть("Страница"+ Сч);			
		ТекТабличныйДокумент.Очистить();
		ТекТабличныйДокумент.Вывести(ОбластьОтчета);	
		ТекТабличныйДокумент.АвтоМасштаб = Истина; 
	 КонецЦикла;		
	 
	//ТекТабличныйДокумент.АвтоМасштаб = Истина; 
	мЕстьМакет = Истина;		
КонецПроцедуры

// Заполняет параметры формы. Процедура выполняется
// только для немногострочных, неглавных форм (обычных форм).
// а такеж для мВыбраннаяФорма, когда вызывается при очистке
// из основной формы
//
//   Парам: ЭлементыГруппы - структура, содержащая элементы шапки, подвала и области 
//                           итогов многострочных форм
//
Процедура ЗаполнитьПараметры(ТекИмяФормы) Экспорт
	
	Если ТекИмяФормы = Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7) Тогда 				
		//заполним основные сведения об организации
		ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекИмяФормы);		
		УстановитьПериодОтчета();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПараметры()

////////////////////////////////////////////////////////////////////////////////
// Сохранение и восстановление данных

&НаСервере
Процедура СохранитьДанныеСервере()
	РегламентированнаяОтчетность.СохранитьОтчет(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()	
	РегламентированнаяОтчетность.ВосстановитьСохраненныйОтчет(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьДанныеСервере();
		Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;	
КонецПроцедуры   

////////////////////////////////////////////////////////////////////////////////
// Печать

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
            
    Перем СтруктураГруппы; 
    
    Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
        ТекстСообщения = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");            
        ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);                
                
        Возврат Ложь;
        
    КонецЕсли;
            
    СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
    СтруктураРеквизитовФормы.мРежимПечати = Истина;
    
    Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
        ВыборРасчета(КодФормы, Неопределено, Неопределено);
    КонецЕсли; 

    РегламентированнаяОтчетность.СформироватьСписокПечатаемыхЛистов(ЭтаФорма);
                 
        
    Возврат Истина;
    
КонецФункции


&НаСервере
Процедура ЕдиницаИзмеренияПриИзмененииНаСервере()
	УстановитьФорматВывода();
КонецПроцедуры

&НаСервере
Процедура ЯзыкФормированияПриИзмененииНаСервере()	
	РегламентированнаяОтчетность.ПередатьДанныеИзТабличногоПоляВСтруктуру(ЭтаФорма);
	ЗагрузитьМакетВТабличныйДокумент();	
		
	УстановитьПериодОтчета();
    УстановитьФорматВывода();
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиСтраниц()
	
// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРаздел = Элементы.РазделыОтчета.ТекущиеДанные.Страницы;		
	КонецЕсли;
	
	Для Каждого ТекФорма ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",ТекФорма.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			ТекущаяСтрокаСписка.Выгружать               = ТекФорма.Выгружать;
			ТекущаяСтрокаСписка.ПоказатьСтраницу        = ТекФорма.ПоказатьСтраницу;			
			ТекущаяСтрокаСписка.АвтополучениеИтогов     = ТекФорма.АвтополучениеИтогов;  
			ТекущаяСтрокаСписка.АвтоЗаполнение          = ТекФорма.АвтоЗаполнение;  
		КонецЕсли;		   
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокФормДерева",СписокФормДерева);
	
	ДопПараметры = Новый Структура("ТекущийРаздел",ТекущийРаздел);
	
	ОповещениеПослеЗакрытияФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастройкиСтраниц",ЭтотОбъект,ДопПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.НастройкиОтчета",ПараметрыФормы, ЭтаФорма,,,,ОповещениеПослеЗакрытияФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиСтраниц(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьДанныеФормы(РезультатЗакрытия, СписокФормДерева);
	
	Модифицированность = Истина;
	
	//обновим мСписокФормБезИерархии
	Для Каждого СтрокаФормы ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",СтрокаФормы.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			СтрокаФормы.Выгружать               = ТекущаяСтрокаСписка.Выгружать;
			СтрокаФормы.ПоказатьСтраницу        = ТекущаяСтрокаСписка.ПоказатьСтраницу;			
			СтрокаФормы.АвтополучениеИтогов     = ТекущаяСтрокаСписка.АвтополучениеИтогов;  
			СтрокаФормы.АвтоЗаполнение          = ТекущаяСтрокаСписка.АвтоЗаполнение;  
		КонецЕсли;			
	КонецЦикла; 	

	Если ДополнительныеПараметры.Свойство("ТекущийРаздел") И НЕ ДополнительныеПараметры.ТекущийРаздел = Неопределено Тогда  		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(РазделыОтчета, Новый Структура("СписокФормДереваСтраницы",ДополнительныеПараметры.ТекущийРаздел));
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;			
	КонецЕсли;  	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие

//Процедура выполняет выбор процедуры расчета.
//ВыборРасчета выполняется при восстановлении данных, при изменении поля табличного документа
//
//Параметры:    ТекФорма - имя текущей формы
//              Индекс - индекс строки для многострочной формы
//              Показатель - имя ячейки, откуда была вызвана процедура расчета многострочной
//                           формы, без указания номера строки (например, без "__1")
//
Процедура ВыборРасчета(ТекФорма, Индекс = Неопределено, Показатель = Неопределено) Экспорт
	Если ТекФорма = "ФормаОтчета" Тогда
		ФормаОтчетаРасчетНаСервере(Индекс, Показатель);	
	КонецЕсли;		
КонецПроцедуры // ВыборРасчета()

&НаСервере
Процедура ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы)
	ОргСведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(Налогоплательщик, ДатаПодписи);
	//Если организация не указана то не выводим никаких сведений
	Если ОргСведения = 0 Тогда
		Возврат;
	КонецЕсли;

	// Инициализируем переменные
	РННЮЛ = ""; 			// РНН	
	НаимЮЛПол = ""; 		// Полное наименование 	
	ИИН_БИН = ""; 			// ИИН_БИН	
	Руководитель = ""; 		// ФИО руководителя				
	ГлавныйБухгалтер = ""; 	// Главный бухгалтер
	Адрес = ""; 			// Адрес
	ОсновнойВидДеятельности = "";
	
	// Получаем данные
	ОргСведения.Свойство("РННЮЛ",     			РННЮЛ);
	ОргСведения.Свойство("БИН_ИИН",   			ИИН_БИН);
	ОргСведения.Свойство("ПолноеНаименование", 	НаимЮЛПол);	
	ОргСведения.Свойство("ЮридическийАдрес", 	Адрес);	
	ОргСведения.Свойство("Руководитель",		Руководитель);	
	ОргСведения.Свойство("ГлавныйБухгалтер",	ГлавныйБухгалтер);		
	ОргСведения.Свойство("ОсновнойВидДеятельности",	ОсновнойВидДеятельности);		
	                                         		
	// Производим операции связанные с текущей формой отчетности		
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"НаименованиеОрганизации",НаимЮЛПол);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"Адрес", Адрес + ", " + ИИН_БИН);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"ВидДеятельности", ОсновнойВидДеятельности);
	
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"Руководитель", Руководитель);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"ГлавныйБухгалтер", ГлавныйБухгалтер);
				
КонецПроцедуры

// Процедура формирует строку периода отчета на языке формирования отчета
&НаСервере
Процедура УстановитьПериодОтчета()
	ПериодОтчетаНаРусском 	= ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП=Истина");
	ПериодОтчетаНаКазахском	= ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Л=kk_KZ; ФП=Истина");	
	
	ПериодОтчета = НСТР("ru = " + """" + ПериодОтчетаНаРусском + """; kz = " + """" + ПериодОтчетаНаКазахском + """",ЯзыкФормирования);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "ПериодОтчета",	ПериодОтчета);						
КонецПроцедуры // УстановитьПериодОтчета()

&НаСервере
// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописью;
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописью = НСтр("ru = ""тенге""; kz = ""теңге""", ЯзыкФормирования);				
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописью = НСтр("ru = ""тыс. тенге""; kz = ""мың теңге""", ЯзыкФормирования);				
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописью = НСтр("ru = ""млн. тенге""; kz = ""млн. теңге""", ЯзыкФормирования);				
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";
	КонецЕсли;
	
	ВсегоСтраниц = 2;
	Для Сч = 1 по ВсегоСтраниц Цикл
		// Обход по страницам формы
		Для Каждого ОбластьТаблицы Из ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница" + Сч].Области Цикл
			// по областям каждой страницы
			Если Не ОбластьТаблицы.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(ОбластьТаблицы.Имя, "ОбластьФорматирования") = 0 Тогда
				// форматируемые облатси должны быть объединены в область Значения1, Значения 2 и т.д.
				Продолжить;
			КонецЕсли;
			
			Если ОбластьТаблицы.СодержитЗначение Тогда
				Если СокрЛП(ОбластьТаблицы.ТипЗначения) = "Число" Тогда
					ОбластьТаблицы.Формат = мСтрокаФормата;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "РазмерностьПрописью", РазмерностьПрописью, Истина);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "РазмерностьПрописью1", РазмерностьПрописью, Истина);

	
КонецПроцедуры // УстановитьФорматВывода()

&НаСервере
// Функция рассчитывает среднегодовую численность работников
Функция ПолучитьСреднегодовуюЧисленностьРаботников()
	мПризнакСистемыСотрудниковЗУП20 = Истина;
	
	Запрос = Новый Запрос;
								
	Запрос.УстановитьПараметр("парамНачГода", 					   НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));			
	Запрос.УстановитьПараметр("парамПериодПо", 					   КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамВнутреннееСовместительство",   Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", 	   мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("парамСписокИсключаемыхСостояний", 	Новый СписокЗначений());
	Запрос.УстановитьПараметр("парамРаботает",						"Работает");
	Запрос.УстановитьПараметр("парамУвольнение", 					Перечисления.ПричиныИзмененияСостояния.Увольнение);
								
	// Сформируем текст запроса с датами месяцев периода с начала года по конец текущего месяца
	// первый месяц квартала
	НачалоМесяца = НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПериодыТекст = "ВЫБРАТЬ 
					|	ДАТАВРЕМЯ(" + Формат (НачалоМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК НачалоМесяца,
					|	ДАТАВРЕМЯ(" + Формат (КонецМесяца(НачалоМесяца),"ДФ=гггг,М,д,Ч,м,с") + ") КАК КонецМесяца
					|";
	// прибавим остальные месяцы
	Пока НачалоМесяца <= НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Цикл
		НачалоМесяца = КонецМесяца(НачалоМесяца) + 1;
	   	ПериодыТекст = ПериодыТекст + "
	   								  |ОБЪЕДИНИТЬ ВСЕ 
	   								  |
	   								  |ВЫБРАТЬ 
	   								  |	   ДАТАВРЕМЯ(" + Формат(НачалоМесяца,"ДФ=гггг,М,д,Ч,м,с") + "),
	   								  |	   ДАТАВРЕМЯ(" + Формат(КонецМесяца(НачалоМесяца),"ДФ=гггг,М,д,Ч,м,с") + ")
	   								  |";
	КонецЦикла;	

	// Получим даты приема и увольнения для работников организации за период
	РаботникиОрганизацииТекст = "
	|ВЫБРАТЬ
	|	РаботникиОрганизации." +?(мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ФизЛицо КАК ФизЛицо,
	|	РаботникиОрганизации." +?(мПризнакСистемыСотрудниковЗУП20, "Сотрудник", "Приказ") + " КАК Приказ,
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.ОбособленноеПодразделение,
	|	&парамНачГода КАК Период,
	|	РаботникиОрганизации.ПричинаИзмененияСостояния,
	|	РаботникиОрганизации." +?(мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ВидЗанятости КАК ВидЗанятости
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&парамНачГода, 
	|				" +?(мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ВидЗанятости <> &парамВнутреннееСовместительство) КАК РаботникиОрганизации
	|
	|ГДЕ
	|	РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУвольнение
	|	И РаботникиОрганизации.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизации." +?(мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ФизЛицо КАК ФизЛицо,
	|	РаботникиОрганизации." +?(мПризнакСистемыСотрудниковЗУП20, "Сотрудник", "Приказ") + " КАК Приказ,
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.ОбособленноеПодразделение,
	|	РаботникиОрганизации.Период, 
	|	РаботникиОрганизации.ПричинаИзмененияСостояния,
	|	РаботникиОрганизации." +?(мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ВидЗанятости КАК ВидЗанятости
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Период > &парамНачГода И
	|	РаботникиОрганизации.Период <= &парамПериодПо И
	|	(РаботникиОрганизации." +?(мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ВидЗанятости <> &парамВнутреннееСовместительство)
	|";
	
	Запрос.Текст = РаботникиОрганизацииТекст;
	
	// Получим периоды назначений работников
	ПериодыНазначенийТекст = "
	|ВЫБРАТЬ
	|	ТекущееНазначение.ФизЛицо,
	|	ТекущееНазначение.Приказ,
	|	ТекущееНазначение.Организация,
	|	ТекущееНазначение.ВидЗанятости,
	|	ТекущееНазначение.Период КАК ДатаНачала,
	|	МИНИМУМ(ВЫБОР 
	|				КОГДА СледующееНазначение.Период ЕСТЬ NULL ТОГДА &парамПериодПо 
	|				ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(СледующееНазначение.Период, ДЕНЬ, -1), ДЕНЬ)
	|			КОНЕЦ) КАК ДатаОкончания
	|ИЗ
	|	(" + РаботникиОрганизацииТекст + ") КАК ТекущееНазначение
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + РаботникиОрганизацииТекст + ") КАК СледующееНазначение
	|		ПО ТекущееНазначение.ФизЛицо = СледующееНазначение.ФизЛицо
	|		   И ТекущееНазначение.Приказ = СледующееНазначение.Приказ
	|		   И ТекущееНазначение.Организация = СледующееНазначение.Организация
	|		   И ТекущееНазначение.Период < СледующееНазначение.Период
	|ГДЕ
	|	ТекущееНазначение.ПричинаИзмененияСостояния <> &парамУвольнение	
	|	И ТекущееНазначение.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц)
	|СГРУППИРОВАТЬ ПО
	|	ТекущееНазначение.ФизЛицо,
	|	ТекущееНазначение.Приказ,
	|	ТекущееНазначение.Организация,
	|	ТекущееНазначение.ВидЗанятости,
	|	ТекущееНазначение.Период	
	|";
	
	Запрос.Текст = ПериодыНазначенийТекст;
	
	// Разобьем данные о назначениях-состояниях на помесячные записи и подсчитаем число дней за каждый период
	ПериодыНазначенийТекст = "
	|ВЫБРАТЬ
	|	ПериодыНазначений.ФизЛицо,
	|	ПериодыНазначений.Приказ,
	|	ПериодыНазначений.ВидЗанятости,
	|	&парамРаботает КАК Состояние,
	|	ВЫБОР
	|		КОГДА ПериодыНазначений.ДатаНачала > Периоды.НачалоМесяца ТОГДА ПериодыНазначений.ДатаНачала
	|		ИНАЧЕ Периоды.НачалоМесяца
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР 
	|		КОГДА ПериодыНазначений.ДатаОкончания < Периоды.КонецМесяца ТОГДА ПериодыНазначений.ДатаОкончания
	|		ИНАЧЕ Периоды.КонецМесяца 
	|	КОНЕЦ КАК ДатаОкончания,
	|	ДЕНЬ(ВЫБОР // ДатаОкончания
	|			КОГДА ПериодыНазначений.ДатаОкончания < Периоды.КонецМесяца ТОГДА ПериодыНазначений.ДатаОкончания
	|			ИНАЧЕ Периоды.КонецМесяца 
	|		КОНЕЦ) - 
    |	ДЕНЬ(ВЫБОР // ДатаНачала
	|			КОГДА ПериодыНазначений.ДатаНачала > Периоды.НачалоМесяца ТОГДА ПериодыНазначений.ДатаНачала
	|			ИНАЧЕ Периоды.НачалоМесяца
	|		КОНЕЦ) + 1 КАК ДнейРаботыВМесяце,
	|	Периоды.НачалоМесяца,
	|	Периоды.КонецМесяца
	|ИЗ
	|	(" + ПериодыНазначенийТекст + ") КАК ПериодыНазначений
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ПериодыТекст + ") КАК Периоды
	|		ПО ПериодыНазначений.ДатаНачала <= Периоды.КонецМесяца 
	|		   И ПериодыНазначений.ДатаОкончания >= Периоды.НачалоМесяца 
	|";
	
	Запрос.Текст = ПериодыНазначенийТекст;
	
	// Определим среднесписочную численность за каждый месяц
	ЧисленностьТекст = "
	|ВЫБРАТЬ
	|	ПериодыНазначений.НачалоМесяца,
	|	ВЫРАЗИТЬ(СУММА(ПериодыНазначений.ДнейРаботыВМесяце) / ДЕНЬ(ПериодыНазначений.КонецМесяца) КАК ЧИСЛО(10, 0)) КАК Среднесписочная
	|ИЗ
	|	(" + ПериодыНазначенийТекст + ") КАК ПериодыНазначений
	|СГРУППИРОВАТЬ ПО
	|	ПериодыНазначений.НачалоМесяца, 
	|	ПериодыНазначений.КонецМесяца 
	|";
	
	Запрос.Текст = ЧисленностьТекст;
	
	// Выделим численность с начала года
	ЧисленностьТекст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(Численность.Среднесписочная / МЕСЯЦ(&парамПериодПо) ) КАК СреднесписочнаяСНачалаГода	
	|
	|ИЗ
	|	(" + ЧисленностьТекст + ") КАК Численность
	|";
	
	Запрос.Текст = ЧисленностьТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	
	СреднегодоваяЧисленность = 0;
	Если Выборка.Следующий() Тогда
		СреднегодоваяЧисленность = ?(ЗначениеЗаполнено(Выборка.СреднесписочнаяСНачалаГода), Выборка.СреднесписочнаяСНачалаГода, 0);		
	КонецЕсли;	
	
	Возврат СреднегодоваяЧисленность;
КонецФункции // ПолучитьСреднегодовуюЧисленностьРаботников()

&НаСервере
// Процедура устанавливает значение показателя  в структуре отчета, с учетом уже имеющихся сумм
Процедура УстановитьЗначенияПоказателей(КодФормы, ТаблицаДанных, КодСтрокиОтчета, Значение, ТабличныйДокумент)
	
	Сумма = Значение + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, КодСтрокиОтчета);	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,КодСтрокиОтчета, Сумма, ТабличныйДокумент);
КонецПроцедуры

&НаСервере
// Функция заполняет структуру данными о соответствии счета БУ - строке баланса
//
Функция ЗаполнитьСтруктуруСоответствийЭлементов()
	СтруктураСоответствияЭлементов = Новый Структура;
	
	МакетСоставаПоказателей = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("СоставПоказателей");
	ТекОбласть    			= МакетСоставаПоказателей.Область("Структура" + Прав(мВыбраннаяФорма,7));
	
	Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
		// перебираем строки макета		
		ИмяЭлемента = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
		ГрафаОтчета = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
		
		Если ЗначениеЗаполнено(ИмяЭлемента) Тогда         // признак конечной строки
			СтруктураСоответствияЭлементов.Вставить(ИмяЭлемента, ГрафаОтчета);			
		КонецЕсли;		
	КонецЦикла; 	
	
	Возврат СтруктураСоответствияЭлементов;
КонецФункции // ЗаполнитьСтруктуруСоответствийЭлементов

&НаСервере
// Функция возвращает код строки макета отчета для конкретного счета
 // 
Функция ПолучитьКодСтрокиОтчета(Элемент, знач ЭлементПредопределенный = Ложь, знач ВидДеятельности = Неопределено, знач ВидДвижения = Неопределено, Знач СуммаОборотДт)
			
	КодСтроки = Неопределено;
	// значения по умолчанию
	Если НЕ ЗначениеЗаполнено(ВидДвижения) Тогда 
		Если ЗначениеЗаполнено(СуммаОборотДт) Тогда
			ВидДвижения = Перечисления.ВидыДвиженийДенежныхСредств.Поступление;
		Иначе
			ВидДвижения = Перечисления.ВидыДвиженийДенежныхСредств.Выбытие;
		КонецЕсли;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидДеятельности) Тогда
		ВидДеятельности = Перечисления.РазрезыДеятельности.Операционная;
	КонецЕсли;
	  	
	Если ЭлементПредопределенный = Истина Тогда
		// поиск счета в Структуре соответствия
		ИмяПредопределенногоЭлемента = Справочники.ДвиженияДенежныхСредств.ПолучитьИмяПредопределенного(Элемент);
		Если СтруктураРеквизитовФормы.СтруктураСоответствияЭлементов.Свойство(ИмяПредопределенногоЭлемента) Тогда
			КодСтроки  = СтруктураРеквизитовФормы.СтруктураСоответствияЭлементов[ИмяПредопределенногоЭлемента];
		КонецЕсли;	
	КонецЕсли;
		
		
	Если НЕ ЗначениеЗаполнено(КодСтроки) Тогда
		// Включаем его  в прочие поступления или выбытия в зависимости от вида деятельности
		Если ВидДвижения  = Перечисления.ВидыДвиженийДенежныхСредств.Поступление Тогда
			КодСтроки = СтруктураРеквизитовФормы.мКодыСтрокПрочиеПоступления[ВидДеятельности]; 		
		Иначе	
			КодСтроки = СтруктураРеквизитовФормы.мКодыСтрокПрочиеВыбытия[ВидДеятельности]; 					
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат КодСтроки;
КонецФункции // ПолучитьКодСтрокиОтчета

&НаКлиенте
// Выполняет расчет вычисляемых показателей формы
// Параметр Изменено определяет откуда была вызвана данная процедура
// 
// При Изменено = Истина вызывается при изменении поля табличного документа,
// в остальных случаях параметр = Ложь.
// Основное назначение - манипуляция со значениями полей, которые которые подлежит не суммовому расчету, 
// а расчету суммы с добавлением входящих в него значений
//
Процедура ФормаОтчетаРасчет(ИмяЯчейки, ЗначениеЯчейки, Изменено = Ложь)

	 //Расчет вычисляемых ячеек
	
	ТекИмяФормы = "ФормаОтчета";	
	ФормаОтчетаРасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки);	
			    	                	
КонецПроцедуры   //ФормаРасчет()

&НаСервере
Процедура ФормаОтчетаРасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки )
	ТекИмяФормы = "ФормаОтчета";
	
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,ИмяЯчейки ,ЗначениеЯчейки);
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ТекИмяФормы);	
	
	Для НомерПериода = 1 по 2 Цикл
		// Операционная деятельность
		
		// 10. 1. Поступление денежных средств, всего(сумма строк с 11 по 15)		
		Итого = 0;
		Для Счетчик  = 11 по 15 Цикл
			НомерСтроки = "s_" + Формат(Счетчик,"ЧЦ=2; ЧДЦ=0; ЧВН=") + "_";			
			Итого = Итого + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,НомерСтроки + НомерПериода);
		КонецЦикла;	
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_10_" + НомерПериода ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница1);
		
		
		// 20. 2. Выбытие денежных средств, всего (сумма строк с 21 по 27)			
		Итого = 0;
		Для Счетчик  = 21 по 27 Цикл
			НомерСтроки = "s_" + Формат(Счетчик,"ЧЦ=2; ЧДЦ=0; ЧВН=") + "_";			
			Итого = Итого + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,НомерСтроки + НомерПериода);
		КонецЦикла;	
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,"s_20_" + НомерПериода ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница1);
		
		// 30 . Чистая сумма денежных средств от операционной деятельности (стр. 010 - стр. 020)
		Итого = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_10_" + НомерПериода) - 
				РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_20_" + НомерПериода);
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,"s_30_" + НомерПериода ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница1);
		// Инвестиционная деятельность
		// 40. 1. Поступление денежных средств, всего(сумма строк с 41 по 47)		
		Итого = 0;
		Для Счетчик  = 41 по 47 Цикл
			НомерСтроки = "s_" + Формат(Счетчик,"ЧЦ=2; ЧДЦ=0; ЧВН=") + "_";			
			Итого = Итого + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,НомерСтроки + НомерПериода);
		КонецЦикла;	
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,"s_40_" + НомерПериода ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница1);
		
		
		// 50. 2. Выбытие денежных средств, всего (сумма строк с 51 по 57)			
		Итого = 0;
		Для Счетчик  = 51 по 57 Цикл
			НомерСтроки = "s_" + Формат(Счетчик,"ЧЦ=2; ЧДЦ=0; ЧВН=") + "_";			
			Итого = Итого + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,НомерСтроки + НомерПериода);
		КонецЦикла;	
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,"s_50_" + НомерПериода ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница1);
		
		// 60 . Чистая сумма денежных средств от инвестиционной деятельности (стр. 040 - стр. 050)
		Итого = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_40_" + НомерПериода) - 
				РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_50_" + НомерПериода);
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,"s_60_" + НомерПериода ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница1);

		
		// Финансовая деятельность
		// 70. 1. Поступление денежных средств, всего(сумма строк с 71 по 74)		
		Итого = 0;
		Для Счетчик  = 71 по 74 Цикл
			НомерСтроки = "s_" + Формат(Счетчик,"ЧЦ=2; ЧДЦ=0; ЧВН=") + "_";			
			Итого = Итого + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,НомерСтроки + НомерПериода);
		КонецЦикла;	
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,"s_70_" + НомерПериода ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница2);
		
		
		// 80. 2. Выбытие денежных средств, всего (сумма строк с 81 по 84)			
		Итого = 0;
		Для Счетчик  = 81 по 84 Цикл
			НомерСтроки = "s_" + Формат(Счетчик,"ЧЦ=2; ЧДЦ=0; ЧВН=") + "_";			
			Итого = Итого + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,НомерСтроки + НомерПериода);
		КонецЦикла;	
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,"s_80_" + НомерПериода ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница2);
		
		// 90 . Чистая сумма денежных средств от финансовой деятельности (стр. 070 - стр. 080)
		Итого = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_70_" + НомерПериода) - 
				РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_80_" + НомерПериода);
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,"s_90_" + НомерПериода ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница2);

		// 100.	Итого:            Увеличение +/- уменьшение денежных средств (стр. 030 +/- стр. 060 +/- стр. 090)
		Итого = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_30_" + НомерПериода) + 
				РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_60_" + НомерПериода) + 
				РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_90_" + НомерПериода);
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,"s_100_" + НомерПериода ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница2);	
		
	КонецЦикла;		
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, КодФормы, ТаблицаДанных);
КонецПроцедуры

&НаСервере
Функция ФормаРассчитатьДанныеФормы(ДатаНачалаПериода, ДатаОкончанияПериода) 		
	
	Запрос = Новый Запрос;	
	ИсключатьВнутренниеОбороты = Истина;	
	УсловиеКорСчета = ?(ИсключатьВнутренниеОбороты, "(НЕ КорСчет В Иерархии (&СчетДС))", " ");
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТиповойОбороты.Счет,
				   |	ТиповойОбороты.КорСчет,
	               |	ТиповойОбороты.Субконто1,
				   |	ВЫРАЗИТЬ(ТиповойОбороты.Субконто1 КАК Справочник.СтатьиДвиженияДенежныхСредств).ДвижениеДенежныхСредств.Предопределенный КАК Предопределенный,
				   |	ВЫРАЗИТЬ(ТиповойОбороты.Субконто1 КАК Справочник.СтатьиДвиженияДенежныхСредств).РазрезДеятельности КАК ВидДеятельности,
				   |	ВЫРАЗИТЬ(ТиповойОбороты.Субконто1 КАК Справочник.СтатьиДвиженияДенежныхСредств).ВидДвижения КАК ВидДвижения,
				   |	ВЫРАЗИТЬ(ТиповойОбороты.Субконто1 КАК Справочник.СтатьиДвиженияДенежныхСредств).ДвижениеДенежныхСредств КАК ДвижениеДенежныхСредств,
	               |	ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) КАК СуммаОборотДт,
	               |	ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) КАК СуммаОборотКт
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Обороты(&ДатаНачала, &ДатаОкончания, , Счет В ИЕРАРХИИ (&СчетДС), &ВидыСубконто, Организация В (&СписокОрганизаций), " + УсловиеКорСчета + " , ) КАК ТиповойОбороты";
				   
	
	
	Запрос.УстановитьПараметр("ДатаНачала", 			ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", 			ДатаОкончанияПериода);
	Запрос.УстановитьПараметр("СписокОрганизаций", 		мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("ВидыСубконто",			ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиДвиженияДенежныхСредств);
	Запрос.УстановитьПараметр("СчетДС", 				ПланыСчетов.Типовой.ДенежныеСредства);
		                                                                        		                	           	
	Результат = Запрос.Выполнить();
		     	
	Возврат Результат;		 

КонецФункции // ФормаРассчитатьДанныеФормы()

&НаСервере
Функция ФормаРассчитатьДанныеФормыПоОстаткамДС(ДатаНачалаПериода, ДатаОкончанияПериода) 
		
	Запрос = Новый Запрос;		
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ТиповойОстаткиИОбороты.СуммаНачальныйОстаток) КАК СуммаНачальныйОстаток,
				   |	СУММА(ТиповойОстаткиИОбороты.СуммаКонечныйОстаток) КАК СуммаКонечныйОстаток
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , , Счет В ИЕРАРХИИ (&СчетДС), , Организация В (&СписокОрганизаций)) КАК ТиповойОстаткиИОбороты";
				   
	
	
	Запрос.УстановитьПараметр("ДатаНачала", 			ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", 			ДатаОкончанияПериода);
	Запрос.УстановитьПараметр("СписокОрганизаций", 		мСписокСтруктурныхЕдиниц);	
	Запрос.УстановитьПараметр("СчетДС", 				ПланыСчетов.Типовой.ДенежныеСредства);
		                                                                        		                	           	
	Результат = Запрос.Выполнить();
		     	
	Возврат Результат;		 
	
КонецФункции // ФормаРассчитатьДанныеФормы()

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
		
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, Ложь,Ложь);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, КодФормы);	
	   
	// получаем данные за текущий и за предыдущий период
	Для НомерПериода = 1 по 2 Цикл
		Если НомерПериода = 1 Тогда
			ВыборкаРезультата = ФормаРассчитатьДанныеФормы(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		Иначе
			ВыборкаРезультата = ФормаРассчитатьДанныеФормы(СтруктураРеквизитовФормы.мДатаНачалаСравнительногоПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаСравнительногоПериодаОтчета);
		КонецЕсли;
		
		ВыборкаОтчета = ВыборкаРезультата.Выбрать();
		Пока ВыборкаОтчета.Следующий() Цикл					
			КодСтрокиОтчета = ПолучитьКодСтрокиОтчета(ВыборкаОтчета.ДвижениеДенежныхСредств, ВыборкаОтчета.Предопределенный, ВыборкаОтчета.ВидДеятельности, ВыборкаОтчета.ВидДвижения, ВыборкаОтчета.СуммаОборотДт);			
			Если Число(КодСтрокиотчета)> 60 Тогда
				ТабличныйДокумент = ФормаОтчетаПолеТабличногоДокументаСтраница2;
			Иначе
				ТабличныйДокумент = ФормаОтчетаПолеТабличногоДокументаСтраница1;
			КонецЕсли;
									
			Сумма = 0;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаОтчета.ВидДвижения) Тогда 
				Если ЗначениеЗаполнено(ВыборкаОтчета.СуммаОборотДт) Тогда
					ВидДвижения = Перечисления.ВидыДвиженийДенежныхСредств.Поступление;
					Сумма  = ВыборкаОтчета.СуммаОборотДт;
				Иначе
					ВидДвижения = Перечисления.ВидыДвиженийДенежныхСредств.Выбытие;
					Сумма  = ВыборкаОтчета.СуммаОборотКт;
				КонецЕсли;
			Иначе 				
				Если ВыборкаОтчета.ВидДвижения = Перечисления.ВидыДвиженийДенежныхСредств.Выбытие Тогда
					Сумма = ВыборкаОтчета.СуммаОборотКт - ВыборкаОтчета.СуммаОборотДт;					
				Иначе 				
					Сумма = ВыборкаОтчета.СуммаОборотДт - ВыборкаОтчета.СуммаОборотКт;
				КонецЕсли; 				
			КонецЕсли;     		
			
			// сумма с учетом уже имеющихся данных
			УстановитьЗначенияПоказателей(КодФормы, ТаблицаДанных, "s_" + КодСтрокиОтчета + "_" + НомерПериода, Сумма, ТабличныйДокумент);				
		КонецЦикла;	
		
		// заполним данные по остаткам
		Если НомерПериода = 1 Тогда
			ВыборкаРезультата = ФормаРассчитатьДанныеФормыПоОстаткамДС(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		Иначе
			ВыборкаРезультата = ФормаРассчитатьДанныеФормыПоОстаткамДС(СтруктураРеквизитовФормы.мДатаНачалаСравнительногоПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаСравнительногоПериодаОтчета);			
		КонецЕсли;		
		
		ВыборкаОтчета = ВыборкаРезультата.Выбрать();
		ВыборкаОтчета.Следующий();
		УстановитьЗначенияПоказателей(КодФормы, ТаблицаДанных, "s_110_" + НомерПериода, ВыборкаОтчета.СуммаНачальныйОстаток, ФормаОтчетаПолеТабличногоДокументаСтраница2);
		УстановитьЗначенияПоказателей(КодФормы, ТаблицаДанных, "s_120_" + НомерПериода, ВыборкаОтчета.СуммаКонечныйОстаток, ФормаОтчетаПолеТабличногоДокументаСтраница2);
	КонецЦикла; 
		
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, КодФормы, ТаблицаДанных);		
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы,"СреднегодоваяЧисленность", ПолучитьСреднегодовуюЧисленностьРаботников());
			
	ФормаОтчетаРасчетНаСервере(Неопределено, Неопределено);	
	
	Модифицированность = Истина;
	УстановитьФорматВывода();	
КонецПроцедуры

&НаСервере
Функция ФормаОтчетаПолучитьСписокЭлементовВключаемыхВРасшифровку(КодСтроки, ПризнакСчетовВключаемыхВСтроку = Истина)
	СписокЭлементов  = Новый СписокЗначений;
			
	Для Каждого ЭлементСоответствия из СтруктураРеквизитовФормы.СтруктураСоответствияЭлементов Цикл
		Если (ЭлементСоответствия.Значение = КодСтроки) = ПризнакСчетовВключаемыхВСтроку Тогда
			Попытка
				СписокЭлементов.Добавить(Справочники.ДвиженияДенежныхСредств[ЭлементСоответствия.Ключ]);
			Исключение
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;		

	Возврат СписокЭлементов; 
КонецФункции

&НаКлиенте
Процедура ФормаОтчетаРасшифровкаСКД(ПолноеИмяЯчейки)
	Если Найти(ПолноеИмяЯчейки, "s_") = 0 Тогда 
		Возврат;
	КонецЕсли;  				
	
	КодПериода = Прав(ПолноеИмяЯчейки, 1);
	ИмяЯчейки = Сред(ПолноеИмяЯчейки, 3, 2);	
	
	Попытка
		ЧисловойКодЯчейки = Число(ИмяЯчейки);		
	Исключение
		ЧисловойКодЯчейки = 0;
	КонецПопытки;
	
	РасшифровкаОстатков = ?(Найти(ПолноеИмяЯчейки, "s_110") <> 0 ИЛИ Найти(ПолноеИмяЯчейки, "s_120") <> 0, Истина, Ложь);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", 	?(КодПериода = "1", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаНачалаСравнительногоПериодаОтчета));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  	?(КодПериода = "1", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаСравнительногоПериодаОтчета));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ТипДанных", 		"РегистрыБухгалтерии");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяОбъекта", 	"Типовой");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяТаблицы", 	?(РасшифровкаОстатков,"ОстаткиИОбороты" , "Обороты"));
	//ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ПолучитьАдресМакетаСКД());

	// Отборы
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";	
    БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Организация",  мСписокСтруктурныхЕдиниц, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет",  ПредопределенноеЗначение("ПланСчетов.Типовой.ДенежныеСредства"), ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);		
	
	// Без внутренних оборотов
	Если НЕ РасшифровкаОстатков Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "КорСчет",  ПредопределенноеЗначение("ПланСчетов.Типовой.ДенежныеСредства"), ВидСравненияКомпоновкиДанных.НЕВСпискеПоИерархии);	
	КонецЕсли;
	
	
	// Сортировка
	ПользовательскиеСортировки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ПорядокКомпоновкиДанных"));
	ПользовательскиеСортировки.ИдентификаторПользовательскойНастройки = "Порядок";
	
	НовыйЭлементПорядка = ПользовательскиеСортировки.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовыйЭлементПорядка.Использование  = Истина;
	НовыйЭлементПорядка.Поле  = Новый ПолеКомпоновкиДанных("Субконто2");
	
	// Группировки	
	МассивГруппировок = Новый Массив();
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "Организация", НСтр("ru = 'Организация'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	Если РасшифровкаОстатков Тогда
		МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "Счет", НСтр("ru = 'Счет'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Иерархия")));
		МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "Субконто1", НСтр("ru = 'Субконто1'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	Иначе	
		МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "Субконто2.ВидДвижения", НСтр("ru = 'Вид движения'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
		МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "Субконто2.РазрезДеятельности", НСтр("ru = 'Разрез деятельности'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
		МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "Субконто2.ДвижениеДенежныхСредств", НСтр("ru = 'Движение денежных средств'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
		МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "Субконто2", НСтр("ru = 'Статья движения денежных средств'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	КонецЕсли;

	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка",  МассивГруппировок);
	Если НЕ РасшифровкаОстатков Тогда
		// Отбор по статье ВидуДеятельности и ВидуДвижения
		Если ЧисловойКодЯчейки < 20  Тогда
			ВидДеятельности = ПредопределенноеЗначение("Перечисление.РазрезыДеятельности.Операционная");
			ВидДвижения = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.Поступление");
		ИначеЕсли ЧисловойКодЯчейки < 30  Тогда
			ВидДеятельности = ПредопределенноеЗначение("Перечисление.РазрезыДеятельности.Операционная");
			ВидДвижения = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.Выбытие");
		ИначеЕсли ЧисловойКодЯчейки < 50  Тогда
			ВидДеятельности = ПредопределенноеЗначение("Перечисление.РазрезыДеятельности.Инвестиционная");
			ВидДвижения = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.Поступление");
		ИначеЕсли ЧисловойКодЯчейки < 60  Тогда
			ВидДеятельности = ПредопределенноеЗначение("Перечисление.РазрезыДеятельности.Инвестиционная");
			ВидДвижения = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.Выбытие");
		ИначеЕсли ЧисловойКодЯчейки < 80  Тогда	
			ВидДеятельности = ПредопределенноеЗначение("Перечисление.РазрезыДеятельности.Финансовая");
			ВидДвижения = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.Поступление");
		ИначеЕсли ЧисловойКодЯчейки < 90  Тогда		
			ВидДеятельности = ПредопределенноеЗначение("Перечисление.РазрезыДеятельности.Финансовая");
			ВидДвижения = ПредопределенноеЗначение("Перечисление.ВидыДвиженийДенежныхСредств.Выбытие");
		КонецЕсли;	
							
		// Дополнительные отборы
		Если НЕ ЗначениеЗаполнено(ВидДеятельности) ИЛИ СтруктураРеквизитовФормы.мКодыСтрокПрочиеПоступления[ВидДеятельности] = ИмяЯчейки ИЛИ СтруктураРеквизитовФормы.мКодыСтрокПрочиеВыбытия[ВидДеятельности] = ИмяЯчейки Тогда		
					
			// основная статья и пустые статьи			
			УсловиеОтбора = ПользовательскиеОтборы.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			УсловиеОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;			
				
			Если СтруктураРеквизитовФормы.мКодыСтрокПрочиеВыбытия[ВидДеятельности] = ИмяЯчейки  ИЛИ СтруктураРеквизитовФормы.мКодыСтрокПрочиеПоступления[ВидДеятельности] = ИмяЯчейки Тогда
				
				УсловиеОтбораИ = УсловиеОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				УсловиеОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;	
				Если СтруктураРеквизитовФормы.мКодыСтрокПрочиеВыбытия[ВидДеятельности] = ИмяЯчейки Тогда
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(УсловиеОтбораИ, "СуммаОборотКт", 0 , ВидСравненияКомпоновкиДанных.НеРавно);
				Иначе
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(УсловиеОтбораИ, "СуммаОборотДт", 0 , ВидСравненияКомпоновкиДанных.НеРавно);
				КонецЕсли; 	
				
				УсловиеОтбораИЛИ = УсловиеОтбораИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				УсловиеОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;			
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(УсловиеОтбораИЛИ, "Субконто2", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(УсловиеОтбораИЛИ, "Субконто2.ВидДвижения", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(УсловиеОтбораИЛИ, "Субконто2.РазрезДеятельности", , ВидСравненияКомпоновкиДанных.НеЗаполнено);				
							
			КонецЕсли; 		
				
			УсловиеОтбораИ = УсловиеОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			УсловиеОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;	
					
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(УсловиеОтбораИ, "Субконто2.РазрезДеятельности",  ВидДеятельности, ВидСравненияКомпоновкиДанных.Равно);					
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(УсловиеОтбораИ, "Субконто2.ВидДвижения", ВидДвижения, ВидСравненияКомпоновкиДанных.Равно);			
			// в строки прочих активов и прочих обязательств могу входить счета, не учетнные в базовом соответствии (например, счета, добавленные пользователем)
			// поэтому в эти строки должны входить все, счета не учтенные в остальных строках и имеющих нужный вид счета			
			СписокЭлементовДДС = ФормаОтчетаПолучитьСписокЭлементовВключаемыхВРасшифровку(ИмяЯчейки, Ложь); // получаем список счетов исключаемых из строки						
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(УсловиеОтбораИ, "Субконто2.ДвижениеДенежныхСредств", СписокЭлементовДДС, ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии);								
			//СписокЭлементовДДС = ФормаОтчетаПолучитьСписокЭлементовВключаемыхВРасшифровку(ИмяЯчейки, Ложь); // получаем список счетов исключаемых из строки			
			//БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(УсловиеОтбораИ, "Субконто2.ДвижениеДенежныхСредств",  СписокЭлементовДДС, ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии);
					

		Иначе // получаем счета для указанной строки
			СписокЭлементовДДС = ФормаОтчетаПолучитьСписокЭлементовВключаемыхВРасшифровку(ИмяЯчейки); 
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Субконто2.ДвижениеДенежныхСредств",  СписокЭлементовДДС, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);										
			
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Субконто2.РазрезДеятельности",  ВидДеятельности, ВидСравненияКомпоновкиДанных.Равно);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Субконто2.ВидДвижения", ВидДвижения, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	КонецЕсли;	
	//ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПараметрыДанных", МассивПараметровДанных);
	
	ПользовательскиеПоля = ПользовательскиеНастройки.Элементы.Добавить(Тип("ВыбранныеПоляКомпоновкиДанных"));	
	ПользовательскиеПоля.ИдентификаторПользовательскойНастройки = "Выбор";	    	
	Если РасшифровкаОстатков Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаНачальныйОстаток", 	"Сальдо на начало");	
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаКонечныйОстаток", 	"Сальдо на конец");	
	Иначе	
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Счет", "Счет");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "КорСчет", "Кор. счет");	
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаОборот", 	"Оборот за период");	
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаОборотДт", "Оборот Дт");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаОборотКт", "СуммаОборот Кт");
	КонецЕсли;	
	
	// Прочие настройки
	ТекстЗаголовка = НСТР("ru = 'Регистр бухгалтерского учета к строке %1 Отчета о движении денежных средств'");	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Заголовок", 	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, ИмяЯчейки));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", Истина);	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьПодписи", Истина); 	
	
	ИмяРазделаРасшифровки = "Баланс " + СтруктураРеквизитовФормы.мГод;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ВыводитьЗаголовок", Истина);	
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", ИмяРазделаРасшифровки);
	//ПараметрыФормы.Вставить("ЗаполняемыеНастройки",ЗаполняемыеНастройки );	
    
	ОткрытьФорму("Отчет.УниверсальныйОтчетПоМетаданным.Форма.ФормаОтчета", ПараметрыФормы,, Истина);
КонецПроцедуры

//Обход ситуации, когда очищаются значения в клиент-сервер
&НаКлиенте
Процедура ПанельФормаОтчетаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ПанельФормаОтчетаПриСменеСтраницыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПанельФормаОтчетаПриСменеСтраницыНаСервере()
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, КодФормы);
	
	УстановитьФорматВывода();	

КонецПроцедуры
