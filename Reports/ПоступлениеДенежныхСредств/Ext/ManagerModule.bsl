#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПриВыводеЗаголовка,
							|ИспользоватьВнешниеНаборыДанных,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки,
							|ИспользоватьРасширенныеПараметрыРасшифровки",
							Истина, Истина, Истина, Истина, Истина, Истина);
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт
	
	ТекстОрганизации = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ПараметрыОтчета.СписокСтруктурныхЕдиниц,,, Истина);
	
	ЗаголовокОтчета = НСтр("ru = 'Поступления денежных средств %1'");
	ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ЗаголовокОтчета, БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода));
		
	Если ОрганизацияВНачале Тогда
		ЗаголовокОтчета = ТекстОрганизации + Символы.ПС + ЗаголовокОтчета;
	Иначе
		ЗаголовокОтчета = ЗаголовокОтчета + " " + ТекстОрганизации;
	КонецЕсли;
	
	Возврат ЗаголовокОтчета;
	
КонецФункции

Процедура ПриВыводеЗаголовка(ПараметрыОтчета, Результат) Экспорт
	
	МакетЗаголовок   = ПолучитьОбщийМакет("ЗаголовокОтчета");
	ОбластьЗаголовок = МакетЗаголовок.ПолучитьОбласть("Заголовок");
	
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ПолучитьТекстЗаголовка(ПараметрыОтчета);
	
	Результат.Вывести(ОбластьЗаголовок);
	
КонецПроцедуры

Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СчетаКонтрагентов.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаКД
	|ИЗ
	|	ПланСчетов.Типовой.ВидыСубконто КАК СчетаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ТиповойВидыСубконто.Ссылка КАК Ссылка
	|		ИЗ
	|			ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто
	|		ГДЕ
	|			ТиповойВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтотиповые.Договоры)) КАК СчетаДоговоров
	|		ПО СчетаКонтрагентов.Ссылка = СчетаДоговоров.Ссылка
	|ГДЕ
	|	СчетаКонтрагентов.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступленияДС.Организация КАК Организация,
	|	СУММА(ПоступленияДС.Сумма) КАК Сумма,
	|	ПоступленияДС.Период КАК Период,
	|	ПоступленияДС.КорСчет КАК КорСчет,
	|	ПоступленияДС.Счет КАК Счет,
	|	ПоступленияДС.Приоритет КАК Приоритет,
	|	ПоступленияДС.ВидПоступления КАК ВидПоступления,
	|	ПоступленияДС.БухВидРесурса КАК БухВидРесурса
	|ИЗ
	|	(ВЫБРАТЬ
	|		10 КАК Приоритет,
	|		РозничнаяВыручка.Организация КАК Организация,
	|		""Розничная выручка"" КАК ВидПоступления,
	|		ЕСТЬNULL(РозничнаяВыручка.СуммаОборотДт, 0) КАК Сумма,
	|		РозничнаяВыручка.Период КАК Период,
	|		РозничнаяВыручка.КорСчет КАК КорСчет,
	|		РозничнаяВыручка.Счет КАК Счет,
	|		""Дт"" КАК БухВидРесурса
	|	ИЗ
	|		РегистрБухгалтерии.Типовой.Обороты(&НачалоПериода, &КонецПериода, Месяц, Счет В ИЕРАРХИИ (&СчетаДС), , Организация В (&Организация), КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков)), ) КАК РозничнаяВыручка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		90,
	|		ПрочиеПоступления.Организация,
	|		ВЫБОР
	|			КОГДА ПрочиеПоступления.КорСчет.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка)
	|					И ПрочиеПоступления.КорСчет.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДенежныеСредстваВПути_)
	|				ТОГДА ПрочиеПоступления.КорСчет.Родитель.Наименование
	|			ИНАЧЕ ПрочиеПоступления.КорСчет.Наименование
	|		КОНЕЦ,
	|		ЕСТЬNULL(ПрочиеПоступления.СуммаОборотДт, 0),
	|		ПрочиеПоступления.Период,
	|		ПрочиеПоступления.КорСчет,
	|		ПрочиеПоступления.Счет,
	|		""Дт""
	|	ИЗ
	|		РегистрБухгалтерии.Типовой.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Месяц,
	|				Счет В ИЕРАРХИИ (&СчетаДС),
	|				,
	|				Организация В (&Организация),
	|				НЕ КорСчет В
	|							(ВЫБРАТЬ
	|								СчетаКД.Счет
	|							ИЗ
	|								СчетаКД КАК СчетаКД)
	|					И НЕ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженность))
	|					И НЕ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.Вспомогательный))
	|					И НЕ КорСчет В ИЕРАРХИИ (&СчетаДС),
	|				) КАК ПрочиеПоступления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		80,
	|		ПоступленияОтПодотчеников.Организация,
	|		ВЫБОР
	|			КОГДА ПоступленияОтПодотчеников.КорСчет.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка)
	|					И ПоступленияОтПодотчеников.КорСчет.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДенежныеСредстваВПути_)
	|				ТОГДА ПоступленияОтПодотчеников.КорСчет.Родитель.Наименование
	|			ИНАЧЕ ПоступленияОтПодотчеников.КорСчет.Наименование
	|		КОНЕЦ,
	|		ЕСТЬNULL(ПоступленияОтПодотчеников.СуммаОборотДт, 0),
	|		ПоступленияОтПодотчеников.Период,
	|		ПоступленияОтПодотчеников.КорСчет,
	|		ПоступленияОтПодотчеников.Счет,
	|		""Дт""
	|	ИЗ
	|		РегистрБухгалтерии.Типовой.Обороты(&НачалоПериода, &КонецПериода, Месяц, Счет В ИЕРАРХИИ (&СчетаДС), , Организация В (&Организация), КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьРаботников)), ) КАК ПоступленияОтПодотчеников
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ВложенныйЗапрос.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|				ТОГДА 21
	|			КОГДА ВложенныйЗапрос.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	|				ТОГДА 23
	|			ИНАЧЕ 25
	|		КОНЕЦ,
	|		ВложенныйЗапрос.Организация,
	|		ВЫБОР
	|			КОГДА ВложенныйЗапрос.КорСчет.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка)
	|					И ВложенныйЗапрос.КорСчет.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.типовой.ДенежныеСредстваВПути_)
	|				ТОГДА ВложенныйЗапрос.КорСчет.Родитель.Наименование
	|			ИНАЧЕ ВложенныйЗапрос.КорСчет.Наименование
	|		КОНЕЦ,
	|		ВложенныйЗапрос.Сумма,
	|		ВложенныйЗапрос.Период,
	|		ВложенныйЗапрос.КорСчет,
	|		ВложенныйЗапрос.Счет,
	|		ВложенныйЗапрос.БухВидРесурса
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ОплатаОтКонтрагентов.Организация КАК Организация,
	|			ВЫРАЗИТЬ(ОплатаОтКонтрагентов.КорСубконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора КАК ВидДоговора,
	|			ОплатаОтКонтрагентов.КорСчет КАК КорСчет,
	|			ЕСТЬNULL(ОплатаОтКонтрагентов.СуммаОборотДт, 0) КАК Сумма,
	|			ОплатаОтКонтрагентов.Период КАК Период,
	|			ОплатаОтКонтрагентов.Счет КАК Счет,
	|			""Дт"" КАК БухВидРесурса
	|		ИЗ
	|			РегистрБухгалтерии.Типовой.Обороты(
	|					&НачалоПериода,
	|					&КонецПериода,
	|					Месяц,
	|					Счет В ИЕРАРХИИ (&СчетаДС),
	|					,
	|					Организация В (&Организация),
	|					НЕ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков))
	|						И КорСчет В
	|							(ВЫБРАТЬ
	|								СчетаКД.Счет
	|							ИЗ
	|								СчетаКД КАК СчетаКД),
	|					&ВидыСубконтоКД) КАК ОплатаОтКонтрагентов) КАК ВложенныйЗапрос) КАК ПоступленияДС
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступленияДС.Организация,
	|	ПоступленияДС.КорСчет,
	|	ПоступленияДС.Период,
	|	ПоступленияДС.Счет,
	|	ПоступленияДС.Приоритет,
	|	ПоступленияДС.ВидПоступления,
	|	ПоступленияДС.БухВидРесурса";
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);	
	Запрос.УстановитьПараметр("КонецПериода" , КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация"  , ПараметрыОтчета.СписокСтруктурныхЕдиниц);
	Если Не ЗначениеЗаполнено(ПараметрыОтчета.СписокСтруктурныхЕдиниц) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация В (&Организация)", "");
	КонецЕсли;
	ВидыСубконтоКД = Новый Массив;
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	Запрос.УстановитьПараметр("ВидыСубконтоКД", ВидыСубконтоКД);
	
	СчетаДС = Новый Массив;
	СчетаДС.Добавить(ПланыСчетов.Типовой.ДенежныеСредства);
	Запрос.УстановитьПараметр("СчетаДС", СчетаДС);
	
	Периодичность = БухгалтерскиеОтчетыКлиентСервер.ПолучитьЗначениеПериодичности(ПараметрыОтчета.Периодичность, ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	
	Если Периодичность = 6 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Месяц", "День");
	ИначеЕсли Периодичность = 7 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Месяц", "Неделя");
	ИначеЕсли Периодичность = 8 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Месяц", "Декада");
	ИначеЕсли Периодичность = 10 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Месяц", "Квартал");
	ИначеЕсли Периодичность = 11 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Месяц", "Полугодие");
	ИначеЕсли Периодичность = 12 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Месяц", "Год");
	КонецЕсли;
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	ВнешниеНаборыДанных = Новый Структура("ТаблицаДанных", ТаблицаДанных);
	
	Возврат ВнешниеНаборыДанных;
		                                
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ПараметрыОтчета.РежимРасшифровки
		ИЛИ (ПараметрыОтчета.Свойство("ОткрытИзРассылки") И ПараметрыОтчета.ОткрытИзРассылки) Тогда
		
		КомпоновщикНастроек.Настройки.Структура.ИдентификаторПользовательскойНастройки = "";
		Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл
			ЭлементСтруктуры.ИдентификаторПользовательскойНастройки = "";
			ОтчетыВызовСервераБК.ОбработатьСтруктуруНастроек(ЭлементСтруктуры);
		КонецЦикла;
	КонецЕсли;
	
	Периодичность = БухгалтерскиеОтчетыКлиентСервер.ПолучитьЗначениеПериодичности(ПараметрыОтчета.Периодичность, ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	ТипДополнения = БухгалтерскиеОтчетыВызовСервера.ПолучитьТипДополненияПоИнтервалу(Периодичность);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Периодичность", Периодичность);
	
	Таблица   = Неопределено;
	Диаграмма = Неопределено;
	Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл		
		Если ЭлементСтруктуры.Имя = "Таблица" Тогда
			Таблица = ЭлементСтруктуры;
		ИначеЕсли ЭлементСтруктуры.Имя = "Диаграмма" Тогда
			Диаграмма = ЭлементСтруктуры;
		КонецЕсли;		
	КонецЦикла;
	
	ВыводитьДиаграмму = ПараметрыОтчета.ВыводитьДиаграмму;
	
	Если Диаграмма <> Неопределено Тогда
		
		Если ВыводитьДиаграмму Тогда
			
			Диаграмма.Точки.Очистить();
			ГруппировкаПериод = Диаграмма.Точки.Добавить();
			ПолеГруппировки = ГруппировкаПериод.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование = Истина;
			ПолеГруппировки.Поле          = Новый ПолеКомпоновкиДанных("Период");
			ПолеГруппировки.ТипДополнения = ТипДополнения;
			ПолеГруппировки.НачалоПериода =	НачалоДня(ПараметрыОтчета.НачалоПериода);
			ПолеГруппировки.КонецПериода  = КонецДня(ПараметрыОтчета.КонецПериода);
			
			ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ГруппировкаПериод.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			// Группировка
			Диаграмма.Серии.Очистить();
			Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
				Если ПолеВыбраннойГруппировки.Использование Тогда
					Группировка = Диаграмма.Серии.Добавить();
					БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка);				
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Диаграмма.Использование = ВыводитьДиаграмму;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Таблица <> Неопределено Тогда
		Таблица.Колонки.Очистить();
		ГруппировкаПериод = Таблица.Колонки.Добавить();
		ПолеГруппировки = ГруппировкаПериод.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.Поле          = Новый ПолеКомпоновкиДанных("Период");
		ПолеГруппировки.НачалоПериода =	НачалоДня(ПараметрыОтчета.НачалоПериода);
		ПолеГруппировки.КонецПериода  = КонецДня(ПараметрыОтчета.КонецПериода);
		
		ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ГруппировкаПериод.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		
		// Группировка
		Таблица.Строки.Очистить();
		Группировка = Таблица.Строки;
		Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
			Если ПолеВыбраннойГруппировки.Использование Тогда
				Если ТипЗнч(Группировка) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
					Группировка = Группировка.Добавить();
				Иначе
					Группировка = Группировка.Структура.Добавить();
				КонецЕсли;
				БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка);				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	БухгалтерскиеОтчеты.ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, ПараметрыОтчета);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);

КонецПроцедуры

Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
	
	// Инициализируем список мунктов меню
	СписокПунктовМеню = Новый СписокЗначений();
	
	// Заполниим соответствие полей которые мы хотим получить из данных расшифровки
	СоответствиеПолей = Новый Структура();
	ДанныеОтчета = ПолучитьИзВременногоХранилища(Адрес);
	
	ЗначениеРасшифровки = ДанныеОтчета.ДанныеРасшифровки.Элементы[Расшифровка];
	Если ТипЗнч(ЗначениеРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для Каждого ПолеРасшифровки ИЗ ЗначениеРасшифровки.ПолучитьПоля() Цикл
			Если ЗначениеЗаполнено(ПолеРасшифровки.Значение) И ПолеРасшифровки.Поле <> "ВидПоступления" Тогда
				ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
				ПараметрыРасшифровки.Вставить("Значение",  ПолеРасшифровки.Значение);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Укажем что открывать объект сразу не нужно
	ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Ложь);
	
	Если ДанныеОтчета = Неопределено Тогда 
		ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
		Возврат;
	КонецЕсли;
	
	// Прежде всего интересны данные группировочных полей
	Для Каждого Группировка Из ДанныеОтчета.Объект.Группировка Цикл
		Если Группировка.Использование Тогда
			СоответствиеПолей.Вставить(Группировка.Поле);
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеПолей.Вставить("Период");
		
	// Инициализация пользовательских настроек
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки",  Истина);
	ДополнительныеСвойства.Вставить("НачалоПериода",     ДанныеОтчета.Объект.НачалоПериода);
	ДополнительныеСвойства.Вставить("КонецПериода",      ДанныеОтчета.Объект.КонецПериода);
	ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ДанныеОтчета.Объект.ВыводитьЗаголовок);
	ДополнительныеСвойства.Вставить("ВыводитьПодписи",   ДанныеОтчета.Объект.ВыводитьПодписи);
	ДополнительныеСвойства.Вставить("МакетОформления",   ДанныеОтчета.Объект.МакетОформления);
	ДополнительныеСвойства.Вставить("ВыводитьДиаграмму", Ложь);
	ДополнительныеСвойства.Вставить("ПоказательБУ",      Истина);
	ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", ДанныеОтчета.Объект.СписокСтруктурныхЕдиниц);
	
	// Получаем соответствие полей доступных в расшифровке
	Данные_Расшифровки = Новый Соответствие();
	
	Если ДанныеОтчета.ДанныеРасшифровки <> Неопределено Тогда
		// Ищем интересующие нас поля в заданной расшифровке
		Для каждого ЭлементДанных Из СоответствиеПолей Цикл
			// Получаем элемент расшифровки, в котором нужно искать поля
			Родитель = ДанныеОтчета.ДанныеРасшифровки.Элементы[Расшифровка];
			// Вызываем рекурсивный поиск поля
			ЗначениеРасшифровки = ПолучитьЗначениеРасшифровки(Родитель, ЭлементДанных.Ключ);
			Если ЗначениеРасшифровки <> Неопределено Тогда
				// Значение нашлось, помещаем в структуру
				Данные_Расшифровки.Вставить(ЭлементДанных.Ключ, ЗначениеРасшифровки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Счет = Данные_Расшифровки.Получить("Счет");
	ЕстьСчет = ДанныеОтчета.Объект.Группировка.Найти("Счет", "Поле") <> Неопределено;
	
	Если ДанныеОтчета.Объект.РежимРасшифровки Тогда
		Если Счет = Неопределено И ЕстьСчет Тогда
			ТекстСообщения = НСтр("ru = 'Расшифровка невозможна. Неизвестен счет.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
			Возврат;
		ИначеЕсли Счет <> Неопределено И ЕстьСчет Тогда
			СписокПунктовМеню.Добавить("АнализСчетаТиповой", НСтр("ru = 'Анализ счета (бух.)'"));
			ИДРасшифровки = "АнализСчетаТиповой";
		Иначе
			СписокПунктовМеню.Добавить("ПоступлениеДенежныхСредств", НСтр("ru = 'Поступление денежных средств'"));
			ИДРасшифровки = "ПоступлениеДенежныхСредств";
		КонецЕсли;
	Иначе
		СписокПунктовМеню.Добавить("ПоступлениеДенежныхСредств", НСтр("ru = 'Поступление денежных средств'"));
		ИДРасшифровки = "ПоступлениеДенежныхСредств";
	КонецЕсли;
	
	Если Счет <> Неопределено Тогда
		ДанныеСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	Иначе
		ДанныеСчета = Неопределено;
	КонецЕсли;
	
	Период = Данные_Расшифровки.Получить("Период");
	
	Если ЗначениеЗаполнено(Период) Тогда
		Периодичность = БухгалтерскиеОтчетыКлиентСервер.ПолучитьЗначениеПериодичности(ДанныеОтчета.Объект.Периодичность, ДанныеОтчета.Объект.НачалоПериода, ДанныеОтчета.Объект.КонецПериода);
		ДополнительныеСвойства.Вставить("КонецПериода" , КонецДня(БухгалтерскиеОтчетыКлиентСервер.КонецПериода(Период, Периодичность)));
		ДополнительныеСвойства.Вставить("НачалоПериода", НачалоДня(БухгалтерскиеОтчетыКлиентСервер.НачалоПериода(Период, Периодичность)));
	КонецЕсли;
	
	Если ИДРасшифровки = "АнализСчетаТиповой" Тогда
		ДополнительныеСвойства.Вставить("Периодичность", 0); // "За период отчета"
	Иначе
		ДополнительныеСвойства.Вставить("Периодичность", ДанныеОтчета.Объект.Периодичность);
	КонецЕсли;
	
	ОтборПоЗначениямРасшифровки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ОтборПоЗначениямРасшифровки.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Для Каждого ЗначениеРасшифровки Из Данные_Расшифровки Цикл
		Если ЗначениеРасшифровки.Ключ <> "Период" Тогда
			Если ИДРасшифровки = "АнализСчетаТиповой" Тогда
				Если ЗначениеРасшифровки.Ключ = "Счет" Тогда
					ДополнительныеСвойства.Вставить("Счет",	ЗначениеРасшифровки.Значение);
				ИначеЕсли ЗначениеРасшифровки.Ключ <> "ВидПоступления" Тогда
					ПолеОтбора = Неопределено;
					Если ДанныеСчета <> Неопределено И ДанныеСчета.КоличествоСубконто > 0 Тогда
						Для НомерСубконто = 1 По ДанныеСчета.КоличествоСубконто Цикл
							Если ДанныеСчета["ВидСубконто" + НомерСубконто + "ТипЗначения"].СодержитТип(ТипЗнч(ЗначениеРасшифровки.Значение)) Тогда
								ПолеОтбора = "Субконто" + НомерСубконто;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если ПолеОтбора = Неопределено Тогда
						ПолеОтбора = ЗначениеРасшифровки.Ключ;
					КонецЕсли;
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборПоЗначениямРасшифровки, ПолеОтбора, ЗначениеРасшифровки.Значение);
				КонецЕсли;
			Иначе
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборПоЗначениямРасшифровки, ЗначениеРасшифровки.Ключ, ЗначениеРасшифровки.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьСчет      = Ложь;
	ЕстьКорСчет   = Ложь;
	ИндексКорСчет = 0;
	
	Группировка = Новый Массив();
	Для Каждого СтрокаГруппировки Из ДанныеОтчета.Объект.Группировка Цикл
		Если СтрокаГруппировки.Использование Тогда
			СтрокаДляРасшифровки = Новый Структура("Использование, Поле, Представление, ТипГруппировки");
			ЗаполнитьЗначенияСвойств(СтрокаДляРасшифровки, СтрокаГруппировки);
			Группировка.Добавить(СтрокаДляРасшифровки);
			Если СтрокаГруппировки.Поле = "Счет" Тогда
				ЕстьСчет = Истина;
			КонецЕсли;
			Если СтрокаГруппировки.Поле = "КорСчет" Тогда
				ЕстьКорСчет = Истина;
				ИндексКорСчет = ДанныеОтчета.Объект.Группировка.Индекс(СтрокаГруппировки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ГруппировкаСчет = Новый Структура("Использование, Поле, Представление, ТипГруппировки",
	                                   Истина, "Счет", "Счет", Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы);

	Если ИДРасшифровки = "ПоступлениеДенежныхСредств" Тогда
		Если НЕ ЕстьСчет Тогда
			Если ЕстьКорСчет Тогда
				Группировка.Вставить(ИндексКорСчет, ГруппировкаСчет);
			Иначе
			    Группировка.Добавить(ГруппировкаСчет);
			КонецЕсли;
		КонецЕсли;
	Иначе
	    Группировка.Вставить(0, ГруппировкаСчет);
	КонецЕсли;

	ДополнительныеСвойства.Вставить("Группировка", Группировка);
	
	НастройкиРасшифровки = Новый Структура();
	НастройкиРасшифровки.Вставить(ИДРасшифровки , ПользовательскиеНастройки);
	ДанныеОтчета.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
	
	ПоместитьВоВременноеХранилище(ДанныеОтчета, Адрес);
	
	ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
	
КонецПроцедуры

Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант из Схема.ВариантыНастроек Цикл
		НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, Вариант.Имя);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета.
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт
	
	ПараметрыОтчета = РассылкаОтчетовБК.НастройкиОтчетаСохраняемыеВРассылке();
	
	Возврат ПараметрыОтчета;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает значение искомого поля из элемента расшифровки.
//
Функция ПолучитьЗначениеРасшифровки(Элемент, ИмяПоля)
	
	Если ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		// Ищем поля в текущем элементе
		Поле = Элемент.ПолучитьПоля().Найти(ИмяПоля);
		Если Поле <> Неопределено Тогда
			// Возвращаем значение найденного поля
			Возврат Поле.Значение;
		КонецЕсли;
	КонецЕсли;
	
	// Если поле не нашлось, или текущий элемент не содержит полей
	// ищем поля среди родителей элемента (вышестоящие группировки).
	Родители  = Элемент.ПолучитьРодителей();
	Если Родители.Количество() > 0 Тогда
		
		Для Каждого Родитель Из Родители Цикл
			// Вызываем рекурсивный поиск поля
			ЗначениеРасшифровки = ПолучитьЗначениеРасшифровки(Родитель, ИмяПоля);
			
			Если ЗначениеРасшифровки <> Неопределено Тогда
				Возврат ЗначениеРасшифровки;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Если ничего не нашлось
	Возврат Неопределено;
	
КонецФункции

#КонецЕсли