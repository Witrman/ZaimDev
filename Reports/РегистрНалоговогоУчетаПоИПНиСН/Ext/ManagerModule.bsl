#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки,
							|ИспользоватьПриВыводеЗаголовка,
							|ИспользоватьПриВыводеПодвала,
							|ИспользоватьРасширенныеПараметрыРасшифровки",
							Истина, Истина, Истина, Истина, Истина, Истина);
							
КонецФункции

Процедура ПриВыводеЗаголовка(ПараметрыОтчета,Результат) Экспорт
	
	СведенияОНалогоплательщике = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ПараметрыОтчета.Налогоплательщик, ПараметрыОтчета.КонецПериода);
	
	Макет = ПолучитьМакет("Макет");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");

	Если СведенияОНалогоплательщике <> Неопределено Тогда 
		ОбластьЗаголовок.Параметры.Заполнить(СведенияОНалогоплательщике);
		ОбластьЗаголовок.Параметры.Период = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(НачалоДня(ПараметрыОтчета.НачалоПериода), КонецДня(ПараметрыОтчета.КонецПериода), Истина);
	КонецЕсли;
	
	Результат.Вывести(ОбластьЗаголовок);
	
КонецПроцедуры

Процедура ПриВыводеПодвала(ПараметрыОтчета, Результат) Экспорт
	
	Макет = ПолучитьМакет("Макет");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подписи");
	
	Если ПараметрыОтчета.Налогоплательщик <> Неопределено Тогда
		
		ОтветЛица = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(ПараметрыОтчета.Налогоплательщик, ПараметрыОтчета.КонецПериода);
		
		ОбластьПодвал.Параметры.Руководитель = ОтветЛица.Руководитель;
		ОбластьПодвал.Параметры.ГлавныйБухгалтер = ОтветЛица.ГлавныйБухгалтер;
		ОбластьПодвал.Параметры.ОтветственныйЗаРегистры = ОтветЛица.ОтветственныйЗаРегистры;
		
		ОбластьПодвал.Параметры.РуководительДолжность = ОтветЛица.РуководительДолжность;
		ОбластьПодвал.Параметры.ГлавныйБухгалтерДолжность = ОтветЛица.ГлавныйБухгалтерДолжность;
		ОбластьПодвал.Параметры.ОтветственныйЗаРегистрыДолжность = ОтветЛица.ОтветственныйЗаРегистрыДолжность;
		
	КонецЕсли;
	
	ОбластьПодвал.Параметры.ДатаСоставления = Формат(ТекущаяДата(), "ДЛФ=DD");
	
	Результат.Вывести(ОбластьПодвал);
	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт

	Если ПараметрыОтчета.РежимРасшифровки Тогда
		КомпоновщикНастроек.Настройки.Структура.ИдентификаторПользовательскойНастройки = "";
		Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл
			ЭлементСтруктуры.ИдентификаторПользовательскойНастройки = "";
			ОтчетыВызовСервераБК.ОбработатьСтруктуруНастроек(ЭлементСтруктуры);
		КонецЦикла;
		КомпоновщикНастроек.Настройки.Выбор.ИдентификаторПользовательскойНастройки = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Период"       , НачалоДня(ПараметрыОтчета.НачалоПериода));
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", Дата(1, 1, 1));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Период"       , Дата(1, 1, 1));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", Дата(3999, 11, 1));
	КонецЕсли;
	
	Если ПараметрыОтчета.ВключитьИП Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВключитьИП", Истина);
	КонецЕсли;
	Если ПараметрыОтчета.ВключитьПолучателейАлиментов Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВключитьПолучателейАлиментов", Истина);
	КонецЕсли;
	Если ПараметрыОтчета.ВыводитьТолькоКонтрагентов Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВыводитьТолькоКонтрагентов", Истина);
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Налогоплательщик) Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек, "Налогоплательщик", ПараметрыОтчета.Налогоплательщик, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	Если ПараметрыОтчета.ПоддержкаРаботыСоСтруктурнымиПодразделениями 
		И Схема.НаборыДанных["НаборДанных1"].Поля.Найти("СтруктурнаяЕдиница") <> Неопределено
		И ЗначениеЗаполнено(ПараметрыОтчета.СписокСтруктурныхЕдиниц) Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек, "СтруктурнаяЕдиница", ПараметрыОтчета.СписокСтруктурныхЕдиниц, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	// Дополнительные данные
	ПараметрыОтчета.Вставить("РазмещениеДополнительныхПолей", 1);
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	ВыводитьУсловныйВес = Ложь;
	
	ГруппировкаРегистратор = ПараметрыОтчета.Группировка.Найти("Регистратор", "Поле");
	Если ГруппировкаРегистратор <> Неопределено Тогда
		ГруппировкаРегистраторИспользование = ГруппировкаРегистратор.Использование;
	Иначе
		ГруппировкаРегистраторИспользование = Ложь;
	КонецЕсли;
	
	ГруппировкаПериодВзаиморасчетов = ПараметрыОтчета.Группировка.Найти("ПериодВзаиморасчетов", "Поле");
	Если ГруппировкаПериодВзаиморасчетов <> Неопределено Тогда
		ГруппировкаПериодВзаиморасчетовИспользование = ГруппировкаПериодВзаиморасчетов.Использование;
	Иначе
		ГруппировкаПериодВзаиморасчетовИспользование = Ложь;
	КонецЕсли;
	
	ВыводитьУдельныйВес = ГруппировкаРегистраторИспользование ИЛИ ГруппировкаПериодВзаиморасчетовИспользование;
	
	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("КлючВарианта")  Тогда
		КлючВарианта 					= КомпоновщикНастроек.Настройки.ДополнительныеСвойства.КлючВарианта;
		РегистрНалоговогоУчетаПоИПНиСН 	= НайтиВариантПоКлючу(КлючВарианта) = "РегистрНалоговогоУчетаПоИПНиСН";
	Иначе
		РегистрНалоговогоУчетаПоИПНиСН 	= Истина;
	КонецЕсли;		
		
	ПараметрыОтчета.Вставить("ВысотаШапки", 2);
	// определим какие показатели и в каком порядке показывать
	Для Каждого Показатель Из ПараметрыОтчета.Показатели Цикл
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, Показатель.Поле, Показатель.Использование);
	КонецЦикла;
	
	КомпоновщикНастроек.Настройки.Структура[0].Строки.Очистить();
	
	Структура = КомпоновщикНастроек.Настройки.Структура[0].Строки.Добавить();
	Первый = Истина;
	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Если Первый Тогда 
				Структура.Имя = "Группировка";
			Иначе
				Структура = Структура.Структура.Добавить();
			КонецЕсли;
			
			Первый = Ложь;
						
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			
			Если ТипЗнч(ПолеВыбраннойГруппировки.ТипГруппировки) = Тип("ПеречислениеСсылка.ТипДетализацииСтандартныхОтчетов") Тогда
				Если ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
					ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
				ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
					ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
				Иначе
					ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
				КонецЕсли;
			КонецЕсли;
			
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных")); 
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
	// Обработка шапки таблицы
	Если Результат.Области.Найти("Заголовок") = Неопределено Тогда
		ШапкаТаблицыВерх = 1;
		ШапкаТаблицыНиз  = ПараметрыОтчета.ВысотаШапки;
	Иначе
		ШапкаТаблицыВерх = Результат.Области.Заголовок.Низ + 1;
		ШапкаТаблицыНиз  = Результат.Области.Заголовок.Низ + ПараметрыОтчета.ВысотаШапки;
	КонецЕсли;
	
	Результат.ФиксацияСверху = ШапкаТаблицыНиз;
	Результат.ФиксацияСлева  = 2;
	
	ШиринаТаблицы = Результат.ШиринаТаблицы;
	
	Для Колонка = 1 По ШиринаТаблицы Цикл
		ОбластьШапка = Результат.Область("R" + ШапкаТаблицыВерх + "C" + Колонка);
		ОбластьШапка.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
		ОбластьШапка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
		
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеОтборы    = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
		
	ДанныеОбъекта = ПолучитьИзВременногоХранилища(Адрес);
	
	ОтчетОбъект       = ДанныеОбъекта.Объект;
	ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;
	Показатели        = ОтчетОбъект.Показатели;
	
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	ДополнительныеСвойства.Вставить("Налогоплательщик", ОтчетОбъект.Налогоплательщик);
	ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", ОтчетОбъект.СписокСтруктурныхЕдиниц);

	Период = Неопределено;
		
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ДанныеРасшифровки.Настройки);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ДанныеОбъекта.Объект.СхемаКомпоновкиДанных));
	
	МассивПолей = БухгалтерскиеОтчетыВызовСервера.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, КомпоновщикНастроек, Истина);
	МассивПолейРасшифровки = ПолучитьМассивПолейРасшифровки();
	
	ЕстьПоказатель = Ложь;  
	ВыплаченоДоходов = Ложь;
	Для Индекс = 0 по МассивПолей.ВГраница() Цикл
		Элемент = МассивПолей[Индекс];
		Если ТипЗнч(Элемент) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
			Если Элемент.Поле = "ВыплаченоДоходов" Тогда
				ВыплаченоДоходов = Истина;
			КонецЕсли;	
			Показатель = Показатели.Найти(Элемент.Поле, "Поле");
			ПоказательРасшифровки = МассивПолейРасшифровки.Найти(Элемент.Поле);
			Если Показатель <> Неопределено ИЛИ ПоказательРасшифровки <> Неопределено Тогда
				ДополнительныеСвойства.Вставить("ПоказательРасшифровки", Элемент.Поле);
				ЕстьПоказатель = Истина;
				МассивПолей.Удалить(Индекс);
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьПоказатель Тогда
		Для Каждого Отбор Из МассивПолей Цикл
			Если ТипЗнч(Отбор) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
				Если Отбор.Значение = NULL тогда
					Продолжить;
				КонецЕсли;
				Если Отбор.Поле = "МесяцНалоговогоПериода" И ВыплаченоДоходов Тогда
					Отбор.Поле = "Период"
				КонецЕсли;
				Если Отбор.Поле = "ФизЛицо"
					ИЛИ Отбор.Поле = "Налогоплательщик" 
					ИЛИ Отбор.Поле = "НалоговыйКомитет" 
					ИЛИ Отбор.Поле = "МесяцНалоговогоПериода" 
					ИЛИ Отбор.Поле = "ПериодВзаиморасчетов"
					ИЛИ Отбор.Поле = "Период"
					ИЛИ Отбор.Поле = "СтруктурнаяЕдиница" 
					ИЛИ Отбор.Поле = "Регистратор" Тогда
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение);
				КонецЕсли;

			ИначеЕсли ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если Отбор.Представление = "###ОтборПоОрганизации###" Тогда
					ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", ОтчетОбъект.СписокСтруктурныхЕдиниц);
					ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ОтчетОбъект.СписокСтруктурныхЕдиниц);
					ДополнительныеСвойства.Вставить("ПредставлениеСпискаОрганизаций", ПредставлениеСпискаОрганизаций);
				Иначе
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.ЛевоеЗначение, Отбор.ПравоеЗначение, Отбор.ВидСравнения);
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Отбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если Отбор.Представление = "###ОтборПоОрганизации###" Тогда
					ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", ОтчетОбъект.СписокСтруктурныхЕдиниц);
					ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ОтчетОбъект.СписокСтруктурныхЕдиниц);
					ДополнительныеСвойства.Вставить("ПредставлениеСпискаОрганизаций", ПредставлениеСпискаОрганизаций);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		ДополнительныеСвойства.Вставить("НачалоПериода", ОтчетОбъект.НачалоПериода);
		ДополнительныеСвойства.Вставить("КонецПериода" , ОтчетОбъект.КонецПериода);
			
		СписокПунктовМеню = Новый СписокЗначений;
		СписокПунктовМеню.Добавить("РегистрНалоговогоУчетаПоИПНиСН", "Налоговый регистр по ИПН и СО");
		
		НастройкиРасшифровки = Новый Структура;
		НастройкиРасшифровки.Вставить("РегистрНалоговогоУчетаПоИПНиСН", ПользовательскиеНастройки);
			
		ДанныеОбъекта.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
		Адрес = ПоместитьВоВременноеХранилище(ДанныеОбъекта, Адрес);
		ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
		ПараметрыРасшифровки.Вставить("ОткрытьОбъект"    , Ложь);
		
	Иначе
		Для Каждого Отбор Из МассивПолей Цикл
			Если ТипЗнч(Отбор) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
				Если Отбор.Значение = NULL тогда
					Прервать;
				КонецЕсли;
				ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
				ПараметрыРасшифровки.Вставить("Значение"     , Отбор.Значение);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант из Схема.ВариантыНастроек Цикл
		НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, Вариант.Имя);
	КонецЦикла;	
	
КонецПроцедуры

Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление","РегистрНалоговогоУчетаПоИПНиСН", НСтр("ru = 'Регистр налогового учета по ИПНи СН'")));
	Массив.Добавить(Новый Структура("Имя, Представление","АнализНачисленийУдержанийПрочихЛиц", НСтр("ru = 'Анализ начислений и удержаний прочих лиц'")));
	
	Возврат Массив;
	
КонецФункции

Функция НайтиВариантПоКлючу(КлючВарианта) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КлючВарианта", КлючВарианта);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВариантыОтчетов.Ссылка
	               |ИЗ
	               |	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	               |ГДЕ
	               |	ВариантыОтчетов.КлючВарианта = &КлючВарианта";
	
	Вариант = Запрос.Выполнить().Выбрать();

	Если Вариант.Следующий() Тогда
		
		ВариантОтчета = Вариант.Ссылка;
		Если ЗначениеЗаполнено(ВариантОтчета.ПредопределенныйВариант) Тогда
			Возврат ВариантОтчета.ПредопределенныйВариант.КлючВарианта;
		Иначе	
			ДополнительныеСвойства = ВариантОтчета.Настройки.Получить().ДополнительныеСвойства;
			Если ДополнительныеСвойства.Свойство("КлючВарианта") Тогда
				Возврат ВариантОтчета.Настройки.Получить().ДополнительныеСвойства.КлючВарианта;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьМассивПолейРасшифровки()
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("НачисленоДоходов");
	МассивПолей.Добавить("ВыплаченоДоходов");
	МассивПолей.Добавить("ДоходыНеОблагаемые");
	МассивПолей.Добавить("ДоходыОблагаемые");
	МассивПолей.Добавить("ЗадолженностьНаКонец");
	МассивПолей.Добавить("ЗадолженностьНаНачало");
	МассивПолей.Добавить("КПеречислению");
	МассивПолей.Добавить("ОбъектИсчисления");
	МассивПолей.Добавить("Результат");
	Возврат МассивПолей;
	
КонецФункции

#КонецЕсли