////////////////////////////////////////////////////////////////////////////////
// Описание формы
// Параметры фомры:
//  Организация - СправочникСсылка.Организации - Налогоплательщик, представляющий отчет
//  мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета - Дата - отчетный период формирования отчета
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	мВыбраннаяФорма = "ФормаОтчета2017Кв1";
	КодФормы 		= "ФормаОтчета";
	               		
	ВсегоСтраниц	= 2;     	
	мФорматНомераСтроки = "ЧЦ=8; ЧВН=; ЧГ=";
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруФормРегОтчета(ЭтотОбъект);	
			
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов   = Новый СписокЗначений;	
	СтруктураРеквизитовФормы.мПечатныеформы 		  = Новый СписокЗначений;	
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	// Значения по умолчанию
	СтруктураРеквизитовФормы.мКодСтрокиПрочиеАктивы 		= "019";
	СтруктураРеквизитовФормы.мКодСтрокиПрочиеОбязательства 	= "217";	
	СтруктураРеквизитовФормы.мКодНачалаРазделаОбязательств 	= 210; // Счета до этого кода выводятся по Дт остатку, после - по Кт остатку.
	
	СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями = РегламентированнаяОтчетностьПереопределяемый.ПоддержкаРаботыСоСтруктурнымиПодразделениями(); // перевести в переопределяемый модуль 

	СтруктураРеквизитовФормы.СтруктураСоответствияСчетов = ЗаполнитьСтруктуруСоответствийСчетовСтрокамБаланса();
		
	// Общие механизмы
	ЗаполнитьСведенияОбОтчетномПериоде();
		
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	УстановитьФорматВывода();
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекФорма.КодФормы);
	КонецЦикла	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если Модифицированность Тогда 
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);	
		ТекстВопроса = НСТР("ru = 'Сохранить данные отчета?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);	
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(мСписокСтруктурныхЕдиниц, ЭтаФорма, СтандартнаяОбработка,,Налогоплательщик);	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда		
		мСписокСтруктурныхЕдиниц = Результат;		
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц); 		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ФормаВыбораИзКлассификатора") Тогда
		
		Если ВРег(ИсточникВыбора.ИмяМакета) = ВРег("КОДЫБЮДЖЕТНОЙКЛАССИФИКАЦИИ") Тогда 
			
			Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда 
				Код = ВыбранноеЗначение;
			Иначе 
				Код = ВыбранноеЗначение.КодСтроки;				
			КонецЕсли;
		// выбираются в форме 300.03
		
		
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЯзыкФормированияПриИзменении(Элемент)
	ЯзыкФормированияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	ЕдиницаИзмеренияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТочностьЕдиницыИзмеренияПриИзменении(Элемент)
	УстановитьФорматВывода();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "Разделы"

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)	
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.КодФормы = Элемент.ТекущиеДанные.КодФормы тогда
		Возврат;
	КонецЕсли;	
	
	//РазделыОтчетаПриАктивизацииСтрокиНаСервере(Элемент.ТекущиеДанные.КодФормы, Элемент.ТекущиеДанные.Многострочность, Элемент.ТекущиеДанные.ПризнакОсновной);	
		
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Для Каждого СтраницаФорм из Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы Цикл
		Элементы[СтраницаФорм.Имя].Видимость = СтраницаФорм.Имя = ЭтаФорма.КодФормы;	
	КонецЦикла;
	
	//ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "Отчеты"

&НаКлиенте
Процедура ФормаОтчетаПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = Область.Имя;	
	
	Если Найти(ИмяОбласти, "Б") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФормаОтчетаРасчет(Область.Имя, Область.Значение, Истина);
	
	Модифицированность = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Заполнить(Команда)
	Перезаполнить = Истина; // Для выполнения запроса на пересчет данных к пользователю
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения =  РегламентированнаяОтчетностьКлиент.ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Перезаполнить Тогда		
		Если СтрокаФормы.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстВопроса = "Перезаполнить данные формы и ее дополнительных форм?";
		Иначе
			ТекстВопроса = "Перезаполнить данные формы?";
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);
		Оповещение.ДополнительныеПараметры.Вставить("Перезаполнить", Перезаполнить);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);		

	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФорму(Команда)
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	 	
	
	Перезаполнить = ДополнительныеПараметры.Перезаполнить;
	
	НачатьЗамерВремени();
	
	ЗаполнитьАвтоНаСервере();	
	УстановитьФорматВывода();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	СохранитьДанные(); 
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	ОткрытьФормуНастройкиСтраниц();
КонецПроцедуры

&НаКлиенте
Процедура Расшифровка(Команда)
	Попытка
		ИмяЯчейки = ЭтотОбъект.ТекущийЭлемент.ТекущаяОбласть.Имя;
	Исключение
		ПоказатьПредупреждение(,"Активизируйте нужную ячейку отчета для расшифровки.");
		Возврат;
	КонецПопытки;
	
	ЦветРасшифровки = ФормаОтчетаПолеТабличногоДокументаСтраница1.Области.Б010_1.ЦветФона;
	
	Если ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда 
		
		ФормаОтчетаРасшифровкаСКД(ИмяЯчейки);			
	Иначе	
		ПоказатьПредупреждение(, "Расшифровка данной ячейки не поддерживается."+Символы.ПС+"Расшифровку содержат ячейки формы, выделенные желтым цветом.");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыФормы.Вставить("Организация",              Налогоплательщик);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, мВыбраннаяФорма, "") + "ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ОценкаПроизводительности

&НаКлиенте
Функция НачатьЗамерВремени()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "Регламентированный отчет ""баланс (мсфо)"" (заполнение)";
		ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент").НачатьЗамерВремени(Истина, КлючеваяОперация);
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеТаймера()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда 
		
		Возврат ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").НачатьЗамерВремени();
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьЗамер(ВремяНачала)
	
	Если ВремяНачала <> Неопределено 
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "Регламентированный отчет ""баланс (мсфо)"" (заполнение)";
		ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СохранитьДанные() Экспорт
	СохранитьДанныеСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
КонецПроцедуры

&НаСервере
// Процедура очистки формы
//
// параметр: ТекИмяФормы - имя очищаемой формы (=КодФормы)
//           ОчиститьВсе - признак вида очистки формы              
//
Процедура Очистить(ТекИмяФормы,ОчиститьВсе = Ложь) Экспорт
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОбластьФорматирования"); // служебная область, очистка которой не возможна		
    СписокПоказателейНеПодлежащихОчистке.Добавить("НаименованиеОрганизации");			
	СписокПоказателейНеПодлежащихОчистке.Добавить("РазмерностьПрописью");			
	СписокПоказателейНеПодлежащихОчистке.Добавить("Руководитель");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ГлавныйБухгалтер");
	
	РегламентированнаяОтчетность.ОчиститьСтруктуруДанныхИТабличноеПолеФормы(ЭтаФорма, ТекИмяФормы, ОчиститьВсе, СписокПоказателейНеПодлежащихОчистке);
	
КонецПроцедуры // Очистить()

&НаКлиенте
Процедура ОчиститьРеглОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Форма = ДополнительныеПараметры.Форма;	
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", Форма.КодФормы));
		Вложенность = СтрокаФормы.ПолучитьЭлементы().Количество() >0;	
		
		ОчиститьРеглОтчетЗавершениеНаСервере(СтрокаФормы.КодФормы, СтрокаФормы.Многострочность, Вложенность)	
	КонецЕсли;		
КонецПроцедуры 	

&НаСервере
Процедура ОчиститьРеглОтчетЗавершениеНаСервере(КодФормы, ПризнакМногострочности, Вложенность)		
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, ПризнакМногострочности, Вложенность);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеглОтчет(ВидОчистки)
	//ФормаЗаполнена = РегламентированнаяОтчетностьКлиентСервер.формаЗ(Форма.ИмяФормы, Форма.мСписокФормБезИерархии);
	Вложенность = Ложь;
	//
	Если ВидОчистки = "ОчиститьФорму" Тогда    				
		ТекстВопроса = НСТР("ru = 'Очистить данные формы?'");
		Вложенность = Ложь;  		
	ИначеЕсли ВидОчистки = "ОчиститьФормуИПриложения" Тогда				
		ТекстВопроса = НСТР("ru = 'Очистить форму и ее приложения?'");		
		Вложенность = Истина;		
		
	КонецЕсли;	
	Оповещение = Новый ОписаниеОповещения("ОчиститьРеглОтчетЗавершение", ЭтотОбъект, Новый Структура);		
	Оповещение.ДополнительныеПараметры.Вставить("Форма",    ЭтотОбъект);
	Оповещение.ДополнительныеПараметры.Вставить("КодФормы", ЭтотОбъект.КодФормы);
		
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, ,КодВозвратаДиалога.Да);

	
	//РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму")
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьПараметрыФормыНаКлиенте(Параметры) экспорт
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	УстановитьПериодОтчета();
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);		
	КонецЦикла		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормы(ТекФорма, Параметры)
	ЗаполнитьЗначенияСвойств(ТекФорма.СтруктураРеквизитовФормы, Параметры);
	
	ТекФорма.Налогоплательщик = Параметры.Организация;
	ТекФорма.мСписокСтруктурныхЕдиниц = Параметры.мСписокСтруктурныхЕдиниц;
	ТекФорма.ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ТекФорма.мСписокСтруктурныхЕдиниц);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяГлавнойФормы(ВыбраннаяФорма) экспорт
	Возврат СтрДлина(ВыбраннаяФорма)-7
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры инициализации отчета и структуры его данных

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокСтруктурныхЕдиниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");			
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");		
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");		
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");		
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");	
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);			
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);	
	СтруктураРеквизитовФормы.Вставить("мПериодичность", Параметры.мПериодичность);		
	СтруктураРеквизитовФормы.Вставить("НалоговыйКомитет", Неопределено);			
	СтруктураРеквизитовФормы.Вставить("мГод");	
	СтруктураРеквизитовФормы.Вставить("мКвартал");	
	СтруктураРеквизитовФормы.Вставить("мМесяц");	
	// индивидуальные параметры формы
	СтруктураРеквизитовФормы.Вставить("мПоддержкаРаботыСоСтруктурнымиПодразделениями");	
	СтруктураРеквизитовФормы.Вставить("СтруктураСоответствияСчетов");	
	СтруктураРеквизитовФормы.Вставить("мКодСтрокиПрочиеАктивы");	
	СтруктураРеквизитовФормы.Вставить("мКодСтрокиПрочиеОбязательства");		
	СтруктураРеквизитовФормы.Вставить("мКодНачалаРазделаОбязательств");	
	
КонецПроцедуры // СформироватьСтруктуруРеквизитовФормы

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;			
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	//ФормироватьСтруктуруСтраницОтчета();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
			ТочностьЕдиницыИзмерения = 0;
			ЯзыкФормирования 		 = "ru";
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();	
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	
	мСтруктураЗначений = Новый Структура;
	
	Если СтруктураРеквизитовФормы.Свойство("СформироватьФормуОтчетаАвтоматически") И СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически <> Неопределено Тогда		
		ЗначениеТаймера = ЗначениеТаймера();
		
		ЗаполнитьАвтоНаСервере();
		
		ЗаписатьЗамер(ЗначениеТаймера);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтчетномПериоде() Экспорт

	СтрПериодОтчета = ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ФП = истина");
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
		СтруктураРеквизитовФормы.мКвартал = Лев(СтрПериодОтчета,1);
		СтруктураРеквизитовФормы.мМесяц = Неопределено;
	Иначе
		СтруктураРеквизитовФормы.мМесяц = Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		СтруктураРеквизитовФормы.мКвартал = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мГод = Лев(Прав(СтрПериодОтчета,7),4);
		
КонецПроцедуры 

&НаСервере
// В зависимости от языка заполнения процедура загружает макет в поле табличного документа
//
Процедура ЗагрузитьМакетВТабличныйДокумент() экспорт
	
	// очищаем текущие данные
	
	Макет = мМакет;
	
	Если ЗначениеЗаполнено(ЯзыкФормирования) Тогда
		Макет.КодЯзыкаМакета = ЯзыкФормирования;		
	КонецЕсли;
	
	ВсегоСтраниц = 2;
	Для Сч = 1 по ВсегоСтраниц Цикл
		ТекТабличныйДокумент = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница"+ Сч];	
		
		ОбластьОтчета = Макет.ПолучитьОбласть("Страница"+ Сч);			
		ТекТабличныйДокумент.Очистить();
		ТекТабличныйДокумент.Вывести(ОбластьОтчета);	
		
		
	 	ТекТабличныйДокумент.АвтоМасштаб = Истина;
	 КонецЦикла;		
	 
	 мЕстьМакет = Истина;		
КонецПроцедуры

// Заполняет параметры формы. Процедура выполняется
// только для немногострочных, неглавных форм (обычных форм).
// а такеж для мВыбраннаяФорма, когда вызывается при очистке
// из основной формы
//
//   Парам: ЭлементыГруппы - структура, содержащая элементы шапки, подвала и области 
//                           итогов многострочных форм
//
Процедура ЗаполнитьПараметры(ТекИмяФормы) Экспорт
	
	Если ТекИмяФормы = Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7) Тогда 				
		//заполним основные сведения об организации
		ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекИмяФормы);		
		УстановитьПериодОтчета();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПараметры()

////////////////////////////////////////////////////////////////////////////////
// Сохранение и восстановление данных

&НаСервере
Процедура СохранитьДанныеСервере()
	РегламентированнаяОтчетность.СохранитьОтчет(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()	
	РегламентированнаяОтчетность.ВосстановитьСохраненныйОтчет(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьДанныеСервере();
		Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;	
КонецПроцедуры   

////////////////////////////////////////////////////////////////////////////////
// Печать

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
            
    Перем СтруктураГруппы; 
    
    Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
        ТекстСообщения = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");            
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);                
                
        Возврат Ложь;
        
    КонецЕсли;
            
    СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
    СтруктураРеквизитовФормы.мРежимПечати = Истина;
    
    Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
        ВыборРасчета(КодФормы, Неопределено, Неопределено);
    КонецЕсли; 

    РегламентированнаяОтчетность.СформироватьСписокПечатаемыхЛистов(ЭтаФорма);
                 
        
    Возврат Истина;
    
КонецФункции


&НаСервере
Процедура ЕдиницаИзмеренияПриИзмененииНаСервере()
	УстановитьФорматВывода();
КонецПроцедуры

&НаСервере
Процедура ЯзыкФормированияПриИзмененииНаСервере()	
	РегламентированнаяОтчетность.ПередатьДанныеИзТабличногоПоляВСтруктуру(ЭтаФорма);
	ЗагрузитьМакетВТабличныйДокумент();	
		
	УстановитьПериодОтчета();
    УстановитьФорматВывода();
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиСтраниц()
	
// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРаздел = Элементы.РазделыОтчета.ТекущиеДанные.Страницы;		
	КонецЕсли;
	
	Для Каждого ТекФорма ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",ТекФорма.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			ТекущаяСтрокаСписка.Выгружать               = ТекФорма.Выгружать;
			ТекущаяСтрокаСписка.ПоказатьСтраницу        = ТекФорма.ПоказатьСтраницу;			
			ТекущаяСтрокаСписка.АвтополучениеИтогов     = ТекФорма.АвтополучениеИтогов;  
			ТекущаяСтрокаСписка.АвтоЗаполнение          = ТекФорма.АвтоЗаполнение;  
		КонецЕсли;		   
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокФормДерева",СписокФормДерева);
	
	ДопПараметры = Новый Структура("ТекущийРаздел",ТекущийРаздел);
	
	ОповещениеПослеЗакрытияФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастройкиСтраниц",ЭтотОбъект,ДопПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.НастройкиОтчета",ПараметрыФормы, ЭтаФорма,,,,ОповещениеПослеЗакрытияФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиСтраниц(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьДанныеФормы(РезультатЗакрытия, СписокФормДерева);
	
	Модифицированность = Истина;
	
	//обновим мСписокФормБезИерархии
	Для Каждого СтрокаФормы ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",СтрокаФормы.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			СтрокаФормы.Выгружать               = ТекущаяСтрокаСписка.Выгружать;
			СтрокаФормы.ПоказатьСтраницу        = ТекущаяСтрокаСписка.ПоказатьСтраницу;			
			СтрокаФормы.АвтополучениеИтогов     = ТекущаяСтрокаСписка.АвтополучениеИтогов;  
			СтрокаФормы.АвтоЗаполнение          = ТекущаяСтрокаСписка.АвтоЗаполнение;  
		КонецЕсли;			
	КонецЦикла; 	

	Если ДополнительныеПараметры.Свойство("ТекущийРаздел") И НЕ ДополнительныеПараметры.ТекущийРаздел = Неопределено Тогда  		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(РазделыОтчета, Новый Структура("СписокФормДереваСтраницы",ДополнительныеПараметры.ТекущийРаздел));
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;			
	КонецЕсли;  	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие

//Процедура выполняет выбор процедуры расчета.
//ВыборРасчета выполняется при восстановлении данных, при изменении поля табличного документа
//
//Параметры:    ТекФорма - имя текущей формы
//              Индекс - индекс строки для многострочной формы
//              Показатель - имя ячейки, откуда была вызвана процедура расчета многострочной
//                           формы, без указания номера строки (например, без "__1")
//
Процедура ВыборРасчета(ТекФорма, Индекс = Неопределено, Показатель = Неопределено) Экспорт
	Если ТекФорма = "ФормаОтчета" Тогда
		ФормаОтчетаРасчетНаСервере(Индекс, Показатель);	
	КонецЕсли;		
КонецПроцедуры // ВыборРасчета()

&НаСервере
Процедура ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы)
	ОргСведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(Налогоплательщик, ДатаПодписи);
	//Если организация не указана то не выводим никаких сведений
	Если ОргСведения = 0 Тогда
		Возврат;
	КонецЕсли;

	// Инициализируем переменные
	РННЮЛ = ""; 			// РНН	
	НаимЮЛПол = ""; 		// Полное наименование 	
	ИИН_БИН = ""; 			// ИИН_БИН	
	Руководитель = ""; 		// ФИО руководителя				
	ГлавныйБухгалтер = ""; 	// Главный бухгалтер
	
	// Получаем данные
	ОргСведения.Свойство("РННЮЛ",     			РННЮЛ);
	ОргСведения.Свойство("БИН_ИИН",   			ИИН_БИН);
	ОргСведения.Свойство("ПолноеНаименование", 	НаимЮЛПол);	
	ОргСведения.Свойство("Руководитель",		Руководитель);	
	ОргСведения.Свойство("ГлавныйБухгалтер",	ГлавныйБухгалтер);			
	                                         		
	// Производим операции связанные с текущей формой отчетности		
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"НаименованиеОрганизации",НаимЮЛПол);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"Руководитель", Руководитель);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"ГлавныйБухгалтер", ГлавныйБухгалтер);
				
КонецПроцедуры

// Процедура формирует строку периода отчета и отчетный период на языке формирования отчета
&НаСервере
Процедура УстановитьПериодОтчета()
	ПериодОтчетаНаРусском 	= "по состоянию на " + СтрЗаменить(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,"ДЛФ = ДД"), "г.", "года");
	ПериодОтчетаНаКазахском	= СтрЗаменить(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,"Л=kk_KZ; ДЛФ=ДД"), "ж.", "жылғы") + " жағдай бойынша";
	
	ПериодОтчета = НСТР("ru = " + """" + ПериодОтчетаНаРусском + """; kz = " + """" + ПериодОтчетаНаКазахском + """", ЯзыкФормирования);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "ПериодОтчета",	ПериодОтчета);
	
	ОтчетныйПериодНаРусском 	= "отчетный период " +  Строка(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)) + " г.";
	ОтчетныйПериодНаКазахском	= Строка(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)) + " ж." + " есепті кезең";

	ОтчетныйПериод = НСТР("ru = " + """" + ОтчетныйПериодНаРусском + """; kz = " + """" + ОтчетныйПериодНаКазахском + """", ЯзыкФормирования);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "ОтчетныйПериод",	ОтчетныйПериод);
	
КонецПроцедуры // УстановитьПериодОтчета()

&НаСервере
// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописью;
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописью = НСтр("ru = ""тенге""; kz = ""теңге""", ЯзыкФормирования);				
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописью = НСтр("ru = ""тысячах тенге""; kz = ""мың теңге""", ЯзыкФормирования);				
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописью = НСтр("ru = ""млн. тенге""; kz = ""млн. теңге""", ЯзыкФормирования);				
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";
	КонецЕсли;
	ВсегоСтраниц = 2;
	Для Сч = 1 по ВсегоСтраниц Цикл
		// Обход по страницам формы
		Для Каждого ОбластьТаблицы Из ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница" + Сч].Области Цикл
			// по областям каждой страницы
			Если Не ОбластьТаблицы.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(ОбластьТаблицы.Имя, "Страница") <> 0 Тогда				
				Продолжить;
			КонецЕсли;

			
			Если Найти(ОбластьТаблицы.Имя, "ОбластьФорматирования") <>  0 Тогда
				// форматируемые облатси должны быть объединены в область Значения1, Значения 2 и т.д.
				Продолжить;
			КонецЕсли;
			     						
			Если ОбластьТаблицы.СодержитЗначение Тогда
				Если СокрЛП(ОбластьТаблицы.ТипЗначения) = "Число" Тогда
					ОбластьТаблицы.Формат = мСтрокаФормата;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "РазмерностьПрописью", РазмерностьПрописью, Истина);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "РазмерностьПрописью1", РазмерностьПрописью, Истина);
	
	
КонецПроцедуры // УстановитьФорматВывода()

&НаСервере
// Функция заполняет структуру данными о соответствии счета БУ - строке баланса
//
Функция ЗаполнитьСтруктуруСоответствийСчетовСтрокамБаланса()
	СтруктураСоответствияСчетов = Новый Структура;
	
	МакетСоставаПоказателей = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("СоставПоказателей");
	ТекОбласть    			= МакетСоставаПоказателей.Область("Структура" + Прав(мВыбраннаяФорма,7));
	
	Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
		// перебираем строки макета		
		ИмяСчета 	= СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
		ГрафаОтчета = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
		
		Если ЗначениеЗаполнено(ИмяСчета) Тогда         // признак конечной строки
			СтруктураСоответствияСчетов.Вставить(ИмяСчета, ГрафаОтчета);			
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат СтруктураСоответствияСчетов;
КонецФункции // ЗаполнитьСтруктуруСоответствийСчетовСтрокамБаланса
	
&НаСервере
// Функция возвращает код строки макета баланса для конкретного счета
 // 
Функция ПолучитьКодСтрокиБаланса(Счет, СчетПредопределенный = Неопределено, СчетВидСчета = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(СчетПредопределенный) Тогда
		СчетПредопределенный = Счет.Предопределенный;   		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СчетВидСчета) Тогда
		СчетВидСчета = Счет.Вид;   		
	КонецЕсли;
	
	КодСтроки = Неопределено;
	
	Если СчетПредопределенный Тогда
		// поиск счета в Структуре соответствия
		ИмяПредопределенногоСчета = ПланыСчетов.Типовой.ПолучитьИмяПредопределенного(Счет);
		Если СтруктураРеквизитовФормы.СтруктураСоответствияСчетов.Свойство(ИмяПредопределенногоСчета) Тогда
			КодСтроки  = СтруктураРеквизитовФормы.СтруктураСоответствияСчетов[ИмяПредопределенногоСчета];
		КонецЕсли;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КодСтроки) Тогда
		// счета в макете соответствий нет
		// пробуем найти код по родителям счета рекурсивно			
		Если ЗначениеЗаполнено(Счет.Родитель) Тогда
			КодСтроки = ПолучитьКодСтрокиБаланса(Счет.Родитель);
		КонецЕсли;				
	КонецЕсли;				
		
	Если НЕ ЗначениеЗаполнено(КодСтроки) Тогда
		// Включаем его  в прочие активы, прочие резервы или пассивы в зависимости от вида счета
		Если СчетВидСчета  = ВидСчета.Активный Тогда
			КодСтроки =  СтруктураРеквизитовФормы.мКодСтрокиПрочиеАктивы; 		// прочие краткосрочные активы		
		Иначе	
			КодСтроки =  СтруктураРеквизитовФормы.мКодСтрокиПрочиеОбязательства; // прочие краткосрочные обязательства
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат КодСтроки;
КонецФункции // ПолучитьКодСтрокиБаланса

&НаСервере
Процедура УстановитьЗначенияПоказателей(ТаблицаДанных, КодБаланса, СуммаНачальныйОстатокДт, СуммаНачальныйОстатокКт, СуммаКонечныйОстатокДт, СуммаКонечныйОстатокКт)
	ЧисловойКодБаланса 		= 0;// для проверки начала раздела обязательств
	
	СуммаНачальныйОстаток 	= 0;
	СуммаКонечныйОстаток 	= 0;
	
	КодСтрокиОтчета = "Б" + СокрЛП(КодБаланса); // код строки в макете
	
	Попытка
		ЧисловойКодБаланса = Число(КодБаланса);	
	Исключение   
		ЧисловойКодБаланса 		= 0;
	КонецПопытки;
	
	Если ЧисловойКодБаланса < СтруктураРеквизитовФормы.мКодНачалаРазделаОбязательств Тогда
		// это активы. Считаем как Дт - Кт
		СуммаНачальныйОстаток 	= СуммаНачальныйОстатокДт - СуммаНачальныйОстатокКт;
		СуммаКонечныйОстаток	= СуммаКонечныйОстатокДт - СуммаКонечныйОстатокКт;
	Иначе
		// это пассивы. Считаем как Кт-Дт
		СуммаНачальныйОстаток 	= СуммаНачальныйОстатокКт - СуммаНачальныйОстатокДт;
		СуммаКонечныйОстаток	= СуммаКонечныйОстатокКт - СуммаКонечныйОстатокДт;
	КонецЕсли;	
	
	Если ЧисловойКодБаланса > 200 Тогда
		ТабличныйДокумент = ФормаОтчетаПолеТабличногоДокументаСтраница2;
	Иначе
		ТабличныйДокумент = ФормаОтчетаПолеТабличногоДокументаСтраница1;
	КонецЕсли;
	
	// с учетом имеющихся данных в строке
	СуммаКонечныйОстаток = СуммаКонечныйОстаток + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, КодСтрокиОтчета + "_1");
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, КодСтрокиОтчета + "_1", СуммаКонечныйОстаток, ТабличныйДокумент);
	
	// с учетом имеющихся данных в строке
	СуммаНачальныйОстаток = СуммаНачальныйОстаток + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, КодСтрокиОтчета + "_2");
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,КодСтрокиОтчета + "_2", СуммаНачальныйОстаток, ТабличныйДокумент);
	
КонецПроцедуры	// УстановитьЗначенияПоказателей

&НаКлиенте
// Выполняет расчет вычисляемых показателей формы
// Параметр Изменено определяет откуда была вызвана данная процедура
// 
// При Изменено = Истина вызывается при изменении поля табличного документа,
// в остальных случаях параметр = Ложь.
// Основное назначение - манипуляция со значениями полей, которые которые подлежит не суммовому расчету, 
// а расчету суммы с добавлением входящих в него значений
//
Процедура ФормаОтчетаРасчет(ИмяЯчейки, ЗначениеЯчейки, Изменено = Ложь)

	 //Расчет вычисляемых ячеек
	
	ТекИмяФормы = "ФормаОтчета";	
	ФормаОтчетаРасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки);	
			    	                	
КонецПроцедуры   //ФормаРасчет()

&НаСервере
Процедура ФормаОтчетаРасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки )
	ТекИмяФормы = "ФормаОтчета";
	
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,ИмяЯчейки ,ЗначениеЯчейки);
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ТекИмяФормы);	
	
	// 01. Итого краткосрочные активы (сумма строк с 010 по 019)																				
	Для НомерПериода = 1 по 2 Цикл
		Итого = 0;
		Для Счетчик  = 10 по 19 Цикл
			НомерСтроки = "Б" + Формат(Счетчик,"ЧЦ=3; ЧДЦ=0; ЧВН=") + "_";			
			Итого = Итого + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,НомерСтроки + НомерПериода);
		КонецЦикла;	
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,"Б100_" + НомерПериода ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница1);
	КонецЦикла;	
	// 09. Итого долгосрочные активы (сумма строк с 110 по 123)
	Для НомерПериода = 1 по 2 Цикл
		Итого = 0;
		Для Счетчик  = 110 по 123 Цикл
			НомерСтроки = "Б" + Формат(Счетчик,"ЧЦ=3; ЧДЦ=0; ЧВН=") + "_";			
			Итого = Итого + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,НомерСтроки + НомерПериода);
		КонецЦикла;	
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "Б200_" + НомерПериода ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница1);
	КонецЦикла;	
	// 23. Итого краткосрочные обязательства(сумма строк с 210 по 217)																				
	Для НомерПериода = 1 по 2 Цикл
		Итого = 0;
		Для Счетчик  = 210 по 217 Цикл
			НомерСтроки = "Б" + Формат(Счетчик,"ЧЦ=3; ЧДЦ=0; ЧВН=") + "_";			
			Итого = Итого + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,НомерСтроки + НомерПериода);
		КонецЦикла;	
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "Б300_" + НомерПериода ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница2);
	КонецЦикла;		
	// 30. Итого долгосрочные обязательства(сумма строк с 310 по 316)
	Для НомерПериода = 1 по 2 Цикл
		Итого = 0;
		Для Счетчик  = 310 по 316 Цикл
			НомерСтроки = "Б" + Формат(Счетчик,"ЧЦ=3; ЧДЦ=0; ЧВН=") + "_";			
			Итого = Итого + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,НомерСтроки + НомерПериода);
		КонецЦикла;	
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "Б400_" + НомерПериода ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница2);
	КонецЦикла;		
	// 36. Итого капитал(сумма строк с 410 по 414)
	Для НомерПериода = 1 по 2 Цикл
		Итого = 0;
		Для Счетчик  = 410 по 414 Цикл
			НомерСтроки = "Б" + Формат(Счетчик,"ЧЦ=3; ЧДЦ=0; ЧВН=") + "_";			
			Итого = Итого + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,НомерСтроки + НомерПериода);
		КонецЦикла;	
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "Б420_" + НомерПериода ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница2);
		// с учетом доли неконтролирующих собственнников
		Итого = Итого +РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Б421_" + НомерПериода);
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "Б500_" + НомерПериода ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница2);
	КонецЦикла;	
	
	// 21. Баланс активов (стр.100 + стр.101 + 200)								
	Для НомерПериода = 1 по 2 Цикл
		Итого = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Б100_" + НомерПериода)
				+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Б101_" + НомерПериода)
				+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Б200_" + НомерПериода);
		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "Б1_" + НомерПериода ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница1);
	КонецЦикла;	
	// 22. Баланс пассивов (стр.300 + стр.301 + 400 + 500)								
	Для НомерПериода = 1 по 2 Цикл
		Итого = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Б300_" + НомерПериода)
				+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Б301_" + НомерПериода)
				+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Б400_" + НомерПериода)
				+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Б500_" + НомерПериода);
		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "Б2_" + НомерПериода ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница2);
	КонецЦикла;	
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, КодФормы, ТаблицаДанных);
КонецПроцедуры

&НаСервере
Функция ФормаРассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТиповойОстаткиИОбороты.Счет КАК Счет,
	               |	ТиповойОстаткиИОбороты.Счет.Предопределенный КАК Предопределенный,
	               |	ТиповойОстаткиИОбороты.Счет.Вид КАК ВидСчета,
	               |	ТиповойОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДт,
	               |	ТиповойОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СуммаНачальныйОстатокКт,
	               |	ТиповойОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
	               |	ТиповойОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , , НЕ Счет.Забалансовый, , Организация В (&СписокОрганизаций)) КАК ТиповойОстаткиИОбороты
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Счет
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	Запрос.УстановитьПараметр("ДатаНачала", 			НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаОкончания", 			КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("СписокОрганизаций", 		мСписокСтруктурныхЕдиниц);
		                	           	
	Результат = Запрос.Выполнить();
		     	
	Возврат Результат;		 				   	
КонецФункции // ФормаРассчитатьДанныеФормы()

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
		
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, Ложь,Ложь);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, КодФормы);
	
	ВыборкаРезультата = ФормаРассчитатьДанныеФормы();
   
	ВыборкаОтчета = ВыборкаРезультата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОтчета.Следующий() Цикл
		Если ВыборкаОтчета.СуммаНачальныйОстатокДт = 0 И ВыборкаОтчета.СуммаНачальныйОстатокКт = 0 И  ВыборкаОтчета.СуммаКонечныйОстатокДт = 0 И ВыборкаОтчета.СуммаКонечныйОстатокКт = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		КодСтрокиБаланса = ПолучитьКодСтрокиБаланса(ВыборкаОтчета.Счет, ВыборкаОтчета.Предопределенный, ВыборкаОтчета.ВидСчета);
		УстановитьЗначенияПоказателей(ТаблицаДанных, КодСтрокиБаланса, ВыборкаОтчета.СуммаНачальныйОстатокДт,ВыборкаОтчета.СуммаНачальныйОстатокКт, ВыборкаОтчета.СуммаКонечныйОстатокДт, ВыборкаОтчета.СуммаКонечныйОстатокКт);		 
	 КонецЦикла;	

	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, КодФормы, ТаблицаДанных);	
		
	ФормаОтчетаРасчетНаСервере(Неопределено, Неопределено);	
	Модифицированность = Истина;
	УстановитьФорматВывода();
	
КонецПроцедуры

Функция ФормаОтчетаПолучитьСписокСчетовВключаемыхВРасшифровку(КодСтрокиБаланса, ПризнакСчетовВключаемыхВСтроку = Истина)
	СписокСчетов  = Новый СписокЗначений;
		
	Для Каждого ЭлементСоответствия из СтруктураРеквизитовФормы.СтруктураСоответствияСчетов Цикл
		Если (ЭлементСоответствия.Значение = КодСтрокиБаланса) = ПризнакСчетовВключаемыхВСтроку Тогда
			Попытка
				СписокСчетов.Добавить(ПланыСчетов.Типовой[ЭлементСоответствия.Ключ]);
			Исключение
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;		

	Возврат СписокСчетов; 
КонецФункции

&НаКлиенте
Процедура ФормаОтчетаРасшифровкаСКД(ИмяЯчейки)
	Если Найти(ИмяЯчейки, "Б") = 0 Тогда 
		Возврат;
	КонецЕсли;
			
	ИмяЯчейки = Сред(ИмяЯчейки, 2, 3);
				
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", 	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ТипДанных", 		"РегистрыБухгалтерии");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяОбъекта", 	"Типовой");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяТаблицы", 	"ОстаткиИОбороты");
	//ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ПолучитьАдресМакетаСКД());

	// Отборы
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";	
    БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Организация",  мСписокСтруктурныхЕдиниц, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
	
	// Сортировка
	ПользовательскиеСортировки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ПорядокКомпоновкиДанных"));
	ПользовательскиеСортировки.ИдентификаторПользовательскойНастройки = "Порядок";
	
	НовыйЭлементПорядка = ПользовательскиеСортировки.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовыйЭлементПорядка.Использование  = Истина;
	НовыйЭлементПорядка.Поле  = Новый ПолеКомпоновкиДанных("Счет");
	
	// Группировки	
	МассивГруппировок = Новый Массив();
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "Организация", НСтр("ru = 'Организация'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	//Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	//	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "СтруктурноеПодразделение", НСтр("ru = 'Структурная единица'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	//КонецЕсли;	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка",  МассивГруппировок);
	
	
	// Дополнительные отборы
	Если ИмяЯчейки<> СтруктураРеквизитовФормы.мКодСтрокиПрочиеАктивы И ИмяЯчейки<> СтруктураРеквизитовФормы.мКодСтрокиПрочиеОбязательства Тогда		
		// получаем счета для указанной строки
		СчетаРасшифровки = ФормаОтчетаПолучитьСписокСчетовВключаемыхВРасшифровку(ИмяЯчейки);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет",  СчетаРасшифровки, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);		
		//// кроме счетов, которые участвуютв других строках
		//ИсключаемыеСчетаРасшифровки = ФормаОтчетаПолучитьСписокСчетовВключаемыхВРасшифровку(ИмяЯчейки, Ложь);
		//БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет",  ИсключаемыеСчетаРасшифровки, ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии);		
		
	Иначе
		// в строки прочих активов и прочих обязательств могу входить счета, не учетнные в базовом соответствии (например, счета, добавленные пользователем)
		// поэтому в эти строки должны входить все, счета не учтенные в остальных строках и имеющих нужный вид счета
		СчетаРасшифровки = ФормаОтчетаПолучитьСписокСчетовВключаемыхВРасшифровку(ИмяЯчейки, Ложь); // получаем список счетов исключаемых из строки
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет",  СчетаРасшифровки, ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии);						
		
		//В строку прочих активов включаются активные счета, не вошедшие в другие разделы активов, в строку прочих обязательств - пассивные и активно-пассивные счета
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет.Вид",  ВидСчета.Активный, ?(ИмяЯчейки = СтруктураРеквизитовФормы.мКодСтрокиПрочиеАктивы, ВидСравненияКомпоновкиДанных.Равно, ВидСравненияКомпоновкиДанных.НеРавно));				
	КонецЕсли;
    БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет.Забалансовый",  Ложь, ВидСравненияКомпоновкиДанных.Равно);				
	
	
	//ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПараметрыДанных", МассивПараметровДанных);
	
	ПользовательскиеПоля = ПользовательскиеНастройки.Элементы.Добавить(Тип("ВыбранныеПоляКомпоновкиДанных"));	
	ПользовательскиеПоля.ИдентификаторПользовательскойНастройки = "Выбор";	    	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Счет.Код", "Код счета");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Счет.Наименование", "Наименование счета");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаНачальныйОстатокДт", "Сальдо начальное Дт");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаНачальныйОстатокКт", "Сальдо начальное Кт");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаКонечныйОстатокДт", "Сальдо конечное Дт");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаКонечныйОстатокКт", "Сальдо конечное Кт");
		
	// Прочие настройки
	ТекстЗаголовка = НСТР("ru = 'Регистр бухгалтерского учета к строке %1 Баланса'");	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Заголовок", 	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, ИмяЯчейки));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", Истина);	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьПодписи", Истина); 	
	
	ИмяРазделаРасшифровки = "Баланс " + СтруктураРеквизитовФормы.мГод;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ВыводитьЗаголовок", Истина);	
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", ИмяРазделаРасшифровки);
	//ПараметрыФормы.Вставить("ЗаполняемыеНастройки",ЗаполняемыеНастройки );	
    
	ОткрытьФорму("Отчет.УниверсальныйОтчетПоМетаданным.Форма.ФормаОтчета", ПараметрыФормы,, Истина);
КонецПроцедуры

//Обход проблемы с очисткой значением в клиент-сервере
&НаКлиенте
Процедура ПанельФормаОтчетаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ПанельФормаОтчетаПриСменеСтраницыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПанельФормаОтчетаПриСменеСтраницыНаСервере()
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, КодФормы);
	
	УстановитьФорматВывода();	

КонецПроцедуры



