#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	Отказ = Ложь;
	
	ДанныеРасшифровкиОбъект = Неопределено;
	
	Результат = Новый ТабличныйДокумент;
	
	Результат.НачатьАвтогруппировкуСтрок();
	
	Макет = ПолучитьМакет("Макет");
	
	ВывестиДанныеПоКонтрагенту(ПараметрыОтчета, Макет, Результат, 1);
	
	Результат.ЗакончитьАвтогруппировкуСтрок();
	
	Если Не Отказ Тогда
		БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
		Результат.ФиксацияСверху = 0;
		Результат.ФиксацияСлева  = 0;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Новый Структура("Результат, ДанныеРасшифровки", Результат, Неопределено), АдресХранилища);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ВывестиДанныеПоКонтрагенту(ПараметрыОтчета, Макет, Таб, УровеньКонтрагента)
	
	ВыводитьИерархию = НЕ ЗначениеЗаполнено(ПараметрыОтчета.Контрагент) ИЛИ ПараметрыОтчета.Контрагент.ЭтоГруппа;
	
	Результат = ПолучитьМассивКонтрагентовДляПечати(ПараметрыОтчета.Контрагент);
	ДеревоКонтрагентов = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ТаблицаКонтрагентов = Результат.Выгрузить();
	
	Если ТаблицаКонтрагентов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСтруктурой = Новый Структура("ВыводитьДопКонтИнф", ПараметрыОтчета.ВыводитьДопКонтИнф);
	Для Каждого Элемент Из ПараметрыОтчета.СписокНастроек Цикл
		НастройкиСтруктурой.Вставить(Элемент.Значение, Элемент.Пометка);
	КонецЦикла;
	
	НомераТаблиц = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРеквизитыКонтрагентов(НомераТаблиц)
				 + ТекстЗапросаКонтактныеЛицаКонтрагентов(НомераТаблиц, НастройкиСтруктурой)
				 + ТекстЗапросаКонтактнаяИнформацияКонтрагентов(НомераТаблиц)
				 + ТекстЗапросаСвойстваКонтрагентов(НомераТаблиц);
				 
	Запрос.УстановитьПараметр("МассивКонтрагентов",         ТаблицаКонтрагентов.Скопировать(Новый Структура("ЭтоГруппа", Ложь)).ВыгрузитьКолонку("Ссылка"));
	Запрос.УстановитьПараметр("БИКДоРеформы",               ПараметрыОтчета.ДатаОтчета < Дата(2010,06,07));
	
	ПараметрыФормированияОтчета = Новый Структура;
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		
		Результат = Запрос.ВыполнитьПакет();
		
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыФормированияОтчета.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого СтрокаКонтрагента Из ДеревоКонтрагентов.Строки Цикл
		
		ВывестиДанныеРекурсивно(СтрокаКонтрагента, ПараметрыФормированияОтчета, НастройкиСтруктурой, ПараметрыОтчета, Макет, Таб, УровеньКонтрагента, ВыводитьИерархию);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМассивКонтрагентовДляПечати(Контрагент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	Контрагенты.ЭтоГруппа
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ЭтоГруппа
	|	И (Контрагенты.Родитель В ИЕРАРХИИ (&Контрагент)
	|			ИЛИ НЕ Контрагенты.ЭтоГруппа
	|				И Контрагенты.Ссылка = &Контрагент)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагенты.ЭтоГруппа УБЫВ,
	|	Контрагенты.Наименование
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ТекстЗапросаРеквизитыКонтрагентов(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РеквизитыКонтрагентов", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.Наименование,
	|	Контрагенты.ГоловнойКонтрагент,
	|	Контрагенты.ГоловнойКонтрагент.ЮрФизЛицо,
	|	Контрагенты.ЮрФизЛицо,
	|	Контрагенты.РНН,
	|	Контрагенты.КодПоОКПО,
	|	Контрагенты.ИдентификационныйКодЛичности,
	|	ВЫРАЗИТЬ(Контрагенты.ДокументУдостоверяющийЛичность КАК СТРОКА(1000)) КАК ДокументУдостоверяющийЛичность,
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет,
	|	БанковскиеСчета.НомерСчета КАК БанковскийСчетНомерСчета,
	|	Банки.Ссылка КАК Банк,
	|	Банки.Представление КАК БанкПредставление,
	|	Банки.Город КАК БанкГород,
	|	Банки.КоррСчет КАК БанкКоррСчет,
	|	ВЫБОР
	|		КОГДА &БИКДоРеформы
	|			ТОГДА Банки.БИКДоРеформыБанковскихСчетов
	|		ИНАЧЕ Банки.БИК
	|	КОНЕЦ КАК БанкБИК
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|			ПО БанковскиеСчета.Банк = Банки.Ссылка
	|		ПО Контрагенты.ОсновнойБанковскийСчет = БанковскиеСчета.Ссылка
	|ГДЕ
	|	Контрагенты.Ссылка В(&МассивКонтрагентов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Контрагент,
	|	Реквизиты.Наименование,
	|	Реквизиты.ГоловнойКонтрагент,
	|	Реквизиты.ГоловнойКонтрагентЮрФизЛицо,
	|	Реквизиты.ЮрФизЛицо,
	|	Реквизиты.РНН,
	|	Реквизиты.КодПоОКПО,
	|	Реквизиты.ИдентификационныйКодЛичности,
	|	Реквизиты.ДокументУдостоверяющийЛичность,
	|	Реквизиты.БанковскийСчет,
	|	Реквизиты.БанковскийСчетНомерСчета,
	|	Реквизиты.Банк,
	|	Реквизиты.БанкПредставление,
	|	Реквизиты.БанкГород,
	|	Реквизиты.БанкКоррСчет,
	|	Реквизиты.БанкБИК
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Реквизиты.Контрагент.Наименование";

	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаКонтактныеЛицаКонтрагентов(НомераТаблиц, НастройкиСтруктурой)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаКонтактныеЛицаКонтрагентов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("КонтактныеЛицаКонтрагентов", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Реквизиты.Контрагент КАК Контрагент,
	|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо,
	|	КонтактныеЛица.Должность КАК Должность,
	|	КонтактныеЛица.Роль КАК Роль,
	|	КонтактныеЛица.Фамилия КАК Фамилия,
	|	КонтактныеЛица.Имя КАК Имя,
	|	КонтактныеЛица.Отчество КАК Отчество
	|ПОМЕСТИТЬ ВТКонтактныеЛица
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО КонтактныеЛица.ОбъектВладелец = Реквизиты.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТКонтактныеЛица.Контрагент,
	|	ВТКонтактныеЛица.КонтактноеЛицо,
	|	ВТКонтактныеЛица.Должность,
	|	ВТКонтактныеЛица.Роль,
	|	ВТКонтактныеЛица.Фамилия,
	|	ВТКонтактныеЛица.Имя,
	|	ВТКонтактныеЛица.Отчество
	|ИЗ
	|	ВТКонтактныеЛица КАК ВТКонтактныеЛица
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТКонтактныеЛица.КонтактноеЛицо.Наименование
	|ИТОГИ ПО
	|	Контрагент" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если НастройкиСтруктурой.ВыводитьДопКонтИнф Тогда 
		НомераТаблиц.Вставить("КонтактныеЛицаКонтрагентовКонтактнаяИнформация", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТКонтактныеЛица.Контрагент,
		|	КонтактнаяИнформация.Объект КАК Объект,
		|	КонтактнаяИнформация.Вид КАК Вид,
		|	КонтактнаяИнформация.Тип КАК Тип,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000)) КАК Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКонтактныеЛица КАК ВТКонтактныеЛица
		|		ПО КонтактнаяИнформация.Объект = ВТКонтактныеЛица.КонтактноеЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	Тип
		|ИТОГИ ПО
		|	ВТКонтактныеЛица.Контрагент" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКонтактнаяИнформацияКонтрагентов(НомераТаблиц)
	
	НомераТаблиц.Вставить("КонтактнаяИнформацияКонтрагентов", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Реквизиты.Контрагент КАК Контрагент,
	|	КонтактнаяИнформация.Объект КАК Объект,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000)) КАК Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО КонтактнаяИнформация.Объект = Реквизиты.Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Тип
	|ИТОГИ ПО
	|	Контрагент" + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСвойстваКонтрагентов(НомераТаблиц)
	
	НомераТаблиц.Вставить("СвойстваКонтрагентов", НомераТаблиц.Количество());
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Реквизиты.Контрагент КАК Контрагент,
	|	ДополнительныеСведения.Свойство.ПометкаУдаления КАК ПометкаУдаления,
	|	ДополнительныеСведения.Свойство.Заголовок КАК Свойство,
	|	ДополнительныеСведения.Значение КАК Значение
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО (Реквизиты.Контрагент = ДополнительныеСведения.Объект
	|				ИЛИ ДополнительныеСведения.Объект ЕСТЬ NULL )
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Реквизиты.Контрагент,
	|	КонтрагентыДополнительныеРеквизиты.Свойство.ПометкаУдаления,
	|	КонтрагентыДополнительныеРеквизиты.Свойство.Заголовок,
	|	КонтрагентыДополнительныеРеквизиты.Значение
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
	|		ПО Реквизиты.Контрагент = КонтрагентыДополнительныеРеквизиты.Ссылка
	|ИТОГИ ПО
	|	Контрагент";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Процедура ВывестиДанныеРекурсивно(СтрокаДереваКонтрагентов, ПараметрыФормированияОтчета, НастройкиСтруктурой, ПараметрыОтчета, Макет, Таб, Знач УровеньКонтрагента, ВыводитьИерархию)
	
	Если СтрокаДереваКонтрагентов.ЭтоГруппа Тогда
		Если ВыводитьИерархию Тогда 
			Секция = Макет.ПолучитьОбласть("СтрокаГруппы");
			Секция.Параметры.ПечВыбКонтрагент = НСтр("ru = 'Группа контрагентов: '") + СокрЛП(СтрокаДереваКонтрагентов.Ссылка);
			Секция.Параметры.ВыбКонтрагент = СтрокаДереваКонтрагентов.Ссылка;
			Таб.Вывести(Секция, УровеньКонтрагента);
		КонецЕсли;
		Для Каждого СтрокаКонтрагента Из СтрокаДереваКонтрагентов.Строки Цикл
			ВывестиДанныеРекурсивно(СтрокаКонтрагента, ПараметрыФормированияОтчета, НастройкиСтруктурой, ПараметрыОтчета, Макет, Таб, УровеньКонтрагента + 1, ВыводитьИерархию);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ПараметрыФормированияОтчета.РеквизитыКонтрагентов.Сбросить();
	Если НЕ ПараметрыФормированияОтчета.РеквизитыКонтрагентов.НайтиСледующий(Новый Структура("Контрагент", СтрокаДереваКонтрагентов.Ссылка)) Тогда 
		Возврат;
	КонецЕсли;
	
	ВыборкаКонтрагенты = ПараметрыФормированияОтчета.РеквизитыКонтрагентов;
	
	//Шапка
	Секция = Макет.ПолучитьОбласть("Шапка");
	Секция.Параметры.ПечВыбКонтрагент = ВыборкаКонтрагенты.Наименование;
	Секция.Параметры.ВыбКонтрагент    = ВыборкаКонтрагенты.Контрагент;
	Секция.Параметры.ДатаОтчета       = Формат(ПараметрыОтчета.ДатаОтчета,"ДФ=dd.MM.yyyy");
	Таб.Вывести(Секция, УровеньКонтрагента);
	
	ПорядковыйНомер = 0;
	Для Каждого Настройка Из ПараметрыОтчета.СписокНастроек Цикл
		Если НЕ Настройка.Пометка Тогда
			Продолжить;
		КонецЕсли; 
		ПорядковыйНомер = ПорядковыйНомер + 1;
		
		ВывестиДанные(ВыборкаКонтрагенты, ПараметрыФормированияОтчета, НастройкиСтруктурой, ПараметрыОтчета, Макет, Таб, ПорядковыйНомер, Настройка.Значение, УровеньКонтрагента + 1)
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиДанные(ДанныеКонтрагента, ПараметрыФормированияОтчета, НастройкиСтруктурой, ПараметрыОтчета, Макет, Таб, ПорядковыйНомер, Имя, УровеньКонтрагента)

	ПараметрыПоиска = Новый Структура("Контрагент", ДанныеКонтрагента.Контрагент);
	//Общая информация

	//Макет = ПолучитьМакет("Макет");

	Если Имя = "ОбщиеДанные" Тогда

		Секция = Макет.ПолучитьОбласть("Шапка_Общие");

		Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;

		Таб.Вывести(Секция, УровеньКонтрагента);

		Секция = Макет.ПолучитьОбласть("Строка_Общие");

		Если ЗначениеЗаполнено(ДанныеКонтрагента.ЮрФизЛицо) Тогда

			Если ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
				Секция.Параметры.ЮрФизЛицо = НСтр("ru = 'Юридическое лицо'");
			Иначе //Физическое лицо
				Секция.Параметры.ЮрФизЛицо = НСтр("ru = 'Физическое лицо'");
			КонецЕсли;

		Иначе
			Секция.Параметры.ЮрФизЛицо = НСтр("ru = 'Не задано'");
		КонецЕсли;

		Если ЗначениеЗаполнено(ДанныеКонтрагента.ГоловнойКонтрагент) Тогда

			СтрокаГоловногоКонтрагента = Строка(ДанныеКонтрагента.ГоловнойКонтрагент);

			Если ЗначениеЗаполнено(ДанныеКонтрагента.ГоловнойКонтрагентЮрФизЛицо) Тогда
				Если ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
					СтрокаГоловногоКонтрагента = СтрокаГоловногоКонтрагента + НСтр("ru = ' (Юридическое лицо)'");
				Иначе //Физическое лицо
					СтрокаГоловногоКонтрагента = СтрокаГоловногоКонтрагента + НСтр("ru = ' (Физическое лицо)'");
				КонецЕсли;
			КонецЕсли;

			Секция.Параметры.ГоловнойКонтрагент           = СтрокаГоловногоКонтрагента;
			Секция.Области.ГоловнойКонтрагент.Расшифровка = ДанныеКонтрагента.ГоловнойКонтрагент;

		Иначе
			Секция.Параметры.ГоловнойКонтрагент = НСтр("ru = 'Не задан'");

		КонецЕсли;
		
		Если ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда //Юридическое лицо

			Секция = Макет.ПолучитьОбласть("ИнформацияЮрЛицо");
			Секция.Параметры.РНН       = ДанныеКонтрагента.РНН;
			Секция.Параметры.КодПоОКПО = ДанныеКонтрагента.КодПоОКПО;
       		Секция.Параметры.БИН_ИИН   = ДанныеКонтрагента.ИдентификационныйКодЛичности;
			
		Иначе //Физическое лицо

			Секция = Макет.ПолучитьОбласть("ИнформацияФизЛицо");
			Секция.Параметры.РНН                = ДанныеКонтрагента.РНН;
			Секция.Параметры.ДокументУдЛичность = ДанныеКонтрагента.ДокументУдостоверяющийЛичность;
			Секция.Параметры.БИН_ИИН   			= ДанныеКонтрагента.ИдентификационныйКодЛичности;

		КонецЕсли;

		ПараметрыФормированияОтчета.КонтактнаяИнформацияКонтрагентов.Сбросить();
		
		Если ПараметрыФормированияОтчета.КонтактнаяИнформацияКонтрагентов.НайтиСледующий(ПараметрыПоиска) Тогда
			
			ВыборкаКонтактнаяИнформация = ПараметрыФормированияОтчета.КонтактнаяИнформацияКонтрагентов.Выбрать();
			ПараметрыУточняющегоПоиска = Новый Структура("Контрагент, Тип, Вид", ДанныеКонтрагента.Контрагент, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
			Если ВыборкаКонтактнаяИнформация.НайтиСледующий(ПараметрыУточняющегоПоиска) Тогда
				Секция.Параметры.ЮрАдрес   = ВыборкаКонтактнаяИнформация.Представление;
			КонецЕсли;
			
			ВыборкаКонтактнаяИнформация.Сбросить();
			ПараметрыУточняющегоПоиска = Новый Структура("Контрагент, Тип, Вид", ДанныеКонтрагента.Контрагент, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			Если ВыборкаКонтактнаяИнформация.НайтиСледующий(ПараметрыУточняющегоПоиска) Тогда
				Секция.Параметры.ФактАдрес   = ВыборкаКонтактнаяИнформация.Представление;
			КонецЕсли;
			
			ВыборкаКонтактнаяИнформация.Сбросить();
			ПараметрыУточняющегоПоиска = Новый Структура("Контрагент, Тип, Вид", ДанныеКонтрагента.Контрагент, Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
			Если ВыборкаКонтактнаяИнформация.НайтиСледующий(ПараметрыУточняющегоПоиска) Тогда
				Секция.Параметры.Телефон   = ВыборкаКонтактнаяИнформация.Представление;
			КонецЕсли;
			
		КонецЕсли;
		
		Таб.Вывести(Секция, УровеньКонтрагента+2);
		
		Если ЗначениеЗаполнено(ДанныеКонтрагента.БанковскийСчет) тогда

			Секция = Макет.ПолучитьОбласть("БанкКонтрагента");
			Секция.Параметры.НомерСчета = ДанныеКонтрагента.БанковскийСчетНомерСчета;

			Если ЗначениеЗаполнено(ДанныеКонтрагента.Банк) Тогда
				Секция.Параметры.Банк    = ДанныеКонтрагента.БанкПредставление + " " + ДанныеКонтрагента.БанкГород;
				Секция.Параметры.Бик     = ДанныеКонтрагента.БанкБИК;
				Секция.Параметры.КорСчет = ДанныеКонтрагента.БанкКоррСчет;
			КонецЕсли; 

			Таб.Вывести(Секция, УровеньКонтрагента+2);

		КонецЕсли;

		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция);

	ИначеЕсли Имя = "КонтИнф" Тогда

		//Контактная информация контрагента
		Секция = Макет.ПолучитьОбласть("Шапка_КонтактнаяИнформация");
		Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;
		Таб.Вывести(Секция,УровеньКонтрагента);
		
		ПараметрыФормированияОтчета.КонтактнаяИнформацияКонтрагентов.Сбросить();
		
		Если ПараметрыФормированияОтчета.КонтактнаяИнформацияКонтрагентов.НайтиСледующий(ПараметрыПоиска) Тогда
			
			ВыборкаКонтИнф = ПараметрыФормированияОтчета.КонтактнаяИнформацияКонтрагентов.Выбрать();
			
			ПрошлыйТип = Неопределено;
			
			Пока ВыборкаКонтИнф.Следующий() Цикл
				
				Если НЕ ЗначениеЗаполнено(ВыборкаКонтИнф.Тип) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПрошлыйТип <> ВыборкаКонтИнф.Тип Тогда
					
					Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
					
					Таб.Вывести(Секция, УровеньКонтрагента+1);
					
					СекцияКИ_Тип = Макет.ПолучитьОбласть("КонтИнфТип");
					СекцияКИ_Тип.Параметры.ТипКИ = ВыборкаКонтИнф.Тип;
					
					Таб.Вывести(СекцияКИ_Тип, УровеньКонтрагента+1);
					
				КонецЕсли;
				
				Секция = Макет.ПолучитьОбласть("Строка_КонтактнаяИнформация");
				Секция.Параметры.ВидКИ    = СокрЛП(ВыборкаКонтИнф.Вид);
				Секция.Параметры.Значение = ВыборкаКонтИнф.Представление;
				
				Таб.Вывести(Секция, УровеньКонтрагента+1);
				
				ПрошлыйТип = ВыборкаКонтИнф.Тип;
				
			КонецЦикла;
		КонецЕсли;
		
		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция);

	ИначеЕсли Имя = "СвойстваИЗначения" Тогда
		
		ПараметрыФормированияОтчета.СвойстваКонтрагентов.Сбросить();
		
		Если ПараметрыФормированияОтчета.СвойстваКонтрагентов.НайтиСледующий(ПараметрыПоиска) Тогда
		
			ВыборкаСвойств = ПараметрыФормированияОтчета.СвойстваКонтрагентов.Выбрать();
			
			Секция = Макет.ПолучитьОбласть("Шапка_Свойства");
			Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;
			
			Таб.Вывести(Секция, УровеньКонтрагента);
			
			Секция = Макет.ПолучитьОбласть("Строка_Свойства");
			Ном = 0;
			Пока ВыборкаСвойств.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(ВыборкаСвойств.Свойство) Тогда
					Продолжить;
				КонецЕсли;
				
				Ном=Ном+1;
				Секция.Параметры.ИмяСвойства = "" + Ном + ". " + ВыборкаСвойств.Свойство;
				Секция.Параметры.ЗначениеСвойства = "" + ВыборкаСвойств.Значение;
				Таб.Вывести(Секция, УровеньКонтрагента+1);
			КонецЦикла; 
		КонецЕсли;
		
		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция);

	ИначеЕсли Имя = "КонтЛица" Тогда

		//Контактные лица контрагента
		Секция = Макет.ПолучитьОбласть("Шапка_КонтактныеЛица");
		Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;

		Таб.Вывести(Секция,УровеньКонтрагента);

		ПараметрыФормированияОтчета.КонтактныеЛицаКонтрагентов.Сбросить();
		
		Если ПараметрыФормированияОтчета.КонтактныеЛицаКонтрагентов.НайтиСледующий(ПараметрыПоиска) Тогда
		
			ВыборкаКонтактныеЛица = ПараметрыФормированияОтчета.КонтактныеЛицаКонтрагентов.Выбрать();
			Ном       = 0;

			Пока ВыборкаКонтактныеЛица.Следующий() Цикл

				Если НЕ ЗначениеЗаполнено(ВыборкаКонтактныеЛица.КонтактноеЛицо) Тогда
					Продолжить;
				КонецЕсли;
				
				Ном    = Ном + 1;
				Секция = Макет.ПолучитьОбласть("Строка_КонтактныеЛица");
				ПредставлениеКонтактногоЛица = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 %2 %3'"), СокрЛП(ВыборкаКонтактныеЛица.Фамилия), СокрЛП(ВыборкаКонтактныеЛица.Имя), СокрЛП(ВыборкаКонтактныеЛица.Отчество));

				Если НЕ ПустаяСтрока(ВыборкаКонтактныеЛица.Должность) Тогда
					ПредставлениеКонтактногоЛица = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1, %2'"), ПредставлениеКонтактногоЛица, СокрЛП(ВыборкаКонтактныеЛица.Должность));
				КонецЕсли;

				Если ЗначениеЗаполнено(ВыборкаКонтактныеЛица.Роль) Тогда
					ПредставлениеКонтактногоЛица = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1 (роль: %2)'"), ПредставлениеКонтактногоЛица, СокрЛП(ВыборкаКонтактныеЛица.Роль));
				КонецЕсли;

				Секция.Параметры.ПредставлениеКонтактногоЛица           = ПредставлениеКонтактногоЛица;
				Секция.Области.ПредставлениеКонтактногоЛица.Расшифровка = ВыборкаКонтактныеЛица.КонтактноеЛицо;
				Таб.Вывести(Секция, УровеньКонтрагента+1);

				Если НастройкиСтруктурой.ВыводитьДопКонтИнф Тогда

					ПараметрыФормированияОтчета.КонтактныеЛицаКонтрагентовКонтактнаяИнформация.Сбросить();
					
					Если ПараметрыФормированияОтчета.КонтактныеЛицаКонтрагентовКонтактнаяИнформация.НайтиСледующий(ПараметрыПоиска) Тогда
						
						ВыборкаКонтИнф = ПараметрыФормированияОтчета.КонтактныеЛицаКонтрагентовКонтактнаяИнформация.Выбрать();
						
						Пока ВыборкаКонтИнф.Следующий() Цикл
							
							Если НЕ ЗначениеЗаполнено(ВыборкаКонтИнф.Тип) Тогда
								Продолжить;
							КонецЕсли;
							
							Если ПрошлыйТип <> ВыборкаКонтИнф.Тип Тогда
								
								Если ПрошлыйТип <> Неопределено Тогда
									Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
									Таб.Вывести(Секция);
								КонецЕсли;
								
								СекцияКИ_Тип = Макет.ПолучитьОбласть("КонтИнфТип");
								СекцияКИ_Тип.Параметры.ТипКИ = ВыборкаКонтИнф.Тип;
								
								Таб.Вывести(СекцияКИ_Тип, УровеньКонтрагента+1);
								
							КонецЕсли;
							
							СекцияКИ = Макет.ПолучитьОбласть("КонтИнф_КонтактныеЛица");
							СекцияКИ.Параметры.ВидКИ    = ВыборкаКонтИнф.Вид;
							СекцияКИ.Параметры.Значение = ВыборкаКонтИнф.Представление;
							
							Таб.Вывести(СекцияКИ, УровеньКонтрагента+2);
							
							ПрошлыйТип = ВыборкаКонтИнф.Тип;
							
						КонецЦикла;
					КонецЕсли;
					
					Секция = Макет.ПолучитьОбласть("ПустаяСтрока");

					Таб.Вывести(Секция, УровеньКонтрагента+1);

				КонецЕсли;

			КонецЦикла;
		КонецЕсли;
		
		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция);

	КонецЕсли;

КонецПроцедуры

#КонецЕсли