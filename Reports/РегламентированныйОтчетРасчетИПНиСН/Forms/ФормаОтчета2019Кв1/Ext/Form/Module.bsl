////////////////////////////////////////////////////////////////////////////////
// Описание формы
// Параметры фомры:
//  Организация - СправочникСсылка.Организации - Налогоплательщик, представляющий отчет
//  мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета - Дата - отчетный период формирования отчета
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	мВыбраннаяФорма = "ФормаОтчета2019Кв1";
	КодФормы 		= "ФормаОтчета";
	               		
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруФормРегОтчета(ЭтотОбъект);	
			
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;	
	СтруктураРеквизитовФормы.мПечатныеформы         = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями = РегламентированнаяОтчетностьПереопределяемый.ПоддержкаРаботыСоСтруктурнымиПодразделениями(); 
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	// Общие механизмы
	ЗаполнитьСведенияОбОтчетномПериоде();
		
	Инициализация(Параметры.БезОткрытияФормы);
	
	УстановитьФорматВывода();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если Модифицированность Тогда 
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);	
		ТекстВопроса = НСТР("ru = 'Сохранить данные отчета?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(мСписокСтруктурныхЕдиниц, ЭтаФорма, СтандартнаяОбработка,
	                                                           "ПоНалогоплательщику", Налогоплательщик,,
															   ПредопределенноеЗначение("Перечисление.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты"),
															   Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда		
		мСписокСтруктурныхЕдиниц = Результат;		
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц); 		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	
	ЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТочностьЕдиницыИзмеренияПриИзменении(Элемент)
	
	ТочностьЕдиницыИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",            Истина);
	ПараметрыФормы.Вставить("РежимВыбора",                   Истина);
	ПараметрыФормы.Вставить("ОтборОрганизация",              Налогоплательщик);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
		
	Если ЗначениеЗаполнено(Сотрудник) Тогда
	    СотрудникПриИзмененииНаСервере();
	Иначе
		ФизЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение)
		И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		Если НЕ ПроверитьСоответствиеСотрудникаОрганизацииНаСервере(ВыбранноеЗначение) Тогда
	        ТекстСообщения = НСтр("ru = 'Организация отчета не соответствует организации, указанной в карточке сотрудника!'");            
	        ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);                
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПодписиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДатаПодписи) Тогда
		ДатаПодписиПриИзмененииНаСервере();
		Модифированность = Истина;
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "Отчеты"

&НаКлиенте
Процедура ФормаОтчетаПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если НЕ ЗначениеЗаполнено(ФизЛицо) ИЛИ НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран сотрудник!'"));
		Возврат;
	КонецЕсли;
	
	Перезаполнить = Истина; // Для выполнения запроса на пересчет данных к пользователю
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения =  РегламентированнаяОтчетностьКлиент.ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Перезаполнить Тогда
		НачатьЗамерВремени();
		
		ЗаполнитьАвтоНаСервере();		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФорму(Команда)
	
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	 	
	
	НачатьЗамерВремени();
	
	ЗаполнитьАвтоНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	ОткрытьФормуНастройкиСтраниц();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыФормы.Вставить("Организация",              Налогоплательщик);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, мВыбраннаяФорма, "") + "ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура СохранитьДанные() Экспорт
	
	СохранитьДанныеНаСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеглОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Форма = ДополнительныеПараметры.Форма;	
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", Форма.КодФормы));
		Вложенность = СтрокаФормы.ПолучитьЭлементы().Количество() > 0;	
		
		ОчиститьРеглОтчетЗавершениеНаСервере(СтрокаФормы.КодФормы, СтрокаФормы.Многострочность, Вложенность)	
	КонецЕсли;
	
КонецПроцедуры 	

&НаСервере
Процедура ОчиститьРеглОтчетЗавершениеНаСервере(КодФормы, ПризнакМногострочности, Вложенность)
	
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, ПризнакМногострочности, Вложенность);
	ВсегоСтраниц = 0;
	
КонецПроцедуры

&НаСервере
// Процедура очистки формы
//
// параметр: ТекИмяФормы - имя очищаемой формы (=КодФормы)
//           ОчиститьВсе - признак вида очистки формы              
//
Процедура Очистить(ТекИмяФормы, ОчиститьВсе = Ложь) Экспорт
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
    СписокПоказателейНеПодлежащихОчистке.Добавить("МестоПредоставления");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ДолжностьРуководителя");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ФИОРуководителя");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ФИОГлБухгалтера");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ДолжностьИсполнителя");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ФИОИсполнителя");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Номер");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Страница1");

	РегламентированнаяОтчетность.ОчиститьСтруктуруДанныхИТабличноеПолеФормы(ЭтаФорма, ТекИмяФормы, ОчиститьВсе, СписокПоказателейНеПодлежащихОчистке);
	
КонецПроцедуры // Очистить()

&НаКлиенте
Процедура ОбновитьПараметрыФормыНаКлиенте(Параметры) Экспорт
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);
	ВывестиПроцентыНалоговСборовОтчислений(Год(Параметры.мДатаНачалаПериодаОтчета));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормы(ТекФорма, Параметры)
	
	СтруктураРеквизитовФормы = ТекФорма.СтруктураРеквизитовФормы;
	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитовФормы, Параметры);
	
	ТекФорма.Налогоплательщик = Параметры.Организация;
	
	ТекФорма.мСписокСтруктурныхЕдиниц = Параметры.мСписокСтруктурныхЕдиниц;
	
	// заполним представление списка структурных единиц
	Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ТекФорма.ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ТекФорма.мСписокСтруктурныхЕдиниц);
	Иначе
		// сделаем невидимыми поля и надписи, относящиеся к структурным единицам
		ТекФорма.Элементы.ПредставлениеСпискаСтруктурныхЕдиниц.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяГлавнойФормы(ВыбраннаяФорма) Экспорт
	
	Возврат СтрДлина(ВыбраннаяФорма)-7;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры инициализации отчета и структуры его данных

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокСтруктурныхЕдиниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");			
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");		
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");		
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");		
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");	
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);			
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);	
	СтруктураРеквизитовФормы.Вставить("мПериодичность", Параметры.мПериодичность);		
	СтруктураРеквизитовФормы.Вставить("НалоговыйКомитет", Неопределено);			
	СтруктураРеквизитовФормы.Вставить("мГод");	
	СтруктураРеквизитовФормы.Вставить("мКвартал");	
	СтруктураРеквизитовФормы.Вставить("мМесяц");	
	// индивидуальные параметры формы
	СтруктураРеквизитовФормы.Вставить("мПоддержкаРаботыСоСтруктурнымиПодразделениями");
	СтруктураРеквизитовФормы.Вставить("Сотрудник");
	СтруктураРеквизитовФормы.Вставить("ФизЛицо");
	СтруктураРеквизитовФормы.Вставить("ДатаПодписи");
	
КонецПроцедуры // СформироватьСтруктуруРеквизитовФормы

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;			
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	ВсегоСтраниц = 1;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 2;
			ЯзыкФормирования 		 = "ru";
			ДатаПодписи              = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();	
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	//Обход ситуации с повторным открытием основной формы, из-за ТД
	МассивРеквизитовФормы = ЭтотОбъект.ПолучитьРеквизиты();
	Для Счетчик = 0 По МассивРеквизитовФормы.Количество()-1 Цикл		
		РеквизитФормы = МассивРеквизитовФормы[Счетчик];
		Если РеквизитФормы.ТипЗначения.СодержитТип(Тип("ТабличныйДокумент")) Тогда
			ЭтотОбъект[РеквизитФормы.Имя] = ЭтотОбъект[РеквизитФормы.Имя];	
		КонецЕсли;
	КонецЦикла;	  	
	
	мСтруктураЗначений = Новый Структура;
	
	ВывестиПроцентыНалоговСборовОтчислений(Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	
	Если СтруктураРеквизитовФормы.Свойство("СформироватьФормуОтчетаАвтоматически") И СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически <> Неопределено Тогда		
		ЗначениеТаймера = ЗначениеТаймера();
		
		ЗаполнитьАвтоНаСервере();		
		
		ЗаписатьЗамер(ЗначениеТаймера);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтчетномПериоде() Экспорт

	СтрПериодОтчета = ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ФП = истина");
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
		СтруктураРеквизитовФормы.мКвартал = Лев(СтрПериодОтчета, 1);
		СтруктураРеквизитовФормы.мМесяц = Неопределено;
	Иначе
		СтруктураРеквизитовФормы.мМесяц = Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		СтруктураРеквизитовФормы.мКвартал = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мГод = Лев(Прав(СтрПериодОтчета, 7), 4);
		
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// Сохранение и восстановление данных

&НаСервере
Процедура СохранитьДанныеНаСервере()

	Перем ТаблицаСтраниц;

	ДатаНачалаЗамераВремени = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Если Не ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) ИЛИ (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) Тогда
		// создаем новый документ вида РегламентированныйОтчет
		ДокументРеглОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
				
		ДокументРеглОтчет.Дата = ТекущаяДатаСеанса();
		ДокументРеглОтчет.УстановитьВремя();
		ДокументРеглОтчет.УстановитьНомерДокументаОтчета();
		
	Иначе
		ДокументРеглОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	ИмяТекТабличногоПоля = "ФормаОтчетаПолеТабличногоДокументаСтраница1";
	ТекТабличноеПоле     = ЭтотОбъект[ИмяТекТабличногоПоля];

	// Сформируем комментарий, если не указан
	Если НЕ ЗначениеЗаполнено(Комментарий) Тогда
		
		Комментарий = ФизЛицо.Наименование;
		
		МестоПредоставления = ПолучитьЗначениеОбласти(ТекТабличноеПоле, "МестоПредоставления", "");
		Если ЗначениеЗаполнено(МестоПредоставления) Тогда
			Комментарий = Комментарий + " (" + МестоПредоставления + ")";
		КонецЕсли;
			
	КонецЕсли;

	// установим текущие значения реквизитов документа
	МетаданныеОтчета = РеквизитФормыВЗначение("ОтчетОбъект"). Метаданные();
	ДокументРеглОтчет.ИсточникОтчета           = МетаданныеОтчета.Имя;
	ДокументРеглОтчет.НаименованиеОтчета       = МетаданныеОтчета.Формы.ОсновнаяФорма.Представление();
	ДокументРеглОтчет.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ДокументРеглОтчет.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	ДокументРеглОтчет.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;  
	ДокументРеглОтчет.ДатаПодписи              = ДатаПодписи;
	ДокументРеглОтчет.ВыбраннаяФорма           = мВыбраннаяФорма;
	ДокументРеглОтчет.Организация              = Налогоплательщик;
	ДокументРеглОтчет.ЕдиницаИзмерения         = ЕдиницаИзмерения;
	ДокументРеглОтчет.ТочностьЕдиницыИзмерения = ТочностьЕдиницыИзмерения;
	ДокументРеглОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРеглОтчет.Комментарий              = Комментарий;
											   
	// обработка номера документа для возможности автонумерации
	ПрефиксДок 	= ДокументРеглОтчет.ПолучитьПрефиксДокументаОтчета();
	НомерДок 	= СокрЛП(ПолучитьЗначениеОбласти(ТекТабличноеПоле, "Номер", ""));
	Если ЗначениеЗаполнено(НомерДок) Тогда	
		НомерДок              = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерДок, ДокументРеглОтчет.Метаданные().ДлинаНомера - СтрДлина(ПрефиксДок), "0", "Слева");
		ДокументРеглОтчет.Номер = ПрефиксДок + НомерДок;
	Иначе
		ДокументРеглОтчет.УстановитьНовыйНомер(ПрефиксДок);
		
		// выведем номер в табличный документ
		НомерДок = ДокументРеглОтчет.Номер;
		Пока СтрДлина(НомерДок) > 0 И Найти("123456789", Лев(НомерДок, 1)) = 0 Цикл
			НомерДок = Сред(НомерДок, 2);
		КонецЦикла;
		УстановитьЗначениеОбласти(ТекТабличноеПоле, "Номер", НомерДок);
	КонецЕсли;
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", "01/01/2019");

	// ФизЛицо
	СписокСохранения.Вставить("ФизЛицо", ФизЛицо);
	СписокСохранения.Вставить("Сотрудник", Сотрудник);
	
	// Структурные единицы
	СписокСохранения.Вставить("СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	

	// Сохраняем документ
	Если ДокументРеглОтчет <> Неопределено Тогда
						
		ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
		ДокументРеглОтчет.ДанныеОтчета = ХранилищеДанных;
		
		СохранитьОшибка = 1;
		
		// записываем документ, хранящий данные отчета
		Попытка
			ДокументРеглОтчет.Записать();			
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Не удается сохранить регламентированный отчет! " + ОписаниеОшибки());			
			СохранитьОшибка = 0;
		КонецПопытки;
		
		Если СохранитьОшибка = 1 Тогда
			// всё прошло без ошибок
			Модифицированность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = ДокументРеглОтчет.Ссылка;
	
	ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Записан документ %1 %2'"), ДокументРеглОтчет.Ссылка, ДокументРеглОтчет.Ссылка.Комментарий));	
	
	КлючеваяОперация = "Документ ""регламентированный отчет расчет по исчислению и удержанию ипн и исчислению сн"" (запись)'";
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ДатаНачалаЗамераВремени);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ПоказателиОтчета;
	
	ИмяТекТабличногоПоля = "ФормаОтчетаПолеТабличногоДокументаСтраница1";
	ТекТабличноеПоле     = ЭтотОбъект[ИмяТекТабличногоПоля];

	мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок;

	// восстанавливаем реквизиты отчета
	Налогоплательщик         = мСохраненныйДок.Организация;
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;
	Периодичность			 = мСохраненныйДок.Периодичность;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);

	Если СписокСохранения.Свойство("СписокСтруктурныхЕдиниц") Тогда
		мСписокСтруктурныхЕдиниц = СписокСохранения.СписокСтруктурныхЕдиниц;
	Иначе
	    мСписокСтруктурныхЕдиниц.Очистить();
	    мСписокСтруктурныхЕдиниц.Добавить(Налогоплательщик);
	КонецЕсли;
	ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц);
	
	Если ТипЗнч(ПоказателиОтчета) = Тип("Структура") И ПоказателиОтчета.Свойство("ПолеТабличногоДокументаРасчет") Тогда
		ПоказателиТаблПоле = ПоказателиОтчета.ПолеТабличногоДокументаРасчет;
	ИначеЕсли ТипЗнч(ПоказателиОтчета) = Тип("Структура") И ПоказателиОтчета.Свойство("ФормаОтчетаПолеТабличногоДокументаСтраница1") Тогда
		ПоказателиТаблПоле = ПоказателиОтчета.ФормаОтчетаПолеТабличногоДокументаСтраница1;
	КонецЕсли;
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		ИмяПоказателя       = Показатель.Ключ;
		ЗначениеПоказателя  = Показатель.Значение;

		// установим значение в таблице
		УстановитьЗначениеОбласти(ТекТабличноеПоле, ИмяПоказателя, ЗначениеПоказателя);
	КонецЦикла;

	// В прежних отчетах заголовки могут оказаться пустыми
	Если НЕ ЗначениеЗаполнено(СокрЛП(ПолучитьЗначениеОбласти(ТекТабличноеПоле, "ТекстРНН_БИНОрганизации"))) Тогда
		УстановитьЗначениеОбласти(ТекТабличноеПоле, "ТекстРНН_БИНОрганизации", НСтр("ru = 'РНН налогоплательщика'"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(ПолучитьЗначениеОбласти(ТекТабличноеПоле, "ТекстРНН_ИИНРаботника"))) Тогда
		УстановитьЗначениеОбласти(ТекТабличноеПоле, "ТекстРНН_ИИНРаботника", НСтр("ru = 'РНН налогоплательщика'"));
	КонецЕсли;
		
	// восстанавливаем ФизЛицо
	СписокСохранения.Свойство("ФизЛицо", ФизЛицо);
	
	Если СписокСохранения.Свойство("Сотрудник") Тогда
		Сотрудник = СписокСохранения.Сотрудник;		
	Иначе
		// если заполнено ФизЛицо, то определим сотрудника для данного физ.лица
		Если ЗначениеЗаполнено(ФизЛицо) Тогда			
				
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РаботникиОрганизации.Сотрудник,
			|	РаботникиОрганизации.Организация,
			|	РаботникиОрганизации.Период,
			|	РаботникиОрганизации.ПричинаИзмененияСостояния
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
			|		&парамДатаАктуальности, 
			|		Организация В (&парамГоловныеОрганизацииНалогоплательщика)
			|		И Сотрудник.ФизЛицо = &парамФизЛицо
			|		И Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство) КАК РаботникиОрганизации
			|УПОРЯДОЧИТЬ ПО
			|	РаботникиОрганизации.Период УБЫВ, // берем ближайщее к дате отчета назначение
			|	ВЫБОР
			|		КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУволен
			|			ТОГДА 2
			|		ИНАЧЕ 1
			|	КОНЕЦ
			|";
			
			Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Запрос.УстановитьПараметр("парамГоловныеОрганизацииНалогоплательщика", ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.СформироватьСписокОрганизацийНалогоплательщика(Налогоплательщик, Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты, Истина));
			Иначе
				СписокОрганизаций = Новый СписокЗначений;
				СписокОрганизаций.Добавить(ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Налогоплательщик));
				Запрос.УстановитьПараметр("парамГоловныеОрганизацииНалогоплательщика", СписокОрганизаций);
			КонецЕсли;
				
			Запрос.УстановитьПараметр("парамФизЛицо",                    ФизЛицо);
			Запрос.УстановитьПараметр("парамВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
			Запрос.УстановитьПараметр("парамУволен",                     Перечисления.ПричиныИзмененияСостояния.Увольнение);
			Запрос.УстановитьПараметр("парамДатаАктуальности",           ТекущаяДата());
                          			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Сотрудник = Выборка.Сотрудник;
			Иначе
				// среди работников организаций такое физлицо не числится, т.е. какой-то получатель разовых выплат
				// сотрудник будет пустым
			КонецЕсли;	      			
			
		КонецЕсли;		
	КонецЕсли;

	УстановитьФорматВывода();
	Модифицированность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьДанныеНаСервере();
		Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;
	
КонецПроцедуры   

////////////////////////////////////////////////////////////////////////////////
// Печать

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Если ВсегоСтраниц = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нет данных для печати'"));
		Возврат;
	КонецЕсли;
    
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок),,, БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати,, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
            
    Перем СтруктураГруппы;
	
    Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
        ТекстСообщения = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");            
        ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);                
        Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов.Очистить();
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
    СтруктураРеквизитовФормы.мРежимПечати = Истина;
    
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
	
	ТекТабличноеПоле = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"];
	ИдентификаторТекФормы = Новый УникальныйИдентификатор();
	НаименованиеДляЗаписи = НСтр("ru = 'Расчет ИПН и СН за '") + СтрПериодОтчета;
	Стр = 1;

	Пока Стр < ВсегоСтраниц + 1  Цикл
		
		ТабДок = Новый ТабличныйДокумент;
		ИмяОбласти = "Страница" + СокрЛП(Стр);
		ТекОбласть = ТекТабличноеПоле.ПолучитьОбласть(ИмяОбласти);
		ТабДок.Вывести(ТекОбласть);
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабДок.ЧерноБелаяПечать   = Истина;
		ТабДок.АвтоМасштаб        = Истина;
		
		ИмяЛиста = НСтр("ru = 'Страница № '") + Строка(Стр);
		Стр = Стр + 1;
		
		Значение = Новый Массив;
		Значение.Добавить(ТабДок);
		Значение.Добавить(ИдентификаторТекФормы);
		Значение.Добавить(НаименованиеДляЗаписи);
		
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(Значение, ИмяЛиста);
			
	КонецЦикла;
		
	Для Каждого Эл Из СтруктураРеквизитовФормы.мПечатныеФормы Цикл
				
		Значение = Новый Массив;
		Значение.Добавить(ПоместитьВоВременноеХранилище(Эл.Значение[0], УникальныйИдентификатор));
		Значение.Добавить(Эл.Значение[1]);
		Значение.Добавить(Эл.Значение[2]);
		
		СтруктураРеквизитовФормы.СписокПечатаемыхЛистов.Добавить(Значение, Эл.Представление);			
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
        
    Возврат Истина;
    
КонецФункции


&НаСервере
Процедура ЕдиницаИзмеренияПриИзмененииНаСервере()
	
	ПроверитьТочность();
	УстановитьФорматВывода();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ТочностьЕдиницыИзмеренияПриИзмененииНаСервере()
	
	ПроверитьТочность();
	УстановитьФорматВывода();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиСтраниц()
	
// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРаздел = Элементы.РазделыОтчета.ТекущиеДанные.Страницы;		
	КонецЕсли;
	
	Для Каждого ТекФорма ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",ТекФорма.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			ТекущаяСтрокаСписка.Выгружать               = ТекФорма.Выгружать;
			ТекущаяСтрокаСписка.ПоказатьСтраницу        = ТекФорма.ПоказатьСтраницу;			
			ТекущаяСтрокаСписка.АвтополучениеИтогов     = ТекФорма.АвтополучениеИтогов;  
			ТекущаяСтрокаСписка.АвтоЗаполнение          = ТекФорма.АвтоЗаполнение;  
		КонецЕсли;		   
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокФормДерева",СписокФормДерева);
	
	ДопПараметры = Новый Структура("ТекущийРаздел",ТекущийРаздел);
	
	ОповещениеПослеЗакрытияФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастройкиСтраниц",ЭтотОбъект,ДопПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.НастройкиОтчета",ПараметрыФормы, ЭтаФорма,,,,ОповещениеПослеЗакрытияФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиСтраниц(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьДанныеФормы(РезультатЗакрытия, СписокФормДерева);
	
	Модифицированность = Истина;
	
	//обновим мСписокФормБезИерархии
	Для Каждого СтрокаФормы ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",СтрокаФормы.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			СтрокаФормы.Выгружать               = ТекущаяСтрокаСписка.Выгружать;
			СтрокаФормы.ПоказатьСтраницу        = ТекущаяСтрокаСписка.ПоказатьСтраницу;			
			СтрокаФормы.АвтополучениеИтогов     = ТекущаяСтрокаСписка.АвтополучениеИтогов;  
			СтрокаФормы.АвтоЗаполнение          = ТекущаяСтрокаСписка.АвтоЗаполнение;  
		КонецЕсли;			
	КонецЦикла; 	

	Если ДополнительныеПараметры.Свойство("ТекущийРаздел") И НЕ ДополнительныеПараметры.ТекущийРаздел = Неопределено Тогда  		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(РазделыОтчета, Новый Структура("СписокФормДереваСтраницы",ДополнительныеПараметры.ТекущийРаздел));
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;			
	КонецЕсли;  	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие

&НаСервере
// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	
	Перем СтруктураГруппы;
	Перем РазмерностьПрописью;
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописью = НСтр("ru = ""тенге""; kz = ""теңге""", "ru");				
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0; ЧРГ= ";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописью = НСтр("ru = ""тысяч тенге""; kz = ""мың теңге""", "ru");				
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3; ЧРГ= ";
		
	КонецЕсли;
	
	ТекТабличныйДокумент = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"];

	Для Каждого ОбластьТаблицы Из ТекТабличныйДокумент.Области Цикл
		// по областям каждой страницы
		Если Не ОбластьТаблицы.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбластьТаблицы.СодержитЗначение Тогда
			Если СокрЛП(ОбластьТаблицы.ТипЗначения) = "Число" Тогда
				ОбластьТаблицы.Формат = мСтрокаФормата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	УстановитьЗначениеОбласти(ТекТабличныйДокумент, "РазмерностьПрописью", РазмерностьПрописью);
	
КонецПроцедуры // УстановитьФорматВывода()

&НаСервере
Функция ФормаРассчитатьДанныеФормы(ВыдаватьСообщения = Ложь)
	
	РасчетНаРегистрах = Метаданные.РегистрыРасчета.Найти("ОсновныеНачисленияРаботниковОрганизаций") <> Неопределено;
	
	// Расчет вычисляемых параметров
	ДатаНачалаНП = НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ДатаКонцаНП  = КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	// Создание запроса и установка всех необходимых параметров
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамНалогоплательщик",		   	   Налогоплательщик);
	Запрос.УстановитьПараметр("парамФизЛицо", 					   ФизЛицо);
	Запрос.УстановитьПараметр("парамТипИнформацииАдрес" , 		   Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("парамВидАдресаЮридический" , 	   Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	Запрос.УстановитьПараметр("парамТипИнформацииТелефон" , 	   Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("парамВидТелефонОрганизации" ,	   Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	Запрос.УстановитьПараметр("парамПриход",					   ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамВидСтроки",			  		   Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамИнвалид",				   	   Перечисления.ОтношениеКИнвалидности.Инвалид);
	Запрос.УстановитьПараметр("парамТретьяГруппа",				   "III");
	Запрос.УстановитьПараметр("парамВидПлатежа",	 			   Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	Запрос.УстановитьПараметр("парамВнутреннееСовместительство",   Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("парамПринят", 		   			   Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	Запрос.УстановитьПараметр("парамУволен", 		   			   Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("парамПоИсчислениюИПН",			   Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН);
	Запрос.УстановитьПараметр("парамПоИсчислениюСНДляГражданРК",   Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК);	
	Запрос.УстановитьПараметр("парамПоИсчислениюСНДляИностранныхСпециалистов", Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов);
	Запрос.УстановитьПараметр("парамНачалоГода",				   ДатаНачалаНП);
	Запрос.УстановитьПараметр("парамКонецГода",   				   ДатаКонцаНП);
	Запрос.УстановитьПараметр("парамКонецМесяцаНалоговогоПериода", ДатаКонцаНП);
	Запрос.УстановитьПараметр("парамНеОблагаетсяЦеликом",		   Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом);
	Запрос.УстановитьПараметр("парамДатаАктуальности",			   ДатаПодписи);
	Запрос.УстановитьПараметр("парамОтветЛицоРуководитель",		   Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("парамОтветЛицоГлБух",			   Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	Запрос.УстановитьПараметр("парамТекущийПользователь",		   Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", 	   мСписокСтруктурныхЕдиниц);
	
	Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Запрос.УстановитьПараметр("парамГоловныеОрганизацииНалогоплательщика", ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.СформироватьСписокОрганизацийНалогоплательщика(Налогоплательщик, Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты, Истина));

		// определим головную организацию, в которой числится сотрудник на момент формирования отчета
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизации.Организация,
		|	РаботникиОрганизации.Период,
		|	РаботникиОрганизации.ПричинаИзмененияСостояния
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|		&парамДатаАктуальности, 
		|		Организация В (&парамГоловныеОрганизацииНалогоплательщика)
		|		И Сотрудник.ФизЛицо = &парамФизЛицо
		|		И Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство) КАК РаботникиОрганизации
		|УПОРЯДОЧИТЬ ПО
		|	РаботникиОрганизации.Период УБЫВ, // берем ближайщее к дате отчета назначение
		|	ВЫБОР
		|		КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУволен
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Запрос.УстановитьПараметр("парамГоловнаяОрганизация", Выборка.Организация);
		Иначе
			// среди работников организаций такое физлицо не числится, т.е. какой-то получатель разовых выплат
			Запрос.УстановитьПараметр("парамГоловнаяОрганизация", Налогоплательщик);
		КонецЕсли;	
	Иначе
		Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Налогоплательщик));
	КонецЕсли;

	// Ставки 
	Запрос.УстановитьПараметр("парамСтавкаСО", ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, ДатаКонцаНП) / 100);
	Запрос.УстановитьПараметр("парамСтавкаСН", ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДатаКонцаНП) / 100);

	// ---------------------------------------------------------------------------
	// Тексты запросов
	//

	// Сформируем текст запроса с датами месяцев налогового периода за отчетный квартал
	// первый месяц квартала
	НачалоМесяца = НачалоМесяца(ДатаНачалаНП);
	ПериодыТекст = "ВЫБРАТЬ 
					|	&парамФизЛицо КАК ФизЛицо,
					|	ДАТАВРЕМЯ(" + Формат (НачалоМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период
					|
					|ПОМЕСТИТЬ ВТПериоды";
	// прибавим остальные месяцы
	Пока НачалоМесяца < НачалоМесяца(ДатаКонцаНП) Цикл
		НачалоМесяца = КонецМесяца(НачалоМесяца) + 1;
    	ПериодыТекст = ПериодыТекст + "
    								  |ОБЪЕДИНИТЬ ВСЕ 
    								  |
    								  |ВЫБРАТЬ 
    								  |	   &парамФизЛицо КАК ФизЛицо,
    								  |	   ДАТАВРЕМЯ(" + Формат(НачалоМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";
	КонецЦикла;	
	
	ПериодыТекст = ПериодыТекст + "
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|";
	
	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	ПериодыТекст = "ВТПериоды";
	
	// учетная политика по налоговому учету по периодам и регламентированные показатели
	ПараметрыРасчетаТекст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Периоды.Период,
	|	ЕСТЬNULL(УчетнаяПолитика.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога, ЛОЖЬ) КАК ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗПДляЦелейНалогообложения, 0) КАК РазмерМЗП
	|	
	|ПОМЕСТИТЬ ВТ_ПараметрыРасчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(УчетнаяПолитика.Период) КАК ПериодУчетнойПолитики,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодРасчетныхПоказателей
	|	ИЗ
	|		" + ПериодыТекст + " КАК Периоды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитика
	|			ПО УчетнаяПолитика.Период <= Периоды.Период
	|				И УчетнаяПолитика.Организация = &парамНалогоплательщик
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО РасчетныеПоказатели.Период <= Периоды.Период
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК Периоды
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитика
	|		ПО Периоды.ПериодУчетнойПолитики = УчетнаяПолитика.Период
	|			И УчетнаяПолитика.Организация = &парамНалогоплательщик
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО Периоды.ПериодРасчетныхПоказателей = РасчетныеПоказатели.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период
	|";
	
	Запрос.Текст = ПараметрыРасчетаТекст;
	Запрос.Выполнить();
	ПараметрыРасчетаТекст = "ВТ_ПараметрыРасчета";

	
	//-----------------------------------------------------------------------------
	// ВЫБОРКА СВЕДЕНИЙ О ФИЗЛИЦЕ 
	// 	
	
	ДанныеОФизЛицеТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ФИОФизЛица.Фамилия + "" "" + ФИОФизЛица.Имя + "" "" + ФИОФизЛица.Отчество, ДанныеОФизЛице.Наименование) КАК ФИОРаботника,
	|	ДанныеОФизЛице.РНН КАК РННРаботника,
	|	ДанныеОФизЛице.ИдентификационныйКодЛичности КАК ИИНРаботника,
	|	РаботникиОрганизации.Сотрудник.Код КАК ТабельныйНомер,
	|	РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизации,
	|	РаботникиОрганизации.Должность.Наименование КАК Должность
	|
	|ПОМЕСТИТЬ ВТ_ДанныеОФизЛице
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ДанныеОФизЛице
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|					&парамДатаАктуальности, 
	|					ФизЛицо = &парамФизЛицо) КАК ФИОФизЛица
	|		ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							МАКСИМУМ(ВЫБОР
	|										КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУволен
	|											ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
	|										ИНАЧЕ РаботникиОрганизации.Период
	|									 КОНЕЦ) КАК Период
	|						ИЗ
	|							РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|									&парамДатаАктуальности, 
	|									Сотрудник.ФизЛицо = &парамФизЛицо И
	|									Организация = &парамГоловнаяОрганизация И
	|									(Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство)) КАК РаботникиОрганизации
	|					) КАК РаботникиОрганизацииСрезПоследних
	|		ПО ИСТИНА
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО РаботникиОрганизацииСрезПоследних.Период = ВЫБОР
	|														КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУволен
	|															ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
	|														ИНАЧЕ РаботникиОрганизации.Период
	|													  КОНЕЦ
	|			И РаботникиОрганизации.Сотрудник.ФизЛицо = &парамФизЛицо
	|			И РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
	|			И (РаботникиОрганизации.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство)
	|	
	|ГДЕ
	|	ДанныеОФизЛице.Ссылка = &парамФизЛицо
	|";

	Запрос.Текст = ДанныеОФизЛицеТекст;
	Запрос.Выполнить();
	ДанныеОФизЛицеТекст = "ВТ_ДанныеОФизЛице";

	// ДоходыИНалоги
	//	Поля:
	//
	//	Описание:
	// Выбирает общую сумму доходов, облагаемые налогами доходы и сумму налогов за весь год 
	// по-месячно. Пока в поля хххСНачалаГода выбираем только данные с предыдущего места работы.
	//
	ДоходыИНалогиТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоходыИНалоги.Период КАК Период,
	|	СУММА(ДоходыИНалоги.ДоходыЗаМесяц) КАК ДоходыЗаМесяц,
	|	СУММА(ДоходыИНалоги.ДоходыСНачалаГода) КАК ДоходыСНачалаГода,
	|	СУММА(ДоходыИНалоги.НеоблагаемыеИПНДоходыЗаМесяц) КАК НеоблагаемыеИПНДоходыЗаМесяц,
	|	СУММА(ДоходыИНалоги.НеоблагаемыеИПНДоходыСНачалаГода) КАК НеоблагаемыеИПНДоходыСНачалаГода,
	|	СУММА(ДоходыИНалоги.ОПВЗаМесяц) КАК ОПВЗаМесяц,
	|	СУММА(ДоходыИНалоги.ОПВСНачалаГода) КАК ОПВСНачалаГода,
	|	СУММА(ДоходыИНалоги.ВычетыЗаМесяц) КАК ВычетыЗаМесяц,
	|	СУММА(ДоходыИНалоги.ВычетыСНачалаГода) КАК ВычетыСНачалаГода,
	|	СУММА(ДоходыИНалоги.ИПНЗаМесяц) КАК ИПНЗаМесяц,
	|	СУММА(ДоходыИНалоги.ИПНСНачалаГода) КАК ИПНСНачалаГода,
	|	СУММА(ДоходыИНалоги.НеоблагаемыеСНДоходыЗаМесяц) КАК НеоблагаемыеСНДоходыЗаМесяц,
	|	СУММА(ДоходыИНалоги.НеоблагаемыеСНДоходыСНачалаГода) КАК НеоблагаемыеСНДоходыСНачалаГода,
	|	СУММА(ДоходыИНалоги.ОблагаемыеСНДоходыЗаМесяц - ДоходыИНалоги.КорректировкаИПНДоходыЗаМесяц) КАК ОблагаемыеСНДоходыЗаМесяц,
	|	СУММА(ДоходыИНалоги.ОблагаемыеСНДоходыСНачалаГода) КАК ОблагаемыеСНДоходыСНачалаГода,
	|	СУММА(ДоходыИНалоги.СНЗаМесяц) КАК СНЗаМесяц,
	|	СУММА(ДоходыИНалоги.СНСНачалаГода) КАК СНСНачалаГода,
	|	СУММА(ДоходыИНалоги.ОблагаемыеСОДоходыЗаМесяц) КАК ОблагаемыеСОДоходыЗаМесяц,
	|	СУММА(ДоходыИНалоги.СОЗаМесяц) КАК СОЗаМесяц,
	|	СУММА(ДоходыИНалоги.СОСНачалаГода) КАК СОСНачалаГода,
	|	СУММА(ДоходыИНалоги.КорректировкаИПНДоходыЗаМесяц) КАК КорректировкаИПНДоходыЗаМесяц,
	|	СУММА(ДоходыИНалоги.КорректировкаИПНДоходыСНачалаГода) КАК КорректировкаИПНДоходыСНачалаГода,
	|	СУММА(ДоходыИНалоги.ВОСМСЗаМесяц) КАК ВОСМСЗаМесяц,
	|	СУММА(ДоходыИНалоги.ВОСМССНачалаГода) КАК ВОСМССНачалаГода
	|ПОМЕСТИТЬ ВТДоходыИНалоги
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		ИПНСведенияОДоходах.СуммаДоходаОборот КАК ДоходыЗаМесяц,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДоходыСНачалаГода,
	|		ВЫБОР
	|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения = &парамНеОблагаетсяЦеликом
	|				ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот
	|			КОГДА НЕ ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН
	|				ТОГДА ИПНСведенияОДоходах.СуммаВычетаОборот
	|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|		КОНЕЦ КАК НеоблагаемыеИПНДоходыЗаМесяц,
	|		ИПНСведенияОДоходах.ПримененнаяЛьготаОборот КАК КорректировкаИПНДоходыЗаМесяц,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НеоблагаемыеИПНДоходыСНачалаГода,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОПВЗаМесяц,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОПВСНачалаГода,
	|		ВЫБОР
	|			КОГДА ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН
	|				ТОГДА ИПНСведенияОДоходах.СуммаВычетаОборот
	|			ИНАЧЕ ИПНСведенияОДоходах.ПримененныйВычетОборот
	|		КОНЕЦ КАК ВычетыЗаМесяц,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВычетыСНачалаГода,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИПНЗаМесяц,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИПНСНачалаГода,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НеоблагаемыеСНДоходыЗаМесяц,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НеоблагаемыеСНДоходыСНачалаГода,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОблагаемыеСНДоходыЗаМесяц,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОблагаемыеСНДоходыСНачалаГода,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СНЗаМесяц,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СНСНачалаГода,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОблагаемыеСОДоходыЗаМесяц,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СОЗаМесяц,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СОСНачалаГода,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК КорректировкаИПНДоходыСНачалаГода,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВОСМСЗаМесяц,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВОСМССНачалаГода
	|	ИЗ
	|		РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	|				&парамНачалоГода,
	|				&парамКонецГода,
	|				МЕСЯЦ,
	|				ФизЛицо = &парамФизЛицо
	|					И Налогоплательщик = &парамНалогоплательщик
	|					И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)) КАК ИПНСведенияОДоходах
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫБОР
	|			КОГДА СНСведенияОДоходах.СпособНалогообложения = &парамНеОблагаетсяЦеликом
	|				ТОГДА СНСведенияОДоходах.СуммаДоходаОборот
	|			ИНАЧЕ СНСведенияОДоходах.СуммаВычетаОборот
	|		КОНЕЦ,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫБОР
	|			КОГДА СНСведенияОДоходах.СпособНалогообложения = &парамНеОблагаетсяЦеликом
	|				ТОГДА ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|			ИНАЧЕ СНСведенияОДоходах.СуммаДоходаОборот - СНСведенияОДоходах.СуммаВычетаОборот
	|		КОНЕЦ,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|	ИЗ
	|		РегистрНакопления.СНСведенияОДоходах.Обороты(
	|				&парамНачалоГода,
	|				&парамКонецГода,
	|				МЕСЯЦ,
	|				ФизЛицо = &парамФизЛицо
	|					И Налогоплательщик = &парамНалогоплательщик
	|					И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)) КАК СНСведенияОДоходах
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ИПНРасчетыСБюджетом.Налог,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|	ИЗ
	|		РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|	ГДЕ
	|		ИПНРасчетыСБюджетом.ФизЛицо = &парамФизЛицо
	|		И ИПНРасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ &парамНачалоГода И &парамКонецГода
	|		И ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик
	|		И ИПНРасчетыСБюджетом.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	|		И ИПНРасчетыСБюджетом.ВидДвижения = &парамПриход
	|		И ИПНРасчетыСБюджетом.ВидСтроки = &парамВидСтроки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ОПВРасчетыСФондами.Взнос,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		-ОПВРасчетыСФондами.Взнос,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|	ИЗ
	|		РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|	ГДЕ
	|		ОПВРасчетыСФондами.ФизЛицо = &парамФизЛицо
	|		И ОПВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамНачалоГода И &парамКонецГода
	|		И ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|		И ОПВРасчетыСФондами.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	|		И ОПВРасчетыСФондами.ВидДвижения = &парамПриход
	|		И ОПВРасчетыСФондами.ВидСтроки = &парамВидСтроки
	|		И ОПВРасчетыСФондами.ВидПлатежа = &парамВидПлатежа
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		-ВОСМСРасчетыСФондами.Взнос,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВОСМСРасчетыСФондами.Взнос,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|	ИЗ
	|		РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	|	ГДЕ
	|		ВОСМСРасчетыСФондами.ФизЛицо = &парамФизЛицо
	|		И ВОСМСРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамНачалоГода И &парамКонецГода
	|		И ВОСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|		И ВОСМСРасчетыСФондами.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	|		И ВОСМСРасчетыСФондами.ВидДвижения = &парамПриход
	|		И ВОСМСРасчетыСФондами.ВидСтроки = &парамВидСтроки
	|		И ВОСМСРасчетыСФондами.ВидПлатежа = &парамВидПлатежа
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		СНИсчисленный.Налог,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|	ИЗ
	|		РегистрНакопления.СНИсчисленный КАК СНИсчисленный
	|	ГДЕ
	|		СНИсчисленный.ФизЛицо = &парамФизЛицо
	|		И СНИсчисленный.МесяцНалоговогоПериода МЕЖДУ &парамНачалоГода И &парамКонецГода
	|		И СНИсчисленный.Налогоплательщик = &парамНалогоплательщик
	|		И СНИсчисленный.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		СОРасчетыСФондами.Отчисление,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|	ИЗ
	|		РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|	ГДЕ
	|		СОРасчетыСФондами.ФизЛицо = &парамФизЛицо
	|		И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамНачалоГода И &парамКонецГода
	|		И СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|		И СОРасчетыСФондами.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	|		И СОРасчетыСФондами.ВидДвижения = &парамПриход
	|		И СОРасчетыСФондами.ВидСтроки = &парамВидСтроки
	|		И СОРасчетыСФондами.ВидПлатежа = &парамВидПлатежа
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫБОР
	|			КОГДА СОСведенияОДоходах.СпособНалогообложения = &парамНеОблагаетсяЦеликом
	|				ТОГДА ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|			ИНАЧЕ СОСведенияОДоходах.ОблагаемаяБазаОборот
	|		КОНЕЦ,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|	ИЗ
	|		РегистрНакопления.СОСведенияОДоходах.Обороты(
	|				&парамНачалоГода,
	|				&парамКонецГода,
	|				МЕСЯЦ,
	|				ФизЛицо = &парамФизЛицо
	|					И Налогоплательщик = &парамНалогоплательщик
	|					И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)) КАК СОСведенияОДоходах
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		СведенияОбИсчисленииВычетовИПН.ПримененныйВычетОборот,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|	ИЗ
	|		РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(
	|				&парамНачалоГода,
	|				&парамКонецГода,
	|				МЕСЯЦ,
	|				ФизическоеЛицо = &парамФизЛицо
	|					И Налогоплательщик = &парамНалогоплательщик
	|					И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)) КАК СведенияОбИсчисленииВычетовИПН) КАК ДоходыИНалоги
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоходыИНалоги.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДоходыИНалоги.Период";
	
	Запрос.Текст = ДоходыИНалогиТекст;
	Запрос.Выполнить();
	ДоходыИНалогиТекст = "ВТДоходыИНалоги";
	
	// облагаемые СН доходы за месяц
	ПолеОблагаемыеСНДоходыЗаМесяц = 
	"ВЫБОР
	|	КОГДА ДоходыИНалоги.ОблагаемыеСНДоходыЗаМесяц > 0
	|		ТОГДА ДоходыИНалоги.ОблагаемыеСНДоходыЗаМесяц
	|	ИНАЧЕ 0
	|КОНЕЦ";
	
	// учтем возможность применения ограничения на нижнюю границу облагаемого дохода - не меньше МЗП
	ПолеОблагаемыеСНДоходыЗаМесяц = "
	|ВЫБОР
	|	КОГДА " + ПолеОблагаемыеСНДоходыЗаМесяц + " > 0 И " + ПолеОблагаемыеСНДоходыЗаМесяц + " < ЕСТЬNULL(ПараметрыРасчета.РазмерМЗП, 0)
	|			И ЕСТЬNULL(ПараметрыРасчета.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога, ЛОЖЬ)
	|		ТОГДА ЕСТЬNULL(ПараметрыРасчета.РазмерМЗП, 0)
	|	ИНАЧЕ " + ПолеОблагаемыеСНДоходыЗаМесяц + "
	|КОНЕЦ";	
	
	// Накопим данные с начала года
	//
	ДоходыИНалогиСНачалаГода = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Периоды.Период,
	|
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ДоходыИНалоги.Период ТОГДА ЕСТЬNULL(ДоходыИНалоги.ДоходыЗаМесяц, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))) ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КОНЕЦ) КАК ДоходыЗаМесяц,
	|	СУММА(ЕСТЬNULL(ДоходыИНалоги.ДоходыСНачалаГода, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))) + ЕСТЬNULL(ДоходыИНалоги.ДоходыЗаМесяц, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)))) КАК ДоходыСНачалаГода,
	|
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ДоходыИНалоги.Период ТОГДА ЕСТЬNULL(ДоходыИНалоги.НеоблагаемыеИПНДоходыЗаМесяц, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))) ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КОНЕЦ) КАК НеоблагаемыеИПНДоходыЗаМесяц,
	|	СУММА(ЕСТЬNULL(ДоходыИНалоги.НеоблагаемыеИПНДоходыСНачалаГода, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))) + ЕСТЬNULL(ДоходыИНалоги.НеоблагаемыеИПНДоходыЗаМесяц, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)))) КАК НеоблагаемыеИПНДоходыСНачалаГода,
	|
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ДоходыИНалоги.Период ТОГДА ЕСТЬNULL(ДоходыИНалоги.ОПВЗаМесяц, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))) ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КОНЕЦ) КАК ОПВЗаМесяц,
	|	СУММА(ЕСТЬNULL(ДоходыИНалоги.ОПВСНачалаГода, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))) + ЕСТЬNULL(ДоходыИНалоги.ОПВЗаМесяц, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)))) КАК ОПВСНачалаГода,
	|
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ДоходыИНалоги.Период ТОГДА ЕСТЬNULL(ДоходыИНалоги.ВычетыЗаМесяц, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))) ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КОНЕЦ) КАК ВычетыЗаМесяц,
	|	СУММА(ЕСТЬNULL(ДоходыИНалоги.ВычетыСНачалаГода, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))) + ЕСТЬNULL(ДоходыИНалоги.ВычетыЗаМесяц, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)))) КАК ВычетыСНачалаГода,
	|
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ДоходыИНалоги.Период ТОГДА ЕСТЬNULL(ДоходыИНалоги.ИПНЗаМесяц, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))) ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КОНЕЦ) КАК ИПНЗаМесяц,
	|	СУММА(ЕСТЬNULL(ДоходыИНалоги.ИПНСНачалаГода, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))) + ЕСТЬNULL(ДоходыИНалоги.ИПНЗаМесяц, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)))) КАК ИПНСНачалаГода,
	|
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ДоходыИНалоги.Период ТОГДА ЕСТЬNULL(ДоходыИНалоги.НеоблагаемыеСНДоходыЗаМесяц, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))) ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КОНЕЦ) КАК НеоблагаемыеСНДоходыЗаМесяц,
	|	СУММА(ЕСТЬNULL(ДоходыИНалоги.НеоблагаемыеСНДоходыСНачалаГода, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))) + ЕСТЬNULL(ДоходыИНалоги.НеоблагаемыеСНДоходыЗаМесяц, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)))) КАК НеоблагаемыеСНДоходыСНачалаГода,
	|
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ДоходыИНалоги.Период ТОГДА ЕСТЬNULL(" + ПолеОблагаемыеСНДоходыЗаМесяц + ", ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))) ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КОНЕЦ) КАК ОблагаемыеСНДоходыЗаМесяц,
	|	СУММА(ЕСТЬNULL(ДоходыИНалоги.ОблагаемыеСНДоходыСНачалаГода, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))) + ЕСТЬNULL(" + ПолеОблагаемыеСНДоходыЗаМесяц + ", ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)))) КАК ОблагаемыеСНДоходыСНачалаГода,
	|
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ДоходыИНалоги.Период ТОГДА ЕСТЬNULL(ДоходыИНалоги.СНЗаМесяц, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))) ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КОНЕЦ) КАК СНЗаМесяц,
	|	СУММА(ЕСТЬNULL(ДоходыИНалоги.СНСНачалаГода, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))) + ЕСТЬNULL(ДоходыИНалоги.СНЗаМесяц, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)))) КАК СНСНачалаГода,
	|
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ДоходыИНалоги.Период ТОГДА ЕСТЬNULL(ДоходыИНалоги.ОблагаемыеСОДоходыЗаМесяц, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))) ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КОНЕЦ) КАК ОблагаемыеСОДоходыЗаМесяц,
	|
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ДоходыИНалоги.Период ТОГДА ЕСТЬNULL(ДоходыИНалоги.СОЗаМесяц, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))) ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КОНЕЦ) КАК СОЗаМесяц,
	|	СУММА(ЕСТЬNULL(ДоходыИНалоги.СОСНачалаГода, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))) + ЕСТЬNULL(ДоходыИНалоги.СОЗаМесяц, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)))) КАК СОСНачалаГода,
	|
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ДоходыИНалоги.Период ТОГДА ЕСТЬNULL(ДоходыИНалоги.КорректировкаИПНДоходыЗаМесяц, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))) ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КОНЕЦ) КАК КорректировкаИПНДоходыЗаМесяц,
	|	СУММА(ЕСТЬNULL(ДоходыИНалоги.КорректировкаИПНДоходыСНачалаГода, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))) + ЕСТЬNULL(ДоходыИНалоги.КорректировкаИПНДоходыЗаМесяц, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)))) КАК КорректировкаИПНДоходыСНачалаГода,
	|
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ДоходыИНалоги.Период ТОГДА ЕСТЬNULL(ДоходыИНалоги.ВОСМСЗаМесяц, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))) ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КОНЕЦ) КАК ВОСМСЗаМесяц,
	|	СУММА(ЕСТЬNULL(ДоходыИНалоги.ВОСМССНачалаГода, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))) + ЕСТЬNULL(ДоходыИНалоги.ВОСМСЗаМесяц, ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)))) КАК ВОСМССНачалаГода
	|
	|ПОМЕСТИТЬ ВТДоходыИНалогиСНачалаГода
	|	
	|ИЗ
	|	" + ПериодыТекст + " КАК Периоды
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ДоходыИНалогиТекст + " КАК ДоходыИНалоги
	|		ПО ДоходыИНалоги.Период <= Периоды.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПараметрыРасчетаТекст + " КАК ПараметрыРасчета
	|		ПО Периоды.Период = ПараметрыРасчета.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период
	|";
	
	Запрос.Текст = ДоходыИНалогиСНачалаГода;
	Запрос.Выполнить();
	ДоходыИНалогиСНачалаГода = "ВТДоходыИНалогиСНачалаГода";	
	
	// облагаемые ИПН доходы за месяц
	ПолеОблагаемыеИПНДоходыЗаМесяц = 
	"ДоходыИНалоги.ДоходыЗаМесяц - ДоходыИНалоги.НеоблагаемыеИПНДоходыЗаМесяц - ДоходыИНалоги.ВычетыЗаМесяц - ДоходыИНалоги.КорректировкаИПНДоходыЗаМесяц";
	
	// Определим прочие рассчитываемые графы
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоходыИНалоги.Период,
	|	ДанныеОФизЛице.ФИОРаботника,
	|	ДанныеОФизЛице.РННРаботника,
	|	ДанныеОФизЛице.ИИНРаботника,
	|	ДанныеОФизЛице.ТабельныйНомер,
	|	ДанныеОФизЛице.ПодразделениеОрганизации,
	|	ДанныеОФизЛице.Должность,
	|	ДоходыИНалоги.ДоходыЗаМесяц,
	|	ДоходыИНалоги.ДоходыСНачалаГода,
	|	ДоходыИНалоги.НеоблагаемыеИПНДоходыЗаМесяц,
	|	ДоходыИНалоги.НеоблагаемыеИПНДоходыСНачалаГода,
	|	ДоходыИНалоги.ОПВЗаМесяц,
	|	ДоходыИНалоги.ОПВСНачалаГода,
	|	ДоходыИНалоги.ВычетыЗаМесяц,
	|	ДоходыИНалоги.ВычетыСНачалаГода,
	|	ВЫБОР 
	|		КОГДА " + ПолеОблагаемыеИПНДоходыЗаМесяц + " > 0 ТОГДА
	|			" + ПолеОблагаемыеИПНДоходыЗаМесяц + "	
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыеИПНДоходыЗаМесяц,
	|	ДоходыИНалоги.ИПНЗаМесяц,
	|	ДоходыИНалоги.ИПНСНачалаГода,
	|	ДоходыИНалоги.НеоблагаемыеСНДоходыЗаМесяц,
	|	ДоходыИНалоги.НеоблагаемыеСНДоходыСНачалаГода,
	|	ДоходыИНалоги.ОблагаемыеСНДоходыЗаМесяц  КАК ОблагаемыеСНДоходыЗаМесяц,
	|	ДоходыИНалоги.ОблагаемыеСНДоходыСНачалаГода КАК ОблагаемыеСНДоходыСНачалаГода,
	|	ВЫРАЗИТЬ(ДоходыИНалоги.ОблагаемыеСНДоходыЗаМесяц * &парамСтавкаСН КАК ЧИСЛО(15, 2)) КАК СНСРасчетнойСуммы,
	|	ДоходыИНалоги.СНСНачалаГода,
	|	ДоходыИНалоги.СНЗаМесяц,
	|	ДоходыИНалоги.ОблагаемыеСОДоходыЗаМесяц,
	|	ДоходыИНалоги.СОЗаМесяц,
	|	ДоходыИНалоги.СОСНачалаГода ,
	|   ДоходыИНалоги.КорректировкаИПНДоходыЗаМесяц КАК КорректировкаИПНДоходыЗаМесяц,
	|   ДоходыИНалоги.КорректировкаИПНДоходыСНачалаГода КАК КорректировкаИПНДоходыСНачалаГода,
	|	ДоходыИНалоги.ВОСМСЗаМесяц,
	|	ДоходыИНалоги.ВОСМССНачалаГода
	|
	|ИЗ
	|	" + ДоходыИНалогиСНачалаГода + " КАК ДоходыИНалоги
	|
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ДанныеОФизЛицеТекст + " КАК ДанныеОФизЛице
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоходыИНалоги.Период
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
		     	
	Возврат Результат;
	
КонецФункции // ФормаРассчитатьДанныеФормы()

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
		
	Выборка = ФормаРассчитатьДанныеФормы().Выбрать();
	
	ТекТабличноеПоле = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"];
	
	ДатаПрекращенияВыводаРНН = Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
	ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ ДатаПодписи < ДатаПрекращенияВыводаРНН;
	
	ОргСведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(Налогоплательщик, ДатаПодписи);
	
	Если ОргСведения <> 0 Тогда
		
		// Инициализируем переменные
		РННЮЛ        = "";   // РНН	
		НаимЮЛПол    = "";   // Полное наименование 	
		ИИН_БИН      = "";   // ИИН_БИН
		АдрЮР        = "";   // ИИН_БИН
		Руководитель = "";   // ФИО руководителя
		
		// Получаем данные
		ОргСведения.Свойство("РННЮЛ",              РННЮЛ);
		ОргСведения.Свойство("БИН_ИИН",            ИИН_БИН);
		ОргСведения.Свойство("ПолноеНаименование", НаимЮЛПол);
		ОргСведения.Свойство("ЮридическийАдрес",   АдрЮР);

		// Реквизиты организации
		УстановитьЗначениеОбласти(ТекТабличноеПоле, "ОргНазв", НаимЮЛПол);
		
		РеквизитыОрганизации = "";
		Если ЗначениеЗаполнено(АдрЮР) Тогда
			РеквизитыОрганизации = АдрЮР;
		КонецЕсли;
		
		УстановитьЗначениеОбласти(ТекТабличноеПоле, "РеквизитыОрганизации", РеквизитыОрганизации);
		
		Если ВыводитьРНН Тогда
			УстановитьЗначениеОбласти(ТекТабличноеПоле, "РННОрганизации", РННЮЛ);
			УстановитьЗначениеОбласти(ТекТабличноеПоле, "ТекстРНН_БИНОрганизации", НСтр("ru = 'РНН налогоплательщика'"));
		Иначе 
			УстановитьЗначениеОбласти(ТекТабличноеПоле, "РННОрганизации", ИИН_БИН);
			УстановитьЗначениеОбласти(ТекТабличноеПоле, "ТекстРНН_БИНОрганизации", НСтр("ru = 'БИН налогоплательщика'"));
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьЗначениеОбласти(ТекТабличноеПоле, "ДатаПодписи", ДатаПодписи);
	
	ОтветЛица = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(Налогоплательщик, ДатаПодписи, Пользователи.ТекущийПользователь().Физлицо);
	
	// Руководитель организации
	УстановитьЗначениеОбласти(ТекТабличноеПоле, "ФИОРуководителя", ОтветЛица.Руководитель);
	УстановитьЗначениеОбласти(ТекТабличноеПоле, "ДолжностьРуководителя", ОтветЛица.РуководительДолжность);

	// Главный бухгалтер
	УстановитьЗначениеОбласти(ТекТабличноеПоле, "ФИОГлБухгалтера", ОтветЛица.ГлавныйБухгалтер);
	УстановитьЗначениеОбласти(ТекТабличноеПоле, "ДолжностьГлБухгалтера", ОтветЛица.ГлавныйБухгалтерДолжность);
	
	// Непосредственный исполнитель
	УстановитьЗначениеОбласти(ТекТабличноеПоле, "ФИОИсполнителя", ОтветЛица.Исполнитель);
	УстановитьЗначениеОбласти(ТекТабличноеПоле, "ДолжностьИсполнителя", ОтветЛица.ИсполнительДолжность);
	
	// Выводим данные в поле табличного документа
	НомерСтроки = 0;
	Пока Выборка.Следующий() Цикл
		ИмяСтроки = "Стр" + ?(Месяц(Выборка.Период) > 10, "0", "") + Месяц(Выборка.Период);
		НомерСтроки = НомерСтроки + 1;
		
		// Если первая строка, то заполняем реквизиты шапки и подвала
		Если НомерСтроки = 1 Тогда
			УстановитьЗначениеОбласти(ТекТабличноеПоле, "Год", Формат(Выборка.Период, "ДФ=""гггг 'г.'"""));
			
			ВывестиПроцентыНалоговСборовОтчислений(Год(Выборка.Период));
		
			// Реквизиты физлица
			УстановитьЗначениеОбласти(ТекТабличноеПоле, "ФИОРаботника", Выборка.ФИОРаботника);
			СведенияОРаботнике = "";
			
			Если ЗначениеЗаполнено(Выборка.ТабельныйНомер) Тогда
				СведенияОРаботнике = НСтр("ru = 'таб. № '") + Выборка.ТабельныйНомер;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ПодразделениеОрганизации) Тогда
				Если СведенияОРаботнике <> "" Тогда
					СведенияОРаботнике = СведенияОРаботнике + ", ";
				КонецЕсли;
				
				СведенияОРаботнике = СведенияОРаботнике + Выборка.ПодразделениеОрганизации;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Должность) Тогда
				Если СведенияОРаботнике <> "" Тогда
					СведенияОРаботнике = СведенияОРаботнике + ", ";
				КонецЕсли;
				
				СведенияОРаботнике = СведенияОРаботнике + Выборка.Должность;
			КонецЕсли;
			УстановитьЗначениеОбласти(ТекТабличноеПоле, "СведенияОРаботнике", СведенияОРаботнике);
			
			Если ВыводитьРНН Тогда
				УстановитьЗначениеОбласти(ТекТабличноеПоле, "РННРаботника", Выборка.РННРаботника);
				УстановитьЗначениеОбласти(ТекТабличноеПоле, "ТекстРНН_ИИНРаботника", НСтр("ru = 'РНН налогоплательщика'"));
			Иначе 
				УстановитьЗначениеОбласти(ТекТабличноеПоле, "РННРаботника", Выборка.ИИНРаботника);
				УстановитьЗначениеОбласти(ТекТабличноеПоле, "ТекстРНН_ИИНРаботника", НСтр("ru = 'ИИН налогоплательщика'"));
			КонецЕсли;
			
		КонецЕсли;
		
		// Заполняем колонки отчета
		УстановитьЗначениеОбласти(ТекТабличноеПоле, ИмяСтроки + "2",  Выборка.ДоходыЗаМесяц);
		УстановитьЗначениеОбласти(ТекТабличноеПоле, ИмяСтроки + "3",  Выборка.ДоходыСНачалаГода);
		УстановитьЗначениеОбласти(ТекТабличноеПоле, "Стр0133",        Выборка.ДоходыСНачалаГода);
		
		УстановитьЗначениеОбласти(ТекТабличноеПоле, ИмяСтроки + "4",  Выборка.НеоблагаемыеИПНДоходыЗаМесяц);
		УстановитьЗначениеОбласти(ТекТабличноеПоле, "Стр0134",        Выборка.НеоблагаемыеИПНДоходыСНачалаГода);
		
		УстановитьЗначениеОбласти(ТекТабличноеПоле, ИмяСтроки + "5",  Выборка.КорректировкаИПНДоходыЗаМесяц);
		УстановитьЗначениеОбласти(ТекТабличноеПоле, "Стр0135",        Выборка.КорректировкаИПНДоходыСНачалаГода);
		
		
		УстановитьЗначениеОбласти(ТекТабличноеПоле, ИмяСтроки + "6",  Выборка.ОПВЗаМесяц);
		УстановитьЗначениеОбласти(ТекТабличноеПоле, ИмяСтроки + "7",  Выборка.ОПВСНачалаГода);
		УстановитьЗначениеОбласти(ТекТабличноеПоле, "Стр0137",        Выборка.ОПВСНачалаГода);

		УстановитьЗначениеОбласти(ТекТабличноеПоле, ИмяСтроки + "8",  Выборка.ВычетыЗаМесяц);
		УстановитьЗначениеОбласти(ТекТабличноеПоле, "Стр0138",        Выборка.ВычетыСНачалаГода);

		УстановитьЗначениеОбласти(ТекТабличноеПоле, ИмяСтроки + "9",  Выборка.ОблагаемыеИПНДоходыЗаМесяц);
		
		УстановитьЗначениеОбласти(ТекТабличноеПоле, ИмяСтроки + "10",  Выборка.ИПНЗаМесяц);
		УстановитьЗначениеОбласти(ТекТабличноеПоле, "Стр01310",        Выборка.ИПНСНачалаГода);

		УстановитьЗначениеОбласти(ТекТабличноеПоле, ИмяСтроки + "11", Выборка.НеоблагаемыеСНДоходыЗаМесяц);
		УстановитьЗначениеОбласти(ТекТабличноеПоле, ИмяСтроки + "12", Выборка.НеоблагаемыеСНДоходыСНачалаГода);
		УстановитьЗначениеОбласти(ТекТабличноеПоле, "Стр01312",       Выборка.НеоблагаемыеСНДоходыСНачалаГода);
		
		УстановитьЗначениеОбласти(ТекТабличноеПоле, ИмяСтроки + "13", Выборка.ОблагаемыеСНДоходыЗаМесяц);
		УстановитьЗначениеОбласти(ТекТабличноеПоле, ИмяСтроки + "14", Выборка.ОблагаемыеСНДоходыСНачалаГода);
		УстановитьЗначениеОбласти(ТекТабличноеПоле, "Стр01314",       Выборка.ОблагаемыеСНДоходыСНачалаГода);

		УстановитьЗначениеОбласти(ТекТабличноеПоле, ИмяСтроки + "15", Выборка.СНСРасчетнойСуммы);
		
		УстановитьЗначениеОбласти(ТекТабличноеПоле, ИмяСтроки + "16", Выборка.ОблагаемыеСОДоходыЗаМесяц);
		
		УстановитьЗначениеОбласти(ТекТабличноеПоле, ИмяСтроки + "17", Выборка.СОЗаМесяц);
		УстановитьЗначениеОбласти(ТекТабличноеПоле, "Стр01317",       Выборка.СОСНачалаГода);
		
		УстановитьЗначениеОбласти(ТекТабличноеПоле, ИмяСтроки + "18", Выборка.СНЗаМесяц);
		УстановитьЗначениеОбласти(ТекТабличноеПоле, "Стр01318",       Выборка.СНСНачалаГода);
		
		УстановитьЗначениеОбласти(ТекТабличноеПоле, ИмяСтроки + "19",  	Выборка.ВОСМСЗаМесяц);
		УстановитьЗначениеОбласти(ТекТабличноеПоле, ИмяСтроки + "20",  	Выборка.ВОСМССНачалаГода);
		УстановитьЗначениеОбласти(ТекТабличноеПоле, "Стр01320", 		Выборка.ВОСМССНачалаГода);
		
	КонецЦикла;	
	
	// рассчитаем итоги по месячным графам, по которым еще не рассчитывали
	Стр0132 = 0;
	Стр0136 = 0;
	Стр01319 = 0;
	Стр0139 = 0;
	Для НомерСтроки = 1 По 12 Цикл
		ИмяСтроки = "Стр" + ?(НомерСтроки > 10, "0" + НомерСтроки, НомерСтроки);
		
		Стр0132 = Стр0132 + ПолучитьЗначениеОбласти(ТекТабличноеПоле, ИмяСтроки + "2", 0);
		Стр0136 = Стр0136 + ПолучитьЗначениеОбласти(ТекТабличноеПоле, ИмяСтроки + "6", 0);
		Стр0139 = Стр0139 + ПолучитьЗначениеОбласти(ТекТабличноеПоле, ИмяСтроки + "9", 0);
		Стр01319 = Стр01319 + ПолучитьЗначениеОбласти(ТекТабличноеПоле, ИмяСтроки + "19", 0);
	КонецЦикла;
	
	УстановитьЗначениеОбласти(ТекТабличноеПоле, "Стр0132", Стр0132);
	УстановитьЗначениеОбласти(ТекТабличноеПоле, "Стр0136", Стр0136);
	УстановитьЗначениеОбласти(ТекТабличноеПоле, "Стр0139", Стр0139);
	УстановитьЗначениеОбласти(ТекТабличноеПоле, "Стр01319", Стр01319);
	
	Модифицированность = Истина;
	УстановитьФорматВывода();
	Комментарий = "";

КонецПроцедуры

&НаСервере
Функция ПроверитьСоответствиеСотрудникаОрганизацииНаСервере(ВыбранныйСотрудник)
	
	ГоловнаяОрганизацияОтчета    = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Налогоплательщик);
	ВыбраннаяГоловнаяОрганизация = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(ВыбранныйСотрудник.ТекущаяСтруктурнаяЕдиница);
	
	Возврат ГоловнаяОрганизацияОтчета = ВыбраннаяГоловнаяОрганизация;
	
КонецФункции

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	ФизЛицо	= Сотрудник.ФизЛицо;

КонецПроцедуры

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	УстановитьЗначениеОбласти(ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"], "ДатаПодписи", ДатаПодписи);
	Модифированность = Истина;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УстановитьЗначениеОбласти(Приемник, ИмяОбласти, Значение)

	Результат = Ложь;
	Если ТипЗнч(Приемник) = Тип("Структура") Тогда
		
		Приемник.Вставить(ИмяОбласти, Значение);
		Результат = Истина;
	
	ИначеЕсли ТипЗнч(Приемник) = Тип("ТабличныйДокумент") Тогда
		
		ИскомаяОбласть = Приемник.Области.Найти(ИмяОбласти);
		Если ИскомаяОбласть <> Неопределено Тогда
			Если ИскомаяОбласть.СодержитЗначение Тогда
				ИскомаяОбласть.Значение = Значение;
			Иначе
				ИскомаяОбласть.Текст = Строка(Значение);
			КонецЕсли;
			Результат = Истина;
		КонецЕсли;
				
	КонецЕсли;

    Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗначениеОбласти(Источник, ИмяОбласти, ЗначениеПоУмолчанию = Неопределено) 

	Результат = ЗначениеПоУмолчанию;
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		
		Источник.Свойство(ИмяОбласти, Результат);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ТабличныйДокумент") Тогда
		
		ИскомаяОбласть = Источник.Области.Найти(ИмяОбласти);
		
		Если ИскомаяОбласть <> Неопределено Тогда
			
			Если ИскомаяОбласть.СодержитЗначение Тогда
				Результат = ИскомаяОбласть.Значение;
			Иначе
				Результат = ИскомаяОбласть.Текст;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
	        ТекстСообщения = НСтр("ru = 'При выводе сумм в тенге точность не может превышать 2 знака'");            
	        ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);                
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
	        ТекстСообщения = НСтр("ru = 'При выводе сумм в тысячах тенге точность не может превышать 3 знака'");            
	        ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);                
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

&НаСервере
Процедура ВывестиПроцентыНалоговСборовОтчислений(ГодПериода)
	
	ТекТабличныйДокумент = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"];
	
	// Процент ИПН в зависимости от года
	ПроцентИПН = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, Дата(ГодПериода, 1, 1));;

    ТекстОбласти = НСтр("ru = 'Сумма индивидуального подоходного налога'") + Символы.ПС + НСтр("ru = '(гр. 9 * '") + ПроцентИПН + "%)";
	УстановитьЗначениеОбласти(ТекТабличныйДокумент, "Текст10", ТекстОбласти);
																		
	// Процент СН в зависимости от года
	ПроцентСН = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.СоциальныйНалог, Дата(ГодПериода, 1, 1));;
	
    ТекстОбласти = НСтр("ru = 'Сумма социального налога с расчетной суммы дохода, облагаемого социальным налогом'") +
	               Символы.ПС + НСтр("ru = '(гр. 13 * '") + ПроцентСН + "%)";
	УстановитьЗначениеОбласти(ТекТабличныйДокумент, "Текст15", ТекстОбласти);

	// Процент социальный отчислений в зависимости от года
	ПроцентСО = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, Дата(ГодПериода, 1, 1));
	
    ТекстОбласти = НСтр("ru = 'Сумма социальных отчислений'") + Символы.ПС + НСтр("ru = '(гр. 16 * '") + ПроцентСО + "%)";
	УстановитьЗначениеОбласти(ТекТабличныйДокумент, "Текст17", ТекстОбласти);
	
КонецПроцедуры

&НаСервере
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	// Собираем в список значений имена вычисляемых показателей
	//
	//
	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

#Область ОценкаПроизводительности

&НаКлиенте
Функция НачатьЗамерВремени()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "Регламентированный отчет ""расчет по исчислению и удержанию ипн и исчислению сн"" (заполнение)";
		ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент").НачатьЗамерВремени(Истина, КлючеваяОперация);
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеТаймера()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда 
		
		Возврат ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").НачатьЗамерВремени();
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьЗамер(ВремяНачала)
	
	Если ВремяНачала <> Неопределено 
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "Регламентированный отчет ""расчет по исчислению и удержанию ипн и исчислению сн"" (заполнение)";
		ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьПараметры(ТекущееИмяФормы) Экспорт

КонецПроцедуры	
