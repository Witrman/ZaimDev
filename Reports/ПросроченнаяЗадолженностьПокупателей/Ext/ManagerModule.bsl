#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПриВыводеЗаголовка,
							|ИспользоватьВнешниеНаборыДанных,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки,
							|ИспользоватьРасширенныеПараметрыРасшифровки",
							Истина, Истина, Истина, Истина, Ложь, Ложь);
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт
	
	ТекстОрганизации = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ПараметрыОтчета.СписокСтруктурныхЕдиниц,,, Истина);
	
	ЗаголовокОтчета = НСтр("ru = 'Просроченная задолженность покупателей на %1'");
	ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокОтчета, Формат(ПараметрыОтчета.Период, "ДФ=dd.MM.yyyy"));
	
	Если ОрганизацияВНачале Тогда
		ЗаголовокОтчета = ТекстОрганизации + Символы.ПС + ЗаголовокОтчета;
	Иначе
		ЗаголовокОтчета = ЗаголовокОтчета + " " + ТекстОрганизации;
	КонецЕсли;
	
	Возврат ЗаголовокОтчета;
	
КонецФункции

Процедура ПриВыводеЗаголовка(ПараметрыОтчета, Результат) Экспорт
	
	МакетЗаголовок   = ПолучитьОбщийМакет("ЗаголовокОтчета");
	ОбластьЗаголовок = МакетЗаголовок.ПолучитьОбласть("Заголовок");
	
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ПолучитьТекстЗаголовка(ПараметрыОтчета);
	
	Результат.Вывести(ОбластьЗаголовок);
	
КонецПроцедуры

Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	Запрос = Новый Запрос;
	
	УстановитьТекстЗапроса(Запрос, ПараметрыОтчета, ПараметрыОтчета.Период);
	
	ПросроченнаяЗадолженность1 = Запрос.Выполнить();
	
	УстановитьТекстЗапроса(Запрос, ПараметрыОтчета, НачалоДня(ПараметрыОтчета.Дата2) - 1);
	
	ПросроченнаяЗадолженность2 = Запрос.Выполнить();
	
	УстановитьТекстЗапроса(Запрос, ПараметрыОтчета, НачалоДня(ПараметрыОтчета.Дата3) - 1);
	
	ПросроченнаяЗадолженность3 = Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("ПросроченнаяЗадолженность1", ПросроченнаяЗадолженность1);
	Запрос.УстановитьПараметр("ПросроченнаяЗадолженность2", ПросроченнаяЗадолженность2);
	Запрос.УстановитьПараметр("ПросроченнаяЗадолженность3", ПросроченнаяЗадолженность3);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПросроченнаяЗадолженность1.Организация,
	|	ПросроченнаяЗадолженность1.Контрагент,
	|	ПросроченнаяЗадолженность1.Договор,
	|	ПросроченнаяЗадолженность1.Просрочено
	|ПОМЕСТИТЬ ПросроченнаяЗадолженность1
	|ИЗ
	|	&ПросроченнаяЗадолженность1 КАК ПросроченнаяЗадолженность1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПросроченнаяЗадолженность2.Организация,
	|	ПросроченнаяЗадолженность2.Контрагент,
	|	ПросроченнаяЗадолженность2.Договор,
	|	ПросроченнаяЗадолженность2.Просрочено
	|ПОМЕСТИТЬ ПросроченнаяЗадолженность2
	|ИЗ
	|	&ПросроченнаяЗадолженность2 КАК ПросроченнаяЗадолженность2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПросроченнаяЗадолженность3.Организация,
	|	ПросроченнаяЗадолженность3.Контрагент,
	|	ПросроченнаяЗадолженность3.Договор,
	|	ПросроченнаяЗадолженность3.Просрочено
	|ПОМЕСТИТЬ ПросроченнаяЗадолженность3
	|ИЗ
	|	&ПросроченнаяЗадолженность3 КАК ПросроченнаяЗадолженность3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПросроченнаяЗадолженность.Организация,
	|	ПросроченнаяЗадолженность.Контрагент,
	|	ПросроченнаяЗадолженность.Договор,
	|	СУММА(ПросроченнаяЗадолженность.Просрочено) КАК Просрочено,
	|	СУММА(ПросроченнаяЗадолженность.Просрочено2) КАК Просрочено2,
	|	СУММА(ПросроченнаяЗадолженность.Просрочено3) КАК Просрочено3
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПросроченнаяЗадолженность1.Организация КАК Организация,
	|		ПросроченнаяЗадолженность1.Контрагент КАК Контрагент,
	|		ПросроченнаяЗадолженность1.Договор КАК Договор,
	|		ПросроченнаяЗадолженность1.Просрочено КАК Просрочено,
	|		0 КАК Просрочено2,
	|		0 КАК Просрочено3
	|	ИЗ
	|		ПросроченнаяЗадолженность1 КАК ПросроченнаяЗадолженность1
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПросроченнаяЗадолженность2.Организация,
	|		ПросроченнаяЗадолженность2.Контрагент,
	|		ПросроченнаяЗадолженность2.Договор,
	|		0,
	|		ПросроченнаяЗадолженность2.Просрочено,
	|		0
	|	ИЗ
	|		ПросроченнаяЗадолженность2 КАК ПросроченнаяЗадолженность2
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПросроченнаяЗадолженность3.Организация,
	|		ПросроченнаяЗадолженность3.Контрагент,
	|		ПросроченнаяЗадолженность3.Договор,
	|		0,
	|		0,
	|		ПросроченнаяЗадолженность3.Просрочено
	|	ИЗ
	|		ПросроченнаяЗадолженность3 КАК ПросроченнаяЗадолженность3) КАК ПросроченнаяЗадолженность
	|
	|СГРУППИРОВАТЬ ПО
	|	ПросроченнаяЗадолженность.Организация,
	|	ПросроченнаяЗадолженность.Контрагент,
	|	ПросроченнаяЗадолженность.Договор";
	
	ПросроченнаяЗадолженность = Запрос.Выполнить().Выгрузить();
	
	ВнешниеНаборыДанных = Новый Структура("ПросроченнаяЗадолженность", ПросроченнаяЗадолженность);
	
	Возврат ВнешниеНаборыДанных;
		                                
КонецФункции

Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ПараметрыОтчета.Свойство("ОткрытИзРассылки") И ПараметрыОтчета.ОткрытИзРассылки Тогда
		
		КомпоновщикНастроек.Настройки.Структура.ИдентификаторПользовательскойНастройки = "";
		Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл
			ЭлементСтруктуры.ИдентификаторПользовательскойНастройки = "";
			ОтчетыВызовСервераБК.ОбработатьСтруктуруНастроек(ЭлементСтруктуры);
		КонецЦикла;
		
	КонецЕсли;
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Период", ПараметрыОтчета.Период);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Дата2" , ПараметрыОтчета.Дата2);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Дата3" , ПараметрыОтчета.Дата3);
	
	Структура = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Первый = Истина;
	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Если Не Первый Тогда 
				Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			Иначе
				Структура.Имя = "Группировка_";
			КонецЕсли;
			Первый = Ложь;
						
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			
			Если ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных")); 
			
		КонецЕсли;
	КонецЦикла;
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	БухгалтерскиеОтчеты.ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, ПараметрыОтчета);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);

КонецПроцедуры

Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант из Схема.ВариантыНастроек Цикл
		НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, Вариант.Имя);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета.
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт
	
	ПараметрыОтчета = РассылкаОтчетовБК.НастройкиОтчетаСохраняемыеВРассылке();
	ПараметрыОтчета.Вставить("ТипЗадолженности" , 1);
	
	Возврат ПараметрыОтчета;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура УстановитьТекстЗапроса(Запрос, ПараметрыОтчета, КонДата)
	
	ВидыСубконтоКД = Новый СписокЗначений;
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	Запрос.УстановитьПараметр("ВидыСубконтоКД", ВидыСубконтоКД);
	Запрос.УстановитьПараметр("СчетаДтЗадолженности", БухгалтерскиеОтчетыВызовСервера.ВозвратитьМассивСчетовДтКтЗадолженности(Ложь, Истина, Истина));
	Запрос.УстановитьПараметр("ГраницаОстатков", Новый Граница(КонецДня(КонДата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыОтчета.СписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("СтандартныйСрокОплатыПокупателей", Константы.СрокОплатыПокупателей.Получить());
	Запрос.УстановитьПараметр("КонецИнтервала", КонецДня(КонДата));
	Запрос.УстановитьПараметр("ИсключенныеСчета", БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(1));
	Запрос.УстановитьПараметр("СчетаПользователя", БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовПользователяДляРасчетаЗадолженности(1));	
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапросаПоОстаткам =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СчетаКонтрагентов.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаКД
	|ИЗ
	|	ПланСчетов.Типовой.ВидыСубконто КАК СчетаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ТиповойВидыСубконто.Ссылка КАК Ссылка
	|		ИЗ
	|			ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто
	|		ГДЕ
	|			ТиповойВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Договоры)) КАК СчетаДоговоров
	|		ПО СчетаКонтрагентов.Ссылка = СчетаДоговоров.Ссылка
	|ГДЕ
	|	СчетаКонтрагентов.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты)
	|	И (СчетаКонтрагентов.Ссылка В ИЕРАРХИИ(&СчетаДтЗадолженности) ИЛИ СчетаКонтрагентов.Ссылка В (&СчетаПользователя))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыОстатки.Организация,
	|	ВзаиморасчетыОстатки.Субконто1 КАК Контрагент,
	|	ВзаиморасчетыОстатки.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).УстановленСрокОплаты
	|			ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).СрокОплаты
	|		ИНАЧЕ &СтандартныйСрокОплатыПокупателей
	|	КОНЕЦ КАК СрокОплаты,
	|	ВзаиморасчетыОстатки.СуммаОстаток КАК ОстатокДолга
	|ПОМЕСТИТЬ ОстаткиДолга
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&ГраницаОстатков,
	|			Счет В
	|					(ВЫБРАТЬ
	|						СчетаКД.Счет
	|					ИЗ
	|						СчетаКД КАК СчетаКД)
	|				И (НЕ Счет.Забалансовый)
	|					И (НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета)),
	|			&ВидыСубконтоКД,
	|			Организация В (&СписокОрганизаций)) КАК ВзаиморасчетыОстатки
	|ГДЕ
	|	ВзаиморасчетыОстатки.СуммаОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОстаткиДолга.СрокОплаты КАК СрокОплаты
	|ИЗ
	|	ОстаткиДолга КАК ОстаткиДолга
	|
	|УПОРЯДОЧИТЬ ПО
	|	СрокОплаты";
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОтчета.СписокСтруктурныхЕдиниц) Тогда
		ТекстЗапросаПоОстаткам = СтрЗаменить(ТекстЗапросаПоОстаткам, "Организация В (&СписокОрганизаций)", "");
	КонецЕсли;
	Запрос.Текст = ТекстЗапросаПоОстаткам;
	
	МассивСроковОплаты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СрокОплаты");
	
	Если МассивСроковОплаты.Количество() = 0 Тогда
		МассивСроковОплаты.Добавить(0);
	КонецЕсли;
	
	ТекстОстатки = 
	"ВЫБРАТЬ
	|	ОстаткиДолга.Организация,
	|	ОстаткиДолга.Контрагент,
	|	ОстаткиДолга.Договор,
	|	ОстаткиДолга.СрокОплаты,
	|	ОстаткиДолга.ОстатокДолга,
	|	ЕСТЬNULL(Обороты.УвеличениеДолга, 0) КАК УвеличениеДолга
	|ИЗ
	|	ОстаткиДолга КАК ОстаткиДолга";
	
	ТекстОборотыПоСроку = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыОбороты.Организация КАК Организация,
	|	ВзаиморасчетыОбороты.Субконто1 КАК Контрагент,
	|	ВзаиморасчетыОбороты.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыОбороты.СуммаОборотДт > 0
	|			ТОГДА ВзаиморасчетыОбороты.СуммаОборотДт
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА ВзаиморасчетыОбороты.СуммаОборотКт < 0
	|			ТОГДА ВзаиморасчетыОбороты.СуммаОборотКт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УвеличениеДолга
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(
	|			&НачалоИнтервала1,
	|			&КонецИнтервала,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаКД.Счет
	|				ИЗ
	|					СчетаКД КАК СчетаКД)
	|					И (НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета)),
	|			&ВидыСубконтоКД,
	|			(Субконто1, Субконто2) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ОстаткиДолга.Контрагент,
	|						ОстаткиДолга.Договор
	|					ИЗ
	|						ОстаткиДолга КАК ОстаткиДолга
	|					ГДЕ
	|						ОстаткиДолга.СрокОплаты = &СрокОплаты1)
	|				И Организация В (&СписокОрганизаций),
	|			,
	|			) КАК ВзаиморасчетыОбороты";
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОтчета.СписокСтруктурныхЕдиниц) Тогда
		ТекстОборотыПоСроку = СтрЗаменить(ТекстОборотыПоСроку, "И Организация В (&СписокОрганизаций)", "");
	КонецЕсли;
	
	ТекстОборотыПоВсемСрокам = "";
	Для Ном = 1 По МассивСроковОплаты.Количество() Цикл
		
		СрокОплаты = МассивСроковОплаты[Ном - 1];
		Запрос.УстановитьПараметр("НачалоИнтервала" + Ном, НачалоДня(КонДата - (СрокОплаты - 1)* 60*60*24));
		Запрос.УстановитьПараметр("СрокОплаты" + Ном, СрокОплаты);
		
		ТекстОборотыПоСрокуНом = СтрЗаменить(ТекстОборотыПоСроку, "&НачалоИнтервала1", "&НачалоИнтервала" + Ном);
		ТекстОборотыПоСрокуНом = СтрЗаменить(ТекстОборотыПоСрокуНом, "&СрокОплаты1", "&СрокОплаты" + Ном);
		
		ТекстОборотыПоВсемСрокам = ТекстОборотыПоВсемСрокам
		+ ?(ПустаяСтрока(ТекстОборотыПоВсемСрокам), "", "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|") 
		+ ТекстОборотыПоСрокуНом;
	
	КонецЦикла;
	
	ТекстОстаткиИОбороты = ТекстОстатки + "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(" + ТекстОборотыПоВсемСрокам + ") КАК Обороты
	|	ПО ОстаткиДолга.Организация = Обороты.Организация
	|		И ОстаткиДолга.Контрагент = Обороты.Контрагент
	|		И ОстаткиДолга.Договор = Обороты.Договор";
	
	ТекстПросрочено =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиИОбороты.Организация,
	|	ОстаткиИОбороты.Контрагент,
	|	ОстаткиИОбороты.Договор,
	|	ОстаткиИОбороты.СрокОплаты,
	|	ОстаткиИОбороты.ОстатокДолга,
	|	ОстаткиИОбороты.ОстатокДолга - 
	|		ВЫБОР
	|			КОГДА ОстаткиИОбороты.ОстатокДолга < ОстаткиИОбороты.УвеличениеДолга
	|				ТОГДА ОстаткиИОбороты.ОстатокДолга
	|			ИНАЧЕ ОстаткиИОбороты.УвеличениеДолга
	|		КОНЕЦ КАК Просрочено
	|ИЗ
	|	(" + ТекстОстаткиИОбороты + ") КАК ОстаткиИОбороты
	|ГДЕ
	|	ОстаткиИОбороты.ОстатокДолга - 
	|		ВЫБОР
	|			КОГДА ОстаткиИОбороты.ОстатокДолга < ОстаткиИОбороты.УвеличениеДолга
	|				ТОГДА ОстаткиИОбороты.ОстатокДолга
	|			ИНАЧЕ ОстаткиИОбороты.УвеличениеДолга
	|		КОНЕЦ > 0";
	
	Запрос.Текст = ТекстПросрочено;
	
КонецПроцедуры


#КонецЕсли