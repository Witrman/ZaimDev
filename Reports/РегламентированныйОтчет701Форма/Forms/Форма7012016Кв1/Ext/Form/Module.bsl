&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;	
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
												
		КонецЕсли;	
			
		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();
				
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		ДокументОтражения = ПолучитьЗначениеРеквизита(СтруктураРеквизитовФормы.мСохраненныйДок, "ДокументОтраженияВУчете");
		Элементы.ФормаОтражениеВУчете.Заголовок = ПолучитьЗаголовокОтражениеВУчете(ДокументОтражения);
	КонецЕсли;

	МассивРеквизитовФормы = ЭтотОбъект.ПолучитьРеквизиты();
	Для Счетчик = 0 По МассивРеквизитовФормы.Количество()-1 Цикл		
		РеквизитФормы = МассивРеквизитовФормы[Счетчик];
		Если РеквизитФормы.ТипЗначения.СодержитТип(Тип("ТабличныйДокумент")) Тогда
			ЭтотОбъект[РеквизитФормы.Имя] = ЭтотОбъект[РеквизитФормы.Имя];	
		КонецЕсли;
	КонецЦикла;	

	мСтруктураЗначений = Новый Структура;
	
	Если СтруктураРеквизитовФормы.Свойство("СформироватьФормуОтчетаАвтоматически") И СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически <> Неопределено Тогда
		
		ЗаполнитьАвтоНаСервере();
		
	КонецЕсли;

КонецПроцедуры

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРасчетовПриИзменении(Элемент)
	
	ЗаполнитьВидРасчета(СписокРасчетов);
	
КонецПроцедуры 

//////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
    СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокСтруктурныхЕдиниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");			
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("НалоговыйКомитет");				
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");	
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");	
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");		
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");	
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрг");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");	
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");		
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");	
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);	
	СтруктураРеквизитовФормы.Вставить("мГод");	
	СтруктураРеквизитовФормы.Вставить("мКвартал");	
	СтруктураРеквизитовФормы.Вставить("мМесяц");	

	// индивидуальные параметры формы
	СтруктураРеквизитовФормы.Вставить("мПоддержкаРаботыСоСтруктурнымиПодразделениями");		
	
КонецПроцедуры
// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()	
	РегламентированнаяОтчетность.ВосстановитьСохраненныйОтчет(ЭтаФорма);		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Перем СтруктураГруппы;  
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ТекстСообщения = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);				
				
		Возврат Ложь;
		
	КонецЕсли;
			
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		ВыборРасчета(КодФормы);		
	КонецЕсли; 

	РегламентированнаяОтчетность.СформироватьСписокПечатаемыхЛистов(ЭтаФорма);	       		
		
	Возврат Истина;                   
	
КонецФункции


////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	мВыбраннаяФорма = "Форма7012016Кв1";
	КодФормы 		= "Форма701";
    ДатаПодписи	= ТекущаяДатаСеанса();	    		

	РегламентированнаяОтчетность.ЗаполнитьСтруктуруФормРегОтчета(ЭтотОбъект);	
	
	СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями"); // вынести в переопределяемый модуль	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;	
	СтруктураРеквизитовФормы.мПечатныеформы 		 = Новый СписокЗначений;	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	     	
	ЗаполнитьСведенияОбОтчетномПериоде();
			
	Инициализация(Параметры.БезОткрытияФормы);
		
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекФорма.КодФормы);
	КонецЦикла	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_ОтражениеНалоговойОтчетностиВРеглУчете" Тогда
		Элементы.ФормаОтражениеВУчете.Заголовок = ПолучитьЗаголовокОтражениеВУчете(Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтчетномПериоде() Экспорт

	СтрПериодОтчета = ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ФП = истина");
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
		СтруктураРеквизитовФормы.мКвартал = Лев(СтрПериодОтчета,1);
		СтруктураРеквизитовФормы.мМесяц = Неопределено;
	Иначе
		СтруктураРеквизитовФормы.мМесяц = Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		СтруктураРеквизитовФормы.мКвартал = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мГод = Лев(Прав(СтрПериодОтчета,7),4);
		
КонецПроцедуры 
&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)	
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.КодФормы = Элемент.ТекущиеДанные.КодФормы Тогда
		ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);
		Возврат;
	КонецЕсли;	

	ЭтаФорма.КодФормы = Элемент.ТекущиеДанные.КодФормы;
		
	РазделыОтчетаПриАктивизацииСтрокиНаСервере(Элемент.ТекущиеДанные.КодФормы, Элемент.ТекущиеДанные.Многострочность);
		
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Для Каждого СтраницаФорм Из Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы Цикл
		Элементы[СтраницаФорм.Имя].Видимость = СтраницаФорм.Имя = ЭтаФорма.КодФормы;	
	КонецЦикла;
	
	ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(мСписокСтруктурныхЕдиниц, ЭтаФорма, СтандартнаяОбработка,"", Налогоплательщик,НалоговыйКомитет,
																ПредопределенноеЗначение("Перечисление.РазделыНалоговогоУчета.МестныеНалоги"),Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////
// ЛОКАЛЬНЫЕ МЕХАНИЗМЫ ОТЧЕТА

&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда		
		мСписокСтруктурныхЕдиниц = Результат;		
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц); 		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПанель(ПризнакОсновнойФормы,ПризнакМногострочности)
			
	Элементы.ФормаВыгрузитьВXML.Видимость = ПризнакОсновнойФормы; 
	Элементы.ГруппаКнопокДействияСоСтрокамиИСтраницами.Видимость = ПризнакМногострочности;	
	
КонецПроцедуры //ЗаполнитьПанель()

&НаСервере
Процедура РазделыОтчетаПриАктивизацииСтрокиНаСервере(НовыйКодФормы, НовыйПризнакМногострочность)		

	//проверим, что стояли не на основной, итоги передаем только когда переходим из доп.форм
	ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	Если ТекФорма <> Неопределено И Не ТекФорма.ПризнакОсновной Тогда
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы, Истина);		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	
	
	Если НовыйПризнакМногострочность Тогда
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтотОбъект);
	КонецЕсли;
	
	// установим новые значения реквизитам формы
	ЭтаФорма.КодФормы = НовыйКодФормы;		
КонецПроцедуры	

&НаСервере
Процедура Очистить(ТекИмяФормы, ОчиститьВсе = Ложь) Экспорт
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	
	// Список ячеек, очищать которые не нужно
	Если ОчиститьВсе Тогда
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодВалюты");										
	Иначе
		СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
		СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв1");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв2");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв3");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Год");
		СписокПоказателейНеПодлежащихОчистке.Добавить("НомерУведомления");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаУведомления");		
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодВалюты");										
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаКонтракта");
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодНалоговогоОргана");
	КонецЕсли;
		
	РегламентированнаяОтчетность.ОчиститьСтруктуруДанныхИТабличноеПолеФормы(ЭтаФорма,ТекИмяФормы,ОчиститьВсе,СписокПоказателейНеПодлежащихОчистке);
	
КонецПроцедуры // Очистить()

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, ЭтотОбъект.КодФормы, Ложь,Ложь);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ЭтаФорма.КодФормы);
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма);	
	
	Форма701РасчетНаСервере(Неопределено, Неопределено,КодФормы);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметры(ТекущееИмяФормы) Экспорт
	
	Форма = РеквизитФормыВЗначение("мСписокФормБезИерархии").Строки.Найти(ТекущееИмяФормы, "КодФормы");
	
	Если ТекущееИмяФормы = Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7) Тогда 
		
		//заполним основные сведения об организации
		ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы);		
		
		//Если не сохраненый отчет, заполним значеним = "Очередной"
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаполнитьВидРасчета("Очередной");
		КонецЕсли;
		
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "КодВалюты", "KZT");
	КонецЕсли;
			
КонецПроцедуры	

&НаСервере
Процедура ВыборРасчета(ТекФорма, Индекс = Неопределено, Показатель = Неопределено) Экспорт
	
	Если ТекФорма = "Форма701" Тогда
		Форма701РасчетНаСервере(Неопределено, Неопределено, ТекФорма);
	КонецЕсли;
	
КонецПроцедуры // ВыборРасчета()

&НаСервере
Процедура ЗаполнитьВидРасчета(ВидРасчета)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Первоначальный","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Очередной","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Дополнительный","");	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"ПоУведомлению","");
	
		
	Если ВидРасчета = "Первоначальный" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Первоначальный","Х");		
	ИначеЕсли ВидРасчета = "Очередной" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Очередной","Х");				
	ИначеЕсли ВидРасчета = "Дополнительный" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Дополнительный","Х");				
	ИначеЕсли ВидРасчета = "ПоУведомлению" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"ПоУведомлению","Х");					
	КонецЕсли;
	
	Если ВидРасчета = "ПоУведомлению" Тогда
		Форма701ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Ложь;
		Форма701ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита = Ложь;
	Иначе
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"НомерУведомления","");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"ДатаУведомления","");
		Форма701ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Истина;
		Форма701ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита = Истина;		
	КонецЕсли;
	
	Модифированность = Истина;
	
КонецПроцедуры // ЗаполнитьВидРасчета()

&НаСервере
Процедура ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы)
	
	ОргСведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(Налогоплательщик, ДатаПодписи);
	//Если организация не указана то не выводим никаких сведений
	Если ОргСведения = 0 Тогда
		Возврат;
	КонецЕсли;

	// Инициализируем переменные
	РННЮЛ = ""; 	// РНН	
	НаимЮЛПол = ""; // Полное наименование 	
	ИИН_БИН = ""; 	// ИИН_БИН	
	Руководитель = ""; 	// ФИО руководителя				
	КодНалоговогоОргана = ""; // Код налогового органа	
	
		
	// Получаем данные
	ОргСведения.Свойство("РННЮЛ",     			РННЮЛ);
	ОргСведения.Свойство("БИН_ИИН",   			ИИН_БИН);
	ОргСведения.Свойство("ПолноеНаименование", 	НаимЮЛПол);	
	ОргСведения.Свойство("Руководитель",		Руководитель);	
	
	// Производим операции связанные с текущей формой отчетности	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН",ИИН_БИН);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"ОргНазв",НаимЮЛПол);
	// Разбиваем название организации
	НазваниеОрганизацииДляРазбиения = НаимЮЛПол;
	НачПозиция = 1;
	Для Шаг = 1 По 3 Цикл
		ДлинаСтроки = ЭтотОбъект[ТекущееИмяФормы + "ПолеТабличногоДокументаСтраница1"].Области["ОргНазв"+Шаг].ТипЗначения.КвалификаторыСтроки.Длина;
		НазОрганизации = Сред(НазваниеОрганизацииДляРазбиения, НачПозиция, ДлинаСтроки); 
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"ОргНазв"+Шаг,НазОрганизации);
		НачПозиция =НачПозиция + ДлинаСтроки;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы, "Год", СтруктураРеквизитовФормы.мГод);
	     	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"Руководитель",Руководитель);	
	// Дата подачи декларации
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"ДатаПодачи",ДатаПодписи);
		
КонецПроцедуры

&НаСервере
Процедура Форма701РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки, ТекИмяФормы)
	
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,ИмяЯчейки ,ЗначениеЯчейки);							
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Форма701ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если НЕ Найти(Область.Имя, "s_701_00_0") = 0 Тогда	
		Форма701РасчетНаСервере(Область.Имя, Область.Значение, КодФормы);
		Модифицированность = Истина;             
	КонецЕсли;   

КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	Перезаполнить = Истина; // Для выполнения запроса на пересчет данных к пользователю
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения =  РегламентированнаяОтчетностьКлиент.ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Перезаполнить Тогда		
		Если СтрокаФормы.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстВопроса = "Перезаполнить данные формы и ее дополнительных форм?";
		Иначе
			ТекстВопроса = "Перезаполнить данные формы?";
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);
		Оповещение.ДополнительныеПараметры.Вставить("Перезаполнить", Перезаполнить);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);		

	КонецЕсли;		

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	 	
	
	Перезаполнить = ДополнительныеПараметры.Перезаполнить;
	Очистить(КодФормы,Истина);
	
	Если КодФормы = "Форма701" Тогда 		
		Форма701ЗаполнитьАвто(Перезаполнить);		 
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция Форма701РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) Экспорт 
	
	Запрос = Новый Запрос();
	
	// Сначала базовая таблица периодов
	// поскольку начисление налога начинается с 1-го числа месяца приобретения (ст.368 п.2), 
	// то оперируем значениям на конец месяца
	// т.е. если объект присутствует на конец месяца, то за этот месяц необходимо начислять налог.
	ТекстЗапросаПо6Месяцам = "";	
	Для Счетчик = 1 по 6 Цикл
		Если Не ТекстЗапросаПо6Месяцам = "" ТОгда
			ТекстЗапросаПо6Месяцам = ТекстЗапросаПо6Месяцам + "
			| ОБЪЕДИНИТЬ ВСЕ
			| ";
		КонецЕсли;
		ТекстЗапросаПо6Месяцам = ТекстЗапросаПо6Месяцам +  "
		                        |	ВЫБРАТЬ
		                        |	&Дата" + СокрЛП(Счетчик) + " КАК Период		                        
								| ";
		Запрос.УстановитьПараметр("Дата" + СокрЛП(Счетчик), КонецМесяца(ДобавитьМесяц(НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),Счетчик-1)));			
	КонецЦикла;	
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			Объекты.ПериодГода КАК ПериодГода,
	               |			Объекты.ОбъектНалогообложения КАК ОбъектНалогообложения,
	               |			Объекты.Организация КАК Организация,
	               |			МАКСИМУМ(Объекты.ПериодЗаписи) КАК ПериодЗаписи
				   |	ПОМЕСТИТЬ ВТ_Объекты			
	               |	ИЗ
	               |	 (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		Периоды.Период КАК ПериодГода,
	               |		ОбъектыТранспортногоНалога.ОбъектНалогообложения КАК ОбъектНалогообложения,
	               |		ОбъектыТранспортногоНалога.Организация КАК Организация,
	               |		ОбъектыТранспортногоНалога.Период КАК ПериодЗаписи
	               |	ИЗ
	               |		(" + ТекстЗапросаПо6Месяцам + ") КАК Периоды
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыТранспортногоНалога КАК ОбъектыТранспортногоНалога
	               |			ПО ОбъектыТранспортногоНалога.Период <= Периоды.Период
	               |				И (ОбъектыТранспортногоНалога.Налогоплательщик = &Налогоплательщик)) КАК Объекты
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			Объекты.ОбъектНалогообложения,
	               |			Объекты.Организация,
	               |			Объекты.ПериодГода;
	               |ВЫБРАТЬ
	               |	ОбщийЗапрос.ОбъектНалогообложения,
				   |	Представление(ОбщийЗапрос.ОбъектНалогообложения) как ПредставлениеОбъектаНалогообложения,
	               |	ОбщийЗапрос.Организация,
	               |	СУММА(ОбщийЗапрос.КоличествоМесяцев) КАК КоличествоМесяцев,	               
	               |	ПараметрыРасчетаТранспортногоНалога.ВидТранспортногоСредства,
	               |	ЕстьNull(ПараметрыРасчетаТранспортногоНалога.Грузоподъемность,0) КАК Грузоподъемность,
	               |	ЕстьNull(ПараметрыРасчетаТранспортногоНалога.ДатаВыпуска, ДатаВремя(1,1,1)) КАК ДатаВыпуска,
	               |	ЕстьNull(ПараметрыРасчетаТранспортногоНалога.ДатаПриобретения, ДатаВремя(1,1,1)) КАК ДатаПриобретения,
	               |	ЕстьNull(ПараметрыРасчетаТранспортногоНалога.КоличествоПосадочныхМест,0) КАК КоличествоПосадочныхМест,
	               |	ЕстьNull(ПараметрыРасчетаТранспортногоНалога.МощностьВКиловаттах,0) КАК МощностьВКиловаттах,
	               |	ЕстьNull(ПараметрыРасчетаТранспортногоНалога.МощностьВЛошадиныхСилах,0) КАК МощностьВЛошадиныхСилах,
	               |	ПараметрыРасчетаТранспортногоНалога.НомерТранспортногоСредства,
	               |	ЕстьNull(ПараметрыРасчетаТранспортногоНалога.ОбъемДвигателя,0) КАК ОбъемДвигателя,
	               |	ЕстьNull(ПараметрыРасчетаТранспортногоНалога.ПроизводствоСтранСНГ,Ложь) КАК ПроизводствоСтранСНГ,
				   |	ЕстьNull(ПараметрыРасчетаТранспортногоНалога.ЭксплуатацияВРКдо1апреля1999г,Ложь) КАК ЭксплуатацияВРКдо1апреля,
				   |	ЕстьNull(ПараметрыРасчетаТранспортногоНалога.СтранаПроизводитель, Значение(Справочник.КлассификаторСтранМира.ПустаяСсылка)) КАК СтранаПроизводитель,
				   |	ЕстьNull(ПараметрыРасчетаТранспортногоНалога.СтранаПроизводитель.Код, 0) КАК КодСтраныПроизводителя,
				   |	ЕстьNull(ПараметрыРасчетаТранспортногоНалога.ДатаВвозаНаТерриториюРК, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВвозаНаТерриториюРК,
				   |	ЕстьNull(ПараметрыРасчетаТранспортногоНалога.ЕдиницаИзмеренияНалоговойБазы, """") КАК ЕдиницаИзмеренияНалоговойБазы
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Объекты.ПериодГода КАК ПериодГода,
	               |		Объекты.ОбъектНалогообложения КАК ОбъектНалогообложения,
	               |		Объекты.Организация КАК Организация,
	               |		Объекты.ПериодЗаписи КАК ПериодЗаписи,
				   |		ВЫБОР
	               |			КОГДА ОбъектыТранспортногоНалога.НачислятьНалог
	               |				ТОГДА 
				   |				 ВЫБОР КОГДА Объекты.ПериодГода = &Дата6 Тогда 7 иначе 1 Конец
	               |			ИНАЧЕ 0
	               |		КОНЕЦ КАК КоличествоМесяцев
				   |	ИЗ
	               |		ВТ_Объекты КАК Объекты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыТранспортногоНалога КАК ОбъектыТранспортногоНалога
	               |			ПО Объекты.ПериодЗаписи = ОбъектыТранспортногоНалога.Период				   
				   |			И Объекты.ОбъектНалогообложения = ОбъектыТранспортногоНалога.ОбъектНалогообложения
	               |			И Объекты.Организация = ОбъектыТранспортногоНалога.Организация
	               |		ГДЕ
	               |			ОбъектыТранспортногоНалога.СтруктурнаяЕдиница В (&СписокСтруктурныхЕдиниц)) КАК ОбщийЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыРасчетаТранспортногоНалога КАК ПараметрыРасчетаТранспортногоНалога
	               |		ПО ОбщийЗапрос.Организация = ПараметрыРасчетаТранспортногоНалога.Организация
	               |			И ОбщийЗапрос.ОбъектНалогообложения = ПараметрыРасчетаТранспортногоНалога.ОсновноеСредство
	               |				   
				   |	ГДЕ
				   |		ОбщийЗапрос.КоличествоМесяцев > 0
				   |СГРУППИРОВАТЬ ПО
	               |	ОбщийЗапрос.ОбъектНалогообложения,
	               |	ОбщийЗапрос.Организация,	               
	               |	ПараметрыРасчетаТранспортногоНалога.ВидТранспортногоСредства,
	               |	ПараметрыРасчетаТранспортногоНалога.Грузоподъемность,
	               |	ПараметрыРасчетаТранспортногоНалога.ДатаВыпуска,
	               |	ПараметрыРасчетаТранспортногоНалога.ДатаПриобретения,
	               |	ПараметрыРасчетаТранспортногоНалога.КоличествоПосадочныхМест,
	               |	ПараметрыРасчетаТранспортногоНалога.МощностьВКиловаттах,
	               |	ПараметрыРасчетаТранспортногоНалога.МощностьВЛошадиныхСилах,
	               |	ПараметрыРасчетаТранспортногоНалога.НомерТранспортногоСредства,
	               |	ПараметрыРасчетаТранспортногоНалога.ОбъемДвигателя,
				   |	ПараметрыРасчетаТранспортногоНалога.ЭксплуатацияВРКдо1апреля1999г,
	               |	ПараметрыРасчетаТранспортногоНалога.ПроизводствоСтранСНГ,
				   |	ПараметрыРасчетаТранспортногоНалога.СтранаПроизводитель,
				   |	ПараметрыРасчетаТранспортногоНалога.СтранаПроизводитель.Код,
	               |	ПараметрыРасчетаТранспортногоНалога.ДатаВвозаНаТерриториюРК,
				   |	ПараметрыРасчетаТранспортногоНалога.ЕдиницаИзмеренияНалоговойБазы";
		
	
	Запрос.Текст = ТекстЗапроса;
	
	// Установка параметров
	Запрос.УстановитьПараметр("Налогоплательщик", 			Налогоплательщик);			   
	Запрос.УстановитьПараметр("СписокСтруктурныхЕдиниц", 	мСписокСтруктурныхЕдиниц);			   
		
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() И ВыдаватьСообщения Тогда
		Текст = НСтр("ru = 'Данные для заполнения формы 701.00 за отчетный период отсутствуют...'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);    			
	КонецЕсли;	  	
	
	ТаблицаРезультата = Результат.Выгрузить();	
		
	 Возврат ТаблицаРезультата;			 
	
КонецФункции // Форма701РассчитатьДанныеФормы()                     
                     
&НаСервере
Функция ПолучитьСтавкуНалогаНаТранспортДляОбъекта(ТаблицаСтавок, ЗначениеПоказателя = Неопределено, РассчитатьОтПревышения = 0, ОбъемПревышения = 0)  Экспорт
	
	Если ЗначениеПоказателя = Неопределено Тогда
		ЗначениеПоказателя  = 0;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ТаблицаСтавок) = Тип("ТаблицаЗначений") Тогда	
		Возврат 0;
	КонецЕсли;	                       
	ТаблицаСтавок.Сортировать("НижнийПредел");
	Для Каждого СтрокаСтавок Из ТаблицаСтавок Цикл
		НижнийПредел   = СтрокаСтавок.НижнийПредел;
		ВерхнийПредел  = СтрокаСтавок.ВерхнийПредел;
		БезОграничения = СтрокаСтавок.БезОграничения;
		
		Если БезОграничения Тогда
			Если РассчитатьОтпревышения = 1 Тогда
				ОбъемПревышения = ЗначениеПоказателя - НижнийПредел;				
			КонецЕсли; 
			Возврат СтрокаСтавок.СтавкаНалога;
		КонецЕсли;
		
		Если (ЗначениеПоказателя > НижнийПредел) И
			 ((ЗначениеПоказателя <= ВерхнийПредел) Или БезОграничения) Тогда			
			 
			Если РассчитатьОтпревышения = 1 Тогда
				ОбъемПревышения = ЗначениеПоказателя - НижнийПредел;				
			КонецЕсли;      
			
			Возврат СтрокаСтавок.СтавкаНалога;
		КонецЕсли;	
	КонецЦикла;

	Возврат 0;
	
КонецФункции // ПолучитьСтавкуНалогаНаТранспортДляОбъекта()

&НаСервере 
Функция ПолучитьРазмерПревышенияПоОбъему(ВидТранспортногоСредства, ЗначениеХарактеристикиОбъекта, СтруктураСтавокНалога, Префикс = "") Экспорт
	
	Если ТипЗнч(ВидТранспортногоСредства) = Тип("ПеречислениеСсылка.ВидыТранспортныхСредств") 
		И ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛегковойАвтомобиль Тогда
		
		ТаблицаСтавокНалога = Неопределено;	
		
		ПревышенияПоVЛегковых = "ПревышенияПоVЛегковых" + Префикс;
		Если СтруктураСтавокНалога.Свойство(ПревышенияПоVЛегковых, ТаблицаСтавокНалога) Тогда				 	
			ОбъемПревышения = 0;
			ПолучитьСтавкуНалогаНаТранспортДляОбъекта(ТаблицаСтавокНалога, ЗначениеХарактеристикиОбъекта,1,ОбъемПревышения) ;
			Возврат ОбъемПревышения;
		КонецЕсли;					 							
	КонецЕсли;	
	
	Возврат 0;	
КонецФункции // ПолучитьРазмерПревышенияПоОбъему

&НаСервере
Функция СформироватьСтуктуруСтавокНалогаНаТранспорт(Период) Экспорт 
	
	СтруктураСтавок = Новый Структура;
	МакетСтавок = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("СтавкиНалогаНаТранспорт");
		
	СтруктураТаблицы = Новый ТаблицаЗначений;
	СтруктураТаблицы.Колонки.Добавить("НижнийПредел");
	СтруктураТаблицы.Колонки.Добавить("ВерхнийПредел");
	СтруктураТаблицы.Колонки.Добавить("БезОграничения");
	СтруктураТаблицы.Колонки.Добавить("СтавкаНалога");
	                              	
	Область = МакетСтавок.Области["Строка" + Период];
	Для Ном = Область.Верх По Область.Низ Цикл
		Наименование  = СокрЛП(МакетСтавок.Область(Ном, 1).Текст);
		НижнийПредел  = СокрЛП(МакетСтавок.Область(Ном, 2).Текст);
		ВерхнийПредел = СокрЛП(МакетСтавок.Область(Ном, 3).Текст);
		СтавкаНалога  = СокрЛП(МакетСтавок.Область(Ном, 4).Текст);
		
		Если Не СтруктураСтавок.Свойство(Наименование) Тогда			
			СтруктураСтавок.Вставить(Наименование, СтруктураТаблицы.Скопировать());
		КонецЕсли;	
		
		Строка = СтруктураСтавок[Наименование].Добавить();
		Строка.БезОграничения = ВерхнийПредел = "*";
		Строка.НижнийПредел   = ?(Не НижнийПредел = "*", Число(НижнийПредел), 0);
		Строка.ВерхнийПредел  = ?(НЕ ВерхнийПредел = "*",Число(ВерхнийПредел), 999999);
		Строка.СтавкаНалога	  = Число(СтавкаНалога);
	КонецЦикла;
	
	Возврат СтруктураСтавок;
	
КонецФункции // СформироватьСтуктуруСтавокНалогаНаТранспорт()

&НаСервере
Функция РазностьДатВМесяцах(знач Дата1, Дата2) Экспорт
	
	КоличествоЛет     = Год(Дата2) - Год(Дата1);
	КоличествоМесяцев = Месяц(Дата2) - Месяц(Дата1);	
	// корректировка для случая Дата1 = 15 марта, Дата2 = 10 апреля. месяц еще не истек
	Если не Месяц(Дата2) = Месяц(Дата1) и
		День(Дата2) < День(Дата1)	ТОгда
		КоличествоМесяцев =  КоличествоМесяцев - 1;
	КонецЕсли;	                                              	
	РазностьВМесяцах = КоличествоЛет * 12 + КоличествоМесяцев;		
	
	Возврат РазностьВМесяцах;	                              	
	
КонецФункции

&НаСервере
Функция ПолучитьРазмерКорректировки(ВидТранспортногоСредства, ХарактеристикиОбъекта, СтруктураСтавокНалога)	Экспорт
	
	ПоправочныйКоэффициент = 1;
	Если НЕ ТипЗнч(ВидТранспортногоСредства) = Тип("ПеречислениеСсылка.ВидыТранспортныхСредств")
		ИЛИ НЕ ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛетательныйАппарат Тогда
		Возврат ПоправочныйКоэффициент;
	КонецЕсли;
	// 01 июля отчетного года
	ОтчетнаяДата = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), 07, 01) ;
	
	// - Коэффициенты (*К) - летательные аппараты
	Если ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛетательныйАппарат 
		 и ХарактеристикиОбъекта.ДатаВыпуска <> Дата(1,1,1) ТОгда
		 
		 ТаблицаСтавокНалога = Неопределено;				  
		 Если ХарактеристикиОбъекта.ЭксплуатацияВРКдо1апреля = Ложь Тогда
		 	 Если СтруктураСтавокНалога.Свойство("КЛетательныеАппаратыПосле010499", ТаблицаСтавокНалога) Тогда				 	
				ПоправочныйКоэффициент = ПолучитьСтавкуНалогаНаТранспортДляОбъекта(ТаблицаСтавокНалога, РазностьДатВМесяцах(ХарактеристикиОбъекта.ДатаВыпуска, ОтчетнаяДата)/12) ;						
			 КонецЕсли;					 											
		 Иначе
			 Если СтруктураСтавокНалога.Свойство("КЛетательныеАппаратыДо010499", ТаблицаСтавокНалога) Тогда				 	
				ПоправочныйКоэффициент = ПолучитьСтавкуНалогаНаТранспортДляОбъекта(ТаблицаСтавокНалога, РазностьДатВМесяцах(ХарактеристикиОбъекта.ДатаВыпуска, ОтчетнаяДата)/12) ;						
			 КонецЕсли;					 											
		КонецЕсли;		
	КонецЕсли;
		
	Возврат ПоправочныйКоэффициент;	
	
КонецФункции // ПолучитьРазмерКорректировки()

&НаСервере
Процедура Форма701ЗаполнитьАвто(Перезаполнить = Ложь)               
	
	КодФормы = "Форма701";
	
	ТаблицаОтчета = Форма701РассчитатьДанныеФормы(Истина);
	СтруктураСтавокНалога = СформироватьСтуктуруСтавокНалогаНаТранспорт("2016");
	СтруктураОбязательныхРеквизитов = Новый Структура("ЛегковойАвтомобиль, ГрузовойАвтомобиль, Автобус, Катер, ЛетательныйАппарат, Мотоцикл, СамоходнаяМашина, ЖелезнодорожныйТяговыйПодвижнойСостав, МотороВагонныйПодвижнойСостав",
													"ОбъемДвигателя", "Грузоподъемность", "КоличествоПосадочныхМест",
													"МощностьВЛошадиныхСилах", "МощностьВКиловаттах", "МощностьВКиловаттах", "ОбъектНалогообложения", "МощностьВКиловаттах", "МощностьВКиловаттах");
													
	Всего = 0;
	СтруктураС = Новый Соответствие;;
	Для Каждого СтрокаОтчета из ТаблицаОтчета Цикл  			
		
		Если РасчетБезРзбиенияПоСрокамДействияМРП = 0 Тогда
			ВеличинаМРП = парамМРП;
		Иначе  			
		ТекстЗапроса = "ВЫБРАТЬ
				|	ЕстьNull(РасчетныеПоказатели.РазмерМРП,0) КАК МРП
				|ИЗ
				|	РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&ДатаКон) КАК РасчетныеПоказатели
				|";
				
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ДатаКон", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ВеличинаМРП = Выборка.МРП;
		Иначе
			ВеличинаМРП = 0;
		КонецЕсли;
	КонецЕсли;
	
		Если Не СтрокаОтчета.ВидТранспортногоСредства = Null И Не СтрокаОтчета.ВидТранспортногоСредства.Пустая() Тогда
			
			МетаданныеЗначенияПеречисления = Метаданные.Перечисления["ВидыТранспортныхСредств"].ЗначенияПеречисления[Перечисления.ВидыТранспортныхСредств.Индекс(СтрокаОтчета.ВидТранспортногоСредства)];
			ВидТранспортногоСредстваСтрока = СокрЛП(МетаданныеЗначенияПеречисления.Имя);
			// Базовый показатель (700.02.004)
			
			// Значение ключевого реквизита				
			ИмяРеквизита = "";
			ЗначениеПоказателя = 0;
			Если СтруктураОбязательныхРеквизитов.Свойство(ВидТранспортногоСредстваСтрока, ИмяРеквизита) И
				НЕ  СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.СамоходнаяМашина  Тогда						 
				ЗначениеПоказателя = СтрокаОтчета[ИмяРеквизита];		    			 						
			КонецЕсли;
							
			// Базовая ставка Налога 700.02.005
			ТаблицаСтавокНалога = Неопределено;				 
			СуммаНалога 		= 0;
			СтавкаНалога 		= 0;
			Префикс 			= "";
			
			Если ВидТранспортногоСредстваСтрока = "Мотоцикл" Тогда				
				// У мотоцикла мощность в лошадиных силах и мощность в киловаттах хранится в ресурсе МощностьВКиловаттах.				
				Если СтрокаОтчета.ЕдиницаИзмеренияНалоговойБазы = "251" Тогда // Лошадиные силы
					ВидТранспортногоСредстваДляШкалыНалога = "МотоциклЛошадиныеСилы";		
				ИначеЕсли СтрокаОтчета.ЕдиницаИзмеренияНалоговойБазы = "214" Тогда // Киловатты
					ВидТранспортногоСредстваДляШкалыНалога = "МотоциклКиловатты";	
				Иначе
					ВызватьИсключение НСтр("ru = 'Некорректное значение ресурса ""Ед. изм. налоговой базы"".'");	
				КонецЕсли;
			Иначе
				ВидТранспортногоСредстваДляШкалыНалога = ВидТранспортногоСредстваСтрока;	
			КонецЕсли;
			
			// Для легковых автомобилей применяется разная шкала в зависимости от даты и места производства
			Если ВидТранспортногоСредстваСтрока = "ЛегковойАвтомобиль" Тогда 
				// Для легковых автомобилей с объемом двигателя свыше 3000 кубических сантиметров,
				// произведенных (изготовленных или собранных) в Республике Казахстан после 31 декабря 2013 года
				// или ввезенных на территорию Республики Казахстан после 31 декабря 2013 года, исчисление налога
				// производится по следующим ставкам, установленным в месячных расчетных показателях...
				// см. п. 1. ст. 367 НК РК
				Если СтрокаОтчета.СтранаПроизводитель = Справочники.КлассификаторСтранМира.Казахстан Или СтрокаОтчета.КодСтраныПроизводителя = "398" Тогда
					// анализируется дата выпуска
					Если СтрокаОтчета.ДатаВыпуска >= Дата(2014,1,1) Тогда
						Префикс = "После2013";
					Иначе
						Префикс = "До2013";
					КонецЕсли;       					
				Иначе
					// анализируется дата ввоза в РК
					Если СтрокаОтчета.ДатаВвозаНаТерриториюРК >= Дата(2014,1,1) Тогда
						Префикс = "После2013";
					Иначе
						Префикс = "До2013";
					КонецЕсли;       										
				КонецЕсли;
					
				ВидТранспортногоСредстваДляШкалыНалога = ВидТранспортногоСредстваСтрока + Префикс;
			КонецЕсли;
			
			Если СтруктураСтавокНалога.Свойство(ВидТранспортногоСредстваДляШкалыНалога, ТаблицаСтавокНалога) Тогда				 	
				СтавкаНалога =ПолучитьСтавкуНалогаНаТранспортДляОбъекта(ТаблицаСтавокНалога, ЗначениеПоказателя);
				Если РасчетБезРзбиенияПоСрокамДействияМРП = 0 Тогда
					Если СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛетательныйАппарат 
						Или СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЖелезнодорожныйТяговыйПодвижнойСостав
						Или СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.МотороВагонныйПодвижнойСостав Тогда
						СуммаНалога = СтавкаНалога * ЗначениеПоказателя * ВеличинаМРП;
					Иначе
						СуммаНалога = СтавкаНалога * ВеличинаМРП;						 
					КонецЕсли;
				Иначе					
					ВеличинаМРПДо1Июля = РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьПоследнее(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета).РазмерМРП; // за первые 6 месяецв
					// количество месяцев может быть 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12 (не 6)
					Если СтрокаОтчета.КоличествоМесяцев <=5 Тогда
						// актив выбыл до 1 июля - считаем по старой ставке
						Если СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛетательныйАппарат
							Или СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЖелезнодорожныйТяговыйПодвижнойСостав
							Или СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.МотороВагонныйПодвижнойСостав Тогда
							СуммаНалога = СтавкаНалога * ЗначениеПоказателя * ВеличинаМРПДо1Июля;
						Иначе
							СуммаНалога = СтавкаНалога * ВеличинаМРПДо1Июля;						 
						КонецЕсли;
					Иначе
						// актив мог выбыть после 1 июля, а мог и не выбыть - после 1 июля мы не смотрим выбыл он или нет.
						КолВоМесДо1Июля = СтрокаОтчета.КоличествоМесяцев - 6;
						КолВоМесПосле1Июля = 6;
						
						ВеличинаМРППосле1июля = РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьПоследнее(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета).РазмерМРП; // за последние 6 месяецв
						
						// рассчитаем сумму налога по формуле:					
						// СуммаНалога = СтавкаНалога * (МРП1*КолВоМесДо1Июля + МРП2*КолВоМесПосле1Июля) / КолВоМесяцев
						СреднееМРП = (ВеличинаМРПДо1Июля*КолВоМесДо1Июля + ВеличинаМРППосле1июля*КолВоМесПосле1Июля) / СтрокаОтчета.КоличествоМесяцев;
						Если СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛетательныйАппарат 
							Или СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЖелезнодорожныйТяговыйПодвижнойСостав
							Или СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.МотороВагонныйПодвижнойСостав Тогда
							СуммаНалога = СтавкаНалога * ЗначениеПоказателя * СреднееМРП;
						Иначе
							СуммаНалога = СтавкаНалога * СреднееМРП;						 
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Для легковых автомобилей рассчитываем размер превышения
			СуммаПревышения = 0;
			Если СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛегковойАвтомобиль Тогда				
				РазмерПревышения = ПолучитьРазмерПревышенияПоОбъему(СтрокаОтчета.ВидТранспортногоСредства, ЗначениеПоказателя, СтруктураСтавокНалога, Префикс);
				
				СуммаПревышения = РазмерПревышения*7;						
			КонецЕсли;
			
			ОбщаяСуммаНалога = СуммаНалога + СуммаПревышения;
			РазмерКорректировки = ПолучитьРазмерКорректировки(СтрокаОтчета.ВидТранспортногоСредства, СтрокаОтчета, СтруктураСтавокНалога);				 	 
			
			СуммаСУчетомКорректировки = ОбщаяСуммаНалога * РазмерКорректировки;
				
			ОбщаяСуммаНалога = Окр(СуммаСУчетомКорректировки*СтрокаОтчета.КоличествоМесяцев/12,0);
			
			СтруктураС.Вставить(СтрокаОтчета.ОбъектНалогообложения,ОбщаяСуммаНалога);
			
			Всего = Всего + ОбщаяСуммаНалога;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "s_701_00_001", Всего);			
	
	// Заполняем поле "Представленные приложения"
	ТекущаяСтрока = СписокФормДерева.ПолучитьЭлементы()[0];
	Для Каждого Форма Из ТекущаяСтрока.ПолучитьЭлементы() Цикл            
		ИмяОбласти = "Приложение" + Прав(Форма.КодФормы,2);
		Если Форма701ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяОбласти) <> Неопределено Тогда 			
			СтрокиФорм = мСписокФормБезИерархии.ПолучитьЭлементы();			
			Для Каждого Строка Из СтрокиФорм Цикл
				Если Строка.КодФормы = Форма.КодФормы Тогда					
					Если Строка.Выгружать = 1 Тогда
						РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,ИмяОбласти,"Х");				
					Иначе
						РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,ИмяОбласти,"");				
					КонецЕсли;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 			
		КонецЕсли;
	КонецЦикла;

	// передаем в качестве признака перезаполнения Истина, т.к. это главная форма
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма,КодФормы, Истина);
	
	Модифицированность = Истина;       
	
КонецПроцедуры // Форма701ЗаполнитьАвто()

&НаКлиенте
Процедура Форма701ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
		
	Ячейка = Область.Имя;
	
	ИмяОбласти = Область.Имя;	
	
	Если Область.СодержитЗначение Тогда
		Значение = Область.Значение;
	Иначе
		Значение = "";		
	КонецЕсли;

	Форма701ПолеТабличногоДокументаСтраница1ВыборНаСервере(Ячейка, Значение);	
	
	Модифицированность = Истина;
	
КонецПроцедуры


&НаСервере
Процедура Форма701ПолеТабличногоДокументаСтраница1ВыборНаСервере(Ячейка, Значение,ПризнакРасчета = Ложь)
	
	Если (Найти(Ячейка, "Первоначальный") > 0)
	 ИЛИ (Найти(Ячейка, "Очередной") > 0)
	 ИЛИ (Найти(Ячейка, "Дополнительный") > 0)
	 ИЛИ (Найти(Ячейка, "ПоУведомлению") > 0) Тогда
	    ЗаполнитьВидРасчета(Ячейка);
	КонецЕсли;	
	
	Если (Найти(Ячейка, "ПрименяющийСНР") > 0)
	 ИЛИ (Найти(Ячейка, "ДовУправляющий") > 0)
	 ИЛИ (Найти(Ячейка, "ДовУправляющийУчредитель") > 0)
	  Тогда
	 	Если Значение = "Х" Тогда
			Значение = "";
		Иначе
			Значение = "Х";
		КонецЕсли;		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, Ячейка, Значение, Истина);				
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если Модифицированность Тогда 
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);	
		ТекстВопроса = НСТР("ru = 'Сохранить данные отчета?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьнаСервере();
		Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;	
КонецПроцедуры 

&НаСервере
Процедура СохранитьнаСервере();
	РегламентированнаяОтчетность.СохранитьОтчет(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьНаСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);

КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчете(Команда)
	
	СохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(СохраненныйДок) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Регламентированный отчет не записан в информационной базе.'"));
		Возврат;
	КонецЕсли;
	
	ДокументОтраженияВУчете = ПолучитьЗначениеРеквизита(СохраненныйДок, "ДокументОтраженияВУчете");
	
	Если ЗначениеЗаполнено(ДокументОтраженияВУчете) Тогда
		РегламентированнаяОтчетностьКлиент.ОткрытьДокументОтраженияНалОтчетностиВУчете(СохраненныйДок, ДокументОтраженияВУчете, ЭтотОбъект);
	Иначе
		РегламентированнаяОтчетностьКлиент.СоздатьДокументОтраженияНалОтчетностиВУчете(СохраненныйДок, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	ОткрытьФормуНастройкиСтраниц()

КонецПроцедуры


&НаКлиенте
Процедура ОткрытьФормуНастройкиСтраниц()
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРаздел = Элементы.РазделыОтчета.ТекущиеДанные.Страницы;		
	КонецЕсли;
	
	Для Каждого ТекФорма ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",ТекФорма.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			ТекущаяСтрокаСписка.Выгружать               = ТекФорма.Выгружать;
			ТекущаяСтрокаСписка.ПоказатьСтраницу        = ТекФорма.ПоказатьСтраницу;			
			ТекущаяСтрокаСписка.АвтополучениеИтогов     = ТекФорма.АвтополучениеИтогов;  
			ТекущаяСтрокаСписка.АвтоЗаполнение          = ТекФорма.АвтоЗаполнение;  
		КонецЕсли;		   
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокФормДерева",СписокФормДерева);
	
	ДопПараметры = Новый Структура("ТекущийРаздел",ТекущийРаздел);
	
	ОповещениеПослеЗакрытияФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастройкиСтраниц",ЭтотОбъект,ДопПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.НастройкиОтчета",ПараметрыФормы, ЭтаФорма,,,,ОповещениеПослеЗакрытияФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиСтраниц(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьДанныеФормы(РезультатЗакрытия, СписокФормДерева);
	
	Модифицированность = Истина;
	
	//обновим мСписокФормБезИерархии
	Для Каждого СтрокаФормы ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",СтрокаФормы.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			СтрокаФормы.Выгружать               = ТекущаяСтрокаСписка.Выгружать;
			СтрокаФормы.ПоказатьСтраницу        = ТекущаяСтрокаСписка.ПоказатьСтраницу;			
			СтрокаФормы.АвтополучениеИтогов     = ТекущаяСтрокаСписка.АвтополучениеИтогов;  
			СтрокаФормы.АвтоЗаполнение          = ТекущаяСтрокаСписка.АвтоЗаполнение;  
		КонецЕсли;			
	КонецЦикла; 	

	Если ДополнительныеПараметры.Свойство("ТекущийРаздел") И НЕ ДополнительныеПараметры.ТекущийРаздел = Неопределено Тогда  		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(РазделыОтчета, Новый Структура("СписокФормДереваСтраницы",ДополнительныеПараметры.ТекущийРаздел));
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;			
	КонецЕсли;  	
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсе(Команда)
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФормуИПриложения");
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФорму(Команда)
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму");
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеглОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Форма = ДополнительныеПараметры.Форма;	
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", Форма.КодФормы));
		Вложенность = ДополнительныеПараметры.ОчищатьПриложения;	
		
		ОчиститьРеглОтчетЗавершениеНаСервере(СтрокаФормы.КодФормы, СтрокаФормы.Многострочность, Вложенность)	
	КонецЕсли;		
КонецПроцедуры 	

&НаСервере
Процедура ОчиститьРеглОтчетЗавершениеНаСервере(КодФормы, ПризнакМногострочности, Вложенность) Экспорт
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, ПризнакМногострочности, Вложенность);
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыФормы.Вставить("Налогоплательщик",         Налогоплательщик);
	ПараметрыФормы.Вставить("НалоговыйКомитет",         НалоговыйКомитет);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, мВыбраннаяФорма, "") + "ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВXML(Команда)
	
	ГодФормирования = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	
	Если 2017 < ГодФормирования Тогда 
		ТекстСообщения = НСтр("ru = 'Отчет не предназначен для выгрузки в XML в период формирования " + Формат(ГодФормирования,"ЧГ=0") + " г." + Символы.ПС + 
						"Пожалуйста, обновите комплект отчетов.'");
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);		
		Возврат;
	КонецЕсли;
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект);	
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры  

&НаКлиенте
Процедура ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохраненияФайла.ПолноеИмяФайла = КодФормы + " " + СтруктураРеквизитовФормы.мГод + "г" + ".xml";
		ДиалогСохраненияФайла.Фильтр = РегламентированнаяОтчетностьКлиентСервер.ФильтрДиалоговВыбораИСохраненияРегламентированногоОтчета();	
		ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
		ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите файл'");		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
		ДиалогСохраненияФайла.Показать(ОписаниеОповещения);
	Иначе   
		НачатьПолучениеФайлаССервера(ВыгрузитьВXMLНаСервере(), КодФормы + ".xml"); 
	КонецЕсли;
	   
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресВременногоХранилища = ВыгрузитьВXMLНаСервере();
		
	ПолноеИмяФайла = Результат[0];
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, АдресВременногоХранилища));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяФайла",ПолноеИмяФайла); 
	Обработчик = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеЗавершение", ЭтотОбъект,ДополнительныеПараметры);
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
	ПараметрыСохранения.Интерактивно = Ложь;
	ФайловаяСистемаКлиент.СохранитьФайлы(Обработчик, ПолучаемыеФайлы, ПараметрыСохранения); 
	
	        
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ТекстЗаголовка = НСтр("ru = 'Данные успешно выгружены в файл'");
	
	СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДополнительныеПараметры.ИмяФайла);
	
	РабочийКаталог = СтруктураФайла.Путь;

	#Если НЕ ВебКлиент Тогда
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка, "file:///" + СтрЗаменить(СокрЛП(РабочийКаталог), "\", "/"),
		РабочийКаталог);
	#Иначе
		Если НЕ ЗначениеЗаполнено(ПолученныеФайлы) Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка,,
		РабочийКаталог);
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьВXMLНаСервере(ВыдаватьСообщение = Ложь)
		
	Возврат РегламентированнаяОтчетность.ВыгрузитьОтчетВXMLДляСОНО(ЭтотОбъект, ВыдаватьСообщение);	

КонецФункции

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыФормыНаКлиенте(Параметры) Экспорт
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	ЗаполнитьСведенияОбОтчетномПериоде();
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);		
	КонецЦикла	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормы(ТекФорма, Параметры)
	
	ЗаполнитьЗначенияСвойств(ТекФорма.СтруктураРеквизитовФормы, Параметры);
		
	ТекФорма.Налогоплательщик        						 = Параметры.Налогоплательщик;
	ТекФорма.НалоговыйКомитет        						 = Параметры.НалоговыйКомитет;
	ТекФорма.мСписокСтруктурныхЕдиниц						 = Параметры.мСписокСтруктурныхЕдиниц;
	ТекФорма.ПредставлениеСпискаСтруктурныхЕдиниц			 = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ТекФорма.мСписокСтруктурныхЕдиниц);
	
	ТекФорма.парамМРП = ПолучитьВеличинуМРП(ТекФорма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВеличинуМРП(ДатаКон)
	//заполним величину МРП
	ТекстЗапроса = "ВЫБРАТЬ
	|	ЕстьNull(РасчетныеПоказатели.РазмерМРП,0) КАК МРП
	|ИЗ
	|	РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&ДатаКон) КАК РасчетныеПоказатели
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.МРП;
	Иначе
		Возврат 0;
	КонецЕсли; 

КонецФункции

&НаКлиенте
Процедура СохранитьДанные() Экспорт
	СохранитьДанныеСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеСервере()
	РегламентированнаяОтчетность.СохранитьОтчет(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницу(Команда)
	
	ВыбСтраница = 1;
	
	ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаСтраницы", ЭтаФорма); 
	ПоказатьВводЧисла(ОповещениеВводаЗначений,ВыбСтраница, "Введите номер страницы",5,0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСтраницы(Значение, Параметры) Экспорт
	
	Если НЕ Значение = Неопределено Тогда  
		
		ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
		Если ТекФорма = Неопределено Тогда
			ВсегоСтраниц = 1;
		Иначе
			ВсегоСтраниц = ТекФорма.ВсегоСтраниц;
		КонецЕсли;		
			
		Если Значение = 0 Тогда
			ТекущаяСтраница = 1;
		ИначеЕсли Значение > ВсегоСтраниц Тогда
			ТекущаяСтраница = ВсегоСтраниц;
		Иначе
			ТекущаяСтраница = Значение;				
		КонецЕсли;
		
		ПослеВводаСтраницыНаСервере();
		  
	КонецЕсли;
	           	
КонецПроцедуры

&НаСервере
Процедура ПослеВводаСтраницыНаСервере()
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтаФорма);
КонецПроцедуры

#Область Расшифровка

&НаКлиенте
Процедура Расшифровка(Команда)
	
	ТекстЗаголовка = НСтр("ru = 'Расшифровка к форме 701.00 - Расчет текущих платежей по транспортному налогу'");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Ложь);	
	ПараметрыФормы.Вставить("ВыводитьЗаголовок", Ложь);	
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", ТекстЗаголовка);
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", ПолучитьАдресСхемыКомпоновкиДанных());
	ПараметрыФормы.Вставить("ТаблицаРасшифровкиНалогаНаТранспорт", ПолучитьАдресТаблицыРасшифровки());
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "Форма7012016Кв1", "ФормаРасшифровки"), ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресСхемыКомпоновкиДанных()
	
	СхемаКомпоновкиДанных = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("Расшифровка");
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	Возврат АдресСхемыКомпоновкиДанных;
	
КонецФункции

&НаСервере
Функция ПолучитьАдресТаблицыРасшифровки()
	
	ТабЗначРасшифровка = Новый ТаблицаЗначений;
	ТабЗначРасшифровка.Колонки.Добавить("ОС");
	ТабЗначРасшифровка.Колонки.Добавить("Параметр");
	ТабЗначРасшифровка.Колонки.Добавить("Значение");
	ТабЗначРасшифровка.Колонки.Добавить("Ставка");
	ТабЗначРасшифровка.Колонки.Добавить("Сумма");
	ТабЗначРасшифровка.Колонки.Добавить("Итого");
	
	ТаблицаОтчета = Форма701РассчитатьДанныеФормы(Истина);
	СтруктураСтавокНалога = СформироватьСтуктуруСтавокНалогаНаТранспорт("2016");
	СтруктураОбязательныхРеквизитов = Новый Структура("ЛегковойАвтомобиль, ГрузовойАвтомобиль, Автобус, Катер, ЛетательныйАппарат, Мотоцикл, СамоходнаяМашина, ЖелезнодорожныйТяговыйПодвижнойСостав, МотороВагонныйПодвижнойСостав",
													"ОбъемДвигателя", "Грузоподъемность", "КоличествоПосадочныхМест",
													"МощностьВЛошадиныхСилах", "МощностьВКиловаттах", "МощностьВКиловаттах", "ОбъектНалогообложения", "МощностьВКиловаттах", "МощностьВКиловаттах");
													
	Всего = 0;
	СтруктураС = Новый Соответствие;;
	Для Каждого СтрокаОтчета из ТаблицаОтчета Цикл  			
		
		Если РасчетБезРзбиенияПоСрокамДействияМРП = 0 Тогда
			ВеличинаМРП = парамМРП;
		Иначе  			
		ТекстЗапроса = "ВЫБРАТЬ
				|	ЕстьNull(РасчетныеПоказатели.РазмерМРП,0) КАК МРП
				|ИЗ
				|	РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&ДатаКон) КАК РасчетныеПоказатели
				|";
				
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ДатаКон", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ВеличинаМРП = Выборка.МРП;
		Иначе
			ВеличинаМРП = 0;
		КонецЕсли;
	КонецЕсли;
	
		Если Не СтрокаОтчета.ВидТранспортногоСредства = Null И Не СтрокаОтчета.ВидТранспортногоСредства.Пустая() Тогда
						
			МетаданныеЗначенияПеречисления = Метаданные.Перечисления["ВидыТранспортныхСредств"].ЗначенияПеречисления[Перечисления.ВидыТранспортныхСредств.Индекс(СтрокаОтчета.ВидТранспортногоСредства)];
			ВидТранспортногоСредстваСтрока = СокрЛП(МетаданныеЗначенияПеречисления.Имя);
			// Базовый показатель (700.02.004)
			
			// Значение ключевого реквизита
			ИмяРеквизита = "";
			ЗначениеПоказателя = 0;
			Если СтруктураОбязательныхРеквизитов.Свойство(ВидТранспортногоСредстваСтрока, ИмяРеквизита) И
				НЕ  СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.СамоходнаяМашина  Тогда						 
				ЗначениеПоказателя = СтрокаОтчета[ИмяРеквизита];		    			 						
			КонецЕсли;	     						 
			
			// Базовая ставка Налога 700.02.005
			ТаблицаСтавокНалога = Неопределено;				 
			СуммаНалога 		= 0;
			СтавкаНалога 		= 0;
			Префикс 			= "";
			
			Если ВидТранспортногоСредстваСтрока = "Мотоцикл" Тогда				
				// У мотоцикла мощность в лошадиных силах и мощность в киловаттах хранится в ресурсе МощностьВКиловаттах.				
				Если СтрокаОтчета.ЕдиницаИзмеренияНалоговойБазы = "251" Тогда // Лошадиные силы
					ВидТранспортногоСредстваДляШкалыНалога = "МотоциклЛошадиныеСилы";		
				ИначеЕсли СтрокаОтчета.ЕдиницаИзмеренияНалоговойБазы = "214" Тогда // Киловатты
					ВидТранспортногоСредстваДляШкалыНалога = "МотоциклКиловатты";	
				Иначе
					ВызватьИсключение НСтр("ru = 'Некорректное значение ресурса ""Ед. изм. налоговой базы"".'");	
				КонецЕсли;
			Иначе
				ВидТранспортногоСредстваДляШкалыНалога = ВидТранспортногоСредстваСтрока;	
			КонецЕсли;
			
			// Для легковых автомобилей применяется разная шкала в зависимости от даты и места производства
			Если ВидТранспортногоСредстваСтрока = "ЛегковойАвтомобиль" Тогда 
				// Для легковых автомобилей с объемом двигателя свыше 3000 кубических сантиметров,
				// произведенных (изготовленных или собранных) в Республике Казахстан после 31 декабря 2013 года
				// или ввезенных на территорию Республики Казахстан после 31 декабря 2013 года, исчисление налога
				// производится по следующим ставкам, установленным в месячных расчетных показателях...
				// см. п. 1. ст. 367 НК РК
				Если СтрокаОтчета.СтранаПроизводитель = Справочники.КлассификаторСтранМира.Казахстан Или СтрокаОтчета.КодСтраныПроизводителя = "398" Тогда
					// анализируется дата выпуска
					Если СтрокаОтчета.ДатаВыпуска >= Дата(2014,1,1) Тогда
						Префикс = "После2013";
					Иначе
						Префикс = "До2013";
					КонецЕсли;       					
				Иначе
					// анализируется дата ввоза в РК
					Если СтрокаОтчета.ДатаВвозаНаТерриториюРК >= Дата(2014,1,1) Тогда
						Префикс = "После2013";
					Иначе
						Префикс = "До2013";
					КонецЕсли;       										
				КонецЕсли;
					
				ВидТранспортногоСредстваДляШкалыНалога = ВидТранспортногоСредстваСтрока + Префикс;
			КонецЕсли;
			
			Если СтруктураСтавокНалога.Свойство(ВидТранспортногоСредстваДляШкалыНалога, ТаблицаСтавокНалога) Тогда				 	
				СтавкаНалога =ПолучитьСтавкуНалогаНаТранспортДляОбъекта(ТаблицаСтавокНалога, ЗначениеПоказателя);
				Если РасчетБезРзбиенияПоСрокамДействияМРП = 0 Тогда
					Если СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛетательныйАппарат 
						Или СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЖелезнодорожныйТяговыйПодвижнойСостав
						Или СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.МотороВагонныйПодвижнойСостав Тогда
						СуммаНалога = СтавкаНалога * ЗначениеПоказателя * ВеличинаМРП;
					Иначе
						СуммаНалога = СтавкаНалога * ВеличинаМРП;						 
					КонецЕсли;
				Иначе					
					ВеличинаМРПДо1Июля = РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьПоследнее(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета).РазмерМРП; // за первые 6 месяецв
					// количество месяцев может быть 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12 (не 6)
					Если СтрокаОтчета.КоличествоМесяцев <=5 Тогда
						// актив выбыл до 1 июля - считаем по старой ставке
						Если СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛетательныйАппарат
							Или СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЖелезнодорожныйТяговыйПодвижнойСостав
							Или СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.МотороВагонныйПодвижнойСостав Тогда
							СуммаНалога = СтавкаНалога * ЗначениеПоказателя * ВеличинаМРПДо1Июля;
						Иначе
							СуммаНалога = СтавкаНалога * ВеличинаМРПДо1Июля;						 
						КонецЕсли;
					Иначе
						// актив мог выбыть после 1 июля, а мог и не выбыть - после 1 июля мы не смотрим выбыл он или нет.
						КолВоМесДо1Июля = СтрокаОтчета.КоличествоМесяцев - 6;
						КолВоМесПосле1Июля = 6;
						
						ВеличинаМРППосле1июля = РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьПоследнее(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета).РазмерМРП; // за последние 6 месяецв
						
						// рассчитаем сумму налога по формуле:					
						// СуммаНалога = СтавкаНалога * (МРП1*КолВоМесДо1Июля + МРП2*КолВоМесПосле1Июля) / КолВоМесяцев
						СреднееМРП = (ВеличинаМРПДо1Июля*КолВоМесДо1Июля + ВеличинаМРППосле1июля*КолВоМесПосле1Июля) / СтрокаОтчета.КоличествоМесяцев;
						Если СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛетательныйАппарат 
							Или СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЖелезнодорожныйТяговыйПодвижнойСостав
							Или СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.МотороВагонныйПодвижнойСостав Тогда
							СуммаНалога = СтавкаНалога * ЗначениеПоказателя * СреднееМРП;
						Иначе
							СуммаНалога = СтавкаНалога * СреднееМРП;						 
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТабЗначРасшифровка = ТабЗначРасшифровка.Добавить();
			СтрокаТабЗначРасшифровка.ОС = СтрокаОтчета.ОбъектНалогообложения;
			СтрокаТабЗначРасшифровка.Значение = ЗначениеПоказателя;
			СтрокаТабЗначРасшифровка.Ставка = СтавкаНалога;
			СтрокаТабЗначРасшифровка.Сумма = СуммаНалога;			
			
			Если ВидТранспортногоСредстваСтрока = "Мотоцикл" Тогда				
				// У мотоцикла мощность в лошадиных силах и мощность в киловаттах хранится в ресурсе МощностьВКиловаттах.				
				Если СтрокаОтчета.ЕдиницаИзмеренияНалоговойБазы = "251" Тогда // Лошадиные силы
					СтрокаТабЗначРасшифровка.Параметр = НСтр("ru = 'Мощность (лошадиные силы)'");	
				ИначеЕсли СтрокаОтчета.ЕдиницаИзмеренияНалоговойБазы = "214" Тогда // Киловатты
					СтрокаТабЗначРасшифровка.Параметр = НСтр("ru = 'Мощность (киловатты)'");	
				Иначе
					ВызватьИсключение НСтр("ru = 'Некорректное значение ресурса ""Ед. изм. налоговой базы"".'");	
				КонецЕсли;
			Иначе
				СтрокаТабЗначРасшифровка.Параметр = ИмяРеквизита;	
			КонецЕсли;
			
			// Для легковых автомобилей рассчитываем размер превышения
			СуммаПревышения = 0;
			Если СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛегковойАвтомобиль Тогда				
				
				РазмерПревышения = ПолучитьРазмерПревышенияПоОбъему(СтрокаОтчета.ВидТранспортногоСредства, ЗначениеПоказателя, СтруктураСтавокНалога, Префикс);
				СуммаПревышения = РазмерПревышения*7;
				
				Если РазмерПревышения <> 0 Тогда
					СтрокаТабЗначРасшифровка = ТабЗначРасшифровка.Добавить();
					СтрокаТабЗначРасшифровка.ОС = СтрокаОтчета.ОбъектНалогообложения;
					СтрокаТабЗначРасшифровка.Параметр = "Превышение по V";
					СтрокаТабЗначРасшифровка.Значение = РазмерПревышения;
					СтрокаТабЗначРасшифровка.Ставка = 7;
					СтрокаТабЗначРасшифровка.Сумма = СуммаПревышения;
				КонецЕсли;
				
			КонецЕсли;
			
			ОбщаяСуммаНалога = СуммаНалога + СуммаПревышения;
			
			
			
			////////////////////////////////////////////////////////////////////////////
			// Поправочный коэффициент.	
			РазмерКорректировки = ПолучитьРазмерКорректировки(СтрокаОтчета.ВидТранспортногоСредства, СтрокаОтчета, СтруктураСтавокНалога);
			СуммаСУчетомКорректировки = ОбщаяСуммаНалога * РазмерКорректировки;
			
			Если РазмерКорректировки <> 1 Тогда
				СтрокаТабЗначРасшифровка = ТабЗначРасшифровка.Добавить();
				СтрокаТабЗначРасшифровка.ОС = СтрокаОтчета.ОбъектНалогообложения;
				СтрокаТабЗначРасшифровка.Параметр = "Поправочный коэффициент";
				СтрокаТабЗначРасшифровка.Значение = РазмерКорректировки;
				СтрокаТабЗначРасшифровка.Ставка = "";
				СтрокаТабЗначРасшифровка.Сумма = ОбщаяСуммаНалога - СуммаСУчетомКорректировки;
			КонецЕсли;
			
			ОбщаяСуммаНалога = Окр(СуммаСУчетомКорректировки*СтрокаОтчета.КоличествоМесяцев/12,0);
			
			
			
			////////////////////////////////////////////////////////////////////////////
			// Расчет общей суммы налога.
			СтруктураС.Вставить(СтрокаОтчета.ОбъектНалогообложения,ОбщаяСуммаНалога);
			Всего = Всего + ОбщаяСуммаНалога;
			
			
			
			////////////////////////////////////////////////////////////////////////////
			// Дополнительные действия для формирования расшифровки.
			СтрокаТабЗначРасшифровка = ТабЗначРасшифровка.Добавить();
			СтрокаТабЗначРасшифровка.ОС = СтрокаОтчета.ОбъектНалогообложения;
			СтрокаТабЗначРасшифровка.Параметр = "Количество месяцев использования";
			СтрокаТабЗначРасшифровка.Значение = СтрокаОтчета.КоличествоМесяцев;
			СтрокаТабЗначРасшифровка.Ставка = "";
			СтрокаТабЗначРасшифровка.Сумма = 0;
			СтрокаТабЗначРасшифровка.Итого = ОбщаяСуммаНалога;
			
		КонецЕсли;
		
	КонецЦикла;
	
	АдресТаблицыРасшифровки = ПоместитьВоВременноеХранилище(ТабЗначРасшифровка, ЭтаФорма.УникальныйИдентификатор);
	
	Возврат АдресТаблицыРасшифровки;
	
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ЗначениеРеквизита)
											
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ЗначениеРеквизита);										
											
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗаголовокОтражениеВУчете(ДокументОтражения)
	
	Если ЗначениеЗаполнено(ДокументОтражения) Тогда
		Возврат НСТР("ru = 'Открыть документ отражения в учете'");
	Иначе
		Возврат НСТР("ru = 'Ввести документ отражения в учете'");
	КонецЕсли;
	
КонецФункции // ПолучитьЗаголовокОтражениеВУчете()
