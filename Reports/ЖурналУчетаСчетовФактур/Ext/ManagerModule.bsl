#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура СформироватьОтчет(Знач ПараметрыОтчета, АдресХранилища) Экспорт
	
	Результат = Новый ТабличныйДокумент;
	
	Если ПараметрыОтчета.КомандаОтчета = "СформироватьОтчет" Тогда
		СформироватьЖурналСчетовФактур(Результат, ПараметрыОтчета);
	ИначеЕсли ПараметрыОтчета.КомандаОтчета = "Проверить" Тогда 
	    СформироватьОтчетОПроверке(Результат, ПараметрыОтчета);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Новый Структура("Результат", Результат), АдресХранилища);
	
КонецПроцедуры

Процедура ПерезаполнитьСчетаФактуры(Знач ПараметрыОтчета, АдресХранилища) Экспорт
	
	ВыборкаСчетовФактур  = ПолучитьДанныеДляПерезаполнения(ПараметрыОтчета);
	
	Если ВыборкаСчетовФактур = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФлагОшибок = Ложь;
	НачатьТранзакцию();
	Пока ВыборкаСчетовФактур.Следующий() Цикл
		
		Если ВыборкаСчетовФактур.ПометкаУдаления Тогда
			ТекстСообщения = НСтр("ru='Документ: %1 помечен на удаление. Его обработка производится не будет ....'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СокрЛП(ВыборкаСчетовФактур.СчетФактура));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		Если НЕ ВыборкаСчетовФактур.ПодтвержденДокументамиОтгрузки Тогда
			ТекстСообщения = НСтр("ru='Документ: %1 не подтвержден документами отгрузки. Его обработка производится не будет ....'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СокрЛП(ВыборкаСчетовФактур.СчетФактура));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;  
		Если ВыборкаСчетовФактур.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный И НЕ ЗначениеЗаполнено(ВыборкаСчетовФактур.ОсновнойСчетФактура) Тогда 
			ТекстСообщения = НСтр("ru='В документе: %1 не указан основной счёт-фактура. Его обработка производится не будет ....'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СокрЛП(ВыборкаСчетовФактур.СчетФактура));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
			
		ОбъектСчетаФактуры = ВыборкаСчетовФактур.СчетФактура.ПолучитьОбъект();
		УчетНДСИАкциза.ПерезаполнитьСчетФактуру(ОбъектСчетаФактуры, Неопределено, ПараметрыОтчета.ВидСчетаФактуры, ФлагОшибок, Истина);		
		
	КонецЦикла;
	
	Если НЕ ФлагОшибок Тогда
		//ЗафиксироватьТранзакцию();
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Перезаполнение счетов-фактур выполнено.'"));
	Иначе
		//ОтменитьТранзакцию();
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Перезаполнение счетов-фактур НЕ выполнено.'"));
	КонецЕсли;
	
	Если АдресХранилища <> Неопределено Тогда
		Сообщения = ПолучитьСообщенияПользователю();
		ПоместитьВоВременноеХранилище(Сообщения, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СформироватьЖурналСчетовФактур(ТабличныйДокумент, ПараметрыОтчета)
	
	ВидСчетаФактуры = ПараметрыОтчета.ВидСчетаФактуры;
	
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	Макет = ПолучитьМакет("Макет" + ВидСчетаФактуры);

	// Вывод шапки	
	Секция =  Макет.ПолучитьОбласть("Шапка|ОбластьОтчета");
	
	Секция.Параметры.НачалоПериода = Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy");
	Секция.Параметры.КонецПериода  = Формат(ПараметрыОтчета.КонецПериода, "ДФ=dd.MM.yyyy");
	Секция.Параметры.НазваниеОрганизации = ПараметрыОтчета.ПредставлениеСпискаОрганизаций;
	
	ТабличныйДокумент.Вывести(Секция);
	
	Если ПараметрыОтчета.ОтображатьДоговора Тогда
		ДопСекция =  Макет.ПолучитьОбласть("Шапка|ОбластьДоговора");
		ТабличныйДокумент.Присоединить(ДопСекция);
	КонецЕсли;    
	
	Если ПараметрыОтчета.ОтображатьКомментарий Тогда
		ДопСекция =  Макет.ПолучитьОбласть("Шапка|ОбластьКомментария");
		ТабличныйДокумент.Присоединить(ДопСекция);
	КонецЕсли;
	
	//выводим шапку таблицы	
	СекцияШапкаТаблицы =  Макет.ПолучитьОбласть("ШапкаТаблицы|ОбластьОтчета");	
	
	// именуем область для возможности повтора шапки таблицы при печати
	СекцияШапкаТаблицы.Область("R1:R3").Имя = "ШапкаТаблицы";
	
	ТабличныйДокумент.Вывести(СекцияШапкаТаблицы);
	
	Если ПараметрыОтчета.ОтображатьДоговора Тогда
		ДопСекция =  Макет.ПолучитьОбласть("ШапкаТаблицы|ОбластьДоговора");
		ТабличныйДокумент.Присоединить(ДопСекция);
	КонецЕсли;    
	
	Если ПараметрыОтчета.ОтображатьКомментарий Тогда
		ДопСекция =  Макет.ПолучитьОбласть("ШапкаТаблицы|ОбластьКомментария");
		ТабличныйДокумент.Присоединить(ДопСекция);
	КонецЕсли;
	
	// Выполнение запроса.
	Если ВидСчетаФактуры = "СчетФактураПолученный" Тогда
		Результат = ПодготовитьОтчетПоСчетФактураПолученный(ПараметрыОтчета);
	Иначе
		Результат = ПодготовитьОтчетПоСчетФактураВыданный(ПараметрыОтчета);
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
	СекцияДоп    = Макет.ПолучитьОбласть("ДопСтрока|ОбластьОтчета");
	Итог         = Макет.ПолучитьОбласть("Итог|ОбластьОтчета");
	
	СекцияДопКом      = Макет.ПолучитьОбласть("ДопСтрока|ОбластьКомментария");
	СекцияДопДоговора = Макет.ПолучитьОбласть("ДопСтрока|ОбластьДоговора");
	
	ИтогКом      = Макет.ПолучитьОбласть("Итог|ОбластьКомментария");
	ИтогДоговора = Макет.ПолучитьОбласть("Итог|ОбластьКомментария");
	
	Если Результат.Пустой() Тогда
		
		Секция = Макет.ПолучитьОбласть("Строка|ОбластьОтчета");		
        ТабличныйДокумент.Вывести(Секция);
		
		Если ПараметрыОтчета.ОтображатьДоговора тогда
			СекцияДоговора = Макет.ПолучитьОбласть("Строка|ОбластьДоговора");		
			ТабличныйДокумент.Присоединить(СекцияДоговора);
		КонецЕсли;
		Если ПараметрыОтчета.ОтображатьКомментарий Тогда
			СекцияКом      = Макет.ПолучитьОбласть("Строка|ОбластьКомментария");
			ТабличныйДокумент.Присоединить(СекцияКом);
		КонецЕсли;
				
	    Возврат;
		
	КонецЕсли; 
	
	Секция 	= Макет.ПолучитьОбласть("Строка|ОбластьОтчета");
	СекцияДоговора = Макет.ПолучитьОбласть("Строка|ОбластьДоговора");
	СекцияКом      = Макет.ПолучитьОбласть("Строка|ОбластьКомментария");

	Счетчик = 1;
	
	ЗначенияИтогов = Новый Структура("ИтогоСуммаБезНДС, ИтогоСуммаНДС, ИтогоСуммаАкциза, ИтогоСумма", 0, 0, 0, 0);
	
	Если ПараметрыОтчета.ГруппироватьПоСпособуВыписки Тогда
		Если ВидСчетаФактуры = "СчетФактураПолученный" Тогда
			СекцияСпособВыписки = Макет.ПолучитьОбласть("СпособВыписки|ОбластьОтчета");
		Иначе
			СекцияСпособВыписки = ?(ПараметрыОтчета.ОтображатьКомментарий, Макет.ПолучитьОбласть("СпособВыписки"), Макет.ПолучитьОбласть("СпособВыписки|ОбластьОтчета"));
		КонецЕсли
	КонецЕсли;
	
	Если  ПараметрыОтчета.ГруппироватьПоКонтрагентам Тогда
		//Режим построения с группировкой по контрагенту
		Если ВидСчетаФактуры = "СчетФактураПолученный" Тогда
			СекцияКонтрагента = Макет.ПолучитьОбласть("Контрагент|ОбластьОтчета");
		Иначе
			СекцияКонтрагента = ?(ПараметрыОтчета.ОтображатьКомментарий, Макет.ПолучитьОбласть("Контрагент"), Макет.ПолучитьОбласть("Контрагент|ОбластьОтчета"));
		КонецЕсли;

		ГруппировкаПоКонтрагенту = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
		Пока ГруппировкаПоКонтрагенту.Следующий() Цикл
			
			Если ВидСчетаФактуры = "СчетФактураПолученный" Тогда
				СекцияКонтрагента.Параметры.КонтрагентНаименование = ГруппировкаПоКонтрагенту.ПоставщикНаименование;
				СекцияКонтрагента.Параметры.Контрагент			   = ГруппировкаПоКонтрагенту.Поставщик;
			Иначе
				СекцияКонтрагента.Параметры.КонтрагентНаименование = ГруппировкаПоКонтрагенту.ПокупательНаименование;
				СекцияКонтрагента.Параметры.Контрагент			   = ГруппировкаПоКонтрагенту.Покупатель;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(СекцияКонтрагента,1);
			ТабличныйДокумент.НачатьГруппуСтрок();
			
			Если ВидСчетаФактуры = "СчетФактураПолученный" Тогда
				Если ПараметрыОтчета.ОтображатьДоговора тогда
					СекцияКонтрагентаДоговор  =  Макет.ПолучитьОбласть("Контрагент|ОбластьДоговора");
					ТабличныйДокумент.Присоединить(СекцияКонтрагентаДоговор,1);
				КонецЕсли;
				Если ПараметрыОтчета.ОтображатьКомментарий Тогда
					СекцияКонтрагентаКом      = Макет.ПолучитьОбласть("Контрагент|ОбластьКомментария");
					ТабличныйДокумент.Присоединить(СекцияКонтрагентаКом,1);
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыОтчета.ГруппироватьПоСпособуВыписки Тогда
				
				ГруппировкаСпособВыписки = ГруппировкаПоКонтрагенту.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ГруппировкаСпособВыписки.Следующий() Цикл

					СекцияСпособВыписки.Параметры.СпособВыписки = ГруппировкаСпособВыписки.СпособВыписки;
					ТабличныйДокумент.Вывести(СекцияСпособВыписки, 1);
					ТабличныйДокумент.НачатьГруппуСтрок();
					
					Документ = ГруппировкаСпособВыписки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока Документ.Следующий() Цикл
						Секция.Параметры.Заполнить(Документ);
						ВыводСтроки(ТабличныйДокумент, Документ, Секция, СекцияДоговора, СекцияКом, СекцияДоп, СекцияДопДоговора, СекцияДопКом, Счетчик, ВалютаРегламентированногоУчета, ПараметрыОтчета, ЗначенияИтогов);
					КонецЦикла; 
					ТабличныйДокумент.ЗакончитьГруппуСтрок();
				КонецЦикла;
				
			Иначе
				
				Документ = ГруппировкаПоКонтрагенту.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока Документ.Следующий() Цикл
					Секция.Параметры.Заполнить(Документ);
					ВыводСтроки(ТабличныйДокумент, Документ, Секция, СекцияДоговора, СекцияКом, СекцияДоп, СекцияДопДоговора, СекцияДопКом, Счетчик, ВалютаРегламентированногоУчета, ПараметрыОтчета, ЗначенияИтогов);
				КонецЦикла; 
				
			КонецЕсли;
			
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			
		КонецЦикла; 
		
	Иначе
		
		Если ПараметрыОтчета.ГруппироватьПоСпособуВыписки Тогда
			
			ГруппировкаСпособВыписки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ГруппировкаСпособВыписки.Следующий() Цикл
				
				СекцияСпособВыписки.Параметры.СпособВыписки = ГруппировкаСпособВыписки.СпособВыписки;
				ТабличныйДокумент.Вывести(СекцияСпособВыписки, 1);
				ТабличныйДокумент.НачатьГруппуСтрок();
				
				Документ = ГруппировкаСпособВыписки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока Документ.Следующий() Цикл
					Секция.Параметры.Заполнить(Документ);
					ВыводСтроки(ТабличныйДокумент, Документ, Секция, СекцияДоговора, СекцияКом, СекцияДоп, СекцияДопДоговора, СекцияДопКом, Счетчик, ВалютаРегламентированногоУчета, ПараметрыОтчета, ЗначенияИтогов);
				КонецЦикла; 
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
			КонецЦикла;
			
		Иначе
			
			// Простой режим
			Документ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока Документ.Следующий() Цикл
				Секция.Параметры.Заполнить(Документ);
				ВыводСтроки(ТабличныйДокумент, Документ, Секция, СекцияДоговора, СекцияКом, СекцияДоп, СекцияДопДоговора, СекцияДопКом, Счетчик, ВалютаРегламентированногоУчета, ПараметрыОтчета, ЗначенияИтогов);
			КонецЦикла;      
		КонецЕсли;
	
	КонецЕсли;
	
	Итог.Параметры.ИтогоСуммаБезНДС = ЗначенияИтогов.ИтогоСуммаБезНДС;
	Итог.Параметры.ИтогоСуммаНДС    = ЗначенияИтогов.ИтогоСуммаНДС;
	Итог.Параметры.ИтогоСумма	    = ЗначенияИтогов.ИтогоСумма;
	Если ВидСчетаФактуры = "СчетФактураВыданный" Тогда
		Итог.Параметры.ИтогоСуммаАкциза = ЗначенияИтогов.ИтогоСуммаАкциза;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(Итог); 
	Если ПараметрыОтчета.ОтображатьДоговора Тогда
		ТабличныйДокумент.Присоединить(ИтогДоговора); 					
	КонецЕсли;
	
	Если ПараметрыОтчета.ОтображатьКомментарий Тогда				
		ТабличныйДокумент.Присоединить(ИтогКом);
	КонецЕсли;  	
	
	ИскомаяОрганизация = Неопределено;
	
	//выберм первую организацию в списке организаций
	Если ТипЗнч(ПараметрыОтчета.СписокСтруктурныхЕдиниц) = Тип("СписокЗначений") Тогда
		Если ПараметрыОтчета.СписокСтруктурныхЕдиниц.Количество() > 0 Тогда
			ИскомаяОрганизация = ПараметрыОтчета.СписокСтруктурныхЕдиниц[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если ИскомаяОрганизация = Неопределено Тогда
		ИскомаяОрганизация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;  	
	
	ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
	
	ОтветЛица = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(ИскомаяОрганизация, КонецДня(ПараметрыОтчета.КонецПериода), Пользователи.ТекущийПользователь().ФизЛицо);
	ОбластьПодписи.Параметры.Заполнить(ОтветЛица);
	ТабличныйДокумент.Вывести(ОбластьПодписи);
	
	ТабличныйДокумент.ПовторятьПриПечатиСтроки = ТабличныйДокумент.Области.ШапкаТаблицы;
	
КонецПроцедуры

Функция ПодготовитьОтчетПоСчетФактураПолученный(ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода", 	ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация", 	ПараметрыОтчета.СписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("Контрагент", 	ПараметрыОтчета.КонтрагентДляОтбора);
	
	ПризнакОтбораПоКонтрагенту = ПараметрыОтчета.ОтбиратьПоКонтрагенту И НЕ ПараметрыОтчета.КонтрагентДляОтбора = Справочники.Контрагенты.ПустаяСсылка();
		
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СписокСчетовФактурТекст = "";
	
	Если ПараметрыОтчета.ИсключатьПрекратившиеДействие Тогда
		СписокСчетовФактурТекст = СписокСчетовФактурТекст + "
	                          |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                          |	СчетаФактурыПрекратившиеДействиеСрезПоследних.СчетФактура.Ссылка КАК Ссылка
	                          |ПОМЕСТИТЬ ВТ_ПрекратившиеДействие
	                          |ИЗ
	                          |	РегистрСведений.СчетаФактурыПрекратившиеДействие.СрезПоследних(&КонецПериода,
	                          |                                                                СчетФактура.Организация В (&Организация)
	                          |                                                                И СчетФактура.Дата МЕЖДУ &НачалоПериода И &КонецПериода) КАК СчетаФактурыПрекратившиеДействиеСрезПоследних
	                          |;";		
	КонецЕсли;
	
	СписокСчетовФактурТекст = СписокСчетовФактурТекст + "
	                          |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                          |	СчетФактураПолученный.Ссылка,
							  |	СчетФактураПолученный.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
							  |	СчетФактураПолученный.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов
	                          |ПОМЕСТИТЬ СчетФактураПолученный
	                          |ИЗ
	                          |	Документ.СчетФактураПолученный КАК СчетФактураПолученный";
							  
	Если ПараметрыОтчета.ИсключатьПрекратившиеДействие Тогда
		СписокСчетовФактурТекст = СписокСчетовФактурТекст + "
	                          |	ЛЕВОЕ СОЕДИНЕНИЕ Документ.Сторнирование КАК Сторнирование
	                          |	ПО СчетФактураПолученный.Ссылка = Сторнирование.ДокументОснование
	                          |		И (НЕ Сторнирование.ПометкаУдаления)";
	КонецЕсли;
							  
	СписокСчетовФактурТекст = СписокСчетовФактурТекст + "
							  |ГДЕ
	                          |	СчетФактураПолученный.Проведен
	                          |	И СчетФактураПолученный.Организация В(&Организация)
	                          |	И СчетФактураПолученный.Дата МЕЖДУ &НачалоПериода И &КонецПериода " + ?(ПризнакОтбораПоКонтрагенту, " И (СчетФактураПолученный.Контрагент В ИЕРАРХИИ (&Контрагент) ИЛИ СчетФактураПолученный.Поставщик В ИЕРАРХИИ (&Контрагент))","");
							  
	Если ПараметрыОтчета.ИсключатьПрекратившиеДействие Тогда
		СписокСчетовФактурТекст = СписокСчетовФактурТекст + "
	                          |	И НЕ СчетФактураПолученный.Ссылка В(ВЫБРАТЬ ВТ_ПрекратившиеДействие.Ссылка ИЗ ВТ_ПрекратившиеДействие)
	                          |	И Сторнирование.Ссылка ЕСТЬ NULL";
	КонецЕсли;
	
	Запрос.Текст = СписокСчетовФактурТекст;
	Запрос.Выполнить();
	
	Запрос.Текст   =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                  |	ДанныеТЧ.Ссылка КАК СФ,
					  | ВЫБОР
					  |		КОГДА НЕ ЕСТЬNULL(ЭСФ.ДатаВыпискиНаБумажномНосителе, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
            		  |			ТОГДА ""Обоими способами""
        			  |		ИНАЧЕ ДанныеТЧ.Ссылка.СпособПолучения
			    	  |	КОНЕЦ КАК СпособВыписки,
	                  |	ДанныеТЧ.Ссылка.Дата КАК Дата,
	                  |	ДанныеТЧ.Ссылка.Номер КАК Номер,
	                  |	ДанныеТЧ.Ссылка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	                  |	ДанныеТЧ.Ссылка.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
					  |	ВЫБОР
					  |		КОГДА ДанныеТЧ.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Дополнительный)
					  |			ТОГДА ИСТИНА
					  |		ИНАЧЕ ЛОЖЬ
					  |	КОНЕЦ КАК Дополнительная,
	                  |	ДанныеТЧ.Ссылка.Контрагент КАК Контрагент,
					  |	ДанныеТЧ.Ссылка.Поставщик КАК Поставщик,					  
					  |	ДанныеТЧ.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	                  |	ДанныеТЧ.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	                  |	ДанныеТЧ.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	                  |	ДанныеТЧ.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	                  |	ДанныеТЧ.Ссылка.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	                  |	ВЫРАЗИТЬ(ДанныеТЧ.Ссылка.Комментарий КАК СТРОКА(250)) КАК Комментарий,
	                  |	ВЫБОР
	                  |		КОГДА ВЫРАЗИТЬ(ДанныеТЧ.Ссылка.Поставщик.НаименованиеПолное КАК СТРОКА(1000)) = """"
	                  |			ТОГДА ДанныеТЧ.Ссылка.Поставщик.Наименование
	                  |		ИНАЧЕ ВЫРАЗИТЬ(ДанныеТЧ.Ссылка.Поставщик.НаименованиеПолное КАК СТРОКА(1000))
	                  |	КОНЕЦ КАК ПоставщикНаименование,
	                  |	ЕСТЬNULL(ДанныеТЧ.СтавкаНДС, 0) КАК СтавкаНДС,
	                  |	ЕСТЬNULL(ДанныеТЧ.СуммаНДС, 0) КАК СуммаНДС,
	                  |	ВЫБОР
	                  |		КОГДА ДанныеТЧ.Ссылка.СуммаВключаетНДС
	                  |			ТОГДА ЕСТЬNULL(ДанныеТЧ.Сумма, 0)
	                  |		ИНАЧЕ ЕСТЬNULL(ДанныеТЧ.Сумма, 0) + ЕСТЬNULL(ДанныеТЧ.СуммаНДС, 0)
	                  |	КОНЕЦ КАК Сумма,
	                  |	ВЫБОР
	                  |		КОГДА ДанныеТЧ.Ссылка.СуммаВключаетНДС
	                  |			ТОГДА ЕСТЬNULL(ДанныеТЧ.Сумма, 0) - ЕСТЬNULL(ДанныеТЧ.СуммаНДС, 0)
	                  |		ИНАЧЕ ЕСТЬNULL(ДанныеТЧ.Сумма, 0)
	                  |	КОНЕЦ КАК СуммаБезНДС
	                  |ИЗ
	                  |	(ВЫБРАТЬ
	                  |		СУММА(ДанныеОснований.Сумма) КАК Сумма,
	                  |		ДанныеОснований.СтавкаНДС КАК СтавкаНДС,
	                  |		СУММА(ДанныеОснований.СуммаНДС) КАК СуммаНДС,
	                  |		СчетФактураПолученный.Ссылка КАК Ссылка
	                  |	ИЗ
					  |		СчетФактураПолученный КАК СчетФактураПолученный
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                  |			СчетФактураПолученныйТовары.СтавкаНДС КАК СтавкаНДС,
	                  |			СчетФактураПолученныйТовары.Сумма КАК Сумма,
	                  |			СчетФактураПолученныйТовары.СуммаНДС КАК СуммаНДС,
	                  |			СчетФактураПолученныйТовары.Ссылка КАК Ссылка
	                  |		ИЗ
	                  |			Документ.СчетФактураПолученный.Товары КАК СчетФактураПолученныйТовары
					  |		ГДЕ
	                  |			СчетФактураПолученныйТовары.Ссылка В (ВЫБРАТЬ СчетФактураПолученный.Ссылка ИЗ СчетФактураПолученный) 
	                  |		
	                  |		ОБЪЕДИНИТЬ ВСЕ
	                  |		
	                  |		ВЫБРАТЬ
	                  |			СчетФактураПолученныйУслуги.СтавкаНДС,
	                  |			СчетФактураПолученныйУслуги.Сумма,
	                  |			СчетФактураПолученныйУслуги.СуммаНДС,
	                  |			СчетФактураПолученныйУслуги.Ссылка
	                  |		ИЗ
	                  |			Документ.СчетФактураПолученный.Услуги КАК СчетФактураПолученныйУслуги
					  |		ГДЕ
	                  |			СчетФактураПолученныйУслуги.Ссылка В (ВЫБРАТЬ СчетФактураПолученный.Ссылка ИЗ СчетФактураПолученный)
	                  |		
	                  |		ОБЪЕДИНИТЬ ВСЕ
	                  |		
	                  |		ВЫБРАТЬ
	                  |			СчетФактураПолученныйОС.СтавкаНДС,
	                  |			СчетФактураПолученныйОС.Сумма,
	                  |			СчетФактураПолученныйОС.СуммаНДС,
	                  |			СчетФактураПолученныйОС.Ссылка
	                  |		ИЗ
	                  |			Документ.СчетФактураПолученный.ОС КАК СчетФактураПолученныйОС
					  |		ГДЕ
	                  |			СчетФактураПолученныйОС.Ссылка В (ВЫБРАТЬ СчетФактураПолученный.Ссылка ИЗ СчетФактураПолученный)
	                  |		
	                  |		ОБЪЕДИНИТЬ ВСЕ
	                  |		
	                  |		ВЫБРАТЬ
	                  |			СчетФактураПолученныйНМА.СтавкаНДС,
	                  |			СчетФактураПолученныйНМА.Сумма,
	                  |			СчетФактураПолученныйНМА.СуммаНДС,
	                  |			СчетФактураПолученныйНМА.Ссылка
	                  |		ИЗ
	                  |			Документ.СчетФактураПолученный.НМА КАК СчетФактураПолученныйНМА
					  |		ГДЕ
	                  |			СчетФактураПолученныйНМА.Ссылка В (ВЫБРАТЬ СчетФактураПолученный.Ссылка ИЗ СчетФактураПолученный)) КАК ДанныеОснований
	                  |	ПО СчетФактураПолученный.Ссылка = ДанныеОснований.Ссылка
	                  |	
	                  |	СГРУППИРОВАТЬ ПО
	                  |		ДанныеОснований.СтавкаНДС,
	                  |		СчетФактураПолученный.Ссылка) КАК ДанныеТЧ	                  
					  | ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ КАК ЭСФ
					  |		ПО ДанныеТЧ.Ссылка = ЭСФ.СчетФактура
					  |     И НЕ ЭСФ.ПометкаУдаления 
					  |
	                  |УПОРЯДОЧИТЬ ПО
	                  |	Дата,
	                  |	Номер
	                  |ИТОГИ
	                  |	СУММА(СуммаНДС),
	                  |	СУММА(Сумма),
	                  |	СУММА(СуммаБезНДС)
	                  |ПО
	                  |	ОБЩИЕ";
          	
	Если ПараметрыОтчета.ГруппироватьПоКонтрагентам Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОБЩИЕ", ?(ПараметрыОтчета.ГруппироватьПоСпособуВыписки, "Поставщик, СпособВыписки, СФ,СтавкаНДС", "Поставщик, СФ,СтавкаНДС"));
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО
		|ПоставщикНаименование, ");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОБЩИЕ", ?(ПараметрыОтчета.ГруппироватьПоСпособуВыписки, "СпособВыписки, СФ,СтавкаНДС",  "СФ,СтавкаНДС"));
	КонецЕсли; 
	
	Возврат Запрос.Выполнить();

КонецФункции

Функция ПодготовитьОтчетПоСчетФактураВыданный(ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("ПустойАкциз",   Справочники.СтавкиАкциза.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организации",   ПараметрыОтчета.СписокСтруктурныхЕдиниц);	
	Запрос.УстановитьПараметр("Контрагент",    ПараметрыОтчета.КонтрагентДляОтбора);
	
	ПризнакОтбораПоКонтрагенту = ПараметрыОтчета.ОтбиратьПоКонтрагенту И НЕ ПараметрыОтчета.КонтрагентДляОтбора = Справочники.Контрагенты.ПустаяСсылка();
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СписокСчетовФактурТекст = "";
	
	Если ПараметрыОтчета.ИсключатьПрекратившиеДействие Тогда
		СписокСчетовФактурТекст = СписокСчетовФактурТекст + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетаФактурыПрекратившиеДействиеСрезПоследних.СчетФактура.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ПрекратившиеДействие
		|ИЗ
		|	РегистрСведений.СчетаФактурыПрекратившиеДействие.СрезПоследних(&КонецПериода,
		|                                                                СчетФактура.Организация В (&Организации)
		|                                                                И СчетФактура.Дата МЕЖДУ &НачалоПериода И &КонецПериода) КАК СчетаФактурыПрекратившиеДействиеСрезПоследних
		|;";		
	КонецЕсли;
	
	СписокСчетовФактурТекст = СписокСчетовФактурТекст + "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	СчетФактураВыданный.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов
	|ПОМЕСТИТЬ СчетФактураВыданный
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный";
	
	Если ПараметрыОтчета.ИсключатьПрекратившиеДействие Тогда
		СписокСчетовФактурТекст = СписокСчетовФактурТекст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.Сторнирование КАК Сторнирование
		|	ПО СчетФактураВыданный.Ссылка = Сторнирование.ДокументОснование
		|		И (НЕ Сторнирование.ПометкаУдаления)";
	КонецЕсли;
	
	СписокСчетовФактурТекст = СписокСчетовФактурТекст + "
	|ГДЕ
	|	СчетФактураВыданный.Проведен
	|	И СчетФактураВыданный.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СчетФактураВыданный.Организация В (&Организации)" + ?(ПризнакОтбораПоКонтрагенту, " И (СчетФактураВыданный.Контрагент В ИЕРАРХИИ (&Контрагент) ИЛИ СчетФактураВыданный.Покупатель В ИЕРАРХИИ (&Контрагент))",""); 	                          
	
	Если ПараметрыОтчета.ИсключатьПрекратившиеДействие Тогда
		СписокСчетовФактурТекст = СписокСчетовФактурТекст + "
		|	И НЕ СчетФактураВыданный.Ссылка В(ВЫБРАТЬ ВТ_ПрекратившиеДействие.Ссылка ИЗ ВТ_ПрекратившиеДействие)
		|	И Сторнирование.Ссылка ЕСТЬ NULL";
	КонецЕсли;
	
	Запрос.Текст = СписокСчетовФактурТекст;
	Запрос.Выполнить();	
	
	Запрос.Текст   =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеТЧ.Ссылка КАК СФ,
	|	ДанныеТЧ.Ссылка.Дата КАК Дата,
	|	ДанныеТЧ.Ссылка.Номер КАК Номер,
	| 	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ЭСФ.ДатаВыпискиНаБумажномНосителе, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
    |			ТОГДА ""Обоими способами""
    |		ИНАЧЕ ДанныеТЧ.Ссылка.СпособВыставления
	|	КОНЕЦ КАК СпособВыписки,
	|	ВЫБОР
	|		КОГДА ДанныеТЧ.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Дополнительный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Дополнительная,
	|	ДанныеТЧ.Ссылка.Контрагент КАК Контрагент,
	|	ДанныеТЧ.Ссылка.Покупатель КАК Покупатель,
	|	ДанныеТЧ.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеТЧ.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ДанныеТЧ.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеТЧ.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ДанныеТЧ.Ссылка.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ВЫРАЗИТЬ(ДанныеТЧ.Ссылка.Комментарий КАК СТРОКА(250)) КАК Комментарий,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ДанныеТЧ.Ссылка.Покупатель.НаименованиеПолное КАК СТРОКА(1000)) = """"
	|			ТОГДА ДанныеТЧ.Ссылка.Покупатель.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(ДанныеТЧ.Ссылка.Покупатель.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК ПокупательНаименование,
	|	ЕСТЬNULL(ДанныеТЧ.СтавкаНДС, 0) КАК СтавкаНДС,
	|	ДанныеТЧ.СтавкаАкциза КАК СтавкаАкциза,
	|	ДанныеТЧ.СуммаНДС КАК СуммаНДС,
	|	ДанныеТЧ.СуммаАкциза КАК СуммаАкциза,
	|	ВЫБОР
	|		КОГДА ДанныеТЧ.Ссылка.УчитыватьНДС
	|				И ДанныеТЧ.Ссылка.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеТЧ.Ссылка.УчитыватьАкциз
	|							И ДанныеТЧ.Ссылка.СуммаВключаетАкциз
	|						ТОГДА ДанныеТЧ.Сумма - ДанныеТЧ.СуммаНДС
	|					ИНАЧЕ ДанныеТЧ.Сумма - ДанныеТЧ.СуммаНДС + ДанныеТЧ.СуммаАкциза
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДанныеТЧ.Ссылка.УчитыватьАкциз
	|						И ДанныеТЧ.Ссылка.СуммаВключаетАкциз
	|					ТОГДА ДанныеТЧ.Сумма
	|				ИНАЧЕ ДанныеТЧ.Сумма + ДанныеТЧ.СуммаАкциза
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА ДанныеТЧ.Ссылка.УчитыватьНДС
	|				И ДанныеТЧ.Ссылка.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеТЧ.Ссылка.УчитыватьАкциз
	|							И ДанныеТЧ.Ссылка.СуммаВключаетАкциз
	|						ТОГДА ДанныеТЧ.Сумма
	|					ИНАЧЕ ДанныеТЧ.Сумма + ДанныеТЧ.СуммаАкциза
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДанныеТЧ.Ссылка.УчитыватьАкциз
	|						И ДанныеТЧ.Ссылка.СуммаВключаетАкциз
	|					ТОГДА ДанныеТЧ.Сумма + ДанныеТЧ.СуммаНДС
	|				ИНАЧЕ ДанныеТЧ.Сумма + ДанныеТЧ.СуммаНДС + ДанныеТЧ.СуммаАкциза
	|			КОНЕЦ
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ЕСТЬNULL(ДанныеОснований.Сумма, 0)) КАК Сумма,
	|		ДанныеОснований.СтавкаНДС КАК СтавкаНДС,
	|		ВЫБОР
	|			КОГДА ДанныеОснований.СтавкаАкциза = &ПустойАкциз
	|					ИЛИ ДанныеОснований.СтавкаАкциза ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ДанныеОснований.СтавкаАкциза
	|		КОНЕЦ КАК СтавкаАкциза,
	|		СУММА(ЕСТЬNULL(ДанныеОснований.СуммаНДС, 0)) КАК СуммаНДС,
	|		СУММА(ЕСТЬNULL(ДанныеОснований.СуммаАкциза, 0)) КАК СуммаАкциза,
	|		СчетФактураВыданный.Ссылка КАК Ссылка
	|	ИЗ
	|		СчетФактураВыданный КАК СчетФактураВыданный
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СчетФактураВыданныйТовары.СтавкаНДС КАК СтавкаНДС,
	|			СчетФактураВыданныйТовары.СтавкаАкциза КАК СтавкаАкциза,
	|			СчетФактураВыданныйТовары.Сумма КАК Сумма,
	|			СчетФактураВыданныйТовары.СуммаНДС КАК СуммаНДС,
	|			СчетФактураВыданныйТовары.СуммаАкциза КАК СуммаАкциза,
	|			СчетФактураВыданныйТовары.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.СчетФактураВыданный.Товары КАК СчетФактураВыданныйТовары
	|		ГДЕ
	|			СчетФактураВыданныйТовары.Ссылка В (ВЫБРАТЬ СчетФактураВыданный.Ссылка ИЗ СчетФактураВыданный)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СчетФактураВыданныйУслуги.СтавкаНДС,
	|			0,
	|			СчетФактураВыданныйУслуги.Сумма,
	|			СчетФактураВыданныйУслуги.СуммаНДС,
	|			0,
	|			СчетФактураВыданныйУслуги.Ссылка
	|		ИЗ
	|			Документ.СчетФактураВыданный.Услуги КАК СчетФактураВыданныйУслуги
	|		ГДЕ
	|			СчетФактураВыданныйУслуги.Ссылка В (ВЫБРАТЬ СчетФактураВыданный.Ссылка ИЗ СчетФактураВыданный)					  
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СчетФактураВыданныйОС.СтавкаНДС,
	|			0,
	|			СчетФактураВыданныйОС.Сумма,
	|			СчетФактураВыданныйОС.СуммаНДС,
	|			0,
	|			СчетФактураВыданныйОС.Ссылка
	|		ИЗ
	|			Документ.СчетФактураВыданный.ОС КАК СчетФактураВыданныйОС
	|		ГДЕ
	|			СчетФактураВыданныйОС.Ссылка В (ВЫБРАТЬ СчетФактураВыданный.Ссылка ИЗ СчетФактураВыданный)					  					                                                                                                                              	                  
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СчетФактураВыданныйНМА.СтавкаНДС,
	|			0,
	|			СчетФактураВыданныйНМА.Сумма,
	|			СчетФактураВыданныйНМА.СуммаНДС,
	|			0,
	|			СчетФактураВыданныйНМА.Ссылка
	|		ИЗ
	|			Документ.СчетФактураВыданный.НМА КАК СчетФактураВыданныйНМА
	|		ГДЕ
	|			СчетФактураВыданныйНМА.Ссылка В (ВЫБРАТЬ СчетФактураВыданный.Ссылка ИЗ СчетФактураВыданный)) КАК ДанныеОснований
	|	ПО СчетФактураВыданный.Ссылка = ДанныеОснований.Ссылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СчетФактураВыданный.Ссылка,
	|		ДанныеОснований.СтавкаНДС,
	|		ВЫБОР
	|			КОГДА ДанныеОснований.СтавкаАкциза = &ПустойАкциз
	|					ИЛИ ДанныеОснований.СтавкаАкциза ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ДанныеОснований.СтавкаАкциза
	|		КОНЕЦ) КАК ДанныеТЧ	                  
	| ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ КАК ЭСФ
	|		ПО ДанныеТЧ.Ссылка = ЭСФ.СчетФактура
	|        И НЕ ЭСФ.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер
	|ИТОГИ
	|	СУММА(СуммаНДС),
	|	СУММА(СуммаАкциза),
	|	СУММА(СуммаБезНДС),
	|	СУММА(Сумма)
	|ПО
	|	ОБЩИЕ";
	
	Если ПараметрыОтчета.ГруппироватьПоКонтрагентам Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОБЩИЕ", ?(ПараметрыОтчета.ГруппироватьПоСпособуВыписки, "Покупатель, СпособВыписки, СФ,СтавкаНДС","Покупатель, СФ,СтавкаНДС"));
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО
						|ПокупательНаименование, ");
		
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОБЩИЕ", ?(ПараметрыОтчета.ГруппироватьПоСпособуВыписки, "СпособВыписки, СФ,СтавкаНДС", "СФ,СтавкаНДС"));
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция СформироватьСписокДокументовОснований(СчетФактура)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураДокументыОснования = Новый Структура("ПредставлениеСпискаОснований, СписокОснований");
	
	Если Не ЗначениеЗаполнено(СчетФактура) Тогда
		Возврат СтруктураДокументыОснования;
	КонецЕсли;
	
	НомерСтроки = 1;
	СписокДокументов = "";
	СписокОснований = Новый СписокЗначений;
	КоличествоСтрок = СчетФактура.ДокументыОснования.Количество();
	
	Для Каждого Основание Из СчетФактура.ДокументыОснования Цикл
		РасчетныйДокумент = Основание.ДокументОснование;
		РасчетныйДокументПредставление = "";			
		Если ЗначениеЗаполнено(Основание.ДокументОснование) Тогда
			
			РасчетныйДокументПредставление = РасчетныйДокумент.Метаданные().Синоним + " " 
											+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СокрЛП(РасчетныйДокумент.Номер), РасчетныйДокумент) + НСтр("ru = ' от '") 
											+ Формат(РасчетныйДокумент.Дата, "ДФ=dd.MM.yyyy");
											
		КонецЕсли;

		СписокДокументов = СписокДокументов + РасчетныйДокументПредставление + ?(НомерСтроки = КоличествоСтрок, "", ", ");
		СписокОснований.Добавить(Основание.ДокументОснование);
		НомерСтроки = НомерСтроки  + 1;
	КонецЦикла;
	
	СтруктураДокументыОснования.ПредставлениеСпискаОснований = СписокДокументов;
	СтруктураДокументыОснования.СписокОснований              = СписокОснований;
	
	Возврат СтруктураДокументыОснования;
		
КонецФункции

Процедура ВыводСтроки(ТабличныйДокумент, СтрокаДокумента, Секция, СекцияДоговора, СекцияКом, ДопСекция, ДопСекцияДоговора, ДопСекцияКом, НомерПП, ВалютаРегламентированногоУчета, ПараметрыОтчета, ЗначенияИтогов)

	ВидСчетаФактуры = ПараметрыОтчета.ВидСчетаФактуры;

	//группировка по документу Счет-фактура
	ВыборкаПоДокументамСФ = СтрокаДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	УстановитьПараметр = Истина;
	Пока ВыборкаПоДокументамСФ.Следующий() Цикл    				
			
		//по Ставке 		
		ВыборкаПоДокументамВРазрезеНДС = ВыборкаПоДокументамСФ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоДокументамВРазрезеНДС.Следующий() Цикл
			
			ДокументыОснования = СформироватьСписокДокументовОснований(ВыборкаПоДокументамВРазрезеНДС.СФ);
			
			ДокументОснование = ДокументыОснования.ПредставлениеСпискаОснований;
			СписокОснований   = ДокументыОснования.СписокОснований;
			
			Если УстановитьПараметр Тогда
				
				Секция.Параметры.СписокОснований = СписокОснований; 
				Секция.Параметры.СчетФактура     = ВыборкаПоДокументамВРазрезеНДС.СФ;
				
				Если ВидСчетаФактуры = "СчетФактураПолученный" Тогда
					
		            Секция.Параметры.НомерПоПорядку = НомерПП;
					
					Секция.Параметры.РасчетныйДокументПредставление = ДокументОснование; 
					Секция.Параметры.НомерДатаРегистрации = СокрЛП(ВыборкаПоДокументамВРазрезеНДС.Номер) + " / " + Формат(ВыборкаПоДокументамВРазрезеНДС.Дата, "ДФ=dd.MM.yy"); 
					Секция.Параметры.НомерДата			  = СокрЛП(ВыборкаПоДокументамВРазрезеНДС.НомерВходящегоДокумента) + " от " 
															+ Формат(ВыборкаПоДокументамВРазрезеНДС.ДатаВходящегоДокумента, "ДФ=dd.MM.yy");  
					
					СведенияОПоставщике = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ВыборкаПоДокументамВРазрезеНДС.Поставщик, ВыборкаПоДокументамВРазрезеНДС.ДатаВходящегоДокумента);									  
					
					Секция.Параметры.Поставщик			          = ВыборкаПоДокументамВРазрезеНДС.Поставщик;	
					Секция.Параметры.ПоставщикНаименование        = ВыборкаПоДокументамВРазрезеНДС.Поставщик.Наименование + ", " + ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
					Секция.Параметры.РННПоставщика                = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "РНН,", Ложь);
					Секция.Параметры.БИНПоставщика                = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "БИН_ИИН,", Ложь);
					Секция.Параметры.СвидетельствоПоНДСПоставщика = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "СвидетельствоПоНДС,");
					
					НомерПП = НомерПП + 1;
					
				Иначе
					
					Секция.Параметры.ДокументОтгрузки = ДокументОснование;

					Если ПараметрыОтчета.ВыводитьНомераБезНулейИПрефиксов Тогда					
						НомерСФ = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СокрЛП(ВыборкаПоДокументамВРазрезеНДС.Номер), ВыборкаПоДокументамВРазрезеНДС.СФ, Перечисления.ВидыПредставленийНомеровДокументов.БезПрефиксаБезНулей, Истина, Истина, ПрефиксацияОбъектовБКВызовСервера.СписокПрефиксовУзлов());
					Иначе
						НомерСФ = СокрЛП(ВыборкаПоДокументамВРазрезеНДС.Номер);
					КонецЕсли;
					
					Секция.Параметры.НомерПП = НомерПП;
					
					Секция.Параметры.Номер   = НомерСФ; 
					Секция.Параметры.Дата    = Формат(ВыборкаПоДокументамВРазрезеНДС.Дата, "ДФ=dd.MM.yy");  
					
					СведенияОПокупателе = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ВыборкаПоДокументамВРазрезеНДС.Покупатель, ВыборкаПоДокументамВРазрезеНДС.Дата);									  
					
					Секция.Параметры.Покупатель			    = ВыборкаПоДокументамВРазрезеНДС.Покупатель;	
					Секция.Параметры.ПокупательНаименование = ВыборкаПоДокументамВРазрезеНДС.Покупатель.Наименование + ", " + ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");
					Секция.Параметры.РННПокупателя 			= ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "РНН,", Ложь);
					Секция.Параметры.БИНПокупателя 			= ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "БИН_ИИН,", Ложь);
					
					НомерПП = НомерПП + 1;
					
				КонецЕсли;
				
				Секция.Параметры.СуммаБезНДС = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(ВыборкаПоДокументамВРазрезеНДС.СуммаБезНДС, ВыборкаПоДокументамВРазрезеНДС.ВалютаДокумента, ВалютаРегламентированногоУчета, 
					ВыборкаПоДокументамВРазрезеНДС.КурсВзаиморасчетов, 1, ВыборкаПоДокументамВРазрезеНДС.КратностьВзаиморасчетов, 1); 
				
				Секция.Параметры.СтавкаНДС   = ВыборкаПоДокументамВРазрезеНДС.СтавкаНДС;												 
				
				Секция.Параметры.СуммаНДС    = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(ВыборкаПоДокументамВРазрезеНДС.СуммаНДС, ВыборкаПоДокументамВРазрезеНДС.ВалютаДокумента, ВалютаРегламентированногоУчета, 
					ВыборкаПоДокументамВРазрезеНДС.КурсВзаиморасчетов, 1, ВыборкаПоДокументамВРазрезеНДС.КратностьВзаиморасчетов, 1); 
				
				Секция.Параметры.Сумма  	 = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(ВыборкаПоДокументамВРазрезеНДС.Сумма, ВыборкаПоДокументамВРазрезеНДС.ВалютаДокумента, ВалютаРегламентированногоУчета, 
					ВыборкаПоДокументамВРазрезеНДС.КурсВзаиморасчетов, 1, ВыборкаПоДокументамВРазрезеНДС.КратностьВзаиморасчетов, 1); 
				
				ЗначенияИтогов.ИтогоСуммаБезНДС = ЗначенияИтогов.ИтогоСуммаБезНДС + Секция.Параметры.СуммаБезНДС;
				ЗначенияИтогов.ИтогоСуммаНДС 	= ЗначенияИтогов.ИтогоСуммаНДС 	  + Секция.Параметры.СуммаНДС;
				ЗначенияИтогов.ИтогоСумма		= ЗначенияИтогов.ИтогоСумма		  + Секция.Параметры.Сумма;
				Если ВидСчетаФактуры = "СчетФактураВыданный" Тогда
					Секция.Параметры.СтавкаАкциза = ВыборкаПоДокументамВРазрезеНДС.СтавкаАкциза;												 
					Секция.Параметры.СуммаАкциза  = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(ВыборкаПоДокументамВРазрезеНДС.СуммаАкциза, ВыборкаПоДокументамВРазрезеНДС.ВалютаДокумента, ВалютаРегламентированногоУчета, 
						ВыборкаПоДокументамВРазрезеНДС.КурсВзаиморасчетов, 1, ВыборкаПоДокументамВРазрезеНДС.КратностьВзаиморасчетов, 1); 								
					ЗначенияИтогов.ИтогоСуммаАкциза = ЗначенияИтогов.ИтогоСуммаАкциза + Секция.Параметры.СуммаАкциза;
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(Секция,2);
				
				Если ПараметрыОтчета.ОтображатьДоговора Тогда
					СекцияДоговора.Параметры.ДоговорКонтрагента = ВыборкаПоДокументамВРазрезеНДС.ДоговорКонтрагента;
					ТабличныйДокумент.Присоединить(СекцияДоговора, 2); 					
				КонецЕсли;
				
				Если ПараметрыОтчета.ОтображатьКомментарий Тогда				
					СекцияКом.Параметры.Комментарий = ВыборкаПоДокументамВРазрезеНДС.Комментарий;
					ТабличныйДокумент.Присоединить(СекцияКом, 2);
				КонецЕсли;

			Иначе
				
				Если ВидСчетаФактуры = "СчетФактураПолученный" Тогда
					ДопСекция.Параметры.РасчетныйДокументПредставление = ДокументОснование;
				Иначе
					ДопСекция.Параметры.ДокументОтгрузки = ДокументОснование;
				КонецЕсли;
				
				ДопСекция.Параметры.СписокОснований = СписокОснований;
				
				ДопСекция.Параметры.СуммаБезНДС = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(ВыборкаПоДокументамВРазрезеНДС.СуммаБезНДС, ВыборкаПоДокументамВРазрезеНДС.ВалютаДокумента, ВалютаРегламентированногоУчета, 
					ВыборкаПоДокументамВРазрезеНДС.КурсВзаиморасчетов, 1, ВыборкаПоДокументамВРазрезеНДС.КратностьВзаиморасчетов, 1); 
				
				ДопСекция.Параметры.СтавкаНДС   = ВыборкаПоДокументамВРазрезеНДС.СтавкаНДС;												 
				
				ДопСекция.Параметры.СуммаНДС    = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(ВыборкаПоДокументамВРазрезеНДС.СуммаНДС, ВыборкаПоДокументамВРазрезеНДС.ВалютаДокумента, ВалютаРегламентированногоУчета, 
					ВыборкаПоДокументамВРазрезеНДС.КурсВзаиморасчетов, 1, ВыборкаПоДокументамВРазрезеНДС.КратностьВзаиморасчетов, 1); 
				
				ДопСекция.Параметры.Сумма  	 	= ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(ВыборкаПоДокументамВРазрезеНДС.Сумма, ВыборкаПоДокументамВРазрезеНДС.ВалютаДокумента, ВалютаРегламентированногоУчета, 
					ВыборкаПоДокументамВРазрезеНДС.КурсВзаиморасчетов, 1, ВыборкаПоДокументамВРазрезеНДС.КратностьВзаиморасчетов, 1); 
				
				ЗначенияИтогов.ИтогоСуммаБезНДС  = ЗначенияИтогов.ИтогоСуммаБезНДС + ДопСекция.Параметры.СуммаБезНДС;
				ЗначенияИтогов.ИтогоСуммаНДС 	 = ЗначенияИтогов.ИтогоСуммаНДС    + ДопСекция.Параметры.СуммаНДС;
				ЗначенияИтогов.ИтогоСумма		 = ЗначенияИтогов.ИтогоСумма       + ДопСекция.Параметры.Сумма;
				Если ВидСчетаФактуры = "СчетФактураВыданный" Тогда
					ДопСекция.Параметры.СтавкаАкциза = ВыборкаПоДокументамВРазрезеНДС.СтавкаАкциза;												 
					ДопСекция.Параметры.СуммаАкциза  = ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(ВыборкаПоДокументамВРазрезеНДС.СуммаАкциза, ВыборкаПоДокументамВРазрезеНДС.ВалютаДокумента, ВалютаРегламентированногоУчета, 
						ВыборкаПоДокументамВРазрезеНДС.КурсВзаиморасчетов, 1, ВыборкаПоДокументамВРазрезеНДС.КратностьВзаиморасчетов, 1); 								
					ЗначенияИтогов.ИтогоСуммаАкциза = ЗначенияИтогов.ИтогоСуммаАкциза + ДопСекция.Параметры.СуммаАкциза;
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ДопСекция,2);	
				
				Если ПараметрыОтчета.ОтображатьДоговора Тогда
					ТабличныйДокумент.Присоединить(ДопСекцияДоговора, 2); 					
				КонецЕсли;
				
				Если ПараметрыОтчета.ОтображатьКомментарий Тогда				
					ТабличныйДокумент.Присоединить(ДопСекцияКом, 2);
				КонецЕсли;  
				
			КонецЕсли;
			УстановитьПараметр = Ложь;
		КонецЦикла;					
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьОтчетОПроверке(ТабличныйДокумент, ПараметрыОтчета)
	
	ТабДокумент = ТабличныйДокумент;
	ТабДокумент.Очистить();
	Макет  = ПолучитьМакет("МакетПроверки");
	
	ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
	ОбластьОшибокНеВыявлено = Макет.ПолучитьОбласть("ОшибокНеВыявлено");
	
	ОбластьШапкаСоответствияРеквизитов 	= Макет.ПолучитьОбласть("ШапкаСоответствияРеквизитов");
	ОбластьСтрокаСоответствияРеквизитов = Макет.ПолучитьОбласть("СтрокаСоответствияРеквизитов");	
	ОбластьИтогиСоответствияРеквизитов  = Макет.ПолучитьОбласть("ИтогиСоответствияРеквизитов");
	
	ОбластьШапкаСоответствияСумм 			   = Макет.ПолучитьОбласть("ШапкаСоответствияСумм");
	ОбластьСтрокаСсылкаСоответствияСумм 	   = Макет.ПолучитьОбласть("СтрокаСсылкаСоответствияСумм");
	ОбластьСтрокаРегистраторСоответствияСумм   = Макет.ПолучитьОбласть("СтрокаРегистраторСоответствияСумм");
	ОбластьИтогиСоответствияСумм               = Макет.ПолучитьОбласть("ИтогиСоответствияСумм");
	
	ОбластьШапка.Параметры.НазваниеОрганизации = ПараметрыОтчета.ПредставлениеСпискаОрганизаций;
	ОбластьШапка.Параметры.Дата1 = Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.Дата2 = Формат(ПараметрыОтчета.КонецПериода, "ДФ=dd.MM.yyyy");
	
	ОбластьШапка.Параметры.ВидСчетаФактуры = ?(ПараметрыОтчета.ВидСчетаФактуры = "СчетФактураВыданный", НСтр("ru = 'выданных'"), НСтр("ru = 'полученных'"));
	
	ТабДокумент.Вывести(ОбластьШапка);
	
	// Проверка Наличия выписанных счетов фактур
	ТаблицаРезультат = УчетНДСИАкциза.ОпределитьНаличиеСчетовФактур(?(НЕ ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода), Неопределено, ПараметрыОтчета.НачалоПериода), 
		?(НЕ ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода), Неопределено, КонецДня(ПараметрыОтчета.КонецПериода)),
		?(ПараметрыОтчета.СписокСтруктурныхЕдиниц.Количество() = 0, Неопределено, ПараметрыОтчета.СписокСтруктурныхЕдиниц),
		Неопределено, Ложь, Неопределено, ПараметрыОтчета.ВидСчетаФактуры);

	Если ТаблицаРезультат.Количество() > 0 Тогда
		ТабДокумент.НачатьАвтоГруппировкуСтрок();
		ТабДокумент.Вывести(ОбластьШапкаСоответствияРеквизитов,0);
		
		// Выведем строки таблицы.
		Номер = 0;
		Для Каждого СтрокаРезультат Из ТаблицаРезультат Цикл
			// не проведенные документы не отражаем
			Если НЕ СтрокаРезультат.СчетФактураПроведен Тогда
				Продолжить;
			КонецЕсли;					
			СчетФактура = СтрокаРезультат.СчетФактура;
			Нарушение = "";
			КонтрагентНаименование = "";
			ДокументОснование  = ?(ТипЗнч(СтрокаРезультат.ДокументОснование) = Тип("ДокументСсылка.Сторнирование"), СтрокаРезультат.ДокументОснование.ДокументОснование, СтрокаРезультат.ДокументОснование);
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				// проверка соответствия реквизитов
				МетаданныеОснования = ДокументОснование.Метаданные();
				
				Если ЗначениеЗаполнено(СчетФактура) И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Организация", МетаданныеОснования) Тогда
					ОрганизацияОснования = ДокументОснование.Организация;
					Если НЕ ОрганизацияОснования = СчетФактура.Организация Тогда
						Нарушение = Нарушение + "Несоответствие организации. ";
					КонецЕсли;					
				КонецЕсли;
				
				Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("Контрагент", МетаданныеОснования) Тогда
					КонтрагентОснования = ДокументОснование.Контрагент;
					КонтрагентНаименование = СокрЛП(КонтрагентОснования.Наименование);
					// Отбор по конрагенту, тольк при наличии реквизита метаданных
					Если ПараметрыОтчета.ОтбиратьПоКонтрагенту
						И НЕ КонтрагентОснования = ПараметрыОтчета.КонтрагентДляОтбора
						И НЕ УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(КонтрагентОснования) = ПараметрыОтчета.КонтрагентДляОтбора Тогда
						Продолжить;
					КонецЕсли;	
					
					Если ЗначениеЗаполнено(СчетФактура) И НЕ КонтрагентОснования = СчетФактура.Контрагент Тогда
						Нарушение = Нарушение + "Несоответствие контрагентов. ";
					КонецЕсли;					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СчетФактура) И ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеОснования) Тогда
					ВалютаОснования  = ДокументОснование.ВалютаДокумента;
					Если НЕ ВалютаОснования = СчетФактура.ВалютаДокумента Тогда
						Нарушение = Нарушение + "Несоответствие валюты. ";
					КонецЕсли;					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СчетФактура) Тогда
					Нарушение = Нарушение + "Отсутствует счет-фактура. ";
				Иначе
					Если НЕ СтрокаРезультат.СчетФактураПроведен = ИСТИНА Тогда
						Нарушение = Нарушение + "Счет-фактура не проведен.";
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;    
			
			Если Не ЗначениеЗаполнено(Нарушение) Тогда
				Продолжить;
			КонецЕсли;
			Номер = Номер+ 1;
			
			ОбластьСтрокаСоответствияРеквизитов.Параметры.Заполнить(СтрокаРезультат);
			ОбластьСтрокаСоответствияРеквизитов.Параметры.Нарушение = Нарушение;
			ОбластьСтрокаСоответствияРеквизитов.Параметры.КонтрагентНаименование = КонтрагентНаименование;
			ОбластьСтрокаСоответствияРеквизитов.Параметры.Дата = СтрокаРезультат.ДокументОснование.Дата;
			
			ОбластьСтрокаСоответствияРеквизитов.Параметры.Номер = Номер;
			ТабДокумент.Вывести(ОбластьСтрокаСоответствияРеквизитов,1);	
			
		КонецЦикла;		
		ОбластьИтогиСоответствияРеквизитов.Параметры.Номер = Номер;
		ТабДокумент.Вывести(ОбластьИтогиСоответствияРеквизитов,0);	
	Иначе		
		ТабДокумент.Вывести(ОбластьОшибокНеВыявлено,0);				
	КонецЕсли;
	ТабДокумент.ЗакончитьАвтоГруппировкуСтрок();
	
	// Второй этап проверки
	ТабДокумент.НачатьАвтоГруппировкуСтрок();
	
	ТабДокумент.Вывести(ОбластьШапкаСоответствияСумм, 0);
	
	РезультатПроверкиСумм = ПроверитьСоответствиеСуммСчетовФактурИДокументовОтгрузки(ПараметрыОтчета);
	
	Если НЕ РезультатПроверкиСумм.Пустой() Тогда
		
		ИтогоСуммаНДС 				= 0;
		ИтогоСуммаНДСОтгрузки	 	= 0;		
		ИтогоСуммаБезНДС			= 0;
		ИтогоСуммаБезНДСОтгрузки	= 0;		
		
		ВыборкаСсылка = РезультатПроверкиСумм.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСсылка.Следующий() Цикл
			СуммаНДСОтклонение = ВыборкаСсылка.СуммаНДС - ВыборкаСсылка.СуммаНДСОтгрузки;
			СуммаБезНДСОтклонение = ВыборкаСсылка.СуммаБезНДС - ВыборкаСсылка.СуммаБезНДСОтгрузки;
			Если СуммаНДСОтклонение = 0 И СуммаБезНДСОтклонение  = 0 Тогда 
				Продолжить
			КонецЕсли;
			
			ОбластьСтрокаСсылкаСоответствияСумм.Параметры.Заполнить(ВыборкаСсылка);
			
			ОбластьСтрокаСсылкаСоответствияСумм.Параметры.СуммаНДСОтклонение = СуммаНДСОтклонение;
			ОбластьСтрокаСсылкаСоответствияСумм.Параметры.СуммаБезНДСОтклонение = СуммаБезНДСОтклонение;
			ТабДокумент.Вывести(ОбластьСтрокаСсылкаСоответствияСумм, 1);				
			// Итоги на уровне счета фактуры
			ИтогоСуммаНДС 				= ИтогоСуммаНДС + ВыборкаСсылка.СуммаНДС;
			ИтогоСуммаНДСОтгрузки	 	= ИтогоСуммаНДСОтгрузки + ВыборкаСсылка.СуммаНДСОтгрузки;
			
			ИтогоСуммаБезНДС			= ИтогоСуммаБезНДС + ВыборкаСсылка.СуммаБезНДС;
			ИтогоСуммаБезНДСОтгрузки	= ИтогоСуммаБезНДСОтгрузки + ВыборкаСсылка.СуммаБезНДСОтгрузки;			
			
			// Детали по документам отгрузки
			ВыборкаРегистратор = ВыборкаСсылка.Выбрать();
			Пока ВыборкаРегистратор.Следующий() Цикл
				ОбластьСтрокаРегистраторСоответствияСумм.Параметры.Заполнить(ВыборкаРегистратор);
				ТабДокумент.Вывести(ОбластьСтрокаРегистраторСоответствияСумм, 2);							
			КонецЦикла;
		КонецЦикла;
		ТабДокумент.ЗакончитьАвтоГруппировкуСтрок();
		
		ОбластьИтогиСоответствияСумм.Параметры.СуммаНДС 			= ИтогоСуммаНДС;
		ОбластьИтогиСоответствияСумм.Параметры.СуммаНДСОтгрузки 	= ИтогоСуммаНДСОтгрузки;
		ОбластьИтогиСоответствияСумм.Параметры.СуммаНДСОтклонение 	= ИтогоСуммаНДС - ИтогоСуммаНДСОтгрузки;
		
		ОбластьИтогиСоответствияСумм.Параметры.СуммаБезНДС 			 = ИтогоСуммаБезНДС;
		ОбластьИтогиСоответствияСумм.Параметры.СуммаБезНДСОтгрузки 	 = ИтогоСуммаБезНДСОтгрузки;
		ОбластьИтогиСоответствияСумм.Параметры.СуммаБезНДСОтклонение = ИтогоСуммаБезНДС - ИтогоСуммаБезНДСОтгрузки;
		
		ТабДокумент.Вывести(ОбластьИтогиСоответствияСумм);						
	Иначе
		ТабДокумент.Вывести(ОбластьОшибокНеВыявлено);				
	КонецЕсли;
	
	ТабДокумент.ПоказатьУровеньГруппировокСтрок(0);

КонецПроцедуры

// Функция формирует исходный запрос для очетности подсистемы НДС
// Возвращаемое значение - результат запроса
Функция ПроверитьСоответствиеСуммСчетовФактурИДокументовОтгрузки(ПараметрыОтчета)
	
	ВидСчетаФактуры = ПараметрыОтчета.ВидСчетаФактуры;
	
	Если ВидСчетаФактуры = "СчетФактураВыданный" Тогда
		ПокупательПоставщик = "Покупатель";
	Иначе
		ПокупательПоставщик = "Поставщик";
	КонецЕсли;
	
	Контрагент = ?(ПараметрыОтчета.ОтбиратьПоКонтрагенту, ПараметрыОтчета.КонтрагентДляОтбора, Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата", 		ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонДата", 		КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация", 	ПараметрыОтчета.СписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("Контрагент", 	Контрагент);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СписокСчетовФактурТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                          |	СчетФактура.Ссылка,
							  |	СчетФактура.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
							  |	СчетФактура.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов
	                          |ПОМЕСТИТЬ " + ВидСчетаФактуры + "
	                          |ИЗ
	                          |	Документ." + ВидСчетаФактуры + " КАК СчетФактура
	                          |ГДЕ
	                          |	СчетФактура.Дата МЕЖДУ &НачДата И &КонДата
	                          |	И СчетФактура.Проведен
	                          |	И СчетФактура.Организация В(&Организация)
	                          |	И СчетФактура.ПодтвержденДокументамиОтгрузки " + ?(НЕ Контрагент = Неопределено, "И (СчетФактура.Контрагент = &Контрагент ИЛИ СчетФактура." + ПокупательПоставщик + " = &Контрагент)", "") ;
							  
	Запрос.Текст = СписокСчетовФактурТекст;
	Запрос.Выполнить();
	
	Если ВидСчетаФактуры = "СчетФактураВыданный" Тогда
		ТекстЗапросаДанныеСчетовФактур = ПолучитьТекстЗапросаДанныеСчетовФактурВыданных();
	Иначе
		ТекстЗапросаДанныеСчетовФактур = ПолучитьТекстЗапросаДанныеСчетовФактурПолученных();
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаДанныеСчетовФактур;
				   
	Результат = Запрос.Выполнить();	
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТекстЗапросаДанныеСчетовФактурВыданных()
	
	ТекстЗапросаДанныеСчетовФактур =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеСчетовФактур.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ДанныеРегистраторов.Регистратор, ""<Отсутствует>"") КАК Регистратор,
		|	ДанныеСчетовФактур.СуммаНДС КАК СуммаНДС,
		|	ДанныеСчетовФактур.СуммаБезНДС КАК СуммаБезНДС,
		|	ЕСТЬNULL(ДанныеРегистраторов.СуммаНДС, 0) КАК СуммаНДСОтгрузки,
		|	ЕСТЬNULL(ДанныеРегистраторов.СуммаБезНДС, 0) КАК СуммаБезНДСОтгрузки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДанныеСчетовФактур.Ссылка КАК Ссылка,
		|		ВЫРАЗИТЬ(СУММА(ДанныеСчетовФактур.СуммаНДС) * ДанныеСчетовФактур.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА ДанныеСчетовФактур.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ ДанныеСчетовФактур.КратностьВзаиморасчетов
		|			КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
		|		ВЫРАЗИТЬ(СУММА(ДанныеСчетовФактур.СуммаБезНДС) * ДанныеСчетовФактур.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА ДанныеСчетовФактур.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ ДанныеСчетовФактур.КратностьВзаиморасчетов
		|			КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаБезНДС
		|	ИЗ
		|		(ВЫБРАТЬ
		|			СчетФактураВыданный.Ссылка КАК Ссылка,
		|			СчетФактураВыданный.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|			СчетФактураВыданный.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|			ЕСТЬNULL(ДанныеСчетовФактур.СуммаАкциза, 0) КАК СуммаАкциза,
		|			ЕСТЬNULL(ДанныеСчетовФактур.СуммаНДС, 0) КАК СуммаНДС,
		|			ЕСТЬNULL(ДанныеСчетовФактур.СуммаБезНалогов, 0) КАК СуммаБезНДС
		|		ИЗ
		|			СчетФактураВыданный КАК СчетФактураВыданный
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					СчетФактураТовары.Ссылка КАК Ссылка,
		|					СчетФактураТовары.СуммаАкциза КАК СуммаАкциза,
		|					СчетФактураТовары.СуммаНДС КАК СуммаНДС,
		|					СчетФактураТовары.Сумма - ВЫБОР
		|						КОГДА СчетФактураТовары.Ссылка.СуммаВключаетНДС
		|							ТОГДА СчетФактураТовары.СуммаНДС
		|						ИНАЧЕ 0
		|					КОНЕЦ + ВЫБОР
		|						КОГДА НЕ СчетФактураТовары.Ссылка.СуммаВключаетАкциз
		|							ТОГДА СчетФактураТовары.СуммаАкциза
		|						ИНАЧЕ 0
		|					КОНЕЦ КАК СуммаБезНалогов
		|				ИЗ
		|					Документ.СчетФактураВыданный.Товары КАК СчетФактураТовары
		|				ГДЕ
		|					СчетФактураТовары.Ссылка В
		|							(ВЫБРАТЬ
		|								СчетФактураВыданный.Ссылка
		|							ИЗ
		|								СчетФактураВыданный)
		|				
		|				ОБЪЕДИНИТЬ ВСЕ
		|				
		|				ВЫБРАТЬ
		|					СчетФактураУслуги.Ссылка,
		|					0,
		|					СчетФактураУслуги.СуммаНДС,
		|					СчетФактураУслуги.Сумма - ВЫБОР
		|						КОГДА СчетФактураУслуги.Ссылка.СуммаВключаетНДС
		|							ТОГДА СчетФактураУслуги.СуммаНДС
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|				ИЗ
		|					Документ.СчетФактураВыданный.Услуги КАК СчетФактураУслуги
		|				ГДЕ
		|					СчетФактураУслуги.Ссылка В
		|							(ВЫБРАТЬ
		|								СчетФактураВыданный.Ссылка
		|							ИЗ
		|								СчетФактураВыданный)
		|				
		|				ОБЪЕДИНИТЬ ВСЕ
		|				
		|				ВЫБРАТЬ
		|					СчетФактураОС.Ссылка,
		|					0,
		|					СчетФактураОС.СуммаНДС,
		|					СчетФактураОС.Сумма - ВЫБОР
		|						КОГДА СчетФактураОС.Ссылка.СуммаВключаетНДС
		|							ТОГДА СчетФактураОС.СуммаНДС
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|				ИЗ
		|					Документ.СчетФактураВыданный.ОС КАК СчетФактураОС
		|				ГДЕ
		|					СчетФактураОС.Ссылка В
		|							(ВЫБРАТЬ
		|								СчетФактураВыданный.Ссылка
		|							ИЗ
		|								СчетФактураВыданный)
		|				
		|				ОБЪЕДИНИТЬ ВСЕ
		|				
		|				ВЫБРАТЬ
		|					СчетФактураНМА.Ссылка,
		|					0,
		|					СчетФактураНМА.СуммаНДС,
		|					СчетФактураНМА.Сумма - ВЫБОР
		|						КОГДА СчетФактураНМА.Ссылка.СуммаВключаетНДС
		|							ТОГДА СчетФактураНМА.СуммаНДС
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|				ИЗ
		|					Документ.СчетФактураВыданный.НМА КАК СчетФактураНМА
		|				ГДЕ
		|					СчетФактураНМА.Ссылка В
		|							(ВЫБРАТЬ
		|								СчетФактураВыданный.Ссылка
		|							ИЗ
		|								СчетФактураВыданный)) КАК ДанныеСчетовФактур
		|				ПО СчетФактураВыданный.Ссылка = ДанныеСчетовФактур.Ссылка) КАК ДанныеСчетовФактур
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ДанныеСчетовФактур.Ссылка,
		|		ДанныеСчетовФактур.КурсВзаиморасчетов,
		|		ДанныеСчетовФактур.КратностьВзаиморасчетов) КАК ДанныеСчетовФактур
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДанныеРегистраторов.Регистратор КАК Регистратор,
		|			ДанныеРегистраторов.СуммаБезНДС КАК СуммаБезНДС,
		|			ДанныеРегистраторов.ОборотПоРеализации КАК ОборотПоРеализации,
		|			ДанныеРегистраторов.СуммаНДС КАК СуммаНДС,
		|			СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактура,
		|			СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументРегистратор
		|		ИЗ
		|			(ВЫБРАТЬ
		|				СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
		|				СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
		|			ИЗ
		|				Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|			ГДЕ
		|				СчетФактураВыданныйДокументыОснования.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
		|				И СчетФактураВыданныйДокументыОснования.Ссылка.Организация В(&Организация)
		|				И СчетФактураВыданныйДокументыОснования.Ссылка.ПодтвержденДокументамиОтгрузки) КАК СчетФактураВыданныйДокументыОснования
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					НДС.Регистратор КАК Регистратор,
		|					СУММА(НДС.СуммаБезНДС) КАК СуммаБезНДС,
		|					СУММА(НДС.ОборотПоРеализации) КАК ОборотПоРеализации,
		|					СУММА(НДС.СуммаНДС) КАК СуммаНДС
		|				ИЗ
		|					РегистрНакопления.НДС КАК НДС
		|				ГДЕ
		|					НДС.Период >= &НачДата
		|					И НДС.Организация В(&Организация)
		|				
		|				СГРУППИРОВАТЬ ПО
		|					НДС.Регистратор
		|				
		|				ОБЪЕДИНИТЬ ВСЕ
		|				
		|				ВЫБРАТЬ
		|					КорректировкаНДС.Регистратор,
		|					СУММА(КорректировкаНДС.СуммаКорректировкиОборота),
		|					СУММА(КорректировкаНДС.СуммаКорректировкиОборота),
		|					СУММА(КорректировкаНДС.СуммаНДС)
		|				ИЗ
		|					РегистрНакопления.КорректировкаНДС КАК КорректировкаНДС
		|				ГДЕ
		|					КорректировкаНДС.Период >= &НачДата
		|					И КорректировкаНДС.Организация В(&Организация)
		|				
		|				СГРУППИРОВАТЬ ПО
		|					КорректировкаНДС.Регистратор) КАК ДанныеРегистраторов
		|				ПО (ДанныеРегистраторов.Регистратор = СчетФактураВыданныйДокументыОснования.ДокументОснование)) КАК ДанныеРегистраторов
		|		ПО (ДанныеРегистраторов.СчетФактура = ДанныеСчетовФактур.Ссылка)
		|ГДЕ
		|	(ЕСТЬNULL(ДанныеРегистраторов.СуммаБезНДС, 0) <> ДанныеСчетовФактур.СуммаБезНДС
		|			ИЛИ ЕСТЬNULL(ДанныеРегистраторов.СуммаНДС, 0) <> ДанныеСчетовФактур.СуммаНДС)
		|ИТОГИ
		|	МАКСИМУМ(СуммаНДС),
		|	МАКСИМУМ(СуммаБезНДС),
		|	СУММА(СуммаНДСОтгрузки),
		|	СУММА(СуммаБезНДСОтгрузки)
		|ПО
		|	Ссылка";
	
	Возврат ТекстЗапросаДанныеСчетовФактур;
	
КонецФункции		

Функция ПолучитьТекстЗапросаДанныеСчетовФактурПолученных()
	
	ТекстЗапросаДанныеСчетовФактур =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеСчетовФактур.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ДанныеРегистраторов.Регистратор, ""<Отсутствует>"") КАК Регистратор,
		|	ДанныеСчетовФактур.СуммаНДС КАК СуммаНДС,
		|	ДанныеСчетовФактур.СуммаБезНДС КАК СуммаБезНДС,
		|	ЕСТЬNULL(ДанныеРегистраторов.СуммаНДС, 0) КАК СуммаНДСОтгрузки,
		|	ЕСТЬNULL(ДанныеРегистраторов.СуммаБезНДС, 0) КАК СуммаБезНДСОтгрузки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДанныеСчетовФактур.Ссылка КАК Ссылка,
		|		ВЫРАЗИТЬ(СУММА(ДанныеСчетовФактур.СуммаНДС) * ДанныеСчетовФактур.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА ДанныеСчетовФактур.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ ДанныеСчетовФактур.КратностьВзаиморасчетов
		|			КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
		|		ВЫРАЗИТЬ(СУММА(ДанныеСчетовФактур.СуммаБезНДС) * ДанныеСчетовФактур.КурсВзаиморасчетов / ВЫБОР
		|				КОГДА ДанныеСчетовФактур.КратностьВзаиморасчетов = 0
		|					ТОГДА 1
		|				ИНАЧЕ ДанныеСчетовФактур.КратностьВзаиморасчетов
		|			КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаБезНДС
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ДанныеСчетовФактур.Ссылка КАК Ссылка,
		|			ДанныеСчетовФактур.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|			ДанныеСчетовФактур.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|			ЕСТЬNULL(ДанныеСчетовФактур.СуммаНДС, 0) КАК СуммаНДС,
		|			ЕСТЬNULL(ДанныеСчетовФактур.СуммаБезНДС, 0) КАК СуммаБезНДС
		|		ИЗ
		|			(ВЫБРАТЬ
		|				СчетФактураПолученный.Ссылка КАК Ссылка,
		|				СчетФактураПолученный.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|				СчетФактураПолученный.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|				ДанныеСчетовФактур.СуммаНДС КАК СуммаНДС,
		|				ДанныеСчетовФактур.СуммаБезНалогов КАК СуммаБезНДС
		|			ИЗ
		|				СчетФактураПолученный КАК СчетФактураПолученный
		|					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|						СчетФактураТовары.Ссылка КАК Ссылка,
		|						СчетФактураТовары.СуммаНДС КАК СуммаНДС,
		|						СчетФактураТовары.Сумма - ВЫБОР
		|							КОГДА СчетФактураТовары.Ссылка.СуммаВключаетНДС
		|								ТОГДА СчетФактураТовары.СуммаНДС
		|							ИНАЧЕ 0
		|						КОНЕЦ КАК СуммаБезНалогов
		|					ИЗ
		|						Документ.СчетФактураПолученный.Товары КАК СчетФактураТовары
		|					ГДЕ
		|						СчетФактураТовары.Ссылка В
		|								(ВЫБРАТЬ
		|									СчетФактураПолученный.Ссылка
		|								ИЗ
		|									СчетФактураПолученный)
		|					
		|					ОБЪЕДИНИТЬ ВСЕ
		|					
		|					ВЫБРАТЬ
		|						СчетФактураУслуги.Ссылка,
		|						СчетФактураУслуги.СуммаНДС,
		|						СчетФактураУслуги.Сумма - ВЫБОР
		|							КОГДА СчетФактураУслуги.Ссылка.СуммаВключаетНДС
		|								ТОГДА СчетФактураУслуги.СуммаНДС
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|					ИЗ
		|						Документ.СчетФактураПолученный.Услуги КАК СчетФактураУслуги
		|					ГДЕ
		|						СчетФактураУслуги.Ссылка В
		|								(ВЫБРАТЬ
		|									СчетФактураПолученный.Ссылка
		|								ИЗ
		|									СчетФактураПолученный)
		|					
		|					ОБЪЕДИНИТЬ ВСЕ
		|					
		|					ВЫБРАТЬ
		|						СчетФактураОС.Ссылка,
		|						СчетФактураОС.СуммаНДС,
		|						СчетФактураОС.Сумма - ВЫБОР
		|							КОГДА СчетФактураОС.Ссылка.СуммаВключаетНДС
		|								ТОГДА СчетФактураОС.СуммаНДС
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|					ИЗ
		|						Документ.СчетФактураПолученный.ОС КАК СчетФактураОС
		|					ГДЕ
		|						СчетФактураОС.Ссылка В
		|								(ВЫБРАТЬ
		|									СчетФактураПолученный.Ссылка
		|								ИЗ
		|									СчетФактураПолученный)
		|					
		|					ОБЪЕДИНИТЬ ВСЕ
		|					
		|					ВЫБРАТЬ
		|						СчетФактураНМА.Ссылка,
		|						СчетФактураНМА.СуммаНДС,
		|						СчетФактураНМА.Сумма - ВЫБОР
		|							КОГДА СчетФактураНМА.Ссылка.СуммаВключаетНДС
		|								ТОГДА СчетФактураНМА.СуммаНДС
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|					ИЗ
		|						Документ.СчетФактураПолученный.НМА КАК СчетФактураНМА
		|					ГДЕ
		|						СчетФактураНМА.Ссылка В
		|								(ВЫБРАТЬ
		|									СчетФактураПолученный.Ссылка
		|								ИЗ
		|									СчетФактураПолученный)) КАК ДанныеСчетовФактур
		|					ПО (ДанныеСчетовФактур.Ссылка = СчетФактураПолученный.Ссылка)) КАК ДанныеСчетовФактур) КАК ДанныеСчетовФактур
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ДанныеСчетовФактур.Ссылка,
		|		ДанныеСчетовФактур.КурсВзаиморасчетов,
		|		ДанныеСчетовФактур.КратностьВзаиморасчетов) КАК ДанныеСчетовФактур
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДанныеРегистраторов.Регистратор КАК Регистратор,
		|			ДанныеРегистраторов.СуммаБезНДС КАК СуммаБезНДС,
		|			ДанныеРегистраторов.СуммаНДС КАК СуммаНДС,
		|			СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактура,
		|			СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументРегистратор
		|		ИЗ
		|			(ВЫБРАТЬ
		|				СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
		|				СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
		|			ИЗ
		|				Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|			ГДЕ
		|				СчетФактураВыданныйДокументыОснования.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
		|				И СчетФактураВыданныйДокументыОснования.Ссылка.Организация В(&Организация)
		|				И СчетФактураВыданныйДокументыОснования.Ссылка.ПодтвержденДокументамиОтгрузки) КАК СчетФактураВыданныйДокументыОснования
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					НДС.Регистратор КАК Регистратор,
		|					НДС.СчетФактура КАК СчетФактураСтроки,
		|					СУММА(НДС.СуммаБезНДС) КАК СуммаБезНДС,
		|					СУММА(НДС.УплаченныйНДС) КАК СуммаНДС
		|				ИЗ
		|					РегистрНакопления.НДСКВозмещению КАК НДС
		|				ГДЕ
		|					НДС.Период >= &НачДата
		|					И НДС.Организация В(&Организация)
		|				
		|				СГРУППИРОВАТЬ ПО
		|					НДС.Регистратор,
		|					НДС.СчетФактура
		|				
		|				ОБЪЕДИНИТЬ ВСЕ
		|				
		|				ВЫБРАТЬ
		|					КорректировкаНДС.Регистратор,
		|					NULL,
		|					СУММА(КорректировкаНДС.СуммаКорректировкиОборота),
		|					СУММА(КорректировкаНДС.УплаченныйНДС)
		|				ИЗ
		|					РегистрНакопления.КорректировкаНДСКВозмещению КАК КорректировкаНДС
		|				ГДЕ
		|					КорректировкаНДС.Период >= &НачДата
		|					И КорректировкаНДС.Организация В(&Организация)
		|				
		|				СГРУППИРОВАТЬ ПО
		|					КорректировкаНДС.Регистратор) КАК ДанныеРегистраторов
		|				ПО (ДанныеРегистраторов.Регистратор = СчетФактураВыданныйДокументыОснования.ДокументОснование)
		|					И (НЕ ДанныеРегистраторов.Регистратор ССЫЛКА Документ.АвансовыйОтчет
		|						ИЛИ ДанныеРегистраторов.СчетФактураСтроки = СчетФактураВыданныйДокументыОснования.Ссылка)) КАК ДанныеРегистраторов
		|		ПО (ДанныеРегистраторов.СчетФактура = ДанныеСчетовФактур.Ссылка)
		|ГДЕ
		|	(ЕСТЬNULL(ДанныеРегистраторов.СуммаБезНДС, 0) <> ДанныеСчетовФактур.СуммаБезНДС
		|			ИЛИ ЕСТЬNULL(ДанныеРегистраторов.СуммаНДС, 0) <> ДанныеСчетовФактур.СуммаНДС)
		|ИТОГИ
		|	МАКСИМУМ(СуммаНДС),
		|	МАКСИМУМ(СуммаБезНДС),
		|	СУММА(СуммаНДСОтгрузки),
		|	СУММА(СуммаБезНДСОтгрузки)
		|ПО
		|	Ссылка";
	
	Возврат ТекстЗапросаДанныеСчетовФактур;
	
КонецФункции		

Функция ПолучитьДанныеДляПерезаполнения(ПараметрыОтчета)
	
	ВидСчетаФактуры = ПараметрыОтчета.ВидСчетаФактуры;
	
	Если ВидСчетаФактуры = "СчетФактураВыданный" Тогда
		ПокупательПоставщик = "Покупатель";
	Иначе
		ПокупательПоставщик = "Поставщик";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", 	ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", 	КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организации", 	ПараметрыОтчета.СписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("Контрагент", 	ПараметрыОтчета.КонтрагентДляОтбора);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СчетФактура.Ссылка Как СчетФактура,
	               |	СчетФактура.ПометкаУдаления,
	               |	СчетФактура.ПодтвержденДокументамиОтгрузки,
				   |	СчетФактура.ОсновнойСчетФактура КАК ОсновнойСчетФактура,
				   |	СчетФактура.ВидСчетаФактуры КАК ВидСчетаФактуры
				   |ИЗ
	               |	Документ." + ВидСчетаФактуры + " КАК СчетФактура
	               |ГДЕ
	               |	СчетФактура.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
				   |	И СчетФактура.Организация В (&Организации) " + ?(НЕ ПараметрыОтчета.КонтрагентДляОтбора.Пустая(), "И (СчетФактура.Контрагент В Иерархии(&Контрагент) ИЛИ СчетФактура." + ПокупательПоставщик + " В Иерархии(&Контрагент))", "");			   
				   
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат.Выбрать();
	КонецЕсли;
	
КонецФункции


#КонецЕсли