#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки",
							Истина, Истина, Истина, Истина);
							
КонецФункции

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	//НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("ПервоначальнаяСтоимость");
	НаборПоказателей.Добавить("СтоимостьДляВычисленияАмортизации");
	НаборПоказателей.Добавить("СтоимостьНачальныйОстаток");
	НаборПоказателей.Добавить("АмортизацияНачальныйОстаток");
	НаборПоказателей.Добавить("ОстаточнаяСтоимостьНач");
	НаборПоказателей.Добавить("СтоимостьОборотДт");
	НаборПоказателей.Добавить("АмортизацияОборот");
	НаборПоказателей.Добавить("СтоимостьОборотКт");
	НаборПоказателей.Добавить("СтоимостьНаКонецПериода");
	НаборПоказателей.Добавить("АмортизацияКонечныйОстаток");
	НаборПоказателей.Добавить("ОстаточнаяСтоимость");
	
	Возврат НаборПоказателей;
	
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт
	
	ЗаголовокОтчета = НСтр("ru = 'Ведомость амортизации НМА %1'");
	ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ЗаголовокОтчета, БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода));
	
	Возврат ЗаголовокОтчета;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ДатаНачала",         НачалоДня(ПараметрыОтчета.НачалоПериода));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачГраница", Новый Граница(НачалоДня(ПараметрыОтчета.НачалоПериода), ВидГраницы.Исключая));
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачГраница", Дата(1,1,1,0,0,1));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ДатаОкончания", КонецДня(ПараметрыОтчета.КонецПериода));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонГраница", Новый Граница(КонецДня(ПараметрыОтчета.КонецПериода)));
	КонецЕсли;
	
	БухгалтерскиеОтчеты.ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, ПараметрыОтчета);
	
	Структура = КомпоновщикНастроек.Настройки;
	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			Если ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		КонецЕсли;
	КонецЦикла;
	
	ГруппаПоказатели = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаПоказатели.Заголовок     = НСтр("ru = 'Показатели'");
	ГруппаПоказатели.Использование = Истина;
	ГруппаПоказатели.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	ГруппаПервоначальнаяСтоимость = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаПервоначальнаяСтоимость.Заголовок     = "";//"Первоначальная cтоимость";
	ГруппаПервоначальнаяСтоимость.Использование = Истина;
	ГруппаПервоначальнаяСтоимость.Расположение  = РасположениеПоляКомпоновкиДанных.Горизонтально;
	
	ГруппаСтоимостьДляВычисленияАмортизации = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСтоимостьДляВычисленияАмортизации.Заголовок     = "";//"Первоначальная cтоимость";
	ГруппаСтоимостьДляВычисленияАмортизации.Использование = Истина;
	ГруппаСтоимостьДляВычисленияАмортизации.Расположение  = РасположениеПоляКомпоновкиДанных.Горизонтально;
	
	//На начало периода
	ГруппаДанныеНаНачало = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаНачало.Заголовок     = НСтр("ru = 'На начало периода'");
	ГруппаДанныеНаНачало.Использование = Истина;
	ГруппаДанныеНаНачалоСтоимость = ГруппаДанныеНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаНачалоСтоимость.Заголовок     = НСтр("ru = 'Стоимость'");
	ГруппаДанныеНаНачалоСтоимость.Использование = Истина;
	ГруппаДанныеНаНачалоСтоимость.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаДанныеНаНачалоАмортизация = ГруппаДанныеНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаНачалоАмортизация.Заголовок     = НСтр("ru = 'Амортизация (износ)'");
	ГруппаДанныеНаНачалоАмортизация.Использование = Истина;
	ГруппаДанныеНаНачалоАмортизация.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаДанныеНаНачалоОстаточнаяСтоимость = ГруппаДанныеНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаНачалоОстаточнаяСтоимость.Заголовок     = НСтр("ru = 'Остаточная стоимость'");
	ГруппаДанныеНаНачалоОстаточнаяСтоимость.Использование = Истина;
	ГруппаДанныеНаНачалоОстаточнаяСтоимость.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	//За период
	ГруппаОбороты = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОбороты.Заголовок     = НСтр("ru = 'За период'");
	ГруппаОбороты.Использование = Истина;
	ГруппаУвеличениеСтоимости = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаУвеличениеСтоимости.Заголовок     = НСтр("ru = 'Увеличение стоимости'");
	ГруппаУвеличениеСтоимости.Использование = Истина;
	ГруппаУвеличениеСтоимости.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаНачислениеАмортизации = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаНачислениеАмортизации.Заголовок     = НСтр("ru = 'Начисление амортизации (износа)'");
	ГруппаНачислениеАмортизации.Использование = Истина;
	ГруппаНачислениеАмортизации.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаУменьшениеСтоимости = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаУменьшениеСтоимости.Заголовок     = НСтр("ru = 'Уменьшение стоимости'");
	ГруппаУменьшениеСтоимости.Использование = Истина;
	ГруппаУменьшениеСтоимости.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	//На конец периода	
	ГруппаДанныеНаКонец = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаКонец.Заголовок     = НСтр("ru = 'На конец периода'");
	ГруппаДанныеНаКонец.Использование = Истина;
	ГруппаДанныеНаКонецСтоимость = ГруппаДанныеНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаКонецСтоимость.Заголовок     = НСтр("ru = 'Стоимость'");
	ГруппаДанныеНаКонецСтоимость.Использование = Истина;
	ГруппаДанныеНаКонецСтоимость.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаДанныеНаКонецАмортизация = ГруппаДанныеНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаКонецАмортизация.Заголовок     = НСтр("ru = 'Амортизация (износ)'");
	ГруппаДанныеНаКонецАмортизация.Использование = Истина;
	ГруппаДанныеНаКонецАмортизация.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаДанныеНаКонецОстаточнаяСтоимость = ГруппаДанныеНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаКонецОстаточнаяСтоимость.Заголовок     = НСтр("ru = 'Остаточная стоимость'");
	ГруппаДанныеНаКонецОстаточнаяСтоимость.Использование = Истина;
	ГруппаДанныеНаКонецОстаточнаяСтоимость.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	ГруппаНематериальныйАктив = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаНематериальныйАктив.Заголовок     = "";
	ГруппаНематериальныйАктив.Использование = Истина;
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаНематериальныйАктив, "НематериальныйАктив");
	
	Если КомпоновщикНастроек.Настройки.Порядок.Элементы.Количество() = 0 Тогда
		ЭлементПорядка = КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));		
		ЭлементПорядка.Поле  = Новый  ПолеКомпоновкиДанных("НематериальныйАктив");
		ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;		
	КонецЕсли;	
	
    КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));

	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек, ГруппаНематериальныйАктив);
	
	Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПоказатели,                        	      "ПоказательБУ");
	
	Если ПараметрыОтчета.ПоказательПервоначальнаяСтоимость Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПервоначальнаяСтоимость,              "ПервоначальнаяСтоимость");
	КонецЕсли;
	
	Если ПараметрыОтчета.ПоказательСтоимостьДляВычисленияАмортизации Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСтоимостьДляВычисленияАмортизации,    "СтоимостьДляВычисленияАмортизации");
	КонецЕсли;
	
	//На начало периода
	Если ПараметрыОтчета.ПоказательСтоимостьНачальныйОстаток Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДанныеНаНачалоСтоимость,              "НаНачалоПериода.СтоимостьНачальныйОстаток");
	КонецЕсли;
    Если ПараметрыОтчета.ПоказательАмортизацияНачальныйОстаток Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДанныеНаНачалоАмортизация,            "НаНачалоПериода.АмортизацияНачальныйОстаток");
	КонецЕсли;
    Если ПараметрыОтчета.ПоказательОстаточнаяСтоимостьНач Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДанныеНаНачалоОстаточнаяСтоимость,    "НаНачалоПериода.ОстаточнаяСтоимостьНач");
	КонецЕсли;

	//За период
	Если ПараметрыОтчета.ПоказательСтоимостьОборотДт Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаУвеличениеСтоимости,                  "ЗаПериод.СтоимостьОборотДт");
	КонецЕсли;
	Если ПараметрыОтчета.ПоказательАмортизацияОборот Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаНачислениеАмортизации,                "ЗаПериод.АмортизацияОборот");
	КонецЕсли;
	Если ПараметрыОтчета.ПоказательСтоимостьОборотКт Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаУменьшениеСтоимости,                  "ЗаПериод.СтоимостьОборотКт");
	КонецЕсли;

	//На конец периода
	Если ПараметрыОтчета.ПоказательСтоимостьНаКонецПериода Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецСтоимость,               "НаКонецПериода.СтоимостьКонечныйОстаток");
	КонецЕсли;
	Если ПараметрыОтчета.ПоказательАмортизацияКонечныйОстаток Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецАмортизация,             "НаКонецПериода.АмортизацияКонечныйОстаток");
	КонецЕсли;
	Если ПараметрыОтчета.ПоказательОстаточнаяСтоимость Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецОстаточнаяСтоимость,     "НаКонецПериода.ОстаточнаяСтоимость");
	КонецЕсли;
    	
	Если ГруппаПоказатели.Элементы.Количество() <= 1 Тогда
		КомпоновщикНастроек.Настройки.Выбор.Элементы.Удалить(ГруппаПоказатели);
	КонецЕсли;		
	
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
		
	МакетШапкиОтчета = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетШапки(МакетКомпоновки);
	
	ЗаголовокКолонкиОС = ""; 
	Для Каждого Строка Из  МакетШапкиОтчета.Макет Цикл
		
		Если Строка.Ячейки[0].Элементы.Количество() > 0 Тогда
			ЗаголовокКолонкиОС = ЗаголовокКолонкиОС + ?(ПустаяСтрока(ЗаголовокКолонкиОС), "", " \ ");
		КонецЕсли;
		
		Для Каждого Элемент Из Строка.Ячейки[0].Элементы Цикл
			ЗаголовокКолонкиОС = ЗаголовокКолонкиОС + Элемент.Значение;
		КонецЦикла;
		
	КонецЦикла;
	
			Если ПараметрыОтчета.РазмещениеДополнительныхПолей = 1 Тогда
				
				ЗаголовокКолонкиДоп = ""; 
				Для Каждого Строка Из  МакетШапкиОтчета.Макет Цикл
					
					Если Строка.Ячейки[1].Элементы.Количество() > 0 Тогда
						ЗаголовокКолонкиДоп = ЗаголовокКолонкиДоп + ?(ПустаяСтрока(ЗаголовокКолонкиДоп), "", " \ ");
					КонецЕсли;
					
					Для Каждого Элемент Из Строка.Ячейки[1].Элементы Цикл
						ЗаголовокКолонкиДоп = ЗаголовокКолонкиДоп + Элемент.Значение;
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
	
	Если МакетШапкиОтчета.Макет.Количество() > 1 Тогда
		
		Ячейка2 = МакетШапкиОтчета.Макет[1].Ячейки[1];
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка2.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);

		МассивДляУдаления = Новый Массив;
		Для Индекс = 2 По МакетШапкиОтчета.Макет.Количество() - 1 Цикл
			МассивДляУдаления.Добавить(МакетШапкиОтчета.Макет[Индекс]);
		КонецЦикла;
			
		Для Каждого Элемент Из МассивДляУдаления Цикл
			МакетШапкиОтчета.Макет.Удалить(Элемент);
		КонецЦикла;
		
		Ячейка2 = МакетШапкиОтчета.Макет[0].Ячейки[0];
		Ячейка2.Элементы.Очистить();
		НовыйЭлемент = Ячейка2.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
		НовыйЭлемент.Значение = ЗаголовокКолонкиОС;	
		Ячейка2 = МакетШапкиОтчета.Макет[1].Ячейки[0];
		Ячейка2.Элементы.Очистить();
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка2.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
		
	КонецЕсли;
	
			Если ПараметрыОтчета.РазмещениеДополнительныхПолей = 1 Тогда
				Ячейка2 = МакетШапкиОтчета.Макет[0].Ячейки[1];
				Ячейка2.Элементы.Очистить();
				НовыйЭлемент = Ячейка2.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
				НовыйЭлемент.Значение = ЗаголовокКолонкиДоп;	
				Ячейка2 = МакетШапкиОтчета.Макет[1].Ячейки[1];
				Ячейка2.Элементы.Очистить();
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка2.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
			КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);

	// Зафиксируем заголовок отчета
	Если ПараметрыОтчета.ВыводитьЗаголовок Тогда
		ВысотаЗаголовка = Результат.Области.Заголовок.Низ;
		Результат.ФиксацияСверху = ВысотаЗаголовка + 2;
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


#КонецЕсли