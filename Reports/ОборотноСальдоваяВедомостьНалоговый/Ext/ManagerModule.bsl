#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПередВыводомЭлементаРезультата,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки",
							Истина, Истина, Истина, Истина, Истина);
							
КонецФункции

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	НаборПоказателей.Добавить("ПР");
	НаборПоказателей.Добавить("ВР");
	
	Возврат НаборПоказателей;
	
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт
	
	ЗаголовокОтчета = НСтр("ru = 'Оборотно-сальдовая ведомость (налоговый учет) %1'");
	ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ЗаголовокОтчета, БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода));
	
	Возврат ЗаголовокОтчета;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	// Инициализация переменных для ручного расчета итогов
	
	СчетчикОрганизаций     = 0;
	ОрганизацияДляИтогов   = "";
	СчетчикПодразделений   = 0;
	ПодразделениеДляИтогов = "";
	СчетчикВидовУчета      = 0;
	ВидУчетаДляИтогов      = "";

	ТаблицаИтогов = Новый ТаблицаЗначений();
	ТаблицаИтогов.Колонки.Добавить("Группировка");
	ТаблицаИтогов.Колонки.Добавить("Показатель");
	ТаблицаИтогов.Колонки.Добавить("_1");
	ТаблицаИтогов.Колонки.Добавить("_2");
	ТаблицаИтогов.Колонки.Добавить("_3");
	ТаблицаИтогов.Колонки.Добавить("_4");
	ТаблицаИтогов.Колонки.Добавить("_5");
	ТаблицаИтогов.Колонки.Добавить("_6");

	РассчитыватьИтогиОрганизации   = Ложь;
	РассчитыватьИтогиПодразделения = Ложь;
	РассчитыватьИтогиВидаУчета     = Ложь;
	
	ИтогиОрганизации   = Неопределено;
	ИтогиПодразделения = Неопределено;
	ИтогиВидаУчета     = Неопределено;
	
	УровеньОрганизации   = 0;
	УровеньПодразделения = 0;
	УровеньСчета         = 0;
	УровеньВидаУчета     = 0;
	
	Если НЕ ПараметрыОтчета.ГруппировкаДоп.Количество() = 0 Тогда
		СтрокаСчет   = ПараметрыОтчета.ГруппировкаДоп.Найти("Счет", "Поле");
		УровеньСчета = ПараметрыОтчета.ГруппировкаДоп.Индекс(СтрокаСчет);
		Если СтрокаСчет <> Неопределено И УровеньСчета > 0 Тогда
			Для Индекс = 0 По УровеньСчета Цикл
				СтрокаГруппировки = ПараметрыОтчета.ГруппировкаДоп.Получить(Индекс);
				Если СтрокаГруппировки.Использование Тогда
					Если СтрокаГруппировки.Поле = Новый ПолеКомпоновкиДанных("Организация")
						ИЛИ СтрокаГруппировки.Поле = "Организация" Тогда
						РассчитыватьИтогиОрганизации = Истина;
						УровеньОрганизации = Индекс;
					ИначеЕсли СтрокаГруппировки.Поле = Новый ПолеКомпоновкиДанных("Подразделение")
						ИЛИ СтрокаГруппировки.Поле = "Подразделение" Тогда
						РассчитыватьИтогиПодразделения = Истина;
						УровеньПодразделения = Индекс;
					ИначеЕсли СтрокаГруппировки.Поле = Новый ПолеКомпоновкиДанных("ВидУчета")
						ИЛИ СтрокаГруппировки.Поле = "ВидУчета" Тогда
						РассчитыватьИтогиВидаУчета = Истина;
						УровеньВидаУчета = Индекс;
				    КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеРасчетаИтогов = Новый Структура;
	ДанныеРасчетаИтогов.Вставить("ВидУчетаДляИтогов"             , ВидУчетаДляИтогов);
	ДанныеРасчетаИтогов.Вставить("ОрганизацияДляИтогов"          , ОрганизацияДляИтогов);
	ДанныеРасчетаИтогов.Вставить("ПодразделениеДляИтогов"        , ПодразделениеДляИтогов);
	ДанныеРасчетаИтогов.Вставить("СчетчикВидовУчета"             , СчетчикВидовУчета);
	ДанныеРасчетаИтогов.Вставить("СчетчикОрганизаций"            , СчетчикОрганизаций);
	ДанныеРасчетаИтогов.Вставить("СчетчикПодразделений"          , СчетчикПодразделений);
	ДанныеРасчетаИтогов.Вставить("ИтогиВидаУчета"                , ИтогиВидаУчета);
	ДанныеРасчетаИтогов.Вставить("ИтогиОрганизации"              , ИтогиОрганизации);
	ДанныеРасчетаИтогов.Вставить("ИтогиПодразделения"            , ИтогиПодразделения);
	ДанныеРасчетаИтогов.Вставить("ТаблицаИтогов"                 , ТаблицаИтогов);
	ДанныеРасчетаИтогов.Вставить("РассчитыватьИтогиВидаУчета"    , РассчитыватьИтогиВидаУчета);
	ДанныеРасчетаИтогов.Вставить("РассчитыватьИтогиОрганизации"  , РассчитыватьИтогиОрганизации);
	ДанныеРасчетаИтогов.Вставить("РассчитыватьИтогиПодразделения", РассчитыватьИтогиПодразделения);
	ДанныеРасчетаИтогов.Вставить("УровеньВидаУчета"              , УровеньВидаУчета);
	ДанныеРасчетаИтогов.Вставить("УровеньОрганизации"            , УровеньОрганизации);
	ДанныеРасчетаИтогов.Вставить("УровеньПодразделения"          , УровеньПодразделения);
	ДанныеРасчетаИтогов.Вставить("УровеньСчета"                  , УровеньСчета);
	
	ПараметрыОтчета.Вставить("ДанныеРасчетаИтогов", ДанныеРасчетаИтогов);
	
	
	// Доработка компановщика настроек

	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	МассивПоказателей = ПолучитьНаборПоказателей();
	
	КоличествоПоказателей = БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);
	
	Если КоличествоПоказателей > 1 Тогда
		ГруппаПоказатели = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаПоказатели.Заголовок     = НСтр("ru = 'Показатели'");
		ГруппаПоказатели.Использование = Истина;
		ГруппаПоказатели.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ЭлементМассива Из МассивПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ЭлементМассива] Тогда 
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПоказатели, "Показатели." + ЭлементМассива);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	ГруппаСальдоНаНачало = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаНачало.Заголовок     = НСтр("ru = 'Сальдо на начало периода'");
	ГруппаСальдоНаНачало.Использование = Истина;
	ГруппаСальдоНаНачалоДт = ГруппаСальдоНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаНачалоДт.Заголовок     = НСтр("ru = 'Дебет'");
	ГруппаСальдоНаНачалоДт.Использование = Истина;
	ГруппаСальдоНаНачалоДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаСальдоНаНачалоКт = ГруппаСальдоНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаНачалоКт.Заголовок     = НСтр("ru = 'Кредит'");
	ГруппаСальдоНаНачалоКт.Использование = Истина;
	ГруппаСальдоНаНачалоКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	ГруппаОбороты = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОбороты.Заголовок     = НСтр("ru = 'Обороты за период'");
	ГруппаОбороты.Использование = Истина;
	ГруппаОборотыДт = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОборотыДт.Заголовок     = НСтр("ru = 'Дебет'");
	ГруппаОборотыДт.Использование = Истина;
	ГруппаОборотыДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаОборотыКт = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОборотыКт.Заголовок     = НСтр("ru = 'Кредит'");
	ГруппаОборотыКт.Использование = Истина;
	ГруппаОборотыКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	ГруппаСальдоНаКонец = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаКонец.Заголовок     = НСтр("ru = 'Сальдо на конец периода'");
	ГруппаСальдоНаКонец.Использование = Истина;
	ГруппаСальдоНаКонецДт = ГруппаСальдоНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаКонецДт.Заголовок     = НСтр("ru = 'Дебет'");
	ГруппаСальдоНаКонецДт.Использование = Истина;
	ГруппаСальдоНаКонецДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаСальдоНаКонецКт = ГруппаСальдоНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаКонецКт.Заголовок     = НСтр("ru = 'Кредит'");
	ГруппаСальдоНаКонецКт.Использование = Истина;
	ГруппаСальдоНаКонецКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	Для Каждого ЭлементМассива Из МассивПоказателей Цикл
		Если ПараметрыОтчета["Показатель" + ЭлементМассива] Тогда 
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоДт, "СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокДт");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоКт, "СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокКт");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаОборотыДт,        "ОборотыЗаПериод."       + ЭлементМассива + "ОборотДт");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаОборотыКт,        "ОборотыЗаПериод."       + ЭлементМассива + "ОборотКт");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаКонецДт,  "СальдоНаКонецПериода."  + ЭлементМассива + "КонечныйОстатокДт");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаКонецКт,  "СальдоНаКонецПериода."  + ЭлементМассива + "КонечныйОстатокКт");
		КонецЕсли;
	КонецЦикла;
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	// Доработка схемы - развернутое сальдо
	НаборДанных = Схема.НаборыДанных.НаборДанныхОбъединение.Элементы.ПоСубконтоРазвернутое; // Набор "ПоСубконтоРазвернутое"
	ТекстЗапроса = НаборДанных.Запрос;
	НаборДанных.Запрос = "";
	
	ТекстЗапросПоСубконтоРазвернутое       = ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало ЗапросПоСубконто РазвернутоеСальдо", "//Конец ЗапросПоСубконто РазвернутоеСальдо");
	ТекстУсловиеСчетаПоСубконтоРазвернутое = ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало УсловиеСчета РазвернутоеСальдо"    , "//Конец УсловиеСчета РазвернутоеСальдо");
	ТекстСубконтоПоСубконтоРазвернутое     = ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало Субконто РазвернутоеСальдо"        , "//Конец Субконто РазвернутоеСальдо");
		
	ВыводитьРазвернутоеСальдо = Ложь;
	
	ТекстУсловие = "Ложь ИЛИ ";
	
	СписокВсехСчетовРазвернутоеСальдо = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы Из ПараметрыОтчета.РазвернутоеСальдо Цикл
		Если СтрокаТаблицы.Использование И ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			СписокВсехСчетовРазвернутоеСальдо.Добавить(СтрокаТаблицы.Счет);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ПараметрыОтчета.РазвернутоеСальдо Цикл
		СубконтоРазвернутоеСальдо = Новый СписокЗначений;
		Если СтрокаТаблицы.Использование И ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			ВыводитьРазвернутоеСальдо = Истина;
			
			ДанныеСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.Счет);
			СписокВидовСубконто = Новый СписокЗначений;
			КоличествоСубконто = СтрДлина(СтрокаТаблицы.ПоСубконто) / 2;
			Для Индекс = 1 По КоличествоСубконто Цикл
				СписокВидовСубконто.Добавить(ДанныеСчета["ВидСубконто" + Сред(СтрокаТаблицы.ПоСубконто, Индекс*2, 1)], ДанныеСчета["ВидСубконто" + Сред(СтрокаТаблицы.ПоСубконто, Индекс*2, 1) + "Наименование"], ?(Сред(СтрокаТаблицы.ПоСубконто, Индекс * 2 - 1, 1) = "+", Истина, Ложь));
			КонецЦикла;
			
			Для Каждого СтрокаТаблицыСубконто Из СписокВидовСубконто Цикл
				Если СтрокаТаблицыСубконто.Пометка Тогда
					СубконтоРазвернутоеСальдо.Добавить(СтрокаТаблицыСубконто.Значение);            
				КонецЕсли;
			КонецЦикла;		
			
			Индекс = ПараметрыОтчета.РазвернутоеСальдо.Индекс(СтрокаТаблицы) + 1;
			
			ТекстУсловие = ТекстУсловие + "Счет = &СчетРазвернутоеСальдо" + Индекс + " ИЛИ "; 
			
			// Формируем текст параметра УсловиеСчета запроса детализации по субконто
			ТекстДляПодстановкиУсловиеСчетаПоСубконтоРазвернутое = "Счет В ИЕРАРХИИ (&СчетРазвернутоеСальдо" + Индекс + ")
																	| И Счет НЕ В (&СчетаИсключенныеИзЗапросаПоСчетамРазвернутое" + Индекс + ")";
			
			// Формируем текст параметра Субконто запроса по субконто развернутое
			ТекстДляПодстановкиСубконтоПоСубконтоРазвернутое = "&СубконтоРазвернутый" + Индекс;
			
			// Установка параметра СчетРазвернутоеСальдо
			БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(Схема, "СчетРазвернутоеСальдо" + Индекс, "СчетРазвернутоеСальдо", СтрокаТаблицы.Счет);
			
			СчетаИсключенныеИзЗапросаПоСчетамРазвернутое = СписокВсехСчетовРазвернутоеСальдо.Скопировать();
			СчетаИсключенныеИзЗапросаПоСчетамРазвернутое.Удалить(СчетаИсключенныеИзЗапросаПоСчетамРазвернутое.НайтиПоЗначению(СтрокаТаблицы.Счет));
			// Установка параметра СчетаИсключенныеИзЗапросаПоСчетамРазвернутое
			БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(Схема, "СчетаИсключенныеИзЗапросаПоСчетамРазвернутое" + Индекс, "СчетаИсключенныеИзЗапросаПоСчетамРазвернутое", СчетаИсключенныеИзЗапросаПоСчетамРазвернутое);
			
			// Установка параметра "СубконтоДетализацииРазвернутый
			БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(Схема, "СубконтоРазвернутый" + Индекс, "СубконтоРазвернутый", СубконтоРазвернутоеСальдо);
			
			// Формируем текст запроса для счета детализации
			ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = ТекстЗапросПоСубконтоРазвернутое;//СтрЗаменить(ТекстЗапросПоСубконтоРазвернутое, ТекстПолеСчетПоСубконтоРазвернутое, ТекстДляПодстановкиПолеСчетПоСубконтоРазвернутое);
			ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = СтрЗаменить(ТекстДляПодстановкиЗапросПоСубконтоРазвернутое, ТекстУсловиеСчетаПоСубконтоРазвернутое, ТекстДляПодстановкиУсловиеСчетаПоСубконтоРазвернутое);
			ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = СтрЗаменить(ТекстДляПодстановкиЗапросПоСубконтоРазвернутое, ТекстСубконтоПоСубконтоРазвернутое, ТекстДляПодстановкиСубконтоПоСубконтоРазвернутое);
			
			Для Индекс = 1 По СубконтоРазвернутоеСальдо.Количество() Цикл
				ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = СтрЗаменить(ТекстДляПодстановкиЗапросПоСубконтоРазвернутое, "//Null КАК Субконто" + Индекс, "ОстаткиИОбороты.Субконто" + Индекс + " КАК Субконто" + Индекс);
			КонецЦикла;
			
			// Доработка запроса набора данных
			НаборДанных.Запрос = НаборДанных.Запрос + ТекстДляПодстановкиЗапросПоСубконтоРазвернутое;
			
			// Доработка запроса набора данных
			НаборДанных.Запрос = НаборДанных.Запрос + " ОБЪЕДИНИТЬ ВСЕ ";
		КонецЕсли;	
	КонецЦикла;
	НаборДанных.Запрос = Лев(НаборДанных.Запрос, СтрДлина(НаборДанных.Запрос) - 16);
	
	Если ВыводитьРазвернутоеСальдо Тогда
		ТекстУсловие = Лев(ТекстУсловие, СтрДлина(ТекстУсловие) - 4);
		Для Каждого ЭлементМассива Из МассивПоказателей Цикл
			ПолеИтога = Схема.ПоляИтога.Найти("СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокДт");
			ПолеИтога.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйРазвернутыйОстатокДт) Иначе Сумма(СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокДт) Конец";
			
			ПолеИтога = Схема.ПоляИтога.Найти("СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокКт");
			ПолеИтога.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйРазвернутыйОстатокКт) Иначе Сумма(СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокКт) Конец";
			
			ПолеИтога = Схема.ПоляИтога.Найти("СальдоНаКонецПериода." + ЭлементМассива + "КонечныйОстатокДт");
			ПолеИтога.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(СальдоНаКонецПериода." + ЭлементМассива + "КонечныйРазвернутыйОстатокДт) Иначе Сумма(СальдоНаКонецПериода." + ЭлементМассива + "КонечныйОстатокДт) Конец";
			
			ПолеИтога = Схема.ПоляИтога.Найти("СальдоНаКонецПериода." + ЭлементМассива + "КонечныйОстатокКт");
			ПолеИтога.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(СальдоНаКонецПериода." + ЭлементМассива + "КонечныйРазвернутыйОстатокКт) Иначе Сумма(СальдоНаКонецПериода." + ЭлементМассива + "КонечныйОстатокКт) Конец";
		КонецЦикла;
	КонецЕсли;
	
	НаборДанных = Схема.НаборыДанных.НаборДанныхОбъединение.Элементы.ПоСубконто; // Набор "ПоСубконто"
	ТекстЗапроса = НаборДанных.Запрос;
	НаборДанных.Запрос = "";
	
	ТекстЗапросДетализацииПоСубконто       = ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало ЗапросПоСубконто Детализация", "//Конец ЗапросПоСубконто Детализация");
	ТекстУсловиеСчетаДетализацииПоСубконто = ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало УсловиеСчета Детализация", "//Конец УсловиеСчета Детализация");
	ТекстСубконтоДетализацииПоСубконто     = ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало Субконто Детализация", "//Конец Субконто Детализация");
	
	СчетаИсключенныеИзЗапросаПоСчетам = Новый СписокЗначений;
	
	// Доработка для детализации
	ЕстьДетализацияПоСубконто = Ложь;
	НужноКорректироватьзапросСКД = Ложь;
	
	Для Каждого СтрокаТаблицы Из ПараметрыОтчета.Группировка Цикл	
		СубконтоДетализации = Новый СписокЗначений;
		Если СтрокаТаблицы.Использование И ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда	
			ДанныеСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.Счет);
			СписокВидовСубконто = Новый СписокЗначений;
			КоличествоСубконто = СтрДлина(СтрокаТаблицы.ПоСубконто) / 2;
			Для Индекс = 1 По КоличествоСубконто Цикл
				СписокВидовСубконто.Добавить(ДанныеСчета["ВидСубконто" + Сред(СтрокаТаблицы.ПоСубконто, Индекс*2, 1)], ДанныеСчета["ВидСубконто" + Сред(СтрокаТаблицы.ПоСубконто, Индекс*2, 1) + "Наименование"], ?(Сред(СтрокаТаблицы.ПоСубконто, Индекс * 2 - 1, 1) = "+", Истина, Ложь));
			КонецЦикла;
			
			Для Каждого СтрокаТаблицыСубконто Из СписокВидовСубконто Цикл
				Если СтрокаТаблицыСубконто.Пометка Тогда
					СубконтоДетализации.Добавить(СтрокаТаблицыСубконто.Значение);            
				КонецЕсли;
			КонецЦикла;		
		КонецЕсли;
		
		Если СубконтоДетализации.Количество() > 0 Тогда
			ЕстьДетализацияПоСубконто = Истина;
			
			СчетаИсключенныеИзЗапросаПоСчетам.Добавить(СтрокаТаблицы.Счет);
			Индекс = ПараметрыОтчета.Группировка.Индекс(СтрокаТаблицы) + 1;
			
			// Формируем текст параметра УсловиеСчета запроса детализации по субконто
			ТекстДляПодстановкиУсловиеСчетаДетализацииПоСубконто = "Счет В ИЕРАРХИИ (&СчетДетализации" + Индекс + ")";
											  
			// Формируем текст параметра Субконто запроса детализации по субконто
			ТекстДляПодстановкиСубконтоДетализацииПоСубконто = "&СубконтоДетализации" + Индекс;
			
			// Формируем текст запроса для счета детализации
			ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстЗапросДетализацииПоСубконто, ТекстУсловиеСчетаДетализацииПоСубконто, ТекстДляПодстановкиУсловиеСчетаДетализацииПоСубконто);
			ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, ТекстСубконтоДетализацииПоСубконто, ТекстДляПодстановкиСубконтоДетализацииПоСубконто);
			
			// Доработка текста запроса СКД
			// Для первого запроса секция "{Выбрать..." должна быть 
			Если НужноКорректироватьзапросСКД Тогда
				ТекстЗапросаСКД = "{ВЫБРАТЬ Субконто1Представление, Субконто2Представление, Субконто3Представление}";
				ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, ТекстЗапросаСКД, "");
			Иначе
				// для последующих запросов секцию "{Выбрать..." нужно убирать
				НужноКорректироватьзапросСКД = Истина;
			КонецЕсли;
			
			// Корректировка текста запроса в зависимости от количества указанных видов субконто
			Если Индекс > 1 Тогда
				Для ИндексПсевдонима = 1 По 3 Цикл
					ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, " КАК Субконто" + ИндексПсевдонима + "Представление", "");
					ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, " КАК Субконто" + ИндексПсевдонима, "");
				КонецЦикла;
			КонецЕсли;
			Для ИндексСубконто = СубконтоДетализации.Количество() + 1 По 3 Цикл
				ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, "ОстаткиИОбороты.Субконто" + ИндексСубконто , "Null");	
			КонецЦикла;
			
			ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, "ПРЕДСТАВЛЕНИЕССЫЛКИ(Null)" , """""");
			
			// Добавление и установка значения параметра СчетДетализации{Индекс}
			
			БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(Схема, "СчетДетализации" + Индекс, "СчетДетализации", СтрокаТаблицы.Счет);
			
			// Добавление и установка значения параметра СубконтоДетализации{Индекс}
			БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(Схема, "СубконтоДетализации" + Индекс, "СубконтоДетализации", СубконтоДетализации);
							
			// Доработка запроса набора данных
			НаборДанных.Запрос = НаборДанных.Запрос + ТекстДляПодстановкиЗапросДетализацииПоСубконто;
			
			// Доработка запроса набора данных
			НаборДанных.Запрос = НаборДанных.Запрос + " ОБЪЕДИНИТЬ ВСЕ ";	
		КонецЕсли;
	КонецЦикла;
	
	НаборДанных.Запрос = Лев(НаборДанных.Запрос, СтрДлина(НаборДанных.Запрос) - 16);
	
	Схема.Параметры.СчетаИсключенныеИзЗапросаПоСчетам.Значение = СчетаИсключенныеИзЗапросаПоСчетам;
	
	Если Не ЕстьДетализацияПоСубконто Тогда
		Схема.НаборыДанных.НаборДанныхОбъединение.Элементы.Удалить(Схема.НаборыДанных.НаборДанныхОбъединение.Элементы.ПоСубконто);
	КонецЕсли;
	Если Не ВыводитьРазвернутоеСальдо Тогда
		Схема.НаборыДанных.НаборДанныхОбъединение.Элементы.Удалить(Схема.НаборыДанных.НаборДанныхОбъединение.Элементы.ПоСубконтоРазвернутое);
	КонецЕсли;
		
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	
	Для Каждого Параметр Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		Параметр.Использование = Истина;
	КонецЦикла;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаИсключенныеИзЗапросаПоСчетам", СчетаИсключенныеИзЗапросаПоСчетам);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
		
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	// Формирование структуры отчета
	
	//Установим группировку по полям дополнительной группировки
	//группировка счета будет всегда ниже доп. группировок
	Структура = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Первый = Истина;
	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.ГруппировкаДоп Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Если Не Первый Тогда 
				Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			КонецЕсли;
			Первый = Ложь;
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			Если ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			Если ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Счет") Тогда 
												
				Если Не ПараметрыОтчета.ПоСубсчетам Тогда
					ЗначениеОтбора = БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Структура.Отбор, "SystemFields.LevelInGroup", 1);
					ЗначениеОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
					БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
				КонецЕсли;
				
			КонецЕсли;			
			
		КонецЕсли;
	КонецЦикла; 
	
	// Отключим вывод отборов
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	
	Если ЕстьДетализацияПоСубконто Тогда
		
		Для Индекс = 1 По 3 Цикл 
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Субконто" + Индекс);
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
		КонецЦикла;
		
	КонецЕсли;
	
	БухгалтерскиеОтчеты.ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, ПараметрыОтчета);
	
	Если ПараметрыОтчета.ПоСубсчетам Тогда
		
		УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();	
		
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("Счет");
		
		Если ПараметрыОтчета.РазмещениеДополнительныхПолей = 1 Тогда 
			Для Каждого ДопПоле Из ПараметрыОтчета.ДополнительныеПоля Цикл 
				
				Поле = УсловноеОформление.Поля.Элементы.Добавить();
				Поле.Поле = Новый ПолеКомпоновкиДанных(Сред(ДопПоле.Поле, 1, Найти(ДопПоле.Поле, ".")));			
				
			КонецЦикла;
		КонецЕсли;
			
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(УсловноеОформление.Отбор, "Счет.Родитель", ПланыСчетов.Типовой.ПустаяСсылка());
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(УсловноеОформление.Оформление, "Шрифт", Новый Шрифт(, , Истина));
		
		УсловноеОформление.Представление = НСтр("ru = 'Выделять группы счетов'");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	ДанныеРасчетаИтогов = ПараметрыОтчета.ДанныеРасчетаИтогов;
	
	МакетШапкиОтчета = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетШапки(МакетКомпоновки);
	
	КоличествоПоказателей = БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);
	
	КоличествоГруппировок = 0;
	Для Каждого СтрокаТаблицы Из ПараметрыОтчета.Группировка Цикл
		Если СтрокаТаблицы.Использование Тогда
			КоличествоСубконто = СтрЧислоВхождений(СтрокаТаблицы.ПоСубконто, "+");
			КоличествоГруппировок = Макс(КоличествоГруппировок, КоличествоСубконто);
		КонецЕсли;
	КонецЦикла;
	КоличествоГруппировок = КоличествоГруппировок + 1;

	КоличествоСтрокШапки = Макс(КоличествоГруппировок, 2);
	ПараметрыОтчета.Вставить("ВысотаШапки", КоличествоСтрокШапки);
	
	МассивДляУдаления = Новый Массив;
	Для Индекс = КоличествоСтрокШапки По МакетШапкиОтчета.Макет.Количество() - 1 Цикл
		МассивДляУдаления.Добавить(МакетШапкиОтчета.Макет[Индекс]);
	КонецЦикла;
	
	КоличествоСтрок = МакетШапкиОтчета.Макет.Количество();
	Для ИндексСтроки = 2 По КоличествоСтрок - 1 Цикл
		СтрокаМакета = МакетШапкиОтчета.Макет[ИндексСтроки];
		
		КоличествоКолонок = СтрокаМакета.Ячейки.Количество();
		
		Для ИндексКолонки = КоличествоКолонок - 6 По КоличествоКолонок - 1 Цикл
			Ячейка = СтрокаМакета.Ячейки[ИндексКолонки];
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
		КонецЦикла;
	КонецЦикла;
	
	Если КоличествоПоказателей > 1 Тогда
		Для ИндексСтроки = 1 По КоличествоСтрок - 1 Цикл
			СтрокаМакета = МакетШапкиОтчета.Макет[ИндексСтроки];
			
			КоличествоКолонок = СтрокаМакета.Ячейки.Количество();
			Ячейка = СтрокаМакета.Ячейки[КоличествоКолонок - 7];
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
		КонецЦикла;
	КонецЕсли;	
	
	МакетПодвалаОтчета            = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетПодвала(МакетКомпоновки);
	МакетГруппировкиОрганизация   = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Организация");
	МакетГруппировкиСчет          = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Счет");
	МакетГруппировкиПодразделение = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Подразделение");
	МакетГруппировкиВидУчета      = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "ВидУчета");
	
	Для Каждого Элемент Из МассивДляУдаления Цикл
		МакетШапкиОтчета.Макет.Удалить(Элемент);
	КонецЦикла;
	
	Для Каждого Макет Из МакетКомпоновки.Макеты Цикл 
		Если Макет = МакетШапкиОтчета Тогда
		Иначе
			Индекс = -1;
			МассивПоказателей = Новый Массив;
			МассивПоказателей.Добавить("БУ");
			МассивПоказателей.Добавить("НУ");
			МассивПоказателей.Добавить("ПР");
			МассивПоказателей.Добавить("ВР");
			
			Для Каждого ЭлементМассива Из МассивПоказателей Цикл
				Если ПараметрыОтчета["Показатель" + ЭлементМассива] Тогда
					Индекс = Индекс + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоПоказателей = 0 + ПараметрыОтчета.ПоказательБУ + ПараметрыОтчета.ПоказательНУ + ПараметрыОтчета.ПоказательПР + ПараметрыОтчета.ПоказательВР;
	ЗначенияПоказателей   = Новый Массив(6, КоличествоПоказателей);
	
	// Начало - Ручной расчет итогов по группировкам
	Если ДанныеРасчетаИтогов.РассчитыватьИтогиОрганизации Тогда
		ИтогиОрганизации = Новый Массив(6, КоличествоПоказателей);
		Для Каждого Массив Из ИтогиОрганизации Цикл
			Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
				Массив[Индекс] = 0;
			КонецЦикла;
		КонецЦикла;
		ДанныеРасчетаИтогов.ИтогиОрганизации = ИтогиОрганизации;
	КонецЕсли;
	
	Если ДанныеРасчетаИтогов.РассчитыватьИтогиПодразделения Тогда
		ИтогиПодразделения = Новый Массив(6, КоличествоПоказателей);
		Для Каждого Массив Из ИтогиПодразделения Цикл
			Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
				Массив[Индекс] = 0;
			КонецЦикла;
		КонецЦикла;
		ДанныеРасчетаИтогов.ИтогиПодразделения = ИтогиПодразделения;
	КонецЕсли;
	
	Если ДанныеРасчетаИтогов.РассчитыватьИтогиВидаУчета Тогда
		ИтогиВидаУчета = Новый Массив(6, КоличествоПоказателей);
		Для Каждого Массив Из ИтогиВидаУчета Цикл
			Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
				Массив[Индекс] = 0;
			КонецЦикла;
		КонецЦикла;
		ДанныеРасчетаИтогов.ИтогиВидаУчета = ИтогиВидаУчета;
	КонецЕсли;
	// Конец - Ручной расчет итогов по группировкам
	
	Для Каждого Массив Из ЗначенияПоказателей Цикл
		Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
			Массив[Индекс] = 0;
		КонецЦикла;
	КонецЦикла;
	
	ПараметрыОтчета.Вставить("МакетШапкиОтчета"     , МакетШапкиОтчета);
	ПараметрыОтчета.Вставить("МакетСчет"            , МакетГруппировкиСчет);
	ПараметрыОтчета.Вставить("МакетПодвал"          , МакетПодвалаОтчета);
	ПараметрыОтчета.Вставить("КоличествоПоказателей", КоличествоПоказателей);
	ПараметрыОтчета.Вставить("ЗначенияПоказателей"  , ЗначенияПоказателей);
	
	// Начало - Ручной расчет итогов по группировкам
	Если МакетГруппировкиОрганизация.Количество() > 0 И ДанныеРасчетаИтогов.РассчитыватьИтогиОрганизации Тогда
		ПараметрыОтчета.Вставить("МакетОрганизация", МакетГруппировкиОрганизация[0]);
	Иначе
		Если ПараметрыОтчета.Свойство("МакетОрганизация") Тогда
			ПараметрыОтчета.Удалить("МакетОрганизация");
		КонецЕсли;	
	КонецЕсли;
	
	Если МакетГруппировкиПодразделение.Количество() > 0 И ДанныеРасчетаИтогов.РассчитыватьИтогиПодразделения Тогда
		ПараметрыОтчета.Вставить("МакетПодразделение", МакетГруппировкиПодразделение[0]);
	Иначе
		Если ПараметрыОтчета.Свойство("МакетПодразделение") Тогда
			ПараметрыОтчета.Удалить("МакетПодразделение");
		КонецЕсли;	
	КонецЕсли;
	
	Если МакетГруппировкиВидУчета.Количество() > 0 И ДанныеРасчетаИтогов.РассчитыватьИтогиВидаУчета Тогда
		ПараметрыОтчета.Вставить("МакетВидУчета", МакетГруппировкиВидУчета[0]);
	Иначе
		Если ПараметрыОтчета.Свойство("МакетВидУчета") Тогда
			ПараметрыОтчета.Удалить("МакетВидУчета");
		КонецЕсли;	
	КонецЕсли;
	// Конец - Ручной расчет итогов по группировкам
	
	Если МакетПодвалаОтчета.Макет.Количество() > 0 Тогда
		ЯчейкаОбразец = МакетПодвалаОтчета.Макет[0].Ячейки[0];
		ЦветНеОтрицательный = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(ЯчейкаОбразец.Оформление.Элементы, "ЦветТекста").Значение;
		
		ВыделятьОтрицательные 	= Ложь;
		Для Каждого ЭлементУсловногоОформления Из ПараметрыОтчета.НастройкиКомпоновкиДанных.УсловноеОформление.Элементы Цикл
			ПараметрВыделятьОтрицательные = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(ЭлементУсловногоОформления.Оформление.Элементы, "ВыделятьОтрицательные");
			Если ПараметрВыделятьОтрицательные <> Неопределено Тогда
				ВыделятьОтрицательные = ПараметрВыделятьОтрицательные.Использование И ЭлементУсловногоОформления.Использование;				
			КонецЕсли;
			Если ВыделятьОтрицательные Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;

		КоличествоЯчеек = МакетПодвалаОтчета.Макет[0].Ячейки.Количество();
		Для Каждого СтрокаМакета Из МакетПодвалаОтчета.Макет Цикл
			
			Для Индекс = КоличествоЯчеек - 7 По КоличествоЯчеек - 1 Цикл
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(СтрокаМакета.Ячейки[Индекс].Оформление.Элементы, "ЦветТекста", ЦветНеОтрицательный);
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(СтрокаМакета.Ячейки[Индекс].Оформление.Элементы, "ВыделятьОтрицательные", ВыделятьОтрицательные);
			КонецЦикла;
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередВыводомЭлементаРезультата(ПараметрыОтчета, МакетКомпоновки, ДанныеРасшифровки, ЭлементРезультата, Отказ = Ложь) Экспорт
	
	ДанныеРасчетаИтогов = ПараметрыОтчета.ДанныеРасчетаИтогов;
	
	ВидУчетаДляИтогов              = ДанныеРасчетаИтогов.ВидУчетаДляИтогов;
	ОрганизацияДляИтогов           = ДанныеРасчетаИтогов.ОрганизацияДляИтогов;
	ПодразделениеДляИтогов         = ДанныеРасчетаИтогов.ПодразделениеДляИтогов;
	СчетчикВидовУчета              = ДанныеРасчетаИтогов.СчетчикВидовУчета;
	СчетчикОрганизаций             = ДанныеРасчетаИтогов.СчетчикОрганизаций;
	СчетчикПодразделений           = ДанныеРасчетаИтогов.СчетчикПодразделений;
	ИтогиВидаУчета                 = ДанныеРасчетаИтогов.ИтогиВидаУчета;
	ИтогиОрганизации               = ДанныеРасчетаИтогов.ИтогиОрганизации;
	ИтогиПодразделения             = ДанныеРасчетаИтогов.ИтогиПодразделения;
	ТаблицаИтогов                  = ДанныеРасчетаИтогов.ТаблицаИтогов;
	УровеньВидаУчета               = ДанныеРасчетаИтогов.УровеньВидаУчета;
	УровеньОрганизации             = ДанныеРасчетаИтогов.УровеньОрганизации;
	УровеньПодразделения           = ДанныеРасчетаИтогов.УровеньПодразделения;
	УровеньСчета                   = ДанныеРасчетаИтогов.УровеньСчета;
	РассчитыватьИтогиВидаУчета     = ДанныеРасчетаИтогов.РассчитыватьИтогиВидаУчета;
	РассчитыватьИтогиОрганизации   = ДанныеРасчетаИтогов.РассчитыватьИтогиОрганизации;
	РассчитыватьИтогиПодразделения = ДанныеРасчетаИтогов.РассчитыватьИтогиПодразделения;
	
	Попытка
		Если ЭлементРезультата.ЗначенияПараметров.П1.Значение = null 
			И ПараметрыОтчета.МакетШапкиОтчета.Имя <> ЭлементРезультата.Макет
			И ПараметрыОтчета.МакетПодвал.Имя <> ЭлементРезультата.Макет Тогда
			Отказ = Истина;
		КонецЕсли;                                                          
	Исключение
	КонецПопытки;
	
	СмещениеПоСтроке = ПараметрыОтчета.МакетШапкиОтчета.Макет[0].Ячейки.Количество() - 7;
	// Накапливаем суммы по корневым счетам
	Попытка
		Если ПараметрыОтчета.МакетСчет.Найти(МакетКомпоновки.Макеты[ЭлементРезультата.Макет]) <> Неопределено Тогда
			ЗначениеСчет = ДанныеРасшифровки.Элементы[ЭлементРезультата.ЗначенияПараметров.П2.Значение].ПолучитьПоля()[0].Значение;
			Если НЕ ПараметрыОтчета.ПоПодразделам И НЕ ПараметрыОтчета.ГруппировкаДоп.Количество() = 0 Тогда
				ЭлементРезультата.ЗначенияПараметров.П4.Значение  = УровеньСчета * 2;
				ЭлементРезультата.ЗначенияПараметров.П24.Значение = УровеньСчета;
				Отказ = ЗначениеСчет.ЗапретитьИспользоватьВПроводках;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ЗначениеСчет.Родитель) Тогда
				Для Индекс = 0 По ПараметрыОтчета.КоличествоПоказателей - 1 Цикл
					Для ПодИндекс = 1 По 6 Цикл
						Значение = ЭлементРезультата.ЗначенияПараметров[Строка(МакетКомпоновки.Макеты[ЭлементРезультата.Макет].Макет[Индекс].Ячейки[ПодИндекс + СмещениеПоСтроке].Элементы[0].Значение)].Значение;
						ПараметрыОтчета.ЗначенияПоказателей[ПодИндекс - 1][Индекс] = ПараметрыОтчета.ЗначенияПоказателей[ПодИндекс - 1][Индекс] + Значение;
						
						// Начало - Ручной расчет итогов по группировкам
						Если РассчитыватьИтогиОрганизации Тогда
							ИтогиОрганизации[ПодИндекс - 1][Индекс] = ИтогиОрганизации[ПодИндекс - 1][Индекс] + Значение;
						КонецЕсли;
						Если РассчитыватьИтогиПодразделения Тогда
							ИтогиПодразделения[ПодИндекс - 1][Индекс] =  ИтогиПодразделения[ПодИндекс - 1][Индекс] + Значение;
						КонецЕсли;
						Если РассчитыватьИтогиВидаУчета Тогда
							ИтогиВидаУчета[ПодИндекс - 1][Индекс] =  ИтогиВидаУчета[ПодИндекс - 1][Индекс] + Значение;
						КонецЕсли;
						// Конец - Ручной расчет итогов по группировкам
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; 
	Исключение
	КонецПопытки;
	
	// Проставляем накопленные суммы в подвал отчета
	Если ЭлементРезультата.Макет = ПараметрыОтчета.МакетПодвал.Имя Тогда
		Для Индекс = 0 По ПараметрыОтчета.КоличествоПоказателей - 1 Цикл
			Для ПодИндекс = 1 По 6 Цикл
				ЭлементРезультата.ЗначенияПараметров[Строка(ПараметрыОтчета.МакетПодвал.Макет[Индекс].Ячейки[ПодИндекс + СмещениеПоСтроке].Элементы[0].Значение)].Значение = ПараметрыОтчета.ЗначенияПоказателей[ПодИндекс - 1][Индекс];
			КонецЦикла;
		КонецЦикла;
		
		// Начало - Ручной расчет итогов по группировкам
		Если РассчитыватьИтогиОрганизации И СчетчикОрганизаций <> 0 Тогда
			Для Индекс = 0 По ПараметрыОтчета.КоличествоПоказателей - 1 Цикл
				СтрокаИтогов = ТаблицаИтогов.Добавить();
				СтрокаИтогов.Группировка = "Организация" + СчетчикОрганизаций + "_" + Индекс;
				СтрокаИтогов.Показатель = Строка(Индекс);
				Для ПодИндекс = 1 По 6 Цикл
					СтрокаИтогов["_" + Строка(ПодИндекс)] = ИтогиОрганизации[ПодИндекс - 1][Индекс];
					ИтогиОрганизации[ПодИндекс - 1][Индекс]= 0;
				КонецЦикла;
			КонецЦикла;
			ОрганизацияДляИтогов = ЭлементРезультата.ЗначенияПараметров.П1.Значение;
			СчетчикОрганизаций = СчетчикОрганизаций + 1;
			Для Индекс = 0 По ПараметрыОтчета.КоличествоПоказателей - 1 Цикл
				Для ПодИндекс = 1 По 6 Цикл
					ЭлементРезультата.ЗначенияПараметров[Строка(ПараметрыОтчета.МакетОрганизация.Макет[Индекс].Ячейки[ПодИндекс + СмещениеПоСтроке].Элементы[0].Значение)].Значение = "#Организация" + СчетчикОрганизаций + "_" + Индекс + "_" + ПодИндекс + "#";
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если РассчитыватьИтогиПодразделения И СчетчикПодразделений <> 0 Тогда
			Для Индекс = 0 По ПараметрыОтчета.КоличествоПоказателей - 1 Цикл
				СтрокаИтогов = ТаблицаИтогов.Добавить();
				СтрокаИтогов.Группировка = "Подразделение" + СчетчикПодразделений + "_" + Индекс;
				СтрокаИтогов.Показатель = Строка(Индекс);
				Для ПодИндекс = 1 По 6 Цикл
					СтрокаИтогов["_" + Строка(ПодИндекс)] = ИтогиПодразделения[ПодИндекс - 1][Индекс];
					ИтогиПодразделения[ПодИндекс - 1][Индекс]= 0;
				КонецЦикла;
			КонецЦикла;
			ПодразделениеДляИтогов = ЭлементРезультата.ЗначенияПараметров.П1.Значение;
			СчетчикПодразделений = СчетчикПодразделений + 1;
			Для Индекс = 0 По ПараметрыОтчета.КоличествоПоказателей - 1 Цикл
				Для ПодИндекс = 1 По 6 Цикл
					ЭлементРезультата.ЗначенияПараметров[Строка(ПараметрыОтчета.МакетПодразделение.Макет[Индекс].Ячейки[ПодИндекс + СмещениеПоСтроке].Элементы[0].Значение)].Значение = "#Подразделение" + СчетчикПодразделений + "_" + Индекс + "_" + ПодИндекс + "#";
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если РассчитыватьИтогиВидаУчета И СчетчикВидовУчета <> 0 Тогда
			Для Индекс = 0 По ПараметрыОтчета.КоличествоПоказателей - 1 Цикл
				СтрокаИтогов = ТаблицаИтогов.Добавить();
				СтрокаИтогов.Группировка = "ВидУчета" + СчетчикВидовУчета + "_" + Индекс;
				СтрокаИтогов.Показатель = Строка(Индекс);
				Для ПодИндекс = 1 По 6 Цикл
					СтрокаИтогов["_" + Строка(ПодИндекс)] = ИтогиВидаУчета[ПодИндекс - 1][Индекс];
					ИтогиВидаУчета[ПодИндекс - 1][Индекс]= 0;
				КонецЦикла;
			КонецЦикла;
			ВидУчетаДляИтогов = ЭлементРезультата.ЗначенияПараметров.П1.Значение;
			СчетчикВидовУчета = СчетчикВидовУчета + 1;
			Для Индекс = 0 По ПараметрыОтчета.КоличествоПоказателей - 1 Цикл
				Для ПодИндекс = 1 По 6 Цикл
					ЭлементРезультата.ЗначенияПараметров[Строка(ПараметрыОтчета.МакетВидУчета.Макет[Индекс].Ячейки[ПодИндекс + СмещениеПоСтроке].Элементы[0].Значение)].Значение = "#ВидУчета" + СчетчикВидовУчета + "_" + Индекс + "_" + ПодИндекс + "#";
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		// Конец - Ручной расчет итогов по группировкам
	КонецЕсли;
	
	// Начало - Ручной расчет итогов по группировкам
	Если РассчитыватьИтогиОрганизации И ПараметрыОтчета.Свойство("МакетОрганизация") Тогда
		Если ЭлементРезультата.Макет = ПараметрыОтчета.МакетОрганизация.Имя Тогда
			Если ОрганизацияДляИтогов <> ЭлементРезультата.ЗначенияПараметров.П1.Значение Тогда
				Если СчетчикОрганизаций <> 0 Тогда
					Для Индекс = 0 По ПараметрыОтчета.КоличествоПоказателей - 1 Цикл
						СтрокаИтогов = ТаблицаИтогов.Добавить();
						СтрокаИтогов.Группировка = "Организация" + СчетчикОрганизаций + "_" + Индекс;
						СтрокаИтогов.Показатель = Строка(Индекс);
						Для ПодИндекс = 1 По 6 Цикл
							СтрокаИтогов["_" + Строка(ПодИндекс)] = ИтогиОрганизации[ПодИндекс - 1][Индекс];
							ИтогиОрганизации[ПодИндекс - 1][Индекс]= 0;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				ОрганизацияДляИтогов = ЭлементРезультата.ЗначенияПараметров.П1.Значение;
				Если РассчитыватьИтогиПодразделения И УровеньПодразделения > УровеньОрганизации Тогда
					ПодразделениеДляИтогов = "";
				КонецЕсли;
				Если РассчитыватьИтогиВидаУчета И УровеньВидаУчета > УровеньОрганизации Тогда
					ВидУчетаДляИтогов = "";
				КонецЕсли;
				СчетчикОрганизаций = СчетчикОрганизаций + 1;
				Для Индекс = 0 По ПараметрыОтчета.КоличествоПоказателей - 1 Цикл
					Для ПодИндекс = 1 По 6 Цикл
						ЭлементРезультата.ЗначенияПараметров[
							Строка(ПараметрыОтчета.МакетОрганизация.Макет[Индекс].
								Ячейки[ПодИндекс + СмещениеПоСтроке].Элементы[0].Значение)].Значение = "#Организация" + СчетчикОрганизаций + "_" + Индекс + "_" + ПодИндекс + "#";
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если РассчитыватьИтогиПодразделения И ПараметрыОтчета.Свойство("МакетПодразделение") Тогда
		Если ЭлементРезультата.Макет = ПараметрыОтчета.МакетПодразделение.Имя Тогда
			Если ПодразделениеДляИтогов <> ЭлементРезультата.ЗначенияПараметров.П1.Значение Тогда
				Если СчетчикПодразделений <> 0 Тогда
					Для Индекс = 0 По ПараметрыОтчета.КоличествоПоказателей - 1 Цикл
						СтрокаИтогов = ТаблицаИтогов.Добавить();
						СтрокаИтогов.Группировка = "Подразделение" + СчетчикПодразделений + "_" + Индекс;
						СтрокаИтогов.Показатель = Строка(Индекс);
						Для ПодИндекс = 1 По 6 Цикл
							СтрокаИтогов["_" + Строка(ПодИндекс)] = ИтогиПодразделения[ПодИндекс - 1][Индекс];
							ИтогиПодразделения[ПодИндекс - 1][Индекс]= 0;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				ПодразделениеДляИтогов = ЭлементРезультата.ЗначенияПараметров.П1.Значение;
				Если РассчитыватьИтогиОрганизации И УровеньПодразделения < УровеньОрганизации Тогда
					ОрганизацияДляИтогов = "";
				КонецЕсли;
				Если РассчитыватьИтогиВидаУчета И УровеньПодразделения < УровеньВидаУчета Тогда
					ВидУчетаДляИтогов = "";
				КонецЕсли;
				СчетчикПодразделений = СчетчикПодразделений + 1;
				Для Индекс = 0 По ПараметрыОтчета.КоличествоПоказателей - 1 Цикл
					Для ПодИндекс = 1 По 6 Цикл
						ЭлементРезультата.ЗначенияПараметров[
							Строка(ПараметрыОтчета.МакетПодразделение.Макет[Индекс].
								Ячейки[ПодИндекс + СмещениеПоСтроке].Элементы[0].Значение)].Значение = "#Подразделение" + СчетчикПодразделений + "_" + Индекс + "_" + ПодИндекс + "#";
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если РассчитыватьИтогиВидаУчета И ПараметрыОтчета.Свойство("МакетВидУчета") Тогда
		Если ЭлементРезультата.Макет = ПараметрыОтчета.МакетВидУчета.Имя Тогда
			Если ВидУчетаДляИтогов <> ЭлементРезультата.ЗначенияПараметров.П1.Значение Тогда
				Если СчетчикВидовУчета <> 0 Тогда
					Для Индекс = 0 По ПараметрыОтчета.КоличествоПоказателей - 1 Цикл
						СтрокаИтогов = ТаблицаИтогов.Добавить();
						СтрокаИтогов.Группировка = "ВидУчета" + СчетчикВидовУчета + "_" + Индекс;
						СтрокаИтогов.Показатель = Строка(Индекс);
						Для ПодИндекс = 1 По 6 Цикл
							СтрокаИтогов["_" + Строка(ПодИндекс)] = ИтогиВидаУчета[ПодИндекс - 1][Индекс];
							ИтогиВидаУчета[ПодИндекс - 1][Индекс]= 0;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				ВидУчетаДляИтогов = ЭлементРезультата.ЗначенияПараметров.П1.Значение;
				Если РассчитыватьИтогиОрганизации И УровеньВидаУчета < УровеньОрганизации Тогда
					ОрганизацияДляИтогов = "";
				КонецЕсли;
				Если РассчитыватьИтогиПодразделения И УровеньВидаУчета < УровеньПодразделения Тогда
					ПодразделениеДляИтогов = "";
				КонецЕсли;
				СчетчикВидовУчета = СчетчикВидовУчета + 1;
				Для Индекс = 0 По ПараметрыОтчета.КоличествоПоказателей - 1 Цикл
					Для ПодИндекс = 1 По 6 Цикл
						ЭлементРезультата.ЗначенияПараметров[
							Строка(ПараметрыОтчета.МакетВидУчета.Макет[Индекс].
								Ячейки[ПодИндекс + СмещениеПоСтроке].Элементы[0].Значение)].Значение = "#ВидУчета" + СчетчикВидовУчета + "_" + Индекс + "_" + ПодИндекс + "#";
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец - Ручной расчет итогов по группировкам
	
	ДанныеРасчетаИтогов.Вставить("ВидУчетаДляИтогов"             , ВидУчетаДляИтогов);
	ДанныеРасчетаИтогов.Вставить("ОрганизацияДляИтогов"          , ОрганизацияДляИтогов);
	ДанныеРасчетаИтогов.Вставить("ПодразделениеДляИтогов"        , ПодразделениеДляИтогов);
	ДанныеРасчетаИтогов.Вставить("СчетчикВидовУчета"             , СчетчикВидовУчета);
	ДанныеРасчетаИтогов.Вставить("СчетчикОрганизаций"            , СчетчикОрганизаций);
	ДанныеРасчетаИтогов.Вставить("СчетчикПодразделений"          , СчетчикПодразделений);
	ДанныеРасчетаИтогов.Вставить("ИтогиВидаУчета"                , ИтогиВидаУчета);
	ДанныеРасчетаИтогов.Вставить("ИтогиОрганизации"              , ИтогиОрганизации);
	ДанныеРасчетаИтогов.Вставить("ИтогиПодразделения"            , ИтогиПодразделения);
	ДанныеРасчетаИтогов.Вставить("ТаблицаИтогов"                 , ТаблицаИтогов);
	ДанныеРасчетаИтогов.Вставить("РассчитыватьИтогиВидаУчета"    , РассчитыватьИтогиВидаУчета);
	ДанныеРасчетаИтогов.Вставить("РассчитыватьИтогиОрганизации"  , РассчитыватьИтогиОрганизации);
	ДанныеРасчетаИтогов.Вставить("РассчитыватьИтогиПодразделения", РассчитыватьИтогиПодразделения);
	ДанныеРасчетаИтогов.Вставить("УровеньВидаУчета"              , УровеньВидаУчета);
	ДанныеРасчетаИтогов.Вставить("УровеньОрганизации"            , УровеньОрганизации);
	ДанныеРасчетаИтогов.Вставить("УровеньПодразделения"          , УровеньПодразделения);
	ДанныеРасчетаИтогов.Вставить("УровеньСчета"                  , УровеньСчета);
		
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	ДанныеРасчетаИтогов = ПараметрыОтчета.ДанныеРасчетаИтогов;
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
	Индекс = Результат.ВысотаТаблицы;
	Пока Индекс > 0 Цикл
		ИндексСтроки = "R" + Формат(Индекс,"ЧГ=0");
		Если Результат.Область(ИндексСтроки).ВысотаСтроки = 1 Тогда
			Результат.УдалитьОбласть(Результат.Область(ИндексСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	// Зафиксируем заголовок отчета
	Если Результат.Области.Найти("Заголовок") = Неопределено Тогда
		Результат.ФиксацияСверху = ПараметрыОтчета.ВысотаШапки;
	Иначе
		Результат.ФиксацияСверху = Результат.Области.Заголовок.Низ + ПараметрыОтчета.ВысотаШапки;
	КонецЕсли;
	
	// Начало - Ручной расчет итогов по группировкам
	Для каждого СтрокаИтогов Из ДанныеРасчетаИтогов.ТаблицаИтогов Цикл
		Для НомерИтога = 1 По 6 Цикл
			ОбластьДляЗамены = Результат.НайтиТекст("#" + СтрокаИтогов.Группировка + "_" + НомерИтога + "#");
			Если ОбластьДляЗамены <> Неопределено Тогда
				ОбластьДляЗамены.Текст = СтрокаИтогов["_" + НомерИтога];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	// Конец - Ручной расчет итогов по группировкам
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьТекстПоМаркерам(Текст, МаркерНачало, МаркерКонец)
	
	ПозицияМаркерНачало = Найти(Текст, МаркерНачало) + СтрДлина(МаркерНачало);
	ПозицияМаркерКонец  = Найти(Текст, МаркерКонец);
	
	Возврат СокрЛП(Сред(Текст, ПозицияМаркерНачало, ПозицияМаркерКонец - ПозицияМаркерНачало - 1));
	
КонецФункции


#КонецЕсли