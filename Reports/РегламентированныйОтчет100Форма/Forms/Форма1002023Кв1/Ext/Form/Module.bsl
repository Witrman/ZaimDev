///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	мВыбраннаяФорма = "Форма1002023Кв1";
	КодФормы 		= "Форма100";
	
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруФормРегОтчета(ЭтотОбъект);	
	
	СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями"); // вынести в переопределяемый модуль	
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов   = Новый СписокЗначений;	
	СтруктураРеквизитовФормы.мПечатныеформы 		  = Новый СписокЗначений;			
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
	СтруктураРеквизитовФормы.НомерСтраницыПриложений  = "001";
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);
	
	ДатаПодписи	= ТекущаяДатаСеанса();		
	
	мФорматНомераСтроки = "ЧЦ=8; ЧВН=; ЧГ=";	
	
	ЗаполнитьСведенияОбОтчетномПериоде();
	
	//индивидуальные ключи формы
	СтруктураРеквизитовФормы.КодСтрокиДоходОтКурсовойРазницы   = "100.00.014.226-1-18.K";
	СтруктураРеквизитовФормы.КодСтрокиРасходыПоКурсовойРазнице = "100.00.035.K";
	
	СтруктураРеквизитовФормы.ИмяДокументаРегламентныеОперацииЗакрытияСчетовНУ = "";
	Если Метаданные.Документы.Найти("ЗакрытиеМесяца") = Неопределено Тогда
		// в конфигурации УПП может использоваться документ "РегламентныеОперацииПоБухгалтерскомуУчету"
		Если Метаданные.Документы.Найти("РегламентныеОперацииПоБухгалтерскомуУчету") <> Неопределено Тогда
			СтруктураРеквизитовФормы.ИмяДокументаРегламентныеОперацииЗакрытияСчетовНУ = "РегламентныеОперацииПоБухгалтерскомуУчету";
		КонецЕсли;
	Иначе
		СтруктураРеквизитовФормы.ИмяДокументаРегламентныеОперацииЗакрытияСчетовНУ = "ЗакрытиеМесяца";
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕстьИзмерениеСП = Метаданные.РегистрыБухгалтерии.Налоговый.Измерения.Найти("СтруктурноеПодразделение") <> Неопределено;
	СтруктураРеквизитовФормы.ВедениеВРБалансовымМетодом = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Налогоплательщик, СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	
	МетаданныеОбъекта = Метаданные.ПланыСчетов.Типовой;
	НаименованиеСчета = "ТоварыПереданныеНаКомиссию";
	
	СтруктураРеквизитовФормы.СчетТоварыПереданныеНаКомиссию = ОбщегоНазначенияБК.ЕстьПредопределенныйЭлемент(НаименованиеСчета, МетаданныеОбъекта);
	
	СписокРасчетов = Элементы.СписокРасчетов.СписокВыбора[0].Значение;
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
			ЗаполнитьПараметры(ТекФорма.КодФормы);
		КонецЕсли;	
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекФорма.КодФормы);
	КонецЦикла;	
	
	мМакетКодовСтрок = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("КодыСтрокНалоговыхДеклараций");
	
	////////////////////////////////////////////////////////////////////////////////
	// Подключаемые
	ОтчетыПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы) 
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если Модифицированность Тогда 
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);	
		ТекстВопроса = НСТР("ru = 'Сохранить данные отчета?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если КодФормы = "Форма100_01" Тогда
		Форма100_01ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ОтражениеНалоговойОтчетностиВРеглУчете" Тогда
		Элементы.ФормаОтражениеВУчете.Заголовок = ПолучитьЗаголовокОтражениеВУчете(Источник);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)	
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.КодФормы = Элемент.ТекущиеДанные.КодФормы Тогда
		ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);
		Возврат;
	КонецЕсли;	
	
	РазделыОтчетаПриАктивизацииСтрокиНаСервере(Элемент.ТекущиеДанные.КодФормы, Элемент.ТекущиеДанные.Многострочность);	
	
	//из-за проблем отображения в вебе
	
	//СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	//Для Каждого СтраницаФорм из Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы Цикл
	//	Элементы[СтраницаФорм.Имя].Видимость = СтраницаФорм.Имя = ЭтаФорма.КодФормы;	
	//КонецЦикла;
	
	Элементы[ЭтаФорма.КодФормы].Видимость = Ложь;
	Элементы[Элемент.ТекущиеДанные.КодФормы].Видимость = Истина;
	Элементы.ГруппаСтраницыОтчета.ТекущаяСтраница = Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы[ЭтаФорма.КодФормы]; 		
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;

	ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);
	
КонецПроцедуры

&НаСервере
Процедура РазделыОтчетаПриАктивизацииСтрокиНаСервере(НовыйКодФормы, НовыйПризнакМногострочность)	
	
	//проверим, что стояли не на основной, итоги передаем только когда переходим из доп.форм
	ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	Если ТекФорма <> Неопределено И Не ТекФорма.ПризнакОсновной Тогда
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы, Истина);		
	КонецЕсли;	
	
	// установим новые значения реквизитам формы
	ЭтаФорма.КодФормы = НовыйКодФормы;	
	
	//передаем данные из структуры в ТП
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	
	
	Если  НовыйПризнакМногострочность Тогда
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтотОбъект);
	КонецЕсли;
	
	
КонецПроцедуры	

&НаКлиенте
Процедура СписокРасчетовПриИзменении(Элемент)
	
	ЗаполнитьВидРасчета(СписокРасчетов);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(мСписокСтруктурныхЕдиниц, ЭтаФорма, СтандартнаяОбработка, "", Налогоплательщик,, 
	ПредопределенноеЗначение("Перечисление.РазделыНалоговогоУчета.КПН"), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Комментарий");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма100ПолеТабличногоДокументаСтраница1

&НаКлиенте
Процедура Форма100ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Ячейка = Область.Имя;
	
	Если Область.СодержитЗначение Тогда
		Значение = Область.Значение;
	Иначе
		Возврат;		
	КонецЕсли;
	
	Если НЕ Найти(Область.Имя, "s_100_00_0") = 0 Тогда			
		Форма100РасчетНаСервере(Ячейка, Значение, КодФормы);
	Иначе
		Если ЗначениеЗаполнено(Ячейка) Тогда		
			ПередатьЗначениеВСтруктуруНаСервере(Ячейка, Значение);					
		КонецЕсли; 		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Форма100ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;
	
	Если (Найти(Ячейка, "КатегорияA") > 0) 
		ИЛИ (Найти(Ячейка, "КатегорияB") > 0)
		ИЛИ (Найти(Ячейка, "МФЦА") > 0)
		ИЛИ (Найти(Ячейка, "ПостоянноеУчереждениеЗаРК") > 0) Тогда
		Если Область.Значение = "Х" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "Х";
		КонецЕсли;
		
		ПередатьЗначениеВСтруктуруНаСервере(Ячейка, Область.Значение);
		
	КонецЕсли;
	
	Если (Найти(Ячейка, "РезидентРК") > 0) Тогда 
		Если Область.Значение = "Х" Тогда
			Область.Значение = "";
			
			ПередатьЗначениеВСтруктуруНаСервере(Ячейка, Область.Значение);
			
			Форма100ПолеТабличногоДокументаСтраница1.Области.КодСтраныРезеденства.Защита			   = Ложь;
			Форма100ПолеТабличногоДокументаСтраница1.Области.НомерНалоговойРегСтраныРезеденства.Защита = Ложь;
			
		Иначе
			Область.Значение = "Х";
			НерезидентРК = Форма100ПолеТабличногоДокументаСтраница1.Области.Найти("НерезидентРК");
			НерезидентРК.Значение = "";
			
			МассивИменЯчеек = Новый Массив;
			МассивИменЯчеек.Добавить(Строка(Ячейка));
			МассивИменЯчеек.Добавить("НерезидентРК");
			
			МассивЗначений = Новый Массив;
			МассивЗначений.Добавить(Область.Значение);
			МассивЗначений.Добавить(НерезидентРК.Значение);
			
			ПередатьЗначениеВСтруктуруНаСервере(МассивИменЯчеек, МассивЗначений);
			
			МассивИменЯчеек = Новый Массив;
			МассивИменЯчеек.Добавить("КодСтраныРезеденства");
			МассивИменЯчеек.Добавить("НомерНалоговойРегСтраныРезеденства");
			
			МассивЗначений = Новый Массив;
			МассивЗначений.Добавить("");
			МассивЗначений.Добавить("");
			
			ПередатьЗначениеВСтруктуруНаСервере(МассивИменЯчеек, МассивЗначений, Истина);
			
			Форма100ПолеТабличногоДокументаСтраница1.Области.КодСтраныРезеденства.Защита 			   = Истина;
			Форма100ПолеТабличногоДокументаСтраница1.Области.НомерНалоговойРегСтраныРезеденства.Защита = Истина;
			
		КонецЕсли;		
	ИначеЕсли (Найти(Ячейка, "НерезидентРК") > 0) Тогда 
		Если Область.Значение = "Х" Тогда
			Область.Значение = "";
			
			МассивИменЯчеек = Новый Массив;
			МассивИменЯчеек.Добавить("КодСтраныРезеденства");
			МассивИменЯчеек.Добавить("НомерНалоговойРегСтраныРезеденства");
			
			МассивЗначений = Новый Массив;
			МассивЗначений.Добавить("");
			МассивЗначений.Добавить("");
			
			ПередатьЗначениеВСтруктуруНаСервере(Ячейка, Область.Значение);
			ПередатьЗначениеВСтруктуруНаСервере(МассивИменЯчеек, МассивЗначений, Истина);
			
			Форма100ПолеТабличногоДокументаСтраница1.Области.КодСтраныРезеденства.Защита  			   = Истина;
			Форма100ПолеТабличногоДокументаСтраница1.Области.НомерНалоговойРегСтраныРезеденства.Защита = Истина;				
			
		Иначе
			
			Область.Значение = "Х";
			РезидентРК = Форма100ПолеТабличногоДокументаСтраница1.Области.Найти("РезидентРК");
			РезидентРК.Значение = "";
			
			МассивИменЯчеек = Новый Массив;
			МассивИменЯчеек.Добавить(Строка(Ячейка));
			МассивИменЯчеек.Добавить("РезидентРК");
			
			МассивЗначений = Новый Массив;
			МассивЗначений.Добавить(Область.Значение);
			МассивЗначений.Добавить(РезидентРК.Значение);
			
			ПередатьЗначениеВСтруктуруНаСервере(Ячейка, Область.Значение);
			ПередатьЗначениеВСтруктуруНаСервере(МассивИменЯчеек, МассивЗначений, Истина);
			
			Форма100ПолеТабличногоДокументаСтраница1.Области.КодСтраныРезеденства.Защита 			   = Ложь;
			Форма100ПолеТабличногоДокументаСтраница1.Области.НомерНалоговойРегСтраныРезеденства.Защита = Ложь;	
			
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма100ПолеТабличногоДокументаСтраница2

&НаКлиенте
Процедура Форма100ПолеТабличногоДокументаСтраница2ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Ячейка = Область.Имя;
	
	Если Область.СодержитЗначение Тогда
		Значение = Область.Значение;
	Иначе
		Возврат;		
	КонецЕсли;
	
	Если НЕ Найти(Область.Имя, "s_100_00_0") = 0 Тогда			
		Форма100РасчетНаСервере(Ячейка, Значение, КодФормы);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма100ПолеТабличногоДокументаСтраница3

&НаКлиенте
Процедура Форма100ПолеТабличногоДокументаСтраница3ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Ячейка = Область.Имя;
	
	Если Область.СодержитЗначение Тогда
		Значение = Область.Значение;
	Иначе
		Возврат;		
	КонецЕсли;
	
	Если НЕ Найти(Область.Имя, "s_100_00_0") = 0 Тогда			
		Форма100РасчетНаСервере(Ячейка, Значение, КодФормы);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма100ПолеТабличногоДокументаСтраница4

&НаКлиенте
Процедура Форма100ПолеТабличногоДокументаСтраница4ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Ячейка = Область.Имя;
	
	Если Область.СодержитЗначение Тогда
		Значение = Область.Значение;
	Иначе
		Возврат;		
	КонецЕсли;
	
	Если НЕ Найти(Область.Имя, "s_100_00_0") = 0 Тогда			
		Форма100РасчетНаСервере(Ячейка, Значение, КодФормы);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма100ПолеТабличногоДокументаСтраница5

&НаКлиенте
Процедура Форма100ПолеТабличногоДокументаСтраница5ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Ячейка = Область.Имя;
	
	Если Область.СодержитЗначение Тогда
		Значение = Область.Значение;
	Иначе
		Возврат;		
	КонецЕсли;
	
	Если НЕ Найти(Область.Имя, "s_100_00_0") = 0 Тогда			
		Форма100РасчетНаСервере(Ячейка, Значение, КодФормы);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма100ПолеТабличногоДокументаСтраница6

&НаКлиенте
Процедура Форма100ПолеТабличногоДокументаСтраница6ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Ячейка = Область.Имя;
	
	Если Область.СодержитЗначение Тогда
		Значение = Область.Значение;
	Иначе
		Возврат;		
	КонецЕсли;
	
	Если НЕ Найти(Область.Имя, "s_100_00_0") = 0 Тогда			
		Форма100РасчетНаСервере(Ячейка, Значение, КодФормы);
	Иначе
		Если ЗначениеЗаполнено(Ячейка) Тогда		
			ПередатьЗначениеВСтруктуруНаСервере(Ячейка, Значение);					
		КонецЕсли; 		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ

&НаКлиенте
Процедура Форма100ПолеТабличногоДокументаСтраницаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Элемент.ТекущаяОбласть.Имя;
	
	ПоложениеПризнакаКлассификатора = СтрНайти(Ячейка, "_dic__");

	Если ПоложениеПризнакаКлассификатора <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	
		ИмяРаздела = Сред(Ячейка, 3, ПоложениеПризнакаКлассификатора - 3);
		КодРаздела = Прав(ИмяРаздела, 3);
		ИмяОбласти = "НалогНаПрибыль_" + ИмяРаздела;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИмяМакета"			  	, "КодыСтрокНалоговыхДеклараций");
		ПараметрыФормы.Вставить("ИмяСекции"			  	, ИмяОбласти);
		ПараметрыФормы.Вставить("ПолучатьПолныеДанные"	, Истина);
		ПараметрыФормы.Вставить("ТекущийКодСтроки"	  	, Элемент.ТекущаяОбласть.Значение);
		ПараметрыФормы.Вставить("ИмяЯчейки"	  			, Ячейка);
		ПараметрыФормы.Вставить("ПолеТабличногоДокументаСтраница", Элемент.Имя);
		ПараметрыФормы.Вставить("АдресМакета"           , ПолучитьАдресМакетаКодовСтрок());
		
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма100ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыФормы);
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура  Форма100ОбработкаВыбораЗначений(Результат, ПараметрыВыбора) Экспорт 

	Если Результат = Неопределено Тогда
		Возврат;
	Иначе
		ВыбранноеЗначение = Результат;
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 
			ВыбранноеЗначение = ВыбранноеЗначение.КодСтроки;
		КонецЕсли;
	КонецЕсли;
	
	Форма100ОбработкаВыбораЗначенийНаСервере(ВыбранноеЗначение, ПараметрыВыбора.ИмяЯчейки, ПараметрыВыбора.ПолеТабличногоДокументаСтраница); 	
	
КонецПроцедуры

&НаСервере
Процедура Форма100ОбработкаВыбораЗначенийНаСервере(Результат, ИмяЯчейки, ПолеТабличногоДокументаСтраница)
	
	Если Результат <> "" Тогда
		ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, "Форма100");
		Для Сч = 1 По 5 Цикл
			ИмяОбласти = СтрЗаменить(ИмяЯчейки, "__" + Прав(ИмяЯчейки, 1), "__" + Сч);
			КодыПодстрокПоКлассификатору = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяОбласти);
			МассивКодовПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодыПодстрокПоКлассификатору, ";");
			Для Каждого КодПодстрокиПоКлассификатору Из МассивКодовПодстрок Цикл
				Если КодПодстрокиПоКлассификатору = Результат Тогда
					КодСтрокиДекларации = ПреобразоватьИмяЯчейкиВКодСтрокиДекларации(СтрЗаменить(ИмяОбласти, "_dic", ""));
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Код <%1> уже выбран в строке %2!'"),
						Результат, КодСтрокиДекларации);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 									
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	//Если Результат <> "" Тогда
	//	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, "Форма100");
	//	СуществующаяСтрока = ТаблицаДанных.Найти(Результат, "Значение");
	//	Если СуществующаяСтрока <> Неопределено И ИмяЯчейки <> СуществующаяСтрока.ИмяОбласти Тогда
	//		КодСтрокиДекларации = ПреобразоватьИмяЯчейкиВКодСтрокиДекларации(СтрЗаменить(СуществующаяСтрока.ИмяОбласти, "_dic", ""));
	//		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Код <%1> уже выбран в строке %2!'"),
	//			Результат, КодСтрокиДекларации);
	//		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 									
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	
	ЭтотОбъект[ПолеТабличногоДокументаСтраница].Области[ИмяЯчейки].Значение = Результат;
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, "Форма100", ИмяЯчейки, Результат, Ложь);

	Если СтрНайти(ИмяЯчейки, "014_dic") <> 0 ИЛИ СтрНайти(ИмяЯчейки, "016_dic") <> 0 Тогда
		ИмяЯчейкиЗначения = СтрЗаменить(ИмяЯчейки, "_dic", "");
		Форма100РасчетНаСервере(ИмяЯчейкиЗначения, ЭтотОбъект[ПолеТабличногоДокументаСтраница].Области[ИмяЯчейкиЗначения].Значение, "Форма100");
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма100_01ПолеТабличногоДокументаСтраница1

&НаКлиенте
Процедура Форма100_01ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;			 
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница1");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);	
	
	Если (Найти(Ячейка, "Ф100_01_B__")> 0) ИЛИ (Найти(Ячейка, "Ф100_01_C__")> 0) ИЛИ (Найти(Ячейка, "Ф100_01_D__")> 0) Тогда
		
		НачЗначение = Область.Значение;		
		ЗначениеРасшифровки = Область.Расшифровка;    		
		
		//может быть не заполнена расшировка ячейки при восстановления данных старых форм
		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			ИмяЯчейкиРасшифровки = "Ф100_01_B" + Сред(Ячейка, Найти(Ячейка, "__"));
			ОбластьРасширофвки = Форма100_01ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяЯчейкиРасшифровки);
			Если ОбластьРасширофвки <> Неопределено Тогда 
				ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;
				Область.Расшифровка = ЗначениеРасшифровки;
				ПередатьЗначениеВСтруктуруНаСервере(Ячейка, НачЗначение,,, ЗначениеРасшифровки);
			КонецЕсли;				 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НачЗначение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			Возврат;
		КонецЕсли;                                   			
		
		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбора",, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца) ;
		
	ИначеЕсли (Найти(Ячейка, "Ф100_01_E__") > 0) Тогда
		СтандартнаяОбработка = Ложь;
		НачЗначение = Область.Значение;
		
		ПараметрыСтраницы.Вставить("ПроверитьВидРасхода", Истина);
		
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы);
		ПоказатьВводЧисла(ОповещениеВводаЗначений, НачЗначение, НСтр("ru='Введите код вида расхода'"), 1, 0);
		
	Иначе
		Возврат;
	КонецЕсли;  
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма100_01ПолеТабличногоДокументаСтраница1

&НаКлиенте
Процедура Форма100_01ПолеТабличногоДокументаСтраница2Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница2");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	
	Ячейка = Область.Имя;	
	
	Если (Найти(Ячейка, "Ф100_01_") > 0) Тогда
		НачЗначение = Область.Значение;
		
		Если (Найти(Ячейка, "Ф100_01_F__") > 0) Тогда
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы);
			ПоказатьВводЧисла(ОповещениеВводаЗначений, НачЗначение, НСтр("ru='Введите сумму расходов'"), 15, 0);
		КонецЕсли;   		
		
		Если (Найти(Ячейка, "Ф100_01_G__") > 0) Тогда
			ПараметрыСтраницы.Вставить("ПроверитьПризнакВидаДеятельности", Истина);
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы);
			ПоказатьВводЧисла(ОповещениеВводаЗначений, НачЗначение, НСтр("ru='Введите признак вида деятельности'"), 1, 0);			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма100_02ПолеТабличногоДокументаСтраница1

&НаКлиенте
Процедура Форма100_02ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Ячейка = Область.Имя;
	
	Если Область.СодержитЗначение Тогда
		Значение = Область.Значение;
	Иначе
		Возврат;		
	КонецЕсли;
	
	Если НЕ Найти(Область.Имя, "s_100_02_0") = 0 Тогда			
		Форма100_02РасчетНаСервере(Ячейка, Значение, КодФормы);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма100_02ПолеТабличногоДокументаСтраница2

&НаКлиенте
Процедура Форма100_02ПолеТабличногоДокументаСтраница2ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Ячейка = Область.Имя;
	
	Если Область.СодержитЗначение Тогда
		Значение = Область.Значение;
	Иначе
		Возврат;		
	КонецЕсли;
	
	Если НЕ Найти(Область.Имя, "s_100_02_0") = 0 Тогда			
		Форма100_02РасчетНаСервере(Ячейка, Значение, КодФормы);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма100_07ПолеТабличногоДокументаСтраница1

&НаКлиенте
Процедура Форма100_07ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Ячейка = Область.Имя;
	
	Если Область.СодержитЗначение Тогда
		Значение = Область.Значение;
	Иначе
		Возврат;		
	КонецЕсли;
	
	Если (Найти(Область.Имя, "s_100_07_") > 0) Тогда
		Форма100_07РасчетНаСервере(Ячейка, Значение, КодФормы);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма100_07ПолеТабличногоДокументаСтраница2

&НаКлиенте
Процедура Форма100_07ПолеТабличногоДокументаСтраница2ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Ячейка = Область.Имя;
	
	Если Область.СодержитЗначение Тогда
		Значение = Область.Значение;
	Иначе
		Возврат;		
	КонецЕсли;
	
	Если (Найти(Область.Имя, "s_100_07_") > 0) Тогда
		Форма100_07РасчетНаСервере(Ячейка, Значение, КодФормы);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыФормы.Вставить("Налогоплательщик",         Налогоплательщик);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, мВыбраннаяФорма, "") + "ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ДобавитьСтрокуНаСервере();
	
КонецПроцедуры      

&НаКлиенте
Процедура ПредыдущаяСтр(Команда)
	
	ПредыдущаяСтрНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СледующаяСтр(Команда)
	
	СледующаяСтрНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	УдалитьСтрокуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Перезаполнить = Истина; // Для выполнения запроса на пересчет данных к пользователю
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения =  РегламентированнаяОтчетностьКлиент.ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Перезаполнить Тогда		
		Если СтрокаФормы.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстВопроса = "Перезаполнить данные формы и ее дополнительных форм?";
		Иначе
			ТекстВопроса = "Перезаполнить данные формы?";
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);
		Оповещение.ДополнительныеПараметры.Вставить("Перезаполнить", Перезаполнить);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);		
		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВXML(Команда)
	
	ГодФормирования = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	
	Если 2023 < ГодФормирования Тогда 
		ТекстСообщения = НСтр("ru = 'Отчет не предназначен для выгрузки в XML в период формирования " + Формат(ГодФормирования, "ЧГ=0") + " г." + Символы.ПС + 
		"Пожалуйста, обновите комплект отчетов.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);		
		Возврат;
	КонецЕсли;
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект);	
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	 	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохраненияФайла.ПолноеИмяФайла = КодФормы + " " + СтруктураРеквизитовФормы.мГод + "г" + ".xml";
		ДиалогСохраненияФайла.Фильтр = РегламентированнаяОтчетностьКлиентСервер.ФильтрДиалоговВыбораИСохраненияРегламентированногоОтчета();	
		ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
		ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите файл'");		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
		ДиалогСохраненияФайла.Показать(ОписаниеОповещения);
	Иначе   
		НачатьПолучениеФайлаССервера(ВыгрузитьВXMLНаСервере(), КодФормы + ".xml"); 
	КонецЕсли;
	   
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресВременногоХранилища = ВыгрузитьВXMLНаСервере();
		
	ПолноеИмяФайла = Результат[0];
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, АдресВременногоХранилища));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяФайла",ПолноеИмяФайла); 
	Обработчик = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеЗавершение", ЭтотОбъект,ДополнительныеПараметры);
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
	ПараметрыСохранения.Интерактивно = Ложь;
	ФайловаяСистемаКлиент.СохранитьФайлы(Обработчик, ПолучаемыеФайлы, ПараметрыСохранения); 
	
	        
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ТекстЗаголовка = НСтр("ru = 'Данные успешно выгружены в файл'");
	
	СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДополнительныеПараметры.ИмяФайла);
	
	РабочийКаталог = СтруктураФайла.Путь;

	#Если НЕ ВебКлиент Тогда
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка, "file:///" + СтрЗаменить(СокрЛП(РабочийКаталог), "\", "/"),
		РабочийКаталог);
	#Иначе
		Если НЕ ЗначениеЗаполнено(ПолученныеФайлы) Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка,,
		РабочийКаталог);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПоСтроке(Команда)
	
	Попытка
		ИмяЯчейки = ЭтотОбъект.ТекущийЭлемент.ТекущаяОбласть.Имя;
	Исключение
		ПоказатьПредупреждение(,НСтр("ru = 'Активизируйте нужную ячейку отчета для расшифровки.'"));
		Возврат;
	КонецПопытки;
	
	Если (СтрНайти(ИмяЯчейки , "_dic__") > 0) Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки не поддерживается.
		|Расшифровку содержат ячейки формы, выделенные голубым цветом.'"));
		
	ИначеЕсли (СтрНайти(ИмяЯчейки , "s_100_00_") > 0) Тогда
		Если (СтрНайти(ИмяЯчейки , "s_100_00_014__") > 0) ИЛИ (СтрНайти(ИмяЯчейки , "s_100_00_016__") > 0) Тогда
			КодПодстроки = Форма100ПолеТабличногоДокументаСтраница2.Область(СтрЗаменить(ИмяЯчейки, "__", "_dic__")).Значение;
			Если ПустаяСтрока(КодПодстроки) Тогда
				ПоказатьПредупреждение(,НСтр("ru = 'Код строки не заполнен.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		МетодРасшифровки = Ложь;
		Форма100РасшифровкаСКД(ИмяЯчейки, МетодРасшифровки);
		
	ИначеЕсли (СтрНайти(ИмяЯчейки , "Ф100_01_") > 0) И Не ИмяЯчейки = "Ф100_01_F" Тогда
		МетодРасшифровки = Ложь; 
		Форма100_01Расшифровка(ИмяЯчейки, МетодРасшифровки);
		
	Иначе	
		ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки не поддерживается.
		|Расшифровку содержат ячейки формы, выделенные голубым цветом.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницу(Команда)
	
	ВыбСтраница = 1;
	
	ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаСтраницы", ЭтаФорма); 
	ПоказатьВводЧисла(ОповещениеВводаЗначений,ВыбСтраница, "Введите номер страницы", 5, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФорму(Команда)
	
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФормуИПриложения(Команда)
	
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФормуИПриложения");
	
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	ОткрытьФормуНастройкиСтраниц()
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчете(Команда)
	
	СохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(СохраненныйДок) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Регламентированный отчет не записан в информационной базе.'"));
		Возврат;
	КонецЕсли;
	
	ДокументОтраженияВУчете = ПолучитьЗначениеРеквизита(СохраненныйДок, "ДокументОтраженияВУчете");
	
	Если ЗначениеЗаполнено(ДокументОтраженияВУчете) Тогда
		РегламентированнаяОтчетностьКлиент.ОткрытьДокументОтраженияНалОтчетностиВУчете(СохраненныйДок, ДокументОтраженияВУчете, ЭтотОбъект);
	Иначе
		РегламентированнаяОтчетностьКлиент.СоздатьДокументОтраженияНалОтчетностиВУчете(СохраненныйДок, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ПРОЦЕДУРЫ И ФУНКЦЦИИ

&НаСервере
Процедура ПредыдущаяСтрНаСервере()
	
	ТекущаяСтраница = ТекущаяСтраница - 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СледующаяСтрНаСервере()
	
	ТекущаяСтраница = ТекущаяСтраница + 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокСтруктурныхЕдиниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");			
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("НалоговыйКомитет");				
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");	
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");	
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");		
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");	
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрг");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");	
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");		
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");	
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);	
	СтруктураРеквизитовФормы.Вставить("мГод");	
	СтруктураРеквизитовФормы.Вставить("мКвартал");	
	СтруктураРеквизитовФормы.Вставить("мМесяц");	
	// индивидуальные параметры формы
	СтруктураРеквизитовФормы.Вставить("мПоддержкаРаботыСоСтруктурнымиПодразделениями");
	СтруктураРеквизитовФормы.Вставить("КодСтрокиДоходОтКурсовойРазницы");		
	СтруктураРеквизитовФормы.Вставить("КодСтрокиРасходыПоКурсовойРазнице");		
	
	СтруктураРеквизитовФормы.Вставить("ИмяДокументаРегламентныеОперацииЗакрытияСчетовНУ");
	СтруктураРеквизитовФормы.Вставить("ЕстьИзмерениеСП");
	СтруктураРеквизитовФормы.Вставить("ВедениеВРБалансовымМетодом");
	СтруктураРеквизитовФормы.Вставить("СчетТоварыПереданныеНаКомиссию");
	
	СтруктураРеквизитовФормы.Вставить("НомерСтраницыПриложений");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтчетномПериоде() Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ФП = истина");
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
		СтруктураРеквизитовФормы.мКвартал = Лев(СтрПериодОтчета, 1);
		СтруктураРеквизитовФормы.мМесяц = Неопределено;
	Иначе
		СтруктураРеквизитовФормы.мМесяц = Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		СтруктураРеквизитовФормы.мКвартал = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мГод = Лев(Прав(СтрПериодОтчета, 7), 4);
	
КонецПроцедуры 

&НаСервере
Процедура СохранитьнаСервере()
	
	РегламентированнаяОтчетность.СохранитьОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда		
		мСписокСтруктурныхЕдиниц = Результат;		
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц); 		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСтраницы(Значение, Параметры) Экспорт
	
	Если НЕ Значение = Неопределено Тогда  
		
		ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
		Если ТекФорма = Неопределено Тогда
			ВсегоСтраниц = 1;
		Иначе
			ВсегоСтраниц = ТекФорма.ВсегоСтраниц;
		КонецЕсли;		
		
		Если Значение = 0 Тогда
			ТекущаяСтраница = 1;
		ИначеЕсли Значение > ВсегоСтраниц Тогда
			ТекущаяСтраница = ВсегоСтраниц;
		Иначе
			ТекущаяСтраница = Значение;				
		КонецЕсли;
		
		ПослеВводаСтраницыНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеВводаСтраницыНаСервере()
	
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////
//Очистка

&НаСервере
Процедура Очистить(ТекИмяФормы, ОчиститьВсе = Ложь) Экспорт
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	
	// Список ячеек, очищать которые не нужно
	Если ОчиститьВсе Тогда
		Если ТекИмяФормы = Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7) Тогда 
			СписокПоказателейНеПодлежащихОчистке.Добавить("КодВалюты");								
		ИначеЕсли ТекИмяФормы = "Форма100_02_02" Тогда 
			СписокПоказателейНеПодлежащихОчистке.Добавить("НомерСтраницы");
			СписокПоказателейНеПодлежащихОчистке.Добавить("НомерСтраницы1");
			СписокПоказателейНеПодлежащихОчистке.Добавить("НомерСтраницы2");
			СписокПоказателейНеПодлежащихОчистке.Добавить("НомерСтраницы3");			
		КонецЕсли;
	Иначе
		СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
		СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Год");
		СписокПоказателейНеПодлежащихОчистке.Добавить("НомерУведомления");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаУведомления");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Нерезидент");
		СписокПоказателейНеПодлежащихОчистке.Добавить("НаличиеУчр");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Условие1");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Условие2");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Условие3");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Условие4");
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодНалоговогоОргана");
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОчиститьСтруктуруДанныхИТабличноеПолеФормы(ЭтаФорма, ТекИмяФормы, ОчиститьВсе, СписокПоказателейНеПодлежащихОчистке);
	
	Если ТекИмяФормы = Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7) Тогда
		мСтруктураЗначений.Очистить();
	КонецЕсли;
	
КонецПроцедуры // Очистить()

&НаКлиенте
Процедура ОчиститьРеглОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Форма = ДополнительныеПараметры.Форма;	
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", Форма.КодФормы));
		Вложенность = ДополнительныеПараметры.ОчищатьПриложения;	
		
		ОчиститьРеглОтчетЗавершениеНаСервере(СтрокаФормы.КодФормы, СтрокаФормы.Многострочность, Вложенность)	
	КонецЕсли;
	
КонецПроцедуры 	

&НаСервере
Процедура ОчиститьРеглОтчетЗавершениеНаСервере(КодФормы, ПризнакМногострочности, Вложенность) Экспорт
	
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, ПризнакМногострочности, Вложенность);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////
// Печать

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок),,, БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати,, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Перем СтруктураГруппы;  
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ТекстСообщения = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");			
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);				
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		ВыборРасчета(КодФормы);		
	КонецЕсли; 
	
	РегламентированнаяОтчетность.СформироватьСписокПечатаемыхЛистов(ЭтаФорма);	       		
	
	Возврат Истина;                                                           
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////
// Выгрузка в ХМL 

&НаСервере
Функция ВыгрузитьВXMLНаСервере(ВыдаватьСообщение = Ложь)
	
	Возврат РегламентированнаяОтчетность.ВыгрузитьОтчетВXMLДляСОНО(ЭтотОбъект, ВыдаватьСообщение);	
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////
//Открытие основной формы

&НаКлиенте
Процедура ОбновитьПараметрыФормыНаКлиенте(Параметры) Экспорт
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	ЗаполнитьСведенияОбОтчетномПериоде();
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);		
	КонецЦикла	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормы(ТекФорма, Параметры)
	
	ЗаполнитьЗначенияСвойств(ТекФорма.СтруктураРеквизитовФормы, Параметры);
	
	ТекФорма.Налогоплательщик                     = Параметры.Налогоплательщик;	
	ТекФорма.мСписокСтруктурныхЕдиниц             = Параметры.мСписокСтруктурныхЕдиниц;
	ТекФорма.ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ТекФорма.мСписокСтруктурныхЕдиниц);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////
// Общие механизмы отчета

&НаКлиенте
Процедура СохранитьДанные() Экспорт
	
	СохранитьНаСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;	
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		ДокументОтражения = ПолучитьЗначениеРеквизита(СтруктураРеквизитовФормы.мСохраненныйДок, "ДокументОтраженияВУчете");
		Элементы.ФормаОтражениеВУчете.Заголовок = ПолучитьЗаголовокОтражениеВУчете(ДокументОтражения);
	КонецЕсли;
	
	МассивРеквизитовФормы = ЭтотОбъект.ПолучитьРеквизиты();
	
	Для Счетчик = 0 По МассивРеквизитовФормы.Количество()-1 Цикл		
		РеквизитФормы = МассивРеквизитовФормы[Счетчик];
		Если РеквизитФормы.ТипЗначения.СодержитТип(Тип("ТабличныйДокумент")) Тогда
			ЭтотОбъект[РеквизитФормы.Имя] = ЭтотОбъект[РеквизитФормы.Имя];	
		КонецЕсли;
	КонецЦикла;				
	
	Если мСтруктураЗначений = Неопределено Тогда
		мСтруктураЗначений = Новый Структура;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.Свойство("СформироватьФормуОтчетаАвтоматически") И СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически <> Неопределено Тогда
		
		ЗначениеТаймера = ЗначениеТаймера();
		
		ЗаполнитьАвтоНаСервере();
		
		ЗаписатьЗамер(ЗначениеТаймера);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	РегламентированнаяОтчетность.ВосстановитьСохраненныйОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, ЭтотОбъект.КодФормы, Ложь, Ложь);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ЭтаФорма.КодФормы);
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма);	
	
	Форма100РасчетНаСервере(Неопределено, Неопределено, КодФормы);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметры(ТекущееИмяФормы) Экспорт
	
	Форма = РеквизитФормыВЗначение("мСписокФормБезИерархии").Строки.Найти(ТекущееИмяФормы, "КодФормы");
	
	Если Форма.Многострочность = 1 Тогда // заполнение структуры шапки(подвала) для многострочных форм
		
		Если НЕ ((Налогоплательщик  = Неопределено) Или (Налогоплательщик = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации"))) Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН", Налогоплательщик.ИдентификационныйНомер, Ложь);
		КонецЕсли;                                                  
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год", СтруктураРеквизитовФормы.мГод, Ложь);
		
	Иначе //обычная форма
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год", СтруктураРеквизитовФормы.мГод);
		Если НЕ ((Налогоплательщик  = Неопределено) Или (Налогоплательщик = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации"))) Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН", Налогоплательщик.ИдентификационныйНомер);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущееИмяФормы = Лев(мВыбраннаяФорма, СтрДлина(мВыбраннаяФорма)-7) Тогда 
		
		//заполним основные сведения об организации
		ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы);
		
		//устанавливаем значения по умолчанию
		СписокРасчетов = Элементы.СписокРасчетов.СписокВыбора.Получить(1).Значение;
		ЗаполнитьВидРасчета("Очередная");
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "КодВалюты", "KZT");
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "НомерСтраницыПриложений", СтруктураРеквизитовФормы.НомерСтраницыПриложений);
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьВидРасчета(ВидРасчета)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "Первоначальная", "");	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "Очередная",      "");     	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "Дополнительная", "");	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "ПоУведомлению",  "");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "Ликвидационная", "");
	
	Если ВидРасчета = "Первоначальная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "Первоначальная", "Х");
	ИначеЕсли ВидРасчета = "Очередная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "Очередная",      "Х");				
	ИначеЕсли ВидРасчета = "Дополнительная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "Дополнительная", "Х");				
	ИначеЕсли ВидРасчета = "ПоУведомлению" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "ПоУведомлению",  "Х");				
	ИначеЕсли ВидРасчета = "Ликвидационная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "Ликвидационная", "Х");				
	КонецЕсли;
	
	Если ВидРасчета = "ПоУведомлению" Тогда
		Форма100ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Ложь;
		Форма100ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита  = Ложь;
	Иначе
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "НомерУведомления", "");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "ДатаУведомления",  "");
		Форма100ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Истина;
		Форма100ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита  = Истина;
	КонецЕсли;
	
	Модифированность = Истина;
	
КонецПроцедуры // ЗаполнитьВидРасчета()

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	 	
	
	Перезаполнить = ДополнительныеПараметры.Перезаполнить;
	
	НачатьЗамерВремени();
	
	Если КодФормы = "Форма100" Тогда 		
		Форма100ЗаполнитьАвто(Перезаполнить);		 
	ИначеЕсли КодФормы = "Форма100_01" Тогда 		
		Форма100_01ЗаполнитьАвто(Перезаполнить);
	ИначеЕсли КодФормы = "Форма100_02" Тогда  
		Форма100_02ЗаполнитьАвто(Перезаполнить);
	ИначеЕсли КодФормы = "Форма100_07" Тогда  
		Форма100_07ЗаполнитьАвто(Перезаполнить);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьнаСервере();
		Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы)
	
	ОргСведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(Налогоплательщик, ДатаПодписи, Налогоплательщик.НалоговыйКомитет);
	
	//Если организация не указана то не выводим никаких сведений
	Если ОргСведения = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализируем переменные
	НаимЮЛПол 			= ""; // Полное наименование 	
	ИИН_БИН 			= ""; // ИИН_БИН	
	Руководитель 		= ""; // ФИО руководителя				
	КодНалоговогоОргана = ""; // Код налогового органа	
	ОКЭД 				= ""; // ОКЭД
	ФИОБух 				= ""; // ФИО бухгалтера
	КБЕ					= ""; // КБе
	
	// Получаем данные
	ОргСведения.Свойство("БИН_ИИН",   			ИИН_БИН);
	ОргСведения.Свойство("ПолноеНаименование", 	НаимЮЛПол);	
	ОргСведения.Свойство("Руководитель",		Руководитель);	
	
	ОргСведения.Свойство("ОКЭД",	 			ОКЭД);
	ОргСведения.Свойство("ГлавныйБухгалтер",	ФИОБух);
	ОргСведения.Свойство("КБе",					КБе);
	
	ОргСведения.Свойство("КодНалоговогоОргана", КодНалоговогоОргана);
	
	РезидентРК = ?(Лев(КБе,1) = "2", Ложь, Истина);
	
	// Производим операции связанные с текущей формой отчетности
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН", ИИН_БИН);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ОргНазв", НаимЮЛПол); 	
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "РезидентРК",   ?(РезидентРК,    "Х", ""));
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "НерезидентРК", ?(НЕ РезидентРК, "Х", ""));
	
	Если РезидентРК Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "КодСтраныРезеденства", "");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "НомерНалоговойРегСтраныРезеденства", "");
		
		Форма100ПолеТабличногоДокументаСтраница1.Области.КодСтраныРезеденства.Защита 				 = Истина;
		Форма100ПолеТабличногоДокументаСтраница1.Области.НомерНалоговойРегСтраныРезеденства.Защита = Истина;
	Иначе
		Форма100ПолеТабличногоДокументаСтраница1.Области.КодСтраныРезеденства.Защита 				 = Ложь;
		Форма100ПолеТабличногоДокументаСтраница1.Области.НомерНалоговойРегСтраныРезеденства.Защита = Ложь;
	КонецЕсли;
	
	// Разбиваем название организации
	НазваниеОрганизацииДляРазбиения = НаимЮЛПол;
	НачПозиция = 1;
	Для Шаг = 1 По 3 Цикл
		ДлинаСтроки = ЭтотОбъект[ТекущееИмяФормы + "ПолеТабличногоДокументаСтраница1"].Области["ОргНазв" +Шаг ].ТипЗначения.КвалификаторыСтроки.Длина;
		НазОрганизации = Сред(НазваниеОрганизацииДляРазбиения, НачПозиция, ДлинаСтроки); 
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ОргНазв" + Шаг, НазОрганизации);
		НачПозиция = НачПозиция + ДлинаСтроки;
	КонецЦикла;
	
	// Работаем с ФИО руководителя
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Руководитель", Руководитель);
	
	// Дата подачи декларации
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ДатаПодачи", ДатаПодписи);
	
	//Код органа государственных доходов
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "КодНалоговогоОргана", КодНалоговогоОргана);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуНаСервере()
	
	РегламентированнаяОтчетность.УдалитьСтрокуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере()
	
	РегламентированнаяОтчетность.ДобавитьСтрокуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПанель(ПризнакОсновнойФормы,ПризнакМногострочности)
	
	Элементы.ФормаВыгрузитьВXML.Видимость = ПризнакОсновнойФормы; 
	Элементы.ФормаОчиститьФормуИПриложения.Видимость = ПризнакОсновнойФормы;
	Элементы.ГруппаКнопокДействияСоСтрокамиИСтраницами.Видимость = ПризнакМногострочности;	
	
КонецПроцедуры //ЗаполнитьПанель()

&НаСервере 
Процедура ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ИмяЯчейки, Значение, Расчет = Ложь)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, ИмяСтраницы, ИмяЯчейки, Значение, Расчет);				
	
КонецПроцедуры

&НаСервере 
Процедура ПередатьЗначениеВСтруктуруНаСервере(ИмяЯчейки, ЗначениеЯчейки, ПередаватьВТП = Ложь, ПередаватьВМногострочнуюЧасть = Ложь, ПоказательРасшифровки = Неопределено)
	
	Если ТипЗнч(ИмяЯчейки) = Тип("Массив") И ТипЗнч(ЗначениеЯчейки) = Тип("Массив") Тогда
		
		КоличЭлементов = ИмяЯчейки.Количество();
		Для НомерЭлемента = 0 По КоличЭлементов-1 Цикл
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяЯчейки[НомерЭлемента], ЗначениеЯчейки[НомерЭлемента], ПередаватьВТП, ПередаватьВМногострочнуюЧасть, ПоказательРасшифровки);
		КонецЦикла;	
	Иначе
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяЯчейки , ЗначениеЯчейки, ПередаватьВТП, ПередаватьВМногострочнуюЧасть, ПоказательРасшифровки);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаЗначения(Значение, Параметры) Экспорт
	
	Если НЕ Значение = Неопределено Тогда         	
		ПроверятьЦифрыВСтроке = Ложь;
		ПроверитьВидРасхода   = Ложь;
		ПроверитьПризнакВидаДеятельности = Ложь;
		
		Если Параметры.Свойство("ПроверятьЦифрыВСтроке" , ПроверятьЦифрыВСтроке) И ПроверятьЦифрыВСтроке Тогда
			Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Значение) Тогда				
				ТекстСообщения = НСтр("ru = 'Значение содержит нецифровые символы, значение будет очищено'");							  
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);				
				Значение = "";
			КонецЕсли;         		
		КонецЕсли;
		
		Если Параметры.Свойство("ПроверитьВидРасхода" , ПроверитьВидРасхода) И ПроверитьВидРасхода Тогда
			Если Значение > 7 ИЛИ Значение = 0 Тогда 				
				ПоказатьПредупреждение(, НСтр("ru = 'Введен не правильный код вида расхода'"));							  				
				Значение = "";
			КонецЕсли;         		
		КонецЕсли;
		
		Если Параметры.Свойство("ПроверитьПризнакВидаДеятельности" , ПроверитьПризнакВидаДеятельности) И ПроверитьПризнакВидаДеятельности Тогда
			Если Значение > 4 Или Значение = 0 Тогда 
				ПоказатьПредупреждение(, НСтр("ru = 'Введен не правильный признак вида деятельности. Признак может принимать значение от 1 до 4.'"));
				Значение = "";
			КонецЕсли;	
		КонецЕсли;
		
		Параметры.Область.Значение = Значение;			
		ПередатьЗначениеВМногострочнуюСтруктуру(Параметры.ИмяСтраницы, Параметры.Область.Имя, Значение, Параметры.Расчет);       
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиСтраниц(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьДанныеФормы(РезультатЗакрытия, СписокФормДерева);
	
	Модифицированность = Истина;
	
	//обновим мСписокФормБезИерархии
	Для Каждого СтрокаФормы ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
		
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы", СтрокаФормы.КодФормы));
		
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			СтрокаФормы.Выгружать               = ТекущаяСтрокаСписка.Выгружать;
			СтрокаФормы.ПоказатьСтраницу        = ТекущаяСтрокаСписка.ПоказатьСтраницу;			
			СтрокаФормы.АвтополучениеИтогов     = ТекущаяСтрокаСписка.АвтополучениеИтогов;  
			СтрокаФормы.АвтоЗаполнение          = ТекущаяСтрокаСписка.АвтоЗаполнение;  
		КонецЕсли;			
	КонецЦикла; 	
	
	Если ДополнительныеПараметры.Свойство("ТекущийРаздел") И НЕ ДополнительныеПараметры.ТекущийРаздел = Неопределено Тогда  		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(РазделыОтчета, Новый Структура("СписокФормДереваСтраницы", ДополнительныеПараметры.ТекущийРаздел));
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;			
	КонецЕсли;  	
	
КонецПроцедуры

&НаСервере
Процедура ВыборРасчета(ТекФорма, Индекс = Неопределено, Показатель = Неопределено) Экспорт
	
	Если ТекФорма = "Форма100" Тогда
		Форма100РасчетНаСервере(Неопределено, Неопределено, ТекФорма);
	ИначеЕсли ТекФорма = "Форма100_02" Тогда
		Форма100_02РасчетНаСервере(Неопределено, Неопределено, ТекФорма);		
	ИначеЕсли ТекФорма = "Форма100_07" Тогда
		Форма100_07РасчетНаСервере(Неопределено, Неопределено, ТекФорма);		
	КонецЕсли;
	
КонецПроцедуры // ВыборРасчета()

&НаКлиенте
Процедура ОткрытьФормуНастройкиСтраниц()
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРаздел = Элементы.РазделыОтчета.ТекущиеДанные.Страницы;		
	КонецЕсли;
	
	Для Каждого ТекФорма ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
		
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы", ТекФорма.КодФормы));
		
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			ТекущаяСтрокаСписка.Выгружать               = ТекФорма.Выгружать;
			ТекущаяСтрокаСписка.ПоказатьСтраницу        = ТекФорма.ПоказатьСтраницу;			
			ТекущаяСтрокаСписка.АвтополучениеИтогов     = ТекФорма.АвтополучениеИтогов;  
			ТекущаяСтрокаСписка.АвтоЗаполнение          = ТекФорма.АвтоЗаполнение;  
		КонецЕсли;		   
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокФормДерева", СписокФормДерева);
	
	ДопПараметры = Новый Структура("ТекущийРаздел", ТекущийРаздел);
	
	ОповещениеПослеЗакрытияФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастройкиСтраниц", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.НастройкиОтчета", ПараметрыФормы, ЭтаФорма,,,, ОповещениеПослеЗакрытияФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьЧислоВРимскуюНотацию(АрабскоеЧисло, ИспЛатинскиеБуквы = Ложь) Экспорт
	
	РимскоеЧисло="";
	cRab = ДополнитьСтроку(АрабскоеЧисло,3);
	
	Если ИспЛатинскиеБуквы Тогда
		c1 = "I";c5 = "V";c10 = "X";c50 = "L";c100 ="C";c500 = "M";c1000 = "D";
		
	Иначе
		c1 = "1";c5 = "У";c10 = "Х";c50 = "Л";c100 ="С";c500 = "М";c1000 = "Д";
	КонецЕсли;
	
	nEd = Число(СтрЗаменить(Сред(cRab,3,1), " ", "0"));
	nDs = Число(СтрЗаменить(Сред(cRab,2,1), " ", "0"));
	nSt = Число(СтрЗаменить(Сред(cRab,1,1), " ", "0"));
	
	РимскоеЧисло = РимскоеЧисло + ПреобразоватьЦифруВРимскуюНотацию(nSt,c100,c500,c1000);
	РимскоеЧисло = РимскоеЧисло + ПреобразоватьЦифруВРимскуюНотацию(nDs,c10,c50,c100);
	РимскоеЧисло = РимскоеЧисло + ПреобразоватьЦифруВРимскуюНотацию(nEd,c1,c5,c10);
	
	Возврат РимскоеЧисло;
	
КонецФункции //ПреобразоватьЧислоВРимскуюНотацию

&НаКлиентеНаСервереБезКонтекста
// Выполянет преобразование цифры в римскую нотацию 
//
// Параметры
//		Цифра - число, целое, от 0 до 9
//      РимскаяЕдиница,РимскаяПятерка,РимскаяДесятка - строки, соответствующие римские цифры
//
// Возвращаемое значение
//		строка
//
// Описание
//		записывает "обычную" цифру римскими цифрами,
//		например:
//				ПреобразоватьЦифруВРимскуюНотацию(7,"I","V","X") = "VII"
//
Функция ПреобразоватьЦифруВРимскуюНотацию(Цифра, РимскаяЕдиница, РимскаяПятерка, РимскаяДесятка)
	
	РимскаяЦифра="";
	Если Цифра = 1 Тогда
		РимскаяЦифра = РимскаяЕдиница
	ИначеЕсли Цифра = 2 Тогда
		РимскаяЦифра = РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 3 Тогда
		РимскаяЦифра = РимскаяЕдиница + РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 4 Тогда
		РимскаяЦифра = РимскаяЕдиница + РимскаяПятерка;
	ИначеЕсли Цифра = 5 Тогда
		РимскаяЦифра = РимскаяПятерка;
	ИначеЕсли Цифра = 6 Тогда
		РимскаяЦифра = РимскаяПятерка + РимскаяЕдиница;
	ИначеЕсли Цифра = 7 Тогда
		РимскаяЦифра = РимскаяПятерка + РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 8 Тогда
		РимскаяЦифра = РимскаяПятерка + РимскаяЕдиница + РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 9 Тогда
		РимскаяЦифра = РимскаяЕдиница + РимскаяДесятка;
	КонецЕсли;
	Возврат РимскаяЦифра;
	
КонецФункции //ПреобразоватьЦифруВРимскуюНотацию

&НаКлиентеНаСервереБезКонтекста
Функция ДополнитьСтроку(Знач Стр, Длина, Чем = " ", Режим = 0) Экспорт
	
	СимволовДополнить = Длина - СтрДлина(Стр);
	Добавок = "";
	Для Н=1 по СимволовДополнить Цикл
		Добавок = Добавок + Чем;
	КонецЦикла;
	Возврат ?(Режим = 0, Добавок + Стр, Стр + Добавок);
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
// Преобразовывает римский номер строки в арабский
// Органичение - только для цифр меньше 12
Функция ПреобразоватьРимскиеЦифрыВКодеСтроки(ОбластьОтчета)
	КодСтроки = Врег(ОбластьОтчета);
	
	КодСтроки = СтрЗаменить(КодСтроки, "XXV", "25");
	КодСтроки = СтрЗаменить(КодСтроки, "XXIV",  "24");
	КодСтроки = СтрЗаменить(КодСтроки, "XXIII",   "23");
	КодСтроки = СтрЗаменить(КодСтроки, "XXII",  "22");
	КодСтроки = СтрЗаменить(КодСтроки, "XXI", "21");
	КодСтроки = СтрЗаменить(КодСтроки, "XX",  "20");
	КодСтроки = СтрЗаменить(КодСтроки, "XIX",   "19");
	КодСтроки = СтрЗаменить(КодСтроки, "XVIII",  "18");
	КодСтроки = СтрЗаменить(КодСтроки, "XVII", "17");
	КодСтроки = СтрЗаменить(КодСтроки, "XVI",  "16");
	КодСтроки = СтрЗаменить(КодСтроки, "XV",   "15");
	КодСтроки = СтрЗаменить(КодСтроки, "XIV",  "14");
	КодСтроки = СтрЗаменить(КодСтроки, "XIII", "13");

	
	КодСтроки = СтрЗаменить(КодСтроки, "XII",  "12");
	КодСтроки = СтрЗаменить(КодСтроки, "XI",   "11");
	КодСтроки = СтрЗаменить(КодСтроки, "IX",   "9");
	КодСтроки = СтрЗаменить(КодСтроки, "X",    "10");
	
	КодСтроки = СтрЗаменить(КодСтроки, "VIII", "8");
	КодСтроки = СтрЗаменить(КодСтроки, "VII",  "7");
	КодСтроки = СтрЗаменить(КодСтроки, "VI",   "6");	
	КодСтроки = СтрЗаменить(КодСтроки, "IV",   "4");
	КодСтроки = СтрЗаменить(КодСтроки, "V",    "5");
	
	КодСтроки = СтрЗаменить(КодСтроки, "III",  "3");
	КодСтроки = СтрЗаменить(КодСтроки, "II",   "2");
	КодСтроки = СтрЗаменить(КодСтроки, "I",    "1");
	
	Возврат КодСтроки;
	
КонецФункции // ПреобразоватьРимскиеЦифрыВКодеСтроки

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ЗначениеРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ЗначениеРеквизита);										
	
КонецФункции

#Область ОценкаПроизводительности

&НаКлиенте
Функция НачатьЗамерВремени()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "Регламентированный отчет ""%1 декларация по кпн"" (заполнение)";
		КлючеваяОперация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(КлючеваяОперация,?(ЗначениеЗаполнено(КодФормы), НРег(КодФормы), "форма 100")); 
		ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент").НачатьЗамерВремени(Истина, КлючеваяОперация);
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеТаймера()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда 
		
		Возврат ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").НачатьЗамерВремени();
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьЗамер(ВремяНачала)
	
	Если ВремяНачала <> Неопределено 
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "Регламентированный отчет ""форма 100 декларация по кпн"" (заполнение)";
		ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////
// Процедуры и функции для расчета(заполнения) формы 100.00

&НаКлиенте
Процедура Форма100ЗаполнитьАвто(Перезаполнить = Ложь) 
	
	Состояние("Расчет формы 100.00");		
	Форма100ЗаполнитьАвтоНаСервере(Перезаполнить);	
	Состояние("");	 
	
КонецПроцедуры // Форма100ЗаполнитьАвто()

&НаСервере
Функция Форма100РассчитатьОстаткиТМЗ(ВыдаватьСообщения = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода", 			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", 			Новый Граница(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, ВидГраницы.Включая));	
	Запрос.УстановитьПараметр("Организация", 			Налогоплательщик);	
	Запрос.УстановитьПараметр("СписокОрганизаций", 		мСписокСтруктурныхЕдиниц);
	
	ВедениеУчетаВременныхРазницБалансовымМетодом = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Налогоплательщик, СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	
	Если ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
		// собираем по нал.
		ИмяРегистраБУ 		= "Налоговый";
		//ОтборПоВидуУчета 	= " И ВидУчета = Значение(Справочник.ВидыУчетаНУ.НУ)";
		// собираем по бух.
		СписокСчетовТМЗ = Новый СписокЗначений;
		СписокСчетовТМЗ.Добавить(ПланыСчетов.Налоговый.Запасы); 		  			  	//счет 1310
		СписокСчетовТМЗ.Добавить(ПланыСчетов.Налоговый.НезавершенноеПроизводство); 		//счет 1340	
		СписокСчетовТМЗ.Добавить(ПланыСчетов.Налоговый.ПрочиеЗапасы); 			   		//счет 1350		
		
		Запрос.УстановитьПараметр("СписокСчетовТМЗ", СписокСчетовТМЗ);
		
	Иначе
		// собираем по бух.
		СписокСчетовТМЗ = Новый СписокЗначений;
		СписокСчетовТМЗ.Добавить(ПланыСчетов.Типовой.СырьеИМатериалы); 		  		  	//счет 1310
		СписокСчетовТМЗ.Добавить(ПланыСчетов.Типовой.ГотоваяПродукция); 		  		//счет 1320
		СписокСчетовТМЗ.Добавить(ПланыСчетов.Типовой.Товары);  				   		  	//счет 1330
		СписокСчетовТМЗ.Добавить(ПланыСчетов.Типовой.НезавершенноеПроизводство); 		//счет 1340
		СписокСчетовТМЗ.Добавить(ПланыСчетов.Типовой.ПрочиеЗапасы); 			  		//счет 1350
		СписокСчетовТМЗ.Добавить(ПланыСчетов.Типовой.РезервПоСписаниюЗапасов);          //счет 1360
		СписокСчетовТМЗ.Добавить(ПланыСчетов.Типовой.МонтажОборудования);            	//счет 2932
		
		ИмяРегистраБУ 		= "Типовой";	
		ОтборПоВидуУчета 	= ""; 
	КонецЕсли;
	
	ОтборПоВидуУчета 	= ""; 
	
	Запрос.УстановитьПараметр("СписокСчетовТМЗ", СписокСчетовТМЗ);
	Запрос.УстановитьПараметр("Счет1353", );
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеНачОстаток.НазваниеОбласти КАК КодСтроки,               
	|	СУММА(ДанныеНачОстаток.СуммаОстаток) КАК Сумма               
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОстаткиНаНачало.СуммаОстатокДт - ОстаткиНаНачало.СуммаОстатокКт КАК СуммаОстаток,
	|		""100.00.019.I"" КАК НазваниеОбласти
	|	ИЗ
	|		РегистрБухгалтерии." + ИмяРегистраБУ + ".Остатки(&НачПериода, Счет В ИЕРАРХИИ (&СписокСчетовТМЗ), , Организация В (&СписокОрганизаций)" + ОтборПоВидуУчета + ") КАК ОстаткиНаНачало) КАК ДанныеНачОстаток
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеНачОстаток.НазваниеОбласти
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеКонОстаток.НазваниеОбласти,               
	|	СУММА(ДанныеКонОстаток.СуммаОстаток)               
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОстаткиНаКонец.СуммаОстатокДт - ОстаткиНаКонец.СуммаОстатокКт КАК СуммаОстаток,
	|		""100.00.019.II"" КАК НазваниеОбласти               
	|	ИЗ
	|		РегистрБухгалтерии." + ИмяРегистраБУ + ".Остатки(&КонПериода, Счет В ИЕРАРХИИ (&СписокСчетовТМЗ), , Организация В (&СписокОрганизаций)" + ОтборПоВидуУчета + ") КАК ОстаткиНаКонец) КАК ДанныеКонОстаток
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеКонОстаток.НазваниеОбласти";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;						   
	
КонецФункции

&НаСервере
Процедура Форма100ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь) 
	
	ТекИмяФормы = "Форма100";
	Очистить(ТекИмяФормы, Истина);
	мСтруктураЗначений.Очистить();
	
	// Проверка операции ЗакрытияСчетовНУ в отчетном периоде
	ПроверитьНаличиеРегламентнойОперацииЗакрытияСчетовНУВОтчетномПериоде();
	
	ЗаполнитьПараметры(ТекИмяФормы);
	
	Форма100_01ЗаполнитьАвтоНаСервере(); 
	
	Форма100_02ЗаполнитьАвтоНаСервере(); 
	
	Форма100_07ЗаполнитьАвтоНаСервере(); 
	
	////////////////////////////////////////////
	//// Раздел. Расчетные показатели        	
	
	ВыборкаПоОстаткамТМЗ = Форма100РассчитатьОстаткиТМЗ().Выбрать();
	
	Пока ВыборкаПоОстаткамТМЗ.Следующий() Цикл		
		Если ВыборкаПоОстаткамТМЗ.КодСтроки = "100.00.019.I" Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "s_100_00_019_1", Окр(?(ВыборкаПоОстаткамТМЗ.Сумма <> NULL, ВыборкаПоОстаткамТМЗ.Сумма, 0)), Ложь);		
		ИначеЕсли ВыборкаПоОстаткамТМЗ.КодСтроки = "100.00.019.II" Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "s_100_00_019_2", Окр(?(ВыборкаПоОстаткамТМЗ.Сумма <> NULL, ВыборкаПоОстаткамТМЗ.Сумма, 0)), Ложь);		
		КонецЕсли;
	КонецЦикла;	
	
	ВыборкаРезультата = Форма100РассчитатьДанныеФормы();
	
	ВыборкаОтчета = ВыборкаРезультата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СписокКодовОбластей  = Новый СписокЗначений;
	// Составляем список кодов областей, которые будем заполнять
	// Доходы 001-004
	Для Счетчик = 1 По 14 Цикл
		СписокКодовОбластей.Добавить("s_100_00_0" + Формат(Счетчик, "ЧЦ=2; ЧВН="));
	КонецЦикла;	
	
	СписокКодовОбластей.Добавить("s_100_00_001_1");
	СписокКодовОбластей.Добавить("s_100_00_001_2");
	СписокКодовОбластей.Добавить("s_100_00_001_3");
	СписокКодовОбластей.Добавить("s_100_00_001_4");

	СписокКодовОбластей.Добавить("s_100_00_007_1");
	СписокКодовОбластей.Добавить("s_100_00_007_2");
	
	СписокКодовОбластей.Добавить("s_100_00_006_1");
	
	// Корректировка доходов 016, 017
	СписокКодовОбластей.Добавить("s_100_00_016");
	СписокКодовОбластей.Добавить("s_100_00_017");
	
	// Вычеты 009-020
	Для Счетчик = 19 По 39 Цикл
		СписокКодовОбластей.Добавить("s_100_00_0" + Формат(Счетчик, "ЧЦ=2; ЧВН="));
	КонецЦикла;	
	// Корректировка доходов и вычетов 
	СписокКодовОбластей.Добавить("s_100_00_041_1");
	СписокКодовОбластей.Добавить("s_100_00_041_2");
	СписокКодовОбластей.Добавить("s_100_00_042");
	СписокКодовОбластей.Добавить("s_100_00_043");
	
	// Специализированные вычеты	
	СписокКодовОбластей.Добавить("s_100_00_019_3_a");
	СписокКодовОбластей.Добавить("s_100_00_019_3_b");
	СписокКодовОбластей.Добавить("s_100_00_019_3_c");
	СписокКодовОбластей.Добавить("s_100_00_019_3_d");
	СписокКодовОбластей.Добавить("s_100_00_019_3_e");
	СписокКодовОбластей.Добавить("s_100_00_019_3_f");
	СписокКодовОбластей.Добавить("s_100_00_019_3_g");
	СписокКодовОбластей.Добавить("s_100_00_019_3_h");
	Для Счетчик = 3 По 9 Цикл
		СписокКодовОбластей.Добавить("s_100_00_019_" + Счетчик);
	КонецЦикла;	
	// прочие подстроки
	СписокКодовОбластей.Добавить("s_100_00_028_1");
	СписокКодовОбластей.Добавить("s_100_00_028_2");
	СписокКодовОбластей.Добавить("s_100_00_028_3");
	СписокКодовОбластей.Добавить("s_100_00_028_4");
	
	// Доходы из иностранных источников
	СписокКодовОбластей.Добавить("s_100_00_045");
	
	СписокКодовОбластей.Добавить("s_100_00_046");
	СписокКодовОбластей.Добавить("s_100_00_046_1");
	СписокКодовОбластей.Добавить("s_100_00_046_2");
	
	СписокКодовОбластей.Добавить("s_100_00_048");
	СписокКодовОбластей.Добавить("s_100_00_050");
	
	СписокКодовОбластей.Добавить("s_100_00_052");
	СписокКодовОбластей.Добавить("s_100_00_052_a");
	СписокКодовОбластей.Добавить("s_100_00_052_b");
	
	Для Счетчик = 1 По 5 Цикл
		СписокКодовОбластей.Добавить("s_100_00_014__"   + Счетчик);
		СписокКодовОбластей.Добавить("s_100_00_016__"   + Счетчик);
		СписокКодовОбластей.Добавить("s_100_00_052_a__" + Счетчик);
		СписокКодовОбластей.Добавить("s_100_00_052_b__" + Счетчик);
	КонецЦикла;
	
	ТаблицаДанныхПодстрок = Новый ТаблицаЗначений;
	ТаблицаДанныхПодстрок.Колонки.Добавить("ИмяОбласти");
	ТаблицаДанныхПодстрок.Колонки.Добавить("КодСтроки");
	ТаблицаДанныхПодстрок.Колонки.Добавить("КодОсновнойСтроки");
	ТаблицаДанныхПодстрок.Колонки.Добавить("Значение");
	ТаблицаДанныхПодстрок.Колонки.Добавить("Приоритет");
	
	ОсновныеКодыСтрок = Новый Массив;
	ОсновныеКодыСтрок.Добавить("100.00.014");
	ОсновныеКодыСтрок.Добавить("100.00.016");
	ОсновныеКодыСтрок.Добавить("100.00.052.A");
	ОсновныеКодыСтрок.Добавить("100.00.052.B");
	
	// В структуре учитываются коды подстрок, НЕ отображенные на форме.
	// Ключ структуры - код строки Декларации, установленный для дохода (статьи затрат),
	// Значение структуры - код итоговой строки Декларации, в которой учтена сумма 
	УчтенныеКодыСтрок = Новый Структура;
	
	Пока ВыборкаОтчета.Следующий() Цикл
		КодСтроки = ВыборкаОтчета.КодСтроки;
		ОбластьНачало = РегламентированнаяОтчетностьКлиентСервер.ПреобразоватьКодДекларации(КодСтроки);
		КодОсновнойСтроки = "";
		
		Если Найти(ОбластьНачало, "100_00_019") > 0 Тогда
			ОбластьНачало = НРег(ПреобразоватьРимскиеЦифрыВКодеСтроки(ОбластьНачало));
			// Перед последним префиксом вставляем разделитель
			// мы получили строку вида s_100_00_009_3a
			// а нужно получить s_100_00_009_3_a
			Если Найти(Прав(ОбластьНачало,2), "_") = 0 Тогда
				ОбластьНачало = Лев(ОбластьНачало, СтрДлина(ОбластьНачало) -1) + "_" + Прав(ОбластьНачало,1);
			КонецЕсли;		
			
		ИначеЕсли Найти(ВРЕГ(ОбластьНачало), "I") > 0 
			ИЛИ Найти(ВРЕГ(ОбластьНачало), "V") > 0 
			ИЛИ Найти(ВРЕГ(ОбластьНачало), "X") > 0 Тогда
			
			ОбластьНачало = НРег(ПреобразоватьРимскиеЦифрыВКодеСтроки(ОбластьНачало));
		КонецЕсли;
		
		НаименованиеКодаСтрокиДополнительнаяЧасть = Неопределено;
		ОбластьДополнительныхСтрок = Неопределено;
		
		Если (Найти(ОбластьНачало, "s_100_00_014_") > 0) ИЛИ (Найти(ОбластьНачало, "s_100_00_016_") > 0) Тогда
			КодОсновнойСтроки = Лев(КодСтроки, 10);
			ИмяОбластиМакета = "НалогНаПрибыль_" + СтрЗаменить(КодОсновнойСтроки, ".", "_");
			ОбластьДополнительныхСтрок = мМакетКодовСтрок.Области.Найти(ИмяОбластиМакета);
			КодДополнительнойСтроки = Прав(КодСтроки, СтрДлина(КодСтроки) - 11);
			НаименованиеКодаСтрокиДополнительнаяЧасть = "";
		КонецЕсли;
		Если (Найти(ОбластьНачало, "s_100_00_052_a_") > 0) ИЛИ (Найти(ОбластьНачало, "s_100_00_052_b_") > 0) Тогда
			КодОсновнойСтроки = Лев(КодСтроки, 12);
			ИмяОбластиМакета = "НалогНаПрибыль_" + СтрЗаменить(КодОсновнойСтроки, ".", "_");
			ОбластьДополнительныхСтрок = мМакетКодовСтрок.Области.Найти(ИмяОбластиМакета);
			КодДополнительнойСтроки = Прав(КодСтроки, СтрДлина(КодСтроки) - 13);
			НаименованиеКодаСтрокиДополнительнаяЧасть = "";
		КонецЕсли;
		
		Если ОбластьДополнительныхСтрок <> Неопределено Тогда
			НаименованиеКодаСтрокиДополнительнаяЧасть = РегламентированнаяОтчетность.ПолучитьНаименованиеСтрокиКлассификатораПоКоду(мМакетКодовСтрок, ОбластьДополнительныхСтрок, КодДополнительнойСтроки);
		КонецЕсли;
			
		Если НаименованиеКодаСтрокиДополнительнаяЧасть <> Неопределено И НаименованиеКодаСтрокиДополнительнаяЧасть <> "" И ВыборкаОтчета.Сумма <> NULL Тогда
			СуммаПодстроки = Окр(ВыборкаОтчета.Сумма);
			
			СтрокаДанныхПодстроки = ТаблицаДанныхПодстрок.Добавить();
			СтрокаДанныхПодстроки.КодОсновнойСтроки = КодОсновнойСтроки;
			СтрокаДанныхПодстроки.КодСтроки         = КодДополнительнойСтроки;
			СтрокаДанныхПодстроки.Значение          = СуммаПодстроки;
			СтрокаДанныхПодстроки.Приоритет         = 0;
			
			ИндексВидаПодстроки = Неопределено;
			Если КодОсновнойСтроки = "100.00.014" Тогда
				СтрокаДанныхПодстроки.ИмяОбласти = "s_100_00_014__";
			ИначеЕсли КодОсновнойСтроки = "100.00.016" Тогда
				СтрокаДанныхПодстроки.ИмяОбласти = "s_100_00_016__";
			ИначеЕсли КодОсновнойСтроки = "100.00.052.A" Тогда
				СтрокаДанныхПодстроки.ИмяОбласти = "s_100_00_052_a__";
			ИначеЕсли КодОсновнойСтроки = "100.00.052.B" Тогда
				СтрокаДанныхПодстроки.ИмяОбласти = "s_100_00_052_b__";
			КонецЕсли;
			// Ключ структуры - код строки Декларации, установленный для дохода (статьи затрат),
			// Значение структуры - код итоговой строки Декларации, в которой учтена сумма 
			УчтенныеКодыСтрок.Вставить(СтрЗаменить(ОбластьНачало, "-", "_"), КодОсновнойСтроки);
		КонецЕсли;
			
		ВыборкаДохРас = ВыборкаОтчета.Выбрать();
		
		Пока ВыборкаДохРас.Следующий() Цикл
			
			ВыдаватьСообщение = ?(ВыборкаДохРас.ВыдСообщение = Null,"",ВыборкаДохРас.ВыдСообщение);
			Если ВыдаватьСообщение = "СтатьяЗатратДох" Тогда
				// Выдаем сообщение пол-лю, если получили данные со счета "Расходы" с аналитикой
				// "СтатьиЗатрат", для которых указан код строки декларации, относящийся к доходам.
				// Такие данные в форму не помещаем.
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Данные по статье затрат %1 не отражены в форме, поскольку для нее
				| определен код строки <%2>, который относится к совокупному годовому доходу'"),
				Строка(ВыборкаДохРас.ДоходРасход.Наименование), Строка(ВыборкаДохРас.КодСтроки));
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 									
				
			ИначеЕсли ВыдаватьСообщение = "ДоходРасх" Тогда	 
				// Выдаем сообщение пол-лю, если получили данные со счета "Доходы" с аналитикой
				// "Доходы", для которых указан код строки декларации, относящийся к статьям затрат.
				// Такие данные в форму не помещаем.
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Данные по  доходу %1 не отражены в форме, поскольку для него
				| определен код строки <%2>, который относится к вычетам'"),
				Строка(ВыборкаДохРас.ДоходРасход.Наименование),Строка(ВыборкаДохРас.КодСтроки));
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				
			ИначеЕсли ВыдаватьСообщение = "ВР" Тогда	 
				// Выдаем сообщение если в строке 100.00.019.IIIA не учтена сумма ВР
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В строке 100.00.019.IIIA не учтена сумма поступления ТМЗ с видом учета ВР, 
				| данную сумму можно увидеть в расшифровке к данной строке.'"), ,);
							
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;								 
			
		КонецЦикла;
		
		Если СписокКодовОбластей.НайтиПоЗначению(ОбластьНачало) <> Неопределено Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, ОбластьНачало, Окр(?(ВыборкаОтчета.Сумма <> NULL, ВыборкаОтчета.Сумма, 0)), Ложь);
		Иначе
			КодИтоговойСтроки = Неопределено;
			УчтенныеКодыСтрок.Свойство(СтрЗаменить(ОбластьНачало, "-", "_"), КодИтоговойСтроки);
			Если КодИтоговойСтроки = Неопределено Тогда
				ТекстОтражения = НСтр("ru = 'не отражены в форме.'");
			Иначе
				ТекстОтражения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'учтены в строке %1.'"), СокрЛП(КодИтоговойСтроки));
			КонецЕсли;
			
			ВыборкаДохРас.Сбросить();
			Пока ВыборкаДохРас.Следующий() Цикл
				ДР = ВыборкаДохРас.ДоходРасход;
				Если ТипЗнч(ДР) = Тип("СправочникСсылка.Доходы") Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Данные по коду строки %1 , соответствующему элементу справочника ""Доходы"":
					|  ""<%2>"" '") + ТекстОтражения,
					Строка(ВыборкаДохРас.КодСтроки), Строка(ДР.Наименование));
					
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					
				ИначеЕсли ТипЗнч(ДР) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Данные по коду строки %1 , соответствующему элементу справочника ""Статьи затрат"":
					|  ""<%2>"" '") + ТекстОтражения,
					Строка(ВыборкаДохРас.КодСтроки), Строка(ДР.Наименование));
					
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;								 
			КонецЦикла;			
		КонецЕсли;			
	КонецЦикла;
	
	// Заполняем поле 9 "Представленные приложения"
	ТекущаяСтрока = СписокФормДерева.ПолучитьЭлементы()[0];
	Для Каждого Форма Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
		ИмяОбласти = "Приложение" + Прав(Форма.КодФормы, 2);
		Если Форма100ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяОбласти) <> Неопределено Тогда 			
			СтрокиФорм = мСписокФормБезИерархии.ПолучитьЭлементы();			
			Для Каждого Строка Из СтрокиФорм Цикл
				Если Строка.КодФормы = Форма.КодФормы Тогда					
					Если Строка.Выгружать = 1 Тогда
						РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, ИмяОбласти, "Х", Ложь);				
					Иначе
						РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, ИмяОбласти, "", Ложь);
					КонецЕсли;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 			
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект,КодФормы);
	
	s_100_00_014 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_014");
	s_100_00_016 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_016");
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_014", s_100_00_014 + s_100_00_016, Неопределено);
	
	// Заполнение подстрок для 100.00.014, 100.00.016, 100.00.052.A и 100.00.052.B
	ТаблицаДанныхПодстрокИтог = ТаблицаДанныхПодстрок.СкопироватьКолонки();
	
	Если ТаблицаДанныхПодстрок.Количество() > 0 Тогда
		
		// На основании подстрок 100.00.016 создаем связанные с ними подстроки 100.00.014:
		//    100.00.016.241-1-1  учитывается в подстроке 100.00.014.226-1-16;
		//    100.00.016.241-1-13 учитывается в подстроке 100.00.014.226-1-13;
		//    сумма прочих подстрок 100.00.016 учитывается в подстроке 100.00.014.226-1-25.
		// Значение подстроки 100.00.016.241-23 влияет на значение в строке 100.00.013.
		// "Приоритет" для подстрок 100.00.016 используется для того,
		// чтобы строки, влияющие на рассчет других строк, при автозаполнении выводились в форму.
		Подстроки = ТаблицаДанныхПодстрок.НайтиСтроки(Новый Структура("КодОсновнойСтроки", "100.00.016"));
		Для Каждого Подстрока Из Подстроки Цикл
			НовыйКодСтроки = "";
			Если Подстрока.КодСтроки = "241-1-1" Тогда
				НовыйКодСтроки = "226-1-16";
				Подстрока.Приоритет = 1;
			ИначеЕсли Подстрока.КодСтроки = "241-1-13" Тогда
				НовыйКодСтроки = "226-1-13";
				Подстрока.Приоритет = 1;
			ИначеЕсли Подстрока.КодСтроки = "241-1-23" Тогда
				Подстрока.Приоритет = 1;
			Иначе
				НовыйКодСтроки = "226-1-25";
			КонецЕсли;
			Если НовыйКодСтроки <> "" Тогда
				НоваяПодстрока = ТаблицаДанныхПодстрок.Добавить();
				НоваяПодстрока.КодОсновнойСтроки = "100.00.014";
				НоваяПодстрока.КодСтроки = НовыйКодСтроки;
				НоваяПодстрока.ИмяОбласти = "s_100_00_014__";
				НоваяПодстрока.Значение = Подстрока.Значение;
				НоваяПодстрока.Приоритет = 0;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаДанныхПодстрок.Свернуть("КодОсновнойСтроки, КодСтроки, ИмяОбласти, Приоритет", "Значение");
		ТаблицаДанныхПодстрок.Сортировать("КодОсновнойСтроки Возр, Приоритет Убыв, Значение Убыв");
		
		Для Каждого КодОсновнойСтроки Из ОсновныеКодыСтрок Цикл
			Подстроки = ТаблицаДанныхПодстрок.НайтиСтроки(Новый Структура("КодОсновнойСтроки", КодОсновнойСтроки));
			СуммаУчтенныхЗначений = 0;  // переменная используется для учета значений подстрок, не отображаемых на форме
			НомерПодстроки = 0;
			ИмяОбласти = "";
			КодСтроки = "";
			Для Каждого Подстрока Из Подстроки Цикл
				НомерПодстроки = НомерПодстроки + 1;
				Если НомерПодстроки <= 5 Тогда
					ИтоговаяПодстрока = ТаблицаДанныхПодстрокИтог.Добавить();
					ЗаполнитьЗначенияСвойств(ИтоговаяПодстрока, Подстрока);
					ИтоговаяПодстрока.ИмяОбласти = Подстрока.ИмяОбласти + НомерПодстроки;
				Иначе
					СуммаУчтенныхЗначений = СуммаУчтенныхЗначений + Подстрока.Значение;
					ИмяОбласти = Подстрока.ИмяОбласти;
				КонецЕсли;
			КонецЦикла;
			Если СуммаУчтенныхЗначений <> 0 Тогда  // не отображенные на форме значения подстрок учитываются в основной строке
				Если КодОсновнойСтроки = "100.00.052.A" Тогда
					ПолеТабДокумента = Форма100ПолеТабличногоДокументаСтраница4;
				ИначеЕсли КодОсновнойСтроки = "100.00.052.B" Тогда
					ПолеТабДокумента = Форма100ПолеТабличногоДокументаСтраница5;
				Иначе
					ПолеТабДокумента = Форма100ПолеТабличногоДокументаСтраница2;
				КонецЕсли;
				// Если рассчитана СуммаУчтенныхЗначений, значит и заполнено ИмяОбласти
				ОбластьОсновнойСтроки = СтрЗаменить(ИмяОбласти, "__", "");
				ЯчейкаОсновнойСтроки = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ОбластьОсновнойСтроки);
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ОбластьОсновнойСтроки, ЯчейкаОсновнойСтроки + СуммаУчтенныхЗначений, ПолеТабДокумента);
			КонецЕсли;
		КонецЦикла;
		
		// В ТаблицаДанныхПодстрокИтог содержатся подстроки, отображаемые на форме.
		// Оставим в подстроках 014 только не отображенные на форме значения связанных подстрок 016.
		// Отображенные на форме значения будут учтены при расчете в Форма100РасчетНаСервере().
		Подстроки016 = ТаблицаДанныхПодстрокИтог.НайтиСтроки(Новый Структура("КодОсновнойСтроки", "100.00.016"));
		Для Каждого Подстрока Из Подстроки016 Цикл
			КодСтроки = "";
			Если Подстрока.КодСтроки = "241-1-1" Тогда
				КодСтроки = "226-1-16";
			ИначеЕсли Подстрока.КодСтроки = "241-1-13" Тогда
				КодСтроки = "226-1-13";
			ИначеЕсли Подстрока.КодСтроки <> "241-1-23" Тогда
				КодСтроки = "226-1-25";
			КонецЕсли;
			Если КодСтроки <> "" Тогда
				Подстрока014 = ТаблицаДанныхПодстрокИтог.Найти(КодСтроки, "КодСтроки");
				Если Подстрока014 <> Неопределено И Подстрока014.КодОсновнойСтроки = "100.00.014" Тогда
					Подстрока014.Значение = Подстрока014.Значение - Подстрока.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	Для Каждого Подстрока Из ТаблицаДанныхПодстрокИтог Цикл
		Если Подстрока.КодОсновнойСтроки = "100.00.052.A" Тогда
			ПолеТабДокумента = Форма100ПолеТабличногоДокументаСтраница4;
		ИначеЕсли Подстрока.КодОсновнойСтроки = "100.00.052.B" Тогда
			ПолеТабДокумента = Форма100ПолеТабличногоДокументаСтраница5;
		Иначе
			ПолеТабДокумента = Форма100ПолеТабличногоДокументаСтраница2;
		КонецЕсли;
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, Подстрока.ИмяОбласти, Подстрока.Значение, ПолеТабДокумента);
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, СтрЗаменить(Подстрока.ИмяОбласти, "__", "_dic__"), Подстрока.КодСтроки, ПолеТабДокумента);
	КонецЦикла;
	
	ВидНалога 	  = Справочники.НалогиСборыОтчисления.НалогНаПрибыль;
	СтавкаКПН	  = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, ВидНалога, СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_056", Окр(?(СтавкаКПН <> NULL, СтавкаКПН, 0)), Форма100ПолеТабличногоДокументаСтраница5);
	
	ВычетПоПреференциям = РассчитатьВычетПоПреференциям();
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_027", Окр(ВычетПоПреференциям), Форма100ПолеТабличногоДокументаСтраница3);
	
	// заполним значения в структуре для последующего правильного авторасчета ячеек, которые входят в основную строку
	// 100.00.003 включает 100.00.003.I
	мСтруктураЗначений.Вставить("s_100_00_006", РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_006"));
	мСтруктураЗначений.Вставить("s_100_00_006_1", РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_006_1"));	
	
	Ячейка100_00_006 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_100_00_006");
	ИтогЗначение = Ячейка100_00_006 + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_100_00_006_1");
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_006", ИтогЗначение, Форма100ПолеТабличногоДокументаСтраница1);
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);
	
	// передаем в качестве признака перезаполнения Истина, т.к. это главная форма
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, КодФормы, Истина);
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);
	
	Модифицированность = Истина;       
	
КонецПроцедуры // Форма100ЗаполнитьАвто()

&НаСервере
Функция Форма100РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода", 			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", 			Новый Граница(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, ВидГраницы.Включая));	
	Запрос.УстановитьПараметр("Организация", 			Налогоплательщик);
	
	Запрос.УстановитьПараметр("СписокОрганизаций", 		мСписокСтруктурныхЕдиниц);
	
	Запрос.УстановитьПараметр("ПустаяОрганизация", 		Справочники.Организации.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("ПустоеЗначение", 		Неопределено);
	Запрос.УстановитьПараметр("ВидУчетаВР",				Справочники.ВидыУчетаНУ.ВР);
	Запрос.УстановитьПараметр("ВидУчетаНУ",				Справочники.ВидыУчетаНУ.НУ);
	Запрос.УстановитьПараметр("ВидУчетаПР",				Справочники.ВидыУчетаНУ.ПР);
	Запрос.УстановитьПараметр("ВидСубконтоЗатрат",		ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидСубконтоДоходов",		ПланыВидовХарактеристик.ВидыСубконтоТиповые.Доходы);
	Запрос.УстановитьПараметр("ВидСубконтоКонтрагенты",	ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	Запрос.УстановитьПараметр("ПустаяСтатьяЗатрат",		Справочники.СтатьиЗатрат.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеРБП",				Справочники.РасходыБудущихПериодов.ПустаяСсылка());
	Запрос.УстановитьПараметр("СчетРБП",				ПланыСчетов.Налоговый.РасходыБудущихПериодов); // 1620
	Запрос.УстановитьПараметр("СчетНЗС",				ПланыСчетов.Налоговый.НезавершенноеСтроительство);
	Запрос.УстановитьПараметр("Счет2500Н",				ПланыСчетов.Налоговый.ПреренцииДоВводаВЭксплуатацию);
	Запрос.УстановитьПараметр("Счет3350Н",				ПланыСчетов.Налоговый.ВзаиморасчетыСРаботниками);
	Запрос.УстановитьПараметр("Счет60Н",				ПланыСчетов.Налоговый.Доходы);
	Запрос.УстановитьПараметр("Счет7000Н",              ПланыСчетов.Налоговый.СебестоимостьПроданныхТоваров);
	
	// параметры по курсовым 
	Запрос.УстановитьПараметр("КодСтрокиДоходОтКурсовойРазницы",   СтруктураРеквизитовФормы.КодСтрокиДоходОтКурсовойРазницы);
	Запрос.УстановитьПараметр("КодСтрокиРасходыПоКурсовойРазнице", СтруктураРеквизитовФормы.КодСтрокиРасходыПоКурсовойРазнице);
	
	СчетаРасходов = Новый СписокЗначений;
	СчетаРасходов.Добавить(ПланыСчетов.Налоговый.Расходы);
	СчетаРасходов.Добавить(ПланыСчетов.Налоговый.Производство_);
	
	Запрос.УстановитьПараметр("СчетаРасходов",			СчетаРасходов);
	Запрос.УстановитьПараметр("Счет7900Н",				ПланыСчетов.Налоговый.РасходыНаРемонтВА);
	Запрос.УстановитьПараметр("Счет7410Н",				ПланыСчетов.Налоговый.ПрочиеРасходыПоВнеоборотнымАктивам);
	Запрос.УстановитьПараметр("Счет000",				ПланыСчетов.Налоговый.Вспомогательный);
	Запрос.УстановитьПараметр("КапитальныйРемонт",		Перечисления.ВидыРемонтаВА.Капитальный);
	
	СчетаТМЗ = Новый СписокЗначений;
	СчетаТМЗ.Добавить(ПланыСчетов.Налоговый.СырьеИМатериалы); 	//1310
	СчетаТМЗ.Добавить(ПланыСчетов.Налоговый.ГотоваяПродукция); 	//1320
	СчетаТМЗ.Добавить(ПланыСчетов.Налоговый.Товары); 			//1330
	СчетаТМЗ.Добавить(ПланыСчетов.Налоговый.МатериалыПереданныеВПереработку); // 1351
	
	Запрос.УстановитьПараметр("СчетаТМЗ", СчетаТМЗ);
	
	КодСтрокиКурсовойРазницы = Новый СписокЗначений;
	КодСтрокиКурсовойРазницы.Добавить(СтруктураРеквизитовФормы.КодСтрокиДоходОтКурсовойРазницы);
	КодСтрокиКурсовойРазницы.Добавить(СтруктураРеквизитовФормы.КодСтрокиРасходыПоКурсовойРазнице);
	
	Запрос.УстановитьПараметр("КодСтрокиКурсовойРазницы",	КодСтрокиКурсовойРазницы);
	Запрос.УстановитьПараметр("КодСтроки",					"100.00%");
	
	Запрос.УстановитьПараметр("СчетаДоходов",		ПланыСчетов.Налоговый.Доходы); //счета 60Н, 70Н
	
	СписокСчетовНал = Новый СписокЗначений;	
	СписокСчетовНал.Добавить(ПланыСчетов.Налоговый.Производство_);	//счет 80Н    	
	СписокСчетовНал.Добавить(ПланыСчетов.Налоговый.Расходы);    	//счет 70Н    	
	
	Запрос.УстановитьПараметр("СчетаРасходов",		СписокСчетовНал); //счета 80Н, 70Н
	
	СписокСчетовАктивов = Новый СписокЗначений;
	СписокСчетовАктивов.Добавить(ПланыСчетов.Налоговый.Запасы); 		  			  	//счет 1310
	СписокСчетовАктивов.Добавить(ПланыСчетов.Налоговый.НезавершенноеПроизводство); 		//счет 1340	
	СписокСчетовАктивов.Добавить(ПланыСчетов.Налоговый.ПрочиеЗапасы); 					//счет 1350		
	СписокСчетовАктивов.Добавить(ПланыСчетов.Налоговый.ПрочиеАктивы_); 					//счет 1600	
	
	Запрос.УстановитьПараметр("СписокСчетовАктивов",        СписокСчетовАктивов); 	
	Запрос.УстановитьПараметр("СписокСчетов30Н",			ПланыСчетов.Налоговый.РасчетыСКонтрагентамиИПрочиеВзаиморасчеты);
	
	СчетаРасходовИНезавершенногоСтроительства = Новый СписокЗначений;
	СчетаРасходовИНезавершенногоСтроительства.Добавить(ПланыСчетов.Налоговый.НезавершенноеСтроительство); 	//счет 2400Н
	СчетаРасходовИНезавершенногоСтроительства.Добавить(ПланыСчетов.Налоговый.Расходы);    					//счет 70Н
	СчетаРасходовИНезавершенногоСтроительства.Добавить(ПланыСчетов.Налоговый.Производство_); 				//счет 80Н
	
	Запрос.УстановитьПараметр("СчетаРасходовИНезавершенногоСтроительства",			СчетаРасходовИНезавершенногоСтроительства);		//счета 2400Н, 70Н, 80Н
	
	СписокСчетовСтрокиA = Новый СписокЗначений;
	СписокСчетовСтрокиA.Добавить(ПланыСчетов.Налоговый.Товары); 					//счет 1330Н        	
	СписокСчетовСтрокиA.Добавить(ПланыСчетов.Налоговый.СырьеИМатериалы);    		//счет 1310Н    	
	СписокСчетовСтрокиA.Добавить(ПланыСчетов.Налоговый.ПрочиеЗапасы); 			   	//счет 1350Н
	
	Запрос.УстановитьПараметр("СписокСчетовСтрокиA",		СписокСчетовСтрокиA);   //счета 1330Н, 1310Н, 1350Н
	
	Запрос.УстановитьПараметр("КодСтрокЗП",					"100.00.019.IV");
	Запрос.УстановитьПараметр("КодСтрокиA",					"100.00.019.IIIA");
	Запрос.УстановитьПараметр("КодСтрокиРБП",				"100.00.019");
	
	Запрос.УстановитьПараметр("Топливо",);
	
	КодыСтрок = Новый СписокЗначений;
	КодыСтрок.Добавить("100.00.019.IIIA"); 					
	КодыСтрок.Добавить("100.00.019.IIIB"); 					
	КодыСтрок.Добавить("100.00.019.IIIC"); 					
	КодыСтрок.Добавить("100.00.019.IIID"); 					
	КодыСтрок.Добавить("100.00.019.IIIE"); 					
	КодыСтрок.Добавить("100.00.019.IIIF"); 					
	КодыСтрок.Добавить("100.00.019.IIIG"); 					
	КодыСтрок.Добавить("100.00.019.IIIH"); 					
	
	Запрос.УстановитьПараметр("КодыСтрок", КодыСтрок);	
	
	СписокДохКодовСтрок = Форма100ПолучитьСписокКодовДоходов();
	ДополнитьСписокКодовСтрокИзКлассификатора("100.00.014"  , СписокДохКодовСтрок, мМакетКодовСтрок);
	ДополнитьСписокКодовСтрокИзКлассификатора("100.00.016"  , СписокДохКодовСтрок, мМакетКодовСтрок);
	ДополнитьСписокКодовСтрокИзКлассификатора("100.00.052.B", СписокДохКодовСтрок, мМакетКодовСтрок);
	
	СписокРасКодовСтрок = Форма100ПолучитьСписокКодовРасходов();
	ДополнитьСписокКодовСтрокИзКлассификатора("100.00.052.A", СписокРасКодовСтрок, мМакетКодовСтрок);
	
	Запрос.УстановитьПараметр("СписокДохКодовСтрок", СписокДохКодовСтрок);
	Запрос.УстановитьПараметр("СписокРасКодовСтрок", СписокРасКодовСтрок);
	
	
	Запрос.УстановитьПараметр("КодСтрокиКоррДоходов", "100.00.041.I");
	Запрос.УстановитьПараметр("КодСтрокиКоррВычетов", "100.00.041.II");
	Запрос.УстановитьПараметр("КодСтроки50",          "100.00.050");
	
	// Вычет по налогам только для балансового метода
	ВедениеВРБалансовымМетодом  = СтруктураРеквизитовФормы.ВедениеВРБалансовымМетодом;
	Запрос.УстановитьПараметр("ВедениеВРБалансовымМетодом", ВедениеВРБалансовымМетодом);
	
	КодыДляИсключенияИзОсновногоЗапроса = Новый СписокЗначений;
	КодыДляИсключенияИзОсновногоЗапроса.Добавить(СтруктураРеквизитовФормы.КодСтрокиДоходОтКурсовойРазницы);// курсовая
	КодыДляИсключенияИзОсновногоЗапроса.Добавить(СтруктураРеквизитовФормы.КодСтрокиРасходыПоКурсовойРазнице);// курсовая
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.IIIA"); 					
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.IIIB"); 					
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.IIIC"); 					
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.IIID"); 					
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.IIIE"); 					
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.IIIF"); 					
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.IIIG"); 					
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.IIIH");
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.IV");
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.V");
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.VI");
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.VII");
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.VIII");
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.IX");
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019%");
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.050");
	
	
	// Штрафы и пени не разрешены к вычету, поэтому игнорируем их
	СписокИсключаемыхПлатежей = Новый СписокЗначений;
	СписокИсключаемыхПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.ПениАкт);
	СписокИсключаемыхПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.ПениСам);
	СписокИсключаемыхПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.Штраф);	
	Запрос.УстановитьПараметр("СписокИсключаемыхПлатежей", СписокИсключаемыхПлатежей);
	
	Запрос.УстановитьПараметр("КодыДляИсключенияИзОсновногоЗапроса", 	КодыДляИсключенияИзОсновногоЗапроса);
	Запрос.УстановитьПараметр("ПризнакВключенияПРТМЗВПериодеСписания",	ПризнакВключенияПРТМЗВПериодеСписания);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Период КАК Период,
	|	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.ВидДоходаРасхода КАК Доход,
	|	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик КАК Организация,
	|	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.КодСтроки КАК КодСтроки,
	|	ВЫБОР
	|		КОГДА КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик = &ПустаяОрганизация
	|			ТОГДА 3
	|		КОГДА КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик = &ПустоеЗначение
	|			ТОГДА 2
	|		КОГДА КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик = &Организация
	|			ТОГДА 1
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Приоритет
	|ИЗ
	|	РегистрСведений.КодыСтрокДекларацииПоНалогуНаПрибыль.СрезПоследних(
	|			&КонПериода,
	|			(Налогоплательщик = &ПустаяОрганизация
	|				ИЛИ Налогоплательщик = &ПустоеЗначение
	|				ИЛИ Налогоплательщик = &Организация)
	|				И НЕ КодСтроки = """") КАК КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Приоритет,
	|	Доход
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА СпособыОтраженияКурсовойРазницы.СубконтоДоходовНУ1 ССЫЛКА Справочник.Доходы
	|			ТОГДА СпособыОтраженияКурсовойРазницы.СубконтоДоходовНУ1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СпособыОтраженияКурсовойРазницы.СубконтоДоходовНУ2 ССЫЛКА Справочник.Доходы
	|					ТОГДА СпособыОтраженияКурсовойРазницы.СубконтоДоходовНУ2
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СпособыОтраженияКурсовойРазницы.СубконтоДоходовНУ3 ССЫЛКА Справочник.Доходы
	|							ТОГДА СпособыОтраженияКурсовойРазницы.СубконтоДоходовНУ3
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ДоходРасходКурсовых,
	|	&КодСтрокиДоходОтКурсовойРазницы КАК Код
	|ПОМЕСТИТЬ ВТ_ДоходРасходКурсовой
	|ИЗ
	|	РегистрСведений.СпособыОтраженияКурсовойРазницы КАК СпособыОтраженияКурсовойРазницы
	|ГДЕ
	|	(СпособыОтраженияКурсовойРазницы.Организация В (&Организация)
	|			ИЛИ СпособыОтраженияКурсовойРазницы.Организация = &ПустаяОрганизация)
	|	И ВЫБОР
	|			КОГДА СпособыОтраженияКурсовойРазницы.СубконтоДоходовНУ1 ССЫЛКА Справочник.Доходы
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА СпособыОтраженияКурсовойРазницы.СубконтоДоходовНУ2 ССЫЛКА Справочник.Доходы
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ВЫБОР
	|							КОГДА СпособыОтраженияКурсовойРазницы.СубконтоДоходовНУ3 ССЫЛКА Справочник.Доходы
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА СпособыОтраженияКурсовойРазницы.СубконтоДоходовНУ1 ССЫЛКА Справочник.Доходы
	|			ТОГДА СпособыОтраженияКурсовойРазницы.СубконтоДоходовНУ1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СпособыОтраженияКурсовойРазницы.СубконтоДоходовНУ2 ССЫЛКА Справочник.Доходы
	|					ТОГДА СпособыОтраженияКурсовойРазницы.СубконтоДоходовНУ2
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СпособыОтраженияКурсовойРазницы.СубконтоДоходовНУ3 ССЫЛКА Справочник.Доходы
	|							ТОГДА СпособыОтраженияКурсовойРазницы.СубконтоДоходовНУ3
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СпособыОтраженияКурсовойРазницы.СубконтоРасходовНУ1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА СпособыОтраженияКурсовойРазницы.СубконтоРасходовНУ1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СпособыОтраженияКурсовойРазницы.СубконтоРасходовНУ2 ССЫЛКА Справочник.СтатьиЗатрат
	|					ТОГДА СпособыОтраженияКурсовойРазницы.СубконтоРасходовНУ2
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СпособыОтраженияКурсовойРазницы.СубконтоРасходовНУ3 ССЫЛКА Справочник.СтатьиЗатрат
	|							ТОГДА СпособыОтраженияКурсовойРазницы.СубконтоРасходовНУ3
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	&КодСтрокиРасходыПоКурсовойРазнице
	|ИЗ
	|	РегистрСведений.СпособыОтраженияКурсовойРазницы КАК СпособыОтраженияКурсовойРазницы
	|ГДЕ
	|	(СпособыОтраженияКурсовойРазницы.Организация В (&Организация)
	|			ИЛИ СпособыОтраженияКурсовойРазницы.Организация = &ПустаяОрганизация)
	|	И ВЫБОР
	|			КОГДА СпособыОтраженияКурсовойРазницы.СубконтоРасходовНУ1 ССЫЛКА Справочник.СтатьиЗатрат
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА СпособыОтраженияКурсовойРазницы.СубконтоРасходовНУ2 ССЫЛКА Справочник.СтатьиЗатрат
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ВЫБОР
	|							КОГДА СпособыОтраженияКурсовойРазницы.СубконтоРасходовНУ3 ССЫЛКА Справочник.СтатьиЗатрат
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА СпособыОтраженияКурсовойРазницы.СубконтоРасходовНУ1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА СпособыОтраженияКурсовойРазницы.СубконтоРасходовНУ1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СпособыОтраженияКурсовойРазницы.СубконтоРасходовНУ2 ССЫЛКА Справочник.СтатьиЗатрат
	|					ТОГДА СпособыОтраженияКурсовойРазницы.СубконтоРасходовНУ2
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СпособыОтраженияКурсовойРазницы.СубконтоРасходовНУ3 ССЫЛКА Справочник.СтатьиЗатрат
	|							ТОГДА СпособыОтраженияКурсовойРазницы.СубконтоРасходовНУ3
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДохода.Доход КАК ДоходРасход,
	|	ВЫБОР
	|		КОГДА ВТ_ДоходРасходКурсовой.Код ЕСТЬ NULL
	|			ТОГДА ДанныеОКодахДекларации.КодСтроки
	|		ИНАЧЕ ВТ_ДоходРасходКурсовой.Код
	|	КОНЕЦ КАК КодСтроки
	|ПОМЕСТИТЬ ВТ_СведенияОкодахСтрокДекларации
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДохода.Доход КАК Доход,
	|		МИНИМУМ(ТаблицаДохода.Приоритет) КАК Приоритет
	|	ИЗ
	|		ВТ_Приоритет КАК ТаблицаДохода
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаДохода.Доход) КАК ТаблицаДохода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоритет КАК ДанныеОКодахДекларации
	|		ПО ТаблицаДохода.Приоритет = ДанныеОКодахДекларации.Приоритет
	|			И ТаблицаДохода.Доход = ДанныеОКодахДекларации.Доход
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоходРасходКурсовой КАК ВТ_ДоходРасходКурсовой
	|		ПО ТаблицаДохода.Доход = ВТ_ДоходРасходКурсовой.ДоходРасходКурсовых
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДоходРасход,
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""100.00.019.IIIA"" КАК КодСтроки,
	|	0 КАК ДоходРасход,
	|	СУММА(ЕСТЬNULL(НалоговыйОбороты.СуммаОборотДт, 0) - ЕСТЬNULL(НалоговыйОбороты.СуммаОборотКт, 0)) КАК Сумма,
	|	0 КАК ВыдСообщение,
	|	НалоговыйОбороты.ВидУчета КАК ВидУчета
	|ПОМЕСТИТЬ ВТ_СтрокаIIIA
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			,
	|			Счет В ИЕРАРХИИ (&СписокСчетовСтрокиA),
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И ВидУчета <> &ВидУчетаВР,
	|			КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав)),
	|			) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.ВидУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""100.00.019.IIIA"" КАК КодСтроки,
	|	0 КАК ДоходРасход,
	|	0 КАК Сумма,
	|	""ВР"" КАК ВыдСообщение,
	|	НалоговыйОбороты.ВидУчета КАК ВидУчета
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			,
	|			Счет В ИЕРАРХИИ (&СписокСчетовСтрокиA),
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И ВидУчета = &ВидУчетаВР,
	|			КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав)),
	|			) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.ВидУчета
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""100.00.019.IIIA"",
	|	0,
	|	СУММА(ЕСТЬNULL(НалоговыйОбороты.СуммаОборотДт, 0)),
	|	0,
	|	НалоговыйОбороты.ВидУчета
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			,
	|			Счет В ИЕРАРХИИ (&СписокСчетовСтрокиA)
	|				И НЕ Счет = &Счет7410Н,
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И ВидУчета <> &ВидУчетаВР,
	|			НЕ КорСчет В ИЕРАРХИИ (&СписокСчетовСтрокиA, ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ГотоваяПродукция), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.Расходы), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.Производство_), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаработУслугПрав), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.Вспомогательный)),
	|			) КАК НалоговыйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.ВидУчета
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""100.00.019.IIIA"",
	|	0,
	|	СУММА(ЕСТЬNULL(НалоговыйОбороты.СуммаОборотДт, 0) - ЕСТЬNULL(НалоговыйОбороты.СуммаОборотКт, 0)),
	|	0,
	|	НалоговыйОбороты.ВидУчета
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			,
	|			Счет В (&СписокСчетовСтрокиA),
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И ВидУчета <> &ВидУчетаВР,
	|			КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.Расходы)),
	|			) КАК НалоговыйОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОкодахСтрокДекларации КАК ДанныеОКодахДекларации
	|		ПО НалоговыйОбороты.КорСубконто1 = ДанныеОКодахДекларации.ДоходРасход
	|			И (ДанныеОКодахДекларации.КодСтроки = &КодСтрокиКоррВычетов)
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОбороты.ВидУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапросПо30Строкам.КодСтроки КАК КодСтроки,
	|	ЗапросПо30Строкам.ДоходРасход КАК ДоходРасход,
	|	ЗапросПо30Строкам.СуммаСтроки КАК Сумма,
	|	ЗапросПо30Строкам.Поле2 КАК ВыдСообщение,
	|	ЗапросПо30Строкам.ВидУчета КАК ВидУчета,
	|	ЗапросПо30Строкам.Счет КАК Счет
	|ПОМЕСТИТЬ ВТ_СтрокиIII
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеОКодахДекларации.КодСтроки КАК КодСтроки,
	|		ДанныеОКодахДекларации.ДоходРасход КАК ДоходРасход,
	|		СУММА(ЕСТЬNULL(НалоговыйОбороты.СуммаОборотДт, 0) - ЕСТЬNULL(НалоговыйОбороты.СуммаОборотКт, 0)) КАК СуммаСтроки,
	|		0 КАК Поле2,
	|		НалоговыйОбороты.ВидУчета КАК ВидУчета,
	|		НалоговыйОбороты.Счет КАК Счет
	|	ИЗ
	|		РегистрБухгалтерии.Налоговый.Обороты(
	|				&НачПериода,
	|				&КонПериода,
	|				,
	|				Счет В ИЕРАРХИИ (&СчетаРасходовИНезавершенногоСтроительства)
	|					И НЕ Счет = &Счет7900Н
	|					И НЕ Счет = &Счет7410Н,
	|				&ВидСубконтоЗатрат,
	|				Организация В (&СписокОрганизаций)
	|					И ВидУчета <> &ВидУчетаВР,
	|				НЕ КорСчет В ИЕРАРХИИ (&Счет000),
	|				&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОкодахСтрокДекларации КАК ДанныеОКодахДекларации
	|			ПО НалоговыйОбороты.Субконто1 = ДанныеОКодахДекларации.ДоходРасход
	|				И (ДанныеОКодахДекларации.КодСтроки В (&КодыСтрок))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеОКодахДекларации.ДоходРасход,
	|		ДанныеОКодахДекларации.КодСтроки,
	|		НалоговыйОбороты.ВидУчета,
	|		НалоговыйОбороты.Счет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеОКодахДекларации.КодСтроки,
	|		ДанныеОКодахДекларации.ДоходРасход,
	|		СУММА(ЕСТЬNULL(НалоговыйОбороты.СуммаОборотДт, 0) - ЕСТЬNULL(НалоговыйОбороты.СуммаОборотКт, 0)),
	|		0,
	|		НалоговыйОбороты.ВидУчета,
	|		НалоговыйОбороты.Счет
	|	ИЗ
	|		РегистрБухгалтерии.Налоговый.Обороты(
	|				&НачПериода,
	|				&КонПериода,
	|				,
	|				Счет = &Счет7900Н
	|					ИЛИ Счет = &Счет7410Н,
	|				&ВидСубконтоЗатрат,
	|				Организация В (&СписокОрганизаций)
	|					И ВидУчета <> &ВидУчетаВР,
	|				НЕ КорСчет В ИЕРАРХИИ (&Счет000),
	|				&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОкодахСтрокДекларации КАК ДанныеОКодахДекларации
	|			ПО НалоговыйОбороты.Субконто1 = ДанныеОКодахДекларации.ДоходРасход
	|				И (ДанныеОКодахДекларации.КодСтроки В (&КодыСтрок))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеОКодахДекларации.ДоходРасход,
	|		ДанныеОКодахДекларации.КодСтроки,
	|		НалоговыйОбороты.ВидУчета,
	|		НалоговыйОбороты.Счет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеОКодахДекларации.КодСтроки,
	|		ДанныеОКодахДекларации.ДоходРасход,
	|		СУММА(ЕСТЬNULL(НалоговыйОбороты.СуммаОборотДт, 0) - ЕСТЬNULL(НалоговыйОбороты.СуммаОборотКт, 0)),
	|		0,
	|		НалоговыйОбороты.ВидУчета,
	|		НалоговыйОбороты.Счет
	|	ИЗ
	|		РегистрБухгалтерии.Налоговый.Обороты(
	|				&НачПериода,
	|				&КонПериода,
	|				,
	|				Счет = &СчетРБП,
	|				,
	|				Организация В (&СписокОрганизаций)
	|					И ВидУчета <> &ВидУчетаВР,
	|				НЕ КорСчет В ИЕРАРХИИ (&Счет000),
	|				&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОкодахСтрокДекларации КАК ДанныеОКодахДекларации
	|			ПО (ДанныеОКодахДекларации.КодСтроки В (&КодыСтрок))
	|				И (ВЫРАЗИТЬ(НалоговыйОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).СубконтоНУ1 = ДанныеОКодахДекларации.ДоходРасход
	|					ИЛИ ВЫРАЗИТЬ(НалоговыйОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).СубконтоНУ2 = ДанныеОКодахДекларации.ДоходРасход
	|					ИЛИ ВЫРАЗИТЬ(НалоговыйОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).СубконтоНУ3 = ДанныеОКодахДекларации.ДоходРасход)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеОКодахДекларации.ДоходРасход,
	|		ДанныеОКодахДекларации.КодСтроки,
	|		НалоговыйОбороты.ВидУчета,
	|		НалоговыйОбороты.Счет) КАК ЗапросПо30Строкам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НалоговыйОборотыПоЗатратам.Субконто1 КАК ДоходРасход,
	|	ЕСТЬNULL(НалоговыйОборотыПоЗатратам.СуммаОборотДт, 0) - ЕСТЬNULL(НалоговыйОборотыПоЗатратам.СуммаОборотКт, 0) КАК Сумма
	|ПОМЕСТИТЬ ВТ_ОбщиеДоходыЗатраты
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			,
	|			Счет В ИЕРАРХИИ (&СчетаРасходов)
	|				И НЕ Счет = &Счет7900Н
	|				И НЕ Счет = &Счет7410Н,
	|			&ВидСубконтоЗатрат,
	|			Организация В (&СписокОрганизаций)
	|				И ВидУчета = &ВидУчетаНУ,
	|			НЕ КорСчет В ИЕРАРХИИ (&Счет000)
	|				И НЕ КорСчет В ИЕРАРХИИ (&СчетаРасходов)
	|				И НЕ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.НезавершенноеПроизводство)),
	|			) КАК НалоговыйОборотыПоЗатратам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОборотыПоДоходам.Субконто1,
	|	ЕСТЬNULL(НалоговыйОборотыПоДоходам.СуммаОборотКт, 0) - ЕСТЬNULL(НалоговыйОборотыПоДоходам.СуммаОборотДт, 0)
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			,
	|			Счет В ИЕРАРХИИ (&СчетаДоходов),
	|			&ВидСубконтоДоходов,
	|			Организация В (&СписокОрганизаций)
	|				И ВидУчета = &ВидУчетаНУ,
	|			НЕ КорСчет В ИЕРАРХИИ (&Счет000),
	|			) КАК НалоговыйОборотыПоДоходам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1 КАК Субконто1,
	|	НалоговыйОстатки.СуммаНачальныйОстаток КАК СуммаНачальныйОстаток,
	|	НалоговыйОстатки.СуммаОборотДт КАК СуммаОборотДт,
	|	НалоговыйОстатки.СуммаОборотДт КАК СуммаОборотКт,
	|	НалоговыйОстатки.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|	НалоговыйОстатки.СуммаКонечныйОстаток - НалоговыйОстатки.СуммаНачальныйОстаток КАК СуммаОстаток,
	|	ДанныеОКодахДекларации.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ ВТ_ОстаткиРБП
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(
	|			&НачПериода,
	|			&КонПериода,
	|			,
	|			,
	|			Счет = &СчетРБП,
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 <> &ПустоеРБП
	|				И ВидУчета = &ВидУчетаНУ) КАК НалоговыйОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОкодахСтрокДекларации КАК ДанныеОКодахДекларации
	|		ПО (ПОДСТРОКА(ДанныеОКодахДекларации.КодСтроки, 1, 10) = &КодСтрокиРБП)
	|			И (ВЫРАЗИТЬ(НалоговыйОстатки.Субконто1 КАК Справочник.РасходыБудущихПериодов).СубконтоНУ1 = ДанныеОКодахДекларации.ДоходРасход
	|				ИЛИ ВЫРАЗИТЬ(НалоговыйОстатки.Субконто1 КАК Справочник.РасходыБудущихПериодов).СубконтоНУ2 = ДанныеОКодахДекларации.ДоходРасход
	|				ИЛИ ВЫРАЗИТЬ(НалоговыйОстатки.Субконто1 КАК Справочник.РасходыБудущихПериодов).СубконтоНУ3 = ДанныеОКодахДекларации.ДоходРасход)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(НалоговыйОстаткиИОбороты.СуммаОборотКт)* -1 КАК Сумма,
	|	ВТ_СведенияОкодахСтрокДекларации.КодСтроки КАК КодСтроки,
	|	ВТ_СведенияОкодахСтрокДекларации.ДоходРасход КАК ДоходРасход
	|ПОМЕСТИТЬ ВТ_Доходы31
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			,
	|			Счет В ИЕРАРХИИ (&СчетаДоходов),
	|			&ВидСубконтоДоходов,
	|			Организация В (&СписокОрганизаций)
	|				И ВидУчета = &ВидУчетаНУ,
	|			,
	|			) КАК НалоговыйОстаткиИОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОкодахСтрокДекларации КАК ВТ_СведенияОкодахСтрокДекларации
	|		ПО НалоговыйОстаткиИОбороты.Субконто1 = ВТ_СведенияОкодахСтрокДекларации.ДоходРасход
	|			И (ВТ_СведенияОкодахСтрокДекларации.КодСтроки = &КодСтроки50)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СведенияОкодахСтрокДекларации.КодСтроки,
	|	ВТ_СведенияОкодахСтрокДекларации.ДоходРасход
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(НалоговыйОстаткиИОбороты.СуммаОборотДт) КАК Сумма,
	|	ВТ_СведенияОкодахСтрокДекларации.КодСтроки КАК КодСтроки,
	|	ВТ_СведенияОкодахСтрокДекларации.ДоходРасход КАК ДоходРасход
	|ПОМЕСТИТЬ ВТ_Расходы31
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			,
	|			Счет В ИЕРАРХИИ (&Счет7000Н),
	|			&ВидСубконтоЗатрат,
	|			Организация В (&СписокОрганизаций)
	|				И ВидУчета = &ВидУчетаНУ,
	|			,
	|			) КАК НалоговыйОстаткиИОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОкодахСтрокДекларации КАК ВТ_СведенияОкодахСтрокДекларации
	|		ПО НалоговыйОстаткиИОбороты.Субконто1 = ВТ_СведенияОкодахСтрокДекларации.ДоходРасход
	|			И (ВТ_СведенияОкодахСтрокДекларации.КодСтроки = &КодСтроки50)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СведенияОкодахСтрокДекларации.КодСтроки,
	|	ВТ_СведенияОкодахСтрокДекларации.ДоходРасход
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновнойЗапрос.КодСтроки КАК КодСтроки,
	|	ОсновнойЗапрос.ДоходРасход КАК ДоходРасход,
	|	СУММА(ОсновнойЗапрос.Сумма) КАК Сумма,
	|	ВЫБОР
	|		КОГДА ОсновнойЗапрос.ДоходРасход ССЫЛКА Справочник.СтатьиЗатрат
	|				И НЕ ОсновнойЗапрос.КурсоваяРазница
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ОсновнойЗапрос.КодСтроки В (&СписокРасКодовСтрок)
	|							И ОсновнойЗапрос.КодСтроки В (&СписокДохКодовСтрок)
	|						ТОГДА ""СтатьяЗатратДох""
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ ОсновнойЗапрос.КодСтроки В (&СписокДохКодовСтрок)
	|						И ОсновнойЗапрос.КодСтроки В (&СписокРасКодовСтрок)
	|						И НЕ ОсновнойЗапрос.КурсоваяРазница
	|					ТОГДА ""ДоходРасх""
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК ВыдСообщение
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеОКодахДекларации.КодСтроки КАК КодСтроки,
	|		НалоговыйОбороты.Сумма КАК Сумма,
	|		НалоговыйОбороты.ДоходРасход КАК ДоходРасход,
	|		ЛОЖЬ КАК КурсоваяРазница
	|	ИЗ
	|		ВТ_ОбщиеДоходыЗатраты КАК НалоговыйОбороты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОкодахСтрокДекларации КАК ДанныеОКодахДекларации
	|			ПО НалоговыйОбороты.ДоходРасход = ДанныеОКодахДекларации.ДоходРасход
	|				И (ДанныеОКодахДекларации.КодСтроки ПОДОБНО &КодСтроки)
	|	ГДЕ
	|		НЕ ДанныеОКодахДекларации.КодСтроки В (&КодыДляИсключенияИзОсновногоЗапроса)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА КурсоваяРазница.ПоложительнаяКР - КурсоваяРазница.ОтрицательнаяКР < 0
	|				ТОГДА ""100.00.035""
	//|			ИНАЧЕ ""100.00.014""
	|			ИНАЧЕ ""100.00.014.226-1-18""
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА КурсоваяРазница.ПоложительнаяКР - КурсоваяРазница.ОтрицательнаяКР < 0
	|				ТОГДА КурсоваяРазница.ОтрицательнаяКР - КурсоваяРазница.ПоложительнаяКР
	|			ИНАЧЕ КурсоваяРазница.ПоложительнаяКР - КурсоваяРазница.ОтрицательнаяКР
	|		КОНЕЦ,
	|		0,
	|		ИСТИНА
	|	ИЗ
	|		(ВЫБРАТЬ
	|			СУММА(КонечныеИтоговыеДанные.ПоложительнаяКР) КАК ПоложительнаяКР,
	|			СУММА(КонечныеИтоговыеДанные.ОтрицательнаяКР) КАК ОтрицательнаяКР
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ВЫБОР
	|					КОГДА НалоговыйОбороты.Счет В ИЕРАРХИИ (&Счет60Н)
	|						ТОГДА НалоговыйОбороты.СуммаОборотКт
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ПоложительнаяКР,
	|				ВЫБОР
	|					КОГДА НалоговыйОбороты.Счет В ИЕРАРХИИ (&СчетаРасходов)
	|						ТОГДА НалоговыйОбороты.СуммаОборотДт
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ОтрицательнаяКР
	|			ИЗ
	|				РегистрБухгалтерии.Налоговый.Обороты(
	|						&НачПериода,
	|						&КонПериода,
	|						,
	|						Счет В ИЕРАРХИИ (&Счет60Н)
	|							ИЛИ Счет В ИЕРАРХИИ (&СчетаРасходов)
	|								И НЕ Счет = &Счет7900Н
	|								И НЕ Счет = &Счет7410Н,
	|						,
	|						Организация В (&СписокОрганизаций)
	|							И ВидУчета = &ВидУчетаНУ,
	|						НЕ КорСчет В ИЕРАРХИИ (&Счет000),
	|						) КАК НалоговыйОбороты
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОкодахСтрокДекларации КАК ДанныеОКодахДекларации
	|					ПО НалоговыйОбороты.Субконто1 = ДанныеОКодахДекларации.ДоходРасход
	|						И (ДанныеОКодахДекларации.КодСтроки В (&КодСтрокиКурсовойРазницы))) КАК КонечныеИтоговыеДанные) КАК КурсоваяРазница) КАК ОсновнойЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновнойЗапрос.КодСтроки,
	|	ОсновнойЗапрос.ДоходРасход,
	|	ОсновнойЗапрос.КурсоваяРазница
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Доходы31.КодСтроки,
	|	ВТ_Доходы31.ДоходРасход,
	|	ВТ_Доходы31.Сумма,
	|	0
	|ИЗ
	|	ВТ_Доходы31 КАК ВТ_Доходы31
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Расходы31.КодСтроки,
	|	ВТ_Расходы31.ДоходРасход,
	|	ВТ_Расходы31.Сумма,
	|	0
	|ИЗ
	|	ВТ_Расходы31 КАК ВТ_Расходы31
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_СтрокаIIIA.КодСтроки,
	|	ВТ_СтрокаIIIA.ДоходРасход,
	|	ВТ_СтрокаIIIA.Сумма,
	|	ВТ_СтрокаIIIA.ВыдСообщение
	|ИЗ
	|	ВТ_СтрокаIIIA КАК ВТ_СтрокаIIIA
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_СтрокиIII.КодСтроки,
	|	ВТ_СтрокиIII.ДоходРасход,
	|	ВТ_СтрокиIII.Сумма,
	|	ВТ_СтрокиIII.ВыдСообщение
	|ИЗ
	|	ВТ_СтрокиIII КАК ВТ_СтрокиIII
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""100.00.019.IV"",
	|	ДанныеОКодахДекларации.ДоходРасход,
	|	НалоговыйОбороты.СуммаОборотДт - НалоговыйОбороты.СуммаОборотКт,
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто1 = &ПустаяСтатьяЗатрат
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			,
	|			Счет В ИЕРАРХИИ (&СчетаРасходов)
	|				И НЕ Счет = &Счет7900Н,
	|			&ВидСубконтоЗатрат,
	|			Организация В (&СписокОрганизаций)
	|				И ВидУчета = &ВидУчетаНУ,
	|			НЕ КорСчет В ИЕРАРХИИ (&Счет000)
	|				И НЕ КорСчет В ИЕРАРХИИ (&СчетаРасходов)
	|				И НЕ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.НезавершенноеПроизводство))
	|				И НЕ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВнеоборотныеАктивы)),
	|			) КАК НалоговыйОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОкодахСтрокДекларации КАК ДанныеОКодахДекларации
	|		ПО НалоговыйОбороты.Субконто1 = ДанныеОКодахДекларации.ДоходРасход
	|			И (ДанныеОКодахДекларации.КодСтроки = &КодСтрокЗП)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеV.КодСтроки,
	|	ДанныеV.ДоходРасход,
	|	ДанныеV.Сумма,
	|	ДанныеV.ВыдСообщение
	|ИЗ
	|	(ВЫБРАТЬ
	|		""100.00.019.V"" КАК КодСтроки,
	|		НалоговыйОбороты.Субконто1 КАК ДоходРасход,
	|		НалоговыйОбороты.СуммаОборотКт КАК Сумма,
	|		0 КАК ВыдСообщение
	|	ИЗ
	|		РегистрБухгалтерии.Налоговый.Обороты(
	|				&НачПериода,
	|				&КонПериода,
	|				,
	|				Счет = &СчетРБП,
	|				,
	|				Организация В (&СписокОрганизаций)
	|					И Субконто1 <> &ПустоеРБП
	|					И ВидУчетаКор = &ВидУчетаНУ,
	|				НЕ КорСчет В ИЕРАРХИИ (&Счет000),
	|				) КАК НалоговыйОбороты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОстаткиРБП КАК НачальныйОстатокРБП
	|			ПО НалоговыйОбороты.Субконто1 = НачальныйОстатокРБП.Субконто1
	|	ГДЕ
	|		НачальныйОстатокРБП.СуммаНачальныйОстаток <> 0
	|		И (НалоговыйОбороты.СуммаОборотДт = 0
	|				ИЛИ НалоговыйОбороты.СуммаОборотДт < НалоговыйОбороты.СуммаОборотКт)) КАК ДанныеV
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонечныеИтоговыеДанные.КодСтроки,
	|	КонечныеИтоговыеДанные.ДоходРасход,
	|	КонечныеИтоговыеДанные.Сумма,
	|	КонечныеИтоговыеДанные.ВыдСообщение
	|ИЗ
	|	(ВЫБРАТЬ
	|		""100.00.019.VIII"" КАК КодСтроки,
	|		ВТ_СтрокаIIIA.ДоходРасход КАК ДоходРасход,
	|		ВТ_СтрокаIIIA.Сумма КАК Сумма,
	|		ВТ_СтрокаIIIA.ВыдСообщение КАК ВыдСообщение
	|	ИЗ
	|		ВТ_СтрокаIIIA КАК ВТ_СтрокаIIIA
	|	ГДЕ
	|		ВТ_СтрокаIIIA.ВидУчета В ИЕРАРХИИ(&ВидУчетаПР)
	|       И ЛОЖЬ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""100.00.019.VIII"",
	|		ВТ_СтрокиIII.ДоходРасход,
	|		ВТ_СтрокиIII.Сумма,
	|		ВТ_СтрокиIII.ВыдСообщение
	|	ИЗ
	|		ВТ_СтрокиIII КАК ВТ_СтрокиIII
	|	ГДЕ
	|		ВТ_СтрокиIII.ВидУчета В ИЕРАРХИИ(&ВидУчетаПР)
	|		И ВТ_СтрокиIII.Счет <> &Счет7900Н
	|		И ВТ_СтрокиIII.Счет <> &СчетНЗС) КАК КонечныеИтоговыеДанные
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""100.00.019.VIII"",
	|	НалоговыйОборотыПоСписаниюТМЗ.Субконто1,
	|	ЕСТЬNULL(НалоговыйОборотыПоСписаниюТМЗ.СуммаОборотДт, 0) - ЕСТЬNULL(НалоговыйОборотыПоСписаниюТМЗ.СуммаОборотКт, 0),
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			,
	|			Счет В ИЕРАРХИИ (&СчетаРасходов)
	|				И НЕ Счет = &Счет7900Н,
	|			&ВидСубконтоЗатрат,
	|			ВидУчета В ИЕРАРХИИ (&ВидУчетаПР)
	|				И Организация В (&СписокОрганизаций)
	|				И (ВидУчетаКор = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)
	|					ИЛИ ВидУчетаКор <> ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.ВР)
	|),
	|			КорСчет В ИЕРАРХИИ (&СчетаТМЗ),
	|			) КАК НалоговыйОборотыПоСписаниюТМЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОкодахСтрокДекларации КАК ДанныеОКодахДекларации
	|		ПО НалоговыйОборотыПоСписаниюТМЗ.Субконто1 = ДанныеОКодахДекларации.ДоходРасход
	|ГДЕ
	|	ПОДСТРОКА(ДанныеОКодахДекларации.КодСтроки, 1, 15) = ""100.00.019.VIII""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗапросПоСтроке30VI.КодСтроки,
	|	ЗапросПоСтроке30VI.ДоходРасход,
	|	ЗапросПоСтроке30VI.Сумма,
	|	ЗапросПоСтроке30VI.ВыдСообщение
	|ИЗ
	|	(ВЫБРАТЬ
	|		""100.00.019.VI"" КАК КодСтроки,
	|		0 КАК ДоходРасход,
	|		НалоговыйОбороты.СуммаОборотДт КАК Сумма,
	|		0 КАК ВыдСообщение
	|	ИЗ
	|		РегистрБухгалтерии.Налоговый.Обороты(
	|				&НачПериода,
	|				&КонПериода,
	|				,
	|				Счет = &Счет7900Н,
	|				,
	|				Организация В (&СписокОрганизаций)
	|					И ВидУчета <> &ВидУчетаВР,
	|				КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.РасчетыСКонтрагентамиИПрочиеВзаиморасчеты))
	|					И НЕ КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВзаиморасчетыСРаботниками),
	|				) КАК НалоговыйОбороты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОкодахСтрокДекларации КАК ДанныеОКодахДекларации
	|			ПО НалоговыйОбороты.Субконто1 = ДанныеОКодахДекларации.ДоходРасход
	|				И (ПОДСТРОКА(ДанныеОКодахДекларации.КодСтроки, 1, 10) = ""100.00.019""
	|					ИЛИ &ВедениеВРБалансовымМетодом
	|						И ПОДСТРОКА(ДанныеОКодахДекларации.КодСтроки, 1, 10) = ""100.00.026"")
	|				И (НЕ ПОДСТРОКА(ДанныеОКодахДекларации.КодСтроки, 1, 13) = ""100.00.019.IV"")
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""100.00.019.VI"",
	|		0,
	|		НалоговыйОбороты.СуммаОборотДт,
	|		0
	|	ИЗ
	|		РегистрБухгалтерии.Налоговый.Обороты(
	|				&НачПериода,
	|				&КонПериода,
	|				,
	|				Счет = &Счет7900Н,
	|				,
	|				Организация В (&СписокОрганизаций)
	|					И ВидУчета <> &ВидУчетаВР,
	|				КорСчет В ИЕРАРХИИ (&СписокСчетовАктивов),
	|				) КАК НалоговыйОбороты) КАК ЗапросПоСтроке30VI
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеIX.КодСтроки,
	|	ДанныеIX.ДоходРасход,
	|	ДанныеIX.Сумма,
	|	ДанныеIX.ВыдСообщение
	|ИЗ
	|	(ВЫБРАТЬ
	|		""100.00.019.IX"" КАК КодСтроки,
	|		НалоговыйОбороты.Субконто1 КАК ДоходРасход,
	|		ВЫБОР
	|			КОГДА НалоговыйОбороты.СуммаОборотДт < НалоговыйОбороты.СуммаОборотКт
	|				ТОГДА НалоговыйОбороты.СуммаОборотДт
	|			ИНАЧЕ КонечныйОстатокРБП.СуммаОстаток
	|		КОНЕЦ КАК Сумма,
	|		0 КАК ВыдСообщение
	|	ИЗ
	|		РегистрБухгалтерии.Налоговый.Обороты(
	|				&НачПериода,
	|				&КонПериода,
	|				,
	|				Счет = &СчетРБП,
	|				,
	|				Организация В (&СписокОрганизаций)
	|					И Субконто1 <> &ПустоеРБП
	|					И ВидУчета = &ВидУчетаНУ,
	|				НЕ КорСчет В ИЕРАРХИИ (&Счет000),
	|				) КАК НалоговыйОбороты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОстаткиРБП КАК КонечныйОстатокРБП
	|			ПО НалоговыйОбороты.Субконто1 = КонечныйОстатокРБП.Субконто1
	|	ГДЕ
	|		НалоговыйОбороты.СуммаОборотДт <> 0
	|		И КонечныйОстатокРБП.СуммаКонечныйОстаток <> 0
	|		И ПОДСТРОКА(КонечныйОстатокРБП.КодСтроки, 1, 14) = ""100.00.019.III"") КАК ДанныеIX
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗапросПоСтроке30VII.КодСтроки,
	|	ЗапросПоСтроке30VII.ДоходРасход,
	|	ЗапросПоСтроке30VII.Сумма,
	|	ЗапросПоСтроке30VII.ВыдСообщение
	|ИЗ
	|	(ВЫБРАТЬ
	|		""100.00.019.VII"" КАК КодСтроки,
	|		0 КАК ДоходРасход,
	|		НалоговыйОбороты.СуммаОборотДт КАК Сумма,
	|		0 КАК ВыдСообщение
	|	ИЗ
	|		РегистрБухгалтерии.Налоговый.Обороты(
	|				&НачПериода,
	|				&КонПериода,
	|				,
	|				Счет = &СчетНЗС,
	|				,
	|				Организация В (&СписокОрганизаций)
	|					И ВидУчета <> &ВидУчетаВР,
	|				КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.РасчетыСКонтрагентамиИПрочиеВзаиморасчеты))
	|					И НЕ КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВзаиморасчетыСРаботниками),
	|				) КАК НалоговыйОбороты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОкодахСтрокДекларации КАК ДанныеОКодахДекларации
	|			ПО НалоговыйОбороты.Субконто2 = ДанныеОКодахДекларации.ДоходРасход
	|				И (ПОДСТРОКА(ДанныеОКодахДекларации.КодСтроки, 1, 14) = ""100.00.019.III""
	|					ИЛИ &ВедениеВРБалансовымМетодом
	|						И ПОДСТРОКА(ДанныеОКодахДекларации.КодСтроки, 1, 10) = ""100.00.026"")
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""100.00.019.VII"",
	|		0,
	|		НалоговыйОбороты.СуммаОборотДт,
	|		0
	|	ИЗ
	|		РегистрБухгалтерии.Налоговый.Обороты(
	|				&НачПериода,
	|				&КонПериода,
	|				,
	|				Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВнеоборотныеАктивы)),
	|				,
	|				Организация В (&СписокОрганизаций)
	|					И ВидУчета <> &ВидУчетаВР,
	|				КорСчет В ИЕРАРХИИ (&СписокСчетовАктивов),
	|				) КАК НалоговыйОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""100.00.019.VII"",
	|		ВТ_СведенияОкодахСтрокДекларации.ДоходРасход,
	|		НалоговыйОстаткиИОбороты.СуммаОборотДт,
	|		0
	|	ИЗ
	|		РегистрБухгалтерии.Налоговый.Обороты(
	|				&НачПериода,
	|				&КонПериода,
	|				,
	|				Счет В ИЕРАРХИИ (&Счет7000Н),
	|				&ВидСубконтоЗатрат,
	|				Организация В (&СписокОрганизаций)
	|					И ВидУчета = &ВидУчетаНУ,
	|				,
	|				) КАК НалоговыйОстаткиИОбороты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОкодахСтрокДекларации КАК ВТ_СведенияОкодахСтрокДекларации
	|			ПО НалоговыйОстаткиИОбороты.Субконто1 = ВТ_СведенияОкодахСтрокДекларации.ДоходРасход
	|				И (ВТ_СведенияОкодахСтрокДекларации.КодСтроки = &КодСтроки50)) КАК ЗапросПоСтроке30VII
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	КодСтроки";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;		 
	
КонецФункции // Форма100РассчитатьДанныеФормы()

&НаСервере
Функция АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, ИтоговаяЯчейка, СтруктураВходящихЯчеек, ПолеТабДока, РассчитыватьСумму = Истина)
	
	ИтЗначение = 0;
	
	Если РассчитыватьСумму Тогда
		
		ЗначИтоговойЯчейки = 0;
		
		СтруктураТекущихЗначений = Новый Структура();	
		// добавляем значения входящих ячеек
		Для Каждого Элемент Из СтруктураВходящихЯчеек Цикл
			ЗначениеЯчейки = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, Элемент.Ключ);
			СтруктураТекущихЗначений.Вставить(Элемент.Ключ, ЗначениеЯчейки);		
		КонецЦикла;
		
		Для Каждого Элемент Из СтруктураТекущихЗначений Цикл
			ЗначИтоговойЯчейки = ЗначИтоговойЯчейки + Элемент.Значение;
		КонецЦикла;
		
		// передаем полученное итоговое значение в структуру и на форму
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИтоговаяЯчейка, Окр(ЗначИтоговойЯчейки), ПолеТабДока);
		
		ИтЗначение = ЗначИтоговойЯчейки;
		
	Иначе	
		
		// получим значение итоговой ячейки
		ЗначИтоговойЯчейки = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИтоговаяЯчейка);
		
		СтруктураТекущихЗначений = Новый Структура();	
		// добавляем значения входящих ячеек
		Для Каждого Элемент Из СтруктураВходящихЯчеек Цикл
			ЗначениеЯчейки = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, Элемент.Ключ);
			СтруктураТекущихЗначений.Вставить(Элемент.Ключ, ЗначениеЯчейки);		
		КонецЦикла;	
		
		// Создадим структуру предыдцщих значений, она не содержит итоговую ячейку
		СтруктураПредыдущихЗначений = Новый Структура;
		Если мСтруктураЗначений <> Неопределено Тогда
			Для Каждого Элемент Из СтруктураВходящихЯчеек Цикл
				Если мСтруктураЗначений.Свойство(Элемент.Ключ) Тогда
					ЗначениеЯчейкиДо = 0;
					мСтруктураЗначений.Свойство(Элемент.Ключ, ЗначениеЯчейкиДо);
					СтруктураПредыдущихЗначений.Вставить(Элемент.Ключ, ЗначениеЯчейкиДо);		
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
		//Рассчитаем итоговую ячейку
		// В случае, если в мСтруктураЗначений еще не было добавлено предыдуших значений, то значение "ДО" будет равно 0
		// Формула, например:
		//s_300_02_004 = s_300_02_004 - s_300_02_004_i_до + s_300_02_004_i - s_300_02_004_ii_до + s_300_02_004_ii
		//					   - s_300_02_004_iii_до + s_300_02_004_iii - s_300_02_004_iv_до + s_300_02_004_iv
		//					   - s_300_02_004_v_до + s_300_02_004_v - s_300_02_004_vi_до + s_300_02_004_vi;
		
		НовЗначИтоговойЯчейки = ЗначИтоговойЯчейки;
		// + все текущие значения + значение итоговой ячейки
		Для Каждого Элемент Из СтруктураТекущихЗначений Цикл
			НовЗначИтоговойЯчейки = НовЗначИтоговойЯчейки + Элемент.Значение;
		КонецЦикла;
		// - все предыдущие значения
		Для Каждого Элемент Из СтруктураПредыдущихЗначений Цикл
			НовЗначИтоговойЯчейки = НовЗначИтоговойЯчейки - Элемент.Значение;
		КонецЦикла;
		
		// запоминаем текущие значения взодящих ячеек в мСтруктураЗначений
		Для Каждого Элемент Из СтруктураТекущихЗначений Цикл				
			мСтруктураЗначений.Вставить(Элемент.Ключ, Элемент.Значение);  //новое значение данной области 		
		КонецЦикла;
		
		// передаем полученное итоговое значение в структуру и на форму
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, ИтоговаяЯчейка, НовЗначИтоговойЯчейки, Истина);		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИтоговаяЯчейка, Окр(НовЗначИтоговойЯчейки), ПолеТабДока);			
		
		// если итоговое значение ввели меньше чем сумма входящих значений
		// то очищаем все значения, в случае если входящих значений больше одного
		// если входящее значение одно, то приравниваем его со значением итоговой ячейки
		// - Проверим сумму входящих значений
		
		ОбщаяСуммаВходящихЗначений = 0;
		Для Каждого Элемент Из СтруктураТекущихЗначений Цикл		
			ОбщаяСуммаВходящихЗначений = ОбщаяСуммаВходящихЗначений + Элемент.Значение;		
		КонецЦикла;
		
		Если НовЗначИтоговойЯчейки < 0 И ОбщаяСуммаВходящихЗначений < 0 Тогда
			КонтрольНовЗнач    = (-1) * НовЗначИтоговойЯчейки;
			КонтрольОбщаяСумма = (-1) * ОбщаяСуммаВходящихЗначений;
		Иначе
			КонтрольНовЗнач    = НовЗначИтоговойЯчейки;
			КонтрольОбщаяСумма = ОбщаяСуммаВходящихЗначений;
		КонецЕсли;
		
		Если КонтрольНовЗнач < КонтрольОбщаяСумма Тогда
			// определим количество ячеек входящих
			Если СтруктураВходящихЯчеек.Количество() = 1 Тогда
				Для Каждого Элемент Из СтруктураВходящихЯчеек Цикл
					мСтруктураЗначений.Вставить(Элемент.Ключ, НовЗначИтоговойЯчейки);  //новое значение данной области 
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, Элемент.Ключ, Окр(НовЗначИтоговойЯчейки), ПолеТабДока);			
				КонецЦикла;			
			Иначе // больше одного, то обнуляем все входящие значения
				Для Каждого Элемент Из СтруктураВходящихЯчеек Цикл
					мСтруктураЗначений.Вставить(Элемент.Ключ, 0);  //новое значение данной области 
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, Элемент.Ключ, 0, ПолеТабДока);			
				КонецЦикла;			
			КонецЕсли;
		КонецЕсли;
		
		ИтЗначение = НовЗначИтоговойЯчейки;
		
	КонецЕсли;
	
	Возврат ИтЗначение;
	
КонецФункции // АвтоматическийРасчетПоСтрокам()

&НаСервере
Процедура Форма100РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки, ТекИмяФормы, Изменено = Истина)
	
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, ИмяЯчейки, ЗначениеЯчейки);
	КонецЕсли;
	
	//Расчет вычисляемых ячеек
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ТекИмяФормы);
	
	//Рассчитаем ячейку s_100_00_001, с учетом входящих в нее s_100_00_001_1 - s_100_00_001_4
	Если Изменено Тогда
		СтруктураА = Новый Структура;
		СтруктураА.Вставить("s_100_00_001_1");
		СтруктураА.Вставить("s_100_00_001_2");
		СтруктураА.Вставить("s_100_00_001_3");
		СтруктураА.Вставить("s_100_00_001_4");
		s_100_00_001 = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, "s_100_00_001", СтруктураА, Форма100ПолеТабличногоДокументаСтраница1, Ложь);		
	КонецЕсли;

	//Рассчитаем ячейку s_100_00_006, с учетом входящей в нее s_100_00_006_1
	Если Изменено Тогда
		СтруктураА = Новый Структура;
		ИмяОбластиА = "s_100_00_006_1";
		СтруктураА.Вставить(ИмяОбластиА);			
		s_100_00_006 = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, "s_100_00_006", СтруктураА, Форма100ПолеТабличногоДокументаСтраница1, Ложь);		
	КонецЕсли;
	
	//Рассчитаем ячейку s_100_00_007, с учетом входящей в нее s_100_00_007_1 и s_100_00_007_2
	Если Изменено Тогда
		СтруктураА = Новый Структура;
		СтруктураА.Вставить("s_100_00_007_1");
		СтруктураА.Вставить("s_100_00_007_2");
		s_100_00_007 = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, "s_100_00_007", СтруктураА, Форма100ПолеТабличногоДокументаСтраница1, Ложь);		
	КонецЕсли;
	
	//Рассчитаем ячейку s_100_00_016, с учетом входящих в нее s_100_00_016__1 - s_100_00_016__5
	СтруктураА   = ПолучитьСтруктуруВходящихЯчеек("s_100_00_016");
	s_100_00_016 = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, "s_100_00_016", СтруктураА, Форма100ПолеТабличногоДокументаСтраница2, Ложь);
	
	ЯчейкаСтрока016_0  = 0;
	ЯчейкаСтрока016_1  = 0;
	ЯчейкаСтрока016_13 = 0;
	ЯчейкаСтрока016_23 = 0;
	ЯчейкаСтрока016_Пр = 0;
	Для Каждого Элемент Из СтруктураА Цикл
		КодыПодстрокПоКлассификатору = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, СтрЗаменить(Элемент.Ключ, "__", "_dic__"));
		МассивКодовПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодыПодстрокПоКлассификатору, ";");
		Для Каждого КодПодстрокиПоКлассификатору Из МассивКодовПодстрок Цикл
			Если СокрЛП(КодПодстрокиПоКлассификатору) = "241-1-1" Тогда
				ЯчейкаСтрока016_1  = ЯчейкаСтрока016_1 + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, Элемент.Ключ);
			ИначеЕсли СокрЛП(КодПодстрокиПоКлассификатору) = "241-1-13" Тогда
				ЯчейкаСтрока016_13 = ЯчейкаСтрока016_13 + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, Элемент.Ключ);
			ИначеЕсли СокрЛП(КодПодстрокиПоКлассификатору) = "241-1-23" Тогда
				ЯчейкаСтрока016_23 = ЯчейкаСтрока016_23 + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, Элемент.Ключ);
			Иначе
				ЯчейкаСтрока016_Пр  = ЯчейкаСтрока016_Пр + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, Элемент.Ключ);
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЦикла;
	
	ЯчейкаСтрока016_0  = s_100_00_016 - ЯчейкаСтрока016_23;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "Строка016_0" , ЯчейкаСтрока016_0 , ?(Изменено, Форма100ПолеТабличногоДокументаСтраница2, Неопределено));
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "Строка016_1" , ЯчейкаСтрока016_1 , ?(Изменено, Форма100ПолеТабличногоДокументаСтраница2, Неопределено));
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "Строка016_13", ЯчейкаСтрока016_13, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница2, Неопределено));
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "Строка016_23", ЯчейкаСтрока016_23, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница2, Неопределено));
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "Строка016_Пр", ЯчейкаСтрока016_Пр, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница2, Неопределено));
	
	Если Изменено И ИмяЯчейки <> "s_100_00_014" Тогда
		//Рассчитаем ячейку s_100_00_014. Чтобы не происходило занижения доходов, учтем в ней сумму строки s_100_00_016
		СтруктураА = ПолучитьСтруктуруВходящихЯчеек("s_100_00_014");
		Для Каждого Элемент Из СтруктураА Цикл
			КодыПодстрокПоКлассификатору = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, СтрЗаменить(Элемент.Ключ, "__", "_dic__"));
			МассивКодовПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодыПодстрокПоКлассификатору, ";");
			Для Каждого КодПодстроки Из МассивКодовПодстрок Цикл
				Если СтрНайти(КодПодстроки, "226-1-13") Тогда
					СтруктураАА = Новый Структура("Строка016_13");
					ЗначениеПодстроки014 = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, Элемент.Ключ, СтруктураАА, Форма100ПолеТабличногоДокументаСтраница2, Ложь);		
					ЯчейкаСтрока016_0 = ЯчейкаСтрока016_0 - ЯчейкаСтрока016_13;
				КонецЕсли;
				Если СтрНайти(КодПодстроки, "226-1-16") Тогда
					СтруктураАА = Новый Структура("Строка016_1");
					ЗначениеПодстроки014 = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, Элемент.Ключ, СтруктураАА, Форма100ПолеТабличногоДокументаСтраница2, Ложь);		
					ЯчейкаСтрока016_0 = ЯчейкаСтрока016_0 - ЯчейкаСтрока016_1;
				КонецЕсли;
				Если СтрНайти(КодПодстроки, "226-1-25") Тогда
					СтруктураАА = Новый Структура("Строка016_Пр");
					ЗначениеПодстроки014 = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, Элемент.Ключ, СтруктураАА, Форма100ПолеТабличногоДокументаСтраница2, Ложь);		
					ЯчейкаСтрока016_0 = ЯчейкаСтрока016_0 - ЯчейкаСтрока016_Пр;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		СтруктураА.Вставить("Строка016_0");
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "Строка016_0" , ЯчейкаСтрока016_0 , ?(Изменено, Форма100ПолеТабличногоДокументаСтраница2, Неопределено));

		s_100_00_014 = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, "s_100_00_014", СтруктураА, Форма100ПолеТабличногоДокументаСтраница2, Ложь);		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_014", s_100_00_014, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница2, Неопределено));
	КонецЕсли;
	
	Если Изменено И ИмяЯчейки <> "s_100_00_013" Тогда
		//Рассчитаем ячейку s_100_00_013. В строке учитывается значение строки s_100_00_016_23
		СтруктураА  = Новый Структура;
		ИмяОбластиА = "Строка016_23";
		СтруктураА.Вставить(ИмяОбластиА, 0);
		s_100_00_013 = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, "s_100_00_013", СтруктураА, Форма100ПолеТабличногоДокументаСтраница2, Ложь);		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_013", s_100_00_013, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница2, Неопределено));
	КонецЕсли;
	
	//Рассчитаем ячейку 100.00.015. Совокупный годовой доход
	СГД = 0;	
	Для Н = 1 По 14 Цикл
		ИмяГрафы = "s_100_00_0" + Формат(Н, "ЧЦ=2; ЧВН=");
		СГД = СГД + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяГрафы);
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_015", СГД, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница2, Неопределено));
	
	//Рассчитаем ячейку 100.00.018. СГД с учетом корректировок
	СГДСУчетомКорректировок  = СГД  - РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_016")
		+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_017");
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_018", СГДСУчетомКорректировок, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница2, Неопределено));
	
	//Рассчитаем ячейку 100.00.019.III
	НомерНач = КодСимвола("a");
	НомерКон = КодСимвола("h");
	ИтогЗначение = 0 ;
	Для Н = НомерНач  По НомерКон Цикл
		ИмяГрафы = "s_100_00_019_3_" + Символ(Н);
		ИтогЗначение = ИтогЗначение + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяГрафы); 
	КонецЦикла;
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_019_3", ИтогЗначение, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница2, Неопределено));
	
	//Рассчитаем ячейку 100.00.019. Вычет по реализованным товарам
	ИтогЗначение = 0;
	Значение_019I    = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_019_1"); 
	Значение_019II   = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_019_2"); 
	Значение_019III  = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_019_3"); 
	Значение_019IV   = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_019_4"); 
	Значение_019V    = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_019_5"); 
	Значение_019VI   = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_019_6"); 
	Значение_019VII  = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_019_7"); 
	Значение_019VIII = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_019_8"); 
	Значение_019IX   = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_019_9"); 
	
	ИтогЗначение = (Значение_019I - Значение_019II + Значение_019III + Значение_019IV + Значение_019V - Значение_019VI - Значение_019VII
		- Значение_019VIII - Значение_019IX);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_019", ИтогЗначение, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница2, Неопределено));
	
	// Вычеты по ФА
	//Рассчитаем ячейку 100.00.026
	ИтогЗначение = 0;
	ЯчейкаСтрока011   = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Строка011");
	ЯчейкаСтрока012   = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Строка012");
	
	ИтогЗначение = ЯчейкаСтрока011 + ЯчейкаСтрока012;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_026", ИтогЗначение, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница3, Неопределено));
	
	//Рассчитаем ячейку s_100_00_028
	Если Изменено Тогда
		СтруктураА = Новый Структура;
		СтруктураА.Вставить("s_100_00_028_1");
		СтруктураА.Вставить("s_100_00_028_2");
		СтруктураА.Вставить("s_100_00_028_3");
		СтруктураА.Вставить("s_100_00_028_4");
		s_100_00_028 = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, "s_100_00_028", СтруктураА, Форма100ПолеТабличногоДокументаСтраница3, Ложь);		
	КонецЕсли;

	//Рассчитаем ячейку 100.00.040I. Вычеты
	Вычеты	= 0;
	Для Н = 19 По 39 Цикл
		ИмяГрафы = "s_100_00_0" + Формат(Н, "ЧЦ=2; ЧВН=");
		Вычеты = Вычеты + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяГрафы);
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_040_1", Вычеты, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница4, Неопределено));
	
	//Рассчитаем ячейку 100.00.040   Всего вычетов 
	ВсегоВычетов = 0;
	Значение_40II = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_040_2"); 
	Значение_040III = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_040_3");
	ПостоянноеУчреждениеРК = ?(РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "ПостоянноеУчереждениеЗаРК") = "Х", Истина, Ложь);
	
	Если Значение_040III > 0 И ПостоянноеУчреждениеРК Тогда
		ВсегоВычетов = Значение_040III; 
	ИначеЕсли Значение_40II > 0 Тогда
		ВсегоВычетов = Значение_40II;
	Иначе
		ВсегоВычетов = Вычеты;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_040", ВсегоВычетов, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница4, Неопределено));
	
	КорректировкаДоходовВычетов = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_041_1") - РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_041_2");
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_041", КорректировкаДоходовВычетов, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница4, Неопределено));
	
	// Рассчитаем строку 100.00.044. Налогооблагаемый доход/убыток
	// 								(100.00.018 – 100.00.040 + 100.00.041+100.00.042-100.00.043)"																						
	НОД = СГДСУчетомКорректировок - ВсегоВычетов + КорректировкаДоходовВычетов  
		+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_042")
		- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_043");
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_044", НОД, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница4, Неопределено));
	
	// Рассчитаем строку 100.00.046
	Если Изменено Тогда
		СтруктураА = Новый Структура;
		СтруктураА.Вставить("s_100_00_046_1");
		СтруктураА.Вставить("s_100_00_046_2");
		s_100_00_046 = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, "s_100_00_046", СтруктураА, Форма100ПолеТабличногоДокументаСтраница4, Истина);		
	КонецЕсли;

	// Рассчитаем строку 100.00.047. Всего налогооблагаемого дохода/убытка (100.00.044 - 100.00.046)
	НОДСУчетомИностранногоДохода = НОД
		- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_046");
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_047", НОДСУчетомИностранногоДохода, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница4, Неопределено));

	// Рассчитаем строку 100.00.049 определяется как разница ?(100.00.048I < 100.00.054I,0,100.00.048I -100.00.054I)
			
	s_100_00_049   = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_048_1")
				   - РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_054_1");
				   
	Если s_100_00_049 < 0 Тогда
		s_100_00_049 = 0		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_049", s_100_00_049, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница4, Неопределено));
			
	// Рассчитаем строку 100.00.051. Убыток, подлежащий переносу 
	//Если строка 100.00.047 имеет отрицательное значение, строка 100.00.051 определяется ([100.00.047] + 100.00.050 +100.02.008 I)
    //Если строка 100.00.047 имеет положительное значение, то строка определяется (100.00.050 + 100.02.008 I);»

	Убыток = ?(НОДСУчетомИностранногоДохода < 0, -НОДСУчетомИностранногоДохода, 0) 
		+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_050")
		+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "Строка008_1");
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_051", Убыток, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница4, Неопределено));
	
	// Рассчитаем строку 100.00.051.A. 	
	Если Изменено Тогда
		СтруктураА = ПолучитьСтруктуруВходящихЯчеек("s_100_00_051_a");
		s_100_00_051_a = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, "s_100_00_051_a", СтруктураА, Форма100ПолеТабличногоДокументаСтраница4, Ложь);		
	КонецЕсли;
	
	// Рассчитаем строку 100.00.052.A. 	
	Если Изменено Тогда
		СтруктураА = ПолучитьСтруктуруВходящихЯчеек("s_100_00_052_a");
		s_100_00_052_a = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, "s_100_00_052_a", СтруктураА, Форма100ПолеТабличногоДокументаСтраница5, Ложь);		
	КонецЕсли;
	
	// Рассчитаем строку 100.00.052.B. 	
	Если Изменено Тогда
		СтруктураА = ПолучитьСтруктуруВходящихЯчеек("s_100_00_052_b");
		s_100_00_052_b = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, "s_100_00_052_b", СтруктураА, Форма100ПолеТабличногоДокументаСтраница5, Ложь);		
	КонецЕсли;
	
	// Рассчитаем строку 100.00.052. Уменьшение НОД по п. 1, 2 и 4 ст. 288
	Если Изменено Тогда
		СтруктураА = Новый Структура;
		СтруктураА.Вставить("s_100_00_052_a");
		СтруктураА.Вставить("s_100_00_052_b");
		s_100_00_052 = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, "s_100_00_052", СтруктураА, Форма100ПолеТабличногоДокументаСтраница5, Истина);		
	КонецЕсли;
	
	//Рассчитаем строку 100.00.053. НОД  с учетом уменьшения: s_100_00_047 - s_100_00_052 
	//В случае если строка 100.00.052 больше строки 100.00.047, в строке 100.00.053 указывается ноль
	
	НОДсУчетомУменьшения = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_047")
		- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_052");
	
	Если НОДсУчетомУменьшения < 0 Тогда
		НОДсУчетомУменьшения = 0		
	КонецЕсли; 
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_053", НОДсУчетомУменьшения, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница5, Неопределено));
	
	// Рассчитаем строку 100.00.055. НОД  с учетом перенесенных убытков: s_100_00_053 - s_100_00_054 
	// Если строка 100.00.054 больше строки 100.00.053, в строке 100.00.055 указывается ноль.

	НОДсУчетомУбытков = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_053")
		- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_054");
	
	Если НОДсУчетомУбытков < 0 Тогда
		НОДсУчетомУбытков = 0		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_055", НОДсУчетомУбытков, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница5, Неопределено));
	
	// Рассчитаем строку 100.00.057. КПН: s_100_00_055 х s_100_00_056 

	КПН = Окр(РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_055")
		* РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_056") / 100);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_057", КПН, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница5, Неопределено));
	
	// Рассчитаем строку 100.00.058. Исчисленный КПН: s_100_00_057  - s_100_00_058_1- s_100_00_058_2 .. - s_100_00_058_7 
	// Если полученная разница меньше ноля, то в строке 100.00.055 указывается ноль;

	ИсчисленныйКПН = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_057")
		- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_058_1")
		- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_058_2")
		- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_058_3")
		- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_058_4")
		- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_058_5")
		- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_058_6")
		- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_058_7");
	
	Если ИсчисленныйКПН < 0 Тогда
		ИсчисленныйКПН = 0		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_058", ИсчисленныйКПН, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница5, Неопределено));
			
	// Рассчитаем строку 100.00.059.Сумма исчисленного корпоративного подоходного налога за налоговый период с учетом уменьшения налогового обязательства. 
	// Определяемая как разница строк (100.00.058 - 100.00.059I):
	
	// Рассчитаем строку 100.00.059.A. 	
	Если Изменено Тогда
		СтруктураА = ПолучитьСтруктуруВходящихЯчеек("s_100_00_059_a");
		s_100_00_059_a = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, "s_100_00_059_a", СтруктураА, Форма100ПолеТабличногоДокументаСтраница5, Ложь);		
	КонецЕсли;

	ИсчисленныйКПНСУчетомУменьшения = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_058")
		- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_059_a");
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_059", ИсчисленныйКПНСУчетомУменьшения, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница5, Неопределено));
	
	// Рассчитаем строку 100.00.060. Чистый доход. 
	// Определяется как 100.00.055 - 100.00.057.
	НерезидентРК = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "НерезидентРК") = "Х";
	Если НерезидентРК Тогда
		ЧистыйДоход = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_055")
			- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_057");
	Иначе
		ЧистыйДоход = 0;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_060", ЧистыйДоход, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница6, Неопределено));
		
	// Рассчитаем строку 100.00.043. Итоговая сумма исчисленного корпоративного подоходного налога. 
	// Определяется как 100.00.040 + 100.00.042 I + 100.00.042 II.
	// Рассчитаем строку 100.00.062. Итоговая сумма исчисленного корпоративного подоходного налога. 
	// Определяется как 100.00.059 + 100.00.061 I + 100.00.061 II+ 100.00.064.

	s_100_00_061_1   = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_061_1");
	s_100_00_061_2_2 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_061_2_2");
	Если ЗначениеЗаполнено(s_100_00_061_1) И ЗначениеЗаполнено(s_100_00_061_2_2) Тогда
		ИтоговыйКПН = 0;
	Иначе
		ИтоговыйКПН = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_059")
		+ s_100_00_061_1
		+ s_100_00_061_2_2
		+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_064");
	КонецЕсли;
				
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_062", ИтоговыйКПН, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница6, Неопределено));
		
	// Рассчитаем строку 100.00.063 = 100.00.049 х 100.00.056
	КПНКИКСтатья5 = Окр(РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_049")
		           * (РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_056")/100));   		
				   
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_063", КПНКИКСтатья5, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница6, Неопределено));
	
	// Рассчитаем строку 100.00.064 = 100.00.048 II  х 100.00.056 	
	КПНКИКСтатья4 = Окр(РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_048_2")
		           * (РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_056")/100)) ;   		
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_064", КПНКИКСтатья4, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница6, Неопределено));
	

	// Рассчитаем строку 100.00.065. Определяется как разница строк 100.00.063 и 100.00.058 II. Если полученная разница меньше ноля, то в строке 100.00.065 указывается ноль
	ИтоговыйКПНКИК =  РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_063")
					- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_00_058_2");
					
	Если ИтоговыйКПНКИК < 0 Тогда
		ИтоговыйКПНКИК = 0;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_00_065", ИтоговыйКПНКИК, ?(Изменено, Форма100ПолеТабличногоДокументаСтраница6, Неопределено));

	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ТекИмяФормы, ТаблицаДанных);
	
КонецПроцедуры

&НаСервере
// Проверяет дублирование рег. операций в заданном периоде
// Возвращает:
// текст с описанием сведений о выполнении рег. операции 
Процедура ПроверитьНаличиеРегламентнойОперацииЗакрытияСчетовНУВОтчетномПериоде() Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.ИмяДокументаРегламентныеОперацииЗакрытияСчетовНУ) Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаПериода", 	  СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаОкончанияПериода", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организации",  		  мСписокСтруктурныхЕдиниц);
	
	// временная таблица для выборки документов
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗакрытиеМесяца.ЗакрытиеСчетовНУ КАК ЗакрытиеСчетовНУ,
	|	ЗакрытиеМесяца.Ссылка КАК Ссылка,
	|	ЗакрытиеМесяца.Представление КАК ПредставлениеДокумента,
	|	ЗакрытиеМесяца.Дата
	|ИЗ
	|	Документ." + СтруктураРеквизитовФормы.ИмяДокументаРегламентныеОперацииЗакрытияСчетовНУ + " КАК ЗакрытиеМесяца
	|ГДЕ
	|	ЗакрытиеМесяца.Организация В(&Организации)
	|	И ЗакрытиеМесяца.Дата >= &ДатаНачалаПериода
	|	И ЗакрытиеМесяца.Дата <= &ДатаОкончанияПериода
	|	И ЗакрытиеМесяца.ЗакрытиеСчетовНУ
	|	И ЗакрытиеМесяца.Проведен
	|	И НЕ ЗакрытиеМесяца.ПометкаУдаления
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
	|ПО
	|	ОБЩИЕ";
	
	ВыборкаВидовОпераций = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);		
	Пока ВыборкаВидовОпераций.Следующий() Цикл        	
		Если ВыборкаВидовОпераций.Ссылка > 0 Тогда							
			// показываем пользователю перечень документов
			ВыборкаДетали = ВыборкаВидовОпераций.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В отчетном периоде обнаружены регламентные документы с сервисной операцией ""Закрытие счетов НУ"", 
				| которая обнуляет сальдо счетов налогового учета. Данные Декларации могут быть искажены ...
				| Проверьте необходимость наличия операции и, в случае, если операция проведена ошибочно, отмените ее. Подробнее о ее применении можно прочесть в справке к документу. %1 %2 '"),
				СокрЛП(ВыборкаДетали.ПредставлениеДокумента), ВыборкаДетали.Ссылка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЦикла;			
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция РассчитатьВычетПоПреференциям() 
	
	Запрос =  Новый Запрос;
	
	Запрос.УстановитьПараметр("НачПериода", 			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", 			СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Запрос.УстановитьПараметр("ВидЛьготы",				Перечисления.ВидыФАУчитываемыхОтдельно.ОбъектыПреференций);
	Запрос.УстановитьПараметр("КорСчет2200Н",			ПланыСчетов.Налоговый.ВАНеВключенныеВСтоимостнойБаланс);//2200Н
	Запрос.УстановитьПараметр("КорСчет2500Н", 			ПланыСчетов.Налоговый.ПреренцииДоВводаВЭксплуатацию); //2500Н
	Запрос.УстановитьПараметр("Событие",				Перечисления.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету);
	Запрос.УстановитьПараметр("СписокОрганизаций",		мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("Счет7900Н", 				ПланыСчетов.Налоговый.РасходыНаРемонтВА); //7900Н
	Запрос.УстановитьПараметр("Счет7410Н", 				ПланыСчетов.Налоговый.ПрочиеРасходыПоВнеоборотнымАктивам); //7410Н
	Запрос.УстановитьПараметр("ВидУчетаНУ",				Справочники.ВидыУчетаНУ.НУ);
	
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Организация,
	|	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив КАК ФиксированныйАктив,
	|	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Событие,
	|	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА
	|ПОМЕСТИТЬ ФАУчитываемыеОтдельно
	|ИЗ
	|	РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(&КонПериода, Организация В (&СписокОрганизаций)) КАК ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних
	|ГДЕ
	|	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Событие = &Событие
	|	И ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА = &ВидЛьготы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФиксированныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.ЕдиновременнаяСумма,0)) КАК ЕдиновременнаяСумма,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.РавномернаяСумма,0)) КАК РавномернаяСумма,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.ПервоначальныеЗатраты,0)) КАК ПервоначальныеЗатраты,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.ПоследующиеЗатраты,0)) КАК ПоследующиеЗатраты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.ЕдиновременнаяСумма КАК ЕдиновременнаяСумма,
	|		ВложенныйЗапрос.РавномернаяСумма КАК РавномернаяСумма,
	|		0 КАК ПервоначальныеЗатраты,
	|		0 КАК ПоследующиеЗатраты
	|	ИЗ
	|		(ВЫБРАТЬ
	|			НалоговыйОбороты.Счет КАК Счет,
	|			НалоговыйОбороты.КорСчет КАК КорСчет,
	|			НалоговыйОбороты.КорСубконто1 КАК КорСубконто1,
	|			НалоговыйОбороты.КорСубконто2 КАК КорСубконто2,
	|			ВЫБОР
	|				КОГДА НалоговыйОбороты.КорСубконто2 = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.ЕдиновременноеСписаниеСтоимостиОбъектаПреференций)
	|					ТОГДА ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК ЕдиновременнаяСумма,
	|			ВЫБОР
	|				КОГДА НалоговыйОбороты.КорСубконто2 = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияСтоимостиФА.РавномерноеСписаниеСтоимостиОбъектаПреференций)
	|					ТОГДА ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК РавномернаяСумма
	|		ИЗ
	|			РегистрБухгалтерии.Налоговый.Обороты(
	|					&НачПериода,
	|					&КонПериода,
	|					,
	|					Счет = &Счет7410Н,
	|					,
	|					Организация В (&СписокОрганизаций)
	|						И ВидУчета = &ВидУчетаНУ,
	|					КорСчет = &КорСчет2200Н,
	|					) КАК НалоговыйОбороты
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФАУчитываемыеОтдельно КАК ФАУчитываемыеОтдельно
	|				ПО НалоговыйОбороты.Субконто2 = ФАУчитываемыеОтдельно.ФиксированныйАктив
	|		ГДЕ
	|			НалоговыйОбороты.ВидУчета = &ВидУчетаНУ) КАК ВложенныйЗапрос
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		0,
	|		ВложенныйЗапрос.ПервоначальныеЗатраты,
	|		ВложенныйЗапрос.ПоследующиеЗатраты
	|	ИЗ
	|		(ВЫБРАТЬ
	|			НалоговыйОбороты.Счет КАК Счет,
	|			НалоговыйОбороты.КорСчет КАК КорСчет,
	|			ВЫБОР
	|				КОГДА НалоговыйОбороты.КорСубконто3 = ЗНАЧЕНИЕ(Перечисление.ВидыЗатратПоУвеличениюСтоимостиФА.ПервоначальныеЗатраты)
	|					ТОГДА ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК ПервоначальныеЗатраты,
	|			ВЫБОР
	|				КОГДА НалоговыйОбороты.КорСубконто3 = ЗНАЧЕНИЕ(Перечисление.ВидыЗатратПоУвеличениюСтоимостиФА.ПоследующиеЗатраты)
	|					ТОГДА ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК ПоследующиеЗатраты,
	|			НалоговыйОбороты.КорСубконто1 КАК КорСубконто1,
	|			НалоговыйОбороты.КорСубконто2 КАК КорСубконто2,
	|			НалоговыйОбороты.КорСубконто3 КАК КорСубконто3
	|		ИЗ
	|			РегистрБухгалтерии.Налоговый.Обороты(
	|					&НачПериода,
	|					&КонПериода,
	|					,
	|					Счет = &Счет7410Н,
	|					,
	|					Организация В (&СписокОрганизаций)
	|						И ВидУчета = &ВидУчетаНУ,
	|					КорСчет = &КорСчет2500Н,
	|					) КАК НалоговыйОбороты
	|		ГДЕ
	|			НалоговыйОбороты.ВидУчета = &ВидУчетаНУ) КАК ВложенныйЗапрос
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		0,
	|		0,
	|		ВложенныйЗапрос.СуммаОборот
	|	ИЗ
	|		(ВЫБРАТЬ
	|			НалоговыйОбороты.Субконто1 КАК Субконто1,
	|			НалоговыйОбороты.Субконто2 КАК Субконто2,
	|			НалоговыйОбороты.Субконто3 КАК Субконто3,
	|			ЕСТЬNULL(НалоговыйОбороты.СуммаОборотДт, 0) КАК СуммаОборот
	|		ИЗ
	|			РегистрБухгалтерии.Налоговый.Обороты(&НачПериода, &КонПериода, , Счет = &Счет7900Н, , Организация В (&СписокОрганизаций), , ) КАК НалоговыйОбороты
	|		ГДЕ
	|			НалоговыйОбороты.ВидУчета = &ВидУчетаНУ
	|			И НалоговыйОбороты.Субконто3 = ЗНАЧЕНИЕ(Перечисление.ВидыРемонтаВА.Преференции)) КАК ВложенныйЗапрос) КАК ВложенныйЗапрос";
	
	Результат = Запрос.Выполнить();
	ОбщаяСуммаПреференций = 0;
	
	Если НЕ Результат.Пустой()Тогда
		ТаблицаРезультата = Результат.Выгрузить();
		Для Каждого Строка Из ТаблицаРезультата Цикл			
			РавномернаяСумма = Окр(?(Строка.РавномернаяСумма <> NULL, Строка.РавномернаяСумма, 0));			
			
			ЕдиновременнаяСумма = Окр(?(Строка.ЕдиновременнаяСумма <> NULL, Строка.ЕдиновременнаяСумма, 0));			
			
			ПервоначальныеЗатраты = Окр(?(Строка.ПервоначальныеЗатраты <> NULL, Строка.ПервоначальныеЗатраты, 0));			
			
			ПоследующиеЗатраты = Окр(?(Строка.ПоследующиеЗатраты <> NULL, Строка.ПоследующиеЗатраты, 0));         			
			
			ОбщаяСуммаПреференций = Окр(РавномернаяСумма + ЕдиновременнаяСумма + ПервоначальныеЗатраты + ПоследующиеЗатраты);  								
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат ОбщаяСуммаПреференций;		 
	
КонецФункции //  РассчитатьВычетПоПреференциям

&НаКлиентеНаСервереБезКонтекста
Функция Форма100ПолучитьСписокКодовДоходов()
	
	СписокДохКодовСтрок = Новый СписокЗначений;
	
	Для Н = 1 По 14 Цикл
		Номер = Формат(Н,"ЧЦ=2; ЧВН=");
		СписокДохКодовСтрок.Добавить("100.00.0" + Номер);	
	КонецЦикла;
	
	СписокДохКодовСтрок.Добавить("100.00.006.I");
	СписокДохКодовСтрок.Добавить("100.00.001.I");
	СписокДохКодовСтрок.Добавить("100.00.001.II");
	СписокДохКодовСтрок.Добавить("100.00.001.III");
	СписокДохКодовСтрок.Добавить("100.00.001.IV");
	СписокДохКодовСтрок.Добавить("100.00.007.II");
	СписокДохКодовСтрок.Добавить("100.00.007.I");
	СписокДохКодовСтрок.Добавить("100.00.016");
	СписокДохКодовСтрок.Добавить("100.00.017");
	СписокДохКодовСтрок.Добавить("100.00.041.I");
	СписокДохКодовСтрок.Добавить("100.00.042");
	СписокДохКодовСтрок.Добавить("100.00.045");
	СписокДохКодовСтрок.Добавить("100.00.050");
	СписокДохКодовСтрок.Добавить("100.00.046");	 		
	СписокДохКодовСтрок.Добавить("100.00.052.B");
	
	Возврат СписокДохКодовСтрок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Форма100ПолучитьСписокКодовРасходов()
	
	СписокРасКодовСтрок = Новый СписокЗначений;
	
	Для Н = 20 По 39 Цикл
		Номер = Формат(Н,"ЧЦ=2; ЧВН=");
		СписокРасКодовСтрок.Добавить("100.00.0" + Номер);	
	КонецЦикла;
	
	СписокРасКодовСтрок.Добавить("100.00.019.VI");
	СписокРасКодовСтрок.Добавить("100.00.019.VII");
	СписокРасКодовСтрок.Добавить("100.00.019.VIII");
	СписокРасКодовСтрок.Добавить("100.00.028.I");
	СписокРасКодовСтрок.Добавить("100.00.028.II");
	СписокРасКодовСтрок.Добавить("100.00.028.III");
	СписокРасКодовСтрок.Добавить("100.00.028.IV");

	СписокРасКодовСтрок.Добавить("100.00.041.II");	
	СписокРасКодовСтрок.Добавить("100.00.024");	
	СписокРасКодовСтрок.Добавить("100.00.043");
	
	СписокРасКодовСтрок.Добавить("100.00.052.A");
	
	СписокРасКодовСтрок.Добавить("100.00.048.I");
	
	Возврат СписокРасКодовСтрок;
	
КонецФункции

///////////////////////////////////////////////////////////////
// Процедуры и функции для расчета(заполнения) формы 100.01

&НаКлиенте
Процедура Форма100_01ЗаполнитьАвто(Перезаполнить = Ложь) 
	
	Состояние("Расчет формы 100.01");		
	Форма100_01ЗаполнитьАвтоНаСервере(Перезаполнить);	
	Состояние("");	 
	
КонецПроцедуры // Форма100ЗаполнитьАвто()

&НаСервере
Процедура Форма100_01ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма100_01";
	Очистить(ТекИмяФормы, Истина);
	
	ПериодыДляФормированияПроверка = Форма100_01ПроверкаНаПлательщикаНДС();
	
	Если ПериодыДляФормированияПроверка <> Неопределено Тогда 
		КолПериодов = ПериодыДляФормированияПроверка.Количество();
		Если КолПериодов = 0 Тогда 
			КолПовторов = 1;
		Иначе 
			КолПовторов = КолПериодов / 2;
		КонецЕсли;
	Иначе 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Приложение 100.01 не заполняется, так как организация %1 является плательщиком НДС'"), Налогоплательщик);				
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраница = 1;
	
	ТаблицаОтчета = Форма100_01СтрокиС1По6РассчитатьДанныеФормы(ПериодыДляФормированияПроверка, Истина);	
	
	СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы);
	
	Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
		НомерСтроки = 2;
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
		ОбщиеЭлементыГруппы = ЭлементСтруктуры.Значение.ШапкаИПодвал;
		ТаблицаСтрокГруппы.Очистить();
		
		Для Каждого СтрокаОтчета из ТаблицаОтчета Цикл  
			Элемент = ТаблицаСтрокГруппы.Добавить();   			 
			Если ИмяГруппы = "Страница1" Тогда
				//Так должны заполнять по отдельности значения выборки 
				//для каждого листа
				Элемент.Ф100_01_A = Формат(НомерСтроки, мФорматНомераСтроки);
				
				Если СокрЛП(СтрокаОтчета.ИдентификационныйКодЛичности) = "" ТОгда
					Если ЗначениеЗаполнено(СтрокаОтчета.Контрагент) Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'ИИН/БИН контрагента %1 не заполнен'"),
						Строка(СтрокаОтчета.Контрагент));
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаОтчета.Контрагент); 
					КонецЕсли;
					СтрокаБИНКонтрагента = "";                                                                             						
				ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаОтчета.ИдентификационныйКодЛичности)  ТОгда
					// В ИИН/БИН имеются символы, отличные от цифр (0..9)
					Если ЗначениеЗаполнено(СтрокаОтчета.Контрагент) Тогда
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В ИИН/БИН контрагента %1 имеются символы, отличные от цифр (0..9)'"),
						Строка(СтрокаОтчета.Контрагент));
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаОтчета.Контрагент); 
						
					КонецЕсли;
					СтрокаБИНКонтрагента = "";						
				Иначе
					СтрокаБИНКонтрагента = СтрокаОтчета.ИдентификационныйКодЛичности;
				КонецЕсли;
				
				Элемент.Ф100_01_B = СтрокаБИНКонтрагента;
				
				//заполним таблицу расшифровки
				РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы, Элемент, "Ф100_01_B",  ?(СтрокаОтчета.Контрагент = NULL, Неопределено, СтрокаОтчета.Контрагент));					 
				
				Если НЕ Лев(СтрокаОтчета.КБЕ,1) = "2" Тогда 
					// контрагент - резидент
					НомерНалоговойРегистрации = "";
				Иначе
					// контрагент - не резидент
					Элемент.Ф100_01_C = СтрокаОтчета.Код; // заполняем код страны резиденства только для нерезидентов
					
					Если СокрЛП(СтрокаОтчета.НомерНалоговойРегистрацииВСтранеРезидентства) = "" ТОгда
						Если ЗначениеЗаполнено(СтрокаОтчета.Контрагент) Тогда
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '""Номер налоговой регистрации в стране резидентства"" %1 не заполнен!'"),
							Строка(СтрокаОтчета.Контрагент));
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаОтчета.Контрагент); 
							
						КонецЕсли;	
						НомерНалоговойРегистрации = "";
					ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаОтчета.НомерНалоговойРегистрацииВСтранеРезидентства) Тогда
						// В Номере имеются символы, отличные от цифр (0..9)
						Если ЗначениеЗаполнено(СтрокаОтчета.Контрагент) Тогда
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '""Номере налоговой регистрации в стране резидентства"" %1 имеются символы, отличные от цифр (0..9)'"),
							Строка(СтрокаОтчета.Контрагент));
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаОтчета.Контрагент); 
							
						КонецЕсли;
						НомерНалоговойРегистрации = "";
					Иначе						
						НомерНалоговойРегистрации = СтрокаОтчета.НомерНалоговойРегистрацииВСтранеРезидентства;
					КонецЕсли;
				КонецЕсли;
				
				Элемент.Ф100_01_D = НомерНалоговойРегистрации;
				
				Если СокрЛП(СтрокаОтчета.КодСтроки) <> "" Тогда 
					ДлинаКодаСтроки  = СтрДлина(СтрокаОтчета.КодСтроки);
					БуквеннаяЧастьКода = СокрЛП(Прав(СтрокаОтчета.КодСтроки, 1));
					Если БуквеннаяЧастьКода = "B"  Тогда 
						Элемент.Ф100_01_E = 1;
					ИначеЕсли БуквеннаяЧастьКода = "C" Тогда 
						Элемент.Ф100_01_E = 2;
					ИначеЕсли БуквеннаяЧастьКода = "D" Тогда 
						Элемент.Ф100_01_E = 3;
					ИначеЕсли БуквеннаяЧастьКода = "E" Тогда 
						Элемент.Ф100_01_E = 4;
					ИначеЕсли БуквеннаяЧастьКода = "F" Тогда 
						Элемент.Ф100_01_E = 5;
					ИначеЕсли БуквеннаяЧастьКода = "G" Тогда 
						Элемент.Ф100_01_E = 6;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ИмяГруппы = "Страница2" Тогда
				
				Элемент.Ф100_01_A2 = Формат(НомерСтроки, мФорматНомераСтроки);
				
				Элемент.Ф100_01_F = Окр(?(СтрокаОтчета.Сумма <> NULL, СтрокаОтчета.Сумма, 0));
				Элемент.Ф100_01_G =	СтрокаОтчета.ПризнакВидаУчета;
				
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла; 	 
	КонецЦикла;  	 
	
	//Выдаем сообщения о статьях затрат, у которых нет соответствия в регистре сведений о кодах строк Декларации
	//или о контрагентах, у которых не указана статья затрат в проводках
	Если ПризнакВключенияДопЗатрат10001 Тогда
		ТаблицаСтатейЗатрат = Форма100_01РассчитатьДанныеОбОтсутствующихКодахСтрокДляСтатейЗатрат(ПериодыДляФормированияПроверка);
		Для Каждого СтрокаСтатьиЗатрат из ТаблицаСтатейЗатрат Цикл
			Если  СтрокаСтатьиЗатрат.ПризнакСтатьи Тогда //Выбираем статьи затрат из запроса
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'При заполнении приложения 100.0 для статьи затрат <%1> не задан код строки Декларации!'"),
				Строка(СтрокаСтатьиЗатрат.Значение));					
			Иначе  //Выбираем контрагентов из запроса
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'При заполнении приложения 100.0 для контрагента <%1> не заполнена статья затрат!'"),
				Строка(СтрокаСтатьиЗатрат.Значение));					
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаСтатьиЗатрат.Значение); 																					
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаОтчета = Форма100_01СтрокаПрочееРассчитатьДанныеФормы(ПериодыДляФормированияПроверка, Истина);	
	
	Если НомерСтроки <> Неопределено Тогда 
		НачальныйНомерСтроки = НомерСтроки;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
		
		Если НомерСтроки = Неопределено Тогда 
			НомерСтроки = 2;
			ТаблицаСтрокГруппы.Очистить();
			НачальныйНомерСтроки = НомерСтроки;
		Иначе 
			НомерСтроки = НачальныйНомерСтроки;
		КонецЕсли;
		
		Для Каждого СтрокаОтчета из ТаблицаОтчета Цикл
			
			Элемент = ТаблицаСтрокГруппы.Добавить();   			 
			Если ИмяГруппы = "Страница1" Тогда
				//Так должны заполнять по отдельности значения выборки 
				//для каждого листа
				Элемент.Ф100_01_A = Формат(НомерСтроки, мФорматНомераСтроки);
				
				Если СокрЛП(СтрокаОтчета.ИдентификационныйКодЛичности) = "" ТОгда
					Если ЗначениеЗаполнено(СтрокаОтчета.Контрагент) Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'ИИН/БИН контрагента %1 не заполнен'"),
						Строка(СтрокаОтчета.Контрагент));
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаОтчета.Контрагент);
					КонецЕсли;
					СтрокаБИНКонтрагента = "";                                                                             						
				ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаОтчета.ИдентификационныйКодЛичности)  ТОгда
					// В ИИН/БИН имеются символы, отличные от цифр (0..9)
					Если ЗначениеЗаполнено(СтрокаОтчета.Контрагент) Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В ИИН/БИН контрагента %1 имеются символы, отличные от цифр (0..9)'"),
						Строка(СтрокаОтчета.Контрагент));
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаОтчета.Контрагент);
					КонецЕсли;
					СтрокаБИНКонтрагента = "";						
				Иначе
					СтрокаБИНКонтрагента = СтрокаОтчета.ИдентификационныйКодЛичности;
				КонецЕсли;
				
				Элемент.Ф100_01_B    = СтрокаБИНКонтрагента;
				СтрокаБИНКонтрагента = "";
				
				//заполним таблицу расшифровки
				РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы, Элемент, "Ф100_01_B",  ?(СтрокаОтчета.Контрагент = NULL, Неопределено, СтрокаОтчета.Контрагент));
				
				Если НЕ Лев(СтрокаОтчета.КБЕ,1) = "2" Тогда 
					// контрагент - резидент
					НомерНалоговойРегистрации = ""; 
				Иначе
					// контрагент - нерезидент
					Если СокрЛП(СтрокаОтчета.НомерНалоговойРегистрацииВСтранеРезидентства) = "" ТОгда
						Если ЗначениеЗаполнено(СтрокаОтчета.Контрагент) Тогда
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '""Номер налоговой регистрации в стране резидентства"" контрагента %1 не заполнен!'"),
							Строка(СтрокаОтчета.Контрагент));
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаОтчета.Контрагент);
						КонецЕсли;	
						НомерНалоговойРегистрации = "";
					ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаОтчета.НомерНалоговойРегистрацииВСтранеРезидентства) Тогда
						// В Номере имеются символы, отличные от цифр (0..9)
						Если ЗначениеЗаполнено(СтрокаОтчета.Контрагент) Тогда
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В ""Номере налоговой регистрации в стране резидентства"" контрагента %1 имеются символы, отличные от цифр (0..9)'"),
							Строка(СтрокаОтчета.Контрагент));
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаОтчета.Контрагент);
						КонецЕсли;
						НомерНалоговойРегистрации = "";
					Иначе						
						НомерНалоговойРегистрации = СтрокаОтчета.НомерНалоговойРегистрацииВСтранеРезидентства;
					КонецЕсли;
					Элемент.Ф100_01_C = СтрокаОтчета.Код; 
				КонецЕсли;
				
				Элемент.Ф100_01_D         = НомерНалоговойРегистрации;
				НомерНалоговойРегистрации = "";
				
				Элемент.Ф100_01_E         = 7;
				
			ИначеЕсли ИмяГруппы = "Страница2" Тогда
				
				Элемент.Ф100_01_A2 = Формат(НомерСтроки, мФорматНомераСтроки);
				
				Элемент.Ф100_01_F = Окр(?(СтрокаОтчета.Сумма <> NULL, СтрокаОтчета.Сумма, 0));
				Элемент.Ф100_01_G = СтрокаОтчета.ПризнакВидаУчета;
				
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла; 	 
	КонецЦикла;  	 
	
	РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы, СтруктураФормы); 	 
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, ТекИмяФормы);			
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, ТекИмяФормы, Перезаполнить);   	
	
	Если Перезаполнить Тогда
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ТекИмяФормы);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтаФорма);
	
КонецПроцедуры // Форма100_01ЗаполнитьАвто()

&НаСервере 
Функция Форма100_01ПроверкаНаПлательщикаНДС()
	
	Запрос = Новый Запрос();
	
	ТекстЗапросаПоМесяцам = "";
	Для Счетчик = 1 по 12 Цикл
		Дата = ?(Счетчик = 1, СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, Счетчик - 1));
		Если Не ТекстЗапросаПоМесяцам = "" Тогда
			ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам + "
			| ОБЪЕДИНИТЬ ВСЕ
			| ";
		КонецЕсли;
		ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам +  "
		|	ВЫБРАТЬ
		|	&Дата" + СокрЛП(Счетчик) + " КАК Период		                        
		| ";
		Запрос.УстановитьПараметр("Дата" + СокрЛП(Счетчик), Дата); 	
	КонецЦикла;	
	
	Запрос.УстановитьПараметр("Организация", 	Налогоплательщик);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ПериодГода КАК ПериодГода,
	|	ВложенныйЗапрос.ПериодЗаписи КАК ПериодЗаписи,
	|	УчетнаяПолитикаНалоговыйУчет.ОрганизацияЯвляетсяПлательщикомНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК ПериодГода,
	|		МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК ПериодЗаписи
	|	ИЗ
	|		(" + ТекстЗапросаПоМесяцам + ") КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
	|			ПО (НАЧАЛОПЕРИОДА(УчетнаяПолитикаНалоговыйУчет.Период, ДЕНЬ) <= Периоды.Период)
	|	ГДЕ
	|		УчетнаяПолитикаНалоговыйУчет.Организация = &Организация
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
	|		ПО ВложенныйЗапрос.ПериодЗаписи = УчетнаяПолитикаНалоговыйУчет.Период
	|ГДЕ
	|	УчетнаяПолитикаНалоговыйУчет.Организация = &Организация
	|УПОРЯДОЧИТЬ ПО ВложенныйЗапрос.ПериодГода";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Результат.Выгрузить();
	
	Периоды = Новый СписокЗначений;
	СчетчикПериодов = 0;
	ЭтоНачалоПериода = Истина;
	ЭтоКонецПериода = Ложь;
	ПериодПрошедший = '00010101';
	Для Каждого Строка Из Результат Цикл 
		ПлательщикНДС = Строка.ОрганизацияЯвляетсяПлательщикомНДС;
		Если Не ПлательщикНДС Тогда 
			Если ЭтоНачалоПериода Тогда 
				Периоды.Добавить(Строка.ПериодГода,"ПериодНач"+СчетчикПериодов);
				ЭтоНачалоПериода = Ложь;
				ЭтоКонецПериода = Истина;
			КонецЕсли;
			ПериодПрошедший = Строка.ПериодГода;
		Иначе 	
			Если ЭтоКонецПериода Тогда 
				Периоды.Добавить(КонецМесяца(ПериодПрошедший),"ПериодКон"+СчетчикПериодов);
				СчетчикПериодов = СчетчикПериодов + 1;
				ЭтоКонецПериода = Ложь;
				ЭтоНачалоПериода = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Кол 	 = Периоды.Количество();
	
	Если Кол = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ПоследняяСтрока 	 = Периоды.Количество() - 1;
	ПредставлениеПериода =  Периоды[ПоследняяСтрока].Представление;
	Если ПредставлениеПериода = "ПериодНач" + СчетчикПериодов Тогда 
		Периоды.Добавить(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,"ПериодКон"+СчетчикПериодов);
	КонецЕсли;
	
	Возврат Периоды;
	
КонецФункции

&НаСервере 
Функция Форма100_01СтрокиС1По6РассчитатьДанныеФормы(ПериодФормирования, ВыдаватьСообщения = Ложь) 
	
	Запрос = Новый Запрос;
	
	ТекстЗапросаПоМесяцам = "";
	
	Если ПериодФормирования <> Неопределено Тогда 
		
		КолПериодов = ПериодФормирования.Количество() - 1;
		
		Для Счетчик = 0 по КолПериодов Цикл
			НазПериодаНач = ПериодФормирования[Счетчик].Представление;
			НазПериодаКон = ПериодФормирования[Счетчик + 1].Представление;
			ПериодНач  	  = ПериодФормирования[Счетчик].Значение;
			ПериодКон     = ПериодФормирования[Счетчик + 1].Значение;
			Если ТекстЗапросаПоМесяцам = "" Тогда
				ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам + "
				|   ГДЕ
				|	НалоговыйОбороты.Период МЕЖДУ &"+НазПериодаНач+" И &"+НазПериодаКон+"
				| ";
			Иначе 
				ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам +  "
				|	ИЛИ НалоговыйОбороты.Период МЕЖДУ &"+НазПериодаНач+" И &"+НазПериодаКон+"
				| ";
			КонецЕсли;
			Запрос.УстановитьПараметр(НазПериодаНач, ПериодНач); 	
			Запрос.УстановитьПараметр(НазПериодаКон, ПериодКон); 	
			Счетчик = Счетчик + 1;
		КонецЦикла;	
		
	Иначе 
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Налоговый.ВнеоборотныеАктивы);
	СписокСчетов.Добавить(ПланыСчетов.Налоговый.Расходы);
	СписокСчетов.Добавить(ПланыСчетов.Налоговый.Производство_);
	
	Запрос.УстановитьПараметр("СписокСчетов",           СписокСчетов);    //счет Н800 счет Н300
	Запрос.УстановитьПараметр("ВидСубконтоЗатрат",      ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);  // Субконто1 - СтатьиЗатрат
	
	Запрос.УстановитьПараметр("ВидСубконтоКонтрагенты", ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);     
	Запрос.УстановитьПараметр("Организация", 			Налогоплательщик);
	Запрос.УстановитьПараметр("СписокОрганизаций", 		мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("ПустаяОрганизация", 		Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеЗначение", 		Неопределено);
	Запрос.УстановитьПараметр("СчетРБП",				ПланыСчетов.Налоговый.РасходыБудущихПериодов);
	
	СписокКодовСтрок = Новый СписокЗначений;
	СписокКодовСтрок.Добавить("100.00.019.IIIB");
	СписокКодовСтрок.Добавить("100.00.019.IIIC");
	СписокКодовСтрок.Добавить("100.00.019.IIID");
	СписокКодовСтрок.Добавить("100.00.019.IIIE");
	СписокКодовСтрок.Добавить("100.00.019.IIIF");
	СписокКодовСтрок.Добавить("100.00.019.IIIG");
	
	Запрос.УстановитьПараметр("КодСтроки",  СписокКодовСтрок);
	
	Запрос.УстановитьПараметр("ВидУчетаВР", Справочники.ВидыУчетаНУ.ВР);
	
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("Счет000",    ПланыСчетов.Налоговый.Вспомогательный);
	
	СчетаНалогов = Новый СписокЗначений;
	СчетаНалогов.Добавить(ПланыСчетов.Налоговый.ИндивидуальныйПодоходныйНалог); // 3120Н
	СчетаНалогов.Добавить(ПланыСчетов.Налоговый.НалоговыеАктивыПрочее);         // 1430Н
	СчетаНалогов.Добавить(ПланыСчетов.Налоговый.ПрочиеНалоги);                  // 3190Н
	
	Запрос.УстановитьПараметр("СчетаНалогов", СчетаНалогов);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Период КАК Период,
	|	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.ВидДоходаРасхода КАК СтатьяЗатрат,
	|	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик КАК Организация,
	|	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.КодСтроки КАК КодСтроки,
	|	ВЫБОР
	|		КОГДА КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик = &ПустаяОрганизация
	|			ТОГДА 3
	|		КОГДА КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик = &ПустоеЗначение
	|			ТОГДА 2
	|		КОГДА КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик = &Организация
	|			ТОГДА 1
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Приоретет
	|ИЗ
	|	РегистрСведений.КодыСтрокДекларацииПоНалогуНаПрибыль.СрезПоследних(
	|			&КонПериода,
	|			(Налогоплательщик = &ПустаяОрганизация
	|				ИЛИ Налогоплательщик = &ПустоеЗначение
	|				ИЛИ Налогоплательщик = &Организация)
	|				И (НЕ КодСтроки = """")) КАК КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяЗатрат,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонечныеИтоговыеДанные.Контрагент,
	|	КонечныеИтоговыеДанные.НомерНалоговойРегистрацииВСтранеРезидентства,
	|	КонечныеИтоговыеДанные.Код,
	|	КонечныеИтоговыеДанные.ИдентификационныйКодЛичности,
	|	КонечныеИтоговыеДанные.КБЕ,
	|	КонечныеИтоговыеДанные.КодСтроки,
	|	КонечныеИтоговыеДанные.Сумма,
	|	КонечныеИтоговыеДанные.ПризнакВидаУчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		Контрагенты.Ссылка КАК Контрагент,
	|		Контрагенты.СерияСвидетельстваПоНДС КАК СерияСвидетельстваПоНДС,
	|		Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства КАК НомерНалоговойРегистрацииВСтранеРезидентства,
	|		Контрагенты.НомерСвидетельстваПоНДС КАК НомерСвидетельстваПоНДС,
	|		Контрагенты.ДатаСвидетельстваПоНДС КАК ДатаСвидетельстваПоНДС,
	|		КлассификаторСтранМира.КодАльфа3 КАК Код,
	|		Контрагенты.ИдентификационныйКодЛичности КАК ИдентификационныйКодЛичности,
	|		Контрагенты.КБЕ КАК КБЕ,
	|		Сумма(ВложенныйЗапрос.Сумма) КАК Сумма,
	|		ВложенныйЗапрос.КодСтроки КАК КодСтроки,
	|		ВложенныйЗапрос.ПризнакВидаУчета КАК ПризнакВидаУчета
	|	ИЗ
	|		(ВЫБРАТЬ
	|			СУММА(ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0)) КАК Сумма,
	|			СтатьиЗатратПоКоду.КодСтроки КАК КодСтроки,
	|			НалоговыйОбороты.КорСубконто1 КАК КорСубконто1,
	|			ВЫБОР КОГДА НалоговыйОбороты.ВидУчета <> Значение(Справочник.ВидыУчетаНУ.НУ) Тогда 4 Иначе 1 Конец КАК ПризнакВидаУчета
	|		ИЗ
	|			РегистрБухгалтерии.Налоговый.Обороты(
	|					&НачПериода,
	|					&КонПериода,
	|					Запись,
	|					Счет В ИЕРАРХИИ (&СписокСчетов),
	|					&ВидСубконтоЗатрат,
	|					Организация В (&СписокОрганизаций)
	|						И ВидУчета <> &ВидУчетаВР,
	|					(НЕ КорСчет В ИЕРАРХИИ (&Счет000) И НЕ КорСчет В ИЕРАРХИИ (&СчетаНалогов)),
	|					&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ТаблицаСтатейЗатрат.СтатьяЗатрат КАК СтатьяЗатрат,
	|					ТаблицаСтатейЗатрат.Приоритет КАК Приоритет,
	|					ДанныеОКодахДекларации.КодСтроки КАК КодСтроки
	|				ИЗ
	|					(ВЫБРАТЬ
	|						ТаблицаСтатейЗатрат.СтатьяЗатрат КАК СтатьяЗатрат,
	|						МИНИМУМ(ТаблицаСтатейЗатрат.Приоритет) КАК Приоритет
	|					ИЗ
	|						ВТ_Приоретет КАК ТаблицаСтатейЗатрат
	|					
	|					СГРУППИРОВАТЬ ПО
	|						ТаблицаСтатейЗатрат.СтатьяЗатрат) КАК ТаблицаСтатейЗатрат
	|						ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоретет КАК ДанныеОКодахДекларации
	|						ПО ТаблицаСтатейЗатрат.СтатьяЗатрат = ДанныеОКодахДекларации.СтатьяЗатрат
	|							И ТаблицаСтатейЗатрат.Приоритет = ДанныеОКодахДекларации.Приоритет
	|				ГДЕ
	|					ДанныеОКодахДекларации.КодСтроки В(&КодСтроки)) КАК СтатьиЗатратПоКоду
	|				ПО НалоговыйОбороты.Субконто1 = СтатьиЗатратПоКоду.СтатьяЗатрат
	| 	"+ТекстЗапросаПоМесяцам+"
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СтатьиЗатратПоКоду.КодСтроки,
	|			НалоговыйОбороты.КорСубконто1,
	|			ВЫБОР КОГДА НалоговыйОбороты.ВидУчета <> Значение(Справочник.ВидыУчетаНУ.НУ) Тогда 4 Иначе 1 Конец
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СУММА(ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0)),
	|			ВложенныйЗапрос.КодСтроки,
	|			НалоговыйОбороты.КорСубконто1,
	|			ВЫБОР КОГДА НалоговыйОбороты.ВидУчета <> Значение(Справочник.ВидыУчетаНУ.НУ) Тогда 4 Иначе 1 Конец КАК ПризнакВидаУчета
	|		ИЗ
	|			РегистрБухгалтерии.Налоговый.Обороты(
	|					&НачПериода,
	|					&КонПериода,
	|					Запись,
	|					Счет = &СчетРБП,
	|					,
	|					Организация В (&СписокОрганизаций)
	|						И ВидУчета <> &ВидУчетаВР,
	|					(НЕ КорСчет В ИЕРАРХИИ (&Счет000)),
	|					&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ТаблицаДохода.СтатьяЗатрат КАК ДоходРасход,
	|					ТаблицаДохода.Приоритет КАК Приоритет,
	|					ДанныеОКодахДекларации.КодСтроки КАК КодСтроки
	|				ИЗ
	|					(ВЫБРАТЬ
	|						ТаблицаДохода.СтатьяЗатрат КАК СтатьяЗатрат,
	|						МИНИМУМ(ТаблицаДохода.Приоритет) КАК Приоритет
	|					ИЗ
	|						ВТ_Приоретет КАК ТаблицаДохода
	|					
	|					СГРУППИРОВАТЬ ПО
	|						ТаблицаДохода.СтатьяЗатрат) КАК ТаблицаДохода
	|						ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоретет КАК ДанныеОКодахДекларации
	|						ПО ТаблицаДохода.Приоритет = ДанныеОКодахДекларации.Приоритет
	|							И ТаблицаДохода.СтатьяЗатрат = ДанныеОКодахДекларации.СтатьяЗатрат
	|				ГДЕ
	|					ДанныеОКодахДекларации.КодСтроки В(&КодСтроки)) КАК ВложенныйЗапрос
	|				ПО ВЫРАЗИТЬ(НалоговыйОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).СубконтоНУ1 = ВложенныйЗапрос.ДоходРасход
	|				ИЛИ ВЫРАЗИТЬ(НалоговыйОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).СубконтоНУ2 = ВложенныйЗапрос.ДоходРасход
	|				ИЛИ ВЫРАЗИТЬ(НалоговыйОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).СубконтоНУ3 = ВложенныйЗапрос.ДоходРасход
	| 	"+ТекстЗапросаПоМесяцам+"
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.КодСтроки,
	|			НалоговыйОбороты.КорСубконто1,
	|			ВЫБОР КОГДА НалоговыйОбороты.ВидУчета <> Значение(Справочник.ВидыУчетаНУ.НУ) Тогда 4 Иначе 1 Конец) КАК ВложенныйЗапрос
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
	|				ПО Контрагенты.СтранаРезидентства = КлассификаторСтранМира.Ссылка
	|			ПО ВложенныйЗапрос.КорСубконто1 = Контрагенты.Ссылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Контрагенты.Ссылка,
	|		Контрагенты.СерияСвидетельстваПоНДС,
	|		Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства,
	|		Контрагенты.НомерСвидетельстваПоНДС,
	|		Контрагенты.ДатаСвидетельстваПоНДС,
	|		КлассификаторСтранМира.КодАльфа3,
	|		Контрагенты.ИдентификационныйКодЛичности,
	|		Контрагенты.КБЕ,
	|		ВложенныйЗапрос.КодСтроки,
	|		ВложенныйЗапрос.ПризнакВидаУчета) КАК КонечныеИтоговыеДанные
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонечныеИтоговыеДанные.Контрагент.ИдентификационныйКодЛичности"; //+УсловиеСортировкиДляИИН_БИН;
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() И ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения Приложения 100.01 по кодам вида расхода с 1 по 6 за отчетный период отсутствуют...'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;	
	
	ТаблицаРезультата = Результат.Выгрузить();
	
	Возврат ТаблицаРезультата;		 
	
КонецФункции // Форма100_01РассчитатьДанныеФормы()

&НаСервере 
Функция Форма100_01СтрокаПрочееРассчитатьДанныеФормы(ПериодФормирования, ВыдаватьСообщения = Ложь) 
	
	Запрос =  Новый Запрос;
	
	ТекстЗапросаПоМесяцам = "";
	
	Если ПериодФормирования <> Неопределено Тогда 
		
		КолПериодов = ПериодФормирования.Количество() - 1;
		
		Для Счетчик = 0 по КолПериодов Цикл
			НазПериодаНач = ПериодФормирования[Счетчик].Представление;
			НазПериодаКон = ПериодФормирования[Счетчик + 1].Представление;
			ПериодНач  	  = ПериодФормирования[Счетчик].Значение;
			ПериодКон     = ПериодФормирования[Счетчик + 1].Значение;
			Если ТекстЗапросаПоМесяцам = "" Тогда
				ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам + "
				|   ГДЕ
				|	НалоговыйОбороты.Период МЕЖДУ &"+НазПериодаНач+" И &"+НазПериодаКон+"
				| ";
			Иначе 
				ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам +  "
				|	ИЛИ НалоговыйОбороты.Период МЕЖДУ &"+НазПериодаНач+" И &"+НазПериодаКон+"
				| ";
			КонецЕсли;
			Запрос.УстановитьПараметр(НазПериодаНач, ПериодНач); 	
			Запрос.УстановитьПараметр(НазПериодаКон, ПериодКон); 	
			Счетчик = Счетчик + 1;
		КонецЦикла;	
		
	Иначе 
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачПериода", 			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", 			СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Налоговый.Расходы);
	СписокСчетов.Добавить(ПланыСчетов.Налоговый.Производство_);
	
	Запрос.УстановитьПараметр("СписокСчетов",           СписокСчетов);    //счет Н800 счет Н300 
	Запрос.УстановитьПараметр("ВидСубконтоЗатрат",      ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);  // Субконто1 - СтатьиЗатрат
	Запрос.УстановитьПараметр("ВидСубконтоКонтрагенты", ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);     
	Запрос.УстановитьПараметр("Организация", 			Налогоплательщик);
	Запрос.УстановитьПараметр("СписокОрганизаций", 		мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("ПустаяОрганизация", 		Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеЗначение", 		Неопределено);
	
	СписокКодовСтрок = Новый СписокЗначений;
	СписокКодовСтрок.Добавить("100.00.019.IIIB"); 					
	СписокКодовСтрок.Добавить("100.00.019.IIIC"); 					
	СписокКодовСтрок.Добавить("100.00.019.IIID"); 					
	СписокКодовСтрок.Добавить("100.00.019.IIIE"); 					
	СписокКодовСтрок.Добавить("100.00.019.IIIF"); 					
	СписокКодовСтрок.Добавить("100.00.019.IIIG"); 					
	
	Запрос.УстановитьПараметр("КодСтроки", 				СписокКодовСтрок);
	
	Запрос.УстановитьПараметр("ВидУчетаВР",   			Справочники.ВидыУчетаНУ.ВР);
	Запрос.УстановитьПараметр("ПустаяДата",    			'00010101');
	Запрос.УстановитьПараметр("Счет214",                ПланыСчетов.Налоговый.СырьеИМатериалы);
	Запрос.УстановитьПараметр("Счет1330Н",              ПланыСчетов.Налоговый.Товары);
	Запрос.УстановитьПараметр("СписокСчетов30Н",        ПланыСчетов.Налоговый.РасчетыСКонтрагентамиИПрочиеВзаиморасчеты);
	Запрос.УстановитьПараметр("Счет3350Н",       		ПланыСчетов.Налоговый.ВзаиморасчетыСРаботниками);
	Запрос.УстановитьПараметр("Счет20Н",       			ПланыСчетов.Налоговый.ВнеоборотныеАктивы);
	Запрос.УстановитьПараметр("СчетНЗС",       			ПланыСчетов.Налоговый.НезавершенноеСтроительство);
	Запрос.УстановитьПараметр("Счет2500Н",       		ПланыСчетов.Налоговый.ПреренцииДоВводаВЭксплуатацию);
	Запрос.УстановитьПараметр("СчетРБП",				ПланыСчетов.Налоговый.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("Счет000",				ПланыСчетов.Налоговый.Вспомогательный);
	
	СчетаНалогов = Новый СписокЗначений;
	СчетаНалогов.Добавить(ПланыСчетов.Налоговый.ИндивидуальныйПодоходныйНалог); // 3120Н
	СчетаНалогов.Добавить(ПланыСчетов.Налоговый.НалоговыеАктивыПрочее);         // 1430Н
	СчетаНалогов.Добавить(ПланыСчетов.Налоговый.ПрочиеНалоги);                  // 3190Н
	
	Запрос.УстановитьПараметр("СчетаНалогов",			СчетаНалогов);
	
	Если ПризнакВключенияДопЗатрат10001 Тогда 
		ТекстДобУсл = СтрЗаменить(ТекстЗапросаПоМесяцам, "ГДЕ", "И (");
		ТекстДобЗапроса = "ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			НалоговыйОбороты.КорСубконто1,
		|			НалоговыйОбороты.СуммаОборот,
		|			ВЫБОР КОГДА НалоговыйОбороты.ВидУчета <> Значение(Справочник.ВидыУчетаНУ.НУ) Тогда 4 Иначе 1 Конец КАК ПризнакВидаУчета
		|		ИЗ
		|			РегистрБухгалтерии.Налоговый.Обороты(
		|					&НачПериода,
		|					&КонПериода,
		|					Запись,
		|					Счет В ИЕРАРХИИ (&СписокСчетов),
		|					&ВидСубконтоЗатрат,
		|					Организация В (&СписокОрганизаций)
		|						И ВидУчета <> &ВидУчетаВР,
		|					(НЕ КорСчет В ИЕРАРХИИ (&Счет000) И НЕ КорСчет В ИЕРАРХИИ (&СчетаНалогов)),
		|					&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.ВидДоходаРасхода КАК ВидДоходаРасхода
		|				ИЗ
		|					РегистрСведений.КодыСтрокДекларацииПоНалогуНаПрибыль.СрезПоследних(
		|							&КонПериода,
		|							(Налогоплательщик = &ПустаяОрганизация
		|								ИЛИ Налогоплательщик = &ПустоеЗначение
		|								ИЛИ Налогоплательщик = &Организация)
		|								И (НЕ КодСтроки = """")) КАК КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних
		|				
		|				СГРУППИРОВАТЬ ПО
		|					КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.ВидДоходаРасхода) КАК ДанныеОКодахСтрок
		|				ПО НалоговыйОбороты.Субконто1 = ДанныеОКодахСтрок.ВидДоходаРасхода
		|		ГДЕ
		|			ДанныеОКодахСтрок.ВидДоходаРасхода ЕСТЬ NULL 
		| "+ТекстДобУсл+")";
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Период КАК Период,
	|	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.ВидДоходаРасхода КАК СтатьяЗатрат,
	|	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик КАК Организация,
	|	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.КодСтроки КАК КодСтроки,
	|	ВЫБОР
	|		КОГДА КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик = &ПустаяОрганизация
	|			ТОГДА 3
	|		КОГДА КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик = &ПустоеЗначение
	|			ТОГДА 2
	|		КОГДА КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик = &Организация
	|			ТОГДА 1
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Приоритет
	|ИЗ
	|	РегистрСведений.КодыСтрокДекларацииПоНалогуНаПрибыль.СрезПоследних(
	|			&КонПериода,
	|			(Налогоплательщик = &ПустаяОрганизация
	|				ИЛИ Налогоплательщик = &ПустоеЗначение
	|				ИЛИ Налогоплательщик = &Организация)
	|				И (НЕ КодСтроки = """")) КАК КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяЗатрат,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонечныеИтоговыеДанные.Контрагент,
	|	КонечныеИтоговыеДанные.Сумма,
	|	КонечныеИтоговыеДанные.ИдентификационныйКодЛичности,
	|	КонечныеИтоговыеДанные.НомерНалоговойРегистрацииВСтранеРезидентства,
	|	КонечныеИтоговыеДанные.Код,
	|	КонечныеИтоговыеДанные.КБЕ,
	|	КонечныеИтоговыеДанные.ПризнакВидаУчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		Контрагенты.Ссылка КАК Контрагент,
	|		СУММА(ИтоговыеДанные.Сумма) КАК Сумма,
	|		Контрагенты.ИдентификационныйКодЛичности КАК ИдентификационныйКодЛичности,
	|		Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства КАК НомерНалоговойРегистрацииВСтранеРезидентства,
	|		КлассификаторСтранМира.КодАльфа3 КАК Код,
	|		Контрагенты.КБЕ Как КБЕ,
	|		ИтоговыеДанные.ПризнакВидаУчета
	|	ИЗ
	|		(ВЫБРАТЬ
	|			НалоговыйОбороты.КорСубконто1 КАК Контрагент,
	|			ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0) КАК Сумма,
	|			ВЫБОР КОГДА НалоговыйОбороты.ВидУчета <> Значение(Справочник.ВидыУчетаНУ.НУ) Тогда 4 Иначе 1 Конец КАК ПризнакВидаУчета				   
	|		ИЗ
	|			РегистрБухгалтерии.Налоговый.Обороты(
	|					&НачПериода,
	|					&КонПериода,
	|					Запись,
	|					Счет = &Счет1330Н
	|						ИЛИ Счет = &Счет214,
	|					,
	|					Организация В (&СписокОрганизаций)
	|						И ВидУчета <> &ВидУчетаВР,
	|					(НЕ КорСчет В ИЕРАРХИИ (&Счет000)),
	|					&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
	| 	"+ТекстЗапросаПоМесяцам+"
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			НалоговыйОбороты.КорСубконто1,
	|			СУММА(ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0)),
	|			ВЫБОР КОГДА НалоговыйОбороты.ВидУчета <> Значение(Справочник.ВидыУчетаНУ.НУ) Тогда 4 Иначе 1 Конец КАК ПризнакВидаУчета				   
	|		ИЗ
	|			РегистрБухгалтерии.Налоговый.Обороты(
	|					&НачПериода,
	|					&КонПериода,
	|					Запись,
	|					Счет В ИЕРАРХИИ (&СписокСчетов),
	|					&ВидСубконтоЗатрат,
	|					Организация В (&СписокОрганизаций)
	|						И ВидУчета <> &ВидУчетаВР,
	|					(НЕ КорСчет В ИЕРАРХИИ (&Счет000) И НЕ КорСчет В ИЕРАРХИИ (&СчетаНалогов)),
	|					&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ТаблицаСтатейЗатрат.СтатьяЗатрат КАК СтатьяЗатрат,
	|					ТаблицаСтатейЗатрат.Приоритет КАК Приоритет,
	|					ДанныеОКодахДекларации.КодСтроки КАК КодСтроки
	|				ИЗ
	|					(ВЫБРАТЬ
	|						ТаблицаСтатейЗатрат.СтатьяЗатрат КАК СтатьяЗатрат,
	|						МИНИМУМ(ТаблицаСтатейЗатрат.Приоритет) КАК Приоритет
	|					ИЗ
	|						ВТ_Приоритет КАК ТаблицаСтатейЗатрат
	|					
	|					СГРУППИРОВАТЬ ПО
	|						ТаблицаСтатейЗатрат.СтатьяЗатрат) КАК ТаблицаСтатейЗатрат
	|						ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоритет КАК ДанныеОКодахДекларации
	|						ПО ТаблицаСтатейЗатрат.СтатьяЗатрат = ДанныеОКодахДекларации.СтатьяЗатрат
	|							И ТаблицаСтатейЗатрат.Приоритет = ДанныеОКодахДекларации.Приоритет
	|				ГДЕ
	|					(НЕ ДанныеОКодахДекларации.КодСтроки В (&КодСтроки))) КАК СтатьиЗатратПоКоду
	|				ПО НалоговыйОбороты.Субконто1 = СтатьиЗатратПоКоду.СтатьяЗатрат
	| 	"+ТекстЗапросаПоМесяцам+"
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НалоговыйОбороты.КорСубконто1,
	|			ВЫБОР КОГДА НалоговыйОбороты.ВидУчета <> Значение(Справочник.ВидыУчетаНУ.НУ) Тогда 4 Иначе 1 Конец	   
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		   ВЫБРАТЬ
	|			НалоговыйОбороты.КорСубконто1 КАК Контрагент,
	|			ВЫБОР
	|				КОГДА НалоговыйОбороты.Счет В ИЕРАРХИИ (&Счет20Н)
	|					ТОГДА ЕСТЬNULL(НалоговыйОбороты.СуммаОборотДт, 0)
	|				ИНАЧЕ ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0)
	|			КОНЕЦ КАК Сумма,
	|			ВЫБОР КОГДА НалоговыйОбороты.ВидУчета <> Значение(Справочник.ВидыУчетаНУ.НУ) Тогда 4 Иначе 1 Конец КАК ПризнакВидаУчета				   
	|		ИЗ
	|			РегистрБухгалтерии.Налоговый.Обороты(
	|					&НачПериода,
	|					&КонПериода,
	|					Запись,
	|					Счет В ИЕРАРХИИ (&Счет20Н)
	|							И НЕ Счет = &СчетНЗС
	|							И НЕ Счет = &Счет2500Н,
	|					,
	|					Организация В (&СписокОрганизаций)
	|						И ВидУчета <> &ВидУчетаВР,
	|					(НЕ КорСчет В ИЕРАРХИИ (&Счет000)),
	|					&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
	| 	"+ТекстЗапросаПоМесяцам+"
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|   ВЫБРАТЬ
	|	НалоговыйОбороты.КорСубконто1 КАК Контрагент,
	|	ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0) КАК Сумма,
	|	ВЫБОР КОГДА НалоговыйОбороты.ВидУчета <> Значение(Справочник.ВидыУчетаНУ.НУ) Тогда 4 Иначе 1 Конец КАК ПризнакВидаУчета				   
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			Запись,
	|			Счет = &СчетНЗС
	|				ИЛИ Счет = &Счет2500Н,
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И ВидУчета <> &ВидУчетаВР,
	|			,
	|			&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаСтатейЗатрат.СтатьяЗатрат КАК СтатьяЗатрат,
	|			ТаблицаСтатейЗатрат.Приоритет КАК Приоритет,
	|			ДанныеОКодахДекларации.КодСтроки КАК КодСтроки
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ТаблицаСтатейЗатрат.СтатьяЗатрат КАК СтатьяЗатрат,
	|				МИНИМУМ(ТаблицаСтатейЗатрат.Приоритет) КАК Приоритет
	|			ИЗ
	|				ВТ_Приоритет КАК ТаблицаСтатейЗатрат
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ТаблицаСтатейЗатрат.СтатьяЗатрат) КАК ТаблицаСтатейЗатрат
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоритет КАК ДанныеОКодахДекларации
	|				ПО ТаблицаСтатейЗатрат.СтатьяЗатрат = ДанныеОКодахДекларации.СтатьяЗатрат
	|					И ТаблицаСтатейЗатрат.Приоритет = ДанныеОКодахДекларации.Приоритет
	|		ГДЕ
	|			(НЕ ДанныеОКодахДекларации.КодСтроки В (&КодСтроки))) КАК СтатьиЗатратПоКоду
	|		ПО (НалоговыйОбороты.Субконто2 = СтатьиЗатратПоКоду.СтатьяЗатрат)
	| 	"+ТекстЗапросаПоМесяцам+"
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НалоговыйОбороты.КорСубконто1,
	|		СУММА(ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0)) КАК Сумма,
	|		ВЫБОР КОГДА НалоговыйОбороты.ВидУчета <> Значение(Справочник.ВидыУчетаНУ.НУ) Тогда 4 Иначе 1 Конец КАК ПризнакВидаУчета				   
	|	ИЗ
	|		РегистрБухгалтерии.Налоговый.Обороты(
	|				&НачПериода,
	|				&КонПериода,
	|				Запись,
	|				Счет = &СчетРБП,
	|				,
	|				Организация В (&СписокОрганизаций)
	|					И ВидУчета <> &ВидУчетаВР,
	|				(НЕ КорСчет В ИЕРАРХИИ (&Счет000)),
	|				&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ТаблицаДохода.СтатьяЗатрат КАК ДоходРасход,
	|				ТаблицаДохода.Приоритет КАК Приоритет,
	|				ДанныеОКодахДекларации.КодСтроки КАК КодСтроки
	|			ИЗ
	|				(ВЫБРАТЬ
	|					ТаблицаДохода.СтатьяЗатрат КАК СтатьяЗатрат,
	|					МИНИМУМ(ТаблицаДохода.Приоритет) КАК Приоритет
	|				ИЗ
	|					ВТ_Приоритет КАК ТаблицаДохода
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ТаблицаДохода.СтатьяЗатрат) КАК ТаблицаДохода
	|					ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоритет КАК ДанныеОКодахДекларации
	|					ПО ТаблицаДохода.Приоритет = ДанныеОКодахДекларации.Приоритет
	|						И ТаблицаДохода.СтатьяЗатрат = ДанныеОКодахДекларации.СтатьяЗатрат
	|			ГДЕ
	|				(НЕ ДанныеОКодахДекларации.КодСтроки В(&КодСтроки))) КАК ВложенныйЗапрос
	|			ПО ВЫРАЗИТЬ(НалоговыйОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).СубконтоНУ1 = ВложенныйЗапрос.ДоходРасход
	|			ИЛИ ВЫРАЗИТЬ(НалоговыйОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).СубконтоНУ2 = ВложенныйЗапрос.ДоходРасход
	|			ИЛИ ВЫРАЗИТЬ(НалоговыйОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).СубконтоНУ3 = ВложенныйЗапрос.ДоходРасход
	| 	"+ТекстЗапросаПоМесяцам+"
	|
	|	СГРУППИРОВАТЬ ПО
	|		НалоговыйОбороты.КорСубконто1,
	|		ВЫБОР КОГДА НалоговыйОбороты.ВидУчета <> Значение(Справочник.ВидыУчетаНУ.НУ) Тогда 4 Иначе 1 Конец
	|
	| "+ТекстДобЗапроса+") КАК ИтоговыеДанные
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
	|				ПО Контрагенты.СтранаРезидентства = КлассификаторСтранМира.Ссылка
	|			ПО ИтоговыеДанные.Контрагент = Контрагенты.Ссылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Контрагенты.Ссылка,
	|		Контрагенты.ИдентификационныйКодЛичности,
	|		Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства,
	|		КлассификаторСтранМира.КодАльфа3,
	|		Контрагенты.КБЕ,
	|		ИтоговыеДанные.ПризнакВидаУчета) КАК КонечныеИтоговыеДанные
	|ГДЕ
	|	КонечныеИтоговыеДанные.Сумма <> 0
	|	И (НЕ КонечныеИтоговыеДанные.Контрагент ЕСТЬ NULL )
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонечныеИтоговыеДанные.Контрагент.ИдентификационныйКодЛичности, КонечныеИтоговыеДанные.ПризнакВидаУчета";
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() И ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения Приложения 100.01 по коду вида расхода 7 за отчетный период отсутствуют...'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);		
	КонецЕсли;	
	
	ТаблицаРезультата = Результат.Выгрузить();
	
	Возврат ТаблицаРезультата;	
	
КонецФункции // Форма100_01РассчитатьДанныеФормы()

&НаСервере 
Функция Форма100_01РассчитатьДанныеОбОтсутствующихКодахСтрокДляСтатейЗатрат(ПериодФормирования)
	
	Запрос = Новый Запрос;
	
	ТекстЗапросаПоМесяцам = "";
	
	Если ПериодФормирования <> Неопределено Тогда 
		
		КолПериодов = ПериодФормирования.Количество() - 1;
		
		Для Счетчик = 0 по КолПериодов Цикл
			НазПериодаНач = ПериодФормирования[Счетчик].Представление;
			НазПериодаКон = ПериодФормирования[Счетчик + 1].Представление;
			ПериодНач  	  = ПериодФормирования[Счетчик].Значение;
			ПериодКон     = ПериодФормирования[Счетчик + 1].Значение;
			Если ТекстЗапросаПоМесяцам = "" Тогда
				ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам + "
				|  
				|	И НалоговыйОбороты.Период МЕЖДУ &"+НазПериодаНач+" И &"+НазПериодаКон+"
				| ";
			Иначе 
				ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам +  "
				|	И НалоговыйОбороты.Период МЕЖДУ &"+НазПериодаНач+" И &"+НазПериодаКон+"
				| ";
			КонецЕсли;
			Запрос.УстановитьПараметр(НазПериодаНач, ПериодНач); 	
			Запрос.УстановитьПараметр(НазПериодаКон, ПериодКон); 	
			Счетчик = Счетчик + 1;
		КонецЦикла;	
		
	Иначе 
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачПериода", 			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", 			СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Налоговый.Расходы);
	СписокСчетов.Добавить(ПланыСчетов.Налоговый.ВнеоборотныеАктивы);
	СписокСчетов.Добавить(ПланыСчетов.Налоговый.Производство_);
	
	Запрос.УстановитьПараметр("СписокСчетов",           СписокСчетов);    //счет Н800, Н300
	Запрос.УстановитьПараметр("ВидСубконтоЗатрат",      ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);  // Субконто1 - СтатьиЗатрат
	
	Запрос.УстановитьПараметр("ВидСубконтоКонтрагенты", ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);     
	Запрос.УстановитьПараметр("Организация", 			Налогоплательщик);
	Запрос.УстановитьПараметр("СписокОрганизаций", 		мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("ПустаяОрганизация", 		Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеЗначение", 		Неопределено);
	Запрос.УстановитьПараметр("ПустаяСтатьяЗатрат", 	Справочники.СтатьиЗатрат.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяДата", 			'00010101');
	Запрос.УстановитьПараметр("Счет000",				ПланыСчетов.Налоговый.Вспомогательный);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.ВидДоходаРасхода КАК ВидДоходаРасхода
	|ПОМЕСТИТЬ ВТ_ДанныеОКодахСтрок
	|ИЗ
	|	РегистрСведений.КодыСтрокДекларацииПоНалогуНаПрибыль.СрезПоследних(
	|			&КонПериода,
	|			(Налогоплательщик = &ПустаяОрганизация
	|				ИЛИ Налогоплательщик = &ПустоеЗначение
	|				ИЛИ Налогоплательщик = &Организация)
	|				И (НЕ КодСтроки = """")) КАК КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.ВидДоходаРасхода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Значение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.ПризнакСтатьи) КАК ПризнакСтатьи
	|ИЗ
	|	(ВЫБРАТЬ
	|		НалоговыйОбороты.Субконто1 КАК Значение,
	|		ИСТИНА КАК ПризнакСтатьи
	|	ИЗ
	|		РегистрБухгалтерии.Налоговый.Обороты(
	|				&НачПериода,
	|				&КонПериода,
	|				Запись,
	|				Счет В ИЕРАРХИИ (&СписокСчетов),
	|				&ВидСубконтоЗатрат,
	|				Организация В (&СписокОрганизаций)
	|					И Субконто1 <> &ПустаяСтатьяЗатрат,
	|				(НЕ КорСчет В ИЕРАРХИИ (&Счет000)),
	|				&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеОКодахСтрок КАК ВТ_ДанныеОКодахСтрок
	|			ПО НалоговыйОбороты.Субконто1 = ВТ_ДанныеОКодахСтрок.ВидДоходаРасхода
	|	ГДЕ
	|		ВТ_ДанныеОКодахСтрок.ВидДоходаРасхода ЕСТЬ NULL 
	| 	"+ТекстЗапросаПоМесяцам+"
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НалоговыйОбороты.КорСубконто1,
	|		ЛОЖЬ
	|	ИЗ
	|		РегистрБухгалтерии.Налоговый.Обороты(
	|				&НачПериода,
	|				&КонПериода,
	|				Запись,
	|				Счет В ИЕРАРХИИ (&СписокСчетов),
	|				&ВидСубконтоЗатрат,
	|				Организация В (&СписокОрганизаций)
	|					И Субконто1 = &ПустаяСтатьяЗатрат,
	|				(НЕ КорСчет В ИЕРАРХИИ (&Счет000)),
	|				&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеОКодахСтрок КАК ВТ_ДанныеОКодахСтрок
	|			ПО НалоговыйОбороты.Субконто1 = ВТ_ДанныеОКодахСтрок.ВидДоходаРасхода
	|	ГДЕ
	|		ВТ_ДанныеОКодахСтрок.ВидДоходаРасхода ЕСТЬ NULL 
	| 	"+ТекстЗапросаПоМесяцам+") КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Значение";
	
	
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультата; 
	
КонецФункции // Форма100_01РассчитатьДанныеОбОтсутствующихКодахСтрокДляСтатейЗатрат()

&НаКлиенте
Процедура Форма100_01ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяГруппы = "Страница1";     
		Ячейка = "Ф100_01_B";             
		
		СсылкаРасшифровки = ВыбранноеЗначение;
		
		ОбластьРасшифровки = ЭтаФорма.Элементы.Форма100_01ПолеТабличногоДокументаСтраница1.ТекущаяОбласть;    
		НомерСтроки = Сред(ОбластьРасшифровки.Имя, Найти(ОбластьРасшифровки.Имя, "__") + 2);
		
		Форма100_01ОбработкаПодбораНаСервере(СсылкаРасшифровки, Ячейка, ИмяГруппы, НомерСтроки);         
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Форма100_01ОбработкаПодбораНаСервере(Расшифровка, ИмяЯчейки, ИмяГруппы, НомерСтроки) Экспорт   
	
	Если ИмяЯчейки = "Ф100_01_B" Тогда
		
		ОбластьИИН_БИН 		 	= "Ф100_01_B__" + НомерСтроки;
		ОблостьКодСтраны		= "Ф100_01_C__" + НомерСтроки;
		ОбластьНомерРегистрации = "Ф100_01_D__" + НомерСтроки;
		
		Если Лев(Расшифровка.КБЕ, 1) = "2" Тогда
			Если СокрЛП(Расшифровка.НомерНалоговойРегистрацииВСтранеРезидентства) = "" Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Номер налоговой регистрации в стране резидентства контрагента %1 не заполнен'"),
				Строка(Расшифровка.Наименование)); 				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Расшифровка); 
				
				СтрокаНомерНалоговойРегистрации = "";
			ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Расшифровка.НомерНалоговойРегистрацииВСтранеРезидентства) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В Номере налоговой регистрации в стране резидентства контрагента %1  имеются символы, отличные от цифр (0..9)'"),
				Строка(Расшифровка.Наименование)); 				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Расшифровка); 			
				
				СтрокаНомерНалоговойРегистрации = "";
			Иначе						
				СтрокаНомерНалоговойРегистрации = Расшифровка.НомерНалоговойРегистрацииВСтранеРезидентства;
			КонецЕсли;
			
			СтрокаБИНКонтрагента = Расшифровка.ИдентификационныйКодЛичности;
			// заполняем для нерезидента
			Если СокрЛП(Расшифровка.СтранаРезидентства.КодАльфа3) = "" Тогда 
				СтрокаКодСтраны = "";
			Иначе
				СтрокаКодСтраны = Расшифровка.СтранаРезидентства.КодАльфа3;
			КонецЕсли; 
		Иначе
			Если СокрЛП(Расшифровка.ИдентификационныйКодЛичности) = "" Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'ИИН/БИН контрагента %1 не заполнен!'"),
				Строка(Расшифровка.Наименование)); 				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Расшифровка); 
				
				СтрокаБИНКонтрагента = "";                                                                             						
			ИначеЕсли  НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Расшифровка.ИдентификационныйКодЛичности)  ТОгда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В ИИН/БИН контрагента %1 имеются символы, отличные от цифр (0..9)'"),
				Строка(Расшифровка.Наименование)); 				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Расшифровка); 
				
				СтрокаБИНКонтрагента = "";						
			Иначе
				СтрокаБИНКонтрагента = Расшифровка.ИдентификационныйКодЛичности;
			КонецЕсли; 
			СтрокаНомерНалоговойРегистрации = "";
			СтрокаКодСтраны = ""; // не заполняем для резидента
			
		КонецЕсли;
		
		Форма100_01ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН_БИН].Значение          = СтрокаБИНКонтрагента; 
		Форма100_01ПолеТабличногоДокументаСтраница1.Области[ОблостьКодСтраны].Значение        = СтрокаКодСтраны; 
		Форма100_01ПолеТабличногоДокументаСтраница1.Области[ОбластьНомерРегистрации].Значение = СтрокаНомерНалоговойРегистрации; 
		
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьИИН_БИН,   		 СтрокаБИНКонтрагента,			  , Расшифровка); 
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОблостьКодСтраны, 		 СтрокаКодСтраны,				  , Расшифровка); 
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьНомерРегистрации, СтрокаНомерНалоговойРегистрации, , Расшифровка); 
		
		Форма100_01ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН_БИН].Расшифровка 		 = Расшифровка; 
		Форма100_01ПолеТабличногоДокументаСтраница1.Области[ОблостьКодСтраны].Расшифровка 	     = Расшифровка; 
		Форма100_01ПолеТабличногоДокументаСтраница1.Области[ОбластьНомерРегистрации].Расшифровка = Расшифровка; 
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура Форма100_01Расшифровка(ИмяЯчейки, ОбщаяРасшифровка)
	
	НомерРимскойЧасти 	  = "";
	ВыводитьПрочиеРасходы = Ложь;
	
	Если ОбщаяРасшифровка Тогда 
		Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	Иначе 
		НомерЯчейки = Число(Сред(ИмяЯчейки , Найти(ИмяЯчейки , "__")+ 2));
		
		Форма100_01 = мСтруктураМногострочныхРазделов.ПолучитьЭлементы();
		СтраницыФормы = Форма100_01[0].ПолучитьЭлементы();
		ТаблицаПоиска = Неопределено;
		Для Каждого Страница Из СтраницыФормы Цикл
			Если Страница.ИмяГруппы = ("Страница1") Тогда
				ТаблицаПоиска = ЭтаФорма[Страница.ИмяРеквизитаТаблицыСтрокГруппы];
			КонецЕсли;
		КонецЦикла;
		Если ТаблицаПоиска <> Неопределено Тогда
			НайденнаяСтрока = ТаблицаПоиска[НомерЯчейки - 1];
			Контрагент = НайденнаяСтрока["Ф100_01_B" + "_Расшифровка"];
			ВидРасхода = ?(НайденнаяСтрока["Ф100_01_E"] = Неопределено, 0, НайденнаяСтрока["Ф100_01_E"]);
		Иначе	
			Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
			ВидРасхода = 0;
		КонецЕсли;	
		
		КодДляРасшифровки = Новый СписокЗначений;
		Если ВидРасхода <> 0 Тогда 
			Если ВидРасхода = 1 Тогда 
				КодДляРасшифровки.Добавить("100.00.019.IIIB");
			ИначеЕсли ВидРасхода = 2 Тогда 
				КодДляРасшифровки.Добавить("100.00.019.IIIC"); 
			ИначеЕсли ВидРасхода = 3 Тогда 
				КодДляРасшифровки.Добавить("100.00.019.IIID");
			ИначеЕсли ВидРасхода = 4 Тогда 
				КодДляРасшифровки.Добавить("100.00.019.IIIE"); 
			ИначеЕсли ВидРасхода = 5 Тогда 
				КодДляРасшифровки.Добавить("100.00.019.IIIF");
			ИначеЕсли ВидРасхода = 6 Тогда 
				КодДляРасшифровки.Добавить("100.00.019.IIIG");
			ИначеЕсли ВидРасхода = 7 Тогда 
				КодДляРасшифровки.Добавить("100.00.019.IIIA");
				КодДляРасшифровки.Добавить("100.00.019.IIIH");
				ВыводитьПрочиеРасходы = Истина;
			КонецЕсли;
		Иначе 
			Возврат;
		КонецЕсли;
		
		ПериодФормирования = Форма100_01ПроверкаНаПлательщикаНДС();
		
		Если ПериодФормирования <> Неопределено Тогда 
			КолПериодов = ПериодФормирования.Количество();
			Если КолПериодов = 0 Тогда 
				КолПовторов = 1;
			Иначе 
				КолПовторов = КолПериодов / 2;
			КонецЕсли;
		Иначе 
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Расшифровка 100.01 не заполняется, так как организация %1 является плательщиком НДС'"), Налогоплательщик);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", 	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ТипДанных", 		"РегистрыБухгалтерии");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяОбъекта", 	"Налоговый");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяТаблицы", 	"Обороты");
	
	ТекстЗапросаПоМесяцам = "";
	Если ПериодФормирования <> Неопределено Тогда 
		КолПериодов = ПериодФормирования.Количество() - 1;
		Для Счетчик = 0 по КолПериодов Цикл
			НазПериодаНач = ПериодФормирования[Счетчик].Представление;
			НазПериодаКон = ПериодФормирования[Счетчик + 1].Представление;
			ПериодНач  	  = ПериодФормирования[Счетчик].Значение;
			ПериодКон     = ПериодФормирования[Счетчик + 1].Значение;
			
			Если ТекстЗапросаПоМесяцам = "" Тогда
				ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам + "
				|   И (НалоговыйОбороты.Период МЕЖДУ &"+НазПериодаНач+" И &"+НазПериодаКон+"
				| ";
			Иначе 
				ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам +  "
				|	ИЛИ НалоговыйОбороты.Период МЕЖДУ &"+НазПериодаНач+" И &"+НазПериодаКон+"
				| ";
			КонецЕсли;
			
			Счетчик = Счетчик + 1;
		КонецЦикла;	
	Иначе 
	КонецЕсли;
	Если ТекстЗапросаПоМесяцам <> "" Тогда
		ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам + ")";
	КонецЕсли;
	
	Если Не ВыводитьПрочиеРасходы Тогда 
		
		ТекстЗапроса = "ВЫБРАТЬ
		|   	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Период КАК Период,
		|   	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.ВидДоходаРасхода КАК ВидДоходаРасхода,
		|   	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик КАК Организация,
		|   	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.КодСтроки КАК КодСтроки,
		|   	ВЫБОР
		|   		КОГДА КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик = &ПустаяОрганизация
		|   			ТОГДА 3
		|   		КОГДА КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик = &ПустоеЗначение
		|   			ТОГДА 2
		|   		КОГДА КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик = &Организация
		|   			ТОГДА 1
		|   	КОНЕЦ КАК Приоритет
		|ПОМЕСТИТЬ ВТ_Приоретет
		|ИЗ
		|	РегистрСведений.КодыСтрокДекларацииПоНалогуНаПрибыль.СрезПоследних(
		|   		&КонПериода,
		|   		(Налогоплательщик = &ПустаяОрганизация
		|   		ИЛИ Налогоплательщик = &ПустоеЗначение
		|   		ИЛИ Налогоплательщик = &Организация)
		|   		И (НЕ КодСтроки = """")) КАК КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидДоходаРасхода,
		|   	Приоритет
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаВидаДоходаРасхода.ВидДоходаРасхода КАК ВидДоходаРасхода,
		|   	МИНИМУМ(ТаблицаВидаДоходаРасхода.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ВТ_ТаблицаВидаДоходаРасхода
		|ИЗ
		|   	ВТ_Приоретет КАК ТаблицаВидаДоходаРасхода
		|   
		|СГРУППИРОВАТЬ ПО
		|   	ТаблицаВидаДоходаРасхода.ВидДоходаРасхода
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаВидаДоходаРасхода.ВидДоходаРасхода КАК ВидДоходаРасхода,
		|   	ТаблицаВидаДоходаРасхода.Приоритет КАК Приоритет,
		|   	ДанныеОКодахДекларации.КодСтроки КАК КодСтроки
		|ПОМЕСТИТЬ ВТ_ДоходыРасходыПоКоду   	
		|ИЗ
		|   	ВТ_ТаблицаВидаДоходаРасхода КАК ТаблицаВидаДоходаРасхода
		|   	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоретет КАК ДанныеОКодахДекларации
		|   		ПО ТаблицаВидаДоходаРасхода.ВидДоходаРасхода = ДанныеОКодахДекларации.ВидДоходаРасхода
		|   		И ТаблицаВидаДоходаРасхода.Приоритет = ДанныеОКодахДекларации.Приоритет
		|ГДЕ
		|   ДанныеОКодахДекларации.КодСтроки В(&КодСтроки)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0)) КАК Сумма,
		|	СтатьиЗатратПоКоду.КодСтроки КАК КодСтроки,
		|	НалоговыйОбороты.КорСубконто1 КАК КорСубконто1,
		|	НалоговыйОбороты.Регистратор КАК Регистратор
		|	
		|ПОМЕСТИТЬ ВТ_ОборотыДоходовРасходов
		|
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(
		|								   		&НачПериода,
		|										&КонПериода,
		|										Запись,
		|										Счет В ИЕРАРХИИ (&СписокСчетов),
		|										&ВидСубконтоЗатрат,
		|										Организация В (&СписокОрганизаций)
		|										И ВидУчета <> &ВидУчетаВР,
		|										НЕ КорСчет В ИЕРАРХИИ (&СчетаНалогов),
		|										&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|   		ВТ_ДоходыРасходыПоКоду КАК СтатьиЗатратПоКоду
		|   		ПО НалоговыйОбороты.Субконто1 = СтатьиЗатратПоКоду.ВидДоходаРасхода
		|   "+ТекстЗапросаПоМесяцам+"
		|   	
		|СГРУППИРОВАТЬ ПО
		|	СтатьиЗатратПоКоду.КодСтроки,
		|	НалоговыйОбороты.КорСубконто1,
		|	НалоговыйОбороты.Регистратор
		|   	
		|ОБЪЕДИНИТЬ ВСЕ
		|   
		|ВЫБРАТЬ
		|	СУММА(ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0)),
		|	ДоходыПоКоду.КодСтроки,
		|	НалоговыйОбороты.КорСубконто1,
		|	НалоговыйОбороты.Регистратор
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(
		|										&НачПериода,
		|										&КонПериода,
		|										Запись,
		|										Счет = &СчетРБП,
		|										,
		|										Организация В (&СписокОрганизаций)
		|										И ВидУчета <> &ВидУчетаВР,
		|										,
		|										&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
		|   	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДоходыРасходыПоКоду КАК ДоходыПоКоду
		|   		ПО ВЫРАЗИТЬ (НалоговыйОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).СубконтоНУ1 = ДоходыПоКоду.ВидДоходаРасхода
		|   			ИЛИ ВЫРАЗИТЬ (НалоговыйОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).СубконтоНУ2 = ДоходыПоКоду.ВидДоходаРасхода
		|  			ИЛИ ВЫРАЗИТЬ (НалоговыйОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).СубконтоНУ3 = ДоходыПоКоду.ВидДоходаРасхода
		|"+ТекстЗапросаПоМесяцам+"
		|   
		|СГРУППИРОВАТЬ ПО
		|	ДоходыПоКоду.КодСтроки,
		|	НалоговыйОбороты.КорСубконто1,
		|	НалоговыйОбороты.Регистратор
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент,
		|   Контрагенты.ИдентификационныйКодЛичности КАК ИдентификационныйКодЛичности,
		|   Контрагенты.СерияСвидетельстваПоНДС КАК СерияСвидетельстваПоНДС,
		|   Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства КАК НомерНалоговойРегистрацииВСтранеРезидентства,
		|   Контрагенты.НомерСвидетельстваПоНДС КАК НомерСвидетельстваПоНДС,
		|   Контрагенты.ДатаСвидетельстваПоНДС КАК ДатаСвидетельстваПоНДС,
		|   КлассификаторСтранМира.КодАльфа3 КАК Код,					   
		|   Контрагенты.КБЕ КАК КБЕ,
		|   ОборотыДоходовРасходов.Сумма КАК Сумма,
		|   ОборотыДоходовРасходов.КодСтроки КАК КодСтроки,
		|   ОборотыДоходовРасходов.Регистратор
		|
		|ПОМЕСТИТЬ ВТ_КонечныеИтоговыеДанные	
		|
		|ИЗ	ВТ_ОборотыДоходовРасходов КАК ОборотыДоходовРасходов
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
		|		ПО Контрагенты.СтранаРезидентства = КлассификаторСтранМира.Ссылка
		|		ПО ОборотыДоходовРасходов.КорСубконто1 = Контрагенты.Ссылка
		|   
		|ГДЕ
		|   	Контрагенты.Ссылка = &Контрагент
		|
		|СГРУППИРОВАТЬ ПО
		|   Контрагенты.Ссылка,
		|   Контрагенты.СерияСвидетельстваПоНДС,
		|   Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства,
		|   Контрагенты.НомерСвидетельстваПоНДС,
		|   Контрагенты.ДатаСвидетельстваПоНДС,
		|   КлассификаторСтранМира.КодАльфа3,
		|   Контрагенты.ИдентификационныйКодЛичности,
		|   Контрагенты.КБЕ,
		|   ОборотыДоходовРасходов.Сумма,
		|   ОборотыДоходовРасходов.КодСтроки,
		|   ОборотыДоходовРасходов.Регистратор
		|;   	
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонечныеИтоговыеДанные.Контрагент,
		|	КонечныеИтоговыеДанные.Сумма,
		|	КонечныеИтоговыеДанные.ИдентификационныйКодЛичности,
		|	КонечныеИтоговыеДанные.НомерНалоговойРегистрацииВСтранеРезидентства,
		|	КонечныеИтоговыеДанные.Код,
		|	КонечныеИтоговыеДанные.КодСтроки КАК КодСтроки,		               
		|	КонечныеИтоговыеДанные.КБЕ,
		|	КонечныеИтоговыеДанные.Регистратор
		|ИЗ
		|	ВТ_КонечныеИтоговыеДанные КАК КонечныеИтоговыеДанные
		|ГДЕ
		|	КонечныеИтоговыеДанные.Сумма <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	КодСтроки,
		|	КонечныеИтоговыеДанные.Контрагент.ИдентификационныйКодЛичности //+ УсловиеСортировкиДляИИН_БИН; 
		|
		|";
		
		СписокСчетов = Новый СписокЗначений;
		СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.ВнеоборотныеАктивы"));
		СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.Расходы"));
		СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.Производство_"));
		
	Иначе 
		
		Если ПризнакВключенияДопЗатрат10001 Тогда 
			ТекстДобЗапроса = "ОБЪЕДИНИТЬ ВСЕ
			|		
			|		ВЫБРАТЬ
			|			НалоговыйОбороты.КорСубконто1,
			|			НалоговыйОбороты.СуммаОборот,
			|			НалоговыйОбороты.Регистратор
			|		ИЗ
			|			РегистрБухгалтерии.Налоговый.Обороты(
			|					&НачПериода,
			|					&КонПериода,
			|					Запись,
			|					Счет В ИЕРАРХИИ (&СписокСчетов),
			|					&ВидСубконтоЗатрат,
			|					Организация В (&СписокОрганизаций)
			|						И ВидУчета <> &ВидУчетаВР,
			|					НЕ КорСчет В ИЕРАРХИИ (&СчетаНалогов),
			|					&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
			|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|					КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.ВидДоходаРасхода КАК ВидДоходаРасхода
			|				ИЗ
			|					РегистрСведений.КодыСтрокДекларацииПоНалогуНаПрибыль.СрезПоследних(
			|							&КонПериода,
			|							(Налогоплательщик = &ПустаяОрганизация
			|								ИЛИ Налогоплательщик = &ПустоеЗначение
			|								ИЛИ Налогоплательщик = &Организация)
			|								И (НЕ КодСтроки = """")) КАК КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних
			|				
			|				СГРУППИРОВАТЬ ПО
			|					КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.ВидДоходаРасхода) КАК ДанныеОКодахСтрок
			|				ПО НалоговыйОбороты.Субконто1 = ДанныеОКодахСтрок.ВидДоходаРасхода
			|		ГДЕ
			|			ДанныеОКодахСтрок.ВидДоходаРасхода ЕСТЬ NULL 
			|			И НалоговыйОбороты.КорСубконто1 = &Контрагент 
			| "+ТекстЗапросаПоМесяцам;
		КонецЕсли;
		
		ТекстЗапроса = "ВЫБРАТЬ
		|   КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Период КАК Период,
		|   КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.ВидДоходаРасхода КАК ВидДоходаРасхода,
		|   КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик КАК Организация,
		|   КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.КодСтроки КАК КодСтроки,
		|   ВЫБОР
		|   	КОГДА КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик = &ПустаяОрганизация
		|   		ТОГДА 3
		|   	КОГДА КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик = &ПустоеЗначение
		|   		ТОГДА 2
		|   	КОГДА КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик = &Организация
		|   		ТОГДА 1
		|   КОНЕЦ КАК Приоритет
		|ПОМЕСТИТЬ ВТ_Приоритет
		|ИЗ
		|   РегистрСведений.КодыСтрокДекларацииПоНалогуНаПрибыль.СрезПоследних(
		|   		&КонПериода,
		|   		(Налогоплательщик = &ПустаяОрганизация
		|   			ИЛИ Налогоплательщик = &ПустоеЗначение
		|   			ИЛИ Налогоплательщик = &Организация)
		|   			И (НЕ КодСтроки = """")) КАК КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних
		
		|ИНДЕКСИРОВАТЬ ПО
		|   ВидДоходаРасхода,
		|   Приоритет
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаВидаДоходаРасхода.ВидДоходаРасхода КАК ВидДоходаРасхода,
		|	МИНИМУМ(ТаблицаВидаДоходаРасхода.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ВТ_ТаблицаВидаДоходаРасхода	
		|ИЗ
		|	ВТ_Приоритет КАК ТаблицаВидаДоходаРасхода
		|   
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаВидаДоходаРасхода.ВидДоходаРасхода
		|;   	
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаВидаДоходаРасхода.ВидДоходаРасхода КАК ВидДоходаРасхода,
		|	ТаблицаВидаДоходаРасхода.Приоритет КАК Приоритет,
		|	ДанныеОКодахДекларации.КодСтроки КАК КодСтроки
		|ПОМЕСТИТЬ ВТ_ДоходыРасходыПоКоду   				
		|ИЗ
		|	ВТ_ТаблицаВидаДоходаРасхода КАК ТаблицаВидаДоходаРасхода
		|   		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоритет КАК ДанныеОКодахДекларации
		|		   	ПО ТаблицаВидаДоходаРасхода.ВидДоходаРасхода = ДанныеОКодахДекларации.ВидДоходаРасхода
		|			И ТаблицаВидаДоходаРасхода.Приоритет = ДанныеОКодахДекларации.Приоритет
		|ГДЕ
		|   (НЕ ДанныеОКодахДекларации.КодСтроки В(&КодСтроки))
		|; 
		|////////////////////////////////////////////////////////////////////////////////  		
		|ВЫБРАТЬ
		|	НалоговыйОбороты.КорСубконто1 КАК Контрагент,
		|	ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0) КАК Сумма,
		|	НалоговыйОбороты.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТ_ИтоговыеДанные	
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(
		|		&НачПериода,
		|		&КонПериода,
		|		Запись,
		|   		Счет = &Счет1330Н
		|   		ИЛИ Счет = &Счет1310Н,
		|   		,
		|   		Организация В (&СписокОрганизаций)
		|   		И ВидУчета <> &ВидУчетаВР,
		|   		,
		|   		&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
		|ГДЕ
		|	НалоговыйОбороты.КорСубконто1 = &Контрагент
		|	"+ТекстЗапросаПоМесяцам+"
		|   	
		|ОБЪЕДИНИТЬ ВСЕ
		|   	
		|ВЫБРАТЬ
		|	НалоговыйОбороты.КорСубконто1,
		|	СУММА(ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0)),
		|	НалоговыйОбороты.Регистратор
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(
		|		&НачПериода,
		|		&КонПериода,
		|		Запись,
		|		Счет В ИЕРАРХИИ (&СписокСчетов),
		|		&ВидСубконтоЗатрат,
		|		Организация В (&СписокОрганизаций)
		|		И ВидУчета <> &ВидУчетаВР,
		|		НЕ КорСчет В ИЕРАРХИИ (&СчетаНалогов),
		|		&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДоходыРасходыПоКоду КАК ДоходыРасходыПоКоду
		|	ПО НалоговыйОбороты.Субконто1 = ДоходыРасходыПоКоду.ВидДоходаРасхода
		|ГДЕ
		|	НалоговыйОбороты.КорСубконто1 = &Контрагент
		|	"+ТекстЗапросаПоМесяцам+"
		|   	
		|СГРУППИРОВАТЬ ПО
		|	НалоговыйОбороты.КорСубконто1,
		|	НалоговыйОбороты.Регистратор
		
		|ОБЪЕДИНИТЬ ВСЕ
		
		|ВЫБРАТЬ
		|	НалоговыйОбороты.КорСубконто1 КАК Контрагент,
		|	ВЫБОР
		|		КОГДА НалоговыйОбороты.Счет В ИЕРАРХИИ (&Счет20Н)
		|			ТОГДА ЕСТЬNULL(НалоговыйОбороты.СуммаОборотДт, 0)
		|			ИНАЧЕ ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0)
		|	КОНЕЦ КАК Сумма,
		|	НалоговыйОбороты.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(
		|		&НачПериода,
		|		&КонПериода,
		|		Запись,
		|		Счет В ИЕРАРХИИ (&Счет20Н)
		|		И НЕ Счет = &СчетНЗС
		|		И НЕ Счет = &Счет2500Н,
		|		,
		|		Организация В (&СписокОрганизаций)
		|		И ВидУчета <> &ВидУчетаВР,
		|		,
		|		&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
		|ГДЕ
		|	НалоговыйОбороты.КорСубконто1 = &Контрагент
		|	"+ТекстЗапросаПоМесяцам+"
		|   	
		|ОБЪЕДИНИТЬ ВСЕ
		
		|ВЫБРАТЬ
		|	НалоговыйОбороты.КорСубконто1 КАК Контрагент,
		|	ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0) КАК Сумма,
		|	НалоговыйОбороты.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(
		|   		&НачПериода,
		|   		&КонПериода,
		|   		Запись,
		|   		Счет = &СчетНЗС
		|   			ИЛИ Счет = &Счет2500Н,
		|   		,
		|   		Организация В (&СписокОрганизаций)
		|   			И ВидУчета <> &ВидУчетаВР,
		|   		,
		|   		&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
		|   	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДоходыРасходыПоКоду КАК СтатьиЗатратПоКоду
		|   	ПО (НалоговыйОбороты.Субконто2 = СтатьиЗатратПоКоду.ВидДоходаРасхода)
		|ГДЕ
		|   	НалоговыйОбороты.КорСубконто1 = &Контрагент
		|	"+ТекстЗапросаПоМесяцам+"
		|   	
		|ОБЪЕДИНИТЬ ВСЕ
		
		|ВЫБРАТЬ
		|	НалоговыйОбороты.КорСубконто1,
		|   	СУММА(ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0)) КАК Сумма,
		|   	НалоговыйОбороты.Регистратор КАК Регистратор
		|ИЗ
		|   	РегистрБухгалтерии.Налоговый.Обороты(
		|   			&НачПериода,
		|   			&КонПериода,
		|   			Запись,
		|   			Счет = &СчетРБП,
		|   			,
		|   			Организация В (&СписокОрганизаций)
		|   				И ВидУчета <> &ВидУчетаВР,
		|   			,
		|   			&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДоходыРасходыПоКоду КАК ДоходыРасходыПоКоду
		|		ПО ВЫРАЗИТЬ (НалоговыйОбороты.Субконто1 КАК Справочник.РАсходыБудущихПериодов).СубконтоНУ1 = ДоходыРасходыПоКоду.ВидДоходаРасхода
		|   		ИЛИ ВЫРАЗИТЬ (НалоговыйОбороты.Субконто1 КАК Справочник.РАсходыБудущихПериодов).СубконтоНУ2 = ДоходыРасходыПоКоду.ВидДоходаРасхода
		|   		ИЛИ ВЫРАЗИТЬ (НалоговыйОбороты.Субконто1 КАК Справочник.РАсходыБудущихПериодов).СубконтоНУ3 = ДоходыРасходыПоКоду.ВидДоходаРасхода					   
		|ГДЕ
		|	НалоговыйОбороты.КорСубконто1 = &Контрагент
		|	"+ТекстЗапросаПоМесяцам+"
		
		|СГРУППИРОВАТЬ ПО
		|	НалоговыйОбороты.КорСубконто1,
		|   	НалоговыйОбороты.Регистратор 
		|	"+ТекстДобЗапроса+"
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	СУММА(ИтоговыеДанные.Сумма) КАК Сумма,
		|	Контрагенты.ИдентификационныйКодЛичности КАК ИдентификационныйКодЛичности,
		|	Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства КАК НомерНалоговойРегистрацииВСтранеРезидентства,
		|	КлассификаторСтранМира.КодАльфа3 КАК Код,
		|	Контрагенты.КБЕ КАК КБЕ,
		|	ИтоговыеДанные.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТ_КонечныеИтоговыеДанные	
		|ИЗ
		|	ВТ_ИтоговыеДанные КАК ИтоговыеДанные
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
		|		ПО Контрагенты.СтранаРезидентства = КлассификаторСтранМира.Ссылка
		|		ПО ИтоговыеДанные.Контрагент = Контрагенты.Ссылка
		|   
		|СГРУППИРОВАТЬ ПО
		|	Контрагенты.Ссылка,
		|	Контрагенты.ИдентификационныйКодЛичности,
		|	Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства,
		|	КлассификаторСтранМира.КодАльфа3,
		|	Контрагенты.КБЕ,
		|	ИтоговыеДанные.Регистратор
		|;   	
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|   КонечныеИтоговыеДанные.Контрагент,
		|   КонечныеИтоговыеДанные.Сумма,
		|   КонечныеИтоговыеДанные.ИдентификационныйКодЛичности,
		|   КонечныеИтоговыеДанные.НомерНалоговойРегистрацииВСтранеРезидентства,
		|   КонечныеИтоговыеДанные.Код,
		|   КонечныеИтоговыеДанные.КБЕ,
		|   КонечныеИтоговыеДанные.Регистратор
		|ИЗ
		|   ВТ_КонечныеИтоговыеДанные КАК КонечныеИтоговыеДанные
		|ГДЕ
		|   КонечныеИтоговыеДанные.Сумма <> 0
		|   И (НЕ КонечныеИтоговыеДанные.Контрагент ЕСТЬ NULL )
		
		|УПОРЯДОЧИТЬ ПО
		|   КонечныеИтоговыеДанные.Контрагент.ИдентификационныйКодЛичности"; //+УсловиеСортировкиДляИИН_БИН;
		//|";
		
		СписокСчетов = Новый СписокЗначений;
		СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.Расходы"));
		СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.Производство_"));
		
		КодДляРасшифровки = Новый СписокЗначений;
		КодДляРасшифровки.Добавить("100.00.019.IIIB"); 					
		КодДляРасшифровки.Добавить("100.00.019.IIIC"); 					
		КодДляРасшифровки.Добавить("100.00.019.IIID"); 					
		КодДляРасшифровки.Добавить("100.00.019.IIIE"); 					
		КодДляРасшифровки.Добавить("100.00.019.IIIF"); 					
		КодДляРасшифровки.Добавить("100.00.019.IIIG"); 
		
	КонецЕсли;	
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ПолучитьАдресМакетаСКД(Неопределено, ТекстЗапроса, СписокСчетов, КодДляРасшифровки));
	
	//ПАРАМЕТРЫ
	МассивПараметровДанных = Новый Массив();   
	
	Для Счетчик = 0 по КолПериодов-1 Цикл
		НазПериодаНач = ПериодФормирования[Счетчик].Представление;
		НазПериодаКон = ПериодФормирования[Счетчик + 1].Представление;
		ПериодНач  	  = ПериодФормирования[Счетчик].Значение;
		ПериодКон     = ПериодФормирования[Счетчик + 1].Значение;
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, НазПериодаНач, 		ПериодНач);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, НазПериодаКон, 		ПериодКон);
		
		Счетчик = Счетчик + 1;
	КонецЦикла;	
	
	Если ВыводитьПрочиеРасходы Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет1310Н", 		ПредопределенноеЗначение("ПланСчетов.Налоговый.СырьеИМатериалы"));
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет1330Н", 		ПредопределенноеЗначение("ПланСчетов.Налоговый.Товары"));
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет20Н", 		ПредопределенноеЗначение("ПланСчетов.Налоговый.ВнеоборотныеАктивы"));
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СчетНЗС", 		ПредопределенноеЗначение("ПланСчетов.Налоговый.НезавершенноеСтроительство"));
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет2500Н", 		ПредопределенноеЗначение("ПланСчетов.Налоговый.ПреренцииДоВводаВЭксплуатацию"));
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСчетов30Н", ПредопределенноеЗначение("ПланСчетов.Налоговый.РасчетыСКонтрагентамиИПрочиеВзаиморасчеты"));
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет3350Н", 		ПредопределенноеЗначение("ПланСчетов.Налоговый.ВзаиморасчетыСРаботниками"));
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "НачалоПериода", 		НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));		
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КонецПериода", 		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "НачПериода", 			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КонПериода", 			СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ВидСубконтоЗатрат", 	ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ВидСубконтоКонтрагенты", 	ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Организация", 		Налогоплательщик);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ПустаяОрганизация", 	ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ПустоеЗначение", 		Неопределено);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ВидУчетаВР", 			ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.ВР"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ПустаяДата", 			"00010101");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Контрагент", 			Контрагент);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СчетРБП", 			ПредопределенноеЗначение("ПланСчетов.Налоговый.РасходыБудущихПериодов"));
	
	
	СчетаНалогов = Новый СписокЗначений;
	СчетаНалогов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.ИндивидуальныйПодоходныйНалог")); // 3120Н
	СчетаНалогов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.НалоговыеАктивыПрочее"));         // 1430Н
	СчетаНалогов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.ПрочиеНалоги"));                  // 3190Н
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СчетаНалогов", 	    СчетаНалогов);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПараметрыДанных", МассивПараметровДанных);
	
	// добавляем динамически формируемую структуру после заголовка отчета
	
	// Группировки	
	МассивГруппировок = Новый Массив();
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "Контрагент", НСтр("ru = 'Контрагент'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));	
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка",  МассивГруппировок);
	
	//Сортировка
	ПользовательскиеСортировки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ПорядокКомпоновкиДанных"));
	ПользовательскиеСортировки.ИдентификаторПользовательскойНастройки = "Порядок";
	
	НовыйЭлементПорядка = ПользовательскиеСортировки.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовыйЭлементПорядка.Использование  = Истина;
	НовыйЭлементПорядка.Поле  = новый ПолеКомпоновкиДанных("Контрагент");
	
	//Выбранные поля
	ПользовательскиеПоля = ПользовательскиеНастройки.Элементы.Добавить(Тип("ВыбранныеПоляКомпоновкиДанных"));	
	ПользовательскиеПоля.ИдентификаторПользовательскойНастройки = "Выбор";	
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "SystemFields.SerialNumber",   "№ п/п");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ИдентификационныйКодЛичности",   "ИИН/БИН поставщика");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Регистратор",   "Документ движения");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Сумма",   "Сумма");
	
	// Прочие настройки
	ТекстЗаголовка = НСтр("ru = 'Расшифровка приложения 100.01 по коду вида расхода %1 и по ИИН/БИН: %2'"); 
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Заголовок", 	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, ВидРасхода, ПолучитьЗначениеРеквизита(Контрагент, "ИдентификационныйКодЛичности")));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", Истина);	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьПодписи", Истина);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц.Скопировать());
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Налогоплательщик",  Налогоплательщик);

	
	ИмяРазделаРасшифровки = "Декларация по КПН:" + СтруктураРеквизитовФормы.мГод;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ВыводитьЗаголовок", Истина);	
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", ИмяРазделаРасшифровки);
	
	ОткрытьФорму("Отчет.УниверсальныйОтчетПоМетаданным.Форма.ФормаОтчета", ПараметрыФормы,, Истина);
	
КонецПроцедуры	

///////////////////////////////////////////////////////////////
// Процедуры и функции для расчета(заполнения) формы 100.02

&НаКлиенте
Процедура Форма100_02ЗаполнитьАвто(Перезаполнить = Ложь) 
	
	Состояние("Расчет формы 100.02");		
	Форма100_02ЗаполнитьАвтоНаСервере(Перезаполнить);	
	Состояние("");	 
	
КонецПроцедуры // Форма100ЗаполнитьАвто()

&НаСервере
Функция Форма100_02РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	
	Запрос =  Новый Запрос;
	
	СостоянияФА = Новый СписокЗначений();	
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.ПринятКУчету);
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.Выбыл);
	
	МассивСубконтоЗатратНаРемонт = Новый Массив;
	МассивСубконтоЗатратНаРемонт.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы);
	МассивСубконтоЗатратНаРемонт.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыРемонтаВА);
	МассивСубконтоЗатратНаРемонт.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
	
	Запрос.УстановитьПараметр("ДатаНачала", 				СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаОкончания", 				СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ПустаяГруппаНУ",				Справочники.ГруппыНалоговогоУчетаФА.ПустаяСсылка());	
	Запрос.УстановитьПараметр("ПустаяОрганизация",			Справочники.Организации.ПустаяСсылка());	
	Запрос.УстановитьПараметр("СписокОрганизаций", 			мСписокСтруктурныхЕдиниц);
	
	Запрос.УстановитьПараметр("УчетПоОбъектам",				Перечисления.ВидыНалоговогоУчетаВГруппахФА.ПоОбъектам);
	Запрос.УстановитьПараметр("СостоянияФА", 				СостоянияФА);
	Запрос.УстановитьПараметр("СчетУчетаВА",				ПланыСчетов.Налоговый.ВАВключенныеВСтоимостнойБаланс);		//Счет Н311
	Запрос.УстановитьПараметр("СчетРемонтаВА",				ПланыСчетов.Налоговый.РасходыНаРемонтВА);	    //Счет Н860
	Запрос.УстановитьПараметр("ВидУчетаНУ",					Справочники.ВидыУчетаНУ.НУ);
	Запрос.УстановитьПараметр("ВидРемонтаВА_Капитальный",	Перечисления.ВидыРемонтаВА.Капитальный);
	Запрос.УстановитьПараметр("ВидРемонтаВА_Текущий",		Перечисления.ВидыРемонтаВА.Текущий);
	Запрос.УстановитьПараметр("СписокСубконтоСчетаРемонта",	МассивСубконтоЗатратНаРемонт);
	
	Запрос.УстановитьПараметр("УчитываетсяОтдельноОтСтоимостногоБаланса",	Перечисления.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету);	
	Запрос.УстановитьПараметр("ДвижениеПоступления", 						Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
	Запрос.УстановитьПараметр("ДвижениеВыбытия", 							Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
	Запрос.УстановитьПараметр("ДвижениеАмортизации", 						Перечисления.ВидыДвиженияСтоимостиФА.Амортизация);
	Запрос.УстановитьПараметр("ДвижениеСписаниеБалансаМенееМинимума", 		Перечисления.ВидыДвиженияСтоимостиФА.СписаниеСтоимостногоБалансаГруппыМенееМинимума);
	Запрос.УстановитьПараметр("ДвижениеСписаниеБалансаВыбывших", 			Перечисления.ВидыДвиженияСтоимостиФА.СписаниеПриВыбытииВсехАктивовГруппы);
	Запрос.УстановитьПараметр("ДвижениеУвеличениеСтоимостиЗаСчетРемонта", 	Перечисления.ВидыДвиженияСтоимостиФА.УвеличениеСтоимостиЗаСчетРемонта);
	Запрос.УстановитьПараметр("Счет7900Н", 									ПланыСчетов.Налоговый.РасходыНаРемонтВА); //Н860
	Запрос.УстановитьПараметр("Счет000",									ПланыСчетов.Налоговый.Вспомогательный);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = СведенияОГруппахФиксированныхАктивовСрезПоследних.ФиксированныйАктив
	|				И СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = ОбъектыНалоговогоУчетаФА.Организация
	|			ТОГДА 1
	|		КОГДА СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = ОбъектыНалоговогоУчетаФА.Организация
	|			ТОГДА 2
	|		КОГДА СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = &ПустаяОрганизация
	|				И ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = СведенияОГруппахФиксированныхАктивовСрезПоследних.ФиксированныйАктив
	|			ТОГДА 3
	|		КОГДА СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = &ПустаяОрганизация
	|			ТОГДА 4
	|		ИНАЧЕ 5
	|	КОНЕЦ КАК Приоритет,
	|	ОбъектыНалоговогоУчетаФА.ГруппаНУ КАК ГруппаНУ,
	|	ОбъектыНалоговогоУчетаФА.Организация КАК Организация,
	|	ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК ФиксированныйАктив,
	|	СведенияОГруппахФиксированныхАктивовСрезПоследних.ПредельнаяНормаАмортизации КАК ПредельнаяНормаАмортизации,
	|	СведенияОГруппахФиксированныхАктивовСрезПоследних.ПрименяемаяНормаАмортизации КАК ПрименяемаяНормаАмортизации,
	|	СведенияОГруппахФиксированныхАктивовСрезПоследних.ВычетНаРемонт КАК ВычетНаРемонт,
	|	ОбъектыНалоговогоУчетаФА.ГруппаНУ.Код КАК ГруппаНУКод
	|ПОМЕСТИТЬ ФиксированныеАктивыИСведения
	|ИЗ
	|	РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	|			&ДатаОкончания,
	|			Организация В (&СписокОрганизаций)
	|				И СостояниеФиксированногоАктива В (&СостоянияФА)) КАК ОбъектыНалоговогоУчетаФА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОГруппахФиксированныхАктивов.СрезПоследних(
	|				&ДатаОкончания,
	|				Организация В (&СписокОрганизаций)
	|					ИЛИ Организация = &ПустаяОрганизация) КАК СведенияОГруппахФиксированныхАктивовСрезПоследних
	|		ПО (ОбъектыНалоговогоУчетаФА.Организация = СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация
	|				ИЛИ СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = &ПустаяОрганизация)
	|			И (ОбъектыНалоговогоУчетаФА.ГруппаНУ = СведенияОГруппахФиксированныхАктивовСрезПоследних.ГруппаФА
	|					И СведенияОГруппахФиксированныхАктивовСрезПоследних.ФиксированныйАктив = НЕОПРЕДЕЛЕНО
	|				ИЛИ СведенияОГруппахФиксированныхАктивовСрезПоследних.ГруппаФА.ВидУчетаВГруппеФА = &УчетПоОБъектам
	|					И ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = СведенияОГруппахФиксированныхАктивовСрезПоследних.ФиксированныйАктив)
	|ГДЕ
	|	ОбъектыНалоговогоУчетаФА.ГруппаНУ <> &ПустаяГруппаНУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектыНалоговогоУчетаФА.Организация КАК Организация,
	|	ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК ФиксированныйАктив
	|ПОМЕСТИТЬ ФиксированныеАктивыПринятыеКУчетуЗаПериод
	|ИЗ
	|	РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	|			&ДатаОкончания,
	|			Организация В (&СписокОрганизаций)
	|				И СостояниеФиксированногоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийФА.ПринятКУчету)) КАК ОбъектыНалоговогоУчетаФА
	|ГДЕ
	|	ОбъектыНалоговогоУчетаФА.Период >= &ДатаНачала
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтоимостьВА_НУ.Организация КАК Организация,
	|	СтоимостьВА_НУ.Субконто1 КАК Субконто1,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ФиксированныеАктивыПринятыеКУчетуЗаПериод.ФиксированныйАктив ЕСТЬ NULL
	|					И ЕСТЬNULL(СтоимостьВА_НУ.Поступление, 0) = 0
	|				ТОГДА 0
	|			ИНАЧЕ ЕСТЬNULL(СтоимостьВА_НУ.НачальныйОстаток, 0)
	|		КОНЕЦ) КАК НачальныйОстаток,
	|	СУММА(ЕСТЬNULL(СтоимостьВА_НУ.КонечныйОстаток, 0)) КАК КонечныйОстаток,
	|	СУММА(ЕСТЬNULL(СтоимостьВА_НУ.Выбытие, 0)) КАК Выбытие,
	|	СУММА(ЕСТЬNULL(СтоимостьВА_НУ.АмортизацияУчетная, 0)) КАК АмортизацияНачисленная,
	|	СУММА(ЕСТЬNULL(СтоимостьВА_НУ.СписаниеБалансаМененееМинимума, 0)) КАК СписаниеБалансаМененееМинимума,
	|	СУММА(ЕСТЬNULL(СтоимостьВА_НУ.СписаниеБалансаВыбывших, 0)) КАК СписаниеБалансаВыбывших,
	|	СУММА(ЕСТЬNULL(СтоимостьВА_НУ.УвеличениеСтоимостиЗаСчетРемонта, 0)) КАК УвеличениеСтоимостиЗаСчетРемонта,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ФиксированныеАктивыПринятыеКУчетуЗаПериод.ФиксированныйАктив ЕСТЬ NULL
	|					И ЕСТЬNULL(СтоимостьВА_НУ.Поступление, 0) = 0
	|				ТОГДА ЕСТЬNULL(СтоимостьВА_НУ.НачальныйОстаток, 0)
	|			ИНАЧЕ ЕСТЬNULL(СтоимостьВА_НУ.Поступление, 0)
	|		КОНЕЦ) КАК Поступление
	|ПОМЕСТИТЬ ВТ_СтоимостьВА
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтоимостьВА_НУ.Организация КАК Организация,
	|		СтоимостьВА_НУ.Субконто1 КАК Субконто1,
	|		МАКСИМУМ(ЕСТЬNULL(СтоимостьВА_НУ.СуммаНачальныйОстатокДт, 0)) КАК НачальныйОстаток,
	|		МАКСИМУМ(ЕСТЬNULL(СтоимостьВА_НУ.СуммаКонечныйОстатокДт, 0)) КАК КонечныйОстаток,
	|		0 КАК Выбытие,
	|		0 КАК АмортизацияУчетная,
	|		0 КАК СписаниеБалансаМененееМинимума,
	|		0 КАК СписаниеБалансаВыбывших,
	|		0 КАК УвеличениеСтоимостиЗаСчетРемонта,
	|		0 КАК Поступление
	|	ИЗ
	|		РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(
	|				&ДатаНачала,
	|				&ДатаОкончания,
	|				,
	|				,
	|				Счет В ИЕРАРХИИ (&СчетУчетаВА),
	|				,
	|				Организация В (&СписокОрганизаций)
	|					И ВидУчета = &ВидУчетаНУ) КАК СтоимостьВА_НУ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СтоимостьВА_НУ.Организация,
	|		СтоимостьВА_НУ.Субконто1
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СтоимостьВА_НУ_Движения.Организация,
	|		СтоимостьВА_НУ_Движения.Субконто1,
	|		0,
	|		0,
	|		СтоимостьВА_НУ_Движения.Выбытие,
	|		СтоимостьВА_НУ_Движения.АмортизацияУчетная,
	|		СтоимостьВА_НУ_Движения.СписаниеБалансаМененееМинимума,
	|		СтоимостьВА_НУ_Движения.СписаниеБалансаВыбывших,
	|		СтоимостьВА_НУ_Движения.УвеличениеСтоимостиЗаСчетРемонта,
	|		СтоимостьВА_НУ_Движения.Поступление
	|	ИЗ
	|		(ВЫБРАТЬ
	|			СтоимостьВА_НУ.Организация КАК Организация,
	|			СтоимостьВА_НУ.Субконто1 КАК Субконто1,
	|			СУММА(ВЫБОР
	|					КОГДА СтоимостьВА_НУ.Субконто2 = &ДвижениеПоступления
	|						ТОГДА СтоимостьВА_НУ.СуммаОборотДт - СтоимостьВА_НУ.СуммаОборотКт
	|				КОНЕЦ) КАК Поступление,
	|			СУММА(ВЫБОР
	|					КОГДА СтоимостьВА_НУ.Субконто2 = &ДвижениеВыбытия
	|						ТОГДА СтоимостьВА_НУ.СуммаОборотКт - СтоимостьВА_НУ.СуммаОборотДт
	|				КОНЕЦ) КАК Выбытие,
	|			СУММА(ВЫБОР
	|					КОГДА СтоимостьВА_НУ.Субконто2 = &ДвижениеАмортизации
	|						ТОГДА СтоимостьВА_НУ.СуммаОборотКт
	|				КОНЕЦ) КАК АмортизацияУчетная,
	|			СУММА(ВЫБОР
	|					КОГДА СтоимостьВА_НУ.Субконто2 = &ДвижениеСписаниеБалансаМенееМинимума
	|						ТОГДА СтоимостьВА_НУ.СуммаОборотКт
	|				КОНЕЦ) КАК СписаниеБалансаМененееМинимума,
	|			СУММА(ВЫБОР
	|					КОГДА СтоимостьВА_НУ.Субконто2 = &ДвижениеСписаниеБалансаВыбывших
	|						ТОГДА СтоимостьВА_НУ.СуммаОборотКт
	|				КОНЕЦ) КАК СписаниеБалансаВыбывших,
	|			СУММА(ВЫБОР
	|					КОГДА СтоимостьВА_НУ.Субконто2 = &ДвижениеУвеличениеСтоимостиЗаСчетРемонта
	|						ТОГДА СтоимостьВА_НУ.СуммаОборотДт
	|				КОНЕЦ) КАК УвеличениеСтоимостиЗаСчетРемонта
	|		ИЗ
	|			РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(
	|					&ДатаНачала,
	|					&ДатаОкончания,
	|					,
	|					,
	|					Счет В ИЕРАРХИИ (&СчетУчетаВА),
	|					,
	|					Организация В (&СписокОрганизаций)
	|						И ВидУчета = &ВидУчетаНУ) КАК СтоимостьВА_НУ
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СтоимостьВА_НУ.Организация,
	|			СтоимостьВА_НУ.Субконто1) КАК СтоимостьВА_НУ_Движения) КАК СтоимостьВА_НУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФиксированныеАктивыПринятыеКУчетуЗаПериод КАК ФиксированныеАктивыПринятыеКУчетуЗаПериод
	|		ПО СтоимостьВА_НУ.Организация = ФиксированныеАктивыПринятыеКУчетуЗаПериод.Организация
	|			И СтоимостьВА_НУ.Субконто1 = ФиксированныеАктивыПринятыеКУчетуЗаПериод.ФиксированныйАктив
	|
	|СГРУППИРОВАТЬ ПО
	|	СтоимостьВА_НУ.Организация,
	|	СтоимостьВА_НУ.Субконто1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтоимостьВА_НУ.Организация,
	|	СтоимостьВА_НУ.Субконто1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГруппыФА.ГруппаНУ КАК ГруппаНУ,
	|	ГруппыФА.НомерГруппы КАК НомерГруппы,
	|	ЕСТЬNULL(ГруппыФА.НачальныйОстаток, 0) КАК НачальныйОстаток,
	|	ЕСТЬNULL(ГруппыФА.Поступление, 0) КАК Поступление,
	|	ЕСТЬNULL(ГруппыФА.Выбытие, 0) КАК Выбытие,
	|	ЕСТЬNULL(ГруппыФА.КонечныйОстаток, 0) КАК КонечныйОстаток,
	|	ЕСТЬNULL(ГруппыФА.АмортизацияНачисленная, 0) КАК АмортизацияНачисленная,
	|	ЕСТЬNULL(ГруппыФА.АмортизацияРасчетная, 0) КАК АмортизацияРасчетная,
	|	ЕСТЬNULL(ГруппыФА.РасходыНаТекущийРемонт, 0) КАК РасходыНаТекущийРемонт,
	|	ЕСТЬNULL(ГруппыФА.РасходыНаКапитальныйРемонт, 0) КАК РасходыНаКапитальныйРемонт,
	|	ЕСТЬNULL(ГруппыФА.РасходыНаРемонтОтнНаВычеты, 0) КАК РасходыНаРемонтОтнНаВычеты,
	|	ЕСТЬNULL(ГруппыФА.УвеличениеСтоимостиЗаСчетРемонта, 0) КАК УвеличениеСтоимостиЗаСчетРемонта,
	|	ЕСТЬNULL(ГруппыФА.СписаниеБалансаМененееМинимума, 0) КАК СписаниеБалансаМененееМинимума,
	|	ЕСТЬNULL(ГруппыФА.СписаниеБалансаВыбывших, 0) КАК СписаниеБалансаВыбывших,
	|	ЕСТЬNULL(ГруппыФА.ИтоговаяСтоимость, 0) КАК ИтоговаяСтоимость,
	|	ЕСТЬNULL(ГруппыФА.ИтоговаяСтоимостьРасчетная, 0) КАК ИтоговаяСтоимостьРасчетная,
	|	ЕСТЬNULL(ПоследующиеПреференции.СуммаПсоледующихПреференций, 0) КАК СуммаПсоледующихПреференций
	|ИЗ
	|	(ВЫБРАТЬ
	|		ФАПоГруппам.ГруппаНУ КАК ГруппаНУ,
	|		ФАПоГруппам.ГруппаНУКод КАК НомерГруппы,
	|		СУММА(СтоимостьВА.НачальныйОстаток) КАК НачальныйОстаток,
	|		СУММА(СтоимостьВА.Поступление) КАК Поступление,
	|		СУММА(СтоимостьВА.Выбытие) КАК Выбытие,
	|		СУММА(ЕСТЬNULL(СтоимостьВА.НачальныйОстаток, 0) + ЕСТЬNULL(СтоимостьВА.Поступление, 0) - ЕСТЬNULL(СтоимостьВА.Выбытие, 0)) КАК КонечныйОстаток,
	|		СУММА(СтоимостьВА.АмортизацияНачисленная) КАК АмортизацияНачисленная,
	|		СУММА((ЕСТЬNULL(СтоимостьВА.НачальныйОстаток, 0) + ЕСТЬNULL(СтоимостьВА.Поступление, 0) - ЕСТЬNULL(СтоимостьВА.Выбытие, 0)) * ЕСТЬNULL(ФАПоГруппам.ПрименяемаяНормаАмортизации, 0) / 100) КАК АмортизацияРасчетная,
	|		СУММА(РасходыНаРемонт.РасходыНаТекущийРемонт) КАК РасходыНаТекущийРемонт,
	|		СУММА(РасходыНаРемонт.РасходыНаКапитальныйРемонт) КАК РасходыНаКапитальныйРемонт,
	|		СУММА(РасходыНаРемонт.РасходыНаРемонтОтнНаВычеты) КАК РасходыНаРемонтОтнНаВычеты,
	|		СУММА(СтоимостьВА.УвеличениеСтоимостиЗаСчетРемонта) КАК УвеличениеСтоимостиЗаСчетРемонта,
	|		СУММА(СтоимостьВА.СписаниеБалансаМененееМинимума) КАК СписаниеБалансаМененееМинимума,
	|		СУММА(СтоимостьВА.СписаниеБалансаВыбывших) КАК СписаниеБалансаВыбывших,
	|		СУММА(СтоимостьВА.КонечныйОстаток) КАК ИтоговаяСтоимость,
	|		СУММА(ЕСТЬNULL(СтоимостьВА.НачальныйОстаток, 0) + ЕСТЬNULL(СтоимостьВА.Поступление, 0) - ЕСТЬNULL(СтоимостьВА.Выбытие, 0) - (ЕСТЬNULL(СтоимостьВА.НачальныйОстаток, 0) + ЕСТЬNULL(СтоимостьВА.Поступление, 0) - ЕСТЬNULL(СтоимостьВА.Выбытие, 0)) * ЕСТЬNULL(ФАПоГруппам.ПрименяемаяНормаАмортизации, 0) / 100 + ЕСТЬNULL(СтоимостьВА.УвеличениеСтоимостиЗаСчетРемонта, 0) - ЕСТЬNULL(СтоимостьВА.СписаниеБалансаМененееМинимума, 0) - ЕСТЬNULL(СтоимостьВА.СписаниеБалансаВыбывших, 0)) КАК ИтоговаяСтоимостьРасчетная
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ФАПоГруппам.ФиксированныйАктив КАК ФиксированныйАктив,
	|			ФАПоГруппам.ГруппаНУ КАК ГруппаНУ,
	|			ФАПоГруппам.Организация КАК Организация,
	|			ФАПоГруппам.ПрименяемаяНормаАмортизации КАК ПрименяемаяНормаАмортизации,
	|			ФАПоГруппам.ГруппаНУКод КАК ГруппаНУКод
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ФиксированныеАктивыПоГруппам.ФиксированныйАктив КАК ФиксированныйАктив,
	|				ФиксированныеАктивыПоГруппам.ГруппаНУ КАК ГруппаНУ,
	|				ФиксированныеАктивыПоГруппам.Организация КАК Организация,
	|				ДанныеПоГруппамФА.ПрименяемаяНормаАмортизации КАК ПрименяемаяНормаАмортизации,
	|				ФиксированныеАктивыПоГруппам.ГруппаНУКод КАК ГруппаНУКод
	|			ИЗ
	|				(ВЫБРАТЬ
	|					МИНИМУМ(ФиксированныеАктивыПоГруппам.Приоритет) КАК Приоритет,
	|					ФиксированныеАктивыПоГруппам.ГруппаНУ КАК ГруппаНУ,
	|					ФиксированныеАктивыПоГруппам.Организация КАК Организация,
	|					ФиксированныеАктивыПоГруппам.ФиксированныйАктив КАК ФиксированныйАктив,
	|					ФиксированныеАктивыПоГруппам.ГруппаНУКод КАК ГруппаНУКод
	|				ИЗ
	|					ФиксированныеАктивыИСведения КАК ФиксированныеАктивыПоГруппам
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ФиксированныеАктивыПоГруппам.Организация,
	|					ФиксированныеАктивыПоГруппам.ГруппаНУ,
	|					ФиксированныеАктивыПоГруппам.ФиксированныйАктив,
	|					ФиксированныеАктивыПоГруппам.ГруппаНУКод) КАК ФиксированныеАктивыПоГруппам
	|					ЛЕВОЕ СОЕДИНЕНИЕ ФиксированныеАктивыИСведения КАК ДанныеПоГруппамФА
	|					ПО ФиксированныеАктивыПоГруппам.Приоритет = ДанныеПоГруппамФА.Приоритет
	|						И ФиксированныеАктивыПоГруппам.ФиксированныйАктив = ДанныеПоГруппамФА.ФиксированныйАктив
	|						И ФиксированныеАктивыПоГруппам.Организация = ДанныеПоГруппамФА.Организация
	|					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|						ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив КАК ФиксированныйАктив,
	|						ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Организация КАК Организация
	|					ИЗ
	|						РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(&ДатаОкончания, Организация В (&СписокОрганизаций)) КАК ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних
	|					ГДЕ
	|						ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Событие = &УчитываетсяОтдельноОтСтоимостногоБаланса) КАК ФАУчитываемыеОтдельно
	|					ПО ФиксированныеАктивыПоГруппам.Организация = ФАУчитываемыеОтдельно.Организация
	|						И ФиксированныеАктивыПоГруппам.ФиксированныйАктив = ФАУчитываемыеОтдельно.ФиксированныйАктив
	|			ГДЕ
	|				ФАУчитываемыеОтдельно.ФиксированныйАктив ЕСТЬ NULL) КАК ФАПоГруппам
	|		ГДЕ
	|			ФАПоГруппам.Организация В(&СписокОрганизаций)) КАК ФАПоГруппам
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьВА КАК СтоимостьВА
	|			ПО ФАПоГруппам.Организация = СтоимостьВА.Организация
	|				И ФАПоГруппам.ФиксированныйАктив = СтоимостьВА.Субконто1
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ЗатратыНаРемонтВА_НУ.Субконто1 КАК Субконто1,
	|				ЗатратыНаРемонтВА_НУ.Организация КАК Организация,
	|				СУММА(ВЫБОР
	|						КОГДА ЗатратыНаРемонтВА_НУ.Субконто2 = &ВидРемонтаВА_Текущий
	|							ТОГДА ЗатратыНаРемонтВА_НУ.СуммаОборотДт
	|						ИНАЧЕ 0
	|					КОНЕЦ) КАК РасходыНаТекущийРемонт,
	|				СУММА(ВЫБОР
	|						КОГДА ЗатратыНаРемонтВА_НУ.Субконто2 = &ВидРемонтаВА_Капитальный
	|							ТОГДА ЗатратыНаРемонтВА_НУ.СуммаОборотДт
	|						ИНАЧЕ 0
	|					КОНЕЦ) КАК РасходыНаКапитальныйРемонт,
	|				СУММА(ВЫБОР
	|						КОГДА ЗатратыНаРемонтВА_НУ.Субконто2 = &ВидРемонтаВА_Капитальный
	|							ТОГДА ЗатратыНаРемонтВА_НУ.СуммаОборотДт - ЗатратыНаРемонтВА_НУ.СуммаОборотКт
	|						ИНАЧЕ 0
	|					КОНЕЦ) КАК РасходыНаРемонтОтнНаВычеты
	|			ИЗ
	|				РегистрБухгалтерии.Налоговый.Обороты(
	|						&ДатаНачала,
	|						&ДатаОкончания,
	|						,
	|						Счет В ИЕРАРХИИ (&СчетРемонтаВА),
	|						&СписокСубконтоСчетаРемонта,
	|						Организация В (&СписокОрганизаций)
	|							И ВидУчета = &ВидУчетаНУ,
	|						,
	|						) КАК ЗатратыНаРемонтВА_НУ
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ЗатратыНаРемонтВА_НУ.Субконто1,
	|				ЗатратыНаРемонтВА_НУ.Организация) КАК РасходыНаРемонт
	|			ПО ФАПоГруппам.Организация = РасходыНаРемонт.Организация
	|				И ФАПоГруппам.ФиксированныйАктив = РасходыНаРемонт.Субконто1
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ФАПоГруппам.ГруппаНУ,
	|		ФАПоГруппам.ГруппаНУКод) КАК ГруппыФА
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(НалоговыйОбороты.СуммаОборот) КАК СуммаПсоледующихПреференций,
	|			НалоговыйОбороты.Организация КАК Организация,
	|			ФиксированныеАктивыИСведения.ГруппаНУ КАК ГруппаНУ
	|		ИЗ
	|			ФиксированныеАктивыИСведения КАК ФиксированныеАктивыИСведения
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Обороты(
	|						&ДатаНачала,
	|						&ДатаОкончания,
	|						,
	|						Счет = &Счет7900Н,
	|						,
	|						Организация В (&СписокОрганизаций)
	|							И ВидУчета = &ВидУчетаНУ,
	|						НЕ КорСчет В ИЕРАРХИИ (&Счет000),
	|						) КАК НалоговыйОбороты
	|				ПО ФиксированныеАктивыИСведения.ФиксированныйАктив = НалоговыйОбороты.Субконто2
	|					И ФиксированныеАктивыИСведения.Организация = НалоговыйОбороты.Организация
	|		ГДЕ
	|			НалоговыйОбороты.Субконто3 = ЗНАЧЕНИЕ(Перечисление.ВидыРемонтаВА.Преференции)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НалоговыйОбороты.Организация,
	|			ФиксированныеАктивыИСведения.ГруппаНУ) КАК ПоследующиеПреференции
	|		ПО ГруппыФА.ГруппаНУ = ПоследующиеПреференции.ГруппаНУ";
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() И ВыдаватьСообщения Тогда
		
		ТекстСообщения = НСтр("ru = 'Данные для для Приложения 100.02 за отчетный период отсутствуют...'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;	
	
	ТаблицаРезультата = Результат.Выгрузить();
	
	Возврат ТаблицаРезультата;
	
КонецФункции // Форма100_02РассчитатьДанныеФормы()

&НаСервере
Функция Форма100_02ДвойнаяАмортизацияРассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	
	Запрос =  Новый Запрос;
	
	СостоянияФА = Новый СписокЗначений();	
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.ПринятКУчету);
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.Выбыл);
	
	Запрос.УстановитьПараметр("ДатаНачала", 				СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаОкончания", 				СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаОкончания1ГодНазад", 	ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
	Запрос.УстановитьПараметр("ДатаОкончания2ГодаНазад", 	ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-24));
	Запрос.УстановитьПараметр("ПустаяГруппаНУ",				Справочники.ГруппыНалоговогоУчетаФА.ПустаяСсылка());	
	Запрос.УстановитьПараметр("ПустаяОрганизация",			Справочники.Организации.ПустаяСсылка());	
	Запрос.УстановитьПараметр("СписокОрганизаций", 			мСписокСтруктурныхЕдиниц);
	
	Запрос.УстановитьПараметр("УчетПоОбъектам",				Перечисления.ВидыНалоговогоУчетаВГруппахФА.ПоОбъектам);
	Запрос.УстановитьПараметр("СостоянияФА", 				СостоянияФА);
	Запрос.УстановитьПараметр("СчетУчетаВА",				ПланыСчетов.Налоговый.ВнеоборотныеАктивы);		//Счет Н300
	Запрос.УстановитьПараметр("ВключенВСоставГруппы",		Перечисления.СобытияФАУчитываемыхОтдельно.ВключениеВСоставГруппы);	    
	Запрос.УстановитьПараметр("Выбыл",						Перечисления.ВидыСостоянийФА.Выбыл);
	Запрос.УстановитьПараметр("ПринятКУчету",				Перечисления.ВидыСостоянийФА.ПринятКУчету);
	Запрос.УстановитьПараметр("ВидУчетаНУ",					Справочники.ВидыУчетаНУ.НУ);
	
	Запрос.УстановитьПараметр("ДвижениеПоступления", 		Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
	Запрос.УстановитьПараметр("ДвижениеВыбытия", 			Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
	Запрос.УстановитьПараметр("ДвижениеАмортизации", 		Перечисления.ВидыДвиженияСтоимостиФА.Амортизация);
	
	ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = СведенияОГруппахФиксированныхАктивовСрезПоследних.ФиксированныйАктив
	|				И СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = ОбъектыНалоговогоУчетаФА.Организация
	|			ТОГДА 1
	|		КОГДА СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = ОбъектыНалоговогоУчетаФА.Организация
	|			ТОГДА 2
	|		КОГДА СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = &ПустаяОрганизация
	|				И ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = СведенияОГруппахФиксированныхАктивовСрезПоследних.ФиксированныйАктив
	|			ТОГДА 3
	|		КОГДА СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = &ПустаяОрганизация
	|			ТОГДА 4
	|		ИНАЧЕ 5
	|	КОНЕЦ КАК Приоритет,
	|	ОбъектыНалоговогоУчетаФА.ГруппаНУ КАК ГруппаНУ,
	|	ОбъектыНалоговогоУчетаФА.Организация КАК Организация,
	|	ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК ФиксированныйАктив,
	|	СведенияОГруппахФиксированныхАктивовСрезПоследних.ПредельнаяНормаАмортизации КАК ПредельнаяНормаАмортизации,
	|	СведенияОГруппахФиксированныхАктивовСрезПоследних.ПрименяемаяНормаАмортизации КАК ПрименяемаяНормаАмортизации,
	|	СведенияОГруппахФиксированныхАктивовСрезПоследних.ВычетНаРемонт КАК ВычетНаРемонт
	|ПОМЕСТИТЬ ФиксированныеАктивыИСведения
	|ИЗ
	|	РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	|			&ДатаОкончания,
	|			СостояниеФиксированногоАктива В (&СостоянияФА)
	|				И Организация В (&СписокОрганизаций)) КАК ОбъектыНалоговогоУчетаФА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОГруппахФиксированныхАктивов.СрезПоследних(
	|				&ДатаОкончания,
	|				Организация В (&СписокОрганизаций)
	|					ИЛИ Организация = &ПустаяОрганизация) КАК СведенияОГруппахФиксированныхАктивовСрезПоследних
	|		ПО (ОбъектыНалоговогоУчетаФА.Организация = СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация
	|				ИЛИ СведенияОГруппахФиксированныхАктивовСрезПоследних.Организация = &ПустаяОрганизация)
	|			И (ОбъектыНалоговогоУчетаФА.ГруппаНУ = СведенияОГруппахФиксированныхАктивовСрезПоследних.ГруппаФА
	|					И СведенияОГруппахФиксированныхАктивовСрезПоследних.ФиксированныйАктив = НЕОПРЕДЕЛЕНО
	|				ИЛИ СведенияОГруппахФиксированныхАктивовСрезПоследних.ГруппаФА.ВидУчетаВГруппеФА = &УчетПоОБъектам
	|					И ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = СведенияОГруппахФиксированныхАктивовСрезПоследних.ФиксированныйАктив)
	|ГДЕ
	|	ОбъектыНалоговогоУчетаФА.ГруппаНУ <> &ПустаяГруппаНУ
	|	И ОбъектыНалоговогоУчетаФА.ПорядокПогашенияСтоимостиНУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиФА.ПреференцияЕдиновременноеОтнесениеНаВычеты)
	|	И ОбъектыНалоговогоУчетаФА.ПорядокПогашенияСтоимостиНУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиФА.ПреференцияОтнесениеНаВычетыРавнымиДолями)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФАПоГруппам.ГруппаНУ.Код КАК НомерГруппы,
	|	ЕСТЬNULL(СтоимостьВА.АмортизацияНачисленная, 0)КАК АмортизацияНачисленная,
	|	ЕСТЬNULL(СтоимостьВА.Поступление, 0) * ЕСТЬNULL(ФАПоГруппам.ПрименяемаяНормаАмортизации, 0) * 2 / 100 КАК АмортизацияРасчетная,
	|	ВЫБОР
	|		КОГДА ФАПоГруппам.Событие = &ВключенВСоставГруппы
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВыводитьДанные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ФиксированныеАктивыПоГруппам.ФиксированныйАктив КАК ФиксированныйАктив,
	|		ФиксированныеАктивыПоГруппам.ГруппаНУ КАК ГруппаНУ,
	|		ФиксированныеАктивыПоГруппам.Организация КАК Организация,
	|		ДанныеПоГруппамФА.ПредельнаяНормаАмортизации КАК ПредельнаяНормаАмортизации,
	|		ДанныеПоГруппамФА.ПрименяемаяНормаАмортизации КАК ПрименяемаяНормаАмортизации,
	|		ФАУчитываемыеОтдельно.Событие КАК Событие,
	|		Принятие.Период КАК ДатаВвода,
	|		Выбытие.Период КАК ДатаВыбытия
	|	ИЗ
	|		(ВЫБРАТЬ
	|			МИНИМУМ(ФиксированныеАктивыПоГруппам.Приоритет) КАК Приоритет,
	|			ФиксированныеАктивыПоГруппам.ГруппаНУ КАК ГруппаНУ,
	|			ФиксированныеАктивыПоГруппам.Организация КАК Организация,
	|			ФиксированныеАктивыПоГруппам.ФиксированныйАктив КАК ФиксированныйАктив
	|		ИЗ
	|			ФиксированныеАктивыИСведения КАК ФиксированныеАктивыПоГруппам
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ФиксированныеАктивыПоГруппам.Организация,
	|			ФиксированныеАктивыПоГруппам.ГруппаНУ,
	|			ФиксированныеАктивыПоГруппам.ФиксированныйАктив) КАК ФиксированныеАктивыПоГруппам
	|			ЛЕВОЕ СОЕДИНЕНИЕ ФиксированныеАктивыИСведения КАК ДанныеПоГруппамФА
	|			ПО ФиксированныеАктивыПоГруппам.Приоритет = ДанныеПоГруппамФА.Приоритет
	|				И ФиксированныеАктивыПоГруппам.ФиксированныйАктив = ДанныеПоГруппамФА.ФиксированныйАктив
	|				И ФиксированныеАктивыПоГруппам.Организация = ДанныеПоГруппамФА.Организация
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ФАУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив КАК ФиксированныйАктив,
	|				ФАУчитываемыеОтдельноСрезПоследних.Организация КАК Организация,
	|				ФАУчитываемыеОтдельноСрезПоследних.Событие КАК Событие
	|			ИЗ
	|				(ВЫБРАТЬ
	|					ФАИтог.ФиксированныйАктив КАК ФиксированныйАктив
	|				ИЗ
	|					(ВЫБРАТЬ
	|						ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив КАК ФиксированныйАктив
	|					ИЗ
	|						РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(&ДатаОкончания2ГодаНазад, Организация В (&СписокОрганизаций)) КАК ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних
	|					ГДЕ
	|						ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Событие <> &ВключенВСоставГруппы
	|					
	|					ОБЪЕДИНИТЬ ВСЕ
	|					
	|					ВЫБРАТЬ
	|						ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив
	|					ИЗ
	|						РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(&ДатаОкончания1ГодНазад, Организация В (&СписокОрганизаций)) КАК ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних
	|					ГДЕ
	|						ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Событие <> &ВключенВСоставГруппы
	|					
	|					ОБЪЕДИНИТЬ ВСЕ
	|					
	|					ВЫБРАТЬ
	|						ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив
	|					ИЗ
	|						РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(&ДатаОкончания, Организация В (&СписокОрганизаций)) КАК ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних
	|					ГДЕ
	|						ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Событие <> &ВключенВСоставГруппы) КАК ФАИтог
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ФАИтог.ФиксированныйАктив) КАК ФАОбщие
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(&ДатаОкончания, Организация В (&СписокОрганизаций)) КАК ФАУчитываемыеОтдельноСрезПоследних
	|					ПО (ФАУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив = ФАОбщие.ФиксированныйАктив)) КАК ФАУчитываемыеОтдельно
	|			ПО ФиксированныеАктивыПоГруппам.Организация = ФАУчитываемыеОтдельно.Организация
	|				И ФиксированныеАктивыПоГруппам.ФиксированныйАктив = ФАУчитываемыеОтдельно.ФиксированныйАктив
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	|					&ДатаОкончания,
	|					Организация В (&СписокОрганизаций)
	|						И СостояниеФиксированногоАктива = &ПринятКУчету) КАК Принятие
	|			ПО ФиксированныеАктивыПоГруппам.ФиксированныйАктив = Принятие.ФиксированныйАктив
	|				И ФиксированныеАктивыПоГруппам.Организация = Принятие.Организация
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	|					&ДатаОкончания,
	|					Организация В (&СписокОрганизаций)
	|						И СостояниеФиксированногоАктива = &Выбыл) КАК Выбытие
	|			ПО ФиксированныеАктивыПоГруппам.ФиксированныйАктив = Выбытие.ФиксированныйАктив
	|				И ФиксированныеАктивыПоГруппам.Организация = Выбытие.Организация
	|	ГДЕ
	|		(НЕ ФАУчитываемыеОтдельно.ФиксированныйАктив ЕСТЬ NULL )) КАК ФАПоГруппам
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СтоимостьВА_НУ.Организация КАК Организация,
	|			СтоимостьВА_НУ.Субконто1 КАК Субконто1,
	|			СУММА(ЕСТЬNULL(СтоимостьВА_НУ.НачальныйОстаток, 0)) КАК НачальныйОстаток,
	|			СУММА(ЕСТЬNULL(СтоимостьВА_НУ.КонечныйОстаток, 0)) КАК КонечныйОстаток,
	|			СУММА(ЕСТЬNULL(СтоимостьВА_НУ.Выбытие, 0)) КАК Выбытие,
	|			СУММА(ЕСТЬNULL(СтоимостьВА_НУ.АмортизацияУчетная, 0)) КАК АмортизацияНачисленная,
	|			СУММА(ЕСТЬNULL(СтоимостьВА_НУ.Поступление, 0)) КАК Поступление
	|		ИЗ
	|			(ВЫБРАТЬ
	|				СтоимостьВА_НУ.Организация КАК Организация,
	|				СтоимостьВА_НУ.Субконто1 КАК Субконто1,
	|				МАКСИМУМ(ЕСТЬNULL(СтоимостьВА_НУ.СуммаНачальныйОстатокДт, 0)) КАК НачальныйОстаток,
	|				МАКСИМУМ(ЕСТЬNULL(СтоимостьВА_НУ.СуммаКонечныйОстатокДт, 0)) КАК КонечныйОстаток,
	|				0 КАК Выбытие,
	|				0 КАК АмортизацияУчетная,
	|				0 КАК Поступление
	|			ИЗ
	|				РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(
	|						&ДатаНачала,
	|						&ДатаОкончания,
	|						,
	|						,
	|						Счет В ИЕРАРХИИ (&СчетУчетаВА),
	|						,
	|						Организация В (&СписокОрганизаций)
	|							И ВидУчета = &ВидУчетаНУ) КАК СтоимостьВА_НУ
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СтоимостьВА_НУ.Организация,
	|				СтоимостьВА_НУ.Субконто1
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				СтоимостьВА_НУ_Движения.Организация,
	|				СтоимостьВА_НУ_Движения.Субконто1,
	|				0,
	|				0,
	|				СтоимостьВА_НУ_Движения.Выбытие,
	|				СтоимостьВА_НУ_Движения.АмортизацияУчетная,
	|				СтоимостьВА_НУ_Движения.Поступление
	|			ИЗ
	|				(ВЫБРАТЬ
	|					СтоимостьВА_НУ.Организация КАК Организация,
	|					СтоимостьВА_НУ.Субконто1 КАК Субконто1,
	|					СУММА(ВЫБОР
	|							КОГДА СтоимостьВА_НУ.Субконто2 = &ДвижениеПоступления
	|								ТОГДА СтоимостьВА_НУ.СуммаОборотДт - СтоимостьВА_НУ.СуммаОборотКт
	|						КОНЕЦ) КАК Поступление,
	|					СУММА(ВЫБОР
	|							КОГДА СтоимостьВА_НУ.Субконто2 = &ДвижениеВыбытия
	|								ТОГДА СтоимостьВА_НУ.СуммаОборотКт - СтоимостьВА_НУ.СуммаОборотДт
	|						КОНЕЦ) КАК Выбытие,
	|					СУММА(ВЫБОР
	|							КОГДА СтоимостьВА_НУ.Субконто2 = &ДвижениеАмортизации
	|								ТОГДА СтоимостьВА_НУ.СуммаОборотКт
	|						КОНЕЦ) КАК АмортизацияУчетная
	|				ИЗ
	|					РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(
	|							&ДатаНачала,
	|							&ДатаОкончания,
	|							,
	|							,
	|							Счет В ИЕРАРХИИ (&СчетУчетаВА),
	|							,
	|							Организация В (&СписокОрганизаций)
	|								И ВидУчета = &ВидУчетаНУ) КАК СтоимостьВА_НУ
	|				
	|				СГРУППИРОВАТЬ ПО
	|					СтоимостьВА_НУ.Организация,
	|					СтоимостьВА_НУ.Субконто1) КАК СтоимостьВА_НУ_Движения) КАК СтоимостьВА_НУ
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СтоимостьВА_НУ.Организация,
	|			СтоимостьВА_НУ.Субконто1) КАК СтоимостьВА
	|		ПО ФАПоГруппам.Организация = СтоимостьВА.Организация
	|			И ФАПоГруппам.ФиксированныйАктив = СтоимостьВА.Субконто1";
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() И ВыдаватьСообщения Тогда
	КонецЕсли;	
	
	ТаблицаРезультата = Результат.Выгрузить();
	
	Возврат ТаблицаРезультата;		 
	
КонецФункции // Форма100_02РассчитатьДанныеФормы()

&НаСервере
Процедура Форма100_02ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь) 
	
	ТекИмяФормы = "Форма100_02";
	Очистить(ТекИмяФормы, Истина);
	
	ТаблицаДанныхФорма100_02 = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);
	
	ТаблицаОтчета = Форма100_02РассчитатьДанныеФормы(Истина);
	
	ДоходОтВыбытияФА = 0;
	Для Каждого Строка Из ТаблицаОтчета Цикл
		Попытка
			Если СокрЛП(Строка.НомерГруппы) = "I" Тогда
				Номер = 1;
			ИначеЕсли СокрЛП(Строка.НомерГруппы) = "II" Тогда
				Номер = 2;
			ИначеЕсли СокрЛП(Строка.НомерГруппы) = "III" Тогда
				Номер = 3;
			ИначеЕсли СокрЛП(Строка.НомерГруппы) = "IV" Тогда
				Номер = 4;
			Иначе
				Номер = Число(Строка.НомерГруппы);
			КонецЕсли;
		Исключение
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не правильно указан код для группы ФА %1 в справочнике ""Группы налогового учета ФА"".
			|Код для группы может быть указан как римскими цифрами например ""I"",""II"",""III"",""IV"" либо арабскими ""1"",""2"",""3"",""4"".
			|Расчет приложения 100.02 не произведен'"), СокрЛП(Строка.НомерГруппы));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 	
			Возврат;		 
		КонецПопытки;
		
		// Проверим, что преобразованный номер входит в наш диапазон
		Если Номер < 1 Или Номер > 4 Тогда 
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не правильно указан код для группы ФА %1 в справочнике ""Группы налогового учета ФА"".
			|Код для группы может быть указан как римскими цифрами например ""I"",""II"",""III"",""IV"" либо арабскими ""1"",""2"",""3"",""4"".
			|Расчет приложения 100.02 не произведен'"),  СокрЛП(Строка.НомерГруппы));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 	
			
			Возврат;
			
		КонецЕсли;
		
		НачальныйОстаток = Окр(Строка.НачальныйОстаток);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "s_100_02_001_" + Номер, НачальныйОстаток, Истина);			
		ЗначениеПоступления = Окр(Строка.Поступление);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "s_100_02_002_" + Номер, ЗначениеПоступления, Истина);			
		ЗначениеВыбытие = Окр(Строка.Выбытие);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "s_100_02_003_" + Номер, ЗначениеВыбытие, Истина);
		УвеличениеСтоимостиЗаСчетРемонта = Окр(Строка.УвеличениеСтоимостиЗаСчетРемонта);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "s_100_02_004_" + Номер, УвеличениеСтоимостиЗаСчетРемонта, Истина);	
		ЗначениеАмортизация = Окр(Строка.АмортизацияНачисленная);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "s_100_02_006_" + Номер, ЗначениеАмортизация, Истина);			
		
		ЗначениеСписаниеБалансаВыбывших = Окр(Строка.СписаниеБалансаВыбывших);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "s_100_02_008_" + Номер, ЗначениеСписаниеБалансаВыбывших, Истина);
		ЗначениеСписаниеБалансаМененееМинимума = Окр(Строка.СписаниеБалансаМененееМинимума);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "s_100_02_009_" + Номер, ЗначениеСписаниеБалансаМененееМинимума, Истина);
		ЗначениеРасходыНаТекущийРемонт = Окр(Строка.РасходыНаТекущийРемонт);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "s_100_02_010_" + Номер, ЗначениеРасходыНаТекущийРемонт, Истина);
		
		КонечныйОстаток = ?(Строка.КонечныйОстаток <> Null,Строка.КонечныйОстаток,0);
		
		Если КонечныйОстаток < 0 Тогда 
			КонечныйОстаток  = - КонечныйОстаток;
			ДоходОтВыбытияФА = Окр(ДоходОтВыбытияФА + КонечныйОстаток);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаОтчета = Форма100_02ДвойнаяАмортизацияРассчитатьДанныеФормы(Истина);
	ЗначенияЯчеек = Новый Массив(4);
	
	Для Каждого Строка Из ТаблицаОтчета Цикл
		Номер = 0;
		Попытка
			Если СокрЛП(Строка.НомерГруппы) = "I" Тогда
				Номер = 1;
			ИначеЕсли СокрЛП(Строка.НомерГруппы) = "II" Тогда
				Номер = 2;
			ИначеЕсли СокрЛП(Строка.НомерГруппы) = "III" Тогда
				Номер = 3;
			ИначеЕсли СокрЛП(Строка.НомерГруппы) = "IV" Тогда
				Номер = 4;
			Иначе
				Номер = Число(Строка.НомерГруппы);
			КонецЕсли;
		Исключение
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не правильно указан кода для группы ФА %1 в справочнике ""Группы налогового учета ФА"".
			|Код для группы может быть указан как римскими цифрами например ""I"",""II"",""III"",""IV"" либо арабскими ""1"",""2"",""3"",""4"".
			|Расчет приложения 100.02 не произведен'"), СокрЛП(Строка.НомерГруппы));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 	
			
			Возврат;		 
		КонецПопытки;
		
		// Проверим, что преобразованный номер входит в аш диапазон
		Если Номер < 1 Или Номер > 4 Тогда 
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не правильно указан кода для группы ФА %1 в справочнике ""Группы налогового учета ФА"".
			|Код для группы может быть указан как римскими цифрами например ""I"",""II"",""III"",""IV"" либо арабскими ""1"",""2"",""3"",""4"".
			|Расчет приложения 100.02 не произведен'"), СокрЛП(Строка.НомерГруппы));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 	 
			
			Возврат;	
		КонецЕсли;
		
		
		Если Строка.ВыводитьДанные Тогда 
			
			ПредЗначение = ЗначенияЯчеек.Получить(Номер - 1); 
			
			Если ПредЗначение = Неопределено Тогда 
				ПредЗначение = 0;
			КонецЕсли;
			
			ЗначениеАмортизацияНачисленная = 0;
			
			ЗначениеАмортизацияНачисленная = ПредЗначение + Строка.АмортизацияНачисленная;
			ЗначенияЯчеек.Установить(Номер - 1, ЗначениеАмортизацияНачисленная);
			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "s_100_02_007_" + Номер, Окр(ЗначениеАмортизацияНачисленная), Истина);					
			
		Иначе 
			ЗначениеАмортизацияНачисленная = 0;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, ТекИмяФормы, Ложь);
	
КонецПроцедуры // Форма100_02ЗаполнитьАвто()

&НаСервере
Процедура Форма100_02РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки, ТекИмяФормы, Изменено = Истина)
	
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, ИмяЯчейки, ЗначениеЯчейки);					
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);	
	
	//+
	//Рассчитаем итоговые ячейки
	
	Для Н = 1 По 10 Цикл
		Если Н = 5 Тогда
			Продолжить;
		КонецЕсли;
		Если Изменено Тогда
			Если Н >= 1 И Н <= 5 Тогда
				НомерСтраницы = "1";
			ИначеЕсли Н >= 5 И Н <= 10 Тогда
				НомерСтраницы = "2";
							Иначе
			КонецЕсли;
		КонецЕсли;
		Номер = Формат(Н,"ЧЦ=2; ЧДЦ=0; ЧВН=");
		// Итоговая строка
		ИтогЗначение = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_02_0" + Номер + "_1")
			+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_02_0" + Номер + "_2")
			+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_02_0" + Номер + "_3")
			+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_02_0" + Номер + "_4");
		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_02_0" + Номер, Окр(ИтогЗначение), ?(Изменено, ЭтотОбъект["Форма100_02ПолеТабличногоДокументаСтраница" + НомерСтраницы], Неопределено));
	КонецЦикла;      
	
	//Расчитываем ячейки s_100_02_005_X
	ИтогЗначение = 0 ;
	Для Н = 1 По 4 Цикл
		ИтогЗначение = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_02_001" + "_" + Н)
			+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_02_002" + "_" + Н)
			- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_02_003" + "_" + Н)
			+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_02_004" + "_" + Н);
		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_02_005"+ "_" + Н, Окр(ИтогЗначение), ?(Изменено, ЭтотОбъект["Форма100_02ПолеТабличногоДокументаСтраница1"], Неопределено));
	КонецЦикла;
	
	//Расчитываем ячейки s_100_02_005
	ИтогЗначение = 0 ;
	Для Н = 1 По 4 Цикл
		ИмяГрафы = "s_100_02_005_" + Н;
		ИтогЗначение = ИтогЗначение + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяГрафы); 
	КонецЦикла;
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_02_005", Окр(ИтогЗначение), ?(Изменено, ЭтотОбъект["Форма100_02ПолеТабличногоДокументаСтраница1"], Неопределено));
	
	//Расчитываем ячейки s_100_02_011_1
	ИтогЗначение = 0 ;
	Н = 1;
	ИтогЗначение = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_02_006" + "_" + Н)
		+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_02_007" + "_" + Н)
		+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_02_009" + "_" + Н)
		+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_02_010" + "_" + Н);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_02_011" + "_" + Н, Окр(ИтогЗначение), ?(Изменено, ЭтотОбъект["Форма100_02ПолеТабличногоДокументаСтраница2"], Неопределено));
	
	//Расчитываем ячейки s_100_02_011_X
	ИтогЗначение = 0 ;
	Для Н = 2 По 4 Цикл
		ИтогЗначение = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_02_006" + "_" + Н)
			+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_02_007" + "_" + Н)
			+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_02_008" + "_" + Н)
			+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_02_009" + "_" + Н)
			+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_100_02_010" + "_" + Н);
		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_02_011" + "_" + Н, Окр(ИтогЗначение), ?(Изменено, ЭтотОбъект["Форма100_02ПолеТабличногоДокументаСтраница2"], Неопределено));
	КонецЦикла;
	
	//Расчитываем ячейки s_100_02_011
	ИтогЗначение = 0 ;
	Для Н = 1 По 4 Цикл
		ИмяГрафы = "s_100_02_011_" + Н;
		ИтогЗначение = ИтогЗначение + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяГрафы); 
	КонецЦикла;
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_02_011" , Окр(ИтогЗначение), ?(Изменено, ЭтотОбъект["Форма100_02ПолеТабличногоДокументаСтраница2"], Неопределено));		
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);
	
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ТекИмяФормы);
	
КонецПроцедуры   //Форма100_02Расчет()

///////////////////////////////////////////////////////////////
// Процедуры и функции для расчета(заполнения) формы 100.07

&НаКлиенте
Процедура Форма100_07ЗаполнитьАвто(Перезаполнить = Ложь) 
	
	Состояние("Расчет формы 100.07");		
	Форма100_07ЗаполнитьАвтоНаСервере(Перезаполнить);	
	Состояние("");	 
	
КонецПроцедуры // Форма100ЗаполнитьАвто()

&НаСервере
Функция Форма100_07РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	
	Запрос =  Новый Запрос;
	
	Запрос.УстановитьПараметр("НачПериода", 	   СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", 	   Новый Граница(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СписокОрганизаций", мСписокСтруктурныхЕдиниц);
	
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачОстатки.Счет,
	|	НачОстатки.СуммаОстаток КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&КонПериода, , , Организация В (&СписокОрганизаций)) КАК НачОстатки
	|ИТОГИ
	|	СУММА(Остаток)
	|ПО
	|	Счет ИЕРАРХИЯ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонОстатки.Счет,
	|	КонОстатки.СуммаОстаток КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&НачПериода, , , Организация В (&СписокОрганизаций)) КАК КонОстатки
	|ИТОГИ
	|	СУММА(Остаток)
	|ПО
	|	Счет ИЕРАРХИЯ";
	
	ТаблицыРезультата = Запрос.ВыполнитьПакет();
	
	Возврат ТаблицыРезультата;		 
	
КонецФункции // Форма100_02РассчитатьДанныеФормы()

&НаСервере
Процедура Форма100_07ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь) 
	
	ТекИмяФормы = "Форма100_07";
	Очистить(ТекИмяФормы, Истина);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);	
	
	// Инициализация
	ПС = ПланыСчетов["Типовой"];
	
	СчетаИПоляДляЗаполненияАктивы = Новый СписокЗначений;
	//Краткосрочные активы
	СчетаИПоляДляЗаполненияАктивы.Добавить(ПС.ДенежныеСредства					 , 		"s_100_07_001_");
	СчетаИПоляДляЗаполненияАктивы.Добавить(ПС.КраткосрочныеФинансовыеИнвестиции	 , 		"s_100_07_002_");
	СчетаИПоляДляЗаполненияАктивы.Добавить(ПС.КраткосрочнаяДебиторскаяЗадолженность, 	"s_100_07_003_");
	СчетаИПоляДляЗаполненияАктивы.Добавить(ПС.Запасы								 , 	"s_100_07_004_");
	СчетаИПоляДляЗаполненияАктивы.Добавить(ПС.ТекущиеНалоговыеАктивы				 , 	"s_100_07_005_");
	СчетаИПоляДляЗаполненияАктивы.Добавить(ПС.ДолгосрочныеАктивыДляПродажи_		 , 		"s_100_07_006_");
	СчетаИПоляДляЗаполненияАктивы.Добавить(ПС.ПрочиеКраткосрочныеАктивы_			 , 	"s_100_07_007_");
	//Долгосрочные активы
	СчетаИПоляДляЗаполненияАктивы.Добавить(ПС.ДолгосрочныеФинансовыеИнвестиции			, "s_100_07_008_");
	СчетаИПоляДляЗаполненияАктивы.Добавить(ПС.ДолгосрочнаяДебиторскаяЗадолженность		, "s_100_07_009_");
	СчетаИПоляДляЗаполненияАктивы.Добавить(ПС.ИнвестицииУчитываемыеМетодомДолевогоУчастия_, "s_100_07_010_");
	СчетаИПоляДляЗаполненияАктивы.Добавить(ПС.ИнвестицииВНедвижимость_					, "s_100_07_011_");
	СчетаИПоляДляЗаполненияАктивы.Добавить(ПС.ОсновныеСредства_							, "s_100_07_012_");
	СчетаИПоляДляЗаполненияАктивы.Добавить(ПС.БиологическиеАктивы						, "s_100_07_013_");
	СчетаИПоляДляЗаполненияАктивы.Добавить(ПС.РазведочныеИОценочныеАктивы_				, "s_100_07_014_");
	СчетаИПоляДляЗаполненияАктивы.Добавить(ПС.НематериальныеАктивы						, "s_100_07_015_");
	СчетаИПоляДляЗаполненияАктивы.Добавить(ПС.ОтложенныеНалоговыеАктивы					, "s_100_07_016_");
	СчетаИПоляДляЗаполненияАктивы.Добавить(ПС.ПрочиеДолгосрочныеАктивы_					, "s_100_07_017_");
	
	СчетаИПоляДляЗаполненияПассивы = Новый СписокЗначений;
	//Краткосрочные обязательства
	СчетаИПоляДляЗаполненияПассивы.Добавить(ПС.КраткосрочныеФинансовыеОбязательства				  	  , "s_100_07_019_");
	СчетаИПоляДляЗаполненияПассивы.Добавить(ПС.ОбязательстваПоНалогам								  , "s_100_07_020_");
	СчетаИПоляДляЗаполненияПассивы.Добавить(ПС.ОбязательстваПоДругимОбязательнымИДобровольнымПлатежам , "s_100_07_021_");
	СчетаИПоляДляЗаполненияПассивы.Добавить(ПС.КраткосрочнаяКредиторскаяЗадолженность				  , "s_100_07_022_");
	СчетаИПоляДляЗаполненияПассивы.Добавить(ПС.КраткосрочныеОценочныеОбязательства					  , "s_100_07_023_");
	СчетаИПоляДляЗаполненияПассивы.Добавить(ПС.ПрочиеКраткосрочныеОбязательства_					  , "s_100_07_024_");
	//Долгосрочные обязательства
	СчетаИПоляДляЗаполненияПассивы.Добавить(ПС.ДолгосрочныеФинансовыеОбязательства	 , "s_100_07_025_");
	СчетаИПоляДляЗаполненияПассивы.Добавить(ПС.ДолгосрочнаяКредиторскаяЗадолженность , "s_100_07_026_");
	СчетаИПоляДляЗаполненияПассивы.Добавить(ПС.ДолгосрочныеОценочныеОбязательства	 , "s_100_07_027_");
	СчетаИПоляДляЗаполненияПассивы.Добавить(ПС.ОтложенныеНалоговыеОбязательства	 	 , "s_100_07_028_");
	СчетаИПоляДляЗаполненияПассивы.Добавить(ПС.ПрочиеДолгосрочныеОбязательства_	 	 , "s_100_07_029_");
	//Капитал
	СчетаИПоляДляЗаполненияПассивы.Добавить(ПС.УставныйКапитал						 , "s_100_07_031_");
	СчетаИПоляДляЗаполненияПассивы.Добавить(ПС.НеоплаченныйКапитал_					 , "s_100_07_032_");
	СчетаИПоляДляЗаполненияПассивы.Добавить(ПС.ЭмиссионныйДоход_						 , "s_100_07_033_");
	СчетаИПоляДляЗаполненияПассивы.Добавить(ПС.ВыкупленныеСобственныеДолевыеИнструменты_ , "s_100_07_034_");
	СчетаИПоляДляЗаполненияПассивы.Добавить(ПС.Резервы									 , "s_100_07_035_");
	СчетаИПоляДляЗаполненияПассивы.Добавить(ПС.НераспределеннаяПрибыльНепокрытыйУбыток	 , "s_100_07_036_");
	
	ТаблицыОтчета = Форма100_07РассчитатьДанныеФормы(Истина);	
	
	Результат = ТаблицыОтчета[0];
	
	ДанныеОтсутствуют = Ложь;
	
	Если Результат.Пустой() Тогда
		ДанныеОтсутствуют = Истина;	
	КонецЕсли;	
	
	ТаблицаОтчета = Результат.Выгрузить();
	
	Для Каждого Строка Из ТаблицаОтчета Цикл
		// Активы
		ЗначениеПоиска = СчетаИПоляДляЗаполненияАктивы.НайтиПоЗначению(Строка.Счет); 		
		Если ЗначениеПоиска <> Неопределено Тогда 			
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ЗначениеПоиска.Представление+"1", Окр(Строка.Остаток));
		КонецЕсли;
		
		// Пассивы
		ЗначениеПоиска = СчетаИПоляДляЗаполненияПассивы.НайтиПоЗначению(Строка.Счет); 		
		Если ЗначениеПоиска <> Неопределено Тогда 			
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ЗначениеПоиска.Представление+"1", Окр(-Строка.Остаток));
		КонецЕсли;			
	КонецЦикла;
	
	ТаблицаОтчета = ТаблицыОтчета[1].Выгрузить();
	
	Для Каждого Строка Из ТаблицаОтчета Цикл
		
		// Активы
		ЗначениеПоиска = СчетаИПоляДляЗаполненияАктивы.НайтиПоЗначению(Строка.Счет); 		
		Если ЗначениеПоиска <> Неопределено Тогда 			
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ЗначениеПоиска.Представление+"2", Окр(Строка.Остаток));
		КонецЕсли;
		
		// Пассивы
		ЗначениеПоиска = СчетаИПоляДляЗаполненияПассивы.НайтиПоЗначению(Строка.Счет); 		
		Если ЗначениеПоиска <> Неопределено Тогда 			
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ЗначениеПоиска.Представление+"2", Окр(-Строка.Остаток));
		КонецЕсли;	
		
	КонецЦикла;
	
	Если Результат.Пустой() ИЛИ ДанныеОтсутствуют Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения Приложения 100.07 за отчетный период отсутствуют...'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);		
	КонецЕсли;	
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);
	
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, ТекИмяФормы, Ложь);
	
КонецПроцедуры // Форма100_02ЗаполнитьАвто()

&НаСервере
Процедура Форма100_07РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки, ТекИмяФормы, Изменено = Истина)
	
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, ИмяЯчейки, ЗначениеЯчейки);
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);
	
	//Расчитываем ячейки s_100_07_018_1
	ИтогЗначение = 0;
	Для Н = 1 По 17 Цикл
		Номер = Формат(Н,"ЧЦ=2; ЧДЦ=0; ЧВН=");
		// Итоговая строка
		ИмяГрафы 	 = "s_100_07_0" + Номер + "_1";
		ИтогЗначение = ИтогЗначение + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяГрафы); 
	КонецЦикла;      
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_07_018_1", ИтогЗначение, ?(Изменено, Форма100_07ПолеТабличногоДокументаСтраница1, Неопределено));
	
	//Расчитываем ячейки s_100_07_018_2
	ИтогЗначение = 0;
	Для Н = 1 По 17 Цикл
		Номер = Формат(Н,"ЧЦ=2; ЧДЦ=0; ЧВН=");
		// Итоговая строка
		ИмяГрафы 	 = "s_100_07_0" + Номер + "_2";
		ИтогЗначение = ИтогЗначение + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,ИмяГрафы); 
	КонецЦикла;      
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_07_018_2", ИтогЗначение, ?(Изменено, Форма100_07ПолеТабличногоДокументаСтраница1, Неопределено));
	
	//Расчитываем ячейки s_100_07_030_1
	ИтогЗначение = 0;
	Для Н = 19 По 29 Цикл
		Номер = Формат(Н,"ЧЦ=2; ЧДЦ=0; ЧВН=");
		// Итоговая строка
		ИмяГрафы 	 = "s_100_07_0" + Номер + "_1";
		ИтогЗначение = ИтогЗначение + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,ИмяГрафы); 
	КонецЦикла;      
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_07_030_1", ИтогЗначение, ?(Изменено, Форма100_07ПолеТабличногоДокументаСтраница2, Неопределено));
	
	//Расчитываем ячейки s_100_07_030_2
	ИтогЗначение = 0;
	Для Н = 19 По 29 Цикл
		Номер = Формат(Н,"ЧЦ=2; ЧДЦ=0; ЧВН=");
		// Итоговая строка
		ИмяГрафы 	 = "s_100_07_0" + Номер + "_2";
		ИтогЗначение = ИтогЗначение + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,ИмяГрафы); 
	КонецЦикла;      
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_07_030_2", ИтогЗначение, ?(Изменено, Форма100_07ПолеТабличногоДокументаСтраница2, Неопределено));
	
	//Расчитываем ячейки s_100_07_038_1
	ИтогЗначение = 0;
	Для Н = 31 По 37 Цикл
		Номер = Формат(Н,"ЧЦ=2; ЧДЦ=0; ЧВН=");
		// Итоговая строка
		ИмяГрафы 	 = "s_100_07_0" + Номер + "_1";
		ИтогЗначение = ИтогЗначение + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,ИмяГрафы); 
	КонецЦикла;      
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_07_038_1", ИтогЗначение, ?(Изменено, Форма100_07ПолеТабличногоДокументаСтраница2, Неопределено));
	
	//Расчитываем ячейки s_100_07_038_2
	ИтогЗначение = 0;
	Для Н = 31 По 37 Цикл
		Номер = Формат(Н,"ЧЦ=2; ЧДЦ=0; ЧВН=");
		// Итоговая строка
		ИмяГрафы 	 = "s_100_07_0" + Номер + "_2";
		ИтогЗначение = ИтогЗначение + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,ИмяГрафы); 
	КонецЦикла;      
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_100_07_038_2", ИтогЗначение, ?(Изменено, Форма100_07ПолеТабличногоДокументаСтраница2, Неопределено));
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);
	
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ТекИмяФормы);
	
КонецПроцедуры   //Форма100_02Расчет()

///////////////////////////////////////////////////////////////
// Процедуры и функции расшифровки

&НаКлиентеНаСервереБезКонтекста
Функция Форма100ПолучитьСписокКодовСтрокБезРасшифровки()
	
	СписокКодовДляИсключения = Новый СписокЗначений;
	СписокКодовДляИсключения.Добавить("s_100_00_015");
	СписокКодовДляИсключения.Добавить("s_100_00_018");
	
	СписокКодовДляИсключения.Добавить("s_100_00_019");
	СписокКодовДляИсключения.Добавить("s_100_00_019_1");
	СписокКодовДляИсключения.Добавить("s_100_00_019_2");
	СписокКодовДляИсключения.Добавить("s_100_00_019_3");
	
	СписокКодовДляИсключения.Добавить("s_100_00_026");
	СписокКодовДляИсключения.Добавить("s_100_00_040_1");
	СписокКодовДляИсключения.Добавить("s_100_00_040_2");
	СписокКодовДляИсключения.Добавить("s_100_00_040_3");
	СписокКодовДляИсключения.Добавить("s_100_00_040_4");
	СписокКодовДляИсключения.Добавить("s_100_00_041");
	СписокКодовДляИсключения.Добавить("s_100_00_045");
	СписокКодовДляИсключения.Добавить("s_100_00_055");
	
	СписокКодовДляИсключения.Добавить("s_100_00_052"); // Итоговая. Арифметически расчитываемая
	СписокКодовДляИсключения.Добавить("s_100_00_052_a");
	СписокКодовДляИсключения.Добавить("s_100_00_052_b");
	
	СписокКодовДляИсключения.Добавить("s_100_00_044"); // НОД. арифметически расчитываемая
	СписокКодовДляИсключения.Добавить("s_100_00_046");
	СписокКодовДляИсключения.Добавить("s_100_00_046_1");
	СписокКодовДляИсключения.Добавить("s_100_00_046_2");
	СписокКодовДляИсключения.Добавить("s_100_00_047"); // НОД с учетом иностранного дохода. арифметически расчитываемая
	СписокКодовДляИсключения.Добавить("s_100_00_048"); // КИК 
	СписокКодовДляИсключения.Добавить("s_100_00_048_1"); // КИК 
	СписокКодовДляИсключения.Добавить("s_100_00_048_2"); // КИК 
	СписокКодовДляИсключения.Добавить("s_100_00_049"); // ИТОГО, арифметически рассчитываемая
	СписокКодовДляИсключения.Добавить("s_100_00_051"); // убыток, подлежащий переносу, автоматически расчитываемая
	СписокКодовДляИсключения.Добавить("s_100_00_051_a"); 
	СписокКодовДляИсключения.Добавить("s_100_00_054"); 
	СписокКодовДляИсключения.Добавить("s_100_00_054_1");
	СписокКодовДляИсключения.Добавить("s_100_00_058"); 
	СписокКодовДляИсключения.Добавить("s_100_00_058_1"); 
	СписокКодовДляИсключения.Добавить("s_100_00_058_2"); 
	СписокКодовДляИсключения.Добавить("s_100_00_058_3"); 
	СписокКодовДляИсключения.Добавить("s_100_00_058_4"); 
	СписокКодовДляИсключения.Добавить("s_100_00_058_5"); 
	СписокКодовДляИсключения.Добавить("s_100_00_058_6");
	СписокКодовДляИсключения.Добавить("s_100_00_058_7");
	СписокКодовДляИсключения.Добавить("s_100_00_059"); 
	СписокКодовДляИсключения.Добавить("s_100_00_059_a");	
	СписокКодовДляИсключения.Добавить("s_100_00_060");     //чистый доход, арифметически расчитываемая
	СписокКодовДляИсключения.Добавить("s_100_00_062");     //ВСЕГО КПН, арифметически расчитываемая
	
	СписокКодовДляИсключения.Добавить("s_100_00_061_1"); 
	СписокКодовДляИсключения.Добавить("s_100_00_061_2_2"); 
	СписокКодовДляИсключения.Добавить("s_100_00_061_3"); 
	СписокКодовДляИсключения.Добавить("s_100_00_061_4_1"); 
	СписокКодовДляИсключения.Добавить("s_100_00_061_5"); 
	СписокКодовДляИсключения.Добавить("s_100_00_063");
	СписокКодовДляИсключения.Добавить("s_100_00_064");
	СписокКодовДляИсключения.Добавить("s_100_00_065"); 
	
	Для Счетчик = 1 По 5 Цикл
		СписокКодовДляИсключения.Добавить("s_100_00_014_dic__" + Счетчик);
		СписокКодовДляИсключения.Добавить("s_100_00_016_dic__" + Счетчик);

		СписокКодовДляИсключения.Добавить("s_100_00_051_a_dic__" + Счетчик);
		СписокКодовДляИсключения.Добавить("s_100_00_052_a_dic__" + Счетчик);
		СписокКодовДляИсключения.Добавить("s_100_00_052_b_dic__" + Счетчик);
		СписокКодовДляИсключения.Добавить("s_100_00_059_a_dic__" + Счетчик);
		
		СписокКодовДляИсключения.Добавить("s_100_00_051_a__" + Счетчик);
		СписокКодовДляИсключения.Добавить("s_100_00_052_a__" + Счетчик);
		СписокКодовДляИсключения.Добавить("s_100_00_052_b__" + Счетчик);
		СписокКодовДляИсключения.Добавить("s_100_00_059_a__" + Счетчик);
	КонецЦикла;	
	
	Возврат СписокКодовДляИсключения;
	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Форма100ПолучитьСписокКодовСтрокВключаемыхВРасшифровку(ИмяЯчейки, КодыСтрокРасшифровки = Неопределено)
	
	Если КодыСтрокРасшифровки = Неопределено Тогда
		КодыСтрокРасшифровки = Новый СписокЗначений;
	КонецЕсли;
	
	Если ИмяЯчейки = "100.00.019.VIII" Тогда 
		КодыСтрокРасшифровки.Добавить("100.00.019.VIII");
		КодыСтрокРасшифровки.Добавить("100.00.019.IIIA");
		КодыСтрокРасшифровки.Добавить("100.00.019.IIIB");
		КодыСтрокРасшифровки.Добавить("100.00.019.IIIC");
		КодыСтрокРасшифровки.Добавить("100.00.019.IIID");
		КодыСтрокРасшифровки.Добавить("100.00.019.IIIE");
		КодыСтрокРасшифровки.Добавить("100.00.019.IIIF");
		КодыСтрокРасшифровки.Добавить("100.00.019.IIIG");
		КодыСтрокРасшифровки.Добавить("100.00.019.IIIH");
		
	ИначеЕсли ИмяЯчейки = "100.00.007" Тогда
		КодыСтрокРасшифровки.Добавить("100.00.007");
		КодыСтрокРасшифровки.Добавить("100.00.007.I");
		КодыСтрокРасшифровки.Добавить("100.00.007.II");
		
	ИначеЕсли ИмяЯчейки = "100.00.001" Тогда
		КодыСтрокРасшифровки.Добавить("100.00.001");
		КодыСтрокРасшифровки.Добавить("100.00.001.I");
		КодыСтрокРасшифровки.Добавить("100.00.001.II");
		КодыСтрокРасшифровки.Добавить("100.00.001.III");
		КодыСтрокРасшифровки.Добавить("100.00.001.IV");
		
	ИначеЕсли ИмяЯчейки = "100.00.016" Тогда
		КодыСтрокРасшифровки.Добавить("100.00.016");
		
	ИначеЕсли ИмяЯчейки = "100.00.052" Тогда 
		КодыСтрокРасшифровки.Добавить("100.00.052.A");
		КодыСтрокРасшифровки.Добавить("100.00.052.B");
		
	ИначеЕсли ИмяЯчейки = "100.00.013" Тогда
		КодыСтрокРасшифровки.Добавить("100.00.013");
		КодыСтрокРасшифровки.Добавить("100.00.016.241-1-23");
		
	ИначеЕсли ИмяЯчейки = "100.00.035" Тогда
		КодыСтрокРасшифровки.Добавить("100.00.014.226-1-18");
		КодыСтрокРасшифровки.Добавить("100.00.035");

	ИначеЕсли ИмяЯчейки = "100.00.014" Тогда
		КодыСтрокРасшифровки.Добавить("100.00.014");
		КодыСтрокРасшифровки.Добавить("100.00.035");
		
		КодыСтрокРасшифровки.Добавить("100.00.036");
		КодыСтрокРасшифровки.Добавить("100.00.016");
		
	ИначеЕсли ИмяЯчейки = "100.00.014.226-1-13" Тогда
		КодыСтрокРасшифровки.Добавить("100.00.014.226-1-13");
		КодыСтрокРасшифровки.Добавить("100.00.016.241-1-13");
		
	ИначеЕсли ИмяЯчейки = "100.00.014.226-1-16" Тогда
		КодыСтрокРасшифровки.Добавить("100.00.014.226-1-16");
		КодыСтрокРасшифровки.Добавить("100.00.016.241-1-1");
		
	ИначеЕсли ИмяЯчейки = "100.00.014.226-1-18" Тогда
		КодыСтрокРасшифровки.Добавить("100.00.014.226-1-18");
		КодыСтрокРасшифровки.Добавить("100.00.035");

	ИначеЕсли ИмяЯчейки = "100.00.006" Тогда
		КодыСтрокРасшифровки.Добавить("100.00.006");
		КодыСтрокРасшифровки.Добавить("100.00.006.I");
		
	ИначеЕсли ИмяЯчейки = "100.00.028" Тогда
		КодыСтрокРасшифровки.Добавить("100.00.028");
		КодыСтрокРасшифровки.Добавить("100.00.028.I");
		КодыСтрокРасшифровки.Добавить("100.00.028.II");
		КодыСтрокРасшифровки.Добавить("100.00.028.III");
		КодыСтрокРасшифровки.Добавить("100.00.028.IV");
		
	Иначе 	
		КодыСтрокРасшифровки.Добавить(ИмяЯчейки);
		
	КонецЕсли;
	
	Возврат КодыСтрокРасшифровки;
	
КонецФункции //Форма100ПолучитьСписокКодовСтрокВключаемыхВРасшифровку

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьСписокКодовСтрокИзКлассификатора(ИмяЯчейки, СписокКодовСтрок, МакетКодовСтрок)
	
	ИмяЯчейкиДляПоиска = СтрЗаменить(ИмяЯчейки, ".", "_");
	
	Для Каждого Область Из МакетКодовСтрок.Области Цикл
		Если СтрНайти(Область.Имя, ИмяЯчейкиДляПоиска) <> 0 Тогда
			Для НомерСтроки = Область.Верх По Область.Низ Цикл
				КодСтроки           = СокрЛП(МакетКодовСтрок.Область(НомерСтроки, 1).Текст);  // 1 - номер колонки с кодом
				КодСтрокиВключаемый = ИмяЯчейки + "." + КодСтроки;
				Если КодСтроки <> "" И СписокКодовСтрок.НайтиПоЗначению(КодСтрокиВключаемый) = Неопределено Тогда
					СписокКодовСтрок.Добавить(КодСтрокиВключаемый);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресМакетаСКД(Знач ИмяРаздела, ТекстЗапроса = "", СписокСчетов = Неопределено, СписокКодовСтрок = Неопределено)
	
	Если КодФормы = "Форма100" Тогда 
		ОбщаяСКД = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("МакетСКДФорма1002023Кв1");
		Если ИмяРаздела = Неопределено Тогда
			СхемаКомпоновкиДанных = ОбщаяСКД;
		Иначе
			СхемаКомпоновкиДанных = ОбщаяСКД.ВложенныеСхемыКомпоновкиДанных.Найти(ИмяРаздела).Схема;
		КонецЕсли;
		
	ИначеЕсли КодФормы = "Форма100_01" Тогда
		
		СхемаКомпоновкиДанных = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("РасшифровкаФормыНаСКД");
		
		ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных[0];
		НаборДанных = БухгалтерскиеОтчетыВызовСервера.ДобавитьНаборДанныхЗапрос(СхемаКомпоновкиДанных.НаборыДанных, ИсточникДанных, "НаборДанныхИсточникДанных");
		
		НаборДанных.Запрос = ТекстЗапроса;
		ДобавитьПоляНабораДанных(НаборДанных, СхемаКомпоновкиДанных);
		
		ПараметрыСКД = СхемаКомпоновкиДанных.Параметры.Добавить();
		ПараметрыСКД.ДоступенСписокЗначений = Истина;
		ПараметрыСКД.Заголовок = "СписокСчетов";
		ПараметрыСКД.Имя = "СписокСчетов"; 
		ПараметрыСКД.Значение = СписокСчетов;
		ПараметрыСКД.ВключатьВДоступныеПоля = Ложь;
		ПараметрыСКД.ОграничениеИспользования = Истина;
		
		ПараметрыСКД = СхемаКомпоновкиДанных.Параметры.Добавить();
		ПараметрыСКД.ДоступенСписокЗначений = Истина;
		ПараметрыСКД.Заголовок = "СписокОрганизаций";
		ПараметрыСКД.Имя = "СписокОрганизаций"; 
		ПараметрыСКД.Значение = мСписокСтруктурныхЕдиниц;
		ПараметрыСКД.ВключатьВДоступныеПоля = Ложь;
		ПараметрыСКД.ОграничениеИспользования = Истина;
		
		ПараметрыСКД = СхемаКомпоновкиДанных.Параметры.Добавить();
		ПараметрыСКД.ДоступенСписокЗначений = Истина;
		ПараметрыСКД.Заголовок = "КодСтроки";
		ПараметрыСКД.Имя = "КодСтроки"; 
		ПараметрыСКД.Значение = СписокКодовСтрок;
		ПараметрыСКД.ВключатьВДоступныеПоля = Ложь;
		ПараметрыСКД.ОграничениеИспользования = Истина;
		
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПолучитьАдресМакетаКодовСтрок()
	
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("КодыСтрокНалоговыхДеклараций"));
	
КонецФункции

&НаСервере
// Процедура добавляет поля в динамически формируемый набор данных по регистру
//
Процедура ДобавитьПоляНабораДанных(НаборДанных, СхемаКомпоновкиДанных)
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "Счет", 							"Счет");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "КорСчет", 						"КорСчет"); 
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "КорСубконто1", 					"КорСубконто1");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "КорСубконто2", 					"КорСубконто2");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "КорСубконто3", 					"КорСубконто3");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "Субконто1", 						"Субконто1");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "Субконто2", 						"Субконто2");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "Субконто3", 						"Субконто3");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "Период", 						"Период");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "ВидДоходаРасхода", 				"ВидДоходаРасхода");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "ВидУчета", 						"ВидУчета");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "ВидУчетаКор", 					"ВидУчетаКор");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "ИдентификационныйКодЛичности", 	"ИдентификационныйКодЛичности");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "КБЕ", 							"КБЕ");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "Код", 							"Код");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "КодСтроки", 						"КодСтроки");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "Контрагент", 					"Контрагент");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "Налогоплательщик", 				"Налогоплательщик");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "НомерНалоговойРегистрацииВСтранеРезидентства", "НомерНалоговойРегистрацииВСтранеРезидентства");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "Организация", 					"Организация");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "СтатьяЗатрат", 					"СтатьяЗатрат");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "Контрагент", 					"Контрагент");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "Сумма", 							"Сумма");
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеИтога(СхемаКомпоновкиДанных, 								"Сумма");
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "Регистратор", 					"Регистратор");
	
КонецПроцедуры // ДобавитьПоляНабораДанных()

&НаКлиенте
Процедура Форма100РасшифровкаСКД(ИмяЯчейки, МетодРасшифровки)                          	
	
	СписокКодовДляИсключения = Форма100ПолучитьСписокКодовСтрокБезРасшифровки();
	
	Если СписокКодовДляИсключения.НайтиПоЗначению(ИмяЯчейки) <> Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки не поддерживается. 
		|Расшифровку содержат ячейки формы, выделенные голубым цветом.'"));
		Возврат;
	КонецЕсли;

	// Вычет по налогам только для балансового метода
	ВедениеВРБалансовымМетодом = СтруктураРеквизитовФормы.ВедениеВРБалансовымМетодом;
	
	ИмяЯчейкиВходящее = ИмяЯчейки;
	
	ИмяЯчейки = ПреобразоватьИмяЯчейкиВКодСтрокиДекларации(ИмяЯчейки);
	
	СписокДохКодовСтрок = Форма100ПолучитьСписокКодовДоходов();
	ДополнитьСписокКодовСтрокИзКлассификатора("100.00.014"  , СписокДохКодовСтрок, мМакетКодовСтрок);
	ДополнитьСписокКодовСтрокИзКлассификатора("100.00.016"  , СписокДохКодовСтрок, мМакетКодовСтрок);
	ДополнитьСписокКодовСтрокИзКлассификатора("100.00.052.B", СписокДохКодовСтрок, мМакетКодовСтрок);
	
	СписокРасКодовСтрок = Форма100ПолучитьСписокКодовРасходов();
	ДополнитьСписокКодовСтрокИзКлассификатора("100.00.052.A", СписокРасКодовСтрок, мМакетКодовСтрок);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", 	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ТипДанных", 		"РегистрыБухгалтерии");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяОбъекта", 	"Налоговый");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяТаблицы", 	"Обороты");
	
	// ПР включаются только в строку 100.00.019
	ВключатьПР = Ложь;
	ИмяРазделаРасшифровки = "Декларация по КПН:" + СтруктураРеквизитовФормы.мГод;  // для сохранения однотипных настроек раздела
	Если СокрЛП(ИмяЯчейки)	 = "100.00.019.IV" Тогда		
		ИмяСхемыКомпоновкиДанных = "РасшифровкаВычетаПоРеализованнымТоварам_ЗаработнаяПлата";
		ИмяРазделаРасшифровки = ИмяРазделаРасшифровки + ", Заработная плата";
	ИначеЕсли СокрЛП(ИмяЯчейки)	 = "100.00.019.V" Тогда		
		ИмяСхемыКомпоновкиДанных = "РасшифровкаВычетаПоРеализованнымТоварам_РБП";
		ИмяРазделаРасшифровки = ИмяРазделаРасшифровки + ", Вычеты по реализованным товарам";
	ИначеЕсли СокрЛП(ИмяЯчейки)	 = "100.00.019.VI" Тогда				
		ИмяСхемыКомпоновкиДанных = "РасшифровкаВычетаПоРеализованнымТоварам_РемонтВА";
		ИмяРазделаРасшифровки = ИмяРазделаРасшифровки + ", Вычеты по реализованным товарам (ремонт)";
	ИначеЕсли СокрЛП(ИмяЯчейки)	 = "100.00.019.VII" Тогда		
		ВключатьПР = Истина;
		ИмяСхемыКомпоновкиДанных = "РасшифровкаВычетаПоРеализованнымТоварам_ВключеноВСтоимостьВА";
		ИмяРазделаРасшифровки = ИмяРазделаРасшифровки + ", Вычеты по реализованным товарам (ВА)";
	ИначеЕсли СокрЛП(ИмяЯчейки)	 = "100.00.019.VIII" Тогда		
		ВключатьПР = Истина;
		ИмяСхемыКомпоновкиДанных = "РасшифровкаВычетаПоРеализованнымТоварам_ПР";
		ИмяРазделаРасшифровки = ИмяРазделаРасшифровки + ", Вычеты по реализованным товарам (ПР)";
	ИначеЕсли СокрЛП(ИмяЯчейки)	 = "100.00.019.IX" Тогда
		ИмяСхемыКомпоновкиДанных = "РасшифровкаВычетаПоРеализованнымТоварам_РБПОстатки";
	ИначеЕсли Лев(ИмяЯчейки,10)	 = "100.00.019" Тогда
		ВключатьПР = Истина;
		ИмяСхемыКомпоновкиДанных = "РасшифровкаВычетаПоРеализованнымТоварам_Приобретение";
		ИмяРазделаРасшифровки = ИмяРазделаРасшифровки + ", Вычеты по реализованным товарам";
		
	ИначеЕсли СокрЛП(ИмяЯчейки)	 = "100.00.036" Тогда
		Если ВедениеВРБалансовымМетодом Тогда
			Попытка                                          	
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
				ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
				ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц.Скопировать());
				
				ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц);
				ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПредставлениеСпискаОрганизаций", ПредставлениеСпискаОрганизаций);
				
				ПользовательскиеПоля = ПользовательскиеНастройки.Элементы.Добавить(Тип("ВыбранныеПоляКомпоновкиДанных"));	
				ПользовательскиеПоля.ИдентификаторПользовательскойНастройки = "Выбор";	
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаНачальныйОстаток", 			"Нач. сальдо");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "УплаченныйНалог", 					"Уплата налога");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "НачисленныйНалогСУчетомСальдо", 	"Начисление налога");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаКонечныйОстаток", 			"Кон. сальдо");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаНалогаВычет", 				"Сумма вычета");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаНалогаНЕВычет",   			"Не разрешено к вычету");
				
				ГруппировкиРасшифровки = Новый Массив();
				
				ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "Субконто1", НСтр("ru = 'Вид налога'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
				
				ЗаполняемыеНастройки = Новый Структура("ГруппировкаДоп, Показатели, ГруппировкиРасшифровки",
					Истина, Истина, ГруппировкиРасшифровки);
				
				ПараметрыФормы = Новый	Структура;
				ПараметрыФормы.Вставить("ВидРасшифровки", 2);
				ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
				ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
				ПараметрыФормы.Вставить("ЗаполняемыеНастройки",ЗаполняемыеНастройки );	
				
				ОткрытьФорму("Отчет.СправкаРасчетВычетовПоНалогам.Форма.ФормаОтчета", ПараметрыФормы,,Истина);
				
			Исключение
				ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данного специализированного вычета в Вашей версии конфигурации не поддерживается. Необходимо обновить версию конфигурации...'"));
			КонецПопытки;
			Возврат;		
		Иначе
			ИмяСхемыКомпоновкиДанных = "РасшифровкаЗатрат";
			ИмяРазделаРасшифровки = ИмяРазделаРасшифровки + ", Вычеты";
		КонецЕсли;
		
	ИначеЕсли СокрЛП(ИмяЯчейки)	 = "100.00.027" Тогда
		Если ВедениеВРБалансовымМетодом Тогда
			Попытка 
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
				ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
				ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц.Скопировать());
				ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Налогоплательщик", Налогоплательщик);
				
				ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц);
				ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПредставлениеСпискаОрганизаций", ПредставлениеСпискаОрганизаций);
				
				ПользовательскиеПоля = ПользовательскиеНастройки.Элементы.Добавить(Тип("ВыбранныеПоляКомпоновкиДанных"));	
				ПользовательскиеПоля.ИдентификаторПользовательскойНастройки = "Выбор";	
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ОбъектПреференции", 				"Наименование объекта преференции (основного средства)");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ДатаСостояния", 					"Дата ввода в эксплуатацию основного средства");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "НомерИДата", 						"Номер и дата контракта (при его наличии)");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Период", 							"Периоды, на которые предоставлены преференции");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ПервоначальныйОстаток", 			"Стоимость объекта преференции (основного средства), и (или) расходов на реконструкцию, модернизацию, подлежащие отнесению на вычеты");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Выплаты", 				  			"Стоимость объекта преференции (основного средства), и (или) расходов на реконструкцию, модернизацию, отнесенные на вычеты в налоговом периоде");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ОстаточнаяСумма", 				  	"Остаточная стоимость объекта преференции (основного средства), и (или) расходов на реконструкцию, модернизацию  (графа 6 – графа 7)");
				
				ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьПодписи", Истина); 	
				
				ПараметрыФормы = Новый	Структура;
				ПараметрыФормы.Вставить("ВидРасшифровки", 2);
				ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
				ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
				
				ОткрытьФорму("Отчет.РегистрНалоговогоУчетаПоПрименениюИнвестиционныхПреференций.Форма.ФормаОтчета", ПараметрыФормы,,Истина);
				
			Исключение
				ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данного специализированного вычета в Вашей версии конфигурации не поддерживается. Необходимо обновить версию конфигурации...'"));
				
			КонецПопытки;
			Возврат;		
		Иначе
			ИмяСхемыКомпоновкиДанных = "РасшифровкаЗатрат";
			ИмяРазделаРасшифровки = ИмяРазделаРасшифровки + ", Вычеты";
		КонецЕсли;
		
	ИначеЕсли СокрЛП(ИмяЯчейки)	 = "100.00.014" Тогда
		ИмяСхемыКомпоновкиДанных = "РасшифровкаДоходовРасходовПрочих";
		ИмяРазделаРасшифровки = "Декларация по КПН:" + СтруктураРеквизитовФормы.мГод + ", Доходы";
		
	ИначеЕсли СтрНайти(ИмяЯчейки, "100.00.014")	 <> 0  Тогда
		ИмяСхемыКомпоновкиДанных = Неопределено;
		ИмяРазделаРасшифровки = "Декларация по КПН:" + СтруктураРеквизитовФормы.мГод + ", Доходы";
		
	ИначеЕсли СтрНайти(ИмяЯчейки, "100.00.016")	 <> 0  Тогда
		ИмяСхемыКомпоновкиДанных = Неопределено;
		ИмяРазделаРасшифровки = "Декларация по КПН:" + СтруктураРеквизитовФормы.мГод + ", Доходы";
		
	ИначеЕсли СокрЛП(ИмяЯчейки)	 = "100.00.035" Тогда
		ИмяСхемыКомпоновкиДанных = "РасшифровкаДоходовРасходовПрочих";
		ИмяРазделаРасшифровки = ИмяРазделаРасшифровки + ", Вычеты";
		
	ИначеЕсли СокрЛП(ИмяЯчейки)	 = "100.00.050" Тогда
		ИмяСхемыКомпоновкиДанных = "Расшифровка31Строка";
		ИмяРазделаРасшифровки = "Декларация по КПН:" + СтруктураРеквизитовФормы.мГод + ", Доходы";
		
	ИначеЕсли СписокДохКодовСтрок.НайтиПоЗначению(ИмяЯчейки) = Неопределено Тогда		
		ИмяСхемыКомпоновкиДанных = "РасшифровкаЗатрат";
		ИмяРазделаРасшифровки = ИмяРазделаРасшифровки + ", Вычеты";
	Иначе
		ИмяСхемыКомпоновкиДанных = Неопределено;
		ИмяРазделаРасшифровки = "Декларация по КПН:" + СтруктураРеквизитовФормы.мГод + ", Доходы";
	КонецЕсли;	
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ПолучитьАдресМакетаСКД(ИмяСхемыКомпоновкиДанных));
	
	// Группировки	
	МассивГруппировок = Новый Массив();
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "КодСтроки", НСтр("ru = 'Код строки'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));	
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка",  МассивГруппировок);
	
	// Сортировка
	ПользовательскиеСортировки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ПорядокКомпоновкиДанных"));
	ПользовательскиеСортировки.ИдентификаторПользовательскойНастройки = "Порядок";
	
	НовыйЭлементПорядка = ПользовательскиеСортировки.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовыйЭлементПорядка.Использование  = Истина;
	НовыйЭлементПорядка.Поле  = новый ПолеКомпоновкиДанных("Регистратор");
	
	//Параметры
	МассивПараметровДанных = Новый Массив();
	
	КодПодстрокиПолный = "";
	Если СтрНайти(ИмяЯчейкиВходящее, "s_100_00_014__") <> 0 Тогда
		КодыСтрокРасшифровки = Новый СписокЗначений;
		КодыПодстроки = Форма100ПолеТабличногоДокументаСтраница2.Область(СтрЗаменить(ИмяЯчейкиВходящее, "__", "_dic__")).Значение;
		МассивКодовПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодыПодстроки, ";");
		Для Каждого КодПодстроки Из МассивКодовПодстрок Цикл
			КодыСтрокРасшифровки = Форма100ПолучитьСписокКодовСтрокВключаемыхВРасшифровку("100.00.014." + СокрЛП(КодПодстроки), КодыСтрокРасшифровки);
		КонецЦикла;
		КодПодстрокиПолный = СокрЛП(КодыПодстроки);
	ИначеЕсли СтрНайти(ИмяЯчейкиВходящее, "s_100_00_016__") Тогда
		КодыСтрокРасшифровки = Новый СписокЗначений;
		КодыПодстроки = Форма100ПолеТабличногоДокументаСтраница2.Область(СтрЗаменить(ИмяЯчейкиВходящее, "__", "_dic__")).Значение;
		МассивКодовПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодыПодстроки, ";");
		Для Каждого КодПодстроки Из МассивКодовПодстрок Цикл
			КодыСтрокРасшифровки = Форма100ПолучитьСписокКодовСтрокВключаемыхВРасшифровку("100.00.016." + СокрЛП(КодПодстроки), КодыСтрокРасшифровки);
		КонецЦикла;
		КодПодстрокиПолный = СокрЛП(КодыПодстроки);
	Иначе
		КодыСтрокРасшифровки = Форма100ПолучитьСписокКодовСтрокВключаемыхВРасшифровку(ИмяЯчейки);
		ДополнитьСписокКодовСтрокИзКлассификатора(ИмяЯчейки, КодыСтрокРасшифровки, мМакетКодовСтрок);
	КонецЕсли;
	
	Если СтрНайти(ИмяЯчейки, "100.00.014.") > 0 И СтрНайти(КодПодстрокиПолный, "226-1-18") > 0 Тогда
		ИмяСхемыКомпоновкиДанных = "РасшифровкаДоходовРасходовПрочих";
		ИмяРазделаРасшифровки = "Декларация по КПН:" + СтруктураРеквизитовФормы.мГод + ", Доходы";
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ПолучитьАдресМакетаСКД(ИмяСхемыКомпоновкиДанных));
	КонецЕсли;
	
	Если ИмяЯчейки = "100.00.014" Тогда
		ДополнитьСписокКодовСтрокИзКлассификатора("100.00.016", КодыСтрокРасшифровки, мМакетКодовСтрок);
		КодСтроки016_23 = КодыСтрокРасшифровки.НайтиПоЗначению("100.00.016.241-1-23");
		Если КодСтроки016_23 <> Неопределено Тогда
			КодыСтрокРасшифровки.Удалить(КодСтроки016_23);
		КонецЕсли;
	ИначеЕсли СтрНайти(ИмяЯчейки, "100.00.014.") > 0 И СтрНайти(КодПодстрокиПолный, "226-1-25") > 0 Тогда
		ДополнитьСписокКодовСтрокИзКлассификатора("100.00.016", КодыСтрокРасшифровки, мМакетКодовСтрок);
		КодСтроки016_1 = КодыСтрокРасшифровки.НайтиПоЗначению("100.00.016.241-1-1");
		Если КодСтроки016_1 <> Неопределено Тогда
			КодыСтрокРасшифровки.Удалить(КодСтроки016_1);
		КонецЕсли;
		КодСтроки016_13 = КодыСтрокРасшифровки.НайтиПоЗначению("100.00.016.241-1-13");
		Если КодСтроки016_13 <> Неопределено Тогда
			КодыСтрокРасшифровки.Удалить(КодСтроки016_13);
		КонецЕсли;
		КодСтроки016_23 = КодыСтрокРасшифровки.НайтиПоЗначению("100.00.016.241-1-23");
		Если КодСтроки016_23 <> Неопределено Тогда
			КодыСтрокРасшифровки.Удалить(КодСтроки016_23);
		КонецЕсли;
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодСтрокиРасшифровки",   КодыСтрокРасшифровки);
	
	Если (ИмяЯчейки = "100.00.014") ИЛИ (СтрНайти(ИмяЯчейки, "100.00.014.") > 0 И СтрНайти(КодПодстрокиПолный, "226-1-18") > 0) ИЛИ (Лев(ИмяЯчейки,10) = "100.00.035") Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодСтрокиДоходОтКурсовойРазницы",   СтруктураРеквизитовФормы.КодСтрокиДоходОтКурсовойРазницы);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодСтрокиРасходыПоКурсовойРазнице", СтруктураРеквизитовФормы.КодСтрокиРасходыПоКурсовойРазнице);
		
		ПоложительнаяКурсоваяРазница = ?(Лев(ИмяЯчейки,10) = "100.00.014", Истина, Ложь);
		Если ПоложительнаяКурсоваяРазница Тогда 
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ВыводитьДоход", 1);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ВыводитьРасход", -1);
		Иначе 
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ВыводитьДоход", -1);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ВыводитьРасход", 1);
		КонецЕсли;
	КонецЕсли;	
	
	// в некоторых строках 100.00.018 требуется включение в графу "СуммаДекларации" НУ+ПР и не вычитать ремонты и затраты по ВА из исходной строки
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ВключатьПРИЗатратыПоВА",   ВключатьПР);
	
	// так как в 100.00.009 не включается НЗС
	СчетаРасходов = Новый СписокЗначений;
	СчетаРасходов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.Расходы"));    					//счет Н800    	
	СчетаРасходов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.Производство_")); 				//счет Н800    	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СчетаРасходов", СчетаРасходов);
	
	СчетаРасходовИНезавершенногоСтроительства = Новый СписокЗначений;
	СчетаРасходовИНезавершенногоСтроительства.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.НезавершенноеСтроительство")); 	//счет Н330        	
	СчетаРасходовИНезавершенногоСтроительства.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.Расходы"));    					//счет Н800    	
	СчетаРасходовИНезавершенногоСтроительства.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.Производство_")); 				//счет Н800    	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СчетаРасходовИНезавершенногоСтроительства", СчетаРасходовИНезавершенногоСтроительства);
	
	СписокСчетовСтрокиA = Новый СписокЗначений;
	СписокСчетовСтрокиA.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.Товары")); 					//счет 1330
	СписокСчетовСтрокиA.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.СырьеИМатериалы"));    		//счет 1310    	
	СписокСчетовСтрокиA.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.ПрочиеЗапасы")); 			   	//счет 1350		
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСчетовСтрокиA", СписокСчетовСтрокиA);
	
	СписокСчетовТМЗ =   СписокСчетовСтрокиA.Скопировать();
	СписокСчетовТМЗ.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.ГотоваяПродукция")); // счет 1330
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СчетаТМЗ", СписокСчетовТМЗ);
	
	КодыДляИсключенияИзОсновногоЗапроса = Новый СписокЗначений;
	КодыДляИсключенияИзОсновногоЗапроса.Добавить(СтруктураРеквизитовФормы.КодСтрокиДоходОтКурсовойРазницы);
	КодыДляИсключенияИзОсновногоЗапроса.Добавить(СтруктураРеквизитовФормы.КодСтрокиРасходыПоКурсовойРазнице);
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.IIIA"); 					
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.IIIB"); 					
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.IIIC"); 					
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.IIID"); 					
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.IIIE"); 					
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.IIIF"); 					
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.IIIG"); 					
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.IIIH");
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.IV");
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.V");
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.VI");
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.VII");
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.VIII");
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019.IX");
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.019%");
	
	Если СтруктураРеквизитовФормы.ВедениеВРБалансовымМетодом Тогда
		КодыДляИсключенияИзОсновногоЗапроса.Добавить("100.00.036");
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодыДляИсключенияИзОсновногоЗапроса", КодыДляИсключенияИзОсновногоЗапроса);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокОрганизаций", 					мСписокСтруктурныхЕдиниц);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодСтроки", 							"100.00%");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ВедениеВРБалансовымМетодом", 			СтруктураРеквизитовФормы.ВедениеВРБалансовымМетодом);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокОрганизаций", 					мСписокСтруктурныхЕдиниц);
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "НачалоПериода", 				НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КонецПериода", 				КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "НачПериода", 					СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КонПериода", 					СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "НачГраница", 					СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КонГраница", 					КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) + 1);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Организация", 				Налогоплательщик);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ПустаяОрганизация", 			ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ПустоеЗначение", 				Неопределено);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ВидУчетаВР", 					ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.ВР"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ВидУчетаНУ", 					ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ВидУчетаПР", 					ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.ПР"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ВидСубконтоЗатрат", 			ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ВидСубконтоДоходов", 			ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.Доходы"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ВидСубконтоКонтрагенты", 		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ПустаяСтатьяЗатрат", 			ПредопределенноеЗначение("Справочник.СтатьиЗатрат.ПустаяСсылка"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ПустоеРБП", 					ПредопределенноеЗначение("Справочник.РасходыБудущихПериодов.ПустаяСсылка"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СчетРБП", 					ПредопределенноеЗначение("ПланСчетов.Налоговый.РасходыБудущихПериодов"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СчетНЗС", 					ПредопределенноеЗначение("ПланСчетов.Налоговый.НезавершенноеСтроительство"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет340", 					ПредопределенноеЗначение("ПланСчетов.Налоговый.ПреренцииДоВводаВЭксплуатацию"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет460", 					ПредопределенноеЗначение("ПланСчетов.Налоговый.ВзаиморасчетыСРаботниками"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет700", 					ПредопределенноеЗначение("ПланСчетов.Налоговый.Доходы"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СчетаДоходов", 				ПредопределенноеЗначение("ПланСчетов.Налоговый.Доходы"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет000", 					ПредопределенноеЗначение("ПланСчетов.Налоговый.Вспомогательный"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет860", 					ПредопределенноеЗначение("ПланСчетов.Налоговый.РасходыНаРемонтВА"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет890", 					ПредопределенноеЗначение("ПланСчетов.Налоговый.ПрочиеРасходыПоВнеоборотнымАктивам"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КапитальныйРемонт", 			ПредопределенноеЗначение("Перечисление.ВидыРемонтаВА.Капитальный"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет7000Н", 					ПредопределенноеЗначение("ПланСчетов.Налоговый.СебестоимостьПроданныхТоваров"));
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодСтроки", 					"100.00%");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодСтроки50", 				"100.00.050");
	
	СписокСчетовАктивов = Новый СписокЗначений;
	СписокСчетовАктивов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.Запасы")); 		  			  	//счет 1310
	СписокСчетовАктивов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.НезавершенноеПроизводство")); 		//счет 1340	
	СписокСчетовАктивов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.ПрочиеЗапасы")); 					//счет 1350	
	СписокСчетовАктивов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.ПрочиеАктивы_")); 					//счет 1600	
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСчетовАктивов", СписокСчетовАктивов);
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСчетов400", ПредопределенноеЗначение("ПланСчетов.Налоговый.РасчетыСКонтрагентамиИПрочиеВзаиморасчеты"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодСтрокЗП",		"100.00.019.IV");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодСтрокиA", 		"100.00.019.IIIA");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодСтрокиРБП", 	"100.00.019%");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ПризнакВключенияПРТМЗВПериодеСписания", ПризнакВключенияПРТМЗВПериодеСписания);
	
	Если СтруктураРеквизитовФормы.СчетТоварыПереданныеНаКомиссию Тогда 
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет1353", Вычислить("ПредопределенноеЗначение(""ПланСчетов.Типовой.ТоварыПереданныеНаКомиссию"")"));
	Иначе 
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет1353", );
	КонецЕсли;
	
	Если ИмяЯчейки = "100.00.019.IIIA" Тогда 
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодСтрокиКоррВычетов", "100.00.041.II");
	КонецЕсли;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПараметрыДанных", МассивПараметровДанных);
	
	ПользовательскиеПоля = ПользовательскиеНастройки.Элементы.Добавить(Тип("ВыбранныеПоляКомпоновкиДанных"));	
	ПользовательскиеПоля.ИдентификаторПользовательскойНастройки = "Выбор";	
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "КорСубконто1", 	"Кор субконто 1");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаВДекларации", "Сумма в декларации");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаНУ", 			"Сумма НУ");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаПР", 			"Сумма ПР");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаВР", 			"Сумма ВР");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Сумма",   			"Сумма");
	
	Если ИмяЯчейки = "100.00.019.VII" Тогда 
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "РБП", "РБП");				
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Регистратор", "Документ движения");		
	
	// Прочие настройки
	ТекстЗаголовка = НСтр("ru = 'Регистр налогового учета к строке %1 для Декларации по КПН'");	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Заголовок", 	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, ИмяЯчейки));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", Истина);	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьПодписи", Истина);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц.Скопировать());
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Налогоплательщик",  Налогоплательщик);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ВыводитьЗаголовок", Истина);	
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", ИмяРазделаРасшифровки);
	
	ОткрытьФорму("Отчет.УниверсальныйОтчетПоМетаданным.Форма.ФормаОтчета", ПараметрыФормы,, Истина);
	
КонецПроцедуры

//Обход проблемы по очистки значений в ТП в клиент-серверном варианте
&НаКлиенте
Процедура ПанельФорма100ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ПанельФорма100ПриСменеСтраницыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПанельФорма100ПриСменеСтраницыНаСервере()
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗаголовокОтражениеВУчете(ДокументОтражения)
	
	Если ЗначениеЗаполнено(ДокументОтражения) Тогда
		Возврат НСТР("ru = 'Открыть документ отражения в учете'");
	Иначе
		Возврат НСТР("ru = 'Ввести документ отражения в учете'");
	КонецЕсли;
	
КонецФункции // ПолучитьЗаголовокОтражениеВУчете()

&НаСервере
Функция ПолучитьСтруктуруВходящихЯчеек(Знач ИмяЯчейки)
	
	СтруктураВходящихЯчеек = Новый Структура;
	
	СтруктураВходящихЯчеек.Вставить(ИмяЯчейки + "__1");
	СтруктураВходящихЯчеек.Вставить(ИмяЯчейки + "__2");
	СтруктураВходящихЯчеек.Вставить(ИмяЯчейки + "__3");
	СтруктураВходящихЯчеек.Вставить(ИмяЯчейки + "__4");
	СтруктураВходящихЯчеек.Вставить(ИмяЯчейки + "__5");
	
	Возврат СтруктураВходящихЯчеек;
	
КонецФункции

&НаСервере
Функция ПреобразоватьИмяЯчейкиВКодСтрокиДекларации(Знач ИмяЯчейки)
	
	КодСтрокиДекларации = ИмяЯчейки;
	
	КодСтрокиДекларации = СтрЗаменить(КодСтрокиДекларации, "s_", "");
	КодСтрокиДекларации = СтрЗаменить(КодСтрокиДекларации, "__", ".");
	КодСтрокиДекларации = СтрЗаменить(КодСтрокиДекларации, "_", ".");
	
	ЧислоВхождений = СтрЧислоВхождений(КодСтрокиДекларации, ".");
	
	Если ЧислоВхождений = 4 Тогда 
		ДлинаСтроки 	= СтрДлина(КодСтрокиДекларации); 
		Попытка
			АрабскоеЧисло 	    = Сред(КодСтрокиДекларации, 12, ДлинаСтроки - 11); 
			АрабскоеЧисло 	    = Лев(АрабскоеЧисло, 1);
			БукваКодаСтроки     = Прав(КодСтрокиДекларации, 1);
			Число 			    = ПреобразоватьЧислоВРимскуюНотацию(АрабскоеЧисло, Истина);
			КодСтрокиДекларации = ВРег(Лев(КодСтрокиДекларации, 11) + Число + БукваКодаСтроки); 
		Исключение
			АрабскоеЧисло 	    = Сред(КодСтрокиДекларации, 14, ДлинаСтроки - 13); 
			АрабскоеЧисло 	    = Лев(АрабскоеЧисло, 1);
			Число 			    = ПреобразоватьЧислоВРимскуюНотацию(АрабскоеЧисло, Истина);
			КодСтрокиДекларации = ВРег(Лев(КодСтрокиДекларации, 12) + Число); 
		КонецПопытки;
	Иначе 
		ДлинаСтроки = СтрДлина(КодСтрокиДекларации); 
		АрабскоеЧисло = Сред(КодСтрокиДекларации, 12, ДлинаСтроки - 11); 
		Число = ПреобразоватьЧислоВРимскуюНотацию(АрабскоеЧисло, Истина);
		КодСтрокиДекларации = Лев(КодСтрокиДекларации, 11) + Число; 
	КонецЕсли;
	
	Возврат КодСтрокиДекларации;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, ОтчетОбъект);
КонецПроцедуры

// Параметры:
//  Команда - КомандаФормы
//
&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	ОтчетыКлиентПереопределяемый.ОбработчикКоманды(ЭтотОбъект, Команда, Ложь);
КонецПроцедуры
