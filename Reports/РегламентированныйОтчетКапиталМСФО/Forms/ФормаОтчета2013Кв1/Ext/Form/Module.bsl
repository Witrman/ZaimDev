////////////////////////////////////////////////////////////////////////////////
// Описание формы
// Параметры фомры:
//  Организация - СправочникСсылка.Организации - Налогоплательщик, представляющий отчет
//  мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета - Дата - отчетный период формирования отчета
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	мВыбраннаяФорма = "ФормаОтчета2013Кв1";
	КодФормы 		= "ФормаОтчета";
	               		
	ВсегоСтраниц	= 4;     	
	мФорматНомераСтроки = "ЧЦ=8; ЧВН=; ЧГ=";
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруФормРегОтчета(ЭтотОбъект);	
			
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов   = Новый СписокЗначений;	
	СтруктураРеквизитовФормы.мПечатныеформы 		  = Новый СписокЗначений;	
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	// Значения по умолчанию
	мКодыСтрокПрочиеПоступления		= Новый Соответствие;
	мКодыСтрокПрочиеПоступления.Вставить(Перечисления.РазрезыДеятельности.Операционная, 	"15");
	мКодыСтрокПрочиеПоступления.Вставить(Перечисления.РазрезыДеятельности.Инвестиционная, 	"47");
	мКодыСтрокПрочиеПоступления.Вставить(Перечисления.РазрезыДеятельности.Финансовая, 		"74");
	
	СтруктураРеквизитовФормы.мКодыСтрокПрочиеПоступления =  мКодыСтрокПрочиеПоступления;	
	
	мКодыСтрокПрочиеВыбытия		= Новый Соответствие;
	мКодыСтрокПрочиеВыбытия.Вставить(Перечисления.РазрезыДеятельности.Операционная, 	"27");
	мКодыСтрокПрочиеВыбытия.Вставить(Перечисления.РазрезыДеятельности.Инвестиционная, 	"57");
	мКодыСтрокПрочиеВыбытия.Вставить(Перечисления.РазрезыДеятельности.Финансовая, 		"84");
	СтруктураРеквизитовФормы.мКодыСтрокПрочиеВыбытия =  мКодыСтрокПрочиеВыбытия;	
	
	СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями = РегламентированнаяОтчетностьПереопределяемый.ПоддержкаРаботыСоСтруктурнымиПодразделениями(); // перевести в переопределяемый модуль 

	СтруктураРеквизитовФормы.СтруктураСоответствияЭлементовОтчетногоПериода = ЗаполнитьСтруктуруСоответствийЭлементов(1);
	СтруктураРеквизитовФормы.СтруктураСоответствияЭлементовпрошлогоПериода = ЗаполнитьСтруктуруСоответствийЭлементов(2);
		
	// Общие механизмы
	ЗаполнитьСведенияОбОтчетномПериоде();
		
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	УстановитьФорматВывода();
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекФорма.КодФормы);
	КонецЦикла	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если Модифицированность Тогда 
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);	
		ТекстВопроса = НСТР("ru = 'Сохранить данные отчета?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);	
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(мСписокСтруктурныхЕдиниц, ЭтаФорма, СтандартнаяОбработка,,Налогоплательщик);	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда		
		мСписокСтруктурныхЕдиниц = Результат;		
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц); 		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ФормаВыбораИзКлассификатора") Тогда
		
		Если ВРег(ИсточникВыбора.ИмяМакета) = ВРег("КОДЫБЮДЖЕТНОЙКЛАССИФИКАЦИИ") Тогда 
			
			Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда 
				Код = ВыбранноеЗначение;
			Иначе 
				Код = ВыбранноеЗначение.КодСтроки;				
			КонецЕсли;
		// выбираются в форме 300.03
		
		
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЯзыкФормированияПриИзменении(Элемент)
	ЯзыкФормированияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	ЕдиницаИзмеренияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТочностьЕдиницыИзмеренияПриИзменении(Элемент)
	УстановитьФорматВывода();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "Разделы"

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)	
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.КодФормы = Элемент.ТекущиеДанные.КодФормы тогда
		Возврат;
	КонецЕсли;	
	
	//РазделыОтчетаПриАктивизацииСтрокиНаСервере(Элемент.ТекущиеДанные.КодФормы, Элемент.ТекущиеДанные.Многострочность, Элемент.ТекущиеДанные.ПризнакОсновной);	
		
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Для Каждого СтраницаФорм из Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы Цикл
		Элементы[СтраницаФорм.Имя].Видимость = СтраницаФорм.Имя = ЭтаФорма.КодФормы;	
	КонецЦикла;
	
	//ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "Отчеты"

&НаКлиенте
Процедура ФормаОтчетаПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = Область.Имя;	
	
	Если Найти(ИмяОбласти, "Б") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФормаОтчетаРасчет(Область.Имя, Область.Значение, Истина);
	
	Модифицированность = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Заполнить(Команда)
	Перезаполнить = Истина; // Для выполнения запроса на пересчет данных к пользователю
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения =  РегламентированнаяОтчетностьКлиент.ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Перезаполнить Тогда		
		Если СтрокаФормы.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстВопроса = "Перезаполнить данные формы и ее дополнительных форм?";
		Иначе
			ТекстВопроса = "Перезаполнить данные формы?";
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);
		Оповещение.ДополнительныеПараметры.Вставить("Перезаполнить", Перезаполнить);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);		

	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФорму(Команда)
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	 	
	
	Перезаполнить = ДополнительныеПараметры.Перезаполнить;
	
	ЗаполнитьАвтоНаСервере();	
	УстановитьФорматВывода();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	СохранитьДанные(); 
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	ОткрытьФормуНастройкиСтраниц();
КонецПроцедуры

&НаКлиенте
Процедура Расшифровка(Команда)
	Попытка
		ИмяЯчейки = ЭтотОбъект.ТекущийЭлемент.ТекущаяОбласть.Имя;
	Исключение
		ПоказатьПредупреждение(,"Активизируйте нужную ячейку отчета для расшифровки.");
		Возврат;
	КонецПопытки;
	
	ЦветРасшифровки = ФормаОтчетаПолеТабличногоДокументаСтраница1.Области.s_010_1.ЦветФона;
	
	Если ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда 
		
		ФормаОтчетаРасшифровкаСКД(ИмяЯчейки);			
	Иначе	
		ПоказатьПредупреждение(, "Расшифровка данной ячейки не поддерживается."+Символы.ПС+"Расшифровку содержат ячейки формы, выделенные желтым цветом.");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыФормы.Вставить("Организация",              Налогоплательщик);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	ПараметрыФормы.Вставить("мДатаНачалаСравнительногоПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаСравнительногоПериодаОтчета);
	ПараметрыФормы.Вставить("мДатаКонцаСравнительногоПериодаОтчета", СтруктураРеквизитовФормы.мДатаКонцаСравнительногоПериодаОтчета);
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, мВыбраннаяФорма, "") + "ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура СохранитьДанные() Экспорт
	СохранитьДанныеСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
КонецПроцедуры

&НаСервере
// Процедура очистки формы
//
// параметр: ТекИмяФормы - имя очищаемой формы (=КодФормы)
//           ОчиститьВсе - признак вида очистки формы              
//
Процедура Очистить(ТекИмяФормы,ОчиститьВсе = Ложь) Экспорт
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОбластьФорматирования"); // служебная область, очистка которой не возможна		
    СписокПоказателейНеПодлежащихОчистке.Добавить("НаименованиеОрганизации");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ВидДеятельности");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Адрес");			
	СписокПоказателейНеПодлежащихОчистке.Добавить("РазмерностьПрописью");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Руководитель");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ГлавныйБухгалтер");
		
	РегламентированнаяОтчетность.ОчиститьСтруктуруДанныхИТабличноеПолеФормы(ЭтаФорма, ТекИмяФормы, ОчиститьВсе, СписокПоказателейНеПодлежащихОчистке);
	
КонецПроцедуры // Очистить()

&НаКлиенте
Процедура ОчиститьРеглОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Форма = ДополнительныеПараметры.Форма;	
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", Форма.КодФормы));
		Вложенность = СтрокаФормы.ПолучитьЭлементы().Количество() >0;	
		
		ОчиститьРеглОтчетЗавершениеНаСервере(СтрокаФормы.КодФормы, СтрокаФормы.Многострочность, Вложенность)	
	КонецЕсли;		
КонецПроцедуры 	

&НаСервере
Процедура ОчиститьРеглОтчетЗавершениеНаСервере(КодФормы, ПризнакМногострочности, Вложенность)		
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, ПризнакМногострочности, Вложенность);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеглОтчет(ВидОчистки)
	//ФормаЗаполнена = РегламентированнаяОтчетностьКлиентСервер.формаЗ(Форма.ИмяФормы, Форма.мСписокФормБезИерархии);
	Вложенность = Ложь;
	//
	Если ВидОчистки = "ОчиститьФорму" Тогда    				
		ТекстВопроса = НСТР("ru = 'Очистить данные формы?'");
		Вложенность = Ложь;  		
	ИначеЕсли ВидОчистки = "ОчиститьФормуИПриложения" Тогда				
		ТекстВопроса = НСТР("ru = 'Очистить форму и ее приложения?'");		
		Вложенность = Истина;		
		
	КонецЕсли;	
	Оповещение = Новый ОписаниеОповещения("ОчиститьРеглОтчетЗавершение", ЭтотОбъект, Новый Структура);		
	Оповещение.ДополнительныеПараметры.Вставить("Форма",    ЭтотОбъект);
	Оповещение.ДополнительныеПараметры.Вставить("КодФормы", ЭтотОбъект.КодФормы);
		
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, ,КодВозвратаДиалога.Да);

	
	//РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму")
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьПараметрыФормыНаКлиенте(Параметры) экспорт
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	УстановитьПериодОтчета();
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);		
	КонецЦикла		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормы(ТекФорма, Параметры)
	ЗаполнитьЗначенияСвойств(ТекФорма.СтруктураРеквизитовФормы, Параметры);
	
	ТекФорма.Налогоплательщик = Параметры.Организация;
	ТекФорма.мСписокСтруктурныхЕдиниц = Параметры.мСписокСтруктурныхЕдиниц;
	ТекФорма.ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ТекФорма.мСписокСтруктурныхЕдиниц);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяГлавнойФормы(ВыбраннаяФорма) экспорт
	Возврат СтрДлина(ВыбраннаяФорма)-7
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры инициализации отчета и структуры его данных

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокСтруктурныхЕдиниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");			
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");	
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаСравнительногоПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаСравнительногоПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");		
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");		
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");	
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);			
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);	
	СтруктураРеквизитовФормы.Вставить("мПериодичность", Параметры.мПериодичность);		
	СтруктураРеквизитовФормы.Вставить("НалоговыйКомитет", Неопределено);			
	СтруктураРеквизитовФормы.Вставить("мГод");	
	СтруктураРеквизитовФормы.Вставить("мКвартал");	
	СтруктураРеквизитовФормы.Вставить("мМесяц");	
	// индивидуальные параметры формы
	СтруктураРеквизитовФормы.Вставить("мПоддержкаРаботыСоСтруктурнымиПодразделениями");	
	СтруктураРеквизитовФормы.Вставить("СтруктураСоответствияЭлементовОтчетногоПериода");
	СтруктураРеквизитовФормы.Вставить("СтруктураСоответствияЭлементовпрошлогоПериода");
	
	СтруктураРеквизитовФормы.Вставить("мКодыСтрокПрочиеПоступления");		
	СтруктураРеквизитовФормы.Вставить("мКодыСтрокПрочиеВыбытия");	

КонецПроцедуры // СформироватьСтруктуруРеквизитовФормы

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;			
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	//ФормироватьСтруктуруСтраницОтчета();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
			ТочностьЕдиницыИзмерения = 0;
			ЯзыкФормирования 		 = "ru";
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();	
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	
	мСтруктураЗначений = Новый Структура;
	
	Если СтруктураРеквизитовФормы.Свойство("СформироватьФормуОтчетаАвтоматически") И СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически <> Неопределено Тогда		
		ЗаполнитьАвтоНаСервере();		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтчетномПериоде() Экспорт

	СтрПериодОтчета = ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ФП = истина");
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
		СтруктураРеквизитовФормы.мКвартал = Лев(СтрПериодОтчета,1);
		СтруктураРеквизитовФормы.мМесяц = Неопределено;
	Иначе
		СтруктураРеквизитовФормы.мМесяц = Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		СтруктураРеквизитовФормы.мКвартал = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мГод = Лев(Прав(СтрПериодОтчета,7),4);
		
КонецПроцедуры 

&НаСервере
// В зависимости от языка заполнения процедура загружает макет в поле табличного документа
//
Процедура ЗагрузитьМакетВТабличныйДокумент() экспорт
	
	// очищаем текущие данные
	
	Макет = мМакет;
	
	Если ЗначениеЗаполнено(ЯзыкФормирования) Тогда
		Макет.КодЯзыкаМакета = ЯзыкФормирования;		
	КонецЕсли;
	
	ВсегоСтраниц = 4;
	Для Сч = 1 по ВсегоСтраниц Цикл
		ТекТабличныйДокумент = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница"+ Сч];	
		
		ОбластьОтчета = Макет.ПолучитьОбласть("Страница"+ Сч);			
		ТекТабличныйДокумент.Очистить();
		ТекТабличныйДокумент.Вывести(ОбластьОтчета);	
	 КонецЦикла;		

	мЕстьМакет = Истина;		
КонецПроцедуры

// Заполняет параметры формы. Процедура выполняется
// только для немногострочных, неглавных форм (обычных форм).
// а такеж для мВыбраннаяФорма, когда вызывается при очистке
// из основной формы
//
//   Парам: ЭлементыГруппы - структура, содержащая элементы шапки, подвала и области 
//                           итогов многострочных форм
//
Процедура ЗаполнитьПараметры(ТекИмяФормы) Экспорт
	
	Если ТекИмяФормы = Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7) Тогда 				
		//заполним основные сведения об организации
		ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекИмяФормы);		
		УстановитьПериодОтчета();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПараметры()

////////////////////////////////////////////////////////////////////////////////
// Сохранение и восстановление данных

&НаСервере
Процедура СохранитьДанныеСервере()
	РегламентированнаяОтчетность.СохранитьОтчет(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()	
	РегламентированнаяОтчетность.ВосстановитьСохраненныйОтчет(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьДанныеСервере();
		Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;	
КонецПроцедуры   

////////////////////////////////////////////////////////////////////////////////
// Печать

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
            
    Перем СтруктураГруппы; 
    
    Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
        ТекстСообщения = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");            
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);                
                
        Возврат Ложь;
        
    КонецЕсли;
            
    СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
    СтруктураРеквизитовФормы.мРежимПечати = Истина;
    
    Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
        ВыборРасчета(КодФормы, Неопределено, Неопределено);
    КонецЕсли; 

    РегламентированнаяОтчетность.СформироватьСписокПечатаемыхЛистов(ЭтаФорма);
                 
        
    Возврат Истина;
    
КонецФункции


&НаСервере
Процедура ЕдиницаИзмеренияПриИзмененииНаСервере()
	УстановитьФорматВывода();
КонецПроцедуры

&НаСервере
Процедура ЯзыкФормированияПриИзмененииНаСервере()	
	РегламентированнаяОтчетность.ПередатьДанныеИзТабличногоПоляВСтруктуру(ЭтаФорма);
	ЗагрузитьМакетВТабличныйДокумент();	
		
	УстановитьПериодОтчета();
    УстановитьФорматВывода();
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиСтраниц()
	
// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРаздел = Элементы.РазделыОтчета.ТекущиеДанные.Страницы;		
	КонецЕсли;
	
	Для Каждого ТекФорма ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",ТекФорма.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			ТекущаяСтрокаСписка.Выгружать               = ТекФорма.Выгружать;
			ТекущаяСтрокаСписка.ПоказатьСтраницу        = ТекФорма.ПоказатьСтраницу;			
			ТекущаяСтрокаСписка.АвтополучениеИтогов     = ТекФорма.АвтополучениеИтогов;  
			ТекущаяСтрокаСписка.АвтоЗаполнение          = ТекФорма.АвтоЗаполнение;  
		КонецЕсли;		   
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокФормДерева",СписокФормДерева);
	
	ДопПараметры = Новый Структура("ТекущийРаздел",ТекущийРаздел);
	
	ОповещениеПослеЗакрытияФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастройкиСтраниц",ЭтотОбъект,ДопПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.НастройкиОтчета",ПараметрыФормы, ЭтаФорма,,,,ОповещениеПослеЗакрытияФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиСтраниц(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьДанныеФормы(РезультатЗакрытия, СписокФормДерева);
	
	Модифицированность = Истина;
	
	//обновим мСписокФормБезИерархии
	Для Каждого СтрокаФормы ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",СтрокаФормы.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			СтрокаФормы.Выгружать               = ТекущаяСтрокаСписка.Выгружать;
			СтрокаФормы.ПоказатьСтраницу        = ТекущаяСтрокаСписка.ПоказатьСтраницу;			
			СтрокаФормы.АвтополучениеИтогов     = ТекущаяСтрокаСписка.АвтополучениеИтогов;  
			СтрокаФормы.АвтоЗаполнение          = ТекущаяСтрокаСписка.АвтоЗаполнение;  
		КонецЕсли;			
	КонецЦикла; 	

	Если ДополнительныеПараметры.Свойство("ТекущийРаздел") И НЕ ДополнительныеПараметры.ТекущийРаздел = Неопределено Тогда  		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(РазделыОтчета, Новый Структура("СписокФормДереваСтраницы",ДополнительныеПараметры.ТекущийРаздел));
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;			
	КонецЕсли;  	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие

//Процедура выполняет выбор процедуры расчета.
//ВыборРасчета выполняется при восстановлении данных, при изменении поля табличного документа
//
//Параметры:    ТекФорма - имя текущей формы
//              Индекс - индекс строки для многострочной формы
//              Показатель - имя ячейки, откуда была вызвана процедура расчета многострочной
//                           формы, без указания номера строки (например, без "__1")
//
Процедура ВыборРасчета(ТекФорма, Индекс = Неопределено, Показатель = Неопределено) Экспорт
	Если ТекФорма = "ФормаОтчета" Тогда
		ФормаОтчетаРасчетНаСервере(Индекс, Показатель);	
	КонецЕсли;		
КонецПроцедуры // ВыборРасчета()

&НаСервере
Процедура ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы)
	ОргСведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(Налогоплательщик, ДатаПодписи);
	//Если организация не указана то не выводим никаких сведений
	Если ОргСведения = 0 Тогда
		Возврат;
	КонецЕсли;

	// Инициализируем переменные
	РННЮЛ = ""; 			// РНН	
	НаимЮЛПол = ""; 		// Полное наименование 	
	ИИН_БИН = ""; 			// ИИН_БИН	
	Руководитель = ""; 		// ФИО руководителя				
	ГлавныйБухгалтер = ""; 	// Главный бухгалтер
	Адрес = ""; 			// Адрес
	ОсновнойВидДеятельности = "";
	
	// Получаем данные
	ОргСведения.Свойство("РННЮЛ",     			РННЮЛ);
	ОргСведения.Свойство("БИН_ИИН",   			ИИН_БИН);
	ОргСведения.Свойство("ПолноеНаименование", 	НаимЮЛПол);	
	ОргСведения.Свойство("ЮридическийАдрес", 	Адрес);	
	ОргСведения.Свойство("Руководитель",		Руководитель);	
	ОргСведения.Свойство("ГлавныйБухгалтер",	ГлавныйБухгалтер);		
	ОргСведения.Свойство("ОсновнойВидДеятельности",	ОсновнойВидДеятельности);		
	                                         		
	// Производим операции связанные с текущей формой отчетности		
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"НаименованиеОрганизации",НаимЮЛПол);
		
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"Руководитель", Руководитель);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"ГлавныйБухгалтер", ГлавныйБухгалтер);
				
КонецПроцедуры

// Процедура формирует строку периода отчета на языке формирования отчета
&НаСервере
Процедура УстановитьПериодОтчета()
	ПериодОтчетаНаРусском 	= ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП=Истина");
	ПериодОтчетаНаКазахском	= ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Л=kk_KZ; ФП=Истина");	
	
	ПериодОтчета = НСТР("ru = " + """" + ПериодОтчетаНаРусском + """; kz = " + """" + ПериодОтчетаНаКазахском + """",ЯзыкФормирования);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "ПериодОтчета",	ПериодОтчета);						
КонецПроцедуры // УстановитьПериодОтчета()

&НаСервере
// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописью;
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописью = НСтр("ru = ""тенге""; kz = ""теңге""", ЯзыкФормирования);				
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописью = НСтр("ru = ""тыс. тенге""; kz = ""мың теңге""", ЯзыкФормирования);				
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописью = НСтр("ru = ""млн. тенге""; kz = ""млн. теңге""", ЯзыкФормирования);				
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";
	КонецЕсли;
	ВсегоСтраниц = 4;
	Для Сч = 1 по ВсегоСтраниц Цикл
		// Обход по страницам формы
		Для Каждого ОбластьТаблицы Из ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница" + Сч].Области Цикл
			// по областям каждой страницы
			Если Не ОбластьТаблицы.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(ОбластьТаблицы.Имя, "ОбластьФорматирования") = 0 Тогда
				// форматируемые облатси должны быть объединены в область Значения1, Значения 2 и т.д.
				Продолжить;
			КонецЕсли;
			
			Если ОбластьТаблицы.СодержитЗначение Тогда
				Если СокрЛП(ОбластьТаблицы.ТипЗначения) = "Число" Тогда
					ОбластьТаблицы.Формат = мСтрокаФормата;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "РазмерностьПрописью", РазмерностьПрописью, Истина);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "РазмерностьПрописью1", РазмерностьПрописью, Истина);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "РазмерностьПрописью2", РазмерностьПрописью, Истина);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "РазмерностьПрописью3", РазмерностьПрописью, Истина);

	
КонецПроцедуры // УстановитьФорматВывода()

&НаСервере
// Процедура устанавливает значение показателя  в структуре отчета, с учетом уже имеющихся сумм
Процедура УстановитьЗначенияПоказателей(КодФормы, ТаблицаДанных, КодСтрокиОтчета, Значение, ТабличныйДокумент)
	
	Сумма = Значение + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, КодСтрокиОтчета);	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,КодСтрокиОтчета, Сумма, ТабличныйДокумент);
КонецПроцедуры

&НаСервере
// Функция заполняет структуру данными о соответствии счета БУ - строке баланса
//
// Функция заполняет структуру данными о соответствии счета БУ - строке отчета
//
Функция ЗаполнитьСтруктуруСоответствийЭлементов(Период = 1)
	МакетСоставаПоказателей = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("СоставПоказателей");
	ТекОбласть    			= МакетСоставаПоказателей.Область("Структура" + Прав(мВыбраннаяФорма,7));
	СтруктураСоответствияЭлементов = Новый Структура;
	Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
		// перебираем строки макета		
		ИмяЭлемента = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
		
		ГрафаОтчетаОтчетногоПериода = СокрП(МакетСоставаПоказателей.Область(Ном, Период + 1).Текст);		
		
		Если ЗначениеЗаполнено(ИмяЭлемента) Тогда         // признак конечной строки			
			СтруктураСоответствияЭлементов.Вставить(ИмяЭлемента, ГрафаОтчетаОтчетногоПериода);						
		КонецЕсли;		
	КонецЦикла; 
	
	Возврат СтруктураСоответствияЭлементов
КонецФункции // ЗаполнитьСтруктуруСоответствияЭлементов

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокСчетовКапитала()
	
	СписокСчетовКапитала = Новый СписокЗначений;
	СписокСчетовКапитала.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.УставныйКапитал")); 							// Счет5000
	СписокСчетовКапитала.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.НеоплаченныйКапитал_"));						// Счет5100
	СписокСчетовКапитала.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.Резервы")); 									// Счет5400
	СписокСчетовКапитала.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.НераспределеннаяПрибыльНепокрытыйУбыток"));	// Счет5500
	
	Возврат СписокСчетовКапитала;
КонецФункции
&НаСервере
// Функция возвращает код строки макета отчета для конкретного счета
 // 
Функция ПолучитьКодСтрокиОтчета(Элемент, Период)
			
	Если ЗначениеЗаполнено(Элемент) Тогда
		// поиск Структуре соответствия
		ИмяПредопределенногоЭлемента = РегламентированнаяОтчетностьПереопределяемый.ПолучитьИмяЭлементаПеречисленияПоЗначению(Элемент);
		
		СтруктураСоответствияЭлементов = ?(Период = 1, СтруктураРеквизитовФормы.СтруктураСоответствияЭлементовОтчетногоПериода, СтруктураРеквизитовФормы.СтруктураСоответствияЭлементовпрошлогоПериода); 
		Если СтруктураСоответствияЭлементов.Свойство(ИмяПредопределенногоЭлемента) Тогда
			КодСтроки  = СтруктураСоответствияЭлементов[ИмяПредопределенногоЭлемента];
		КонецЕсли;	
	КонецЕсли;

	
	Возврат КодСтроки;
КонецФункции // ПолучитьКодСтрокиОтчета

&НаКлиенте
// Выполняет расчет вычисляемых показателей формы
// Параметр Изменено определяет откуда была вызвана данная процедура
// 
// При Изменено = Истина вызывается при изменении поля табличного документа,
// в остальных случаях параметр = Ложь.
// Основное назначение - манипуляция со значениями полей, которые которые подлежит не суммовому расчету, 
// а расчету суммы с добавлением входящих в него значений
//
Процедура ФормаОтчетаРасчет(ИмяЯчейки, ЗначениеЯчейки, Изменено = Ложь)

	 //Расчет вычисляемых ячеек
	
	ТекИмяФормы = "ФормаОтчета";	
	ФормаОтчетаРасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки);	
			    	                	
КонецПроцедуры   //ФормаРасчет()

&НаСервере
Процедура РассчитатьИтогПоСтроке(ИмяСтроки, Таблицаданных)
	ИтогоКапитал = 0;
	Для НомерКолонки = 3 по 8 Цикл
		ИтогоКапитал = ИтогоКапитал + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,ИмяСтроки +"_"+ НомерКолонки); 		
	КонецЦикла;
	
	ВсегоСтраниц = 4;
	Для СчетчикСтраниц = 1 По ВсегоСтраниц Цикл
		Если ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница" + СчетчикСтраниц].Области.Найти(ИмяСтроки + "_9") <> Неопределено Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,ИмяСтроки+ "_9", ИтогоКапитал, ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница" + СчетчикСтраниц]);			
			Возврат;
		КонецЕсли;
	КонецЦикла;	    
КонецПроцедуры // РассчитатьИтогПоСтроке()


&НаСервере
Процедура ФормаОтчетаРасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки )
	ТекИмяФормы = "ФормаОтчета";
	
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,ИмяЯчейки ,ЗначениеЯчейки);
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ТекИмяФормы);	
	
	Для НомерКолонки = 3 По 9 Цикл
		// Строка 100 		
		Итого = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Б010_" + НомерКолонки)
		 		+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Б011_" + НомерКолонки);
				
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,"Б100_" + НомерКолонки ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница1);			
		
		// Строка 220 
		Итого = 0;
		Для Счетчик  = 221 по 229 Цикл
			НомерСтроки = "Б" + Формат(Счетчик,"ЧЦ=3; ЧДЦ=0; ЧВН=") + "_";			
			Итого = Итого + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,НомерСтроки + НомерКолонки);
		КонецЦикла;	
        РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,"Б220_" + НомерКолонки ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница1);			
				
		// Строка 200
		Итого = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Б210_" + НомерКолонки)
				+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Б220_" + НомерКолонки);
				
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,"Б200_" + НомерКолонки ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница1);					
		
				
		// Строка 300 
		Итого = 0;
		Для Счетчик  = 310 по 318 Цикл
			НомерСтроки = "Б" + Формат(Счетчик,"ЧЦ=3; ЧДЦ=0; ЧВН=") + "_";			
			Итого = Итого + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,НомерСтроки + НомерКолонки);
		КонецЦикла;	
        РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,"Б300_" + НомерКолонки ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница2);
				
		// Строка 400 
		Итого = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Б100_" + НомерКолонки)
				+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Б200_" + НомерКолонки)
				+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Б300_" + НомерКолонки);
				
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,"Б400_" + НомерКолонки ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница2);
				
		// Строка 500 
		Итого = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Б400_" + НомерКолонки)
				+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Б401_" + НомерКолонки);
				
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,"Б500_" + НомерКолонки ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница2);		
				
		// Строка 620 
		Итого = 0;
		Для Счетчик  = 621 по 629 Цикл
			НомерСтроки = "Б" + Формат(Счетчик,"ЧЦ=3; ЧДЦ=0; ЧВН=") + "_";			
			Итого = Итого + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,НомерСтроки + НомерКолонки);
		КонецЦикла;	
        РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,"Б620_" + НомерКолонки ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница2);
		
		// Строка 600 
		Итого = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Б610_" + НомерКолонки)
				+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Б620_" + НомерКолонки);
				
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,"Б600_" + НомерКолонки ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница2);		
													
												
		// Строка 700 
		Итого = 0;
		Для Счетчик  = 710 по 718 Цикл
			НомерСтроки = "Б" + Формат(Счетчик,"ЧЦ=3; ЧДЦ=0; ЧВН=") + "_";			
			Итого = Итого + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,НомерСтроки + НомерКолонки);
		КонецЦикла;	
        РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,"Б700_" + НомерКолонки ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница3);
		
		
		// Строка 800 
		Итого = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Б500_" + НомерКолонки)
				+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Б600_" + НомерКолонки)
				+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"Б700_" + НомерКолонки);
				
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,"Б800_" + НомерКолонки ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница4);					
												
	КонецЦикла;
	
	// Расчет итоговой прибыли;
	РассчитатьИтогПоСтроке("Б010", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б011", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б100", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б200", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б210", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б221", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б222", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б223", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б224", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б225", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б226", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б227", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б228", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б229", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б300", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б310", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б310а", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б310б", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б310с", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б311", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б312", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б313", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б314", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б315", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б316", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б317", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б318", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б400", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б401", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б500", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б600", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б610", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б620", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б621", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б622", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б623", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б624", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б625", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б626", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б627", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б628", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б629", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б700", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б715", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б716", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б717", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б718", ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б800", ТаблицаДанных);
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, КодФормы, ТаблицаДанных);
КонецПроцедуры

&НаСервере
Функция ФормаРассчитатьДанныеФормы(ДатаНачалаПериода, ДатаОкончанияПериода) 		
	
	МассивСчетовКапитала = ПолучитьСписокСчетовКапитала();	
	
	СписокСчетовДивидендов = Новый СписокЗначений;
	СписокСчетовДивидендов.Добавить(ПланыСчетов.Типовой.КраткосрочнаяКредиторскаяЗадолженностьПоДивидендамИДоходамУчастников); // 3030
	
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("СписокОрганизаций",  	мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("ВидыСубконто", 			ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыИзмененийВСобственномКапитале);
	Запрос.УстановитьПараметр("МассивСчетовКапитала", 	МассивСчетовКапитала);
	Запрос.УстановитьПараметр("СписокСчетовДивидендов", СписокСчетовДивидендов);	
	Запрос.УстановитьПараметр("Счет5400", 				ПланыСчетов.Типовой.Резервы);
	Запрос.УстановитьПараметр("ДатаНачала", 			ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", 			ДатаОкончанияПериода);
		
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаКапитал.Капитал,
	               |	ТаблицаКапитал.Субконто1,
	               |	СУММА(ТаблицаКапитал.СуммаОборотДт) КАК СуммаОборотДт,
	               |	СУММА(ТаблицаКапитал.СуммаОборотКт) КАК СуммаОборотКт
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВЫБОР
	               |			КОГДА ТиповойОбороты.Счет В ИЕРАРХИИ (&Счет5400)
	               |				ТОГДА 2 // ""Резервный""
	               |			ИНАЧЕ 1 //""Уставный""
	               |		КОНЕЦ КАК Капитал,
	               |		ТиповойОбороты.Субконто1 КАК Субконто1,
	               |		ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) КАК СуммаОборотДт,
	               |		ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) КАК СуммаОборотКт
	               |	ИЗ
	               |		РегистрБухгалтерии.Типовой.Обороты(&ДатаНачала, &ДатаОкончания, , Счет В ИЕРАРХИИ (&МассивСчетовКапитала), &ВидыСубконто, Организация В (&СписокОрганизаций), НЕ КорСчет В ИЕРАРХИИ (&МассивСчетовКапитала), ) КАК ТиповойОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		3, //""Нераспределенная прибыль""
	               |		ВЫБОР
	               |			КОГДА ТиповойОборотыПоДивидендам.КорСчет В (&СписокСчетовДивидендов)
	               |				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыИзмененийВСобственномКапитале.Дивиденды)
	               |			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыИзмененийВСобственномКапитале.ДоходУбытокЗаПериод)
	               |		КОНЕЦ,
	               |		ЕСТЬNULL(ТиповойОборотыПоДивидендам.СуммаОборотДт, 0),
	               |		ЕСТЬNULL(ТиповойОборотыПоДивидендам.СуммаОборотКт, 0)
	               |	ИЗ
	               |		РегистрБухгалтерии.Типовой.Обороты(&ДатаНачала, &ДатаОкончания, , Счет В ИЕРАРХИИ (Значение(ПланСчетов.Типовой.НераспределеннаяПрибыльНепокрытыйУбыток)), , Организация В (&СписокОрганизаций), НЕ КорСчет В ИЕРАРХИИ (&МассивСчетовКапитала), ) КАК ТиповойОборотыПоДивидендам) КАК ТаблицаКапитал
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаКапитал.Капитал,
	               |	ТаблицаКапитал.Субконто1";  
				   				   		
	Результат = Запрос.Выполнить();
		     	
	Возврат Результат;		 

КонецФункции // ФормаРассчитатьДанныеФормы()

&НаСервере
Функция ФормаРассчитатьСальдо(ДатаНачалаПериода, ДатаОкончанияПериода) 
		
	МассивСчетовКапитала = Новый Массив;
	МассивСчетовКапитала.Добавить(ПланыСчетов.Типовой.УставныйКапитал); 						// Счет5000
	МассивСчетовКапитала.Добавить(ПланыСчетов.Типовой.НеоплаченныйКапитал_);					// Счет5100
	МассивСчетовКапитала.Добавить(ПланыСчетов.Типовой.Резервы); 								// Счет5400
	МассивСчетовКапитала.Добавить(ПланыСчетов.Типовой.НераспределеннаяПрибыльНепокрытыйУбыток); // Счет5500
	
		
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("СписокОрганизаций",  	мСписокСтруктурныхЕдиниц);	
	Запрос.УстановитьПараметр("МассивСчетовКапитала", 	МассивСчетовКапитала);	
	Запрос.УстановитьПараметр("ДатаНачала", 			ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", 			ДатаОкончанияПериода);
	Запрос.УстановитьПараметр("Счет5400", 				ПланыСчетов.Типовой.Резервы);
	Запрос.УстановитьПараметр("Счет5500", 				ПланыСчетов.Типовой.НераспределеннаяПрибыльНепокрытыйУбыток);
		
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТиповойОстаткиИОбороты.Капитал,
	               |	СУММА(ТиповойОстаткиИОбороты.СуммаНачальныйОстаток) КАК СуммаНачальныйОстаток,
	               |	СУММА(ТиповойОстаткиИОбороты.СуммаКонечныйОстаток) КАК СуммаКонечныйОстаток
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВЫБОР
	               |			КОГДА ТиповойОстаткиИОбороты.Счет В ИЕРАРХИИ (&Счет5400)
	               |				ТОГДА 2
	               |			КОГДА ТиповойОстаткиИОбороты.Счет В ИЕРАРХИИ (&Счет5500)
	               |				ТОГДА 3
	               |			ИНАЧЕ 1
	               |		КОНЕЦ КАК Капитал,
	               |		ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаНачальныйОстатокКт, 0) - ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаНачальныйОстатокДт, 0) КАК СуммаНачальныйОстаток,
	               |		ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаКонечныйОстатокКт, 0) - ЕСТЬNULL(ТиповойОстаткиИОбороты.СуммаКонечныйОстатокДт, 0) КАК СуммаКонечныйОстаток
	               |	ИЗ
	               |		РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , , Счет В ИЕРАРХИИ (&МассивСчетовКапитала), , Организация В (&СписокОрганизаций)) КАК ТиповойОстаткиИОбороты) КАК ТиповойОстаткиИОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТиповойОстаткиИОбороты.Капитал";  
				   				   		
	Результат = Запрос.Выполнить();
		     	
	Возврат Результат;		 
	
КонецФункции // ФормаРассчитатьДанныеФормы()

&НаСервере
// Предназначена для получения имени элемента перечисления по значению.
//
// Параметры:
//	Элемент перечисления.
//
// Возвращаемое значение:
//	Строка - имя элемента перечисления в метаданных.
//
Функция ЕстьЭлементПеречисленияВМетаданных(ЗначениеПеречисления) 
	
	Результат = Ложь;
	ИмяПеречисления = "ВидыИзмененийВСобственномКапитале";
	Для каждого ЭлементПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		Если ЭлементПеречисления.Имя = СокрЛП(ЗначениеПеречисления) Тогда
			// элемент найден
			Результат = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Результат;	
КонецФункции // ЕстьЭлементПеречисленияВМетаданных

// Функция создает выборку результата запроса и позиционирует ее на требуемое значение.
// Выборку можно использовать для извлечения из нее итогов и построения подчиненных выборок.
//
// Параметры:
//  РезультатЗапроса - результат запроса, от которого надо строить выборку.
//  Группировки      - Структура - группировки, по которым надо строить выборку, 
//                     и значения группировок, по которым надо позиционировать выборку.
//                     Имя группировки указывается в качестве ключа, а значение - 
//                     в качестве значения элемента структуры.
//
// Возвращаемое значение:
//  РезультатЗапроса, ВыборкаИзРезультатаЗапроса, Неопределено.
//  Если не указана ни одна группировка, возвращается результат запроса по бухгалтерским итогам.
//  Если в параметрах функции указаны группировки и имеются итоги по указанным значениям группировок, 
//  возвращается ВыборкаИзРезультатаЗапроса.
//  Если указаны неверные группировки, или нет итогов по указанным группировкам, возаращается Неопределено.
//
Функция ПолучитьВыборкуИтогов(РезультатЗапроса, Группировки)

	Выборка           = РезультатЗапроса;
	Номер             = 0;

	Для каждого ЭлементГруппировка Из Группировки Цикл

		Номер = Номер + 1;

		Если РезультатЗапроса.Колонки.Найти(ЭлементГруппировка.Ключ) = Неопределено Тогда
			Сообщить("Неверное имя группировки: """ + ЭлементГруппировка.Ключ + """.", СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецЕсли;

		Выборка = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ЭлементГруппировка.Ключ);

		Если НЕ Выборка.НайтиСледующий(ЭлементГруппировка.Значение, ЭлементГруппировка.Ключ) Тогда
			Возврат Неопределено;
		КонецЕсли;
        
	КонецЦикла;

	Попытка

		// Проверка валидности остатков по Дт-Кт для Активных и Пассивных Счетов
		Если Выборка.ВидСчета = ВидСчета.АктивноПассивный Тогда // В этом случае никаких проверок делать не надо.
			Возврат Выборка;
		КонецЕсли;

		// Скопируем данные в новую структуру, т.к. в результате запроса ничего не изменить.
		ИтогВыборки = Новый Структура();
		Для каждого Колонка из РезультатЗапроса.Колонки Цикл
			ИтогВыборки.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла;

		// Проверка валидности полей.
		Если ИтогВыборки.ВидСчета = ВидСчета.Активный Тогда

			Если ИтогВыборки.СуммаНачальныйОстатокКт <> 0 Тогда
				ИтогВыборки.СуммаНачальныйОстатокДт = ИтогВыборки.СуммаНачальныйОстатокДт + (-ИтогВыборки.СуммаНачальныйОстатокКт);
				ИтогВыборки.СуммаНачальныйОстатокКт = 0;
			КонецЕсли;

			Если ИтогВыборки.СуммаКонечныйОстатокКт <> 0 Тогда
				ИтогВыборки.СуммаКонечныйОстатокДт = ИтогВыборки.СуммаКонечныйОстатокДт + (-ИтогВыборки.СуммаКонечныйОстатокКт);
				ИтогВыборки.СуммаКонечныйОстатокКт =0;
			КонецЕсли;

		КонецЕсли;

		Если ИтогВыборки.ВидСчета = ВидСчета.Пассивный Тогда

			Если ИтогВыборки.СуммаНачальныйОстатокДт <> 0 Тогда
				ИтогВыборки.СуммаНачальныйОстатокКт = ИтогВыборки.СуммаНачальныйОстатокКт + (-ИтогВыборки.СуммаНачальныйОстатокДт);
				ИтогВыборки.СуммаНачальныйОстатокДт = 0;
			КонецЕсли;

			Если ИтогВыборки.СуммаКонечныйОстатокДт <> 0 Тогда
				ИтогВыборки.СуммаКонечныйОстатокКт = ИтогВыборки.СуммаКонечныйОстатокКт + (-ИтогВыборки.СуммаКонечныйОстатокДт);
				ИтогВыборки.СуммаКонечныйОстатокДт =0;
			КонецЕсли;

		КонецЕсли;

		Возврат ИтогВыборки;

	Исключение
		Возврат Выборка;

	КонецПопытки;

КонецФункции

// Функция позволяет получить требуемый итог по указанным значениям группировок.
// Итоги должны быть предварительно рассчитаны при помощи процедуры РассчитатьИтоги().
//
// Возвращаемое значение:
//
//  Число - величина требуемого бухгалтерского итога.
//
Функция ПолучитьИтог(РезультатЗапроса, ИмяИтога, Знач Группировки = Неопределено, Значение1 = Неопределено)

	// Параметр Группировки преобразуется в структуру, если был передан в виде строки.
	Если ТипЗнч(Группировки) <> Тип("Структура") Тогда
		Группировки = Новый Структура(Группировки, Значение1);
	КонецЕсли;
	
	// Строится и возвращается необходимая выборка.
	Выборка =  ПолучитьВыборкуИтогов(РезультатЗапроса, Группировки);
                                  
	// Обращаться к итогу имеет смысл, если выборка была спозиционирована.
	Если ТипЗнч(Выборка) <> Тип("ВыборкаИзРезультатаЗапроса")
	   И ТипЗнч(Выборка) <> Тип("Структура") Тогда
		Возврат 0;
	КонецЕсли;

	// Возвращается требуемое поле выборки.
	Возврат Выборка[ИмяИтога];

КонецФункции

// Функция вычисляет начальный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по дебету счета, указанного в параметре.
//
Функция СНД(Счет, РезультатЗапроса)

	Перем Итог;

	Итог = ПолучитьИтог(РезультатЗапроса,"СуммаНачальныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНД()

// Функция вычисляет начальный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по кредиту счета, указанного в параметре.
//
Функция СНК(Счет, РезультатЗапроса)

	Перем Итог;

	Возврат ПолучитьИтог(РезультатЗапроса, "СуммаНачальныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНК()

// Функция вычисляет конечный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - конечный остаток по дебету счета, указанного в параметре.
//
Функция СКД(Счет, РезультатЗапроса)

	Перем Итог;

	Итог = ПолучитьИтог(РезультатЗапроса, "СуммаКонечныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКД()

// Функция вычисляет конечный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка по кредиту указаного счета.
//
Функция СКК(Счет, РезультатЗапроса)

	Перем Итог;

	Итог = ПолучитьИтог(РезультатЗапроса, "СуммаКонечныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКК()



&НаСервере
// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя, ТаблицаДанных)

	ВсегоСтраниц = 4;
	Для Сч = 1 по ВсегоСтраниц Цикл
		ТекТабличныйДокумент = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница"+ Сч];	
		Если ТекТабличныйДокумент.Области.Найти(ИмяПоказателя)<> Неопределено Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяПоказателя, ЗначениеПоказателя, ТекТабличныйДокумент);		
			Возврат;
		КонецЕсли;			
	КонецЦикла;	
	
КонецПроцедуры // УстановитьЗначениеПоказателя()


&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
		
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, Ложь,Ложь);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, КодФормы);	
		
		// Инициализация
	ПС = ПланыСчетов["Типовой"];
	
	Счет5000 = ПС.УставныйКапитал;
	Счет5100 = ПС.НеоплаченныйКапитал_;
	Счет5200 = ПС.ВыкупленныеСобственныеДолевыеИнструменты_;
	Счет5300 = ПС.ЭмиссионныйДоход_;
	Счет5400 = ПС.Резервы;
	Счет5500 = ПС.НераспределеннаяПрибыльНепокрытыйУбыток;
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(Счет5000);
	МассивСчетов.Добавить(Счет5100);
	МассивСчетов.Добавить(Счет5200);
	МассивСчетов.Добавить(Счет5300);
	МассивСчетов.Добавить(Счет5400);
	МассивСчетов.Добавить(Счет5500);
			
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокСтруктурныхЕдиниц",  мСписокСтруктурныхЕдиниц);	
	Запрос.УстановитьПараметр("ВидыСубконто", ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыИзмененийВСобственномКапитале);
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Запрос.УстановитьПараметр("Счет5200", Счет5200);
	Запрос.УстановитьПараметр("Счет5300", Счет5300);
	Запрос.УстановитьПараметр("Счет5400", Счет5400);
	Запрос.УстановитьПараметр("Счет5500", Счет5500);
    	
	
	///////////////////////////////////////////////////////////////////////
	//	ВЫЧИСЛИМ ДАННЫЕ ЗА ПРЕДЫДУЩИЙ ПЕРИОД
	
	ДатаНачалаПР = СтруктураРеквизитовФормы.мДатаНачалаСравнительногоПериодаОтчета;
	ДатаОкончанияПР = СтруктураРеквизитовФормы.мДатаКонцаСравнительногоПериодаОтчета;
	
	
	Запрос.УстановитьПараметр("НачПериод", ДатаНачалаПР);
	Запрос.УстановитьПараметр("КонПериод", Новый Граница(КонецДня(ДатаОкончанияПР), ВидГраницы.Включая));
		
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаКапитал.Капитал,
	               |	ТаблицаКапитал.Субконто1,
	               |	СУММА(ТаблицаКапитал.СуммаОборотДт) КАК СуммаОборотДт,
	               |	СУММА(ТаблицаКапитал.СуммаОборотКт) КАК СуммаОборотКт
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВЫБОР
	               |			КОГДА ТиповойОбороты.Счет В ИЕРАРХИИ (&Счет5500)
	               |				ТОГДА 7
	               |			КОГДА ТиповойОбороты.Счет В ИЕРАРХИИ (&Счет5400)
	               |				ТОГДА 6
	               |			КОГДА ТиповойОбороты.Счет В ИЕРАРХИИ (&Счет5300)
	               |				ТОГДА 4
	               |			КОГДА ТиповойОбороты.Счет В ИЕРАРХИИ (&Счет5200)
	               |				ТОГДА 5
	               |			ИНАЧЕ 3
	               |		КОНЕЦ КАК Капитал,
	               |		ВЫБОР
	               |			КОГДА ТиповойОбороты.Субконто1 ССЫЛКА Перечисление.ВидыИзмененийВСобственномКапитале
	               |				ТОГДА ТиповойОбороты.Субконто1" + ?(ЕстьЭлементПеречисленияВМетаданных("Дивиденды"),"
				   |            КОГДА ТиповойОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяКредиторскаяЗадолженностьПоДивидендамИДоходамУчастников)
				   |				ТОГДА Значение(Перечисление.ВидыИзмененийВСобственномКапитале.Дивиденды) ", "") +" 
	               |			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыИзмененийВСобственномКапитале.ПустаяСсылка)
	               |		КОНЕЦ КАК Субконто1,
	               |		ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) КАК СуммаОборотДт,
	               |		ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) КАК СуммаОборотКт
	               |	ИЗ
	               |		РегистрБухгалтерии.Типовой.Обороты(&НачПериод, &КонПериод, , Счет В ИЕРАРХИИ (&МассивСчетов), , Организация В (&СписокСтруктурныхЕдиниц), , ) КАК ТиповойОбороты) КАК ТаблицаКапитал
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаКапитал.Капитал,
	               |	ТаблицаКапитал.Субконто1";  
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Капитал  = Выборка.Капитал;
		СуммаДО  = Выборка.СуммаОборотДт;
		СуммаКО  = Выборка.СуммаОборотКт;
		Субконто = Выборка.Субконто1;
		
		ИмяЯчейки = "";
		Сумма = СуммаКО - СуммаДО;
		Если Капитал = 7 Тогда		 
			// по счета 5500 не ведется аналитика по Видам изменения в капитале (исключение составляют дивиденды)
			Если  ЕстьЭлементПеречисленияВМетаданных("Дивиденды")
				И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.Дивиденды Тогда
				ИмяЯчейки = "Б315";
			Иначе	
				// помещаем в строкуприбыли убытка за год
				ИмяЯчейки = "Б210"; 	 
			КонецЕсли;	
			
		ИначеЕсли  Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ИзмененияУчетнойПолитики Тогда				
			ИмяЯчейки = "Б011";
		ИначеЕсли  Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств Тогда				
			ИмяЯчейки = "Б221";
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ПереоценкаФинансовыхАктивовИмеющихсяВНаличииДляПродажи")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаФинансовыхАктивовИмеющихсяВНаличииДляПродажи Тогда
			
			ИмяЯчейки = "Б223";				
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ДоляВПрочейСовокупнойПрибылиУбыткеАссоциированныхОрганизаций")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ДоляВПрочейСовокупнойПрибылиУбыткеАссоциированныхОрганизаций Тогда
			
			ИмяЯчейки = "Б224";				
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("АктуарныеПрибылиУбыткиПоПенсионнымОбязательствам")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.АктуарныеПрибылиУбыткиПоПенсионнымОбязательствам Тогда
			
			ИмяЯчейки = "Б225";				
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ЭффектИзмененияВСтавкеПодоходногоНалогаНаОтсроченныйНалогДочернихОрганизаций")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ЭффектИзмененияВСтавкеПодоходногоНалогаНаОтсроченныйНалогДочернихОрганизаций Тогда
			
			ИмяЯчейки = "Б226";				
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ХеджированиеДенежныхПотоков")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ХеджированиеДенежныхПотоков Тогда
			
			ИмяЯчейки = "Б227";
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("КурсовыеРазницыЗарубежныхПодразделений")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.КурсовыеРазницыЗарубежныхПодразделений Тогда
			
			ИмяЯчейки = "Б228";
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ХеджированиеЧистыхИнвестицийВЗарубежныеОперации")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ХеджированиеЧистыхИнвестицийВЗарубежныеОперации Тогда
			
			ИмяЯчейки = "Б229";
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ВознаграждениеРаботниковАкциями")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ВознаграждениеРаботниковАкциями Тогда
			
			ИмяЯчейки = "Б310";
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ВзносыСобственников")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ВзносыСобственников Тогда
			
			ИмяЯчейки = "Б311";
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ЭмиссияАкций")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ЭмиссияАкций Тогда
			
			ИмяЯчейки = "Б312";
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ВыпускСобственныхДолевыхИнструментовСвязанныхСОбъединениемБизнеса")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ВыпускСобственныхДолевыхИнструментовСвязанныхСОбъединениемБизнеса Тогда
			
			ИмяЯчейки = "Б313";
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ДолевойКомпонентКонвертируемыхИнструментов")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ДолевойКомпонентКонвертируемыхИнструментов Тогда
			
			ИмяЯчейки = "Б314";
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("Дивиденды")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.Дивиденды Тогда
			
			ИмяЯчейки = "Б315";
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ПрочиеРаспределенияВПользуСобственников")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ПрочиеРаспределенияВПользуСобственников Тогда
			
			ИмяЯчейки = "Б316";
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ПрочиеОперацииССобственниками")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ПрочиеОперацииССобственниками Тогда
			
			ИмяЯчейки = "Б317";
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ИзмененияВДолеУчастияВДочернихОрганизацияхНеПриводящиеКПотереКонтроля")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ИзмененияВДолеУчастияВДочернихОрганизацияхНеПриводящиеКПотереКонтроля Тогда
			
			ИмяЯчейки = "Б318";
		Иначе   					
			ИмяЯчейки = "Б317";
		КонецЕсли;		
		Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
			УстановитьЗначениеПоказателя(ИмяЯчейки + "_" + СокрЛП(Капитал), Сумма, ТаблицаДанных);	
			РассчитатьИтогПоСтроке(ИмяЯчейки, ТаблицаДанных);
		КонецЕсли;	
	КонецЦикла;
	
		   
	////////////////////////////ОТЧЕТНЫЙ ГОД //////////////////////////////////////////////////////////
	Запрос.УстановитьПараметр("НачПериод", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериод", Новый Граница(КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Капитал  = Выборка.Капитал;
		СуммаДО  = Выборка.СуммаОборотДт;
		СуммаКО  = Выборка.СуммаОборотКт;
		Субконто = Выборка.Субконто1;
		
		ИмяЯчейки = "";
		Сумма = СуммаКО - СуммаДО;		
		Если Капитал = 7 Тогда		
			// по счета 5500 не ведется аналитика по Видам изменения в капитале (исключение составляют дивиденды)
			Если  ЕстьЭлементПеречисленияВМетаданных("Дивиденды")
				И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.Дивиденды Тогда
				ИмяЯчейки = "Б715";
			Иначе	
				
				// по счета 5500 не ведется аналитика по Видам изменения в капитале
				// помещаем в строкуприбыли убытка за год
				ИмяЯчейки = "Б610"; 				
			КонецЕсли;
		ИначеЕсли  Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ИзмененияУчетнойПолитики Тогда
			
			ИмяЯчейки = "Б401";
		ИначеЕсли  Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств Тогда
			
			ИмяЯчейки = "Б621";
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ПереоценкаФинансовыхАктивовИмеющихсяВНаличииДляПродажи")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаФинансовыхАктивовИмеющихсяВНаличииДляПродажи Тогда
			
			ИмяЯчейки = "Б623";
			
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ДоляВПрочейСовокупнойПрибылиУбыткеАссоциированныхОрганизаций")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ДоляВПрочейСовокупнойПрибылиУбыткеАссоциированныхОрганизаций Тогда
			
			ИмяЯчейки = "Б624";			
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("АктуарныеПрибылиУбыткиПоПенсионнымОбязательствам")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.АктуарныеПрибылиУбыткиПоПенсионнымОбязательствам Тогда
			
			
			ИмяЯчейки = "Б625";			
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ЭффектИзмененияВСтавкеПодоходногоНалогаНаОтсроченныйНалогДочернихОрганизаций")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ЭффектИзмененияВСтавкеПодоходногоНалогаНаОтсроченныйНалогДочернихОрганизаций Тогда
			
			ИмяЯчейки = "Б626";			
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ХеджированиеДенежныхПотоков")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ХеджированиеДенежныхПотоков Тогда
			
			ИмяЯчейки = "Б627";
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("КурсовыеРазницыЗарубежныхПодразделений")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.КурсовыеРазницыЗарубежныхПодразделений Тогда
			
			ИмяЯчейки = "Б628";
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ХеджированиеЧистыхИнвестицийВЗарубежныеОперации")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ХеджированиеЧистыхИнвестицийВЗарубежныеОперации Тогда
			
			ИмяЯчейки = "Б629";
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ВознаграждениеРаботниковАкциями")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ВознаграждениеРаботниковАкциями Тогда
			
			ИмяЯчейки = "Б710";
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ВзносыСобственников")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ВзносыСобственников Тогда
			
			ИмяЯчейки = "Б711";
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ЭмиссияАкций")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ЭмиссияАкций Тогда
			
			ИмяЯчейки = "Б712";
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ВыпускСобственныхДолевыхИнструментовСвязанныхСОбъединениемБизнеса")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ВыпускСобственныхДолевыхИнструментовСвязанныхСОбъединениемБизнеса Тогда
			
			ИмяЯчейки = "Б713";
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ДолевойКомпонентКонвертируемыхИнструментов")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ДолевойКомпонентКонвертируемыхИнструментов Тогда
			
			ИмяЯчейки = "Б714";
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("Дивиденды")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.Дивиденды Тогда
			
			ИмяЯчейки = "Б715";
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ПрочиеРаспределенияВПользуСобственников")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ПрочиеРаспределенияВПользуСобственников Тогда
			
			ИмяЯчейки = "Б716";
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ПрочиеОперацииССобственниками")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ПрочиеОперацииССобственниками Тогда
			
			ИмяЯчейки = "Б717";
		ИначеЕсли  ЕстьЭлементПеречисленияВМетаданных("ИзмененияВДолеУчастияВДочернихОрганизацияхНеПриводящиеКПотереКонтроля")
			И Субконто = Перечисления.ВидыИзмененийВСобственномКапитале.ИзмененияВДолеУчастияВДочернихОрганизацияхНеПриводящиеКПотереКонтроля Тогда
			
			ИмяЯчейки = "Б718";
		Иначе   								
			ИмяЯчейки = "Б717";
		КонецЕсли;		
		
		Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
			УстановитьЗначениеПоказателя(ИмяЯчейки + "_" + СокрЛП(Капитал), Сумма, ТаблицаДанных);	
			РассчитатьИтогПоСтроке(ИмяЯчейки,ТаблицаДанных);
		КонецЕсли;	
	КонецЦикла;
	
		
	
	// Бухгалтерский итоги по счетам
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТиповойОстаткиИОбороты.Счет КАК Счет,
	               |	ТиповойОстаткиИОбороты.Счет.Вид КАК ВидСчета,
	               |	ТиповойОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДт,
	               |	ТиповойОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СуммаНачальныйОстатокКт,
	               |	ТиповойОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
	               |	ТиповойОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, ПЕРИОД, , Счет В ИЕРАРХИИ (&МассивСчетов), , Организация В (&СписокСтруктурныхЕдиниц)) КАК ТиповойОстаткиИОбороты
	               |ИТОГИ
	               |	СУММА(СуммаНачальныйОстатокДт),
	               |	СУММА(СуммаНачальныйОстатокКт),
	               |	СУММА(СуммаКонечныйОстатокДт),
	               |	СУММА(СуммаКонечныйОстатокКт)
	               |ПО
	               |	Счет ИЕРАРХИЯ";
				   
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Запрос.УстановитьПараметр("СписокСтруктурныхЕдиниц",  мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачалаПР);
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(ДатаОкончанияПР), ВидГраницы.Включая));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьЗначениеПоказателя("Б010_3", СНК(Счет5000,РезультатЗапроса) - СНД(Счет5000,РезультатЗапроса) + СНК(Счет5100,РезультатЗапроса) - СНД(Счет5100,РезультатЗапроса), ТаблицаДанных);
	УстановитьЗначениеПоказателя("Б010_4", СНК(Счет5300,РезультатЗапроса) - СНД(Счет5300,РезультатЗапроса), ТаблицаДанных);
	УстановитьЗначениеПоказателя("Б010_5", СНК(Счет5200,РезультатЗапроса) - СНД(Счет5200,РезультатЗапроса), ТаблицаДанных);
	УстановитьЗначениеПоказателя("Б010_6", СНК(Счет5400,РезультатЗапроса) - СНД(Счет5400,РезультатЗапроса), ТаблицаДанных);
	УстановитьЗначениеПоказателя("Б010_7", СНК(Счет5500,РезультатЗапроса) - СНД(Счет5500,РезультатЗапроса), ТаблицаДанных);
	
	РассчитатьИтогПоСтроке("Б010", ТаблицаДанных);
	
	// Начальное сальдо отчетного года, это конечное сальдо предыдущего года
	
	УстановитьЗначениеПоказателя("Б400_3", СКК(Счет5000,РезультатЗапроса) - СКД(Счет5000,РезультатЗапроса) + СКК(Счет5100,РезультатЗапроса) - СКД(Счет5100,РезультатЗапроса), ТаблицаДанных);
	УстановитьЗначениеПоказателя("Б400_4", СКК(Счет5300,РезультатЗапроса) - СКД(Счет5300,РезультатЗапроса), ТаблицаДанных);
	УстановитьЗначениеПоказателя("Б400_5", СКК(Счет5200,РезультатЗапроса) - СКД(Счет5200,РезультатЗапроса), ТаблицаДанных);
	УстановитьЗначениеПоказателя("Б400_6", СКК(Счет5400,РезультатЗапроса) - СКД(Счет5400,РезультатЗапроса), ТаблицаДанных);
	УстановитьЗначениеПоказателя("Б400_7", СКК(Счет5500,РезультатЗапроса) - СКД(Счет5500,РезультатЗапроса), ТаблицаДанных);
	РассчитатьИтогПоСтроке("Б400", ТаблицаДанных);


		
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, КодФормы, ТаблицаДанных);		
				
	ФормаОтчетаРасчетНаСервере(Неопределено, Неопределено);	
	
	Модифицированность = Истина;
	УстановитьФорматВывода();	
КонецПроцедуры

&НаСервере
Функция ФормаОтчетаПолучитьСписокЭлементовВключаемыхВРасшифровку(КодСтроки, ПризнакСчетовВключаемыхВСтроку = Истина)
	СписокЭлементов  = Новый СписокЗначений;
			
	Для Каждого ЭлементСоответствия из СтруктураРеквизитовФормы.СтруктураСоответствияЭлементовОтчетногоПериода Цикл
		Если (ЭлементСоответствия.Значение = КодСтроки) = ПризнакСчетовВключаемыхВСтроку Тогда
			Попытка
				СписокЭлементов.Добавить(Перечисления.ВидыИзмененийВСобственномКапитале[ЭлементСоответствия.Ключ]);
			Исключение
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;		

	Возврат СписокЭлементов; 
КонецФункции

&НаКлиенте
Процедура ФормаОтчетаРасшифровкаСКД(ПолноеИмяЯчейки)
	Если Найти(ПолноеИмяЯчейки, "s_") = 0 Тогда 
		Возврат;
	КонецЕсли;  				
	
	КодПериода = Прав(ПолноеИмяЯчейки, 1);
	ИмяЯчейки = Сред(ПолноеИмяЯчейки, 3, 2);	
	
	Попытка
		ЧисловойКодЯчейки = Число(ИмяЯчейки);		
	Исключение
		ЧисловойКодЯчейки = 0;
	КонецПопытки;
	
	СписокОбластейСальдо = Новый СписокЗначений;
	СписокОбластейСальдо.Добавить("s_010");
	СписокОбластейСальдо.Добавить("s_100");
	СписокОбластейСальдо.Добавить("s_110");
	СписокОбластейСальдо.Добавить("s_200");
	
	РасшифровкаОстатков = СписокОбластейСальдо.НайтиПоЗначению(ПолноеИмяЯчейки)<> Неопределено;
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", 	?(КодПериода = "1", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаНачалаСравнительногоПериодаОтчета));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  	?(КодПериода = "1", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаСравнительногоПериодаОтчета));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ТипДанных", 		"РегистрыБухгалтерии");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяОбъекта", 	"Типовой");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяТаблицы", 	?(РасшифровкаОстатков,"ОстаткиИОбороты" , "Обороты"));
	//ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ПолучитьАдресМакетаСКД());

	МассивСчетовКапитала = ПолучитьСписокСчетовКапитала();	
	// Отборы
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";	
    БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Организация",  мСписокСтруктурныхЕдиниц, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет",  МассивСчетовКапитала, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);		
	
	// Без внутренних оборотов
	Если НЕ РасшифровкаОстатков Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "КорСчет",  МассивСчетовКапитала, ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии);	
	КонецЕсли;
	
	
	// Сортировка
	ПользовательскиеСортировки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ПорядокКомпоновкиДанных"));
	ПользовательскиеСортировки.ИдентификаторПользовательскойНастройки = "Порядок";
	
	НовыйЭлементПорядка = ПользовательскиеСортировки.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовыйЭлементПорядка.Использование  = Истина;
	НовыйЭлементПорядка.Поле  = Новый ПолеКомпоновкиДанных("Субконто2");
	
	// Группировки	
	МассивГруппировок = Новый Массив();
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "Организация", НСтр("ru = 'Организация'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "Счет", НСтр("ru = 'Счет'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Иерархия")));
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "Субконто1", НСтр("ru = 'Субконто1'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка",  МассивГруппировок);
		
	//ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПараметрыДанных", МассивПараметровДанных);
	
	ПользовательскиеПоля = ПользовательскиеНастройки.Элементы.Добавить(Тип("ВыбранныеПоляКомпоновкиДанных"));	
	ПользовательскиеПоля.ИдентификаторПользовательскойНастройки = "Выбор";	    	
	Если РасшифровкаОстатков Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаНачальныйОстаток", 	"Сальдо на начало");	
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаКонечныйОстаток", 	"Сальдо на конец");	
	Иначе	
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Счет", "Счет");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "КорСчет", "Кор. счет");	
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаОборот", 	"Оборот за период");	
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаОборотДт", "Оборот Дт");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаОборотКт", "СуммаОборот Кт");
	КонецЕсли;	
	
	// Прочие настройки
	ТекстЗаголовка = НСТР("ru = 'Регистр бухгалтерского учета к строке %1 Отчета о движении денежных средств'");	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Заголовок", 	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, ИмяЯчейки));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", Истина);	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьПодписи", Истина); 	
	
	ИмяРазделаРасшифровки = "Баланс " + СтруктураРеквизитовФормы.мГод;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ВыводитьЗаголовок", Истина);	
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", ИмяРазделаРасшифровки);
	//ПараметрыФормы.Вставить("ЗаполняемыеНастройки",ЗаполняемыеНастройки );	
    
	ОткрытьФорму("Отчет.УниверсальныйОтчетПоМетаданным.Форма.ФормаОтчета", ПараметрыФормы,, Истина);
КонецПроцедуры

//Обходс проблемной ситуации с очисткой ячеек в клиент-сервере
&НаКлиенте
Процедура ПанельФормаОтчетаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ПанельФормаОтчетаПриСменеСтраницыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПанельФормаОтчетаПриСменеСтраницыНаСервере()
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, КодФормы);
	
	УстановитьФорматВывода();	

КонецПроцедуры
