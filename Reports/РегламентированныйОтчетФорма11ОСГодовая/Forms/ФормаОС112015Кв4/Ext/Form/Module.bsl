
////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	мВыбраннаяФорма = "ФормаОС112015Кв4";
	КодФормы 		= "ФормаОтчета"; 		
	
	мФорматНомераСтроки = "ЧЦ=8; ЧВН=; ЧГ=";
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруФормРегОтчета(ЭтотОбъект);	
	
	СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями = РегламентированнаяОтчетностьПереопределяемый.ПоддержкаРаботыСоСтруктурнымиПодразделениями();	
		
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов   = Новый СписокЗначений;	
	СтруктураРеквизитовФормы.мПечатныеформы 		  = Новый СписокЗначений;	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);			
	ЗаполнитьСведенияОбОтчетномПериоде();
		
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	КодыСтрокБезДетализации.Добавить("059");
	КодыСтрокБезДетализации.Добавить("061");
	КодыСтрокБезДетализации.Добавить("062");
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекФорма.КодФормы);
	КонецЦикла;
	
	СоответствиеКодовКОФСтрокам = Новый Соответствие;
	Макет = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("КлассификаторОсновныхФондов_2015");
	Для Сч = Макет.Область("Строки|Соответствия").Верх ПО Макет.Область("Строки|Соответствия").Низ Цикл
		КодКОФ = "к" + СокрЛП(Макет.Область(Сч, 1).Текст);
		Строки = СокрЛП(Макет.Область(Сч, 3).Текст);
		Если ПустаяСтрока(Строки) ИЛИ (Строки = "-") Тогда
			Продолжить;
		КонецЕсли;
		СоответствиеКодовКОФСтрокам.Вставить(КодКОФ, Строки);
	КонецЦикла;
	
	СтрокаСоответствиеКодовКОФСтрокам = ПоместитьВоВременноеХранилище(СоответствиеКодовКОФСтрокам, УникальныйИдентификатор);
	
	ЗаполнитьСведенияОрганизации();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если Модифицированность Тогда 
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);	
		ТекстВопроса = НСТР("ru = 'Сохранить данные отчета?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);	
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ 

&НаКлиенте
Процедура ФормаОтчетаПолеТабличногоДокументаСтраницаПриИзмененииСодержимогоОбласти(Элемент, Область)
		
	Если Не Область.СодержитЗначение Тогда
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(Область.ТипЗначения) <> "Число" Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		Возврат;
	КонецЕсли;
		
	Расчет1();
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	Печать(Команда.Имя);	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	Печать(Команда.Имя);	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	СохранитьДанные();	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Перезаполнить = Истина;
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения = РегламентированнаяОтчетностьКлиент.ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Перезаполнить Тогда		
		Если СтрокаФормы.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru='Перезаполнить данные формы и ее дополнительных форм?'");
		Иначе
			ТекстВопроса = НСтр("ru='Перезаполнить данные формы?'");
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы",      КодФормы);
		Оповещение.ДополнительныеПараметры.Вставить("Перезаполнить", Перезаполнить);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);		

	КонецЕсли;		
	    
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФорму(Команда)	
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму");		
КонецПроцедуры

///////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ПРОЦЕДУРЫ И ФУНКЦЦИИ

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокСтруктурныхЕдиниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");			
	СтруктураРеквизитовФормы.Вставить("НалоговыйКомитет");				
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");		
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");		
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");	
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрг");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);	
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");	
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");		
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");	
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);	
	СтруктураРеквизитовФормы.Вставить("мПериодичность", Параметры.мПериодичность);		
	СтруктураРеквизитовФормы.Вставить("мГод");	
	СтруктураРеквизитовФормы.Вставить("мКвартал");	
	СтруктураРеквизитовФормы.Вставить("мМесяц");		

	// индивидуальные параметры формы
	СтруктураРеквизитовФормы.Вставить("мПоддержкаРаботыСоСтруктурнымиПодразделениями");		
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	РегламентированнаяОтчетность.ВосстановитьСохраненныйОтчет(ЭтотОбъект);		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтчетномПериоде() Экспорт

	СтрПериодОтчета = ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ФП = истина");
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Год Тогда
		СтруктураРеквизитовФормы.мКвартал = Неопределено;
		СтруктураРеквизитовФормы.мГод = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Иначе
		СтруктураРеквизитовФормы.мКвартал = Лев(СтрПериодОтчета, 1);
		СтруктураРеквизитовФормы.мГод = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мГод = Лев(Прав(СтрПериодОтчета, 7), 4);
		
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы)
	
	ОргСведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(Налогоплательщик, ДатаПодписи);
	//Если организация не указана то не выводим никаких сведений
	Если ОргСведения = 0 Тогда
		Возврат;
	КонецЕсли;

	// Инициализируем переменные
	НаимЮЛПол = ""; 		// Полное наименование 
	АдрЮР = ""; 			// Юридический адрес
	ТелОрганизации = "";	// Телефон организации
	ФИОРук = ""; 			// ФИО руководителя
	ФИОБух = ""; 			// ФИО главного бухгатера
	ИИН_БИН = ""; 			// Код БИН
	АдрФакт = ""; 			// Фактический адрес
	КодКАТО = ""; 			// Код территории по КАТО
	НаимОКЭД = "";			// Наименование по ОКЭД
	КодПоОКЭД = "";			// Код по ОКЭД

	// Получаем данные
	ОргСведения.Свойство("ПолноеНаименование",      НаимЮЛПол);
	ОргСведения.Свойство("ЮридическийАдрес",        АдрЮР);
	ОргСведения.Свойство("Телефоны",  		        ТелОрганизации);
	ОргСведения.Свойство("Руководитель",   	        ФИОРук);
	ОргСведения.Свойство("ГлавныйБухгалтер",        ФИОБух);
	ОргСведения.Свойство("БИН_ИИН",    		        ИИН_БИН);
	ОргСведения.Свойство("ФактическийАдрес",        АдрФакт);	
	ОргСведения.Свойство("КодКАТО",					КодКАТО);	
	ОргСведения.Свойство("ОсновнойВидДеятельности",	НаимОКЭД);	
	ОргСведения.Свойство("КодОКЭД",					КодПоОКЭД);	
		
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "НаимЮЛПол",   НаимЮЛПол);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "НаимОКЭД",    НаимОКЭД);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ФИОРук",	    ФИОРук);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Исполнитель", Пользователи.ТекущийПользователь());

	Попытка
		 Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			АдресныеСведенияОрганизации = РегистрыСведений.АдресныйКлассификатор.ПолучитьАдресныеСведенияОрганизации(Налогоплательщик.ИндивидуальныйПредприниматель);
		Иначе
			АдресныеСведенияОрганизации = РегистрыСведений.АдресныйКлассификатор.ПолучитьАдресныеСведенияОрганизации(Налогоплательщик);
		КонецЕсли;
	Исключение
		АдресныеСведенияОрганизации = Новый Структура;
		АдресныеСведенияОрганизации.Вставить("АдресОрганизации", ""); // Фактический адрес
		АдресныеСведенияОрганизации.Вставить("ИнформАдрес",      ""); // Адрес для информирования физ. лица
		АдресныеСведенияОрганизации.Вставить("КодКато",          ""); // Код КАТО
	КонецПопытки;
	
	АдресныеСведенияОрганизации.Свойство("АдресОрганизации", АдрФакт);
	АдресныеСведенияОрганизации.Свойство("КодКато",          КодКАТО);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "АдрФакт",	 АдрФакт);
	
	Если НЕ Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "АдрЮР",	       АдрЮР);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ТелОрганизации", ТелОрганизации);
		
	    // Код БИН
		ДлинаИИН = СтрДлина(ИИН_БИН);
		Если ДлинаИИН <= 12 Тогда
			Для Шаг = 1 По ДлинаИИН Цикл
				ИИН = СРЕД(ИИН_БИН, Шаг, 1);
				РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "БИН" + Шаг, ИИН);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Код КАТО
	КодКАТО = "" + СтрЗаменить(КодКАТО, " ", "") + "0"; // длина кода всего 9 символов, добавим 10-й
	ДлинаКАТО = СтрДлина(КодКАТО);
	Если ДлинаКАТО <= 10 Тогда
		Для Шаг = 1 По ДлинаКАТО Цикл
			КодПоКАТО = СРЕД(КодКАТО, Шаг, 1);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "КодКАТО" + Шаг, КодПоКАТО);
		КонецЦикла;
	КонецЕсли;
	
	// Код по ОКЭД
	ДлинаКодПоОКЭД = СтрДлина(КодПоОКЭД);
	Если ДлинаКодПоОКЭД <= 5 Тогда
		Для Шаг = 1 По ДлинаКодПоОКЭД Цикл
			КодОКЭД = СРЕД(КодПоОКЭД, Шаг, 1);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "КодПоОКЭД" + Шаг, КодОКЭД);
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура Очистить(ТекИмяФормы, ОчиститьВсе = Ложь) Экспорт
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	Для Шаг = 1 По 12 Цикл
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодПоОКПО" + Шаг);
		СписокПоказателейНеПодлежащихОчистке.Добавить("ИИН_БИН" + Шаг);
	КонецЦикла;
	СписокПоказателейНеПодлежащихОчистке.Добавить("НаимЮЛПол");
	СписокПоказателейНеПодлежащихОчистке.Добавить("АдрЮР");
	СписокПоказателейНеПодлежащихОчистке.Добавить("АдрФакт");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ФИОРук");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ФИОБух");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Исполнитель");
	СписокПоказателейНеПодлежащихОчистке.Добавить("КодКАТО");
	СписокПоказателейНеПодлежащихОчистке.Добавить("НаимОКЭД");
	СписокПоказателейНеПодлежащихОчистке.Добавить("КодПоОКЭД");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Страница1");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Страница2");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Страница3");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Страница4");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Страница5");
	
	РегламентированнаяОтчетность.ОчиститьСтруктуруДанныхИТабличноеПолеФормы(ЭтаФорма, ТекИмяФормы, ОчиститьВсе, СписокПоказателейНеПодлежащихОчистке);
	
	// обновим представление списка структурных единиц
	Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц);
	КонецЕсли;
			
КонецПроцедуры // Очистить()

///////////////////////////////////////////////////////////////
// Печать

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	 Перем СтруктураГруппы; 
    
    Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
        ТекстСообщения = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");            
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);                
        Возврат Ложь;        
    КонецЕсли;
            
    СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
    СтруктураРеквизитовФормы.мРежимПечати = Истина;
    
    Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
        ВыборРасчета(КодФормы, Неопределено, Неопределено);
    КонецЕсли; 

    РегламентированнаяОтчетность.СформироватьСписокПечатаемыхЛистов(ЭтаФорма);                 
        
    Возврат Истина;    
	
КонецФункции

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////
// Общие механизмы отчета

&НаКлиенте
Процедура ОбновитьПараметрыФормыНаКлиенте(Параметры) Экспорт
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	 	
	ЗаполнитьСведенияОбОтчетномПериоде();
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);		
	КонецЦикла	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормы(ТекФорма, Параметры)
	
	ЗаполнитьЗначенияСвойств(ТекФорма.СтруктураРеквизитовФормы, Параметры);   
	
	ТекФорма.Налогоплательщик         = Параметры.Налогоплательщик;		
	ТекФорма.мСписокСтруктурныхЕдиниц = Параметры.мСписокСтруктурныхЕдиниц;
	ТекФорма.ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ТекФорма.мСписокСтруктурныхЕдиниц);
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;			
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ                                     			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;			
			
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
			ТочностьЕдиницыИзмерения = 0;
			
		КонецЕсли;                                                  		
		
		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;		
	КонецЕсли;
	
	//Обход ситуации с повторным открытием основной формы, из-за ТД
	МассивРеквизитовФормы = ЭтотОбъект.ПолучитьРеквизиты();
	Для Счетчик = 0 По МассивРеквизитовФормы.Количество()-1 Цикл		
		РеквизитФормы = МассивРеквизитовФормы[Счетчик];
		Если РеквизитФормы.ТипЗначения.СодержитТип(Тип("ТабличныйДокумент")) Тогда
			ЭтотОбъект[РеквизитФормы.Имя] = ЭтотОбъект[РеквизитФормы.Имя];	
		КонецЕсли;
	КонецЦикла;	  	
		
	Если СтруктураРеквизитовФормы.Свойство("СформироватьФормуОтчетаАвтоматически") И СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически <> Неопределено Тогда
		ЗаполнитьАвтоНаСервере();
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметры(ТекущееИмяФормы) Экспорт
	
	Форма = РеквизитФормыВЗначение("мСписокФормБезИерархии").Строки.Найти(ТекущееИмяФормы, "КодФормы");
	
	Если ТекущееИмяФормы = Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7) Тогда
		ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, ЭтотОбъект.КодФормы, Ложь, Ложь);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ЭтаФорма.КодФормы);
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма);	
	
	Расчет1();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
//Процедура выполняет выбор процедуры расчета.
//ВыборРасчета выполняется при восстановлении данных, при изменении поля табличного документа
//
//Параметры:    ТекФорма - имя текущей формы
//              Индекс - индекс строки для многострочной формы
//              Показатель - имя ячейки, откуда была вызвана процедура расчета многострочной
//                           формы, без указания номера строки (например, без "__1")
//
Процедура ВыборРасчета(ТекФорма, Индекс = Неопределено, Показатель = Неопределено) Экспорт	
	Расчет1();                                                                            		
КонецПроцедуры // ВыборРасчета()

&НаКлиенте
Процедура ПриЗакрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьнаСервере();
		Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;	

КонецПроцедуры 

&НаКлиенте
Процедура СохранитьДанные() Экспорт
	
	СохранитьНаСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьнаСервере()
	РегламентированнаяОтчетность.СохранитьОтчет(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	 	
	
	Перезаполнить = ДополнительныеПараметры.Перезаполнить;
	Очистить(КодФормы, Истина);
	
	Состояние(НСтр("ru='Расчет формы № 11 годовая'"));
	ФормаОС11ЗаполнитьАвтоНаСервере(Перезаполнить);	
	 
КонецПроцедуры


///////////////////////////////////////////////////////////////
// Процедуры и функции для расчета(заполнения) 

&НаСервере
Процедура ФормаОС11ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекущееИмяФормы = "ФормаОтчета";
	
	СоответствиеКодовКОФСтрокам = ПолучитьИзВременногоХранилища(СтрокаСоответствиеКодовКОФСтрокам);
	
	Если Перезаполнить Тогда	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Расчет формы № 11 годовая'"));
	КонецЕсли;	
	
	мДатаНачалаПериодаОтчета = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	мДатаКонцаПериодаОтчета  = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ПереоценкаВнеоборотныхАктивовОбороты.СуммаПереоценкиСтоимостиПриход) КАК Дооценка,
	|	СУММА(ПереоценкаВнеоборотныхАктивовОбороты.СуммаПереоценкиСтоимостиРасход) КАК Уценка,
	|	ПереоценкаВнеоборотныхАктивовОбороты.ВнеоборотныйАктив
	|ПОМЕСТИТЬ ПереоценкаВнеоборотныхАктивовОбороты
	|ИЗ
	|	РегистрНакопления.ПереоценкаВнеоборотныхАктивов.Обороты(&ДатаНач, &ДатаКон, Регистратор, Организация В ИЕРАРХИИ (&СписокОрганизаций)) КАК ПереоценкаВнеоборотныхАктивовОбороты
	|ГДЕ
	|	ПереоценкаВнеоборотныхАктивовОбороты.Регистратор ССЫЛКА Документ.ПереоценкаВнеоборотныхАктивов
	|
	|СГРУППИРОВАТЬ ПО
	|	ПереоценкаВнеоборотныхАктивовОбороты.ВнеоборотныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапросДляГруппировки.КодКоф КАК КодКоф,
	|	ЗапросДляГруппировки.ОстатокНаНачало КАК ОстатокНаНачало,
	|	ЗапросДляГруппировки.Поступило КАК Поступило,
	|	ЗапросДляГруппировки.Выбыло КАК Выбыло,
	|	ЗапросДляГруппировки.ОстатокНаКонец КАК ОстатокНаКонец,
	|	ЗапросДляГруппировки.Дооценка КАК Дооценка,
	|	ЗапросДляГруппировки.Уценка КАК Уценка,
	|	ЗапросДляГруппировки.Амортизация КАК Амортизация,
	|	ЗапросДляГруппировки.АмортизацияНаКонец КАК АмортизацияНаКонец,
	|	ЗапросДляГруппировки.АмортизацияСписано КАК АмортизацияСписано,
	|	ЗапросДляГруппировки.Списано КАК Списано,
	|	ЗапросДляГруппировки.ПрочееВыбыло КАК ПрочееВыбытие,
	|	ЗапросДляГруппировки.Приобретено КАК Приобретено,
	|	ЗапросДляГруппировки.ПрочееПоступило КАК ПрочееПоступление,
	|	ЗапросДляГруппировки.ОстатокНаКонецБаланс КАК ОстатокНаКонецБаланс,
	|	ЗапросДляГруппировки.ДоходОтРеализации КАК ДоходОтРеализации,
	|	ЗапросДляГруппировки.ОС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапросДляРасчета.ОС КАК ОС,
	|		ЗапросДляРасчета.КодКоф КАК КодКоф,
	|		ЗапросДляРасчета.ОстатокНаНачало КАК ОстатокНаНачало,
	|		ЗапросДляРасчета.Поступило КАК Поступило,
	|		ЗапросДляРасчета.Выбыло КАК Выбыло,
	|		ЗапросДляРасчета.ОстатокНаКонец КАК ОстатокНаКонец,
	|		ЗапросДляРасчета.Дооценка КАК Дооценка,
	|		ЗапросДляРасчета.Уценка КАК Уценка,
	|		ЗапросДляРасчета.Амортизация КАК Амортизация,
	|		ЗапросДляРасчета.АмортизацияНаКонец КАК АмортизацияНаКонец,
	|		ЗапросДляРасчета.АмортизацияСписано КАК АмортизацияСписано,
	|		ВЫБОР
	|			КОГДА ЗапросДляРасчета.ОстатокНаКонец = &Ноль
	|				ТОГДА ЗапросДляРасчета.Выбыло - ВЫБОР
	|						КОГДА ЗапросДляРасчета.Уценка ЕСТЬ NULL 
	|							ТОГДА 0
	|						ИНАЧЕ ЗапросДляРасчета.Уценка
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Списано,
	|		ВЫБОР
	|			КОГДА ЗапросДляРасчета.ОстатокНаКонец <> &Ноль
	|				ТОГДА ЗапросДляРасчета.Выбыло - ВЫБОР
	|						КОГДА ЗапросДляРасчета.Уценка ЕСТЬ NULL 
	|							ТОГДА 0
	|						ИНАЧЕ ЗапросДляРасчета.Уценка
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ПрочееВыбыло,
	|		ВЫБОР
	|			КОГДА ЗапросДляРасчета.ОстатокНаНачало = &Ноль
	|				ТОГДА ЗапросДляРасчета.Поступило - ВЫБОР
	|						КОГДА ЗапросДляРасчета.Дооценка ЕСТЬ NULL 
	|							ТОГДА 0
	|						ИНАЧЕ ЗапросДляРасчета.Дооценка
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Приобретено,
	|		ВЫБОР
	|			КОГДА ЗапросДляРасчета.ОстатокНаНачало <> &Ноль
	|				ТОГДА ЗапросДляРасчета.Поступило - ВЫБОР
	|						КОГДА ЗапросДляРасчета.Дооценка ЕСТЬ NULL 
	|							ТОГДА 0
	|						ИНАЧЕ ЗапросДляРасчета.Дооценка
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ПрочееПоступило,
	|		ЗапросДляРасчета.ОстатокНаКонец - ВЫБОР
	|			КОГДА ЗапросДляРасчета.АмортизацияНаКонец ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ЗапросДляРасчета.АмортизацияНаКонец
	|		КОНЕЦ КАК ОстатокНаКонецБаланс,
	|		ВЫБОР
	|			КОГДА ЗапросДляРасчета.ОстатокНаКонец = &Ноль
	|				ТОГДА ЗапросДляРасчета.ДоходОтРеализации
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ДоходОтРеализации
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТиповойОстаткиИОборотыОС.Субконто1 КАК ОС,
	|			ТиповойОстаткиИОборотыОС.Субконто1.КодКОФ КАК КодКоф,
	|			ТиповойОстаткиИОборотыОС.СуммаНачальныйОстатокДт КАК ОстатокНаНачало,
	|			ТиповойОстаткиИОборотыОС.СуммаОборотДт КАК Поступило,
	|			ТиповойОстаткиИОборотыОС.СуммаОборотКт КАК Выбыло,
	|			ТиповойОстаткиИОборотыОС.СуммаКонечныйОстатокДт КАК ОстатокНаКонец,
	|			ПереоценкаВнеоборотныхАктивовОбороты.Дооценка КАК Дооценка,
	|			ПереоценкаВнеоборотныхАктивовОбороты.Уценка КАК Уценка,
	|			ТиповойОстаткиИОборотыАморт.СуммаОборотКт КАК Амортизация,
	|			ТиповойОстаткиИОборотыАморт.СуммаКонечныйОстатокКт КАК АмортизацияНаКонец,
	|			ТиповойОборотыДтКтАморт.СуммаОборот КАК АмортизацияСписано,
	|			ЕСТЬNULL(ТиповойОстаткиИОборотыДоходыОтРеализ.СуммаОборотКт, 0) КАК ДоходОтРеализации
	|		ИЗ
	|			РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В ИЕРАРХИИ (&СписокСчетов), , Организация В ИЕРАРХИИ (&СписокОрганизаций)) КАК ТиповойОстаткиИОборотыОС
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПереоценкаВнеоборотныхАктивовОбороты КАК ПереоценкаВнеоборотныхАктивовОбороты
	|				ПО ТиповойОстаткиИОборотыОС.Субконто1 = ПереоценкаВнеоборотныхАктивовОбороты.ВнеоборотныйАктив
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В ИЕРАРХИИ (&СписокСчетовАмортизации), , Организация В ИЕРАРХИИ (&СписокОрганизаций)) КАК ТиповойОстаткиИОборотыАморт
	|				ПО ТиповойОстаткиИОборотыОС.Субконто1 = ТиповойОстаткиИОборотыАморт.Субконто1
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.ОборотыДтКт(&ДатаНач, &ДатаКон, , СчетДт В ИЕРАРХИИ (&СписокСчетовАмортизации), , СчетКт В ИЕРАРХИИ (&СписокСчетов), , ) КАК ТиповойОборотыДтКтАморт
	|				ПО ТиповойОстаткиИОборотыОС.Субконто1 = ТиповойОборотыДтКтАморт.СубконтоКт1
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДоходыОтВыбытияАктивов)), , Организация В ИЕРАРХИИ (&СписокОрганизаций)) КАК ТиповойОстаткиИОборотыДоходыОтРеализ
	|				ПО ТиповойОстаткиИОборотыОС.Субконто1 = ТиповойОстаткиИОборотыДоходыОтРеализ.Субконто2) КАК ЗапросДляРасчета) КАК ЗапросДляГруппировки
	|ИТОГИ
	|	СУММА(ОстатокНаНачало),
	|	СУММА(Поступило),
	|	СУММА(Выбыло),
	|	СУММА(ОстатокНаКонец),
	|	СУММА(Дооценка),
	|	СУММА(Уценка),
	|	СУММА(Амортизация),
	|	СУММА(АмортизацияНаКонец),
	|	СУММА(АмортизацияСписано),
	|	СУММА(Списано),
	|	СУММА(ПрочееВыбытие),
	|	СУММА(Приобретено),
	|	СУММА(ПрочееПоступление),
	|	СУММА(ОстатокНаКонецБаланс),
	|	СУММА(ДоходОтРеализации)
	|ПО
	|	КодКоф";
	
	Запрос.УстановитьПараметр("ДатаНач", мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Ноль", 0);
	Запрос.УстановитьПараметр("СписокОрганизаций", мСписокСтруктурныхЕдиниц);
	
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Типовой.ИнвестицииВНедвижимость);
	СписокСчетов.Добавить(ПланыСчетов.Типовой.ОсновныеСредства);
	СписокСчетов.Добавить(ПланыСчетов.Типовой.Растения);
	СписокСчетов.Добавить(ПланыСчетов.Типовой.Животные);
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	
	СписокСчетовАмортизации = Новый СписокЗначений;
	СписокСчетовАмортизации.Добавить(ПланыСчетов.Типовой.АмортизацияИнвестицийВНедвижимость);
	СписокСчетовАмортизации.Добавить(ПланыСчетов.Типовой.АмортизацияОсновныхСредств);
	Запрос.УстановитьПараметр("СписокСчетовАмортизации", СписокСчетовАмортизации);
	
	ТаблицаДанных1 = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// исключаем землю из 1 и 2 раздела
	КодыКОФ = Новый СписокЗначений;
	КодыКОФ.Добавить("110.000000");
	КодыКОФ.Добавить("111.000000");
	КодыКОФ.Добавить("112.000000");
	КодыКОФ.Добавить("113.000000");
	КодыКОФ.Добавить("114.000000");
	КодыКОФ.Добавить("119.000000");
	
	НедоамортизированнаяСтоимость = 0;
	Для Каждого СтрокаТЗ Из ТаблицаДанных1.Строки Цикл
		
		// исключаем землю из 1 и 2 раздела
		Если Не ВключатьЗемлюВ_1_раздел Тогда 
			Если КодыКОФ.НайтиПоЗначению(СокрЛП(СтрокаТЗ.КодКоф.КодКОФ)) <> Неопределено Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьСтрокуЗначений1(СоответствиеКодовКОФСтрокам, СтрокаТЗ);
		НедоамортизированнаяСтоимость = НедоамортизированнаяСтоимость + Макс(?(СтрокаТЗ.Списано = null, 0, СтрокаТЗ.Списано) 
		                                - ?(СтрокаТЗ.АмортизацияСписано = null, 0, СтрокаТЗ.АмортизацияСписано), 0);
		
	КонецЦикла;
	Значение("070", , НедоамортизированнаяСтоимость, ФормаОтчетаПолеТабличногоДокументаСтраница5);
	
	//на начало года
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТиповойОстатки.СуммаОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&ДатаЗапроса, Счет = &СчетНезавершенноеСтроительство, , Организация В ИЕРАРХИИ (&СписокОрганизаций)) КАК ТиповойОстатки");
	
	Запрос.УстановитьПараметр("ДатаЗапроса", 					мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("СчетНезавершенноеСтроительство", ПланыСчетов.Типовой.НезавершенноеСтроительство);
	Запрос.УстановитьПараметр("СписокОрганизаций", 				мСписокСтруктурныхЕдиниц);
	
	РезультатЗапроса = Запрос.Выполнить();	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаРезультатов = РезультатЗапроса.Выбрать();
		ВыборкаРезультатов.Следующий();
		Значение("_54", "1", ВыборкаРезультатов.СуммаОстатокДт, ФормаОтчетаПолеТабличногоДокументаСтраница5, 5);		
	КонецЕсли;
	
	// на конец года
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТиповойОстатки.СуммаОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&ДатаЗапроса, Счет = &СчетНезавершенноеСтроительство, , Организация  В ИЕРАРХИИ (&СписокОрганизаций)) КАК ТиповойОстатки");
	
	Запрос.УстановитьПараметр("ДатаЗапроса",                    Новый Граница(КонецДня(мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетНезавершенноеСтроительство", ПланыСчетов.Типовой.НезавершенноеСтроительство);
	Запрос.УстановитьПараметр("СписокОрганизаций",              мСписокСтруктурныхЕдиниц);
	
	РезультатЗапроса = Запрос.Выполнить(); 	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаРезультатов = РезультатЗапроса.Выбрать();
		ВыборкаРезультатов.Следующий();
		Значение("_54", "11", ВыборкаРезультатов.СуммаОстатокДт, ФормаОтчетаПолеТабличногоДокументаСтраница5, 5);
	КонецЕсли;
	
	//Заполняем информацию по полностью амортизированным основным фондам
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТиповойОстаткиОС.Субконто1 КАК Наименование,
	               |	ТиповойОстаткиОС.Субконто1.КодКОФ КАК КодКОФ,
	               |	ТиповойОстаткиОС.СуммаОстатокДт КАК Стоимость,
	               |	ТиповойОстаткиАмортизацияОС.СуммаОстатокКт КАК Амортизация
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(&КонПер, Счет В ИЕРАРХИИ (&СписокСчетов), , Организация В ИЕРАРХИИ (&СписокОрганизаций)) КАК ТиповойОстаткиОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(&КонПер, Счет В ИЕРАРХИИ (&СписокСчетовАмортизации), , Организация В ИЕРАРХИИ (&СписокОрганизаций)) КАК ТиповойОстаткиАмортизацияОС
	               |		ПО ТиповойОстаткиОС.Субконто1 = ТиповойОстаткиАмортизацияОС.Субконто1";
				   
	Запрос.УстановитьПараметр("НачПер", 				 мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПер",					 Новый Граница(КонецДня(мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СписокСчетов", 			 СписокСчетов);
	Запрос.УстановитьПараметр("СписокСчетовАмортизации", СписокСчетовАмортизации);
	Запрос.УстановитьПараметр("СписокОрганизаций",       мСписокСтруктурныхЕдиниц);
	
	тзЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТЗ Из тзЗапроса Цикл 
		Если СтрокаТЗ.Стоимость = СтрокаТЗ.Амортизация Тогда
			КодКОФ = СокрЛП(СтрокаТЗ.КодКоф.КодКОФ);
			КодыСтрок = ПолучитьКодыСтрок(СоответствиеКодовКОФСтрокам, КодКОФ);
			ТЗСтрок = ПолучитьТаблицуИзСтроки(КодыСтрок);
			Для Каждого СтрокаТЗСтрок Из ТЗСтрок Цикл 
				КодСтроки = СтрокаТЗСтрок.Значение;	
				Значение(КодСтроки, "12" , Значение(КодСтроки, "12",,, 2)  + СтрокаТЗ.Стоимость,, 2);				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

		//Посчитаем сколько у нас земли на начало и конец года и сколько она стоит
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПараметрыРасчетаЗемельногоНалога.ПлощадьОблагаемая + ПараметрыРасчетаЗемельногоНалога.ПлощадьНеОблагаемая КАК Площадь,
	               |	ТиповойОстатки.СуммаОстатокДт КАК Сумма,
	               |	ПараметрыРасчетаЗемельногоНалога.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ТиповойОстатки.Субконто1 КАК ОС
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(&КонПер, Счет В ИЕРАРХИИ (&Счет), , Организация В ИЕРАРХИИ (&СписокОрганизаций)) КАК ТиповойОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыРасчетаЗемельногоНалога КАК ПараметрыРасчетаЗемельногоНалога
	               |		ПО ТиповойОстатки.Субконто1 = ПараметрыРасчетаЗемельногоНалога.ОсновноеСредство
	               |ГДЕ
	               |	ТиповойОстатки.Субконто1.КодКОФ.КодКОФ В(&КодыКОФ)";
				   
	Запрос.УстановитьПараметр("КонПер",            мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("Счет",              СписокСчетов);
	Запрос.УстановитьПараметр("СписокОрганизаций", мСписокСтруктурныхЕдиниц);
	
	КодыКОФ = Новый СписокЗначений;
	КодыКОФ.Добавить("110.000000");
	КодыКОФ.Добавить("111.000000");
	КодыКОФ.Добавить("112.000000");
	КодыКОФ.Добавить("113.000000");
	КодыКОФ.Добавить("114.000000");
	КодыКОФ.Добавить("119.000000");
	Запрос.УстановитьПараметр("КодыКОФ", КодыКОФ);
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаРезультатов = РезультатЗапроса.Выбрать();
		
		Площадь = 0;
		Сумма 	= 0;
		
		Пока ВыборкаРезультатов.Следующий() Цикл 
			Если ВыборкаРезультатов.ЕдиницаИзмерения = NULL Тогда
				ТекстСообщения = НСтр("ru='Для ОС: ""%1"" не заполнены параметры расчета земельного налога'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаРезультатов.ОС);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
			ИначеЕсли СокрЛП(ВыборкаРезультатов.ЕдиницаИзмерения.Код) = "059" Тогда
				Площадь	= Площадь + ВыборкаРезультатов.Площадь;
			ИначеЕсли СокрЛП(ВыборкаРезультатов.ЕдиницаИзмерения.Код) = "055" Тогда 
				Площадь = Площадь + (ВыборкаРезультатов.Площадь / 10000);
			Иначе 
				ТекстСообщения = НСтр("ru='Для ОС: ""%1"" должна быть указана единица измерения Гектар (га) код классификатора 059 
				|или Квадратный метр (м2) код классификатора 055'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаРезультатов.ОС);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			Сумма = Сумма + ВыборкаРезультатов.Сумма;
		КонецЦикла;
		
		Значение("_53", "1", Площадь, ФормаОтчетаПолеТабличногоДокументаСтраница5, 5);
		Значение("_51", "1", Сумма,   ФормаОтчетаПолеТабличногоДокументаСтраница5, 5);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КонПер", Новый Граница(КонецДня(мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаРезультатов = РезультатЗапроса.Выбрать();
		
		Площадь = 0;
		Сумма 	= 0;
		
		Пока ВыборкаРезультатов.Следующий() Цикл 
			Если ВыборкаРезультатов.ЕдиницаИзмерения = NULL Тогда 
				Сообщить("Для ОС: """ + ВыборкаРезультатов.ОС + """ не заполнены параметры расчета земельного налога");
			ИначеЕсли СокрЛП(ВыборкаРезультатов.ЕдиницаИзмерения.Код) = "059" Тогда
				Площадь	= Площадь + ВыборкаРезультатов.Площадь;
			ИначеЕсли СокрЛП(ВыборкаРезультатов.ЕдиницаИзмерения.Код) = "055" Тогда 
				Площадь = Площадь + (ВыборкаРезультатов.Площадь / 10000);
			Иначе 
				Сообщить("Для ОС: """ + ВыборкаРезультатов.ОС + """ должна быть указана единица измерения Гектар (га) код классификатора 059 
				|или Квадратный метр (м2) код классификатора 055");
			КонецЕсли;
			Сумма = Сумма + ВыборкаРезультатов.Сумма;
		КонецЦикла;
		
		Значение("_53", "11", Площадь, ФормаОтчетаПолеТабличногоДокументаСтраница5, 5);
		Значение("_51", "11", Сумма,   ФормаОтчетаПолеТабличногоДокументаСтраница5, 5);
		
	КонецЕсли;
	
	//Наличие земельных участков для отдыха и прочая открытая земля
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТиповойОстатки.СуммаОстатокДт КАК Сумма
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(&КонПер, Счет В ИЕРАРХИИ (&Счет), , Организация В ИЕРАРХИИ (&СписокОрганизаций)) КАК ТиповойОстатки
	               |ГДЕ
	               |	ТиповойОстатки.Субконто1.КодКОФ.КодКОФ = &КодыКОФ";
				   
	Запрос.УстановитьПараметр("КонПер",            мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("Счет",              СписокСчетов);
	Запрос.УстановитьПараметр("КодыКОФ",           "114.000000");
	Запрос.УстановитьПараметр("СписокОрганизаций", мСписокСтруктурныхЕдиниц);
	
	РезультатЗапроса = Запрос.Выполнить();	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаРезультатов = РезультатЗапроса.Выбрать();
		ВыборкаРезультатов.Следующий();
		Значение("064", "1", ВыборкаРезультатов.Сумма, ФормаОтчетаПолеТабличногоДокументаСтраница5, 5);
	КонецЕсли;
	                                              
	Запрос.УстановитьПараметр("КонПер", Новый Граница(КонецДня(мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	
	РезультатЗапроса = Запрос.Выполнить();   	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаРезультатов = РезультатЗапроса.Выбрать();
		ВыборкаРезультатов.Следующий();
		Значение("064", "11", ВыборкаРезультатов.Сумма, ФормаОтчетаПолеТабличногоДокументаСтраница5, 5);
	КонецЕсли;
	
	//Сумма амортизации нематериальных активов
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТиповойОбороты.СуммаОборотКт КАК Сумма
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Обороты(&НачПер, &КонПер, , Счет = &Счет, , Организация В ИЕРАРХИИ (&СписокОрганизаций), , ) КАК ТиповойОбороты";
				   
	Запрос.УстановитьПараметр("НачПер",            мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПер",            Новый Граница(КонецДня(мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Счет",              ПланыСчетов.Типовой.АмортизацияПрочихНематериальныхАктивов);
	Запрос.УстановитьПараметр("СписокОрганизаций", мСписокСтруктурныхЕдиниц);
	
	РезультатЗапроса = Запрос.Выполнить(); 	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаРезультатов = РезультатЗапроса.Выбрать();
		ВыборкаРезультатов.Следующий();
		Значение("420","1", ВыборкаРезультатов.Сумма, ФормаОтчетаПолеТабличногоДокументаСтраница5, 5);
	КонецЕсли;

	//Средняя стоимость основных средств
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТиповойОстатки.СуммаОстатокДт КАК Сумма
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(&ДатаКон, Счет В ИЕРАРХИИ (&СписокСчетов), , Организация В ИЕРАРХИИ (&СписокОрганизаций)
				   | " + ?(Не ВключатьЗемлюВ_1_раздел, " И НЕ Субконто1.КодКОФ.КодКОФ В (&КодыКофЗемли) ", "") + ") КАК ТиповойОстатки";
	Запрос.УстановитьПараметр("ДатаКон", мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("СписокОрганизаций", мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("КодыКофЗемли", КодыКОФ);
	
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	ЗначениеСр = 0;
	ЗначениеСр = ЗначениеСр + (Результат.Сумма / 2);
	
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(мДатаКонцаПериодаОтчета, ВидГраницы.Включая));
	
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	ЗначениеСр = ЗначениеСр + (Результат.Сумма / 2);
	
	Для Счетчик = 1 По 11 Цикл
		Запрос.УстановитьПараметр("ДатаКон", ДобавитьМесяц(мДатаНачалаПериодаОтчета, Счетчик));
		Результат = Запрос.Выполнить().Выбрать();
		Результат.Следующий();
		ЗначениеСр = ЗначениеСр + Результат.Сумма;	
	КонецЦикла;
	
	ЗначениеСр = ЗначениеСр / 12;
	Значение("074", , ЗначениеСр, ФормаОтчетаПолеТабличногоДокументаСтраница5);
	
	//стоимость ОС переведённых в товарно-материальные запасы.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТиповойОборотыДтКт.СуммаОборот КАК Сумма
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.ОборотыДтКт(&НачПер, &КонПер, , СчетДт В ИЕРАРХИИ (&СчетДт), , СчетКт В ИЕРАРХИИ (&СчетКт), , Организация В ИЕРАРХИИ (&СписокОрганизаций)) КАК ТиповойОборотыДтКт";
	Запрос.УстановитьПараметр("НачПер",            мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПер",            Новый Граница(КонецДня(мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетДт",            ПланыСчетов.Типовой.Запасы);
	Запрос.УстановитьПараметр("СчетКт",            СписокСчетов);
	Запрос.УстановитьПараметр("СписокОрганизаций", мСписокСтруктурныхЕдиниц);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ВыборкаРезультатов = Результат.Выбрать();
		ВыборкаРезультатов.Следующий();
		Значение("430", , ВыборкаРезультатов.Сумма, ФормаОтчетаПолеТабличногоДокументаСтраница5);
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА НалоговыйОбороты.Субконто2 ЕСТЬ NULL 
	|			ТОГДА NULL
	|		ИНАЧЕ НалоговыйОбороты.Субконто2.КодКОФ
	|	КОНЕЦ КАК КодКОФ,
	|	НалоговыйОбороты.Субконто3 КАК ВидРемонта,
	|	НалоговыйОбороты.СуммаОборотДт КАК Сумма,
	|	НалоговыйОбороты.Субконто2 КАК Наименование
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет = &СчетРемонтов,
	|			,
	|			Организация В ИЕРАРХИИ (&СписокОрганизаций)
	|				И (НЕ ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.ВР)),
	|			,
	|			) КАК НалоговыйОбороты";
	
	Запрос.УстановитьПараметр("ДатаНач",           мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",           Новый Граница(КонецДня(мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетРемонтов",      ПланыСчетов.Налоговый.РасходыНаРемонтВА);
	Запрос.УстановитьПараметр("СписокОрганизаций", мСписокСтруктурныхЕдиниц);
		
	тзЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТЗ Из тзЗапроса Цикл
		ЗаполнитьСтрокуЗначений1(СоответствиеКодовКОФСтрокам, СтрокаТЗ, Истина);
	КонецЦикла;
	
	ЗаполнитьНМА();  	
	Расчет1();
	ЗаполнитьСведенияОрганизации();
	
	Модифицированность = Истина;
	
КонецПроцедуры 
    
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Комментарий");	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыФормы.Вставить("мСкопированаФорма",        мСкопированаФорма);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыФормы.Вставить("Организация",              Налогоплательщик);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, мВыбраннаяФорма, "") + "ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект);	

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(мСписокСтруктурныхЕдиниц, ЭтаФорма, СтандартнаяОбработка, "", Налогоплательщик, ,
																ПредопределенноеЗначение("Перечисление.РазделыНалоговогоУчета.МестныеНалоги"),Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда		
		мСписокСтруктурныхЕдиниц = Результат;		
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц); 		
	КонецЕсли;

КонецПроцедуры

&НаСервере
// Процедура установки/получения значния области табличного поля
//
// Параметры:
//	Строка - строка табличного поля
//  Столбец - столбец табличного поля
//	Значение - устанавливаемое значение
//
Функция Значение(Строка, Столбец, Значение = Неопределено, знач ВыбТабличноеПоле, Раздел = 1)
	
	Перем ВозвращаемоеЗначение;  
	
	СуфиксИмениКолонки = "_" + Строка(Раздел);
			
	Если ВыбТабличноеПоле = Неопределено Тогда
		// ищем ТД в котором находится нужная ячейка
		ИмяЯчейки = "Яч" + СокрЛП(Строка) + "_" + СокрЛП(Столбец) + СуфиксИмениКолонки;
		
		НачальноеЗначениеПрефиксаТД = Раздел;			
		КонечноеЗначениеПрефиксаТД  = Раздел;
			
		Для Счетчик = НачальноеЗначениеПрефиксаТД По КонечноеЗначениеПрефиксаТД Цикл
			Если ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница" + Счетчик].Области.Найти(ИмяЯчейки) <> Неопределено Тогда
				ВыбТабличноеПоле = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница" + Счетчик];
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		
		// Если не нашли
		Если ВыбТабличноеПоле = Неопределено Тогда	
			ТекстСообщения = НСтр("ru='В отчете не найдена строка %1_%2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СокрЛП(Строка), СокрЛП(Столбец));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
			Возврат 0;
		КонецЕсли;	
	КонецЕсли;
	
	ВозвращаемоеЗначение = 0;
	Если Не ПустаяСтрока(СокрЛП(Строка)) Тогда
		
		Если Не ПустаяСтрока(СокрЛП(Столбец)) Тогда
			Область = ВыбТабличноеПоле.Области.Найти("Яч" + СокрЛП(Строка) + "_" + СокрЛП(Столбец) + СуфиксИмениКолонки);
		Иначе
			Область = ВыбТабличноеПоле.Области.Найти("Яч" + СокрЛП(Строка));
		КонецЕсли;
		
		Если Область <> Неопределено Тогда
			Попытка
				Если Значение <> Неопределено Тогда
					Область.Значение = Значение;
				КонецЕсли;
				ВозвращаемоеЗначение = Область.Значение;
			Исключение
				ВозвращаемоеЗначение = 0;
				ТекстСообщения = НСтр("ru='Невозможно получить/установить значение ячейки: %1_%2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СокрЛП(Строка), СокрЛП(Столбец));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		    КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ВозвращаемоеЗначение;
	
КонецФункции 

&НаСервере
Процедура ЗаполнитьСтрокуЗначений1(СоответствиеКодовКОФСтрокам, СтрокаТЗ, Ремонт = Ложь) // для раздела 1

	Если СтрокаТЗ <> Неопределено Тогда
				
		Если СтрокаТЗ.КодКоф = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если СтрокаТЗ.КодКоф = NULL Тогда
			Возврат;
		КонецЕсли;
		
		КодКОФ = СокрЛП(СтрокаТЗ.КодКоф.КодКОФ);
		КодыСтрок = ПолучитьКодыСтрок(СоответствиеКодовКОФСтрокам, КодКОФ);
		
		Если ПустаяСтрока(КодыСтрок) Тогда			
			
			Если Не Ремонт Тогда 					
				Для Каждого СтрокаОС Из СтрокаТЗ.Строки Цикл
					ТекстСообщения = НСтр("ru='Не корректно указан код КОФ для ОС: %1'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка(СтрокаОС.ОС));
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СтрокаОС.ОС); 					
				КонецЦикла;
			Иначе 
				ТекстСообщения = НСтр("ru='Не корректно указан код КОФ для элемента справочника: %1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,  Строка(СтрокаТЗ.Наименование));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СтрокаТЗ.Наименование);
			КонецЕсли;				
			
			Возврат;
			
		КонецЕсли;
		
		ТЗСтрок = ПолучитьТаблицуИзСтроки(КодыСтрок);
		Для Каждого СтрокаТЗСтрок Из ТЗСтрок Цикл
			
			КодСтроки = СтрокаТЗСтрок.Значение;
								
			ТабличноеПоле11_17 = Неопределено;
			ТабличноеПоле1_11  = Неопределено;
			
			Если Не Ремонт ТОгда
				
				Значение(КодСтроки, "1",  Значение(КодСтроки, "1",,  ТабличноеПоле1_11) + СтрокаТЗ.ОстатокНаНачало, ТабличноеПоле1_11, 1);
				Значение(КодСтроки, "2",  Значение(КодСтроки, "2",,  ТабличноеПоле1_11) + СтрокаТЗ.Приобретено, ТабличноеПоле1_11, 1);
				Значение(КодСтроки, "3",  Значение(КодСтроки, "3",,  ТабличноеПоле1_11) + ?(СтрокаТЗ.Дооценка <> null, СтрокаТЗ.Дооценка, 0), ТабличноеПоле1_11, 1);
				Значение(КодСтроки, "4",  Значение(КодСтроки, "4",,  ТабличноеПоле1_11) + СтрокаТЗ.ПрочееПоступление, ТабличноеПоле1_11, 1);
				Значение(КодСтроки, "5",  Значение(КодСтроки, "5",,  ТабличноеПоле1_11) + СтрокаТЗ.Списано, ТабличноеПоле1_11, 1);
				Значение(КодСтроки, "7",  Значение(КодСтроки, "7",,  ТабличноеПоле1_11) + ?(СтрокаТЗ.Уценка <> null, СтрокаТЗ.Уценка, 0), ТабличноеПоле1_11, 1);
				Значение(КодСтроки, "8",  Значение(КодСтроки, "8",,  ТабличноеПоле1_11) + СтрокаТЗ.ПрочееВыбытие, ТабличноеПоле1_11, 1);
				Значение(КодСтроки, "11", Значение(КодСтроки, "11",, ТабличноеПоле1_11) + СтрокаТЗ.ОстатокНаКонецБаланс, ТабличноеПоле1_11 ,1);
				
				Если КодСтроки <> "61" Тогда
					Значение(КодСтроки, "11", Значение(КодСтроки, "11",, ТабличноеПоле11_17, 2) + ?(СтрокаТЗ.Амортизация <> null, СтрокаТЗ.Амортизация,0), ТабличноеПоле11_17, 2);
					Значение(КодСтроки, "13", Значение(КодСтроки, "13",, ТабличноеПоле11_17, 2) + ?(СтрокаТЗ.АмортизацияСписано <> null, СтрокаТЗ.АмортизацияСписано,0), ТабличноеПоле11_17, 2);
				КонецЕсли; 
								
				//заполним строки, по которым детализация не трубуется, т.е.строки с 059 по 062, для которых некоторые колонки не заполняются
				Если КодыСтрокБезДетализации.НайтиПоЗначению(КодСтроки) <> Неопределено Тогда
					Значение(КодСтроки, "10" , Значение(КодСтроки, "10",, ТабличноеПоле1_11, 1)  + СтрокаТЗ.Приобретено + ?(СтрокаТЗ.Дооценка <> null,СтрокаТЗ.Дооценка, 0) + СтрокаТЗ.ПрочееПоступление, ТабличноеПоле1_11, 1);
				КонецЕсли;
				
			Иначе
				
				Если СтрокаТЗ.ВидРемонта = Перечисления.ВидыРемонтаВА.Капитальный Тогда
					Столбец = "15";
				ИначеЕсли СтрокаТЗ.ВидРемонта = Перечисления.ВидыРемонтаВА.Текущий Тогда
					Столбец = "14";
				Иначе
					Возврат;
				КонецЕсли;
				
				Значение(КодСтроки, Столбец, Значение(КодСтроки, Столбец,, ТабличноеПоле11_17, 2) + СтрокаТЗ.Сумма, ТабличноеПоле11_17, 2);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКодыСтрок(СоответствиеКодовКОФСтрокам, КодКоф) 
	
	Резт = "";
	Строки = Неопределено;
	Строки = СоответствиеКодовКОФСтрокам.Получить("к" + КодКоф);
	Если Строки <> Неопределено Тогда
		Резт = Строки;
	КонецЕсли;
	
    Возврат Резт;
	
КонецФункции

&НаСервереБезКонтекста 
Функция ПолучитьТаблицуИзСтроки(ВходящийСпсисокДанных) // для раздела 1
	
	СпсисокДанных = СокрЛП(ВходящийСпсисокДанных);
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Значение");
	ТЗ.Колонки.Добавить("Коэффициент");
	СтрокаДанных = "";
	Коэффициент = 1;
	
	Для Сч = 1 По СтрДлина(СпсисокДанных) Цикл
		СимволСтроки = Сред(СпсисокДанных, Сч, 1);
		Если СимволСтроки = "," Тогда
			СтрокаТЗ = ТЗ.Добавить();
			СтрокаТЗ.Значение = СтрокаДанных;
			СтрокаТЗ.Коэффициент = Коэффициент;
			СтрокаДанных = "";
			Коэффициент = 1;
		ИначеЕсли СимволСтроки = "-" Тогда
			Коэффициент = -1;
		ИначеЕсли СимволСтроки = "+" Тогда
			Коэффициент = 1;
		Иначе
			СтрокаДанных = СтрокаДанных + СимволСтроки;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПустаяСтрока(СтрокаДанных) Тогда
		СтрокаТЗ = ТЗ.Добавить();
		СтрокаТЗ.Значение = СтрокаДанных;
		СтрокаТЗ.Коэффициент = Коэффициент;
	КонецЕсли;
	
	Возврат ТЗ;
	
КонецФункции

&НаСервере
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьНМА() // для раздела 5
	
	ТаблицаДанных5 = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.НМА,
	|	ВложенныйЗапрос.НаНачало КАК НаНачало,
	|	ВложенныйЗапрос.НаКонец КАК НаКонец,
	|	ВложенныйЗапрос.Поступило КАК Поступило,
	|	ВложенныйЗапрос.Выбыло КАК Выбыло,
	|	ВложенныйЗапрос.АмортизацияСписано КАК АмортизацияСписано,
	|	ВложенныйЗапрос.Дооценка КАК Дооценка,
	|	ВложенныйЗапрос.Уценка КАК Уценка,
	|	ВложенныйЗапрос.Амортизация КАК Амортизация,
	|	ВложенныйЗапрос.Поступило - ВложенныйЗапрос.Дооценка КАК СуммаПоступления,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.НаНачало = 0
	|			ТОГДА ВложенныйЗапрос.Поступило - ВложенныйЗапрос.Дооценка
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Приобретено,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.НаНачало <> &Ноль
	|			ТОГДА ВложенныйЗапрос.Поступило - ВЫБОР
	|					КОГДА ВложенныйЗапрос.Дооценка ЕСТЬ NULL 
	|						ТОГДА 0
	|					ИНАЧЕ ВложенныйЗапрос.Дооценка
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПрочееПоступление,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.НаКонец = &Ноль
	|			ТОГДА ВложенныйЗапрос.Выбыло - ВЫБОР
	|					КОГДА ВложенныйЗапрос.Уценка ЕСТЬ NULL 
	|						ТОГДА 0
	|					ИНАЧЕ ВложенныйЗапрос.Уценка
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Списано,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.НаКонец <> &Ноль
	|			ТОГДА ВложенныйЗапрос.Выбыло - ВЫБОР
	|					КОГДА ВложенныйЗапрос.Уценка ЕСТЬ NULL 
	|						ТОГДА 0
	|					ИНАЧЕ ВложенныйЗапрос.Уценка
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПрочееВыбытие,
	|	ВложенныйЗапрос.НаКонец - ВЫБОР
	|		КОГДА ВложенныйЗапрос.АмортизацияНаКонец ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ВложенныйЗапрос.АмортизацияНаКонец
	|	КОНЕЦ КАК ОстатокНаКонецБаланс
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.ГруппаНМА КАК ГруппаНМА,
	|		ВложенныйЗапрос.НМА КАК НМА,
	|		СУММА(ВложенныйЗапрос.НаНачало) КАК НаНачало,
	|		СУММА(ВложенныйЗапрос.НаКонец) КАК НаКонец,
	|		СУММА(ВложенныйЗапрос.Поступило) КАК Поступило,
	|		СУММА(ВложенныйЗапрос.Выбыло) КАК Выбыло,
	|		СУММА(ВложенныйЗапрос.АмортизацияСписано) КАК АмортизацияСписано,
	|		СУММА(ВложенныйЗапрос.Дооценка) КАК Дооценка,
	|		СУММА(ВложенныйЗапрос.Уценка) КАК Уценка,
	|		СУММА(ВложенныйЗапрос.Амортизация) КАК Амортизация,
	|		ВложенныйЗапрос.АмортизацияНаКонец КАК АмортизацияНаКонец
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТиповойОстаткиИОбороты.Субконто1.ВидНМА КАК ГруппаНМА,
	|			ТиповойОстаткиИОбороты.Субконто1 КАК НМА,
	|			ТиповойОстаткиИОбороты.СуммаНачальныйОстатокДт КАК НаНачало,
	|			ТиповойОстаткиИОбороты.СуммаКонечныйОстатокДт КАК НаКонец,
	|			ТиповойОстаткиИОбороты.СуммаОборотДт КАК Поступило,
	|			ТиповойОстаткиИОбороты.СуммаОборотКт КАК Выбыло,
	|			0 КАК АмортизацияСписано,
	|			0 КАК Дооценка,
	|			0 КАК Уценка,
	|			0 КАК Амортизация,
	|			0 КАК АмортизацияНаКонец
	|		ИЗ
	|			РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
	|					&ДатаНач,
	|					&ДатаКон,
	|					,
	|					,
	|					Счет = &СчетГудвилл
	|						ИЛИ Счет = &СчетПрочиеНМА,
	|					,
	|					Организация В ИЕРАРХИИ (&СписокОрганизаций)) КАК ТиповойОстаткиИОбороты
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТиповойОбороты.Субконто1.ВидНМА,
	|			ТиповойОбороты.Субконто1,
	|			0,
	|			0,
	|			0,
	|			0,
	|			ВЫБОР
	|				КОГДА ТиповойОбороты.КорСчет = &СчетАмортизацияПрочиеНМА
	|					ТОГДА ТиповойОбороты.СуммаОборотКт
	|				ИНАЧЕ 0
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА ТиповойОбороты.КорСчет = &СчетПереоценкаНМА
	|					ТОГДА ТиповойОбороты.СуммаОборотДт
	|				ИНАЧЕ 0
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА ТиповойОбороты.КорСчет = &СчетПереоценкаНМА
	|					ТОГДА ТиповойОбороты.СуммаОборотКт
	|				ИНАЧЕ 0
	|			КОНЕЦ,
	|			0,
	|			0
	|		ИЗ
	|			РегистрБухгалтерии.Типовой.Обороты(
	|					&ДатаНач,
	|					&ДатаКон,
	|					,
	|					Счет = &СчетГудвилл
	|						ИЛИ Счет = &СчетПрочиеНМА,
	|					,
	|					Организация В ИЕРАРХИИ (&СписокОрганизаций),
	|					КорСчет = &СчетАмортизацияПрочиеНМА
	|						ИЛИ КорСчет = &СчетПереоценкаНМА,
	|					) КАК ТиповойОбороты
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТиповойОбороты.Субконто1.ВидНМА,
	|			ТиповойОбороты.Субконто1,
	|			0,
	|			0,
	|			0,
	|			0,
	|			0,
	|			0,
	|			0,
	|			ТиповойОбороты.СуммаОборотКт,
	|			0
	|		ИЗ
	|			РегистрБухгалтерии.Типовой.Обороты(&ДатаНач, &ДатаКон, , Счет = &СчетАмортизацияПрочиеНМА, , Организация В ИЕРАРХИИ (&СписокОрганизаций), , ) КАК ТиповойОбороты
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТиповойОстатки.Субконто1.ВидНМА,
	|			ТиповойОстатки.Субконто1,
	|			0,
	|			0,
	|			0,
	|			0,
	|			0,
	|			0,
	|			0,
	|			0,
	|			ТиповойОстатки.СуммаОстатокКт
	|		ИЗ
	|			РегистрБухгалтерии.Типовой.Остатки(&ДатаКон, Счет = &СчетАмортизацияПрочиеНМА, , Организация В ИЕРАРХИИ (&СписокОрганизаций)) КАК ТиповойОстатки) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.ГруппаНМА,
	|		ВложенныйЗапрос.НМА,
	|		ВложенныйЗапрос.АмортизацияНаКонец) КАК ВложенныйЗапрос";
	Запрос.УстановитьПараметр("ДатаНач", 				  СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон", 				  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("СчетГудвилл", 			  ПланыСчетов.Типовой.Гудвилл);
	Запрос.УстановитьПараметр("СчетПрочиеНМА", 			  ПланыСчетов.Типовой.ПрочиеНематериальныеАктивы);
	Запрос.УстановитьПараметр("СчетАмортизацияПрочиеНМА", ПланыСчетов.Типовой.АмортизацияПрочихНематериальныхАктивов);
	Запрос.УстановитьПараметр("СчетПереоценкаНМА", 		  ПланыСчетов.Типовой.РезервНаПереоценкуНематериальныхАктивов);
	Запрос.УстановитьПараметр("СписокОрганизаций", 		  мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("Ноль",                     0);
	
	ТаблицаДанных5 = Запрос.Выполнить().Выгрузить();
	
	// исключаем землю из 1 и 2 раздела
	КодыКОФ = Новый СписокЗначений;
	КодыКОФ.Добавить("110.000000");
	КодыКОФ.Добавить("111.000000");
	КодыКОФ.Добавить("112.000000");
	КодыКОФ.Добавить("113.000000");
	КодыКОФ.Добавить("114.000000");
	КодыКОФ.Добавить("119.000000");
	
	Для Каждого СтрокаТЗ ИЗ ТаблицаДанных5 Цикл
		
		Если СтрокаТЗ.НМА = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЗ.НМА = Null Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЗ.НМА.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		// исключаем землю из 1 и 2 раздела
		Если Не ВключатьЗемлюВ_1_раздел Тогда 
			Если КодыКОФ.НайтиПоЗначению(СокрЛП(СтрокаТЗ.НМА.КодКОФ.КодКОФ)) <> Неопределено Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьСтрокуЗначений5(СтрокаТЗ);
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуЗначений5(СтрокаТЗ) // для раздела 5

	Если СтрокаТЗ <> Неопределено Тогда
		
		СоответствиеКодовКОФСтрокам = ПолучитьИзВременногоХранилища(СтрокаСоответствиеКодовКОФСтрокам);
		
		КодКОФ = СокрЛП(СтрокаТЗ.НМА.КодКОФ.КодКОФ);
		КодыСтрок = ПолучитьКодыСтрок(СоответствиеКодовКОФСтрокам, КодКОФ);
		Если ПустаяСтрока(КодыСтрок) Тогда
			ТекстСообщения = НСтр("ru='Не корректно указан код КОФ для НМА: %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка(СтрокаТЗ.НМА));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СтрокаТЗ.НМА); 
			Возврат;
		КонецЕсли;
		
		ТЗСтрок = ПолучитьТаблицуИзСтроки(КодыСтрок);
		Для Каждого СтрокаТЗСтрок Из ТЗСтрок Цикл
			
			КодСтроки = СтрокаТЗСтрок.Значение;			
			Значение(КодСтроки, "1",  Значение(КодСтроки, "1",,, 1) + СтрокаТЗ.НаНачало, , 1);
			Значение(КодСтроки, "2",  Значение(КодСтроки, "2",,, 1) + СтрокаТЗ.Приобретено, , 1);
			Значение(КодСтроки, "3",  Значение(КодСтроки, "3",,, 1) + ?(СтрокаТЗ.Дооценка <>null, СтрокаТЗ.Дооценка,0), , 1);
			Значение(КодСтроки, "4",  Значение(КодСтроки, "4",,, 1) + СтрокаТЗ.ПрочееПоступление,  ,1);
			Значение(КодСтроки, "5",  Значение(КодСтроки, "5",,, 1) + СтрокаТЗ.Списано, , 1);
			Значение(КодСтроки, "7",  Значение(КодСтроки, "7",,, 1) + ?(СтрокаТЗ.Уценка <> null, СтрокаТЗ.Уценка, 0), , 1);
			Значение(КодСтроки, "8",  Значение(КодСтроки, "8",,, 1) + СтрокаТЗ.ПрочееВыбытие, , 1);
			Значение(КодСтроки, "11", Значение(КодСтроки, "11",,,1) + СтрокаТЗ.ОстатокНаКонецБаланс, , 1);  
			Значение(КодСтроки, "11", Значение(КодСтроки, "11",, , 2) + ?(СтрокаТЗ.Амортизация <> null, СтрокаТЗ.Амортизация,0), , 2);
			Значение(КодСтроки, "13", Значение(КодСтроки, "13",, , 2) + ?(СтрокаТЗ.АмортизацияСписано <> null, СтрокаТЗ.АмортизацияСписано,0), , 2);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтрокуЗначений()

&НаСервере
// Рассчитывает итоговые суммы
//
Процедура Расчет1() // для раздела 1
	
	// Итоги по столбцам. графа 10 = сумма граф 1,2,3,4 - сумма граф 5,7,8;
	РасчетИтоговСтолбцов("10", "1,2,3,4,-5,-7,-8", "11,12,123,124,125,126,21,211,22,227,3,31,311,3121,3122,3123,32,321,322,323,324,325,3261,3262,32622,32623,32624,32625,32626,32627,3267,3264,327,3271,330,332,335,40,51,52,6,61,71,711,712,72,73,74,75,76,761,762,763",1);	
	
	// Итоги по строкам
	//раздел 2 «Укажите информацию о затратах и амортизации основных фондов по основному виду деятельности, тысяч тенге»
		
	//строка 3 = сумме строк 4,5;	
	РасчетИтоговСтрок("1", "11,12",,, 1);
	РасчетИтоговСтрок("1", "11,12",,, 2);
	
	//строка 10 = сумме строк 11,13;	
	РасчетИтоговСтрок("2", "21,22",,,1);
	РасчетИтоговСтрок("2", "21,22",,,2);
	
	//строка 16 = сумме строк 17-20 для каждой графы;
	РасчетИтоговСтрок("31", "311,3121,3122,3123",,, 2);
	
	//строка 15 = сумме строк 16,21;
	РасчетИтоговСтрок("3", "31,32",,, 1);
	РасчетИтоговСтрок("3", "31,32",,, 2);
		
	//строка 43 = сумме строк 44,45;
	РасчетИтоговСтрок("5", "51,52",,, 1);
	РасчетИтоговСтрок("5", "51,52",,, 2);
	
	//строка 48 = сумме строк 49-54 		
	РасчетИтоговСтрок("7", "71,72,73,74,75,76",,, 1);
	РасчетИтоговСтрок("7", "71,72,73,74,75,76",,, 2);
	
	//строка 2 = сумме строк 3,10,15,42,43,46;
	РасчетИтоговСтрок("100", "1,2,3,40,5,6",,, 1);
	РасчетИтоговСтрок("100", "1,2,3,40,5,6",,, 2);
	
	//строка 1 = сумме строк 2,48;
	РасчетИтоговСтрок("1000", "100,7",,, 1);		
	РасчетИтоговСтрок("1000", "100,7",,, 2);		
	
	//строка 4 = сумма строк 5,6
	РасчетИтоговСтрок("3", "31,32",,, 3);
	РасчетИтоговСтрок("3", "31,32",,, 4);
	
	//строка 1 = сумма 2,3,4,9,10
	РасчетИтоговСтрок("0", "1,2,3,40,5",,, 3);
	РасчетИтоговСтрок("0", "1,2,3,40,5",,, 4);
				
	// Итоги по столбцам. графа 10 = сумма граф 1,2,3,4 - сумма граф 5,7,8;
	РасчетИтоговСтолбцов("10", "1,2,3,4,-5,-7,-8", "0,1,2,31,32,321,3211,40,5,7", 3);	
				
КонецПроцедуры

&НаСервере
Процедура РасчетИтоговСтолбцов(СтолбецПриемник, СтолбцыИсточники, Строки, Раздел = 1) // для раздела 1
	
	ТЗСтрок    = ПолучитьТаблицуИзСтроки(Строки);	
	ТЗСтолбцов = ПолучитьТаблицуИзСтроки(СтолбцыИсточники);    	
	
	Для Каждого Строка Из ТЗСтрок Цикл
		
		Результат = 0;
		
		Для Каждого Столбец Из ТЗСтолбцов Цикл
			Результат = Результат + Значение(Строка.Значение, Столбец.Значение,, ,Раздел) * Столбец.Коэффициент;
		КонецЦикла;
				
		Значение(Строка.Значение, СтолбецПриемник, Результат, ,Раздел);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РасчетИтоговСтрок(СтрокаПриемник, СтрокиИсточники, КоличествоСтолбцов = 10, ТабПоле = Неопределено, Раздел = 1) // для раздела 1
	
	ТЗСтрок = ПолучитьТаблицуИзСтроки(СтрокиИсточники);	
	Если Раздел = 1 ИЛИ Раздел = 3 Тогда
		НачальноеЗначениеКолонки = 1;
		КонечноеЗначениеКолонки  = 11;
	ИначеЕсли Раздел = 4 Тогда 
		НачальноеЗначениеКолонки = 1;
		КонечноеЗначениеКолонки  = 7;
	Иначе
		НачальноеЗначениеКолонки = 11;
		КонечноеЗначениеКолонки  = 17;
	КонецЕсли;
	
	Для Столбец = НачальноеЗначениеКолонки По КонечноеЗначениеКолонки Цикл	
		Результат = 0;
		Для Каждого Строка Из ТЗСтрок Цикл
			Результат = Результат + Значение(Строка.Значение, СокрЛП(Столбец),, ТабПоле, Раздел) * Строка.Коэффициент;
		КонецЦикла;
		Значение(СтрокаПриемник, СокрЛП(Столбец), Результат, ТабПоле, Раздел);
	КонецЦикла;        
	
КонецПроцедуры

&НаСервере
// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьСведенияОрганизации() // общая

	ОргСведения = ЗаполнитьСведенияОбОрганизации(Налогоплательщик, ДатаПодписи);

	// Инициализируем переменные
	НаимЮЛПол 		= ""; // Полное наименование   	
	КодПоОКПО 		= ""; // КодПоОКПО             	
	БИНОрганизации 	= ""; // БИНОрганизации        	
	АдрЮР 			= ""; // юридический адрес     	
	ФИОРук 			= ""; // ФИО руководителя      	
	ФИОБух 			= ""; // ФИО главного бухгатера	
	ТелОрганизации 	= ""; //Телефон организации
	
	// Получаем данные
	ОргСведения.Свойство("ПолноеНаименование", НаимЮЛПол);
	ОргСведения.Свойство("БИН_ИИН", 	       БИНОрганизации);
	ОргСведения.Свойство("КодПоОКПО", 	       КодПоОКПО);
	ОргСведения.Свойство("ЮридическийАдрес",   АдрЮР);
	ОргСведения.Свойство("Руководитель",       ФИОРук);
	ОргСведения.Свойство("ГлавныйБухгалтер",   ФИОБух);
	ОргСведения.Свойство("Телефоны",           ТелОрганизации);
	
	// Производим операции связанные с текущей формой отчетности
	ФормаОтчетаПолеТабличногоДокументаСтраница0.Области.ГодОтчета.Значение  	= Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ФормаОтчетаПолеТабличногоДокументаСтраница0.Области.БИНОрганизации.Значение = БИНОрганизации;
	
	ФормаОтчетаПолеТабличногоДокументаСтраница1.Области.АдрЮР.Значение          = АдрЮР;
	
	ФормаОтчетаПолеТабличногоДокументаСтраница5.Области.НаимЮЛПол.Значение      = НаимЮЛПол;	
	ФормаОтчетаПолеТабличногоДокументаСтраница5.Области.АдрЮР.Значение          = АдрЮР;
	ФормаОтчетаПолеТабличногоДокументаСтраница5.Области.ТелОрганизации.Значение = ТелОрганизации;                                                                                               	
	ФормаОтчетаПолеТабличногоДокументаСтраница5.Области.ФИОРук.Значение         = СокрЛП(ФИОРук);
	ФормаОтчетаПолеТабличногоДокументаСтраница5.Области.ФИОБух.Значение 	 	= СокрЛП(ФИОБух);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция получает основные сведения о выбранной организации
// 
Функция ЗаполнитьСведенияОбОрганизации(Налогоплательщик, ДатаПодписи) Экспорт
	
	Если (Налогоплательщик = Неопределено) Или (Налогоплательщик = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат 0;
	КонецЕсли;
	
	// Составляем список данных, необходимых для вывода в отчетную форму
	Сведения = Новый СписокЗначений;
			
	Сведения.Добавить("", "НаимЮЛПол"); // Полное название организации   			
	Сведения.Добавить("", "КодПоОКПО"); // ОКПО                          			
	Сведения.Добавить("", "АдрЮР"); // Юридический адрес                 	
	Сведения.Добавить("", "ФИОБухКраткое"); // ФИО гл. бухгалтера        	
	Сведения.Добавить("", "ФИОРукКраткое"); // ФИО руководителя ТелОрганизации	
	Сведения.Добавить("", "ТелОрганизации"); // Телефон организации
	Сведения.Добавить("", "ИИН_БИН"); 		// ИИН БИН	                      
						  
	// Теперь получаем данные из глобальной общей функции	
	ОргСведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(Налогоплательщик, ДатаПодписи);
	//Если организация не указана то не выводим никаких сведений
		
	Возврат ОргСведения;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьРеглОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Форма = ДополнительныеПараметры.Форма;	
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", Форма.КодФормы));
		Вложенность = ДополнительныеПараметры.ОчищатьПриложения;	
		
		ОчиститьРеглОтчетЗавершениеНаСервере(СтрокаФормы.КодФормы, СтрокаФормы.Многострочность, Вложенность);
		
	КонецЕсли;
	
КонецПроцедуры 	

&НаСервере
Процедура ОчиститьРеглОтчетЗавершениеНаСервере(КодФормы, ПризнакМногострочности, Вложенность) Экспорт
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, ПризнакМногострочности, Вложенность);	
КонецПроцедуры
