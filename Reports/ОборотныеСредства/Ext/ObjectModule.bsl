#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПриОпределенииПараметровВыбора = Истина;
	Настройки.События.ПослеЗаполненияПанелиБыстрыхНастроек = Истина;
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	
КонецПроцедуры 

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт

	Элементы = Форма.Элементы;
	
	Элементы.ГруппаПериод.Видимость = Истина;
	Форма.ЕстьНачалоПериодаБК       = Истина;
	Форма.ЕстьКонецПериодаБК        = Истина;
	
	Элементы.Период.Видимость = Ложь;
	Форма.ЕстьПериодБК        = Ложь;
	
	Элементы.ГруппаОрганизацияРегистрНУ.Видимость   = Ложь;
	Элементы.ГруппаОрганизация.Видимость            = Истина;
	
	Элементы.ВыводитьЗаголовок.Видимость            = Истина;
	Элементы.ВыводитьПодписи.Видимость              = Истина;
	Элементы.ВыводитьПодписиРуководителей.Видимость = Ложь;
	
	Форма.ТипЗадолженности = 3;
	
	СписокСчетовРасчета = Отчеты.ОборотныеСредства.ПолучитьСчетаУчетаРасчетов();
	Форма.СписокСчетовРасчета.Очистить();
	Форма.СписокСчетовРасчета.ЗагрузитьЗначения(СписокСчетовРасчета.ВыгрузитьЗначения());
	
	Если НЕ Форма.РежимРасшифровки Тогда
		Форма.НачалоПериода = НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
		Форма.КонецПериода  = КонецМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	
	Элементы.ГруппаДополнительные.Видимость = Истина;
	Элементы.НастройкаСчетовУчетаРасчетовДополнительные.Видимость = Истина;
	
	Элементы.КоличествоВыводимыхЗаписейВДиаграммеДополнительные.Видимость = Ложь;
	Элементы.ПериодичностьДополнительные.Видимость = Ложь;
	
КонецПроцедуры

Процедура ПослеЗаполненияПанелиБыстрыхНастроек(Форма, ПараметрыЗаполнения) Экспорт
	
	Если ПараметрыЗаполнения.ИмяСобытия = "НастройкиПоУмолчанию" Тогда
		Форма.ПользовательскиеНастройкиМодифицированы = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииПараметровВыбора(Форма, СвойстваНастройки) Экспорт
	
	Если СвойстваНастройки.Тип = "ЭлементОтбора" Тогда
		ИмяОтбора = Строка(СвойстваНастройки.ПолеКД);
		Если ИмяОтбора = "Раздел" Тогда
			ЗначенияДляВыбора = Новый СписокЗначений;
			ЗначенияДляВыбора.ТипЗначения = Новый ОписаниеТипов("Строка");
			ЗначенияДляВыбора.Добавить(НСтр("ru = 'Денежные средства'"), НСтр("ru = 'Денежные средства'"));
			ЗначенияДляВыбора.Добавить(НСтр("ru = 'Краткосрочные финансовые вложения'"), НСтр("ru = 'Краткосрочные финансовые вложения'"));
			ЗначенияДляВыбора.Добавить(НСтр("ru = 'Дебиторская задолженность'"), НСтр("ru = 'Дебиторская задолженность'"));
			ЗначенияДляВыбора.Добавить(НСтр("ru = 'Запасы, в т.ч.'"), НСтр("ru = 'Запасы, в т.ч.'"));
			
			СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями = Истина;
			СвойстваНастройки.ЗначенияДляВыбора = ЗначенияДляВыбора;
		КонецЕсли;
		Если ИмяОтбора = "Подраздел" Тогда
			ЗначенияДляВыбора = Новый СписокЗначений;
			ЗначенияДляВыбора.ТипЗначения = Новый ОписаниеТипов("Строка");
			ЗначенияДляВыбора.Добавить(НСтр("ru = 'Наличные'"), НСтр("ru = 'Наличные'"));
			ЗначенияДляВыбора.Добавить(НСтр("ru = 'Безналичные'"), НСтр("ru = 'Безналичные'"));
			ЗначенияДляВыбора.Добавить(НСтр("ru = 'Деньги в пути'"), НСтр("ru = 'Деньги в пути'"));
			ЗначенияДляВыбора.Добавить(НСтр("ru = 'Задолженность покупателей'"), НСтр("ru = 'Задолженность покупателей'"));
			ЗначенияДляВыбора.Добавить(НСтр("ru = 'Задолженность подотчетных лиц'"), НСтр("ru = 'Задолженность подотчетных лиц'"));
			ЗначенияДляВыбора.Добавить(НСтр("ru = 'Прочая задолженность работников'"), НСтр("ru = 'Прочая задолженность работников'"));
			ЗначенияДляВыбора.Добавить(НСтр("ru = 'Прочие активы'"), НСтр("ru = 'Прочие активы'"));
			ЗначенияДляВыбора.Добавить(НСтр("ru = 'Сырье и материалы'"), НСтр("ru = 'Сырье и материалы'"));
			ЗначенияДляВыбора.Добавить(НСтр("ru = 'Готовая продукция'"), НСтр("ru = 'Готовая продукция'"));
			ЗначенияДляВыбора.Добавить(НСтр("ru = 'Товары'"), НСтр("ru = 'Товары'"));
			ЗначенияДляВыбора.Добавить(НСтр("ru = 'Незавершенное производство'"), НСтр("ru = 'Незавершенное производство'"));
			ЗначенияДляВыбора.Добавить(НСтр("ru = 'Прочие запасы'"), НСтр("ru = 'Прочие запасы'"));
			
			СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями = Истина;
			СвойстваНастройки.ЗначенияДляВыбора = ЗначенияДляВыбора;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	ЗаполняемыеНастройки = Новый Структура("Группировка", Истина);
	БухгалтерскиеОтчетыВызовСервера.ПередЗагрузкойНастроекВКомпоновщик(ЭтотОбъект, Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД, ЗаполняемыеНастройки);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ДополнительныеСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	Если ДополнительныеСвойства.Свойство("НастройкиОтчета") И ТипЗнч(ДополнительныеСвойства.НастройкиОтчета) = Тип("Структура") Тогда
		НастройкиОтчета  = ДополнительныеСвойства.НастройкиОтчета;
		НачалоПериода    = НастройкиОтчета.НачалоПериода;
		КонецПериода     = НастройкиОтчета.КонецПериода;
	КонецЕсли;
	
	Проверки = Новый Структура("КорректностьПериода", Истина);
	БухгалтерскиеОтчетыВызовСервера.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, Проверки);
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДокументРезультат.Очистить();
	
	ОтчетМетаданные = Метаданные();
	ИмяОтчета       = ОтчетМетаданные.ПолноеИмя();
	МенеджерОтчета  = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяОтчета);
	
	РежимВариантаОтчета = БухгалтерскиеОтчетыВызовСервера.ПолучитьРежимВыполненияОтчета(ОтчетМетаданные);
	
	Если НЕ РежимВариантаОтчета Тогда
		
		БухгалтерскиеОтчетыВызовСервера.ОбработкаСобытияПриКомпоновкеРезультата(ЭтотОбъект, ДокументРезультат, ДанныеРасшифровки);
		Возврат;
		
	Иначе
		
		РежимРасшифровки = КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Свойство("РежимРасшифровки");
		
		ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
		
		//ХранилищеСвойств = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "НастройкиОтчета");
		//Если ХранилищеСвойств <> Неопределено И ТипЗнч(ХранилищеСвойств.Значение) = Тип("ХранилищеЗначения") Тогда
		//	НастройкиОтчета = ХранилищеСвойств.Значение.Получить();
		//Иначе
		//	Возврат;
		//КонецЕсли;
		
		ПараметрНастройкиОтчета = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "НастройкиОтчета");
		Если ПараметрНастройкиОтчета <> Неопределено И ТипЗнч(ПараметрНастройкиОтчета.Значение) = Тип("ХранилищеЗначения") Тогда
			НастройкиОтчета = ПараметрНастройкиОтчета.Значение.Получить();
		КонецЕсли;
		
		Если НастройкиОтчета = Неопределено Тогда
			ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("НастройкиОтчета", НастройкиОтчета);
		КонецЕсли;
		
		Если ТипЗнч(НастройкиОтчета) = Тип("ХранилищеЗначения") Тогда
			НастройкиОтчета = НастройкиОтчета.Получить();
		КонецЕсли;
		
		Если НастройкиОтчета = Неопределено Тогда
			Возврат;
		Иначе
			БухгалтерскиеОтчетыВызовСервера.УстановкаПериодаОтчетаРассылка(НастройкиОтчета, ПользовательскиеНастройки);
		КонецЕсли;
		
		Если НастройкиОтчета.ВыводитьЗаголовок Тогда
			МенеджерОтчета.ПриВыводеЗаголовка(НастройкиОтчета, ДокументРезультат);
		КонецЕсли;
		ПараметрНастройкиОтчета = Неопределено;
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("НастройкиОтчета", ПараметрНастройкиОтчета);
		
		Если ЗначениеЗаполнено(НастройкиОтчета.НачалоПериода) Тогда
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(НастройкиОтчета.НачалоПериода));
		Иначе
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", Дата(1, 1, 1));
		КонецЕсли;
		Если ЗначениеЗаполнено(НастройкиОтчета.КонецПериода) Тогда
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(НастройкиОтчета.КонецПериода));
		Иначе
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", Дата(3999, 11, 1));
		КонецЕсли;
		
		ИзмененыНастройкиВариант = Истина;
		Если ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта") Тогда
			Если ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта <> "ОборотныеСредства" Тогда
				ИзмененыНастройкиВариант = Истина;
			Иначе
				Если НастройкиОтчета.Свойство("ИзмененыНастройкиВариант") Тогда
					ИзмененыНастройкиВариант = НастройкиОтчета.ИзмененыНастройкиВариант;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если КомпоновщикНастроек.Настройки.Структура.Количество() > 0 И НЕ РежимРасшифровки И НЕ ИзмененыНастройкиВариант Тогда
			ПерваяГруппировка = КомпоновщикНастроек.Настройки.Структура[0];
			Если ТипЗнч(ПерваяГруппировка) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				ПерваяГруппировка.Имя = "Группировка_";
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	
	// Компоновка макета
	
	НастройкиДляКомпоновкиМакета = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Попытка
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиДляКомпоновкиМакета, ДанныеРасшифровки);

		ВнешниеНаборыДанных = МенеджерОтчета.ПолучитьВнешниеНаборыДанных(НастройкиОтчета, МакетКомпоновки);

		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		Если ВнешниеНаборыДанных = Неопределено Тогда
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки, Истина);
		Иначе
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
		КонецЕсли;	

		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
		
		ПроцессорВывода.НачатьВывод();
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
	Исключение
		// Запись в журнал регистрации не требуется
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Пока ИнформацияОбОшибке.Причина <> Неопределено Цикл
			ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
		КонецЦикла;
		ТекстСообщения = НСтр("ru = 'Отчет не сформирован!'") + Символы.ПС + ИнформацияОбОшибке.Описание;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецПопытки;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ВывестиПодписи(ДокументРезультат) Экспорт
	
	ДополнительныеСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	Если ДополнительныеСвойства.Свойство("НастройкиОтчета") И ТипЗнч(ДополнительныеСвойства.НастройкиОтчета) = Тип("Структура") Тогда
		НастройкиОтчета = ДополнительныеСвойства.НастройкиОтчета;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если НастройкиОтчета.ВыводитьПодписи Тогда
		БухгалтерскиеОтчетыВызовСервера.ВыводПодписейОтчета(НастройкиОтчета, ДокументРезультат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкамиПоУмолчанию(ЗаполняемыеНастройки, ОтчетОбъект) Экспорт
	
	Если ОтчетОбъект.РежимРасшифровки Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаполняемыеНастройки.Свойство("Группировка") И ЗаполняемыеНастройки.Группировка Тогда
	
		ТаблицаГруппировка = ОтчетОбъект.Группировка;

		ТаблицаГруппировка.Очистить();
		
		НоваяСтрока = ТаблицаГруппировка.Добавить();
		НоваяСтрока.Поле           = "Раздел";
		НоваяСтрока.Использование  = Истина;
		НоваяСтрока.Представление  = НСтр("ru = 'Раздел'");
		НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;	
		
		НоваяСтрока = ТаблицаГруппировка.Добавить();
		НоваяСтрока.Поле           = "Подраздел";
		НоваяСтрока.Использование  = Истина;
		НоваяСтрока.Представление  = НСтр("ru = 'Подраздел'");
		НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
			
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

#КонецЕсли