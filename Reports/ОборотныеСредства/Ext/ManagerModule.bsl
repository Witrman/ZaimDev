#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПриВыводеЗаголовка,
							|ИспользоватьВнешниеНаборыДанных,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки,
							|ИспользоватьРасширенныеПараметрыРасшифровки",
							Истина, Истина, Истина, Истина, Истина, Истина);
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт
	
	ТекстОрганизации = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ПараметрыОтчета.СписокСтруктурныхЕдиниц,,, Истина);
	
	ЗаголовокОтчета = НСтр("ru = 'Оборотные средства %1'");
	ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ЗаголовокОтчета, БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода));
		
	Если ОрганизацияВНачале Тогда
		ЗаголовокОтчета = ТекстОрганизации + Символы.ПС + ЗаголовокОтчета;
	Иначе
		ЗаголовокОтчета = ЗаголовокОтчета + " " + ТекстОрганизации;
	КонецЕсли;
	
	Возврат ЗаголовокОтчета;
	
КонецФункции

Процедура ПриВыводеЗаголовка(ПараметрыОтчета, Результат) Экспорт
	
	МакетЗаголовок   = ПолучитьОбщийМакет("ЗаголовокОтчета");
	ОбластьЗаголовок = МакетЗаголовок.ПолучитьОбласть("Заголовок");
	
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ПолучитьТекстЗаголовка(ПараметрыОтчета);
	
	Результат.Вывести(ОбластьЗаголовок);
	
КонецПроцедуры

Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	// Инициализация
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Раздел");
	Таблица.Колонки.Добавить("Подраздел");
	Таблица.Колонки.Добавить("Порядок");
	Таблица.Колонки.Добавить("Счет");
	Таблица.Колонки.Добавить("СуммаНаНачалоПериода"      , ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(17,2));
	Таблица.Колонки.Добавить("УдельныйВесНаНачалоПериода", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(6,2));
	Таблица.Колонки.Добавить("СуммаНаКонецПериода"       , ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(17,2));
	Таблица.Колонки.Добавить("УдельныйВесНаКонецПериода" , ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(6,2));
	
	ПС = ПланыСчетов["Типовой"];
	Счет1000 = ПС.ДенежныеСредства;
	Счет1010 = ПС.ДенежныеСредстваВКассе;
	Счет1021 = ПС.ДенежныеСредстваВПути;
	Счет1022 = ПС.ДенежныеСредстваВПутиКонвертацияВалюты;
	Счет1030 = ПС.ДенежныеСредстваНаТекущихБанковскихСчетах;
	Счет1040 = ПС.ДенежныеСредстваНаКорреспондентскихСчетах;
	Счет1050 = ПС.ДенежныеСредстваНаСберегательныхСчетах;
	Счет1060 = ПС.ДенежныеСредстваОграниченныеВИспользовании;
	Счет1080 = ПС.ПрочиеДенежныеСредства;
	Счет1090 = ПС.ОценочныйРезервПодУбыткиОтОбесцененияДенежныхСредств;
	
	Счет1100 = ПС.КраткосрочныеФинансовыеИнвестиции;
	Счет1110 = ПС.КраткосрочныеФинансовыеАктивыОцениваемыеПоАмортизированнойСтоимости;
	Счет1120 = ПС.КраткосрочныеФинансовыеАктивыОцениваемыеПоСправедливойСтоимостиЧерезПрочийСовокупныйДоход;
	Счет1130 = ПС.КраткосрочныеФинансовыеАктивыОцениваемыеПоСправедливойСтоимостиЧерезПрибыльУбыток;
	Счет1140 = ПС.КраткосрочныеДебиторскиеПроизводныеФинансовыеИнструменты;
	Счет1160 = ПС.ПрочиеКраткосрочныеФинансовыеИнвестиции;
	Счет1170 = ПС.ОценочныйРезервПодУбыткиПоКраткосрочнымФинансовымАктивам;
	
	Счет1200 = ПС.КраткосрочнаяДебиторскаяЗадолженность;
	Счет1200 = ПС.КраткосрочнаяДебиторскаяЗадолженность;
	
	Счет1210 = ПС.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков;
	Счет1220 = ПС.КраткосрочнаяДебиторскаяЗадолженностьДочернихОрганизаций;
	Счет1230 = ПС.КраткосрочнаяДебиторскаяЗадолженностьАссоциированныхИСовместныхОрганизаций;
	Счет1240 = ПС.КраткосрочнаяДебиторскаяЗадолженностьФилиаловИСтруктурныхПодразделений;
	
	Счет1250 = ПС.КраткосрочнаяДебиторскаяЗадолженностьРаботников;
	Счет1252 = ПС.КраткосрочнаяЗадолженностьПоВыплаченнойЗаработнойПлате;
	Счет1253 = ПС.КраткосрочнаяЗадолженностьПоПредоставленнымРаботникамЗаймам;
	Счет1254 = ПС.ПрочаяКраткосрочнаяЗадолженностьРаботников;

	Счет1260 = ПС.КраткосрочнаяДебиторскаяЗадолженностьПоАренде;
	Счет1151 = ПС.КраткосрочныеВознагражденияКПолучению ;         // согласно новому плану счетов  , бывший 1271
	
	Счет1280 = ПС.ПрочаяКраткосрочнаяДебиторскаяЗадолженность_;
	Счет1281 = ПС.КраткосрочнаяЗадолженностьПоВозвратамТМЗПоставщикам;
	Счет1282 = ПС.КраткосрочнаяЗадолженностьПоПретензиям;
	Счет1284 = ПС.ПрочаяКраткосрочнаяДебиторскаяЗадолженность;
	
	Счет1290 = ПС.РезервПоСомнительнымТребованиям; 
		
	Счет1610 = ПС.КраткосрочныеАвансыВыданные;
	Счет1620 = ПС.КраткосрочныеРасходыБудущихПериодов;
	Счет1630 = ПС.ПрочиеКраткосрочныеАктивы;
	
	Счет1251 = ПС.КраткосрочнаяЗадолженностьПодотчетныхЛиц;
	Счет1730 = ПС.КраткосрочныеАктивыПоДоговорам;   //согласно новому плану счетов

	
	Счет1300 = ПС.Запасы;
	Счет1310 = ПС.СырьеИМатериалы;
	Счет1320 = ПС.ГотоваяПродукция;
	Счет1330 = ПС.Товары;
	Счет1340 = ПС.НезавершенноеПроизводство;
	Счет1341 = ПС.НезавершенноеПроизводство_ОсновноеПроизводство;
	Счет1342 = ПС.НезавершенноеПроизводство_ПолуфабрикатыСобственногоПроизводства;
	Счет1343 = ПС.НезавершенноеПроизводство_ВспомогательныеПроизводства;
	
	Счет1351 = ПС.МатериалыПереданныеВПереработку;
	
	Счет1361 = ПС.РезервПоСписаниюСырьяИМатериалов;
	Счет1362 = ПС.РезервПоСписаниюГотовойПродукции;
	Счет1363 = ПС.РезервПоСписаниюТоваров;
	
	// Подготовим список счетов
	СчетаДляИсключения = ПолучитьСчетаУчетаРасчетов();
	ИсключенныеСчета = БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(3);
	Если ИсключенныеСчета = Неопределено Тогда
		 ИсключенныеСчета = Новый СписокЗначений();
	Иначе
		Если ИсключенныеСчета.Количество() <> 0 Тогда
			МаксимальныйИндекс = ИсключенныеСчета.Количество() - 1;
			Пока МаксимальныйИндекс >= 0 Цикл
				ТекущийСчет = ИсключенныеСчета.Получить(МаксимальныйИндекс);
				Если СчетаДляИсключения.НайтиПоЗначению(ТекущийСчет.Значение) = Неопределено Тогда
					ИсключенныеСчета.Удалить(ТекущийСчет);
				КонецЕсли;
				МаксимальныйИндекс = МаксимальныйИндекс - 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	

	ВыборкаПоСчету = ПолучитьВыборкуПоСчету(ПараметрыОтчета);
	
	//// Денежные средства (порядок 0)
	
	//Наличные
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1010) = Неопределено Тогда
		П1Н_1010 = ПолучитьИтог(Счет1010, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П1К_1010 = ПолучитьИтог(Счет1010, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П1Н_1010 = 0;
		П1К_1010 = 0;
	КонецЕсли;
	
	П1Н = П1Н_1010;
	П1К = П1К_1010;
	
	//безналичные
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1030) = Неопределено Тогда
		П2Н_1030 = ПолучитьИтог(Счет1030, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П2К_1030 = ПолучитьИтог(Счет1030, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П2Н_1030 = 0;
		П2К_1030 = 0;
	КонецЕсли;
	
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1040) = Неопределено Тогда
		П2Н_1040 = ПолучитьИтог(Счет1040, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П2К_1040 = ПолучитьИтог(Счет1040, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П2Н_1040 = 0;
		П2К_1040 = 0;
	КонецЕсли;
	
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1050) = Неопределено Тогда
		П2Н_1050 = ПолучитьИтог(Счет1050, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П2К_1050 = ПолучитьИтог(Счет1050, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П2Н_1050 = 0;
		П2К_1050 = 0;
	КонецЕсли;
	
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1060) = Неопределено Тогда
		П2Н_1060 = ПолучитьИтог(Счет1060, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П2К_1060 = ПолучитьИтог(Счет1060, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П2Н_1060 = 0;
		П2К_1060 = 0;
	КонецЕсли;
	
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1080) = Неопределено Тогда
		П2Н_1080 = ПолучитьИтог(Счет1080, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П2К_1080 = ПолучитьИтог(Счет1080, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П2Н_1080 = 0;
		П2К_1080 = 0;
	КонецЕсли;

	Если ИсключенныеСчета.НайтиПоЗначению(Счет1090) = Неопределено Тогда
		П2Н_1090 = ПолучитьИтог(Счет1090, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П2К_1090 = ПолучитьИтог(Счет1090, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П2Н_1090 = 0;
		П2К_1090 = 0;
	КонецЕсли;
	
	П2Н = П2Н_1030 + П2Н_1040 + П2Н_1050 + П2Н_1060 + П2Н_1080 + П2Н_1090;
	П2К = П2К_1030 + П2К_1040 + П2К_1050 + П2К_1060 + П2К_1080 + П2К_1090;
	
	//деньги в пути
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1021) = Неопределено Тогда
		П3Н_1021 = ПолучитьИтог(Счет1021, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П3К_1021 = ПолучитьИтог(Счет1021, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П3Н_1021 = 0;
		П3К_1021 = 0;
	КонецЕсли;
	
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1022) = Неопределено Тогда
		П3Н_1022 = ПолучитьИтог(Счет1022, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П3К_1022 = ПолучитьИтог(Счет1022, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П3Н_1022 = 0;
		П3К_1022 = 0;
	КонецЕсли;
	
	П3Н = П3Н_1021 + П3Н_1022;
	П3К = П3К_1021 + П3К_1022;
	
	//Общая сумма по денежным средстсвам
	П0Н = П1Н + П2Н + П3Н;
	П0К = П1К + П2К + П3К; 	
			 		
	//// Краткосрочные финансовые вложения 
	
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1110) = Неопределено Тогда
		П4Н_1110 = ПолучитьИтог(Счет1110, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П4К_1110 = ПолучитьИтог(Счет1110, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П4Н_1110 = 0;
		П4К_1110 = 0;
	КонецЕсли;
		
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1120) = Неопределено Тогда
		П4Н_1120 = ПолучитьИтог(Счет1120, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П4К_1120 = ПолучитьИтог(Счет1120, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П4Н_1120 = 0;
		П4К_1120 = 0;
	КонецЕсли;
		
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1130) = Неопределено Тогда
		П4Н_1130 = ПолучитьИтог(Счет1130, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П4К_1130 = ПолучитьИтог(Счет1130, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П4Н_1130 = 0;
		П4К_1130 = 0;
	КонецЕсли;
		
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1140) = Неопределено Тогда
		П4Н_1140 = ПолучитьИтог(Счет1140, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П4К_1140 = ПолучитьИтог(Счет1140, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П4Н_1140 = 0;
		П4К_1140 = 0;
	КонецЕсли;
		
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1160) = Неопределено Тогда
		П4Н_1160 = ПолучитьИтог(Счет1160, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П4К_1160 = ПолучитьИтог(Счет1160, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П4Н_1160 = 0;
		П4К_1160 = 0;
	КонецЕсли;
	
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1170) = Неопределено Тогда
		П4Н_1170 = ПолучитьИтог(Счет1170, ВыборкаПоСчету, "СуммаНачальныйОстатокКт");
		П4К_1170 = ПолучитьИтог(Счет1170, ВыборкаПоСчету, "СуммаКонечныйОстатокКт");
	Иначе
		П4Н_1170 = 0;
		П4К_1170 = 0;
	КонецЕсли;

		
	П4Н = П4Н_1110 + П4Н_1120 + П4Н_1130 + П4Н_1140 + П4Н_1160 - П4Н_1170;
	П4К = П4К_1110 + П4К_1120 + П4К_1130 + П4К_1140 + П4К_1160 - П4К_1170;
	
	//////////Задолженность покупателей(расчет составляющих)////////////////
	
	П6Н1210 = 0;
	П6К1210 = 0;
	П6Н1220 = 0;
	П6К1220 = 0;
	П6Н1230 = 0;
	П6К1230 = 0;
	П6Н1240 = 0;
	П6К1240 = 0;
	П6Н1260 = 0;
	П6К1260 = 0;
	П6Н1151 = 0;
	П6К1151 = 0;
	
	П6Н1280 = 0;
	П6К1280 = 0;
	П6Н1281 = 0;
	П6К1281 = 0;
	П6Н1282 = 0;
	П6К1282 = 0;
	П6Н1284 = 0;
	П6К1284 = 0;
	
	П6Н1290 = 0;
	П6К1290 = 0;
	
	П6Н1610 = 0;
	П6К1610 = 0;
			
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1210) = Неопределено Тогда
		П6Н1210 = ПолучитьИтог(Счет1210, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П6К1210 = ПолучитьИтог(Счет1210, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	КонецЕсли;
	
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1220) = Неопределено Тогда
		П6Н1220 = ПолучитьИтог(Счет1220, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П6К1220 = ПолучитьИтог(Счет1220, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	КонецЕсли;
	
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1230) = Неопределено Тогда
		П6Н1230 = ПолучитьИтог(Счет1230, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П6К1230 = ПолучитьИтог(Счет1230, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	КонецЕсли;

	Если ИсключенныеСчета.НайтиПоЗначению(Счет1240) = Неопределено Тогда
		П6Н1240 = ПолучитьИтог(Счет1240, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П6К1240 = ПолучитьИтог(Счет1240, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	КонецЕсли;
		
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1260) = Неопределено Тогда
		П6Н1260 = ПолучитьИтог(Счет1260, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П6К1260 = ПолучитьИтог(Счет1260, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	КонецЕсли;

	Если ИсключенныеСчета.НайтиПоЗначению(Счет1151) = Неопределено Тогда
		П6Н1151 = ПолучитьИтог(Счет1151, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П6К1151 = ПолучитьИтог(Счет1151, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	КонецЕсли;
	
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1281) = Неопределено Тогда
		П6Н1281 = ПолучитьИтог(Счет1281, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П6К1281 = ПолучитьИтог(Счет1281, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	КонецЕсли;  
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1282) = Неопределено Тогда
		П6Н1282 = ПолучитьИтог(Счет1282, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П6К1282 = ПолучитьИтог(Счет1282, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	КонецЕсли;  
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1284) = Неопределено Тогда
		П6Н1284 = ПолучитьИтог(Счет1284, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П6К1284 = ПолучитьИтог(Счет1284, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	КонецЕсли;  
	
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1290) = Неопределено Тогда
		П6Н1290 = ПолучитьИтог(Счет1290, ВыборкаПоСчету, "СуммаНачальныйОстатокКт");
		П6К1290 = ПолучитьИтог(Счет1290, ВыборкаПоСчету, "СуммаКонечныйОстатокКт");
	КонецЕсли;  
	  	
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1610) = Неопределено Тогда
		П6Н1610 = ПолучитьИтог(Счет1610, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П6К1610 = ПолучитьИтог(Счет1610, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	КонецЕсли;  
	
		
	П6Н = П6Н1210 + П6Н1220 + П6Н1230 + П6Н1240 + П6Н1260 + П6Н1151 + П6Н1280 + П6Н1281 + П6Н1282 + П6Н1284 - П6Н1290 + П6Н1610;
	П6К = П6К1210 + П6К1220 + П6К1230 + П6К1240 + П6К1260 + П6К1151 + П6К1280 + П6К1281 + П6К1282 + П6К1284 - П6К1290 + П6К1610;
	
	 //задолженность подотчтетных лиц
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1251) = Неопределено Тогда
		П7Н_1251 = ПолучитьИтог(Счет1251, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П7К_1251 = ПолучитьИтог(Счет1251, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П7Н_1251 = 0;
		П7К_1251 = 0;
	КонецЕсли;

	П7Н = П7Н_1251;
	П7К = П7К_1251;

	//прочая задолженность работников
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1252) = Неопределено Тогда
		П8Н_1252 = ПолучитьИтог(Счет1252, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П8К_1252 = ПолучитьИтог(Счет1252, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П8Н_1252 = 0;
		П8К_1252 = 0;
	КонецЕсли;
	
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1253) = Неопределено Тогда
		П8Н_1253 = ПолучитьИтог(Счет1253, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П8К_1253 = ПолучитьИтог(Счет1253, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П8Н_1253 = 0;
		П8К_1253 = 0;
	КонецЕсли;
	
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1254) = Неопределено Тогда
		П8Н_1254 = ПолучитьИтог(Счет1254, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П8К_1254 = ПолучитьИтог(Счет1254, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П8Н_1254 = 0;
		П8К_1254 = 0;
	КонецЕсли;
	
	П8Н = П8Н_1252 + П8Н_1253 + П8Н_1254;
	П8К = П8К_1252 + П8К_1253 + П8К_1254;

	//прочие активы
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1620) = Неопределено Тогда
		П9Н_1620 = ПолучитьИтог(Счет1620, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П9К_1620 = ПолучитьИтог(Счет1620, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П9Н_1620 = 0;
		П9К_1620 = 0;
	КонецЕсли;
	
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1630) = Неопределено Тогда
		П9Н_1630 = ПолучитьИтог(Счет1630, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П9К_1630 = ПолучитьИтог(Счет1630, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П9Н_1630 = 0;
		П9К_1630 = 0;
	КонецЕсли;
	
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1730) = Неопределено Тогда
		П9Н_1730 = ПолучитьИтог(Счет1730, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П9К_1730 = ПолучитьИтог(Счет1730, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П9Н_1730 = 0;
		П9К_1730 = 0;
	КонецЕсли; 
	
	П9Н = П9Н_1620 + П9Н_1630 + П9Н_1730;
	П9К = П9К_1620 + П9К_1630 + П9К_1730;
	
	//общая задолженность покупателей
	П5Н = П6Н + П7Н + П8Н + П9Н;
	П5К = П6К + П7К + П8К + П9К;                                        
	
	//////Запасы(расчет составляющих)///////////////////////
	
		//Сырье и материалы////////
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1310) = Неопределено Тогда
		П10Н_1310 = ПолучитьИтог(Счет1310, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П10К_1310 = ПолучитьИтог(Счет1310, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П10Н_1310 = 0;
		П10К_1310 = 0;
	КонецЕсли;
		
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1361) = Неопределено Тогда
		П10Н_1361 = ПолучитьИтог(Счет1361, ВыборкаПоСчету, "СуммаНачальныйОстатокКт");
		П10К_1361 = ПолучитьИтог(Счет1361, ВыборкаПоСчету, "СуммаКонечныйОстатокКт");
	Иначе
		П10Н_1361 = 0;
		П10К_1361 = 0;
	КонецЕсли;

	П10Н = П10Н_1310 - П10Н_1361;
	П10К = П10К_1310 - П10К_1361;
	
	//Готовая продукция	
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1320) = Неопределено Тогда
		П11Н_1320 = ПолучитьИтог(Счет1320, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П11К_1320 = ПолучитьИтог(Счет1320, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П11Н_1320 = 0;
		П11К_1320 = 0;
	КонецЕсли;
	
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1362) = Неопределено Тогда
		П11Н_1362 = ПолучитьИтог(Счет1362, ВыборкаПоСчету, "СуммаНачальныйОстатокКт");
		П11К_1362 = ПолучитьИтог(Счет1362, ВыборкаПоСчету, "СуммаКонечныйОстатокКт");
	Иначе
		П11Н_1362 = 0;
		П11К_1362 = 0;
	КонецЕсли;
	
	П11Н = П11Н_1320 - П11Н_1362;
	П11К = П11К_1320 - П11К_1362;
	
	//Товары
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1330) = Неопределено Тогда
		П12Н_1330 = ПолучитьИтог(Счет1330, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П12К_1330 = ПолучитьИтог(Счет1330, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П12Н_1330 = 0;
		П12К_1330 = 0;
	КонецЕсли;
	
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1363) = Неопределено Тогда
		П12Н_1363 = ПолучитьИтог(Счет1363, ВыборкаПоСчету, "СуммаНачальныйОстатокКт");
		П12К_1363 = ПолучитьИтог(Счет1363, ВыборкаПоСчету, "СуммаКонечныйОстатокКт");
	Иначе
		П12Н_1363 = 0;
		П12К_1363 = 0;
	КонецЕсли;

	П12Н = П12Н_1330 - П12Н_1363;
	П12К = П12К_1330 - П12К_1363;
		
	//незавершенное производство
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1341) = Неопределено Тогда
		П13Н_1341 = ПолучитьИтог(Счет1341, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П13К_1341 = ПолучитьИтог(Счет1341, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П13Н_1341 = 0;
		П13К_1341 = 0;
	КонецЕсли;
		
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1342) = Неопределено Тогда
		П13Н_1342 = ПолучитьИтог(Счет1342, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П13К_1342 = ПолучитьИтог(Счет1342, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П13Н_1342 = 0;
		П13К_1342 = 0;
	КонецЕсли;
		
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1343) = Неопределено Тогда
		П13Н_1343 = ПолучитьИтог(Счет1343, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П13К_1343 = ПолучитьИтог(Счет1343, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П13Н_1343 = 0;
		П13К_1343 = 0;
	КонецЕсли;
		
	П13Н = П13Н_1341 + П13Н_1342 + П13Н_1343; 
	П13К = П13К_1341 + П13К_1342 + П13К_1343; 
		
	//прочие запасы
	Если ИсключенныеСчета.НайтиПоЗначению(Счет1351) = Неопределено Тогда
		П14Н_1351 = ПолучитьИтог(Счет1351, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
		П14К_1351 = ПолучитьИтог(Счет1351, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	Иначе
		П14Н_1351 = 0;
		П14К_1351 = 0;
	КонецЕсли;
		
	П14Н = П14Н_1351; 
	П14К = П14К_1351;
	
	Если П1Н <> 0 ИЛИ П1К <> 0 Тогда
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Порядок              = 1;
		НоваяСтрока.Раздел               = НСтр("ru = 'Денежные средства'");
		НоваяСтрока.Подраздел            = НСтр("ru = 'Наличные'");
		НоваяСтрока.СуммаНаНачалоПериода = П1Н;
		НоваяСтрока.СуммаНаКонецПериода  = П1К;
		НоваяСтрока.Счет                 = Счет1010;
	КонецЕсли;
	Если П2Н <> 0 ИЛИ П2К <> 0 Тогда
		Если П2Н_1030 <> 0 ИЛИ П2К_1030 <> 0 Тогда 
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 2;
			НоваяСтрока.Раздел               = НСтр("ru = 'Денежные средства'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Безналичные'");
			НоваяСтрока.СуммаНаНачалоПериода = П2Н_1030;
			НоваяСтрока.СуммаНаКонецПериода  = П2К_1030;
			НоваяСтрока.Счет                 = Счет1030;
		КонецЕсли;
		Если П2Н_1040 <> 0 ИЛИ П2К_1040 <> 0 Тогда 
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 2;
			НоваяСтрока.Раздел               = НСтр("ru = 'Денежные средства'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Безналичные'");
			НоваяСтрока.СуммаНаНачалоПериода = П2Н_1040;
			НоваяСтрока.СуммаНаКонецПериода  = П2К_1040;
			НоваяСтрока.Счет                 = Счет1040;
		КонецЕсли;
		Если П2Н_1050 <> 0 ИЛИ П2К_1050 <> 0 Тогда 
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 2;
			НоваяСтрока.Раздел               = НСтр("ru = 'Денежные средства'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Безналичные'");
			НоваяСтрока.СуммаНаНачалоПериода = П2Н_1050;
			НоваяСтрока.СуммаНаКонецПериода  = П2К_1050;
			НоваяСтрока.Счет                 = Счет1050;
		КонецЕсли;
		Если П2Н_1060 <> 0 ИЛИ П2К_1060 <> 0 Тогда 
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 2;
			НоваяСтрока.Раздел               = НСтр("ru = 'Денежные средства'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Безналичные'");
			НоваяСтрока.СуммаНаНачалоПериода = П2Н_1060;
			НоваяСтрока.СуммаНаКонецПериода  = П2К_1060;
			НоваяСтрока.Счет                 = Счет1060;
		КонецЕсли;
		Если П2Н_1080 <> 0 ИЛИ П2К_1080 <> 0 Тогда 
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 2;
			НоваяСтрока.Раздел               = НСтр("ru = 'Денежные средства'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Безналичные'");
			НоваяСтрока.СуммаНаНачалоПериода = П2Н_1080;
			НоваяСтрока.СуммаНаКонецПериода  = П2К_1080;
			НоваяСтрока.Счет                 = Счет1080;
		КонецЕсли;
		Если П2Н_1090 <> 0 ИЛИ П2К_1090 <> 0 Тогда 
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 2;
			НоваяСтрока.Раздел               = НСтр("ru = 'Денежные средства'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Безналичные'");
			НоваяСтрока.СуммаНаНачалоПериода = П2Н_1090;
			НоваяСтрока.СуммаНаКонецПериода  = П2К_1090;
			НоваяСтрока.Счет                 = Счет1090;
		КонецЕсли;
	КонецЕсли;
	Если П3Н <> 0 ИЛИ П3К <> 0 Тогда
		Если П3Н_1021 <> 0 ИЛИ П3К_1021 <> 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 3;
			НоваяСтрока.Раздел               = НСтр("ru = 'Денежные средства'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Деньги в пути'");
			НоваяСтрока.СуммаНаНачалоПериода = П3Н_1021;
			НоваяСтрока.СуммаНаКонецПериода  = П3К_1021;
			НоваяСтрока.Счет                 = Счет1021;
		КонецЕсли;
		Если П3Н_1022 <> 0 ИЛИ П3К_1022 <> 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 3;
			НоваяСтрока.Раздел               = НСтр("ru = 'Денежные средства'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Деньги в пути'");
			НоваяСтрока.СуммаНаНачалоПериода = П3Н_1022;
			НоваяСтрока.СуммаНаКонецПериода  = П3К_1022;
			НоваяСтрока.Счет                 = Счет1022;
		КонецЕсли;
	КонецЕсли;
	Если П4Н <> 0 ИЛИ П4К <> 0 Тогда		
		Если П4Н_1110 <> 0 ИЛИ П4К_1110 <> 0 Тогда		
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 4;
			НоваяСтрока.Раздел               = НСтр("ru = 'Краткосрочные финансовые вложения'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Займы'");
			НоваяСтрока.СуммаНаНачалоПериода = П4Н_1110;
			НоваяСтрока.СуммаНаКонецПериода  = П4К_1110;
			НоваяСтрока.Счет                 = Счет1110;
		КонецЕсли;
		Если П4Н_1120 <> 0 ИЛИ П4К_1120 <> 0 Тогда		
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 4;
			НоваяСтрока.Раздел               = НСтр("ru = 'Краткосрочные финансовые вложения'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Финансовые активы'");
			НоваяСтрока.СуммаНаНачалоПериода = П4Н_1120;
			НоваяСтрока.СуммаНаКонецПериода  = П4К_1120;
			НоваяСтрока.Счет                 = Счет1120;
		КонецЕсли;
		Если П4Н_1130 <> 0 ИЛИ П4К_1130 <> 0 Тогда		
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 4;
			НоваяСтрока.Раздел               = НСтр("ru = 'Краткосрочные финансовые вложения'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Инвестиции'");
			НоваяСтрока.СуммаНаНачалоПериода = П4Н_1130;
			НоваяСтрока.СуммаНаКонецПериода  = П4К_1130;
			НоваяСтрока.Счет                 = Счет1130;
		КонецЕсли;
		Если П4Н_1140 <> 0 ИЛИ П4К_1140 <> 0 Тогда		
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 4;
			НоваяСтрока.Раздел               = НСтр("ru = 'Краткосрочные финансовые вложения'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Инвестиции'");
			НоваяСтрока.СуммаНаНачалоПериода = П4Н_1140;
			НоваяСтрока.СуммаНаКонецПериода  = П4К_1140;
			НоваяСтрока.Счет                 = Счет1140;
		КонецЕсли;
		Если П4Н_1160 <> 0 ИЛИ П4К_1160 <> 0 Тогда		
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 4;
			НоваяСтрока.Раздел               = НСтр("ru = 'Краткосрочные финансовые вложения'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Инвестиции'");
			НоваяСтрока.СуммаНаНачалоПериода = П4Н_1160;
			НоваяСтрока.СуммаНаКонецПериода  = П4К_1160;
			НоваяСтрока.Счет                 = Счет1160;
		КонецЕсли;
		Если П4Н_1170 <> 0 ИЛИ П4К_1170 <> 0 Тогда		
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 4;
			НоваяСтрока.Раздел               = НСтр("ru = 'Краткосрочные финансовые вложения'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Инвестиции'");
			НоваяСтрока.СуммаНаНачалоПериода = (-1)*П4Н_1170;
			НоваяСтрока.СуммаНаКонецПериода  = (-1)*П4К_1170;
			НоваяСтрока.Счет                 = Счет1170;
		КонецЕсли;
	КонецЕсли;
	Если П6Н <> 0 ИЛИ П6К <> 0 Тогда	
		Если П6Н1210 <> 0 ИЛИ П6К1210 <> 0 Тогда	
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 6;
			НоваяСтрока.Раздел               = НСтр("ru = 'Дебиторская задолженность'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Задолженность покупателей'");
			НоваяСтрока.СуммаНаНачалоПериода = П6Н1210;
			НоваяСтрока.СуммаНаКонецПериода  = П6К1210;
			НоваяСтрока.Счет                 = Счет1210;
		КонецЕсли;
		Если П6Н1220 <> 0 ИЛИ П6К1220 <> 0 Тогда	
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 6;
			НоваяСтрока.Раздел               = НСтр("ru = 'Дебиторская задолженность'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Задолженность покупателей'");
			НоваяСтрока.СуммаНаНачалоПериода = П6Н1220;
			НоваяСтрока.СуммаНаКонецПериода  = П6К1220;
			НоваяСтрока.Счет                 = Счет1220;
		КонецЕсли;
		Если П6Н1230 <> 0 ИЛИ П6К1230 <> 0 Тогда	
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 6;
			НоваяСтрока.Раздел               = НСтр("ru = 'Дебиторская задолженность'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Задолженность покупателей'");
			НоваяСтрока.СуммаНаНачалоПериода = П6Н1230;
			НоваяСтрока.СуммаНаКонецПериода  = П6К1230;
			НоваяСтрока.Счет                 = Счет1230;
		КонецЕсли;
		Если П6Н1240 <> 0 ИЛИ П6К1240 <> 0 Тогда	
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 6;
			НоваяСтрока.Раздел               = НСтр("ru = 'Дебиторская задолженность'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Задолженность покупателей'");
			НоваяСтрока.СуммаНаНачалоПериода = П6Н1240;
			НоваяСтрока.СуммаНаКонецПериода  = П6К1240;
			НоваяСтрока.Счет                 = Счет1240;
		КонецЕсли;
		Если П6Н1260 <> 0 ИЛИ П6К1260 <> 0 Тогда	
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 6;
			НоваяСтрока.Раздел               = НСтр("ru = 'Дебиторская задолженность'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Задолженность покупателей'");
			НоваяСтрока.СуммаНаНачалоПериода = П6Н1260;
			НоваяСтрока.СуммаНаКонецПериода  = П6К1260;
			НоваяСтрока.Счет                 = Счет1260;
		КонецЕсли;
		Если П6Н1151 <> 0 ИЛИ П6К1151 <> 0 Тогда	
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 6;
			НоваяСтрока.Раздел               = НСтр("ru = 'Дебиторская задолженность'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Задолженность покупателей'");
			НоваяСтрока.СуммаНаНачалоПериода = П6Н1151;
			НоваяСтрока.СуммаНаКонецПериода  = П6К1151;
			НоваяСтрока.Счет                 = Счет1151;
		КонецЕсли;
		Если П6Н1281 <> 0 ИЛИ П6К1281 <> 0 Тогда	
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 6;
			НоваяСтрока.Раздел               = НСтр("ru = 'Дебиторская задолженность'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Задолженность покупателей'");
			НоваяСтрока.СуммаНаНачалоПериода = П6Н1281;
			НоваяСтрока.СуммаНаКонецПериода  = П6К1281;
			НоваяСтрока.Счет                 = Счет1281;
		КонецЕсли;
		Если П6Н1282 <> 0 ИЛИ П6К1282 <> 0 Тогда	
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 6;
			НоваяСтрока.Раздел               = НСтр("ru = 'Дебиторская задолженность'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Задолженность покупателей'");
			НоваяСтрока.СуммаНаНачалоПериода = П6Н1282;
			НоваяСтрока.СуммаНаКонецПериода  = П6К1282;
			НоваяСтрока.Счет                 = Счет1282;
		КонецЕсли;
		Если П6Н1284 <> 0 ИЛИ П6К1284 <> 0 Тогда	
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 6;
			НоваяСтрока.Раздел               = НСтр("ru = 'Дебиторская задолженность'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Задолженность покупателей'");
			НоваяСтрока.СуммаНаНачалоПериода = П6Н1284;
			НоваяСтрока.СуммаНаКонецПериода  = П6К1284;
			НоваяСтрока.Счет                 = Счет1284;
		КонецЕсли;
		Если П6Н1290 <> 0 ИЛИ П6К1290 <> 0 Тогда	
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 6;
			НоваяСтрока.Раздел               = НСтр("ru = 'Дебиторская задолженность'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Задолженность покупателей'");
			НоваяСтрока.СуммаНаНачалоПериода = (-1)*П6Н1290;
			НоваяСтрока.СуммаНаКонецПериода  = (-1)*П6К1290;
			НоваяСтрока.Счет                 = Счет1290;
		КонецЕсли;
		Если П6Н1610 <> 0 ИЛИ П6К1610 <> 0 Тогда	
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 6;
			НоваяСтрока.Раздел               = НСтр("ru = 'Дебиторская задолженность'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Задолженность покупателей'");
			НоваяСтрока.СуммаНаНачалоПериода = П6Н1610;
			НоваяСтрока.СуммаНаКонецПериода  = П6К1610;
			НоваяСтрока.Счет                 = Счет1610;
		КонецЕсли;
	КонецЕсли;
	Если П7Н <> 0 ИЛИ П7К <> 0 Тогда	
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Порядок              = 7;
		НоваяСтрока.Раздел               = НСтр("ru = 'Дебиторская задолженность'");
		НоваяСтрока.Подраздел            = НСтр("ru = 'Задолженность подотчетных лиц'");
		НоваяСтрока.СуммаНаНачалоПериода = П7Н;
		НоваяСтрока.СуммаНаКонецПериода  = П7К;
		НоваяСтрока.Счет                 = Счет1251;
	КонецЕсли;
	Если П8Н <> 0 ИЛИ П8К <> 0 Тогда		
		Если П8Н_1252 <> 0 ИЛИ П8К_1252 <> 0 Тогда		
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 8;
			НоваяСтрока.Раздел               = НСтр("ru = 'Дебиторская задолженность'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Прочая задолженность работников'");
			НоваяСтрока.СуммаНаНачалоПериода = П8Н_1252;
			НоваяСтрока.СуммаНаКонецПериода  = П8К_1252;
			НоваяСтрока.Счет                 = Счет1252;
		КонецЕсли;
		Если П8Н_1253 <> 0 ИЛИ П8К_1253 <> 0 Тогда		
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 8;
			НоваяСтрока.Раздел               = НСтр("ru = 'Дебиторская задолженность'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Прочая задолженность работников'");
			НоваяСтрока.СуммаНаНачалоПериода = П8Н_1253;
			НоваяСтрока.СуммаНаКонецПериода  = П8К_1253;
			НоваяСтрока.Счет                 = Счет1253;
		КонецЕсли;
		Если П8Н_1254 <> 0 ИЛИ П8К_1254 <> 0 Тогда		
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 8;
			НоваяСтрока.Раздел               = НСтр("ru = 'Дебиторская задолженность'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Прочая задолженность работников'");
			НоваяСтрока.СуммаНаНачалоПериода = П8Н_1254;
			НоваяСтрока.СуммаНаКонецПериода  = П8К_1254;
			НоваяСтрока.Счет                 = Счет1254;
		КонецЕсли;
	КонецЕсли;
	Если П9Н <> 0 ИЛИ П9К <> 0 Тогда		
		Если П9Н_1620 <> 0 ИЛИ П9К_1620 <> 0 Тогда		
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 9;
			НоваяСтрока.Раздел               = НСтр("ru = 'Дебиторская задолженность'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Прочие активы'");
			НоваяСтрока.СуммаНаНачалоПериода = П9Н_1620;
			НоваяСтрока.СуммаНаКонецПериода  = П9К_1620;
			НоваяСтрока.Счет                 = Счет1620;
		КонецЕсли;
		Если П9Н_1630 <> 0 ИЛИ П9К_1630 <> 0 Тогда		
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 9;
			НоваяСтрока.Раздел               = НСтр("ru = 'Дебиторская задолженность'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Прочие активы'");
			НоваяСтрока.СуммаНаНачалоПериода = П9Н_1630;
			НоваяСтрока.СуммаНаКонецПериода  = П9К_1630;
			НоваяСтрока.Счет                 = Счет1630;
		КонецЕсли;
		Если П9Н_1730 <> 0 ИЛИ П9К_1730 <> 0 Тогда		
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 9;
			НоваяСтрока.Раздел               = НСтр("ru = 'Дебиторская задолженность'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Прочие активы'");
			НоваяСтрока.СуммаНаНачалоПериода = П9Н_1730;
			НоваяСтрока.СуммаНаКонецПериода  = П9К_1730;
			НоваяСтрока.Счет                 = Счет1730;
		КонецЕсли;

	КонецЕсли;
	Если П10Н <> 0 ИЛИ П10К <> 0 Тогда		
		Если П10Н_1310 <> 0 ИЛИ П10К_1310 <> 0 Тогда		
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 10;
			НоваяСтрока.Раздел               = НСтр("ru = 'Запасы, в т.ч.'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Сырье и материалы'");
			НоваяСтрока.СуммаНаНачалоПериода = П10Н_1310;
			НоваяСтрока.СуммаНаКонецПериода  = П10К_1310;
			НоваяСтрока.Счет                 = Счет1310;
		КонецЕсли;
		Если П10Н_1361 <> 0 ИЛИ П10К_1361 <> 0 Тогда		
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 10;
			НоваяСтрока.Раздел               = НСтр("ru = 'Запасы, в т.ч.'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Сырье и материалы'");
			НоваяСтрока.СуммаНаНачалоПериода = (-1)*П10Н_1361;
			НоваяСтрока.СуммаНаКонецПериода  = (-1)*П10К_1361;
			НоваяСтрока.Счет                 = Счет1361;
		КонецЕсли;
	КонецЕсли;
	Если П11Н <> 0 ИЛИ П11К <> 0 Тогда	
		Если П11Н_1320 <> 0 ИЛИ П11К_1320 <> 0 Тогда	
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 11;
			НоваяСтрока.Раздел               = НСтр("ru = 'Запасы, в т.ч.'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Готовая продукция'");
			НоваяСтрока.СуммаНаНачалоПериода = П11Н_1320;
			НоваяСтрока.СуммаНаКонецПериода  = П11К_1320;
			НоваяСтрока.Счет                 = Счет1320;
		КонецЕсли;
		Если П11Н_1362 <> 0 ИЛИ П11К_1362 <> 0 Тогда	
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 11;
			НоваяСтрока.Раздел               = НСтр("ru = 'Запасы, в т.ч.'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Готовая продукция'");
			НоваяСтрока.СуммаНаНачалоПериода = (-1)*П11Н_1362;
			НоваяСтрока.СуммаНаКонецПериода  = (-1)*П11К_1362;
			НоваяСтрока.Счет                 = Счет1362;
		КонецЕсли;
	КонецЕсли;
	Если П12Н <> 0 ИЛИ П12К <> 0 Тогда
		Если П12Н_1330 <> 0 ИЛИ П12К_1330 <> 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 12;
			НоваяСтрока.Раздел               = НСтр("ru = 'Запасы, в т.ч.'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Товары'");
			НоваяСтрока.СуммаНаНачалоПериода = П12Н_1330;
			НоваяСтрока.СуммаНаКонецПериода  = П12К_1330;
			НоваяСтрока.Счет                 = Счет1330;
		КонецЕсли;
		Если П12Н_1363 <> 0 ИЛИ П12К_1363 <> 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 12;
			НоваяСтрока.Раздел               = НСтр("ru = 'Запасы, в т.ч.'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Товары'");
			НоваяСтрока.СуммаНаНачалоПериода = (-1)*П12Н_1363;
			НоваяСтрока.СуммаНаКонецПериода  = (-1)*П12К_1363;
			НоваяСтрока.Счет                 = Счет1363;
		КонецЕсли;
	КонецЕсли;
	Если П13Н <> 0 ИЛИ П13К <> 0 Тогда
		Если П13Н_1341 <> 0 ИЛИ П13К_1341 <> 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 13;
			НоваяСтрока.Раздел               = НСтр("ru = 'Запасы, в т.ч.'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Незавершенное производство'");
			НоваяСтрока.СуммаНаНачалоПериода = П13Н_1341;
			НоваяСтрока.СуммаНаКонецПериода  = П13К_1341;
			НоваяСтрока.Счет                 = Счет1341;
		КонецЕсли;
		Если П13Н_1342 <> 0 ИЛИ П13К_1342 <> 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 13;
			НоваяСтрока.Раздел               = НСтр("ru = 'Запасы, в т.ч.'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Незавершенное производство'");
			НоваяСтрока.СуммаНаНачалоПериода = П13Н_1342;
			НоваяСтрока.СуммаНаКонецПериода  = П13К_1342;
			НоваяСтрока.Счет                 = Счет1342;
		КонецЕсли;
		Если П13Н_1343 <> 0 ИЛИ П13К_1343 <> 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Порядок              = 13;
			НоваяСтрока.Раздел               = НСтр("ru = 'Запасы, в т.ч.'");
			НоваяСтрока.Подраздел            = НСтр("ru = 'Незавершенное производство'");
			НоваяСтрока.СуммаНаНачалоПериода = П13Н_1343;
			НоваяСтрока.СуммаНаКонецПериода  = П13К_1343;
			НоваяСтрока.Счет                 = Счет1343;
		КонецЕсли;
	КонецЕсли;
	Если П14Н <> 0 ИЛИ П14К <> 0 Тогда
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Порядок              = 14;
		НоваяСтрока.Раздел               = НСтр("ru = 'Запасы, в т.ч.'");
		НоваяСтрока.Подраздел            = НСтр("ru = 'Прочие запасы'");
		НоваяСтрока.СуммаНаНачалоПериода = П14Н;
		НоваяСтрока.СуммаНаКонецПериода  = П14К;
		НоваяСтрока.Счет                 = Счет1351;
	КонецЕсли;

	ИтогоСуммаНаНачалоПериода = Таблица.Итог("СуммаНаНачалоПериода");
	ИтогоСуммаНаКонецПериода  = Таблица.Итог("СуммаНаКонецПериода");
	
	МаксСуммаНаНачало = 0;
	МаксСуммаНаКонец  = 0;
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Если МаксСуммаНаНачало < СтрокаТаблицы.СуммаНаНачалоПериода Тогда
			ИндексСтрокиМаксСуммаНаНачало = Таблица.Индекс(СтрокаТаблицы);
			МаксСуммаНаНачало = СтрокаТаблицы.СуммаНаНачалоПериода;
		КонецЕсли;
		Если МаксСуммаНаКонец < СтрокаТаблицы.СуммаНаКонецПериода Тогда
			ИндексСтрокиМаксСуммаНаКонец = Таблица.Индекс(СтрокаТаблицы);
			МаксСуммаНаКонец = СтрокаТаблицы.СуммаНаКонецПериода;
		КонецЕсли;
		Если ИтогоСуммаНаНачалоПериода = 0 Тогда
			СтрокаТаблицы.УдельныйВесНаНачалоПериода = 0;
		Иначе
			СтрокаТаблицы.УдельныйВесНаНачалоПериода = Окр(СтрокаТаблицы.СуммаНаНачалоПериода / ИтогоСуммаНаНачалоПериода * 100, 1);
		КонецЕсли;
		Если ИтогоСуммаНаКонецПериода = 0 Тогда
			СтрокаТаблицы.УдельныйВесНаНачалоПериода = 0;
		Иначе 
			СтрокаТаблицы.УдельныйВесНаКонецПериода  = Окр(СтрокаТаблицы.СуммаНаКонецПериода / ИтогоСуммаНаКонецПериода * 100, 1);
		КонецЕсли;	
	КонецЦикла;
	
	Остаток = 100 - Таблица.Итог("УдельныйВесНаНачалоПериода");
	Если Остаток <> 0 И ИндексСтрокиМаксСуммаНаНачало <> Неопределено Тогда
		Таблица[ИндексСтрокиМаксСуммаНаНачало].УдельныйВесНаНачалоПериода = Таблица[ИндексСтрокиМаксСуммаНаНачало].УдельныйВесНаНачалоПериода + Остаток;
	КонецЕсли;
	
	Остаток = 100 - Таблица.Итог("УдельныйВесНаКонецПериода");
	Если Остаток <> 0 И ИндексСтрокиМаксСуммаНаКонец <> Неопределено Тогда
		Таблица[ИндексСтрокиМаксСуммаНаКонец].УдельныйВесНаКонецПериода = Таблица[ИндексСтрокиМаксСуммаНаКонец].УдельныйВесНаКонецПериода + Остаток;
	КонецЕсли;
	
	ВнешниеНаборыДанных = Новый Структура("ОборотныеАктивы", Таблица);
	
	Возврат ВнешниеНаборыДанных;
		                                
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт

	Если ПараметрыОтчета.РежимРасшифровки
		ИЛИ (ПараметрыОтчета.Свойство("ОткрытИзРассылки") И ПараметрыОтчета.ОткрытИзРассылки) Тогда
		
		КомпоновщикНастроек.Настройки.Структура.ИдентификаторПользовательскойНастройки = "";
		Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл
			ЭлементСтруктуры.ИдентификаторПользовательскойНастройки = "";
			ОтчетыВызовСервераБК.ОбработатьСтруктуруНастроек(ЭлементСтруктуры);
		КонецЦикла;
	КонецЕсли;
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", ПараметрыОтчета.НачалоПериода);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода" , КонецДня(ПараметрыОтчета.КонецПериода));
	
	Структура = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Первый = Истина;
	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Если Не Первый Тогда 
				Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			Иначе
				Если НЕ ПараметрыОтчета.РежимРасшифровки Тогда
					Структура.Имя = "Группировка_";
				Иначе
					Структура.Имя = "";
				КонецЕсли;
			КонецЕсли;
			Первый = Ложь;
						
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			
			Если ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных")); 
			
		КонецЕсли;
	КонецЦикла;
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	БухгалтерскиеОтчеты.ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, ПараметрыОтчета);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);

КонецПроцедуры

Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
	
	// Инициализируем список мунктов меню
	СписокПунктовМеню = Новый СписокЗначений();
	
	// Заполниим соответствие полей которые мы хотим получить из данных расшифровки
	СоответствиеПолей = Новый Структура();
	ДанныеОтчета = ПолучитьИзВременногоХранилища(Адрес);
	
	ЗначениеРасшифровки = ДанныеОтчета.ДанныеРасшифровки.Элементы[Расшифровка];
	Если ТипЗнч(ЗначениеРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для Каждого ПолеРасшифровки ИЗ ЗначениеРасшифровки.ПолучитьПоля() Цикл
			Если ЗначениеЗаполнено(ПолеРасшифровки.Значение) И ПолеРасшифровки.Значение <> "Показатель" Тогда
				ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
				ПараметрыРасшифровки.Вставить("Значение",  ПолеРасшифровки.Значение);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Укажем что открывать объект сразу не нужно
	ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Ложь);
	
	Если ДанныеОтчета = Неопределено Тогда 
		ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
		Возврат;
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ДанныеОтчета.ДанныеРасшифровки.Настройки);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ДанныеОтчета.Объект.СхемаКомпоновкиДанных));
	
	МассивПолей = БухгалтерскиеОтчетыВызовСервера.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеОтчета.ДанныеРасшифровки, КомпоновщикНастроек, Истина);
	
	Показатель = "";
	Для Каждого ПолеРасшифровки Из МассивПолей Цикл
		Если ТипЗнч(ПолеРасшифровки) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных")
			И ПолеРасшифровки.Значение = "Показатель" Тогда
			Показатель = ПолеРасшифровки.Поле;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Прежде всего интересны данные группировочных полей
	Для Каждого Группировка Из ДанныеОтчета.Объект.Группировка Цикл
		Если Группировка.Использование Тогда
			СоответствиеПолей.Вставить(Группировка.Поле);
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеПолей.Вставить("Счет");
		
	// Инициализация пользовательских настроек
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки",  Истина);
	ДополнительныеСвойства.Вставить("НачалоПериода",     ДанныеОтчета.Объект.НачалоПериода);
	ДополнительныеСвойства.Вставить("КонецПериода",      ДанныеОтчета.Объект.КонецПериода);
	ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ДанныеОтчета.Объект.ВыводитьЗаголовок);
	ДополнительныеСвойства.Вставить("ВыводитьПодписи",   ДанныеОтчета.Объект.ВыводитьПодписи);
	ДополнительныеСвойства.Вставить("МакетОформления",   ДанныеОтчета.Объект.МакетОформления);
	ДополнительныеСвойства.Вставить("ВыводитьДиаграмму", Ложь);
	ДополнительныеСвойства.Вставить("ПоказательБУ",      Истина);
	ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", ДанныеОтчета.Объект.СписокСтруктурныхЕдиниц);
	
	Если Показатель <> "" Тогда
		ВыбранныеПоля = ПользовательскиеНастройки.Элементы.Добавить(Тип("ВыбранныеПоляКомпоновкиДанных"));
		ВыбранныеПоля.ИдентификаторПользовательскойНастройки = "Выбор";
		ПолеПоказателя = ВыбранныеПоля.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеПоказателя.Поле = Новый ПолеКомпоновкиДанных("СуммаНаНачалоПериода");
		ПолеПоказателя = ВыбранныеПоля.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеПоказателя.Поле = Новый ПолеКомпоновкиДанных("СуммаНаКонецПериода");
	КонецЕсли;
	
	// Получаем соответствие полей доступных в расшифровке
	Данные_Расшифровки = Новый Соответствие();
	
	Если ДанныеОтчета.ДанныеРасшифровки <> Неопределено Тогда
		// Ищем интересующие нас поля в заданной расшифровке
		Для каждого ЭлементДанных Из СоответствиеПолей Цикл
			// Получаем элемент расшифровки, в котором нужно искать поля
			Родитель = ДанныеОтчета.ДанныеРасшифровки.Элементы[Расшифровка];
			// Вызываем рекурсивный поиск поля
			ЗначениеРасшифровки = ПолучитьЗначениеРасшифровки(Родитель, ЭлементДанных.Ключ);
			Если ЗначениеРасшифровки <> Неопределено Тогда
				// Значение нашлось, помещаем в структуру
				Данные_Расшифровки.Вставить(ЭлементДанных.Ключ, ЗначениеРасшифровки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Счет = Данные_Расшифровки.Получить("Счет");
	ЕстьСчет = ДанныеОтчета.Объект.Группировка.Найти("Счет", "Поле") <> Неопределено;
	
	Если ДанныеОтчета.Объект.РежимРасшифровки Тогда
		Если Счет = Неопределено И ЕстьСчет Тогда
			ТекстСообщения = НСтр("ru = 'Расшифровка невозможна. Неизвестен счет.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
			Возврат;
		ИначеЕсли Счет <> Неопределено И ЕстьСчет Тогда
			СписокПунктовМеню.Добавить("ОборотноСальдоваяВедомостьПоСчетуТиповой", НСтр("ru = 'Оборотно-сальдовая ведомость по счету (бух.)'"));
			ИДРасшифровки = "ОборотноСальдоваяВедомостьПоСчетуТиповой";
		Иначе
			СписокПунктовМеню.Добавить("ОборотныеСредства", НСтр("ru = 'Оборотные средства'"));
			ИДРасшифровки = "ОборотныеСредства";
		КонецЕсли;
	Иначе
		СписокПунктовМеню.Добавить("ОборотныеСредства", НСтр("ru = 'Оборотные средства'"));
		ИДРасшифровки = "ОборотныеСредства";
	КонецЕсли;
	
	Если Счет <> Неопределено Тогда
		ДанныеСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	Иначе
		ДанныеСчета = Неопределено;
	КонецЕсли;
	
	ОтборПоЗначениямРасшифровки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ОтборПоЗначениямРасшифровки.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Для Каждого ЗначениеРасшифровки Из Данные_Расшифровки Цикл
		Если ЗначениеРасшифровки.Ключ <> "Период" Тогда
			Если ИДРасшифровки <> "ОборотныеСредства" Тогда
				Если ЗначениеРасшифровки.Ключ = "Счет" Тогда
					ДополнительныеСвойства.Вставить("Счет",	ЗначениеРасшифровки.Значение);
				КонецЕсли;
			Иначе
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборПоЗначениямРасшифровки, ЗначениеРасшифровки.Ключ, ЗначениеРасшифровки.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Группировка = Новый Массив();
	Для Каждого СтрокаГруппировки Из ДанныеОтчета.Объект.Группировка Цикл
		Если СтрокаГруппировки.Использование Тогда
			СтрокаДляРасшифровки = Новый Структура("Использование, Поле, Представление, ТипГруппировки");
			ЗаполнитьЗначенияСвойств(СтрокаДляРасшифровки, СтрокаГруппировки);
			Группировка.Добавить(СтрокаДляРасшифровки);
		КонецЕсли;
	КонецЦикла;
	
	ГруппировкаСчет = Новый Структура("Использование, Поле, Представление, ТипГруппировки",
	                                   Истина, "Счет", "Счет", Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы);

	Если ИДРасшифровки = "ОборотныеСредства" Тогда
	    Группировка.Добавить(ГруппировкаСчет);
	Иначе
	    Группировка.Вставить(0, ГруппировкаСчет);
	КонецЕсли;

	ДополнительныеСвойства.Вставить("Группировка", Группировка);
	
	НастройкиРасшифровки = Новый Структура();
	НастройкиРасшифровки.Вставить(ИДРасшифровки , ПользовательскиеНастройки);
	ДанныеОтчета.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
	
	ПоместитьВоВременноеХранилище(ДанныеОтчета, Адрес);
	
	ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
	
КонецПроцедуры

Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант из Схема.ВариантыНастроек Цикл
		НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, Вариант.Имя);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета.
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт
	
	ПараметрыОтчета = РассылкаОтчетовБК.НастройкиОтчетаСохраняемыеВРассылке();
	ПараметрыОтчета.Вставить("ТипЗадолженности" , 3);
	
	Возврат ПараметрыОтчета;
	
КонецФункции


// ОБРАБОТЧИКИ СОБЫТИЙ


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьВыборкуПоСчету(ПараметрыОтчета)
	
	НачалоПериода     = ПараметрыОтчета.НачалоПериода;
	КонецПериода      = ПараметрыОтчета.КонецПериода;
	СписокОрганизаций = ПараметрыОтчета.СписокСтруктурныхЕдиниц;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТиповойОстаткиИОбороты.Счет КАК Счет,
	|	ТиповойОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДт,
	|	ТиповойОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СуммаНачальныйОстатокКт,
	|	ТиповойОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
	|	ТиповойОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт	
	| ИЗ
	|	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&НачалоПериода, &КонецПериода,,,,, Организация В(&СписокОрганизаций)) КАК ТиповойОстаткиИОбороты
	|ИТОГИ 
	|	СУММА(СуммаНачальныйОстатокДт),
	|	СУММА(СуммаНачальныйОстатокКт),
	|	СУММА(СуммаКонечныйОстатокДт),
	|	СУММА(СуммаКонечныйОстатокКт)
	|ПО
	|	Счет ИЕРАРХИЯ";
	
	Если Не ЗначениеЗаполнено(СписокОрганизаций) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация В(&СписокОрганизаций)", "");	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Если КонецПериода <> '00010101000000' Тогда
		Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(КонецПериода), ВидГраницы.Включая));
	Иначе
		Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	КонецЕсли;
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоСчету = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ВыборкаПоСчету;
	
КонецФункции

Функция ПолучитьИтог(Счет, Выборка, ВидИтога)
	
	Итог = 0;
	
	Выборка.Сбросить();
	Если Выборка.НайтиСледующий(Счет, "Счет") Тогда
		Итог = Выборка[ВидИтога];	
	КонецЕсли;
	
	Возврат Итог;
	
КонецФункции

// Возвращает значение искомого поля из элемента расшифровки.
//
Функция ПолучитьЗначениеРасшифровки(Элемент, ИмяПоля)
	
	Если ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		// Ищем поля в текущем элементе
		Поле = Элемент.ПолучитьПоля().Найти(ИмяПоля);
		Если Поле <> Неопределено Тогда
			// Возвращаем значение найденного поля
			Возврат Поле.Значение;
		КонецЕсли;
	КонецЕсли;
	
	// Если поле не нашлось, или текущий элемент не содержит полей
	// ищем поля среди родителей элемента (вышестоящие группировки).
	Родители  = Элемент.ПолучитьРодителей();
	Если Родители.Количество() > 0 Тогда
		
		Для Каждого Родитель Из Родители Цикл
			// Вызываем рекурсивный поиск поля
			ЗначениеРасшифровки = ПолучитьЗначениеРасшифровки(Родитель, ИмяПоля);
			
			Если ЗначениеРасшифровки <> Неопределено Тогда
				Возврат ЗначениеРасшифровки;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Если ничего не нашлось
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьСчетаУчетаРасчетов() Экспорт
	
	СписокСчетовРасчета = Новый СписокЗначений;
	ПланСчетовТиповой = ПланыСчетов.Типовой;
	
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.ДенежныеСредстваВКассе);                    // 1010
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.ДенежныеСредстваВПути);                     // 1021
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.ДенежныеСредстваВПутиКонвертацияВалюты);    // 1022
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.ДенежныеСредстваНаТекущихБанковскихСчетах); // 1030
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.ДенежныеСредстваНаКорреспондентскихСчетах); // 1040
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.ДенежныеСредстваНаСберегательныхСчетах);    // 1050
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.ДенежныеСредстваОграниченныеВИспользовании);  // 1060
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.ПрочиеДенежныеСредства);    // 1080
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.ОценочныйРезервПодУбыткиОтОбесцененияДенежныхСредств);  // 1090

	
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.КраткосрочныеФинансовыеАктивыОцениваемыеПоАмортизированнойСтоимости);                       // 1110
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.КраткосрочныеФинансовыеАктивыОцениваемыеПоСправедливойСтоимостиЧерезПрочийСовокупныйДоход); // 1120
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.КраткосрочныеФинансовыеАктивыОцениваемыеПоСправедливойСтоимостиЧерезПрибыльУбыток);          // 1130
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.КраткосрочныеДебиторскиеПроизводныеФинансовыеИнструменты);             // 1140
	//СписокСчетовРасчета.Добавить(ПланСчетовТиповой.ПрочиеКраткосрочныеФинансовыеИнвестиции);                 // 1150
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.ПрочиеКраткосрочныеФинансовыеИнвестиции);          // 1160
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.ОценочныйРезервПодУбыткиПоКраткосрочнымФинансовымАктивам);             // 1170

	
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков); // 1210
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.КраткосрочнаяДебиторскаяЗадолженностьДочернихОрганизаций);    // 1220
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.КраткосрочнаяДебиторскаяЗадолженностьАссоциированныхИСовместныхОрганизаций); // 1230
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.КраткосрочнаяДебиторскаяЗадолженностьФилиаловИСтруктурныхПодразделений);     // 1240
	
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.КраткосрочнаяЗадолженностьПодотчетныхЛиц);                    // 1251
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.КраткосрочнаяЗадолженностьПоВыплаченнойЗаработнойПлате);      // 1252
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.КраткосрочнаяЗадолженностьПоПредоставленнымРаботникамЗаймам); // 1253
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.ПрочаяКраткосрочнаяЗадолженностьРаботников);                  // 1254

	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.КраткосрочнаяДебиторскаяЗадолженностьПоАренде); // 1260
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.КраткосрочныеВознагражденияКПолучению);         // 1151
	
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.КраткосрочнаяЗадолженностьПоВозвратамТМЗПоставщикам); // 1281
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.КраткосрочнаяЗадолженностьПоПретензиям);              // 1282
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.ПрочаяКраткосрочнаяДебиторскаяЗадолженность);         // 1284
	
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.РезервПоСомнительнымТребованиям);     // 1290
	
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.СырьеИМатериалы);  // 1310
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.ГотоваяПродукция); // 1320
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.Товары);           // 1330
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.НезавершенноеПроизводство_ОсновноеПроизводство);                  // 1341
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.НезавершенноеПроизводство_ПолуфабрикатыСобственногоПроизводства); // 1342
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.НезавершенноеПроизводство_ВспомогательныеПроизводства);           // 1343
	
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.МатериалыПереданныеВПереработку);  // 1351
	
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.РезервПоСписаниюСырьяИМатериалов); // 1361
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.РезервПоСписаниюГотовойПродукции); // 1362
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.РезервПоСписаниюТоваров);          // 1363
		
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.КраткосрочныеАвансыВыданные);         // 1610
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.КраткосрочныеРасходыБудущихПериодов); // 1620
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.ПрочиеКраткосрочныеАктивы);           // 1630
	СписокСчетовРасчета.Добавить(ПланСчетовТиповой.КраткосрочныеАктивыПоДоговорам);           // 1730

	
	Возврат СписокСчетовРасчета;
	
КонецФункции

#КонецЕсли