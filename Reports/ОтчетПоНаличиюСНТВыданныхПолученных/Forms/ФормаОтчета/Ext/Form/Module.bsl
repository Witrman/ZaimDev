
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем УИДЗамера;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ЗагруженыПользовательскиеНастройки = Ложь;
	
	Отчет.ВидОтчета = "НаличиеСНТВыданных";
	СпособФормирования = "ПоПервичнымДокументам";
	
	ЗаполняемыеНастройки = Новый Структура("Показатели, Группировка, ДополнительныеПоля, Отбор",
		Истина, Истина, Истина, Истина);
	ЗаполнитьНастройкамиПоУмолчанию(ЗаполняемыеНастройки);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Если компоновщик до сих пор не инициализирован то нужно это сделать
	// серверный вызов
	Если Не ЭтаФорма.КомпоновщикИнициализирован Тогда
		ИнициализацияКомпоновщикаНастроек();	
	КонецЕсли;
	
	Если Не ЗагруженыПользовательскиеНастройки Тогда
		ЗаполняемыеНастройки = Новый Структура("Отбор", Истина);
		ЗаполнитьНастройкамиПоУмолчанию(ЗаполняемыеНастройки);
	КонецЕсли;
	
	ВидОтчета = Отчет.ВидОтчета = "НаличиеСНТВыданных";
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
		
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	ПодключитьОбработчикОжидания = Не ИБФайловая И ЗначениеЗаполнено(ИдентификаторЗадания);
	Если ПодключитьОбработчикОжидания Тогда		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиент.ПриОткрытии(ЭтаФорма, Отказ);
	
	Отчет.ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
	
	Для Каждого ЭлементСписка Из СписокПодразделений Цикл
		Если ЭлементСписка.Значение = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка") Тогда 
			ЭлементСписка.Представление = "Головное подразделение";
		КонецЕсли;				
	КонецЦикла;
	
	Отчет.ПредставлениеСпискаПодразделений = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокПодразделений);
	
	УправлениеФормой(ЭтаФорма);
	
	Элементы.ВыписанОтбор.СписокВыбора.Очистить();
	Элементы.ВыписанОтбор.СписокВыбора.Добавить(0, "Все");
	Элементы.ВыписанОтбор.СписокВыбора.Добавить(1, "Да");
	Элементы.ВыписанОтбор.СписокВыбора.Добавить(2, "Нет");

	Элементы.ОтправленОтбор.СписокВыбора.Очистить();
	Элементы.ОтправленОтбор.СписокВыбора.Добавить(0, "Все");
	Элементы.ОтправленОтбор.СписокВыбора.Добавить(1, "Да");
	Элементы.ОтправленОтбор.СписокВыбора.Добавить(2, "Нет");
	
	Элементы.ПроведенОтбор.СписокВыбора.Очистить();
	Элементы.ПроведенОтбор.СписокВыбора.Добавить(0, "Все");
	Элементы.ПроведенОтбор.СписокВыбора.Добавить(1, "Да");
	Элементы.ПроведенОтбор.СписокВыбора.Добавить(2, "Нет");
		
	ФлагРозничнаяВыручка = Истина;
	
	СписокЭлементовОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	
	Для Каждого Элемент из СписокЭлементовОтбора Цикл
		Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если Новый ПолеКомпоновкиДанных("СНТСтатус") = Элемент.ЛевоеЗначение Тогда	
				СтатусСНТ = Элемент.ПравоеЗначение;	
			ИначеЕсли Новый ПолеКомпоновкиДанных("СНТПроведен") = Элемент.ЛевоеЗначение Тогда
				ПроведенОтбор = Элемент.ПравоеЗначение;	
			ИначеЕсли Новый ПолеКомпоновкиДанных("СНТОтправлен") = Элемент.ЛевоеЗначение Тогда
				ОтправленОтбор = Элемент.ПравоеЗначение;
			ИначеЕсли Новый ПолеКомпоновкиДанных("СНТВыписан") = Элемент.ЛевоеЗначение Тогда
				ВыписанОтбор = Элемент.ПравоеЗначение;
			КонецЕсли;									
		КонецЕсли;									
	КонецЦикла;	 
		
	УчетПоРозничнойВыручке = ФлагРозничнаяВыручка;
	
	Если Отчет.ВидОтчета = "НаличиеСНТПолученных" Тогда
		Элементы.ВывестиВсеСНТ.Видимость = Истина;
	Иначе
		Элементы.ВывестиВсеСНТ.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыНаСервере(Объект, НазваниеРеквизита)
	Возврат УправлениеСвойствами.ЗначениеСвойства(Объект, НазваниеРеквизита);
КонецФункции

&НаКлиенте
Процедура УстановитьОтборСКД(ИмяПоля, ВидОтбора, Значение, Элемент, Форма)
	
	Если ТипЗнч(Значение) = Тип("Число") И Значение = 1 Тогда
		ЗначениеОтбора = Истина;
	ИначеЕсли Строка(Значение) = "2" Тогда
		ЗначениеОтбора = Ложь
	ИначеЕсли Строка(Значение) = "0" ИЛИ ЗначениеЗаполнено(Значение) = Ложь Тогда
		ЗначениеОтбора = "";
	Иначе
		ЗначениеОтбора = Значение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		
		Для каждого Элемент из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы цикл
			Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если Строка(Элемент.ЛевоеЗначение) = ИмяПоля Тогда
					Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(Элемент);				
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	
		ЭлементОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		ЭлементОтбора.ВидСравнения = ВидОтбора;
		ЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;

	Иначе
		Для каждого Элемент из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы цикл
			Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если Строка(Элемент.ЛевоеЗначение) = ИмяПоля Тогда
					Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(Элемент);				
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры  

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОтменитьВыполнениеЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	СохраняемыеРеквизитыФормы = Новый Массив;
	СохраняемыеРеквизитыФормы.Добавить("СпособФормирования");
	
	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки,, СохраняемыеРеквизитыФормы);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	ЗагружаемыеРеквизитыФормы = Новый Массив;
	ЗагружаемыеРеквизитыФормы.Добавить("СпособФормирования");
	
	БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки,, ЗагружаемыеРеквизитыФормы);
	
	Если Настройки.ДополнительныеСвойства.Свойство("ДанныеОтчета") Тогда
		ДанныеОтчета = Настройки.ДополнительныеСвойства.ДанныеОтчета.Получить();
		Если НЕ ДанныеОтчета.Свойство("ВидОтчета") Тогда
			Отчет.ВидОтчета = "НаличиеСНТВыданных";
		КонецЕсли;	
		
	КонецЕсли;
	
	ВидОтчета = Отчет.ВидОтчета = "НаличиеСНТВыданных";
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	ИнициализацияКомпоновщикаНастроек(Настройки);
	
	ПроверитьНастройки();
	
	ЗагруженыПользовательскиеНастройки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	БухгалтерскиеОтчетыКлиент.ОтправитьОтчетыПоПочтеОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтотОбъект);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСпискаОрганизацийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СписокСтруктурныхЕдиниц"              , СписокСтруктурныхЕдиниц);
	ДополнительныеПараметры.Вставить("СписокПодразделений"                  , СписокПодразделений);
	ДополнительныеПараметры.Вставить("СписокВладельцевГоловныхПодразделений", СписокВладельцевГоловныхПодразделений);
	ДополнительныеПараметры.Вставить("ВыборСтруктурныхПодразделений"        , ПоддержкаРаботыСоСтруктурнымиПодразделениями); 
	
	БухгалтерскиеОтчетыКлиент.ПредставлениеСпискаОрганизацийНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСпискаОрганизацийОчистка(Элемент, СтандартнаяОбработка)
	
	Если Не УчетПоВсемОрганизациям Тогда
		СтандартнаяОбработка = Ложь;
	Иначе 
		СписокПодразделений.Очистить();
		СписокСтруктурныхЕдиниц.Очистить();
		СписокВладельцевГоловныхПодразделений.Очистить();
		
		Отчет.ПредставлениеСпискаОрганизаций   = "";
		Отчет.ПредставлениеСпискаПодразделений = "";
		
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МакетОформленияПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки, "МакетОформления", МакетОформления);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЗаголовокПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПодписиПриИзменении(Элемент)
	
	ВыводитьПодписиРуководителей = Ложь;
	УправлениеФормой(ЭтаФорма);

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПодписиРуководителейПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидОтчетаПриИзменении(Элемент)
			
	
	Если ВидОтчета Тогда
		Отчет.ВидОтчета = "НаличиеСНТВыданных";
		КлючТекущегоВарианта  = "НаличиеСНТВыданных";
		
		Элементы.УчетПоРозничнойВыручке.Видимость = Истина;
		Элементы.ВывестиВсеСНТ.Видимость = Ложь;
	Иначе
		Отчет.ВидОтчета = "НаличиеСНТПолученных";
		КлючТекущегоВарианта  = "НаличиеСНТПолученных";
		
		Элементы.УчетПоРозничнойВыручке.Видимость = Ложь;
		Элементы.ВывестиВсеСНТ.Видимость = Истина;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	//ОбновитьТекстЗаголовка(ЭтаФорма); 
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	ИнициализацияКомпоновщикаНастроек();
	
	ЗаполняемыеНастройки = Новый Структура("Группировка, ДополнительныеПоля, Отбор", Истина, Истина, Истина);
	ЗаполнитьНастройкамиПоУмолчанию(ЗаполняемыеНастройки);

	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ ТАБЛИЧНОГО ДОКУМЕНТА

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ОбработкаРасшифровкиСтандартногоОтчета(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ГРУППИРОВКА

&НаКлиенте
Процедура ГруппировкаПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ГруппировкаПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);  
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ГруппировкаПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПОКАЗАТЕЛИ

&НаКлиенте
Процедура ПоказателиПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОТБОРЫ

&НаКлиенте
Процедура ОтборыПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПриИзменении(ЭтаФорма, Элемент, Ложь);
	
	ТекущийОтбор = Элемент.ТекущиеДанные;
	
	Если ТекущийОтбор <> Неопределено Тогда
		Если ТекущийОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СНТСтатус") Тогда
			Если ТекущийОтбор.Использование Тогда
				СтатусСНТ = ТекущийОтбор.ПравоеЗначение;
			Иначе
				ПредопределенноеЗначение("Перечисление.СтатусыСНТ.ПустаяСсылка");
			КонецЕсли;
		ИначеЕсли ТекущийОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СНТПроведен") Тогда
			Если ТекущийОтбор.Использование Тогда
				ПроведенОтбор = ?(ТекущийОтбор.ПравоеЗначение = ИСТИНА, 1, 2);
			Иначе
				ПроведенОтбор = 0;
			КонецЕсли;
		ИначеЕсли ТекущийОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СНТОтправлен") Тогда
			Если ТекущийОтбор.Использование Тогда
				ОтправленОтбор = ?(ТекущийОтбор.ПравоеЗначение = ИСТИНА, 1, 2);
			Иначе
				ОтправленОтбор = 0;
			КонецЕсли;
		ИначеЕсли ТекущийОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СНТВыписан") Тогда
			Если ТекущийОтбор.Использование Тогда
				ВыписанОтбор = ?(ТекущийОтбор.ПравоеЗначение = ИСТИНА, 1, 2);
			Иначе
				ВыписанОтбор = 0;
			КонецЕсли;
		КонецЕсли;									
	КонецЕсли;
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПараметров = ПолучитьПараметрыВыбораЗначенияОтбора();
	БухгалтерскиеОтчетыКлиент.ОтборыПравоеЗначениеНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, СписокПараметров);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДОПОЛНИТЕЛЬНЫЕПОЛЯ

&НаКлиенте
Процедура РазмещениеДополнительныхПолейПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ДополнительныеПоляПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ДополнительныеПоляПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СОРТИРОВКА

&НаКлиенте
Процедура СортировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Отчет.НачалоПериода, Отчет.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаСнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.Группировка Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаУстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.Группировка Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляУстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.ДополнительныеПоля Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляСнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.ДополнительныеПоля Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьНастройки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "Отчет ""отчет по наличию выписанных и полученных СНТ"" (формирование)." + Отчет.ВидОтчета); 
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	Иначе
		ЗафиксироватьДлительностьКлючевойОперации();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьНастройки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиУстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.Показатели Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.Показатели Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)

	ПоказатьДиалогОтправкиПоЭлектроннойПочте();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Отчет, РезультатВыбора, "НачалоПериода,КонецПериода");
	
	ОбновитьТекстЗаголовка(ЭтаФорма); 
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;
	
	ЗаголовокОтчета = НСтр("ru = 'Отчет по наличию выписанных и полученных СНТ%1'");
	ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ЗаголовокОтчета, БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Отчет.НачалоПериода, Отчет.КонецПериода));

	Форма.Заголовок = ЗаголовокОтчета;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ОтменитьВыполнениеЗадания()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкамиПоУмолчанию(ЗаполняемыеНастройки) Экспорт
	
	// Управление показателями
	Если ЗаполняемыеНастройки.Свойство("Показатели") И ЗаполняемыеНастройки.Показатели Тогда
		
		СписокПоказателей = Новый СписокЗначений;
		
		Для Каждого ЭлементСписка Из СписокПоказателей Цикл
			СтрокаТЧ 				= Отчет.Показатели.Добавить();
			СтрокаТЧ.Поле 			= ЭлементСписка.Значение;
			СтрокаТЧ.Представление 	= ЭлементСписка.Представление;
			СтрокаТЧ.Использование 	= Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	// Группировки
	Если ЗаполняемыеНастройки.Свойство("Группировка") И ЗаполняемыеНастройки.Группировка Тогда
		
		Отчет.Группировка.Очистить();
		
		Если УчетПоВсемОрганизациям Тогда
			НоваяСтрока = Отчет.Группировка.Добавить();
			НоваяСтрока.Поле           = "Организация";
			НоваяСтрока.Использование  = Истина;
			НоваяСтрока.Представление  = НСтр("ru = 'Организация'");
			НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
		КонецЕсли;
		
		
		НоваяСтрока = Отчет.Группировка.Добавить();
		НоваяСтрока.Поле           = "ТипДокумента";
		НоваяСтрока.Использование  = НЕ ВывестиВсеСНТ;
		НоваяСтрока.Представление  = НСтр("ru = 'Тип документа'");
		НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
	
	КонецЕсли;
	
	// Дополнительные поля	
	Если ЗаполняемыеНастройки.Свойство("ДополнительныеПоля") И ЗаполняемыеНастройки.ДополнительныеПоля Тогда
		
		Отчет.ДополнительныеПоля.Очистить();	
	
		
		НоваяСтрока = Отчет.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "Регистратор";
		НоваяСтрока.Представление  = НСтр("ru = 'Документ отгрузки'");
		НоваяСтрока.Использование  = НЕ ВывестиВсеСНТ;
		
		НоваяСтрока = Отчет.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "СНТ";
		НоваяСтрока.Представление  = НСтр("ru = 'СНТ'");
		НоваяСтрока.Использование  = Истина;

		НоваяСтрока = Отчет.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "СНТСтатус";
		НоваяСтрока.Представление  = НСтр("ru = 'Статус СНТ'");
		НоваяСтрока.Использование  = Истина;
		
		НоваяСтрока = Отчет.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "СНТВыписан";
		НоваяСтрока.Представление  = НСтр("ru = 'Выписан СНТ'");
		НоваяСтрока.Использование  = Истина;
		
		
		НоваяСтрока = Отчет.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "СНТПроведен";
		НоваяСтрока.Представление  = НСтр("ru = 'Проведен СНТ'");
		НоваяСтрока.Использование  = Истина;
		
		НоваяСтрока = Отчет.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "СНТОтправлен";
		НоваяСтрока.Представление  = НСтр("ru = 'Отправлен СНТ'");
		НоваяСтрока.Использование  = Истина;   
		
		НоваяСтрока = Отчет.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "ДатаРегистрацииСНТ";
		НоваяСтрока.Представление  = НСтр("ru = 'Дата регистрации СНТ в ИС ЭСФ'");
		НоваяСтрока.Использование  = Отчет.ВидОтчета = "НаличиеСНТПолученных";

		НоваяСтрока = Отчет.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "КрайняяДатаСНТ";
		НоваяСтрока.Представление  = НСтр("ru = 'Крайняя дата подтверждения/отклонения СНТ'");
		НоваяСтрока.Использование  = Отчет.ВидОтчета = "НаличиеСНТПолученных";

		НоваяСтрока = Отчет.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "ОсталосьДней";
		НоваяСтрока.Представление  = НСтр("ru = 'Осталось дней'");
		НоваяСтрока.Использование  = Отчет.ВидОтчета = "НаличиеСНТПолученных";  
		
		НоваяСтрока = Отчет.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "ДокументОснование";
		НоваяСтрока.Представление  = НСтр("ru = 'Документ-основание'");
		НоваяСтрока.Использование  = ВывестиВсеСНТ;
			
		//////////////////////////////////////////////
	
		НоваяСтрока = Отчет.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "Контрагент";
		НоваяСтрока.Представление  = НСтр("ru = 'Покупатель'");
		НоваяСтрока.Использование  = Ложь;
		
		НоваяСтрока = Отчет.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "Контрагент.ИдентификационныйКодЛичности";
		НоваяСтрока.Представление  = НСтр("ru = 'БИН/ИИН контрагента'");
		НоваяСтрока.Использование  = Ложь;
		
		Отчет.РазмещениеДополнительныхПолей = 1;
		
	КонецЕсли;
	
	Если ЗаполняемыеНастройки.Свойство("Отбор") И ЗаполняемыеНастройки.Отбор Тогда
		
		Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
		
		НоваяСтрока = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НоваяСтрока.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТипДокумента");
		НоваяСтрока.Использование  = Ложь;
		НоваяСтрока.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;	
		НоваяСтрока.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
						
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетНаСервере() Экспорт
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет",
			ПараметрыОтчета,
			БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;

		
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("НачалоПериода"                         , Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода"                          , Отчет.КонецПериода);
	ПараметрыОтчета.Вставить("РазмещениеДополнительныхПолей"         , Отчет.РазмещениеДополнительныхПолей);
	ПараметрыОтчета.Вставить("Группировка"                           , Отчет.Группировка.Выгрузить());
	ПараметрыОтчета.Вставить("ДополнительныеПоля"                    , Отчет.ДополнительныеПоля.Выгрузить());
	ПараметрыОтчета.Вставить("РежимРасшифровки"                      , Отчет.РежимРасшифровки);
	ПараметрыОтчета.Вставить("СписокСтруктурныхЕдиниц"               , СписокСтруктурныхЕдиниц);
	ПараметрыОтчета.Вставить("СписокПодразделений"                   , СписокПодразделений);
	ПараметрыОтчета.Вставить("СписокВладельцевГоловныхПодразделений" , СписокВладельцевГоловныхПодразделений);
	ПараметрыОтчета.Вставить("ВыводитьЗаголовок"                     , ВыводитьЗаголовок);
	ПараметрыОтчета.Вставить("ВыводитьПодписи"                       , ВыводитьПодписи);
	ПараметрыОтчета.Вставить("ВыводитьПодписиРуководителей"          , ВыводитьПодписиРуководителей);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"                     , ДанныеРасшифровки);
	ПараметрыОтчета.Вставить("МакетОформления"                       , МакетОформления);	
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных"                 , ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных));
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"                   , БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ЭтаФорма));
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных"             , Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	ПараметрыОтчета.Вставить("Показатели"                            , Отчет.Показатели.Выгрузить());
	ПараметрыОтчета.Вставить("ВидОтчета"                             , Отчет.ВидОтчета);
		
		
	// Параметр для внешнего отчета
	//ПараметрыОтчета.Вставить("ОтчетОбъект", РеквизитФормыВЗначение("Отчет"));
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат           = РезультатВыполнения.Результат;
	ДанныеРасшифровки   = РезультатВыполнения.ДанныеРасшифровки;
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры



&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 

			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		    ЗафиксироватьДлительностьКлючевойОперации();
			
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		УИДЗамера = Неопределено;
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗапрещенныеПоля(Режим = "") Экспорт
	
	СписокПолей = Новый Массив;
	
	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
	СписокПолей.Добавить("Ссылка");
	БухгалтерскиеОтчетыКлиент.ДобавитьПоляРесурсовВЗапрещенныеПоля(ЭтаФорма, СписокПолей);
	
	Если Режим = "Выбор" ИЛИ Режим = "Группировка" Тогда
		Для Каждого Показатель Из Отчет.Показатели Цикл
			СписокПолей.Добавить(Показатель.Поле);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыВыбораЗначенияОтбора() Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата"        , Отчет.КонецПериода);
	СписокПараметров.Вставить("Организация" , СписокСтруктурныхЕдиниц);
	СписокПараметров.Вставить("ПоддержкаРаботыСоСтруктурнымиПодразделениями", ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	
	Возврат СписокПараметров;
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(РезультатВыбора, ДопПараметры) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ПослеВыбораСтруктурногоПодразделения(ЭтаФорма, РезультатВыбора);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ГруппировкаПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ГруппировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДопПараметры);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДопПараметры);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ДополнительныеПоляПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ДополнительныеПоляПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДопПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Форма.Элементы.ПредставлениеСпискаПодразделений.Видимость = Форма.СписокПодразделений.Количество() > 0;
	
	Форма.Элементы.ВыводитьПодписиРуководителей.Доступность = Форма.ВыводитьПодписи;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогОтправкиПоЭлектроннойПочте()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьОтчетыПоПочтеНастройкаУчетнойЗаписиПредложена", БухгалтерскиеОтчетыКлиент, ЭтотОбъект);

	РаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияКомпоновщикаНастроек(ПользовательскиеНастройки = Неопределено)
	

	Если Отчет.ВидОтчета = "НаличиеСНТВыданных" Тогда
		ИмяМакета = "НаличиеСНТВыданныхПоДокументам";
	Иначе
		Если НЕ ВывестиВсеСНТ Тогда 
			ИмяМакета = "НаличиеСНТПолученныхПоДокументам";
		Иначе 
			ИмяМакета = "НаличиеВсехСНТПолученныхПоДокументам";
		КонецЕсли;
	КонецЕсли;
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	
	Схема = ОтчетОбъект.ПолучитьМакет(ИмяМакета);
	
	Настройки = Схема.ВариантыНастроек[Отчет.ВидОтчета].Настройки;
	
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	Если ПользовательскиеНастройки <> Неопределено Тогда
		
		Настройки = Отчет.КомпоновщикНастроек.Настройки;
	
		// Установка пользовательских настроек
		Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
		Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
		Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
		
		// Перенос пользовательских настроек в основные
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Отчет.КомпоновщикНастроек.ПолучитьНастройки());
		
		// Очистка пользовательских настроек
		Настройки = Отчет.КомпоновщикНастроек.Настройки;
		Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
		Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
		Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		
	КонецЕсли;
	
	ИзменениеСхемыКомпоновкиДанныхНаСервере(Схема);	
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеСхемыКомпоновкиДанныхНаСервере(Схема = Неопределено) Экспорт
	
	Если Схема = Неопределено Тогда
		МенеджерОтчета = РеквизитФормыВЗначение("Отчет");
		Схема = МенеджерОтчета.ПолучитьМакет("НаличиеСНТВыданныхПоДокументам");
	КонецЕсли;
		
	СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(Схема, СхемаКомпоновкиДанных);
	
	Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	КомпоновщикИнициализирован = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации()
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНастройки()
	
	ПерезаполнитьГруппировкиПоУмолчанию = Ложь;
	ДоступныеПоляГруппировок = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок;
	Для Каждого СтрокаГруппировки Из Отчет.Группировка Цикл
		ДоступноеПоле = ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных(СтрокаГруппировки.Поле));
		Если (ДоступноеПоле = Неопределено) И НЕ ПерезаполнитьГруппировкиПоУмолчанию Тогда
			ПерезаполнитьГруппировкиПоУмолчанию = Истина;
		КонецЕсли;
	КонецЦикла;
	Если ПерезаполнитьГруппировкиПоУмолчанию Тогда
		ЗаполнитьНастройкамиПоУмолчанию(Новый Структура("Группировка", Истина));
	КонецЕсли;
	
	УдаляемыеЭлементы = Новый Массив;
	ПроверитьОтбор(Отчет.КомпоновщикНастроек.Настройки.Отбор, УдаляемыеЭлементы);
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	УдаляемыеЭлементы.Очистить();
	ДоступныеПоля = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора;
	Для Каждого ДополнительноеПоле Из Отчет.ДополнительныеПоля Цикл
		ДоступноеПоле = ДоступныеПоля.НайтиПоле(Новый ПолеКомпоновкиДанных(ДополнительноеПоле.Поле));
		Если ДоступноеПоле = Неопределено Тогда
			УдаляемыеЭлементы.Добавить(ДополнительноеПоле);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Отчет.ДополнительныеПоля.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	УдаляемыеЭлементы.Очистить();
	ДоступныеПоля = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка;
	ПоляПорядка = Отчет.КомпоновщикНастроек.Настройки.Порядок.Элементы;
	Для Каждого ПолеПорядка Из ПоляПорядка Цикл
		ДоступноеПоле = ДоступныеПоля.НайтиПоле(ПолеПорядка.Поле);
		Если ДоступноеПоле = Неопределено Тогда
			УдаляемыеЭлементы.Добавить(ПолеПорядка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		ПоляПорядка.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОтбор(Отбор, МассивЭлементовДляУдаления)
	
	ДоступныеПоляОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора;
	
	Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ПроверитьОтбор(ЭлементОтбора, МассивЭлементовДляУдаления);
		Иначе
			ДоступныйОтбор = ДоступныеПоляОтбора.НайтиПоле(ЭлементОтбора.ЛевоеЗначение);
			Если ДоступныйОтбор = Неопределено Тогда
				МассивЭлементовДляУдаления.Добавить(ЭлементОтбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыписанПриИзменении(Элемент)
	
	УстановитьОтборСКД("СНТВыписан", ВидСравненияКомпоновкиДанных.Равно, Выписан, Элемент, ЭтаФорма);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправленПриИзменении(Элемент)

	УстановитьОтборСКД("СНТОтправлен", ВидСравненияКомпоновкиДанных.Равно, Отправлен, Элемент, ЭтаФорма);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроведенПриИзменении(Элемент)

	УстановитьОтборСКД("СНТПроведен", ВидСравненияКомпоновкиДанных.Равно, Проведен, Элемент, ЭтаФорма);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтатусСНТПриИзменении(Элемент)

	УстановитьОтборСКД("СНТСтатус", ВидСравненияКомпоновкиДанных.Равно, СтатусСНТ, Элемент, ЭтаФорма);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;


КонецПроцедуры


&НаКлиенте
Процедура ОтправленОтборПриИзменении(Элемент)
	
	 УстановитьОтборСКД("СНТОтправлен", ВидСравненияКомпоновкиДанных.Равно, ОтправленОтбор, Элемент, ЭтаФорма);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроведенОтборПриИзменении(Элемент)

	УстановитьОтборСКД("СНТПроведен", ВидСравненияКомпоновкиДанных.Равно, ПроведенОтбор, Элемент, ЭтаФорма);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура ВыписанОтборПриИзменении(Элемент)
	
	УстановитьОтборСКД("СНТВыписан", ВидСравненияКомпоновкиДанных.Равно, ВыписанОтбор, Элемент, ЭтаФорма);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УчетПоРозничнойВыручкеПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Отчет.КомпоновщикНастроек, "ВключатьРозницу", УчетПоРозничнойВыручке);

	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВывестиВсеСНТПриИзменении(Элемент)   
	
	УправлениеФормой(ЭтаФорма);
	
	//ОбновитьТекстЗаголовка(ЭтаФорма); 
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	ИнициализацияКомпоновщикаНастроек();
	
	ЗаполняемыеНастройки = Новый Структура("Группировка, ДополнительныеПоля, Отбор", Истина, Истина, Истина);
	ЗаполнитьНастройкамиПоУмолчанию(ЗаполняемыеНастройки);
	
КонецПроцедуры
