
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем УИДЗамера;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ЗаполняемыеНастройки = Новый Структура("Показатели, Группировка, Отбор, ДополнительныеПоля",
	                                       Истина, Истина, Истина, Истина);
	ЗаполнитьНастройкамиПоУмолчанию(ЗаполняемыеНастройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	ПодключитьОбработчикОжидания = Не ИБФайловая И ЗначениеЗаполнено(ИдентификаторЗадания);
	Если ПодключитьОбработчикОжидания Тогда		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиент.ПриОткрытии(ЭтаФорма, Отказ);
	
	Если ТипЗнч(Отчет.СписокСчетов) = Тип("Неопределено") Тогда
		Если Отчет.ВидСравненияСчета = ВидСравнения.Равно ИЛИ Отчет.ВидСравненияСчета = ВидСравнения.НеРавно Тогда
			Элементы.СчетНастройки.ОграничениеТипа = Новый ОписаниеТипов("ПланСчетовСсылка.Типовой");
			Элементы.СчетШапка.ОграничениеТипа     = Новый ОписаниеТипов("ПланСчетовСсылка.Типовой");
		Иначе
			Отчет.СписокСчетов = Новый СписокЗначений;
			Отчет.СписокСчетов.ТипЗначения = Новый ОписаниеТипов("ПланСчетовСсылка.Типовой");
			Элементы.СчетНастройки.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
			Элементы.СчетШапка.ОграничениеТипа     = Новый ОписаниеТипов("СписокЗначений");
		КонецЕсли;
	Иначе
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(Отчет.СписокСчетов));

		Элементы.СчетНастройки.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
		Элементы.СчетШапка.ОграничениеТипа     = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
	Отчет.ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
	
	Для Каждого ЭлементСписка Из СписокПодразделений Цикл
		Если ЭлементСписка.Значение = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка") Тогда 
			ЭлементСписка.Представление = "Головное подразделение";
		КонецЕсли;				
	КонецЦикла;
	
	Отчет.ПредставлениеСпискаПодразделений = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокПодразделений);
	
	УправлениеФормой(ЭтаФорма);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОтменитьВыполнениеЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	ПроверитьНастройки();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	Если Не ЗначениеЗаполнено(СписокСтруктурныхЕдиниц) Тогда
	    
		ТекстСообщения = НСтр("ru = 'Не выбрана ни одна организация. Формирование отчета прервано...'");
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Отчет.ПредставлениеСпискаОрганизаций",, Отказ);
	        
	    ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СписокСтруктурныхЕдиниц"));

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	БухгалтерскиеОтчетыКлиент.ОтправитьОтчетыПоПочтеОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтотОбъект);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СчетПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма); 
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСпискаОрганизацийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СписокСтруктурныхЕдиниц"              , СписокСтруктурныхЕдиниц);
	ДополнительныеПараметры.Вставить("СписокПодразделений"                  , СписокПодразделений);
	ДополнительныеПараметры.Вставить("СписокВладельцевГоловныхПодразделений", СписокВладельцевГоловныхПодразделений);
	ДополнительныеПараметры.Вставить("ВыборСтруктурныхПодразделений"        , ПоддержкаРаботыСоСтруктурнымиПодразделениями); 
	
	БухгалтерскиеОтчетыКлиент.ПредставлениеСпискаОрганизацийНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСпискаОрганизацийОчистка(Элемент, СтандартнаяОбработка)
	
	Если Не УчетПоВсемОрганизациям Тогда
		СтандартнаяОбработка = Ложь;
	Иначе 
		СписокПодразделений.Очистить();
		СписокСтруктурныхЕдиниц.Очистить();
		СписокВладельцевГоловныхПодразделений.Очистить();
		
		Отчет.ПредставлениеСпискаОрганизаций   = "";
		Отчет.ПредставлениеСпискаПодразделений = "";
		
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательБУПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательКоличествоПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачальныйОстатокПриИзменении(Элемент)
	
	Если Отчет.НачальныйОстаток <> Отчет.КонечныйОстаток Тогда
		ТекстСообщения = НСтр("ru = 'Настройки ""Начальный остаток"" и "" Конечный остаток"" должны иметь одинаковое значение!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Объект");
		Отчет.КонечныйОстаток = Отчет.НачальныйОстаток;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонечныйОстатокПриИзменении(Элемент)
	
	Если Отчет.НачальныйОстаток <> Отчет.КонечныйОстаток Тогда
		ТекстСообщения = НСтр("ru = 'Настройки ""Конечный остаток"" и "" Начальный остаток"" должны иметь одинаковое значение!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Объект");
		Отчет.НачальныйОстаток = Отчет.КонечныйОстаток;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриходПриИзменении(Элемент)
	
	Если НЕ Отчет.Приход И НЕ Отчет.Расход Тогда
		Отчет.ПоКорСчетам    = Ложь;
		Отчет.ПоКорСубконто1 = Ложь;
		Отчет.ПоКорСубконто2 = Ложь;
		Отчет.ПоКорСубконто3 = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходПриИзменении(Элемент)
	
	
	Если НЕ Отчет.Приход И НЕ Отчет.Расход Тогда
		Отчет.ПоКорСчетам    = Ложь;
		Отчет.ПоКорСубконто1 = Ложь;
		Отчет.ПоКорСубконто2 = Ложь;
		Отчет.ПоКорСубконто3 = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеИтогиПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МакетОформленияПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки, "МакетОформления", МакетОформления);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЗаголовокПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПодписиПриИзменении(Элемент)
	
	ВыводитьПодписиРуководителей = Ложь;
	УправлениеФормой(ЭтаФорма);

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПодписиРуководителейПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ ТАБЛИЧНОГО ДОКУМЕНТА

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ОбработкаРасшифровкиСтандартногоОтчета(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ГРУППИРОВКА

&НаКлиенте
Процедура ПоКорСчетамПриИзменении(Элемент)
	
	Если НЕ Отчет.ПоКорСчетам Тогда
		Отчет.ПоКорСубконто1 = Ложь;
		Отчет.ПоКорСубконто2 = Ложь;
		Отчет.ПоКорСубконто3 = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоКорСубконто1ПриИзменении(Элемент)
	
	Если НЕ Отчет.ПоКорСубконто1 Тогда
		Отчет.ПоКорСубконто2 = Ложь;
		Отчет.ПоКорСубконто3 = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоКорСубконто2ПриИзменении(Элемент)
	
	Если НЕ Отчет.ПоКорСубконто2 Тогда
		Отчет.ПоКорСубконто3 = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоКорСубконто3ПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ГруппировкаПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);  
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ГруппировкаПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОТБОРЫ

&НаКлиенте
Процедура ВидСравненияСчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Отчет.ВидСравненияСчета = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВидСравненияПростой = Отчет.ВидСравненияСчета = ВидСравнения.Равно ИЛИ Отчет.ВидСравненияСчета = ВидСравнения.НеРавно;
	НовыйВидСравненияПростой   = ВыбранноеЗначение       = ВидСравнения.Равно ИЛИ ВыбранноеЗначение       = ВидСравнения.НеРавно;
	
	Если ТекущийВидСравненияПростой = НовыйВидСравненияПростой Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Отчет.СписокСчетов) = Тип("ПланСчетовСсылка.Типовой") Тогда
		ЗаписываемоеЗначение = Отчет.СписокСчетов;
	ИначеЕсли Не Отчет.СписокСчетов = Неопределено Тогда 
		Если Отчет.СписокСчетов.Количество() = 0 Тогда
			ЗаписываемоеЗначение = ПредопределенноеЗначение("ПланСчетов.Типовой.ПустаяСсылка");
		Иначе
			ЗаписываемоеЗначение = Отчет.СписокСчетов[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыбранноеЗначение = ВидСравнения.ВСписке ИЛИ ВыбранноеЗначение = ВидСравнения.ВИерархии ИЛИ ВыбранноеЗначение = ВидСравнения.НеВСписке ИЛИ ВыбранноеЗначение = ВидСравнения.НеВИерархии Тогда
		
		Элементы.СчетНастройки.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
		Элементы.СчетШапка.ОграничениеТипа     = Новый ОписаниеТипов("СписокЗначений");
		Отчет.СписокСчетов = Новый СписокЗначений;
		Отчет.СписокСчетов.ТипЗначения = Новый ОписаниеТипов("ПланСчетовСсылка.Типовой");
		Если ЗначениеЗаполнено(ЗаписываемоеЗначение) Тогда
			Отчет.СписокСчетов.Добавить(ЗаписываемоеЗначение);
		КонецЕсли;
		
	Иначе              
		
		Элементы.СчетНастройки.ОграничениеТипа = Новый ОписаниеТипов("ПланСчетовСсылка.Типовой");
		Элементы.СчетШапка.ОграничениеТипа     = Новый ОписаниеТипов("ПланСчетовСсылка.Типовой");
		Отчет.СписокСчетов = ЗаписываемоеЗначение;
		
	КонецЕсли;
	
	Отчет.ВидСравненияСчета = ВыбранноеЗначение;
		
КонецПроцедуры

&НаКлиенте
Процедура СчетНастройкиПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма); 
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПриИзменении(ЭтаФорма, Элемент, Ложь);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПараметров = ПолучитьПараметрыВыбораЗначенияОтбора();
	БухгалтерскиеОтчетыКлиент.ОтборыПравоеЗначениеНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, СписокПараметров);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СОРТИРОВКА

&НаКлиенте
Процедура СортировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДОПОЛНИТЕЛЬНЫЕПОЛЯ

&НаКлиенте
Процедура РазмещениеДополнительныхПолейПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ДополнительныеПоляПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ДополнительныеПоляПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Отчет.НачалоПериода, Отчет.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаСнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.Группировка Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаУстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.Группировка Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляУстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.ДополнительныеПоля Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляСнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.ДополнительныеПоля Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьНастройки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "Отчет ""материальная ведомость"" (формирование)"); 
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	Иначе
		ЗафиксироватьДлительностьКлючевойОперации();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьНастройки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)

	ПоказатьДиалогОтправкиПоЭлектроннойПочте();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Отчет, РезультатВыбора, "НачалоПериода,КонецПериода");
	
	ОбновитьТекстЗаголовка(ЭтаФорма); 
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Отчет    = Форма.Отчет;
	Элементы = Форма.Элементы;
	
	Элементы.ПредставлениеСпискаПодразделений.Видимость = Форма.СписокПодразделений.Количество() > 0;
	
	Элементы.ВыводитьПодписиРуководителей.Доступность = Форма.ВыводитьПодписи;
	
	Элементы.ПоКорСчетам.Доступность    = Отчет.Приход ИЛИ Отчет.Расход;
	
	Элементы.ПоКорСубконто1.Доступность = Отчет.ПоКорСчетам;
	Элементы.ПоКорСубконто2.Доступность = Отчет.ПоКорСчетам И Отчет.ПоКорСубконто1;
	Элементы.ПоКорСубконто3.Доступность = Отчет.ПоКорСчетам И Отчет.ПоКорСубконто1 И Отчет.ПоКорСубконто2;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;
	
	Если ЗначениеЗаполнено(Отчет.СписокСчетов) Тогда
		СписокСчетов = Отчет.СписокСчетов;
	Иначе
		СписокСчетов = Форма.СписокСчетовСНоменклатурой;
	КонецЕсли;
	
	ЗаголовокОтчета = НСтр("ru = 'Материальная ведомость %1'");
	ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ЗаголовокОтчета, БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Отчет.НачалоПериода, Отчет.КонецПериода));

	Форма.Заголовок = ЗаголовокОтчета;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ОтменитьВыполнениеЗадания()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкамиПоУмолчанию(ЗаполняемыеНастройки) Экспорт
	
	Если ЗаполняемыеНастройки.Свойство("Показатели") Тогда
		Если ЗаполняемыеНастройки.Показатели Тогда
			Отчет.ПоказательБУ         = Истина;
			Отчет.ПоказательКоличество = Истина;
			
			Отчет.НачальныйОстаток     = Истина;
			Отчет.КонечныйОстаток      = Истина;
			Отчет.Приход               = Истина;
			Отчет.Расход               = Истина;
			Отчет.ОбщиеИтоги           = Истина;
		КонецЕсли;
	КонецЕсли;

	Если ЗаполняемыеНастройки.Свойство("Группировка") Тогда
		Если ЗаполняемыеНастройки.Группировка Тогда

			Отчет.Группировка.Очистить();
			
			Если УчетПоВсемОрганизациям Тогда
				НоваяСтрока = Отчет.Группировка.Добавить();
				НоваяСтрока.Поле           = "Организация";
				НоваяСтрока.Использование  = Ложь;
				НоваяСтрока.Представление  = НСтр("ru = 'Организация'");
				НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;	
			КонецЕсли;
			
			Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				НоваяСтрока = Отчет.Группировка.Добавить();
				НоваяСтрока.Поле           = "Подразделение";
				НоваяСтрока.Использование  = Ложь;
				НоваяСтрока.Представление  = НСтр("ru = 'Структурное подразделение'");
				НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;	
			КонецЕсли;

			НоваяСтрока = Отчет.Группировка.Добавить();
			НоваяСтрока.Поле           = "Номенклатура";
			НоваяСтрока.Использование  = Истина;
			НоваяСтрока.Представление  = НСтр("ru = 'Номенклатура'");
			НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
			
			Отчет.ПоКорСчетам    = Ложь;
			Отчет.ПоКорСубконто1 = Ложь;
			Отчет.ПоКорСубконто2 = Ложь;
			Отчет.ПоКорСубконто3 = Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполняемыеНастройки.Свойство("Отбор") Тогда
		Если ЗаполняемыеНастройки.Отбор Тогда
			ОпределитьСчетаУчетаСНоменклатурой();
			ЗаполнитьВидСравненияСчета();
		КонецЕсли;
	КонецЕсли;
	
	// Дополнительные поля	
	Если ЗаполняемыеНастройки.Свойство("ДополнительныеПоля") И ЗаполняемыеНастройки.ДополнительныеПоля Тогда
		
		Отчет.ДополнительныеПоля.Очистить();
		
		НоваяСтрока = Отчет.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "Номенклатура.СчетУчета";
		НоваяСтрока.Представление  = НСтр("ru = 'Счет учета'");
		НоваяСтрока.Использование  = Истина;
		
		НоваяСтрока = Отчет.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "Номенклатура.Код";
		НоваяСтрока.Представление  = НСтр("ru = 'Код'");
		НоваяСтрока.Использование  = Истина;
		
		НоваяСтрока = Отчет.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "Номенклатура.ЕдиницаИзмерения";
		НоваяСтрока.Представление  = НСтр("ru = 'Ед.изм.'");
		НоваяСтрока.Использование  = Истина;
		
		Отчет.РазмещениеДополнительныхПолей = 1;
		
	КонецЕсли;
	
	ЭлементМакетОформления = Элементы.МакетОформления;
	ЭлементМакетОформления.СписокВыбора.Очистить();
	ЭлементМакетОформления.СписокВыбора.Добавить("МакетБелый", НСтр("ru = 'Макет белый'"));
	ЭлементМакетОформления.СписокВыбора.Добавить("МакетЦветной", НСтр("ru = 'Макет цветной'"));
	МакетОформления = ЭлементМакетОформления.СписокВыбора[0].Значение;
	
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетНаСервере() Экспорт
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет",
			ПараметрыОтчета,
			БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	Если ЗначениеЗаполнено(Отчет.СписокСчетов) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Типовой.Ссылка
		|ИЗ
		|	ПланСчетов.Типовой КАК Типовой
		| ГДЕ
		| 	//УСЛОВИЕ СЧЕТА");
		
		Запрос.УстановитьПараметр("Счет", Отчет.СписокСчетов);
		
		Если Отчет.ВидСравненияСчета = ВидСравнения.ВИерархии ТОгда
			ТекстЗамены = "Ссылка В ИЕРАРХИИ (&Счет)";
		ИначеЕсли Отчет.ВидСравненияСчета = ВидСравнения.НеВИерархии ТОгда
			ТекстЗамены = "Ссылка НЕ В ИЕРАРХИИ (&Счет)";
		ИначеЕсли Отчет.ВидСравненияСчета = ВидСравнения.Равно ТОгда
			ТекстЗамены = "Ссылка = &Счет";
		ИначеЕсли Отчет.ВидСравненияСчета = ВидСравнения.НеРавно ТОгда
			ТекстЗамены = "Ссылка <> &Счет";
		ИначеЕсли Отчет.ВидСравненияСчета = ВидСравнения.ВСписке ТОгда
			ТекстЗамены = "Ссылка В (&Счет)";
		ИначеЕсли Отчет.ВидСравненияСчета = ВидСравнения.НеВСписке ТОгда
			ТекстЗамены = "Ссылка НЕ В (&Счет)";
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//УСЛОВИЕ СЧЕТА",ТекстЗамены);
		
		СписокСчетов = Новый СписокЗначений;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокСчетов.Добавить(Выборка.Ссылка);
		КонецЦикла;

		ПараметрСписокСчетов = СписокСчетов;
		
	Иначе
		ПараметрСписокСчетов = СписокСчетовСНоменклатурой;
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("НачалоПериода"                         , Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода"                          , Отчет.КонецПериода);
	ПараметрыОтчета.Вставить("СписокСчетов"                          , ПараметрСписокСчетов);
	ПараметрыОтчета.Вставить("ПоказательБУ"                          , Отчет.ПоказательБУ);
	ПараметрыОтчета.Вставить("ПоказательКоличество"                  , Отчет.ПоказательКоличество);
	ПараметрыОтчета.Вставить("НачальныйОстаток"                      , Отчет.НачальныйОстаток);
	ПараметрыОтчета.Вставить("КонечныйОстаток"                       , Отчет.КонечныйОстаток);
	ПараметрыОтчета.Вставить("Приход"                                , Отчет.Приход);
	ПараметрыОтчета.Вставить("Расход"                                , Отчет.Расход);
	ПараметрыОтчета.Вставить("ОбщиеИтоги"                            , Отчет.ОбщиеИтоги);
	ПараметрыОтчета.Вставить("Группировка"                           , Отчет.Группировка.Выгрузить());
	ПараметрыОтчета.Вставить("ДополнительныеПоля"                    , Отчет.ДополнительныеПоля.Выгрузить());
	ПараметрыОтчета.Вставить("РазмещениеДополнительныхПолей"         , Отчет.РазмещениеДополнительныхПолей);
	ПараметрыОтчета.Вставить("ЕстьСклады"                            , ЕстьСклады);
	ПараметрыОтчета.Вставить("ВидыСубконтоСчетовНоменклатуры"        , ВидыСубконтоСчетовНоменклатуры);
	ПараметрыОтчета.Вставить("ПоКорСчетам"                           , Отчет.ПоКорСчетам);
	ПараметрыОтчета.Вставить("ПоКорСубконто1"                        , Отчет.ПоКорСубконто1);
	ПараметрыОтчета.Вставить("ПоКорСубконто2"                        , Отчет.ПоКорСубконто2);
	ПараметрыОтчета.Вставить("ПоКорСубконто3"                        , Отчет.ПоКорСубконто3);
	ПараметрыОтчета.Вставить("РежимРасшифровки"                      , Отчет.РежимРасшифровки);
	ПараметрыОтчета.Вставить("СписокСтруктурныхЕдиниц"               , СписокСтруктурныхЕдиниц);
	ПараметрыОтчета.Вставить("СписокПодразделений"                   , СписокПодразделений);
	ПараметрыОтчета.Вставить("СписокВладельцевГоловныхПодразделений" , СписокВладельцевГоловныхПодразделений);
	ПараметрыОтчета.Вставить("ВыводитьЗаголовок"                     , ВыводитьЗаголовок);
	ПараметрыОтчета.Вставить("ВыводитьПодписи"                       , ВыводитьПодписи);
	ПараметрыОтчета.Вставить("ВыводитьПодписиРуководителей"          , ВыводитьПодписиРуководителей);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"                     , ДанныеРасшифровки);
	ПараметрыОтчета.Вставить("МакетОформления"                       , МакетОформления);
	ПараметрыОтчета.Вставить("СвойМакетОформления"                   , Истина);
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных"                 , ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных));
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"                   , БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ЭтаФорма));
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных"             , Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	ПараметрыОтчета.Вставить("НаборПоказателей"                      , Отчеты[ПараметрыОтчета.ИдентификаторОтчета].ПолучитьНаборПоказателей());
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат           = РезультатВыполнения.Результат;
	ДанныеРасшифровки   = РезультатВыполнения.ДанныеРасшифровки;
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 

			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		    ЗафиксироватьДлительностьКлючевойОперации();
			
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		УИДЗамера = Неопределено;
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗапрещенныеПоля(Режим = "") Экспорт
	
	СписокПолей = Новый Массив;
	
	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
	СписокПолей.Добавить("Показатели");
	СписокПолей.Добавить("Период");
	
	СписокПолей.Добавить("Приход");
	СписокПолей.Добавить("Расход");
	СписокПолей.Добавить("НачальныйОстаток");
	СписокПолей.Добавить("КонечныйОстаток");
	
	Если Режим = "Выбор" Тогда
		Для Каждого ДоступноеПоле Из Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
			Если ДоступноеПоле.Ресурс Тогда
				СписокПолей.Добавить(Строка(ДоступноеПоле.Поле));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		СписокПолей.Добавить("Подразделение");
	КонецЕсли;
	
	Если Режим = "Группировка" Тогда
		СписокПолей.Добавить("ОстатокНаНачало");
		СписокПолей.Добавить("ОборотыПриход");
		СписокПолей.Добавить("ОборотыРасход");
		СписокПолей.Добавить("ОстатокНаКонец");
	ИначеЕсли Режим = "Выбор" Тогда
		СписокПолей.Добавить("ОстатокНаНачало");
		СписокПолей.Добавить("ОборотыПриход");
		СписокПолей.Добавить("ОборотыРасход");
		СписокПолей.Добавить("ОстатокНаКонец");
	ИначеЕсли Режим = "Отбор" Тогда
		СписокПолей.Добавить("СчетУчета");
		СписокПолей.Добавить("Счет");
		БухгалтерскиеОтчетыКлиент.ДобавитьПоляРесурсовВЗапрещенныеПоля(ЭтаФорма, СписокПолей);
	ИначеЕсли Режим = "Порядок" Тогда
		СписокПолей.Добавить("СчетУчета");
		СписокПолей.Добавить("Счет");
		БухгалтерскиеОтчетыКлиент.ДобавитьПоляРесурсовВЗапрещенныеПоля(ЭтаФорма, СписокПолей);
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыВыбораЗначенияОтбора() Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата"              , Отчет.КонецПериода);
	//СписокПараметров.Вставить("СчетУчета"         , Отчет.СписокСчетов);
	СписокПараметров.Вставить("Счет"         , Отчет.СписокСчетов);
	СписокПараметров.Вставить("Номенклатура"      , Неопределено);
	СписокПараметров.Вставить("Склад"             , Неопределено);
	СписокПараметров.Вставить("Организация"       , СписокСтруктурныхЕдиниц);
	СписокПараметров.Вставить("Контрагент"        , Неопределено);
	СписокПараметров.Вставить("ДоговорКонтрагента", Неопределено);
	
	Возврат СписокПараметров;
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(РезультатВыбора, ДопПараметры) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ПослеВыбораСтруктурногоПодразделения(ЭтаФорма, РезультатВыбора);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ГруппировкаПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ГруппировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДопПараметры);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДопПараметры);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ДополнительныеПоляПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ДополнительныеПоляПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДопПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьСчетаУчетаСНоменклатурой()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Типовой.Ссылка
	                      |ИЗ
	                      |	ПланСчетов.Типовой КАК Типовой
	                      |ГДЕ
	                      |	(Типовой.ВидыСубконто.ВидСубконто = &ВидСубконтоНоменклатура
	                      |				И Типовой.ВидыСубконто.ВидСубконто = &ВидСубконтоСклад
	                      |				И НЕ Типовой.ЗапретитьИспользоватьВПроводках
	                      |			ИЛИ Типовой.Ссылка = ЗНАЧЕНИЕ(ПланСчетов.Типовой.Товары))");
						  
	Запрос.УстановитьПараметр("ВидСубконтоНоменклатура", ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	
	ВидыСубконтоСчетовНоменклатуры.Очистить();
	ВидыСубконтоСчетовНоменклатуры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	
	Если ПланыСчетов.Типовой.Товары.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады)<>Неопределено ТОгда
		Запрос.УстановитьПараметр("ВидСубконтоСклад", ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);
		ВидыСубконтоСчетовНоменклатуры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);
		ЕстьСклады = Истина;
	Иначе
		Запрос.УстановитьПараметр("ВидСубконтоСклад", ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
		ЕстьСклады = Ложь;
	КонецЕсли;
	
	МассивСчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	СписокСчетовСНоменклатурой.ЗагрузитьЗначения(МассивСчетов);
	
	МассивСчетов.Добавить(ПланыСчетов.Типовой.Запасы);

	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", МассивСчетов);

	НовыеПараметры = Новый Массив;
	НовыеПараметры.Добавить(НовыйПараметр);
	
	Элементы.СчетШапка.ПараметрыВыбора      = Новый ФиксированныйМассив(НовыеПараметры);
	Элементы.СчетНастройки.ПараметрыВыбора  = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидСравненияСчета()

	Отчет.ВидСравненияСчета = ВидСравнения.ВИерархии;
	Элементы.ВидСравненияСчета.СписокВыбора.ТипЗначения = Новый ОписаниеТипов("ВидСравнения");
	Элементы.ВидСравненияСчета.СписокВыбора.Добавить(ВидСравнения.Равно);
	Элементы.ВидСравненияСчета.СписокВыбора.Добавить(ВидСравнения.НеРавно);
	Элементы.ВидСравненияСчета.СписокВыбора.Добавить(ВидСравнения.ВСписке);
	Элементы.ВидСравненияСчета.СписокВыбора.Добавить(ВидСравнения.НеВСписке);
	Элементы.ВидСравненияСчета.СписокВыбора.Добавить(ВидСравнения.ВИерархии);
	Элементы.ВидСравненияСчета.СписокВыбора.Добавить(ВидСравнения.НеВИерархии);
	
	Отчет.ВидСравненияСчета = ВидСравнения.ВИерархии;

КонецПроцедуры

&НаСервере
Процедура ПроверитьНастройки()
	
	ЗапрещенныеПоля = Новый Массив;
	ЗапрещенныеПоля.Добавить("Приход");
	ЗапрещенныеПоля.Добавить("Расход");
	ЗапрещенныеПоля.Добавить("НачальныйОстаток");
	ЗапрещенныеПоля.Добавить("КонечныйОстаток");
	ЗапрещенныеПоля.Добавить("ОборотыПриход.Приход");
	ЗапрещенныеПоля.Добавить("ОборотыРасход.Расход");
	ЗапрещенныеПоля.Добавить("ОстатокНаНачало.НачальныйОстаток");
	ЗапрещенныеПоля.Добавить("ОстатокНаКонец.КонечныйОстаток");
	
	ПерезаполнитьГруппировкиПоУмолчанию = Ложь;
	ДоступныеПоляГруппировок = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок;
	Для Каждого СтрокаГруппировки Из Отчет.Группировка Цикл
		ДоступноеПоле = ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных(СтрокаГруппировки.Поле));
		Если (ДоступноеПоле = Неопределено ИЛИ ЗапрещенныеПоля.Найти(СтрокаГруппировки.Поле) <> Неопределено) И НЕ ПерезаполнитьГруппировкиПоУмолчанию Тогда
			ПерезаполнитьГруппировкиПоУмолчанию = Истина;
		КонецЕсли;
	КонецЦикла;
	Если ПерезаполнитьГруппировкиПоУмолчанию Тогда
		ЗаполнитьНастройкамиПоУмолчанию(Новый Структура("Группировка", Истина));
	КонецЕсли;
	
	УдаляемыеЭлементы = Новый Массив;
	ПроверитьОтбор(Отчет.КомпоновщикНастроек.Настройки.Отбор, УдаляемыеЭлементы);
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	УдаляемыеЭлементы.Очистить();
	ДоступныеПоля = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора;
	Для Каждого ДополнительноеПоле Из Отчет.ДополнительныеПоля Цикл
		ДоступноеПоле = ДоступныеПоля.НайтиПоле(Новый ПолеКомпоновкиДанных(ДополнительноеПоле.Поле));
		Если ДоступноеПоле = Неопределено Тогда
			УдаляемыеЭлементы.Добавить(ДополнительноеПоле);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Отчет.ДополнительныеПоля.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	УдаляемыеЭлементы.Очистить();
	ДоступныеПоля = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка;
	ПоляПорядка = Отчет.КомпоновщикНастроек.Настройки.Порядок.Элементы;
	Для Каждого ПолеПорядка Из ПоляПорядка Цикл
		ДоступноеПоле = ДоступныеПоля.НайтиПоле(ПолеПорядка.Поле);
		Если ДоступноеПоле = Неопределено Тогда
			УдаляемыеЭлементы.Добавить(ПолеПорядка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		ПоляПорядка.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОтбор(Отбор, МассивЭлементовДляУдаления)
	
	ДоступныеПоляОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора;
	
	Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ПроверитьОтбор(ЭлементОтбора, МассивЭлементовДляУдаления);
		Иначе
			ДоступныйОтбор = ДоступныеПоляОтбора.НайтиПоле(ЭлементОтбора.ЛевоеЗначение);
			Если ДоступныйОтбор = Неопределено Тогда
				МассивЭлементовДляУдаления.Добавить(ЭлементОтбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогОтправкиПоЭлектроннойПочте()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьОтчетыПоПочтеНастройкаУчетнойЗаписиПредложена", БухгалтерскиеОтчетыКлиент, ЭтотОбъект);

	РаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации()
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
	
КонецПроцедуры