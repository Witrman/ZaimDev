
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем УИДЗамера;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыВызовСервера.УстановитьНастройкиПоУмолчанию(ЭтаФорма);
	
	Отчет.СписокОрганизаций = Справочники.Организации.ОрганизацияПоУмолчанию();
	
	ЗаполнитьВидыСравнения();
	
	Отчет.СпособПеречисления = Перечисления.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезПочту;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
		
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	ПодключитьОбработчикОжидания = Не ИБФайловая И ЗначениеЗаполнено(ИдентификаторЗадания);
	Если ПодключитьОбработчикОжидания Тогда		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
	Если ТипЗнч(Отчет.СписокОрганизаций) = Тип("Неопределено") Тогда
		Если ВидСравненияОрганизации = ВидСравнения.Равно ИЛИ ВидСравненияОрганизации = ВидСравнения.НеРавно Тогда
			Элементы.СписокОрганизаций.ОграничениеТипа      = Новый ОписаниеТипов("СправочникСсылка.Организации");
			Элементы.СписокОрганизацийОтбор.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");
		Иначе
			Отчет.СписокОрганизаций = Новый СписокЗначений;
			Отчет.СписокОрганизаций.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
			Элементы.СписокОрганизаций.ОграничениеТипа      = Новый ОписаниеТипов("СписокЗначений");
			Элементы.СписокОрганизацийОтбор.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
		КонецЕсли;
	Иначе
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(Отчет.СписокОрганизаций));

		Элементы.СписокОрганизаций.ОграничениеТипа      = Новый ОписаниеТипов(МассивТипов);
		Элементы.СписокОрганизацийОтбор.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
	Если ТипЗнч(Отчет.СписокВидовСбора) = Тип("Неопределено") Тогда
		Если ВидСравненияВидаСбора = ВидСравнения.Равно ИЛИ ВидСравненияВидаСбора = ВидСравнения.НеРавно Тогда
			Элементы.СписокВидовСбора.ОграничениеТипа      = Новый ОписаниеТипов("ПланВидовРасчетаСсылка.УдержанияОрганизаций");
			Элементы.СписокВидовСбораОтбор.ОграничениеТипа = Новый ОписаниеТипов("ПланВидовРасчетаСсылка.УдержанияОрганизаций");
		Иначе
			Отчет.СписокВидовСбора = Новый СписокЗначений;
			Отчет.СписокВидовСбора.ТипЗначения = Новый ОписаниеТипов("ПланВидовРасчетаСсылка.УдержанияОрганизаций");
			Элементы.СписокВидовСбора.ОграничениеТипа      = Новый ОписаниеТипов("СписокЗначений");
			Элементы.СписокВидовСбораОтбор.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
		КонецЕсли;
	Иначе
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(Отчет.СписокВидовСбора));

		Элементы.СписокВидовСбора.ОграничениеТипа      = Новый ОписаниеТипов(МассивТипов);
		Элементы.СписокВидовСбораОтбор.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
	Если ТипЗнч(Отчет.СписокБанков) = Тип("Неопределено") Тогда
		Если ВидСравненияБанка = ВидСравнения.Равно ИЛИ ВидСравненияБанка = ВидСравнения.НеРавно Тогда
			Элементы.СписокБанков.ОграничениеТипа      = Новый ОписаниеТипов("СправочникСсылка.Банки");
			Элементы.СписокБанковОтбор.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Банки");
		Иначе
			Отчет.СписокБанков = Новый СписокЗначений;
			Отчет.СписокБанков.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Банки");
			Элементы.СписокБанков.ОграничениеТипа      = Новый ОписаниеТипов("СписокЗначений");
			Элементы.СписокБанковОтбор.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
		КонецЕсли;
	Иначе
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(Отчет.СписокБанков));

		Элементы.СписокБанков.ОграничениеТипа      = Новый ОписаниеТипов(МассивТипов);
		Элементы.СписокБанковОтбор.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
	// Установка модифицированности пользовательских настроек 
	// для их автоматического сохранения при закрытии формы
	ПользовательскиеНастройкиМодифицированы = Истина;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОтменитьВыполнениеЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	СохраняемыеРеквизитыФормы = Новый Массив;
	СохраняемыеРеквизитыФормы.Добавить("ВидСравненияОрганизации");
	СохраняемыеРеквизитыФормы.Добавить("ВидСравненияВидаСбора");
	СохраняемыеРеквизитыФормы.Добавить("ВидСравненияБанка");
	
	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки, , СохраняемыеРеквизитыФормы);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	ЗагружаемыеРеквизитыФормы = Новый Массив;
	ЗагружаемыеРеквизитыФормы.Добавить("ВидСравненияОрганизации");
	ЗагружаемыеРеквизитыФормы.Добавить("ВидСравненияВидаСбора");
	ЗагружаемыеРеквизитыФормы.Добавить("ВидСравненияБанка");
	
	БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки, , ЗагружаемыеРеквизитыФормы);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	БухгалтерскиеОтчетыКлиент.ОтправитьОтчетыПоПочтеОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтотОбъект);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСравненияОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ВидСравненияОбработкаВыбора(Новый Структура("Имя, Значение", "ВидСравненияОрганизации", ВидСравненияОрганизации), ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСравненияВидаСбораОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ВидСравненияОбработкаВыбора(Новый Структура("Имя, Значение", "ВидСравненияВидаСбора", ВидСравненияВидаСбора), ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ВидСравненияБанкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ВидСравненияОбработкаВыбора(Новый Структура("Имя, Значение", "ВидСравненияБанка", ВидСравненияБанка), ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СписокОрганизацийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТипЗнч(Отчет.СписокОрганизаций) = Тип("СписокЗначений") Тогда
	
		СтандартнаяОбработка = Ложь;
		
		РежимРаботы = "ПодборВОтчет";
		
		СписокПодразделений = Новый СписокЗначений;
		СписокВладельцевГоловныхПодразделений = Новый СписокЗначений;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораСпискаОрганизаций", ЭтаФорма, Новый Структура);
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтруктурногоПодразделения",
					 Новый Структура("Организация, СтруктурноеПодразделение, ДоступноИзменениеОрганизации, РежимРаботы, СписокСтруктурныхЕдиниц,
					                 |СписокПодразделений, СписокВладельцевГоловныхПодразделений, ВыборСтруктурныхПодразделений",
									 ,, Истина, РежимРаботы, Отчет.СписокОрганизаций, СписокПодразделений, СписокВладельцевГоловныхПодразделений, Ложь),
		             ЭтаФорма, Истина,,, ОписаниеОповещения);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПеречисленияПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокВидовСбораПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокБанковПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ ТАБЛИЧНОГО ДОКУМЕНТА

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Отчет.НачалоПериода, Отчет.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьНастройки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "Отчет ""списки удержаний по исполнительным листам"" (формирование)" + Строка(Отчет.СпособПеречисления));
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	Иначе
		ЗафиксироватьДлительностьКлючевойОперации();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьНастройки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)

	ПоказатьДиалогОтправкиПоЭлектроннойПочте();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Отчет, РезультатВыбора, "НачалоПериода, КонецПериода");
	
	ОбновитьТекстЗаголовка(ЭтаФорма); 
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Отчет    = Форма.Отчет;
	Элементы = Форма.Элементы;
	
	ЧерезКассу = ПредопределенноеЗначение("Перечисление.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезКассу");
	ЧерезБанк  = ПредопределенноеЗначение("Перечисление.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезБанк");
	
	Элементы.СписокВидовСбора.Доступность      = НЕ Отчет.СпособПеречисления = ЧерезКассу;
	Элементы.СписокВидовСбораОтбор.Доступность = НЕ Отчет.СпособПеречисления = ЧерезКассу;
	Элементы.ВидСравненияВидаСбора.Доступность = НЕ Отчет.СпособПеречисления = ЧерезКассу;
	Элементы.ДекорацияВидСбора.Доступность     = НЕ Отчет.СпособПеречисления = ЧерезКассу;
	
	Элементы.СписокБанков.Доступность      = Отчет.СпособПеречисления = ЧерезБанк;
	Элементы.СписокБанковОтбор.Доступность = Отчет.СпособПеречисления = ЧерезБанк;
	Элементы.ВидСравненияБанка.Доступность = Отчет.СпособПеречисления = ЧерезБанк;
	Элементы.ДекорацияБанк.Доступность     = Отчет.СпособПеречисления = ЧерезБанк;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;
	
	ЗаголовокОтчета = НСтр("ru = 'Списки удержаний по исполнительным листам %1'");
	ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ЗаголовокОтчета, БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Отчет.НачалоПериода, Отчет.КонецПериода));

	Форма.Заголовок = ЗаголовокОтчета;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ОтменитьВыполнениеЗадания()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетНаСервере() Экспорт
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Отчеты.СпискиУдержанийПоИсполнительнымЛистам.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Отчеты.СпискиУдержанийПоИсполнительнымЛистам.СформироватьОтчет",
			ПараметрыОтчета,
			БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("НачалоПериода"          , Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода"           , Отчет.КонецПериода);
	ПараметрыОтчета.Вставить("СписокОрганизаций"      , Отчет.СписокОрганизаций);
	ПараметрыОтчета.Вставить("СписокВидовСбора"       , Отчет.СписокВидовСбора);
	ПараметрыОтчета.Вставить("СписокБанков"           , Отчет.СписокБанков);
	ПараметрыОтчета.Вставить("ВидСравненияОрганизации", ВидСравненияОрганизации);
	ПараметрыОтчета.Вставить("ВидСравненияВидаСбора"  , ВидСравненияВидаСбора);
	ПараметрыОтчета.Вставить("ВидСравненияБанка"      , ВидСравненияБанка);
	ПараметрыОтчета.Вставить("СпособПеречисления"     , Отчет.СпособПеречисления);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"    , БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ЭтаФорма));
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат.Очистить();
	Результат.Вывести(РезультатВыполнения.Результат);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 

			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		    ЗафиксироватьДлительностьКлючевойОперации();
			
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		УИДЗамера = Неопределено;
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыСравнения()

	Элементы.ВидСравненияОрганизации.СписокВыбора.ТипЗначения = Новый ОписаниеТипов("ВидСравнения");
	Элементы.ВидСравненияОрганизации.СписокВыбора.Добавить(ВидСравнения.Равно);
	Элементы.ВидСравненияОрганизации.СписокВыбора.Добавить(ВидСравнения.НеРавно);
	Элементы.ВидСравненияОрганизации.СписокВыбора.Добавить(ВидСравнения.ВСписке);
	Элементы.ВидСравненияОрганизации.СписокВыбора.Добавить(ВидСравнения.НеВСписке);
	ВидСравненияОрганизации = ВидСравнения.Равно;
	
	Элементы.ВидСравненияВидаСбора.СписокВыбора.ТипЗначения = Новый ОписаниеТипов("ВидСравнения");
	Элементы.ВидСравненияВидаСбора.СписокВыбора.Добавить(ВидСравнения.Равно);
	Элементы.ВидСравненияВидаСбора.СписокВыбора.Добавить(ВидСравнения.НеРавно);
	Элементы.ВидСравненияВидаСбора.СписокВыбора.Добавить(ВидСравнения.ВСписке);
	Элементы.ВидСравненияВидаСбора.СписокВыбора.Добавить(ВидСравнения.НеВСписке);
	ВидСравненияВидаСбора = ВидСравнения.Равно;
	
	Элементы.ВидСравненияБанка.СписокВыбора.ТипЗначения = Новый ОписаниеТипов("ВидСравнения");
	Элементы.ВидСравненияБанка.СписокВыбора.Добавить(ВидСравнения.Равно);
	Элементы.ВидСравненияБанка.СписокВыбора.Добавить(ВидСравнения.НеРавно);
	Элементы.ВидСравненияБанка.СписокВыбора.Добавить(ВидСравнения.ВСписке);
	Элементы.ВидСравненияБанка.СписокВыбора.Добавить(ВидСравнения.НеВСписке);
	Элементы.ВидСравненияБанка.СписокВыбора.Добавить(ВидСравнения.ВИерархии);
	Элементы.ВидСравненияБанка.СписокВыбора.Добавить(ВидСравнения.НеВИерархии);
	Элементы.ВидСравненияБанка.СписокВыбора.Добавить(ВидСравнения.ВСпискеПоИерархии);
	Элементы.ВидСравненияБанка.СписокВыбора.Добавить(ВидСравнения.НеВСпискеПоИерархии);
	ВидСравненияБанка = ВидСравнения.Равно;

КонецПроцедуры

&НаКлиенте
Процедура ВидСравненияОбработкаВыбора(ВидСравненияДанные, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВидСравненияИмя      = ВидСравненияДанные.Имя;
	ВидСравненияЗначение = ВидСравненияДанные.Значение;
	
	Если ВидСравненияЗначение = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВидСравненияПростой = ВидСравненияЗначение = ВидСравнения.Равно ИЛИ ВидСравненияЗначение = ВидСравнения.НеРавно;
	НовыйВидСравненияПростой   = ВыбранноеЗначение    = ВидСравнения.Равно ИЛИ ВыбранноеЗначение    = ВидСравнения.НеРавно;
	
	Если ТекущийВидСравненияПростой = НовыйВидСравненияПростой Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ВидСравненияИмя = "ВидСравненияОрганизации" Тогда
		СписокЭлементов    = "СписокОрганизаций";
		ТипЭлементовСписка = "СправочникСсылка.Организации";
	ИначеЕсли ВидСравненияИмя = "ВидСравненияВидаСбора" Тогда
		СписокЭлементов    = "СписокВидовСбора";
		ТипЭлементовСписка = "ПланВидовРасчетаСсылка.УдержанияОрганизаций";
	Иначе // "ВидСравненияБанка"
		СписокЭлементов    = "СписокБанков";
		ТипЭлементовСписка = "СправочникСсылка.Банки";
	КонецЕсли;
	
		
	Если ТипЗнч(Отчет[СписокЭлементов]) = Тип(ТипЭлементовСписка) Тогда
		ЗаписываемоеЗначение = Отчет[СписокЭлементов];
	ИначеЕсли Не Отчет[СписокЭлементов] = Неопределено Тогда 
		Если Отчет[СписокЭлементов].Количество() = 0 Тогда
			ЗаписываемоеЗначение = ПредопределенноеЗначение(СтрЗаменить(ТипЭлементовСписка, "Ссылка", "") + ".ПустаяСсылка");
		Иначе
			ЗаписываемоеЗначение = Отчет[СписокЭлементов][0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ НовыйВидСравненияПростой Тогда
		
		Элементы[СписокЭлементов].ОграничениеТипа           = Новый ОписаниеТипов("СписокЗначений");
		Элементы[СписокЭлементов + "Отбор"].ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
		Отчет[СписокЭлементов] = Новый СписокЗначений;
		Отчет[СписокЭлементов].ТипЗначения = Новый ОписаниеТипов(ТипЭлементовСписка);
		Если ЗначениеЗаполнено(ЗаписываемоеЗначение) Тогда
			Отчет[СписокЭлементов].Добавить(ЗаписываемоеЗначение);
		КонецЕсли;
		
	Иначе              
		
		Элементы[СписокЭлементов].ОграничениеТипа           = Новый ОписаниеТипов(ТипЭлементовСписка);
		Элементы[СписокЭлементов + "Отбор"].ОграничениеТипа = Новый ОписаниеТипов(ТипЭлементовСписка);
		Отчет[СписокЭлементов] = ЗаписываемоеЗначение;
		
	КонецЕсли;
	
	ЭтаФорма[ВидСравненияИмя] = ВыбранноеЗначение;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСпискаОрганизаций(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		Отчет.СписокОрганизаций = РезультатВыбора.СписокСтруктурныхЕдиниц;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогОтправкиПоЭлектроннойПочте()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьОтчетыПоПочтеНастройкаУчетнойЗаписиПредложена", БухгалтерскиеОтчетыКлиент, ЭтотОбъект);

	РаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации()
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
	
КонецПроцедуры