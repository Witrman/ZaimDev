#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура СформироватьОтчет(Знач ПараметрыОтчета, АдресХранилища) Экспорт
	
	Результат = Новый ТабличныйДокумент;
	
	СформироватьСпискиУдержаний(Результат, ПараметрыОтчета);
	
	ПоместитьВоВременноеХранилище(Новый Структура("Результат", Результат), АдресХранилища);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция СформироватьЗапрос(ПараметрыОтчета)
	
	СпособПеречисления = ПараметрыОтчета.СпособПеречисления;
	Организация        = ПараметрыОтчета.СписокОрганизаций;
	ВидСбора           = ПараметрыОтчета.СписокВидовСбора;
	Банк               = ПараметрыОтчета.СписокБанков;

	ОтборОрганизации = ЗначениеЗаполнено(Организация);
	ОтборВидаСбора   = ЗначениеЗаполнено(ВидСбора) И НЕ СпособПеречисления = Перечисления.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезКассу;
	ОтборБанка       = ЗначениеЗаполнено(Банк) И СпособПеречисления = Перечисления.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезБанк;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач"           , ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКон"           , ПараметрыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("ПочтовыйСбор"      , Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор);
	Запрос.УстановитьПараметр("Адрес"             , Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("ФактическийАдрес"  , Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	Запрос.УстановитьПараметр("СпособПеречисления", СпособПеречисления);
	
	Запрос.УстановитьПараметр("Руководитель"    , Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("ГлавныйБухгалтер", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	Запрос.УстановитьПараметр("Исполнитель"     , Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("Уволен"          , Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("ВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	
	СписокСпособовУдержанийПоИЛ = Новый СписокЗначений;
	СписокСпособовУдержанийПоИЛ.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом);
	СписокСпособовУдержанийПоИЛ.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой);
	СписокСпособовУдержанийПоИЛ.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю);
	Запрос.УстановитьПараметр("СписокСпособовУдержанийПоИЛ", СписокСпособовУдержанийПоИЛ);

	Если ОтборОрганизации Тогда
		
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Если ПараметрыОтчета.ВидСравненияОрганизации = ВидСравнения.Равно Тогда
			ВидСравненияОрганизацииСтрокой = "=" 
		ИначеЕсли ПараметрыОтчета.ВидСравненияОрганизации = ВидСравнения.НеРавно Тогда
			ВидСравненияОрганизацииСтрокой = "<>"
		ИначеЕсли ПараметрыОтчета.ВидСравненияОрганизации = ВидСравнения.ВСписке Тогда
			ВидСравненияОрганизацииСтрокой = "В"
		Иначе
			ВидСравненияОрганизацииСтрокой = "НЕ В"
		КонецЕсли; 
		
	КонецЕсли;  

	Если ОтборВидаСбора Тогда
		
		Запрос.УстановитьПараметр("ВидСбора", ВидСбора);
		
		Если ПараметрыОтчета.ВидСравненияВидаСбора = ВидСравнения.Равно Тогда
			ВидСравненияВидаСбораСтрокой = "=" 
		ИначеЕсли ПараметрыОтчета.ВидСравненияВидаСбора = ВидСравнения.НеРавно Тогда
			ВидСравненияВидаСбораСтрокой = "<>"
		ИначеЕсли ПараметрыОтчета.ВидСравненияВидаСбора = ВидСравнения.ВСписке Тогда
			ВидСравненияВидаСбораСтрокой = "В"
		Иначе
			ВидСравненияВидаСбораСтрокой = "НЕ В"
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если ОтборБанка Тогда
		
		Запрос.УстановитьПараметр("Банк", Банк);
		
		Если ПараметрыОтчета.ВидСравненияБанка = ВидСравнения.Равно Тогда
			ВидСравненияБанкаСтрокой = "=" 
		ИначеЕсли ПараметрыОтчета.ВидСравненияБанка = ВидСравнения.ВИерархии
					Или ПараметрыОтчета.ВидСравненияБанка = ВидСравнения.ВСпискеПоИерархии Тогда
			ВидСравненияБанкаСтрокой = "В ИЕРАРХИИ" 
		ИначеЕсли ПараметрыОтчета.ВидСравненияБанка = ВидСравнения.НеРавно Тогда
			ВидСравненияБанкаСтрокой = "<>"
		ИначеЕсли ПараметрыОтчета.ВидСравненияБанка = ВидСравнения.НеВИерархии
					Или ПараметрыОтчета.ВидСравненияБанка = ВидСравнения.НеВСпискеПоИерархии Тогда
			ВидСравненияБанкаСтрокой = "НЕ В ИЕРАРХИИ"
		ИначеЕсли ПараметрыОтчета.ВидСравненияБанка = ВидСравнения.ВСписке Тогда
			ВидСравненияБанкаСтрокой = "В"
		Иначе
			ВидСравненияБанкаСтрокой = "НЕ В"
		КонецЕсли; 
		
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УдержанияПоИЛ.Организация КАК Организация,
	|	ВЫРАЗИТЬ(УдержанияПоИЛ.Организация.НаименованиеПолное КАК СТРОКА(1000)) КАК НазваниеОрганизации,
	|	УдержанияПоИЛ.Получатель КАК Получатель,
	|	УдержанияПоИЛ.Получатель.Наименование КАК НаименованиеПолучателя,
	|	ВЫРАЗИТЬ(УдержанияПоИЛ.Получатель.НаименованиеПолное КАК СТРОКА(1000)) КАК ПолноеНаименованиеПолучателя,
	|	УдержанияПоИЛ.БанкПолучателя КАК БанкПолучателя,
	|	УдержанияПоИЛ.БанковскийСчетПолучателя КАК БанковскийСчетПолучателя,
	|	УдержанияПоИЛ.НаименованиеБанкаПолучателя КАК НаименованиеБанкаПолучателя,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000)) КАК АдресПолучателя,
	|	УдержанияПоИЛ.СуммаПеревода КАК СуммаПеревода,
	|	УдержанияПоИЛ.СуммаУдержаний КАК СуммаУдержаний,
	|	УдержанияПоИЛ.СуммаСбора КАК СуммаСбора,
	|	ВЫБОР
	|		КОГДА ФИОФизЛицРуководитель.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ОтветственныеЛицаРуководитель.ФизическоеЛицо.Наименование
	|		ИНАЧЕ ФИОФизЛицРуководитель.Фамилия + ВЫБОР
	|												КОГДА ФИОФизЛицРуководитель.Имя <> """" 
	|													ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицРуководитель.Имя, 1, 1) + "".""
	|												ИНАЧЕ """"
	|											  КОНЕЦ +
	|                                             ВЫБОР
	|												КОГДА ФИОФизЛицРуководитель.Отчество <> """" 
	|													ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицРуководитель.Отчество, 1, 1) + "".""
	|												ИНАЧЕ """"
	|											  КОНЕЦ
	|	КОНЕЦ КАК ФИОРуководителя,
	|	ОтветственныеЛицаРуководитель.Должность.Наименование КАК ДолжностьРуководителя,
	|	ВЫБОР
	|		КОГДА ФИОФизЛицГлавныйБухгалтер.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ОтветственныеЛицаГлавныйБухгалтер.ФизическоеЛицо.Наименование
	|		ИНАЧЕ ФИОФизЛицГлавныйБухгалтер.Фамилия + ВЫБОР
	|												КОГДА ФИОФизЛицГлавныйБухгалтер.Имя <> """" 
	|													ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицГлавныйБухгалтер.Имя, 1, 1) + "".""
	|												ИНАЧЕ """"
	|											  КОНЕЦ +
	|                                             ВЫБОР
	|												КОГДА ФИОФизЛицГлавныйБухгалтер.Отчество <> """" 
	|													ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицГлавныйБухгалтер.Отчество, 1, 1) + "".""
	|												ИНАЧЕ """"
	|											  КОНЕЦ
	|	КОНЕЦ КАК ФИОГлавногоБухгалтера,
	|	ВЫБОР
	|		КОГДА ОтветственныеЛицаГлавныйБухгалтер.Должность.Ссылка ЕСТЬ NULL
	|			ТОГДА ""Главный бухгалтер""
	|		ИНАЧЕ ОтветственныеЛицаГлавныйБухгалтер.Должность.Наименование
	|	КОНЕЦ КАК ДолжностьГлавногоБухгалтера,
	|	ВЫБОР
	|		КОГДА ФИОФизЛицИсполнитель.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА Исполнитель.ФизЛицо.Ссылка ЕСТЬ NULL
	|						ТОГДА Исполнитель.Наименование
	|					ИНАЧЕ Исполнитель.Физлицо.Наименование
	|				  КОНЕЦ
	|		ИНАЧЕ ФИОФизЛицИсполнитель.Фамилия + ВЫБОР
	|												КОГДА ФИОФизЛицИсполнитель.Имя <> """" 
	|													ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицИсполнитель.Имя, 1, 1) + "".""
	|												ИНАЧЕ """"
	|											  КОНЕЦ +
	|                                             ВЫБОР
	|												КОГДА ФИОФизЛицИсполнитель.Отчество <> """" 
	|													ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицИсполнитель.Отчество, 1, 1) + "".""
	|												ИНАЧЕ """"
	|											  КОНЕЦ
	|	КОНЕЦ КАК ФИОИсполнителя,
	|	РаботникиОрганизаций.Должность.Наименование КАК ДолжностьИсполнителя
	|ИЗ
	|	(ВЫБРАТЬ
	|		Удержания.Организация КАК Организация,
	|		Удержания.Получатель КАК Получатель,
	|		Удержания.Получатель.ОсновнойБанковскийСчет.НомерСчета КАК БанковскийСчетПолучателя,
	|		Удержания.Получатель.ОсновнойБанковскийСчет.Банк КАК БанкПолучателя,
	|		Удержания.Получатель.ОсновнойБанковскийСчет.Банк.Наименование КАК НаименованиеБанкаПолучателя,
	|		СУММА(Удержания.СуммаПеревода) КАК СуммаПеревода,
	|		СУММА(Удержания.СуммаУдержаний) КАК СуммаУдержаний,
	|		СУММА(Удержания.СуммаСбора) КАК СуммаСбора,
	|		МАКСИМУМ(Удержания.ВидСбора) КАК ВидСбора
	|	ИЗ
	|		(ВЫБРАТЬ
	|			УдержанияОрганизаций.Ссылка.Организация КАК Организация,
	|			УдержанияОрганизаций.ФизЛицо КАК ФизЛицо,
	|			УдержанияОрганизаций.ДокументОснование.Получатель КАК Получатель,
	|			УдержанияОрганизаций.Результат КАК СуммаПеревода,
	|			ВЫБОР КОГДА УдержанияОрганизаций.ВидРасчета.СпособРасчета В (&СписокСпособовУдержанийПоИЛ) ТОГДА УдержанияОрганизаций.Результат ИНАЧЕ 0 КОНЕЦ КАК СуммаУдержаний,
	|			ВЫБОР КОГДА УдержанияОрганизаций.ВидРасчета.СпособРасчета = &ПочтовыйСбор ТОГДА УдержанияОрганизаций.Результат ИНАЧЕ 0 КОНЕЦ КАК СуммаСбора,
	|			ВЫБОР КОГДА УдержанияОрганизаций.ВидРасчета.СпособРасчета = &ПочтовыйСбор ТОГДА УдержанияОрганизаций.ВидРасчета ИНАЧЕ NULL КОНЕЦ КАК ВидСбора
	|		ИЗ
	|			Документ.РасчетУдержанийРаботниковОрганизаций.Удержания КАК УдержанияОрганизаций
	|
	|		ГДЕ
	|			УдержанияОрганизаций.Ссылка.Проведен И
	|			(УдержанияОрганизаций.ВидРасчета.СпособРасчета В (&СписокСпособовУдержанийПоИЛ) ИЛИ
	|			УдержанияОрганизаций.ВидРасчета.СпособРасчета = &ПочтовыйСбор) И
	|			УдержанияОрганизаций.Ссылка.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон И
	|			УдержанияОрганизаций.ДокументОснование ССЫЛКА Документ.ИсполнительныйЛист И
	|			ВЫРАЗИТЬ(УдержанияОрганизаций.ДокументОснование КАК Документ.ИсполнительныйЛист).СпособПеречисления = &СпособПеречисления И
	|			УдержанияОрганизаций.Результат <> 0
    |       
    |       ОБЪЕДИНИТЬ ВСЕ
    |
    |       ВЫБРАТЬ
	|			РасчетЕдиногоПлатежаУдержанияОрганизаций.Ссылка.Организация КАК Организация,
	|			РасчетЕдиногоПлатежаУдержанияОрганизаций.ФизЛицо КАК ФизЛицо,
	|			РасчетЕдиногоПлатежаУдержанияОрганизаций.ДокументОснование.Получатель КАК Получатель,
	|			РасчетЕдиногоПлатежаУдержанияОрганизаций.Результат КАК СуммаПеревода,
	|			ВЫБОР КОГДА РасчетЕдиногоПлатежаУдержанияОрганизаций.ВидРасчета.СпособРасчета В (&СписокСпособовУдержанийПоИЛ) ТОГДА РасчетЕдиногоПлатежаУдержанияОрганизаций.Результат ИНАЧЕ 0 КОНЕЦ КАК СуммаУдержаний,
	|			ВЫБОР КОГДА РасчетЕдиногоПлатежаУдержанияОрганизаций.ВидРасчета.СпособРасчета = &ПочтовыйСбор ТОГДА РасчетЕдиногоПлатежаУдержанияОрганизаций.Результат ИНАЧЕ 0 КОНЕЦ КАК СуммаСбора,
	|			ВЫБОР КОГДА РасчетЕдиногоПлатежаУдержанияОрганизаций.ВидРасчета.СпособРасчета = &ПочтовыйСбор ТОГДА РасчетЕдиногоПлатежаУдержанияОрганизаций.ВидРасчета ИНАЧЕ NULL КОНЕЦ КАК ВидСбора
	|		ИЗ
	|			Документ.РасчетЕдиногоПлатежа.Удержания КАК РасчетЕдиногоПлатежаУдержанияОрганизаций
	|
	|		ГДЕ
	|			РасчетЕдиногоПлатежаУдержанияОрганизаций.Ссылка.Проведен И
	|			(РасчетЕдиногоПлатежаУдержанияОрганизаций.ВидРасчета.СпособРасчета В (&СписокСпособовУдержанийПоИЛ) ИЛИ
	|			РасчетЕдиногоПлатежаУдержанияОрганизаций.ВидРасчета.СпособРасчета = &ПочтовыйСбор) И
	|			РасчетЕдиногоПлатежаУдержанияОрганизаций.Ссылка.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон И
	|			РасчетЕдиногоПлатежаУдержанияОрганизаций.ДокументОснование ССЫЛКА Документ.ИсполнительныйЛист И
	|			ВЫРАЗИТЬ(РасчетЕдиногоПлатежаУдержанияОрганизаций.ДокументОснование КАК Документ.ИсполнительныйЛист).СпособПеречисления = &СпособПеречисления И
	|			РасчетЕдиногоПлатежаУдержанияОрганизаций.Результат <> 0
    |       
    |       ОБЪЕДИНИТЬ ВСЕ
    |
    |		ВЫБРАТЬ
	|			УдержанияОрганизаций.Ссылка.Организация КАК Организация,
	|			УдержанияОрганизаций.ФизическоеЛицо КАК ФизЛицо,
	|			УдержанияОрганизаций.ДокументОснование.Получатель КАК Получатель,
	|			УдержанияОрганизаций.Сумма КАК СуммаПеревода,
	|			УдержанияОрганизаций.Сумма КАК СуммаУдержаний,
    |           0 КАК СуммаСбора,
    |           NULL КАК ВидСбора
	|		ИЗ
	|			Документ.ОтражениеЗарплатыВБухучете.УдержаннаяЗарплата КАК УдержанияОрганизаций
	|
	|		ГДЕ
	|			УдержанияОрганизаций.Ссылка.Проведен И
    |           УдержанияОрганизаций.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛисты), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛистыКонтрагенты)) И
	|			УдержанияОрганизаций.Ссылка.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон И
	|			УдержанияОрганизаций.ДокументОснование ССЫЛКА Документ.ИсполнительныйЛист И
	|			ВЫРАЗИТЬ(УдержанияОрганизаций.ДокументОснование КАК Документ.ИсполнительныйЛист).СпособПеречисления = &СпособПеречисления И
	|			УдержанияОрганизаций.Сумма <> 0
    |       
    |       ОБЪЕДИНИТЬ ВСЕ
    |
    |		ВЫБРАТЬ
	|			УдержанияОрганизаций.Ссылка.Организация КАК Организация,
	|			УдержанияОрганизаций.ФизическоеЛицо КАК ФизЛицо,
	|			УдержанияОрганизаций.ДокументОснование.Получатель КАК Получатель,
	|			УдержанияОрганизаций.Сумма КАК СуммаПеревода,
	|			0 КАК СуммаУдержаний,
    |           УдержанияОрганизаций.Сумма КАК СуммаСбора,
    |           NULL КАК ВидСбора
	|		ИЗ
	|			Документ.ОтражениеЗарплатыВБухучете.УдержаннаяЗарплата КАК УдержанияОрганизаций
	|
	|		ГДЕ
	|			УдержанияОрганизаций.Ссылка.Проведен И
    |           УдержанияОрганизаций.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгента), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгентаКонтрагенты)) И
	|			УдержанияОрганизаций.Ссылка.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон И
	|			УдержанияОрганизаций.ДокументОснование ССЫЛКА Документ.ИсполнительныйЛист И
	|			ВЫРАЗИТЬ(УдержанияОрганизаций.ДокументОснование КАК Документ.ИсполнительныйЛист).СпособПеречисления = &СпособПеречисления И
	|			УдержанияОрганизаций.Сумма <> 0) КАК Удержания
	|
	|	СГРУППИРОВАТЬ ПО
	|		Удержания.Организация,
	|		Удержания.Получатель) КАК УдержанияПоИЛ
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|	  ПО КонтактнаяИнформация.Объект = УдержанияПоИЛ.Получатель 
	|			И КонтактнаяИнформация.Тип = &Адрес 
	|			И КонтактнаяИнформация.Вид = &ФактическийАдрес
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаКон) КАК ОтветственныеЛицаРуководитель
	|		ПО ОтветственныеЛицаРуководитель.СтруктурнаяЕдиница = УдержанияПоИЛ.Организация
	|			И ОтветственныеЛицаРуководитель.ОтветственноеЛицо = &Руководитель
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаКон) КАК ФИОФизЛицРуководитель
	|		ПО ОтветственныеЛицаРуководитель.ФизическоеЛицо = ФИОФизЛицРуководитель.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаКон) КАК ОтветственныеЛицаГлавныйБухгалтер
	|		ПО ОтветственныеЛицаГлавныйБухгалтер.СтруктурнаяЕдиница = УдержанияПоИЛ.Организация
	|			И ОтветственныеЛицаГлавныйБухгалтер.ОтветственноеЛицо = &ГлавныйБухгалтер
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаКон) КАК ФИОФизЛицГлавныйБухгалтер
	|		ПО ОтветственныеЛицаГлавныйБухгалтер.ФизическоеЛицо = ФИОФизЛицГлавныйБухгалтер.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Исполнитель
	|		ПО Исполнитель.Ссылка = &Исполнитель
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							РаботникиОрганизаций.Сотрудник.ФизЛицо КАК ФизЛицо,
	|							РаботникиОрганизаций.Организация,
	|							МАКСИМУМ(ВЫБОР 
	|										КОГДА РаботникиОрганизаций.ПричинаИзмененияСостояния = &Уволен 
	|											ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Период, ДЕНЬ, -1)
	|										ИНАЧЕ РаботникиОрганизаций.Период
	|									 КОНЕЦ) КАК Период
	|						ИЗ
	|							РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|									&ДатаКон,
	|									Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство) КАК РаботникиОрганизаций
	|						СГРУППИРОВАТЬ ПО
	|							РаботникиОрганизаций.Сотрудник.ФизЛицо,
	|							РаботникиОрганизаций.Организация) КАК РаботникиОрганизацийСрезПоследних
	|		ПО Исполнитель.ФизЛицо = РаботникиОрганизацийСрезПоследних.Физлицо
	|			И РаботникиОрганизацийСрезПоследних.Организация = УдержанияПоИЛ.Организация
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО РаботникиОрганизацийСрезПоследних.ФизЛицо = РаботникиОрганизаций.Сотрудник.ФизЛицо
	|			И РаботникиОрганизацийСрезПоследних.Организация = РаботникиОрганизаций.Организация
	|			И РаботникиОрганизацийСрезПоследних.Период = ВЫБОР
	|															КОГДА РаботникиОрганизаций.ПричинаИзмененияСостояния = &Уволен
	|																ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Период, ДЕНЬ, -1)
	|															ИНАЧЕ РаботникиОрганизаций.Период
	|														 КОНЕЦ
	|			И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаКон) КАК ФИОФизЛицИсполнитель
	|		ПО Исполнитель.ФизЛицо = ФИОФизЛицИсполнитель.ФизЛицо
	|";
	
	ТекстУсловия = "";
	
	Если ОтборОрганизации Тогда
		
		Если ВидСравненияОрганизацииСтрокой = "=" ИЛИ
			ВидСравненияОрганизацииСтрокой = "<>" Тогда
			
			ТекстУсловия = ТекстУсловия + "
			|	УдержанияПоИЛ.Организация " + ВидСравненияОрганизацииСтрокой + " &Организация";
		Иначе
			ТекстУсловия = ТекстУсловия + "
			|	УдержанияПоИЛ.Организация " + ВидСравненияОрганизацииСтрокой + " (&Организация)";
		КонецЕсли;
		
	КонецЕсли;	

	Если ОтборВидаСбора Тогда
		
		Если НЕ ПустаяСтрока(ТекстУсловия) Тогда
			ТекстУсловия = ТекстУсловия + "
			|	И ";
		КонецЕсли;
		
		Если ВидСравненияВидаСбораСтрокой = "=" ИЛИ
			ВидСравненияВидаСбораСтрокой = "<>" Тогда
			
			ТекстУсловия = ТекстУсловия + "	УдержанияПоИЛ.ВидСбора " + ВидСравненияВидаСбораСтрокой + " &ВидСбора";
		Иначе
			ТекстУсловия = ТекстУсловия + " УдержанияПоИЛ.ВидСбора " + ВидСравненияВидаСбораСтрокой + " (&ВидСбора)";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтборБанка Тогда

		Если НЕ ПустаяСтрока(ТекстУсловия) Тогда
			ТекстУсловия = ТекстУсловия + "
			|	И ";
		КонецЕсли;
		
		Если ВидСравненияБанкаСтрокой = "=" ИЛИ
			ВидСравненияБанкаСтрокой = "<>" Тогда
			
			ТекстУсловия = ТекстУсловия + " УдержанияПоИЛ.БанкПолучателя " + ВидСравненияБанкаСтрокой + " &Банк";
		Иначе
			ТекстУсловия = ТекстУсловия + " УдержанияПоИЛ.БанкПолучателя " + ВидСравненияБанкаСтрокой + " (&Банк)";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстУсловия) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	" + ТекстУсловия;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Получатель.Наименование
	|
	|ИТОГИ 
	|	СУММА(СуммаПеревода), 
	|	СУММА(СуммаУдержаний),
	|	СУММА(СуммаСбора),
	|	МАКСИМУМ(ФИОРуководителя),
	|	МАКСИМУМ(ДолжностьРуководителя),
	|	МАКСИМУМ(ФИОГлавногоБухгалтера),
	|	МАКСИМУМ(ДолжностьГлавногоБухгалтера),
	|	МАКСИМУМ(ФИОИсполнителя),
	|	МАКСИМУМ(ДолжностьИсполнителя)
	|ПО
	|	Организация";

	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();	
	
КонецФункции // СформироватьЗапрос()

Процедура СформироватьСпискиУдержаний(ТабличныйДокумент, ПараметрыОтчета)
	
	СпособПеречисления = ПараметрыОтчета.СпособПеречисления;
	ВидСбора = ПараметрыОтчета.СписокВидовСбора;
	
	Если СпособПеречисления = Перечисления.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезКассу Тогда
		Макет = ПолучитьМакет("ПлатежнаяВедомость");
	ИначеЕсли СпособПеречисления = Перечисления.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезБанк Тогда
		Макет = ПолучитьМакет("ПеречислениеСписком");
	Иначе
		Макет = ПолучитьМакет("ПочтовыйПеревод");
	КонецЕсли;
	
	ЕстьСборы = Ложь;
	ВидСбораТекст = "";
		
	ОбластьШапка  = Макет.ПолучитьОбласть("Шапка");
	
	Если СпособПеречисления <> Перечисления.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезКассу 
			И ЗначениеЗаполнено(ВидСбора) Тогда
		ЕстьСборы = Истина;
		ОбластьВидСбора = Макет.ПолучитьОбласть("ВидСбора");
		
		// составим строку с описанием видов сбора
		Если ТипЗнч(ВидСбора) = Тип("СписокЗначений") Тогда
			Для Каждого ЭлементСписка Из ВидСбора Цикл
				Если Не ПустаяСтрока(ВидСбораТекст) Тогда
					ВидСбораТекст = ВидСбораТекст + ", ";
				КонецЕсли;
				ВидСбораТекст = ВидСбораТекст + ЭлементСписка.Значение.Наименование;
			КонецЦикла;
		Иначе
			ВидСбораТекст = ВидСбора.Наименование;
		КонецЕсли;
		
		Если ПараметрыОтчета.ВидСравненияВидаСбора = ВидСравнения.НеРавно Тогда
			ВидСбораТекст = НСтр("ru='Вид сбора отличен от '") + ВидСбораТекст;
		ИначеЕсли ПараметрыОтчета.ВидСравненияВидаСбора = ВидСравнения.НеВСписке Тогда
			ВидСбораТекст = НСтр("ru='Вид сбора не в '") + ВидСбораТекст;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбластьШапкаЛиста = Макет.ПолучитьОбласть("ШапкаЛиста");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьЛиния  = Макет.ПолучитьОбласть("Линия");
	ОбластьИтогПоСтранице = Макет.ПолучитьОбласть("ИтогПоСтранице");
	
	// массив с тремя строками - для разбиения на страницы
    ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьСтрока);
	ВыводимыеОбласти.Добавить(ОбластьИтогПоСтранице);
	
	РезультатЗапроса = СформироватьЗапрос(ПараметрыОтчета);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураИтогов = Новый Структура("СуммаУдержаний,СуммаСбора,СуммаПеревода");

	ВыборкаПоОрганизации = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизации.Следующий() Цикл
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.Вывести(ОбластьЛиния);
		КонецЕсли;
		
		ОбластьШапка.Параметры.НазваниеОрганизации = ВыборкаПоОрганизации.НазваниеОрганизации;
		ТекстПериода = ПолноеОписаниеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода, Ложь);
		ОбластьШапка.Параметры.Период = НСтр("ru='Период: '") + ТекстПериода + НСтр("ru=' г.'");
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		Если ЕстьСборы Тогда
			ОбластьВидСбора.Параметры.ВидСбора = ВидСбораТекст;
			ТабличныйДокумент.Вывести(ОбластьВидСбора);
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьШапкаЛиста);
				
		ЗаполнитьПараметрыОбласти(ВыборкаПоОрганизации, ОбластьПодвал, Ложь, СпособПеречисления);

		НомерСтроки = 1; СуммаУдержаний = 0; СуммаСбора = 0; СуммаПеревода = 0;
		ВыборкаПоПолучателям = ВыборкаПоОрганизации.Выбрать();
		
		// подсчитываем количество строк - для корректного разбиения на страницы
		ВсегоСтрокДокумента = ВыборкаПоПолучателям.Количество();
		
		Пока ВыборкаПоПолучателям.Следующий() Цикл
			
			ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
			ЗаполнитьПараметрыОбласти(ВыборкаПоПолучателям, ОбластьСтрока, Истина, СпособПеречисления);
			
			// Проверим, уместится ли строка на странице или надо открывать новую страницу
			ВывестиПодвалЛиста = Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ВыводимыеОбласти);
			Если Не ВывестиПодвалЛиста и НомерСтроки = ВсегоСтрокДокумента Тогда
				ВыводимыеОбласти.Добавить(ОбластьПодвал);
				ВывестиПодвалЛиста = Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ВыводимыеОбласти);
			КонецЕсли;
			Если ВывестиПодвалЛиста Тогда
				СтруктураИтогов.СуммаУдержаний = СуммаУдержаний;
				СтруктураИтогов.СуммаСбора = СуммаСбора;
				СтруктураИтогов.СуммаПеревода = СуммаПеревода;
				ЗаполнитьПараметрыОбласти(СтруктураИтогов, ОбластьИтогПоСтранице, Ложь, СпособПеречисления);
				
				ТабличныйДокумент.Вывести(ОбластьИтогПоСтранице);
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьШапкаЛиста);
				
				СуммаУдержаний = 0; СуммаПочтовогоСбора = 0; СуммаПеревода = 0;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			НомерСтроки = НомерСтроки + 1;
			
			СуммаУдержаний 	= СуммаУдержаний + ВыборкаПоПолучателям.СуммаУдержаний;
			СуммаСбора 		= СуммаСбора + ВыборкаПоПолучателям.СуммаСбора;
			СуммаПеревода 	= СуммаПеревода + ВыборкаПоПолучателям.СуммаПеревода;
			
		КонецЦикла; 
		
		КолСтраниц = 0;
		
		Попытка
		  КолСтраниц = ТабличныйДокумент.КоличествоСтраниц();  			
		Исключение
		  КолСтраниц = 0;
		КонецПопытки;
		
		Если КолСтраниц > 1 Тогда
			СтруктураИтогов.СуммаУдержаний = СуммаУдержаний;
			СтруктураИтогов.СуммаСбора = СуммаСбора;
			СтруктураИтогов.СуммаПеревода = СуммаПеревода;
			ЗаполнитьПараметрыОбласти(СтруктураИтогов, ОбластьИтогПоСтранице, Ложь, СпособПеречисления);
			ТабличныйДокумент.Вывести(ОбластьИтогПоСтранице);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыОбласти(Выборка, Область, ДетальнаяСтрока, СпособПеречисления)
	
	Если ДетальнаяСтрока Тогда
		Если ЗначениеЗаполнено(Выборка.ПолноеНаименованиеПолучателя) Тогда
			НаименованиеПолучателя = Выборка.ПолноеНаименованиеПолучателя;
		Иначе
			НаименованиеПолучателя = Выборка.НаименованиеПолучателя;
		КонецЕсли;
	КонецЕсли;
	
	Если СпособПеречисления = Перечисления.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезКассу Тогда
		Если ДетальнаяСтрока Тогда
			Область.Параметры.НаименованиеПолучателя = НаименованиеПолучателя;
		КонецЕсли;
		
		Область.Параметры.СуммаУдержаний	  = Выборка.СуммаУдержаний;
		
	ИначеЕсли СпособПеречисления = Перечисления.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезБанк Тогда
		Если ДетальнаяСтрока Тогда
			Область.Параметры.НаименованиеПолучателя   = НаименованиеПолучателя;
			Если НЕ ПустаяСтрока(Выборка.БанковскийСчетПолучателя) Тогда
				Область.Параметры.БанковскийСчетПолучателя = "" + Выборка.БанковскийСчетПолучателя + НСтр("ru=' в '") + Выборка.НаименованиеБанкаПолучателя;
			Иначе
				Область.Параметры.БанковскийСчетПолучателя = "";
			КонецЕсли;
		КонецЕсли;
		
		Область.Параметры.СуммаУдержаний	  = Выборка.СуммаУдержаний;
		Область.Параметры.СуммаСбора		  = Выборка.СуммаСбора;
		Область.Параметры.СуммаПеревода		  = Выборка.СуммаПеревода;
		
	Иначе	
		Если ДетальнаяСтрока Тогда
			Область.Параметры.НаименованиеПолучателя = НаименованиеПолучателя;
			Область.Параметры.АдресПолучателя		 = Выборка.АдресПолучателя;
		КонецЕсли;
		
		Область.Параметры.СуммаУдержаний	  = Выборка.СуммаУдержаний;
		Область.Параметры.СуммаСбора 		  = Выборка.СуммаСбора;
		Область.Параметры.СуммаПеревода		  = Выборка.СуммаПеревода;
		
	КонецЕсли;
	
	Если Не ДетальнаяСтрока Тогда
		Область.Параметры.Заполнить(Выборка);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолноеОписаниеПериода(ДатаНачала, ДатаОкончания, СДатами = Истина)
	
	ЧислоНачала		= День(ДатаНачала);
	ЧислоОкончания	= День(ДатаОкончания);
	ОписаниеМесяцаГода = Формат(ДатаНачала,   "ДФ = 'MMMM'") + " "+ Формат(ДатаНачала,    "ДФ = 'гггг'");
	ОписаниеМесяца2    = Формат(ДатаОкончания,"ДФ = 'MMMM'") + " "+ Формат(ДатаОкончания, "ДФ = 'гггг'");
	
	Если НачалоМесяца(ДатаНачала) <> НачалоМесяца(ДатаОкончания) Тогда  
		
		Если (НачалоДня(ДатаНачала) = НачалоМесяца(ДатаНачала)) Тогда
			Перваяполовинадат = "" + ОписаниеМесяцаГода;
		Иначе
			Перваяполовинадат = ?(СДатами, "" + ЧислоНачала, "") + " " + ОписаниеМесяцаГода; 
		КонецЕсли;
		
		Если (КонецДня(ДатаОкончания) = КонецМесяца(ДатаОкончания)) Тогда
			ВтораяПоловинаДат = ОписаниеМесяца2 ;
		Иначе
			ВтораяПоловинаДат = ?(СДатами, "" + ЧислоОкончания, "") + " " + ОписаниеМесяца2;
		КонецЕсли;
		
		Возврат Перваяполовинадат + "-" + ВтораяПоловинаДат;
		
	Иначе
		
		Если (НачалоДня(ДатаНачала) = НачалоМесяца(ДатаНачала)) И (КонецДня(ДатаОкончания) = КонецМесяца(ДатаОкончания)) Тогда
			Возврат ОписаниеМесяцаГода;
		ИначеЕсли ЧислоНачала = ЧислоОкончания Тогда
			Возврат ?(СДатами, "" + ЧислоНачала, "") + " " + ОписаниеМесяцаГода;
		Иначе
			Возврат ?(СДатами ,"" + ЧислоНачала + "-" + ЧислоОкончания, "") + " " + ОписаниеМесяцаГода;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции	// ПолноеОписаниеПериода 

#КонецЕсли