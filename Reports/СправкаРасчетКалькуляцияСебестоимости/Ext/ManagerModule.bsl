#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура СформироватьОтчет(Знач ПараметрыОтчета, АдресХранилища) Экспорт
	
	Результат = Новый ТабличныйДокумент;
	
	СформироватьСправкуРасчет(Результат, ПараметрыОтчета);
	
	ПоместитьВоВременноеХранилище(Новый Структура("Результат", Результат), АдресХранилища);
	
КонецПроцедуры

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки",
							Истина, Истина, Ложь);
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт
	
	ЗаголовокОтчета = НСтр("ru = 'Справка-расчет калькуляции себестоимости продукции %1'") + " (" + ПараметрыОтчета.НазваниеНабораПоказателейОтчета + ")";
	ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ЗаголовокОтчета, БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			?(ПараметрыОтчета.СНачалаГода,НачалоГода(ПараметрыОтчета.НачалоПериода),ПараметрыОтчета.НачалоПериода), ПараметрыОтчета.КонецПериода));
	
	Возврат ЗаголовокОтчета;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", ?(ПараметрыОтчета.СначалаГода, НачалоГода(ПараметрыОтчета.НачалоПериода), НачалоДня(ПараметрыОтчета.НачалоПериода)));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода" , КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВариантОтчета", ПараметрыОтчета.ВариантОтчета);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидУчетаНУ"   , Справочники.ВидыУчетаНУ.НУ);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидУчетаПР"   , Справочники.ВидыУчетаНУ.ПР);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидУчетаВР"   , Справочники.ВидыУчетаНУ.ВР);
	
	ГруппировкаОрганизация        = НайтиПоИмени(КомпоновщикНастроек.Настройки.Структура, "Организация");
	ГруппировкаОрганизацияРазницы = НайтиПоИмени(КомпоновщикНастроек.Настройки.Структура, "ОрганизацияСРазницами");
	
	Если ПараметрыОтчета.ВариантОтчета = 1 Тогда
		Если ГруппировкаОрганизацияРазницы <> Неопределено Тогда
			КомпоновщикНастроек.Настройки.Структура.Удалить(ГруппировкаОрганизацияРазницы);
		КонецЕсли;
	Иначе
		Если ГруппировкаОрганизация <> Неопределено Тогда
			КомпоновщикНастроек.Настройки.Структура.Удалить(ГруппировкаОрганизация);
		КонецЕсли;
	КонецЕсли;
	
	БухгалтерскиеОтчеты.ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, ПараметрыОтчета);
	
	ПараметрыОтчета.Вставить("ПрерватьВывод", Истина);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СформироватьСправкуРасчет(Результат, ПараметрыОтчета)
	
	Схема     = ПараметрыОтчета.СхемаКомпоновкиДанных;
	Настройки = ПараметрыОтчета.НастройкиКомпоновкиДанных;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	
	ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек);
	
	КомпоновщикМакета   = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки     = КомпоновщикМакета.Выполнить(Схема,
		КомпоновщикНастроек.Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, Неопределено, Истина);
	ПроцессорВывода     = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ДанныеОтчета = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если ПараметрыОтчета.ГруппироватьОтчет Тогда
		Результат.НачатьАвтогруппировкуСтрок();
	КонецЕсли;
	
	ВывестиМакетыДанных(Результат, ПараметрыОтчета, ДанныеОтчета.Строки);
	
	ПослеВыводаРезультата(ПараметрыОтчета, Результат);
	
КонецПроцедуры

Процедура ВывестиМакетыДанных(Результат, ПараметрыОтчета, СтрокиДереваДанных)
	
	//Иерархия группировок:
	//	Организация
	//   	СтруктурноеПодразделение (Подразделение)
	//   		ПодразделениеВыпуска
	//   			НоменклатурнаяГруппа
	//   				Номенклатура
	//   					ПрямыеЗатраты
	//   						СчетПрямыхЗатрат
	//   							НоменклатураПрямыхЗатрат
	//   					КосвенныеЗатраты
	
	ВариантОтчета = ПараметрыОтчета.ВариантОтчета;
	 
 	Макет = ПолучитьМакет("Отчет");
	
	Если ПараметрыОтчета.ВыводитьЗаголовок Тогда
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ОбластьЗаголовок");
		
		ТекстОрганизация = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ПараметрыОтчета.СписокСтруктурныхЕдиниц);
		ОбластьЗаголовок.Параметры.НазваниеОрганизации = ТекстОрганизация;
		ОбластьЗаголовок.Параметры.ЗаголовокОтчета     = ПолучитьТекстЗаголовка(ПараметрыОтчета);
		
		Результат.Вывести(ОбластьЗаголовок);
		
	КонецЕсли;
	
	ОбластьОрганизация = Макет.ПолучитьОбласть("Организация");
	
	Области = Новый Структура;
	
	Области.Вставить("ОбластьШапка",                   Макет.ПолучитьОбласть("Шапка|Основная"));
	Области.Вставить("ОбластьШапкаСПР",                Макет.ПолучитьОбласть("ШапкаРазницы|Основная"));
	Области.Вставить("ОбластьШапкаОкончание",          Макет.ПолучитьОбласть("Шапка|Окончание"));
	Области.Вставить("ОбластьШапкаСПРОкончание",       Макет.ПолучитьОбласть("ШапкаРазницы|Окончание"));
	Области.Вставить("ОбластьШапкаРазницы",            Макет.ПолучитьОбласть("Шапка|Разницы"));
	Области.Вставить("ОбластьШапкаСПРРазницы",         Макет.ПолучитьОбласть("ШапкаРазницы|Разницы"));
	Области.Вставить("ОбластьШапкаПрямые",             Макет.ПолучитьОбласть("ШапкаПрямые|Основная"));
	Области.Вставить("ОбластьШапкаКосвенные",          Макет.ПолучитьОбласть("ШапкаКосвенные|Основная"));
	Области.Вставить("ОбластьШапкаПрямыеРазницы",      Макет.ПолучитьОбласть("ШапкаПрямые|Разницы"));
	Области.Вставить("ОбластьШапкаКосвенныеРазницы",   Макет.ПолучитьОбласть("ШапкаКосвенные|Разницы"));
	Области.Вставить("ОбластьШапкаПрямыеОкончание",    Макет.ПолучитьОбласть("ШапкаПрямые|Окончание"));
	Области.Вставить("ОбластьШапкаКосвенныеОкончание", Макет.ПолучитьОбласть("ШапкаКосвенные|Окончание"));
	
	Области.Вставить("ОбластьИтогоПрямые",             Макет.ПолучитьОбласть("ИтогоПрямые|Основная"));
	Области.Вставить("ОбластьИтогоКосвенные",          Макет.ПолучитьОбласть("ИтогоКосвенные|Основная"));
	Области.Вставить("ОбластьИтогоПрямыеОкончание",    Макет.ПолучитьОбласть("ИтогоПрямые|Окончание"));
	Области.Вставить("ОбластьИтогоКосвенныеОкончание", Макет.ПолучитьОбласть("ИтогоКосвенные|Окончание"));
	Области.Вставить("ОбластьИтогоПрямыеРазницы",      Макет.ПолучитьОбласть("ИтогоПрямые|Разницы"));
	Области.Вставить("ОбластьИтогоКосвенныеРазницы",   Макет.ПолучитьОбласть("ИтогоКосвенные|Разницы"));
	
	Области.Вставить("ОбластьСтрокаЗатрат",          Макет.ПолучитьОбласть("СтрокаЗатрат|Основная"));
	Области.Вставить("ОбластьСтрокаЗатратРазницы",   Макет.ПолучитьОбласть("СтрокаЗатрат|Разницы"));
	Области.Вставить("ОбластьСтрокаЗатратОкончание", Макет.ПолучитьОбласть("СтрокаЗатрат|Окончание"));
	
	Области.Вставить("ОбластьСчетЗатрат",          Макет.ПолучитьОбласть("СчетЗатрат|Основная"));
	Области.Вставить("ОбластьСчетЗатратОкончание", Макет.ПолучитьОбласть("СчетЗатрат|Окончание"));
	Области.Вставить("ОбластьСчетЗатратРазницы",   Макет.ПолучитьОбласть("СчетЗатрат|Разницы"));
	
	Области.Вставить("ОбластьНоменклатураЗатрат",          Макет.ПолучитьОбласть("СтрокаНоменклатурыЗатрат|Основная"));
	Области.Вставить("ОбластьНоменклатураЗатратОкончание", Макет.ПолучитьОбласть("СтрокаНоменклатурыЗатрат|Окончание"));
	Области.Вставить("ОбластьНоменклатураЗатратРазницы",   Макет.ПолучитьОбласть("СтрокаНоменклатурыЗатрат|Разницы"));
	
	Области.Вставить("ОбластьОкончаниеТаблицы",          Макет.ПолучитьОбласть("ОкончаниеТаблицы|Основная"));
	Области.Вставить("ОбластьОкончаниеТаблицыРазницы",   Макет.ПолучитьОбласть("ОкончаниеТаблицы|Разницы"));
	Области.Вставить("ОбластьОкончаниеТаблицыОкончание", Макет.ПолучитьОбласть("ОкончаниеТаблицы|Окончание"));
	
	Области.Вставить("ОбластьНЗПНач",            Макет.ПолучитьОбласть("НЗПНач|Основная"));
	Области.Вставить("ОбластьНЗПКон",            Макет.ПолучитьОбласть("НЗПКон|Основная"));
	Области.Вставить("ОбластьНЗПИтого",          Макет.ПолучитьОбласть("НЗПИтого|Основная"));
	Области.Вставить("ОбластьНЗПНачОкончание",   Макет.ПолучитьОбласть("НЗПНач|Окончание"));
	Области.Вставить("ОбластьНЗПКонОкончание",   Макет.ПолучитьОбласть("НЗПКон|Окончание"));
	Области.Вставить("ОбластьНЗПИтогоОкончание", Макет.ПолучитьОбласть("НЗПИтого|Окончание"));
	Области.Вставить("ОбластьНЗПНачРазницы",     Макет.ПолучитьОбласть("НЗПНач|Разницы"));
	Области.Вставить("ОбластьНЗПКонРазницы",     Макет.ПолучитьОбласть("НЗПКон|Разницы"));
	Области.Вставить("ОбластьНЗПИтогоРазницы",   Макет.ПолучитьОбласть("НЗПИтого|Разницы"));
	
	Области.Вставить("ПостояннаяРазница", "Постоянные
	                                      |разницы");
	Области.Вставить("ВременнаяРазница", "Временные
	                                     |разницы");
										 
	Постфикс = ?(ВариантОтчета = 1, "", "НУ");
	Области.Вставить("Постфикс", Постфикс);
	
	Для Каждого СтрокаОрганизация Из СтрокиДереваДанных Цикл
		Если СтрокаОрганизация["Организация" + Постфикс] <> Неопределено  Тогда
			
			ОбластьОрганизация.Параметры.Организация = ?(ЗначениеЗаполнено(СтрокаОрганизация["Организация" + Постфикс].НаименованиеПолное),
			                                             СтрокаОрганизация["Организация" + Постфикс].НаименованиеПолное,
														 СтрокаОрганизация["Организация" + Постфикс].Наименование);
			Результат.Вывести(ОбластьОрганизация);
			
			Если ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями") Тогда
				Для Каждого СтрокаСтруктурноеПодразделение Из СтрокаОрганизация.Строки Цикл
					Если СтрокаСтруктурноеПодразделение["Подразделение" + Постфикс] <> Неопределено  Тогда
						ВывестиПодразделенияВыпуска(Результат, ПараметрыОтчета, СтрокаСтруктурноеПодразделение.Строки, Области);
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ВывестиПодразделенияВыпуска(Результат, ПараметрыОтчета, СтрокаОрганизация.Строки, Области);
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыОтчета.ВыводитьПодписи Тогда
		
		ТекстПримечание = ?(ПараметрыОтчета.ВариантОтчета = 3, НСтр("ru = 'Постоянные разницы: Постоянные разницы в оценке стоимости активов и обязательств.
		                                                                  |Временные разницы:  Временные разницы в оценке стоимости активов и обязательств.'"), "");
																		  
		Если ПараметрыОтчета.ВыводитьПодписиРуководителей Тогда
		    ПараметрыОтчета.Вставить("ПримечаниеПодписиРуководителей", ТекстПримечание);
		Иначе
		    ПараметрыОтчета.Вставить("ПримечаниеПодписи", ТекстПримечание);
		КонецЕСли;
		
		БухгалтерскиеОтчетыВызовСервера.ВыводПодписейОтчета(ПараметрыОтчета, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиПодразделенияВыпуска(Результат, ПараметрыОтчета, СтрокиДереваДанных, Области)
	
	ВариантОтчета = ПараметрыОтчета.ВариантОтчета;
	 
	Постфикс = Области.Постфикс;
	
	Для Каждого СтрокаПодразделениеВыпуска Из СтрокиДереваДанных Цикл
		Если СтрокаПодразделениеВыпуска["ПодразделениеВыпуска" + Постфикс] <> Неопределено  Тогда
			
			Для Каждого СтрокаНоменклатурнаяГруппа Из СтрокаПодразделениеВыпуска.Строки Цикл
				
				ВсегоВыпуск   = СтрокаНоменклатурнаяГруппа["Сумма" + Постфикс];
				ВсегоВыпускПР = ?(ВариантОтчета = 3, СтрокаНоменклатурнаяГруппа.СуммаПР, 0);
				ВсегоВыпускВР = ?(ВариантОтчета = 3, СтрокаНоменклатурнаяГруппа.СуммаВР, 0);
				Если ВсегоВыпуск = 0 И ВсегоВыпускПР = 0 И ВсегоВыпускВР = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого СтрокаНоменклатура Из СтрокаНоменклатурнаяГруппа.Строки Цикл
						
					Если НЕ ЗначениеЗаполнено(СтрокаНоменклатура["Номенклатура" + Постфикс]) Тогда
						Продолжить;
					КонецЕсли;
					
					СуммаВыпуска   = СтрокаНоменклатура["Сумма" + Постфикс];
					СуммаВыпускаПР = ?(ВариантОтчета = 3, СтрокаНоменклатура.СуммаПР, 0);
					СуммаВыпускаВР = ?(ВариантОтчета = 3, СтрокаНоменклатура.СуммаВР, 0);
					
					Если СуммаВыпуска = 0 И СуммаВыпускаПР = 0 И СуммаВыпускаВР = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Коэффициент   = СтрокаНоменклатура["Коэффициент" + Постфикс];
					КоэффициентПР = ?(ВариантОтчета = 3, СтрокаНоменклатура.КоэффициентПР, 0);
					КоэффициентВР = ?(ВариантОтчета = 3, СтрокаНоменклатура.КоэффициентВР, 0);
										
					Области.ОбластьШапка.Параметры.НоменклатураВыпуска  = ВыводНаименованияВыпуска(СтрокаНоменклатура["Номенклатура" + Постфикс]);
					Области.ОбластьШапка.Параметры.АналитикаВыпуска     = "" + СтрокаНоменклатура["ПодразделениеВыпуска" + Постфикс] + " / " + СтрокаНоменклатура["НоменклатурнаяГруппа" + Постфикс];
					
					Области.ОбластьШапка.Параметры.КоличествоВыпуска    = СтрокаНоменклатура["Количество" + Постфикс];
					Области.ОбластьШапка.Параметры.СуммаВыпуска         = ?(СтрокаНоменклатура["Количество" + Постфикс] = 0, 0, СтрокаНоменклатура["Сумма" + Постфикс]);
					Области.ОбластьШапка.Параметры.ЦенаВыпуска          = ?(СтрокаНоменклатура["Количество" + Постфикс] = 0, СтрокаНоменклатура["Сумма" + Постфикс], СтрокаНоменклатура["Сумма" + Постфикс] / СтрокаНоменклатура["Количество" + Постфикс]);
					Области.ОбластьШапка.Параметры.ТекстКоличество      = ?(СтрокаНоменклатура["Количество" + Постфикс] = 0, "", НСтр("ru = 'Количество выпуска:'"));
					Области.ОбластьШапка.Параметры.ТекстСумма           = ?(СтрокаНоменклатура["Количество" + Постфикс] = 0, "", НСтр("ru = 'Фактическая стоимость выпуска:'"));
					Области.ОбластьШапка.Параметры.СебестоимостьЕдиницы = НСтр("ru = 'Себестоимость ед.'");
					
					Если ВариантОтчета  = 3 И СуммаВыпускаПР <> 0 Тогда
						Области.ОбластьШапкаСПР.Параметры.КоличествоВыпуска    = СтрокаНоменклатура.КоличествоПР;
						Области.ОбластьШапкаСПР.Параметры.СуммаВыпуска         = ?(СтрокаНоменклатура.КоличествоПР = 0, 0, СтрокаНоменклатура.СуммаПР);
						Области.ОбластьШапкаСПР.Параметры.ЦенаВыпуска          = ?(СтрокаНоменклатура.КоличествоПР = 0, СтрокаНоменклатура.СуммаПР, СтрокаНоменклатура.СуммаПР / СтрокаНоменклатура.КоличествоПР);
						Области.ОбластьШапкаСПР.Параметры.ТекстКоличество      = ?(СтрокаНоменклатура.КоличествоПР = 0, "", НСтр("ru = 'Количество выпуска(ПР):'"));
						Области.ОбластьШапкаСПР.Параметры.ТекстСумма           = ?(СтрокаНоменклатура.КоличествоПР = 0, "", НСтр("ru = 'Фактическая стоимость выпуска(ПР):'"));
						Области.ОбластьШапкаСПР.Параметры.СебестоимостьЕдиницы = НСтр("ru = 'Себестоимость ед.(ПР)'");
					КонецЕсли;

	                ВывестиОбласть(Результат, Области.ОбластьШапка, Области.ОбластьШапкаРазницы, Области.ОбластьШапкаОкончание, 1, "Группа1", Ложь, "Сумма", СтрокаНоменклатура,,, ВариантОтчета);
					Если ВариантОтчета = 3 И СуммаВыпускаПР <> 0 Тогда
						ВывестиОбласть(Результат, Области.ОбластьШапкаСПР, Области.ОбластьШапкаСПРРазницы, Области.ОбластьШапкаСПРОкончание, 1, "Группа1", Ложь, "Текст", СтрокаНоменклатура, "", "", ВариантОтчета);
					КонецЕсли;
					
	                ВывестиОбласть(Результат, Области.ОбластьШапкаПрямые, Области.ОбластьШапкаПрямыеРазницы, Области.ОбластьШапкаПрямыеОкончание, 2, "Группа2", Ложь, "Текст", СтрокаНоменклатура, Области.ПостояннаяРазница, Области.ВременнаяРазница, ВариантОтчета);
					
					ИтогоСуммаПрямыхЗатрат   = 0;
					ИтогоСуммаПрямыхЗатратПР = 0;
					ИтогоСуммаПрямыхЗатратВР = 0;
					Для Каждого СтрокаПрямыеЗатраты Из СтрокаНоменклатура.Строки Цикл
						Если СтрокаПрямыеЗатраты["ПрямыеЗатраты" + Постфикс] <> Неопределено  Тогда
							
							Если СтрокаПрямыеЗатраты["СуммаПрямыхЗатрат" + Постфикс] = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							СуммаПрямыхЗатрат   = 0;
							СуммаПрямыхЗатратПР = 0;
				        	СуммаПрямыхЗатратВР = 0;
							Для Каждого СтрокаСчетПрямыхЗатрат Из СтрокаПрямыеЗатраты.Строки Цикл
								Если СтрокаСчетПрямыхЗатрат["КорСчетПрямыхЗатрат" + Постфикс] <> Неопределено  Тогда
									
									Если СтрокаСчетПрямыхЗатрат["СуммаПрямыхЗатрат" + Постфикс] = 0 Тогда
										Продолжить;
									КонецЕсли;
									
									Для Каждого СтрокаНоменклатураПрямыхЗатрат Из СтрокаСчетПрямыхЗатрат.Строки Цикл
										Если СтрокаНоменклатураПрямыхЗатрат["НоменклатураПрямыхЗатрат" + Постфикс] <> Неопределено  Тогда
											
											Если СтрокаНоменклатураПрямыхЗатрат["СуммаПрямыхЗатрат" + Постфикс] = 0 Тогда
												Продолжить;
											КонецЕсли;
											
											СуммаПрямыхЗатрат   = СуммаПрямыхЗатрат + СтрокаНоменклатураПрямыхЗатрат["СуммаПрямыхЗатрат" + Постфикс] * Коэффициент;
											СуммаПрямыхЗатратПР = СуммаПрямыхЗатратПР + ?(ВариантОтчета = 3, СтрокаНоменклатураПрямыхЗатрат.СуммаПрямыхЗатратПР * КоэффициентПР, 0);
								        	СуммаПрямыхЗатратВР = СуммаПрямыхЗатратВР + ?(ВариантОтчета = 3, СтрокаНоменклатураПрямыхЗатрат.СуммаПрямыхЗатратВР * КоэффициентВР, 0);
											
											ИтогоСуммаПрямыхЗатрат   = ИтогоСуммаПрямыхЗатрат   + СтрокаНоменклатураПрямыхЗатрат["СуммаПрямыхЗатрат" + Постфикс] * Коэффициент;
											ИтогоСуммаПрямыхЗатратПР = ИтогоСуммаПрямыхЗатратПР + ?(ВариантОтчета = 3, СтрокаНоменклатураПрямыхЗатрат.СуммаПрямыхЗатратПР * КоэффициентПР, 0);
											ИтогоСуммаПрямыхЗатратВР = ИтогоСуммаПрямыхЗатратВР + ?(ВариантОтчета = 3, СтрокаНоменклатураПрямыхЗатрат.СуммаПрямыхЗатратВР * КоэффициентВР, 0);;
									
										КонецЕсли;
									КонецЦикла;
							
								КонецЕсли;
							КонецЦикла;
							
							Области.ОбластьСтрокаЗатрат.Параметры.НаименованиеЗатрат = СтрокаПрямыеЗатраты["ПрямыеЗатраты" + Постфикс];
							Области.ОбластьСтрокаЗатрат.Параметры.СуммаЗатрат = СуммаПрямыхЗатрат;
		                    ВывестиОбласть(Результат, Области.ОбластьСтрокаЗатрат, Области.ОбластьСтрокаЗатратРазницы, Области.ОбластьСтрокаЗатратОкончание, 2, "Группа2", Ложь, "СуммаЗатрат", СтрокаПрямыеЗатраты, СуммаПрямыхЗатратПР, СуммаПрямыхЗатратВР, ВариантОтчета);
							
							Для Каждого СтрокаСчетПрямыхЗатрат Из СтрокаПрямыеЗатраты.Строки Цикл
								Если СтрокаСчетПрямыхЗатрат["КорСчетПрямыхЗатрат" + Постфикс] <> Неопределено  Тогда
									
									Если СтрокаСчетПрямыхЗатрат["СуммаПрямыхЗатрат" + Постфикс] = 0 Тогда
										Продолжить;
									КонецЕсли;
									
									СуммаПрямыхЗатратПоСчету   = 0;
									СуммаПрямыхЗатратПРПоСчету = 0;
						        	СуммаПрямыхЗатратВРПоСчету = 0;
									Для Каждого СтрокаНоменклатураПрямыхЗатрат Из СтрокаСчетПрямыхЗатрат.Строки Цикл
										Если СтрокаНоменклатураПрямыхЗатрат["НоменклатураПрямыхЗатрат" + Постфикс] <> Неопределено  Тогда
											
											Если СтрокаНоменклатураПрямыхЗатрат["СуммаПрямыхЗатрат" + Постфикс] = 0 Тогда
												Продолжить;
											КонецЕсли;
											
											СуммаПрямыхЗатратПоСчету   = СуммаПрямыхЗатратПоСчету + СтрокаНоменклатураПрямыхЗатрат["СуммаПрямыхЗатрат" + Постфикс] * Коэффициент;
											СуммаПрямыхЗатратПРПоСчету = СуммаПрямыхЗатратПРПоСчету + ?(ВариантОтчета = 3, СтрокаНоменклатураПрямыхЗатрат.СуммаПрямыхЗатратПР * КоэффициентПР, 0);
								        	СуммаПрямыхЗатратВРПоСчету = СуммаПрямыхЗатратПРПоСчету + ?(ВариантОтчета = 3, СтрокаНоменклатураПрямыхЗатрат.СуммаПрямыхЗатратПР * КоэффициентПР, 0);
									
										КонецЕсли;
									КонецЦикла;
									
									Области.ОбластьСчетЗатрат.Параметры.НаименованиеСчетаЗатрат = СтрокаСчетПрямыхЗатрат["КорСчетПрямыхЗатрат" + Постфикс];
									Области.ОбластьСчетЗатрат.Параметры.СуммаСчетаЗатрат = СуммаПрямыхЗатратПоСчету;
			                        ВывестиОбласть(Результат, Области.ОбластьСчетЗатрат, Области.ОбластьСчетЗатратРазницы, Области.ОбластьСчетЗатратОкончание, 3, "Группа3", Ложь, "СуммаСчетаЗатрат", СтрокаСчетПрямыхЗатрат, СуммаПрямыхЗатратПРПоСчету, СуммаПрямыхЗатратВРПоСчету, ВариантОтчета);
									
									Для Каждого СтрокаНоменклатураПрямыхЗатрат Из СтрокаСчетПрямыхЗатрат.Строки Цикл
										Если СтрокаНоменклатураПрямыхЗатрат["НоменклатураПрямыхЗатрат" + Постфикс] <> Неопределено  Тогда
											
											Если СтрокаНоменклатураПрямыхЗатрат["СуммаПрямыхЗатрат" + Постфикс] = 0 Тогда
												Продолжить;
											КонецЕсли;

											Области.ОбластьНоменклатураЗатрат.Параметры.НаименованиеНоменклатурыЗатрат = ВыводНаименованияВыпуска(СтрокаНоменклатураПрямыхЗатрат["НоменклатураПрямыхЗатрат" + Постфикс]);
											Области.ОбластьНоменклатураЗатрат.Параметры.СуммаНоменклатурыЗатрат        = СтрокаНоменклатураПрямыхЗатрат["СуммаПрямыхЗатрат" + Постфикс] * Коэффициент;
											Области.ОбластьНоменклатураЗатрат.Параметры.КоличествоНоменклатурыЗатрат   = СтрокаНоменклатураПрямыхЗатрат["КоличествоПрямыхЗатрат" + Постфикс] * Коэффициент;
											Области.ОбластьНоменклатураЗатрат.Параметры.ЦенаНоменклатурыЗатрат         = ?(СтрокаНоменклатураПрямыхЗатрат["КоличествоПрямыхЗатрат" + Постфикс] = 0, 0, СтрокаНоменклатураПрямыхЗатрат["СуммаПрямыхЗатрат" + Постфикс] / СтрокаНоменклатураПрямыхЗатрат["КоличествоПрямыхЗатрат" + Постфикс]);
											ВывестиОбласть(Результат, Области.ОбластьНоменклатураЗатрат, Области.ОбластьНоменклатураЗатратРазницы, Области.ОбластьНоменклатураЗатратОкончание, 4, "Группа4", Ложь, "СуммаНоменклатурыЗатрат", СтрокаНоменклатураПрямыхЗатрат, ?(ВариантОтчета = 3, (СтрокаНоменклатураПрямыхЗатрат.СуммаПрямыхЗатратПР) * КоэффициентПР, 0), ?(ВариантОтчета = 3, (СтрокаНоменклатураПрямыхЗатрат.СуммаПрямыхЗатратВР) * КоэффициентВР, 0), ВариантОтчета);
									
										КонецЕсли;
									КонецЦикла;
							
								КонецЕсли;
							КонецЦикла;
							
						КонецЕсли;
					КонецЦикла;
					
					Области.ОбластьИтогоПрямые.Параметры.ИтогоСуммаПрямыхЗатрат = ИтогоСуммаПрямыхЗатрат;
				    ВывестиОбласть(Результат, Области.ОбластьИтогоПрямые, Области.ОбластьИтогоПрямыеРазницы, Области.ОбластьИтогоПрямыеОкончание, 2, "Группа2", Ложь, "ИтогоСуммаПрямыхЗатрат", СтрокаНоменклатура, ИтогоСуммаПрямыхЗатратПР, ИтогоСуммаПрямыхЗатратВР, ВариантОтчета);
					
					// косвенные затраты
					ВсегоКосвенныхЗатрат = СтрокаНоменклатура["СуммаКосвЗатрат" + Постфикс];
					ВсегоСуммаЗатрат     = 0;
					ВсегоСуммаЗатратПР   = 0;
					ВсегоСуммаЗатратВР   = 0;
					Если НЕ ВсегоКосвенныхЗатрат = 0 Тогда
					    ВывестиОбласть(Результат, Области.ОбластьШапкаКосвенные, Области.ОбластьШапкаКосвенныеРазницы, Области.ОбластьШапкаКосвенныеОкончание, 2, "Группа2", Ложь, "Текст", СтрокаНоменклатура, "", "", ВариантОтчета);

						Для Каждого СтрокаКосвенныхЗатрат Из СтрокаНоменклатура.Строки Цикл
							Если СтрокаКосвенныхЗатрат["ЗатратыКосвенные" + Постфикс] <> Неопределено  Тогда
						
								Области.ОбластьСтрокаЗатрат.Параметры.НаименованиеЗатрат = СтрокаКосвенныхЗатрат["ЗатратыКосвенные" + Постфикс];
								Области.ОбластьСтрокаЗатрат.Параметры.СуммаЗатрат        = СтрокаКосвенныхЗатрат["СуммаКосвЗатрат" + Постфикс] * Коэффициент;
								ВсегоСуммаЗатрат = ВсегоСуммаЗатрат + СтрокаКосвенныхЗатрат["СуммаКосвЗатрат" + Постфикс] * Коэффициент;
								Если ВариантОтчета = 3 Тогда
									СуммаКосвЗатратПР = СтрокаКосвенныхЗатрат.СуммаКосвЗатратПР * КоэффициентПР;
									СуммаКосвЗатратВР = СтрокаКосвенныхЗатрат.СуммаКосвЗатратВР * КоэффициентВР;
								Иначе
									СуммаКосвЗатратПР = 0;
									СуммаКосвЗатратВР = 0;
								КонецЕсли;
								ВсегоСуммаЗатратПР = ВсегоСуммаЗатратПР + СуммаКосвЗатратПР;
								ВсегоСуммаЗатратВР = ВсегоСуммаЗатратВР + СуммаКосвЗатратВР;
						        ВывестиОбласть(Результат, Области.ОбластьСтрокаЗатрат, Области.ОбластьСтрокаЗатратРазницы, Области.ОбластьСтрокаЗатратОкончание, 0, 0, Ложь, "СуммаЗатрат", СтрокаКосвенныхЗатрат, СуммаКосвЗатратПР, СуммаКосвЗатратВР, ВариантОтчета);
									
						КонецЕсли;
						КонецЦикла;
						
						Области.ОбластьИтогоКосвенные.Параметры.ИтогоСуммаКосвенныхЗатрат = ВсегоСуммаЗатрат;
					    ВывестиОбласть(Результат, Области.ОбластьИтогоКосвенные, Области.ОбластьИтогоКосвенныеРазницы, Области.ОбластьИтогоКосвенныеОкончание, 2, "Группа2", Ложь, "ИтогоСуммаКосвенныхЗатрат", СтрокаНоменклатура, ВсегоСуммаЗатратПР, ВсегоСуммаЗатратВР, ВариантОтчета);
						
					КонецЕсли;  // косвенные затраты
					
					// НЗП
					НачОстНЗП   = СтрокаНоменклатура["НачОстНЗП" + Постфикс] * Коэффициент;
					КонОстНЗП   = СтрокаНоменклатура["КонОстНЗП" + Постфикс] * Коэффициент;
					НачОстНЗППР = 0;
					КонОстНЗППР = 0;
					НачОстНЗПВР = 0;
					КонОстНЗПВР = 0;
					Если ВариантОтчета = 3 Тогда
						НачОстНЗППР = (СтрокаНоменклатура.НачОстНЗППР) * КоэффициентПР;
						КонОстНЗППР = (СтрокаНоменклатура.КонОстНЗППР) * КоэффициентПР;
						НачОстНЗПВР = (СтрокаНоменклатура.НачОстНЗПВР) * КоэффициентВР;
						КонОстНЗПВР = (СтрокаНоменклатура.КонОстНЗПВР) * КоэффициентВР;
					КонецЕсли;
					
					Если НачОстНЗП <> 0 Или КонОстНЗП <> 0
						 Или НачОстНЗППР <> 0 Или КонОстНЗППР <> 0
						 Или НачОстНЗПВР <> 0 Или КонОстНЗПВР <> 0 Тогда
						   
						Области.ОбластьНЗПНач.Параметры.СуммаНЗПнаНачало = НачОстНЗП;
						Области.ОбластьНЗПКон.Параметры.СуммаНЗПнаКонец  = КонОстНЗП;
						Области.ОбластьНЗПИтого.Параметры.ИтогоНЗП       = НачОстНЗП - КонОстНЗП;
						Области.ОбластьНЗПНач.Параметры.НачалоПериода    = ПараметрыОтчета.НачалоПериода;
						Области.ОбластьНЗПКон.Параметры.КонецПериода     = ПараметрыОтчета.КонецПериода;
				        ВывестиОбласть(Результат, Области.ОбластьНЗПНач, Области.ОбластьНЗПНачРазницы, Области.ОбластьНЗПНачОкончание, 2, "Группа2", Ложь, "НачОстНЗП", СтрокаНоменклатура, НачОстНЗППР, НачОстНЗПВР, ВариантОтчета);
				        ВывестиОбласть(Результат, Области.ОбластьНЗПКон, Области.ОбластьНЗПКонРазницы, Области.ОбластьНЗПКонОкончание, 2, "Группа2", Ложь, "КонОстНЗП", СтрокаНоменклатура, КонОстНЗППР, КонОстНЗПВР, ВариантОтчета);
				        ВывестиОбласть(Результат, Области.ОбластьНЗПИтого, Области.ОбластьНЗПИтогоРазницы, Области.ОбластьНЗПИтогоОкончание, 2, "Группа2", Ложь, "ИтогоНЗП", СтрокаНоменклатура, - КонОстНЗППР + НачОстНЗППР, - КонОстНЗПВР + НачОстНЗПВР, ВариантОтчета);
					КонецЕсли;  // НЗП
									
				    ВывестиОбласть(Результат, Области.ОбластьОкончаниеТаблицы, Области.ОбластьОкончаниеТаблицыРазницы, Области.ОбластьОкончаниеТаблицыОкончание, 1, "Группа1", Ложь, "Текст", СтрокаНоменклатура, "", "", ВариантОтчета);
				КонецЦикла;  // НоменклатураВыпуска
			КонецЦикла;   // НоменклатурнаяГруппа
		КонецЕсли;
	КонецЦикла;    // ПодразделениеВыпуска
					
КонецПроцедуры

Функция НайтиПоИмени(Структура, Имя)
	
	Группировка = Неопределено;
	
	Для каждого Элемент Из Структура Цикл
		Если ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Если Элемент.Имя = Имя Тогда
				Возврат Элемент;
			КонецЕсли;	
		Иначе
			Если Элемент.Имя = Имя Тогда
				Возврат Элемент;
			КонецЕсли;	
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				Если Не ТипЗнч(Поле) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
					Если Поле.Поле = Новый ПолеКомпоновкиДанных(Имя) Тогда
						Возврат Элемент;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если Элемент.Структура.Количество() = 0 Тогда
				Продолжить;
			Иначе
				Группировка = НайтиПоИмени(Элемент.Структура, Имя);
				Если Не Группировка = Неопределено Тогда
					Возврат	Группировка;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Группировка;
	
КонецФункции

Процедура ВывестиОбласть(ДокументРезультат, ОбластьОсновная, ОбластьРазницы, ОбластьОкончание, Уровень, ИмяГруппы, Открыта, ИмяПараметра, Выборка, СуммаПР = Неопределено, СуммаВР = Неопределено, ВариантОтчета)
	
	Если Уровень = 0 Тогда
		ОбластьНачало = ДокументРезультат.Вывести(ОбластьОсновная);
	Иначе
		ОбластьНачало = ДокументРезультат.Вывести(ОбластьОсновная, Уровень, ИмяГруппы, Открыта);
	КонецЕсли;
	
	Если ВариантОтчета = 3 Тогда
		ОбластьРазницы.Параметры[ИмяПараметра + "ПР"] = ?(СуммаПР = Неопределено, Выборка[ИмяПараметра + "ПР"], СуммаПР);
		ОбластьРазницы.Параметры[ИмяПараметра + "ВР"] = ?(СуммаВР = Неопределено, Выборка[ИмяПараметра + "ВР"], СуммаВР);
		Если Уровень = 0 Тогда
			ОбластьРазниц = ДокументРезультат.Присоединить(ОбластьРазницы);
		Иначе
			ОбластьРазниц = ДокументРезультат.Присоединить(ОбластьРазницы, Уровень, ИмяГруппы, Открыта);
		КонецЕсли;
	КонецЕсли;
	
	Если Уровень = 0 Тогда
		ОбластьКонец = ДокументРезультат.Присоединить(ОбластьОкончание);
	Иначе
		ОбластьКонец = ДокументРезультат.Присоединить(ОбластьОкончание, Уровень, ИмяГруппы, Открыта);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыводНаименованияВыпуска(Наименование, ВыводитьЕдиницыИзмерения = Истина)
	
	Если ТипЗнч(Наименование) = Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат Наименование.НаименованиеПолное + ?(ВыводитьЕдиницыИзмерения, " (" + Наименование.БазоваяЕдиницаИзмерения + ")", "");
	ИначеЕсли ТипЗнч(Наименование) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
		Возврат НСтр("ru = 'Услуги производственного характера'");
	ИначеЕсли ТипЗнч(Наименование) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		Возврат НСтр("ru = 'Услуги, оказанные для подразделения '") + Наименование.Наименование;
	Иначе
		Возврат Наименование;
	КонецЕсли;
		
КонецФункции

#КонецЕсли