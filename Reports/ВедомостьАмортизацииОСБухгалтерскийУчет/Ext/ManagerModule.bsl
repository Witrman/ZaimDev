#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки",
							Истина, Истина, Истина, Истина);
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт
	
	ЗаголовокОтчета = НСтр("ru = 'Ведомость амортизации ОС %1'");
	ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ЗаголовокОтчета, БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода));
	
	Возврат ЗаголовокОтчета;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачПериода", Дата(1,1,1,0,0,0));
	КонецЕсли;
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПустаяДата",     Дата(1,1,1,0,0,0));
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонПериода", КонецДня(ПараметрыОтчета.КонецПериода));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонПериодаОстатков", Новый Граница(КонецДня(ПараметрыОтчета.КонецПериода), ВидГраницы.Включая));
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонПериода", Дата(3999,12,31,23,59,59));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонПериодаОстатков", Новый Граница(Дата(3999,12,31,23,59,59), ВидГраницы.Включая));
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ИсключатьВнутренниеОбороты", ПараметрыОтчета.ИсключатьВнутренниеОбороты);
	
	ВидыСубконтоОС = Новый Массив;
	ВидыСубконтоВА = Новый Массив;
	
	ВидыСубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	ВидыСубконтоВА.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы);
	Если ПараметрыОтчета.ВестиУчетОСВРазрезеПодразделений Тогда
		ВидыСубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
		ВидыСубконтоВА.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
	КонецЕсли;
	Если ПараметрыОтчета.ВестиУчетОСВРазрезеМОЛ Тогда
		ВидыСубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций);
		ВидыСубконтоВА.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций);
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидыСубконтоОС", ВидыСубконтоОС);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидыСубконтоВА", ВидыСубконтоВА);
	
	БухгалтерскиеОтчеты.ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, ПараметрыОтчета);
	
	Структура = КомпоновщикНастроек.Настройки;
	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			Если ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		КонецЕсли;
	КонецЦикла;
	
	ГруппаЛиквидационнаяСтоимость = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаЛиквидационнаяСтоимость.Заголовок     = "";
	ГруппаЛиквидационнаяСтоимость.Использование = Истина;
	ГруппаЛиквидационнаяСтоимость.Расположение  = РасположениеПоляКомпоновкиДанных.Горизонтально;
	
	ГруппаПервоначальнаяСтоимость = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаПервоначальнаяСтоимость.Заголовок     = "";
	ГруппаПервоначальнаяСтоимость.Использование = Истина;
	ГруппаПервоначальнаяСтоимость.Расположение  = РасположениеПоляКомпоновкиДанных.Горизонтально;
	
	ГруппаСтоимостьДляВычисленияАмортизации = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСтоимостьДляВычисленияАмортизации.Заголовок     = "";
	ГруппаСтоимостьДляВычисленияАмортизации.Использование = Истина;
	ГруппаСтоимостьДляВычисленияАмортизации.Расположение  = РасположениеПоляКомпоновкиДанных.Горизонтально;
	
	//На начало периода
	ГруппаДанныеНаНачало = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаНачало.Заголовок     = НСтр("ru = 'На начало периода'");
	ГруппаДанныеНаНачало.Использование = Истина;
	ГруппаДанныеНаНачалоСтоимость = ГруппаДанныеНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаНачалоСтоимость.Заголовок     = НСтр("ru = 'Стоимость на начало периода'");
	ГруппаДанныеНаНачалоСтоимость.Использование = Истина;
	ГруппаДанныеНаНачалоСтоимость.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаДанныеНаНачалоАмортизация = ГруппаДанныеНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаНачалоАмортизация.Заголовок     = НСтр("ru = 'Амортизация на начало периода'");
	ГруппаДанныеНаНачалоАмортизация.Использование = Истина;
	ГруппаДанныеНаНачалоАмортизация.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаДанныеНаНачалоОстСтоимость = ГруппаДанныеНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаНачалоОстСтоимость.Заголовок     = НСтр("ru = 'Остаточная стоимость на начало периода'");
	ГруппаДанныеНаНачалоОстСтоимость.Использование = Истина;
	ГруппаДанныеНаНачалоОстСтоимость.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	//За период
	ГруппаОбороты = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОбороты.Заголовок     = НСтр("ru = 'За период'");
	ГруппаОбороты.Использование = Истина;
	ГруппаУвеличениеСтоимости = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаУвеличениеСтоимости.Заголовок     = НСтр("ru = 'Увеличение стоимости'");
	ГруппаУвеличениеСтоимости.Использование = Истина;
	ГруппаУвеличениеСтоимости.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаНачислениеАмортизации = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаНачислениеАмортизации.Заголовок     = НСтр("ru = 'Амортизация начисление'");
	ГруппаНачислениеАмортизации.Использование = Истина;
	ГруппаНачислениеАмортизации.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаСписаниеАмортизации = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСписаниеАмортизации.Заголовок     = НСтр("ru = 'Амортизация списание'");
	ГруппаСписаниеАмортизации.Использование = Истина;
	ГруппаСписаниеАмортизации.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаУменьшениеСтоимости = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаУменьшениеСтоимости.Заголовок     = НСтр("ru = 'Уменьшение стоимости'");
	ГруппаУменьшениеСтоимости.Использование = Истина;
	ГруппаУменьшениеСтоимости.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	//На конец периода	
	ГруппаДанныеНаКонец = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаКонец.Заголовок     = НСтр("ru = 'На конец периода'");
	ГруппаДанныеНаКонец.Использование = Истина;
	ГруппаДанныеНаКонецСтоимость = ГруппаДанныеНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаКонецСтоимость.Заголовок     = НСтр("ru = 'Стоимость на конец периода'");
	ГруппаДанныеНаКонецСтоимость.Использование = Истина;
	ГруппаДанныеНаКонецСтоимость.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаДанныеНаКонецАмортизация = ГруппаДанныеНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаКонецАмортизация.Заголовок     = НСтр("ru = 'Амортизация на конец периода'");
	ГруппаДанныеНаКонецАмортизация.Использование = Истина;
	ГруппаДанныеНаКонецАмортизация.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаДанныеНаКонецОстаточнаяСтоимость = ГруппаДанныеНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаКонецОстаточнаяСтоимость.Заголовок     = НСтр("ru = 'Остаточная стоимость'");
	ГруппаДанныеНаКонецОстаточнаяСтоимость.Использование = Истина;
	ГруппаДанныеНаКонецОстаточнаяСтоимость.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	Если КомпоновщикНастроек.Настройки.Порядок.Элементы.Количество() = 0 Тогда
		ЭлементПорядка = КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));		
		ЭлементПорядка.Поле  = Новый  ПолеКомпоновкиДанных("ОсновноеСредство");
		ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;		
	КонецЕсли;	
	
    КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));

	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	Для Каждого Показатель Из ПараметрыОтчета.Показатели Цикл
		Если Показатель.Использование Тогда
			Если Показатель.Поле = "ЛиквидационнаяСтоимость" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаЛиквидационнаяСтоимость,           "ЛиквидационнаяСтоимость");
			ИначеЕсли Показатель.Поле = "ПервоначальнаяСтоимость" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПервоначальнаяСтоимость,           "ПервоначальнаяСтоимость");
			ИначеЕсли Показатель.Поле = "СтоимостьДляВычисленияАмортизации" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСтоимостьДляВычисленияАмортизации, "СтоимостьДляВычисленияАмортизации");
			ИначеЕсли Показатель.Поле = "СтоимостьНачальныйОстаток" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДанныеНаНачалоСтоимость,           "СтоимостьНачальныйОстаток");
			ИначеЕсли Показатель.Поле = "АмортизацияНачальныйОстаток" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДанныеНаНачалоАмортизация,         "АмортизацияНачальныйОстаток");
			ИначеЕсли Показатель.Поле = "ОстаточнаяСтоимостьНач" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДанныеНаНачалоОстСтоимость,        "ОстаточнаяСтоимостьНач");
			ИначеЕсли Показатель.Поле = "СтоимостьУвеличение" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаУвеличениеСтоимости,               "СтоимостьУвеличение");
			ИначеЕсли Показатель.Поле = "АмортизацияНачисление" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаНачислениеАмортизации,             "АмортизацияНачисление");
			ИначеЕсли Показатель.Поле = "АмортизацияСписание" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСписаниеАмортизации,               "АмортизацияСписание");
			ИначеЕсли Показатель.Поле = "СтоимостьУменьшение" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаУменьшениеСтоимости,               "СтоимостьУменьшение");
			ИначеЕсли Показатель.Поле = "СтоимостьКонечныйОстаток" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецСтоимость,            "СтоимостьКонечныйОстаток");
			ИначеЕсли Показатель.Поле = "АмортизацияКонечныйОстаток" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецАмортизация,          "АмортизацияКонечныйОстаток");
			ИначеЕсли Показатель.Поле = "ОстаточнаяСтоимость" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецОстаточнаяСтоимость,  "ОстаточнаяСтоимость");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
		
	МакетШапкиОтчета = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетШапки(МакетКомпоновки);
	
	ЗаголовокКолонкиОС = ""; 
	Для Каждого Строка Из  МакетШапкиОтчета.Макет Цикл
		
		Если Строка.Ячейки[0].Элементы.Количество() > 0 Тогда
			ЗаголовокКолонкиОС = ЗаголовокКолонкиОС + ?(ПустаяСтрока(ЗаголовокКолонкиОС), "", " \ ");
		КонецЕсли;
		
		Для Каждого Элемент Из Строка.Ячейки[0].Элементы Цикл
			ЗаголовокКолонкиОС = ЗаголовокКолонкиОС + Элемент.Значение;
		КонецЦикла;
		
	КонецЦикла;
	
	Если МакетШапкиОтчета.Макет.Количество() > 1 Тогда
		
		Ячейка2 = МакетШапкиОтчета.Макет[1].Ячейки[1];
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка2.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);

		МассивДляУдаления = Новый Массив;
		Для Индекс = 2 По МакетШапкиОтчета.Макет.Количество() - 1 Цикл
			МассивДляУдаления.Добавить(МакетШапкиОтчета.Макет[Индекс]);
		КонецЦикла;
			
		Для Каждого Элемент Из МассивДляУдаления Цикл
			МакетШапкиОтчета.Макет.Удалить(Элемент);
		КонецЦикла;
		
		Ячейка2 = МакетШапкиОтчета.Макет[0].Ячейки[0];
		Ячейка2.Элементы.Очистить();
		НовыйЭлемент = Ячейка2.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
		НовыйЭлемент.Значение = ЗаголовокКолонкиОС;	
		Ячейка2 = МакетШапкиОтчета.Макет[1].Ячейки[0];
		Ячейка2.Элементы.Очистить();
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка2.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);

	// Зафиксируем заголовок отчета
	Если ПараметрыОтчета.ВыводитьЗаголовок Тогда
		ВысотаЗаголовка = Результат.Области.Заголовок.Низ;
		Результат.ФиксацияСверху = ВысотаЗаголовка + 2;
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


#КонецЕсли