&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем УИДЗамера;

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	мВыбраннаяФорма = "Форма2202023Кв1";
	КодФормы 		= "Форма220";
	
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруФормРегОтчета(ЭтотОбъект);	
	
	СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями = РегламентированнаяОтчетностьПереопределяемый.ПоддержкаРаботыСоСтруктурнымиПодразделениями();	
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов   = Новый СписокЗначений;	
	СтруктураРеквизитовФормы.мПечатныеформы 		  = Новый СписокЗначений;			
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);
	
	ДатаПодписи	= ТекущаяДатаСеанса();		
	
	мФорматНомераСтроки = "ЧЦ=8; ЧВН=; ЧГ=";	
	
	ЗаполнитьСведенияОбОтчетномПериоде();
	
	//индивидуальные ключи формы
	СтруктураРеквизитовФормы.КодСтрокиДоходОтКурсовойРазницы   = "220.00.010.K";
	СтруктураРеквизитовФормы.КодСтрокиРасходыПоКурсовойРазнице = "220.00.028.K";
	
	СписокРасчетов = Элементы.СписокРасчетов.СписокВыбора[0].Значение;
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
			ЗаполнитьПараметры(ТекФорма.КодФормы);
		КонецЕсли;
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекФорма.КодФормы);
	КонецЦикла;
	
	////////////////////////////////////////////////////////////////////////////////
	// Подключаемые
	ОтчетыПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы) 
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если Модифицированность Тогда 
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);	
		ТекстВопроса = НСТР("ru = 'Сохранить данные отчета?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если КодФормы = "Форма220_01" Тогда
		Форма220_01ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ОтражениеНалоговойОтчетностиВРеглУчете" Тогда
		Элементы.ФормаОтражениеВУчете.Заголовок = ПолучитьЗаголовокОтражениеВУчете(Источник);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)	
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.КодФормы = Элемент.ТекущиеДанные.КодФормы Тогда
		ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);
		Возврат;
	КонецЕсли;	
	
	РазделыОтчетаПриАктивизацииСтрокиНаСервере(Элемент.ТекущиеДанные.КодФормы, Элемент.ТекущиеДанные.Многострочность);	
	
	//из-за проблем отображения в вебе
	
	//СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	//Для Каждого СтраницаФорм из Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы Цикл
	//	Элементы[СтраницаФорм.Имя].Видимость = СтраницаФорм.Имя = ЭтаФорма.КодФормы;	
	//КонецЦикла;
	
	Элементы[ЭтаФорма.КодФормы].Видимость = Ложь;
	Элементы[Элемент.ТекущиеДанные.КодФормы].Видимость = Истина;
	Элементы.ГруппаСтраницыОтчета.ТекущаяСтраница = Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы[ЭтаФорма.КодФормы]; 		
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;

	ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);
	
КонецПроцедуры

&НаСервере
Процедура РазделыОтчетаПриАктивизацииСтрокиНаСервере(НовыйКодФормы, НовыйПризнакМногострочность)
	
	//проверим, что стояли не на основной, итоги передаем только когда переходим из доп.форм
	ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	Если ТекФорма <> Неопределено И Не ТекФорма.ПризнакОсновной Тогда
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы, Истина);		
	КонецЕсли;	
	
	// установим новые значения реквизитам формы
	ЭтаФорма.КодФормы = НовыйКодФормы;	
	
	//передаем данные из структуры в ТП
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	
	
	Если  НовыйПризнакМногострочность Тогда
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтотОбъект);
	КонецЕсли;
	
	
КонецПроцедуры	

&НаКлиенте
Процедура ДатаПодписиПриИзменении(Элемент)
	
	ДатаПодписиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "ДатаПодачи", ДатаПодписи);
	
	Модифированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРасчетовПриИзменении(Элемент)
	
	ЗаполнитьВидРасчета(СписокРасчетов);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(мСписокСтруктурныхЕдиниц, ЭтаФорма, СтандартнаяОбработка, "", Налогоплательщик,, 
	ПредопределенноеЗначение("Перечисление.РазделыНалоговогоУчета.КПН"), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Комментарий");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма220ПолеТабличногоДокументаСтраница1

&НаКлиенте
Процедура Форма220ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Ячейка = Область.Имя;
	
	Если Область.СодержитЗначение Тогда
		Значение = Область.Значение;
	Иначе
		Возврат;		
	КонецЕсли;
	
	Если НЕ Найти(Область.Имя, "s_220_00_0") = 0 Тогда			
		Форма220РасчетНаСервере(Ячейка, Значение, КодФормы);
	Иначе
		Если ЗначениеЗаполнено(Ячейка) Тогда		
			ПередатьЗначениеВСтруктуруНаСервере(Ячейка, Значение);					
		КонецЕсли; 		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Форма220ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;
	
	Если (Найти(Ячейка, "ПостоянноеУчереждениеЗаРК") > 0) Тогда
		Если Область.Значение = "Х" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "Х";
		КонецЕсли;
		
		ПередатьЗначениеВСтруктуруНаСервере(Ячейка, Область.Значение);
		
	ИначеЕсли (Найти(Ячейка, "КатегорияA") > 0) Тогда
		Если Область.Значение = "Х" Тогда
			Область.Значение = "";
			
		Иначе
			Область.Значение = "Х";
			
			КатегорияB = Форма220ПолеТабличногоДокументаСтраница1.Области.Найти("КатегорияB");
			Если КатегорияB.Значение = "Х" Тогда
				КатегорияB.Значение = "";
				ПередатьЗначениеВСтруктуруНаСервере("КатегорияB", "");
			КонецЕсли;
			
		КонецЕсли;
		
		ПередатьЗначениеВСтруктуруНаСервере(Ячейка, Область.Значение);
		
	ИначеЕсли (Найти(Ячейка, "КатегорияB") > 0) Тогда
		Если Область.Значение = "Х" Тогда
			Область.Значение = "";
			
		Иначе
			Область.Значение = "Х";
			
			КатегорияA = Форма220ПолеТабличногоДокументаСтраница1.Области.Найти("КатегорияA");
			Если КатегорияA.Значение = "Х" Тогда
				КатегорияA.Значение = "";
				ПередатьЗначениеВСтруктуруНаСервере("КатегорияA", "");
			КонецЕсли;
			
		КонецЕсли;
		
		ПередатьЗначениеВСтруктуруНаСервере(Ячейка, Область.Значение);
		
	КонецЕсли;
	
	
	
	Если (Найти(Ячейка, "РезидентРК") > 0) Тогда 
		Если Область.Значение = "Х" Тогда
			Область.Значение = "";
			НерезидентРК = Форма220ПолеТабличногоДокументаСтраница1.Области.Найти("НерезидентРК");
			НерезидентРК.Значение = "Х";
			
			ПередатьЗначениеВСтруктуруНаСервере(Ячейка, Область.Значение);
			ПередатьЗначениеВСтруктуруНаСервере("НерезидентРК", "Х");
			
			Форма220ПолеТабличногоДокументаСтраница1.Области.КодСтраныРезидентства.Защита			    = Ложь;
			Форма220ПолеТабличногоДокументаСтраница1.Области.НомерНалоговойРегСтраныРезидентства.Защита = Ложь;
			
		Иначе
			Область.Значение = "Х";
			НерезидентРК = Форма220ПолеТабличногоДокументаСтраница1.Области.Найти("НерезидентРК");
			НерезидентРК.Значение = "";
			
			КодСтраныРезидентства = Форма220ПолеТабличногоДокументаСтраница1.Области.Найти("КодСтраныРезидентства");
			КодСтраныРезидентства.Значение = "";
			
			НомерНалоговойРегСтраныРезидентства = Форма220ПолеТабличногоДокументаСтраница1.Области.Найти("НомерНалоговойРегСтраныРезидентства");
			НомерНалоговойРегСтраныРезидентства.Значение = "";
			
			ПередатьЗначениеВСтруктуруНаСервере(Строка(Ячейка), Область.Значение);
			ПередатьЗначениеВСтруктуруНаСервере("НерезидентРК", "");
			ПередатьЗначениеВСтруктуруНаСервере("КодСтраныРезидентства", "");
			ПередатьЗначениеВСтруктуруНаСервере("НомерНалоговойРегСтраныРезидентства", "");
			
			Форма220ПолеТабличногоДокументаСтраница1.Области.КодСтраныРезидентства.Защита 			    = Истина;
			Форма220ПолеТабличногоДокументаСтраница1.Области.НомерНалоговойРегСтраныРезидентства.Защита = Истина;
			
		КонецЕсли;		
	ИначеЕсли (Найти(Ячейка, "НерезидентРК") > 0) Тогда 
		Если Область.Значение = "Х" Тогда
			Область.Значение = "";
			РезидентРК = Форма220ПолеТабличногоДокументаСтраница1.Области.Найти("РезидентРК");
			РезидентРК.Значение = "Х";
			
			ПередатьЗначениеВСтруктуруНаСервере("РезидентРК", "Х");
			ПередатьЗначениеВСтруктуруНаСервере("НерезидентРК", "");
			ПередатьЗначениеВСтруктуруНаСервере("КодСтраныРезидентства", "");
			ПередатьЗначениеВСтруктуруНаСервере("НомерНалоговойРегСтраныРезидентства", "");
			
			Форма220ПолеТабличногоДокументаСтраница1.Области.КодСтраныРезидентства.Защита  			    = Истина;
			Форма220ПолеТабличногоДокументаСтраница1.Области.НомерНалоговойРегСтраныРезидентства.Защита = Истина;				
			
		Иначе
			
			Область.Значение = "Х";
			РезидентРК = Форма220ПолеТабличногоДокументаСтраница1.Области.Найти("РезидентРК");
			РезидентРК.Значение = "";
			
			ПередатьЗначениеВСтруктуруНаСервере(Строка(Ячейка), Область.Значение);
			ПередатьЗначениеВСтруктуруНаСервере("РезидентРК", "");
			
			Форма220ПолеТабличногоДокументаСтраница1.Области.КодСтраныРезидентства.Защита 			    = Ложь;
			Форма220ПолеТабличногоДокументаСтраница1.Области.НомерНалоговойРегСтраныРезидентства.Защита = Ложь;	
			
		КонецЕсли;		
	КонецЕсли;
	
	Если (Найти(Ячейка, "УчастникМФЦА") > 0) Тогда
		Если Область.Значение = "Х" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "Х";
		КонецЕсли;
		
		ПередатьЗначениеВСтруктуруНаСервере(Ячейка, Область.Значение);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма220ПолеТабличногоДокументаСтраница2

&НаКлиенте
Процедура Форма220ПолеТабличногоДокументаСтраница2ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Ячейка = Область.Имя;
	
	Если Область.СодержитЗначение Тогда
		Значение = Область.Значение;
	Иначе
		Возврат;		
	КонецЕсли;
	
	Если НЕ Найти(Область.Имя, "s_220_00_0") = 0 Тогда			
		Форма220РасчетНаСервере(Ячейка, Значение, КодФормы);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма220ПолеТабличногоДокументаСтраница3

&НаКлиенте
Процедура Форма220ПолеТабличногоДокументаСтраница3ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Ячейка = Область.Имя;
	
	Если Область.СодержитЗначение Тогда
		Значение = Область.Значение;
	Иначе
		Возврат;		
	КонецЕсли;
	
	Если НЕ Найти(Область.Имя, "s_220_00_0") = 0 Тогда			
		Форма220РасчетНаСервере(Ячейка, Значение, КодФормы);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма220ПолеТабличногоДокументаСтраница4

&НаКлиенте
Процедура Форма220ПолеТабличногоДокументаСтраница4ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Ячейка = Область.Имя;
	
	Если Область.СодержитЗначение Тогда
		Значение = Область.Значение;
	Иначе
		Возврат;		
	КонецЕсли;
	
	Если НЕ Найти(Область.Имя, "s_220_00_0") = 0 Тогда			
		Форма220РасчетНаСервере(Ячейка, Значение, КодФормы);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма220ПолеТабличногоДокументаСтраница5

&НаКлиенте
Процедура Форма220ПолеТабличногоДокументаСтраница5ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Ячейка = Область.Имя;
	
	Если Область.СодержитЗначение Тогда
		Значение = Область.Значение;
	Иначе
		Возврат;		
	КонецЕсли;
	
	Если НЕ Найти(Область.Имя, "s_220_00_0") = 0 Тогда			
		Форма220РасчетНаСервере(Ячейка, Значение, КодФормы);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма220_01ПолеТабличногоДокументаСтраница1

&НаКлиенте
Процедура Форма220_01ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;			 
	
	Если (Найти(Ячейка, "Ф220_01_D__")> 0) Тогда			
		ЗначениеРасшифровки = Область.Расшифровка; 
		НачЗначение = Область.Значение;	
		
		//может быть не заполнена расшировка ячейки при восстановления данных старых форм
		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			ИмяЯчейкиРасшифровки = "Ф220_01_B" + Сред(Ячейка,Найти(Ячейка,"__"));
			ОбластьРасширофвки = Форма220_01ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяЯчейкиРасшифровки);
			Если ОбластьРасширофвки <> Неопределено Тогда 
				ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;
				Область.Расшифровка = ЗначениеРасшифровки;
				ПередатьЗначениеВСтруктуруНаСервере(Ячейка, НачЗначение,,, ЗначениеРасшифровки);
			КонецЕсли;				 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НачЗначение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			Возврат;
		КонецЕсли;                                                 			
		
		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбора",, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
		
	Если (Найти(Ячейка, "Ф220_01_E__") > 0) Тогда
		ПараметрыСтраницы1 = Новый Структура();
		ПараметрыСтраницы1.Вставить("ИмяСтраницы", "Страница1");
		ПараметрыСтраницы1.Вставить("Область", Область);		
		ПараметрыСтраницы1.Вставить("Расчет", Ложь);
		
		НачЗначение = Область.Значение;
		
		ПараметрыСтраницы1.Вставить("ПроверитьВидРасхода", Истина);
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы1); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений, НачЗначение, НСтр("ru='Введите код вида расхода'"), 1, 0); 				
	КонецЕсли;
	
	Если (Найти(Ячейка, "Ф220_01_B__") > 0) ИЛИ (Найти(Ячейка, "Ф220_01_C__") > 0) Тогда
		
		НачЗначение = Область.Значение;		
		ЗначениеРасшифровки = Область.Расшифровка;    		
		
		//может быть не заполнена расшировка ячейки при восстановления данных старых форм
		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			ИмяЯчейкиРасшифровки = "Ф220_01_B" + Сред(Ячейка, Найти(Ячейка, "__"));
			ОбластьРасширофвки = Форма220_01ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяЯчейкиРасшифровки);
			Если ОбластьРасширофвки <> Неопределено Тогда 
				ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;
				Область.Расшифровка = ЗначениеРасшифровки;
				ПередатьЗначениеВСтруктуруНаСервере(Ячейка, НачЗначение,,, ЗначениеРасшифровки);
			КонецЕсли;				 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НачЗначение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			Возврат;
		КонецЕсли;                                   			
		
		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбора",, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца) ;
		
	Иначе
		Возврат;
	КонецЕсли;  
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма220_01ПолеТабличногоДокументаСтраница1

&НаКлиенте
Процедура Форма220_01ПолеТабличногоДокументаСтраница2Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ПараметрыСтраницы2 = Новый Структура();
	ПараметрыСтраницы2.Вставить("ИмяСтраницы", "Страница2");
	ПараметрыСтраницы2.Вставить("Область", Область);		
	ПараметрыСтраницы2.Вставить("Расчет", Ложь);
	
	Ячейка = Область.Имя;	
	
	Если (Найти(Ячейка, "Ф220_01_") > 0) Тогда
		НачЗначение = Область.Значение;	   		
		
		Если (Найти(Ячейка, "Ф220_01_F__") > 0) Тогда                                                           			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы2); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений, НачЗначение, НСтр("ru='Введите сумму расходов'"), 15, 0); 				
		КонецЕсли;
		
		Если (Найти(Ячейка, "Ф220_01_G__") > 0) Тогда
			ПараметрыСтраницы2.Вставить("ПроверитьПризнак", Истина);
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы2); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений, НачЗначение, НСтр("ru='Введите признак'"), 1, 0); 				
		КонецЕсли;
		
		
	КонецЕсли;
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма220_02ПолеТабличногоДокументаСтраница1

&НаКлиенте
Процедура Форма220_02ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Ячейка = Область.Имя;
	
	Если Область.СодержитЗначение Тогда
		Значение = Область.Значение;
	Иначе
		Возврат;		
	КонецЕсли;
	
	Если НЕ Найти(Область.Имя, "s_220_02_0") = 0 Тогда			
		Форма220_02РасчетНаСервере(Ячейка, Значение, КодФормы);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма220_02ПолеТабличногоДокументаСтраница2

&НаКлиенте
Процедура Форма220_02ПолеТабличногоДокументаСтраница2ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Ячейка = Область.Имя;
	
	Если Область.СодержитЗначение Тогда
		Значение = Область.Значение;
	Иначе
		Возврат;		
	КонецЕсли;
	
	Если НЕ Найти(Область.Имя, "s_220_02_0") = 0 Тогда			
		Форма220_02РасчетНаСервере(Ячейка, Значение, КодФормы);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыФормы.Вставить("Налогоплательщик",         Налогоплательщик);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, мВыбраннаяФорма, "") + "ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ДобавитьСтрокуНаСервере();
	
КонецПроцедуры      

&НаКлиенте
Процедура ПредыдущаяСтр(Команда)
	
	ПредыдущаяСтрНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СледующаяСтр(Команда)
	
	СледующаяСтрНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	УдалитьСтрокуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Перезаполнить = Истина; // Для выполнения запроса на пересчет данных к пользователю
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения =  РегламентированнаяОтчетностьКлиент.ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Перезаполнить Тогда		
		Если СтрокаФормы.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстВопроса = "Перезаполнить данные формы и ее дополнительных форм?";
		Иначе
			ТекстВопроса = "Перезаполнить данные формы?";
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);
		Оповещение.ДополнительныеПараметры.Вставить("Перезаполнить", Перезаполнить);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);		
		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВXML(Команда)
	
	ГодФормирования = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	
	Если 2023 < ГодФормирования Тогда 
		ТекстСообщения = НСтр("ru = 'Отчет не предназначен для выгрузки в XML в период формирования " + Формат(ГодФормирования, "ЧГ=0") + " г." + Символы.ПС + 
		"Пожалуйста, обновите комплект отчетов.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);		
		Возврат;
	КонецЕсли;
	
	АдресВременногоХранилища = ВыгрузитьВXMLНаСервере();
	
	Если Не ПодключитьРасширениеРаботыСФайлами() Тогда		
		ПолучитьФайл(АдресВременногоХранилища, КодФормы + ".xml", Истина); 
		Возврат;
	КонецЕсли;
	
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогСохраненияФайла.ПолноеИмяФайла = КодФормы + " " + СтруктураРеквизитовФормы.мГод + "г" + СтруктураРеквизитовФормы.мКвартал + ".xml";
	ДиалогСохраненияФайла.Фильтр = РегламентированнаяОтчетностьКлиентСервер.ФильтрДиалоговВыбораИСохраненияРегламентированногоОтчета();	
	ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
	ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите файл'");
	
	Если ДиалогСохраненияФайла.Выбрать() Тогда	 	   
		
		ПолучитьФайл(АдресВременногоХранилища, ДиалогСохраненияФайла.ПолноеИмяФайла, Ложь);     
		
		РегламентированнаяОтчетностьКлиентСервер.ВыдатьОтветПриВыгрузке();
		
		ТекстСообщения = НСтр("ru = 'Данные успешно выгружены в'");		
		
		#Если НЕ ВебКлиент Тогда
			ПоказатьОповещениеПользователя(
			ТекстСообщения, "file:///" + СтрЗаменить(СокрЛП(ДиалогСохраненияФайла.Каталог), "\", "/"),
			ДиалогСохраненияФайла.Каталог);
		#Иначе
			ПоказатьОповещениеПользователя(
			ТекстСообщения,,
			ДиалогСохраненияФайла.Каталог);
		#КонецЕсли  						
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПоСтроке(Команда)
	
	Попытка
		ИмяЯчейки = ЭтотОбъект.ТекущийЭлемент.ТекущаяОбласть.Имя;
	Исключение
		ПоказатьПредупреждение(,НСтр("ru = 'Активизируйте нужную ячейку отчета для расшифровки.'"));
		Возврат;
	КонецПопытки;
	
	Если (Найти(ИмяЯчейки , "s_220_00_") > 0) Тогда 
		МетодРасшифровки = Ложь;
		Форма220РасшифровкаСКД(ИмяЯчейки, МетодРасшифровки);
		
	ИначеЕсли (Найти(ИмяЯчейки , "Ф220_01_") > 0) И Не (ИмяЯчейки = "Ф220_01_F" ИЛИ ИмяЯчейки = "Ф220_01_G") Тогда
		МетодРасшифровки = Ложь; 
		Форма220_01Расшифровка(ИмяЯчейки, МетодРасшифровки);
	Иначе	
		ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки не поддерживается.
		|Расшифровку содержат ячейки формы, выделенные голубым цветом.'"));
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницу(Команда)
	
	ВыбСтраница = 1;
	
	ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаСтраницы", ЭтаФорма); 
	ПоказатьВводЧисла(ОповещениеВводаЗначений,ВыбСтраница, "Введите номер страницы", 5, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФорму(Команда)
	
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФормуИПриложения(Команда)
	
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФормуИПриложения");
	
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	ОткрытьФормуНастройкиСтраниц()
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчете(Команда)
	
	СохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(СохраненныйДок) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Регламентированный отчет не записан в информационной базе.'"));
		Возврат;
	КонецЕсли;
	
	ДокументОтраженияВУчете = ПолучитьЗначениеРеквизита(СохраненныйДок, "ДокументОтраженияВУчете");
	
	Если ЗначениеЗаполнено(ДокументОтраженияВУчете) Тогда
		РегламентированнаяОтчетностьКлиент.ОткрытьДокументОтраженияНалОтчетностиВУчете(СохраненныйДок, ДокументОтраженияВУчете, ЭтотОбъект);
	Иначе
		РегламентированнаяОтчетностьКлиент.СоздатьДокументОтраженияНалОтчетностиВУчете(СохраненныйДок, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ПРОЦЕДУРЫ И ФУНКЦЦИИ

#Область ОценкаПроизводительности

&НаКлиенте
Функция НачатьЗамерВремени()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		КлючеваяОперация = "Регламентированный отчет ""%1 декларация по ипн"" (заполнение)";
		КлючеваяОперация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(КлючеваяОперация,?(ЗначениеЗаполнено(КодФормы), НРег(КодФормы), "форма 220")); 
		ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент").НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеТаймера()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда 
		
		Возврат ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").НачатьЗамерВремени();
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьЗамер(ВремяНачала)
	
	Если ВремяНачала <> Неопределено 
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "Регламентированный отчет ""форма 220 декларация по ипн"" (заполнение)";
		ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьУИДЗамера()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		КлючеваяОперация = "Регламентированный отчет ""%1 декларация по ипн"" (заполнение)";
		КлючеваяОперация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(КлючеваяОперация,?(ЗначениеЗаполнено(КодФормы), НРег(КодФормы), "форма 220")); 
		Возврат ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент").НачатьЗамерВремени(Ложь, КлючеваяОперация);
	КонецЕсли;
	
КонецФункции	
	
&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент").ЗавершитьЗамерВремени(УИДЗамера);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПредыдущаяСтрНаСервере()
	
	ТекущаяСтраница = ТекущаяСтраница - 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СледующаяСтрНаСервере()
	
	ТекущаяСтраница = ТекущаяСтраница + 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокСтруктурныхЕдиниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");			
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("НалоговыйКомитет");				
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");	
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");	
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");		
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");	
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрг");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");	
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");		
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");	
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);	
	СтруктураРеквизитовФормы.Вставить("мГод");	
	СтруктураРеквизитовФормы.Вставить("мКвартал");	
	СтруктураРеквизитовФормы.Вставить("мМесяц");	
	// индивидуальные параметры формы
	СтруктураРеквизитовФормы.Вставить("мПоддержкаРаботыСоСтруктурнымиПодразделениями");
	СтруктураРеквизитовФормы.Вставить("КодСтрокиДоходОтКурсовойРазницы");		
	СтруктураРеквизитовФормы.Вставить("КодСтрокиРасходыПоКурсовойРазнице");		
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтчетномПериоде() Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ФП = истина");
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
		СтруктураРеквизитовФормы.мКвартал = Лев(СтрПериодОтчета, 1);
		СтруктураРеквизитовФормы.мМесяц = Неопределено;
	Иначе
		СтруктураРеквизитовФормы.мМесяц = Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		СтруктураРеквизитовФормы.мКвартал = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мГод = Лев(Прав(СтрПериодОтчета, 7), 4);
	
КонецПроцедуры 

&НаСервере
Процедура СохранитьнаСервере()
	
	РегламентированнаяОтчетность.СохранитьОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда		
		мСписокСтруктурныхЕдиниц = Результат;		
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц); 		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСтраницы(Значение, Параметры) Экспорт
	
	Если НЕ Значение = Неопределено Тогда  
		
		ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
		Если ТекФорма = Неопределено Тогда
			ВсегоСтраниц = 1;
		Иначе
			ВсегоСтраниц = ТекФорма.ВсегоСтраниц;
		КонецЕсли;		
		
		Если Значение = 0 Тогда
			ТекущаяСтраница = 1;
		ИначеЕсли Значение > ВсегоСтраниц Тогда
			ТекущаяСтраница = ВсегоСтраниц;
		Иначе
			ТекущаяСтраница = Значение;				
		КонецЕсли;
		
		ПослеВводаСтраницыНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеВводаСтраницыНаСервере()
	
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////
//Очистка

&НаСервере
Процедура Очистить(ТекИмяФормы, ОчиститьВсе = Ложь) Экспорт
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	// Список ячеек, очищать которые не нужно
	Если ОчиститьВсе Тогда
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодВалюты");
	Иначе
		СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
		СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Год");
		СписокПоказателейНеПодлежащихОчистке.Добавить("НомерУведомления");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаУведомления");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Нерезидент");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ПостоянноеУчереждениеЗаРК");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Условие1");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Условие2");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Условие3");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Условие4");
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодНалоговогоОргана");		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОчиститьСтруктуруДанныхИТабличноеПолеФормы(ЭтаФорма, ТекИмяФормы, ОчиститьВсе, СписокПоказателейНеПодлежащихОчистке);
	
	Если ТекИмяФормы = Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7) Тогда
		мСтруктураЗначений.Очистить();
	КонецЕсли;
	
КонецПроцедуры // Очистить()

&НаКлиенте
Процедура ОчиститьРеглОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Форма = ДополнительныеПараметры.Форма;	
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", Форма.КодФормы));
		Вложенность = ДополнительныеПараметры.ОчищатьПриложения;	
		
		ОчиститьРеглОтчетЗавершениеНаСервере(СтрокаФормы.КодФормы, СтрокаФормы.Многострочность, Вложенность)	
	КонецЕсли;
	
КонецПроцедуры 	

&НаСервере
Процедура ОчиститьРеглОтчетЗавершениеНаСервере(КодФормы, ПризнакМногострочности, Вложенность) Экспорт
	
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, ПризнакМногострочности, Вложенность);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////
// Печать

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок),,, БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати,, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Перем СтруктураГруппы;  
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ТекстСообщения = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");			
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);				
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		ВыборРасчета(КодФормы);		
	КонецЕсли; 
	
	РегламентированнаяОтчетность.СформироватьСписокПечатаемыхЛистов(ЭтаФорма);	       		
	
	Возврат Истина;                                                           
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////
// Выгрузка в ХМL 

&НаСервере
Функция ВыгрузитьВXMLНаСервере(ВыдаватьСообщение = Ложь)
	
	Возврат РегламентированнаяОтчетность.ВыгрузитьОтчетВXMLДляСОНО(ЭтотОбъект, ВыдаватьСообщение);	
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////
//Открытие основной формы

&НаКлиенте
Процедура ОбновитьПараметрыФормыНаКлиенте(Параметры) Экспорт
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	ЗаполнитьСведенияОбОтчетномПериоде();
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);		
	КонецЦикла	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормы(ТекФорма, Параметры)
	
	ЗаполнитьЗначенияСвойств(ТекФорма.СтруктураРеквизитовФормы, Параметры);
	
	ТекФорма.Налогоплательщик                     = Параметры.Налогоплательщик;	
	ТекФорма.мСписокСтруктурныхЕдиниц             = Параметры.мСписокСтруктурныхЕдиниц;
	ТекФорма.ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ТекФорма.мСписокСтруктурныхЕдиниц);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////
// Общие механизмы отчета

&НаКлиенте
Процедура СохранитьДанные() Экспорт
	
	СохранитьНаСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;	
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		ДокументОтражения = ПолучитьЗначениеРеквизита(СтруктураРеквизитовФормы.мСохраненныйДок, "ДокументОтраженияВУчете");
		Элементы.ФормаОтражениеВУчете.Заголовок = ПолучитьЗаголовокОтражениеВУчете(ДокументОтражения);
	КонецЕсли;
	
	МассивРеквизитовФормы = ЭтотОбъект.ПолучитьРеквизиты();
	
	Для Счетчик = 0 По МассивРеквизитовФормы.Количество()-1 Цикл		
		РеквизитФормы = МассивРеквизитовФормы[Счетчик];
		Если РеквизитФормы.ТипЗначения.СодержитТип(Тип("ТабличныйДокумент")) Тогда
			ЭтотОбъект[РеквизитФормы.Имя] = ЭтотОбъект[РеквизитФормы.Имя];	
		КонецЕсли;
	КонецЦикла;				
	
	мСтруктураЗначений = Новый Структура;
	
	Если СтруктураРеквизитовФормы.Свойство("СформироватьФормуОтчетаАвтоматически") И СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически <> Неопределено Тогда
		
		ЗначениеТаймера = ЗначениеТаймера();
		
		ЗаполнитьАвтоНаСервере();
		
		ЗаписатьЗамер(ЗначениеТаймера);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	РегламентированнаяОтчетность.ВосстановитьСохраненныйОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, ЭтотОбъект.КодФормы, Ложь, Ложь);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ЭтаФорма.КодФормы);
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма);	
	
	Форма220РасчетНаСервере(Неопределено, Неопределено, КодФормы);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметры(ТекущееИмяФормы) Экспорт
	
	Форма = РеквизитФормыВЗначение("мСписокФормБезИерархии").Строки.Найти(ТекущееИмяФормы, "КодФормы");
	
	Если Форма.Многострочность = 1 Тогда // заполнение структуры шапки(подвала) для многострочных форм
		
		Если НЕ ((Налогоплательщик  = Неопределено) Или (Налогоплательщик = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации"))) Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН", Налогоплательщик.ИдентификационныйНомер, Ложь);
		КонецЕсли;                                                  
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год", СтруктураРеквизитовФормы.мГод, Ложь);
		
	Иначе //обычная форма
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год", СтруктураРеквизитовФормы.мГод);
		Если НЕ ((Налогоплательщик  = Неопределено) Или (Налогоплательщик = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации"))) Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН", Налогоплательщик.ИдентификационныйНомер);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущееИмяФормы = Лев(мВыбраннаяФорма, СтрДлина(мВыбраннаяФорма)-7) Тогда 
		
		//заполним основные сведения об организации
		ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы);
		СписокРасчетов  = Элементы.СписокРасчетов.СписокВыбора.Получить(1).Значение;
		ЗаполнитьВидРасчета("Очередная");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "КодВалюты", "KZT");
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьВидРасчета(ВидРасчета)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "Первоначальная", "");	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "Очередная",      "");     	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "Дополнительная", "");	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "ПоУведомлению",  "");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "Ликвидационная", "");
	
	Если ВидРасчета = "Первоначальная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "Первоначальная", "Х");
	ИначеЕсли ВидРасчета = "Очередная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "Очередная",      "Х");				
	ИначеЕсли ВидРасчета = "Дополнительная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "Дополнительная", "Х");				
	ИначеЕсли ВидРасчета = "ПоУведомлению" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "ПоУведомлению",  "Х");				
	ИначеЕсли ВидРасчета = "Ликвидационная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "Ликвидационная", "Х");				
	КонецЕсли;
	
	Если ВидРасчета = "ПоУведомлению" Тогда
		Форма220ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Ложь;
		Форма220ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита  = Ложь;
	Иначе
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "НомерУведомления", "");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "ДатаУведомления",  "");
		Форма220ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Истина;
		Форма220ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита  = Истина;
	КонецЕсли;
	
	Модифированность = Истина;
	
КонецПроцедуры // ЗаполнитьВидРасчета()

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	 	
	
	Очистить(КодФормы, Истина);
	Если КодФормы = "Форма220" Тогда
		Очистить("Форма220_01", Истина);
		Очистить("Форма220_02", Истина);
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	УИДЗамера = ПолучитьУИДЗамера();
	
	Результат = ЗаполнитьВФонеНаСервере(ДополнительныеПараметры.Перезаполнить);
	
	Если ТипЗнч(Результат) = Тип("Структура") И НЕ Результат.ЗаданиеВыполнено Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	Иначе
		ЗафиксироватьДлительностьКлючевойОперации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьнаСервере();
		Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы)
	
	ОргСведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(Налогоплательщик, ДатаПодписи, Налогоплательщик.НалоговыйКомитет);
	//Если организация не указана то не выводим никаких сведений
	Если ОргСведения = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализируем переменные
	НаимЮЛПол = ""; // Полное наименование 	
	ИИН_БИН = ""; 	// ИИН_БИН	
	Руководитель = ""; 	// ФИО руководителя				
	КодНалоговогоОргана = ""; // Код налогового органа	
	
	// Получаем данные
	ОргСведения.Свойство("БИН_ИИН",   			ИИН_БИН);
	ОргСведения.Свойство("ПолноеНаименование", 	НаимЮЛПол);	
	ОргСведения.Свойство("Руководитель",		Руководитель);	
	ОргСведения.Свойство("КодНалоговогоОргана", КодНалоговогоОргана);
	
	// Производим операции связанные с текущей формой отчетности
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН", ИИН_БИН);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ОргНазв", НаимЮЛПол); 	
	
	// Разбиваем название организации
	НазваниеОрганизацииДляРазбиения = НаимЮЛПол;
	НачПозиция = 1;
	Для Шаг = 1 По 3 Цикл
		ДлинаСтроки = ЭтотОбъект[ТекущееИмяФормы + "ПолеТабличногоДокументаСтраница1"].Области["ОргНазв" +Шаг ].ТипЗначения.КвалификаторыСтроки.Длина;
		НазОрганизации = Сред(НазваниеОрганизацииДляРазбиения, НачПозиция, ДлинаСтроки); 
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ОргНазв" + Шаг, НазОрганизации);
		НачПозиция = НачПозиция + ДлинаСтроки;
	КонецЦикла;
	
	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		//определяем страну резиденства в зависимости от страны резидентства физлица
		СсылкаФизЛица = Налогоплательщик.ИндивидуальныйПредприниматель;
		Если ЗначениеЗаполнено(СсылкаФизЛица) Тогда			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("парамФизЛицо",    СсылкаФизЛица);
			Запрос.УстановитьПараметр("парамПериодПо",   СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			Запрос.УстановитьПараметр("парамПустаяДата", '00010101');
			
			Запрос.Текст = "ВЫБРАТЬ
			|	ФизическиеЛица.Ссылка,
			|	ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) КАК Страна,
			|	ЕСТЬNULL(ГражданствоФизЛиц.НомерНалоговойРегистрацииВСтранеРезидентства, """") КАК НомерНалоговойРегистрации
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамПериодПо, ФизЛицо = &парамФизЛицо) КАК ГражданствоФизЛиц
			|		ПО (ИСТИНА)
			|ГДЕ
			|	ФизическиеЛица.Ссылка = &парамФизЛицо";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				Если Выборка.Страна = Справочники.КлассификаторСтранМира.Казахстан
					ИЛИ Выборка.Страна = Справочники.КлассификаторСтранМира.ПустаяСсылка() Тогда
					РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "РезидентРК", "Х");
					УстановитьВидимостьПолейРезидентства(ЭтотОбъект, Истина);
					РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "НерезидентРК", "");
					РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "КодСтраныРезидентства", "");
					РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "НомерНалоговойРегСтраныРезидентства", "");
				Иначе                                                                                       						
					РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "РезидентРК", "");
					РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "НерезидентРК", "Х");
					УстановитьВидимостьПолейРезидентства(ЭтотОбъект, Ложь);
					РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "КодСтраныРезидентства", Выборка.Страна.Код);
					РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "НомерНалоговойРегСтраныРезидентства", Выборка.НомерНалоговойРегистрации);									
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "РезидентРК", "Х");
		УстановитьВидимостьПолейРезидентства(ЭтотОбъект, Истина);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "НерезидентРК", "");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "КодСтраныРезидентства", "");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "НомерНалоговойРегСтраныРезидентства", "");
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Руководитель", Руководитель);	
	// Дата подачи декларации
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ДатаПодачи", ДатаПодписи);
	
	//Код органа государственных доходов
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "КодНалоговогоОргана", КодНалоговогоОргана);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьВидимостьПолейРезидентства(Форма,Резидент)
	
	Если Резидент Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(Форма, Форма.КодФормы, "КодСтраныРезидентства", "");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(Форма, Форма.КодФормы, "НомерНалоговойРегСтраныРезидентства", "");
		Форма.Форма220ПолеТабличногоДокументаСтраница1.Области.КодСтраныРезидентства.Защита = Истина;
		Форма.Форма220ПолеТабличногоДокументаСтраница1.Области.НомерНалоговойРегСтраныРезидентства.Защита = Истина;
	Иначе			
		Форма.Форма220ПолеТабличногоДокументаСтраница1.Области.КодСтраныРезидентства.Защита = Ложь;
		Форма.Форма220ПолеТабличногоДокументаСтраница1.Области.НомерНалоговойРегСтраныРезидентства.Защита = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуНаСервере()
	
	РегламентированнаяОтчетность.УдалитьСтрокуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере()
	
	РегламентированнаяОтчетность.ДобавитьСтрокуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПанель(ПризнакОсновнойФормы,ПризнакМногострочности)
	
	Элементы.ФормаВыгрузитьВXML.Видимость = ПризнакОсновнойФормы; 
	Элементы.ФормаРасшифровка.Видимость   = ПризнакОсновнойФормы ИЛИ ПризнакМногострочности;
	Элементы.ФормаОчиститьФормуИПриложения.Видимость = ПризнакОсновнойФормы;
	Элементы.ГруппаКнопокДействияСоСтрокамиИСтраницами.Видимость = ПризнакМногострочности;	
	
КонецПроцедуры //ЗаполнитьПанель()

&НаСервере 
Процедура ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ИмяЯчейки, Значение, Расчет = Ложь)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, ИмяСтраницы, ИмяЯчейки, Значение, Расчет);				
	
КонецПроцедуры

&НаСервере 
Процедура ПередатьЗначениеВСтруктуруНаСервере(ИмяЯчейки, ЗначениеЯчейки, ПередаватьВТП = Ложь, ПередаватьВМногострочнуюЧасть = Ложь, ПоказательРасшифровки = Неопределено)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяЯчейки , ЗначениеЯчейки, ПередаватьВТП, ПередаватьВМногострочнуюЧасть, ПоказательРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаЗначения(Значение, Параметры) Экспорт
	
	Если НЕ Значение = Неопределено Тогда         	
		ПроверятьЦифрыВСтроке = Ложь;
		ПроверитьВидРасхода   = Ложь;
		ПроверитьПризнак      = Ложь;
		
		Если Параметры.Свойство("ПроверятьЦифрыВСтроке" , ПроверятьЦифрыВСтроке) И ПроверятьЦифрыВСтроке Тогда
			Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Значение) Тогда				
				ТекстСообщения = НСтр("ru = 'Значение содержит нецифровые символы, значение будет очищено'");							  
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);				
				Значение = "";
			КонецЕсли;         		
		КонецЕсли;
		
		Если Параметры.Свойство("ПроверитьВидРасхода" , ПроверитьВидРасхода) И ПроверитьВидРасхода Тогда
			Если Значение > 7 ИЛИ Значение = 0 Тогда 				
				ПоказатьПредупреждение(, НСтр("ru = 'Введен не правильный код вида расхода'"));							  				
				Значение = "";
			КонецЕсли;         		
		КонецЕсли;
		
		Если Параметры.Свойство("ПроверитьПризнак" , ПроверитьПризнак) И ПроверитьПризнак Тогда
			Если Значение > 4 ИЛИ Значение = 0 Тогда 				
				ПоказатьПредупреждение(, НСтр("ru = 'Введен не правильный признак'"));							  				
				Значение = "";
			КонецЕсли;         		
		КонецЕсли;
		
		Параметры.Область.Значение = Значение;			
		ПередатьЗначениеВМногострочнуюСтруктуру(Параметры.ИмяСтраницы, Параметры.Область.Имя, Значение, Параметры.Расчет);       
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиСтраниц(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьДанныеФормы(РезультатЗакрытия, СписокФормДерева);
	
	Модифицированность = Истина;
	
	//обновим мСписокФормБезИерархии
	Для Каждого СтрокаФормы ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
		
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы", СтрокаФормы.КодФормы));
		
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			СтрокаФормы.Выгружать               = ТекущаяСтрокаСписка.Выгружать;
			СтрокаФормы.ПоказатьСтраницу        = ТекущаяСтрокаСписка.ПоказатьСтраницу;			
			СтрокаФормы.АвтополучениеИтогов     = ТекущаяСтрокаСписка.АвтополучениеИтогов;  
			СтрокаФормы.АвтоЗаполнение          = ТекущаяСтрокаСписка.АвтоЗаполнение;  
		КонецЕсли;			
	КонецЦикла; 	
	
	Если ДополнительныеПараметры.Свойство("ТекущийРаздел") И НЕ ДополнительныеПараметры.ТекущийРаздел = Неопределено Тогда  		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(РазделыОтчета, Новый Структура("СписокФормДереваСтраницы", ДополнительныеПараметры.ТекущийРаздел));
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;			
	КонецЕсли;  	
	
КонецПроцедуры

&НаСервере
Процедура ВыборРасчета(ТекФорма, Индекс = Неопределено, Показатель = Неопределено) Экспорт
	
	Если ТекФорма = "Форма220" Тогда
		Форма220РасчетНаСервере(Неопределено, Неопределено, ТекФорма);
	ИначеЕсли ТекФорма = "Форма220_02" Тогда
		Форма220_02РасчетНаСервере(Неопределено, Неопределено, ТекФорма);		
	КонецЕсли;
	
КонецПроцедуры // ВыборРасчета()

&НаКлиенте
Процедура ОткрытьФормуНастройкиСтраниц()
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРаздел = Элементы.РазделыОтчета.ТекущиеДанные.Страницы;		
	КонецЕсли;
	
	Для Каждого ТекФорма ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
		
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы", ТекФорма.КодФормы));
		
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			ТекущаяСтрокаСписка.Выгружать               = ТекФорма.Выгружать;
			ТекущаяСтрокаСписка.ПоказатьСтраницу        = ТекФорма.ПоказатьСтраницу;			
			ТекущаяСтрокаСписка.АвтополучениеИтогов     = ТекФорма.АвтополучениеИтогов;  
			ТекущаяСтрокаСписка.АвтоЗаполнение          = ТекФорма.АвтоЗаполнение;  
		КонецЕсли;		   
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокФормДерева", СписокФормДерева);
	
	ДопПараметры = Новый Структура("ТекущийРаздел", ТекущийРаздел);
	
	ОповещениеПослеЗакрытияФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастройкиСтраниц", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.НастройкиОтчета", ПараметрыФормы, ЭтаФорма,,,, ОповещениеПослеЗакрытияФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьЧислоВРимскуюНотацию(АрабскоеЧисло, ИспЛатинскиеБуквы = Ложь) Экспорт
	
	РимскоеЧисло="";
	cRab = ДополнитьСтроку(АрабскоеЧисло,3);
	
	Если ИспЛатинскиеБуквы Тогда
		c1 = "I";c5 = "V";c10 = "X";c50 = "L";c100 ="C";c500 = "M";c1000 = "D";
		
	Иначе
		c1 = "1";c5 = "У";c10 = "Х";c50 = "Л";c100 ="С";c500 = "М";c1000 = "Д";
	КонецЕсли;
	
	nEd = Число(СтрЗаменить(Сред(cRab,3,1), " ", "0"));
	nDs = Число(СтрЗаменить(Сред(cRab,2,1), " ", "0"));
	nSt = Число(СтрЗаменить(Сред(cRab,1,1), " ", "0"));
	
	РимскоеЧисло = РимскоеЧисло + ПреобразоватьЦифруВРимскуюНотацию(nSt,c100,c500,c1000);
	РимскоеЧисло = РимскоеЧисло + ПреобразоватьЦифруВРимскуюНотацию(nDs,c10,c50,c100);
	РимскоеЧисло = РимскоеЧисло + ПреобразоватьЦифруВРимскуюНотацию(nEd,c1,c5,c10);
	
	Возврат РимскоеЧисло;
	
КонецФункции //ПреобразоватьЧислоВРимскуюНотацию

&НаКлиентеНаСервереБезКонтекста
// Выполянет преобразование цифры в римскую нотацию 
//
// Параметры
//		Цифра - число, целое, от 0 до 9
//      РимскаяЕдиница,РимскаяПятерка,РимскаяДесятка - строки, соответствующие римские цифры
//
// Возвращаемое значение
//		строка
//
// Описание
//		записывает "обычную" цифру римскими цифрами,
//		например:
//				ПреобразоватьЦифруВРимскуюНотацию(7,"I","V","X") = "VII"
//
Функция ПреобразоватьЦифруВРимскуюНотацию(Цифра, РимскаяЕдиница, РимскаяПятерка, РимскаяДесятка)
	
	РимскаяЦифра="";
	Если Цифра = 1 Тогда
		РимскаяЦифра = РимскаяЕдиница
	ИначеЕсли Цифра = 2 Тогда
		РимскаяЦифра = РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 3 Тогда
		РимскаяЦифра = РимскаяЕдиница + РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 4 Тогда
		РимскаяЦифра = РимскаяЕдиница + РимскаяПятерка;
	ИначеЕсли Цифра = 5 Тогда
		РимскаяЦифра = РимскаяПятерка;
	ИначеЕсли Цифра = 6 Тогда
		РимскаяЦифра = РимскаяПятерка + РимскаяЕдиница;
	ИначеЕсли Цифра = 7 Тогда
		РимскаяЦифра = РимскаяПятерка + РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 8 Тогда
		РимскаяЦифра = РимскаяПятерка + РимскаяЕдиница + РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 9 Тогда
		РимскаяЦифра = РимскаяЕдиница + РимскаяДесятка;
	КонецЕсли;
	Возврат РимскаяЦифра;
	
КонецФункции //ПреобразоватьЦифруВРимскуюНотацию

&НаКлиентеНаСервереБезКонтекста
Функция ДополнитьСтроку(Знач Стр, Длина, Чем = " ", Режим = 0) Экспорт
	
	СимволовДополнить = Длина - СтрДлина(Стр);
	Добавок = "";
	Для Н=1 по СимволовДополнить Цикл
		Добавок = Добавок + Чем;
	КонецЦикла;
	Возврат ?(Режим = 0, Добавок + Стр, Стр + Добавок);
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ЗначениеРеквизита)
	
	Возврат ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, ЗначениеРеквизита);										
	
КонецФункции


///////////////////////////////////////////////////////////////
// Процедуры и функции для расчета(заполнения) формы 220.00

&НаСервере
Функция АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, ИтоговаяЯчейка, СтруктураВходящихЯчеек, ПолеТабДока, РассчитыватьСумму = Истина)
	
	ИтЗначение = 0;
	
	Если РассчитыватьСумму Тогда
		
		ЗначИтоговойЯчейки = 0;
		
		СтруктураТекущихЗначений = Новый Структура();	
		// добавляем значения входящих ячеек
		Для Каждого Элемент Из СтруктураВходящихЯчеек Цикл
			ЗначениеЯчейки = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, Элемент.Ключ);
			СтруктураТекущихЗначений.Вставить(Элемент.Ключ, ЗначениеЯчейки);		
		КонецЦикла;
		
		Для Каждого Элемент Из СтруктураТекущихЗначений Цикл
			ЗначИтоговойЯчейки = ЗначИтоговойЯчейки + Элемент.Значение;
		КонецЦикла;
		
		// передаем полученное итоговое значение в структуру и на форму
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИтоговаяЯчейка, Окр(ЗначИтоговойЯчейки), ПолеТабДока);
		
		ИтЗначение = ЗначИтоговойЯчейки;
		
	Иначе	
		
		// получим значение итоговой ячейки
		ЗначИтоговойЯчейки = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИтоговаяЯчейка);
		
		СтруктураТекущихЗначений = Новый Структура();	
		// добавляем значения входящих ячеек
		Для Каждого Элемент Из СтруктураВходящихЯчеек Цикл
			ЗначениеЯчейки = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, Элемент.Ключ);
			СтруктураТекущихЗначений.Вставить(Элемент.Ключ, ЗначениеЯчейки);		
		КонецЦикла;	
		
		// Создадим структуру предыдцщих значений, она не содержит итоговую ячейку
		СтруктураПредыдущихЗначений = Новый Структура;
		Если мСтруктураЗначений <> Неопределено Тогда
			Для Каждого Элемент Из СтруктураВходящихЯчеек Цикл
				Если мСтруктураЗначений.Свойство(Элемент.Ключ) Тогда
					ЗначениеЯчейкиДо = 0;
					мСтруктураЗначений.Свойство(Элемент.Ключ, ЗначениеЯчейкиДо);
					СтруктураПредыдущихЗначений.Вставить(Элемент.Ключ, ЗначениеЯчейкиДо);		
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
		//Рассчитаем итоговую ячейку
		// В случае, если в мСтруктураЗначений еще не было добавлено предыдуших значений, то значение "ДО" будет равно 0
		// Формула, например:
		//s_300_02_004 = s_300_02_004 - s_300_02_004_i_до + s_300_02_004_i - s_300_02_004_ii_до + s_300_02_004_ii
		//					   - s_300_02_004_iii_до + s_300_02_004_iii - s_300_02_004_iv_до + s_300_02_004_iv
		//					   - s_300_02_004_v_до + s_300_02_004_v - s_300_02_004_vi_до + s_300_02_004_vi;
		
		НовЗначИтоговойЯчейки = ЗначИтоговойЯчейки;
		// + все текущие значения + значение итоговой ячейки
		Для Каждого Элемент Из СтруктураТекущихЗначений Цикл
			НовЗначИтоговойЯчейки = НовЗначИтоговойЯчейки + Элемент.Значение;
		КонецЦикла;
		// - все предыдущие значения
		Для Каждого Элемент Из СтруктураПредыдущихЗначений Цикл
			НовЗначИтоговойЯчейки = НовЗначИтоговойЯчейки - Элемент.Значение;
		КонецЦикла;
		
		// запоминаем текущие значения взодящих ячеек в мСтруктураЗначений
		Для Каждого Элемент Из СтруктураТекущихЗначений Цикл				
			мСтруктураЗначений.Вставить(Элемент.Ключ, Элемент.Значение);  //новое значение данной области 		
		КонецЦикла;
		
		// передаем полученное итоговое значение в структуру и на форму
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, ИтоговаяЯчейка, НовЗначИтоговойЯчейки, Истина);		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИтоговаяЯчейка, Окр(НовЗначИтоговойЯчейки), ПолеТабДока);			
		
		// если итоговое значение ввели меньше чем сумма входящих значений
		// то очищаем все значения, в случае если входящих значений больше одного
		// если входящее значение одно, то приравниваем его со значением итоговой ячейки
		// - Проверим сумму входящих значений
		
		ОбщаяСуммаВходящихЗначений = 0;
		Для Каждого Элемент Из СтруктураТекущихЗначений Цикл		
			ОбщаяСуммаВходящихЗначений = ОбщаяСуммаВходящихЗначений + Элемент.Значение;		
		КонецЦикла;
		
		Если НовЗначИтоговойЯчейки < 0 И ОбщаяСуммаВходящихЗначений < 0 Тогда
			КонтрольНовЗнач    = (-1) * НовЗначИтоговойЯчейки;
			КонтрольОбщаяСумма = (-1) * ОбщаяСуммаВходящихЗначений;
		Иначе
			КонтрольНовЗнач    = НовЗначИтоговойЯчейки;
			КонтрольОбщаяСумма = ОбщаяСуммаВходящихЗначений;
		КонецЕсли;
		
		Если КонтрольНовЗнач < КонтрольОбщаяСумма Тогда
			// определим количество ячеек входящих
			Если СтруктураВходящихЯчеек.Количество() = 1 Тогда
				Для Каждого Элемент Из СтруктураВходящихЯчеек Цикл
					мСтруктураЗначений.Вставить(Элемент.Ключ, НовЗначИтоговойЯчейки);  //новое значение данной области 
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, Элемент.Ключ, Окр(НовЗначИтоговойЯчейки), ПолеТабДока);			
				КонецЦикла;			
			Иначе // больше одного, то обнуляем все входящие значения
				Для Каждого Элемент Из СтруктураВходящихЯчеек Цикл
					мСтруктураЗначений.Вставить(Элемент.Ключ, 0);  //новое значение данной области 
					РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, Элемент.Ключ, 0, ПолеТабДока);			
				КонецЦикла;			
			КонецЕсли;
		КонецЕсли;
		
		ИтЗначение = НовЗначИтоговойЯчейки;
		
	КонецЕсли;
	
	Возврат ИтЗначение;
	
КонецФункции // АвтоматическийРасчетПоСтрокам()

&НаСервере
Процедура Форма220РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки, ТекИмяФормы, Изменено = Истина)
	
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, ИмяЯчейки , ЗначениеЯчейки);					
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ТекИмяФормы);			
	
	#Область Ф220_00
	//Рассчитаем ячейку s_220_00_001, с учетом входящих в нее s_220_00_001_1 - s_220_00_001_4
	Если Изменено Тогда
		Префикс = "s_220_00_001";
		СтруктураА = Новый Структура;
		Для НомерСтроки = 1 по 4 Цикл
			СтруктураА.Вставить(Префикс + "_" + НомерСтроки);
		КонецЦикла;
		Итог = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, Префикс, СтруктураА, Форма220ПолеТабличногоДокументаСтраница1, Ложь);		
	КонецЕсли;
	
	//220.00.005 Доход от уступки права требования: (220.00.005 I + 220.00.005 II)
	Если Изменено Тогда
		Префикс = "s_220_00_005";
		СтруктураА = Новый Структура;
		Для НомерСтроки = 1 по 2 Цикл
			СтруктураА.Вставить(Префикс + "_" + НомерСтроки);
		КонецЦикла;
		Итог = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, Префикс, СтруктураА, Форма220ПолеТабличногоДокументаСтраница1, Истина);		
	КонецЕсли;
	
	//Рассчитаем ячейку s_220_00_012, с учетом входящих в нее s_220_00_012__1 - s_220_00_012__5
	СтруктураА   = ПолучитьСтруктуруВходящихЯчеек("s_220_00_012");
	s_220_00_012 = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, "s_220_00_012", СтруктураА, Форма220ПолеТабличногоДокументаСтраница2, Ложь);
	
	ЯчейкаСтрока012_0  = 0;
	ЯчейкаСтрока012_1  = 0;
	ЯчейкаСтрока012_13 = 0;
	ЯчейкаСтрока012_Пр = 0;
	Для Каждого Элемент Из СтруктураА Цикл
		КодыПодстрокПоКлассификатору = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, СтрЗаменить(Элемент.Ключ, "__", "_dic__"));
		МассивКодовПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодыПодстрокПоКлассификатору, ";");
		Для Каждого КодПодстрокиПоКлассификатору Из МассивКодовПодстрок Цикл
			Если СокрЛП(КодПодстрокиПоКлассификатору) = "241-1-1" Тогда
				ЯчейкаСтрока012_1  = ЯчейкаСтрока012_1 + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, Элемент.Ключ);
			ИначеЕсли СокрЛП(КодПодстрокиПоКлассификатору) = "241-1-13" Тогда
				ЯчейкаСтрока012_13 = ЯчейкаСтрока012_13 + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, Элемент.Ключ);
			Иначе
				ЯчейкаСтрока012_Пр  = ЯчейкаСтрока012_Пр + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, Элемент.Ключ);
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЦикла;
	
	ЯчейкаСтрока012_0  = s_220_00_012;
	Строка012_Исходная = ЯчейкаСтрока012_0 - ЯчейкаСтрока012_1 - ЯчейкаСтрока012_13 - ЯчейкаСтрока012_Пр;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "Строка012_0" , ЯчейкаСтрока012_0 , ?(Изменено, Форма220ПолеТабличногоДокументаСтраница2, Неопределено));
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "Строка012_1" , ЯчейкаСтрока012_1 , ?(Изменено, Форма220ПолеТабличногоДокументаСтраница2, Неопределено));
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "Строка012_13", ЯчейкаСтрока012_13, ?(Изменено, Форма220ПолеТабличногоДокументаСтраница2, Неопределено));
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "Строка012_Пр", ЯчейкаСтрока012_Пр, ?(Изменено, Форма220ПолеТабличногоДокументаСтраница2, Неопределено));
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "Строка012_Исходная", Строка012_Исходная, ?(Изменено, Форма220ПолеТабличногоДокументаСтраница2, Неопределено));
	
	Если Изменено И ИмяЯчейки <> "s_220_00_010" Тогда
		//Рассчитаем ячейку s_220_00_010. Чтобы не происходило занижения доходов, учтем в ней сумму строки s_220_00_012
		СтруктураА = ПолучитьСтруктуруВходящихЯчеек("s_220_00_010");
		СтруктураА.Вставить("Строка012_Исходная");
		Для Каждого Элемент Из СтруктураА Цикл
			КодыПодстрокПоКлассификатору = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, СтрЗаменить(Элемент.Ключ, "__", "_dic__"));
			МассивКодовПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодыПодстрокПоКлассификатору, ";");
			Для Каждого КодПодстроки Из МассивКодовПодстрок Цикл
				//Если СтрНайти(КодПодстроки, "226-1-13") Тогда
				//	СтруктураАА = Новый Структура("Строка012_13");
				//	ЗначениеПодстроки014 = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, Элемент.Ключ, СтруктураАА, Форма220ПолеТабличногоДокументаСтраница2, Ложь);		
				//КонецЕсли;
				Если СтрНайти(КодПодстроки, "226-1-16") Тогда
					СтруктураАА = Новый Структура("Строка012_1");
					ЗначениеПодстроки012 = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, Элемент.Ключ, СтруктураАА, Форма220ПолеТабличногоДокументаСтраница2, Ложь);		
				КонецЕсли;
				Если СтрНайти(КодПодстроки, "226-1-25") Тогда
					СтруктураАА = Новый Структура("Строка012_Пр");
					ЗначениеПодстроки012 = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, Элемент.Ключ, СтруктураАА, Форма220ПолеТабличногоДокументаСтраница2, Ложь);		
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		s_220_00_010 = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, "s_220_00_010", СтруктураА, Форма220ПолеТабличногоДокументаСтраница2, Ложь);		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_00_010", s_220_00_010, ?(Изменено, Форма220ПолеТабличногоДокументаСтраница2, Неопределено));
	КонецЕсли;
	
	
	//220.00.011 СОВОКУПНЫЙ ГОДОВОЙ ДОХОД (сумма с 220.00.001 по 220.00.010)
	ИтогЗначение = 0 ;
	Для НомерСтроки = 1 по 10 Цикл
		ИмяГрафы = "s_220_00_" + Формат(НомерСтроки,"ЧЦ=3; ЧВН=");
		ИтогЗначение = ИтогЗначение + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяГрафы);
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_00_011", Окр(ИтогЗначение), ?(Изменено, Форма220ПолеТабличногоДокументаСтраница2, Неопределено));
	
	//220.00.014 Корректировка дохода физического лица в соответствии с пунктом 1 статьи 341 Налогового кодекса, в том числе 220.00.014 I
	Если Изменено Тогда
		Префикс = "s_220_00_014";
		СтруктураА = Новый Структура;
		СтруктураА.Вставить(Префикс + "__1");
		Итог = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, Префикс, СтруктураА, Форма220ПолеТабличногоДокументаСтраница2, Ложь);		
	КонецЕсли;
	
	// 220.00.015 СОВОКУПНЫЙ ГОДОВОЙ ДОХОД С УЧЕТОМ КОРРЕКТИРОВОК
	//(220.00.011 - 220.00.012 + или - 220.00.013 - 220.00.014)
	СГДИтог = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_011")
	- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_012")
	+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_013")
	- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_014");
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_00_015", Окр(СГДИтог), ?(Изменено, Форма220ПолеТабличногоДокументаСтраница2, Неопределено));
	
	//Рассчитаем ячейку 220.00.016.III
	НомерНач = КодСимвола("a");
	НомерКон = КодСимвола("h");
	ИтогЗначение = 0 ;
	Для ИмяЯчейки = НомерНач  По НомерКон Цикл
		ИмяГрафы = "s_220_00_016_3_" + Символ(ИмяЯчейки);
		ИтогЗначение = ИтогЗначение + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяГрафы); 
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_00_016_3", Окр(ИтогЗначение), ?(Изменено, Форма220ПолеТабличногоДокументаСтраница2, Неопределено));			
	
	//Рассчитаем ячейку 220.00.016
	ИтогЗначение = 0;
	Значение_016I    = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_016_1"); 
	Значение_016II   = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_016_2"); 
	Значение_016III  = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_016_3"); 
	Значение_016IV   = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_016_4"); 
	Значение_016V    = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_016_5"); 
	Значение_016VI   = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_016_6"); 
	Значение_016VII  = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_016_7"); 
	Значение_016VIII = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_016_8"); 
	Значение_016IX   = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_016_9"); 
	
	ИтогЗначение16 = (Значение_016I - Значение_016II + Значение_016III + Значение_016IV + Значение_016V - Значение_016VI - Значение_016VII
	- Значение_016VIII - Значение_016IX);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_00_016", Окр(ИтогЗначение16), ?(Изменено, Форма220ПолеТабличногоДокументаСтраница2, Неопределено));			
	
	//220.00.023 Вычеты по фиксированным активам (220.02.009)
	Строка011 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "Строка011");
	Строка012 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "Строка012");
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_00_023", Окр(Строка011+Строка012), ?(Изменено, Форма220ПолеТабличногоДокументаСтраница3, Неопределено));
	
	//220.00.030	Вычет сумм компенсаций при служебных командировках, в том числе:
	//(220.00.030 I + 220.00.030 II)
	Если Изменено Тогда
		Префикс = "s_220_00_030";
		СтруктураА = Новый Структура;
		Для НомерСтроки = 1 по 2 Цикл
			СтруктураА.Вставить(Префикс + "_" + НомерСтроки);
		КонецЦикла;
		Итог = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, Префикс, СтруктураА, Форма220ПолеТабличногоДокументаСтраница3, Ложь);		
	КонецЕсли;
	
	//не расчетная строка в СОНО
	//220.00.032 Налоговые вычеты физического лица в соответствии со статьей 342 Налогового кодекса, в том числе:
	//(220.00.032 I + 220.00.032 II + 220.00.032 III)
	Если Изменено Тогда
		Префикс = "s_220_00_032";
		СтруктураА = Новый Структура;
		Для НомерСтроки = 1 по 4 Цикл
			СтруктураА.Вставить(Префикс + "_" + НомерСтроки);
		КонецЦикла;
		Итог = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, Префикс, СтруктураА, Форма220ПолеТабличногоДокументаСтраница3, Ложь);		
	КонецЕсли;
	
	// 220.00.034 I. вычеты (сумма с 220.00.016 по 220.00.033)
	ИтогЗначение = 0 ;
	Для НомерСтроки = 16 по 33 Цикл
		ИмяГрафы = "s_220_00_" + Формат(НомерСтроки,"ЧЦ=3; ЧВН=");
		ИтогЗначение = ИтогЗначение + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяГрафы);
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_00_034_1", Окр(ИтогЗначение), ?(Изменено, Форма220ПолеТабличногоДокументаСтраница3, Неопределено));
	
	// 220.00.034. ВСЕГО ВЫЧЕТОВ (сумма с 220.00.034 I по 220.00.034 II)
	ВсегоВычетов = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_034_1") + 
					РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_034_2");	
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_00_034", Окр(ВсегоВычетов), ?(Изменено, Форма220ПолеТабличногоДокументаСтраница3, Неопределено));			
	
	// 220.00.035 Корректировка доходов и вычетов - разность подстрок
	Корректировка = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_035_1")
	- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_035_2");
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_00_035", Окр(Корректировка), ?(Изменено, Форма220ПолеТабличногоДокументаСтраница3, Неопределено));		
	
	//220.00.038 НАЛОГООБЛАГАЕМЫЙ ДОХОД (УБЫТОК) (220.00.015 - 220.00.034 + 220.00.035 + 220.00.036 – 220.00.037)
	Значение_015    = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_015"); 
	Значение_034   = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_034"); 
	Значение_035  = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_035"); 
	Значение_036   = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_036"); 
	Значение_037    = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_037"); 
	
	ИтогЗначение38 = (Значение_015 - Значение_034 + Значение_035 + Значение_036 - Значение_037);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_00_038", Окр(ИтогЗначение38), ?(Изменено, Форма220ПолеТабличногоДокументаСтраница4, Неопределено));
	
	//220.00.040	Вычет сумм компенсаций при служебных командировках, в том числе:
	//(220.00.040 I + 220.00.040 II)
	Если Изменено Тогда
		Префикс = "s_220_00_040";
		СтруктураА = Новый Структура;
		Для НомерСтроки = 1 по 2 Цикл
			СтруктураА.Вставить(Префикс + "_" + НомерСтроки);
		КонецЦикла;
		Итог = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, Префикс, СтруктураА, Форма220ПолеТабличногоДокументаСтраница4, Ложь);		
	КонецЕсли;
	
	// 220.00.041 ВСЕГО НАЛОГООБЛАГАЕМОГО ДОХОДА (УБЫТКА)(220.00.038 – 220.00.040)
	ВсегоОблагаемыйДоход = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_038")
	- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_040");
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_00_041", Окр(ВсегоОблагаемыйДоход), ?(Изменено, Форма220ПолеТабличногоДокументаСтраница4, Неопределено));			
	
	//220.00.042	Суммарная прибыль КИК и ПУ КИК
	//(220.00.042 I + 220.00.042 II)
	Если Изменено Тогда
		Префикс = "s_220_00_042";
		СтруктураА = Новый Структура;
		Для НомерСтроки = 1 по 2 Цикл
			СтруктураА.Вставить(Префикс + "_" + НомерСтроки);
		КонецЦикла;
		Итог = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, Префикс, СтруктураА, Форма220ПолеТабличногоДокументаСтраница4, Ложь);		
	КонецЕсли;


	// 220.00.043 облагаемый доход КИК и ПУ КИК с учетом перенесенных убытков. 
	//Определяется как разница строк 220.00.042 I и 220.00.045 В (220.00.042 I - 220.00.045 В). 
	//Если строка 220.00.045 В больше строки 220.00.042 I, в строке 220.00.043 указать ноль.
	ВсегоОблагаемыйДоходСКИК = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_042_1")
	- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_045_b");
	
	Если ВсегоОблагаемыйДоходСКИК < 0 Тогда
		ВсегоОблагаемыйДоходСКИК = 0;
	КонецЕсли;
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_00_043", Окр(ВсегоОблагаемыйДоходСКИК), ?(Изменено, Форма220ПолеТабличногоДокументаСтраница4, Неопределено));			
	
	
	// 220.00.045 Убыток, подлежащий переносу (220.00.041 + 220.00.044 + 220.02.008I)
	//  в строке 220.00.045 указывается убыток, подлежащий переносу в соответствии с пунктом 1 статьи 300 Налогового кодекса. 
	//Если строка 220.00.041 имеет отрицательное значение, строка 220.00.045 определяется как сумма модуля строки 220.00.041, и строк 220.00.044, 220.02.008 I. 
	//Если строка 220.00.041 имеет положительное значение, в строку 220.00.045 переносится строка сумма строк 220.00.044 и 220.02.008 I;
	Строка008_1 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "Строка008_1"); 
	Строка041 	= РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_041");
	Строка043 	= РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_043");
	Строка044 	= РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_044");
	Если Строка041 < 0 Тогда
		Строка041 	= - Строка041;
	Иначе
		Строка041 	= 0;
	КонецЕсли;
	УбытокКПереносу = Строка041 + Строка044 + Строка008_1;
	//Если НЕ ЗначениеЗаполнено(ИмяЯчейки) ИЛИ ИмяЯчейки = "s_220_00_041" ИЛИ ИмяЯчейки = "s_220_00_044" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_00_045", Окр(УбытокКПереносу), ?(Изменено, Форма220ПолеТабличногоДокументаСтраница4, Неопределено));			
	//КонецЕсли;
	
	//220.00.046  Уменьшение облагаемого дохода в соответствии со статьей 288 Налогового кодекса, в том числе:
	Если Изменено Тогда
		Префикс = "s_220_00_046";
		СтруктураА = Новый Структура;
		СтруктураА.Вставить(Префикс + "_a");
		СтруктураА.Вставить(Префикс + "_b");
		Итог = АвтоматическийРасчетПоСтрокам(ТекИмяФормы, ТаблицаДанных, Префикс, СтруктураА, Форма220ПолеТабличногоДокументаСтраница4, Ложь);		
	КонецЕсли;
	
	
	// 220.00.047	Налогооблагаемый доход с учетом уменьшения (220.00.041 - 220.00.046)
	//В случае если строка 220.00.046 больше строки 220.00.041, в строке 220.00.047 указывается ноль;
	НОДСУчетомУменьшения = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_041")
	- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_046");
	Если НОДСУчетомУменьшения < 0 Тогда
		НОДСУчетомУменьшения = 0;
	КонецЕсли;	
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_00_047", Окр(НОДСУчетомУменьшения), ?(Изменено, Форма220ПолеТабличногоДокументаСтраница4, Неопределено));			
	

	// 220.00.049 НАЛОГООБЛАГАЕМЫЙ ДОХОД С УЧЕТОМ ПЕРЕНЕСЕННЫХ УБЫТКОВ (220.00.047 - 220.00.048)
	НОДСУчетомУбытков = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_047")
	- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_048");
	
	Если НОДСУчетомУбытков < 0 Тогда					
		НОДСУчетомУбытков = 0;
	КонецЕсли;	
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_00_049", Окр(НОДСУчетомУбытков), ?(Изменено, Форма220ПолеТабличногоДокументаСтраница4, Неопределено));			
	
	
	// 220.00.051 ИПН с налогооблагаемого дохода (220.00.049 х 220.00.050)																						
	ИПН = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_049")
	* РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_050") / 100;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_00_051", Окр(ИПН), ?(Изменено, Форма220ПолеТабличногоДокументаСтраница4, Неопределено));			
	
	
	// 220.00.052	Исчисленная сумма ИПН (220.00.051 - 220.00.052 I  - 220.00.052 II - 220.00.052 III - 220.00.052 IV - 220.00.052 V - 220.00.052 VI)
	ИПНИсчисленный = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_051")
	- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_052_1")
	- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_052_2")
	- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_052_3")
	- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_052_4")
	- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_052_5")
	- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_052_6");
	
	Если ИПНИсчисленный < 0 Тогда
		ИПНИсчисленный = 0;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_00_052", Окр(ИПНИсчисленный), ?(Изменено, Форма220ПолеТабличногоДокументаСтраница5, Неопределено));			
	
	// 220.00.053 ИПН с облагаемого дохода КИК и ПУ КИК в соответствии с подпунктом 4) статьи 223 Налогового кодекса (220.00.043 х 220.00.050) 
	//Определяется как произведение строк 220.00.043 и 220.00.050																					
	ИПНСДоходаКИК4 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_043")
	* РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_050")/100;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_00_053", Окр(ИПНСДоходаКИК4), ?(Изменено, Форма220ПолеТабличногоДокументаСтраница5, Неопределено));			
	
	// 220.00.054 ИПН с облагаемого дохода КИК и ПУ КИК в соответствии с подпунктом 5) статьи 223 Налогового кодекса(220.00.042 II х 220.00.050) 
	//Определяется как произведение строк 220.00.042 II и 220.00.050 																			
	ИПНСДоходаКИК5 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_042_2")
	* РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_050")/100;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_00_054", Окр(ИПНСДоходаКИК5), ?(Изменено, Форма220ПолеТабличногоДокументаСтраница5, Неопределено));			
	
	// 220.00.055 итоговая сумма ИПН КИК и ПУ КИК с учетом уменьшения за налоговый период в соответствии с пунктом 2 статьи 359 Налогового кодекса. 
	//Определяется как разница строк 220.00.053 и 220.00.052 II (220.00.053 – 220.00.052 II). 
	//Если полученная разница меньше ноля, то в строке 220.00.055 указывается ноль;																			
	ИтоговаяСуммаИПНСДоходаКИК = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_053")
	- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_052_2");
	
	Если ИтоговаяСуммаИПНСДоходаКИК < 0 Тогда					
		ИтоговаяСуммаИПНСДоходаКИК = 0;
	КонецЕсли;	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_00_055", Окр(ИтоговаяСуммаИПНСДоходаКИК), ?(Изменено, Форма220ПолеТабличногоДокументаСтраница5, Неопределено));			
	

	// 220.00.056 итоговая сумма исчисленного ИПН, за исключением ИПН с облагаемого дохода КИК и ПУ КИК, в соответствии с подпунктом 4) статьи 223 Налогового кодекса, с учетом уменьшения. 
	//Определяется как сумма строк 220.00.052 и 220.00.054 (220.00.052 + 220.00.054)																		
	ИтоговаяСуммаИсчисленногоИПН = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_052")
	+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_00_054");
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_00_056", Окр(ИтоговаяСуммаИсчисленногоИПН), ?(Изменено, Форма220ПолеТабличногоДокументаСтраница5, Неопределено));			
		
	#КонецОбласти
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ТекИмяФормы, ТаблицаДанных);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////
// Процедуры и функции для расчета(заполнения) формы 220.01

&НаКлиенте
Процедура Форма220_01ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	//СсылкаРасшифровки = ВыбранноеЗначение;
	//
	//ОбластьРасшифровки = ЭтаФорма.ТекущийЭлемент.ТекущаяОбласть;	
	//НомерСтроки = Сред(ОбластьРасшифровки.Имя, Найти(ОбластьРасшифровки.Имя, "__") + 2);
	//
	//Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
	//	ИмяГруппы = "Страница1";                                                    
	//	Ячейка  = "Ф220_01_B"; 			
	//	
	//	Форма220_01ОбработкаПодбораНаСервере(СсылкаРасшифровки, Ячейка, ИмяГруппы, НомерСтроки); 		
	//	
	//КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если ЭтаФорма.Элементы.ПанельФорма220_01.ТекущаяСтраница = ЭтаФорма.Элементы.ПанельФорма220_01Страница1 Тогда
			ИмяГруппы = "Страница1";     
			Ячейка = "Ф220_01_B";             
			
			СсылкаРасшифровки = ВыбранноеЗначение;
			
			ОбластьРасшифровки = ЭтаФорма.Элементы.Форма220_01ПолеТабличногоДокументаСтраница1.ТекущаяОбласть;    
			НомерСтроки = Сред(ОбластьРасшифровки.Имя, Найти(ОбластьРасшифровки.Имя, "__") + 2);
			
			Форма220_01ОбработкаПодбораНаСервере(СсылкаРасшифровки, Ячейка, ИмяГруппы, НомерСтроки);
		ИначеЕсли ЭтаФорма.Элементы.ПанельФорма220_01.ТекущаяСтраница = ЭтаФорма.Элементы.ПанельФорма220_01Страница2 Тогда
			ИмяГруппы = "Страница1";     
			Ячейка = "Ф220_01_B";             
			
			СсылкаРасшифровки = ВыбранноеЗначение;
			
			ОбластьРасшифровки = ЭтаФорма.Элементы.Форма220_01ПолеТабличногоДокументаСтраница2.ТекущаяОбласть;    
			НомерСтроки = Сред(ОбластьРасшифровки.Имя, Найти(ОбластьРасшифровки.Имя, "__") + 2);
			
			Форма220_01ОбработкаПодбораНаСервере(СсылкаРасшифровки, Ячейка, ИмяГруппы, НомерСтроки);
		КонецЕсли;         
		
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаСервере
Процедура Форма220_01ОбработкаПодбораНаСервере(Расшифровка, ИмяЯчейки, ИмяГруппы, НомерСтроки) Экспорт   
	
	Если ИмяЯчейки = "Ф220_01_B" Тогда
		
		ОбластьИИН_БИН 		 	= "Ф220_01_B__" + НомерСтроки;
		ОблостьКодСтраны		= "Ф220_01_C__" + НомерСтроки;
		ОбластьНомерРегистрации = "Ф220_01_D__" + НомерСтроки;
		
		Если Лев(Расшифровка.КБЕ, 1) = "2" Тогда
			Если СокрЛП(Расшифровка.НомерНалоговойРегистрацииВСтранеРезидентства) = "" Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Номер налоговой регистрации в стране резидентства контрагента %1 не заполнен'"),
				Строка(Расшифровка.Наименование)); 				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Расшифровка); 
				
				СтрокаНомерНалоговойРегистрации = "";
			ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Расшифровка.НомерНалоговойРегистрацииВСтранеРезидентства) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В Номере налоговой регистрации в стране резидентства контрагента %1  имеются символы, отличные от цифр (0..9)'"),
				Строка(Расшифровка.Наименование)); 				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Расшифровка); 			
				
				СтрокаНомерНалоговойРегистрации = "";
			Иначе						
				СтрокаНомерНалоговойРегистрации = Расшифровка.НомерНалоговойРегистрацииВСтранеРезидентства;
			КонецЕсли;
		Иначе 
			СтрокаНомерНалоговойРегистрации = "";
		КонецЕсли;
		
		Если СокрЛП(Расшифровка.ИдентификационныйКодЛичности) = "" Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'ИИН/БИН контрагента %1  не заполнен'"),
			Строка(Расшифровка.Наименование)); 				
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Расшифровка); 				
			СтрокаБИНКонтрагента = "";                                                                             						
		ИначеЕсли  НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Расшифровка.ИдентификационныйКодЛичности)  ТОгда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ' В ИИН/БИН контрагента %1 имеются символы, отличные от цифр (0..9)'"),
			Строка(Расшифровка.Наименование)); 				
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Расшифровка); 				
			СтрокаБИНКонтрагента = "";						
		Иначе
			СтрокаБИНКонтрагента = Расшифровка.ИдентификационныйКодЛичности;
		КонецЕсли; 
		
		Если СокрЛП(Расшифровка.СтранаРезидентства.Код) = "" ИЛИ Лев(Расшифровка.КБЕ, 1) <> "2" Тогда 
			СтрокаКодСтраны = "";                                                                             						
		Иначе
			СтрокаКодСтраны = Расшифровка.СтранаРезидентства.КодАльфа3;
		КонецЕсли; 
		
		Форма220_01ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН_БИН].Значение          = СтрокаБИНКонтрагента; 
		Форма220_01ПолеТабличногоДокументаСтраница1.Области[ОблостьКодСтраны].Значение        = СтрокаКодСтраны; 
		Форма220_01ПолеТабличногоДокументаСтраница1.Области[ОбластьНомерРегистрации].Значение = СтрокаНомерНалоговойРегистрации; 
		
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьИИН_БИН,   СтрокаБИНКонтрагента,, Расшифровка); 
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОблостьКодСтраны, СтрокаКодСтраны,, Расшифровка); 
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьНомерРегистрации, СтрокаНомерНалоговойРегистрации,, Расшифровка); 
		
		Форма220_01ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН_БИН].Расшифровка 		 = Расшифровка; 
		Форма220_01ПолеТабличногоДокументаСтраница1.Области[ОблостьКодСтраны].Расшифровка 	     = Расшифровка; 
		Форма220_01ПолеТабличногоДокументаСтраница1.Области[ОбластьНомерРегистрации].Расшифровка = Расшифровка; 
		
	КонецЕсли;
	
КонецПроцедуры 


///////////////////////////////////////////////////////////////
// Процедуры и функции для расчета(заполнения) формы 220.04

&НаСервере
Процедура Форма220_02РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки, ТекИмяФормы, Изменено = Истина)
	
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, ИмяЯчейки, ЗначениеЯчейки);					
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы);	
	//Рассчитаем итоговые ячейки
	
	Для Н = 1 По 10 Цикл
		Если Н = 5 Тогда
			Продолжить;
		КонецЕсли;
		Если Изменено Тогда
			Если Н >= 1 И Н <= 5 Тогда
				НомерСтраницы = "1";
			ИначеЕсли Н >= 5 И Н <= 10 Тогда
				НомерСтраницы = "2";                                                
			Иначе
			КонецЕсли;
		КонецЕсли;
		Номер = Формат(Н, "ЧЦ=2; ЧДЦ=0; ЧВН=");
		// Итоговая строка
		ИтогЗначение = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_02_0" + Номер + "_1")
		+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_02_0" + Номер + "_2")
		+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_02_0" + Номер + "_3")
		+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_02_0" + Номер + "_4");
		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_02_0" + Номер, Окр(ИтогЗначение), ?(Изменено, ЭтотОбъект["Форма220_02ПолеТабличногоДокументаСтраница" + НомерСтраницы], Неопределено));			
		
	КонецЦикла;      
	
	//Расчитываем ячейки s_220_02_005_X
	ИтогЗначение = 0 ;
	Для Н = 1 По 4 Цикл
		ИтогЗначение = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_02_001" + "_" + Н)
		+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_02_002" + "_" + Н)
		- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_02_003" + "_" + Н)
		+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_02_004" + "_" + Н);
		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_02_005"+ "_" + Н, Окр(ИтогЗначение), ?(Изменено, ЭтотОбъект["Форма220_02ПолеТабличногоДокументаСтраница1"], Неопределено));		
	КонецЦикла;
	
	//Расчитываем ячейки s_220_02_005
	ИтогЗначение = 0 ;
	Для Н = 1 По 4 Цикл
		ИмяГрафы = "s_220_02_005_" + Н;
		ИтогЗначение = ИтогЗначение + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяГрафы); 
	КонецЦикла;
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_02_005", Окр(ИтогЗначение), ?(Изменено, ЭтотОбъект["Форма220_02ПолеТабличногоДокументаСтраница1"], Неопределено));		
	
	//Расчитываем ячейки s_220_02_011_1
	ИтогЗначение = 0 ;
	Н = 1;
	ИтогЗначение = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_02_006" + "_" + Н)
	+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_02_007" + "_" + Н)
	+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_02_009" + "_" + Н)
	+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_02_010" + "_" + Н);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_02_011" + "_" + Н, Окр(ИтогЗначение), ?(Изменено, ЭтотОбъект["Форма220_02ПолеТабличногоДокументаСтраница2"], Неопределено));		
	
	//Расчитываем ячейки s_220_02_011_X
	ИтогЗначение = 0 ;
	Для Н = 2 По 4 Цикл
		ИтогЗначение = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_02_006" + "_" + Н)
		+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_02_007" + "_" + Н)
		+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_02_008" + "_" + Н)
		+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_02_009" + "_" + Н)
		+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_220_02_010" + "_" + Н);
		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_02_011" + "_" + Н, Окр(ИтогЗначение), ?(Изменено, ЭтотОбъект["Форма220_02ПолеТабличногоДокументаСтраница2"], Неопределено));		
	КонецЦикла;
	
	//Расчитываем ячейки s_220_02_011
	ИтогЗначение = 0 ;
	Для Н = 1 По 4 Цикл
		ИмяГрафы = "s_220_02_011_" + Н;
		ИтогЗначение = ИтогЗначение + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяГрафы); 
	КонецЦикла;
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_220_02_011" , Окр(ИтогЗначение), ?(Изменено, ЭтотОбъект["Форма220_02ПолеТабличногоДокументаСтраница2"], Неопределено));		
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);
	
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ТекИмяФормы);
	
КонецПроцедуры   //Форма220_02Расчет()

///////////////////////////////////////////////////////////////
// Процедуры и функции расшифровки

&НаКлиентеНаСервереБезКонтекста
Функция Форма220ПолучитьСписокКодовСтрокВключаемыхВРасшифровку(ИмяЯчейки)
	КодыСтрокРасшифровки = Новый СписокЗначений;
	
	Если ИмяЯчейки = "220.00.016.VIII" Тогда 
		
		КодыСтрокРасшифровки.Добавить("220.00.016.VIII");
		КодыСтрокРасшифровки.Добавить("220.00.016.IIIA");
		КодыСтрокРасшифровки.Добавить("220.00.016.IIIB");
		КодыСтрокРасшифровки.Добавить("220.00.016.IIIC");
		КодыСтрокРасшифровки.Добавить("220.00.016.IIID");
		КодыСтрокРасшифровки.Добавить("220.00.016.IIIE");
		КодыСтрокРасшифровки.Добавить("220.00.016.IIIF");
		КодыСтрокРасшифровки.Добавить("220.00.016.IIIG");
		КодыСтрокРасшифровки.Добавить("220.00.016.IIIH");
	ИначеЕсли ИмяЯчейки = "220.00.016.III" Тогда
		КодыСтрокРасшифровки.Добавить("220.00.016.III");
		КодыСтрокРасшифровки.Добавить("220.00.016.IIIA");
		КодыСтрокРасшифровки.Добавить("220.00.016.IIIB");
		КодыСтрокРасшифровки.Добавить("220.00.016.IIIC");
		КодыСтрокРасшифровки.Добавить("220.00.016.IIID");
		КодыСтрокРасшифровки.Добавить("220.00.016.IIIE");
		КодыСтрокРасшифровки.Добавить("220.00.016.IIIF");
		КодыСтрокРасшифровки.Добавить("220.00.016.IIIG");
		КодыСтрокРасшифровки.Добавить("220.00.016.IIIH");
	ИначеЕсли ИмяЯчейки = "220.00.001" Тогда
		КодыСтрокРасшифровки.Добавить("220.00.001");
		КодыСтрокРасшифровки.Добавить("220.00.001.I");
		КодыСтрокРасшифровки.Добавить("220.00.001.II");
		КодыСтрокРасшифровки.Добавить("220.00.001.III");
		КодыСтрокРасшифровки.Добавить("220.00.001.IV");
	ИначеЕсли ИмяЯчейки = "220.00.005" Тогда
		КодыСтрокРасшифровки.Добавить("220.00.005");
		КодыСтрокРасшифровки.Добавить("220.00.005.I");
		КодыСтрокРасшифровки.Добавить("220.00.005.II");
	ИначеЕсли ИмяЯчейки = "220.00.030" Тогда
		КодыСтрокРасшифровки.Добавить("220.00.030");
		КодыСтрокРасшифровки.Добавить("220.00.030.I");
		КодыСтрокРасшифровки.Добавить("220.00.030.II");
	ИначеЕсли ИмяЯчейки = "220.00.040" Тогда
		КодыСтрокРасшифровки.Добавить("220.00.040");
		КодыСтрокРасшифровки.Добавить("220.00.040.I");
		КодыСтрокРасшифровки.Добавить("220.00.040.II");
	Иначе 		
		КодыСтрокРасшифровки.Добавить(ИмяЯчейки);
	КонецЕсли;
	
	Возврат КодыСтрокРасшифровки;
	
	
КонецФункции //Форма300ПолучитьСписокКодовСтрокВключаемыхВРасшифровку

&НаСервере
Функция Форма220ПолучитьСписокКодовСтрокВключаемыхВРасшифровкуСложныеСтроки(ИмяЯчейки)
	КодыСтрокРасшифровки = Новый СписокЗначений;
	
	Если ИмяЯчейки = "220.00.010" Тогда
		КодыСтрокРасшифровки.Добавить("220.00.010.К");
		КодыСтрокРасшифровки.Добавить("220.00.010");
		КодыСтрокРасшифровки.Добавить("220.00.012");
		мМакетКодовСтрок = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("КодыСтрокНалоговыхДеклараций");
		ДополнитьСписокКодовСтрокИзКлассификатора("220.00.010"  , КодыСтрокРасшифровки, мМакетКодовСтрок);
		ДополнитьСписокКодовСтрокИзКлассификатора("220.00.012"  , КодыСтрокРасшифровки, мМакетКодовСтрок);
	ИначеЕсли ИмяЯчейки = "220.00.012" Тогда
		КодыСтрокРасшифровки.Добавить("220.00.012");
		мМакетКодовСтрок = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("КодыСтрокНалоговыхДеклараций");
		ДополнитьСписокКодовСтрокИзКлассификатора("220.00.012"  , КодыСтрокРасшифровки, мМакетКодовСтрок);
	ИначеЕсли ИмяЯчейки = "220.00.014" Тогда
		КодыСтрокРасшифровки.Добавить("220.00.014");
		мМакетКодовСтрок = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("КодыСтрокНалоговыхДеклараций");
		ДополнитьСписокКодовСтрокИзКлассификатора("220.00.014"  , КодыСтрокРасшифровки, мМакетКодовСтрок);
	ИначеЕсли ИмяЯчейки = "220.00.010.226-1-25" Тогда
		КодыСтрокРасшифровки.Добавить("220.00.010.226-1-25");
		мМакетКодовСтрок = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("КодыСтрокНалоговыхДеклараций");
		ДополнитьСписокКодовСтрокИзКлассификатора("220.00.012"  , КодыСтрокРасшифровки, мМакетКодовСтрок);
		Элемент = КодыСтрокРасшифровки.НайтиПоЗначению("220.00.012.241-1-1");
		КодыСтрокРасшифровки.Удалить(Элемент);
		Элемент = КодыСтрокРасшифровки.НайтиПоЗначению("220.00.012.241-1-13");
		КодыСтрокРасшифровки.Удалить(Элемент);
	ИначеЕсли ИмяЯчейки = "220.00.010.226-1-23" Тогда
		КодыСтрокРасшифровки.Добавить("220.00.010.226-1-23");
		КодыСтрокРасшифровки.Добавить("220.00.012.241-1-13");
	ИначеЕсли ИмяЯчейки = "220.00.010.226-1-16" Тогда
		КодыСтрокРасшифровки.Добавить("220.00.010.226-1-16");
		КодыСтрокРасшифровки.Добавить("220.00.012.241-1-1");
	ИначеЕсли ИмяЯчейки = "220.00.032" Тогда
		КодыСтрокРасшифровки.Добавить("220.00.032");
		КодыСтрокРасшифровки.Добавить("220.00.032.I");
		КодыСтрокРасшифровки.Добавить("220.00.032.II");
	ИначеЕсли ИмяЯчейки = "220.00.046" Тогда
		КодыСтрокРасшифровки.Добавить("220.00.046");
		КодыСтрокРасшифровки.Добавить("220.00.046.A");
		КодыСтрокРасшифровки.Добавить("220.00.046.B");
	КонецЕсли;
	
	Возврат КодыСтрокРасшифровки;
	
	
КонецФункции

&НаСервере
Функция Форма220ПолучитьСписокКодовДоходов()
	
	
	СписокДохКодовСтрок = Новый СписокЗначений;
	
	СписокДохКодовСтрок.Добавить("220.00.001");
	СписокДохКодовСтрок.Добавить("220.00.001.I");
	СписокДохКодовСтрок.Добавить("220.00.001.II");
	СписокДохКодовСтрок.Добавить("220.00.001.III");
	СписокДохКодовСтрок.Добавить("220.00.001.IV");
	СписокДохКодовСтрок.Добавить("220.00.002");
	СписокДохКодовСтрок.Добавить("220.00.003");
	СписокДохКодовСтрок.Добавить("220.00.004");
	СписокДохКодовСтрок.Добавить("220.00.005");
	СписокДохКодовСтрок.Добавить("220.00.005.I");
	СписокДохКодовСтрок.Добавить("220.00.005.II");
	СписокДохКодовСтрок.Добавить("220.00.006");
	СписокДохКодовСтрок.Добавить("220.00.007");
	СписокДохКодовСтрок.Добавить("220.00.008");
	СписокДохКодовСтрок.Добавить("220.00.009");
	СписокДохКодовСтрок.Добавить("220.00.010");
	СписокДохКодовСтрок.Добавить("220.00.012");
	СписокДохКодовСтрок.Добавить("220.00.013");
	СписокДохКодовСтрок.Добавить("220.00.014");
	СписокДохКодовСтрок.Добавить("220.00.035.I");
	СписокДохКодовСтрок.Добавить("220.00.036");
	СписокДохКодовСтрок.Добавить("220.00.040");
	СписокДохКодовСтрок.Добавить("220.00.040.II");
	СписокДохКодовСтрок.Добавить("220.00.046");
	СписокДохКодовСтрок.Добавить("220.00.046.A");
	СписокДохКодовСтрок.Добавить("220.00.046.B");

	
	мМакетКодовСтрок = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("КодыСтрокНалоговыхДеклараций");
	
	ДополнитьСписокКодовСтрокИзКлассификатора("220.00.010"  , СписокДохКодовСтрок, мМакетКодовСтрок);
	ДополнитьСписокКодовСтрокИзКлассификатора("220.00.012"  , СписокДохКодовСтрок, мМакетКодовСтрок);
	ДополнитьСписокКодовСтрокИзКлассификатора("220.00.014"  , СписокДохКодовСтрок, мМакетКодовСтрок);
	
	Возврат СписокДохКодовСтрок;
	
КонецФункции


&НаСервере
Функция Форма220ПолучитьСписокКодовРасходов()
	
	СписокРасКодовСтрок = Новый СписокЗначений;
	Для Н = 17 По 22 Цикл
		Номер = Формат(Н, "ЧЦ=2; ЧВН=");
		СписокРасКодовСтрок.Добавить("220.00.0" + Номер);
	КонецЦикла;
	Для Н = 24 По 33 Цикл
		Номер = Формат(Н, "ЧЦ=2; ЧВН=");
		СписокРасКодовСтрок.Добавить("220.00.0" + Номер);
	КонецЦикла;
	
	СписокРасКодовСтрок.Добавить("220.00.030.I");
	СписокРасКодовСтрок.Добавить("220.00.030.II");
	СписокРасКодовСтрок.Добавить("220.00.032.I");
	СписокРасКодовСтрок.Добавить("220.00.032.II");
	СписокРасКодовСтрок.Добавить("220.00.032.III");
	СписокРасКодовСтрок.Добавить("220.00.032.IV");
	СписокРасКодовСтрок.Добавить("220.00.034.II");
	СписокРасКодовСтрок.Добавить("220.00.037");
	СписокРасКодовСтрок.Добавить("220.00.044");
	СписокРасКодовСтрок.Добавить("220.00.045.A");
	СписокРасКодовСтрок.Добавить("220.00.045.B");
	СписокРасКодовСтрок.Добавить("220.00.046");
	СписокРасКодовСтрок.Добавить("220.00.048");
	
	мМакетКодовСтрок = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("КодыСтрокНалоговыхДеклараций");
	
	Возврат СписокРасКодовСтрок;
	
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Функция Форма220ПолучитьСписокСчетовРасходов()
	
	СписокСчетовРасходов = Новый СписокЗначений;
	СписокСчетовРасходов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.НезавершенноеСтроительство")); 	//счет Н330 (2400)        	
	СписокСчетовРасходов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.Расходы"));    					//счет Н800  (70)
	СписокСчетовРасходов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.Производство_")); 		
	Возврат СписокСчетовРасходов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Форма220ПолучитьСписокКодовИсключенийИзРасшифровки()
	
	
	СписокКодовДляИсключения = Новый СписокЗначений;
	СписокКодовДляИсключения.Добавить("s_220_00_011");
	СписокКодовДляИсключения.Добавить("s_220_00_015");
	СписокКодовДляИсключения.Добавить("s_220_00_016");
	СписокКодовДляИсключения.Добавить("s_220_00_016_1");	
	СписокКодовДляИсключения.Добавить("s_220_00_016_2");	
	//СписокКодовДляИсключения.Добавить("s_220_00_016_3");	
	
	//СписокКодовДляИсключения.Добавить("s_220_00_017_1");
	
	СписокКодовДляИсключения.Добавить("s_220_00_023");
	СписокКодовДляИсключения.Добавить("s_220_00_034");
	СписокКодовДляИсключения.Добавить("s_220_00_034_1");
	
	СписокКодовДляИсключения.Добавить("s_220_00_035");
	СписокКодовДляИсключения.Добавить("s_220_00_038");
	СписокКодовДляИсключения.Добавить("s_220_00_039");
	СписокКодовДляИсключения.Добавить("s_220_00_040_1");
	СписокКодовДляИсключения.Добавить("s_220_00_041");
	СписокКодовДляИсключения.Добавить("s_220_00_042");
	СписокКодовДляИсключения.Добавить("s_220_00_042_1");
	СписокКодовДляИсключения.Добавить("s_220_00_042_2");
	СписокКодовДляИсключения.Добавить("s_220_00_043");
	СписокКодовДляИсключения.Добавить("s_220_00_045");
	СписокКодовДляИсключения.Добавить("s_220_00_047");
	СписокКодовДляИсключения.Добавить("s_220_00_049");
	
	СписокКодовДляИсключения.Добавить("s_220_00_050");
	СписокКодовДляИсключения.Добавить("s_220_00_051");
	СписокКодовДляИсключения.Добавить("s_220_00_052");
	СписокКодовДляИсключения.Добавить("s_220_00_052_1");
	СписокКодовДляИсключения.Добавить("s_220_00_052_2");
	СписокКодовДляИсключения.Добавить("s_220_00_052_3");
	СписокКодовДляИсключения.Добавить("s_220_00_052_4");
	СписокКодовДляИсключения.Добавить("s_220_00_052_5");
	СписокКодовДляИсключения.Добавить("s_220_00_052_6");
	СписокКодовДляИсключения.Добавить("s_220_00_053");
	СписокКодовДляИсключения.Добавить("s_220_00_054");
	СписокКодовДляИсключения.Добавить("s_220_00_055");
	СписокКодовДляИсключения.Добавить("s_220_00_056");
	СписокКодовДляИсключения.Добавить("s_220_00_057");
	
	Возврат СписокКодовДляИсключения;		
	
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Функция Форма220ПолучитьСписокКодовИсключенийИзРасчетаРасшифровки(СтруктураРеквизитовФормы)
	
	КодыДляИсключенияИзОсновногоЗапроса = Новый СписокЗначений;
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("220.00.016");
	КодыДляИсключенияИзОсновногоЗапроса.Добавить(СтруктураРеквизитовФормы.КодСтрокиДоходОтКурсовойРазницы);
	КодыДляИсключенияИзОсновногоЗапроса.Добавить(СтруктураРеквизитовФормы.КодСтрокиРасходыПоКурсовойРазнице);
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("220.00.016.IIIA"); 					
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("220.00.016.IIIB"); 					
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("220.00.016.IIIC"); 					
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("220.00.016.IIID"); 					
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("220.00.016.IIIE"); 					
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("220.00.016.IIIF"); 					
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("220.00.016.IIIG"); 					
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("220.00.016.IIIH");
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("220.00.016.IV");
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("220.00.016.V");
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("220.00.016.VI");
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("220.00.016.VII");
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("220.00.016.VIII");
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("220.00.016.IX");
	КодыДляИсключенияИзОсновногоЗапроса.Добавить("220.00.016%");
	
	Возврат  КодыДляИсключенияИзОсновногоЗапроса;
	
	
КонецФункции


&НаСервере
Функция ПолучитьАдресМакетаСКД(Знач ИмяРаздела, ТекстЗапроса = "", ИмяЯчейки = "")
	
	Если КодФормы = "Форма220" Тогда
		
		ОбщаяСКД = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("МакетСКДФорма2202023Кв1");
		Если ИмяРаздела = Неопределено Тогда
			СхемаКомпоновкиДанных = ОбщаяСКД;
		Иначе
			СхемаКомпоновкиДанных = ОбщаяСКД.ВложенныеСхемыКомпоновкиДанных.Найти(ИмяРаздела).Схема;
		КонецЕсли;
		
		Если СтрНайти(ИмяЯчейки, "220.00.045.A") <> 0
			ИЛИ СтрНайти(ИмяЯчейки, "220.00.046.A") <> 0
			ИЛИ СтрНайти(ИмяЯчейки, "220.00.046.B") <> 0 Тогда
				
			СтрокаПоиска = " В(&КодСтрокиРасшифровки)";
			СтрокаЗамены = " ПОДОБНО """ + ИмяЯчейки + "%" + """";
			СхемаКомпоновкиДанных.НаборыДанных[0].Запрос =
				СтрЗаменить(СхемаКомпоновкиДанных.НаборыДанных[0].Запрос, СтрокаПоиска, СтрокаЗамены);
				
		КонецЕсли;
			
		Если ИмяЯчейки = "220.00.046" Тогда

			СтрокаПоиска = "ВТ_СведенияОКодахСтрок.КодСтроки В(&КодСтрокиРасшифровки)";
			СтрокаДополнения = " ИЛИ ВТ_СведенияОКодахСтрок.КодСтроки ПОДОБНО """ + ИмяЯчейки + ".[AB]%" + """";
			СхемаКомпоновкиДанных.НаборыДанных[0].Запрос =
				СтрЗаменить(СхемаКомпоновкиДанных.НаборыДанных[0].Запрос, СтрокаПоиска, СтрокаПоиска + СтрокаДополнения);

			СтрокаПоиска = "НалоговыйОборотыПоДоходам.КодСтроки В(&КодСтрокиРасшифровки)";
			СтрокаДополнения = " ИЛИ НалоговыйОборотыПоДоходам.КодСтроки ПОДОБНО """ + ИмяЯчейки + ".[AB]%" + """";
			СхемаКомпоновкиДанных.НаборыДанных[0].Запрос =
				СтрЗаменить(СхемаКомпоновкиДанных.НаборыДанных[0].Запрос, СтрокаПоиска, "(" + СтрокаПоиска + СтрокаДополнения + ")");
				
		КонецЕсли;
		
	ИначеЕсли КодФормы = "Форма220_01" Тогда
		
		СхемаКомпоновкиДанных = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("РасшифровкаФормыНаСКД");
		
		ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных[0];
		НаборДанных = БухгалтерскиеОтчетыВызовСервера.ДобавитьНаборДанныхЗапрос(СхемаКомпоновкиДанных.НаборыДанных, ИсточникДанных, "НаборДанныхИсточникДанных");
		
		НаборДанных.Запрос = ТекстЗапроса;
		ДобавитьПоляНабораДанных(НаборДанных, СхемаКомпоновкиДанных);
		
		ПараметрыСКД = СхемаКомпоновкиДанных.Параметры.Добавить();
		ПараметрыСКД.ДоступенСписокЗначений = Истина;
		ПараметрыСКД.Заголовок = "КодСтроки";
		ПараметрыСКД.Имя = "КодСтроки"; 
		ПараметрыСКД.ВключатьВДоступныеПоля = Истина;
		ПараметрыСКД.ОграничениеИспользования = Ложь;
		ПараметрыСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		
		ПараметрыСКД = СхемаКомпоновкиДанных.Параметры.Добавить();		
		ПараметрыСКД.Заголовок = "ОбщаяРасшифровка";
		ПараметрыСКД.Имя = "ОбщаяРасшифровка"; 
		ПараметрыСКД.ВключатьВДоступныеПоля = Истина;
		ПараметрыСКД.ОграничениеИспользования = Ложь;
		ПараметрыСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		
		ПараметрыСКД = СхемаКомпоновкиДанных.Параметры.Добавить();
		ПараметрыСКД.ДоступенСписокЗначений = Истина;
		ПараметрыСКД.Заголовок = "СписокСчетов";
		ПараметрыСКД.Имя = "СписокСчетов"; 
		ПараметрыСКД.ВключатьВДоступныеПоля = Ложь;
		ПараметрыСКД.ОграничениеИспользования = Истина;
		
		ПараметрыСКД = СхемаКомпоновкиДанных.Параметры.Добавить();
		ПараметрыСКД.ДоступенСписокЗначений = Истина;
		ПараметрыСКД.Заголовок = "СписокСчетовНалогов";
		ПараметрыСКД.Имя = "СписокСчетовНалогов"; 
		ПараметрыСКД.ВключатьВДоступныеПоля = Ложь;
		ПараметрыСКД.ОграничениеИспользования = Истина;
		
		ПараметрыСКД = СхемаКомпоновкиДанных.Параметры.Добавить();
		ПараметрыСКД.ДоступенСписокЗначений = Истина;
		ПараметрыСКД.Заголовок = "СписокОрганизаций";
		ПараметрыСКД.Имя = "СписокОрганизаций"; 
		ПараметрыСКД.ВключатьВДоступныеПоля = Ложь;
		ПараметрыСКД.ОграничениеИспользования = Истина;
		
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура Форма220РасшифровкаСКД(ИмяЯчейки, МетодРасшифровки)
	
	СписокКодовДляИсключения = Форма220ПолучитьСписокКодовИсключенийИзРасшифровки();
	Если СписокКодовДляИсключения.НайтиПоЗначению(ИмяЯчейки) <> Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки не поддерживается.
		|Расшифровку содержат ячейки формы, выделенные голубым цветом.'"));
		Возврат;
	КонецЕсли;
	
	ИмяЯчейкиВходящее = ИмяЯчейки;
	
	ИмяЯчейки = ПреобразоватьИмяЯчейкиВКодСтрокиДекларации(ИмяЯчейки);
	
	// определим коды строк регистра для включения в расшифровку данной ячейки
	КодыСтрокРасшифровки = Новый СписокЗначений;
	Если ИмяЯчейки = "220.00.010" 
		ИЛИ ИмяЯчейки = "220.00.012" 
		ИЛИ ИмяЯчейки = "220.00.014" 
		ИЛИ ИмяЯчейки = "220.00.032"
		ИЛИ ИмяЯчейки = "220.00.046" Тогда
		КодыСтрокРасшифровки = Форма220ПолучитьСписокКодовСтрокВключаемыхВРасшифровкуСложныеСтроки(ИмяЯчейки);
	Иначе
		
		КодыСтрокРасшифровки = Форма220ПолучитьСписокКодовСтрокВключаемыхВРасшифровку(ИмяЯчейки);
	КонецЕсли;
	
	
	КодПодстрокиПолный = "";
	Если СтрНайти(ИмяЯчейкиВходящее, "s_220_00_010__") <> 0 Тогда
		КодыСтрокРасшифровки = Новый СписокЗначений;
		КодыПодстроки = Форма220ПолеТабличногоДокументаСтраница2.Область(СтрЗаменить(ИмяЯчейкиВходящее, "__", "_dic__")).Значение;
		МассивКодовПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодыПодстроки, ";");
		Для Каждого КодПодстроки Из МассивКодовПодстрок Цикл
			Если КодПодстроки = "226-1-25" 
				ИЛИ КодПодстроки = "226-1-23" 
				ИЛИ КодПодстроки = "226-1-16" Тогда
				КодыСтрокРасшифровки = Форма220ПолучитьСписокКодовСтрокВключаемыхВРасшифровкуСложныеСтроки("220.00.010." + СокрЛП(КодПодстроки));
			Иначе
				КодыСтрокРасшифровки.Добавить(Форма220ПолучитьСписокКодовСтрокВключаемыхВРасшифровку("220.00.010." + СокрЛП(КодПодстроки)));
			КонецЕсли;
		КонецЦикла;
		КодПодстрокиПолный = СокрЛП(КодыПодстроки);
	ИначеЕсли СтрНайти(ИмяЯчейкиВходящее, "s_220_00_012__") ИЛИ СтрНайти(ИмяЯчейкиВходящее, "s_220_00_014__") Тогда
		КодыСтрокРасшифровки = Новый СписокЗначений;
		КодыПодстроки = Форма220ПолеТабличногоДокументаСтраница2.Область(СтрЗаменить(ИмяЯчейкиВходящее, "__", "_dic__")).Значение;
		МассивКодовПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодыПодстроки, ";");
		Для Каждого КодПодстроки Из МассивКодовПодстрок Цикл
			КодыСтрокРасшифровки.Добавить(Форма220ПолучитьСписокКодовСтрокВключаемыхВРасшифровку(Лев(ИмяЯчейки, 11) + СокрЛП(КодПодстроки)));
			
		КонецЦикла;
		КодПодстрокиПолный = СокрЛП(КодыПодстроки);
	КонецЕсли;
	
	СписокДохКодовСтрок  = Форма220ПолучитьСписокКодовДоходов();
	СписокСчетовРасходов = Форма220ПолучитьСписокСчетовРасходов();
	СписокРасКодовСтрок =  Форма220ПолучитьСписокКодовРасходов();
	
	КодыДляИсключенияИзОсновногоЗапроса = Форма220ПолучитьСписокКодовИсключенийИзРасчетаРасшифровки(СтруктураРеквизитовФормы);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", 	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ТипДанных", 		"РегистрыБухгалтерии");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяОбъекта", 	"Налоговый");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяТаблицы", 	"Обороты");
	
	ИмяРазделаРасшифровки = "Декларация по КПН:" + СтруктураРеквизитовФормы.мГод;
	Если СокрЛП(ИмяЯчейки)	 = "220.00.016.IV" Тогда		
		ИмяСхемыКомпоновкиДанных = "РасшифровкаВычетаПоРеализованнымТоварам_ЗаработнаяПлата";
		ИмяРазделаРасшифровки = ИмяРазделаРасшифровки + ", Заработная плата";
	ИначеЕсли СокрЛП(ИмяЯчейки)	 = "220.00.016.V" Тогда		
		ИмяСхемыКомпоновкиДанных = "РасшифровкаВычетаПоРеализованнымТоварам_РБП";				
		ИмяРазделаРасшифровки = ИмяРазделаРасшифровки + ", Вычеты по реализованным товарам";
	ИначеЕсли СокрЛП(ИмяЯчейки)	 = "220.00.016.VI" Тогда				
		ИмяСхемыКомпоновкиДанных = "РасшифровкаВычетаПоРеализованнымТоварам_РемонтВА";							
		ИмяРазделаРасшифровки = ИмяРазделаРасшифровки + ", Вычеты по реализованным товарам (ремонт)";
	ИначеЕсли СокрЛП(ИмяЯчейки)	 = "220.00.016.VII" Тогда		
		ИмяСхемыКомпоновкиДанных = "РасшифровкаВычетаПоРеализованнымТоварам_ВключеноВСтоимостьВА";
		ИмяРазделаРасшифровки = ИмяРазделаРасшифровки + ", Вычеты по реализованным товарам (ВА)";
	ИначеЕсли СокрЛП(ИмяЯчейки)	 = "220.00.016.VIII" Тогда		
		ИмяСхемыКомпоновкиДанных = "РасшифровкаВычетаПоРеализованнымТоварам_ПР";				
		ИмяРазделаРасшифровки = ИмяРазделаРасшифровки + ", Вычеты по реализованным товарам (ПР)";
	ИначеЕсли СокрЛП(ИмяЯчейки)	 = "220.00.016.IX" Тогда		
		ИмяСхемыКомпоновкиДанных = "РасшифровкаВычетаПоРеализованнымТоварам_РБПОстатки";								
	ИначеЕсли Лев(ИмяЯчейки,10)	 = "220.00.016" Тогда
		ИмяСхемыКомпоновкиДанных = "РасшифровкаВычетаПоРеализованнымТоварам_Приобретение";			
		ИмяРазделаРасшифровки = ИмяРазделаРасшифровки + ", Вычеты по реализованным товарам";		
	ИначеЕсли СтрНайти(ИмяЯчейки, "220.00.010")	 <> 0 
		ИЛИ СтрНайти(ИмяЯчейки, "220.00.012")	 <> 0 
		ИЛИ СтрНайти(ИмяЯчейки, "220.00.014")	 <> 0
		ИЛИ СтрНайти(ИмяЯчейки, "220.00.045")	 <> 0
		ИЛИ СтрНайти(ИмяЯчейки, "220.00.046")	 <> 0 Тогда
		ИмяСхемыКомпоновкиДанных = Неопределено;
		ИмяРазделаРасшифровки = "Декларация по КПН:" + СтруктураРеквизитовФормы.мГод + ", Доходы";
	ИначеЕсли СокрЛП(ИмяЯчейки)	 = "220.00.032.III" Тогда
		ИмяСхемыКомпоновкиДанных = "Вычеты";			
		ИмяРазделаРасшифровки = ИмяРазделаРасшифровки + ", Стандартные вычеты";	
	ИначеЕсли СокрЛП(ИмяЯчейки)	 = "220.00.032.IV" Тогда
		ИмяСхемыКомпоновкиДанных = "ПрочиеВычеты";			
		ИмяРазделаРасшифровки = ИмяРазделаРасшифровки + ", Прочие вычеты";	
	ИначеЕсли СокрЛП(ИмяЯчейки)	 = "220.00.032" Тогда
		ИмяСхемыКомпоновкиДанных = "РасшифровкаЗатрат32";			
		ИмяРазделаРасшифровки = ИмяРазделаРасшифровки + ", Вычеты";	
	ИначеЕсли СписокДохКодовСтрок.НайтиПоЗначению(ИмяЯчейки) = Неопределено Тогда		
		ИмяСхемыКомпоновкиДанных = "РасшифровкаЗатрат";	
		ИмяРазделаРасшифровки = ИмяРазделаРасшифровки + ", Вычеты";
	Иначе
		ИмяСхемыКомпоновкиДанных = Неопределено;
		ИмяРазделаРасшифровки = "Декларация по КПН:" + СтруктураРеквизитовФормы.мГод + ", Доходы";
	КонецЕсли;	
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ПолучитьАдресМакетаСКД(ИмяСхемыКомпоновкиДанных, , ВРег(СокрЛП(ИмяЯчейки))));
	
	// Отборы
	//ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	//ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";	
	//БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Налогоплательщик",  Налогоплательщик, ВидСравненияКомпоновкиДанных.Равно);
	
	// Группировки	
	МассивГруппировок = Новый Массив();
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "КодСтроки", НСтр("ru = 'Код строки'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));	
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка",  МассивГруппировок);
	
	// Сортировка
	ПользовательскиеСортировки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ПорядокКомпоновкиДанных"));
	ПользовательскиеСортировки.ИдентификаторПользовательскойНастройки = "Порядок";
	
	НовыйЭлементПорядка = ПользовательскиеСортировки.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовыйЭлементПорядка.Использование  = Истина;
	НовыйЭлементПорядка.Поле  = новый ПолеКомпоновкиДанных("Регистратор");
	
	// Параметры
	
	МассивПараметровДанных = Новый Массив();   
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодСтрокиРасшифровки",   КодыСтрокРасшифровки);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "НачалоПериода",          НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КонецПериода",           КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Организация",            Налогоплательщик);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокОрганизаций",      мСписокСтруктурныхЕдиниц);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ПустаяОрганизация",      ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ПустоеЗначение",         Неопределено);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ВидСубконтоЗатрат",      ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ВидСубконтоДоходов",     ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.Доходы"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ВидСубконтоКонтрагенты", ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты"));	
	
	СписокСчетовАктивов = Новый СписокЗначений;
	СписокСчетовАктивов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.Запасы")); 		  			  	//счет 1310
	СписокСчетовАктивов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.НезавершенноеПроизводство")); 		//счет 1340	
	СписокСчетовАктивов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.ПрочиеЗапасы")); 					//счет 1350	
	СписокСчетовАктивов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.ПрочиеАктивы_")); 					//счет 1600
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСчетовАктивов",     СписокСчетовАктивов); 	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСчетов30Н",			ПредопределенноеЗначение("ПланСчетов.Налоговый.РасчетыСКонтрагентамиИПрочиеВзаиморасчеты"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет7900Н",				ПредопределенноеЗначение("ПланСчетов.Налоговый.РасходыНаРемонтВА"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СчетРБП",	                ПредопределенноеЗначение("ПланСчетов.Налоговый.РасходыБудущихПериодов"));              	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет7410",				ПредопределенноеЗначение("ПланСчетов.Налоговый.ПрочиеРасходыПоВнеоборотнымАктивам"));
	
	СписокСчетовНалогов = Новый СписокЗначений;
	СписокСчетовНалогов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.РасчетыСБюджетомПоНалогамИОтчислениям"));
	СписокСчетовНалогов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.ОбязательстваПоДругимОбязательнымИДобровольнымПлатежам"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСчетовНалогов",		СписокСчетовНалогов);
	СписокСчетовНал = Новый СписокЗначений;
	СписокСчетовНал.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.Производство_")); 	//счет 80        	
	СписокСчетовНал.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.Расходы"));    //счет Н800    	
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СчетаРасходов", СписокСчетовНал); 
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСчетовРасходов", СписокСчетовРасходов); 
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет2400Н",				ПредопределенноеЗначение("ПланСчетов.Налоговый.НезавершенноеСтроительство"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет2500Н",				ПредопределенноеЗначение("ПланСчетов.Налоговый.ПреренцииДоВводаВЭксплуатацию"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет3350",				ПредопределенноеЗначение("ПланСчетов.Налоговый.ВзаиморасчетыСРаботниками"));
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет7410",				ПредопределенноеЗначение("ПланСчетов.Налоговый.ПрочиеРасходыПоВнеоборотнымАктивам"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет000",				    ПредопределенноеЗначение("ПланСчетов.Налоговый.Вспомогательный"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КапитальныйРемонт",		ПредопределенноеЗначение("Перечисление.ВидыРемонтаВА.Капитальный"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодСтроки",				"220.00%");
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет1620Н",				ПредопределенноеЗначение("ПланСчетов.Налоговый.РасходыБудущихПериодов"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет890",                 ПредопределенноеЗначение("ПланСчетов.Налоговый.ПрочиеРасходыПоВнеоборотнымАктивам"));
	
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодСтрокЗП",              "220.00.016.IV");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодСтрокиA",              "220.00.016.IIIA");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодСтрокиРБП",            "220.00.016%");
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодСтрокиДоходОтКурсовойРазницы",	  СтруктураРеквизитовФормы.КодСтрокиДоходОтКурсовойРазницы);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодСтрокиРасходыПоКурсовойРазнице", СтруктураРеквизитовФормы.КодСтрокиРасходыПоКурсовойРазнице );
	
	КодСтрокиКурсовойРазницы = Новый СписокЗначений;
	КодСтрокиКурсовойРазницы.Добавить(СтруктураРеквизитовФормы.КодСтрокиДоходОтКурсовойРазницы);
	КодСтрокиКурсовойРазницы.Добавить(СтруктураРеквизитовФормы.КодСтрокиРасходыПоКурсовойРазнице);
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодСтрокиКурсовойРазницы", КодСтрокиКурсовойРазницы);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СчетаДоходов",             ПредопределенноеЗначение("ПланСчетов.Налоговый.Доходы"));  //Н700
	
	СписокСчетовСтрокиA = Новый СписокЗначений;
	СписокСчетовСтрокиA.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.Товары")); 					//счет 1330Н        	
	СписокСчетовСтрокиA.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.СырьеИМатериалы"));    		//счет 1310Н    	
	СписокСчетовСтрокиA.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.ПрочиеЗапасы")); 			//счет 1350		
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСчетовСтрокиA", СписокСчетовСтрокиA); 
	
	КодыСтрок = Новый СписокЗначений;
	КодыСтрок.Добавить("220.00.016.IIIA"); 					
	КодыСтрок.Добавить("220.00.016.IIIB"); 					
	КодыСтрок.Добавить("220.00.016.IIIC"); 					
	КодыСтрок.Добавить("220.00.016.IIID"); 					
	КодыСтрок.Добавить("220.00.016.IIIE"); 					
	КодыСтрок.Добавить("220.00.016.IIIF"); 					
	КодыСтрок.Добавить("220.00.016.IIIG"); 					
	КодыСтрок.Добавить("220.00.016.IIIH"); 					
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодыСтрок", КодыСтрок); 
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокДохКодовСтрок", СписокДохКодовСтрок); 
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокРасКодовСтрок", СписокРасКодовСтрок); 
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодыДляИсключенияИзОсновногоЗапроса", КодыДляИсключенияИзОсновногоЗапроса); 
	
	СписокДохНеподлежащихНалог = Новый СписокЗначений;
	СписокДохНеподлежащихНалог.Добавить("220.00.038");
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокДохНеподлежащихНалог", СписокДохНеподлежащихНалог); 
	
	Если ИмяЯчейки = "220.00.016.IIIA" Тогда 
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодСтрокиКоррВычетов", "220.00.035.II");
	КонецЕсли;
	
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПараметрыДанных", МассивПараметровДанных);
	
	ПользовательскиеПоля = ПользовательскиеНастройки.Элементы.Добавить(Тип("ВыбранныеПоляКомпоновкиДанных"));	
	ПользовательскиеПоля.ИдентификаторПользовательскойНастройки = "Выбор";	
	
	Если СокрЛП(ИмяЯчейки)	 = "220.00.032.III" Тогда
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ВидВычета", "Вид вычета");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Показатель", "Показатель");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Размер", "Размер");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Количество", "Количество");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаВычета", "Сумма вычета");
		
	ИначеЕсли СокрЛП(ИмяЯчейки)	 = "220.00.032.IV" Тогда
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ВидВычета", "Вид вычета");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Месяц", "Месяц");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Размер", "Размер");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Разрешено", "Разрешено к вычету");
		
	ИначеЕсли СокрЛП(ИмяЯчейки)	 = "220.00.032" Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СтатьяЗатрат",     "Статья декларации");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ВидВычета", "Вид вычета");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "КорСубконто1", 	"Кор субконто 1");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаВДекларации", "Сумма в декларации");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаНУ", "Сумма НУ");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаПР", "Сумма ПР");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаВР", "Сумма ВР");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Сумма",   "Сумма");
		
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СтатьяЗатрат",     "Статья декларации");	
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "КорСубконто1", 	"Кор субконто 1");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаВДекларации", "Сумма в декларации");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаНУ", "Сумма НУ");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаПР", "Сумма ПР");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаВР", "Сумма ВР");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Сумма",   "Сумма");
		
		Если ИмяЯчейки = "220.00.016.IX" Тогда 		
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Регистратор", "Конечное сальдо");		
		ИначеЕсли ИмяЯчейки = "220.00.016.VII" Тогда 
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "РБП", "РБП");				
		Иначе                                                                                               		
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Регистратор", "Документ движения");		
		КонецЕсли;
	КонецЕсли;
	
	// Прочие настройки
	ТекстЗаголовка = НСТР("ru = 'Регистр налогового учета к строке %1 для Декларации по ИПН'");	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Заголовок", 	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, ИмяЯчейки));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", Истина);	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьПодписи", Истина); 	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц.Скопировать());
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Налогоплательщик",  Налогоплательщик);
	
	ИмяРазделаРасшифровки = "Декларация по ИПН:" + СтруктураРеквизитовФормы.мГод;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ВыводитьЗаголовок", Истина);	
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", ИмяРазделаРасшифровки);
	
	ОткрытьФорму("Отчет.УниверсальныйОтчетПоМетаданным.Форма.ФормаОтчета", ПараметрыФормы,, Истина);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Форма220_01Расшифровка(ИмяЯчейки, ОбщаяРасшифровка)
	
	ВыводитьПрочиеРасходы = Ложь;
	
	Если ОбщаяРасшифровка Тогда 
		Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		КодДляРасшифровки = Новый СписокЗначений;
		КодДляРасшифровки.Добавить("220.00.016.IIIA");
		КодДляРасшифровки.Добавить("220.00.016.IIIB");
		КодДляРасшифровки.Добавить("220.00.016.IIIC"); 
		КодДляРасшифровки.Добавить("220.00.016.IIID");
		КодДляРасшифровки.Добавить("220.00.016.IIIE"); 
		КодДляРасшифровки.Добавить("220.00.016.IIIF");
		КодДляРасшифровки.Добавить("220.00.016.IIIG");		
		КодДляРасшифровки.Добавить("220.00.016.IIIH");
		ВыводитьПрочиеРасходы = Истина;
		
	Иначе 
		НомерЯчейки = Число(Сред(ИмяЯчейки , Найти(ИмяЯчейки , "__")+ 2));
		
		Форма220_01 = мСтруктураМногострочныхРазделов.ПолучитьЭлементы();
		СтраницыФормы = Форма220_01[0].ПолучитьЭлементы();
		ТаблицаПоиска = Неопределено;
		Для Каждого Страница Из СтраницыФормы Цикл
			Если Страница.ИмяГруппы = ("Страница1") Тогда
				ТаблицаПоиска = ЭтаФорма[Страница.ИмяРеквизитаТаблицыСтрокГруппы];
			КонецЕсли;
		КонецЦикла;
		Если ТаблицаПоиска <> Неопределено Тогда
			НайденнаяСтрока = ТаблицаПоиска[НомерЯчейки - 1];
			Контрагент = НайденнаяСтрока["Ф220_01_B" + "_Расшифровка"];
			ВидРасхода = ?(НайденнаяСтрока["Ф220_01_E"] = Неопределено, 0, НайденнаяСтрока["Ф220_01_E"]);
		Иначе	
			Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
			ВидРасхода = 0;
		КонецЕсли;	
		
		КодДляРасшифровки = Новый СписокЗначений;
		
		Если ВидРасхода <> "" Тогда 
			Если ВидРасхода = 1 Тогда 
				КодДляРасшифровки.Добавить("220.00.016.IIIB");
			ИначеЕсли ВидРасхода = 2 Тогда 
				КодДляРасшифровки.Добавить("220.00.016.IIIC"); 
			ИначеЕсли ВидРасхода = 3 Тогда 
				КодДляРасшифровки.Добавить("220.00.016.IIID");
			ИначеЕсли ВидРасхода = 4 Тогда 
				КодДляРасшифровки.Добавить("220.00.016.IIIE"); 
			ИначеЕсли ВидРасхода = 5 Тогда 
				КодДляРасшифровки.Добавить("220.00.016.IIIF");
			ИначеЕсли ВидРасхода = 6 Тогда 
				КодДляРасшифровки.Добавить("220.00.016.IIIG");
			ИначеЕсли ВидРасхода = 7 Тогда 
				КодДляРасшифровки.Добавить("220.00.016.IIIA");
				КодДляРасшифровки.Добавить("220.00.016.IIIH");
				ВыводитьПрочиеРасходы = Истина;
			КонецЕсли;
		Иначе 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПериодФормирования = ПолучитьПериодФормированияНаСервере();
	
	Если ПериодФормирования = Неопределено Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Приложение 220.01 не заполняется, так как организация %1 является плательщиком НДС.'"), Налогоплательщик);				
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	ИначеЕсли ПериодФормирования = Ложь Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Приложение 220.01 не заполняется, так как для организации %1 не заполнен регистр ""Учетная политика (налоговый учет)"".'"), Налогоплательщик);				
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	Иначе
		КолПериодов = ПериодФормирования.Количество();
		Если КолПериодов = 0 Тогда 
			КолПовторов = 1;
		Иначе 
			КолПовторов = КолПериодов / 2;
		КонецЕсли;
	КонецЕсли;
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", 	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ТипДанных", 		"РегистрыБухгалтерии");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяОбъекта", 	"Налоговый");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяТаблицы", 	"Обороты");
	
	ТекстЗапросаПоМесяцам = "";
	Если ПериодФормирования <> Неопределено Тогда 
		КолПериодов = ПериодФормирования.Количество() - 1;
		Для Счетчик = 0 по КолПериодов Цикл
			НазПериодаНач = ПериодФормирования[Счетчик].Представление;
			НазПериодаКон = ПериодФормирования[Счетчик + 1].Представление;
			ПериодНач  	  = ПериодФормирования[Счетчик].Значение;
			ПериодКон     = ПериодФормирования[Счетчик + 1].Значение;
			
			Если ТекстЗапросаПоМесяцам = "" Тогда
				ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам + "
				|   И (
				|	НалоговыйОбороты.Период МЕЖДУ &" + НазПериодаНач + " И &" + НазПериодаКон + "
				| ";
			Иначе 
				ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам +  "
				|	ИЛИ НалоговыйОбороты.Период МЕЖДУ &" + НазПериодаНач + " И &" + НазПериодаКон + "
				| ";
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;	
	Иначе 
	КонецЕсли;
	ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам + ")";
	
	Если Не ВыводитьПрочиеРасходы Тогда 
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Период КАК Период,
		|	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.ВидДоходаРасхода КАК СтатьяЗатрат,
		|	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик КАК Организация,
		|	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.КодСтроки КАК КодСтроки,
		|	ВЫБОР
		|		КОГДА КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик = &ПустаяОрганизация
		|			ТОГДА 3
		|		КОГДА КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик = &ПустоеЗначение
		|			ТОГДА 2
		|		КОГДА КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик = &Организация
		|			ТОГДА 1
		|	КОНЕЦ КАК Приоритет
		|ПОМЕСТИТЬ ВТ_Приоретет
		|ИЗ
		|	РегистрСведений.КодыСтрокДекларацииПоНалогуНаПрибыль.СрезПоследних(
		|			&КонПериода,
		|			(Налогоплательщик = &ПустаяОрганизация
		|				ИЛИ Налогоплательщик = &ПустоеЗначение
		|				ИЛИ Налогоплательщик = &Организация)
		|				И (НЕ КодСтроки = """")) КАК КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СтатьяЗатрат,
		|	Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонечныеИтоговыеДанные.Контрагент,
		|	КонечныеИтоговыеДанные.Сумма,
		|	КонечныеИтоговыеДанные.НомерНалоговойРегистрацииВСтранеРезидентства,
		|	КонечныеИтоговыеДанные.Код,
		|	КонечныеИтоговыеДанные.КодСтроки КАК КодСтроки,
		|	КонечныеИтоговыеДанные.ИдентификационныйКодЛичности,
		|	КонечныеИтоговыеДанные.КБЕ,
		|	КонечныеИтоговыеДанные.Регистратор,
		|	КонечныеИтоговыеДанные.Счет,
		|	КонечныеИтоговыеДанные.КорСчет
		|ИЗ
		|	(ВЫБРАТЬ
		|		Контрагенты.Ссылка КАК Контрагент,
		|		Контрагенты.СерияСвидетельстваПоНДС КАК СерияСвидетельстваПоНДС,
		|		Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства КАК НомерНалоговойРегистрацииВСтранеРезидентства,
		|		Контрагенты.НомерСвидетельстваПоНДС КАК НомерСвидетельстваПоНДС,
		|		Контрагенты.ДатаСвидетельстваПоНДС КАК ДатаСвидетельстваПоНДС,
		|		КлассификаторСтранМира.КодАльфа3 КАК Код,
		|		Контрагенты.ИдентификационныйКодЛичности КАК ИдентификационныйКодЛичности,
		|		Контрагенты.КБЕ КАК КБЕ,
		|		ВложенныйЗапрос.Сумма КАК Сумма,
		|		ВложенныйЗапрос.КодСтроки КАК КодСтроки,
		|		ВложенныйЗапрос.Регистратор,
		|		ВложенныйЗапрос.Счет,
		|		ВложенныйЗапрос.КорСчет
		|	ИЗ
		|		(ВЫБРАТЬ
		|			СУММА(ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0)) КАК Сумма,
		|			СтатьиЗатратПоКоду.КодСтроки КАК КодСтроки,
		|			НалоговыйОбороты.КорСубконто1 КАК КорСубконто1,
		|			НалоговыйОбороты.Регистратор КАК Регистратор,
		|			НалоговыйОбороты.Счет,
		|			НалоговыйОбороты.КорСчет
		|		ИЗ
		|			РегистрБухгалтерии.Налоговый.Обороты(
		|					&НачПериода,
		|					&КонПериода,
		|					Запись,
		|					Счет В ИЕРАРХИИ (&СписокСчетов),
		|					&ВидСубконтоЗатрат,
		|					Организация В (&СписокОрганизаций)
		|						И ВидУчета <> &ВидУчетаВР,
		|					НЕ КорСчет В ИЕРАРХИИ (&СписокСчетов, &СписокСчетовНалогов),
		|					&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ТаблицаСтатейЗатрат.СтатьяЗатрат КАК СтатьяЗатрат,
		|					ТаблицаСтатейЗатрат.Приоритет КАК Приоритет,
		|					ДанныеОКодахДекларации.КодСтроки КАК КодСтроки
		|				ИЗ
		|					(ВЫБРАТЬ
		|						ТаблицаСтатейЗатрат.СтатьяЗатрат КАК СтатьяЗатрат,
		|						МИНИМУМ(ТаблицаСтатейЗатрат.Приоритет) КАК Приоритет
		|					ИЗ
		|						ВТ_Приоретет КАК ТаблицаСтатейЗатрат
		|					
		|					СГРУППИРОВАТЬ ПО
		|						ТаблицаСтатейЗатрат.СтатьяЗатрат) КАК ТаблицаСтатейЗатрат
		|						ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоретет КАК ДанныеОКодахДекларации
		|						ПО ТаблицаСтатейЗатрат.СтатьяЗатрат = ДанныеОКодахДекларации.СтатьяЗатрат
		|							И ТаблицаСтатейЗатрат.Приоритет = ДанныеОКодахДекларации.Приоритет
		|				ГДЕ
		|					ДанныеОКодахДекларации.КодСтроки В(&КодСтроки)) КАК СтатьиЗатратПоКоду
		|				ПО НалоговыйОбороты.Субконто1 = СтатьиЗатратПоКоду.СтатьяЗатрат
		| 	" + ТекстЗапросаПоМесяцам + "
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СтатьиЗатратПоКоду.КодСтроки,
		|			НалоговыйОбороты.КорСубконто1,
		|			НалоговыйОбороты.Регистратор,
		|			НалоговыйОбороты.Счет,
		|			НалоговыйОбороты.КорСчет
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			СУММА(ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0)),
		|			ВложенныйЗапрос.КодСтроки,
		|			НалоговыйОбороты.КорСубконто1,
		|			НалоговыйОбороты.Регистратор,
		|			НалоговыйОбороты.Счет,
		|			НалоговыйОбороты.КорСчет 					   
		|		ИЗ
		|			РегистрБухгалтерии.Налоговый.Обороты(
		|					&НачПериода,
		|					&КонПериода,
		|					Запись,
		|					Счет = &Счет1620Н,
		|					,
		|					Организация В (&СписокОрганизаций)
		|						И ВидУчета <> &ВидУчетаВР,
		|					НЕ КорСчет В ИЕРАРХИИ (&СписокСчетовНалогов),
		|					&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ТаблицаДохода.СтатьяЗатрат КАК ДоходРасход,
		|					ТаблицаДохода.Приоритет КАК Приоритет,
		|					ДанныеОКодахДекларации.КодСтроки КАК КодСтроки
		|				ИЗ
		|					(ВЫБРАТЬ
		|						ТаблицаДохода.СтатьяЗатрат КАК СтатьяЗатрат,
		|						МИНИМУМ(ТаблицаДохода.Приоритет) КАК Приоритет
		|					ИЗ
		|						ВТ_Приоретет КАК ТаблицаДохода
		|					
		|					СГРУППИРОВАТЬ ПО
		|						ТаблицаДохода.СтатьяЗатрат) КАК ТаблицаДохода
		|						ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоретет КАК ДанныеОКодахДекларации
		|						ПО ТаблицаДохода.Приоритет = ДанныеОКодахДекларации.Приоритет
		|							И ТаблицаДохода.СтатьяЗатрат = ДанныеОКодахДекларации.СтатьяЗатрат
		|				ГДЕ
		|					ДанныеОКодахДекларации.КодСтроки В(&КодСтроки)) КАК ВложенныйЗапрос
		|				ПО ВЫРАЗИТЬ (НалоговыйОбороты.Субконто1 КАК Справочник.РАсходыБудущихПериодов).СубконтоНУ1 = ВложенныйЗапрос.ДоходРасход
		|				ИЛИ ВЫРАЗИТЬ (НалоговыйОбороты.Субконто1 КАК Справочник.РАсходыБудущихПериодов).СубконтоНУ2 = ВложенныйЗапрос.ДоходРасход
		|				ИЛИ ВЫРАЗИТЬ (НалоговыйОбороты.Субконто1 КАК Справочник.РАсходыБудущихПериодов).СубконтоНУ3 = ВложенныйЗапрос.ДоходРасход
		| 	" + ТекстЗапросаПоМесяцам + "
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВложенныйЗапрос.КодСтроки,
		|			НалоговыйОбороты.КорСубконто1,
		|			НалоговыйОбороты.Регистратор,
		|			НалоговыйОбороты.Счет,
		|			НалоговыйОбороты.КорСчет) КАК ВложенныйЗапрос
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
		|				ПО Контрагенты.СтранаРезидентства = КлассификаторСтранМира.Ссылка
		|			ПО ВложенныйЗапрос.КорСубконто1 = Контрагенты.Ссылка
		|	
		|	ГДЕ
		|		Контрагенты.Ссылка В иерархии(&Контрагент)
		|
		|	СГРУППИРОВАТЬ ПО
		|		Контрагенты.Ссылка,
		|		Контрагенты.РНН,
		|		Контрагенты.СерияСвидетельстваПоНДС,
		|		Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства,
		|		Контрагенты.НомерСвидетельстваПоНДС,
		|		Контрагенты.ДатаСвидетельстваПоНДС,
		|		КлассификаторСтранМира.КодАльфа3,
		|		Контрагенты.ИдентификационныйКодЛичности,
		|		Контрагенты.КБЕ,
		|		ВложенныйЗапрос.Сумма,
		|		ВложенныйЗапрос.КодСтроки,
		|		ВложенныйЗапрос.Регистратор,
		|			ВложенныйЗапрос.Счет,
		|			ВложенныйЗапрос.КорСчет) КАК КонечныеИтоговыеДанные
		|ГДЕ
		|	КонечныеИтоговыеДанные.Сумма <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	КодСтроки,
		|	КонечныеИтоговыеДанные.Контрагент.ИдентификационныйКодЛичности";
		
		СписокСчетов = Новый СписокЗначений;
		СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.ВнеоборотныеАктивы"));
		СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.Расходы"));
		СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.Производство_"));
		
	Иначе 
		
		Если ПризнакВключенияДопЗатрат22001 Тогда 
			ТекстДобЗапроса = "ОБЪЕДИНИТЬ ВСЕ
			|		
			|		ВЫБРАТЬ
			|			НалоговыйОбороты.КорСубконто1,
			|			НалоговыйОбороты.СуммаОборот,
			|			НалоговыйОбороты.Регистратор,
			|			НалоговыйОбороты.Счет,
			|			НалоговыйОбороты.КорСчет					   
			|		ИЗ
			|			РегистрБухгалтерии.Налоговый.Обороты(
			|					&НачПериода,
			|					&КонПериода,
			|					Запись,
			|					Счет В ИЕРАРХИИ (&СписокСчетов),
			|					&ВидСубконтоЗатрат,
			|					Организация В (&СписокОрганизаций)
			|						И ВидУчета <> &ВидУчетаВР,
			|					НЕ КорСчет В ИЕРАРХИИ (&СписокСчетов, &СписокСчетовНалогов),					   
			|					&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
			|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|					КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.ВидДоходаРасхода КАК ВидДоходаРасхода
			|				ИЗ
			|					РегистрСведений.КодыСтрокДекларацииПоНалогуНаПрибыль.СрезПоследних(
			|							&КонПериода,
			|							(Налогоплательщик = &ПустаяОрганизация
			|								ИЛИ Налогоплательщик = &ПустоеЗначение
			|								ИЛИ Налогоплательщик = &Организация)
			|								И (НЕ КодСтроки = """")) КАК КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних
			|				
			|				СГРУППИРОВАТЬ ПО
			|					КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.ВидДоходаРасхода) КАК ДанныеОКодахСтрок
			|				ПО НалоговыйОбороты.Субконто1 = ДанныеОКодахСтрок.ВидДоходаРасхода
			|		ГДЕ
			|			ДанныеОКодахСтрок.ВидДоходаРасхода ЕСТЬ NULL 
			|			И НалоговыйОбороты.КорСубконто1 В иерархии(&Контрагент)
			| " + ТекстЗапросаПоМесяцам;					 
		КонецЕсли;
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Период КАК Период,
		|	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.ВидДоходаРасхода КАК СтатьяЗатрат,
		|	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик КАК Организация,
		|	КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.КодСтроки КАК КодСтроки,
		|	ВЫБОР
		|		КОГДА КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик = &ПустаяОрганизация
		|			ТОГДА 3
		|		КОГДА КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик = &ПустоеЗначение
		|			ТОГДА 2
		|		КОГДА КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних.Налогоплательщик = &Организация
		|			ТОГДА 1
		|	КОНЕЦ КАК Приоритет
		|ПОМЕСТИТЬ ВТ_Приоритет
		|ИЗ
		|	РегистрСведений.КодыСтрокДекларацииПоНалогуНаПрибыль.СрезПоследних(
		|			&КонПериода,
		|			(Налогоплательщик = &ПустаяОрганизация
		|				ИЛИ Налогоплательщик = &ПустоеЗначение
		|				ИЛИ Налогоплательщик = &Организация)
		|				И (НЕ КодСтроки = """")) КАК КодыСтрокДекларацииПоНалогуНаПрибыльСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СтатьяЗатрат,
		|	Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонечныеИтоговыеДанные.Контрагент,
		|	КонечныеИтоговыеДанные.Сумма,
		|	КонечныеИтоговыеДанные.ИдентификационныйКодЛичности,
		|	КонечныеИтоговыеДанные.НомерНалоговойРегистрацииВСтранеРезидентства,
		|	КонечныеИтоговыеДанные.Код,
		|	КонечныеИтоговыеДанные.КБЕ,
		|	КонечныеИтоговыеДанные.Регистратор,
		|	КонечныеИтоговыеДанные.Счет,
		|	КонечныеИтоговыеДанные.КорСчет
		|ИЗ
		|	(ВЫБРАТЬ
		|		Контрагенты.Ссылка КАК Контрагент,
		|		СУММА(ИтоговыеДанные.Сумма) КАК Сумма,
		|		Контрагенты.ИдентификационныйКодЛичности КАК ИдентификационныйКодЛичности,
		|		Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства КАК НомерНалоговойРегистрацииВСтранеРезидентства,
		|		КлассификаторСтранМира.КодАльфа3 КАК Код,
		|		Контрагенты.КБЕ КАК КБЕ,
		|		ИтоговыеДанные.Регистратор КАК Регистратор,
		|		ИтоговыеДанные.Счет,
		|		ИтоговыеДанные.КорСчет
		|	ИЗ
		|		(ВЫБРАТЬ
		|			НалоговыйОбороты.КорСубконто1 КАК Контрагент,
		|			ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0) КАК Сумма,
		|			НалоговыйОбороты.Регистратор КАК Регистратор,
		|			НалоговыйОбороты.Счет,
		|			НалоговыйОбороты.КорСчет
		|		ИЗ
		|			РегистрБухгалтерии.Налоговый.Обороты(
		|					&НачПериода,
		|					&КонПериода,
		|					Запись,
		|					Счет = &Счет1330Н
		|						ИЛИ Счет = &Счет1310Н,
		|					,
		|					Организация В (&СписокОрганизаций)
		|						И ВидУчета <> &ВидУчетаВР,
		|					(НЕ КорСчет В ИЕРАРХИИ (&Счет000, &Счет1350Н)),
		|					&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
		|		ГДЕ
		|			НалоговыйОбороты.КорСубконто1 В иерархии(&Контрагент)
		| 	" + ТекстЗапросаПоМесяцам + "
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			НалоговыйОбороты.КорСубконто1,
		|			СУММА(ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0)),
		|			НалоговыйОбороты.Регистратор,
		|			НалоговыйОбороты.Счет,
		|			НалоговыйОбороты.КорСчет
		|		ИЗ
		|			РегистрБухгалтерии.Налоговый.Обороты(
		|					&НачПериода,
		|					&КонПериода,
		|					Запись,
		|					Счет В ИЕРАРХИИ (&СписокСчетов),
		|					&ВидСубконтоЗатрат,
		|					Организация В (&СписокОрганизаций)
		|						И ВидУчета <> &ВидУчетаВР,
		|					НЕ КорСчет В ИЕРАРХИИ (&СписокСчетов, &СписокСчетовНалогов),					   
		|					&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ТаблицаСтатейЗатрат.СтатьяЗатрат КАК СтатьяЗатрат,
		|					ТаблицаСтатейЗатрат.Приоритет КАК Приоритет,
		|					ДанныеОКодахДекларации.КодСтроки КАК КодСтроки
		|				ИЗ
		|					(ВЫБРАТЬ
		|						ТаблицаСтатейЗатрат.СтатьяЗатрат КАК СтатьяЗатрат,
		|						МИНИМУМ(ТаблицаСтатейЗатрат.Приоритет) КАК Приоритет
		|					ИЗ
		|						ВТ_Приоритет КАК ТаблицаСтатейЗатрат
		|					
		|					СГРУППИРОВАТЬ ПО
		|						ТаблицаСтатейЗатрат.СтатьяЗатрат) КАК ТаблицаСтатейЗатрат
		|						ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоритет КАК ДанныеОКодахДекларации
		|						ПО ТаблицаСтатейЗатрат.СтатьяЗатрат = ДанныеОКодахДекларации.СтатьяЗатрат
		|							И ТаблицаСтатейЗатрат.Приоритет = ДанныеОКодахДекларации.Приоритет
		|				ГДЕ
		|					(НЕ ДанныеОКодахДекларации.КодСтроки В(&КодСтроки)) ИЛИ &ОбщаяРасшифровка) КАК СтатьиЗатратПоКоду
		|				ПО НалоговыйОбороты.Субконто1 = СтатьиЗатратПоКоду.СтатьяЗатрат
		|		ГДЕ
		|			НалоговыйОбороты.КорСубконто1 В иерархии(&Контрагент)
		| 	" + ТекстЗапросаПоМесяцам + "
		|		
		|		СГРУППИРОВАТЬ ПО
		|			НалоговыйОбороты.КорСубконто1,
		|			НалоговыйОбороты.Регистратор,
		|			НалоговыйОбороты.Счет,
		|			НалоговыйОбороты.КорСчет
		|
		|		ОБЪЕДИНИТЬ ВСЕ
		|
		|		   ВЫБРАТЬ
		|			НалоговыйОбороты.КорСубконто1 КАК Контрагент,
		|			ВЫБОР
		|				КОГДА НалоговыйОбороты.Счет В ИЕРАРХИИ (&Счет20Н)
		|					ТОГДА ЕСТЬNULL(НалоговыйОбороты.СуммаОборотДт, 0)
		|				ИНАЧЕ ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0)
		|			КОНЕЦ КАК Сумма,
		|			НалоговыйОбороты.Регистратор КАК Регистратор,
		|			НалоговыйОбороты.Счет,
		|			НалоговыйОбороты.КорСчет
		|		ИЗ
		|			РегистрБухгалтерии.Налоговый.Обороты(
		|					&НачПериода,
		|					&КонПериода,
		|					Запись,
		|					Счет В ИЕРАРХИИ (&Счет20Н)
		|							И НЕ Счет = &Счет2400Н
		|							И НЕ Счет = &Счет2500Н,
		|					,
		|					Организация В (&СписокОрганизаций)
		|						И ВидУчета <> &ВидУчетаВР,
		|					НЕ КорСчет В ИЕРАРХИИ (&СписокСчетовНалогов),					   
		|					&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
		|		ГДЕ
		|			НалоговыйОбороты.КорСубконто1 В иерархии(&Контрагент)
		| 	" + ТекстЗапросаПоМесяцам + "
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|
		|   ВЫБРАТЬ
		|	НалоговыйОбороты.КорСубконто1 КАК Контрагент,
		|	ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0) КАК Сумма,
		|	НалоговыйОбороты.Регистратор КАК Регистратор,
		|	НалоговыйОбороты.Счет,
		|	НалоговыйОбороты.КорСчет
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(
		|			&НачПериода,
		|			&КонПериода,
		|			Запись,
		|			Счет = &Счет2400Н
		|				ИЛИ Счет = &Счет2500Н,
		|			,
		|			Организация В (&СписокОрганизаций)
		|				И ВидУчета <> &ВидУчетаВР,
		|			НЕ КорСчет В ИЕРАРХИИ (&СписокСчетовНалогов),					   
		|			&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТаблицаСтатейЗатрат.СтатьяЗатрат КАК СтатьяЗатрат,
		|			ТаблицаСтатейЗатрат.Приоритет КАК Приоритет,
		|			ДанныеОКодахДекларации.КодСтроки КАК КодСтроки
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ТаблицаСтатейЗатрат.СтатьяЗатрат КАК СтатьяЗатрат,
		|				МИНИМУМ(ТаблицаСтатейЗатрат.Приоритет) КАК Приоритет
		|			ИЗ
		|				ВТ_Приоритет КАК ТаблицаСтатейЗатрат
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ТаблицаСтатейЗатрат.СтатьяЗатрат) КАК ТаблицаСтатейЗатрат
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоритет КАК ДанныеОКодахДекларации
		|				ПО ТаблицаСтатейЗатрат.СтатьяЗатрат = ДанныеОКодахДекларации.СтатьяЗатрат
		|					И ТаблицаСтатейЗатрат.Приоритет = ДанныеОКодахДекларации.Приоритет
		|		ГДЕ
		|			(НЕ ДанныеОКодахДекларации.КодСтроки В (&КодСтроки))   ИЛИ &ОбщаяРасшифровка) КАК СтатьиЗатратПоКоду
		|		ПО (НалоговыйОбороты.Субконто2 = СтатьиЗатратПоКоду.СтатьяЗатрат)
		|	ГДЕ
		|		НалоговыйОбороты.КорСубконто1 В Иерархии(&Контрагент)
		| 	" + ТекстЗапросаПоМесяцам + "
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		НалоговыйОбороты.КорСубконто1,
		|		СУММА(ЕСТЬNULL(НалоговыйОбороты.СуммаОборот, 0)) КАК Сумма,
		|		НалоговыйОбороты.Регистратор КАК Регистратор,
		|		НалоговыйОбороты.Счет,
		|		НалоговыйОбороты.КорСчет
		|	ИЗ
		|		РегистрБухгалтерии.Налоговый.Обороты(
		|				&НачПериода,
		|				&КонПериода,
		|				Запись,
		|				Счет = &Счет1620Н,
		|				,
		|				Организация В (&СписокОрганизаций)
		|					И ВидУчета <> &ВидУчетаВР,
		|					НЕ КорСчет В ИЕРАРХИИ (&СписокСчетовНалогов),					   
		|				&ВидСубконтоКонтрагенты) КАК НалоговыйОбороты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ТаблицаДохода.СтатьяЗатрат КАК ДоходРасход,
		|				ТаблицаДохода.Приоритет КАК Приоритет,
		|				ДанныеОКодахДекларации.КодСтроки КАК КодСтроки
		|			ИЗ
		|				(ВЫБРАТЬ
		|					ТаблицаДохода.СтатьяЗатрат КАК СтатьяЗатрат,
		|					МИНИМУМ(ТаблицаДохода.Приоритет) КАК Приоритет
		|				ИЗ
		|					ВТ_Приоритет КАК ТаблицаДохода
		|				
		|				СГРУППИРОВАТЬ ПО
		|					ТаблицаДохода.СтатьяЗатрат) КАК ТаблицаДохода
		|					ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоритет КАК ДанныеОКодахДекларации
		|					ПО ТаблицаДохода.Приоритет = ДанныеОКодахДекларации.Приоритет
		|						И ТаблицаДохода.СтатьяЗатрат = ДанныеОКодахДекларации.СтатьяЗатрат
		|			ГДЕ
		|				(НЕ ДанныеОКодахДекларации.КодСтроки В(&КодСтроки))  ИЛИ &ОбщаяРасшифровка ) КАК ВложенныйЗапрос
		|			ПО ВЫРАЗИТЬ (НалоговыйОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).СубконтоНУ1 = ВложенныйЗапрос.ДоходРасход
		|			ИЛИ ВЫРАЗИТЬ (НалоговыйОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).СубконтоНУ2 = ВложенныйЗапрос.ДоходРасход
		|			ИЛИ ВЫРАЗИТЬ (НалоговыйОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).СубконтоНУ3 = ВложенныйЗапрос.ДоходРасход
		|		ГДЕ
		|			НалоговыйОбороты.КорСубконто1 В иерархии(&Контрагент)
		| 	" + ТекстЗапросаПоМесяцам + "
		|
		|	СГРУППИРОВАТЬ ПО
		|		НалоговыйОбороты.КорСубконто1,
		|		НалоговыйОбороты.Регистратор,
		|		НалоговыйОбороты.Счет,
		|		НалоговыйОбороты.КорСчет
		|		
		| " + ТекстДобЗапроса + ") КАК ИтоговыеДанные
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
		|				ПО Контрагенты.СтранаРезидентства = КлассификаторСтранМира.Ссылка
		|			ПО ИтоговыеДанные.Контрагент = Контрагенты.Ссылка
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Контрагенты.Ссылка,
		|		Контрагенты.ИдентификационныйКодЛичности,
		|		Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства,
		|		КлассификаторСтранМира.КодАльфа3,
		|		Контрагенты.КБЕ,
		|		ИтоговыеДанные.Регистратор,
		|		ИтоговыеДанные.Счет,
		|		ИтоговыеДанные.КорСчет) КАК КонечныеИтоговыеДанные
		|ГДЕ
		|	КонечныеИтоговыеДанные.Сумма <> 0
		|	И (НЕ КонечныеИтоговыеДанные.Контрагент ЕСТЬ NULL )
		|
		|УПОРЯДОЧИТЬ ПО
		|	КонечныеИтоговыеДанные.Контрагент.ИдентификационныйКодЛичности";
		
		СписокСчетов = Новый СписокЗначений;
		СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.Расходы"));
		СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.Производство_"));
		
	КонецЕсли;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ПолучитьАдресМакетаСКД(Неопределено, ТекстЗапроса));
	
	//ПАРАМЕТРЫ
	МассивПараметровДанных = Новый Массив();   
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСчетов",      СписокСчетов);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокОрганизаций", мСписокСтруктурныхЕдиниц);
	
	Для Счетчик = 0 по КолПериодов-1 Цикл
		НазПериодаНач = ПериодФормирования[Счетчик].Представление;
		НазПериодаКон = ПериодФормирования[Счетчик + 1].Представление;
		ПериодНач  	  = ПериодФормирования[Счетчик].Значение;
		ПериодКон     = ПериодФормирования[Счетчик + 1].Значение;
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, НазПериодаНач, ПериодНач);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, НазПериодаКон, ПериодКон);
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ОбщаяРасшифровка", ОбщаяРасшифровка);		
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "НачалоПериода",    НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));		
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КонецПериода",     КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "НачПериода",       СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КонПериода",       СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ВидСубконтоЗатрат",      ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ВидСубконтоКонтрагенты", ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты"));
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Организация", 		   Налогоплательщик);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ПустаяОрганизация", 	   ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ПустоеЗначение", 		   Неопределено);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ВидУчетаВР", 			   ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.ВР"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ПустаяДата", 			   "00010101");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Контрагент", 			   Контрагент);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет1620Н", 			   ПредопределенноеЗначение("ПланСчетов.Налоговый.РасходыБудущихПериодов"));
	
	СписокСчетовНалогов = Новый СписокЗначений;
	СписокСчетовНалогов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.РасчетыСБюджетомПоНалогамИОтчислениям"));
	СписокСчетовНалогов.Добавить(ПредопределенноеЗначение("ПланСчетов.Налоговый.ОбязательстваПоДругимОбязательнымИДобровольнымПлатежам"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСчетовНалогов",	СписокСчетовНалогов);
	
	Если ВыводитьПрочиеРасходы Тогда
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет000", 		ПредопределенноеЗначение("ПланСчетов.Налоговый.Вспомогательный"));
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет1310Н", 		ПредопределенноеЗначение("ПланСчетов.Налоговый.СырьеИМатериалы"));
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет1330Н", 		ПредопределенноеЗначение("ПланСчетов.Налоговый.Товары"));
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет1350Н", 		ПредопределенноеЗначение("ПланСчетов.Налоговый.ПрочиеЗапасы"));
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет20Н", 		ПредопределенноеЗначение("ПланСчетов.Налоговый.ВнеоборотныеАктивы"));
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет2400Н", 		ПредопределенноеЗначение("ПланСчетов.Налоговый.НезавершенноеСтроительство"));
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет2500Н", 		ПредопределенноеЗначение("ПланСчетов.Налоговый.ПреренцииДоВводаВЭксплуатацию"));
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСчетов30Н", ПредопределенноеЗначение("ПланСчетов.Налоговый.РасчетыСКонтрагентамиИПрочиеВзаиморасчеты"));
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Счет3350", 		ПредопределенноеЗначение("ПланСчетов.Налоговый.ВзаиморасчетыСРаботниками"));
		
		КодДляРасшифровки = Новый СписокЗначений;
		КодДляРасшифровки.Добавить("220.00.016.IIIA"); 					
		КодДляРасшифровки.Добавить("220.00.016.IIIB"); 					
		КодДляРасшифровки.Добавить("220.00.016.IIIC"); 					
		КодДляРасшифровки.Добавить("220.00.016.IIID"); 					
		КодДляРасшифровки.Добавить("220.00.016.IIIE"); 					
		КодДляРасшифровки.Добавить("220.00.016.IIIF"); 					
		КодДляРасшифровки.Добавить("220.00.016.IIIG"); 
		
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодСтроки", КодДляРасшифровки);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПараметрыДанных", МассивПараметровДанных);
	
	// Группировки	
	МассивГруппировок = Новый Массив();
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "Счет", НСтр("ru = 'Счет'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));	
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "КорСчет", НСтр("ru = 'Кор. счет'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));	
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "Контрагент", НСтр("ru = 'Контрагент'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));	
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка",  МассивГруппировок);
	
	//Сортировка
	ПользовательскиеСортировки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ПорядокКомпоновкиДанных"));
	ПользовательскиеСортировки.ИдентификаторПользовательскойНастройки = "Порядок";
	
	НовыйЭлементПорядка = ПользовательскиеСортировки.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовыйЭлементПорядка.Использование  = Истина;
	НовыйЭлементПорядка.Поле  = Новый ПолеКомпоновкиДанных("Счет");
	
	НовыйЭлементПорядка = ПользовательскиеСортировки.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовыйЭлементПорядка.Использование  = Истина;
	НовыйЭлементПорядка.Поле  = Новый ПолеКомпоновкиДанных("КорСчет");
	
	НовыйЭлементПорядка = ПользовательскиеСортировки.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовыйЭлементПорядка.Использование  = Истина;
	НовыйЭлементПорядка.Поле  = Новый ПолеКомпоновкиДанных("Контрагент");
	
	//Выбранные поля
	ПользовательскиеПоля = ПользовательскиеНастройки.Элементы.Добавить(Тип("ВыбранныеПоляКомпоновкиДанных"));	
	ПользовательскиеПоля.ИдентификаторПользовательскойНастройки = "Выбор";	
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "SystemFields.SerialNumber", "№ п/п");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ИдентификационныйКодЛичности", "ИИН/БИН поставщика");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Регистратор", "Документ движения");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Сумма", "Сумма");
	
	// Прочие настройки
	ТекстЗаголовка = НСтр("ru = 'Расшифровка приложения 220.01 по коду вида расхода %1 и по ИИН/БИН: %2'"); 
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Заголовок", 	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, ВидРасхода, ПолучитьЗначениеРеквизита(Контрагент, "ИдентификационныйКодЛичности")));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", Истина);	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьПодписи", Истина); 	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц.Скопировать());
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Налогоплательщик",  Налогоплательщик);
	
	ИмяРазделаРасшифровки = "Декларация по ИПН:" + СтруктураРеквизитовФормы.мГод;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ВыводитьЗаголовок", Истина);	
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", ИмяРазделаРасшифровки);
	
	ОткрытьФорму("Отчет.УниверсальныйОтчетПоМетаданным.Форма.ФормаОтчета", ПараметрыФормы,, Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПериодФормированияНаСервере()
	
	Возврат РеквизитФормыВЗначение("ОтчетОбъект").Форма220_01ПроверкаНаПлательщикаНДС(Налогоплательщик, СтруктураРеквизитовФормы);
	
КонецФункции // ПолучитьПериодФормированияНаСервере()


&НаСервере
// Процедура добавляет поля в динамически формируемый набор данных по регистру
//
Процедура ДобавитьПоляНабораДанных(НаборДанных, СхемаКомпоновкиДанных)
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "Счет", 							"Счет");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "КорСчет", 						"Кор. счет"); 
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "КорСубконто1", 					"Кор. субконто 1");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "КорСубконто2", 					"Кор. субконто 2");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "КорСубконто3", 					"Кор. субконто 3");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "Субконто1", 						"Субконто 1");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "Субконто2", 						"Субконто 2");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "Субконто3", 						"Субконто 3");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "Период", 						"Период");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "ВидДоходаРасхода", 				"Вид расхода");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "ВидУчета", 						"Вид учета");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "ВидУчетаКор", 					"Вид учета кор.");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "ИдентификационныйКодЛичности", 	"ИИН/БИН поставщика");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "КБЕ", 							"КБЕ");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "Код", 							"Код");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "КодСтроки", 						"Код строки");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "Контрагент", 					"Контрагент");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "Налогоплательщик", 				"Налогоплательщик");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "НомерНалоговойРегистрацииВСтранеРезидентства", "№ налоговой регистрации");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "Организация", 					"Организация");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "СтатьяЗатрат", 					"Статья затрат");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "Сумма", 							"Сумма");
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "Регистратор", 					"Регистратор");
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьПолеИтога(СхемаКомпоновкиДанных, 								"Сумма");
	
КонецПроцедуры // ДобавитьПоляНабораДанных()

//////Обход проблемы по очистки значений в ТП в клиент-серверном варианте
&НаКлиенте
Процедура ПанельФорма220ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ПанельФорма220ПриСменеСтраницыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПанельФорма220ПриСменеСтраницыНаСервере()
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);
	
КонецПроцедуры


/////////////////////////////////////////
// Процедуры и функции фонового режима

&НаСервере
Функция ЗаполнитьВФонеНаСервере(Перезаполнить)
	
	Если ЗаданиеЕщеВыполняется(ИдентификаторЗадания) Тогда
		// Надо ждать
		Результат = Новый Структура;
		Результат.Вставить("АдресХранилища",       АдресХранилища);
		Результат.Вставить("ЗаданиеВыполнено",     Ложь);
		Результат.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
		
	Иначе
		
		// Запускаем выполнение в фоне
		
		Контейнер = Новый Структура();
		
		ПараметрыОтчета = Новый Структура;
		ПараметрыОтчета.Вставить("Перезаполнить", Перезаполнить);
		ПараметрыОтчета.Вставить("КодФормы", КодФормы);
		
		Если СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФормы, ".")[0] = "ВнешнийОтчет" Тогда
			
			ПодключенКакВнешний = Ложь;
			НайденныйЭлемент = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", "РегламентированныйОтчет220Форма");
			
			Если Не НайденныйЭлемент = Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда
				
				Если НайденныйЭлемент.ВнешнийОтчетИспользовать Тогда
					ПодключенКакВнешний = Истина;
				КонецЕсли;	
			КонецЕсли;
			
			Если ПодключенКакВнешний Тогда
				ДвоичныеДанныеОтчета = НайденныйЭлемент.ВнешнийОтчетХранилище.Получить();//ПолучитьИзВременногоХранилища(РеквизитФормыВЗначение("ОтчетОбъект").ИспользуемоеИмяФайла);
				ИмяФайла = ПолучитьИмяВременногоФайла();
				ДвоичныеДанныеОтчета.Записать(ИмяФайла);
				ПараметрыОтчета.Вставить("ИмяВнешнегоОтчета", ИмяФайла);
				
			Иначе
				ПараметрыОтчета.Вставить("ИмяВнешнегоОтчета", РеквизитФормыВЗначение("ОтчетОбъект").ИспользуемоеИмяФайла);
			КонецЕсли;
		КонецЕсли;
		
		Если КодФормы = "Форма220" Тогда 		
			ЗаполнитьПараметры(КодФормы);
		КонецЕсли;
		
		ОписаниеТипов_ТаблицаЗначений = Новый ОписаниеТипов("ТаблицаЗначений");
		ОписаниеТипов_ДеревоЗначений  = Новый ОписаниеТипов("ДеревоЗначений");
		
		ФормаСтруктура = Новый Структура;
		РеквизитыФормы = ПолучитьРеквизиты();
		Для каждого РеквизитФормы Из РеквизитыФормы Цикл
			Если РеквизитФормы.Путь = "" И РеквизитФормы.Имя <> "ОтчетОбъект" Тогда
				Если РеквизитФормы.ТипЗначения = ОписаниеТипов_ТаблицаЗначений Тогда
					ТаблицаЗначенийФормы = ДанныеФормыВЗначение(ЭтотОбъект[РеквизитФормы.Имя], Тип("ТаблицаЗначений"));
					ФормаСтруктура.Вставить(РеквизитФормы.Имя, ТаблицаЗначенийФормы);
				ИначеЕсли РеквизитФормы.ТипЗначения = ОписаниеТипов_ДеревоЗначений Тогда
					ДеревоФормы = ДанныеФормыВЗначение(ЭтотОбъект[РеквизитФормы.Имя], Тип("ДеревоЗначений"));
					ФормаСтруктура.Вставить(РеквизитФормы.Имя, ДеревоФормы);
				Иначе
					ФормаСтруктура.Вставить(РеквизитФормы.Имя, ЭтотОбъект[РеквизитФормы.Имя]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ПараметрыОтчета.Вставить("ФормаСтруктура", ФормаСтруктура);
		
		ИДОтчета         = "РегламентированныйОтчет220Форма";
		ИДРедакцииОтчета = "Форма2202023Кв1";
		
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчетВФоне",
		Новый Структура("ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер", ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер),
		НСтр("ru = 'Выполняется автоматическое заполнение отчета. Пожалуйста, подождите...'"));
		
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
		
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
		ОбщегоНазначенияБК.ПолучитьИзДлительнойОперацииСообщенияПользователю(ИдентификаторЗадания, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанные();
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ЗафиксироватьДлительностьКлючевойОперации();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗадания", 
			ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
			Истина);
		КонецЕсли;
	Исключение
		УИДЗамера = Неопределено;
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеЕщеВыполняется(ИдентификаторЗадания)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Возврат Задание <> Неопределено И Задание.Состояние = СостояниеФоновогоЗадания.Активно;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ФормаСтруктура  = СтруктураДанных.ФормаСтруктура;
	Перезаполнить   = СтруктураДанных.Перезаполнить;
	
	ЗначениеВДанныеФормы(ФормаСтруктура.мСтруктураМногострочныхРазделов, мСтруктураМногострочныхРазделов);
	ЗначениеВДанныеФормы(ФормаСтруктура.мСписокФормБезИерархии, мСписокФормБезИерархии);
	
	Если ФормаСтруктура.Свойство("СтруктураФормыФорма220_01") Тогда
		
		ТекущаяСтраница = 1;
		РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, "Форма220_01", ФормаСтруктура.СтруктураФормыФорма220_01); 	 
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, "Форма220_01");			
		РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, "Форма220_01", Перезаполнить);   	
		
		Если Перезаполнить Тогда
			РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, "Форма220_01");
		КонецЕсли;
		
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтаФорма);
		
	КонецЕсли;
	
	Если КодФормы = "Форма220" ИЛИ КодФормы = "Форма220_02" Тогда
		
		РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, "Форма220_02", Ложь);
		
	КонецЕсли;
	
	Если КодФормы = "Форма220" Тогда
		РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, "Форма220", Истина);
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, "Форма220");
		
		//РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, "Форма220", Истина);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗаголовокОтражениеВУчете(ДокументОтражения)
	
	Если ЗначениеЗаполнено(ДокументОтражения) Тогда
		Возврат НСТР("ru = 'Открыть документ отражения в учете'");
	Иначе
		Возврат НСТР("ru = 'Ввести документ отражения в учете'");
	КонецЕсли;
	
КонецФункции // ПолучитьЗаголовокОтражениеВУчете()


&НаКлиенте
Процедура Форма220ПолеТабличногоДокументаСтраницаВыбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Элемент.ТекущаяОбласть.Имя;
	
	ПоложениеПризнакаКлассификатора = СтрНайти(Ячейка, "_dic__");

	Если ПоложениеПризнакаКлассификатора <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	
		РазделДоходыРасходы = "НалогНаПрибыль_Доходы_";
		
		ИмяРаздела = Сред(Ячейка, 3, ПоложениеПризнакаКлассификатора - 3);

		ИмяОбласти = РазделДоходыРасходы + ИмяРаздела;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИмяМакета"			  	, "КодыСтрокНалоговыхДеклараций");
		ПараметрыФормы.Вставить("ИмяСекции"			  	, ИмяОбласти);
		ПараметрыФормы.Вставить("ПолучатьПолныеДанные"	, Истина);
		ПараметрыФормы.Вставить("ТекущийКодСтроки"	  	, Элемент.ТекущаяОбласть.Значение);
		ПараметрыФормы.Вставить("ИмяЯчейки"	  			, Ячейка);
		ПараметрыФормы.Вставить("ПолеТабличногоДокументаСтраница", Элемент.Имя);
		ПараметрыФормы.Вставить("АдресМакета"           , ПолучитьАдресМакетаКодовСтрок());
		
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма220ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыФормы);
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура  Форма220ОбработкаВыбораЗначений(Результат, ПараметрыВыбора) Экспорт 
	Если Результат = Неопределено Тогда
		Возврат;
	Иначе
		ВыбранноеЗначение = Результат;
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 
			ВыбранноеЗначение = ВыбранноеЗначение.КодСтроки;
		КонецЕсли;
	КонецЕсли;
	
	Форма220ОбработкаВыбораЗначенийНаСервере(ВыбранноеЗначение, ПараметрыВыбора.ИмяЯчейки, ПараметрыВыбора.ПолеТабличногоДокументаСтраница); 	
	
КонецПроцедуры

&НаСервере
Процедура  Форма220ОбработкаВыбораЗначенийНаСервере(Результат, ИмяЯчейки, ПолеТабличногоДокументаСтраница)
	
	ЭтотОбъект[ПолеТабличногоДокументаСтраница].Области[ИмяЯчейки].Значение = Результат;
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, "Форма220", ИмяЯчейки, Результат, Ложь);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресМакетаКодовСтрок()
	
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("КодыСтрокНалоговыхДеклараций"));
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруВходящихЯчеек(Знач ИмяЯчейки)
	
	СтруктураВходящихЯчеек = Новый Структура;
	
	СтруктураВходящихЯчеек.Вставить(ИмяЯчейки + "__1");
	СтруктураВходящихЯчеек.Вставить(ИмяЯчейки + "__2");
	СтруктураВходящихЯчеек.Вставить(ИмяЯчейки + "__3");
	СтруктураВходящихЯчеек.Вставить(ИмяЯчейки + "__4");
	СтруктураВходящихЯчеек.Вставить(ИмяЯчейки + "__5");
	
	Возврат СтруктураВходящихЯчеек;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьСписокКодовСтрокИзКлассификатора(ИмяЯчейки, СписокКодовСтрок, МакетКодовСтрок)
	
	ИмяЯчейкиДляПоиска = СтрЗаменить(ИмяЯчейки, ".", "_");
	
	Для Каждого Область Из МакетКодовСтрок.Области Цикл
		Если СтрНайти(Область.Имя, ИмяЯчейкиДляПоиска) <> 0 Тогда
			Для НомерСтроки = Область.Верх По Область.Низ Цикл
				КодСтроки           = СокрЛП(МакетКодовСтрок.Область(НомерСтроки, 1).Текст);  // 1 - номер колонки с кодом
				КодСтрокиВключаемый = ИмяЯчейки + "." + КодСтроки;
				Если КодСтроки <> "" И СписокКодовСтрок.НайтиПоЗначению(КодСтрокиВключаемый) = Неопределено Тогда
					СписокКодовСтрок.Добавить(КодСтрокиВключаемый);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПреобразоватьИмяЯчейкиВКодСтрокиДекларации(Знач ИмяЯчейки)
	
	КодСтрокиДекларации = ИмяЯчейки;
	
	КодСтрокиДекларации = СтрЗаменить(КодСтрокиДекларации, "s_", "");
	КодСтрокиДекларации = СтрЗаменить(КодСтрокиДекларации, "__", ".");
	КодСтрокиДекларации = СтрЗаменить(КодСтрокиДекларации, "_", ".");
	
	ЧислоВхождений = СтрЧислоВхождений(КодСтрокиДекларации, ".");
	
	Если ЧислоВхождений = 4 Тогда 
		ДлинаСтроки 	= СтрДлина(КодСтрокиДекларации); 
		Попытка
			АрабскоеЧисло 	    = Сред(КодСтрокиДекларации, 12, ДлинаСтроки - 11); 
			АрабскоеЧисло 	    = Лев(АрабскоеЧисло, 1);
			БукваКодаСтроки     = Прав(КодСтрокиДекларации, 1);
			Число 			    = ПреобразоватьЧислоВРимскуюНотацию(АрабскоеЧисло, Истина);
			КодСтрокиДекларации = ВРег(Лев(КодСтрокиДекларации, 11) + Число + БукваКодаСтроки); 
		Исключение
			АрабскоеЧисло 	    = Сред(КодСтрокиДекларации, 14, ДлинаСтроки - 13); 
			АрабскоеЧисло 	    = Лев(АрабскоеЧисло, 1);
			Число 			    = ПреобразоватьЧислоВРимскуюНотацию(АрабскоеЧисло, Истина);
			КодСтрокиДекларации = ВРег(Лев(КодСтрокиДекларации, 12) + Число); 
		КонецПопытки;
	Иначе 
		ДлинаСтроки = СтрДлина(КодСтрокиДекларации); 
		АрабскоеЧисло = Сред(КодСтрокиДекларации, 12, ДлинаСтроки - 11); 
		Попытка
			Число = ПреобразоватьЧислоВРимскуюНотацию(АрабскоеЧисло, Истина);
			КодСтрокиДекларации = Лев(КодСтрокиДекларации, 11) + Число; 
		Исключение
			КодСтрокиДекларации = Лев(КодСтрокиДекларации, 11) + АрабскоеЧисло;
		КонецПопытки;
	КонецЕсли;
	
	Возврат КодСтрокиДекларации;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, ОтчетОбъект);
КонецПроцедуры

// Параметры:
//  Команда - КомандаФормы
//
&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	ОтчетыКлиентПереопределяемый.ОбработчикКоманды(ЭтотОбъект, Команда, Ложь);
КонецПроцедуры
