#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура СформироватьОтчет(Знач ПараметрыОтчета, АдресХранилища) Экспорт
	
	ПараметрыОтчета.СписокСформированныхЛистов.Очистить();
	
	СписокСформированныхЛистов = Новый СписокЗначений;
	СформироватьЛистыКассовйКниги(ПараметрыОтчета, СписокСформированныхЛистов);
	
	ПоместитьВоВременноеХранилище(СписокСформированныхЛистов, АдресХранилища);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СформироватьЛистыКассовйКниги(ПараметрыОтчета, СписокСформированныхЛистов)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументТитульный = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("КассоваяКнига");
	
	ОбластьВкладнойЛистОтчет 			= Макет.ПолучитьОбласть("ВкладнойЛист|Отчет");
	ОбластьОтчетКассираОтчет 			= Макет.ПолучитьОбласть("ОтчетКассира|Отчет");
	ОбластьШапкаОтчет 					= Макет.ПолучитьОбласть("Шапка|Отчет");
	ОбластьОстатокНаНДОтчет 			= Макет.ПолучитьОбласть("ОстатокНаНД|Отчет");
	ОбластьСтрокаОтчет 					= Макет.ПолучитьОбласть("Строка|Отчет");
	ОбластьОборотОтчет 					= Макет.ПолучитьОбласть("Оборот|Отчет");
	ОбластьКонечныйОстатокОтчет 		= Макет.ПолучитьОбласть("КонечныйОстаток|Отчет");
	ОбластьПодвалОтчет 					= Макет.ПолучитьОбласть("Подвал|Отчет");
	
	Касса       = ПараметрыОтчета.Касса;
	Организация = ПараметрыОтчета.Организация;
		
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ВалютаДенежныхСредств          = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Касса, "ВалютаДенежныхСредств");
		
	СписокСчетовКассы = Новый СписокЗначений();
	СписокСчетовКассы.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваВКассе);
	ОтчетВВалюте = НЕ ВалютаДенежныхСредств.Пустая() И НЕ ВалютаДенежныхСредств = ВалютаРегламентированногоУчета;
	
			
	ЗапросРегистраторы = Новый Запрос;
	ЗапросРегистраторы.УстановитьПараметр("ДатаНач"          , ПараметрыОтчета.НачалоПериода);
	ЗапросРегистраторы.УстановитьПараметр("ДатаКон"          , КонецДня(ПараметрыОтчета.КонецПериода));
	ЗапросРегистраторы.УстановитьПараметр("Организация"      , Организация);
	ЗапросРегистраторы.УстановитьПараметр("СчетаКассы"       , СписокСчетовКассы);
	ЗапросРегистраторы.УстановитьПараметр("ВидСубконтоКасса" , ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДенежныеСредства);
	ЗапросРегистраторы.УстановитьПараметр("Валюта"           , ВалютаДенежныхСредств);
	ЗапросРегистраторы.УстановитьПараметр("ВВалюте"          , ОтчетВВалюте);
	ЗапросРегистраторы.УстановитьПараметр("Касса"            , Касса);
	
	
	ЗапросРегистраторы.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТИПЗНАЧЕНИЯ(ТиповойОбороты.Регистратор) КАК ТипРегистратора
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Регистратор,
		|			Счет В ИЕРАРХИИ (&СчетаКассы),
		|			&ВидСубконтоКасса,
		|			Организация = &Организация
		|				И Субконто1 = &Касса
		|				И (НЕ &ВВалюте
		|					ИЛИ Валюта = &Валюта),
		|			,
		|			) КАК ТиповойОбороты
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	МассивТиповРегистраторов = ЗапросРегистраторы.Выполнить().Выгрузить().ВыгрузитьКолонку("ТипРегистратора");
	Если МассивТиповРегистраторов.Количество() > 0 Тогда
		ТексЗапросаПоДокументам = "ПЕРВОЕ";
		ТекстПоместить = "ПОМЕСТИТЬ ВТ_ДокументыРегистраторы";
		ТекстРазрешенные = "РАЗРЕШЕННЫЕ";
		Для Каждого ТипРегистратора Из МассивТиповРегистраторов Цикл
			МетаданныеРегистратора = Метаданные.НайтиПоТипу(ТипРегистратора);
			Если МетаданныеРегистратора = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ИмяРегистратора = МетаданныеРегистратора.Имя;
			ТексЗапросаПоДокументам = ТексЗапросаПоДокументам + "ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ %Разрешенные%
			|	ДокументРегистратор.Ссылка КАК Ссылка,
			|	ДокументРегистратор.Дата КАК Дата,
			|	ДокументРегистратор.Номер КАК Номер,
			|	ПРЕДСТАВЛЕНИЕ(ДокументРегистратор.Ссылка) КАК ПредставлениеДокумента,
			|	%Контрагент% КАК Контрагент,
			|	%Основание% КАК Основание,
			|	%ИндексСортировкиВида% КАК ИндексСортировкиВида
			|%Поместить%
			|ИЗ
			|	Документ.ДокументРегистратор КАК ДокументРегистратор
			|ГДЕ
			|	НЕ ДокументРегистратор.ПометкаУдаления
			|	И ДокументРегистратор.Проведен
			|	И ДокументРегистратор.Дата МЕЖДУ &ДатаНач И &ДатаКон
			|	И ДокументРегистратор.Организация = &Организация
			|";
			Если ИмяРегистратора = "ПриходныйКассовыйОрдер" Тогда
				ТексЗапросаПоДокументам = СтрЗаменить(ТексЗапросаПоДокументам, "%Контрагент%", "ВЫРАЗИТЬ(ДокументРегистратор.ПринятоОт КАК СТРОКА(1000))");
				ТексЗапросаПоДокументам = СтрЗаменить(ТексЗапросаПоДокументам, "%Основание%" , "ВЫРАЗИТЬ(ДокументРегистратор.Основание КАК СТРОКА(1000))");
				ТексЗапросаПоДокументам = СтрЗаменить(ТексЗапросаПоДокументам, "%ИндексСортировкиВида%", "1");
			ИначеЕсли ИмяРегистратора = "РасходныйКассовыйОрдер" Тогда
				ТексЗапросаПоДокументам = СтрЗаменить(ТексЗапросаПоДокументам, "%Контрагент%", "ВЫРАЗИТЬ(ДокументРегистратор.Выдать КАК СТРОКА(1000))");
				ТексЗапросаПоДокументам = СтрЗаменить(ТексЗапросаПоДокументам, "%Основание%" , "ВЫРАЗИТЬ(ДокументРегистратор.Основание КАК СТРОКА(1000))");
				ТексЗапросаПоДокументам = СтрЗаменить(ТексЗапросаПоДокументам, "%ИндексСортировкиВида%", "2");
			Иначе
				Если ИмяРегистратора = "ОперацияБух" Тогда
					ТексЗапросаПоДокументам = СтрЗаменить(ТексЗапросаПоДокументам, "И ДокументРегистратор.Проведен", "");
				КонецЕсли;
				ТексЗапросаПоДокументам = СтрЗаменить(ТексЗапросаПоДокументам, "%Контрагент%", """""");
				ТексЗапросаПоДокументам = СтрЗаменить(ТексЗапросаПоДокументам, "%Основание%" , """""");
				ТексЗапросаПоДокументам = СтрЗаменить(ТексЗапросаПоДокументам, "%ИндексСортировкиВида%", "3");
			КонецЕсли;
			ТексЗапросаПоДокументам = СтрЗаменить(ТексЗапросаПоДокументам, "%Разрешенные%"      , ТекстРазрешенные);
			ТексЗапросаПоДокументам = СтрЗаменить(ТексЗапросаПоДокументам, "%Поместить%"        , ТекстПоместить);
			ТексЗапросаПоДокументам = СтрЗаменить(ТексЗапросаПоДокументам, "ДокументРегистратор", ИмяРегистратора);
			ТекстРазрешенные = "";
			ТекстПоместить   = "";
		КонецЦикла;	
		ТексЗапросаПоДокументам = СтрЗаменить(ТексЗапросаПоДокументам, "ПЕРВОЕОБЪЕДИНИТЬ", "");
		ТексЗапросаПоДокументам = ТексЗапросаПоДокументам + ";";
	Иначе
		ТексЗапросаПоДокументам = "
		|ВЫБРАТЬ
		|	"""" КАК Ссылка,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК Дата,
		|	"""" КАК Номер,
		|	"""" КАК ПредставлениеДокумента,
		|	"""" КАК Контрагент,
		|	"""" КАК Основание,
		|	"""" КАК ИндексСортировкиВида
		|ПОМЕСТИТЬ ВТ_ДокументыРегистраторы
		|;";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НомераЛистовКассовойКнигиСрезПоследних.Период,
		|	НомераЛистовКассовойКнигиСрезПоследних.Касса,
		|	НомераЛистовКассовойКнигиСрезПоследних.НомерЛиста
		|ИЗ
		|	РегистрСведений.НомераЛистовКассовойКниги.СрезПоследних(&Дата, Касса = &Касса) КАК НомераЛистовКассовойКнигиСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ТиповойОстатки.СуммаОстаток) КАК СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(
		|			&ДатаНач,
		|			Счет В ИЕРАРХИИ (&СчетаКассы),
		|			&ВидСубконтоКасса,
		|			Организация = &Организация
		|				И Субконто1 = &Касса
		|				И (НЕ &ВВалюте
		|					ИЛИ Валюта = &Валюта)) КАК ТиповойОстатки
		|;
		|";
	ТекстЗапроса = ТекстЗапроса + ТексЗапросаПоДокументам;
	ТекстЗапроса = ТекстЗапроса + "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НАЧАЛОПЕРИОДА(ТиповойОбороты.Период, ДЕНЬ) КАК Период,
		|	ТиповойОбороты.Регистратор КАК Документ,
		|	ВТ_ДокументыРегистраторы.Дата КАК ДатаДокумента,
		|	НАЧАЛОПЕРИОДА(ВТ_ДокументыРегистраторы.Дата, ДЕНЬ) КАК ДатаДокументаДень,
		|	ВТ_ДокументыРегистраторы.Номер КАК НомерДокумента,
		|	ВТ_ДокументыРегистраторы.ПредставлениеДокумента КАК ПредставлениеДокумента,
		|	ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) КАК Приход,
		|	ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) КАК Расход,
		|	ВТ_ДокументыРегистраторы.Контрагент КАК Контрагент,
		|	ПРЕДСТАВЛЕНИЕ(ТиповойОбороты.КорСчет) КАК ПредставлениеСчета,
		|	ВЫБОР
		|		КОГДА &ВыводитьОснования
		|			ТОГДА ВТ_ДокументыРегистраторы.Основание
		|	КОНЕЦ КАК Основание,
		|	ВТ_ДокументыРегистраторы.ИндексСортировкиВида КАК ИндексСортировкиВида
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Регистратор,
		|			Счет В ИЕРАРХИИ (&СчетаКассы),
		|			&ВидСубконтоКасса,
		|			Организация = &Организация
		|				И Субконто1 = &Касса
		|				И (НЕ &ВВалюте
		|					ИЛИ Валюта = &Валюта),
		|			,
		|			) КАК ТиповойОбороты
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДокументыРегистраторы КАК ВТ_ДокументыРегистраторы
		|	ПО ТиповойОбороты.Регистратор = ВТ_ДокументыРегистраторы.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО ВТ_ДокументыРегистраторы.Дата
		|ИТОГИ
		|	МИНИМУМ(ДатаДокумента),
		|	МИНИМУМ(ДатаДокументаДень),
		|	МИНИМУМ(НомерДокумента),
		|	СУММА(Приход),
		|	СУММА(Расход),
		|	МИНИМУМ(Контрагент),
		|	МИНИМУМ(Основание),
		|	МИНИМУМ(ИндексСортировкиВида)
		|ПО
		|	Период,
		|	Документ
		|АВТОУПОРЯДОЧИВАНИЕ";

	ИмяРесурса   = ?(ОтчетВВалюте, ".ВалютнаяСумма", ".Сумма");
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Сумма", ИмяРесурса);
	
	Если НЕ ПараметрыОтчета.РазбиватьЛистыПоДням Тогда		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НАЧАЛОПЕРИОДА(ТиповойОбороты.Период, ДЕНЬ)", "&ДатаНач");
	КонецЕсли;	

	Если ПараметрыОтчета.СортироватьПоВиду ИЛИ ПараметрыОтчета.СортироватьПоНомеру Тогда
		БлокСортировки = "УПОРЯДОЧИТЬ ПО ДатаДокументаДень" +
						?(ПараметрыОтчета.СортироватьПоВиду  , ", ИндексСортировкиВида", "") + 
						?(ПараметрыОтчета.СортироватьПоНомеру, ", НомерДокумента", "");
	Иначе
		БлокСортировки = "УПОРЯДОЧИТЬ ПО НАЧАЛОПЕРИОДА(ВТ_ДокументыРегистраторы.Дата, ДЕНЬ), ДатаДокумента";
	КонецЕсли;

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО ВТ_ДокументыРегистраторы.Дата", БлокСортировки); 
	
	Запрос.УстановитьПараметр("Валюта"           , ВалютаДенежныхСредств);
	Запрос.УстановитьПараметр("ВВалюте"          , ОтчетВВалюте);
	Запрос.УстановитьПараметр("Дата"             , ПараметрыОтчета.НачалоПериода - 86400);
	Запрос.УстановитьПараметр("ДатаКон"          , КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("ДатаНач"          , ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("Касса"            , Касса);
	Запрос.УстановитьПараметр("Организация"      , Организация);
	Запрос.УстановитьПараметр("СчетаКассы"       , СписокСчетовКассы);
	Запрос.УстановитьПараметр("ВидСубконтоКасса" , ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДенежныеСредства);
	Запрос.УстановитьПараметр("ВыводитьОснования", ПараметрыОтчета.ВыводитьОснования);

	Результат = Запрос.ВыполнитьПакет();
		
	
	// Получим номер листа кассовой книги
	НомерЛиста = 0;
	НачалоГода = НачалоГода(ПараметрыОтчета.НачалоПериода);
	Если ПараметрыОтчета.ПересчитатьНомера Тогда
		Номера = РегистрыСведений.НомераЛистовКассовойКниги.СоздатьНаборЗаписей();
		Номера.Отбор.Касса.Значение		 = Касса;
		Номера.Отбор.Касса.Использование = Истина;
		Номера.Прочитать();
		Номера.Очистить();
		Если ПравоДоступа("Изменение", Номера.Метаданные()) Тогда
			Номера.Записать();
		КонецЕсли;
	ИначеЕсли ПараметрыОтчета.НачалоПериода <> НачалоГода Тогда
		Номера = Результат[0].Выгрузить();
		Если Номера.Количество() > 0 Тогда
			Если Номера[0].Период >= НачалоГода Тогда
				НомерЛиста = Номера[0].НомерЛиста;			
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	// Определим начальный остаток по кассе
	ТекущийОстаток = 0;
	Если НЕ Результат[1].Пустой() Тогда
		ВыборкаПоОстаткам = Результат[1].Выбрать();
		ВыборкаПоОстаткам.Следующий();
		ТекущийОстаток = ВыборкаПоОстаткам.СуммаОстаток;
	КонецЕсли;	

    // Формирование листов отчета
	Если Результат[3].Пустой() Тогда
		// Выводим только шапку таблицы
		НомерЛиста = НомерЛиста + 1;

		ДатаЛиста = ПараметрыОтчета.НачалоПериода;
		ВывестиШапкуОтчета(ДокументРезультат, ДатаЛиста, НомерЛиста, ТекущийОстаток, ОбластьВкладнойЛистОтчет, ОбластьОтчетКассираОтчет, ОбластьШапкаОтчет, ОбластьОстатокНаНДОтчет, ПараметрыОтчета);
		ВывестиПодвалОтчета(ДокументРезультат,ТекущийОстаток, ДатаЛиста, НомерЛиста, 0, 0,
							ОбластьОборотОтчет, ОбластьКонечныйОстатокОтчет,ОбластьПодвалОтчет, ПараметрыОтчета)

	Иначе
		// Были движения за период
		ВыборкаПериоды = Результат[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПериоды.Следующий() Цикл
			Если ВыборкаПериоды.Приход = 0 И ВыборкаПериоды.Расход = 0 Тогда
				Продолжить;
			КонецЕсли;
			ДатаЛиста = ВыборкаПериоды.Период;
			КоличествоРасходныхДокументов = 0;				
			КоличествоПриходныхДокументов = 0;
			
			НомерЛиста = НомерЛиста + 1;
			// Вывод Шапки листа
			ВывестиШапкуОтчета(ДокументРезультат, ДатаЛиста, НомерЛиста, ТекущийОстаток, ОбластьВкладнойЛистОтчет, ОбластьОтчетКассираОтчет, ОбластьШапкаОтчет, ОбластьОстатокНаНДОтчет, ПараметрыОтчета);	
						
			// По документам
			ВыборкаДокументы = ВыборкаПериоды.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			КоличествоСтрок = ВыборкаДокументы.Количество();
			НомерСтроки = 0;
			Пока ВыборкаДокументы.Следующий() Цикл
				Если ВыборкаДокументы.Приход = 0 И ВыборкаДокументы.Расход = 0 Тогда
					Продолжить;
				КонецЕсли;
				НомерСтроки = НомерСтроки + 1;
				
				// Проверим вывод
				МассивСтрок = Новый Массив;
				МассивСтрок.Добавить(ОбластьСтрокаОтчет);
				//если строка последняя, то нужно проверить не только его помещение на листе,
				//но и сроки по оборотам, остатку и подвалу
				Если НомерСтроки = КоличествоСтрок Тогда					
					МассивСтрок.Добавить(ОбластьОборотОтчет);
					МассивСтрок.Добавить(ОбластьКонечныйОстатокОтчет);
					МассивСтрок.Добавить(ОбластьПодвалОтчет);
				КонецЕсли;
				
				Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, МассивСтрок) Тогда
					НомерЛиста = НомерЛиста + 1;
					ОбластьШапкаОтчет.Параметры.ТекстНомерЛиста = "Лист " + НомерЛиста;
					
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					ВывестиДанныеВОтчет(ДокументРезультат, ОбластьШапкаОтчет, ОбластьШапкаОтчет, ПараметрыОтчета);
				КонецЕсли;
				
				Если ПараметрыОтчета.НомераДокументовПоПараметрамУчета Тогда
				    НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СокрЛП(ВыборкаДокументы.НомерДокумента), ВыборкаДокументы.Документ);
				Иначе
				    НомерДокумента = СокрЛП(ВыборкаДокументы.НомерДокумента);
				КонецЕсли;
				
				ПредставлениеДокумента = СокрЛП(ВыборкаДокументы.Документ.Метаданные().Синоним) + " № " + НомерДокумента + НСтр("ru = ' от '") + Формат(ВыборкаДокументы.ДатаДокумента, "ДФ=дд.ММ.гг");			
				ОбластьСтрокаОтчет.Параметры.Заполнить(ВыборкаДокументы);
				ОбластьСтрокаОтчет.Параметры.НомерДокПечатнойФормы = ПредставлениеДокумента;
				
				ОбластьСтрокаОтчет.Параметры.Контрагент = СокрЛП(ВыборкаДокументы.Контрагент) + " "+ СокрЛП(ВыборкаДокументы.Основание);
				
				// По счетам
				ВыборкаСчета = ВыборкаДокументы.Выбрать();
				СчетаСтрокой = "";
				Пока ВыборкаСчета.Следующий() Цикл
					СчетаСтрокой = СчетаСтрокой + "," + СокрЛП(ВыборкаСчета.ПредставлениеСчета);
				КонецЦикла;	
				// Обрезаем первую запятую
				СчетаСтрокой = Сред(СчетаСтрокой, 2);
				ОбластьСтрокаОтчет.Параметры.КоррСчет = СчетаСтрокой;
				
				ВывестиДанныеВОтчет(ДокументРезультат, ОбластьСтрокаОтчет, ОбластьСтрокаОтчет, ПараметрыОтчета);
								
				Если ВыборкаДокументы.Расход <> 0 Тогда
					КоличествоРасходныхДокументов = КоличествоРасходныхДокументов + 1;				
				Иначе				
					КоличествоПриходныхДокументов = КоличествоПриходныхДокументов + 1;
				КонецЕсли;	
				
			КонецЦикла;// Выборка периодов
			// итоги за день - Обороты
			ОбластьОборотОтчет.Параметры.Заполнить(ВыборкаПериоды);
			
			// итоги за день - Остаток
			ТекущийОстаток = ТекущийОстаток + ВыборкаПериоды.Приход - ВыборкаПериоды.Расход;		
			ОбластьКонечныйОстатокОтчет.Параметры.ОстатокКонец = ТекущийОстаток;		
				
			ВывестиПодвалОтчета(ДокументРезультат,ТекущийОстаток, ДатаЛиста, НомерЛиста, КоличествоПриходныхДокументов, КоличествоРасходныхДокументов,
							ОбластьОборотОтчет, ОбластьКонечныйОстатокОтчет, ОбластьПодвалОтчет, ПараметрыОтчета);
																		
		КонецЦикла; // Выборка периодов
						
	КонецЕсли;
	
	ДокументРезультат.ТолькоПросмотр = Истина;
	СписокСформированныхЛистов.Добавить(ДокументРезультат, "Листы");
	
	Если ПараметрыОтчета.ПечататьТитульныйЛист ТОгда
		ЛистовЗаГод = НомерЛиста;
		СформироватьТитульныйЛист(ЛистовЗаГод, ПараметрыОтчета, СписокСформированныхЛистов);
	КонецЕсли;		
	
КонецПроцедуры

// Формирование обложки книги
Процедура СформироватьТитульныйЛист(ЛистовЗаГод, ПараметрыОтчета, СписокСформированныхЛистов)
	
	// Печать обложки и титульного листа
	Т1			   		  = Новый ТабличныйДокумент;
	Т1.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Макет1 		   		  = ПолучитьМакет("Обложка");
	ОбластьОбложка		  = Макет1.ПолучитьОбласть("Обложка");
	КонецПериода          = ПараметрыОтчета.КонецПериода;
	
	СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ПараметрыОтчета.Организация, КонецПериода);
	
	ТекстРНН_БИН 		  = "";
	
	ОбластьОбложка.Параметры.НазваниеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	ОбластьОбложка.Параметры.РНН_БИН             = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, КонецДня(КонецПериода), "ru");
	ОбластьОбложка.Параметры.НадписьОбложка 	 = НСтр("ru = ' на '") + Формат(Год(КонецПериода), "ЧГ=0") + НСтр("ru = ' г.'");
	Т1.Вывести(ОбластьОбложка);
	
	// Последний лист кассовой книги	
	ОбластьПослДеньГода = Макет1.ПолучитьОбласть("ПослДеньГода");
	
	Руководители = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(ПараметрыОтчета.Организация, КонецДня(КонецПериода));
	
	ОбластьПослДеньГода.Параметры.ГлБухгалтер 	= ?(НЕ ЗначениеЗаполнено(Руководители.ГлавныйБухгалтер), НСтр("ru='Не предусмотрен'"), Руководители.ГлавныйБухгалтер);
	ОбластьПослДеньГода.Параметры.Руководитель 	= Руководители.Руководитель;
	Т1.Вывести(ОбластьПослДеньГода);
	Т1.ОтображатьСетку	   = Ложь;
	Т1.ОтображатьЗаголовки = Ложь;
	
	Т1.ТолькоПросмотр = Истина;
	
	СписокСформированныхЛистов.Добавить(Т1, "Обложка и титульный лист");
	
КонецПРоцедуры

// Выводит данные в табличный документ
// в соответствии снастройкой печати разделов кассовой книги.
Процедура ВывестиДанныеВОтчет(ДокументРезультат, ОбластьВкладнойЛист, ОбластьОтчетКассира, ПараметрыОтчета)
	
	// Вывод раздела "Вкладной лист кассовой книги"
	Если ПараметрыОтчета.ПечататьВкладнойЛист Тогда							
		ДокументРезультат.Вывести(ОбластьВкладнойЛист);
	КонецЕсли;
	
	// Вывод раздела "Отчет кассира"
	Если ПараметрыОтчета.ПечататьОтчетКассира Тогда							
		Если ПараметрыОтчета.ПечататьВкладнойЛист Тогда					
			ДокументРезультат.Присоединить(ОбластьОтчетКассира);		
		Иначе
			ДокументРезультат.Вывести(ОбластьОтчетКассира);		
		КонецЕсли;
	КонецЕсли;
	

	
КонецПроцедуры // ВывестиДанныеВОтчет()

// Процедура - выводит шапку таблицы
//
Процедура ВывестиШапкуОтчета(ДокументРезультат, ДатаЛиста, НомерЛиста, ТекущийОстаток, ОбластьВкладнойЛистОтчет, ОбластьОтчетКассираОтчет, ОбластьШапкаОтчет, ОбластьОстатокНаНДОтчет, ПараметрыОтчета)
		
	// Вывод Шапки листа
	ДанныеКассы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОтчета.Касса, "Наименование, ВалютаДенежныхСредств");
	
	ПериодЛистаСтрокой = НСтр("ru = 'КАССА'") + ?(ПараметрыОтчета.ВыводитьНазваниеКассы, ": " + СокрЛП(ДанныеКассы.Наименование),"")+ " " + ?(ПараметрыОтчета.РазбиватьЛистыПоДням, НСтр("ru = 'за '") + Формат(ДатаЛиста, "ДФ=dd.MM.yyyy"),
						 НСтр("ru = 'за период с '") + Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy") + НСтр("ru = ' по '") + Формат(ПараметрыОтчета.КонецПериода, "ДФ=dd.MM.yyyy"));		
						 
	ОбластьВкладнойЛистОтчет.Параметры.ЗаголовокЛиста = ПериодЛистаСтрокой;							
	ОбластьОтчетКассираОтчет.Параметры.ЗаголовокЛиста = ПериодЛистаСтрокой;
	
	ВывестиДанныеВОтчет(ДокументРезультат, ОбластьВкладнойЛистОтчет, ОбластьОтчетКассираОтчет, ПараметрыОтчета);
	
	ОбластьШапкаОтчет.Параметры.ТекстНомерЛиста 	= НСтр("ru = 'Лист '") + НомерЛиста;
	ОбластьШапкаОтчет.Параметры.ВалютаПредставление = ДанныеКассы.ВалютаДенежныхСредств.Наименование;
	
	ВывестиДанныеВОтчет(ДокументРезультат, ОбластьШапкаОтчет, ОбластьШапкаОтчет, ПараметрыОтчета);
	
	ОбластьОстатокНаНДОтчет.Параметры.ОстатокНачало = ТекущийОстаток;	
	ВывестиДанныеВОтчет(ДокументРезультат, ОбластьОстатокНаНДОтчет, ОбластьОстатокНаНДОтчет, ПараметрыОтчета);
	
КонецПроцедуры  // ВывестиШапкуОтчета

// Процедура - выводит подвал таблицы
//
Процедура ВывестиПодвалОтчета(ДокументРезультат,ТекущийОстаток, ДатаЛиста, НомерЛиста, КоличествоПриходныхДокументов, КоличествоРасходныхДокументов,
	ОбластьОборотОтчет, ОбластьКонечныйОстатокОтчет,ОбластьПодвалОтчет, ПараметрыОтчета)
	
	// итоги за день - Обороты	
	ВывестиДанныеВОтчет(ДокументРезультат, ОбластьОборотОтчет, ОбластьОборотОтчет, ПараметрыОтчета);
	
	// итоги за день - Остаток
	ОбластьКонечныйОстатокОтчет.Параметры.ОстатокКонец = ТекущийОстаток;		
	ВывестиДанныеВОтчет(ДокументРезультат, ОбластьКонечныйОстатокОтчет, ОбластьКонечныйОстатокОтчет, ПараметрыОтчета);
	
	// итоги за день - подписи
	ОбластьПодвалОтчет.Параметры.НадписьКолПриходных = ?(КоличествоПриходныхДокументов > 0, ЧислоПрописью(КоличествоПриходныхДокументов,"НД=Ложь",",,,,,,,,0")," - ");																
	ОбластьПодвалОтчет.Параметры.НадписьКолРасходных = ?(КоличествоРасходныхДокументов > 0, ЧислоПрописью(КоличествоРасходныхДокументов,"НД=Ложь",",,,,,,,,0")," - ");	
	
	Руководители = ПолучитьОтветственныхЛиц(ДатаЛиста, ПараметрыОтчета);
	
	ОбластьПодвалОтчет.Параметры.ГлБухгалтер = ?(НЕ ЗначениеЗаполнено(Руководители.ГлавныйБухгалтер), НСтр("ru='Не предусмотрен'"), Руководители.ГлавныйБухгалтер);
	ОбластьПодвалОтчет.Параметры.Кассир 	 = Руководители.Кассир;
	
	ВывестиДанныеВОтчет(ДокументРезультат, ОбластьПодвалОтчет, ОбластьПодвалОтчет, ПараметрыОтчета);
	
	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	
	// обновление номера листа
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ДатаЛиста);
	Запрос.УстановитьПараметр("Касса", ПараметрыОтчета.Касса);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Касса,
	|	НомерЛиста
	|ИЗ
	|	РегистрСведений.НомераЛистовКассовойКниги.СрезПоследних(&Дата, Касса = &Касса) КАК НомераЛистовКассовойКнигиСрезПоследних";
	ТекНомера = Запрос.Выполнить().Выгрузить();
	
	Если ТекНомера.Количество() = 0 ИЛИ ТекНомера[0].НомерЛиста <> НомерЛиста Тогда
		
		Номера = РегистрыСведений.НомераЛистовКассовойКниги.СоздатьНаборЗаписей();
		
		Номера.Отбор.Касса.Значение 			= ПараметрыОтчета.Касса; 
		Номера.Отбор.Касса.Использование  		= Истина;
		
		Номера.Отбор.Период.Значение 			= ДатаЛиста; 
		Номера.Отбор.Период.Использование 		= Истина; 
		
		НоваяЗапись = Номера.Добавить();
		
		НоваяЗапись.Касса		= ПараметрыОтчета.Касса;
		НоваяЗапись.Период 		= ДатаЛиста;
		НоваяЗапись.НомерЛиста 	= НомерЛиста;				
		Если ПравоДоступа("Изменение", Номера.Метаданные()) Тогда
			Номера.Записать();
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры  // ВывестиПодвалОтчета

// Возвращает структуру значений
// ГлавныйБухгалтер и Кассир с учетом данных регистров "Ответственные лица" и "Ответственные лица организаций"
Функция ПолучитьОтветственныхЛиц(ДатаЛиста, ПараметрыОтчета)
	
	СтруктураРезультата = Новый Структура("ГлавныйБухгалтер, Кассир");
	
	Руководители = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(ПараметрыОтчета.Организация, КонецДня(ПараметрыОтчета.КонецПериода));
	СтруктураРезультата.ГлавныйБухгалтер = Руководители.ГлавныйБухгалтер;
	СтруктураРезультата.Кассир = Руководители.Кассир;
	
	// Если для Кассы установлен кассир, то приоритет этого значения Выше		
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&Период, СтруктурнаяЕдиница = &СтруктурнаяЕдиница И ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир)) КАК ОтветственныеЛицаОрганизаций";
	
	Запрос.УстановитьПараметр("Период", КонецДня(ДатаЛиста));
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ПараметрыОтчета.Касса);
	
	СрезПоследних = Запрос.Выполнить().Выгрузить();
	
	Если СрезПоследних.Количество() > 0 Тогда		
		СтруктураРезультата.Кассир = ОбщегоНазначенияБК.ФамилияИнициалыФизЛица(СрезПоследних[0].ФизическоеЛицо);
	КонецЕсли;
	
    Возврат СтруктураРезультата;
	
КонецФункции	


#КонецЕсли

