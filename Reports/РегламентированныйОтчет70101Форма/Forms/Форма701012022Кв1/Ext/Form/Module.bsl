////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	мВыбраннаяФорма = "Форма701012022Кв1";
	КодФормы 		= "Форма70101";
	
	мФорматНомераСтроки = "ЧЦ=6; ЧВН=; ЧГ=";
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруФормРегОтчета(ЭтотОбъект);		
	
	СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями"); // вынести в переопределяемый модуль	
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов  = Новый СписокЗначений;		
	СтруктураРеквизитовФормы.мПечатныеформы 		 = Новый СписокЗначений;		
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
	СтруктураРеквизитовФормы.ИДКонфигурации = РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации();
	СтруктураРеквизитовФормы.УчетПоСП = Ложь;
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	ЗаполнитьСведенияОбОтчетномПериоде();
	
	ДатаПодписи	= ТекущаяДатаСеанса();		
	ДатаПодачи	= ТекущаяДатаСеанса();
		
	Инициализация(Параметры.БезОткрытияФормы);
		
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
			ЗаполнитьПараметры(ТекФорма.КодФормы);
		КонецЕсли;	
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекФорма.КодФормы);
	КонецЦикла;
	
	////////////////////////////////////////////////////////////////////////////////
	// Подключаемые
	ОтчетыПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если Модифицированность Тогда 
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);	
		ТекстВопроса = НСТР("ru = 'Сохранить данные отчета?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_ОтражениеНалоговойОтчетностиВРеглУчете" Тогда
		Элементы.ФормаОтражениеВУчете.Заголовок = ПолучитьЗаголовокОтражениеВУчете(Источник);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)	
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.КодФормы = Элемент.ТекущиеДанные.КодФормы Тогда
		ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);
		Возврат;
	КонецЕсли;	

	//ЭтаФорма.КодФормы = Элемент.ТекущиеДанные.КодФормы;
		
	РазделыОтчетаПриАктивизацииСтрокиНаСервере(Элемент.ТекущиеДанные.КодФормы, Элемент.ТекущиеДанные.Многострочность);
		
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Для Каждого СтраницаФорм Из Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы Цикл
		Элементы[СтраницаФорм.Имя].Видимость = СтраницаФорм.Имя = ЭтаФорма.КодФормы;	
	КонецЦикла;
	
	Элементы.ГруппаСтраницыОтчета.ТекущаяСтраница = Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы[ЭтаФорма.КодФормы];

	ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);
	
КонецПроцедуры

&НаСервере
Процедура РазделыОтчетаПриАктивизацииСтрокиНаСервере(НовыйКодФормы, НовыйПризнакМногострочность)		

	//проверим, что стояли не на основной, итоги передаем только когда переходим из доп.форм
	ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	Если ТекФорма <> Неопределено И Не ТекФорма.ПризнакОсновной Тогда
		
		КоличествоЛистов = ТекФорма.ВсегоСтраниц;
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, НовыйКодФормы, "КоличествоПриложений", КоличествоЛистов, Истина);
		
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы, Истина);		
	КонецЕсли;

	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);
	
	// установим новые значения реквизитам формы
	ЭтаФорма.КодФормы = НовыйКодФормы;		
	Если НовыйПризнакМногострочность Тогда
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтотОбъект);
	КонецЕсли;
	
	//// установим новые значения реквизитам формы
	//ЭтаФорма.КодФормы = НовыйКодФормы;		
КонецПроцедуры	


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

&НаКлиенте
Процедура ВыгрузитьВXML(Команда)
	ГодФормирования = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	
	Если 2022 < ГодФормирования Тогда 
		ТекстСообщения = НСтр("ru = 'Отчет не предназначен для выгрузки в XML в период формирования " + Формат(ГодФормирования,"ЧГ=0") + " г." + Символы.ПС + 
						"Пожалуйста, обновите комплект отчетов.'");
			
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);		
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект);	
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохраненияФайла.ПолноеИмяФайла = КодФормы + " " + СтруктураРеквизитовФормы.мГод + "г" + ".xml";
		ДиалогСохраненияФайла.Фильтр = РегламентированнаяОтчетностьКлиентСервер.ФильтрДиалоговВыбораИСохраненияРегламентированногоОтчета();	
		ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
		ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите файл'");		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
		ДиалогСохраненияФайла.Показать(ОписаниеОповещения);
	Иначе   
		НачатьПолучениеФайлаССервера(ВыгрузитьВXMLНаСервере(), КодФормы + ".xml"); 
	КонецЕсли;
	   
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресВременногоХранилища = ВыгрузитьВXMLНаСервере();
		
	ПолноеИмяФайла = Результат[0];
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, АдресВременногоХранилища));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяФайла",ПолноеИмяФайла); 
	Обработчик = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеЗавершение", ЭтотОбъект,ДополнительныеПараметры);
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
	ПараметрыСохранения.Интерактивно = Ложь;
	ФайловаяСистемаКлиент.СохранитьФайлы(Обработчик, ПолучаемыеФайлы, ПараметрыСохранения); 
	
	        
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ТекстЗаголовка = НСтр("ru = 'Данные успешно выгружены в файл'");
	
	СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДополнительныеПараметры.ИмяФайла);
	
	РабочийКаталог = СтруктураФайла.Путь;

	#Если НЕ ВебКлиент Тогда
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка, "file:///" + СтрЗаменить(СокрЛП(РабочийКаталог), "\", "/"),
		РабочийКаталог);
	#Иначе
		Если НЕ ЗначениеЗаполнено(ПолученныеФайлы) Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка,,
		РабочийКаталог);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Перезаполнить = Истина; // Для выполнения запроса на пересчет данных к пользователю
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения =  РегламентированнаяОтчетностьКлиент.ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Перезаполнить Тогда		
		Если СтрокаФормы.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстВопроса = "Перезаполнить данные формы и ее дополнительных форм?";
		Иначе
			ТекстВопроса = "Перезаполнить данные формы?";
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);
		Оповещение.ДополнительныеПараметры.Вставить("Перезаполнить", Перезаполнить);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);		

	КонецЕсли;		

	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	ДобавитьСтрокуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	УдалитьСтрокуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущаяСтр(Команда)
	ПредыдущаяСтрНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СледующаяСтр(Команда)
	СледующаяСтрНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницу(Команда)
	
	ВыбСтраница = 1;
	
	ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаСтраницы", ЭтаФорма); 
	ПоказатьВводЧисла(ОповещениеВводаЗначений,ВыбСтраница, "Введите номер страницы",5,0);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ПРОЦЕДУРЫ И ФУНКЦЦИИ

#Область ОценкаПроизводительности

&НаКлиенте
Функция НачатьЗамерВремени()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "Регламентированный отчет ""%1 Расчет текущих платежей по земельному налогу и налогу на имущество"" (заполнение)";
		КлючеваяОперация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(КлючеваяОперация,?(ЗначениеЗаполнено(КодФормы), НРег(КодФормы), "форма 701.01 ")); 
		ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент").НачатьЗамерВремени(Истина, КлючеваяОперация);
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеТаймера()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда 
		
		Возврат ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").НачатьЗамерВремени();
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьЗамер(ВремяНачала)
	
	Если ВремяНачала <> Неопределено 
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "Регламентированный отчет ""форма 701.01 Расчет текущих платежей по земельному налогу и налогу на имущество"" (заполнение)";
		ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПредыдущаяСтрНаСервере()
	ТекущаяСтраница = ТекущаяСтраница - 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура СледующаяСтрНаСервере()
	ТекущаяСтраница = ТекущаяСтраница + 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокСтруктурныхЕдиниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");			
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("НалоговыйКомитет");				
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");	
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");	
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");		
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");	
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрг");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");	
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");		
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");	
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);	
	СтруктураРеквизитовФормы.Вставить("мГод");	
	СтруктураРеквизитовФормы.Вставить("мКвартал");	
	СтруктураРеквизитовФормы.Вставить("мМесяц");	
	// индивидуальные параметры формы
	СтруктураРеквизитовФормы.Вставить("мПоддержкаРаботыСоСтруктурнымиПодразделениями");
	СтруктураРеквизитовФормы.Вставить("ВидОтчета");
	СтруктураРеквизитовФормы.Вставить("ИДКонфигурации");
	СтруктураРеквизитовФормы.Вставить("УчетПоСП");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтчетномПериоде() Экспорт

	СтрПериодОтчета = ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ФП = истина");
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Год Тогда
		СтруктураРеквизитовФормы.мКвартал = Неопределено;
		СтруктураРеквизитовФормы.мГод = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Иначе
		СтруктураРеквизитовФормы.мКвартал = Лев(СтрПериодОтчета,1);
		СтруктураРеквизитовФормы.мГод = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ВосстановитьСохраненныеДанные()	
	РегламентированнаяОтчетность.ВосстановитьСохраненныйОтчет(ЭтотОбъект);	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
            
    Перем СтруктураГруппы; 
    
    Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
        ТекстСообщения = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");            
        ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);                
                
        Возврат Ложь;
        
    КонецЕсли;
            
    СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
    СтруктураРеквизитовФормы.мРежимПечати = Истина;
    
	   Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		ВыборРасчета(КодФормы);		
	КонецЕсли; 

    РегламентированнаяОтчетность.СформироватьСписокПечатаемыхЛистов(ЭтаФорма);
                 
        
    Возврат Истина;
    
КонецФункции

&НаСервере
//Процедура выполняет выбор процедуры расчета.
//ВыборРасчета выполняется при восстановлении данных, при изменении поля табличного документа
//
//Параметры:    ТекФорма - имя текущей формы
//              Индекс - индекс строки для многострочной формы
//              Показатель - имя ячейки, откуда была вызвана процедура расчета многострочной
//                           формы, без указания номера строки (например, без "__1")
//
Процедура ВыборРасчета(ТекФорма, Индекс = Неопределено, Показатель = Неопределено) Экспорт
	
	Если ТекФорма = "Форма70101" Тогда
		Форма70101РасчетНаСервере(Неопределено,Неопределено,ТекФорма);
	ИначеЕсли ТекФорма = "Форма70101_001" Тогда
		Форма70101_001РасчетНаСервере(Индекс,Показатель);
	КонецЕсли;
		
КонецПроцедуры // ВыборРасчета()

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(мСписокСтруктурныхЕдиниц, ЭтаФорма, СтандартнаяОбработка,"", Налогоплательщик,НалоговыйКомитет,
																ПредопределенноеЗначение("Перечисление.РазделыНалоговогоУчета.МестныеНалоги"),Истина);
КонецПроцедуры
	
&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда		
		мСписокСтруктурныхЕдиниц = Результат;		
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц); 		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ЗначениеРеквизита)
											
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ЗначениеРеквизита);										
											
КонецФункции

///////////////////////////////////////////////////////////////
// Общие механизмы отчета

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;	
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
												
		КонецЕсли;	
			
		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();
				
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		ДокументОтражения = ПолучитьЗначениеРеквизита(СтруктураРеквизитовФормы.мСохраненныйДок, "ДокументОтраженияВУчете");
		Элементы.ФормаОтражениеВУчете.Заголовок = ПолучитьЗаголовокОтражениеВУчете(ДокументОтражения);
	КонецЕсли;

	МассивРеквизитовФормы = ЭтотОбъект.ПолучитьРеквизиты();
	Для Счетчик = 0 По МассивРеквизитовФормы.Количество()-1 Цикл		
		РеквизитФормы = МассивРеквизитовФормы[Счетчик];
		Если РеквизитФормы.ТипЗначения.СодержитТип(Тип("ТабличныйДокумент")) Тогда
			ЭтотОбъект[РеквизитФормы.Имя] = ЭтотОбъект[РеквизитФормы.Имя];	
		КонецЕсли;
	КонецЦикла;	

	мСтруктураЗначений = Новый Структура;
	
	Если СтруктураРеквизитовФормы.Свойство("СформироватьФормуОтчетаАвтоматически") И СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически <> Неопределено Тогда
		
		ЗначениеТаймера = ЗначениеТаймера();
		
		ЗаполнитьАвтоНаСервере();
		
		ЗаписатьЗамер(ЗначениеТаймера);
		
	КонецЕсли;

	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, ЭтотОбъект.КодФормы, Ложь,Ложь);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ЭтотОбъект.КодФормы);
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма);	
	
	Форма70101РасчетНаСервере(Неопределено, Неопределено, КодФормы);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметры(ТекущееИмяФормы) Экспорт
	
	Форма = РеквизитФормыВЗначение("мСписокФормБезИерархии").Строки.Найти(ТекущееИмяФормы, "КодФормы");
	
	Если Форма.Многострочность = 1 Тогда // заполнение структуры шапки(подвала) для многострочных форм
		
		Если НЕ ((Налогоплательщик  = Неопределено) Или (Налогоплательщик = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации"))) Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН", Налогоплательщик.ИдентификационныйНомер, Ложь);
		КонецЕсли;
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год", СтруктураРеквизитовФормы.мГод, Ложь);
		
	Иначе //обычная форма
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год", СтруктураРеквизитовФормы.мГод);
		
	КонецЕсли;
	
	Если ТекущееИмяФормы = Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7) Тогда 
		
		//при восстановлении отчета из 2.0, в структуре реквизитов формы, вид отчета будет пустой, поэтому его нужно заполнить из реквизита формы
		Если ЗначениеЗаполнено(ВидОтчета) И Не ЗначениеЗаполнено(СтруктураРеквизитовФормы.ВидОтчета) Тогда
			СтруктураРеквизитовФормы.ВидОтчета = ВидОтчета;
		КонецЕсли;
		
		//устанавливаем значения по умолчанию
		Если СтруктураРеквизитовФормы.ВидОтчета = "Очередной" Тогда
			ЗаполнитьВидРасчета("Очередной");
		Иначе
			ЗаполнитьВидРасчета("Дополнительный");
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ВидОтчета = "Дополнительный" Тогда
			ВидОтчета = СтруктураРеквизитовФормы.ВидОтчета + " - при изменении налоговых обязательств";
		Иначе
			ВидОтчета = СтруктураРеквизитовФормы.ВидОтчета;
		КонецЕсли;
				
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "КодВалюты", "KZT");
		
		 //заполним основные сведения об организации
		ЗаполнитьСведенияОНалогоплательщикеНаСервере();
		
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСведенияОНалогоплательщикеНаСервере()
	ОргСведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(Налогоплательщик, ДатаПодачи);
	//Если организация не указана то не выводим никаких сведений
	Если ОргСведения = 0 Тогда
		Возврат;
	КонецЕсли;

	// Инициализируем переменные
	РННЮЛ = ""; 	// РНН	
	НаимЮЛПол = ""; // Полное наименование 	
	ИИН_БИН = ""; 	// ИИН_БИН	
	ФИОРук = ""; 	// ФИО руководителя				
	КодНалоговогоОргана = ""; // Код налогового органа	
	АдрЮр = ""; //юр.адрес	
	АдрФакт = ""; //факт.адрес
	
	// Получаем данные
	ОргСведения.Свойство("РНН",     			РННЮЛ);
	ОргСведения.Свойство("БИН_ИИН",   			ИИН_БИН);
	ОргСведения.Свойство("ПолноеНаименование", 	НаимЮЛПол);	
	ОргСведения.Свойство("Руководитель",    	ФИОРук);	
	ОргСведения.Свойство("ЮридическийАдрес",    АдрЮр);
	ОргСведения.Свойство("ФактическийАдрес",   	АдрФакт);
                                         		
	// Производим операции связанные с текущей формой отчетности	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "ИИН_БИН",ИИН_БИН);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы,"ОргНазв",НаимЮЛПол);
	
	Если КодФормы = "Форма70101" Тогда
		// Разбиваем название организации
		НазваниеОрганизацииДляРазбиения = НаимЮЛПол;
		НачПозиция = 1;
		Для Шаг = 1 По 2 Цикл
			ДлинаСтроки = ЭтотОбъект[КодФормы + "ПолеТабличногоДокументаСтраница1"].Области["ОргНазв"+Шаг].ТипЗначения.КвалификаторыСтроки.Длина;
			НазОрганизации = Сред(НазваниеОрганизацииДляРазбиения, НачПозиция, ДлинаСтроки); 
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы,"ОргНазв"+Шаг,НазОрганизации);
			НачПозиция =НачПозиция + ДлинаСтроки;
		КонецЦикла;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы,"Руководитель",ФИОРук);
	
	// Дата подачи декларации
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы,"ДатаПодачи",ДатаПодачи);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуНаСервере()
	РегламентированнаяОтчетность.УдалитьСтрокуМногострочнойФормы(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере()
	РегламентированнаяОтчетность.ДобавитьСтрокуМногострочнойФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПанель(ПризнакОсновнойФормы,ПризнакМногострочности)
	
	Элементы.ФормаВыгрузитьВXML.Видимость = ПризнакОсновнойФормы; 
	Элементы.ГруппаКнопокДействияСоСтрокамиИСтраницами.Видимость = ПризнакМногострочности;	
		    	
КонецПроцедуры //ЗаполнитьПанель()

&НаСервере
Процедура ОчиститьНаСервере()
	
	РегламентированнаяОтчетность.ОчиститьРеглОтчет(ЭтаФорма,"ОчиститьФорму");
	
	
КонецПроцедуры

&НаСервере
Процедура СохранитьнаСервере()
	
	ДополнительныеПараметрыОтражения = СформироватьДополнительныеПараметрыОтраженияДанных();
	СтруктураРеквизитовФормы.Вставить("ДополнительныеПараметрыОтражения", ДополнительныеПараметрыОтражения);
	
	РегламентированнаяОтчетность.ПодготовитьТаблицуДляОтражениеВУчете(ЭтотОбъект);

	РегламентированнаяОтчетность.СохранитьОтчет(ЭтотОбъект);
	
КонецПроцедуры

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
// Функция для определения даты начала отчетного
// периода, исходя из номера отчетного квартала
Функция ПолучитьДатуНачала()
	// первый квартал
	Если Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) = 1 Тогда
		Возврат СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	КонецЕсли;
	// второй квартал
	Если Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) = 4 Тогда
		Возврат Дата(СтруктураРеквизитовФормы.мГод,2,1);
	КонецЕсли;
	// третий квартал
	Если Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) = 7 Тогда
		Возврат Дата(СтруктураРеквизитовФормы.мГод,5,1);
	КонецЕсли;
	// четвертый квартал
	Если Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) = 10 Тогда
		Возврат Дата(СтруктураРеквизитовФормы.мГод,8,1);
	КонецЕсли;
КонецФункции // ПолучитьДатуНачала

&НаСервере
// Функция для определения даты окончания отчетного
// периода, исходя из номера отчетного квартала
Функция ПолучитьДатуОкончания(ПолучатьГраницу = Ложь, ГраницаДня = Неопределено)
	ДатаКон = КонецМесяца(Дата(СтруктураРеквизитовФормы.мГод,Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),1));	
	
	Если ПолучатьГраницу Тогда
		ГраницаДня =  Новый Граница(ДатаКон,ВидГраницы.Включая);
	КонецЕсли;
	
	Возврат ДатаКон;
	
КонецФункции // ПолучитьДатуОкончания

&НаСервере
Процедура Очистить(ТекИмяФормы,ОчиститьВсе = Ложь) Экспорт
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	// Список ячеек, очищать которые не нужно
	
	
	Если ОчиститьВсе Тогда
		Если ТекИмяФормы = Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7) Тогда 
			СписокПоказателейНеПодлежащихОчистке.Добавить("КодВалюты");
		КонецЕсли;
	Иначе
		СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
		СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Год");
		СписокПоказателейНеПодлежащихОчистке.Добавить("НомерУведомления");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаУведомления");
		СписокПоказателейНеПодлежащихОчистке.Добавить("НомерКонтракта");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаКонтракта");
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодНалоговогоОргана");
	КонецЕсли;
		
	РегламентированнаяОтчетность.ОчиститьСтруктуруДанныхИТабличноеПолеФормы(ЭтаФорма, ТекИмяФормы, ОчиститьВсе, СписокПоказателейНеПодлежащихОчистке);
	// обновим представление списка структурных единиц
	Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц);
	КонецЕсли;
КонецПРоцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	 	
	
	Перезаполнить = ДополнительныеПараметры.Перезаполнить;
	Очистить(КодФормы,Истина);
	
	НачатьЗамерВремени();
	
	//форма и приложение заполняются одновременно
	Если КодФормы = "Форма70101" Или КодФормы = "Форма70101_001" Тогда
		Форма70101ЗаполнитьАвто(Перезаполнить);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции выгрузки данных отчета в XML

&НаСервере
Функция ВыгрузитьВXMLНаСервере(ВыдаватьСообщение = Ложь)
		
	Возврат РегламентированнаяОтчетность.ВыгрузитьОтчетВXMLДляСОНО(ЭтотОбъект, ВыдаватьСообщение);

КонецФункции

///////////////////////////////////////////////////////////////////
// ФОРМА 701.01

&НаСервере
// Процедура управляет выводом сведений о выбранном виде расчета
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьВидРасчета(ВидРасчета)
	
	//сначала очищаем поля, если были проставлены уже отметки
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "Первоначальный", "");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "Очередной", "");	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "Дополнительный", "");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "ПоУведомлению", "");
		
	Если ВидРасчета = "Первоначальный" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "Первоначальный", "Х");
	ИначеЕсли ВидРасчета = "Очередной" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "Очередной", "Х");		
	ИначеЕсли ВидРасчета = "Дополнительный" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "Дополнительный", "Х");		
	ИначеЕсли ВидРасчета = "ПоУведомлению" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "ПоУведомлению", "Х");		
	КонецЕсли;
	
	Если ВидРасчета = "ПоУведомлению" Тогда
		Форма70101ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Ложь;
		Форма70101ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита = Ложь;
	Иначе
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "НомерУведомления", "");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "ДатаУведомления", "");
		Форма70101ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Истина;
		Форма70101ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита = Истина;
		
	КонецЕсли;
	
	Модифированность = Истина;
	
КонецПроцедуры // ЗаполнитьВидРасчета()

&НаСервере
// Процедура управляет выводом сведений о выбранном виде расчета
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьКатегориюНалогоплательщика(Ячейка, ЗначениеОбласти)
	
	Если Ячейка = "ПрименяющийСНР"
	 ИЛИ Ячейка = "ДовУправляющий"
	 ИЛИ Ячейка = "ДеятельностьСЭЗ"
	 ИЛИ Ячейка ="Недропользователь" Тогда
	 
	 	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, Ячейка, ЗначениеОбласти, Ложь);
		
	КонецЕсли;
	
	Если Ячейка = "Недропользователь" Тогда
		Если ЗначениеОбласти = "Х" Тогда
			Форма70101ПолеТабличногоДокументаСтраница1.Области.НомерКонтракта.Защита = Ложь;
			Форма70101ПолеТабличногоДокументаСтраница1.Области.ДатаКонтракта.Защита = Ложь;
		Иначе
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "НомерКонтракта", "");
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "ДатаКонтракта", "");
			Форма70101ПолеТабличногоДокументаСтраница1.Области.НомерКонтракта.Защита = Истина;
			Форма70101ПолеТабличногоДокументаСтраница1.Области.ДатаКонтракта.Защита = Истина;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВидРасчета()

&НаСервере
Функция Форма70101НалогНаИмуществоРассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) Экспорт 
	
	Если СтруктураРеквизитовФормы.ВидОтчета = "Очередной" Тогда
		
		Запрос = Новый Запрос();	
				   
		ТекстЗапроса = "ВЫБРАТЬ
		               |	СУММА(ЕСТЬNULL(ТиповойОстатки.СуммаОстаток, 0)) КАК ОстаточнаяСтоимость
		               |ИЗ
		               |	РегистрСведений.ОбъектыИмущественногоНалога.СрезПоследних(
		               |			&Дата,
		               |			Налогоплательщик = &Налогоплательщик
		               |				) КАК ОбъектыИмущественногоНалогаСрезПоследних
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(
		               |				&Дата,
		               |				Счет В ИЕРАРХИИ (&СписокСчетов),
		               |				,
		               |				Субконто1 В
		               |					(ВЫБРАТЬ
		               |						ОбъектыИмущественногоНалогаСрезПоследних.ОбъектНалогообложения
		               |					ИЗ
		               |						РегистрСведений.ОбъектыИмущественногоНалога.СрезПоследних(&Дата, Налогоплательщик = &Налогоплательщик) КАК ОбъектыИмущественногоНалогаСрезПоследних
		               |					ГДЕ
		               |						ОбъектыИмущественногоНалогаСрезПоследних.НачислятьНалог = ИСТИНА И СтруктурнаяЕдиница В (&СписокСтруктурныхЕдиниц))) КАК ТиповойОстатки
		               |		ПО (ТиповойОстатки.Организация = ОбъектыИмущественногоНалогаСрезПоследних.Организация)
		               |			И (ТиповойОстатки.Субконто1 = ОбъектыИмущественногоНалогаСрезПоследних.ОбъектНалогообложения)
		               |ГДЕ
		               |	ОбъектыИмущественногоНалогаСрезПоследних.НачислятьНалог = ИСТИНА И СтруктурнаяЕдиница В (&СписокСтруктурныхЕдиниц)";
		
		
		Запрос.Текст = ТекстЗапроса;
		
		// Установка параметров	
		Запрос.УстановитьПараметр("Дата", 						СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета); 
		Запрос.УстановитьПараметр("СписокСтруктурныхЕдиниц", 	мСписокСтруктурныхЕдиниц);
		Запрос.УстановитьПараметр("Налогоплательщик", 			Налогоплательщик);			   
			
		СписокСчетовОС = Новый СписокЗначений;
		СписокСчетовОС.Добавить(ПланыСчетов.Типовой.ИнвестицииВНедвижимость_);        // счет 2300
		СписокСчетовОС.Добавить(ПланыСчетов.Типовой.ОсновныеСредства_);               // счет 2400
		СписокСчетовОС.Добавить(ПланыСчетов.Типовой.БиологическиеАктивы);		      // счет 2500
		СписокСчетовОС.Добавить(ПланыСчетов.Типовой.НематериальныеАктивы);            // счет 2700
		СписокСчетовОС.Добавить(ПланыСчетов.Типовой.ДолгосрочныеАктивыДляПродажи_);   // счет 1500		
		
		Если ВключатьВРасчетСчет2933 Тогда
			СписокСчетовОС.Добавить(ПланыСчетов.Типовой.НезавершенноеСтроительство_);	// счет 2930
		КонецЕсли;	
					
		Запрос.УстановитьПараметр("СписокСчетов", СписокСчетовОС);		
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() И ВыдаватьСообщения Тогда
			ТекстСообщения = НСтр("ru = 'Данные для заполнения данных по налогу на имущетсво формы 701.01 за отчетный период отсутствуют...'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;	
	
		ТаблицаРезультата = Результат.Выгрузить();	
	
		Возврат ТаблицаРезультата;                       
		
	Иначе
		
		РезультатРасчета = Новый Структура("ИзменениеСтоимости", 0);

		Результат = СформироватьОсновнойЗапросРасчетаНалогаНаИмущество().Выполнить();
	
		Если НЕ Результат.Пустой() Тогда				
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Выборка.Следующий();
			
			РезультатРасчета.ИзменениеСтоимости = Выборка.ИзменениеСтоимости;
			// в основной форме результат изменения показываем с "-" (как в выборке)		
		Иначе
			Если ВыдаватьСообщения Тогда
				ТекстСообщения = НСтр("ru = 'Данные для заполнения данных по налогу на имущество формы 701.01 за отчетный период отсутствуют...'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;	
	                        
		ТаблицаРезультата = Новый ТаблицаЗначений;
		ТаблицаРезультата.Колонки.Добавить("ИзменениеСтоимости");
		
		НоваяСтрока = ТаблицаРезультата.Добавить();
		НоваяСтрока.ИзменениеСтоимости 	= РезультатРасчета.ИзменениеСтоимости;
		                    			
		Возврат ТаблицаРезультата
	
	КонецЕсли;    	
		
КонецФункции // Форма70101НалогНаИмуществоРассчитатьДанныеФормы()

&НаСервере
Функция СформироватьОсновнойЗапросРасчетаНалогаНаИмущество()
	
	Запрос = Новый Запрос;
	
	ДатаНач = ПолучитьДатуНачала();
	ДатаКон = ПолучитьДатуОкончания();
	
	// Получим данные по стоимости для поступивших ФА по формуле 1/13 первоначальной стоимости 
	// поступивших объектов налогообложения, определенной по данным бухгалтерского учета на дату поступления, 
	// умноженной на количество месяцев текущего налогового периода, 
	// начиная с месяца, следующего за месяцем поступления объектов налогообложения, до конца налогового периода
	
	// поскольку начисление налога по поступившим товарам начинается со следующего месяца, то оперируем значениям на начало месяца	
	ТекстЗапросаПоМесяцам = "";	
	Для Счетчик = 1 по 12 Цикл
		Если Не ТекстЗапросаПоМесяцам = "" ТОгда
			ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам + "
			| ОБЪЕДИНИТЬ ВСЕ
			| ";
		КонецЕсли;
		ТекстЗапросаПоМесяцам =ТекстЗапросаПоМесяцам +  "
								|	ВЫБРАТЬ
								|	&Дата" + СокрЛП(Счетчик) + " как Период		                        
								| ";
		Запрос.УстановитьПараметр("Дата" + СокрЛП(Счетчик),  КонецМесяца(ДобавитьМесяц(НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),Счетчик-1)));			
	КонецЦикла;
	
	// Таблица "Объекты" - содержит объекты обложения налогом на имущество на начало каждого месяца. 
	//                     Получена на основе таблицы записей регистра сведений, соединенной с таблицей месяцев. 
				   
	ТекстЗапросаПоОбъектамИмущественногоНалога = "ВЫБРАТЬ
	                                            |	ТаблицаПериодов.Период
	                                            |ПОМЕСТИТЬ ТаблицаЗапросаПоМесяцам
	                                            |ИЗ
	                                            |	(" + ТекстЗапросаПоМесяцам + ") КАК ТаблицаПериодов
	                                            |;
	                                            |
	                                            |////////////////////////////////////////////////////////////////////////////////
												|ВЫБРАТЬ
												|	Периоды.Период КАК ПериодГода,
												|	ОбъектыИмущественногоНалога.ОбъектНалогообложения КАК ОбъектНалогообложения,
												|	ОбъектыИмущественногоНалога.Организация КАК Организация,
												|	ОбъектыИмущественногоНалога.Период КАК ПериодЗаписи,
												|	ОбъектыИмущественногоНалога.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
												|	ОбъектыИмущественногоНалога.НачислятьНалог КАК НачислятьНалог
												|ПОМЕСТИТЬ Объекты
												|ИЗ
												|	ТаблицаЗапросаПоМесяцам КАК Периоды
												|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыИмущественногоНалога КАК ОбъектыИмущественногоНалога
												|		ПО (ОбъектыИмущественногоНалога.Налогоплательщик = &Налогоплательщик)
												|			И (НАЧАЛОПЕРИОДА(ОбъектыИмущественногоНалога.Период, МЕСЯЦ) <= Периоды.Период)
												|;
												|////////////////////////////////////////////////////////////////////////////////
												|ВЫБРАТЬ
												|	Объекты.ПериодГода КАК ПериодГода,
												|	Объекты.ОбъектНалогообложения КАК ОбъектНалогообложения,
												|	Объекты.Организация КАК Организация,
												|	Объекты.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
												|	МАКСИМУМ(Объекты.ПериодЗаписи) КАК ПериодЗаписи
												|ПОМЕСТИТЬ ВТ_ОбъектыБезПризнакаОбложения
												|ИЗ
												|	Объекты КАК Объекты
												|СГРУППИРОВАТЬ ПО
												|	Объекты.ПериодГода,
												|	Объекты.ОбъектНалогообложения,
												|	Объекты.СтруктурнаяЕдиница,
												|	Объекты.Организация
												|;
												|////////////////////////////////////////////////////////////////////////////////
												|ВЫБРАТЬ
												|	ОбъектыБезПризнакаОбложения.ПериодГода КАК ПериодГода,
												|	ОбъектыБезПризнакаОбложения.Организация КАК Организация,
												|	ОбъектыБезПризнакаОбложения.ОбъектНалогообложения КАК ОбъектНалогообложения,
												|	ОбъектыИмущественногоНалога.НачислятьНалог КАК НачислятьНалог,
												|	ОбъектыИмущественногоНалога.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
												|	ОбъектыИмущественногоНалога.Период КАК ПериодЗаписи
												|ПОМЕСТИТЬ ОбъектыИмущественногоНалога
												|ИЗ
												|	ВТ_ОбъектыБезПризнакаОбложения КАК ОбъектыБезПризнакаОбложения
												|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыИмущественногоНалога КАК ОбъектыИмущественногоНалога
												|		ПО (ОбъектыИмущественногоНалога.Организация = ОбъектыБезПризнакаОбложения.Организация)
												|			И (ОбъектыИмущественногоНалога.ОбъектНалогообложения = ОбъектыБезПризнакаОбложения.ОбъектНалогообложения)
												|			И (ОбъектыИмущественногоНалога.Период = ОбъектыБезПризнакаОбложения.ПериодЗаписи)
												|			И (ОбъектыИмущественногоНалога.СтруктурнаяЕдиница = ОбъектыБезПризнакаОбложения.СтруктурнаяЕдиница)
												|ГДЕ
												|	ОбъектыИмущественногоНалога.СтруктурнаяЕдиница В(&СписокСтруктурныхЕдиниц)
												|;
												|////////////////////////////////////////////////////////////////////////////////
												|ВЫБРАТЬ
												|	ОбъектыИмущественногоНалога.ПериодГода КАК ПериодГода,
												|	ОбъектыИмущественногоНалога.ОбъектНалогообложения КАК ОбъектНалогообложения,
												|	ОбъектыИмущественногоНалога.Организация КАК Организация,
												|	СУММА(ЕСТЬNULL(ТиповойОборотыПоступления.СуммаОборотДт, 0)) КАК ПриобретениеВТечениеГода
												|ПОМЕСТИТЬ ВТ_ПриобретениеЗаГод
												|ИЗ
												|	ОбъектыИмущественногоНалога КАК ОбъектыИмущественногоНалога
												|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(&НачалоПериода, &ДатаКон, Месяц, Счет В ИЕРАРХИИ (&СписокСчетов), , , , ) КАК ТиповойОборотыПоступления
												|		ПО ОбъектыИмущественногоНалога.ОбъектНалогообложения = ТиповойОборотыПоступления.Субконто1
												|			И ОбъектыИмущественногоНалога.Организация = ТиповойОборотыПоступления.Организация
												|			И ОбъектыИмущественногоНалога.ПериодГода >= ТиповойОборотыПоступления.Период
												|			И (ВЫБОР
												|				КОГДА &УчетПоСП И ОбъектыИмущественногоНалога.СтруктурнаяЕдиница ССЫЛКА Справочник.ПодразделенияОрганизаций
												|//БК					ТОГДА ОбъектыИмущественногоНалога.СтруктурнаяЕдиница = ТиповойОборотыПоступления.СтруктурноеПодразделение
												|//УПП					ТОГДА ОбъектыИмущественногоНалога.СтруктурнаяЕдиница = ТиповойОборотыПоступления.Субконто2
												|				ИНАЧЕ ИСТИНА
												|			КОНЕЦ)
												|ГДЕ
												|	ТиповойОборотыПоступления.СуммаОборотДт <> 0
												|СГРУППИРОВАТЬ ПО
												|	ОбъектыИмущественногоНалога.ПериодГода,
												|	ОбъектыИмущественногоНалога.ОбъектНалогообложения,
												|	ОбъектыИмущественногоНалога.Организация
												|;
												|////////////////////////////////////////////////////////////////////////////////
												|ВЫБРАТЬ
												|	ОборотыПоПереоценкеСтоимости.Организация,
												|	ОборотыПоПереоценкеСтоимости.Период,
												|	ОборотыПоПереоценкеСтоимости.Субконто1,
												|//УПП	ОборотыПоПереоценкеСтоимости.Субконто2 КАК СтруктурноеПодразделение,
												|//БК	ОборотыПоПереоценкеСтоимости.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
												|	ОборотыПоПереоценкеСтоимости.СуммаОборотКт КАК СуммаСписанияНакопленнойАмортизации
												|ПОМЕСТИТЬ ВТ_ОборотыПоПереоценке
												|ИЗ
												|	РегистрБухгалтерии.Типовой.Обороты(&ДатаНач, &ДатаКон, Регистратор, Счет В ИЕРАРХИИ (&СписокСчетов), , , КорСчет В (&СписокСчетовАмортизации), ) КАК ОборотыПоПереоценкеСтоимости
												|ГДЕ
												|	ОборотыПоПереоценкеСтоимости.Регистратор ССЫЛКА Документ.ПереоценкаВнеоборотныхАктивов
												|	Или ОборотыПоПереоценкеСтоимости.Регистратор ССЫЛКА Документ.РеструктуризацияОС
												|;
												|////////////////////////////////////////////////////////////////////////////////
												|ВЫБРАТЬ
												|	ОборотыПоПереоценкеНакопленнойАмортизации.Организация,
												|	ОборотыПоПереоценкеНакопленнойАмортизации.Период,
												|	ОборотыПоПереоценкеНакопленнойАмортизации.Субконто1,
												|//УПП	ОборотыПоПереоценкеНакопленнойАмортизации.Субконто2 КАК СтруктурноеПодразделение,
												|//БК	ОборотыПоПереоценкеНакопленнойАмортизации.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
												|	ОборотыПоПереоценкеНакопленнойАмортизации.СуммаОборотКт КАК СуммаПоложительнойПереоценкиАмортизации,
												|	ОборотыПоПереоценкеНакопленнойАмортизации.СуммаОборотДт КАК СуммаОтрицательнойПереоценкиАмортизации
												|ПОМЕСТИТЬ ВТ_ОборотыПоПереоценкеАмортизации
												|ИЗ
												|	РегистрБухгалтерии.Типовой.Обороты(&ДатаНач, &ДатаКон, Регистратор, Счет В ИЕРАРХИИ (&СписокСчетовАмортизации), , , НЕ КорСчет В (&СписокСчетов), ) КАК ОборотыПоПереоценкеНакопленнойАмортизации
												|ГДЕ
												|	ОборотыПоПереоценкеНакопленнойАмортизации.Регистратор ССЫЛКА Документ.ПереоценкаВнеоборотныхАктивов
												|;
												|////////////////////////////////////////////////////////////////////////////////
												|ВЫБРАТЬ
												|	ТиповойОбороты.Период КАК Период,
												|	ТиповойОбороты.Субконто1 КАК ОсновноеСредство,
												|//УПП	ТиповойОбороты.Субконто2 КАК СтруктурноеПодразделение,
												|//БК	ТиповойОбороты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
												|	ТиповойОбороты.Организация КАК Организация,
												|	ТиповойОбороты.СуммаОборотДт КАК ПервоначальнаяСтоимость
												|ПОМЕСТИТЬ ВТ_ТаблицаПервоначальнаяСтоимость
												|ИЗ
												|	РегистрБухгалтерии.Типовой.Обороты(&ДатаНач, &ДатаКон, Месяц, Счет В ИЕРАРХИИ (&СписокСчетов), , , , ) КАК ТиповойОбороты
												|;
												|////////////////////////////////////////////////////////////////////////////////
												|ВЫБРАТЬ
												|    ОборотыПоПереоценкеСтоимости.Организация,
												|    ОборотыПоПереоценкеСтоимости.Период,
												|    ОборотыПоПереоценкеСтоимости.Субконто1,
												|//УПП  ОборотыПоПереоценкеСтоимости.Субконто2 КАК СтруктурноеПодразделение,
												|//БК	ОборотыПоПереоценкеСтоимости.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
												|    ОборотыПоПереоценкеСтоимости.СуммаОборотКт КАК СуммаОтрицательнойПереоценкиСтоимости,
												|    ОборотыПоПереоценкеСтоимости.СуммаОборотДт КАК СуммаПоложительнойПереоценкиСтоимости
												|ПОМЕСТИТЬ ВТ_ОборотыПоПереоценкеСтоимости
												|ИЗ
												|    РегистрБухгалтерии.Типовой.Обороты(&ДатаНач, &ДатаКон, Регистратор, Счет В ИЕРАРХИИ (&СписокСчетов), , , НЕ КорСчет В (&СписокСчетовАмортизации), ) КАК ОборотыПоПереоценкеСтоимости
												|ГДЕ
												|    ОборотыПоПереоценкеСтоимости.Регистратор ССЫЛКА Документ.ПереоценкаВнеоборотныхАктивов
												|;
												|
												|////////////////////////////////////////////////////////////////////////////////
												|ВЫБРАТЬ
												|	ОбъектыИмущественногоНалога.ПериодГода КАК ПериодГода,
												|	ОбъектыИмущественногоНалога.ОбъектНалогообложения КАК ОбъектНалогообложения,
												|	ОбъектыИмущественногоНалога.Организация КАК Организация,
												|	0 КАК ИзменениеСтоимостиПоступившихАктивов,
												|	ВЫБОР
												|		КОГДА ЕСТЬNULL(ТиповойОстаткиНаНачалоГода.СуммаОстаток, 0) = 0
												|				И ЕСТЬNULL(ТиповойОстаткиНаКонецОтчетногоПериода.СуммаОстаток, 0) = 0
												|			ТОГДА ЕСТЬNULL(ПриобретениеЗаГод.ПриобретениеВТечениеГода, 0)
												|		КОГДА ЕСТЬNULL(ТиповойОстаткиНаКонецОтчетногоПериода.СуммаОстаток, 0) = 0
												|				И ТиповойОбороты.СуммаОборотКт <> (ЕСТЬNULL(ОборотыПоПереоценкеСтоимости.СуммаОтрицательнойПереоценкиСтоимости,0) + ЕСТЬNULL(ОборотыПоПереоценке.СуммаСписанияНакопленнойАмортизации,0) )//если Кт оборот равна сумме переоценки стоимости, то это не выбытие по балансовой стоимости
												|			ТОГДА ЕСТЬNULL(ТиповойОстаткиНаНачалоГода.СуммаОстаток, 0)
												|		ИНАЧЕ ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) - ЕСТЬNULL(ОборотыПоПереоценке.СуммаСписанияНакопленнойАмортизации, 0) - ЕСТЬNULL(ОборотыПоПереоценкеАмортизации.СуммаОтрицательнойПереоценкиАмортизации, 0)
												|	КОНЕЦ КАК ИзменениеСтоимостиВыбывшихАктивов
												|ПОМЕСТИТЬ ВТ_итоговаяТаблица
												|ИЗ
												|	ОбъектыИмущественногоНалога КАК ОбъектыИмущественногоНалога
												|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(&НачалоПериода, Счет В ИЕРАРХИИ (&СписокСчетовОстаточнойСтоимости), , ) КАК ТиповойОстаткиНаНачалоГода
												|		ПО ОбъектыИмущественногоНалога.ОбъектНалогообложения = ТиповойОстаткиНаНачалоГода.Субконто1
												|			И ОбъектыИмущественногоНалога.Организация = ТиповойОстаткиНаНачалоГода.Организация
												|			И (ВЫБОР
												|				КОГДА &УчетПоСП И ОбъектыИмущественногоНалога.СтруктурнаяЕдиница ССЫЛКА Справочник.ПодразделенияОрганизаций
												|//БК					ТОГДА ОбъектыИмущественногоНалога.СтруктурнаяЕдиница = ТиповойОстаткиНаНачалоГода.СтруктурноеПодразделение
												|//УПП					ТОГДА ОбъектыИмущественногоНалога.СтруктурнаяЕдиница = ТиповойОстаткиНаНачалоГода.Субконто2
												|				ИНАЧЕ ИСТИНА
												|			КОНЕЦ)
												|
												|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(&ДатаКонГраница, Счет В ИЕРАРХИИ (&СписокСчетовОстаточнойСтоимости), , ) КАК ТиповойОстаткиНаКонецОтчетногоПериода
												|		ПО ОбъектыИмущественногоНалога.ОбъектНалогообложения = ТиповойОстаткиНаКонецОтчетногоПериода.Субконто1
												|			И ОбъектыИмущественногоНалога.Организация = ТиповойОстаткиНаКонецОтчетногоПериода.Организация
												|			И (ВЫБОР
												|				КОГДА &УчетПоСП И ОбъектыИмущественногоНалога.СтруктурнаяЕдиница ССЫЛКА Справочник.ПодразделенияОрганизаций
												|//БК					ТОГДА ОбъектыИмущественногоНалога.СтруктурнаяЕдиница = ТиповойОстаткиНаКонецОтчетногоПериода.СтруктурноеПодразделение
												|//УПП					ТОГДА ОбъектыИмущественногоНалога.СтруктурнаяЕдиница = ТиповойОстаткиНаКонецОтчетногоПериода.Субконто2
												|				ИНАЧЕ ИСТИНА
												|			КОНЕЦ)
												|
												|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(&ДатаНач, &ДатаКон, Месяц, Счет В ИЕРАРХИИ (&СписокСчетов), , , , ) КАК ТиповойОбороты
												|		ПО ОбъектыИмущественногоНалога.ОбъектНалогообложения = ТиповойОбороты.Субконто1
												|			И ОбъектыИмущественногоНалога.Организация = ТиповойОбороты.Организация
												|			И ОбъектыИмущественногоНалога.ПериодГода >= ТиповойОбороты.Период
												|			И (ВЫБОР
												|				КОГДА &УчетПоСП И ОбъектыИмущественногоНалога.СтруктурнаяЕдиница ССЫЛКА Справочник.ПодразделенияОрганизаций
												|//БК					ТОГДА ОбъектыИмущественногоНалога.СтруктурнаяЕдиница = ТиповойОбороты.СтруктурноеПодразделение
												|//УПП					ТОГДА ОбъектыИмущественногоНалога.СтруктурнаяЕдиница = ТиповойОбороты.Субконто2
												|				ИНАЧЕ ИСТИНА
												|			КОНЕЦ)
												|
												|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПриобретениеЗаГод КАК ПриобретениеЗаГод
												|		ПО ОбъектыИмущественногоНалога.ОбъектНалогообложения = ПриобретениеЗаГод.ОбъектНалогообложения
												|			И ОбъектыИмущественногоНалога.Организация = ПриобретениеЗаГод.Организация
												|			И ОбъектыИмущественногоНалога.ПериодГода = ПриобретениеЗаГод.ПериодГода
												|
												|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОборотыПоПереоценке КАК ОборотыПоПереоценке
												|		ПО ОбъектыИмущественногоНалога.ОбъектНалогообложения = ОборотыПоПереоценке.Субконто1
												|			И ОбъектыИмущественногоНалога.Организация = ОборотыПоПереоценке.Организация
												|			И (ВЫБОР
												|				КОГДА &УчетПоСП И ОбъектыИмущественногоНалога.СтруктурнаяЕдиница ССЫЛКА Справочник.ПодразделенияОрганизаций
												|					ТОГДА ОбъектыИмущественногоНалога.СтруктурнаяЕдиница = ОборотыПоПереоценке.СтруктурноеПодразделение
												|				ИНАЧЕ ИСТИНА
												|			КОНЕЦ)
												|
												|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОборотыПоПереоценкеАмортизации КАК ОборотыПоПереоценкеАмортизации
												|		ПО ОбъектыИмущественногоНалога.ОбъектНалогообложения = ОборотыПоПереоценкеАмортизации.Субконто1
												|			И ОбъектыИмущественногоНалога.Организация = ОборотыПоПереоценкеАмортизации.Организация
												|			И (ВЫБОР
												|				КОГДА &УчетПоСП И ОбъектыИмущественногоНалога.СтруктурнаяЕдиница ССЫЛКА Справочник.ПодразделенияОрганизаций
												|					ТОГДА ОбъектыИмущественногоНалога.СтруктурнаяЕдиница = ОборотыПоПереоценкеАмортизации.СтруктурноеПодразделение
												|				ИНАЧЕ ИСТИНА
												|			КОНЕЦ)
												|
												|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОборотыПоПереоценкеСтоимости КАК ОборотыПоПереоценкеСтоимости
												|		ПО ОбъектыИмущественногоНалога.ОбъектНалогообложения = ОборотыПоПереоценкеСтоимости.Субконто1
												|			И ОбъектыИмущественногоНалога.Организация = ОборотыПоПереоценкеСтоимости.Организация
												|			И (ВЫБОР
												|				КОГДА &УчетПоСП И ОбъектыИмущественногоНалога.СтруктурнаяЕдиница ССЫЛКА Справочник.ПодразделенияОрганизаций
												|					ТОГДА ОбъектыИмущественногоНалога.СтруктурнаяЕдиница = ОборотыПоПереоценкеСтоимости.СтруктурноеПодразделение
												|				ИНАЧЕ ИСТИНА
												|			КОНЕЦ)
												|ГДЕ
												|	ТиповойОбороты.СуммаОборотКт <> 0
												|
												|ОБЪЕДИНИТЬ ВСЕ
												|
												|ВЫБРАТЬ
												|	ОбъектыИмущественногоНалога.ПериодГода,
												|	ОбъектыИмущественногоНалога.ОбъектНалогообложения,
												|	ОбъектыИмущественногоНалога.Организация,
												|	ТаблицаПервоначальнаяСтоимость.ПервоначальнаяСтоимость - ЕСТЬNULL(ОборотыПоПереоценкеАмортизации.СуммаПоложительнойПереоценкиАмортизации, 0),
												|	0
												|ИЗ
												|	ОбъектыИмущественногоНалога КАК ОбъектыИмущественногоНалога
												|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаПервоначальнаяСтоимость КАК ТаблицаПервоначальнаяСтоимость
												|		ПО ОбъектыИмущественногоНалога.ОбъектНалогообложения = ТаблицаПервоначальнаяСтоимость.ОсновноеСредство
												|			И ОбъектыИмущественногоНалога.Организация = ТаблицаПервоначальнаяСтоимость.Организация
												|			И ОбъектыИмущественногоНалога.ПериодГода >= ТаблицаПервоначальнаяСтоимость.Период
												|			И (ВЫБОР
												|				КОГДА &УчетПоСП И ОбъектыИмущественногоНалога.СтруктурнаяЕдиница ССЫЛКА Справочник.ПодразделенияОрганизаций
												|					ТОГДА ОбъектыИмущественногоНалога.СтруктурнаяЕдиница = ТаблицаПервоначальнаяСтоимость.СтруктурноеПодразделение
												|				ИНАЧЕ ИСТИНА
												|			КОНЕЦ)
												|			И ТаблицаПервоначальнаяСтоимость.ПервоначальнаяСтоимость <> 0
												|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОборотыПоПереоценкеАмортизации КАК ОборотыПоПереоценкеАмортизации
												|		ПО ОбъектыИмущественногоНалога.ОбъектНалогообложения = ОборотыПоПереоценкеАмортизации.Субконто1
												|			И ОбъектыИмущественногоНалога.Организация = ОборотыПоПереоценкеАмортизации.Организация
												|			И (ВЫБОР
												|				КОГДА &УчетПоСП И ОбъектыИмущественногоНалога.СтруктурнаяЕдиница ССЫЛКА Справочник.ПодразделенияОрганизаций
												|					ТОГДА ОбъектыИмущественногоНалога.СтруктурнаяЕдиница = ОборотыПоПереоценкеАмортизации.СтруктурноеПодразделение
												|				ИНАЧЕ ИСТИНА
												|			КОНЕЦ)
												|		И ОборотыПоПереоценкеАмортизации.СуммаПоложительнойПереоценкиАмортизации <> 0
												|;
												|////////////////////////////////////////////////////////////////////////////////
												|ВЫБРАТЬ
												|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИтоговаяТаблица.ПериодГода) КАК КоличествоМесяцев,
												|	ИтоговаяТаблица.ОбъектНалогообложения КАК ОбъектНалогообложения,
												|	ИтоговаяТаблица.Организация КАК Организация,
												|	СУММА(ИтоговаяТаблица.ИзменениеСтоимостиПоступившихАктивов) КАК ИзменениеСтоимостиПоступившихАктивов,
												|	СУММА(ИтоговаяТаблица.ИзменениеСтоимостиВыбывшихАктивов) КАК ИзменениеСтоимостиВыбывшихАктивов,
												|	ИтоговаяТаблица.ИзменениеСтоимостиПоступившихАктивов КАК ПервоначальнаяСтоимость,
												|	ИтоговаяТаблица.ИзменениеСтоимостиВыбывшихАктивов КАК БалансоваяСтоимостьВыбывших
												|ПОМЕСТИТЬ ВТ_КонИтоговаяТаблица
												|ИЗ
												|	ВТ_итоговаяТаблица КАК ИтоговаяТаблица
												|СГРУППИРОВАТЬ ПО
												|	ИтоговаяТаблица.ОбъектНалогообложения,
												|	ИтоговаяТаблица.Организация,
												|	ИтоговаяТаблица.ИзменениеСтоимостиПоступившихАктивов,
												|	ИтоговаяТаблица.ИзменениеСтоимостиВыбывшихАктивов
												|;
												|////////////////////////////////////////////////////////////////////////////////
												|ВЫБРАТЬ
												|	СУММА(ВЫБОР
												|			КОГДА КонИтоговаяТаблица.ИзменениеСтоимостиВыбывшихАктивов <> 0
												|				ТОГДА - КонИтоговаяТаблица.КоличествоМесяцев
												|			ИНАЧЕ КонИтоговаяТаблица.КоличествоМесяцев
												|		КОНЕЦ) КАК КоличествоМесяцев,
												|	КонИтоговаяТаблица.ОбъектНалогообложения КАК ОбъектНалогообложения,
												|	КонИтоговаяТаблица.ОбъектНалогообложения.Код КАК КодОбъекта,
												|	КонИтоговаяТаблица.Организация КАК Организация,
												|	СУММА(КонИтоговаяТаблица.ПервоначальнаяСтоимость) КАК ПервоначальнаяСтоимость,
												|	СУММА(КонИтоговаяТаблица.БалансоваяСтоимостьВыбывших) КАК БалансоваяСтоимостьВыбывших,
												|	СУММА((ВЫРАЗИТЬ(КонИтоговаяТаблица.ИзменениеСтоимостиПоступившихАктивов / 13 КАК ЧИСЛО(15, 2))) - (ВЫРАЗИТЬ(КонИтоговаяТаблица.ИзменениеСтоимостиВыбывшихАктивов / 13 КАК ЧИСЛО(15, 2)))) КАК ИзменениеСтоимости,
												|	СУММА(ВЫРАЗИТЬ(КонИтоговаяТаблица.ИзменениеСтоимостиПоступившихАктивов / 13 КАК ЧИСЛО(15, 2))) КАК ИзменениеСтоимостиПоступившихАктивов,
												|	СУММА(ВЫРАЗИТЬ(КонИтоговаяТаблица.ИзменениеСтоимостиВыбывшихАктивов / 13 КАК ЧИСЛО(15, 2))) КАК ИзменениеСтоимостиВыбывшихАктивов
												|ИЗ
												|	ВТ_КонИтоговаяТаблица КАК КонИтоговаяТаблица
												|ГДЕ
												|	(КонИтоговаяТаблица.ИзменениеСтоимостиПоступившихАктивов <> 0
												|			ИЛИ КонИтоговаяТаблица.ИзменениеСтоимостиВыбывшихАктивов <> 0)
												|СГРУППИРОВАТЬ ПО
												|	КонИтоговаяТаблица.ОбъектНалогообложения,
												|	КонИтоговаяТаблица.Организация,
												|	КонИтоговаяТаблица.ОбъектНалогообложения.Код
												|ИТОГИ
												|	СУММА(ИзменениеСтоимости),
												|	СУММА(ИзменениеСтоимостиПоступившихАктивов),
												|	СУММА(ИзменениеСтоимостиВыбывшихАктивов)
												|ПО
												|	ОБЩИЕ,
												|	Организация";
	
												
	Если СтруктураРеквизитовФормы.ИДКонфигурации = "УППК" Тогда
		ТекстЗапросаПоОбъектамИмущественногоНалога = СтрЗаменить(ТекстЗапросаПоОбъектамИмущественногоНалога, "//УПП", "");
	Иначе
		ТекстЗапросаПоОбъектамИмущественногоНалога = СтрЗаменить(ТекстЗапросаПоОбъектамИмущественногоНалога, "//БК", "");
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("ДатаКонГраница", Новый Граница(ДатаКон,ВидГраницы.Включая));
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериода", КонецГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));	
	
	СписокСчетовПервоначальнойСтоимости = Новый СписокЗначений;
	СписокСчетовПервоначальнойСтоимости.Добавить(ПланыСчетов.Типовой.ИнвестицииВНедвижимость);
	СписокСчетовПервоначальнойСтоимости.Добавить(ПланыСчетов.Типовой.ОсновныеСредства);
	СписокСчетовПервоначальнойСтоимости.Добавить(ПланыСчетов.Типовой.БиологическиеАктивы);	
	СписокСчетовПервоначальнойСтоимости.Добавить(ПланыСчетов.Типовой.Гудвилл);
	СписокСчетовПервоначальнойСтоимости.Добавить(ПланыСчетов.Типовой.ПрочиеНематериальныеАктивы);
	СписокСчетовПервоначальнойСтоимости.Добавить(ПланыСчетов.Типовой.ДолгосрочныеАктивыДляПродажи_);
	
	Если ВключатьВРасчетСчет2933 Тогда
		СписокСчетовПервоначальнойСтоимости.Добавить(ПланыСчетов.Типовой.НезавершенноеСтроительство_);	  // счет 2930
	КонецЕсли;	

	
	СписокСчетовОстаточнойСтоимости = Новый СписокЗначений;
	СписокСчетовОстаточнойСтоимости.Добавить(ПланыСчетов.Типовой.ИнвестицииВНедвижимость_);
	СписокСчетовОстаточнойСтоимости.Добавить(ПланыСчетов.Типовой.ОсновныеСредства_);
	СписокСчетовОстаточнойСтоимости.Добавить(ПланыСчетов.Типовой.БиологическиеАктивы);	
	СписокСчетовОстаточнойСтоимости.Добавить(ПланыСчетов.Типовой.НематериальныеАктивы);
	СписокСчетовОстаточнойСтоимости.Добавить(ПланыСчетов.Типовой.ДолгосрочныеАктивыДляПродажи_);
	
	Если ВключатьВРасчетСчет2933 Тогда
		СписокСчетовОстаточнойСтоимости.Добавить(ПланыСчетов.Типовой.НезавершенноеСтроительство_);	  // счет 2930
	КонецЕсли;	

	СписокСчетовАмортизации = Новый СписокЗначений;
	СписокСчетовАмортизации.Добавить(ПланыСчетов.Типовой.АмортизацияОсновныхСредств);
	СписокСчетовАмортизации.Добавить(ПланыСчетов.Типовой.АмортизацияИнвестицийВНедвижимость);	
	СписокСчетовАмортизации.Добавить(ПланыСчетов.Типовой.АмортизацияПрочихНематериальныхАктивов);	
	СписокСчетовАмортизации.Добавить(ПланыСчетов.Типовой.АмортизацияРазведочныхИОценочныхАктивов);	
	
	Запрос.УстановитьПараметр("СписокСчетовАмортизации", СписокСчетовАмортизации);
	                          	
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетовПервоначальнойСтоимости);
	Запрос.УстановитьПараметр("СписокСчетовОстаточнойСтоимости", 	СписокСчетовОстаточнойСтоимости);
	
	Запрос.УстановитьПараметр("Налогоплательщик", 					Налогоплательщик);
	Запрос.УстановитьПараметр("СписокСтруктурныхЕдиниц", 			мСписокСтруктурныхЕдиниц);	  
	
	Если СтруктураРеквизитовФормы.ИДКонфигурации = "УППК" Тогда
		СтруктураРеквизитовФормы.УчетПоСП = (СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями И УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоПодразделениям(ДатаНач));
	Иначе
		СтруктураРеквизитовФормы.УчетПоСП = СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями;
	КонецЕсли;	
		
	Запрос.УстановитьПараметр("УчетПоСП", СтруктураРеквизитовФормы.УчетПоСП);
	
	Запрос.Текст = ТекстЗапросаПоОбъектамИмущественногоНалога;
	Возврат  Запрос;
	
КонецФункции // СформироватьОсновнойЗапросРасчетаНалогаНаИмущество

&НаСервере
Функция Форма70101ЗемельныйНалогРассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) Экспорт 
	
	Если СтруктураРеквизитовФормы.ВидОтчета = "Очередной" Тогда
		
		Запрос = Новый Запрос();	
				   
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОбъектыЗемельногоНалогаСрезПоследних.Период КАК Период,
		|	ОбъектыЗемельногоНалогаСрезПоследних.Регистратор КАК Регистратор,
		|	ОбъектыЗемельногоНалогаСрезПоследних.ОбъектНалогообложения КАК ОбъектНалогообложения,
		|	ОбъектыЗемельногоНалогаСрезПоследних.Налогоплательщик КАК Налогоплательщик,
		|	ОбъектыЗемельногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ОбъектыЗемельногоНалогаСрезПоследних.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА НЕ Организации.УчетПоМестнымБюджетам ЕСТЬ NULL
		|				И Организации.УчетПоМестнымБюджетам
		|			ТОГДА Организации.МестныйБюджет
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НЕ ПодразделенияОрганизаций.УчетПоМестнымБюджетам ЕСТЬ NULL
		|						И ПодразделенияОрганизаций.УчетПоМестнымБюджетам
		|					ТОГДА ПодразделенияОрганизаций.МестныйБюджет
		|				ИНАЧЕ ЗНАЧЕНИЕ(справочник.Контрагенты.ПустаяСсылка)
		|			КОНЕЦ
		|	КОНЕЦ КАК МестныйБюджет,
		|	ВЫБОР
		|		КОГДА НЕ Организации.УчетПоМестнымБюджетам ЕСТЬ NULL
		|				И Организации.УчетПоМестнымБюджетам
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НЕ ПодразделенияОрганизаций.УчетПоМестнымБюджетам ЕСТЬ NULL
		|						И ПодразделенияОрганизаций.УчетПоМестнымБюджетам
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|	КОНЕЦ КАК УчетПоМестнымБюджетам,
		|	ПараметрыРасчетаЗемельногоНалога.КатегорияЗемель КАК КатегорияЗемель,
		|	ПараметрыРасчетаЗемельногоНалога.КатегорияЗемель.ВидЗемельногоНалога КАК ВидЗемельногоНалога,
		|	ПараметрыРасчетаЗемельногоНалога.КатегорияЗемель.ВидЗемельногоНалога.КодБК КАК КБК,
		|	ПараметрыРасчетаЗемельногоНалога.БазоваяСтавкаНалога КАК БазоваяСтавкаНалога,
		|	ПараметрыРасчетаЗемельногоНалога.ПлощадьОблагаемая КАК ПлощадьОблагаемая,
		|	(ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.БазоваяСтавкаНалога, 0) + ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.ПроцентИзмененияБазовойСтавкиНалога, 0) * ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.БазоваяСтавкаНалога, 0) / 100) * ВЫБОР
		|		КОГДА ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалога, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалога, 0)
		|	КОНЕЦ * ВЫБОР
		|		КОГДА ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ, 0)
		|	КОНЕЦ * ВЫБОР
		|		КОГДА ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов, 0)
		|	КОНЕЦ КАК СтавкаНалогаСУчетомКорректировки,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.ПлощадьОблагаемая, 0) * (ВЫРАЗИТЬ((ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.БазоваяСтавкаНалога, 0) + ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.ПроцентИзмененияБазовойСтавкиНалога, 0) * ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.БазоваяСтавкаНалога, 0) / 100) * ВЫБОР
		|				КОГДА ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалога, 0) = 0
		|					ТОГДА 1
		|				ИНАЧЕ ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалога, 0)
		|			КОНЕЦ * ВЫБОР
		|				КОГДА ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ, 0) = 0
		|					ТОГДА 1
		|				ИНАЧЕ ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ, 0)
		|			КОНЕЦ * ВЫБОР
		|				КОГДА ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов, 0) = 0
		|					ТОГДА 1
		|				ИНАЧЕ ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов, 0)
		|			КОНЕЦ КАК ЧИСЛО(15, 3))) КАК ЧИСЛО(15, 0)) КАК СуммаЗемельногоНалога,
		|	ПараметрыРасчетаЗемельногоНалога.ПроцентИзмененияБазовойСтавкиНалога КАК ПроцентИзмененияБазовойСтавкиНалога,
		|	ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалога КАК КорректировкаБазовойСтавкиНалога,
		|	ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ КАК КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ,
		|	ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов КАК КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов
		|ПОМЕСТИТЬ ВТ_Расчет
		|ИЗ
		|	РегистрСведений.ОбъектыЗемельногоНалога.СрезПоследних(&Дата, Налогоплательщик = &Налогоплательщик) КАК ОбъектыЗемельногоНалогаСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыРасчетаЗемельногоНалога КАК ПараметрыРасчетаЗемельногоНалога
		|		ПО ОбъектыЗемельногоНалогаСрезПоследних.ОбъектНалогообложения = ПараметрыРасчетаЗемельногоНалога.ОсновноеСредство
		|			И ОбъектыЗемельногоНалогаСрезПоследних.Организация = ПараметрыРасчетаЗемельногоНалога.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ОбъектыЗемельногоНалогаСрезПоследних.СтруктурнаяЕдиница = Организации.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО ОбъектыЗемельногоНалогаСрезПоследних.СтруктурнаяЕдиница = ПодразделенияОрганизаций.Ссылка
		|ГДЕ
		|	ОбъектыЗемельногоНалогаСрезПоследних.НачислятьНалог = ИСТИНА
		|	И ОбъектыЗемельногоНалогаСрезПоследних.СтруктурнаяЕдиница В(&СписокСтруктурныхЕдиниц)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расчет.КБК КАК КБК,
		|	Расчет.ОбъектНалогообложения КАК ОбъектНалогообложения,
		|	Расчет.Налогоплательщик КАК Налогоплательщик,
		|	Расчет.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	Расчет.Организация КАК Организация,
		|	Расчет.МестныйБюджет КАК МестныйБюджет,
		|	ВЫРАЗИТЬ(Расчет.СуммаЗемельногоНалога КАК ЧИСЛО(12, 0)) КАК СуммаЗемельногоНалога,
		|	ВЫРАЗИТЬ(Расчет.СуммаЗемельногоНалога / 4 КАК ЧИСЛО(12, 0)) КАК СуммаЗемельногоНалогаОкр,
		|	(ВЫРАЗИТЬ(Расчет.СуммаЗемельногоНалога КАК ЧИСЛО(12, 0))) - (ВЫРАЗИТЬ(Расчет.СуммаЗемельногоНалога / 4 КАК ЧИСЛО(12, 0))) * 3 КАК СуммаЗемельногоНалогаОст
		|ИЗ
		|	ВТ_Расчет КАК Расчет" + ?(ИсключатьИзОсновнойФормыСуммыПоАкиматам, " ГДЕ Расчет.УчетПоМестнымБюджетам = ЛОЖЬ" , "") + "
		|
		|ИТОГИ
		|	СУММА(СуммаЗемельногоНалога),
		|	СУММА(СуммаЗемельногоНалогаОкр),
		|	СУММА(СуммаЗемельногоНалогаОст)
		|ПО
		|	КБК
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расчет.КБК КАК КБК,
		|	Расчет.ОбъектНалогообложения КАК ОбъектНалогообложения,
		|	Расчет.Налогоплательщик КАК Налогоплательщик,
		|	Расчет.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	Расчет.Организация КАК Организация,
		|	Расчет.МестныйБюджет КАК МестныйБюджет,
		|	Расчет.МестныйБюджет.ИдентификационныйКодЛичности КАК БИНАкимата,
		|	ВЫРАЗИТЬ(Расчет.СуммаЗемельногоНалога КАК ЧИСЛО(12, 0)) КАК СуммаЗемельногоНалога,
		|	ВЫРАЗИТЬ(Расчет.СуммаЗемельногоНалога / 4 КАК ЧИСЛО(12, 0)) КАК СуммаЗемельногоНалогаОкр,
		|	(ВЫРАЗИТЬ(Расчет.СуммаЗемельногоНалога КАК ЧИСЛО(12, 0))) - (ВЫРАЗИТЬ(Расчет.СуммаЗемельногоНалога / 4 КАК ЧИСЛО(12, 0))) * 3 КАК СуммаЗемельногоНалогаОст
		|ИЗ
		|	ВТ_Расчет КАК Расчет
		|ИТОГИ
		|	СУММА(СуммаЗемельногоНалога),
		|	СУММА(СуммаЗемельногоНалогаОкр),
		|	СУММА(СуммаЗемельногоНалогаОст)
		|ПО
		|	МестныйБюджет";

		
		
		Запрос.Текст = ТекстЗапроса;
		
		// Установка параметров	
		Запрос.УстановитьПараметр("Дата", 						СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета); 
		Запрос.УстановитьПараметр("СписокСтруктурныхЕдиниц", 	мСписокСтруктурныхЕдиниц);
		Запрос.УстановитьПараметр("Налогоплательщик", 			Налогоплательщик);			   
			
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Результат = МассивРезультатов[1];
		Если Результат.Пустой() И ВыдаватьСообщения Тогда
			ТекстСообщения = НСтр("ru = 'Данные для заполнения данных по земельному налогу формы 701.01 за отчетный период отсутствуют...'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;	
	
		Возврат МассивРезультатов;                       
		
	Иначе  // ВидОтчета = "Дополнительный"
		
		ДатаНач = ПолучитьДатуНачала();
		ДатаКон = ПолучитьДатуОкончания();
		
		Запрос = Новый Запрос;
				
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОбъектыЗемельногоНалога.Период КАК Период,
		|	ОбъектыЗемельногоНалога.Регистратор КАК Регистратор,
		|	ОбъектыЗемельногоНалога.ОбъектНалогообложения КАК ОбъектНалогообложения,
		|	ОбъектыЗемельногоНалога.Налогоплательщик КАК Налогоплательщик,
		|	ОбъектыЗемельногоНалога.НачислятьНалог КАК НачислятьНалог,
		|	ОбъектыЗемельногоНалога.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ОбъектыЗемельногоНалога.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА НЕ Организации.УчетПоМестнымБюджетам ЕСТЬ NULL 
		|				И Организации.УчетПоМестнымБюджетам
		|			ТОГДА Организации.МестныйБюджет
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НЕ ПодразделенияОрганизаций.УчетПоМестнымБюджетам ЕСТЬ NULL 
		|						И ПодразделенияОрганизаций.УчетПоМестнымБюджетам
		|					ТОГДА ПодразделенияОрганизаций.МестныйБюджет
		|				ИНАЧЕ ЗНАЧЕНИЕ(справочник.Контрагенты.ПустаяСсылка)
		|			КОНЕЦ
		|	КОНЕЦ КАК МестныйБюджет,
		|	ВЫБОР
		|		КОГДА НЕ Организации.УчетПоМестнымБюджетам ЕСТЬ NULL 
		|				И Организации.УчетПоМестнымБюджетам
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НЕ ПодразделенияОрганизаций.УчетПоМестнымБюджетам ЕСТЬ NULL 
		|						И ПодразделенияОрганизаций.УчетПоМестнымБюджетам
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|	КОНЕЦ КАК УчетПоМестнымБюджетам
		|ПОМЕСТИТЬ ОбъектыЗемельногоНалога
		|ИЗ
		|	РегистрСведений.ОбъектыЗемельногоНалога КАК ОбъектыЗемельногоНалога
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ОбъектыЗемельногоНалога.СтруктурнаяЕдиница = Организации.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО ОбъектыЗемельногоНалога.СтруктурнаяЕдиница = ПодразделенияОрганизаций.Ссылка
		|ГДЕ
		|	ОбъектыЗемельногоНалога.Период МЕЖДУ &ДатаНач И &ДатаКон
		|	И ОбъектыЗемельногоНалога.Налогоплательщик = &Налогоплательщик
		|	И ОбъектыЗемельногоНалога.СтруктурнаяЕдиница В(&СписокСтруктурныхЕдиниц)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ОбъектыЗемельногоНалога.Период, МЕСЯЦ) КАК Период,
		|	ОбъектыЗемельногоНалога.ОбъектНалогообложения КАК ОбъектНалогообложения,
		|	ОбъектыЗемельногоНалога.Налогоплательщик,
		|	ОбъектыЗемельногоНалога.СтруктурнаяЕдиница,
		|	ОбъектыЗемельногоНалога.Организация,
		|	ОбъектыЗемельногоНалога.МестныйБюджет,
		|	ОбъектыЗемельногоНалога.МестныйБюджет.ИдентификационныйКодЛичности КАК БИНАкимата,
		|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ОбъектыЗемельногоНалога.Период, МЕСЯЦ), ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ОбъектыЗемельногоНалога.Период, ГОД), СЕКУНДА, 1), МЕСЯЦ) КАК КоличествоМесяцев,
		|	ПараметрыРасчетаЗемельногоНалога.БазоваяСтавкаНалога,
		|	ПараметрыРасчетаЗемельногоНалога.ПроцентИзмененияБазовойСтавкиНалога,
		|	ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалога,
		|	ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ,
		|	ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов,
		|	(ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.БазоваяСтавкаНалога, 0) + ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.ПроцентИзмененияБазовойСтавкиНалога, 0) * ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.БазоваяСтавкаНалога, 0) / 100) * ВЫБОР
		|		КОГДА ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалога, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалога, 0)
		|	КОНЕЦ * ВЫБОР
		|		КОГДА ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ, 0)
		|	КОНЕЦ * ВЫБОР
		|		КОГДА ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов, 0)
		|	КОНЕЦ КАК СтавкаНалогаСУчетомКорректировки,
		|	ПараметрыРасчетаЗемельногоНалога.ПлощадьОблагаемая,
		|	ПараметрыРасчетаЗемельногоНалога.КатегорияЗемель,
		|	ПараметрыРасчетаЗемельногоНалога.КатегорияЗемель.ВидЗемельногоНалога КАК ВидЗемельногоНалога,
		|	ПараметрыРасчетаЗемельногоНалога.КатегорияЗемель.ВидЗемельногоНалога.КодБК КАК КБК,
		|	ВЫБОР
		|		КОГДА ОбъектыЗемельногоНалога.НачислятьНалог = ИСТИНА
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.ПлощадьОблагаемая, 0) * (ВЫРАЗИТЬ((ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.БазоваяСтавкаНалога, 0) + ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.ПроцентИзмененияБазовойСтавкиНалога, 0) * ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.БазоваяСтавкаНалога, 0) / 100) * ВЫБОР
		|						КОГДА ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалога, 0) = 0
		|							ТОГДА 1
		|						ИНАЧЕ ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалога, 0)
		|					КОНЕЦ * ВЫБОР
		|						КОГДА ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ, 0) = 0
		|							ТОГДА 1
		|						ИНАЧЕ ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ, 0)
		|					КОНЕЦ * ВЫБОР
		|						КОГДА ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов, 0) = 0
		|							ТОГДА 1
		|						ИНАЧЕ ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов, 0)
		|					КОНЕЦ КАК ЧИСЛО(15, 3))) КАК ЧИСЛО(15, 0))
		|		ИНАЧЕ - (ВЫРАЗИТЬ(ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.ПлощадьОблагаемая, 0) * (ВЫРАЗИТЬ((ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.БазоваяСтавкаНалога, 0) + ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.ПроцентИзмененияБазовойСтавкиНалога, 0) * ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.БазоваяСтавкаНалога, 0) / 100) * ВЫБОР
		|					КОГДА ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалога, 0) = 0
		|						ТОГДА 1
		|					ИНАЧЕ ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалога, 0)
		|				КОНЕЦ * ВЫБОР
		|					КОГДА ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ, 0) = 0
		|						ТОГДА 1
		|					ИНАЧЕ ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ, 0)
		|				КОНЕЦ * ВЫБОР
		|					КОГДА ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов, 0) = 0
		|						ТОГДА 1
		|					ИНАЧЕ ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов, 0)
		|				КОНЕЦ КАК ЧИСЛО(15, 3))) КАК ЧИСЛО(15, 0)))
		|	КОНЕЦ КАК СуммаЗемельногоНалога,
		|	ОбъектыЗемельногоНалога.УчетПоМестнымБюджетам
		|ПОМЕСТИТЬ ВТ_Расчет
		|ИЗ
		|	ОбъектыЗемельногоНалога КАК ОбъектыЗемельногоНалога
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыРасчетаЗемельногоНалога КАК ПараметрыРасчетаЗемельногоНалога
		|		ПО ОбъектыЗемельногоНалога.ОбъектНалогообложения = ПараметрыРасчетаЗемельногоНалога.ОсновноеСредство
		|			И ОбъектыЗемельногоНалога.Организация = ПараметрыРасчетаЗемельногоНалога.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расчет.КБК КАК КБК,
		|	Расчет.ОбъектНалогообложения КАК ОбъектНалогообложения,
		|	Расчет.Налогоплательщик КАК Налогоплательщик,
		|	Расчет.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	Расчет.Организация КАК Организация,
		|	Расчет.МестныйБюджет КАК МестныйБюджет,
		|	Расчет.КоличествоМесяцев КАК КоличествоМесяцев,
		|	ВЫРАЗИТЬ(Расчет.СуммаЗемельногоНалога * Расчет.КоличествоМесяцев / 12 КАК ЧИСЛО(12, 0)) КАК СуммаЗемельногоНалога,
		|	ВЫРАЗИТЬ((ВЫРАЗИТЬ(Расчет.СуммаЗемельногоНалога * Расчет.КоличествоМесяцев / 12 КАК ЧИСЛО(12, 0))) / &КоличествоОставшихсяПериодовПлатежа КАК ЧИСЛО(12, 0)) КАК СуммаЗемельногоНалогаОкр,
		|	(ВЫРАЗИТЬ(Расчет.СуммаЗемельногоНалога * Расчет.КоличествоМесяцев / 12 КАК ЧИСЛО(12, 0))) - (ВЫРАЗИТЬ((ВЫРАЗИТЬ(Расчет.СуммаЗемельногоНалога * Расчет.КоличествоМесяцев / 12 КАК ЧИСЛО(12, 0))) / &КоличествоОставшихсяПериодовПлатежа КАК ЧИСЛО(12, 0))) * (&КоличествоОставшихсяПериодовПлатежа - 1) КАК СуммаЗемельногоНалогаОст
		|ИЗ
		|	ВТ_Расчет КАК Расчет
		|
		|" + ?(ИсключатьИзОсновнойФормыСуммыПоАкиматам, " ГДЕ Расчет.УчетПоМестнымБюджетам = ЛОЖЬ" , "") + "
		|
		|ИТОГИ
		|	СУММА(СуммаЗемельногоНалога),
		|	СУММА(СуммаЗемельногоНалогаОкр),
		|	СУММА(СуммаЗемельногоНалогаОст)
		|ПО
		|	КБК
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расчет.ОбъектНалогообложения КАК ОбъектНалогообложения,
		|	Расчет.Налогоплательщик КАК Налогоплательщик,
		|	Расчет.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	Расчет.Организация КАК Организация,
		|	Расчет.МестныйБюджет КАК МестныйБюджет,
		|	Расчет.МестныйБюджет.ИдентификационныйКодЛичности КАК БИНАкимата,
		|	Расчет.КоличествоМесяцев КАК КоличествоМесяцев,
		|	ВЫРАЗИТЬ(Расчет.СуммаЗемельногоНалога * Расчет.КоличествоМесяцев / 12 КАК ЧИСЛО(12, 0)) КАК СуммаЗемельногоНалога,
		|	ВЫРАЗИТЬ((ВЫРАЗИТЬ(Расчет.СуммаЗемельногоНалога * Расчет.КоличествоМесяцев / 12 КАК ЧИСЛО(12, 0))) / &КоличествоОставшихсяПериодовПлатежа КАК ЧИСЛО(12, 0)) КАК СуммаЗемельногоНалогаОкр,
		|	(ВЫРАЗИТЬ(Расчет.СуммаЗемельногоНалога * Расчет.КоличествоМесяцев / 12 КАК ЧИСЛО(12, 0))) - (ВЫРАЗИТЬ((ВЫРАЗИТЬ(Расчет.СуммаЗемельногоНалога * Расчет.КоличествоМесяцев / 12 КАК ЧИСЛО(12, 0))) / &КоличествоОставшихсяПериодовПлатежа КАК ЧИСЛО(12, 0))) * (&КоличествоОставшихсяПериодовПлатежа - 1) КАК СуммаЗемельногоНалогаОст
		|ИЗ
		|	ВТ_Расчет КАК Расчет
		|ИТОГИ
		|	СУММА(СуммаЗемельногоНалога),
		|	СУММА(СуммаЗемельногоНалогаОкр),
		|	СУММА(СуммаЗемельногоНалогаОст)
		|ПО
		|	МестныйБюджет";
					   
		Запрос.Текст = ТекстЗапроса;
		
		// Установка параметров	
		Запрос.УстановитьПараметр("ДатаНач", 					ДатаНач); 
		Запрос.УстановитьПараметр("ДатаКон", 					ДатаКон); 
		Запрос.УстановитьПараметр("СписокСтруктурныхЕдиниц", 	мСписокСтруктурныхЕдиниц);
		Запрос.УстановитьПараметр("Налогоплательщик", 			Налогоплательщик);			   
		
		НомерТекущегоКвартала = Цел((Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1) / 3) + 1;
		КоличествоОставшихсяПериодовПлатежа = 4 - НомерТекущегоКвартала + 1;				
		
		Запрос.УстановитьПараметр("КоличествоОставшихсяПериодовПлатежа", КоличествоОставшихсяПериодовПлатежа);
		
		//// сумму платежа за последний месяц считаем таким способом, чтобы избежать ошибок
		//// округления
		//СуммаВМесяц = Окр(ОбщаяСуммаБИН/КоличествоОставшихсяПериодовПлатежа);
		//СуммаВПоследнийМесяц = Окр(ОбщаяСумма - (СуммаВМесяц*(КоличествоОставшихсяПериодовПлатежа - 1)));

		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Результат = МассивРезультатов[2];
		Если Результат.Пустой() И ВыдаватьСообщения Тогда
			ТекстСообщения = НСтр("ru = 'Данные для заполнения данных по земельному налогу формы 701.01 за отчетный период отсутствуют...'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;	
	
		//Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
		Возврат МассивРезультатов;       
		
	КонецЕсли;    	
		
КонецФункции // Форма70101ЗемельныйНалогРассчитатьДанныеФормы()

&НаСервере
// Процедура обновляет данные вычисляемых ячеек табличного 
// документа
//
Процедура Форма70101ЗаполнитьНалогНаИмущество(КодФормы, Перезаполнить)               
	
	ТаблицаОтчета = Форма70101НалогНаИмуществоРассчитатьДанныеФормы(Истина);	
	
	Если СтруктураРеквизитовФормы.ВидОтчета = "Очередной" Тогда
		                  				          				
		// РАСЧЕТ НАЛОГА НА ИМУЩЕСТВО		
		СтавкаНалога = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.НалогНаИмущество, СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);		
		
        Если СтавкаНалога = NULL ИЛИ СтавкаНалога = Неопределено ИЛИ СтавкаНалога = 0 Тогда
            СтавкаНалога = 0;
			ТекстСообщения = НСтр("ru='Не определена ставка налога на имущество!'");
	 		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);	
		КонецЕсли;
		
		Для Каждого СтрокаОтчета из ТаблицаОтчета Цикл  			
			ОстаточнаяСтоимость = ?(СтрокаОтчета.ОстаточнаяСтоимость = Null, 0, СтрокаОтчета.ОстаточнаяСтоимость);
			ОбщаяСумма = Окр(ОстаточнаяСтоимость * СтавкаНалога /100,0);
			СуммаВМесяц = Окр(ОбщаяСумма/4,0);
			СуммаВПоследнийМесяц = ОбщаяСумма - СуммаВМесяц*3;
			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"s_104101_C",СуммаВМесяц,Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"s_104101_D",СуммаВМесяц,Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"s_104101_E",СуммаВМесяц,Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"s_104101_F",СуммаВПоследнийМесяц,Истина);
			
			// Итоговая сумма текущих платежей
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"s_104101_G",ОбщаяСумма,Истина);
			
		КонецЦикла;
		
	Иначе
		 				
		// РАСЧЕТ НАЛОГА НА ИМУЩЕСТВО		
		СтавкаНалога = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.НалогНаИмущество, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
        Если СтавкаНалога = NULL ИЛИ СтавкаНалога = Неопределено ИЛИ СтавкаНалога = 0 Тогда
            СтавкаНалога = 0;
			ТекстСообщения = НСтр("ru='Не определена ставка налога на имущество!'");
	 		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);	
		КонецЕсли;
		
		НомерТекущегоКвартала = Цел((Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1) / 3) + 1;
		КоличествоОставшихсяПериодовПлатежа = 4 - НомерТекущегоКвартала + 1;	
		
		Для Каждого СтрокаОтчета из ТаблицаОтчета Цикл  			
			
			СреднегодоваяСтоимость = ?(СтрокаОтчета.ИзменениеСтоимости = Null, 0, Окр(СтрокаОтчета.ИзменениеСтоимости));
			ОбщаяСумма = Окр(СреднегодоваяСтоимость * СтавкаНалога /100,0);
			// сумму платежа за последний месяц считаем таким способом, чтобы избежать ошибок
			// округления
			СуммаПоСроку = Окр(ОбщаяСумма/КоличествоОставшихсяПериодовПлатежа);
			СуммаВПоследнийМесяц = Окр(ОбщаяСумма - (СуммаПоСроку*(КоличествоОставшихсяПериодовПлатежа - 1)));
			Если НомерТекущегоКвартала = 1 Тогда
				РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"s_104101_C",СуммаПоСроку,Истина);
			КонецЕсли;
			Если НомерТекущегоКвартала <= 2 Тогда
				РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"s_104101_D",СуммаПоСроку,Истина);
			КонецЕсли;                           
			Если НомерТекущегоКвартала <= 3 Тогда
				РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"s_104101_E",СуммаПоСроку,Истина);
			КонецЕсли;                           
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"s_104101_F",СуммаВПоследнийМесяц,Истина);
			
			// Итоговая сумма текущих платежей
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"s_104101_G",ОбщаяСумма,Истина);
				
		КонецЦикла;
			     			
	КонецЕсли;
	
КонецПроцедуры // Форма70101ЗаполнитьНалогНаИмущество()

&НаСервере
// Процедура обновляет данные вычисляемых ячеек табличного 
// документа
//
Процедура Форма70101ЗаполнитьЗемельныйНалог(КодФормы, Перезаполнить)
	
	МассивРезультатов = Форма70101ЗемельныйНалогРассчитатьДанныеФормы(Истина);
	
	Если СтруктураРеквизитовФормы.ВидОтчета = "Очередной" Тогда
		
		ВыборкаЗемля = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		// РАСЧЕТ ЗЕМЕЛЬНОГО НАЛОГА		
		ОбщаяСумма104302    = 0;
		ОбщаяСумма104302Окр = 0;
		ОбщаяСумма104302Ост = 0;
		
		ОбщаяСуммаКОтражению104302    = 0;
		ОбщаяСуммаКОтражению104302Окр = 0;
		ОбщаяСуммаКОтражению104302Ост = 0;
		
		Пока ВыборкаЗемля.Следующий() Цикл
			
			КБК = ВыборкаЗемля.КБК;
		
			ОбщаяСумма104302 	= ОбщаяСумма104302 	  + ВыборкаЗемля.СуммаЗемельногоНалога;
			ОбщаяСумма104302Окр = ОбщаяСумма104302Окр + ВыборкаЗемля.СуммаЗемельногоНалогаОкр; 
			ОбщаяСумма104302Ост = ОбщаяСумма104302Ост + ВыборкаЗемля.СуммаЗемельногоНалогаОст; 
			
			ВыборкаСтрока = ВыборкаЗемля.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСтрока.Следующий() Цикл
				Если СокрЛП(КБК) <> "104302" Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для объекта земельного налога ""%1"" указан Код бюджетной классификации ""%2"". %3 Сумма рассчитанного земельного налога для данного объекта налогообложения включена в расчет строки по КБК 104302.'")
					, ВыборкаСтрока.ОбъектНалогообложения
					, СокрЛП(КБК)
					, Символы.ПС);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ВыборкаСтрока.МестныйБюджет) Тогда
					ОбщаяСуммаКОтражению104302 	  = ОбщаяСуммаКОтражению104302 	   + ВыборкаСтрока.СуммаЗемельногоНалога;
					ОбщаяСуммаКОтражению104302Окр = ОбщаяСуммаКОтражению104302Окр  + ВыборкаСтрока.СуммаЗемельногоНалогаОкр; 
					ОбщаяСуммаКОтражению104302Ост = ОбщаяСуммаКОтражению104302Ост  + ВыборкаСтрока.СуммаЗемельногоНалогаОст; 
				КонецЕсли;
			КонецЦикла;			
			
		КонецЦикла;
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "s_104302_C", ОбщаяСумма104302Окр, Истина);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "s_104302_D", ОбщаяСумма104302Окр, Истина);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "s_104302_E", ОбщаяСумма104302Окр, Истина);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "s_104302_F", ОбщаяСумма104302Ост, Истина);
		// Итоговая сумма текущих платежей
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "s_104302_G", ОбщаяСумма104302, Истина);
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "otr_s_104302_C", ОбщаяСуммаКОтражению104302Окр, Истина);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "otr_s_104302_D", ОбщаяСуммаКОтражению104302Окр, Истина);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "otr_s_104302_E", ОбщаяСуммаКОтражению104302Окр, Истина);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "otr_s_104302_F", ОбщаяСуммаКОтражению104302Ост, Истина);			
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "otr_s_104302_G", ОбщаяСуммаКОтражению104302, Истина);
			
		//Заполнение 701.01.001
		КодПриложения   = "Форма70101_001";
		ТекущаяСтраница = 1;
		ВсегоСтраниц    = 1; 
		
		СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, КодПриложения);
		
		ОбщаяСуммаБИН = 0;
		МассивСообщений = Новый Массив;
		Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
			НомерСтроки = 2;
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
			ОбщиеЭлементыГруппы = ЭлементСтруктуры.Значение.ШапкаИПодвал;
			ТаблицаСтрокГруппы.Очистить();
			
			ВыборкаАкиматы = МассивРезультатов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаАкиматы.Следующий() Цикл
				Если Не ЗначениеЗаполнено(ВыборкаАкиматы.МестныйБюджет) Тогда
					ВыборкаСтрока = ВыборкаАкиматы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
					Пока ВыборкаСтрока.Следующий() Цикл	
						Если ЗначениеЗаполнено(ВыборкаСтрока.СтруктурнаяЕдиница ) И ВыборкаСтрока.СтруктурнаяЕдиница.УчетПоМестнымБюджетам Тогда
							ТекстСообщения = НСтр("ru = 'У Структурной единицы ""%1"" не указан Аппарат акима для форм налоговой отчетности. Сумма рассчитанного земельного налога для объекта ""%2 "" не отражена в форме 701.01.001.'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаСтрока.СтруктурнаяЕдиница,  ВыборкаСтрока.ОбъектНалогообложения);			
							Если МассивСообщений.Найти(ТекстСообщения) = Неопределено Тогда
								МассивСообщений.Добавить(ТекстСообщения);
								ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
							КонецЕсли;	
						КонецЕсли;	
					КонецЦикла;	
					Продолжить;
				КонецЕсли;
				
				Элемент = ТаблицаСтрокГруппы.Добавить();   			 
				
				ОбщаяСуммаБИН    = 0;
				ОбщаяСуммаБИНОкр = 0;
				ОбщаяСуммаБИНОст = 0;
				
				ВыборкаСтрока = ВыборкаАкиматы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
				Пока ВыборкаСтрока.Следующий() Цикл	
					Если ЗначениеЗаполнено(ВыборкаСтрока.МестныйБюджет) Тогда
						ОбщаяСуммаБИН    = ОбщаяСуммаБИН + ВыборкаСтрока.СуммаЗемельногоНалога;
						ОбщаяСуммаБИНОкр = ОбщаяСуммаБИНОкр + ВыборкаСтрока.СуммаЗемельногоНалогаОкр;
						ОбщаяСуммаБИНОст = ОбщаяСуммаБИНОст + ВыборкаСтрока.СуммаЗемельногоНалогаОст;
					КонецЕсли;	
				КонецЦикла;	
				
				Если ИмяГруппы = "Страница1" Тогда
					//Так должны заполнять по отдельности значения выборки 
					//для каждого листа
					Элемент.Ф70101_001_A1 = Формат(НомерСтроки, мФорматНомераСтроки);
					
					Если СокрЛП(ВыборкаАкиматы.БИНАкимата) = "" ТОгда
						Если ЗначениеЗаполнено(ВыборкаАкиматы.МестныйБюджет) Тогда
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'ИИН/БИН акимата аппарата %1 не заполнен'"),
							Строка(ВыборкаАкиматы.МестныйБюджет));
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ВыборкаАкиматы.МестныйБюджет); 
						КонецЕсли;
						СтрокаБИНКонтрагента = "";                                                                             						
					ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ВыборкаАкиматы.БИНАкимата)  ТОгда
						// В ИИН/БИН имеются символы, отличные от цифр (0..9)
						Если ЗначениеЗаполнено(ВыборкаАкиматы.МестныйБюджет) Тогда
							
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В ИИН/БИН контрагента %1 имеются символы, отличные от цифр (0..9)'"),
							Строка(ВыборкаАкиматы.МестныйБюджет));
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ВыборкаАкиматы.МестныйБюджет); 
							
						КонецЕсли;
						СтрокаБИНКонтрагента = "";						
					Иначе
						СтрокаБИНКонтрагента = ВыборкаАкиматы.БИНАкимата;
					КонецЕсли;
					
					Элемент.Ф70101_001_B = СтрокаБИНКонтрагента;
					
					//заполним таблицу расшифровки
					РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы, Элемент, "Ф70101_001_B",  ?(ВыборкаАкиматы.МестныйБюджет = NULL, Неопределено, ВыборкаАкиматы.МестныйБюджет));
					
					Элемент.Ф70101_001_C = ОбщаяСуммаБИНОкр;
					РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы, Элемент, "Ф70101_001_C", ОбщаяСуммаБИНОкр);
					
					Элемент.Ф70101_001_D = ОбщаяСуммаБИНОкр;
					РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы, Элемент, "Ф70101_001_D", ОбщаяСуммаБИНОкр);
					
					Элемент.Ф70101_001_E = ОбщаяСуммаБИНОкр;
					РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы, Элемент, "Ф70101_001_E", ОбщаяСуммаБИНОкр);
					
				Иначе
					
					Элемент.Ф70101_001_A2 = Формат(НомерСтроки, мФорматНомераСтроки);
					
					Элемент.Ф70101_001_B2 = ВыборкаАкиматы.БИНАкимата;
					РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы, Элемент, "Ф70101_001_B2",  ?(ВыборкаАкиматы.МестныйБюджет = NULL, Неопределено, ВыборкаАкиматы.МестныйБюджет));
					
					Элемент.Ф70101_001_F = ОбщаяСуммаБИНОст;
					РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы, Элемент, "Ф70101_001_F", ОбщаяСуммаБИНОст);
					
					Элемент.Ф70101_001_G = ОбщаяСуммаБИН;
					РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы, Элемент, "Ф70101_001_G", ОбщаяСуммаБИН);
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;			    
		КонецЦикла;	
		
		Если ОбщаяСуммаБИН <> 0 Тогда
			//посчитаем количество листов
			КоличествоЛистов = НомерСтроки / 15;
			Если Цел(КоличествоЛистов) < КоличествоЛистов Тогда
				КоличествоЛистов = Окр(КоличествоЛистов) + 1;
			КонецЕсли;
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"КоличествоПриложений",КоличествоЛистов,Истина);
		КонецЕсли;	
		
		РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, КодПриложения, СтруктураФормы); 	 
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодПриложения);			
		РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, КодПриложения, Перезаполнить);   	
		
		Если Перезаполнить Тогда
			РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодПриложения);
		КонецЕсли;
		
		
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтаФорма);
		
	Иначе  // ВидОтчета = "Дополнительный"
		
		// РАСЧЕТ ЗЕМЕЛЬНОГО НАЛОГА		
		ОбщаяСумма104302    = 0;
		ОбщаяСумма104302Окр = 0;
		ОбщаяСумма104302Ост = 0;
		
		ОбщаяСуммаКОтражению104302    = 0;
		ОбщаяСуммаКОтражению104302Окр = 0;
		ОбщаяСуммаКОтражению104302Ост = 0;
		
		РезультатКБК = МассивРезультатов[2];
		РезультатАкиматы = МассивРезультатов[3]; 
		
		//Заполнение 701.01
		ВыборкаЗемля = РезультатКБК.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
		Пока ВыборкаЗемля.Следующий() Цикл
			
			КБК = ВыборкаЗемля.КБК;
	
			ОбщаяСумма104302 	= ОбщаяСумма104302    + ВыборкаЗемля.СуммаЗемельногоНалога;
			ОбщаяСумма104302Окр = ОбщаяСумма104302Окр + ВыборкаЗемля.СуммаЗемельногоНалогаОкр;
			ОбщаяСумма104302Ост = ОбщаяСумма104302Ост + ВыборкаЗемля.СуммаЗемельногоНалогаОст;
			
			ВыборкаСтрока = ВыборкаЗемля.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСтрока.Следующий() Цикл 
				Если СокрЛП(КБК) <> "104302" Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для объекта земельного налога ""%1"" указан Код бюджетной классификации ""%2"". %3 Сумма рассчитанного земельного налога для данного объекта налогообложения включена в расчет строки по КБК 104302.'")
					, ВыборкаСтрока.ОбъектНалогообложения
					, СокрЛП(КБК)
					, Символы.ПС);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);								
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ВыборкаСтрока.МестныйБюджет) Тогда
					ОбщаяСуммаКОтражению104302 	  = ОбщаяСуммаКОтражению104302 	   + ВыборкаСтрока.СуммаЗемельногоНалога;
					ОбщаяСуммаКОтражению104302Окр = ОбщаяСуммаКОтражению104302Окр  + ВыборкаСтрока.СуммаЗемельногоНалогаОкр; 
					ОбщаяСуммаКОтражению104302Ост = ОбщаяСуммаКОтражению104302Ост  + ВыборкаСтрока.СуммаЗемельногоНалогаОст; 
				КонецЕсли;
			КонецЦикла;			

		КонецЦикла;			
	
		НомерТекущегоКвартала = Цел((Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1) / 3) + 1;
		
		Если НомерТекущегоКвартала = 1 Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "s_104302_C", ОбщаяСумма104302Окр, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "otr_s_104302_C", ОбщаяСуммаКОтражению104302Окр, Истина);
		КонецЕсли;
		
		Если НомерТекущегоКвартала <= 2 Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "s_104302_D", ОбщаяСумма104302Окр, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "otr_s_104302_D", ОбщаяСуммаКОтражению104302Окр, Истина);
		КонецЕсли;                           
		
		Если НомерТекущегоКвартала <= 3 Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "s_104302_E", ОбщаяСумма104302Окр, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "otr_s_104302_E", ОбщаяСуммаКОтражению104302Окр, Истина);
		КонецЕсли;                           
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "s_104302_F", ОбщаяСумма104302Ост, Истина);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "otr_s_104302_F", ОбщаяСуммаКОтражению104302Ост, Истина);
		
		// Итоговая сумма текущих платежей
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "s_104302_G", ОбщаяСумма104302, Истина);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "otr_s_104302_G", ОбщаяСуммаКОтражению104302, Истина);
		
		//Заполнение 701.01.001
		КодПриложения   = "Форма70101_001";
		ТекущаяСтраница = 1;
		ВсегоСтраниц    = 1; 
		
		СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, КодПриложения);
		
		ОбщаяСуммаБИН = 0;
		Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
			НомерСтроки = 2;
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
			ОбщиеЭлементыГруппы = ЭлементСтруктуры.Значение.ШапкаИПодвал;
			ТаблицаСтрокГруппы.Очистить();
			
			ВыборкаАкиматы = РезультатАкиматы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаАкиматы.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаАкиматы.МестныйБюджет) Тогда
					Элемент = ТаблицаСтрокГруппы.Добавить();   			 
					
					ОбщаяСуммаБИН    = 0;
					ОбщаяСуммаБИНОкр = 0;
					ОбщаяСуммаБИНОст = 0;
					
					ВыборкаСтрока = ВыборкаАкиматы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
					Пока ВыборкаСтрока.Следующий() Цикл	
						Если ЗначениеЗаполнено(ВыборкаСтрока.МестныйБюджет) Тогда
							ОбщаяСуммаБИН    = ОбщаяСуммаБИН + ВыборкаСтрока.СуммаЗемельногоНалога;					
							ОбщаяСуммаБИНОкр = ОбщаяСуммаБИНОкр + ВыборкаСтрока.СуммаЗемельногоНалогаОкр;
							ОбщаяСуммаБИНОст = ОбщаяСуммаБИНОст + ВыборкаСтрока.СуммаЗемельногоНалогаОст;
						КонецЕсли;	
					КонецЦикла;	
					
					НомерТекущегоКвартала = Цел((Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1) / 3) + 1;
					
					Если ИмяГруппы = "Страница1" Тогда
						//Так должны заполнять по отдельности значения выборки 
						//для каждого листа
						Элемент.Ф70101_001_A1 = Формат(НомерСтроки, мФорматНомераСтроки);
						
						Если СокрЛП(ВыборкаАкиматы.БИНАкимата) = "" ТОгда
							Если ЗначениеЗаполнено(ВыборкаАкиматы.МестныйБюджет) Тогда
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'ИИН/БИН акимата аппарата %1 не заполнен'"),
								Строка(ВыборкаАкиматы.МестныйБюджет));
								ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ВыборкаАкиматы.МестныйБюджет); 
							КонецЕсли;
							СтрокаБИНКонтрагента = "";                                                                             						
						ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ВыборкаАкиматы.БИНАкимата)  ТОгда
							// В ИИН/БИН имеются символы, отличные от цифр (0..9)
							Если ЗначениеЗаполнено(ВыборкаАкиматы.МестныйБюджет) Тогда
								
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В ИИН/БИН контрагента %1 имеются символы, отличные от цифр (0..9)'"),
								Строка(ВыборкаАкиматы.МестныйБюджет));
								ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ВыборкаАкиматы.МестныйБюджет); 
								
							КонецЕсли;
							СтрокаБИНКонтрагента = "";						
						Иначе
							СтрокаБИНКонтрагента = ВыборкаАкиматы.БИНАкимата;
						КонецЕсли;
						
						Элемент.Ф70101_001_B = СтрокаБИНКонтрагента;
						
						//заполним таблицу расшифровки
						РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы, Элемент, "Ф70101_001_B",  ?(ВыборкаАкиматы.МестныйБюджет = NULL, Неопределено, ВыборкаАкиматы.МестныйБюджет));
						
						Если НомерТекущегоКвартала = 1 Тогда
							Элемент.Ф70101_001_C = ОбщаяСуммаБИНОкр;
							РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы, Элемент, "Ф70101_001_C", ОбщаяСуммаБИНОкр);
						КонецЕсли;
						Если НомерТекущегоКвартала <= 2 Тогда
							Элемент.Ф70101_001_D = ОбщаяСуммаБИНОкр;
							РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы, Элемент, "Ф70101_001_D", ОбщаяСуммаБИНОкр);
						КонецЕсли;                           
						Если НомерТекущегоКвартала <= 3 Тогда
							Элемент.Ф70101_001_E = ОбщаяСуммаБИНОкр;
							РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы, Элемент, "Ф70101_001_E", ОбщаяСуммаБИНОкр);
						КонецЕсли;								
						
					Иначе
						Элемент.Ф70101_001_A2 = Формат(НомерСтроки, мФорматНомераСтроки);
						
						Элемент.Ф70101_001_B2 = ВыборкаАкиматы.БИНАкимата;
						РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы, Элемент, "Ф70101_001_B2",  ?(ВыборкаАкиматы.МестныйБюджет = NULL, Неопределено, ВыборкаАкиматы.МестныйБюджет));
					
						Элемент.Ф70101_001_F = ОбщаяСуммаБИНОст;
						РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы, Элемент, "Ф70101_001_F", ОбщаяСуммаБИНОст);
						
						Элемент.Ф70101_001_G = ОбщаяСуммаБИН;
						РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы, Элемент, "Ф70101_001_G", ОбщаяСуммаБИН);
					КонецЕсли;
					
					НомерСтроки = НомерСтроки + 1;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		//посчитаем количество листов
		Если ОбщаяСуммаБИН <> 0 Тогда
			КоличествоЛистов = НомерСтроки / 15;
			Если Цел(КоличествоЛистов) < КоличествоЛистов Тогда
				КоличествоЛистов = Окр(КоличествоЛистов) + 1;
			КонецЕсли;
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"КоличествоПриложений",КоличествоЛистов,Истина);
		КонецЕсли;	
		
		РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, КодПриложения, СтруктураФормы); 	 
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодПриложения);			
		РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, КодПриложения, Перезаполнить);   	
		
		Если Перезаполнить Тогда
			РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодПриложения);
		КонецЕсли;
		
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры  // Форма70101ЗаполнитьЗемельныйНалог()

&НаСервере
Процедура Форма70101ЗаполнитьАвто(Перезаполнить = Ложь)               
	
	ТекКодФормы = КодФормы;
	
	КодФормы = "Форма70101";
		
	Форма70101ЗаполнитьНалогНаИмущество(КодФормы, Перезаполнить);	
	Форма70101ЗаполнитьЗемельныйНалог(КодФормы, Перезаполнить);	
	
	// передаем в качестве признака перезаполнения Истина, т.к. это главная форма
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, КодФормы, Истина);
	
	Модифицированность = Истина;       

	КодФормы = ТекКодФормы;
		
КонецПроцедуры // Форма70101ЗаполнитьАвто()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода табличного документа
// Вызывается при изменении данных поля ввода табличного документа.
//
Процедура Форма70101ПолеТабличногоДокументаПриИзменении(Элемент)
	
	Если НЕ ТипЗнч(ЭтаФорма.ТекущийЭлемент) = Тип("ПолеТабличногоДокумента") Тогда
		Элемент.Значение = 0;
		Возврат;
	КонецЕсли;
	
	//ИмяОбласти = ЭтаФорма.ТекущийЭлемент.ТекущаяОбласть.Имя;
	//РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ИмяФормы, ИмяОбласти, Элемент.Значение, Ложь);
	//Форма70101Расчет(Истина);
	//Модифицированность = Истина;
	
КонецПроцедуры // Форма100ПолеТабличногоДокументаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Выбор" поля табличного документа
// на странице "Лист А" основной панели формы.
// Вызывается при двойном щелчке на ячейку.
//
Процедура Форма70101ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)

	Ячейка = Элемент.ТекущаяОбласть.Имя;
	
	Если (Найти(Ячейка, "Первоначальный") > 0)
	 ИЛИ (Найти(Ячейка, "Очередной") > 0)
	 ИЛИ (Найти(Ячейка, "Дополнительный") > 0)
	 ИЛИ (Найти(Ячейка, "ПоУведомлению") > 0) Тогда
	 	ЗаполнитьВидРасчета(Ячейка);
	КонецЕсли;	
	
	Если (Найти(Ячейка, "ПрименяющийСНР") > 0)
	 ИЛИ (Найти(Ячейка, "ДовУправляющий") > 0)
	 ИЛИ (Найти(Ячейка, "ДеятельностьСЭЗ") > 0)
	 ИЛИ (Найти(Ячейка, "Недропользователь") > 0) Тогда
	 	Если Элемент.ТекущаяОбласть.Значение = "Х" Тогда
			Элемент.ТекущаяОбласть.Значение = "";
		Иначе
			Элемент.ТекущаяОбласть.Значение = "Х";
		КонецЕсли;		
		
		ЗаполнитьКатегориюНалогоплательщика(Ячейка,Элемент.ТекущаяОбласть.Значение);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры // Форма70101ПолеТабличногоДокументаСтраница1Выбор()

&НаКлиенте
// Выполняет расчет вычисляемых показателей формы
// Параметр Изменено определяет откуда была вызвана данная процедура
// 
// При Изменено = Истина вызывается при изменении поля табличного документа,
// в остальных случаях параметр = Ложь.
// Основное назначение - манипуляция со значениями полей, которые которые подлежит не суммовому расчету, 
// а расчету суммы с добавлением входящих в него значений
//
Процедура Форма70101Расчет(Изменено = Ложь)

	Форма70101РасчетНаСервере(Неопределено, Неопределено, КодФормы);
	
КонецПроцедуры // Форма70101Расчет()

&НаСервере
Процедура Форма70101РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки, ТекИмяФормы, Изменено = Истина)
	
	ТекИмяФормы = "Форма70101";
	
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,ИмяЯчейки ,ЗначениеЯчейки);					
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ЭтотОбъект.КодФормы);
	
	Если Изменено Тогда
		
		НомерНач = КодСимвола("C");
		НомерКон = КодСимвола("F");
	
		//Рассчитаем итоговую ячейку по КБК 104302
		ИтогЗначение = 0 ;
		Для ИмяЯчейки = НомерНач  По НомерКон Цикл
			ИмяГрафы = "s_104302_" + Символ(ИмяЯчейки);		
			ИтогЗначение = ИтогЗначение + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяГрафы);
		КонецЦикла;
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "s_104302_G", ИтогЗначение, Истина);
		
		//Рассчитаем итоговую ячейку по КБК 104101
		ИтогЗначение = 0 ;
		Для ИмяЯчейки = НомерНач  По НомерКон Цикл
			ИмяГрафы = "s_104101_" + Символ(ИмяЯчейки);		
			ИтогЗначение = ИтогЗначение + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяГрафы);
		КонецЦикла;
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "s_104101_G", ИтогЗначение, Истина);
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура Форма70101_001РасчетНаСервере(знач Инд, знач Колонка)
	
	
	// Если Инд = 0, значит процедура вызвана из ячеек шапки и подвала
	
	Перем СтруктураГруппы;
	
	ТекИмяФормы = "Форма70101_001";
	
	Если ЗначениеЗаполнено(Инд)  Тогда
		Индекс = Инд-1;
	КонецЕсли;
	
	мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект);
	мМногострочнаяСтруктура.Свойство("Страница1", СтруктураГруппы);
	ОбщиеЭлементыГруппы = СтруктураГруппы.ШапкаИПодвал; 
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
	    	
	Если Инд <> 0 Тогда
		C = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф70101_001_C = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф70101_001_C);	
	Иначе
		C = ?(ОбщиеЭлементыГруппы.Найти("Ф70101_001_C", "ИмяОбласти") = Неопределено, 0, ОбщиеЭлементыГруппы.Найти("Ф70101_001_C", "ИмяОбласти").Значение);	 
		C = ?(C = Неопределено, 0, C);
	КонецЕсли;	
	Если Инд <> 0 Тогда
		D = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф70101_001_D = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф70101_001_D);	
	Иначе
		D = ?(ОбщиеЭлементыГруппы.Найти("Ф70101_001_D", "ИмяОбласти") = Неопределено, 0, ОбщиеЭлементыГруппы.Найти("Ф70101_001_D", "ИмяОбласти").Значение);	 
		D = ?(D = Неопределено, 0, D);
	КонецЕсли;	
	Если Инд <> 0 Тогда
		E = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф70101_001_E = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф70101_001_E);	
	Иначе
		E = ?(ОбщиеЭлементыГруппы.Найти("Ф70101_001_E", "ИмяОбласти") = Неопределено, 0, ОбщиеЭлементыГруппы.Найти("Ф70101_001_E", "ИмяОбласти").Значение);	 
		E = ?(E = Неопределено, 0, E);
	КонецЕсли;	
	
	мМногострочнаяСтруктура.Свойство("Страница2", СтруктураГруппы);
	ОбщиеЭлементыГруппы = СтруктураГруппы.ШапкаИПодвал; 
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
	
	Если Инд <> 0 Тогда
		F = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф70101_001_F = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф70101_001_F);
	Иначе
		F = ?(ОбщиеЭлементыГруппы.Найти("Ф70101_001_F", "ИмяОбласти") = Неопределено, 0, ОбщиеЭлементыГруппы.Найти("Ф70101_001_F", "ИмяОбласти").Значение);	 
		F  = ?(F = Неопределено, 0, F);
	КонецЕсли;
	
	Если Инд <> 0 Тогда
		ТаблицаСтрокГруппы.Получить(Индекс).Ф70101_001_G = C + D + E + F;	
		Форма70101_001ПолеТабличногоДокументаСтраница2.Области["Ф70101_001_G__"+ Строка(Инд)].Значение = C + D + E + F;
	Иначе
		ОбщиеЭлементыГруппы.Найти("Ф70101_001_G", "ИмяОбласти").Значение = C + D + E + F;
		Форма70101_001ПолеТабличногоДокументаСтраница2.Области["Ф70101_001_G"].Значение = C + D + E + F;	
	КонецЕсли;
		
	РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы, мМногострочнаяСтруктура);
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)  	
	ОткрытьФормуНастройкиСтраниц();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсе(Команда)
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФормуИПриложения");
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФорму(Команда)
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиСтраниц()
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРаздел = Элементы.РазделыОтчета.ТекущиеДанные.Страницы;		
	КонецЕсли;
	
	Для Каждого ТекФорма ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",ТекФорма.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			ТекущаяСтрокаСписка.Выгружать               = ТекФорма.Выгружать;
			ТекущаяСтрокаСписка.ПоказатьСтраницу        = ТекФорма.ПоказатьСтраницу;			
			ТекущаяСтрокаСписка.АвтополучениеИтогов     = ТекФорма.АвтополучениеИтогов;  
			ТекущаяСтрокаСписка.АвтоЗаполнение          = ТекФорма.АвтоЗаполнение;  
		КонецЕсли;		   
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокФормДерева",СписокФормДерева);
	
	ДопПараметры = Новый Структура("ТекущийРаздел",ТекущийРаздел);
	
	ОповещениеПослеЗакрытияФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастройкиСтраниц",ЭтотОбъект,ДопПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.НастройкиОтчета",ПараметрыФормы, ЭтаФорма,,,,ОповещениеПослеЗакрытияФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеглОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Форма = ДополнительныеПараметры.Форма;	
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", Форма.КодФормы));
		Вложенность = ДополнительныеПараметры.ОчищатьПриложения;	
		
		ОчиститьРеглОтчетЗавершениеНаСервере(СтрокаФормы.КодФормы, СтрокаФормы.Многострочность, Вложенность)	
	КонецЕсли;		
КонецПроцедуры 	

&НаСервере
Процедура ОчиститьРеглОтчетЗавершениеНаСервере(КодФормы, ПризнакМногострочности, Вложенность)		
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, ПризнакМногострочности, Вложенность);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьнаСервере();
		Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;	
КонецПроцедуры 

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчете(Команда)
	
	СохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(СохраненныйДок) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Регламентированный отчет не записан в информационной базе.'"));
		Возврат;
	КонецЕсли;
	
	ДокументОтраженияВУчете = ПолучитьЗначениеРеквизита(СохраненныйДок, "ДокументОтраженияВУчете");
	
	Если ЗначениеЗаполнено(ДокументОтраженияВУчете) Тогда
		РегламентированнаяОтчетностьКлиент.ОткрытьДокументОтраженияНалОтчетностиВУчете(СохраненныйДок, ДокументОтраженияВУчете, ЭтотОбъект);
	Иначе
		РегламентированнаяОтчетностьКлиент.СоздатьДокументОтраженияНалОтчетностиВУчете(СохраненныйДок, ЭтотОбъект, СформироватьДополнительныеПараметрыОтраженияДанных());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьДополнительныеПараметрыОтраженияДанных()
	
	СтруктураПараметров = Новый Структура;
	
	// Для опционального отображения колонок для ИП и проведения по РН
	
	// Сформируем имена реквизитов и адреса ячеек данных для заполнения колонок документа
	// в данную структуру передаем только числовые значения, которые надо отразить
	// 		Ключ - имя колонки ТЧ документа ОтражениеНалоговойОтчетностиВРеглУчете с типом "Число"
	// 		Значение - номер колонки в макете, в колонке макета указываем имя ячейки с содержанием данных
	ПоказателиОтчета = Новый Структура;
	СтруктураПараметров.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// В данную структуру передаем все прочие параметры нечислового типа
	// далее данные параметры будут использоваться в дополнительных колонках
	// 		Ключ - имя колонки ТЧ документа ОтражениеНалоговойОтчетностиВРеглУчете
	// 		Значение - номер колонки в макете, в колонке указываем путь к получению данных,
	//				получение будет осуществляться через данные отчета, например, Организация = Вычислить("РеглОтчет." + Значение), где Значение = "Организация"
	ПараметрыОтчета = Новый Структура; 
	ПараметрыОтчета.Вставить("НалоговыйКомитет", 15);
	
	СтруктураПараметров.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиСтраниц(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьДанныеФормы(РезультатЗакрытия, СписокФормДерева);
	
	Модифицированность = Истина;
	
	//обновим мСписокФормБезИерархии
	Для Каждого СтрокаФормы ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",СтрокаФормы.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			СтрокаФормы.Выгружать               = ТекущаяСтрокаСписка.Выгружать;
			СтрокаФормы.ПоказатьСтраницу        = ТекущаяСтрокаСписка.ПоказатьСтраницу;			
			СтрокаФормы.АвтополучениеИтогов     = ТекущаяСтрокаСписка.АвтополучениеИтогов;  
			СтрокаФормы.АвтоЗаполнение          = ТекущаяСтрокаСписка.АвтоЗаполнение;  
		КонецЕсли;			
	КонецЦикла; 	

	Если ДополнительныеПараметры.Свойство("ТекущийРаздел") И НЕ ДополнительныеПараметры.ТекущийРаздел = Неопределено Тогда  		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(РазделыОтчета, Новый Структура("СписокФормДереваСтраницы",ДополнительныеПараметры.ТекущийРаздел));
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;			
	КонецЕсли;  	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыФормыНаКлиенте(Параметры) Экспорт
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	ЗаполнитьСведенияОбОтчетномПериоде();
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);		
	КонецЦикла	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормы(ТекФорма, Параметры)
	
	ЗаполнитьЗначенияСвойств(ТекФорма.СтруктураРеквизитовФормы, Параметры);
		
	ТекФорма.Налогоплательщик        						 = Параметры.Налогоплательщик;
	ТекФорма.НалоговыйКомитет        						 = Параметры.НалоговыйКомитет;
	ТекФорма.мСписокСтруктурныхЕдиниц						 = Параметры.мСписокСтруктурныхЕдиниц;
	ТекФорма.ПредставлениеСпискаСтруктурныхЕдиниц			 = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ТекФорма.мСписокСтруктурныхЕдиниц);
		
КонецПроцедуры

&НаКлиенте
Процедура ПанельФорма70101ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ПанельФорма70101ПриСменеСтраницыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПанельФорма70101ПриСменеСтраницыНаСервере()	
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, КодФормы);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыФормы.Вставить("Налогоплательщик",         Налогоплательщик);
	ПараметрыФормы.Вставить("НалоговыйКомитет",         НалоговыйКомитет);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	ПараметрыФормы.Вставить("ВидОтчета", СтруктураРеквизитовФормы.ВидОтчета);	
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, мВыбраннаяФорма, "") + "ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);	

КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанные() Экспорт
	СохранитьДанныеСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеСервере()
	
	ДополнительныеПараметрыОтражения = СформироватьДополнительныеПараметрыОтраженияДанных();
	СтруктураРеквизитовФормы.Вставить("ДополнительныеПараметрыОтражения", ДополнительныеПараметрыОтражения);
	
	РегламентированнаяОтчетность.ПодготовитьТаблицуДляОтражениеВУчете(ЭтотОбъект, СтрНайти(ЭтотОбъект.ИмяФормы, "ВнешнийОтчет.") > 0);
	
	РегламентированнаяОтчетность.СохранитьОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Форма70101ПолеТабличногоДокументаСтраница2ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Ячейка = Область.Имя;
	
	ИмяОбласти = Область.Имя;	
	Если Найти(ИмяОбласти,"s_") = 0 Тогда
		Возврат;
	КонецЕсли;

	Если Область.СодержитЗначение Тогда
		Значение = Область.Значение;
	Иначе
		Возврат;		
	КонецЕсли;

	Форма70101РасчетНаСервере(Ячейка, Значение, КодФормы);
		
КонецПроцедуры

&НаКлиенте
Процедура Форма70101_001ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	//Ячейка = Элемент.ТекущаяОбласть.Имя;	
	//Если (Найти(Ячейка, "Ф70101_001") = 0) Тогда
	//	Возврат;
	//КонецЕсли;		
	//Значение = Элемент.ТекущаяОбласть.Значение;
	//
	//ЭтотОбъект.Форма70101_001ПолеТабличногоДокумента1.Области[Ячейка].Значение = Значение;
	//ЭтотОбъект.Форма70101_001ПолеТабличногоДокумента1.Области[Ячейка].Расшифровка = Значение;
	//
	//Форма70101_001ПолеТабличногоДокументаСтраницаПриИзмененииСодержимогоОбластиНаСервере(Ячейка, Значение, КодФормы, "Страница1");
	//
КонецПроцедуры

&НаКлиенте
Процедура Форма70101_001ПолеТабличногоДокументаСтраница2ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	//ЭтотОбъект["Форма300_03ПолеТабличногоДокумента" + ИмяЛиста].Области[Ячейка].Значение = Значение;
	//ЭтотОбъект["Форма300_03ПолеТабличногоДокумента" + ИмяЛиста].Области[Ячейка].Расшифровка = ЗначениеРасшифровки;
	//
	//РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтотОбъект, ИмяЛиста, Ячейка, Значение, ПризнакРасчета, ЗначениеРасшифровки);	
	//
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПоНалогуНаИмущество(Команда)
	Форма70101РасшифровкаИмуществоСКД();			
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресМакетаСКД(знач ИмяРаздела)
	ОбщаяСКД = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("МакетСКДФорма70101021Кв1");
	СхемаКомпоновкиДанных = ОбщаяСКД.ВложенныеСхемыКомпоновкиДанных.Найти(ИмяРаздела).Схема;
	
	Возврат ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор)
КонецФункции

&НаКлиенте 
// Процедура выполняет расшифровку строки
//
Процедура Форма70101РасшифровкаИмуществоСКД()
		
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ТипДанных", 		"РегистрыБухгалтерии");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяОбъекта", 	"Типовой");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяТаблицы", 	"Остатки");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ПолучитьАдресМакетаСКД("Имущество" + СтруктураРеквизитовФормы.ВидОтчета));

	Если СтруктураРеквизитовФормы.ВидОтчета = "Очередной" Тогда
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", 	ПолучитьДатуНачалаНаКлиенте());
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  	ПолучитьДатуОкончанияНаКлиенте());
		Форма70101РасшифровкаИмуществоОчереднойСКД(ПользовательскиеНастройки);
	Иначе
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", 	НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  	КонецГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
		Форма70101РасшифровкаИмуществоДополнительныйСКД(ПользовательскиеНастройки);		
	КонецЕсли;
				
	// Прочие настройки
	ТекстЗаголовка = НСТР("ru = 'Расшифровка к форме 701.01 - Расчет текущих платежей по налогу на имущество'");	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Заголовок", 	ТекстЗаголовка);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", Истина);	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьПодписи", Истина); 	
	
	ТекстРасшифровки = Нстр("ru = 'Расчет текущих платежей по налогу на имущество (вид отчета:%1)'");
	ИмяРазделаРасшифровки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстРасшифровки, СтруктураРеквизитовФормы.ВидОтчета);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ВыводитьЗаголовок", Истина);	
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", ИмяРазделаРасшифровки);	
    
	ОткрытьФорму("Отчет.УниверсальныйОтчетПоМетаданным.Форма.ФормаОтчета", ПараметрыФормы,, Истина);
	
КонецПроцедуры

&НаКлиенте 
Процедура Форма70101РасшифровкаИмуществоОчереднойСКД(ПользовательскиеНастройки)
	
	СписокСчетовОС = Новый СписокЗначений;
	СписокСчетовОС.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ИнвестицииВНедвижимость_"));         // счет 2300
	СписокСчетовОС.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ОсновныеСредства_"));                // счет 2400
	СписокСчетовОС.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.БиологическиеАктивы"));              // счет 2500
	СписокСчетовОС.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.НематериальныеАктивы"));             // счет 2700
	СписокСчетовОС.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ДолгосрочныеАктивыДляПродажи_"));    // счет 1500
	
	Если ВключатьВРасчетСчет2933 Тогда
		СписокСчетовОС.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.НезавершенноеСтроительство_"));  // счет 2930
	КонецЕсли;	

	// Отборы
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";	
    БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Налогоплательщик",  Налогоплательщик, ВидСравненияКомпоновкиДанных.Равно);
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СписокСчетов",СписокСчетовОС, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, Истина);
	
	// Сортировка
	ПользовательскиеСортировки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ПорядокКомпоновкиДанных"));
	ПользовательскиеСортировки.ИдентификаторПользовательскойНастройки = "Порядок";
	
	// Группировки	
	МассивГруппировок = Новый Массив();
	Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда	
		МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "СтруктурнаяЕдиница", НСтр("ru = 'Организация/Подразделение'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	КонецЕсли;	
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка",  МассивГруппировок);
		
	// Параметры
	
	МассивПараметровДанных = Новый Массив();   
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Дата", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Период", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСчетов", СписокСчетовОС);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Налогоплательщик", Налогоплательщик);
	                
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПараметрыДанных", МассивПараметровДанных);
	
	ПользовательскиеПоля = ПользовательскиеНастройки.Элементы.Добавить(Тип("ВыбранныеПоляКомпоновкиДанных"));	
	ПользовательскиеПоля.ИдентификаторПользовательскойНастройки = "Выбор";	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "КодОбъекта", "Код объекта");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ОбъектНалогообложения", "Объект налогообложения");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ОстаточнаяСтоимость", "ОстаточнаяСтоимость");
		
	
КонецПроцедуры

&НаСервере
Процедура Форма70101РасшифровкаИмуществоДополнительныйСКД(ПользовательскиеНастройки)
					
	СписокСчетовПервоначальнойСтоимости = Новый СписокЗначений;
	СписокСчетовПервоначальнойСтоимости.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ИнвестицииВНедвижимость"));
	СписокСчетовПервоначальнойСтоимости.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ОсновныеСредства"));
	СписокСчетовПервоначальнойСтоимости.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.БиологическиеАктивы"));	
	СписокСчетовПервоначальнойСтоимости.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.Гудвилл"));
	СписокСчетовПервоначальнойСтоимости.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ПрочиеНематериальныеАктивы"));
	СписокСчетовПервоначальнойСтоимости.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ДолгосрочныеАктивыДляПродажи_"));
	
	Если ВключатьВРасчетСчет2933 Тогда
		СписокСчетовПервоначальнойСтоимости.Добавить(ПланыСчетов.Типовой.НезавершенноеСтроительство_);	  // счет 2930
	КонецЕсли;	

	СписокСчетовОстаточнойСтоимости = Новый СписокЗначений;
	СписокСчетовОстаточнойСтоимости .Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ИнвестицииВНедвижимость_"));
	СписокСчетовОстаточнойСтоимости .Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ОсновныеСредства_"));
	СписокСчетовОстаточнойСтоимости .Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.БиологическиеАктивы"));	
	СписокСчетовОстаточнойСтоимости .Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.НематериальныеАктивы"));
	СписокСчетовОстаточнойСтоимости.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ДолгосрочныеАктивыДляПродажи_"));
	
	Если ВключатьВРасчетСчет2933 Тогда
		СписокСчетовОстаточнойСтоимости.Добавить(ПланыСчетов.Типовой.НезавершенноеСтроительство_);	  // счет 2930
	КонецЕсли;	

	СписокСчетовАмортизации = Новый СписокЗначений;
	СписокСчетовАмортизации.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.АмортизацияОсновныхСредств"));
	СписокСчетовАмортизации.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.АмортизацияИнвестицийВНедвижимость"));	
	СписокСчетовАмортизации.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.АмортизацияПрочихНематериальныхАктивов"));	
	СписокСчетовАмортизации.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.АмортизацияРазведочныхИОценочныхАктивов"));	
	
	// Отборы
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";	
    БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Налогоплательщик",  Налогоплательщик, ВидСравненияКомпоновкиДанных.Равно);
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СписокСчетовОстаточнойСтоимости", СписокСчетовОстаточнойСтоимости, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, Истина);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СписокСчетов",					 СписокСчетовПервоначальнойСтоимости, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, Истина);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СписокСчетовАмортизации",		 СписокСчетовАмортизации, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, Истина);
	
	// Сортировка
	ПользовательскиеСортировки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ПорядокКомпоновкиДанных"));
	ПользовательскиеСортировки.ИдентификаторПользовательскойНастройки = "Порядок";
	
	// Группировки	
	МассивГруппировок = Новый Массив();
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "Организация", НСтр("ru = 'Организация'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка",  МассивГруппировок);
		
	// Параметры  	
	МассивПараметровДанных = Новый Массив();  
	
	Для Счетчик  = 1 по 12 Цикл												
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Дата" + СокрЛП(Счетчик), КонецМесяца(ДобавитьМесяц(НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),Счетчик-1)));		
	КонецЦикла;		
	
	ГраницаКон = Неопределено;
	ДатаКон =  ПолучитьДатуОкончания(Истина, ГраницаКон);
	ГраницаКон = Новый Граница(ДатаКон,ВидГраницы.Включая);
	  
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ДатаНач", 						ПолучитьДатуНачала());
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ДатаКон", 						ДатаКон);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСтруктурныхЕдиниц", 		мСписокСтруктурныхЕдиниц);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ДатаКонГраница",					ГраницаКон);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "НачалоПериода", 					НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КонецПериода", 					КонецГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Налогоплательщик", 				Налогоплательщик);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСчетов", 					СписокСчетовПервоначальнойСтоимости);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСчетовОстаточнойСтоимости", СписокСчетовОстаточнойСтоимости);		                
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСчетовАмортизации", 		СписокСчетовАмортизации);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "УчетПоСП",				 		СтруктураРеквизитовФормы.УчетПоСП);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПараметрыДанных", МассивПараметровДанных);
	
	ПользовательскиеПоля = ПользовательскиеНастройки.Элементы.Добавить(Тип("ВыбранныеПоляКомпоновкиДанных"));	
	ПользовательскиеПоля.ИдентификаторПользовательскойНастройки = "Выбор";	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "КодОбъекта", "Код объекта");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ОбъектНалогообложения", "Объект налогообложения");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "КоличествоМесяцев", "Количество месяцев");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СтоимостьПоступившихВыбывших", "Стоимость поступивших/выбывших активов");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ИзменениеСтоимостиПоступившихАктивов", "Изменение cтоимости поступивших активов");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ИзменениеСтоимостиВыбывшихАктивов", "Изменение стоимости выбывших активов");	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ИзменениеСтоимости", "Изменение стоимости");	
	
КонецПроцедуры

&НаКлиенте 
Функция ПолучитьДатуНачалаНаКлиенте() 
	// первый квартал
	Если Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) = 1 Тогда
		Возврат СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета
	КонецЕсли;
	// второй квартал
	Если Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) = 4 Тогда
		Возврат Дата(СтруктураРеквизитовФормы.мГод,2,1);
	КонецЕсли;
	// третий квартал
	Если Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) = 7 Тогда
		Возврат Дата(СтруктураРеквизитовФормы.мГод,5,1);
	КонецЕсли;
	// четвертый квартал
	Если Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) = 10 Тогда
		Возврат Дата(СтруктураРеквизитовФормы.мГод,8,1);
	КонецЕсли;
КонецФункции // ПолучитьДатуНачала

&НаКлиенте 
// Процедура выполняет расшифровку строки
//
Процедура Форма70101РасшифровкаЗемельныйСКД()

	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", 	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ТипДанных", 		"РегистрыБухгалтерии");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяОбъекта", 	"Типовой");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяТаблицы", 	"Остатки");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ПолучитьАдресМакетаСКД("Земельный" + СтруктураРеквизитовФормы.ВидОтчета));

	Если СтруктураРеквизитовФормы.ВидОтчета = "Очередной" Тогда
		Форма70101РасшифровкаЗемельныйОчереднойСКД(ПользовательскиеНастройки);
	Иначе
		Форма70101РасшифровкаЗемельныйДополнительныйСКД(ПользовательскиеНастройки);		
	КонецЕсли;
				
	// Прочие настройки
	ТекстЗаголовка = НСТР("ru = 'Расшифровка к форме 701.01 - Расчет текущих платежей по земельному налогу'");	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Заголовок", 	ТекстЗаголовка);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", Истина);	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьПодписи", Истина); 	
	
	ТекстРасшифровки = Нстр("ru = 'Расчет текущих платежей по земельному налогу (вид отчета:%1)'");
	ИмяРазделаРасшифровки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстРасшифровки, СтруктураРеквизитовФормы.ВидОтчета);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ВыводитьЗаголовок", Истина);	
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", ИмяРазделаРасшифровки);	
    
	ОткрытьФорму("Отчет.УниверсальныйОтчетПоМетаданным.Форма.ФормаОтчета", ПараметрыФормы,, Истина);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПоЗемельномуНалогу(Команда)
	Форма70101РасшифровкаЗемельныйСКД();
КонецПроцедуры

&НаКлиенте 
Процедура Форма70101РасшифровкаЗемельныйОчереднойСКД(ПользовательскиеНастройки)

	// Отборы
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";	
    БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Налогоплательщик",  Налогоплательщик, ВидСравненияКомпоновкиДанных.Равно);
		
	// Сортировка
	ПользовательскиеСортировки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ПорядокКомпоновкиДанных"));
	ПользовательскиеСортировки.ИдентификаторПользовательскойНастройки = "Порядок";
	//
	//НовыйЭлементПорядка = ПользовательскиеСортировки.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	//НовыйЭлементПорядка.Использование  = Истина;
	//НовыйЭлементПорядка.Поле  = Новый ПолеКомпоновкиДанных("Регистратор.Дата");
	// 
	
	// Группировки	
	МассивГруппировок = Новый Массив();
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "КБК", НСтр("ru = 'Код бюджетной классификации'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "ОбъектНалогообложения", НСтр("ru = 'Объект налогообложения'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "Налогоплательщик", НСтр("ru = 'Налогоплательщик'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "СтруктурнаяЕдиница", НСтр("ru = 'Подразделение/Организация'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
		
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка",  МассивГруппировок);
		
	// Параметры 	
	МассивПараметровДанных = Новый Массив();   
	    		
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Дата", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Период", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Налогоплательщик", Налогоплательщик);
	                
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПараметрыДанных", МассивПараметровДанных);
	
	ПользовательскиеПоля = ПользовательскиеНастройки.Элементы.Добавить(Тип("ВыбранныеПоляКомпоновкиДанных"));	
	ПользовательскиеПоля.ИдентификаторПользовательскойНастройки = "Выбор";	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "КодОбъекта", "Код объекта");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ОбъектНалогообложения", "Объект налогообложения");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Организация", "Организация");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "КатегорияЗемель", "Категория земель");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ВидЗемельногоНалога", "Вид земельного налога");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "БазоваяСтавкаНалога", "Базовая ставка налога");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ПроцентИзмененияБазовойСтавкиНалога", "Процент изменения базовой ставки налога");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "КорректировкаБазовойСтавкиНалога", "Корректировка баз.ставки налога");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ", "Корректировка баз.ставки налога на территориях СЭЗ");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов", "Корректировка баз.ставки налога по решению местных органов");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СтавкаНалогаСУчетомКорректировки", "Ставка налога с учетом корректировки");
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ПлощадьОблагаемая", "Площадь");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаЗемельногоНалога", "Сумма земельного налога");
	
КонецПроцедуры

&НаКлиенте 
Процедура Форма70101РасшифровкаЗемельныйДополнительныйСКД(ПользовательскиеНастройки)

	// Отборы
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";	
    БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Налогоплательщик",  Налогоплательщик, ВидСравненияКомпоновкиДанных.Равно);
		
	// Сортировка
	ПользовательскиеСортировки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ПорядокКомпоновкиДанных"));
	ПользовательскиеСортировки.ИдентификаторПользовательскойНастройки = "Порядок";
		
	// Группировки	
	МассивГруппировок = Новый Массив();
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "КБК", НСтр("ru = 'Код бюджетной классификации'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "ОбъектНалогообложения", НСтр("ru = 'Объект налогообложения'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "Налогоплательщик", НСтр("ru = 'Налогоплательщик'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "СтруктурнаяЕдиница", НСтр("ru = 'Подразделение/Организация'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
		
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка",  МассивГруппировок);
		
	// Параметры 	
	МассивПараметровДанных = Новый Массив();   
	    		
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ДатаНач", ПолучитьДатуНачалаНаКлиенте());
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ДатаКон", ПолучитьДатуОкончанияНаКлиенте());
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Налогоплательщик", Налогоплательщик);
	               
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПараметрыДанных", МассивПараметровДанных);
	
	ПользовательскиеПоля = ПользовательскиеНастройки.Элементы.Добавить(Тип("ВыбранныеПоляКомпоновкиДанных"));	
	ПользовательскиеПоля.ИдентификаторПользовательскойНастройки = "Выбор";	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "КодОбъекта", "Код объекта");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ОбъектНалогообложения", "Объект налогообложения");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Организация", "Организация");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "КатегорияЗемель", "Категория земель");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ВидЗемельногоНалога", "Вид земельного налога");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "БазоваяСтавкаНалога", "Базовая ставка налога");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ПроцентИзмененияБазовойСтавкиНалога", "Процент изменения базовой ставки налога");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "КорректировкаБазовойСтавкиНалога", "Корректировка баз.ставки налога");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ", "Корректировка баз.ставки налога на территориях СЭЗ");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов", "Корректировка баз.ставки налога по решению местных органов");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СтавкаНалогаСУчетомКорректировки", "Ставка налога с учетом корректировки");
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ПлощадьОблагаемая", "Площадь");	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "КоличествоМесяцев", "Количество месяцев");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ГодоваяСуммаЗемельногоНалога", "Годовая сумма земельногоНалога");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаЗемельногоНалога", "Сумма земельного налога");
	
КонецПроцедуры

&НаКлиенте
// Функция для определения даты окончания отчетного
// периода, исходя из номера отчетного квартала
Функция ПолучитьДатуОкончанияНаКлиенте()
	ДатаКон = КонецМесяца(Дата(СтруктураРеквизитовФормы.мГод,Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),1));	
			
	Возврат ДатаКон;
	
КонецФункции // ПолучитьДатуОкончания

&НаКлиенте
Процедура Форма70101ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Ячейка = Область.Имя;
		
	Если Область.СодержитЗначение Тогда
		Значение = Область.Значение;
	Иначе
		Возврат;		
	КонецЕсли;

	Форма70101ПолеТабличногоДокументаСтраницаПриИзмененииСодержимогоОбластиНаСервере(Ячейка, Значение, КодФормы);	

	ИмяОбласти = Область.Имя;	
	Если Найти(ИмяОбласти,"s_") = 0 Тогда
		Возврат;
	КонецЕсли;

	Форма70101РасчетНаСервере(Ячейка, Значение, КодФормы);
	
	
КонецПроцедуры

&НаСервере
Процедура Форма70101ПолеТабличногоДокументаСтраницаПриИзмененииСодержимогоОбластиНаСервере(ИмяЯчейки, ЗначениеЯчейки, ТекИмяФормы)
		
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,ИмяЯчейки ,ЗначениеЯчейки);					
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Форма70101_001ПолеТабличногоДокументаСтраницаПриИзмененииСодержимогоОбластиНаСервере(ИмяЯчейки, ЗначениеЯчейки, ТекИмяФормы, ИмяСтраницы)
		
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда		
		//РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,ИмяЯчейки ,ЗначениеЯчейки);					
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, ИмяСтраницы, ИмяЯчейки, ЗначениеЯчейки, Истина, ЗначениеЯчейки);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗаголовокОтражениеВУчете(ДокументОтражения)
	
	Если ЗначениеЗаполнено(ДокументОтражения) Тогда
		Возврат НСТР("ru = 'Открыть документ отражения в учете'");
	Иначе
		Возврат НСТР("ru = 'Ввести документ отражения в учете'");
	КонецЕсли;
	
КонецФункции // ПолучитьЗаголовокОтражениеВУчете()

// временные процедуры 

&НаКлиенте
// Процедура создает документ отражения
// налоговой отчетности в регламентированном учете
//
// Параметры: РегОтчет - ссылка на документ "РегламентированныйОтчет", если из вызвана из списка отчетов
//                      - объект-отчет "Регламентированный отчет", если вызван из отчета.
//            Форма - форма для определения владельца
//
Процедура СоздатьДокументОтраженияНалОтчетностиВУчете(РеглОтчет, Форма, ДополнительныеПараметрыОтражения = Неопределено) Экспорт
	
	ФормаДокумента = ПолучитьФорму("Документ.ОтражениеНалоговойОтчетностиВРеглУчете.ФормаОбъекта",, Форма);
	ДанныеФормы = ФормаДокумента.Объект;
	ВнешнийОтчет = СтрНайти(Форма.ИмяФормы, "ВнешнийОтчет.") > 0;
	ПроцедураВыполнена = ЗаполнитьДокументОтражениеНалоговойОтчетностиВРеглУчете(РеглОтчет, ДанныеФормы, ДополнительныеПараметрыОтражения, ВнешнийОтчет);
	
	Если ПроцедураВыполнена Тогда
		КопироватьДанныеФормы(ДанныеФормы, ФормаДокумента.Объект);
		РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(
			ФормаДокумента.Объект.Организация, ФормаДокумента.Объект.СтруктурноеПодразделение, ФормаДокумента.СтруктурноеПодразделениеОрганизация);
		РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(
			ФормаДокумента.Элементы.СтруктурноеПодразделениеОрганизация, ФормаДокумента.Объект.СтруктурноеПодразделение, ФормаДокумента.ПоддержкаРаботыСоСтруктурнымиПодразделениями);
		ФормаДокумента.Модифицированность = Истина;
		ФормаДокумента.Открыть();
	КонецЕсли;

КонецПроцедуры // СоздатьДокументОтраженияНалОтчетностиВУчете()

&НаСервере
// Функция заполняет документ отражения налоговой отчетности в регламентированном учете
//
// Параметры:  РеглОтчет - ссылка на документ "РегламентированныйОтчет", если из вызвана из списка отчетов
//                      - объект-отчет "Регламентированный отчет", если вызван из отчета.
//             ДанныеФормы - реквизит "Объект" формы документа "Отражение налоговой отчетности ...", тип - ДанныеФормыСтруктура
//
// Возвращаемое значение: ПроцедураЗавершена = Истина, в случае если не требуются 
//							дальнейшие действия
//                        ПроцедураЗавершена = ложь, если необходимо продолжить процедуру, которая вызвала фунцию
//
Функция ЗаполнитьДокументОтражениеНалоговойОтчетностиВРеглУчете(РеглОтчет, ДанныеФормы, ДополнительныеПараметрыОтражения = Неопределено, ВнешнийОтчет = Ложь) Экспорт
	
	// ключ структуры должен полностью соответствовать значениям в колонке "Вид налога"
	// ключ - может принимать значение одного из предопред.элементов справочника "Налоги, сборы и отчисления"
	// значение - соответствующий счет налога
	// макета "Отражене в учете"
	СтруктураСоответствияВидовНалоговСчетам = Новый Структура;
	СтруктураСоответствияВидовНалоговСчетам.Вставить("ЗемельныйНалог",ПланыСчетов.Типовой.ЗемельныйНалог);
	СтруктураСоответствияВидовНалоговСчетам.Вставить("НалогНаИмущество",ПланыСчетов.Типовой.НалогНаИмущество);
	СтруктураСоответствияВидовНалоговСчетам.Вставить("ИндивидуальныйПодоходныйНалог",ПланыСчетов.Типовой.ИндивидуальныйПодоходныйНалог);
	СтруктураСоответствияВидовНалоговСчетам.Вставить("ИндивидуальныйПодоходныйНалогИностранныеГраждане",ПланыСчетов.Типовой.ИндивидуальныйПодоходныйНалог);
	СтруктураСоответствияВидовНалоговСчетам.Вставить("НалогНаДобавленнуюСтоимость",ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость);
	СтруктураСоответствияВидовНалоговСчетам.Вставить("НалогНаДобавленнуюСтоимостьСИзмененнымСрокомУплаты",ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость);
	СтруктураСоответствияВидовНалоговСчетам.Вставить("Акциз",ПланыСчетов.Типовой.Акцизы);
	СтруктураСоответствияВидовНалоговСчетам.Вставить("НалогНаПрибыль",ПланыСчетов.Типовой.КорпоративныйПодоходныйНалогПодлежащийУплате);
	СтруктураСоответствияВидовНалоговСчетам.Вставить("НалогНаТранспорт",ПланыСчетов.Типовой.НалогНаТранспортныеСредства);	
	СтруктураСоответствияВидовНалоговСчетам.Вставить("ОбязательныеСоциальныеОтчисления",ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию);
	СтруктураСоответствияВидовНалоговСчетам.Вставить("ОбязательныеПенсионныеВзносы",ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям);
	СтруктураСоответствияВидовНалоговСчетам.Вставить("СоциальныйНалог",ПланыСчетов.Типовой.СоциальныйНалог);
	СтруктураСоответствияВидовНалоговСчетам.Вставить("СоциальныйНалогИнвалиды",ПланыСчетов.Типовой.СоциальныйНалог);
	СтруктураСоответствияВидовНалоговСчетам.Вставить("СоциальныйНалогИностранныеСпециалисты",ПланыСчетов.Типовой.СоциальныйНалог);
	
	Если ТипЗнч(РеглОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		
		СохраненныйДок = РеглОтчет;
		
		НазваниеОтчета = СохраненныйДок.ИсточникОтчета;
		
		Макет = РегламентированнаяОтчетность.ПолучитьМакетРеглОтчета(НазваниеОтчета, "ОтражениевУчете", ВнешнийОтчет);
		
		Если Макет = Неопределено Тогда
			ТекстСообщения = НСтр("ru='Не удалось сформировать документ «Отражение в регламентированном учете».'");
	 		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);	
			Возврат Ложь;
		КонецЕсли;
		
		СписокСохранения = СохраненныйДок.ДанныеОтчета.Получить();
		СписокФормБезИерархии   = Неопределено;
		СписокСтруктурныхЕдиниц = Неопределено;
		Если СписокСохранения.Свойство("ПоказателиОтчета") Тогда // Используется старая версия отчета
			СписокСохранения.Свойство("ПоказателиОтчета", СписокФормБезИерархии);
			СписокСохранения.Свойство("СписокСтруктурныхЕдиниц", СписокСтруктурныхЕдиниц); 
		ИначеЕсли СписокСохранения.Свойство("СтруктураДополнительныхРеквизитовФормы") Тогда
			СтруктураДополнительныхРеквизитовФормы = СписокСохранения.СтруктураДополнительныхРеквизитовФормы;
			СтруктураДополнительныхРеквизитовФормы.Свойство("мСписокФормБезИерархии", СписокФормБезИерархии);
			СтруктураДополнительныхРеквизитовФормы.Свойство("мСписокСтруктурныхЕдиниц", СписокСтруктурныхЕдиниц); 
		Иначе
			ТекстСообщения = НСтр("ru='Документ «Отражение в регламентированном учете» не предназначен для текущего отчета.'");
	 		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);	
			Возврат Документы.ОтражениеНалоговойОтчетностиВРеглУчете.ПустаяСсылка();
		КонецЕсли;
		Если СписокСтруктурныхЕдиниц = Неопределено Тогда
			СписокСтруктурныхЕдиниц = Новый СписокЗначений;
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Документ «Отражение в регламентированном учете» не предназначен для текущего отчета.'");
 		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);	
		Возврат Ложь;
		
	КонецЕсли;	
	                                                 
	ОбластьОтражениеВУчетеДляТекущегоОтчета = Макет.Области.Найти(СохраненныйДок.ВыбраннаяФорма);
	
	Если ОбластьОтражениеВУчетеДляТекущегоОтчета = Неопределено Тогда 
		ТекстСообщения = НСтр("ru='Документ «Отражение в регламентированном учете» не предназначен для текущего отчета.'");
 		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);	
		Возврат Документы.ОтражениеНалоговойОтчетностиВРеглУчете.ПустаяСсылка();
	КонецЕсли;
				
	ТаблицаОтраженияВУчете = РегламентированнаяОтчетность.ПолучитьТаблицуОтраженияВУчете(СохраненныйДок, Макет, СписокФормБезИерархии, СписокСтруктурныхЕдиниц, ДополнительныеПараметрыОтражения);
	
	КолонкиГруппировок = "";
	КолонкиСуммирования = "";
	
	Если ДополнительныеПараметрыОтражения <> Неопределено Тогда
		
		// Для обработки дополнительных данных
		ПоказателиОтчета = Новый Структура;
		ПараметрыОтчета  = Новый Структура;
		
		ДополнительныеПараметрыОтражения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
		ДополнительныеПараметрыОтражения.Свойство("ПараметрыОтчета",  ПараметрыОтчета);
		
		Для Каждого Показатель Из ПоказателиОтчета Цикл
			КолонкиСуммирования = КолонкиСуммирования + ", " + Показатель.Ключ;			
		КонецЦикла;
		
		Для Каждого Параметр Из ПараметрыОтчета Цикл
			КолонкиГруппировок = КолонкиГруппировок + ", " + Параметр.Ключ;
		КонецЦикла;
		
	КонецЕсли;
	
	// проверим есть ли данные для отражения
	ОбщаяСуммаОтраженияВУчете = ТаблицаОтраженияВУчете.Итог("Значение");	                                      
		
	Если ОбщаяСуммаОтраженияВУчете <> Неопределено И ОбщаяСуммаОтраженияВУчете <> 0 Тогда
		// создадим документ и покажем пользователю
		ТаблицаОтраженияВУчете.Свернуть("ВидНалога, ДатаУплаты, КБК, ДатаНачалаОтчета, 
		|ДатаОкончанияОтчета, Организация, СтруктурнаяЕдиница, РННПлательщика, Комментарий" + КолонкиГруппировок, "Значение" + КолонкиСуммирования);
		ТаблицаОтраженияВУчете.Сортировать("ДатаУплаты Возр, КБК Возр");
		
		// здесь передадим данные в документ
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("Дата"             , ТекущаяДата());
		ДанныеЗаполнения.Вставить("ВидУчетаНУ"       , Справочники.ВидыУчетаНУ.НУ);
		ДанныеЗаполнения.Вставить("Организация"      , СохраненныйДок.Организация);
		ДанныеЗаполнения.Вставить("УчитыватьКПН"     , Истина);
		ДанныеЗаполнения.Вставить("СуммаДокумента"   , ОбщаяСуммаОтраженияВУчете);
		ДанныеЗаполнения.Вставить("НалоговыйКомитет" , СохраненныйДок.НалоговыйКомитет);
		ДанныеЗаполнения.Вставить("ДокументОснование", СохраненныйДок);
		
		ДанныеЗаполнения.Вставить("ТаблицаОтраженияВУчете"          , ТаблицаОтраженияВУчете);
		ДанныеЗаполнения.Вставить("ДополнительныеПараметрыОтражения", ДополнительныеПараметрыОтражения);
		
		ДанныеЗаполнения.Вставить("СтруктураСоответствияВидовНалоговСчетам", СтруктураСоответствияВидовНалоговСчетам);
		
		ДанныеЗаполнения.Вставить("Комментарий", СохраненныйДок.НаименованиеОтчета + "; " + СохраненныйДок.ПредставлениеПериода);
		
		ДокументОбъект = ДанныеФормыВЗначение(ДанныеФормы, Тип("ДокументОбъект.ОтражениеНалоговойОтчетностиВРеглУчете"));
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ЗначениеВДанныеФормы(ДокументОбъект, ДанныеФормы);
		
		Возврат Истина;

	Иначе
		ТекстСообщения = НСтр("ru='Нет данных для отражения в учете!'");
 		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;	
		
КонецФункции


&НаКлиенте
Процедура Форма70101_001ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Ячейка = Элемент.ТекущаяОбласть.Имя;	
	Если (Найти(Ячейка, "Ф70101_001") = 0) Тогда
		Возврат;
	КонецЕсли;
	
	Значение = Элемент.ТекущаяОбласть.Значение;
	ЗначениеРасшифровки = Элемент.ТекущаяОбласть.Расшифровка;
	
	ТекИмяФормы = "Форма70101_001";
	ИмяЛиста 	= "Страница1";
	ПризнакРасчета = Истина;        	
	
	Если (Найти(Ячейка, "Ф70101_001_B") > 0) Тогда
		
		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			 ИмяЯчейкиРасшифровки = "Ф70101_001_B" + Сред(Ячейка,Найти(Ячейка,"__"));
			 ОбластьРасширофвки = Форма70101_001ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяЯчейкиРасшифровки);
			 Если ОбластьРасширофвки <> Неопределено Тогда 
				 ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;				 
				 Форма70101_001ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка,Значение, ЗначениеРасшифровки, Ложь);
			 КонецЕсли;				 
		 КонецЕсли;

		Если ЗначениеЗаполнено(Значение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			СтандартнаяОбработка = Истина;
			Возврат;
		КонецЕсли;
		
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Контрагенты", ПризнакРасчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма70101_001ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",,ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	Иначе//Если (Найти(Ячейка, "Ф70101_001") > 0) Тогда
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Показатели", ПризнакРасчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма70101_001ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		                               
		 Если Найти(Ячейка, "Ф70101_001_C") > 0 ИЛИ Найти(Ячейка, "Ф70101_001_D") > 0 ИЛИ Найти(Ячейка, "Ф70101_001_E") > 0  Тогда
			 ПоказатьВводЧисла(ОписаниеОповещения, Значение, "Введите сумму ", 12,0);
			 
		 КонецЕсли;		 		 
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура Форма70101_001ПолеТабличногоДокументаСтраница2Выбор(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Ячейка = Элемент.ТекущаяОбласть.Имя;	
	Если (Найти(Ячейка, "Ф70101_001") = 0) Тогда
		Возврат;
	КонецЕсли;
	Значение = Элемент.ТекущаяОбласть.Значение;
	
	ТекИмяФормы = "Форма70101_001";
	ИмяЛиста 	= "Страница2";
	ПризнакРасчета = Истина;        	
	
	Если (Найти(Ячейка, "Ф70101_001") > 0) Тогда
		ПараметрыВыбора = Новый Структура("КодФормы, ИмяГруппы, Ячейка, ЭлементВыбора, ПризнакРасчета", ТекИмяФормы, ИмяЛиста, Ячейка, "Показатели", ПризнакРасчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма70101_001ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
		                               
		 Если Найти(Ячейка, "Ф70101_001_F") > 0 Тогда
			 ПоказатьВводЧисла(ОписаниеОповещения, Значение, "Введите сумму ", 12,0);
			 
		 КонецЕсли;		 		 
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Форма70101_001ОбработкаВыбораЗначений(Результат, ПараметрыВыбора) экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	Иначе
		ВыбранныйЭлемент = Результат;
	КонецЕсли;
	
	Форма70101_001ОбработкаВыбораЗначенийНаСервере(ВыбранныйЭлемент, ПараметрыВыбора);
	
КонецПроцедуры

&НаСервере
Процедура Форма70101_001ОбработкаВыбораЗначенийНаСервере(Результат, ПараметрыВыбора)
	
	Значение = Неопределено;
	Расшифровка = Неопределено;
	
	Попытка
		
		НомерЯчейки = Число(Сред(ПараметрыВыбора.Ячейка, Найти(ПараметрыВыбора.Ячейка, "__")+ 2));
		
		Если ТипЗнч(Результат) = Тип("СправочникСсылка.Контрагенты") Тогда
			Значение = СокрЛП(Результат.ИдентификационныйКодЛичности);
			Расшифровка = Результат;
		Иначе
			Значение = Результат;
			Расшифровка = Результат;
		КонецЕсли;		
		
	Исключение
		
		Значение = Результат;
		Расшифровка = Результат;
		
	КонецПопытки;
	
	Форма70101_001ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяГруппы, ПараметрыВыбора.Ячейка, Значение, Результат, ПараметрыВыбора.ПризнакРасчета);
	
КонецПроцедуры

&НаСервере
Процедура Форма70101_001ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, Ячейка, Значение, ЗначениеРасшифровки, ПризнакРасчета)
	
	ЭтотОбъект["Форма70101_001ПолеТабличногоДокумента" + ИмяЛиста].Области[Ячейка].Значение = Значение;
	ЭтотОбъект["Форма70101_001ПолеТабличногоДокумента" + ИмяЛиста].Области[Ячейка].Расшифровка = ЗначениеРасшифровки;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтотОбъект, ИмяЛиста, Ячейка, Значение, ПризнакРасчета, ЗначениеРасшифровки);		
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, КодФормы);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, ОтчетОбъект);
КонецПроцедуры

// Параметры:
//  Команда - КомандаФормы
//
&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	ОтчетыКлиентПереопределяемый.ОбработчикКоманды(ЭтотОбъект, Команда, Ложь);
КонецПроцедуры
