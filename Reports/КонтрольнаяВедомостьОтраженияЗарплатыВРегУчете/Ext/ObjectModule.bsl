#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	
КонецПроцедуры 

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт

	Элементы = Форма.Элементы;
	
	Элементы.ГруппаПериод.Видимость = Истина;
	Форма.ЕстьНачалоПериодаБК       = Истина;
	Форма.ЕстьКонецПериодаБК        = Истина;
	
	Элементы.Период.Видимость = Ложь;
	Форма.ЕстьПериодБК        = Ложь;
	
	Элементы.ГруппаДополнительные.Видимость         = Ложь;
	
	Элементы.ГруппаОрганизацияРегистрНУ.Видимость   = Ложь;
	Элементы.ГруппаОрганизация.Видимость            = Истина;
	
	Элементы.ВыводитьЗаголовок.Видимость            = Истина;
	Элементы.ВыводитьПодписи.Видимость              = Истина;
	Элементы.ВыводитьПодписиРуководителей.Видимость = Истина;
	
	Если НЕ Форма.РежимРасшифровки Тогда
		Форма.НачалоПериода = НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
		Форма.КонецПериода  = КонецМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	ЗаполняемыеНастройки = Новый Структура("Группировка, Показатели", Истина, Истина);
	БухгалтерскиеОтчетыВызовСервера.ПередЗагрузкойНастроекВКомпоновщик(ЭтотОбъект, Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД, ЗаполняемыеНастройки);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, Новый Структура("КорректностьПериода", Истина));
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ДокументРезультат.Очистить();
	
	ОтчетМетаданные = Метаданные();
	ИмяОтчета       = ОтчетМетаданные.ПолноеИмя();
	
	РежимВариантаОтчета = БухгалтерскиеОтчетыВызовСервера.ПолучитьРежимВыполненияОтчета(ОтчетМетаданные);
	
	Если НЕ РежимВариантаОтчета Тогда
		
		СтандартнаяОбработка = Ложь;
		БухгалтерскиеОтчетыВызовСервера.ОбработкаСобытияПриКомпоновкеРезультата(ЭтотОбъект, ДокументРезультат, ДанныеРасшифровки);
		Возврат;
		
	Иначе
		
		ПользовательскиеНастройки = ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки;
		
		//ХранилищеСвойств = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "НастройкиОтчета");
		//Если ХранилищеСвойств <> Неопределено И ТипЗнч(ХранилищеСвойств.Значение) = Тип("ХранилищеЗначения") Тогда
		//	НастройкиОтчета = ХранилищеСвойств.Значение.Получить();
		//Иначе
		//	Возврат;
		//КонецЕсли;
		
		ПараметрНастройкиОтчета = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "НастройкиОтчета");
		Если ПараметрНастройкиОтчета <> Неопределено И ТипЗнч(ПараметрНастройкиОтчета.Значение) = Тип("ХранилищеЗначения") Тогда
			НастройкиОтчета = ПараметрНастройкиОтчета.Значение.Получить();
		КонецЕсли;
		
		Если НастройкиОтчета = Неопределено Тогда
			ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("НастройкиОтчета", НастройкиОтчета);
		КонецЕсли;
		
		Если ТипЗнч(НастройкиОтчета) = Тип("ХранилищеЗначения") Тогда
			НастройкиОтчета = НастройкиОтчета.Получить();
		КонецЕсли;
		
		Если НастройкиОтчета = Неопределено Тогда
			Возврат;
		Иначе
			БухгалтерскиеОтчетыВызовСервера.УстановкаПериодаОтчетаРассылка(НастройкиОтчета, ПользовательскиеНастройки);
		КонецЕсли;
		
		Если НастройкиОтчета.ВыводитьЗаголовок Тогда
			БухгалтерскиеОтчетыВызовСервера.ВывестиЗаголовокОтчета(НастройкиОтчета, КомпоновщикНастроек, ДокументРезультат);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НастройкиОтчета.НачалоПериода) Тогда
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(НастройкиОтчета.НачалоПериода));
		Иначе
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", Дата(1, 1, 1));
		КонецЕсли;
		Если ЗначениеЗаполнено(НастройкиОтчета.КонецПериода) Тогда
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(НастройкиОтчета.КонецПериода));
		Иначе
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", Дата(3999, 11, 1));
		КонецЕсли;
		
		Налоги = Справочники.НалогиСборыОтчисления;
		СОСчетУчетаРасчетовСКонтрагентомБУ    = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Налоги.ОбязательныеСоциальныеОтчисления            , "СчетУчетаРасчетовСКонтрагентомБУ").СчетУчетаРасчетовСКонтрагентомБУ;
		ОПВСчетУчетаРасчетовСКонтрагентомБУ   = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Налоги.ОбязательныеПенсионныеВзносы                , "СчетУчетаРасчетовСКонтрагентомБУ").СчетУчетаРасчетовСКонтрагентомБУ;
		ИПНСчетУчетаРасчетовСКонтрагентомБУ   = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Налоги.ИндивидуальныйПодоходныйНалог               , "СчетУчетаРасчетовСКонтрагентомБУ").СчетУчетаРасчетовСКонтрагентомБУ;
		СНСчетУчетаРасчетовСКонтрагентомБУ    = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Налоги.СоциальныйНалог                             , "СчетУчетаРасчетовСКонтрагентомБУ").СчетУчетаРасчетовСКонтрагентомБУ;
		ОППВСчетУчетаРасчетовСКонтрагентомБУ  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Налоги.ОбязательныеПрофессиональныеПенсионныеВзносы, "СчетУчетаРасчетовСКонтрагентомБУ").СчетУчетаРасчетовСКонтрагентомБУ;
		ОПВРСчетУчетаРасчетовСКонтрагентомБУ  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Налоги.ОбязательныеПенсионныеВзносыРаботодателя	  , "СчетУчетаРасчетовСКонтрагентомБУ").СчетУчетаРасчетовСКонтрагентомБУ;
		ВОСМССчетУчетаРасчетовСКонтрагентомБУ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Налоги.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование, "СчетУчетаРасчетовСКонтрагентомБУ").СчетУчетаРасчетовСКонтрагентомБУ;
		ООСМССчетУчетаРасчетовСКонтрагентомБУ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Налоги.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование, "СчетУчетаРасчетовСКонтрагентомБУ").СчетУчетаРасчетовСКонтрагентомБУ;
		ЕПСчетУчетаРасчетовСКонтрагентомБУ 	  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Налоги.ЕдиныйПлатеж								  , "СчетУчетаРасчетовСКонтрагентомБУ").СчетУчетаРасчетовСКонтрагентомБУ;
		
		Типовой = ПланыСчетов.Типовой;
			
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетСО"   , ?(НЕ ЗначениеЗаполнено(СОСчетУчетаРасчетовСКонтрагентомБУ)   , Типовой.ОбязательстваПоСоциальномуСтрахованию, СОСчетУчетаРасчетовСКонтрагентомБУ));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетОПВ"  , ?(НЕ ЗначениеЗаполнено(ОПВСчетУчетаРасчетовСКонтрагентомБУ)  , Типовой.ОбязательстваПоПенсионнымОтчислениям , ОПВСчетУчетаРасчетовСКонтрагентомБУ));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетИПН"  , ?(НЕ ЗначениеЗаполнено(ИПНСчетУчетаРасчетовСКонтрагентомБУ)  , Типовой.ИндивидуальныйПодоходныйНалог        , ИПНСчетУчетаРасчетовСКонтрагентомБУ));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетСН"   , ?(НЕ ЗначениеЗаполнено(СНСчетУчетаРасчетовСКонтрагентомБУ)   , Типовой.СоциальныйНалог                      , СНСчетУчетаРасчетовСКонтрагентомБУ));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетОППВ" , ?(НЕ ЗначениеЗаполнено(ОППВСчетУчетаРасчетовСКонтрагентомБУ) , Типовой.ОбязательстваПоПенсионнымОтчислениям , ОППВСчетУчетаРасчетовСКонтрагентомБУ));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетОПВР" , ?(НЕ ЗначениеЗаполнено(ОПВРСчетУчетаРасчетовСКонтрагентомБУ) , Типовой.ОбязательстваПоПенсионнымОтчислениям , ОПВРСчетУчетаРасчетовСКонтрагентомБУ));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетВОСМС", ?(НЕ ЗначениеЗаполнено(ВОСМССчетУчетаРасчетовСКонтрагентомБУ), Типовой.ОбязательстваПоВзносамОСМС           , ВОСМССчетУчетаРасчетовСКонтрагентомБУ));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетООСМС", ?(НЕ ЗначениеЗаполнено(ООСМССчетУчетаРасчетовСКонтрагентомБУ), Типовой.ОбязательстваПоОтчислениямОСМС       , ООСМССчетУчетаРасчетовСКонтрагентомБУ));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетЕП", ?(НЕ ЗначениеЗаполнено(ЕПСчетУчетаРасчетовСКонтрагентомБУ), 		Типовой.ОбязательстваПоЕдиномуПлатежу		 , ЕПСчетУчетаРасчетовСКонтрагентомБУ));
		Если ЕПСчетУчетаРасчетовСКонтрагентомБУ = Типовой.ОбязательстваПоЕдиномуПлатежу Тогда
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "АналитикаЕП", Справочники.НалогиСборыОтчисления.ЕдиныйПлатеж);
		КонецЕсли;
		
		ПользовательскийОтбор = ПользовательскиеНастройки.Элементы.Найти(КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
		Если ТипЗнч(ПользовательскийОтбор) = Тип("ОтборКомпоновкиДанных") Тогда
			БухгалтерскиеОтчеты.ДобавитьОтборПоОрганизациямИПодразделениям(ПользовательскийОтбор, НастройкиОтчета);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ВывестиПодписи(ДокументРезультат) Экспорт
	
	ДополнительныеСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	Если ДополнительныеСвойства.Свойство("НастройкиОтчета") И ТипЗнч(ДополнительныеСвойства.НастройкиОтчета) = Тип("Структура") Тогда
		НастройкиОтчета = ДополнительныеСвойства.НастройкиОтчета;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если НастройкиОтчета.ВыводитьПодписи Тогда
		БухгалтерскиеОтчетыВызовСервера.ВыводПодписейОтчета(НастройкиОтчета, ДокументРезультат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкамиПоУмолчанию(ЗаполняемыеНастройки, ОтчетОбъект) Экспорт
	
	Если ЗаполняемыеНастройки.Свойство("Группировка") И ЗаполняемыеНастройки.Группировка Тогда
	
		ТаблицаГруппировка = ОтчетОбъект.Группировка;

		ТаблицаГруппировка.Очистить();
		
		НоваяСтрока = ТаблицаГруппировка.Добавить();
		НоваяСтрока.Поле           = "Организация";
		НоваяСтрока.Использование  = Истина;
		НоваяСтрока.Представление  = НСтр("ru = 'Организация'");
		НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
		
		НоваяСтрока = ТаблицаГруппировка.Добавить();
		НоваяСтрока.Поле           = "Физлицо";
		НоваяСтрока.Использование  = Истина;
		НоваяСтрока.Представление  = НСтр("ru = 'Сотрудник'");
		НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;	
	
	КонецЕсли;
	
	// Заполнение таблицы Показатели	
	Если ЗаполняемыеНастройки.Свойство("Показатели") И ЗаполняемыеНастройки.Показатели Тогда
	
		ТаблицаПоказатели = ОтчетОбъект.Показатели;

		ТаблицаПоказатели.Очистить();
		
		СписокПоказателей = Новый СписокЗначений;
		СписокПоказателей.Добавить("Начислено"        , НСтр("ru = 'Начислено'"));
		СписокПоказателей.Добавить("НачисленоБух"     , НСтр("ru = 'Отражено начислений'"));
		СписокПоказателей.Добавить("РазностьНачислено", НСтр("ru = 'Начислено - отражено'"));
		
		СписокПоказателей.Добавить("ИПН"        , НСтр("ru = 'ИПН'"));
		СписокПоказателей.Добавить("ИПНБух"     , НСтр("ru = 'Отражено ИПН'"));
		СписокПоказателей.Добавить("РазностьИПН", НСтр("ru = 'ИПН - отражено'"));
		
		СписокПоказателей.Добавить("ОПВ"        , НСтр("ru = 'ОПВ'"));
		СписокПоказателей.Добавить("ОПВБух"     , НСтр("ru = 'Отражено ОПВ'"));
		СписокПоказателей.Добавить("РазностьОПВ", НСтр("ru = 'ОПВ - отражено'"));
		
		СписокПоказателей.Добавить("ВОСМС"      , НСтр("ru = 'Взносы ОСМС'"));
		СписокПоказателей.Добавить("ВОСМСБух"     , НСтр("ru = 'Отражено взносов ОСМС'"));
		СписокПоказателей.Добавить("РазностьВОСМС", НСтр("ru = 'Взносы ОСМС - отражено'"));
		
		СписокПоказателей.Добавить("Удержано"        , НСтр("ru = 'Прочие удержания'"));
		СписокПоказателей.Добавить("УдержаноБух"     , НСтр("ru = 'Отражено прочих удержаний'"));
		СписокПоказателей.Добавить("РазностьУдержано", НСтр("ru = 'Прочие удержания - отражено'"));
		
		СписокПоказателей.Добавить("СоциальныеОтчисления"        , НСтр("ru = 'Социальные отчисления'"));
		СписокПоказателей.Добавить("СоциальныеОтчисленияБух"     , НСтр("ru = 'Отражено социальных отчислений'"));
		СписокПоказателей.Добавить("РазностьСоциальныеОтчисления", НСтр("ru = 'Социальные отчисления - отражено'"));
		
		СписокПоказателей.Добавить("СоциальныйНалог"        , НСтр("ru = 'Социальный налог'"));
		СписокПоказателей.Добавить("СоциальныйНалогБух"     , НСтр("ru = 'Отражено социальный налог'"));
		СписокПоказателей.Добавить("РазностьСоциальныйНалог", НСтр("ru = 'Социальный налог - отражено'"));
		
		СписокПоказателей.Добавить("ООСМС"      , НСтр("ru = 'Отчисления ОСМС'"));
		СписокПоказателей.Добавить("ООСМСБух"     , НСтр("ru = 'Отражено отчислений ОСМС'"));
		СписокПоказателей.Добавить("РазностьООСМС", НСтр("ru = 'Отчисления ОСМС - отражено'"));
		
		СписокПоказателей.Добавить("ОПВР"      	 , НСтр("ru = 'ОПВР'"));
		СписокПоказателей.Добавить("ОПВРБух"     , НСтр("ru = 'Отражено ОПВР'"));
		СписокПоказателей.Добавить("РазностьОПВР", НСтр("ru = 'ОПВР - отражено'"));
		
		СписокПоказателей.Добавить("ОППВ"        , НСтр("ru = 'ОППВ'"));
		СписокПоказателей.Добавить("ОППВБух"     , НСтр("ru = 'Отражено ОППВ'"));
		СписокПоказателей.Добавить("РазностьОППВ", НСтр("ru = 'ОППВ - отражено'"));
		
		СписокПоказателей.Добавить("ЕП"        	 , НСтр("ru = 'ЕП'"));
		СписокПоказателей.Добавить("ЕПБух"     	 , НСтр("ru = 'Отражено ЕП'"));
		СписокПоказателей.Добавить("РазностьЕП"	 , НСтр("ru = 'ЕП - отражено'"));
		
		СписокПоказателей.Добавить("ПениСО"        , НСтр("ru = 'Пени по СО'"));
		СписокПоказателей.Добавить("ПениСОБух"     , НСтр("ru = 'Отражено пени по СО'"));
		СписокПоказателей.Добавить("РазностьПениСО", НСтр("ru = 'Пени по СО - отражено'"));
		
		СписокПоказателей.Добавить("ПениОПВ"        , НСтр("ru = 'Пени по ОПВ'"));
		СписокПоказателей.Добавить("ПениОПВБух"     , НСтр("ru = 'Отражено пени по ОПВ'"));
		СписокПоказателей.Добавить("РазностьПениОПВ", НСтр("ru = 'Пени по ОПВ - отражено'"));
		
		СписокПоказателей.Добавить("ПениВОСМС"      , НСтр("ru = 'Пени по взносам ОСМС'"));
		СписокПоказателей.Добавить("ПениВОСМСБух"     , НСтр("ru = 'Отражено пени по взносам ОСМС'"));
		СписокПоказателей.Добавить("РазностьПениВОСМС", НСтр("ru = 'Пени по взносам ОСМС - отражено'"));
		
		СписокПоказателей.Добавить("ПениООСМС"      , НСтр("ru = 'Пени по отчислениям ОСМС'"));
		СписокПоказателей.Добавить("ПениООСМСБух"     , НСтр("ru = 'Отражено пени по отчислениям ОСМС'"));
		СписокПоказателей.Добавить("РазностьПениООСМС", НСтр("ru = 'Пени по отчислениям ОСМС - отражено'"));
		
		СписокПоказателей.Добавить("ПениОПВР"        , НСтр("ru = 'Пени по ОПВР'"));
		СписокПоказателей.Добавить("ПениОПВРБух"     , НСтр("ru = 'Отражено пени по ОПВР'"));
		СписокПоказателей.Добавить("РазностьПениОПВР", НСтр("ru = 'Пени по ОПВР - отражено'"));
		
		СписокПоказателей.Добавить("ПениОППВ"        , НСтр("ru = 'Пени по ОППВ'"));
		СписокПоказателей.Добавить("ПениОППВБух"     , НСтр("ru = 'Отражено пени по ОППВ'"));
		СписокПоказателей.Добавить("РазностьПениОППВ", НСтр("ru = 'Пени по ОППВ - отражено'"));
		
		СписокПоказателей.Добавить("ПениЕП"        , НСтр("ru = 'Пени по ЕП'"));
		СписокПоказателей.Добавить("ПениЕПБух"     , НСтр("ru = 'Отражено пени по ЕП'"));
		СписокПоказателей.Добавить("РазностьПениЕП", НСтр("ru = 'Пени по ЕП - отражено'"));

		Для Каждого ЭлементСписка Из СписокПоказателей Цикл
			СтрокаТЧ 				= ТаблицаПоказатели.Добавить();
			СтрокаТЧ.Поле 			= ЭлементСписка.Значение;
			СтрокаТЧ.Представление 	= ЭлементСписка.Представление;
			СтрокаТЧ.Использование 	= Истина;
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

#КонецЕсли