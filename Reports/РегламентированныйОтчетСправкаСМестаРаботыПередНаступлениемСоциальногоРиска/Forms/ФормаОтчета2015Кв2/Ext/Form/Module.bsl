////////////////////////////////////////////////////////////////////////////////
// Описание формы
// Параметры фомры:
//  Организация - СправочникСсылка.Организации - Налогоплательщик, представляющий отчет
//  мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета - Дата - отчетный период формирования отчета
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	мВыбраннаяФорма = "ФормаОтчета2015Кв2";
	КодФормы 		= "ФормаОтчета";
	               		
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруФормРегОтчета(ЭтотОбъект);	
			
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;	
	СтруктураРеквизитовФормы.мПечатныеформы         = Новый СписокЗначений;	
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями = РегламентированнаяОтчетностьПереопределяемый.ПоддержкаРаботыСоСтруктурнымиПодразделениями(); // перевести в переопределяемый модуль 

	// Общие механизмы
	ЗаполнитьСведенияОбОтчетномПериоде();
		
	Инициализация(Параметры.БезОткрытияФормы);
	
	УстановитьФорматВывода();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если Модифицированность Тогда 
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);	
		ТекстВопроса = НСТР("ru = 'Сохранить данные отчета?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(мСписокСтруктурныхЕдиниц, ЭтаФорма, СтандартнаяОбработка, "", Налогоплательщик,,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда		
		мСписокСтруктурныхЕдиниц = Результат;		
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц); 		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	
	ЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТочностьЕдиницыИзмеренияПриИзменении(Элемент)
	
	ТочностьЕдиницыИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",            Истина);
	ПараметрыФормы.Вставить("РежимВыбора",                   Истина);
	ПараметрыФормы.Вставить("ОтборОрганизация",              Налогоплательщик);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
		
	Если ЗначениеЗаполнено(Сотрудник) Тогда
	    СотрудникПриИзмененииНаСервере();
	Иначе
		ФизЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение)
		И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		Если НЕ ПроверитьСоответствиеСотрудникаОрганизацииНаСервере(ВыбранноеЗначение) Тогда
	        ТекстСообщения = НСтр("ru = 'Организация отчета не соответствует организации, указанной в карточке сотрудника!'");            
	        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);                
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПодписиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДатаПодписи) Тогда
		ДатаПодписиПриИзмененииНаСервере();
		Модифированность = Истина;
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "Отчеты"

&НаКлиенте
Процедура ФормаОтчетаПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Модифицированность = Истина;
	ФормаОтчетаРасчетНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если НЕ ЗначениеЗаполнено(Налогоплательщик) Тогда
		Сообщить("Не выбрана организация!");
		Возврат;
	КонецЕсли;
	
	Если мСписокСтруктурныхЕдиниц.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбраны структурные единицы!'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФизЛицо) ИЛИ НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран сотрудник!'"));
		Возврат;
	КонецЕсли;
	
	Перезаполнить = Истина; // Для выполнения запроса на пересчет данных к пользователю
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения =  РегламентированнаяОтчетностьКлиент.ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Перезаполнить Тогда
		
		Если ВсегоСтраниц = 0 Тогда
			
			ЗаполнитьАвтоНаСервере();
			
		Иначе
				
			Если СтрокаФормы.ПолучитьЭлементы().Количество() > 0 Тогда
				ТекстВопроса = "Перезаполнить данные формы и ее дополнительных форм?";
			Иначе
				ТекстВопроса = "Перезаполнить данные формы?";
			КонецЕсли;
			
			Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, Новый Структура);				
			Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);
			Оповещение.ДополнительныеПараметры.Вставить("Перезаполнить", Перезаполнить);
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);		
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФорму(Команда)
	
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	 	
	
	ЗаполнитьАвтоНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	ОткрытьФормуНастройкиСтраниц();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыФормы.Вставить("Организация",              Налогоплательщик);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, мВыбраннаяФорма, "") + "ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура СохранитьДанные() Экспорт
	
	СохранитьДанныеНаСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиВДокумент(СписокСохранения)
	
	// очищаем текущие данные
	ТекТабличныйДокумент = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"];
	
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, Ложь, Ложь);

	Отчет = РеквизитФормыВЗначение("ОтчетОбъект");
	Макет = Отчет.ПолучитьМакет("МакетФормаОтчета2015Кв2");

	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаЛиста = Макет.ПолучитьОбласть("ШапкаЛиста");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	МассивОбластей = Новый Массив;
	МассивОбластей.Добавить(ОбластьСтрока);
	МассивОбластей.Добавить(ОбластьПодвал);
	
	ВсегоСтраниц = 0;
	Верх = 1;
	
	// Шапка отчета
	ТекТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТекТабличныйДокумент.Вывести(ОбластьШапка);
	ТекТабличныйДокумент.Вывести(ОбластьШапкаЛиста);
	
	// Определим максимальный номер строки
	МаксНомерСтроки = 0;
	Для Каждого КлючЗначение Из СписокСохранения Цикл
		Позиция = Найти(КлючЗначение.Ключ, "_");
		Если Позиция <> 0 Тогда
			ПрефиксИмени = Лев(КлючЗначение.Ключ, Позиция);
			Если ПрефиксИмени = "Период_" Тогда
				МаксНомерСтроки = Макс(МаксНомерСтроки, Число(Сред(КлючЗначение.Ключ, Позиция + 1)));
			КонецЕсли;		
		КонецЕсли;
	КонецЦикла;
	
	Для НомерСтроки = 1 По МаксНомерСтроки Цикл
		НаличиеДанныхПоПериоду = Ложь;
		
		// Номера областей устанавливаем в соответствии с текущим годом и номером
		Для Каждого ИспользуемаяОбласть Из ОбластьСтрока.Области Цикл
			ИспользуемаяОбласть.Имя = СтрЗаменить(ИспользуемаяОбласть.Имя, "_" + (НомерСтроки-1), "_" + НомерСтроки);
		КонецЦикла;
		
		// Выводим строку с данными
		ТекТабличныйДокумент.Вывести(ОбластьСтрока);
		
		// проверим умещаются ли строки на странице
		Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТекТабличныйДокумент, МассивОбластей) Тогда
			ВсегоСтраниц = ВсегоСтраниц + 1;
			ТекТабличныйДокумент.Область(Верх,, ТекТабличныйДокумент.ВысотаТаблицы).Имя = "Страница" + Формат(ВсегоСтраниц, "ЧГ=0");
			Верх = ТекТабличныйДокумент.ВысотаТаблицы + 1;
			ТекТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТекТабличныйДокумент.Вывести(ОбластьШапкаЛиста);
		КонецЕсли;
		
	КонецЦикла;
	
	// Выводим подвал
	ТекТабличныйДокумент.Вывести(ОбластьПодвал);
	
	// имя для последней страницы
	ВсегоСтраниц = ВсегоСтраниц + 1;
	ТекТабличныйДокумент.Область(Верх,, ТекТабличныйДокумент.ВысотаТаблицы).Имя = "Страница" + Формат(ВсегоСтраниц, "ЧГ=0");

	Если СписокСохранения <> Неопределено И ТипЗнч(СписокСохранения) = Тип("Структура") Тогда
		// Переписываем показатели из структуры сохранения в области табличного документа
		Для Каждого ЗаполняемаяОбласть Из ТекТабличныйДокумент.Области Цикл
			Значение = 0;
			Если СписокСохранения.Свойство(ЗаполняемаяОбласть.Имя, Значение) Тогда
				ЗаполняемаяОбласть.Значение = Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеглОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Форма = ДополнительныеПараметры.Форма;	
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", Форма.КодФормы));
		Вложенность = СтрокаФормы.ПолучитьЭлементы().Количество() > 0;	
		
		ОчиститьРеглОтчетЗавершениеНаСервере(СтрокаФормы.КодФормы, СтрокаФормы.Многострочность, Вложенность)	
	КонецЕсли;
	
КонецПроцедуры 	

&НаСервере
Процедура ОчиститьРеглОтчетЗавершениеНаСервере(КодФормы, ПризнакМногострочности, Вложенность)
	
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, ПризнакМногострочности, Вложенность);
	ВсегоСтраниц = 0;
	
КонецПроцедуры

&НаСервере
// Процедура очистки формы
//
// параметр: ТекИмяФормы - имя очищаемой формы (=КодФормы)
//           ОчиститьВсе - признак вида очистки формы              
//
Процедура Очистить(ТекИмяФормы, ОчиститьВсе = Ложь) Экспорт
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	
	Если НЕ ОчиститьВсе Тогда
		СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв1");
	    СписокПоказателейНеПодлежащихОчистке.Добавить("РеквизитыОрганизации");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Номер");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДолжностьРуководителя");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ФИОРуководителя");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ФИОГлБухгалтера");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДолжностьИсполнителя");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ФИОИсполнителя");
		СписокПоказателейНеПодлежащихОчистке.Добавить("МестоПредоставления");
	КонецЕсли;

	ТекТабличныйДокумент = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"];
	
	Для Каждого Показатель Из СписокПоказателейНеПодлежащихОчистке Цикл
		Знч = ПолучитьЗначениеОбласти(ТекТабличныйДокумент, Показатель.Значение, Неопределено);
		Если Знч <> Неопределено Тогда
			мСтруктураСохраняемыхПоказателей.Вставить(Показатель.Значение, Знч);
		КонецЕсли;
	КонецЦикла;

	ТекТабличныйДокумент.Очистить();
	
	ВсегоСтраниц = 0;
	
КонецПроцедуры // Очистить()

&НаКлиенте
Процедура ОбновитьПараметрыФормыНаКлиенте(Параметры) Экспорт
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормы(ТекФорма, Параметры)
	
	ЗаполнитьЗначенияСвойств(ТекФорма.СтруктураРеквизитовФормы, Параметры);
	
	ТекФорма.Налогоплательщик = Параметры.Организация;
	ТекФорма.мСписокСтруктурныхЕдиниц = Параметры.мСписокСтруктурныхЕдиниц;
	ТекФорма.ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ТекФорма.мСписокСтруктурныхЕдиниц);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяГлавнойФормы(ВыбраннаяФорма) Экспорт
	
	Возврат СтрДлина(ВыбраннаяФорма)-7;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры инициализации отчета и структуры его данных

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокСтруктурныхЕдиниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");			
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");		
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");		
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");		
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");	
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);			
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);	
	СтруктураРеквизитовФормы.Вставить("мПериодичность", Параметры.мПериодичность);		
	СтруктураРеквизитовФормы.Вставить("НалоговыйКомитет", Неопределено);			
	СтруктураРеквизитовФормы.Вставить("мГод");	
	СтруктураРеквизитовФормы.Вставить("мКвартал");	
	СтруктураРеквизитовФормы.Вставить("мМесяц");	
	// индивидуальные параметры формы
	СтруктураРеквизитовФормы.Вставить("мПоддержкаРаботыСоСтруктурнымиПодразделениями");
	СтруктураРеквизитовФормы.Вставить("ДанныеПлатежныхДокументов");
	СтруктураРеквизитовФормы.Вставить("ВзносыПоПериодуИсчисления");
	СтруктураРеквизитовФормы.Вставить("Сотрудник");
	СтруктураРеквизитовФормы.Вставить("ФизЛицо");
	СтруктураРеквизитовФормы.Вставить("ДатаПодписи");
	
КонецПроцедуры // СформироватьСтруктуруРеквизитовФормы

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;			
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	мСтруктураЗначений = Новый Структура;
	мСтруктураСохраняемыхПоказателей = Новый Структура;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			ЕдиницаИзмерения          = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения  = 2;
			ЯзыкФормирования 		  = "ru";
			ДатаПодписи               = ТекущаяДатаСеанса();
			ВзносыПоПериодуИсчисления = 0;
			ДанныеПлатежныхДокументов = Ложь;
			
			Если ЗначениеЗаполнено(Налогоплательщик) Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ГоловнаяОрганизацияДляЗП", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Налогоплательщик));
				
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Организации.Ссылка КАК СтруктурнаяЕдиница,
				|	Организации.Наименование КАК Наименование
				|ИЗ
				|	Справочник.Организации КАК Организации
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
				|		ПО Организации.Ссылка = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация
				|ГДЕ
				|	ВЫБОР
				|		КОГДА Организации.Ссылка.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				|				ИЛИ (НЕ УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации)
				|			ТОГДА Организации.Ссылка
				|		ИНАЧЕ Организации.Ссылка.ГоловнаяОрганизация
				|	КОНЕЦ = &ГоловнаяОрганизацияДляЗП";
				
				мСписокСтруктурныхЕдиниц.Очистить();
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					НовыйЭлемент 				= мСписокСтруктурныхЕдиниц.Добавить();
					НовыйЭлемент.Значение 		= Выборка.СтруктурнаяЕдиница;
					НовыйЭлемент.Представление 	= Выборка.Наименование;
				КонецЦикла;
				
				// заполним представление списка структурных единиц
				ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();	
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	//Обход ситуации с повторным открытием основной формы, из-за ТД
	МассивРеквизитовФормы = ЭтотОбъект.ПолучитьРеквизиты();
	Для Счетчик = 0 По МассивРеквизитовФормы.Количество()-1 Цикл		
		РеквизитФормы = МассивРеквизитовФормы[Счетчик];
		Если РеквизитФормы.ТипЗначения.СодержитТип(Тип("ТабличныйДокумент")) Тогда
			ЭтотОбъект[РеквизитФормы.Имя] = ЭтотОбъект[РеквизитФормы.Имя];	
		КонецЕсли;
	КонецЦикла;	  	
	
	Если СтруктураРеквизитовФормы.Свойство("СформироватьФормуОтчетаАвтоматически") И СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически <> Неопределено Тогда		
		ЗаполнитьАвтоНаСервере();		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтчетномПериоде() Экспорт

	СтрПериодОтчета = ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ФП = истина");
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
		СтруктураРеквизитовФормы.мКвартал = Лев(СтрПериодОтчета, 1);
		СтруктураРеквизитовФормы.мМесяц = Неопределено;
	Иначе
		СтруктураРеквизитовФормы.мМесяц = Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		СтруктураРеквизитовФормы.мКвартал = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мГод = Лев(Прав(СтрПериодОтчета, 7), 4);
		
КонецПроцедуры 

//&НаСервере
// В зависимости от языка заполнения процедура загружает макет в поле табличного документа
//
//Процедура ЗагрузитьМакетВТабличныйДокумент() экспорт
//	
//	// очищаем текущие данные
//	
//	//Макет = мМакет;
//	//
//	//ВсегоСтраниц = 1;
//	//Для Сч = 1 по ВсегоСтраниц Цикл
//	//	ТекТабличныйДокумент = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница"+ Сч];	
//	//	
//	//	ОбластьОтчета = Макет.ПолучитьОбласть("Страница"+ Сч);			
//	//	ТекТабличныйДокумент.Очистить();
//	//	ТекТабличныйДокумент.Вывести(ОбластьОтчета);	
//	// КонецЦикла;		

//	//мЕстьМакет = Истина;
//	
//КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сохранение и восстановление данных

&НаСервере
Процедура СохранитьДанныеНаСервере()
	
	Перем ТаблицаСтраниц;

	Если Не ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) ИЛИ (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) Тогда
		// создаем новый документ вида РегламентированныйОтчет
		ДокументРеглОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
				
		ДокументРеглОтчет.Дата = ТекущаяДатаСеанса();
		ДокументРеглОтчет.УстановитьВремя();
		
	Иначе
		ДокументРеглОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	ИмяТекТабличногоПоля = "ФормаОтчетаПолеТабличногоДокументаСтраница1";
	ТекТабличноеПоле     = ЭтотОбъект[ИмяТекТабличногоПоля];

	// Сформируем комментарий, если не указан
	Если НЕ ЗначениеЗаполнено(Комментарий) Тогда
		Комментарий = ФизЛицо.Наименование;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	МетаданныеОтчета = РеквизитФормыВЗначение("ОтчетОбъект"). Метаданные();
	ДокументРеглОтчет.ИсточникОтчета           = МетаданныеОтчета.Имя;
	ДокументРеглОтчет.НаименованиеОтчета       = МетаданныеОтчета.Формы.ОсновнаяФорма.Представление();
	ДокументРеглОтчет.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ДокументРеглОтчет.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	ДокументРеглОтчет.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;  
	ДокументРеглОтчет.ДатаПодписи              = ДатаПодписи;
	ДокументРеглОтчет.ВыбраннаяФорма           = мВыбраннаяФорма;
	ДокументРеглОтчет.Организация              = Налогоплательщик;
	ДокументРеглОтчет.ЕдиницаИзмерения         = ЕдиницаИзмерения;
	ДокументРеглОтчет.ТочностьЕдиницыИзмерения = ТочностьЕдиницыИзмерения;
	ДокументРеглОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРеглОтчет.Комментарий              = Комментарий;
		
	// обработка номера документа для возможности автонумерации
	ПрефиксДок 	= ДокументРеглОтчет.ПолучитьПрефиксДокументаОтчета();
	НомерДок 	= СокрЛП(ПолучитьЗначениеОбласти(ТекТабличноеПоле, "Номер", ""));
	Если ЗначениеЗаполнено(НомерДок) Тогда	
		НомерДок              = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерДок, ДокументРеглОтчет.Метаданные().ДлинаНомера - СтрДлина(ПрефиксДок), "0", 0);
		ДокументРеглОтчет.Номер = ПрефиксДок + НомерДок;
	Иначе
		ДокументРеглОтчет.УстановитьНовыйНомер(ПрефиксДок);
	КонецЕсли;
		
	// выведем номер в табличный документ
	НомерДок = ДокументРеглОтчет.Номер;
	Пока СтрДлина(НомерДок) > 0 И Найти("123456789", Лев(НомерДок, 1)) = 0 Цикл
		НомерДок = Сред(НомерДок, 2);
	КонецЦикла;
	УстановитьЗначениеОбласти(ТекТабличноеПоле, "Номер", НомерДок);

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	СписокСохранения.Вставить("СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", "01/07/2015");

	// ФизЛицо
	СписокСохранения.Вставить("ФизЛицо",   ФизЛицо);
	СписокСохранения.Вставить("Сотрудник", Сотрудник);
	
	СписокСохранения.Вставить("ВзносыПоПериодуИсчисления", ВзносыПоПериодуИсчисления);
    СписокСохранения.Вставить("ДанныеПлатежныхДокументов", ДанныеПлатежныхДокументов);

	// Сохраняем документ
	Если ДокументРеглОтчет <> Неопределено Тогда
						
		ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
		ДокументРеглОтчет.ДанныеОтчета = ХранилищеДанных;
		
		СохранитьОшибка = 1;
		
		// записываем документ, хранящий данные отчета
		Попытка
			ДокументРеглОтчет.Записать();			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удается сохранить регламентированный отчет! " + ОписаниеОшибки());			
			СохранитьОшибка = 0;
		КонецПопытки;
		
		Если СохранитьОшибка = 1 Тогда
			// всё прошло без ошибок
			Модифицированность = Ложь;
		КонецЕсли;		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = ДокументРеглОтчет.Ссылка;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Записан документ %1 %2'"), ДокументРеглОтчет.Ссылка, ДокументРеглОтчет.Ссылка.Комментарий));	
		
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ПоказателиОтчета;
	
	мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок;

	// восстанавливаем реквизиты отчета
	Налогоплательщик         = мСохраненныйДок.Организация;
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;
	Периодичность			 = мСохраненныйДок.Периодичность;
	
	ДатаПрекращенияВыводаРНН = Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
	ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ ДатаПодписи < ДатаПрекращенияВыводаРНН;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// восстанавливаем ФизЛицо
	СписокСохранения.Свойство("ФизЛицо", ФизЛицо);
	
	Если СписокСохранения.Свойство("Сотрудник") Тогда
		Сотрудник = СписокСохранения.Сотрудник;		
	Иначе
		// если заполнено ФизЛицо, то определим сотрудника для данного физ.лица
		Если ЗначениеЗаполнено(ФизЛицо) Тогда			
				
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РаботникиОрганизации.Сотрудник,
			|	РаботникиОрганизации.Организация,
			|	РаботникиОрганизации.Период,
			|	РаботникиОрганизации.ПричинаИзмененияСостояния
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
			|		&парамДатаАктуальности, 
			|		Организация = &парамГоловнаяОрганизация
			|		И Сотрудник.ФизЛицо = &парамФизЛицо
			|		И Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство) КАК РаботникиОрганизации
			|УПОРЯДОЧИТЬ ПО
			|	РаботникиОрганизации.Период УБЫВ, // берем ближайщее к дате отчета назначение
			|	ВЫБОР
			|		КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУволен
			|			ТОГДА 2
			|		ИНАЧЕ 1
			|	КОНЕЦ
			|";
			
			ГоловнаяОрганизация = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Налогоплательщик);
			Запрос.УстановитьПараметр("парамГоловнаяОрганизация",        ГоловнаяОрганизация);
			Запрос.УстановитьПараметр("парамФизЛицо",                    ФизЛицо);
			Запрос.УстановитьПараметр("парамВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
			Запрос.УстановитьПараметр("парамУволен",                     Перечисления.ПричиныИзмененияСостояния.Увольнение);
			Запрос.УстановитьПараметр("парамДатаАктуальности",           ТекущаяДата());
                          			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Сотрудник = Выборка.Сотрудник;
			Иначе
				// среди работников организаций такое физлицо не числится, т.е. какой-то получатель разовых выплат
				// сотрудник будет пустым
			КонецЕсли;	      			
			
		КонецЕсли;		
	КонецЕсли;
	
	СписокСохранения.Свойство("ВзносыПоПериодуИсчисления", ВзносыПоПериодуИсчисления);
	СписокСохранения.Свойство("ДанныеПлатежныхДокументов", ДанныеПлатежныхДокументов);
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета);

	Если ПоказателиОтчета.Свойство("ПолеТабличногоДокументаРасчет") Тогда
		ВывестиВДокумент(ПоказателиОтчета.ПолеТабличногоДокументаРасчет);
	ИначеЕсли ПоказателиОтчета.Свойство("ФормаОтчетаПолеТабличногоДокументаСтраница1") Тогда
		ВывестиВДокумент(ПоказателиОтчета.ФормаОтчетаПолеТабличногоДокументаСтраница1);
	КонецЕсли;
	
	Если СписокСохранения.Свойство("СписокСтруктурныхЕдиниц") Тогда
		мСписокСтруктурныхЕдиниц = СписокСохранения.СписокСтруктурныхЕдиниц;
	Иначе
	    мСписокСтруктурныхЕдиниц.Очистить();
	    мСписокСтруктурныхЕдиниц.Добавить(Налогоплательщик);
	КонецЕсли;
	ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц);

	УстановитьФорматВывода();
	Модифицированность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьДанныеНаСервере();
		Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;
	
КонецПроцедуры   

////////////////////////////////////////////////////////////////////////////////
// Печать

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Если ВсегоСтраниц = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нет данных для печати'"));
		Возврат;
	КонецЕсли;
    
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок),,, БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати,, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
            
    Перем СтруктураГруппы; 
    
    Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
        ТекстСообщения = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");            
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);                
        Возврат Ложь;
    КонецЕсли;
            
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов.Очистить();
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
    СтруктураРеквизитовФормы.мРежимПечати = Истина;
    
    Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
        ФормаОтчетаРасчетНаСервере();
    КонецЕсли; 

	ТекТабличноеПоле = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"];
	ИдентификаторТекФормы = Новый УникальныйИдентификатор();
	НаименованиеДляЗаписи = НСтр("ru = 'Справка с места работы перед наступлением соц.риска. '") + Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ='ММММ гггг'") + НСтр("ru = ' по '") + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'");
	Стр = 1;

	Пока Стр < ВсегоСтраниц + 1  Цикл
		
		ТабДок = Новый ТабличныйДокумент;
		ИмяОбласти = "Страница" + СокрЛП(Стр);
		ТекОбласть = ТекТабличноеПоле.ПолучитьОбласть(ИмяОбласти);
		ТабДок.Вывести(ТекОбласть);
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ТабДок.ЧерноБелаяПечать   = Истина;
		ТабДок.АвтоМасштаб        = Истина;
		
		ИмяЛиста = НСтр("ru = 'Страница № '") + Строка(Стр);
		Стр = Стр + 1;
		
		Значение = Новый Массив;
		Значение.Добавить(ТабДок);
		Значение.Добавить(ИдентификаторТекФормы);
		Значение.Добавить(НаименованиеДляЗаписи);
		
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(Значение, ИмяЛиста);
			
	КонецЦикла;
		
	Для Каждого Эл Из СтруктураРеквизитовФормы.мПечатныеФормы Цикл
				
		Значение = Новый Массив;
		Значение.Добавить(ПоместитьВоВременноеХранилище(Эл.Значение[0], УникальныйИдентификатор));
		Значение.Добавить(Эл.Значение[1]);
		Значение.Добавить(Эл.Значение[2]);
		
		СтруктураРеквизитовФормы.СписокПечатаемыхЛистов.Добавить(Значение, Эл.Представление);			
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
        
    Возврат Истина;
    
КонецФункции


&НаСервере
Процедура ЕдиницаИзмеренияПриИзмененииНаСервере()
	
	ПроверитьТочность();
	УстановитьФорматВывода();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ТочностьЕдиницыИзмеренияПриИзмененииНаСервере()
	
	ПроверитьТочность();
	УстановитьФорматВывода();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиСтраниц()
	
// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРаздел = Элементы.РазделыОтчета.ТекущиеДанные.Страницы;		
	КонецЕсли;
	
	Для Каждого ТекФорма ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",ТекФорма.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			ТекущаяСтрокаСписка.Выгружать               = ТекФорма.Выгружать;
			ТекущаяСтрокаСписка.ПоказатьСтраницу        = ТекФорма.ПоказатьСтраницу;			
			ТекущаяСтрокаСписка.АвтополучениеИтогов     = ТекФорма.АвтополучениеИтогов;  
			ТекущаяСтрокаСписка.АвтоЗаполнение          = ТекФорма.АвтоЗаполнение;  
		КонецЕсли;		   
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокФормДерева",СписокФормДерева);
	
	ДопПараметры = Новый Структура("ТекущийРаздел",ТекущийРаздел);
	
	ОповещениеПослеЗакрытияФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастройкиСтраниц",ЭтотОбъект,ДопПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.НастройкиОтчета",ПараметрыФормы, ЭтаФорма,,,,ОповещениеПослеЗакрытияФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиСтраниц(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьДанныеФормы(РезультатЗакрытия, СписокФормДерева);
	
	Модифицированность = Истина;
	
	//обновим мСписокФормБезИерархии
	Для Каждого СтрокаФормы ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",СтрокаФормы.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			СтрокаФормы.Выгружать               = ТекущаяСтрокаСписка.Выгружать;
			СтрокаФормы.ПоказатьСтраницу        = ТекущаяСтрокаСписка.ПоказатьСтраницу;			
			СтрокаФормы.АвтополучениеИтогов     = ТекущаяСтрокаСписка.АвтополучениеИтогов;  
			СтрокаФормы.АвтоЗаполнение          = ТекущаяСтрокаСписка.АвтоЗаполнение;  
		КонецЕсли;			
	КонецЦикла; 	

	Если ДополнительныеПараметры.Свойство("ТекущийРаздел") И НЕ ДополнительныеПараметры.ТекущийРаздел = Неопределено Тогда  		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(РазделыОтчета, Новый Структура("СписокФормДереваСтраницы",ДополнительныеПараметры.ТекущийРаздел));
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;			
	КонецЕсли;  	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие

&НаСервере
// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	
	Перем СтруктураГруппы;
	Перем РазмерностьПрописью;
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописью = НСтр("ru = ""тенге""; kz = ""теңге""", "ru");				
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0; ЧРГ= ";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописью = НСтр("ru = ""тысяч тенге""; kz = ""мың теңге""", "ru");				
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3; ЧРГ= ";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописью = НСтр("ru = ""млн. тенге""; kz = ""млн. теңге""", "ru");				
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6; ЧРГ= ";
		
	КонецЕсли;
	
	ТекТабличныйДокумент = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"];

	Для Каждого ОбластьТаблицы Из ТекТабличныйДокумент.Области Цикл
		// по областям каждой страницы
		Если Не ОбластьТаблицы.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбластьТаблицы.СодержитЗначение Тогда
			Если СокрЛП(ОбластьТаблицы.ТипЗначения) = "Число" Тогда
				ОбластьТаблицы.Формат = мСтрокаФормата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	УстановитьЗначениеОбласти(ТекТабличныйДокумент, "ЕдиницаИзмерения", РазмерностьПрописью);
	
КонецПроцедуры // УстановитьФорматВывода()

&НаКлиенте
Процедура ФормаОтчетаРасчет()

	ФормаОтчетаРасчетНаСервере();	
			    	                	
КонецПроцедуры   //ФормаРасчет()

&НаСервере
Процедура ФормаОтчетаРасчетНаСервере()
	
	ИтогоСуммаЗаработка = 0;
	ИтогоСОНачислено    = 0;
	ИтогоСОПеречислено  = 0;
	
	ТекТабличныйДокумент = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"];
	СканируемыеОбласти   = ТекТабличныйДокумент.Области;
	
	Для Каждого Область Из СканируемыеОбласти Цикл
		
		// сумма заработка
		Если Найти(Область.Имя, "СуммаЗаработка_") <> 0 Тогда
			СуммаЗаработка 		= Область.Значение;
			ИтогоСуммаЗаработка	= ИтогоСуммаЗаработка + СуммаЗаработка;
		КонецЕсли;
			
		// СО начислено
		Если Найти(Область.Имя, "СОНачислено_") <> 0 Тогда
			СОНачислено 		= Область.Значение;
			ИтогоСОНачислено	= ИтогоСОНачислено + СОНачислено;
		КонецЕсли;
		
		// СО перечислено
		Если Найти(Область.Имя, "СОПеречислено_") <> 0 Тогда
			СОПеречислено 		= Область.Значение;
			ИтогоСОПеречислено	= ИтогоСОПеречислено + СОПеречислено;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьЗначениеОбласти(ТекТабличныйДокумент, "ИтогоСуммаЗаработка", ИтогоСуммаЗаработка);
	УстановитьЗначениеОбласти(ТекТабличныйДокумент, "ИтогоСОНачислено",    ИтогоСОНачислено);
	УстановитьЗначениеОбласти(ТекТабличныйДокумент, "ИтогоСОПеречислено",  ИтогоСОПеречислено);
	
	// Сумма прописью
	УстановитьЗначениеОбласти(ТекТабличныйДокумент, "ИтогоСумма", ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(ИтогоСуммаЗаработка, Константы.ВалютаРегламентированногоУчета.Получить()));
	
КонецПроцедуры

&НаСервере
Функция ФормаРассчитатьДанныеФормы(ВыдаватьСообщения = Ложь)
	
	РасчетНаРегистрах = Метаданные.РегистрыРасчета.Найти("ОсновныеНачисленияРаботниковОрганизаций") <> Неопределено;
	
	// Создание запроса и установка всех необходимых параметров
	Запрос = Новый Запрос;
	Если РасчетНаРегистрах Тогда
		Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ОбщегоНазначенияБК.ГоловнаяОрганизация(Налогоплательщик));
	Иначе
		Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Налогоплательщик));
	КонецЕсли;
	Запрос.УстановитьПараметр("парамОрганизация",             Налогоплательщик);
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("парамФизЛицо",                 ФизЛицо);
	Запрос.УстановитьПараметр("парамДатаАктуальности",        ДатаПодписи);
	Запрос.УстановитьПараметр("парамПериодС",                 НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПериодПо",                КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
	// ---------------------------------------------------------------------------
	// Тексты запросов
	//

	//-----------------------------------------------------------------------------
	// ВЫБОРКА СВЕДЕНИЙ О ФИЗЛИЦЕ 
	// 	
	
	ДанныеОФизЛицеТекст = 
	"ВЫБРАТЬ 
	|	ЕСТЬNULL(ФИОФизЛица.Фамилия + "" "" + ФИОФизЛица.Имя + "" "" + ФИОФизЛица.Отчество, ДанныеОФизЛице.Наименование) КАК ФИОРаботника,
	|	ДанныеОФизЛице.РНН КАК РННРаботника,
	|	ДанныеОФизЛице.СИК КАК СИКРаботника,
	|	ДанныеОФизЛице.ИдентификационныйКодЛичности КАК ИИНРаботника,
	|	РаботникиОрганизации.Сотрудник.Код КАК ТабельныйНомер,
	|	РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизации,
	|	РаботникиОрганизации.Должность.Наименование КАК Должность
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ДанныеОФизЛице
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|					&парамДатаАктуальности, 
	|					ФизЛицо = &парамФизЛицо) КАК ФИОФизЛица
	|		ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							МАКСИМУМ(ВЫБОР
	|										КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|											ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
	|										ИНАЧЕ РаботникиОрганизации.Период
	|									 КОНЕЦ) КАК Период
	|						ИЗ
	|							РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|									&парамДатаАктуальности, 
	|									Сотрудник.ФизЛицо = &парамФизЛицо И
	|									Организация = &парамГоловнаяОрганизация И
	|									(Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))) КАК РаботникиОрганизации
	|					) КАК РаботникиОрганизацииСрезПоследних
	|		ПО ИСТИНА
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО РаботникиОрганизацииСрезПоследних.Период = ВЫБОР
	|														КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|															ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
	|														ИНАЧЕ РаботникиОрганизации.Период
	|													  КОНЕЦ
	|			И РаботникиОрганизации.Сотрудник.ФизЛицо = &парамФизЛицо
	|			И РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
	|			И (РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|ГДЕ
	|	ДанныеОФизЛице.Ссылка = &парамФизЛицо
	|";
	
    Если РасчетНаРегистрах Тогда
	
		ДоходыТекст = "
		|ВЫБРАТЬ
		|		НАЧАЛОПЕРИОДА(ОсновныеНачисления.ПериодРегистрации, МЕСЯЦ) КАК Период,
		|		ОсновныеНачисления.Результат КАК Заработок
		|ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|ГДЕ
		|		ОсновныеНачисления.ФизЛицо = &парамФизЛицо
		|		И ОсновныеНачисления.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц)
		|		И ОсновныеНачисления.ПериодРегистрации МЕЖДУ &парамПериодС И &парамПериодПо
		|		И НЕ ОсновныеНачисления.ВидРасчета.ЯвляетсяПрочимДоходом
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|		НАЧАЛОПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ) КАК Период,
		|		ДополнительныеНачисления.Результат КАК Заработок
		|ИЗ
		|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисления
		|ГДЕ
		|		ДополнительныеНачисления.ФизЛицо = &парамФизЛицо
		|		И ДополнительныеНачисления.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц)
		|		И ДополнительныеНачисления.ПериодРегистрации МЕЖДУ &парамПериодС И &парамПериодПо
		|		И НЕ ДополнительныеНачисления.ВидРасчета.ЯвляетсяПрочимДоходом
		|";
		
	Иначе

		ДоходыТекст = "
		|ВЫБРАТЬ
		|		НАЧАЛОПЕРИОДА(ОсновныеНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК Период,
		|		ОсновныеНачисления.Результат КАК Заработок
		|ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК ОсновныеНачисления
		|ГДЕ
		|		ОсновныеНачисления.Ссылка.Проведен
		|		И ОсновныеНачисления.ФизЛицо = &парамФизЛицо
		|		И ОсновныеНачисления.Ссылка.Организация В (&парамСписокСтруктурныхЕдиниц)
		|		И ОсновныеНачисления.Ссылка.ПериодРегистрации МЕЖДУ &парамПериодС И &парамПериодПо
		|";
	
	КонецЕсли;

	ДоходыИВзносыТекст = 
	"ВЫБРАТЬ
	|	ГОД(ДоходыИВзносы.Период) КАК Год,
	|	ДоходыИВзносы.Период КАК Период,
	|	СУММА(ДоходыИВзносы.СуммаЗаработка) КАК СуммаЗаработка,
	|	СУММА(ДоходыИВзносы.СОНачислено) КАК СОНачислено,
	|	СУММА(ДоходыИВзносы.СОПеречислено) КАК СОПеречислено,
	|	ДоходыИВзносы.ВидСтроки,
	|	ДоходыИВзносы.ДатаПеречисления КАК ДатаПеречисления,
	|	ДоходыИВзносы.НомерПоручения КАК НомерПоручения,
	|	ДоходыИВзносы.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода
	|ИЗ
	|	(ВЫБРАТЬ
	|		Доходы.Период КАК Период,
	|		Доходы.Заработок КАК СуммаЗаработка,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СОНачислено,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СОПеречислено,
	|		"""" КАК ВидСтроки,
	|		NULL КАК ДатаПеречисления,
	|		NULL КАК НомерПоручения,
	|		NULL КАК МесяцНалоговогоПериода
	|	ИЗ
	|		(" + ДоходыТекст + ") КАК Доходы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(СОРасчетыСФондами.Период, МЕСЯЦ),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		СОРасчетыСФондами.Отчисление,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		"""",
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|	ГДЕ
	|		СОРасчетыСФондами.ФизЛицо = &парамФизЛицо
	|		И СОРасчетыСФондами.Организация В(&парамСписокСтруктурныхЕдиниц)
	|		И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|		И СОРасчетыСФондами.Период МЕЖДУ &парамПериодС И &парамПериодПо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		" + ?(ВзносыПоПериодуИсчисления,
	        "НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),",
			"НАЧАЛОПЕРИОДА(СОРасчетыСФондами.Период, МЕСЯЦ),") + "
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫБОР 
	|			КОГДА СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА СОРасчетыСФондами.Отчисление
	|			ИНАЧЕ -СОРасчетыСФондами.Отчисление
	|		КОНЕЦ,
	|		""ПеречислениеСО"",
	|		СОРасчетыСФондами.Регистратор.Дата,
	|		СОРасчетыСФондами.Регистратор.Номер,
	|		СОРасчетыСФондами.МесяцНалоговогоПериода
	|	ИЗ
	|		РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|	ГДЕ
	|		СОРасчетыСФондами.ФизЛицо = &парамФизЛицо
	|		И СОРасчетыСФондами.Организация В(&парамСписокСтруктурныхЕдиниц)
	|		И (СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Перечисление)
	|		   ИЛИ СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			   И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Возврат))	
	|      " + ?(ВзносыПоПериодуИсчисления,
	        "И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо", 
			"И СОРасчетыСФондами.Период МЕЖДУ &парамПериодС И &парамПериодПо") + "
	|) КАК ДоходыИВзносы
	|
	|СГРУППИРОВАТЬ ПО
	|	ГОД(ДоходыИВзносы.Период),
	|	ДоходыИВзносы.Период,
	|	ДоходыИВзносы.ДатаПеречисления,
	|	ДоходыИВзносы.НомерПоручения,
	|	ДоходыИВзносы.МесяцНалоговогоПериода,
	|	ДоходыИВзносы.ВидСтроки";

	// Окончательный текст запроса
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоходыИВзносы.Период,
	|	ДанныеОФизЛице.ТабельныйНомер,
	|	ДанныеОФизЛице.ФИОРаботника,
	|	ДанныеОФизЛице.РННРаботника,
	|	ДанныеОФизЛице.СИКРаботника,
	|	ДанныеОФизЛице.ИИНРаботника,
	|	ВЫРАЗИТЬ(ДанныеОбОрганизации.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеОрганизации,
	|	ДанныеОбОрганизации.РНН КАК РННОрганизации,
	|	ДанныеОбОрганизации.ИдентификационныйНомер КАК БИНОрганизации,
	|	ВЫРАЗИТЬ(КонтактнаяИнформацияЮрАдрес.Представление КАК СТРОКА(1000)) КАК ЮрАдресОрганизации,
	|	ВЫБОР
	|		КОГДА ФИОФизЛицРуководитель.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ОтветственныеЛицаРуководитель.ФизическоеЛицо.Наименование
	|		ИНАЧЕ ФИОФизЛицРуководитель.Фамилия + ВЫБОР
	|				КОГДА ФИОФизЛицРуководитель.Имя <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицРуководитель.Имя, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ФИОФизЛицРуководитель.Отчество <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицРуководитель.Отчество, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК ФИОРуководителя,
	|	ОтветственныеЛицаРуководитель.Должность.Наименование КАК ДолжностьРуководителя,
	|	ВЫБОР
	|		КОГДА ФИОФизЛицГлБух.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ОтветственныеЛицаГлБух.ФизическоеЛицо.Наименование
	|		ИНАЧЕ ФИОФизЛицГлБух.Фамилия + ВЫБОР
	|				КОГДА ФИОФизЛицГлБух.Имя <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицГлБух.Имя, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ФИОФизЛицГлБух.Отчество <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицГлБух.Отчество, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК ФИОГлБухгалтера,
	|	ВЫБОР
	|		КОГДА ОтветственныеЛицаГлБух.Должность.Ссылка ЕСТЬ NULL 
	|			ТОГДА ""Главный бухгалтер""
	|		ИНАЧЕ ОтветственныеЛицаГлБух.Должность.Наименование
	|	КОНЕЦ КАК ДолжностьГлБухгалтера,
	|	ДоходыИВзносы.СуммаЗаработка,
	|	ДоходыИВзносы.СОНачислено,
	|	ДоходыИВзносы.СОПеречислено,
    |	ДоходыИВзносы.ВидСтроки,
	|	ДоходыИВзносы.ДатаПеречисления,
	|	ДоходыИВзносы.НомерПоручения,
	|	ДоходыИВзносы.МесяцНалоговогоПериода
	|ИЗ
	|	(" + ДоходыИВзносыТекст + ") КАК ДоходыИВзносы
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ДанныеОФизЛицеТекст + ") КАК ДанныеОФизЛице
	|		ПО (ИСТИНА)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ДанныеОбОрганизации
	|		ПО (ДанныеОбОрганизации.Ссылка = &парамОрганизация)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияЮрАдрес
	|		ПО (КонтактнаяИнформацияЮрАдрес.Объект = &парамОрганизация)
	|			И (КонтактнаяИнформацияЮрАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации))
	|			И (КонтактнаяИнформацияЮрАдрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|				&парамДатаАктуальности,
	|				СтруктурнаяЕдиница = &парамОрганизация
	|					И ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК ОтветственныеЛицаРуководитель
	|		ПО (ИСТИНА)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДатаАктуальности, ) КАК ФИОФизЛицРуководитель
	|		ПО (ОтветственныеЛицаРуководитель.ФизическоеЛицо = ФИОФизЛицРуководитель.ФизЛицо)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|				&парамДатаАктуальности,
	|				СтруктурнаяЕдиница = &парамОрганизация
	|					И ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)) КАК ОтветственныеЛицаГлБух
	|		ПО (ИСТИНА)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДатаАктуальности, ) КАК ФИОФизЛицГлБух
	|		ПО (ОтветственныеЛицаГлБух.ФизическоеЛицо = ФИОФизЛицГлБух.ФизЛицо)
	| 
	| УПОРЯДОЧИТЬ ПО 	
	| ДоходыИВзносы.Период";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить().Выгрузить();
		     	
	Возврат Результат;
	
КонецФункции // ФормаРассчитатьДанныеФормы()

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
		
	ТаблицаРезультатовЗапроса = ФормаРассчитатьДанныеФормы();
   
	// Сохраняем данные в структуру данные в поле табличного документа
	СписокСохранения = Новый Структура();
	
	НомерСтроки 			= 1;
	СтрНомерСтроки 			= Формат(НомерСтроки, "ЧГ=");
	
	ИтогоСуммаЗаработка 	= 0;
	ИтогоСОНачислено		= 0;
	ИтогоСОПеречислено		= 0;
	
	ЕстьРеквизитыШапкиИПодвала = Ложь;
	
	мДатаНачалаПериодаОтчета = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	мДатаКонцаПериодаОтчета  = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;

	ТекущийПериод = НачалоМесяца(мДатаНачалаПериодаОтчета);
	Пока ТекущийПериод <= КонецМесяца(мДатаКонцаПериодаОтчета) Цикл 
		// Обнулим данные
		СуммаЗаработка 		= 0;
		СОНачислено 		= 0;
		СОПеречислено 		= 0;
		РеквизитыДокументов = "";
        // Выберем строки за один период
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Период", ТекущийПериод);
		НайденныеСтроки = ТаблицаРезультатовЗапроса.НайтиСтроки(СтруктураПоиска);
		
		// Реквизиты платежных доументов
		РеквизитыСО = "";		
		
		Для Каждого СтрокаВыборки Из НайденныеСтроки Цикл 
			СуммаЗаработка = СуммаЗаработка + ?(СтрокаВыборки.СуммаЗаработка <> NULL, СтрокаВыборки.СуммаЗаработка, 0);
			СОНачислено    = СОНачислено    + ?(СтрокаВыборки.СОНачислено <> NULL,    СтрокаВыборки.СОНачислено, 0);
			СОПеречислено  = СОПеречислено  + ?(СтрокаВыборки.СОПеречислено <> NULL,  СтрокаВыборки.СОПеречислено, 0);
			
			Если ДанныеПлатежныхДокументов Тогда
				
				РеквизитыТекущегоДокумента = ?(СтрокаВыборки.ДатаПеречисления <> NULL, Формат(СтрокаВыборки.ДатаПеречисления, "ДФ=dd.MM.yyyy"), "");
				РеквизитыТекущегоДокумента = РеквизитыТекущегоДокумента + ?(РеквизитыТекущегоДокумента <> "", ", ", "") + ?(СтрокаВыборки.НомерПоручения <> NULL, СтрокаВыборки.НомерПоручения, "");
				РеквизитыТекущегоДокумента = РеквизитыТекущегоДокумента + ?(РеквизитыТекущегоДокумента <> "", ", ", "") + ?(СтрокаВыборки.МесяцНалоговогоПериода <> NULL, Формат(СтрокаВыборки.МесяцНалоговогоПериода, "ДФ='ММММ гггг'"), "");
				
				Если СтрокаВыборки.ВидСтроки = "ПеречислениеСО" Тогда
					РеквизитыСО = РеквизитыСО + ?(РеквизитыСО <> "" И РеквизитыТекущегоДокумента <> "", "; ", "") + РеквизитыТекущегоДокумента;
				КонецЕсли;
					
			КонецЕсли;
			
			// Заполняем реквизиты шапки и подвала
			Если НЕ ЕстьРеквизитыШапкиИПодвала Тогда
				// период отчета
				СписокСохранения.Вставить("ПериодС",  мДатаНачалаПериодаОтчета);
				СписокСохранения.Вставить("ПериодПо", мДатаКонцаПериодаОтчета);
				
				// Реквизиты организации
				НаименованиеОрганизации = СокрЛП(СтрокаВыборки.НаименованиеОрганизации);
				РеквизитыОрганизации = "";
				
				Если ЗначениеЗаполнено(СтрокаВыборки.ЮрАдресОрганизации) Тогда
					РеквизитыОрганизации = РеквизитыОрганизации + ?(ЗначениеЗаполнено(РеквизитыОрганизации), "; ", "") + СокрЛП(СтрокаВыборки.ЮрАдресОрганизации);
				КонецЕсли;
								
				// Добавим значение БИН или РНН организации
				Если ЗначениеЗаполнено(СтрокаВыборки.БИНОрганизации) Тогда
					РеквизитыОрганизации = РеквизитыОрганизации + ?(ЗначениеЗаполнено(РеквизитыОрганизации), "; ", "") + НСтр("ru = 'БИН: '") + СтрокаВыборки.БИНОрганизации;
				Иначе 
					РеквизитыОрганизации = РеквизитыОрганизации + ?(ЗначениеЗаполнено(РеквизитыОрганизации), "; ", "") + НСтр("ru = 'РНН: '") + СтрокаВыборки.РННОрганизации;
				КонецЕсли;
				
				СписокСохранения.Вставить("НаименованиеОрганизации", НаименованиеОрганизации);
				СписокСохранения.Вставить("РеквизитыОрганизации", 	 РеквизитыОрганизации);
				
				СписокСохранения.Вставить("ДатаПодписи", 			 ДатаПодписи);
				
				// Реквизиты физлица
				СписокСохранения.Вставить("ФИОРаботника",			 СтрокаВыборки.ФИОРаботника); 
				
				//Заполним значение ИИН работника или его РНН и СИК
				Если ЗначениеЗаполнено(СтрокаВыборки.ИИНРаботника) Тогда
					СписокСохранения.Вставить("ИИНРаботника",        СтрокаВыборки.ИИНРаботника); 
				Иначе
					СписокСохранения.Вставить("ИИНРаботника", НСтр("ru = 'РНН: '") + СтрокаВыборки.РННРаботника + НСтр("ru = ', СИК: '") + СтрокаВыборки.СИКРаботника);
				КонецЕсли;
									
				// Руководитель организации
				СписокСохранения.Вставить("ФИОРуководителя",         СтрокаВыборки.ФИОРуководителя);
				СписокСохранения.Вставить("ДолжностьРуководителя",   СтрокаВыборки.ДолжностьРуководителя);
				
				// Главный бухгалтер
				СписокСохранения.Вставить("ФИОГлБухгалтера",         СтрокаВыборки.ФИОГлБухгалтера);
				СписокСохранения.Вставить("ДолжностьГлБухгалтера",   СтрокаВыборки.ДолжностьГлБухгалтера);
				
				ЕстьРеквизитыШапкиИПодвала = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Добавим значение периода
		СписокСохранения.Вставить("Период_" + СтрНомерСтроки, ТекущийПериод);
		
		РеквизитыДокументов = ?(РеквизитыСО <> "", НСтр("ru = 'СО: '") + РеквизитыСО, "");  					// Данные СО							
		
		// Если данные по текущему периоду были найдены, то заполним их значения
		Если НайденныеСтроки.Количество() > 0 Тогда
			СписокСохранения.Вставить("СуммаЗаработка_" + СтрНомерСтроки, СуммаЗаработка);
			СписокСохранения.Вставить("СОНачислено_"    + СтрНомерСтроки, СОНачислено);
			СписокСохранения.Вставить("СОПеречислено_"  + СтрНомерСтроки, СОПеречислено);
			
			Если ДанныеПлатежныхДокументов Тогда
				СписокСохранения.Вставить("Примечание_" + СтрНомерСтроки, РеквизитыДокументов);
			КонецЕсли;
						
			// Подсчитаем итоги
			ИтогоСуммаЗаработка = ИтогоСуммаЗаработка + СуммаЗаработка;
			ИтогоСОНачислено	= ИтогоСОНачислено    + СОНачислено;
			ИтогоСОПеречислено	= ИтогоСОПеречислено  + СОПеречислено;
			
		КонецЕсли;
		
        НомерСтроки    = НомерСтроки + 1;
		СтрНомерСтроки = Формат(НомерСтроки, "ЧГ=");
        ТекущийПериод  = ДобавитьМесяц(ТекущийПериод, 1);		
		
	КонецЦикла;  
	
	СписокСохранения.Вставить("ИтогоСуммаЗаработка", ИтогоСуммаЗаработка);
	СписокСохранения.Вставить("ИтогоСОНачислено",    ИтогоСОНачислено);
	СписокСохранения.Вставить("ИтогоСОПеречислено",  ИтогоСОПеречислено);

	// Сумма прописью
	СписокСохранения.Вставить("ИтогоСумма", Формат(ИтогоСуммаЗаработка, "ЧЦ=15; ЧДЦ=2; ЧРД=,") + " (" + ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(ИтогоСуммаЗаработка, Константы.ВалютаРегламентированногоУчета.Получить()) + ")");

	Если Год(мДатаКонцаПериодаОтчета) > Год(мДатаНачалаПериодаОтчета) Тогда
			
		КоличествоЛет = Год(мДатаКонцаПериодаОтчета) - Год(мДатаНачалаПериодаОтчета);
		КоличествоМесяцев = (Месяц(КонецГода(мДатаНачалаПериодаОтчета)) - Месяц(мДатаНачалаПериодаОтчета) + 1) +
						 ?(КоличествоЛет > 1,КоличествоЛет-1,0)*12 + 
						 (Месяц(мДатаКонцаПериодаОтчета) - Месяц(НачалоГода(мДатаКонцаПериодаОтчета)) + 1);
						 
	Иначе
		КоличествоМесяцев = Месяц(мДатаКонцаПериодаОтчета) - Месяц(мДатаНачалаПериодаОтчета) + 1;
	КонецЕсли;
		
	СписокСохранения.Вставить("КоличествоМесяцев", КоличествоМесяцев);
	
	ВывестиВДокумент(СписокСохранения);
	
	// Восстановим сохраняемые показатели
	//ТекТабличноеПоле = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"];
	//Для Каждого Показатель Из мСтруктураСохраняемыхПоказателей Цикл
	//	Если ЗначениеЗаполнено(Показатель.Значение) Тогда
	//		УстановитьЗначениеОбласти(ТекТабличноеПоле, Показатель.Ключ, Показатель.Значение);
	//	КонецЕсли;
	//КонецЦикла;

	//РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, КодФормы, ТаблицаДанных);	
	//РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы,"СреднегодоваяЧисленность", ПолучитьСреднегодовуюЧисленностьРаботников());
		
	//ФормаОтчетаРасчетНаСервере(Неопределено, Неопределено);	
	Модифицированность = Истина;
	УстановитьФорматВывода();
	Комментарий = "";

КонецПроцедуры

&НаСервере
Функция ПроверитьСоответствиеСотрудникаОрганизацииНаСервере(ВыбранныйСотрудник)
	
	ГоловнаяОрганизацияОтчета    = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Налогоплательщик);
	ВыбраннаяГоловнаяОрганизация = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(ВыбранныйСотрудник.ТекущаяСтруктурнаяЕдиница);
	
	Возврат ГоловнаяОрганизацияОтчета = ВыбраннаяГоловнаяОрганизация;
	
КонецФункции

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	ФизЛицо	= Сотрудник.ФизЛицо;

КонецПроцедуры

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	УстановитьЗначениеОбласти(ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"], "ДатаПодписи", ДатаПодписи);
	Модифированность = Истина;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УстановитьЗначениеОбласти(Приемник, ИмяОбласти, Значение)

	Результат = Ложь;
	Если ТипЗнч(Приемник) = Тип("Структура") Тогда
		
		Приемник.Вставить(ИмяОбласти, Значение);
		Результат = Истина;
	
	ИначеЕсли ТипЗнч(Приемник) = Тип("ТабличныйДокумент") Тогда
		
		ИскомаяОбласть = Приемник.Области.Найти(ИмяОбласти);
		Если ИскомаяОбласть <> Неопределено Тогда
			Если ИскомаяОбласть.СодержитЗначение Тогда
				ИскомаяОбласть.Значение = Значение;
			Иначе
				ИскомаяОбласть.Текст = Строка(Значение);
			КонецЕсли;
			Результат = Истина;
		КонецЕсли;
				
	КонецЕсли;

    Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗначениеОбласти(Источник, ИмяОбласти, ЗначениеПоУмолчанию = Неопределено) 

	Результат = ЗначениеПоУмолчанию;
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		
		Источник.Свойство(ИмяОбласти, Результат);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ТабличныйДокумент") Тогда
		
		ИскомаяОбласть = Источник.Области.Найти(ИмяОбласти);
		
		Если ИскомаяОбласть <> Неопределено Тогда
			
			Если ИскомаяОбласть.СодержитЗначение Тогда
				Результат = ИскомаяОбласть.Значение;
			Иначе
				Результат = ИскомаяОбласть.Текст;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
	        ТекстСообщения = НСтр("ru = 'При выводе сумм в тенге точность не может превышать 2 знака'");            
	        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);                
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
	        ТекстСообщения = НСтр("ru = 'При выводе сумм в тысячах тенге точность не может превышать 3 знака'");            
	        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);                
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
	        ТекстСообщения = НСтр("ru = 'При выводе сумм в миллионах тенге точность не может превышать 6 знаков'");            
	        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);                
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

&НаСервере
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	// Собираем в список значений имена вычисляемых показателей
	//
	//
	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()
