////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.Вставить("СвойстваДобавляемыхПриложений", Новый Структура);
	
	СвойстваПриложения = Новый Структура("ГруппаФормыВладелец, ИсходнаяСтраница, Количество, РеквизитыФормы, Многострочность");
	
	СвойстваПриложения.ГруппаФормыВладелец = "ГруппаСтраницыОтчета";
	СвойстваПриложения.ИсходнаяСтраница = "Форма700_01";
	СвойстваПриложения.Количество = 0;
	РеквизитыФормы = Новый Массив;
	РеквизитыФормы.Добавить("Форма700_01ПолеТабличногоДокументаСтраница1");
	РеквизитыФормы.Добавить("Форма700_01ПолеТабличногоДокументаСтраница2");
	СвойстваПриложения.РеквизитыФормы = РеквизитыФормы;
	СвойстваПриложения.Многострочность = Ложь;
	
	СтруктураРеквизитовФормы.СвойстваДобавляемыхПриложений.Вставить("Форма700_01", СвойстваПриложения);
	
	СвойстваПриложения = Новый Структура("ГруппаФормыВладелец, ИсходнаяСтраница, Количество, РеквизитыФормы, Многострочность");
	
	СвойстваПриложения.ГруппаФормыВладелец = "ГруппаСтраницыОтчета";
	СвойстваПриложения.ИсходнаяСтраница = "Форма700_02";
	СвойстваПриложения.Количество = 0;
	РеквизитыФормы = Новый Массив;
	РеквизитыФормы.Добавить("Форма700_02ПолеТабличногоДокументаЛистA");
	РеквизитыФормы.Добавить("Форма700_02ПолеТабличногоДокументаЛистB");                                      
	РеквизитыФормы.Добавить("Форма700_02ПолеТабличногоДокументаЛистC");
	СвойстваПриложения.РеквизитыФормы = РеквизитыФормы;
	СвойстваПриложения.Многострочность = Истина;
	
	СтруктураРеквизитовФормы.СвойстваДобавляемыхПриложений.Вставить("Форма700_02", СвойстваПриложения);
	
	мВыбраннаяФорма = "Форма7002021Кв1";
	КодФормы 		= "Форма700";
	
	мФорматНомераСтроки = "ЧЦ=6; ЧВН=; ЧГ=";
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруФормРегОтчета(ЭтотОбъект);
	
	ДополнитьСтруктуруМногострочныхФорм();
	
	СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов   = Новый СписокЗначений;		
	СтруктураРеквизитовФормы.мПечатныеформы 		  = Новый СписокЗначений;		
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	ЗаполнитьСведенияОбОтчетномПериоде();
	
	ДатаПодписи	= ТекущаяДатаСеанса();		
	ДатаПодачи	= ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекФорма.КодФормы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если Модифицированность Тогда 
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);	
		ТекстВопроса = НСТР("ru = 'Сохранить данные отчета?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ОтражениеНалоговойОтчетностиВРеглУчете" Тогда
		Элементы.ФормаОтражениеВУчете.Заголовок = ПолучитьЗаголовокОтражениеВУчете(Источник);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЭтаФорма.КодФормы = Элемент.ТекущиеДанные.КодФормы Тогда
		ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);
		Возврат;
	КонецЕсли;
	
	РазделыОтчетаПриАктивизацииСтрокиНаСервере(Элемент.ТекущиеДанные.КодФормы, Элемент.ТекущиеДанные.Многострочность);
	
	ДоступностьДобавитьПриложение = СтрНайти(ЭтаФорма.КодФормы, "700_01") <> 0 ИЛИ СтрНайти(ЭтаФорма.КодФормы, "700_02") <> 0;
	ДоступностьУдалитьПриложение  = СтрНайти(ЭтаФорма.КодФормы, "700_01_") <> 0 ИЛИ СтрНайти(ЭтаФорма.КодФормы, "700_02_") <> 0;
	
	Элементы.ДобавитьПриложение.Доступность = ДоступностьДобавитьПриложение;
	Элементы.УдалитьПриложение.Доступность  = ДоступностьУдалитьПриложение;
	
	Элементы.РазделыОтчетаКонтекстноеМенюДобавитьПриложение.Доступность = ДоступностьДобавитьПриложение;
	Элементы.РазделыОтчетаКонтекстноеМенюУдалитьПриложение.Доступность  = ДоступностьУдалитьПриложение;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Для Каждого СтраницаФорм Из Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы Цикл
		Элементы[СтраницаФорм.Имя].Видимость = СтраницаФорм.Имя = ЭтаФорма.КодФормы;	
	КонецЦикла;
	
	Элементы.ГруппаСтраницыОтчета.ТекущаяСтраница = Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы[ЭтаФорма.КодФормы];

	ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);
	
КонецПроцедуры

&НаСервере        
Процедура РазделыОтчетаПриАктивизацииСтрокиНаСервере(НовыйКодФормы, НовыйПризнакМногострочность)
	
	//проверим, что стояли не на основной, итоги передаем только когда переходим из доп.форм
	ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	Если ТекФорма <> Неопределено И Не ТекФорма.ПризнакОсновной Тогда
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы, Истина);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	
	
	// установим новые значения реквизитам формы
	ЭтаФорма.КодФормы = НовыйКодФормы;		
	
	Если НовыйПризнакМногострочность Тогда
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура СписокРасчетовПриИзменении(Элемент)
	
	СписокРасчетовПриИзмененииНаСервере();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

&НаКлиенте
Процедура ВыгрузитьВXML(Команда)
	
	ГодФормирования = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	
	Если 2021 < ГодФормирования Тогда 
		ТекстСообщения = НСтр("ru = 'Отчет не предназначен для выгрузки в XML в период формирования " + Формат(ГодФормирования,"ЧГ=0") + " г." + Символы.ПС + 
		"Пожалуйста, обновите комплект отчетов.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);		
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект);	
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры  

&НаКлиенте
Процедура ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохраненияФайла.ПолноеИмяФайла = КодФормы + " " + СтруктураРеквизитовФормы.мГод + "г" + ".xml";
		ДиалогСохраненияФайла.Фильтр = РегламентированнаяОтчетностьКлиентСервер.ФильтрДиалоговВыбораИСохраненияРегламентированногоОтчета();	
		ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
		ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите файл'");		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
		ДиалогСохраненияФайла.Показать(ОписаниеОповещения);
	Иначе   
		НачатьПолучениеФайлаССервера(ВыгрузитьВXMLНаСервере(), КодФормы + ".xml"); 
	КонецЕсли;
	   
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресВременногоХранилища = ВыгрузитьВXMLНаСервере();
		
	ПолноеИмяФайла = Результат[0];
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, АдресВременногоХранилища));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяФайла",ПолноеИмяФайла); 
	Обработчик = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеЗавершение", ЭтотОбъект,ДополнительныеПараметры);
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
	ПараметрыСохранения.Интерактивно = Ложь;
	ФайловаяСистемаКлиент.СохранитьФайлы(Обработчик, ПолучаемыеФайлы, ПараметрыСохранения); 
	
	        
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ТекстЗаголовка = НСтр("ru = 'Данные успешно выгружены в файл'");
	
	СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДополнительныеПараметры.ИмяФайла);
	
	РабочийКаталог = СтруктураФайла.Путь;

	#Если НЕ ВебКлиент Тогда
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка, "file:///" + СтрЗаменить(СокрЛП(РабочийКаталог), "\", "/"),
		РабочийКаталог);
	#Иначе
		Если НЕ ЗначениеЗаполнено(ПолученныеФайлы) Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка,,
		РабочийКаталог);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Перезаполнить = Истина; // Для выполнения запроса на пересчет данных к пользователю
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения = РегламентированнаяОтчетностьКлиент.ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Перезаполнить Тогда	
		
		Если СтрокаФормы.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстВопроса = Нстр("ru='Перезаполнить данные формы и ее дополнительных форм?'");
		Иначе
			ТекстВопроса = Нстр("ru='Перезаполнить данные формы?'");
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы",      КодФормы);
		Оповещение.ДополнительныеПараметры.Вставить("Перезаполнить", Перезаполнить);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);		
		
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда) 	
	Печать(Команда.Имя);         	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда) 	
	Печать(Команда.Имя);         	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	ДобавитьСтрокуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	УдалитьСтрокуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущаяСтр(Команда)
	ПредыдущаяСтрНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СледующаяСтр(Команда)
	СледующаяСтрНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницу(Команда)
	
	ВыбСтраница = 1;
	
	ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаСтраницы", ЭтаФорма); 
	ПоказатьВводЧисла(ОповещениеВводаЗначений,ВыбСтраница, Нстр("ru='Введите номер страницы'"),5,0);
	
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)  	
	ОткрытьФормуНастройкиСтраниц();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсе(Команда)
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФормуИПриложения");
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФорму(Команда)
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму");
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеглОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Форма = ДополнительныеПараметры.Форма;	
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", Форма.КодФормы));
		Вложенность = ДополнительныеПараметры.ОчищатьПриложения;	
		
		ОчиститьРеглОтчетЗавершениеНаСервере(СтрокаФормы.КодФормы, СтрокаФормы.Многострочность, Вложенность);
		
	КонецЕсли;
	
КонецПроцедуры 	

&НаСервере
Процедура ОчиститьРеглОтчетЗавершениеНаСервере(КодФормы, ПризнакМногострочности, Вложенность) Экспорт
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, ПризнакМногострочности, Вложенность);	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)	
	СохранитьДанные();      	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыФормы.Вставить("Налогоплательщик",         Налогоплательщик);
	ПараметрыФормы.Вставить("НалоговыйКомитет",         НалоговыйКомитет);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, мВыбраннаяФорма, "") + "ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);	
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровка(Команда)
	
	Если КодФормы = "Форма700" Тогда
		
		Попытка
			ИмяЯчейки = ТекущийЭлемент.ТекущаяОбласть.Имя;
		Исключение
			ПоказатьПредупреждение(, Нстр("ru='Активизируйте нужную ячейку отчета для расшифровки.'"));
			Возврат;
		КонецПопытки;
		
		Если ИмяЯчейки = "s_700_00_005_I" Тогда
			Форма700_00НалогНаИмуществоСформироватьРасшифровку();
		Иначе
			ПоказатьПредупреждение(, Нстр("ru='Расшифровка данной ячейки не поддерживается. Расшифровку содержат ячейки формы, выделенные голубым цветом.'"));
		КонецЕсли;
		
	ИначеЕсли СтрНайти(КодФормы, "Форма700_01") Тогда
		Форма700_01СформироватьРасшифровку();
	ИначеЕсли СтрНайти(КодФормы, "Форма700_02") Тогда
		ПоказатьПредупреждение(, Нстр("ru='Расшифровка данной ячейки не поддерживается. Расшифровку содержат ячейки формы, выделенные голубым цветом.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчете(Команда)
	
	СохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(СохраненныйДок) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Регламентированный отчет не записан в информационной базе.'"));
		Возврат;
	КонецЕсли;
	
	ДокументОтраженияВУчете = ПолучитьЗначениеРеквизита(СохраненныйДок, "ДокументОтраженияВУчете");
	
	Если ЗначениеЗаполнено(ДокументОтраженияВУчете) Тогда
		РегламентированнаяОтчетностьКлиент.ОткрытьДокументОтраженияНалОтчетностиВУчете(СохраненныйДок, ДокументОтраженияВУчете, ЭтотОбъект);
	Иначе
		РегламентированнаяОтчетностьКлиент.СоздатьДокументОтраженияНалОтчетностиВУчете(СохраненныйДок, ЭтотОбъект, СформироватьДополнительныеПараметрыОтраженияДанных());
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ПРОЦЕДУРЫ И ФУНКЦЦИИ

&НаСервере
Процедура ПредыдущаяСтрНаСервере()
	
	ТекущаяСтраница = ТекущаяСтраница - 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СледующаяСтрНаСервере()
	
	ТекущаяСтраница = ТекущаяСтраница + 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокСтруктурныхЕдиниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");			
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("НалоговыйКомитет");				
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");	
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");	
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");		
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");	
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрг");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");	
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");		
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");	
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);	
	СтруктураРеквизитовФормы.Вставить("мГод");	
	СтруктураРеквизитовФормы.Вставить("мКвартал");	
	СтруктураРеквизитовФормы.Вставить("мМесяц");	
	// индивидуальные параметры формы
	СтруктураРеквизитовФормы.Вставить("мПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтчетномПериоде() Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ФП = Истина");
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Год Тогда
		СтруктураРеквизитовФормы.мКвартал = Неопределено;
		СтруктураРеквизитовФормы.мГод = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Иначе
		СтруктураРеквизитовФормы.мКвартал = Лев(СтрПериодОтчета,1);
		СтруктураРеквизитовФормы.мГод = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	ВосстановитьОбъектыДобавленныхПриложений();
	РегламентированнаяОтчетность.ВосстановитьСохраненныйОтчет(ЭтотОбъект);
	ВосстановитьДанныеПриложений();
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Перем СтруктураГруппы; 
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ТекстСообщения = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");            
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;        
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		ВыборРасчета(КодФормы);		
	КонецЕсли; 
	
	РегламентированнаяОтчетность.СформироватьСписокПечатаемыхЛистов(ЭтаФорма);                     
	
	Возврат Истина;
	
КонецФункции

&НаСервере
//Процедура выполняет выбор процедуры расчета.
//ВыборРасчета выполняется при восстановлении данных, при изменении поля табличного документа
//
//Параметры:    ТекФорма - имя текущей формы
//              Индекс - индекс строки для многострочной формы
//              Показатель - имя ячейки, откуда была вызвана процедура расчета многострочной
//                           формы, без указания номера строки (например, без "__1")
//
Процедура ВыборРасчета(ТекФорма, Индекс = Неопределено, Показатель = Неопределено) Экспорт
	
	Форма = РеквизитФормыВЗначение("мСписокФормБезИерархии").Строки.Найти(ТекФорма, "КодФормы");
	
	Если СтрНайти(ТекФорма, "Форма700_01") <> 0 Тогда
		НазваниеПроцедуры = "Форма700_01Расчет(" + Индекс + ?(Показатель <> Неопределено, ",""" + Показатель + """","") + ", ТекФорма)";
	ИначеЕсли СтрНайти(ТекФорма, "Форма700_02") <> 0 Тогда
		НазваниеПроцедуры = "Форма700_02Расчет(" + Индекс + ?(Показатель <> Неопределено, ",""" + Показатель + """","") + ", ТекФорма)";
	Иначе
		НазваниеПроцедуры = ТекФорма + "Расчет(" + Индекс + ?(Показатель <> Неопределено, ",""" + Показатель + """","") + ")";
	КонецЕсли;
	
	Выполнить(НазваниеПроцедуры);
	
КонецПроцедуры // ВыборРасчета()

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(мСписокСтруктурныхЕдиниц, ЭтаФорма, СтандартнаяОбработка,"", Налогоплательщик,НалоговыйКомитет,
	ПредопределенноеЗначение("Перечисление.РазделыНалоговогоУчета.МестныеНалоги"),Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда		
		мСписокСтруктурныхЕдиниц = Результат;		
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц); 		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////
// Общие механизмы отчета

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ   			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;				
		КонецЕсли;	
		
		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		ДокументОтражения = ПолучитьЗначениеРеквизита(СтруктураРеквизитовФормы.мСохраненныйДок, "ДокументОтраженияВУчете");
		Элементы.ФормаОтражениеВУчете.Заголовок = ПолучитьЗаголовокОтражениеВУчете(ДокументОтражения);
	КонецЕсли;
	
	МассивРеквизитовФормы = ЭтотОбъект.ПолучитьРеквизиты();
	Для Счетчик = 0 По МассивРеквизитовФормы.Количество()-1 Цикл		
		РеквизитФормы = МассивРеквизитовФормы[Счетчик];
		Если РеквизитФормы.ТипЗначения.СодержитТип(Тип("ТабличныйДокумент")) Тогда
			ЭтотОбъект[РеквизитФормы.Имя] = ЭтотОбъект[РеквизитФормы.Имя];	
		КонецЕсли;
	КонецЦикла;	
	
	мСтруктураЗначений = Новый Структура;
	
	Если СтруктураРеквизитовФормы.Свойство("СформироватьФормуОтчетаАвтоматически") И СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически <> Неопределено Тогда
		ЗаполнитьАвтоНаСервере();		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, ЭтотОбъект.КодФормы, Ложь,Ложь);
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма);	
	
	Форма700Расчет();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметры(ТекущееИмяФормы) Экспорт
	
	Форма = РеквизитФормыВЗначение("мСписокФормБезИерархии").Строки.Найти(ТекущееИмяФормы,   "КодФормы");
	ДобавленноеПриложение = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений").Найти(ТекущееИмяФормы, "КодФормы");
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, "Форма700");
	ФИОРук = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,   "Руководитель"); // ФИО руководителя
	
	Если Форма.Многострочность = 1 Тогда // заполнение структуры шапки(подвала) для многострочных форм
		
		Если НЕ ((Налогоплательщик  = Неопределено) ИЛИ (Налогоплательщик = Справочники.Организации.ПустаяСсылка())) Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы, "ИИН_БИН", Налогоплательщик.ИдентификационныйНомер, Ложь);
		КонецЕсли;                                                  
		
		// реквизиты головной организации
		Если ЗначениеЗаполнено(Налогоплательщик) И Налогоплательщик.ГоловнаяОрганизация <> Налогоплательщик Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы, "ИИН_БИНГоловного", Налогоплательщик.ГоловнаяОрганизация.ИдентификационныйНомер, Ложь);
		КонецЕсли;
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год", СтруктураРеквизитовФормы.мГод, Ложь);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Руководитель", ФИОРук, Ложь);
		
		Если СтрНайти(ТекущееИмяФормы, "Форма700_02") <> 0 Тогда
			
			мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, ТекущееИмяФормы);
			СтруктураГруппы = Неопределено;
			мМногострочнаяСтруктура.Свойство("ЛистA", СтруктураГруппы);
			мМногострочнаяСтруктура.Свойство("ЛистB", СтруктураГруппы);
			мМногострочнаяСтруктура.Свойство("ЛистC", СтруктураГруппы);
			ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "КоличествоПриложений", ТаблицаСтрокГруппы.Количество(), Ложь);			
			
			Если ДобавленноеПриложение <> Неопределено Тогда
				РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИНГоловного", ДобавленноеПриложение.ГоловнаяОрганизация.ИдентификационныйНомер, Ложь);
				РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИНАкимата", ДобавленноеПриложение.МестныйБюджет.ИдентификационныйКодЛичности, Ложь);
			Иначе
				Если ЗначениеЗаполнено(НалогоплательщикМестныйБюджет) Тогда
					РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы, "ИИН_БИНАкимата", НалогоплательщикМестныйБюджет.ИдентификационныйКодЛичности, Ложь);
				КонецЕсли;                                                  
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе //обычная форма
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год",     СтруктураРеквизитовФормы.мГод);	
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН", Налогоплательщик.ИдентификационныйНомер);
		
		Если ТекущееИмяФормы = "Форма700" Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Руководитель", ФИОРук, Ложь);
		КонецЕсли;
		
		Если СтрНайти(ТекущееИмяФормы, "Форма700_01") <> 0 Тогда
			Если ДобавленноеПриложение <> Неопределено Тогда
				РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН_Акимат", ДобавленноеПриложение.МестныйБюджет.ИдентификационныйКодЛичности, Истина);
			Иначе
				Если ЗначениеЗаполнено(НалогоплательщикМестныйБюджет) Тогда
					РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы, "ИИН_БИН_Акимат", НалогоплательщикМестныйБюджет.ИдентификационныйКодЛичности, Истина);
				КонецЕсли;                                                  
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущееИмяФормы = Лев(мВыбраннаяФорма, СтрДлина(мВыбраннаяФорма)-7) Тогда 
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "КодВалюты", "KZT");
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			СписокРасчетов = "Очередная";
		КонецЕсли; 
		
		СписокРасчетовПриИзмененииНаСервере();
		
		//заполним основные сведения об организации
		ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы);
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы)
	
	ОргСведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(Налогоплательщик, ДатаПодачи);
	//Если организация не указана то не выводим никаких сведений
	Если ОргСведения = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализируем переменные
	РННЮЛ = ""; 	// РНН	
	НаимЮЛПол = ""; // Полное наименование 	
	ИИН_БИН = ""; 	// ИИН_БИН	
	ФИОРук = ""; 	// ФИО руководителя				
	КодНалоговогоОргана = ""; // Код налогового органа	
	АдрЮр = ""; //юр.адрес	
	АдрФакт = ""; //факт.адрес
	
	// Получаем данные
	ОргСведения.Свойство("РНН",     		   РННЮЛ);
	ОргСведения.Свойство("БИН_ИИН",   		   ИИН_БИН);
	ОргСведения.Свойство("ПолноеНаименование", НаимЮЛПол);	
	ОргСведения.Свойство("Руководитель",	   ФИОРук);	
	ОргСведения.Свойство("ЮридическийАдрес",   АдрЮр);
	ОргСведения.Свойство("ФактическийАдрес",   АдрФакт);
	
	// Производим операции связанные с текущей формой отчетности	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН", ИИН_БИН);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"ОргНазв", НаимЮЛПол);
	// Разбиваем название организации
	НазваниеОрганизацииДляРазбиения = НаимЮЛПол;
	НачПозиция = 1;
	Для Шаг = 1 По 2 Цикл
		ДлинаСтроки = ЭтотОбъект[ТекущееИмяФормы + "ПолеТабличногоДокументаСтраница1"].Области["ОргНазв" + Шаг].ТипЗначения.КвалификаторыСтроки.Длина;
		НазОрганизации = Сред(НазваниеОрганизацииДляРазбиения, НачПозиция, ДлинаСтроки); 
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ОргНазв" + Шаг, НазОрганизации);
		НачПозиция = НачПозиция + ДлинаСтроки;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Руководитель", ФИОРук);
	
	// Дата подачи декларации
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ДатаПодачи", ДатаПодачи);
	
	НалогоплательщикМестныйБюджет = Налогоплательщик.МестныйБюджет;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуНаСервере()
	
	Если Лев(КодФормы, 11) = "Форма700_02" Тогда
		
		РегламентированнаяОтчетность.УдалитьСтрокуМногострочнойФормы(ЭтотОбъект, 4);
		
		// Пересчет итогов после удаления строки
		СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, КодФормы);
		РасчетИтоговыхСтрок_ЛистC(СтруктураФормы);
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы);
		РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, КодФормы, СтруктураФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеИтоговВСтруктуре(Форма, ТаблицаСтрокГруппы, ОбщиеЭлементыГруппы) 
	
	Отбор = Новый Структура();
	Отбор.Вставить("Итог",Истина);
	СтрокиИтоговыхЯчеек = ОбщиеЭлементыГруппы.НайтиСтроки(Отбор);
	Для Каждого Строка Из СтрокиИтоговыхЯчеек Цикл
		ТекЗначение = Строка.ИмяОбласти;
		Если ТаблицаСтрокГруппы.Колонки.Найти(ТекЗначение) <> Неопределено Тогда
			Строка.Значение = ТаблицаСтрокГруппы.Итог(ТекЗначение);
		КонецЕсли;                                		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере()
	
	РегламентированнаяОтчетность.ДобавитьСтрокуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПанель(ПризнакОсновнойФормы, ПризнакМногострочности)
	
	Элементы.ФормаВыгрузитьВXML.Видимость = ПризнакОсновнойФормы;
	Элементы.ФормаОчиститьВсе.Видимость = ПризнакОсновнойФормы;
	Элементы.ГруппаКнопокДействияСоСтрокамиИСтраницамиПриложения.Видимость = ПризнакМногострочности;	
	
КонецПроцедуры //ЗаполнитьПанель()

&НаСервере
Процедура ОчиститьНаСервере()
	РегламентированнаяОтчетность.ОчиститьРеглОтчет(ЭтаФорма,"ОчиститьФорму");
КонецПроцедуры

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура Очистить(ТекИмяФормы, ОчиститьВсе = Ложь) Экспорт
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	// Список ячеек, очищать которые не нужно
	
	Если ОчиститьВсе Тогда
		Если ТекИмяФормы = Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7) Тогда 
			СписокПоказателейНеПодлежащихОчистке.Добавить("КодВалюты");
		КонецЕсли;
	Иначе
		СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
		СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Год");
		СписокПоказателейНеПодлежащихОчистке.Добавить("НомерУведомления");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаУведомления");
		СписокПоказателейНеПодлежащихОчистке.Добавить("НомерКонтракта");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаКонтракта");
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодНалоговогоОргана");
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОчиститьСтруктуруДанныхИТабличноеПолеФормы(ЭтаФорма, ТекИмяФормы, ОчиститьВсе, СписокПоказателейНеПодлежащихОчистке);
	// обновим представление списка структурных единиц
	Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц);
	КонецЕсли;
	
КонецПРоцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Перезаполнить = ДополнительныеПараметры.Перезаполнить;
	Очистить(КодФормы, КодФормы = "Форма700");
	
	НачатьЗамерВремени();
	
	Если КодФормы = "Форма700" Тогда 		
		Форма700ЗаполнитьАвто(Перезаполнить);
	ИначеЕсли СтрНайти(КодФормы, "700_01") Тогда
		Форма700_01ЗаполнитьАвто(Перезаполнить);
	ИначеЕсли СтрНайти(КодФормы, "700_02") Тогда
		Форма700_02ЗаполнитьАвто(Перезаполнить);
	КонецЕсли;
	
	АдресТаблицыМестныхБюджетов = "";
	
КонецПроцедуры

&НаСервере
Процедура СписокРасчетовПриИзмененииНаСервере()
	
	ТекИмяФормы = "Форма700";
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Первоначальная", "", Ложь);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Очередная",      "", Ложь);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Дополнительная", "", Ложь);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "ПоУведомлению",  "", Ложь);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Ликвидационная", "", Ложь);
	
	Если СписокРасчетов = "Первоначальная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Первоначальная", "Х", Ложь);
	ИначеЕсли СписокРасчетов = "Очередная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Очередная", "Х", Ложь);
	ИначеЕсли СписокРасчетов = "Дополнительная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Дополнительная", "Х", Ложь);
	ИначеЕсли СписокРасчетов = "ПоУведомлению" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "ПоУведомлению", "Х", Ложь);
	ИначеЕсли СписокРасчетов = "Ликвидационная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Ликвидационная", "Х", Ложь);
	КонецЕсли;
	
	Если СписокРасчетов = "ПоУведомлению" Тогда
		Форма700ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Ложь;
		Форма700ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита = Ложь;
	Иначе	
		Форма700ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Истина;
		Форма700ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита = Истина;
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "НомерУведомления", "", Ложь);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "ДатаУведомления",  "", Ложь);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);		                 	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ЗначениеРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ЗначениеРеквизита);										
	
КонецФункции

//Формирует дополнительные параметры для передачи в процедуры отражения в учете.
//
&НаСервере
Функция СформироватьДополнительныеПараметрыОтраженияДанных()
	
	СтруктураПараметров = Новый Структура();
	
	ПоказателиОтчета = Новый Структура();
	СтруктураПараметров.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ПараметрыОтчета = Новый Структура(); 
	ПараметрыОтчета.Вставить("НалоговыйКомитет", 15);
	СтруктураПараметров.Вставить("ПараметрыОтчета", ПараметрыОтчета);

	ТаблицаДобавленныхПриложенийДляОтражения = Новый Массив();
	ДобавленныеПриложения = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений");
	Для Каждого Приложение Из ДобавленныеПриложения Цикл
		ДобавленноеПриложение = Новый Структура();
		ДобавленноеПриложение.Вставить("КодФормы", Приложение.КодФормы);
		ДобавленноеПриложение.Вставить("МестныйБюджет", Приложение.МестныйБюджет);
		ДобавленноеПриложение.Вставить("СтруктурнаяЕдиница", Приложение.СтруктурнаяЕдиница);
		ТаблицаДобавленныхПриложенийДляОтражения.Добавить(ДобавленноеПриложение);
	КонецЦикла;
	СтруктураПараметров.Вставить("ТаблицаДобавленныхПриложенийДляОтражения", ТаблицаДобавленныхПриложенийДляОтражения);
	
	Возврат СтруктураПараметров;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции выгрузки данных отчета в XML

&НаСервере
Функция ВыгрузитьВXMLНаСервере(ВыдаватьСообщение = Ложь)		
	Возврат РегламентированнаяОтчетность.ВыгрузитьОтчетВXMLДляСОНО(ЭтотОбъект, ВыдаватьСообщение);
КонецФункции

///////////////////////////////////////////////////////////////////
// ФОРМА 700.00

&НаСервере
Процедура Форма700ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Если Перезаполнить Тогда	
		ТекстСообщения = НСтр("ru = 'Расчет основной формы приложения 700.00'");		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	КодФормы = "Форма700_01";
	Очистить(КодФормы);
	Форма700_01ЗаполнитьАвто(Перезаполнить);
	
	КодФормы = "Форма700_02";
	Форма700_02ЗаполнитьАвто(Перезаполнить);
	
	КодФормы = "Форма700";
	
	// Заполняем поле "Представленные приложения"
	Для Каждого Форма Из РеквизитФормыВЗначение("СписокФормДерева").Строки[0].Строки Цикл
		Если СтрНайти(Форма.КодФормы, "700_01_") <> 0 Тогда
			КодФормыПриложения = "Форма700_01";
		ИначеЕсли СтрНайти(Форма.КодФормы, "700_02_") <> 0 Тогда
			КодФормыПриложения = "Форма700_02";
		Иначе
			КодФормыПриложения = Форма.КодФормы;
		КонецЕсли;
		ИмяОбласти = "Приложение" + Прав(КодФормыПриложения, 2);
		Если Форма700ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяОбласти) <> Неопределено Тогда
			Строка = РеквизитФормыВЗначение("мСписокФормБезИерархии").Строки.Найти(Форма.КодФормы, "КодФормы");
			Если Строка.Выгружать = 1 Тогда
				РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяОбласти, "Х", Ложь);				
			Иначе
				РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяОбласти, "",  Ложь);				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	// Форма700_00 РассчитатьСуммуНалогаНаИмущество
	СуммаНалогаНаИмущество = Окр(Форма700_00РассчитатьСуммуНалогаНаИмущество());
	КБКНалогаНаИмущество   = Справочники.НалогиСборыОтчисления.НалогНаИмущество.КодБК;
	Если Найти(КБКНалогаНаИмущество, "104102") > 0 Тогда
		// КБК ФЛ
		СтрокаНалогаНаИмущество = "s_700_00_005_III";
	Иначе
		// КБК ЮЛ
		СтрокаНалогаНаИмущество = "s_700_00_005_I";
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, СтрокаНалогаНаИмущество, СуммаНалогаНаИмущество, Ложь); 
	
	// передаем в качестве признака перезаполнения Истина, т.к. это главная форма
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, КодФормы, Истина);                 	
	
	Модифицированность = Истина;       
	
КонецПроцедуры // Форма700ЗаполнитьАвто()

&НаСервере
Процедура Форма700Расчет(Изменено = Ложь)
	
	КодЭтойФормы = "Форма700";
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, КодЭтойФормы);
	
	// количество 700.01
	Значение700_01 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "Приложение01");
	Если Значение700_01 = "Х" Тогда
		ДобавленныеПриложения700_01 = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений").Скопировать(Новый Структура("КодИсходнойФормы", "Форма700_01"));
		КоличествоДобавленных700_01 = ДобавленныеПриложения700_01.Количество();
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодЭтойФормы, "КоличествоПриложений700_01", 1 + КоличествоДобавленных700_01, Истина);
	КонецЕсли;	
	
	// количество 700.02
	Значение700_02 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "Приложение02");
	Если Значение700_02 = "Х" Тогда
		ДобавленныеПриложения700_02 = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений").Скопировать(Новый Структура("КодИсходнойФормы", "Форма700_02"));
		КоличествоДобавленных700_02 = ДобавленныеПриложения700_02.Количество();
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодЭтойФормы, "КоличествоПриложений700_02", 1 + КоличествоДобавленных700_02, Истина);
	КонецЕсли;	
	
	// 700.00.002. Сумма исчисленного налога, в том числе по КБК: 700.00.002.I + 700.00.002.II
	//s_700_00_002_I = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_700_00_002_I");
	//s_700_00_002_II = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_700_00_002_II");
	//s_700_00_002 = s_700_00_002_I + s_700_00_002_II;
	//РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодЭтойФормы, "s_700_00_002", s_700_00_002, Истина);
	
	// 700.00.005. Сумма исчисленного налога, всего: 700.00.005.I + 700.00.05.II + 700.00.05.III
	s_700_00_005_I = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_700_00_005_I");
	s_700_00_005_II = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_700_00_005_II");
	s_700_00_005_III = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_700_00_005_III");
	s_700_00_005 = s_700_00_005_I + s_700_00_005_II + s_700_00_005_III;
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодЭтойФормы, "s_700_00_005", s_700_00_005, Истина);
	
	// 700.00.007. Сумма налога к начислению по КБК 104101: 700.00.005_I - 700.00.006
	// 700.00.008. Сумма налога к уменьшению по КБК 104101: 700.00.006 - 700.00.005_I
	s_700_00_006 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_700_00_006");
	
	s_700_00_007 = s_700_00_005_I - s_700_00_006;
	Если Не s_700_00_007 > 0 Тогда
		s_700_00_007 = 0;
	КонецЕсли;
	
	s_700_00_008 = s_700_00_006 - s_700_00_005_I;
	Если Не s_700_00_008 > 0 Тогда
		s_700_00_008 = 0;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодЭтойФормы, "s_700_00_007", s_700_00_007, Истина);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодЭтойФормы, "s_700_00_008", s_700_00_008, Истина);
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодЭтойФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиСтраниц()
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРаздел = Элементы.РазделыОтчета.ТекущиеДанные.Страницы;		
	КонецЕсли;
	
	Для Каждого ТекФорма ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
		
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",ТекФорма.КодФормы));
		
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			ТекущаяСтрокаСписка.Выгружать               = ТекФорма.Выгружать;
			ТекущаяСтрокаСписка.ПоказатьСтраницу        = ТекФорма.ПоказатьСтраницу;			
			ТекущаяСтрокаСписка.АвтополучениеИтогов     = ТекФорма.АвтополучениеИтогов;  
			ТекущаяСтрокаСписка.АвтоЗаполнение          = ТекФорма.АвтоЗаполнение;  
		КонецЕсли;		   
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокФормДерева", СписокФормДерева);
	
	ДопПараметры   = Новый Структура("ТекущийРаздел",    ТекущийРаздел);
	
	ОповещениеПослеЗакрытияФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастройкиСтраниц", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.НастройкиОтчета", ПараметрыФормы, ЭтаФорма,,,, ОповещениеПослеЗакрытияФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьДанныеСервере();
		Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;	
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиСтраниц(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьДанныеФормы(РезультатЗакрытия, СписокФормДерева);
	
	Модифицированность = Истина;
	
	//обновим мСписокФормБезИерархии
	Для Каждого СтрокаФормы ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
		
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",СтрокаФормы.КодФормы));
		
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			СтрокаФормы.Выгружать               = ТекущаяСтрокаСписка.Выгружать;
			СтрокаФормы.ПоказатьСтраницу        = ТекущаяСтрокаСписка.ПоказатьСтраницу;			
			СтрокаФормы.АвтополучениеИтогов     = ТекущаяСтрокаСписка.АвтополучениеИтогов;  
			СтрокаФормы.АвтоЗаполнение          = ТекущаяСтрокаСписка.АвтоЗаполнение;  
		КонецЕсли;		
		
	КонецЦикла; 	
	
	Если ДополнительныеПараметры.Свойство("ТекущийРаздел") И НЕ ДополнительныеПараметры.ТекущийРаздел = Неопределено Тогда  		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(РазделыОтчета, Новый Структура("СписокФормДереваСтраницы",ДополнительныеПараметры.ТекущийРаздел));
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;			
	КонецЕсли;  	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормы(ТекФорма, Параметры)
	
	ЗаполнитьЗначенияСвойств(ТекФорма.СтруктураРеквизитовФормы, Параметры);
	
	ТекФорма.Налогоплательщик                     = Параметры.Налогоплательщик;
	ТекФорма.НалоговыйКомитет                     = Параметры.НалоговыйКомитет;
	ТекФорма.мСписокСтруктурныхЕдиниц             = Параметры.мСписокСтруктурныхЕдиниц;
	ТекФорма.ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ТекФорма.мСписокСтруктурныхЕдиниц);
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельФорма700ПриСменеСтраницы(Элемент, ТекущаяСтраница)	
	ПанельФорма700ПриСменеСтраницыНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ПанельФорма700ПриСменеСтраницыНаСервере()	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, КодФормы);	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанные() Экспорт
	
	СохранитьДанныеСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеСервере()
	
	ДополнительныеПараметрыОтражения = СформироватьДополнительныеПараметрыОтраженияДанных();
	СтруктураРеквизитовФормы.Вставить("ДополнительныеПараметрыОтражения", ДополнительныеПараметрыОтражения);
	ПодготовитьТаблицуДляОтражениеВУчете(СтрНайти(ЭтотОбъект.ИмяФормы, "ВнешнийОтчет.") > 0);
	
	ТекущийКодФормы = КодФормы;
	КодФормы = "Форма700";
	РегламентированнаяОтчетность.СохранитьОтчет(ЭтотОбъект);
	КодФормы = ТекущийКодФормы;
	
КонецПроцедуры

//Создает таблицу для отражения в учете из многострочной формы. 
//Для Формы 700 нельзя использовать общий механизм формирования, т.к. макет отражения должен собираться на ходу, исходя из данных добавленных приложений.
//
Процедура ПодготовитьТаблицуДляОтражениеВУчете(ВнешнийОтчет = Ложь) Экспорт
	
	Перем СтруктураГруппы;
	
	мВыбраннаяФорма = ЭтотОбъект.мВыбраннаяФорма;
	МакетОтражениевУчете = РегламентированнаяОтчетность.ПолучитьМакетРеглОтчета(БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ЭтотОбъект), "ОтражениевУчете", ВнешнийОтчет);
	
	ОбластьМакета = МакетОтражениевУчете.Область(мВыбраннаяФорма);
	мСписокФормБезИерархии_ = ЭтотОбъект.РеквизитФормыВЗначение("мСписокФормБезИерархии");
	ТаблицаДляОтражениеВУчете_ = ЭтотОбъект.РеквизитФормыВЗначение("ТаблицаДляОтражениеВУчете", Тип("ТаблицаЗначений"));
	
	ТаблицаДобавленныхПриложений_ = ЭтотОбъект.РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений");
	
	ТаблицаДляОтражениеВУчете_.Очистить();
	
	Для Ном = ОбластьМакета.Верх По ОбластьМакета.Низ Цикл
		
		Постфикс = "";
		
		ВидНалога 				 = СокрП(МакетОтражениевУчете.Область(Ном, 1).Текст);
		Если ПустаяСтрока(ВидНалога) Тогда
			// Не считываем пустую строку в области, если она есть по первой колонке.			
			Прервать;
		КонецЕсли;
		
		ТекИмяФормы    		   	 = СокрП(МакетОтражениевУчете.Область(Ном, 7).Текст);
		ТекИмяФормыБезПрефикса   = Сред(ТекИмяФормы, 6); 
		ИмяЛиста 			 	 = СокрП(МакетОтражениевУчете.Область(Ном, 14).Текст);
		
		НайденнаяСтрока = мСписокФормБезИерархии_.Строки.Найти(ТекИмяФормы,"КодФормы");
		ТаблицаДанных = НайденнаяСтрока.Значение;
		ФормаМногострочная = НайденнаяСтрока.Многострочность = 1;
		
		Если Не ФормаМногострочная Тогда
			Продолжить;
		КонецЕсли;	
		
		МногострочнаяСтруктура 	= РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы);					
		МногострочнаяСтруктура.Свойство(ИмяЛиста, СтруктураГруппы);
		ТаблицаШапкаИПодвал 	= СтруктураГруппы.ШапкаИПодвал;
		ТаблицаСтрок 			= СтруктураГруппы.Строки;
		
		Постфикс = ПолучитьПостфикс(Ном, ОбластьМакета, ТаблицаШапкаИПодвал, ТекИмяФормыБезПрефикса);
		
		ДатаУплаты      	   	 = СокрП(МакетОтражениевУчете.Область(Ном, 2).Текст);
		КБК                    	 = СокрП(МакетОтражениевУчете.Область(Ном, 3).Текст);
		ДатаОтражения          	 = СокрП(МакетОтражениевУчете.Область(Ном, 4).Текст);
		ДатаНачалаОтчета       	 = СокрП(МакетОтражениевУчете.Область(Ном, 5).Текст);
		ДатаОкончанияОтчета    	 = СокрП(МакетОтражениевУчете.Область(Ном, 6).Текст);  
		ИсточникЗначения	   	 = СокрП(МакетОтражениевУчете.Область(Ном, 8).Текст);  		
		ИсточникДляОрганизации 	 = СокрП(МакетОтражениевУчете.Область(Ном, 9).Текст);  
		РННПлательщика		   	 = СокрП(МакетОтражениевУчете.Область(Ном, 10).Текст);  
		КомментарийФормы       	 = СокрП(МакетОтражениевУчете.Область(Ном, 11).Текст);
		ИсточникНалоговыйКомитет = СокрП(МакетОтражениевУчете.Область(Ном, 12).Текст);  		
		ИсточникДанных 			 = СокрП(МакетОтражениевУчете.Область(Ном, 13).Текст); 
		
		Если ИсточникДанных = "ШапкаИПодвал" Тогда
			МассивСтрок = ТаблицаШапкаИПодвал.НайтиСтроки(Новый Структура("ИмяОбласти", ИсточникЗначения));
			Если МассивСтрок.Количество() = 0 Тогда
				Значение = 0;
			Иначе
				Значение = ?(ЗначениеЗаполнено(МассивСтрок[0].Значение), МассивСтрок[0].Значение, 0);	
			КонецЕсли;
			
			Если Значение <> 0 Тогда
				СтрокаОтражения 					= ТаблицаДляОтражениеВУчете_.Добавить();
				СтрокаОтражения.ВидНалога 			= ВидНалога;                     
				СтрокаОтражения.ДатаУплаты 			= РегламентированнаяОтчетность.ПолучитьДатуИзСтроки(ДатаУплаты);
				СтрокаОтражения.КБК 				= КБК;
				СтрокаОтражения.ДатаОтражения 		= РегламентированнаяОтчетность.ПолучитьДатуИзСтроки(ДатаОтражения);
				СтрокаОтражения.ДатаНачалаОтчета 	= РегламентированнаяОтчетность.ПолучитьДатуИзСтроки(ДатаНачалаОтчета);
				СтрокаОтражения.ДатаОкончанияОтчета = РегламентированнаяОтчетность.ПолучитьДатуИзСтроки(ДатаОкончанияОтчета);
				СтрокаОтражения.Организация 		= ЭтотОбъект.Налогоплательщик;
				СтрокаОтражения.СтруктурнаяЕдиница 	= ЭтотОбъект.Налогоплательщик;
				СтрокаОтражения.НалоговыйКомитет 	= ?(ЭтотОбъект.Налогоплательщик.УчетПоМестнымБюджетам, ЭтотОбъект.Налогоплательщик.МестныйБюджет, ЭтотОбъект.НалоговыйКомитет);
				СтрокаОтражения.РННПлательщика 		= 0;
				СтрокаОтражения.Комментарий 		= КомментарийФормы;	
				СтрокаОтражения.Значение			= Значение;
				СтрокаОтражения.ИмяФормы			= ТекИмяФормы;
			КонецЕсли;
		Иначе
			Для Каждого СтрокаТЧ ИЗ ТаблицаСтрок Цикл
				Значение = СтрокаТЧ[ИсточникЗначения];
				Если Значение <> 0 Тогда
					СтрокаОтражения 					= ТаблицаДляОтражениеВУчете_.Добавить();
					СтрокаОтражения.ВидНалога 			= ВидНалога;                     
					СтрокаОтражения.ДатаУплаты 			= РегламентированнаяОтчетность.ПолучитьДатуИзСтроки(ДатаУплаты);
					СтрокаОтражения.КБК 				= КБК;
					СтрокаОтражения.ДатаОтражения 		= РегламентированнаяОтчетность.ПолучитьДатуИзСтроки(ДатаОтражения);
					СтрокаОтражения.ДатаНачалаОтчета 	= РегламентированнаяОтчетность.ПолучитьДатуИзСтроки(ДатаНачалаОтчета);
					СтрокаОтражения.ДатаОкончанияОтчета = РегламентированнаяОтчетность.ПолучитьДатуИзСтроки(ДатаОкончанияОтчета);
					СтрокаОтражения.Организация 		= ЭтотОбъект.Налогоплательщик;
					СтрокаОтражения.СтруктурнаяЕдиница 	= ЭтотОбъект.Налогоплательщик;
					СтрокаОтражения.НалоговыйКомитет 	= ?(ЭтотОбъект.Налогоплательщик.УчетПоМестнымБюджетам, ЭтотОбъект.Налогоплательщик.МестныйБюджет, ЭтотОбъект.НалоговыйКомитет);	
					СтрокаОтражения.РННПлательщика 		= 0;
					СтрокаОтражения.Комментарий 		= КомментарийФормы;	
					СтрокаОтражения.Значение			= Значение;
					СтрокаОтражения.ИмяФормы			= ТекИмяФормы;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого ДобавленноеПриложение ИЗ ТаблицаДобавленныхПриложений_ Цикл
		
		КодФормыПриложения = ДобавленноеПриложение.КодФормы;
		КодФормыПриложенияБезПрефикса = Сред(КодФормыПриложения, 6);
		
		Если СтрНайти(ДобавленноеПриложение.КодФормы, "Форма700_02") <> 0 Тогда
			//Земельный налог
			//Строка 1 области макета отражения
			Ном = ОбластьМакета.Верх;
			
			ВидНалога = СокрП(МакетОтражениевУчете.Область(Ном, 1).Текст);
			Если ПустаяСтрока(ВидНалога) Тогда
				// Не считываем пустую строку в области, если она есть по первой колонке.			
				Прервать;
			КонецЕсли;
			
			ТекИмяФормы    		   	 = КодФормыПриложения;
			ИмяЛИста 			 	 = СокрП(МакетОтражениевУчете.Область(Ном, 14).Текст);
			
			НайденнаяСтрока = мСписокФормБезИерархии_.Строки.Найти(КодФормыПриложения, "КодФормы");
			ТаблицаДанных = НайденнаяСтрока.Значение;
			ФормаМногострочная = НайденнаяСтрока.Многострочность = 1;
			
			Если Не ФормаМногострочная Тогда
				Продолжить;
			КонецЕсли;	
			
			МногострочнаяСтруктура 	 = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, КодФормыПриложения);					
			МногострочнаяСтруктура.Свойство(ИмяЛиста, СтруктураГруппы);
			ТаблицаШапкаИПодвал 	 = СтруктураГруппы.ШапкаИПодвал;
			ТаблицаСтрок 			 = СтруктураГруппы.Строки;
			
			Постфикс = ПолучитьПостфикс(Ном, ОбластьМакета, ТаблицаШапкаИПодвал, КодФормыПриложенияБезПрефикса);
			
			ДатаУплаты      	   	 = СокрП(МакетОтражениевУчете.Область(Ном, 2).Текст);
			КБК                    	 = СокрП(МакетОтражениевУчете.Область(Ном, 3).Текст);
			ДатаОтражения          	 = СокрП(МакетОтражениевУчете.Область(Ном, 4).Текст);
			ДатаНачалаОтчета       	 = СокрП(МакетОтражениевУчете.Область(Ном, 5).Текст);
			ДатаОкончанияОтчета    	 = СокрП(МакетОтражениевУчете.Область(Ном, 6).Текст);  
			ИсточникЗначения	   	 = "Ф" + КодФормыПриложенияБезПрефикса + "_" + Постфикс;  		
			ИсточникДляОрганизации 	 = СокрП(МакетОтражениевУчете.Область(Ном, 9).Текст);  
			РННПлательщика		   	 = СокрП(МакетОтражениевУчете.Область(Ном, 10).Текст);  
			КомментарийФормы       	 = СокрП(МакетОтражениевУчете.Область(Ном, 11).Текст);
			ИсточникНалоговыйКомитет = "Ф" + КодФормыПриложенияБезПрефикса + "ИИН_БИНАкимата_03";  		
			ИсточникДанных 			 = СокрП(МакетОтражениевУчете.Область(Ном, 13).Текст); 
			
			МассивСтрок = ТаблицаШапкаИПодвал.НайтиСтроки(Новый Структура("ИмяОбласти", ИсточникЗначения));
			Если МассивСтрок.Количество() = 0 Тогда
				Значение = 0;
			Иначе
				Значение = МассивСтрок[0].Значение;	
			КонецЕсли;
			
			Если Значение <> 0 Тогда
				СтрокаОтражения 					= ТаблицаДляОтражениеВУчете_.Добавить();
				СтрокаОтражения.ВидНалога 			= ВидНалога;                     
				СтрокаОтражения.ДатаУплаты 			= РегламентированнаяОтчетность.ПолучитьДатуИзСтроки(ДатаУплаты);
				СтрокаОтражения.КБК 				= КБК;
				СтрокаОтражения.ДатаОтражения 		= РегламентированнаяОтчетность.ПолучитьДатуИзСтроки(ДатаОтражения);
				СтрокаОтражения.ДатаНачалаОтчета 	= РегламентированнаяОтчетность.ПолучитьДатуИзСтроки(ДатаНачалаОтчета);
				СтрокаОтражения.ДатаОкончанияОтчета = РегламентированнаяОтчетность.ПолучитьДатуИзСтроки(ДатаОкончанияОтчета);
				СтрокаОтражения.Организация 		= ЭтотОбъект.Налогоплательщик;
				СтрокаОтражения.СтруктурнаяЕдиница 	= ?(ЗначениеЗаполнено(ДобавленноеПриложение.СтруктурнаяЕдиница), ДобавленноеПриложение.СтруктурнаяЕдиница, ЭтотОбъект.Налогоплательщик);
				СтрокаОтражения.НалоговыйКомитет 	= ?(ЗначениеЗаполнено(ДобавленноеПриложение.МестныйБюджет), ДобавленноеПриложение.МестныйБюджет, ЭтотОбъект.Налогоплательщик.НалоговыйКомитет);
				СтрокаОтражения.РННПлательщика 		= 0;
				СтрокаОтражения.Комментарий 		= КомментарийФормы;	
				СтрокаОтражения.Значение			= Значение;
				СтрокаОтражения.ИмяФормы			= КодФормыПриложения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЭтотОбъект.ЗначениеВРеквизитФормы(ТаблицаДляОтражениеВУчете_, "ТаблицаДляОтражениеВУчете");
	
КонецПроцедуры	

//Используется для динамического формирования имени ячейки в макете отражения. Функция возвращает код ячейки без привязки к имени формы.
//
&НаСервере
Функция ПолучитьПостфикс(Ном, ОбластьМакета, ТаблицаШапкаИПодвал, ТекИмяФормыБезПрефикса)
	
	Если Ном = ОбластьМакета.Верх Тогда
		//Считываем строку макета для формы 700.02.
		Постфикс = "O3"
	ИначеЕсли Ном = ОбластьМакета.Верх + 1 Тогда
		//Считываем строку макета для формы 700.02.
		Постфикс = "O3"
	ИначеЕсли Ном = ОбластьМакета.Верх + 2 Тогда
		//Считываем строку макета для основной формы.
		Постфикс = "007"
	ИначеЕсли Ном = ОбластьМакета.Низ Тогда
		//Считываем строку макета для формы 700.01.
		Постфикс = "038"
	КонецЕсли;

	Возврат Постфикс;
	
КонецФункции

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСтраницы(Значение, Параметры) Экспорт
	
	Если НЕ Значение = Неопределено Тогда  
		
		ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
		Если ТекФорма = Неопределено Тогда
			ВсегоСтраниц = 1;
		Иначе
			ВсегоСтраниц = ТекФорма.ВсегоСтраниц;
		КонецЕсли;		
		
		Если Значение = 0 Тогда
			ТекущаяСтраница = 1;
		ИначеЕсли Значение > ВсегоСтраниц Тогда
			ТекущаяСтраница = ВсегоСтраниц;
		Иначе
			ТекущаяСтраница = Значение;				
		КонецЕсли;
		
		ПослеВводаСтраницыНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеВводаСтраницыНаСервере()
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтаФорма);
КонецПроцедуры

&НаСервере
Функция Форма700_00РассчитатьСуммуНалогаНаИмущество(ВыдаватьСообщения = Ложь)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("Дата0", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета - 1);
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Типовой.ИнвестицииВНедвижимость_);
	СписокСчетов.Добавить(ПланыСчетов.Типовой.ОсновныеСредства_);
	СписокСчетов.Добавить(ПланыСчетов.Типовой.БиологическиеАктивы);	
	СписокСчетов.Добавить(ПланыСчетов.Типовой.НематериальныеАктивы);
	Если ВключатьВРасчетСчет2933 Тогда
		СписокСчетов.Добавить(ПланыСчетов.Типовой.КапитальныйРемонтОС);
	КонецЕсли;
	Запрос.УстановитьПараметр("СписокСчетов",СписокСчетов);
	Запрос.УстановитьПараметр("СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);  	
	
	// поскольку начисление налога начинается со следующего месяца (ст.339 п.2), то оперируем значениям на начало месяца	
	
	ТекстЗапросаПоМесяцам = "";
	Для Счетчик = 1 по 13 Цикл
		Если Не ТекстЗапросаПоМесяцам = "" ТОгда
			ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам + "
			| ОБЪЕДИНИТЬ ВСЕ
			| ";
		КонецЕсли;
		ТекстЗапросаПоМесяцам =ТекстЗапросаПоМесяцам +  "
		|	ВЫБРАТЬ
		|	&Дата" + СокрЛП(Счетчик) + " как Период		                        
		| ";
		Запрос.УстановитьПараметр("Дата" + СокрЛП(Счетчик),  ДобавитьМесяц(НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),Счетчик-1));			
	КонецЦикла;	
	
	// Таблица "Объекты" - содержит объекты обложения налогом на имущество на начало каждого месяца. 
	//                     Получена на основе таблицы записей регистра сведений, соединенной с таблицей месяцев. 
	
	ТекстЗапросаПоОбъектамИмущественногоНалога = "ВЫБРАТЬ
	|	Объекты.ПериодГода КАК ПериодГода,
	|	Объекты.ОбъектНалогообложения КАК ОбъектНалогообложения,
	|	ОбъектыИмущественногоНалога.Организация КАК Организация
	|ИЗ
	|	(ВЫБРАТЬ
	|		Объекты.ПериодГода КАК ПериодГода,
	|		Объекты.ОбъектНалогообложения КАК ОбъектНалогообложения,	                                                    
	|		МАКСИМУМ(Объекты.ПериодЗаписи) КАК ПериодЗаписи
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Периоды.Период КАК ПериодГода,
	|			ОбъектыИмущественногоНалога.ОбъектНалогообложения КАК ОбъектНалогообложения,	                                                    
	|			ОбъектыИмущественногоНалога.Период КАК ПериодЗаписи
	|		ИЗ
	|			(" + ТекстЗапросаПоМесяцам + ") КАК Периоды
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыИмущественногоНалога КАК ОбъектыИмущественногоНалога
	|				ПО ОбъектыИмущественногоНалога.Период <= Периоды.Период	                                                    
	|					) КАК Объекты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Объекты.ОбъектНалогообложения,	                                                    
	|		Объекты.ПериодГода) КАК Объекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыИмущественногоНалога КАК ОбъектыИмущественногоНалога
	|		ПО ОбъектыИмущественногоНалога.Период = Объекты.ПериодЗаписи
	|			И (ОбъектыИмущественногоНалога.Налогоплательщик = &Налогоплательщик
	|				И ОбъектыИмущественногоНалога.СтруктурнаяЕдиница В (&СписокСтруктурныхЕдиниц))
	|			И Объекты.ОбъектНалогообложения = ОбъектыИмущественногоНалога.ОбъектНалогообложения
	|ГДЕ
	|	ОбъектыИмущественногоНалога.НачислятьНалог = ИСТИНА";
	
	Запрос.Текст = ТекстЗапросаПоОбъектамИмущественногоНалога;
	ИтоговыйТекстЗапросаПоОбъектамИмущественногоНалога =" 
	| ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Объекты.ПериодГода КАК ПериодГода,
	|		Объекты.ОбъектНалогообложения КАК ОбъектНалогообложения,
	|		Объекты.Организация КАК Организация
	|ИЗ 
	|	(" + ТекстЗапросаПоОбъектамИмущественногоНалога + ") КАК Объекты"; 			   
	
	Запрос.Текст = ИтоговыйТекстЗапросаПоОбъектамИмущественногоНалога;				   
	
	// Таблица остатки и обороты содержит остаточную стоимость ОС и НМА на начало каждого месяца
	//                     Получена на основе таблицы ОстаткиИОбороты регистра бухгалтерии, соединенной с таблицей месяцев. 	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Периоды.Период Как ПериодГода,	               
	|	СУММА(Объекты.ОстаточнаяСтоимостьОС) КАК ОстаточнаяСтоимостьОС,    // изменено
	|	СУММА(Объекты.ОстаточнаяСтоимостьНМА) КАК ОстаточнаяСтоимостьНМА   // изменено
	|Из   
	|( " + ТекстЗапросаПоМесяцам + ") КАК Периоды
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(ВЫБРАТЬ
	|	Объекты.ПериодГода КАК ПериодГода,
	|	Объекты.Организация КАК Организация,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ Объекты.ОбъектНалогообложения ССЫЛКА Справочник.НематериальныеАктивы
	|				ТОГДА ОстаткиИОбороты.СуммаКонечныйОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОстаточнаяСтоимостьОС,
	|	СУММА(ВЫБОР
	|			КОГДА Объекты.ОбъектНалогообложения ССЫЛКА Справочник.НематериальныеАктивы
	|				ТОГДА ОстаткиИОбороты.СуммаКонечныйОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОстаточнаяСтоимостьНМА
	|ИЗ
	|	(" + ИтоговыйТекстЗапросаПоОбъектамИмущественногоНалога + ") КАК Объекты
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ОстаткиИОбороты.ПериодГода КАК ПериодГода,
	|			СУММА(ОстаткиИОбороты.СуммаКонечныйОстаток) КАК СуммаКонечныйОстаток,
	|			ОстаткиИОбороты.Субконто1 КАК Субконто1
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ПериодыГода.ПериодГода КАК ПериодГода,
	|				ТиповойОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|				ТиповойОстаткиИОбороты.Субконто1 КАК Субконто1
	|			ИЗ
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(ТиповойОстаткиИОбороты.Период) КАК Период,
	|					Периоды.Период КАК ПериодГода,
	|					ТиповойОстаткиИОбороты.Субконто1 КАК Субконто1
	|				ИЗ
	|					(" + ТекстЗапросаПоМесяцам + ") КАК Периоды
	|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&Дата0, &Дата13, Месяц, ДвиженияИГраницыПериода, Счет В ИЕРАРХИИ (&СписокСчетов), , ) КАК ТиповойОстаткиИОбороты
	|						ПО Периоды.Период > ТиповойОстаткиИОбороты.Период
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ТиповойОстаткиИОбороты.Субконто1,
	|					Периоды.Период) КАК ПериодыГода
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&Дата0, &Дата13, Месяц, ДвиженияИГраницыПериода, Счет В ИЕРАРХИИ (&Списоксчетов), , ) КАК ТиповойОстаткиИОбороты
	|					ПО ПериодыГода.Период = ТиповойОстаткиИОбороты.Период
	|						И ПериодыГода.Субконто1 = ТиповойОстаткиИОбороты.Субконто1) КАК ОстаткиИОбороты
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ОстаткиИОбороты.Субконто1,
	|			ОстаткиИОбороты.ПериодГода) КАК ОстаткиИОбороты
	|		ПО Объекты.ПериодГода = ОстаткиИОбороты.ПериодГода
	|			И Объекты.ОбъектНалогообложения = ОстаткиИОбороты.Субконто1
	|
	|СГРУППИРОВАТЬ ПО
	|	Объекты.Организация,
	|	Объекты.ПериодГода ) Как Объекты
	|ПО 
	| Периоды.Период = Объекты.ПериодГода 
	|
	|СГРУППИРОВАТЬ ПО     // добавлено
	|    Периоды.Период   // добавлено
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодГода";    	
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() И ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru='Данные для расчета налога на имущество за отчетный период отсутствуют...'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
		Возврат 0;
	КонецЕсли;
	
	Выборка 	   = РезультатЗапроса.Выбрать();
	ИтогоСтоимость = 0;
	
	Пока Выборка.Следующий() Цикл  		    					
		ИтогоСтоимость = ИтогоСтоимость + Окр(?(Выборка.ОстаточнаяСтоимостьОС <> NULL, Выборка.ОстаточнаяСтоимостьОС, 0) + ?(Выборка.ОстаточнаяСтоимостьНМА <> NULL, Выборка.ОстаточнаяСтоимостьНМА, 0));
	КонецЦикла;			
	
	СреднегодоваяСтоимость = Окр(ИтогоСтоимость/13, 2);
	
	СтавкаНалога = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.НалогНаИмущество, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);		

	Если СтавкаНалога = NULL ИЛИ СтавкаНалога = Неопределено ИЛИ СтавкаНалога = 0 Тогда
	    СтавкаНалога = 0;
		ТекстСообщения = НСтр("ru='Не определена ставка налога на имущество!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
	КонецЕсли;

	СуммаНалога = Окр(СреднегодоваяСтоимость * СтавкаНалога/100,2);		
	
	Возврат СуммаНалога;	
	
КонецФункции

&НаКлиенте
Процедура Форма700ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Область.СодержитЗначение Тогда
		Значение = Область.Значение;
	Иначе
		Возврат;		
	КонецЕсли;
	
	Ячейка = Область.Имя;
	
	Если (Найти(Ячейка, "УчредительДоверительногоУправления") > 0)
		ИЛИ (Найти(Ячейка, "ЯвляющийсяДоверительнымУправляющим") > 0)
		ИЛИ (Найти(Ячейка, "ФизическоеЛицо") > 0)
		ИЛИ (Найти(Ячейка, "Недропользователь") > 0) 
		ИЛИ (Найти(Ячейка, "ЧастныйНотариус") > 0)  Тогда
		Форма700ПриИзмененииНаСервере(Ячейка, Значение); 	 					
	КонецЕсли;
	
	Если (Найти(Ячейка, "Недропользователь") > 0) Тогда
		Форма700ПриИзмененииНаСервере(Ячейка, Значение, Истина);
	КонецЕсли;
	
	Модифицированность = истина;
	
КонецПроцедуры


// 700.01

&НаСервере
// Процедура обновляет данные вычисляемых ячеек табличного 
// документа
//
Процедура Форма700_01ЗаполнитьАвто(Перезаполнить)
	
	Если Перезаполнить Тогда	
		ТекстСообщения = НСтр("ru = 'Расчет формы 700.01'");   		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Удаление добавленных форм
	ТаблицаДобавленныхПриложений_ = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений");
	УдаляемыеПриложения = ТаблицаДобавленныхПриложений_.НайтиСтроки(Новый Структура("КодИсходнойФормы", "Форма700_01"));
	УдаляемыеИндексы = Новый Массив;
	Для Каждого УдаляемоеПриложение Из УдаляемыеПриложения Цикл
		УдаляемыеИндексы.Добавить(ТаблицаДобавленныхПриложений_.Индекс(УдаляемоеПриложение));
	КонецЦикла;
	
	Индекс = УдаляемыеИндексы.Количество() - 1;
	Пока Индекс >= 0 Цикл
		УдаляемыйИндекс = УдаляемыеИндексы[Индекс];
		УдалитьПриложениеНаСервере(УдаляемыйИндекс);
		Индекс = Индекс -1;
	КонецЦикла;			
	
	// таблица, содержащая детали расчета для расшифровки приложения - мТаблицаРасшифровкиналогаНаТранспорт		
	мТаблицаРасшифровкиНалогаНаТранспорт = РеквизитФормыВЗначение("ТаблицаРасшифровкиНалогаНаТранспорт");
	мТаблицаРасшифровкиНалогаНаТранспорт = Форма700_01РассчитатьДанныеФормыСервер(Истина);
	мТаблицаРасшифровкиНалогаНаТранспорт.Колонки.Добавить("СтавкаНалога", 												,"Ставка налога");	
	мТаблицаРасшифровкиНалогаНаТранспорт.Колонки.Добавить("ГрафаОтчета", 												,"Графа отчета");	
	мТаблицаРасшифровкиНалогаНаТранспорт.Колонки.Добавить("СуммаНалога", 				Новый ОписаниеТипов("Число")	,"Сумма налога");
	мТаблицаРасшифровкиНалогаНаТранспорт.Колонки.Добавить("БазоваяСуммаНалога", 		Новый ОписаниеТипов("Число")	,"Базовая сумма налога");
	мТаблицаРасшифровкиНалогаНаТранспорт.Колонки.Добавить("ПоказательРасчетаИмя", 										,"Имя показателя расчета");
	мТаблицаРасшифровкиНалогаНаТранспорт.Колонки.Добавить("ПоказательРасчетаЗначение", 	Новый ОписаниеТипов("Число")	,"Показатель расчета");
	мТаблицаРасшифровкиНалогаНаТранспорт.Колонки.Добавить("ПревышениеОбъема", 			Новый ОписаниеТипов("Число")	,"Превышение объема двигателя");
	
	ВеличинаМРП = РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьПоследнее(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета).РазмерМРП; 
	
	СтруктураСтавокНалога = СформироватьСтуктуруСтавокНалогаНаТранспортНаСервере();
	
	СтруктураОбязательныхРеквизитов = Новый Структура("ЛегковойАвтомобиль, ГрузовойАвтомобиль, Автобус, Катер, ЛетательныйАппарат, Мотоцикл, СамоходнаяМашина, ЖелезнодорожныйТяговыйПодвижнойСостав, МотороВагонныйПодвижнойСостав",
	"ОбъемДвигателя", "Грузоподъемность", "КоличествоПосадочныхМест",
	"МощностьВЛошадиныхСилах", "МощностьВКиловаттах", "МощностьВКиловаттах", "ОбъектНалогообложения", "МощностьВКиловаттах", "МощностьВКиловаттах");		                            	 
	
	// Формирование дополнительных форм для МестныхБюджетов
	МестныеБюджеты = мТаблицаРасшифровкиНалогаНаТранспорт.Скопировать(, "МестныйБюджет");
	МестныеБюджеты.Свернуть("МестныйБюджет");
	ПараметрыОтбора  = Новый Структура();
		
	Если МестныеБюджеты.Найти(НалогоплательщикМестныйБюджет, "МестныйБюджет") = Неопределено
			И МестныеБюджеты.Количество() > 0 Тогда
		НалогоплательщикМестныйБюджет = МестныеБюджеты[0].МестныйБюджет;
	КонецЕсли;
		
	ДобавленныеПриложения = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений").Скопировать(Новый Структура("КодИсходнойФормы", "Форма700_01"));
	ПриложениеДобавлено = Ложь;
	Для Каждого МестныйБюджет Из МестныеБюджеты Цикл
		Если МестныйБюджет.МестныйБюджет = НалогоплательщикМестныйБюджет Тогда
			Продолжить;
		КонецЕсли;
		Если ДобавленныеПриложения.Найти(МестныйБюджет.МестныйБюджет, "МестныйБюджет") = Неопределено Тогда
			ДобавитьПриложениеБазовыеДанные("Форма700_01", "700.01", Новый Структура("МестныйБюджет", МестныйБюджет.МестныйБюджет));
			ПриложениеДобавлено = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ПриложениеДобавлено Тогда
		
		ДобавленныеПриложения = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений").Скопировать(Новый Структура("КодИсходнойФормы", "Форма700_01"));
		КодыФормДобавленныхПриложений = ДобавленныеПриложения.ВыгрузитьКолонку("КодФормы");
		
		Для Каждого КодФормыПриложения Из КодыФормДобавленныхПриложений Цикл
			ДобавитьПриложениеПоказателиПередачиДанных(КодФормыПриложения);
			ДобавитьПриложениеРеквизитыЭлементыФормыПриложения(КодФормыПриложения);
			ЗаполнитьПараметры(КодФормыПриложения);
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьПараметры(КодФормы);
	
	ДобавленныеПриложения = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений").Скопировать(Новый Структура("КодИсходнойФормы", "Форма700_01"));
	
	// Номер строки формы передаем равным 001, так как формат описан как для многострочной формы, а реализация - как у обычной
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "Стр2", "001", Ложь);
	
	НомерСтраницы = 1;
	Для Каждого ДобавленноеПриложение Из ДобавленныеПриложения Цикл
		
		НомерСтраницы = НомерСтраницы + 1;
		НомерСтраницыСтрока = Формат(НомерСтраницы, "ЧЦ=3; ЧДЦ=0; ЧВН=");
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ДобавленноеПриложение.КодФормы, "Стр2", НомерСтраницыСтрока, Ложь);
		
	КонецЦикла;
	
	Для Каждого СтрокаОтчета Из мТаблицаРасшифровкиНалогаНаТранспорт Цикл		
		
		КодФормы = "Форма700_01";
		КодФормыПредставление = "700.01";
			
		ДобавленноеПриложение = ДобавленныеПриложения.Найти(СтрокаОтчета.МестныйБюджет, "МестныйБюджет");
		Если ДобавленноеПриложение <> Неопределено Тогда
			КодФормы = ДобавленноеПриложение.КодФормы;
			КодФормыПредставление = КодФормыПредставление + "(" + ДобавленноеПриложение.Порядок + ")";
		КонецЕсли;
		
		ИмяФормыБезПрефикса = Сред(КодФормы, 6); // "700_01", "700_01_1", "700_01_2" и т.д.
		
		ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, КодФормы);
		
		Если НЕ ЗначениеЗаполнено(СтрокаОтчета.ВидТранспортногоСредства) Тогда
			
			ТекстСообщения = НСтр("ru='Для объекта %1 не указан вид транспортного средства. Расчет не произведен ...'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаОтчета.ПредставлениеОбъектаНалогообложения);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
			
			Продолжить;
		КонецЕсли;						
		
		КоличествоМесяцев = СтрокаОтчета.КоличествоМесяцев;
		
		Попытка
			МетаданныеЗначенияПеречисления = Метаданные.Перечисления["ВидыТранспортныхСредств"].ЗначенияПеречисления[Перечисления.ВидыТранспортныхСредств.Индекс(СтрокаОтчета.ВидТранспортногоСредства)];
			ВидТранспортногоСредстваСтрока = СокрЛП(МетаданныеЗначенияПеречисления.Имя);			
		Исключение
			ВидТранспортногоСредстваСтрока = "";			
		КонецПопытки;
		
		// Значение ключевого реквизита
		ИмяРеквизита = "";
		ЗначениеПоказателя = 0;
		Если СтруктураОбязательныхРеквизитов.Свойство(ВидТранспортногоСредстваСтрока, ИмяРеквизита) Тогда
			ЗначениеПоказателя = СтрокаОтчета[ИмяРеквизита];								
		КонецЕсли;	   		
		
		ИмяЯчейкиВидаТС = ПолучитьИмяЯчейкиВидаТСНаСервере(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, СтрокаОтчета.ВидТранспортногоСредства,
		ЗначениеПоказателя, СтрокаОтчета,СтрокаОтчета.ЕдиницаИзмеренияНалоговойБазы);
		
		ИмяЯчейкиВидаТС = СтрЗаменить(ИмяЯчейкиВидаТС, "700_01", ИмяФормыБезПрефикса);
		
		Если ВидТранспортногоСредстваСтрока = "Мотоцикл" Тогда
			// У мотоцикла мощность в лошадиных силах и мощность в киловаттах хранится в ресурсе МощностьВКиловаттах.
			Если СтрокаОтчета.ЕдиницаИзмеренияНалоговойБазы = "251" Тогда // Лошадиные силы
				ВидТранспортногоСредстваСтрока = "МотоциклЛошадиныеСилы";		
			ИначеЕсли СтрокаОтчета.ЕдиницаИзмеренияНалоговойБазы = "214" Тогда // Киловатты
				ВидТранспортногоСредстваСтрока = "МотоциклКиловатты";	
			Иначе
				ВызватьИсключение НСтр("ru = 'Некорректное значение ресурса ""Ед. изм. налоговой базы"".'");
			КонецЕсли;
		Иначе
			ВидТранспортногоСредстваСтрока = ВидТранспортногоСредстваСтрока;
		КонецЕсли;
		
		// Подраздел 6.1
		Подраздел_6_1 = "";
		Если ВидТранспортногоСредстваСтрока = "ЛегковойАвтомобиль" 
			И (ИмяЯчейкиВидаТС = "s_" + ИмяФормыБезПрефикса + "_022"
			ИЛИ ИмяЯчейкиВидаТС = "s_" + ИмяФормыБезПрефикса + "_023"
			ИЛИ ИмяЯчейкиВидаТС = "s_" + ИмяФормыБезПрефикса + "_024"
			ИЛИ ИмяЯчейкиВидаТС = "s_" + ИмяФормыБезПрефикса + "_025"
			ИЛИ ИмяЯчейкиВидаТС = "s_" + ИмяФормыБезПрефикса + "_026") Тогда
			ВидТранспортногоСредстваСтрока = "ЛегковойАвтомобиль_После31122013";
			Подраздел_6_1 = "_После31122013";
		КонецЕсли; 
		
		// для расшифровки		
		СтрокаОтчета.ПоказательРасчетаЗначение 	= ЗначениеПоказателя;
		Попытка
			// У мотоцикла мощность в лошадиных силах и мощность в киловаттах хранится в ресурсе МощностьВКиловаттах.
			Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) > Год('20150101') И ВидТранспортногоСредстваСтрока = "МотоциклЛошадиныеСилы" Тогда
				СтрокаОтчета.ПоказательРасчетаИмя = НСтр("ru = 'Мощность (лошадиные силы)'");
			ИначеЕсли Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) > Год('20150101') И ВидТранспортногоСредстваСтрока = "МотоциклКиловатты" Тогда
				СтрокаОтчета.ПоказательРасчетаИмя = НСтр("ru = 'Мощность (киловатты)'");
			Иначе
				СтрокаОтчета.ПоказательРасчетаИмя 	= Метаданные.РегистрыСведений.ПараметрыРасчетаТранспортногоНалога.Ресурсы[ИмяРеквизита].Синоним;
			КонецЕсли;
		Исключение			
			СтрокаОтчета.ПоказательРасчетаИмя 	= "";
		КонецПопытки;
		
		// меняем строку вида s_700_01_008 на 700.01.008
		СтрокаОтчета.ГрафаОтчета = СтрЗаменить(СтрЗаменить(СтрЗаменить(ИмяЯчейкиВидаТС, ИмяФормыБезПрефикса, "700_01"), "s_",""), "_", ".");
		
		// Базовая ставка Налога		
		ТаблицаСтавокНалога = Неопределено;				 
		Если СтруктураСтавокНалога.Свойство(ВидТранспортногоСредстваСтрока, ТаблицаСтавокНалога) Тогда				 	
			Если СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛетательныйАппарат 
				ИЛИ СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЖелезнодорожныйТяговыйПодвижнойСостав 
				ИЛИ СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.МотороВагонныйПодвижнойСостав Тогда
				
				СтрокаОтчета.СтавкаНалога = ПолучитьСтавкуНалогаНаТранспортДляОбъекта(ТаблицаСтавокНалога, ЗначениеПоказателя) * ЗначениеПоказателя;
			Иначе				
				СтрокаОтчета.СтавкаНалога = ПолучитьСтавкуНалогаНаТранспортДляОбъекта(ТаблицаСтавокНалога, ЗначениеПоказателя);
			КонецЕсли;			
		КонецЕсли;
		
		СуммаПревышения = 0;
		
		// Для легковых автомобилей рассчитываем размер превышения
		Если СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛегковойАвтомобиль Тогда							
			СуммаПревышения = ПолучитьРазмерПревышенияПоОбъему(СтрокаОтчета.ВидТранспортногоСредства, ЗначениеПоказателя, СтруктураСтавокНалога, Подраздел_6_1);
		КонецЕсли;
		
		СтрокаОтчета.ПревышениеОбъема = СуммаПревышения;
		
		// Для летательных аппаратов и ЖД - показываем суммарную мощность
		Если СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛетательныйАппарат ИЛИ  
			СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЖелезнодорожныйТяговыйПодвижнойСостав ИЛИ
			СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.МотороВагонныйПодвижнойСостав Тогда							
			
			// с накоплением
			Мощность = ЗначениеПоказателя + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяЯчейкиВидаТС + "_D");
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяЯчейкиВидаТС + "_D", Мощность, 	Ложь);
		КонецЕсли;     		
		
		// Расчетные Величины
		// Сумма налога (тенге)
		// указывается сумма налога, определяемого по легковым автомобилям как 
		// ЗначениеПоказателя * СтавкаНалога + СуммаПревышения*7 тенге, для остальных транспортных 
		// средств и летательных аппаратов как ЗначениеПоказателя * СтавкаНалога;   		
		
		Если СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛегковойАвтомобиль Тогда
			СуммаНалога = СтрокаОтчета.СтавкаНалога * ВеличинаМРП + СуммаПревышения * 7;
			
			СуммаПревышения = СуммаПревышения + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяЯчейкиВидаТС + "_D"); 
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяЯчейкиВидаТС + "_D", СуммаПревышения, 	Ложь);
			
		Иначе	
			СуммаНалога = СтрокаОтчета.СтавкаНалога * ВеличинаМРП;
		КонецЕсли;
		
		ПоправочныйКоэффициент = ПолучитьРазмерКорректировки(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, СтрокаОтчета.ВидТранспортногоСредства, СтрокаОтчета, СтруктураСтавокНалога);				 	 
		
		// Сумма налога с учетом поправочного коэффициента за налоговый период (тенге) 
		// (СуммаНалога х Поправочный)
		СуммаНалога = СуммаНалога * ПоправочныйКоэффициент;
		
		СтрокаОтчета.БазоваяСуммаНалога = СуммаНалога; // налог без учета количества месяцев
		
		// * 700.01.011 - Сумма налога за фактический период владения 
		//                (700.01.010 / 12 х 700.01.003) 		
		СтрокаОтчета.СуммаНалога = Окр(СуммаНалога /12* СтрокаОтчета.КоличествоМесяцев,0);
		
		// с накоплением		
		ОбщееКоличествоОС  		= 1 + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяЯчейкиВидаТС + "_B");
		ОбщаяСуммаНалога 		= СтрокаОтчета.СуммаНалога + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяЯчейкиВидаТС + "_C");
		ОбщееКоличествоМесяцев 	= КоличествоМесяцев + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяЯчейкиВидаТС + "_E"); 
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяЯчейкиВидаТС + "_B", ОбщееКоличествоОС,		Ложь);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяЯчейкиВидаТС + "_C", ОбщаяСуммаНалога, 	 	Ложь); 		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяЯчейкиВидаТС + "_E", ОбщееКоличествоМесяцев, Ложь);
		
		Если СтрокаОтчета.СтруктурнаяЕдиницаОшибка <> NULL Тогда
			ТекстСообщения = НСтр("ru = 'Объект <%1> отражен в форме %2. %3 - не установлен аппарат акима для форм налоговой отчетности.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаОтчета.ОбъектНалогообложения, КодФормыПредставление, СтрокаОтчета.СтруктурнаяЕдиницаОшибка);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаОтчета.СтруктурнаяЕдиницаОшибка);
		КонецЕсли;
		
	КонецЦикла;	 
	
	Для Каждого ДобавленноеПриложение Из ДобавленныеПриложения Цикл
		
		КодФормы = ДобавленноеПриложение.КодФормы;
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, ДобавленноеПриложение.КодФормы);
		РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, ДобавленноеПриложение.КодФормы, Перезаполнить);                	
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы);
		
	КонецЦикла;
	
	КодФормы = "Форма700_01";
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, КодФормы, Перезаполнить);                	
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы);
	
	ЗначениеВРеквизитФормы(мТаблицаРасшифровкиНалогаНаТранспорт, "ТаблицаРасшифровкиНалогаНаТранспорт");
	
	НалогоплательщикМестныйБюджет = Налогоплательщик.МестныйБюджет;
	
КонецПроцедуры // Форма700ЗаполнитьНалогНаИмущество()

&НаСервере
Процедура Форма700_01Расчет(Изменено = Ложь, ТекИмяФормы)
	
	Перем СтруктураГруппы;
	
	ИмяФормыБезПрефикса = Сред(ТекИмяФормы, 6); // "700_01", "700_01_1", "700_01_2" и т.д.
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ТекИмяФормы);
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Рассчитаем итоговую ячейку для передачи итогов в форму 700.00
	
	// Заполнение поля 700.01.035 
	s_700_01_Итого_C = 0;
	Для Счетчик = 1 по 33 Цикл
		s_700_01_Итого_C = s_700_01_Итого_C + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_" + ИмяФормыБезПрефикса + "_0" + Формат(Счетчик, "ЧЦ=2; ЧВН=") + "_C");
	КонецЦикла;	
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "s_" + ИмяФормыБезПрефикса + "_035", s_700_01_Итого_C, Истина);	
	
	// Заполнение поля 700.01.034
	s_700_01_036 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_" + ИмяФормыБезПрефикса + "_036");
	s_700_01_034 = s_700_01_Итого_C + s_700_01_036;
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "s_" + ИмяФормыБезПрефикса + "_034", s_700_01_034, Истина);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма700", "s_700_00_001", s_700_01_034, Истина);
	
	// Заполнение полей 700.01.038 и 700.01.039
	s_700_01_037 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_" + ИмяФормыБезПрефикса + "_037");
	
	s_700_01_038 = s_700_01_034 - s_700_01_037;
	Если Не s_700_01_038 > 0 Тогда 
		s_700_01_038 = 0;
	КонецЕсли;
	
	s_700_01_039 = s_700_01_037 - s_700_01_034;
	Если Не s_700_01_039 > 0 Тогда 
		s_700_01_039 = 0;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "s_" + ИмяФормыБезПрефикса + "_038", s_700_01_038, Истина);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "s_" + ИмяФормыБезПрефикса + "_039", s_700_01_039, Истина);
	
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаСервере
Функция Форма700_01РассчитатьДанныеФормыСервер(ВыдаватьСообщения = Ложь)
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресТаблицыМестныхБюджетов) Тогда
		АдресТаблицыМестныхБюджетов = ПолучитьМестныеБюджеты(мСписокСтруктурныхЕдиниц.ВыгрузитьЗначения());
	КонецЕсли;
	
	ТаблицаМестныхБюджетов = ПолучитьИзВременногоХранилища(АдресТаблицыМестныхБюджетов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаМестныхБюджетов", ТаблицаМестныхБюджетов);
	// Сначала базовая таблица периодов
	// поскольку начисление налога начинается с 1-го числа месяца приобретения (ст.348 п.2), 
	// то оперируем значениям на конец месяца
	// т.е. если объект присутствует на конец месяца, то за этот месяц необходимо начислять налог.
	ТекстЗапросаПоМесяцам = "";
	Для Счетчик = 1 по 12 Цикл
		Если Не ТекстЗапросаПоМесяцам = "" ТОгда
			ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам + "
			| ОБЪЕДИНИТЬ ВСЕ
			| ";
		КонецЕсли;
		ТекстЗапросаПоМесяцам =ТекстЗапросаПоМесяцам +  "
		|	ВЫБРАТЬ
		|	&Дата" + СокрЛП(Счетчик) + " КАК Период		                        
		| ";
		Запрос.УстановитьПараметр("Дата" + СокрЛП(Счетчик), КонецМесяца(ДобавитьМесяц(НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), Счетчик-1)));	
	КонецЦикла;	
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТаблицаМестныхБюджетов.ИИН_БИН КАК ИИН_БИН,
	|	ТаблицаМестныхБюджетов.ИдентификационныйКодЛичности КАК ИдентификационныйКодЛичности,
	|	ТаблицаМестныхБюджетов.МестныйБюджет КАК МестныйБюджет,
	|	ТаблицаМестныхБюджетов.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаМестныхБюджетов.МестныйБюджетНеУстановлен КАК МестныйБюджетНеУстановлен
	|ПОМЕСТИТЬ ВТ_МестныеБюджеты
	|ИЗ
	|	&ТаблицаМестныхБюджетов КАК ТаблицаМестныхБюджетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Объекты.ПериодГода КАК ПериодГода,
	|	Объекты.ОбъектНалогообложения КАК ОбъектНалогообложения,
	|	Объекты.Организация КАК Организация,
	|	МАКСИМУМ(Объекты.ПериодЗаписи) КАК ПериодЗаписи,
	|	Объекты.Налогоплательщик КАК Налогоплательщик
	|ПОМЕСТИТЬ ВТ_ОбъектыНалога
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК ПериодГода,
	|		ОбъектыТранспортногоНалога.ОбъектНалогообложения КАК ОбъектНалогообложения,
	|		ОбъектыТранспортногоНалога.Организация КАК Организация,
	|		ОбъектыТранспортногоНалога.Период КАК ПериодЗаписи,
	|		ОбъектыТранспортногоНалога.Регистратор КАК Регистратор,
	|		ОбъектыТранспортногоНалога.Налогоплательщик КАК Налогоплательщик
	|	ИЗ
	|		(" + ТекстЗапросаПоМесяцам + ") КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыТранспортногоНалога КАК ОбъектыТранспортногоНалога
	|			ПО (ОбъектыТранспортногоНалога.Период <= Периоды.Период)
	|				И (ОбъектыТранспортногоНалога.Налогоплательщик = &Налогоплательщик)) КАК Объекты
	|
	|СГРУППИРОВАТЬ ПО
	|	Объекты.ОбъектНалогообложения,
	|	Объекты.Организация,
	|	Объекты.Налогоплательщик,
	|	Объекты.ПериодГода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбщийЗапрос.ОбъектНалогообложения,
	|	ПРЕДСТАВЛЕНИЕ(ОбщийЗапрос.ОбъектНалогообложения) КАК ПредставлениеОбъектаНалогообложения,
	|	ОбщийЗапрос.Организация,
	|	ЕСТЬNULL(ОбщийЗапрос.КоличествоМесяцевИспользования, 0) КАК КоличествоМесяцев,
	|	ПараметрыРасчетаТранспортногоНалога.ВидТранспортногоСредства,
	|	ЕСТЬNULL(ПараметрыРасчетаТранспортногоНалога.Грузоподъемность, 0) КАК Грузоподъемность,
	|	ЕСТЬNULL(ПараметрыРасчетаТранспортногоНалога.ДатаВыпуска, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВыпуска,
	|	ЕСТЬNULL(ПараметрыРасчетаТранспортногоНалога.ДатаПриобретения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПриобретения,
	|	ЕСТЬNULL(ПараметрыРасчетаТранспортногоНалога.КоличествоПосадочныхМест, 0) КАК КоличествоПосадочныхМест,
	|	ЕСТЬNULL(ПараметрыРасчетаТранспортногоНалога.МощностьВКиловаттах, 0) КАК МощностьВКиловаттах,
	|	ЕСТЬNULL(ПараметрыРасчетаТранспортногоНалога.МощностьВЛошадиныхСилах, 0) КАК МощностьВЛошадиныхСилах,
	|	ПараметрыРасчетаТранспортногоНалога.НомерТранспортногоСредства,
	|	ЕСТЬNULL(ПараметрыРасчетаТранспортногоНалога.ОбъемДвигателя, 0) КАК ОбъемДвигателя,
	|	ЕСТЬNULL(ПараметрыРасчетаТранспортногоНалога.ПроизводствоСтранСНГ, ЛОЖЬ) КАК ПроизводствоСтранСНГ,
	|	ЕСТЬNULL(ПараметрыРасчетаТранспортногоНалога.ЭксплуатацияВРКдо1апреля1999г, ЛОЖЬ) КАК ЭксплуатацияВРКдо1апреля,
	|	ПараметрыРасчетаТранспортногоНалога.ДатаВвозаНаТерриториюРК КАК ДатаВвозаНаТерриториюРК,
	|	&ЕдиницаИзмеренияНалоговойБазы КАК ЕдиницаИзмеренияНалоговойБазы,
	|	ВЫБОР
	|	КОГДА ПараметрыРасчетаТранспортногоНалога.СтранаПроизводитель = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПроизведеноВРК,
	|	ОбщийЗапрос.МестныйБюджет КАК МестныйБюджет,
	|	ОбщийЗапрос.СтруктурнаяЕдиницаОшибка КАК СтруктурнаяЕдиницаОшибка
	|ИЗ
	|	(ВЫБРАТЬ
	|		Объекты.ОбъектНалогообложения КАК ОбъектНалогообложения,
	|		Объекты.Организация КАК Организация,
	|		СУММА(Объекты.КоличествоМесяцев) КАК КоличествоМесяцевИспользования,
	|		Объекты.Налогоплательщик КАК Налогоплательщик,
	|		Объекты.МестныйБюджет КАК МестныйБюджет,
	|		Объекты.СтруктурнаяЕдиницаОшибка КАК СтруктурнаяЕдиницаОшибка
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Объекты.ПериодГода КАК ПериодГода,
	|			Объекты.ОбъектНалогообложения КАК ОбъектНалогообложения,
	|			Объекты.Организация КАК Организация,
	|			Объекты.ПериодЗаписи КАК ПериодЗаписи,
	|			ВЫБОР
	|				КОГДА ОбъектыТранспортногоНалога.НачислятьНалог
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК КоличествоМесяцев,
	|			ОбъектыТранспортногоНалога.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|			Объекты.Налогоплательщик КАК Налогоплательщик,
	|			ЕСТЬNULL(МестныеБюджеты.МестныйБюджет, &ПустойМестныйБюджет) КАК МестныйБюджет,
	|			ВЫБОР
	|				КОГДА ЕСТЬNULL(МестныеБюджеты.МестныйБюджетНеУстановлен, Ложь)
	|					ТОГДА ОбъектыТранспортногоНалога.СтруктурнаяЕдиница
	|				ИНАЧЕ NULL
	|			КОНЕЦ КАК СтруктурнаяЕдиницаОшибка
	|		ИЗ
	|			ВТ_ОбъектыНалога КАК Объекты
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыТранспортногоНалога КАК ОбъектыТранспортногоНалога
	|				ПО Объекты.ПериодЗаписи = ОбъектыТранспортногоНалога.Период
	|					И Объекты.ОбъектНалогообложения = ОбъектыТранспортногоНалога.ОбъектНалогообложения
	|					И Объекты.Организация = ОбъектыТранспортногоНалога.Организация
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестныеБюджеты КАК МестныеБюджеты
	|				ПО ОбъектыТранспортногоНалога.СтруктурнаяЕдиница = МестныеБюджеты.СтруктурнаяЕдиница
	|		ГДЕ
	|			ОбъектыТранспортногоНалога.СтруктурнаяЕдиница В(&СписокСтруктурныхЕдиниц)) КАК Объекты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Объекты.ОбъектНалогообложения,
	|		Объекты.Организация,
	|		Объекты.Налогоплательщик,
	|		Объекты.МестныйБюджет,
	|		Объекты.СтруктурнаяЕдиницаОшибка) КАК ОбщийЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыРасчетаТранспортногоНалога КАК ПараметрыРасчетаТранспортногоНалога
	|		ПО ОбщийЗапрос.Организация = ПараметрыРасчетаТранспортногоНалога.Организация
	|			И ОбщийЗапрос.ОбъектНалогообложения = ПараметрыРасчетаТранспортногоНалога.ОсновноеСредство
	|ГДЕ
	|	ОбщийЗапрос.КоличествоМесяцевИспользования > 0";
	
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("ПустойМестныйБюджет", Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.Текст = ТекстЗапроса;
	
	Если Метаданные.РегистрыСведений.ПараметрыРасчетаТранспортногоНалога.Ресурсы.Найти("ЕдиницаИзмеренияНалоговойБазы") = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЕдиницаИзмеренияНалоговойБазы", """214""");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЕдиницаИзмеренияНалоговойБазы", "ЕстьNull(ПараметрыРасчетаТранспортногоНалога.ЕдиницаИзмеренияНалоговойБазы, """")");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() И ВыдаватьСообщения Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Данные для заполнения формы 700.01 за отчетный период отсутствуют...'"));	
	КонецЕсли;
	
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	
	Возврат ТаблицаРезультата;		 
	
КонецФункции // Форма700_01РассчитатьДанныеФормы()

&НаСервере
// Функция возвращает структуру данных на основе
// макета "СтавкиНалогаНаТранспорт"
//
Функция СформироватьСтуктуруСтавокНалогаНаТранспортНаСервере() Экспорт
	
	СтруктураСтавок = Новый Структура;			
	МакетСтавок = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("СтавкиНалогаНаТранспорт");
	
	СтруктураТаблицы = Новый ТаблицаЗначений;
	СтруктураТаблицы.Колонки.Добавить("НижнийПредел");
	СтруктураТаблицы.Колонки.Добавить("ВерхнийПредел");
	СтруктураТаблицы.Колонки.Добавить("БезОграничения");
	СтруктураТаблицы.Колонки.Добавить("СтавкаНалога");
	
	Область = МакетСтавок.Области["Строка2021"];
	Для Ном = Область.Верх По Область.Низ Цикл
		
		Наименование  = СокрЛП(МакетСтавок.Область(Ном, 1).Текст);
		НижнийПредел  = СокрЛП(МакетСтавок.Область(Ном, 2).Текст);
		ВерхнийПредел = СокрЛП(МакетСтавок.Область(Ном, 3).Текст);
		СтавкаНалога  = СокрЛП(МакетСтавок.Область(Ном, 4).Текст);
		
		Если Не СтруктураСтавок.Свойство(Наименование) Тогда			
			СтруктураСтавок.Вставить(Наименование, СтруктураТаблицы.Скопировать());
		КонецЕсли;	
		
		Строка = СтруктураСтавок[Наименование].Добавить();
		Строка.БезОграничения = ВерхнийПредел = "*";
		Строка.НижнийПредел   = ?(Не НижнийПредел = "*", Число(НижнийПредел), 0);
		Строка.ВерхнийПредел  = ?(НЕ ВерхнийПредел = "*",Число(ВерхнийПредел), 999999);
		Строка.СтавкаНалога	  = Число(СтавкаНалога);
		
	КонецЦикла;
	
	Возврат СтруктураСтавок;
	
КонецФункции

&НаСервереБезКонтекста
// Функция возвращает имя ячейки вида ТС формы 700.02,
// в зависимости от вида транспортных средств
//
Функция ПолучитьИмяЯчейкиВидаТСНаСервере(мДатаКонцаПериодаОтчета, ВидТС, Категория = 0, СтрокаОтчета = Неопределено, ЕдиницаИзмеренияНалоговойБазы = Неопределено)
	
	ИмяЯчейкиВидаТС = Неопределено;		 		 
	
	Если ВидТС = Перечисления.ВидыТранспортныхСредств.ГрузовойАвтомобиль Тогда		 
		Если Категория <= 1 Тогда
			ИмяЯчейкиВидаТС = "s_700_01_001"
		ИначеЕсли Категория <= 1.5 Тогда
			ИмяЯчейкиВидаТС = "s_700_01_002"  
		ИначеЕсли Категория <= 5 Тогда
			ИмяЯчейкиВидаТС = "s_700_01_003"
		Иначе		 
			ИмяЯчейкиВидаТС = "s_700_01_004"
		КонецЕсли; 		 
	ИначеЕсли ВидТС = Перечисления.ВидыТранспортныхСредств.СамоходнаяМашина Тогда		 
		ИмяЯчейкиВидаТС = "s_700_01_005";  	
	ИначеЕсли ВидТС = Перечисления.ВидыТранспортныхСредств.Автобус Тогда
		Если Категория <= 12 Тогда
			ИмяЯчейкиВидаТС = "s_700_01_006"
		ИначеЕсли Категория <= 25 Тогда
			ИмяЯчейкиВидаТС = "s_700_01_007"  		
		Иначе		 
			ИмяЯчейкиВидаТС = "s_700_01_008"
		КонецЕсли; 		 
	ИначеЕсли ВидТС = Перечисления.ВидыТранспортныхСредств.Мотоцикл   Тогда 		 
		Если ЕдиницаИзмеренияНалоговойБазы = "251" Тогда // Лошадиные силы
			ПределКатегории = 75;
		Иначе // Киловатты
			ПределКатегории = 55;
		КонецЕсли;
		
		Если Категория <= ПределКатегории Тогда
			ИмяЯчейкиВидаТС = "s_700_01_009"
		Иначе
			ИмяЯчейкиВидаТС = "s_700_01_010"  		
		КонецЕсли;	
	ИначеЕсли ВидТС = Перечисления.ВидыТранспортныхСредств.Катер Тогда
		Если Категория <= 160 Тогда
			ИмяЯчейкиВидаТС = "s_700_01_011"
		ИначеЕсли Категория <= 500 Тогда
			ИмяЯчейкиВидаТС = "s_700_01_012"	
		ИначеЕсли Категория <= 1000 Тогда
			ИмяЯчейкиВидаТС = "s_700_01_013"		
		Иначе
			ИмяЯчейкиВидаТС = "s_700_01_014"  		
		КонецЕсли;	                       	
	ИначеЕсли ВидТС = Перечисления.ВидыТранспортныхСредств.ЛегковойАвтомобиль Тогда
		
		Категория6_1 = (Категория >= 3000 И (СтрокаОтчета.ДатаВвозаНаТерриториюРК > Дата("20131231") ИЛИ (СтрокаОтчета.ДатаВыпуска > Дата("20131231") И СтрокаОтчета.ПроизведеноВРК)));
		
		Если Категория6_1 Тогда
			Если Категория <= 3200 Тогда
				ИмяЯчейкиВидаТС = "s_700_01_022"
			ИначеЕсли Категория <= 3500 Тогда
				ИмяЯчейкиВидаТС = "s_700_01_023"
			ИначеЕсли Категория <= 4000 Тогда
				ИмяЯчейкиВидаТС = "s_700_01_024"
			ИначеЕсли Категория <= 5000 Тогда
				ИмяЯчейкиВидаТС = "s_700_01_025"
			ИначеЕсли Категория > 5000 Тогда 
				ИмяЯчейкиВидаТС = "s_700_01_026"  		
			КонецЕсли;			
		Иначе			
			Если Категория <= 1100 Тогда
				ИмяЯчейкиВидаТС = "s_700_01_015"
			ИначеЕсли Категория <= 1500 Тогда
				ИмяЯчейкиВидаТС = "s_700_01_016"	
			ИначеЕсли Категория <= 2000 Тогда
				ИмяЯчейкиВидаТС = "s_700_01_017"
			ИначеЕсли Категория <= 2500 Тогда
				ИмяЯчейкиВидаТС = "s_700_01_018"	
			ИначеЕсли Категория <= 3000 Тогда
				ИмяЯчейкиВидаТС = "s_700_01_019"	
			ИначеЕсли Категория <= 4000 Тогда
				ИмяЯчейкиВидаТС = "s_700_01_020"	
			Иначе
				ИмяЯчейкиВидаТС = "s_700_01_021"  		
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидТС = Перечисления.ВидыТранспортныхСредств.ЛетательныйАппарат Тогда
		// 01 июля отчетного года
		ОтчетнаяДата = Дата(Год(мДатаКонцаПериодаОтчета), 07, 01) ;
		
		КоличествоЛет = РазностьДатВМесяцах(СтрокаОтчета.ДатаВыпуска, ОтчетнаяДата)/12;
		Если КоличествоЛет <=5 Тогда
			Если СтрокаОтчета.ЭксплуатацияВРКдо1апреля = Ложь Тогда		
				ИмяЯчейкиВидаТС = "s_700_01_027"  		
			Иначе		
				ИмяЯчейкиВидаТС = "s_700_01_030"  		
			КонецЕсли;	
		ИначеЕсли КоличествоЛет <=15 Тогда
			Если СтрокаОтчета.ЭксплуатацияВРКдо1апреля = Ложь Тогда		
				ИмяЯчейкиВидаТС = "s_700_01_028"  		
			Иначе		
				ИмяЯчейкиВидаТС = "s_700_01_031"  		
			КонецЕсли;				
		Иначе
			Если СтрокаОтчета.ЭксплуатацияВРКдо1апреля = Ложь Тогда		
				ИмяЯчейкиВидаТС = "s_700_01_029"  		
			Иначе		
				ИмяЯчейкиВидаТС = "s_700_01_032"  		
			КонецЕсли;	
		КонецЕсли;	
		
	ИначеЕсли ВидТС = Перечисления.ВидыТранспортныхСредств.ЖелезнодорожныйТяговыйПодвижнойСостав 
		ИЛИ ВидТС = Перечисления.ВидыТранспортныхСредств.МотороВагонныйПодвижнойСостав  Тогда
		ИмяЯчейкиВидаТС = "s_700_01_033"  		
	КонецЕсли;  	 
	
	Возврат ИмяЯчейкиВидаТС;
	
КонецФункции // ПолучитьИмяЯчейкиВидаТС()

&НаСервереБезКонтекста
// Возвращает полное количество месяцев между двумя датами
//
Функция РазностьДатВМесяцах(знач Дата1, Дата2)
	
	КоличествоЛет     = Год(Дата2) - Год(Дата1);
	КоличествоМесяцев = Месяц(Дата2) - Месяц(Дата1);	
	// корректировка для случая Дата1 = 15 марта, Дата2 = 10 апреля. месяц еще не истек
	Если НЕ Месяц(Дата2) = Месяц(Дата1) И
		День(Дата2) < День(Дата1)	ТОгда
		КоличествоМесяцев =  КоличествоМесяцев - 1;
	КонецЕсли;	                                              	
	РазностьВМесяцах = КоличествоЛет * 12 + КоличествоМесяцев;		
	
	Возврат РазностьВМесяцах;	                              	
	
КонецФункции 

&НаСервереБезКонтекста
// Функция определяет по таблице ставок ставку налога в 
// зависимости от значения показателя, находящегося в пределах
// нижнего и верхнего предела из таблицы ставок
//
Функция ПолучитьСтавкуНалогаНаТранспортДляОбъекта(ТаблицаСтавок, ЗначениеПоказателя = Неопределено, РассчитатьОтПревышения = 0, ОбъемПревышения = 0) 
	
	Если ЗначениеПоказателя = Неопределено Тогда
		ЗначениеПоказателя  = 0;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ТаблицаСтавок) = Тип("ТаблицаЗначений") Тогда	
		Возврат 0;
	КонецЕсли;	    
	ТаблицаСтавок.Сортировать("НижнийПредел");
	
	Для Каждого СтрокаСтавок из ТаблицаСтавок Цикл
		
		НижнийПредел   = СтрокаСтавок.НижнийПредел;
		ВерхнийПредел  = СтрокаСтавок.ВерхнийПредел;
		БезОграничения = СтрокаСтавок.БезОграничения;
		
		Если БезОграничения Тогда
			
			Если РассчитатьОтпревышения = 1 Тогда
				ОбъемПревышения = ЗначениеПоказателя - НижнийПредел;				
				Если ОбъемПревышения < 0 Тогда
					ОбъемПревышения = 0;
					Возврат 0;
				КонецЕсли;					
			КонецЕсли;
			
			Возврат СтрокаСтавок.СтавкаНалога;
			
		КонецЕсли;
		
		Если (ЗначениеПоказателя > НижнийПредел) И ((ЗначениеПоказателя <= ВерхнийПредел) ИЛИ БезОграничения) Тогда			
			
			Если РассчитатьОтпревышения = 1 Тогда
				ОбъемПревышения = ЗначениеПоказателя - НижнийПредел;				
			КонецЕсли;      
			
			Возврат СтрокаСтавок.СтавкаНалога;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаСервереБезКонтекста
//  Возвращает размер первышения по объему двигателя 
//  для легковых автомобилей.
//
Функция ПолучитьРазмерПревышенияПоОбъему(ВидТранспортногоСредства, ЗначениеХарактеристикиОбъекта, СтруктураСтавокНалога, Подраздел_6_1)
	
	Если ТипЗнч(ВидТранспортногоСредства) = Тип("ПеречислениеСсылка.ВидыТранспортныхСредств") 
		И ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛегковойАвтомобиль Тогда
		
		ТаблицаСтавокНалога = Неопределено;				 
		Если СтруктураСтавокНалога.Свойство("ПревышенияПоVЛегковых" + Подраздел_6_1, ТаблицаСтавокНалога) Тогда				 	
			ОбъемПревышения = 0;
			ПолучитьСтавкуНалогаНаТранспортДляОбъекта(ТаблицаСтавокНалога, ЗначениеХарактеристикиОбъекта, 1, ОбъемПревышения);
			Возврат ОбъемПревышения;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат 0;
	
КонецФункции

&НаСервереБезКонтекста
//  Возвращает размер корректировки налога для случаев, указанных в п. 3,4,5 и 7 статьи 347 НК РК
//
Функция ПолучитьРазмерКорректировки(мДатаКонцаПериодаОтчета, ВидТранспортногоСредства, ХарактеристикиОбъекта, СтруктураСтавокНалога)
	
	ПоправочныйКоэффициент = 1;
	Если НЕ ТипЗнч(ВидТранспортногоСредства) = Тип("ПеречислениеСсылка.ВидыТранспортныхСредств")
		ИЛИ НЕ ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛетательныйАппарат Тогда
		Возврат ПоправочныйКоэффициент;
	КонецЕсли;
	
	// 01 июля отчетного года
	ОтчетнаяДата = Дата(Год(мДатаКонцаПериодаОтчета), 07, 01) ;
	
	// - Коэффициенты (*К) - летательные аппараты
	Если ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛетательныйАппарат И ХарактеристикиОбъекта.ДатаВыпуска <> Дата(1,1,1) Тогда
		
		ТаблицаСтавокНалога = Неопределено;				  
		Если ХарактеристикиОбъекта.ЭксплуатацияВРКдо1апреля = Ложь Тогда
			Если СтруктураСтавокНалога.Свойство("КЛетательныеАппаратыПосле010499", ТаблицаСтавокНалога) Тогда				 	
				ПоправочныйКоэффициент = ПолучитьСтавкуНалогаНаТранспортДляОбъекта(ТаблицаСтавокНалога, РазностьДатВМесяцах(ХарактеристикиОбъекта.ДатаВыпуска, ОтчетнаяДата)/12) ;						
			КонецЕсли;					 											
		Иначе
			Если СтруктураСтавокНалога.Свойство("КЛетательныеАппаратыДо010499", ТаблицаСтавокНалога) Тогда				 	
				ПоправочныйКоэффициент = ПолучитьСтавкуНалогаНаТранспортДляОбъекта(ТаблицаСтавокНалога, РазностьДатВМесяцах(ХарактеристикиОбъекта.ДатаВыпуска, ОтчетнаяДата)/12) ;						
			КонецЕсли;					 											
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат ПоправочныйКоэффициент;	
	
КонецФункции

// 700.02

&НаСервере
// Процедура обновляет данные вычисляемых ячеек табличного 
// документа
//
Процедура Форма700_02ЗаполнитьАвто(Перезаполнить) 
	
	Если Перезаполнить Тогда	
		ТекстСообщения = НСтр("ru = 'Заполнение формы 700.02'");		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Удаление добавленных форм
	ТаблицаДобавленныхПриложений_ = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений");
	УдаляемыеПриложения = ТаблицаДобавленныхПриложений_.НайтиСтроки(Новый Структура("КодИсходнойФормы", "Форма700_02"));
	УдаляемыеИндексы = Новый Массив;
	Для Каждого УдаляемоеПриложение Из УдаляемыеПриложения Цикл
		УдаляемыеИндексы.Добавить(ТаблицаДобавленныхПриложений_.Индекс(УдаляемоеПриложение));
	КонецЦикла;
	
	Индекс = УдаляемыеИндексы.Количество() - 1;
	Пока Индекс >= 0 Цикл
		УдаляемыйИндекс = УдаляемыеИндексы[Индекс];
		УдалитьПриложениеНаСервере(УдаляемыйИндекс);
		Индекс = Индекс -1;
	КонецЦикла;			
	
	ТекущаяСтраница = 1;
	ВсегоСтраниц = 1;
	
	ТаблицаОтчета = Форма700_02РассчитатьДанныеФормы(Истина);	
	
	Если ТаблицаОтчета.Количество() <> 0 Тогда
		
		// Формирование дополнительных форм для МестныхБюджетов
		МестныеБюджеты = ТаблицаОтчета.Скопировать(, "МестныйБюджет");
		МестныеБюджеты.Свернуть("МестныйБюджет");
		ПараметрыОтбора  = Новый Структура();
		
		Если МестныеБюджеты.Найти(НалогоплательщикМестныйБюджет, "МестныйБюджет") = Неопределено
				И МестныеБюджеты.Количество() > 0 Тогда
			НалогоплательщикМестныйБюджет = МестныеБюджеты[0].МестныйБюджет;
		КонецЕсли;
		
		ДобавленныеПриложения = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений").Скопировать(Новый Структура("КодИсходнойФормы", "Форма700_02"));
		ПриложениеДобавлено = Ложь;
		Для Каждого МестныйБюджет Из МестныеБюджеты Цикл
			Если МестныйБюджет.МестныйБюджет = НалогоплательщикМестныйБюджет Тогда
				Продолжить;
			КонецЕсли;
			Если ДобавленныеПриложения.Найти(МестныйБюджет.МестныйБюджет, "МестныйБюджет") = Неопределено Тогда
				ДобавитьПриложениеБазовыеДанные("Форма700_02", "700.02", Новый Структура("МестныйБюджет", МестныйБюджет.МестныйБюджет));
				ПриложениеДобавлено = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ПриложениеДобавлено Тогда
			
			ДобавленныеПриложения = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений").Скопировать(Новый Структура("КодИсходнойФормы", "Форма700_02"));
			КодыФормДобавленныхПриложений = ДобавленныеПриложения.ВыгрузитьКолонку("КодФормы");
			
			Для Каждого КодФормыПриложения Из КодыФормДобавленныхПриложений Цикл
				ДобавитьПриложениеПоказателиПередачиДанных(КодФормыПриложения);
				ДобавитьПриложениеРеквизитыЭлементыФормыПриложения(КодФормыПриложения);
				ЗаполнитьПараметры(КодФормыПриложения);
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаполнитьПараметры("Форма700_02");
		
		ДобавленныеПриложения = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений").Скопировать(Новый Структура("КодИсходнойФормы", "Форма700_02"));
		
		Для Каждого СтрокаБюджеты Из МестныеБюджеты Цикл
			
			КодФормы = "Форма700_02";
			КодФормыПредставление = "700.02";
			
			ТаблицаОтчетаПоМестнымБюджетам = ТаблицаОтчета.НайтиСтроки(Новый Структура("МестныйБюджет", СтрокаБюджеты.МестныйБюджет));
			
			ДобавленноеПриложение = ДобавленныеПриложения.Найти(СтрокаБюджеты.МестныйБюджет, "МестныйБюджет");
			Если ДобавленноеПриложение <> Неопределено Тогда
				КодФормы = ДобавленноеПриложение.КодФормы;
				КодФормыПредставление = КодФормыПредставление + "(" + ДобавленноеПриложение.Порядок + ")";
			КонецЕсли;
			
			ИмяФормыБезПрефикса = Сред(КодФормы, 6); // "700_02", "700_02_1", "700_02_2" и т.д.
			
			СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, КодФормы);
			
			Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
				
				ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
				ТаблицаСтрокГруппы.Очистить();
				
			КонецЦикла;
			
			НомерСтроки = 4;
			
			Для Каждого СтрокаОтчета Из ТаблицаОтчетаПоМестнымБюджетам Цикл
				
				НомерСтроки = НомерСтроки + 1;
				
				// Предварительный расчет применяемой ставки
				БазоваяСтавкаНалога = СтрокаОтчета.БазоваяСтавкаНалога;
				ПроцентИзмененияБазовойСтавкиНалога = СтрокаОтчета.ПроцентИзмененияБазовойСтавкиНалога;
				КорректировкаБазовойСтавкиНалога    = СтрокаОтчета.КорректировкаБазовойСтавкиНалога;
				КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ = СтрокаОтчета.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ;
				КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов = СтрокаОтчета.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов;
				
				Ставка = (БазоваяСтавкаНалога + БазоваяСтавкаНалога * ?(ПроцентИзмененияБазовойСтавкиНалога > 100, 0, ПроцентИзмененияБазовойСтавкиНалога)/100);
				
				КорректировкаБазСтавкиПоРешениюМестныхОрганов = ?(КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов >= 100 ИЛИ КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов = 0, 1, КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов);					
				КорректировкаБазСтавкиНаТерриторияхСЭЗ = ?(КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ >= 10 ИЛИ КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ = 0, 1, КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ);
				КорректировкаБазСтавки = ?(КорректировкаБазовойСтавкиНалога >= 10 ИЛИ КорректировкаБазовойСтавкиНалога = 0, 1, КорректировкаБазовойСтавкиНалога);
				
				СтавкаСУчетомКорректировки = Окр(Ставка * КорректировкаБазСтавкиПоРешениюМестныхОрганов * КорректировкаБазСтавки * КорректировкаБазСтавкиНаТерриторияхСЭЗ, 3);
				
				КоличествоМесяцевИспользования = СтрокаОтчета.КоличествоМесяцевИспользования;
				
				Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
					
					ИмяГруппы = ЭлементСтруктуры.Ключ;
					ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
					
					// заполняем данные строки в форме отчета
					Элемент = ТаблицаСтрокГруппы.Добавить();   			 
					
					Если ИмяГруппы = "ЛистA" Тогда
						
						Элемент["Ф" + ИмяФормыБезПрефикса + "_A"] = Формат(НомерСтроки, мФорматНомераСтроки);
						
						Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаОтчета.КадастровыйНомер) Тогда
							Элемент["Ф" + ИмяФормыБезПрефикса + "_B"] = СтрокаОтчета.КадастровыйНомер;
							РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы, Элемент, "Ф" + ИмяФормыБезПрефикса + "_B", ?(СтрокаОтчета.ОбъектНалогообложения = NULL, Неопределено, СтрокаОтчета.ОбъектНалогообложения));
						Иначе
							
							ТекстСообщения = НСтр("ru='Для объекта налогообложения ""%1"" кадастровый номер ""%2"" содержит нечисловые символы.'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаОтчета.ОбъектНалогообложения, СтрокаОтчета.КадастровыйНомер);
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
							ТекстСообщения = НСтр("ru='Значение не помещено в форму!'");
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
							
						КонецЕсли;
						
						Элемент["Ф" + ИмяФормыБезПрефикса + "_D"] = СтрокаОтчета.ПлощадьОблагаемая; // СтрокаОтчета.ОбщаяПлощадь  СтрокаОтчета.ПлощадьНеОблагаемая
						
						ИмяЯчейкиЕдиницыИзмерения = ПолучитьИмяЯчейкиединицыИзмеренияЗемельногоУчастка(СтрокаОтчета.ЕдиницаИзмерения);
						ИмяЯчейкиЕдиницыИзмерения = СтрЗаменить(ИмяЯчейкиЕдиницыИзмерения, "700_02", ИмяФормыБезПрефикса);
						Элемент[ИмяЯчейкиЕдиницыИзмерения] = "X";
						
						КодКатегорииЗемель = "";
						Если ЗначениеЗаполнено(СтрокаОтчета.КатегорияЗемель) Тогда
							КодКатегорииЗемель = ПолучитьКодКатегорииЗемель(СтрокаОтчета.КатегорияЗемель);
						КонецЕсли;
						
						Если КодКатегорииЗемель <> "" Тогда
							Элемент["Ф" + ИмяФормыБезПрефикса + "_E"] = КодКатегорииЗемель;
						Иначе
							ТекстСообщения = НСтр("ru='Для объекта налогообложения ""%1"" некорректно заполнено поле ""Категория земель"".'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаОтчета.ОбъектНалогообложения);
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
							ТекстСообщения = НСтр("ru='Значение не помещено в форму!'");
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
						КонецЕсли;
						
						// Проверяем по формату поля  
						Если ПроцентИзмененияБазовойСтавкиНалога > 100 Тогда
							
							Элемент["Ф" + ИмяФормыБезПрефикса + "_F"] = 0;
							
							ТекстСообщения = НСтр("ru='Для объекта налогообложения ""%1"" процент изменения базовой ставки налога ""%2"" превышает допустимое значение.'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаОтчета.ОбъектНалогообложения, ПроцентИзмененияБазовойСтавкиНалога);
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
							ТекстСообщения = НСтр("ru='Значение не помещено в форму!'");
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
							
						Иначе
							Элемент["Ф" + ИмяФормыБезПрефикса + "_F"] = ПроцентИзмененияБазовойСтавкиНалога;
						КонецЕсли;
						
					ИначеЕсли ИмяГруппы = "ЛистB" Тогда
						
						Элемент["Ф" + ИмяФормыБезПрефикса + "_A2"] = Формат(НомерСтроки, мФорматНомераСтроки);
						
						Если КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов >= 100 Тогда
							
							Элемент["Ф" + ИмяФормыБезПрефикса + "_G"] = 0;
							
							ТекстСообщения = НСтр("ru='Для объекта налогообложения ""%1"" корректировка базовой ставки налога по решению местных органов ""%2"" превышает допустимое значение.'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаОтчета.ОбъектНалогообложения, КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов);
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
							ТекстСообщения = НСтр("ru='Значение не помещено в форму!'");
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
							
						Иначе
							Элемент["Ф" + ИмяФормыБезПрефикса + "_G"] = КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов;
						КонецЕсли;
						
						Если КорректировкаБазовойСтавкиНалога >= 10 Тогда
							
							Элемент["Ф" + ИмяФормыБезПрефикса + "_H"] = 0;
							
							ТекстСообщения = НСтр("ru='Для объекта налогообложения ""%1"" корректировка базовой ставки налога ""%2"" превышает допустимое значение.'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаОтчета.ОбъектНалогообложения, КорректировкаБазовойСтавкиНалога);
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
							ТекстСообщения = НСтр("ru='Значение не помещено в форму!'");
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
							
						Иначе
							Элемент["Ф" + ИмяФормыБезПрефикса + "_H"] = КорректировкаБазовойСтавкиНалога;
						КонецЕсли;
						
						Если КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ >= 10 Тогда
							
							Элемент["Ф" + ИмяФормыБезПрефикса + "_I"] = 0;
							
							ТекстСообщения = НСтр("ru='Для объекта налогообложения ""%1"" корректировка базовой ставки налога на территориях СЭЗ ""%2"" превышает допустимое значение.'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаОтчета.ОбъектНалогообложения, КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ);
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
							ТекстСообщения = НСтр("ru='Значение не помещено в форму!'");
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
							
						Иначе
							Элемент["Ф" + ИмяФормыБезПрефикса + "_I"] = КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ;
						КонецЕсли;
						
						Элемент["Ф" + ИмяФормыБезПрефикса + "_K"] = СтавкаСУчетомКорректировки;
						
						Элемент["Ф" + ИмяФормыБезПрефикса + "_L"] = ?(КоличествоМесяцевИспользования = 0, 1, КоличествоМесяцевИспользования);
						
					ИначеЕсли ИмяГруппы = "ЛистC" Тогда
						
						Элемент["Ф" + ИмяФормыБезПрефикса + "_A3"] = Формат(НомерСтроки, мФорматНомераСтроки);
						
						N = Окр(СтрокаОтчета.ПлощадьОблагаемая * СтавкаСУчетомКорректировки/12*?(КоличествоМесяцевИспользования = 0, 1, КоличествоМесяцевИспользования));
						
						Элемент["Ф" + ИмяФормыБезПрефикса + "_N"] = N;
						
					КонецЕсли;
					
				КонецЦикла;  // ЭлементСтруктуры
				
				Если СтрокаОтчета.СтруктурнаяЕдиницаОшибка <> NULL Тогда
					ТекстСообщения = НСтр("ru = 'Объект <%1> отражен в форме %2. %3 - не установлен аппарат акима для форм налоговой отчетности.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаОтчета.ОбъектНалогообложения, КодФормыПредставление, СтрокаОтчета.СтруктурнаяЕдиницаОшибка);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаОтчета.СтруктурнаяЕдиницаОшибка);
				КонецЕсли;
				
			КонецЦикла;  // СтрокаОтчета 
			
			ЗначениеВРеквизитФормы(СтруктураФормы.ЛистA.Строки, СтруктураФормы.ЛистA.ИмяРеквизитаТаблицыСтрокГруппы);
			ЗначениеВРеквизитФормы(СтруктураФормы.ЛистB.Строки, СтруктураФормы.ЛистB.ИмяРеквизитаТаблицыСтрокГруппы);
			ЗначениеВРеквизитФормы(СтруктураФормы.ЛистC.Строки, СтруктураФормы.ЛистC.ИмяРеквизитаТаблицыСтрокГруппы);
			
			РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, КодФормы, СтруктураФормы); 	 
			РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, КодФормы, Перезаполнить);
			
			РасчетИтоговыхСтрок_ЛистC(СтруктураФормы);
			
			РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);
			РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы);
			РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, КодФормы, СтруктураФормы);
			
		КонецЦикла;  // МестныйБюджет
		
		//показываем количество страниц, и текущую
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтаФорма);
		
		НалогоплательщикМестныйБюджет = Налогоплательщик.МестныйБюджет;
		
	КонецЕсли;	
	
КонецПроцедуры  // Форма700ЗаполнитьЗемельныйНалог()

&НаСервере
// Процедура расчитывает значения определенных граф по строке
// многострочной формы.
//
// Параметры:
//      Инд - номер строки многострочной формы
//      Колонка - имя графы (ячейки), из которой была вызвана процедура расчета
//
Процедура Форма700_02Расчет(знач Инд, знач Колонка, ТекИмяФормы)
	
	// Если ТекИнд = 0, значит процедура вызвана из ячеек шапки и подвала
	Перем СтруктураГруппы;
	
	ТекИмяФормыБезПрефикса = Сред(ТекИмяФормы, 6);
	
	Если ЗначениеЗаполнено(Инд)  Тогда
		Индекс = Инд-1;
	КонецЕсли;
	
	мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы);
	
	мМногострочнаяСтруктура.Свойство("ЛистA", СтруктураГруппы);
	ОбщиеЭлементыГруппыЛистA = СтруктураГруппы.ШапкаИПодвал; 
	ТаблицаСтрокГруппыЛистA = СтруктураГруппы.Строки;
	
	мМногострочнаяСтруктура.Свойство("ЛистB", СтруктураГруппы);
	ОбщиеЭлементыГруппыЛистB = СтруктураГруппы.ШапкаИПодвал; 
	ТаблицаСтрокГруппыЛистB = СтруктураГруппы.Строки;
	
	мМногострочнаяСтруктура.Свойство("ЛистC", СтруктураГруппы);
	ОбщиеЭлементыГруппыЛистC = СтруктураГруппы.ШапкаИПодвал; 
	ТаблицаСтрокГруппыЛистC = СтруктураГруппы.Строки;
	
	Ф700_02_D = "Ф" + ТекИмяФормыБезПрефикса + "_D";	
	Если Инд <> 0 Тогда
		D = ?(ТаблицаСтрокГруппыЛистA.Получить(Индекс)[Ф700_02_D] = Неопределено, 0, ТаблицаСтрокГруппыЛистA.Получить(Индекс)[Ф700_02_D]);	
	Иначе
		D = ?(ОбщиеЭлементыГруппыЛистA.Найти(Ф700_02_D, "ИмяОбласти") = Неопределено, 0, ОбщиеЭлементыГруппыЛистA.Найти(Ф700_02_D, "ИмяОбласти").Значение);	 
	КонецЕсли;
	
	Ф700_02_K = "Ф" + ТекИмяФормыБезПрефикса + "_K";	
	Ф700_02_L = "Ф" + ТекИмяФормыБезПрефикса + "_L";
	Ф700_02_N = "Ф" + ТекИмяФормыБезПрефикса + "_N";
	
	Если Инд <> 0 Тогда
		
		K = ?(ТаблицаСтрокГруппыЛистB.Получить(Индекс)[Ф700_02_K] = Неопределено, 0, ТаблицаСтрокГруппыЛистB.Получить(Индекс)[Ф700_02_K]);
		L = ?(ТаблицаСтрокГруппыЛистB.Получить(Индекс)[Ф700_02_L] = Неопределено, 0, ТаблицаСтрокГруппыЛистB.Получить(Индекс)[Ф700_02_L]);
		
		N = Окр(D * K / 12 * L);
		
		ТаблицаСтрокГруппыЛистC.Получить(Индекс)[Ф700_02_N] = N;
		
		ЭтотОбъект[ТекИмяФормы + "ПолеТабличногоДокументаЛистC"].Области[Ф700_02_N + "__" + Строка(Инд)].Значение = N;
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтотОбъект, "ЛистC", Ф700_02_N + "__" + Строка(Инд), N, Ложь, N);		
		
	КонецЕсли;
	
	РасчетИтоговыхСтрок_ЛистC(мМногострочнаяСтруктура);
	
	РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы, мМногострочнаяСтруктура);
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, ТекИмяФормы, Истина);
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаСервере
Процедура РасчетИтоговыхСтрок_ЛистC(мМногострочнаяСтруктура)
	
	Перем СтруктураГруппы;
	
	ТекущееИмяФормы = ЭтаФорма.КодФормы;
	
	ТекИмяФормыБезПрефикса = Сред(ТекущееИмяФормы, 6);
	Ф700_02_A2 = "Ф" + ТекИмяФормыБезПрефикса + "_A2";
	Ф700_02_A3 = "Ф" + ТекИмяФормыБезПрефикса + "_A3";
	Ф700_02_N  = "Ф" + ТекИмяФормыБезПрефикса + "_N";
	Ф700_02_O1 = "Ф" + ТекИмяФормыБезПрефикса + "_O1";
	Ф700_02_O2 = "Ф" + ТекИмяФормыБезПрефикса + "_O2";
	Ф700_02_O3 = "Ф" + ТекИмяФормыБезПрефикса + "_O3";
	Ф700_02_O4 = "Ф" + ТекИмяФормыБезПрефикса + "_O4";
	
	мСМК = ЭтаФорма.РеквизитФормыВЗначение("мСтруктураМногострочныхРазделов");	
	СтрокаФормы = мСМК.Строки.Найти(ТекущееИмяФормы, "КодФормы");	
	
	ИмяПанелиФормы = "Панель" + ТекущееИмяФормы;
	
	МассивЗначенийЛистB = Новый Массив();
	МассивЗначенийЛистC = Новый Массив();
	
	Для Каждого Страница Из ЭтаФорма.Элементы[ИмяПанелиФормы].ПодчиненныеЭлементы Цикл
		ИмяСтраницыБезПрефиксаПанели =  СтрЗаменить(Страница.Имя, ИмяПанелиФормы, ""); // ИмяСтраницыБезПерфиксаПанели 		
		ИмяГруппы = ИмяСтраницыБезПрефиксаПанели;
		
		СтруктураГруппы = СтрокаФормы.Строки.Найти(ИмяГруппы);				
		ОбщиеЭлементыГруппы = СтруктураГруппы.ОбщиеЭлементыГруппы;		
		ТаблицаСтрокГруппы  = ЭтаФорма.РеквизитФормыВЗначение(СтруктураГруппы.ИмяРеквизитаТаблицыСтрокГруппы);
		
		Если ИмяГруппы = "ЛистB" Тогда
			Для Каждого Строка Из ТаблицаСтрокГруппы Цикл
				ДанныеСтрокиЛистB = Новый Структура();
				ДанныеСтрокиЛистB.Вставить("НомерСтроки", Строка[Ф700_02_A2]);
				МассивЗначенийЛистB.Добавить(ДанныеСтрокиЛистB);
			КонецЦикла;
		КонецЕсли;
		
		Если ИмяГруппы = "ЛистC" Тогда
			Для Каждого Строка Из ТаблицаСтрокГруппы Цикл
				ДанныеСтрокиЛистC = Новый Структура();
				ДанныеСтрокиЛистC.Вставить("НомерСтроки", Строка[Ф700_02_A3]);
				ДанныеСтрокиЛистC.Вставить("СуммаНалога", Строка[Ф700_02_N]);
				МассивЗначенийЛистC.Добавить(ДанныеСтрокиЛистC);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаПоКБК = 0;
	Для Каждого СтрокаЛистB Из МассивЗначенийЛистB Цикл
		
		НомерСтрокиЛистB = СтрокаЛистB.НомерСтроки;
		
		Для Каждого СтрокаЛистC Из МассивЗначенийЛистC Цикл
			
			Если СтрокаЛистC.НомерСтроки = НомерСтрокиЛистB Тогда
				СуммаПоСтроке = ?(НЕ (СтрокаЛистC.СуммаНалога = Неопределено), СтрокаЛистC.СуммаНалога, 0);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		СуммаПоКБК = СуммаПоКБК + СуммаПоСтроке;
		
	КонецЦикла;
	
	мМногострочнаяСтруктура.Свойство("ЛистC", СтруктураГруппы);
	ОбщиеЭлементыГруппыЛистC = СтруктураГруппы.ШапкаИПодвал; 
	ТаблицаСтрокГруппыЛистC = СтруктураГруппы.Строки;
	
	O1 = СуммаПоКБК;
	
	ОбщиеЭлементыГруппыЛистC.Найти(Ф700_02_O1, "ИмяОбласти").Значение = O1;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтотОбъект, "ЛистC", Ф700_02_O1, O1, Ложь, O1);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма700", "s_700_00_002", O1, Истина);
	
	O2 = ?(ОбщиеЭлементыГруппыЛистC.Найти(Ф700_02_O2, "ИмяОбласти").Значение = Неопределено, 0, ОбщиеЭлементыГруппыЛистC.Найти(Ф700_02_O2, "ИмяОбласти").Значение);	 
	
	O3 = O1 - O2;
	Если Не O3 > 0 Тогда 
		O3 = 0;
	КонецЕсли;
	
	O4 = O2 - O1;
	Если Не O4 > 0 Тогда 
		O4 = 0;
	КонецЕсли;
	
	ОбщиеЭлементыГруппыЛистC.Найти(Ф700_02_O3, "ИмяОбласти").Значение = O3;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтотОбъект, "ЛистC", Ф700_02_O3, O3, Ложь, O3);
	
	ОбщиеЭлементыГруппыЛистC.Найти(Ф700_02_O4, "ИмяОбласти").Значение = O4;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтотОбъект, "ЛистC", Ф700_02_O4, O4, Ложь, O4);
	
КонецПроцедуры

&НаСервере
Функция Форма700_02РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь)
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресТаблицыМестныхБюджетов) Тогда
		АдресТаблицыМестныхБюджетов = ПолучитьМестныеБюджеты(мСписокСтруктурныхЕдиниц.ВыгрузитьЗначения());
	КонецЕсли;
	
	ТаблицаМестныхБюджетов = ПолучитьИзВременногоХранилища(АдресТаблицыМестныхБюджетов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаМестныхБюджетов", ТаблицаМестныхБюджетов);
	// Сначала базовая таблица периодов
	// поскольку начисление налога начинается со следующего месяца (ст.339 п.2), то оперируем значениям на начало месяца
	ТекстЗапросаПоМесяцам = "";
	Для Счетчик = 1 по 12 Цикл
		Если Не ТекстЗапросаПоМесяцам = "" ТОгда
			ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам + "
			| ОБЪЕДИНИТЬ ВСЕ
			| ";
		КонецЕсли;
		ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам +  "
		|	ВЫБРАТЬ
		|	&Дата" + СокрЛП(Счетчик) + " КАК Период		                        
		| ";
		Запрос.УстановитьПараметр("Дата" + СокрЛП(Счетчик), ДобавитьМесяц(НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),Счетчик-1));	
	КонецЦикла;	
	
	// строим итоговый запрос
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТаблицаМестныхБюджетов.ИИН_БИН КАК ИИН_БИН,
	|	ТаблицаМестныхБюджетов.ИдентификационныйКодЛичности КАК ИдентификационныйКодЛичности,
	|	ТаблицаМестныхБюджетов.МестныйБюджет КАК МестныйБюджет,
	|	ТаблицаМестныхБюджетов.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаМестныхБюджетов.МестныйБюджетНеУстановлен КАК МестныйБюджетНеУстановлен
	|ПОМЕСТИТЬ ВТ_МестныеБюджеты
	|ИЗ
	|	&ТаблицаМестныхБюджетов КАК ТаблицаМестныхБюджетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Объекты.ОбъектНалогообложения,
	|	Объекты.Организация,
	|	Объекты.КоличествоМесяцевИспользования,
	|	ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.БазоваяСтавкаНалога, 0) КАК БазоваяСтавкаНалога,
	|	ПараметрыРасчетаЗемельногоНалога.БаллБонитета,
	|	ПараметрыРасчетаЗемельногоНалога.ДатаВозникновенияПрава,
	|	ПараметрыРасчетаЗемельногоНалога.ДатаПрекращенияПрава,
	|	ПараметрыРасчетаЗемельногоНалога.ЕдиницаИзмерения,
	|	ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КадастровыйНомер,"""") КАК КадастровыйНомер,
	|	ПараметрыРасчетаЗемельногоНалога.КатегорияЗемель,
	|	КатегорииЗемель.КодПоКлассификатору КАК КатегорияЗемельКодПоКлассификатору,
	|	КатегорииЗемель.ВидЗемельногоНалога КАК КатегорияЗемельВидЗемельногоНалога,
	|	КатегорииЗемель.ВидЗемельногоНалога.КодБК КАК КБКЗемельногоНалога,
	|	ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалога, 0) КАК КорректировкаБазовойСтавкиНалога,
	|	ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ, 0) КАК КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ,
	|	ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов, 0) КАК КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов,
	|	ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.ПроцентИзмененияБазовойСтавкиНалога, 0) КАК ПроцентИзмененияБазовойСтавкиНалога,
	|	ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.МестонахождениеУчастка,"""") КАК МестонахождениеУчастка,
	|	ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.ПлощадьНеОблагаемая, 0) КАК ПлощадьНеОблагаемая,
	|	ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.ПлощадьОблагаемая, 0) КАК ПлощадьОблагаемая,
	|	ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.ПлощадьНеОблагаемая, 0) + ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.ПлощадьОблагаемая, 0) КАК ОбщаяПлощадь,
	|	Объекты.МестныйБюджет КАК МестныйБюджет,
	|	ВЫБОР
	|		КОГДА Объекты.МестныйБюджетНеУстановлен ТОГДА Объекты.СтруктурнаяЕдиница
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК СтруктурнаяЕдиницаОшибка
	|ИЗ
	|	(ВЫБРАТЬ
	|		Объекты.ОбъектНалогообложения КАК ОбъектНалогообложения,
	|		Объекты.Организация КАК Организация,
	|		Объекты.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		СУММА(ВЫБОР
	|				КОГДА Объекты.НачислятьНалог = ИСТИНА
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК КоличествоМесяцевИспользования,
	|		ЕСТЬNULL(МестныеБюджеты.МестныйБюджет, &ПустойМестныйБюджет) КАК МестныйБюджет,
	|		ЕСТЬNULL(МестныеБюджеты.МестныйБюджетНеУстановлен, Ложь) КАК МестныйБюджетНеУстановлен
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Объекты.ПериодГода КАК ПериодГода,
	|			Объекты.ОбъектНалогообложения КАК ОбъектНалогообложения,
	|			Объекты.Организация КАК Организация,
	|			Объекты.ПериодЗаписи КАК ПериодЗаписи,
	|			ОбъектыЗемельногоНалога.НачислятьНалог КАК НачислятьНалог,
	|			ОбъектыЗемельногоНалога.СтруктурнаяЕдиница
	|		ИЗ
	|			(ВЫБРАТЬ
	|				Объекты.ПериодГода КАК ПериодГода,
	|				Объекты.ОбъектНалогообложения КАК ОбъектНалогообложения,
	|				Объекты.Организация КАК Организация,
	|				МАКСИМУМ(Объекты.ПериодЗаписи) КАК ПериодЗаписи
	|			ИЗ
	|				(ВЫБРАТЬ
	|					Периоды.Период КАК ПериодГода,
	|					ОбъектыЗемельногоНалога.ОбъектНалогообложения КАК ОбъектНалогообложения,
	|					ОбъектыЗемельногоНалога.Организация КАК Организация,
	|					ОбъектыЗемельногоНалога.Период КАК ПериодЗаписи
	|				ИЗ
	|					(" + ТекстЗапросаПоМесяцам + ") КАК Периоды
	|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыЗемельногоНалога КАК ОбъектыЗемельногоНалога
	|						ПО НАЧАЛОПЕРИОДА(ОбъектыЗемельногоНалога.Период,МЕСЯЦ) <= Периоды.Период
	|							И (ОбъектыЗемельногоНалога.Налогоплательщик = &Налогоплательщик)) КАК Объекты
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Объекты.ОбъектНалогообложения,
	|				Объекты.Организация,
	|				Объекты.ПериодГода) КАК Объекты
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыЗемельногоНалога КАК ОбъектыЗемельногоНалога
	|				ПО Объекты.ОбъектНалогообложения = ОбъектыЗемельногоНалога.ОбъектНалогообложения
	|					И ОбъектыЗемельногоНалога.Налогоплательщик = &Налогоплательщик
	|					И Объекты.ПериодЗаписи = ОбъектыЗемельногоНалога.Период) КАК Объекты
	
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестныеБюджеты КАК МестныеБюджеты
	|				ПО Объекты.СтруктурнаяЕдиница = МестныеБюджеты.СтруктурнаяЕдиница
	
	|				   
	|				ГДЕ Объекты.СтруктурнаяЕдиница В (&СписокСтруктурныхЕдиниц)	
	|	СГРУППИРОВАТЬ ПО
	|		Объекты.ОбъектНалогообложения,
	|		Объекты.Организация,
	|		Объекты.СтруктурнаяЕдиница,
	|		ЕСТЬNULL(МестныеБюджеты.МестныйБюджет, &ПустойМестныйБюджет),
	|		ЕСТЬNULL(МестныеБюджеты.МестныйБюджетНеУстановлен, Ложь)) КАК Объекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыРасчетаЗемельногоНалога КАК ПараметрыРасчетаЗемельногоНалога
	|		ПО Объекты.ОбъектНалогообложения = ПараметрыРасчетаЗемельногоНалога.ОсновноеСредство
	|			  И Объекты.Организация 	 = ПараметрыРасчетаЗемельногоНалога.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КатегорииЗемель КАК КатегорииЗемель
	|		ПО ПараметрыРасчетаЗемельногоНалога.КатегорияЗемель = КатегорииЗемель.Ссылка
	|ГДЕ
	|	Объекты.КоличествоМесяцевИспользования > 0";
	
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("ПустойМестныйБюджет", Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() и ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru='Данные для заполнения формы 700.02 за отчетный период отсутствуют...'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
	КонецЕсли;
	
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	
	Возврат ТаблицаРезультата;		 
	
КонецФункции // Форма700_02РассчитатьДанныеФормы()

&НаКлиенте
Процедура Форма700_02ПолеТабличногоДокументаЛистAВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Элемент.ТекущаяОбласть.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "ЛистA");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);	
	
	Если (Найти(Ячейка, "700_02") = 0) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;	
	
	НачЗначение = Элемент.ТекущаяОбласть.Значение;
	ЗначениеРасшифровки = Элемент.ТекущаяОбласть.Расшифровка;
	
	ТекИмяФормы 	= Элементы.РазделыОтчета.ТекущиеДанные.КодФормы;
	КодФормыБезПрефикса = СтрЗаменить(ТекИмяФормы, "Форма", "");
	
	ИмяЛиста 		= "ЛистA";
	ПризнакРасчета 	= Ложь;
	
	ПараметрыВыбора = Новый Структура("КодФормы, ИмяЛиста, ИмяЯчейки, ЭлементВыбора, ПризнакРасчета, НачЗначение", ТекИмяФормы, ИмяЛиста, Ячейка, "Показатели", Истина, НачЗначение);
	ОписаниеОповещения = Новый ОписаниеОповещения("Форма700_02ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
	
	МассивЯчеек = Новый Массив;
	
	Если (Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_C_G__") > 0) Тогда
		МассивЯчеек.Добавить("Ф" + КодФормыБезПрефикса + "_C_M__" + СтрЗаменить(Ячейка, "Ф" + КодФормыБезПрефикса + "_C_G__", ""));
		Форма700_02ВыборНаСервере(Ячейка,МассивЯчеек, ТекИмяФормы);
	ИначеЕсли (Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_C_M__") > 0) Тогда
		МассивЯчеек.Добавить("Ф" + КодФормыБезПрефикса + "_C_G__" + СтрЗаменить(Ячейка, "Ф" + КодФормыБезПрефикса + "_C_M__", ""));
		Форма700_02ВыборНаСервере(Ячейка,МассивЯчеек, ТекИмяФормы);
	КонецЕсли;
	
	Если Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "ИИН_БИНГоловного_01") > 0 Тогда
		
		ЯчейкиДляОбновления = Новый Массив;
		ЯчейкиДляОбновления.Добавить(Новый Структура("ИмяЛиста, ИмяЯчейки", "ЛистB", "Ф" + КодФормыБезПрефикса + "ИИН_БИНГоловного_02"));
		ЯчейкиДляОбновления.Добавить(Новый Структура("ИмяЛиста, ИмяЯчейки", "ЛистC", "Ф" + КодФормыБезПрефикса + "ИИН_БИНГоловного_03"));
		
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ЯчейкиДляОбновления", ЯчейкиДляОбновления);
		
		ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, НСтр("ru='Введите БИН'"), 12, 0);
		
	КонецЕсли;
	
	Если Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "ИИН_БИНАкимата_01") > 0 Тогда 
		
		ЯчейкиДляОбновления = Новый Массив;
		ЯчейкиДляОбновления.Добавить(Новый Структура("ИмяЛиста, ИмяЯчейки", "ЛистB", "Ф" + КодФормыБезПрефикса + "ИИН_БИНАкимата_02"));
		ЯчейкиДляОбновления.Добавить(Новый Структура("ИмяЛиста, ИмяЯчейки", "ЛистC", "Ф" + КодФормыБезПрефикса + "ИИН_БИНАкимата_03"));
		
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ЯчейкиДляОбновления", ЯчейкиДляОбновления);
		
		ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, НСтр("ru='Введите БИН аппарата акима'"), 12, 0);
		
	КонецЕсли;
	
	
	Если Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_B__") > 0 Тогда 
		
		Если Не ЗначениеЗаполнено(Область.Расшифровка) ИЛИ ТипЗнч(Область.Расшифровка) = Тип("Строка") Тогда
			
			ПоказатьВводСтроки(ОписаниеОповещения, НачЗначение, НСтр("ru='Введите кадастровый номер'"));
			
		ИначеЕсли ТипЗнч(Область.Расшифровка) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			
			СтандартнаяОбработка = Истина;
			
		КонецЕсли;                                         
		
	ИначеЕсли (Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_D__") > 0) Тогда                                                           			
		
		ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, НСтр("ru='Введите общую площадь земельного участка'"), 11, 2);
		
	ИначеЕсли (Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_E__") > 0) Тогда                                                           			
		
		Ячейка = Область.Имя;
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ ЭтоВнешнийОтчет() Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
			ПараметрыФормы.Вставить("ИмяМакета"			  , "Форма700КодыКатегорийЗемель");
			ПараметрыФормы.Вставить("ИмяСекции"			  ,	"Строки");
			ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
			ПараметрыФормы.Вставить("ИмяОтчета"           , "РегламентированныйОтчет700Форма");
			ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(Область.Значение), Неопределено, СокрЛП(Область.Значение)));
			
			ПараметрыВыбора = Новый Структура("КодФормы, ИмяЛиста, ИмяЯчейки, ЭлементВыбора, ПризнакРасчета, НачЗначение", "ОбщаяФорма.ФормаВыбораИзКлассификатора", ИмяЛиста, Ячейка, "Показатели", Истина, НачЗначение);
			ОписаниеОповещения = Новый ОписаниеОповещения("Форма700_02ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
			
			ОткрытьФорму("ОбщаяФорма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина,,, ОписаниеОповещения);
			
		Иначе
			
			СписокВыбора = Новый СписокЗначений;
			СписокВыбора.Добавить("A", НСтр("ru = 'A. Земли населенных пунктов'"));
			СписокВыбора.Добавить("B", НСтр("ru = 'B. Земли сельскохозяйственного назначения'"));
			СписокВыбора.Добавить("C", НСтр("ru = 'C. Земли промышленности, транспорта, связи, обороны и иного несельскохозяйственного назначения'"));
			СписокВыбора.Добавить("D", НСтр("ru = 'D. Земли лесного фонда'"));
			СписокВыбора.Добавить("E", НСтр("ru = 'E. Земли водного фонда'"));
			СписокВыбора.Добавить("F", НСтр("ru = 'F. Земли особо охраняемых природных территорий, земли оздоровительного, рекреационного и историко-культурного назначения'"));
			
			ПараметрыВыбора = Новый Структура("КодФормы, ИмяЛиста, ИмяЯчейки, ЭлементВыбора, ПризнакРасчета, НачЗначение", ТекИмяФормы, ИмяЛиста, Ячейка, "Показатели", Истина, НачЗначение);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("Форма700_02ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
			ЗаголовокВыбора = НСтр("ru = 'Выберите код категории земель:'");
			СписокВыбора.ПоказатьВыборЭлемента(ОповещениеОЗакрытии, ЗаголовокВыбора);
			
		КонецЕсли;
		
		
	ИначеЕсли (Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_F__") > 0) Тогда                                                           			
		
		ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, НСтр("ru='Введите % коррректировки ставки налога'"), 4, 2);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоВнешнийОтчет()
	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФормы, ".")[0] = "ВнешнийОтчет";
КонецФункции

&НаКлиенте
Процедура Форма700_02ПолеТабличногоДокументаЛистBВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Элемент.ТекущаяОбласть.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "ЛистB");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);	
	
	Если (Найти(Ячейка, "700_02") = 0) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;	
	
	НачЗначение = Элемент.ТекущаяОбласть.Значение;
	ЗначениеРасшифровки = Элемент.ТекущаяОбласть.Расшифровка;
	
	ТекИмяФормы 	= Элементы.РазделыОтчета.ТекущиеДанные.КодФормы;
	КодФормыБезПрефикса = СтрЗаменить(ТекИмяФормы, "Форма", "");
	
	ИмяЛиста 		= "ЛистB";
	ПризнакРасчета 	= Ложь;
	
	ПараметрыВыбора = Новый Структура("КодФормы, ИмяЛиста, ИмяЯчейки, ЭлементВыбора, ПризнакРасчета, НачЗначение", ТекИмяФормы, ИмяЛиста, Ячейка, "Показатели", Истина, НачЗначение);
	ОписаниеОповещения = Новый ОписаниеОповещения("Форма700_02ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
	
	Если Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "ИИН_БИНГоловного_02") > 0 Тогда 
		
		ЯчейкиДляОбновления = Новый Массив;
		ЯчейкиДляОбновления.Добавить(Новый Структура("ИмяЛиста, ИмяЯчейки", "ЛистA", "Ф" + КодФормыБезПрефикса + "ИИН_БИНГоловного_01"));
		ЯчейкиДляОбновления.Добавить(Новый Структура("ИмяЛиста, ИмяЯчейки", "ЛистC", "Ф" + КодФормыБезПрефикса + "ИИН_БИНГоловного_03"));
		
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ЯчейкиДляОбновления", ЯчейкиДляОбновления);
		
		ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, НСтр("ru='Введите БИН'"), 12, 0);
		
	КонецЕсли;
	
	Если Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "ИИН_БИНАкимата_02") > 0 Тогда 
		
		ЯчейкиДляОбновления = Новый Массив;
		ЯчейкиДляОбновления.Добавить(Новый Структура("ИмяЛиста, ИмяЯчейки", "ЛистA", "Ф" + КодФормыБезПрефикса + "ИИН_БИНАкимата_01"));
		ЯчейкиДляОбновления.Добавить(Новый Структура("ИмяЛиста, ИмяЯчейки", "ЛистC", "Ф" + КодФормыБезПрефикса + "ИИН_БИНАкимата_03"));
		
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ЯчейкиДляОбновления", ЯчейкиДляОбновления);
		
		ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, НСтр("ru='Введите БИН аппарата акима'"), 12, 0);
		
	КонецЕсли;
	
	Если Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_G__") > 0 Тогда                                                           			
		
		ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, НСтр("ru='Введите коэффициент к базовым ставкам (до 10)'"), 6, 3);
		
	ИначеЕсли Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_H__") > 0 Тогда                                                           			
		
		ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, НСтр("ru='Введите коэффициент для плательщиков, указанных в ст. 510 НК'"), 3, 2);
		
	ИначеЕсли Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_I__") > 0 Тогда                                                           			
		
		ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, НСтр("ru='Введите коэффициент для плательщиков, осуществляющих деят-ть на тер-ях СЭЗ'"), 3, 2);
		
	ИначеЕсли Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_J__") > 0 Тогда                                                           			
		
		ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, НСтр("ru='Коэффициент к базовым ставкам налога (10)'"), 6, 3);
		
	ИначеЕсли Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_K__") > 0 Тогда                                                           			
		
		ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, НСтр("ru='Введите ставку налога с учетом корректировки'"), 7, 3);
		
	ИначеЕсли Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_L__") > 0 Тогда                                                           			
		
		ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, НСтр("ru='Введите количество месяцев'"), 2, 0);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Форма700_02ПолеТабличногоДокументаЛистCВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Элемент.ТекущаяОбласть.Имя;
	
	Если (Найти(Ячейка, "700_02") = 0) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;	
	
	НачЗначение = Элемент.ТекущаяОбласть.Значение;
	ЗначениеРасшифровки = Элемент.ТекущаяОбласть.Расшифровка;                      
	
	ТекИмяФормы 	= Элементы.РазделыОтчета.ТекущиеДанные.КодФормы;
	КодФормыБезПрефикса = СтрЗаменить(ТекИмяФормы, "Форма", "");
	
	ИмяЛиста 		= "ЛистC";
	ПризнакРасчета 	= Ложь;
	
	ПараметрыВыбора = Новый Структура("КодФормы, ИмяЛиста, ИмяЯчейки, ЭлементВыбора, ПризнакРасчета, НачЗначение", ТекИмяФормы, ИмяЛиста, Ячейка, "Показатели", Истина, НачЗначение);
	ОписаниеОповещения = Новый ОписаниеОповещения("Форма700_02ОбработкаВыбораЗначений", ЭтотОбъект, ПараметрыВыбора);
	
	Если Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "ИИН_БИНГоловного_03") > 0 Тогда 
		
		ЯчейкиДляОбновления = Новый Массив;
		ЯчейкиДляОбновления.Добавить(Новый Структура("ИмяЛиста, ИмяЯчейки", "ЛистA", "Ф" + КодФормыБезПрефикса + "ИИН_БИНГоловного_01"));
		ЯчейкиДляОбновления.Добавить(Новый Структура("ИмяЛиста, ИмяЯчейки", "ЛистB", "Ф" + КодФормыБезПрефикса + "ИИН_БИНГоловного_02"));
		
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ЯчейкиДляОбновления", ЯчейкиДляОбновления);
		
		ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, НСтр("ru='Введите БИН'"), 12, 0);
		
	КонецЕсли;
	
	Если Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "ИИН_БИНАкимата_03") > 0 Тогда 
		
		ЯчейкиДляОбновления = Новый Массив;
		ЯчейкиДляОбновления.Добавить(Новый Структура("ИмяЛиста, ИмяЯчейки", "ЛистA", "Ф" + КодФормыБезПрефикса + "ИИН_БИНАкимата_01"));
		ЯчейкиДляОбновления.Добавить(Новый Структура("ИмяЛиста, ИмяЯчейки", "ЛистB", "Ф" + КодФормыБезПрефикса + "ИИН_БИНАкимата_02"));
		
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ЯчейкиДляОбновления", ЯчейкиДляОбновления);
		
		ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, НСтр("ru='Введите БИН аппарата акима'"), 12, 0);
		
	КонецЕсли;
	
	Если Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_M__") > 0 Тогда                                                           			
		
		ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, НСтр("ru='Введите сумму инвестиционных налоговых преференций'"), 12, 0);
		
	КонецЕсли;
	
	Если Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_N__") > 0 Тогда                                                           			
		
		ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, НСтр("ru='Введите сумму исчисленного земельного налога'"), 12, 0);
		
	КонецЕсли;
	
	Если Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_O2") > 0 Тогда                                                           			
		
		ПоказатьВводЧисла(ОписаниеОповещения, НачЗначение, НСтр("ru='Сумма текущих платежей по земельному налогу, всего:'"), 9, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Форма700_02ПолеТабличногоДокументаВыборНаСервере(ИмяЛиста, ИмяЯчейки, Значение, ЗначениеРасшифровки, ПризнакРасчета)

	ЭтотОбъект[КодФормы + "ПолеТабличногоДокумента" + ИмяЛиста].Области[ИмяЯчейки].Значение = Значение;
	ЭтотОбъект[КодФормы + "ПолеТабличногоДокумента" + ИмяЛиста].Области[ИмяЯчейки].Расшифровка = ЗначениеРасшифровки;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтотОбъект, ИмяЛиста, ИмяЯчейки, Значение, ПризнакРасчета, ЗначениеРасшифровки);		
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, КодФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Форма700_02ОбработкаВыбораЗначений(Результат, ПараметрыВыбора) экспорт
	
	Значение = Неопределено;
	Расшифровка = Неопределено;
	
	Попытка
		
		Если Не ТипЗнч(Результат) = Тип("ЭлементСпискаЗначений") Тогда
			
			Если Результат = Неопределено Тогда
				Если ЗначениеЗаполнено(ПараметрыВыбора.НачЗначение) Тогда
					Значение = ПараметрыВыбора.НачЗначение;
					Расшифровка = ПараметрыВыбора.НачЗначение
				Иначе
					Значение = Результат;
					Расшифровка = Результат;
				КонецЕсли;
			КонецЕсли;
			
			Если Найти(ПараметрыВыбора.ИмяЯчейки, "_L_") <> 0 Тогда
				Если Результат = 0 Тогда
					ТекстСообщения = НСтр("ru='Количество месяцев должно быть в диапазоне от 1 до 12'");
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения); 
					Значение = 1;
					Расшифровка = 1;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Результат) Тогда
				Если ТипЗнч(Результат) = Тип("СправочникСсылка.НалогиСборыОтчисления") Тогда  //КБК
					Значение = СокрЛП(ПолучитьСсылкуНаЭлементСправочника(Результат));
					Расшифровка = Результат;
				ИначеЕсли Найти(ПараметрыВыбора.ИмяЯчейки, "_L_") <> 0 Тогда
					Если Результат > 12 ИЛИ Результат < 0 Тогда
						ТекстСообщения = НСтр("ru='Количество месяцев должно быть в диапазоне от 1 до 12'");
						ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения); 
						Значение = 1;
						Расшифровка = 1;
					Иначе
						Значение = Результат;
						Расшифровка = Результат;
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(ПараметрыВыбора.НачЗначение) И Результат = ПараметрыВыбора.НачЗначение Тогда
					Значение = ПараметрыВыбора.НачЗначение;
					Расшифровка = ПараметрыВыбора.НачЗначение;
				ИначеЕсли ВРег(ПараметрыВыбора.КодФормы) = ВРег("ОбщаяФорма.ФормаВыбораИзКлассификатора") Тогда  //КодКатегорииЗемель для внутреннего отчета
					Значение = Результат.КодСтроки;
					Расшифровка = Результат.КодСтроки;
				Иначе
					Значение = Результат;
					Расшифровка = Результат;
				КонецЕсли;
			КонецЕсли;
			
		Иначе   //КодКатегорииЗемель для внешнего отчета
			
			Значение    = Результат.Значение;
			Расшифровка = Результат.Значение;
			
		КонецЕсли;
		
	Исключение
		
		Значение = Результат;
		Расшифровка = Результат;
		
	КонецПопытки;
	
	Форма700_02ПолеТабличногоДокументаВыборНаСервере(ПараметрыВыбора.ИмяЛиста, ПараметрыВыбора.ИмяЯчейки, Значение, Расшифровка, ПараметрыВыбора.ПризнакРасчета);
	
	Если ПараметрыВыбора.Свойство("ЯчейкиДляОбновления") Тогда
		Для Каждого ОбновляемаяЯчейка Из ПараметрыВыбора.ЯчейкиДляОбновления Цикл
			Форма700_02ПолеТабличногоДокументаВыборНаСервере(ОбновляемаяЯчейка.ИмяЛиста, ОбновляемаяЯчейка.ИмяЯчейки, Значение, Расшифровка, ПараметрыВыбора.ПризнакРасчета);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСсылкуНаЭлементСправочника(Результат)
	
	Элемент = Справочники.НалогиСборыОтчисления.НайтиПоНаименованию(Результат);
	Значение = Элемент.КодБК;
	
	Возврат Значение;
	
КонецФункции

&НаСервереБезКонтекста
// Функция возвращает имя чейки формы 700.02, в которую будет помещено
// значение единицы измерения земельного участка
//
Функция ПолучитьИмяЯчейкиЕдиницыИзмеренияЗемельногоУчастка(ЕдиницаИзмерения)
	
	ИмяЯчейкиЕдиницы = Неопределено;		 		 
	
	Если ТипЗнч(ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") И Врег(СокрЛП(ЕдиницаИзмерения.Наименование))= "ГА" Тогда
		ИмяЯчейкиЕдиницы = "Ф700_02_C_G";
	Иначе
		ИмяЯчейкиЕдиницы = "Ф700_02_C_M";	 
	КонецЕсли;  	 
	
	Возврат ИмяЯчейкиЕдиницы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКодКатегорииЗемель(КатегорияЗемель)
	
	КодКатегории = "";
	
	Код = КатегорияЗемель.КодПоКлассификатору;
	
	Если Код = "ЗНП-ЖФ" ИЛИ Код = "ЗНП" ИЛИ Код = "ЗНП-ПУ" Тогда
		
		КодКатегории = "А";
		
	ИначеЕсли Код = "ЗСХ-1" ИЛИ Код = "ЗСХ-2" Тогда
		
		КодКатегории = "В";
		
	ИначеЕсли Код = "ЗП" ИЛИ Код = "ЗП-НП" Тогда
		
		КодКатегории = "C";
		
	ИначеЕсли Код = "ЗЛФ-СХ-1" ИЛИ Код = "ЗЛФ-СХ-2" ИЛИ Код = "ЗЛФ" Тогда
		
		КодКатегории = "D";
		
	ИначеЕсли Код = "ЗВФ-СХ-1" ИЛИ Код = "ЗВФ-СХ-2" ИЛИ Код = "ЗВФ" Тогда
		
		КодКатегории = "E";
		
	ИначеЕсли Код = "ЗООПТ-СХ-1" ИЛИ Код = "ЗООПТ-СХ-2" ИЛИ Код = "ЗООПТ" Тогда
		
		КодКатегории = "F";
		
	КонецЕсли;
	
	Возврат КодКатегории;
	
КонецФункции

// дополнительны функции и процедуры

&НаСервере
Процедура Форма700ПриИзмененииНаСервере(Ячейка, Значение, Недропользователь = Ложь)
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, КодФормы);
	
	Если Не Недропользователь Тогда
		
		Если РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, Ячейка) = "Х" Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, Ячейка, "", Истина);
		Иначе
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, Ячейка, "Х", Истина);
		КонецЕсли;
		
	Иначе
		
		Если РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, Ячейка) = "Х" Тогда
			Форма700ПолеТабличногоДокументаСтраница1.Области.НомерКонтракта.Защита = Ложь;
			Форма700ПолеТабличногоДокументаСтраница1.Области.ДатаКонтракта.Защита  = Ложь;
		Иначе
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "НомерКонтракта", "");
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "ДатаКонтракта",  "");
			Форма700ПолеТабличногоДокументаСтраница1.Области.НомерКонтракта.Защита = Истина;
			Форма700ПолеТабличногоДокументаСтраница1.Области.ДатаКонтракта.Защита  = Истина;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура Форма700_02ВыборНаСервере(Ячейка, МассивЯчеек, ТекИмяФормы, Значение = Неопределено)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "ЛистA", Ячейка,    "Х");
	
	ИмяЭлемента = ТекИмяФормы + "ПолеТабличногоДокументаЛистA";
	Элемент = ЭтаФорма[ИмяЭлемента];            
	
	Элемент.Области[Ячейка].Значение = "Х";
	
	Для каждого ИмяЯчейки Из МассивЯчеек Цикл
		
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "ЛистA", ИмяЯчейки, "");   
		Элемент.Области[ИмяЯчейки].Значение = "";
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Форма700ПолеТабличногоДокументаСтраницаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Ячейка = Область.Имя;
	
	Если Область.СодержитЗначение Тогда
		Значение = Область.Значение;
	Иначе
		Возврат;		
	КонецЕсли;
	
	Форма700ПолеТабличногоДокументаПриИзмененииНаСервере(Ячейка, Значение);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура Форма700ПолеТабличногоДокументаПриИзмененииНаСервере(ИмяОбласти, ЗначениеЭлемента)
	
	ПередаватьВТабличноеПоле = Ложь;
	Если СтрНайти(КодФормы, "Форма700_01") <> 0 И ИмяОбласти = "ИИН_БИН_Акимат" Тогда
		ПередаватьВТабличноеПоле = Истина;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяОбласти, ЗначениеЭлемента, ПередаватьВТабличноеПоле);
	
	Если КодФормы = "Форма700" Тогда
		Форма700Расчет(Истина);
	ИначеЕсли СтрНайти(КодФормы, "Форма700_01") <> 0 Тогда
		Форма700_01Расчет(Истина, КодФормы);
	КонецЕсли;  	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаЗначения(Значение, Параметры) Экспорт
	
	Если Значение <> Неопределено Тогда         	
		Параметры.Область.Значение = Значение;			
		ПередатьЗначениеВМногострочнуюСтруктуру(Параметры.ИмяСтраницы, Параметры.Область.Имя, Значение, Параметры.Расчет); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ИмяЯчейки, Значение, Расчет = Ложь)	
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, ИмяСтраницы, ИмяЯчейки, Значение, Расчет);	
КонецПроцедуры 

&НаСервере
Процедура Форма700_02ОбработкаПодбораНаСервере(НомерЯчейки, ЗначениеВыбора)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "ЛистB", НомерЯчейки, СокрЛП(ЗначениеВыбора.КодБК),, ЗначениеВыбора); 		
	Форма700_02ПолеТабличногоДокументаЛистB.Области[НомерЯчейки].Расшифровка = ЗначениеВыбора; 
	Форма700_02ПолеТабличногоДокументаЛистB.Области[НомерЯчейки].Значение = СокрЛП(ЗначениеВыбора.КодБК);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресМакетаСКД(знач ИмяРаздела)
	
	ОбщаяСКД = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("МакетСКДФорма7002021Кв1");
	СхемаКомпоновкиДанных = ОбщаяСКД.ВложенныеСхемыКомпоновкиДанных.Найти(ИмяРаздела).Схема;
	
	Возврат ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор)
	
КонецФункции

&НаСервере
// Функция для определения даты окончания отчетного
// периода, исходя из номера отчетного квартала
Функция ПолучитьДатуОкончания(ПолучатьГраницу = Ложь, ГраницаДня = Неопределено)
	
	ДатаКон = КонецГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);	
	
	Если ПолучатьГраницу Тогда
		ГраницаДня = Новый Граница(ДатаКон, ВидГраницы.Включая);
	КонецЕсли;
	
	Возврат ДатаКон;
	
КонецФункции

&НаКлиенте
Процедура Форма700_00НалогНаИмуществоСформироватьРасшифровку()
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", 	       СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета - 1);	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",          СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ТипДанных", 		       "РегистрыБухгалтерии");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяОбъекта", 	       "Типовой");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяТаблицы", 	       "ОстаткиИОбороты");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ПолучитьАдресМакетаСКД("Имущество"));
	
	Форма700РасшифровкаИмуществоСКД(ПользовательскиеНастройки);
	
	// Прочие настройки
	ТекстЗаголовка = НСТР("ru = 'Расшифровка к форме 700.03 - Остаточная стоимость объектов имущественного налога'");	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Заголовок", 	ТекстЗаголовка);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", Истина);	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьПодписи", Истина);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц.Скопировать());
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Налогоплательщик",  Налогоплательщик);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ВыводитьЗаголовок", Истина);	
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ru = 'Расчет текущих платежей по налогу на имущество'");	
	
	ОткрытьФорму("Отчет.УниверсальныйОтчетПоМетаданным.Форма.ФормаОтчета", ПараметрыФормы,, Истина);    
	
КонецПроцедуры

&НаКлиенте 
Процедура Форма700РасшифровкаИмуществоСКД(ПользовательскиеНастройки)
	
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ИнвестицииВНедвижимость_"));
	СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ОсновныеСредства_"));
	СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.БиологическиеАктивы"));	
	СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.НематериальныеАктивы"));
	
	Если ВключатьВРасчетСчет2933 Тогда
		СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.КапитальныйРемонтОС"));
	КонецЕсли;
	
	// Сортировка
	ПользовательскиеСортировки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ПорядокКомпоновкиДанных"));
	ПользовательскиеСортировки.ИдентификаторПользовательскойНастройки = "Порядок";
	
	// Группировки	
	МассивГруппировок = Новый Массив();
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "ПериодГода", НСтр("ru = 'Отчетный период'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "СтруктурнаяЕдиница", НСтр("ru = 'Структурная единица'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "ОбъектНалогообложения", НСтр("ru = 'Объект налогообложения'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка", МассивГруппировок);
	
	// Параметры  	
	МассивПараметровДанных = Новый Массив();  
	
	Для Счетчик  = 1 по 12 Цикл												
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Дата" + СокрЛП(Счетчик), НачалоМесяца(ДобавитьМесяц(НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), Счетчик-1)));
	КонецЦикла;		
	
	ГраницаКон = Неопределено;
	ДатаКон    =  ПолучитьДатуОкончания(Истина, ГраницаКон); 	
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Дата0",            СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета - 1);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Дата13",           ДатаКон + 1);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ДатаКонГраница",   ГраницаКон);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "НачалоПериода",    НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КонецПериода",     ДатаКон);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСчетов",     СписокСчетов);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Налогоплательщик", Налогоплательщик);  	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСчетов", СписокСчетов, );
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПараметрыДанных", МассивПараметровДанных);
	
	ПользовательскиеПоля = ПользовательскиеНастройки.Элементы.Добавить(Тип("ВыбранныеПоляКомпоновкиДанных"));	
	ПользовательскиеПоля.ИдентификаторПользовательскойНастройки = "Выбор";	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ОстаточнаяСтоимостьОС",    "Остаточная стоимость ОС");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ОстаточнаяСтоимостьНМА",   "Остаточная стоимость НМА");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ОстаточнаяСтоимостьОбщая", "Остаточная стоимость общая");
	
КонецПроцедуры

&НаКлиенте
Процедура Форма700_01СформироватьРасшифровку()
	
	Если ТаблицаРасшифровкиНалогаНаТранспорт.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Данные для расшифровки отсутствуют. Для расшифровки показателей приложения необходимо сначала выполнить заполнение приложения 700.01. '");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения); 
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Ложь);	
	ПараметрыФормы.Вставить("ВыводитьЗаголовок", Ложь);	
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ru = 'Расчет текущих платежей по налогу на транспорт'");
	ПараметрыФормы.Вставить("НачалоПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("КонецПериода",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", ПолучитьАдресМакетаСКД("Транспорт"));
	ПараметрыФормы.Вставить("Налогоплательщик", Налогоплательщик);
	ПараметрыФормы.Вставить("СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	ПараметрыФормы.Вставить("ТаблицаРасшифровкиНалогаНаТранспорт", ПоместитьВоВременноеХранилищеТаблицуРасшифровки());
	
	ДобавленноеПриложение = Неопределено;
	
	СтрокиПриложения = ТаблицаДобавленныхПриложений.НайтиСтроки(Новый Структура("КодФормы", КодФормы));
	Если СтрокиПриложения.Количество() <> 0 Тогда
		ДобавленноеПриложение = СтрокиПриложения[0];
	КонецЕсли;
	
	Если ДобавленноеПриложение <> Неопределено Тогда
		МестныйБюджет = ДобавленноеПриложение.МестныйБюджет;
	Иначе
		МестныйБюджет = НалогоплательщикМестныйБюджет;
	КонецЕсли;	
	
	ПараметрыФормы.Вставить("МестныйБюджет", МестныйБюджет);
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "Форма7002021Кв1", "ФормаРасшифровки"), ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеТаблицуРасшифровки()
	
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("ТаблицаРасшифровкиНалогаНаТранспорт"), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте 
Процедура Форма700_01РасшифровкаТранспортСКД(ПользовательскиеНастройки)
	
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ИнвестицииВНедвижимость_"));
	СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ОсновныеСредства_"));
	СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.БиологическиеАктивы"));	
	СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.НематериальныеАктивы"));
	
	Если ВключатьВРасчетСчет2933 Тогда
		СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.КапитальныйРемонтОС"));
	КонецЕсли;
	
	// Сортировка
	ПользовательскиеСортировки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ПорядокКомпоновкиДанных"));
	ПользовательскиеСортировки.ИдентификаторПользовательскойНастройки = "Порядок";
	
	// Группировки	
	МассивГруппировок = Новый Массив();
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "ПериодГода", НСтр("ru = 'Отчетный период'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "СтруктурнаяЕдиница", НСтр("ru = 'Структурная единица'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "ОбъектНалогообложения", НСтр("ru = 'Объект налогообложения'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка", МассивГруппировок);
	
	// Параметры  	
	МассивПараметровДанных = Новый Массив();  
	
	Для Счетчик  = 1 по 12 Цикл												
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Дата" + СокрЛП(Счетчик), КонецМесяца(ДобавитьМесяц(НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),Счетчик-1)));		
	КонецЦикла;		
	
	ГраницаКон = Неопределено;
	ДатаКон    =  ПолучитьДатуОкончания(Истина, ГраницаКон); 	
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Дата0",            СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета - 1);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Дата13",           ДатаКон + 1);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ДатаКонГраница",   ГраницаКон);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "НачалоПериода",    НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КонецПериода",     ДатаКон);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСчетов",     СписокСчетов);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Налогоплательщик", Налогоплательщик);  	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСчетов", СписокСчетов, );
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПараметрыДанных", МассивПараметровДанных);
	
	ПользовательскиеПоля = ПользовательскиеНастройки.Элементы.Добавить(Тип("ВыбранныеПоляКомпоновкиДанных"));	
	ПользовательскиеПоля.ИдентификаторПользовательскойНастройки = "Выбор";	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ОстаточнаяСтоимостьОС",    "Остаточная стоимость ОС");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ОстаточнаяСтоимостьНМА",   "Остаточная стоимость НМА");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ОстаточнаяСтоимостьОбщая", "Остаточная стоимость общая");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыФормыНаКлиенте(Параметры) Экспорт
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	ЗаполнитьСведенияОбОтчетномПериоде();
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);		
	КонецЦикла	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗаголовокОтражениеВУчете(ДокументОтражения)
	
	Если ЗначениеЗаполнено(ДокументОтражения) Тогда
		Возврат НСТР("ru = 'Открыть документ отражения в учете'");
	Иначе
		Возврат НСТР("ru = 'Ввести документ отражения в учете'");
	КонецЕсли;
	
КонецФункции // ПолучитьЗаголовокОтражениеВУчете()

&НаСервере
Процедура ДобавитьПриложениеНаСервере()
	
	Если СтрНайти(КодФормы, "Форма700_01") <> 0 Тогда
		КодИсходногоПриложения = "Форма700_01";
		КодИсходногоПриложенияПредставление = "700.01";
	ИначеЕсли СтрНайти(КодФормы, "Форма700_02") <> 0 Тогда
		КодИсходногоПриложения = "Форма700_02";
		КодИсходногоПриложенияПредставление = "700.02";
	Иначе
		Возврат;
	КонецЕсли;
	
	ДобавитьПриложениеБазовыеДанные(КодИсходногоПриложения, КодИсходногоПриложенияПредставление);
	
	ТаблицаДобавленныхПриложений_ = ЭтотОбъект.РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений");
	ПараметрыОтбора = Новый Структура("КодИсходнойФормы", КодИсходногоПриложения);
	ДобавленныеПриложения = ТаблицаДобавленныхПриложений_.Скопировать(ПараметрыОтбора);
	
	МассивПорядков = ДобавленныеПриложения.ВыгрузитьКолонку("Порядок");
	МаксимальныйПорядок = 0;
	Для Каждого Порядок Из МассивПорядков Цикл
		МаксимальныйПорядок = Макс(МаксимальныйПорядок, Порядок);
	КонецЦикла;
	
	ПостфиксПриложения = "_" +  МаксимальныйПорядок;
	
	ДобавитьПриложениеПоказателиПередачиДанных(КодИсходногоПриложения + ПостфиксПриложения);
	
	ДобавитьПриложениеРеквизитыЭлементыФормыПриложения(КодИсходногоПриложения + ПостфиксПриложения);
	
	ЗаполнитьПараметры(КодИсходногоПриложения + ПостфиксПриложения);
	
	Если КодИсходногоПриложения = "Форма700_01" Тогда
		СтрокиПриложения = ТаблицаДобавленныхПриложений.НайтиСтроки(Новый Структура("КодИсходнойФормы", КодИсходногоПриложения));
		НомерСтраницы = 1;
		Для Каждого ДобавленноеПриложение Из СтрокиПриложения Цикл
			НомерСтраницы = НомерСтраницы + 1;
			НомерСтраницыСтрока = Формат(НомерСтраницы, "ЧЦ=3; ЧДЦ=0; ЧВН=");
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ДобавленноеПриложение.КодФормы, "Стр2", НомерСтраницыСтрока, Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПриложение(Команда)
	ДобавитьПриложениеНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитФормы(ИмяРеквизита, МассивРеквизитов)
	
	Для Каждого ТекущийРеквизит Из МассивРеквизитов Цикл
		Если ТекущийРеквизит.Имя = ИмяРеквизита Тогда
			Возврат ТекущийРеквизит;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ДобавитьПодчиненныйЭлемент(ИсходныйЭлемент, НомерДубля, НовыйВладелец, ДобавляемыеРеквизиты, РеквизитыФормы, КодИсходнойФормы, КодНовойФормы)
	
	НовыйЭлементИмя = СтрЗаменить(ИсходныйЭлемент.Имя, КодИсходнойФормы, КодНовойФормы);
	НовыйЭлемент = Элементы.Добавить(НовыйЭлементИмя, ТипЗнч(ИсходныйЭлемент), НовыйВладелец);
	
	Если ТипЗнч(НовыйЭлемент) = Тип("ГруппаФормы") Тогда
		НовыйЭлемент.Вид = ИсходныйЭлемент.Вид;
		ИсключаяСвойства = "Имя";
		Если ИсходныйЭлемент.Вид = ВидГруппыФормы.Страницы Тогда
			ИсключаяСвойства = ИсключаяСвойства + ", ТекущаяСтраница";
		КонецЕсли;
		Если ИсходныйЭлемент.Вид = ВидГруппыФормы.Страница Тогда
			ИсключаяСвойства = ИсключаяСвойства + ", ПутьКДаннымЗаголовка";
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ИсходныйЭлемент,, ИсключаяСвойства);
		Для Каждого ПодчиненныйИсходныйЭлемент Из ИсходныйЭлемент.ПодчиненныеЭлементы Цикл
			ДобавитьПодчиненныйЭлемент(ПодчиненныйИсходныйЭлемент, НомерДубля, НовыйЭлемент, ДобавляемыеРеквизиты, РеквизитыФормы, КодИсходнойФормы, КодНовойФормы);
		КонецЦикла;
	ИначеЕсли ТипЗнч(НовыйЭлемент) = Тип("ТаблицаФормы") ИЛИ ТипЗнч(НовыйЭлемент) = Тип("ПолеФормы") Тогда
		ИсходныйПутьКДанным = ИсходныйЭлемент.ПутьКДанным;
		НовыйПутьКДанным = СтрЗаменить(ИсходныйПутьКДанным, КодИсходнойФормы, КодНовойФормы);
		Если ДобавляемыеРеквизиты.Найти(ИсходныйПутьКДанным) <> Неопределено
			И ПолучитьРеквизитФормы(НовыйПутьКДанным, РеквизитыФормы) <> Неопределено Тогда
			НовыйЭлемент.ПутьКДанным = НовыйПутьКДанным;
		КонецЕсли;
		ДействиеВыбор = ИсходныйЭлемент.ПолучитьДействие("Выбор");
		Если ДействиеВыбор <> "" Тогда
			НовыйЭлемент.УстановитьДействие("Выбор", ДействиеВыбор);
		КонецЕсли;
		ДействиеПриИзмененииСодержимогоОбласти = ИсходныйЭлемент.ПолучитьДействие("ПриИзмененииСодержимогоОбласти");
		Если ДействиеПриИзмененииСодержимогоОбласти <> "" Тогда
			НовыйЭлемент.УстановитьДействие("ПриИзмененииСодержимогоОбласти", ДействиеПриИзмененииСодержимогоОбласти);
		КонецЕсли;
		НовыйЭлемент.ПоложениеЗаголовка =  ПоложениеЗаголовкаЭлементаФормы.Нет;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМестныеБюджеты(МассивСтруктурныхЕдиниц)
	
	НалогоплательщикМестныйБюджет = Налогоплательщик.МестныйБюджет;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК СтруктурнаяЕдиница,
	|	Организации.ИдентификационныйНомер КАК ИИН_БИН,
	|	ВЫБОР
	|		КОГДА Организации.УчетПоМестнымБюджетам
	|			ТОГДА Организации.МестныйБюджет
	|		ИНАЧЕ &ПустойКонтрагент
	|	КОНЕЦ КАК МестныйБюджет,
	|	ВЫБОР
	|		КОГДА Организации.УчетПоМестнымБюджетам И Организации.МестныйБюджет = &ПустойКонтрагент
	|			ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ КАК МестныйБюджетНеУстановлен
	|ПОМЕСТИТЬ ВТ_СтруктурныеЕдиницы
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&СписокСтруктурныхЕдиниц)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка,
	|	ПодразделенияОрганизаций.ИдентификационныйНомер,
	|	ВЫБОР
	|		КОГДА ПодразделенияОрганизаций.УчетПоМестнымБюджетам
	|			ТОГДА ПодразделенияОрганизаций.МестныйБюджет
	|		ИНАЧЕ &ПустойКонтрагент
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПодразделенияОрганизаций.УчетПоМестнымБюджетам И ПодразделенияОрганизаций.МестныйБюджет = &ПустойКонтрагент
	|			ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Ссылка В(&СписокСтруктурныхЕдиниц)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.ИдентификационныйКодЛичности КАК ИдентификационныйКодЛичности
	|ПОМЕСТИТЬ ВТ_МестныеБюджеты
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_СтруктурныеЕдиницы.МестныйБюджет
	|			ИЗ
	|				ВТ_СтруктурныеЕдиницы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_СтруктурныеЕдиницы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВТ_СтруктурныеЕдиницы.МестныйБюджет КАК МестныйБюджет,
	|	ВТ_СтруктурныеЕдиницы.ИИН_БИН КАК ИИН_БИН,
	|	ЕСТЬNULL(ВТ_МестныеБюджеты.ИдентификационныйКодЛичности, """") КАК ИдентификационныйКодЛичности,
	|	ВТ_СтруктурныеЕдиницы.МестныйБюджетНеУстановлен КАК МестныйБюджетНеУстановлен
	|ИЗ
	|	ВТ_СтруктурныеЕдиницы КАК ВТ_СтруктурныеЕдиницы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестныеБюджеты КАК ВТ_МестныеБюджеты
	|		ПО ВТ_СтруктурныеЕдиницы.МестныйБюджет = ВТ_МестныеБюджеты.Ссылка";
	
	ПустойКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	Запрос.УстановитьПараметр("ПустойКонтрагент", ПустойКонтрагент);
	Запрос.УстановитьПараметр("СписокСтруктурныхЕдиниц", МассивСтруктурныхЕдиниц);
	
	ТаблицаМестныхБюджетов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаМестныйБюджет Из ТаблицаМестныхБюджетов Цикл
		Если СтрокаМестныйБюджет.МестныйБюджет = ПустойКонтрагент Тогда
			Продолжить;
		КонецЕсли;
		Если СокрЛП(СтрокаМестныйБюджет.ИдентификационныйКодЛичности) = "" Тогда
			ТекстСообщения = НСтр("ru = 'Элемент справочника ""Контрагенты"" <%1>: не установлен БИН / ИИН.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаМестныйБюджет.МестныйБюджет);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаМестныйБюджет.МестныйБюджет);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаМестныхБюджетов, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ДобавитьПриложениеБазовыеДанные(КодИсходногоПриложения, КодИсходногоПриложенияПредставление, ДополнительныеПараметрыПриложения = Неопределено)
	
	Если ДополнительныеПараметрыПриложения = Неопределено Тогда
		ДополнительныеПараметрыПриложения = Новый Структура;
	КонецЕсли;
	
	ТаблицаДобавленныхПриложений_ = ЭтотОбъект.РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений");
	
	// Добавление областей приложений во временный макет Показатели
	
	Макет = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("Показатели");
	МакетПоказателиПриложений = Новый ТабличныйДокумент;
	ИмяМакетаПриложения = СтрЗаменить(ЭтотОбъект.мВыбраннаяФорма, "Форма700", КодИсходногоПриложения);
	
	ПараметрыОтбора = Новый Структура("КодИсходнойФормы", КодИсходногоПриложения);
	ДобавленныеПриложения = ТаблицаДобавленныхПриложений_.Скопировать(ПараметрыОтбора);
	
	МассивПорядков = ДобавленныеПриложения.ВыгрузитьКолонку("Порядок");
	МаксимальныйПорядок = 0;
	Для Каждого Порядок Из МассивПорядков Цикл
		МаксимальныйПорядок = Макс(МаксимальныйПорядок, Порядок);
	КонецЦикла;
	КоличествоДобавленныхПриложений = МаксимальныйПорядок + 1;
	ДополнительныеПараметрыПриложения.Вставить("Порядок", КоличествоДобавленныхПриложений);
	
	ПостфиксПриложения = "_" + Строка(КоличествоДобавленныхПриложений);
	
	ИмяМакетаНовогоПриложения = СтрЗаменить(ИмяМакетаПриложения, КодИсходногоПриложения, КодИсходногоПриложения + ПостфиксПриложения);
	
	МакетПриложения = Макет.ПолучитьОбласть(ИмяМакетаПриложения);
	
	Область = МакетПриложения.Область(ИмяМакетаПриложения);
	Область.Имя = ИмяМакетаНовогоПриложения;
	МакетПриложения.Область(1, 7).Текст = КодИсходногоПриложения + ПостфиксПриложения; // Код формы		
	МакетПриложения.Область(1, 2).Текст = СтрЗаменить(
	МакетПриложения.Область(1, 2).Текст, КодИсходногоПриложенияПредставление, КодИсходногоПриложенияПредставление + "(" + КоличествоДобавленныхПриложений + ")");
	МакетПриложения.Область(1, 9).Текст = СтрЗаменить(
	МакетПриложения.Область(1, 9).Текст, КодИсходногоПриложенияПредставление, КодИсходногоПриложенияПредставление + "(" + КоличествоДобавленныхПриложений + ")");
	
	МакетПоказателиПриложений.Присоединить(МакетПриложения);
	
	// Добавление новых форм приложений в реквизиты формы СписокФормДерева, мСписокФормБезИерархии
	
	ДеревоСписокФормДерева = РеквизитФормыВЗначение("СписокФормДерева");
	СтрокиДереваФорм = ДеревоСписокФормДерева.Строки;
	
	ДеревоСписокФормБезИерархии = РеквизитФормыВЗначение("мСписокФормБезИерархии");
	СтрокиДереваСписокФормБезИерархии = ДеревоСписокФормБезИерархии.Строки;
	
	Для  НомерОбласти = 0 По  МакетПоказателиПриложений.Области.Количество()-1 Цикл
		
		Область = МакетПоказателиПриложений.Области[НомерОбласти];
		
		КодФормы_           = СокрП(МакетПоказателиПриложений.Область(Область.Верх, 7).Текст);
		КодИсходнойФормы    = Лев(КодФормы_, 11);
		
		ИмяФормыXML      	= СокрП(МакетПоказателиПриложений.Область(Область.Верх,  1).Текст) + ПостфиксПриложения;
		ИмяСтраницы      	= СокрП(МакетПоказателиПриложений.Область(Область.Верх,  2).Текст);
		ПоказатьСтраницу 	= Число(СокрП(МакетПоказателиПриложений.Область(Область.Верх,  3).Текст));
		Выгружать        	= Число(СокрП(МакетПоказателиПриложений.Область(Область.Верх,  4).Текст));
		Признакосновной  	= Число(СокрП(МакетПоказателиПриложений.Область(Область.Верх,  5).Текст));
		Многострочность  	= Число(СокрП(МакетПоказателиПриложений.Область(Область.Верх,  6).Текст));
		ФормаРодитель    	= СокрП(МакетПоказателиПриложений.Область(Область.Верх,  8).Текст);  
		ЗаголовокФормы      = СокрП(МакетПоказателиПриложений.Область(Область.Верх,  9).Текст);  
		КоличествоНаЛисте   = Число(СокрП(МакетПоказателиПриложений.Область(Область.Верх, 10).Текст));  		
		ОриентацияСтр       = СокрП(МакетПоказателиПриложений.Область(Область.Верх, 11).Текст);  
		ИспользуетсяМакет   = СокрП(МакетПоказателиПриложений.Область(Область.Верх, 13).Текст);  
		
		ИсходнаяФорма       = СтрокиДереваФорм.Найти(КодИсходнойФормы, "КодФормы", Истина);
		
		Если ИсходнаяФорма = Неопределено Тогда
			Продолжить;
		Иначе
			
			Если ИсходнаяФорма.Родитель <> Неопределено Тогда
				СтрокиДерева = ИсходнаяФорма.Родитель.Строки;
			Иначе
				СтрокиДерева = СтрокиДереваФорм;
			КонецЕсли;
			
			НоваяФорма = СтрокиДерева.Вставить(СтрокиДерева.Индекс(ИсходнаяФорма) + Число(Сред(КодФормы_, 13)));
			НоваяФорма.ИмяФормы            = ИмяФормыXML;
			НоваяФорма.КодФормы            = КодФормы_;
			НоваяФорма.Страницы            = ИмяСтраницы;
			НоваяФорма.Многострочность     = Многострочность;
			НоваяФорма.Выгружать           = Выгружать;
			НоваяФорма.Признакосновной     = ПризнакОсновной;
			НоваяФорма.ПоказатьСтраницу    = ПоказатьСтраницу;	
			НоваяФорма.ФормаРодитель       = ФормаРодитель;	
			НоваяФорма.ЗаголовокФормы      = ЗаголовокФормы;  
			НоваяФорма.АвтополучениеИтогов = 1;           
			НоваяФорма.АвтоЗаполнение      = 1;           
			НоваяФорма.КоличествоНаЛисте   = КоличествоНаЛисте;           
			НоваяФорма.ОриентацияСтр       = ОриентацияСтр;          
			НоваяФорма.ИспользуетсяМакет 	= ?(ВРЕГ(ИспользуетсяМакет) = "ИСТИНА", Истина, Ложь);
			НоваяФорма.ВыводНаПечать       = Истина;
			
		КонецЕсли;
		
		ИсходнаяФормаБезИерархии = СтрокиДереваСписокФормБезИерархии.Найти(КодИсходнойФормы, "КодФормы", Истина);
		
		Если ИсходнаяФормаБезИерархии <> Неопределено Тогда
			
			Если ИсходнаяФормаБезИерархии.Родитель <> Неопределено Тогда
				СтрокиДереваБезИерархии = ИсходнаяФормаБезИерархии.Родитель.Строки;
			Иначе
				СтрокиДереваБезИерархии = СтрокиДереваСписокФормБезИерархии;
			КонецЕсли;
			
			НоваяФорма = СтрокиДереваБезИерархии.Вставить(СтрокиДереваБезИерархии.Индекс(ИсходнаяФормаБезИерархии) + Число(Сред(КодФормы_, 13)));
			
		Иначе
			
			НоваяФорма = СтрокиДереваСписокФормБезИерархии.Добавить();
			
		КонецЕсли;
		
		НоваяФорма.КодФормы            = КодФормы_;
		НоваяФорма.ПоказатьСтраницу    = ПоказатьСтраницу;
		НоваяФорма.Выгружать           = Выгружать;
		НоваяФорма.АвтополучениеИтогов = 1; 
		НоваяФорма.АвтоЗаполнение      = 1; 
		НоваяФорма.Страницы            = ИмяСтраницы;
		НоваяФорма.ИмяФормы            = ИмяФормыXML;
		НоваяФорма.Многострочность     = Многострочность <> 0;
		НоваяФорма.КоличествоНаЛисте   = КоличествоНаЛисте;
		НоваяФорма.ОриентацияСтр       = ОриентацияСтр; 
		НоваяФорма.ПризнакОсновной     = ПризнакОсновной <> 0;
		НоваяФорма.ЗаголовокФормы      = ЗаголовокФормы;
		НоваяФорма.ВсегоСтраниц        = 1;  		
		
		ДобавленноеПриложение = ТаблицаДобавленныхПриложений_.Добавить();
		ДобавленноеПриложение.КодФормы = КодФормы_;
		ДобавленноеПриложение.КодИсходнойФормы  = КодИсходнойФормы;
		ДобавленноеПриложение.НаименованиеФормы = ИмяСтраницы;
		
		ЗаполнитьЗначенияСвойств(ДобавленноеПриложение, ДополнительныеПараметрыПриложения);   // СтруктурнаяЕдиница, МестныйБюджет
		
	КонецЦикла;  	
	
	ТаблицаДобавленныхПриложений_.Сортировать("КодФормы, Порядок");
	СтрокиДереваСписокФормБезИерархии.Сортировать("КодФормы", Истина);
	СтрокиДереваФорм.Сортировать("КодФормы", Истина);
	
	ЗначениеВРеквизитФормы(ТаблицаДобавленныхПриложений_, "ТаблицаДобавленныхПриложений");
	ЗначениеВРеквизитФормы(ДеревоСписокФормБезИерархии  , "мСписокФормБезИерархии");
	ЗначениеВРеквизитФормы(ДеревоСписокФормДерева       , "СписокФормДерева");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПриложениеРеквизитыЭлементыФормыПриложения(КодФормыПриложения)
	
	ТаблицаДобавленныхПриложений_ = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений");
	ДобавленноеПриложение         = ТаблицаДобавленныхПриложений_.Найти(КодФормыПриложения, "КодФормы");
	
	Если ДобавленноеПриложение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодИсходнойФормы = ДобавленноеПриложение.КодИсходнойФормы;
	
	СвойстваПриложения = Неопределено;
	СтруктураРеквизитовФормы.СвойстваДобавляемыхПриложений.Свойство(КодИсходнойФормы, СвойстваПриложения);
	
	Если СвойстваПриложения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПостфиксПриложения = СтрЗаменить(КодФормыПриложения, КодИсходнойФормы, "");
	
	МассивРеквизитовФормы       = ПолучитьРеквизиты();
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	Для Каждого ИсходныйРеквизитИмя Из СвойстваПриложения.РеквизитыФормы Цикл
		
		ИсходныйРеквизит = ПолучитьРеквизитФормы(ИсходныйРеквизитИмя, МассивРеквизитовФормы);
		Если ИсходныйРеквизит = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйРеквизитИмя = СтрЗаменить(ИсходныйРеквизитИмя, КодИсходнойФормы, КодФормыПриложения);
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НовыйРеквизитИмя, ИсходныйРеквизит.ТипЗначения,, ИсходныйРеквизит.СохраняемыеДанные));
		
		Если ДобавленноеПриложение.ДобавленныеРеквизиты.НайтиПоЗначению(НовыйРеквизитИмя) = Неопределено Тогда
			ДобавленноеПриложение.ДобавленныеРеквизиты.Добавить(НовыйРеквизитИмя);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
		
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		
		МассивРеквизитовФормы = ПолучитьРеквизиты();
		
		ИсходнаяСтраницаПриложения = Элементы[СвойстваПриложения.ИсходнаяСтраница];
		ВладелецПриложения = ?(ЗначениеЗаполнено(СвойстваПриложения.ГруппаФормыВладелец), Элементы[СвойстваПриложения.ГруппаФормыВладелец], ЭтотОбъект);
		
		НоваяСтраницаПриложенияИмя = СтрЗаменить(ИсходнаяСтраницаПриложения.Имя, КодИсходнойФормы, КодФормыПриложения);
		НоваяСтраницаПриложения    = Элементы.Добавить(НоваяСтраницаПриложенияИмя, ТипЗнч(ИсходнаяСтраницаПриложения), ВладелецПриложения);
		ЗаполнитьЗначенияСвойств(НоваяСтраницаПриложения, ИсходнаяСтраницаПриложения,, "Имя, ПутьКДаннымЗаголовка");
		Для Каждого ИсходныйЭлемент Из ИсходнаяСтраницаПриложения.ПодчиненныеЭлементы Цикл
			ДобавитьПодчиненныйЭлемент(ИсходныйЭлемент, ПостфиксПриложения, НоваяСтраницаПриложения, СвойстваПриложения.РеквизитыФормы, МассивРеквизитовФормы, КодИсходнойФормы, КодФормыПриложения);
		КонецЦикла;
		
		ДобавленноеПриложение.ГруппаФормыПриложения = НоваяСтраницаПриложенияИмя;
		
	КонецЕсли;
	
	МассивРеквизитовФормы = ЭтотОбъект.ПолучитьРеквизиты();
	ДобавленныеРеквизиты  = ДобавленноеПриложение.ДобавленныеРеквизиты.ВыгрузитьЗначения();
	
	ДеревоСписокФормБезИерархии = РеквизитФормыВЗначение("мСписокФормБезИерархии");
	Форма = ДеревоСписокФормБезИерархии.Строки.Найти(КодФормыПриложения, "КодФормы", Истина);
	
	Если Форма <> Неопределено Тогда
		                                                                                                                  
		КодИсходнойФормыБезПрефикса = Сред(КодИсходнойФормы  , 6);
		КодФормыБезПрефикса         = Сред(КодФормыПриложения, 6);
		
		Если Форма.Многострочность Тогда
			
			ДеревоСтруктураМногострочныхРазделов = РеквизитФормыВЗначение("мСтруктураМногострочныхРазделов");
			
			Макет = мМакет.ПолучитьОбласть(КодИсходнойФормы);
			
			Для Каждого ТекОбласть Из Макет.Области Цикл
				Если СтрНайти(ТекОбласть.Имя, КодИсходнойФормыБезПрефикса) <> 0 Тогда
					ТекОбласть.Имя = СтрЗаменить(ТекОбласть.Имя, КодИсходнойФормыБезПрефикса, КодФормыБезПрефикса);
				КонецЕсли;
			КонецЦикла;
			
			НачальнаяСтрока = ЭтотОбъект.мМакет.ВысотаТаблицы + 1;
			ОбластьПриемник = ЭтотОбъект.мМакет.Область(НачальнаяСтрока, 1, НачальнаяСтрока + Макет.ВысотаТаблицы, Макет.ШиринаТаблицы);
			ЭтотОбъект.мМакет.ВставитьОбласть(Макет.Область(КодФормыПриложения), ОбластьПриемник);
			
			Для Каждого ИсходнаяОбласть Из Макет.Области Цикл
				ТекОбласть = ЭтотОбъект.мМакет.Области.Найти(ИсходнаяОбласть.Имя);
				Если ТекОбласть <> Неопределено И ИсходнаяОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр Тогда
					ЗаполнитьЗначенияСвойств(ТекОбласть, ИсходнаяОбласть, , "Значение");
				КонецЕсли;
			КонецЦикла;
			
			Результат = РегламентированнаяОтчетность.СформироватьСтруктуруМногострочнойФормы(КодФормыПриложения, ЭтаФорма, мМакет, ДеревоСтруктураМногострочныхРазделов);
			
			Если Результат = Неопределено Тогда
				Сообщить("Для формы " + КодФормыПриложения + " не сформирована структура хранения данных");
			Иначе
				СтрокиСтруктурыМнострочнойФормы = ДеревоСтруктураМногострочныхРазделов.Строки.НайтиСтроки(Новый Структура("КодФормы", КодФормыПриложения), Истина);
				Для Каждого СтрокаСтруктурыМногострочнойФормы Из СтрокиСтруктурыМнострочнойФормы Цикл
					ИмяРеквизитаТаблицыСтрокГруппы = СтрокаСтруктурыМногострочнойФормы.ИмяРеквизитаТаблицыСтрокГруппы;
					Если ИмяРеквизитаТаблицыСтрокГруппы <> ""
						И ДобавленныеРеквизиты.Найти(ИмяРеквизитаТаблицыСтрокГруппы) = Неопределено Тогда
						ДобавленноеПриложение.ДобавленныеРеквизиты.Добавить(ИмяРеквизитаТаблицыСтрокГруппы);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ЗначениеВРеквизитФормы(ДеревоСтруктураМногострочныхРазделов, "мСтруктураМногострочныхРазделов");
			
		Иначе
			
			Если Элементы.Найти("Панель" + КодФормыПриложения) = Неопределено Тогда
				Сообщить("Для формы " + КодФормыПриложения + " не сформирована структура хранения данных");
			Иначе    
				ТаблицаИмен = Новый ТаблицаЗначений;
				ТаблицаИмен.Колонки.Добавить("ИмяОбласти");
				ТаблицаИмен.Колонки.Добавить("Значение");
				ТаблицаИмен.Индексы.Добавить("ИмяОбласти");
				
				Если КодИсходнойФормы = "Форма700_01" Тогда
					
					Для Каждого НовыйРеквизит Из ДобавленноеПриложение.ДобавленныеРеквизиты Цикл
						НовыйРеквизитФормыИмя    = НовыйРеквизит.Значение;
						ИсходныйРеквизитФормыИмя = СтрЗаменить(НовыйРеквизитФормыИмя, КодФормыПриложения, КодИсходнойФормы);
						Если ПолучитьРеквизитФормы(НовыйРеквизитФормыИмя, МассивРеквизитовФормы) = Неопределено
							ИЛИ ПолучитьРеквизитФормы(ИсходныйРеквизитФормыИмя, МассивРеквизитовФормы) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						НовыйРеквизитФормы    = ЭтотОбъект[НовыйРеквизитФормыИмя];                                             
						ИсходныйРеквизитФормы = ЭтотОбъект[ИсходныйРеквизитФормыИмя];
						Если ТипЗнч(НовыйРеквизитФормы) <> Тип("ТабличныйДокумент") Тогда
							Продолжить;
						КонецЕсли;
						НовыйРеквизитФормы.Вывести(ИсходныйРеквизитФормы.ПолучитьОбласть(1, 1, ИсходныйРеквизитФормы.ВысотаТаблицы, ИсходныйРеквизитФормы.ШиринаТаблицы));
						
						Для Каждого ИсходнаяОбласть Из ИсходныйРеквизитФормы.Области Цикл
							ТекОбласть = НовыйРеквизитФормы.Области.Найти(ИсходнаяОбласть.Имя);
							Если ТекОбласть <> Неопределено И ИсходнаяОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр Тогда
								ЗаполнитьЗначенияСвойств(ТекОбласть, ИсходнаяОбласть, , "Значение, Имя");
							КонецЕсли;
							Если СтрНайти(ТекОбласть.Имя, КодИсходнойФормыБезПрефикса) <> 0 Тогда
								ТекОбласть.Имя = СтрЗаменить(ТекОбласть.Имя, КодИсходнойФормыБезПрефикса, КодФормыБезПрефикса);
							КонецЕсли;
						КонецЦикла;
						
					КонецЦикла;							
					
				КонецЕсли;
				
				ИмяПанелиФормы = "Панель" + КодФормыПриложения;
				Для Каждого Страница Из Элементы[ИмяПанелиФормы].ПодчиненныеЭлементы Цикл					
					ИмяСтраницыБезПрефиксаПанели =  СтрЗаменить(Страница.Имя, ИмяПанелиФормы, ""); // ИмяСтраницыБезПерфиксаПанели
					Если Элементы.Найти(Форма.КодФормы + "ПолеТабличногоДокумента" + ИмяСтраницыБезПрефиксаПанели) = Неопределено Тогда
						Сообщить("Для формы " + Форма.КодФОрмы + " не сформирована структура хранения данных");
						Прервать;
					Иначе
						ТекПоле = ЭтотОбъект[Форма.КодФормы + "ПолеТабличногоДокумента" + ИмяСтраницыБезПрефиксаПанели];
						Для Каждого Область Из ТекПоле.Области Цикл
							Если Лев(Врег(Область.Имя),8) = Врег("Страница") Тогда
								Продолжить;
							КонецЕсли;
							Если Найти(Врег(Область.Имя), Врег("ОбластьФорматирования")) <> 0 Тогда
								Продолжить;
							КонецЕсли;
							// проверяем добавлялась ли строка ранее с таким же названием области
							СуществующаяСтрока = ТаблицаИмен.Найти(Область.Имя,"ИмяОбласти");
							Если СуществующаяСтрока = Неопределено Тогда
								Строка = ТаблицаИмен.Добавить();
								Строка.ИмяОбласти = Область.Имя;					
								Если ((ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") И Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник)
									ИЛИ (ТипЗнч(Область) = Тип("РисунокТабличногоДокумента") И Область.ТипРисунка = ТипРисункаТабличногоДокумента.Текст)) 
									И Область.СодержитЗначение Тогда									
									Строка.Значение = Область.ТипЗначения.ПривестиЗначение(Строка.Значение);
								Иначе
									Строка.Значение = "";
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;   				
				Форма.Значение = ТаблицаИмен;    				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТаблицаДобавленныхПриложений_, "ТаблицаДобавленныхПриложений");
	ЗначениеВРеквизитФормы(ДеревоСписокФормБезИерархии, "мСписокФормБезИерархии");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПриложениеПоказателиПередачиДанных(КодФормыПриложения)
	
	ТаблицаДобавленныхПриложений_ = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений");
	ДобавленноеПриложение         = ТаблицаДобавленныхПриложений_.Найти(КодФормыПриложения, "КодФормы");
	
	Если ДобавленноеПриложение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодИсходнойФормы = ДобавленноеПриложение.КодИсходнойФормы;
	
	МакетПередачиДанных = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("ПередачаДанных");
	ТаблицаПоказателей  = РеквизитФормыВЗначение("мТаблицаПоказателейДляПередачиДанных");
	
	ИмяОбласти = СтрЗаменить(мВыбраннаяФорма, "Форма700", КодИсходнойФормы);
	Область    = МакетПередачиДанных.Области.Найти(ИмяОбласти);
	
	КодИсходнойФормыБезПрефикса   = Сред(КодИсходнойФормы, 6);
	КодФормыПриложенияБезПрефикса = Сред(КодФормыПриложения, 6);
	
	Если Область = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Ном = Область.Верх По Область.Низ Цикл
		// перебираем строки области
		ОбластьИсточник    	= СокрП(МакетПередачиДанных.Область(Ном, 2).Текст);
		ФормаПриемник		= СокрП(МакетПередачиДанных.Область(Ном, 3).Текст);
		ОбластьПриемник    	= СокрП(МакетПередачиДанных.Область(Ном, 4).Текст);
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		НоваяСтрока.КодФормыИсточник    = ДобавленноеПриложение.КодФормы;
		НоваяСтрока.ИмяОбластиИсточник  = СтрЗаменить(ОбластьИсточник, КодИсходнойФормыБезПрефикса, КодФормыПриложенияБезПрефикса);  // ОбластьИсточник;
		НоваяСтрока.КодФормыПриемник    = ФормаПриемник;
		НоваяСтрока.ИмяОбластиПриемник  = ОбластьПриемник;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаПоказателей, "мТаблицаПоказателейДляПередачиДанных");
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПриложениеНаСервере(ИндексПриложения)
	
	ТаблицаДобавленныхПриложений_ = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений");
	СтрокаПриложения = ТаблицаДобавленныхПриложений_.Получить(ИндексПриложения);
	
	КодФормы = СтрокаПриложения.КодИсходнойФормы;
	Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущаяСтрока - 1;
	
	ДеревоСписокФормДерева = ЭтотОбъект.РеквизитФормыВЗначение("СписокФормДерева");
	СтрокиДереваФорм = ДеревоСписокФормДерева.Строки;
	УдаляемаяСтрока  = СтрокиДереваФорм.Найти(СтрокаПриложения.КодФормы, "КодФормы", Истина);
	Если УдаляемаяСтрока <> Неопределено Тогда
		Если УдаляемаяСтрока.Родитель <> Неопределено Тогда
			СтрокиДереваФорм = УдаляемаяСтрока.Родитель.Строки;
		КонецЕсли;
		СтрокиДереваФорм.Удалить(УдаляемаяСтрока);
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДеревоСписокФормДерева, "СписокФормДерева");
	
	ДеревоСписокФормБезИерархии = ЭтотОбъект.РеквизитФормыВЗначение("мСписокФормБезИерархии");
	СтрокиДереваФормБезИерархии = ДеревоСписокФормБезИерархии.Строки;
	УдаляемаяСтрока  = СтрокиДереваФормБезИерархии.Найти(СтрокаПриложения.КодФормы, "КодФормы", Истина);
	Если УдаляемаяСтрока <> Неопределено Тогда
		Если УдаляемаяСтрока.Родитель <> Неопределено Тогда
			СтрокиДереваФормБезИерархии = УдаляемаяСтрока.Родитель.Строки;
		КонецЕсли;
		СтрокиДереваФормБезИерархии.Удалить(УдаляемаяСтрока);
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДеревоСписокФормБезИерархии, "мСписокФормБезИерархии");
	
	ДеревоСтруктураМногострочныхРазделов = ЭтотОбъект.РеквизитФормыВЗначение("мСтруктураМногострочныхРазделов");
	СтрокиДереваСтруктураМногострочныхРазделов = ДеревоСтруктураМногострочныхРазделов.Строки;
	УдаляемаяСтрока = СтрокиДереваСтруктураМногострочныхРазделов.Найти(СтрокаПриложения.КодФормы, "КодФормы");
	Если УдаляемаяСтрока <> Неопределено Тогда
		СтрокиДереваСтруктураМногострочныхРазделов.Удалить(УдаляемаяСтрока);
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДеревоСтруктураМногострочныхРазделов, "мСтруктураМногострочныхРазделов");
	
	УдаляемаяОбласть = мМакет.Области.Найти(СтрокаПриложения.КодФормы);
	Если УдаляемаяОбласть <> Неопределено Тогда
		мМакет.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
	УдаляемаяГруппаПриложения = Элементы.Найти(СтрокаПриложения.ГруппаФормыПриложения);
	Элементы.Удалить(УдаляемаяГруппаПриложения);
	
	МассивУдаляемыхРеквизитов = СтрокаПриложения.ДобавленныеРеквизиты.ВыгрузитьЗначения();
	Если МассивУдаляемыхРеквизитов.Количество() <> 0 Тогда
		ИзменитьРеквизиты( , МассивУдаляемыхРеквизитов);
	КонецЕсли;
	
	ТаблицаПоказателейДляПередачиДанных = ЭтотОбъект.РеквизитФормыВЗначение("мТаблицаПоказателейДляПередачиДанных");
	УдаляемыеСтроки = ТаблицаПоказателейДляПередачиДанных.НайтиСтроки(Новый Структура("КодФормыИсточник", СтрокаПриложения.КодФормы));
	Индекс = УдаляемыеСтроки.Количество() - 1;
	Пока Индекс >= 0 Цикл
		ТаблицаПоказателейДляПередачиДанных.Удалить(УдаляемыеСтроки[Индекс]);
		Индекс = Индекс -1;
	КонецЦикла;
	ЗначениеВРеквизитФормы(ТаблицаПоказателейДляПередачиДанных, "мТаблицаПоказателейДляПередачиДанных");
	
	ТаблицаДобавленныхПриложений_.Удалить(СтрокаПриложения);
	ЗначениеВРеквизитФормы(ТаблицаДобавленныхПриложений_, "ТаблицаДобавленныхПриложений");
	
	Если КодФормы = "Форма700_01" Тогда
		СтрокиПриложения = ТаблицаДобавленныхПриложений.НайтиСтроки(Новый Структура("КодИсходнойФормы", КодФормы));
		НомерСтраницы = 1;
		Для Каждого ДобавленноеПриложение Из СтрокиПриложения Цикл
			
			НомерСтраницы = НомерСтраницы + 1;
			НомерСтраницыСтрока = Формат(НомерСтраницы, "ЧЦ=3; ЧДЦ=0; ЧВН=");
			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ДобавленноеПриложение.КодФормы, "Стр2", НомерСтраницыСтрока, Истина);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПриложениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьПриложениеНаСервере(ДополнительныеПараметры.ИндексПриложения);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПриложение(Команда)
	
	УдаляемоеПриложение = ТаблицаДобавленныхПриложений.НайтиСтроки(Новый Структура("КодФормы", КодФормы));
	
	Если УдаляемоеПриложение.Количество() > 0 Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Нстр("ru='Приложение ""%1"" и его данные будут удалены. Продолжить?'"), СокрЛП(УдаляемоеПриложение[0].НаименованиеФормы));
		ПараметрыОповещения = Новый Структура("ИндексПриложения", ТаблицаДобавленныхПриложений.Индекс(УдаляемоеПриложение[0]));
		Оповещение = Новый ОписаниеОповещения("УдалитьПриложениеЗавершение", ЭтотОбъект, ПараметрыОповещения);				
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);		
	Иначе
		ПоказатьПредупреждение(, Нстр("ru='Структура приложения незаполнена. Удаление невозможно.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПриложениеМакетВыгрузкаВXML(КодФормыПриложения, КодИсходнойФормы)
	
	Если мВыгрузкаВXMLДобавленныеПриложения.Области.Найти(КодФормыПриложения) <> Неопределено Тогда
		// Область уже была добавлена ранее
		Возврат;
	КонецЕсли;
	
	КодИсходнойФормыБезПрефикса   = Сред(КодИсходнойФормы, 6);
	КодИсходнойФормыБезПрефикса2  = СтрЗаменить(КодИсходнойФормыБезПрефикса, "_", "");
	КодФормыПриложенияБезПрефикса = Сред(КодФормыПриложения, 6);
	
	ПостфиксПриложения = СтрЗаменить(КодФормыПриложенияБезПрефикса, КодИсходнойФормыБезПрефикса, "");
	
	ОтчетОбъект_ = РеквизитФормыВЗначение("ОтчетОбъект");
	МакетВыгрузкаВXMLОсновной = ОтчетОбъект_.ПолучитьМакет("ВыгрузкаВXML");
	
	Префикс = Прав(мВыбраннаяФорма, 7);
	
	ОбластьВыгрузкиОсновная = МакетВыгрузкаВXMLОсновной.Область("Выгрузка" + Префикс);
	
	Если ОбластьВыгрузкиОсновная = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьПриложения = Новый ТабличныйДокумент;
	
	Для Ном = ОбластьВыгрузкиОсновная.Верх По ОбластьВыгрузкиОсновная.Низ Цикл
		
		ИмяФормыВыгрузки = СокрЛП(МакетВыгрузкаВXMLОсновной.Область(Ном, 1).Текст);
		
		Если СтрНайти(ИмяФормыВыгрузки, "form_" + КодИсходнойФормыБезПрефикса) <> 0 И ИмяФормыВыгрузки <> "form_700_01_002" Тогда
			
			НачальнаяСтрока = ОбластьПриложения.ВысотаТаблицы + 1;
			ОбластьПриемник = ОбластьПриложения.Область(НачальнаяСтрока, 1, НачальнаяСтрока, 8);
			ОбластьПриложения.ВставитьОбласть(МакетВыгрузкаВXMLОсновной.Область(Ном, 1, Ном, 8), ОбластьПриемник);
			
			ИмяПоля = ОбластьПриложения.Область(НачальнаяСтрока, 4).Текст;
			Если СтрНайти(ИмяПоля, КодИсходнойФормыБезПрефикса) <> 0 Тогда
				ОбластьПриложения.Область(НачальнаяСтрока, 4).Текст = СокрЛП(СтрЗаменить(ИмяПоля, КодИсходнойФормыБезПрефикса, КодФормыПриложенияБезПрефикса));
			КонецЕсли;
			
			ИмяИсходнойФормыПриложения = ОбластьПриложения.Область(НачальнаяСтрока, 6).Текст;
			Если СтрНайти(ИмяИсходнойФормыПриложения, КодИсходнойФормыБезПрефикса2) <> 0 Тогда
				ОбластьПриложения.Область(НачальнаяСтрока, 6).Текст = ИмяИсходнойФормыПриложения + ПостфиксПриложения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбластьПриложения.ВысотаТаблицы <> 0 Тогда
		ОбластьИсточник = ОбластьПриложения.Область(1, 1, ОбластьПриложения.ВысотаТаблицы, 8);
		ОбластьИсточник.Имя = КодФормыПриложения;
		
		НачальнаяСтрока = мВыгрузкаВXMLДобавленныеПриложения.ВысотаТаблицы + 1;
		ОбластьПриемник = мВыгрузкаВXMLДобавленныеПриложения.Область(НачальнаяСтрока, 1, НачальнаяСтрока + ОбластьПриложения.ВысотаТаблицы, 8);
		мВыгрузкаВXMLДобавленныеПриложения.ВставитьОбласть(ОбластьИсточник, ОбластьПриемник);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавленныеПриложенияВыгрузитьВXMLНаСервере(АдресВременногоХранилища)
	
	Для Каждого СтрокаПриложения Из ТаблицаДобавленныхПриложений Цикл
		ДобавитьПриложениеМакетВыгрузкаВXML(СтрокаПриложения.КодФормы, СтрокаПриложения.КодИсходнойФормы);
	КонецЦикла;
	
	Если мВыгрузкаВXMLДобавленныеПриложения.ВысотаТаблицы = 0 Тогда
		Возврат ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(АдресВременногоХранилища));
	КонецЕсли;
	
	АдресДобавленных = ДобавленныеПриложенияСформироватьXML();
	Если ЭтоАдресВременногоХранилища(АдресДобавленных) Тогда
		
		ДвоичныеДанныеДобавленные = ПолучитьИзВременногоХранилища(АдресДобавленных);
		
		ТекстДокДобавленные = Новый ТекстовыйДокумент;
		ТекстДокДобавленные.Прочитать(ДвоичныеДанныеДобавленные.ОткрытьПотокДляЧтения(), "UTF-8");
		ТекстДобавленные = ТекстДокДобавленные.ПолучитьТекст();
		ТекстДокДобавленные.УдалитьСтроку(ТекстДокДобавленные.КоличествоСтрок());  // </fno>
		ТекстДокДобавленные.УдалитьСтроку(1);  // <fno>
		ТекстДобавленные = ТекстДокДобавленные.ПолучитьТекст();
		
		ДвоичныеДанныеОсновные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		
		ТекстДокОсновные = Новый ТекстовыйДокумент;
		ТекстДокОсновные.Прочитать(ДвоичныеДанныеОсновные.ОткрытьПотокДляЧтения(), "UTF-8");
		ТекстДокОсновные.ВставитьСтроку(ТекстДокОсновные.КоличествоСтрок(), ТекстДобавленные);		
		ТекстОсновные = ТекстДокОсновные.ПолучитьТекст();
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("tmp");
		ВыбФайл = Новый Файл(ИмяВременногоФайла);
		ТекстДокОсновные.Записать(ВыбФайл.Путь + ВыбФайл.ИмяБезРасширения + ВыбФайл.Расширение, "UTF-8");
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла));
		
		УдалитьФайлы(ИмяВременногоФайла);
		
		Возврат АдресХранилища;
		
	Иначе
		Возврат ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(АдресВременногоХранилища));
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ДобавленныеПриложенияСформироватьXML()
	
	Префикс = Прав(мВыбраннаяФорма,7);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("tmp");
	
	Запись = Новый ЗаписьXML;		
	Запись.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
	
	// Запишем корневой элемент
	Запись.ЗаписатьНачалоЭлемента("fno");
	
	// создадим таблицу для выгрузки
	ТаблицаВыгрузки = Новый ТаблицаЗначений;
	ТаблицаВыгрузки.Колонки.Добавить("Форма");
	ТаблицаВыгрузки.Колонки.Добавить("Страница");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяАтрибута");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяЯчейки");
	ТаблицаВыгрузки.Колонки.Добавить("КоличествоROW");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяФормы");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяЛиста");
	ТаблицаВыгрузки.Колонки.Добавить("Отображение");
	
	ТаблицаВыгрузки.Колонки.Добавить("КодФормы");
	ТаблицаВыгрузки.Колонки.Добавить("Выгружать");
	ТаблицаВыгрузки.Колонки.Добавить("Многострочность");
	ТаблицаВыгрузки.Колонки.Добавить("ЗаголовокФормы"); 
	ТаблицаВыгрузки.Колонки.Добавить("КоличествоНаЛисте");    
	ТаблицаВыгрузки.Колонки.Добавить("Значение");    
   	ТаблицаВыгрузки.Колонки.Добавить("ВыгружатьНулевыеЗначения");    
	
	СписокФормБезИерархии = РеквизитФормыВЗначение("мСписокФормБезИерархии");
	Для Каждого ОбластьВыгрузки Из мВыгрузкаВXMLДобавленныеПриложения.Области Цикл
		
		ТаблицаВыгрузки.Очистить();
		ТекущееИмяФормы = Неопределено;
		Для Ном = ОбластьВыгрузки.Верх По ОбластьВыгрузки.Низ Цикл
			Строка = ТаблицаВыгрузки.Добавить();
			Строка.Форма 	       			= СокрП(мВыгрузкаВXMLДобавленныеПриложения.Область(Ном, 1).Текст);
			Строка.Страница        			= СокрП(мВыгрузкаВXMLДобавленныеПриложения.Область(Ном, 2).Текст);		
			Строка.ИмяАтрибута     			= СокрП(мВыгрузкаВXMLДобавленныеПриложения.Область(Ном, 3).Текст);		
			Строка.ИмяЯчейки      	 		= СокрП(мВыгрузкаВXMLДобавленныеПриложения.Область(Ном, 4).Текст);		
			Строка.КоличествоROW   			= СокрП(мВыгрузкаВXMLДобавленныеПриложения.Область(Ном, 5).Текст);		
			Строка.ИмяФормы        			= СокрП(мВыгрузкаВXMLДобавленныеПриложения.Область(Ном, 6).Текст);		
			Строка.ИмяЛиста        			= СокрП(мВыгрузкаВXMLДобавленныеПриложения.Область(Ном, 7).Текст);		
			Строка.Отображение     			= СокрП(мВыгрузкаВXMLДобавленныеПриложения.Область(Ном, 8).Текст);		
        
	  		Строка.ВыгружатьНулевыеЗначения  = ?(СокрП(мВыгрузкаВXMLДобавленныеПриложения.Область(Ном, 9).Текст) = "1", Истина, Ложь);		

			НовоеИмяФормы = Строка.ИмяФормы;
			Если НовоеИмяФормы <> ТекущееИмяФормы Тогда
				Форма = СписокФормБезИерархии.Строки.Найти(Строка.ИмяФормы, "ИмяФормы");
				//Форма = СписокФормБезИерархии.Строки.Найти(ОбластьВыгрузки.Имя, "КодФормы");
			КонецЕсли;
			Если Форма <> Неопределено Тогда
				Строка.КодФормы  		 = Форма.КодФормы;
				Строка.Выгружать  		 = Форма.Выгружать;
				Строка.Многострочность   = Форма.Многострочность;
				Строка.ЗаголовокФормы    = Форма.ЗаголовокФормы;
				Строка.КоличествоНаЛисте = Форма.КоличествоНаЛисте;
				Строка.Значение  		 = Форма.Значение;			
			КонецЕсли;
			ТекущееИмяФормы = Строка.имяФормы;
		КонецЦикла;                           	
		
		// выгрузка в XML 
		КоличествоСтрокВТаблице = ТаблицаВыгрузки.Количество();
		НомерСтроки = 0;
		
		ТекущаяФорма = Неопределено;
		ТекСтраница = Неопределено;
		
		Пока Истина Цикл
			Если НомерСтроки >= КоличествоСтрокВТаблице Тогда
				Прервать;
			КонецЕсли; 
			РегламентированнаяОтчетность.ВыгрузитьСтрокуВXML(ЭтотОбъект, Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки, ТекущаяФорма, ТекСтраница);			
			НомерСтроки = НомерСтроки + 1;                                                                                      		
		КонецЦикла;
		
		Запись.ЗаписатьКонецЭлемента();		// </sheet>
		Запись.ЗаписатьКонецЭлемента();		// </sheetGroup>
		Запись.ЗаписатьКонецЭлемента();		// </form>
		
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();     // fno
	
	Запись.Закрыть();
	
	// данный текст модуля добавлен для совместимости с СОНО (в СОНО для UTF-8 нет BOM поля)
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.Прочитать(ИмяВременногоФайла, "windows-1251");
	Строка = ТекстДок.ПолучитьСтроку(1);
	ТекстДок.ЗаменитьСтроку(1, Прав(Строка, СтрДлина(Строка)-3));
	ВыбФайл = Новый Файл(ИмяВременногоФайла);
	ТекстДок.Записать(ВыбФайл.Путь + ВыбФайл.ИмяБезРасширения + ВыбФайл.Расширение, "windows-1251");
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла));
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат АдресХранилища;
	
КонецФункции // ВыгрузкаОтчетаВXMLДляСОНО()

&НаСервере
Процедура ДополнитьСтруктуруМногострочныхФорм()
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, "Форма700_01", "Стр2", "001", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ВосстановитьОбъектыДобавленныхПриложений()

	мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если НЕ ЗначениеЗаполнено(мСохраненныйДок) Тогда
		Возврат;
	КонецЕсли;
	
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();
	СтруктураДополнительныхРеквизитовФормы = СписокСохранения.СтруктураДополнительныхРеквизитовФормы;
	
	мТаблицаДобавленныхПриложений = Неопределено;
	СтруктураДополнительныхРеквизитовФормы.Свойство("ТаблицаДобавленныхПриложений", мТаблицаДобавленныхПриложений);
	Если мТаблицаДобавленныхПриложений = Неопределено Тогда
		Возврат;
	Иначе
		ЗначениеВРеквизитФормы(мТаблицаДобавленныхПриложений, "ТаблицаДобавленныхПриложений");
		Если ТаблицаДобавленныхПриложений.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ЗначениеВРеквизитФормы(СтруктураДополнительныхРеквизитовФормы.мСписокФормБезИерархии, "мСписокФормБезИерархии");
	КонецЕсли;
	
	Для Каждого ДобавленноеПриложение Из ТаблицаДобавленныхПриложений Цикл

		ДобавитьПриложениеПоказателиПередачиДанных(ДобавленноеПриложение.КодФормы);
		
		ДобавитьПриложениеРеквизитыЭлементыФормыПриложения(ДобавленноеПриложение.КодФормы);
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДанныеПриложений()
	
	мСМК = РеквизитФормыВЗначение("мСтруктураМногострочныхРазделов");
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ИмяГруппы", "ЛистB");
	ЛистыДляОбработки = мСМК.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
	
	Для Каждого Лист Из ЛистыДляОбработки Цикл

		Если СтрНайти(Лист.КодФормы, "Форма700_02") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаОбщиеЭлементыГруппы = Лист.ОбщиеЭлементыГруппы;
		
		СтрокаБИНАкимата_4    = Неопределено;
		СтрокаБИНАкимата_02   = Неопределено;
		СтрокаБИНГоловного_4  = Неопределено;
		СтрокаБИНГоловного_02 = Неопределено;
		
		Для Каждого ОбщийЭлемент Из ТаблицаОбщиеЭлементыГруппы Цикл
			Если СтрНайти(ОбщийЭлемент.ИмяОбласти, "ИИН_БИНАкимата_4") <> 0 Тогда
				СтрокаБИНАкимата_4 = ОбщийЭлемент;
			КонецЕсли;
			Если СтрНайти(ОбщийЭлемент.ИмяОбласти, "ИИН_БИНАкимата_02") <> 0 Тогда
				СтрокаБИНАкимата_02 = ОбщийЭлемент;
			КонецЕсли;
			Если СтрНайти(ОбщийЭлемент.ИмяОбласти, "ИИН_БИНГоловного_4") <> 0 Тогда
				СтрокаБИНГоловного_4 = ОбщийЭлемент;
			КонецЕсли;
			Если СтрНайти(ОбщийЭлемент.ИмяОбласти, "ИИН_БИНГоловного_02") <> 0 Тогда
				СтрокаБИНГоловного_02 = ОбщийЭлемент;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаБИНАкимата_4 = Неопределено Тогда
		//Обработка не требуется
			Прервать;
		КонецЕсли;
		
		Если СтрокаБИНАкимата_4 <> Неопределено И СтрокаБИНАкимата_02 <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаБИНАкимата_02, СтрокаБИНАкимата_4,, "ИмяОбласти");
			ТаблицаОбщиеЭлементыГруппы.Удалить(СтрокаБИНАкимата_4);
		КонецЕсли;
		
		Если СтрокаБИНГоловного_4 <> Неопределено И СтрокаБИНГоловного_02 <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаБИНГоловного_02, СтрокаБИНГоловного_4);
			ТаблицаОбщиеЭлементыГруппы.Удалить(СтрокаБИНГоловного_4);
		КонецЕсли;
		
		ЭтотОбъект[Лист.КодФормы + "ПолеТабличногоДокументаЛистB"].Области[СтрокаБИНАкимата_02.ИмяОбласти].Значение = СтрокаБИНАкимата_02.Значение;

	КонецЦикла;
	
	ЗначениеВРеквизитФормы(мСМК, "мСтруктураМногострочныхРазделов");
	
КонецПроцедуры

#Область ОценкаПроизводительности

&НаКлиенте
Функция НачатьЗамерВремени()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "Регламентированный отчет ""%1 декларация по налогу на транспортные средства, земельному налогу и налогу на имущество"" (заполнение)";
		КлючеваяОперация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(КлючеваяОперация,?(ЗначениеЗаполнено(КодФормы), НРег(КодФормы), "форма 700")); 
		ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент").НачатьЗамерВремени(Истина, КлючеваяОперация);
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеТаймера()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда 
		
		Возврат ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").НачатьЗамерВремени();
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьЗамер(ВремяНачала)
	
	Если ВремяНачала <> Неопределено 
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "Регламентированный отчет ""форма 700 декларация по налогу на транспортные средства, земельному налогу и налогу на имущество"" (заполнение)";
		ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
