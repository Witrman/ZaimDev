////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	мВыбраннаяФорма = "Форма7002017Кв4";
	КодФормы 		= "Форма700";
	
	мФорматНомераСтроки = "ЧЦ=8; ЧВН=; ЧГ=";
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруФормРегОтчета(ЭтотОбъект);
	
	СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов   = Новый СписокЗначений;		
	СтруктураРеквизитовФормы.мПечатныеформы 		  = Новый СписокЗначений;		
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	ЗаполнитьСведенияОбОтчетномПериоде();
	
	ДатаПодписи	= ТекущаяДатаСеанса();		
	ДатаПодачи	= ТекущаяДатаСеанса();
		
	Инициализация(Параметры.БезОткрытияФормы);
		
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекФорма.КодФормы);
	КонецЦикла	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если Модифицированность Тогда 
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);	
		ТекстВопроса = НСТР("ru = 'Сохранить данные отчета?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если КодФормы = "Форма700_02" Тогда
		Форма700_02ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_ОтражениеНалоговойОтчетностиВРеглУчете" Тогда
		Элементы.ФормаОтражениеВУчете.Заголовок = ПолучитьЗаголовокОтражениеВУчете(Источник);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.КодФормы = Элемент.ТекущиеДанные.КодФормы Тогда
		ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);
		Возврат;
	КонецЕсли;	

	РазделыОтчетаПриАктивизацииСтрокиНаСервере(Элемент.ТекущиеДанные.КодФормы, Элемент.ТекущиеДанные.Многострочность);
			
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Для Каждого СтраницаФорм Из Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы Цикл
		Элементы[СтраницаФорм.Имя].Видимость = СтраницаФорм.Имя = ЭтаФорма.КодФормы;	
	КонецЦикла;
	
	ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);
	
КонецПроцедуры

&НаСервере
Процедура РазделыОтчетаПриАктивизацииСтрокиНаСервере(НовыйКодФормы, НовыйПризнакМногострочность)

	//проверим, что стояли не на основной, итоги передаем только когда переходим из доп.форм
	ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	Если ТекФорма <> Неопределено И Не ТекФорма.ПризнакОсновной Тогда
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы, Истина);		
	КонецЕсли;

	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	
		
	// установим новые значения реквизитам формы
	ЭтаФорма.КодФормы = НовыйКодФормы;		
	
	Если НовыйПризнакМногострочность Тогда
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура СписокРасчетовПриИзменении(Элемент)
	
	СписокРасчетовПриИзмененииНаСервере();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

&НаКлиенте
Процедура ВыгрузитьВXML(Команда)
	
	ГодФормирования = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	
	Если 2017 < ГодФормирования Тогда 
		ТекстСообщения = НСтр("ru = 'Отчет не предназначен для выгрузки в XML в период формирования " + Формат(ГодФормирования,"ЧГ=0") + " г." + Символы.ПС + 
						"Пожалуйста, обновите комплект отчетов.'");
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);		
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект);	
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры  

&НаКлиенте
Процедура ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохраненияФайла.ПолноеИмяФайла = КодФормы + " " + СтруктураРеквизитовФормы.мГод + "г" + ".xml";
		ДиалогСохраненияФайла.Фильтр = РегламентированнаяОтчетностьКлиентСервер.ФильтрДиалоговВыбораИСохраненияРегламентированногоОтчета();	
		ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
		ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите файл'");		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
		ДиалогСохраненияФайла.Показать(ОписаниеОповещения);
	Иначе   
		НачатьПолучениеФайлаССервера(ВыгрузитьВXMLНаСервере(), КодФормы + ".xml"); 
	КонецЕсли;
	   
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресВременногоХранилища = ВыгрузитьВXMLНаСервере();
		
	ПолноеИмяФайла = Результат[0];
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, АдресВременногоХранилища));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяФайла",ПолноеИмяФайла); 
	Обработчик = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеЗавершение", ЭтотОбъект,ДополнительныеПараметры);
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
	ПараметрыСохранения.Интерактивно = Ложь;
	ФайловаяСистемаКлиент.СохранитьФайлы(Обработчик, ПолучаемыеФайлы, ПараметрыСохранения); 
	
	        
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ТекстЗаголовка = НСтр("ru = 'Данные успешно выгружены в файл'");
	
	СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДополнительныеПараметры.ИмяФайла);
	
	РабочийКаталог = СтруктураФайла.Путь;

	#Если НЕ ВебКлиент Тогда
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка, "file:///" + СтрЗаменить(СокрЛП(РабочийКаталог), "\", "/"),
		РабочийКаталог);
	#Иначе
		Если НЕ ЗначениеЗаполнено(ПолученныеФайлы) Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка,,
		РабочийКаталог);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Перезаполнить = Истина; // Для выполнения запроса на пересчет данных к пользователю
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения = РегламентированнаяОтчетностьКлиент.ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Перезаполнить Тогда	
		
		Если СтрокаФормы.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстВопроса = Нстр("ru='Перезаполнить данные формы и ее дополнительных форм?'");
		Иначе
			ТекстВопроса = Нстр("ru='Перезаполнить данные формы?'");
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы",      КодФормы);
		Оповещение.ДополнительныеПараметры.Вставить("Перезаполнить", Перезаполнить);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);		

	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда) 	
	Печать(Команда.Имя);         	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда) 	
	Печать(Команда.Имя);         	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	ДобавитьСтрокуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	УдалитьСтрокуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущаяСтр(Команда)
	ПредыдущаяСтрНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СледующаяСтр(Команда)
	СледующаяСтрНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницу(Команда)
	
	ВыбСтраница = 1;
	
	ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаСтраницы", ЭтаФорма); 
	ПоказатьВводЧисла(ОповещениеВводаЗначений,ВыбСтраница, Нстр("ru='Введите номер страницы'"),5,0);
	
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)  	
	ОткрытьФормуНастройкиСтраниц();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсе(Команда)
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФормуИПриложения");
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФорму(Команда)
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму");
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеглОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Форма = ДополнительныеПараметры.Форма;	
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", Форма.КодФормы));
		Вложенность = ДополнительныеПараметры.ОчищатьПриложения;	
		
		ОчиститьРеглОтчетЗавершениеНаСервере(СтрокаФормы.КодФормы, СтрокаФормы.Многострочность, Вложенность);
		
	КонецЕсли;
	
КонецПроцедуры 	

&НаСервере
Процедура ОчиститьРеглОтчетЗавершениеНаСервере(КодФормы, ПризнакМногострочности, Вложенность) Экспорт
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, ПризнакМногострочности, Вложенность);	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)	
	СохранитьДанные();      	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыФормы.Вставить("Налогоплательщик",         Налогоплательщик);
	ПараметрыФормы.Вставить("НалоговыйКомитет",         НалоговыйКомитет);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, мВыбраннаяФорма, "") + "ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);	

КонецПроцедуры

&НаКлиенте
Процедура Расшифровка(Команда)
	
	Если КодФормы = "Форма700" Тогда
		
		Попытка
			ИмяЯчейки = ТекущийЭлемент.ТекущаяОбласть.Имя;
		Исключение
			ПоказатьПредупреждение(, Нстр("ru='Активизируйте нужную ячейку отчета для расшифровки.'"));
			Возврат;
		КонецПопытки;
		
		Если ИмяЯчейки = "s_700_00_012_1" Тогда
			Форма700_00НалогНаИмуществоСформироватьРасшифровку();
		Иначе
			ПоказатьПредупреждение(, Нстр("ru='Расшифровка данной ячейки не поддерживается. Расшифровку содержат ячейки формы, выделенные голубым цветом.'"));
		КонецЕсли;
	
	ИначеЕсли КодФормы = "Форма700_01" Тогда
		Форма700_01СформироватьРасшифровку();				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчете(Команда)
	
	СохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(СохраненныйДок) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Регламентированный отчет не записан в информационной базе.'"));
		Возврат;
	КонецЕсли;
	
	ДокументОтраженияВУчете = ПолучитьЗначениеРеквизита(СохраненныйДок, "ДокументОтраженияВУчете");
	
	Если ЗначениеЗаполнено(ДокументОтраженияВУчете) Тогда
		РегламентированнаяОтчетностьКлиент.ОткрытьДокументОтраженияНалОтчетностиВУчете(СохраненныйДок, ДокументОтраженияВУчете, ЭтотОбъект);
	Иначе
		РегламентированнаяОтчетностьКлиент.СоздатьДокументОтраженияНалОтчетностиВУчете(СохраненныйДок, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ПРОЦЕДУРЫ И ФУНКЦЦИИ

&НаСервере
Процедура ПредыдущаяСтрНаСервере()
	
	ТекущаяСтраница = ТекущаяСтраница - 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СледующаяСтрНаСервере()
	
	ТекущаяСтраница = ТекущаяСтраница + 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокСтруктурныхЕдиниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");			
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("НалоговыйКомитет");				
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");	
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");	
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");		
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");	
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрг");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");	
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");		
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");	
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);	
	СтруктураРеквизитовФормы.Вставить("мГод");	
	СтруктураРеквизитовФормы.Вставить("мКвартал");	
	СтруктураРеквизитовФормы.Вставить("мМесяц");	
	// индивидуальные параметры формы
	СтруктураРеквизитовФормы.Вставить("мПоддержкаРаботыСоСтруктурнымиПодразделениями");
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтчетномПериоде() Экспорт

	СтрПериодОтчета = ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ФП = Истина");
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Год Тогда
		СтруктураРеквизитовФормы.мКвартал = Неопределено;
		СтруктураРеквизитовФормы.мГод = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Иначе
		СтруктураРеквизитовФормы.мКвартал = Лев(СтрПериодОтчета,1);
		СтруктураРеквизитовФормы.мГод = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ВосстановитьСохраненныеДанные()	
	РегламентированнаяОтчетность.ВосстановитьСохраненныйОтчет(ЭтотОбъект);	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
            
    Перем СтруктураГруппы; 
    
    Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
        ТекстСообщения = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");            
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
        Возврат Ложь;        
    КонецЕсли;
            
    СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
    СтруктураРеквизитовФормы.мРежимПечати = Истина;
    
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		ВыборРасчета(КодФормы);		
	КонецЕсли; 

    РегламентированнаяОтчетность.СформироватьСписокПечатаемыхЛистов(ЭтаФорма);                     
        
    Возврат Истина;
    
КонецФункции

&НаСервере
//Процедура выполняет выбор процедуры расчета.
//ВыборРасчета выполняется при восстановлении данных, при изменении поля табличного документа
//
//Параметры:    ТекФорма - имя текущей формы
//              Индекс - индекс строки для многострочной формы
//              Показатель - имя ячейки, откуда была вызвана процедура расчета многострочной
//                           формы, без указания номера строки (например, без "__1")
//
Процедура ВыборРасчета(ТекФорма, Индекс = Неопределено, Показатель = Неопределено) Экспорт
	
	Форма = РеквизитФормыВЗначение("мСписокФормБезИерархии").Строки.Найти(ТекФорма, "КодФормы");
	// в случае если процедура расчета мног.формы вызвана не из нее самой, а,
	// например, при передаче итогов в многостр.форму
	Если Форма.Многострочность = 1 И Индекс = Неопределено Тогда
		Индекс = 1;
		Показатель = "";
	КонецЕсли;
	
	НазваниеПроцедуры = ТекФорма + "Расчет(" + Индекс + ?(Показатель <> Неопределено, ",""" + Показатель + """","") + ")";
	Выполнить(НазваниеПроцедуры);
		
КонецПроцедуры // ВыборРасчета()

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(мСписокСтруктурныхЕдиниц, ЭтаФорма, СтандартнаяОбработка,"", Налогоплательщик,НалоговыйКомитет,
																ПредопределенноеЗначение("Перечисление.РазделыНалоговогоУчета.МестныеНалоги"),Истина);
КонецПроцедуры
	
&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда		
		мСписокСтруктурныхЕдиниц = Результат;		
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц); 		
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////
// Общие механизмы отчета

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ   			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;				
		КонецЕсли;	
			
		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		ДокументОтражения = ПолучитьЗначениеРеквизита(СтруктураРеквизитовФормы.мСохраненныйДок, "ДокументОтраженияВУчете");
		Элементы.ФормаОтражениеВУчете.Заголовок = ПолучитьЗаголовокОтражениеВУчете(ДокументОтражения);
	КонецЕсли;

	МассивРеквизитовФормы = ЭтотОбъект.ПолучитьРеквизиты();
	Для Счетчик = 0 По МассивРеквизитовФормы.Количество()-1 Цикл		
		РеквизитФормы = МассивРеквизитовФормы[Счетчик];
		Если РеквизитФормы.ТипЗначения.СодержитТип(Тип("ТабличныйДокумент")) Тогда
			ЭтотОбъект[РеквизитФормы.Имя] = ЭтотОбъект[РеквизитФормы.Имя];	
		КонецЕсли;
	КонецЦикла;	

	мСтруктураЗначений = Новый Структура;
	
	Если СтруктураРеквизитовФормы.Свойство("СформироватьФормуОтчетаАвтоматически") И СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически <> Неопределено Тогда
		ЗаполнитьАвтоНаСервере();		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, ЭтотОбъект.КодФормы, Ложь,Ложь);
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма);	
	
	Форма700Расчет();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметры(ТекущееИмяФормы) Экспорт
	
	Форма = РеквизитФормыВЗначение("мСписокФормБезИерархии").Строки.Найти(ТекущееИмяФормы,   "КодФормы");
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, "Форма700");
	ФИОРук = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,   "Руководитель"); // ФИО руководителя
	
	Если Форма.Многострочность = 1 Тогда // заполнение структуры шапки(подвала) для многострочных форм
				
		Если НЕ ((Налогоплательщик  = Неопределено) ИЛИ (Налогоплательщик = Справочники.Организации.ПустаяСсылка())) Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы, "ИИН_БИН", Налогоплательщик.ИдентификационныйНомер, Ложь);
		КонецЕсли;                                                  
		
		// реквизиты головной организации
		Если ЗначениеЗаполнено(Налогоплательщик) И Налогоплательщик.ГоловнаяОрганизация <> Налогоплательщик Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекущееИмяФормы, "ИИН_БИНГоловного", Налогоплательщик.ГоловнаяОрганизация.ИдентификационныйНомер, Ложь);
		КонецЕсли;
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год", СтруктураРеквизитовФормы.мГод, Ложь);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Руководитель", ФИОРук, Ложь);
		
		Если ТекущееИмяФормы = "Форма700_02" Тогда
			мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, ТекущееИмяФормы);
			СтруктураГруппы = Неопределено;
			мМногострочнаяСтруктура.Свойство("ЛистА", СтруктураГруппы);
			ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "КоличествоПриложений", ТаблицаСтрокГруппы.Количество(), Ложь);			
		КонецЕсли;
		
	Иначе //обычная форма
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год",     СтруктураРеквизитовФормы.мГод);	
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН", Налогоплательщик.ИдентификационныйНомер, Ложь);
		
		Если ТекущееИмяФормы = "Форма700" Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Руководитель", ФИОРук, Ложь);
		КонецЕсли;
		
	КонецЕсли;
		
	Если ТекущееИмяФормы = Лев(мВыбраннаяФорма, СтрДлина(мВыбраннаяФорма)-7) Тогда 
						
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "КодВалюты", "KZT");
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			СписокРасчетов = "Очередная";
		КонецЕсли; 
		
		СписокРасчетовПриИзмененииНаСервере();
		
		//заполним основные сведения об организации
		ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы);
				
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы)
	
	ОргСведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(Налогоплательщик, ДатаПодачи);
	//Если организация не указана то не выводим никаких сведений
	Если ОргСведения = 0 Тогда
		Возврат;
	КонецЕсли;

	// Инициализируем переменные
	РННЮЛ = ""; 	// РНН	
	НаимЮЛПол = ""; // Полное наименование 	
	ИИН_БИН = ""; 	// ИИН_БИН	
	ФИОРук = ""; 	// ФИО руководителя				
	КодНалоговогоОргана = ""; // Код налогового органа	
	АдрЮр = ""; //юр.адрес	
	АдрФакт = ""; //факт.адрес
	
	// Получаем данные
	ОргСведения.Свойство("РНН",     		   РННЮЛ);
	ОргСведения.Свойство("БИН_ИИН",   		   ИИН_БИН);
	ОргСведения.Свойство("ПолноеНаименование", НаимЮЛПол);	
	ОргСведения.Свойство("Руководитель",	   ФИОРук);	
	ОргСведения.Свойство("ЮридическийАдрес",   АдрЮр);
	ОргСведения.Свойство("ФактическийАдрес",   АдрФакт);
                                         		
	// Производим операции связанные с текущей формой отчетности	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН", ИИН_БИН);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"ОргНазв", НаимЮЛПол);
	// Разбиваем название организации
	НазваниеОрганизацииДляРазбиения = НаимЮЛПол;
	НачПозиция = 1;
	Для Шаг = 1 По 2 Цикл
		ДлинаСтроки = ЭтотОбъект[ТекущееИмяФормы + "ПолеТабличногоДокументаСтраница1"].Области["ОргНазв" + Шаг].ТипЗначения.КвалификаторыСтроки.Длина;
		НазОрганизации = Сред(НазваниеОрганизацииДляРазбиения, НачПозиция, ДлинаСтроки); 
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ОргНазв" + Шаг, НазОрганизации);
		НачПозиция = НачПозиция + ДлинаСтроки;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Руководитель", ФИОРук);
	
	// Дата подачи декларации
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ДатаПодачи", ДатаПодачи);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуНаСервере()
	РегламентированнаяОтчетность.УдалитьСтрокуМногострочнойФормы(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере()
	РегламентированнаяОтчетность.ДобавитьСтрокуМногострочнойФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПанель(ПризнакОсновнойФормы, ПризнакМногострочности)
	
	Элементы.ФормаВыгрузитьВXML.Видимость = ПризнакОсновнойФормы;
	Элементы.ФормаОчиститьВсе.Видимость = ПризнакОсновнойФормы;
	Элементы.ГруппаКнопокДействияСоСтрокамиИСтраницами.Видимость = ПризнакМногострочности;	
			    	
КонецПроцедуры //ЗаполнитьПанель()

&НаСервере
Процедура ОчиститьНаСервере()
	РегламентированнаяОтчетность.ОчиститьРеглОтчет(ЭтаФорма,"ОчиститьФорму");
КонецПроцедуры

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура Очистить(ТекИмяФормы, ОчиститьВсе = Ложь) Экспорт
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	// Список ячеек, очищать которые не нужно
	                                           	
	Если ОчиститьВсе Тогда
		Если ТекИмяФормы = Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7) Тогда 
			СписокПоказателейНеПодлежащихОчистке.Добавить("КодВалюты");
		КонецЕсли;
	Иначе
		СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
		СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Год");
		СписокПоказателейНеПодлежащихОчистке.Добавить("НомерУведомления");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаУведомления");
		СписокПоказателейНеПодлежащихОчистке.Добавить("НомерКонтракта");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаКонтракта");
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодНалоговогоОргана");
	КонецЕсли;
		
	РегламентированнаяОтчетность.ОчиститьСтруктуруДанныхИТабличноеПолеФормы(ЭтаФорма, ТекИмяФормы, ОчиститьВсе, СписокПоказателейНеПодлежащихОчистке);
	// обновим представление списка структурных единиц
	Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц);
	КонецЕсли;
	
КонецПРоцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	 	
	
	Перезаполнить = ДополнительныеПараметры.Перезаполнить;
	Очистить(КодФормы, КодФормы = "Форма700");
	
	Если КодФормы = "Форма700" Тогда 		
		Форма700ЗаполнитьАвто(Перезаполнить);
	ИначеЕсли КодФормы = "Форма700_01" Тогда     
		Форма700_01ЗаполнитьАвто(КодФормы, Перезаполнить);			
	ИначеЕсли КодФормы = "Форма700_02" Тогда     
		Форма700_02ЗаполнитьАвто(КодФормы, Перезаполнить);		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура СписокРасчетовПриИзмененииНаСервере()
	
	ТекИмяФормы = "Форма700";
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Первоначальная", "", Ложь);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Очередная",      "", Ложь);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Дополнительная", "", Ложь);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "ПоУведомлению",  "", Ложь);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Ликвидационная", "", Ложь);
		
	Если СписокРасчетов = "Первоначальная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Первоначальная", "Х", Ложь);
	ИначеЕсли СписокРасчетов = "Очередная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Очередная", "Х", Ложь);
	ИначеЕсли СписокРасчетов = "Дополнительная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Дополнительная", "Х", Ложь);
	ИначеЕсли СписокРасчетов = "ПоУведомлению" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "ПоУведомлению", "Х", Ложь);
	ИначеЕсли СписокРасчетов = "Ликвидационная" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Ликвидационная", "Х", Ложь);
	КонецЕсли;
	
	Если СписокРасчетов = "ПоУведомлению" Тогда
		Форма700ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Ложь;
		Форма700ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита = Ложь;
	Иначе	
		Форма700ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Истина;
		Форма700ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита = Истина;
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "НомерУведомления", "", Ложь);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "ДатаУведомления",  "", Ложь);
	КонецЕсли;
		
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);		                 	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ЗначениеРеквизита)
											
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ЗначениеРеквизита);										
											
КонецФункции
 

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции выгрузки данных отчета в XML

&НаСервере
Функция ВыгрузитьВXMLНаСервере(ВыдаватьСообщение = Ложь)		
	Возврат РегламентированнаяОтчетность.ВыгрузитьОтчетВXMLДляСОНО(ЭтотОбъект, ВыдаватьСообщение);
КонецФункции

///////////////////////////////////////////////////////////////////
// ФОРМА 700.00

&НаСервере
Процедура Форма700ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Если Перезаполнить Тогда	
		ТекстСообщения = НСтр("ru = 'Расчет основной формы приложения 700.00'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	КодФормы = "Форма700_01";
	Очистить(КодФормы);
	Форма700_01ЗаполнитьАвто(КодФормы, Перезаполнить);	
	
	КодФормы = "Форма700_02";
	Форма700_02ЗаполнитьАвто(КодФормы, Перезаполнить);	
	
	КодФормы = "Форма700";
	
	// Заполняем поле "Представленные приложения"
	Для Каждого Форма Из РеквизитФормыВЗначение("СписокФормДерева").Строки[0].Строки Цикл            
		ИмяОбласти = "Приложение" + Прав(Форма.КодФормы,2);
		Если Форма700ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяОбласти) <> Неопределено Тогда
			Строка = РеквизитФормыВЗначение("мСписокФормБезИерархии").Строки.Найти(Форма.КодФормы, "КодФормы");
			Если Строка.Выгружать = 1 Тогда
				РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяОбласти, "Х", Ложь);				
			Иначе
				РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяОбласти, "",  Ложь);				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	// Форма700_00 РассчитатьСуммуНалогаНаИмущество
	СуммаНалогаНаИмущество = Окр(Форма700_00РассчитатьСуммуНалогаНаИмущество());
	КБКНалогаНаИмущество   = Справочники.НалогиСборыОтчисления.НалогНаИмущество.КодБК;
	Если Найти(КБКНалогаНаИмущество, "104102") > 0 Тогда
		// КБК ФЛ
		СтрокаНалогаНаИмущество = "s_700_00_012_3";
	Иначе
		// КБК ЮЛ
		СтрокаНалогаНаИмущество = "s_700_00_012_1";
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, СтрокаНалогаНаИмущество, СуммаНалогаНаИмущество, Ложь); 
		
	// передаем в качестве признака перезаполнения Истина, т.к. это главная форма
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, КодФормы, Истина);                 	
	
	Модифицированность = Истина;       
	
КонецПроцедуры // Форма700ЗаполнитьАвто()

&НаСервере
Процедура Форма700Расчет(Изменено = Ложь)
	
	КодЭтойФормы = "Форма700";
		
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, КодЭтойФормы);
	
	// количество 700.01
	Значение700_01 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "Приложение01");
	Если Значение700_01 = "Х" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодЭтойФормы, "КоличествоПриложений700_01", 1, Истина);	
	КонецЕсли;	
		
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// 700.00.001. Сумма исчисленного транспортного налога: 700.00.002 + 700.00.003		
	Значение700_00_002 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_700_00_002");
	Значение700_00_003 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_700_00_003");	
	Значение700_00_001 = Значение700_00_002 + Значение700_00_003;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодЭтойФормы, "s_700_00_001", Значение700_00_001, Ложь);
	Если Изменено Тогда 
		Форма700ПолеТабличногоДокументаСтраница1.Области["s_700_00_001"].Значение = Значение700_00_001;	
	КонецЕсли;
		
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// 700.00.005. Сумма транспортного налога к начислению: 700.00.001 - 700.00.004 или налога к уменьшению: 700.00.004 - 700.00.001
	//Значение700_00_001 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_700_00_001");
	Значение700_00_004 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_700_00_004");
	ИтогЗначение = Значение700_00_001 - Значение700_00_004;
	
	Если ИтогЗначение > 0  Тогда
		// заполняем 700.00.005
		ИтогСтрокаФормы = "s_700_00_005";
		ОчищаемаяСтрокаФормы = "s_700_00_006";  
	Иначе
		// заполняем 700.00.006
		ИтогСтрокаФормы = "s_700_00_006";     
		ОчищаемаяСтрокаФормы = "s_700_00_005";  
		// меняем знак
		ИтогЗначение = - ИтогЗначение;
	КонецЕсли;	
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодЭтойФормы, ИтогСтрокаФормы, ИтогЗначение, Ложь);
	Если Изменено Тогда 
		Форма700ПолеТабличногоДокументаСтраница1.Области[ИтогСтрокаФормы].Значение = ИтогЗначение;	
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодЭтойФормы, ОчищаемаяСтрокаФормы, 0, Ложь);
	Если Изменено Тогда 
		Форма700ПолеТабличногоДокументаСтраница1.Области[ОчищаемаяСтрокаФормы].Значение = 0;
	КонецЕсли;

	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, КодЭтойФормы);
		
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Сумма исчисленного земельного налога: Сумма 700.00.007.1 ...  700.00.007.2		
	ИтогЗначение007 = 0;
	Для Счетчик = 1 по 2 Цикл
		ИтогЗначение007 = ИтогЗначение007 + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_700_00_007_" + Счетчик);
	КонецЦикла;
		
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодЭтойФормы, "s_700_00_007", ИтогЗначение007, Ложь);
	Если Изменено Тогда
		Форма700ПолеТабличногоДокументаСтраница2.Области["s_700_00_007"].Значение = ИтогЗначение007;
	КонецЕсли;
	
	ИтогЗначение = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_700_00_007_1")
							- РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_700_00_008");
	
	Если ИтогЗначение > 0  Тогда
		// заполняем 700.00.009
		ИтогСтрокаФормы = "s_700_00_009";
		ОчищаемаяСтрокаФормы = "s_700_00_010";  
	Иначе
		// заполняем 700.00.010
		ИтогСтрокаФормы = "s_700_00_010";     
		ОчищаемаяСтрокаФормы = "s_700_00_009";  
		// меняем знак
		ИтогЗначение = - ИтогЗначение;
	КонецЕсли;
		
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодЭтойФормы, ИтогСтрокаФормы, ИтогЗначение, Ложь);
	
	Если Изменено Тогда
		Форма700ПолеТабличногоДокументаСтраница2.Области[ИтогСтрокаФормы].Значение = ИтогЗначение;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодЭтойФормы,ОчищаемаяСтрокаФормы, 0, Ложь);
	Если Изменено Тогда
		Форма700ПолеТабличногоДокументаСтраница2.Области[ОчищаемаяСтрокаФормы].Значение = 0;
	КонецЕсли;
	
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Сумма исчисленного имущественного налога	
	Значение700_00_012_1 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_700_00_012_1");
	Значение700_00_012_3 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_700_00_012_3");	
		
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Сумма имущественного налога к начислению:
	// в случае если сумма исчисленного налога за налоговый период, указанная в строке 700.00.011 по каждому коду бюджетной классификации, больше суммы исчисленных текущих платежей, отраженной в строке 700.00.012, в строке 700.00.013 указывается сумма налога к начислению, определяемая как разница строк 700.00.011 и 700.00.012
	Значение700_00_013 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_700_00_013");
		
	ИтогЗначение = Значение700_00_012_1 - Значение700_00_013;
	Если ИтогЗначение > 0  Тогда
		// заполняем 700.00.013 
		ИтогСтрокаФормы = "s_700_00_014";
		ОчищаемаяСтрокаФормы = "s_700_00_015";  
	Иначе
		// заполняем 700.00.014 
		ИтогСтрокаФормы = "s_700_00_015";
		ОчищаемаяСтрокаФормы = "s_700_00_014";  
		// меняем знак
		ИтогЗначение = - ИтогЗначение;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодЭтойФормы, ИтогСтрокаФормы, ИтогЗначение, Ложь);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодЭтойФормы, ОчищаемаяСтрокаФормы, 0, Ложь);
	
		
	// Итоговые строки
	Значение700_00_012 = Значение700_00_012_1 + Значение700_00_012_3;
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодЭтойФормы, "s_700_00_012", Значение700_00_012,   Ложь);
		
	Если Изменено Тогда 
		Форма700ПолеТабличногоДокументаСтраница2.Области["s_700_00_012"].Значение = Значение700_00_012;			
		Форма700ПолеТабличногоДокументаСтраница2.Области["s_700_00_013"].Значение = Значение700_00_013;			
	КонецЕсли;
		
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиСтраниц()
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРаздел = Элементы.РазделыОтчета.ТекущиеДанные.Страницы;		
	КонецЕсли;
	
	Для Каждого ТекФорма ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",ТекФорма.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			ТекущаяСтрокаСписка.Выгружать               = ТекФорма.Выгружать;
			ТекущаяСтрокаСписка.ПоказатьСтраницу        = ТекФорма.ПоказатьСтраницу;			
			ТекущаяСтрокаСписка.АвтополучениеИтогов     = ТекФорма.АвтополучениеИтогов;  
			ТекущаяСтрокаСписка.АвтоЗаполнение          = ТекФорма.АвтоЗаполнение;  
		КонецЕсли;		   
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокФормДерева", СписокФормДерева);
	
	ДопПараметры   = Новый Структура("ТекущийРаздел",    ТекущийРаздел);
	
	ОповещениеПослеЗакрытияФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастройкиСтраниц", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.НастройкиОтчета", ПараметрыФормы, ЭтаФорма,,,, ОповещениеПослеЗакрытияФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьДанныеСервере();
		Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;	
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиСтраниц(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьДанныеФормы(РезультатЗакрытия, СписокФормДерева);
	
	Модифицированность = Истина;
	
	//обновим мСписокФормБезИерархии
	Для Каждого СтрокаФормы ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",СтрокаФормы.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			СтрокаФормы.Выгружать               = ТекущаяСтрокаСписка.Выгружать;
			СтрокаФормы.ПоказатьСтраницу        = ТекущаяСтрокаСписка.ПоказатьСтраницу;			
			СтрокаФормы.АвтополучениеИтогов     = ТекущаяСтрокаСписка.АвтополучениеИтогов;  
			СтрокаФормы.АвтоЗаполнение          = ТекущаяСтрокаСписка.АвтоЗаполнение;  
		КонецЕсли;		
		
	КонецЦикла; 	

	Если ДополнительныеПараметры.Свойство("ТекущийРаздел") И НЕ ДополнительныеПараметры.ТекущийРаздел = Неопределено Тогда  		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(РазделыОтчета, Новый Структура("СписокФормДереваСтраницы",ДополнительныеПараметры.ТекущийРаздел));
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;			
	КонецЕсли;  	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормы(ТекФорма, Параметры)
	
	ЗаполнитьЗначенияСвойств(ТекФорма.СтруктураРеквизитовФормы, Параметры);
		
	ТекФорма.Налогоплательщик                     = Параметры.Налогоплательщик;
	ТекФорма.НалоговыйКомитет                     = Параметры.НалоговыйКомитет;
	ТекФорма.мСписокСтруктурныхЕдиниц             = Параметры.мСписокСтруктурныхЕдиниц;
	ТекФорма.ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ТекФорма.мСписокСтруктурныхЕдиниц);
		
КонецПроцедуры

&НаКлиенте
Процедура ПанельФорма700ПриСменеСтраницы(Элемент, ТекущаяСтраница)	
	ПанельФорма700ПриСменеСтраницыНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ПанельФорма700ПриСменеСтраницыНаСервере()	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, КодФормы);	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанные() Экспорт
	
	СохранитьДанныеСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеСервере()
	
	ТекущийКодФормы = КодФормы;
	КодФормы = "Форма700";
	РегламентированнаяОтчетность.СохранитьОтчет(ЭтотОбъект);
	КодФормы = ТекущийКодФормы;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСтраницы(Значение, Параметры) Экспорт
	
	Если НЕ Значение = Неопределено Тогда  
		
		ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
		Если ТекФорма = Неопределено Тогда
			ВсегоСтраниц = 1;
		Иначе
			ВсегоСтраниц = ТекФорма.ВсегоСтраниц;
		КонецЕсли;		
			
		Если Значение = 0 Тогда
			ТекущаяСтраница = 1;
		ИначеЕсли Значение > ВсегоСтраниц Тогда
			ТекущаяСтраница = ВсегоСтраниц;
		Иначе
			ТекущаяСтраница = Значение;				
		КонецЕсли;
		
		ПослеВводаСтраницыНаСервере();
		  
	КонецЕсли;
	           	
КонецПроцедуры

&НаСервере
Процедура ПослеВводаСтраницыНаСервере()
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтаФорма);
КонецПроцедуры

&НаСервере
Функция Форма700_00РассчитатьСуммуНалогаНаИмущество(ВыдаватьСообщения = Ложь)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("Дата0", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета - 1);
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Типовой.ИнвестицииВНедвижимость_);
	СписокСчетов.Добавить(ПланыСчетов.Типовой.ОсновныеСредства_);
    СписокСчетов.Добавить(ПланыСчетов.Типовой.БиологическиеАктивы);	
	СписокСчетов.Добавить(ПланыСчетов.Типовой.НематериальныеАктивы);
	Если ВключатьВРасчетСчет2933 Тогда
		СписокСчетов.Добавить(ПланыСчетов.Типовой.КапитальныйРемонтОС);
	КонецЕсли;
	Запрос.УстановитьПараметр("СписокСчетов",СписокСчетов);
	Запрос.УстановитьПараметр("СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);  	
	
	// поскольку начисление налога начинается со следующего месяца (ст.339 п.2), то оперируем значениям на начало месяца	
	
	ТекстЗапросаПоМесяцам = "";
	Для Счетчик = 1 по 13 Цикл
		Если Не ТекстЗапросаПоМесяцам = "" ТОгда
			ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам + "
			| ОБЪЕДИНИТЬ ВСЕ
			| ";
		КонецЕсли;
		ТекстЗапросаПоМесяцам =ТекстЗапросаПоМесяцам +  "
								|	ВЫБРАТЬ
								|	&Дата" + СокрЛП(Счетчик) + " как Период		                        
								| ";
		Запрос.УстановитьПараметр("Дата" + СокрЛП(Счетчик),  ДобавитьМесяц(НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),Счетчик-1));			
	КонецЦикла;	
	
	// Таблица "Объекты" - содержит объекты обложения налогом на имущество на начало каждого месяца. 
	//                     Получена на основе таблицы записей регистра сведений, соединенной с таблицей месяцев. 
				   
	ТекстЗапросаПоОбъектамИмущественногоНалога = "ВЫБРАТЬ
	                                                    |	Объекты.ПериодГода КАК ПериодГода,
	                                                    |	Объекты.ОбъектНалогообложения КАК ОбъектНалогообложения,
	                                                    |	ОбъектыИмущественногоНалога.Организация КАК Организация
	                                                    |ИЗ
	                                                    |	(ВЫБРАТЬ
	                                                    |		Объекты.ПериодГода КАК ПериодГода,
	                                                    |		Объекты.ОбъектНалогообложения КАК ОбъектНалогообложения,	                                                    
	                                                    |		МАКСИМУМ(Объекты.ПериодЗаписи) КАК ПериодЗаписи
	                                                    |	ИЗ
	                                                    |		(ВЫБРАТЬ
	                                                    |			Периоды.Период КАК ПериодГода,
	                                                    |			ОбъектыИмущественногоНалога.ОбъектНалогообложения КАК ОбъектНалогообложения,	                                                    
	                                                    |			ОбъектыИмущественногоНалога.Период КАК ПериодЗаписи
	                                                    |		ИЗ
	                                                    |			(" + ТекстЗапросаПоМесяцам + ") КАК Периоды
	                                                    |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыИмущественногоНалога КАК ОбъектыИмущественногоНалога
	                                                    |				ПО ОбъектыИмущественногоНалога.Период <= Периоды.Период	                                                    
	                                                    |					) КАК Объекты
	                                                    |	
	                                                    |	СГРУППИРОВАТЬ ПО
	                                                    |		Объекты.ОбъектНалогообложения,	                                                    
	                                                    |		Объекты.ПериодГода) КАК Объекты
	                                                    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыИмущественногоНалога КАК ОбъектыИмущественногоНалога
	                                                    |		ПО ОбъектыИмущественногоНалога.Период = Объекты.ПериодЗаписи
	                                                    |			И (ОбъектыИмущественногоНалога.Налогоплательщик = &Налогоплательщик
	                                                    |				И ОбъектыИмущественногоНалога.СтруктурнаяЕдиница В (&СписокСтруктурныхЕдиниц))
	                                                    |			И Объекты.ОбъектНалогообложения = ОбъектыИмущественногоНалога.ОбъектНалогообложения
	                                                    |ГДЕ
	                                                    |	ОбъектыИмущественногоНалога.НачислятьНалог = ИСТИНА";
														
	Запрос.Текст = ТекстЗапросаПоОбъектамИмущественногоНалога;
	ИтоговыйТекстЗапросаПоОбъектамИмущественногоНалога =" 
				   | ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |		Объекты.ПериодГода КАК ПериодГода,
				   |		Объекты.ОбъектНалогообложения КАК ОбъектНалогообложения,
				   |		Объекты.Организация КАК Организация
				   |ИЗ 
				   |	(" + ТекстЗапросаПоОбъектамИмущественногоНалога + ") КАК Объекты"; 			   
				   
	Запрос.Текст = ИтоговыйТекстЗапросаПоОбъектамИмущественногоНалога;				   
	
	// Таблица остатки и обороты содержит остаточную стоимость ОС и НМА на начало каждого месяца
	//                     Получена на основе таблицы ОстаткиИОбороты регистра бухгалтерии, соединенной с таблицей месяцев. 	
	
	ТекстЗапроса = "
				   |ВЫБРАТЬ
				   |	Периоды.Период Как ПериодГода,	               
				   |	СУММА(Объекты.ОстаточнаяСтоимостьОС) КАК ОстаточнаяСтоимостьОС,    // изменено
				   |	СУММА(Объекты.ОстаточнаяСтоимостьНМА) КАК ОстаточнаяСтоимостьНМА   // изменено
				   |Из   
				   |( " + ТекстЗапросаПоМесяцам + ") КАК Периоды
				   |ЛЕВОЕ СОЕДИНЕНИЕ
				   |(ВЫБРАТЬ
				   |	Объекты.ПериодГода КАК ПериодГода,
				   |	Объекты.Организация КАК Организация,
				   |	СУММА(ВЫБОР
				   |			КОГДА НЕ Объекты.ОбъектНалогообложения ССЫЛКА Справочник.НематериальныеАктивы
				   |				ТОГДА ОстаткиИОбороты.СуммаКонечныйОстаток
				   |			ИНАЧЕ 0
				   |		КОНЕЦ) КАК ОстаточнаяСтоимостьОС,
				   |	СУММА(ВЫБОР
				   |			КОГДА Объекты.ОбъектНалогообложения ССЫЛКА Справочник.НематериальныеАктивы
				   |				ТОГДА ОстаткиИОбороты.СуммаКонечныйОстаток
				   |			ИНАЧЕ 0
				   |		КОНЕЦ) КАК ОстаточнаяСтоимостьНМА
				   |ИЗ
				   |	(" + ИтоговыйТекстЗапросаПоОбъектамИмущественногоНалога + ") КАК Объекты
				   |	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				   |			ОстаткиИОбороты.ПериодГода КАК ПериодГода,
				   |			СУММА(ОстаткиИОбороты.СуммаКонечныйОстаток) КАК СуммаКонечныйОстаток,
				   |			ОстаткиИОбороты.Субконто1 КАК Субконто1
				   |		ИЗ
				   |			(ВЫБРАТЬ
				   |				ПериодыГода.ПериодГода КАК ПериодГода,
				   |				ТиповойОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
				   |				ТиповойОстаткиИОбороты.Субконто1 КАК Субконто1
				   |			ИЗ
				   |				(ВЫБРАТЬ
				   |					МАКСИМУМ(ТиповойОстаткиИОбороты.Период) КАК Период,
				   |					Периоды.Период КАК ПериодГода,
				   |					ТиповойОстаткиИОбороты.Субконто1 КАК Субконто1
				   |				ИЗ
				   |					(" + ТекстЗапросаПоМесяцам + ") КАК Периоды
				   |						ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&Дата0, &Дата13, Месяц, ДвиженияИГраницыПериода, Счет В ИЕРАРХИИ (&СписокСчетов), , ) КАК ТиповойОстаткиИОбороты
				   |						ПО Периоды.Период > ТиповойОстаткиИОбороты.Период
				   |				
				   |				СГРУППИРОВАТЬ ПО
				   |					ТиповойОстаткиИОбороты.Субконто1,
				   |					Периоды.Период) КАК ПериодыГода
				   |					ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&Дата0, &Дата13, Месяц, ДвиженияИГраницыПериода, Счет В ИЕРАРХИИ (&Списоксчетов), , ) КАК ТиповойОстаткиИОбороты
				   |					ПО ПериодыГода.Период = ТиповойОстаткиИОбороты.Период
				   |						И ПериодыГода.Субконто1 = ТиповойОстаткиИОбороты.Субконто1) КАК ОстаткиИОбороты
				   |		
				   |		СГРУППИРОВАТЬ ПО
				   |			ОстаткиИОбороты.Субконто1,
				   |			ОстаткиИОбороты.ПериодГода) КАК ОстаткиИОбороты
				   |		ПО Объекты.ПериодГода = ОстаткиИОбороты.ПериодГода
				   |			И Объекты.ОбъектНалогообложения = ОстаткиИОбороты.Субконто1
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	Объекты.Организация,
				   |	Объекты.ПериодГода ) Как Объекты
				   |ПО 
				   | Периоды.Период = Объекты.ПериодГода 
				   |
				   |СГРУППИРОВАТЬ ПО     // добавлено
				   |    Периоды.Период   // добавлено
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	ПериодГода";    	
				   
	Запрос.Текст = ТекстЗапроса;
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() И ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru='Данные для расчета налога на имущество за отчетный период отсутствуют...'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
		Возврат 0;
	КонецЕсли;
	
	Выборка 	   = РезультатЗапроса.Выбрать();
	ИтогоСтоимость = 0;
	
	Пока Выборка.Следующий() Цикл  		    					
		ИтогоСтоимость = ИтогоСтоимость + Окр(?(Выборка.ОстаточнаяСтоимостьОС <> NULL, Выборка.ОстаточнаяСтоимостьОС, 0) + ?(Выборка.ОстаточнаяСтоимостьНМА <> NULL, Выборка.ОстаточнаяСтоимостьНМА, 0));
	КонецЦикла;			
	
	СреднегодоваяСтоимость = Окр(ИтогоСтоимость/13, 2);
					                             		
	СтавкаНалога = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.НалогНаИмущество, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);		
	СуммаНалога = Окр(СреднегодоваяСтоимость * СтавкаНалога/100,2);		
				     	
	Возврат СуммаНалога;	

КонецФункции

&НаКлиенте
Процедура Форма700ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Область.СодержитЗначение Тогда
		Значение = Область.Значение;
	Иначе
		Возврат;		
	КонецЕсли;
	
	Ячейка = Область.Имя;
			
	Если (Найти(Ячейка, "УчредительДоверительногоУправления") > 0)
	 ИЛИ (Найти(Ячейка, "ЯвляющийсяДоверительнымУправляющим") > 0)
	 ИЛИ (Найти(Ячейка, "ФизическоеЛицо") > 0)
	 ИЛИ (Найти(Ячейка, "Недропользователь") > 0) 
	 ИЛИ (Найти(Ячейка, "ЧастныйНотариус") > 0)  Тогда
	 	Форма700ПриИзмененииНаСервере(Ячейка, Значение); 	 					
	КонецЕсли;
	
	Если (Найти(Ячейка, "Недропользователь") > 0) Тогда
		Форма700ПриИзмененииНаСервере(Ячейка, Значение, Истина);
	КонецЕсли;
	
	Модифицированность = истина;
	
КонецПроцедуры


// 700.01

&НаСервере
// Процедура обновляет данные вычисляемых ячеек табличного 
// документа
//
Процедура Форма700_01ЗаполнитьАвто(КодФормы, Перезаполнить)
	
	Если Перезаполнить Тогда	
		ТекстСообщения = НСтр("ru = 'Расчет формы 700.01'");   		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
		
	// таблица, содержащая детали расчета для расшифровки приложения - мТаблицаРасшифровкиналогаНаТранспорт		
	мТаблицаРасшифровкиНалогаНаТранспорт = РеквизитФормыВЗначение("ТаблицаРасшифровкиНалогаНаТранспорт");
	мТаблицаРасшифровкиНалогаНаТранспорт = Форма700_01РассчитатьДанныеФормыСервер(Истина);
	мТаблицаРасшифровкиНалогаНаТранспорт.Колонки.Добавить("СтавкаНалога", 												,"Ставка налога");	
	мТаблицаРасшифровкиНалогаНаТранспорт.Колонки.Добавить("ГрафаОтчета", 												,"Графа отчета");	
	мТаблицаРасшифровкиНалогаНаТранспорт.Колонки.Добавить("СуммаНалога", 				Новый ОписаниеТипов("Число")	,"Сумма налога");
	мТаблицаРасшифровкиНалогаНаТранспорт.Колонки.Добавить("БазоваяСуммаНалога", 		Новый ОписаниеТипов("Число")	,"Базовая сумма налога");
	мТаблицаРасшифровкиНалогаНаТранспорт.Колонки.Добавить("ПоказательРасчетаИмя", 										,"Имя показателя расчета");
	мТаблицаРасшифровкиНалогаНаТранспорт.Колонки.Добавить("ПоказательРасчетаЗначение", 	Новый ОписаниеТипов("Число")	,"Показатель расчета");
	мТаблицаРасшифровкиНалогаНаТранспорт.Колонки.Добавить("ПревышениеОбъема", 			Новый ОписаниеТипов("Число")	,"Превышение объема двигателя");
	
	ВеличинаМРП = РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьПоследнее(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета).РазмерМРПДляЦелейНалогообложения; 
								
	СтруктураСтавокНалога = СформироватьСтуктуруСтавокНалогаНаТранспортНаСервере();
	
	СтруктураОбязательныхРеквизитов = Новый Структура("ЛегковойАвтомобиль, ГрузовойАвтомобиль, Автобус, Катер, ЛетательныйАппарат, Мотоцикл, СамоходнаяМашина, ЖелезнодорожныйТяговыйПодвижнойСостав, МотороВагонныйПодвижнойСостав",
													"ОбъемДвигателя", "Грузоподъемность", "КоличествоПосадочныхМест",
													"МощностьВЛошадиныхСилах", "МощностьВКиловаттах", "МощностьВКиловаттах", "ОбъектНалогообложения", "МощностьВКиловаттах", "МощностьВКиловаттах");		                            	 
		
	// Номер строки формы передаем равным 001, так как формат описан как для многострочной формы, а реализация - как у обычной
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "Стр2", "001", Ложь);
	
	Для Каждого СтрокаОтчета Из мТаблицаРасшифровкиНалогаНаТранспорт Цикл		
		
		ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, КодФормы);
		
		Если НЕ ЗначениеЗаполнено(СтрокаОтчета.ВидТранспортногоСредства) Тогда
			
			ТекстСообщения = НСтр("ru='Для объекта %1 не указан вид транспортного средства. Расчет не произведен ...'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаОтчета.ПредставлениеОбъектаНалогообложения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
			
			Продолжить;
		КонецЕсли;						
		
		КоличествоМесяцев = СтрокаОтчета.КоличествоМесяцев;
		
		Попытка
			МетаданныеЗначенияПеречисления = Метаданные.Перечисления["ВидыТранспортныхСредств"].ЗначенияПеречисления[Перечисления.ВидыТранспортныхСредств.Индекс(СтрокаОтчета.ВидТранспортногоСредства)];
			ВидТранспортногоСредстваСтрока = СокрЛП(МетаданныеЗначенияПеречисления.Имя);			
		Исключение
			ВидТранспортногоСредстваСтрока = "";			
		КонецПопытки;

		// Значение ключевого реквизита
		ИмяРеквизита = "";
		ЗначениеПоказателя = 0;
		Если СтруктураОбязательныхРеквизитов.Свойство(ВидТранспортногоСредстваСтрока, ИмяРеквизита) Тогда
			ЗначениеПоказателя = СтрокаОтчета[ИмяРеквизита];								
		КонецЕсли;	   		
			                                                       		
		ИмяЯчейкиВидаТС = ПолучитьИмяЯчейкиВидаТСНаСервере(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, СтрокаОтчета.ВидТранспортногоСредства,
			ЗначениеПоказателя, СтрокаОтчета,СтрокаОтчета.ЕдиницаИзмеренияНалоговойБазы);
		
		Если ВидТранспортногоСредстваСтрока = "Мотоцикл" Тогда
			// У мотоцикла мощность в лошадиных силах и мощность в киловаттах хранится в ресурсе МощностьВКиловаттах.
			Если СтрокаОтчета.ЕдиницаИзмеренияНалоговойБазы = "251" Тогда // Лошадиные силы
				ВидТранспортногоСредстваСтрока = "МотоциклЛошадиныеСилы";		
			ИначеЕсли СтрокаОтчета.ЕдиницаИзмеренияНалоговойБазы = "214" Тогда // Киловатты
				ВидТранспортногоСредстваСтрока = "МотоциклКиловатты";	
			Иначе
				ВызватьИсключение НСтр("ru = 'Некорректное значение ресурса ""Ед. изм. налоговой базы"".'");
			КонецЕсли;
		Иначе
			ВидТранспортногоСредстваСтрока = ВидТранспортногоСредстваСтрока;
		КонецЕсли;
		
		// Подраздел 6.1
		Подраздел_6_1 = "";
		Если ВидТранспортногоСредстваСтрока = "ЛегковойАвтомобиль" 
			 И (ИмяЯчейкиВидаТС = "s_700_01_022"
			    ИЛИ ИмяЯчейкиВидаТС = "s_700_01_023"
				ИЛИ ИмяЯчейкиВидаТС = "s_700_01_024"
				ИЛИ ИмяЯчейкиВидаТС = "s_700_01_025"
				ИЛИ ИмяЯчейкиВидаТС = "s_700_01_026") Тогда
			ВидТранспортногоСредстваСтрока = "ЛегковойАвтомобиль_После31122013";
			Подраздел_6_1 = "_После31122013";
		КонецЕсли; 
		
		// для расшифровки		
		СтрокаОтчета.ПоказательРасчетаЗначение 	= ЗначениеПоказателя;
		Попытка
			// У мотоцикла мощность в лошадиных силах и мощность в киловаттах хранится в ресурсе МощностьВКиловаттах.
			Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) > Год('20150101') И ВидТранспортногоСредстваСтрока = "МотоциклЛошадиныеСилы" Тогда
				СтрокаОтчета.ПоказательРасчетаИмя = НСтр("ru = 'Мощность (лошадиные силы)'");
			ИначеЕсли Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) > Год('20150101') И ВидТранспортногоСредстваСтрока = "МотоциклКиловатты" Тогда
				СтрокаОтчета.ПоказательРасчетаИмя = НСтр("ru = 'Мощность (киловатты)'");
			Иначе
				СтрокаОтчета.ПоказательРасчетаИмя 	= Метаданные.РегистрыСведений.ПараметрыРасчетаТранспортногоНалога.Ресурсы[ИмяРеквизита].Синоним;
			КонецЕсли;
		Исключение			
			СтрокаОтчета.ПоказательРасчетаИмя 	= "";
		КонецПопытки;
		
		// меняем строку вида s_700_01_008 на 700.01.008
		СтрокаОтчета.ГрафаОтчета = СтрЗаменить(СтрЗаменить(ИмяЯчейкиВидаТС, "s_",""), "_", ".");
		
		// Базовая ставка Налога		
		ТаблицаСтавокНалога = Неопределено;				 
		Если СтруктураСтавокНалога.Свойство(ВидТранспортногоСредстваСтрока, ТаблицаСтавокНалога) Тогда				 	
			Если СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛетательныйАппарат 
				ИЛИ СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЖелезнодорожныйТяговыйПодвижнойСостав 
				ИЛИ СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.МотороВагонныйПодвижнойСостав Тогда
								
				СтрокаОтчета.СтавкаНалога = ПолучитьСтавкуНалогаНаТранспортДляОбъекта(ТаблицаСтавокНалога, ЗначениеПоказателя) * ЗначениеПоказателя;
			Иначе				
				СтрокаОтчета.СтавкаНалога = ПолучитьСтавкуНалогаНаТранспортДляОбъекта(ТаблицаСтавокНалога, ЗначениеПоказателя);
			КонецЕсли;			
		КонецЕсли;
		
		СуммаПревышения = 0;
		
		// Для легковых автомобилей рассчитываем размер превышения
		Если СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛегковойАвтомобиль Тогда							
			СуммаПревышения = ПолучитьРазмерПревышенияПоОбъему(СтрокаОтчета.ВидТранспортногоСредства, ЗначениеПоказателя, СтруктураСтавокНалога, Подраздел_6_1);
		КонецЕсли;
		
		СтрокаОтчета.ПревышениеОбъема = СуммаПревышения;
		
		// Для летательных аппаратов и ЖД - показываем суммарную мощность
		Если СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛетательныйАппарат ИЛИ  
			СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЖелезнодорожныйТяговыйПодвижнойСостав ИЛИ
			СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.МотороВагонныйПодвижнойСостав Тогда							
			
			// с накоплением
			Мощность = ЗначениеПоказателя + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяЯчейкиВидаТС + "_D");
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяЯчейкиВидаТС + "_D", Мощность, 	Ложь);
		КонецЕсли;     		
		
		// Расчетные Величины
		// Сумма налога (тенге)
		// указывается сумма налога, определяемого по легковым автомобилям как 
		// ЗначениеПоказателя * СтавкаНалога + СуммаПревышения*7 тенге, для остальных транспортных 
		// средств и летательных аппаратов как ЗначениеПоказателя * СтавкаНалога;   		
		
		Если СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛегковойАвтомобиль Тогда
			СуммаНалога = СтрокаОтчета.СтавкаНалога * ВеличинаМРП + СуммаПревышения * 7;
			
			СуммаПревышения = СуммаПревышения + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяЯчейкиВидаТС + "_D"); 
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяЯчейкиВидаТС + "_D", СуммаПревышения, 	Ложь);
			
		Иначе	
			СуммаНалога = СтрокаОтчета.СтавкаНалога * ВеличинаМРП;
		КонецЕсли;
	
		ПоправочныйКоэффициент = ПолучитьРазмерКорректировки(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, СтрокаОтчета.ВидТранспортногоСредства, СтрокаОтчета, СтруктураСтавокНалога);				 	 
		
		// Сумма налога с учетом поправочного коэффициента за налоговый период (тенге) 
		// (СуммаНалога х Поправочный)
		СуммаНалога = СуммаНалога * ПоправочныйКоэффициент;
		
		СтрокаОтчета.БазоваяСуммаНалога = СуммаНалога; // налог без учета количества месяцев
		
		// * 700.01.011 - Сумма налога за фактический период владения 
		//                (700.01.010 / 12 х 700.01.003) 		
		СтрокаОтчета.СуммаНалога = Окр(СуммаНалога /12* СтрокаОтчета.КоличествоМесяцев,0);
		
		// с накоплением		
		ОбщееКоличествоОС  		= 1 + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяЯчейкиВидаТС + "_B");
		ОбщаяСуммаНалога 		= СтрокаОтчета.СуммаНалога + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяЯчейкиВидаТС + "_C");
		ОбщееКоличествоМесяцев 	= КоличествоМесяцев + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, ИмяЯчейкиВидаТС + "_E"); 
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяЯчейкиВидаТС + "_B", ОбщееКоличествоОС,		Ложь);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяЯчейкиВидаТС + "_C", ОбщаяСуммаНалога, 	 	Ложь); 		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяЯчейкиВидаТС + "_E", ОбщееКоличествоМесяцев, Ложь);		
		
	КонецЦикла;	 
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, КодФормы, Перезаполнить);                	
	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы);
	
	ЗначениеВРеквизитФормы(мТаблицаРасшифровкиНалогаНаТранспорт, "ТаблицаРасшифровкиНалогаНаТранспорт");
		
КонецПроцедуры // Форма700ЗаполнитьНалогНаИмущество()

&НаСервере
Процедура Форма700_01Расчет(Изменено = Ложь)
	
	Перем СтруктураГруппы;

	КодФормы = "Форма700_01";
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, КодФормы);

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Рассчитаем итоговую ячейку для передачи итогов в форму 700.00

	s_700_01_Итого_C = 0;
	Для Счетчик = 1 по 33 Цикл
		s_700_01_Итого_C = s_700_01_Итого_C + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_700_01_0" + Формат(Счетчик, "ЧЦ=2; ЧВН=") + "_C");
	КонецЦикла;	
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы, "s_700_01_Итого_C", s_700_01_Итого_C, Истина);	
			 
	Модифицированность = Истина;	
	       	 	
КонецПроцедуры

&НаСервере
Функция Форма700_01РассчитатьДанныеФормыСервер(ВыдаватьСообщения = Ложь) 
	
	Запрос = Новый Запрос;
	// Сначала базовая таблица периодов
	// поскольку начисление налога начинается с 1-го числа месяца приобретения (ст.348 п.2), 
	// то оперируем значениям на конец месяца
	// т.е. если объект присутствует на конец месяца, то за этот месяц необходимо начислять налог.
	ТекстЗапросаПоМесяцам = "";
	Для Счетчик = 1 по 12 Цикл
		Если Не ТекстЗапросаПоМесяцам = "" ТОгда
			ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам + "
			| ОБЪЕДИНИТЬ ВСЕ
			| ";
		КонецЕсли;
		ТекстЗапросаПоМесяцам =ТекстЗапросаПоМесяцам +  "
								|	ВЫБРАТЬ
								|	&Дата" + СокрЛП(Счетчик) + " КАК Период		                        
								| ";
		Запрос.УстановитьПараметр("Дата" + СокрЛП(Счетчик), КонецМесяца(ДобавитьМесяц(НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), Счетчик-1)));	
	КонецЦикла;	
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Объекты.ПериодГода КАК ПериодГода,
	               |	Объекты.ОбъектНалогообложения КАК ОбъектНалогообложения,
	               |	Объекты.Организация КАК Организация,
	               |	МАКСИМУМ(Объекты.ПериодЗаписи) КАК ПериодЗаписи,
	               |	Объекты.Налогоплательщик КАК Налогоплательщик
	               |ПОМЕСТИТЬ ВТ_ОбъектыНалога
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Периоды.Период КАК ПериодГода,
	               |		ОбъектыТранспортногоНалога.ОбъектНалогообложения КАК ОбъектНалогообложения,
	               |		ОбъектыТранспортногоНалога.Организация КАК Организация,
	               |		ОбъектыТранспортногоНалога.Период КАК ПериодЗаписи,
	               |		ОбъектыТранспортногоНалога.Регистратор КАК Регистратор,
	               |		ОбъектыТранспортногоНалога.Налогоплательщик КАК Налогоплательщик
	               |	ИЗ
	               |		(" + ТекстЗапросаПоМесяцам + ") КАК Периоды
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыТранспортногоНалога КАК ОбъектыТранспортногоНалога
	               |			ПО (ОбъектыТранспортногоНалога.Период <= Периоды.Период)
	               |				И (ОбъектыТранспортногоНалога.Налогоплательщик = &Налогоплательщик)) КАК Объекты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Объекты.ОбъектНалогообложения,
	               |	Объекты.Организация,
	               |	Объекты.Налогоплательщик,
	               |	Объекты.ПериодГода
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОбщийЗапрос.ОбъектНалогообложения,
	               |	ПРЕДСТАВЛЕНИЕ(ОбщийЗапрос.ОбъектНалогообложения) КАК ПредставлениеОбъектаНалогообложения,
	               |	ОбщийЗапрос.Организация,
	               |	ЕСТЬNULL(ОбщийЗапрос.КоличествоМесяцевИспользования, 0) КАК КоличествоМесяцев,
	               |	ПараметрыРасчетаТранспортногоНалога.ВидТранспортногоСредства,
	               |	ЕСТЬNULL(ПараметрыРасчетаТранспортногоНалога.Грузоподъемность, 0) КАК Грузоподъемность,
	               |	ЕСТЬNULL(ПараметрыРасчетаТранспортногоНалога.ДатаВыпуска, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВыпуска,
	               |	ЕСТЬNULL(ПараметрыРасчетаТранспортногоНалога.ДатаПриобретения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПриобретения,
	               |	ЕСТЬNULL(ПараметрыРасчетаТранспортногоНалога.КоличествоПосадочныхМест, 0) КАК КоличествоПосадочныхМест,
	               |	ЕСТЬNULL(ПараметрыРасчетаТранспортногоНалога.МощностьВКиловаттах, 0) КАК МощностьВКиловаттах,
	               |	ЕСТЬNULL(ПараметрыРасчетаТранспортногоНалога.МощностьВЛошадиныхСилах, 0) КАК МощностьВЛошадиныхСилах,
	               |	ПараметрыРасчетаТранспортногоНалога.НомерТранспортногоСредства,
	               |	ЕСТЬNULL(ПараметрыРасчетаТранспортногоНалога.ОбъемДвигателя, 0) КАК ОбъемДвигателя,
	               |	ЕСТЬNULL(ПараметрыРасчетаТранспортногоНалога.ПроизводствоСтранСНГ, ЛОЖЬ) КАК ПроизводствоСтранСНГ,
	               |	ЕСТЬNULL(ПараметрыРасчетаТранспортногоНалога.ЭксплуатацияВРКдо1апреля1999г, ЛОЖЬ) КАК ЭксплуатацияВРКдо1апреля,
				   |	ПараметрыРасчетаТранспортногоНалога.ДатаВвозаНаТерриториюРК КАК ДатаВвозаНаТерриториюРК,
				   |	&ЕдиницаИзмеренияНалоговойБазы КАК ЕдиницаИзмеренияНалоговойБазы,
				   |	ВЫБОР
				   |	КОГДА ПараметрыРасчетаТранспортногоНалога.СтранаПроизводитель = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
				   |		ТОГДА ИСТИНА
				   |	ИНАЧЕ ЛОЖЬ
				   |	КОНЕЦ КАК ПроизведеноВРК
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Объекты.ОбъектНалогообложения КАК ОбъектНалогообложения,
	               |		Объекты.Организация КАК Организация,
	               |		СУММА(Объекты.КоличествоМесяцев) КАК КоличествоМесяцевИспользования,
	               |		Объекты.Налогоплательщик КАК Налогоплательщик
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			Объекты.ПериодГода КАК ПериодГода,
	               |			Объекты.ОбъектНалогообложения КАК ОбъектНалогообложения,
	               |			Объекты.Организация КАК Организация,
	               |			Объекты.ПериодЗаписи КАК ПериодЗаписи,
	               |			ВЫБОР
	               |				КОГДА ОбъектыТранспортногоНалога.НачислятьНалог
	               |					ТОГДА 1
	               |				ИНАЧЕ 0
	               |			КОНЕЦ КАК КоличествоМесяцев,
	               |			ОбъектыТранспортногоНалога.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	               |			Объекты.Налогоплательщик КАК Налогоплательщик
	               |		ИЗ
	               |			ВТ_ОбъектыНалога КАК Объекты
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыТранспортногоНалога КАК ОбъектыТранспортногоНалога
	               |				ПО Объекты.ПериодЗаписи = ОбъектыТранспортногоНалога.Период
	               |					И Объекты.ОбъектНалогообложения = ОбъектыТранспортногоНалога.ОбъектНалогообложения
	               |					И Объекты.Организация = ОбъектыТранспортногоНалога.Организация
	               |		ГДЕ
	               |			ОбъектыТранспортногоНалога.СтруктурнаяЕдиница В(&СписокСтруктурныхЕдиниц)) КАК Объекты
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		Объекты.ОбъектНалогообложения,
	               |		Объекты.Организация,
	               |		Объекты.Налогоплательщик) КАК ОбщийЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыРасчетаТранспортногоНалога КАК ПараметрыРасчетаТранспортногоНалога
	               |		ПО ОбщийЗапрос.Организация = ПараметрыРасчетаТранспортногоНалога.Организация
	               |			И ОбщийЗапрос.ОбъектНалогообложения = ПараметрыРасчетаТранспортногоНалога.ОсновноеСредство
	               |ГДЕ
	               |	ОбщийЗапрос.КоличествоМесяцевИспользования > 0";
				                                                           				   
    Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	
	Запрос.Текст = ТекстЗапроса;
	
	Если Метаданные.РегистрыСведений.ПараметрыРасчетаТранспортногоНалога.Ресурсы.Найти("ЕдиницаИзмеренияНалоговойБазы") = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЕдиницаИзмеренияНалоговойБазы", """214""");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЕдиницаИзмеренияНалоговойБазы", "ЕстьNull(ПараметрыРасчетаТранспортногоНалога.ЕдиницаИзмеренияНалоговойБазы, """")");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() И ВыдаватьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данные для заполнения формы 700.01 за отчетный период отсутствуют...'"));	
	КонецЕсли;
	
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
				     	
	Возврат ТаблицаРезультата;		 
	
КонецФункции // Форма700_01РассчитатьДанныеФормы()

&НаСервере
// Функция возвращает структуру данных на основе
// макета "СтавкиНалогаНаТранспорт"
//
Функция СформироватьСтуктуруСтавокНалогаНаТранспортНаСервере() Экспорт
	
	СтруктураСтавок = Новый Структура;			
	МакетСтавок = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("СтавкиНалогаНаТранспорт");
	
	СтруктураТаблицы = Новый ТаблицаЗначений;
	СтруктураТаблицы.Колонки.Добавить("НижнийПредел");
	СтруктураТаблицы.Колонки.Добавить("ВерхнийПредел");
	СтруктураТаблицы.Колонки.Добавить("БезОграничения");
	СтруктураТаблицы.Колонки.Добавить("СтавкаНалога");
	
	Область = МакетСтавок.Области["Строка2017"];
	Для Ном = Область.Верх По Область.Низ Цикл
		
		Наименование  = СокрЛП(МакетСтавок.Область(Ном, 1).Текст);
		НижнийПредел  = СокрЛП(МакетСтавок.Область(Ном, 2).Текст);
		ВерхнийПредел = СокрЛП(МакетСтавок.Область(Ном, 3).Текст);
		СтавкаНалога  = СокрЛП(МакетСтавок.Область(Ном, 4).Текст);
		
		Если Не СтруктураСтавок.Свойство(Наименование) Тогда			
			СтруктураСтавок.Вставить(Наименование, СтруктураТаблицы.Скопировать());
		КонецЕсли;	
		
		Строка = СтруктураСтавок[Наименование].Добавить();
		Строка.БезОграничения = ВерхнийПредел = "*";
		Строка.НижнийПредел   = ?(Не НижнийПредел = "*", Число(НижнийПредел), 0);
		Строка.ВерхнийПредел  = ?(НЕ ВерхнийПредел = "*",Число(ВерхнийПредел), 999999);
		Строка.СтавкаНалога	  = Число(СтавкаНалога);
		
	КонецЦикла;
		
	Возврат СтруктураСтавок;
	
КонецФункции

&НаСервереБезКонтекста
// Функция возвращает имя ячейки вида ТС формы 700.02,
// в зависимости от вида транспортных средств
//
Функция ПолучитьИмяЯчейкиВидаТСНаСервере(мДатаКонцаПериодаОтчета, ВидТС, Категория = 0, СтрокаОтчета = Неопределено, ЕдиницаИзмеренияНалоговойБазы = Неопределено)
	
	ИмяЯчейкиВидаТС = Неопределено;		 		 
	
	Если ВидТС = Перечисления.ВидыТранспортныхСредств.ГрузовойАвтомобиль Тогда		 
		Если Категория <= 1 Тогда
			ИмяЯчейкиВидаТС = "s_700_01_001"
		ИначеЕсли Категория <= 1.5 Тогда
			ИмяЯчейкиВидаТС = "s_700_01_002"  
		ИначеЕсли Категория <= 5 Тогда
			ИмяЯчейкиВидаТС = "s_700_01_003"
		Иначе		 
			ИмяЯчейкиВидаТС = "s_700_01_004"
		КонецЕсли; 		 
	ИначеЕсли ВидТС = Перечисления.ВидыТранспортныхСредств.СамоходнаяМашина Тогда		 
		 ИмяЯчейкиВидаТС = "s_700_01_005";  	
	ИначеЕсли ВидТС = Перечисления.ВидыТранспортныхСредств.Автобус Тогда
		Если Категория <= 12 Тогда
			ИмяЯчейкиВидаТС = "s_700_01_006"
		ИначеЕсли Категория <= 25 Тогда
			ИмяЯчейкиВидаТС = "s_700_01_007"  		
		Иначе		 
			ИмяЯчейкиВидаТС = "s_700_01_008"
		КонецЕсли; 		 
	ИначеЕсли ВидТС = Перечисления.ВидыТранспортныхСредств.Мотоцикл   Тогда 		 
		Если ЕдиницаИзмеренияНалоговойБазы = "251" Тогда // Лошадиные силы
			ПределКатегории = 75;
		Иначе // Киловатты
			ПределКатегории = 55;
		КонецЕсли;
		
		Если Категория <= ПределКатегории Тогда
			ИмяЯчейкиВидаТС = "s_700_01_009"
		Иначе
			ИмяЯчейкиВидаТС = "s_700_01_010"  		
		КонецЕсли;	
	ИначеЕсли ВидТС = Перечисления.ВидыТранспортныхСредств.Катер Тогда
		Если Категория <= 160 Тогда
			ИмяЯчейкиВидаТС = "s_700_01_011"
		ИначеЕсли Категория <= 500 Тогда
			ИмяЯчейкиВидаТС = "s_700_01_012"	
		ИначеЕсли Категория <= 1000 Тогда
			ИмяЯчейкиВидаТС = "s_700_01_013"		
		Иначе
			ИмяЯчейкиВидаТС = "s_700_01_014"  		
		КонецЕсли;	                       	
	ИначеЕсли ВидТС = Перечисления.ВидыТранспортныхСредств.ЛегковойАвтомобиль Тогда
						
		Категория6_1 = (Категория >= 3000 И (СтрокаОтчета.ДатаВвозаНаТерриториюРК > Дата("20131231") ИЛИ (СтрокаОтчета.ДатаВыпуска > Дата("20131231") И СтрокаОтчета.ПроизведеноВРК)));
		
		Если Категория6_1 Тогда
			Если Категория <= 3200 Тогда
				ИмяЯчейкиВидаТС = "s_700_01_022"
			ИначеЕсли Категория <= 3500 Тогда
				ИмяЯчейкиВидаТС = "s_700_01_023"
			ИначеЕсли Категория <= 4000 Тогда
				ИмяЯчейкиВидаТС = "s_700_01_024"
			ИначеЕсли Категория <= 5000 Тогда
				ИмяЯчейкиВидаТС = "s_700_01_025"
			ИначеЕсли Категория > 5000 Тогда 
				ИмяЯчейкиВидаТС = "s_700_01_026"  		
			КонецЕсли;			
		Иначе			
			Если Категория <= 1100 Тогда
				ИмяЯчейкиВидаТС = "s_700_01_015"
			ИначеЕсли Категория <= 1500 Тогда
				ИмяЯчейкиВидаТС = "s_700_01_016"	
			ИначеЕсли Категория <= 2000 Тогда
				ИмяЯчейкиВидаТС = "s_700_01_017"
			ИначеЕсли Категория <= 2500 Тогда
				ИмяЯчейкиВидаТС = "s_700_01_018"	
			ИначеЕсли Категория <= 3000 Тогда
				ИмяЯчейкиВидаТС = "s_700_01_019"	
			ИначеЕсли Категория <= 4000 Тогда
				ИмяЯчейкиВидаТС = "s_700_01_020"	
			Иначе
				ИмяЯчейкиВидаТС = "s_700_01_021"  		
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли ВидТС = Перечисления.ВидыТранспортныхСредств.ЛетательныйАппарат Тогда
		// 01 июля отчетного года
		ОтчетнаяДата = Дата(Год(мДатаКонцаПериодаОтчета), 07, 01) ;

		КоличествоЛет = РазностьДатВМесяцах(СтрокаОтчета.ДатаВыпуска, ОтчетнаяДата)/12;
		Если КоличествоЛет <=5 Тогда
			Если СтрокаОтчета.ЭксплуатацияВРКдо1апреля = Ложь Тогда		
				ИмяЯчейкиВидаТС = "s_700_01_027"  		
			Иначе		
				ИмяЯчейкиВидаТС = "s_700_01_030"  		
			КонецЕсли;	
		ИначеЕсли КоличествоЛет <=15 Тогда
			Если СтрокаОтчета.ЭксплуатацияВРКдо1апреля = Ложь Тогда		
				ИмяЯчейкиВидаТС = "s_700_01_028"  		
			Иначе		
				ИмяЯчейкиВидаТС = "s_700_01_031"  		
			КонецЕсли;				
		Иначе
			Если СтрокаОтчета.ЭксплуатацияВРКдо1апреля = Ложь Тогда		
				ИмяЯчейкиВидаТС = "s_700_01_029"  		
			Иначе		
				ИмяЯчейкиВидаТС = "s_700_01_032"  		
			КонецЕсли;	
		КонецЕсли;	
		 
	 ИначеЕсли ВидТС = Перечисления.ВидыТранспортныхСредств.ЖелезнодорожныйТяговыйПодвижнойСостав 
		 	ИЛИ ВидТС = Перечисления.ВидыТранспортныхСредств.МотороВагонныйПодвижнойСостав  Тогда
		 ИмяЯчейкиВидаТС = "s_700_01_033"  		
	КонецЕсли;  	 
	 
	Возврат ИмяЯчейкиВидаТС;
	
КонецФункции // ПолучитьИмяЯчейкиВидаТС()

&НаСервереБезКонтекста
// Возвращает полное количество месяцев между двумя датами
//
Функция РазностьДатВМесяцах(знач Дата1, Дата2)
	
	КоличествоЛет     = Год(Дата2) - Год(Дата1);
	КоличествоМесяцев = Месяц(Дата2) - Месяц(Дата1);	
	// корректировка для случая Дата1 = 15 марта, Дата2 = 10 апреля. месяц еще не истек
	Если НЕ Месяц(Дата2) = Месяц(Дата1) И
		День(Дата2) < День(Дата1)	ТОгда
		КоличествоМесяцев =  КоличествоМесяцев - 1;
	КонецЕсли;	                                              	
	РазностьВМесяцах = КоличествоЛет * 12 + КоличествоМесяцев;		
	
	Возврат РазностьВМесяцах;	                              	
	
КонецФункции 

&НаСервереБезКонтекста
// Функция определяет по таблице ставок ставку налога в 
// зависимости от значения показателя, находящегося в пределах
// нижнего и верхнего предела из таблицы ставок
//
Функция ПолучитьСтавкуНалогаНаТранспортДляОбъекта(ТаблицаСтавок, ЗначениеПоказателя = Неопределено, РассчитатьОтПревышения = 0, ОбъемПревышения = 0) 
	
	Если ЗначениеПоказателя = Неопределено Тогда
		ЗначениеПоказателя  = 0;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ТаблицаСтавок) = Тип("ТаблицаЗначений") Тогда	
		Возврат 0;
	КонецЕсли;	    
	ТаблицаСтавок.Сортировать("НижнийПредел");
	
	Для Каждого СтрокаСтавок из ТаблицаСтавок Цикл
		
		НижнийПредел   = СтрокаСтавок.НижнийПредел;
		ВерхнийПредел  = СтрокаСтавок.ВерхнийПредел;
		БезОграничения = СтрокаСтавок.БезОграничения;
		
		Если БезОграничения Тогда
			
			Если РассчитатьОтпревышения = 1 Тогда
				ОбъемПревышения = ЗначениеПоказателя - НижнийПредел;				
				Если ОбъемПревышения < 0 Тогда
					ОбъемПревышения = 0;
					Возврат 0;
				КонецЕсли;					
			КонецЕсли;
			
			Возврат СтрокаСтавок.СтавкаНалога;
			
		КонецЕсли;
		
		Если (ЗначениеПоказателя > НижнийПредел) И ((ЗначениеПоказателя <= ВерхнийПредел) ИЛИ БезОграничения) Тогда			
			 
			Если РассчитатьОтпревышения = 1 Тогда
				ОбъемПревышения = ЗначениеПоказателя - НижнийПредел;				
			КонецЕсли;      
			
			Возврат СтрокаСтавок.СтавкаНалога;
			
		КонецЕсли;	
		
	КонецЦикла;
              	
	Возврат 0;
	
КонецФункции

&НаСервереБезКонтекста
//  Возвращает размер первышения по объему двигателя 
//  для легковых автомобилей.
//
Функция ПолучитьРазмерПревышенияПоОбъему(ВидТранспортногоСредства, ЗначениеХарактеристикиОбъекта, СтруктураСтавокНалога, Подраздел_6_1)
	
	Если ТипЗнч(ВидТранспортногоСредства) = Тип("ПеречислениеСсылка.ВидыТранспортныхСредств") 
		И ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛегковойАвтомобиль Тогда
		
		ТаблицаСтавокНалога = Неопределено;				 
		Если СтруктураСтавокНалога.Свойство("ПревышенияПоVЛегковых" + Подраздел_6_1, ТаблицаСтавокНалога) Тогда				 	
			ОбъемПревышения = 0;
			ПолучитьСтавкуНалогаНаТранспортДляОбъекта(ТаблицаСтавокНалога, ЗначениеХарактеристикиОбъекта, 1, ОбъемПревышения);
			Возврат ОбъемПревышения;
		КонецЕсли;	
		
	КонецЕсли;	

	Возврат 0;
	
КонецФункции

&НаСервереБезКонтекста
//  Возвращает размер корректировки налога для случаев, указанных в п. 3,4,5 и 7 статьи 347 НК РК
//
Функция ПолучитьРазмерКорректировки(мДатаКонцаПериодаОтчета, ВидТранспортногоСредства, ХарактеристикиОбъекта, СтруктураСтавокНалога)
	
	ПоправочныйКоэффициент = 1;
	Если НЕ ТипЗнч(ВидТранспортногоСредства) = Тип("ПеречислениеСсылка.ВидыТранспортныхСредств")
		ИЛИ НЕ ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛетательныйАппарат Тогда
		Возврат ПоправочныйКоэффициент;
	КонецЕсли;
	
	// 01 июля отчетного года
	ОтчетнаяДата = Дата(Год(мДатаКонцаПериодаОтчета), 07, 01) ;
	
	// - Коэффициенты (*К) - летательные аппараты
	Если ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛетательныйАппарат И ХарактеристикиОбъекта.ДатаВыпуска <> Дата(1,1,1) Тогда
		 
		 ТаблицаСтавокНалога = Неопределено;				  
		 Если ХарактеристикиОбъекта.ЭксплуатацияВРКдо1апреля = Ложь Тогда
		 	 Если СтруктураСтавокНалога.Свойство("КЛетательныеАппаратыПосле010499", ТаблицаСтавокНалога) Тогда				 	
				ПоправочныйКоэффициент = ПолучитьСтавкуНалогаНаТранспортДляОбъекта(ТаблицаСтавокНалога, РазностьДатВМесяцах(ХарактеристикиОбъекта.ДатаВыпуска, ОтчетнаяДата)/12) ;						
			 КонецЕсли;					 											
		 Иначе
			 Если СтруктураСтавокНалога.Свойство("КЛетательныеАппаратыДо010499", ТаблицаСтавокНалога) Тогда				 	
				ПоправочныйКоэффициент = ПолучитьСтавкуНалогаНаТранспортДляОбъекта(ТаблицаСтавокНалога, РазностьДатВМесяцах(ХарактеристикиОбъекта.ДатаВыпуска, ОтчетнаяДата)/12) ;						
			 КонецЕсли;					 											
		 КонецЕсли;	
		 
	КонецЕсли;
		
	Возврат ПоправочныйКоэффициент;	
	
КонецФункции

// 700.02

&НаСервере
// Процедура обновляет данные вычисляемых ячеек табличного 
// документа
//
Процедура Форма700_02ЗаполнитьАвто(КодФормы, Перезаполнить) 
		
	Если Перезаполнить Тогда	
		ТекстСообщения = НСтр("ru = 'Заполнение формы 700.02'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
		
	ТекущаяСтраница = 1;
	ВсегоСтраниц = 1;
		
	ТаблицаОтчета = Форма700_02РассчитатьДанныеФормы(Истина);	
		 
	Если ТаблицаОтчета.Количество() <> 0 Тогда
		
		СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, КодФормы);
					                             	
		Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
			НомерСтроки = 2;
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
			ТаблицаСтрокГруппы.Очистить();
			
			
			Для Каждого СтрокаОтчета Из ТаблицаОтчета Цикл  			
							
				// заполняем данные строки в форме отчета
			 	Элемент = ТаблицаСтрокГруппы.Добавить();   			 
				
				Если ИмяГруппы = "ЛистА" Тогда
					
					
					//Так должны заполнять по отдельности значения выборки 
					//для каждого листа.
					// местонахождение в ИС ЭФ представлено двумя строками длиной 27 и 34 символа соответственно
					МестонахождениеУчастка = СокрЛП(СтрокаОтчета.МестонахождениеУчастка);
					Элемент.Ф70002_001_1 = СокрЛП(Лев(МестонахождениеУчастка, 27));
					Элемент.Ф70002_001_2 = СокрЛП(Сред(МестонахождениеУчастка, 28, СтрДлина(МестонахождениеУчастка) - 27));
					РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы, Элемент, "Ф70002_001_1", ?(СтрокаОтчета.ОбъектНалогообложения = NULL, Неопределено, СтрокаОтчета.ОбъектНалогообложения));
					РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы, Элемент, "Ф70002_001_2", ?(СтрокаОтчета.ОбъектНалогообложения = NULL, Неопределено, СтрокаОтчета.ОбъектНалогообложения));
					
					Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаОтчета.КадастровыйНомер) Тогда
						Элемент.Ф70002_002 = СтрокаОтчета.КадастровыйНомер;
						РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы, Элемент, "Ф70002_002", ?(СтрокаОтчета.ОбъектНалогообложения = NULL, Неопределено, СтрокаОтчета.ОбъектНалогообложения));
					Иначе
						
						ТекстСообщения = НСтр("ru='Для объекта налогообложения ""%1"" кадастровый номер ""%2"" содержит нечисловые символы.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаОтчета.ОбъектНалогообложения, СтрокаОтчета.КадастровыйНомер);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						ТекстСообщения = НСтр("ru='Значение не помещено в форму!'");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
					КонецЕсли;
				
					Элемент.Ф70002_003   = СтрокаОтчета.ОбщаяПлощадь;
                    Элемент.Ф70002_003_1 = СтрокаОтчета.ПлощадьНеОблагаемая;	 
					Элемент.Ф70002_003_2 = СтрокаОтчета.ПлощадьОблагаемая;	 
					
					ИмяЯчейкиЕдиницыИзмерения = ПолучитьИмяЯчейкиединицыИзмеренияЗемельногоУчастка(СтрокаОтчета.ЕдиницаИзмерения);
				 	Элемент[ИмяЯчейкиЕдиницыИзмерения] = "X";    				
					
					Если ЗначениеЗаполнено(СтрокаОтчета.КатегорияЗемель) Тогда
						ИмяЯчейкиКатегорииЗемель = ПолучитьИмяЯчейкиКатегорииЗемель(СтрокаОтчета.КатегорияЗемель);
						Элемент[ИмяЯчейкиКатегорииЗемель] = "X";
					Иначе
						ТекстСообщения = НСтр("ru='Для объекта налогообложения ""%1"" не заполнено поле ""Категория земель"".'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаОтчета.ОбъектНалогообложения);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
						ТекстСообщения = НСтр("ru='Значение не помещено в форму!'");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;
									
					// Проверяем по формату поля  
					Если СтрокаОтчета.ПроцентИзмененияБазовойСтавкиНалога > 100 Тогда
						
						Элемент.Ф70002_004 = 0;
						
						ТекстСообщения = НСтр("ru='Для объекта налогообложения ""%1"" процент изменения базовой ставки налога ""%2"" превышает допустимое значение.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаОтчета.ОбъектНалогообложения, СтрокаОтчета.ПроцентИзмененияБазовойСтавкиНалога);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
						ТекстСообщения = НСтр("ru='Значение не помещено в форму!'");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
					Иначе
						Элемент.Ф70002_004 = СтрокаОтчета.ПроцентИзмененияБазовойСтавкиНалога;
					КонецЕсли;
					
					Если СтрокаОтчета.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов >= 100 Тогда
						
						Элемент.Ф70002_005 = 0;
						
						ТекстСообщения = НСтр("ru='Для объекта налогообложения ""%1"" корректировка базовой ставки налога по решению местных органов ""%2"" превышает допустимое значение.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаОтчета.ОбъектНалогообложения, СтрокаОтчета.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
						ТекстСообщения = НСтр("ru='Значение не помещено в форму!'");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
					Иначе
						Элемент.Ф70002_005 = СтрокаОтчета.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов;
					КонецЕсли;
					
					Если СтрокаОтчета.КорректировкаБазовойСтавкиНалога >= 10 Тогда
						
						Элемент.Ф70002_006 = 0;
						
						ТекстСообщения = НСтр("ru='Для объекта налогообложения ""%1"" корректировка базовой ставки налога ""%2"" превышает допустимое значение.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаОтчета.ОбъектНалогообложения, СтрокаОтчета.КорректировкаБазовойСтавкиНалога);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
						ТекстСообщения = НСтр("ru='Значение не помещено в форму!'");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
					Иначе
						Элемент.Ф70002_006 = СтрокаОтчета.КорректировкаБазовойСтавкиНалога;
					КонецЕсли;
					
					Если СтрокаОтчета.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ >= 10 Тогда
						
						Элемент.Ф70002_007 = 0;
						
						ТекстСообщения = НСтр("ru='Для объекта налогообложения ""%1"" корректировка базовой ставки налога на территориях СЭЗ ""%2"" превышает допустимое значение.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаОтчета.ОбъектНалогообложения, СтрокаОтчета.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
						ТекстСообщения = НСтр("ru='Значение не помещено в форму!'");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
					Иначе
						Элемент.Ф70002_007 = СтрокаОтчета.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ;
					КонецЕсли;
					
					СтавкаСУчетомКорректировки = Окр((СтрокаОтчета.БазоваяСтавкаНалога + СтрокаОтчета.БазоваяСтавкаНалога * Элемент.Ф70002_004/100)*
										?(Элемент.Ф70002_005=0, 1, Элемент.Ф70002_005)  * 
										?(Элемент.Ф70002_006=0, 1, Элемент.Ф70002_006)  * 
										?(Элемент.Ф70002_007=0, 1, Элемент.Ф70002_007),2);
                    										
					Элемент.Ф70002_009 = СтавкаСУчетомКорректировки;
				 	//вычислим сумму земельного налога
				 	Элемент.Ф70002_010 = Окр(Элемент.Ф70002_003_2 * СтавкаСУчетомКорректировки/12*?(СтрокаОтчета.КоличествоМесяцевИспользования = 0, 1, СтрокаОтчета.КоличествоМесяцевИспользования));
					
					Элемент.Ф70002_011 = ?(СтрокаОтчета.КоличествоМесяцевИспользования = 0, 1, СтрокаОтчета.КоличествоМесяцевИспользования);
					
				 	Элемент.Ф70002_012 = ?(СтрокаОтчета.КБКЗемельногоНалога = NULL, Неопределено, СокрЛП(СтрокаОтчета.КБКЗемельногоНалога));	 
				 
					//заполним таблицу расшифровки					
					РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы, Элемент, "Ф70002_001",  ?(СтрокаОтчета.ОбъектНалогообложения = NULL, Неопределено, СтрокаОтчета.ОбъектНалогообложения));
					РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы, Элемент, "Ф70002_012",  ?(СтрокаОтчета.КатегорияЗемельВидЗемельногоНалога = NULL, Неопределено, СтрокаОтчета.КатегорияЗемельВидЗемельногоНалога));
										
					// Сумма налога по КБК 104302 , 104309					
					КБК			= ?(Элемент.Ф70002_012   = Неопределено, "", Элемент.Ф70002_012);
					СуммаНалога = ?(Элемент.Ф70002_010 = Неопределено, 0,  Элемент.Ф70002_010);
					КБККорректен = Ложь;

					Элемент.Ф70002_104302 = 0; 
					Если Найти(КБК, "104302") > 0  Тогда
						Элемент.Ф70002_104302 = СуммаНалога; 
						КБККорректен = Истина;
					КонецЕсли;
					
					Элемент.Ф70002_104309 = 0; 
					Если Найти(КБК, "104309") > 0  Тогда
						Элемент.Ф70002_104309 = СуммаНалога;
						КБККорректен = Истина;
					КонецЕсли;
	
					// КБК нет в структуре основной формы
					Если НЕ КБККорректен Тогда 						
						ТекстСообщения = НСтр("ru='КБК %1 не будет учтен при переносе данных в основную форму. Проверьте правильность указания КБК для объекта: %2'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СокрЛП(КБК), СокрЛП(СтрокаОтчета.ОбъектНалогообложения));
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);						
					КонецЕсли;					
				КонецЕсли;
		
				НомерСтроки = НомерСтроки + 1;	
				
			КонецЦикла; 
			
		КонецЦикла;	  		
		
		ЗначениеВРеквизитФормы(СтруктураФормы.ЛистА.Строки, СтруктураФормы.ЛистА.ИмяРеквизитаТаблицыСтрокГруппы);
				
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);
		РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, КодФормы, Перезаполнить);
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы);
				
		//показываем количество страниц, и текущую
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтаФорма);
		
	КонецЕсли;	
		
КонецПроцедуры  // Форма700ЗаполнитьЗемельныйНалог()

&НаСервере
// Процедура расчитывает значения определенных граф по строке
// многострочной формы.
//
// Параметры:
//      Инд - номер строки многострочной формы
//      Колонка - имя графы (ячейки), из которой была вызвана процедура расчета
//
Процедура Форма700_02Расчет(Инд, Колонка)
	
	Перем СтруктураГруппы;
	
	ТекИмяФормы = "Форма700_02";
	
	Индекс = Инд - 1;
	
	мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, ТекИмяФормы);
	//рассчитаем вычисляемые ячейки
	
	мМногострочнаяСтруктура.Свойство("ЛистА", СтруктураГруппы);
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
		
	//Площадь облагаемая налогом = общая площадь - необлагаемая
	//700.02.003_2 = 700.02.003 - 700.02.003_1
	Ф70002_003_1 = 0;
	Ф70002_003_2 = 0;
	Ф70002_003   = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф70002_003   = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф70002_003);
	Ф70002_003_1 = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф70002_003_1 = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф70002_003_1);
	Ф70002_003_2 = Ф70002_003 - Ф70002_003_1;
			 		 
	ТаблицаСтрокГруппы.Получить(Индекс).Ф70002_003_2 = Ф70002_003_2;
	Форма700_02ПолеТабличногоДокументаЛистА.Области["Ф70002_003_2__"+ Строка(Инд)].Значение = Ф70002_003_2;
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "ЛистА", "Ф70002_003_2__"+ Строка(Инд), Ф70002_003_2);
	
	// Сумма земельного налога
	Ф70002_010 = Окр(ТаблицаСтрокГруппы.Получить(Индекс).Ф70002_003_2 * ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф70002_009 = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф70002_009) /12 *
				   ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф70002_011 = Неопределено ИЛИ 0, 1, ТаблицаСтрокГруппы.Получить(Индекс).Ф70002_011));
														
	ТаблицаСтрокГруппы.Получить(Индекс).Ф70002_010 = Ф70002_010;
	Форма700_02ПолеТабличногоДокументаЛистА.Области["Ф70002_010__"+ Строка(Инд)].Значение = Ф70002_010;
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "ЛистА", "Ф70002_010__"+ Строка(Инд), Ф70002_010);
	
	// Сумма налога по КБК 104301 , 104309					
	КБК			= ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф70002_012   = Неопределено, "", ТаблицаСтрокГруппы.Получить(Индекс).Ф70002_012);
	СуммаНалога = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф70002_010 = Неопределено,  0, ТаблицаСтрокГруппы.Получить(Индекс).Ф70002_010);
	
	КБККорректен = Ложь;

	ТаблицаСтрокГруппы.Получить(Индекс)["Ф70002_104302"] = 0; 
	Если Найти(КБК, "104302") > 0  Тогда
		ТаблицаСтрокГруппы.Получить(Индекс)["Ф70002_104302"] = СуммаНалога;
		КБККорректен = Истина;
	КонецЕсли;
	
	ТаблицаСтрокГруппы.Получить(Индекс)["Ф70002_104309"] = 0; 
	Если Найти(КБК, "104309") > 0  Тогда
		ТаблицаСтрокГруппы.Получить(Индекс)["Ф70002_104309"] = СуммаНалога; 
		КБККорректен = Истина;
	КонецЕсли;
	
	// КБК нет в структуре основной формы
	Если НЕ КБККорректен Тогда
		ТекстСообщения = НСтр("ru='КБК %1 не будет учтен при переносе данных в основную форму. Проверьте правильность указания КБК на странице: %2 приложения 700.02'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СокрЛП(КБК), СокрЛП(Индекс + 1));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
	КонецЕсли;	
	
	ЗначениеВРеквизитФормы(мМногострочнаяСтруктура.ЛистА.Строки, мМногострочнаяСтруктура.ЛистА.ИмяРеквизитаТаблицыСтрокГруппы);
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, КодФормы, Истина);
		
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция Форма700_02РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь)
	
	Запрос = Новый Запрос;
	// Сначала базовая таблица периодов
	// поскольку начисление налога начинается со следующего месяца (ст.339 п.2), то оперируем значениям на начало месяца
	ТекстЗапросаПоМесяцам = "";
	Для Счетчик = 1 по 12 Цикл
		Если Не ТекстЗапросаПоМесяцам = "" ТОгда
			ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам + "
			| ОБЪЕДИНИТЬ ВСЕ
			| ";
		КонецЕсли;
		ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам +  "
								|	ВЫБРАТЬ
								|	&Дата" + СокрЛП(Счетчик) + " КАК Период		                        
								| ";
		Запрос.УстановитьПараметр("Дата" + СокрЛП(Счетчик), ДобавитьМесяц(НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),Счетчик-1));	
	КонецЦикла;	
		
	// строим итоговый запрос
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Объекты.ОбъектНалогообложения,
	               |	Объекты.Организация,
	               |	Объекты.КоличествоМесяцевИспользования,
	               |	ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.БазоваяСтавкаНалога, 0) КАК БазоваяСтавкаНалога,
	               |	ПараметрыРасчетаЗемельногоНалога.БаллБонитета,
	               |	ПараметрыРасчетаЗемельногоНалога.ДатаВозникновенияПрава,
	               |	ПараметрыРасчетаЗемельногоНалога.ДатаПрекращенияПрава,
	               |	ПараметрыРасчетаЗемельногоНалога.ЕдиницаИзмерения,
	               |	ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КадастровыйНомер,"""") КАК КадастровыйНомер,
	               |	ПараметрыРасчетаЗемельногоНалога.КатегорияЗемель,
	               |	ПараметрыРасчетаЗемельногоНалога.КатегорияЗемель.КодПоКлассификатору КАК КатегорияЗемельКодПоКлассификатору,
	               |	ПараметрыРасчетаЗемельногоНалога.КатегорияЗемель.ВидЗемельногоНалога КАК КатегорияЗемельВидЗемельногоНалога,
	               |	ПараметрыРасчетаЗемельногоНалога.КатегорияЗемель.ВидЗемельногоНалога.КодБК КАК КБКЗемельногоНалога,
	               |	ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалога, 0) КАК КорректировкаБазовойСтавкиНалога,
	               |	ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ, 0) КАК КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ,
	               |	ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов, 0) КАК КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов,
	               |	ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.ПроцентИзмененияБазовойСтавкиНалога, 0) КАК ПроцентИзмененияБазовойСтавкиНалога,
	               |	ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.МестонахождениеУчастка,"""") КАК МестонахождениеУчастка,
	               |	ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.ПлощадьНеОблагаемая, 0) КАК ПлощадьНеОблагаемая,
	               |	ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.ПлощадьОблагаемая, 0) КАК ПлощадьОблагаемая,
	               |	ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.ПлощадьНеОблагаемая, 0) + ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.ПлощадьОблагаемая, 0) КАК ОбщаяПлощадь
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Объекты.ОбъектНалогообложения КАК ОбъектНалогообложения,
	               |		Объекты.Организация КАК Организация,
	               |		СУММА(ВЫБОР
	               |				КОГДА Объекты.НачислятьНалог = ИСТИНА
	               |					ТОГДА 1
	               |				ИНАЧЕ 0
	               |			КОНЕЦ) КАК КоличествоМесяцевИспользования
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			Объекты.ПериодГода КАК ПериодГода,
	               |			Объекты.ОбъектНалогообложения КАК ОбъектНалогообложения,
	               |			Объекты.Организация КАК Организация,
	               |			Объекты.ПериодЗаписи КАК ПериодЗаписи,
	               |			ОбъектыЗемельногоНалога.НачислятьНалог КАК НачислятьНалог,
	               |			ОбъектыЗемельногоНалога.СтруктурнаяЕдиница
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				Объекты.ПериодГода КАК ПериодГода,
	               |				Объекты.ОбъектНалогообложения КАК ОбъектНалогообложения,
	               |				Объекты.Организация КАК Организация,
	               |				МАКСИМУМ(Объекты.ПериодЗаписи) КАК ПериодЗаписи
	               |			ИЗ
	               |				(ВЫБРАТЬ
	               |					Периоды.Период КАК ПериодГода,
	               |					ОбъектыЗемельногоНалога.ОбъектНалогообложения КАК ОбъектНалогообложения,
	               |					ОбъектыЗемельногоНалога.Организация КАК Организация,
	               |					ОбъектыЗемельногоНалога.Период КАК ПериодЗаписи
	               |				ИЗ
	               |					(" + ТекстЗапросаПоМесяцам + ") КАК Периоды
	               |						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыЗемельногоНалога КАК ОбъектыЗемельногоНалога
	               |						ПО НАЧАЛОПЕРИОДА(ОбъектыЗемельногоНалога.Период,МЕСЯЦ) <= Периоды.Период
	               |							И (ОбъектыЗемельногоНалога.Налогоплательщик = &Налогоплательщик)) КАК Объекты
	               |			
	               |			СГРУППИРОВАТЬ ПО
	               |				Объекты.ОбъектНалогообложения,
	               |				Объекты.Организация,
	               |				Объекты.ПериодГода) КАК Объекты
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыЗемельногоНалога КАК ОбъектыЗемельногоНалога
	               |				ПО Объекты.ОбъектНалогообложения = ОбъектыЗемельногоНалога.ОбъектНалогообложения
	               |					И ОбъектыЗемельногоНалога.Налогоплательщик = &Налогоплательщик
	               |					И Объекты.ПериодЗаписи = ОбъектыЗемельногоНалога.Период) КАК Объекты	               
	               |				   
				   |				ГДЕ Объекты.СтруктурнаяЕдиница В (&СписокСтруктурныхЕдиниц)	
	               |	СГРУППИРОВАТЬ ПО
	               |		Объекты.ОбъектНалогообложения,
	               |		Объекты.Организация) КАК Объекты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыРасчетаЗемельногоНалога КАК ПараметрыРасчетаЗемельногоНалога
	               |		ПО Объекты.ОбъектНалогообложения = ПараметрыРасчетаЗемельногоНалога.ОсновноеСредство
	               |			  И Объекты.Организация 	 = ПараметрыРасчетаЗемельногоНалога.Организация
	               |ГДЕ
	               |	Объекты.КоличествоМесяцевИспользования > 0";
				   
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() и ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru='Данные для заполнения формы 700.02 за отчетный период отсутствуют...'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
	КонецЕсли;
	
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
				     	
	Возврат ТаблицаРезультата;		 
	
КонецФункции // Форма700_02РассчитатьДанныеФормы()

&НаКлиенте
Процедура Форма700_02ПолеТабличногоДокументаЛистАВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Область.СодержитЗначение Тогда
		Значение = Область.Значение;
	Иначе
		Возврат;		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "ЛистА");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет",  Истина);	
	
	Ячейка = Область.Имя;
			
	НачЗначение = Область.Значение;	
	МассивЯчеек = Новый Массив;
	
	Если (Найти(Ячейка, "Ф70002_003_G__") > 0) Тогда
		МассивЯчеек.Добавить("Ф70002_003_M__" + СтрЗаменить(Ячейка, "Ф70002_003_G__", ""));
		Форма700_02ВыборНаСервере(Ячейка,МассивЯчеек);
		Возврат;
	ИначеЕсли (Найти(Ячейка, "Ф70002_003_M__") > 0) Тогда
		МассивЯчеек.Добавить("Ф70002_003_G__" + СтрЗаменить(Ячейка, "Ф70002_003_M__", ""));
		Форма700_02ВыборНаСервере(Ячейка,МассивЯчеек);
		Возврат;
	КонецЕсли;
	
	Если (Найти(Ячейка, "Ф70002_014_A__") > 0) Тогда
		ИмяПункта = "Ф70002_014_B__"+СтрЗаменить(Ячейка,"Ф70002_014_A__","");
		МассивЯчеек.Добавить(ИмяПункта);
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"B","C"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"B","D"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"B","E"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"B","F"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"B","G"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"B","H"));
		Форма700_02ВыборНаСервере(Ячейка,МассивЯчеек);
		Возврат;
	ИначеЕсли (Найти(Ячейка, "Ф70002_014_B__") > 0) Тогда
		ИмяПункта = "Ф70002_014_A__"+СтрЗаменить(Ячейка,"Ф70002_014_B__","");
		МассивЯчеек.Добавить(ИмяПункта);
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","C"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","D"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","E"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","F"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","G"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","H"));
		Форма700_02ВыборНаСервере(Ячейка,МассивЯчеек);
		Возврат;
	ИначеЕсли (Найти(Ячейка, "Ф70002_014_C__") > 0) Тогда
		ИмяПункта = "Ф70002_014_A__"+СтрЗаменить(Ячейка,"Ф70002_014_C__","");
		МассивЯчеек.Добавить(ИмяПункта);
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","B"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","D"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","E"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","F"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","G"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","H"));
		Форма700_02ВыборНаСервере(Ячейка,МассивЯчеек);
		Возврат;
	ИначеЕсли (Найти(Ячейка, "Ф70002_014_D__") > 0) Тогда
		ИмяПункта = "Ф70002_014_A__"+СтрЗаменить(Ячейка,"Ф70002_014_D__","");
		МассивЯчеек.Добавить(ИмяПункта);
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","B"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","C"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","E"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","F"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","G"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","H"));
		Форма700_02ВыборНаСервере(Ячейка,МассивЯчеек);
		Возврат;
	ИначеЕсли (Найти(Ячейка, "Ф70002_014_E__") > 0) Тогда
		ИмяПункта = "Ф70002_014_A__"+СтрЗаменить(Ячейка,"Ф70002_014_E__","");
		МассивЯчеек.Добавить(ИмяПункта);
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","B"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","C"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","D"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","F"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","G"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","H"));
		Форма700_02ВыборНаСервере(Ячейка,МассивЯчеек);
		Возврат;
	ИначеЕсли (Найти(Ячейка, "Ф70002_014_F__") > 0) Тогда
		ИмяПункта = "Ф70002_014_A__"+СтрЗаменить(Ячейка,"Ф70002_014_F__","");
		МассивЯчеек.Добавить(ИмяПункта);
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","B"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","C"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","D"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","E"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","G"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","H"));
		Форма700_02ВыборНаСервере(Ячейка,МассивЯчеек);
		Возврат;
	ИначеЕсли (Найти(Ячейка, "Ф70002_014_G__") > 0) Тогда
		ИмяПункта = "Ф70002_014_A__"+СтрЗаменить(Ячейка,"Ф70002_014_G__","");
		МассивЯчеек.Добавить(ИмяПункта);
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","B"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","C"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","D"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","E"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","F"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","H"));
		Форма700_02ВыборНаСервере(Ячейка,МассивЯчеек);
		Возврат;
	ИначеЕсли (Найти(Ячейка, "Ф70002_014_H__") > 0) Тогда
		ИмяПункта = "Ф70002_014_A__"+СтрЗаменить(Ячейка,"Ф70002_014_H__","");
		МассивЯчеек.Добавить(ИмяПункта);
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","B"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","C"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","D"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","E"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","F"));
		МассивЯчеек.Добавить(СтрЗаменить(ИмяПункта,"A","G"));
		Форма700_02ВыборНаСервере(Ячейка,МассивЯчеек);
		Возврат;
	КонецЕсли;
	
	Если (Найти(Ячейка, "Ф70002_003__") > 0) Тогда                                                           			
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений, НачЗначение, НСтр("ru='Введите общую площадь земельного участка'"), 11, 2);
		Возврат;
	КонецЕсли;
	
	Если (Найти(Ячейка, "Ф70002_003_1__") > 0) Тогда                                                           			
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений, НачЗначение, НСтр("ru='Введите необлагаемую площадь земельного участка'"), 11, 2);
		Возврат;
	КонецЕсли;
	
	Если (Найти(Ячейка, "Ф70002_004__") > 0) Тогда                                                           			
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений, НачЗначение, НСтр("ru='Введите % коррректировки ставки налога'"), 4, 2);
		Возврат;
	КонецЕсли;
	
	Если (Найти(Ячейка, "Ф70002_005__") > 0) Тогда                                                           			
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений, НачЗначение, НСтр("ru='Введите коэффициент к базовым ставкам'"), 4, 2);
		Возврат;
	КонецЕсли;
	
	Если (Найти(Ячейка, "Ф70002_006__") > 0) Тогда                                                           			
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений, НачЗначение, НСтр("ru='Введите коэффициент для плательщиков, указанных в ст. 386 НК'"), 3, 2);
		Возврат;
	КонецЕсли;
	
	Если (Найти(Ячейка, "Ф70002_007__") > 0) Тогда                                                           			
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений, НачЗначение, НСтр("ru='Введите коэффициент для плательщиков, осуществляющих деят-ть на тер-ях СЭЗ'"), 3, 2);
		Возврат;
	КонецЕсли;
	
	Если (Найти(Ячейка, "Ф70002_008__") > 0) Тогда                                                           			
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений, НачЗначение, НСтр("ru='Коэффициент к базовым ставкам налога в соответствии с пунктом 6 статьи 387 Налогового кодекса'"), 6, 3);
		Возврат;
	КонецЕсли;
	
	Если (Найти(Ячейка, "Ф70002_009__") > 0) Тогда                                                           			
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений, НачЗначение, НСтр("ru='Введите ставку налога с учетом корректировки'"), 9, 3);
		Возврат;
	КонецЕсли;
	
	Если (Найти(Ячейка, "Ф70002_010") > 0) Тогда                                                           			
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений, НачЗначение, НСтр("ru='Введите сумму налога'"), 9, 0);
		Возврат;
	КонецЕсли;
	
	Если (Найти(Ячейка, "Ф70002_011") > 0) Тогда                                                           			
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений, НачЗначение, НСтр("ru='Введите количество месяцев'"), 2, 0);
		Возврат;
	КонецЕсли;
	
	Если (Найти(Ячейка, "Ф70002_013") > 0) Тогда                                                           			
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений, НачЗначение, НСтр("ru='Введите сумму инвестиционных налоговых преференций'"), 12, 0);
		Возврат;
	КонецЕсли;
	
	Если (Найти(Ячейка, "Ф70002_001_1__") > 0 ИЛИ Найти(Ячейка, "Ф70002_001_2__") > 0) Тогда
		
		Если Не ЗначениеЗаполнено(Область.Расшифровка) Тогда
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводСтроки(ОповещениеВводаЗначений, НачЗначение, НСтр("ru='Введите местонахождение участка'"), 250);
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;
	
	Если Найти(Ячейка, "Ф70002_002__") > 0 Тогда 
		
		Если Не ЗначениеЗаполнено(Область.Расшифровка) Тогда
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводСтроки(ОповещениеВводаЗначений, НачЗначение, НСтр("ru='Введите кадастровый номер'"));
			Возврат;
		КонецЕсли;
					
	КонецЕсли;
	
	Если (Найти(Ячейка, "Ф70002_012__") > 0) Тогда
				
		Если Не ЗначениеЗаполнено(Область.Расшифровка) Тогда
			ОткрытьФорму("Справочник.НалогиСборыОтчисления.ФормаВыбора",,ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Возврат;
		КонецЕсли;
		
	КонецЕсли; 
		
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает имя чейки формы 700.02, в которую будет помещено
// значение единицы измерения земельного участка
//
Функция ПолучитьИмяЯчейкиЕдиницыИзмеренияЗемельногоУчастка(ЕдиницаИзмерения)
	
	ИмяЯчейкиЕдиницы = Неопределено;		 		 
	
	Если ТипЗнч(ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") И Врег(СокрЛП(ЕдиницаИзмерения.Наименование))= "ГА" Тогда
		 ИмяЯчейкиЕдиницы = "Ф70002_003_G";
	Иначе
		 ИмяЯчейкиЕдиницы = "Ф70002_003_M";	 
	КонецЕсли;  	 
	 
	Возврат ИмяЯчейкиЕдиницы;
	 
КонецФункции

// Функция возвращает имя ячейки формы 700.02, в которую будет помещено
// значение категории земель
//
Функция ПолучитьИмяЯчейкиКатегорииЗемель(КатегорияЗемель)
	
	ИмяЯчейки = Неопределено;
	
	Код = КатегорияЗемель.КодПоКлассификатору;
	
	Если Код = "ЗСХ-1" ИЛИ Код = "ЗСХ-2" Тогда
		
		ИмяЯчейки = "Ф70002_014_G";
		
	ИначеЕсли Код = "ЗНП-ЖФ" ИЛИ Код = "ЗНП" ИЛИ Код = "ЗНП-ПУ" Тогда
		
		ИмяЯчейки = "Ф70002_014_B";
		
	ИначеЕсли Код = "ЗП" ИЛИ Код = "ЗП-НП" Тогда
		
		ИмяЯчейки = "Ф70002_014_C";
		
	ИначеЕсли Код = "ЗООПТ-СХ-1" ИЛИ Код = "ЗООПТ-СХ-2" ИЛИ Код = "ЗООПТ" Тогда
		
		ИмяЯчейки = "Ф70002_014_F";
		
	ИначеЕсли Код = "ЗЛФ-СХ-1" ИЛИ Код = "ЗЛФ-СХ-2" ИЛИ Код = "ЗЛФ" Тогда
		
		ИмяЯчейки = "Ф70002_014_D";
		
	ИначеЕсли Код = "ЗВФ-СХ-1" ИЛИ Код = "ЗВФ-СХ-2" ИЛИ Код = "ЗВФ" Тогда
		
		ИмяЯчейки = "Ф70002_014_E";
		
	КонецЕсли;
	
	Возврат ИмяЯчейки;
	
КонецФункции

// дополнительны функции и процедуры

&НаСервере
Процедура Форма700ПриИзмененииНаСервере(Ячейка, Значение, Недропользователь = Ложь)
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, КодФормы);
	
	Если Не Недропользователь Тогда
		
		Если РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, Ячейка) = "Х" Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, Ячейка, "", Истина);
		Иначе
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, Ячейка, "Х", Истина);
		КонецЕсли;
		
	Иначе
		
		Если РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, Ячейка) = "Х" Тогда
			Форма700ПолеТабличногоДокументаСтраница1.Области.НомерКонтракта.Защита = Ложь;
			Форма700ПолеТабличногоДокументаСтраница1.Области.ДатаКонтракта.Защита  = Ложь;
		Иначе
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "НомерКонтракта", "");
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "ДатаКонтракта",  "");
			Форма700ПолеТабличногоДокументаСтраница1.Области.НомерКонтракта.Защита = Истина;
			Форма700ПолеТабличногоДокументаСтраница1.Области.ДатаКонтракта.Защита  = Истина;
		КонецЕсли;
		
	КонецЕсли; 
		
КонецПроцедуры

&НаСервере
Процедура Форма700_02ВыборНаСервере(Ячейка, МассивЯчеек, Значение = Неопределено)
		
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "ЛистА", Ячейка,    "Х");
	Форма700_02ПолеТабличногоДокументаЛистА.Области[Ячейка].Значение = "Х";
	
	Для каждого ИмяЯчейки Из МассивЯчеек Цикл
		
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "ЛистА", ИмяЯчейки, "");   
		Форма700_02ПолеТабличногоДокументаЛистА.Области[ИмяЯчейки].Значение = "";
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Форма700ПолеТабличногоДокументаСтраницаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Ячейка = Область.Имя;
		
	Если Область.СодержитЗначение Тогда
		Значение = Область.Значение;
	Иначе
		Возврат;		
	КонецЕсли;

	Форма700ПолеТабличногоДокументаПриИзмененииНаСервере(Ячейка, Значение);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура Форма700ПолеТабличногоДокументаПриИзмененииНаСервере(ИмяОбласти, ЗначениеЭлемента)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяОбласти, ЗначениеЭлемента, Ложь);
	
	Если КодФормы = "Форма700" Тогда
		Форма700Расчет(Истина);
	ИначеЕсли КодФормы = "Форма700_01" Тогда 
		Форма700_01Расчет(Истина);
	КонецЕсли;  	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаЗначения(Значение, Параметры) Экспорт
	
	Если Значение <> Неопределено Тогда         	
		Параметры.Область.Значение = Значение;			
		ПередатьЗначениеВМногострочнуюСтруктуру(Параметры.ИмяСтраницы, Параметры.Область.Имя, Значение, Параметры.Расчет); 
	КонецЕсли;
	           	
КонецПроцедуры

&НаСервере 
Процедура ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ИмяЯчейки, Значение, Расчет = Ложь)	
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, ИмяСтраницы, ИмяЯчейки, Значение, Расчет);	
КонецПроцедуры 

&НаКлиенте
Процедура Форма700_02ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НалогиСборыОтчисления") Тогда
		
		ОбластьРасшифровки = ЭтаФорма.ТекущийЭлемент.ТекущаяОбласть;	
		НомерСтроки = Сред(ОбластьРасшифровки.Имя, Найти(ОбластьРасшифровки.Имя, "__") + 2);
		
		Форма700_02ОбработкаПодбораНаСервере("Ф70002_012__" + НомерСтроки, ВыбранноеЗначение); 	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Форма700_02ОбработкаПодбораНаСервере(НомерЯчейки, ЗначениеВыбора)
		
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "ЛистА", НомерЯчейки, СокрЛП(ЗначениеВыбора.КодБК),, ЗначениеВыбора); 		
	Форма700_02ПолеТабличногоДокументаЛистА.Области[НомерЯчейки].Расшифровка = ЗначениеВыбора; 
	Форма700_02ПолеТабличногоДокументаЛистА.Области[НомерЯчейки].Значение = СокрЛП(ЗначениеВыбора.КодБК);
		
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресМакетаСКД(знач ИмяРаздела)
	
	ОбщаяСКД = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("МакетСКДФорма7002017Кв4");
	СхемаКомпоновкиДанных = ОбщаяСКД.ВложенныеСхемыКомпоновкиДанных.Найти(ИмяРаздела).Схема;
	
	Возврат ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор)
	
КонецФункции

&НаСервере
// Функция для определения даты окончания отчетного
// периода, исходя из номера отчетного квартала
Функция ПолучитьДатуОкончания(ПолучатьГраницу = Ложь, ГраницаДня = Неопределено)
	
	ДатаКон = КонецГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);	
	
	Если ПолучатьГраницу Тогда
		ГраницаДня = Новый Граница(ДатаКон, ВидГраницы.Включая);
	КонецЕсли;
	
	Возврат ДатаКон;
	
КонецФункции

&НаКлиенте
Процедура Форма700_00НалогНаИмуществоСформироватьРасшифровку()
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", 	       СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета - 1);	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",          СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ТипДанных", 		       "РегистрыБухгалтерии");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяОбъекта", 	       "Типовой");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяТаблицы", 	       "ОстаткиИОбороты");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ПолучитьАдресМакетаСКД("Имущество"));

	Форма700РасшифровкаИмуществоСКД(ПользовательскиеНастройки);
				
	// Прочие настройки
	ТекстЗаголовка = НСТР("ru = 'Расшифровка к форме 700.03 - Остаточная стоимость объектов имущественного налога'");	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Заголовок", 	ТекстЗаголовка);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", Истина);	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьПодписи", Истина); 	
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ВыводитьЗаголовок", Истина);	
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ru = 'Расчет текущих платежей по налогу на имущество'");	
    
	ОткрытьФорму("Отчет.УниверсальныйОтчетПоМетаданным.Форма.ФормаОтчета", ПараметрыФормы,, Истина);    
	
КонецПроцедуры

&НаКлиенте 
Процедура Форма700РасшифровкаИмуществоСКД(ПользовательскиеНастройки)
					
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ИнвестицииВНедвижимость_"));
	СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ОсновныеСредства_"));
	СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.БиологическиеАктивы"));	
	СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.НематериальныеАктивы"));
	
	Если ВключатьВРасчетСчет2933 Тогда
		СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.КапитальныйРемонтОС"));
	КонецЕсли;
	
	// Сортировка
	ПользовательскиеСортировки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ПорядокКомпоновкиДанных"));
	ПользовательскиеСортировки.ИдентификаторПользовательскойНастройки = "Порядок";
	
	// Группировки	
	МассивГруппировок = Новый Массив();
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "ПериодГода", НСтр("ru = 'Отчетный период'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "СтруктурнаяЕдиница", НСтр("ru = 'Структурная единица'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "ОбъектНалогообложения", НСтр("ru = 'Объект налогообложения'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка", МассивГруппировок);
		
	// Параметры  	
	МассивПараметровДанных = Новый Массив();  
	
	Для Счетчик  = 1 по 12 Цикл												
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Дата" + СокрЛП(Счетчик), НачалоМесяца(ДобавитьМесяц(НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), Счетчик-1)));
	КонецЦикла;		
	
	ГраницаКон = Неопределено;
	ДатаКон    =  ПолучитьДатуОкончания(Истина, ГраницаКон); 	
	  
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Дата0",            СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета - 1);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Дата13",           ДатаКон + 1);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ДатаКонГраница",   ГраницаКон);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "НачалоПериода",    НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КонецПериода",     ДатаКон);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСчетов",     СписокСчетов);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Налогоплательщик", Налогоплательщик);  	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСчетов", СписокСчетов, );
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПараметрыДанных", МассивПараметровДанных);
	
	ПользовательскиеПоля = ПользовательскиеНастройки.Элементы.Добавить(Тип("ВыбранныеПоляКомпоновкиДанных"));	
	ПользовательскиеПоля.ИдентификаторПользовательскойНастройки = "Выбор";	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ОстаточнаяСтоимостьОС",    "Остаточная стоимость ОС");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ОстаточнаяСтоимостьНМА",   "Остаточная стоимость НМА");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ОстаточнаяСтоимостьОбщая", "Остаточная стоимость общая");
	
КонецПроцедуры

&НаКлиенте
Процедура Форма700_01СформироватьРасшифровку()
	
	Если ТаблицаРасшифровкиНалогаНаТранспорт.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Данные для расшифровки отсутствуют. Для расшифровки показателей приложения необходимо сначала выполнить заполнение приложения 700.01. '");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Ложь);	
	ПараметрыФормы.Вставить("ВыводитьЗаголовок", Ложь);	
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ru = 'Расчет текущих платежей по налогу на транспорт'");
	ПараметрыФормы.Вставить("НачалоПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("КонецПериода",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", ПолучитьАдресМакетаСКД("Транспорт"));
	ПараметрыФормы.Вставить("Налогоплательщик", Налогоплательщик);
	ПараметрыФормы.Вставить("СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	ПараметрыФормы.Вставить("ТаблицаРасшифровкиНалогаНаТранспорт", ПоместитьВоВременноеХранилищеТаблицуРасшифровки());
		
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "Форма7002017Кв4", "ФормаРасшифровки"), ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеТаблицуРасшифровки()
	
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("ТаблицаРасшифровкиНалогаНаТранспорт"), УникальныйИдентификатор);
	
КонецФункции
 
&НаКлиенте 
Процедура Форма700_01РасшифровкаТранспортСКД(ПользовательскиеНастройки)
					
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ИнвестицииВНедвижимость_"));
	СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ОсновныеСредства_"));
	СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.БиологическиеАктивы"));	
	СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.НематериальныеАктивы"));
	
	Если ВключатьВРасчетСчет2933 Тогда
		СписокСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.КапитальныйРемонтОС"));
	КонецЕсли;
	
	// Сортировка
	ПользовательскиеСортировки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ПорядокКомпоновкиДанных"));
	ПользовательскиеСортировки.ИдентификаторПользовательскойНастройки = "Порядок";
	
	// Группировки	
	МассивГруппировок = Новый Массив();
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "ПериодГода", НСтр("ru = 'Отчетный период'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "СтруктурнаяЕдиница", НСтр("ru = 'Структурная единица'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "ОбъектНалогообложения", НСтр("ru = 'Объект налогообложения'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка", МассивГруппировок);
		
	// Параметры  	
	МассивПараметровДанных = Новый Массив();  
	
	Для Счетчик  = 1 по 12 Цикл												
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Дата" + СокрЛП(Счетчик), КонецМесяца(ДобавитьМесяц(НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),Счетчик-1)));		
	КонецЦикла;		
	
	ГраницаКон = Неопределено;
	ДатаКон    =  ПолучитьДатуОкончания(Истина, ГраницаКон); 	
	  
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Дата0",            СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета - 1);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Дата13",           ДатаКон + 1);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ДатаКонГраница",   ГраницаКон);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "НачалоПериода",    НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КонецПериода",     ДатаКон);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСчетов",     СписокСчетов);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Налогоплательщик", Налогоплательщик);  	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСчетов", СписокСчетов, );
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПараметрыДанных", МассивПараметровДанных);
	
	ПользовательскиеПоля = ПользовательскиеНастройки.Элементы.Добавить(Тип("ВыбранныеПоляКомпоновкиДанных"));	
	ПользовательскиеПоля.ИдентификаторПользовательскойНастройки = "Выбор";	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ОстаточнаяСтоимостьОС",    "Остаточная стоимость ОС");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ОстаточнаяСтоимостьНМА",   "Остаточная стоимость НМА");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ОстаточнаяСтоимостьОбщая", "Остаточная стоимость общая");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыФормыНаКлиенте(Параметры) Экспорт
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	ЗаполнитьСведенияОбОтчетномПериоде();
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);		
	КонецЦикла	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗаголовокОтражениеВУчете(ДокументОтражения)
	
	Если ЗначениеЗаполнено(ДокументОтражения) Тогда
		Возврат НСТР("ru = 'Открыть документ отражения в учете'");
	Иначе
		Возврат НСТР("ru = 'Ввести документ отражения в учете'");
	КонецЕсли;
	
КонецФункции // ПолучитьЗаголовокОтражениеВУчете()

