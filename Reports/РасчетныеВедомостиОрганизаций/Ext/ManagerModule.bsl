#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки,
							|ИспользоватьПриВыводеПодвала",
							Истина, Истина, Истина, Истина, Истина);
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт
	
	ЗаголовокОтчета = НСтр("ru = 'Расчетная ведомость организации %1'");
	ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ЗаголовокОтчета, БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода));
	
	Возврат ЗаголовокОтчета;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоМесяца(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	
	Если ПараметрыОтчета.НачалоПериода >= Дата(2018,01,01) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "парамНоваяСхемаВычетовИПН", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецМесяца(ПараметрыОтчета.КонецПериода));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СледующийПериод", НачалоМесяца(КонецМесяца(ПараметрыОтчета.КонецПериода)+1));
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецМесяца(ТекущаяДатаСеанса()));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СледующийПериод", НачалоМесяца(КонецМесяца(ТекущаяДатаСеанса())+1));
	КонецЕсли;
	
	// определим какие показатели и в каком порядке показывать
	Индекс = 0;
	Для Каждого ГруппаРасчетов Из ПараметрыОтчета.Показатели Цикл
		Индекс = Индекс + 1;
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "парамИспользовать" + ГруппаРасчетов.Поле, ГруппаРасчетов.Использование);
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "парамПриоритетГруппы" + ГруппаРасчетов.Поле, Индекс);
	КонецЦикла;
	
	Сумма = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	Сумма.Поле = Новый ПолеКомпоновкиДанных("Результат");
	
	Таблица = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Таблица, "ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Конец);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Таблица, "ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет); 
	
	Колонка = Таблица.Колонки.Добавить();
	Колонка.Использование = Истина;
	
	ПолеГруппировки = Колонка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Группа");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	
	Колонка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Приоритет = Колонка.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	Приоритет.Поле = Новый ПолеКомпоновкиДанных("Группа.ПриоритетГруппы");
	Приоритет.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
	Колонка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	Колонка = Колонка.Структура.Добавить();
	Колонка.Использование = Истина;
	
	ПолеГруппировки = Колонка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("ИмяВидаРасчета");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	
	Колонка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Приоритет = Колонка.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	Приоритет.Поле = Новый ПолеКомпоновкиДанных("ИмяВидаРасчета.ПриоритетВидаРасчета");
	Приоритет.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
	Колонка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	
	Структура = Таблица.Строки.Добавить();
	КоличествоГруппировок = 0;
	Первый = Истина;
	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Если Не Первый Тогда 
				Структура = Структура.Структура.Добавить();
			КонецЕсли;
			Первый = Ложь;
			
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			
			Если ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		
			КоличествоГруппировок = КоличествоГруппировок + 1;
			
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоГруппировок <> 0 Тогда
		
		НомерПп = Структура.Выбор.Элементы.Вставить(0, Тип("ВыбранноеПолеКомпоновкиДанных"));
		НомерПп.Поле = Новый ПолеКомпоновкиДанных("СистемныеПоля.НомерПоПорядку");
		
	КонецЕсли;
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.СписокСтруктурныхЕдиниц) Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек, "Организация", ПараметрыОтчета.СписокСтруктурныхЕдиниц, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.СписокПодразделений) Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек, "ПодразделениеОрганизации", ПараметрыОтчета.СписокПодразделений, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.СписокСотрудников) Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек, "Сотрудник", ПараметрыОтчета.СписокСотрудников, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
		
	Для Каждого ЭлементТелаМакета Из МакетКомпоновки.Тело Цикл 
		Если ТипЗнч(ЭлементТелаМакета) = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда
			ПараметрыОтчета.Вставить("ВысотаШапки", МакетКомпоновки.Макеты[ЭлементТелаМакета.МакетШапки].Макет.Количество());
			МакетШапкиОтчета = МакетКомпоновки.Макеты[ЭлементТелаМакета.МакетШапки];
			Прервать;	
		КонецЕсли;
	КонецЦикла;
	
	КоличествоГруппировок = 0;
	Для Каждого СтрокаГруппировки Из ПараметрыОтчета.Группировка Цикл
		Если СтрокаГруппировки.Использование Тогда
			КоличествоГруппировок = КоличествоГруппировок + 1;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоСтрокШапки = Макс(КоличествоГруппировок, 2);
	ПараметрыОтчета.Вставить("ВысотаШапки", КоличествоСтрокШапки);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);

	Если Результат.Области.Найти("Заголовок") = Неопределено Тогда
		Результат.ФиксацияСверху = ПараметрыОтчета.ВысотаШапки;
		ВерхняяСтрокаШапки = 1;
	Иначе
		Результат.ФиксацияСверху = Результат.Области.Заголовок.Низ + ПараметрыОтчета.ВысотаШапки;
		ВерхняяСтрокаШапки = Результат.Области.Заголовок.Низ + 1;
	КонецЕсли;
	
	Счетчик = Результат.ШиринаТаблицы;
	Пока Счетчик >= 1 Цикл
		ТекстКолонки = Результат.Область(ВерхняяСтрокаШапки, Счетчик).Текст;
		Если Найти(ТекстКолонки, "_Удалить_") = 1 Тогда
			// определим сколько колонок надо загруппировать
			ТекстКолонки = Сред(ТекстКолонки, СтрДлина("_Удалить_") + 1);
			КоличествоКолонок = Число(Лев(ТекстКолонки, Найти(ТекстКолонки, "_") - 1));
			Область = Результат.Область(, Счетчик , ВерхняяСтрокаШапки, Счетчик + КоличествоКолонок);
			Область.Разгруппировать();
			Область = Результат.Область(, Счетчик, ВерхняяСтрокаШапки, Счетчик);
			Результат.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		КонецЕсли;
		Счетчик = Счетчик - 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриВыводеПодвала(ПараметрыОтчета, Результат) Экспорт
	
	Если ПараметрыОтчета.ВыводитьПодписиРуководителей Тогда
		ВыводПодписейРуководителей(ПараметрыОтчета, Результат);
	КонецЕсли;
	
	Если ПараметрыОтчета.ВыводитьПодписи Тогда 
		Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
		ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
		
		Результат.Вывести(ОбластьПодписи);
		
		Результат.Области.Подписи.Видимость = ПараметрыОтчета.ВыводитьПодписи;
	КонецЕсли;

КонецПроцедуры

Процедура ВыводПодписейРуководителей(ПараметрыОтчета, Результат)
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьПодписи = Макет.ПолучитьОбласть("ПодписиРуководителей");
	
	ВыбиратьОрганизацию = Ложь;
	СписокСтруктурныхЕдиниц = ПараметрыОтчета.СписокСтруктурныхЕдиниц;
	Если СписокСтруктурныхЕдиниц.Количество() > 0 Тогда
		ВыбиратьОрганизацию = Истина;
	КонецЕсли;

	Если ВыбиратьОрганизацию Тогда
		Если СписокСтруктурныхЕдиниц.Количество() = 1 Тогда
			Организация = СписокСтруктурныхЕдиниц[0].Значение;
		Иначе
			Организация = Неопределено;
		КонецЕсли;	
	Иначе
		Организация = Неопределено;
	КонецЕсли;
	
	Если Организация = Неопределено Тогда
		ОбластьПодписи.Параметры.РукРасшифровкаПодписи     = "";	
		ОбластьПодписи.Параметры.РукДолжность              = "";
		ОбластьПодписи.Параметры.ГлавБухРасшифровкаПодписи = "";	
		ОбластьПодписи.Параметры.ГлавБухДолжность          = "";
	Иначе
		Руководители = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(Организация, ТекущаяДатаСеанса());
		ОбластьПодписи.Параметры.РукРасшифровкаПодписи     = Руководители.Руководитель;	
		ОбластьПодписи.Параметры.РукДолжность              = Руководители.РуководительДолжность;
		ОбластьПодписи.Параметры.ГлавБухРасшифровкаПодписи = ?(НЕ ЗначениеЗаполнено(Руководители.ГлавныйБухгалтер), НСтр("ru = 'Не предусмотрен'"), Руководители.ГлавныйБухгалтер);
		ОбластьПодписи.Параметры.ГлавБухДолжность          = Руководители.ГлавныйБухгалтерДолжность;
	КонецЕсли;
	
	Результат.Вывести(ОбластьПодписи);
	
КонецПроцедуры

#КонецЕсли