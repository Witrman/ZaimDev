////////////////////////////////////////////////////////////////////////////////
// Описание формы
// Параметры фомры:
//  Организация - СправочникСсылка.Организации - Налогоплательщик, представляющий отчет
//  мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета - Дата - отчетный период формирования отчета
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	мВыбраннаяФорма = "ФормаОтчета2013Кв1";
	КодФормы 		= "ФормаОтчета";
	               		
	ВсегоСтраниц	= 1;     	
	мФорматНомераСтроки = "ЧЦ=8; ЧВН=; ЧГ=";
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруФормРегОтчета(ЭтотОбъект);	
			
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов   = Новый СписокЗначений;	
	СтруктураРеквизитовФормы.мПечатныеформы 		  = Новый СписокЗначений;	
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	// Значения по умолчанию
	СтруктураРеквизитовФормы.мКодСтрокиПрочиеДоходы 		= "03";
	СтруктураРеквизитовФормы.мКодСтрокиПрочиеРасходы 		= "09";
    СтруктураРеквизитовФормы.мКодСтрокиАмортизации			= "07";
	
	
	СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями = РегламентированнаяОтчетностьПереопределяемый.ПоддержкаРаботыСоСтруктурнымиПодразделениями(); // перевести в переопределяемый модуль 

	СтруктураРеквизитовФормы.СтруктураСоответствияСчетов = ЗаполнитьСтруктуруСоответствийСчетов();
		
	// Общие механизмы
	ЗаполнитьСведенияОбОтчетномПериоде();
		
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	УстановитьФорматВывода();
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекФорма.КодФормы);
	КонецЦикла	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если Модифицированность Тогда 
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);	
		ТекстВопроса = НСТР("ru = 'Сохранить данные отчета?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);	
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(мСписокСтруктурныхЕдиниц, ЭтаФорма, СтандартнаяОбработка,,Налогоплательщик);	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда		
		мСписокСтруктурныхЕдиниц = Результат;		
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц); 		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ФормаВыбораИзКлассификатора") Тогда
		
		Если ВРег(ИсточникВыбора.ИмяМакета) = ВРег("КОДЫБЮДЖЕТНОЙКЛАССИФИКАЦИИ") Тогда 
			
			Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда 
				Код = ВыбранноеЗначение;
			Иначе 
				Код = ВыбранноеЗначение.КодСтроки;				
			КонецЕсли;
		// выбираются в форме 300.03
		
		
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЯзыкФормированияПриИзменении(Элемент)
	ЯзыкФормированияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	ЕдиницаИзмеренияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТочностьЕдиницыИзмеренияПриИзменении(Элемент)
	УстановитьФорматВывода();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "Разделы"

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)	
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.КодФормы = Элемент.ТекущиеДанные.КодФормы тогда
		Возврат;
	КонецЕсли;	
	
	//РазделыОтчетаПриАктивизацииСтрокиНаСервере(Элемент.ТекущиеДанные.КодФормы, Элемент.ТекущиеДанные.Многострочность, Элемент.ТекущиеДанные.ПризнакОсновной);	
		
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Для Каждого СтраницаФорм из Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы Цикл
		Элементы[СтраницаФорм.Имя].Видимость = СтраницаФорм.Имя = ЭтаФорма.КодФормы;	
	КонецЦикла;
	
	//ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "Отчеты"

&НаКлиенте
Процедура ФормаОтчетаПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = Область.Имя;	
	
	Если Найти(ИмяОбласти, "s_") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФормаОтчетаРасчет(Область.Имя, Область.Значение, Истина);
	
	Модифицированность = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Заполнить(Команда)
	Перезаполнить = Истина; // Для выполнения запроса на пересчет данных к пользователю
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения =  РегламентированнаяОтчетностьКлиент.ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Перезаполнить Тогда		
		Если СтрокаФормы.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстВопроса = "Перезаполнить данные формы и ее дополнительных форм?";
		Иначе
			ТекстВопроса = "Перезаполнить данные формы?";
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);
		Оповещение.ДополнительныеПараметры.Вставить("Перезаполнить", Перезаполнить);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);		

	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФорму(Команда)
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	 	
	
	Перезаполнить = ДополнительныеПараметры.Перезаполнить;
	
	НачатьЗамерВремени();
	
	ЗаполнитьАвтоНаСервере();	
	УстановитьФорматВывода();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	СохранитьДанные(); 
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	ОткрытьФормуНастройкиСтраниц();
КонецПроцедуры

&НаКлиенте
Процедура Расшифровка(Команда)
	Попытка
		ИмяЯчейки = ЭтотОбъект.ТекущийЭлемент.ТекущаяОбласть.Имя;
	Исключение
		ПоказатьПредупреждение(,"Активизируйте нужную ячейку отчета для расшифровки.");
		Возврат;
	КонецПопытки;
	
	ЦветРасшифровки = ФормаОтчетаПолеТабличногоДокументаСтраница1.Области.s_02_1.ЦветФона;
	
	Если ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда 
		
		ФормаОтчетаРасшифровкаСКД(ИмяЯчейки);			
	Иначе	
		ПоказатьПредупреждение(, "Расшифровка данной ячейки не поддерживается."+Символы.ПС+"Расшифровку содержат ячейки формы, выделенные желтым цветом.");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыФормы.Вставить("Организация",              Налогоплательщик);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	ПараметрыФормы.Вставить("мДатаНачалаСравнительногоПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаСравнительногоПериодаОтчета);
	ПараметрыФормы.Вставить("мДатаКонцаСравнительногоПериодаОтчета", СтруктураРеквизитовФормы.мДатаКонцаСравнительногоПериодаОтчета);
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, мВыбраннаяФорма, "") + "ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ОценкаПроизводительности

&НаКлиенте
Функция НачатьЗамерВремени()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "Регламентированный отчет ""о прибылях и убытках (нсфо)"" (заполнение)";
		КлючеваяОперация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(КлючеваяОперация,?(ЗначениеЗаполнено(КодФормы), НРег(КодФормы), "форма 100")); 
		ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент").НачатьЗамерВремени(Истина, КлючеваяОперация);
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеТаймера()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда 
		
		Возврат ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").НачатьЗамерВремени();
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьЗамер(ВремяНачала)
	
	Если ВремяНачала <> Неопределено 
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "Регламентированный отчет ""о прибылях и убытках (нсфо)"" (заполнение)";
		ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СохранитьДанные() Экспорт
	СохранитьДанныеСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
КонецПроцедуры

&НаСервере
// Процедура очистки формы
//
// параметр: ТекИмяФормы - имя очищаемой формы (=КодФормы)
//           ОчиститьВсе - признак вида очистки формы              
//
Процедура Очистить(ТекИмяФормы,ОчиститьВсе = Ложь) Экспорт
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОбластьФорматирования"); // служебная область, очистка которой не возможна		
    СписокПоказателейНеПодлежащихОчистке.Добавить("НаименованиеОрганизации");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ВидДеятельности");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Адрес");			
	СписокПоказателейНеПодлежащихОчистке.Добавить("РазмерностьПрописью");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Руководитель");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ГлавныйБухгалтер");
		
	РегламентированнаяОтчетность.ОчиститьСтруктуруДанныхИТабличноеПолеФормы(ЭтаФорма, ТекИмяФормы, ОчиститьВсе, СписокПоказателейНеПодлежащихОчистке);
	
КонецПроцедуры // Очистить()

&НаКлиенте
Процедура ОчиститьРеглОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Форма = ДополнительныеПараметры.Форма;	
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", Форма.КодФормы));
		Вложенность = СтрокаФормы.ПолучитьЭлементы().Количество() >0;	
		
		ОчиститьРеглОтчетЗавершениеНаСервере(СтрокаФормы.КодФормы, СтрокаФормы.Многострочность, Вложенность)	
	КонецЕсли;		
КонецПроцедуры 	

&НаСервере
Процедура ОчиститьРеглОтчетЗавершениеНаСервере(КодФормы, ПризнакМногострочности, Вложенность)		
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, ПризнакМногострочности, Вложенность);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеглОтчет(ВидОчистки)
	//ФормаЗаполнена = РегламентированнаяОтчетностьКлиентСервер.формаЗ(Форма.ИмяФормы, Форма.мСписокФормБезИерархии);
	Вложенность = Ложь;
	//
	Если ВидОчистки = "ОчиститьФорму" Тогда    				
		ТекстВопроса = НСТР("ru = 'Очистить данные формы?'");
		Вложенность = Ложь;  		
	ИначеЕсли ВидОчистки = "ОчиститьФормуИПриложения" Тогда				
		ТекстВопроса = НСТР("ru = 'Очистить форму и ее приложения?'");		
		Вложенность = Истина;		
		
	КонецЕсли;	
	Оповещение = Новый ОписаниеОповещения("ОчиститьРеглОтчетЗавершение", ЭтотОбъект, Новый Структура);		
	Оповещение.ДополнительныеПараметры.Вставить("Форма",    ЭтотОбъект);
	Оповещение.ДополнительныеПараметры.Вставить("КодФормы", ЭтотОбъект.КодФормы);
		
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, ,КодВозвратаДиалога.Да);

	
	//РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму")
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьПараметрыФормыНаКлиенте(Параметры) экспорт
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	УстановитьПериодОтчета();
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);		
	КонецЦикла		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормы(ТекФорма, Параметры)
	ЗаполнитьЗначенияСвойств(ТекФорма.СтруктураРеквизитовФормы, Параметры);
	
	ТекФорма.Налогоплательщик = Параметры.Организация;
	ТекФорма.мСписокСтруктурныхЕдиниц = Параметры.мСписокСтруктурныхЕдиниц;
	ТекФорма.ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ТекФорма.мСписокСтруктурныхЕдиниц);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяГлавнойФормы(ВыбраннаяФорма) экспорт
	Возврат СтрДлина(ВыбраннаяФорма)-7
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры инициализации отчета и структуры его данных

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокСтруктурныхЕдиниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");			
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");	
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаСравнительногоПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаСравнительногоПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");		
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");		
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");	
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);			
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);	
	СтруктураРеквизитовФормы.Вставить("мПериодичность", Параметры.мПериодичность);		
	СтруктураРеквизитовФормы.Вставить("НалоговыйКомитет", Неопределено);			
	СтруктураРеквизитовФормы.Вставить("мГод");	
	СтруктураРеквизитовФормы.Вставить("мКвартал");	
	СтруктураРеквизитовФормы.Вставить("мМесяц");	
	// индивидуальные параметры формы
	СтруктураРеквизитовФормы.Вставить("мПоддержкаРаботыСоСтруктурнымиПодразделениями");	
	СтруктураРеквизитовФормы.Вставить("СтруктураСоответствияСчетов");	
	СтруктураРеквизитовФормы.Вставить("мКодСтрокиПрочиеДоходы");	
	СтруктураРеквизитовФормы.Вставить("мКодСтрокиПрочиеРасходы");	
	СтруктураРеквизитовФормы.Вставить("мКодСтрокиАмортизации");		
	
КонецПроцедуры // СформироватьСтруктуруРеквизитовФормы

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;			
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	//ФормироватьСтруктуруСтраницОтчета();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
			ТочностьЕдиницыИзмерения = 0;
			ЯзыкФормирования 		 = "ru";
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();	
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	
	мСтруктураЗначений = Новый Структура;
	
	Если СтруктураРеквизитовФормы.Свойство("СформироватьФормуОтчетаАвтоматически") И СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически <> Неопределено Тогда		
		ЗначениеТаймера = ЗначениеТаймера();
		
		ЗаполнитьАвтоНаСервере();
		
		ЗаписатьЗамер(ЗначениеТаймера);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтчетномПериоде() Экспорт

	СтрПериодОтчета = ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ФП = истина");
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
		СтруктураРеквизитовФормы.мКвартал = Лев(СтрПериодОтчета,1);
		СтруктураРеквизитовФормы.мМесяц = Неопределено;
	Иначе
		СтруктураРеквизитовФормы.мМесяц = Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		СтруктураРеквизитовФормы.мКвартал = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мГод = Лев(Прав(СтрПериодОтчета,7),4);
		
КонецПроцедуры 

&НаСервере
// В зависимости от языка заполнения процедура загружает макет в поле табличного документа
//
Процедура ЗагрузитьМакетВТабличныйДокумент() экспорт
	
	// очищаем текущие данные
	
	Макет = мМакет;
	
	Если ЗначениеЗаполнено(ЯзыкФормирования) Тогда
		Макет.КодЯзыкаМакета = ЯзыкФормирования;		
	КонецЕсли;
	
	ВсегоСтраниц = 1;
	Для Сч = 1 по ВсегоСтраниц Цикл
		ТекТабличныйДокумент = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница"+ Сч];	
		
		ОбластьОтчета = Макет.ПолучитьОбласть("Страница"+ Сч);			
		ТекТабличныйДокумент.Очистить();
		ТекТабличныйДокумент.Вывести(ОбластьОтчета);	
	 КонецЦикла;		
	 
	ТекТабличныйДокумент.АвтоМасштаб = Истина; 
	мЕстьМакет = Истина;		
КонецПроцедуры

// Заполняет параметры формы. Процедура выполняется
// только для немногострочных, неглавных форм (обычных форм).
// а такеж для мВыбраннаяФорма, когда вызывается при очистке
// из основной формы
//
//   Парам: ЭлементыГруппы - структура, содержащая элементы шапки, подвала и области 
//                           итогов многострочных форм
//
Процедура ЗаполнитьПараметры(ТекИмяФормы) Экспорт
	
	Если ТекИмяФормы = Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7) Тогда 				
		//заполним основные сведения об организации
		ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекИмяФормы);		
		УстановитьПериодОтчета();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПараметры()

////////////////////////////////////////////////////////////////////////////////
// Сохранение и восстановление данных

&НаСервере
Процедура СохранитьДанныеСервере()
	РегламентированнаяОтчетность.СохранитьОтчет(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()	
	РегламентированнаяОтчетность.ВосстановитьСохраненныйОтчет(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьДанныеСервере();
		Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;	
КонецПроцедуры   

////////////////////////////////////////////////////////////////////////////////
// Печать

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
            
    Перем СтруктураГруппы; 
    
    Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
        ТекстСообщения = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");            
        ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);                
                
        Возврат Ложь;
        
    КонецЕсли;
            
    СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
    СтруктураРеквизитовФормы.мРежимПечати = Истина;
    
    Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
        ВыборРасчета(КодФормы, Неопределено, Неопределено);
    КонецЕсли; 

    РегламентированнаяОтчетность.СформироватьСписокПечатаемыхЛистов(ЭтаФорма);
                 
        
    Возврат Истина;
    
КонецФункции


&НаСервере
Процедура ЕдиницаИзмеренияПриИзмененииНаСервере()
	УстановитьФорматВывода();
КонецПроцедуры

&НаСервере
Процедура ЯзыкФормированияПриИзмененииНаСервере()	
	РегламентированнаяОтчетность.ПередатьДанныеИзТабличногоПоляВСтруктуру(ЭтаФорма);
	ЗагрузитьМакетВТабличныйДокумент();	
		
	УстановитьПериодОтчета();
    УстановитьФорматВывода();
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиСтраниц()
	
// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРаздел = Элементы.РазделыОтчета.ТекущиеДанные.Страницы;		
	КонецЕсли;
	
	Для Каждого ТекФорма ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",ТекФорма.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			ТекущаяСтрокаСписка.Выгружать               = ТекФорма.Выгружать;
			ТекущаяСтрокаСписка.ПоказатьСтраницу        = ТекФорма.ПоказатьСтраницу;			
			ТекущаяСтрокаСписка.АвтополучениеИтогов     = ТекФорма.АвтополучениеИтогов;  
			ТекущаяСтрокаСписка.АвтоЗаполнение          = ТекФорма.АвтоЗаполнение;  
		КонецЕсли;		   
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокФормДерева",СписокФормДерева);
	
	ДопПараметры = Новый Структура("ТекущийРаздел",ТекущийРаздел);
	
	ОповещениеПослеЗакрытияФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастройкиСтраниц",ЭтотОбъект,ДопПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.НастройкиОтчета",ПараметрыФормы, ЭтаФорма,,,,ОповещениеПослеЗакрытияФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиСтраниц(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьДанныеФормы(РезультатЗакрытия, СписокФормДерева);
	
	Модифицированность = Истина;
	
	//обновим мСписокФормБезИерархии
	Для Каждого СтрокаФормы ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",СтрокаФормы.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			СтрокаФормы.Выгружать               = ТекущаяСтрокаСписка.Выгружать;
			СтрокаФормы.ПоказатьСтраницу        = ТекущаяСтрокаСписка.ПоказатьСтраницу;			
			СтрокаФормы.АвтополучениеИтогов     = ТекущаяСтрокаСписка.АвтополучениеИтогов;  
			СтрокаФормы.АвтоЗаполнение          = ТекущаяСтрокаСписка.АвтоЗаполнение;  
		КонецЕсли;			
	КонецЦикла; 	

	Если ДополнительныеПараметры.Свойство("ТекущийРаздел") И НЕ ДополнительныеПараметры.ТекущийРаздел = Неопределено Тогда  		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(РазделыОтчета, Новый Структура("СписокФормДереваСтраницы",ДополнительныеПараметры.ТекущийРаздел));
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;			
	КонецЕсли;  	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие

//Процедура выполняет выбор процедуры расчета.
//ВыборРасчета выполняется при восстановлении данных, при изменении поля табличного документа
//
//Параметры:    ТекФорма - имя текущей формы
//              Индекс - индекс строки для многострочной формы
//              Показатель - имя ячейки, откуда была вызвана процедура расчета многострочной
//                           формы, без указания номера строки (например, без "__1")
//
Процедура ВыборРасчета(ТекФорма, Индекс = Неопределено, Показатель = Неопределено) Экспорт
	Если ТекФорма = "ФормаОтчета" Тогда
		ФормаОтчетаРасчетНаСервере(Индекс, Показатель);	
	КонецЕсли;		
КонецПроцедуры // ВыборРасчета()

&НаСервере
Процедура ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы)
	ОргСведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(Налогоплательщик, ДатаПодписи);
	//Если организация не указана то не выводим никаких сведений
	Если ОргСведения = 0 Тогда
		Возврат;
	КонецЕсли;

	// Инициализируем переменные
	РННЮЛ = ""; 			// РНН	
	НаимЮЛПол = ""; 		// Полное наименование 	
	ИИН_БИН = ""; 			// ИИН_БИН	
	Руководитель = ""; 		// ФИО руководителя				
	ГлавныйБухгалтер = ""; 	// Главный бухгалтер
	Адрес = ""; 			// Адрес
	ОсновнойВидДеятельности = "";
	
	// Получаем данные
	ОргСведения.Свойство("РННЮЛ",     			РННЮЛ);
	ОргСведения.Свойство("БИН_ИИН",   			ИИН_БИН);
	ОргСведения.Свойство("ПолноеНаименование", 	НаимЮЛПол);	
	ОргСведения.Свойство("ЮридическийАдрес", 	Адрес);	
	ОргСведения.Свойство("Руководитель",		Руководитель);	
	ОргСведения.Свойство("ГлавныйБухгалтер",	ГлавныйБухгалтер);		
	ОргСведения.Свойство("ОсновнойВидДеятельности",	ОсновнойВидДеятельности);		
	                                         		
	// Производим операции связанные с текущей формой отчетности		
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"НаименованиеОрганизации",НаимЮЛПол);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"Адрес", Адрес + ", " + ИИН_БИН);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"ВидДеятельности", ОсновнойВидДеятельности);
	
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"Руководитель", Руководитель);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"ГлавныйБухгалтер", ГлавныйБухгалтер);
				
КонецПроцедуры

// Процедура формирует строку периода отчета на языке формирования отчета
&НаСервере
Процедура УстановитьПериодОтчета()
	ПериодОтчетаНаРусском 	= "по состоянию на " + СтрЗаменить(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,"ДЛФ = ДД"), "г.", "года");
	ПериодОтчетаНаКазахском	= СтрЗаменить(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,"Л=kk_KZ; ДЛФ=ДД"), "ж.", "жылғы") + " жағдай бойынша";
	
	ПериодОтчета = НСТР("ru = " + """" + ПериодОтчетаНаРусском + """; kz = " + """" + ПериодОтчетаНаКазахском + """", ЯзыкФормирования);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "ПериодОтчета",	ПериодОтчета);					
КонецПроцедуры // УстановитьПериодОтчета()

&НаСервере
// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописью;
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописью = НСтр("ru = ""тенге""; kz = ""теңге""", ЯзыкФормирования);				
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописью = НСтр("ru = ""тыс. тенге""; kz = ""мың теңге""", ЯзыкФормирования);				
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописью = НСтр("ru = ""млн. тенге""; kz = ""млн. теңге""", ЯзыкФормирования);				
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";
	КонецЕсли;
	ВсегоСтраниц = 1;
	Для Сч = 1 по ВсегоСтраниц Цикл
		// Обход по страницам формы
		Для Каждого ОбластьТаблицы Из ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница" + Сч].Области Цикл
			// по областям каждой страницы
			Если Не ОбластьТаблицы.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(ОбластьТаблицы.Имя, "ОбластьФорматирования") = 0 Тогда
				// форматируемые облатси должны быть объединены в область Значения1, Значения 2 и т.д.
				Продолжить;
			КонецЕсли;
			
			Если ОбластьТаблицы.СодержитЗначение Тогда
				Если СокрЛП(ОбластьТаблицы.ТипЗначения) = "Число" Тогда
					ОбластьТаблицы.Формат = мСтрокаФормата;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "РазмерностьПрописью", РазмерностьПрописью, Истина);
	
КонецПроцедуры // УстановитьФорматВывода()

&НаСервере
// Функция рассчитывает среднегодовую численность работников
Функция ПолучитьСреднегодовуюЧисленностьРаботников()
	мПризнакСистемыСотрудниковЗУП20 = Истина;
	
	Запрос = Новый Запрос;
								
	Запрос.УстановитьПараметр("парамНачГода", 					   НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));			
	Запрос.УстановитьПараметр("парамПериодПо", 					   КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамВнутреннееСовместительство",   Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", 	   мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("парамСписокИсключаемыхСостояний", 	Новый СписокЗначений());
	Запрос.УстановитьПараметр("парамРаботает",						"Работает");
	Запрос.УстановитьПараметр("парамУвольнение", 					Перечисления.ПричиныИзмененияСостояния.Увольнение);
								
	// Сформируем текст запроса с датами месяцев периода с начала года по конец текущего месяца
	// первый месяц квартала
	НачалоМесяца = НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПериодыТекст = "ВЫБРАТЬ 
					|	ДАТАВРЕМЯ(" + Формат (НачалоМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК НачалоМесяца,
					|	ДАТАВРЕМЯ(" + Формат (КонецМесяца(НачалоМесяца),"ДФ=гггг,М,д,Ч,м,с") + ") КАК КонецМесяца
					|";
	// прибавим остальные месяцы
	Пока НачалоМесяца <= НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Цикл
		НачалоМесяца = КонецМесяца(НачалоМесяца) + 1;
	   	ПериодыТекст = ПериодыТекст + "
	   								  |ОБЪЕДИНИТЬ ВСЕ 
	   								  |
	   								  |ВЫБРАТЬ 
	   								  |	   ДАТАВРЕМЯ(" + Формат(НачалоМесяца,"ДФ=гггг,М,д,Ч,м,с") + "),
	   								  |	   ДАТАВРЕМЯ(" + Формат(КонецМесяца(НачалоМесяца),"ДФ=гггг,М,д,Ч,м,с") + ")
	   								  |";
	КонецЦикла;	

	// Получим даты приема и увольнения для работников организации за период
	РаботникиОрганизацииТекст = "
	|ВЫБРАТЬ
	|	РаботникиОрганизации." +?(мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ФизЛицо КАК ФизЛицо,
	|	РаботникиОрганизации." +?(мПризнакСистемыСотрудниковЗУП20, "Сотрудник", "Приказ") + " КАК Приказ,
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.ОбособленноеПодразделение,
	|	&парамНачГода КАК Период,
	|	РаботникиОрганизации.ПричинаИзмененияСостояния,
	|	РаботникиОрганизации." +?(мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ВидЗанятости КАК ВидЗанятости
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&парамНачГода, 
	|				" +?(мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ВидЗанятости <> &парамВнутреннееСовместительство) КАК РаботникиОрганизации
	|
	|ГДЕ
	|	РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУвольнение
	|	И РаботникиОрганизации.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизации." +?(мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ФизЛицо КАК ФизЛицо,
	|	РаботникиОрганизации." +?(мПризнакСистемыСотрудниковЗУП20, "Сотрудник", "Приказ") + " КАК Приказ,
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.ОбособленноеПодразделение,
	|	РаботникиОрганизации.Период, 
	|	РаботникиОрганизации.ПричинаИзмененияСостояния,
	|	РаботникиОрганизации." +?(мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ВидЗанятости КАК ВидЗанятости
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Период > &парамНачГода И
	|	РаботникиОрганизации.Период <= &парамПериодПо И
	|	(РаботникиОрганизации." +?(мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ВидЗанятости <> &парамВнутреннееСовместительство)
	|";
	
	Запрос.Текст = РаботникиОрганизацииТекст;
	
	// Получим периоды назначений работников
	ПериодыНазначенийТекст = "
	|ВЫБРАТЬ
	|	ТекущееНазначение.ФизЛицо,
	|	ТекущееНазначение.Приказ,
	|	ТекущееНазначение.Организация,
	|	ТекущееНазначение.ВидЗанятости,
	|	ТекущееНазначение.Период КАК ДатаНачала,
	|	МИНИМУМ(ВЫБОР 
	|				КОГДА СледующееНазначение.Период ЕСТЬ NULL ТОГДА &парамПериодПо 
	|				ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(СледующееНазначение.Период, ДЕНЬ, -1), ДЕНЬ)
	|			КОНЕЦ) КАК ДатаОкончания
	|ИЗ
	|	(" + РаботникиОрганизацииТекст + ") КАК ТекущееНазначение
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + РаботникиОрганизацииТекст + ") КАК СледующееНазначение
	|		ПО ТекущееНазначение.ФизЛицо = СледующееНазначение.ФизЛицо
	|		   И ТекущееНазначение.Приказ = СледующееНазначение.Приказ
	|		   И ТекущееНазначение.Организация = СледующееНазначение.Организация
	|		   И ТекущееНазначение.Период < СледующееНазначение.Период
	|ГДЕ
	|	ТекущееНазначение.ПричинаИзмененияСостояния <> &парамУвольнение	
	|	И ТекущееНазначение.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц)
	|СГРУППИРОВАТЬ ПО
	|	ТекущееНазначение.ФизЛицо,
	|	ТекущееНазначение.Приказ,
	|	ТекущееНазначение.Организация,
	|	ТекущееНазначение.ВидЗанятости,
	|	ТекущееНазначение.Период	
	|";
	
	Запрос.Текст = ПериодыНазначенийТекст;
	
	// Разобьем данные о назначениях-состояниях на помесячные записи и подсчитаем число дней за каждый период
	ПериодыНазначенийТекст = "
	|ВЫБРАТЬ
	|	ПериодыНазначений.ФизЛицо,
	|	ПериодыНазначений.Приказ,
	|	ПериодыНазначений.ВидЗанятости,
	|	&парамРаботает КАК Состояние,
	|	ВЫБОР
	|		КОГДА ПериодыНазначений.ДатаНачала > Периоды.НачалоМесяца ТОГДА ПериодыНазначений.ДатаНачала
	|		ИНАЧЕ Периоды.НачалоМесяца
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР 
	|		КОГДА ПериодыНазначений.ДатаОкончания < Периоды.КонецМесяца ТОГДА ПериодыНазначений.ДатаОкончания
	|		ИНАЧЕ Периоды.КонецМесяца 
	|	КОНЕЦ КАК ДатаОкончания,
	|	ДЕНЬ(ВЫБОР // ДатаОкончания
	|			КОГДА ПериодыНазначений.ДатаОкончания < Периоды.КонецМесяца ТОГДА ПериодыНазначений.ДатаОкончания
	|			ИНАЧЕ Периоды.КонецМесяца 
	|		КОНЕЦ) - 
    |	ДЕНЬ(ВЫБОР // ДатаНачала
	|			КОГДА ПериодыНазначений.ДатаНачала > Периоды.НачалоМесяца ТОГДА ПериодыНазначений.ДатаНачала
	|			ИНАЧЕ Периоды.НачалоМесяца
	|		КОНЕЦ) + 1 КАК ДнейРаботыВМесяце,
	|	Периоды.НачалоМесяца,
	|	Периоды.КонецМесяца
	|ИЗ
	|	(" + ПериодыНазначенийТекст + ") КАК ПериодыНазначений
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ПериодыТекст + ") КАК Периоды
	|		ПО ПериодыНазначений.ДатаНачала <= Периоды.КонецМесяца 
	|		   И ПериодыНазначений.ДатаОкончания >= Периоды.НачалоМесяца 
	|";
	
	Запрос.Текст = ПериодыНазначенийТекст;
	
	// Определим среднесписочную численность за каждый месяц
	ЧисленностьТекст = "
	|ВЫБРАТЬ
	|	ПериодыНазначений.НачалоМесяца,
	|	ВЫРАЗИТЬ(СУММА(ПериодыНазначений.ДнейРаботыВМесяце) / ДЕНЬ(ПериодыНазначений.КонецМесяца) КАК ЧИСЛО(10, 0)) КАК Среднесписочная
	|ИЗ
	|	(" + ПериодыНазначенийТекст + ") КАК ПериодыНазначений
	|СГРУППИРОВАТЬ ПО
	|	ПериодыНазначений.НачалоМесяца, 
	|	ПериодыНазначений.КонецМесяца 
	|";
	
	Запрос.Текст = ЧисленностьТекст;
	
	// Выделим численность с начала года
	ЧисленностьТекст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(Численность.Среднесписочная / МЕСЯЦ(&парамПериодПо) ) КАК СреднесписочнаяСНачалаГода	
	|
	|ИЗ
	|	(" + ЧисленностьТекст + ") КАК Численность
	|";
	
	Запрос.Текст = ЧисленностьТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	
	СреднегодоваяЧисленность = 0;
	Если Выборка.Следующий() Тогда
		СреднегодоваяЧисленность = ?(ЗначениеЗаполнено(Выборка.СреднесписочнаяСНачалаГода), Выборка.СреднесписочнаяСНачалаГода, 0);		
	КонецЕсли;	
	
	Возврат СреднегодоваяЧисленность;
КонецФункции // ПолучитьСреднегодовуюЧисленностьРаботников()

&НаСервере
// Процедура устанавливает значение показателя  в структуре отчета, с учетом уже имеющихся сумм
Процедура УстановитьЗначенияПоказателей(КодФормы, ТаблицаДанных, КодСтрокиОтчета, Значение)
	
	Сумма = Значение + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, КодСтрокиОтчета);
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,КодСтрокиОтчета, Сумма, ФормаОтчетаПолеТабличногоДокументаСтраница1);
КонецПроцедуры

&НаСервере
// Функция заполняет структуру данными о соответствии счета БУ - строке баланса
//
Функция ЗаполнитьСтруктуруСоответствийСчетов()
	СтруктураСоответствияСчетов = Новый Структура;
	
	МакетСоставаПоказателей = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("СоставПоказателей");
	ТекОбласть    			= МакетСоставаПоказателей.Область("Структура" + Прав(мВыбраннаяФорма,7));
	
	Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
		// перебираем строки макета		
		ИмяСчета 	= СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
		ГрафаОтчета = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);		
		Если ЗначениеЗаполнено(ИмяСчета) Тогда         // признак конечной строки
			СтруктураСоответствияСчетов.Вставить(ИмяСчета, ГрафаОтчета);			
		КонецЕсли;	
		
	КонецЦикла; 
	
	Возврат СтруктураСоответствияСчетов;
КонецФункции // ЗаполнитьСтруктуруСоответствийСчетовСтрокамБаланса

&НаСервере
// Функция возвращает код строки макета отчета для конкретного счета
 // 
Функция ПолучитьКодСтрокиОтчета(Счет, СчетПредопределенный = Неопределено, СчетВидСчета = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(СчетПредопределенный) Тогда
		СчетПредопределенный = Счет.Предопределенный;   		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СчетВидСчета) Тогда
		СчетВидСчета = Счет.Вид;   		
	КонецЕсли;
	
	КодСтроки = Неопределено;
	
	Если СчетПредопределенный Тогда
		// поиск счета в Структуре соответствия
		ИмяПредопределенногоСчета = ПланыСчетов.Типовой.ПолучитьИмяПредопределенного(Счет);
		Если СтруктураРеквизитовФормы.СтруктураСоответствияСчетов.Свойство(ИмяПредопределенногоСчета) Тогда
			КодСтроки  = СтруктураРеквизитовФормы.СтруктураСоответствияСчетов[ИмяПредопределенногоСчета];
		КонецЕсли;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КодСтроки) Тогда
		// счета в макете соответствий нет
		// пробуем найти код по родителям счета рекурсивно			
		Если ЗначениеЗаполнено(Счет.Родитель) Тогда
			КодСтроки = ПолучитьКодСтрокиОтчета(Счет.Родитель);
		КонецЕсли;				
	КонецЕсли;				
		
	Если НЕ ЗначениеЗаполнено(КодСтроки) Тогда
		// Включаем его  в прочие доходы, или затраты в зависимости от вида счета
		Если СчетВидСчета  = ВидСчета.Активный Тогда
			КодСтроки =  СтруктураРеквизитовФормы.мКодСтрокиПрочиеРасходы; 		
		Иначе	
			КодСтроки =  СтруктураРеквизитовФормы.мКодСтрокиПрочиеДоходы; 
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат КодСтроки;
КонецФункции // ПолучитьКодСтрокиОтчета

&НаСервере
// Функция возвращает код строки макета баланса для конкретного счета
 // 
Функция ПолучитьКодСтрокиБаланса(Счет, СчетПредопределенный = Неопределено, СчетВидСчета = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(СчетПредопределенный) Тогда
		СчетПредопределенный = Счет.Предопределенный;   		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СчетВидСчета) Тогда
		СчетВидСчета = Счет.Вид;   		
	КонецЕсли;
	
	КодСтроки = Неопределено;
	
	Если СчетПредопределенный Тогда
		// поиск счета в Структуре соответствия
		ИмяПредопределенногоСчета = ПланыСчетов.Типовой.ПолучитьИмяПредопределенного(Счет);
		Если СтруктураРеквизитовФормы.СтруктураСоответствияСчетов.Свойство(ИмяПредопределенногоСчета) Тогда
			КодСтроки  = СтруктураРеквизитовФормы.СтруктураСоответствияСчетов[ИмяПредопределенногоСчета];
		КонецЕсли;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КодСтроки) Тогда
		// счета в макете соответствий нет
		// пробуем найти код по родителям счета рекурсивно			
		Если ЗначениеЗаполнено(Счет.Родитель) Тогда
			КодСтроки = ПолучитьКодСтрокиБаланса(Счет.Родитель);
		КонецЕсли;				
	КонецЕсли;				
		
	Если НЕ ЗначениеЗаполнено(КодСтроки) Тогда
		// Включаем его  в прочие активы, прочие резервы или пассивы в зависимости от вида счета
		// Включаем его  в прочие доходы, или затраты в зависимости от вида счета
		Если СчетВидСчета  = ВидСчета.Активный Тогда
			КодСтроки =  СтруктураРеквизитовФормы.мКодСтрокиПрочиеРасходы; 		
		Иначе	
			КодСтроки =  СтруктураРеквизитовФормы.мКодСтрокиПрочиеДоходы; 
		КонецЕсли;	

	КонецЕсли;	
	
	Возврат КодСтроки;
КонецФункции // ПолучитьКодСтроки

&НаКлиенте
// Выполняет расчет вычисляемых показателей формы
// Параметр Изменено определяет откуда была вызвана данная процедура
// 
// При Изменено = Истина вызывается при изменении поля табличного документа,
// в остальных случаях параметр = Ложь.
// Основное назначение - манипуляция со значениями полей, которые которые подлежит не суммовому расчету, 
// а расчету суммы с добавлением входящих в него значений
//
Процедура ФормаОтчетаРасчет(ИмяЯчейки, ЗначениеЯчейки, Изменено = Ложь)

	 //Расчет вычисляемых ячеек
	
	ТекИмяФормы = "ФормаОтчета";	
	ФормаОтчетаРасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки);	
			    	                	
КонецПроцедуры   //ФормаРасчет()

&НаСервере
Процедура ФормаОтчетаРасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки )
	ТекИмяФормы = "ФормаОтчета";
	
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,ИмяЯчейки ,ЗначениеЯчейки);
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ТекИмяФормы);	
	
	Для НомерПериода = 1 по 2 Цикл
		// 04. Итого доходов(сумма строк с 01 по 03)																				
		Итого = 0;
		Для Счетчик  = 1 по 3 Цикл
			НомерСтроки = "s_" + Формат(Счетчик,"ЧЦ=2; ЧДЦ=0; ЧВН=") + "_";			
			Итого = Итого + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,НомерСтроки + НомерПериода);
		КонецЦикла;	
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,"s_04_" + НомерПериода ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница1);
		
		
		// 10. Итого расходов(сумма строк с 05 по 09)																				
		Итого = 0;
		Для Счетчик  = 5 по 9 Цикл
			НомерСтроки = "s_" + Формат(Счетчик,"ЧЦ=2; ЧДЦ=0; ЧВН=") + "_";			
			Итого = Итого + РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,НомерСтроки + НомерПериода);
		КонецЦикла;	
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных,"s_10_" + НомерПериода ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница1);
		
		
		// 11. Прибыль/убыток до налогообложения (строка 04- строка 10)
		Итого = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_04_" + НомерПериода) - РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_10_" + НомерПериода);		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_11_" + НомерПериода ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница1);
		
		
		// 13. Итого чистая прибыль (убыток) за период (стр.11 - стр.12)									
		Итого = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_11_" + НомерПериода) - РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_12_" + НомерПериода);				
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "s_13_" + НомерПериода ,Итого, ФормаОтчетаПолеТабличногоДокументаСтраница1);		
	КонецЦикла;	
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, КодФормы, ТаблицаДанных);
КонецПроцедуры

&НаСервере
Функция ФормаРассчитатьДанныеФормы(ДатаНачалаПериода, ДатаОкончанияПериода) 		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	СчетаУчетаОС.СчетНачисленияАмортизацииБУ КАК СчетАмортизации
	               |ПОМЕСТИТЬ ВТ_СчетаАмортизации
	               |ИЗ
	               |	РегистрСведений.СчетаУчетаОС КАК СчетаУчетаОС
	               |ГДЕ
	               |	НЕ СчетаУчетаОС.СчетНачисленияАмортизацииБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СчетаУчетаНМА.СчетНачисленияАмортизацииБУ
	               |ИЗ
	               |	РегистрСведений.СчетаУчетаНМА КАК СчетаУчетаНМА
	               |ГДЕ
	               |	НЕ СчетаУчетаНМА.СчетНачисленияАмортизацииБУ = ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТиповойОбороты.Счет,
	               |	ТиповойОбороты.СуммаОборотДт КАК СуммаАмортизации
	               |ПОМЕСТИТЬ ВТ_ДанныеАмортизации
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Обороты(
	               |			&ДатаНачала,
	               |			&ДатаОкончания,
	               |			,
	               |			Счет В ИЕРАРХИИ (&СчетаРасходов),
	               |			,
	               |			Организация В (&СписокОрганизаций),
	               |			КорСчет В ИЕРАРХИИ
	               |				(ВЫБРАТЬ
	               |					ВТ_СчетаАмортизации.СчетАмортизации
	               |				ИЗ
	               |					ВТ_СчетаАмортизации),
	               |			) КАК ТиповойОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОбщиеДанные.Счет КАК Счет,				   
	               |	СУММА(ОбщиеДанные.СуммаОборот - ОбщиеДанные.СуммаАмортизации) КАК Сумма,
	               |	СУММА(ОбщиеДанные.СуммаАмортизации) КАК СуммаАмортизации,
	               |	ОбщиеДанные.Счет.Предопределенный КАК Предопределенный,
	               |	ОбщиеДанные.Счет.Вид КАК ВидСчета
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТиповойОбороты.Счет КАК Счет,
	               |		ВЫБОР КОГДА ТиповойОбороты.Счет В ИЕРАРХИИ (&СчетаДоходов) Тогда ТиповойОбороты.СуммаОборот Иначе -ТиповойОбороты.СуммаОборот КОНЕЦ КАК СуммаОборот,
	               |		0 КАК СуммаАмортизации
	               |	ИЗ
	               |		РегистрБухгалтерии.Типовой.Обороты(&ДатаНачала, &ДатаОкончания, , Счет В ИЕРАРХИИ (&СчетаДоходов, &СчетаРасходов), , Организация В (&СписокОрганизаций), КорСчет В ИЕРАРХИИ (&СчетИтоговойПрибыли), ) КАК ТиповойОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ВТ_ДанныеАмортизации.Счет,
	               |		0,
	               |		ВТ_ДанныеАмортизации.СуммаАмортизации
	               |	ИЗ
	               |		ВТ_ДанныеАмортизации КАК ВТ_ДанныеАмортизации) КАК ОбщиеДанные
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОбщиеДанные.Счет
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Счет";
				   
	
	МассивСчетовДоходов  = РегламентированнаяОтчетностьПереопределяемый.СформироватьСписокСчетовДоходовРасходов(, Ложь);
	МассивСчетовРасходов = РегламентированнаяОтчетностьПереопределяемый.СформироватьСписокСчетовДоходовРасходов(Ложь);
	
	
	Запрос.УстановитьПараметр("ДатаНачала", 			НачалоДня(ДатаНачалаПериода));
	Запрос.УстановитьПараметр("ДатаОкончания", 			КонецДня(ДатаОкончанияПериода));
	Запрос.УстановитьПараметр("СписокОрганизаций", 		мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("СчетаДоходов", 			МассивСчетовДоходов);
	Запрос.УстановитьПараметр("СчетаРасходов", 			МассивСчетовРасходов);
	Запрос.УстановитьПараметр("СчетИтоговойПрибыли", 	ПланыСчетов.Типовой.ИтоговаяПрибыльИтоговыйУбыток_);
	                                                                        		                	           	
	Результат = Запрос.Выполнить();
		     	
	Возврат Результат;		 
	   	
КонецФункции // ФормаРассчитатьДанныеФормы()

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
		
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, Ложь,Ложь);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, КодФормы);	
	   
	КодСтрокиАмортизации = СтруктураРеквизитовФормы.мКодСтрокиАмортизации;	// отдельно выделяем амортизационные расходы
	
	// получаем данные за текущий и за предыдущий период
	Для НомерПериода = 1 по 2 Цикл
		Если НомерПериода = 1 Тогда
			ВыборкаРезультата = ФормаРассчитатьДанныеФормы(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		Иначе
			ВыборкаРезультата = ФормаРассчитатьДанныеФормы(СтруктураРеквизитовФормы.мДатаНачалаСравнительногоПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаСравнительногоПериодаОтчета);
		КонецЕсли;
		
		ВыборкаОтчета = ВыборкаРезультата.Выбрать();
		Пока ВыборкаОтчета.Следующий() Цикл					
			КодСтрокиОтчета = ПолучитьКодСтрокиОтчета(ВыборкаОтчета.Счет, ВыборкаОтчета.Предопределенный, ВыборкаОтчета.ВидСчета);
			// сумма с учетом уже имеющихся данных
			УстановитьЗначенияПоказателей(КодФормы, ТаблицаДанных, "s_" + КодСтрокиОтчета + "_" + НомерПериода, ВыборкаОтчета.Сумма);		
			УстановитьЗначенияПоказателей(КодФормы, ТаблицаДанных, "s_" + КодСтрокиАмортизации + "_" + НомерПериода, ВыборкаОтчета.СуммаАмортизации);		
		КонецЦикла;	
	КонецЦикла; 
		
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, КодФормы, ТаблицаДанных);	
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы,"СреднегодоваяЧисленность", ПолучитьСреднегодовуюЧисленностьРаботников());
		
	ФормаОтчетаРасчетНаСервере(Неопределено, Неопределено);	
	
	Модифицированность = Истина;
	УстановитьФорматВывода();	
КонецПроцедуры

&НаСервере
Функция ФормаОтчетаПолучитьСписокСчетовВключаемыхВРасшифровку(КодСтроки, ПризнакСчетовВключаемыхВСтроку = Истина)
	СписокСчетов  = Новый СписокЗначений;
	
	Если КодСтроки = СтруктураРеквизитовФормы.мКодСтрокиАмортизации Тогда	// отдельно выделяем амортизационные расходы 
		Возврат РегламентированнаяОтчетностьПереопределяемый.СформироватьСписокСчетовДоходовРасходов(Ложь, Истина); // все счета затрат
	КонецЕсли;
		
	Для Каждого ЭлементСоответствия из СтруктураРеквизитовФормы.СтруктураСоответствияСчетов Цикл
		Если (ЭлементСоответствия.Значение = КодСтроки) = ПризнакСчетовВключаемыхВСтроку Тогда
			Попытка
				СписокСчетов.Добавить(ПланыСчетов.Типовой[ЭлементСоответствия.Ключ]);
			Исключение
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;		

	Возврат СписокСчетов; 
КонецФункции

&НаКлиенте
Процедура ФормаОтчетаРасшифровкаСКД(ИмяЯчейки)
	Если Найти(ИмяЯчейки, "s_") = 0 Тогда 
		Возврат;
	КонецЕсли;  			
	КодПериода = Прав(ИмяЯчейки, 1);
	ИмяЯчейки = Сред(ИмяЯчейки, 3, 2);	
		
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", 	?(КодПериода = "1", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаНачалаСравнительногоПериодаОтчета));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  	?(КодПериода = "1", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаСравнительногоПериодаОтчета));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ТипДанных", 		"РегистрыБухгалтерии");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяОбъекта", 	"Типовой");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяТаблицы", 	"Обороты");
	//ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ПолучитьАдресМакетаСКД());

	// Отборы
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";	
    БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Организация",  мСписокСтруктурныхЕдиниц, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
	
	Если ИмяЯчейки = СтруктураРеквизитовФормы.мКодСтрокиАмортизации Тогда	// отдельно выделяем амортизационные расходы
		МассивКорСчетовАмортизации = Новый СписокЗначений;
		МассивКорСчетовАмортизации.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.АмортизацияОсновныхСредств"));
		МассивКорСчетовАмортизации.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.АмортизацияИнвестицийВНедвижимость"));
		МассивКорСчетовАмортизации.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.АмортизацияПрочихНематериальныхАктивов"));
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "КорСчет",  МассивКорСчетовАмортизации, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);	
	Иначе	
		// прочие показатели
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "КорСчет",  ПредопределенноеЗначение("ПланСчетов.Типовой.ИтоговаяПрибыльИтоговыйУбыток_"), ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);	
	КонецЕсли;
	
	// Сортировка
	ПользовательскиеСортировки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ПорядокКомпоновкиДанных"));
	ПользовательскиеСортировки.ИдентификаторПользовательскойНастройки = "Порядок";
	
	НовыйЭлементПорядка = ПользовательскиеСортировки.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовыйЭлементПорядка.Использование  = Истина;
	НовыйЭлементПорядка.Поле  = Новый ПолеКомпоновкиДанных("Счет");
	
	// Группировки	
	МассивГруппировок = Новый Массив();
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "Организация", НСтр("ru = 'Организация'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));

	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка",  МассивГруппировок);
	
	
	// Дополнительные отборы
	Если ИмяЯчейки<> СтруктураРеквизитовФормы.мКодСтрокиПрочиеДоходы И ИмяЯчейки<> СтруктураРеквизитовФормы.мКодСтрокиПрочиеРасходы Тогда		
		// получаем счета для указанной строки
		СчетаРасшифровки = ФормаОтчетаПолучитьСписокСчетовВключаемыхВРасшифровку(ИмяЯчейки);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет",  СчетаРасшифровки, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);		
	Иначе
		// в строки прочих активов и прочих обязательств могу входить счета, не учетнные в базовом соответствии (например, счета, добавленные пользователем)
		// поэтому в эти строки должны входить все, счета не учтенные в остальных строках и имеющих нужный вид счета
		СчетаРасшифровки = ФормаОтчетаПолучитьСписокСчетовВключаемыхВРасшифровку(ИмяЯчейки, Ложь); // получаем список счетов исключаемых из строки
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет",  СчетаРасшифровки, ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии);						
		
		//В строку прочих активов включаются активные счета, не вошедшие в другие разделы активов, в строку прочих обязательств - пассивные и активно-пассивные счета
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет.Вид",  ВидСчета.Активный, ?(ИмяЯчейки = СтруктураРеквизитовФормы.мКодСтрокиПрочиеРасходы, ВидСравненияКомпоновкиДанных.Равно, ВидСравненияКомпоновкиДанных.НеРавно));				
	КонецЕсли;
    БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет.Забалансовый",  Ложь, ВидСравненияКомпоновкиДанных.Равно);				
	
	
	//ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПараметрыДанных", МассивПараметровДанных);
	
	ПользовательскиеПоля = ПользовательскиеНастройки.Элементы.Добавить(Тип("ВыбранныеПоляКомпоновкиДанных"));	
	ПользовательскиеПоля.ИдентификаторПользовательскойНастройки = "Выбор";	    	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Счет.Код", "Код счета");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Счет.Наименование", "Наименование счета");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаОборот", 	"Оборот за период");	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаОборотДт", "Оборот Дт");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаОборотКт", "СуммаОборот Кт");
		
	// Прочие настройки
	ТекстЗаголовка = НСТР("ru = 'Регистр бухгалтерского учета к строке %1 Баланса'");	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Заголовок", 	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, ИмяЯчейки));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", Истина);	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьПодписи", Истина); 	
	
	ИмяРазделаРасшифровки = "Баланс " + СтруктураРеквизитовФормы.мГод;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ВыводитьЗаголовок", Истина);	
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", ИмяРазделаРасшифровки);
	//ПараметрыФормы.Вставить("ЗаполняемыеНастройки",ЗаполняемыеНастройки );	
    
	ОткрытьФорму("Отчет.УниверсальныйОтчетПоМетаданным.Форма.ФормаОтчета", ПараметрыФормы,, Истина);
КонецПроцедуры



