
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем УИДЗамера;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыВызовСервера.УстановитьНастройкиПоУмолчанию(ЭтаФорма);
	
	Отчет.СписокОрганизаций = Справочники.Организации.ОрганизацияПоУмолчанию();
	
	ЗаполнитьВидыСравнения();
	
	УстановитьПараметрыВыбораПодразделенийОрганизаций(ЭтотОбъект);
	
	КлючТекущегоВарианта = "";
	РассылкаОтчетовБК.ПриСозданииНаСервере(ЭтаФорма);
	Если НЕ ЗначениеЗаполнено(Отчет.ПериодОтчета) Тогда
		Отчет.ПериодОтчета = Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлыйМесяц);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
		
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	ПодключитьОбработчикОжидания = Не ИБФайловая И ЗначениеЗаполнено(ИдентификаторЗадания);
	Если ПодключитьОбработчикОжидания Тогда		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
	Если ТипЗнч(Отчет.СписокОрганизаций) = Тип("Неопределено") Тогда
		Если ВидСравненияОрганизации = ВидСравнения.Равно ИЛИ ВидСравненияОрганизации = ВидСравнения.НеРавно Тогда
			Элементы.СписокОрганизаций.ОграничениеТипа      = Новый ОписаниеТипов("СправочникСсылка.Организации");
			Элементы.СписокОрганизацийОтбор.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");
		Иначе
			Отчет.СписокОрганизаций = Новый СписокЗначений;
			Отчет.СписокОрганизаций.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
			Элементы.СписокОрганизаций.ОграничениеТипа      = Новый ОписаниеТипов("СписокЗначений");
			Элементы.СписокОрганизацийОтбор.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
		КонецЕсли;
	Иначе
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(Отчет.СписокОрганизаций));

		Элементы.СписокОрганизаций.ОграничениеТипа      = Новый ОписаниеТипов(МассивТипов);
		Элементы.СписокОрганизацийОтбор.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
	Если ТипЗнч(Отчет.СписокПодразделений) = Тип("Неопределено") Тогда
		Если ВидСравненияПодразделения = ВидСравнения.Равно ИЛИ ВидСравненияПодразделения = ВидСравнения.НеРавно Тогда
			Элементы.СписокПодразделений.ОграничениеТипа      = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций");
			Элементы.СписокПодразделенийОтбор.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций");
		Иначе
			Отчет.СписокПодразделений = Новый СписокЗначений;
			Отчет.СписокПодразделений.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций");
			Элементы.СписокПодразделений.ОграничениеТипа      = Новый ОписаниеТипов("СписокЗначений");
			Элементы.СписокПодразделенийОтбор.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
		КонецЕсли;
	Иначе
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(Отчет.СписокПодразделений));

		Элементы.СписокПодразделений.ОграничениеТипа      = Новый ОписаниеТипов(МассивТипов);
		Элементы.СписокПодразделенийОтбор.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
	Если ТипЗнч(Отчет.СписокСотрудников) = Тип("Неопределено") Тогда
		Если ВидСравненияРаботника = ВидСравнения.Равно ИЛИ ВидСравненияРаботника = ВидСравнения.НеРавно Тогда
			Элементы.СписокСотрудников.ОграничениеТипа      = Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций");
			Элементы.СписокСотрудниковОтбор.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций");
		Иначе
			Отчет.СписокСотрудников = Новый СписокЗначений;
			Отчет.СписокСотрудников.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций");
			Элементы.СписокСотрудников.ОграничениеТипа      = Новый ОписаниеТипов("СписокЗначений");
			Элементы.СписокСотрудниковОтбор.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
		КонецЕсли;
	Иначе
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(Отчет.СписокСотрудников));

		Элементы.СписокСотрудников.ОграничениеТипа      = Новый ОписаниеТипов(МассивТипов);
		Элементы.СписокСотрудниковОтбор.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
	// Установка модифицированности пользовательских настроек 
	// для их автоматического сохранения при закрытии формы
	ПользовательскиеНастройкиМодифицированы = Истина;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
	Если ОткрытИзРассылки И НЕ ЗавершениеРаботы Тогда
		ПриСохраненииПользовательскихНастроекНаСервереРассылка();
		РассылкаОтчетовБККлиент.ПередЗакрытием(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОтменитьВыполнениеЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	ВариантыОтчетов.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки);
	
	СохраняемыеРеквизитыФормы = Новый Массив;
	СохраняемыеРеквизитыФормы.Добавить("ВидСравненияОрганизации");
	СохраняемыеРеквизитыФормы.Добавить("ВидСравненияПодразделения");
	СохраняемыеРеквизитыФормы.Добавить("ВидСравненияРаботника");
	
	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки, , СохраняемыеРеквизитыФормы);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	ЗагружаемыеРеквизитыФормы = Новый Массив;
	ЗагружаемыеРеквизитыФормы.Добавить("ВидСравненияОрганизации");
	ЗагружаемыеРеквизитыФормы.Добавить("ВидСравненияПодразделения");
	ЗагружаемыеРеквизитыФормы.Добавить("ВидСравненияРаботника");
	
	Если ОткрытИзРассылки Тогда
		Возврат;
	Иначе
		БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки,, ЗагружаемыеРеквизитыФормы);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Отчет.ПериодОтчета) Тогда
		Отчет.ПериодОтчета.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяц;
	КонецЕсли;
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.РассылкиОтчетов.Форма.НастройкаРассылкиБК" Тогда
		ОбработкаНастройкиРассылкиОтчета(ВыбранноеЗначение);
	Иначе
		БухгалтерскиеОтчетыКлиент.ОтправитьОтчетыПоПочтеОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСравненияОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ВидСравненияОбработкаВыбора(Новый Структура("Имя, Значение", "ВидСравненияОрганизации", ВидСравненияОрганизации), ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСравненияПодразделенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ВидСравненияОбработкаВыбора(Новый Структура("Имя, Значение", "ВидСравненияПодразделения", ВидСравненияПодразделения), ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ВидСравненияРаботникаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ВидСравненияОбработкаВыбора(Новый Структура("Имя, Значение", "ВидСравненияРаботника", ВидСравненияРаботника), ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СписокОрганизацийПриИзменении(Элемент)
	
	УстановитьПараметрыВыбораПодразделенийОрганизаций(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Отчет.СписокПодразделений) Тогда
		ПроверитьСоответсвиеПодразделенияОрганизацииНаСервере(Отчет.СписокОрганизаций, Отчет.СписокПодразделений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОрганизацийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТипЗнч(Отчет.СписокОрганизаций) = Тип("СписокЗначений") Тогда
	
		СтандартнаяОбработка = Ложь;
		
		РежимРаботы = "ПодборВОтчет";
		
		СписокПодразделений = Новый СписокЗначений;
		СписокВладельцевГоловныхПодразделений = Новый СписокЗначений;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораСпискаОрганизаций", ЭтаФорма, Новый Структура);
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтруктурногоПодразделения",
					 Новый Структура("Организация, СтруктурноеПодразделение, ДоступноИзменениеОрганизации, РежимРаботы, СписокСтруктурныхЕдиниц,
					                 |СписокПодразделений, СписокВладельцевГоловныхПодразделений, ВыборСтруктурныхПодразделений",
									 ,, Истина, РежимРаботы, Отчет.СписокОрганизаций, СписокПодразделений, СписокВладельцевГоловныхПодразделений, Ложь),
		             ЭтаФорма, Истина,,, ОписаниеОповещения);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьНалогиПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПримененныйВычетПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДетализацияВыплатыПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьУровниПодразделенийПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ ТАБЛИЧНОГО ДОКУМЕНТА

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Отчет.НачалоПериода, Отчет.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьНастройки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "Отчет ""расчетные листки организаций"" (формирование)");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	Иначе
		ЗафиксироватьДлительностьКлючевойОперации();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьНастройки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)

	ПоказатьДиалогОтправкиПоЭлектроннойПочте();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРассылкуОтчета(Команда)
	
	ЗаполнитьНастройкиОтчетаДляРассылки();
	
	РассылкаОтчетовБККлиент.НастроитьРассылкуИзОтчета(ЭтотОбъект);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Отчет, РезультатВыбора, "НачалоПериода,КонецПериода");
	
	ОбновитьТекстЗаголовка(ЭтаФорма); 
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Отчет    = Форма.Отчет;
	Элементы = Форма.Элементы;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;
	
	ЗаголовокОтчета = НСтр("ru = 'Расчетные листки организаций %1'");
	ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ЗаголовокОтчета, БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Отчет.НачалоПериода, Отчет.КонецПериода));

	Форма.Заголовок = ЗаголовокОтчета;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ОтменитьВыполнениеЗадания()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетНаСервере() Экспорт
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Отчеты.РасчетныеЛисткиОрганизаций.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Отчеты.РасчетныеЛисткиОрганизаций.СформироватьОтчет",
			ПараметрыОтчета,
			БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("НачалоПериода"               , Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода"                , Отчет.КонецПериода);
	ПараметрыОтчета.Вставить("СписокОрганизаций"           , Отчет.СписокОрганизаций);
	ПараметрыОтчета.Вставить("СписокПодразделений"         , Отчет.СписокПодразделений);
	ПараметрыОтчета.Вставить("СписокСотрудников"           , Отчет.СписокСотрудников);
	ПараметрыОтчета.Вставить("ВидСравненияОрганизации"     , ВидСравненияОрганизации);
	ПараметрыОтчета.Вставить("ВидСравненияПодразделения"   , ВидСравненияПодразделения);
	ПараметрыОтчета.Вставить("ВидСравненияРаботника"       , ВидСравненияРаботника);
	ПараметрыОтчета.Вставить("Группировать"                , Отчет.Группировать);
	ПараметрыОтчета.Вставить("ДетализацияВыплаты"          , Отчет.ДетализацияВыплаты);	
	ПараметрыОтчета.Вставить("ВыводитьНалоги"              , Отчет.ВыводитьНалоги);
	ПараметрыОтчета.Вставить("ВыводитьУровниПодразделений" , Отчет.ВыводитьУровниПодразделений);
	ПараметрыОтчета.Вставить("ВыводитьПримененныйВычет"    , Отчет.ВыводитьПримененныйВычет);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"         , БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ЭтаФорма));
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат.Очистить();
	Результат.Вывести(РезультатВыполнения.Результат);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 

			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		    ЗафиксироватьДлительностьКлючевойОперации();
			
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		УИДЗамера = Неопределено;
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыСравнения()

	Элементы.ВидСравненияОрганизации.СписокВыбора.ТипЗначения = Новый ОписаниеТипов("ВидСравнения");
	Элементы.ВидСравненияОрганизации.СписокВыбора.Добавить(ВидСравнения.Равно);
	Элементы.ВидСравненияОрганизации.СписокВыбора.Добавить(ВидСравнения.НеРавно);
	Элементы.ВидСравненияОрганизации.СписокВыбора.Добавить(ВидСравнения.ВСписке);
	Элементы.ВидСравненияОрганизации.СписокВыбора.Добавить(ВидСравнения.НеВСписке);
	ВидСравненияОрганизации = ВидСравнения.Равно;
	
	Элементы.ВидСравненияПодразделения.СписокВыбора.ТипЗначения = Новый ОписаниеТипов("ВидСравнения");
	Элементы.ВидСравненияПодразделения.СписокВыбора.Добавить(ВидСравнения.Равно);
	Элементы.ВидСравненияПодразделения.СписокВыбора.Добавить(ВидСравнения.НеРавно);
	Элементы.ВидСравненияПодразделения.СписокВыбора.Добавить(ВидСравнения.ВСписке);
	Элементы.ВидСравненияПодразделения.СписокВыбора.Добавить(ВидСравнения.НеВСписке);
	Элементы.ВидСравненияПодразделения.СписокВыбора.Добавить(ВидСравнения.ВИерархии);
	Элементы.ВидСравненияПодразделения.СписокВыбора.Добавить(ВидСравнения.НеВИерархии);
	Элементы.ВидСравненияПодразделения.СписокВыбора.Добавить(ВидСравнения.ВСпискеПоИерархии);
	Элементы.ВидСравненияПодразделения.СписокВыбора.Добавить(ВидСравнения.НеВСпискеПоИерархии);
	ВидСравненияПодразделения = ВидСравнения.Равно;
	
	Элементы.ВидСравненияРаботника.СписокВыбора.ТипЗначения = Новый ОписаниеТипов("ВидСравнения");
	Элементы.ВидСравненияРаботника.СписокВыбора.Добавить(ВидСравнения.Равно);
	Элементы.ВидСравненияРаботника.СписокВыбора.Добавить(ВидСравнения.НеРавно);
	Элементы.ВидСравненияРаботника.СписокВыбора.Добавить(ВидСравнения.ВСписке);
	Элементы.ВидСравненияРаботника.СписокВыбора.Добавить(ВидСравнения.НеВСписке);
	Элементы.ВидСравненияРаботника.СписокВыбора.Добавить(ВидСравнения.ВИерархии);
	Элементы.ВидСравненияРаботника.СписокВыбора.Добавить(ВидСравнения.НеВИерархии);
	Элементы.ВидСравненияРаботника.СписокВыбора.Добавить(ВидСравнения.ВСпискеПоИерархии);
	Элементы.ВидСравненияРаботника.СписокВыбора.Добавить(ВидСравнения.НеВСпискеПоИерархии);
	ВидСравненияРаботника = ВидСравнения.Равно;

КонецПроцедуры

&НаКлиенте
Процедура ВидСравненияОбработкаВыбора(ВидСравненияДанные, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВидСравненияИмя      = ВидСравненияДанные.Имя;
	ВидСравненияЗначение = ВидСравненияДанные.Значение;
	
	Если ВидСравненияЗначение = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВидСравненияПростой = ВидСравненияЗначение = ВидСравнения.Равно ИЛИ ВидСравненияЗначение = ВидСравнения.НеРавно;
	НовыйВидСравненияПростой   = ВыбранноеЗначение    = ВидСравнения.Равно ИЛИ ВыбранноеЗначение    = ВидСравнения.НеРавно;
	
	Если ТекущийВидСравненияПростой = НовыйВидСравненияПростой Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ВидСравненияИмя = "ВидСравненияОрганизации" Тогда
		СписокЭлементов    = "СписокОрганизаций";
		ТипЭлементовСписка = "СправочникСсылка.Организации";
	ИначеЕсли ВидСравненияИмя = "ВидСравненияПодразделения" Тогда
		СписокЭлементов    = "СписокПодразделений";
		ТипЭлементовСписка = "СправочникСсылка.ПодразделенияОрганизаций";
	Иначе // "ВидСравненияРаботника"
		СписокЭлементов    = "СписокСотрудников";
		ТипЭлементовСписка = "СправочникСсылка.СотрудникиОрганизаций";
	КонецЕсли;
	
		
	Если ТипЗнч(Отчет[СписокЭлементов]) = Тип(ТипЭлементовСписка) Тогда
		ЗаписываемоеЗначение = Отчет[СписокЭлементов];
	ИначеЕсли Не Отчет[СписокЭлементов] = Неопределено Тогда 
		Если Отчет[СписокЭлементов].Количество() = 0 Тогда
			ЗаписываемоеЗначение = ПредопределенноеЗначение(СтрЗаменить(ТипЭлементовСписка, "СправочникСсылка", "Справочник") + ".ПустаяСсылка");
		Иначе
			ЗаписываемоеЗначение = Отчет[СписокЭлементов][0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ НовыйВидСравненияПростой Тогда
		
		Элементы[СписокЭлементов].ОграничениеТипа           = Новый ОписаниеТипов("СписокЗначений");
		Элементы[СписокЭлементов + "Отбор"].ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
		Отчет[СписокЭлементов] = Новый СписокЗначений;
		Отчет[СписокЭлементов].ТипЗначения = Новый ОписаниеТипов(ТипЭлементовСписка);
		Если ЗначениеЗаполнено(ЗаписываемоеЗначение) Тогда
			Отчет[СписокЭлементов].Добавить(ЗаписываемоеЗначение);
		КонецЕсли;
		
	Иначе              
		
		Элементы[СписокЭлементов].ОграничениеТипа           = Новый ОписаниеТипов(ТипЭлементовСписка);
		Элементы[СписокЭлементов + "Отбор"].ОграничениеТипа = Новый ОписаниеТипов(ТипЭлементовСписка);
		Отчет[СписокЭлементов] = ЗаписываемоеЗначение;
		
	КонецЕсли;
	
	Если ВидСравненияИмя = "ВидСравненияПодразделения" Тогда 
		УстановитьПараметрыВыбораПодразделенийОрганизаций(ЭтотОбъект);
	КонецЕсли;
	
	ЭтаФорма[ВидСравненияИмя] = ВыбранноеЗначение;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСпискаОрганизаций(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		Отчет.СписокОрганизаций = РезультатВыбора.СписокСтруктурныхЕдиниц;
		
		УстановитьПараметрыВыбораПодразделенийОрганизаций(ЭтотОбъект);
		
		Если ЗначениеЗаполнено(Отчет.СписокПодразделений) Тогда
			ПроверитьСоответсвиеПодразделенияОрганизацииНаСервере(Отчет.СписокОрганизаций, Отчет.СписокПодразделений);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораПодразделенийОрганизаций(Форма)
	
	Отчет    = Форма.Отчет;
	Элементы = Форма.Элементы;
	
	Если ЗначениеЗаполнено(Отчет.СписокОрганизаций) Тогда
        НовыйМассивПараметров = Новый Массив;    
        НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Отчет.СписокОрганизаций));
        Элементы.СписокПодразделений.ПараметрыВыбора      = Новый ФиксированныйМассив(НовыйМассивПараметров);
		Элементы.СписокПодразделенийОтбор.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Иначе
		Элементы.СписокПодразделений.ПараметрыВыбора      = Новый ФиксированныйМассив(Новый Массив);
		Элементы.СписокПодразделенийОтбор.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьСоответсвиеПодразделенияОрганизацииНаСервере(СписокОрганизаций, СписокПодразделений)
	
	ВыбранныеОрганизации     = Новый Массив;
	
	Если ТипЗнч(СписокОрганизаций) = Тип("СправочникСсылка.Организации") Тогда
		ВыбранныеОрганизации.Добавить(СписокОрганизаций);
	Иначе
		ВыбранныеОрганизации = СписокОрганизаций.ВыгрузитьЗначения();
	КонецЕсли;
	
	Если ТипЗнч(СписокПодразделений) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		Если ВыбранныеОрганизации.Найти(СписокПодразделений.Владелец) = Неопределено Тогда
			СписокПодразделений = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
	Иначе // Тип("СписокЗначений")
		ОтобранныеПодразделения  = Новый Массив;
		Для Каждого Подразделение Из СписокПодразделений Цикл
			Если ВыбранныеОрганизации.Найти(Подразделение.Значение.Владелец) <> Неопределено Тогда
				ОтобранныеПодразделения.Добавить(Подразделение.Значение);
			КонецЕсли;
		КонецЦикла;
		СписокПодразделений.ЗагрузитьЗначения(ОтобранныеПодразделения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогОтправкиПоЭлектроннойПочте()
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьОтчетыПоПочтеНастройкаУчетнойЗаписиПредложена", БухгалтерскиеОтчетыКлиент, ЭтотОбъект);

	РаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиОтчетаДляРассылки()
	
	УдаляемыРеквизитыФормы = Новый Массив;
	УдаляемыРеквизитыФормы.Добавить("ВидимостьПанелиНастроек");
	
	РассылкаОтчетовБК.ЗаполнитьНастройкиОтчетаДляРассылки(ЭтотОбъект,, УдаляемыРеквизитыФормы);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаНастройкиРассылкиОтчета(ВыбранноеЗначение)
	
	РассылкаОтчетовБК.ФормаОтчетаОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервереРассылка()
	
	КомпоновщикНастроекКД = Новый КомпоновщикНастроекКомпоновкиДанных;

	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, КомпоновщикНастроекКД.ПользовательскиеНастройки);
	
	ПользовательскиеНастройки = КомпоновщикНастроекКД.ПользовательскиеНастройки;
	
	Если ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДанныеОтчетаРассылка") Тогда
		ДанныеОтчетаРассылка = КомпоновщикНастроекКД.ПользовательскиеНастройки.ДополнительныеСвойства.ДанныеОтчетаРассылка;
		Если ТипЗнч(ДанныеОтчетаРассылка) = Тип("ХранилищеЗначения") Тогда
			ДанныеОтчетаРассылкаЗначение = ДанныеОтчетаРассылка.Получить();
			Если ТипЗнч(ДанныеОтчетаРассылкаЗначение) = Тип("Структура") Тогда
				СохраняемыеРеквизитыВРассылке = Отчеты.РасчетныеЛисткиОрганизаций.ПустыеПараметрыКомпоновкиОтчета();
				ДанныеОтчетаРассылкаТаблицаЗначений = Новый ТаблицаЗначений;
				ДанныеОтчетаРассылкаТаблицаЗначений.Колонки.Добавить("Значение");
				ДанныеОтчетаРассылкаТаблицаЗначений.Колонки.Добавить("Использование");
				ДанныеОтчетаРассылкаТаблицаЗначений.Колонки.Добавить("Представление");
				ДанныеОтчетаРассылкаТаблицаЗначений.Колонки.Добавить("Реквизит");
				Для Каждого КлючИЗначение Из ДанныеОтчетаРассылкаЗначение Цикл
					Если НЕ СохраняемыеРеквизитыВРассылке.Свойство(КлючИЗначение.Ключ) Тогда
						Продолжить;
					КонецЕсли;
					ДанныеОтчетаРассылкаСтрокаТЗ = ДанныеОтчетаРассылкаТаблицаЗначений.Добавить();
					ДанныеОтчетаРассылкаСтрокаТЗ.Реквизит = КлючИЗначение.Ключ;
					ДанныеОтчетаРассылкаСтрокаТЗ.Значение = КлючИЗначение.Значение;
					ДанныеОтчетаРассылкаСтрокаТЗ.Представление = КлючИЗначение.Ключ;
					ДанныеОтчетаРассылкаСтрокаТЗ.Использование = Истина;
				КонецЦикла;
				ПользовательскиеНастройки = ДанныеОтчетаРассылкаТаблицаЗначений;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	НастройкиОтчета.АдресНастроекОтчета = ПоместитьВоВременноеХранилище(ПользовательскиеНастройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации()
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
	
КонецПроцедуры