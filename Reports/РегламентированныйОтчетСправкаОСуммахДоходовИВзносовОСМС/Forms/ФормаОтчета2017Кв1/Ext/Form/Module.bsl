
&НаКлиенте
Процедура ФизЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",            Истина);
	ПараметрыФормы.Вставить("РежимВыбора",                   Истина);
	ПараметрыФормы.Вставить("ОтборОрганизация",              Налогоплательщик);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора", ПараметрыФормы, Элемент,,,,, Режим);
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// Описание формы
// Параметры фомры:
//  Организация - СправочникСсылка.Организации - Налогоплательщик, представляющий отчет
//  мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета - Дата - отчетный период формирования отчета
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	мВыбраннаяФорма = "ФормаОтчета2017Кв1";
	КодФормы 		= "ФормаОтчета";
	               		
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруФормРегОтчета(ЭтотОбъект);	
			
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;	
	СтруктураРеквизитовФормы.мПечатныеформы         = Новый СписокЗначений;	
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями = РегламентированнаяОтчетностьПереопределяемый.ПоддержкаРаботыСоСтруктурнымиПодразделениями(); // перевести в переопределяемый модуль 

	// Общие механизмы
	ЗаполнитьСведенияОбОтчетномПериоде();
		
	Инициализация(Параметры.БезОткрытияФормы);
	
	УстановитьФорматВывода();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если Модифицированность Тогда 
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);	
		ТекстВопроса = НСТР("ru = 'Сохранить данные отчета?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(мСписокСтруктурныхЕдиниц, ЭтаФорма, СтандартнаяОбработка, "", Налогоплательщик,,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда		
		мСписокСтруктурныхЕдиниц = Результат;		
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц); 		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	
	ЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТочностьЕдиницыИзмеренияПриИзменении(Элемент)
	
	ТочностьЕдиницыИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПодписиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДатаПодписи) Тогда
		ДатаПодписиПриИзмененииНаСервере();
		Модифированность = Истина;
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "Отчеты"

&НаКлиенте
Процедура ФормаОтчетаПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Модифицированность = Истина;
	ФормаОтчетаРасчетНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если НЕ ЗначениеЗаполнено(Налогоплательщик) Тогда
		Сообщить("Не выбрана организация!");
		Возврат;
	КонецЕсли;
	
	Если мСписокСтруктурныхЕдиниц.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбраны структурные единицы!'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано физичесое лицо!'"));
		Возврат;
	КонецЕсли;
	
	Перезаполнить = Истина; // Для выполнения запроса на пересчет данных к пользователю
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения =  РегламентированнаяОтчетностьКлиент.ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Перезаполнить Тогда
		
		Если ВсегоСтраниц = 0 Тогда
				
			НачатьЗамерВремени();

			ЗаполнитьАвтоНаСервере();
			
		Иначе
				
			Если СтрокаФормы.ПолучитьЭлементы().Количество() > 0 Тогда
				ТекстВопроса = "Перезаполнить данные формы и ее дополнительных форм?";
			Иначе
				ТекстВопроса = "Перезаполнить данные формы?";
			КонецЕсли;
			
			Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, Новый Структура);				
			Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);
			Оповещение.ДополнительныеПараметры.Вставить("Перезаполнить", Перезаполнить);
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);		
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФорму(Команда)
	
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	 	
	
	НачатьЗамерВремени();
	
	ЗаполнитьАвтоНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	ОткрытьФормуНастройкиСтраниц();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыФормы.Вставить("Организация",              Налогоплательщик);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, мВыбраннаяФорма, "") + "ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ОценкаПроизводительности

&НаКлиенте
Функция НачатьЗамерВремени()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "Регламентированный отчет ""справка о суммах доходов и взносов осмс"" (заполнение)";
		ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент").НачатьЗамерВремени(Истина, КлючеваяОперация);
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеТаймера()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда 
		
		Возврат ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").НачатьЗамерВремени();
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьЗамер(ВремяНачала)
	
	Если ВремяНачала <> Неопределено 
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "Регламентированный отчет ""справка о суммах доходов и взносов осмс"" (заполнение)";
		ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СохранитьДанные() Экспорт
	
	СохранитьДанныеНаСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиВДокумент(СписокСохранения)
	
	// очищаем текущие данные
	ТекТабличныйДокумент = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"];
	
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, Ложь, Ложь);

	Отчет = РеквизитФормыВЗначение("ОтчетОбъект");
	Макет = Отчет.ПолучитьМакет("МакетФормаОтчета2017Кв1");

	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаЛиста = Макет.ПолучитьОбласть("ШапкаЛиста");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	МассивОбластей = Новый Массив;
	МассивОбластей.Добавить(ОбластьСтрока);
	МассивОбластей.Добавить(ОбластьПодвал);
	
	ВсегоСтраниц = 0;
	Верх = 1;
	
	// Шапка отчета
	ТекТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТекТабличныйДокумент.Вывести(ОбластьШапка);
	
	// Строки отчета
	
	// Определим максимальный номер строки
	МаксНомерСтроки = 0;
	Для Каждого КлючЗначение Из СписокСохранения Цикл
		Позиция = Найти(КлючЗначение.Ключ, "_");
		Если Позиция <> 0 Тогда
			ПрефиксИмени = Лев(КлючЗначение.Ключ, Позиция);
			
			Если (ПрефиксИмени = "Период_") 
				 Или (ПрефиксИмени = "Заработок_") 
				 Или (ПрефиксИмени = "ОПВ_") 				 
				 Или (ПрефиксИмени = "ИПН_") Тогда
				
				МаксНомерСтроки = Макс(МаксНомерСтроки, Число(Сред(КлючЗначение.Ключ, Позиция + 1)));
			КонецЕсли;		
		КонецЕсли;
	КонецЦикла;
	
	Для НомерСтроки = 1 По МаксНомерСтроки Цикл
		
		// Номера областей устанавливаем в соответствии с текущим номером
		Для Каждого ИспользуемаяОбласть Из ОбластьСтрока.Области Цикл
			ИспользуемаяОбласть.Имя = СтрЗаменить(ИспользуемаяОбласть.Имя, "_" + (НомерСтроки - 1), "_" + НомерСтроки);
		КонецЦикла;
	
		ТекТабличныйДокумент.Вывести(ОбластьСтрока);		
		
		// проверим умещаются ли строки на странице
		Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТекТабличныйДокумент, МассивОбластей) Тогда
			ВсегоСтраниц = ВсегоСтраниц + 1;
			ТекТабличныйДокумент.Область(Верх, , ТекТабличныйДокумент.ВысотаТаблицы).Имя = "Страница" + Формат(ВсегоСтраниц, "ЧГ=0");
			Верх = ТекТабличныйДокумент.ВысотаТаблицы + 1;
			ТекТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТекТабличныйДокумент.Вывести(ОбластьШапкаЛиста);
		КонецЕсли;
		
	КонецЦикла;	
	
	// Выводим подвал
	ТекТабличныйДокумент.Вывести(ОбластьПодвал);
	
	// имя для последней страницы
	ВсегоСтраниц = ВсегоСтраниц + 1;
	ТекТабличныйДокумент.Область(Верх,, ТекТабличныйДокумент.ВысотаТаблицы).Имя = "Страница" + Формат(ВсегоСтраниц, "ЧГ=0");

	Если СписокСохранения <> Неопределено И ТипЗнч(СписокСохранения) = Тип("Структура") Тогда
		// Переписываем показатели из структуры сохранения в области табличного документа
		Для Каждого ЗаполняемаяОбласть Из ТекТабличныйДокумент.Области Цикл
			Значение = 0;
			Если СписокСохранения.Свойство(ЗаполняемаяОбласть.Имя, Значение) Тогда
				ЗаполняемаяОбласть.Значение = Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеглОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Форма = ДополнительныеПараметры.Форма;	
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", Форма.КодФормы));
		Вложенность = СтрокаФормы.ПолучитьЭлементы().Количество() > 0;	
		
		ОчиститьРеглОтчетЗавершениеНаСервере(СтрокаФормы.КодФормы, СтрокаФормы.Многострочность, Вложенность)	
	КонецЕсли;
	
КонецПроцедуры 	

&НаСервере
Процедура ОчиститьРеглОтчетЗавершениеНаСервере(КодФормы, ПризнакМногострочности, Вложенность)
	
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, ПризнакМногострочности, Вложенность);
	ВсегоСтраниц = 0;
	
КонецПроцедуры

&НаСервере
// Процедура очистки формы
//
// параметр: ТекИмяФормы - имя очищаемой формы (=КодФормы)
//           ОчиститьВсе - признак вида очистки формы              
//
Процедура Очистить(ТекИмяФормы, ОчиститьВсе = Ложь) Экспорт
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	
	Если НЕ ОчиститьВсе Тогда
		СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв1");
	    СписокПоказателейНеПодлежащихОчистке.Добавить("РеквизитыОрганизации");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Номер");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДолжностьРуководителя");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ФИОРуководителя");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ФИОГлБухгалтера");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДолжностьИсполнителя");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ФИОИсполнителя");
		СписокПоказателейНеПодлежащихОчистке.Добавить("МестоПредоставления");
	КонецЕсли;

	ТекТабличныйДокумент = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"];
	
	Для Каждого Показатель Из СписокПоказателейНеПодлежащихОчистке Цикл
		Знч = ПолучитьЗначениеОбласти(ТекТабличныйДокумент, Показатель.Значение, Неопределено);
		Если Знч <> Неопределено Тогда
			мСтруктураСохраняемыхПоказателей.Вставить(Показатель.Значение, Знч);
		КонецЕсли;
	КонецЦикла;

	ТекТабличныйДокумент.Очистить();
	
	ВсегоСтраниц = 0;
	
КонецПроцедуры // Очистить()

&НаКлиенте
Процедура ОбновитьПараметрыФормыНаКлиенте(Параметры) Экспорт
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормы(ТекФорма, Параметры)
	
	ЗаполнитьЗначенияСвойств(ТекФорма.СтруктураРеквизитовФормы, Параметры);
	
	ТекФорма.Налогоплательщик = Параметры.Организация;
	ТекФорма.мСписокСтруктурныхЕдиниц = Параметры.мСписокСтруктурныхЕдиниц;
	ТекФорма.ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ТекФорма.мСписокСтруктурныхЕдиниц);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяГлавнойФормы(ВыбраннаяФорма) Экспорт
	
	Возврат СтрДлина(ВыбраннаяФорма)-7;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры инициализации отчета и структуры его данных

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокСтруктурныхЕдиниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");			
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");		
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");		
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");		
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");	
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);			
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);	
	СтруктураРеквизитовФормы.Вставить("мПериодичность", Параметры.мПериодичность);		
	СтруктураРеквизитовФормы.Вставить("НалоговыйКомитет", Неопределено);			
	СтруктураРеквизитовФормы.Вставить("мГод");	
	СтруктураРеквизитовФормы.Вставить("мКвартал");	
	СтруктураРеквизитовФормы.Вставить("мМесяц");	
	// индивидуальные параметры формы
	СтруктураРеквизитовФормы.Вставить("мПоддержкаРаботыСоСтруктурнымиПодразделениями");
	СтруктураРеквизитовФормы.Вставить("Сотрудник");
	СтруктураРеквизитовФормы.Вставить("ФизЛицо");
	СтруктураРеквизитовФормы.Вставить("ДатаПодписи");
	
КонецПроцедуры // СформироватьСтруктуруРеквизитовФормы

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;			
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 2;
			ЯзыкФормирования 		 = "ru";
			ДатаПодписи              = ТекущаяДатаСеанса();
			
			Если ЗначениеЗаполнено(Налогоплательщик) Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ГоловнаяОрганизацияДляЗП", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Налогоплательщик));
				
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Организации.Ссылка КАК СтруктурнаяЕдиница,
				|	Организации.Наименование КАК Наименование
				|ИЗ
				|	Справочник.Организации КАК Организации
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
				|		ПО Организации.Ссылка = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация
				|ГДЕ
				|	ВЫБОР
				|		КОГДА Организации.Ссылка.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				|				ИЛИ (НЕ УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации)
				|			ТОГДА Организации.Ссылка
				|		ИНАЧЕ Организации.Ссылка.ГоловнаяОрганизация
				|	КОНЕЦ = &ГоловнаяОрганизацияДляЗП";
				
				мСписокСтруктурныхЕдиниц.Очистить();
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					НовыйЭлемент 				= мСписокСтруктурныхЕдиниц.Добавить();
					НовыйЭлемент.Значение 		= Выборка.СтруктурнаяЕдиница;
					НовыйЭлемент.Представление 	= Выборка.Наименование;
				КонецЦикла;
				
				// заполним представление списка структурных единиц
				ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();	
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	//Обход ситуации с повторным открытием основной формы, из-за ТД
	МассивРеквизитовФормы = ЭтотОбъект.ПолучитьРеквизиты();
	Для Счетчик = 0 По МассивРеквизитовФормы.Количество()-1 Цикл		
		РеквизитФормы = МассивРеквизитовФормы[Счетчик];
		Если РеквизитФормы.ТипЗначения.СодержитТип(Тип("ТабличныйДокумент")) Тогда
			ЭтотОбъект[РеквизитФормы.Имя] = ЭтотОбъект[РеквизитФормы.Имя];	
		КонецЕсли;
	КонецЦикла;	  	
	
	мСтруктураЗначений = Новый Структура;
	мСтруктураСохраняемыхПоказателей = Новый Структура;
	
	Если СтруктураРеквизитовФормы.Свойство("СформироватьФормуОтчетаАвтоматически") И СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически <> Неопределено Тогда		
		ЗначениеТаймера = ЗначениеТаймера();
		
		ЗаполнитьАвтоНаСервере();
		
		ЗаписатьЗамер(ЗначениеТаймера);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтчетномПериоде() Экспорт

	СтрПериодОтчета = ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ФП = истина");
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
		СтруктураРеквизитовФормы.мКвартал = Лев(СтрПериодОтчета, 1);
		СтруктураРеквизитовФормы.мМесяц = Неопределено;
	Иначе
		СтруктураРеквизитовФормы.мМесяц = Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		СтруктураРеквизитовФормы.мКвартал = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мГод = Лев(Прав(СтрПериодОтчета, 7), 4);
		
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// Сохранение и восстановление данных

&НаСервере
Процедура СохранитьДанныеНаСервере()
	
	Перем ТаблицаСтраниц;

	ДатаНачалаЗамераВремени = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Если Не ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) ИЛИ (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) Тогда
		// создаем новый документ вида РегламентированныйОтчет
		ДокументРеглОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
				
		ДокументРеглОтчет.Дата = ТекущаяДатаСеанса();
		ДокументРеглОтчет.УстановитьВремя();
		
	Иначе
		ДокументРеглОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	ИмяТекТабличногоПоля = "ФормаОтчетаПолеТабличногоДокументаСтраница1";
	ТекТабличноеПоле     = ЭтотОбъект[ИмяТекТабличногоПоля];

	// Сформируем комментарий, если не указан
	Если НЕ ЗначениеЗаполнено(Комментарий) Тогда
		
		Комментарий = ФизЛицо.Наименование;
		
		МестоПредоставления = ПолучитьЗначениеОбласти(ТекТабличноеПоле, "МестоПредоставления", "");
		Если ЗначениеЗаполнено(МестоПредоставления) Тогда
			Комментарий = Комментарий + " (" + МестоПредоставления + ")";
		КонецЕсли;
			
	КонецЕсли;

	// установим текущие значения реквизитов документа
	МетаданныеОтчета = РеквизитФормыВЗначение("ОтчетОбъект"). Метаданные();
	ДокументРеглОтчет.ИсточникОтчета           = МетаданныеОтчета.Имя;
	ДокументРеглОтчет.НаименованиеОтчета       = МетаданныеОтчета.Формы.ОсновнаяФорма.Представление();
	ДокументРеглОтчет.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ДокументРеглОтчет.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	ДокументРеглОтчет.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;  
	ДокументРеглОтчет.ДатаПодписи              = ДатаПодписи;
	ДокументРеглОтчет.ВыбраннаяФорма           = мВыбраннаяФорма;
	ДокументРеглОтчет.Организация              = Налогоплательщик;
	ДокументРеглОтчет.ЕдиницаИзмерения         = ЕдиницаИзмерения;
	ДокументРеглОтчет.ТочностьЕдиницыИзмерения = ТочностьЕдиницыИзмерения;
	ДокументРеглОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРеглОтчет.Комментарий              = Комментарий;
		
	// обработка номера документа для возможности автонумерации
	ПрефиксДок 	= ДокументРеглОтчет.ПолучитьПрефиксДокументаОтчета();
	НомерДок 	= СокрЛП(ПолучитьЗначениеОбласти(ТекТабличноеПоле, "Номер", ""));
	Если ЗначениеЗаполнено(НомерДок) Тогда	
		НомерДок              = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерДок, ДокументРеглОтчет.Метаданные().ДлинаНомера - СтрДлина(ПрефиксДок), "0", "Слева");
		ДокументРеглОтчет.Номер = ПрефиксДок + НомерДок;
	Иначе
		ДокументРеглОтчет.УстановитьНовыйНомер(ПрефиксДок);
			
		// выведем номер в табличный документ
		НомерДок = ДокументРеглОтчет.Номер;
		Пока СтрДлина(НомерДок) > 0 И Найти("123456789", Лев(НомерДок, 1)) = 0 Цикл
			НомерДок = Сред(НомерДок, 2);
		КонецЦикла;
		УстановитьЗначениеОбласти(ТекТабличноеПоле, "Номер", НомерДок);
	КонецЕсли;

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	СписокСохранения.Вставить("СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", "01/01/2006");

	// ФизЛицо
	СписокСохранения.Вставить("ФизЛицо",   ФизЛицо);
	СписокСохранения.Вставить("Сотрудник", Сотрудник);

	// Сохраняем документ
	Если ДокументРеглОтчет <> Неопределено Тогда
						
		ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
		ДокументРеглОтчет.ДанныеОтчета = ХранилищеДанных;
		
		СохранитьОшибка = 1;
		
		// записываем документ, хранящий данные отчета
		Попытка
			ДокументРеглОтчет.Записать();			
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Не удается сохранить регламентированный отчет! " + ОписаниеОшибки());			
			СохранитьОшибка = 0;
		КонецПопытки;
		
		Если СохранитьОшибка = 1 Тогда
			// всё прошло без ошибок
			Модифицированность = Ложь;
		КонецЕсли;		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = ДокументРеглОтчет.Ссылка;
	
	ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Записан документ %1 %2'"), ДокументРеглОтчет.Ссылка, ДокументРеглОтчет.Ссылка.Комментарий));	
	
	КлючеваяОперация = "Документ ""регламентированный отчет справка о суммах доходов и взносов осмс"" (запись)'";
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ДатаНачалаЗамераВремени);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ПоказателиОтчета;
	
	мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок;

	// восстанавливаем реквизиты отчета
	Налогоплательщик         = мСохраненныйДок.Организация;
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;
	Периодичность			 = мСохраненныйДок.Периодичность;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// восстанавливаем ФизЛицо
	СписокСохранения.Свойство("ФизЛицо", ФизЛицо);
	
	Если СписокСохранения.Свойство("Сотрудник") Тогда
		Сотрудник = СписокСохранения.Сотрудник;		
	Иначе
		// если заполнено ФизЛицо, то определим сотрудника для данного физ.лица
		Если ЗначениеЗаполнено(ФизЛицо) Тогда			
				
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РаботникиОрганизации.Сотрудник,
			|	РаботникиОрганизации.Организация,
			|	РаботникиОрганизации.Период,
			|	РаботникиОрганизации.ПричинаИзмененияСостояния
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
			|		&парамДатаАктуальности, 
			|		Организация = &парамГоловнаяОрганизация
			|		И Сотрудник.ФизЛицо = &парамФизЛицо
			|		И Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство) КАК РаботникиОрганизации
			|УПОРЯДОЧИТЬ ПО
			|	РаботникиОрганизации.Период УБЫВ, // берем ближайщее к дате отчета назначение
			|	ВЫБОР
			|		КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУволен
			|			ТОГДА 2
			|		ИНАЧЕ 1
			|	КОНЕЦ
			|";
			
			ГоловнаяОрганизация = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Налогоплательщик);
			Запрос.УстановитьПараметр("парамГоловнаяОрганизация",        ГоловнаяОрганизация);
			Запрос.УстановитьПараметр("парамФизЛицо",                    ФизЛицо);
			Запрос.УстановитьПараметр("парамВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
			Запрос.УстановитьПараметр("парамУволен",                     Перечисления.ПричиныИзмененияСостояния.Увольнение);
			Запрос.УстановитьПараметр("парамДатаАктуальности",           ТекущаяДата());
                          			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Сотрудник = Выборка.Сотрудник;
			Иначе
				// среди работников организаций такое физлицо не числится, т.е. какой-то получатель разовых выплат
				// сотрудник будет пустым
			КонецЕсли;	      			
			
		КонецЕсли;		
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета);
	
	Если ТипЗнч(ПоказателиОтчета) = Тип("Структура") И ПоказателиОтчета.Свойство("ПолеТабличногоДокументаРасчет") Тогда
		ВывестиВДокумент(ПоказателиОтчета.ПолеТабличногоДокументаРасчет);
	ИначеЕсли ТипЗнч(ПоказателиОтчета) = Тип("Структура") И ПоказателиОтчета.Свойство("ФормаОтчетаПолеТабличногоДокументаСтраница1") Тогда
		ВывестиВДокумент(ПоказателиОтчета.ФормаОтчетаПолеТабличногоДокументаСтраница1);
	КонецЕсли;

	Если СписокСохранения.Свойство("СписокСтруктурныхЕдиниц") Тогда
		мСписокСтруктурныхЕдиниц = СписокСохранения.СписокСтруктурныхЕдиниц;
	Иначе
	    мСписокСтруктурныхЕдиниц.Очистить();
	    мСписокСтруктурныхЕдиниц.Добавить(Налогоплательщик);
	КонецЕсли;
	ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц);

	УстановитьФорматВывода();
	Модифицированность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьДанныеНаСервере();
		Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;
	
КонецПроцедуры   

////////////////////////////////////////////////////////////////////////////////
// Печать

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Если ВсегоСтраниц = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нет данных для печати'"));
		Возврат;
	КонецЕсли;
    
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок),,, БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати,, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
            
    Перем СтруктураГруппы;
	
    Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
        ТекстСообщения = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");            
        ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);                
        Возврат Ложь;
    КонецЕсли;
            
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов.Очистить();
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
    СтруктураРеквизитовФормы.мРежимПечати = Истина;
    
    Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
        ФормаОтчетаРасчетНаСервере();
    КонецЕсли; 

	ТекТабличноеПоле = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"];
	ИдентификаторТекФормы = Новый УникальныйИдентификатор();
	НаименованиеДляЗаписи = "";
	Стр = 1;

	Пока Стр < ВсегоСтраниц + 1  Цикл
		
		ТабДок = Новый ТабличныйДокумент;
		ИмяОбласти = "Страница" + СокрЛП(Стр);
		ТекОбласть = ТекТабличноеПоле.ПолучитьОбласть(ИмяОбласти);
		ТабДок.Вывести(ТекОбласть);
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ТабДок.ЧерноБелаяПечать   = Истина;
		ТабДок.АвтоМасштаб        = Истина;
		
		Если Стр = 1 Тогда 
			НаименованиеДляЗаписи = НСтр("ru = 'Справка о ЗП. '") + ТабДок.Области.ПериодС.Текст + НСтр("ru = ' по '") + ТабДок.Области.ПериодПО.Текст;
		КонецЕсли;	
		
		ИмяЛиста = НСтр("ru = 'Страница № '") + Строка(Стр);
		Стр = Стр + 1;
		
		Значение = Новый Массив;
		Значение.Добавить(ТабДок);
		Значение.Добавить(ИдентификаторТекФормы);
		Значение.Добавить(НаименованиеДляЗаписи);
		
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(Значение, ИмяЛиста);
			
	КонецЦикла;
		
	Для Каждого Эл Из СтруктураРеквизитовФормы.мПечатныеФормы Цикл
				
		Значение = Новый Массив;
		Значение.Добавить(ПоместитьВоВременноеХранилище(Эл.Значение[0], УникальныйИдентификатор));
		Значение.Добавить(Эл.Значение[1]);
		Значение.Добавить(Эл.Значение[2]);
		
		СтруктураРеквизитовФормы.СписокПечатаемыхЛистов.Добавить(Значение, Эл.Представление);			
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
        
    Возврат Истина;
    
КонецФункции

&НаСервере
Процедура ЕдиницаИзмеренияПриИзмененииНаСервере()
	
	ПроверитьТочность();
	УстановитьФорматВывода();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ТочностьЕдиницыИзмеренияПриИзмененииНаСервере()
	
	ПроверитьТочность();
	УстановитьФорматВывода();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиСтраниц()
	
// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРаздел = Элементы.РазделыОтчета.ТекущиеДанные.Страницы;		
	КонецЕсли;
	
	Для Каждого ТекФорма ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",ТекФорма.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			ТекущаяСтрокаСписка.Выгружать               = ТекФорма.Выгружать;
			ТекущаяСтрокаСписка.ПоказатьСтраницу        = ТекФорма.ПоказатьСтраницу;			
			ТекущаяСтрокаСписка.АвтополучениеИтогов     = ТекФорма.АвтополучениеИтогов;  
			ТекущаяСтрокаСписка.АвтоЗаполнение          = ТекФорма.АвтоЗаполнение;  
		КонецЕсли;		   
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокФормДерева",СписокФормДерева);
	
	ДопПараметры = Новый Структура("ТекущийРаздел",ТекущийРаздел);
	
	ОповещениеПослеЗакрытияФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастройкиСтраниц",ЭтотОбъект,ДопПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.НастройкиОтчета",ПараметрыФормы, ЭтаФорма,,,,ОповещениеПослеЗакрытияФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиСтраниц(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьДанныеФормы(РезультатЗакрытия, СписокФормДерева);
	
	Модифицированность = Истина;
	
	//обновим мСписокФормБезИерархии
	Для Каждого СтрокаФормы ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",СтрокаФормы.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			СтрокаФормы.Выгружать               = ТекущаяСтрокаСписка.Выгружать;
			СтрокаФормы.ПоказатьСтраницу        = ТекущаяСтрокаСписка.ПоказатьСтраницу;			
			СтрокаФормы.АвтополучениеИтогов     = ТекущаяСтрокаСписка.АвтополучениеИтогов;  
			СтрокаФормы.АвтоЗаполнение          = ТекущаяСтрокаСписка.АвтоЗаполнение;  
		КонецЕсли;			
	КонецЦикла; 	

	Если ДополнительныеПараметры.Свойство("ТекущийРаздел") И НЕ ДополнительныеПараметры.ТекущийРаздел = Неопределено Тогда  		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(РазделыОтчета, Новый Структура("СписокФормДереваСтраницы",ДополнительныеПараметры.ТекущийРаздел));
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;			
	КонецЕсли;  	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие

&НаСервере
// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	
	Перем СтруктураГруппы;
	Перем РазмерностьПрописью;
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописью = НСтр("ru = ""тенге""; kz = ""теңге""", "ru");				
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0; ЧРГ= ";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописью = НСтр("ru = ""тысяч тенге""; kz = ""мың теңге""", "ru");				
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3; ЧРГ= ";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописью = НСтр("ru = ""млн. тенге""; kz = ""млн. теңге""", "ru");				
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6; ЧРГ= ";
		
	КонецЕсли;
	
	ТекТабличныйДокумент = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"];

	Для Каждого ОбластьТаблицы Из ТекТабличныйДокумент.Области Цикл
		// по областям каждой страницы
		Если Не ОбластьТаблицы.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбластьТаблицы.СодержитЗначение Тогда
			Если СокрЛП(ОбластьТаблицы.ТипЗначения) = "Число" Тогда
				ОбластьТаблицы.Формат = мСтрокаФормата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	УстановитьЗначениеОбласти(ТекТабличныйДокумент, "ЕдиницаИзмерения", РазмерностьПрописью);
	
КонецПроцедуры // УстановитьФорматВывода()

&НаКлиенте
Процедура ФормаОтчетаРасчет()

	ФормаОтчетаРасчетНаСервере();	
			    	                	
КонецПроцедуры   //ФормаРасчет()

&НаСервере
Процедура ФормаОтчетаРасчетНаСервере()
	
	ИтогоЗаработок = 0;
	ИтогоОПВ = 0;
	ИтогоИПН = 0;
	
	ТекТабличныйДокумент = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"];
	СканируемыеОбласти   = ТекТабличныйДокумент.Области;
	
	Для Каждого Область Из СканируемыеОбласти Цикл
		Если Найти(Область.Имя, "Заработок_") <> 0 Тогда
			
			НомерСтроки = Сред(Область.Имя, 11);
			Заработок 	= Область.Значение;
			ОПВ			= ПолучитьЗначениеОбласти(ТекТабличныйДокумент, "ОПВ_" + НомерСтроки, 0);
			ИПН			= ПолучитьЗначениеОбласти(ТекТабличныйДокумент, "ИПН_" + НомерСтроки, 0);
			
			УстановитьЗначениеОбласти(ТекТабличныйДокумент, "СуммаКВыплате_" + НомерСтроки, Заработок - ОПВ - ИПН);
		
			ИтогоЗаработок 	= ИтогоЗаработок + Заработок;
			ИтогоОПВ 		= ИтогоОПВ + ОПВ;
			ИтогоИПН 		= ИтогоИПН + ИПН;
			
		КонецЕсли;
	КонецЦикла;
	
	// Итоговые строки
	УстановитьЗначениеОбласти(ТекТабличныйДокумент, "ИтогоЗаработок", ИтогоЗаработок);
	УстановитьЗначениеОбласти(ТекТабличныйДокумент, "ИтогоОПВ", ИтогоОПВ);
	УстановитьЗначениеОбласти(ТекТабличныйДокумент, "ИтогоИПН", ИтогоИПН);
	УстановитьЗначениеОбласти(ТекТабличныйДокумент, "ИтогоСуммаКВыплате", ИтогоЗаработок - ИтогоОПВ - ИтогоИПН);

	//РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, КодФормы, ТаблицаДанных);
КонецПроцедуры

&НаСервере
Функция ФормаРассчитатьДанныеФормы(ВыдаватьСообщения = Ложь)
	
	РасчетНаРегистрах = Метаданные.РегистрыРасчета.Найти("ОсновныеНачисленияРаботниковОрганизаций") <> Неопределено;
	
	// Расчет вычисляемых параметров
	ГоловнаяОрганизация = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Налогоплательщик);
	
	// Создание запроса и установка всех необходимых параметров
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамОрганизация",	   		   Налогоплательщик);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация",		   ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("парамФизЛицо", 					   ФизЛицо);
	Запрос.УстановитьПараметр("парамТипИнформацииАдрес" , 		   Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("парамВидАдресаЮридический" , 	   Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	Запрос.УстановитьПараметр("парамТипИнформацииТелефон" , 	   Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("парамВидТелефонОрганизации" ,	   Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	Запрос.УстановитьПараметр("парамПриход",					   ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамВидСтроки",			  		   Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежа",	 			   Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	Запрос.УстановитьПараметр("парамВнутреннееСовместительство",   Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("парамДатаАктуальности",			   ДатаПодписи);
	Запрос.УстановитьПараметр("парамОтветЛицоРуководитель",		   Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("парамОтветЛицоГлБух",			   Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	Запрос.УстановитьПараметр("парамТекущийПользователь",		   Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("парамПериодС",					   НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПериодПо",					   КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПустаяОрганизация",			   Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамУволен",					   Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц",	   мСписокСтруктурныхЕдиниц);

	Запрос.Текст =  
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ФИОФизЛица.Фамилия + "" "" + ФИОФизЛица.Имя + "" "" + ФИОФизЛица.Отчество, ДанныеОФизЛице.Наименование) КАК ФИОРаботника,
	|	ДанныеОФизЛице.РНН КАК РННРаботника,
	|	ДанныеОФизЛице.ИдентификационныйКодЛичности КАК ИИНРаботника,
	|	ДанныеОФизЛице.СИК КАК СИКРаботника,
	|	ФИОФизЛица.Фамилия,
	|	ФИОФизЛица.Имя,
	|	ФИОФизЛица.Отчество
	|ПОМЕСТИТЬ ВТ_ДанныеОФизЛице
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ДанныеОФизЛице
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДатаАктуальности, ФизЛицо = &парамФизЛицо) КАК ФИОФизЛица
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ДанныеОФизЛице.Ссылка = &парамФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ КАК Ведомость,
	|	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка КАК Регистратор
	|ПОМЕСТИТЬ ВТ_ППИ
	|ИЗ
	|	РегистрНакопления.ВОСМСРасчетыСФондами.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			ВЫБОР
	|					КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						ТОГДА ФизЛицо.ФизЛицо = &парамФизЛицо
	|					ИНАЧЕ ФизЛицо = &парамФизЛицо
	|				КОНЕЦ
	|				И Организация В (&парамСписокСтруктурныхЕдиниц)
	|				И (МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо)) КАК ВОСМСРасчетыСФондамиОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений
	|		ПО ВОСМСРасчетыСФондамиОбороты.Регистратор = ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежноеПоручениеВходящееВозвратСоциальныхОтчислений.Документ КАК Ведомость,
	|	ПлатежноеПоручениеВходящееВозвратСоциальныхОтчислений.Ссылка КАК Регистратор
	|ПОМЕСТИТЬ ВТ_ППВ
	|ИЗ
	|	РегистрНакопления.ВОСМСРасчетыСФондами.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			ВЫБОР
	|					КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						ТОГДА ФизЛицо.ФизЛицо = &парамФизЛицо
	|					ИНАЧЕ ФизЛицо = &парамФизЛицо
	|				КОНЕЦ
	|				И Организация В (&парамСписокСтруктурныхЕдиниц)
	|				И (МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо)) КАК ВОСМСРасчетыСФондамиОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеВходящее.ВозвратСоциальныхОтчислений КАК ПлатежноеПоручениеВходящееВозвратСоциальныхОтчислений
	|		ПО ВОСМСРасчетыСФондамиОбороты.Регистратор = ПлатежноеПоручениеВходящееВозвратСоциальныхОтчислений.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Документ КАК Ведомость,
	|	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка КАК Регистратор
	|ПОМЕСТИТЬ ВТ_АО
	|ИЗ
	|	РегистрНакопления.ВОСМСРасчетыСФондами.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			ВЫБОР
	|					КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						ТОГДА ФизЛицо.ФизЛицо = &парамФизЛицо
	|					ИНАЧЕ ФизЛицо = &парамФизЛицо
	|				КОНЕЦ
	|				И Организация В (&парамСписокСтруктурныхЕдиниц)
	|				И (МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо)) КАК ВОСМСРасчетыСФондамиОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеСоциальныхОтчислений КАК АвансовыйОтчетПеречислениеСоциальныхОтчислений
	|		ПО ВОСМСРасчетыСФондамиОбороты.Регистратор = АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Запрос_Регистратор.РегистраторНомер,
	|	Запрос_Регистратор.РегистраторДата,
	|	Запрос_Регистратор.Регистратор
	|ПОМЕСТИТЬ ВТ_Регистратор
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ППИ.Регистратор.Номер КАК РегистраторНомер,
	|		ВТ_ППИ.Регистратор.Дата КАК РегистраторДата,
	|		ВТ_ППИ.Регистратор КАК Регистратор
	|	ИЗ
	|		ВТ_ППИ КАК ВТ_ППИ
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ППВ КАК ВТ_ППВ
	|			ПО ВТ_ППИ.Ведомость = ВТ_ППВ.Ведомость.ДокументОснование
	|	ГДЕ
	|		ВТ_ППВ.Ведомость ЕСТЬ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_АО.Регистратор.Номер,
	|		ВТ_АО.Регистратор.Дата,
	|		ВТ_АО.Регистратор
	|	ИЗ
	|		ВТ_АО КАК ВТ_АО) КАК Запрос_Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоходыИВзносы.Период КАК Период,
	|	СУММА(ДоходыИВзносы.Доход) КАК Доход,
	|	СУММА(ДоходыИВзносы.ОблогаемыйДоход) КАК ОблогаемыйДоход,
	|	СУММА(ДоходыИВзносы.ПеречисленныйВОСМС) КАК ПеречисленныйВОСМС,
	|	СУММА(ДоходыИВзносы.НачисленныйВОСМС) КАК НачисленныйВОСМС,
	|	ДоходыИВзносы.ДатаПеречисления,
	|	ДоходыИВзносы.НомерПоручения
	|ПОМЕСТИТЬ ВТ_ДоходыИВзносы
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		ВОСМССведенияОДоходах.СуммаДоходаОборот КАК Доход,
	|		ВОСМССведенияОДоходах.ОблагаемаяБазаОборот КАК ОблогаемыйДоход,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПеречисленныйВОСМС,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НачисленныйВОСМС,
	|		NULL КАК ДатаПеречисления,
	|		NULL КАК НомерПоручения
	|	ИЗ
	|		РегистрНакопления.ВОСМССведенияОДоходах.Обороты(
	|				&парамПериодС,
	|				&парамПериодПо,
	|				МЕСЯЦ,
	|				ВЫБОР
	|						КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	|							ТОГДА ФизЛицо.ФизЛицо = &парамФизЛицо
	|						ИНАЧЕ ФизЛицо = &парамФизЛицо
	|					КОНЕЦ
	|					И Организация В (&парамСписокСтруктурныхЕдиниц)) КАК ВОСМССведенияОДоходах
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)),
	|		ВЫБОР
	|			КОГДА ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Перечисление)
	|				ТОГДА ВОСМСРасчетыСФондами.Взнос
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|				ТОГДА ВОСМСРасчетыСФондами.Взнос
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВТ_Регистратор.РегистраторДата,
	|		ВТ_Регистратор.РегистраторНомер
	|	ИЗ
	|		РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Регистратор КАК ВТ_Регистратор
	|			ПО ВОСМСРасчетыСФондами.Регистратор = ВТ_Регистратор.Регистратор
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА ВОСМСРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|					ТОГДА ВОСМСРасчетыСФондами.ФизЛицо.ФизЛицо = &парамФизЛицо
	|				ИНАЧЕ ВОСМСРасчетыСФондами.ФизЛицо = &парамФизЛицо
	|			КОНЕЦ
	|		И ВОСМСРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|		И ВОСМСРасчетыСФондами.Организация В(&парамСписокСтруктурныхЕдиниц)) КАК ДоходыИВзносы
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоходыИВзносы.Период,
	|	ДоходыИВзносы.ДатаПеречисления,
	|	ДоходыИВзносы.НомерПоручения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоходыИВзносы.Период КАК Период,
	|	ДанныеОФизЛице.ФИОРаботника,
	|	ДанныеОФизЛице.РННРаботника,
	|	ДанныеОФизЛице.СИКРаботника,
	|	ДанныеОФизЛице.ИИНРаботника,
	|	ВЫРАЗИТЬ(ДанныеОбОрганизации.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеОрганизации,
	|	ДанныеОбОрганизации.РНН КАК РННОрганизации,
	|	ДанныеОбОрганизации.ИдентификационныйНомер КАК БИНОрганизации,
	|	ВЫРАЗИТЬ(КонтактнаяИнформацияЮрАдрес.Представление КАК СТРОКА(1000)) КАК ЮрАдресОрганизации,
	|	ВЫБОР
	|		КОГДА ФИОФизЛицРуководитель.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ОтветственныеЛицаРуководитель.ФизическоеЛицо.Наименование
	|		ИНАЧЕ ФИОФизЛицРуководитель.Фамилия + ВЫБОР
	|				КОГДА ФИОФизЛицРуководитель.Имя <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицРуководитель.Имя, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ФИОФизЛицРуководитель.Отчество <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицРуководитель.Отчество, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК ФИОРуководителя,
	|	ОтветственныеЛицаРуководитель.Должность.Наименование КАК ДолжностьРуководителя,
	|	ВЫБОР
	|		КОГДА ФИОФизЛицГлБух.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ОтветственныеЛицаГлБух.ФизическоеЛицо.Наименование
	|		ИНАЧЕ ФИОФизЛицГлБух.Фамилия + ВЫБОР
	|				КОГДА ФИОФизЛицГлБух.Имя <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицГлБух.Имя, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ФИОФизЛицГлБух.Отчество <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицГлБух.Отчество, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК ФИОГлБухгалтера,
	|	ВЫБОР
	|		КОГДА ОтветственныеЛицаГлБух.Должность.Ссылка ЕСТЬ NULL 
	|			ТОГДА ""Главный бухгалтер""
	|		ИНАЧЕ ОтветственныеЛицаГлБух.Должность.Наименование
	|	КОНЕЦ КАК ДолжностьГлБухгалтера,
	|	ЕСТЬNULL(ДоходыИВзносы.Доход, 0) КАК Доход,
	|	ЕСТЬNULL(ДоходыИВзносы.ОблогаемыйДоход, 0) КАК ОблогаемыйДоход,
	|	ЕСТЬNULL(ДоходыИВзносы.ПеречисленныйВОСМС, 0) КАК ПеречисленныйВОСМС,
	|	ЕСТЬNULL(ДоходыИВзносы.НачисленныйВОСМС, 0) КАК НачисленныйВОСМС,
	|	ДоходыИВзносы.ДатаПеречисления,
	|	ДоходыИВзносы.НомерПоручения,
	|	ДанныеОФизЛице.Фамилия,
	|	ДанныеОФизЛице.Имя,
	|	ДанныеОФизЛице.Отчество
	|ИЗ
	|	ВТ_ДоходыИВзносы КАК ДоходыИВзносы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеОФизЛице КАК ДанныеОФизЛице
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ДанныеОбОрганизации
	|		ПО (ДанныеОбОрганизации.Ссылка = &парамОрганизация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияЮрАдрес
	|		ПО (КонтактнаяИнформацияЮрАдрес.Объект = &парамОрганизация)
	|			И (КонтактнаяИнформацияЮрАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации))
	|			И (КонтактнаяИнформацияЮрАдрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|				&парамДатаАктуальности,
	|				СтруктурнаяЕдиница = &парамОрганизация
	|					И ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК ОтветственныеЛицаРуководитель
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДатаАктуальности, ) КАК ФИОФизЛицРуководитель
	|		ПО (ОтветственныеЛицаРуководитель.ФизическоеЛицо = ФИОФизЛицРуководитель.ФизЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|				&парамДатаАктуальности,
	|				СтруктурнаяЕдиница = &парамОрганизация
	|					И ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)) КАК ОтветственныеЛицаГлБух
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДатаАктуальности, ) КАК ФИОФизЛицГлБух
	|		ПО (ОтветственныеЛицаГлБух.ФизическоеЛицо = ФИОФизЛицГлБух.ФизЛицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоходыИВзносы.Период
	|ИТОГИ
	|	СУММА(Доход),
	|	СУММА(ОблогаемыйДоход),
	|	СУММА(ПеречисленныйВОСМС),
	|	СУММА(НачисленныйВОСМС)
	|ПО
	|	Период";
	
	
	Результат = Запрос.Выполнить();
		     	
	Возврат Результат;
	
КонецФункции // ФормаРассчитатьДанныеФормы()

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
		
	РезультатЗапроса = ФормаРассчитатьДанныеФормы();
   
	// Сохраняем данные в структуру данные в поле табличного документа
	СписокСохранения = Новый Структура();
	
	НомерСтроки 			= 1;
	ИтогоДоход              = 0;
	ИтогоОблогаемыйДоход    = 0;
	ИтогоНачисленныйВОСМС   = 0;
	ИтогоПеречисленныйВОСМС	= 0;
	
	ДатаПрекращенияВыводаРНН = Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
	ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ ДатаПодписи < ДатаПрекращенияВыводаРНН;
	
	ВыборкаПериод  = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПериод.Следующий() Цикл
		Доход 					= 0;
		ОблогаемыйДоход 		= 0;
		НачисленныйВОСМС 		= 0;
		ПеречисленныйВОСМС  	= 0;
		ИнформацияОПеречислении = "";
		Выборка = ВыборкаПериод.Выбрать();
		
		СписокСохранения.Вставить("Период_" + НомерСтроки, ВыборкаПериод.Период);
		СписокСохранения.Вставить("ТекстРНН_БИНОрганизации", ?(ВыводитьРНН, НСтр("ru = 'РНН'"), НСтр("ru = 'БИН'"))); 
		
		Пока Выборка.Следующий() Цикл
			// Если первая строка, то заполняем реквизиты шапки и подвала
			Если НомерСтроки = 1 Тогда

				СписокСохранения.Вставить("РННОрганизации", ?(ВыводитьРНН, Выборка.РННОрганизации, Выборка.БИНОрганизации)); 
				СписокСохранения.Вставить("ОргНазв", Выборка.НаименованиеОрганизации);
				
				РеквизитыОрганизации 	= "";
				ЮрАдресОрганизации		= Выборка.ЮрАдресОрганизации;
				Если ЗначениеЗаполнено(ЮрАдресОрганизации) Тогда
					РеквизитыОрганизации = ЮрАдресОрганизации;
				КонецЕсли;
				
				СписокСохранения.Вставить("РеквизитыОрганизации", РеквизитыОрганизации);
				
				// Руководитель организации
				СписокСохранения.Вставить("ФИОРуководителя", Выборка.ФИОРуководителя);

				// Главный бухгалтер
				СписокСохранения.Вставить("ФИОГлБухгалтера", Выборка.ФИОГлБухгалтера);
				
				// Информация о сотруднике
				СписокСохранения.Вставить("ИИНРаботника", Выборка.ИИНРаботника);
				СписокСохранения.Вставить("Фамилия"		, Выборка.Фамилия);
				СписокСохранения.Вставить("Имя"			, Выборка.Имя);
				СписокСохранения.Вставить("Отчество"	, Выборка.Отчество);
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(Выборка.НомерПоручения) Или ЗначениеЗаполнено(Выборка.ДатаПеречисления) Тогда
				ИнформацияОПеречислении = ИнформацияОПеречислении 
					+ ?(ЗначениеЗаполнено(Выборка.НомерПоручения), "№ " + Строка(Выборка.НомерПоручения),"") 
					+ ?(ЗначениеЗаполнено(Выборка.ДатаПеречисления), " от " + Формат(Выборка.ДатаПеречисления,"ДФ=dd.MM.yyyy"),"")
					+ "; " + Символы.ПС;
			КонецЕсли;
			
		КонецЦикла;
		
		// Заполняем колонки отчета
		ИтогоДоход = ИтогоДоход + ВыборкаПериод.Доход;
		СписокСохранения.Вставить("Доход_" + НомерСтроки, ВыборкаПериод.Доход);
		
		ИтогоОблогаемыйДоход = ИтогоОблогаемыйДоход + ВыборкаПериод.ОблогаемыйДоход;
		СписокСохранения.Вставить("ОблогаемыйДоход_" + НомерСтроки, ВыборкаПериод.ОблогаемыйДоход);
		
		ИтогоНачисленныйВОСМС = ИтогоНачисленныйВОСМС + ВыборкаПериод.НачисленныйВОСМС;
		СписокСохранения.Вставить("НачисленныйВОСМС_" + НомерСтроки, ВыборкаПериод.НачисленныйВОСМС);
		
		ИтогоПеречисленныйВОСМС = ИтогоПеречисленныйВОСМС + ВыборкаПериод.ПеречисленныйВОСМС;
		СписокСохранения.Вставить("ПеречисленныйВОСМС_" + НомерСтроки, ВыборкаПериод.ПеречисленныйВОСМС);
		
		СписокСохранения.Вставить("ИнформацияОПеречислении_" + НомерСтроки, ИнформацияОПеречислении);
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	// Итоги отчета
	СписокСохранения.Вставить("ИтогоДоход"				, ИтогоДоход);
	СписокСохранения.Вставить("ИтогоОблогаемыйДоход"	, ИтогоОблогаемыйДоход);
	СписокСохранения.Вставить("ИтогоНачисленныйВОСМС"	, ИтогоНачисленныйВОСМС);
	СписокСохранения.Вставить("ИтогоПеречисленныйВОСМС"	, ИтогоПеречисленныйВОСМС);
	
	СписокСохранения.Вставить("ИтогоДоход"				, ИтогоДоход);
	СписокСохранения.Вставить("ИтогоПрописью"			, ОбщегоНазначенияБКВызовСервера.СформироватьСуммуПрописью(ИтогоДоход, Константы.ВалютаРегламентированногоУчета.Получить()));
	
	СписокСохранения.Вставить("НомерСтроки"				, ?(НомерСтроки > 0, НомерСтроки - 1, 0));
	
	СписокСохранения.Вставить("ДатаПодписи"				, ДатаПодписи);
	СписокСохранения.Вставить("ПериодС"					, НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	СписокСохранения.Вставить("ПериодПо"				, КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
	
	ВывестиВДокумент(СписокСохранения);
	
	ТекТабличныйДокумент = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"];
	Если ТипЗнч(мСтруктураСохраняемыхПоказателей) = Тип("Структура") Тогда
		Для Каждого Показатель Из мСтруктураСохраняемыхПоказателей Цикл
			Если ЗначениеЗаполнено(Показатель.Значение) Тогда
				УстановитьЗначениеОбласти(ТекТабличныйДокумент, Показатель.Ключ, Показатель.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	УстановитьФорматВывода();
	Комментарий = "";

КонецПроцедуры

&НаСервере
Функция ПроверитьСоответствиеСотрудникаОрганизацииНаСервере(ВыбранныйСотрудник)
	
	ГоловнаяОрганизацияОтчета    = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Налогоплательщик);
	ВыбраннаяГоловнаяОрганизация = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(ВыбранныйСотрудник.ТекущаяСтруктурнаяЕдиница);
	
	Возврат ГоловнаяОрганизацияОтчета = ВыбраннаяГоловнаяОрганизация;
	
КонецФункции

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	ФизЛицо	= Сотрудник.ФизЛицо;

КонецПроцедуры

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	УстановитьЗначениеОбласти(ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"], "ДатаПодписи", ДатаПодписи);
	Модифированность = Истина;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УстановитьЗначениеОбласти(Приемник, ИмяОбласти, Значение)

	Результат = Ложь;
	Если ТипЗнч(Приемник) = Тип("Структура") Тогда
		
		Приемник.Вставить(ИмяОбласти, Значение);
		Результат = Истина;
	
	ИначеЕсли ТипЗнч(Приемник) = Тип("ТабличныйДокумент") Тогда
		
		ИскомаяОбласть = Приемник.Области.Найти(ИмяОбласти);
		Если ИскомаяОбласть <> Неопределено Тогда
			Если ИскомаяОбласть.СодержитЗначение Тогда
				ИскомаяОбласть.Значение = Значение;
			Иначе
				ИскомаяОбласть.Текст = Строка(Значение);
			КонецЕсли;
			Результат = Истина;
		КонецЕсли;
				
	КонецЕсли;

    Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗначениеОбласти(Источник, ИмяОбласти, ЗначениеПоУмолчанию = Неопределено) 

	Результат = ЗначениеПоУмолчанию;
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		
		Источник.Свойство(ИмяОбласти, Результат);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ТабличныйДокумент") Тогда
		
		ИскомаяОбласть = Источник.Области.Найти(ИмяОбласти);
		
		Если ИскомаяОбласть <> Неопределено Тогда
			
			Если ИскомаяОбласть.СодержитЗначение Тогда
				Результат = ИскомаяОбласть.Значение;
			Иначе
				Результат = ИскомаяОбласть.Текст;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
	        ТекстСообщения = НСтр("ru = 'При выводе сумм в тенге точность не может превышать 2 знака'");            
	        ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);                
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
	        ТекстСообщения = НСтр("ru = 'При выводе сумм в тысячах тенге точность не может превышать 3 знака'");            
	        ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);                
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
	        ТекстСообщения = НСтр("ru = 'При выводе сумм в миллионах тенге точность не может превышать 6 знаков'");            
	        ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);                
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

&НаСервере
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	// Собираем в список значений имена вычисляемых показателей
	//
	//
	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

