#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПриВыводеЗаголовка,
							|ИспользоватьВнешниеНаборыДанных,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки,
							|ИспользоватьРасширенныеПараметрыРасшифровки",
							Истина, Истина, Истина, Истина, Ложь, Ложь);
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт
	
	ТекстОрганизации = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ПараметрыОтчета.СписокСтруктурныхЕдиниц,,, Истина);
	
	ЗаголовокОтчета = НСтр("ru = 'Задолженность покупателей по срокам долга на %1'");
	ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокОтчета, Формат(ПараметрыОтчета.Период, "ДФ=dd.MM.yyyy"));
	
	Если ОрганизацияВНачале Тогда
		ЗаголовокОтчета = ТекстОрганизации + Символы.ПС + ЗаголовокОтчета;
	Иначе
		ЗаголовокОтчета = ЗаголовокОтчета + " " + ТекстОрганизации;
	КонецЕсли;
	
	Возврат ЗаголовокОтчета;
	
КонецФункции

Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	ЗадолженностьПоСрокам = ПолучитьПросроченнуюЗадолженность(ПараметрыОтчета);

	ВнешниеНаборыДанных = Новый Структура("ЗадолженностьПоСрокам", ЗадолженностьПоСрокам);
	
	Возврат ВнешниеНаборыДанных;
	
КонецФункции

Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт

	Если ПараметрыОтчета.РежимРасшифровки
		ИЛИ (ПараметрыОтчета.Свойство("ОткрытИзРассылки") И ПараметрыОтчета.ОткрытИзРассылки) Тогда
		КомпоновщикНастроек.Настройки.Структура.ИдентификаторПользовательскойНастройки = "";
	КонецЕсли;
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Период", ПараметрыОтчета.Период);
	
	Структура = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Первый = Истина;
	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Если Не Первый Тогда 
				Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			КонецЕсли;
			Первый = Ложь;
						
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			
			Если ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных")); 
			
		КонецЕсли;
	КонецЦикла;
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	БухгалтерскиеОтчеты.ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, ПараметрыОтчета);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);

КонецПроцедуры

// Формирует таблицу данных для монитора руководителя по организации на дату
// Параметры
//   Организация - СправочникСсылка.Организации - Организация по которой нужны данные
//   ДатаЗадолженности - Дата - дата на которую нужны остатки
//   ВыводитьАналитику - Булево - Признак, нужно ли выводить трех самых крупных должников
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица с данными для монитора руководителя
//
Функция ПросроченнаяЗадолженностьДляМонитораРуководителя(Организация, ДатаЗадолженности, ВыводитьАналитику) Экспорт
	
	ТаблицаДанных = МониторРуководителя.ТаблицаДанных();
	
	ПросроченнаяЗадолженность = СрокиОплатыДокументов.ПросроченнаяЗадолженностьПокупателей(Организация, ДатаЗадолженности);
	
	Если ВыводитьАналитику Тогда
		
		ПросроченнаяЗадолженность = ПросроченнаяЗадолженность.Скопировать(,"Контрагент, ПросроченнаяЗадолженность");
		ПросроченнаяЗадолженность.Свернуть("Контрагент", "ПросроченнаяЗадолженность");
		ПросроченнаяЗадолженность.Сортировать("ПросроченнаяЗадолженность Убыв");
		
		Для ИндексСтроки = 0 По Мин(2, ПросроченнаяЗадолженность.Количество() - 1) Цикл
			
			СтрокаРезультата = ПросроченнаяЗадолженность[ИндексСтроки];
			
			Если СтрокаРезультата.ПросроченнаяЗадолженность = 0 Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаДанных = ТаблицаДанных.Добавить();
			СтрокаДанных.Представление     = СтрокаРезультата.Контрагент;
			СтрокаДанных.ДанныеРасшифровки = СтрокаРезультата.Контрагент;
			СтрокаДанных.Порядок           = ПорядокЗадолженностейВМониторе();
			СтрокаДанных.Сумма             = СтрокаРезультата.ПросроченнаяЗадолженность;
			
		КонецЦикла;
	КонецЕсли;
	
	// Добавляем итог по разделу
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.Представление = НСтр("ru = 'Итого'");
	СтрокаДанных.Порядок       = ПорядокИтоговВМониторе();
	СтрокаДанных.Сумма         = ПросроченнаяЗадолженность.Итог("ПросроченнаяЗадолженность");
	
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура ЗаполнитьПоляВСоответствииСоСпискомИнтервалов(ПараметрыОтчета, Схема, КомпоновщикНастроек, ОчиститьНастройки) Экспорт
	
	ТаблицаИнтервалов = ПараметрыОтчета.Интервалы;
	
	КоличествоПолейПериодов = Схема.НаборыДанных[0].Поля.Количество() - 4;
	Для Индекс = 1 По КоличествоПолейПериодов Цикл
		Схема.НаборыДанных[0].Поля.Удалить(Схема.НаборыДанных[0].Поля.Найти("ОстатокПериода" + Индекс));
	КонецЦикла;
	
	Схема.ПоляИтога.Очистить();
	ПолеИтога = Схема.ПоляИтога.Добавить();
	ПолеИтога.ПутьКДанным = "ОстатокДолга";
	ПолеИтога.Выражение   = "Сумма(ОстатокДолга)";
	
	Если ОчиститьНастройки Тогда
		
		ПользовательскиеВыбранныеПоля = Неопределено;
		
		КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ОстатокДолга");
		
		Для Каждого ЭлементНастройки Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл	
			Если ЭлементНастройки.ИдентификаторПользовательскойНастройки = КомпоновщикНастроек.Настройки.Выбор.ИдентификаторПользовательскойНастройки Тогда
				ПользовательскиеВыбранныеПоля = ЭлементНастройки;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ПользовательскиеВыбранныеПоля = Неопределено Тогда
			
			ПользовательскиеВыбранныеПоля.Элементы.Очистить();
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПолеПользовательскиеНастройки(ПользовательскиеВыбранныеПоля, "ОстатокДолга");	
		
			ПапкаСПолямиПользовательскиеНастройки = ПользовательскиеВыбранныеПоля.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ПапкаСПолямиПользовательскиеНастройки.Заголовок = НСтр("ru = 'В том числе по срокам появления долга'");
			
		КонецЕсли;
		
		ПапкаСПолями = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ПапкаСПолями.Заголовок = НСтр("ru = 'В том числе по срокам появления долга'");
	КонецЕсли;
	
	Индекс = 1;
	ЗначениеПоследнего = 0;
	Для Каждого Интервал Из ТаблицаИнтервалов Цикл
		ИмяПоля = "ОстатокПериода" + Индекс;
		Поле = Схема.НаборыДанных[0].Поля.Найти(ИмяПоля);
		Если Поле = Неопределено Тогда
			Поле = Схема.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		КонецЕсли;
		Поле.Поле        = ИмяПоля;
		Поле.ПутьКДанным = ИмяПоля;
		Поле.Заголовок   = Интервал.Представление;
		Поле.ТипЗначения = ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 0);
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Поле.Оформление, "Формат", "ЧЦ=15; ЧДЦ=0");
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Поле.Оформление, "МинимальнаяШирина", 15);
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Поле.Оформление, "МаксимальнаяШирина", 15);
		
		ПолеИтога = Схема.ПоляИтога.Добавить();
		ПолеИтога.ПутьКДанным = ИмяПоля;
		ПолеИтога.Выражение   = "Сумма(" + ИмяПоля + ")";
		
		Если ОчиститьНастройки Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПапкаСПолями, ИмяПоля);
			Если НЕ ПользовательскиеВыбранныеПоля = Неопределено Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПолеПользовательскиеНастройки(ПапкаСПолямиПользовательскиеНастройки, ИмяПоля);
			КонецЕсли;
		КонецЕсли;
		
		Индекс = Индекс + 1;
		ЗначениеПоследнего = Интервал.Значение;
	КонецЦикла;
	
	ИмяПоля = "ОстатокПериода" + Индекс;
	Поле = Схема.НаборыДанных[0].Поля.Найти(ИмяПоля);
	Если Поле = Неопределено Тогда
		Поле = Схема.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	КонецЕсли;
	Поле.Поле        = ИмяПоля;
	Поле.ПутьКДанным = ИмяПоля;
	ТекстЗаголовка   = НСтр("ru = 'Свыше %1 дней'");
	ТекстЗаголовка   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, ЗначениеПоследнего);
	Поле.Заголовок   = ТекстЗаголовка;
	Поле.ТипЗначения = ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 0);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Поле.Оформление, "Формат", "ЧЦ=15; ЧДЦ=0");
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Поле.Оформление, "МинимальнаяШирина", 15);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Поле.Оформление, "МаксимальнаяШирина", 15);
	
	ПолеИтога = Схема.ПоляИтога.Добавить();
	ПолеИтога.ПутьКДанным = ИмяПоля;
	ПолеИтога.Выражение   = "Сумма(" + ИмяПоля + ")";
	
	Если ОчиститьНастройки Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПапкаСПолями, ИмяПоля);
		Если НЕ ПользовательскиеВыбранныеПоля = Неопределено Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПолеПользовательскиеНастройки(ПапкаСПолямиПользовательскиеНастройки, ИмяПоля);
		КонецЕсли;
	КонецЕсли;
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	
КонецПроцедуры

Функция ПорядокИтоговВМониторе() Экспорт
	
	Возврат 0;
	
КонецФункции

Функция ПорядокЗадолженностейВМониторе() Экспорт
	
	Возврат 1;
	
КонецФункции

Процедура ПриВыводеЗаголовка(ПараметрыОтчета, Результат) Экспорт
	
	МакетЗаголовок   = ПолучитьОбщийМакет("ЗаголовокОтчета");
	ОбластьЗаголовок = МакетЗаголовок.ПолучитьОбласть("Заголовок");
	
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ПолучитьТекстЗаголовка(ПараметрыОтчета);
	
	Результат.Вывести(ОбластьЗаголовок);
	
КонецПроцедуры

Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант из Схема.ВариантыНастроек Цикл
		НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, Вариант.Имя);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета.
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт
	
	ПараметрыОтчета = РассылкаОтчетовБК.НастройкиОтчетаСохраняемыеВРассылке();
	ПараметрыОтчета.Вставить("ТипЗадолженности" , 1);
	
	Интервалы = Новый ТаблицаЗначений;
	Интервалы.Колонки.Добавить("Значение");
	Интервалы.Колонки.Добавить("Представление");
	
	НоваяСтрока = Интервалы.Добавить();
	НоваяСтрока.Значение      = 7;
	НоваяСтрока.Представление = "До 7 дней";
	
	НоваяСтрока = Интервалы.Добавить();
	НоваяСтрока.Значение      = 15;
	НоваяСтрока.Представление = "От 8 до 15 дней";
	
	НоваяСтрока = Интервалы.Добавить();
	НоваяСтрока.Значение      = 30;
	НоваяСтрока.Представление = "От 16 до 30 дней";
	
	НоваяСтрока = Интервалы.Добавить();
	НоваяСтрока.Значение      = 60;
	НоваяСтрока.Представление = "От 31 до 60 дней";
	
	НоваяСтрока = Интервалы.Добавить();
	НоваяСтрока.Значение      = 90;
	НоваяСтрока.Представление = "От 61 до 90 дней";
	
	ПараметрыОтчета.Вставить("Интервалы", Интервалы);
	
	Возврат ПараметрыОтчета;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьПросроченнуюЗадолженность(ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	
	УстановитьИнтервалыЗапроса(ПараметрыОтчета, Запрос);
	
	УстановитьТекстЗапроса(ПараметрыОтчета, Запрос);
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.СписокСтруктурныхЕдиниц);
	
	ВидыСубконтоКД = Новый СписокЗначений;
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	Запрос.УстановитьПараметр("ВидыСубконтоКД", ВидыСубконтоКД);
	
	Запрос.УстановитьПараметр("СчетаРасчетов"    , БухгалтерскиеОтчетыВызовСервера.ВозвратитьМассивСчетовДтКтЗадолженности(Ложь, Истина, Истина));
	Запрос.УстановитьПараметр("ИсключенныеСчета" , БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(1));	
	Запрос.УстановитьПараметр("СчетаПользователя", БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовПользователяДляРасчетаЗадолженности(1));	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура УстановитьИнтервалыЗапроса(ПараметрыОтчета, Запрос)

	Сутки = 60 * 60 * 24;
	
	ТабИнтервалы = Новый ТаблицаЗначений;
	ТабИнтервалы.Колонки.Добавить("ИмяИнтервала");
	ТабИнтервалы.Колонки.Добавить("НомерИнтервала");
	ТабИнтервалы.Колонки.Добавить("НачалоИнтервала");
	ТабИнтервалы.Колонки.Добавить("КонецИнтервала");
	
	ДатаКон = ПараметрыОтчета.Период;
	
	МассивОстортированныхПоЗначениюИнтервалов = ПараметрыОтчета.Интервалы;
	Если ТипЗнч(МассивОстортированныхПоЗначениюИнтервалов) = Тип("ТаблицаЗначений") Тогда
		МассивОстортированныхПоЗначениюИнтервалов.Сортировать("Значение");
	КонецЕсли;
	
	Индекс = 1;
	Первый = Истина;
	ПредыдущееЗначение = 0;
	Для Каждого Интервал Из МассивОстортированныхПоЗначениюИнтервалов Цикл
		Если ТипЗнч(МассивОстортированныхПоЗначениюИнтервалов) = Тип("ТаблицаЗначений") Тогда
			ИнтервалПредставление = Интервал.Представление;
			ИнтервалЗначение = Интервал.Значение;
		Иначе
			ИнтервалПредставление = "";
			ИнтервалЗначение = Интервал;
		КонецЕсли;
		НоваяСтрока = ТабИнтервалы.Добавить();
		НоваяСтрока.ИмяИнтервала    = ИнтервалПредставление;
		НоваяСтрока.НомерИнтервала  = Индекс;
		Если Первый Тогда  
			НоваяСтрока.НачалоИнтервала = НачалоДня(ДатаКон) - ИнтервалЗначение * Сутки;
			НоваяСтрока.КонецИнтервала  = КонецДня(ДатаКон);
			ПредыдущееЗначение = ИнтервалЗначение;
			Первый = Ложь;
		Иначе
			НоваяСтрока.НачалоИнтервала = НачалоДня(ДатаКон) - ИнтервалЗначение * Сутки;
			НоваяСтрока.КонецИнтервала  = КонецДня(ДатаКон)  - (ПредыдущееЗначение + 1) * Сутки;
			ПредыдущееЗначение = ИнтервалЗначение;
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
		
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(ДатаКон) + 1);
	Для каждого СтрокаИнтервала из ТабИнтервалы Цикл
		Запрос.УстановитьПараметр("НачалоИнтервала" + СтрокаИнтервала.НомерИнтервала, СтрокаИнтервала.НачалоИнтервала);
		Запрос.УстановитьПараметр("КонецИнтервала"  + СтрокаИнтервала.НомерИнтервала, СтрокаИнтервала.КонецИнтервала);
	КонецЦикла;
	
	ПараметрыОтчета.Вставить("ТабИнтервалы", ТабИнтервалы);
	
КонецПроцедуры

Процедура УстановитьТекстЗапроса(ПараметрыОтчета, Запрос)

	ТекстЗапросаПоОстаткам =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.Договор,
	|	ВложенныйЗапрос.ОстатокДолга0
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВзаиморасчетыОстатки.Организация КАК Организация,
	|		ВзаиморасчетыОстатки.Субконто1 КАК Контрагент,
	|		ВзаиморасчетыОстатки.Субконто2 КАК Договор,
	//|		ВзаиморасчетыОстатки.Счет КАК Счет,
	|		ВзаиморасчетыОстатки.СуммаОстаток КАК ОстатокДолга0
	|	ИЗ
	|		РегистрБухгалтерии.Типовой.Остатки(
	|				&ДатаОстатков,
	|				НЕ Счет.Забалансовый
	|					И (Счет В ИЕРАРХИИ (&СчетаРасчетов)
	|						ИЛИ Счет В (&СчетаПользователя))
	|					И НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета),
	|				&ВидыСубконтоКД,
	|				Организация В(&Организация)) КАК ВзаиморасчетыОстатки) КАК ВложенныйЗапрос";
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОтчета.СписокСтруктурныхЕдиниц) Тогда
		ТекстЗапросаПоОстаткам = СтрЗаменить(ТекстЗапросаПоОстаткам, "Организация В(&Организация)", "");
	КонецЕсли;
	
	ТекстЗапросаПоОборотам =
	"ВЫБРАТЬ
	|	ВзаиморасчетыОбороты.Организация,
	|	ВзаиморасчетыОбороты.Субконто1 КАК Контрагент,
	|	ВзаиморасчетыОбороты.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыОбороты.СуммаОборотДт > 0
	|			ТОГДА ВзаиморасчетыОбороты.СуммаОборотДт
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА ВзаиморасчетыОбороты.СуммаОборотКт < 0
	|			ТОГДА ВзаиморасчетыОбороты.СуммаОборотКт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УвеличениеДолга1
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(
	|			&НачалоИнтервала1,
	|			&КонецИнтервала1,
	|			,
	|			НЕ Счет.Забалансовый
	|				И (Счет В ИЕРАРХИИ (&СчетаРасчетов)
	|					ИЛИ Счет В (&СчетаПользователя))
	|				И НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета),
	|			&ВидыСубконтоКД,
	|			Организация В(&Организация),
	|			,
	|			) КАК ВзаиморасчетыОбороты";
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОтчета.СписокСтруктурныхЕдиниц) Тогда
		ТекстЗапросаПоОборотам = СтрЗаменить(ТекстЗапросаПоОборотам, "Организация В(&Организация)", "");
	КонецЕсли;
	
	ТабИнтервалы  = ПараметрыОтчета.ТабИнтервалы;
	КолИнтервалов = ТабИнтервалы.Количество();
	
	ТекстЗапросаОстатокИОбороты = 
	"ВЫБРАТЬ
	|	Остатки.Организация,
	|	Остатки.Контрагент,
	|	Остатки.Договор,
	|	Остатки.ОстатокДолга0";
	Для Ном = 1 По КолИнтервалов Цикл
		ОборотыНом = "Обороты" + Ном;
		ТекстЗапросаОстатокИОбороты = ТекстЗапросаОстатокИОбороты + ",
		|	ЕСТЬNULL(Обороты" + Ном + ".УвеличениеДолга" + Ном + ", 0) КАК УвеличениеДолга" + Ном;
	КонецЦикла;
	ТекстЗапросаОстатокИОбороты = ТекстЗапросаОстатокИОбороты + "
	|ИЗ
	|	(" + ТекстЗапросаПоОстаткам + ") КАК Остатки";
	Для Ном = 1 По КолИнтервалов Цикл
		ТекстЗапросаПоОборотамИнтервала = СтрЗаменить(ТекстЗапросаПоОборотам, "УвеличениеДолга1", "УвеличениеДолга" + Ном);
		ТекстЗапросаПоОборотамИнтервала = СтрЗаменить(ТекстЗапросаПоОборотамИнтервала, "&НачалоИнтервала1", "&НачалоИнтервала" + Ном);
		ТекстЗапросаПоОборотамИнтервала = СтрЗаменить(ТекстЗапросаПоОборотамИнтервала, "&КонецИнтервала1", "&КонецИнтервала" + Ном);
		ОборотыНом = "Обороты" + Ном;
		ТекстЗапросаОстатокИОбороты = ТекстЗапросаОстатокИОбороты + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(" + ТекстЗапросаПоОборотамИнтервала + ") КАК " + ОборотыНом + "
		|	ПО
		|		Остатки.Организация = " + ОборотыНом + ".Организация
		|			И Остатки.Контрагент = " + ОборотыНом + ".Контрагент
		|			И Остатки.Договор = " + ОборотыНом + ".Договор";
	КонецЦикла;
	
	ТекстЗапросаОстаткиПоПериодам =
	"ВЫБРАТЬ
	|	ОстатокИОбороты.Организация,
	|	ОстатокИОбороты.Контрагент,
	|	ОстатокИОбороты.Договор,
	|	ОстатокИОбороты.Договор.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ОстатокИОбороты.ОстатокДолга0";
	Для Ном = 1 По КолИнтервалов Цикл
		ВыражениеОстатка = "ОстатокИОбороты.ОстатокДолга0";
		Для й = 1 По Ном Цикл
			ВыражениеОстатка = ВыражениеОстатка + " - ОстатокИОбороты.УвеличениеДолга" + й;
		КонецЦикла;
		ТекстЗапросаОстаткиПоПериодам = ТекстЗапросаОстаткиПоПериодам + ",
		|	ВЫБОР
		|		КОГДА " + ВыражениеОстатка + " > 0
		|			ТОГДА " + ВыражениеОстатка + "
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОстатокДолга" + Ном;
	КонецЦикла;
	ТекстЗапросаОстаткиПоПериодам = ТекстЗапросаОстаткиПоПериодам + "
	|ИЗ
	|	(" + ТекстЗапросаОстатокИОбороты + ") КАК ОстатокИОбороты";
	
	ТекстПоказателей = "
	|	ОстаткиПоПериодам.ОстатокДолга0 КАК ОстатокДолга";
	Для Ном = 1 По КолИнтервалов Цикл
		ТекстПоказателей = ТекстПоказателей + ",
		|	ОстаткиПоПериодам.ОстатокДолга" + (Ном - 1) + " - ОстаткиПоПериодам.ОстатокДолга" + Ном + " КАК ОстатокПериода" + Ном;
	КонецЦикла;
	Если КолИнтервалов > 0 Тогда
		ТекстПоказателей = ТекстПоказателей + ",
		|	ОстаткиПоПериодам.ОстатокДолга" + КолИнтервалов + " КАК ОстатокПериода" + (КолИнтервалов + 1);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиПоПериодам.Организация КАК Организация,
	|	ОстаткиПоПериодам.Контрагент КАК Контрагент,
	|	ОстаткиПоПериодам.Договор КАК Договор,
	|	ОстаткиПоПериодам.Договор.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,"
	+ ТекстПоказателей + "
	|ИЗ
	|	(" + ТекстЗапросаОстаткиПоПериодам + ") КАК ОстаткиПоПериодам";
	
	Запрос.Текст = ТекстЗапроса;

КонецПроцедуры


#КонецЕсли