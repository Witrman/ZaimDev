#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик   = Истина;
	Настройки.События.ПередЗагрузкойВариантаНаСервере      = Истина;
	Настройки.События.ПослеЗаполненияПанелиБыстрыхНастроек = Истина;
	
	Если Форма <> Неопределено Тогда
		ИмяИсходногоВарианта = Настройки.ИмяИсходногоВарианта;
		Если ИмяИсходногоВарианта = "СчетФактураВыданный" Тогда
			Настройки.КлючСхемы = "СчетФактураВыданный";
		ИначеЕсли ИмяИсходногоВарианта = "СчетФактураПолученный" Тогда
			Настройки.КлючСхемы = "СчетФактураПолученный";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт

	Элементы = Форма.Элементы;
	
	Элементы.ГруппаПериод.Видимость = Истина;
	Форма.ЕстьНачалоПериодаБК       = Истина;
	Форма.ЕстьКонецПериодаБК        = Истина;
	
	Элементы.Период.Видимость = Ложь;
	Форма.ЕстьПериодБК        = Ложь;
	
	Элементы.ГруппаДополнительные.Видимость = Ложь;
	
	Форма.ВидРегистраОтчета = "СчетФактураПолученный";
	
	Форма.ПеречислениеРазделыНалоговогоУчета        = Перечисления.РазделыНалоговогоУчета.НДС;
	Форма.РежимВыбораСтруктурныхЕдиниц              = "ПоНалогоплательщику";
	Элементы.ГруппаОрганизацияРегистрНУ.Видимость   = Истина;
	Элементы.ГруппаОрганизация.Видимость            = Ложь;
	
	Элементы.ВыводитьЗаголовок.Видимость            = Истина;
	Элементы.ВыводитьПодписи.Видимость              = Истина;
	Элементы.ВыводитьПодписиРуководителей.Видимость = Ложь;
	
	Если НЕ Форма.РежимРасшифровки Тогда
		Форма.НачалоПериода = НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
		Форма.КонецПериода  = КонецМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если НЕ ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		Возврат;
	КонецЕсли;

	ИмяИсходногоВарианта = Контекст.НастройкиОтчета.ИмяИсходногоВарианта;
	
	Если ИмяИсходногоВарианта <> "СчетФактураВыданный" И ИмяИсходногоВарианта <> "СчетФактураПолученный" Тогда
		ИмяИсходногоВарианта = НайтиВариантПоКлючу(ИмяИсходногоВарианта);
	КонецЕсли;
	
	Если ИмяИсходногоВарианта <> "СчетФактураВыданный" И ИмяИсходногоВарианта <> "СчетФактураПолученный"
		И НовыеПользовательскиеНастройкиКД <> Неопределено
		И НовыеПользовательскиеНастройкиКД.ДополнительныеСвойства.Свойство("ВидРегистраОтчета") Тогда
		ИмяИсходногоВарианта = НовыеПользовательскиеНастройкиКД.ДополнительныеСвойства.ВидРегистраОтчета;
	КонецЕсли;
	
	Если ИмяИсходногоВарианта <> "СчетФактураВыданный" И ИмяИсходногоВарианта <> "СчетФактураПолученный"
		И НовыеНастройкиКД <> Неопределено
		И НовыеНастройкиКД.ДополнительныеСвойства.Свойство("ВидРегистраОтчета") Тогда
		ИмяИсходногоВарианта = НовыеНастройкиКД.ДополнительныеСвойства.ВидРегистраОтчета;
	КонецЕсли;
	
	Если ИмяИсходногоВарианта = "СчетФактураВыданный" ИЛИ ИмяИсходногоВарианта = "СчетФактураПолученный" Тогда
		СхемаКомпоновкиДанных = ПолучитьМакет(ИмяИсходногоВарианта);
		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКомпоновкиДанных, ИмяИсходногоВарианта);
		Если Контекст.ИмяФормы = "ОбщаяФорма.ФормаОтчетаБК" Тогда
			Контекст.ВидРегистраОтчета = ИмяИсходногоВарианта;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗагрузкойВариантаНаСервере(Форма, Настройки) Экспорт
	
	Схема = ПолучитьИзВременногоХранилища(Форма.НастройкиОтчета.АдресСхемы);
	
	ПредопределенныйВариантОтчета = Схема.ВариантыНастроек.Найти(Форма.КлючТекущегоВарианта);
	
	ЭтоПредопределенныйВариант = Схема.ВариантыНастроек.Найти(Форма.КлючТекущегоВарианта) <> Неопределено;
	
	Если ЭтоПредопределенныйВариант Тогда
		КлючТекущегоВарианта = Форма.КлючТекущегоВарианта;
	Иначе
		КлючТекущегоВарианта = НайтиВариантПоКлючу(Форма.КлючТекущегоВарианта); 
	КонецЕсли;
	
	Если КлючТекущегоВарианта <> "СчетФактураВыданный" И КлючТекущегоВарианта <> "СчетФактураПолученный"
		И Настройки.ДополнительныеСвойства.Свойство("ВидРегистраОтчета") Тогда
		КлючТекущегоВарианта = Настройки.ДополнительныеСвойства.ВидРегистраОтчета;
	КонецЕсли;
	
	Если КлючТекущегоВарианта = "СчетФактураВыданный" ИЛИ КлючТекущегоВарианта = "СчетФактураПолученный" Тогда
		СхемаКомпоновкиДанных = ПолучитьМакет(КлючТекущегоВарианта);
		НастройкиВарианта = СхемаКомпоновкиДанных.ВариантыНастроек[КлючТекущегоВарианта].Настройки;
		Если Настройки.ДополнительныеСвойства.Количество() > 0 Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиВарианта);
		КонецЕсли;
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	КонецЕсли;
   
КонецПроцедуры

Процедура ПослеЗаполненияПанелиБыстрыхНастроек(Форма, ПараметрыЗаполнения) Экспорт
	
	Если ПараметрыЗаполнения.ИмяСобытия = "НастройкиПоУмолчанию" Тогда
		Форма.ПользовательскиеНастройкиМодифицированы = Ложь;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ДополнительныеСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	Если ДополнительныеСвойства.Свойство("НастройкиОтчета") И ТипЗнч(ДополнительныеСвойства.НастройкиОтчета) = Тип("Структура") Тогда
		НастройкиОтчета  = ДополнительныеСвойства.НастройкиОтчета;
		НачалоПериода    = НастройкиОтчета.НачалоПериода;
		КонецПериода     = НастройкиОтчета.КонецПериода;
		Налогоплательщик = НастройкиОтчета.Налогоплательщик;
	КонецЕсли;
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, Новый Структура("КорректностьПериода", Истина));
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
	
	ХранилищеСвойств = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "НастройкиОтчета");
	Если ХранилищеСвойств <> Неопределено И ТипЗнч(ХранилищеСвойств.Значение) = Тип("ХранилищеЗначения") Тогда
		НастройкиОтчета = ХранилищеСвойств.Значение.Получить();
	Иначе
		Возврат;
	КонецЕсли;
	
	НастройкиОтчета.Вставить("ВидСчетаФактуры", НастройкиОтчета.ВидРегистраОтчета);
	
	Если НастройкиОтчета.ВыводитьЗаголовок Тогда
		Отчеты.РегистрНалоговогоУчетаПоСчетамФактурам.ПриВыводеЗаголовка(НастройкиОтчета, ДокументРезультат);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(НастройкиОтчета.НачалоПериода));
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", Дата(1, 1, 1));
	КонецЕсли;
	Если ЗначениеЗаполнено(НастройкиОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(НастройкиОтчета.КонецПериода));
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", Дата(3999, 11, 1));
	КонецЕсли;
	
	ПредставлениеНомераДокументаКД = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПредставлениеНомераДокумента");
	Если ПредставлениеНомераДокументаКД = Неопределено Тогда
		ПредставлениеНомераДокументаКД = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(ПользовательскиеНастройки, "ПредставлениеНомераДокумента");
	КонецЕсли;
	Если ПредставлениеНомераДокументаКД <> Неопределено И ПредставлениеНомераДокументаКД.Использование Тогда
		ПредставлениеНомераДокумента = ПредставлениеНомераДокументаКД.Значение;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПредставлениеНомераДокумента) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПредставлениеНомераДокумента", Константы.ПредставлениеНомераДокументов.Получить());
	КонецЕсли;
	
	ФормированиеПоДатеВыпискиКД = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ФормированиеПоДатеВыписки");
	Если ФормированиеПоДатеВыпискиКД = Неопределено Тогда
		ФормированиеПоДатеВыпискиКД = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(ПользовательскиеНастройки, "ФормированиеПоДатеВыписки");
	КонецЕсли;
	Если ФормированиеПоДатеВыпискиКД <> Неопределено Тогда
		Если ФормированиеПоДатеВыпискиКД.Использование Тогда
			ФормированиеПоДатеВыписки = ФормированиеПоДатеВыпискиКД.Значение;
		Иначе
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ФормированиеПоДатеВыписки", Ложь);
		КонецЕсли;
	КонецЕсли;
	Если ФормированиеПоДатеВыписки = Неопределено Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ФормированиеПоДатеВыписки", Ложь);
	КонецЕсли;
	
	СписокПрефиксовУзлов = Новый СписокЗначений;
	СписокПрефиксовУзлов.ЗагрузитьЗначения(ПрефиксацияОбъектовБКВызовСервера.СписокПрефиксовУзлов());
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "глСписокПрефиксовУзлов"        , СписокПрефиксовУзлов);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Налогоплательщик"              , НастройкиОтчета.Налогоплательщик);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ОтветственноеЛицоРуководитель" , Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ОтветственноеЛицоГлБухгалтер"  , Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	
	ПользовательскийОтбор = ПользовательскиеНастройки.Элементы.Найти(КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
	Если ТипЗнч(ПользовательскийОтбор) = Тип("ОтборКомпоновкиДанных") Тогда
		СписокПолейОтбора = Новый Массив;
		СписокПолейОтбора.Добавить("Организация");
		ПроверяемыйОтбор = БухгалтерскиеОтчетыКлиентСервер.НайтиЭлементыОтбора(ПользовательскийОтбор, СписокПолейОтбора);
		Для Каждого ЭлементОтбора Из ПроверяемыйОтбор Цикл
			ПользовательскийОтбор.Элементы.Удалить(ЭлементОтбора);
		КонецЦикла;
		Если ЗначениеЗаполнено(НастройкиОтчета.СписокСтруктурныхЕдиниц) Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскийОтбор, "Организация", НастройкиОтчета.СписокСтруктурныхЕдиниц, ВидСравненияКомпоновкиДанных.ВСписке);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция НайтиВариантПоКлючу(КлючВарианта)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КлючВарианта", КлючВарианта);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВариантыОтчетов.Ссылка
	               |ИЗ
	               |	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	               |ГДЕ
	               |	ВариантыОтчетов.КлючВарианта = &КлючВарианта";
	
	Вариант = Запрос.Выполнить().Выбрать();

	Если Вариант.Следующий() Тогда
		
		ВариантОтчета = Вариант.Ссылка;
		Если ЗначениеЗаполнено(ВариантОтчета.ПредопределенныйВариант) Тогда
			Возврат ВариантОтчета.ПредопределенныйВариант.КлючВарианта;
		Иначе
			ДополнительныеСвойства = ВариантОтчета.Настройки.Получить().ДополнительныеСвойства;
			Если ДополнительныеСвойства.Свойство("КлючВарианта") Тогда
				Возврат ВариантОтчета.Настройки.Получить().ДополнительныеСвойства.КлючВарианта;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Возврат "";
	
КонецФункции 

Процедура ВывестиПодписи(ДокументРезультат) Экспорт
	
	ДополнительныеСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	Если ДополнительныеСвойства.Свойство("НастройкиОтчета") И ТипЗнч(ДополнительныеСвойства.НастройкиОтчета) = Тип("Структура") Тогда
		НастройкиОтчета = ДополнительныеСвойства.НастройкиОтчета;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если НастройкиОтчета.ВыводитьПодписи Тогда
		Отчеты.РегистрНалоговогоУчетаПоСчетамФактурам.ПриВыводеПодвала(НастройкиОтчета, ДокументРезультат);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

#КонецЕсли