////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	мПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");	
	
	Налогоплательщик         = Параметры.Налогоплательщик;
	НалоговыйКомитет         = Параметры.НалоговыйКомитет;
	мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	мПериодичность           = Параметры.мПериодичность;
	мСкопированаФорма        = Параметры.мСкопированаФорма;
	мСохраненныйДок          = Параметры.мСохраненныйДок;
	
	Если ЗначениеЗаполнено(Параметры.мВыбраннаяФорма) Тогда
		мПараметрыПрежнейФормы = Новый Структура("мВыбраннаяФорма, мСохраненныйДок, Налогоплательщик, НалоговыйКомитет, мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета",
												Параметры.мВыбраннаяФорма, Параметры.мСохраненныйДок, Параметры.Налогоплательщик, Параметры.НалоговыйКомитет, Параметры.мДатаНачалаПериодаОтчета, Параметры.мДатаКонцаПериодаОтчета);
	КонецЕсли;	
	ИсточникОтчета = СтрЗаменить(СтрЗаменить(Строка(ЭтаФорма.ИмяФормы), "Отчет.", ""), ".Форма.ОсновнаяФорма", "");
	
	ТаблицаФормОтчета = РеквизитФормыВЗначение("ОтчетОбъект").ТаблицаФормОтчета();
		
	ЗначениеВДанныеФормы(ТаблицаФормОтчета, мТаблицаФормОтчета);
	
	Элементы.ПолеВыбораПериодичность.СписокВыбора.Добавить(Перечисления.Периодичность.Квартал);
    		
	УчетПоВсемОрганизациям = РегламентированнаяОтчетностьПереопределяемый.ПолучитьПризнакУчетаПоВсемОрганизациям();
	ПеречислениеРазделыНалоговогоУчета = Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты;

	ОрганизацияПоУмолчанию = РегламентированнаяОтчетностьПереопределяемый.ПолучитьОрганизациюПоУмолчанию();
	
	ПеречислениеПериодичностьКвартал = Перечисления.Периодичность.Квартал;
		
	// Устанавливаем границы периода построения отчета как квартал
	// предшествующий текущему, нарастающим итогом с начала года.
	Если НЕ ЗначениеЗаполнено(мДатаНачалаПериодаОтчета) И НЕ ЗначениеЗаполнено(мДатаКонцаПериодаОтчета) Тогда
		
		мДатаКонцаПериодаОтчета  = КонецКвартала(ДобавитьМесяц(КонецКвартала(ТекущаяДатаСеанса()), -3));
		мДатаНачалаПериодаОтчета = НачалоКвартала(ДобавитьМесяц(КонецКвартала(ТекущаяДатаСеанса()), -3));

	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(мПериодичность) ИЛИ НЕ (мПериодичность = ПеречислениеПериодичностьКвартал) Тогда
		мПериодичность = ПеречислениеПериодичностьКвартал;
	КонецЕсли;

	ПолеВыбораПериодичность = мПериодичность;
	ПоказатьПериод(ЭтаФорма);
	
	Если НЕ ЗначениеЗаполнено(Налогоплательщик) 
	   И ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
		Налогоплательщик = ОрганизацияПоУмолчанию;
		
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			// получим действительного налогоплательщика
			Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Налогоплательщик,
																		Налогоплательщик,
																		ПеречислениеРазделыНалоговогоУчета);		    		
		КонецЕсли;
	КонецЕсли;	
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		
		СписокКомитетов = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.СформироватьСписокНалоговыхКомитетов(Налогоплательщик, ПеречислениеРазделыНалоговогоУчета);		
		
		НКНалогоплательщика = ПолучитьЗначениеРеквизита(Налогоплательщик, "НалоговыйКомитет");
		Если СписокКомитетов.Количество() = 1 Тогда
			НалоговыйКомитет = СписокКомитетов[0].Значение;		
		ИначеЕсли ЗначениеЗаполнено(НКНалогоплательщика) 
			И СписокКомитетов.НайтиПоЗначению(НКНалогоплательщика) <> Неопределено Тогда
			НалоговыйКомитет = НКНалогоплательщика;
		КонецЕсли;
		
		Элементы.НалоговыйКомитет.СписокВыбора.ЗагрузитьЗначения(СписокКомитетов.ВыгрузитьЗначения());
	Иначе
		ЗаполнитьСписокВыбораПоляНалоговыйКомитет(Налогоплательщик);
		УстановитьНалоговыйКомитетДляНалогоплательщика(Элементы.НалоговыйКомитет.СписокВыбора, Налогоплательщик);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	// здесь отключаем стандартную обработку ПередЗакрытием формы
	// для подавления выдачи запроса на сохранение формы.
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПолеВыбораПериодичностьПриИзменении(Элемент)
	
	Если ПолеВыбораПериодичность = ПеречислениеПериодичностьКвартал Тогда  // ежеквартально
		мДатаКонцаПериодаОтчета  = КонецКвартала(мДатаКонцаПериодаОтчета);
		мДатаНачалаПериодаОтчета = НачалоКвартала(мДатаКонцаПериодаОтчета);
	Иначе
		мДатаКонцаПериодаОтчета  = КонецМесяца(мДатаКонцаПериодаОтчета);
		мДатаНачалаПериодаОтчета = НачалоМесяца(мДатаКонцаПериодаОтчета);
	КонецЕсли;

	мПериодичность = ПолеВыбораПериодичность;
	
	ПоказатьПериод(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура НалогоплательщикПриИзменении(Элемент)
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Элементы.НалоговыйКомитет.СписокВыбора.Очистить();
		
		СписокКомитетов = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.СформироватьСписокНалоговыхКомитетов(Налогоплательщик, ПеречислениеРазделыНалоговогоУчета);
				
		Элементы.НалоговыйКомитет.СписокВыбора.ЗагрузитьЗначения(СписокКомитетов.ВыгрузитьЗначения());
		 	
		Если СписокКомитетов.НайтиПоЗначению(НалоговыйКомитет) = Неопределено
			ИЛИ НЕ ЗначениеЗаполнено(НалоговыйКомитет)  Тогда				
			НКНалогоплательщика = ПолучитьЗначениеРеквизита(Налогоплательщик, "НалоговыйКомитет");
			Если ЗначениеЗаполнено(НКНалогоплательщика) 
				И СписокКомитетов.НайтиПоЗначению(НКНалогоплательщика) <> Неопределено Тогда
				НалоговыйКомитет = НКНалогоплательщика;
			ИначеЕсли СписокКомитетов.Количество() = 1 Тогда
				НалоговыйКомитет = СписокКомитетов[0].Значение;
			Иначе
				НалоговыйКомитет = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
			КонецЕсли;
		КонецЕсли;
		Иначе
		  НалогоплательщикПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НалогоплательщикПриИзмененииНаСервере()
	
	ЗаполнитьСписокВыбораПоляНалоговыйКомитет(Налогоплательщик);
	УстановитьНалоговыйКомитетДляНалогоплательщика(Элементы.НалоговыйКомитет.СписокВыбора, Налогоплательщик);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура УстановитьПредыдущийПериод(Команда)
	
	ИзменитьПериод(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСледующийПериод(Команда)
	
	ИзменитьПериод(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтчета(Команда)
	
	Если мСкопированаФорма <> Неопределено Тогда
		// Документ был скопиран. 
		// Проверяем соответствие форм.
		Если мВыбраннаяФорма <> мСкопированаФорма Тогда
			
			ПоказатьПредупреждение(,НСтр("ru='Форма отчета изменилась, копирование невозможно!'"));
			Возврат;
						
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Налогоплательщик) Тогда
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиент.ОсновнаяФормаОрганизацияНеЗаполненаВывестиТекст());

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Налогоплательщик", "Объект", Истина);
				
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(мВыбраннаяФорма) Тогда
		ТекстСообщения = НСтр("ru='Форма отчета для указанного периода не определена.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);				
		Возврат;		
	КонецЕсли;
	
	Если мСкопированаФорма <> Неопределено Тогда
		// Документ был скопиран. 
		// Проверяем соответствие форм.
		Если мВыбраннаяФорма <> мСкопированаФорма Тогда
			
			ПоказатьПредупреждение(,(НСтр("ru='Форма отчета изменилась, копирование невозможно!'")));
			Возврат;
						
		КонецЕсли;
	КонецЕсли;
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Если Не ЗначениеЗаполнено(НалоговыйКомитет) Тогда
			Если СписокКомитетов.Количество() = 0 Тогда
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ни в регистре сведений ""Исчисление налогов структурных единиц"", ни в справочнике ""Организации"" не указан налоговый комитет для %1'"), Налогоплательщик);					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, ,"НалоговыйКомитет" , "Объект" , Истина); 					
				Возврат;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не выбран налоговый комитет из списка!'"), ,"НалоговыйКомитет" , "Объект" , Истина);					
				Возврат;
			КонецЕсли;				
		КонецЕсли;		
		мСписокСтруктурныхЕдиниц = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.СформироватьСписокСтруктурныхЕдиниц(ПеречислениеРазделыНалоговогоУчета,НалоговыйКомитет, Налогоплательщик);		
	Иначе
		НалоговыйКомитет = ПолучитьЗначениеРеквизита(Налогоплательщик, "НалоговыйКомитет");
		Если Не ЗначениеЗаполнено(НалоговыйКомитет) Тогда			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В справочнике ""Организации"" не указан налоговый комитет для %1'"), Налогоплательщик);					
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , , , Истина); 					
			Возврат;
		КонецЕсли;     		
		мСписокСтруктурныхЕдиниц.Очистить();
		мСписокСтруктурныхЕдиниц.Добавить(Налогоплательщик);
	КонецЕсли;    
		
	// Основная форма была открыта из формы периода.
	Если мПараметрыПрежнейФормы <> Неопределено Тогда
		ТекстИзменений = НСтр("ru = 'Изменены параметры формирования отчета: '");
		ЕстьИзменения = Ложь;
		НеобходимоСохранитьФорму = Ложь;
		НеобходимоОчиститьФорму = Ложь;
		Если мПараметрыПрежнейФормы.Налогоплательщик <> Налогоплательщик Тогда
			ТекстИзменений = ТекстИзменений + НСТР("ru = ' налогоплательщик'");
			ЕстьИзменения = Истина;
			НеобходимоОчиститьФорму = Истина;
		КонецЕсли;	
		
		Если мПараметрыПрежнейФормы.НалоговыйКомитет <> НалоговыйКомитет Тогда
			ТекстИзменений = ТекстИзменений + НСТР("ru = ' налоговый комитет'");
			ЕстьИзменения = Истина;
			НеобходимоОчиститьФорму = Истина;
		КонецЕсли;	
					
		Если мПараметрыПрежнейФормы.мДатаНачалаПериодаОтчета <> мДатаНачалаПериодаОтчета ИЛИ мПараметрыПрежнейФормы.мДатаКонцаПериодаОтчета <> мДатаКонцаПериодаОтчета Тогда
			ТекстИзменений = ТекстИзменений + ?(ЕстьИзменения, НСТР("ru=' и '"), "") + НСТР("ru = ' отчетный период '");
			ЕстьИзменения = Истина;
			НеобходимоОчиститьФорму = Истина;
		КонецЕсли;	
						
		Если мПараметрыПрежнейФормы.мВыбраннаяФорма <> мВыбраннаяФорма Тогда
			ЕстьИзменения = Истина;
			НеобходимоСохранитьФорму = Истина;
		КонецЕсли;
		
		Если ЕстьИзменения И НеобходимоСохранитьФорму Тогда			
			// форма открыта из формы отчета. При изменении формы периода требуется открыть новую форму
			ТекстВопроса = ТекстИзменений + НСТР("ru = '. Будет закрыта форма текущего отчета и открыта новая форма, соответствующая данному периоду. Продолжить?'");
			
			ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ВопросОНеобходимостиЗакрытияПредыдущейФормы",
			ЭтотОбъект);
			ПоказатьВопрос(ОбработчикОповещенияОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);		
			Возврат; // дальнейшие действия будут выполнены в обработке оповещения
			
		КонецЕсли;	
		
		Если ЕстьИзменения И НеобходимоОчиститьФорму Тогда
			// форма открыта из формы отчета. При изменении формы периода требуется открыть новую форму
			ТекстВопроса = ТекстИзменений + НСТР("ru = '. Данные в форме будут очищены! Продолжить?'");
			
			ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ВопросОНеобходимостиОчисткиПредыдущейФормы", ЭтотОбъект);
			ПоказатьВопрос(ОбработчикОповещенияОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);		
			Возврат; // дальнейшие действия будут выполнены в обработке оповещения
			
		КонецЕсли;	
	КонецЕсли;	
	
	ОткрытьВыбраннуюФорму();	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура управляет показом в форме периода построения отчета.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьПериод(Форма)

	Если  (Форма.мДатаКонцаПериодаОтчета < Форма.мДатаНачалаПериодаОтчета) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Неверно задан период'"));
		Возврат;
	КонецЕсли;

	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(Форма.мДатаНачалаПериодаОтчета), КонецДня(Форма.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Форма.НадписьПериодСоставленияОтчета = СтрПериодОтчета;

	КоличествоФорм = РегламентированнаяОтчетностьКлиентСервер.КоличествоФормСоответствующихВыбранномуПериоду(Форма);
	Если КоличествоФорм >= 1 Тогда

		Форма.Элементы.ОткрытьФормуОтчета.Доступность = Истина;

	Иначе		

		Форма.ОписаниеНормативДок = "";
		Форма.Элементы.ОткрытьФормуОтчета.Доступность = Ложь;
		
	КонецЕсли;

	РегламентированнаяОтчетностьКлиентСервер.ВыборФормыРегламентированногоОтчетаПоУмолчанию(Форма);

КонецПроцедуры

// Процедура устанавливает границы периода построения отчета.
//
// Параметры:
//  Шаг          - число, количество стандартных периодов, на которое необходимо
//                 сдвигать период построения отчета;
//
&НаКлиенте
Процедура ИзменитьПериод(Шаг)

	Если ПолеВыбораПериодичность = ПеречислениеПериодичностьКвартал Тогда  // ежеквартально
		мДатаКонцаПериодаОтчета  = КонецКвартала(ДобавитьМесяц(мДатаКонцаПериодаОтчета, Шаг*3));
		мДатаНачалаПериодаОтчета = НачалоКвартала(мДатаКонцаПериодаОтчета);
	Иначе
		мДатаКонцаПериодаОтчета  = КонецМесяца(ДобавитьМесяц(мДатаКонцаПериодаОтчета, Шаг)); 
		мДатаНачалаПериодаОтчета = НачалоМесяца(мДатаКонцаПериодаОтчета);
	КонецЕсли;

	ПоказатьПериод(ЭтаФорма);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ЗначениеРеквизита)
											
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ЗначениеРеквизита);										
											
КонецФункции

&НаКлиенте
Процедура ВопросОНеобходимостиЗакрытияПредыдущейФормы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ВладелецФормы.СохранитьДанные(); // экспортная процедура формы
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСТР("ru = 'Не удалось сохранить отчет.'"));
	КонецПопытки;

	ВладелецФормы.Закрыть();
	
	мСохраненныйДок = Неопределено;
	
	ОткрытьВыбраннуюФорму();
КонецПроцедуры

&НаКлиенте
Процедура ВопросОНеобходимостиОчисткиПредыдущейФормы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОсновнаяФорма = ВладелецФормы.СписокФормДерева.ПолучитьЭлементы()[0];
		КодОсновнойФормыВладельца 			   = ОсновнаяФорма.КодФормы;
		МногострочностьОсновнойФормыВладельца  = ОсновнаяФорма.Многострочность;	
		
		ВладелецФормы.ОчиститьРеглОтчетЗавершениеНаСервере(КодОсновнойФормыВладельца, МногострочностьОсновнойФормыВладельца, Истина);	

		//ВладелецФормы.Очистить(КодОсновнойФормыВладельца, Истина);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось очистить отчет.'"));
	КонецПопытки;
	
	ОткрытьВыбраннуюФорму(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыбраннуюФорму(ОбновитьПараметрыОткрытойФормы = Ложь)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          мСохраненныйДок);
	ПараметрыФормы.Вставить("мСкопированаФорма",        мСкопированаФорма);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           мПериодичность);
	ПараметрыФормы.Вставить("Налогоплательщик",         Налогоплательщик);	
	ПараметрыФормы.Вставить("НалоговыйКомитет",         НалоговыйКомитет);	
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	ПараметрыФормы.Вставить("мПериодичность",			мПериодичность);		
	
	Если ОбновитьПараметрыОткрытойФормы И ВладелецФормы <> Неопределено Тогда
		// при повторном открытии не выполняется создание формы на сервере
		// необходимо самостоятельно обновить параметры формы и зависимые данные
		ВладелецФормы.ОбновитьПараметрыФормыНаКлиенте(ПараметрыФормы);
	КонецЕсли;	
	
	Попытка
		Если ВладелецФормы  = Неопределено Тогда
			ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "ОсновнаяФорма", "") + мВыбраннаяФорма, ПараметрыФормы);
		Иначе
			ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "ОсновнаяФорма", "") + мВыбраннаяФорма, ПараметрыФормы,,ВладелецФормы.КлючУникальности);
		КонецЕсли;			
		Закрыть(); // закрываем основную форму
	Исключение
		ТекстСообщения = НСтр("ru='Форма отчета для указанного периода не определена.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);		
	КонецПопытки;  	

		  	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПоляНалогоплательщик()
	
	Элементы.Налогоплательщик.СписокВыбора.Очистить();
	
	НалогоплательщикСписокВыбора = ПроцедурыНалоговогоУчета.СформироватьСписокНалогоплательщиков(ПеречислениеРазделыНалоговогоУчета);	
	
	Для Каждого СтрокаНалогоплательщикСписокВыбора Из НалогоплательщикСписокВыбора Цикл
		
		Элементы.Налогоплательщик.СписокВыбора.Добавить(
			СтрокаНалогоплательщикСписокВыбора.Значение, 
			СтрокаНалогоплательщикСписокВыбора.Представление);	
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПоляНалоговыйКомитет(Знач Налогоплательщик)
	
	Элементы.НалоговыйКомитет.СписокВыбора.Очистить();
	
	НалоговыйКомитетСписокВыбора = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.СформироватьСписокНалоговыхКомитетов(
		Налогоплательщик, ПеречислениеРазделыНалоговогоУчета);	
	
	Для Каждого СтрокаНалоговыйКомитетСписокВыбора Из НалоговыйКомитетСписокВыбора Цикл
		
		Элементы.НалоговыйКомитет.СписокВыбора.Добавить(
			СтрокаНалоговыйКомитетСписокВыбора.Значение, 
			СтрокаНалоговыйКомитетСписокВыбора.Представление);	
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНалоговыйКомитетДляНалогоплательщика(Знач НалоговыйКомитетСписокВыбора, Знач Налогоплательщик)
	
	НалогоплательщикНалоговыйКомитет = Налогоплательщик.НалоговыйКомитет;
	
	Если НалоговыйКомитетСписокВыбора.НайтиПоЗначению(НалоговыйКомитет) = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(НалоговыйКомитет) Тогда				
		
		Если ЗначениеЗаполнено(Налогоплательщик.НалоговыйКомитет) 
			И НалоговыйКомитетСписокВыбора.НайтиПоЗначению(НалогоплательщикНалоговыйКомитет) <> Неопределено Тогда
			
			НалоговыйКомитет = НалогоплательщикНалоговыйКомитет;
			
		ИначеЕсли НалоговыйКомитетСписокВыбора.Количество() = 1 Тогда
			
			НалоговыйКомитет = НалоговыйКомитетСписокВыбора[0].Значение;
			
		Иначе
			
			НалоговыйКомитет = Справочники.Контрагенты.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры



