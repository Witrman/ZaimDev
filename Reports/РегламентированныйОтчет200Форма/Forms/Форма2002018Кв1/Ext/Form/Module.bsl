////////////////////////////////////////////////////////////////////////////////
// Описание формы
// Параметры фомры:
//  Налогоплательщик - СправочникСсылка.Организации - Налогоплательщик, представляющий отчет
//  мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета - Дата - отчетный период формирования отчета
//  
////////////////////////////////////////////////////////////////////////////////

/////////////////////
///////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	мВыбраннаяФорма = "Форма2002018Кв1";
	КодФормы 		= "Форма200";
			
	ТекущаяСтраница = 1;
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруФормРегОтчета(ЭтотОбъект);	
	
	СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями"); // вынести в переопределяемый модуль	
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов  = Новый СписокЗначений;	
	СтруктураРеквизитовФормы.мПечатныеформы 		 = Новый СписокЗначений;	
		
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	

	ЗаполнитьСведенияОбОтчетномПериоде();

	ДатаПодписи = ТекущаяДатаСеанса();
	 	
	СтруктураРеквизитовФормы.мПериодичность 				 = Перечисления.Периодичность.Квартал;
	СтруктураРеквизитовФормы.ВедетсяУчетОППВ 				 = (Метаданные.РегистрыНакопления.Найти("ОППВРасчетыСФондами") <> Неопределено);
	СтруктураРеквизитовФормы.мЕстьРеквизитыСП 				 = (Метаданные.Справочники.ПодразделенияОрганизаций.Реквизиты.НАйти("РНН") <> Неопределено);
	СтруктураРеквизитовФормы.мПризнакСистемыСотрудниковЗУП20 = (Метаданные.РегистрыСведений.РаботникиОрганизаций.Измерения.Найти("ФизЛицо") = Неопределено);
	СтруктураРеквизитовФормы.ПризнакМногострочности			 = Ложь;
	СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе = (Метаданные.РегистрыНакопления.ИПНСведенияОДоходах.Ресурсы.Найти("ОблагаемаяБаза") <> Неопределено);	
	СтруктураРеквизитовФормы.ОтметкаРезидентов 	 = "1";
	СтруктураРеквизитовФормы.ОтметкаНерезидентов = "2";
	
	ПризнакАлиментов = Параметры.мПризнакАлиментов;
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
			ЗаполнитьПараметры(ТекФорма.КодФормы);
		КонецЕсли;
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекФорма.КодФормы);
	КонецЦикла	
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если КодФормы = "Форма200_03" Тогда
		Форма200_03ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора);
	ИначеЕсли КодФормы = "Форма200_02" Тогда
		Форма200_02ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если Модифицированность Тогда 
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);	
		ТекстВопроса = НСТР("ru = 'Сохранить данные отчета?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(
		мСписокСтруктурныхЕдиниц, ЭтаФорма, СтандартнаяОбработка, "ПоНалогоплательщику", Налогоплательщик,, ПредопределенноеЗначение("Перечисление.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты"), Истина);
	         
КонецПроцедуры

&НаКлиенте
Процедура ДатаПодписиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДатаПодписи) Тогда
		ДатаПодписиПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРасчетовПриИзменении(Элемент)
	
	СписокРасчетовПриИзмененииНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РазделыОтчета

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)	
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.КодФормы = Элемент.ТекущиеДанные.КодФормы Тогда
		ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);
		Возврат;
	КонецЕсли;	
	
	РазделыОтчетаПриАктивизацииСтрокиНаСервере(Элемент.ТекущиеДанные.КодФормы, Элемент.ТекущиеДанные.Многострочность);	
		
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Для Каждого СтраницаФорм из Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы Цикл
		Элементы[СтраницаФорм.Имя].Видимость = СтраницаФорм.Имя = ЭтаФорма.КодФормы;	
	КонецЦикла;
	
	ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);	
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ГЛАВНОЙ ФОРМЫ Форма200

&НаКлиенте
Процедура Форма200ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Форма200ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Область);
	
КонецПроцедуры

&НаКлиенте
Процедура Форма200ПолеТабличногоДокументаСтраница2ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Форма200ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Область);
	
КонецПроцедуры

&НаКлиенте
Процедура Форма200ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Форма200ПолеТабличногоДокументаВыбор(Область);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДОП ФОРМЫ Форма200_01   - ОБЫЧНАЯ

&НаКлиенте
Процедура Форма200_01ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Форма200_01ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Область);
	
КонецПроцедуры

&НаКлиенте
Процедура Форма200_01ПолеТабличногоДокументаСтраница2ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Форма200_01ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Область);
	
КонецПроцедуры

&НаКлиенте
Процедура Форма200_01ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Форма200ПолеТабличногоДокументаВыбор(Область);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма200_02ПолеТабличногоДокументаСтраница1

&НаКлиенте
Процедура Форма200_02ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;	
	
	Если Найти(Ячейка, "Ф200_02ФИОРезидента__")> 0 ИЛИ Найти(Ячейка, "Ф200_02РННРезидента__")> 0
	 ИЛИ Найти(Ячейка, "Ф200_02ИИНРезидента__")> 0 ИЛИ Найти(Ячейка, "Ф200_02КодСтраныРезидента__")> 0 Тогда
		 НачЗначение = Область.Значение;
		 
		 ЗначениеРасшифровки = Область.Расшифровка;
		 
		 //может быть не заполнена расшировка ячейки при восстановления данных старых форм
		 Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			 ИмяЯчейкиРасшифровки = "Ф200_02ФИОРезидента" + Сред(Ячейка,Найти(Ячейка,"__"));
			 ОбластьРасширофвки = Форма200_02ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяЯчейкиРасшифровки);
			 Если ОбластьРасширофвки <> Неопределено Тогда 
				 ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;
				 Область.Расшифровка = ЗначениеРасшифровки;
				 ПередатьЗначениеВСтруктуруНаСервере(Ячейка,НачЗначение,,,ЗначениеРасшифровки);
			 КонецЕсли;				 
		 КонецЕсли;

		 Если ЗначениеЗаполнено(НачЗначение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			 Возврат;
		 КонецЕсли; 	 
		 
		 СписокВыбора = Новый СписокЗначений;
		 СписокВыбора.Добавить("Справочник.Контрагенты.Форма.ФормаВыбора","Контрагенты");
		 СписокВыбора.Добавить("Справочник.ФизическиеЛица.Форма.ФормаВыбора","Физические лица");
		 
		 ОповещениеВыбора = Новый ОписаниеОповещения("ПослеВыбораЭлемента", ЭтаФорма); 		 
		 СписокВыбора.ПоказатьВыборЭлемента(ОповещениеВыбора, "Выберите расшифровку", СписокВыбора[0]);				 
	Иначе
		 Возврат;
	КонецЕсли; 	 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма200_02ПолеТабличногоДокументаСтраница2

&НаКлиенте
Процедура Форма200_02ПолеТабличногоДокументаСтраница2Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;	
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница2");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	
	Если (Найти(Ячейка, "Ф200_02ВидДокРезидента__") > 0) Тогда
		
		НачЗначение = Область.Значение;
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
		ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
		ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КодыВидовДокументов");
		ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
		
		ПараметрыФормы.Вставить("ИмяОтчета",          "РегламентированныйОтчет200Форма");
	
		ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(НачЗначение), Неопределено, СокрЛП(НачЗначение)));
		
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		
	ИначеЕсли (Найти(Ячейка, "Ф200_02ДатаДокРезидента__") > 0) Тогда
		НачЗначение = Область.Значение;
			
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводДаты(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите дату выдачи документа'"), ЧастиДаты.Дата) ; 
				
	ИначеЕсли (Найти(Ячейка, "Ф200_02НомерДокРезидента__") > 0) Тогда
		НачЗначение = Область.Значение;	
		
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите номер договора'"),100) ; 	
		
	КонецЕсли;
	
	Если Найти(Ячейка, "Ф200_02НомерРегистрацииРезидента__")> 0  Тогда
		
		НачЗначение = Область.Значение;		
		ЗначениеРасшифровки = Область.Расшифровка;
		
		//может быть не заполнена расшировка ячейки при восстановления данных старых форм
		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			ИмяЯчейкиРасшифровки = "Ф200_02ФИОРезидента" + Сред(Ячейка,Найти(Ячейка,"__"));
			ОбластьРасширофвки = Форма200_02ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяЯчейкиРасшифровки);
			Если ОбластьРасширофвки <> Неопределено Тогда 
				ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;
				Область.Расшифровка = ЗначениеРасшифровки;
				ПередатьЗначениеВСтруктуруНаСервере(Ячейка,НачЗначение,,,ЗначениеРасшифровки);
			КонецЕсли;				 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НачЗначение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			Возврат;
		КонецЕсли; 	
		
		СтандартнаяОбработка = Ложь; 
		
		 СписокВыбора = Новый СписокЗначений;
		 СписокВыбора.Добавить("Справочник.Контрагенты.Форма.ФормаВыбора","Контрагенты");
		 СписокВыбора.Добавить("Справочник.ФизическиеЛица.Форма.ФормаВыбора","Физические лица");
		 
		 ОповещениеВыбора = Новый ОписаниеОповещения("ПослеВыбораЭлемента", ЭтаФорма); 		 
		 СписокВыбора.ПоказатьВыборЭлемента(ОповещениеВыбора, "Выберите расшифровку", СписокВыбора[0]);			
	КонецЕсли; 	 
	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма200_02ПолеТабличногоДокументаСтраница3

&НаКлиенте
Процедура Форма200_02ПолеТабличногоДокументаСтраница3Выбор(Элемент, Область, СтандартнаяОбработка)
	 	
	Ячейка = Область.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница3");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		

	
	Если Найти(Ячейка, "Ф200_02КодДохРезидента__")> 0 Тогда
			
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
	ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
	ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КодыВидовДоходов");
	ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
	ПараметрыФормы.Вставить("ИмяОтчета",          "РегламентированныйОтчет200Форма");

	ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(Область.Значение), Неопределено, СокрЛП(Область.Значение)));

	ОткрытьФорму("ОбщаяФорма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
	
	
	ИначеЕсли (Найти(Ячейка, "Ф200_02ВидДоговора__") > 0)  Тогда
		НачЗначение = Элемент.ТекущаяОбласть.Значение;
		
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите вид договора'"),2) ; 			
			
	ИначеЕсли (Найти(Ячейка, "Ф200_02_НаименованиеДоговора__") > 0)  Тогда
		НачЗначение = Элемент.ТекущаяОбласть.Значение;
		
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите наименование договора'"), 100) ; 			


	ИначеЕсли (Найти(Ячейка, "Ф200_02_КодСтраныДоговора__") > 0)  Тогда
		НачЗначение = Элемент.ТекущаяОбласть.Значение;
		СтандартнаяОбработка = Ложь;

		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите код страны, с которой заключен договор'"), 100) ;
			 			 
	Иначе
		 Возврат;
	КонецЕсли;                	
	 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма200_02ПолеТабличногоДокументаСтраница4

&НаКлиенте
Процедура Форма200_02ПолеТабличногоДокументаСтраница4Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;

	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница4");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
		
	Если (Найти(Ячейка, "Ф200_02СтавкаНалога") > 0) Тогда
		НачЗначение = Область.Значение;
				
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите ставку налога'"), 4, 1) ;
				
	ИначеЕсли 	(Найти(Ячейка, "Ф200_02_M__") > 0) 
	 		ИЛИ (Найти(Ячейка, "Ф200_02_N__") > 0)
	 		ИЛИ (Найти(Ячейка, "Ф200_02_O__") > 0) Тогда
			
		НачЗначение = Область.Значение;
		
		Если (Найти(Ячейка, "Ф200_02_M__") > 0) Тогда
			
			ПараметрыСтраницы.Вставить("Расчет", Истина);		
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму начисленных доходов'"), 12,0) ;
						
		ИначеЕсли (Найти(Ячейка, "Ф200_02_N__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 			
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму налоговых вычетов'"), 12,0) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф200_02_O__") > 0) Тогда
			
			ПараметрыСтраницы.Вставить("Расчет", Истина);					
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму ОПВ'"), 12,0) ;

		КонецЕсли;   		
		
		
	Иначе
		 Возврат;
	КонецЕсли; 	 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма200_02ПолеТабличногоДокументаСтраница5

&НаКлиенте
Процедура Форма200_02ПолеТабличногоДокументаСтраница5Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница5");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		

	Если (Найти(Ячейка, "Ф200_02_P__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_02_Q__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_02_R__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_02_S__") > 0) Тогда
		НачЗначение = Область.Значение;
		
		Если (Найти(Ячейка, "Ф200_02_P__") > 0) Тогда	
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму обязательных профессиональных пенсионных взносов'"), 12,0) ;					
			
		ИначеЕсли (Найти(Ячейка, "Ф200_02_Q__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму добровольных пенсионных взносов'"), 12,0) ;
									
		ИначеЕсли (Найти(Ячейка, "Ф200_02_R__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму страховых премий'"), 12,0) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф200_02_S__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму'"), 12,0) ;
		 			
		КонецЕсли;   		
			
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма200_02ПолеТабличногоДокументаСтраница6

&НаКлиенте
Процедура Форма200_02ПолеТабличногоДокументаСтраница6Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница6");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	
	Если (Найти(Ячейка, "Ф200_02_T__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_02_U__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_02_V__") > 0) Тогда
		НачЗначение = Область.Значение;
		Если (Найти(Ячейка, "Ф200_02_T__") > 0) Тогда 
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму оплаты мед.услуг'"), 12,0) ;
		
		ИначеЕсли (Найти(Ячейка, "Ф200_02_U__") > 0) Тогда			
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму доходов, не подлежащих налогообложению'"), 12,0) ;
				
		ИначеЕсли (Найти(Ячейка, "Ф200_02_V__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму ИПН'"), 12,0) ;
				
		КонецЕсли;   		
				
	КонецЕсли;    	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма200_02ПолеТабличногоДокументаСтраница7

&НаКлиенте
Процедура Форма200_02ПолеТабличногоДокументаСтраница7Выбор(Элемент, Область, СтандартнаяОбработка)
	  
	Ячейка = Область.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница7");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		

	Если (Найти(Ячейка, "Ф200_02_W__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_02_X__") > 0) Тогда
		НачЗначение = Область.Значение;
				
		Если (Найти(Ячейка, "Ф200_02_W__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму выплаченных доходов'"), 12,0) ;
								
		ИначеЕсли (Найти(Ячейка, "Ф200_02_X__") > 0) Тогда
			
			ПараметрыСтраницы.Вставить("Расчет", Истина);			

			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму выплат, не облагаемых СН, за исключением ОПВ'"), 12,0) ;
						
		КонецЕсли;   		
		
		
	КонецЕсли;
	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма200_02ПолеТабличногоДокументаСтраница8

&НаКлиенте
Процедура Форма200_02ПолеТабличногоДокументаСтраница8Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница8");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	
	Если (Найти(Ячейка, "Ф200_02_Z__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_02_AA__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_02_AB__") > 0) 
 	 ИЛИ (Найти(Ячейка, "Ф200_02_AC__") > 0) Тогда
	 
	 	НачЗначение = Область.Значение;
		
		Если (Найти(Ячейка, "Ф200_02_Z__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму СН'"), 12,0) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф200_02_AA__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму расходов работодателя'"), 12,0) ; 			 

		ИначеЕсли (Найти(Ячейка, "Ф200_02_AB__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму СО'"), 12,0) ;			 
			
		ИначеЕсли (Найти(Ячейка, "Ф200_02_AC__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму взносов и отчислений ОСМС'"), 12,0) ;			 
					
		КонецЕсли;   		
		
		
	КонецЕсли;

КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДОП ФОРМЫ Форма200_03   - МНОГОСТРОЧНАЯ

&НаКлиенте
Процедура Форма200_03ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;
	
	НачальноеИмяЯчейки = Лев(Ячейка,Найти(Ячейка, "__")-1);

	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница1");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);	
	
	
	Если (Найти(НачальноеИмяЯчейки, "КНО") > 0) Или (Найти(НачальноеИмяЯчейки, "Ф200_03_") > 0) Тогда
		
		НачЗначение = Область.Значение;
		СтандартнаяОбработка = Ложь;

		Если НачальноеИмяЯчейки = "КНОНалогоплательщика" Тогда
			ПараметрыСтраницы.Вставить("ПроверятьЦифрыВСтроке", Истина);					
			НачЗначение = Область.Значение;
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите код органа органа государственных доходов налогоплательщика'"), 4) ;
			
		ИначеЕсли НачальноеИмяЯчейки = "КНОФилиала" Тогда
			
			
			ПараметрыСтраницы.Вставить("ПроверятьЦифрыВСтроке", Истина);		
			
			НачЗначение = Область.Значение;
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите код органа органа государственных доходов филиала'"), 4) ;
			
		ИначеЕсли НачальноеИмяЯчейки = "Ф200_03_001_1" ИЛИ НачальноеИмяЯчейки = "Ф200_03_001_2" ИЛИ НачальноеИмяЯчейки = "Ф200_03_001_3" Тогда
			
			НачЗначение = Область.Значение;
			ПараметрыСтраницы.Вставить("Расчет", Истина);				
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму ИПН, подлежащего перечислению'"), 12,0) ;

		ИначеЕсли НачальноеИмяЯчейки = "Ф200_03_002_1" ИЛИ НачальноеИмяЯчейки = "Ф200_03_002_2" ИЛИ НачальноеИмяЯчейки = "Ф200_03_002_3" Тогда
			
			НачЗначение = Область.Значение;
			ПараметрыСтраницы.Вставить("Расчет", Истина);				
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму ОПВ, подлежащих перечислению'"), 12,0) ;
				
		ИначеЕсли НачальноеИмяЯчейки = "Ф200_03_003_1" ИЛИ НачальноеИмяЯчейки = "Ф200_03_003_2" ИЛИ НачальноеИмяЯчейки = "Ф200_03_003_3" Тогда
			
			
			НачЗначение = Область.Значение;
			ПараметрыСтраницы.Вставить("Расчет", Истина);				
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму ОППВ, подлежащих перечислению'"), 12,0) ;
							
		КонецЕсли;	
		
	КонецЕсли;	
	
	ОбластьРасшифровки = Область;
		 

	Если (Найти(Ячейка, "ИИН_БИНФилиала__")> 0) 
	 ИЛИ (Найти(Ячейка, "ФилиалНазв__")> 0) Тогда	
		НачЗначение = Область.Значение;
		ЗначениеРасшифровки = Область.Расшифровка;
		
		//может быть не заполнена расшировка ячейки при восстановления данных старых форм
		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			ИмяЯчейкиРасшифровки = "ФилиалНазв__" + Сред(Ячейка,Найти(Ячейка,"__"));
			ОбластьРасширофвки = Форма200_03ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяЯчейкиРасшифровки);
			Если ОбластьРасширофвки <> Неопределено Тогда 
				ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;
				Область.Расшифровка = ЗначениеРасшифровки;
				ПередатьЗначениеВСтруктуруНаСервере(Ячейка,НачЗначение,,,ЗначениеРасшифровки);
			КонецЕсли;				 
		КонецЕсли;

		Если ЗначениеЗаполнено(НачЗначение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			Возврат;
		КонецЕсли;
		 
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("Справочник.Организации.Форма.ФормаВыбора","Организации");
		СписокВыбора.Добавить("Справочник.ПодразделенияОрганизаций.Форма.ФормаВыбора","Подразделения организаций");
		 
		ОповещениеВыбора = Новый ОписаниеОповещения("ПослеВыбораЭлемента", ЭтаФорма); 		 
		СписокВыбора.ПоказатьВыборЭлемента(ОповещениеВыбора, "Выберите расшифровку", СписокВыбора[0]);		
	КонецЕсли;	
		 
КонецПроцедуры

&НаКлиенте
Процедура Форма200_03ПолеТабличногоДокументаСтраница2Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя; // начало имени ячейки  
	НачальноеИмяЯчейки = Лев(Ячейка, 13);
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница2");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		

	Если (Найти(НачальноеИмяЯчейки, "Ф200_03_") > 0) Или (Найти(НачальноеИмяЯчейки, "КодНалогового") > 0) Тогда
		
		НачЗначение = Область.Значение;
		СтандартнаяОбработка = Ложь;
			
		Если НачальноеИмяЯчейки = "Ф200_03_004_1" ИЛИ НачальноеИмяЯчейки = "Ф200_03_004_2" ИЛИ НачальноеИмяЯчейки = "Ф200_03_004_3" Тогда
			
			ПараметрыСтраницы.Вставить("Расчет", Истина);				
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму СН'"), 12,0) ;   
				
		ИначеЕсли НачальноеИмяЯчейки = "Ф200_03_005_1" ИЛИ НачальноеИмяЯчейки = "Ф200_03_005_2" ИЛИ НачальноеИмяЯчейки = "Ф200_03_005_3" Тогда			
			       			
			ПараметрыСтраницы.Вставить("Расчет", Истина);				
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму СО'"), 12,0) ;   
			
		ИначеЕсли НачальноеИмяЯчейки = "Ф200_03_006_1" ИЛИ НачальноеИмяЯчейки = "Ф200_03_006_2" ИЛИ НачальноеИмяЯчейки = "Ф200_03_006_3" Тогда			
			       			
			ПараметрыСтраницы.Вставить("Расчет", Истина);				
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму отчислений на обязательное социальное медицинское страхование'"), 12,0) ;   
				
		ИначеЕсли НачальноеИмяЯчейки = "Ф200_03_007_1" ИЛИ НачальноеИмяЯчейки = "Ф200_03_007_2" ИЛИ НачальноеИмяЯчейки = "Ф200_03_007_3" Тогда			
			       			
			ПараметрыСтраницы.Вставить("Расчет", Истина);				
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму  взносов на обязательное социальное медицинское страхование'"), 12,0) ;   
				
		ИначеЕсли Найти(Ячейка,"КодНалоговогоОрганаИПН")<>0 ИЛИ Найти(Ячейка,"КодНалоговогоОрганаОПВиСО") <>0 Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите код органа органа государственных доходов'"), 4) 
			
		КонецЕсли;
			
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыФормы.Вставить("Налогоплательщик",         Налогоплательщик);	
	ПараметрыФормы.Вставить("НалоговыйКомитет",         СтруктураРеквизитовФормы.НалоговыйКомитет);	
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, мВыбраннаяФорма, "") + "ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);	

КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Перезаполнить = Истина; // Для выполнения запроса на пересчет данных к пользователю
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения =  РегламентированнаяОтчетностьКлиент.ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Перезаполнить Тогда		
		Если СтрокаФормы.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстВопроса = "Перезаполнить данные формы и ее дополнительных форм?";
		Иначе
			ТекстВопроса = "Перезаполнить данные формы?";
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);
		Оповещение.ДополнительныеПараметры.Вставить("Перезаполнить", Перезаполнить);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);		

	КонецЕсли;		

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВXML(Команда)
	
	ГодФормирования = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	
	Если 2018 < ГодФормирования Тогда 
		ТекстСообщения = НСтр("ru = 'Отчет не предназначен для выгрузки в XML в период формирования " + Формат(ГодФормирования,"ЧГ=0") + " г." + Символы.ПС + 
						"Пожалуйста, обновите комплект отчетов.'");
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);		
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект);	
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
   
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохраненияФайла.ПолноеИмяФайла = КодФормы + " " + СтруктураРеквизитовФормы.мГод + "г" + ".xml";
		ДиалогСохраненияФайла.Фильтр = РегламентированнаяОтчетностьКлиентСервер.ФильтрДиалоговВыбораИСохраненияРегламентированногоОтчета();	
		ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
		ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите файл'");		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
		ДиалогСохраненияФайла.Показать(ОписаниеОповещения);
	Иначе   
		НачатьПолучениеФайлаССервера(ВыгрузитьВXMLНаСервере(), КодФормы + ".xml"); 
	КонецЕсли;
	   
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресВременногоХранилища = ВыгрузитьВXMLНаСервере();
		
	ПолноеИмяФайла = Результат[0];
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, АдресВременногоХранилища));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяФайла",ПолноеИмяФайла); 
	Обработчик = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеЗавершение", ЭтотОбъект,ДополнительныеПараметры);
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
	ПараметрыСохранения.Интерактивно = Ложь;
	ФайловаяСистемаКлиент.СохранитьФайлы(Обработчик, ПолучаемыеФайлы, ПараметрыСохранения); 
	
	        
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ТекстЗаголовка = НСтр("ru = 'Данные успешно выгружены в файл'");
	
	СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДополнительныеПараметры.ИмяФайла);
	
	РабочийКаталог = СтруктураФайла.Путь;

	#Если НЕ ВебКлиент Тогда
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка, "file:///" + СтрЗаменить(СокрЛП(РабочийКаталог), "\", "/"),
		РабочийКаталог);
	#Иначе
		Если НЕ ЗначениеЗаполнено(ПолученныеФайлы) Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка,,
		РабочийКаталог);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьТекущееПриложение(Команда)
	
	СтруктураРеквизитовФормы.ШагФорм  = ТекущаяСтраница - 1;
	СтруктураРеквизитовФормы.ВсегоСтр = ТекущаяСтраница - 1;
	
	СформироватьПризнакиФормыИПередатьИтогиНаСервере();
	
	ДополнительныеПараметры =  Новый Структура;
	ДополнительныеПараметры.Вставить("ВыгружатьВсеПриложения", Ложь);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПриложенияПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект,ДополнительныеПараметры);	
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПриложенияПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохраненияФайла.ПолноеИмяФайла = "Приложение 200.03 №" + ТекущаяСтраница + ".xml";
		ДиалогСохраненияФайла.Фильтр = РегламентированнаяОтчетностьКлиентСервер.ФильтрДиалоговВыбораИСохраненияРегламентированногоОтчета();	
		ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
		ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите файл'");	
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПриложениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДиалогСохраненияФайла.Показать(ОписаниеОповещения);		
		
	Иначе  	
	
		ПолноеИмяФайла = "Приложение 200.03 №" + ТекущаяСтраница + ".xml";   
		
		МассивАдресовВоВременномХранилище = Новый Массив();
		МассивИменФайлов				  = Новый Массив(); 		
		ПолучитьДанныеДляВыгрузкиПриложения(ПолноеИмяФайла,МассивАдресовВоВременномХранилище,МассивИменФайлов,ДополнительныеПараметры.ВыгружатьВсеПриложения);
		
		КоличЭлементов = МассивАдресовВоВременномХранилище.Количество()-1;   
			
		Для Индекс = 0 По КоличЭлементов Цикл
			
			Попытка
				
				НачатьПолучениеФайлаССервера(МассивАдресовВоВременномХранилище[Индекс], ПолноеИмяФайла);
				
			Исключение
				ШаблонСообщения = НСтр("ru = 'При записи файла возникла ошибка
										|%1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ОписаниеОшибки = ИнформацияОбОшибке();
				
			КонецПопытки;
			
		КонецЦикла;	
        
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПриложениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;    
	
	мВыбраннаяФорма = "Форма2002021Пр3"; 			
	ПолноеИмяФайла = Результат[0];     
	
	МассивАдресовВоВременномХранилище = Новый Массив();
	МассивИменФайлов				  = Новый Массив(); 
	
	ПолучитьДанныеДляВыгрузкиПриложения(ПолноеИмяФайла,МассивАдресовВоВременномХранилище,МассивИменФайлов,ДополнительныеПараметры.ВыгружатьВсеПриложения);
	
	КоличЭлементов = МассивАдресовВоВременномХранилище.Количество()-1;   
	ПолучаемыеФайлы = Новый Массив;        
	
	Для Индекс = 0 По КоличЭлементов Цикл
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(МассивИменФайлов[Индекс], МассивАдресовВоВременномХранилище[Индекс] );
		ПолучаемыеФайлы.Добавить(ОписаниеФайла);
	КонецЦикла;	
  	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяФайла",ПолноеИмяФайла); 
	Обработчик = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеЗавершение", ЭтотОбъект,ДополнительныеПараметры);
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
	ПараметрыСохранения.Интерактивно = Ложь;
	ФайловаяСистемаКлиент.СохранитьФайлы(Обработчик, ПолучаемыеФайлы, ПараметрыСохранения); 
	
	СтруктураРеквизитовФормы.ВсегоСтр = 0;
	СтруктураРеквизитовФормы.ШагФорм  = 0; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеДляВыгрузкиПриложения(ИмяФайла, МассивАдресовВоВременномХранилище,МассивИменФайлов, ВыгружатьВсеПриложения)
	
	мВыбраннаяФорма = "Форма2002021Пр3"; 			
	ПолноеИмяФайла = ИмяФайла;     
	
	АдресФайлаВоВременномХранилище = ВыгрузитьОтчетВXMLДляСОНОПриложение();
	МассивАдресовВоВременномХранилище.Добавить(АдресФайлаВоВременномХранилище);
	
	МассивИменФайлов.Добавить(ИмяФайла); 
	
	// СОНО	
	Пока (ВыгружатьВсеПриложения И СтруктураРеквизитовФормы.ШагФорм <= СтруктураРеквизитовФормы.ВсегоСтр) Цикл
		РасширениеФайла = Прав(ИмяФайла,4);
		НазваниеФайла 	= Лев(ИмяФайла, СтрДлина(ИмяФайла)-5);
		МассивИменФайлов.Добавить(НазваниеФайла+(СтруктураРеквизитовФормы.ШагФорм+1)+РасширениеФайла);
		
		АдресФайлаВоВременномХранилище = ВыгрузитьОтчетВXMLДляСОНОПриложение();
		МассивАдресовВоВременномХранилище.Добавить(АдресФайлаВоВременномХранилище);
		
		СтруктураРеквизитовФормы.ШагФорм = СтруктураРеквизитовФормы.ШагФорм + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсеПриложения(Команда)
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	Если СтрокаФормы = Неопределено Тогда
		ВсегоСтраниц = 1;
	Иначе
		ВсегоСтраниц = СтрокаФормы.ВсегоСтраниц;
	КонецЕсли;

	СтруктураРеквизитовФормы.ШагФорм  = 0;
	СтруктураРеквизитовФормы.ВсегоСтр = ВсегоСтраниц-1;

	СформироватьПризнакиФормыИПередатьИтогиНаСервере();
	
	ДополнительныеПараметры =  Новый Структура;
	ДополнительныеПараметры.Вставить("ВыгружатьВсеПриложения", Истина);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПриложенияПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект,ДополнительныеПараметры);	
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);  


КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФорму(Команда)
	
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму");
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФормуИПриложения(Команда)
	
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФормуИПриложения");
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровка(Команда)
	
	Попытка
		ИмяЯчейки = ТекущийЭлемент.ТекущаяОбласть.Имя;
	Исключение
		ПоказатьПредупреждение(,НСтр("ru = 'Активизируйте нужную ячейку отчета для расшифровки.'"));
		Возврат;
	КонецПопытки;
	
	ЦветРасшифровки = Форма200ПолеТабличногоДокументаСтраница1.Области.s_200_00_001_1.ЦветФона;
	
	НалогоплательщикЮрФизЛицо = ПолучитьЗначениеРеквизита(Налогоплательщик, "ЮрФизЛицо");
	
	//Если Элементы.ГруппаСтраницыОтчета.ТекущаяСтраница = Элементы.Форма200
	Если КодФормы = "Форма200"
		И ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда
		
		Если НалогоплательщикЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда 
			// Строка 200.00.005 предназначена для ЮЛ	
			// Сумма социального налога, подлежащего уплате в бюджет  с применением ставок, установленных п.1,3 ст. 358 Налогового кодекса
			НомерЯчейки = Число(Лев(Сред(ИмяЯчейки,10),3));			
			Если НомерЯчейки = 5 Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки поддерживается только для юридических лиц."));
				Возврат;
			КонецЕсли;                     			
			
			Форма200Расшифровка(ИмяЯчейки);			
			
		ИначеЕсли НалогоплательщикЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") Тогда  
			НомерЯчейки = Число(Лев(Сред(ИмяЯчейки,10),3));
			// 200.00.004 Сумма обязательных пенсионных взносов, подлежащих перечислению  в свою пользу
			// 200.00.007 Сумма социального налога, подлежащего уплате в бюджет, с применением ставок, установленных п.2 ст. 358 Налогового кодекса																															
			// 200.00.009 Сумма социальных отчислений в свою пользу
			Если НомерЯчейки = 4 Или  НомерЯчейки = 7 Или  НомерЯчейки = 9 Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки поддерживается только для индивидуального предпринимателя.'"));
				Возврат;
			КонецЕсли;                     			
			
			Форма200Расшифровка(ИмяЯчейки);
		КонецЕсли;
		
	ИначеЕсли КодФормы = "Форма200_01"//Элементы.ГруппаСтраницыОтчета.ТекущаяСтраница = Элементы.Форма200_01 
		И ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда
		
		НомерЯчейки = Число(Лев(Сред(ИмяЯчейки,10),3));		
		
		Если НалогоплательщикЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") Тогда  					
			// строки предназначены для физ. лица, поэтому их расшифровка для юр. лица не поддерживается
			Если НомерЯчейки = 9 Или  НомерЯчейки = 15 Тогда				
				ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки поддерживается только для индивидуального предпринимателя.'"));
				Возврат;
			КонецЕсли;  			
		Иначе
			// s_200_01_013 Доходы работника, облагаемые социальным налогом. Заполяется только юр. лицами 
			Если НомерЯчейки = 13 Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки поддерживается только для юридических лиц.'"));
				Возврат;
			КонецЕсли;                     			
		КонецЕсли;		
		    	
		Форма200_01Расшифровка(ИмяЯчейки);    
	ИначеЕсли КодФормы = "Форма200_02" 
		И ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда
		
		Форма200_02Расшифровка(ИмяЯчейки);
		


	ИначеЕсли КодФормы = "Форма200_03"//Элементы.ГруппаСтраницыОтчета.ТекущаяСтраница = Элементы.Форма200_03 
		И ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда
		
		Форма200_03Расшифровка(ИмяЯчейки);
		
	Иначе	
		
		ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки не поддерживается." + Символы.ПС + "Расшифровку содержат ячейки формы, выделенные голубым цветом.'"));
		
	КонецЕсли;	

	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаОбщая(Команда)
	
	Если КодФормы = "Форма200_02" Тогда
		Форма200_02РасшифровкаОбщая();		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ДобавитьСтрокуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	УдалитьСтрокуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущаяСтр(Команда)
	
	ПредыдущаяСтрНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СледующаяСтр(Команда)
	
	СледующаяСтрНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаПерейти(Команда)
	
	ВыбСтраница = 1;
	
	ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаСтраницы", ЭтаФорма); 
	ПоказатьВводЧисла(ОповещениеВводаЗначений,ВыбСтраница, "Введите номер страницы",5,0);

	
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	ОткрытьФормуНастройкиСтраниц()
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьНаСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура СохранитьДанные() Экспорт
	СохранитьНаСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыФормыНаКлиенте(Параметры) Экспорт
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	ЗаполнитьСведенияОбОтчетномПериоде();
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);		
	КонецЦикла	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормы(ТекФорма, Параметры)
	
	ЗаполнитьЗначенияСвойств(ТекФорма.СтруктураРеквизитовФормы, Параметры);
		
	ТекФорма.Налогоплательщик        						 = Параметры.Налогоплательщик;		
	ТекФорма.мСписокСтруктурныхЕдиниц						 = Параметры.мСписокСтруктурныхЕдиниц;
	ТекФорма.ПредставлениеСпискаСтруктурныхЕдиниц			 = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ТекФорма.мСписокСтруктурныхЕдиниц);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеглОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Форма = ДополнительныеПараметры.Форма;	
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", Форма.КодФормы));
		Вложенность = ДополнительныеПараметры.ОчищатьПриложения;	
		
		ОчиститьРеглОтчетЗавершениеНаСервере(СтрокаФормы.КодФормы, СтрокаФормы.Многострочность, Вложенность)	
	КонецЕсли;		
КонецПроцедуры 	

&НаСервере
Процедура ОчиститьРеглОтчетЗавершениеНаСервере(КодФормы, ПризнакМногострочности, Вложенность) Экспорт		
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, ПризнакМногострочности, Вложенность);
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;	
	//ФормироватьСтруктуруСтраницОтчета();
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			
		КонецЕсли;
	
		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	МассивРеквизитовФормы = ЭтотОбъект.ПолучитьРеквизиты();
	
	Для Счетчик = 0 По МассивРеквизитовФормы.Количество()-1 Цикл		
		РеквизитФормы = МассивРеквизитовФормы[Счетчик];
		Если РеквизитФормы.ТипЗначения.СодержитТип(Тип("ТабличныйДокумент")) Тогда
			ЭтотОбъект[РеквизитФормы.Имя] = ЭтотОбъект[РеквизитФормы.Имя];	
		КонецЕсли;
	КонецЦикла;	
		
	Если СтруктураРеквизитовФормы.Свойство("СформироватьФормуОтчетаАвтоматически") И СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически <> Неопределено Тогда
		
		ЗаполнитьАвтоНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтчетномПериоде() Экспорт

	СтрПериодОтчета = ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ФП = истина");
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
		СтруктураРеквизитовФормы.мКвартал = Лев(СтрПериодОтчета,1);
		СтруктураРеквизитовФормы.мМесяц = Неопределено;
	Иначе
		СтруктураРеквизитовФормы.мМесяц = Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		СтруктураРеквизитовФормы.мКвартал = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мГод = Лев(Прав(СтрПериодОтчета,7),4);
		
КонецПроцедуры 

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокСтруктурныхЕдиниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");			
	СтруктураРеквизитовФормы.Вставить("НалоговыйКомитет");				
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");	
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");	
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");		
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");	
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрг");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");	
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");		
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");	
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);	
	СтруктураРеквизитовФормы.Вставить("мПериодичность", Параметры.мПериодичность);		
	СтруктураРеквизитовФормы.Вставить("мГод");	
	СтруктураРеквизитовФормы.Вставить("мКвартал");	
	СтруктураРеквизитовФормы.Вставить("мМесяц");
	СтруктураРеквизитовФормы.Вставить("КодНалоговогоОрганаИПН");	
	СтруктураРеквизитовФормы.Вставить("КодНалоговогоОрганаОПВиСО");		
	
	// индивидуальные параметры формы
	СтруктураРеквизитовФормы.Вставить("мПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	СтруктураРеквизитовФормы.Вставить("ВсегоСтр");
	СтруктураРеквизитовФормы.Вставить("ШагФорм");
	СтруктураРеквизитовФормы.Вставить("КоличествоСтруктурныхЕдиницБезНалогоплательщика");
	СтруктураРеквизитовФормы.Вставить("РасчетПоВидамДоходовИОблагаемойБазе");
	СтруктураРеквизитовФормы.Вставить("ОтметкаРезидентов");		
	СтруктураРеквизитовФормы.Вставить("ОтметкаНерезидентов");
	СтруктураРеквизитовФормы.Вставить("ВедетсяУчетОППВ");
	СтруктураРеквизитовФормы.Вставить("мЕстьРеквизитыСП");
	СтруктураРеквизитовФормы.Вставить("мПризнакСистемыСотрудниковЗУП20 ");
	СтруктураРеквизитовФормы.Вставить("ПризнакМногострочности");
	
КонецПроцедуры

&НаСервере
// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() 
	
	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
		
	//мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	//Стр = 1;	
	//ИмяПанелиФормы = "Панель" + ЭтаФорма.КодФормы;					
	//Для Каждого Страница Из Элементы["Панель" + ЭтаФорма.КодФормы].ПодчиненныеЭлементы Цикл
	//	ИмяСтраницыБезПрефиксаПанели =  СтрЗаменить(Страница.Имя, ИмяПанелиФормы, ""); // ИмяСтраницыБезПерфиксаПанели
	//	
	//	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	//	СтрокаУровня1.ИмяСтраницы              = ИмяСтраницыБезПрефиксаПанели;
	//	СтрокаУровня1.Представление            = ЭтаФорма.Заголовок+ " - стр. " + Строка(Стр);
	//	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	//	СтрокаУровня1.ИмяПоляТабличногоДокум   = ЭтаФорма.КодФормы + "ПолеТабличногоДокумента" + ИмяСтраницыБезПрефиксаПанели;		
	//	СтрокаУровня1.ВыводНаПечать            = 1;
	//	СтрокаУровня1.ПоказатьСтраницу         = 1;
	//	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	//    Стр = Стр + 1;
	//КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			
			СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
			//СписокСохранения.Вставить("ДеревоНастройкиСтраниц",	РеквизитФормыВЗначение("мДеревоСтраницОтчета").Скопировать());	
						
			ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
			мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()	
	
	РегламентированнаяОтчетность.ВосстановитьСохраненныйОтчет(ЭтотОбъект);	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Перем СтруктураГруппы;  
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ТекстСообщения = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);				
				
		Возврат Ложь;
		
	КонецЕсли;
			
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		ВыборРасчета(КодФормы);
	КонецЕсли; 

	РегламентированнаяОтчетность.СформироватьСписокПечатаемыхЛистов(ЭтаФорма);	       		
		
	Возврат Истина;  
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуНастройкиСтраниц()
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРаздел = Элементы.РазделыОтчета.ТекущиеДанные.Страницы;		
	КонецЕсли;
	
	Для Каждого ТекФорма ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",ТекФорма.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			ТекущаяСтрокаСписка.Выгружать               = ТекФорма.Выгружать;
			ТекущаяСтрокаСписка.ПоказатьСтраницу        = ТекФорма.ПоказатьСтраницу;			
			ТекущаяСтрокаСписка.АвтополучениеИтогов     = ТекФорма.АвтополучениеИтогов;  
			ТекущаяСтрокаСписка.АвтоЗаполнение          = ТекФорма.АвтоЗаполнение;  
		КонецЕсли;		   
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокФормДерева",СписокФормДерева);
	
	ДопПараметры = Новый Структура("ТекущийРаздел",ТекущийРаздел);
	
	ОповещениеПослеЗакрытияФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастройкиСтраниц",ЭтотОбъект,ДопПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.НастройкиОтчета",ПараметрыФормы, ЭтаФорма,,,,ОповещениеПослеЗакрытияФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиСтраниц(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьДанныеФормы(РезультатЗакрытия, СписокФормДерева);
	
	Модифицированность = Истина;
	
	//обновим мСписокФормБезИерархии
	Для Каждого СтрокаФормы ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",СтрокаФормы.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			СтрокаФормы.Выгружать               = ТекущаяСтрокаСписка.Выгружать;
			СтрокаФормы.ПоказатьСтраницу        = ТекущаяСтрокаСписка.ПоказатьСтраницу;			
			СтрокаФормы.АвтополучениеИтогов     = ТекущаяСтрокаСписка.АвтополучениеИтогов;  
			СтрокаФормы.АвтоЗаполнение          = ТекущаяСтрокаСписка.АвтоЗаполнение;  
		КонецЕсли;			
	КонецЦикла; 	

	Если ДополнительныеПараметры.Свойство("ТекущийРаздел") И НЕ ДополнительныеПараметры.ТекущийРаздел = Неопределено Тогда  		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(РазделыОтчета, Новый Структура("СписокФормДереваСтраницы",ДополнительныеПараметры.ТекущийРаздел));
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;			
	КонецЕсли;  	
	
КонецПроцедуры

&НаСервере
Процедура РазделыОтчетаПриАктивизацииСтрокиНаСервере(НовыйКодФормы, НовыйПризнакМногострочность)	
	
	//проверим, что стояли не на основной, итоги передаем только когда переходим из доп.форм
	ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	Если ТекФорма <> Неопределено И Не ТекФорма.ПризнакОсновной Тогда
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы, Истина);		
	КонецЕсли;
				
	// установим новые значения реквизитам формы
	ЭтаФорма.КодФормы = НовыйКодФормы;	
	
	//передаем данные из структуры в ТП
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	
	
	Если  НовыйПризнакМногострочность Тогда
		
		Если ТекФорма = Неопределено Тогда
			ВсегоСтраниц = 1;
		Иначе
			ВсегоСтраниц = ТекФорма.ВсегоСтраниц;
		КонецЕсли;
		
		СтруктураРеквизитовФормы.КоличествоСтруктурныхЕдиницБезНалогоплательщика = ВсегоСтраниц;

		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтотОбъект);
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПанель(ПризнакОсновнойФормы, ПризнакМногострочности)
			
	Элементы.ФормаВыгрузитьВXML.Видимость 						 = ПризнакОсновнойФормы; 
	Элементы.ГруппаКнопокДействияСоСтрокамиИСтраницами.Видимость = ПризнакМногострочности;
	Элементы.Расшифровка200_02.Видимость = (КодФормы = "Форма200_02");	
	Элементы.ФормаРасшифровка.Видимость  = (КодФормы <> "Форма200_02");	
	Элементы.ВыгрузитьВXMLПриложение20003.Видимость 			 = (КодФормы = "Форма200_03");	
			    	
КонецПроцедуры //ЗаполнитьПанель()

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "ДатаПодачи", ДатаПодписи, Истина);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма200_03", "ДатаПодачи", 	ДатаПодписи, Ложь, Истина);
	
КонецПроцедуры

&НаСервере
Процедура СписокРасчетовПриИзмененииНаСервере()
	
	ЗаполнитьВидРасчета(СписокРасчетов);

	Если СтруктураРеквизитовФормы.ПризнакМногострочности Тогда
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);
	КонецЕсли;	

КонецПроцедуры

&НаСервере
// Процедура управляет выводом сведений о выбранном виде расчета
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьВидРасчета(ВидРасчета)
	
	Перем СтруктураГруппы;
	
	//ТД для обычной формы
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, КодФормы);
	
	//Многострочная структура для многостраничной формы - ф.200_03
	мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, "Форма200_03");
	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("Первоначальный");
	МассивИмен.Добавить("Очередной");
	МассивИмен.Добавить("Дополнительный");
	МассивИмен.Добавить("ПоУведомлению");
	МассивИмен.Добавить("Ликвидационный");
	
	//сначала очищаем поля, если были проставлены уже отметки
	
	Для Каждого Имя Из МассивИмен Цикл 
		//очищаем обычную форму
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, Имя, "", Форма200ПолеТабличногоДокументаСтраница1);
		
	КонецЦикла;
	
	//очищаем многострочную структуру 
	мМногострочнаяСтруктура.Свойство("Страница1", СтруктураГруппы);
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
	
	//очищаем во всех страницах
	Для Каждого СтрокаТаблицы Из ТаблицаСтрокГруппы Цикл
		
		Для Каждого Имя Из МассивИмен Цикл 
			
			СтрокаТаблицы[Имя] = "";
			
			ОбластьТД = Форма200_03ПолеТабличногоДокументаСтраница1.Области.Найти(Имя + "__" + Строка(ТаблицаСтрокГруппы.Индекс(СтрокаТаблицы)+1));
			
			Если ОбластьТД <> Неопределено Тогда 
				ОбластьТД.Значение = "";
			КонецЕсли;
		КонецЦикла;	
		
	КонецЦикла;	
		
	//передаем новые значения в ТД обычной формы
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ВидРасчета, "Х", Форма200ПолеТабличногоДокументаСтраница1);
	
	//передаем новые значенич в МС и таб.документ
	Для Каждого СтрокаТаблицы Из ТаблицаСтрокГруппы Цикл
		СтрокаТаблицы[ВидРасчета] = "Х";
		
		ОбластьТД = Форма200_03ПолеТабличногоДокументаСтраница1.Области.Найти(ВидРасчета + "__" + Строка(ТаблицаСтрокГруппы.Индекс(СтрокаТаблицы)+1));
			
		Если ОбластьТД <> Неопределено Тогда 
			ОбластьТД.Значение = "Х";
		КонецЕсли;

	КонецЦикла;	
		
	Если ВидРасчета = "ПоУведомлению" Тогда
		Форма200ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Ложь;
		Форма200ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита  = Ложь;
		
		// передаем номер и дату уведомления в форму 200.03
		НомерУведомления = Форма200ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Значение;
		ДатаУведомления  = Форма200ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Значение;
		
		//передаем новые значенич в МС и таб.документ
		Для Каждого СтрокаТаблицы Из ТаблицаСтрокГруппы Цикл
			СтрокаТаблицы.НомерУведомления = НомерУведомления;
			СтрокаТаблицы.ДатаУведомления = ДатаУведомления;
			
			ОбластьНомерУведомления = Форма200_03ПолеТабличногоДокументаСтраница1.Области.Найти("НомерУведомления" + "__" + Строка(ТаблицаСтрокГруппы.Индекс(СтрокаТаблицы)+1));
			Если ОбластьНомерУведомления <> Неопределено Тогда 
				ОбластьНомерУведомления.Значение = НомерУведомления;
			КонецЕсли;

			ОбластьДатаУведомления = Форма200_03ПолеТабличногоДокументаСтраница1.Области.Найти("ДатаУведомления" + "__" + Строка(ТаблицаСтрокГруппы.Индекс(СтрокаТаблицы)+1));
			Если ОбластьДатаУведомления <> Неопределено Тогда 
				ОбластьДатаУведомления.Значение = ДатаУведомления;
			КонецЕсли;

		КонецЦикла;	
	Иначе
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "НомерУведомления", "", Форма200ПолеТабличногоДокументаСтраница1);
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "ДатаУведомления", "", Форма200ПолеТабличногоДокументаСтраница1);
		
		Форма200ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Истина;
		Форма200ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита  = Истина;
		
		//передаем новые значенич в МС
		Для Каждого СтрокаТаблицы Из ТаблицаСтрокГруппы Цикл
			СтрокаТаблицы.НомерУведомления = "";
			СтрокаТаблицы.ДатаУведомления = "";
			
			ОбластьНомерУведомления = Форма200_03ПолеТабличногоДокументаСтраница1.Области.Найти("НомерУведомления" + "__" + Строка(ТаблицаСтрокГруппы.Индекс(СтрокаТаблицы)+1));
			Если ОбластьНомерУведомления <> Неопределено Тогда 
				ОбластьНомерУведомления.Значение = "";
			КонецЕсли;

			ОбластьДатаУведомления = Форма200_03ПолеТабличногоДокументаСтраница1.Области.Найти("ДатаУведомления" + "__" + Строка(ТаблицаСтрокГруппы.Индекс(СтрокаТаблицы)+1));
			Если ОбластьДатаУведомления <> Неопределено Тогда 
				ОбластьДатаУведомления.Значение = "";
			КонецЕсли;

		КонецЦикла;	
	КонецЕсли;
	
	//обновим обычную форму
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, КодФормы, ТаблицаДанных);			
	
	//обновим таблицы многострочной структуры
	РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, "Форма200_03", мМногострочнаяСтруктура);
	
	Модифированность = Истина;
	
КонецПроцедуры // ЗаполнитьВидРасчета()

&НаКлиенте
Функция ВыборФайлаПриложения(ИмяПриложения)

	Если Не ПодключитьРасширениеРаботыСФайлами() Тогда		
		Возврат "";
	КонецЕсли;
	
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогСохраненияФайла.ПолноеИмяФайла	 = ИмяПриложения;
	ДиалогСохраненияФайла.Фильтр			 = РегламентированнаяОтчетностьКлиентСервер.ФильтрДиалоговВыбораИСохраненияРегламентированногоОтчета();	
	ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
	ДиалогСохраненияФайла.Заголовок			 = НСтр("ru = 'Выберите файл'");

	Если ДиалогСохраненияФайла.Выбрать() Тогда
		ИмяФайла = ДиалогСохраненияФайла.ПолноеИмяФайла;
	КонецЕсли;	

	Возврат ИмяФайла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ЗначениеРеквизита)
											
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ЗначениеРеквизита);										
											
КонецФункции

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	 	
	
	Перезаполнить = ДополнительныеПараметры.Перезаполнить;
	
	Если КодФормы = "Форма200" Тогда 
		Форма200ЗаполнитьАвто(Перезаполнить);		
	ИначеЕсли КодФормы = "Форма200_01" Тогда     
		Форма200_01ЗаполнитьАвто(Перезаполнить);
	ИначеЕсли КодФормы = "Форма200_02" Тогда 		
		Форма200_02ЗаполнитьАвто(Перезаполнить);
	ИначеЕсли КодФормы = "Форма200_03" Тогда     
		Форма200_03ЗаполнитьАвто(Перезаполнить);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура очистки формы
//
// параметр: ТекИмяФормы - имя очищаемой формы (=КодФормы)
//           ОчиститьВсе - признак вида очистки формы              
//
Процедура Очистить(ТекИмяФормы,ОчиститьВсе = Ложь) Экспорт
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	// Список ячеек, очищать которые не нужно
	Если ОчиститьВсе Тогда
	Иначе
		СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
		СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Первоначальный");
	    СписокПоказателейНеПодлежащихОчистке.Добавить("Очередной");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Дополнительный");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Ликвидационный");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ПоУведомлению");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Квартал");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Год");
		СписокПоказателейНеПодлежащихОчистке.Добавить("НомерУведомления");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаУведомления");
		СписокПоказателейНеПодлежащихОчистке.Добавить("НомерКонтракта");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаКонтракта");
		СписокПоказателейНеПодлежащихОчистке.Добавить("НалоговыйРежим");
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодНалоговогоОрганаИПН");
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодНалоговогоОрганаОПВиСО");
	КонецЕсли;
		
	РегламентированнаяОтчетность.ОчиститьСтруктуруДанныхИТабличноеПолеФормы(ЭтаФорма, ТекИмяФормы, ОчиститьВсе, СписокПоказателейНеПодлежащихОчистке);
	
	// обновим представление списка структурных единиц
	Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц);
	КонецЕсли;
	
КонецПроцедуры // Очистить()

&НаКлиенте
Процедура ПриЗакрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьнаСервере();
		Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;	
	
КонецПроцедуры  

&НаСервере
Процедура СохранитьнаСервере();
	РегламентированнаяОтчетность.СохранитьОтчет(ЭтотОбъект);
КонецПроцедуры

&НаСервере 
Процедура ПередатьЗначениеВСтруктуруНаСервере(ИмяЯчейки, ЗначениеЯчейки, ПередаватьВТП = Ложь, ПередаватьВМногострочнуюЧасть = Ложь, ПоказательРасшифровки = Неопределено)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяЯчейки ,ЗначениеЯчейки, ПередаватьВТП, ПередаватьВМногострочнуюЧасть, ПоказательРасшифровки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫГРУЗКИ ДАННЫХ ОТЧЕТА В XML

&НаСервере
Функция ВыгрузитьВXMLНаСервере()

	Возврат РегламентированнаяОтчетность.ВыгрузитьОтчетВXMLДляСОНО(ЭтотОбъект);

КонецФункции

&НаКлиенте
Процедура ВыгрузитьПриложение(ИмяФайла, Многострочность = Ложь, ВыгружатьВсеПриложения)

	мВыбраннаяФорма = "Форма2002018Пр3";
	
	МассивАдресовВоВременномХранилище = Новый Массив();
	МассивИменФайлов				  = Новый Массив();
	
	АдресФайлаВоВременномХранилище = ВыгрузитьОтчетВXMLДляСОНОПриложение();
	МассивАдресовВоВременномХранилище.Добавить(АдресФайлаВоВременномХранилище);
	
	МассивИменФайлов.Добавить(ИмяФайла);
	
	// СОНО	
	Пока (ВыгружатьВсеПриложения И СтруктураРеквизитовФормы.ШагФорм <= СтруктураРеквизитовФормы.ВсегоСтр) Цикл
		РасширениеФайла = Прав(ИмяФайла,4);
		НазваниеФайла 	= Лев(ИмяФайла, СтрДлина(ИмяФайла)-5);
		МассивИменФайлов.Добавить(НазваниеФайла+(СтруктураРеквизитовФормы.ШагФорм+1)+РасширениеФайла);
		
		АдресФайлаВоВременномХранилище = ВыгрузитьОтчетВXMLДляСОНОПриложение();
		МассивАдресовВоВременномХранилище.Добавить(АдресФайлаВоВременномХранилище);
		
		СтруктураРеквизитовФормы.ШагФорм = СтруктураРеквизитовФормы.ШагФорм + 1;
	КонецЦикла;

	КоличЭлементов = МассивАдресовВоВременномХранилище.Количество()-1;
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
						
		ПередаваемыеФайлы = Новый Массив;
		ПереданныеФайлы   = Новый Массив;
		МассивВызовов     = Новый Массив;
		
		Для Индекс = 0 По КоличЭлементов Цикл
			ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(МассивИменФайлов[Индекс], МассивАдресовВоВременномХранилище[Индекс] );
			ПередаваемыеФайлы.Добавить(ОписаниеФайла);
		КонецЦикла;	
		
		МассивВызовов.Добавить(Новый Массив);
		
		МассивВызовов[0].Добавить("ПолучитьФайлы");
		МассивВызовов[0].Добавить(ПередаваемыеФайлы);
		МассивВызовов[0].Добавить(ПереданныеФайлы);
		МассивВызовов[0].Добавить("");
		МассивВызовов[0].Добавить(Ложь);
		
		Если ЗапроситьРазрешениеПользователя(МассивВызовов) Тогда
			
			ПолучитьФайлы(ПередаваемыеФайлы, ПереданныеФайлы,, Ложь);
			ТекстЗаголовока = НСтр("ru = 'Данные успешно выгружены в файл'");
			
			#Если НЕ ВебКлиент Тогда
			ПоказатьОповещениеПользователя(
				ТекстЗаголовока, "file:///" + СтрЗаменить(СокрЛП(ИмяФайла), "\", "/"),
				ИмяФайла);
			#Иначе
			ПоказатьОповещениеПользователя(
				ТекстЗаголовока,,
				ИмяФайла);
			#КонецЕсли
			
		КонецЕсли;
			
	Иначе
		// Веб клиент без расширения для работы с файлами
		
		Для Индекс = 0 По КоличЭлементов Цикл
		
			Попытка
				
				ПолучитьФайл(МассивАдресовВоВременномХранилище[Индекс], "", Истина);
				
			Исключение
				ШаблонСообщения = НСтр("ru = 'При записи файла возникла ошибка
										|%1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ОписаниеОшибки = ИнформацияОбОшибке();
				
			КонецПопытки;
			
		КонецЦикла;	
		
	КонецЕсли;

	мВыбраннаяФорма = "Форма2002018Кв1";
	
КонецПроцедуры

&НаСервере
// Выгружает многострочные формы в XML
//
Процедура ВыгрузитьМногострочнуюФормуПриложение(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки)
	
	Перем СтруктураГруппы;
	
	СтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки);	
	
	Если СтрокаВыгрузки.КоличествоНаЛисте = 1 Тогда  // форма многостраничная
		
		// для многострочной = одностраничной
		
		НачальнаяСтрока = НомерСтроки;
		КонечнаяСтрока = 0;
		
		ТекущаяФорма = СтрокаВыгрузки.Форма;
		СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
		НоваяФорма = СледСтрокаВыгрузки.Форма;
		Пока НоваяФорма = ТекущаяФорма Цикл
			НомерСтроки = НомерСтроки+1;
			
			ТекущаяФорма = СледСтрокаВыгрузки.Форма;
			Если НомерСтроки+1 < КоличествоСтрокВТаблице Тогда
				СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);						
				НоваяФорма = СледСтрокаВыгрузки.Форма;
				КонечнаяСтрока = НомерСтроки;
			Иначе
				НоваяФорма = Неопределено;
				КонечнаяСтрока = НомерСтроки;
			КонецЕсли;
		КонецЦикла;
		
		МногСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, СтрокаВыгрузки.КодФормы); 
				
		КоличествоЗаписей = 0;
		
		Для Каждого КлючИЗначение Из МногСтруктура Цикл
			ТаблицаСтрокГруппы = КлючИЗначение.Значение.Строки;
			КоличествоЗаписей =  ТаблицаСтрокГруппы.Количество();
			Прервать;
		КонецЦикла;
		
		Если СтруктураРеквизитовФормы.ВсегоСтр = 0 Тогда 
			Если НЕ КоличествоЗаписей <= 1 Тогда 
				СтруктураРеквизитовФормы.ВсегоСтр = КоличествоЗаписей - 1;	
			КонецЕсли;
		КонецЕсли;
				
		ОдинШаг = Истина;
		
		Для ШагФорм = СтруктураРеквизитовФормы.ШагФорм По СтруктураРеквизитовФормы.ВсегоСтр Цикл 
			
			Для Шаг = НачальнаяСтрока По КонечнаяСтрока Цикл  
				
				Если Шаг = КонечнаяСтрока Тогда 
					Прервать;
				КонецЕсли;
				
				СтрокаВыгрузкиТек = ТаблицаВыгрузки.Получить(Шаг);
				ТекущаяФорма 	  = СтрокаВыгрузкиТек.Форма; 
				ТекущаяСтраницаПриложения   = СтрокаВыгрузкиТек.Страница;
				
				СтрокаВыгрузкиСлед = ТаблицаВыгрузки.Получить(Шаг + 1);
				
				НоваяФорма 		   = СтрокаВыгрузкиСлед.Форма; 
				НоваяСтраница      = СтрокаВыгрузкиСлед.Страница; 			
				
				Если ОдинШаг Тогда 
					НомерЛиста = Новый Структура;
					НомерЛиста.Вставить("НомерЛиста", ШагФорм);
					//Запишем 1ю строку макета в записьXML	
					ЗаписатьЗначениеЭлементаПриложение(Запись, СтрокаВыгрузкиТек, НомерЛиста);
					ЗаписатьЗначениеЭлементаПриложение(Запись, СтрокаВыгрузкиСлед, НомерЛиста);
					ОдинШаг = Ложь;
					Продолжить;
				КонецЕсли;
				
				
				Если НоваяФорма <> ТекущаяФорма Тогда
					Запись.ЗаписатьКонецЭлемента();			// </sheet>
				КонецЕсли;
				Если НЕ НоваяФорма = ТекущаяФорма Тогда		
					Запись.ЗаписатьКонецЭлемента();			// </sheetGroup>
					Запись.ЗаписатьКонецЭлемента();			// </form>
					Запись.ЗаписатьНачалоЭлемента("form");
					Запись.ЗаписатьАтрибут("name",СтрокаВыгрузкиСлед.Форма);
					Запись.ЗаписатьНачалоЭлемента("sheetGroup");
				КонецЕсли;                                       	
				Если НЕ НоваяСтраница = ТекущаяСтраницаПриложения Тогда
					Если НоваяФорма <> ТекущаяФорма Тогда
						// ничего не делаем
					Иначе
						Запись.ЗаписатьКонецЭлемента();			// </sheet>
					КонецЕсли;
					Запись.ЗаписатьНачалоЭлемента("sheet");
					Запись.ЗаписатьАтрибут("name",СтрокаВыгрузкиСлед.Страница);
				КонецЕсли;
				НомерЛиста = Новый Структура;
				НомерЛиста.Вставить("НомерЛиста", ШагФорм);
				ЗаписатьЗначениеЭлементаПриложение(Запись, СтрокаВыгрузкиСлед, НомерЛиста);
			КонецЦикла;
			
			ШагФорм = ШагФорм + 1;
			
			Прервать;
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры // ВыгрузитьМногострочнуюФормуПриложение()

&НаСервере
// Формирует построчно структуру XML файла из макета "ВыгрузкаВXML"
//
Процедура ВыгрузитьСтрокуВXMLПриложение(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки, ТекущаяФорма = Неопределено, ТекущаяСтраницаПриложения = Неопределено)
	
	СтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки);
	НоваяФорма 	   = СтрокаВыгрузки.Форма; 
	НоваяСтраница  = СтрокаВыгрузки.Страница; 
	
	Если ТекущаяФорма <> Неопределено И НоваяФорма <> ТекущаяФорма Тогда
		Запись.ЗаписатьКонецЭлемента();			// </sheet>
	КонецЕсли;
   
	Если НЕ НоваяФорма = ТекущаяФорма Тогда		
		Если НЕ ТекущаяФорма = Неопределено Тогда
			Запись.ЗаписатьКонецЭлемента();			// </sheetGroup>
			Запись.ЗаписатьКонецЭлемента();			// </form>
		КонецЕсли;
		Запись.ЗаписатьНачалоЭлемента("form");
		Запись.ЗаписатьАтрибут("name", СтрокаВыгрузки.Форма);
		Запись.ЗаписатьНачалоЭлемента("sheetGroup");
	КонецЕсли;                                       	
	
	Если НЕ НоваяСтраница = ТекущаяСтраницаПриложения Тогда
		Если ТекущаяФорма <> Неопределено И НоваяФорма <> ТекущаяФорма Тогда
			// ничего не делаем
	    ИначеЕсли НЕ ТекущаяСтраницаПриложения = Неопределено Тогда		
			Запись.ЗаписатьКонецЭлемента();			// </sheet>
		КонецЕсли;
		Запись.ЗаписатьНачалоЭлемента("sheet");
		Запись.ЗаписатьАтрибут("name",СтрокаВыгрузки.Страница);
	КонецЕсли;
	
	Если СтрокаВыгрузки.Многострочность <> Неопределено И СтрокаВыгрузки.Многострочность = 1 Тогда 
		ВыгрузитьМногострочнуюФормуПриложение(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки);
	// проверим многострочное ли значение
	ИначеЕсли ЗначениеЗаполнено(СтрокаВыгрузки.КоличествоROW) И СтрокаВыгрузки.КоличествоROW <> "0" Тогда  // для обычных форм
		// если в обычной форме встретилась многострочность 
		КоличествоПовторений = Число(СтрокаВыгрузки.КоличествоROW);
		Для Н = 1 По КоличествоПовторений Цикл 				
			Запись.ЗаписатьНачалоЭлемента("row");
			СтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки);
			Если Н = 1 Тогда
				ТаблицаМногострочныхТегов = ТаблицаВыгрузки.СкопироватьКолонки();
				НоваяСтрока = ТаблицаМногострочныхТегов.Добавить();			
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыгрузки);
				
				// Проверим многострочная ли следующая строка
				СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
				Пока ЗначениеЗаполнено(СледСтрокаВыгрузки.КоличествоROW) И СледСтрокаВыгрузки.КоличествоROW <> "0" Цикл
					НомерСтроки = НомерСтроки+1;
					НоваяСтрока = ТаблицаМногострочныхТегов.Добавить();			
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СледСтрокаВыгрузки);
					СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
				КонецЦикла;   				
			КонецЕсли;
			Для Каждого МногСтрока Из ТаблицаМногострочныхТегов Цикл
				ЗаписатьЗначениеЭлементаПриложение(Запись, МногСтрока);	
			КонецЦикла;    			
			Запись.ЗаписатьКонецЭлемента();			// </row>
		КонецЦикла;			
	Иначе
		ЗаписатьЗначениеЭлементаПриложение(Запись, СтрокаВыгрузки);
	КонецЕсли;	      	
	
	ТекущаяФорма = НоваяФорма;
	ТекущаяСтраницаПриложения = НоваяСтраница;
		
КонецПроцедуры // ВыгрузитьСтрокуВXMLПриложение()

&НаСервере
Функция ВыгрузитьОтчетВXMLДляСОНОПриложение(ВыдаватьСообщение = Истина) Экспорт

	Объект = ЭтотОбъект;
	
	Префикс = Прав(Объект.мВыбраннаяФорма,7);
	
	// запишем общие атрибуты (code, version) и создадим элемент form
	Запись = Новый ЗаписьXML;		
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запись.ОткрытьФайл(ИмяВременногоФайла,"UTF-8");

	Запись.ЗаписатьОбъявлениеXML();
	
	// Запишем корневой элемент
	Запись.ЗаписатьНачалоЭлемента("fno");
	
	МакетВыгрузки = Объект.РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("ВыгрузкаВXML");

	ТаблОбщиеРеквизиты = Новый ТаблицаЗначений;
	ТаблОбщиеРеквизиты.Колонки.Добавить("ИмяАтрибута");
	ТаблОбщиеРеквизиты.Колонки.Добавить("ЗначениеАтрибута");
	
	ОбластьОбщихРеквизитов = МакетВыгрузки.Область("ОбщиеРеквизиты" + Префикс);
	Для Ном = ОбластьОбщихРеквизитов.Верх По ОбластьОбщихРеквизитов.Низ Цикл
		Строка = ТаблОбщиеРеквизиты.Добавить();
		Строка.ИмяАтрибута 		  = СокрП(МакетВыгрузки.Область(Ном, 1).Текст);
		Строка.ЗначениеАтрибута   = СокрП(МакетВыгрузки.Область(Ном, 2).Текст);		
	КонецЦикла;                           	
	
	// Запишем атрибуты корневого элемента
	Для Каждого Строка Из ТаблОбщиеРеквизиты Цикл
		Запись.ЗаписатьАтрибут(Строка.ИмяАтрибута,Строка.ЗначениеАтрибута);			  
	КонецЦикла;
	
	// создадим таблицу для выгрузки
	ТаблицаВыгрузки = Новый ТаблицаЗначений;
	ТаблицаВыгрузки.Колонки.Добавить("Форма");
	ТаблицаВыгрузки.Колонки.Добавить("Страница");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяАтрибута");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяЯчейки");
	ТаблицаВыгрузки.Колонки.Добавить("КоличествоROW");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяФормы");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяЛиста");
	ТаблицаВыгрузки.Колонки.Добавить("Отображение");
	
	ТаблицаВыгрузки.Колонки.Добавить("КодФормы");
	ТаблицаВыгрузки.Колонки.Добавить("Выгружать");
	ТаблицаВыгрузки.Колонки.Добавить("Многострочность");
	ТаблицаВыгрузки.Колонки.Добавить("ЗаголовокФормы"); 
	ТаблицаВыгрузки.Колонки.Добавить("КоличествоНаЛисте");    
	ТаблицаВыгрузки.Колонки.Добавить("Значение");    
	
	ОбластьВыгрузки = МакетВыгрузки.Область("Выгрузка" + Префикс);
	ТекущееИмяФормы = Неопределено;
	Для Ном = ОбластьВыгрузки.Верх По ОбластьВыгрузки.Низ Цикл
		Строка = ТаблицаВыгрузки.Добавить();
		Строка.Форма 	       = СокрП(МакетВыгрузки.Область(Ном, 1).Текст);
		Строка.Страница        = СокрП(МакетВыгрузки.Область(Ном, 2).Текст);		
		Строка.ИмяАтрибута     = СокрП(МакетВыгрузки.Область(Ном, 3).Текст);		
		Строка.ИмяЯчейки       = СокрП(МакетВыгрузки.Область(Ном, 4).Текст);		
		Строка.КоличествоROW   = СокрП(МакетВыгрузки.Область(Ном, 5).Текст);		
		Строка.ИмяФормы        = СокрП(МакетВыгрузки.Область(Ном, 6).Текст);		
		Строка.ИмяЛиста        = СокрП(МакетВыгрузки.Область(Ном, 7).Текст);		
		Строка.Отображение     = СокрП(МакетВыгрузки.Область(Ном, 8).Текст);		
		
		НовоеИмяФормы = Строка.ИмяФормы;
		Если НовоеИмяФормы <> ТекущееИмяФормы Тогда
			Форма = Объект.РеквизитФормыВЗначение("мСписокФормБезИерархии").Строки.Найти(Строка.ИмяФормы, "ИмяФормы");
		КонецЕсли;
		Если Форма <> Неопределено Тогда
			Строка.КодФормы  		 = Форма.КодФормы;
			Строка.Выгружать  		 = Форма.Выгружать;
			Строка.Многострочность   = Форма.Многострочность;
			Строка.ЗаголовокФормы    = Форма.ЗаголовокФормы;
			Строка.КоличествоНаЛисте = Форма.КоличествоНаЛисте;
			Строка.Значение  		 = Форма.Значение;
			
			//Если Форма.Многострочность Тогда
			//	ИмяРеквизитаТаблицыСтрокГруппы = Объект.РеквизитФормыВЗначение("мСтруктураМногострочныхРазделов").Строки[0].Строки.Найти(Строка.ИмяЛиста, "ИмяГруппы").ИмяРеквизитаТаблицыСтрокГруппы;
			//	Строка.Значение  		 	   = Объект.РеквизитФормыВЗначение(ИмяРеквизитаТаблицыСтрокГруппы);
			//Иначе
			//	Строка.Значение  		 = Форма.Значение;
			//КонецЕсли;	
			
		КонецЕсли;
		ТекущееИмяФормы = Строка.ИмяФормы;
	КонецЦикла;                           	
	
	// выгрузка в XML 
	КоличествоСтрокВТаблице = ТаблицаВыгрузки.Количество();
	НомерСтроки = 0;
	
	ТекущаяФорма = Неопределено;
	ТекущаяСтраницаПриложения = Неопределено;
	
	Пока Истина Цикл
		Если НомерСтроки >= КоличествоСтрокВТаблице Тогда
			Прервать;
		КонецЕсли; 
		ВыгрузитьСтрокуВXMLПриложение(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки, ТекущаяФорма, ТекущаяСтраницаПриложения);			
		НомерСтроки = НомерСтроки + 1;                                                                                      		
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();	// </sheet>
	Запись.ЗаписатьКонецЭлемента();	// </sheetGroup>
	Запись.ЗаписатьКонецЭлемента();	// </form> 
	
	Запись.ЗаписатьКонецЭлемента(); // fno
		
	Запись.Закрыть();
	
	// данный текст модуля добавлен для совместимости с СОНО (в СОНО для UTF-8 нет BOM поля)
	ТекстДок = Новый ТекстовыйДокумент;
    //ТекстДок.Прочитать(ИмяФайла,"windows-1251");
	ТекстДок.Прочитать(ИмяВременногоФайла,"windows-1251");
    Строка = ТекстДок.ПолучитьСтроку(1);
    ТекстДок.ЗаменитьСтроку(1,Прав(Строка,СтрДлина(Строка)-3));
	
	//бФайл = Новый Файл(ИмяФайла);
	ВыбФайл = Новый Файл(ИмяВременногоФайла);
    ТекстДок.Записать(ВыбФайл.Путь+ВыбФайл.ИмяБезРасширения+ВыбФайл.Расширение,"windows-1251");
	
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), УникальныйИдентификатор);
	Возврат Адрес;
	
КонецФункции// ВыгрузкаОтчетаВXMLДляСОНО()

&НаСервере
// Записываем значение в поле field из структуры хранения данных
//
Процедура ЗаписатьЗначениеЭлементаПриложение(Запись, СтрокаВыгрузки, СтруктураПараметров = Неопределено)
	
	Запись.ЗаписатьНачалоЭлемента("field");
	Запись.ЗаписатьАтрибут("name",СтрокаВыгрузки.ИмяАтрибута);
	// Выгрузим значение ячейки, если оно есть в форме
	ИмяЯчейки = СтрокаВыгрузки.ИмяЯчейки;
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		//получаем и записываем значение из отчета		
		Если СтрокаВыгрузки.Выгружать = 1 Тогда
			Если СтрокаВыгрузки.Многострочность Тогда
				// определим имя Листа по имени страницы
				ИмяЛиста = СтрокаВыгрузки.ИмяЛиста;
				СтруктураГруппы = Неопределено;
				МногСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, СтрокаВыгрузки.КодФормы); 
				
				Если ЗначениеЗаполнено(ИмяЛиста) И МногСтруктура.Свойство(ИмяЛиста) Тогда            					
					МногСтруктура.Свойство(ИмяЛиста,СтруктураГруппы);				
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнено ""Имя листа"" или ""Имя листа"" указано неверно для ячейки ""%1"" в макете для выгрузки значения в XML!'"), ИмяЯчейки);
					ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ТекстСообщения);
				КонецЕсли;
					
				Если ИмяЯчейки = "НомерСтраницы" Тогда
					КолСтр = Неопределено;
					СтруктураПараметров.Свойство("КоличествоГруппСтраниц", КолСтр);
					Запись.ЗаписатьТекст(XMLСтрока(Формат(КолСтр,"ЧЦ=3; ЧВН=")));
				// заполнения многостроничных данных	
				ИначеЕсли СтрокаВыгрузки.КоличествоНаЛисте = 1 Тогда 
					Если СтруктураГруппы <> Неопределено Тогда
						 НомерЛиста = СтруктураПараметров.НомерЛиста;
						 СтрокаЗначений = СтруктураГруппы.Строки[НомерЛиста];
						 Попытка
							 Строка = СтрокаЗначений[ИмяЯчейки];
						 Исключение
							 Строка = Неопределено;
						 КонецПопытки;
						 Если Строка <> Неопределено Тогда
							 Значение = Строка;
							 Значение = ПривестиЗначениеКФорматуСОНОПриложение(Значение); //СтрокаФорматов);
				    		 Запись.ЗаписатьТекст(XMLСтрока(Значение));
						 КонецЕсли;
					 КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(СтрокаВыгрузки.КоличествоROW) И СтрокаВыгрузки.КоличествоROW <> "0" Тогда  // многострочная часть row
					КоличествоНаЛисте = Число(СтрокаВыгрузки.КоличествоROW);
					НомерЗаписиНаЛисте = Неопределено;
					СтруктураПараметров.Свойство("НомерЗаписи", НомерЗаписиНаЛисте);
					КолСтр = Неопределено;
					СтруктураПараметров.Свойство("КоличествоГруппСтраниц", КолСтр);										
					Если СтруктураГруппы <> Неопределено Тогда
						 ТаблицаСтрокГруппы = СтруктураГруппы.Строки;						 					
						 // рассчитаем индекс строки и проверим есть ли такая строка в таблице данных
						 ИндексСтроки = НомерЗаписиНаЛисте + (КолСтр-1)* КоличествоНаЛисте - 1;
						 Если ИндексСтроки < ТаблицаСтрокГруппы.Количество() Тогда  // строк в таблице может быть меньше, чем выгружается в XML
							 Строка = ТаблицаСтрокГруппы.Получить(ИндексСтроки);
							 Если Строка <> Неопределено Тогда // найдена строка для выгрузки значения
								 Если ТаблицаСтрокГруппы.Колонки.Найти(ИмяЯчейки) <> Неопределено Тогда 
									 Значение = Строка[ИмяЯчейки];
									 Значение = ПривестиЗначениеКФорматуСОНОПриложение(Значение); //СтрокаФорматов);
					    		 	 Запись.ЗаписатьТекст(XMLСтрока(Значение));
								 КонецЕсли;
							 КонецЕсли;
						 КонецЕсли;
					КонецЕсли;
				Иначе // шапка или подвал
					Если СтруктураГруппы <> Неопределено Тогда
						 ОбщиеЭлементыГруппы = СтруктураГруппы.ШапкаИПодвал;
						 Строка = ОбщиеЭлементыГруппы.Найти(ИмяЯчейки,"ИмяОбласти");
						 Если Строка <> Неопределено Тогда
							 Значение = Строка.Значение;
							 Значение = ПривестиЗначениеКФорматуСОНОПриложение(Значение); //СтрокаФорматов);
				    		 Запись.ЗаписатьТекст(XMLСтрока(Значение));
						 Иначе
							 ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найден в структуре хранения данных показатель %1 для формы %2'"), ИмяЯчейки, СтрокаВыгрузки.Форма);
							 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							 
							 Значение = "";
						 КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТаблицаДанных = СтрокаВыгрузки.Значение;
				СтрокаОбласти = ТаблицаДанных.Найти(ИмяЯчейки,"ИмяОбласти");
				Если СтрокаОбласти <> Неопределено Тогда
					Значение = СтрокаОбласти.Значение;
					Значение = ПривестиЗначениеКФорматуСОНОПриложение(Значение); //СтрокаФорматов);
				    Запись.ЗаписатьТекст(XMLСтрока(Значение));
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найдена ячейка ""%1"" для выгрузки значения в XML!'"), ИмяЯчейки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	Запись.ЗаписатьКонецЭлемента();			// </field>

КонецПроцедуры // ЗаписатьЗначениеЭлементаПриложение()

&НаСервере
//Приводит значение к нужному формату для выгрузки в формате XML
//
Функция ПривестиЗначениеКФорматуСОНОПриложение(Значение) 
	
	Если Врег(Значение) = "Х" ИЛИ Врег(Значение) = "X" Тогда
		Значение = Истина;
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Если Значение = Дата('00010101') Тогда
			Значение = "";
		Иначе
			Значение = Лев(Значение,10);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") И Значение = 0 Тогда
		Значение = "";
	КонецЕсли;
	
	Возврат Значение;	
	
КонецФункции // ПривестиЗначениеКФорматуСОНОПриложение()

///////////////////////////////////////////////////////////////////
// ЛОКАЛЬНЫЕ МЕХАНИЗМЫ ОТЧЕТА

&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда		
		мСписокСтруктурныхЕдиниц = Результат;		
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц); 		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере()
	
	РегламентированнаяОтчетность.ДобавитьСтрокуМногострочнойФормы(ЭтотОбъект);
	
	Если КодФормы = "Форма200_03" Тогда
		СтруктураРеквизитовФормы.КоличествоСтруктурныхЕдиницБезНалогоплательщика = СтруктураРеквизитовФормы.КоличествоСтруктурныхЕдиницБезНалогоплательщика + 1;
		
		ИмяЯчейки = "КоличествоПриложений200_03";		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма200", ИмяЯчейки, СтруктураРеквизитовФормы.КоличествоСтруктурныхЕдиницБезНалогоплательщика, Ложь);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуНаСервере()
	
	РегламентированнаяОтчетность.УдалитьСтрокуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПредыдущаяСтрНаСервере()
	
	ТекущаяСтраница = ТекущаяСтраница - 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СледующаяСтрНаСервере()
	
	ТекущаяСтраница = ТекущаяСтраница + 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, ЭтотОбъект.КодФормы, Ложь,Ложь);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ЭтаФорма.КодФормы);
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	
	
	Форма200РасчетНаСервере(Неопределено, Неопределено,КодФормы);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы)
	
	ОргСведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(Налогоплательщик, ДатаПодписи);
	ОтветственныеЛица = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(Налогоплательщик, ДатаПодписи);
	
	//Если организация не указана то не выводим никаких сведений
	Если ОргСведения = 0 Тогда
		Возврат;
	КонецЕсли;

	// Инициализируем переменные
	РННЮЛ = ""; 	// РНН	
	НаимЮЛПол = ""; // Полное наименование 	
	ИИН_БИН = ""; 	// ИИН_БИН	
	ФИОРук = ""; 	// ФИО руководителя				
	КБЕ					= ""; // КБе
	
	//КодНалоговогоОргана = ""; // Код налогового органа	
	//АдрЮр = ""; //юр.адрес	
	//АдрФакт = ""; //факт.адрес
	КодНалоговогоОрганаИПН = "";
	КодНалоговогоОрганаОПВиСО = "";
		
	// Получаем данные
	ОргСведения.Свойство("РННЮЛ",     			РННЮЛ);
	ОргСведения.Свойство("БИН_ИИН",   			ИИН_БИН);
	ОргСведения.Свойство("ПолноеНаименование", 	НаимЮЛПол);	
	ОргСведения.Свойство("КБе",					КБе);

	ФИОРук = СокрЛП(ОтветственныеЛица.РуководительФИзЛицо);

	Резидент = ?(Лев(КБе,1) = "2", Ложь, Истина);
	
	// Производим операции связанные с текущей формой отчетности	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН", ИИН_БИН);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ОргНазв", НаимЮЛПол);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Резидент",   ?(Резидент,    "Х", ""));
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Нерезидент", ?(НЕ Резидент, "Х", ""));

	// Разбиваем название организации
	НазваниеОрганизацииДляРазбиения = НаимЮЛПол;
	НачПозиция = 1;
	Для Шаг = 1 По 3 Цикл
		ДлинаСтроки = ЭтотОбъект[ТекущееИмяФормы + "ПолеТабличногоДокументаСтраница1"].Области["ОргНазв" + Шаг].ТипЗначения.КвалификаторыСтроки.Длина;
		НазОрганизации = Сред(НазваниеОрганизацииДляРазбиения, НачПозиция, ДлинаСтроки); 
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ОргНазв" + Шаг, НазОрганизации);
		НачПозиция =НачПозиция + ДлинаСтроки;
	КонецЦикла;
	
	Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Если мСписокСтруктурныхЕдиниц.Количество() = 1 И мСписокСтруктурныхЕдиниц.НайтиПоЗначению(Налогоплательщик) <> Неопределено Тогда
			// у налогоплательщика структурных подразделений нет
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "СтруктурныеПодразделенияИмеютсяНет", "Х");
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "СтруктурныеПодразделенияИмеютсяДа",  "");
		Иначе
			// у налогоплательщика имеется несколько структурных единиц
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "СтруктурныеПодразделенияИмеютсяДа",  "Х");
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "СтруктурныеПодразделенияИмеютсяНет", "");
			
			// необходимо представлять приложение 200.03 по каждому филиалу
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Приложение03", "Х");			
		КонецЕсли;		
	Иначе
		// работы со структурными подразделениями в базе не ведется
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "СтруктурныеПодразделенияИмеютсяНет", "Х");							
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "СтруктурныеПодразделенияИмеютсяДа",  "");
	КонецЕсли;

	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"Руководитель",ФИОРук);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Квартал",СтруктураРеквизитовФормы.мКвартал);
		
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год", 	СтруктураРеквизитовФормы.мГод);
		
	// Дата подачи декларации
	//РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы,"ДатаПодачи",ДатаПодачи);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"ДатаПодачи", ДатаПодписи);
	
КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьПараметры(ТекущееИмяФормы) Экспорт
	
	Форма = РеквизитФормыВЗначение("мСписокФормБезИерархии").Строки.Найти(ТекущееИмяФормы, "КодФормы");
	

	Если Форма.Многострочность = 1 Тогда // заполнение структуры шапки(подвала) для многострочных форм
		
		Если ТекущееИмяФормы = "Форма200_02" Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН", 			Налогоплательщик.ИдентификационныйНомер);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год", 				СтруктураРеквизитовФормы.мГод);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Квартал",				СтруктураРеквизитовФормы.мКвартал);
			
		Иначе
			
			// страница 1
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "РНННалогоплательщика", 	 Налогоплательщик.РНН, 						Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год", 				 	 СтруктураРеквизитовФормы.мГод,				Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Квартал", 			 	 СтруктураРеквизитовФормы.мКвартал,			Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИННалогоплательщика", Налогоплательщик.ИдентификационныйНомер, 	Ложь, Истина);
			// страница 2
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "РНННалогоплательщика1", 	 Налогоплательщик.РНН, 						Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год1",					 СтруктураРеквизитовФормы.мГод,				Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Квартал1", 				 СтруктураРеквизитовФормы.мКвартал, 		Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИННалогоплательщика1",Налогоплательщик.ИдентификационныйНомер, 	Ложь, Истина);
			// страница 3                                                                                                                          	
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "РНННалогоплательщика2", 	 Налогоплательщик.РНН, 						Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год2", 					 СтруктураРеквизитовФормы.мГод, 			Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Квартал2", 				 СтруктураРеквизитовФормы.мКвартал, 		Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИННалогоплательщика2",Налогоплательщик.ИдентификационныйНомер,   Ложь, Истина);
			
			// общие сведения
			ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, "Форма200");
			
			НаимЮЛПол	  = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "ОргНазв"); // Полное наименование
			ФИОРук 		  = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "Руководитель"); // ФИО руководителя
			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ОргНазв", 	 НаимЮЛПол, Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Руководитель", ФИОРук, 	Ложь, Истина);
			//РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ДатаПодачи", 	ДатаПодачи, Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ДатаПодачи", 	ДатаПодписи, Ложь, Истина);
			
			// Разобьем наименование организации для выгрузки в XML
			НазваниеОрганизацииДляРазбиения = НаимЮЛПол;
			НачПозиция = 1;
			ДлинаСтроки = 27;
			Для Шаг = 1 По 2 Цикл
				НазОрганизации = Сред(НазваниеОрганизацииДляРазбиения, НачПозиция, ДлинаСтроки); 						
				РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ОргНазв" + Шаг, НазОрганизации, Ложь, Истина);
				НачПозиция = НачПозиция + ДлинаСтроки;
				ДлинаСтроки = 36;
			КонецЦикла;
			
			// перенесем вид декларации
			ВидРасчетаПервоначальный = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "Первоначальный");
			ВидРасчетаОчередной		 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "Очередной");
			ВидРасчетаДополнительный = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "Дополнительный");
			ВидРасчетаПоУведомлению	 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "ПоУведомлению");
			ВидРасчетаЛиквидационный = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "Ликвидационный");
			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Первоначальный", 	ВидРасчетаПервоначальный, 	Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Очередной", 		ВидРасчетаОчередной, 		Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Дополнительный", 	ВидРасчетаДополнительный, 	Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ПоУведомлению", 	ВидРасчетаПоУведомлению, 	Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Ликвидационный", 	ВидРасчетаЛиквидационный, 	Ложь, Истина);
			
			НомерУведомления = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"НомерУведомления");
			ДатаУведомления  = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"ДатаУведомления");
			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "НомерУведомления", 	НомерУведомления, 	Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ДатаУведомления", 	ДатаУведомления, 	Ложь, Истина);
		КонецЕсли;
				
	Иначе

		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН", 			Налогоплательщик.ИдентификационныйНомер);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год", 				СтруктураРеквизитовФормы.мГод);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Квартал",				СтруктураРеквизитовФормы.мКвартал);
		
	КонецЕсли;
	
	Если ТекущееИмяФормы = Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7) Тогда 
		
		//устанавливаем значения по умолчанию
		СписокРасчетов = Элементы.СписокРасчетов.СписокВыбора.Получить(1).Значение;
		ЗаполнитьВидРасчета("Очередной");

		//заполним основные сведения об организации
		ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы);
		
	КонецЕсли;

КонецПроцедуры	

&НаСервере
//Процедура выполняет выбор процедуры расчета.
//ВыборРасчета выполняется при восстановлении данных, при изменении поля табличного документа
//
//Параметры:    ТекФорма - имя текущей формы
//              Индекс - индекс строки для многострочной формы
//              Показатель - имя ячейки, откуда была вызвана процедура расчета многострочной
//                           формы, без указания номера строки (например, без "__1")
//
Процедура ВыборРасчета(ТекФорма, Индекс = Неопределено, Показатель = Неопределено) Экспорт
	Если ТекФорма = "Форма200" Тогда
		Форма200РасчетНаСервере(Индекс, Показатель, ТекФорма);
	ИначеЕсли ТекФорма = "Форма200_01" Тогда
		Форма200_01РасчетНаСервере(Индекс, Показатель, ТекФорма);
	ИначеЕсли ТекФорма = "Форма200_02" Тогда
		Форма200_02РасчетНаСервере(Индекс, Показатель);
	Иначе
		Форма200_03РасчетНаСервере(Индекс, Показатель, ТекФорма);
	КонецЕсли;		
КонецПроцедуры // ВыборРасчета()

&НаСервере
Процедура СформироватьПризнакиФормыИПередатьИтогиНаСервере()

	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтаФорма, Кодформы);

КонецПроцедуры

&НаКлиенте
// Процедура отображает отчет "Регистр НУ по ИПН и СН" 
// с учетом параметров формирования регламентированного отчета
//  
// Параметры: ДатаНачала - обозначает дату начала расшифровки - с начала года или с начала периода отчета
//            СтруктурнаяЕдиницаДляОтбора - для расшифровки формы 200.03
//
Процедура ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(ДатаНачала, ДатаОкончания, СтруктурнаяЕдиницаДляОтбора = Неопределено, СтруктураФизЛицоДляОтбора = Неопределено, Режим = "БезДетализации", ПризнакНеРезиденства = Ложь)

	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоМесяца(ДатаНачала));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецМесяца(ДатаОкончания));
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВключитьИП", Истина);	
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВключитьПолучателейАлиментов", ПризнакАлиментов);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Налогоплательщик", 			  Налогоплательщик);
	
	СписокСтруктурныхЕдиниц = Новый СписокЗначений;
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиницаДляОтбора) Тогда
		СписокСтруктурныхЕдиниц = мСписокСтруктурныхЕдиниц;
	Иначе
		СписокСтруктурныхЕдиниц.Добавить(СтруктурнаяЕдиницаДляОтбора);
	КонецЕсли;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", СписокСтруктурныхЕдиниц);
	ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПредставлениеСпискаОрганизаций", ПредставлениеСпискаОрганизаций);
	
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Если СтруктураФизЛицоДляОтбора <> Неопределено Тогда
		Если ТипЗнч(СтруктураФизЛицоДляОтбора) = Тип("Структура") Тогда
			ФизЛицоДляОтбора = Неопределено;
			СтруктураФизЛицоДляОтбора.Свойство("ФизЛицо",ФизЛицоДляОтбора);
			Если ФизЛицоДляОтбора <> Неопределено Тогда
				ВидСравненияОтбор = СтруктураФизЛицоДляОтбора.ВидСравнения;
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ФизЛицо",  ФизЛицоДляОтбора, ВидСравненияОтбор);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// отбор по стране гражданства
	СписокСтран = Новый СписокЗначений;
	СписокСтран.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторСтранМира.Казахстан"));
	
	Если ПризнакНеРезиденства Тогда // если расшифровка вызвана из формы 200.02
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Страна",  СписокСтран, ВидСравненияКомпоновкиДанных.НеВСписке);
	КонецЕсли;
	
	ГруппировкиРасшифровки = Новый Массив();
	
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "Налогоплательщик", НСтр("ru = 'Налогоплательщик'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "МесяцНалоговогоПериода", НСтр("ru = 'Месяц налог. периода'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "НалоговыйКомитет", НСтр("ru = 'Налоговый комитет'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "СтруктурнаяЕдиница", НСтр("ru = 'Структурная единица'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "ФизЛицо", НСтр("ru = 'Работник'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	
	Если НЕ Режим = "БезДетализации" Тогда
		ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "Регистратор", НСтр("ru = 'Документ движения (регистратор)'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	КонецЕсли;   	

	ЗаполняемыеНастройки = Новый Структура("Группировка, Показатели, ДополнительныеПоля, ГруппировкиРасшифровки",
											Истина, Истина, Истина, ГруппировкиРасшифровки);
											
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ЗаполняемыеНастройки",ЗаполняемыеНастройки );	

	ОткрытьФорму("Отчет.РегистрНалоговогоУчетаПоИПНиСН.Форма.ФормаОтчета", ПараметрыФормы,, Истина);
	
КонецПроцедуры // ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН()

&НаКлиенте
Процедура ПослеВводаСтраницы(Значение, Параметры) Экспорт
	
	Если НЕ Значение = Неопределено Тогда  
		
		ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
		Если ТекФорма = Неопределено Тогда
			ВсегоСтраниц = 1;
		Иначе
			ВсегоСтраниц = ТекФорма.ВсегоСтраниц;
		КонецЕсли;		
			
		Если Значение = 0 Тогда
			ТекущаяСтраница = 1;
		ИначеЕсли Значение > ВсегоСтраниц Тогда
			ТекущаяСтраница = ВсегоСтраниц;
		Иначе
			ТекущаяСтраница = Значение;				
		КонецЕсли;
		
		ПослеВводаСтраницыНаСервере();
		  
	КонецЕсли;
	           	
КонецПроцедуры

&НаСервере
Процедура ПослеВводаСтраницыНаСервере()
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаЗначения(Значение, Параметры) Экспорт
	
	Если НЕ Значение = Неопределено Тогда         	
		ПроверятьЦифрыВСтроке = Ложь;
		Если Параметры.Свойство("ПроверятьЦифрыВСтроке" , ПроверятьЦифрыВСтроке) И ПроверятьЦифрыВСтроке Тогда
			Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Значение) Тогда				
				ТекстСообщения = НСтр("ru = 'Значение содержит нецифровые символы, значение будет очищено'");							  
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);				
				Значение = "";
			КонецЕсли;         		
		КонецЕсли;
		
		Параметры.Область.Значение = Значение;			
		ПередатьЗначениеВМногострочнуюСтруктуру(Параметры.ИмяСтраницы, Параметры.Область.Имя, Значение, Параметры.Расчет);       
	КонецЕсли;
	           	
КонецПроцедуры

&НаСервере 
Процедура ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ИмяЯчейки, Значение, Расчет = Ложь)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, ИмяСтраницы, ИмяЯчейки, Значение, Расчет);				
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Форма 200.00

&НаСервере
Функция Форма200РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
	ТаблицаПоМесяцам = Новый ТаблицаЗначений;
	
	ТаблицаПоМесяцам.Колонки.Добавить("КодСтроки", 				ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаПоМесяцам.Колонки.Добавить("МесяцНалоговогоПериода", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаПоМесяцам.Колонки.Добавить("Значение", 				ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));

	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("КодСтроки", 		ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаРезультат.Колонки.Добавить("Значение1Мес", 	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Значение2Мес", 	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Значение3Мес", 	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("ЗначениеКвартал", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));	
	
	ТаблицаРезультат.Индексы.Добавить("КодСтроки");

	Запрос = Новый Запрос;
	
	мПризнакСистемыСотрудниковЗУП20 = СтруктураРеквизитовФормы.мПризнакСистемыСотрудниковЗУП20;
	
	Запрос.УстановитьПараметр("парамПериодС", 				НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парам1Мес", 					НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парам2Мес", 					ДобавитьМесяц(НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), 1));
	Запрос.УстановитьПараметр("парам3Мес", 					ДобавитьМесяц(НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), 2));
	Запрос.УстановитьПараметр("парамПериодПо", 				КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПослеПериодПо", 		КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) + 1);
	Запрос.УстановитьПараметр("парамНалогоплательщик",	 	Налогоплательщик);
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());

	// если налогоплательщик - ИП, то исключим данные самого индивидуального предпринимателя
	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Налогоплательщик.ИндивидуальныйПредприниматель);
	Иначе
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Неопределено);
	КонецЕсли;
	
	МТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МТ;
			
	// Получим данные учетной политики
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации,
	|	УчетнаяПолитикаНУ.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ,
	|	УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН,
	|	УчетнаяПолитикаНУ.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя,
	|	УчетнаяПолитикаНУ.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодПо, Организация = &парамНалогоплательщик) КАК УчетнаяПолитикаНУ
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОтражениеПоПериодуРегистрации 				= Выборка.ОтражениеПоПериодуРегистрации;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Выборка.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ;
		ОрганизацияЯвляетсяПлательщикомСН			= Выборка.ОрганизацияЯвляетсяПлательщикомСН;
		КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = Выборка.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя;
		КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника = Выборка.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника;
	Иначе
		ОтражениеПоПериодуРегистрации 				= Ложь;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Ложь;
		ОрганизацияЯвляетсяПлательщикомСН			= Ложь;
		КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = 0;
		КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника = 0;
	КонецЕсли;
	
	// Получим необходимые данные
	
	// ряд строк заполняются только в случае наличия у налогового агента структурных подразделений	
	Если мСписокСтруктурныхЕдиниц.Количество() = 1 И мСписокСтруктурныхЕдиниц.НайтиПоЗначению(Налогоплательщик) <> Неопределено Тогда
		ЕстьСтруктурныеЕдиницыУНалогоплательщика = Ложь;
	Иначе
		ЕстьСтруктурныеЕдиницыУНалогоплательщика = Истина;
	КонецЕсли;

	/////////////////////////////////////////////////////////
	// Раздел. Исчисление индивидуального подоходного налога

	// Численность работников и количество СП
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РаботникиОрганизацийСрезПоследних." +?(мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ФизЛицо КАК ФизЛицо
	               |ПОМЕСТИТЬ ВТ_СписокРаботников
	               |ИЗ
	               |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	               |			&парамПериодС,
	               |			Организация = &парамНалогоплательщик
	               |				ИЛИ ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц)) КАК РаботникиОрганизацийСрезПоследних
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	РаботникиОрганизаций." +?(мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ФизЛицо КАК ФизЛицо
	               |ИЗ
	               |	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	               |ГДЕ
	               |	(РаботникиОрганизаций.Организация = &парамНалогоплательщик
	               |			ИЛИ РаботникиОрганизаций.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц))
	               |	И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	               |	И РаботникиОрганизаций.Период МЕЖДУ &парамПериодС И &парамПериодПо
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	РаботникиОрганизацийСрезПоследних." +?(мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ФизЛицо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_СписокРаботников.Физлицо) КАК ЧисленностьРаботников,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	               |			КОГДА ИПНСведенияОДоходах.СтруктурнаяЕдиница <> ИПНСведенияОДоходах.Налогоплательщик
	               |				ТОГДА ИПНСведенияОДоходах.СтруктурнаяЕдиница
	               |			ИНАЧЕ NULL
	               |		КОНЕЦ) КАК КоличествоСтруктурныхЕдиницБезНалогоплательщика,
	               |	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода
	               |ИЗ
	               |	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	               |			&парамПериодС,
	               |			&парамПериодПо,
	               |			МЕСЯЦ,
	               |			Налогоплательщик = &парамНалогоплательщик
	               |				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	               |				И ФизЛицо <> &парамИндивидуальныйПредприниматель
	               |				И ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ИПНСведенияОДоходах
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокРаботников КАК ВТ_СписокРаботников
	               |		ПО (ВТ_СписокРаботников.Физлицо = ИПНСведенияОДоходах.ФизЛицо)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

		// численность работников
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "ЧисленностьРаботников";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.ЧисленностьРаботников;
		
	КонецЦикла;
	
	// Сумма индивидуального подоходного налога, подлежащего перечислению в бюджет
	// с выделением суммы по головной организации и филиалам
	
	Запрос.Текст = "
	|// ИПН, подлежащий перечислению
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(ИПНРасчетыСБюджетом.Налог) КАК СуммаИПНПодлежащегоПеречислению,
	|	СУММА(ВЫБОР
	|			КОГДА ИПНРасчетыСБюджетом.СтруктурнаяЕдиница = ИПНРасчетыСБюджетом.Налогоплательщик
	|				ТОГДА ИПНРасчетыСБюджетом.Налог
	|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК СуммаИПНПодлежащегоПеречислениюЗаГоловнуюОрганизацию,
	|	СУММА(ВЫБОР
	|			КОГДА ИПНРасчетыСБюджетом.СтруктурнаяЕдиница <> ИПНРасчетыСБюджетом.Налогоплательщик
	|				ТОГДА ИПНРасчетыСБюджетом.Налог
	|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК СуммаИПНПодлежащегоПеречислениюПоФилиалам
	|	
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|ГДЕ
	|	ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик
	|	И ИПНРасчетыСБюджетом.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И ИПНРасчетыСБюджетом.Период МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|	И ИПНРасчетыСБюджетом.ФизЛицо <> &парамИндивидуальныйПредприниматель	
	|	И (ВЫБОР
	|		КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|			ТОГДА НЕ ИПНРасчетыСБюджетом.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|		ИНАЧЕ ИСТИНА
	|	  КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		// сумма ИПН, подлежащая перечислению в бюджет
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_200_00_001";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.СуммаИПНПодлежащегоПеречислениюЗаГоловнуюОрганизацию; // исключаем СП, показываемые в 200.03

	КонецЦикла;

	/////////////////////////////////////////////////////////
	// Раздел. Исчисление обязательных пенсионных взносов
	
	// Сумма ОПВ, подлежащих перечислению
	// с выделение суммы по головной организации и филиалам
	
	Запрос.Текст = "
	|// ОПВ, подлежащие перечислению
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(ОПВПодлежитПеречислениюВФонды.Взнос) КАК СуммаОПВПодлежащихПеречислению,
	|	СУММА(ВЫБОР
	|			КОГДА ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница = ОПВПодлежитПеречислениюВФонды.Налогоплательщик
	|				ТОГДА ОПВПодлежитПеречислениюВФонды.Взнос
	|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК СуммаОПВПодлежащихПеречислениюЗаГоловнуюОрганизацию,
	|	СУММА(ВЫБОР
	|			КОГДА ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница <> ОПВПодлежитПеречислениюВФонды.Налогоплательщик
	|				ТОГДА ОПВПодлежитПеречислениюВФонды.Взнос
	|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК СуммаОПВПодлежащихПеречислениюПоФилиалам
	|ИЗ                         
	|	РегистрНакопления.ОПВПодлежитПеречислениюВФонды КАК ОПВПодлежитПеречислениюВФонды                                 
	|ГДЕ
	|	ОПВПодлежитПеречислениюВФонды.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И ОПВПодлежитПеречислениюВФонды.Период МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ОПВПодлежитПеречислениюВФонды.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|	И ОПВПодлежитПеречислениюВФонды.ФизЛицо <> &парамИндивидуальныйПредприниматель	
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// сумма ОПВ, подлежащих перечислению
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_200_00_002";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.СуммаОПВПодлежащихПеречислениюЗаГоловнуюОрганизацию; // исключаем СП, показываемые в 200.03

	КонецЦикла;
	/////////////////////////////////////////////////////////
	// Раздел. Исчисление обязательных профессиональных пенсионных взносов
	
	// Сумма ОППВ, подлежащих перечислению
	// с выделение суммы по головной организации и филиалам
	Если СтруктураРеквизитовФормы.ВедетсяУчетОППВ Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ОППВРасчетыСФондами.Взнос) КАК ОППВ,
		|	СУММА(ВЫБОР
		|			КОГДА ОППВРасчетыСФондами.СтруктурнаяЕдиница = ОППВРасчетыСФондами.Налогоплательщик
		|				ТОГДА ОППВРасчетыСФондами.Взнос
		|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		|		КОНЕЦ) КАК ОППВЗаГоловнуюОрганизацию,
		|	СУММА(ВЫБОР
		|			КОГДА ОППВРасчетыСФондами.СтруктурнаяЕдиница <> ОППВРасчетыСФондами.Налогоплательщик
		|				ТОГДА ОППВРасчетыСФондами.Взнос
		|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		|		КОНЕЦ) КАК ОППВПоФилиалам
		|ИЗ
		|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами                                                  
		|ГДЕ
		|	ОППВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И ОППВРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|	И ОППВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		|	И ОППВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОППВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ОППВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ОППВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель	
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
		|";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл			
			
			// сумма социальных отчислений
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_00_003";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.ОППВЗаГоловнуюОрганизацию; // исключаем СП, показываемые в 200.03
			
		КонецЦикла;
	КонецЕсли;
    	
	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		//200.00.004 Сумма ОПВ, подлежащих перечислению
		// собственно за ИП
		
		Запрос.Текст = "
		|// ОПВ, подлежащие перечислению
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ОПВПодлежитПеречислениюВФонды.Взнос) КАК СуммаОПВПодлежащихПеречислению,
		|	СУММА(ВЫБОР
		|			КОГДА ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница = ОПВПодлежитПеречислениюВФонды.Налогоплательщик
		|				ТОГДА ОПВПодлежитПеречислениюВФонды.Взнос
		|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		|		КОНЕЦ) КАК СуммаОПВПодлежащихПеречислениюЗаГоловнуюОрганизацию,
		|	СУММА(ВЫБОР
		|			КОГДА ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница <> ОПВПодлежитПеречислениюВФонды.Налогоплательщик
		|				ТОГДА ОПВПодлежитПеречислениюВФонды.Взнос
		|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		|		КОНЕЦ) КАК СуммаОПВПодлежащихПеречислениюПоФилиалам
		|ИЗ                         
		|	РегистрНакопления.ОПВПодлежитПеречислениюВФонды КАК ОПВПодлежитПеречислениюВФонды
		|ГДЕ
		|	ОПВПодлежитПеречислениюВФонды.Налогоплательщик = &парамНалогоплательщик
		|	И ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|	И ОПВПодлежитПеречислениюВФонды.Период МЕЖДУ &парамПериодС И &парамПериодПо
		|	И ОПВПодлежитПеречислениюВФонды.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОПВПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
		|	И ОПВПодлежитПеречислениюВФонды.ФизЛицо = &парамИндивидуальныйПредприниматель	
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ)
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// сумма ОПВ, подлежащих перечислению
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_00_004";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.СуммаОПВПодлежащихПеречислениюЗаГоловнуюОрганизацию; // исключаем СП, показываемые в 200.03
			
		КонецЦикла;
		
	КонецЕсли;	
	/////////////////////////////////////////////////////////
	// Раздел. Исчисление социального налога с применением ставок, установленных п. 1, 3 ст. 358 Налогового кодекса
	// (общеустановленный режим)
	
	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо И ОрганизацияЯвляетсяПлательщикомСН Тогда

	
		// сумма исчисленного налога
		 
		Запрос.Текст = "ВЫБРАТЬ
		               |	НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		               |	СУММА(СНИсчисленный.Налог) КАК Налог,
		               |	СУММА(ВЫБОР
		               |			КОГДА СНИсчисленный.СтруктурнаяЕдиница = СНИсчисленный.Налогоплательщик
		               |				ТОГДА СНИсчисленный.Налог
		               |			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		               |		КОНЕЦ) КАК НалогЗаГоловнуюОрганизацию,
		               |	СУММА(ВЫБОР
		               |			КОГДА СНИсчисленный.СтруктурнаяЕдиница <> СНИсчисленный.Налогоплательщик
		               |				ТОГДА СНИсчисленный.Налог
		               |			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		               |		КОНЕЦ) КАК НалогПоФилиалам
		               |ИЗ
		               |	РегистрНакопления.СНИсчисленный КАК СНИсчисленный                                              
		               |ГДЕ
		               |	СНИсчисленный.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		               |	И СНИсчисленный.Налогоплательщик = &парамНалогоплательщик
		               |	И СНИсчисленный.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)		               
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			// сумма исчисленного налога
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_00_005";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.НалогЗаГоловнуюОрганизацию; // исключаем СП, показываемые в 200.03			
		
		КонецЦикла;
				              
	КонецЕсли;
	
	/////////////////////////////////////////////////////////
	// Раздел. Исчисление социального налога с применением ставки, установленной п. 2 ст. 358 Налогового кодекса
	// (ИП на общеустановленном режиме - 2 МРП за себя и 1 МРП за наемных работников)
	
	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И ОрганизацияЯвляетсяПлательщикомСН Тогда
		
		// возможно, что перешли на общеустановленный режим с упрощенного в середине налогового года, 
		// поэтому найдем по учетной политике НУ дату, с которой применяется общеустановленный режим
			
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	МИНИМУМ(УчетнаяПолитикаНУ.Период) КАК Период
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНУ
		|ГДЕ
		|	УчетнаяПолитикаНУ.Организация = &парамНалогоплательщик
		|	И УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН = ИСТИНА
		|	И УчетнаяПолитикаНУ.Период <= &парамПериодПо
		|";
			
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаНачалаРаботыНаОбщеустановленномРежиме = Макс(НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), Выборка.Период);
		Иначе
			ДатаНачалаРаботыНаОбщеустановленномРежиме = НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		КонецЕсли;
			
		Запрос.УстановитьПараметр("парамДатаНачалаРаботыНаОбщеустановленномРежиме", ДатаНачалаРаботыНаОбщеустановленномРежиме);
									
		// сумма налога
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|							КОГДА СНИсчисленный.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|								ТОГДА СНИсчисленный.ФизЛицо
		|							ИНАЧЕ NULL
		|						КОНЕЦ) КАК ЧисленностьНаемныхРаботников,
		|	СУММА(СНИсчисленный.Налог) КАК Налог,
		|	СУММА(ВЫБОР
		|			КОГДА СНИсчисленный.ФизЛицо = &парамИндивидуальныйПредприниматель
		|				ТОГДА СНИсчисленный.Налог
		|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		|		КОНЕЦ) КАК НалогЗаИП,
		|	СУММА(ВЫБОР
		|			КОГДА СНИсчисленный.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|				ТОГДА СНИсчисленный.Налог
		|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		|		КОНЕЦ) КАК НалогЗаРаботников
		|ИЗ
		|	РегистрНакопления.СНИсчисленный КАК СНИсчисленный                                               
		|ГДЕ
		|	СНИсчисленный.МесяцНалоговогоПериода МЕЖДУ &парамДатаНачалаРаботыНаОбщеустановленномРежиме И &парамПериодПо
		|	И СНИсчисленный.Налогоплательщик = &парамНалогоплательщик
		|	И СНИсчисленный.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)			
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ)		
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл			
						
			// Всего сумма налога
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_00_007";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.Налог;
			
		КонецЦикла;
			
	КонецЕсли;
	
	/////////////////////////////////////////////////////////
	// Раздел. Исчисление социальных отчислений
	
	// Сумма социальных отчислений, в том числе по головной организации и по филиалам
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(СОРасчетыСФондами.Отчисление) КАК СоциальныеОтчисления,
	|	СУММА(ВЫБОР
	|			КОГДА СОРасчетыСФондами.СтруктурнаяЕдиница = СОРасчетыСФондами.Налогоплательщик
	|				ТОГДА СОРасчетыСФондами.Отчисление
	|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК СоциальныеОтчисленияЗаГоловнуюОрганизацию,
	|	СУММА(ВЫБОР
	|			КОГДА СОРасчетыСФондами.СтруктурнаяЕдиница <> СОРасчетыСФондами.Налогоплательщик
	|				ТОГДА СОРасчетыСФондами.Отчисление
	|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК СоциальныеОтчисленияПоФилиалам
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами                                                 
	|ГДЕ
	|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И СОРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И СОРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель	
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// сумма социальных отчислений
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_200_00_008";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.СоциальныеОтчисленияЗаГоловнуюОрганизацию; // исключаем СП, показываемые в 200.03
	
	КонецЦикла;
	
	// Сумма социальных отчислений ИП в свою пользу
	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(СОРасчетыСФондами.Отчисление) КАК СоциальныеОтчисления,
		|	СУММА(ВЫБОР
		|			КОГДА СОРасчетыСФондами.СтруктурнаяЕдиница = СОРасчетыСФондами.Налогоплательщик
		|				ТОГДА СОРасчетыСФондами.Отчисление
		|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		|		КОНЕЦ) КАК СоциальныеОтчисленияЗаГоловнуюОрганизацию,
		|	СУММА(ВЫБОР
		|			КОГДА СОРасчетыСФондами.СтруктурнаяЕдиница <> СОРасчетыСФондами.Налогоплательщик
		|				ТОГДА СОРасчетыСФондами.Отчисление
		|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		|		КОНЕЦ) КАК СоциальныеОтчисленияПоФилиалам
		|ИЗ
		|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами                                                
		|ГДЕ
		|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И СОРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|	И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		|	И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И СОРасчетыСФондами.ФизЛицо = &парамИндивидуальныйПредприниматель	
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
		|";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// сумма социальных отчислений
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_00_009";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.СоциальныеОтчисленияЗаГоловнуюОрганизацию; // исключаем СП, показываемые в 200.03
			
		КонецЦикла;
	КонецЕсли;
	
	// Сумма отчислений ОСМС, в том числе по головной организации 
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	               |	СУММА(ООСМСРасчетыСФондами.Отчисление) КАК ООСМС,
	               |	СУММА(ВЫБОР
	               |			КОГДА ООСМСРасчетыСФондами.СтруктурнаяЕдиница = ООСМСРасчетыСФондами.Налогоплательщик
	               |				ТОГДА ООСМСРасчетыСФондами.Отчисление
	               |			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	               |		КОНЕЦ) КАК ООСМСЗаГоловнуюОрганизацию
				   |ИЗ
	               |	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
	               |ГДЕ
	               |	ООСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	               |	И ООСМСРасчетыСФондами.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	               |	И ООСМСРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	               |	И ООСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |	И ООСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	               |	И ООСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
				   |	" + ?(ОрганизацияЯвляетсяПлательщикомСН, "", "И ООСМСРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель") + "
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// сумма социальных отчислений
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_200_00_010";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.ООСМСЗаГоловнуюОрганизацию; // исключаем СП, показываемые в 200.03
	
	КонецЦикла;
	
	// Сумма взносов ОСМС, в том числе по головной организации 
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(ВОСМСПодлежитПеречислениюВФонды.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	               |	СУММА(ВОСМСПодлежитПеречислениюВФонды.Взнос) КАК ВОСМС,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница = ВОСМСПодлежитПеречислениюВФонды.Налогоплательщик
	               |				ТОГДА ВОСМСПодлежитПеречислениюВФонды.Взнос
	               |			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	               |		КОНЕЦ) КАК ВОСМСЗаГоловнуюОрганизацию
				   |ИЗ
	               |	РегистрНакопления.ВОСМСПодлежитПеречислениюВФонды КАК ВОСМСПодлежитПеречислениюВФонды
	               |ГДЕ
	               |	ВОСМСПодлежитПеречислениюВФонды.Налогоплательщик = &парамНалогоплательщик
	               |	И ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	               |	И ВОСМСПодлежитПеречислениюВФонды.Период МЕЖДУ &парамПериодС И &парамПериодПо
	               |	И ВОСМСПодлежитПеречислениюВФонды.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |	И ВОСМСПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
   				   |	" + ?(ОрганизацияЯвляетсяПлательщикомСН, "", "И ВОСМСПодлежитПеречислениюВФонды.ФизЛицо <> &парамИндивидуальныйПредприниматель") + "
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НАЧАЛОПЕРИОДА(ВОСМСПодлежитПеречислениюВФонды.Период, МЕСЯЦ)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// сумма социальных отчислений
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_200_00_011";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.ВОСМСЗаГоловнуюОрганизацию; // исключаем СП, показываемые в 200.03
	
	КонецЦикла; 
	
	// свернем строки по-месячно
	ТаблицаПоМесяцам.Свернуть("КодСтроки, МесяцНалоговогоПериода", "Значение");
	
	// рассчитываем итоговые графы за квартал и с начала года
	
	Начало1Мес = НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Начало2Мес = ДобавитьМесяц(Начало1Мес, 1);
	Начало3Мес = ДобавитьМесяц(Начало2Мес, 1);
	
	Для Каждого СтрокаТЗ Из ТаблицаПоМесяцам Цикл
			
		СтрокаРезультат = ТаблицаРезультат.Найти(СтрокаТЗ.КодСтроки, "КодСтроки");
		Если СтрокаРезультат = Неопределено Тогда
			СтрокаРезультат = ТаблицаРезультат.Добавить();
			СтрокаРезультат.КодСтроки = СтрокаТЗ.КодСтроки;
		КонецЕсли;
		
		Если СтрокаТЗ.МесяцНалоговогоПериода = Начало1Мес Тогда
			СтрокаРезультат.Значение1Мес = СтрокаРезультат.Значение1Мес + СтрокаТЗ.Значение;
		ИначеЕсли СтрокаТЗ.МесяцНалоговогоПериода = Начало2Мес Тогда
			СтрокаРезультат.Значение2Мес = СтрокаРезультат.Значение2Мес + СтрокаТЗ.Значение;
		ИначеЕсли СтрокаТЗ.МесяцНалоговогоПериода = Начало3Мес Тогда
			СтрокаРезультат.Значение3Мес = СтрокаРезультат.Значение3Мес + СтрокаТЗ.Значение;
		КонецЕсли;
		
		// квартальные итоги
		Если СтрокаТЗ.МесяцНалоговогоПериода >= Начало1Мес Тогда
			СтрокаРезультат.ЗначениеКвартал = СтрокаРезультат.ЗначениеКвартал + СтрокаТЗ.Значение;
		КонецЕсли; 		
		
	КонецЦикла;
	
		
	Если ТаблицаРезультат.Количество() = 0 и ВыдаватьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данные для заполнения формы 200.00 за отчетный период отсутствуют...'"));
	КонецЕсли;
				     	
	Возврат ТаблицаРезультат;		 
	
КонецФункции // Форма200РассчитатьДанныеФормы()

&НаКлиенте
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма200ЗаполнитьАвто(Перезаполнить = Ложь) 
	
	Состояние("Расчет формы 200.00");		
	
	Форма200ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры // Форма200ЗаполнитьАвто()

&НаСервере
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма200ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь) 
	
	ТекИмяФормы = "Форма200";
	Очистить(ТекИмяФормы, Истина);
	
	Если Перезаполнить Тогда	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Расчет основной формы приложения 200.00'"));
	КонецЕсли;	
	
	Форма200_01ЗаполнитьАвтоНаСервере(); 
	
	Форма200_02ЗаполнитьАвтоНаСервере();
	
	Форма200_03ЗаполнитьАвтоНаСервере();  
                          	
	//////////////////////////////////////////
	// Раздел. Расчетные показатели        	

	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ТекИмяФормы);

	ТаблицаРезультат = Форма200РассчитатьДанныеФормы();
	
	Для Каждого СтрокаРезультат Из ТаблицаРезультат Цикл

		Если СтрокаРезультат.КодСтроки = "КоличествоСтруктурныхЕдиницБезНалогоплательщика" Тогда
			Если СтруктураРеквизитовФормы.КоличествоСтруктурныхЕдиницБезНалогоплательщика <> 0 Тогда

				ИмяЯчейки = "КоличествоПриложений200_03";
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки, СтруктураРеквизитовФормы.КоличествоСтруктурныхЕдиницБезНалогоплательщика, Форма200ПолеТабличногоДокументаСтраница1);
			КонецЕсли;
		
		ИначеЕсли СтрокаРезультат.КодСтроки = "ЧисленностьРаботников" Тогда
		
			Для Н = 1 По 3 Цикл
				ИмяЯчейки = "ЧисленностьРаботников" + Н;
				ИтогЗнач = Окр(СтрокаРезультат["Значение" + Н + "Мес"]);
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки, ИтогЗнач, Форма200ПолеТабличногоДокументаСтраница1);
			КонецЦикла;
		
		ИначеЕсли СтрокаРезультат.КодСтроки = "s_200_00_001_A"  или СтрокаРезультат.КодСтроки = "s_200_00_001_B" Тогда

			ИмяЯчейки = СтрокаРезультат.КодСтроки;
			ИтогЗнач = Окр(СтрокаРезультат.Значение1Мес + СтрокаРезультат.Значение2Мес + СтрокаРезультат.Значение3Мес);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки, ИтогЗнач, Форма200ПолеТабличногоДокументаСтраница1);
			
		Иначе // все остальные ячейки обрабатываются одинаковым образом
			
			// округленное значение за квартал может оказаться больше суммы значений по месяцам
			// проверим и добавим к значению 1, т.к. максимальная погрешность при округлении может быть 1,47.
			Если Окр(СтрокаРезультат.ЗначениеКвартал) > Окр(СтрокаРезультат.Значение1Мес) + Окр(СтрокаРезультат.Значение2Мес)
				+ Окр(СтрокаРезультат.Значение3Мес) Тогда
				Если Окр(СтрокаРезультат.Значение1Мес) <> 0 Тогда
					СтрокаРезультат.Значение1Мес = СтрокаРезультат.Значение1Мес + 1;
				ИначеЕсли Окр(СтрокаРезультат.Значение2Мес) <> 0 Тогда
					СтрокаРезультат.Значение2Мес = СтрокаРезультат.Значение2Мес + 1;
				ИначеЕсли Окр(СтрокаРезультат.Значение3Мес) <> 0 Тогда
					СтрокаРезультат.Значение3Мес = СтрокаРезультат.Значение3Мес + 1;
				КонецЕсли;
			КонецЕсли;
			
			ИмяЯчейки = СтрокаРезультат.КодСтроки;
			
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки + "_1", Окр(СтрокаРезультат.Значение1Мес),    Форма200ПолеТабличногоДокументаСтраница1);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки + "_2", Окр(СтрокаРезультат.Значение2Мес),    Форма200ПолеТабличногоДокументаСтраница1);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки + "_3", Окр(СтрокаРезультат.Значение3Мес),    Форма200ПолеТабличногоДокументаСтраница1);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки + "_4", Окр(СтрокаРезультат.ЗначениеКвартал), Форма200ПолеТабличногоДокументаСтраница1);
		КонецЕсли;

	КонецЦикла;
	
	// Заполняем поле "Представленные приложения"
	//Для Каждого Форма Из СписокФормДерева.ПолучитьЭлементы()[0].ПолучитьЭлементы() Цикл 
	//	
	//	ИмяОбласти = "Приложение" + Прав(Форма.КодФормы,2);
	//	Если Форма200ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяОбласти) <> Неопределено Тогда
	//		Если Форма.Выгружать = 1 Тогда
	//			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяОбласти, "Х", Форма200ПолеТабличногоДокументаСтраница1);
	//		Иначе
	//			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяОбласти, "", Форма200ПолеТабличногоДокументаСтраница1);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;	
	
	//+
	// Заполняем поле "Представленные приложения"
	//ТекущаяСтрока = СписокФормДерева.ПолучитьЭлементы()[0];
	Для Каждого Форма Из СписокФормДерева.ПолучитьЭлементы()[0].ПолучитьЭлементы() Цикл            
		ИмяОбласти = "Приложение" + Прав(Форма.КодФормы,2);
		Если Форма200ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяОбласти) <> Неопределено Тогда 			
			СтрокиФорм = мСписокФормБезИерархии.ПолучитьЭлементы();			
			Для Каждого Строка Из СтрокиФорм Цикл
				Если Строка.КодФормы = Форма.КодФормы Тогда					
					Если Строка.Выгружать = 1 Тогда
						РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяОбласти, "Х", Форма200ПолеТабличногоДокументаСтраница1);
					Иначе
						РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяОбласти, "", Форма200ПолеТабличногоДокументаСтраница1);
					КонецЕсли;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 			
		КонецЕсли;
	КонецЦикла;
	//-
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);			
	
	// передаем в качестве признака перезаполнения Истина, т.к. это главная форма
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, ТекИмяФормы, Истина);
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);
	
	Модифицированность = Истина;
		
КонецПроцедуры // Форма200ЗаполнитьАвто()

&НаСервере
Процедура Форма200РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки, ТекИмяФормы)
	
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, ИмяЯчейки, ЗначениеЯчейки);
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ТекИмяФормы);			

	//Рассчитаем ячейки 4 и 5 (за квартал и с начала года)
	Для Н = 1 По 11 Цикл
				
		Если Н = 1 ИЛИ Н = 2 Тогда
			НомерСтраницы = "1";
		ИначеЕсли Н = 10 ИЛИ Н = 11 Тогда
			НомерСтраницы = "3";
		Иначе
			НомерСтраницы = "2";			
		КонецЕсли;
		
		Номер = Формат(Н,"ЧЦ=2; ЧДЦ=0; ЧВН=");
		// графа 4
		ИтогЗначение = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_200_00_0" + Номер + "_1")
						+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_200_00_0" + Номер + "_2")
						+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_200_00_0" + Номер + "_3");
					
		Строка = ТаблицаДанных.Найти("s_200_00_0" + Номер + "_4","ИмяОбласти");
		Если Строка <> Неопределено Тогда
			Строка.Значение = ИтогЗначение;
		КонецЕсли;
		
		ЭтаФорма["Форма200ПолеТабличногоДокументаСтраница"+ НомерСтраницы].Области["s_200_00_0" + Номер + "_4"].Значение = ИтогЗначение;
		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ("s_200_00_0" + Номер + "_4"), ИтогЗначение);
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура Форма200Расчет(ИмяЯчейки, ЗначениеЯчейки)
	
	Форма200РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки, КодФормы)
	
КонецПроцедуры

&НаКлиенте
Процедура Форма200ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Область)
	
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма200Расчет(Область.Имя, Область.Значение);
	КонецЕсли;
	    	    
	Модифицированность = Истина;
	
КонецПроцедуры	

&НаКлиенте
Процедура Форма200ПолеТабличногоДокументаВыбор(Область)

	ИмяОбласти = Область.Имя;	
	
	Если (Найти(ИмяОбласти, "Признак7A") > 0)
		ИЛИ (Найти(ИмяОбласти, "Признак7B") > 0)
		ИЛИ (Найти(ИмяОбласти, "Признак7C") > 0)
		ИЛИ (Найти(ИмяОбласти, "Признак7D") > 0)
		ИЛИ (Найти(ИмяОбласти, "Признак7E") > 0)
	Тогда
	 
	 	Если Область.Значение = "Х" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "Х";
		КонецЕсли;
		
		Форма200ПолеТабличногоДокументаВыборНаСервере(ИмяОбласти, Область.Значение);
		
	КонецЕсли;
	
	Если (Найти(ИмяОбласти, "Резидент") > 0)
	 ИЛИ (Найти(ИмяОбласти, "Нерезидент") > 0) Тогда
	 	Если Область.Значение = "Х" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "Х";
		КонецЕсли;		
		Форма200ПолеТабличногоДокументаВыборНаСервере(ИмяОбласти, Область.Значение);
		
	КонецЕсли;

	
КонецПроцедуры
 
&НаСервере
Процедура Форма200ПолеТабличногоДокументаВыборНаСервере(ИмяОбласти, ЗначениеОбласти)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяОбласти, ЗначениеОбласти, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура Форма200Расшифровка(ИмяЯчейки)
	
	ДатаНачала = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ДатаОкончания = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
		
	Если Прав(ИмяЯчейки,1) = "1" Тогда // месяц 1
		ДатаНачала = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
		ДатаОкончания = КонецМесяца(ДатаНачала);
	ИначеЕсли Прав(ИмяЯчейки,1) = "2" Тогда // месяц 
		ДатаНачала = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,1);
		ДатаОкончания = КонецМесяца(ДатаНачала);
	ИначеЕсли Прав(ИмяЯчейки,1) = "3" Тогда // месяц 
		ДатаНачала = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,2);
		ДатаОкончания = КонецМесяца(ДатаНачала);
	ИначеЕсли Прав(ИмяЯчейки,1) = "4" Тогда // месяц 
		ДатаНачала = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
		ДатаОкончания = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	КонецЕсли;
	
	// Если в строках по самому ИП, то установим отбор по физ лицу	
	Если ПолучитьЗначениеРеквизита(Налогоплательщик, "ЮрФизЛицо") = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		Если Лев(ИмяЯчейки,12) = "s_200_00_004" 
			ИЛИ Лев(ИмяЯчейки,12) = "s_200_00_009" 	Тогда
			// ячейки данных по ИП
			
			СтруктураПоФизЛицу = Новый Структура;
			СтруктураПоФизЛицу.Вставить("ФизЛицо", ПолучитьЗначениеРеквизита(Налогоплательщик, "ИндивидуальныйПредприниматель"));
			СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);									
		ИначеЕсли Лев(ИмяЯчейки,12) <> "s_200_00_007" Тогда	 
			СтруктураПоФизЛицу = Новый Структура;
			СтруктураПоФизЛицу.Вставить("ФизЛицо", ПолучитьЗначениеРеквизита(Налогоплательщик, "ИндивидуальныйПредприниматель"));
			СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.НеРавно);									
		КонецЕсли;			
	КонецЕсли;
	
	// в основной форме показываем данные только головного предприятия
	ОтборПоСП = Неопределено;
	Если Лев(ИмяЯчейки,12) = "s_200_00_001"
		ИЛИ Лев(ИмяЯчейки,12) = "s_200_00_002"
		ИЛИ Лев(ИмяЯчейки,12) = "s_200_00_003"
		ИЛИ Лев(ИмяЯчейки,12) = "s_200_00_005"
		ИЛИ Лев(ИмяЯчейки,12) = "s_200_00_008"
		ИЛИ Лев(ИмяЯчейки,12) = "s_200_00_010"
		ИЛИ Лев(ИмяЯчейки,12) = "s_200_00_011" Тогда
		
		ОтборПоСП = Налогоплательщик;
		// в этих строках показываются данные по голове (за исключением СП, отображаемых в 200.03)
	КонецЕсли;
	
	ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(ДатаНачала, ДатаОкончания, ОтборПоСП, СтруктураПоФизЛицу);
	
КонецПроцедуры // Форма200Расшифровка()


////////////////////////////////////////////////////////////////////////////////
// Форма 200.01

&НаСервере
Функция Форма200_01РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
	ТаблицаПоМесяцам = Новый ТаблицаЗначений;
	
	ТаблицаПоМесяцам.Колонки.Добавить("КодСтроки", 				ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаПоМесяцам.Колонки.Добавить("МесяцНалоговогоПериода", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаПоМесяцам.Колонки.Добавить("Значение", 				ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));

	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("КодСтроки", 			ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаРезультат.Колонки.Добавить("Значение1Мес", 		ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Значение2Мес", 		ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Значение3Мес", 		ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("ЗначениеКвартал", 	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("ЗначениеСНачГода", 	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ТаблицаРезультат.Индексы.Добавить("КодСтроки");

	Запрос = Новый Запрос;
	
	РасчетПоВидамДоходовИОблагаемойБазе = Метаданные.РегистрыНакопления.ИПНСведенияОДоходах.Ресурсы.Найти("ОблагаемаяБаза") <> Неопределено;
	
	Запрос.УстановитьПараметр("парамПериодС", 					НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парам1Мес", 						НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парам2Мес", 						ДобавитьМесяц(НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), 1));
	Запрос.УстановитьПараметр("парам3Мес", 						ДобавитьМесяц(НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), 2));
	Запрос.УстановитьПараметр("парамПериодПо", 					КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПослеПериодПо", 			КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) + 1);
	Запрос.УстановитьПараметр("парамНалогоплательщик",	 		Налогоплательщик);
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", 	мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());
	
	// если налогоплательщик - ИП, то исключим данные самого индивидуального предпринимателя
	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Налогоплательщик.ИндивидуальныйПредприниматель);
	Иначе
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Неопределено);
	КонецЕсли;
	
	МТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МТ;
		
	// Получим данные учетной политики
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации,
	|	УчетнаяПолитикаНУ.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ,
	|	УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН,
	|	УчетнаяПолитикаНУ.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя,
	|	УчетнаяПолитикаНУ.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодПо, Организация = &парамНалогоплательщик) КАК УчетнаяПолитикаНУ
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОтражениеПоПериодуРегистрации 				= Выборка.ОтражениеПоПериодуРегистрации;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Выборка.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ;
		ОрганизацияЯвляетсяПлательщикомСН			= Выборка.ОрганизацияЯвляетсяПлательщикомСН;
		КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = Выборка.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя;
		КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника = Выборка.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника;
	Иначе
		ОтражениеПоПериодуРегистрации 				= Ложь;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Ложь;
		ОрганизацияЯвляетсяПлательщикомСН			= Ложь;
		КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = 0;
		КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника = 0;
	КонецЕсли;
	
	// Получим необходимые данные
	
	// ряд строк заполняются только в случае наличия у налогового агента структурных подразделений	
	Если мСписокСтруктурныхЕдиниц.Количество() = 1 И мСписокСтруктурныхЕдиниц.НайтиПоЗначению(Налогоплательщик) <> Неопределено Тогда
		ЕстьСтруктурныеЕдиницыУНалогоплательщика = Ложь;
	Иначе
		ЕстьСтруктурныеЕдиницыУНалогоплательщика = Истина;
	КонецЕсли;

	/////////////////////////////////////////////////////////
	// Раздел. Исчисление индивидуального подоходного налога
 	
	// Начисленные и облагаемые доходы
	ТекстЗапроса = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	               |			КОГДА ИПНСведенияОДоходах.СтруктурнаяЕдиница <> ИПНСведенияОДоходах.Налогоплательщик
	               |				ТОГДА ИПНСведенияОДоходах.СтруктурнаяЕдиница
	               |			ИНАЧЕ NULL
	               |		КОНЕЦ) КАК КоличествоСтруктурныхЕдиницБезНалогоплательщика,
	               |	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	               |	ВЫБОР КОГДА ИПНСведенияОДоходах.ФизЛицо Ссылка Справочник.ФизическиеЛица Тогда ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ""200.01.001.A"") ИНАЧЕ ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ""200.01.001"") КОНЕЦ КАК КодСтроки, // для контрагентов калссифицируем доход с незаполненным кодом строки как прочий доход
	               |	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) КАК НачисленныеДоходы,
	               |	СУММА(ВЫБОР
	               |			КОГДА ИПНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	               |				ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот - ИПНСведенияОДоходах.СуммаВычетаОборот
	               |			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	               |		КОНЕЦ) КАК ДоходыОблагаемыеИПН
	               |ИЗ
	               |	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	               |			&парамПериодС,
	               |			&парамПериодПо,
	               |			МЕСЯЦ,
	               |			Налогоплательщик = &парамНалогоплательщик
	               |				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	               |				И ФизЛицо <> &парамИндивидуальныйПредприниматель
	               |				И ВЫБОР
	               |					КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |						ТОГДА НЕ ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ) КАК ИПНСведенияОДоходах
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоСН.СрезПоследних(&парамПериодПо, ) КАК КодыСтрокДекларации
	               |		ПО ИПНСведенияОДоходах.ВидРасчета = КодыСтрокДекларации.ВидРасчета
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ),
	               |	ВЫБОР КОГДА ИПНСведенияОДоходах.ФизЛицо Ссылка Справочник.ФизическиеЛица Тогда ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ""200.01.001.A"") ИНАЧЕ ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ""200.01.001"") КОНЕЦ";
		
	// Необходимо добавить получателей по исполнительным листам
	Если ПризнакАлиментов Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// ставим приходы по ИЛ как начисление получателям алиментов
		|ВЫБРАТЬ		
		|	0 КАК КоличествоСтруктурныхЕдиницБезНалогоплательщика,
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	Неопределено,		
		|	СУММА(ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовПриход) КАК НачисленныеДоходы,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДоходыОблагаемыеИПН
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Обороты(
		|				&парамПериодС,
		|				&парамПериодПо,
		|				МЕСЯЦ,
		|				Налогоплательщик = &парамНалогоплательщик
		|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|				И Получатель.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)		
		|				) КАК ВзаиморасчетыСПолучателямиИЛ		
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.Период, МЕСЯЦ)
		|";		
				
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл		
		
		// начисленные доходы
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_200_01_001";
		НоваяСтрока.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.НачисленныеДоходы;
		
		// доход относим к строке А	или B
		// может быть указан код "200.00.001.B",  "200.00.001.B", "910.00.001.B",  "910.00.019.B" или  "910.00.021.B"
		// русскими либо латинскими буквами
		Если (Найти(СокрЛП(Выборка.КодСтроки), "B") > 0)
			Или (Найти(СокрЛП(Выборка.КодСтроки), "В") > 0) Тогда
			
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_001_B";
			НоваяСтрока.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.НачисленныеДоходы;		
		ИначеЕсли (Найти(СокрЛП(Выборка.КодСтроки), "A") > 0)
			ИЛИ (Найти(СокрЛП(Выборка.КодСтроки), "А") > 0) Тогда

			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_001_A";
			НоваяСтрока.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.НачисленныеДоходы;		
		КонецЕсли;		
	КонецЦикла;
	
	// В сумму начисленных доходов могут включаться начисление ОППВ
	Если ВключатьОППВВДоходыРаботников Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ОППВРасчетыСФондами.Взнос) КАК ОППВ,
		|	СУММА(ВЫБОР
		|			КОГДА ОППВРасчетыСФондами.СтруктурнаяЕдиница = ОППВРасчетыСФондами.Налогоплательщик
		|				ТОГДА ОППВРасчетыСФондами.Взнос
		|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		|		КОНЕЦ) КАК ОППВЗаГоловнуюОрганизацию,
		|	СУММА(ВЫБОР
		|			КОГДА ОППВРасчетыСФондами.СтруктурнаяЕдиница <> ОППВРасчетыСФондами.Налогоплательщик
		|				ТОГДА ОППВРасчетыСФондами.Взнос
		|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		|		КОНЕЦ) КАК ОППВПоФилиалам
		|ИЗ
		|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами                                                 
		|ГДЕ
		|	ОППВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И ОППВРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|	И ОППВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		|	И ОППВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОППВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ОППВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ОППВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель	
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
		|";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл			
			
			// сумма ОППВ в доходах работников
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_001_A";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.ОППВ; // общая сумма ОППВ по работникам организации и филиалов
			
			// сумма ОППВ в строке "Начисленные доходы"
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_001";
			НоваяСтрока.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.ОППВ;			
		КонецЦикла;
	КонецЕсли;
		
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Вычеты, льготы и налог
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(ИПНРасчетыСБюджетом.Налог) КАК ИндивидуальныйПодоходныйНалог
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|ГДЕ
	|	ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик
	|	И ИПНРасчетыСБюджетом.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И ИПНРасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)	
	|	И ИПНРасчетыСБюджетом.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И (ВЫБОР
	|		КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|			ТОГДА НЕ ИПНРасчетыСБюджетом.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|		ИНАЧЕ ИСТИНА
	|	  КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ)
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	    
		// сумма исчисленного индивидуального подоходного налога
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_200_01_002";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.ИндивидуальныйПодоходныйНалог;
		
	КонецЦикла;
	
	// ИПН по доходам начисленным, но невыплаченным на начало и конец квартала
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ИПНРасчетыСБюджетом.НалогНачальныйОстаток КАК ИПННачальныйОстаток,
	               |	0 КАК ИПНКонечныйОстаток
	               |ИЗ
	               |	РегистрНакопления.ИПНРасчетыСБюджетом.ОстаткиИОбороты(
	               |			&парамПериодС,
	               |			&парамПериодПо,
	               |			,
	               |			,
	               |			Налогоплательщик = &парамНалогоплательщик
	               |				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	               |				И ФизЛицо <> &парамИндивидуальныйПредприниматель
	               |				И ВЫБОР
	               |					КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |						ТОГДА НЕ ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ
				   |			) КАК ИПНРасчетыСБюджетом
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	0,
	               |	ИПНРасчетыСБюджетом.НалогКонечныйОстаток
	               |ИЗ
	               |	РегистрНакопления.ИПНРасчетыСБюджетом.ОстаткиИОбороты(
	               |			&парамПериодС,
	               |			&парамПериодПо,
	               |			,
	               |			,
	               |			Налогоплательщик = &парамНалогоплательщик
	               |				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	               |				И ФизЛицо <> &парамИндивидуальныйПредприниматель
	               |				И ВЫБОР
	               |					КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |						ТОГДА НЕ ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ
	      		   |				) КАК ИПНРасчетыСБюджетом
	               |ИТОГИ
	               |	СУММА(ИПННачальныйОстаток),
	               |	СУММА(ИПНКонечныйОстаток)
	               |ПО
	               |	ОБЩИЕ";
	                        	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
	    
		// сумма исчисленного индивидуального подоходного налога
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_200_01_004";
		НоваяСтрока.МесяцНалоговогоПериода 	= СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
		НоваяСтрока.Значение 				= Выборка.ИПННачальныйОстаток;
		
		// сумма исчисленного индивидуального подоходного налога
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_200_01_005";
		НоваяСтрока.МесяцНалоговогоПериода 	= НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		НоваяСтрока.Значение 				= Выборка.ИПНКонечныйОстаток;
		
	КонецЦикла;
             
	// Задолженность по доходам, невыплаченным физическим лицам
	
	ТекстЗапроса = "
	|// Задолженность по доходам, невыплаченным физлицам, из текущих взаиморасчетов
	|ВЫБРАТЬ
	|	ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток КАК ЗадолженностьПоДоходам
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(
	|			&парамПослеПериодПо,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ВзаиморасчетыСРаботниками                           
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Задолженность по доходам, невыплаченным физлицам, из депонированных сумм
	|ВЫБРАТЬ
	|	ВзаиморасчетыСДепонентами.СуммаВзаиморасчетовОстаток КАК ЗадолженностьПоДоходам
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций.Остатки(
	|			&парамПослеПериодПо,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ВзаиморасчетыСДепонентами                          
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Задолженность по доходам, невыплаченным физлицам, из оплаты по актам закупа
	|ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиФизЛицами.СуммаВзаиморасчетовОстаток КАК ЗадолженностьПоДоходам
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами.Остатки(
	|			&парамПослеПериодПо,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И НЕ Контрагент.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус) КАК ВзаиморасчетыСКонтрагентамиФизЛицами
	|";		
		
	// Если суммы удержаний по исполнительным листам включаются по фактическому перечислению
	Если Не ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ Тогда

		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// ставим остатки сумм по ИЛ как задолженность по невыплаченным доходам работникам, с которых удержаны ИЛ
		|ВЫБРАТЬ
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовОстаток + ВзаиморасчетыСПолучателямиИЛ.СуммаСборовОстаток КАК ЗадолженностьПоДоходам
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Остатки(
		|				&парамПослеПериодПо,
		|				Налогоплательщик = &парамНалогоплательщик
		|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|				И ДокументОснование.ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ВзаиморасчетыСПолучателямиИЛ           
		|";		
		
	//Иначе
		// удержания по ИЛ уже находятся в регистре накопления ВыплаченныеДоходыРаботникамОрганизацийНУ
	КонецЕсли;
	
	// Необходимо добавить получателей по исполнительным листам
	Если ПризнакАлиментов Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// ставим остатки сумм по ИЛ как задолженность по невыплаченным доходам получателям ИЛ
		|ВЫБРАТЬ
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовОстаток КАК ЗадолженностьПоДоходам
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Остатки(
		|				&парамПослеПериодПо,
		|				Налогоплательщик = &парамНалогоплательщик
		|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|				И Получатель.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)		      								  
		|				) КАК ВзаиморасчетыСПолучателямиИЛ
		|";		
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

	    // задолженность по доходам, невыплаченным физическим лицам
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_200_01_003";
		НоваяСтрока.МесяцНалоговогоПериода 	= НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		НоваяСтрока.Значение 				= Выборка.ЗадолженностьПоДоходам;
	
	КонецЦикла;
	
	// Выплачено доходов
	
	ТекстЗапроса = "
	|// Выплата доходов
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВыплаченныеДоходы.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,	
	|	ВыплаченныеДоходы.СуммаДоходаОборот КАК ВыплаченоДоходов
	|ИЗ
	|	РегистрНакопления.ВыплаченныеДоходыРаботникамОрганизацийНУ.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель
	|			И ВЫБОР
	|				КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	|					ТОГДА НЕ ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|				ИНАЧЕ ИСТИНА
	|			  КОНЕЦ) КАК ВыплаченныеДоходы
	|";		
	
	// Если суммы удержаний по исполнительным листам включаются по фактическому перечислению
	Если Не ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ Тогда

		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// ставим перечисление алиментов - как выплату доходов для работников-алименщиков
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовРасход + ВзаиморасчетыСПолучателямиИЛ.СуммаСборовРасход КАК ВыплаченоДоходов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Обороты(
		|				&парамПериодС,
		|				&парамПериодПо,
		|				МЕСЯЦ,
		|				Налогоплательщик = &парамНалогоплательщик
		|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|				И ДокументОснование.ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ВзаиморасчетыСПолучателямиИЛ            
		|";		
		
	//Иначе
		// удержания по ИЛ уже находятся в регистре накопления ВыплаченныеДоходыРаботникамОрганизацийНУ
	КонецЕсли;
	
	// Необходимо добавить получателей по исполнительным листам
	Если ПризнакАлиментов Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// ставим перечисление алиментов как выплату доходов получателям ИЛ
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовРасход КАК ВыплаченоДоходов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Обороты(
		|				&парамПериодС,
		|				&парамПериодПо,
		|				МЕСЯЦ,
		|				Налогоплательщик = &парамНалогоплательщик
		|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|				И Получатель.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)		
		|				) КАК ВзаиморасчетыСПолучателямиИЛ		
		|";		
		
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
	    // выплачено доходов
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_200_01_006";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.ВыплаченоДоходов;
		
	КонецЦикла;
	
	/////////////////////////////////////////////////////////
	// Раздел. Исчисление обязательных пенсионных взносов
	
	// Исчисленные пенсионные взносы    
	Если РасчетПоВидамДоходовИОблагаемойБазе Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
				    |	НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
				    |	СУММА(ВЫБОР
				    |			КОГДА ОПВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
				    |				ТОГДА ОПВСведенияОДоходах.ОблагаемаяБазаОборот
				    |			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
				    |		КОНЕЦ) КАК ОблагаемаяБазаОПВ
				    |ИЗ
				    |	РегистрНакопления.ОПВСведенияОДоходах.Обороты(
				    |			&парамПериодС,
				    |			&парамПериодПо,
				    |			МЕСЯЦ,
				    |			Налогоплательщик = &парамНалогоплательщик
				    |				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
				    |				И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ОПВСведенияОДоходах
				    |
				    |СГРУППИРОВАТЬ ПО
				    |	НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ)";
	
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл	      	
			// для расчета строки 200.01.007 начисленные доходы, с которых удерживаются (начисляются) ОПВ
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_007";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.ОблагаемаяБазаОПВ;			
		КонецЦикла;
		
		Если СтруктураРеквизитовФормы.ВедетсяУчетОППВ Тогда
			Запрос.Текст = "ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(ОППВСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
			|	СУММА(ВЫБОР
			|			КОГДА ОППВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
			|				ТОГДА ОППВСведенияОДоходах.ОблагаемаяБазаОборот
			|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
			|		КОНЕЦ) КАК ОблагаемаяБазаОППВ
			|ИЗ
			|	РегистрНакопления.ОППВСведенияОДоходах.Обороты(
			|			&парамПериодС,
			|			&парамПериодПо,
			|			МЕСЯЦ,
			|			Налогоплательщик = &парамНалогоплательщик
			|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
			|				И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ОППВСведенияОДоходах
			|
			|СГРУППИРОВАТЬ ПО
			|	НАЧАЛОПЕРИОДА(ОППВСведенияОДоходах.Период, МЕСЯЦ)";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл	      	
				// для расчета строки 200.01.008 начисленные доходы, с которых удерживаются (начисляются) ОППВ
				НоваяСтрока = ТаблицаПоМесяцам.Добавить();
				НоваяСтрока.КодСтроки = "s_200_01_008";
				НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
				НоваяСтрока.Значение 				= Выборка.ОблагаемаяБазаОППВ;						
			КонецЦикла;
		КонецЕсли;
		
		Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда	
			// 200.01.009 Заявляемый доход для исчисления ОПВ
			Запрос.Текст =  "ВЫБРАТЬ
					    |	НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
					    |	СУММА(ВЫБОР
					    |			КОГДА ОПВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
					    |				ТОГДА ОПВСведенияОДоходах.ОблагаемаяБазаОборот
					    |			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
					    |		КОНЕЦ) КАК ОблагаемаяБазаОПВ
					    |ИЗ
					    |	РегистрНакопления.ОПВСведенияОДоходах.Обороты(
					    |			&парамПериодС,
					    |			&парамПериодПо,
					    |			МЕСЯЦ,
					    |			Налогоплательщик = &парамНалогоплательщик
					    |				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
					    |				И ФизЛицо = &парамИндивидуальныйПредприниматель) КАК ОПВСведенияОДоходах
					    |
					    |СГРУППИРОВАТЬ ПО
					    |	НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ)";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл	      	
				// для расчета строки 200.01.009 начисленные доходы, с которых удерживаются (начисляются) ОПВ
				НоваяСтрока = ТаблицаПоМесяцам.Добавить();
				НоваяСтрока.КодСтроки = "s_200_01_009";
				НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
				НоваяСтрока.Значение 				= Выборка.ОблагаемаяБазаОПВ;			
			КонецЦикла;
		КонецЕсли;
		
		/////////////////////////////////////////////////////////
		// Раздел. Исчисление социального налога с применением ставок, установленных п. 1, 3 ст. 358 Налогового кодекса
		// (общеустановленный режим)
		
		Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо И ОрганизацияЯвляетсяПлательщикомСН Тогда

			Запрос.Текст =  "ВЫБРАТЬ
						    |	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
						    |	СУММА(ВЫБОР
						    |			КОГДА СНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
						    |				ТОГДА СНСведенияОДоходах.ОблагаемаяБазаОборот
						    |			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
						    |		КОНЕЦ) КАК ОблагаемаяБазаСН
							|ИЗ
						    |	РегистрНакопления.СНСведенияОДоходах.Обороты(
						    |			&парамПериодС,
						    |			&парамПериодПо,
						    |			МЕСЯЦ,
						    |			Налогоплательщик = &парамНалогоплательщик
						    |				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)) КАК СНСведенияОДоходах
						    |
						    |СГРУППИРОВАТЬ ПО
						    |	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ)"; 
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				// объект налогообложения социальным налогом
				НоваяСтрока = ТаблицаПоМесяцам.Добавить();
				НоваяСтрока.КодСтроки = "s_200_01_013";
				НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
				НоваяСтрока.Значение 				= Выборка.ОблагаемаяБазаСН;		
	            					
			КонецЦикла;
		КонецЕсли;    	
	
		/////////////////////////////////////////////////////////
		// Раздел. Исчисление социальных отчислений
		
		// 200.01.014 Сумма социальных отчислений
  	
		Запрос.Текст =  "ВЫБРАТЬ
					    |	НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
					    |	СУММА(ВЫБОР
					    |			КОГДА СОСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
					    |				ТОГДА СОСведенияОДоходах.ОблагаемаяБазаОборот
					    |			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
					    |		КОНЕЦ) КАК ОблагаемаяБазаСО
						|ИЗ
					    |	РегистрНакопления.СОСведенияОДоходах.Обороты(
					    |			&парамПериодС,
					    |			&парамПериодПо,
					    |			МЕСЯЦ,
					    |			Налогоплательщик = &парамНалогоплательщик
					    |				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
					    |				И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК СОСведенияОДоходах
					    |
					    |СГРУППИРОВАТЬ ПО
					    |	НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ)"; 
													
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// для расчета доходов физлиц, с которых исчисляются социальные отчисления
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_014";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.ОблагаемаяБазаСО;	
		
		КонецЦикла;
	
		Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		// 200.01.015 Сумма социальных отчислений в свою пользу
			Запрос.Текст =  "ВЫБРАТЬ
					    |	НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
					    |	СУММА(ВЫБОР
					    |			КОГДА СОСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
					    |				ТОГДА СОСведенияОДоходах.ОблагаемаяБазаОборот
					    |			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
					    |		КОНЕЦ) КАК ОблагаемаяБазаСО
						|ИЗ
					    |	РегистрНакопления.СОСведенияОДоходах.Обороты(
					    |			&парамПериодС,
					    |			&парамПериодПо,
					    |			МЕСЯЦ,
					    |			Налогоплательщик = &парамНалогоплательщик
					    |				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
					    |				И ФизЛицо = &парамИндивидуальныйПредприниматель) КАК СОСведенияОДоходах
					    |
					    |СГРУППИРОВАТЬ ПО
					    |	НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ)"; 

			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
								
				// облагаемая база социальные отчисления
				НоваяСтрока = ТаблицаПоМесяцам.Добавить();
				НоваяСтрока.КодСтроки = "s_200_01_015";
				НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
				НоваяСтрока.Значение 				= Выборка.ОблагаемаяБазаСО;	
				
			КонецЦикла;

		КонецЕсли;	
		
		// 200.01.016 Сумма отчислений ОСМС
  	    Запрос.Текст =  "ВЫБРАТЬ
  	                    |	НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
  	                    |	СУММА(ВЫБОР
  	                    |			КОГДА ООСМССведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
  	                    |				ТОГДА ООСМССведенияОДоходах.ОблагаемаяБазаОборот
  	                    |			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
  	                    |		КОНЕЦ) КАК ОблагаемаяБазаООСМС
  	                    |ИЗ
  	                    |	РегистрНакопления.ООСМССведенияОДоходах.Обороты(
  	                    |			&парамПериодС,
  	                    |			&парамПериодПо,
  	                    |			МЕСЯЦ,
  	                    |			Налогоплательщик = &парамНалогоплательщик
  	                    |				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
  	                    |				" + ?(ОрганизацияЯвляетсяПлательщикомСН, "", "И ФизЛицо <> &парамИндивидуальныйПредприниматель") + "
						|					) КАК ООСМССведенияОДоходах
  	                    |
  	                    |СГРУППИРОВАТЬ ПО
  	                    |	НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ)"; 
													
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// для расчета доходов физлиц, с которых исчисляются социальные отчисления
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_016";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.ОблагаемаяБазаООСМС;	
		
		КонецЦикла;

		// 200.01.017 Сумма взносов ОСМС
  	    Запрос.Текст =  "ВЫБРАТЬ
  	                    |	НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
  	                    |	СУММА(ВЫБОР
  	                    |			КОГДА ВОСМССведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
  	                    |				ТОГДА ВОСМССведенияОДоходах.ОблагаемаяБазаОборот
  	                    |			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
  	                    |		КОНЕЦ) КАК ОблагаемаяБазаВОСМС
  	                    |ИЗ
  	                    |	РегистрНакопления.ВОСМССведенияОДоходах.Обороты(
  	                    |			&парамПериодС,
  	                    |			&парамПериодПо,
  	                    |			МЕСЯЦ,
  	                    |			Налогоплательщик = &парамНалогоплательщик
  	                    |				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
  	                    |				" + ?(ОрганизацияЯвляетсяПлательщикомСН, "", "И ФизЛицо <> &парамИндивидуальныйПредприниматель") + "
						|							) КАК ВОСМССведенияОДоходах
  	                    |
  	                    |СГРУППИРОВАТЬ ПО
  	                    |	НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ)"; 
													
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// для расчета доходов физлиц, с которых исчисляются социальные отчисления
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_017";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.ОблагаемаяБазаВОСМС;	
		
		КонецЦикла;
	
	Иначе 
		// учет по облагаемой базе и ОППВ не ведется
		
		/////////////////////////////////////////////////////////
		// Раздел. Исчисление обязательных пенсионных взносов
	
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныеОПВ 
		|ИЗ
		|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами                                        
		|ГДЕ
		|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И ОПВРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|	И ОПВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)	
		|	И ОПВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл	      	
			// для расчета строки 200.01.007 начисленные доходы, с которых удерживаются (начисляются) ОПВ
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_007";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.ИсчисленныеОПВ;			
		КонецЦикла; 		
		
		/////////////////////////////////////////////////////////
		// Раздел. Исчисление обязательных профессиональных пенсионных взносов
	
		// Раздел не заполняется, так как в конфигурациях до ввода ресурсов по облагаемой базе, механизмы ОППВ так же отсутствуют
		
		
		// Исчисление обязательных пенсионных взносов
		Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда	
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
			|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныеОПВ   
			|ИЗ
			|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами                                        
			|ГДЕ
			|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
			|	И ОПВРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
			|	И ОПВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
			|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
			|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)	
			|	И ОПВРасчетыСФондами.ФизЛицо = &парамИндивидуальныйПредприниматель
			|
			|СГРУППИРОВАТЬ ПО
			|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
			|";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл	      	
				// для расчета строки 200.01.009 начисленные доходы, с которых удерживаются (начисляются) ОПВ
				НоваяСтрока = ТаблицаПоМесяцам.Добавить();
				НоваяСтрока.КодСтроки = "s_200_01_009";
				НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
				НоваяСтрока.Значение 				= Выборка.ИсчисленныеОПВ;			
			КонецЦикла;
		КонецЕсли;
	
		/////////////////////////////////////////////////////////
		// Раздел. Исчисление социального налога с применением ставок, установленных п. 1, 3 ст. 358 Налогового кодекса
		// (общеустановленный режим)
	
		Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо И ОрганизацияЯвляетсяПлательщикомСН Тогда
			Запрос.Текст = "ВЫБРАТЬ
		               |	НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		               |	СУММА(СНИсчисленный.Налог) КАК Налог,
		               |	СУММА(ВЫБОР
		               |			КОГДА СНИсчисленный.СтруктурнаяЕдиница = СНИсчисленный.Налогоплательщик
		               |				ТОГДА СНИсчисленный.Налог
		               |			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		               |		КОНЕЦ) КАК НалогЗаГоловнуюОрганизацию,
		               |	СУММА(ВЫБОР
		               |			КОГДА СНИсчисленный.СтруктурнаяЕдиница <> СНИсчисленный.Налогоплательщик
		               |				ТОГДА СНИсчисленный.Налог
		               |			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		               |		КОНЕЦ) КАК НалогПоФилиалам
		               |ИЗ
		               |	РегистрНакопления.СНИсчисленный КАК СНИсчисленный                                             
		               |ГДЕ
		               |	СНИсчисленный.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		               |	И СНИсчисленный.Налогоплательщик = &парамНалогоплательщик
		               |	И СНИсчисленный.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)	
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ)";
		
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				// объект налогообложения социальным налогом
				НоваяСтрока = ТаблицаПоМесяцам.Добавить();
				НоваяСтрока.КодСтроки = "s_200_01_013";
				НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
				НоваяСтрока.Значение 				= Выборка.Налог;			
	            					
			КонецЦикла;
		КонецЕсли;   	
	
		/////////////////////////////////////////////////////////
		// Раздел. Исчисление социальных отчислений
	
		// 200.01.014 Сумма социальных отчислений
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(СОРасчетыСФондами.Отчисление) КАК СоциальныеОтчисления,
		|	СУММА(ВЫБОР
		|			КОГДА СОРасчетыСФондами.СтруктурнаяЕдиница = СОРасчетыСФондами.Налогоплательщик
		|				ТОГДА СОРасчетыСФондами.Отчисление
		|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		|		КОНЕЦ) КАК СоциальныеОтчисленияЗаГоловнуюОрганизацию,
		|	СУММА(ВЫБОР
		|			КОГДА СОРасчетыСФондами.СтруктурнаяЕдиница <> СОРасчетыСФондами.Налогоплательщик
		|				ТОГДА СОРасчетыСФондами.Отчисление
		|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		|		КОНЕЦ) КАК СоциальныеОтчисленияПоФилиалам
		|ИЗ
		|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами                                                
		|ГДЕ
		|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И СОРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|	И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		|	И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И СОРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель	
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
		|";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо И ОрганизацияЯвляетсяПлательщикомСН Тогда
				// объект налогообложения социальным налогом
				НоваяСтрока = ТаблицаПоМесяцам.Добавить();
				НоваяСтрока.КодСтроки = "s_200_01_013";
				НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
				НоваяСтрока.Значение 				= Выборка.СоциальныеОтчисления;
			КонецЕсли;

			// для расчета потом доходов физлиц, с которых исчисляются социальные отчисления
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_014";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.СоциальныеОтчисления;	
		
		КонецЦикла;
	
		Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			// 200.01.015 Сумма социальных отчислений в свою пользу
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
			|	СУММА(СОРасчетыСФондами.Отчисление) КАК СоциальныеОтчисления,
			|	СУММА(ВЫБОР
			|			КОГДА СОРасчетыСФондами.СтруктурнаяЕдиница = СОРасчетыСФондами.Налогоплательщик
			|				ТОГДА СОРасчетыСФондами.Отчисление
			|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
			|		КОНЕЦ) КАК СоциальныеОтчисленияЗаГоловнуюОрганизацию,
			|	СУММА(ВЫБОР
			|			КОГДА СОРасчетыСФондами.СтруктурнаяЕдиница <> СОРасчетыСФондами.Налогоплательщик
			|				ТОГДА СОРасчетыСФондами.Отчисление
			|			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
			|		КОНЕЦ) КАК СоциальныеОтчисленияПоФилиалам
			|ИЗ
			|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами                                               
			|ГДЕ
			|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
			|	И СОРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
			|	И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
			|	И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
			|	И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
			|	И СОРасчетыСФондами.ФизЛицо = &парамИндивидуальныйПредприниматель	
			|
			|СГРУППИРОВАТЬ ПО
			|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
			|";
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
								
				// для расчета дохода, с которого исчисляются социальные отчисления
				НоваяСтрока = ТаблицаПоМесяцам.Добавить();
				НоваяСтрока.КодСтроки = "s_200_01_015";
				НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
				НоваяСтрока.Значение 				= Выборка.СоциальныеОтчисления;	
				
			КонецЦикла;
		КонецЕсли;	
		
		/////////////////////////////////////////////////////////
		// Раздел. Исчисление ОСМС
	
		// 200.01.016 Сумма отчислений на ОСМС
		Запрос.Текст = "ВЫБРАТЬ
		               |	НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		               |	СУММА(ООСМСРасчетыСФондами.Отчисление) КАК ООСМС,
		               |	СУММА(ВЫБОР
		               |			КОГДА ООСМСРасчетыСФондами.СтруктурнаяЕдиница = ООСМСРасчетыСФондами.Налогоплательщик
		               |				ТОГДА ООСМСРасчетыСФондами.Отчисление
		               |			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		               |		КОНЕЦ) КАК ООСМСЗаГоловнуюОрганизацию,
		               |	СУММА(ВЫБОР
		               |			КОГДА ООСМСРасчетыСФондами.СтруктурнаяЕдиница <> ООСМСРасчетыСФондами.Налогоплательщик
		               |				ТОГДА ООСМСРасчетыСФондами.Отчисление
		               |			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		               |		КОНЕЦ) КАК ООСМСПоФилиалам
		               |ИЗ
		               |	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
		               |ГДЕ
		               |	ООСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		               |	И ООСМСРасчетыСФондами.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
		               |	И ООСМСРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		               |	И ООСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		               |	И ООСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		               |	И ООСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		               |	" + ?(ОрганизацияЯвляетсяПлательщикомСН, "", "И ООСМСРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель") + "
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// для расчета потом доходов физлиц, с которых исчисляются социальные отчисления
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_016";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.ООСМС;	
		
		КонецЦикла;
			
		// 200.01.017 Сумма взносов на ОСМС
		Запрос.Текст = "ВЫБРАТЬ
		               |	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		               |	СУММА(ВОСМСРасчетыСФондами.Взнос) КАК ВОСМС,
		               |	СУММА(ВЫБОР
		               |			КОГДА ВОСМСРасчетыСФондами.СтруктурнаяЕдиница = ВОСМСРасчетыСФондами.Налогоплательщик
		               |				ТОГДА ВОСМСРасчетыСФондами.Взнос
		               |			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		               |		КОНЕЦ) КАК ВОСМСЗаГоловнуюОрганизацию,
		               |	СУММА(ВЫБОР
		               |			КОГДА ВОСМСРасчетыСФондами.СтруктурнаяЕдиница <> ВОСМСРасчетыСФондами.Налогоплательщик
		               |				ТОГДА ВОСМСРасчетыСФондами.Взнос
		               |			ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		               |		КОНЕЦ) КАК ВОСМСПоФилиалам
		               |ИЗ
		               |	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
		               |ГДЕ
		               |	ВОСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		               |	И ВОСМСРасчетыСФондами.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
		               |	И ВОСМСРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		               |	И ВОСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		               |	И ВОСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		               |	И ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		               |	" + ?(ОрганизацияЯвляетсяПлательщикомСН, "", "И ВОСМСРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель") + "
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// для расчета потом доходов физлиц, с которых исчисляются социальные отчисления
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_017";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.ВОСМС;	
		
		КонецЦикла;

	КонецЕсли;
	
	// свернем строки по-месячно
	ТаблицаПоМесяцам.Свернуть("КодСтроки, МесяцНалоговогоПериода", "Значение");
	
	// рассчитываем итоговые графы за квартал и с начала года
	
	Начало1Мес = НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Начало2Мес = ДобавитьМесяц(Начало1Мес, 1);
	Начало3Мес = ДобавитьМесяц(Начало2Мес, 1);
	
	Для Каждого СтрокаТЗ Из ТаблицаПоМесяцам Цикл
			
		СтрокаРезультат = ТаблицаРезультат.Найти(СтрокаТЗ.КодСтроки, "КодСтроки");
		Если СтрокаРезультат = Неопределено Тогда
			СтрокаРезультат = ТаблицаРезультат.Добавить();
			СтрокаРезультат.КодСтроки = СтрокаТЗ.КодСтроки;
		КонецЕсли;
		
		Если СтрокаТЗ.МесяцНалоговогоПериода = Начало1Мес Тогда
			СтрокаРезультат.Значение1Мес = СтрокаРезультат.Значение1Мес + СтрокаТЗ.Значение;
		ИначеЕсли СтрокаТЗ.МесяцНалоговогоПериода = Начало2Мес Тогда
			СтрокаРезультат.Значение2Мес = СтрокаРезультат.Значение2Мес + СтрокаТЗ.Значение;
		ИначеЕсли СтрокаТЗ.МесяцНалоговогоПериода = Начало3Мес Тогда
			СтрокаРезультат.Значение3Мес = СтрокаРезультат.Значение3Мес + СтрокаТЗ.Значение;
		КонецЕсли;
		
		// квартальные итоги
		Если СтрокаТЗ.МесяцНалоговогоПериода >= Начало1Мес Тогда
			СтрокаРезультат.ЗначениеКвартал = СтрокаРезультат.ЗначениеКвартал + СтрокаТЗ.Значение;
		КонецЕсли;
		
		// итоги с начала года
		СтрокаРезультат.ЗначениеСНачГода = СтрокаРезультат.ЗначениеСНачГода + СтрокаТЗ.Значение;
		
	КонецЦикла;
	
	// теперь расчетные строки
	Если НЕ РасчетПоВидамДоходовИОблагаемойБазе Тогда		
	
		// начисленные доходы, с которых удерживаются (начисляются) ОПВ - рассчитываем обратным ходом от фактически исчисленных ОПВ
		НайденнаяСтрока = ТаблицаРезультат.Найти("s_200_01_007", "КодСтроки");
		Если НайденнаяСтрока <> Неопределено Тогда
			ПроцентОПВ = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			
			Если ПроцентОПВ <> 0 Тогда
				НайденнаяСтрока.Значение1Мес = НайденнаяСтрока.Значение1Мес * 100 / ПроцентОПВ;
				НайденнаяСтрока.Значение2Мес = НайденнаяСтрока.Значение2Мес * 100 / ПроцентОПВ;
				НайденнаяСтрока.Значение3Мес = НайденнаяСтрока.Значение3Мес * 100 / ПроцентОПВ;
				НайденнаяСтрока.ЗначениеКвартал = НайденнаяСтрока.ЗначениеКвартал * 100 / ПроцентОПВ;			
			КонецЕсли;
		КонецЕсли;
		
		// начисленные доходы, с которых удерживаются (начисляются) ОПВ - рассчитываем обратным ходом от фактически исчисленных ОПВ
		// Расчет не производится, так как в решениях до ввода облагаемой базы, ОППВ отсутствуют
		
		// начисленные доходы, с которых удерживаются (начисляются) ОПВ - рассчитываем обратным ходом от фактически исчисленных ОПВ
		НайденнаяСтрока = ТаблицаРезультат.Найти("s_200_01_009", "КодСтроки");
		Если НайденнаяСтрока <> Неопределено Тогда
			ПроцентОПВ = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			
			Если ПроцентОПВ <> 0 Тогда
				НайденнаяСтрока.Значение1Мес = НайденнаяСтрока.Значение1Мес * 100 / ПроцентОПВ;
				НайденнаяСтрока.Значение2Мес = НайденнаяСтрока.Значение2Мес * 100 / ПроцентОПВ;
				НайденнаяСтрока.Значение3Мес = НайденнаяСтрока.Значение3Мес * 100 / ПроцентОПВ;
				НайденнаяСтрока.ЗначениеКвартал = НайденнаяСтрока.ЗначениеКвартал * 100 / ПроцентОПВ;			
			КонецЕсли;
		КонецЕсли;
		
		// объект обложения, с которого исчисляется СН - рассчитываем обратным ходом от фактически исчисленного СН
		НайденнаяСтрока = ТаблицаРезультат.Найти("s_200_01_013", "КодСтроки");
		Если НайденнаяСтрока <> Неопределено Тогда
			ПроцентСН = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.СоциальныйНалог, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			            
			Если ПроцентСН <> 0 Тогда
				НайденнаяСтрока.Значение1Мес = НайденнаяСтрока.Значение1Мес * 100 / ПроцентСН;
				НайденнаяСтрока.Значение2Мес = НайденнаяСтрока.Значение2Мес * 100 / ПроцентСН;
				НайденнаяСтрока.Значение3Мес = НайденнаяСтрока.Значение3Мес * 100 / ПроцентСН;
				НайденнаяСтрока.ЗначениеКвартал = НайденнаяСтрока.ЗначениеКвартал * 100 / ПроцентСН;			
			КонецЕсли;
		КонецЕсли;

		// доходы физических лиц, с которых исчисляются СО - рассчитываем обратным ходом от фактически исчисленных СО
		НайденнаяСтрока = ТаблицаРезультат.Найти("s_200_01_014", "КодСтроки");
		Если НайденнаяСтрока <> Неопределено Тогда
			ПроцентСО = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			
			Если ПроцентСО <> 0 Тогда
				НайденнаяСтрока.Значение1Мес = НайденнаяСтрока.Значение1Мес *  100 / ПроцентСО;
				НайденнаяСтрока.Значение2Мес = НайденнаяСтрока.Значение2Мес * 100 / ПроцентСО;
				НайденнаяСтрока.Значение3Мес = НайденнаяСтрока.Значение3Мес * 100 / ПроцентСО;
				НайденнаяСтрока.ЗначениеКвартал = НайденнаяСтрока.ЗначениеКвартал * 100 / ПроцентСО;			
			КонецЕсли;
		КонецЕсли;
		
		// доходы физических лиц, с которых исчисляются СО - рассчитываем обратным ходом от фактически исчисленных СО
		НайденнаяСтрока = ТаблицаРезультат.Найти("s_200_01_015", "КодСтроки");
		Если НайденнаяСтрока <> Неопределено Тогда
			ПроцентСО = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			
			Если ПроцентСО <> 0 Тогда
				НайденнаяСтрока.Значение1Мес = НайденнаяСтрока.Значение1Мес *  100 / ПроцентСО;
				НайденнаяСтрока.Значение2Мес = НайденнаяСтрока.Значение2Мес * 100 / ПроцентСО;
				НайденнаяСтрока.Значение3Мес = НайденнаяСтрока.Значение3Мес * 100 / ПроцентСО;
				НайденнаяСтрока.ЗначениеКвартал = НайденнаяСтрока.ЗначениеКвартал * 100 / ПроцентСО;			
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаРезультат.Количество() = 0 и ВыдаватьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данные для заполнения формы 200.01 за отчетный период отсутствуют...'"));
	КонецЕсли;
				     	
	Возврат ТаблицаРезультат;		 
	
КонецФункции // Форма200_01РассчитатьДанныеФормы()

&НаКлиенте
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма200_01ЗаполнитьАвто(Перезаполнить = Ложь) 
	
	Состояние("Расчет формы 200.01");		
	
	Форма200_01ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");
	
КонецПроцедуры // Форма200_01ЗаполнитьАвто()

&НаСервере
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма200_01ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь) 
	
	ТекИмяФормы = "Форма200_01";
	Очистить(ТекИмяФормы, Истина);
	
	Если НЕ Перезаполнить Тогда	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Расчет приложения 200.01'"));
	КонецЕсли;	
	
	//////////////////////////////////////////
	// Раздел. Расчетные показатели        	

	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ТекИмяФормы);

	ТаблицаРезультат = Форма200_01РассчитатьДанныеФормы();
	
	Для Каждого СтрокаРезультат Из ТаблицаРезультат Цикл

		Если СтрокаРезультат.КодСтроки = "s_200_01_001_A"  или СтрокаРезультат.КодСтроки = "s_200_01_001_B" Тогда

			ИмяЯчейки = СтрокаРезультат.КодСтроки;
			ИтогЗнач = Окр(СтрокаРезультат.Значение1Мес + СтрокаРезультат.Значение2Мес + СтрокаРезультат.Значение3Мес);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки, ИтогЗнач, Форма200_01ПолеТабличногоДокументаСтраница1);
			
		ИначеЕсли СтрокаРезультат.КодСтроки = "s_200_01_003" Тогда

			ИмяЯчейки = "s_200_01_003";
			ИтогЗнач = Окр(СтрокаРезультат.Значение3Мес);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки, ИтогЗнач, Форма200_01ПолеТабличногоДокументаСтраница1);
			
		ИначеЕсли СтрокаРезультат.КодСтроки = "s_200_01_004" Тогда

			ИмяЯчейки = "s_200_01_004";
			ИтогЗнач = Окр(СтрокаРезультат.Значение1Мес);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки, ИтогЗнач, Форма200_01ПолеТабличногоДокументаСтраница1);
			
		ИначеЕсли СтрокаРезультат.КодСтроки = "s_200_01_005" Тогда

			ИмяЯчейки = "s_200_01_005";
			ИтогЗнач = Окр(СтрокаРезультат.Значение3Мес);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки, ИтогЗнач, Форма200_01ПолеТабличногоДокументаСтраница1);
			
		Иначе // все остальные ячейки обрабатываются одинаковым образом
			
			// округленное значение за квартал может оказаться больше суммы значений по месяцам
			// проверим и добавим к значению 1, т.к. максимальная погрешность при округлении может быть 1,47.
			Если Окр(СтрокаРезультат.ЗначениеКвартал) > Окр(СтрокаРезультат.Значение1Мес) + Окр(СтрокаРезультат.Значение2Мес)
				+ Окр(СтрокаРезультат.Значение3Мес) Тогда
				Если Окр(СтрокаРезультат.Значение1Мес) <> 0 Тогда
					СтрокаРезультат.Значение1Мес = СтрокаРезультат.Значение1Мес + 1;
				ИначеЕсли Окр(СтрокаРезультат.Значение2Мес) <> 0 Тогда
					СтрокаРезультат.Значение2Мес = СтрокаРезультат.Значение2Мес + 1;
				ИначеЕсли Окр(СтрокаРезультат.Значение3Мес) <> 0 Тогда
					СтрокаРезультат.Значение3Мес = СтрокаРезультат.Значение3Мес + 1;
				КонецЕсли;
			КонецЕсли;
			
			ИмяЯчейки = СтрокаРезультат.КодСтроки;
			
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки + "_1", Окр(СтрокаРезультат.Значение1Мес), Форма200_01ПолеТабличногоДокументаСтраница1);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки + "_2", Окр(СтрокаРезультат.Значение2Мес), Форма200_01ПолеТабличногоДокументаСтраница1);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки + "_3", Окр(СтрокаРезультат.Значение3Мес), Форма200_01ПолеТабличногоДокументаСтраница1);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки + "_4", Окр(СтрокаРезультат.ЗначениеКвартал), Форма200_01ПолеТабличногоДокументаСтраница1);
			
		
		КонецЕсли;

	КонецЦикла;
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, ТекИмяФормы, Перезаполнить);
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);
	
	Модифицированность = Истина;
	
КонецПроцедуры // Форма200_01ЗаполнитьАвто()

&НаСервере
Процедура Форма200_01РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки, ТекИмяФормы)
	
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, ИмяЯчейки, ЗначениеЯчейки);
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ТекИмяФормы);			

	ЭтаФорма.Форма200ПолеТабличногоДокументаСтраница1.Области.Приложение01.Значение = "Х";
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, "Форма200", "Приложение01", "Х");	
	
	//Рассчитаем ячейки 4 (за квартал)
	Для Н = 1 По 17 Цикл
		Если Н = 3 ИЛИ Н = 4 ИЛИ Н = 5 ИЛИ Н = 10 ИЛИ Н = 11 ИЛИ  Н = 12 Тогда
			// ячейки у которых нет итогов за квартал
			Продолжить;
		КонецЕсли;	
		
		Если Н <=  8 Тогда
			НомерСтраницы = "1";
		Иначе
			НомерСтраницы = "2";			
		КонецЕсли;
		
		Номер = Формат(Н,"ЧЦ=2; ЧДЦ=0; ЧВН=");
		// графа 4
		ИтогЗначение = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_200_01_0" + Номер + "_1")
						+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_200_01_0" + Номер + "_2")
						+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_200_01_0" + Номер + "_3");
					
		Строка = ТаблицаДанных.Найти("s_200_01_0" + Номер + "_4","ИмяОбласти");
		Если Строка <> Неопределено Тогда
			Строка.Значение = ИтогЗначение;
		КонецЕсли;
		
		ЭтаФорма["Форма200_01ПолеТабличногоДокументаСтраница"+ НомерСтраницы].Области["s_200_01_0" + Номер + "_4"].Значение = ИтогЗначение;
		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ("s_200_01_0" + Номер + "_4"), ИтогЗначение);

	КонецЦикла;

	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура Форма200_01Расчет(ИмяЯчейки, ЗначениеЯчейки)
	
	Форма200_01РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки, КодФормы)
	
КонецПроцедуры

&НаКлиенте
Процедура Форма200_01ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Область)
	
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма200_01Расчет(Область.Имя, Область.Значение);
	КонецЕсли;
	    	    
	Модифицированность = Истина;
	
КонецПроцедуры // Форма200_01ПолеТабличногоДокументаПриИзменении()

&НаКлиенте
Процедура Форма200_01Расшифровка(ИмяЯчейки)
	
	ДатаНачала 		= СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ДатаОкончания	= СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
		
	Если Прав(ИмяЯчейки,1) = "1" Тогда // месяц 1
		
		ДатаНачала 	  = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
		ДатаОкончания = КонецМесяца(ДатаНачала);
		
	ИначеЕсли Прав(ИмяЯчейки,1) = "2" Тогда // месяц 
		
		ДатаНачала 	  = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,1);
		ДатаОкончания = КонецМесяца(ДатаНачала);
		
	ИначеЕсли Прав(ИмяЯчейки,1) = "3" Тогда // месяц 
		
		ДатаНачала	  = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,2);
		ДатаОкончания = КонецМесяца(ДатаНачала);
		
	ИначеЕсли Прав(ИмяЯчейки,1) = "4" Тогда // месяц 
		
		ДатаНачала	  = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
		ДатаОкончания = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
		
	КонецЕсли;
	
		
	// Если в строках по самому ИП, то установим отбор по физ лицу	
	Если ПолучитьЗначениеРеквизита(Налогоплательщик, "ЮрФизЛицо") = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		Если Лев(ИмяЯчейки,12) <> "s_200_01_009" И Лев(ИмяЯчейки,12) <> "s_200_01_015" Тогда
			СтруктураПоФизЛицу = Новый Структура;
			СтруктураПоФизЛицу.Вставить("ФизЛицо", ПолучитьЗначениеРеквизита(Налогоплательщик, "ИндивидуальныйПредприниматель"));
			СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.НеРавно);	
		Иначе
			
			СтруктураПоФизЛицу = Новый Структура;
			СтруктураПоФизЛицу.Вставить("ФизЛицо", ПолучитьЗначениеРеквизита(Налогоплательщик, "ИндивидуальныйПредприниматель"));
			СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);	
		КонецЕсли;	
	КонецЕсли;
	
	ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(ДатаНачала, ДатаОкончания, Неопределено, СтруктураПоФизЛицу);
	
КонецПроцедуры // Форма200_01Расшифровка()

///////////////////////////////////////////////////////////////
// Процедуры и функции для расчета(заполнения) формы 200.02

&НаКлиенте
Процедура Форма200_02ЗаполнитьАвто(Перезаполнить = Ложь) 
	                	
	Состояние("Расчет формы 200.02");		
	
	Форма200_02ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры // Форма200ЗаполнитьАвто()

&НаСервере
Процедура Форма200_02ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма200_02";

	ТекущаяСтраница = 1;
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы",ТекИмяФормы));
	
	Если СтрокаФормы <> Неопределено Тогда
		СтрокаФормы.ВсегоСтраниц = 1;
	КонецЕсли;     		
	
	Если НЕ Перезаполнить Тогда  
		Текст = НСтр("ru = 'Расчет приложения 200.02'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли;      
	
	Выборка = Форма200_02РассчитатьДанныеФормы(Истина).Выбрать();	
	
	СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, ТекИмяФормы);
			                             	
		Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
			НомерСтроки = 2;
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
			ТаблицаСтрокГруппы.Очистить();
			
			Выборка.Сбросить();
			
			Пока Выборка.Следующий() Цикл  			
			
				// заполняем данные строки в форме отчета
			 	Элемент = ТаблицаСтрокГруппы.Добавить();   			 
				Если ИмяГруппы = "Страница1" Тогда
					//Так должны заполнять по отдельности значения выборки 
					//для каждого листа
					Элемент.Ф200_02_A1 = Формат(НомерСтроки, мФорматНомераСтроки);
					Элемент.Ф200_02ФИОРезидента = Выборка.ФИОФизЛица;
					
					Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.ИИН) Тогда  					
						 СтрокаИИН = Выборка.ИИН;
					Иначе
						 СтрокаИИН = "";
						 
						 ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа D ""ИИН"",
							  |т.к. значение содержит символы, отличные от цифр'");
							  
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки)));
						
					КонецЕсли;

					Элемент.Ф200_02ИИНРезидента = СтрокаИИН;
					
					Элемент.Ф200_02КодСтраныРезидента = Выборка.КодСтраны;
					
					ПризнакРезидентства = Выборка.НеЯвляетсяНалоговымРезидентомРК;
					Элемент.Ф200_02ПризнакРезидентства = ?(ПризнакРезидентства, СтруктураРеквизитовФормы.ОтметкаНерезидентов, СтруктураРеквизитовФормы.ОтметкаРезидентов);
				
					РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф200_02ФИОРезидента",        Выборка.ФизЛицо);
					РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф200_02ИИНРезидента",        Выборка.ФизЛицо);
					РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф200_02КодСтраныРезидента",  Выборка.ФизЛицо);
					РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф200_02ПризнакРезидентства", Выборка.ФизЛицо);					
				 
				ИначеЕсли ИмяГруппы = "Страница2" Тогда
					Элемент.Ф200_02_A2 = Формат(НомерСтроки, мФорматНомераСтроки);
					Элемент.Ф200_02НомерРегистрацииРезидента = Выборка.НомерРегистрации;
										
					Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.КодВидаДокументаВНалоговойОтчетности) Тогда
						КодВидаДокументаВНалоговойОтчетности = Выборка.КодВидаДокументаВНалоговойОтчетности;					
					Иначе
						КодВидаДокументаВНалоговойОтчетности = "";
						
						ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа G ""Код вида документа"",
							  |т.к. значение содержит символы, отличные от цифр'");
							  
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки)));
						
					КонецЕсли;
					
					Элемент.Ф200_02ВидДокРезидента   = КодВидаДокументаВНалоговойОтчетности;
					Элемент.Ф200_02НомерДокРезидента = Выборка.НомерДокумента;
					Элемент.Ф200_02ДатаДокРезидента  = Выборка.ДатаДокумента;
					
					РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф200_02НомерРегистрацииРезидента", Выборка.ФизЛицо);					
					
			    ИначеЕсли ИмяГруппы = "Страница3" Тогда
					Элемент.Ф200_02_A3 = Формат(НомерСтроки,мФорматНомераСтроки);					
					Если Налогоплательщик.ИностраннаяОрганизация Тогда
						КодДохРезидента = "1181";
					Иначе
						КодДохРезидента = "1180";
					КонецЕсли;
					Элемент.Ф200_02КодДохРезидента = КодДохРезидента;
				ИначеЕсли ИмяГруппы = "Страница4" Тогда
					Элемент.Ф200_02_A4 = Формат(НомерСтроки, мФорматНомераСтроки);					
					Элемент.Ф200_02СтавкаНалога = 10;					
					Элемент.Ф200_02_M = Выборка.НачисленоДоходов;
					Элемент.Ф200_02_N = Выборка.НалоговыеВычеты;
					Элемент.Ф200_02_O = Выборка.ОбязательныеПенсионныеВзносы;
					
				ИначеЕсли ИмяГруппы = "Страница5" Тогда
					Элемент.Ф200_02_A5 = Формат(НомерСтроки,мФорматНомераСтроки);
					Элемент.Ф200_02_P = Выборка.ОбязательныеПрофессиональныеПенсионныеВзносы;
					Элемент.Ф200_02_Q = Выборка.ДобровольныеПенсионныеВзносы;
					Элемент.Ф200_02_R = Выборка.СтраховыеПремии;
					Элемент.Ф200_02_S = Выборка.ПогашениеЖилищныхЗаймов;					
			
				ИначеЕсли ИмяГруппы = "Страница6" Тогда
					Элемент.Ф200_02_A6 = Формат(НомерСтроки, мФорматНомераСтроки);
					Элемент.Ф200_02_T = Выборка.НаОплатуМедицинскихУслуг;
					Элемент.Ф200_02_U = Выборка.ДоходыНеОблагаемыеИПН;					
					Элемент.Ф200_02_V = Выборка.ИндивидуальныйПодоходныйНалог;					
					
				ИначеЕсли ИмяГруппы = "Страница7" Тогда
					Элемент.Ф200_02_A7 = Формат(НомерСтроки, мФорматНомераСтроки);
					Элемент.Ф200_02_W = Выборка.ВыплаченоДоходов;
					Элемент.Ф200_02_X = Выборка.ВыплатыНеОблагаемыеСН;					
					Элемент.Ф200_02_Y = Выборка.ВыплатыОблагаемыеСН;
					
				ИначеЕсли ИмяГруппы = "Страница8" Тогда
					Элемент.Ф200_02_A8 = Формат(НомерСтроки, мФорматНомераСтроки);
					Элемент.Ф200_02_Z = Выборка.СоциальныеНалог;
					Элемент.Ф200_02_AA = Выборка.РасходыРаботодателяСКоторыхИсчисляютсяСО;					
					Элемент.Ф200_02_AB = Выборка.СоциальныеОтчисления;
					Элемент.Ф200_02_AC = Выборка.СуммаОСМС;
					
				КонецЕсли;
				НомерСтроки = НомерСтроки + 1;	           			 				
			КонецЦикла; 
			
			
		КонецЦикла;	  			 
		
		РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы,СтруктураФормы); 	 
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма,ТекИмяФормы);	
		РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма,ТекИмяФормы,Перезаполнить);     
		
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтаФорма);
		
		ТекущаяСтраница = СтрокаФормы.ВсегоСтраниц;
		
	
	 	      	 
КонецПроцедуры // Форма200_02ЗаполнитьАвто()

&НаСервере
Процедура Форма200_02РасчетНаСервере(Инд,Колонка)
	
	Перем СтруктураГруппы;
	
	КодФормы = "Форма200_02";  	
	Индекс = Инд-1;
	
	мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, КодФормы);
	мМногострочнаяСтруктура.Свойство("Страница4" ,СтруктураГруппы);
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
	
	//рассчитаем вычисляемые ячейки	
	// Y Выплаты, облагаемые социальным налогом (M - X - O)
	M = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф200_02_M = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф200_02_M);
	O = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф200_02_O = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф200_02_O);	
	
								
	мМногострочнаяСтруктура.Свойство("Страница7" ,СтруктураГруппы);
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
	X = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф200_02_X = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф200_02_X);

		
	ТаблицаСтрокГруппы.Получить(Индекс).Ф200_02_Y = M - X - O;
	Форма200_02ПолеТабличногоДокументаСтраница7.Области["Ф200_02_Y__"+ Строка(Инд)].Значение = M - X - O;
	Если ТекущаяСтраница <> Неопределено И ТекущаяСтраница = 1 Тогда 
	 	Форма200_02ПолеТабличногоДокументаСтраница7.Области["Ф200_02_Y"].Значение = ТаблицаСтрокГруппы.Итог("Ф200_02_Y"); 
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтаФорма, КодФормы,мМногострочнаяСтруктура);
	Модифицированность = Истина;
	
КонецПроцедуры // Форма200_02Расчет()

&НаКлиенте
Процедура Форма200_02ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СсылкаРасшифровки = ВыбранноеЗначение;
	
	ОбластьРасшифровки = ЭтаФорма.ТекущийЭлемент.ТекущаяОбласть;	
	НомерСтроки = Сред(ОбластьРасшифровки.Имя, Найти(ОбластьРасшифровки.Имя, "__") + 2);
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты")
	 ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		 ИмяГруппы = "Страница1";                                                    
	 	 Ячейка  = "Ф200_02ФИОРезидента";	
		 
 	Форма200_02ОбработкаПодбораНаСервере(СсылкаРасшифровки, Ячейка, ИмяГруппы, НомерСтроки); 

	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ФормаВыбораИзКлассификатора") Тогда
		
		Если ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КодыВидовДоходов")  
			ИЛИ ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КодыВидовДокументов") Тогда 			
			Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
				ОбластьРасшифровки.Значение = ВыбранноеЗначение;	
			Иначе
				ОбластьРасшифровки.Значение = ВыбранноеЗначение.КодСтроки;
			КонецЕсли;
			ИмяСтраницы = "Страница" + Прав(ЭтаФорма.ТекущийЭлемент.Имя,1);			
			ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ОбластьРасшифровки.Имя,ОбластьРасшифровки.Значение);						
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Форма200_02ОбработкаПодбораНаСервере(Расшифровка, ИмяЯчейки, ИмяГруппы, НомерСтроки) Экспорт   

	Если ИмяЯчейки = "Ф200_02ФИОРезидента" Тогда
		СсылкаФизЛица = Расшифровка;
		
		ОбластьНаименование = "Ф200_02ФИОРезидента__" + НомерСтроки;		
		ОбластьИИН = "Ф200_02ИИНРезидента__" + НомерСтроки;
		ОбластьКодСтраны = "Ф200_02КодСтраныРезидента__" + НомерСтроки;
		ОбластьНомерРегистрации = "Ф200_02НомерРегистрацииРезидента__" + НомерСтроки;
		ОбластьПризнакРезидентства = "Ф200_02ПризнакРезидентства__" + НомерСтроки;
		
		Если ТипЗнч(Расшифровка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			// Определим сведения о полном ФИО, РНН, ИИН
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("парамФизЛицо", 	СсылкаФизЛица);
			Запрос.УстановитьПараметр("парамПериодПо", 	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			Запрос.УстановитьПараметр("парамНачГода", 	НачалоГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
			Запрос.УстановитьПараметр("парамПустаяДата", '00010101');
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	ФизическиеЛица.Наименование КАК Наименование,
			               |	ФизическиеЛица.РНН КАК РНН,
			               |	ФизическиеЛица.ИдентификационныйКодЛичности КАК ИИН
			               |ПОМЕСТИТЬ ФизическиеЛица
			               |ИЗ
			               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
			               |ГДЕ
			               |	ФизическиеЛица.Ссылка = &парамФизЛицо
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ГражданствоФизЛицСрезПоследних.Период КАК Период,
			               |	ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НомерНалоговойРегистрацииВСтранеРезидентства, """") КАК НомерНалоговойРегистрацииВСтранеРезидентства,
			               |	ГражданствоФизЛицСрезПоследних.Страна,
			               |	ВЫБОР
			               |		КОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ)
			               |			ТОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
			               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
			               |	КОНЕЦ КАК СтранаРезидентства,
			               |	ВЫБОР
			               |		КОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
			               |			ТОГДА ЛОЖЬ
			               |		ИНАЧЕ ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРК, ИСТИНА)
			               |	КОНЕЦ КАК НеЯвляетсяНалоговымРезидентомРК
			               |ПОМЕСТИТЬ ГражданствоФизЛиц
			               |ИЗ
			               |	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамПериодПо, ФизЛицо = &парамФизЛицо) КАК ГражданствоФизЛицСрезПоследних
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВЫБОР
			               |		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL 
			               |			ТОГДА ФизическиеЛица.Наименование
			               |		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
			               |				КОГДА ФИОФизЛиц.Имя <> """"
			               |					ТОГДА "" "" + ФИОФизЛиц.Имя
			               |				ИНАЧЕ """"
			               |			КОНЕЦ + ВЫБОР
			               |				КОГДА ФИОФизЛиц.Отчество <> """"
			               |					ТОГДА "" "" + ФИОФизЛиц.Отчество
			               |				ИНАЧЕ """"
			               |			КОНЕЦ
			               |	КОНЕЦ КАК ФИО,
			               |	ФизическиеЛица.РНН КАК РНН,
			               |	ФизическиеЛица.ИИН КАК ИИН,
			               |	ЕСТЬNULL(КлассификаторСтранМира.КодАльфа2, """") КАК КодСтраны,
			               |	ГражданствоФизЛиц.НомерНалоговойРегистрацииВСтранеРезидентства КАК НомерНалоговойРегистрацииВСтранеРезидентства,
			               |	ГражданствоФизЛиц.Страна,
			               |	ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК КАК НеЯвляетсяНалоговымРезидентомРК,
			               |	ГражданствоФизЛиц.СтранаРезидентства
			               |ИЗ
			               |	ФизическиеЛица КАК ФизическиеЛица
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамПериодПо, ФизЛицо = &парамФизЛицо) КАК ФИОФизЛиц
			               |		ПО (ИСТИНА)
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ГражданствоФизЛиц КАК ГражданствоФизЛиц
			               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
			               |			ПО ГражданствоФизЛиц.СтранаРезидентства = КлассификаторСтранМира.Ссылка
			               |		ПО (ИСТИНА)";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
													  
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.ИИН) Тогда
					СтрокаИИН = Выборка.ИИН;
				Иначе
					СтрокаИИН = "";
					ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа D ""ИИН"",
							  |т.к. значение содержит символы, отличные от цифр'");
							  
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,  Формат(НомерСтроки+1,мФорматНомераСтроки)));
							  
				КонецЕсли;
												
				НомерРегистрации 	= Выборка.НомерНалоговойРегистрацииВСтранеРезидентства;
				ПризнакРезидентства = Выборка.НеЯвляетсяНалоговымРезидентомРК;
				
				Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьПризнакРезидентства].Значение = ?(ПризнакРезидентства, СтруктураРеквизитовФормы.ОтметкаНеРезидентов,СтруктураРеквизитовФормы.ОтметкаРезидентов);				
				Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьНаименование].Значение = Выборка.ФИО;				
				Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение 			= СтрокаИИН;
				Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраны].Значение 		= Выборка.КодСтраны;
				Форма200_02ПолеТабличногоДокументаСтраница2.Области[ОбластьНомерРегистрации].Значение = НомерРегистрации;
				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьНаименование, 		Выборка.ФИО, ,СсылкаФизЛица);				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьИИН, 				Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение, , СсылкаФизЛица);
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьКодСтраны, 			Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраны].Значение, ,СсылкаФизЛица);				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьПризнакРезидентства, ?(ПризнакРезидентства, СтруктураРеквизитовФормы.ОтметкаНЕРезидентов, СтруктураРеквизитовФормы.ОтметкаРезидентов), ,СсылкаФизЛица);

				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница2", ОбластьНомерРегистрации, Форма200_02ПолеТабличногоДокументаСтраница2.Области[ОбластьНомерРегистрации].Значение, , СсылкаФизЛица);
						
			КонецЕсли;
		
		Иначе // если тип Расшифровка "Контрагент"
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("парамКонтрагент", СсылкаФизЛица);
						
			Запрос.Текст = "ВЫБРАТЬ
			               |	Контрагенты.Наименование КАК Контрагент,
			               |	Контрагенты.ИдентификационныйКодЛичности КАК ИИН,
			               |	Контрагенты.РНН,
			               |	ЕСТЬNULL(Контрагенты.СтранаРезидентства.КодАльфа2,"""") КАК КодСтраны,
			               |	Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства,
			               |	Контрагенты.КБЕ
			               |ИЗ
			               |	Справочник.Контрагенты КАК Контрагенты
			               |ГДЕ
			               |	Контрагенты.Ссылка = &парамКонтрагент";
						   
			Выборка = Запрос.Выполнить().Выбрать();
									
			Если Выборка.Следующий() Тогда
											
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.ИИН) Тогда
					СтрокаИИН = Выборка.ИИН;
				Иначе
					СтрокаИИН = "";
					
					
					ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа D ""ИИН"",
							  |т.к. значение содержит символы, отличные от цифр'");
							  
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,  Формат(НомерСтроки+1, мФорматНомераСтроки)));
					
				КонецЕсли;
				
				Если Лев(Выборка.КБе,1) = "2" тогда
					ПризнакРезиденства = Истина;
				Иначе
					ПризнакРезиденства = Ложь;
				КонецЕсли; 				
				
				НомерРегистрации = Выборка.НомерНалоговойРегистрацииВСтранеРезидентства;
				
				Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьНаименование].Значение = Выборка.Контрагент;				
				Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение 			= СтрокаИИН;			
				Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраны].Значение 	= Выборка.КодСтраны;
				Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьПризнакРезидентства].Значение 	= ?(ПризнакРезиденства, СтруктураРеквизитовФормы.ОтметкаНЕРезидентов, СтруктураРеквизитовФормы.ОтметкаРезидентов);
				Форма200_02ПолеТабличногоДокументаСтраница2.Области[ОбластьНомерРегистрации].Значение 	= НомерРегистрации;
				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьНаименование, Выборка.Контрагент,,СсылкаФизЛица);				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьИИН, Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение,,СсылкаФизЛица);
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьПризнакРезидентства, ?(ПризнакРезиденства, СтруктураРеквизитовФормы.ОтметкаНеРезидентов, СтруктураРеквизитовФормы.ОтметкаРезидентов),,СсылкаФизЛица);
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьКодСтраны, Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраны].Значение,,СсылкаФизЛица);
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница2", ОбластьНомерРегистрации, Форма200_02ПолеТабличногоДокументаСтраница2.Области[ОбластьНомерРегистрации].Значение,,СсылкаФизЛица);
				 
			КонецЕсли;  			
		КонецЕсли; 
		
		Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьНаименование].Расшифровка        = СсылкаФизЛица;				
		Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Расшифровка 			    = СсылкаФизЛица;			
		Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраны].Расшифровка 	        = СсылкаФизЛица;
		Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьПризнакРезидентства].Расшифровка = СсылкаФизЛица;
		Форма200_02ПолеТабличногоДокументаСтраница2.Области[ОбластьНомерРегистрации].Расшифровка 	= СсылкаФизЛица;
		
	КонецЕсли;
		
КонецПроцедуры 

&НаСервере
Функция Форма200_02РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
	//должен быть предрасчет
	Запрос =  Новый Запрос;
	Запрос.УстановитьПараметр("парамНалогоплательщик", 		Налогоплательщик);
	Запрос.УстановитьПараметр("парамПериодС", 				НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПериодПо", 				КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПослеПериодПо", 		КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) + 1);
	Запрос.УстановитьПараметр("парамПриход",				ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамРасход",				ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("парамВидСтрокиИсчисление",	Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежаНалог",		Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	Запрос.УстановитьПараметр("парамНеОблагаетсяЦеликом",	Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом);
	Запрос.УстановитьПараметр("парамФизЛицо",				Перечисления.ЮрФизЛицо.ФизЛицо);
	Запрос.УстановитьПараметр("парамПустаяДата",			'00010101');
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", 	мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("парамПогашениеЖилищныхЗаймов", 	Справочники.ВычетыИПН.ПогашениеВознагражденияПоЖилищнымЗаймам);
	Запрос.УстановитьПараметр("парамСтраховыеПремии", 			Справочники.ВычетыИПН.СтраховыеПремииПоДоговорамНакопительногоСтрахования);
	Запрос.УстановитьПараметр("ВключатьОППВВДоходыРаботников",	ВключатьОППВВДоходыРаботников);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());
	
	Если НЕ СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе Тогда
		// Ставка СО
		Запрос.УстановитьПараметр("парамСтавкаСО",			ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)) / 100);
	КонецЕсли;
	
	// если налогоплательщик - ИП, то исключим данные самого индивидуального предпринимателя
	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Налогоплательщик.ИндивидуальныйПредприниматель);
	Иначе
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Неопределено);
	КонецЕсли;
	
	// Определим учетную политику по НУ
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации,
	|	УчетнаяПолитикаНУ.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ,
    |	УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН
	|ИЗ	
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодПо, Организация = &парамНалогоплательщик) КАК УчетнаяПолитикаНУ
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОтражениеПоПериодуРегистрации 				= Выборка.ОтражениеПоПериодуРегистрации;
		ОрганизацияЯвляетсяПлательщикомСН			= Выборка.ОрганизацияЯвляетсяПлательщикомСН;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Выборка.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ;
	Иначе
		ОтражениеПоПериодуРегистрации 				= Ложь;
		ОрганизацияЯвляетсяПлательщикомСН			= Ложь;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Ложь;
	КонецЕсли;
	
	// Выбор данных для заполнения формы расшифровки
	
	ДоходыИНалогиТекст = "
	|// Начисленные и необлагаемые ИПН доходы
	|ВЫБРАТЬ
	|	ИПНСведенияОДоходах.ФизЛицо,
	|	ИПНСведенияОДоходах.СуммаДоходаОборот КАК НачисленоДоходов,";
	Если СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	ИПНСведенияОДоходах.ПримененныйВычетОборот КАК НалоговыеВычеты,";
	Иначе
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,";
	КонецЕсли;
	
	ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
	|	ВЫБОР
	|		КОГДА ИПНСведенияОДоходах.ВидРасчета = &парамПогашениеЖилищныхЗаймов
	|			ТОГДА ИПНСведенияОДоходах.СуммаВычетаОборот
	|		ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) 
	|	КОНЕЦ КАК ПогашениеЖилищныхЗаймов,
	|	ВЫБОР
	|		КОГДА ИПНСведенияОДоходах.ВидРасчета = &парамСтраховыеПремии
	|			ТОГДА ИПНСведенияОДоходах.СуммаВычетаОборот
	|		ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) 
	|	КОНЕЦ КАК СтраховыеПремии,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НаОплатуМедицинскихУслуг,";
	Если СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	ВЫБОР 
		|		// для ИП, адвокатов и частных нотариусов как необлагаемые доходы не показываем
		|		КОГДА ИПНСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты 
		|				И ИПНСведенияОДоходах.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
		|			ТОГДА ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) 
		|		КОГДА ИПНСведенияОДоходах.СпособНалогообложения = &парамНеОблагаетсяЦеликом 
		|			ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот 
		|		КОГДА НЕ(ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН) 
		|			ТОГДА ИПНСведенияОДоходах.СуммаВычетаОборот
		|		ИНАЧЕ ИПНСведенияОДоходах.ПримененнаяЛьготаОборот
		|	КОНЕЦ + ИПНСведенияОДоходах.ПримененнаяЛьготаОборот КАК ДоходыНеОблагаемыеИПН,";
	Иначе
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	ВЫБОР 
		|		// для ИП, адвокатов и частных нотариусов как необлагаемые доходы не показываем
		|		КОГДА ИПНСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты
		|				И ИПНСведенияОДоходах.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
		|			ТОГДА ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) 
		|		КОГДА ИПНСведенияОДоходах.СпособНалогообложения = &парамНеОблагаетсяЦеликом 
		|			ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот 
		|		КОГДА НЕ(ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН) 
		|			ТОГДА ИПНСведенияОДоходах.СуммаВычетаОборот
		|		ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК ДоходыНеОблагаемыеИПН,";
	КонецЕсли;                        	
	ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплаченоДоходов,
	|	ВЫБОР 
	|		// для контрагентов нет возможности зарегистрировать эти доходы как необлагаемые СН
	|		КОГДА ИПНСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты 		
	|			ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот  		
	|		ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК ВыплатыНеОблагаемыеСН,	
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СуммаОСМС
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	|			&парамПериодС, 
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			// ИП, авдокатов и частных нотариусов включаем только по требованию
	|			" + ?(НЕ ПризнакИП, "И ВЫБОР
	|										КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	|											ТОГДА НЕ ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|									    ИНАЧЕ ИСТИНА
	|								   КОНЕЦ", "") + "
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель ) КАК ИПНСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                         
	|			ПО (НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) = ВТ_Гражданство.Период)               
	|			 И (ВЫБОР
	|					КОГДА ИПНСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ИПНСведенияОДоходах.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ИПНСведенияОДоходах.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ИПНСведенияОДоходах.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// налоговые взносы, доходы не облагаемые ИПН, ИПН
	|ВЫБРАТЬ
	|	ИПНРасчетыСБюджетом.ФизЛицо,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НачисленоДоходов,";
	Если СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,";
	Иначе
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	ИПНРасчетыСБюджетом.ПримененныйВычет КАК НалоговыеВычеты,";
	КонецЕсли;                        	
	ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПогашениеЖилищныхЗаймов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НаОплатуМедицинскихУслуг,";
	Если СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДоходыНеОблагаемыеИПН,";
	Иначе
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	ИПНРасчетыСБюджетом.ПримененнаяЛьгота КАК ДоходыНеОблагаемыеИПН,";
	КонецЕсли;                        	
	ДоходыИНалогиТекст = ДоходыИНалогиТекст + "	
	|	ИПНРасчетыСБюджетом.Налог КАК ИндивидуальныйПодоходныйНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплаченоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыНеОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СуммаОСМС
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                
	|		ПО (НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)      	
	|			 И (ВЫБОР
	|					КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ИПНРасчетыСБюджетом.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)
	|ГДЕ
	|	ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик
	|	И ИПНРасчетыСБюджетом.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И ИПНРасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ИПНРасчетыСБюджетом.ВидДвижения = &парамПриход
	|	И ИПНРасчетыСБюджетом.ВидСтроки = &парамВидСтрокиИсчисление
	|	И ИПНРасчетыСБюджетом.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ИПНРасчетыСБюджетом.Активность = ИСТИНА
	|	" + ?(НЕ ПризнакИП, "И ВЫБОР
	|								КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|									ТОГДА НЕ ИПНРасчетыСБюджетом.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|							    ИНАЧЕ ИСТИНА
	|						   КОНЕЦ", "") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Вычеты ИПН с 2018 года
	|ВЫБРАТЬ
	|	СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НачисленоДоходов,
	|	СведенияОбИсчисленииВычетовИПН.ПримененныйВычетОборот КАК НалоговыеВычеты,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПогашениеЖилищныхЗаймов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НаОплатуМедицинскихУслуг,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДоходыНеОблагаемыеИПН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплаченоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыНеОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СуммаОСМС
	|ИЗ
	|	РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И ФизическоеЛицо <> &парамИндивидуальныйПредприниматель 
	|			И (ВидВычета <> Значение(Справочник.ВычетыИПН.ВычетОПВ)
	|			И ВидВычета <> Значение(Справочник.ВычетыИПН.ДобровольныеПенсионныеВзносы)
	|			И ВидВычета <> Значение(Справочник.ВычетыИПН.ПогашениеВознагражденияПоЖилищнымЗаймам)
	|			И ВидВычета <> Значение(Справочник.ВычетыИПН.НаОплатуМедицинскихУслуг)
	|			И ВидВычета <> Значение(Справочник.ВычетыИПН.СтраховыеПремииПоДоговорамНакопительногоСтрахования))) КАК СведенияОбИсчисленииВычетовИПН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                    
	|			ПО (НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ) = ВТ_Гражданство.Период)        
	|			И СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо = ВТ_Гражданство.ФИО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НачисленоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
	|	СведенияОбИсчисленииВычетовИПН.ПримененныйВычетОборот КАК ПогашениеЖилищныхЗаймов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НаОплатуМедицинскихУслуг,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДоходыНеОблагаемыеИПН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплаченоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыНеОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СуммаОСМС
	|ИЗ
	|	РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И ФизическоеЛицо <> &парамИндивидуальныйПредприниматель 
	|			И ВидВычета = Значение(Справочник.ВычетыИПН.ПогашениеВознагражденияПоЖилищнымЗаймам)) КАК СведенияОбИсчисленииВычетовИПН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                    
	|			ПО (НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ) = ВТ_Гражданство.Период)        
	|			И СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо = ВТ_Гражданство.ФИО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НачисленоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	СведенияОбИсчисленииВычетовИПН.ПримененныйВычетОборот КАК ДобровольныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПогашениеЖилищныхЗаймов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НаОплатуМедицинскихУслуг,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДоходыНеОблагаемыеИПН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплаченоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыНеОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СуммаОСМС
	|ИЗ
	|	РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И ФизическоеЛицо <> &парамИндивидуальныйПредприниматель 
	|			И ВидВычета = Значение(Справочник.ВычетыИПН.ДобровольныеПенсионныеВзносы)) КАК СведенияОбИсчисленииВычетовИПН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                    
	|			ПО (НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ) = ВТ_Гражданство.Период)        
	|			И СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо = ВТ_Гражданство.ФИО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НачисленоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПогашениеЖилищныхЗаймов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,
	|	СведенияОбИсчисленииВычетовИПН.ПримененныйВычетОборот КАК НаОплатуМедицинскихУслуг,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДоходыНеОблагаемыеИПН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплаченоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыНеОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СуммаОСМС
	|ИЗ
	|	РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И ФизическоеЛицо <> &парамИндивидуальныйПредприниматель 
	|			И ВидВычета = Значение(Справочник.ВычетыИПН.НаОплатуМедицинскихУслуг)) КАК СведенияОбИсчисленииВычетовИПН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                    
	|			ПО (НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ) = ВТ_Гражданство.Период)        
	|			И СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо = ВТ_Гражданство.ФИО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// ОПВ
	|ВЫБРАТЬ
	|	ОПВРасчетыСФондами.ФизЛицо,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НачисленоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,
	|	ОПВРасчетыСФондами.Взнос КАК ОбязательныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПогашениеЖилищныхЗаймов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НаОплатуМедицинскихУслуг,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДоходыНеОблагаемыеИПН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплаченоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыНеОблагаемыеСН,
	|	- ОПВРасчетыСФондами.Взнос КАК ВыплатыОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СуммаОСМС
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                              
	|		ПО (НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)     
	|			И ОПВРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО                                            	
	|ГДЕ
	|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И ОПВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ОПВРасчетыСФондами.ВидДвижения = &парамПриход
	|	И ОПВРасчетыСФондами.ВидПлатежа = &парамВидПлатежаНалог
	|	И ОПВРасчетыСФондами.ВидСтроки = &парамВидСтрокиИсчисление
	|	И ОПВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель	
	|	И ОПВРасчетыСФондами.Активность = Истина
	|	";
	Если СтруктураРеквизитовФормы.ВедетсяУчетОППВ Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "	
		|ОБЪЕДИНИТЬ ВСЕ 
		|// ОППВ
		|
		|ВЫБРАТЬ
		|	ОППВРасчетыСФондами.ФизЛицо,
		|	ВЫБОР КОГДА &ВключатьОППВВДоходыРаботников Тогда ОППВРасчетыСФондами.Взнос Иначе ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КОНЕЦ КАК НачисленоДоходов, // включаем ОППВ в сумму доходов, если установлен признак ВключатьОППВВДоходыРаботников
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
		|	ОППВРасчетыСФондами.Взнос 	 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПогашениеЖилищныхЗаймов,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НаОплатуМедицинскихУслуг,
		|	ВЫБОР КОГДА &ВключатьОППВВДоходыРаботников Тогда ОППВРасчетыСФондами.Взнос Иначе ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) Конец  КАК ДоходыНеОблагаемыеИПН, // включаем ОППВ в сумму доходов, если установлен признак ВключатьОППВВДоходыРаботников
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплаченоДоходов,
		|	ВЫБОР КОГДА &ВключатьОППВВДоходыРаботников Тогда ОППВРасчетыСФондами.Взнос Иначе ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КОНЕЦ КАК ВыплатыНеОблагаемыеСН, // включаем ОППВ в сумму доходов, если установлен признак ВключатьОППВВДоходыРаботников
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыОблагаемыеСН,  
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
		|	ЛОЖЬ КАК ВыплатыПоИЛ,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СуммаОСМС
		|ИЗ
		|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                              
		|		ПО (НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)     
		|			И ОППВРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО                                            	
		|ГДЕ
		|	ОППВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И ОППВРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|	И ОППВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		|	И ОППВРасчетыСФондами.ВидДвижения 	= &парамПриход
		|	И ОППВРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
		|	И ОППВРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление
		|	И ОППВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель";
	КонецЕсли;
	
	ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// доходы, облагаемые и необлагаемые СН
	|ВЫБРАТЬ
	|	СНСведенияОДоходах.ФизЛицо,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НачисленоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПогашениеЖилищныхЗаймов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НаОплатуМедицинскихУслуг,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДоходыНеОблагаемыеИПН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплаченоДоходов,
	|	ВЫБОР
	|		КОГДА СНСведенияОДоходах.СпособНалогообложения = &парамНеОблагаетсяЦеликом 
	|			ТОГДА СНСведенияОДоходах.СуммаДоходаОборот
	|		ИНАЧЕ СНСведенияОДоходах.СуммаВычетаОборот
	|	КОНЕЦ КАК ВыплатыНеОблагаемыеСН,
	|	ВЫБОР
	|		КОГДА СНСведенияОДоходах.СпособНалогообложения <> &парамНеОблагаетсяЦеликом
	|			ТОГДА СНСведенияОДоходах.СуммаДоходаОборот - СНСведенияОДоходах.СуммаВычетаОборот
	|		ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК ВыплатыОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СуммаОСМС
	|ИЗ
	|	РегистрНакопления.СНСведенияОДоходах.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель ) КАК СНСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                    
	|			ПО (НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ) = ВТ_Гражданство.Период)        
	|			И СНСведенияОДоходах.ФизЛицо = ВТ_Гражданство.ФИО  	
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// социальный налог
	|ВЫБРАТЬ
	|	СНИсчисленный.ФизЛицо,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НачисленоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПогашениеЖилищныхЗаймов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НаОплатуМедицинскихУслуг,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДоходыНеОблагаемыеИПН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплаченоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыНеОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыОблагаемыеСН,
	|	СНИсчисленный.Налог КАК СоциальныеНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СуммаОСМС
	|ИЗ
	|	РегистрНакопления.СНИсчисленный КАК СНИсчисленный 
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                        
	|		ПО (НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)        
	|			И СНИсчисленный.ФизЛицо = ВТ_Гражданство.ФИО                                               	
	|ГДЕ
	|	СНИсчисленный.Налогоплательщик = &парамНалогоплательщик
	|	И СНИсчисленный.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И СНИсчисленный.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо 
	|	И СНИсчисленный.ФизЛицо <> &парамИндивидуальныйПредприниматель 	
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// социальные отчисления
	|ВЫБРАТЬ
	|	СОРасчетыСФондами.ФизЛицо,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НачисленоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПогашениеЖилищныхЗаймов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НаОплатуМедицинскихУслуг,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДоходыНеОблагаемыеИПН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплаченоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыНеОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,";
	Если СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,";
	Иначе
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	ВЫБОР
		|		КОГДА &парамСтавкаСО = 0
		|			ТОГДА 0
		|		ИНАЧЕ СОРасчетыСФондами.Отчисление / &парамСтавкаСО
		|	КОНЕЦ КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,";
	КонецЕсли;                        	
	ДоходыИНалогиТекст = ДоходыИНалогиТекст + " 	
	|	СОРасчетыСФондами.Отчисление КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СуммаОСМС
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
	|			И СОРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО                                                  	
	|ГДЕ
	|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И СОРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И СОРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
	|	И СОРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление
	|	И СОРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель";	
	
	Если СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "	
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// доходы, облагаемые социальными отчислениями
		|ВЫБРАТЬ
		|	СОСведенияОДоходах.ФизЛицо,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НачисленоДоходов,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПогашениеЖилищныхЗаймов,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НаОплатуМедицинскихУслуг,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДоходыНеОблагаемыеИПН,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплаченоДоходов,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыНеОблагаемыеСН,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыОблагаемыеСН,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,
		|	СОСведенияОДоходах.ОблагаемаяБазаОборот КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
		|	ЛОЖЬ КАК ВыплатыПоИЛ,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СуммаОСМС
		|ИЗ
		|	РегистрНакопления.СОСведенияОДоходах.Обороты(
		|			&парамПериодС,
		|			&парамПериодПо,
		|			МЕСЯЦ,
		|			Налогоплательщик = &парамНалогоплательщик
		|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|			И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК СОСведенияОДоходах
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
		|		ПО (НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ) = ВТ_Гражданство.Период)           
		|			И СОСведенияОДоходах.ФизЛицо = ВТ_Гражданство.ФИО";
	КонецЕсли;                        	
	ДоходыИНалогиТекст = ДоходыИНалогиТекст + "                                                  	
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// отчисления  ОСМС
	|ВЫБРАТЬ
	|	ООСМСРасчетыСФондами.ФизЛицо,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НачисленоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПогашениеЖилищныхЗаймов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НаОплатуМедицинскихУслуг,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДоходыНеОблагаемыеИПН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплаченоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыНеОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	ООСМСРасчетыСФондами.Отчисление КАК СуммаОСМС
	|ИЗ
	|	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
	|			И ООСМСРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО                                                  	
	|ГДЕ
	|	ООСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ООСМСРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И ООСМСРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ООСМСРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
	|	И ООСМСРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление
	|	" + ?(ОрганизацияЯвляетсяПлательщикомСН, "", "И ООСМСРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// взносы  ОСМС
	|ВЫБРАТЬ
	|	ВОСМСРасчетыСФондами.ФизЛицо,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НачисленоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПогашениеЖилищныхЗаймов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НаОплатуМедицинскихУслуг,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДоходыНеОблагаемыеИПН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплаченоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыНеОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	ВОСМСРасчетыСФондами.Взнос КАК СуммаОСМС
	|ИЗ
	|	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
	|			И ВОСМСРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО                                                  	
	|ГДЕ
	|	ВОСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ВОСМСРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И ВОСМСРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ВОСМСРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
	|	И ВОСМСРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление
	|	" + ?(ОрганизацияЯвляетсяПлательщикомСН, "", "И ВОСМСРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// выплаченные доходы
	|ВЫБРАТЬ
	|	ВыплаченныеДоходы.ФизЛицо,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НачисленоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПогашениеЖилищныхЗаймов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НаОплатуМедицинскихУслуг,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДоходыНеОблагаемыеИПН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
	|	ВыплаченныеДоходы.СуммаДоходаОборот КАК ВыплаченоДоходов,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыНеОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыОблагаемыеСН,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СуммаОСМС
	|ИЗ
	|	РегистрНакопления.ВыплаченныеДоходыРаботникамОрганизацийНУ.Обороты(
	|		    &парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель
	|			" + ?(НЕ ПризнакИП, "И ВЫБОР
	|										КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	|											ТОГДА НЕ ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|									    ИНАЧЕ ИСТИНА
	|								   КОНЕЦ", "") + "
	|			) КАК ВыплаченныеДоходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
	|			ПО (НАЧАЛОПЕРИОДА(ВыплаченныеДоходы.Период, МЕСЯЦ) = ВТ_Гражданство.Период)                        	
	|				И (ВЫБОР
	|						КОГДА ВыплаченныеДоходы.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|							И ВыплаченныеДоходы.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|							ТОГДА ВыплаченныеДоходы.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|						ИНАЧЕ ВыплаченныеДоходы.ФизЛицо = ВТ_Гражданство.ФИО
	|		   		   КОНЕЦ)
	|";
	
	// Если включаем суммы удержаний по исполнительным листам по фактическому перечислению
	Если Не ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// выплата по исполнительным листам
		|ВЫБРАТЬ
		|	ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо КАК ФизЛицо,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НачисленоДоходов,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПогашениеЖилищныхЗаймов,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НаОплатуМедицинскихУслуг,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДоходыНеОблагаемыеИПН,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовРасход + ВзаиморасчетыСПолучателямиИЛ.СуммаСборовРасход КАК ВыплаченоДоходов,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыНеОблагаемыеСН,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыОблагаемыеСН,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
		|	ЛОЖЬ КАК ВыплатыПоИЛ,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СуммаОСМС
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Обороты(
		|			&парамПериодС,
		|			&парамПериодПо,
		|			МЕСЯЦ,
		|			Налогоплательщик = &парамНалогоплательщик
		|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|			И ДокументОснование.ФизЛицо <> &парамИндивидуальныйПредприниматель ) КАК ВзаиморасчетыСПолучателямиИЛ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
		|		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.Период, МЕСЯЦ) = ВТ_Гражданство.Период)             
		|				И ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо = ВТ_Гражданство.ФИО              		
		|";
	//Иначе
		// удержания по ИЛ уже находятся в регистр накопления ВыплаченныеДоходыРаботникамОрганизацийНУ
	КонецЕсли;
	
	// Добавим данные по получателям по исполнительным листам
	Если ПризнакАлиментов Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// выплата по исполнительным листам получателям сумм
		|ВЫБРАТЬ
		|	ВзаиморасчетыСПолучателямиИЛ.Получатель КАК ФизЛицо,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовПриход КАК НачисленоДоходов,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НалоговыеВычеты,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПенсионныеВзносы,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ДобровольныеПенсионныеВзносы,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ПогашениеЖилищныхЗаймов,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СтраховыеПремии,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК НаОплатуМедицинскихУслуг,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовПриход КАК ДоходыНеОблагаемыеИПН,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ИндивидуальныйПодоходныйНалог,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовРасход КАК ВыплаченоДоходов,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовПриход КАК ВыплатыНеОблагаемыеСН,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК ВыплатыОблагаемыеСН,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеНалог,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СоциальныеОтчисления,
		|	ИСТИНА КАК ВыплатыПоИЛ,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2)) КАК СуммаОСМС
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Обороты(
		|			&парамПериодС,
		|			&парамПериодПо,
		|			МЕСЯЦ,
		|			Налогоплательщик = &парамНалогоплательщик
		|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|			И Получатель.ЮрФизЛицо = &парамФизЛицо 
		|			И НЕ ВЫБОР
		|					КОГДА Получатель.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
		|							ИЛИ Получатель.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан) ТОГДА
		|						ИСТИНА
		|					ИНАЧЕ
		|						ЛОЖЬ
		|					КОНЕЦ) КАК ВзаиморасчетыСПолучателямиИЛ				
		|";
	КонецЕсли;

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТ_ДатыПериодовГода
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря  КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &парамПериодС И &парамПериодПо
	|;
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ
    |	Периоды.Период КАК Период,
    |	ФизическиеЛица.Ссылка КАК ФИО
	|ПОМЕСТИТЬ ВТ_Периоды
    |ИЗ
    |	ВТ_ДатыПериодовГода КАК Периоды
    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
    |		ПО (ИСТИНА)
    |ГДЕ
    |	ФизическиеЛица.ЭтоГруппа = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
    |	Период,
    |	ФИО
	|;
	|/////////////////////////////////////////////////
	|ВЫБРАТЬ
    |	Периоды.Период КАК Период,
    |	Периоды.ФИО КАК ФИО,
    |	МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСреза
	|ПОМЕСТИТЬ ВТ_ГражданствоФизЛицСрезПоследних 
    |	ИЗ
    |		ВТ_Периоды КАК Периоды
    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
    |			ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(ГражданствоФизЛиц.Период, МЕСЯЦ))
    |				И Периоды.ФИО = ГражданствоФизЛиц.ФизЛицо
    |		
    |СГРУППИРОВАТЬ ПО
    |	Периоды.Период,
    |	Периоды.ФИО
	|ИНДЕКСИРОВАТЬ ПО
    |	ПериодСреза,
    |	ФИО
	|;
	|/////////////////////////////////////////////////////
	|ВЫБРАТЬ
    |	ГражданствоФизЛицСрезПоследних.Период КАК Период,
    |	ГражданствоФизЛицСрезПоследних.ФИО КАК ФИО,
    |	ВЫБОР
    |		КОГДА ГражданствоФизЛиц.Страна ЕСТЬ NULL 
    |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
    |		ИНАЧЕ ГражданствоФизЛиц.Страна
    |	КОНЕЦ КАК Страна,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ) 
	|			ТОГДА ГражданствоФизЛиц.Страна 
	|       ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
	|	КОНЕЦ КАК СтранаРезидентства,
	|		ГражданствоФизЛиц.НомерНалоговойРегистрацииВСтранеРезидентства,
	|		ГражданствоФизЛиц.НеЯвляетсяналоговымРезидентомРК
	|ПОМЕСТИТЬ ВТ_ИтогГражданство
    |	ИЗ
    |		ВТ_ГражданствоФизЛицСрезПоследних КАК ГражданствоФизЛицСрезПоследних
    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
    |			ПО ГражданствоФизЛицСрезПоследних.ПериодСреза = ГражданствоФизЛиц.Период
    |				И ГражданствоФизЛицСрезПоследних.ФИО = ГражданствоФизЛиц.ФизЛицо
    |	ГДЕ
    |		(НЕ ВЫБОР
    |					КОГДА ГражданствоФизЛиц.Страна ЕСТЬ NULL 
    |						ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
    |					ИНАЧЕ ГражданствоФизЛиц.Страна
    |				КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
    |	
    |	ОБЪЕДИНИТЬ ВСЕ
    |	
    |	ВЫБРАТЬ
    |		Периоды.Период,
    |		Контрагенты.Ссылка,
    |		ВЫБОР
    |			КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
    |				ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
    |			ИНАЧЕ Контрагенты.СтранаРезидентства
    |		КОНЕЦ,
	|		ВЫБОР
    |			КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
    |				ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
    |			ИНАЧЕ Контрагенты.СтранаРезидентства
    |		КОНЕЦ,
	|		Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства,
	|		ВЫБОР КОГДА Подстрока(Контрагенты.КБЕ,1,1) = ""2"" Тогда Истина иначе Ложь КОНЕЦ
    |	ИЗ
    |		ВТ_ДатыПериодовГода КАК Периоды
    |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
    |			ПО (ИСТИНА)
    |	ГДЕ
    |		Контрагенты.ЭтоГруппа = ЛОЖЬ
    |		И (НЕ ВЫБОР
    |					КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
    |						ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
    |					ИНАЧЕ Контрагенты.СтранаРезидентства
    |				КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
	|;
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ИтогГражданство.Период КАК Период,
    |	ИтогГражданство.ФИО КАК ФИО,
    |	ИтогГражданство.Страна,
	|	ИтогГражданство.НомерНалоговойРегистрацииВСтранеРезидентства,	
	|	ИтогГражданство.НеЯвляетсяналоговымРезидентомРК,
	|	ИтогГражданство.СтранаРезидентства
    |ПОМЕСТИТЬ ВТ_Гражданство
    |ИЗ
    |	ВТ_ИтогГражданство КАК ИтогГражданство
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	Период,
    |	ФИО";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();

	// Свернем строки по физлицам
	ДоходыИНалогиТекст = "
	|ВЫБРАТЬ
	|	ДоходыИНалоги.ФизЛицо КАК ФизЛицо,
	|	ДоходыИНалоги.ВыплатыПоИЛ КАК ВыплатыПоИЛ,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.НачисленоДоходов) 							КАК ЧИСЛО(19, 0)) КАК НачисленоДоходов,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.НалоговыеВычеты) 							КАК ЧИСЛО(19, 0)) КАК НалоговыеВычеты,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ОбязательныеПенсионныеВзносы) 				КАК ЧИСЛО(19, 0)) КАК ОбязательныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ОбязательныеПрофессиональныеПенсионныеВзносы) КАК ЧИСЛО(19, 0)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ДобровольныеПенсионныеВзносы) 				КАК ЧИСЛО(19, 0)) КАК ДобровольныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ПогашениеЖилищныхЗаймов) 					КАК ЧИСЛО(19, 0)) КАК ПогашениеЖилищныхЗаймов,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.СтраховыеПремии) 							КАК ЧИСЛО(19, 0)) КАК СтраховыеПремии,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.НаОплатуМедицинскихУслуг) 					КАК ЧИСЛО(19, 0)) КАК НаОплатуМедицинскихУслуг,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ДоходыНеОблагаемыеИПН) 					КАК ЧИСЛО(19, 0)) КАК ДоходыНеОблагаемыеИПН,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ИндивидуальныйПодоходныйНалог) 			КАК ЧИСЛО(19, 0)) КАК ИндивидуальныйПодоходныйНалог,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ВыплаченоДоходов) 							КАК ЧИСЛО(19, 0)) КАК ВыплаченоДоходов,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ВыплатыНеОблагаемыеСН) 					КАК ЧИСЛО(19, 0)) КАК ВыплатыНеОблагаемыеСН,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ВыплатыОблагаемыеСН)						КАК ЧИСЛО(19, 0)) КАК ВыплатыОблагаемыеСН,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.СоциальныеНалог) 							КАК ЧИСЛО(19, 0)) КАК СоциальныеНалог,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.РасходыРаботодателяСКоторыхИсчисляютсяСО) 	КАК ЧИСЛО(19, 0)) КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.СоциальныеОтчисления) 						КАК ЧИСЛО(19, 0)) КАК СоциальныеОтчисления,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.СуммаОСМС)			 						КАК ЧИСЛО(19, 0)) КАК СуммаОСМС
	|  ПОМЕСТИТЬ ВТ_ДоходыИНалоги
	|ИЗ
	|	(" + ДоходыИНалогиТекст + ") КАК ДоходыИНалоги
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоходыИНалоги.ФизЛицо,
	|	ДоходыИНалоги.ВыплатыПоИЛ
	|";	
	Запрос.Текст = ДоходыИНалогиТекст;
	Запрос.Выполнить();
	// Выберем прочую информацию, относящуюся к физлицам
	ТекстЗапроса = "
	|//////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТ_Гражданство.Период) КАК ПериодСреза,
	|	ВТ_Гражданство.ФИО КАК ФИО
	|ПОМЕСТИТЬ ТаблПериодСреза
	|	ИЗ
	|	ВТ_Гражданство КАК ВТ_Гражданство
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Гражданство.ФИО;
	|
	|//////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблПериодСреза.ПериодСреза КАК Период,
	|	ТаблПериодСреза.ФИО КАК ФизЛицо,
	|	ТаблГражданство.Страна,
	|	ТаблГражданство.СтранаРезидентства,
	|	ТаблГражданство.НомерНалоговойРегистрацииВСтранеРезидентства,
	|	ТаблГражданство.НеЯвляетсяНалоговымРезидентомРК,
	|	ЕСТЬNULL(КлассификаторСтранМира.КодАльфа2, """") КАК КодСтраны
	|ПОМЕСТИТЬ ТаблНеГраждане
	|ИЗ
	|	ТаблПериодСреза КАК ТаблПериодСреза
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ТаблГражданство
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
	|			ПО ТаблГражданство.СтранаРезидентства = КлассификаторСтранМира.Ссылка
	|	ПО ТаблПериодСреза.ПериодСреза = ТаблГражданство.Период
	|	И ТаблПериодСреза.ФИО = ТаблГражданство.ФИО;
	|
	|/////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоходыИНалоги.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL ТОГДА ДоходыИНалоги.ФизЛицо.Наименование 
	|		ИНАЧЕ ФИОФИзЛиц.Фамилия + ВЫБОР
	|									КОГДА ФИОФизЛиц.Имя <> """" ТОГДА "" "" + ФИОФизЛиц.Имя
	|									ИНАЧЕ """"
	|								  КОНЕЦ + 
	|								  ВЫБОР
	|									КОГДА ФИОФизЛиц.Отчество <> """" ТОГДА "" "" + ФИОФизЛиц.Отчество
	|									ИНАЧЕ """"
	|								  КОНЕЦ 
	|	КОНЕЦ КАК ФИОФизЛица,
	|	ДоходыИНалоги.ФизЛицо.РНН КАК РНН,
	|	ДоходыИНалоги.ФизЛицо.ИдентификационныйКодЛичности КАК ИИН,
	|	ТаблНеГраждане.КодСтраны КАК КодСтраны,
	|	ЕСТЬNULL(ТаблНеГраждане.НомерНалоговойРегистрацииВСтранеРезидентства,"""") КАК НомерРегистрации,
	|	ЕСТЬNULL(ТаблНеГраждане.НеЯвляетсяНалоговымРезидентомРК,Истина) КАК НеЯвляетсяНалоговымРезидентомРК,
	|	ЕСТЬNULL(ПаспортныеДанныеФизЛиц.ДокументВид.КодВидаДокументаВНалоговойОтчетности,"""") КАК КодВидаДокументаВНалоговойОтчетности,
	|	ЕСТЬNULL(ПаспортныеДанныеФизЛиц.ДокументНомер, """") КАК НомерДокумента,
	|	ЕСТЬNULL(ПаспортныеДанныеФизЛиц.ДокументДатаВыдачи, &парамПустаяДата) КАК ДатаДокумента,			
	|	ВЫБОР
	|		КОГДА ДоходыИНалоги.ФизЛицо ССЫЛКА Справочник.Контрагенты И ДоходыИНалоги.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|			И НЕ ДоходыИНалоги.ВыплатыПоИЛ ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИндивидуальныйПредпринимательАдвокатЧастныйНотариус,	
	|	ДоходыИНалоги.НачисленоДоходов КАК НачисленоДоходов,
	|	ДоходыИНалоги.НалоговыеВычеты КАК НалоговыеВычеты,
	|	ДоходыИНалоги.ОбязательныеПенсионныеВзносы КАК ОбязательныеПенсионныеВзносы,
	|	ДоходыИНалоги.ОбязательныеПрофессиональныеПенсионныеВзносы КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ДоходыИНалоги.ДобровольныеПенсионныеВзносы КАК ДобровольныеПенсионныеВзносы,
	|	ДоходыИНалоги.ПогашениеЖилищныхЗаймов КАК ПогашениеЖилищныхЗаймов,
	|	ДоходыИНалоги.СтраховыеПремии КАК СтраховыеПремии,
	|	ДоходыИНалоги.НаОплатуМедицинскихУслуг КАК НаОплатуМедицинскихУслуг,
	|	ДоходыИНалоги.ДоходыНеОблагаемыеИПН КАК ДоходыНеОблагаемыеИПН,
	|	ДоходыИНалоги.ИндивидуальныйПодоходныйНалог КАК ИндивидуальныйПодоходныйНалог,
	|	ДоходыИНалоги.ВыплаченоДоходов КАК ВыплаченоДоходов,
	|	ДоходыИНалоги.ВыплатыНеОблагаемыеСН КАК ВыплатыНеОблагаемыеСН,
	|	ДоходыИНалоги.ВыплатыОблагаемыеСН КАК ВыплатыОблагаемыеСН,
	|	ДоходыИНалоги.СоциальныеНалог КАК СоциальныеНалог,
	|	ДоходыИНалоги.РасходыРаботодателяСКоторыхИсчисляютсяСО КАК РасходыРаботодателяСКоторыхИсчисляютсяСО,
	|	ДоходыИНалоги.СоциальныеОтчисления КАК СоциальныеОтчисления,
	|	ДоходыИНалоги.СуммаОСМС КАК СуммаОСМС
	|
	|ИЗ
	|	ВТ_ДоходыИНалоги КАК ДоходыИНалоги
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамПериодПо) КАК ФИОФизЛиц
	|		ПО ДоходыИНалоги.ФизЛицо = ФИОФизЛиц.ФизЛицо	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблНеГраждане КАК ТаблНеГраждане  // выберем последнюю страну нерезидентства	
	|		ПО (ВЫБОР
    |				КОГДА ДоходыИНалоги.ФизЛицо ССЫЛКА Справочник.Контрагенты
    |					И ДоходыИНалоги.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |					ТОГДА ДоходыИНалоги.ФизЛицо.ФизЛицо = ТаблНеГраждане.ФизЛицо
    |				ИНАЧЕ ДоходыИНалоги.ФизЛицо = ТаблНеГраждане.ФизЛицо
    |			  КОНЕЦ)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&парамПериодПо) КАК ПаспортныеДанныеФизЛиц
	|		ПО (ВЫБОР
    |				КОГДА ДоходыИНалоги.ФизЛицо ССЫЛКА Справочник.Контрагенты
    |					И ДоходыИНалоги.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |					ТОГДА ДоходыИНалоги.ФизЛицо.ФизЛицо = ПаспортныеДанныеФизЛиц.ФизЛицо
    |				ИНАЧЕ  ДоходыИНалоги.ФизЛицо = ПаспортныеДанныеФизЛиц.ФизЛицо
    |			  КОНЕЦ)	
	|
	|ГДЕ
	|	(ДоходыИНалоги.НачисленоДоходов <> 0
	|	ИЛИ ДоходыИНалоги.НалоговыеВычеты <> 0
	|	ИЛИ ДоходыИНалоги.ОбязательныеПенсионныеВзносы <> 0
	|	ИЛИ ДоходыИНалоги.ОбязательныеПрофессиональныеПенсионныеВзносы <> 0
	|	ИЛИ ДоходыИНалоги.ДобровольныеПенсионныеВзносы <> 0
	|	ИЛИ ДоходыИНалоги.ПогашениеЖилищныхЗаймов <> 0
	|	ИЛИ ДоходыИНалоги.СтраховыеПремии <> 0
	|	ИЛИ ДоходыИНалоги.НаОплатуМедицинскихУслуг <> 0
	|	ИЛИ ДоходыИНалоги.ДоходыНеОблагаемыеИПН <> 0
	|	ИЛИ ДоходыИНалоги.ИндивидуальныйПодоходныйНалог <> 0
	|	ИЛИ ДоходыИНалоги.ВыплаченоДоходов <> 0
	|	ИЛИ ДоходыИНалоги.ВыплатыНеОблагаемыеСН <> 0
	|	ИЛИ ДоходыИНалоги.ВыплатыОблагаемыеСН <> 0
	|	ИЛИ ДоходыИНалоги.СоциальныеНалог <> 0
	|	ИЛИ ДоходыИНалоги.РасходыРаботодателяСКоторыхИсчисляютсяСО <> 0
	|	ИЛИ ДоходыИНалоги.СоциальныеОтчисления <> 0
	|	ИЛИ ДоходыИНалоги.СуммаОСМС <> 0)	
	|
	|УПОРЯДОЧИТЬ ПО
	|
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL ТОГДА ДоходыИНалоги.ФизЛицо.Наименование 
	|		ИНАЧЕ ФИОФИзЛиц.Фамилия + ВЫБОР
	|									КОГДА ФИОФизЛиц.Имя <> """" ТОГДА "" "" + ФИОФизЛиц.Имя
	|									ИНАЧЕ """"
	|								  КОНЕЦ + 
	|								  ВЫБОР
	|									КОГДА ФИОФизЛиц.Отчество <> """" ТОГДА "" "" + ФИОФизЛиц.Отчество
	|									ИНАЧЕ """"
	|								  КОНЕЦ 
	|	КОНЕЦ
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() и ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 200.02 за отчетный период отсутствуют...'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	    
    Возврат Результат;
	
КонецФункции // Форма200_02РассчитатьДанныеФормы()

&НаКлиенте
Процедура Форма200_02Расшифровка(ИмяЯчейки)
	
	СтруктураПоФизЛицу = Новый Структура;
	// определим работника
	Если Найти(ИмяЯчейки,"__") > 0 Тогда		
		НомерЯчейки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "__")+ 2));
		
		ОбластьРасшифровки = Форма200_02ПолеТабличногоДокументаСтраница1.Области.Найти("Ф200_02ФИОРезидента__" +  НомерЯчейки);		
		Если ОбластьРасшифровки <> Неопределено Тогда
			Если ЗначениеЗаполнено(ОбластьРасшифровки.Расшифровка) Тогда
				СтруктураПоФизЛицу.Вставить("ФизЛицо", ОбластьРасшифровки.Расшифровка);
				СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);					
			Иначе
				ПоказатьПредупреждение(,НСтр("ru = 'Для формирования расшифровки заполните физическое лицо в графе ""В"" на странице 1.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки не поддерживается."+Символы.ПС+"Расшифровку содержат ячейки формы, выделенные голубым цветом.'"));
		Возврат;
	КонецЕсли;
	
	ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,, СтруктураПоФизЛицу, "Детальный", Истина);
	
КонецПроцедуры // Форма200_02Расшифровка()

&НаКлиенте
Процедура Форма200_02Расшифровкаобщая()
	
	СтруктураПоФизЛицу = Новый Структура;
	Если ПолучитьЗначениеРеквизита(Налогоплательщик, "ЮрФизЛицо") = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		СтруктураПоФизЛицу.Вставить("ФизЛицо", ПолучитьЗначениеРеквизита(Налогоплательщик, "ИндивидуальныйПредприниматель"));
		СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.НеРавно);											
	КонецЕсли;
	
	ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,,СтруктураПоФизЛицу,, Истина);	
	
КонецПроцедуры // Форма200_02Расшифровкаобщая()

&НаКлиенте
Процедура РасшифровкаПоРаботнику(Команда)
	
	Попытка
		ИмяЯчейки = ТекущийЭлемент.ТекущаяОбласть.Имя;
	Исключение
		 ПоказатьПредупреждение(, Нстр("ru = 'Активизируйте нужную ячейку отчета для расшифровки.'"));
		Возврат;
	КонецПопытки;
		
	ЦветРасшифровки = Форма200ПолеТабличногоДокументаСтраница1.Области.s_200_00_001_1.ЦветФона;
	                              
	Если Лев(ТекущийЭлемент.Имя,СтрДлина(ТекущийЭлемент.Имя)-1) = "Форма200_02ПолеТабличногоДокументаСтраница"
	 	И ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда
		Если КодФормы = "Форма200_02" Тогда
			Форма200_02Расшифровка(ИмяЯчейки);		
		КонецЕсли;
	Иначе	
		ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки не поддерживается."+Символы.ПС+"Расшифровку содержат ячейки формы, выделенные голубым цветом.'"));
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Форма 200.03

&НаСервере
Функция Форма200_03РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
    //должен быть предрасчет
	ТаблицаПоМесяцам = Новый ТаблицаЗначений;
	
	ТаблицаПоМесяцам.Колонки.Добавить("СтруктурнаяЕдиница");
	ТаблицаПоМесяцам.Колонки.Добавить("КодСтроки", 				ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаПоМесяцам.Колонки.Добавить("МесяцНалоговогоПериода", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаПоМесяцам.Колонки.Добавить("Значение", 				ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));

	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("СтруктурнаяЕдиница");
	ТаблицаРезультат.Колонки.Добавить("НалоговыйКомитет");
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_001_1", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_001_2", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_001_3", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_001_4", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_001_5", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));

	ТаблицаРезультат.Колонки.Добавить("Ф200_03_002_1", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_002_2", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_002_3", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_002_4", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_002_5", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));

	ТаблицаРезультат.Колонки.Добавить("Ф200_03_003_1", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_003_2", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_003_3", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_003_4", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_003_5", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_004_1", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_004_2", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_004_3", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_004_4", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_004_5", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));

	ТаблицаРезультат.Колонки.Добавить("Ф200_03_005_1", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_005_2", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_005_3", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_005_4", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_005_5", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));

	ТаблицаРезультат.Колонки.Добавить("Ф200_03_006_1", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_006_2", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_006_3", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_006_4", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_006_5", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_007_1", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_007_2", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_007_3", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_007_4", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_007_5", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));

	ТаблицаРезультат.Индексы.Добавить("СтруктурнаяЕдиница");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамПериодС", 				НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПериодПо", 				КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамНалогоплательщик",	 	Налогоплательщик);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());
	
	// из списка структурных единиц исключим саму головную организацию - налогоплательщика, 
	// т.к. приложение 200.03 составляется только по филиалам/представительствам
	СписокДляОтбора = Новый Массив;
	Для Каждого ЭлементСписка Из мСписокСтруктурныхЕдиниц Цикл
		Если ЭлементСписка.Значение <> Налогоплательщик Тогда
			СписокДляОтбора.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", СписокДляОтбора);
	
	// если налогоплательщик - ИП, то исключим данные самого индивидуального предпринимателя
	Если ОтчетОбъект.Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Налогоплательщик.ИндивидуальныйПредприниматель);
	Иначе
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Неопределено);
	КонецЕсли;
	
	// Определим учетную политику по НУ
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН
	               |ИЗ
	               |	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодПо, Организация = &парамНалогоплательщик) КАК УчетнаяПолитикаНУ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОрганизацияЯвляетсяПлательщикомСН			= Выборка.ОрганизацияЯвляетсяПлательщикомСН;
	Иначе
		ОрганизацияЯвляетсяПлательщикомСН			= Ложь;
	КонецЕсли;
		
	МТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МТ;
		
	// Сумма индивидуального подоходного налога, подлежащего перечислению
	
	Запрос.Текст = "
	|// ИПН, подлежащий перечислению
	|ВЫБРАТЬ
	|	ИПНРасчетыСБюджетом.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(ИПНРасчетыСБюджетом.Налог) КАК СуммаИПНПодлежащегоПеречислению
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|ГДЕ
	|	ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик
	|	И ИПНРасчетыСБюджетом.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И ИПНРасчетыСБюджетом.Период МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|	И ИПНРасчетыСБюджетом.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И (ВЫБОР
	|		КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|			ТОГДА НЕ ИПНРасчетыСБюджетом.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|		ИНАЧЕ ИСТИНА
	|	  КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПНРасчетыСБюджетом.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ)
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница 	= Выборка.СтруктурнаяЕдиница;
		НоваяСтрока.КодСтроки 			= "Ф200_03_001";
		
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.СуммаИПНПодлежащегоПеречислению;	
	КонецЦикла;

	// Сумма обязательных пенсионных взносов, подлежащих перечислению	
	Запрос.Текст = "
	|// ОПВ, подлежащие перечислению
	|ВЫБРАТЬ
	|	ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(ОПВПодлежитПеречислениюВФонды.Взнос) КАК СуммаОПВПодлежащихПеречислению
	|ИЗ                         
	|	РегистрНакопления.ОПВПодлежитПеречислениюВФонды КАК ОПВПодлежитПеречислениюВФонды                                   
	|ГДЕ
	|	ОПВПодлежитПеречислениюВФонды.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И ОПВПодлежитПеречислениюВФонды.Период МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ОПВПодлежитПеречислениюВФонды.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|	И ОПВПодлежитПеречислениюВФонды.ФизЛицо <> &парамИндивидуальныйПредприниматель	
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница 		= Выборка.СтруктурнаяЕдиница;
		НоваяСтрока.КодСтроки 				= "Ф200_03_002";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.СуммаОПВПодлежащихПеречислению;
	
	КонецЦикла;

	// Сумма ОППВ
	Если СтруктураРеквизитовФормы.ВедетсяУчетОППВ Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОППВРасчетыСФондами.СтруктурнаяЕдиница,
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ОППВРасчетыСФондами.Взнос) КАК ОППВ
		|ИЗ
		|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами                                                
		|ГДЕ
		|	ОППВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И ОППВРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|	И ОППВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		|	И ОППВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОППВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ОППВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ОППВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель	
		|
		|СГРУППИРОВАТЬ ПО
		|	ОППВРасчетыСФондами.СтруктурнаяЕдиница,
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.СтруктурнаяЕдиница 		= Выборка.СтруктурнаяЕдиница;
			НоваяСтрока.КодСтроки 				= "Ф200_03_003";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.ОППВ;
			
		КонецЦикла;
	КонецЕсли;
	
	// Сумма исчисленного социального налога	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СНИсчисленный.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(СНИсчисленный.Налог) КАК Налог
	|ИЗ
	|	РегистрНакопления.СНИсчисленный КАК СНИсчисленный                                             
	|ГДЕ
	|	СНИсчисленный.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И СНИсчисленный.Налогоплательщик = &парамНалогоплательщик
	|	И СНИсчисленный.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)	
	|
	|СГРУППИРОВАТЬ ПО
	|	СНИсчисленный.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ)";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница 		= Выборка.СтруктурнаяЕдиница;
		НоваяСтрока.КодСтроки 				= "Ф200_03_004";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.Налог;
	
	КонецЦикла;

	// Сумма социальных отчислений

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СОРасчетыСФондами.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(СОРасчетыСФондами.Отчисление) КАК СоциальныеОтчисления
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами                                                 
	|ГДЕ
	|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И СОРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И СОРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель	
	|
	|СГРУППИРОВАТЬ ПО
	|	СОРасчетыСФондами.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница 		= Выборка.СтруктурнаяЕдиница;
		НоваяСтрока.КодСтроки 				= "Ф200_03_005";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.СоциальныеОтчисления;
	
	КонецЦикла;

	// Сумма отчислений ОСМС
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ООСМСРасчетыСФондами.СтруктурнаяЕдиница,
	               |	НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	               |	СУММА(ООСМСРасчетыСФондами.Отчисление) КАК ООСМС
	               |ИЗ
	               |	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
	               |ГДЕ
	               |	ООСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	               |	И ООСМСРасчетыСФондами.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	               |	И ООСМСРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	               |	И ООСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |	И ООСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	               |	И ООСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	               |	" + ?(ОрганизацияЯвляетсяПлательщикомСН, "", "И ООСМСРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель") + "
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ООСМСРасчетыСФондами.СтруктурнаяЕдиница,
	               |	НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
		НоваяСтрока.КодСтроки = "Ф200_03_006";
		НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение = Выборка.ООСМС;
	
	КонецЦикла;
	
	// Сумма взносов ОСМС

	Запрос.Текст = "ВЫБРАТЬ
	               |	ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница,
	               |	НАЧАЛОПЕРИОДА(ВОСМСПодлежитПеречислениюВФонды.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	               |	СУММА(ВОСМСПодлежитПеречислениюВФонды.Взнос) КАК ВОСМС
	               |ИЗ
	               |	РегистрНакопления.ВОСМСПодлежитПеречислениюВФонды КАК ВОСМСПодлежитПеречислениюВФонды
	               |ГДЕ
	               |	ВОСМСПодлежитПеречислениюВФонды.Налогоплательщик = &парамНалогоплательщик
	               |	И ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	               |	И ВОСМСПодлежитПеречислениюВФонды.Период МЕЖДУ &парамПериодС И &парамПериодПо
	               |	И ВОСМСПодлежитПеречислениюВФонды.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |	И ВОСМСПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	               |	" + ?(ОрганизацияЯвляетсяПлательщикомСН, "", "И ВОСМСПодлежитПеречислениюВФонды.ФизЛицо <> &парамИндивидуальныйПредприниматель") + "
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница,
	               |	НАЧАЛОПЕРИОДА(ВОСМСПодлежитПеречислениюВФонды.Период, МЕСЯЦ)";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
		НоваяСтрока.КодСтроки = "Ф200_03_007";
		НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение = Выборка.ВОСМС;
	
	КонецЦикла;

	// отсортируем строки по структурной единице
	ТаблицаПоМесяцам.Сортировать("СтруктурнаяЕдиница, КодСтроки");
	
	// рассчитываем итоговые графы за квартал и с начала года
	
	Начало1Мес = НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Начало2Мес = ДобавитьМесяц(Начало1Мес, 1);
	Начало3Мес = ДобавитьМесяц(Начало2Мес, 1);
	
	Для Каждого СтрокаТЗ Из ТаблицаПоМесяцам Цикл
		
		// округлим месячную сумму
		СтрокаТЗ.Значение = Окр(СтрокаТЗ.Значение);
		
		СтрокаРезультат = ТаблицаРезультат.Найти(СтрокаТЗ.СтруктурнаяЕдиница, "СтруктурнаяЕдиница");
		Если СтрокаРезультат = Неопределено Тогда
			СтрокаРезультат = ТаблицаРезультат.Добавить();
			СтрокаРезультат.СтруктурнаяЕдиница = СтрокаТЗ.СтруктурнаяЕдиница;
			СтрокаРезультат.НалоговыйКомитет = ПроцедурыНалоговогоУчета.ПолучитьНалоговыйКомитетСтруктурнойЕдиницы(СтрокаТЗ.СтруктурнаяЕдиница,
																													Налогоплательщик,
																													ПолныеПраваПовтИсп.ЗаполнитьИсчислениеНалоговСтруктурныхЕдиниц(),
																													Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
		КонецЕсли;
		
		ИмяГрафы = СтрокаТЗ.КодСтроки;
		
		Если СтрокаТЗ.МесяцНалоговогоПериода = Начало1Мес Тогда
			СтрокаРезультат[ИмяГрафы + "_1"] = СтрокаРезультат[ИмяГрафы + "_1"] + СтрокаТЗ.Значение;
		ИначеЕсли СтрокаТЗ.МесяцНалоговогоПериода = Начало2Мес Тогда
			СтрокаРезультат[ИмяГрафы + "_2"] = СтрокаРезультат[ИмяГрафы + "_2"] + СтрокаТЗ.Значение;
		ИначеЕсли СтрокаТЗ.МесяцНалоговогоПериода = Начало3Мес Тогда
			СтрокаРезультат[ИмяГрафы + "_3"] = СтрокаРезультат[ИмяГрафы + "_3"] + СтрокаТЗ.Значение;
		КонецЕсли;
		
		// квартальные итоги
		Если СтрокаТЗ.МесяцНалоговогоПериода >= Начало1Мес Тогда
			СтрокаРезультат[ИмяГрафы + "_4"] = СтрокаРезультат[ИмяГрафы + "_4"] + СтрокаТЗ.Значение;
		КонецЕсли;
		
		// итоги с начала года
		СтрокаРезультат[ИмяГрафы + "_5"] = СтрокаРезультат[ИмяГрафы + "_5"] + СтрокаТЗ.Значение;
		
	КонецЦикла;
	
	Если ТаблицаРезультат.Количество() = 0 и ВыдаватьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данные для заполнения формы 200.03 за отчетный период отсутствуют...'"));
	КонецЕсли;
				     	
	Возврат ТаблицаРезультат;		 
	
КонецФункции // Форма200_03РассчитатьДанныеФормы()

&НаКлиенте
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма200_03ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Состояние("Расчет формы 200.03");		
	
	Форма200_03ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры // Форма200_03ЗаполнитьАвто()

&НаСервере
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма200_03ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма200_03";
	Очистить(ТекИмяФормы, Истина);
	
	ТекущаяСтраница = 1;
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы",ТекИмяФормы));
	
	Если СтрокаФормы <> Неопределено Тогда
		СтрокаФормы.ВсегоСтраниц = 1;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда  
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Расчет приложения 200.03'"));
	КонецЕсли;
	
	ТаблицаРезультат = Форма200_03РассчитатьДанныеФормы(Истина);	
	
	СтруктураРеквизитовФормы.КоличествоСтруктурныхЕдиницБезНалогоплательщика = 0;
	
	Если ТаблицаРезультат.Количество() <> 0 Тогда
		мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы);
		
		Для Каждого ЭлементСтруктуры Из мМногострочнаяСтруктура Цикл
			НомерСтроки = 2;
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
			ТаблицаСтрокГруппы.Очистить();
			
			Для Каждого СтрокаРезультат Из ТаблицаРезультат Цикл
			
				// заполняем данные строки в форме отчета
			 	Элемент = ТаблицаСтрокГруппы.Добавить();   			 
				Если ИмяГруппы = "Страница1" Тогда
					//Так должны заполнять по отдельности значения выборки 
					//для каждого листа
					СтруктураРеквизитовФормы.КоличествоСтруктурныхЕдиницБезНалогоплательщика = СтруктураРеквизитовФормы.КоличествоСтруктурныхЕдиницБезНалогоплательщика + 1;
					БИНФилиала = "";
					ФилиалНазв = "";
					Если ТипЗнч(СтрокаРезультат.СтруктурнаяЕдиница) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
						Если СтруктураРеквизитовФормы.мЕстьРеквизитыСП И НЕ СтрокаРезультат.СтруктурнаяЕдиница.УказыватьРеквизитыГоловнойОрганизации Тогда											
							БИНФилиала = СтрокаРезультат.СтруктурнаяЕдиница.ИдентификационныйНомер;
							ФилиалНазв = СтрокаРезультат.СтруктурнаяЕдиница.НаименованиеПолное;
						Иначе							
							БИНФилиала = СтрокаРезультат.СтруктурнаяЕдиница.Владелец.ИдентификационныйНомер;
							ФилиалНазв = СтрокаРезультат.СтруктурнаяЕдиница.Наименование;
						КонецЕсли; 
					Иначе						
						БИНФилиала = СтрокаРезультат.СтруктурнаяЕдиница.ИдентификационныйНомер;
						ФилиалНазв = СокрЛП(СтрокаРезультат.СтруктурнаяЕдиница.НаименованиеПолное);
						Если ПустаяСтрока(ФилиалНазв) Тогда
							ФилиалНазв = СтрокаРезультат.СтруктурнаяЕдиница.Наименование;
						КонецЕсли;
					КонецЕсли;
					
					Элемент.ИИН_БИНФилиала 	= БИНФилиала;
					Элемент.ФилиалНазв 		= ФилиалНазв;
					
					НазваниеФилиала = ФилиалНазв;
					НачПозиция = 1;
					ДлинаСтроки = 27;
					Для Шаг = 1 По 2 Цикл
						НазФилиала = Сред(НазваниеФилиала, НачПозиция, ДлинаСтроки); 
						Элемент["ФилиалНазв"+Шаг] = НазФилиала;
						НачПозиция =НачПозиция + ДлинаСтроки;
						ДлинаСтроки = 36;
					КонецЦикла;

					Для Н = 1 По 4 Цикл
						Элемент["Ф200_03_001_" + Н] = СтрокаРезультат["Ф200_03_001_" + Н];
						Элемент["Ф200_03_002_" + Н] = СтрокаРезультат["Ф200_03_002_" + Н];
						Элемент["Ф200_03_003_" + Н] = СтрокаРезультат["Ф200_03_003_" + Н];
					КонецЦикла;
				
					//заполним данные расшифровки
					//в данной форме она нужна только на странице 1
					//РегламентированнаяОтчетность.ДобавитьСтрокуРасшифровкиВТаблицуРасшифровкиФормы(ТаблицаРасшифровки, ИмяГруппы, "ФилиалНазв", СтрокаРезультат.СтруктурнаяЕдиница, НомерСтроки -1);
					//Элемент["ФилиалНазв" + Строка(НомерСтроки-1) + "_Расшифровка"] = СтрокаРезультат.СтруктурнаяЕдиница;
					Элемент["ФилиалНазв" + "_Расшифровка"] = СтрокаРезультат.СтруктурнаяЕдиница;
					
				ИначеЕсли ИмяГруппы = "Страница2" Тогда
					Для Н = 1 По 4 Цикл
						Элемент["Ф200_03_004_" + Н] = СтрокаРезультат["Ф200_03_004_" + Н];						
						Элемент["Ф200_03_005_" + Н] = СтрокаРезультат["Ф200_03_005_" + Н];	
						Элемент["Ф200_03_006_" + Н] = СтрокаРезультат["Ф200_03_006_" + Н];						
						Элемент["Ф200_03_007_" + Н] = СтрокаРезультат["Ф200_03_007_" + Н];						
					КонецЦикла;						    				
					
				КонецЕсли;
				НомерСтроки = НомерСтроки + 1;	           			 
			КонецЦикла; 
		КонецЦикла;	 
		
		РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы, мМногострочнаяСтруктура);
		РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, ТекИмяФормы, Перезаполнить);	 
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);
		
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтаФорма);
		
	КонецЕсли;          			
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма200", "КоличествоПриложений200_03", СтруктураРеквизитовФормы.КоличествоСтруктурныхЕдиницБезНалогоплательщика, Ложь);
	
КонецПроцедуры // Форма200_03ЗаполнитьАвтоНаСервере()

&НаСервере
Процедура Форма200_03РасчетНаСервере(Инд, Показатель, ТекФорма)
	
	Перем СтруктураГруппы;
	
	Индекс = Инд-1;
	
	мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, ТекФорма);
		
	//рассчитаем вычисляемые ячейки
	
	// на первой странице

	мМногострочнаяСтруктура.Свойство("Страница1" ,СтруктураГруппы);
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
	СтрокаТаблицы = ТаблицаСтрокГруппы.Получить(Индекс);
	
	Для Н = 1 По 3 Цикл

		Значение1Мес = ?(СтрокаТаблицы["Ф200_03_00" + Н + "_1"] = Неопределено, 0, СтрокаТаблицы["Ф200_03_00" + Н + "_1"]);
		Значение2Мес = ?(СтрокаТаблицы["Ф200_03_00" + Н + "_2"] = Неопределено, 0, СтрокаТаблицы["Ф200_03_00" + Н + "_2"]);
		Значение3Мес = ?(СтрокаТаблицы["Ф200_03_00" + Н + "_3"] = Неопределено, 0, СтрокаТаблицы["Ф200_03_00" + Н + "_3"]);
				
		СтрокаТаблицы["Ф200_03_00" + Н + "_4"] = Значение1Мес + Значение2Мес + Значение3Мес;
		

		Форма200_03ПолеТабличногоДокументаСтраница1.Области["Ф200_03_00" + Н + "_4__"+ Строка(Инд)].Значение = Значение1Мес + Значение2Мес + Значение3Мес;
		

	КонецЦикла;

	// на второй странице

	мМногострочнаяСтруктура.Свойство("Страница2" ,СтруктураГруппы);
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
	СтрокаТаблицы = ТаблицаСтрокГруппы.Получить(Индекс);
	
	Для Н = 4 По 7 Цикл

		Значение1Мес = ?(СтрокаТаблицы["Ф200_03_00" + Н + "_1"] = Неопределено, 0, СтрокаТаблицы["Ф200_03_00" + Н + "_1"]);
		Значение2Мес = ?(СтрокаТаблицы["Ф200_03_00" + Н + "_2"] = Неопределено, 0, СтрокаТаблицы["Ф200_03_00" + Н + "_2"]);
		Значение3Мес = ?(СтрокаТаблицы["Ф200_03_00" + Н + "_3"] = Неопределено, 0, СтрокаТаблицы["Ф200_03_00" + Н + "_3"]);
		
			
		СтрокаТаблицы["Ф200_03_00" + Н + "_4"] = Значение1Мес + Значение2Мес + Значение3Мес;
		

		Форма200_03ПолеТабличногоДокументаСтраница2.Области["Ф200_03_00" + Н + "_4__"+ Строка(Инд)].Значение = Значение1Мес + Значение2Мес + Значение3Мес;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекФорма, мМногострочнаяСтруктура);
	
	Модифицированность = Истина;	
	
КонецПроцедуры
 
&НаСервере
Процедура Форма200_03ПолеТабличногоДокументаВыборНаСервере(Ячейка, НачЗначение, Расчет, Страница)

	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, Страница, Ячейка, НачЗначение, Расчет);
		
КонецПроцедуры

&НаКлиенте
Процедура Форма200_03Расшифровка(ИмяЯчейки)

	// определим, по какой структурной единице заполнено приложение
	ОбластиДокумента = Форма200_03ПолеТабличногоДокументаСтраница1.Области;
	ИскомаяОбласть = Неопределено;
	Ячейка = "";
	НомерСтроки = 0;
	Для Каждого ТекОбласть Из ОбластиДокумента Цикл
		Если Найти(ТекОбласть.Имя, "ФилиалНазв") <> 0 Тогда
			ИскомаяОбласть = ТекОбласть;
			Ячейка = Лев(ТекОбласть.Имя, 10); // СтрДлина("ФилиалНазв") = 10
			НомерСтроки = Сред(ТекОбласть.Имя, Найти(ТекОбласть.Имя, "__") + 2);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПоФизЛицу = Новый Структура;
	Если ПолучитьЗначениеРеквизита(Налогоплательщик, "ЮрФизЛицо") = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		СтруктураПоФизЛицу.Вставить("ФизЛицо", ПолучитьЗначениеРеквизита(Налогоплательщик, "ИндивидуальныйПредприниматель"));
		СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.НеРавно);									
	КонецЕсли;
	
	Если ИскомаяОбласть = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктурнаяЕдиница = ПолучитьСтруктурнуюЕдиницуИЗПоляРасшифровки(Ячейка, НомерСтроки);

	// определим даты расшифровки
	
	ДатаНачала    = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ДатаОкончания = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
		             
	Если Лев(ИмяЯчейки,13) = "Ф200_03_001_1" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_002_1" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_003_1" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_004_1" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_005_1"
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_006_1" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_007_1" Тогда // месяц 1
		ДатаНачала = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
		ДатаОкончания = КонецМесяца(ДатаНачала);
	ИначеЕсли Лев(ИмяЯчейки,13) = "Ф200_03_001_2" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_002_2" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_003_2" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_004_2" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_004_2"
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_006_2"
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_007_2" Тогда // месяц 2
		ДатаНачала = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,1);
		ДатаОкончания = КонецМесяца(ДатаНачала);
	ИначеЕсли Лев(ИмяЯчейки,13) = "Ф200_03_001_3" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_002_3" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_003_3" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_004_3" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_005_3"
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_006_3"
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_007_3" Тогда // месяц 3
		ДатаНачала = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,2);
		ДатаОкончания = КонецМесяца(ДатаНачала);
	ИначеЕсли Лев(ИмяЯчейки,13) = "Ф200_03_001_4" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_002_4" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_003_4" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_004_4" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_005_4" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_006_4"
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_007_4" Тогда // весь период
		ДатаНачала = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
		ДатаОкончания = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	ИначеЕсли Лев(ИмяЯчейки,13) = "Ф200_03_001_5" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_002_5" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_003_5" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_004_5" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_005_5"
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_006_5"
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_007_5" Тогда // с начала года
		ДатаНачала = НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ДатаОкончания = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	КонецЕсли;

	ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(ДатаНачала, ДатаОкончания, СтруктурнаяЕдиница, СтруктураПоФизЛицу);
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктурнуюЕдиницуИЗПоляРасшифровки(Ячейка, НомерСтроки)

	Форма200_03 = мСтруктураМногострочныхРазделов.ПолучитьЭлементы();
	
	СтраницыФормы200_03 = Форма200_03[1].ПолучитьЭлементы();
	
	ТаблицаПоиска = Неопределено;
	Для Каждого Страница Из СтраницыФормы200_03 Цикл
		Если Страница.ИмяГруппы = ("Страница1") Тогда
			ТаблицаПоиска = ЭтаФорма[Страница.ИмяРеквизитаТаблицыСтрокГруппы];
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаПоиска <> Неопределено Тогда
		НайденнаяСтрока = ТаблицаПоиска[НомерСтроки - 1];
		СтруктурнаяЕдиница = НайденнаяСтрока[Ячейка + "_Расшифровка"];
	Иначе	
		СтруктурнаяЕдиница = Неопределено;
	КонецЕсли;	
	
	Возврат СтруктурнаяЕдиница;

КонецФункции // ПолучитьСтруктурнуюЕдиницуИЗТаблицыРасшифровки()

&НаКлиенте
Процедура ПослеВыбораЭлемента(ВыбЭлемент, Параметры) Экспорт
	
	Если НЕ ВыбЭлемент = Неопределено Тогда
		ВыбранноеЗначение = ВыбЭлемент.Значение;
		ПараметрыФормы = Новый Структура;
		
		Если ВыбЭлемент.Значение = "Справочник.ПодразделенияОрганизаций.Форма.ФормаВыбора" Тогда
			ЗначенияОтборов = Новый Структура;			
			ЗначенияОтборов.Вставить("Владелец", Налогоплательщик);			
			ПараметрыФормы.Вставить("Отбор", ЗначенияОтборов);
			ПараметрыФормы.Вставить("ВыбиратьПодразделенияОрганизации", Истина);
		КонецЕсли;
		
		ОткрытьФорму(ВыбранноеЗначение,ПараметрыФормы,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца) ;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Форма200_03ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	ОбластьРасшифровки = ЭтаФорма.ТекущийЭлемент.ТекущаяОбласть;	
	СсылкаРасшифровки = ЗначениеВыбора;          
	
	НомерСтроки = Сред(ОбластьРасшифровки.Имя, Найти(ОбластьРасшифровки.Имя, "__") + 2);
	Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.Организации") ИЛИ 
		ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		 ИмяГруппы = "Страница1";                                                    
	 	 Ячейка  = "ФилиалНазв";
	Иначе
		 Возврат;                                                      
	КонецЕсли;	 
	
	Форма200_03ОбработкаПодбора(СсылкаРасшифровки, Ячейка, ИмяГруппы, НомерСтроки);
	 
КонецПроцедуры // Форма200_03ОбработкаВыбора()

&НаСервере
Процедура Форма200_03ОбработкаПодбора(Расшифровка, ИмяЯчейки, ИмяГруппы, НомерСтроки) Экспорт   
	 
	Если ИмяЯчейки = "ФилиалНазв" Тогда
	  	 	 
		ОбластьБИН = "ИИН_БИНФилиала__" + НомерСтроки;
		ОбластьФилиалНазв = "ФилиалНазв__" + НомерСтроки;
		ОбластьФилиалНазв1 = "ФилиалНазв1__" + НомерСтроки;
		ОбластьФилиалНазв2 = "ФилиалНазв2__" + НомерСтроки;
		 
		БИНФилиала = "";
		ФилиалНазв = "";
		Если ТипЗнч(Расшифровка) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			Если СтруктураРеквизитовФормы.мЕстьРеквизитыСП И НЕ Расшифровка.УказыватьРеквизитыГоловнойОрганизации Тогда						
				БИНФилиала = Расшифровка.ИдентификационныйНомер;
				ФилиалНазв = Расшифровка.НаименованиеПолное;
			Иначе			
				БИНФилиала = Расшифровка.Владелец.ИдентификационныйНомер;
				ФилиалНазв = Расшифровка.Наименование;
			КонецЕсли;
		Иначе			
			БИНФилиала = Расшифровка.ИдентификационныйНомер;
			ФилиалНазв = СокрЛП(Расшифровка.НаименованиеПолное);
			Если ПустаяСтрока(ФилиалНазв) Тогда
				ФилиалНазв = Расшифровка.Наименование;
			КонецЕсли;
		КонецЕсли;
		
		НазваниеФилиала = ФилиалНазв;
		ФилиалНазв1 = Сред(НазваниеФилиала, 1, 27);
		ФилиалНазв2 = Сред(НазваниеФилиала, 28, 36);			

		ТекНалоговыйКомитет = ПроцедурыНалоговогоУчета.ПолучитьНалоговыйКомитетСтруктурнойЕдиницы(Расшифровка,
																							Налогоплательщик,
																							ПолныеПраваПовтИсп.ЗаполнитьИсчислениеНалоговСтруктурныхЕдиниц(),
																							Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);

		//заполним области																					
		Форма200_03ПолеТабличногоДокументаСтраница1.Области[ОбластьБИН].Значение = БИНФилиала;
		Форма200_03ПолеТабличногоДокументаСтраница1.Области[ОбластьФилиалНазв].Значение = ФилиалНазв;
		Форма200_03ПолеТабличногоДокументаСтраница1.Области[ОбластьФилиалНазв1].Значение = ФилиалНазв1;
		Форма200_03ПолеТабличногоДокументаСтраница1.Области[ОбластьФилиалНазв2].Значение = ФилиалНазв2;
				
		//заполним расшифровки областей
		Форма200_03ПолеТабличногоДокументаСтраница1.Области[ОбластьБИН].Расшифровка = Расшифровка;
		Форма200_03ПолеТабличногоДокументаСтраница1.Области[ОбластьФилиалНазв].Расшифровка = Расшифровка;
		Форма200_03ПолеТабличногоДокументаСтраница1.Области[ОбластьФилиалНазв1].Расшифровка = Расшифровка;
		Форма200_03ПолеТабличногоДокументаСтраница1.Области[ОбластьФилиалНазв2].Расшифровка = Расшифровка;
		
		//заполним табличные данные
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьБИН, 		БИНФилиала, ,Расшифровка);
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьФилиалНазв, ФилиалНазв,, Расшифровка);
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьФилиалНазв1, ФилиалНазв1,, Расшифровка);
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьФилиалНазв2, ФилиалНазв2,, Расшифровка);
		        		 		 
	КонецЕсли;
	 	 
КонецПроцедуры // Форма200_03ОбработкаПодбора()

///Обход проблемы с очисткой ячеек в ТП в клиент-серверном режиме рабоыт
&НаКлиенте
Процедура ПанельФорма200ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ПанельФорма200ПриСменеСтраницыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПанельФорма200ПриСменеСтраницыНаСервере()
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	

КонецПроцедуры
