////////////////////////////////////////////////////////////////////////////////
// Описание формы
// Параметры фомры:
//  Налогоплательщик - СправочникСсылка.Организации - Налогоплательщик, представляющий отчет
//  мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета - Дата - отчетный период формирования отчета
//  
////////////////////////////////////////////////////////////////////////////////

/////////////////////
///////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	//Доп200_06 	
	СтруктураРеквизитовФормы.Вставить("СвойстваДобавляемыхПриложений", Новый Структура); 
	
	СвойстваПриложения = Новый Структура("ГруппаФормыВладелец, ИсходнаяСтраница, Количество, РеквизитыФормы, Многострочность");
	
	СвойстваПриложения.ГруппаФормыВладелец = "ГруппаСтраницыОтчета";
	СвойстваПриложения.ИсходнаяСтраница = "Форма200_06";
	СвойстваПриложения.Количество = 0;
	РеквизитыФормы = Новый Массив;
	РеквизитыФормы.Добавить("Форма200_06ПолеТабличногоДокументаСтраница1");
	РеквизитыФормы.Добавить("Форма200_06ПолеТабличногоДокументаСтраница2");                                      
	РеквизитыФормы.Добавить("Форма200_06ПолеТабличногоДокументаСтраница3");
	СвойстваПриложения.РеквизитыФормы = РеквизитыФормы;
	СвойстваПриложения.Многострочность = Истина;
	
	СтруктураРеквизитовФормы.СвойстваДобавляемыхПриложений.Вставить("Форма200_06", СвойстваПриложения);	
	//Доп200_06
	
	мВыбраннаяФорма = "Форма2002023Кв1";
	КодФормы 		= "Форма200";
			
	ТекущаяСтраница = 1;
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруФормРегОтчета(ЭтотОбъект);	
	
	СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями"); // вынести в переопределяемый модуль	
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов  = Новый СписокЗначений;	
	СтруктураРеквизитовФормы.мПечатныеформы 		 = Новый СписокЗначений;	
		
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	

	ЗаполнитьСведенияОбОтчетномПериоде();

	ДатаПодписи = ТекущаяДатаСеанса();
	
	мФорматНомераСтроки = "ЧЦ=5; ЧВН=; ЧГ=";	

	СтруктураРеквизитовФормы.мПериодичность 				 = Перечисления.Периодичность.Квартал;
	СтруктураРеквизитовФормы.ВедетсяУчетОППВ 				 = (Метаданные.РегистрыНакопления.Найти("ОППВРасчетыСФондами") <> Неопределено);
	СтруктураРеквизитовФормы.мЕстьРеквизитыСП 				 = (Метаданные.Справочники.ПодразделенияОрганизаций.Реквизиты.НАйти("РНН") <> Неопределено);
	СтруктураРеквизитовФормы.мПризнакСистемыСотрудниковЗУП20 = (Метаданные.РегистрыСведений.РаботникиОрганизаций.Измерения.Найти("ФизЛицо") = Неопределено);
	СтруктураРеквизитовФормы.ПризнакМногострочности			 = Ложь;
	СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе = (Метаданные.РегистрыНакопления.ИПНСведенияОДоходах.Ресурсы.Найти("ОблагаемаяБаза") <> Неопределено);	
	СтруктураРеквизитовФормы.ОтметкаРезидентов 	 = "1";
	СтруктураРеквизитовФормы.ОтметкаНерезидентов = "2";  
	СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПолучитьПорядокОбложенияДоходовРаботников(Налогоплательщик, КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)); 
	СтруктураРеквизитовФормы.ОрганизацияПлательщикРозничногоНалога = ОрганизацияЯвляетсяПлательщикомРозничногоНалога(Налогоплательщик, КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)); 

	
	ПризнакАлиментов = Параметры.мПризнакАлиментов;
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
			ЗаполнитьПараметры(ТекФорма.КодФормы);
		КонецЕсли;
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекФорма.КодФормы);
	КонецЦикла;	
	
	////////////////////////////////////////////////////////////////////////////////
	// Подключаемые
	ОтчетыПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если КодФормы = "Форма200_03" Тогда
		Форма200_03ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора);
	
	ИначеЕсли КодФормы = "Форма200_02" И 
		НЕ (ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты")
	 		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица")) Тогда
		Форма200_02ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора);
  	ИначеЕсли КодФормы = "Форма200_05" И 
		НЕ (ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты")
	 		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица")) Тогда
		Форма200_05ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора);  
		
	 ИначеЕсли Найти(КодФормы, "Форма200_06") <> 0 И 
		НЕ (ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты")
	 		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица")) Тогда
		Форма200_06ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора);

	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если Модифицированность Тогда 
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);	
		ТекстВопроса = НСТР("ru = 'Сохранить данные отчета?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(
		мСписокСтруктурныхЕдиниц, ЭтаФорма, СтандартнаяОбработка, "ПоНалогоплательщику", Налогоплательщик,, ПредопределенноеЗначение("Перечисление.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты"), Истина);
	         
КонецПроцедуры

&НаКлиенте
Процедура ДатаПодписиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДатаПодписи) Тогда
		ДатаПодписиПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРасчетовПриИзменении(Элемент)
	
	СписокРасчетовПриИзмененииНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РазделыОтчета

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)	
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.КодФормы = Элемент.ТекущиеДанные.КодФормы Тогда
		ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);
		Возврат;
	КонецЕсли;	
	
	РазделыОтчетаПриАктивизацииСтрокиНаСервере(Элемент.ТекущиеДанные.КодФормы, Элемент.ТекущиеДанные.Многострочность);
	
	ДоступностьДобавитьПриложение = СтрНайти(ЭтаФорма.КодФормы, "200_06") <> 0;
	ДоступностьУдалитьПриложение  = СтрНайти(ЭтаФорма.КодФормы, "200_06_") <> 0;
	
	Элементы.ДобавитьПриложение.Доступность = ДоступностьДобавитьПриложение;
	Элементы.УдалитьПриложение.Доступность  = ДоступностьУдалитьПриложение;
	
	Элементы.РазделыОтчетаКонтекстноеМенюДобавитьПриложение.Доступность = ДоступностьДобавитьПриложение;
	Элементы.РазделыОтчетаКонтекстноеМенюУдалитьПриложение.Доступность  = ДоступностьУдалитьПриложение;
		
	//из-за проблем отображения в вебе
	
	//СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	//Для Каждого СтраницаФорм из Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы Цикл
	//	Элементы[СтраницаФорм.Имя].Видимость = СтраницаФорм.Имя = ЭтаФорма.КодФормы;	
	//КонецЦикла;
	
	Элементы[ЭтаФорма.КодФормы].Видимость = Ложь;
	Элементы[Элемент.ТекущиеДанные.КодФормы].Видимость = Истина;
	Элементы.ГруппаСтраницыОтчета.ТекущаяСтраница = Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы[ЭтаФорма.КодФормы]; 		
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;

	ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ГЛАВНОЙ ФОРМЫ Форма200

&НаКлиенте
Процедура Форма200ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Форма200ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Область);
	
КонецПроцедуры

&НаКлиенте
Процедура Форма200ПолеТабличногоДокументаСтраница2ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Форма200ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Область);
	
КонецПроцедуры

&НаКлиенте
Процедура Форма200ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Форма200ПолеТабличногоДокументаВыбор(Область);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДОП ФОРМЫ Форма200_01   - ОБЫЧНАЯ

&НаКлиенте
Процедура Форма200_01ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Форма200_01ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Область);
	
КонецПроцедуры

&НаКлиенте
Процедура Форма200_01ПолеТабличногоДокументаСтраница2ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Форма200_01ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Область);
	
КонецПроцедуры

&НаКлиенте
Процедура Форма200_01ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Форма200ПолеТабличногоДокументаВыбор(Область);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма200_02ПолеТабличногоДокументаСтраница1

&НаКлиенте
Процедура Форма200_02ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;	
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница1");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	
	Если Найти(Ячейка, "Ф200_02ФИОРезидента__")> 0 ИЛИ Найти(Ячейка, "Ф200_02РННРезидента__")> 0
	 ИЛИ Найти(Ячейка, "Ф200_02ИИНРезидента__")> 0 Тогда

		 НачЗначение = Область.Значение;
		 
		 ЗначениеРасшифровки = Область.Расшифровка;
		 
		 //может быть не заполнена расшировка ячейки при восстановления данных старых форм
		 Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			 ИмяЯчейкиРасшифровки = "Ф200_02ФИОРезидента" + Сред(Ячейка,Найти(Ячейка,"__"));
			 ОбластьРасширофвки = Форма200_02ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяЯчейкиРасшифровки);
			 Если ОбластьРасширофвки <> Неопределено Тогда 
				 ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;
				 Область.Расшифровка = ЗначениеРасшифровки;
				 ПередатьЗначениеВСтруктуруНаСервере(Ячейка,НачЗначение,,,ЗначениеРасшифровки);
			 КонецЕсли;				 
		 КонецЕсли;

		 Если ЗначениеЗаполнено(НачЗначение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			 Возврат;
		 КонецЕсли; 	 
		 
		 СписокВыбора = Новый СписокЗначений;
		 СписокВыбора.Добавить("Справочник.Контрагенты.Форма.ФормаВыбора","Контрагенты");
		 СписокВыбора.Добавить("Справочник.ФизическиеЛица.Форма.ФормаВыбора","Физические лица");
		 
		 ОповещениеВыбора = Новый ОписаниеОповещения("ПослеВыбораЭлемента", ЭтаФорма, ПараметрыСтраницы); 		 
		 СписокВыбора.ПоказатьВыборЭлемента(ОповещениеВыбора, "Выберите расшифровку", СписокВыбора[0]);
		 
	 ИначеЕсли Найти(Ячейка, "Ф200_02КодСтраныРезидента__")> 0 ИЛИ Найти(Ячейка, "Ф200_02КодСтраныГражданства__")> 0  Тогда
		 
		НачЗначение = Область.Значение;	
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите код страны'"),100) ; 	
	
	Иначе
		 Возврат;
	КонецЕсли; 	 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма200_02ПолеТабличногоДокументаСтраница2

&НаКлиенте
Процедура Форма200_02ПолеТабличногоДокументаСтраница2Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;	
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница2");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	
	Если (Найти(Ячейка, "Ф200_02ВидДокРезидента__") > 0) Тогда
		
		НачЗначение = Область.Значение;
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
		ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
		ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КодыВидовДокументов");
		ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
		
		ПараметрыФормы.Вставить("ИмяОтчета",          "РегламентированныйОтчет200Форма");
	
		ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(НачЗначение), Неопределено, СокрЛП(НачЗначение)));
		
		ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
		Если ВнешнийОтчет Тогда
			ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		Иначе
			ОткрытьФорму("Отчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		КонецЕсли;

	ИначеЕсли (Найти(Ячейка, "Ф200_02ДатаДокРезидента__") > 0) Тогда
		НачЗначение = Область.Значение;
			
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводДаты(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите дату выдачи документа'"), ЧастиДаты.Дата) ; 
				
	ИначеЕсли (Найти(Ячейка, "Ф200_02НомерДокРезидента__") > 0) Тогда
		НачЗначение = Область.Значение;	
		
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите номер документа'"),100) ; 	
		
	КонецЕсли;
	
	Если Найти(Ячейка, "Ф200_02НомерРегистрацииРезидента__")> 0  Тогда
		
		НачЗначение = Область.Значение;		
		ЗначениеРасшифровки = Область.Расшифровка;
		
		//может быть не заполнена расшировка ячейки при восстановления данных старых форм
		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			ИмяЯчейкиРасшифровки = "Ф200_02ФИОРезидента" + Сред(Ячейка,Найти(Ячейка,"__"));
			ОбластьРасширофвки = Форма200_02ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяЯчейкиРасшифровки);
			Если ОбластьРасширофвки <> Неопределено Тогда 
				ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;
				Область.Расшифровка = ЗначениеРасшифровки;
				ПередатьЗначениеВСтруктуруНаСервере(Ячейка,НачЗначение,,,ЗначениеРасшифровки);
			КонецЕсли;				 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НачЗначение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			Возврат;
		КонецЕсли; 	
		
		СтандартнаяОбработка = Ложь; 
		
		 СписокВыбора = Новый СписокЗначений;
		 СписокВыбора.Добавить("Справочник.Контрагенты.Форма.ФормаВыбора","Контрагенты");
		 СписокВыбора.Добавить("Справочник.ФизическиеЛица.Форма.ФормаВыбора","Физические лица");
		 
		 ОповещениеВыбора = Новый ОписаниеОповещения("ПослеВыбораЭлемента", ЭтаФорма, ПараметрыСтраницы); 		 
		 СписокВыбора.ПоказатьВыборЭлемента(ОповещениеВыбора, "Выберите расшифровку", СписокВыбора[0]);			
	КонецЕсли; 	 
	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма200_02ПолеТабличногоДокументаСтраница3

&НаКлиенте
Процедура Форма200_02ПолеТабличногоДокументаСтраница3Выбор(Элемент, Область, СтандартнаяОбработка)
	 	
	Ячейка = Область.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница3");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		

	
    Если Найти(Ячейка, "Ф200_02КодДохРезидента__")> 0 Тогда
        
        СтандартнаяОбработка = Ложь;
        
        ПараметрыФормы = Новый Структура;
        ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
        ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
        ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КодыВидовДоходов2022");
        ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
        ПараметрыФормы.Вставить("ИмяОтчета",          "РегламентированныйОтчет200Форма");
        
        ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(Область.Значение), Неопределено, СокрЛП(Область.Значение)));
        
        ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
        Если ВнешнийОтчет Тогда
            ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
        Иначе
            ОткрытьФорму("Отчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
        КонецЕсли;
        
	ИначеЕсли (Найти(Ячейка, "Ф200_02ВидДоговора__") > 0)  Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
		ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
		ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КодыВидовДоговоров2021");
		ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
		ПараметрыФормы.Вставить("ИмяОтчета",          "РегламентированныйОтчет200Форма");
		
		ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(Область.Значение), Неопределено, СокрЛП(Область.Значение)));
		
		ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
		Если ВнешнийОтчет Тогда
			ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		Иначе
			ОткрытьФорму("Отчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		КонецЕсли;	
	ИначеЕсли (Найти(Ячейка, "Ф200_02_НаименованиеДоговора__") > 0)  Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
		ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
		ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КодыВидовДоговоров2021");
		ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
		ПараметрыФормы.Вставить("ИмяОтчета",          "РегламентированныйОтчет200Форма");
		
		ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(Область.Значение), Неопределено, СокрЛП(Область.Значение)));
		
		ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
		Если ВнешнийОтчет Тогда
			ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		Иначе
			ОткрытьФорму("Отчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		КонецЕсли;	

	ИначеЕсли (Найти(Ячейка, "Ф200_02_КодСтраныДоговора__") > 0)  Тогда
		НачЗначение = Элемент.ТекущаяОбласть.Значение;
		СтандартнаяОбработка = Ложь;

		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите код страны, с которой заключен международный договор'"), 100) ;
		
	ИначеЕсли (Найти(Ячейка, "Ф200_02_МФЦА") > 0)
		ИЛИ (Найти(Ячейка, "Ф200_02_ФизЛицоСтруктурногоПодразделения") > 0)	Тогда
	 
	 	Если Область.Значение = "Х" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "Х";
		КонецЕсли;
		
		ПередатьЗначениеВМногострочнуюСтруктуру(ПараметрыСтраницы.ИмяСтраницы, Область.Имя, Область.Значение, ПараметрыСтраницы.Расчет)
		
	ИначеЕсли (Найти(Ячейка, "Ф200_02СтавкаНалога") > 0) Тогда
		НачЗначение = Область.Значение;
				
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите ставку налога'"), 4, 1) ;
				
	
	Иначе
		 Возврат;
	КонецЕсли;                	
	 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма200_02ПолеТабличногоДокументаСтраница4

&НаКлиенте
Процедура Форма200_02ПолеТабличногоДокументаСтраница4Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;
    НомерСтроки = Сред(Ячейка, Найти(Ячейка, "__") + 2);

	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница4");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
		
	Если (Найти(Ячейка, "Ф200_02_P__") > 0) 
			ИЛИ (Найти(Ячейка, "Ф200_02_ВидДохода__") > 0) 
	 		ИЛИ (Найти(Ячейка, "Ф200_02_R__") > 0) 
			ИЛИ (Найти(Ячейка, "Ф200_02_S__") > 0) Тогда
			
		НачЗначение = Область.Значение;
		
		Если (Найти(Ячейка, "Ф200_02_P__") > 0) Тогда
			
			ПараметрыСтраницы.Вставить("Расчет", Истина);		
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму начисленных доходов'"), 12,0) ;
						
		ИначеЕсли (Найти(Ячейка, "Ф200_02_ВидДохода__") > 0) Тогда
            
            НачЗначение = Область.Значение;
            СтандартнаяОбработка = Ложь;
            
            ПараметрыФормы = Новый Структура;
            ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
            ПараметрыФормы.Вставить("МножественныйВыбор"  , Истина);
            ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
            ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КодыВидовДоходовНеПодлежащихНалогообложению200_02");
            ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
            
            ПараметрыФормы.Вставить("ИмяОтчета",          "РегламентированныйОтчет200Форма");
            
		    ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(Область.Значение), Неопределено, СокрЛП(Область.Значение)));
            
            ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
            Если ВнешнийОтчет Тогда
                ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
            Иначе
                ОткрытьФорму("Отчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
            КонецЕсли;

            
        ИначеЕсли (Найти(Ячейка, "Ф200_02_R__") > 0) Тогда
            
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите cумму доходов, не подлежащих налогообложению в соответствии с пунктом 1 статьи 341 Налогового кодекса (корректировка)'"), 12,0) ;					
        	
        ИначеЕсли (Найти(Ячейка, "Ф200_02_S__") > 0) Тогда
        	
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите cумму доходов, не подлежащих налогообложению в соответствии со статьей 654 Налогового кодекса'"), 12,0) ;					

		КонецЕсли;   		
				
	Иначе
		 Возврат;
	КонецЕсли; 	 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма200_02ПолеТабличногоДокументаСтраница5

&НаКлиенте
Процедура Форма200_02ПолеТабличногоДокументаСтраница5Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;
    НомерСтроки = Сред(Ячейка, Найти(Ячейка, "__") + 2);

	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница5");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		

	Если (Найти(Ячейка, "Ф200_02_T__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_02_U__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_02_СтандартныеВычеты__") > 0)
	 ИЛИ (Найти(Ячейка, "Ф200_02_W__") > 0) Тогда

		НачЗначение = Область.Значение;
		
		Если (Найти(Ячейка, "Ф200_02_T__") > 0) Тогда	
            
            ПараметрыСтраницы.Вставить("Расчет", Истина);					
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите cумму обязательных пенсионных взносов, исчисленных с начисленных доходов'"), 12,0) ;					
			//ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите cумму взносов на ОСМС исчисленных с начисленных доходов'"), 12,0) ;
		ИначеЕсли (Найти(Ячейка, "Ф200_02_U__") > 0) Тогда 
		    
		    ПараметрыСтраницы.Вставить("Расчет", Истина);					
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите cумму взносов на ОСМС исчисленных с начисленных доходов'"), 12,0) ;
			
        ИначеЕсли (Найти(Ячейка, "Ф200_02_СтандартныеВычеты__") > 0) Тогда
            
            ПараметрыСтраницы.Вставить("Расчет", Истина);					
            НачЗначение = Область.Значение;
            СтандартнаяОбработка = Ложь;
                      
            ПараметрыФормы = Новый Структура;
            ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
            ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
            ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КодыСтандартныхВычетов2021");
            ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
            
            ПараметрыФормы.Вставить("ИмяОтчета",          "РегламентированныйОтчет200Форма");
            
		    ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(Область.Значение), Неопределено, СокрЛП(Область.Значение)));
            
            ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
            Если ВнешнийОтчет Тогда
                ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
            Иначе
                ОткрытьФорму("Отчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
            КонецЕсли;
            
		ИначеЕсли (Найти(Ячейка, "Ф200_02_W__") > 0) Тогда 
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите cумму стандартных налоговых вычетов'"), 12,0) ;	
			
		КонецЕсли;	  		
			
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма200_02ПолеТабличногоДокументаСтраница6

&НаКлиенте
Процедура Форма200_02ПолеТабличногоДокументаСтраница6Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;
	НомерСтроки = Сред(Ячейка, Найти(Ячейка, "__") + 2);

	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница6");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	
	Если (Найти(Ячейка, "Ф200_02_ПрочиеВычеты__") > 0)
	 ИЛИ (Найти(Ячейка, "Ф200_02_ПрочиеВычетыТаблица__") > 0)
	 ИЛИ (Найти(Ячейка, "Ф200_02_Y__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_02_Z__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_02_AA__") > 0) Тогда
		НачЗначение = Область.Значение;
		Если (Найти(Ячейка, "Ф200_02_ПрочиеВычеты__") > 0) Тогда 
			            
		    НачЗначение = Область.Значение;
		    СтандартнаяОбработка = Ложь;
		    
		    ПараметрыФормы = Новый Структура;
		    ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
		    ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
		    ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КодыПрочихВычетов2021");
		    ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
		    
		    ПараметрыФормы.Вставить("ИмяОтчета",          "РегламентированныйОтчет200Форма");
		    
		    ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(Область.Значение), Неопределено, СокрЛП(Область.Значение)));
		    
		    ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
		    Если ВнешнийОтчет Тогда
		        ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		    Иначе
		        ОткрытьФорму("Отчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		    КонецЕсли;
              		
        ИначеЕсли (Найти(Ячейка, "Ф200_02_Y__") > 0) Тогда			
            
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите cумму прочих налоговых вычетов'"), 12,0) ;					
 				
		ИначеЕсли (Найти(Ячейка, "Ф200_02_Z__") > 0) Тогда 
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму индивидуального подоходного налога, исчисленного с начисленных доходов'"), 12,0) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф200_02_AA__") > 0) Тогда  
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму задолженности за отчетный квартал'"), 12,0) ;  
		
		КонецЕсли;   		
				
	КонецЕсли;    	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма200_02ПолеТабличногоДокументаСтраница7

&НаКлиенте
Процедура Форма200_02ПолеТабличногоДокументаСтраница7Выбор(Элемент, Область, СтандартнаяОбработка)
	  
	Ячейка = Область.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница7");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		

	Если (Найти(Ячейка, "Ф200_02_AB__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_02_AC__") > 0) 
	  ИЛИ (Найти(Ячейка, "Ф200_02_AD__") > 0) 
	   ИЛИ (Найти(Ячейка, "Ф200_02_AE__") > 0) Тогда   

		НачЗначение = Область.Значение;
				
		Если (Найти(Ячейка, "Ф200_02_AB__") > 0) Тогда
			
			ПараметрыСтраницы.Вставить("Расчет", Истина);	
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму выплаченных доходов'"), 12,0) ;
								
		ИначеЕсли (Найти(Ячейка, "Ф200_02_AC__") > 0) Тогда  
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму индивидуального подоходного налога, подлежащего уплате в бюджет'"), 12,0) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф200_02_AD__") > 0) Тогда		
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму обязательных пенсионных взносов, подлежащих перечислению'"), 12,0) ;
            
   		ИначеЕсли (Найти(Ячейка, "Ф200_02_AE__") > 0) Тогда 		
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму взносов на ОСМС подлежащих перечислению'"), 12,0) ;
											
		КонецЕсли;   		
		
		
	КонецЕсли;
	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма200_02ПолеТабличногоДокументаСтраница8

&НаКлиенте
Процедура Форма200_02ПолеТабличногоДокументаСтраница8Выбор(Элемент, Область, СтандартнаяОбработка)
	  
	Ячейка = Область.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница8");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		

	Если (Найти(Ячейка, "Ф200_02_AF__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_02_AG__") > 0) 
	  ИЛИ (Найти(Ячейка, "Ф200_02_AH__") > 0) 
	   ИЛИ (Найти(Ячейка, "Ф200_02_AI__") > 0) Тогда
		НачЗначение = Область.Значение;
				
		Если (Найти(Ячейка, "Ф200_02_AF__") > 0) Тогда
			
			ПараметрыСтраницы.Вставить("Расчет", Истина);	
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму доходов, не облагаемых социальным налогом в соответствии с подпунктами 4),5) пункта 3 статьи 484 Налогового кодекса'"), 12,0) ;
								
		ИначеЕсли (Найти(Ячейка, "Ф200_02_AG__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму доходов, облагаемых социальным налогом'"), 12,0) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф200_02_AH__") > 0) Тогда		
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму социального налога, исчисленного с начисленных доходов'"), 12,0) ;
            
   		ИначеЕсли (Найти(Ячейка, "Ф200_02_AI__") > 0) Тогда		
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму социальных отчислений'"), 12,0) ;

		КонецЕсли;   		
		
		
	КонецЕсли;
	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма200_02ПолеТабличногоДокументаСтраница9

&НаКлиенте
Процедура Форма200_02ПолеТабличногоДокументаСтраница9Выбор(Элемент, Область, СтандартнаяОбработка)
	  
	Ячейка = Область.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница9");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		

	Если (Найти(Ячейка, "Ф200_02_AJ__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_02_AK__") > 0) 
	  ИЛИ (Найти(Ячейка, "Ф200_02_AL__") > 0)
	   ИЛИ (Найти(Ячейка, "Ф200_02_AM__") > 0)Тогда
		НачЗначение = Область.Значение;
				
		Если (Найти(Ячейка, "Ф200_02_AJ__") > 0) Тогда
			
			ПараметрыСтраницы.Вставить("Расчет", Истина);	
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму социального налога, подлежащего уплате в бюджет'"), 12,0) ;
								
		ИначеЕсли (Найти(Ячейка, "Ф200_02_AK__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму обязательных профессиональных пенсионных взносов, подлежащих уплате'"), 12,0) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф200_02_AL__") > 0) Тогда		
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму отчислений на ОСМС'"), 12,0) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф200_02_AM__") > 0) Тогда		
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму обязательных пенсионных взносов работодателя, подлежащих уплате'"), 12,0) ;
					    
		КонецЕсли;   		
		
		
	КонецЕсли;
	

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДОП ФОРМЫ Форма200_03   - МНОГОСТРОЧНАЯ

&НаКлиенте
Процедура Форма200_03ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;
	
	НачальноеИмяЯчейки = Лев(Ячейка,Найти(Ячейка, "__")-1);

	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница1");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);	
	
	
	Если (Найти(НачальноеИмяЯчейки, "КНО") > 0) Или (Найти(НачальноеИмяЯчейки, "Ф200_03_") > 0)
			Или (Найти(НачальноеИмяЯчейки, "Численность") > 0) Тогда 
		
		НачЗначение = Область.Значение;
		СтандартнаяОбработка = Ложь;

		Если НачальноеИмяЯчейки = "КНОНалогоплательщика" Тогда
			ПараметрыСтраницы.Вставить("ПроверятьЦифрыВСтроке", Истина);					
			НачЗначение = Область.Значение;
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите код органа органа государственных доходов налогоплательщика'"), 4) ;
			
		ИначеЕсли НачальноеИмяЯчейки = "КНОФилиала" Тогда
			
			
			ПараметрыСтраницы.Вставить("ПроверятьЦифрыВСтроке", Истина);		
			
			НачЗначение = Область.Значение;
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите код органа органа государственных доходов филиала'"), 4) ;
						
		ИначеЕсли НачальноеИмяЯчейки = "Ф200_03_001_1" ИЛИ НачальноеИмяЯчейки = "Ф200_03_001_2" ИЛИ НачальноеИмяЯчейки = "Ф200_03_001_3" Тогда
			
			НачЗначение = Область.Значение;
			ПараметрыСтраницы.Вставить("Расчет", Истина);				
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму индивидуального подоходного налога, подлежащего уплате в бюджет'"), 12,0) ;

		ИначеЕсли НачальноеИмяЯчейки = "Ф200_03_002_1" ИЛИ НачальноеИмяЯчейки = "Ф200_03_002_2" ИЛИ НачальноеИмяЯчейки = "Ф200_03_002_3" Тогда
			
			НачЗначение = Область.Значение;
			ПараметрыСтраницы.Вставить("Расчет", Истина);				
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму обязательных пенсионных взносов, подлежащих перечислению'"), 12,0) ;
				
		ИначеЕсли НачальноеИмяЯчейки = "Ф200_03_003_1" ИЛИ НачальноеИмяЯчейки = "Ф200_03_003_2" ИЛИ НачальноеИмяЯчейки = "Ф200_03_003_3" Тогда
			
			
			НачЗначение = Область.Значение;
			ПараметрыСтраницы.Вставить("Расчет", Истина);				
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму обязательных профессиональных пенсионных взносов, подлежащих перечислению'"), 12,0) ;
			
		ИначеЕсли НачальноеИмяЯчейки = "ЧисленностьРаботников_1" ИЛИ НачальноеИмяЯчейки = "ЧисленностьРаботников_2" ИЛИ НачальноеИмяЯчейки = "ЧисленностьРаботников_3" Тогда
					
			НачЗначение = Область.Значение;
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите численность работников'"), 6, 0) ;
			
		ИначеЕсли НачальноеИмяЯчейки = "ЧисленностьИностранцев_1" ИЛИ НачальноеИмяЯчейки = "ЧисленностьИностранцев_2" ИЛИ НачальноеИмяЯчейки = "ЧисленностьИностранцев_3" Тогда
				
			НачЗначение = Область.Значение;
			ПараметрыСтраницы.Вставить("Расчет", Истина);
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите численность иностранцев и лиц без гражданства'"), 6, 0) ;
			
		КонецЕсли;	
		
	ИначеЕсли НачальноеИмяЯчейки = "НомерУведомления" 
		И Не ЭтотОбъект.Форма200ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита Тогда
			
			
			ПараметрыСтраницы.Вставить("ПроверятьЦифрыВСтроке", Истина);		
			
			НачЗначение = Область.Значение;
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите номер уведомления'"), 20) ;
			
	ИначеЕсли НачальноеИмяЯчейки = "ДатаУведомления" 
			И Не ЭтотОбъект.Форма200ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита Тогда
			
			НачЗначение = Область.Значение;
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводДаты(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите дату уведомления'"), ЧастиДаты.Дата) ;

	КонецЕсли;	
	
	ОбластьРасшифровки = Область;
		 

	Если (Найти(Ячейка, "ИИН_БИНФилиала__")> 0) 
	 ИЛИ (Найти(Ячейка, "ФилиалНазв__")> 0) Тогда	
		НачЗначение = Область.Значение;
		ЗначениеРасшифровки = Область.Расшифровка;
		
		//может быть не заполнена расшировка ячейки при восстановления данных старых форм
		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			ИмяЯчейкиРасшифровки = "ФилиалНазв__" + Сред(Ячейка,Найти(Ячейка,"__"));
			ОбластьРасширофвки = Форма200_03ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяЯчейкиРасшифровки);
			Если ОбластьРасширофвки <> Неопределено Тогда 
				ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;
				Область.Расшифровка = ЗначениеРасшифровки;
				ПередатьЗначениеВСтруктуруНаСервере(Ячейка,НачЗначение,,,ЗначениеРасшифровки);
			КонецЕсли;				 
		КонецЕсли;

		Если ЗначениеЗаполнено(НачЗначение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			Возврат;
		КонецЕсли;
		 
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("Справочник.Организации.Форма.ФормаВыбора","Организации");
		СписокВыбора.Добавить("Справочник.ПодразделенияОрганизаций.Форма.ФормаВыбора","Подразделения организаций");
		 
		ОповещениеВыбора = Новый ОписаниеОповещения("ПослеВыбораЭлемента", ЭтаФорма); 		 
		СписокВыбора.ПоказатьВыборЭлемента(ОповещениеВыбора, "Выберите расшифровку", СписокВыбора[0]);		
	КонецЕсли;	
		 
КонецПроцедуры

&НаКлиенте
Процедура Форма200_03ПолеТабличногоДокументаСтраница2Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя; // начало имени ячейки  
	НачальноеИмяЯчейки = Лев(Ячейка, 13);
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница2");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		

	Если (Найти(НачальноеИмяЯчейки, "Ф200_03_") > 0) Или (Найти(НачальноеИмяЯчейки, "КодНалогового") > 0) Тогда
		
		НачЗначение = Область.Значение;
		СтандартнаяОбработка = Ложь;
			
		Если НачальноеИмяЯчейки = "Ф200_03_004_1" ИЛИ НачальноеИмяЯчейки = "Ф200_03_004_2" ИЛИ НачальноеИмяЯчейки = "Ф200_03_004_3" Тогда
			
			ПараметрыСтраницы.Вставить("Расчет", Истина);				
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму социального налога'"), 12,0) ;   
			
		ИначеЕсли НачальноеИмяЯчейки = "Ф200_03_005_1" ИЛИ НачальноеИмяЯчейки = "Ф200_03_005_2" ИЛИ НачальноеИмяЯчейки = "Ф200_03_005_3" Тогда
			
			ПараметрыСтраницы.Вставить("Расчет", Истина);				
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму социальных отчислений'"), 12,0) ;   
				
		ИначеЕсли НачальноеИмяЯчейки = "Ф200_03_006_1" ИЛИ НачальноеИмяЯчейки = "Ф200_03_006_2" ИЛИ НачальноеИмяЯчейки = "Ф200_03_006_3" Тогда			
			       			
			ПараметрыСтраницы.Вставить("Расчет", Истина);				
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму отчислений на обязательное социальное медицинское страхование'"), 12,0) ;   
			
		ИначеЕсли НачальноеИмяЯчейки = "Ф200_03_007_1" ИЛИ НачальноеИмяЯчейки = "Ф200_03_007_2" ИЛИ НачальноеИмяЯчейки = "Ф200_03_007_3" Тогда			
			       			
			ПараметрыСтраницы.Вставить("Расчет", Истина);				
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму  взносов на обязательное социальное медицинское страхование'"), 12,0) ;   
								
		ИначеЕсли НачальноеИмяЯчейки = "Ф200_03_008_1" ИЛИ НачальноеИмяЯчейки = "Ф200_03_008_2" ИЛИ НачальноеИмяЯчейки = "Ф200_03_008_3" Тогда			
			       			
			ПараметрыСтраницы.Вставить("Расчет", Истина);				
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму обязательных пенсионных взносов работодателя'"), 12,0) ;   	
			
		ИначеЕсли НачальноеИмяЯчейки = "Ф200_03_009_1" ИЛИ НачальноеИмяЯчейки = "Ф200_03_009_2" ИЛИ НачальноеИмяЯчейки = "Ф200_03_009_3" Тогда			
			       			
			ПараметрыСтраницы.Вставить("Расчет", Истина);				
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму единого платежа с доходов работников, подлежащего перечислению'"), 12,2) ;   		
			
		ИначеЕсли Найти(Ячейка,"КодНалоговогоОрганаИПН")<>0 ИЛИ Найти(Ячейка,"КодНалоговогоОрганаОПВиСО") <>0 Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите код органа органа государственных доходов'"), 4) 
			
		КонецЕсли;
			
	КонецЕсли;	
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДОП ФОРМЫ Форма200_05   - МНОГОСТРОЧНАЯ

&НаКлиенте
Процедура Форма200_05ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Область.Имя;	
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница1");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	
	Если Найти(Ячейка, "Ф200_05ФИО__")> 0 ИЛИ Найти(Ячейка, "Ф200_05ИИН__")> 0 Тогда
		НачЗначение = Область.Значение;
		
		ЗначениеРасшифровки = Область.Расшифровка;
		
		//может быть не заполнена расшировка ячейки при восстановления данных старых форм
		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			ИмяЯчейкиРасшифровки = "Ф200_05ФИО" + Сред(Ячейка,Найти(Ячейка,"__"));
			ОбластьРасширофвки = Форма200_05ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяЯчейкиРасшифровки);
			Если ОбластьРасширофвки <> Неопределено Тогда 
				ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;
				Область.Расшифровка = ЗначениеРасшифровки;
				ПередатьЗначениеВСтруктуруНаСервере(Ячейка,НачЗначение,,,ЗначениеРасшифровки);
			КонецЕсли;				 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НачЗначение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			Возврат;
		КонецЕсли; 	 
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("Справочник.Контрагенты.Форма.ФормаВыбора","Контрагенты");
		СписокВыбора.Добавить("Справочник.ФизическиеЛица.Форма.ФормаВыбора","Физические лица");
		
		ОповещениеВыбора = Новый ОписаниеОповещения("ПослеВыбораЭлемента", ЭтаФорма, ПараметрыСтраницы); 		 
		СписокВыбора.ПоказатьВыборЭлемента(ОповещениеВыбора, "Выберите расшифровку", СписокВыбора[0]);				 
		
	ИначеЕсли (Найти(Ячейка, "Ф200_05Статус__") > 0) Тогда
		НачЗначение = Область.Значение;
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
		ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
		ПараметрыФормы.Вставить("ИмяСекции"			  ,	"СтатусыФизическихЛиц2021");
		ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
		
		ПараметрыФормы.Вставить("ИмяОтчета",          "РегламентированныйОтчет200Форма");
	
		ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(НачЗначение), Неопределено, СокрЛП(НачЗначение)));
		
		ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
		Если ВнешнийОтчет Тогда
			ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		Иначе
			ОткрытьФорму("Отчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		КонецЕсли;
		
	ИначеЕсли (Найти(Ячейка, "Ф200_05Категория__") > 0) Тогда
		НачЗначение = Область.Значение;
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
		ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
		ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КатегорииФизическихЛиц2021");
		ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
		
		ПараметрыФормы.Вставить("ИмяОтчета",          "РегламентированныйОтчет200Форма");
	
       	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ?(НЕ ЗначениеЗаполнено(НачЗначение), Неопределено, НачЗначение)));
		
		ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
		Если ВнешнийОтчет Тогда
			ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		Иначе
			ОткрытьФорму("Отчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		КонецЕсли;
        
   	ИначеЕсли (Найти(Ячейка, "Ф200_05_F__") > 0)
		ИЛИ (Найти(Ячейка, "Ф200_05_G__") > 0)	Тогда
	 
	 	Если Область.Значение = "Х" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "Х";
		КонецЕсли;
		
		ПередатьЗначениеВМногострочнуюСтруктуру(ПараметрыСтраницы.ИмяСтраницы, Область.Имя, Область.Значение, ПараметрыСтраницы.Расчет)
		
	Иначе
		Возврат;
	КонецЕсли; 	 
	 
КонецПроцедуры

&НаКлиенте
Процедура Форма200_05ПолеТабличногоДокументаСтраница2Выбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Область.Имя;
    НомерСтроки = Сред(Ячейка, Найти(Ячейка, "__") + 2);
    
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница2");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	
	Если (Найти(Ячейка, "Ф200_05_H__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_05_K__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_05_J__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_05_I__") > 0) Тогда
		НачЗначение = Область.Значение;
        Если (Найти(Ячейка, "Ф200_05_H__") > 0) Тогда
            НачЗначение = Область.Значение;
            
            ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
            ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму начисленных доходов'"), 12,0) ;

        ИначеЕсли (Найти(Ячейка, "Ф200_05_I__") > 0) Тогда 
			            
            НачЗначение = Область.Значение;
            СтандартнаяОбработка = Ложь;
            
            ПараметрыФормы = Новый Структура;
            ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
            ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
            ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КодыВидовДоходовНеПодлежащихНалогообложению200_05");
            ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
            
            ПараметрыФормы.Вставить("ИмяОтчета",          "РегламентированныйОтчет200Форма");
            
		    ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(Область.Значение), Неопределено, СокрЛП(Область.Значение)));
            
            ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
            Если ВнешнийОтчет Тогда
                ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
            Иначе
                ОткрытьФорму("Отчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
            КонецЕсли;
              		
        ИначеЕсли (Найти(Ячейка, "Ф200_05_J__") > 0) Тогда			
			            
            ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
            ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму доходов, не подлежащих налогообложению (корректировка)'"), 12,0) ;
				
		ИначеЕсли (Найти(Ячейка, "Ф200_05_K__") > 0) Тогда
            
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму обязательных пенсионных взносов, исчисленных с начисленных доходов'"), 12,0) ;
			
		КонецЕсли;   		
				
	КонецЕсли;    	
КонецПроцедуры

&НаКлиенте
Процедура Форма200_05ПолеТабличногоДокументаСтраница3Выбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Область.Имя;
    НомерСтроки = Сред(Ячейка, Найти(Ячейка, "__") + 2);

	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница3");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	
	Если (Найти(Ячейка, "Ф200_05_L__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_05_M__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_05_N__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_05_O__") > 0) Тогда
		НачЗначение = Область.Значение;
		Если (Найти(Ячейка, "Ф200_05_L__") > 0) Тогда 
            
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму взносов на ОСМС, исчисленных с начисленных доходов'"), 12,0) ;
		
		ИначеЕсли (Найти(Ячейка, "Ф200_05_M__") > 0) Тогда			
			            
            НачЗначение = Область.Значение;
            СтандартнаяОбработка = Ложь;
            
            ПараметрыФормы = Новый Структура;
            ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
            ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
            ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КодыСтандартныхВычетов2021");
            ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
            
            ПараметрыФормы.Вставить("ИмяОтчета",          "РегламентированныйОтчет200Форма");
            
		    ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(Область.Значение), Неопределено, СокрЛП(Область.Значение)));
            
            ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
            Если ВнешнийОтчет Тогда
                ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
            Иначе
                ОткрытьФорму("Отчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
            КонецЕсли;
              		
        ИначеЕсли (Найти(Ячейка, "Ф200_05_N__") > 0) Тогда
			            
            ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
            ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму стандартных налоговых вычетов'"), 12,0) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф200_05_O_") > 0) Тогда
			            
            НачЗначение = Область.Значение;
            СтандартнаяОбработка = Ложь;
            
            ПараметрыФормы = Новый Структура;
            ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
            ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
            ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КодыПрочихВычетов2021");
            ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
            
            ПараметрыФормы.Вставить("ИмяОтчета",          "РегламентированныйОтчет200Форма");
            
		    ПараметрыФормы.Вставить("ТекущийКодСтроки"	  , ?(НЕ ЗначениеЗаполнено(Область.Значение), Неопределено, СокрЛП(Область.Значение)));
            
            ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
            Если ВнешнийОтчет Тогда
                ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
            Иначе
                ОткрытьФорму("Отчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
            КонецЕсли;
            		
		КонецЕсли;   		
				
	КонецЕсли;    	
КонецПроцедуры

&НаКлиенте
Процедура Форма200_05ПолеТабличногоДокументаСтраница4Выбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Область.Имя;
    НомерСтроки = Сред(Ячейка, Найти(Ячейка, "__") + 2);
    
    ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница4");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	
	Если (Найти(Ячейка, "Ф200_05_P__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_05_Q__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_05_R__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_05_S__") > 0) Тогда
		НачЗначение = Область.Значение;
        Если (Найти(Ячейка, "Ф200_05_P__") > 0) Тогда 
            
            ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
            ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму прочих налоговых вычетов'"), 12,0) ;
            
        ИначеЕсли (Найти(Ячейка, "Ф200_05_Q__") > 0) Тогда			
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму индивидуального подоходного налога, исчисленного с начисленных доходов'"), 12,0) ;
				
		ИначеЕсли (Найти(Ячейка, "Ф200_05_R__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму задолженности за отчетный квартал'"), 12,0) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф200_05_S__") > 0) Тогда
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму выплаченных доходов'"), 12,0) ;
			
		КонецЕсли;   		
				
	КонецЕсли;    	
КонецПроцедуры

&НаКлиенте
Процедура Форма200_05ПолеТабличногоДокументаСтраница5Выбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Область.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница5");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	
	Если (Найти(Ячейка, "Ф200_05_T__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_05_U__") > 0)
     ИЛИ (Найти(Ячейка, "Ф200_05_V__") > 0) 
     ИЛИ (Найти(Ячейка, "Ф200_05_W__") > 0) Тогда
		НачЗначение = Область.Значение;
		Если (Найти(Ячейка, "Ф200_05_T__") > 0) Тогда 
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму индивидуального подоходного налога, подлежащего уплате в бюджет'"), 12,0) ;
		
		ИначеЕсли (Найти(Ячейка, "Ф200_05_U__") > 0) Тогда			
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму обязательных пенсионных взносов, подлежащих перечислению'"), 12,0) ;
            
      	ИначеЕсли (Найти(Ячейка, "Ф200_05_V__") > 0) Тогда			
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму взносов на ОСМС, подлежащих перечислению'"), 12,0) ;
						
		ИначеЕсли (Найти(Ячейка, "Ф200_05_W__") > 0) Тогда			
            
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму доходов, не облагаемых социальным налогом в виде выплат за счет средств грантов'"), 12,0) ;
						
		КонецЕсли;   		
				
	КонецЕсли;    	
КонецПроцедуры

&НаКлиенте
Процедура Форма200_05ПолеТабличногоДокументаСтраница6Выбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Область.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница6");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	
	Если (Найти(Ячейка, "Ф200_05_X__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_05_Y__") > 0)
     ИЛИ (Найти(Ячейка, "Ф200_05_Z__") > 0) 
     ИЛИ (Найти(Ячейка, "Ф200_05_AA__") > 0) Тогда
		НачЗначение = Область.Значение;
		Если (Найти(Ячейка, "Ф200_05_X__") > 0) Тогда 
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму доходов, облагаемых социальным налогом'"), 12,0) ;
		
		ИначеЕсли (Найти(Ячейка, "Ф200_05_Y__") > 0) Тогда			
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму социального налога, исчисленного с начисленных доходов'"), 12,0) ;
            
      	ИначеЕсли (Найти(Ячейка, "Ф200_05_Z__") > 0) Тогда			
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму отчислений на ГФСС'"), 12,0) ;
						
		ИначеЕсли (Найти(Ячейка, "Ф200_05_AA__") > 0) Тогда			
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму социального налога, подлежащего уплате в бюджет'"), 12,0) ;
						
		КонецЕсли;   		
				
	КонецЕсли;    	
КонецПроцедуры

&НаКлиенте
Процедура Форма200_05ПолеТабличногоДокументаСтраница7Выбор(Элемент, Область, СтандартнаяОбработка)
	Ячейка = Область.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница7");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	
	Если (Найти(Ячейка, "Ф200_05_AB__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф200_05_AC__") > 0)
	  ИЛИ (Найти(Ячейка, "Ф200_05_AD__") > 0) Тогда //Добавлена ячейка AD
		НачЗначение = Область.Значение;
		Если (Найти(Ячейка, "Ф200_05_AB__") > 0) Тогда 
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму обязательных профессиональных взносов, подлежащих уплате'"), 12,0) ;
			
		ИначеЕсли (Найти(Ячейка, "Ф200_05_AC__") > 0) Тогда			
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму отчислений на ОСМС, подлежащих уплате'"), 12,0) ; 
			
		ИначеЕсли (Найти(Ячейка, "Ф200_05_AD__") > 0) Тогда			
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму обязательных пенсионных взносов работодателя, подлежащих уплате'"), 12,0) ;
			
		КонецЕсли;   		
				
	КонецЕсли;    	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыФормы.Вставить("Налогоплательщик",         Налогоплательщик);	
	ПараметрыФормы.Вставить("НалоговыйКомитет",         СтруктураРеквизитовФормы.НалоговыйКомитет);	
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, мВыбраннаяФорма, "") + "ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);	

КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Перезаполнить = Истина; // Для выполнения запроса на пересчет данных к пользователю
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения =  РегламентированнаяОтчетностьКлиент.ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Перезаполнить Тогда		
		Если СтрокаФормы.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстВопроса = "Перезаполнить данные формы и ее дополнительных форм?";
		Иначе
			ТекстВопроса = "Перезаполнить данные формы?";
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);
		Оповещение.ДополнительныеПараметры.Вставить("Перезаполнить", Перезаполнить);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);		

	КонецЕсли;		

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВXML(Команда)
	
	ГодФормирования = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	
	Если 2024 < ГодФормирования Тогда 
		ТекстСообщения = НСтр("ru = 'Отчет не предназначен для выгрузки в XML в период формирования " + Формат(ГодФормирования,"ЧГ=0") + " г." + Символы.ПС + 
						"Пожалуйста, обновите комплект отчетов.'");
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);		
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект);	
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
   
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохраненияФайла.ПолноеИмяФайла = КодФормы + " " + СтруктураРеквизитовФормы.мГод + "г" + ".xml";
		ДиалогСохраненияФайла.Фильтр = РегламентированнаяОтчетностьКлиентСервер.ФильтрДиалоговВыбораИСохраненияРегламентированногоОтчета();	
		ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
		ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите файл'");		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
		ДиалогСохраненияФайла.Показать(ОписаниеОповещения);
	Иначе 
		
		НачатьПолучениеФайлаССервера(ВыгрузитьВXMLНаСервере(), КодФормы + ".xml"); 
	КонецЕсли;
	   
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресВременногоХранилища = ВыгрузитьВXMLНаСервере();
		
	ПолноеИмяФайла = Результат[0];
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, АдресВременногоХранилища));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяФайла",ПолноеИмяФайла); 
	Обработчик = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеЗавершение", ЭтотОбъект,ДополнительныеПараметры);
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
	ПараметрыСохранения.Интерактивно = Ложь;
	ФайловаяСистемаКлиент.СохранитьФайлы(Обработчик, ПолучаемыеФайлы, ПараметрыСохранения); 
	          
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ТекстЗаголовка = НСтр("ru = 'Данные успешно выгружены в файл'");
	
	СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДополнительныеПараметры.ИмяФайла);
	
	РабочийКаталог = СтруктураФайла.Путь;

	#Если НЕ ВебКлиент Тогда
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка, "file:///" + СтрЗаменить(СокрЛП(РабочийКаталог), "\", "/"),
		РабочийКаталог);
	#Иначе
		Если НЕ ЗначениеЗаполнено(ПолученныеФайлы) Тогда
			Возврат;
		КонецЕсли;                                                    
		
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка,,
		РабочийКаталог);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьТекущееПриложение(Команда)
	
	СтруктураРеквизитовФормы.ШагФорм  = ТекущаяСтраница - 1;
	СтруктураРеквизитовФормы.ВсегоСтр = ТекущаяСтраница - 1;
	
	СформироватьПризнакиФормыИПередатьИтогиНаСервере();
	
	ДополнительныеПараметры =  Новый Структура;
	ДополнительныеПараметры.Вставить("ВыгружатьВсеПриложения", Ложь);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПриложенияПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект,ДополнительныеПараметры);	
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПриложенияПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохраненияФайла.ПолноеИмяФайла = "Приложение 200.03 №" + ТекущаяСтраница + ".xml";
		ДиалогСохраненияФайла.Фильтр = РегламентированнаяОтчетностьКлиентСервер.ФильтрДиалоговВыбораИСохраненияРегламентированногоОтчета();	
		ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
		ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите файл'");	
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПриложениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДиалогСохраненияФайла.Показать(ОписаниеОповещения);		
		
	Иначе  	
	
		ПолноеИмяФайла = "Приложение 200.03 №" + ТекущаяСтраница + ".xml";   
		
		МассивАдресовВоВременномХранилище = Новый Массив();
		МассивИменФайлов				  = Новый Массив(); 		
		ПолучитьДанныеДляВыгрузкиПриложения(ПолноеИмяФайла,МассивАдресовВоВременномХранилище,МассивИменФайлов,ДополнительныеПараметры.ВыгружатьВсеПриложения);
		
		КоличЭлементов = МассивАдресовВоВременномХранилище.Количество()-1;   
			
		Для Индекс = 0 По КоличЭлементов Цикл
			
			Попытка
				
				НачатьПолучениеФайлаССервера(МассивАдресовВоВременномХранилище[Индекс], ПолноеИмяФайла);
				
			Исключение
				ШаблонСообщения = НСтр("ru = 'При записи файла возникла ошибка
										|%1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ОписаниеОшибки = ИнформацияОбОшибке();
				
			КонецПопытки;
			
		КонецЦикла;	
        
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПриложениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;    
	
	ПолноеИмяФайла = Результат[0];     
	
	МассивАдресовВоВременномХранилище = Новый Массив();
	МассивИменФайлов				  = Новый Массив(); 
	
	ПолучитьДанныеДляВыгрузкиПриложения(ПолноеИмяФайла,МассивАдресовВоВременномХранилище,МассивИменФайлов,ДополнительныеПараметры.ВыгружатьВсеПриложения);
	
	КоличЭлементов = МассивАдресовВоВременномХранилище.Количество()-1;   
	ПолучаемыеФайлы = Новый Массив;        
	
	Для Индекс = 0 По КоличЭлементов Цикл
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(МассивИменФайлов[Индекс], МассивАдресовВоВременномХранилище[Индекс] );
		ПолучаемыеФайлы.Добавить(ОписаниеФайла);
	КонецЦикла;	
  	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяФайла",ПолноеИмяФайла); 
	Обработчик = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеЗавершение", ЭтотОбъект,ДополнительныеПараметры);
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
	ПараметрыСохранения.Интерактивно = Ложь;
	ФайловаяСистемаКлиент.СохранитьФайлы(Обработчик, ПолучаемыеФайлы, ПараметрыСохранения); 
	
	СтруктураРеквизитовФормы.ВсегоСтр = 0;
	СтруктураРеквизитовФормы.ШагФорм  = 0; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеДляВыгрузкиПриложения(ИмяФайла, МассивАдресовВоВременномХранилище,МассивИменФайлов, ВыгружатьВсеПриложения)
	
	мВыбраннаяФорма = "Форма2002023Пр3"; 			
	ПолноеИмяФайла = ИмяФайла;     
	
	АдресФайлаВоВременномХранилище = ВыгрузитьОтчетВXMLДляСОНОПриложение();
	МассивАдресовВоВременномХранилище.Добавить(АдресФайлаВоВременномХранилище);
	
	МассивИменФайлов.Добавить(ИмяФайла); 
	
	// СОНО	
	Пока (ВыгружатьВсеПриложения И СтруктураРеквизитовФормы.ШагФорм <= СтруктураРеквизитовФормы.ВсегоСтр) Цикл
		РасширениеФайла = Прав(ИмяФайла,4);
		НазваниеФайла 	= Лев(ИмяФайла, СтрДлина(ИмяФайла)-5);
		МассивИменФайлов.Добавить(НазваниеФайла+(СтруктураРеквизитовФормы.ШагФорм+1)+РасширениеФайла);
		
		АдресФайлаВоВременномХранилище = ВыгрузитьОтчетВXMLДляСОНОПриложение();
		МассивАдресовВоВременномХранилище.Добавить(АдресФайлаВоВременномХранилище);
		
		СтруктураРеквизитовФормы.ШагФорм = СтруктураРеквизитовФормы.ШагФорм + 1;
	КонецЦикла;
	мВыбраннаяФорма = "Форма2002023Кв1"; 			
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсеПриложения(Команда)
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	Если СтрокаФормы = Неопределено Тогда
		ВсегоСтраниц = 1;
	Иначе
		ВсегоСтраниц = СтрокаФормы.ВсегоСтраниц;
	КонецЕсли;

	СтруктураРеквизитовФормы.ШагФорм  = 0;
	СтруктураРеквизитовФормы.ВсегоСтр = ВсегоСтраниц-1;

	СформироватьПризнакиФормыИПередатьИтогиНаСервере();
	
	ДополнительныеПараметры =  Новый Структура;
	ДополнительныеПараметры.Вставить("ВыгружатьВсеПриложения", Истина);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПриложенияПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект,ДополнительныеПараметры);	
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);  
	
    
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФорму(Команда)
	
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму");
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФормуИПриложения(Команда)
	
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФормуИПриложения");
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровка(Команда)
	
	Попытка
		ИмяЯчейки = ТекущийЭлемент.ТекущаяОбласть.Имя;
	Исключение
		ПоказатьПредупреждение(,НСтр("ru = 'Активизируйте нужную ячейку отчета для расшифровки.'"));
		Возврат;
	КонецПопытки;
	
	ЦветРасшифровки = Форма200ПолеТабличногоДокументаСтраница1.Области.s_200_00_001_1.ЦветФона;
	
	НалогоплательщикЮрФизЛицо = ПолучитьЗначениеРеквизита(Налогоплательщик, "ЮрФизЛицо");
	
	//Если Элементы.ГруппаСтраницыОтчета.ТекущаяСтраница = Элементы.Форма200
	Если КодФормы = "Форма200"
		И ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда
		
		Если НалогоплательщикЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда 
			// Строка 200.00.005 предназначена для ЮЛ	
			// Сумма социального налога, подлежащего уплате в бюджет  с применением ставок, установленных п.1 ст. 485 Налогового кодекса
			НомерЯчейки = Число(Лев(Сред(ИмяЯчейки,10),3));			
			Если НомерЯчейки = 5 Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки поддерживается только для юридических лиц.'"));
				Возврат;
			КонецЕсли;                     			
			
			Форма200Расшифровка(ИмяЯчейки);			
			
		ИначеЕсли НалогоплательщикЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") Тогда  
			НомерЯчейки = Число(Лев(Сред(ИмяЯчейки,10),3));
			// 200.00.004 Сумма обязательных пенсионных взносов, подлежащих перечислению  в свою пользу
			// 200.00.007 Сумма социального налога, подлежащего уплате в бюджет, с применением ставок, установленных п.2 ст. 485 Налогового кодекса																															
			// 200.00.009 Сумма социальных отчислений в свою пользу
			Если НомерЯчейки = 4 Или  НомерЯчейки = 7 Или  НомерЯчейки = 9 Или  НомерЯчейки = 12 Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки поддерживается только для индивидуального предпринимателя.'"));
				Возврат;
			КонецЕсли;                     			
			
			Форма200Расшифровка(ИмяЯчейки);
		КонецЕсли;
		
	ИначеЕсли КодФормы = "Форма200_01"//Элементы.ГруппаСтраницыОтчета.ТекущаяСтраница = Элементы.Форма200_01 
		И ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда
		
		НомерЯчейки = Число(Лев(Сред(ИмяЯчейки,10),3));		
		
		Если НалогоплательщикЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") Тогда  					
			// строки предназначены для физ. лица, поэтому их расшифровка для юр. лица не поддерживается
			Если НомерЯчейки = 12 Или  НомерЯчейки = 18 Или  НомерЯчейки = 21 Тогда				
				ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки поддерживается только для индивидуального предпринимателя.'"));
				Возврат;
			КонецЕсли;  			
		Иначе
			// s_200_01_016 Доходы работника, облагаемые социальным налогом. Заполяется только юр. лицами 
			Если НомерЯчейки = 16 Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки поддерживается только для юридических лиц.'"));
				Возврат;
			КонецЕсли;                     			
		КонецЕсли;		
		    	
		Форма200_01Расшифровка(ИмяЯчейки);    
	ИначеЕсли КодФормы = "Форма200_02" 
		И ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда
		
		Форма200_02Расшифровка(ИмяЯчейки);
		
	ИначеЕсли КодФормы = "Форма200_03"//Элементы.ГруппаСтраницыОтчета.ТекущаяСтраница = Элементы.Форма200_03 
		И ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда
		
		Форма200_03Расшифровка(ИмяЯчейки);
		
	ИначеЕсли КодФормы = "Форма200_05"
		И ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда
		
		Форма200_05Расшифровка(ИмяЯчейки);
			
	ИначеЕсли КодФормы = "Форма200_06"
		И ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда
		
		Форма200_06Расшифровка(ИмяЯчейки);
		
	Иначе	
		
		ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки не поддерживается." + Символы.ПС + "Расшифровку содержат ячейки формы, выделенные голубым цветом.'"));
		
	КонецЕсли;	

	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаОбщая(Команда)
	
	Если КодФормы = "Форма200_02" Тогда
		Форма200_02РасшифровкаОбщая();
	ИначеЕсли КодФормы = "Форма200_05" Тогда
		Форма200_05РасшифровкаОбщая(); 
	ИначеЕсли Найти(КодФормы, "Форма200_06") > 0 Тогда
		Форма200_06РасшифровкаОбщая();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ДобавитьСтрокуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	УдалитьСтрокуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущаяСтр(Команда)
	
	ПредыдущаяСтрНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СледующаяСтр(Команда)
	
	СледующаяСтрНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаПерейти(Команда)
	
	ВыбСтраница = 1;
	
	ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаСтраницы", ЭтаФорма); 
	ПоказатьВводЧисла(ОповещениеВводаЗначений,ВыбСтраница, "Введите номер страницы",5,0);

	
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	ОткрытьФормуНастройкиСтраниц()
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьНаСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

//До200_06
&НаКлиенте
Процедура ДобавитьПриложение(Команда)
	ДобавитьПриложениеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПриложение(Команда)
	
	УдаляемоеПриложение = ТаблицаДобавленныхПриложений.НайтиСтроки(Новый Структура("КодФормы", КодФормы));
	
	Если УдаляемоеПриложение.Количество() > 0 Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Нстр("ru='Приложение ""%1"" и его данные будут удалены. Продолжить?'"), СокрЛП(УдаляемоеПриложение[0].НаименованиеФормы));
		ПараметрыОповещения = Новый Структура("ИндексПриложения", ТаблицаДобавленныхПриложений.Индекс(УдаляемоеПриложение[0]));
		Оповещение = Новый ОписаниеОповещения("УдалитьПриложениеЗавершение", ЭтотОбъект, ПараметрыОповещения);				
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);		
	Иначе
		ПоказатьПредупреждение(, Нстр("ru='Структура приложения незаполнена. Удаление невозможно.'"));
	КонецЕсли;

КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура СохранитьДанные() Экспорт
	СохранитьНаСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыФормыНаКлиенте(Параметры) Экспорт
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	ЗаполнитьСведенияОбОтчетномПериоде();
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);		
	КонецЦикла	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормы(ТекФорма, Параметры)
	
	ЗаполнитьЗначенияСвойств(ТекФорма.СтруктураРеквизитовФормы, Параметры);
		
	ТекФорма.Налогоплательщик        						 = Параметры.Налогоплательщик;		
	ТекФорма.мСписокСтруктурныхЕдиниц						 = Параметры.мСписокСтруктурныхЕдиниц;
	ТекФорма.ПредставлениеСпискаСтруктурныхЕдиниц			 = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ТекФорма.мСписокСтруктурныхЕдиниц);
	
	// Заполнить НалоговыйКомитет. 
	Если Параметры.Свойство("НалоговыйКомитет") Тогда
		ТекФорма.НалоговыйКомитет = Параметры.НалоговыйКомитет;  
	Иначе
		ТекФорма.НалоговыйКомитет = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеглОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Форма = ДополнительныеПараметры.Форма;	
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", Форма.КодФормы));
		Вложенность = ДополнительныеПараметры.ОчищатьПриложения;	
		
		ОчиститьРеглОтчетЗавершениеНаСервере(СтрокаФормы.КодФормы, СтрокаФормы.Многострочность, Вложенность)	
	КонецЕсли;		
КонецПроцедуры 	

&НаСервере
Процедура ОчиститьРеглОтчетЗавершениеНаСервере(КодФормы, ПризнакМногострочности, Вложенность) Экспорт		
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, ПризнакМногострочности, Вложенность);
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;	
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			
		КонецЕсли;
	
		Модифицированность = Истина;
		
	Иначе
		//исправление ошибки открытия ранее сохраненного отчеа, в связи с переименованием ячеек(только для формы 2019 года)
		мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
		СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();
		Если СписокСохранения.Свойство("СтруктураДополнительныхРеквизитовФормы") Тогда			
			СтруктураДополнительныхРеквизитовФормы = СписокСохранения.СтруктураДополнительныхРеквизитовФормы;
			ТаблицаСтрокГруппыФорма200_05Страница1 = СтруктураДополнительныхРеквизитовФормы.ТаблицаСтрокГруппыФорма200_05Страница1;
			
			Если ТаблицаСтрокГруппыФорма200_05Страница1.Колонки.Найти("Ф200_05ИНН")<> Неопределено И ТаблицаСтрокГруппыФорма200_05Страница1.Колонки.Найти("Ф200_05ФИО")<> Неопределено Тогда
				ТаблицаСтрокГруппыФорма200_05Страница1.Колонки["Ф200_05ИНН"].Имя = "Ф200_05ИИН";
				ТаблицаСтрокГруппыФорма200_05Страница1.Колонки["Ф200_05ИНН_Расшифровка"].Имя = "Ф200_05ИИН_Расшифровка";
				ТаблицаСтрокГруппыФорма200_05Страница1.Колонки["Ф200_05ФИО"].Имя = "Ф200_05ФИО";
				ТаблицаСтрокГруппыФорма200_05Страница1.Колонки["Ф200_05ФИО_Расшифровка"].Имя = "Ф200_05ФИО_Расшифровка";
				ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
				мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
				Попытка
					мСохраненныйДок.Записать();
				Исключение
				КонецПопытки;
				
				СтруктураРеквизитовФормы.мСохраненныйДок = мСохраненныйДок.Ссылка;
			КонецЕсли;
		КонецЕсли;
        // 
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	МассивРеквизитовФормы = ЭтотОбъект.ПолучитьРеквизиты();
	
	Для Счетчик = 0 По МассивРеквизитовФормы.Количество()-1 Цикл		
		РеквизитФормы = МассивРеквизитовФормы[Счетчик];
		Если РеквизитФормы.ТипЗначения.СодержитТип(Тип("ТабличныйДокумент")) Тогда
			ЭтотОбъект[РеквизитФормы.Имя] = ЭтотОбъект[РеквизитФормы.Имя];	
		КонецЕсли;
	КонецЦикла;	
	
	мСтруктураЗначений = Новый Структура;

	Если СтруктураРеквизитовФормы.Свойство("СформироватьФормуОтчетаАвтоматически") И СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически <> Неопределено Тогда
		
		ЗаполнитьАвтоНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтчетномПериоде() Экспорт

	СтрПериодОтчета = ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ФП = истина");
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
		СтруктураРеквизитовФормы.мКвартал = Лев(СтрПериодОтчета,1);
		СтруктураРеквизитовФормы.мМесяц = Неопределено;
	Иначе
		СтруктураРеквизитовФормы.мМесяц = Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		СтруктураРеквизитовФормы.мКвартал = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мГод = Лев(Прав(СтрПериодОтчета,7),4);
		
КонецПроцедуры 

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокСтруктурныхЕдиниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");			
	СтруктураРеквизитовФормы.Вставить("НалоговыйКомитет");				
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");	
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");	
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");		
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");	
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрг");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");	
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");		
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");	
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);	
	СтруктураРеквизитовФормы.Вставить("мПериодичность", Параметры.мПериодичность);		
	СтруктураРеквизитовФормы.Вставить("мГод");	
	СтруктураРеквизитовФормы.Вставить("мКвартал");	
	СтруктураРеквизитовФормы.Вставить("мМесяц");
	СтруктураРеквизитовФормы.Вставить("КодНалоговогоОрганаИПН");	
	СтруктураРеквизитовФормы.Вставить("КодНалоговогоОрганаОПВиСО");		
	
	// индивидуальные параметры формы
	СтруктураРеквизитовФормы.Вставить("мПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	СтруктураРеквизитовФормы.Вставить("ВсегоСтр");
	СтруктураРеквизитовФормы.Вставить("ШагФорм");
	СтруктураРеквизитовФормы.Вставить("КоличествоСтруктурныхЕдиницБезНалогоплательщика");
	СтруктураРеквизитовФормы.Вставить("РасчетПоВидамДоходовИОблагаемойБазе");
	СтруктураРеквизитовФормы.Вставить("ОтметкаРезидентов");		
	СтруктураРеквизитовФормы.Вставить("ОтметкаНерезидентов");
	СтруктураРеквизитовФормы.Вставить("ВедетсяУчетОППВ");
	СтруктураРеквизитовФормы.Вставить("мЕстьРеквизитыСП");
	СтруктураРеквизитовФормы.Вставить("мПризнакСистемыСотрудниковЗУП20 ");
	СтруктураРеквизитовФормы.Вставить("ПризнакМногострочности"); 
	СтруктураРеквизитовФормы.Вставить("ПорядокОбложенияДоходовРаботников");   
	СтруктураРеквизитовФормы.Вставить("КоличествоФилиаловБезНалогоплательщика");
	СтруктураРеквизитовФормы.Вставить("ОрганизацияПлательщикРозничногоНалога");
	
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			
			СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
						
			ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
			мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()	
	
	//Доп200_06
	ВосстановитьОбъектыДобавленныхПриложений();
	//Доп200_06
	РегламентированнаяОтчетность.ВосстановитьСохраненныйОтчет(ЭтотОбъект);	
	//Доп200_06
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Перем СтруктураГруппы;  
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ТекстСообщения = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);				
				
		Возврат Ложь;
		
	КонецЕсли;
			
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		ВыборРасчета(КодФормы);
	КонецЕсли; 

	РегламентированнаяОтчетность.СформироватьСписокПечатаемыхЛистов(ЭтаФорма);	       		
		
	Возврат Истина;  
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуНастройкиСтраниц()
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРаздел = Элементы.РазделыОтчета.ТекущиеДанные.Страницы;		
	КонецЕсли;
	
	Для Каждого ТекФорма ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",ТекФорма.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			ТекущаяСтрокаСписка.Выгружать               = ТекФорма.Выгружать;
			ТекущаяСтрокаСписка.ПоказатьСтраницу        = ТекФорма.ПоказатьСтраницу;			
			ТекущаяСтрокаСписка.АвтополучениеИтогов     = ТекФорма.АвтополучениеИтогов;  
			ТекущаяСтрокаСписка.АвтоЗаполнение          = ТекФорма.АвтоЗаполнение;  
		КонецЕсли;		   
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокФормДерева",СписокФормДерева);
	
	ДопПараметры = Новый Структура("ТекущийРаздел",ТекущийРаздел);
	
	ОповещениеПослеЗакрытияФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастройкиСтраниц",ЭтотОбъект,ДопПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.НастройкиОтчета",ПараметрыФормы, ЭтаФорма,,,,ОповещениеПослеЗакрытияФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиСтраниц(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьДанныеФормы(РезультатЗакрытия, СписокФормДерева);
	
	Модифицированность = Истина;
	
	//обновим мСписокФормБезИерархии
	Для Каждого СтрокаФормы ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",СтрокаФормы.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			СтрокаФормы.Выгружать               = ТекущаяСтрокаСписка.Выгружать;
			СтрокаФормы.ПоказатьСтраницу        = ТекущаяСтрокаСписка.ПоказатьСтраницу;			
			СтрокаФормы.АвтополучениеИтогов     = ТекущаяСтрокаСписка.АвтополучениеИтогов;  
			СтрокаФормы.АвтоЗаполнение          = ТекущаяСтрокаСписка.АвтоЗаполнение;  
		КонецЕсли;			
	КонецЦикла; 	

	Если ДополнительныеПараметры.Свойство("ТекущийРаздел") И НЕ ДополнительныеПараметры.ТекущийРаздел = Неопределено Тогда  		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(РазделыОтчета, Новый Структура("СписокФормДереваСтраницы",ДополнительныеПараметры.ТекущийРаздел));
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;			
	КонецЕсли;  	
	
КонецПроцедуры

&НаСервере
Процедура РазделыОтчетаПриАктивизацииСтрокиНаСервере(НовыйКодФормы, НовыйПризнакМногострочность)	
	
	//проверим, что стояли не на основной, итоги передаем только когда переходим из доп.форм
	ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	Если ТекФорма <> Неопределено И Не ТекФорма.ПризнакОсновной Тогда
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы, Истина);		
	КонецЕсли;
				
	// установим новые значения реквизитам формы
	ЭтаФорма.КодФормы = НовыйКодФормы;	
	
	//передаем данные из структуры в ТП
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	
	
	Если  НовыйПризнакМногострочность Тогда
		
		Если ТекФорма = Неопределено Тогда
			ВсегоСтраниц = 1;
		Иначе
			ВсегоСтраниц = ТекФорма.ВсегоСтраниц;
		КонецЕсли;
		
		СтруктураРеквизитовФормы.КоличествоСтруктурныхЕдиницБезНалогоплательщика = ВсегоСтраниц;
		
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтотОбъект);
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПанель(ПризнакОсновнойФормы, ПризнакМногострочности)
			
	Элементы.ФормаВыгрузитьВXML.Видимость 						 = ПризнакОсновнойФормы; 
	Элементы.ГруппаКнопокДействияСоСтрокамиИСтраницами.Видимость = ПризнакМногострочности;
	Элементы.Расшифровка200_02.Видимость = (КодФормы = "Форма200_02" ИЛИ КодФормы = "Форма200_05" ИЛИ Найти(КодФормы, "Форма200_06") > 0);	
	Элементы.ФормаРасшифровка.Видимость  = (КодФормы <> "Форма200_02" И КодФормы <> "Форма200_05" И Найти(КодФормы, "Форма200_06") = 0);	
	Элементы.ВыгрузитьВXMLПриложение20003.Видимость 			 = (КодФормы = "Форма200_03");
				    	
КонецПроцедуры //ЗаполнитьПанель()

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "ДатаПодачи", ДатаПодписи, Истина);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма200_03", "ДатаПодачи", 	ДатаПодписи, Ложь, Истина);
	
КонецПроцедуры

&НаСервере
Процедура СписокРасчетовПриИзмененииНаСервере()
	
	ЗаполнитьВидРасчета(СписокРасчетов);

	Если СтруктураРеквизитовФормы.ПризнакМногострочности Тогда
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);
	КонецЕсли;	

КонецПроцедуры

&НаСервере
// Процедура управляет выводом сведений о выбранном виде расчета
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьВидРасчета(ВидРасчета)
	
	Перем СтруктураГруппы;
	
	//ТД для обычной формы
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, КодФормы);
	
	//Многострочная структура для многостраничной формы - ф.200_03
	мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, "Форма200_03");
	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("Первоначальный");
	МассивИмен.Добавить("Очередной");
	МассивИмен.Добавить("Дополнительный");
	МассивИмен.Добавить("ПоУведомлению");
	МассивИмен.Добавить("Ликвидационный");
	
	//сначала очищаем поля, если были проставлены уже отметки
	
	Для Каждого Имя Из МассивИмен Цикл 
		//очищаем обычную форму
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, Имя, "", Форма200ПолеТабличногоДокументаСтраница1);
		
	КонецЦикла;
	
	//очищаем многострочную структуру 
	мМногострочнаяСтруктура.Свойство("Страница1", СтруктураГруппы);
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
	
	//очищаем во всех страницах
	Для Каждого СтрокаТаблицы Из ТаблицаСтрокГруппы Цикл
		
		Для Каждого Имя Из МассивИмен Цикл 
			
			СтрокаТаблицы[Имя] = "";
			
			ОбластьТД = Форма200_03ПолеТабличногоДокументаСтраница1.Области.Найти(Имя + "__" + Строка(ТаблицаСтрокГруппы.Индекс(СтрокаТаблицы)+1));
			
			Если ОбластьТД <> Неопределено Тогда 
				ОбластьТД.Значение = "";
			КонецЕсли;
		КонецЦикла;	
		
	КонецЦикла;	
		
	//передаем новые значения в ТД обычной формы
	РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ВидРасчета, "Х", Форма200ПолеТабличногоДокументаСтраница1);
	
	//передаем новые значенич в МС и таб.документ
	Для Каждого СтрокаТаблицы Из ТаблицаСтрокГруппы Цикл
		СтрокаТаблицы[ВидРасчета] = "Х";
		
		ОбластьТД = Форма200_03ПолеТабличногоДокументаСтраница1.Области.Найти(ВидРасчета + "__" + Строка(ТаблицаСтрокГруппы.Индекс(СтрокаТаблицы)+1));
			
		Если ОбластьТД <> Неопределено Тогда 
			ОбластьТД.Значение = "Х";
		КонецЕсли;

	КонецЦикла;	
		
	Если ВидРасчета = "ПоУведомлению" Тогда
		Форма200ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Ложь;
		Форма200ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита  = Ложь;
		
		// передаем номер и дату уведомления в форму 200.03
		НомерУведомления = Форма200ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Значение;
		ДатаУведомления  = Форма200ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Значение;
		
		//передаем новые значенич в МС и таб.документ
		Для Каждого СтрокаТаблицы Из ТаблицаСтрокГруппы Цикл
			СтрокаТаблицы.НомерУведомления = НомерУведомления;
			СтрокаТаблицы.ДатаУведомления = ДатаУведомления;
			
			ОбластьНомерУведомления = Форма200_03ПолеТабличногоДокументаСтраница1.Области.Найти("НомерУведомления" + "__" + Строка(ТаблицаСтрокГруппы.Индекс(СтрокаТаблицы)+1));
			Если ОбластьНомерУведомления <> Неопределено Тогда 
				ОбластьНомерУведомления.Значение = НомерУведомления;
			КонецЕсли;

			ОбластьДатаУведомления = Форма200_03ПолеТабличногоДокументаСтраница1.Области.Найти("ДатаУведомления" + "__" + Строка(ТаблицаСтрокГруппы.Индекс(СтрокаТаблицы)+1));
			Если ОбластьДатаУведомления <> Неопределено Тогда 
				ОбластьДатаУведомления.Значение = ДатаУведомления;
			КонецЕсли;

		КонецЦикла;	
	Иначе
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "НомерУведомления", "", Форма200ПолеТабличногоДокументаСтраница1);
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "ДатаУведомления", "", Форма200ПолеТабличногоДокументаСтраница1);
		
		Форма200ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Истина;
		Форма200ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита  = Истина;
		
		//передаем новые значенич в МС
		Для Каждого СтрокаТаблицы Из ТаблицаСтрокГруппы Цикл
			СтрокаТаблицы.НомерУведомления = "";
			СтрокаТаблицы.ДатаУведомления = "";
			
			ОбластьНомерУведомления = Форма200_03ПолеТабличногоДокументаСтраница1.Области.Найти("НомерУведомления" + "__" + Строка(ТаблицаСтрокГруппы.Индекс(СтрокаТаблицы)+1));
			Если ОбластьНомерУведомления <> Неопределено Тогда 
				ОбластьНомерУведомления.Значение = "";
			КонецЕсли;

			ОбластьДатаУведомления = Форма200_03ПолеТабличногоДокументаСтраница1.Области.Найти("ДатаУведомления" + "__" + Строка(ТаблицаСтрокГруппы.Индекс(СтрокаТаблицы)+1));
			Если ОбластьДатаУведомления <> Неопределено Тогда 
				ОбластьДатаУведомления.Значение = "";
			КонецЕсли;

		КонецЦикла;	
	КонецЕсли;
	
	//обновим обычную форму
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, КодФормы, ТаблицаДанных);			
	
	//обновим таблицы многострочной структуры
	РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, "Форма200_03", мМногострочнаяСтруктура);
	
	Модифированность = Истина;
	
КонецПроцедуры // ЗаполнитьВидРасчета()

&НаКлиенте
Функция ВыборФайлаПриложения(ИмяПриложения)

	Если Не ПодключитьРасширениеРаботыСФайлами() Тогда		
		Возврат "";
	КонецЕсли;
	
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогСохраненияФайла.ПолноеИмяФайла	 = ИмяПриложения;
	ДиалогСохраненияФайла.Фильтр			 = РегламентированнаяОтчетностьКлиентСервер.ФильтрДиалоговВыбораИСохраненияРегламентированногоОтчета();	
	ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
	ДиалогСохраненияФайла.Заголовок			 = НСтр("ru = 'Выберите файл'");

	Если ДиалогСохраненияФайла.Выбрать() Тогда
		ИмяФайла = ДиалогСохраненияФайла.ПолноеИмяФайла;
	КонецЕсли;	

	Возврат ИмяФайла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ЗначениеРеквизита)
											
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ЗначениеРеквизита);										
											
КонецФункции

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	 	
	
	Перезаполнить = ДополнительныеПараметры.Перезаполнить;
	
	Если КодФормы = "Форма200" Тогда 
		Форма200ЗаполнитьАвто(Перезаполнить);		
	ИначеЕсли КодФормы = "Форма200_01" Тогда     
		Форма200_01ЗаполнитьАвто(Перезаполнить);
	ИначеЕсли КодФормы = "Форма200_02" Тогда 		
		Форма200_02ЗаполнитьАвто(Перезаполнить);
	ИначеЕсли КодФормы = "Форма200_03" Тогда     
		Форма200_03ЗаполнитьАвто(Перезаполнить);
	ИначеЕсли КодФормы = "Форма200_05" Тогда     
		Форма200_05ЗаполнитьАвто(Перезаполнить); 
	ИначеЕсли Найти(КодФормы, "Форма200_06") > 0 Тогда     
		Форма200_06ЗаполнитьАвто(Перезаполнить);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура очистки формы
//
// параметр: ТекИмяФормы - имя очищаемой формы (=КодФормы)
//           ОчиститьВсе - признак вида очистки формы              
//
Процедура Очистить(ТекИмяФормы,ОчиститьВсе = Ложь) Экспорт
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	// Список ячеек, очищать которые не нужно
	Если ОчиститьВсе Тогда
	Иначе
		СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
		СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Первоначальный");
	    СписокПоказателейНеПодлежащихОчистке.Добавить("Очередной");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Дополнительный");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Ликвидационный");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ПоУведомлению");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Квартал");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Год");
		СписокПоказателейНеПодлежащихОчистке.Добавить("НомерУведомления");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаУведомления");
		СписокПоказателейНеПодлежащихОчистке.Добавить("НомерКонтракта");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаКонтракта");
		СписокПоказателейНеПодлежащихОчистке.Добавить("НалоговыйРежим");
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодНалоговогоОрганаИПН");
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодНалоговогоОрганаОПВиСО");
	КонецЕсли;
		
	РегламентированнаяОтчетность.ОчиститьСтруктуруДанныхИТабличноеПолеФормы(ЭтаФорма, ТекИмяФормы, ОчиститьВсе, СписокПоказателейНеПодлежащихОчистке);
	
	// обновим представление списка структурных единиц
	Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц);
	КонецЕсли;
	
КонецПроцедуры // Очистить()

&НаКлиенте
Процедура ПриЗакрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьнаСервере();
		Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;	
	
КонецПроцедуры  

&НаСервере
Процедура СохранитьнаСервере(); 	
	РегламентированнаяОтчетность.СохранитьОтчет(ЭтотОбъект);
КонецПроцедуры

&НаСервере 
Процедура ПередатьЗначениеВСтруктуруНаСервере(ИмяЯчейки, ЗначениеЯчейки, ПередаватьВТП = Ложь, ПередаватьВМногострочнуюЧасть = Ложь, ПоказательРасшифровки = Неопределено)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяЯчейки ,ЗначениеЯчейки, ПередаватьВТП, ПередаватьВМногострочнуюЧасть, ПоказательРасшифровки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫГРУЗКИ ДАННЫХ ОТЧЕТА В XML

&НаСервере
Функция ВыгрузитьВXMLНаСервере() 
	
	АдресВременногоХранилища = РегламентированнаяОтчетность.ВыгрузитьОтчетВXMLДляСОНО(ЭтотОбъект);
	
	Если ТаблицаДобавленныхПриложений.Количество() <> 0 Тогда
		
		АдресВременногоХранилища = ДобавленныеПриложенияВыгрузитьВXMLНаСервере(АдресВременногоХранилища);
		
	КонецЕсли; 
	
	Возврат АдресВременногоХранилища;

	//Возврат РегламентированнаяОтчетность.ВыгрузитьОтчетВXMLДляСОНО(ЭтотОбъект);

КонецФункции

&НаСервере
// Выгружает многострочные формы в XML
//
Процедура ВыгрузитьМногострочнуюФормуПриложение(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки)
	
	Перем СтруктураГруппы;
	
	СтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки);	
	
	Если СтрокаВыгрузки.КоличествоНаЛисте = 1 Тогда  // форма многостраничная
		
		// для многострочной = одностраничной
		
		НачальнаяСтрока = НомерСтроки;
		КонечнаяСтрока = 0;
		
		ТекущаяФорма = СтрокаВыгрузки.Форма;
		СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
		НоваяФорма = СледСтрокаВыгрузки.Форма;
		Пока НоваяФорма = ТекущаяФорма Цикл
			НомерСтроки = НомерСтроки+1;
			
			ТекущаяФорма = СледСтрокаВыгрузки.Форма;
			Если НомерСтроки+1 < КоличествоСтрокВТаблице Тогда
				СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);						
				НоваяФорма = СледСтрокаВыгрузки.Форма;
				КонечнаяСтрока = НомерСтроки;
			Иначе
				НоваяФорма = Неопределено;
				КонечнаяСтрока = НомерСтроки;
			КонецЕсли;
		КонецЦикла;
		
		МногСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, СтрокаВыгрузки.КодФормы); 
				
		КоличествоЗаписей = 0;
		
		Для Каждого КлючИЗначение Из МногСтруктура Цикл
			ТаблицаСтрокГруппы = КлючИЗначение.Значение.Строки;
			КоличествоЗаписей =  ТаблицаСтрокГруппы.Количество();
			Прервать;
		КонецЦикла;
		
		Если СтруктураРеквизитовФормы.ВсегоСтр = 0 Тогда 
			Если НЕ КоличествоЗаписей <= 1 Тогда 
				СтруктураРеквизитовФормы.ВсегоСтр = КоличествоЗаписей - 1;	
			КонецЕсли;
		КонецЕсли;
				
		ОдинШаг = Истина;
		
		Для ШагФорм = СтруктураРеквизитовФормы.ШагФорм По СтруктураРеквизитовФормы.ВсегоСтр Цикл 
			
			Для Шаг = НачальнаяСтрока По КонечнаяСтрока Цикл  
				
				Если Шаг = КонечнаяСтрока Тогда 
					Прервать;
				КонецЕсли;
				
				СтрокаВыгрузкиТек = ТаблицаВыгрузки.Получить(Шаг);
				ТекущаяФорма 	  = СтрокаВыгрузкиТек.Форма; 
				ТекущаяСтраницаПриложения   = СтрокаВыгрузкиТек.Страница;
				
				СтрокаВыгрузкиСлед = ТаблицаВыгрузки.Получить(Шаг + 1);
				
				НоваяФорма 		   = СтрокаВыгрузкиСлед.Форма; 
				НоваяСтраница      = СтрокаВыгрузкиСлед.Страница; 			
				
				Если ОдинШаг Тогда 
					НомерЛиста = Новый Структура;
					НомерЛиста.Вставить("НомерЛиста", ШагФорм);
					//Запишем 1ю строку макета в записьXML	
					ЗаписатьЗначениеЭлементаПриложение(Запись, СтрокаВыгрузкиТек, НомерЛиста);
					ЗаписатьЗначениеЭлементаПриложение(Запись, СтрокаВыгрузкиСлед, НомерЛиста);
					ОдинШаг = Ложь;
					Продолжить;
				КонецЕсли;
				
				
				Если НоваяФорма <> ТекущаяФорма Тогда
					Запись.ЗаписатьКонецЭлемента();			// </sheet>
				КонецЕсли;
				Если НЕ НоваяФорма = ТекущаяФорма Тогда		
					Запись.ЗаписатьКонецЭлемента();			// </sheetGroup>
					Запись.ЗаписатьКонецЭлемента();			// </form>
					Запись.ЗаписатьНачалоЭлемента("form");
					Запись.ЗаписатьАтрибут("name",СтрокаВыгрузкиСлед.Форма);
					Запись.ЗаписатьНачалоЭлемента("sheetGroup");
				КонецЕсли;                                       	
				Если НЕ НоваяСтраница = ТекущаяСтраницаПриложения Тогда
					Если НоваяФорма <> ТекущаяФорма Тогда
						// ничего не делаем
					Иначе
						Запись.ЗаписатьКонецЭлемента();			// </sheet>
					КонецЕсли;
					Запись.ЗаписатьНачалоЭлемента("sheet");
					Запись.ЗаписатьАтрибут("name",СтрокаВыгрузкиСлед.Страница);
				КонецЕсли;
				НомерЛиста = Новый Структура;
				НомерЛиста.Вставить("НомерЛиста", ШагФорм);
				ЗаписатьЗначениеЭлементаПриложение(Запись, СтрокаВыгрузкиСлед, НомерЛиста);
			КонецЦикла;
			
			ШагФорм = ШагФорм + 1;
			
			Прервать;
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры // ВыгрузитьМногострочнуюФормуПриложение()

&НаСервере
// Формирует построчно структуру XML файла из макета "ВыгрузкаВXML"
//
Процедура ВыгрузитьСтрокуВXMLПриложение(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки, ТекущаяФорма = Неопределено, ТекущаяСтраницаПриложения = Неопределено)
	
	СтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки);
	НоваяФорма 	   = СтрокаВыгрузки.Форма; 
	НоваяСтраница  = СтрокаВыгрузки.Страница; 
	
	Если ТекущаяФорма <> Неопределено И НоваяФорма <> ТекущаяФорма Тогда
		Запись.ЗаписатьКонецЭлемента();			// </sheet>
	КонецЕсли;
   
	Если НЕ НоваяФорма = ТекущаяФорма Тогда		
		Если НЕ ТекущаяФорма = Неопределено Тогда
			Запись.ЗаписатьКонецЭлемента();			// </sheetGroup>
			Запись.ЗаписатьКонецЭлемента();			// </form>
		КонецЕсли;
		Запись.ЗаписатьНачалоЭлемента("form");
		Запись.ЗаписатьАтрибут("name", СтрокаВыгрузки.Форма);
		Запись.ЗаписатьНачалоЭлемента("sheetGroup");
	КонецЕсли;                                       	
	
	Если НЕ НоваяСтраница = ТекущаяСтраницаПриложения Тогда
		Если ТекущаяФорма <> Неопределено И НоваяФорма <> ТекущаяФорма Тогда
			// ничего не делаем
	    ИначеЕсли НЕ ТекущаяСтраницаПриложения = Неопределено Тогда		
			Запись.ЗаписатьКонецЭлемента();			// </sheet>
		КонецЕсли;
		Запись.ЗаписатьНачалоЭлемента("sheet");
		Запись.ЗаписатьАтрибут("name",СтрокаВыгрузки.Страница);
	КонецЕсли;
	
	Если СтрокаВыгрузки.Многострочность <> Неопределено И СтрокаВыгрузки.Многострочность = 1 Тогда 
		ВыгрузитьМногострочнуюФормуПриложение(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки);
	// проверим многострочное ли значение
	ИначеЕсли ЗначениеЗаполнено(СтрокаВыгрузки.КоличествоROW) И СтрокаВыгрузки.КоличествоROW <> "0" Тогда  // для обычных форм
		// если в обычной форме встретилась многострочность 
		КоличествоПовторений = Число(СтрокаВыгрузки.КоличествоROW);
		Для Н = 1 По КоличествоПовторений Цикл 				
			Запись.ЗаписатьНачалоЭлемента("row");
			СтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки);
			Если Н = 1 Тогда
				ТаблицаМногострочныхТегов = ТаблицаВыгрузки.СкопироватьКолонки();
				НоваяСтрока = ТаблицаМногострочныхТегов.Добавить();			
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыгрузки);
				
				// Проверим многострочная ли следующая строка
				СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
				Пока ЗначениеЗаполнено(СледСтрокаВыгрузки.КоличествоROW) И СледСтрокаВыгрузки.КоличествоROW <> "0" Цикл
					НомерСтроки = НомерСтроки+1;
					НоваяСтрока = ТаблицаМногострочныхТегов.Добавить();			
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СледСтрокаВыгрузки);
					СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
				КонецЦикла;   				
			КонецЕсли;
			Для Каждого МногСтрока Из ТаблицаМногострочныхТегов Цикл
				ЗаписатьЗначениеЭлементаПриложение(Запись, МногСтрока);	
			КонецЦикла;    			
			Запись.ЗаписатьКонецЭлемента();			// </row>
		КонецЦикла;			
	Иначе
		ЗаписатьЗначениеЭлементаПриложение(Запись, СтрокаВыгрузки);
	КонецЕсли;	      	
	
	ТекущаяФорма = НоваяФорма;
	ТекущаяСтраницаПриложения = НоваяСтраница;
		
КонецПроцедуры // ВыгрузитьСтрокуВXMLПриложение()

&НаСервере
Функция ВыгрузитьОтчетВXMLДляСОНОПриложение(ВыдаватьСообщение = Истина) Экспорт
	
	Объект = ЭтотОбъект;
	Префикс = Прав(Объект.мВыбраннаяФорма,7);
	
	// запишем общие атрибуты (code, version) и создадим элемент form
	Запись = Новый ЗаписьXML;		
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	Запись.ОткрытьФайл(ИмяВременногоФайла,"UTF-8");

	Запись.ЗаписатьОбъявлениеXML();
	
	// Запишем корневой элемент
	Запись.ЗаписатьНачалоЭлемента("fno");
	
	МакетВыгрузки = Объект.РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("ВыгрузкаВXML");

	ТаблОбщиеРеквизиты = Новый ТаблицаЗначений;
	ТаблОбщиеРеквизиты.Колонки.Добавить("ИмяАтрибута");
	ТаблОбщиеРеквизиты.Колонки.Добавить("ЗначениеАтрибута");
	
	ОбластьОбщихРеквизитов = МакетВыгрузки.Область("ОбщиеРеквизиты" + Префикс);
	Для Ном = ОбластьОбщихРеквизитов.Верх По ОбластьОбщихРеквизитов.Низ Цикл
		Строка = ТаблОбщиеРеквизиты.Добавить();
		Строка.ИмяАтрибута 		  = СокрП(МакетВыгрузки.Область(Ном, 1).Текст);
		Строка.ЗначениеАтрибута   = СокрП(МакетВыгрузки.Область(Ном, 2).Текст);		
	КонецЦикла;                           	
	
	// Запишем атрибуты корневого элемента
	Для Каждого Строка Из ТаблОбщиеРеквизиты Цикл
		Запись.ЗаписатьАтрибут(Строка.ИмяАтрибута,Строка.ЗначениеАтрибута);			  
	КонецЦикла;
	
	// создадим таблицу для выгрузки
	ТаблицаВыгрузки = Новый ТаблицаЗначений;
	ТаблицаВыгрузки.Колонки.Добавить("Форма");
	ТаблицаВыгрузки.Колонки.Добавить("Страница");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяАтрибута");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяЯчейки");
	ТаблицаВыгрузки.Колонки.Добавить("КоличествоROW");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяФормы");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяЛиста");
	ТаблицаВыгрузки.Колонки.Добавить("Отображение");
	
	ТаблицаВыгрузки.Колонки.Добавить("КодФормы");
	ТаблицаВыгрузки.Колонки.Добавить("Выгружать");
	ТаблицаВыгрузки.Колонки.Добавить("Многострочность");
	ТаблицаВыгрузки.Колонки.Добавить("ЗаголовокФормы"); 
	ТаблицаВыгрузки.Колонки.Добавить("КоличествоНаЛисте");    
	ТаблицаВыгрузки.Колонки.Добавить("Значение"); 
	
	ОбластьВыгрузки = МакетВыгрузки.Область("Выгрузка" + Префикс);
	ТекущееИмяФормы = Неопределено;
	Для Ном = ОбластьВыгрузки.Верх По ОбластьВыгрузки.Низ Цикл
		Строка = ТаблицаВыгрузки.Добавить();
		Строка.Форма 	       = СокрП(МакетВыгрузки.Область(Ном, 1).Текст);
		Строка.Страница        = СокрП(МакетВыгрузки.Область(Ном, 2).Текст);		
		Строка.ИмяАтрибута     = СокрП(МакетВыгрузки.Область(Ном, 3).Текст);		
		Строка.ИмяЯчейки       = СокрП(МакетВыгрузки.Область(Ном, 4).Текст);		
		Строка.КоличествоROW   = СокрП(МакетВыгрузки.Область(Ном, 5).Текст);		
		Строка.ИмяФормы        = СокрП(МакетВыгрузки.Область(Ном, 6).Текст);		
		Строка.ИмяЛиста        = СокрП(МакетВыгрузки.Область(Ном, 7).Текст);		
		Строка.Отображение     = СокрП(МакетВыгрузки.Область(Ном, 8).Текст);		
                
		НовоеИмяФормы = Строка.ИмяФормы;
		Если НовоеИмяФормы <> ТекущееИмяФормы Тогда
			Форма = Объект.РеквизитФормыВЗначение("мСписокФормБезИерархии").Строки.Найти(Строка.ИмяФормы, "ИмяФормы");
		КонецЕсли;
		Если Форма <> Неопределено Тогда
			Строка.КодФормы  		 = Форма.КодФормы;
			Строка.Выгружать  		 = Форма.Выгружать;
			Строка.Многострочность   = Форма.Многострочность;
			Строка.ЗаголовокФормы    = Форма.ЗаголовокФормы;
			Строка.КоличествоНаЛисте = Форма.КоличествоНаЛисте;
			Строка.Значение  		 = Форма.Значение;
						
		КонецЕсли;
		ТекущееИмяФормы = Строка.ИмяФормы;
	КонецЦикла;                           	
	
	// выгрузка в XML 
	КоличествоСтрокВТаблице = ТаблицаВыгрузки.Количество();
	НомерСтроки = 0;
	
	ТекущаяФорма = Неопределено;
	ТекущаяСтраницаПриложения = Неопределено;
	
	Пока Истина Цикл
		Если НомерСтроки >= КоличествоСтрокВТаблице Тогда
			Прервать;
		КонецЕсли; 
		ВыгрузитьСтрокуВXMLПриложение(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки, ТекущаяФорма, ТекущаяСтраницаПриложения);			
		НомерСтроки = НомерСтроки + 1;                                                                                      		
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();	// </sheet>
	Запись.ЗаписатьКонецЭлемента();	// </sheetGroup>
	Запись.ЗаписатьКонецЭлемента();	// </form> 
	
	Запись.ЗаписатьКонецЭлемента(); // fno
		
	Запись.Закрыть();
	
	// данный текст модуля добавлен для совместимости с СОНО (в СОНО для UTF-8 нет BOM поля)
	ТекстДок = Новый ТекстовыйДокумент;
    //ТекстДок.Прочитать(ИмяФайла,"windows-1251");
	ТекстДок.Прочитать(ИмяВременногоФайла,"windows-1251");
    Строка = ТекстДок.ПолучитьСтроку(1);
    ТекстДок.ЗаменитьСтроку(1,Прав(Строка,СтрДлина(Строка)-3));
	
	//бФайл = Новый Файл(ИмяФайла);
	ВыбФайл = Новый Файл(ИмяВременногоФайла);
    ТекстДок.Записать(ВыбФайл.Путь+ВыбФайл.ИмяБезРасширения+ВыбФайл.Расширение,"windows-1251");
	
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), УникальныйИдентификатор);
	Возврат Адрес;
	
КонецФункции// ВыгрузкаОтчетаВXMLДляСОНО()

&НаСервере
// Записываем значение в поле field из структуры хранения данных
//
Процедура ЗаписатьЗначениеЭлементаПриложение(Запись, СтрокаВыгрузки, СтруктураПараметров = Неопределено)
	
	Запись.ЗаписатьНачалоЭлемента("field");
	Запись.ЗаписатьАтрибут("name",СтрокаВыгрузки.ИмяАтрибута);
	// Выгрузим значение ячейки, если оно есть в форме
	ИмяЯчейки = СтрокаВыгрузки.ИмяЯчейки;
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		//получаем и записываем значение из отчета		
		Если СтрокаВыгрузки.Выгружать = 1 Тогда
			Если СтрокаВыгрузки.Многострочность Тогда
				// определим имя Листа по имени страницы
				ИмяЛиста = СтрокаВыгрузки.ИмяЛиста;
				СтруктураГруппы = Неопределено;
				МногСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, СтрокаВыгрузки.КодФормы); 
				
				Если ЗначениеЗаполнено(ИмяЛиста) И МногСтруктура.Свойство(ИмяЛиста) Тогда            					
					МногСтруктура.Свойство(ИмяЛиста,СтруктураГруппы);				
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнено ""Имя листа"" или ""Имя листа"" указано неверно для ячейки ""%1"" в макете для выгрузки значения в XML!'"), ИмяЯчейки);
					ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ТекстСообщения);
				КонецЕсли;
					
				Если ИмяЯчейки = "НомерСтраницы" Тогда
					КолСтр = Неопределено;
					СтруктураПараметров.Свойство("КоличествоГруппСтраниц", КолСтр);
					Запись.ЗаписатьТекст(XMLСтрока(Формат(КолСтр,"ЧЦ=3; ЧВН=")));
				// заполнения многостроничных данных	
				ИначеЕсли СтрокаВыгрузки.КоличествоНаЛисте = 1 Тогда 
					Если СтруктураГруппы <> Неопределено Тогда
						 НомерЛиста = СтруктураПараметров.НомерЛиста;
						 СтрокаЗначений = СтруктураГруппы.Строки[НомерЛиста];
						 Попытка
							 Строка = СтрокаЗначений[ИмяЯчейки];
						 Исключение
							 Строка = Неопределено;
						 КонецПопытки;
						 Если Строка <> Неопределено Тогда
							 Значение = Строка;
							 Значение = ПривестиЗначениеКФорматуСОНОПриложение(Значение); //СтрокаФорматов);
				    		 Запись.ЗаписатьТекст(XMLСтрока(Значение));
						 КонецЕсли;
					 КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(СтрокаВыгрузки.КоличествоROW) И СтрокаВыгрузки.КоличествоROW <> "0" Тогда  // многострочная часть row
					КоличествоНаЛисте = Число(СтрокаВыгрузки.КоличествоROW);
					НомерЗаписиНаЛисте = Неопределено;
					СтруктураПараметров.Свойство("НомерЗаписи", НомерЗаписиНаЛисте);
					КолСтр = Неопределено;
					СтруктураПараметров.Свойство("КоличествоГруппСтраниц", КолСтр);										
					Если СтруктураГруппы <> Неопределено Тогда
						 ТаблицаСтрокГруппы = СтруктураГруппы.Строки;						 					
						 // рассчитаем индекс строки и проверим есть ли такая строка в таблице данных
						 ИндексСтроки = НомерЗаписиНаЛисте + (КолСтр-1)* КоличествоНаЛисте - 1;
						 Если ИндексСтроки < ТаблицаСтрокГруппы.Количество() Тогда  // строк в таблице может быть меньше, чем выгружается в XML
							 Строка = ТаблицаСтрокГруппы.Получить(ИндексСтроки);
							 Если Строка <> Неопределено Тогда // найдена строка для выгрузки значения
								 Если ТаблицаСтрокГруппы.Колонки.Найти(ИмяЯчейки) <> Неопределено Тогда 
									 Значение = Строка[ИмяЯчейки];
									 Значение = ПривестиЗначениеКФорматуСОНОПриложение(Значение); //СтрокаФорматов);
					    		 	 Запись.ЗаписатьТекст(XMLСтрока(Значение));
								 КонецЕсли;
							 КонецЕсли;
						 КонецЕсли;
					КонецЕсли;
				Иначе // шапка или подвал
					Если СтруктураГруппы <> Неопределено Тогда
						 ОбщиеЭлементыГруппы = СтруктураГруппы.ШапкаИПодвал;
						 Строка = ОбщиеЭлементыГруппы.Найти(ИмяЯчейки,"ИмяОбласти");
						 Если Строка <> Неопределено Тогда
							 Значение = Строка.Значение;
							 Значение = ПривестиЗначениеКФорматуСОНОПриложение(Значение); //СтрокаФорматов);
				    		 Запись.ЗаписатьТекст(XMLСтрока(Значение));
						 Иначе
							 ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найден в структуре хранения данных показатель %1 для формы %2'"), ИмяЯчейки, СтрокаВыгрузки.Форма);
							 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							 
							 Значение = "";
						 КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТаблицаДанных = СтрокаВыгрузки.Значение;
				СтрокаОбласти = ТаблицаДанных.Найти(ИмяЯчейки,"ИмяОбласти");
				Если СтрокаОбласти <> Неопределено Тогда
					Значение = СтрокаОбласти.Значение;
					Значение = ПривестиЗначениеКФорматуСОНОПриложение(Значение); //СтрокаФорматов);
				    Запись.ЗаписатьТекст(XMLСтрока(Значение));
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найдена ячейка ""%1"" для выгрузки значения в XML!'"), ИмяЯчейки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	Запись.ЗаписатьКонецЭлемента();			// </field>

КонецПроцедуры // ЗаписатьЗначениеЭлементаПриложение()

&НаСервере
//Приводит значение к нужному формату для выгрузки в формате XML
//
Функция ПривестиЗначениеКФорматуСОНОПриложение(Значение) 
	
	Если Врег(Значение) = "Х" ИЛИ Врег(Значение) = "X" Тогда
		Значение = Истина;
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Если Значение = Дата('00010101') Тогда
			Значение = "";
		Иначе
			Значение = Лев(Значение,10);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") И Значение = 0 Тогда
		Значение = "";
	КонецЕсли;
	
	Возврат Значение;	
	
КонецФункции // ПривестиЗначениеКФорматуСОНОПриложение()

///////////////////////////////////////////////////////////////////
// ЛОКАЛЬНЫЕ МЕХАНИЗМЫ ОТЧЕТА

&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда		
		мСписокСтруктурныхЕдиниц = Результат;		
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц); 		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере()
	
	РегламентированнаяОтчетность.ДобавитьСтрокуМногострочнойФормы(ЭтотОбъект);
	
	Если КодФормы = "Форма200_03" Тогда
		СтруктураРеквизитовФормы.КоличествоСтруктурныхЕдиницБезНалогоплательщика = СтруктураРеквизитовФормы.КоличествоСтруктурныхЕдиницБезНалогоплательщика + 1;
		
		ИмяЯчейки = "КоличествоПриложений200_03";		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма200", ИмяЯчейки, СтруктураРеквизитовФормы.КоличествоСтруктурныхЕдиницБезНалогоплательщика, Ложь);		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуНаСервере()
	
	РегламентированнаяОтчетность.УдалитьСтрокуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПредыдущаяСтрНаСервере()
	
	ТекущаяСтраница = ТекущаяСтраница - 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СледующаяСтрНаСервере()
	
	ТекущаяСтраница = ТекущаяСтраница + 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, ЭтотОбъект.КодФормы, Ложь,Ложь);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ЭтаФорма.КодФормы);
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	
	
	Форма200РасчетНаСервере(Неопределено, Неопределено,КодФормы);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы)
	
	Если НалоговыйКомитет = Неопределено Тогда
		НалоговыйКомитет = Налогоплательщик.НалоговыйКомитет;
	КонецЕсли;

	ОргСведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(Налогоплательщик, ДатаПодписи, НалоговыйКомитет);
	ОтветственныеЛица = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(Налогоплательщик, ДатаПодписи);
	
	//Если организация не указана то не выводим никаких сведений
	Если ОргСведения = 0 Тогда
		Возврат;
	КонецЕсли;

	// Инициализируем переменные
	РННЮЛ = ""; 	// РНН	
	НаимЮЛПол = ""; // Полное наименование 	
	ИИН_БИН = ""; 	// ИИН_БИН	
	ФИОРук = ""; 	// ФИО руководителя				
	КБЕ					= ""; // КБе
    КодВалюты = "";
	КодНалоговогоОргана = ""; // Код налогового органа	
	
	//КодНалоговогоОргана = ""; // Код налогового органа	
	//АдрЮр = ""; //юр.адрес	
	//АдрФакт = ""; //факт.адрес
	КодНалоговогоОрганаИПН = "";
	КодНалоговогоОрганаОПВиСО = "";
		
	// Получаем данные
	ОргСведения.Свойство("РННЮЛ",     			РННЮЛ);
	ОргСведения.Свойство("БИН_ИИН",   			ИИН_БИН);
	ОргСведения.Свойство("ПолноеНаименование", 	НаимЮЛПол);	
	ОргСведения.Свойство("КБе",					КБе); 	
	ОргСведения.Свойство("КодНалоговогоОргана",	КодНалоговогоОргана);

	ФИОРук = СокрЛП(ОтветственныеЛица.РуководительФИзЛицо);

	Резидент = ?(Лев(КБе,1) = "2", Ложь, Истина);
	
	// Производим операции связанные с текущей формой отчетности	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН", ИИН_БИН);
	
	//Категория плательщика ЕП
	ПорядокОбложенияДоходовРаботников = СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников;
	Если ПорядокОбложенияДоходовРаботников <> Неопределено Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Признак7F", ?(ПорядокОбложенияДоходовРаботников = ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж"), "Х", ""));
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ОргНазв", НаимЮЛПол);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Резидент",   ?(Резидент,    "Х", ""));
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Нерезидент", ?(НЕ Резидент, "Х", ""));
    РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "КодВалюты", "KZT");

	// Разбиваем название организации
	НазваниеОрганизацииДляРазбиения = НаимЮЛПол;
	НачПозиция = 1;
	Для Шаг = 1 По 3 Цикл
		ДлинаСтроки = ЭтотОбъект[ТекущееИмяФормы + "ПолеТабличногоДокументаСтраница1"].Области["ОргНазв" + Шаг].ТипЗначения.КвалификаторыСтроки.Длина;
		НазОрганизации = Сред(НазваниеОрганизацииДляРазбиения, НачПозиция, ДлинаСтроки); 
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ОргНазв" + Шаг, НазОрганизации);
		НачПозиция =НачПозиция + ДлинаСтроки;
	КонецЦикла;
	
	Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Если мСписокСтруктурныхЕдиниц.Количество() = 1 И мСписокСтруктурныхЕдиниц.НайтиПоЗначению(Налогоплательщик) <> Неопределено Тогда
			// у налогоплательщика структурных подразделений нет
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "СтруктурныеПодразделенияИмеютсяНет", "Х");
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "СтруктурныеПодразделенияИмеютсяДа",  "");
		Иначе
			// у налогоплательщика имеется несколько структурных единиц
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "СтруктурныеПодразделенияИмеютсяДа",  "Х");
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "СтруктурныеПодразделенияИмеютсяНет", "");
			
			// необходимо представлять приложение 200.03 по каждому филиалу
			//РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Приложение03", "Х");			
		КонецЕсли;		
	Иначе
		// работы со структурными подразделениями в базе не ведется
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "СтруктурныеПодразделенияИмеютсяНет", "Х");							
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "СтруктурныеПодразделенияИмеютсяДа",  "");
	КонецЕсли;

	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"Руководитель",ФИОРук);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Квартал",СтруктураРеквизитовФормы.мКвартал);
		
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год", 	СтруктураРеквизитовФормы.мГод);
		
	// Дата подачи декларации
	//РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы,"ДатаПодачи",ДатаПодачи);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"ДатаПодачи", ДатаПодписи); 
	
	//Код органа государственных доходов
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "КодНалоговогоОрганаИПН", КодНалоговогоОргана);
	Если НЕ Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда	
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "КодНалоговогоОрганаОПВиСО", КодНалоговогоОргана);
	КонецЕсли;
КонецПроцедуры

//ЕП
&НаСервере
Функция ПолучитьПорядокОбложенияДоходовРаботников(парамНалогоплательщик, парамПериодПо) 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетнаяПолитикаНУ.ПорядокОбложенияДоходовРаботников КАК ПорядокОбложенияДоходовРаботников
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодПо, Организация = &парамНалогоплательщик) КАК УчетнаяПолитикаНУ";
	
	Запрос.УстановитьПараметр("парамНалогоплательщик", парамНалогоплательщик);
	Запрос.УстановитьПараметр("парамПериодПо", парамПериодПо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ПорядокОбложенияДоходовРаботников = Неопределено;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	
    	ПорядокОбложенияДоходовРаботников = ВыборкаДетальныеЗаписи.ПорядокОбложенияДоходовРаботников;	
	
	КонецЦикла;
	
	Возврат ПорядокОбложенияДоходовРаботников;
	
КонецФункции

//Розничный налог
&НаСервере
Функция ОрганизацияЯвляетсяПлательщикомРозничногоНалога(парамНалогоплательщик, парамПериодПо) 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетнаяПолитикаНУ.РежимНалогообложения КАК РежимНалогообложения
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодПо, Организация = &парамНалогоплательщик) КАК УчетнаяПолитикаНУ";
	
	Запрос.УстановитьПараметр("парамНалогоплательщик", парамНалогоплательщик);
	Запрос.УстановитьПараметр("парамПериодПо", парамПериодПо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
    	Возврат Выборка.РежимНалогообложения = Перечисления.РежимНалогообложения.РозничныйНалог;	
	Иначе 
		Возврат Ложь;
	КонецЕсли;

	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметры(ТекущееИмяФормы) Экспорт
	
	Форма = РеквизитФормыВЗначение("мСписокФормБезИерархии").Строки.Найти(ТекущееИмяФормы, "КодФормы");
	
	ДобавленноеПриложение = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений").Найти(ТекущееИмяФормы, "КодФормы");	

	Если Форма.Многострочность = 1 Тогда // заполнение структуры шапки(подвала) для многострочных форм
		
		Если ТекущееИмяФормы = "Форма200_02" ИЛИ ТекущееИмяФормы = "Форма200_05" ИЛИ СтрНайти(ТекущееИмяФормы, "Форма200_06") <> 0 Тогда
			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН", Налогоплательщик.ИдентификационныйНомер);	
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год", 				СтруктураРеквизитовФормы.мГод);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Квартал",				СтруктураРеквизитовФормы.мКвартал);
			
			Если СтрНайти(ТекущееИмяФормы, "Форма200_06") <> 0 Тогда
			
			мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, ТекущееИмяФормы);
			СтруктураГруппы = Неопределено;
			мМногострочнаяСтруктура.Свойство("Страница1", СтруктураГруппы);
			мМногострочнаяСтруктура.Свойство("Страница2", СтруктураГруппы);
			мМногострочнаяСтруктура.Свойство("Страница3", СтруктураГруппы);
			ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "КоличествоПриложений", ТаблицаСтрокГруппы.Количество(), Ложь);			
			
			Если ДобавленноеПриложение <> Неопределено Тогда
				Если ЗначениеЗаполнено(ДобавленноеПриложение.СтруктурнаяЕдиница) Тогда
					РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "БИН_Филиал", ДобавленноеПриложение.СтруктурнаяЕдиница.ИдентификационныйНомер);	
				КонецЕсли;				
			КонецЕсли;
			
		КонецЕсли;
			
		Иначе
			
			// страница 1
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "РНННалогоплательщика", 	 Налогоплательщик.РНН, 						Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год", 				 	 СтруктураРеквизитовФормы.мГод,				Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Квартал", 			 	 СтруктураРеквизитовФормы.мКвартал,			Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИННалогоплательщика", Налогоплательщик.ИдентификационныйНомер, 	Ложь, Истина);
			// страница 2
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "РНННалогоплательщика1", 	 Налогоплательщик.РНН, 						Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год1",					 СтруктураРеквизитовФормы.мГод,				Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Квартал1", 				 СтруктураРеквизитовФормы.мКвартал, 		Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИННалогоплательщика1",Налогоплательщик.ИдентификационныйНомер, 	Ложь, Истина);
			// страница 3                                                                                                                          	
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "РНННалогоплательщика2", 	 Налогоплательщик.РНН, 						Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год2", 					 СтруктураРеквизитовФормы.мГод, 			Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Квартал2", 				 СтруктураРеквизитовФормы.мКвартал, 		Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИННалогоплательщика2",Налогоплательщик.ИдентификационныйНомер,   Ложь, Истина);
			
			// общие сведения
			ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, "Форма200");
			
			НаимЮЛПол	  = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "ОргНазв"); // Полное наименование
			ФИОРук 		  = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "Руководитель"); // ФИО руководителя
			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ОргНазв", 	 НаимЮЛПол, Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Руководитель", ФИОРук, 	Ложь, Истина);
			//РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ДатаПодачи", 	ДатаПодачи, Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ДатаПодачи", 	ДатаПодписи, Ложь, Истина);
			
			// Разобьем наименование организации для выгрузки в XML
			НазваниеОрганизацииДляРазбиения = НаимЮЛПол;
			НачПозиция = 1;
			ДлинаСтроки = 27;
			Для Шаг = 1 По 2 Цикл
				НазОрганизации = Сред(НазваниеОрганизацииДляРазбиения, НачПозиция, ДлинаСтроки); 						
				РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ОргНазв" + Шаг, НазОрганизации, Ложь, Истина);
				НачПозиция = НачПозиция + ДлинаСтроки;
				ДлинаСтроки = 36;
			КонецЦикла;
			
			// перенесем вид декларации
			ВидРасчетаПервоначальный = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "Первоначальный");
			ВидРасчетаОчередной		 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "Очередной");
			ВидРасчетаДополнительный = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "Дополнительный");
			ВидРасчетаПоУведомлению	 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "ПоУведомлению");
			ВидРасчетаЛиквидационный = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "Ликвидационный");
			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Первоначальный", 	ВидРасчетаПервоначальный, 	Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Очередной", 		ВидРасчетаОчередной, 		Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Дополнительный", 	ВидРасчетаДополнительный, 	Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ПоУведомлению", 	ВидРасчетаПоУведомлению, 	Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Ликвидационный", 	ВидРасчетаЛиквидационный, 	Ложь, Истина);
			
			НомерУведомления = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"НомерУведомления");
			ДатаУведомления  = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"ДатаУведомления");
			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "НомерУведомления", 	НомерУведомления, 	Ложь, Истина);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ДатаУведомления", 	ДатаУведомления, 	Ложь, Истина);
		КонецЕсли;
				
	Иначе

		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ИИН_БИН", 			Налогоплательщик.ИдентификационныйНомер);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Год", 				СтруктураРеквизитовФормы.мГод);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Квартал",				СтруктураРеквизитовФормы.мКвартал);
		
	КонецЕсли;
	
	//// форма могла быть сохранена на более ранних релизах 
	//ТаблицаДанных = Форма.Значение;
	//Если НЕ ТаблицаДанных.Найти("ЧисленностьИРасходыЛицСИнвалидностью", "ИмяОбласти") = Неопределено Тогда
	//	
	//	Если СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета >= Дата('20220701') Тогда
	//		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма200_01", "ЧисленностьИРасходыЛицСИнвалидностью", НСтр("ru = 'Раздел. Численность и расходы по оплате труда работников - лиц с инвалидностью'"));
	//		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма200_01", "Заголовок200_01_012", НСтр("ru = 'Численность работников - лиц с инвалидностью'"));
	//		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма200_01", "Заголовок200_01_013", НСтр("ru = 'Удельный вес численности работников - лиц с инвалидностью в общей численности работников'"));
	//		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма200_01", "Заголовок200_01_014", НСтр("ru = 'Удельный вес расходов по оплате труда работников - лиц с инвалидностью в общих расходах по оплате труда'"));
	//	Иначе	
	//		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма200_01", "ЧисленностьИРасходыЛицСИнвалидностью", НСтр("ru = 'Раздел. Численность и расходы по оплате труда работников - инвалидов'"));
	//		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма200_01", "Заголовок200_01_012", НСтр("ru = 'Численность работников - инвалидов'"));
	//		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма200_01", "Заголовок200_01_013", НСтр("ru = 'Удельный вес численности работников - инвалидов в общей численности работников'"));
	//		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма200_01", "Заголовок200_01_014", НСтр("ru = 'Удельный вес расходов по оплате труда работников - инвалидов в общих расходах по оплате труда'"));
	//	КонецЕсли;
	//	
	//КонецЕсли;

	Если ТекущееИмяФормы = Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7) Тогда 
		
		//устанавливаем значения по умолчанию
		СписокРасчетов = Элементы.СписокРасчетов.СписокВыбора.Получить(1).Значение;
		ЗаполнитьВидРасчета("Очередной");

		//заполним основные сведения об организации
		ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы);
		
	КонецЕсли;

КонецПроцедуры	

&НаСервере
//Процедура выполняет выбор процедуры расчета.
//ВыборРасчета выполняется при восстановлении данных, при изменении поля табличного документа
//
//Параметры:    ТекФорма - имя текущей формы
//              Индекс - индекс строки для многострочной формы
//              Показатель - имя ячейки, откуда была вызвана процедура расчета многострочной
//                           формы, без указания номера строки (например, без "__1")
//
Процедура ВыборРасчета(ТекФорма, Индекс = Неопределено, Показатель = Неопределено) Экспорт
	Если ТекФорма = "Форма200" Тогда
		Форма200РасчетНаСервере(Индекс, Показатель, ТекФорма);
	ИначеЕсли ТекФорма = "Форма200_01" Тогда
		Форма200_01РасчетНаСервере(Индекс, Показатель, ТекФорма);
	ИначеЕсли ТекФорма = "Форма200_02" Тогда
		Форма200_02РасчетНаСервере(Индекс, Показатель);
	ИначеЕсли ТекФорма = "Форма200_03" Тогда
		Форма200_03РасчетНаСервере(Индекс, Показатель, ТекФорма);
	КонецЕсли;		
КонецПроцедуры // ВыборРасчета()

&НаСервере
Процедура СформироватьПризнакиФормыИПередатьИтогиНаСервере()

	РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтаФорма, Кодформы);

КонецПроцедуры

&НаКлиенте
// Процедура отображает отчет "Регистр НУ по ИПН и СН" 
// с учетом параметров формирования регламентированного отчета
//  
// Параметры: ДатаНачала - обозначает дату начала расшифровки - с начала года или с начала периода отчета
//            СтруктурнаяЕдиницаДляОтбора - для расшифровки формы 200.03
//
Процедура ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(ДатаНачала, ДатаОкончания, СтруктурнаяЕдиницаДляОтбора = Неопределено, СтруктураФизЛицоДляОтбора = Неопределено, Режим = "БезДетализации", ПризнакНеРезиденства = Ложь, Приложение200_02 = Ложь, Приложение200_05 = Ложь, Приложение200_06 = Ложь, ЯчейкаСОтбором = Ложь, ЯчейкаЕП = Ложь)

	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоМесяца(ДатаНачала));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецМесяца(ДатаОкончания));
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВключитьИП", Истина);	
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВключитьПолучателейАлиментов", ПризнакАлиментов);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Налогоплательщик", 			  Налогоплательщик);
	
	ВидОтчета = "РегистрНалоговогоУчетаПоИПНиСН";
	             
	//Если Приложение200_05 Тогда // если расшифровка вызвана из формы 200.05
	//	ВидОтчета = "АнализНачисленийУдержанийПрочихЛиц";
	//	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьТолькоКонтрагентов", Истина);	
	//КонецЕсли;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВидОтчета", ВидОтчета);
	
	СписокСтруктурныхЕдиниц = Новый СписокЗначений;
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиницаДляОтбора) Тогда
		СписокСтруктурныхЕдиниц = мСписокСтруктурныхЕдиниц;
	Иначе
		СписокСтруктурныхЕдиниц.Добавить(СтруктурнаяЕдиницаДляОтбора);
	КонецЕсли;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", СписокСтруктурныхЕдиниц);
	ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПредставлениеСпискаОрганизаций", ПредставлениеСпискаОрганизаций);
	
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Если СтруктураФизЛицоДляОтбора <> Неопределено Тогда
		Если ТипЗнч(СтруктураФизЛицоДляОтбора) = Тип("Структура") Тогда
			ФизЛицоДляОтбора = Неопределено;
			СтруктураФизЛицоДляОтбора.Свойство("ФизЛицо",ФизЛицоДляОтбора);
			Если ФизЛицоДляОтбора <> Неопределено Тогда
				ВидСравненияОтбор = СтруктураФизЛицоДляОтбора.ВидСравнения;
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ФизЛицо",  ФизЛицоДляОтбора, ВидСравненияОтбор);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Не Приложение200_02 ИЛИ (Приложение200_02 И Не ПризнакИП) Тогда 
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ИндивидуальныйПредпринимательАдвокатЧастныйНотариус", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	// отбор по стране гражданства
	СписокСтран = Новый СписокЗначений;
	СписокСтран.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторСтранМира.Казахстан"));
	
	Если ПризнакНеРезиденства Тогда // если расшифровка вызвана из формы 200.02
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Страна",  СписокСтран, ВидСравненияКомпоновкиДанных.НеВСписке);
	КонецЕсли;
	
	//Отбор по физ лицам для ЕП
	ПорядокОбложенияЕП = ?(СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж"), Истина, Ложь); 
	
	Если Приложение200_05 И НЕ ПорядокОбложенияЕП Тогда // если расшифровка вызвана из формы 200.05
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Страна",  СписокСтран, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли; 
	
	Если ПорядокОбложенияЕП Тогда 
		
		Если Приложение200_02 ИЛИ Приложение200_05 ИЛИ Приложение200_06 Тогда
			МассивФизЛиц = Новый Массив;

			Если Приложение200_02 Тогда
				МассивФизЛиц = ПолучитьМассивФизЛиц("Форма200_02");
			ИначеЕсли Приложение200_05 Тогда
				МассивФизЛиц = ПолучитьМассивФизЛиц("Форма200_05");
			ИначеЕсли Приложение200_06 Тогда				
				МассивФизЛиц = ПолучитьМассивФизЛиц(КодФормы);
			КонецЕсли;
			
			СписокФизЛиц = Новый СписокЗначений;	
			СписокФизЛиц.ЗагрузитьЗначения(МассивФизЛиц);
				
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ФизЛицо",  СписокФизЛиц, ВидСравненияКомпоновкиДанных.ВСписке);
			
		Иначе 
			
			Если ЯчейкаСОтбором Тогда
				
				МассивФизЛиц = Новый Массив;
				СписокФизЛиц = Новый СписокЗначений;
				
				Если ЯчейкаЕП Тогда
					
					МассивФизЛиц = ПолучитьМассивФизЛиц("Форма200_06");   	
					МассивФизЛиц1 = ПолучитьМассивФизЛицИзДопПриложений("Форма200_06"); 
					
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФизЛиц, МассивФизЛиц1);			
					СписокФизЛиц.ЗагрузитьЗначения(МассивФизЛиц);     
					
				Иначе			
					
					МассивФизЛиц = ПолучитьМассивФизЛиц("Форма200_02");		
					МассивФизЛиц1 = ПолучитьМассивФизЛиц("Форма200_05"); 
					
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФизЛиц, МассивФизЛиц1);
					СписокФизЛиц.ЗагрузитьЗначения(МассивФизЛиц);
					
				КонецЕсли;  
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ФизЛицо",  СписокФизЛиц, ВидСравненияКомпоновкиДанных.ВСписке);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	ГруппировкиРасшифровки = Новый Массив();
	
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "Налогоплательщик", НСтр("ru = 'Налогоплательщик'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "МесяцНалоговогоПериода", НСтр("ru = 'Месяц налог. периода'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "НалоговыйКомитет", НСтр("ru = 'Налоговый комитет'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "СтруктурнаяЕдиница", НСтр("ru = 'Структурная единица'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "ФизЛицо", НСтр("ru = 'Работник'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	
	Если НЕ Режим = "БезДетализации" Тогда
		ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "Регистратор", НСтр("ru = 'Документ движения (регистратор)'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	КонецЕсли;   	

	ЗаполняемыеНастройки = Новый Структура("Группировка, Показатели, ДополнительныеПоля, ГруппировкиРасшифровки",
											Истина, Истина, Истина, ГруппировкиРасшифровки);
											
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ЗаполняемыеНастройки",ЗаполняемыеНастройки );	
	//ПараметрыФормы.Вставить("ВидОтчета",ВидОтчета);	
	
	
	ОткрытьФорму("Отчет.РегистрНалоговогоУчетаПоИПНиСН.Форма.ФормаОтчета", ПараметрыФормы,, Истина);
	
КонецПроцедуры // ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН()

&НаКлиенте
Процедура ПослеВводаСтраницы(Значение, Параметры) Экспорт
	
	Если НЕ Значение = Неопределено Тогда  
		
		ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
		Если ТекФорма = Неопределено Тогда
			ВсегоСтраниц = 1;
		Иначе
			ВсегоСтраниц = ТекФорма.ВсегоСтраниц;
		КонецЕсли;		
			
		Если Значение = 0 Тогда
			ТекущаяСтраница = 1;
		ИначеЕсли Значение > ВсегоСтраниц Тогда
			ТекущаяСтраница = ВсегоСтраниц;
		Иначе
			ТекущаяСтраница = Значение;				
		КонецЕсли;
		
		ПослеВводаСтраницыНаСервере();
		  
	КонецЕсли;
	           	
КонецПроцедуры

&НаСервере
Процедура ПослеВводаСтраницыНаСервере()
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаЗначения(Значение, Параметры) Экспорт
	
	Если НЕ Значение = Неопределено Тогда         	
		ПроверятьЦифрыВСтроке = Ложь;
		ПроверитьСтатусФизЛица = Ложь;
		
		Если Параметры.Свойство("ПроверятьЦифрыВСтроке" , ПроверятьЦифрыВСтроке) И ПроверятьЦифрыВСтроке Тогда
			Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Значение) Тогда				
				ТекстСообщения = НСтр("ru = 'Значение содержит нецифровые символы, значение будет очищено'");							  
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);				
				Значение = "";
			КонецЕсли;         		
		КонецЕсли;
		
		Если Параметры.Свойство("ПроверитьСтатусФизЛица" , ПроверитьСтатусФизЛица) И ПроверитьСтатусФизЛица Тогда
			Если Значение > 4 Или Значение = 0 Тогда 
				ПоказатьПредупреждение(, НСтр("ru = 'Введено неправильное значение статуса. Статус может принимать значение от 1 до 4.'"));
				Значение = "";
			КонецЕсли;	
		КонецЕсли;
	
		
		Параметры.Область.Значение = Значение;			
		ПередатьЗначениеВМногострочнуюСтруктуру(Параметры.ИмяСтраницы, Параметры.Область.Имя, Значение, Параметры.Расчет);       
	КонецЕсли;
	           	
КонецПроцедуры

&НаСервере 
Процедура ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ИмяЯчейки, Значение, Расчет = Ложь)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, ИмяСтраницы, ИмяЯчейки, Значение, Расчет);				
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Форма 200.00

&НаСервере
Функция Форма200РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
	ТаблицаПоМесяцам = Новый ТаблицаЗначений;
	
	ТаблицаПоМесяцам.Колонки.Добавить("КодСтроки", 				ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаПоМесяцам.Колонки.Добавить("МесяцНалоговогоПериода", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаПоМесяцам.Колонки.Добавить("Значение", 				ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));

	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("КодСтроки", 		ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаРезультат.Колонки.Добавить("Значение1Мес", 	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Значение2Мес", 	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Значение3Мес", 	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("ЗначениеКвартал", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));	
	
	ТаблицаРезультат.Индексы.Добавить("КодСтроки");

	Запрос = Новый Запрос;
	
	мПризнакСистемыСотрудниковЗУП20 = СтруктураРеквизитовФормы.мПризнакСистемыСотрудниковЗУП20;
	
	Запрос.УстановитьПараметр("парамПериодС", 				НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парам1Мес", 					НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парам2Мес", 					ДобавитьМесяц(НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), 1));
	Запрос.УстановитьПараметр("парам3Мес", 					ДобавитьМесяц(НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), 2));
	Запрос.УстановитьПараметр("парамПериодПо", 				КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПослеПериодПо", 		КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) + 1);
	Запрос.УстановитьПараметр("парамНалогоплательщик",	 	Налогоплательщик);
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());

	// если налогоплательщик - ИП, то исключим данные самого индивидуального предпринимателя
	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Налогоплательщик.ИндивидуальныйПредприниматель);
	Иначе
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Неопределено);
	КонецЕсли;
	
	МТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МТ;
			
	// Получим данные учетной политики
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации,
	|	УчетнаяПолитикаНУ.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ,
	|	УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН,
	|	УчетнаяПолитикаНУ.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя,
	|	УчетнаяПолитикаНУ.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника,
	|	УчетнаяПолитикаНУ.УпрощенныйУчетИПНиОПВ	
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодПо, Организация = &парамНалогоплательщик) КАК УчетнаяПолитикаНУ
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОтражениеПоПериодуРегистрации 				= Выборка.ОтражениеПоПериодуРегистрации;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Выборка.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ;
		ОрганизацияЯвляетсяПлательщикомСН			= Выборка.ОрганизацияЯвляетсяПлательщикомСН;
		КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = Выборка.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя;
		КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника = Выборка.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника;
		УпрощенныйУчетИПНиОПВ = Выборка.УпрощенныйУчетИПНиОПВ; 
	Иначе
		ОтражениеПоПериодуРегистрации 				= Истина;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Ложь;
		ОрганизацияЯвляетсяПлательщикомСН			= Ложь;
		КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = 0;
		КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника = 0;
		УпрощенныйУчетИПНиОПВ = Истина; 
	КонецЕсли;
	
	// если не используется удельный вес, но используется отражение по периоду действия суммы налогов/взносов/отчислений необходимо отражать по периоду действия
	Запрос.УстановитьПараметр("ОтражатьПоПериодуДействия", УпрощенныйУчетИПНиОПВ И НЕ ОтражениеПоПериодуРегистрации);

	// Получим необходимые данные 
	
	// ряд строк заполняются только в случае наличия у налогового агента структурных подразделений	
	Если мСписокСтруктурныхЕдиниц.Количество() = 1 И мСписокСтруктурныхЕдиниц.НайтиПоЗначению(Налогоплательщик) <> Неопределено Тогда
		ЕстьСтруктурныеЕдиницыУНалогоплательщика = Ложь;
	Иначе
		ЕстьСтруктурныеЕдиницыУНалогоплательщика = Истина;
	КонецЕсли;
	
	//ЕП
	ОрганизацияЯвляетсяПлательщикомЕП = ?(СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж"), Истина, Ложь);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТ_ДатыПериодовГода
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря  КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &парамПериодС И &парамПериодПо
	|;
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ
    |	Периоды.Период КАК Период,
    |	ФизическиеЛица.Ссылка КАК ФИО
	|ПОМЕСТИТЬ ВТ_Периоды
    |ИЗ
    |	ВТ_ДатыПериодовГода КАК Периоды
    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
    |		ПО (ИСТИНА)
    |ГДЕ
    |	ФизическиеЛица.ЭтоГруппа = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
    |	Период,
    |	ФИО
	|;
	|/////////////////////////////////////////////////
	|ВЫБРАТЬ
    |	Периоды.Период КАК Период,
    |	Периоды.ФИО КАК ФИО,
    |	МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСреза
	|ПОМЕСТИТЬ ВТ_ГражданствоФизЛицСрезПоследних 
    |	ИЗ
    |		ВТ_Периоды КАК Периоды
    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
    |			ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(ГражданствоФизЛиц.Период, МЕСЯЦ))
    |				И Периоды.ФИО = ГражданствоФизЛиц.ФизЛицо
    |		
    |СГРУППИРОВАТЬ ПО
    |	Периоды.Период,
    |	Периоды.ФИО
	|ИНДЕКСИРОВАТЬ ПО
    |	ПериодСреза,
    |	ФИО
	|;
	|/////////////////////////////////////////////////////
	|ВЫБРАТЬ
    |	ГражданствоФизЛицСрезПоследних.Период КАК Период,
    |	ГражданствоФизЛицСрезПоследних.ФИО КАК ФИО
	|ПОМЕСТИТЬ ВТ_ИтогГражданство
    |	ИЗ
    |		ВТ_ГражданствоФизЛицСрезПоследних КАК ГражданствоФизЛицСрезПоследних
    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
    |			ПО ГражданствоФизЛицСрезПоследних.ПериодСреза = ГражданствоФизЛиц.Период
    |				И ГражданствоФизЛицСрезПоследних.ФИО = ГражданствоФизЛиц.ФизЛицо
    |	ГДЕ
    |		(НЕ ВЫБОР
    |					КОГДА ГражданствоФизЛиц.Страна ЕСТЬ NULL 
    |						ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
    |					ИНАЧЕ ГражданствоФизЛиц.Страна
    |				КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
	|;
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ИтогГражданство.Период КАК Период,
    |	ИтогГражданство.ФИО КАК ФИО
    |ПОМЕСТИТЬ ВТ_Гражданство
    |ИЗ
    |	ВТ_ИтогГражданство КАК ИтогГражданство
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	Период,
    |	ФИО";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();

	/////////////////////////////////////////////////////////
	// Раздел. Исчисление индивидуального подоходного налога

	// Численность работников и количество СП
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаботникиОрганизацийСрезПоследних." +?(мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТ_СписокРаботников
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&парамПериодС,
	|			Организация = &парамНалогоплательщик
	|				ИЛИ ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц)) КАК РаботникиОрганизацийСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизаций." +?(мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ФизЛицо КАК ФизЛицо
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	(РаботникиОрганизаций.Организация = &парамНалогоплательщик
	|			ИЛИ РаботникиОрганизаций.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц))
	|	И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И РаботникиОрганизаций.Период МЕЖДУ &парамПериодС И &парамПериодПо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РаботникиОрганизацийСрезПоследних." +?(мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ФизЛицо
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СписокРаботников.Физлицо КАК Физлицо,
	|	ВЫБОР
	|			КОГДА ИПНСведенияОДоходах.СтруктурнаяЕдиница <> ИПНСведенияОДоходах.Налогоплательщик
	|				ТОГДА ИПНСведенияОДоходах.СтруктурнаяЕдиница
	|			ИНАЧЕ NULL
	|		КОНЕЦ КАК СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|ВЫБОР
	|	КОГДА ИПНСведенияОДоходах.СтруктурнаяЕдиница <> ИПНСведенияОДоходах.Налогоплательщик
	|			И ИПНСведенияОДоходах.СтруктурнаяЕдиница.ГоловнаяОрганизация = ИПНСведенияОДоходах.Налогоплательщик
	|		ТОГДА ИПНСведенияОДоходах.СтруктурнаяЕдиница
	|	ИНАЧЕ NULL
	|КОНЕЦ КАК ФилиалГоловнойОрганизации
	|ПОМЕСТИТЬ ВТ_СписокРаботниковСПериодом
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|				И ФизЛицо <> &парамИндивидуальныйПредприниматель
	|				И ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ИПНСведенияОДоходах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокРаботников КАК ВТ_СписокРаботников
	|		ПО (ВТ_СписокРаботников.Физлицо = ИПНСведенияОДоходах.ФизЛицо) 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ВТ_СписокРаботников.Физлицо КАК Физлицо,
	|	ВЫБОР
	|			КОГДА ЕПСведенияОДоходах.СтруктурнаяЕдиница <> ЕПСведенияОДоходах.Налогоплательщик
	|				ТОГДА ЕПСведенияОДоходах.СтруктурнаяЕдиница
	|			ИНАЧЕ NULL
	|		КОНЕЦ КАК СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(ЕПСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|	КОГДА ЕПСведенияОДоходах.СтруктурнаяЕдиница <> ЕПСведенияОДоходах.Налогоплательщик
	|			И ЕПСведенияОДоходах.СтруктурнаяЕдиница.ГоловнаяОрганизация = ЕПСведенияОДоходах.Налогоплательщик
	|		ТОГДА ЕПСведенияОДоходах.СтруктурнаяЕдиница
	|	ИНАЧЕ NULL
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.ЕПСведенияОДоходах.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|				И ФизЛицо <> &парамИндивидуальныйПредприниматель
	|				И ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ЕПСведенияОДоходах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокРаботников КАК ВТ_СписокРаботников
	|		ПО (ВТ_СписокРаботников.Физлицо = ЕПСведенияОДоходах.ФизЛицо)
	|;
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_СписокРаботниковСПериодом.Физлицо) КАК ЧисленностьРаботников,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_СписокРаботниковСПериодом.СтруктурнаяЕдиница) КАК КоличествоСтруктурныхЕдиницБезНалогоплательщика,
	|	ВТ_СписокРаботниковСПериодом.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР 
	|				КОГДА НЕ ВТ_Гражданство.ФИО ЕСТЬ NULL
	|					ТОГДА ВТ_Гражданство.ФИО
	|				ИНАЧЕ NULL
	|			КОНЕЦ) КАК ЧисленностьИностранцев
	|ИЗ
	|	ВТ_СписокРаботниковСПериодом КАК ВТ_СписокРаботниковСПериодом
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство
	|		ПО (ВТ_СписокРаботниковСПериодом.МесяцНалоговогоПериода = ВТ_Гражданство.Период)
	|			И (ВТ_СписокРаботниковСПериодом.Физлицо = ВТ_Гражданство.ФИО)	
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СписокРаботниковСПериодом.МесяцНалоговогоПериода";
	
		
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ЧисленностьРаботников = 0;
	ЧисленностьИностранцев = 0;
	
	Пока Выборка.Следующий() Цикл
		
		// численность работников
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "ЧисленностьРаботников";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.ЧисленностьРаботников;
		// численность работников
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "ЧисленностьИностранцев";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.ЧисленностьИностранцев;			
		
	КонецЦикла;
	
	// Сумма индивидуального подоходного налога, подлежащего перечислению в бюджет
	// с выделением суммы по головной организации и филиалам
	
	Запрос.Текст = "
	|// ИПН, подлежащий перечислению
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА &ОтражатьПоПериодуДействия
	|				ТОГДА ИПНРасчетыСБюджетом.МесяцНалоговогоПериода
	|			ИНАЧЕ ИПНРасчетыСБюджетом.Период
	|		КОНЕЦ, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(ИПНРасчетыСБюджетом.Налог) КАК СуммаИПНПодлежащегоПеречислению,
	|	ИПНРасчетыСБюджетом.СтруктурнаяЕдиница,
	|	СУММА(ВЫБОР
	|			КОГДА ИПНРасчетыСБюджетом.СтруктурнаяЕдиница = ИПНРасчетыСБюджетом.Налогоплательщик
	|				ТОГДА ИПНРасчетыСБюджетом.Налог
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаИПНПодлежащегоПеречислениюЗаГоловнуюОрганизацию,
	|	СУММА(ВЫБОР
	|			КОГДА ИПНРасчетыСБюджетом.СтруктурнаяЕдиница <> ИПНРасчетыСБюджетом.Налогоплательщик
	|				ТОГДА ИПНРасчетыСБюджетом.Налог
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаИПНПодлежащегоПеречислениюПоФилиалам
	|	
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|ГДЕ
	|	ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик
	|	И ИПНРасчетыСБюджетом.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
   	|	И (ИПНРасчетыСБюджетом.Период МЕЖДУ &парамПериодС И &парамПериодПо
   	|				И НЕ &ОтражатьПоПериодуДействия
   	|			ИЛИ ИПНРасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
   	|				И &ОтражатьПоПериодуДействия)
	|	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|	И ИПНРасчетыСБюджетом.ФизЛицо <> &парамИндивидуальныйПредприниматель	
	|	И (ВЫБОР
	|		КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|			ТОГДА НЕ ИПНРасчетыСБюджетом.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|		ИНАЧЕ ИСТИНА
	|	  КОНЕЦ)
	|	И ИПНРасчетыСБюджетом.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА &ОтражатьПоПериодуДействия
	|				ТОГДА ИПНРасчетыСБюджетом.МесяцНалоговогоПериода
	|			ИНАЧЕ ИПНРасчетыСБюджетом.Период
	|		КОНЕЦ, МЕСЯЦ),
	|	ИПНРасчетыСБюджетом.СтруктурнаяЕдиница
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		// сумма ИПН, подлежащая перечислению в бюджет
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_200_00_001";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.СуммаИПНПодлежащегоПеречислениюЗаГоловнуюОрганизацию; // исключаем СП, показываемые в 200.03

	КонецЦикла;

	/////////////////////////////////////////////////////////
	// Раздел. Исчисление обязательных пенсионных взносов
	
	// Сумма ОПВ, подлежащих перечислению
	// с выделение суммы по головной организации и филиалам
	
	Запрос.Текст = "
	|// ОПВ, подлежащие перечислению
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА &ОтражатьПоПериодуДействия
	|				ТОГДА ОПВПодлежитПеречислениюВФонды.МесяцНалоговогоПериода
	|			ИНАЧЕ ОПВПодлежитПеречислениюВФонды.Период
	|		КОНЕЦ, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(ОПВПодлежитПеречислениюВФонды.Взнос) КАК СуммаОПВПодлежащихПеречислению,
	|	СУММА(ВЫБОР
	|			КОГДА ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница = ОПВПодлежитПеречислениюВФонды.Налогоплательщик
	|				ТОГДА ОПВПодлежитПеречислениюВФонды.Взнос
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОПВПодлежащихПеречислениюЗаГоловнуюОрганизацию,
	|	СУММА(ВЫБОР
	|			КОГДА ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница <> ОПВПодлежитПеречислениюВФонды.Налогоплательщик
	|				ТОГДА ОПВПодлежитПеречислениюВФонды.Взнос
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОПВПодлежащихПеречислениюПоФилиалам
	|ИЗ                         
	|	РегистрНакопления.ОПВПодлежитПеречислениюВФонды КАК ОПВПодлежитПеречислениюВФонды                                 
	|ГДЕ
	|	ОПВПодлежитПеречислениюВФонды.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
   	|	И (ОПВПодлежитПеречислениюВФонды.Период МЕЖДУ &парамПериодС И &парамПериодПо
   	|				И НЕ &ОтражатьПоПериодуДействия
   	|			ИЛИ ОПВПодлежитПеречислениюВФонды.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
   	|				И &ОтражатьПоПериодуДействия)
	|	И ОПВПодлежитПеречислениюВФонды.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|	И ОПВПодлежитПеречислениюВФонды.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И (ВЫБОР
	|		КОГДА ОПВПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|			ТОГДА НЕ ОПВПодлежитПеречислениюВФонды.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|		ИНАЧЕ ИСТИНА
	|	  КОНЕЦ)
	|	И ОПВПодлежитПеречислениюВФонды.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА &ОтражатьПоПериодуДействия
	|				ТОГДА ОПВПодлежитПеречислениюВФонды.МесяцНалоговогоПериода
	|			ИНАЧЕ ОПВПодлежитПеречислениюВФонды.Период
	|		КОНЕЦ, МЕСЯЦ)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// сумма ОПВ, подлежащих перечислению
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_200_00_002";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.СуммаОПВПодлежащихПеречислениюЗаГоловнуюОрганизацию; // исключаем СП, показываемые в 200.03

	КонецЦикла;
	/////////////////////////////////////////////////////////
	// Раздел. Исчисление обязательных профессиональных пенсионных взносов
	
	// Сумма ОППВ, подлежащих перечислению
	// с выделение суммы по головной организации и филиалам
	Если СтруктураРеквизитовФормы.ВедетсяУчетОППВ Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ОППВРасчетыСФондами.Взнос) КАК ОППВ,
		|	СУММА(ВЫБОР
		|			КОГДА ОППВРасчетыСФондами.СтруктурнаяЕдиница = ОППВРасчетыСФондами.Налогоплательщик
		|				ТОГДА ОППВРасчетыСФондами.Взнос
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОППВЗаГоловнуюОрганизацию,
		|	СУММА(ВЫБОР
		|			КОГДА ОППВРасчетыСФондами.СтруктурнаяЕдиница <> ОППВРасчетыСФондами.Налогоплательщик
		|				ТОГДА ОППВРасчетыСФондами.Взнос
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОППВПоФилиалам
		|ИЗ
		|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами                                                  
		|ГДЕ
		|	ОППВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И ОППВРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|	И ОППВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		|	И ОППВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОППВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ОППВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ОППВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|	И ОППВРасчетыСФондами.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
		|	ОППВРасчетыСФондами.СтруктурнаяЕдиница
		|";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл			
			
			// сумма социальных отчислений
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_00_003";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.ОППВЗаГоловнуюОрганизацию; // исключаем СП, показываемые в 200.03 			
		КонецЦикла;
	КонецЕсли;
    	
	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		//200.00.004 Сумма ОПВ, подлежащих перечислению
		// собственно за ИП
		
		Запрос.Текст = "
		|// ОПВ, подлежащие перечислению
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ОПВПодлежитПеречислениюВФонды.Взнос) КАК СуммаОПВПодлежащихПеречислению,
		|	СУММА(ВЫБОР
		|			КОГДА ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница = ОПВПодлежитПеречислениюВФонды.Налогоплательщик
		|				ТОГДА ОПВПодлежитПеречислениюВФонды.Взнос
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаОПВПодлежащихПеречислениюЗаГоловнуюОрганизацию,
		|	СУММА(ВЫБОР
		|			КОГДА ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница <> ОПВПодлежитПеречислениюВФонды.Налогоплательщик
		|				ТОГДА ОПВПодлежитПеречислениюВФонды.Взнос
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаОПВПодлежащихПеречислениюПоФилиалам
		|ИЗ                         
		|	РегистрНакопления.ОПВПодлежитПеречислениюВФонды КАК ОПВПодлежитПеречислениюВФонды
		|ГДЕ
		|	ОПВПодлежитПеречислениюВФонды.Налогоплательщик = &парамНалогоплательщик
		|	И ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|	И ОПВПодлежитПеречислениюВФонды.Период МЕЖДУ &парамПериодС И &парамПериодПо
		|	И ОПВПодлежитПеречислениюВФонды.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОПВПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
		|	И ОПВПодлежитПеречислениюВФонды.ФизЛицо = &парамИндивидуальныйПредприниматель
		|	И ОПВПодлежитПеречислениюВФонды.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, МЕСЯЦ)
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// сумма ОПВ, подлежащих перечислению
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_00_004";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.СуммаОПВПодлежащихПеречислениюЗаГоловнуюОрганизацию; // исключаем СП, показываемые в 200.03   
			
		КонецЦикла;
		
	КонецЕсли;	
	/////////////////////////////////////////////////////////
	// Раздел. Исчисление социального налога с применением ставок, установленных п. 1, 3 ст. 358 Налогового кодекса
	// (общеустановленный режим)
	
	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо И ОрганизацияЯвляетсяПлательщикомСН Тогда

	
		// сумма исчисленного налога
		 
		Запрос.Текст = "ВЫБРАТЬ
		               |	НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		               |	СУММА(СНИсчисленный.Налог) КАК Налог,
		               |	СУММА(ВЫБОР
		               |			КОГДА СНИсчисленный.СтруктурнаяЕдиница = СНИсчисленный.Налогоплательщик
		               |				ТОГДА СНИсчисленный.Налог
		               |			ИНАЧЕ 0
		               |		КОНЕЦ) КАК НалогЗаГоловнуюОрганизацию,
		               |	СУММА(ВЫБОР
		               |			КОГДА СНИсчисленный.СтруктурнаяЕдиница <> СНИсчисленный.Налогоплательщик
		               |				ТОГДА СНИсчисленный.Налог
		               |			ИНАЧЕ 0
		               |		КОНЕЦ) КАК НалогПоФилиалам
		               |ИЗ
		               |	РегистрНакопления.СНИсчисленный КАК СНИсчисленный                                              
		               |ГДЕ
		               |	СНИсчисленный.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		               |	И СНИсчисленный.Налогоплательщик = &парамНалогоплательщик
		               |	И СНИсчисленный.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
					   |	И СНИсчисленный.Активность
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			// сумма исчисленного налога
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_00_005";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.НалогЗаГоловнуюОрганизацию; // исключаем СП, показываемые в 200.03			
		
		КонецЦикла;
				              
	КонецЕсли;
	
	/////////////////////////////////////////////////////////
	// Раздел. Исчисление социального налога с применением ставки, установленной п. 2 ст. 358 Налогового кодекса
	// (ИП на общеустановленном режиме - 2 МРП за себя и 1 МРП за наемных работников)
	
	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И ОрганизацияЯвляетсяПлательщикомСН Тогда
		
		// возможно, что перешли на общеустановленный режим с упрощенного в середине налогового года, 
		// поэтому найдем по учетной политике НУ дату, с которой применяется общеустановленный режим
			
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	МИНИМУМ(УчетнаяПолитикаНУ.Период) КАК Период
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНУ
		|ГДЕ
		|	УчетнаяПолитикаНУ.Организация = &парамНалогоплательщик
		|	И УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН = ИСТИНА
		|	И УчетнаяПолитикаНУ.Период <= &парамПериодПо
		|";
			
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаНачалаРаботыНаОбщеустановленномРежиме = Макс(НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), Выборка.Период);
		Иначе
			ДатаНачалаРаботыНаОбщеустановленномРежиме = НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		КонецЕсли;
			
		Запрос.УстановитьПараметр("парамДатаНачалаРаботыНаОбщеустановленномРежиме", ДатаНачалаРаботыНаОбщеустановленномРежиме);
									
		// сумма налога
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|							КОГДА СНИсчисленный.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|								ТОГДА СНИсчисленный.ФизЛицо
		|							ИНАЧЕ NULL
		|						КОНЕЦ) КАК ЧисленностьНаемныхРаботников,
		|	СУММА(СНИсчисленный.Налог) КАК Налог,
		|	СУММА(ВЫБОР
		|			КОГДА СНИсчисленный.ФизЛицо = &парамИндивидуальныйПредприниматель
		|				ТОГДА СНИсчисленный.Налог
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НалогЗаИП,
		|	СУММА(ВЫБОР
		|			КОГДА СНИсчисленный.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|				ТОГДА СНИсчисленный.Налог
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НалогЗаРаботников
		|ИЗ
		|	РегистрНакопления.СНИсчисленный КАК СНИсчисленный                                               
		|ГДЕ
		|	СНИсчисленный.МесяцНалоговогоПериода МЕЖДУ &парамДатаНачалаРаботыНаОбщеустановленномРежиме И &парамПериодПо
		|	И СНИсчисленный.Налогоплательщик = &парамНалогоплательщик
		|	И СНИсчисленный.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
		|	И СНИсчисленный.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ)		
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл			
						
			// Всего сумма налога
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_00_007";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.Налог;
			
		КонецЦикла;
			
	КонецЕсли;
	
	/////////////////////////////////////////////////////////
	// Раздел. Исчисление социальных отчислений
	
	// Сумма социальных отчислений, в том числе по головной организации и по филиалам
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(СОРасчетыСФондами.Отчисление) КАК СоциальныеОтчисления,
	|	СУММА(ВЫБОР
	|			КОГДА СОРасчетыСФондами.СтруктурнаяЕдиница = СОРасчетыСФондами.Налогоплательщик
	|				ТОГДА СОРасчетыСФондами.Отчисление
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СоциальныеОтчисленияЗаГоловнуюОрганизацию,
	|	СУММА(ВЫБОР
	|			КОГДА СОРасчетыСФондами.СтруктурнаяЕдиница <> СОРасчетыСФондами.Налогоплательщик
	|				ТОГДА СОРасчетыСФондами.Отчисление
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СоциальныеОтчисленияПоФилиалам
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами                                                 
	|ГДЕ
	|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И СОРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И СОРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И СОРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// сумма социальных отчислений
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_200_00_008";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.СоциальныеОтчисленияЗаГоловнуюОрганизацию; // исключаем СП, показываемые в 200.03
	
	КонецЦикла;
	
	// Сумма социальных отчислений ИП в свою пользу
	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(СОРасчетыСФондами.Отчисление) КАК СоциальныеОтчисления,
		|	СУММА(ВЫБОР
		|			КОГДА СОРасчетыСФондами.СтруктурнаяЕдиница = СОРасчетыСФондами.Налогоплательщик
		|				ТОГДА СОРасчетыСФондами.Отчисление
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СоциальныеОтчисленияЗаГоловнуюОрганизацию,
		|	СУММА(ВЫБОР
		|			КОГДА СОРасчетыСФондами.СтруктурнаяЕдиница <> СОРасчетыСФондами.Налогоплательщик
		|				ТОГДА СОРасчетыСФондами.Отчисление
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СоциальныеОтчисленияПоФилиалам
		|ИЗ
		|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами                                                
		|ГДЕ
		|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И СОРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|	И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		|	И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И СОРасчетыСФондами.ФизЛицо = &парамИндивидуальныйПредприниматель
		|	И СОРасчетыСФондами.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
		|";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// сумма социальных отчислений
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_00_009";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.СоциальныеОтчисленияЗаГоловнуюОрганизацию; // исключаем СП, показываемые в 200.03
			
		КонецЦикла;
	КонецЕсли;
	
	// Сумма отчислений ОСМС, в том числе по головной организации 
	
	Запрос.Текст = "ВЫБРАТЬ
				   |	НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	               |	СУММА(ООСМСРасчетыСФондами.Отчисление) КАК ООСМС,
	               |	СУММА(ВЫБОР
	               |			КОГДА ООСМСРасчетыСФондами.СтруктурнаяЕдиница = ООСМСРасчетыСФондами.Налогоплательщик
	               |				ТОГДА ООСМСРасчетыСФондами.Отчисление
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ООСМСЗаГоловнуюОрганизацию
				   |ИЗ
	               |	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
	               |ГДЕ
	               |	ООСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	               |	И ООСМСРасчетыСФондами.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	               |	И ООСМСРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	               |	И ООСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |	И ООСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	               |	И ООСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
				   |	И ООСМСРасчетыСФондами.Активность
				   |	" + ?(ОрганизацияЯвляетсяПлательщикомСН, "", "И ООСМСРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель") + "
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
				   |	ООСМСРасчетыСФондами.СтруктурнаяЕдиница
				   |";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// сумма социальных отчислений
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_200_00_010";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.ООСМСЗаГоловнуюОрганизацию; // исключаем СП, показываемые в 200.03
	
	КонецЦикла;
	
	// Сумма взносов ОСМС, с доходов работников
    
	Запрос.Текст = "ВЫБРАТЬ
				   |	НАЧАЛОПЕРИОДА(ВЫБОР
				   |			КОГДА &ОтражатьПоПериодуДействия
				   |				ТОГДА ВОСМСПодлежитПеречислениюВФонды.МесяцНалоговогоПериода
				   |			ИНАЧЕ ВОСМСПодлежитПеречислениюВФонды.Период
				   |		КОНЕЦ, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	               |	СУММА(ВОСМСПодлежитПеречислениюВФонды.Взнос) КАК ВОСМС,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница = ВОСМСПодлежитПеречислениюВФонды.Налогоплательщик
	               |				ТОГДА ВОСМСПодлежитПеречислениюВФонды.Взнос
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ВОСМСЗаГоловнуюОрганизацию
				   |ИЗ
	               |	РегистрНакопления.ВОСМСПодлежитПеречислениюВФонды КАК ВОСМСПодлежитПеречислениюВФонды
	               |ГДЕ
	               |	ВОСМСПодлежитПеречислениюВФонды.Налогоплательщик = &парамНалогоплательщик
	               |	И ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
				   |	И (ВОСМСПодлежитПеречислениюВФонды.Период МЕЖДУ &парамПериодС И &парамПериодПо
				   |				И НЕ &ОтражатьПоПериодуДействия
				   |			ИЛИ ВОСМСПодлежитПеречислениюВФонды.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
				   |				И &ОтражатьПоПериодуДействия)
	               |	И ВОСМСПодлежитПеречислениюВФонды.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |	И ВОСМСПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
   				   |	И ВОСМСПодлежитПеречислениюВФонды.ФизЛицо <> &парамИндивидуальныйПредприниматель
				   |	И (ВЫБОР
				   |		КОГДА ВОСМСПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.Контрагенты
				   |			ТОГДА НЕ ВОСМСПодлежитПеречислениюВФонды.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
				   |		ИНАЧЕ ИСТИНА
				   |	  КОНЕЦ)
				   |	И ВОСМСПодлежитПеречислениюВФонды.Активность
	               |
	               |СГРУППИРОВАТЬ ПО
				   |	НАЧАЛОПЕРИОДА(ВЫБОР
				   |			КОГДА &ОтражатьПоПериодуДействия
				   |				ТОГДА ВОСМСПодлежитПеречислениюВФонды.МесяцНалоговогоПериода
				   |			ИНАЧЕ ВОСМСПодлежитПеречислениюВФонды.Период
				   |		КОНЕЦ, МЕСЯЦ)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// сумма социальных отчислений
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_200_00_011";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.ВОСМСЗаГоловнуюОрганизацию; // исключаем СП, показываемые в 200.03
	
    КонецЦикла;
    
    // Сумма взносов ОСМС в свою пользу
   	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
    	Запрос.Текст = "ВЫБРАТЬ
    	               |	НАЧАЛОПЕРИОДА(ВОСМСПодлежитПеречислениюВФонды.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
    	               |	СУММА(ВОСМСПодлежитПеречислениюВФонды.Взнос) КАК ВОСМС,
    	               |	СУММА(ВЫБОР
    	               |			КОГДА ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница = ВОСМСПодлежитПеречислениюВФонды.Налогоплательщик
    	               |				ТОГДА ВОСМСПодлежитПеречислениюВФонды.Взнос
    	               |			ИНАЧЕ 0
    	               |		КОНЕЦ) КАК ВОСМСЗаГоловнуюОрганизацию
    				   |ИЗ
    	               |	РегистрНакопления.ВОСМСПодлежитПеречислениюВФонды КАК ВОСМСПодлежитПеречислениюВФонды
    	               |ГДЕ
    	               |	ВОСМСПодлежитПеречислениюВФонды.Налогоплательщик = &парамНалогоплательщик
    	               |	И ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
    	               |	И ВОСМСПодлежитПеречислениюВФонды.Период МЕЖДУ &парамПериодС И &парамПериодПо
    	               |	И ВОСМСПодлежитПеречислениюВФонды.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
    	               |	И ВОСМСПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
       				   |	И ВОСМСПодлежитПеречислениюВФонды.ФизЛицо = &парамИндивидуальныйПредприниматель
    				   |	И (ВЫБОР
    				   |		КОГДА ВОСМСПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.Контрагенты
    				   |			ТОГДА НЕ ВОСМСПодлежитПеречислениюВФонды.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
    				   |		ИНАЧЕ ИСТИНА
    				   |	  КОНЕЦ)
					   |	И ВОСМСПодлежитПеречислениюВФонды.Активность
    	               |
    	               |СГРУППИРОВАТЬ ПО
    	               |	НАЧАЛОПЕРИОДА(ВОСМСПодлежитПеречислениюВФонды.Период, МЕСЯЦ)";
    	Выборка = Запрос.Выполнить().Выбрать();
    	
    	Пока Выборка.Следующий() Цикл
    		
    		// сумма социальных отчислений
    		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
    		НоваяСтрока.КодСтроки = "s_200_00_012";
    		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
    		НоваяСтрока.Значение 				= Выборка.ВОСМСЗаГоловнуюОрганизацию; // исключаем СП, показываемые в 200.03
    	
        КонецЦикла; 
	КонецЕсли;    	
	
	//ЕП	
	Если ОрганизацияЯвляетсяПлательщикомЕП Тогда
	
		// Сумма единого платежа с доходов работников, подлежащего перечислению	
		
		Запрос.Текст =   "ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ЕПРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ЕПРасчетыСФондами.СуммаПлатежа) КАК ЕП,
		|	СУММА(ВЫБОР
		|			КОГДА ЕПРасчетыСФондами.СтруктурнаяЕдиница = ЕПРасчетыСФондами.Налогоплательщик
		|				ТОГДА ЕПРасчетыСФондами.СуммаПлатежа
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЕПЗаГоловнуюОрганизацию
		|ИЗ
		|	РегистрНакопления.ЕПРасчетыСФондами КАК ЕПРасчетыСФондами
		|ГДЕ
		|	ЕПРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И ЕПРасчетыСФондами.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
		|	И ЕПРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		|	И ЕПРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ЕПРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ЕПРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ЕПРасчетыСФондами.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ЕПРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
		|	ЕПРасчетыСФондами.СтруктурнаяЕдиница";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// сумма социальных отчислений
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_00_014";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.ЕПЗаГоловнуюОрганизацию;	
			
		КонецЦикла;  
	
	КонецЕсли;
	
	// Сумма ОПВР, в том числе по головной организации 
	Запрос.Текст = "ВЫБРАТЬ
				   |	НАЧАЛОПЕРИОДА(ОПВРРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	               |	СУММА(ОПВРРасчетыСФондами.Взнос) КАК ОПВР,
	               |	СУММА(ВЫБОР
	               |			КОГДА ОПВРРасчетыСФондами.СтруктурнаяЕдиница = ОПВРРасчетыСФондами.Налогоплательщик
	               |				ТОГДА ОПВРРасчетыСФондами.Взнос
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ОПВРЗаГоловнуюОрганизацию
				   |ИЗ
	               |	РегистрНакопления.ОПВРРасчетыСФондами КАК ОПВРРасчетыСФондами
	               |ГДЕ
	               |	ОПВРРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	               |	И ОПВРРасчетыСФондами.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	               |	И ОПВРРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	               |	И ОПВРРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |	И ОПВРРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	               |	И ОПВРРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
				   |	И ОПВРРасчетыСФондами.Активность
				   // в связи с отстуствием ячейки по ОПВР за ИП свою пользу заполняем общую сумму ОПВР
				   //|	И ОПВРРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НАЧАЛОПЕРИОДА(ОПВРРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
				   |	ОПВРРасчетыСФондами.СтруктурнаяЕдиница
				   |";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// сумма социальных отчислений
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_200_00_013";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.ОПВРЗаГоловнуюОрганизацию; // исключаем СП, показываемые в 200.03
	
	КонецЦикла;

	// свернем строки по-месячно
	ТаблицаПоМесяцам.Свернуть("КодСтроки, МесяцНалоговогоПериода", "Значение");
	
	// рассчитываем итоговые графы за квартал и с начала года
	
	Начало1Мес = НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Начало2Мес = ДобавитьМесяц(Начало1Мес, 1);
	Начало3Мес = ДобавитьМесяц(Начало2Мес, 1);
	
	Для Каждого СтрокаТЗ Из ТаблицаПоМесяцам Цикл
			
		СтрокаРезультат = ТаблицаРезультат.Найти(СтрокаТЗ.КодСтроки, "КодСтроки");
		Если СтрокаРезультат = Неопределено Тогда
			СтрокаРезультат = ТаблицаРезультат.Добавить();
			СтрокаРезультат.КодСтроки = СтрокаТЗ.КодСтроки;
		КонецЕсли;
		
		Если СтрокаТЗ.МесяцНалоговогоПериода = Начало1Мес Тогда
			СтрокаРезультат.Значение1Мес = СтрокаРезультат.Значение1Мес + СтрокаТЗ.Значение;
		ИначеЕсли СтрокаТЗ.МесяцНалоговогоПериода = Начало2Мес Тогда
			СтрокаРезультат.Значение2Мес = СтрокаРезультат.Значение2Мес + СтрокаТЗ.Значение;
		ИначеЕсли СтрокаТЗ.МесяцНалоговогоПериода = Начало3Мес Тогда
			СтрокаРезультат.Значение3Мес = СтрокаРезультат.Значение3Мес + СтрокаТЗ.Значение;
		КонецЕсли;
		
		// квартальные итоги
		Если СтрокаТЗ.МесяцНалоговогоПериода >= Начало1Мес Тогда
			СтрокаРезультат.ЗначениеКвартал = СтрокаРезультат.ЗначениеКвартал + СтрокаТЗ.Значение;
		КонецЕсли; 		
		
	КонецЦикла;
	
		
	Если ТаблицаРезультат.Количество() = 0 и ВыдаватьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данные для заполнения формы 200.00 за отчетный период отсутствуют...'"));
	КонецЕсли;
				     	
	Возврат ТаблицаРезультат;		 
	
КонецФункции // Форма200РассчитатьДанныеФормы()

&НаКлиенте
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма200ЗаполнитьАвто(Перезаполнить = Ложь) 
	
	Состояние("Расчет формы 200.00");		
	
	Форма200ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры // Форма200ЗаполнитьАвто()

&НаСервере
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма200ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь) 
	
	ТекИмяФормы = "Форма200";
	Очистить(ТекИмяФормы, Истина);
	
	Если Перезаполнить Тогда	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Расчет основной формы приложения 200.00'"));
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПолучитьПорядокОбложенияДоходовРаботников(Налогоплательщик, КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)); 
	
	Форма200_01ЗаполнитьАвтоНаСервере(); 
	
	Форма200_02ЗаполнитьАвтоНаСервере();
	
	Форма200_03ЗаполнитьАвтоНаСервере();  
	
	Форма200_05ЗаполнитьАвтоНаСервере(); 	
	//ЕП
	Форма200_06ЗаполнитьАвтоНаСервере();
                          	
	//////////////////////////////////////////
	// Раздел. Расчетные показатели        	

	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ТекИмяФормы);

	ТаблицаРезультат = Форма200РассчитатьДанныеФормы();
	
	Для Каждого СтрокаРезультат Из ТаблицаРезультат Цикл

		Если СтрокаРезультат.КодСтроки = "КоличествоСтруктурныхЕдиницБезНалогоплательщика" Тогда
			Если СтруктураРеквизитовФормы.КоличествоСтруктурныхЕдиницБезНалогоплательщика <> 0 Тогда

				ИмяЯчейки = "КоличествоПриложений200_03";
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки, СтруктураРеквизитовФормы.КоличествоСтруктурныхЕдиницБезНалогоплательщика, Форма200ПолеТабличногоДокументаСтраница1);
						
			КонецЕсли;  
									
		ИначеЕсли СтрокаРезультат.КодСтроки = "ЧисленностьРаботников" Тогда
		
			Для Н = 1 По 3 Цикл
				ИмяЯчейки = "ЧисленностьРаботников" + Н;
				ИтогЗнач = Окр(СтрокаРезультат["Значение" + Н + "Мес"]);
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки, ИтогЗнач, Форма200ПолеТабличногоДокументаСтраница1);
				мСтруктураЗначений.Вставить("ЧисленностьРаботников" + Н, РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "ЧисленностьРаботников" + Н));
			КонецЦикла;
			
		ИначеЕсли СтрокаРезультат.КодСтроки = "ЧисленностьИностранцев" Тогда
			
			Для Н = 1 По 3 Цикл
				ИмяЯчейки = "ЧисленностьИностранцев" + Н;
				ИтогЗнач = Окр(СтрокаРезультат["Значение" + Н + "Мес"]);
				РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки, ИтогЗнач, Форма200ПолеТабличногоДокументаСтраница1);
				мСтруктураЗначений.Вставить("ЧисленностьИностранцев" + Н, РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "ЧисленностьИностранцев" + Н));	
			КонецЦикла;
			
		ИначеЕсли СтрокаРезультат.КодСтроки = "s_200_00_001_A"  или СтрокаРезультат.КодСтроки = "s_200_00_001_B" 
			  или СтрокаРезультат.КодСтроки = "s_200_00_001_C"  или СтрокаРезультат.КодСтроки = "s_200_00_001_D" 
			  или СтрокаРезультат.КодСтроки = "s_200_00_001_E" Тогда

			ИмяЯчейки = СтрокаРезультат.КодСтроки;
			ИтогЗнач = Окр(СтрокаРезультат.Значение1Мес + СтрокаРезультат.Значение2Мес + СтрокаРезультат.Значение3Мес);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки, ИтогЗнач, Форма200ПолеТабличногоДокументаСтраница1);
			
		ИначеЕсли СтрокаРезультат.КодСтроки = "s_200_00_014" Тогда
			  
			ИмяЯчейки = СтрокаРезультат.КодСтроки;
			
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки + "_1", СтрокаРезультат.Значение1Мес,    Форма200ПолеТабличногоДокументаСтраница1);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки + "_2", СтрокаРезультат.Значение2Мес,    Форма200ПолеТабличногоДокументаСтраница1);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки + "_3", СтрокаРезультат.Значение3Мес,    Форма200ПолеТабличногоДокументаСтраница1);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки + "_4", СтрокаРезультат.ЗначениеКвартал, Форма200ПолеТабличногоДокументаСтраница1);		  
			  
		Иначе // все остальные ячейки обрабатываются одинаковым образом
			
			// округленное значение за квартал может оказаться больше суммы значений по месяцам
			// проверим и добавим к значению 1, т.к. максимальная погрешность при округлении может быть 1,47.
			Если Окр(СтрокаРезультат.ЗначениеКвартал) > Окр(СтрокаРезультат.Значение1Мес) + Окр(СтрокаРезультат.Значение2Мес)
				+ Окр(СтрокаРезультат.Значение3Мес) Тогда
				Если Окр(СтрокаРезультат.Значение1Мес) <> 0 Тогда
					СтрокаРезультат.Значение1Мес = СтрокаРезультат.Значение1Мес + 1;
				ИначеЕсли Окр(СтрокаРезультат.Значение2Мес) <> 0 Тогда
					СтрокаРезультат.Значение2Мес = СтрокаРезультат.Значение2Мес + 1;
				ИначеЕсли Окр(СтрокаРезультат.Значение3Мес) <> 0 Тогда
					СтрокаРезультат.Значение3Мес = СтрокаРезультат.Значение3Мес + 1;
				КонецЕсли;
			КонецЕсли;
			
			ИмяЯчейки = СтрокаРезультат.КодСтроки;
			
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки + "_1", Окр(СтрокаРезультат.Значение1Мес),    Форма200ПолеТабличногоДокументаСтраница1);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки + "_2", Окр(СтрокаРезультат.Значение2Мес),    Форма200ПолеТабличногоДокументаСтраница1);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки + "_3", Окр(СтрокаРезультат.Значение3Мес),    Форма200ПолеТабличногоДокументаСтраница1);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки + "_4", Окр(СтрокаРезультат.ЗначениеКвартал), Форма200ПолеТабличногоДокументаСтраница1);
		КонецЕсли;

	КонецЦикла;
	
	//ЕП
	ОрганизацияЯвляетсяПлательщикомЕП = ?(СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж"), Истина, Ложь);
	
	Если ОрганизацияЯвляетсяПлательщикомЕП Тогда   
		
		ДобавленныеПриложения200_06 = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений").Скопировать(Новый Структура("КодИсходнойФормы", "Форма200_06"));
		КоличествоДобавленных200_06 = ДобавленныеПриложения200_06.Количество(); 
		
		ИмяЯчейки = "КоличествоПриложений200_06";
		// Количество 200.06
		Значение200_06 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "Приложение06");
		
		Если Значение200_06 = "Х" Тогда	
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки, КоличествоДобавленных200_06 + 1, Форма200ПолеТабличногоДокументаСтраница1);
		Иначе
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки, КоличествоДобавленных200_06, Форма200ПолеТабличногоДокументаСтраница1);
		КонецЕсли;
		
	КонецЕсли;
	
	//+
	// Заполняем поле "Представленные приложения"
	//ТекущаяСтрока = СписокФормДерева.ПолучитьЭлементы()[0];
	Для Каждого Форма Из СписокФормДерева.ПолучитьЭлементы()[0].ПолучитьЭлементы() Цикл            
		ИмяОбласти = "Приложение" + Прав(Форма.КодФормы,2);
		Если Форма200ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяОбласти) <> Неопределено Тогда 			
			СтрокиФорм = мСписокФормБезИерархии.ПолучитьЭлементы();			
			Для Каждого Строка Из СтрокиФорм Цикл
				Если Строка.КодФормы = Форма.КодФормы Тогда					
					Если Строка.Выгружать = 1 Тогда
						РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяОбласти, "Х", Форма200ПолеТабличногоДокументаСтраница1);
					Иначе
						РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяОбласти, "", Форма200ПолеТабличногоДокументаСтраница1);
					КонецЕсли;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 			
		КонецЕсли;
	КонецЦикла;
	//-     
	
	Если СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников <> Неопределено Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, "Признак7F", ?(СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж"), "Х", ""), Форма200ПолеТабличногоДокументаСтраница1);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);			
	
	// передаем в качестве признака перезаполнения Истина, т.к. это главная форма
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, ТекИмяФормы, Истина);
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);
	
	Модифицированность = Истина;
		
КонецПроцедуры // Форма200ЗаполнитьАвто()

&НаСервере
Процедура Форма200РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки, ТекИмяФормы)
	
	Перем СтруктураГруппы;

	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, ИмяЯчейки, ЗначениеЯчейки);
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ТекИмяФормы);			

	//Рассчитаем ячейки 4 и 5 (за квартал и с начала года)
	Для Н = 1 По 14 Цикл
				
		Если Н = 1 Тогда
			НомерСтраницы = "1";
		ИначеЕсли Н = 11 ИЛИ Н = 12 ИЛИ Н = 13 ИЛИ Н = 14 Тогда
			НомерСтраницы = "3";
		Иначе
			НомерСтраницы = "2";			
		КонецЕсли;
		
		Номер = Формат(Н,"ЧЦ=2; ЧДЦ=0; ЧВН=");
		// графа 4
		ИтогЗначение = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_200_00_0" + Номер + "_1")
						+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_200_00_0" + Номер + "_2")
						+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_200_00_0" + Номер + "_3");
					
		Строка = ТаблицаДанных.Найти("s_200_00_0" + Номер + "_4","ИмяОбласти");
		Если Строка <> Неопределено Тогда
			Строка.Значение = ИтогЗначение;
		КонецЕсли;
		
		ЭтаФорма["Форма200ПолеТабличногоДокументаСтраница"+ НомерСтраницы].Области["s_200_00_0" + Номер + "_4"].Значение = ИтогЗначение;
		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ("s_200_00_0" + Номер + "_4"), ИтогЗначение);
		
    КонецЦикла;
	
	Если ИмяЯчейки = "НомерУведомления"
		ИЛИ ИмяЯчейки = "ДатаУведомления" Тогда 
		// передаем номер и дату уведомления в форму 200.03
		НомерУведомления = ЭтаФорма["Форма200ПолеТабличногоДокументаСтраница1"].Области.НомерУведомления.Значение;
		ДатаУведомления  = ЭтаФорма["Форма200ПолеТабличногоДокументаСтраница1"].Области.ДатаУведомления.Значение;
		
		мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, "Форма200_03");
		мМногострочнаяСтруктура.Свойство("Страница1" ,СтруктураГруппы);
		ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
		
		//передаем новые значенич в МС и таб.документ
		Для Каждого СтрокаТаблицы Из ТаблицаСтрокГруппы Цикл
			СтрокаТаблицы.НомерУведомления = НомерУведомления;
			СтрокаТаблицы.ДатаУведомления = ДатаУведомления;
			
			ОбластьНомерУведомления = Форма200_03ПолеТабличногоДокументаСтраница1.Области.Найти("НомерУведомления" + "__" + Строка(ТаблицаСтрокГруппы.Индекс(СтрокаТаблицы)+1));
			Если ОбластьНомерУведомления <> Неопределено Тогда 
				ОбластьНомерУведомления.Значение = НомерУведомления;
			КонецЕсли;
			
			ОбластьДатаУведомления = Форма200_03ПолеТабличногоДокументаСтраница1.Области.Найти("ДатаУведомления" + "__" + Строка(ТаблицаСтрокГруппы.Индекс(СтрокаТаблицы)+1));
			Если ОбластьДатаУведомления <> Неопределено Тогда 
				ОбластьДатаУведомления.Значение = ДатаУведомления;
			КонецЕсли;
			
		КонецЦикла;
		
		//обновим таблицы многострочной структуры
		РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, "Форма200_03", мМногострочнаяСтруктура);
	КонецЕсли;

	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура Форма200Расчет(ИмяЯчейки, ЗначениеЯчейки)
	
	Форма200РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки, КодФормы)
	
КонецПроцедуры

&НаКлиенте
Процедура Форма200ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Область)
	
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма200Расчет(Область.Имя, Область.Значение);
	КонецЕсли;
	    	    
	Модифицированность = Истина;
	
КонецПроцедуры	

&НаКлиенте
Процедура Форма200ПолеТабличногоДокументаВыбор(Область)

	ИмяОбласти = Область.Имя;	
	
	Если (Найти(ИмяОбласти, "Признак7A") > 0)
		ИЛИ (Найти(ИмяОбласти, "Признак7B") > 0)
		ИЛИ (Найти(ИмяОбласти, "Признак7C") > 0)
		ИЛИ (Найти(ИмяОбласти, "Признак7D") > 0)
		ИЛИ (Найти(ИмяОбласти, "Признак7E") > 0)  
		ИЛИ (Найти(ИмяОбласти, "Признак7F") > 0)
	Тогда
	 
	 	Если Область.Значение = "Х" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "Х";
		КонецЕсли;    
		
		Если (Найти(ИмяОбласти, "Признак7F") > 0) Тогда
			СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ?(Область.Значение = "Х", ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж"), Неопределено); 	
		КонецЕсли;	
			
		Форма200ПолеТабличногоДокументаВыборНаСервере(ИмяОбласти, Область.Значение);
		
	КонецЕсли;
	
	Если (Найти(ИмяОбласти, "Резидент") > 0)
	 ИЛИ (Найти(ИмяОбласти, "Нерезидент") > 0) Тогда
	 	Если Область.Значение = "Х" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "Х";
        КонецЕсли;	
		Форма200ПолеТабличногоДокументаВыборНаСервере(ИмяОбласти, Область.Значение);
	КонецЕсли;
    
    Если (Найти(ИмяОбласти, "УчастникМФЦА") > 0) Тогда
	 	Если Область.Значение = "Х" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "Х";
		КонецЕсли;		
		Форма200ПолеТабличногоДокументаВыборНаСервере(ИмяОбласти, Область.Значение);
		
	КонецЕсли;

	
КонецПроцедуры
 
&НаСервере
Процедура Форма200ПолеТабличногоДокументаВыборНаСервере(ИмяОбласти, ЗначениеОбласти)
    
    Если Найти(ИмяОбласти, "Резидент") > 0 Тогда
        РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, "Форма200", "Нерезидент", ?(ЗначениеОбласти = "Х", "", "Х"));
    ИначеЕсли Найти(ИмяОбласти, "Нерезидент") > 0 Тогда
        РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, "Форма200", "Резидент", ?(ЗначениеОбласти = "Х", "", "Х"));
    КонецЕсли;
    
    РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяОбласти, ЗначениеОбласти, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура Форма200Расшифровка(ИмяЯчейки)
	
	ДатаНачала = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ДатаОкончания = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
		
	Если Прав(ИмяЯчейки,1) = "1" Тогда // месяц 1
		ДатаНачала = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
		ДатаОкончания = КонецМесяца(ДатаНачала);
	ИначеЕсли Прав(ИмяЯчейки,1) = "2" Тогда // месяц 
		ДатаНачала = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,1);
		ДатаОкончания = КонецМесяца(ДатаНачала);
	ИначеЕсли Прав(ИмяЯчейки,1) = "3" Тогда // месяц 
		ДатаНачала = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,2);
		ДатаОкончания = КонецМесяца(ДатаНачала);
	ИначеЕсли Прав(ИмяЯчейки,1) = "4" Тогда // месяц 
		ДатаНачала = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
		ДатаОкончания = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	КонецЕсли;
	
	// Если в строках по самому ИП, то установим отбор по физ лицу	
	Если ПолучитьЗначениеРеквизита(Налогоплательщик, "ЮрФизЛицо") = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		Если Лев(ИмяЯчейки,12) = "s_200_00_004" 
			ИЛИ Лев(ИмяЯчейки,12) = "s_200_00_009" 
            ИЛИ Лев(ИмяЯчейки,12) = "s_200_00_012" Тогда
			// ячейки данных по ИП
			
			СтруктураПоФизЛицу = Новый Структура;
			СтруктураПоФизЛицу.Вставить("ФизЛицо", ПолучитьЗначениеРеквизита(Налогоплательщик, "ИндивидуальныйПредприниматель"));
			СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);									
		ИначеЕсли Лев(ИмяЯчейки,12) <> "s_200_00_007"
				И Лев(ИмяЯчейки,12) <> "s_200_00_013" Тогда	 
			СтруктураПоФизЛицу = Новый Структура;
			СтруктураПоФизЛицу.Вставить("ФизЛицо", ПолучитьЗначениеРеквизита(Налогоплательщик, "ИндивидуальныйПредприниматель"));
			СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.НеРавно);									
		КонецЕсли;			
	КонецЕсли;
	
	// в основной форме показываем данные только головного предприятия
	ОтборПоСП = Неопределено;
	Если Лев(ИмяЯчейки,12) = "s_200_00_001"
		ИЛИ Лев(ИмяЯчейки,12) = "s_200_00_002"
		ИЛИ Лев(ИмяЯчейки,12) = "s_200_00_003"
		ИЛИ Лев(ИмяЯчейки,12) = "s_200_00_005"
		ИЛИ Лев(ИмяЯчейки,12) = "s_200_00_008"
		ИЛИ Лев(ИмяЯчейки,12) = "s_200_00_010"
		ИЛИ Лев(ИмяЯчейки,12) = "s_200_00_011" Тогда
		
		ОтборПоСП = Налогоплательщик;
		// в этих строках показываются данные по голове (за исключением СП, отображаемых в 200.03)
	КонецЕсли;
	
	ЯчейкаСОтбором = НЕ Лев(ИмяЯчейки,12) = "s_200_00_003"
		И НЕ Лев(ИмяЯчейки,12) = "s_200_00_004"
		И НЕ Лев(ИмяЯчейки,12) = "s_200_00_005" 
		И НЕ Лев(ИмяЯчейки,12) = "s_200_00_006" 
		И НЕ Лев(ИмяЯчейки,12) = "s_200_00_007"
		И НЕ Лев(ИмяЯчейки,12) = "s_200_00_009"
		И НЕ Лев(ИмяЯчейки,12) = "s_200_00_012";
	
	ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(ДатаНачала, ДатаОкончания, ОтборПоСП, СтруктураПоФизЛицу,,,,,,ЯчейкаСОтбором,?(Лев(ИмяЯчейки,12) = "s_200_00_014",Истина,Ложь));
	
КонецПроцедуры // Форма200Расшифровка()


////////////////////////////////////////////////////////////////////////////////
// Форма 200.01

&НаСервере
Функция Форма200_01РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
	ТаблицаПоМесяцам = Новый ТаблицаЗначений;
	
	ТаблицаПоМесяцам.Колонки.Добавить("КодСтроки", 				ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаПоМесяцам.Колонки.Добавить("МесяцНалоговогоПериода", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаПоМесяцам.Колонки.Добавить("Значение", 				ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));

	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("КодСтроки", 			ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаРезультат.Колонки.Добавить("Значение1Мес", 		ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Значение2Мес", 		ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Значение3Мес", 		ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("ЗначениеКвартал", 	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("ЗначениеСНачГода", 	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ТаблицаРезультат.Индексы.Добавить("КодСтроки");

	Запрос = Новый Запрос;
	
	РасчетПоВидамДоходовИОблагаемойБазе = Метаданные.РегистрыНакопления.ИПНСведенияОДоходах.Ресурсы.Найти("ОблагаемаяБаза") <> Неопределено;
	
	Запрос.УстановитьПараметр("парамПериодС", 					НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парам1Мес", 						НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парам2Мес", 						ДобавитьМесяц(НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), 1));
	Запрос.УстановитьПараметр("парам3Мес", 						ДобавитьМесяц(НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), 2));
	Запрос.УстановитьПараметр("парамПериодПо", 					КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПослеПериодПо", 			КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) + 1);
	Запрос.УстановитьПараметр("парамНалогоплательщик",	 		Налогоплательщик);
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", 	мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());
	
	// если налогоплательщик - ИП, то исключим данные самого индивидуального предпринимателя
	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Налогоплательщик.ИндивидуальныйПредприниматель);
	Иначе
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Неопределено);
	КонецЕсли;
	
	МТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МТ;
		
	// Получим данные учетной политики
	Запрос.Текст = "	
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации,
	|	УчетнаяПолитикаНУ.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ,
	|	УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН,
	|	УчетнаяПолитикаНУ.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя,
	|	УчетнаяПолитикаНУ.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодПо, Организация = &парамНалогоплательщик) КАК УчетнаяПолитикаНУ
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОтражениеПоПериодуРегистрации 				= Выборка.ОтражениеПоПериодуРегистрации;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Выборка.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ;
		ОрганизацияЯвляетсяПлательщикомСН			= Выборка.ОрганизацияЯвляетсяПлательщикомСН;
		КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = Выборка.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя;
		КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника = Выборка.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника;
	Иначе
		ОтражениеПоПериодуРегистрации 				= Ложь;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Ложь;
		ОрганизацияЯвляетсяПлательщикомСН			= Ложь;
		КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = 0;
		КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника = 0;
	КонецЕсли;
	
	// Получим необходимые данные
	
	// ряд строк заполняются только в случае наличия у налогового агента структурных подразделений	
	Если мСписокСтруктурныхЕдиниц.Количество() = 1 И мСписокСтруктурныхЕдиниц.НайтиПоЗначению(Налогоплательщик) <> Неопределено Тогда
		ЕстьСтруктурныеЕдиницыУНалогоплательщика = Ложь;
	Иначе
		ЕстьСтруктурныеЕдиницыУНалогоплательщика = Истина;
	КонецЕсли;
	
		ТекстЗапроса =  "ВЫБРАТЬ
						|	Организации.Ссылка КАК СтруктурнаяЕдиница,
						|	Организации.Ссылка КАК Владелец
						|ПОМЕСТИТЬ ВТ_СтруктурныеПодразделенияЕП
						|ИЗ
						|	Справочник.Организации КАК Организации
						|ГДЕ
						|	Организации.Ссылка В (&парамСписокСтруктурныхЕдиниц)
						|ОБЪЕДИНИТЬ ВСЕ
						|ВЫБРАТЬ
						|	ПодразделенияОрганизаций.Ссылка,
						|	ПодразделенияОрганизаций.Владелец
						|ИЗ
						|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
						|ГДЕ
						|	ПодразделенияОрганизаций.Ссылка В (&парамСписокСтруктурныхЕдиниц)
						|;
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	УчетнаяПолитикаНУ.Организация КАК Организация,
						|	УчетнаяПолитикаНУ.ПорядокОбложенияДоходовРаботников КАК ПорядокОбложенияДоходовРаботников,
						|	ВЫБОР
						|		КОГДА УчетнаяПолитикаНУ.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж)
						|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
						|		ИНАЧЕ ВТ_СтруктурныеПодразделенияЕП.СтруктурнаяЕдиница
						|	КОНЕЦ КАК ОрганизацияЕП,
						|	ВТ_СтруктурныеПодразделенияЕП.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
						|ПОМЕСТИТЬ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
						|ИЗ
						|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодПо, Организация В (&парамСписокСтруктурныхЕдиниц)) КАК УчетнаяПолитикаНУ
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтруктурныеПодразделенияЕП КАК ВТ_СтруктурныеПодразделенияЕП
						|		ПО УчетнаяПолитикаНУ.Организация = ВТ_СтруктурныеПодразделенияЕП.Владелец
					  	|ИНДЕКСИРОВАТЬ ПО
						|	УчетнаяПолитикаНУ.Организация
						|;
						|ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Период
						|ПОМЕСТИТЬ ВТ_ДатыПериодовГода
						|ИЗ
						|	РегистрСведений.ДанныеПроизводственногоКалендаря  КАК ДанныеПроизводственногоКалендаря
						|ГДЕ
						|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
						|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &парамПериодС И &парамПериодПо
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
					    |	Периоды.Период КАК Период,
					    |	ФизическиеЛица.Ссылка КАК ФИО
						|ПОМЕСТИТЬ ВТ_Периоды
					    |ИЗ
					    |	ВТ_ДатыПериодовГода КАК Периоды
					    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
					    |		ПО (ИСТИНА)
					    |ГДЕ
					    |	ФизическиеЛица.ЭтоГруппа = ЛОЖЬ
						|
						|ИНДЕКСИРОВАТЬ ПО
					    |	Период,
					    |	ФИО
						|;
						|/////////////////////////////////////////////////
						|ВЫБРАТЬ
					    |	Периоды.Период КАК Период,
					    |	Периоды.ФИО КАК ФИО,
					    |	МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСреза
						|ПОМЕСТИТЬ ВТ_ГражданствоФизЛицСрезПоследних 
					    |	ИЗ
					    |		ВТ_Периоды КАК Периоды
					    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
					    |			ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(ГражданствоФизЛиц.Период, МЕСЯЦ))
					    |				И Периоды.ФИО = ГражданствоФизЛиц.ФизЛицо
					    |		
					    |СГРУППИРОВАТЬ ПО
					    |	Периоды.Период,
					    |	Периоды.ФИО
						|ИНДЕКСИРОВАТЬ ПО
					    |	ПериодСреза,
					    |	ФИО
						|;
						|/////////////////////////////////////////////////////
						|ВЫБРАТЬ
					    |	ГражданствоФизЛицСрезПоследних.Период КАК Период,
					    |	ГражданствоФизЛицСрезПоследних.ФИО КАК ФИО,
					    |	ВЫБОР
					    |		КОГДА ГражданствоФизЛиц.Страна ЕСТЬ NULL 
					    |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
					    |		ИНАЧЕ ГражданствоФизЛиц.Страна
					    |	КОНЕЦ КАК Страна,
						|	ВЫБОР
						|		КОГДА ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ) 
						|			ТОГДА ГражданствоФизЛиц.Страна 
						|       ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
						|	КОНЕЦ КАК СтранаРезидентства,
						|	ГражданствоФизЛиц.НомерНалоговойРегистрацииВСтранеРезидентства,
						|	ГражданствоФизЛиц.НеЯвляетсяналоговымРезидентомРК
						|ПОМЕСТИТЬ ВТ_ИтогГражданство
					    |	ИЗ
					    |		ВТ_ГражданствоФизЛицСрезПоследних КАК ГражданствоФизЛицСрезПоследних
					    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
					    |			ПО ГражданствоФизЛицСрезПоследних.ПериодСреза = ГражданствоФизЛиц.Период
					    |				И ГражданствоФизЛицСрезПоследних.ФИО = ГражданствоФизЛиц.ФизЛицо
					    |	ГДЕ
					    |		(НЕ ВЫБОР
					    |					КОГДА ГражданствоФизЛиц.Страна ЕСТЬ NULL 
					    |						ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
					    |					ИНАЧЕ ГражданствоФизЛиц.Страна
					    |				КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
					    |	
					    |	ОБЪЕДИНИТЬ ВСЕ
					    |	
					    |	ВЫБРАТЬ
					    |		Периоды.Период,
					    |		Контрагенты.Ссылка,
					    |		ВЫБОР
					    |			КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
					    |				ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
					    |			ИНАЧЕ Контрагенты.СтранаРезидентства
					    |		КОНЕЦ,
						|		ВЫБОР
					    |			КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
					    |				ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
					    |			ИНАЧЕ Контрагенты.СтранаРезидентства
					    |		КОНЕЦ,
						|		Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства,
						|		ВЫБОР КОГДА Подстрока(Контрагенты.КБЕ,1,1) = ""2"" Тогда Истина иначе Ложь КОНЕЦ
					    |	ИЗ
					    |		ВТ_ДатыПериодовГода КАК Периоды
					    |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
					    |			ПО (ИСТИНА)
					    |	ГДЕ
					    |		Контрагенты.ЭтоГруппа = ЛОЖЬ
					    |		И (НЕ ВЫБОР
					    |					КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
					    |						ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
					    |					ИНАЧЕ Контрагенты.СтранаРезидентства
					    |				КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
						|;
					    |////////////////////////////////////////////////////////////////////////////////
					    |ВЫБРАТЬ
					    |	ИтогГражданство.Период КАК Период,
					    |	ИтогГражданство.ФИО КАК ФИО,
					    |	ИтогГражданство.Страна,
						|	ИтогГражданство.НомерНалоговойРегистрацииВСтранеРезидентства,	
						|	ИтогГражданство.НеЯвляетсяналоговымРезидентомРК,
						|	ИтогГражданство.СтранаРезидентства
					    |ПОМЕСТИТЬ ВТ_Гражданство
					    |ИЗ
					    |	ВТ_ИтогГражданство КАК ИтогГражданство
					    |
					    |ИНДЕКСИРОВАТЬ ПО
					    |	Период,
					    |	ФИО"; 
	
	Запрос.Текст = ТекстЗапроса;
	
   	Запрос.Выполнить();
	
	//ЕП
	ОрганизацияЯвляетсяПлательщикомЕП = ?(СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж"), Истина, Ложь);
		
	/////////////////////////////////////////////////////////
	// Раздел. Исчисление индивидуального подоходного налога
 	
	// Начисленные и облагаемые доходы
	ТекстЗапроса = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	               |			КОГДА ИПНСведенияОДоходах.СтруктурнаяЕдиница <> ИПНСведенияОДоходах.Налогоплательщик
	               |				ТОГДА ИПНСведенияОДоходах.СтруктурнаяЕдиница
	               |			ИНАЧЕ NULL
	               |		КОНЕЦ) КАК КоличествоСтруктурныхЕдиницБезНалогоплательщика,
	               |	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	               |	ВЫБОР КОГДА ИПНСведенияОДоходах.ФизЛицо Ссылка Справочник.ФизическиеЛица Тогда ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ""A"") ИНАЧЕ ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ""E"") КОНЕЦ КАК КодСтроки, // для контрагентов калссифицируем доход с незаполненным кодом строки как прочий доход
	               |	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) КАК НачисленныеДоходы,
	               |	СУММА(ВЫБОР
	               |			КОГДА ИПНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	               |				ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот - ИПНСведенияОДоходах.СуммаВычетаОборот
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ДоходыОблагаемыеИПН
	               |ИЗ
	               |	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	               |			&парамПериодС,
	               |			&парамПериодПо,
	               |			МЕСЯЦ,
	               |			Налогоплательщик = &парамНалогоплательщик
	               |				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	               |				И ФизЛицо <> &парамИндивидуальныйПредприниматель
	               |				И ВЫБОР
	               |					КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |						ТОГДА НЕ ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ) КАК ИПНСведенияОДоходах
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоСН.СрезПоследних(&парамПериодПо, ) КАК КодыСтрокДекларации
	               |		ПО ИПНСведенияОДоходах.ВидРасчета = КодыСтрокДекларации.ВидРасчета
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ),
	               |	ВЫБОР КОГДА ИПНСведенияОДоходах.ФизЛицо Ссылка Справочник.ФизическиеЛица Тогда ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ""A"") ИНАЧЕ ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ""E"") КОНЕЦ";
		
	// Необходимо добавить получателей по исполнительным листам
	Если ПризнакАлиментов Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// ставим приходы по ИЛ как начисление получателям алиментов
		|ВЫБРАТЬ		
		|	0 КАК КоличествоСтруктурныхЕдиницБезНалогоплательщика,
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	Неопределено,		
		|	СУММА(ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовПриход) КАК НачисленныеДоходы,
		|	0 КАК ДоходыОблагаемыеИПН
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Обороты(
		|				&парамПериодС,
		|				&парамПериодПо,
		|				МЕСЯЦ,
		|				Налогоплательщик = &парамНалогоплательщик
		|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|				И Получатель.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)		
		|				) КАК ВзаиморасчетыСПолучателямиИЛ		
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.Период, МЕСЯЦ)
		|";		
				
	КонецЕсли; 
		
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл		
		
		// начисленные доходы
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_200_01_001";
		НоваяСтрока.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.НачисленныеДоходы;
		
		// доход относим к строке А, B, C, D или E
		// код строки может содержать символы "А", "B", "С", "D" или "E" русскими либо латинскими буквами
		Если (Найти(СокрЛП(Выборка.КодСтроки), "B") > 0)
			Или (Найти(СокрЛП(Выборка.КодСтроки), "В") > 0) Тогда
			
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_001_B";
			НоваяСтрока.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.НачисленныеДоходы;		
		ИначеЕсли (Найти(СокрЛП(Выборка.КодСтроки), "A") > 0)
			ИЛИ (Найти(СокрЛП(Выборка.КодСтроки), "А") > 0) Тогда

			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_001_A";
			НоваяСтрока.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.НачисленныеДоходы;		
		ИначеЕсли (Найти(СокрЛП(Выборка.КодСтроки), "С") > 0)
			ИЛИ (Найти(СокрЛП(Выборка.КодСтроки), "C") > 0) Тогда

			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_001_C";
			НоваяСтрока.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.НачисленныеДоходы;	
		ИначеЕсли (Найти(СокрЛП(Выборка.КодСтроки), "D") > 0) Тогда

			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_001_D";
			НоваяСтрока.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.НачисленныеДоходы;	
		ИначеЕсли (Найти(СокрЛП(Выборка.КодСтроки), "Е") > 0)
			ИЛИ (Найти(СокрЛП(Выборка.КодСтроки), "E") > 0) Тогда

			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_001_E";
			НоваяСтрока.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.НачисленныеДоходы;	
		КонецЕсли;		
	КонецЦикла;
	
	// В сумму начисленных доходов могут включаться начисление ОППВ
	Если ВключатьОППВВДоходыРаботников Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ОППВРасчетыСФондами.Взнос) КАК ОППВ,
		|	СУММА(ВЫБОР
		|			КОГДА ОППВРасчетыСФондами.СтруктурнаяЕдиница = ОППВРасчетыСФондами.Налогоплательщик
		|				ТОГДА ОППВРасчетыСФондами.Взнос
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОППВЗаГоловнуюОрганизацию,
		|	СУММА(ВЫБОР
		|			КОГДА ОППВРасчетыСФондами.СтруктурнаяЕдиница <> ОППВРасчетыСФондами.Налогоплательщик
		|				ТОГДА ОППВРасчетыСФондами.Взнос
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОППВПоФилиалам
		|ИЗ
		|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами                                                 
		|ГДЕ
		|	ОППВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И ОППВРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|	И ОППВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		|	И ОППВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОППВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ОППВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ОППВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|	И ОППВРасчетыСФондами.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
		|";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл			
			
			// сумма ОППВ в доходах работников
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_001_A";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.ОППВ; // общая сумма ОППВ по работникам организации и филиалов
			
			// сумма ОППВ в строке "Начисленные доходы"
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_001";
			НоваяСтрока.МесяцНалоговогоПериода	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.ОППВ;			
		КонецЦикла;
	КонецЕсли;
		
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Вычеты, льготы и налог
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(ИПНРасчетыСБюджетом.Налог) КАК ИндивидуальныйПодоходныйНалог
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|ГДЕ
	|	ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик
	|	И ИПНРасчетыСБюджетом.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И ИПНРасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)	
	|	И ИПНРасчетыСБюджетом.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И (ВЫБОР
	|		КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|			ТОГДА НЕ ИПНРасчетыСБюджетом.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|		ИНАЧЕ ИСТИНА
	|	  КОНЕЦ)
	|	И ИПНРасчетыСБюджетом.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ)
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	    
		// сумма исчисленного индивидуального подоходного налога
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_200_01_003";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.ИндивидуальныйПодоходныйНалог;
		
	КонецЦикла;
	
	// ИПН по доходам начисленным, но невыплаченным на начало и конец квартала
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ИПНРасчетыСБюджетом.НалогНачальныйОстаток КАК ИПННачальныйОстаток,
	               |	0 КАК ИПНКонечныйОстаток
	               |ИЗ
	               |	РегистрНакопления.ИПНРасчетыСБюджетом.ОстаткиИОбороты(
	               |			&парамПериодС,
	               |			&парамПериодПо,
	               |			,
	               |			,
	               |			Налогоплательщик = &парамНалогоплательщик
	               |				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	               |				И ФизЛицо <> &парамИндивидуальныйПредприниматель
	               |				И ВЫБОР
	               |					КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |						ТОГДА НЕ ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ
				   |			) КАК ИПНРасчетыСБюджетом
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	0,
	               |	ИПНРасчетыСБюджетом.НалогКонечныйОстаток
	               |ИЗ
	               |	РегистрНакопления.ИПНРасчетыСБюджетом.ОстаткиИОбороты(
	               |			&парамПериодС,
	               |			&парамПериодПо,
	               |			,
	               |			,
	               |			Налогоплательщик = &парамНалогоплательщик
	               |				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	               |				И ФизЛицо <> &парамИндивидуальныйПредприниматель
	               |				И ВЫБОР
	               |					КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |						ТОГДА НЕ ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ
	      		   |				) КАК ИПНРасчетыСБюджетом
	               |ИТОГИ
	               |	СУММА(ИПННачальныйОстаток),
	               |	СУММА(ИПНКонечныйОстаток)
	               |ПО
	               |	ОБЩИЕ";
	                        	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
	    
		// сумма исчисленного индивидуального подоходного налога
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_200_01_005";
		НоваяСтрока.МесяцНалоговогоПериода 	= СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
		НоваяСтрока.Значение 				= Выборка.ИПННачальныйОстаток;
		
		// сумма исчисленного индивидуального подоходного налога
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_200_01_006";
		НоваяСтрока.МесяцНалоговогоПериода 	= НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		НоваяСтрока.Значение 				= Выборка.ИПНКонечныйОстаток;
		
	КонецЦикла;
             
	// Задолженность по доходам, невыплаченным физическим лицам
	
	ТекстЗапроса = "
	|// Задолженность по доходам, невыплаченным физлицам, из текущих взаиморасчетов
	|ВЫБРАТЬ
	|	ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток КАК ЗадолженностьПоДоходам
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(
	|			&парамПослеПериодПо,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ВзаиморасчетыСРаботниками 
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                         
	|			ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов, МЕСЯЦ) = ВТ_Гражданство.Период)               
	|			 И (ВзаиморасчетыСРаботниками.ФизЛицо = ВТ_Гражданство.ФИО)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|			ПО (ВзаиморасчетыСРаботниками.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница) 
	|
	|ГДЕ
	|	ВЫБОР КОГДА ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ВзаиморасчетыСРаботниками.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица   
	|	ТОГДА ВТ_Гражданство.НеЯвляетсяНалоговымРезидентомРК = Истина  
	|	ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Задолженность по доходам, невыплаченным физлицам, из депонированных сумм
	|ВЫБРАТЬ
	|	ВзаиморасчетыСДепонентами.СуммаВзаиморасчетовОстаток КАК ЗадолженностьПоДоходам
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций.Остатки(
	|			&парамПослеПериодПо,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ВзаиморасчетыСДепонентами 
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                         
	|			ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСДепонентами.ПериодВзаиморасчетов, МЕСЯЦ) = ВТ_Гражданство.Период)               
	|			 И (ВзаиморасчетыСДепонентами.ФизЛицо = ВТ_Гражданство.ФИО)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|			ПО (ВзаиморасчетыСДепонентами.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница) 
	|
	|ГДЕ
	|	ВЫБОР КОГДА ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ВзаиморасчетыСДепонентами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица   
	|	ТОГДА ВТ_Гражданство.НеЯвляетсяНалоговымРезидентомРК = Истина  
	|	ИНАЧЕ ИСТИНА
	|	КОНЕЦ
  	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Задолженность по доходам, невыплаченным физлицам, из оплаты по актам закупа
	|ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиФизЛицами.СуммаВзаиморасчетовОстаток КАК ЗадолженностьПоДоходам
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами.Остатки(
	|			&парамПослеПериодПо,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И НЕ Контрагент.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус) КАК ВзаиморасчетыСКонтрагентамиФизЛицами
	|";		
		
	// Если суммы удержаний по исполнительным листам включаются по фактическому перечислению
	Если Не ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ Тогда

		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// ставим остатки сумм по ИЛ как задолженность по невыплаченным доходам работникам, с которых удержаны ИЛ
		|ВЫБРАТЬ
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовОстаток + ВзаиморасчетыСПолучателямиИЛ.СуммаСборовОстаток КАК ЗадолженностьПоДоходам
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Остатки(
		|				&парамПослеПериодПо,
		|				Налогоплательщик = &парамНалогоплательщик
		|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|				И ДокументОснование.ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ВзаиморасчетыСПолучателямиИЛ           
		|";		
		
	//Иначе
		// удержания по ИЛ уже находятся в регистре накопления ВыплаченныеДоходыРаботникамОрганизацийНУ
	КонецЕсли;
	
	// Необходимо добавить получателей по исполнительным листам
	Если ПризнакАлиментов Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// ставим остатки сумм по ИЛ как задолженность по невыплаченным доходам получателям ИЛ
		|ВЫБРАТЬ
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовОстаток КАК ЗадолженностьПоДоходам
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Остатки(
		|				&парамПослеПериодПо,
		|				Налогоплательщик = &парамНалогоплательщик
		|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|				И Получатель.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)		      								  
		|				) КАК ВзаиморасчетыСПолучателямиИЛ
		|";		
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

	    // задолженность по доходам, невыплаченным физическим лицам
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_200_01_004";
		НоваяСтрока.МесяцНалоговогоПериода 	= НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		НоваяСтрока.Значение 				= Выборка.ЗадолженностьПоДоходам;
	
	КонецЦикла;
	
	// Выплачено доходов
	
	ТекстЗапроса = "
	|// Выплата доходов
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВыплаченныеДоходы.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,	
	|	ВыплаченныеДоходы.СуммаДоходаОборот КАК ВыплаченоДоходов
	|ИЗ
	|	РегистрНакопления.ВыплаченныеДоходыРаботникамОрганизацийНУ.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель
	|			И ВЫБОР
	|				КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	|					ТОГДА НЕ ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|				ИНАЧЕ ИСТИНА
	|			  КОНЕЦ) КАК ВыплаченныеДоходы	
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                         
	|			ПО (НАЧАЛОПЕРИОДА(ВыплаченныеДоходы.Период, МЕСЯЦ) = ВТ_Гражданство.Период)               
	|			 И (ВЫБОР
	|					КОГДА ВыплаченныеДоходы.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ВыплаченныеДоходы.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ВыплаченныеДоходы.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ВыплаченныеДоходы.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|			ПО (ВыплаченныеДоходы.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница)  
	|
	|ГДЕ
	|	ВЫБОР КОГДА ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ВыплаченныеДоходы.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица   
	|	ТОГДА ВТ_Гражданство.НеЯвляетсяНалоговымРезидентомРК = Истина  
	|	ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|";		
	
	// Если суммы удержаний по исполнительным листам включаются по фактическому перечислению
	Если Не ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ Тогда

		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// ставим перечисление алиментов - как выплату доходов для работников-алименщиков
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовРасход + ВзаиморасчетыСПолучателямиИЛ.СуммаСборовРасход КАК ВыплаченоДоходов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Обороты(
		|				&парамПериодС,
		|				&парамПериодПо,
		|				МЕСЯЦ,
		|				Налогоплательщик = &парамНалогоплательщик
		|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|				И ДокументОснование.ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ВзаиморасчетыСПолучателямиИЛ            
		|";		
		
	//Иначе
		// удержания по ИЛ уже находятся в регистре накопления ВыплаченныеДоходыРаботникамОрганизацийНУ
	КонецЕсли;
	
	// Необходимо добавить получателей по исполнительным листам
	Если ПризнакАлиментов Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// ставим перечисление алиментов как выплату доходов получателям ИЛ
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовРасход КАК ВыплаченоДоходов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Обороты(
		|				&парамПериодС,
		|				&парамПериодПо,
		|				МЕСЯЦ,
		|				Налогоплательщик = &парамНалогоплательщик
		|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|				И Получатель.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)		
		|				) КАК ВзаиморасчетыСПолучателямиИЛ		
		|";		
		
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
	    // выплачено доходов
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_200_01_007";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.ВыплаченоДоходов;
		
	КонецЦикла;
	
	//Облагаемый доход 200.01.008
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(ВЫБОР
	|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА ИПНСведенияОДоходах.ОблагаемаяБазаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОблагаемаяБаза
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|				И ФизЛицо <> &парамИндивидуальныйПредприниматель
	|		И (ВЫБОР
	|			КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	|				ТОГДА НЕ ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|			ИНАЧЕ ИСТИНА
	|	  	КОНЕЦ)) КАК ИПНСведенияОДоходах
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)"; 
	
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл	      	
		// для расчета строки 200.01.008 начисленные доходы, с которых удерживаются (начисляются) ОПВ
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.КодСтроки = "s_200_01_008";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.ОблагаемаяБаза;			
	КонецЦикла;
		
		/////////////////////////////////////////////////////////
	// Раздел. Исчисление обязательных пенсионных взносов
	
	// Исчисленные пенсионные взносы    
	Если РасчетПоВидамДоходовИОблагаемойБазе Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
				    |	НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
				    |	СУММА(ВЫБОР
				    |			КОГДА ОПВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
				    |				ТОГДА ОПВСведенияОДоходах.ОблагаемаяБазаОборот
				    |			ИНАЧЕ 0
				    |		КОНЕЦ) КАК ОблагаемаяБазаОПВ
				    |ИЗ
				    |	РегистрНакопления.ОПВСведенияОДоходах.Обороты(
				    |			&парамПериодС,
				    |			&парамПериодПо,
				    |			МЕСЯЦ,
                    |			Налогоплательщик = &парамНалогоплательщик
                    |			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
                    |			И (ВЫБОР
                    |				КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
                    |					ТОГДА НЕ ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
                    |				ИНАЧЕ ИСТИНА
                    |	  		КОНЕЦ)
                    |           И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ОПВСведенияОДоходах
                    |
				    |СГРУППИРОВАТЬ ПО
				    |	НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ)";
	
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл	      	
			// для расчета строки 200.01.009 начисленные доходы, с которых удерживаются (начисляются) ОПВ
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_009";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.ОблагаемаяБазаОПВ;			
		КонецЦикла;
		
		Если СтруктураРеквизитовФормы.ВедетсяУчетОППВ Тогда
			
			ТекстЗапроса = " 
			|ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(ОППВСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
			|	СУММА(ВЫБОР
			|			КОГДА ОППВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
			|				ТОГДА ОППВСведенияОДоходах.ОблагаемаяБазаОборот
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ОблагаемаяБазаОППВ
			|ИЗ
			|	РегистрНакопления.ОППВСведенияОДоходах.Обороты(
			|			&парамПериодС,
			|			&парамПериодПо,
			|			МЕСЯЦ,
			|			Налогоплательщик = &парамНалогоплательщик
			|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
			|				И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ОППВСведенияОДоходах
			|
			|СГРУППИРОВАТЬ ПО
			|	НАЧАЛОПЕРИОДА(ОППВСведенияОДоходах.Период, МЕСЯЦ)";						
			
			Запрос.Текст = ТекстЗапроса;
						
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл	      	
				// для расчета строки 200.01.010 начисленные доходы, с которых удерживаются (начисляются) ОППВ
				НоваяСтрока = ТаблицаПоМесяцам.Добавить();
				НоваяСтрока.КодСтроки = "s_200_01_010";
				НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
				НоваяСтрока.Значение 				= Выборка.ОблагаемаяБазаОППВ;						
			КонецЦикла;
		КонецЕсли;
		
		Запрос.Текст = "ВЫБРАТЬ
				    |	НАЧАЛОПЕРИОДА(ОПВРСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
				    |	СУММА(ВЫБОР
				    |			КОГДА ОПВРСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
				    |				ТОГДА ОПВРСведенияОДоходах.ОблагаемаяБазаОборот
				    |			ИНАЧЕ 0
				    |		КОНЕЦ) КАК ОблагаемаяБазаОПВР
				    |ИЗ
				    |	РегистрНакопления.ОПВРСведенияОДоходах.Обороты(
				    |			&парамПериодС,
				    |			&парамПериодПо,
				    |			МЕСЯЦ,
                    |			Налогоплательщик = &парамНалогоплательщик
                    |			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
                    |           И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ОПВРСведенияОДоходах
                    |
				    |СГРУППИРОВАТЬ ПО
				    |	НАЧАЛОПЕРИОДА(ОПВРСведенияОДоходах.Период, МЕСЯЦ)";
	
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл	      	
			// для расчета строки 200.01.011 начисленные доходы, с которых удерживаются (начисляются) ОПВР
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_011";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.ОблагаемаяБазаОПВР;			
		КонецЦикла;
		
		Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда	
			// 200.01.012 Заявляемый доход для исчисления ОПВ
			Запрос.Текст =  "ВЫБРАТЬ
			                |	НАЧАЛОПЕРИОДА(ОПВ_ОПВРСведенияОДоходах.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
			                |	МАКСИМУМ(ОПВ_ОПВРСведенияОДоходах.ОблагаемаяБазаОПВиОПВР) КАК ОблагаемаяБазаОПВиОПВР
			                |ИЗ
			                |	(ВЫБРАТЬ
			                |		НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
			                |		ОПВСведенияОДоходах.ФизЛицо КАК ФизическоеЛицо,
			                |		СУММА(ВЫБОР
			                |				КОГДА ОПВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
			                |					ТОГДА ОПВСведенияОДоходах.ОблагаемаяБазаОборот
			                |				ИНАЧЕ 0
			                |			КОНЕЦ) КАК ОблагаемаяБазаОПВиОПВР
			                |	ИЗ
			                |		РегистрНакопления.ОПВСведенияОДоходах.Обороты(
			                |				&парамПериодС,
			                |				&парамПериодПо,
			                |				МЕСЯЦ,
			                |				Налогоплательщик = &парамНалогоплательщик
			                |					И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
			                |					И ФизЛицо = &парамИндивидуальныйПредприниматель) КАК ОПВСведенияОДоходах
			                |	
			                |	СГРУППИРОВАТЬ ПО
			                |		НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ),
			                |		ОПВСведенияОДоходах.ФизЛицо
			                |	
			                |	ОБЪЕДИНИТЬ ВСЕ
			                |	
			                |	ВЫБРАТЬ
			                |		НАЧАЛОПЕРИОДА(ОПВРСведенияОДоходах.Период, МЕСЯЦ),
			                |		ОПВРСведенияОДоходах.ФизЛицо,
			                |		СУММА(ВЫБОР
			                |				КОГДА ОПВРСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
			                |					ТОГДА ОПВРСведенияОДоходах.ОблагаемаяБазаОборот
			                |				ИНАЧЕ 0
			                |			КОНЕЦ)
			                |	ИЗ
			                |		РегистрНакопления.ОПВРСведенияОДоходах.Обороты(
			                |				&парамПериодС,
			                |				&парамПериодПо,
			                |				МЕСЯЦ,
			                |				Налогоплательщик = &парамНалогоплательщик
			                |					И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
			                |					И ФизЛицо = &парамИндивидуальныйПредприниматель) КАК ОПВРСведенияОДоходах
			                |	
			                |	СГРУППИРОВАТЬ ПО
			                |		НАЧАЛОПЕРИОДА(ОПВРСведенияОДоходах.Период, МЕСЯЦ),
			                |		ОПВРСведенияОДоходах.ФизЛицо) КАК ОПВ_ОПВРСведенияОДоходах
			                |
			                |СГРУППИРОВАТЬ ПО
			                |	НАЧАЛОПЕРИОДА(ОПВ_ОПВРСведенияОДоходах.МесяцНалоговогоПериода, МЕСЯЦ)
							|
							|УПОРЯДОЧИТЬ ПО
							|	МесяцНалоговогоПериода";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл	      	
				// для расчета строки 200.01.012 начисленные доходы, с которых удерживаются (начисляются) ОПВ
				НоваяСтрока = ТаблицаПоМесяцам.Добавить();
				НоваяСтрока.КодСтроки = "s_200_01_012";
				НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
				НоваяСтрока.Значение 				= Выборка.ОблагаемаяБазаОПВиОПВР;			
			КонецЦикла;
		КонецЕсли;
		
		/////////////////////////////////////////////////////////
		// Раздел. Исчисление социального налога с применением ставок, установленных п. 1, 3 ст. 358 Налогового кодекса
		// (общеустановленный режим)
		
		Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо И ОрганизацияЯвляетсяПлательщикомСН Тогда

			ТекстЗапроса =  "ВЫБРАТЬ
						    |	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
						    |	СУММА(ВЫБОР
						    |			КОГДА СНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
						    |				ТОГДА СНСведенияОДоходах.ОблагаемаяБазаОборот
						    |			ИНАЧЕ 0
						    |		КОНЕЦ) КАК ОблагаемаяБазаСН
							|ИЗ
						    |	РегистрНакопления.СНСведенияОДоходах.Обороты(
						    |			&парамПериодС,
						    |			&парамПериодПо,
						    |			МЕСЯЦ,
						    |			Налогоплательщик = &парамНалогоплательщик
						    |				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)) КАК СНСведенияОДоходах
						    |
						    |СГРУППИРОВАТЬ ПО
						    |	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ)";  
									
            Запрос.Текст = ТекстЗапроса;
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				// объект налогообложения социальным налогом
				НоваяСтрока = ТаблицаПоМесяцам.Добавить();
				НоваяСтрока.КодСтроки = "s_200_01_016";
				НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
				НоваяСтрока.Значение 				= Выборка.ОблагаемаяБазаСН;		
	            					
			КонецЦикла;
		КонецЕсли;    	
	
		/////////////////////////////////////////////////////////
		// Раздел. Исчисление социальных отчислений
		
		// 200.01.017 Сумма социальных отчислений
  	
		Запрос.Текст =  "ВЫБРАТЬ
					    |	НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
					    |	СУММА(ВЫБОР
					    |			КОГДА СОСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
					    |				ТОГДА СОСведенияОДоходах.ОблагаемаяБазаОборот
					    |			ИНАЧЕ 0
					    |		КОНЕЦ) КАК ОблагаемаяБазаСО
						|ИЗ
					    |	РегистрНакопления.СОСведенияОДоходах.Обороты(
					    |			&парамПериодС,
					    |			&парамПериодПо,
					    |			МЕСЯЦ,
					    |			Налогоплательщик = &парамНалогоплательщик
					    |				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
					    |				И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК СОСведенияОДоходах
					    |
					    |СГРУППИРОВАТЬ ПО
					    |	НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ)"; 
													
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// для расчета доходов физлиц, с которых исчисляются социальные отчисления
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_017";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.ОблагаемаяБазаСО;	
		
		КонецЦикла;
	
		Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		// 200.01.018 Сумма социальных отчислений в свою пользу
			Запрос.Текст =  "ВЫБРАТЬ
					    |	НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
					    |	СУММА(ВЫБОР
					    |			КОГДА СОСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
					    |				ТОГДА СОСведенияОДоходах.ОблагаемаяБазаОборот
					    |			ИНАЧЕ 0
					    |		КОНЕЦ) КАК ОблагаемаяБазаСО
						|ИЗ
					    |	РегистрНакопления.СОСведенияОДоходах.Обороты(
					    |			&парамПериодС,
					    |			&парамПериодПо,
					    |			МЕСЯЦ,
					    |			Налогоплательщик = &парамНалогоплательщик
					    |				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
					    |				И ФизЛицо = &парамИндивидуальныйПредприниматель) КАК СОСведенияОДоходах
					    |
					    |СГРУППИРОВАТЬ ПО
					    |	НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ)"; 

			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
								
				// облагаемая база социальные отчисления
				НоваяСтрока = ТаблицаПоМесяцам.Добавить();
				НоваяСтрока.КодСтроки = "s_200_01_018";
				НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
				НоваяСтрока.Значение 				= Выборка.ОблагаемаяБазаСО;	
				
			КонецЦикла;

		КонецЕсли;	
		
		// 200.01.016 Сумма отчислений ОСМС
  	    Запрос.Текст =  "ВЫБРАТЬ
  	                    |	НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
  	                    |	СУММА(ВЫБОР
  	                    |			КОГДА ООСМССведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
  	                    |				ТОГДА ООСМССведенияОДоходах.ОблагаемаяБазаОборот
  	                    |			ИНАЧЕ 0
  	                    |		КОНЕЦ) КАК ОблагаемаяБазаООСМС
  	                    |ИЗ
  	                    |	РегистрНакопления.ООСМССведенияОДоходах.Обороты(
  	                    |			&парамПериодС,
  	                    |			&парамПериодПо,
  	                    |			МЕСЯЦ,
  	                    |			Налогоплательщик = &парамНалогоплательщик
  	                    |				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
  	                    |				" + ?(ОрганизацияЯвляетсяПлательщикомСН, "", "И ФизЛицо <> &парамИндивидуальныйПредприниматель") + "
						|					) КАК ООСМССведенияОДоходах
  	                    |
  	                    |СГРУППИРОВАТЬ ПО
  	                    |	НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ)"; 
													
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// для расчета доходов физлиц, с которых исчисляются социальные отчисления
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_019";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.ОблагаемаяБазаООСМС;	
		
		КонецЦикла;

		// 200.01.017 Сумма взносов ОСМС
  	    Запрос.Текст =  "ВЫБРАТЬ
  	                    |	НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
  	                    |	СУММА(ВЫБОР
  	                    |			КОГДА ВОСМССведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
  	                    |				ТОГДА ВОСМССведенияОДоходах.ОблагаемаяБазаОборот
  	                    |			ИНАЧЕ 0
  	                    |		КОНЕЦ) КАК ОблагаемаяБазаВОСМС
  	                    |ИЗ
  	                    |	РегистрНакопления.ВОСМССведенияОДоходах.Обороты(
  	                    |			&парамПериодС,
  	                    |			&парамПериодПо,
  	                    |			МЕСЯЦ,
  	                    |			Налогоплательщик = &парамНалогоплательщик
  	                    |			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
						|			И ФизЛицо <> &парамИндивидуальныйПредприниматель
						|			) КАК ВОСМССведенияОДоходах
						|
						|СГРУППИРОВАТЬ ПО
  	                    |	НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ)"; 
													
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// для расчета доходов физлиц, с которых исчисляются социальные отчисления
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_020";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.ОблагаемаяБазаВОСМС;	
		
        КонецЦикла;
        
        Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда	
            // 200.01.017 Сумма взносов ОСМС
            Запрос.Текст =  "ВЫБРАТЬ
                            |   НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
                            |   СУММА(ВЫБОР
                            |           КОГДА ВОСМССведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
                            |               ТОГДА ВОСМССведенияОДоходах.ОблагаемаяБазаОборот
                            |           ИНАЧЕ 0
                            |       КОНЕЦ) КАК ОблагаемаяБазаВОСМС
                            |ИЗ
                            |   РегистрНакопления.ВОСМССведенияОДоходах.Обороты(
                            |           &парамПериодС,
                            |           &парамПериодПо,
                            |           МЕСЯЦ,
                            |           Налогоплательщик = &парамНалогоплательщик
                            |               И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
                            |               И ФизЛицо = &парамИндивидуальныйПредприниматель) КАК ВОСМССведенияОДоходах
                            |
                            |СГРУППИРОВАТЬ ПО
                            |   НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ)"; 
            
            Выборка = Запрос.Выполнить().Выбрать();
            
            Пока Выборка.Следующий() Цикл
                
                // для расчета доходов физлиц, с которых исчисляются социальные отчисления
                НоваяСтрока = ТаблицаПоМесяцам.Добавить();
                НоваяСтрока.КодСтроки = "s_200_01_021";
                НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
                НоваяСтрока.Значение 				= Выборка.ОблагаемаяБазаВОСМС;	
                
            КонецЦикла;
        КонецЕсли;

	
	Иначе 
		// учет по облагаемой базе и ОППВ не ведется
		
		/////////////////////////////////////////////////////////
		// Раздел. Исчисление обязательных пенсионных взносов
	
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныеОПВ 
		|ИЗ
		|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами                                        
		|ГДЕ
		|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И ОПВРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|	И ОПВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)	
		|	И ОПВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|	И ОПВРасчетыСФондами.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл	      	
			// для расчета строки 200.01.009 начисленные доходы, с которых удерживаются (начисляются) ОПВ
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_009";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.ИсчисленныеОПВ;			
		КонецЦикла; 		
		
		/////////////////////////////////////////////////////////
		// Раздел. Исчисление обязательных профессиональных пенсионных взносов
	
		// Раздел не заполняется, так как в конфигурациях до ввода ресурсов по облагаемой базе, механизмы ОППВ так же отсутствуют
		
		
		// Исчисление обязательных пенсионных взносов
		Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда	
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
			|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныеОПВ   
			|ИЗ
			|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами                                        
			|ГДЕ
			|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
			|	И ОПВРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
			|	И ОПВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
			|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
			|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)	
			|	И ОПВРасчетыСФондами.ФизЛицо = &парамИндивидуальныйПредприниматель
			|	И ОПВРасчетыСФондами.Активность
			|
			|СГРУППИРОВАТЬ ПО
			|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
			|";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл	      	
				// для расчета строки 200.01.011 начисленные доходы, с которых удерживаются (начисляются) ОПВ
				НоваяСтрока = ТаблицаПоМесяцам.Добавить();
				НоваяСтрока.КодСтроки = "s_200_01_012";
				НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
				НоваяСтрока.Значение 				= Выборка.ИсчисленныеОПВ;			
			КонецЦикла;
		КонецЕсли;
	
		/////////////////////////////////////////////////////////
		// Раздел. Исчисление социального налога с применением ставок, установленных п. 1, 3 ст. 358 Налогового кодекса
		// (общеустановленный режим)
	
		Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо И ОрганизацияЯвляетсяПлательщикомСН Тогда
			Запрос.Текст = "ВЫБРАТЬ
		               |	НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		               |	СУММА(СНИсчисленный.Налог) КАК Налог,
		               |	СУММА(ВЫБОР
		               |			КОГДА СНИсчисленный.СтруктурнаяЕдиница = СНИсчисленный.Налогоплательщик
		               |				ТОГДА СНИсчисленный.Налог
		               |			ИНАЧЕ 0
		               |		КОНЕЦ) КАК НалогЗаГоловнуюОрганизацию,
		               |	СУММА(ВЫБОР
		               |			КОГДА СНИсчисленный.СтруктурнаяЕдиница <> СНИсчисленный.Налогоплательщик
		               |				ТОГДА СНИсчисленный.Налог
		               |			ИНАЧЕ 0
		               |		КОНЕЦ) КАК НалогПоФилиалам
		               |ИЗ
		               |	РегистрНакопления.СНИсчисленный КАК СНИсчисленный                                             
		               |ГДЕ
		               |	СНИсчисленный.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		               |	И СНИсчисленный.Налогоплательщик = &парамНалогоплательщик
		               |	И СНИсчисленный.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
					   |	И СНИсчисленный.Активность
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ)";
		
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				// объект налогообложения социальным налогом
				НоваяСтрока = ТаблицаПоМесяцам.Добавить();
				НоваяСтрока.КодСтроки = "s_200_01_016";
				НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
				НоваяСтрока.Значение 				= Выборка.Налог;			
	            					
			КонецЦикла;
		КонецЕсли;   	
	
		/////////////////////////////////////////////////////////
		// Раздел. Исчисление социальных отчислений
	
		// 200.01.016 Сумма социальных отчислений
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(СОРасчетыСФондами.Отчисление) КАК СоциальныеОтчисления,
		|	СУММА(ВЫБОР
		|			КОГДА СОРасчетыСФондами.СтруктурнаяЕдиница = СОРасчетыСФондами.Налогоплательщик
		|				ТОГДА СОРасчетыСФондами.Отчисление
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СоциальныеОтчисленияЗаГоловнуюОрганизацию,
		|	СУММА(ВЫБОР
		|			КОГДА СОРасчетыСФондами.СтруктурнаяЕдиница <> СОРасчетыСФондами.Налогоплательщик
		|				ТОГДА СОРасчетыСФондами.Отчисление
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СоциальныеОтчисленияПоФилиалам
		|ИЗ
		|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами                                                
		|ГДЕ
		|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И СОРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|	И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		|	И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И СОРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|	И СОРасчетыСФондами.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
		|";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо И ОрганизацияЯвляетсяПлательщикомСН Тогда
				// объект налогообложения социальным налогом
				НоваяСтрока = ТаблицаПоМесяцам.Добавить();
				НоваяСтрока.КодСтроки = "s_200_01_016";
				НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
				НоваяСтрока.Значение 				= Выборка.СоциальныеОтчисления;
			КонецЕсли;

			// для расчета потом доходов физлиц, с которых исчисляются социальные отчисления
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_017";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.СоциальныеОтчисления;	
		
		КонецЦикла;
	
		Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			// 200.01.015 Сумма социальных отчислений в свою пользу
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
			|	СУММА(СОРасчетыСФондами.Отчисление) КАК СоциальныеОтчисления,
			|	СУММА(ВЫБОР
			|			КОГДА СОРасчетыСФондами.СтруктурнаяЕдиница = СОРасчетыСФондами.Налогоплательщик
			|				ТОГДА СОРасчетыСФондами.Отчисление
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК СоциальныеОтчисленияЗаГоловнуюОрганизацию,
			|	СУММА(ВЫБОР
			|			КОГДА СОРасчетыСФондами.СтруктурнаяЕдиница <> СОРасчетыСФондами.Налогоплательщик
			|				ТОГДА СОРасчетыСФондами.Отчисление
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК СоциальныеОтчисленияПоФилиалам
			|ИЗ
			|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами                                               
			|ГДЕ
			|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
			|	И СОРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
			|	И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
			|	И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
			|	И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
			|	И СОРасчетыСФондами.ФизЛицо = &парамИндивидуальныйПредприниматель
			|	И СОРасчетыСФондами.Активность
			|
			|СГРУППИРОВАТЬ ПО
			|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
			|";
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
								
				// для расчета дохода, с которого исчисляются социальные отчисления
				НоваяСтрока = ТаблицаПоМесяцам.Добавить();
				НоваяСтрока.КодСтроки = "s_200_01_018";
				НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
				НоваяСтрока.Значение 				= Выборка.СоциальныеОтчисления;	
				
			КонецЦикла;
		КонецЕсли;	
		
		/////////////////////////////////////////////////////////
		// Раздел. Исчисление ОСМС
	
		// 200.01.016 Сумма отчислений на ОСМС
		Запрос.Текст = "ВЫБРАТЬ
		               |	НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		               |	СУММА(ООСМСРасчетыСФондами.Отчисление) КАК ООСМС,
		               |	СУММА(ВЫБОР
		               |			КОГДА ООСМСРасчетыСФондами.СтруктурнаяЕдиница = ООСМСРасчетыСФондами.Налогоплательщик
		               |				ТОГДА ООСМСРасчетыСФондами.Отчисление
		               |			ИНАЧЕ 0
		               |		КОНЕЦ) КАК ООСМСЗаГоловнуюОрганизацию,
		               |	СУММА(ВЫБОР
		               |			КОГДА ООСМСРасчетыСФондами.СтруктурнаяЕдиница <> ООСМСРасчетыСФондами.Налогоплательщик
		               |				ТОГДА ООСМСРасчетыСФондами.Отчисление
		               |			ИНАЧЕ 0
		               |		КОНЕЦ) КАК ООСМСПоФилиалам
		               |ИЗ
		               |	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
		               |ГДЕ
		               |	ООСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		               |	И ООСМСРасчетыСФондами.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
		               |	И ООСМСРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		               |	И ООСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		               |	И ООСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		               |	И ООСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
					   |	И ООСМСРасчетыСФондами.Активность
		               |	" + ?(ОрганизацияЯвляетсяПлательщикомСН, "", "И ООСМСРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель") + "
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// для расчета потом доходов физлиц, с которых исчисляются социальные отчисления
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_019";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.ООСМС;	
		
		КонецЦикла;
			
		// 200.01.017 Сумма взносов на ОСМС
		Запрос.Текст = "ВЫБРАТЬ
		               |	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		               |	СУММА(ВОСМСРасчетыСФондами.Взнос) КАК ВОСМС,
		               |	СУММА(ВЫБОР
		               |			КОГДА ВОСМСРасчетыСФондами.СтруктурнаяЕдиница = ВОСМСРасчетыСФондами.Налогоплательщик
		               |				ТОГДА ВОСМСРасчетыСФондами.Взнос
		               |			ИНАЧЕ 0
		               |		КОНЕЦ) КАК ВОСМСЗаГоловнуюОрганизацию,
		               |	СУММА(ВЫБОР
		               |			КОГДА ВОСМСРасчетыСФондами.СтруктурнаяЕдиница <> ВОСМСРасчетыСФондами.Налогоплательщик
		               |				ТОГДА ВОСМСРасчетыСФондами.Взнос
		               |			ИНАЧЕ 0
		               |		КОНЕЦ) КАК ВОСМСПоФилиалам
		               |ИЗ
		               |	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
		               |ГДЕ
		               |	ВОСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		               |	И ВОСМСРасчетыСФондами.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
		               |	И ВОСМСРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		               |	И ВОСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		               |	И ВОСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		               |	И ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
					   |	И ВОСМСРасчетыСФондами.Активность
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// для расчета потом доходов физлиц, с которых исчисляются социальные отчисления
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_020";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.ВОСМС;	
		
		КонецЦикла;

        // 200.01.017 Сумма взносов на ОСМС
		Запрос.Текст = "ВЫБРАТЬ
		               |	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		               |	СУММА(ВОСМСРасчетыСФондами.Взнос) КАК ВОСМС,
		               |	СУММА(ВЫБОР
		               |			КОГДА ВОСМСРасчетыСФондами.СтруктурнаяЕдиница = ВОСМСРасчетыСФондами.Налогоплательщик
		               |				ТОГДА ВОСМСРасчетыСФондами.Взнос
		               |			ИНАЧЕ 0
		               |		КОНЕЦ) КАК ВОСМСЗаГоловнуюОрганизацию,
		               |	СУММА(ВЫБОР
		               |			КОГДА ВОСМСРасчетыСФондами.СтруктурнаяЕдиница <> ВОСМСРасчетыСФондами.Налогоплательщик
		               |				ТОГДА ВОСМСРасчетыСФондами.Взнос
		               |			ИНАЧЕ 0
		               |		КОНЕЦ) КАК ВОСМСПоФилиалам
		               |ИЗ
		               |	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
		               |ГДЕ
		               |	ВОСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		               |	И ВОСМСРасчетыСФондами.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
		               |	И ВОСМСРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		               |	И ВОСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		               |	И ВОСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		               |	И ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
              		   |	И ВОСМСРасчетыСФондами.ФизЛицо = &парамИндивидуальныйПредприниматель
					   |	И ВОСМСРасчетыСФондами.Активность
			           |
		               |СГРУППИРОВАТЬ ПО
		               |	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.КодСтроки = "s_200_01_021";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.ВОСМС;	
		
        КонецЦикла;
        
	КонецЕсли;
	
	// свернем строки по-месячно
	ТаблицаПоМесяцам.Свернуть("КодСтроки, МесяцНалоговогоПериода", "Значение");
	
	// рассчитываем итоговые графы за квартал и с начала года
	
	Начало1Мес = НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Начало2Мес = ДобавитьМесяц(Начало1Мес, 1);
	Начало3Мес = ДобавитьМесяц(Начало2Мес, 1);
	
	Для Каждого СтрокаТЗ Из ТаблицаПоМесяцам Цикл
			
		СтрокаРезультат = ТаблицаРезультат.Найти(СтрокаТЗ.КодСтроки, "КодСтроки");
		Если СтрокаРезультат = Неопределено Тогда
			СтрокаРезультат = ТаблицаРезультат.Добавить();
			СтрокаРезультат.КодСтроки = СтрокаТЗ.КодСтроки;
		КонецЕсли;
		
		Если СтрокаТЗ.МесяцНалоговогоПериода = Начало1Мес Тогда
			СтрокаРезультат.Значение1Мес = СтрокаРезультат.Значение1Мес + СтрокаТЗ.Значение;
		ИначеЕсли СтрокаТЗ.МесяцНалоговогоПериода = Начало2Мес Тогда
			СтрокаРезультат.Значение2Мес = СтрокаРезультат.Значение2Мес + СтрокаТЗ.Значение;
		ИначеЕсли СтрокаТЗ.МесяцНалоговогоПериода = Начало3Мес Тогда
			СтрокаРезультат.Значение3Мес = СтрокаРезультат.Значение3Мес + СтрокаТЗ.Значение;
		КонецЕсли;
		
		// квартальные итоги
		Если СтрокаТЗ.МесяцНалоговогоПериода >= Начало1Мес Тогда
			СтрокаРезультат.ЗначениеКвартал = СтрокаРезультат.ЗначениеКвартал + СтрокаТЗ.Значение;
		КонецЕсли;
		
		// итоги с начала года
		СтрокаРезультат.ЗначениеСНачГода = СтрокаРезультат.ЗначениеСНачГода + СтрокаТЗ.Значение;
		
	КонецЦикла;
	
	// теперь расчетные строки
	Если НЕ РасчетПоВидамДоходовИОблагаемойБазе Тогда		
	
		// начисленные доходы, с которых удерживаются (начисляются) ОПВ - рассчитываем обратным ходом от фактически исчисленных ОПВ
		НайденнаяСтрока = ТаблицаРезультат.Найти("s_200_01_009", "КодСтроки");
		Если НайденнаяСтрока <> Неопределено Тогда
			ПроцентОПВ = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			
			Если ПроцентОПВ <> 0 Тогда
				НайденнаяСтрока.Значение1Мес = НайденнаяСтрока.Значение1Мес * 100 / ПроцентОПВ;
				НайденнаяСтрока.Значение2Мес = НайденнаяСтрока.Значение2Мес * 100 / ПроцентОПВ;
				НайденнаяСтрока.Значение3Мес = НайденнаяСтрока.Значение3Мес * 100 / ПроцентОПВ;
				НайденнаяСтрока.ЗначениеКвартал = НайденнаяСтрока.ЗначениеКвартал * 100 / ПроцентОПВ;			
			КонецЕсли;
		КонецЕсли;
		
		// начисленные доходы, с которых удерживаются (начисляются) ОПВ - рассчитываем обратным ходом от фактически исчисленных ОПВ
		// Расчет не производится, так как в решениях до ввода облагаемой базы, ОППВ отсутствуют
		
		// начисленные доходы, с которых удерживаются (начисляются) ОПВ - рассчитываем обратным ходом от фактически исчисленных ОПВ
		НайденнаяСтрока = ТаблицаРезультат.Найти("s_200_01_012", "КодСтроки");
		Если НайденнаяСтрока <> Неопределено Тогда
			ПроцентОПВ = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			
			Если ПроцентОПВ <> 0 Тогда
				НайденнаяСтрока.Значение1Мес = НайденнаяСтрока.Значение1Мес * 100 / ПроцентОПВ;
				НайденнаяСтрока.Значение2Мес = НайденнаяСтрока.Значение2Мес * 100 / ПроцентОПВ;
				НайденнаяСтрока.Значение3Мес = НайденнаяСтрока.Значение3Мес * 100 / ПроцентОПВ;
				НайденнаяСтрока.ЗначениеКвартал = НайденнаяСтрока.ЗначениеКвартал * 100 / ПроцентОПВ;			
			КонецЕсли;
		КонецЕсли;
		
		// объект обложения, с которого исчисляется СН - рассчитываем обратным ходом от фактически исчисленного СН
		НайденнаяСтрока = ТаблицаРезультат.Найти("s_200_01_016", "КодСтроки");
		Если НайденнаяСтрока <> Неопределено Тогда
			ПроцентСН = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.СоциальныйНалог, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			            
			Если ПроцентСН <> 0 Тогда
				НайденнаяСтрока.Значение1Мес = НайденнаяСтрока.Значение1Мес * 100 / ПроцентСН;
				НайденнаяСтрока.Значение2Мес = НайденнаяСтрока.Значение2Мес * 100 / ПроцентСН;
				НайденнаяСтрока.Значение3Мес = НайденнаяСтрока.Значение3Мес * 100 / ПроцентСН;
				НайденнаяСтрока.ЗначениеКвартал = НайденнаяСтрока.ЗначениеКвартал * 100 / ПроцентСН;			
			КонецЕсли;
		КонецЕсли;

		// доходы физических лиц, с которых исчисляются СО - рассчитываем обратным ходом от фактически исчисленных СО
		НайденнаяСтрока = ТаблицаРезультат.Найти("s_200_01_017", "КодСтроки");
		Если НайденнаяСтрока <> Неопределено Тогда
			ПроцентСО = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			
			Если ПроцентСО <> 0 Тогда
				НайденнаяСтрока.Значение1Мес = НайденнаяСтрока.Значение1Мес *  100 / ПроцентСО;
				НайденнаяСтрока.Значение2Мес = НайденнаяСтрока.Значение2Мес * 100 / ПроцентСО;
				НайденнаяСтрока.Значение3Мес = НайденнаяСтрока.Значение3Мес * 100 / ПроцентСО;
				НайденнаяСтрока.ЗначениеКвартал = НайденнаяСтрока.ЗначениеКвартал * 100 / ПроцентСО;			
			КонецЕсли;
		КонецЕсли;
		
		// доходы физических лиц, с которых исчисляются СО - рассчитываем обратным ходом от фактически исчисленных СО
		НайденнаяСтрока = ТаблицаРезультат.Найти("s_200_01_018", "КодСтроки");
		Если НайденнаяСтрока <> Неопределено Тогда
			ПроцентСО = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			
			Если ПроцентСО <> 0 Тогда
				НайденнаяСтрока.Значение1Мес = НайденнаяСтрока.Значение1Мес *  100 / ПроцентСО;
				НайденнаяСтрока.Значение2Мес = НайденнаяСтрока.Значение2Мес * 100 / ПроцентСО;
				НайденнаяСтрока.Значение3Мес = НайденнаяСтрока.Значение3Мес * 100 / ПроцентСО;
				НайденнаяСтрока.ЗначениеКвартал = НайденнаяСтрока.ЗначениеКвартал * 100 / ПроцентСО;			
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаРезультат.Количество() = 0 и ВыдаватьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данные для заполнения формы 200.01 за отчетный период отсутствуют...'"));
	КонецЕсли;
				     	
	Возврат ТаблицаРезультат;		 
	
КонецФункции // Форма200_01РассчитатьДанныеФормы()

&НаКлиенте
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма200_01ЗаполнитьАвто(Перезаполнить = Ложь) 
	
	Состояние("Расчет формы 200.01");		
	
	Форма200_01ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");
	
КонецПроцедуры // Форма200_01ЗаполнитьАвто()

&НаСервере
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма200_01ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь) 
	
	ТекИмяФормы = "Форма200_01";
	Очистить(ТекИмяФормы, Истина);
	
	Если НЕ Перезаполнить Тогда	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Расчет приложения 200.01'"));
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПолучитьПорядокОбложенияДоходовРаботников(Налогоплательщик, КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)); 
	
	//////////////////////////////////////////
	// Раздел. Расчетные показатели        	

	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ТекИмяФормы);

	ТаблицаРезультат = Форма200_01РассчитатьДанныеФормы();
	
	Для Каждого СтрокаРезультат Из ТаблицаРезультат Цикл

		Если СтрокаРезультат.КодСтроки = "s_200_01_001_A"  или СтрокаРезультат.КодСтроки = "s_200_01_001_B"
			или СтрокаРезультат.КодСтроки = "s_200_01_001_C"  или СтрокаРезультат.КодСтроки = "s_200_01_001_D"
			или СтрокаРезультат.КодСтроки = "s_200_01_001_E" Тогда

			ИмяЯчейки = СтрокаРезультат.КодСтроки;
			ИтогЗнач = Окр(СтрокаРезультат.Значение1Мес + СтрокаРезультат.Значение2Мес + СтрокаРезультат.Значение3Мес);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки, ИтогЗнач, Форма200_01ПолеТабличногоДокументаСтраница1);
			
		ИначеЕсли СтрокаРезультат.КодСтроки = "s_200_01_004" Тогда

			ИмяЯчейки = "s_200_01_004";
			ИтогЗнач = Окр(СтрокаРезультат.Значение3Мес);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки, ИтогЗнач, Форма200_01ПолеТабличногоДокументаСтраница1);
			
		ИначеЕсли СтрокаРезультат.КодСтроки = "s_200_01_005" Тогда

			ИмяЯчейки = "s_200_01_005";
			ИтогЗнач = Окр(СтрокаРезультат.Значение1Мес);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки, ИтогЗнач, Форма200_01ПолеТабличногоДокументаСтраница1);
			
		ИначеЕсли СтрокаРезультат.КодСтроки = "s_200_01_006" Тогда

			ИмяЯчейки = "s_200_01_006";
			ИтогЗнач = Окр(СтрокаРезультат.Значение3Мес);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки, ИтогЗнач, Форма200_01ПолеТабличногоДокументаСтраница1);
				
		Иначе // все остальные ячейки обрабатываются одинаковым образом
			
			// округленное значение за квартал может оказаться больше суммы значений по месяцам
			// проверим и добавим к значению 1, т.к. максимальная погрешность при округлении может быть 1,47.
			Если Окр(СтрокаРезультат.ЗначениеКвартал) > Окр(СтрокаРезультат.Значение1Мес) + Окр(СтрокаРезультат.Значение2Мес)
				+ Окр(СтрокаРезультат.Значение3Мес) Тогда
				Если Окр(СтрокаРезультат.Значение1Мес) <> 0 Тогда
					СтрокаРезультат.Значение1Мес = СтрокаРезультат.Значение1Мес + 1;
				ИначеЕсли Окр(СтрокаРезультат.Значение2Мес) <> 0 Тогда
					СтрокаРезультат.Значение2Мес = СтрокаРезультат.Значение2Мес + 1;
				ИначеЕсли Окр(СтрокаРезультат.Значение3Мес) <> 0 Тогда
					СтрокаРезультат.Значение3Мес = СтрокаРезультат.Значение3Мес + 1;
				КонецЕсли;
			КонецЕсли;
			
			ИмяЯчейки = СтрокаРезультат.КодСтроки;
			
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки + "_1", Окр(СтрокаРезультат.Значение1Мес), Форма200_01ПолеТабличногоДокументаСтраница1);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки + "_2", Окр(СтрокаРезультат.Значение2Мес), Форма200_01ПолеТабличногоДокументаСтраница1);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки + "_3", Окр(СтрокаРезультат.Значение3Мес), Форма200_01ПолеТабличногоДокументаСтраница1);
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки + "_4", Окр(СтрокаРезультат.ЗначениеКвартал), Форма200_01ПолеТабличногоДокументаСтраница1);		
		
		КонецЕсли;

	КонецЦикла;
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, ТекИмяФормы, Перезаполнить);
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);
	
	Модифицированность = Истина;
	
КонецПроцедуры // Форма200_01ЗаполнитьАвто()

&НаСервере
Процедура Форма200_01РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки, ТекИмяФормы)
	
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, ИмяЯчейки, ЗначениеЯчейки);
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ТекИмяФормы);			

	ЭтаФорма.Форма200ПолеТабличногоДокументаСтраница1.Области.Приложение01.Значение = "Х";
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, "Форма200", "Приложение01", "Х");	
	
	//Рассчитаем ячейки 4 (за квартал)
	Для Н = 1 По 21 Цикл
		Если Н = 2 ИЛИ Н = 4 ИЛИ Н = 5 ИЛИ Н = 6 ИЛИ Н = 13 ИЛИ Н = 14 ИЛИ  Н = 15 Тогда
			// ячейки у которых нет итогов за квартал
			Продолжить;
		КонецЕсли;	
		
		Если Н <=  10 Тогда
			НомерСтраницы = "1";
		ИначеЕсли Н = 21 Тогда  
			НомерСтраницы = "3";
		Иначе
			НомерСтраницы = "2";			
		КонецЕсли;
		
		Номер = Формат(Н,"ЧЦ=2; ЧДЦ=0; ЧВН=");
		// графа 4
		ИтогЗначение = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_200_01_0" + Номер + "_1")
						+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_200_01_0" + Номер + "_2")
						+ РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных,"s_200_01_0" + Номер + "_3");
					
		Строка = ТаблицаДанных.Найти("s_200_01_0" + Номер + "_4","ИмяОбласти");
		Если Строка <> Неопределено Тогда
			Строка.Значение = ИтогЗначение;
		КонецЕсли;
		
		ЭтаФорма["Форма200_01ПолеТабличногоДокументаСтраница"+ НомерСтраницы].Области["s_200_01_0" + Номер + "_4"].Значение = ИтогЗначение;
		
		РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ("s_200_01_0" + Номер + "_4"), ИтогЗначение);

	КонецЦикла;

	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ТекИмяФормы, ТаблицаДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура Форма200_01Расчет(ИмяЯчейки, ЗначениеЯчейки)
	
	Форма200_01РасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки, КодФормы)
	
КонецПроцедуры

&НаКлиенте
Процедура Форма200_01ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Область)
	
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма200_01Расчет(Область.Имя, Область.Значение);
	КонецЕсли;
	    	    
	Модифицированность = Истина;
	
КонецПроцедуры // Форма200_01ПолеТабличногоДокументаПриИзменении()

&НаКлиенте
Процедура Форма200_01Расшифровка(ИмяЯчейки)
	
	ДатаНачала 		= СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ДатаОкончания	= СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
		
	Если Прав(ИмяЯчейки,1) = "1" Тогда // месяц 1
		
		ДатаНачала 	  = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
		ДатаОкончания = КонецМесяца(ДатаНачала);
		
	ИначеЕсли Прав(ИмяЯчейки,1) = "2" Тогда // месяц 
		
		ДатаНачала 	  = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,1);
		ДатаОкончания = КонецМесяца(ДатаНачала);
		
	ИначеЕсли Прав(ИмяЯчейки,1) = "3" Тогда // месяц 
		
		ДатаНачала	  = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,2);
		ДатаОкончания = КонецМесяца(ДатаНачала);
		
	ИначеЕсли Прав(ИмяЯчейки,1) = "4" Тогда // месяц 
		
		ДатаНачала	  = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
		ДатаОкончания = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
		
	КонецЕсли;
			
	// Если в строках по самому ИП, то установим отбор по физ лицу	
	Если ПолучитьЗначениеРеквизита(Налогоплательщик, "ЮрФизЛицо") = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		Если Лев(ИмяЯчейки,12) <> "s_200_01_012" И Лев(ИмяЯчейки,12) <> "s_200_01_018" И Лев(ИмяЯчейки,12) <> "s_200_01_021" Тогда
			СтруктураПоФизЛицу = Новый Структура;
			СтруктураПоФизЛицу.Вставить("ФизЛицо", ПолучитьЗначениеРеквизита(Налогоплательщик, "ИндивидуальныйПредприниматель"));
			СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.НеРавно);	
		ИначеЕсли Лев(ИмяЯчейки,12) <> "s_200_01_020" Тогда
			
			СтруктураПоФизЛицу = Новый Структура;
			СтруктураПоФизЛицу.Вставить("ФизЛицо", ПолучитьЗначениеРеквизита(Налогоплательщик, "ИндивидуальныйПредприниматель"));
			СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);	
		КонецЕсли;	
	КонецЕсли; 
	
	ЯчейкаСОтбором = НЕ Лев(ИмяЯчейки,12) = "s_200_01_010"
		И НЕ Лев(ИмяЯчейки,12) = "s_200_01_012"
		И НЕ Лев(ИмяЯчейки,12) = "s_200_01_018"
		И НЕ Лев(ИмяЯчейки,12) = "s_200_01_021"
		И НЕ Лев(ИмяЯчейки,12) = "s_200_01_016";	
	
	ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(ДатаНачала, ДатаОкончания, Неопределено, СтруктураПоФизЛицу,,,,,,ЯчейкаСОтбором);
	
КонецПроцедуры // Форма200_01Расшифровка()

///////////////////////////////////////////////////////////////
// Процедуры и функции для расчета(заполнения) формы 200.02

&НаКлиенте
Процедура Форма200_02ЗаполнитьАвто(Перезаполнить = Ложь) 
	                	
	Состояние("Расчет формы 200.02");		
	
	Форма200_02ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры // Форма200ЗаполнитьАвто()

&НаСервере
Процедура Форма200_02ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма200_02";

	ТекущаяСтраница = 1;
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы",ТекИмяФормы));
	
	Если СтрокаФормы <> Неопределено Тогда
		СтрокаФормы.ВсегоСтраниц = 1;
	КонецЕсли;     		
	
	Если НЕ Перезаполнить Тогда  
		Текст = НСтр("ru = 'Расчет приложения 200.02'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли;   
	
	СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПолучитьПорядокОбложенияДоходовРаботников(Налогоплательщик, КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)); 
        
	ВыборкаФИО = Форма200_02РассчитатьДанныеФормы(Истина).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
    
    СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, ТекИмяФормы);
    
    // используется в 200.02
	ОписаниеТиповСтрока12 = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12));
	ОписаниеТиповЧисло12  = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 0));
	
	ТаблицаСтандартныхВычетов = Новый ТаблицаЗначений;
	ТаблицаПрочихВычетов = Новый ТаблицаЗначений;
	ТаблицаНеоблагаемыхДоходов = Новый ТаблицаЗначений;
	
	ТаблицаСтандартныхВычетов.Колонки.Добавить("КодСтроки", ОписаниеТиповСтрока12);
	ТаблицаСтандартныхВычетов.Колонки.Добавить("Сумма", ОписаниеТиповЧисло12);
	
	ТаблицаПрочихВычетов.Колонки.Добавить("КодСтроки", ОписаниеТиповСтрока12);
	ТаблицаПрочихВычетов.Колонки.Добавить("Сумма", ОписаниеТиповЧисло12);

	ТаблицаНеоблагаемыхДоходов.Колонки.Добавить("КодСтроки");
	ТаблицаНеоблагаемыхДоходов.Колонки.Добавить("Сумма", ОписаниеТиповЧисло12);
    
    Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
        НомерСтроки = 2;
        ИмяГруппы = ЭлементСтруктуры.Ключ;
        ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
        ТаблицаСтрокГруппы.Очистить();
        
        КлючевыеПоляСтраница1 = Новый Структура("Ф200_02ФИОРезидента, Ф200_02ИИНРезидента, Ф200_02КодСтраныРезидента, Ф200_02КодСтраныГражданства, Ф200_02ПризнакРезидентства,
                                                |Ф200_02ФИОРезидента_Расшифровка, Ф200_02ФИОРезидента_Расшифровка, Ф200_02ИИНРезидента_Расшифровка, Ф200_02КодСтраныРезидента_Расшифровка, Ф200_02КодСтраныГражданства_Расшифровка, Ф200_02ПризнакРезидентства_Расшифровка");
        КлючевыеПоляСтраница2 = Новый Структура("Ф200_02НомерРегистрацииРезидента, Ф200_02ВидДокРезидента, Ф200_02НомерДокРезидента, Ф200_02ДатаДокРезидента,
                                                |Ф200_02НомерРегистрацииРезидента_Расшифровка, Ф200_02ВидДокРезидента_Расшифровка, Ф200_02НомерДокРезидента_Расшифровка, Ф200_02ДатаДокРезидента_Расшифровка");
        КлючевыеПоляСтраница3 = Новый Структура("Ф200_02КодДохРезидента, Ф200_02ВидДоговора, Ф200_02_НаименованиеДоговора, Ф200_02_КодСтраныДоговора, Ф200_02_МФЦА, Ф200_02_ФизЛицоСтруктурногоПодразделения, Ф200_02СтавкаНалога,
                                                |Ф200_02КодДохРезидента_Расшифровка, Ф200_02ВидДоговора_Расшифровка, Ф200_02_НаименованиеДоговора_Расшифровка, Ф200_02_КодСтраныДоговора_Расшифровка, Ф200_02_МФЦА_Расшифровка, Ф200_02_ФизЛицоСтруктурногоПодразделения_Расшифровка, Ф200_02СтавкаНалога_Расшифровка");
        
        ВыборкаФИО.Сбросить();
        
        Пока ВыборкаФИО.Следующий() Цикл 
            
            ВыборкаПоСтруктурному = ВыборкаФИО.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
            
            Пока ВыборкаПоСтруктурному.Следующий() Цикл                   	
                
                ТаблицаСтандартныхВычетов.Очистить();
                ТаблицаПрочихВычетов.Очистить();
                ТаблицаНеоблагаемыхДоходов.Очистить();
                
                ПерваяСтрокаСтандартныхВычетовЗаполнена = Ложь;
                ПерваяСтрокаПрочихВычетовЗаполнена = Ложь;
                ПерваяСтрокаНеоблагаемыхДоходовЗаполнена = Ложь;
                
                Ф200_02_ВидДохода = "";
				СуммаФ200_02_R = 0;
                СуммаФ200_02_S = 0;
                Ф200_02_СтандартныеВычеты = "";
                СуммаФ200_02_W = 0;
                Ф200_02_ПрочиеВычеты = "";
                СуммаФ200_02_Y = 0;
				
                Выборка = ВыборкаПоСтруктурному.Выбрать();
                // заполняем данные строки в форме отчета
                Элемент = ТаблицаСтрокГруппы.Добавить();   			 

                Пока Выборка.Следующий() Цикл
                    КодСтандартногоВычета   = "";
                    КодПрочегоВычета        = "";
                    КодНеОблагаемогоДохода  = "";
                    Если Выборка.КодСтроки <> "" 
                        И Выборка.ДоходыНеОблагаемыеИПН <> 0 Тогда
						
						Если ТипЗнч(Выборка.КодСтроки) = Тип("Строка") И 
								(СтрНайти(Выборка.КодСтроки, "341") <> 0 ИЛИ СтрНайти(Выборка.КодСтроки, "654") <> 0) Тогда
							НачалоСтатьиНК = СтрНайти(Выборка.КодСтроки, "341");
							Если НачалоСтатьиНК = 0 Тогда
								НачалоСтатьиНК = СтрНайти(Выборка.КодСтроки, "654");
							КонецЕсли;
							КодСтроки = СокрЛП(Сред(Выборка.КодСтроки, НачалоСтатьиНК, 10)); 
						Иначе
							КодСтроки = Выборка.КодСтроки;
						КонецЕсли;
						
						Если НЕ ПерваяСтрокаНеоблагаемыхДоходовЗаполнена Тогда                
                            Если ТипЗнч(КодСтроки) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций")  
                                ИЛИ (ТипЗнч(КодСтроки) = Тип("Строка")
                                И (СтрНайти(КодСтроки, "341") = 0
                                И СтрНайти(КодСтроки, "654") = 0)) Тогда
                                Если ТипЗнч(КодСтроки) = Тип("Строка") Тогда 
                                    Ф200_02_ВидДохода = Выборка.ВидВычета;
                                Иначе
                                    Ф200_02_ВидДохода = КодСтроки;
                                КонецЕсли;
                                СуммаФ200_02_R = Выборка.ДоходыНеОблагаемыеИПН;
                                ПерваяСтрокаНеоблагаемыхДоходовЗаполнена = Истина;
							Иначе
								ПерваяСтрокаНеоблагаемыхДоходовЗаполнена = Истина;
								Если СтрНайти(КодСтроки, "341") > 0 Тогда
									СуммаФ200_02_R = Выборка.ДоходыНеОблагаемыеИПН;
								ИначеЕсли СтрНайти(КодСтроки, "654") > 0  Тогда
									СуммаФ200_02_S = Выборка.ДоходыНеОблагаемыеИПН;
								КонецЕсли;
								Ф200_02_ВидДохода = КодСтроки;
							КонецЕсли;
                        Иначе
                            Строка = ТаблицаНеоблагаемыхДоходов.Добавить();
                            Если ТипЗнч(КодСтроки) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций")  
                                ИЛИ (ТипЗнч(КодСтроки) = Тип("Строка")
                                И (СтрНайти(КодСтроки, "341") = 0
                                И СтрНайти(КодСтроки, "654") = 0)) Тогда
                                Строка.КодСтроки = Выборка.ВидВычета;
                            Иначе
                                Строка.КодСтроки = КодСтроки;
                            КонецЕсли;
                            Строка.Сумма = Окр(Выборка.ДоходыНеОблагаемыеИПН);
                        КонецЕсли;
					КонецЕсли;
                    Если Выборка.ВидВычета <> ПредопределенноеЗначение("Справочник.ВычетыИПН.ПустаяСсылка") 
                        И Выборка.НалоговыеВычеты <> 0 Тогда
                        Если НЕ ПерваяСтрокаСтандартныхВычетовЗаполнена Тогда
                            ПерваяСтрокаСтандартныхВычетовЗаполнена = Истина;
                            СуммаФ200_02_W = Выборка.НалоговыеВычеты;   
                            Если Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.Стандартный1МЗП") Тогда
                                Ф200_02_СтандартныеВычеты = "1";
                            ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.Стандартный75МЗПИнвалиды") Тогда
                                Ф200_02_СтандартныеВычеты = "2";
                            ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.Стандартный75МЗПРодители") Тогда
                                Ф200_02_СтандартныеВычеты = "3";
                            КонецЕсли;
                        Иначе
                            Строка = ТаблицаСтандартныхВычетов.Добавить();
                            Если Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.Стандартный1МЗП") Тогда
                                Строка.КодСтроки = "1";
                            ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.Стандартный75МЗПИнвалиды") Тогда
                                Строка.КодСтроки = "2";
                            ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.Стандартный75МЗПРодители") Тогда
                                Строка.КодСтроки = "3";
                            КонецЕсли;
                            Строка.Сумма = Выборка.НалоговыеВычеты;
                        КонецЕсли;
                    КонецЕсли;
                    Если Выборка.ВидВычета <> ПредопределенноеЗначение("Справочник.ВычетыИПН.ПустаяСсылка") 
                        И (Выборка.ДобровольныеПенсионныеВзносы <> 0 
                        ИЛИ Выборка.НаОплатуМедицинскихУслуг <> 0
                        ИЛИ Выборка.ПогашениеЖилищныхЗаймов <> 0) Тогда
                        Если НЕ ПерваяСтрокаПрочихВычетовЗаполнена Тогда
                            ПерваяСтрокаПрочихВычетовЗаполнена = Истина;
                            Если Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.ДобровольныеПенсионныеВзносы") Тогда
                                Ф200_02_ПрочиеВычеты = "1";
                                СуммаФ200_02_Y = Выборка.ДобровольныеПенсионныеВзносы;  
							ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.НаОплатуМедицинскихУслуг") Тогда
                                Ф200_02_ПрочиеВычеты = "2";
                                СуммаФ200_02_Y = Выборка.НаОплатуМедицинскихУслуг; 
							ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.ПогашениеВознагражденияПоЖилищнымЗаймам") Тогда
                                Ф200_02_ПрочиеВычеты = "3";
                                СуммаФ200_02_Y = Выборка.ПогашениеЖилищныхЗаймов;  
							КонецЕсли;
                        Иначе
                            Строка = ТаблицаПрочихВычетов.Добавить();
                            Если Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.ДобровольныеПенсионныеВзносы") Тогда
                                Строка.КодСтроки = "1";
                                Строка.Сумма = Выборка.ДобровольныеПенсионныеВзносы;
                            ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.НаОплатуМедицинскихУслуг") Тогда
                                Строка.КодСтроки = "2";
                                Строка.Сумма = Выборка.НаОплатуМедицинскихУслуг;
                            ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.ПогашениеВознагражденияПоЖилищнымЗаймам") Тогда
                                Строка.КодСтроки = "3";
                                Строка.Сумма = Выборка.ПогашениеЖилищныхЗаймов;
                            КонецЕсли;
                        КонецЕсли;
                    КонецЕсли;
                    
                    Если ИмяГруппы = "Страница1" Тогда
                        //Так должны заполнять по отдельности значения выборки 
                        //для каждого листа
                        Элемент.Ф200_02_A1 = Формат(НомерСтроки, мФорматНомераСтроки);
                        Элемент.Ф200_02ФИОРезидента = Выборка.ФИОФизЛица;
                        
                        Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.ИИН) Тогда  					
                            СтрокаИИН = Выборка.ИИН;
                        Иначе
                            СтрокаИИН = "";
                            
                            ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа C ""ИИН"",
                            |т.к. значение содержит символы, отличные от цифр'");
                            
                            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки)));
                            
                        КонецЕсли;
                        
                        Элемент.Ф200_02ИИНРезидента = СтрокаИИН;
                        
                        ПризнакРезидентства = Выборка.НеЯвляетсяНалоговымРезидентомРК;
                        Элемент.Ф200_02ПризнакРезидентства = ?(ПризнакРезидентства, СтруктураРеквизитовФормы.ОтметкаНерезидентов, СтруктураРеквизитовФормы.ОтметкаРезидентов);
                        
                        Элемент.Ф200_02КодСтраныРезидента = ?(ПризнакРезидентства, Выборка.КодСтраны, "KZ");
                        Элемент.Ф200_02КодСтраныГражданства = ?(ЗначениеЗаполнено(Выборка.КодСтраныГражданства), Выборка.КодСтраныГражданства, "00");
                        
                        РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф200_02ФИОРезидента",        Выборка.ФизЛицо);
                        РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф200_02ИИНРезидента",        Выборка.ФизЛицо);
                        //РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф200_02КодСтраныРезидента",  Выборка.ФизЛицо);
                        РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф200_02ПризнакРезидентства", Выборка.ФизЛицо);					
                        
                    ИначеЕсли ИмяГруппы = "Страница2" Тогда
                        Элемент.Ф200_02_A2 = Формат(НомерСтроки, мФорматНомераСтроки);
                        Элемент.Ф200_02НомерРегистрацииРезидента = Выборка.НомерРегистрации;
                        
                        Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.КодВидаДокументаВНалоговойОтчетности) Тогда
                            КодВидаДокументаВНалоговойОтчетности = Выборка.КодВидаДокументаВНалоговойОтчетности;					
                        Иначе
                            КодВидаДокументаВНалоговойОтчетности = "";
                            
                            ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа H ""Код вида документа"",
                            |т.к. значение содержит символы, отличные от цифр'");
                            
                            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки)));
                            
                        КонецЕсли;
                        
                        Элемент.Ф200_02ВидДокРезидента   = КодВидаДокументаВНалоговойОтчетности;
                        Элемент.Ф200_02НомерДокРезидента = Выборка.НомерДокумента;
                        Элемент.Ф200_02ДатаДокРезидента  = Выборка.ДатаДокумента;
                        
                        РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф200_02НомерРегистрацииРезидента", Выборка.ФизЛицо);					
                        
                    ИначеЕсли ИмяГруппы = "Страница3" Тогда
                        Элемент.Ф200_02_A3 = Формат(НомерСтроки,мФорматНомераСтроки);
						Если Элемент.Ф200_02КодДохРезидента = Неопределено Тогда 
							Если СтрНайти(Выборка.КодСтроки, "E") = 1 Тогда
								КодДохРезидента = "1020";	
							ИначеЕсли Налогоплательщик.ИностраннаяОрганизация Тогда
								КодДохРезидента = "1210";
							Иначе
								КодДохРезидента = "1200";
							КонецЕсли;
							Элемент.Ф200_02КодДохРезидента = КодДохРезидента;
						КонецЕсли;
                        Элемент.Ф200_02СтавкаНалога = 10;
                        Элемент.Ф200_02_ФизЛицоСтруктурногоПодразделения = ?(Выборка.ФизЛицоСтруктурногоПодразделения = 1, "Х", "");
                    ИначеЕсли ИмяГруппы = "Страница4" Тогда
                        Элемент.Ф200_02_A4 = Формат(НомерСтроки, мФорматНомераСтроки);									
                        Элемент.Ф200_02_P = ВыборкаПоСтруктурному.НачисленоДоходов;
                        Если СуммаФ200_02_R <> 0 
                            И ТипЗнч(Ф200_02_ВидДохода) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
                            Элемент.Ф200_02_ВидДохода = "";
                            ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'При заполнении приложения 200.02 для вида расчета <%1> не задан код строки Декларации!'"),
                            Строка(Ф200_02_ВидДохода));                    
                            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ф200_02_ВидДохода);
                        Иначе
                            Элемент.Ф200_02_ВидДохода = Ф200_02_ВидДохода;
                        КонецЕсли;
                        Элемент.Ф200_02_R = СуммаФ200_02_R;
                        Элемент.Ф200_02_S = СуммаФ200_02_S; 
					ИначеЕсли ИмяГруппы = "Страница5" Тогда
                        Элемент.Ф200_02_A5 = Формат(НомерСтроки,мФорматНомераСтроки);
                        Элемент.Ф200_02_T = ВыборкаПоСтруктурному.ОбязательныеПенсионныеВзносы;
                        Элемент.Ф200_02_U = ВыборкаПоСтруктурному.СуммаВОСМС;
                        Элемент.Ф200_02_W = СуммаФ200_02_W;
                        Элемент.Ф200_02_СтандартныеВычеты = Ф200_02_СтандартныеВычеты;
                    ИначеЕсли ИмяГруппы = "Страница6" Тогда
						Элемент.Ф200_02_A6 = Формат(НомерСтроки, мФорматНомераСтроки);
                        Элемент.Ф200_02_Z = ВыборкаПоСтруктурному.ИндивидуальныйПодоходныйНалог;
                        Элемент.Ф200_02_ПрочиеВычеты = Ф200_02_ПрочиеВычеты;
                        Элемент.Ф200_02_Y = СуммаФ200_02_Y; 
                        Элемент.Ф200_02_AA = ВыборкаПоСтруктурному.ЗадолженностьПоДоходам; //сумма задолженности за квартал	
                    ИначеЕсли ИмяГруппы = "Страница7" Тогда
                        Элемент.Ф200_02_A7 = Формат(НомерСтроки, мФорматНомераСтроки);	
 						Элемент.Ф200_02_AB = ВыборкаПоСтруктурному.ВыплаченоДоходов;
                        Элемент.Ф200_02_AC = ВыборкаПоСтруктурному.ИПНПодлежащийПеречислению;
                        Элемент.Ф200_02_AD = ВыборкаПоСтруктурному.ОПВПодлежащийПеречислению; //ОПВ к перечислению
                        Элемент.Ф200_02_AE = ВыборкаПоСтруктурному.ВОСМСПодлежащийПеречислению;  //ВОСМС к перечислению					
					ИначеЕсли ИмяГруппы = "Страница8" Тогда
                        Элемент.Ф200_02_A8 = Формат(НомерСтроки, мФорматНомераСтроки);
                        Элемент.Ф200_02_AF = 0;//не автоматизировано заполнение				
                        Элемент.Ф200_02_AG = ВыборкаПоСтруктурному.ВыплатыОблагаемыеСН;
						Если НЕ СтруктураРеквизитовФормы.ОрганизацияПлательщикРозничногоНалога Тогда
                        	Элемент.Ф200_02_AH = ?(Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо,
                                                ВыборкаПоСтруктурному.СНИсчисленный,
                                                ВыборкаПоСтруктурному.СоциальныеНалог + ВыборкаПоСтруктурному.СоциальныеОтчисления);
						Иначе
							Элемент.Ф200_02_AH = 0;
						Конецесли;
                        Элемент.Ф200_02_AI = ВыборкаПоСтруктурному.СоциальныеОтчисления;	
                    ИначеЕсли ИмяГруппы = "Страница9" Тогда
                        Элемент.Ф200_02_A9 = Формат(НомерСтроки, мФорматНомераСтроки);
						Если НЕ СтруктураРеквизитовФормы.ОрганизацияПлательщикРозничногоНалога Тогда
                        	Элемент.Ф200_02_AJ = ВыборкаПоСтруктурному.СоциальныеНалог; // СН, подлежащий уплате в бюджет  
						Иначе 
							Элемент.Ф200_02_AJ = 0;
						Конецесли;
                        Элемент.Ф200_02_AK = ВыборкаПоСтруктурному.ОбязательныеПрофессиональныеПенсионныеВзносы; // ОППВ подлежащие уплате в бюджет 
                        Элемент.Ф200_02_AL = ВыборкаПоСтруктурному.СуммаООСМС;
						Элемент.Ф200_02_AM = ВыборкаПоСтруктурному.ОбязательныеПенсионныеВзносыРаботодателя;
                    КонецЕсли;
                    
                КонецЦикла;
                ТаблицаСтандартныхВычетов.Свернуть("КодСтроки", "Сумма");
                ТаблицаПрочихВычетов.Свернуть("КодСтроки", "Сумма");
                ТаблицаНеоблагаемыхДоходов.Свернуть("КодСтроки", "Сумма");
                
                КоличествоТаблицаСтандартныхВычетов = ТаблицаСтандартныхВычетов.Количество();
                КоличествоТаблицаПрочихВычетов = ТаблицаПрочихВычетов.Количество();
                КоличествоНеоблагаемыхДоходов = ТаблицаНеоблагаемыхДоходов.Количество();
                
                Если ИмяГруппы = "Страница1" Тогда
                    ЗаполнитьЗначенияСвойств(КлючевыеПоляСтраница1, Элемент);
                ИначеЕсли ИмяГруппы = "Страница2" Тогда
                    ЗаполнитьЗначенияСвойств(КлючевыеПоляСтраница2, Элемент);
                ИначеЕсли ИмяГруппы = "Страница3" Тогда
                    ЗаполнитьЗначенияСвойств(КлючевыеПоляСтраница3, Элемент);
                КонецЕсли;
                
                МаксимальноеКоличествоСтрок = Макс(КоличествоТаблицаСтандартныхВычетов, КоличествоТаблицаПрочихВычетов, КоличествоНеоблагаемыхДоходов);
                
                Счетчик = 0;
                
                Пока Счетчик < МаксимальноеКоличествоСтрок Цикл
                    
                    НомерСтроки = НомерСтроки + 1;
                    Счетчик = Счетчик + 1;
                    
                    // заполняем данные строки в форме отчета
                    Элемент = ТаблицаСтрокГруппы.Добавить(); 
                    Если ИмяГруппы = "Страница1" Тогда
                        Элемент.Ф200_02_A1 = Формат(НомерСтроки, мФорматНомераСтроки);
                        ЗаполнитьЗначенияСвойств(Элемент, КлючевыеПоляСтраница1); 
                    ИначеЕсли ИмяГруппы = "Страница2" Тогда
                        Элемент.Ф200_02_A2 = Формат(НомерСтроки, мФорматНомераСтроки);
                        ЗаполнитьЗначенияСвойств(Элемент, КлючевыеПоляСтраница2); 
                    ИначеЕсли ИмяГруппы = "Страница3" Тогда
                        Элемент.Ф200_02_A3 = Формат(НомерСтроки, мФорматНомераСтроки);
                        ЗаполнитьЗначенияСвойств(Элемент, КлючевыеПоляСтраница3); 
                    ИначеЕсли ИмяГруппы = "Страница4" Тогда
                        Элемент.Ф200_02_A4 = Формат(НомерСтроки, мФорматНомераСтроки);
                        Если КоличествоНеоблагаемыхДоходов >= Счетчик Тогда
                            Если ТипЗнч(ТаблицаНеоблагаемыхДоходов[Счетчик - 1].КодСтроки) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций")
                                И ТаблицаНеоблагаемыхДоходов[Счетчик - 1].Сумма <> 0 Тогда
                                Элемент.Ф200_02_ВидДохода = "";
                                ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'При заполнении приложения 200.02 для вида расчета <%1> не задан код строки Декларации!'"),
                                Строка(ТаблицаНеоблагаемыхДоходов[Счетчик - 1].КодСтроки));                    
                                ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ТаблицаНеоблагаемыхДоходов[Счетчик - 1].КодСтроки);
                            Иначе
                                Элемент.Ф200_02_ВидДохода = ТаблицаНеоблагаемыхДоходов[Счетчик - 1].КодСтроки;
                            КонецЕсли;		
							Если СтрНайти(ТаблицаНеоблагаемыхДоходов[Счетчик - 1].КодСтроки, "654") > 0 Тогда
                                Элемент.Ф200_02_S = ТаблицаНеоблагаемыхДоходов[Счетчик - 1].Сумма;
                            Иначе
                                Элемент.Ф200_02_R = ТаблицаНеоблагаемыхДоходов[Счетчик - 1].Сумма;
							КонецЕсли;
						КонецЕсли;
                    ИначеЕсли ИмяГруппы = "Страница5" Тогда
                        Элемент.Ф200_02_A5 = Формат(НомерСтроки,мФорматНомераСтроки);
                        Если КоличествоТаблицаСтандартныхВычетов >= Счетчик Тогда                    
                            Элемент.Ф200_02_СтандартныеВычеты = ТаблицаСтандартныхВычетов[Счетчик - 1].КодСтроки;
                            Элемент.Ф200_02_W = ТаблицаСтандартныхВычетов[Счетчик - 1].Сумма;
						КонецЕсли;
                    ИначеЕсли ИмяГруппы = "Страница6" Тогда
                        Элемент.Ф200_02_A6 = Формат(НомерСтроки, мФорматНомераСтроки);
                        Если КоличествоТаблицаПрочихВычетов >= Счетчик Тогда
                            Элемент.Ф200_02_ПрочиеВычеты = ТаблицаПрочихВычетов[Счетчик - 1].КодСтроки;
                            Элемент.Ф200_02_Y = ТаблицаПрочихВычетов[Счетчик - 1].Сумма;
                        КонецЕсли;
                    ИначеЕсли ИмяГруппы = "Страница7" Тогда
                        Элемент.Ф200_02_A7 = Формат(НомерСтроки, мФорматНомераСтроки);
                    ИначеЕсли ИмяГруппы = "Страница8" Тогда
                        Элемент.Ф200_02_A8 = Формат(НомерСтроки, мФорматНомераСтроки);
                    ИначеЕсли ИмяГруппы = "Страница9" Тогда
                        Элемент.Ф200_02_A9 = Формат(НомерСтроки, мФорматНомераСтроки);                   
                    КонецЕсли;
                    
                КонецЦикла;
                
                НомерСтроки = НомерСтроки + 1;
                
            КонецЦикла;  
        КонецЦикла;
    КонецЦикла;	  			 
    
    РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы,СтруктураФормы); 	 
    РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма,ТекИмяФормы);	
    РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма,ТекИмяФормы,Перезаполнить);     
    
    РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтаФорма);
    
    ТекущаяСтраница = СтрокаФормы.ВсегоСтраниц;  		
	
	 	      	 
КонецПроцедуры // Форма200_02ЗаполнитьАвто()

&НаСервере
Процедура Форма200_02РасчетНаСервере(Инд,Колонка)
	
	Перем СтруктураГруппы;
	
	КодФормы = "Форма200_02";  	
	Индекс = Инд-1;

    мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, КодФормы);
	мМногострочнаяСтруктура.Свойство("Страница4" ,СтруктураГруппы);
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
	
	//рассчитаем вычисляемые ячейки	
	// Y Выплаты, облагаемые социальным налогом (O - AA - Q)
	P = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф200_02_P = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф200_02_P);
	S = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф200_02_S = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф200_02_S);

    мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, КодФормы);
	мМногострочнаяСтруктура.Свойство("Страница5" ,СтруктураГруппы);
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
	//T = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф200_02_T = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф200_02_T); на стр 4 S	
	//U = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф200_02_U = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф200_02_U); на стр 5 T
	T = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф200_02_T = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф200_02_T);
								
	мМногострочнаяСтруктура.Свойство("Страница8" ,СтруктураГруппы);
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
	AF = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф200_02_AF = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф200_02_AF);

	ТаблицаСтрокГруппы.Получить(Индекс).Ф200_02_AG = P - S - T - AF;
	Форма200_02ПолеТабличногоДокументаСтраница8.Области["Ф200_02_AG__"+ Строка(Инд)].Значение = P - S - T - AF;
	Если ТекущаяСтраница <> Неопределено И ТекущаяСтраница = 1 Тогда 
	 	Форма200_02ПолеТабличногоДокументаСтраница8.Области["Ф200_02_AG"].Значение = ТаблицаСтрокГруппы.Итог("Ф200_02_AG"); 
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтаФорма, КодФормы,мМногострочнаяСтруктура);
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма,"Страница8", "Ф200_02_AG", ТаблицаСтрокГруппы.Итог("Ф200_02_AG"), Ложь); 

	Модифицированность = Истина;
	
КонецПроцедуры // Форма200_02Расчет()

&НаКлиенте
Процедура Форма200_02ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СсылкаРасшифровки = ВыбранноеЗначение;
	
	ОбластьРасшифровки = ЭтаФорма.ТекущийЭлемент.ТекущаяОбласть;	
	НомерСтроки = Сред(ОбластьРасшифровки.Имя, Найти(ОбластьРасшифровки.Имя, "__") + 2);
	
    Если ВРег(ИсточникВыбора.ИмяФормы) = ?(СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0, ВРег("ВнешнийОтчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора"), 
        ВРег("Отчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора")) Тогда
        Если ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КодыВидовДоходов2022")  
            ИЛИ ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КодыВидовДокументов")
            ИЛИ ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КодыСтандартныхВычетов2021")  
            ИЛИ ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КодыПрочихВычетов2021")
            ИЛИ ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КодыВидовДоходовНеПодлежащихНалогообложению200_02") Тогда 			
            Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
                ОбластьРасшифровки.Значение = ВыбранноеЗначение;	
            Иначе
                ОбластьРасшифровки.Значение = ВыбранноеЗначение.КодСтроки;
            КонецЕсли;
            ИмяСтраницы = "Страница" + Прав(ЭтаФорма.ТекущийЭлемент.Имя,1);			
            ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ОбластьРасшифровки.Имя,ОбластьРасшифровки.Значение);						
        ИначеЕсли ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КодыВидовДоговоров2021") Тогда 
            Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
                ОбластьРасшифровки.Значение = ВыбранноеЗначение;	
            Иначе
                НомерСтроки = Сред(ОбластьРасшифровки.Имя, Найти(ОбластьРасшифровки.Имя, "__") + 2);
				
				НаименованиеДоговора = СокрЛП(ВыбранноеЗначение.Наименование);
				Если СтрНайти(НаименованиеДоговора, "Пустое значение") Тогда
					НаименованиеДоговора = "";
				КонецЕсли;
                
                Если Найти(ОбластьРасшифровки.Имя, "ВидДоговора") > 0 Тогда 
                    ОбластьНаименование = "Ф200_02_НаименованиеДоговора__" + НомерСтроки;
                    ОбластьРасшифровки.Значение = ВыбранноеЗначение.КодСтроки;
                    Форма200_02ПолеТабличногоДокументаСтраница3.Области[ОбластьНаименование].Значение = НаименованиеДоговора;	
                    
                    ПередатьЗначениеВМногострочнуюСтруктуру("Страница3", ОбластьНаименование, НаименованиеДоговора);
                ИначеЕсли Найти(ОбластьРасшифровки.Имя, "НаименованиеДоговора") > 0 Тогда
                    ОбластьВидДоговора = "Ф200_02ВидДоговора__" + НомерСтроки;
                    ОбластьРасшифровки.Значение = НаименованиеДоговора;
                    Форма200_02ПолеТабличногоДокументаСтраница3.Области[ОбластьВидДоговора].Значение = ВыбранноеЗначение.КодСтроки;
                    
                    ПередатьЗначениеВМногострочнуюСтруктуру("Страница3", ОбластьВидДоговора, ВыбранноеЗначение.КодСтроки);
                КонецЕсли;
            КонецЕсли;
            ИмяСтраницы = "Страница" + Прав(ЭтаФорма.ТекущийЭлемент.Имя,1);			
            ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ОбластьРасшифровки.Имя,ОбластьРасшифровки.Значение);         
        КонецЕсли;
    КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Форма200_02ОбработкаПодбораНаСервере(Расшифровка, ИмяЯчейки, ИмяГруппы, НомерСтроки) Экспорт   

	Если ИмяЯчейки = "Ф200_02ФИОРезидента" Тогда
		СсылкаФизЛица = Расшифровка;
		
		ОбластьНаименование = "Ф200_02ФИОРезидента__" + НомерСтроки;		
		ОбластьИИН = "Ф200_02ИИНРезидента__" + НомерСтроки;
		ОбластьКодСтраны = "Ф200_02КодСтраныРезидента__" + НомерСтроки;
   		ОбластьКодСтраныГражданства = "Ф200_02КодСтраныГражданства__" + НомерСтроки;
		ОбластьНомерРегистрации = "Ф200_02НомерРегистрацииРезидента__" + НомерСтроки;
		ОбластьПризнакРезидентства = "Ф200_02ПризнакРезидентства__" + НомерСтроки;
		
		Если ТипЗнч(Расшифровка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			// Определим сведения о полном ФИО, РНН, ИИН
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("парамФизЛицо", 	СсылкаФизЛица);
			Запрос.УстановитьПараметр("парамПериодПо", 	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			Запрос.УстановитьПараметр("парамНачГода", 	НачалоГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
			Запрос.УстановитьПараметр("парамПустаяДата", '00010101');
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	ФизическиеЛица.Наименование КАК Наименование,
			               |	ФизическиеЛица.РНН КАК РНН,
			               |	ФизическиеЛица.ИдентификационныйКодЛичности КАК ИИН
			               |ПОМЕСТИТЬ ФизическиеЛица
			               |ИЗ
			               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
			               |ГДЕ
			               |	ФизическиеЛица.Ссылка = &парамФизЛицо
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ГражданствоФизЛицСрезПоследних.Период КАК Период,
			               |	ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НомерНалоговойРегистрацииВСтранеРезидентства, """") КАК НомерНалоговойРегистрацииВСтранеРезидентства,
			               |	ГражданствоФизЛицСрезПоследних.Страна,
			               |	ВЫБОР
			               |		КОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ)
			               |			ТОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
			               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
			               |	КОНЕЦ КАК СтранаРезидентства,
			               |	ВЫБОР
			               |		КОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
			               |			ТОГДА ЛОЖЬ
			               |		ИНАЧЕ ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРК, ИСТИНА)
			               |	КОНЕЦ КАК НеЯвляетсяНалоговымРезидентомРК
			               |ПОМЕСТИТЬ ГражданствоФизЛиц
			               |ИЗ
			               |	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамПериодПо, ФизЛицо = &парамФизЛицо) КАК ГражданствоФизЛицСрезПоследних
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВЫБОР
			               |		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL 
			               |			ТОГДА ФизическиеЛица.Наименование
			               |		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
			               |				КОГДА ФИОФизЛиц.Имя <> """"
			               |					ТОГДА "" "" + ФИОФизЛиц.Имя
			               |				ИНАЧЕ """"
			               |			КОНЕЦ + ВЫБОР
			               |				КОГДА ФИОФизЛиц.Отчество <> """"
			               |					ТОГДА "" "" + ФИОФизЛиц.Отчество
			               |				ИНАЧЕ """"
			               |			КОНЕЦ
			               |	КОНЕЦ КАК ФИО,
			               |	ФизическиеЛица.РНН КАК РНН,
			               |	ФизическиеЛица.ИИН КАК ИИН,
                           |	ВЫБОР 
                           |       КОГДА ГражданствоФизЛиц.СтранаРезидентства = КлассификаторСтранМира.Ссылка 
                           |           ТОГДА ЕСТЬNULL(КлассификаторСтранМира.КодАльфа2, """")
                           |       ИНАЧЕ """"
                           |    КОНЕЦ КАК КодСтраны,
                           |	ВЫБОР 
                           |       КОГДА ГражданствоФизЛиц.Страна = КлассификаторСтранМира.Ссылка 
                           |           ТОГДА ЕСТЬNULL(КлассификаторСтранМира.КодАльфа2, """")
                           |       ИНАЧЕ """"
                           |    КОНЕЦ КАК КодСтраныГражданства,
			               |	ГражданствоФизЛиц.НомерНалоговойРегистрацииВСтранеРезидентства КАК НомерНалоговойРегистрацииВСтранеРезидентства,
			               |	ГражданствоФизЛиц.Страна,
			               |	ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК КАК НеЯвляетсяНалоговымРезидентомРК,
			               |	ГражданствоФизЛиц.СтранаРезидентства
			               |ИЗ
			               |	ФизическиеЛица КАК ФизическиеЛица
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамПериодПо, ФизЛицо = &парамФизЛицо) КАК ФИОФизЛиц
			               |		ПО (ИСТИНА)
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ГражданствоФизЛиц КАК ГражданствоФизЛиц
			               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
			               |			ПО ГражданствоФизЛиц.Страна = КлассификаторСтранМира.Ссылка
			               |		ПО (ИСТИНА)";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
													  
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.ИИН) Тогда
					СтрокаИИН = Выборка.ИИН;
				Иначе
					СтрокаИИН = "";
					ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа D ""ИИН"",
							  |т.к. значение содержит символы, отличные от цифр'");
							  
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,  Формат(НомерСтроки+1,мФорматНомераСтроки)));
							  
				КонецЕсли;
				
				
				НомерРегистрации 	= Выборка.НомерНалоговойРегистрацииВСтранеРезидентства;
				ПризнакРезидентства = Выборка.НеЯвляетсяНалоговымРезидентомРК;
				
				Если Не ЗначениеЗаполнено(ПризнакРезидентства) Тогда 
					ТекстСообщения = НСтр("ru = 'Для ""%1"" не заполнена информация о гражданстве.
							  |Для физического лица признак ""Не является налоговым резидентом РК"" установлен в ""ИСТИНА""'");
							  
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,  Выборка.ФИО));
					
					ПризнакРезидентства = Истина;
				КонецЕсли;
				
				КодСтраны            = ?(ПризнакРезидентства, Выборка.КодСтраны, "KZ");
				КодСтраныГражданства = ?(Выборка.Страна = Справочники.КлассификаторСтранМира.Казахстан ИЛИ Выборка.Страна = Null, "",
					?(ЗначениеЗаполнено(Выборка.КодСтраныГражданства), Выборка.КодСтраныГражданства, "00"));
					
				Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьПризнакРезидентства].Значение = ?(ПризнакРезидентства, СтруктураРеквизитовФормы.ОтметкаНеРезидентов,СтруктураРеквизитовФормы.ОтметкаРезидентов);				
				Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьНаименование].Значение = Выборка.ФИО;				
				Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение 			= СтрокаИИН;
				Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраны].Значение 		= КодСтраны;
   				Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраныГражданства].Значение   = КодСтраныГражданства;
				Форма200_02ПолеТабличногоДокументаСтраница2.Области[ОбластьНомерРегистрации].Значение       = НомерРегистрации;
				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьНаименование, 		Выборка.ФИО, ,СсылкаФизЛица);				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьИИН, 				Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение, , СсылкаФизЛица);
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьКодСтраны, 			Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраны].Значение, ,СсылкаФизЛица);				
   				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьКодСтраныГражданства, Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраныГражданства].Значение, ,СсылкаФизЛица);				
                РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьПризнакРезидентства, ?(ПризнакРезидентства, СтруктураРеквизитовФормы.ОтметкаНЕРезидентов, СтруктураРеквизитовФормы.ОтметкаРезидентов), ,СсылкаФизЛица);

				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница2", ОбластьНомерРегистрации, Форма200_02ПолеТабличногоДокументаСтраница2.Области[ОбластьНомерРегистрации].Значение, , СсылкаФизЛица);
						
			КонецЕсли;
		
		Иначе // если тип Расшифровка "Контрагент"
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("парамКонтрагент"	, СсылкаФизЛица);
			Запрос.УстановитьПараметр("парамПериодПо", 	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Контрагенты.Наименование КАК Контрагент,
			|	Контрагенты.ИдентификационныйКодЛичности КАК ИИН,
			|	Контрагенты.РНН КАК РНН,
			|	Контрагенты.ФизЛицо КАК ФизЛицо
			|ПОМЕСТИТЬ Контрагенты
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Ссылка = &парамКонтрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НомерНалоговойРегистрацииВСтранеРезидентства, """") КАК НомерНалоговойРегистрацииВСтранеРезидентства,
			|	ГражданствоФизЛицСрезПоследних.Страна КАК Страна,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ)
			|			ТОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
			|	КОНЕЦ КАК СтранаРезидентства,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.НеЯвляетсяНалоговымРезидентомРК, ИСТИНА)
			|	КОНЕЦ КАК НеЯвляетсяНалоговымРезидентомРК
			|ПОМЕСТИТЬ ГражданствоФизЛиц
			|ИЗ
			|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(
			|			&парамПериодПо,
			|			ФизЛицо В
			|				(ВЫБРАТЬ
			|					Контрагенты.ФизЛицо
			|				ИЗ
			|					Контрагенты КАК Контрагенты)) КАК ГражданствоФизЛицСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL
			|			ТОГДА Контрагенты.Контрагент
			|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
			|				КОГДА ФИОФизЛиц.Имя <> """"
			|					ТОГДА "" "" + ФИОФизЛиц.Имя
			|				ИНАЧЕ """"
			|			КОНЕЦ + ВЫБОР
			|				КОГДА ФИОФизЛиц.Отчество <> """"
			|					ТОГДА "" "" + ФИОФизЛиц.Отчество
			|				ИНАЧЕ """"
			|			КОНЕЦ
			|	КОНЕЦ КАК ФИО,
			|	Контрагенты.РНН КАК РНН,
			|	Контрагенты.ИИН КАК ИИН,
			|	ВЫБОР 
            |       КОГДА ГражданствоФизЛиц.СтранаРезидентства = КлассификаторСтранМира.Ссылка 
            |           ТОГДА ЕСТЬNULL(КлассификаторСтранМира.КодАльфа2, """")
            |       ИНАЧЕ """"
            |   КОНЕЦ КАК КодСтраны,
   			|	ВЫБОР 
            |       КОГДА ГражданствоФизЛиц.Страна = КлассификаторСтранМира.Ссылка 
            |           ТОГДА ЕСТЬNULL(КлассификаторСтранМира.КодАльфа2, """")
            |       ИНАЧЕ """"
            |   КОНЕЦ КАК КодСтраныГражданства,
			|	ГражданствоФизЛиц.НомерНалоговойРегистрацииВСтранеРезидентства КАК НомерНалоговойРегистрацииВСтранеРезидентства,
			|	ГражданствоФизЛиц.Страна КАК Страна,
			|	ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК КАК НеЯвляетсяНалоговымРезидентомРК
			|ИЗ
			|	Контрагенты КАК Контрагенты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
			|				&парамПериодПо,
			|				ФизЛицо В
			|					(ВЫБРАТЬ
			|						Контрагенты.ФизЛицо
			|					ИЗ
			|						Контрагенты КАК Контрагенты)) КАК ФИОФизЛиц
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ГражданствоФизЛиц КАК ГражданствоФизЛиц
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
			|			ПО ГражданствоФизЛиц.Страна = КлассификаторСтранМира.Ссылка
			|		ПО (ИСТИНА)";
			
			Выборка = Запрос.Выполнить().Выбрать();
									
			Если Выборка.Следующий() Тогда
											
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.ИИН) Тогда
					СтрокаИИН = Выборка.ИИН;
				Иначе
					СтрокаИИН = "";
					
					
					ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа D ""ИИН"",
							  |т.к. значение содержит символы, отличные от цифр'");
							  
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,  Формат(НомерСтроки+1, мФорматНомераСтроки)));
					
				КонецЕсли;
				
				НомерРегистрации 	= Выборка.НомерНалоговойРегистрацииВСтранеРезидентства;
				Если Не ЗначениеЗаполнено(Выборка.НеЯвляетсяНалоговымРезидентомРК) Тогда
					ПризнакРезидентства = Ложь;
				Иначе
					ПризнакРезидентства = Выборка.НеЯвляетсяНалоговымРезидентомРК;
				КонецЕсли;
				
				НомерРегистрации = Выборка.НомерНалоговойРегистрацииВСтранеРезидентства;
				
				КодСтраны            = ?(ПризнакРезидентства, Выборка.КодСтраны, "KZ");
				КодСтраныГражданства = ?(Выборка.Страна = Справочники.КлассификаторСтранМира.Казахстан ИЛИ Выборка.Страна = Null, "",
					?(ЗначениеЗаполнено(Выборка.КодСтраныГражданства), Выборка.КодСтраныГражданства, "00"));
				
				Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьНаименование].Значение = Выборка.ФИО;				
				Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение          = СтрокаИИН;			
				Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраны].Значение    = КодСтраны;
  				Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраныГражданства].Значение = КодСтраныГражданства;
				Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьПризнакРезидентства].Значение  = ?(ПризнакРезидентства, СтруктураРеквизитовФормы.ОтметкаНЕРезидентов, СтруктураРеквизитовФормы.ОтметкаРезидентов);
				Форма200_02ПолеТабличногоДокументаСтраница2.Области[ОбластьНомерРегистрации].Значение     = НомерРегистрации;
				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьНаименование, Выборка.ФИО,,СсылкаФизЛица);				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьИИН, Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение,,СсылкаФизЛица);
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьПризнакРезидентства, ?(ПризнакРезидентства, СтруктураРеквизитовФормы.ОтметкаНеРезидентов, СтруктураРеквизитовФормы.ОтметкаРезидентов),,СсылкаФизЛица);
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьКодСтраны, Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраны].Значение,,СсылкаФизЛица);
   				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьКодСтраныГражданства, Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьКодСтраныГражданства].Значение,,СсылкаФизЛица);
                РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница2", ОбластьНомерРегистрации, Форма200_02ПолеТабличногоДокументаСтраница2.Области[ОбластьНомерРегистрации].Значение,,СсылкаФизЛица);
				 
			КонецЕсли;  			
		КонецЕсли; 
		
		Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьНаименование].Расшифровка        = СсылкаФизЛица;				
		Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Расшифровка 			    = СсылкаФизЛица;			
		Форма200_02ПолеТабличногоДокументаСтраница1.Области[ОбластьПризнакРезидентства].Расшифровка = СсылкаФизЛица;
		Форма200_02ПолеТабличногоДокументаСтраница2.Области[ОбластьНомерРегистрации].Расшифровка 	= СсылкаФизЛица;
		
	КонецЕсли;
		
КонецПроцедуры 

&НаСервере
Функция Форма200_02РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
	//должен быть предрасчет
	Запрос =  Новый Запрос;
	Запрос.УстановитьПараметр("парамНалогоплательщик", 		Налогоплательщик);
	Запрос.УстановитьПараметр("парамПериодС", 				НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПериодПо", 				КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПослеПериодПо", 		КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) + 1);
	Запрос.УстановитьПараметр("парамПриход",				ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамРасход",				ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("парамВидСтрокиИсчисление",	Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежаНалог",		Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	Запрос.УстановитьПараметр("парамНеОблагаетсяЦеликом",	Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом);
	Запрос.УстановитьПараметр("парамФизЛицо",				Перечисления.ЮрФизЛицо.ФизЛицо);
	Запрос.УстановитьПараметр("парамПустаяДата",			'00010101');
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", 	мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("парамПогашениеЖилищныхЗаймов", 	Справочники.ВычетыИПН.ПогашениеВознагражденияПоЖилищнымЗаймам);
	Запрос.УстановитьПараметр("парамСтраховыеПремии", 			Справочники.ВычетыИПН.СтраховыеПремииПоДоговорамНакопительногоСтрахования);
	Запрос.УстановитьПараметр("ВключатьОППВВДоходыРаботников",	ВключатьОППВВДоходыРаботников);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());
	
	Если НЕ СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе Тогда
		// Ставка СО
		Запрос.УстановитьПараметр("парамСтавкаСО",			ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)) / 100);
	КонецЕсли;
	
	// если налогоплательщик - ИП, то исключим данные самого индивидуального предпринимателя
	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Налогоплательщик.ИндивидуальныйПредприниматель);
	Иначе
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Неопределено);
	КонецЕсли;
	
	// Определим учетную политику по НУ
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации,
	|	УчетнаяПолитикаНУ.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ,
    |	УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН,
    |	УчетнаяПолитикаНУ.УпрощенныйУчетИПНиОПВ
	|ИЗ	
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодПо, Организация = &парамНалогоплательщик) КАК УчетнаяПолитикаНУ
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОтражениеПоПериодуРегистрации 				= Выборка.ОтражениеПоПериодуРегистрации;
		ОрганизацияЯвляетсяПлательщикомСН			= Выборка.ОрганизацияЯвляетсяПлательщикомСН;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Выборка.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ;
		УпрощенныйУчетИПНиОПВ                 		= Выборка.УпрощенныйУчетИПНиОПВ;
	Иначе
		ОтражениеПоПериодуРегистрации 				= Истина;
		ОрганизацияЯвляетсяПлательщикомСН			= Ложь;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Ложь;
		УпрощенныйУчетИПНиОПВ                       = Истина;
	КонецЕсли;
	
	// если не используется удельный вес, но используется отражение по периоду действия суммы налогов/взносов/отчислений необходимо отражать по периоду действия
	Запрос.УстановитьПараметр("ОтражатьПоПериодуДействия", УпрощенныйУчетИПНиОПВ И НЕ ОтражениеПоПериодуРегистрации);	

	//ЕП
	ОрганизацияЯвляетсяПлательщикомЕП = ?(СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж"), Истина, Ложь);
	
	// Выбор данных для заполнения формы расшифровки
	
	ДоходыИНалогиТекст = "
	|// Начисленные и необлагаемые ИПН доходы
	|ВЫБРАТЬ
	|	ИПНСведенияОДоходах.ФизЛицо,
	|	ИПНСведенияОДоходах.СуммаДоходаОборот КАК НачисленоДоходов,";
	Если СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	ИПНСведенияОДоходах.ПримененныйВычетОборот КАК НалоговыеВычеты,";
	Иначе
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	0 КАК НалоговыеВычеты,";
	КонецЕсли;
	
	ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	ВЫБОР
	|		КОГДА ИПНСведенияОДоходах.ВидРасчета = &парамПогашениеЖилищныхЗаймов
	|			ТОГДА ИПНСведенияОДоходах.СуммаВычетаОборот
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ПогашениеЖилищныхЗаймов,
	|	ВЫБОР          
	
	|		КОГДА ИПНСведенияОДоходах.ВидРасчета = &парамСтраховыеПремии
	|			ТОГДА ИПНСведенияОДоходах.СуммаВычетаОборот
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |	ВЫБОР 
	|		КОГДА ИПНСведенияОДоходах.СпособНалогообложения = &парамНеОблагаетсяЦеликом 
	|			ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот 
    |       ИНАЧЕ 0
	|	КОНЕЦ КАК ДоходыНеОблагаемыеИПН,
    |	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	ВЫБОР 
	|		КОГДА Не УчетнаяПолитикаПоМесяцам.НеПрименятьКорректировкуСН
	|           ТОГДА ИПНСведенияОДоходах.ПримененнаяЛьготаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВыплатыНеОблагаемыеСН,	
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА ИПНСведенияОДоходах.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |	ВЫБОР 
	|		КОГДА ИПНСведенияОДоходах.СпособНалогообложения = &парамНеОблагаетсяЦеликом 
	|			И ИПНСведенияОДоходах.СуммаДоходаОборот <> 0
    |           И КодыСтрокДекларации.ВидРасчета = НЕОПРЕДЕЛЕНО
    |           ТОГДА ИПНСведенияОДоходах.ВидРасчета
    |       ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка)
    |   КОНЕЦ КАК ВидВычета,
  	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |	ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ИПНСведенияОДоходах.ВидРасчета) КАК КодСтроки,
    |	ИПНСведенияОДоходах.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	|			&парамПериодС, 
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			// ИП, авдокатов и частных нотариусов включаем только по требованию
	|			" + ?(НЕ ПризнакИП, "И ВЫБОР
	|										КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	|											ТОГДА НЕ ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|									    ИНАЧЕ ИСТИНА
	|								   КОНЕЦ", "") + "
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель ) КАК ИПНСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                         
	|			ПО (НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) = ВТ_Гражданство.Период)               
	|			 И (ВЫБОР
	|					КОГДА ИПНСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ИПНСведенияОДоходах.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ИПНСведенияОДоходах.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ИПНСведенияОДоходах.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоСН.СрезПоследних(&парамПериодПо, ) КАК КодыСтрокДекларации
    |		ПО ИПНСведенияОДоходах.ВидРасчета = КодыСтрокДекларации.ВидРасчета 
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|			ПО (ИПНСведенияОДоходах.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница) 
	|
	|ГДЕ
	|	ВЫБОР КОГДА ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ИПНСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица   
	|	ТОГДА ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина  
	|	ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// налоговые взносы, доходы не облагаемые ИПН, ИПН
	|ВЫБРАТЬ
	|	ИПНРасчетыСБюджетом.ФизЛицо,
	|	0 КАК НачисленоДоходов,";
	Если СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	0 КАК НалоговыеВычеты,";
	Иначе
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|	ИПНРасчетыСБюджетом.ПримененныйВычет КАК НалоговыеВычеты,";
	КонецЕсли;                        	
	ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
    |	ИПНРасчетыСБюджетом.Налог КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА ИПНРасчетыСБюджетом.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |	"" "",
    |	ИПНРасчетыСБюджетом.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                
	|		ПО (НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)      	
	|			 И (ВЫБОР
	|					КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ИПНРасчетыСБюджетом.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)    
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|			ПО (ИПНРасчетыСБюджетом.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница) 
    |
	|ГДЕ
	|	ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик
	|	И ИПНРасчетыСБюджетом.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И ИПНРасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ИПНРасчетыСБюджетом.ВидДвижения = &парамПриход
	|	И ИПНРасчетыСБюджетом.ВидСтроки = &парамВидСтрокиИсчисление
	|	И ИПНРасчетыСБюджетом.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ИПНРасчетыСБюджетом.Активность = ИСТИНА 
	|	И ВЫБОР КОГДА ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица 
	|	ТОГДА ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина  
	|	ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	" + ?(НЕ ПризнакИП, "И ВЫБОР
	|								КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|									ТОГДА НЕ ИПНРасчетыСБюджетом.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|							    ИНАЧЕ ИСТИНА
	|						   КОНЕЦ", "") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// ИПН, подлежащий к уплате в бюджет
	|ВЫБРАТЬ
	|	ИПНРасчетыСБюджетом.ФизЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	ИПНРасчетыСБюджетом.Налог КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА ИПНРасчетыСБюджетом.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
  	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |	"""",
    |	ИПНРасчетыСБюджетом.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                
	|		ПО (НАЧАЛОПЕРИОДА(ВЫБОР
	|					КОГДА &ОтражатьПоПериодуДействия
	|						ТОГДА ИПНРасчетыСБюджетом.МесяцНалоговогоПериода
	|					ИНАЧЕ ИПНРасчетыСБюджетом.Период
	|				КОНЕЦ, МЕСЯЦ) = ВТ_Гражданство.Период)
	|			 И (ВЫБОР
	|					КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ИПНРасчетыСБюджетом.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|			ПО (ИПНРасчетыСБюджетом.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница) 
	|
	|ГДЕ
	|	ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик
	|	И ИПНРасчетыСБюджетом.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И (ИПНРасчетыСБюджетом.Период МЕЖДУ &парамПериодС И &парамПериодПо
	|				И НЕ &ОтражатьПоПериодуДействия
	|			ИЛИ ИПНРасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|				И &ОтражатьПоПериодуДействия)
	|	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|	И ИПНРасчетыСБюджетом.ФизЛицо <> &парамИндивидуальныйПредприниматель 
	|	И ВЫБОР КОГДА ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица 
	|		ТОГДА ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина  
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ИПНРасчетыСБюджетом.Активность
	|	" + ?(НЕ ПризнакИП, "И ВЫБОР
	|								КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|									ТОГДА НЕ ИПНРасчетыСБюджетом.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|							    ИНАЧЕ ИСТИНА
	|						   КОНЕЦ", "") + " 	
	|
    |ОБЪЕДИНИТЬ ВСЕ
	|
	|// ОПВ к перечислению
	|ВЫБРАТЬ
	|	ОПВПодлежитПеречислениюВФонды.ФизЛицо КАК ФизЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	ОПВПодлежитПеречислениюВФонды.Взнос КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.ОПВПодлежитПеречислениюВФонды КАК ОПВПодлежитПеречислениюВФонды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство
	|		ПО (НАЧАЛОПЕРИОДА(ВЫБОР
	|					КОГДА &ОтражатьПоПериодуДействия
	|						ТОГДА ОПВПодлежитПеречислениюВФонды.МесяцНалоговогоПериода
	|					ИНАЧЕ ОПВПодлежитПеречислениюВФонды.Период
	|				КОНЕЦ, МЕСЯЦ) = ВТ_Гражданство.Период)
	|			И (ВЫБОР
	|					КОГДА ОПВПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ОПВПодлежитПеречислениюВФонды.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ОПВПодлежитПеречислениюВФонды.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ОПВПодлежитПеречислениюВФонды.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)   
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|			ПО (ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница) 
	|ГДЕ
	|	ОПВПодлежитПеречислениюВФонды.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	|	И (ОПВПодлежитПеречислениюВФонды.Период МЕЖДУ &парамПериодС И &парамПериодПо
	|				И НЕ &ОтражатьПоПериодуДействия
	|			ИЛИ ОПВПодлежитПеречислениюВФонды.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|				И &ОтражатьПоПериодуДействия)
	|	И ОПВПодлежитПеречислениюВФонды.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|" + ?(НЕ ПризнакИП, "И ВЫБОР
	|							КОГДА ОПВПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|								ТОГДА НЕ ОПВПодлежитПеречислениюВФонды.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ", "") + "
	|	И ОПВПодлежитПеречислениюВФонды.Активность = ИСТИНА 
	|	И ВЫБОР КОГДА ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ОПВПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|		ТОГДА ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина  
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
   	|
    |ОБЪЕДИНИТЬ ВСЕ
	|
	|// ВОСМС к перечислению
	|ВЫБРАТЬ
	|	ВОСМСПодлежитПеречислениюВФонды.ФизЛицо КАК ФизЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
    |   0 КАК ОПВПодлежащийПеречислению, 
   	|	ВОСМСПодлежитПеречислениюВФонды.Взнос КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.ВОСМСПодлежитПеречислениюВФонды КАК ВОСМСПодлежитПеречислениюВФонды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство
	|		ПО (НАЧАЛОПЕРИОДА(ВЫБОР
	|					КОГДА &ОтражатьПоПериодуДействия
	|						ТОГДА ВОСМСПодлежитПеречислениюВФонды.МесяцНалоговогоПериода
	|					ИНАЧЕ ВОСМСПодлежитПеречислениюВФонды.Период
	|				КОНЕЦ, МЕСЯЦ) = ВТ_Гражданство.Период)
	|			И (ВЫБОР
	|					КОГДА ВОСМСПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ВОСМСПодлежитПеречислениюВФонды.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ВОСМСПодлежитПеречислениюВФонды.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ВОСМСПодлежитПеречислениюВФонды.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)   
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|			ПО (ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница) 
	|ГДЕ
	|	ВОСМСПодлежитПеречислениюВФонды.Налогоплательщик = &парамНалогоплательщик
	|	И ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	|	И (ВОСМСПодлежитПеречислениюВФонды.Период МЕЖДУ &парамПериодС И &парамПериодПо
	|				И НЕ &ОтражатьПоПериодуДействия
	|			ИЛИ ВОСМСПодлежитПеречислениюВФонды.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|				И &ОтражатьПоПериодуДействия)
	|	И ВОСМСПодлежитПеречислениюВФонды.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ВОСМСПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|" + ?(НЕ ПризнакИП, "И ВЫБОР
	|							КОГДА ВОСМСПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|								ТОГДА НЕ ВОСМСПодлежитПеречислениюВФонды.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ", "") + "
	|	И ВОСМСПодлежитПеречислениюВФонды.Активность = ИСТИНА 
	|	И ВЫБОР КОГДА ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ВОСМСПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|		ТОГДА ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина  
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
    |
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Стандартные вычеты ИПН
	|ВЫБРАТЬ
	|	СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо,
	|	0 КАК НачисленоДоходов,
	|	СведенияОбИсчисленииВычетовИПН.ПримененныйВычетОборот КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   СведенияОбИсчисленииВычетовИПН.ВидВычета КАК ВидВычета,
  	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			// ИП, авдокатов и частных нотариусов включаем только по требованию
	|			" + ?(НЕ ПризнакИП, "И ВЫБОР
	|										КОГДА ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
	|											ТОГДА НЕ ФизическоеЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|									    ИНАЧЕ ИСТИНА
	|								   КОНЕЦ", "") + "
	|			И ФизическоеЛицо <> &парамИндивидуальныйПредприниматель 
	|			И (ВидВычета <> Значение(Справочник.ВычетыИПН.ВычетОПВ)
	|			И ВидВычета <> Значение(Справочник.ВычетыИПН.ДобровольныеПенсионныеВзносы)
	|			И ВидВычета <> Значение(Справочник.ВычетыИПН.ПогашениеВознагражденияПоЖилищнымЗаймам)
	|			И ВидВычета <> Значение(Справочник.ВычетыИПН.НаОплатуМедицинскихУслуг)
	|			И ВидВычета <> Значение(Справочник.ВычетыИПН.СтраховыеПремииПоДоговорамНакопительногоСтрахования)
	|			И ВидВычета <> Значение(Справочник.ВычетыИПН.ВычетВОСМС))) КАК СведенияОбИсчисленииВычетовИПН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                    
	|			ПО (НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ) = ВТ_Гражданство.Период)        
	|			И (ВЫБОР
	|					КОГДА СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
	|						И СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)  
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|			ПО (СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница) 
  	|    
	|ГДЕ
	|	ВЫБОР КОГДА ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо ССЫЛКА Справочник.ФизическиеЛица
	|		ТОГДА ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина  
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
  	|
	|ОБЪЕДИНИТЬ ВСЕ
    //Прочие налоговые вычеты
    |
	|ВЫБРАТЬ
	|	СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	СведенияОбИсчисленииВычетовИПН.ПримененныйВычетОборот КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   СведенияОбИсчисленииВычетовИПН.ВидВычета  КАК ВидВычета,
  	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			" + ?(НЕ ПризнакИП, "И ВЫБОР
	|										КОГДА ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
	|											ТОГДА НЕ ФизическоеЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|									    ИНАЧЕ ИСТИНА
	|								   КОНЕЦ", "") + "
	|			И ФизическоеЛицо <> &парамИндивидуальныйПредприниматель 
	|			И ВидВычета = Значение(Справочник.ВычетыИПН.ПогашениеВознагражденияПоЖилищнымЗаймам)) КАК СведенияОбИсчисленииВычетовИПН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                    
	|			ПО (НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ) = ВТ_Гражданство.Период)        
	|			И (ВЫБОР
	|					КОГДА СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
	|						И СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)  
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|			ПО (СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница) 
    |ГДЕ
	|	ВЫБОР КОГДА ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо ССЫЛКА Справочник.ФизическиеЛица
	|		ТОГДА ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина  
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	СведенияОбИсчисленииВычетовИПН.ПримененныйВычетОборот КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   СведенияОбИсчисленииВычетовИПН.ВидВычета КАК ВидВычета,
   	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
    |ИЗ
	|	РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И ФизическоеЛицо <> &парамИндивидуальныйПредприниматель
	|			" + ?(НЕ ПризнакИП, "И ВЫБОР
	|										КОГДА ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
	|											ТОГДА НЕ ФизическоеЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|									    ИНАЧЕ ИСТИНА
	|								   КОНЕЦ", "") + "
	|			И ВидВычета = Значение(Справочник.ВычетыИПН.ДобровольныеПенсионныеВзносы)) КАК СведенияОбИсчисленииВычетовИПН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                    
	|			ПО (НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ) = ВТ_Гражданство.Период)        
	|			И (ВЫБОР
	|					КОГДА СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
	|						И СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ) 
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|			ПО (СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница) 
   	|
	|ГДЕ
	|	ВЫБОР КОГДА ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо ССЫЛКА Справочник.ФизическиеЛица
	|		ТОГДА ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина  
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	СведенияОбИсчисленииВычетовИПН.ПримененныйВычетОборот КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   СведенияОбИсчисленииВычетовИПН.ВидВычета КАК ВидВычета,
   	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			" + ?(НЕ ПризнакИП, "И ВЫБОР
	|										КОГДА ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
	|											ТОГДА НЕ ФизическоеЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|									    ИНАЧЕ ИСТИНА
	|								   КОНЕЦ", "") + "
	|			И ФизическоеЛицо <> &парамИндивидуальныйПредприниматель 
	|			И ВидВычета = Значение(Справочник.ВычетыИПН.НаОплатуМедицинскихУслуг)) КАК СведенияОбИсчисленииВычетовИПН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                    
	|			ПО (НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ) = ВТ_Гражданство.Период)        
	|			И (ВЫБОР
	|					КОГДА СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
	|						И СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ) 
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|			ПО (СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница) 
	|ГДЕ
	|	ВЫБОР КОГДА ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо ССЫЛКА Справочник.ФизическиеЛица
	|		ТОГДА ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина  
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
 	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// ОПВ
	|ВЫБРАТЬ
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	ОПВРасчетыСФондами.Взнос КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА ОПВРасчетыСФондами.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
    |	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	ОПВРасчетыСФондами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
    |ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство
	|		ПО (НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)
	|			И (ВЫБОР
	|					КОГДА ОПВРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ОПВРасчетыСФондами.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ОПВРасчетыСФондами.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ОПВРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ) 
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|			ПО (ОПВРасчетыСФондами.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница) 
	|ГДЕ
	|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВРасчетыСФондами.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	|	И ОПВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ОПВРасчетыСФондами.ВидДвижения = &парамПриход
	|	И ОПВРасчетыСФондами.ВидПлатежа = &парамВидПлатежаНалог
	|	И ОПВРасчетыСФондами.ВидСтроки = &парамВидСтрокиИсчисление
	|" + ?(НЕ ПризнакИП, "И ВЫБОР
	|							КОГДА ОПВРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|								ТОГДА НЕ ОПВРасчетыСФондами.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ", "") + "
	|	И ОПВРасчетыСФондами.Активность = ИСТИНА
	|	И ВЫБОР КОГДА ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ОПВРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|		ТОГДА ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина  
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";
	Если СтруктураРеквизитовФормы.ВедетсяУчетОППВ Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "	
		|ОБЪЕДИНИТЬ ВСЕ 
		|// ОППВ
		|
		|ВЫБРАТЬ
		|	ОППВРасчетыСФондами.ФизЛицо,
		|	ВЫБОР КОГДА &ВключатьОППВВДоходыРаботников Тогда ОППВРасчетыСФондами.Взнос Иначе 0 КОНЕЦ КАК НачисленоДоходов, // включаем ОППВ в сумму доходов, если установлен признак ВключатьОППВВДоходыРаботников
		|	0 КАК НалоговыеВычеты,
		|	0 КАК ОбязательныеПенсионныеВзносы,
		|	ОППВРасчетыСФондами.Взнос КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
		|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
		|	0 КАК ДобровольныеПенсионныеВзносы,
		|	0 КАК ПогашениеЖилищныхЗаймов,
		|	0 КАК СтраховыеПремии,
    	|	0 КАК НаОплатуМедицинскихУслуг,
        |   0 КАК ДоходыНеОблагаемыеИПН,
		|	0 КАК ИндивидуальныйПодоходныйНалог,
		|	0 КАК ВыплаченоДоходов,
		|	ВЫБОР КОГДА &ВключатьОППВВДоходыРаботников Тогда ОППВРасчетыСФондами.Взнос Иначе 0 КОНЕЦ КАК ВыплатыНеОблагаемыеСН, // включаем ОППВ в сумму доходов, если установлен признак ВключатьОППВВДоходыРаботников
		|	0 КАК ВыплатыОблагаемыеСН,  
		|	0 КАК СоциальныеНалог,
		|	0 КАК СоциальныеОтчисления,
		|	ЛОЖЬ КАК ВыплатыПоИЛ,
		|	0 КАК СуммаООСМС,
		|	0 КАК СуммаВОСМС,
		|	0 КАК ИПНПодлежащийПеречислению,
		|	ВЫБОР 
		|		КОГДА ОППВРасчетыСФондами.СтруктурнаяЕдиница <> &парамНалогоплательщик
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
        |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
       	|	0 КАК ОПВПодлежащийПеречислению,
        |   0 КАК ВОСМСПодлежащийПеречислению,
        |   0 КАК ЗадолженностьПоДоходам,
        |   """" КАК КодСтроки,
        |	ОППВРасчетыСФондами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
       	|	0 КАК СНИсчисленный
		|ИЗ
		|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                              
		|		ПО (НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)     
		|			И ОППВРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
		|			ПО (ОППВРасчетыСФондами.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница) 
		|ГДЕ
		|	ОППВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И ОППВРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|	И ОППВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		|	И ОППВРасчетыСФондами.ВидДвижения 	= &парамПриход
		|	И ОППВРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
		|	И ОППВРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление
		|	И ОППВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|	И ОППВРасчетыСФондами.Активность
		|	И ВЫБОР КОГДА ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ОППВРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
		|		ТОГДА ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина  
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ";
	КонецЕсли;
	
	ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// доходы, облагаемые и необлагаемые СН
	|ВЫБРАТЬ
	|	СНСведенияОДоходах.ФизЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	ВЫБОР
	|		КОГДА СНСведенияОДоходах.СпособНалогообложения = &парамНеОблагаетсяЦеликом 
	|			ТОГДА СНСведенияОДоходах.СуммаДоходаОборот
	|		ИНАЧЕ СНСведенияОДоходах.СуммаВычетаОборот
	|	КОНЕЦ КАК ВыплатыНеОблагаемыеСН,
	|	ВЫБОР
	|		КОГДА СНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|			ТОГДА СНСведенияОДоходах.ОблагаемаяБазаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА СНСведенияОДоходах.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
  	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	СНСведенияОДоходах.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.СНСведенияОДоходах.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель ) КАК СНСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                    
	|			ПО (НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ) = ВТ_Гражданство.Период)        
	|			И СНСведенияОДоходах.ФизЛицо = ВТ_Гражданство.ФИО   
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|			ПО (СНСведенияОДоходах.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница)  
	|ГДЕ
	|	ВЫБОР КОГДА ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И СНСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|		ТОГДА ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина  
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// социальный налог
	|ВЫБРАТЬ
	|	СНИсчисленный.ФизЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	СНИсчисленный.Налог КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА СНИсчисленный.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	СНИсчисленный.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	(ВЫБОР
    |       КОГДА СНИсчисленный.Налогоплательщик.ЮрФизЛицо = &парамФизЛицо 
    |           ТОГДА УчетнаяПолитикаПоМесяцам.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника * РасчетныеПоказателиПоМесяцам.РазмерМРП 
    |       ИНАЧЕ 0 
    |   КОНЕЦ) КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.СНИсчисленный КАК СНИсчисленный 
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                        
	|		ПО (НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)        
	|			И СНИсчисленный.ФизЛицо = ВТ_Гражданство.ФИО 
    |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(СНИсчисленный.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
   	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасчетныеПоказателиПоМесяцам КАК РасчетныеПоказателиПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(СНИсчисленный.Период, МЕСЯЦ) = РасчетныеПоказателиПоМесяцам.Период)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|			ПО (СНИсчисленный.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница) 
	|			
	|ГДЕ
	|	СНИсчисленный.Налогоплательщик = &парамНалогоплательщик
	|	И СНИсчисленный.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И СНИсчисленный.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо 
	|	И СНИсчисленный.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ВЫБОР КОГДА ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И СНИсчисленный.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|		ТОГДА ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина  
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И СНИсчисленный.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// социальные отчисления
	|ВЫБРАТЬ
	|	СОРасчетыСФондами.ФизЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	СОРасчетыСФондами.Отчисление КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА СОРасчетыСФондами.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	СОРасчетыСФондами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
	|			И СОРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО 
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|			ПО (СОРасчетыСФондами.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница) 
  	|ГДЕ
	|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И СОРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И СОРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
	|	И СОРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление
	|	И СОРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ВЫБОР КОГДА ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И СОРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|		ТОГДА ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина  
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И СОРасчетыСФондами.Активность
    |
    |ОБЪЕДИНИТЬ ВСЕ
	|
	|// расчет социального налога для работников ИП на ОУР
	|ВЫБРАТЬ
	|	СОРасчетыСФондами.ФизЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА СОРасчетыСФондами.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	СОРасчетыСФондами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	(УчетнаяПолитикаПоМесяцам.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника * РасчетныеПоказателиПоМесяцам.РазмерМРП) КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
	|			И СОРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО
    |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(СОРасчетыСФондами.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
   	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасчетныеПоказателиПоМесяцам КАК РасчетныеПоказателиПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(СОРасчетыСФондами.Период, МЕСЯЦ) = РасчетныеПоказателиПоМесяцам.Период)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|			ПО (СОРасчетыСФондами.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница) 
	|ГДЕ
	|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И СОРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И СОРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
	|	И СОРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление
	|	И СОРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
    |	И СОРасчетыСФондами.Налогоплательщик.ЮрФизЛицо = &парамФизЛицо
    |   И СОРасчетыСФондами.Отчисление > (УчетнаяПолитикаПоМесяцам.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника * РасчетныеПоказателиПоМесяцам.РазмерМРП)
    | 	И ВЫБОР КОГДА ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И СОРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|		ТОГДА ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина  
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И СОРасчетыСФондами.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// отчисления  ОСМС
	|ВЫБРАТЬ
	|	ООСМСРасчетыСФондами.ФизЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	ООСМСРасчетыСФондами.Отчисление КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА ООСМСРасчетыСФондами.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	ООСМСРасчетыСФондами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
	|			И ООСМСРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО  
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|			ПО (ООСМСРасчетыСФондами.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница) 
	|ГДЕ
	|	ООСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ООСМСРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И ООСМСРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ООСМСРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
	|	И ООСМСРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление  
	| 	И ВЫБОР КОГДА ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ООСМСРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|		ТОГДА ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина  
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ООСМСРасчетыСФондами.Активность
	|	" + ?(ОрганизацияЯвляетсяПлательщикомСН, "", "И ООСМСРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// ОПВР
	|ВЫБРАТЬ
	|	ОПВРРасчетыСФондами.ФизЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ОПВРРасчетыСФондами.Взнос КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА ОПВРРасчетыСФондами.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	ОПВРРасчетыСФондами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.ОПВРРасчетыСФондами КАК ОПВРРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(ОПВРРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
	|			И ОПВРРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО  
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|			ПО (ОПВРРасчетыСФондами.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница) 
	|ГДЕ
	|	ОПВРРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВРРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И ОПВРРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ОПВРРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
	|	И ОПВРРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление  
	| 	И ВЫБОР КОГДА ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ОПВРРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|		ТОГДА ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина  
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ 
	|	И ОПВРРасчетыСФондами.Активность
	|	" + ?(ОрганизацияЯвляетсяПлательщикомСН, "", "И ОПВРРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// взносы  ОСМС
	|ВЫБРАТЬ
	|	ВОСМСРасчетыСФондами.ФизЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	0 КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	ВОСМСРасчетыСФондами.Взнос   КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА ВОСМСРасчетыСФондами.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
  	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	ВОСМСРасчетыСФондами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
	|			И (ВЫБОР
	|					КОГДА ВОСМСРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ВОСМСРасчетыСФондами.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ВОСМСРасчетыСФондами.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ВОСМСРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)    
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|			ПО (ВОСМСРасчетыСФондами.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница) 
	|		
	|ГДЕ
	|	ВОСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ВОСМСРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И ВОСМСРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ВОСМСРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
	|	И ВОСМСРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление
	|	И ВОСМСРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель  
	| 	И ВЫБОР КОГДА ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ВОСМСРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|		ТОГДА ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина  
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ВОСМСРасчетыСФондами.Активность
	|	" + ?(НЕ ПризнакИП, "И ВЫБОР
	|							КОГДА ВОСМСРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|								ТОГДА НЕ ВОСМСРасчетыСФондами.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ", "") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// выплаченные доходы
	|ВЫБРАТЬ
	|	ВыплаченныеДоходы.ФизЛицо,
	|	0 КАК НачисленоДоходов,
	|	0 КАК НалоговыеВычеты,
	|	0 КАК ОбязательныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	0 КАК ДобровольныеПенсионныеВзносы,
	|	0 КАК ПогашениеЖилищныхЗаймов,
	|	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
	|	0 КАК ИндивидуальныйПодоходныйНалог,
	|	ВыплаченныеДоходы.СуммаДоходаОборот КАК ВыплаченоДоходов,
	|	0 КАК ВыплатыНеОблагаемыеСН,
	|	0 КАК ВыплатыОблагаемыеСН,
	|	0 КАК СоциальныеНалог,
	|	0 КАК СоциальныеОтчисления,
	|	ЛОЖЬ КАК ВыплатыПоИЛ,
	|	0 КАК СуммаООСМС,
	|	0 КАК СуммаВОСМС,
	|	0 КАК ИПНПодлежащийПеречислению,
	|	ВЫБОР 
	|		КОГДА ВыплаченныеДоходы.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
  	|	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |   0 КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	ВыплаченныеДоходы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.ВыплаченныеДоходыРаботникамОрганизацийНУ.Обороты(
	|		    &парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель
	|			" + ?(НЕ ПризнакИП, "И ВЫБОР
	|										КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	|											ТОГДА НЕ ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|									    ИНАЧЕ ИСТИНА
	|								   КОНЕЦ", "") + "
	|			) КАК ВыплаченныеДоходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
	|			ПО (НАЧАЛОПЕРИОДА(ВыплаченныеДоходы.Период, МЕСЯЦ) = ВТ_Гражданство.Период)                        	
	|				И (ВЫБОР
	|						КОГДА ВыплаченныеДоходы.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|							И ВыплаченныеДоходы.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|							ТОГДА ВыплаченныеДоходы.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|						ИНАЧЕ ВыплаченныеДоходы.ФизЛицо = ВТ_Гражданство.ФИО
	|		   		   КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|			ПО (ВыплаченныеДоходы.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница)
	|ГДЕ 
	|	ВЫБОР КОГДА ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ВыплаченныеДоходы.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|		ТОГДА ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина  
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
  	|";
	
	// Если включаем суммы удержаний по исполнительным листам по фактическому перечислению
	Если Не ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// выплата по исполнительным листам
		|ВЫБРАТЬ
		|	ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо КАК ФизЛицо,
		|	0 КАК НачисленоДоходов,
		|	0 КАК НалоговыеВычеты,
		|	0 КАК ОбязательныеПенсионныеВзносы,
		|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
		|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
		|	0 КАК ДобровольныеПенсионныеВзносы,
		|	0 КАК ПогашениеЖилищныхЗаймов,
		|	0 КАК СтраховыеПремии,
    	|	0 КАК НаОплатуМедицинскихУслуг,
        |   0 КАК ДоходыНеОблагаемыеИПН,
		|	0 КАК ИндивидуальныйПодоходныйНалог,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовРасход + ВзаиморасчетыСПолучателямиИЛ.СуммаСборовРасход КАК ВыплаченоДоходов,
		|	0 КАК ВыплатыНеОблагаемыеСН,
		|	0 КАК ВыплатыОблагаемыеСН,
		|	0 КАК СоциальныеНалог,
		|	0 КАК СоциальныеОтчисления,
		|	ЛОЖЬ КАК ВыплатыПоИЛ,
		|	0 КАК СуммаООСМС,
		|	0 КАК СуммаВОСМС,
		|	0 КАК ИПНПодлежащийПеречислению,
		|	ВЫБОР 
		|		КОГДА ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница <> &парамНалогоплательщик
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
        |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
       	|	0 КАК ОПВПодлежащийПеречислению,
        |   0 КАК ВОСМСПодлежащийПеречислению,
        |   0 КАК ЗадолженностьПоДоходам,
        |   """" КАК КодСтроки,
        |	ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
       	|	0 КАК СНИсчисленный
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Обороты(
		|			&парамПериодС,
		|			&парамПериодПо,
		|			МЕСЯЦ,
		|			Налогоплательщик = &парамНалогоплательщик
		|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|			И ДокументОснование.ФизЛицо <> &парамИндивидуальныйПредприниматель ) КАК ВзаиморасчетыСПолучателямиИЛ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
		|		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.ПериодВзаиморасчетов, МЕСЯЦ) = ВТ_Гражданство.Период)             
		|				И ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо = ВТ_Гражданство.ФИО 
		|		
		|";
	//Иначе
		// удержания по ИЛ уже находятся в регистр накопления ВыплаченныеДоходыРаботникамОрганизацийНУ
	КонецЕсли;
	
	// Добавим данные по получателям по исполнительным листам
	Если ПризнакАлиментов Тогда
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// выплата по исполнительным листам получателям сумм
		|ВЫБРАТЬ
		|	ВзаиморасчетыСПолучателямиИЛ.Получатель КАК ФизЛицо,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовПриход КАК НачисленоДоходов,
		|	0 КАК НалоговыеВычеты,
		|	0 КАК ОбязательныеПенсионныеВзносы,
		|	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
		|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
		|	0 КАК ДобровольныеПенсионныеВзносы,
		|	0 КАК ПогашениеЖилищныхЗаймов,
		|	0 КАК СтраховыеПремии,
    	|	0 КАК НаОплатуМедицинскихУслуг,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовПриход КАК ДоходыНеОблагаемыеИПН,
        |	0 КАК ИндивидуальныйПодоходныйНалог,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовРасход КАК ВыплаченоДоходов,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовПриход КАК ВыплатыНеОблагаемыеСН,
		|	0 КАК ВыплатыОблагаемыеСН,
		|	0 КАК СоциальныеНалог,
		|	0 КАК СоциальныеОтчисления,
		|	ИСТИНА КАК ВыплатыПоИЛ,
		|	0 КАК СуммаООСМС,
		|	0 КАК СуммаВОСМС,
		|	0 КАК ИПНПодлежащийПеречислению,
		|	ВЫБОР 
		|		КОГДА ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница <> &парамНалогоплательщик
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
        |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
       	|	0 КАК ОПВПодлежащийПеречислению,
        |   0 КАК ВОСМСПодлежащийПеречислению,
        |   0 КАК ЗадолженностьПоДоходам,
        |	""A.341-1-1"" КАК КодСтроки,
        |	ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
       	|	0 КАК СНИсчисленный
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Обороты(
		|			&парамПериодС,
		|			&парамПериодПо,
		|			МЕСЯЦ,
		|			Налогоплательщик = &парамНалогоплательщик
		|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|			И Получатель.ЮрФизЛицо = &парамФизЛицо 
		|			И НЕ ВЫБОР
		|					КОГДА Получатель.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
		|							ИЛИ Получатель.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан) ТОГДА
		|						ИСТИНА
		|					ИНАЧЕ
		|						ЛОЖЬ
		|					КОНЕЦ) КАК ВзаиморасчетыСПолучателямиИЛ   
		|";
    КонецЕсли;
    
	ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
    |// Задолженность по доходам, невыплаченным физлицам, из текущих взаиморасчетов
   	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
    |	ВзаиморасчетыСРаботниками.ФизЛицо КАК ФизЛицо,
    |	0 КАК НачисленоДоходов,
    |	0 КАК НалоговыеВычеты,
    |	0 КАК ОбязательныеПенсионныеВзносы,
    |	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
    |	0 КАК ДобровольныеПенсионныеВзносы,
    |	0 КАК ПогашениеЖилищныхЗаймов,
    |	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
    |	0 КАК ИндивидуальныйПодоходныйНалог,
    |	0 КАК ВыплаченоДоходов,
    |	0 КАК ВыплатыНеОблагаемыеСН,
    |	0 КАК ВыплатыОблагаемыеСН,
    |	0 КАК СоциальныеНалог,
    |	0 КАК СоциальныеОтчисления,
    |	Ложь КАК ВыплатыПоИЛ,
    |	0 КАК СуммаООСМС,
    |	0 КАК СуммаВОСМС,
    |	0 КАК ИПНПодлежащийПеречислению,
    |	ВЫБОР 
    |		КОГДА ВзаиморасчетыСРаботниками.СтруктурнаяЕдиница <> &парамНалогоплательщик
    |			ТОГДА 1
    |		ИНАЧЕ 0
    |	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
    |	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
    |	ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	ВзаиморасчетыСРаботниками.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(
	|			&парамПослеПериодПо,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ВзаиморасчетыСРаботниками 
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
	|		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов, МЕСЯЦ) = ВТ_Гражданство.Период)             
	|				И ВзаиморасчетыСРаботниками.ФизЛицо = ВТ_Гражданство.ФИО   	
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|			ПО (ВзаиморасчетыСРаботниками.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница) 
	|
	|ГДЕ
	|	ВЫБОР КОГДА ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ВзаиморасчетыСРаботниками.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|		ТОГДА ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина  
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
  	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Задолженность по доходам, невыплаченным физлицам, из депонированных сумм
	|ВЫБРАТЬ
    |	ВзаиморасчетыСДепонентами.ФизЛицо КАК ФизЛицо,
    |	0 КАК НачисленоДоходов,
    |	0 КАК НалоговыеВычеты,
    |	0 КАК ОбязательныеПенсионныеВзносы,
    |	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
    |	0 КАК ДобровольныеПенсионныеВзносы,
    |	0 КАК ПогашениеЖилищныхЗаймов,
    |	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
    |	0 КАК ИндивидуальныйПодоходныйНалог,
    |	0 КАК ВыплаченоДоходов,
    |	0 КАК ВыплатыНеОблагаемыеСН,
    |	0 КАК ВыплатыОблагаемыеСН,
    |	0 КАК СоциальныеНалог,
    |	0 КАК СоциальныеОтчисления,
    |	Ложь КАК ВыплатыПоИЛ,
    |	0 КАК СуммаООСМС,
    |	0 КАК СуммаВОСМС,
    |	0 КАК ИПНПодлежащийПеречислению,
    |	ВЫБОР 
    |		КОГДА ВзаиморасчетыСДепонентами.СтруктурнаяЕдиница <> &парамНалогоплательщик
    |			ТОГДА 1
    |		ИНАЧЕ 0
    |	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
    |	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
	|	ВзаиморасчетыСДепонентами.СуммаВзаиморасчетовОстаток КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	ВзаиморасчетыСДепонентами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций.Остатки(
	|			&парамПослеПериодПо,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ВзаиморасчетыСДепонентами 
   	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
	|		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСДепонентами.ПериодВзаиморасчетов, МЕСЯЦ) = ВТ_Гражданство.Период)             
	|				И ВзаиморасчетыСДепонентами.ФизЛицо = ВТ_Гражданство.ФИО 
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|			ПО (ВзаиморасчетыСДепонентами.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница) 
	|
	|ГДЕ
	|	ВЫБОР КОГДА ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) И ВзаиморасчетыСДепонентами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|		ТОГДА ВТ_Гражданство.НеЯвляетсяналоговымРезидентомРК = Истина  
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Задолженность по доходам, невыплаченным физлицам, из оплаты по актам закупа
	|ВЫБРАТЬ
    |	ВзаиморасчетыСКонтрагентамиФизЛицами.Контрагент КАК ФизЛицо,
    |	0 КАК НачисленоДоходов,
    |	0 КАК НалоговыеВычеты,
    |	0 КАК ОбязательныеПенсионныеВзносы,
    |	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
    |	0 КАК ДобровольныеПенсионныеВзносы,
    |	0 КАК ПогашениеЖилищныхЗаймов,
    |	0 КАК СтраховыеПремии,
	|	0 КАК НаОплатуМедицинскихУслуг,
    |   0 КАК ДоходыНеОблагаемыеИПН,
    |	0 КАК ИндивидуальныйПодоходныйНалог,
    |	0 КАК ВыплаченоДоходов,
    |	0 КАК ВыплатыНеОблагаемыеСН,
    |	0 КАК ВыплатыОблагаемыеСН,
    |	0 КАК СоциальныеНалог,
    |	0 КАК СоциальныеОтчисления,
    |	Ложь КАК ВыплатыПоИЛ,
    |	0 КАК СуммаООСМС,
    |	0 КАК СуммаВОСМС,
    |	0 КАК ИПНПодлежащийПеречислению,
    |	ВЫБОР 
    |		КОГДА ВзаиморасчетыСКонтрагентамиФизЛицами.СтруктурнаяЕдиница <> &парамНалогоплательщик
    |			ТОГДА 1
    |		ИНАЧЕ 0
    |	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
    |	0 КАК ОПВПодлежащийПеречислению,
    |   0 КАК ВОСМСПодлежащийПеречислению,
	|	ВзаиморасчетыСКонтрагентамиФизЛицами.СуммаВзаиморасчетовОстаток КАК ЗадолженностьПоДоходам,
    |   """" КАК КодСтроки,
    |	ВзаиморасчетыСКонтрагентамиФизЛицами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
   	|	0 КАК СНИсчисленный
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами.Остатки(
	|			&парамПослеПериодПо,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И НЕ Контрагент.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус) КАК ВзаиморасчетыСКонтрагентамиФизЛицами
   	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
	|		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСКонтрагентамиФизЛицами.ПериодВзаиморасчетов, МЕСЯЦ) = ВТ_Гражданство.Период)             
	|				И ВзаиморасчетыСКонтрагентамиФизЛицами.Контрагент.ФизЛицо = ВТ_Гражданство.ФИО 
	|";		
		
	// Если суммы удержаний по исполнительным листам включаются по фактическому перечислению
	Если Не ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ Тогда

		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// ставим остатки сумм по ИЛ как задолженность по невыплаченным доходам работникам, с которых удержаны ИЛ
        |ВЫБРАТЬ
        |	ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо КАК ФизЛицо,
        |	0 КАК НачисленоДоходов,
        |	0 КАК НалоговыеВычеты,
        |	0 КАК ОбязательныеПенсионныеВзносы,
        |	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
		|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
        |	0 КАК ДобровольныеПенсионныеВзносы,
        |	0 КАК ПогашениеЖилищныхЗаймов,
        |	0 КАК СтраховыеПремии,
    	|	0 КАК НаОплатуМедицинскихУслуг,
        |   0 КАК ДоходыНеОблагаемыеИПН,
        |	0 КАК ИндивидуальныйПодоходныйНалог,
        |	0 КАК ВыплаченоДоходов,
        |	0 КАК ВыплатыНеОблагаемыеСН,
        |	0 КАК ВыплатыОблагаемыеСН,
        |	0 КАК СоциальныеНалог,
        |	0 КАК СоциальныеОтчисления,
        |	Ложь КАК ВыплатыПоИЛ,
        |	0 КАК СуммаООСМС,
        |	0 КАК СуммаВОСМС,
        |	0 КАК ИПНПодлежащийПеречислению,
        |	ВЫБОР 
        |		КОГДА ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница <> &парамНалогоплательщик
        |			ТОГДА 1
        |		ИНАЧЕ 0
        |	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
        |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
        |	0 КАК ОПВПодлежащийПеречислению,
        |   0 КАК ВОСМСПодлежащийПеречислению,
        |	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовОстаток + ВзаиморасчетыСПолучателямиИЛ.СуммаСборовОстаток КАК ЗадолженностьПоДоходам,
        |   """" КАК КодСтроки,
        |	ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
      	|	0 КАК СНИсчисленный
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Остатки(
		|				&парамПослеПериодПо,
		|				Налогоплательщик = &парамНалогоплательщик
		|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
        |				И ДокументОснование.ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ВзаиморасчетыСПолучателямиИЛ
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
        |		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.ПериодВзаиморасчетов, МЕСЯЦ) = ВТ_Гражданство.Период)             
        |				И ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо = ВТ_Гражданство.ФИО  
        |";		
		
	//Иначе
		// удержания по ИЛ уже находятся в регистре накопления ВыплаченныеДоходыРаботникамОрганизацийНУ
	КонецЕсли;
	
	// Необходимо добавить получателей по исполнительным листам
	Если ПризнакАлиментов Тогда
		
		ДоходыИНалогиТекст = ДоходыИНалогиТекст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// ставим остатки сумм по ИЛ как задолженность по невыплаченным доходам получателям ИЛ
		|ВЫБРАТЬ
        |	ВзаиморасчетыСПолучателямиИЛ.Получатель КАК ФизЛицо,
        |	0 КАК НачисленоДоходов,
        |	0 КАК НалоговыеВычеты,
        |	0 КАК ОбязательныеПенсионныеВзносы,
        |	0 КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
		|	0 КАК ОбязательныеПенсионныеВзносыРаботодателя,
        |	0 КАК ДобровольныеПенсионныеВзносы,
        |	0 КАК ПогашениеЖилищныхЗаймов,
        |	0 КАК СтраховыеПремии,
    	|	0 КАК НаОплатуМедицинскихУслуг,
        |   0 КАК ДоходыНеОблагаемыеИПН,
        |	0 КАК ИндивидуальныйПодоходныйНалог,
        |	0 КАК ВыплаченоДоходов,
        |	0 КАК ВыплатыНеОблагаемыеСН,
        |	0 КАК ВыплатыОблагаемыеСН,
        |	0 КАК СоциальныеНалог,
        |	0 КАК СоциальныеОтчисления,
        |	Ложь КАК ВыплатыПоИЛ,
        |	0 КАК СуммаООСМС,
        |	0 КАК СуммаВОСМС,
        |	0 КАК ИПНПодлежащийПеречислению,
        |	ВЫБОР 
        |		КОГДА ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница <> &парамНалогоплательщик
        |			ТОГДА 1
        |		ИНАЧЕ 0
        |	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
        |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
        |	0 КАК ОПВПодлежащийПеречислению,
        |   0 КАК ВОСМСПодлежащийПеречислению,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовОстаток КАК ЗадолженностьПоДоходам,
        |   """" КАК КодСтроки,
        |	ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
       	|	0 КАК СНИсчисленный
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Остатки(
		|				&парамПослеПериодПо,
		|				Налогоплательщик = &парамНалогоплательщик
		|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|			    И Получатель.ЮрФизЛицо = &парамФизЛицо 
		|			    И НЕ ВЫБОР
		|					КОГДА Получатель.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
		|							ИЛИ Получатель.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан) ТОГДА
		|						ИСТИНА
		|					ИНАЧЕ
		|						ЛОЖЬ
		|					КОНЕЦ) КАК ВзаиморасчетыСПолучателямиИЛ  
		|";		
		
	КонецЕсли;


	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК СтруктурнаяЕдиница,
	|	Организации.Ссылка КАК Владелец
	|ПОМЕСТИТЬ ВТ_СтруктурныеПодразделенияЕП
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В (&парамСписокСтруктурныхЕдиниц)
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка,
	|	ПодразделенияОрганизаций.Владелец
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Ссылка В (&парамСписокСтруктурныхЕдиниц)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНУ.Организация КАК Организация,
	|	УчетнаяПолитикаНУ.ПорядокОбложенияДоходовРаботников КАК ПорядокОбложенияДоходовРаботников,
	|	ВЫБОР
	|		КОГДА УчетнаяПолитикаНУ.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИНАЧЕ ВТ_СтруктурныеПодразделенияЕП.СтруктурнаяЕдиница
	|	КОНЕЦ КАК ОрганизацияЕП,
	|	ВТ_СтруктурныеПодразделенияЕП.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодПо, Организация В (&парамСписокСтруктурныхЕдиниц)) КАК УчетнаяПолитикаНУ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтруктурныеПодразделенияЕП КАК ВТ_СтруктурныеПодразделенияЕП
	|		ПО УчетнаяПолитикаНУ.Организация = ВТ_СтруктурныеПодразделенияЕП.Владелец
  	|ИНДЕКСИРОВАТЬ ПО
	|	УчетнаяПолитикаНУ.Организация
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТ_ДатыПериодовГода
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря  КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &парамПериодС И &парамПериодПо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	МАКСИМУМ(УчетнаяПолитикаНУ.Период) КАК ПериодСреза,
	|	УчетнаяПолитикаНУ.Организация КАК Организация
	|ПОМЕСТИТЬ УчетнаяПолитикаНУПериоды
	|ИЗ
	|	ВТ_ДатыПериодовГода КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНУ
	|		ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(УчетнаяПолитикаНУ.Период, МЕСЯЦ))
	|ГДЕ
	|	УчетнаяПолитикаНУ.Организация = &парамНалогоплательщик
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	УчетнаяПолитикаНУ.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период,
	|	УчетнаяПолитикаНУ.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНУПериоды.Период КАК Период,
	|	УчетнаяПолитикаНУ.НеПрименятьКорректировкуПрочихНалоговВзносовОтчислений КАК НеПрименятьКорректировкуСН,
    |   УчетнаяПолитикаНУ.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника КАК КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитикаПоМесяцам
	|ИЗ
	|	УчетнаяПолитикаНУПериоды КАК УчетнаяПолитикаНУПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНУ
	|		ПО (УчетнаяПолитикаНУПериоды.ПериодСреза = НАЧАЛОПЕРИОДА(УчетнаяПолитикаНУ.Период, МЕСЯЦ))
	|			И УчетнаяПолитикаНУПериоды.Организация = УчетнаяПолитикаНУ.Организация
	|;
	|
    |////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|ПОМЕСТИТЬ РасчетныеПоказателиПериоды
	|ИЗ
	|	ВТ_ДатыПериодовГода КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(РасчетныеПоказатели.Период, МЕСЯЦ))

	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетныеПоказателиПериоды.Период КАК Период,
	|	РасчетныеПоказатели.РазмерМРП КАК РазмерМРП
	|ПОМЕСТИТЬ ВТ_РасчетныеПоказателиПоМесяцам
	|ИЗ
	|	РасчетныеПоказателиПериоды КАК РасчетныеПоказателиПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО (РасчетныеПоказателиПериоды.ПериодСреза = НАЧАЛОПЕРИОДА(РасчетныеПоказатели.Период, МЕСЯЦ))
	|;
	|
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ
    |	Периоды.Период КАК Период,
    |	ФизическиеЛица.Ссылка КАК ФИО
	|ПОМЕСТИТЬ ВТ_Периоды
    |ИЗ
    |	ВТ_ДатыПериодовГода КАК Периоды
    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
    |		ПО (ИСТИНА)
    |ГДЕ
    |	ФизическиеЛица.ЭтоГруппа = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
    |	Период,
    |	ФИО
	|;
	|/////////////////////////////////////////////////
	|ВЫБРАТЬ
    |	Периоды.Период КАК Период,
    |	Периоды.ФИО КАК ФИО,
    |	МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСреза
	|ПОМЕСТИТЬ ВТ_ГражданствоФизЛицСрезПоследних 
    |	ИЗ
    |		ВТ_Периоды КАК Периоды
    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
    |			ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(ГражданствоФизЛиц.Период, МЕСЯЦ))
    |				И Периоды.ФИО = ГражданствоФизЛиц.ФизЛицо
    |		
    |СГРУППИРОВАТЬ ПО
    |	Периоды.Период,
    |	Периоды.ФИО
	|ИНДЕКСИРОВАТЬ ПО
    |	ПериодСреза,
    |	ФИО
	|;
	|/////////////////////////////////////////////////////
	|ВЫБРАТЬ
    |	ГражданствоФизЛицСрезПоследних.Период КАК Период,
    |	ГражданствоФизЛицСрезПоследних.ФИО КАК ФИО,
    |	ВЫБОР
    |		КОГДА ГражданствоФизЛиц.Страна ЕСТЬ NULL 
    |			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
    |		ИНАЧЕ ГражданствоФизЛиц.Страна
    |	КОНЕЦ КАК Страна,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ) 
	|			ТОГДА ГражданствоФизЛиц.Страна 
	|       ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
	|	КОНЕЦ КАК СтранаРезидентства,
	|	ГражданствоФизЛиц.НомерНалоговойРегистрацииВСтранеРезидентства,
	|	ГражданствоФизЛиц.НеЯвляетсяналоговымРезидентомРК
	|ПОМЕСТИТЬ ВТ_ИтогГражданство
    |	ИЗ
    |		ВТ_ГражданствоФизЛицСрезПоследних КАК ГражданствоФизЛицСрезПоследних
    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
    |			ПО ГражданствоФизЛицСрезПоследних.ПериодСреза = ГражданствоФизЛиц.Период
    |				И ГражданствоФизЛицСрезПоследних.ФИО = ГражданствоФизЛиц.ФизЛицо
    |	ГДЕ
    |		(НЕ ВЫБОР
    |					КОГДА ГражданствоФизЛиц.Страна ЕСТЬ NULL 
    |						ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
    |					ИНАЧЕ ГражданствоФизЛиц.Страна
    |				КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
    |	
    |	ОБЪЕДИНИТЬ ВСЕ
    |	
    |	ВЫБРАТЬ
    |		Периоды.Период,
    |		Контрагенты.Ссылка,
    |		ВЫБОР
    |			КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
    |				ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
    |			ИНАЧЕ Контрагенты.СтранаРезидентства
    |		КОНЕЦ,
	|		ВЫБОР
    |			КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
    |				ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
    |			ИНАЧЕ Контрагенты.СтранаРезидентства
    |		КОНЕЦ,
	|		Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства,
	|		ВЫБОР КОГДА Подстрока(Контрагенты.КБЕ,1,1) = ""2"" Тогда Истина иначе Ложь КОНЕЦ
    |	ИЗ
    |		ВТ_ДатыПериодовГода КАК Периоды
    |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
    |			ПО (ИСТИНА)
    |	ГДЕ
    |		Контрагенты.ЭтоГруппа = ЛОЖЬ
    |		И (НЕ ВЫБОР
    |					КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
    |						ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
    |					ИНАЧЕ Контрагенты.СтранаРезидентства
    |				КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
	|;
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ИтогГражданство.Период КАК Период,
    |	ИтогГражданство.ФИО КАК ФИО,
    |	ИтогГражданство.Страна,
	|	ИтогГражданство.НомерНалоговойРегистрацииВСтранеРезидентства,	
	|	ИтогГражданство.НеЯвляетсяналоговымРезидентомРК,
	|	ИтогГражданство.СтранаРезидентства
    |ПОМЕСТИТЬ ВТ_Гражданство
    |ИЗ
    |	ВТ_ИтогГражданство КАК ИтогГражданство
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	Период,
    |	ФИО";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();

	// Свернем строки по физлицам
	ДоходыИНалогиТекст = "
	|ВЫБРАТЬ
	|	ДоходыИНалоги.ФизЛицо КАК ФизЛицо,
	|	ДоходыИНалоги.ВыплатыПоИЛ КАК ВыплатыПоИЛ,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.НачисленоДоходов) 							КАК ЧИСЛО(19, 0)) КАК НачисленоДоходов,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.НалоговыеВычеты) 							КАК ЧИСЛО(19, 0)) КАК НалоговыеВычеты,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ОбязательныеПенсионныеВзносы) 				КАК ЧИСЛО(19, 0)) КАК ОбязательныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ОбязательныеПрофессиональныеПенсионныеВзносы) КАК ЧИСЛО(19, 0)) КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ОбязательныеПенсионныеВзносыРаботодателя)  КАК ЧИСЛО(19, 0)) КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ДобровольныеПенсионныеВзносы) 				КАК ЧИСЛО(19, 0)) КАК ДобровольныеПенсионныеВзносы,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ПогашениеЖилищныхЗаймов) 					КАК ЧИСЛО(19, 0)) КАК ПогашениеЖилищныхЗаймов,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.СтраховыеПремии) 							КАК ЧИСЛО(19, 0)) КАК СтраховыеПремии,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.НаОплатуМедицинскихУслуг) 					КАК ЧИСЛО(19, 0)) КАК НаОплатуМедицинскихУслуг,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ДоходыНеОблагаемыеИПН) 					КАК ЧИСЛО(19, 0)) КАК ДоходыНеОблагаемыеИПН,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ИндивидуальныйПодоходныйНалог) 			КАК ЧИСЛО(19, 0)) КАК ИндивидуальныйПодоходныйНалог,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ВыплаченоДоходов) 							КАК ЧИСЛО(19, 0)) КАК ВыплаченоДоходов,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ВыплатыНеОблагаемыеСН) 					КАК ЧИСЛО(19, 0)) КАК ВыплатыНеОблагаемыеСН,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ВыплатыОблагаемыеСН)						КАК ЧИСЛО(19, 0)) КАК ВыплатыОблагаемыеСН,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.СоциальныеНалог) 							КАК ЧИСЛО(19, 0)) КАК СоциальныеНалог,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.СоциальныеОтчисления) 						КАК ЧИСЛО(19, 0)) КАК СоциальныеОтчисления,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.СуммаООСМС)			 					КАК ЧИСЛО(19, 0)) КАК СуммаООСМС,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.СуммаВОСМС)			 					КАК ЧИСЛО(19, 0)) КАК СуммаВОСМС,
	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ИПНПодлежащийПеречислению)  				КАК ЧИСЛО(19, 0)) КАК ИПНПодлежащийПеречислению,
	|	ВЫРАЗИТЬ(МАКСИМУМ(ДоходыИНалоги.ФизЛицоСтруктурногоПодразделения)		КАК ЧИСЛО(19, 0)) КАК ФизЛицоСтруктурногоПодразделения,
    |	ДоходыИНалоги.ВидВычета                                                 КАК ВидВычета,
   	|	ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ОПВПодлежащийПеречислению) 				КАК ЧИСЛО(19, 0)) КАК ОПВПодлежащийПеречислению,
    |   ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ВОСМСПодлежащийПеречислению) 				КАК ЧИСЛО(19, 0)) КАК ВОСМСПодлежащийПеречислению,
    |   ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.ЗадолженностьПоДоходам) 					КАК ЧИСЛО(19, 0)) КАК ЗадолженностьПоДоходам,
    |   ДоходыИНалоги.КодСтроки КАК КодСтроки,
    |   ВЫРАЗИТЬ(СУММА(ДоходыИНалоги.СНИсчисленный) 						    КАК ЧИСЛО(19, 0)) КАК СНИсчисленный,
    |	ДоходыИНалоги.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|  ПОМЕСТИТЬ ВТ_ДоходыИНалоги
	|ИЗ
	|	(" + ДоходыИНалогиТекст + ") КАК ДоходыИНалоги
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоходыИНалоги.ФизЛицо,
	|	ДоходыИНалоги.ВыплатыПоИЛ,
    |	ДоходыИНалоги.ВидВычета,
    |   ДоходыИНалоги.КодСтроки,
    |	ДоходыИНалоги.СтруктурнаяЕдиница
    |";	
	Запрос.Текст = ДоходыИНалогиТекст;
	Запрос.Выполнить();
	// Выберем прочую информацию, относящуюся к физлицам
	ТекстЗапроса = "
	|//////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТ_Гражданство.Период) КАК ПериодСреза,
	|	ВТ_Гражданство.ФИО КАК ФИО
	|ПОМЕСТИТЬ ТаблПериодСреза
	|	ИЗ
	|	ВТ_Гражданство КАК ВТ_Гражданство
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Гражданство.ФИО;
	|
	|//////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблПериодСреза.ПериодСреза КАК Период,
	|	ТаблПериодСреза.ФИО КАК ФизЛицо,
	|	ТаблГражданство.Страна,
	|	ТаблГражданство.СтранаРезидентства,
	|	ТаблГражданство.НомерНалоговойРегистрацииВСтранеРезидентства,
	|	ТаблГражданство.НеЯвляетсяНалоговымРезидентомРК,
    |	ВЫБОР 
    |       КОГДА ТаблГражданство.СтранаРезидентства = КлассификаторСтранМира.Ссылка 
    |           ТОГДА ЕСТЬNULL(КлассификаторСтранМира.КодАльфа2, """")
    |       ИНАЧЕ """"
    |   КОНЕЦ КАК КодСтраны,
    |	ВЫБОР 
    |       КОГДА ТаблГражданство.Страна = КлассификаторСтранМира.Ссылка 
    |           ТОГДА ЕСТЬNULL(КлассификаторСтранМира.КодАльфа2, """")
    |       ИНАЧЕ """"
    |   КОНЕЦ КАК КодСтраныГражданства
	|ПОМЕСТИТЬ ТаблНеГраждане
	|ИЗ
	|	ТаблПериодСреза КАК ТаблПериодСреза
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ТаблГражданство
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
	|			ПО ТаблГражданство.Страна = КлассификаторСтранМира.Ссылка
	|	ПО ТаблПериодСреза.ПериодСреза = ТаблГражданство.Период
	|	И ТаблПериодСреза.ФИО = ТаблГражданство.ФИО;
	|
	|/////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоходыИНалоги.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL ТОГДА ДоходыИНалоги.ФизЛицо.Наименование 
	|		ИНАЧЕ ФИОФИзЛиц.Фамилия + ВЫБОР
	|									КОГДА ФИОФизЛиц.Имя <> """" ТОГДА "" "" + ФИОФизЛиц.Имя
	|									ИНАЧЕ """"
	|								  КОНЕЦ + 
	|								  ВЫБОР
	|									КОГДА ФИОФизЛиц.Отчество <> """" ТОГДА "" "" + ФИОФизЛиц.Отчество
	|									ИНАЧЕ """"
	|								  КОНЕЦ 
	|	КОНЕЦ КАК ФИОФизЛица,
	|	ДоходыИНалоги.ФизЛицо.РНН КАК РНН,
	|	ДоходыИНалоги.ФизЛицо.ИдентификационныйКодЛичности КАК ИИН,
	|	ТаблНеГраждане.КодСтраны КАК КодСтраны,
    |   ТаблНеГраждане.КодСтраныГражданства КАК КодСтраныГражданства,
	|	ЕСТЬNULL(ТаблНеГраждане.НомерНалоговойРегистрацииВСтранеРезидентства,"""") КАК НомерРегистрации,
	|	ЕСТЬNULL(ТаблНеГраждане.НеЯвляетсяНалоговымРезидентомРК,Истина) КАК НеЯвляетсяНалоговымРезидентомРК,
	|	ЕСТЬNULL(ПаспортныеДанныеФизЛиц.ДокументВид.КодВидаДокументаВНалоговойОтчетности,"""") КАК КодВидаДокументаВНалоговойОтчетности,
	|	ЕСТЬNULL(ПаспортныеДанныеФизЛиц.ДокументНомер, """") КАК НомерДокумента,
	|	ЕСТЬNULL(ПаспортныеДанныеФизЛиц.ДокументДатаВыдачи, &парамПустаяДата) КАК ДатаДокумента,			
	|	ВЫБОР
	|		КОГДА ДоходыИНалоги.ФизЛицо ССЫЛКА Справочник.Контрагенты И ДоходыИНалоги.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|			И НЕ ДоходыИНалоги.ВыплатыПоИЛ ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИндивидуальныйПредпринимательАдвокатЧастныйНотариус,	
	|	ДоходыИНалоги.НачисленоДоходов КАК НачисленоДоходов,
	|	ЕСТЬNULL(ДоходыИНалоги.НалоговыеВычеты, 0) КАК НалоговыеВычеты,
	|	ДоходыИНалоги.ОбязательныеПенсионныеВзносы КАК ОбязательныеПенсионныеВзносы,
	|	ДоходыИНалоги.ОбязательныеПрофессиональныеПенсионныеВзносы КАК ОбязательныеПрофессиональныеПенсионныеВзносы,
	|	ДоходыИНалоги.ОбязательныеПенсионныеВзносыРаботодателя КАК ОбязательныеПенсионныеВзносыРаботодателя,
	|	ДоходыИНалоги.ДобровольныеПенсионныеВзносы КАК ДобровольныеПенсионныеВзносы,
	|	ДоходыИНалоги.ПогашениеЖилищныхЗаймов КАК ПогашениеЖилищныхЗаймов,
	|	ДоходыИНалоги.СтраховыеПремии КАК СтраховыеПремии,
	|	ДоходыИНалоги.НаОплатуМедицинскихУслуг КАК НаОплатуМедицинскихУслуг,
   	|	ДоходыИНалоги.ДоходыНеОблагаемыеИПН КАК ДоходыНеОблагаемыеИПН,
	|	ДоходыИНалоги.ИндивидуальныйПодоходныйНалог КАК ИндивидуальныйПодоходныйНалог,
	|	ДоходыИНалоги.ВыплаченоДоходов КАК ВыплаченоДоходов,
	|	ДоходыИНалоги.ВыплатыНеОблагаемыеСН КАК ВыплатыНеОблагаемыеСН,
	|	ДоходыИНалоги.ВыплатыОблагаемыеСН КАК ВыплатыОблагаемыеСН,
	|	ДоходыИНалоги.СоциальныеНалог КАК СоциальныеНалог,
	|	ДоходыИНалоги.СоциальныеОтчисления КАК СоциальныеОтчисления,
	|	ДоходыИНалоги.СуммаООСМС КАК СуммаООСМС,
	|	ДоходыИНалоги.СуммаВОСМС КАК СуммаВОСМС,
	|	ДоходыИНалоги.ИПНПодлежащийПеречислению КАК ИПНПодлежащийПеречислению,
	|	ДоходыИНалоги.ФизЛицоСтруктурногоПодразделения КАК ФизЛицоСтруктурногоПодразделения,
    |	ЕСТЬNULL(ДоходыИНалоги.ВидВычета, ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка)) КАК ВидВычета,
    |	ДоходыИНалоги.ОПВПодлежащийПеречислению КАК ОПВПодлежащийПеречислению,
    |   ДоходыИНалоги.ВОСМСПодлежащийПеречислению КАК ВОСМСПодлежащийПеречислению,
    |   ДоходыИНалоги.ЗадолженностьПоДоходам КАК ЗадолженностьПоДоходам,
    |   ДоходыИНалоги.КодСтроки КАК КодСтроки,
    |   ДоходыИНалоги.СНИсчисленный КАК СНИсчисленный,
    |	ДоходыИНалоги.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|
	|ИЗ
	|	ВТ_ДоходыИНалоги КАК ДоходыИНалоги
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамПериодПо) КАК ФИОФизЛиц
	|		ПО (ВЫБОР
    |				КОГДА ДоходыИНалоги.ФизЛицо ССЫЛКА Справочник.Контрагенты
    |					И ДоходыИНалоги.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |					ТОГДА ДоходыИНалоги.ФизЛицо.ФизЛицо = ФИОФизЛиц.ФизЛицо
    |				ИНАЧЕ ДоходыИНалоги.ФизЛицо = ФИОФизЛиц.ФизЛицо
    |			  КОНЕЦ)
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблНеГраждане КАК ТаблНеГраждане  // выберем последнюю страну нерезидентства	
	|		ПО (ВЫБОР
    |				КОГДА ДоходыИНалоги.ФизЛицо ССЫЛКА Справочник.Контрагенты
    |					И ДоходыИНалоги.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |					ТОГДА ДоходыИНалоги.ФизЛицо.ФизЛицо = ТаблНеГраждане.ФизЛицо
    |				ИНАЧЕ ДоходыИНалоги.ФизЛицо = ТаблНеГраждане.ФизЛицо
    |			  КОНЕЦ)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&парамПериодПо) КАК ПаспортныеДанныеФизЛиц
	|		ПО (ВЫБОР
    |				КОГДА ДоходыИНалоги.ФизЛицо ССЫЛКА Справочник.Контрагенты
    |					И ДоходыИНалоги.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |					ТОГДА ДоходыИНалоги.ФизЛицо.ФизЛицо = ПаспортныеДанныеФизЛиц.ФизЛицо
    |				ИНАЧЕ  ДоходыИНалоги.ФизЛицо = ПаспортныеДанныеФизЛиц.ФизЛицо
    |			  КОНЕЦ)
  	|
	|ГДЕ
	|	(ДоходыИНалоги.НачисленоДоходов <> 0
	|	ИЛИ ДоходыИНалоги.НалоговыеВычеты <> 0
	|	ИЛИ ДоходыИНалоги.ОбязательныеПенсионныеВзносы <> 0
	|	ИЛИ ДоходыИНалоги.ОбязательныеПрофессиональныеПенсионныеВзносы <> 0
	|	ИЛИ ДоходыИНалоги.ОбязательныеПенсионныеВзносыРаботодателя <> 0
	|	ИЛИ ДоходыИНалоги.ДобровольныеПенсионныеВзносы <> 0
	|	ИЛИ ДоходыИНалоги.ПогашениеЖилищныхЗаймов <> 0
	|	ИЛИ ДоходыИНалоги.СтраховыеПремии <> 0
	|	ИЛИ ДоходыИНалоги.НаОплатуМедицинскихУслуг <> 0
   	|	ИЛИ ДоходыИНалоги.ДоходыНеОблагаемыеИПН <> 0
	|	ИЛИ ДоходыИНалоги.ИндивидуальныйПодоходныйНалог <> 0
	|	ИЛИ ДоходыИНалоги.ВыплаченоДоходов <> 0
	|	ИЛИ ДоходыИНалоги.ВыплатыНеОблагаемыеСН <> 0
	|	ИЛИ ДоходыИНалоги.ВыплатыОблагаемыеСН <> 0
	|	ИЛИ ДоходыИНалоги.СоциальныеНалог <> 0
	|	ИЛИ ДоходыИНалоги.СоциальныеОтчисления <> 0
	|	ИЛИ ДоходыИНалоги.СуммаООСМС <> 0
	|	ИЛИ ДоходыИНалоги.СуммаВОСМС <> 0
	|	ИЛИ ДоходыИНалоги.ИПНПодлежащийПеречислению <> 0
	|	ИЛИ ДоходыИНалоги.ОПВПодлежащийПеречислению <> 0
    |   ИЛИ ДоходыИНалоги.ВОСМСПодлежащийПеречислению <> 0
    |   ИЛИ ДоходыИНалоги.ЗадолженностьПоДоходам <> 0
    |   ИЛИ ДоходыИНалоги.СНИсчисленный <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL ТОГДА ДоходыИНалоги.ФизЛицо.Наименование 
	|		ИНАЧЕ ФИОФИзЛиц.Фамилия + ВЫБОР
	|									КОГДА ФИОФизЛиц.Имя <> """" ТОГДА "" "" + ФИОФизЛиц.Имя
	|									ИНАЧЕ """"
	|								  КОНЕЦ + 
	|								  ВЫБОР
	|									КОГДА ФИОФизЛиц.Отчество <> """" ТОГДА "" "" + ФИОФизЛиц.Отчество
	|									ИНАЧЕ """"
	|								  КОНЕЦ 
	|	КОНЕЦ,
    |   ДоходыИНалоги.ВидВычета
    |ИТОГИ
    |	СУММА(НачисленоДоходов),
    |	СУММА(ОбязательныеПенсионныеВзносы),
    |	СУММА(ОбязательныеПрофессиональныеПенсионныеВзносы),
    |	СУММА(ОбязательныеПенсионныеВзносыРаботодателя),
    |	СУММА(СтраховыеПремии),
    |	СУММА(ИндивидуальныйПодоходныйНалог),
    |	СУММА(ВыплаченоДоходов),
    |	СУММА(ВыплатыНеОблагаемыеСН),
    |	СУММА(ВыплатыОблагаемыеСН),
    |	СУММА(СоциальныеНалог),
    |	СУММА(СоциальныеОтчисления),
    |	СУММА(СуммаООСМС),
    |	СУММА(СуммаВОСМС),
    |	СУММА(ИПНПодлежащийПеречислению),
    |   СУММА(ОПВПодлежащийПеречислению),
    |   СУММА(ВОСМСПодлежащийПеречислению),
    |   СУММА(ЗадолженностьПоДоходам),
    |   СУММА(СНИсчисленный)
    |ПО
    |	ФизЛицо,
    |   ФизЛицоСтруктурногоПодразделения
    |";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() и ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 200.02 за отчетный период отсутствуют...'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	    
    Возврат Результат;
	
КонецФункции // Форма200_02РассчитатьДанныеФормы()

&НаКлиенте
Процедура Форма200_02Расшифровка(ИмяЯчейки)
	
	СтруктураПоФизЛицу = Новый Структура;
	// определим работника
	Если Найти(ИмяЯчейки,"__") > 0 Тогда		
		НомерЯчейки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "__")+ 2));
		
		ОбластьРасшифровки = Форма200_02ПолеТабличногоДокументаСтраница1.Области.Найти("Ф200_02ФИОРезидента__" +  НомерЯчейки);		
		Если ОбластьРасшифровки <> Неопределено Тогда
			Если ЗначениеЗаполнено(ОбластьРасшифровки.Расшифровка) Тогда
				СтруктураПоФизЛицу.Вставить("ФизЛицо", ОбластьРасшифровки.Расшифровка);
				СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);					
			Иначе
				ПоказатьПредупреждение(,НСтр("ru = 'Для формирования расшифровки заполните физическое лицо в графе ""В"" на странице 1.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки не поддерживается."+Символы.ПС+"Расшифровку содержат ячейки формы, выделенные голубым цветом.'"));
		Возврат;
	КонецЕсли;
	
	ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,, СтруктураПоФизЛицу, "Детальный", Истина,Истина);
	
КонецПроцедуры // Форма200_02Расшифровка()

&НаКлиенте
Процедура Форма200_02Расшифровкаобщая()
	
	СтруктураПоФизЛицу = Новый Структура;
	Если ПолучитьЗначениеРеквизита(Налогоплательщик, "ЮрФизЛицо") = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		СтруктураПоФизЛицу.Вставить("ФизЛицо", ПолучитьЗначениеРеквизита(Налогоплательщик, "ИндивидуальныйПредприниматель"));
		СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.НеРавно);											
	КонецЕсли;
	
	ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,,СтруктураПоФизЛицу,, Истина,Истина);	
	
КонецПроцедуры // Форма200_02Расшифровкаобщая()

&НаКлиенте
Процедура РасшифровкаПоРаботнику(Команда)
	
	Попытка
		ИмяЯчейки = ТекущийЭлемент.ТекущаяОбласть.Имя;
	Исключение
		 ПоказатьПредупреждение(, Нстр("ru = 'Активизируйте нужную ячейку отчета для расшифровки.'"));
		Возврат;
	КонецПопытки;
		
	ЦветРасшифровки = Форма200ПолеТабличногоДокументаСтраница1.Области.s_200_00_001_1.ЦветФона; 
	
	КодФормыБезПрефикса = СтрЗаменить(КодФормы, "Форма", "");
	                              
	Если Лев(ТекущийЭлемент.Имя,СтрДлина(ТекущийЭлемент.Имя)-1) = "Форма200_02ПолеТабличногоДокументаСтраница"
	 	И ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда
		Если КодФормы = "Форма200_02" Тогда
			Форма200_02Расшифровка(ИмяЯчейки);		
		КонецЕсли;
		
	ИначеЕсли  Лев(ТекущийЭлемент.Имя,СтрДлина(ТекущийЭлемент.Имя)-1) = "Форма200_05ПолеТабличногоДокументаСтраница"
	 	И ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда
		Если КодФормы = "Форма200_05" Тогда
			Форма200_05Расшифровка(ИмяЯчейки);		
		КонецЕсли; 
		
	ИначеЕсли  Лев(ТекущийЭлемент.Имя,СтрДлина(ТекущийЭлемент.Имя)-1) = "Форма" + КодФормыБезПрефикса + "ПолеТабличногоДокументаСтраница"
	 	И ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда
		Если Найти(КодФормы, "Форма200_06") > 0 Тогда
			Форма200_06Расшифровка(ИмяЯчейки);		
		КонецЕсли;
		
	Иначе	
		ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки не поддерживается."+Символы.ПС+"Расшифровку содержат ячейки формы, выделенные голубым цветом.'"));
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Форма 200.03

&НаСервере
Функция Форма200_03РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
    //должен быть предрасчет
	ТаблицаПоМесяцам = Новый ТаблицаЗначений;
	
	ТаблицаПоМесяцам.Колонки.Добавить("СтруктурнаяЕдиница");
	ТаблицаПоМесяцам.Колонки.Добавить("КодСтроки", 				ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаПоМесяцам.Колонки.Добавить("МесяцНалоговогоПериода", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаПоМесяцам.Колонки.Добавить("Значение", 				ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));

	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("СтруктурнаяЕдиница");
	ТаблицаРезультат.Колонки.Добавить("НалоговыйКомитет");
	
	ТаблицаРезультат.Колонки.Добавить("ЧисленностьРаботников_1",  ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("ЧисленностьРаботников_2",  ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("ЧисленностьРаботников_3",  ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("ЧисленностьИностранцев_1", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("ЧисленностьИностранцев_2", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("ЧисленностьИностранцев_3", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_001_1", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_001_2", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_001_3", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_001_4", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_001_5", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));

	ТаблицаРезультат.Колонки.Добавить("Ф200_03_002_1", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_002_2", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_002_3", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_002_4", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_002_5", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));

	ТаблицаРезультат.Колонки.Добавить("Ф200_03_003_1", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_003_2", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_003_3", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_003_4", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_003_5", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_004_1", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_004_2", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_004_3", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_004_4", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_004_5", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));

	ТаблицаРезультат.Колонки.Добавить("Ф200_03_005_1", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_005_2", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_005_3", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_005_4", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_005_5", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));

	ТаблицаРезультат.Колонки.Добавить("Ф200_03_006_1", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_006_2", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_006_3", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_006_4", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_006_5", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_007_1", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_007_2", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_007_3", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_007_4", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_007_5", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2)); 
	
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_008_1", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_008_2", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_008_3", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_008_4", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_008_5", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2)); 
	
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_009_1", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_009_2", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_009_3", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_009_4", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультат.Колонки.Добавить("Ф200_03_009_5", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));

	ТаблицаРезультат.Индексы.Добавить("СтруктурнаяЕдиница");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамПериодС", 				НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПериодПо", 				КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамНалогоплательщик",	 	Налогоплательщик);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());
	
	// из списка структурных единиц исключим саму головную организацию - налогоплательщика, 
	// т.к. приложение 200.03 составляется только по филиалам/представительствам
	СписокДляОтбора = Новый Массив;
	Для Каждого ЭлементСписка Из мСписокСтруктурныхЕдиниц Цикл
		Если ЭлементСписка.Значение <> Налогоплательщик Тогда
			СписокДляОтбора.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", СписокДляОтбора);
	
	мПризнакСистемыСотрудниковЗУП20 = СтруктураРеквизитовФормы.мПризнакСистемыСотрудниковЗУП20;

	// если налогоплательщик - ИП, то исключим данные самого индивидуального предпринимателя
	Если ОтчетОбъект.Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Налогоплательщик.ИндивидуальныйПредприниматель);
	Иначе
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Неопределено);
	КонецЕсли;
	
	// Определим учетную политику по НУ
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН,
	               |	УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации,
	               |	УчетнаяПолитикаНУ.УпрощенныйУчетИПНиОПВ
	               |ИЗ
	               |	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодПо, Организация = &парамНалогоплательщик) КАК УчетнаяПолитикаНУ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОрганизацияЯвляетсяПлательщикомСН			= Выборка.ОрганизацияЯвляетсяПлательщикомСН;
		ОтражениеПоПериодуРегистрации				= Выборка.ОтражениеПоПериодуРегистрации;
		УпрощенныйУчетИПНиОПВ						= Выборка.УпрощенныйУчетИПНиОПВ;
	Иначе
		ОрганизацияЯвляетсяПлательщикомСН			= Ложь;
		ОтражениеПоПериодуРегистрации				= Истина;
		УпрощенныйУчетИПНиОПВ						= Истина;
	КонецЕсли;
	
	// если не используется удельный вес, но используется отражение по периоду действия суммы налогов/взносов/отчислений необходимо отражать по периоду действия
	Запрос.УстановитьПараметр("ОтражатьПоПериодуДействия", УпрощенныйУчетИПНиОПВ И НЕ ОтражениеПоПериодуРегистрации);

	МТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МТ;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТ_ДатыПериодовГода
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря  КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &парамПериодС И &парамПериодПо
	|;
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ
    |	Периоды.Период КАК Период,
    |	ФизическиеЛица.Ссылка КАК ФИО
	|ПОМЕСТИТЬ ВТ_Периоды
    |ИЗ
    |	ВТ_ДатыПериодовГода КАК Периоды
    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
    |		ПО (ИСТИНА)
    |ГДЕ
    |	ФизическиеЛица.ЭтоГруппа = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
    |	Период,
    |	ФИО
	|;
	|/////////////////////////////////////////////////
	|ВЫБРАТЬ
    |	Периоды.Период КАК Период,
    |	Периоды.ФИО КАК ФИО,
    |	МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСреза
	|ПОМЕСТИТЬ ВТ_ГражданствоФизЛицСрезПоследних 
    |	ИЗ
    |		ВТ_Периоды КАК Периоды
    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
    |			ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(ГражданствоФизЛиц.Период, МЕСЯЦ))
    |				И Периоды.ФИО = ГражданствоФизЛиц.ФизЛицо
    |		
    |СГРУППИРОВАТЬ ПО
    |	Периоды.Период,
    |	Периоды.ФИО
	|ИНДЕКСИРОВАТЬ ПО
    |	ПериодСреза,
    |	ФИО
	|;
	|/////////////////////////////////////////////////////
	|ВЫБРАТЬ
    |	ГражданствоФизЛицСрезПоследних.Период КАК Период,
    |	ГражданствоФизЛицСрезПоследних.ФИО КАК ФИО
	|ПОМЕСТИТЬ ВТ_ИтогГражданство
    |	ИЗ
    |		ВТ_ГражданствоФизЛицСрезПоследних КАК ГражданствоФизЛицСрезПоследних
    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
    |			ПО ГражданствоФизЛицСрезПоследних.ПериодСреза = ГражданствоФизЛиц.Период
    |				И ГражданствоФизЛицСрезПоследних.ФИО = ГражданствоФизЛиц.ФизЛицо
    |	ГДЕ
    |		(НЕ ВЫБОР
    |					КОГДА ГражданствоФизЛиц.Страна ЕСТЬ NULL 
    |						ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
    |					ИНАЧЕ ГражданствоФизЛиц.Страна
    |				КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
   	|;
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ИтогГражданство.Период КАК Период,
    |	ИтогГражданство.ФИО КАК ФИО
    |ПОМЕСТИТЬ ВТ_Гражданство
    |ИЗ
    |	ВТ_ИтогГражданство КАК ИтогГражданство
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	Период,
    |	ФИО";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();

	// Численность работников в СП
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаботникиОрганизацийСрезПоследних." +?(мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТ_СписокРаботников
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&парамПериодС,
	|			Организация = &парамНалогоплательщик
	|				ИЛИ ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц)) КАК РаботникиОрганизацийСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизаций." +?(мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ФизЛицо КАК ФизЛицо
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	(РаботникиОрганизаций.Организация = &парамНалогоплательщик
	|			ИЛИ РаботникиОрганизаций.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц))
	|	И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И РаботникиОрганизаций.Период МЕЖДУ &парамПериодС И &парамПериодПо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РаботникиОрганизацийСрезПоследних." +?(мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ФизЛицо
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СписокРаботников.Физлицо КАК Физлицо,
	|	ИПНСведенияОДоходах.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода
	|ПОМЕСТИТЬ ВТ_СписокРаботниковСПериодом
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|				И ФизЛицо <> &парамИндивидуальныйПредприниматель
	|				И ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ИПНСведенияОДоходах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокРаботников КАК ВТ_СписокРаботников
	|		ПО (ВТ_СписокРаботников.Физлицо = ИПНСведенияОДоходах.ФизЛицо)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ВТ_СписокРаботников.Физлицо КАК Физлицо,
	|	ВЫБОР
	|			КОГДА ЕПСведенияОДоходах.СтруктурнаяЕдиница <> ЕПСведенияОДоходах.Налогоплательщик
	|				ТОГДА ЕПСведенияОДоходах.СтруктурнаяЕдиница
	|			ИНАЧЕ NULL
	|		КОНЕЦ КАК СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(ЕПСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода
	|ИЗ
	|	РегистрНакопления.ЕПСведенияОДоходах.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|				И ФизЛицо <> &парамИндивидуальныйПредприниматель
	|				И ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ЕПСведенияОДоходах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокРаботников КАК ВТ_СписокРаботников
	|		ПО (ВТ_СписокРаботников.Физлицо = ЕПСведенияОДоходах.ФизЛицо)
	|;
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_СписокРаботниковСПериодом.Физлицо) КАК ЧисленностьРаботников,
	|	ВТ_СписокРаботниковСПериодом.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВТ_СписокРаботниковСПериодом.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР 
	|				КОГДА НЕ ВТ_Гражданство.ФИО ЕСТЬ NULL
	|					ТОГДА ВТ_Гражданство.ФИО
	|				ИНАЧЕ NULL
	|			КОНЕЦ) КАК ЧисленностьИностранцев
	|ИЗ
	|	ВТ_СписокРаботниковСПериодом КАК ВТ_СписокРаботниковСПериодом
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство
	|		ПО (ВТ_СписокРаботниковСПериодом.МесяцНалоговогоПериода = ВТ_Гражданство.Период)
	|			И (ВТ_СписокРаботниковСПериодом.Физлицо = ВТ_Гражданство.ФИО)	
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СписокРаботниковСПериодом.МесяцНалоговогоПериода,
	|	ВТ_СписокРаботниковСПериодом.СтруктурнаяЕдиница";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ЧисленностьРаботников = 0;
	ЧисленностьИностранцев = 0;
	
	Пока Выборка.Следующий() Цикл
		
		// численность работников
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница 		= Выборка.СтруктурнаяЕдиница;
		НоваяСтрока.КодСтроки 				= "ЧисленностьРаботников";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.ЧисленностьРаботников;
		// численность работников
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница 		= Выборка.СтруктурнаяЕдиница;
		НоваяСтрока.КодСтроки 				= "ЧисленностьИностранцев";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.ЧисленностьИностранцев;
		
		
	КонецЦикла;

	// Сумма индивидуального подоходного налога, подлежащего перечислению
	
	Запрос.Текст = "
	|// ИПН, подлежащий перечислению
	|ВЫБРАТЬ
	|	ИПНРасчетыСБюджетом.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА &ОтражатьПоПериодуДействия
	|				ТОГДА ИПНРасчетыСБюджетом.МесяцНалоговогоПериода
	|			ИНАЧЕ ИПНРасчетыСБюджетом.Период
	|		КОНЕЦ, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(ИПНРасчетыСБюджетом.Налог) КАК СуммаИПНПодлежащегоПеречислению
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|ГДЕ
	|	ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик
	|	И ИПНРасчетыСБюджетом.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
   	|	И (ИПНРасчетыСБюджетом.Период МЕЖДУ &парамПериодС И &парамПериодПо
   	|				И НЕ &ОтражатьПоПериодуДействия
   	|			ИЛИ ИПНРасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
   	|				И &ОтражатьПоПериодуДействия)
	|	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|	И ИПНРасчетыСБюджетом.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И (ВЫБОР
	|		КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|			ТОГДА НЕ ИПНРасчетыСБюджетом.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|		ИНАЧЕ ИСТИНА
	|	  КОНЕЦ)
	|	И ИПНРасчетыСБюджетом.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПНРасчетыСБюджетом.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА &ОтражатьПоПериодуДействия
	|				ТОГДА ИПНРасчетыСБюджетом.МесяцНалоговогоПериода
	|			ИНАЧЕ ИПНРасчетыСБюджетом.Период
	|		КОНЕЦ, МЕСЯЦ)
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница 	= Выборка.СтруктурнаяЕдиница;
		НоваяСтрока.КодСтроки 			= "Ф200_03_001";
		
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.СуммаИПНПодлежащегоПеречислению;	
	КонецЦикла;

	// Сумма обязательных пенсионных взносов, подлежащих перечислению	
	Запрос.Текст = "
	|// ОПВ, подлежащие перечислению
	|ВЫБРАТЬ
	|	ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА &ОтражатьПоПериодуДействия
	|				ТОГДА ОПВПодлежитПеречислениюВФонды.МесяцНалоговогоПериода
	|			ИНАЧЕ ОПВПодлежитПеречислениюВФонды.Период
	|		КОНЕЦ, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(ОПВПодлежитПеречислениюВФонды.Взнос) КАК СуммаОПВПодлежащихПеречислению
	|ИЗ                         
	|	РегистрНакопления.ОПВПодлежитПеречислениюВФонды КАК ОПВПодлежитПеречислениюВФонды                                   
	|ГДЕ
	|	ОПВПодлежитПеречислениюВФонды.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
   	|	И (ОПВПодлежитПеречислениюВФонды.Период МЕЖДУ &парамПериодС И &парамПериодПо
   	|				И НЕ &ОтражатьПоПериодуДействия
   	|			ИЛИ ОПВПодлежитПеречислениюВФонды.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
   	|				И &ОтражатьПоПериодуДействия)
	|	И ОПВПодлежитПеречислениюВФонды.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|	И ОПВПодлежитПеречислениюВФонды.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ОПВПодлежитПеречислениюВФонды.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА &ОтражатьПоПериодуДействия
	|				ТОГДА ОПВПодлежитПеречислениюВФонды.МесяцНалоговогоПериода
	|			ИНАЧЕ ОПВПодлежитПеречислениюВФонды.Период
	|		КОНЕЦ, МЕСЯЦ)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница 		= Выборка.СтруктурнаяЕдиница;
		НоваяСтрока.КодСтроки 				= "Ф200_03_002";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.СуммаОПВПодлежащихПеречислению;
	
	КонецЦикла;

	// Сумма ОППВ
	Если СтруктураРеквизитовФормы.ВедетсяУчетОППВ Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОППВРасчетыСФондами.СтруктурнаяЕдиница,
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ОППВРасчетыСФондами.Взнос) КАК ОППВ
		|ИЗ
		|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами                                                
		|ГДЕ
		|	ОППВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
		|	И ОППВРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|	И ОППВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
		|	И ОППВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОППВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ОППВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ОППВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
		|	И ОППВРасчетыСФондами.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ОППВРасчетыСФондами.СтруктурнаяЕдиница,
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ТаблицаПоМесяцам.Добавить();
			НоваяСтрока.СтруктурнаяЕдиница 		= Выборка.СтруктурнаяЕдиница;
			НоваяСтрока.КодСтроки 				= "Ф200_03_003";
			НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
			НоваяСтрока.Значение 				= Выборка.ОППВ;
			
		КонецЦикла;
	КонецЕсли;
	
	// Сумма исчисленного социального налога	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СНИсчисленный.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(СНИсчисленный.Налог) КАК Налог
	|ИЗ
	|	РегистрНакопления.СНИсчисленный КАК СНИсчисленный                                             
	|ГДЕ
	|	СНИсчисленный.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И СНИсчисленный.Налогоплательщик = &парамНалогоплательщик
	|	И СНИсчисленный.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	|	И СНИсчисленный.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	СНИсчисленный.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ)";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница 		= Выборка.СтруктурнаяЕдиница;
		НоваяСтрока.КодСтроки 				= "Ф200_03_004";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.Налог;
	
	КонецЦикла;

	// Сумма социальных отчислений

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СОРасчетыСФондами.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(СОРасчетыСФондами.Отчисление) КАК СоциальныеОтчисления
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами                                                 
	|ГДЕ
	|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И СОРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И СОРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И СОРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	СОРасчетыСФондами.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница 		= Выборка.СтруктурнаяЕдиница;
		НоваяСтрока.КодСтроки 				= "Ф200_03_005";
		НоваяСтрока.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение 				= Выборка.СоциальныеОтчисления;
	
	КонецЦикла;

	// Сумма отчислений ОСМС
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ООСМСРасчетыСФондами.СтруктурнаяЕдиница,
	               |	НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	               |	СУММА(ООСМСРасчетыСФондами.Отчисление) КАК ООСМС
	               |ИЗ
	               |	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
	               |ГДЕ
	               |	ООСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	               |	И ООСМСРасчетыСФондами.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	               |	И ООСМСРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	               |	И ООСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |	И ООСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	               |	И ООСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
				   |	И ООСМСРасчетыСФондами.Активность
	               |	" + ?(ОрганизацияЯвляетсяПлательщикомСН, "", "И ООСМСРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель") + "
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ООСМСРасчетыСФондами.СтруктурнаяЕдиница,
	               |	НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
		НоваяСтрока.КодСтроки = "Ф200_03_006";
		НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение = Выборка.ООСМС;
	
	КонецЦикла;
	
	// Сумма взносов ОСМС

	Запрос.Текст = "ВЫБРАТЬ
	               |	ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница,
	               |	НАЧАЛОПЕРИОДА(ВОСМСПодлежитПеречислениюВФонды.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	               |	СУММА(ВОСМСПодлежитПеречислениюВФонды.Взнос) КАК ВОСМС
	               |ИЗ
	               |	РегистрНакопления.ВОСМСПодлежитПеречислениюВФонды КАК ВОСМСПодлежитПеречислениюВФонды
	               |ГДЕ
	               |	ВОСМСПодлежитПеречислениюВФонды.Налогоплательщик = &парамНалогоплательщик
	               |	И ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	               |	И ВОСМСПодлежитПеречислениюВФонды.Период МЕЖДУ &парамПериодС И &парамПериодПо
	               |	И ВОСМСПодлежитПеречислениюВФонды.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |	И ВОСМСПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
				   |	И ВОСМСПодлежитПеречислениюВФонды.Активность
	               |	" + ?(ОрганизацияЯвляетсяПлательщикомСН, "", "И ВОСМСПодлежитПеречислениюВФонды.ФизЛицо <> &парамИндивидуальныйПредприниматель") + "
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница,
	               |	НАЧАЛОПЕРИОДА(ВОСМСПодлежитПеречислениюВФонды.Период, МЕСЯЦ)";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
		НоваяСтрока.КодСтроки = "Ф200_03_007";
		НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение = Выборка.ВОСМС;
	
	КонецЦикла;
	
			
	// Сумма ЕП	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕПРасчетыСФондами.СтруктурнаяЕдиница,
	               |	НАЧАЛОПЕРИОДА(ЕПРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	               |	СУММА(ЕПРасчетыСФондами.СуммаПлатежа) КАК ЕП
	               |ИЗ
	               |	РегистрНакопления.ЕПРасчетыСФондами КАК ЕПРасчетыСФондами
	               |ГДЕ
	               |	ЕПРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	               |	И ЕПРасчетыСФондами.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	               |	И ЕПРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	               |	И ЕПРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |	И ЕПРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	               |	И ЕПРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
				   |	И ЕПРасчетыСФондами.Активность
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЕПРасчетыСФондами.СтруктурнаяЕдиница,
	               |	НАЧАЛОПЕРИОДА(ЕПРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
		НоваяСтрока.КодСтроки = "Ф200_03_009";
		НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение = Выборка.ЕП;
	
	КонецЦикла;   

	// Сумма ОПВР
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОПВРРасчетыСФондами.СтруктурнаяЕдиница,
	               |	НАЧАЛОПЕРИОДА(ОПВРРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	               |	СУММА(ОПВРРасчетыСФондами.Взнос) КАК ОПВР
	               |ИЗ
	               |	РегистрНакопления.ОПВРРасчетыСФондами КАК ОПВРРасчетыСФондами
	               |ГДЕ
	               |	ОПВРРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	               |	И ОПВРРасчетыСФондами.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	               |	И ОПВРРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	               |	И ОПВРРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |	И ОПВРРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	               |	И ОПВРРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
				   |	И ОПВРРасчетыСФондами.Активность
	               |	" + ?(ОрганизацияЯвляетсяПлательщикомСН, "", "И ОПВРРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель") + "
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОПВРРасчетыСФондами.СтруктурнаяЕдиница,
	               |	НАЧАЛОПЕРИОДА(ОПВРРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = ТаблицаПоМесяцам.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
		НоваяСтрока.КодСтроки = "Ф200_03_008";
		НоваяСтрока.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
		НоваяСтрока.Значение = Выборка.ОПВР;
	
	КонецЦикла;

	// отсортируем строки по структурной единице
	ТаблицаПоМесяцам.Сортировать("СтруктурнаяЕдиница, КодСтроки");
	
	// рассчитываем итоговые графы за квартал и с начала года
	
	Начало1Мес = НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Начало2Мес = ДобавитьМесяц(Начало1Мес, 1);
	Начало3Мес = ДобавитьМесяц(Начало2Мес, 1);
	
	Для Каждого СтрокаТЗ Из ТаблицаПоМесяцам Цикл
		
		Если СтрокаТЗ.КодСтроки <> "Ф200_03_009" Тогда
			// округлим месячную сумму
			СтрокаТЗ.Значение = Окр(СтрокаТЗ.Значение); 
		Иначе
			СтрокаТЗ.Значение = СтрокаТЗ.Значение; 	
		КонецЕсли;
		
		СтрокаРезультат = ТаблицаРезультат.Найти(СтрокаТЗ.СтруктурнаяЕдиница, "СтруктурнаяЕдиница");
		Если СтрокаРезультат = Неопределено Тогда
			СтрокаРезультат = ТаблицаРезультат.Добавить();
			СтрокаРезультат.СтруктурнаяЕдиница = СтрокаТЗ.СтруктурнаяЕдиница;
			СтрокаРезультат.НалоговыйКомитет = ПроцедурыНалоговогоУчета.ПолучитьНалоговыйКомитетСтруктурнойЕдиницы(СтрокаТЗ.СтруктурнаяЕдиница,
																													Налогоплательщик,
																													ПолныеПраваПовтИсп.ЗаполнитьИсчислениеНалоговСтруктурныхЕдиниц(),
																													Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
		КонецЕсли;
		
		ИмяГрафы = СтрокаТЗ.КодСтроки;
		
		Если СтрокаТЗ.МесяцНалоговогоПериода = Начало1Мес Тогда
			СтрокаРезультат[ИмяГрафы + "_1"] = СтрокаРезультат[ИмяГрафы + "_1"] + СтрокаТЗ.Значение;
		ИначеЕсли СтрокаТЗ.МесяцНалоговогоПериода = Начало2Мес Тогда
			СтрокаРезультат[ИмяГрафы + "_2"] = СтрокаРезультат[ИмяГрафы + "_2"] + СтрокаТЗ.Значение;
		ИначеЕсли СтрокаТЗ.МесяцНалоговогоПериода = Начало3Мес Тогда
			СтрокаРезультат[ИмяГрафы + "_3"] = СтрокаРезультат[ИмяГрафы + "_3"] + СтрокаТЗ.Значение;
		КонецЕсли;
		
		Если ИмяГрафы <> "ЧисленностьРаботников" И ИмяГрафы <> "ЧисленностьИностранцев" Тогда
								
			// квартальные итоги
			Если СтрокаТЗ.МесяцНалоговогоПериода >= Начало1Мес Тогда
				СтрокаРезультат[ИмяГрафы + "_4"] = СтрокаРезультат[ИмяГрафы + "_4"] + СтрокаТЗ.Значение;
			КонецЕсли;
			
			// итоги с начала года
			СтрокаРезультат[ИмяГрафы + "_5"] = СтрокаРезультат[ИмяГрафы + "_5"] + СтрокаТЗ.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаРезультат.Количество() = 0 и ВыдаватьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данные для заполнения формы 200.03 за отчетный период отсутствуют...'"));
	КонецЕсли;
				     	
	Возврат ТаблицаРезультат;		 
	
КонецФункции // Форма200_03РассчитатьДанныеФормы()

&НаКлиенте
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма200_03ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Состояние("Расчет формы 200.03");		
	
	Форма200_03ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры // Форма200_03ЗаполнитьАвто()

&НаСервере
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма200_03ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма200_03";
	Очистить(ТекИмяФормы, Истина);
	
	ТекущаяСтраница = 1;
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы",ТекИмяФормы));
	
	Если СтрокаФормы <> Неопределено Тогда
		СтрокаФормы.ВсегоСтраниц = 1;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда  
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Расчет приложения 200.03'"));
	КонецЕсли;   
	
	СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПолучитьПорядокОбложенияДоходовРаботников(Налогоплательщик, КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)); 
	
	ТаблицаРезультат = Форма200_03РассчитатьДанныеФормы(Истина);	
	
	СтруктураРеквизитовФормы.КоличествоСтруктурныхЕдиницБезНалогоплательщика = 0;
	
	Если ТаблицаРезультат.Количество() <> 0 Тогда
		мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы);
		
		Для Каждого ЭлементСтруктуры Из мМногострочнаяСтруктура Цикл
			НомерСтроки = 2;
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
			ТаблицаСтрокГруппы.Очистить();
			
			Для Каждого СтрокаРезультат Из ТаблицаРезультат Цикл
			
				// заполняем данные строки в форме отчета
			 	Элемент = ТаблицаСтрокГруппы.Добавить();   			 
				Если ИмяГруппы = "Страница1" Тогда
					//Так должны заполнять по отдельности значения выборки 
					//для каждого листа
					СтруктураРеквизитовФормы.КоличествоСтруктурныхЕдиницБезНалогоплательщика = СтруктураРеквизитовФормы.КоличествоСтруктурныхЕдиницБезНалогоплательщика + 1;
					БИНФилиала = "";
					ФилиалНазв = "";
					Если ТипЗнч(СтрокаРезультат.СтруктурнаяЕдиница) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
						Если СтруктураРеквизитовФормы.мЕстьРеквизитыСП И НЕ СтрокаРезультат.СтруктурнаяЕдиница.УказыватьРеквизитыГоловнойОрганизации Тогда											
							БИНФилиала = СтрокаРезультат.СтруктурнаяЕдиница.ИдентификационныйНомер;
							ФилиалНазв = СтрокаРезультат.СтруктурнаяЕдиница.НаименованиеПолное;
						Иначе							
							БИНФилиала = СтрокаРезультат.СтруктурнаяЕдиница.Владелец.ИдентификационныйНомер;
							ФилиалНазв = СтрокаРезультат.СтруктурнаяЕдиница.Наименование;
						КонецЕсли; 
					Иначе						
						БИНФилиала = СтрокаРезультат.СтруктурнаяЕдиница.ИдентификационныйНомер;
						ФилиалНазв = СокрЛП(СтрокаРезультат.СтруктурнаяЕдиница.НаименованиеПолное);
						Если ПустаяСтрока(ФилиалНазв) Тогда
							ФилиалНазв = СтрокаРезультат.СтруктурнаяЕдиница.Наименование;
						КонецЕсли;
					КонецЕсли;
					
					Элемент.ИИН_БИНФилиала 	= БИНФилиала;
					Элемент.ФилиалНазв 		= ФилиалНазв;
					
					НазваниеФилиала = ФилиалНазв;
					НачПозиция = 1;
					ДлинаСтроки = 27;
					Для Шаг = 1 По 2 Цикл
						НазФилиала = Сред(НазваниеФилиала, НачПозиция, ДлинаСтроки); 
						Элемент["ФилиалНазв"+Шаг] = НазФилиала;
						НачПозиция =НачПозиция + ДлинаСтроки;
						ДлинаСтроки = 36;
					КонецЦикла;

					Для Н = 1 По 4 Цикл
						Элемент["Ф200_03_001_" + Н] = СтрокаРезультат["Ф200_03_001_" + Н];
						Элемент["Ф200_03_002_" + Н] = СтрокаРезультат["Ф200_03_002_" + Н];
						Элемент["Ф200_03_003_" + Н] = СтрокаРезультат["Ф200_03_003_" + Н];
					КонецЦикла;
				
					//заполним данные расшифровки
					//в данной форме она нужна только на странице 1
					//РегламентированнаяОтчетность.ДобавитьСтрокуРасшифровкиВТаблицуРасшифровкиФормы(ТаблицаРасшифровки, ИмяГруппы, "ФилиалНазв", СтрокаРезультат.СтруктурнаяЕдиница, НомерСтроки -1);
					//Элемент["ФилиалНазв" + Строка(НомерСтроки-1) + "_Расшифровка"] = СтрокаРезультат.СтруктурнаяЕдиница;
					Элемент["ФилиалНазв" + "_Расшифровка"] = СтрокаРезультат.СтруктурнаяЕдиница;
					
					
					Для Н = 1 По 3 Цикл
						Элемент["ЧисленностьРаботников_" + Н] = СтрокаРезультат["ЧисленностьРаботников_" + Н];
						Элемент["ЧисленностьИностранцев_" + Н] = СтрокаРезультат["ЧисленностьИностранцев_" + Н];
					КонецЦикла;

				ИначеЕсли ИмяГруппы = "Страница2" Тогда
					Для Н = 1 По 4 Цикл
						Элемент["Ф200_03_004_" + Н] = СтрокаРезультат["Ф200_03_004_" + Н];						
						Элемент["Ф200_03_005_" + Н] = СтрокаРезультат["Ф200_03_005_" + Н];	
						Элемент["Ф200_03_006_" + Н] = СтрокаРезультат["Ф200_03_006_" + Н];						
						Элемент["Ф200_03_007_" + Н] = СтрокаРезультат["Ф200_03_007_" + Н];
						Элемент["Ф200_03_008_" + Н] = СтрокаРезультат["Ф200_03_008_" + Н];
						Элемент["Ф200_03_009_" + Н] = СтрокаРезультат["Ф200_03_009_" + Н];	
					КонецЦикла;						    				
					
				КонецЕсли;
				НомерСтроки = НомерСтроки + 1;	           			 
			КонецЦикла; 
		КонецЦикла;	 
		
		РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы, мМногострочнаяСтруктура);
		РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, ТекИмяФормы, Перезаполнить);	 
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекИмяФормы);
		
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтаФорма);
		
	КонецЕсли;          			
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, "Форма200", "КоличествоПриложений200_03", СтруктураРеквизитовФормы.КоличествоСтруктурныхЕдиницБезНалогоплательщика, Ложь);
	
КонецПроцедуры // Форма200_03ЗаполнитьАвтоНаСервере()

&НаСервере
Процедура Форма200_03РасчетНаСервере(Инд, Показатель, ТекФорма)
	
	Перем СтруктураГруппы;
	
	Индекс = Инд-1;
	
	мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, ТекФорма);
	
	//рассчитаем вычисляемые ячейки
	
	// на первой странице

	мМногострочнаяСтруктура.Свойство("Страница1" ,СтруктураГруппы);
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
	СтрокаТаблицы = ТаблицаСтрокГруппы.Получить(Индекс);
	
	Для Н = 1 По 3 Цикл

		Значение1Мес = ?(СтрокаТаблицы["Ф200_03_00" + Н + "_1"] = Неопределено, 0, СтрокаТаблицы["Ф200_03_00" + Н + "_1"]);
		Значение2Мес = ?(СтрокаТаблицы["Ф200_03_00" + Н + "_2"] = Неопределено, 0, СтрокаТаблицы["Ф200_03_00" + Н + "_2"]);
		Значение3Мес = ?(СтрокаТаблицы["Ф200_03_00" + Н + "_3"] = Неопределено, 0, СтрокаТаблицы["Ф200_03_00" + Н + "_3"]);
				
		СтрокаТаблицы["Ф200_03_00" + Н + "_4"] = Значение1Мес + Значение2Мес + Значение3Мес;
		

		Форма200_03ПолеТабличногоДокументаСтраница1.Области["Ф200_03_00" + Н + "_4__"+ Строка(Инд)].Значение = Значение1Мес + Значение2Мес + Значение3Мес;
		

	КонецЦикла;

	// на второй странице

	мМногострочнаяСтруктура.Свойство("Страница2" ,СтруктураГруппы);
	ТаблицаСтрокГруппы = СтруктураГруппы.Строки;
	СтрокаТаблицы = ТаблицаСтрокГруппы.Получить(Индекс);
	
	Для Н = 4 По 9 Цикл

		Значение1Мес = ?(СтрокаТаблицы["Ф200_03_00" + Н + "_1"] = Неопределено, 0, СтрокаТаблицы["Ф200_03_00" + Н + "_1"]);
		Значение2Мес = ?(СтрокаТаблицы["Ф200_03_00" + Н + "_2"] = Неопределено, 0, СтрокаТаблицы["Ф200_03_00" + Н + "_2"]);
		Значение3Мес = ?(СтрокаТаблицы["Ф200_03_00" + Н + "_3"] = Неопределено, 0, СтрокаТаблицы["Ф200_03_00" + Н + "_3"]);
		
			
		СтрокаТаблицы["Ф200_03_00" + Н + "_4"] = Значение1Мес + Значение2Мес + Значение3Мес;
		

		Форма200_03ПолеТабличногоДокументаСтраница2.Области["Ф200_03_00" + Н + "_4__"+ Строка(Инд)].Значение = Значение1Мес + Значение2Мес + Значение3Мес;
	КонецЦикла;
		
	РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекФорма, мМногострочнаяСтруктура);
	
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура Форма200_05ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СсылкаРасшифровки = ВыбранноеЗначение;
	
	ОбластьРасшифровки = ЭтаФорма.ТекущийЭлемент.ТекущаяОбласть;	
	НомерСтроки = Сред(ОбластьРасшифровки.Имя, Найти(ОбластьРасшифровки.Имя, "__") + 2);
    
    Если ВРег(ИсточникВыбора.ИмяФормы) = ?(СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0, ВРег("ВнешнийОтчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора"), 
        ВРег("Отчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора")) Тогда
        Если ВРег(ИсточникВыбора.ИмяСекции) = ВРег("СтатусыФизическихЛиц2021") Тогда 
            Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
                ОбластьРасшифровки.Значение = ВыбранноеЗначение;	
            Иначе
                ОбластьРасшифровки.Значение = ВыбранноеЗначение.КодСтроки;
            КонецЕсли;
            ИмяСтраницы = "Страница" + Прав(ЭтаФорма.ТекущийЭлемент.Имя,1);			
            ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ОбластьРасшифровки.Имя,ОбластьРасшифровки.Значение);						
            
        ИначеЕсли ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КатегорииФизическихЛиц2021") Тогда 			
            Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
                ОбластьРасшифровки.Значение = ВыбранноеЗначение;	
            Иначе
                ОбластьРасшифровки.Значение = ВыбранноеЗначение.КодСтроки;
            КонецЕсли;
            ИмяСтраницы = "Страница" + Прав(ЭтаФорма.ТекущийЭлемент.Имя,1);			
            ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ОбластьРасшифровки.Имя,ОбластьРасшифровки.Значение);	
            
        ИначеЕсли ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КодыСтандартныхВычетов2021")  
            ИЛИ ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КодыПрочихВычетов2021")
            ИЛИ ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КодыВидовДоходовНеПодлежащихНалогообложению200_05") Тогда 			
            Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
                ОбластьРасшифровки.Значение = ВыбранноеЗначение;	
            Иначе
                ОбластьРасшифровки.Значение = ВыбранноеЗначение.КодСтроки;
            КонецЕсли;
            ИмяСтраницы = "Страница" + Прав(ЭтаФорма.ТекущийЭлемент.Имя,1);			
            ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ОбластьРасшифровки.Имя,ОбластьРасшифровки.Значение);	
        КонецЕсли;
    КонецЕсли;
    	
КонецПроцедуры

&НаСервере
Процедура Форма200_03ПолеТабличногоДокументаВыборНаСервере(Ячейка, НачЗначение, Расчет, Страница)

	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, Страница, Ячейка, НачЗначение, Расчет);
		
КонецПроцедуры

&НаКлиенте
Процедура Форма200_03Расшифровка(ИмяЯчейки)

	// определим, по какой структурной единице заполнено приложение
	ОбластиДокумента = Форма200_03ПолеТабличногоДокументаСтраница1.Области;
	ИскомаяОбласть = Неопределено;
	Ячейка = "";
	НомерСтроки = 0;
	Для Каждого ТекОбласть Из ОбластиДокумента Цикл
		Если Найти(ТекОбласть.Имя, "ФилиалНазв") <> 0 Тогда
			ИскомаяОбласть = ТекОбласть;
			Ячейка = Лев(ТекОбласть.Имя, 10); // СтрДлина("ФилиалНазв") = 10
			НомерСтроки = Сред(ТекОбласть.Имя, Найти(ТекОбласть.Имя, "__") + 2);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПоФизЛицу = Новый Структура;
	Если ПолучитьЗначениеРеквизита(Налогоплательщик, "ЮрФизЛицо") = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		СтруктураПоФизЛицу.Вставить("ФизЛицо", ПолучитьЗначениеРеквизита(Налогоплательщик, "ИндивидуальныйПредприниматель"));
		СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.НеРавно);									
	КонецЕсли;
	
	Если ИскомаяОбласть = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктурнаяЕдиница = ПолучитьСтруктурнуюЕдиницуИЗПоляРасшифровки(Ячейка, НомерСтроки);

	// определим даты расшифровки
	
	ДатаНачала    = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ДатаОкончания = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
		             
	Если Лев(ИмяЯчейки,13) = "Ф200_03_001_1" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_002_1" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_003_1" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_004_1" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_005_1"
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_006_1"
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_007_1"
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_008_1"
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_009_1" Тогда // месяц 1
		ДатаНачала = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
		ДатаОкончания = КонецМесяца(ДатаНачала);
	ИначеЕсли Лев(ИмяЯчейки,13) = "Ф200_03_001_2" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_002_2" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_003_2" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_004_2" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_005_2"
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_006_2" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_007_2"	 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_008_2"
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_009_2" Тогда // месяц 2
		ДатаНачала = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,1);
		ДатаОкончания = КонецМесяца(ДатаНачала);
	ИначеЕсли Лев(ИмяЯчейки,13) = "Ф200_03_001_3" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_002_3" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_003_3" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_004_3" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_005_3"
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_006_3"  
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_007_3"
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_008_3"
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_009_3" Тогда // месяц 3
		ДатаНачала = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,2);
		ДатаОкончания = КонецМесяца(ДатаНачала);
	ИначеЕсли Лев(ИмяЯчейки,13) = "Ф200_03_001_4" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_002_4" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_003_4" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_004_4" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_005_4" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_006_4"
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_007_4"
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_008_4" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_009_4" Тогда // весь период
		ДатаНачала = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
		ДатаОкончания = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	ИначеЕсли Лев(ИмяЯчейки,13) = "Ф200_03_001_5" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_002_5" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_003_5" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_004_5" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_005_5"
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_006_5"
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_007_5"
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_008_5" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_009_5" Тогда // с начала года
		ДатаНачала = НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ДатаОкончания = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	КонецЕсли; 
	
	ЯчейкаСОтбором = Лев(ИмяЯчейки,13) = "Ф200_03_009_1" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_009_2" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_009_3" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_009_4" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_009_5"; 
	 
	ЯчейкаЕП = Лев(ИмяЯчейки,13) = "Ф200_03_009_1" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_009_2" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_009_3" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_009_4" 
	 ИЛИ Лев(ИмяЯчейки,13) = "Ф200_03_009_5";
	
	ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(ДатаНачала, ДатаОкончания, СтруктурнаяЕдиница, СтруктураПоФизЛицу,,,,,,ЯчейкаСОтбором,ЯчейкаЕП);
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктурнуюЕдиницуИЗПоляРасшифровки(Ячейка, НомерСтроки)

	Форма200_03 = мСтруктураМногострочныхРазделов.ПолучитьЭлементы();
	
	СтраницыФормы200_03 = Форма200_03[1].ПолучитьЭлементы();
	
	ТаблицаПоиска = Неопределено;
	Для Каждого Страница Из СтраницыФормы200_03 Цикл
		Если Страница.ИмяГруппы = ("Страница1") Тогда
			ТаблицаПоиска = ЭтаФорма[Страница.ИмяРеквизитаТаблицыСтрокГруппы];
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаПоиска <> Неопределено Тогда
		НайденнаяСтрока = ТаблицаПоиска[НомерСтроки - 1];
		СтруктурнаяЕдиница = НайденнаяСтрока[Ячейка + "_Расшифровка"];
	Иначе	
		СтруктурнаяЕдиница = Неопределено;
	КонецЕсли;	
	
	Возврат СтруктурнаяЕдиница;

КонецФункции // ПолучитьСтруктурнуюЕдиницуИЗТаблицыРасшифровки()

&НаКлиенте
Процедура ПослеВыбораЭлемента(ВыбЭлемент, ПараметрыВыбора) Экспорт
	
	Если НЕ ВыбЭлемент = Неопределено Тогда
		ВыбранноеЗначение = ВыбЭлемент.Значение;
		ПараметрыФормы = Новый Структура;
		
		Если ВыбЭлемент.Значение = "Справочник.ПодразделенияОрганизаций.Форма.ФормаВыбора" Тогда
			ЗначенияОтборов = Новый Структура;			
			ЗначенияОтборов.Вставить("Владелец", Налогоплательщик);			
			ПараметрыФормы.Вставить("Отбор", ЗначенияОтборов);
			ПараметрыФормы.Вставить("ВыбиратьПодразделенияОрганизации", Истина);
		КонецЕсли;
		
		Если КодФормы = "Форма200_03" Тогда
			ОткрытьФорму(ВыбранноеЗначение,ПараметрыФормы,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца) ;
		Иначе	
			ОписаниеОповещения = Новый ОписаниеОповещения("Форма200ОбработкаВыбораЭлемента", ЭтотОбъект, ПараметрыВыбора);
			ОткрытьФорму(ВыбранноеЗначение,ПараметрыФормы,ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца) ;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Форма200_03ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	ОбластьРасшифровки = ЭтаФорма.ТекущийЭлемент.ТекущаяОбласть;	
	СсылкаРасшифровки = ЗначениеВыбора;          
	
	НомерСтроки = Сред(ОбластьРасшифровки.Имя, Найти(ОбластьРасшифровки.Имя, "__") + 2);
	Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.Организации") ИЛИ 
		ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		 ИмяГруппы = "Страница1";                                                    
	 	 Ячейка  = "ФилиалНазв";
	Иначе
		 Возврат;                                                      
	КонецЕсли;	 
	
	Форма200_03ОбработкаПодбора(СсылкаРасшифровки, Ячейка, ИмяГруппы, НомерСтроки);
	 
КонецПроцедуры // Форма200_03ОбработкаВыбора()

&НаСервере
Процедура Форма200_03ОбработкаПодбора(Расшифровка, ИмяЯчейки, ИмяГруппы, НомерСтроки) Экспорт   
	 
	Если ИмяЯчейки = "ФилиалНазв" Тогда
	  	 	 
		ОбластьБИН = "ИИН_БИНФилиала__" + НомерСтроки;
		ОбластьФилиалНазв = "ФилиалНазв__" + НомерСтроки;
		ОбластьФилиалНазв1 = "ФилиалНазв1__" + НомерСтроки;
		ОбластьФилиалНазв2 = "ФилиалНазв2__" + НомерСтроки;
		 
		БИНФилиала = "";
		ФилиалНазв = "";
		Если ТипЗнч(Расшифровка) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			Если СтруктураРеквизитовФормы.мЕстьРеквизитыСП И НЕ Расшифровка.УказыватьРеквизитыГоловнойОрганизации Тогда						
				БИНФилиала = Расшифровка.ИдентификационныйНомер;
				ФилиалНазв = Расшифровка.НаименованиеПолное;
			Иначе			
				БИНФилиала = Расшифровка.Владелец.ИдентификационныйНомер;
				ФилиалНазв = Расшифровка.Наименование;
			КонецЕсли;
		Иначе			
			БИНФилиала = Расшифровка.ИдентификационныйНомер;
			ФилиалНазв = СокрЛП(Расшифровка.НаименованиеПолное);
			Если ПустаяСтрока(ФилиалНазв) Тогда
				ФилиалНазв = Расшифровка.Наименование;
			КонецЕсли;
		КонецЕсли;
		
		НазваниеФилиала = ФилиалНазв;
		ФилиалНазв1 = Сред(НазваниеФилиала, 1, 27);
		ФилиалНазв2 = Сред(НазваниеФилиала, 28, 36);			

		ТекНалоговыйКомитет = ПроцедурыНалоговогоУчета.ПолучитьНалоговыйКомитетСтруктурнойЕдиницы(Расшифровка,
																							Налогоплательщик,
																							ПолныеПраваПовтИсп.ЗаполнитьИсчислениеНалоговСтруктурныхЕдиниц(),
																							Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);

		//заполним области																					
		Форма200_03ПолеТабличногоДокументаСтраница1.Области[ОбластьБИН].Значение = БИНФилиала;
		Форма200_03ПолеТабличногоДокументаСтраница1.Области[ОбластьФилиалНазв].Значение = ФилиалНазв;
		Форма200_03ПолеТабличногоДокументаСтраница1.Области[ОбластьФилиалНазв1].Значение = ФилиалНазв1;
		Форма200_03ПолеТабличногоДокументаСтраница1.Области[ОбластьФилиалНазв2].Значение = ФилиалНазв2;
				
		//заполним расшифровки областей
		Форма200_03ПолеТабличногоДокументаСтраница1.Области[ОбластьБИН].Расшифровка = Расшифровка;
		Форма200_03ПолеТабличногоДокументаСтраница1.Области[ОбластьФилиалНазв].Расшифровка = Расшифровка;
		Форма200_03ПолеТабличногоДокументаСтраница1.Области[ОбластьФилиалНазв1].Расшифровка = Расшифровка;
		Форма200_03ПолеТабличногоДокументаСтраница1.Области[ОбластьФилиалНазв2].Расшифровка = Расшифровка;
		
		//заполним табличные данные
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьБИН, 		БИНФилиала, ,Расшифровка);
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьФилиалНазв, ФилиалНазв,, Расшифровка);
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьФилиалНазв1, ФилиалНазв1,, Расшифровка);
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьФилиалНазв2, ФилиалНазв2,, Расшифровка);
		        		 		 
	КонецЕсли;
	 	 
КонецПроцедуры // Форма200_03ОбработкаПодбора()

////////////////////////////////////////////////////////////////////////////////
// Форма 200.05

&НаСервере
Функция Форма200_05РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
	Запрос =  Новый Запрос;
	Запрос.УстановитьПараметр("парамНалогоплательщик", 		Налогоплательщик);
	Запрос.УстановитьПараметр("парамПериодС", 				НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПериодПо", 				КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПослеПериодПо", 		КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) + 1);
	Запрос.УстановитьПараметр("парамПриход",				ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамРасход",				ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("парамВидСтрокиИсчисление",	Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежаНалог",		Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	Запрос.УстановитьПараметр("парамНеОблагаетсяЦеликом",	Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом);
	Запрос.УстановитьПараметр("парамФизЛицо",				Перечисления.ЮрФизЛицо.ФизЛицо);
	Запрос.УстановитьПараметр("парамПустаяДата",			'00010101');
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", 	мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан()); 
	
	СписокСтруктурныхЕдиницНалогоплательщик = мСписокСтруктурныхЕдиниц.Скопировать();
	//Если в списке структурных единиц не отмечен налогоплательщик 
	Если СписокСтруктурныхЕдиницНалогоплательщик.НайтиПоЗначению(Налогоплательщик) = Неопределено Тогда
		СписокСтруктурныхЕдиницНалогоплательщик.Добавить(Налогоплательщик);	
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиницНалогоплательшик", СписокСтруктурныхЕдиницНалогоплательщик);
	
	// если налогоплательщик - ИП, то исключим данные самого индивидуального предпринимателя
	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Налогоплательщик.ИндивидуальныйПредприниматель);
	Иначе
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Неопределено);
	КонецЕсли;
	
	// Определим учетную политику по НУ
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации,
	|	УчетнаяПолитикаНУ.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ,
    |	УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН,
    |	УчетнаяПолитикаНУ.УпрощенныйУчетИПНиОПВ,
	|	УчетнаяПолитикаНУ.РежимНалогообложения
	|ИЗ	
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодПо, Организация = &парамНалогоплательщик) КАК УчетнаяПолитикаНУ
	|";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОтражениеПоПериодуРегистрации 				= Выборка.ОтражениеПоПериодуРегистрации;
		ОрганизацияЯвляетсяПлательщикомСН			= Выборка.ОрганизацияЯвляетсяПлательщикомСН;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Выборка.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ;
		УпрощенныйУчетИПНиОПВ						= Выборка.УпрощенныйУчетИПНиОПВ; 
		ОрганизацияПлательщикРозничногоНалога       = (Выборка.РежимНалогообложения = Перечисления.РежимНалогообложения.РозничныйНалог);
	Иначе
		ОтражениеПоПериодуРегистрации 				= Истина;
		ОрганизацияЯвляетсяПлательщикомСН			= Ложь;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Ложь;
		УпрощенныйУчетИПНиОПВ 						= Истина;
		ОрганизацияПлательщикРозничногоНалога       = Ложь;
	КонецЕсли;
	
	// если не используется удельный вес, но используется отражение по периоду действия суммы налогов/взносов/отчислений необходимо отражать по периоду действия
	Запрос.УстановитьПараметр("ОтражатьПоПериодуДействия", УпрощенныйУчетИПНиОПВ И НЕ ОтражениеПоПериодуРегистрации);	
	
	//ЕП
	ОрганизацияЯвляетсяПлательщикомЕП = ?(СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж"), Истина, Ложь);

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	ТекстЗапроса = " 
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК СтруктурнаяЕдиница,
	|	Организации.Ссылка КАК Владелец
	|ПОМЕСТИТЬ ВТ_СтруктурныеПодразделенияЕП
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В (&парамСписокСтруктурныхЕдиниц)
    |
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка,
	|	ПодразделенияОрганизаций.Владелец
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций  
	|ГДЕ
	|	ПодразделенияОрганизаций.Ссылка В (&парамСписокСтруктурныхЕдиниц)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНУ.Организация КАК Организация,
	|	УчетнаяПолитикаНУ.ПорядокОбложенияДоходовРаботников КАК ПорядокОбложенияДоходовРаботников,
	|	ВЫБОР
	|		КОГДА УчетнаяПолитикаНУ.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИНАЧЕ ВТ_СтруктурныеПодразделенияЕП.СтруктурнаяЕдиница
	|	КОНЕЦ КАК ОрганизацияЕП,
	|	ВТ_СтруктурныеПодразделенияЕП.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодПо, Организация В (&парамСписокСтруктурныхЕдиницНалогоплательшик)) КАК УчетнаяПолитикаНУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтруктурныеПодразделенияЕП КАК ВТ_СтруктурныеПодразделенияЕП
	|		ПО (УчетнаяПолитикаНУ.Организация = ВТ_СтруктурныеПодразделенияЕП.Владелец)
	|ИНДЕКСИРОВАТЬ ПО
	|	УчетнаяПолитикаНУ.Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТ_ДатыПериодовГода
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &парамПериодС И &парамПериодПо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	МАКСИМУМ(УчетнаяПолитикаНУ.Период) КАК ПериодСреза,
	|	УчетнаяПолитикаНУ.Организация КАК Организация
	|ПОМЕСТИТЬ УчетнаяПолитикаНУПериоды
	|ИЗ
	|	ВТ_ДатыПериодовГода КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНУ
	|		ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(УчетнаяПолитикаНУ.Период, МЕСЯЦ))
	|ГДЕ
	|	УчетнаяПолитикаНУ.Организация = &парамНалогоплательщик
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	УчетнаяПолитикаНУ.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период,
	|	УчетнаяПолитикаНУ.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНУПериоды.Период КАК Период,
	|	УчетнаяПолитикаНУ.НеПрименятьКорректировкуПрочихНалоговВзносовОтчислений КАК НеПрименятьКорректировкуСН,
	|	УчетнаяПолитикаНУ.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника КАК КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитикаПоМесяцам
	|ИЗ
	|	УчетнаяПолитикаНУПериоды КАК УчетнаяПолитикаНУПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНУ
	|		ПО (УчетнаяПолитикаНУПериоды.ПериодСреза = НАЧАЛОПЕРИОДА(УчетнаяПолитикаНУ.Период, МЕСЯЦ))
	|			И УчетнаяПолитикаНУПериоды.Организация = УчетнаяПолитикаНУ.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|ПОМЕСТИТЬ РасчетныеПоказателиПериоды
	|ИЗ
	|	ВТ_ДатыПериодовГода КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(РасчетныеПоказатели.Период, МЕСЯЦ))
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетныеПоказателиПериоды.Период КАК Период,
	|	РасчетныеПоказатели.РазмерМРП КАК РазмерМРП
	|ПОМЕСТИТЬ ВТ_РасчетныеПоказателиПоМесяцам
	|ИЗ
	|	РасчетныеПоказателиПериоды КАК РасчетныеПоказателиПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО (РасчетныеПоказателиПериоды.ПериодСреза = НАЧАЛОПЕРИОДА(РасчетныеПоказатели.Период, МЕСЯЦ))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	ФизическиеЛица.Ссылка КАК ФИО
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	ВТ_ДатыПериодовГода КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ФизическиеЛица.ЭтоГруппа = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	Периоды.ФИО КАК ФИО,
	|	МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСреза
	|ПОМЕСТИТЬ ВТ_ГражданствоФизЛицСрезПоследних
	|ИЗ
	|	ВТ_Периоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|		ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(ГражданствоФизЛиц.Период, МЕСЯЦ))
	|			И Периоды.ФИО = ГражданствоФизЛиц.ФизЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	Периоды.ФИО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодСреза,
	|	ФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГражданствоФизЛицСрезПоследних.Период КАК Период,
	|	ГражданствоФизЛицСрезПоследних.ФИО КАК ФИО
	|ПОМЕСТИТЬ ВТ_ИтогГражданство
	|ИЗ
	|	ВТ_ГражданствоФизЛицСрезПоследних КАК ГражданствоФизЛицСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|		ПО ГражданствоФизЛицСрезПоследних.ПериодСреза = ГражданствоФизЛиц.Период
	|			И ГражданствоФизЛицСрезПоследних.ФИО = ГражданствоФизЛиц.ФизЛицо
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ГражданствоФизЛиц.Страна ЕСТЬ NULL
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	|			ИНАЧЕ ГражданствоФизЛиц.Страна
	|		КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Периоды.Период,
	|	Контрагенты.Ссылка
	|ИЗ
	|	ВТ_ДатыПериодовГода КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Контрагенты.ЭтоГруппа = ЛОЖЬ
	|	И ВЫБОР
	|			КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	|			ИНАЧЕ Контрагенты.СтранаРезидентства
	|		КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтогГражданство.Период КАК Период,
	|	ИтогГражданство.ФИО КАК ФИО
	|ПОМЕСТИТЬ ВТ_Гражданство
	|ИЗ
	|	ВТ_ИтогГражданство КАК ИтогГражданство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ФИО";
		
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить(); 	
		
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ИПНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ИПНСведенияОДоходах.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	0 КАК ДополнительныйРазрез,
	|	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) КАК НачисленныеДоходы,
	|	СУММА(ВЫБОР
	|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НеПодлежащиеНалогообложению,
	|	СУММА(0) КАК НалоговыеВычеты,
	|	СУММА(0) КАК ИПНИсчисленный,
	|	СУММА(0) КАК ОПВ,
	|	СУММА(0) КАК ВОСМС,
	|	СУММА(0) КАК ПрочиеНалоговыеВычеты,
	|	СУММА(ВЫБОР
	|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА ИПНСведенияОДоходах.ОблагаемаяБазаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОблагаемыйДоходИПН,
	|	СУММА(0) КАК ВыплаченоДоходов,
	|	СУММА(0) КАК ИПНПодлежащийУплате,
	|	СУММА(0) КАК СоциальныйНалог,
	|	СУММА(0) КАК СоциальныеОтчисления,
	|	СУММА(0) КАК ОППВ,
	|	СУММА(0) КАК ООСМС,
   	|	ВЫБОР 
	|		КОГДА ИПНСведенияОДоходах.СпособНалогообложения = &парамНеОблагаетсяЦеликом 
	|			И ИПНСведенияОДоходах.СуммаДоходаОборот <> 0
    |           И КодыСтрокДекларации.ВидРасчета = НЕОПРЕДЕЛЕНО
    |           ТОГДА ИПНСведенияОДоходах.ВидРасчета
    |       ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка)
    |   КОНЕЦ КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |   СУММА(0) КАК ЗадолженностьПоДоходам,
    |   СУММА(0) КАК ВыплатыОблагаемыеСН,
    |	ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ИПНСведенияОДоходах.ВидРасчета) КАК КодСтроки,
    |   СУММА(0) КАК СНИсчисленный,
	|	СУММА(0) КАК ОПВР
	|ПОМЕСТИТЬ вт_Данные
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|				И ВЫБОР
	|					КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						ТОГДА НЕ ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И ФизЛицо <> &парамИндивидуальныйПредприниматель
	|				) КАК ИПНСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство
	|		ПО (НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) = ВТ_Гражданство.Период)
	|			И (ВЫБОР
	|				КОГДА ИПНСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ИПНСведенияОДоходах.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|					ТОГДА ИПНСведенияОДоходах.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|				ИНАЧЕ ИПНСведенияОДоходах.ФизЛицо = ВТ_Гражданство.ФИО
	|			КОНЕЦ)
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоСН.СрезПоследних(&парамПериодПо, ) КАК КодыСтрокДекларации
    |		ПО ИПНСведенияОДоходах.ВидРасчета = КодыСтрокДекларации.ВидРасчета  
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|		ПО (ВЫБОР
	|			КОГДА ИПНСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|				ТОГДА ИПНСведенияОДоходах.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ОрганизацияЕП
	|			ИНАЧЕ 
	|				ИПНСведенияОДоходах.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ),
	|	ИПНСведенияОДоходах.СтруктурнаяЕдиница,
	|	ИПНСведенияОДоходах.ФизЛицо,
    |  	ВЫБОР 
	|		КОГДА ИПНСведенияОДоходах.СпособНалогообложения = &парамНеОблагаетсяЦеликом 
	|			И ИПНСведенияОДоходах.СуммаДоходаОборот <> 0
    |           И КодыСтрокДекларации.ВидРасчета = НЕОПРЕДЕЛЕНО
    |           ТОГДА ИПНСведенияОДоходах.ВидРасчета
    |       ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка)
    |   КОНЕЦ,
	|	ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ИПНСведенияОДоходах.ВидРасчета)
	|
   	|ОБЪЕДИНИТЬ ВСЕ
   	|// доходы, облагаемые и необлагаемые СН
	|ВЫБРАТЬ
	|	СНСведенияОДоходах.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ),
	|	СНСведенияОДоходах.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |   СУММА(0) КАК ЗадолженностьПоДоходам,
   	|	СУММА(ВЫБОР
	|		КОГДА СНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|			ТОГДА СНСведенияОДоходах.ОблагаемаяБазаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК ВыплатыОблагаемыеСН,
    |	"""" КАК КодСтроки,
    |   СУММА(0) КАК СНИсчисленный,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.СНСведенияОДоходах.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|				И ФизЛицо <> &парамИндивидуальныйПредприниматель
	|				) КАК СНСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                    
	|			ПО (НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ) = ВТ_Гражданство.Период)        
	|			И (СНСведенияОДоходах.ФизЛицо = ВТ_Гражданство.ФИО)  
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|		ПО (ВЫБОР
	|			КОГДА СНСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|				ТОГДА СНСведенияОДоходах.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ОрганизацияЕП
	|			ИНАЧЕ 
	|				СНСведенияОДоходах.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница
	|			КОНЕЦ)
   	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ),
	|	СНСведенияОДоходах.СтруктурнаяЕдиница,
	|	СНСведенияОДоходах.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ),
	|	СведенияОбИсчисленииВычетовИПНОбороты.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
    |   СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |   СУММА(0) КАК ЗадолженностьПоДоходам,
    |   СУММА(0) КАК ВыплатыОблагаемыеСН,
    |	"""" КАК КодСтроки,
    |   СУММА(0) КАК СНИсчисленный,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			Месяц,
	|			Налогоплательщик = &парамНалогоплательщик
	|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|				И (ВидВычета = ЗНАЧЕНИЕ(Справочник.ВычетыИПН.Стандартный1МЗП)
	|					ИЛИ ВидВычета = ЗНАЧЕНИЕ(Справочник.ВычетыИПН.Стандартный75МЗПИнвалиды)
	|					ИЛИ ВидВычета = ЗНАЧЕНИЕ(Справочник.ВычетыИПН.Стандартный75МЗПРодители))
	|				И ВЫБОР
	|					КОГДА ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
	|						ТОГДА НЕ ФизическоеЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				) КАК СведенияОбИсчисленииВычетовИПНОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство
	|		ПО (НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.ПериодРегистрации, МЕСЯЦ) = ВТ_Гражданство.Период)
	|			И (ВЫБОР
	|				КОГДА СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
	|						И СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|					ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|				ИНАЧЕ СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо = ВТ_Гражданство.ФИО
	|			КОНЕЦ)  
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|		ПО (ВЫБОР
	|			КОГДА СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо ССЫЛКА Справочник.ФизическиеЛица
	|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ОрганизацияЕП
	|			ИНАЧЕ 
	|				СведенияОбИсчисленииВычетовИПНОбороты.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ),
	|	СведенияОбИсчисленииВычетовИПНОбороты.СтруктурнаяЕдиница,
	|	СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо,
    |   СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета
    |
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИПНРасчетыСБюджетом.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ),
	|	ИПНРасчетыСБюджетом.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(ИПНРасчетыСБюджетом.Налог),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |   СУММА(0) КАК ЗадолженностьПоДоходам,
    |   СУММА(0) КАК ВыплатыОблагаемыеСН,
    |	"""" КАК КодСтроки,
    |   СУММА(0) КАК СНИсчисленный,
	|	СУММА(0) КАК ОПВР
    |ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство
	|		ПО (НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)
	|			И (ВЫБОР
	|				КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|					ТОГДА ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|				ИНАЧЕ ИПНРасчетыСБюджетом.ФизЛицо = ВТ_Гражданство.ФИО
	|			КОНЕЦ)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|		ПО (ВЫБОР
	|			КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|				ТОГДА ИПНРасчетыСБюджетом.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ОрганизацияЕП
	|			ИНАЧЕ 
	|				ИПНРасчетыСБюджетом.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница
	|			КОНЕЦ)
	|ГДЕ
	|	ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик
	|	И ИПНРасчетыСБюджетом.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	|	И ИПНРасчетыСБюджетом.Период МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ВЫБОР
	|			КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|				ТОГДА НЕ ИПНРасчетыСБюджетом.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ИПНРасчетыСБюджетом.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ИПНРасчетыСБюджетом.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ),
	|	ИПНРасчетыСБюджетом.СтруктурнаяЕдиница,
	|	ИПНРасчетыСБюджетом.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОПВРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.Период, МЕСЯЦ),
	|	ОПВРасчетыСФондами.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(ОПВРасчетыСФондами.Взнос),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |   СУММА(0) КАК ЗадолженностьПоДоходам,
    |   СУММА(0) КАК ВыплатыОблагаемыеСН,
    |	"""" КАК КодСтроки,
    |   СУММА(0) КАК СНИсчисленный,
	|	СУММА(0) КАК ОПВР
    |ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство
	|		ПО (НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)
	|			И (ВЫБОР
	|				КОГДА ОПВРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ОПВРасчетыСФондами.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|					ТОГДА ОПВРасчетыСФондами.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|				ИНАЧЕ ОПВРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО
	|			КОНЕЦ)   
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|		ПО (ВЫБОР
	|			КОГДА ОПВРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|				ТОГДА ОПВРасчетыСФондами.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ОрганизацияЕП
	|			ИНАЧЕ 
	|				ОПВРасчетыСФондами.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница
	|			КОНЕЦ)
    |
	|ГДЕ
	|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВРасчетыСФондами.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	|	И ОПВРасчетыСФондами.Период МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ВЫБОР
	|			КОГДА ОПВРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|				ТОГДА НЕ ОПВРасчетыСФондами.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ОПВРасчетыСФондами.ВидПлатежа = &парамВидПлатежаНалог
	|	И ОПВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель 
	|	И ОПВРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.Период, МЕСЯЦ),
	|	ОПВРасчетыСФондами.СтруктурнаяЕдиница,
	|	ОПВРасчетыСФондами.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВОСМСРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.Период, МЕСЯЦ),
	|	ВОСМСРасчетыСФондами.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(ВОСМСРасчетыСФондами.Взнос),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |   СУММА(0) КАК ЗадолженностьПоДоходам,
    |   СУММА(0) КАК ВыплатыОблагаемыеСН,
    |	"""" КАК КодСтроки,
    |   СУММА(0) КАК СНИсчисленный,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство
	|		ПО (НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)
	|			И (ВЫБОР
	|				КОГДА ВОСМСРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ВОСМСРасчетыСФондами.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|					ТОГДА ВОСМСРасчетыСФондами.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|				ИНАЧЕ ВОСМСРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО
	|			КОНЕЦ) 
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|		ПО (ВЫБОР
	|			КОГДА ВОСМСРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|				ТОГДА ВОСМСРасчетыСФондами.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ОрганизацияЕП
	|			ИНАЧЕ 
	|				ВОСМСРасчетыСФондами.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница
	|			КОНЕЦ)
	|ГДЕ
	|	ВОСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ВОСМСРасчетыСФондами.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	|	И ВОСМСРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ВОСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ВОСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ВЫБОР
	|			КОГДА ВОСМСРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|				ТОГДА НЕ ВОСМСРасчетыСФондами.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВОСМСРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ВОСМСРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.Период, МЕСЯЦ),
	|	ВОСМСРасчетыСФондами.СтруктурнаяЕдиница,
	|	ВОСМСРасчетыСФондами.ФизЛицо
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
   	|// ОПВ к перечислению
	|ВЫБРАТЬ
	|	ОПВПодлежитПеречислениюВФонды.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|					КОГДА &ОтражатьПоПериодуДействия
	|						ТОГДА ОПВПодлежитПеречислениюВФонды.МесяцНалоговогоПериода
	|					ИНАЧЕ ОПВПодлежитПеречислениюВФонды.Период
	|				КОНЕЦ, МЕСЯЦ),
	|	ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	СУММА(ОПВПодлежитПеречислениюВФонды.Взнос) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |   СУММА(0) КАК ЗадолженностьПоДоходам,
    |   СУММА(0) КАК ВыплатыОблагаемыеСН,
    |	"""" КАК КодСтроки,
    |   СУММА(0) КАК СНИсчисленный,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.ОПВПодлежитПеречислениюВФонды КАК ОПВПодлежитПеречислениюВФонды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство
	|		ПО (НАЧАЛОПЕРИОДА(ВЫБОР
	|					КОГДА &ОтражатьПоПериодуДействия
	|						ТОГДА ОПВПодлежитПеречислениюВФонды.МесяцНалоговогоПериода
	|					ИНАЧЕ ОПВПодлежитПеречислениюВФонды.Период
	|				КОНЕЦ, МЕСЯЦ) = ВТ_Гражданство.Период)
	|			И (ВЫБОР
	|					КОГДА ОПВПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ОПВПодлежитПеречислениюВФонды.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ОПВПодлежитПеречислениюВФонды.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ОПВПодлежитПеречислениюВФонды.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ)  
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|		ПО (ВЫБОР
	|			КОГДА ОПВПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|				ТОГДА ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ОрганизацияЕП
	|			ИНАЧЕ 
	|				ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница
	|			КОНЕЦ)
    |
	|ГДЕ
	|	ОПВПодлежитПеречислениюВФонды.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	|	И (ОПВПодлежитПеречислениюВФонды.Период МЕЖДУ &парамПериодС И &парамПериодПо
	|				И НЕ &ОтражатьПоПериодуДействия
	|			ИЛИ ОПВПодлежитПеречислениюВФонды.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|				И &ОтражатьПоПериодуДействия)
	|	И ОПВПодлежитПеречислениюВФонды.ВидДвижения  = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВПодлежитПеречислениюВФонды.ВидСтроки  = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|   И ВЫБОР
	|	    КОГДА ОПВПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|				ТОГДА НЕ ОПВПодлежитПеречислениюВФонды.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|		ИНАЧЕ ИСТИНА
	|	  КОНЕЦ
	|	И ОПВПодлежитПеречислениюВФонды.Активность = ИСТИНА
  	|	И ОПВПодлежитПеречислениюВФонды.ФизЛицо <> &парамИндивидуальныйПредприниматель
  	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|					КОГДА &ОтражатьПоПериодуДействия
	|						ТОГДА ОПВПодлежитПеречислениюВФонды.МесяцНалоговогоПериода
	|					ИНАЧЕ ОПВПодлежитПеречислениюВФонды.Период
	|				КОНЕЦ, МЕСЯЦ),
	|	ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница,
	|	ОПВПодлежитПеречислениюВФонды.ФизЛицо
   	|
    |ОБЪЕДИНИТЬ ВСЕ
	|
	|// ВОСМС к перечислению
	|ВЫБРАТЬ
	|	ВОСМСПодлежитПеречислениюВФонды.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|					КОГДА &ОтражатьПоПериодуДействия
	|						ТОГДА ВОСМСПодлежитПеречислениюВФонды.МесяцНалоговогоПериода
	|					ИНАЧЕ ВОСМСПодлежитПеречислениюВФонды.Период
	|				КОНЕЦ, МЕСЯЦ),
	|	ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
    |   СУММА(0) КАК ОПВПодлежащийПеречислению, 
   	|	СУММА(ВОСМСПодлежитПеречислениюВФонды.Взнос) КАК ВОСМСПодлежащийПеречислению,
    |   СУММА(0) КАК ЗадолженностьПоДоходам,
    |   СУММА(0) КАК ВыплатыОблагаемыеСН,
    |	"""" КАК КодСтроки,
    |   СУММА(0) КАК СНИсчисленный,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.ВОСМСПодлежитПеречислениюВФонды КАК ВОСМСПодлежитПеречислениюВФонды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство
	|		ПО (НАЧАЛОПЕРИОДА(ВЫБОР
	|					КОГДА &ОтражатьПоПериодуДействия
	|						ТОГДА ВОСМСПодлежитПеречислениюВФонды.МесяцНалоговогоПериода
	|					ИНАЧЕ ВОСМСПодлежитПеречислениюВФонды.Период
	|				КОНЕЦ, МЕСЯЦ) = ВТ_Гражданство.Период)
	|			И (ВЫБОР
	|					КОГДА ВОСМСПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ВОСМСПодлежитПеречислениюВФонды.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ВОСМСПодлежитПеречислениюВФонды.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ВОСМСПодлежитПеречислениюВФонды.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ) 
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|	ПО (ВЫБОР
	|			КОГДА ВОСМСПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|				ТОГДА  ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ОрганизацияЕП
	|			ИНАЧЕ 
	|				 ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница
	|			КОНЕЦ)
    |
	|ГДЕ
	|	ВОСМСПодлежитПеречислениюВФонды.Налогоплательщик = &парамНалогоплательщик
	|	И ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	|	И (ВОСМСПодлежитПеречислениюВФонды.Период МЕЖДУ &парамПериодС И &парамПериодПо
	|				И НЕ &ОтражатьПоПериодуДействия
	|			ИЛИ ВОСМСПодлежитПеречислениюВФонды.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|				И &ОтражатьПоПериодуДействия)
	|	И ВОСМСПодлежитПеречислениюВФонды.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ВОСМСПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|   И ВЫБОР
	|		КОГДА ВОСМСПодлежитПеречислениюВФонды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|	        ТОГДА НЕ ВОСМСПодлежитПеречислениюВФонды.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|		ИНАЧЕ ИСТИНА
	|	  КОНЕЦ
	|	И ВОСМСПодлежитПеречислениюВФонды.Активность = ИСТИНА
   	|	И ВОСМСПодлежитПеречислениюВФонды.ФизЛицо <> &парамИндивидуальныйПредприниматель 
   	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|					КОГДА &ОтражатьПоПериодуДействия
	|						ТОГДА ВОСМСПодлежитПеречислениюВФонды.МесяцНалоговогоПериода
	|					ИНАЧЕ ВОСМСПодлежитПеречислениюВФонды.Период
	|				КОНЕЦ, МЕСЯЦ),
	|	ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница,
	|	ВОСМСПодлежитПеречислениюВФонды.ФизЛицо
    |
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ),
	|	СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(СведенияОбИсчисленииВычетовИПН.ПримененныйВычетОборот),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
    |   СведенияОбИсчисленииВычетовИПН.ВидВычета КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |   СУММА(0) КАК ЗадолженностьПоДоходам,
    |   СУММА(0) КАК ВыплатыОблагаемыеСН,
    |	"""" КАК КодСтроки,
    |   СУММА(0) КАК СНИсчисленный,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|				И ФизическоеЛицо <> &парамИндивидуальныйПредприниматель
	|				И (ВидВычета = ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ДобровольныеПенсионныеВзносы)
	|					ИЛИ ВидВычета = ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПогашениеВознагражденияПоЖилищнымЗаймам)
	|					ИЛИ ВидВычета = ЗНАЧЕНИЕ(Справочник.ВычетыИПН.НаОплатуМедицинскихУслуг)
	// суммы вручную созданных вычетов пользователя отнесем в графу прочих вычетов L
	|					ИЛИ НЕ ВидВычета.Предопределенный)
	|				И ВЫБОР
	|					КОГДА ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
	|						ТОГДА НЕ ФизическоеЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК СведенияОбИсчисленииВычетовИПН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство
	|		ПО (НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ) = ВТ_Гражданство.Период)
	|			И (ВЫБОР
	|				КОГДА СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
	|						И СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|					ТОГДА СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|				ИНАЧЕ СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо = ВТ_Гражданство.ФИО
	|			КОНЕЦ)  
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|		ПО (ВЫБОР
	|			КОГДА СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо ССЫЛКА Справочник.ФизическиеЛица
	|				ТОГДА  СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ОрганизацияЕП
	|			ИНАЧЕ 
	|				 СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ),
	|	СведенияОбИсчисленииВычетовИПН.СтруктурнаяЕдиница,
	|	СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо,
    |   СведенияОбИсчисленииВычетовИПН.ВидВычета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВыплаченныеДоходы.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ВыплаченныеДоходы.Период, МЕСЯЦ),
	|	ВыплаченныеДоходы.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(ВыплаченныеДоходы.СуммаДоходаОборот),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |   СУММА(0) КАК ЗадолженностьПоДоходам,
    |   СУММА(0) КАК ВыплатыОблагаемыеСН,
    |	"""" КАК КодСтроки,
    |   СУММА(0) КАК СНИсчисленный,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.ВыплаченныеДоходыРаботникамОрганизацийНУ.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Налогоплательщик = &парамНалогоплательщик
	|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|				И ФизЛицо <> &парамИндивидуальныйПредприниматель
	|				И ВЫБОР
	|					КОГДА ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						ТОГДА НЕ ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК ВыплаченныеДоходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство
	|		ПО (НАЧАЛОПЕРИОДА(ВыплаченныеДоходы.Период, МЕСЯЦ) = ВТ_Гражданство.Период)
	|			И (ВЫБОР
	|				КОГДА ВыплаченныеДоходы.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ВыплаченныеДоходы.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|					ТОГДА ВыплаченныеДоходы.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|				ИНАЧЕ ВыплаченныеДоходы.ФизЛицо = ВТ_Гражданство.ФИО
	|			КОНЕЦ)  
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|		ПО (ВЫБОР
	|			КОГДА ВыплаченныеДоходы.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|				ТОГДА ВыплаченныеДоходы.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ОрганизацияЕП
	|			ИНАЧЕ 
	|				 ВыплаченныеДоходы.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница
	|			КОНЕЦ)
   	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВыплаченныеДоходы.Период, МЕСЯЦ),
	|	ВыплаченныеДоходы.СтруктурнаяЕдиница,
	|	ВыплаченныеДоходы.ФизЛицо
    |
    |// Задолженность по доходам, невыплаченным физлицам, из текущих взаиморасчетов
   	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
    |	ВзаиморасчетыСРаботниками.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов, МЕСЯЦ),
	|	ВзаиморасчетыСРаботниками.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |	СУММА(ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток) КАК ЗадолженностьПоДоходам,
    |   СУММА(0) КАК ВыплатыОблагаемыеСН,
    |	"""" КАК КодСтроки,
    |   СУММА(0) КАК СНИсчисленный,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(
	|			&парамПослеПериодПо,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ВзаиморасчетыСРаботниками 
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
	|		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов, МЕСЯЦ) = ВТ_Гражданство.Период)             
	|				И ВзаиморасчетыСРаботниками.ФизЛицо = ВТ_Гражданство.ФИО    
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|		ПО (ВЫБОР
	|			КОГДА ВзаиморасчетыСРаботниками.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|				ТОГДА ВзаиморасчетыСРаботниками.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ОрганизацияЕП
	|			ИНАЧЕ 
	|				 ВзаиморасчетыСРаботниками.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница
	|			КОНЕЦ)
   	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов, МЕСЯЦ),
	|	ВзаиморасчетыСРаботниками.СтруктурнаяЕдиница,
	|	ВзаиморасчетыСРаботниками.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Задолженность по доходам, невыплаченным физлицам, из депонированных сумм
	|ВЫБРАТЬ
    |	ВзаиморасчетыСДепонентами.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСДепонентами.ПериодВзаиморасчетов, МЕСЯЦ),
	|	ВзаиморасчетыСДепонентами.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |	СУММА(ВзаиморасчетыСДепонентами.СуммаВзаиморасчетовОстаток) КАК ЗадолженностьПоДоходам,
    |   СУММА(0) КАК ВыплатыОблагаемыеСН,
    |	"""" КАК КодСтроки,
    |   СУММА(0) КАК СНИсчисленный,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций.Остатки(
	|			&парамПослеПериодПо,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ВзаиморасчетыСДепонентами 
   	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
	|		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСДепонентами.ПериодВзаиморасчетов, МЕСЯЦ) = ВТ_Гражданство.Период)             
	|				И ВзаиморасчетыСДепонентами.ФизЛицо = ВТ_Гражданство.ФИО  
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|		ПО (ВЫБОР
	|			КОГДА ВзаиморасчетыСДепонентами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|				ТОГДА ВзаиморасчетыСДепонентами.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ОрганизацияЕП
	|			ИНАЧЕ 
	|				 ВзаиморасчетыСДепонентами.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница
	|			КОНЕЦ)
   	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСДепонентами.ПериодВзаиморасчетов, МЕСЯЦ),
	|	ВзаиморасчетыСДепонентами.СтруктурнаяЕдиница,
	|	ВзаиморасчетыСДепонентами.ФизЛицо
    |
    |ОБЪЕДИНИТЬ ВСЕ
	|
	|// Задолженность по доходам, невыплаченным физлицам, из оплаты по актам закупа
	|ВЫБРАТЬ
    |	ВзаиморасчетыСКонтрагентамиФизЛицами.Контрагент КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСКонтрагентамиФизЛицами.ПериодВзаиморасчетов, МЕСЯЦ),
	|	ВзаиморасчетыСКонтрагентамиФизЛицами.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
	|	СУММА(ВзаиморасчетыСКонтрагентамиФизЛицами.СуммаВзаиморасчетовОстаток) КАК ЗадолженностьПоДоходам,
    |   СУММА(0) КАК ВыплатыОблагаемыеСН,
    |	"""" КАК КодСтроки,
    |   СУММА(0) КАК СНИсчисленный,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами.Остатки(
	|			&парамПослеПериодПо,
	|			Налогоплательщик = &парамНалогоплательщик
	|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|			И НЕ Контрагент.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус) КАК ВзаиморасчетыСКонтрагентамиФизЛицами
   	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
	|		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСКонтрагентамиФизЛицами.ПериодВзаиморасчетов, МЕСЯЦ) = ВТ_Гражданство.Период)             
	|				И ВзаиморасчетыСКонтрагентамиФизЛицами.Контрагент.ФизЛицо = ВТ_Гражданство.ФИО
   	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСКонтрагентамиФизЛицами.ПериодВзаиморасчетов, МЕСЯЦ),
	|	ВзаиморасчетыСКонтрагентамиФизЛицами.СтруктурнаяЕдиница,
	|	ВзаиморасчетыСКонтрагентамиФизЛицами.Контрагент
    |
	|";		
	
			
	// Если суммы удержаний по исполнительным листам включаются по фактическому перечислению
	Если Не ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ Тогда

		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// ставим остатки сумм по ИЛ как задолженность по невыплаченным доходам работникам, с которых удержаны ИЛ
        |ВЫБРАТЬ
        |	ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо КАК ФизЛицо,
    	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.ПериодВзаиморасчетов, МЕСЯЦ),
    	|	ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница,
    	|	0,
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
        |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
       	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
        |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
        |	СУММА(ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовОстаток + ВзаиморасчетыСПолучателямиИЛ.СуммаСборовОстаток) КАК ЗадолженностьПоДоходам,
        |   СУММА(0) КАК ВыплатыОблагаемыеСН,
        |	"""" КАК КодСтроки,
        |   СУММА(0) КАК СНИсчисленный,
		|	СУММА(0) КАК ОПВР
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Остатки(
		|				&парамПослеПериодПо,
		|				Налогоплательщик = &парамНалогоплательщик
		|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
        |				И ДокументОснование.ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ВзаиморасчетыСПолучателямиИЛ
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
        |		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.ПериодВзаиморасчетов, МЕСЯЦ) = ВТ_Гражданство.Период)             
        |				И ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо = ВТ_Гражданство.ФИО   
	   	|
        |
        |СГРУППИРОВАТЬ ПО
        |	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.ПериодВзаиморасчетов, МЕСЯЦ),
        |	ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница,
        |	ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо
        |
        |";		
		
	//Иначе
		// удержания по ИЛ уже находятся в регистре накопления ВыплаченныеДоходыРаботникамОрганизацийНУ
	КонецЕсли;
	
	// Необходимо добавить получателей по исполнительным листам
	Если ПризнакАлиментов Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// ставим остатки сумм по ИЛ как задолженность по невыплаченным доходам получателям ИЛ
		|ВЫБРАТЬ
        |	ВзаиморасчетыСПолучателямиИЛ.Получатель КАК ФизЛицо,
  	    |	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.ПериодВзаиморасчетов, МЕСЯЦ),
    	|	ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница,
    	|	1,
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
    	|	СУММА(0),
        |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
       	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
        |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
		|	СУММА(ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовОстаток) КАК ЗадолженностьПоДоходам,
        |   СУММА(0) КАК ВыплатыОблагаемыеСН,
        |	"""" КАК КодСтроки,
        |   СУММА(0) КАК СНИсчисленный,
		|	СУММА(0) КАК ОПВР
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Остатки(
		|				&парамПослеПериодПо,
		|				Налогоплательщик = &парамНалогоплательщик
		|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|			    И Получатель.ЮрФизЛицо = &парамФизЛицо 
		|			    И Получатель.ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ВзаиморасчетыСПолучателямиИЛ
   		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
		|		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.ПериодВзаиморасчетов, МЕСЯЦ) = ВТ_Гражданство.Период)             
		|				И ВзаиморасчетыСПолучателямиИЛ.Получатель.ФизЛицо = ВТ_Гражданство.ФИО 
        |
        |СГРУППИРОВАТЬ ПО
        |	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.ПериодВзаиморасчетов, МЕСЯЦ),
        |	ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница,
        |	ВзаиморасчетыСПолучателямиИЛ.Получатель
        |
		|";		
		
	КонецЕсли;

	
	// Если включаем суммы удержаний по исполнительным листам по фактическому перечислению
	Если Не ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// выплата по исполнительным листам
		|ВЫБРАТЬ
		|	ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.ПериодВзаиморасчетов, МЕСЯЦ),
		|	ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница,
		|	0,
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовРасход + ВзаиморасчетыСПолучателямиИЛ.СуммаСборовРасход),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
        |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
      	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
        |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
        |   СУММА(0) КАК ЗадолженностьПоДоходам,
        |   СУММА(0) КАК ВыплатыОблагаемыеСН,
        |	"""" КАК КодСтроки,
        |   СУММА(0) КАК СНИсчисленный,
		|	СУММА(0) КАК ОПВР
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Обороты(
		|			&парамПериодС,
		|			&парамПериодПо,
		|			МЕСЯЦ,
		|			Налогоплательщик = &парамНалогоплательщик
		|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|			И ДокументОснование.ФизЛицо <> &парамИндивидуальныйПредприниматель ) КАК ВзаиморасчетыСПолучателямиИЛ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
		|		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.ПериодВзаиморасчетов, МЕСЯЦ) = ВТ_Гражданство.Период)             
		|				И ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо = ВТ_Гражданство.ФИО 
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.ПериодВзаиморасчетов, МЕСЯЦ),
		|	ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница,
		|	ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо
		|";
	КонецЕсли;
	
	// Добавим данные по получателям по исполнительным листам
	Если ПризнакАлиментов Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// выплата по исполнительным листам получателям сумм
		|ВЫБРАТЬ
		|	ВзаиморасчетыСПолучателямиИЛ.Получатель,
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.ПериодВзаиморасчетов, МЕСЯЦ),
		|	ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница,
		|	1,
		|	СУММА(ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовПриход) КАК НачисленныеДоходы,
		|	СУММА(ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовПриход) КАК НеПодлежащиеНалогообложению,
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовРасход),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
        |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
        |	СУММА(0) КАК ОПВПодлежащийПеречислению,
        |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
        |   СУММА(0) КАК ЗадолженностьПоДоходам,
        |   СУММА(0) КАК ВыплатыОблагаемыеСН,
        |	""A.341-1-1"" КАК КодСтроки,
        |   СУММА(0) КАК СНИсчисленный,
		|	СУММА(0) КАК ОПВР
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Обороты(
		|			&парамПериодС,
		|			&парамПериодПо,
		|			МЕСЯЦ,
		|			Налогоплательщик = &парамНалогоплательщик
		|			И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
		|			И Получатель.ЮрФизЛицо = &парамФизЛицо 
		|			И Получатель.ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ВзаиморасчетыСПолучателямиИЛ	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                            
		|		ПО (НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.ПериодВзаиморасчетов, МЕСЯЦ) = ВТ_Гражданство.Период)             
		|				И ВзаиморасчетыСПолучателямиИЛ.Получатель.ФизЛицо = ВТ_Гражданство.ФИО	
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.ПериодВзаиморасчетов, МЕСЯЦ),
		|	ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница,
		|	ВзаиморасчетыСПолучателямиИЛ.Получатель
		|";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИПНРасчетыСБюджетом.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|					КОГДА &ОтражатьПоПериодуДействия
	|						ТОГДА ИПНРасчетыСБюджетом.МесяцНалоговогоПериода
	|					ИНАЧЕ ИПНРасчетыСБюджетом.Период
	|				КОНЕЦ, МЕСЯЦ),
	|	ИПНРасчетыСБюджетом.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(ИПНРасчетыСБюджетом.Налог),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |   СУММА(0) КАК ЗадолженностьПоДоходам,
    |   СУММА(0) КАК ВыплатыОблагаемыеСН,
    |	"""" КАК КодСтроки,
    |   СУММА(0) КАК СНИсчисленный,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                
	|		ПО (НАЧАЛОПЕРИОДА(ВЫБОР
	|					КОГДА &ОтражатьПоПериодуДействия
	|						ТОГДА ИПНРасчетыСБюджетом.МесяцНалоговогоПериода
	|					ИНАЧЕ ИПНРасчетыСБюджетом.Период
	|				КОНЕЦ, МЕСЯЦ) = ВТ_Гражданство.Период)
	|			 И (ВЫБОР
	|					КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						И ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|						ТОГДА ИПНРасчетыСБюджетом.ФизЛицо.ФизЛицо = ВТ_Гражданство.ФИО
	|					ИНАЧЕ ИПНРасчетыСБюджетом.ФизЛицо = ВТ_Гражданство.ФИО
	|			   КОНЕЦ) 
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|		ПО (ВЫБОР
	|			КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|				ТОГДА ИПНРасчетыСБюджетом.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ОрганизацияЕП
	|			ИНАЧЕ 
	|				 ИПНРасчетыСБюджетом.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница
	|			КОНЕЦ)
	|ГДЕ
	|	ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик
	|	И ИПНРасчетыСБюджетом.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	|	И (ИПНРасчетыСБюджетом.Период МЕЖДУ &парамПериодС И &парамПериодПо
	|				И НЕ &ОтражатьПоПериодуДействия
	|			ИЛИ ИПНРасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|				И &ОтражатьПоПериодуДействия)
	|	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Удержание)
	|	И ВЫБОР
	|			КОГДА ИПНРасчетыСБюджетом.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|				ТОГДА НЕ ИПНРасчетыСБюджетом.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ИПНРасчетыСБюджетом.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ИПНРасчетыСБюджетом.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|					КОГДА &ОтражатьПоПериодуДействия
	|						ТОГДА ИПНРасчетыСБюджетом.МесяцНалоговогоПериода
	|					ИНАЧЕ ИПНРасчетыСБюджетом.Период
	|				КОНЕЦ, МЕСЯЦ),
	|	ИПНРасчетыСБюджетом.СтруктурнаяЕдиница,
	|	ИПНРасчетыСБюджетом.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СНИсчисленный.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(СНИсчисленный.Период, МЕСЯЦ),
	|	СНИсчисленный.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(СНИсчисленный.Налог),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |   СУММА(0) КАК ЗадолженностьПоДоходам,
    |   СУММА(0) КАК ВыплатыОблагаемыеСН,
    |	"""" КАК КодСтроки,
   	|	СУММА(ВЫБОР
    |           КОГДА СНИсчисленный.Налогоплательщик.ЮрФизЛицо = &парамФизЛицо 
    |               ТОГДА УчетнаяПолитикаПоМесяцам.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника * РасчетныеПоказателиПоМесяцам.РазмерМРП 
    |           ИНАЧЕ 0 
    |         КОНЕЦ) КАК СНИсчисленный,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.СНИсчисленный КАК СНИсчисленный 
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                        
	|		ПО (НАЧАЛОПЕРИОДА(СНИсчисленный.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)        
	|			И СНИсчисленный.ФизЛицо = ВТ_Гражданство.ФИО  
    |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(СНИсчисленный.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
   	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасчетныеПоказателиПоМесяцам КАК РасчетныеПоказателиПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(СНИсчисленный.Период, МЕСЯЦ) = РасчетныеПоказателиПоМесяцам.Период)	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|		ПО (ВЫБОР
	|			КОГДА СНИсчисленный.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|				ТОГДА СНИсчисленный.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ОрганизацияЕП
	|			ИНАЧЕ 
	|				 СНИсчисленный.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница
	|			КОНЕЦ)
	|ГДЕ
	|	СНИсчисленный.Налогоплательщик = &парамНалогоплательщик
	|	И СНИсчисленный.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И СНИсчисленный.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо 
	|	И СНИсчисленный.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И СНИсчисленный.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СНИсчисленный.Период, МЕСЯЦ),
	|	СНИсчисленный.СтруктурнаяЕдиница,
	|	СНИсчисленный.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СОРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.Период, МЕСЯЦ),
	|	СОРасчетыСФондами.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(СОРасчетыСФондами.Отчисление),
	|	СУММА(0),
	|	СУММА(0),
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |   СУММА(0) КАК ЗадолженностьПоДоходам,
    |   СУММА(0) КАК ВыплатыОблагаемыеСН,
    |	"""" КАК КодСтроки,
    |   СУММА(0) КАК СНИсчисленный,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
	|			И СОРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО    
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|		ПО (ВЫБОР
	|			КОГДА СОРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|				ТОГДА СОРасчетыСФондами.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ОрганизацияЕП
	|			ИНАЧЕ 
	|				 СОРасчетыСФондами.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница
	|			КОНЕЦ)
	|ГДЕ
	|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И СОРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И СОРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
	|	И СОРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление
	|	И СОРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И СОРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.Период, МЕСЯЦ),
	|	СОРасчетыСФондами.СтруктурнаяЕдиница,
	|	СОРасчетыСФондами.ФизЛицо
    |
	|ОБЪЕДИНИТЬ ВСЕ
	|
  	|// расчет социального налога для работников ИП на ОУР
	|ВЫБРАТЬ
	|	СОРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.Период, МЕСЯЦ),
	|	СОРасчетыСФондами.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |   СУММА(0) КАК ЗадолженностьПоДоходам,
    |   СУММА(0) КАК ВыплатыОблагаемыеСН,
    |	"""" КАК КодСтроки,
    |   СУММА(УчетнаяПолитикаПоМесяцам.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника * РасчетныеПоказателиПоМесяцам.РазмерМРП) КАК СНИсчисленный,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
	|			И СОРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО 
    |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоМесяцам КАК УчетнаяПолитикаПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(СОРасчетыСФондами.Период, МЕСЯЦ) = УчетнаяПолитикаПоМесяцам.Период)
   	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасчетныеПоказателиПоМесяцам КАК РасчетныеПоказателиПоМесяцам                                         
	|			ПО (НАЧАЛОПЕРИОДА(СОРасчетыСФондами.Период, МЕСЯЦ) = РасчетныеПоказателиПоМесяцам.Период) 
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|		ПО (ВЫБОР
	|			КОГДА СОРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|				ТОГДА СОРасчетыСФондами.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ОрганизацияЕП
	|			ИНАЧЕ 
	|				 СОРасчетыСФондами.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница
	|			КОНЕЦ)
	|ГДЕ
	|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И СОРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И СОРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И СОРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
	|	И СОРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление
	|	И СОРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
    |   И СОРасчетыСФондами.Отчисление > (УчетнаяПолитикаПоМесяцам.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника * РасчетныеПоказателиПоМесяцам.РазмерМРП)
	|	И СОРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.Период, МЕСЯЦ),
	|	СОРасчетыСФондами.СтруктурнаяЕдиница,
	|	СОРасчетыСФондами.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОППВРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.Период, МЕСЯЦ),
	|	ОППВРасчетыСФондами.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(ОППВРасчетыСФондами.Взнос),
	|	СУММА(0),
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |   СУММА(0) КАК ЗадолженностьПоДоходам,
    |   СУММА(0) КАК ВыплатыОблагаемыеСН,
    |	"""" КАК КодСтроки,
    |   СУММА(0) КАК СНИсчисленный,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
	|			И ОППВРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО  
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|		ПО (ВЫБОР
	|			КОГДА ОППВРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|				ТОГДА ОППВРасчетыСФондами.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ОрганизацияЕП
	|			ИНАЧЕ 
	|				 ОППВРасчетыСФондами.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница
	|			КОНЕЦ)
	|ГДЕ
	|	ОППВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ОППВРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И ОППВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ОППВРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
	|	И ОППВРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление
	|	И ОППВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ОППВРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.Период, МЕСЯЦ),
	|	ОППВРасчетыСФондами.СтруктурнаяЕдиница,
	|	ОППВРасчетыСФондами.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// ОПВР
	|ВЫБРАТЬ
	|	ОПВРРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОПВРРасчетыСФондами.Период, МЕСЯЦ),
	|	ОПВРРасчетыСФондами.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |   СУММА(0) КАК ЗадолженностьПоДоходам,
    |   СУММА(0) КАК ВыплатыОблагаемыеСН,
    |	"""" КАК КодСтроки,
    |   СУММА(0) КАК СНИсчисленный,
	|	СУММА(ОПВРРасчетыСФондами.Взнос) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.ОПВРРасчетыСФондами КАК ОПВРРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(ОПВРРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
	|			И ОПВРРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО  
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|		ПО (ВЫБОР
	|			КОГДА ОПВРРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|				ТОГДА ОПВРРасчетыСФондами.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ОрганизацияЕП
	|			ИНАЧЕ 
	|				 ОПВРРасчетыСФондами.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница
	|			КОНЕЦ)
	|ГДЕ
	|	ОПВРРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВРРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И ОПВРРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ОПВРРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
	|	И ОПВРРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление
	|	И ОПВРРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель
	|	И ОПВРРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ОПВРРасчетыСФондами.Период, МЕСЯЦ),
	|	ОПВРРасчетыСФондами.СтруктурнаяЕдиница,
	|	ОПВРРасчетыСФондами.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// отчисления  ОСМС
	|ВЫБРАТЬ
	|	ООСМСРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.Период, МЕСЯЦ),
	|	ООСМСРасчетыСФондами.СтруктурнаяЕдиница,
	|	0,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(ООСМСРасчетыСФондами.Отчисление) КАК ООСМС,
    |   ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ПустаяСсылка) КАК ВидВычета,
   	|	СУММА(0) КАК ОПВПодлежащийПеречислению,
    |   СУММА(0) КАК ВОСМСПодлежащийПеречислению,
    |   СУММА(0) КАК ЗадолженностьПоДоходам,
    |   СУММА(0) КАК ВыплатыОблагаемыеСН,
    |	"""" КАК КодСтроки,
    |   СУММА(0) КАК СНИсчисленный,
	|	СУММА(0) КАК ОПВР
	|ИЗ
	|	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ВТ_Гражданство                                                   
	|		ПО (НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = ВТ_Гражданство.Период)           
	|			И ООСМСРасчетыСФондами.ФизЛицо = ВТ_Гражданство.ФИО 
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам КАК ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|		ПО (ВЫБОР
	|			КОГДА ООСМСРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|				ТОГДА ООСМСРасчетыСФондами.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.ОрганизацияЕП
	|			ИНАЧЕ 
	|				 ООСМСРасчетыСФондами.СтруктурнаяЕдиница = ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам.СтруктурнаяЕдиница
	|			КОНЕЦ)
	|ГДЕ
	|	ООСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ООСМСРасчетыСФондами.СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)
	|	И ООСМСРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ООСМСРасчетыСФондами.ВидПлатежа 	= &парамВидПлатежаНалог
	|	И ООСМСРасчетыСФондами.ВидСтроки 	= &парамВидСтрокиИсчисление
	|	И ООСМСРасчетыСФондами.Активность
	|	" + ?(ОрганизацияЯвляетсяПлательщикомСН, "", "И ООСМСРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель") + "
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.Период, МЕСЯЦ),
	|	ООСМСРасчетыСФондами.СтруктурнаяЕдиница,
	|	ООСМСРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	СтруктурнаяЕдиница
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиОрганизаций.Сотрудник.Физлицо КАК ФизЛицо,
	|	РаботникиОрганизаций.Период КАК Период,
    |   РаботникиОрганизаций.Сотрудник.ВидЗанятости КАК ВидЗанятости
	|ПОМЕСТИТЬ ВТРаботникиОрганизации
	|ИЗ
	|	вт_Данные КАК вт_Данные
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамПериодС, 
	|			Организация = &парамНалогоплательщик
	|				ИЛИ ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц)) КАК РаботникиОрганизаций
	|		ПО вт_Данные.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизаций.Сотрудник.Физлицо,
	|	РаботникиОрганизаций.Период,
    |   РаботникиОрганизаций.Сотрудник.ВидЗанятости КАК ВидЗанятости
	|ИЗ
	|	вт_Данные КАК вт_Данные
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО вт_Данные.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
	|ГДЕ
	|	РаботникиОрганизаций.Период МЕЖДУ &парамПериодС И &парамПериодПо
	|	И РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|	И (РаботникиОрганизаций.Организация = &парамНалогоплательщик
	|		ИЛИ РаботникиОрганизаций.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц))
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиОрганизацииСостояния.ФизЛицо КАК ФизЛицо,
	|	МАКСИМУМ(РаботникиОрганизацииСостояния.Период) КАК Период
	|ПОМЕСТИТЬ ВТРаботникиОрганизацийПоследнийСотрудник
	|ИЗ
	|	ВТРаботникиОрганизации КАК РаботникиОрганизацииСостояния
    |
    |ГДЕ
   	|	РаботникиОрганизацииСостояния.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)) 
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизацииСостояния.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоследнийСотрудник.ФизЛицо КАК ФизЛицо,
	|	ЕСТЬNULL(РаботникиОрганизаций.ПричинаИзмененияСостояния, ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК ПричинаИзмененияСостояния
	|ПОМЕСТИТЬ ВТСостояниеСотрудника
	|ИЗ
	|	ВТРаботникиОрганизацийПоследнийСотрудник КАК ПоследнийСотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО ПоследнийСотрудник.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
	|			И ПоследнийСотрудник.Период = РаботникиОрганизаций.Период
	|			И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			И (РаботникиОрганизаций.Организация = &парамНалогоплательщик
	|				ИЛИ РаботникиОрганизаций.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц))
    |			И (ВЫРАЗИТЬ(РаботникиОрганизаций.Сотрудник КАК Справочник.СотрудникиОрганизаций).ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)))
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Данные.ФизЛицо КАК ФизЛицо,
    |   вт_Данные.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL ТОГДА вт_Данные.ФизЛицо.Наименование 
	|		ИНАЧЕ ФИОФИзЛиц.Фамилия + ВЫБОР
	|									КОГДА ФИОФизЛиц.Имя <> """" ТОГДА "" "" + ФИОФизЛиц.Имя
	|									ИНАЧЕ """"
	|								  КОНЕЦ + 
	|								  ВЫБОР
	|									КОГДА ФИОФизЛиц.Отчество <> """" ТОГДА "" "" + ФИОФизЛиц.Отчество
	|									ИНАЧЕ """"
	|								  КОНЕЦ 
	|	КОНЕЦ КАК ФИОФизЛица,
	|	вт_Данные.ФизЛицо.ИдентификационныйКодЛичности КАК ИИН,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.НачисленныеДоходы) КАК ЧИСЛО(19, 0)) КАК НачисленныеДоходы,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.НеПодлежащиеНалогообложению) КАК ЧИСЛО(19, 0)) КАК НеПодлежащиеНалогообложению,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.НалоговыеВычеты) КАК ЧИСЛО(19, 0)) КАК НалоговыеВычеты,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.ИПНИсчисленный) КАК ЧИСЛО(19, 0)) КАК ИПНИсчисленный,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.ОПВ) КАК ЧИСЛО(19, 0)) КАК ОПВ,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.ВОСМС) КАК ЧИСЛО(19, 0)) КАК ВОСМС,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.ПрочиеНалоговыеВычеты) КАК ЧИСЛО(19, 0)) КАК ПрочиеНалоговыеВычеты,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.ОблагаемыйДоходИПН) КАК ЧИСЛО(19, 0)) КАК ОблагаемыйДоходИПН,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.ВыплаченоДоходов) КАК ЧИСЛО(19, 0)) КАК ВыплаченоДоходов,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.ИПНПодлежащийУплате) КАК ЧИСЛО(19, 0)) КАК ИПНПодлежащийУплате,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.СоциальныйНалог) КАК ЧИСЛО(19, 0)) КАК СоциальныйНалог,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.СоциальныеОтчисления) КАК ЧИСЛО(19, 0)) КАК СоциальныеОтчисления,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.ОППВ) КАК ЧИСЛО(19, 0)) КАК ОППВ,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.ОПВР) КАК ЧИСЛО(19, 0)) КАК ОПВР,
	|	ВЫРАЗИТЬ (СУММА(вт_Данные.ООСМС) КАК ЧИСЛО(19, 0)) КАК ООСМС,
	|	ВЫБОР
	|		КОГДА вт_Данные.ДополнительныйРазрез = 1
	|			ТОГДА ""11""
	|		КОГДА вт_Данные.ФизЛицо ССЫЛКА Справочник.Контрагенты И (НЕ вт_Данные.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус)
	|			ТОГДА ""2""
	|		КОГДА СостояниеСотрудника.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение) 
	|			ТОГДА ""1""
	|		ИНАЧЕ ""11""
	|	КОНЕЦ КАК Статус,  
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер, Ложь)
	|			ТОГДА ""1""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Категория1,
	|	ВЫБОР
	|		КОГДА СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид) 
	|			ТОГДА ""2""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Категория2,
	|	ВЫБОР
	|		КОГДА СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.РодительИнвалидаСДетства)  
	|			ТОГДА ""4""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Категория4,
	|	ВЫБОР
	|		КОГДА НЕ СведенияОФизлицахУчастникахВОВ.Статус ЕСТЬ NULL
	|			ТОГДА ""3""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Категория3,
	|	ВЫБОР
	|		КОГДА вт_Данные.СтруктурнаяЕдиница <> &парамНалогоплательщик  
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
    |   вт_Данные.ВидВычета КАК ВидВычета,
   	|	ВЫРАЗИТЬ (СУММА(вт_Данные.ОПВПодлежащийПеречислению) КАК ЧИСЛО(19, 0)) КАК ОПВПодлежащийПеречислению,
    |   ВЫРАЗИТЬ (СУММА(вт_Данные.ВОСМСПодлежащийПеречислению) КАК ЧИСЛО(19, 0)) КАК ВОСМСПодлежащийПеречислению,
    |   ВЫРАЗИТЬ (СУММА(вт_Данные.ЗадолженностьПоДоходам) КАК ЧИСЛО(19, 0)) КАК ЗадолженностьПоДоходам,
    |   ВЫРАЗИТЬ (СУММА(вт_Данные.ВыплатыОблагаемыеСН) КАК ЧИСЛО(19, 0)) КАК ВыплатыОблагаемыеСН,
    |   ВЫРАЗИТЬ (СУММА(вт_Данные.СНИсчисленный) КАК ЧИСЛО(19, 0)) КАК СНИсчисленный,
    |	вт_Данные.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ ВТ_ИтоговыеДанные
    |
	|ИЗ
	|	вт_Данные КАК вт_Данные
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамПериодПо) КАК ФИОФизЛиц
	|		ПО (ВЫБОР
    |				КОГДА вт_Данные.ФизЛицо ССЫЛКА Справочник.Контрагенты
    |					И вт_Данные.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |					ТОГДА вт_Данные.ФизЛицо.ФизЛицо = ФИОФизЛиц.ФизЛицо
    |				ИНАЧЕ вт_Данные.ФизЛицо = ФИОФизЛиц.ФизЛицо
    |			  КОНЕЦ)
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТСостояниеСотрудника КАК СостояниеСотрудника                                                  	
	|		ПО (ВЫБОР
    |				КОГДА вт_Данные.ФизЛицо ССЫЛКА Справочник.Контрагенты
    |					И вт_Данные.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |					ТОГДА вт_Данные.ФизЛицо.ФизЛицо = СостояниеСотрудника.Физлицо
    |				ИНАЧЕ вт_Данные.ФизЛицо = СостояниеСотрудника.Физлицо
    |			  КОНЕЦ)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамПериодПо, Пенсионер) КАК СведенияОПенсионномОбеспеченииФизЛиц                                                  	
	|		ПО (ВЫБОР
    |				КОГДА вт_Данные.ФизЛицо ССЫЛКА Справочник.Контрагенты
    |					И вт_Данные.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |					ТОГДА вт_Данные.ФизЛицо.ФизЛицо =  СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
    |				ИНАЧЕ вт_Данные.ФизЛицо = СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
    |			  КОНЕЦ)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&парамПериодПо, ВЫБОР 
	|																									КОГДА СрокДействияСправки <> ДАТАВРЕМЯ(1,1,1) 
	|																										ТОГДА (СрокДействияСправки >=&парамПериодС) 
	|																									ИНАЧЕ ИСТИНА 
	|																								КОНЕЦ) КАК СведенияОбИнвалидностиФизлиц                                                  	
	|		ПО (ВЫБОР
    |				КОГДА вт_Данные.ФизЛицо ССЫЛКА Справочник.Контрагенты
    |					И вт_Данные.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |					ТОГДА вт_Данные.ФизЛицо.ФизЛицо =  СведенияОбИнвалидностиФизлиц.Физлицо
    |				ИНАЧЕ вт_Данные.ФизЛицо = СведенияОбИнвалидностиФизлиц.Физлицо
    |			  КОНЕЦ)	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ.СрезПоследних(&парамПериодПо, 
	|						Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.ЛицоПриравненноеКУчастникамВОВ) 
    |                       ИЛИ Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.ВетераныБоевыхДействийНаТерриторииДругихГосударств)) КАК СведенияОФизлицахУчастникахВОВ                                                  	
	|		ПО (ВЫБОР
    |				КОГДА вт_Данные.ФизЛицо ССЫЛКА Справочник.Контрагенты
    |					И вт_Данные.ФизЛицо.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |					ТОГДА вт_Данные.ФизЛицо.ФизЛицо =  СведенияОФизлицахУчастникахВОВ.Физлицо
    |				ИНАЧЕ вт_Данные.ФизЛицо = СведенияОФизлицахУчастникахВОВ.Физлицо
    |			  КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_Данные.ФизЛицо,
    |   вт_Данные.СтруктурнаяЕдиница,
    |	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL ТОГДА вт_Данные.ФизЛицо.Наименование 
	|		ИНАЧЕ ФИОФИзЛиц.Фамилия + ВЫБОР
	|									КОГДА ФИОФизЛиц.Имя <> """" ТОГДА "" "" + ФИОФизЛиц.Имя
	|									ИНАЧЕ """"
	|								  КОНЕЦ + 
	|								  ВЫБОР
	|									КОГДА ФИОФизЛиц.Отчество <> """" ТОГДА "" "" + ФИОФизЛиц.Отчество
	|									ИНАЧЕ """"
	|								  КОНЕЦ 
	|	КОНЕЦ,
	|	вт_Данные.ФизЛицо.ИдентификационныйКодЛичности,
	|	ВЫБОР
	|		КОГДА вт_Данные.ДополнительныйРазрез = 1
	|			ТОГДА ""11""
	|		КОГДА вт_Данные.ФизЛицо ССЫЛКА Справочник.Контрагенты И (НЕ вт_Данные.ФизЛицо.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус)
	|			ТОГДА ""2""
	|		КОГДА СостояниеСотрудника.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение) 
	|			ТОГДА ""1""
	|		ИНАЧЕ ""11""
	|	КОНЕЦ,  
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер, Ложь)
	|			ТОГДА ""1""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид) 
	|			ТОГДА ""2""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.РодительИнвалидаСДетства)  
	|			ТОГДА ""4""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ СведенияОФизлицахУчастникахВОВ.Статус ЕСТЬ NULL
	|			ТОГДА ""3""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА вт_Данные.СтруктурнаяЕдиница <> &парамНалогоплательщик  
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
    |   вт_Данные.ВидВычета,
    |	вт_Данные.КодСтроки
	|
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ВТ_ИтоговыеДанные.ФизЛицо КАК ФизЛицо,
    |   ВТ_ИтоговыеДанные.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница, 
    |	ВТ_ИтоговыеДанные.ФИОФизЛица КАК ФИОФизЛица,
    |	ВТ_ИтоговыеДанные.ИИН КАК ИИН,
    |	ВТ_ИтоговыеДанные.НачисленныеДоходы КАК НачисленныеДоходы,
    |	ВТ_ИтоговыеДанные.НеПодлежащиеНалогообложению КАК НеПодлежащиеНалогообложению,
    |	ВТ_ИтоговыеДанные.НалоговыеВычеты КАК НалоговыеВычеты,
    |	ВТ_ИтоговыеДанные.ИПНИсчисленный КАК ИПНИсчисленный,
    |	ВТ_ИтоговыеДанные.ОПВ КАК ОПВ,
    |	ВТ_ИтоговыеДанные.ВОСМС КАК ВОСМС,
    |	ВТ_ИтоговыеДанные.ПрочиеНалоговыеВычеты КАК ПрочиеНалоговыеВычеты,
    |	ВТ_ИтоговыеДанные.ОблагаемыйДоходИПН КАК ОблагаемыйДоходИПН,
    |	ВТ_ИтоговыеДанные.ВыплаченоДоходов КАК ВыплаченоДоходов,
    |	ВТ_ИтоговыеДанные.ИПНПодлежащийУплате КАК ИПНПодлежащийУплате,
    |	ВТ_ИтоговыеДанные.СоциальныйНалог КАК СоциальныйНалог,
    |	ВТ_ИтоговыеДанные.СоциальныеОтчисления КАК СоциальныеОтчисления,
    |	ВТ_ИтоговыеДанные.ОППВ КАК ОППВ,
    |	ВТ_ИтоговыеДанные.ОПВР КАК ОПВР,
    |	ВТ_ИтоговыеДанные.ООСМС КАК ООСМС,
    |	ВТ_ИтоговыеДанные.Статус КАК Статус,
    |	ВТ_ИтоговыеДанные.Категория1 КАК Категория1,
    |	ВТ_ИтоговыеДанные.Категория2 КАК Категория2,
    |	ВТ_ИтоговыеДанные.Категория4 КАК Категория4,
    |	ВТ_ИтоговыеДанные.Категория3 КАК Категория3,
    |	ВТ_ИтоговыеДанные.ФизЛицоСтруктурногоПодразделения КАК ФизЛицоСтруктурногоПодразделения,
    |	ВТ_ИтоговыеДанные.ВидВычета КАК ВидВычета,
   	|	ВТ_ИтоговыеДанные.ОПВПодлежащийПеречислению КАК ОПВПодлежащийПеречислению,
    |   ВТ_ИтоговыеДанные.ВОСМСПодлежащийПеречислению КАК ВОСМСПодлежащийПеречислению,
    |   ВТ_ИтоговыеДанные.ЗадолженностьПоДоходам КАК ЗадолженностьПоДоходам,
    |   ВТ_ИтоговыеДанные.ВыплатыОблагаемыеСН КАК ВыплатыОблагаемыеСН,
    |	ВТ_ИтоговыеДанные.КодСтроки КАК КодСтроки,
    |   ВТ_ИтоговыеДанные.СНИсчисленный КАК СНИсчисленный
    |ИЗ
    |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
    |
    |УПОРЯДОЧИТЬ ПО
    |	ВТ_ИтоговыеДанные.ФИОФизЛица,
    |   ВТ_ИтоговыеДанные.ФизЛицоСтруктурногоПодразделения,
    |   ВТ_ИтоговыеДанные.ВидВычета
    |ИТОГИ
    |	СУММА(НачисленныеДоходы),
    |	СУММА(ИПНИсчисленный),
    |	СУММА(ОПВ),
    |	СУММА(ВОСМС),
    |	СУММА(ОблагаемыйДоходИПН),
    |	СУММА(ВыплаченоДоходов),
    |	СУММА(ИПНПодлежащийУплате),
    |	СУММА(СоциальныйНалог),
    |	СУММА(СоциальныеОтчисления),
    |	СУММА(ОППВ),
    |	СУММА(ОПВР),
    |	СУММА(ООСМС),
    |	МАКСИМУМ(Статус),
    |	МАКСИМУМ(Категория1),
    |	МАКСИМУМ(Категория2),
    |	МАКСИМУМ(Категория4),
    |	МАКСИМУМ(Категория3),
   	|	СУММА(ОПВПодлежащийПеречислению),
    |   СУММА(ВОСМСПодлежащийПеречислению),
    |   СУММА(ЗадолженностьПоДоходам),
    |   СУММА(ВыплатыОблагаемыеСН),
    |   СУММА(СНИсчисленный)
    |ПО
    |	ФизЛицо,
    |   ФизЛицоСтруктурногоПодразделения
    |";
		
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() и ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 200.05 за отчетный период отсутствуют...'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // Форма200_05РассчитатьДанныеФормы()

&НаКлиенте
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма200_05ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Состояние("Расчет формы 200.05");		
	
	Форма200_05ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры // Форма200_05ЗаполнитьАвто()

&НаСервере
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма200_05ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма200_05";
	Очистить(ТекИмяФормы, Истина);

	ТекущаяСтраница = 1;
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы",ТекИмяФормы));
	
	Если СтрокаФормы <> Неопределено Тогда
		СтрокаФормы.ВсегоСтраниц = 1;
	КонецЕсли;     		
	
	Если НЕ Перезаполнить Тогда  
		Текст = НСтр("ru = 'Расчет приложения 200.05'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПолучитьПорядокОбложенияДоходовРаботников(Налогоплательщик, КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)); 
    
    ВыборкаФИО = Форма200_05РассчитатьДанныеФормы(Истина).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	

	СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, ТекИмяФормы);
    
	ОписаниеТиповСтрока12 = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12));
	ОписаниеТиповЧисло12  = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 0));
	
	ТаблицаСтандартныхВычетов = Новый ТаблицаЗначений;
	ТаблицаПрочихВычетов = Новый ТаблицаЗначений;
	ТаблицаНеоблагаемыхДоходов = Новый ТаблицаЗначений;
	
	ТаблицаСтандартныхВычетов.Колонки.Добавить("КодСтроки", ОписаниеТиповСтрока12);
	ТаблицаСтандартныхВычетов.Колонки.Добавить("Сумма", ОписаниеТиповЧисло12);
	
	ТаблицаПрочихВычетов.Колонки.Добавить("КодСтроки", ОписаниеТиповСтрока12);
	ТаблицаПрочихВычетов.Колонки.Добавить("Сумма", ОписаниеТиповЧисло12);

	ТаблицаНеоблагаемыхДоходов.Колонки.Добавить("КодСтроки");
	ТаблицаНеоблагаемыхДоходов.Колонки.Добавить("Сумма", ОписаниеТиповЧисло12);

    Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
        НомерСтроки = 2;
        ИмяГруппы = ЭлементСтруктуры.Ключ;
        ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
        ТаблицаСтрокГруппы.Очистить();
        
        КлючевыеПоляСтраница1 = Новый Структура("Ф200_05ФИО, Ф200_05ИИН, Ф200_05Статус, Ф200_05Категория, Ф200_05_F, Ф200_05_G,
                                                |Ф200_05ФИО_Расшифровка, Ф200_05ИИН_Расшифровка, Ф200_05Статус_Расшифровка, Ф200_05Категория_Расшифровка, Ф200_05_F_Расшифровка, Ф200_05_G_Расшифровка");
        
        ВыборкаФИО.Сбросить();
        
        Пока ВыборкаФИО.Следующий() Цикл  
            
            ВыборкаПоСтруктурному = ВыборкаФИО.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
            
            
            Пока ВыборкаПоСтруктурному.Следующий() Цикл
                
                // заполняем данные строки в форме отчета
                Элемент = ТаблицаСтрокГруппы.Добавить();   			 
                
                ТаблицаСтандартныхВычетов.Очистить();
                ТаблицаПрочихВычетов.Очистить();
                ТаблицаНеоблагаемыхДоходов.Очистить();
                
                ПерваяСтрокаСтандартныхВычетовЗаполнена = Ложь;
                ПерваяСтрокаПрочихВычетовЗаполнена = Ложь;
                ПерваяСтрокаНеоблагаемыхДоходовЗаполнена = Ложь;
                
                СуммаФ200_05_J = 0;
                Ф200_05_I = "";
                СуммаФ200_05_N = 0;
                Ф200_05_M = "";
                СуммаФ200_05_P = 0;
                Ф200_05_O = "";
                
                Выборка = ВыборкаПоСтруктурному.Выбрать();

                Пока Выборка.Следующий() Цикл
                    КодСтандартногоВычета   = "";
                    КодПрочегоВычета        = "";
                    КодНеОблагаемогоДохода  = "";
					
                    Если Выборка.КодСтроки <> "" 
                        И Выборка.НеПодлежащиеНалогообложению <> 0 Тогда
						
						Если ТипЗнч(Выборка.КодСтроки) = Тип("Строка") И СтрНайти(Выборка.КодСтроки, "341") <> 0 Тогда
							НачалоСтатьиНК = СтрНайти(Выборка.КодСтроки, "341");
							КодСтроки      = СокрЛП(Сред(Выборка.КодСтроки, НачалоСтатьиНК, 10)); 
						Иначе
							КодСтроки = Выборка.КодСтроки;
						КонецЕсли;
						
                        Если НЕ ПерваяСтрокаНеоблагаемыхДоходовЗаполнена Тогда
                            Если ТипЗнч(КодСтроки) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций")
                                ИЛИ (ТипЗнч(КодСтроки) = Тип("Строка") 
                                И СтрНайти(КодСтроки, "341") = 0) Тогда
                                Если ТипЗнч(КодСтроки) = Тип("Строка") Тогда
                                    Ф200_05_I = Выборка.ВидВычета;                   
                                Иначе
                                    Ф200_05_I = КодСтроки;                   
                                КонецЕсли;
                                СуммаФ200_05_J = Выборка.НеПодлежащиеНалогообложению;
                                ПерваяСтрокаНеоблагаемыхДоходовЗаполнена = Истина;
                            Иначе
                                ПерваяСтрокаНеоблагаемыхДоходовЗаполнена = Истина;
                                Если СтрНайти(КодСтроки, "341") > 0 Тогда
                                    СуммаФ200_05_J = Выборка.НеПодлежащиеНалогообложению;
                                КонецЕсли;
                                Ф200_05_I = КодСтроки; 
                            КонецЕсли; 
                        Иначе
                            Если Выборка.НеПодлежащиеНалогообложению <> 0 Тогда
                                Строка = ТаблицаНеоблагаемыхДоходов.Добавить();
                                Если ТипЗнч(КодСтроки) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций")
                                    ИЛИ (ТипЗнч(КодСтроки) = Тип("Строка") 
                                    И СтрНайти(КодСтроки, "341") = 0) Тогда
                                    Строка.КодСтроки = Выборка.ВидВычета;
                                Иначе
                                    Строка.КодСтроки = КодСтроки;
                                КонецЕсли;
                                Строка.Сумма = Окр(Выборка.НеПодлежащиеНалогообложению);
                            КонецЕсли; 
						КонецЕсли;
					КонецЕсли;
                    Если Выборка.ВидВычета <> ПредопределенноеЗначение("Справочник.ВычетыИПН.ПустаяСсылка")
                        И Выборка.НалоговыеВычеты <> 0 Тогда
                        Если НЕ ПерваяСтрокаСтандартныхВычетовЗаполнена Тогда
                            ПерваяСтрокаСтандартныхВычетовЗаполнена = Истина;
                            СуммаФ200_05_N = Выборка.НалоговыеВычеты;
                            Если Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.Стандартный1МЗП") Тогда
                                Ф200_05_M = "1";
                            ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.Стандартный75МЗПИнвалиды") Тогда
                                Ф200_05_M = "2";
                            ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.Стандартный75МЗПРодители") Тогда
                                Ф200_05_M = "3";
                            КонецЕсли;
                        Иначе
                            Если Выборка.НалоговыеВычеты <> 0 Тогда
                                Строка = ТаблицаСтандартныхВычетов.Добавить();
                                Если Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.Стандартный1МЗП") Тогда
                                    Строка.КодСтроки = "1";
                                ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.Стандартный75МЗПИнвалиды") Тогда
                                    Строка.КодСтроки = "2";
                                ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.Стандартный75МЗПРодители") Тогда
                                    Строка.КодСтроки = "3";
                                КонецЕсли;
                                Строка.Сумма = Выборка.НалоговыеВычеты;
                            КонецЕсли;
                        КонецЕсли;
                    КонецЕсли;
                    Если Выборка.ВидВычета <> ПредопределенноеЗначение("Справочник.ВычетыИПН.ПустаяСсылка") 
                        И Выборка.ПрочиеНалоговыеВычеты <> 0 Тогда
                        Если Выборка.ПрочиеНалоговыеВычеты <> 0 Тогда
                            Если НЕ ПерваяСтрокаПрочихВычетовЗаполнена Тогда
                                ПерваяСтрокаПрочихВычетовЗаполнена = Истина;
                                Если Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.ДобровольныеПенсионныеВзносы") Тогда
                                    Ф200_05_O = "1";
                                ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.НаОплатуМедицинскихУслуг") Тогда
                                    Ф200_05_O = "2";
                                ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.ПогашениеВознагражденияПоЖилищнымЗаймам") Тогда
                                    Ф200_05_O = "3";
                                КонецЕсли;
                                СуммаФ200_05_P = Выборка.ПрочиеНалоговыеВычеты;
                            Иначе
                                Строка = ТаблицаПрочихВычетов.Добавить();
                                Если Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.ДобровольныеПенсионныеВзносы") Тогда
                                    Строка.КодСтроки = "1";
                                ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.НаОплатуМедицинскихУслуг") Тогда
                                    Строка.КодСтроки = "2";
                                ИначеЕсли Выборка.ВидВычета = ПредопределенноеЗначение("Справочник.ВычетыИПН.ПогашениеВознагражденияПоЖилищнымЗаймам") Тогда
                                    Строка.КодСтроки = "3";
                                КонецЕсли;
                                Строка.Сумма = Выборка.ПрочиеНалоговыеВычеты;
                            КонецЕсли;
                        КонецЕсли;
                    КонецЕсли;
                    
                    Если ИмяГруппы = "Страница1" Тогда
                        
                        //Так должны заполнять по отдельности значения выборки 
                        //для каждого листа
                        Элемент.Ф200_05_A1 = Формат(НомерСтроки, мФорматНомераСтроки);
                        Элемент.Ф200_05ФИО = Выборка.ФИОФизЛица;
                        
                        Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.ИИН) Тогда  					
                            СтрокаИИН = Выборка.ИИН;
                        Иначе                                                   
                            СтрокаИИН = "";
                            
                            ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа D ""ИНН"",
                            |т.к. значение содержит символы, отличные от цифр'");
                            
                            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки)));
                            
                        КонецЕсли;
                        
                        Элемент.Ф200_05ИИН = СтрокаИИН;
                        РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф200_05ФИО",        Выборка.ФизЛицо);
                        РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф200_05ИИН",        Выборка.ФизЛицо);
                        
                        Элемент.Ф200_05Статус  = ВыборкаПоСтруктурному.Статус;
                        Категория = Новый СписокЗначений;
                        Если Выборка.Категория1 <> "" Тогда
                            Категория.Добавить(ВыборкаПоСтруктурному.Категория1);
                        КонецЕсли;
                        Если Выборка.Категория2 <> "" Тогда
                            Категория.Добавить(ВыборкаПоСтруктурному.Категория2);
                        КонецЕсли;
                        Если Выборка.Категория3 <> "" Тогда
                            Категория.Добавить(ВыборкаПоСтруктурному.Категория3);
                        КонецЕсли;
                        Если Выборка.Категория4 <> "" Тогда
                            Категория.Добавить(ВыборкаПоСтруктурному.Категория4);
                        КонецЕсли;
                        
                        Элемент.Ф200_05Категория  = Категория;
                        
                        Элемент.Ф200_05_G = ?(ВыборкаПоСтруктурному.ФизЛицоСтруктурногоПодразделения = 1, "Х", "");
                        
                    ИначеЕсли ИмяГруппы = "Страница2" Тогда
                        
                        Элемент.Ф200_05_A2 = Формат(НомерСтроки, мФорматНомераСтроки);
                        Элемент.Ф200_05_H  = ВыборкаПоСтруктурному.НачисленныеДоходы;
                        Если СуммаФ200_05_J <> 0
                            И ТипЗнч(Ф200_05_I) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
                            Элемент.Ф200_05_I = "";
                            ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'При заполнении приложения 200.05 для вида расчета <%1> не задан код строки Декларации!'"),
                            Строка(Ф200_05_I));                    
                            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ф200_05_I);
                        Иначе
                            Элемент.Ф200_05_I  = Ф200_05_I;
                        КонецЕсли;
                        Элемент.Ф200_05_J  = СуммаФ200_05_J;
                        Элемент.Ф200_05_K  = ВыборкаПоСтруктурному.ОПВ;              
                        
                    ИначеЕсли ИмяГруппы = "Страница3" Тогда
                        
                        Элемент.Ф200_05_A3 = Формат(НомерСтроки, мФорматНомераСтроки);
                        Элемент.Ф200_05_L  = ВыборкаПоСтруктурному.ВОСМС;
                        Элемент.Ф200_05_M  = Ф200_05_M; //Виды стандартных вычетов
                        Элемент.Ф200_05_N  = СуммаФ200_05_N; //Стандартные вычеты
                        Элемент.Ф200_05_O  = Ф200_05_O; //Виды прочих вычетов
                        
                    ИначеЕсли ИмяГруппы = "Страница4" Тогда
                        
                        Элемент.Ф200_05_A4 = Формат(НомерСтроки, мФорматНомераСтроки);
                        Элемент.Ф200_05_P  = СуммаФ200_05_P;
                        Элемент.Ф200_05_Q  = ВыборкаПоСтруктурному.ИПНИсчисленный;
                        Элемент.Ф200_05_R  = ВыборкаПоСтруктурному.ЗадолженностьПоДоходам; //Сумма задолженности за отчетный квартал
                        Элемент.Ф200_05_S  = ВыборкаПоСтруктурному.ВыплаченоДоходов;
                        
                    ИначеЕсли ИмяГруппы = "Страница5" Тогда
                        
                        Элемент.Ф200_05_A5 = Формат(НомерСтроки, мФорматНомераСтроки);
                        Элемент.Ф200_05_T  = ВыборкаПоСтруктурному.ИПНПодлежащийУплате;
                        Элемент.Ф200_05_U  = ВыборкаПоСтруктурному.ОПВПодлежащийПеречислению; //ОПВ подлежащие перечислению
                        Элемент.Ф200_05_V  = ВыборкаПоСтруктурному.ВОСМСПодлежащийПеречислению; // ВОСМС подлежащие перечислению
                        Элемент.Ф200_05_W  = 0; // Доходы, не облагаемые СН, в виде выплат за счет средств грантов
                        
                    ИначеЕсли ИмяГруппы = "Страница6" Тогда
                        Элемент.Ф200_05_A6 = Формат(НомерСтроки, мФорматНомераСтроки);
                        Элемент.Ф200_05_X  = ВыборкаПоСтруктурному.ВыплатыОблагаемыеСН; //Доходы, облагаемые СН 
						Если НЕ СтруктураРеквизитовФормы.ОрганизацияПлательщикРозничногоНалога Тогда							
							Элемент.Ф200_05_Y  = ?(Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо, 
                                                    ВыборкаПоСтруктурному.СНИсчисленный, 
                                                    ВыборкаПоСтруктурному.СоциальныйНалог + ВыборкаПоСтруктурному.СоциальныеОтчисления);
						Иначе 									
							Элемент.Ф200_05_Y  = 0;
						КонецЕсли;
					
						Элемент.Ф200_05_Z  = ВыборкаПоСтруктурному.СоциальныеОтчисления; // Сумма отчислений на ГФСС
						Если НЕ СтруктураРеквизитовФормы.ОрганизацияПлательщикРозничногоНалога Тогда
							Элемент.Ф200_05_AA = ВыборкаПоСтруктурному.СоциальныйНалог; // СН, подлежащий уплате в бюджет
						Иначе
							Элемент.Ф200_05_AA = 0;
						КонецЕсли;
                    ИначеЕсли ИмяГруппы = "Страница7" Тогда
                        
                        Элемент.Ф200_05_A7 = Формат(НомерСтроки, мФорматНомераСтроки);
                        Элемент.Ф200_05_AB = ВыборкаПоСтруктурному.ОППВ; //Сумма ОППВ, подлежащих уплате
                        Элемент.Ф200_05_AC = ВыборкаПоСтруктурному.ООСМС; //Сумма ОППВ, подлежащих уплате
                        Элемент.Ф200_05_AD = ВыборкаПоСтруктурному.ОПВР; //Сумма ОПВР, подлежащих уплате
                    КонецЕсли;
                    
                                  
                КонецЦикла;
                ТаблицаСтандартныхВычетов.Свернуть("КодСтроки", "Сумма");
                ТаблицаПрочихВычетов.Свернуть("КодСтроки", "Сумма");
                ТаблицаНеоблагаемыхДоходов.Свернуть("КодСтроки", "Сумма");
                
                КоличествоТаблицаСтандартныхВычетов = ТаблицаСтандартныхВычетов.Количество();
                КоличествоТаблицаПрочихВычетов = ТаблицаПрочихВычетов.Количество();
                КоличествоНеоблагаемыхДоходов = ТаблицаНеоблагаемыхДоходов.Количество();
                
                Если ИмяГруппы = "Страница1" Тогда
                    ЗаполнитьЗначенияСвойств(КлючевыеПоляСтраница1, Элемент);
                КонецЕсли;
                
                МаксимальноеКоличествоСтрок = Макс(КоличествоТаблицаСтандартныхВычетов, КоличествоТаблицаПрочихВычетов, КоличествоНеоблагаемыхДоходов);
                
                Счетчик = 0;
                
                Пока Счетчик < МаксимальноеКоличествоСтрок Цикл
                    
                    НомерСтроки = НомерСтроки + 1;
                    Счетчик = Счетчик + 1;
                    // заполняем данные строки в форме отчета
                    Элемент = ТаблицаСтрокГруппы.Добавить(); 
                    Если ИмяГруппы = "Страница1" Тогда
                        Элемент.Ф200_05_A1 = Формат(НомерСтроки, мФорматНомераСтроки);
                        ЗаполнитьЗначенияСвойств(Элемент, КлючевыеПоляСтраница1); 
                    ИначеЕсли ИмяГруппы = "Страница2" Тогда
                        Элемент.Ф200_05_A2 = Формат(НомерСтроки, мФорматНомераСтроки);
                        Если КоличествоНеоблагаемыхДоходов >= Счетчик Тогда
                            Если ТипЗнч(ТаблицаНеоблагаемыхДоходов[Счетчик - 1].КодСтроки) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
                                Элемент.Ф200_05_I = "";
                                ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'При заполнении приложения 200.05 для вида расчета <%1> не задан код строки Декларации!'"),
                                Строка(ТаблицаНеоблагаемыхДоходов[Счетчик - 1].КодСтроки));                    
                                ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ТаблицаНеоблагаемыхДоходов[Счетчик - 1].КодСтроки);
                            Иначе
                                Элемент.Ф200_05_I = ТаблицаНеоблагаемыхДоходов[Счетчик - 1].КодСтроки;
                            КонецЕсли;
                            Элемент.Ф200_05_J = ТаблицаНеоблагаемыхДоходов[Счетчик - 1].Сумма;
                        КонецЕсли;
                    ИначеЕсли ИмяГруппы = "Страница3" Тогда
                        Элемент.Ф200_05_A3 = Формат(НомерСтроки, мФорматНомераСтроки);
                        Если КоличествоТаблицаСтандартныхВычетов >= Счетчик Тогда                    
                            Элемент.Ф200_05_M = ТаблицаСтандартныхВычетов[Счетчик - 1].КодСтроки;
                            Элемент.Ф200_05_N = ТаблицаСтандартныхВычетов[Счетчик - 1].Сумма;
                        КонецЕсли;
                        Если КоличествоТаблицаПрочихВычетов >= Счетчик Тогда
                            Элемент.Ф200_05_O = ТаблицаПрочихВычетов[Счетчик - 1].КодСтроки;
                        КонецЕсли;
                    ИначеЕсли ИмяГруппы = "Страница4" Тогда
                        Элемент.Ф200_05_A4 = Формат(НомерСтроки, мФорматНомераСтроки);
                        Если КоличествоТаблицаПрочихВычетов >= Счетчик Тогда
                            Элемент.Ф200_05_P = ТаблицаПрочихВычетов[Счетчик - 1].Сумма;
                        КонецЕсли;
                    ИначеЕсли ИмяГруппы = "Страница5" Тогда
                        Элемент.Ф200_05_A5 = Формат(НомерСтроки,мФорматНомераСтроки);
                    ИначеЕсли ИмяГруппы = "Страница6" Тогда
                        Элемент.Ф200_05_A6 = Формат(НомерСтроки, мФорматНомераСтроки);
                    ИначеЕсли ИмяГруппы = "Страница7" Тогда
                        Элемент.Ф200_05_A7 = Формат(НомерСтроки, мФорматНомераСтроки);
                    КонецЕсли;
                    
                КонецЦикла;
                
                НомерСтроки = НомерСтроки + 1;	           			 				
            КонецЦикла; 
        КонецЦикла;
    КонецЦикла;	  			 
	
	РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы, СтруктураФормы); 	 
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма,ТекИмяФормы);	
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма,ТекИмяФормы,Перезаполнить);     
	
	РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтаФорма);
	
	ТекущаяСтраница = СтрокаФормы.ВсегоСтраниц;
	
КонецПроцедуры // Форма200_03ЗаполнитьАвтоНаСервере()

&НаКлиенте
Процедура Форма200ОбработкаВыбораЭлемента(Результат, ПараметрыВыбора) экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	Иначе
		ВыбранныйЭлемент = Результат;
	КонецЕсли;
	
	ОбластьРасшифровки = ПараметрыВыбора.Область;	
	НомерСтроки = Сред(ОбластьРасшифровки.Имя, Найти(ОбластьРасшифровки.Имя, "__") + 2);
	
	Если ТипЗнч(ВыбранныйЭлемент) = Тип("СправочникСсылка.Контрагенты") 
			ИЛИ ТипЗнч(ВыбранныйЭлемент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
		Если КодФормы = "Форма200_02" Тогда 
			ИмяГруппы = "Страница1";                                                    
			Ячейка  = "Ф200_02ФИОРезидента";	
					 
			Форма200_02ОбработкаПодбораНаСервере(ВыбранныйЭлемент, Ячейка, ИмяГруппы, НомерСтроки); 
			
		ИначеЕсли КодФормы = "Форма200_05" Тогда 
			
			ИмяГруппы = "Страница1";                                                    
			Ячейка  = "Ф200_05ФИО";	
			Форма200_05ОбработкаПодбораНаСервере(ВыбранныйЭлемент, Ячейка, ИмяГруппы, НомерСтроки);
			
		ИначеЕсли Найти(КодФормы, "200_06") <> 0 Тогда
			
			КодФормыБезПрефикса = СтрЗаменить(КодФормы, "Форма", "");
			
			ИмяГруппы = "Страница1";                                                    
			Ячейка  = "Ф" + КодФормыБезПрефикса + "ФИО";	
			Форма200_06ОбработкаПодбораНаСервере(ВыбранныйЭлемент, Ячейка, ИмяГруппы, НомерСтроки);

		КонецЕсли;
		
	ИначеЕсли (ТипЗнч(ВыбранныйЭлемент) = Тип("СправочникСсылка.Организации") 
			ИЛИ ТипЗнч(ВыбранныйЭлемент) = Тип("СправочникСсылка.ПодразделенияОрганизаций"))		
			И КодФормы = "Форма200_03" Тогда
			
			ИмяГруппы = "Страница1";                                                    
			Ячейка  = "ФилиалНазв";
			Форма200_03ОбработкаПодбора(ВыбранныйЭлемент, Ячейка, ИмяГруппы, НомерСтроки);
			
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура Форма200_05ОбработкаПодбораНаСервере(Расшифровка, ИмяЯчейки, ИмяГруппы, НомерСтроки) Экспорт   

	Если ИмяЯчейки = "Ф200_05ФИО" Тогда
		СсылкаФизЛица = Расшифровка;
		
		ОбластьНаименование = "Ф200_05ФИО__" + НомерСтроки;		
		ОбластьИИН = "Ф200_05ИИН__" + НомерСтроки;
		
		Если ТипЗнч(Расшифровка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			// Определим сведения о полном ФИО, РНН, ИИН
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("парамФизЛицо", 	СсылкаФизЛица);
			Запрос.УстановитьПараметр("парамПериодПо", 	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			Запрос.УстановитьПараметр("парамНачГода", 	НачалоГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
			Запрос.УстановитьПараметр("парамПустаяДата", '00010101');
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	ВЫБОР
			               |		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL
			               |			ТОГДА ФизическиеЛица.Наименование
			               |		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
			               |				КОГДА ФИОФизЛиц.Имя <> """"
			               |					ТОГДА "" "" + ФИОФизЛиц.Имя
			               |				ИНАЧЕ """"
			               |			КОНЕЦ + ВЫБОР
			               |				КОГДА ФИОФизЛиц.Отчество <> """"
			               |					ТОГДА "" "" + ФИОФизЛиц.Отчество
			               |				ИНАЧЕ """"
			               |			КОНЕЦ
			               |	КОНЕЦ КАК ФИО,
			               |	ФизическиеЛица.ИдентификационныйКодЛичности КАК ИИН
			               |ИЗ
			               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамПериодПо, ФизЛицо = &парамФизЛицо) КАК ФИОФизЛиц
			               |		ПО ФизическиеЛица.Ссылка = ФИОФизЛиц.ФизЛицо
			               |ГДЕ
			               |	ФизическиеЛица.Ссылка = &парамФизЛицо";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
													  
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.ИИН) Тогда
					СтрокаИИН = Выборка.ИИН;
				Иначе
					СтрокаИИН = "";
					ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа D ""ИИН"",
							  |т.к. значение содержит символы, отличные от цифр'");
							  
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,  Формат(НомерСтроки+1,мФорматНомераСтроки)));
							  
				КонецЕсли;
												
				Форма200_05ПолеТабличногоДокументаСтраница1.Области[ОбластьНаименование].Значение 	= Выборка.ФИО;				
				Форма200_05ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение 			= СтрокаИИН;
				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьНаименование , Выборка.ФИО, ,СсылкаФизЛица);				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьИИН			, Форма200_05ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение, , СсылкаФизЛица);
						
			КонецЕсли;
		
		Иначе // если тип Расшифровка "Контрагент"
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("парамКонтрагент", СсылкаФизЛица);
						
			Запрос.Текст = "ВЫБРАТЬ
			               |	Контрагенты.Наименование КАК Контрагент,
			               |	Контрагенты.ИдентификационныйКодЛичности КАК ИИН
			               |ИЗ
			               |	Справочник.Контрагенты КАК Контрагенты
			               |ГДЕ
			               |	Контрагенты.Ссылка = &парамКонтрагент";
						   
			Выборка = Запрос.Выполнить().Выбрать();
									
			Если Выборка.Следующий() Тогда
											
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.ИИН) Тогда
					СтрокаИИН = Выборка.ИИН;
				Иначе
					СтрокаИИН = "";
					
					
					ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа D ""ИИН"",
							  |т.к. значение содержит символы, отличные от цифр'");
							  
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,  Формат(НомерСтроки+1, мФорматНомераСтроки)));
					
				КонецЕсли;
				
				Форма200_05ПолеТабличногоДокументаСтраница1.Области[ОбластьНаименование].Значение = Выборка.Контрагент;				
				Форма200_05ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение 		  = СтрокаИИН;			
				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьНаименование, Выборка.Контрагент,,СсылкаФизЛица);				
				РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьИИН, Форма200_05ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение,,СсылкаФизЛица);
				 
			КонецЕсли;  			
		КонецЕсли; 
		
		Форма200_05ПолеТабличногоДокументаСтраница1.Области[ОбластьНаименование].Расшифровка        = СсылкаФизЛица;				
		Форма200_05ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Расшифровка 			    = СсылкаФизЛица;			
		
	КонецЕсли;
		
КонецПроцедуры 

///Обход проблемы с очисткой ячеек в ТП в клиент-серверном режиме рабоыт
&НаКлиенте
Процедура ПанельФорма200ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ПанельФорма200ПриСменеСтраницыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПанельФорма200ПриСменеСтраницыНаСервере()
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	

КонецПроцедуры

&НаКлиенте
Процедура Форма200_05Расшифровка(ИмяЯчейки)
	
	СтруктураПоФизЛицу = Новый Структура;
	// определим работника
	Если Найти(ИмяЯчейки,"__") > 0 Тогда		
		НомерЯчейки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "__")+ 2));
		
		ОбластьРасшифровки = Форма200_05ПолеТабличногоДокументаСтраница1.Области.Найти("Ф200_05ФИО__" +  НомерЯчейки);		
		Если ОбластьРасшифровки <> Неопределено Тогда
			Если ЗначениеЗаполнено(ОбластьРасшифровки.Расшифровка) Тогда
				СтруктураПоФизЛицу.Вставить("ФизЛицо", ОбластьРасшифровки.Расшифровка);
				СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);					
			Иначе
				ПоказатьПредупреждение(,НСтр("ru = 'Для формирования расшифровки заполните физическое лицо в графе ""В"" на странице 1.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки не поддерживается."+Символы.ПС+"Расшифровку содержат ячейки формы, выделенные голубым цветом.'"));
		Возврат;
	КонецЕсли;
	
	ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,, СтруктураПоФизЛицу,,,,Истина);
	
КонецПроцедуры // Форма200_05Расшифровка()

&НаКлиенте
Процедура Форма200_05Расшифровкаобщая()
	
	СтруктураПоФизЛицу = Новый Структура;
	Если ПолучитьЗначениеРеквизита(Налогоплательщик, "ЮрФизЛицо") = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		СтруктураПоФизЛицу.Вставить("ФизЛицо", ПолучитьЗначениеРеквизита(Налогоплательщик, "ИндивидуальныйПредприниматель"));
		СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.НеРавно);											
	КонецЕсли;
	
	ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,,СтруктураПоФизЛицу,,,,Истина);	
	
КонецПроцедуры // Форма200_02Расшифровкаобщая()

////////////////////////////////////////////////////////////////////////////////
// Форма 200.06

&НаКлиенте
Процедура Форма200_06ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;	
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница1");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);	
	
	Если (Найти(Ячейка, "200_06") = 0) Тогда
		Возврат;
	КонецЕсли;  
		
	ТекИмяФормы 	= Элементы.РазделыОтчета.ТекущиеДанные.КодФормы;
	КодФормыБезПрефикса = СтрЗаменить(ТекИмяФормы, "Форма", "");
  	
	Если Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "ФИО__")> 0 ИЛИ Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "ИИН__")> 0 Тогда
		НачЗначение = Область.Значение;
		
		ЗначениеРасшифровки = Область.Расшифровка;
		
		//может быть не заполнена расшировка ячейки при восстановления данных старых форм
		Если Не ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			ИмяЯчейкиРасшифровки = "Ф" + КодФормыБезПрефикса + "ФИО" + Сред(Ячейка,Найти(Ячейка,"__"));
			ОбластьРасширофвки = Форма200_06ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяЯчейкиРасшифровки);
			Если ОбластьРасширофвки <> Неопределено Тогда 
				ЗначениеРасшифровки = ОбластьРасширофвки.Расшифровка;
				Область.Расшифровка = ЗначениеРасшифровки;
				ПередатьЗначениеВСтруктуруНаСервере(Ячейка,НачЗначение,,,ЗначениеРасшифровки);
			КонецЕсли;				 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НачЗначение) ИЛИ ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;	
			
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма200ОбработкаВыбораЭлемента", ЭтотОбъект, ПараметрыСтраницы);
		ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
				
	ИначеЕсли (Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "Категория__") > 0) Тогда
		НачЗначение = Область.Значение;
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора"		  , Истина);
		ПараметрыФормы.Вставить("ИмяМакета"			  , "КодыВидов");
		ПараметрыФормы.Вставить("ИмяСекции"			  ,	"КатегорииФизическихЛиц2023");
		ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Истина);
		
		ПараметрыФормы.Вставить("ИмяОтчета",          "РегламентированныйОтчет200Форма");
	
       	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ?(НЕ ЗначениеЗаполнено(НачЗначение), Неопределено, НачЗначение)));
		
		ВнешнийОтчет = СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0;
		Если ВнешнийОтчет Тогда
			ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		Иначе
			ОткрытьФорму("Отчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма, Истина);
		КонецЕсли;
        
   	ИначеЕсли (Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_E__") > 0)Тогда
		НачЗначение = Область.Значение;
		
        ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
        ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму начисленных доходов'"), 12,0) ;		
	Иначе
		Возврат;
	КонецЕсли; 	 
	
КонецПроцедуры 

&НаКлиенте
Процедура Форма200_06ПолеТабличногоДокументаСтраница2Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница2");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);	
	
	Если (Найти(Ячейка, "200_06") = 0) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;  
	
	ТекИмяФормы 	= Элементы.РазделыОтчета.ТекущиеДанные.КодФормы;
	КодФормыБезПрефикса = СтрЗаменить(ТекИмяФормы, "Форма", "");   
		
	Если (Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_F__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_G__") > 0)
     ИЛИ (Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_H__") > 0) 
     ИЛИ (Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_I__") > 0) Тогда
		НачЗначение = Область.Значение;
		Если (Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_F__") > 0) Тогда 
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму единого платежа, исчисленного с начисленных доходов'"), 12,2) ;
		
		ИначеЕсли (Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_G__") > 0) Тогда			
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму индивидуального подоходного налога, подлежащего уплате в бюджет'"), 12,2) ;
            
      	ИначеЕсли (Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_H__") > 0) Тогда			
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму обязательных пенсионных взносов, подлежащих перечислению'"), 12,2) ;
						
		ИначеЕсли (Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_I__") > 0) Тогда			
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму взносов на ОСМС, подлежащих перечислению'"), 12,2) ;
						
		КонецЕсли;   		
				
	КонецЕсли;    	
	
КонецПроцедуры

&НаКлиенте
Процедура Форма200_06ПолеТабличногоДокументаСтраница3Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница3");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);	
	
	Если (Найти(Ячейка, "200_06") = 0) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;  
	
	ТекИмяФормы 	= Элементы.РазделыОтчета.ТекущиеДанные.КодФормы;
	КодФормыБезПрефикса = СтрЗаменить(ТекИмяФормы, "Форма", "");   
	
	Если (Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_J__") > 0) 
	 ИЛИ (Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_K__") > 0)
     ИЛИ (Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_L__") > 0) 
     ИЛИ (Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_M__") > 0) Тогда
		НачЗначение = Область.Значение;
		Если (Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_J__") > 0) Тогда 
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму отчислений на ГФСС'"), 12,2) ;
		
		ИначеЕсли (Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "_K__") > 0) Тогда			
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму отчислений на ОСМС, подлежащих к уплате'"), 12,2) ;
            
      	ИначеЕсли (Найти(Ячейка,  "Ф" + КодФормыБезПрефикса + "_L__") > 0) Тогда			
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму обязательных пенсионных взносов работодателя, подлежащих перечислению'"), 12,2) ;
						
		ИначеЕсли (Найти(Ячейка,  "Ф" + КодФормыБезПрефикса + "_M__") > 0) Тогда			
			
			ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
			ПоказатьВводЧисла(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите сумму единого платежа, подлежащего перечислению'"), 12,2) ;
						
		КонецЕсли;  
		
	ИначеЕсли Найти(Ячейка, "Ф" + КодФормыБезПрефикса + "КодСтраныГражданства__")> 0  Тогда
		 
		НачЗначение = Область.Значение;	
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите код страны гражданства'"),100) ; 	 
		
	Иначе
		
		Возврат; 
		
	КонецЕсли;    	
		
КонецПроцедуры

&НаКлиенте
Процедура Форма200_06ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора) 
	
	СсылкаРасшифровки = ВыбранноеЗначение;
	
	ОбластьРасшифровки = ЭтаФорма.ТекущийЭлемент.ТекущаяОбласть;	
	НомерСтроки = Сред(ОбластьРасшифровки.Имя, Найти(ОбластьРасшифровки.Имя, "__") + 2);
    
    Если ВРег(ИсточникВыбора.ИмяФормы) = ?(СтрНайти(ЭтаФорма.ИмяФормы, "ВнешнийОтчет.") > 0, ВРег("ВнешнийОтчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора"), 
        ВРег("Отчет.РегламентированныйОтчет200Форма.Форма.ФормаВыбораИзКлассификатора")) Тогда
  		Если ВРег(ИсточникВыбора.ИмяСекции) = ВРег("КатегорииФизическихЛиц2023") Тогда 			
            Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
                ОбластьРасшифровки.Значение = ВыбранноеЗначение;	
            Иначе
                ОбластьРасшифровки.Значение = ВыбранноеЗначение.КодСтроки;
            КонецЕсли;
            ИмяСтраницы = "Страница" + Прав(ЭтаФорма.ТекущийЭлемент.Имя,1);			
            ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ОбластьРасшифровки.Имя,ОбластьРасшифровки.Значение);	
            	
        КонецЕсли;
    КонецЕсли;
    	
КонецПроцедуры   

&НаСервере
Процедура Форма200_06ОбработкаПодбораНаСервере(Расшифровка, ИмяЯчейки, ИмяГруппы, НомерСтроки) Экспорт   
	
	Если Найти(ИмяЯчейки, "200_06") Тогда
		
		ТекИмяФормы 		= КодФормы;
		КодФормыБезПрефикса = СтрЗаменить(ТекИмяФормы, "Форма", "");
		
		ИмяЯчейкиПриложения = "Ф" + КодФормыБезПрефикса + "ФИО"; 
		
		Если ИмяЯчейки = ИмяЯчейкиПриложения Тогда
			СсылкаФизЛица = Расшифровка;
			
			ОбластьНаименование = ИмяЯчейкиПриложения + "__" + НомерСтроки;		
			ОбластьИИН = "Ф" + КодФормыБезПрефикса + "ИИН__" + НомерСтроки;
			
			Если ТипЗнч(Расшифровка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				// Определим сведения о полном ФИО, РНН, ИИН
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("парамФизЛицо", 	СсылкаФизЛица);
				Запрос.УстановитьПараметр("парамПериодПо", 	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
				Запрос.УстановитьПараметр("парамНачГода", 	НачалоГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
				Запрос.УстановитьПараметр("парамПустаяДата", '00010101');
				
				Запрос.Текст = "ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL
				|			ТОГДА ФизическиеЛица.Наименование
				|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
				|				КОГДА ФИОФизЛиц.Имя <> """"
				|					ТОГДА "" "" + ФИОФизЛиц.Имя
				|				ИНАЧЕ """"
				|			КОНЕЦ + ВЫБОР
				|				КОГДА ФИОФизЛиц.Отчество <> """"
				|					ТОГДА "" "" + ФИОФизЛиц.Отчество
				|				ИНАЧЕ """"
				|			КОНЕЦ
				|	КОНЕЦ КАК ФИО,
				|	ФизическиеЛица.ИдентификационныйКодЛичности КАК ИИН
				|ИЗ
				|	Справочник.ФизическиеЛица КАК ФизическиеЛица
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамПериодПо, ФизЛицо = &парамФизЛицо) КАК ФИОФизЛиц
				|		ПО ФизическиеЛица.Ссылка = ФИОФизЛиц.ФизЛицо
				|ГДЕ
				|	ФизическиеЛица.Ссылка = &парамФизЛицо";
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					
					Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.ИИН) Тогда
						СтрокаИИН = Выборка.ИИН;
					Иначе
						СтрокаИИН = "";
						ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа C ""ИИН"",
						|т.к. значение содержит символы, отличные от цифр'");
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,  Формат(НомерСтроки+1,мФорматНомераСтроки)));
						
					КонецЕсли;
					
					//Форма200_06ПолеТабличногоДокументаСтраница1.Области[ОбластьНаименование].Значение 	= Выборка.ФИО;				
					//Форма200_06ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение 			= СтрокаИИН;     
					
					//ЭтотОбъект[КодФормы + "ПолеТабличногоДокумента" + ИмяЛиста].Области[ИмяЯчейки].Значение = Значение;
					//ЭтотОбъект[КодФормы + "ПолеТабличногоДокумента" + ИмяЛиста].Области[ИмяЯчейки].Расшифровка = ЗначениеРасшифровки;
										
					ЭтотОбъект[КодФормы + "ПолеТабличногоДокументаСтраница1"].Области[ОбластьНаименование].Значение = Выборка.ФИО;
					ЭтотОбъект[КодФормы + "ПолеТабличногоДокументаСтраница1"].Области[ОбластьИИН].Значение = СтрокаИИН;
					
					РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьНаименование , Выборка.ФИО, ,СсылкаФизЛица);				
					РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьИИН			, ЭтотОбъект[КодФормы + "ПолеТабличногоДокументаСтраница1"].Области[ОбластьИИН].Значение, , СсылкаФизЛица);
					
				КонецЕсли;
				
				//Иначе // если тип Расшифровка "Контрагент"
				//	
				//	Запрос = Новый Запрос;
				//	Запрос.УстановитьПараметр("парамКонтрагент", СсылкаФизЛица);
				//				
				//	Запрос.Текст = "ВЫБРАТЬ
				//	               |	Контрагенты.Наименование КАК Контрагент,
				//	               |	Контрагенты.ИдентификационныйКодЛичности КАК ИИН
				//	               |ИЗ
				//	               |	Справочник.Контрагенты КАК Контрагенты
				//	               |ГДЕ
				//	               |	Контрагенты.Ссылка = &парамКонтрагент";
				//				   
				//	Выборка = Запрос.Выполнить().Выбрать();
				//							
				//	Если Выборка.Следующий() Тогда
				//									
				//		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.ИИН) Тогда
				//			СтрокаИИН = Выборка.ИИН;
				//		Иначе
				//			СтрокаИИН = "";
				//			
				//			
				//			ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа C ""ИИН"",
				//					  |т.к. значение содержит символы, отличные от цифр'");
				//					  
				//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,  Формат(НомерСтроки+1, мФорматНомераСтроки)));
				//			
				//		КонецЕсли;
				//		
				//		Форма200_06ПолеТабличногоДокументаСтраница1.Области[ОбластьНаименование].Значение = Выборка.Контрагент;				
				//		Форма200_06ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение 		  = СтрокаИИН;			
				//		
				//		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьНаименование, Выборка.Контрагент,,СсылкаФизЛица);				
				//		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница1", ОбластьИИН, Форма200_06ПолеТабличногоДокументаСтраница1.Области[ОбластьИИН].Значение,,СсылкаФизЛица);
				
				//КонецЕсли;  			
			КонецЕсли; 
						
			ЭтотОбъект[КодФормы + "ПолеТабличногоДокументаСтраница1"].Области[ОбластьНаименование].Расшифровка = СсылкаФизЛица;
			ЭтотОбъект[КодФормы + "ПолеТабличногоДокументаСтраница1"].Области[ОбластьИИН].Расшифровка = СсылкаФизЛица;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры 

&НаКлиенте
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма200_06ЗаполнитьАвто(Перезаполнить = Ложь)
	
	Состояние("Расчет формы 200.06");		
	
	Форма200_06ЗаполнитьАвтоНаСервере(Перезаполнить);		
	
	Состояние("");	
	
КонецПроцедуры // Форма200_06ЗаполнитьАвто()

&НаСервере
// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура Форма200_06ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)   
	
	ТекИмяФормы = "Форма200_06";
	Очистить(ТекИмяФормы, Истина);
	
	СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПолучитьПорядокОбложенияДоходовРаботников(Налогоплательщик, КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)); 
	
	Если НЕ СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж") Тогда	
		Возврат;		
	КонецЕсли;

	ТекущаяСтраница = 1;
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы",ТекИмяФормы));
	
	Если СтрокаФормы <> Неопределено Тогда
		СтрокаФормы.ВсегоСтраниц = 1;
	КонецЕсли;     		
	
	Если НЕ Перезаполнить Тогда  
		Текст = НСтр("ru = 'Расчет приложения 200.06'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли; 
	
	//Доп200_06
	
	// Удаление добавленных форм
	ТаблицаДобавленныхПриложений_ = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений");
	УдаляемыеПриложения = ТаблицаДобавленныхПриложений_.НайтиСтроки(Новый Структура("КодИсходнойФормы", "Форма200_06"));
	УдаляемыеИндексы = Новый Массив;
	Для Каждого УдаляемоеПриложение Из УдаляемыеПриложения Цикл
		УдаляемыеИндексы.Добавить(ТаблицаДобавленныхПриложений_.Индекс(УдаляемоеПриложение));
	КонецЦикла;
	
	Индекс = УдаляемыеИндексы.Количество() - 1;
	Пока Индекс >= 0 Цикл
		УдаляемыйИндекс = УдаляемыеИндексы[Индекс];
		УдалитьПриложениеНаСервере(УдаляемыйИндекс);
		Индекс = Индекс -1;
	КонецЦикла;	   
	
	ВыборкаПоСП = Форма200_06РассчитатьДанныеФормы(Истина).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	
	// Формирование дополнительных форм для Филиалов
	ПараметрыОтбора  = Новый Структура();
	
	ДобавленныеПриложения = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений").Скопировать(Новый Структура("КодИсходнойФормы", "Форма200_06"));
	ПриложениеДобавлено = Ложь;
	
	Пока ВыборкаПоСП.Следующий() Цикл 
		Если ВыборкаПоСП.СтруктурнаяЕдиница = Налогоплательщик Тогда
			Продолжить;
		КонецЕсли;
		Если ДобавленныеПриложения.Найти(ВыборкаПоСП.СтруктурнаяЕдиница, "СтруктурнаяЕдиница") = Неопределено Тогда
			ДобавитьПриложениеБазовыеДанные("Форма200_06", "200.06", Новый Структура("СтруктурнаяЕдиница", ВыборкаПоСП.СтруктурнаяЕдиница));
			ПриложениеДобавлено = Истина;
		КонецЕсли;
	КонецЦикла;	    
	
	Если ПриложениеДобавлено Тогда
		
		ДобавленныеПриложения = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений").Скопировать(Новый Структура("КодИсходнойФормы", "Форма200_06"));
		КодыФормДобавленныхПриложений = ДобавленныеПриложения.ВыгрузитьКолонку("КодФормы");
		
		Для Каждого КодФормыПриложения Из КодыФормДобавленныхПриложений Цикл  
			Если НЕ Перезаполнить Тогда   
				ПредставлениеКодаПриложения = СтрЗаменить(КодФормыПриложения, "Форма", "");
				Текст = НСтр("ru = 'Расчет приложения " + СтрЗаменить(ПредставлениеКодаПриложения, "_", ".") + "'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			КонецЕсли;
			
			ДобавитьПриложениеПоказателиПередачиДанных(КодФормыПриложения);
			ДобавитьПриложениеРеквизитыЭлементыФормыПриложения(КодФормыПриложения);
			ЗаполнитьПараметры(КодФормыПриложения);
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьПараметры("Форма200_06");
	
	ДобавленныеПриложения = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений").Скопировать(Новый Структура("КодИсходнойФормы", "Форма200_06"));
	
	//Доп200_06   
	
	ВыборкаПоСП.Сбросить();
	
	Пока ВыборкаПоСП.Следующий() Цикл
		
		КодФормы = "Форма200_06";
		КодФормыПредставление = "200.06";
		
		ДобавленноеПриложение = ДобавленныеПриложения.Найти(ВыборкаПоСП.СтруктурнаяЕдиница, "СтруктурнаяЕдиница");
		Если ДобавленноеПриложение <> Неопределено Тогда
			КодФормы = ДобавленноеПриложение.КодФормы;
			КодФормыПредставление = КодФормыПредставление + "(" + ДобавленноеПриложение.Порядок + ")";
		КонецЕсли;
		
		ИмяФормыБезПрефикса = Сред(КодФормы, 6); // "200_06", "200_06_1", "200_06_2" и т.д.
		
		ВыборкаФИО = ВыборкаПоСП.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		//СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, ТекИмяФормы); 
		
		СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, КодФормы);
		
		ОписаниеТиповСтрока12 = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12));
		ОписаниеТиповЧисло12  = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 0));   
		
		Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
			
			НомерСтроки = 2;
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			ТаблицаСтрокГруппы = ЭлементСтруктуры.Значение.Строки;
			ТаблицаСтрокГруппы.Очистить();
			
			//КлючевыеПоляСтраница1 = Новый Структура("Ф200_06ФИО, Ф200_06ИИН, Ф200_06Категория,
			//|Ф200_06ФИО_Расшифровка, Ф200_06ИИН_Расшифровка, Ф200_06Категория_Расшифровка");  
			
			КлючевыеПоляМассив = Новый Массив;
			КлючевыеПоляМассив.Добавить("Ф" + ИмяФормыБезПрефикса + "ФИО");
			КлючевыеПоляМассив.Добавить("Ф" + ИмяФормыБезПрефикса + "ИИН");
			КлючевыеПоляМассив.Добавить("Ф" + ИмяФормыБезПрефикса + "Категория");
			КлючевыеПоляМассив.Добавить("Ф" + ИмяФормыБезПрефикса + "ФИО_Расшифровка");
			КлючевыеПоляМассив.Добавить("Ф" + ИмяФормыБезПрефикса + "ИИН_Расшифровка");
			КлючевыеПоляМассив.Добавить("Ф" + ИмяФормыБезПрефикса + "Категория_Расшифровка"); 
			
			КлючевыеПоляСтрока = СтрСоединить(КлючевыеПоляМассив, ",");
			
			КлючевыеПоляСтраница1 = Новый Структура(КлючевыеПоляСтрока); 
			
			ВыборкаФИО.Сбросить();
			
			Пока ВыборкаФИО.Следующий() Цикл  
				
				ВыборкаПоСтруктурному = ВыборкаФИО.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПоСтруктурному.Следующий() Цикл
					
					// заполняем данные строки в форме отчета
					Элемент = ТаблицаСтрокГруппы.Добавить();   			 
					
					Выборка = ВыборкаПоСтруктурному.Выбрать();
					
					Пока Выборка.Следующий() Цикл
						
						Если ИмяГруппы = "Страница1" Тогда 
							
							//Так должны заполнять по отдельности значения выборки 
							//для каждого листа   
							
							Элемент["Ф" + ИмяФормыБезПрефикса + "_A1"] = Формат(НомерСтроки, мФорматНомераСтроки);
							//Элемент.Ф200_06_A1 = Формат(НомерСтроки, мФорматНомераСтроки);
							
							Элемент["Ф" + ИмяФормыБезПрефикса + "ФИО"] = Выборка.ФИОФизЛица;
							//Элемент.Ф200_06ФИО = Выборка.ФИОФизЛица;
							
							Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Выборка.ИИН) Тогда  					
								СтрокаИИН = Выборка.ИИН;
							Иначе                                                   
								СтрокаИИН = "";
								
								ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена графа C ""ИНН"",
								|т.к. значение содержит символы, отличные от цифр'");
								
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(НомерСтроки, мФорматНомераСтроки)));
								
							КонецЕсли;
							
							Элемент["Ф" + ИмяФормыБезПрефикса + "ИИН"] = СтрокаИИН;
							//Элемент.Ф200_06ИИН = СтрокаИИН;
							РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф" + ИмяФормыБезПрефикса + "ФИО",        Выборка.ФизЛицо);
							РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф" + ИмяФормыБезПрефикса + "ИИН",        Выборка.ФизЛицо);
							
							//РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф200_06ФИО",        Выборка.ФизЛицо);
							//РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф200_06ИИН",        Выборка.ФизЛицо);
							
							Категория = Новый СписокЗначений;
							Если Выборка.Категория1 <> "" Тогда
								Категория.Добавить(ВыборкаПоСтруктурному.Категория1);
							КонецЕсли;
							Если Выборка.Категория2 <> "" Тогда
								Категория.Добавить(ВыборкаПоСтруктурному.Категория2);
							КонецЕсли;
							Если Выборка.Категория3 <> "" Тогда
								Категория.Добавить(ВыборкаПоСтруктурному.Категория3);
							КонецЕсли;
							Если Выборка.Категория4 <> "" Тогда
								Категория.Добавить(ВыборкаПоСтруктурному.Категория4);
							КонецЕсли;
							
							Элемент["Ф" + ИмяФормыБезПрефикса + "Категория"] = Категория;
							//Элемент.Ф200_06Категория  = Категория; 
							
							Элемент["Ф" + ИмяФормыБезПрефикса + "_E"] = ВыборкаПоСтруктурному.НачисленныеДоходы;
							//Элемент.Ф200_06_E  = ВыборкаПоСтруктурному.НачисленныеДоходы;
							
						ИначеЕсли ИмяГруппы = "Страница2" Тогда
							
							//Элемент.Ф200_06_A2 = Формат(НомерСтроки, мФорматНомераСтроки);
							//
							//Элемент.Ф200_06_F = ВыборкаПоСтруктурному.ЕПИсчисленный;
							//Элемент.Ф200_06_G = ВыборкаПоСтруктурному.ИПНПодлежащийУплате;
							//Элемент.Ф200_06_H = ВыборкаПоСтруктурному.ОПВПодлежащиеПеречислению;
							//Элемент.Ф200_06_I = ВыборкаПоСтруктурному.ВОСМСПодлежащийПеречислению;
							
							Элемент["Ф" + ИмяФормыБезПрефикса + "_A2"] = Формат(НомерСтроки, мФорматНомераСтроки);
							
							Элемент["Ф" + ИмяФормыБезПрефикса + "_F"] = ВыборкаПоСтруктурному.ЕПИсчисленный;
							Элемент["Ф" + ИмяФормыБезПрефикса + "_G"] = ВыборкаПоСтруктурному.ИПНПодлежащийУплате;
							Элемент["Ф" + ИмяФормыБезПрефикса + "_H"] = ВыборкаПоСтруктурному.ОПВПодлежащиеПеречислению;
							Элемент["Ф" + ИмяФормыБезПрефикса + "_I"] = ВыборкаПоСтруктурному.ВОСМСПодлежащийПеречислению; 
							
						ИначеЕсли ИмяГруппы = "Страница3" Тогда
							
							//Элемент.Ф200_06_A3 = Формат(НомерСтроки, мФорматНомераСтроки); 
							//
							//Элемент.Ф200_06КодСтраныГражданства = ?(ЗначениеЗаполнено(Выборка.КодСтраныГражданства), ?(Выборка.КодСтраныГражданства = "KZ", "", Выборка.КодСтраныГражданства), "00");
							//РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф200_06КодСтраныГражданства",        Выборка.ФизЛицо);
							//
							//Элемент.Ф200_06_J  = ВыборкаПоСтруктурному.СоциальныеОтчисления;
							//Элемент.Ф200_06_K  = ВыборкаПоСтруктурному.ООСМСПодлежащиеУплате;
							//Элемент.Ф200_06_L  = ВыборкаПоСтруктурному.ОПВРПодлежащиеПеречислению;
							//Элемент.Ф200_06_M  = ВыборкаПоСтруктурному.ЕППодлежащийПеречислению;
							
							Элемент["Ф" + ИмяФормыБезПрефикса + "_A3"] = Формат(НомерСтроки, мФорматНомераСтроки); 
													
							Элемент["Ф" + ИмяФормыБезПрефикса + "_J"]  = ВыборкаПоСтруктурному.СоциальныеОтчисления;
							Элемент["Ф" + ИмяФормыБезПрефикса + "_K"]  = ВыборкаПоСтруктурному.ООСМСПодлежащиеУплате;
							Элемент["Ф" + ИмяФормыБезПрефикса + "_L"]  = ВыборкаПоСтруктурному.ОПВРПодлежащиеПеречислению;
							Элемент["Ф" + ИмяФормыБезПрефикса + "_M"]  = ВыборкаПоСтруктурному.ЕППодлежащийПеречислению;
							
							Элемент["Ф" + ИмяФормыБезПрефикса + "КодСтраныГражданства"] = ?(ЗначениеЗаполнено(Выборка.КодСтраныГражданства), ?(Выборка.КодСтраныГражданства = "KZ", "", Выборка.КодСтраныГражданства), "00");
							РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы,Элемент, "Ф" + ИмяФормыБезПрефикса + "КодСтраныГражданства", Выборка.ФизЛицо);

							Элемент["Ф" + ИмяФормыБезПрефикса + "ФилиалСтруктуры"]  = ?(Выборка.ЯвляетсяФилиаломСтруктуры, "X", "");   
														
						КонецЕсли;
						
					КонецЦикла;
					
					Если ИмяГруппы = "Страница1" Тогда
						ЗаполнитьЗначенияСвойств(КлючевыеПоляСтраница1, Элемент);
					КонецЕсли;
					
					НомерСтроки = НомерСтроки + 1;	
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;    
		
		
		//ЗначениеВРеквизитФормы(СтруктураФормы.Страница1.Строки, СтруктураФормы.Страница1.ИмяРеквизитаТаблицыСтрокГруппы);
		//ЗначениеВРеквизитФормы(СтруктураФормы.Страница2.Строки, СтруктураФормы.Страница2.ИмяРеквизитаТаблицыСтрокГруппы);
		//ЗначениеВРеквизитФормы(СтруктураФормы.Страница3.Строки, СтруктураФормы.Страница3.ИмяРеквизитаТаблицыСтрокГруппы);
		//
		//РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, КодФормы, СтруктураФормы); 	 
		//РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, КодФормы, Перезаполнить);
		
		РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, КодФормы, СтруктураФормы); 	 
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма,КодФормы);	
		РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма,КодФормы,Перезаполнить); 
		
	КонецЦикла;
	
	//РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы, СтруктураФормы); 	 
	//РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма,ТекИмяФормы);	
	//РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма,ТекИмяФормы,Перезаполнить);  
	
	РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтаФорма);
	
	ТекущаяСтраница = СтрокаФормы.ВсегоСтраниц;
	
КонецПроцедуры // Форма200_06ЗаполнитьАвтоНаСервере()	

Функция Форма200_06РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 

	Запрос =  Новый Запрос;
	Запрос.УстановитьПараметр("парамНалогоплательщик", 		Налогоплательщик);
	Запрос.УстановитьПараметр("парамПериодС", 				НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПериодПо", 				КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПослеПериодПо", 		КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) + 1);
	Запрос.УстановитьПараметр("парамПриход",				ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамРасход",				ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("парамВидСтрокиИсчисление",	Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежаНалог",		Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", 	мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());
	
	// Определим учетную политику по НУ
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации,
	|	УчетнаяПолитикаНУ.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ,
    |	УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН,
    |	УчетнаяПолитикаНУ.УпрощенныйУчетИПНиОПВ 
	|ИЗ	
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодПо, Организация = &парамНалогоплательщик) КАК УчетнаяПолитикаНУ
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОтражениеПоПериодуРегистрации 				= Выборка.ОтражениеПоПериодуРегистрации;
		ОрганизацияЯвляетсяПлательщикомСН			= Выборка.ОрганизацияЯвляетсяПлательщикомСН;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Выборка.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ;
		УпрощенныйУчетИПНиОПВ						= Выборка.УпрощенныйУчетИПНиОПВ;
	Иначе
		ОтражениеПоПериодуРегистрации 				= Истина;
		ОрганизацияЯвляетсяПлательщикомСН			= Ложь;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 	= Ложь;
		УпрощенныйУчетИПНиОПВ 						= Истина;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОтражатьПоПериодуДействия", НЕ ОтражениеПоПериодуРегистрации);
	
	//ЕП
	ОрганизацияЯвляетсяПлательщикомЕП = ?(СтруктураРеквизитовФормы.ПорядокОбложенияДоходовРаботников = ПредопределенноеЗначение("Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж"), Истина, Ложь);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса =	
	"ВЫБРАТЬ
	|	ЕПСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ЕПСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ЕПСведенияОДоходах.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СУММА(ВЫБОР
	|			КОГДА ЕПСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА ЕПСведенияОДоходах.ОблагаемаяБазаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленныеДоходы,
	|	СУММА(0) КАК ЕПИсчисленный,
	|	СУММА(0) КАК ИПНПодлежащийУплате,
	|	СУММА(0) КАК ОПВПодлежащиеПеречислению,
	|	СУММА(0) КАК ВОСМСПодлежащийПеречислению,
	|	СУММА(0) КАК СоциальныеОтчисления,
	|	СУММА(0) КАК ООСМСПодлежащиеУплате,
	|	СУММА(0) КАК ОПВРПодлежащиеПеречислению,
	|	СУММА(0) КАК ЕППодлежащийПеречислению,
	|	ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ЕПСведенияОДоходах.ВидРасчета) КАК КодСтроки
	|ПОМЕСТИТЬ вт_Данные
	|ИЗ
	|	РегистрНакопления.ЕПСведенияОДоходах.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			Месяц,
	|			Налогоплательщик = &парамНалогоплательщик
	|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)) КАК ЕПСведенияОДоходах
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоСН.СрезПоследних(&парамПериодПо, ) КАК КодыСтрокДекларации
	|		ПО ЕПСведенияОДоходах.ВидРасчета = КодыСтрокДекларации.ВидРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕПСведенияОДоходах.СтруктурнаяЕдиница,
	|	НАЧАЛОПЕРИОДА(ЕПСведенияОДоходах.Период, МЕСЯЦ),
	|	ЕПСведенияОДоходах.ФизЛицо,
	|	ЕСТЬNULL(КодыСтрокДекларации.КодСтроки, ЕПСведенияОДоходах.ВидРасчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕПРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ЕПРасчетыСФондами.Период, МЕСЯЦ),
	|	ЕПРасчетыСФондами.СтруктурнаяЕдиница,
	|	СУММА(0),
	|	СУММА(ЕПРасчетыСФондами.СуммаПлатежа),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	""""
	|ИЗ
	|	РегистрНакопления.ЕПРасчетыСФондами КАК ЕПРасчетыСФондами
	|ГДЕ
	|	ЕПРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ЕПРасчетыСФондами.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	|	И ЕПРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ЕПРасчетыСФондами.ВидПлатежа = &парамВидПлатежаНалог
	|	И ЕПРасчетыСФондами.ВидСтроки = &парамВидСтрокиИсчисление
	|	И ЕПРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ЕПРасчетыСФондами.Период, МЕСЯЦ),
	|	ЕПРасчетыСФондами.СтруктурнаяЕдиница,
	|	ЕПРасчетыСФондами.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕПКомпоненты.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА &ОтражатьПоПериодуДействия
	|				ТОГДА ЕПКомпоненты.МесяцНалоговогоПериода
	|			ИНАЧЕ ЕПКомпоненты.Период
	|		КОНЕЦ, МЕСЯЦ),
	|	ЕПКомпоненты.СтруктурнаяЕдиница,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(ЕПКомпоненты.СуммаИПНОборот),
	|	СУММА(ЕПКомпоненты.СуммаОПВОборот),
	|	СУММА(ЕПКомпоненты.СуммаВОСМСОборот),
	|	СУММА(ЕПКомпоненты.СуммаСООборот),
	|	СУММА(ЕПКомпоненты.СуммаООСМСОборот),
	|	СУММА(ЕПКомпоненты.СуммаОПВРОборот),
	|	СУММА(0),
	|	""""
	|ИЗ
	|	РегистрНакопления.ЕПКомпоненты.Обороты(
	|			&парамПериодС,
	|			&парамПериодПо,
	|			Месяц,
	|			Налогоплательщик = &парамНалогоплательщик
	|				И СтруктурнаяЕдиница В (&парамСписокСтруктурныхЕдиниц)) КАК ЕПКомпоненты  
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА &ОтражатьПоПериодуДействия
	|				ТОГДА ЕПКомпоненты.МесяцНалоговогоПериода
	|			ИНАЧЕ ЕПКомпоненты.Период
	|		КОНЕЦ, МЕСЯЦ),
	|	ЕПКомпоненты.СтруктурнаяЕдиница,
	|	ЕПКомпоненты.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕПРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ЕПРасчетыСФондами.Период, МЕСЯЦ),
	|	ЕПРасчетыСФондами.СтруктурнаяЕдиница,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(ЕПРасчетыСФондами.СуммаПлатежа),
	|	""""
	|ИЗ
	|	РегистрНакопления.ЕПРасчетыСФондами КАК ЕПРасчетыСФондами 
	|ГДЕ
	|	ЕПРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ЕПРасчетыСФондами.СтруктурнаяЕдиница В(&парамСписокСтруктурныхЕдиниц)
	|	И ЕПРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодС И &парамПериодПо
	|	И ЕПРасчетыСФондами.ВидПлатежа = &парамВидПлатежаНалог
	|	И ЕПРасчетыСФондами.ВидСтроки = &парамВидСтрокиИсчисление
	|	И ЕПРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ЕПРасчетыСФондами.Период, МЕСЯЦ),
	|	ЕПРасчетыСФондами.СтруктурнаяЕдиница,
	|	ЕПРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Данные.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВЫРАЗИТЬ(СУММА(вт_Данные.НачисленныеДоходы) КАК ЧИСЛО(19, 0)) КАК НачисленныеДоходы,
	|	ВЫРАЗИТЬ(СУММА(вт_Данные.ИПНПодлежащийУплате) КАК ЧИСЛО(19, 2)) КАК ИПНПодлежащийУплате,
	|	ВЫРАЗИТЬ(СУММА(вт_Данные.СоциальныеОтчисления) КАК ЧИСЛО(19, 2)) КАК СоциальныеОтчисления,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер, ЛОЖЬ)
	|			ТОГДА ""1""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Категория1,
	|	ВЫБОР
	|		КОГДА СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)
	|			ТОГДА ""2""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Категория2,
	|	ВЫБОР
	|		КОГДА СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.РодительИнвалидаСДетства)
	|			ТОГДА ""4""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Категория4,
	|	ВЫБОР
	|		КОГДА НЕ СведенияОФизлицахУчастникахВОВ.Статус ЕСТЬ NULL
	|			ТОГДА ""3""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Категория3,
	|	ВЫБОР
	|		КОГДА вт_Данные.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФизЛицоСтруктурногоПодразделения,
	|	ВЫРАЗИТЬ(СУММА(вт_Данные.ВОСМСПодлежащийПеречислению) КАК ЧИСЛО(19, 2)) КАК ВОСМСПодлежащийПеречислению,
	|	вт_Данные.ФизЛицо КАК ФизЛицо,
	|	вт_Данные.ФизЛицо.ИдентификационныйКодЛичности КАК ИИН,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL
	|			ТОГДА вт_Данные.ФизЛицо.Наименование
	|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
	|				КОГДА ФИОФизЛиц.Имя <> """"
	|					ТОГДА "" "" + ФИОФизЛиц.Имя
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ФИОФизЛиц.Отчество <> """"
	|					ТОГДА "" "" + ФИОФизЛиц.Отчество
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК ФИОФизЛица,
	|	ВЫРАЗИТЬ(СУММА(вт_Данные.ЕПИсчисленный) КАК ЧИСЛО(19, 2)) КАК ЕПИсчисленный,
	|	ВЫРАЗИТЬ(СУММА(вт_Данные.ОПВПодлежащиеПеречислению) КАК ЧИСЛО(19, 2)) КАК ОПВПодлежащиеПеречислению,
	|	ВЫРАЗИТЬ(СУММА(вт_Данные.ООСМСПодлежащиеУплате) КАК ЧИСЛО(19, 2)) КАК ООСМСПодлежащиеУплате,
	|	ВЫРАЗИТЬ(СУММА(вт_Данные.ОПВРПодлежащиеПеречислению) КАК ЧИСЛО(19, 2)) КАК ОПВРПодлежащиеПеречислению,
	|	ВЫРАЗИТЬ(СУММА(вт_Данные.ЕППодлежащийПеречислению) КАК ЧИСЛО(19, 2)) КАК ЕППодлежащийперечислению,
	|	вт_Данные.КодСтроки КАК КодСтроки,
	|	ВЫБОР
	|	КОГДА вт_Данные.СтруктурнаяЕдиница ССЫЛКА Справочник.Организации
	|			И вт_Данные.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			И вт_Данные.СтруктурнаяЕдиница.ГоловнаяОрганизация = &парамНалогоплательщик
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ ВЫБОР
	|			КОГДА вт_Данные.СтруктурнаяЕдиница ССЫЛКА Справочник.ПодразделенияОрганизаций
	|					И вт_Данные.СтруктурнаяЕдиница.ЯвляетсяСтруктурнымПодразделением
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	КОНЕЦ КАК ЯвляетсяФилиаломСтруктуры
	|ПОМЕСТИТЬ ВТ_ИтоговыеДанные
	|ИЗ
	|	вт_Данные КАК вт_Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамПериодПо, ) КАК ФИОФизЛиц
	|		ПО вт_Данные.ФизЛицо = ФИОФизЛиц.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамПериодПо, Пенсионер) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|		ПО вт_Данные.ФизЛицо = СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(
	|				&парамПериодПо,
	|				ВЫБОР
	|					КОГДА СрокДействияСправки <> ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА СрокДействияСправки >= &парамПериодС
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК СведенияОбИнвалидностиФизлиц
	|		ПО вт_Данные.ФизЛицо = СведенияОбИнвалидностиФизлиц.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ.СрезПоследних(
	|				&парамПериодПо,
	|				Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.ЛицоПриравненноеКУчастникамВОВ)
	|					ИЛИ Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.ВетераныБоевыхДействийНаТерриторииДругихГосударств)) КАК СведенияОФизлицахУчастникахВОВ
	|		ПО вт_Данные.ФизЛицо = СведенияОФизлицахУчастникахВОВ.Физлицо
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_Данные.СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер, ЛОЖЬ)
	|			ТОГДА ""1""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)
	|			ТОГДА ""2""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.РодительИнвалидаСДетства)
	|			ТОГДА ""4""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ СведенияОФизлицахУчастникахВОВ.Статус ЕСТЬ NULL
	|			ТОГДА ""3""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА вт_Данные.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	вт_Данные.ФизЛицо,
	|	вт_Данные.ФизЛицо.ИдентификационныйКодЛичности,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL
	|			ТОГДА вт_Данные.ФизЛицо.Наименование
	|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР
	|				КОГДА ФИОФизЛиц.Имя <> """"
	|					ТОГДА "" "" + ФИОФизЛиц.Имя
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ФИОФизЛиц.Отчество <> """"
	|					ТОГДА "" "" + ФИОФизЛиц.Отчество
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ,
	|	вт_Данные.КодСтроки,
	|	ВЫБОР
	|	КОГДА вт_Данные.СтруктурнаяЕдиница ССЫЛКА Справочник.Организации
	|			И вт_Данные.СтруктурнаяЕдиница <> &парамНалогоплательщик
	|			И вт_Данные.СтруктурнаяЕдиница.ГоловнаяОрганизация = &парамНалогоплательщик
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ ВЫБОР
	|			КОГДА вт_Данные.СтруктурнаяЕдиница ССЫЛКА Справочник.ПодразделенияОрганизаций
	|					И вт_Данные.СтруктурнаяЕдиница.ЯвляетсяСтруктурнымПодразделением
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	КОНЕЦ
  	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить(); 
		
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК СтруктурнаяЕдиница,
	|	Организации.Ссылка КАК Владелец
	|ПОМЕСТИТЬ ВТ_СтруктурныеПодразделенияЕП
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В (&парамСписокСтруктурныхЕдиниц)
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка,
	|	ПодразделенияОрганизаций.Владелец
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Ссылка В (&парамСписокСтруктурныхЕдиниц)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНУ.Организация КАК Организация,
	|	УчетнаяПолитикаНУ.ПорядокОбложенияДоходовРаботников КАК ПорядокОбложенияДоходовРаботников,
	|	ВЫБОР
	|		КОГДА УчетнаяПолитикаНУ.ПорядокОбложенияДоходовРаботников = ЗНАЧЕНИЕ(Перечисление.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИНАЧЕ ВТ_СтруктурныеПодразделенияЕП.СтруктурнаяЕдиница
	|	КОНЕЦ КАК ОрганизацияЕП,
	|	ВТ_СтруктурныеПодразделенияЕП.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитикаЕППоСтруктурнымЕдиницам
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодПо, Организация В (&парамСписокСтруктурныхЕдиниц)) КАК УчетнаяПолитикаНУ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтруктурныеПодразделенияЕП КАК ВТ_СтруктурныеПодразделенияЕП
	|		ПО УчетнаяПолитикаНУ.Организация = ВТ_СтруктурныеПодразделенияЕП.Владелец
  	|ИНДЕКСИРОВАТЬ ПО
	|	УчетнаяПолитикаНУ.Организация
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТ_ДатыПериодовГода
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря  КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &парамПериодС И &парамПериодПо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	МАКСИМУМ(УчетнаяПолитикаНУ.Период) КАК ПериодСреза,
	|	УчетнаяПолитикаНУ.Организация КАК Организация
	|ПОМЕСТИТЬ УчетнаяПолитикаНУПериоды
	|ИЗ
	|	ВТ_ДатыПериодовГода КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНУ
	|		ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(УчетнаяПолитикаНУ.Период, МЕСЯЦ))
	|ГДЕ
	|	УчетнаяПолитикаНУ.Организация = &парамНалогоплательщик
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	УчетнаяПолитикаНУ.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период,
	|	УчетнаяПолитикаНУ.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНУПериоды.Период КАК Период,
	|	УчетнаяПолитикаНУ.НеПрименятьКорректировкуПрочихНалоговВзносовОтчислений КАК НеПрименятьКорректировкуСН,
    |   УчетнаяПолитикаНУ.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника КАК КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитикаПоМесяцам
	|ИЗ
	|	УчетнаяПолитикаНУПериоды КАК УчетнаяПолитикаНУПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНУ
	|		ПО (УчетнаяПолитикаНУПериоды.ПериодСреза = НАЧАЛОПЕРИОДА(УчетнаяПолитикаНУ.Период, МЕСЯЦ))
	|			И УчетнаяПолитикаНУПериоды.Организация = УчетнаяПолитикаНУ.Организация
	|;
	|
    |////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|ПОМЕСТИТЬ РасчетныеПоказателиПериоды
	|ИЗ
	|	ВТ_ДатыПериодовГода КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(РасчетныеПоказатели.Период, МЕСЯЦ))

	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетныеПоказателиПериоды.Период КАК Период,
	|	РасчетныеПоказатели.РазмерМРП КАК РазмерМРП
	|ПОМЕСТИТЬ ВТ_РасчетныеПоказателиПоМесяцам
	|ИЗ
	|	РасчетныеПоказателиПериоды КАК РасчетныеПоказателиПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО (РасчетныеПоказателиПериоды.ПериодСреза = НАЧАЛОПЕРИОДА(РасчетныеПоказатели.Период, МЕСЯЦ))
	|;
	|
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ
    |	Периоды.Период КАК Период,
    |	ФизическиеЛица.Ссылка КАК ФИО
	|ПОМЕСТИТЬ ВТ_Периоды
    |ИЗ
    |	ВТ_ДатыПериодовГода КАК Периоды
    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
    |		ПО (ИСТИНА)
    |ГДЕ
    |	ФизическиеЛица.ЭтоГруппа = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
    |	Период,
    |	ФИО
	|;
	|/////////////////////////////////////////////////
	|ВЫБРАТЬ
    |	Периоды.Период КАК Период,
    |	Периоды.ФИО КАК ФИО,
    |	МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСреза
	|ПОМЕСТИТЬ ВТ_ГражданствоФизЛицСрезПоследних 
    |	ИЗ
    |		ВТ_Периоды КАК Периоды
    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
    |			ПО (Периоды.Период >= НАЧАЛОПЕРИОДА(ГражданствоФизЛиц.Период, МЕСЯЦ))
    |				И Периоды.ФИО = ГражданствоФизЛиц.ФизЛицо
    |		
    |СГРУППИРОВАТЬ ПО
    |	Периоды.Период,
    |	Периоды.ФИО
	|ИНДЕКСИРОВАТЬ ПО
    |	ПериодСреза,
    |	ФИО
	|;
	|/////////////////////////////////////////////////////
	|ВЫБРАТЬ
    |	ГражданствоФизЛицСрезПоследних.Период КАК Период,
    |	ГражданствоФизЛицСрезПоследних.ФИО КАК ФИО,
	//|	ВЫБОР
	//|		КОГДА ГражданствоФизЛиц.Страна ЕСТЬ NULL 
	//|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	//|		ИНАЧЕ ГражданствоФизЛиц.Страна
	//|	КОНЕЦ КАК Страна,   
	|	ГражданствоФизЛиц.Страна КАК Страна,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ) 
	|			ТОГДА ГражданствоФизЛиц.Страна 
	|       ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
	|	КОНЕЦ КАК СтранаРезидентства,
	|	ГражданствоФизЛиц.НомерНалоговойРегистрацииВСтранеРезидентства,
	|	ГражданствоФизЛиц.НеЯвляетсяналоговымРезидентомРК
	|ПОМЕСТИТЬ ВТ_ИтогГражданство
    |	ИЗ
    |		ВТ_ГражданствоФизЛицСрезПоследних КАК ГражданствоФизЛицСрезПоследних
    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
    |			ПО ГражданствоФизЛицСрезПоследних.ПериодСреза = ГражданствоФизЛиц.Период
    |				И ГражданствоФизЛицСрезПоследних.ФИО = ГражданствоФизЛиц.ФизЛицо
	//|	ГДЕ
	//|		(НЕ ВЫБОР
	//|					КОГДА ГражданствоФизЛиц.Страна ЕСТЬ NULL 
	//|						ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	//|					ИНАЧЕ ГражданствоФизЛиц.Страна
	//|				КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
    |	
    |	ОБЪЕДИНИТЬ ВСЕ
    |	
    |	ВЫБРАТЬ
    |		Периоды.Период,
    |		Контрагенты.Ссылка,
    |		ВЫБОР
    |			КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
    |				ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
    |			ИНАЧЕ Контрагенты.СтранаРезидентства
    |		КОНЕЦ,
	|		ВЫБОР
    |			КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
    |				ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
    |			ИНАЧЕ Контрагенты.СтранаРезидентства
    |		КОНЕЦ,
	|		Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства,
	|		ВЫБОР КОГДА Подстрока(Контрагенты.КБЕ,1,1) = ""2"" Тогда Истина иначе Ложь КОНЕЦ
    |	ИЗ
    |		ВТ_ДатыПериодовГода КАК Периоды
    |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
    |			ПО (ИСТИНА)
    |	ГДЕ
    |		Контрагенты.ЭтоГруппа = ЛОЖЬ
	//|		И (НЕ ВЫБОР
	//|					КОГДА Контрагенты.СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
	//|						ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	//|					ИНАЧЕ Контрагенты.СтранаРезидентства
	//|				КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан))
	|;
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ИтогГражданство.Период КАК Период,
    |	ИтогГражданство.ФИО КАК ФИО,
    |	ИтогГражданство.Страна,
	|	ИтогГражданство.НомерНалоговойРегистрацииВСтранеРезидентства,	
	|	ИтогГражданство.НеЯвляетсяналоговымРезидентомРК,
	|	ИтогГражданство.СтранаРезидентства
    |ПОМЕСТИТЬ ВТ_Гражданство
    |ИЗ
    |	ВТ_ИтогГражданство КАК ИтогГражданство
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	Период,
    |	ФИО";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить(); 
		
	// Выберем прочую информацию, относящуюся к физлицам
	ТекстЗапроса = "
	|//////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТ_Гражданство.Период) КАК ПериодСреза,
	|	ВТ_Гражданство.ФИО КАК ФИО
	|ПОМЕСТИТЬ ТаблПериодСреза
	|	ИЗ
	|	ВТ_Гражданство КАК ВТ_Гражданство
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Гражданство.ФИО;
	|
	|//////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблПериодСреза.ПериодСреза КАК Период,
	|	ТаблПериодСреза.ФИО КАК ФизЛицо,
	|	ТаблГражданство.Страна,
	|	ТаблГражданство.СтранаРезидентства,
	|	ТаблГражданство.НомерНалоговойРегистрацииВСтранеРезидентства,
	|	ТаблГражданство.НеЯвляетсяНалоговымРезидентомРК,
	|	ВЫБОР 
	|       КОГДА ТаблГражданство.СтранаРезидентства = КлассификаторСтранМира.Ссылка 
	|           ТОГДА ЕСТЬNULL(КлассификаторСтранМира.КодАльфа2, """")
	|       ИНАЧЕ """"
	|   КОНЕЦ КАК КодСтраны,
	|	ВЫБОР 
	|       КОГДА ТаблГражданство.Страна = КлассификаторСтранМира.Ссылка 
	|           ТОГДА ЕСТЬNULL(КлассификаторСтранМира.КодАльфа2, """")
	|       ИНАЧЕ """"
	|   КОНЕЦ КАК КодСтраныГражданства
	|ПОМЕСТИТЬ ТаблНеГраждане
	|ИЗ
	|	ТаблПериодСреза КАК ТаблПериодСреза
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Гражданство КАК ТаблГражданство
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
	|			ПО ТаблГражданство.Страна = КлассификаторСтранМира.Ссылка
	|	ПО ТаблПериодСреза.ПериодСреза = ТаблГражданство.Период
	|	И ТаблПериодСреза.ФИО = ТаблГражданство.ФИО
	|;
	|	
	|////////////////////////////////////////////////////////////////////////////////
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИтоговыеДанные.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВТ_ИтоговыеДанные.НачисленныеДоходы КАК НачисленныеДоходы,
	|	ВТ_ИтоговыеДанные.ИПНПодлежащийУплате КАК ИПНПодлежащийУплате,
	|	ВТ_ИтоговыеДанные.СоциальныеОтчисления КАК СоциальныеОтчисления,
	|	ВТ_ИтоговыеДанные.Категория1 КАК Категория1,
	|	ВТ_ИтоговыеДанные.Категория2 КАК Категория2,
	|	ВТ_ИтоговыеДанные.Категория4 КАК Категория4,
	|	ВТ_ИтоговыеДанные.Категория3 КАК Категория3,
	|	ВТ_ИтоговыеДанные.ФизЛицоСтруктурногоПодразделения КАК ФизЛицоСтруктурногоПодразделения,
	|	ВТ_ИтоговыеДанные.ВОСМСПодлежащийПеречислению КАК ВОСМСПодлежащийПеречислению,
	|	ВТ_ИтоговыеДанные.ФизЛицо КАК ФизЛицо,
	|	ВТ_ИтоговыеДанные.ЕПИсчисленный КАК ЕПИсчисленный,
	|	ВТ_ИтоговыеДанные.ОПВПодлежащиеПеречислению КАК ОПВПодлежащиеПеречислению,
	|	ВТ_ИтоговыеДанные.ООСМСПодлежащиеУплате КАК ООСМСПодлежащиеУплате,
	|	ВТ_ИтоговыеДанные.ОПВРПодлежащиеПеречислению КАК ОПВРПодлежащиеПеречислению,
	|	ВТ_ИтоговыеДанные.ЕППодлежащийперечислению КАК ЕППодлежащийперечислению,
	|	ВТ_ИтоговыеДанные.ФИОФизЛица КАК ФИОФизЛица,
	|	ВТ_ИтоговыеДанные.ИИН КАК ИИН,
	|	ВТ_ИтоговыеДанные.КодСтроки КАК КодСтроки, 
	|	ТаблНеГраждане.КодСтраныГражданства КАК КодСтраныГражданства,
	|	ВТ_ИтоговыеДанные.ЯвляетсяФилиаломСтруктуры КАК ЯвляетсяФилиаломСтруктуры 
	|ИЗ
	|	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные  
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамПериодПо) КАК ФИОФизЛиц
	|		ПО (ВТ_ИтоговыеДанные.ФизЛицо = ФИОФизЛиц.ФизЛицо)
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблНеГраждане КАК ТаблНеГраждане  // выберем последнюю страну нерезидентства	
	|		ПО (ВТ_ИтоговыеДанные.ФизЛицо = ТаблНеГраждане.ФизЛицо)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&парамПериодПо) КАК ПаспортныеДанныеФизЛиц
	|		ПО (ВТ_ИтоговыеДанные.ФизЛицо = ПаспортныеДанныеФизЛиц.ФизЛицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ИтоговыеДанные.ФИОФизЛица,
	|	ВТ_ИтоговыеДанные.ФизЛицоСтруктурногоПодразделения
	|ИТОГИ
	|	СУММА(НачисленныеДоходы),
	|	СУММА(ИПНПодлежащийУплате),
	|	СУММА(СоциальныеОтчисления),
	|	МАКСИМУМ(Категория1),
	|	МАКСИМУМ(Категория2),
	|	МАКСИМУМ(Категория4),
	|	МАКСИМУМ(Категория3),
	|	СУММА(ВОСМСПодлежащийПеречислению),
	|	СУММА(ЕПИсчисленный),
	|	СУММА(ОПВПодлежащиеПеречислению),
	|	СУММА(ООСМСПодлежащиеУплате),
	|	СУММА(ОПВРПодлежащиеПеречислению),
	|	СУММА(ЕППодлежащийперечислению)
	|ПО 
	|	СтруктурнаяЕдиница,
	|	ФизЛицо,
	|	ФизЛицоСтруктурногоПодразделения";
		
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() и ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 200.06 за отчетный период отсутствуют...'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

&НаКлиенте
Процедура Форма200_06Расшифровка(ИмяЯчейки)
	
	КодФормыБезПрефикса = СтрЗаменить(КодФормы, "Форма", "");
	
	СтруктураПоФизЛицу = Новый Структура;
	// определим работника
	Если Найти(ИмяЯчейки,"__") > 0 Тогда		
		НомерЯчейки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "__")+ 2)); 
		
		ПолеТабличногоДокументаСтраница = ЭтотОбъект["Форма" + КодФормыБезПрефикса + "ПолеТабличногоДокументаСтраница1"];
		
		ОбластьРасшифровки = ПолеТабличногоДокументаСтраница.Области.Найти("Ф" + КодФормыБезПрефикса + "ФИО__" +  НомерЯчейки);		
		Если ОбластьРасшифровки <> Неопределено Тогда
			Если ЗначениеЗаполнено(ОбластьРасшифровки.Расшифровка) Тогда
				СтруктураПоФизЛицу.Вставить("ФизЛицо", ОбластьРасшифровки.Расшифровка);
				СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);					
			Иначе
				ПоказатьПредупреждение(,НСтр("ru = 'Для формирования расшифровки заполните физическое лицо в графе ""В"" на странице 1.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки не поддерживается."+Символы.ПС+"Расшифровку содержат ячейки формы, выделенные голубым цветом.'"));
		Возврат;
	КонецЕсли; 
	
	//Если Найти(Элементы.ПанельФорма200_06.ТекущаяСтраница.Имя, "Страница1") > 0 Тогда
	//	ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,,СтруктураПоФизЛицу,,,,);	
	//ИначеЕсли Найти(Элементы.ПанельФорма200_06.ТекущаяСтраница.Имя, "Страница2") > 0 ИЛИ Найти(Элементы.ПанельФорма200_06.ТекущаяСтраница.Имя, "Страница3") > 0 Тогда 
	//	ПоказатьРасшифровкуВВидеРегистраЗадолженностиОрганизацийПоЕП(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,,СтруктураПоФизЛицу);		
	//КонецЕсли;  
	
	Если Найти(Элементы["ПанельФорма" + КодФормыБезПрефикса].ТекущаяСтраница.Имя, "Страница1") > 0 Тогда
		ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,,СтруктураПоФизЛицу,,,,);	
	ИначеЕсли Найти(Элементы["ПанельФорма" + КодФормыБезПрефикса].ТекущаяСтраница.Имя, "Страница2") > 0 ИЛИ Найти(Элементы["ПанельФорма" + КодФормыБезПрефикса].ТекущаяСтраница.Имя, "Страница3") > 0 Тогда 
		ПоказатьРасшифровкуВВидеРегистраЗадолженностиОрганизацийПоЕП(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,,СтруктураПоФизЛицу);		
	КонецЕсли; 
			
КонецПроцедуры // Форма200_06Расшифровка()

&НаКлиенте
Процедура Форма200_06Расшифровкаобщая() 
	
	КодФормыБезПрефикса = СтрЗаменить(КодФормы, "Форма", "");
	
	СтруктураПоФизЛицу = Новый Структура;  
	
	Если ПолучитьЗначениеРеквизита(Налогоплательщик, "ЮрФизЛицо") = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда 
		
		СтруктураПоФизЛицу.Вставить("ФизЛицо", ПолучитьЗначениеРеквизита(Налогоплательщик, "ИндивидуальныйПредприниматель"));
		СтруктураПоФизЛицу.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.НеРавно);													
		
	КонецЕсли;
	
	//Если Найти(Элементы.ПанельФорма200_06.ТекущаяСтраница.Имя, "Страница1") > 0 Тогда
	//	ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,,СтруктураПоФизЛицу,,,,,Истина);	
	//ИначеЕсли Найти(Элементы.ПанельФорма200_06.ТекущаяСтраница.Имя, "Страница2") > 0 ИЛИ Найти(Элементы.ПанельФорма200_06.ТекущаяСтраница.Имя, "Страница3") > 0 Тогда 
	//	ПоказатьРасшифровкуВВидеРегистраЗадолженностиОрганизацийПоЕП(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);		
	//КонецЕсли; 
	
	Если Найти(Элементы["ПанельФорма" + КодФормыБезПрефикса].ТекущаяСтраница.Имя, "Страница1") > 0 Тогда
		ПоказатьРасшифровкуВВидеРегистраНУпоИПНиСН(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,,СтруктураПоФизЛицу,,,,,Истина);	
	ИначеЕсли Найти(Элементы["ПанельФорма" + КодФормыБезПрефикса].ТекущаяСтраница.Имя, "Страница2") > 0 ИЛИ Найти(Элементы["ПанельФорма" + КодФормыБезПрефикса].ТекущаяСтраница.Имя, "Страница3") > 0 Тогда 
		ПоказатьРасшифровкуВВидеРегистраЗадолженностиОрганизацийПоЕП(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);		
	КонецЕсли; 
	
КонецПроцедуры // Форма200_06Расшифровкаобщая()

 &НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНомерСтрокиПоЯчейке(ИмяЯчейки, ДлинаНаименованияДоСпецСимвола = 15)
	
	Возврат Сред(ИмяЯчейки, ДлинаНаименованияДоСпецСимвола, СтрДлина(ИмяЯчейки));
	
КонецФункции

&НаКлиенте
Процедура ПоказатьРасшифровкуВВидеРегистраЗадолженностиОрганизацийПоЕП(ДатаНачала, ДатаОкончания, СтруктурнаяЕдиницаДляОтбора = Неопределено, СтруктураФизЛицоДляОтбора = Неопределено, Режим = "БезДетализации")
	
  	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоМесяца(ДатаНачала));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецМесяца(ДатаОкончания));
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Налогоплательщик", 			  Налогоплательщик); 
		
	ВидОтчета = "СтруктураЗадолженностиОрганизацийПоЕП";
	             	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВидОтчета", ВидОтчета);
	
	СписокСтруктурныхЕдиниц = Новый СписокЗначений;
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиницаДляОтбора) Тогда
		СписокСтруктурныхЕдиниц = мСписокСтруктурныхЕдиниц;
	Иначе
		СписокСтруктурныхЕдиниц.Добавить(СтруктурнаяЕдиницаДляОтбора);
	КонецЕсли;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", СписокСтруктурныхЕдиниц);
	ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПредставлениеСпискаОрганизаций", ПредставлениеСпискаОрганизаций);
	
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Если СтруктураФизЛицоДляОтбора <> Неопределено Тогда
		Если ТипЗнч(СтруктураФизЛицоДляОтбора) = Тип("Структура") Тогда
			ФизЛицоДляОтбора = Неопределено;
			СтруктураФизЛицоДляОтбора.Свойство("ФизЛицо",ФизЛицоДляОтбора);
			Если ФизЛицоДляОтбора <> Неопределено Тогда
				ВидСравненияОтбор = СтруктураФизЛицоДляОтбора.ВидСравнения;
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ФизЛицо",  ФизЛицоДляОтбора, ВидСравненияОтбор);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	///ЕП Отбор по фил лицам
	МассивФизЛиц = ПолучитьМассивФизЛиц(КодФормы);
	
	СписокФизЛиц = Новый СписокЗначений;	
	СписокФизЛиц.ЗагрузитьЗначения(МассивФизЛиц); 
	
	Если СписокФизЛиц.Количество() > 0 Тогда	
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ФизЛицо",  СписокФизЛиц, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;

  	ГруппировкиРасшифровки = Новый Массив();
	
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "Налогоплательщик", НСтр("ru = 'Налогоплательщик'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "МесяцНалоговогоПериода", НСтр("ru = 'Месяц налог. периода'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "НалоговыйКомитет", НСтр("ru = 'Налоговый комитет'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "СтруктурнаяЕдиница", НСтр("ru = 'Структурная единица'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "ФизЛицо", НСтр("ru = 'Работник'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	
	Если НЕ Режим = "БезДетализации" Тогда
		ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "Регистратор", НСтр("ru = 'Документ движения (регистратор)'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы") ));
	КонецЕсли;   	
	
	
	ЗаполняемыеНастройки = Новый Структура("Группировка, Показатели, ДополнительныеПоля, ГруппировкиРасшифровки",
											Истина, Истина, Истина, ГруппировкиРасшифровки);  
											
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ЗаполняемыеНастройки",ЗаполняемыеНастройки);
	//ПараметрыФормы.Вставить("ВидОтчета",ВидОтчета);	
		
	ОткрытьФорму("Отчет.СтруктураЗадолженностиОрганизацийПоЕП.Форма.ФормаОтчета", ПараметрыФормы,, Истина);
			
КонецПроцедуры  

&НаСервере
Функция ПолучитьМассивФизЛиц(КодФормы)
	
	СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, КодФормы);
	
	ТаблицаСтрокГруппы = СтруктураФормы["Страница1"].Строки;
	
	МассивФизЛиц = Новый Массив;
	
	Если КодФормы = "Форма200_02" Тогда
		МассивФизЛиц = ТаблицаСтрокГруппы.ВыгрузитьКолонку("Ф200_02ФИОРезидента_Расшифровка");
	ИначеЕсли КодФормы = "Форма200_05" Тогда
		МассивФизЛиц = ТаблицаСтрокГруппы.ВыгрузитьКолонку("Ф200_05ФИО_Расшифровка");	
	ИначеЕсли Найти(КодФормы, "Форма200_06") > 0 Тогда 
		
		КодФормыБезПрефикса = СтрЗаменить(КодФормы, "Форма", "");
		МассивФизЛиц = ТаблицаСтрокГруппы.ВыгрузитьКолонку("Ф" + КодФормыБезПрефикса + "ФИО_Расшифровка");
				
	КонецЕсли;
			
	Возврат МассивФизЛиц;   
				
КонецФункции

&НаСервере
Процедура ДобавитьПриложениеНаСервере()
	
	Если СтрНайти(КодФормы, "Форма200_06") <> 0 Тогда
		КодИсходногоПриложения = "Форма200_06";
		КодИсходногоПриложенияПредставление = "200.06";
	Иначе
		Возврат;
	КонецЕсли;
	
	ДобавитьПриложениеБазовыеДанные(КодИсходногоПриложения, КодИсходногоПриложенияПредставление);
	
	ТаблицаДобавленныхПриложений_ = ЭтотОбъект.РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений");
	ПараметрыОтбора = Новый Структура("КодИсходнойФормы", КодИсходногоПриложения);
	ДобавленныеПриложения = ТаблицаДобавленныхПриложений_.Скопировать(ПараметрыОтбора);
	
	МассивПорядков = ДобавленныеПриложения.ВыгрузитьКолонку("Порядок");
	МаксимальныйПорядок = 0;
	Для Каждого Порядок Из МассивПорядков Цикл
		МаксимальныйПорядок = Макс(МаксимальныйПорядок, Порядок);
	КонецЦикла;
	
	ПостфиксПриложения = "_" +  МаксимальныйПорядок;
	
	ДобавитьПриложениеПоказателиПередачиДанных(КодИсходногоПриложения + ПостфиксПриложения);
	
	ДобавитьПриложениеРеквизитыЭлементыФормыПриложения(КодИсходногоПриложения + ПостфиксПриложения);
	
	ЗаполнитьПараметры(КодИсходногоПриложения + ПостфиксПриложения);
	
	Если СтрНайти(КодФормы, "Форма200_06") <> 0 Тогда
		
		ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, КодФормы);
		
		ДобавленныеПриложения200_06 = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений").Скопировать(Новый Структура("КодИсходнойФормы", "Форма200_06"));
		КоличествоДобавленных200_06 = ДобавленныеПриложения200_06.Количество();
		
		ИмяЯчейки = "КоличествоПриложений200_06";
		// Количество 200.06
		Значение200_06 = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "Приложение06");
		
		Если Значение200_06 = "Х" Тогда	
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки, КоличествоДобавленных200_06 + 1, Форма200ПолеТабличногоДокументаСтраница1);
		Иначе
			РегламентированнаяОтчетность.ПередатьЗначениеВТаблицуДанных(ТаблицаДанных, ИмяЯчейки, КоличествоДобавленных200_06, Форма200ПолеТабличногоДокументаСтраница1);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ДобавитьПриложениеБазовыеДанные(КодИсходногоПриложения, КодИсходногоПриложенияПредставление, ДополнительныеПараметрыПриложения = Неопределено)
	
	Если ДополнительныеПараметрыПриложения = Неопределено Тогда
		ДополнительныеПараметрыПриложения = Новый Структура;
	КонецЕсли;
	
	ТаблицаДобавленныхПриложений_ = ЭтотОбъект.РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений");
	
	// Добавление областей приложений во временный макет Показатели
	
	Макет = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("Показатели");
	МакетПоказателиПриложений = Новый ТабличныйДокумент;
	ИмяМакетаПриложения = СтрЗаменить(ЭтотОбъект.мВыбраннаяФорма, "Форма200", КодИсходногоПриложения);
	
	ПараметрыОтбора = Новый Структура("КодИсходнойФормы", КодИсходногоПриложения);
	ДобавленныеПриложения = ТаблицаДобавленныхПриложений_.Скопировать(ПараметрыОтбора);
	
	МассивПорядков = ДобавленныеПриложения.ВыгрузитьКолонку("Порядок");
	МаксимальныйПорядок = 0;
	Для Каждого Порядок Из МассивПорядков Цикл
		МаксимальныйПорядок = Макс(МаксимальныйПорядок, Порядок);
	КонецЦикла;
	КоличествоДобавленныхПриложений = МаксимальныйПорядок + 1;
	ДополнительныеПараметрыПриложения.Вставить("Порядок", КоличествоДобавленныхПриложений);
	
	ПостфиксПриложения = "_" + Строка(КоличествоДобавленныхПриложений);
	
	ИмяМакетаНовогоПриложения = СтрЗаменить(ИмяМакетаПриложения, КодИсходногоПриложения, КодИсходногоПриложения + ПостфиксПриложения);
	
	МакетПриложения = Макет.ПолучитьОбласть(ИмяМакетаПриложения);
	
	Область = МакетПриложения.Область(ИмяМакетаПриложения);
	Область.Имя = ИмяМакетаНовогоПриложения;
	МакетПриложения.Область(1, 7).Текст = КодИсходногоПриложения + ПостфиксПриложения; // Код формы		
	МакетПриложения.Область(1, 2).Текст = СтрЗаменить(
	МакетПриложения.Область(1, 2).Текст, КодИсходногоПриложенияПредставление, КодИсходногоПриложенияПредставление + "(" + КоличествоДобавленныхПриложений + ")");
	МакетПриложения.Область(1, 9).Текст = СтрЗаменить(
	МакетПриложения.Область(1, 9).Текст, КодИсходногоПриложенияПредставление, КодИсходногоПриложенияПредставление + "(" + КоличествоДобавленныхПриложений + ")");
	
	МакетПоказателиПриложений.Присоединить(МакетПриложения);
	
	// Добавление новых форм приложений в реквизиты формы СписокФормДерева, мСписокФормБезИерархии
	
	ДеревоСписокФормДерева = РеквизитФормыВЗначение("СписокФормДерева");
	СтрокиДереваФорм = ДеревоСписокФормДерева.Строки;
	
	ДеревоСписокФормБезИерархии = РеквизитФормыВЗначение("мСписокФормБезИерархии");
	СтрокиДереваСписокФормБезИерархии = ДеревоСписокФормБезИерархии.Строки;
	
	Для  НомерОбласти = 0 По  МакетПоказателиПриложений.Области.Количество()-1 Цикл
		
		Область = МакетПоказателиПриложений.Области[НомерОбласти];
		
		КодФормы_           = СокрП(МакетПоказателиПриложений.Область(Область.Верх, 7).Текст);
		КодИсходнойФормы    = Лев(КодФормы_, 11);
		
		ИмяФормыXML      	= СокрП(МакетПоказателиПриложений.Область(Область.Верх,  1).Текст) + ПостфиксПриложения;
		ИмяСтраницы      	= СокрП(МакетПоказателиПриложений.Область(Область.Верх,  2).Текст);
		ПоказатьСтраницу 	= Число(СокрП(МакетПоказателиПриложений.Область(Область.Верх,  3).Текст));
		Выгружать        	= Число(СокрП(МакетПоказателиПриложений.Область(Область.Верх,  4).Текст));
		Признакосновной  	= Число(СокрП(МакетПоказателиПриложений.Область(Область.Верх,  5).Текст));
		Многострочность  	= Число(СокрП(МакетПоказателиПриложений.Область(Область.Верх,  6).Текст));
		ФормаРодитель    	= СокрП(МакетПоказателиПриложений.Область(Область.Верх,  8).Текст);  
		ЗаголовокФормы      = СокрП(МакетПоказателиПриложений.Область(Область.Верх,  9).Текст);  
		КоличествоНаЛисте   = Число(СокрП(МакетПоказателиПриложений.Область(Область.Верх, 10).Текст));  		
		ОриентацияСтр       = СокрП(МакетПоказателиПриложений.Область(Область.Верх, 11).Текст);  
		ИспользуетсяМакет   = СокрП(МакетПоказателиПриложений.Область(Область.Верх, 13).Текст);  
		
		ИсходнаяФорма       = СтрокиДереваФорм.Найти(КодИсходнойФормы, "КодФормы", Истина);
		
		Если ИсходнаяФорма = Неопределено Тогда
			Продолжить;
		Иначе
			
			Если ИсходнаяФорма.Родитель <> Неопределено Тогда
				СтрокиДерева = ИсходнаяФорма.Родитель.Строки;
			Иначе
				СтрокиДерева = СтрокиДереваФорм;
			КонецЕсли;
			
			НоваяФорма = СтрокиДерева.Вставить(СтрокиДерева.Индекс(ИсходнаяФорма) + Число(Сред(КодФормы_, 13)));
			НоваяФорма.ИмяФормы            = ИмяФормыXML;
			НоваяФорма.КодФормы            = КодФормы_;
			НоваяФорма.Страницы            = ИмяСтраницы;
			НоваяФорма.Многострочность     = Многострочность;
			НоваяФорма.Выгружать           = Выгружать;
			НоваяФорма.Признакосновной     = ПризнакОсновной;
			НоваяФорма.ПоказатьСтраницу    = ПоказатьСтраницу;	
			НоваяФорма.ФормаРодитель       = ФормаРодитель;	
			НоваяФорма.ЗаголовокФормы      = ЗаголовокФормы;  
			НоваяФорма.АвтополучениеИтогов = 1;           
			НоваяФорма.АвтоЗаполнение      = Истина;           
			НоваяФорма.КоличествоНаЛисте   = КоличествоНаЛисте;           
			НоваяФорма.ОриентацияСтр       = ОриентацияСтр;          
			НоваяФорма.ИспользуетсяМакет 	= ?(ВРЕГ(ИспользуетсяМакет) = "ИСТИНА", Истина, Ложь);
			НоваяФорма.ВыводНаПечать       = Истина;
			
		КонецЕсли;
		
		ИсходнаяФормаБезИерархии = СтрокиДереваСписокФормБезИерархии.Найти(КодИсходнойФормы, "КодФормы", Истина);
		
		Если ИсходнаяФормаБезИерархии <> Неопределено Тогда
			
			Если ИсходнаяФормаБезИерархии.Родитель <> Неопределено Тогда
				СтрокиДереваБезИерархии = ИсходнаяФормаБезИерархии.Родитель.Строки;
			Иначе
				СтрокиДереваБезИерархии = СтрокиДереваСписокФормБезИерархии;
			КонецЕсли;
			
			НоваяФорма = СтрокиДереваБезИерархии.Вставить(СтрокиДереваБезИерархии.Индекс(ИсходнаяФормаБезИерархии) + Число(Сред(КодФормы_, 13)));
			
		Иначе
			
			НоваяФорма = СтрокиДереваСписокФормБезИерархии.Добавить();
			
		КонецЕсли;
		
		НоваяФорма.КодФормы            = КодФормы_;
		НоваяФорма.ПоказатьСтраницу    = ПоказатьСтраницу;
		НоваяФорма.Выгружать           = Выгружать;
		НоваяФорма.АвтополучениеИтогов = 1; 
		НоваяФорма.АвтоЗаполнение      = 1; 
		НоваяФорма.Страницы            = ИмяСтраницы;
		НоваяФорма.ИмяФормы            = ИмяФормыXML;
		НоваяФорма.Многострочность     = Многострочность <> 0;
		НоваяФорма.КоличествоНаЛисте   = КоличествоНаЛисте;
		НоваяФорма.ОриентацияСтр       = ОриентацияСтр; 
		НоваяФорма.ПризнакОсновной     = ПризнакОсновной <> 0;
		НоваяФорма.ЗаголовокФормы      = ЗаголовокФормы;
		НоваяФорма.ВсегоСтраниц        = 1;  		
		
		ДобавленноеПриложение = ТаблицаДобавленныхПриложений_.Добавить();
		ДобавленноеПриложение.КодФормы = КодФормы_;
		ДобавленноеПриложение.КодИсходнойФормы  = КодИсходнойФормы;
		ДобавленноеПриложение.НаименованиеФормы = ИмяСтраницы;
		
		ЗаполнитьЗначенияСвойств(ДобавленноеПриложение, ДополнительныеПараметрыПриложения);   // СтруктурнаяЕдиница
		
	КонецЦикла;  	
	
	ТаблицаДобавленныхПриложений_.Сортировать("КодФормы, Порядок");
	СтрокиДереваСписокФормБезИерархии.Сортировать("КодФормы", Истина);
	СтрокиДереваФорм.Сортировать("КодФормы", Истина);
	
	ЗначениеВРеквизитФормы(ТаблицаДобавленныхПриложений_, "ТаблицаДобавленныхПриложений");
	ЗначениеВРеквизитФормы(ДеревоСписокФормБезИерархии  , "мСписокФормБезИерархии");
	ЗначениеВРеквизитФормы(ДеревоСписокФормДерева       , "СписокФормДерева");
	
КонецПроцедуры   

&НаСервере
Процедура ДобавитьПриложениеПоказателиПередачиДанных(КодФормыПриложения)
	
	ТаблицаДобавленныхПриложений_ = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений");
	ДобавленноеПриложение         = ТаблицаДобавленныхПриложений_.Найти(КодФормыПриложения, "КодФормы");
	
	Если ДобавленноеПриложение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодИсходнойФормы = ДобавленноеПриложение.КодИсходнойФормы;
	
	МакетПередачиДанных = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("ПередачаДанных");
	ТаблицаПоказателей  = РеквизитФормыВЗначение("мТаблицаПоказателейДляПередачиДанных");
	
	ИмяОбласти = СтрЗаменить(мВыбраннаяФорма, "Форма200", КодИсходнойФормы);
	Область    = МакетПередачиДанных.Области.Найти(ИмяОбласти);
	
	КодИсходнойФормыБезПрефикса   = Сред(КодИсходнойФормы, 6);
	КодФормыПриложенияБезПрефикса = Сред(КодФормыПриложения, 6);
	
	Если Область = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Ном = Область.Верх По Область.Низ Цикл
		// перебираем строки области
		ОбластьИсточник    	= СокрП(МакетПередачиДанных.Область(Ном, 2).Текст);
		ФормаПриемник		= СокрП(МакетПередачиДанных.Область(Ном, 3).Текст);
		ОбластьПриемник    	= СокрП(МакетПередачиДанных.Область(Ном, 4).Текст);
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		НоваяСтрока.КодФормыИсточник    = ДобавленноеПриложение.КодФормы;
		НоваяСтрока.ИмяОбластиИсточник  = СтрЗаменить(ОбластьИсточник, КодИсходнойФормыБезПрефикса, КодФормыПриложенияБезПрефикса);  // ОбластьИсточник;
		НоваяСтрока.КодФормыПриемник    = ФормаПриемник;
		НоваяСтрока.ИмяОбластиПриемник  = ОбластьПриемник;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаПоказателей, "мТаблицаПоказателейДляПередачиДанных");
	
КонецПроцедуры 

&НаСервере
Процедура ДобавитьПриложениеРеквизитыЭлементыФормыПриложения(КодФормыПриложения)
	
	ТаблицаДобавленныхПриложений_ = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений");
	ДобавленноеПриложение         = ТаблицаДобавленныхПриложений_.Найти(КодФормыПриложения, "КодФормы");
	
	Если ДобавленноеПриложение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодИсходнойФормы = ДобавленноеПриложение.КодИсходнойФормы;
	
	СвойстваПриложения = Неопределено;
	СтруктураРеквизитовФормы.СвойстваДобавляемыхПриложений.Свойство(КодИсходнойФормы, СвойстваПриложения);
	
	Если СвойстваПриложения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПостфиксПриложения = СтрЗаменить(КодФормыПриложения, КодИсходнойФормы, "");
	
	МассивРеквизитовФормы       = ПолучитьРеквизиты();
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	Для Каждого ИсходныйРеквизитИмя Из СвойстваПриложения.РеквизитыФормы Цикл
		
		ИсходныйРеквизит = ПолучитьРеквизитФормы(ИсходныйРеквизитИмя, МассивРеквизитовФормы);
		Если ИсходныйРеквизит = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйРеквизитИмя = СтрЗаменить(ИсходныйРеквизитИмя, КодИсходнойФормы, КодФормыПриложения);
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НовыйРеквизитИмя, ИсходныйРеквизит.ТипЗначения,, ИсходныйРеквизит.СохраняемыеДанные));
		
		Если ДобавленноеПриложение.ДобавленныеРеквизиты.НайтиПоЗначению(НовыйРеквизитИмя) = Неопределено Тогда
			ДобавленноеПриложение.ДобавленныеРеквизиты.Добавить(НовыйРеквизитИмя);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
		
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		
		МассивРеквизитовФормы = ПолучитьРеквизиты();
		
		ИсходнаяСтраницаПриложения = Элементы[СвойстваПриложения.ИсходнаяСтраница];
		ВладелецПриложения = ?(ЗначениеЗаполнено(СвойстваПриложения.ГруппаФормыВладелец), Элементы[СвойстваПриложения.ГруппаФормыВладелец], ЭтотОбъект);
		
		НоваяСтраницаПриложенияИмя = СтрЗаменить(ИсходнаяСтраницаПриложения.Имя, КодИсходнойФормы, КодФормыПриложения);
		НоваяСтраницаПриложения    = Элементы.Добавить(НоваяСтраницаПриложенияИмя, ТипЗнч(ИсходнаяСтраницаПриложения), ВладелецПриложения);
		ЗаполнитьЗначенияСвойств(НоваяСтраницаПриложения, ИсходнаяСтраницаПриложения,, "Имя, ПутьКДаннымЗаголовка");
		Для Каждого ИсходныйЭлемент Из ИсходнаяСтраницаПриложения.ПодчиненныеЭлементы Цикл
			ДобавитьПодчиненныйЭлемент(ИсходныйЭлемент, ПостфиксПриложения, НоваяСтраницаПриложения, СвойстваПриложения.РеквизитыФормы, МассивРеквизитовФормы, КодИсходнойФормы, КодФормыПриложения);
		КонецЦикла;
		
		ДобавленноеПриложение.ГруппаФормыПриложения = НоваяСтраницаПриложенияИмя;
		
	КонецЕсли;
	
	МассивРеквизитовФормы = ЭтотОбъект.ПолучитьРеквизиты();
	ДобавленныеРеквизиты  = ДобавленноеПриложение.ДобавленныеРеквизиты.ВыгрузитьЗначения();
	
	ДеревоСписокФормБезИерархии = РеквизитФормыВЗначение("мСписокФормБезИерархии");
	Форма = ДеревоСписокФормБезИерархии.Строки.Найти(КодФормыПриложения, "КодФормы", Истина);
	
	Если Форма <> Неопределено Тогда
		                                                                                                                  
		КодИсходнойФормыБезПрефикса = Сред(КодИсходнойФормы  , 6);
		КодФормыБезПрефикса         = Сред(КодФормыПриложения, 6);
		
		Если Форма.Многострочность Тогда
			
			ДеревоСтруктураМногострочныхРазделов = РеквизитФормыВЗначение("мСтруктураМногострочныхРазделов");
			
			Макет = мМакет.ПолучитьОбласть(КодИсходнойФормы);
			
			Для Каждого ТекОбласть Из Макет.Области Цикл
				Если СтрНайти(ТекОбласть.Имя, КодИсходнойФормыБезПрефикса) <> 0 Тогда
					ТекОбласть.Имя = СтрЗаменить(ТекОбласть.Имя, КодИсходнойФормыБезПрефикса, КодФормыБезПрефикса); 
				КонецЕсли;
			КонецЦикла;
			
			НачальнаяСтрока = ЭтотОбъект.мМакет.ВысотаТаблицы + 1;
			ОбластьПриемник = ЭтотОбъект.мМакет.Область(НачальнаяСтрока, 1, НачальнаяСтрока + Макет.ВысотаТаблицы, Макет.ШиринаТаблицы);
			ЭтотОбъект.мМакет.ВставитьОбласть(Макет.Область(КодФормыПриложения), ОбластьПриемник);		
			
			Для Каждого ИсходнаяОбласть Из Макет.Области Цикл
				ТекОбласть = ЭтотОбъект.мМакет.Области.Найти(ИсходнаяОбласть.Имя);

				Если ТекОбласть <> Неопределено Тогда
					Если ИсходнаяОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр Тогда
						ЗаполнитьЗначенияСвойств(ТекОбласть, ИсходнаяОбласть, "Параметр,Заполнение,ПараметрРасшифровки,ВысотаСтроки,ШиринаКолонки,АвтоВысотаСтроки,Верх,Низ");	
					КонецЕсли;
					
					СмещениеВерх = ТекОбласть.Верх - ИсходнаяОбласть.Верх;
					СмещениеНиз  = ТекОбласть.Низ  - ИсходнаяОбласть.Низ; 
					
					Если СмещениеВерх = СмещениеНиз Тогда
						НомерСтрокиВерх = ИсходнаяОбласть.Верх;
						НомерСтрокиНиз  = ИсходнаяОбласть.Низ;  
						
						Пока НомерСтрокиВерх <> НомерСтрокиНиз Цикл
							ТекОбластьСтрока = ЭтотОбъект.мМакет.Область(НомерСтрокиВерх + СмещениеВерх,, НомерСтрокиВерх + СмещениеВерх);
							ИсхОбластьСтрока = Макет.Область(НомерСтрокиВерх,, НомерСтрокиВерх);
							ТекОбластьСтрока.ВысотаСтроки = ИсхОбластьСтрока.ВысотаСтроки; 
							
							НомерСтрокиВерх = НомерСтрокиВерх + 1;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		
			Результат = РегламентированнаяОтчетность.СформироватьСтруктуруМногострочнойФормы(КодФормыПриложения, ЭтаФорма, мМакет, ДеревоСтруктураМногострочныхРазделов);
			
			Если Результат = Неопределено Тогда
				Сообщить("Для формы " + КодФормыПриложения + " не сформирована структура хранения данных");
			Иначе
				СтрокиСтруктурыМнострочнойФормы = ДеревоСтруктураМногострочныхРазделов.Строки.НайтиСтроки(Новый Структура("КодФормы", КодФормыПриложения), Истина);
				Для Каждого СтрокаСтруктурыМногострочнойФормы Из СтрокиСтруктурыМнострочнойФормы Цикл
					ИмяРеквизитаТаблицыСтрокГруппы = СтрокаСтруктурыМногострочнойФормы.ИмяРеквизитаТаблицыСтрокГруппы;
					Если ИмяРеквизитаТаблицыСтрокГруппы <> ""
						И ДобавленныеРеквизиты.Найти(ИмяРеквизитаТаблицыСтрокГруппы) = Неопределено Тогда
						ДобавленноеПриложение.ДобавленныеРеквизиты.Добавить(ИмяРеквизитаТаблицыСтрокГруппы);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ЗначениеВРеквизитФормы(ДеревоСтруктураМногострочныхРазделов, "мСтруктураМногострочныхРазделов");
					
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТаблицаДобавленныхПриложений_, "ТаблицаДобавленныхПриложений");
	ЗначениеВРеквизитФормы(ДеревоСписокФормБезИерархии, "мСписокФормБезИерархии");
	
КонецПроцедуры    

&НаСервере
Функция ПолучитьРеквизитФормы(ИмяРеквизита, МассивРеквизитов)
	
	Для Каждого ТекущийРеквизит Из МассивРеквизитов Цикл
		Если ТекущийРеквизит.Имя = ИмяРеквизита Тогда
			Возврат ТекущийРеквизит;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции   

&НаСервере
Процедура ДобавитьПодчиненныйЭлемент(ИсходныйЭлемент, НомерДубля, НовыйВладелец, ДобавляемыеРеквизиты, РеквизитыФормы, КодИсходнойФормы, КодНовойФормы)
	
	НовыйЭлементИмя = СтрЗаменить(ИсходныйЭлемент.Имя, КодИсходнойФормы, КодНовойФормы);
	НовыйЭлемент = Элементы.Добавить(НовыйЭлементИмя, ТипЗнч(ИсходныйЭлемент), НовыйВладелец);
	
	Если ТипЗнч(НовыйЭлемент) = Тип("ГруппаФормы") Тогда
		НовыйЭлемент.Вид = ИсходныйЭлемент.Вид;
		ИсключаяСвойства = "Имя";
		Если ИсходныйЭлемент.Вид = ВидГруппыФормы.Страницы Тогда
			ИсключаяСвойства = ИсключаяСвойства + ", ТекущаяСтраница";
		КонецЕсли;
		Если ИсходныйЭлемент.Вид = ВидГруппыФормы.Страница Тогда
			ИсключаяСвойства = ИсключаяСвойства + ", ПутьКДаннымЗаголовка";
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ИсходныйЭлемент,, ИсключаяСвойства);
		Для Каждого ПодчиненныйИсходныйЭлемент Из ИсходныйЭлемент.ПодчиненныеЭлементы Цикл
			ДобавитьПодчиненныйЭлемент(ПодчиненныйИсходныйЭлемент, НомерДубля, НовыйЭлемент, ДобавляемыеРеквизиты, РеквизитыФормы, КодИсходнойФормы, КодНовойФормы);
		КонецЦикла;
	ИначеЕсли ТипЗнч(НовыйЭлемент) = Тип("ТаблицаФормы") ИЛИ ТипЗнч(НовыйЭлемент) = Тип("ПолеФормы") Тогда
		ИсходныйПутьКДанным = ИсходныйЭлемент.ПутьКДанным;
		НовыйПутьКДанным = СтрЗаменить(ИсходныйПутьКДанным, КодИсходнойФормы, КодНовойФормы);
		Если ДобавляемыеРеквизиты.Найти(ИсходныйПутьКДанным) <> Неопределено
			И ПолучитьРеквизитФормы(НовыйПутьКДанным, РеквизитыФормы) <> Неопределено Тогда
			НовыйЭлемент.ПутьКДанным = НовыйПутьКДанным;
		КонецЕсли;
		ДействиеВыбор = ИсходныйЭлемент.ПолучитьДействие("Выбор");
		Если ДействиеВыбор <> "" Тогда
			НовыйЭлемент.УстановитьДействие("Выбор", ДействиеВыбор);
		КонецЕсли;
		ДействиеПриИзмененииСодержимогоОбласти = ИсходныйЭлемент.ПолучитьДействие("ПриИзмененииСодержимогоОбласти");
		Если ДействиеПриИзмененииСодержимогоОбласти <> "" Тогда
			НовыйЭлемент.УстановитьДействие("ПриИзмененииСодержимогоОбласти", ДействиеПриИзмененииСодержимогоОбласти);
		КонецЕсли;
		НовыйЭлемент.ПоложениеЗаголовка =  ПоложениеЗаголовкаЭлементаФормы.Нет;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьОбъектыДобавленныхПриложений()

	мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если НЕ ЗначениеЗаполнено(мСохраненныйДок) Тогда
		Возврат;
	КонецЕсли;
	
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();
	СтруктураДополнительныхРеквизитовФормы = СписокСохранения.СтруктураДополнительныхРеквизитовФормы;
	
	мТаблицаДобавленныхПриложений = Неопределено;
	СтруктураДополнительныхРеквизитовФормы.Свойство("ТаблицаДобавленныхПриложений", мТаблицаДобавленныхПриложений);
	Если мТаблицаДобавленныхПриложений = Неопределено Тогда
		Возврат;
	Иначе
		ЗначениеВРеквизитФормы(мТаблицаДобавленныхПриложений, "ТаблицаДобавленныхПриложений");
		Если ТаблицаДобавленныхПриложений.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ЗначениеВРеквизитФормы(СтруктураДополнительныхРеквизитовФормы.мСписокФормБезИерархии, "мСписокФормБезИерархии");
	КонецЕсли;
	
	Для Каждого ДобавленноеПриложение Из ТаблицаДобавленныхПриложений Цикл

		ДобавитьПриложениеПоказателиПередачиДанных(ДобавленноеПриложение.КодФормы);
		
		ДобавитьПриложениеРеквизитыЭлементыФормыПриложения(ДобавленноеПриложение.КодФормы);
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры   

&НаКлиенте
Процедура УдалитьПриложениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьПриложениеНаСервере(ДополнительныеПараметры.ИндексПриложения);
	
КонецПроцедуры   

&НаСервере
Процедура УдалитьПриложениеНаСервере(ИндексПриложения)
	
	ТаблицаДобавленныхПриложений_ = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений");
	СтрокаПриложения = ТаблицаДобавленныхПриложений_.Получить(ИндексПриложения);
	
	КодФормы = СтрокаПриложения.КодИсходнойФормы;
	Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущаяСтрока - 1;
	
	ДеревоСписокФормДерева = ЭтотОбъект.РеквизитФормыВЗначение("СписокФормДерева");
	СтрокиДереваФорм = ДеревоСписокФормДерева.Строки;
	УдаляемаяСтрока  = СтрокиДереваФорм.Найти(СтрокаПриложения.КодФормы, "КодФормы", Истина);
	Если УдаляемаяСтрока <> Неопределено Тогда
		Если УдаляемаяСтрока.Родитель <> Неопределено Тогда
			СтрокиДереваФорм = УдаляемаяСтрока.Родитель.Строки;
		КонецЕсли;
		СтрокиДереваФорм.Удалить(УдаляемаяСтрока);
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДеревоСписокФормДерева, "СписокФормДерева");
	
	ДеревоСписокФормБезИерархии = ЭтотОбъект.РеквизитФормыВЗначение("мСписокФормБезИерархии");
	СтрокиДереваФормБезИерархии = ДеревоСписокФормБезИерархии.Строки;
	УдаляемаяСтрока  = СтрокиДереваФормБезИерархии.Найти(СтрокаПриложения.КодФормы, "КодФормы", Истина);
	Если УдаляемаяСтрока <> Неопределено Тогда
		Если УдаляемаяСтрока.Родитель <> Неопределено Тогда
			СтрокиДереваФормБезИерархии = УдаляемаяСтрока.Родитель.Строки;
		КонецЕсли;
		СтрокиДереваФормБезИерархии.Удалить(УдаляемаяСтрока);
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДеревоСписокФормБезИерархии, "мСписокФормБезИерархии");
	
	ДеревоСтруктураМногострочныхРазделов = ЭтотОбъект.РеквизитФормыВЗначение("мСтруктураМногострочныхРазделов");
	СтрокиДереваСтруктураМногострочныхРазделов = ДеревоСтруктураМногострочныхРазделов.Строки;
	УдаляемаяСтрока = СтрокиДереваСтруктураМногострочныхРазделов.Найти(СтрокаПриложения.КодФормы, "КодФормы");
	Если УдаляемаяСтрока <> Неопределено Тогда
		СтрокиДереваСтруктураМногострочныхРазделов.Удалить(УдаляемаяСтрока);
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДеревоСтруктураМногострочныхРазделов, "мСтруктураМногострочныхРазделов");
	
	УдаляемаяОбласть = мМакет.Области.Найти(СтрокаПриложения.КодФормы);
	Если УдаляемаяОбласть <> Неопределено Тогда
		мМакет.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
	УдаляемаяГруппаПриложения = Элементы.Найти(СтрокаПриложения.ГруппаФормыПриложения);
	Элементы.Удалить(УдаляемаяГруппаПриложения);
	
	МассивУдаляемыхРеквизитов = СтрокаПриложения.ДобавленныеРеквизиты.ВыгрузитьЗначения();
	Если МассивУдаляемыхРеквизитов.Количество() <> 0 Тогда
		ИзменитьРеквизиты( , МассивУдаляемыхРеквизитов);
	КонецЕсли;
	
	ТаблицаПоказателейДляПередачиДанных = ЭтотОбъект.РеквизитФормыВЗначение("мТаблицаПоказателейДляПередачиДанных");
	УдаляемыеСтроки = ТаблицаПоказателейДляПередачиДанных.НайтиСтроки(Новый Структура("КодФормыИсточник", СтрокаПриложения.КодФормы));
	Индекс = УдаляемыеСтроки.Количество() - 1;
	Пока Индекс >= 0 Цикл
		ТаблицаПоказателейДляПередачиДанных.Удалить(УдаляемыеСтроки[Индекс]);
		Индекс = Индекс -1;
	КонецЦикла;
	ЗначениеВРеквизитФормы(ТаблицаПоказателейДляПередачиДанных, "мТаблицаПоказателейДляПередачиДанных");
	
	ТаблицаДобавленныхПриложений_.Удалить(СтрокаПриложения);
	ЗначениеВРеквизитФормы(ТаблицаДобавленныхПриложений_, "ТаблицаДобавленныхПриложений");
		
КонецПроцедуры

&НаСервере
Функция ДобавленныеПриложенияВыгрузитьВXMLНаСервере(АдресВременногоХранилища)
	
	Для Каждого СтрокаПриложения Из ТаблицаДобавленныхПриложений Цикл
		ДобавитьПриложениеМакетВыгрузкаВXML(СтрокаПриложения.КодФормы, СтрокаПриложения.КодИсходнойФормы);
	КонецЦикла;
	
	Если мВыгрузкаВXMLДобавленныеПриложения.ВысотаТаблицы = 0 Тогда
		Возврат ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(АдресВременногоХранилища));
	КонецЕсли;
	
	АдресДобавленных = ДобавленныеПриложенияСформироватьXML();
	Если ЭтоАдресВременногоХранилища(АдресДобавленных) Тогда
		
		ДвоичныеДанныеДобавленные = ПолучитьИзВременногоХранилища(АдресДобавленных);
		
		ТекстДокДобавленные = Новый ТекстовыйДокумент;
		ТекстДокДобавленные.Прочитать(ДвоичныеДанныеДобавленные.ОткрытьПотокДляЧтения(), "UTF-8");
		ТекстДобавленные = ТекстДокДобавленные.ПолучитьТекст();
		ТекстДокДобавленные.УдалитьСтроку(ТекстДокДобавленные.КоличествоСтрок());  // </fno>
		ТекстДокДобавленные.УдалитьСтроку(1);  // <fno>
		ТекстДобавленные = ТекстДокДобавленные.ПолучитьТекст();
		
		ДвоичныеДанныеОсновные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		
		ТекстДокОсновные = Новый ТекстовыйДокумент;
		ТекстДокОсновные.Прочитать(ДвоичныеДанныеОсновные.ОткрытьПотокДляЧтения(), "UTF-8");
		ТекстДокОсновные.ВставитьСтроку(ТекстДокОсновные.КоличествоСтрок(), ТекстДобавленные);		
		ТекстОсновные = ТекстДокОсновные.ПолучитьТекст();
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("tmp");
		ВыбФайл = Новый Файл(ИмяВременногоФайла);
		ТекстДокОсновные.Записать(ВыбФайл.Путь + ВыбФайл.ИмяБезРасширения + ВыбФайл.Расширение, "UTF-8");
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла));
		
		УдалитьФайлы(ИмяВременногоФайла);
		
		Возврат АдресХранилища;
		
	Иначе
		Возврат ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(АдресВременногоХранилища));
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ДобавитьПриложениеМакетВыгрузкаВXML(КодФормыПриложения, КодИсходнойФормы)
	
	Если мВыгрузкаВXMLДобавленныеПриложения.Области.Найти(КодФормыПриложения) <> Неопределено Тогда
		// Область уже была добавлена ранее
		Возврат;
	КонецЕсли;
	
	КодИсходнойФормыБезПрефикса   = Сред(КодИсходнойФормы, 6);
	//КодИсходнойФормыБезПрефикса2  = СтрЗаменить(КодИсходнойФормыБезПрефикса, "_", "");
	КодИсходнойФормыБезПрефикса2  = КодИсходнойФормыБезПрефикса;
	КодФормыПриложенияБезПрефикса = Сред(КодФормыПриложения, 6);
	
	ПостфиксПриложения = СтрЗаменить(КодФормыПриложенияБезПрефикса, КодИсходнойФормыБезПрефикса, "");
	
	ОтчетОбъект_ = РеквизитФормыВЗначение("ОтчетОбъект");
	МакетВыгрузкаВXMLОсновной = ОтчетОбъект_.ПолучитьМакет("ВыгрузкаВXML");
	
	Префикс = Прав(мВыбраннаяФорма, 7);
	
	ОбластьВыгрузкиОсновная = МакетВыгрузкаВXMLОсновной.Область("Выгрузка" + Префикс);
	
	Если ОбластьВыгрузкиОсновная = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьПриложения = Новый ТабличныйДокумент;
	
	Для Ном = ОбластьВыгрузкиОсновная.Верх По ОбластьВыгрузкиОсновная.Низ Цикл
		
		ИмяФормыВыгрузки = СокрЛП(МакетВыгрузкаВXMLОсновной.Область(Ном, 1).Текст);
		
		Если СтрНайти(ИмяФормыВыгрузки, "form_" + КодИсходнойФормыБезПрефикса) <> 0 Тогда
			
			НачальнаяСтрока = ОбластьПриложения.ВысотаТаблицы + 1;
			ОбластьПриемник = ОбластьПриложения.Область(НачальнаяСтрока, 1, НачальнаяСтрока, 9);
			ОбластьПриложения.ВставитьОбласть(МакетВыгрузкаВXMLОсновной.Область(Ном, 1, Ном, 9), ОбластьПриемник);
			
			ИмяПоля = ОбластьПриложения.Область(НачальнаяСтрока, 4).Текст;
			Если СтрНайти(ИмяПоля, КодИсходнойФормыБезПрефикса) <> 0 Тогда
				ОбластьПриложения.Область(НачальнаяСтрока, 4).Текст = СокрЛП(СтрЗаменить(ИмяПоля, КодИсходнойФормыБезПрефикса, КодФормыПриложенияБезПрефикса));
			КонецЕсли;
			
			ИмяИсходнойФормыПриложения = ОбластьПриложения.Область(НачальнаяСтрока, 6).Текст;
			Если СтрНайти(ИмяИсходнойФормыПриложения, КодИсходнойФормыБезПрефикса2) <> 0 Тогда
				ОбластьПриложения.Область(НачальнаяСтрока, 6).Текст = ИмяИсходнойФормыПриложения + ПостфиксПриложения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбластьПриложения.ВысотаТаблицы <> 0 Тогда
		ОбластьИсточник = ОбластьПриложения.Область(1, 1, ОбластьПриложения.ВысотаТаблицы, 9);
		ОбластьИсточник.Имя = КодФормыПриложения;
		
		НачальнаяСтрока = мВыгрузкаВXMLДобавленныеПриложения.ВысотаТаблицы + 1;
		ОбластьПриемник = мВыгрузкаВXMLДобавленныеПриложения.Область(НачальнаяСтрока, 1, НачальнаяСтрока + ОбластьПриложения.ВысотаТаблицы, 9);
		мВыгрузкаВXMLДобавленныеПриложения.ВставитьОбласть(ОбластьИсточник, ОбластьПриемник);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавленныеПриложенияСформироватьXML()
	
	Префикс = Прав(мВыбраннаяФорма,7);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("tmp");
	
	Запись = Новый ЗаписьXML;		
	Запись.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
	
	// Запишем корневой элемент
	Запись.ЗаписатьНачалоЭлемента("fno");
	
	// создадим таблицу для выгрузки
	ТаблицаВыгрузки = Новый ТаблицаЗначений;
	ТаблицаВыгрузки.Колонки.Добавить("Форма");
	ТаблицаВыгрузки.Колонки.Добавить("Страница");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяАтрибута");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяЯчейки");
	ТаблицаВыгрузки.Колонки.Добавить("КоличествоROW");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяФормы");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяЛиста");
	ТаблицаВыгрузки.Колонки.Добавить("Отображение");
	
	ТаблицаВыгрузки.Колонки.Добавить("КодФормы");
	ТаблицаВыгрузки.Колонки.Добавить("Выгружать");
	ТаблицаВыгрузки.Колонки.Добавить("Многострочность");
	ТаблицаВыгрузки.Колонки.Добавить("ЗаголовокФормы"); 
	ТаблицаВыгрузки.Колонки.Добавить("КоличествоНаЛисте");    
	ТаблицаВыгрузки.Колонки.Добавить("Значение");    
   	ТаблицаВыгрузки.Колонки.Добавить("ВыгружатьНулевыеЗначения");    
	
	СписокФормБезИерархии = РеквизитФормыВЗначение("мСписокФормБезИерархии");
	Для Каждого ОбластьВыгрузки Из мВыгрузкаВXMLДобавленныеПриложения.Области Цикл
		
		ТаблицаВыгрузки.Очистить();
		ТекущееИмяФормы = Неопределено;
		Для Ном = ОбластьВыгрузки.Верх По ОбластьВыгрузки.Низ Цикл
			Строка = ТаблицаВыгрузки.Добавить();
			Строка.Форма 	       			= СокрП(мВыгрузкаВXMLДобавленныеПриложения.Область(Ном, 1).Текст);
			Строка.Страница        			= СокрП(мВыгрузкаВXMLДобавленныеПриложения.Область(Ном, 2).Текст);		
			Строка.ИмяАтрибута     			= СокрП(мВыгрузкаВXMLДобавленныеПриложения.Область(Ном, 3).Текст);		
			Строка.ИмяЯчейки      	 		= СокрП(мВыгрузкаВXMLДобавленныеПриложения.Область(Ном, 4).Текст);		
			Строка.КоличествоROW   			= СокрП(мВыгрузкаВXMLДобавленныеПриложения.Область(Ном, 5).Текст);		
			Строка.ИмяФормы        			= СокрП(мВыгрузкаВXMLДобавленныеПриложения.Область(Ном, 6).Текст);		
			Строка.ИмяЛиста        			= СокрП(мВыгрузкаВXMLДобавленныеПриложения.Область(Ном, 7).Текст);		
			Строка.Отображение     			= СокрП(мВыгрузкаВXMLДобавленныеПриложения.Область(Ном, 8).Текст);		
        
	  		Строка.ВыгружатьНулевыеЗначения  = ?(СокрП(мВыгрузкаВXMLДобавленныеПриложения.Область(Ном, 9).Текст) = "1", Истина, Ложь);		

			НовоеИмяФормы = Строка.ИмяФормы;
			Если НовоеИмяФормы <> ТекущееИмяФормы Тогда
				Форма = СписокФормБезИерархии.Строки.Найти(Строка.ИмяФормы, "ИмяФормы");
				//Форма = СписокФормБезИерархии.Строки.Найти(ОбластьВыгрузки.Имя, "КодФормы");
			КонецЕсли;
			Если Форма <> Неопределено Тогда
				Строка.КодФормы  		 = Форма.КодФормы;
				Строка.Выгружать  		 = Форма.Выгружать;
				Строка.Многострочность   = Форма.Многострочность;
				Строка.ЗаголовокФормы    = Форма.ЗаголовокФормы;
				Строка.КоличествоНаЛисте = Форма.КоличествоНаЛисте;
				Строка.Значение  		 = Форма.Значение;			
			КонецЕсли;
			ТекущееИмяФормы = Строка.имяФормы;
		КонецЦикла;                           	
		
		// выгрузка в XML 
		КоличествоСтрокВТаблице = ТаблицаВыгрузки.Количество();
		НомерСтроки = 0;
		
		ТекущаяФорма = Неопределено;
		ТекСтраница = Неопределено;
		
		Пока Истина Цикл
			Если НомерСтроки >= КоличествоСтрокВТаблице Тогда
				Прервать;
			КонецЕсли; 
			РегламентированнаяОтчетность.ВыгрузитьСтрокуВXML(ЭтотОбъект, Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки, ТекущаяФорма, ТекСтраница);			
			НомерСтроки = НомерСтроки + 1;                                                                                      		
		КонецЦикла;
		
		Запись.ЗаписатьКонецЭлемента();		// </sheet>
		Запись.ЗаписатьКонецЭлемента();		// </sheetGroup>
		Запись.ЗаписатьКонецЭлемента();		// </form>
		
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();     // fno
	
	Запись.Закрыть();
	
	// данный текст модуля добавлен для совместимости с СОНО (в СОНО для UTF-8 нет BOM поля)
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.Прочитать(ИмяВременногоФайла, "windows-1251");
	Строка = ТекстДок.ПолучитьСтроку(1);
	ТекстДок.ЗаменитьСтроку(1, Прав(Строка, СтрДлина(Строка)-3));
	ВыбФайл = Новый Файл(ИмяВременногоФайла);
	ТекстДок.Записать(ВыбФайл.Путь + ВыбФайл.ИмяБезРасширения + ВыбФайл.Расширение, "windows-1251");
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла));
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат АдресХранилища;
	
КонецФункции // ВыгрузкаОтчетаВXMLДляСОНО()

&НаСервере
Функция ПолучитьМассивФизЛицИзДопПриложений(КодФормы)
	
	ДобавленныеПриложения = РеквизитФормыВЗначение("ТаблицаДобавленныхПриложений").Скопировать(Новый Структура("КодИсходнойФормы", КодФормы));
	
	МассивФизЛиц = Новый Массив;
	
	Для Каждого ПриложениеТаблицы Из ДобавленныеПриложения Цикл   
		
		КодФормыБезПрефикса = СтрЗаменить(ПриложениеТаблицы.КодФормы, "Форма", "");
		
		СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, ПриложениеТаблицы.КодФормы);
		ТаблицаСтрокГруппы = СтруктураФормы["Страница1"].Строки;	
		МассивФизЛиц1 = ТаблицаСтрокГруппы.ВыгрузитьКолонку("Ф" + КодФормыБезПрефикса + "ФИО_Расшифровка");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФизЛиц, МассивФизЛиц1);		
		
	КонецЦикла;  
	
	Возврат МассивФизЛиц;
			
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, ОтчетОбъект);
КонецПроцедуры

// Параметры:
//  Команда - КомандаФормы
//
&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	ОтчетыКлиентПереопределяемый.ОбработчикКоманды(ЭтотОбъект, Команда, Ложь);
КонецПроцедуры
