////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	мВыбраннаяФорма = "Форма9132024Кв1";
	КодФормы 		= "Форма913";
	
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруФормРегОтчета(ЭтотОбъект);	
	СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями = РегламентированнаяОтчетностьПереопределяемый.ПоддержкаРаботыСоСтруктурнымиПодразделениями();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов  = Новый СписокЗначений;	
	СтруктураРеквизитовФормы.мПечатныеформы 		 = Новый СписокЗначений;
	СтруктураРеквизитовФормы.ОтметкаРезидентов 	 = "1";
	СтруктураРеквизитовФормы.ОтметкаНерезидентов = "2";
	СтруктураРеквизитовФормы.РасчетПоВидамДоходовИОблагаемойБазе = (Метаданные.РегистрыНакопления.ИПНСведенияОДоходах.Ресурсы.Найти("ОблагаемаяБаза") <> Неопределено);	
	СтруктураРеквизитовФормы.ВедетсяУчетОППВ     = (Метаданные.РегистрыНакопления.Найти("ОППВРасчетыСФондами") <> Неопределено);
	СтруктураРеквизитовФормы.ВедетсяУчетПоПодразделениям = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоПодразделениям(ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг_);
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);
	
	мФорматНомераСтроки = "ЧЦ=6; ЧВН=; ЧГ=";	
	
	ЗаполнитьСведенияОбОтчетномПериоде();
		
	ИнициализироватьВспомогательныеПеременные(ОтчетОбъект, СтруктураРеквизитовФормы);

	ОтчетОбъект.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
	ОтчетОбъект.ТочностьЕдиницыИзмерения = 0;

	ОтчетОбъект.ДатаПодписи	= ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	ОтчетОбъект.Налогоплательщик         = Налогоплательщик;
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
			ЗаполнитьПараметры(ТекФорма.КодФормы);
		КонецЕсли;
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекФорма.КодФормы);
	КонецЦикла	

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если Модифицированность Тогда 
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);	
		ТекстВопроса = НСТР("ru = 'Сохранить данные отчета?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_ОтражениеНалоговойОтчетностиВРеглУчете" Тогда
		Элементы.ФормаОтражениеВУчете.Заголовок = ПолучитьЗаголовокОтражениеВУчете(Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если КодФормы = "Форма913_01"  Тогда
		Форма913_01ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(мСписокСтруктурныхЕдиниц, ЭтаФорма, СтандартнаяОбработка, "ПоДаннымНалоговогоУчета", Налогоплательщик, , ПредопределенноеЗначение("Перечисление.РазделыНалоговогоУчета.КПН"), Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда		
		мСписокСтруктурныхЕдиниц = Результат;		
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц); 		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЗаполнитьВидРасчета(ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ДатаПодписиПриИзменении(Элемент)
	
	ПередатьЗначениеВСтруктуруНаСервере("ДатаПодачи", ОтчетОбъект.ДатаПодписи, Истина);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "Разделы"

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)	
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.КодФормы = Элемент.ТекущиеДанные.КодФормы Тогда
		ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);
		Возврат;
	КонецЕсли;
	
	РазделыОтчетаПриАктивизацииСтрокиНаСервере(Элемент.ТекущиеДанные.КодФормы, Элемент.ТекущиеДанные.Многострочность);	
		
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Для Каждого СтраницаФорм из Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы Цикл
		Элементы[СтраницаФорм.Имя].Видимость = СтраницаФорм.Имя = ЭтаФорма.КодФормы;	
	КонецЦикла;   
	
	Элементы.ГруппаСтраницыОтчета.ТекущаяСтраница = Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы[ЭтаФорма.КодФормы];

	ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);	
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПанель(ПризнакОсновнойФормы, ПризнакМногострочности)
			
	Элементы.ФормаВыгрузитьВXML.Видимость 						 = ПризнакОсновнойФормы; 
	Элементы.ГруппаКнопокДействияСоСтрокамиИСтраницами.Видимость = ПризнакМногострочности;
			    	
КонецПроцедуры //ЗаполнитьПанель()


//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ Форма913_00

&НаКлиенте
Процедура Форма913ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Элемент.ТекущаяОбласть.Имя;
	
	Если (Найти(Ячейка, "КатегорияA") > 0)
	 ИЛИ (Найти(Ячейка, "КатегорияB") > 0) Тогда
	 
	 	Если Элемент.ТекущаяОбласть.Значение = "Х" Тогда
			Элемент.ТекущаяОбласть.Значение = "";
		Иначе
			Элемент.ТекущаяОбласть.Значение = "Х";
		КонецЕсли;		
		ПередатьЗначениеВСтруктуруНаСервере(Ячейка, Элемент.ТекущаяОбласть.Значение, Ложь);
		
	ИначеЕсли (Найти(Ячейка, "ЮрЛицо") > 0) Тогда
		
		ФизЛицо = Форма913ПолеТабличногоДокументаСтраница1.Области.Найти("ФизЛицо");
		
		Если Область.Значение = "Х" Тогда
			Область.Значение = "";
			ФизЛицо.Значение = "Х";
			ПередатьЗначениеВСтруктуруНаСервере("ФизЛицо", "Х", Ложь);
		Иначе
			Область.Значение = "Х";
			ФизЛицо.Значение = "";
			ПередатьЗначениеВСтруктуруНаСервере("ФизЛицо", "", Ложь);
		КонецЕсли;
		ПередатьЗначениеВСтруктуруНаСервере(Ячейка, Область.Значение, Ложь);
		
	ИначеЕсли (Найти(Ячейка, "ФизЛицо") > 0) Тогда
		
		ЮрЛицо = Форма913ПолеТабличногоДокументаСтраница1.Области.Найти("ЮрЛицо");
		
		Если Область.Значение = "Х" Тогда
			Область.Значение = "";
			ЮрЛицо.Значение  = "Х";
			ПередатьЗначениеВСтруктуруНаСервере("ЮрЛицо", "Х", Ложь);
		Иначе
			Область.Значение = "Х";
			ЮрЛицо.Значение  = "";
			ПередатьЗначениеВСтруктуруНаСервере("ЮрЛицо", "", Ложь);
		КонецЕсли;
		ПередатьЗначениеВСтруктуруНаСервере(Ячейка, Область.Значение, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Форма913ПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Форма913ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Область);
	
КонецПроцедуры

&НаКлиенте
Процедура Форма913ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Область)
	
	ИмяОбласти = Область.Имя;	
	Если Область.СодержитЗначение Тогда
		Форма913РасчетНаСервере(Область.Имя, Область.Значение);
	КонецЕсли;

	Модифицированность = Истина;
	
КонецПроцедуры

////Обход ситуации с очисткой ячеек в ТП в клиент-серверном режиме работы
&НаКлиенте
Процедура ПанельФорма913ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ПанельФорма913ПриСменеСтраницыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПанельФорма913ПриСменеСтраницыНаСервере()
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДОП ФОРМЫ Форма913_01

&НаКлиенте
Процедура Форма913_01ПолеТабличногоДокументаСтраница1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;	
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница1");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);
	
	ТекИмяФормы = "Форма913_01";
	
	Если Найти(Ячейка, "Ф913_01КоличествоМест") > 0 Тогда
		
		НачЗначение = Область.Значение;
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений, НачЗначение, НСтр("ru='Введите количество мест осуществления деятельности'"), 12, 0);
		
	КонецЕсли;
				
	Если (Найти(Ячейка, "Ф913_01КодУГД__") > 0) Тогда
		
		НачЗначение = Область.Значение;	
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите Код УГД'"), 4) ; 	
		
	КонецЕсли;
	
	Если Найти(Ячейка, "Ф913_01Город__") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		НачЗначение = Область.Значение;	
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите наименование населенного пункта'"), 100) ; 	
		
	КонецЕсли;
		 
	Если Найти(Ячейка, "Ф913_01Улица__") > 0 Тогда
		
		НачЗначение = Область.Значение;	
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите название улицы (микрорайона)'"), 100) ; 	
		
	КонецЕсли;
		 
	Если Найти(Ячейка, "Ф913_01НомерДома__") > 0 ИЛИ Найти(Ячейка, "Ф913_01НомерКвартиры__") > 0 Тогда
		
		НачЗначение = Область.Значение;	
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводСтроки(ОповещениеВводаЗначений,НачЗначение, НСтр("ru='Введите номер дома\квартиры'"), 7) ; 	
		
	КонецЕсли;
		 
КонецПроцедуры

&НаКлиенте
Процедура Форма913_01ПолеТабличногоДокументаСтраница2Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Ячейка = Область.Имя;	
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ИмяСтраницы", "Страница2");
	ПараметрыСтраницы.Вставить("Область", Область);		
	ПараметрыСтраницы.Вставить("Расчет", Ложь);		
	
	ТекИмяФормы = "Форма913_01";

	Если Найти(Ячейка, "Ф913_01КоличествоМест") > 0 Тогда
		
		НачЗначение = Область.Значение;
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений, НачЗначение, НСтр("ru='Введите количество мест осуществления деятельности'"), 12, 0);
		
	КонецЕсли;
	
	Если Найти(Ячейка, "Ф913_01_001") > 0 Тогда
		
		НачЗначение = Область.Значение;
		ПараметрыСтраницы.Вставить("Расчет", Истина);		
		
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений, НачЗначение, НСтр("ru='Введите сумму расходов работодателя'"), 12, 0);
		
	КонецЕсли;
	
	Если Найти(Ячейка, "Ф913_01Ставка__") > 0 Тогда
		
		НачЗначение = Область.Значение;
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений, НачЗначение, НСтр("ru='Введите ставку розничного налога'"), 5, 2);
		
	КонецЕсли;

	Если (Найти(Ячейка, "Ф913_01_H__") > 0) Тогда
		
		НачЗначение = Область.Значение;
		ПараметрыСтраницы.Вставить("Расчет", Истина);		
		
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений, НачЗначение, НСтр("ru='Введите сумму облагаемого дохода'"), 12, 0) ;
			
	КонецЕсли;

	Если (Найти(Ячейка, "Ф913_01УдельныйВес__") > 0) Тогда
		
		НачЗначение = Область.Значение;
		ПараметрыСтраницы.Вставить("Расчет", Истина);		
		
		ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаЗначения", ЭтаФорма, ПараметрыСтраницы); 		 
		ПоказатьВводЧисла(ОповещениеВводаЗначений, НачЗначение, НСтр("ru='Введите удельный вес дохода'"), 5, 2) ;
			
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Заполнить(Команда)
	
	Перезаполнить = Истина; // Для выполнения запроса на пересчет данных к пользователю
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения =  РегламентированнаяОтчетностьКлиент.ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Перезаполнить Тогда		
		Если СтрокаФормы.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстВопроса = "Перезаполнить данные формы и ее дополнительных форм?";
		Иначе
			ТекстВопроса = "Перезаполнить данные формы?";
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);
		Оповещение.ДополнительныеПараметры.Вставить("Перезаполнить", Перезаполнить);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);		

	КонецЕсли;		

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	 	
	
	Перезаполнить = ДополнительныеПараметры.Перезаполнить;
	
	НачатьЗамерВремени();
	
	ЗаполнитьНаСервере(Перезаполнить);
	
КонецПроцедуры

&НаСервере
Процедура Очистить(ТекИмяФормы, ОчиститьВсе = Ложь) Экспорт
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	// Список ячеек, очищать которые не нужно
	Если ОчиститьВсе Тогда
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодВалюты");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДеятельностьСобственная");
	Иначе
		СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
		СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Год");
		СписокПоказателейНеПодлежащихОчистке.Добавить("Квартал");		
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодВалюты");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДеятельностьСобственная");
		СписокПоказателейНеПодлежащихОчистке.Добавить("НомерУведомления");
		СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаУведомления");
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодНалоговогоОргана");
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодНалоговогоОргана1");
	КонецЕсли;
		
	РегламентированнаяОтчетность.ОчиститьСтруктуруДанныхИТабличноеПолеФормы(ЭтаФорма,ТекИмяФормы,ОчиститьВсе,СписокПоказателейНеПодлежащихОчистке);
	
	СтруктураРеквизитовФормы.СтруктураИтоговыхПолей913_01 = Новый Структура;
	
КонецПроцедуры // Очистить()

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВXML(Команда)
	
	ГодФормирования = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	
	Если 2024 < ГодФормирования Тогда 
		ТекстСообщения = НСтр("ru = 'Отчет не предназначен для выгрузки в XML в выбранном отчетном периоде." + Символы.ПС + 
						"Пожалуйста, обновите комплект отчетов.'");
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);		
		Возврат;
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект);	
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	   
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохраненияФайла.ПолноеИмяФайла = КодФормы + " " + СтруктураРеквизитовФормы.мГод + "г" + ".xml";
		ДиалогСохраненияФайла.Фильтр = РегламентированнаяОтчетностьКлиентСервер.ФильтрДиалоговВыбораИСохраненияРегламентированногоОтчета();	
		ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
		ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите файл'");		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
		ДиалогСохраненияФайла.Показать(ОписаниеОповещения);
	Иначе   
		НачатьПолучениеФайлаССервера(ВыгрузитьВXMLНаСервере(), КодФормы + ".xml"); 
	КонецЕсли;
	   
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресВременногоХранилища = ВыгрузитьВXMLНаСервере();
		
	ПолноеИмяФайла = Результат[0];
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, АдресВременногоХранилища));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяФайла",ПолноеИмяФайла); 
	Обработчик = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеЗавершение", ЭтотОбъект,ДополнительныеПараметры);
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
	ПараметрыСохранения.Интерактивно = Ложь;
	ФайловаяСистемаКлиент.СохранитьФайлы(Обработчик, ПолучаемыеФайлы, ПараметрыСохранения); 
	
	        
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ТекстЗаголовка = НСтр("ru = 'Данные успешно выгружены в файл'");
	
	СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДополнительныеПараметры.ИмяФайла);
	
	РабочийКаталог = СтруктураФайла.Путь;

	#Если НЕ ВебКлиент Тогда
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка, "file:///" + СтрЗаменить(СокрЛП(РабочийКаталог), "\", "/"),
		РабочийКаталог);
	#Иначе
		Если НЕ ЗначениеЗаполнено(ПолученныеФайлы) Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
		ТекстЗаголовка,,
		РабочийКаталог);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеВУчете(Команда)
	
	Если НЕ СтруктураРеквизитовФормы.ЕстьВозможностьОтраженияВУчете Тогда
		Возврат;
	КонецЕсли;
	
	СохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(СохраненныйДок) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Регламентированный отчет не записан в информационной базе.'"));
		Возврат;
	КонецЕсли;
	
	ДокументОтраженияВУчете = ПолучитьЗначениеРеквизита(СохраненныйДок, "ДокументОтраженияВУчете");
	Если ЗначениеЗаполнено(ДокументОтраженияВУчете) Тогда
		РегламентированнаяОтчетностьКлиент.ОткрытьДокументОтраженияНалОтчетностиВУчете(СохраненныйДок, ДокументОтраженияВУчете, ЭтотОбъект);
	Иначе
		ДополнительныеПараметрыОтражения = СформироватьДополнительныеПараметрыОтраженияДанных(СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП);
		РегламентированнаяОтчетностьКлиент.СоздатьДокументОтраженияНалОтчетностиВУчете(СохраненныйДок, ЭтотОбъект, ДополнительныеПараметрыОтражения);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура Расшифровка(Команда)
	
	Попытка
		ИмяЯчейки = ТекущийЭлемент.ТекущаяОбласть.Имя;
	Исключение
		ПоказатьПредупреждение(,НСтр("ru = 'Активизируйте нужную ячейку отчета для расшифровки.'"));
		Возврат;
	КонецПопытки;
	
	ЦветРасшифровки = Форма913ПолеТабличногоДокументаСтраница1.Области.s_913_00_001.ЦветФона;
	
	НомерЯчейки = 0;
	МесяцЯчейки = 0;
	БукваЯчейки = "";
	
	Если КодФормы = "Форма913"
		И ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда
		
		Форма913Расшифровка(НомерЯчейки, МесяцЯчейки, ИмяЯчейки);
	
	ИначеЕсли КодФормы = "Форма913_01"
		И ТекущийЭлемент.ТекущаяОбласть.ЦветФона = ЦветРасшифровки Тогда
		
		Форма913_01Расшифровка(ИмяЯчейки);
	
	ИначеЕсли ТекущийЭлемент.ТекущаяОбласть.ЦветФона <> ЦветРасшифровки Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Расшифровка данной ячейки не поддерживается. Расшифровку содержат ячейки формы, выделенные голубым цветом.'"));
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюФорму(Команда)
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму");
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФормуИПриложенияКНей(Команда)
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФормуИПриложения");
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыФормы.Вставить("Налогоплательщик",         ОтчетОбъект.Налогоплательщик);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, мВыбраннаяФорма, "") + "ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);	

КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	ОткрытьФормуНастройкиСтраниц()	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ДобавитьСтрокуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	УдалитьСтрокуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущаяСтр(Команда)
	
	ПредыдущаяСтрНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СледующаяСтр(Команда)
	
	СледующаяСтрНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаПерейти(Команда)
	
	ВыбСтраница = 1;
	
	ОповещениеВводаЗначений = Новый ОписаниеОповещения("ПослеВводаСтраницы", ЭтаФорма); 
	ПоказатьВводЧисла(ОповещениеВводаЗначений,ВыбСтраница, "Введите номер страницы",5,0);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ОценкаПроизводительности

&НаКлиенте
Функция НачатьЗамерВремени()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "Регламентированный отчет ""%1 Декларация для налогоплательщиков, применяющих специальный налоговый режим розничного налога"" (заполнение)";
		КлючеваяОперация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(КлючеваяОперация,?(ЗначениеЗаполнено(КодФормы), НРег(КодФормы), "форма 913")); 
		ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент").НачатьЗамерВремени(Истина, КлючеваяОперация);
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеТаймера()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда 
		
		Возврат ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").НачатьЗамерВремени();
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьЗамер(ВремяНачала)
	
	Если ВремяНачала <> Неопределено 
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "Регламентированный отчет ""форма 913 Декларация для налогоплательщиков, применяющих специальный налоговый режим розничного налога"" (заполнение)";
		ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПриЗакрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьДанныеСервере();
		Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанные() Экспорт
	СохранитьДанныеСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеСервере()
	ДополнительныеПараметрыОтражения = СформироватьДополнительныеПараметрыОтраженияДанных(СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП);
	СтруктураРеквизитовФормы.Вставить("ДополнительныеПараметрыОтражения", ДополнительныеПараметрыОтражения);
	РегламентированнаяОтчетность.СохранитьОтчет(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура РазделыОтчетаПриАктивизацииСтрокиНаСервере(НовыйКодФормы, НовыйПризнакМногострочность)		
	
	//проверим, что стояли не на основной, итоги передаем только когда переходим из доп.форм
	ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	Если ТекФорма <> Неопределено И Не ТекФорма.ПризнакОсновной Тогда
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы, Истина);		
	КонецЕсли;	

	// установим новые значения реквизитам формы
	ЭтаФорма.КодФормы = НовыйКодФормы;	
	
	//передаем данные из структуры в ТП
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, КодФормы);	
	
	Если  НовыйПризнакМногострочность Тогда
		
		Если ТекФорма = Неопределено Тогда
			ВсегоСтраниц = 1;
		Иначе
			ВсегоСтраниц = ТекФорма.ВсегоСтраниц;
		КонецЕсли;
		
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтотОбъект);
		
	КонецЕсли;  
	
КонецПроцедуры	

&НаКлиенте
Процедура ОчиститьРеглОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Форма = ДополнительныеПараметры.Форма;	
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", Форма.КодФормы));
		Вложенность = ДополнительныеПараметры.ОчищатьПриложения;	
		
		ОчиститьРеглОтчетЗавершениеНаСервере(СтрокаФормы.КодФормы, СтрокаФормы.Многострочность, Вложенность)	
	КонецЕсли;		
КонецПроцедуры 	

&НаСервере
Процедура ОчиститьРеглОтчетЗавершениеНаСервере(КодФормы, ПризнакМногострочности, Вложенность) Экспорт		
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, ПризнакМногострочности, Вложенность);
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокСтруктурныхЕдиниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");			
	СтруктураРеквизитовФормы.Вставить("НалоговыйКомитет");				
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");		
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");		
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");	
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрг");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);	
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");	
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");		
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");	
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);	
	СтруктураРеквизитовФормы.Вставить("мПериодичность", Параметры.мПериодичность);			
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);
	СтруктураРеквизитовФормы.Вставить("мНалогоплательщикЯвляетсяИП");
	СтруктураРеквизитовФормы.Вставить("мНалогоплательщикИндивидуальныйПредприниматель");
	СтруктураРеквизитовФормы.Вставить("мПризнакСистемыСотрудниковЗУП20", Метаданные.РегистрыСведений.РаботникиОрганизаций.Измерения.Найти("ФизЛицо") = Неопределено);
	СтруктураРеквизитовФормы.Вставить("мРазмерМЗП");
	СтруктураРеквизитовФормы.Вставить("мРазмерМЗПДляЦелейНалогообложения");
	СтруктураРеквизитовФормы.Вставить("мРазмерМРП");
	СтруктураРеквизитовФормы.Вставить("мСтавкаСО");
	СтруктураРеквизитовФормы.Вставить("мСтавкаОПВ");
	СтруктураРеквизитовФормы.Вставить("мСтавкаВОСМС");
	СтруктураРеквизитовФормы.Вставить("мОтчетныйПериодПолугодие");
	СтруктураРеквизитовФормы.Вставить("мКоличествоМесяцев");
	СтруктураРеквизитовФормы.Вставить("ЕстьВозможностьОтраженияВУчете", Найти(Метаданные.Имя, "ЗарплатаИУправлениеПерсоналом") = 0 И Найти(Метаданные.Имя, "УправлениеПроизводственнымПредприятием") = 0);
	СтруктураРеквизитовФормы.Вставить("ЕстьРегистрБУ", Метаданные.РегистрыБухгалтерии.Найти("Типовой") <> Неопределено);
	СтруктураРеквизитовФормы.Вставить("мСписокФизЛицаИностранцыНеРезиденты");
	СтруктураРеквизитовФормы.Вставить("мСписокФизЛицаИностранцыРезиденты");
	СтруктураРеквизитовФормы.Вставить("мСписокФизЛицаКазахстанцы");   	
	СтруктураРеквизитовФормы.Вставить("мГод");
	СтруктураРеквизитовФормы.Вставить("мКвартал");	
	СтруктураРеквизитовФормы.Вставить("мМесяц");
	СтруктураРеквизитовФормы.Вставить("мПолугодие");
	СтруктураРеквизитовФормы.Вставить("мМесяцЗаполнения");
	СтруктураРеквизитовФормы.Вставить("мЕжемесячныйРасчетВзносовИОтчисленийЗаИП");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалоПериодаОтчетаУпрощенка");
	СтруктураРеквизитовФормы.Вставить("мИППенсионер");
	СтруктураРеквизитовФормы.Вставить("мМесяцИППенсионер");
	
	СтруктураРеквизитовФормы.Вставить("ОтметкаРезидентов");		
	СтруктураРеквизитовФормы.Вставить("ОтметкаНерезидентов");
	
	// индивидуальные параметры формы
	СтруктураРеквизитовФормы.Вставить("мПоддержкаРаботыСоСтруктурнымиПодразделениями");
	СтруктураРеквизитовФормы.Вставить("СтруктураИтоговыхПолей913_01", Новый Структура);				
	
	СтруктураРеквизитовФормы.Вставить("РасчетПоВидамДоходовИОблагаемойБазе");
	СтруктураРеквизитовФормы.Вставить("ВедетсяУчетОППВ");
	СтруктураРеквизитовФормы.Вставить("ВедетсяУчетПоПодразделениям");
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			
			СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
			СписокСохранения.Вставить("ДеревоНастройкиСтраниц",	РеквизитФормыВЗначение("мДеревоСтраницОтчета").Скопировать());	
						
			ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
			мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()	
	РегламентированнаяОтчетность.ВосстановитьСохраненныйОтчет(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Перем СтруктураГруппы;  
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ТекстСообщения = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);				
				
		Возврат Ложь;
		
	КонецЕсли;
			
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		 Форма913РасчетНаСервере(Неопределено, Неопределено);
	КонецЕсли; 

	РегламентированнаяОтчетность.СформироватьСписокПечатаемыхЛистов(ЭтаФорма);	       		
		
	Возврат Истина;                                                           
	
КонецФункции

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;	
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
						
		КонецЕсли;
		
		ЗаполнитьДанныеПоОрганизации();

		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();
	
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ЕстьВозможностьОтраженияВУчете Тогда
		Элементы.ФормаОтражениеВУчете.Видимость = Ложь;
	ИначеЕсли СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		ДокументОтражения = ПолучитьЗначениеРеквизита(СтруктураРеквизитовФормы.мСохраненныйДок, "ДокументОтраженияВУчете");
		Элементы.ФормаОтражениеВУчете.Заголовок = ПолучитьЗаголовокОтражениеВУчете(ДокументОтражения);
	КонецЕсли;
	
	// обход проблемы с обработкой реквизитов ПТД в платформе
	МассивРеквизитовФормы = ЭтотОбъект.ПолучитьРеквизиты();			
	Для Счетчик = 0 По МассивРеквизитовФормы.Количество()-1 Цикл		
		РеквизитФормы = МассивРеквизитовФормы[Счетчик];
		Если РеквизитФормы.ТипЗначения.СодержитТип(Тип("ТабличныйДокумент")) Тогда
			ЭтотОбъект[РеквизитФормы.Имя] = ЭтотОбъект[РеквизитФормы.Имя];	
		КонецЕсли;
	КонецЦикла;		
		
	Если СтруктураРеквизитовФормы.Свойство("СформироватьФормуОтчетаАвтоматически") И СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически <> Неопределено Тогда
		
		ЗначениеТаймера = ЗначениеТаймера();
		
		ЗаполнитьАвтоНаСервере();
		
		ЗаписатьЗамер(ЗначениеТаймера);
		
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////
// ЛОКАЛЬНЫЕ МЕХАНИЗМЫ ОТЧЕТА

&НаКлиенте
Процедура ОбновитьПараметрыФормыНаКлиенте(Параметры) Экспорт
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	ОбновитьПараметрыФормыНаСервере(Параметры);
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыФормыНаСервере(Параметры) Экспорт
	
	ЗаполнитьСведенияОбОтчетномПериоде();

	ИнициализироватьВспомогательныеПеременные(ОтчетОбъект, СтруктураРеквизитовФормы); 
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);		
	КонецЦикла	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормы(ТекФорма, Параметры)
	
	ЗаполнитьЗначенияСвойств(ТекФорма.СтруктураРеквизитовФормы, Параметры);
	
	ТекФорма.Налогоплательщик                     = Параметры.Налогоплательщик;	
	ТекФорма.ОтчетОбъект.Налогоплательщик         = ТекФорма.Налогоплательщик;	
	ТекФорма.мСписокСтруктурныхЕдиниц             = Параметры.мСписокСтруктурныхЕдиниц;	
	ТекФорма.ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(Параметры.мСписокСтруктурныхЕдиниц);
	
КонецПроцедуры

&НаСервере                                 
Процедура ЗаполнитьСведенияОбОтчетномПериоде() Экспорт

	СтрПериодОтчета = ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ФП = истина");
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
		СтруктураРеквизитовФормы.мКвартал = Лев(СтрПериодОтчета,1);
		СтруктураРеквизитовФормы.мМесяц = Неопределено;
	Иначе
		СтруктураРеквизитовФормы.мМесяц = Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		СтруктураРеквизитовФормы.мКвартал = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мГод = Лев(Прав(СтрПериодОтчета,7),4);
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, ЭтотОбъект.КодФормы, Ложь, Ложь);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, ЭтотОбъект.КодФормы);
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ЭтотОбъект.КодФормы);	
	
	Форма913РасчетНаСервере(Неопределено, Неопределено);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере(Перезаполнить)
	
	ТекКодФормы = КодФормы;
	
	ИнициализироватьВспомогательныеПеременные(ЭтотОбъект, ЭтотОбъект.СтруктураРеквизитовФормы);
	
	Если КодФормы = "Форма913" Тогда 
		Форма913ЗаполнитьАвто(Перезаполнить);		
	ИначеЕсли КодФормы = "Форма913_01" Тогда     
		Форма913_01ЗаполнитьАвтоНаСервере(Перезаполнить);
	КонецЕсли;
	
	КодФормы = ТекКодФормы;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокСчетовДоходов()
	
	СписокСчетовДоходов = Новый СписокЗначений();
	СписокСчетовДоходов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг_"));  // 6000
	СписокСчетовДоходов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ДоходыОтФинансирования")); 					 // 6100
	СписокСчетовДоходов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ПрочиеДоходы_")); 							 // 6200
	СписокСчетовДоходов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ДоходыСвязанныеСПрекращаемойДеятельностью_")); // 6300
	СписокСчетовДоходов.Добавить(ПредопределенноеЗначение("ПланСчетов.Типовой.ДоляПрибылиОрганизацийУчитываемыхПоМетодуДолевогоУчастия")); // 6400
	
	Возврат СписокСчетовДоходов;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьВспомогательныеПеременные(ОтчетОбъект, СтруктураРеквизитовФормы) Экспорт

	СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП = (ОтчетОбъект.Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);
	СтруктураРеквизитовФормы.мНалогоплательщикИндивидуальныйПредприниматель = ОтчетОбъект.Налогоплательщик.ИндивидуальныйПредприниматель;
	
	// размер минимальной заработной платы
	Запрос = Новый Запрос;
	Если СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета >= Дата(2010,1,1) Тогда
		// с 2010 года в статье 436 указано, что для расчетов используется показатель по состоянию на начало года
		Запрос.УстановитьПараметр("ДатаАктуальности", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);		
	Иначе	
		// до 2010 года уточнения в кодексе не было, поэтому берем показатель на конец отчетного периода
		Запрос.УстановитьПараметр("ДатаАктуальности", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегламентированныеРасчетныеПоказатели.РазмерМЗП,
	               |	РегламентированныеРасчетныеПоказатели.РазмерМЗПДляЦелейНалогообложения,
	               |	РегламентированныеРасчетныеПоказатели.РазмерМРП
	               |ИЗ
	               |	РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&ДатаАктуальности, ) КАК РегламентированныеРасчетныеПоказатели";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураРеквизитовФормы.мРазмерМЗП = Выборка.РазмерМЗП;
		СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения = Выборка.РазмерМЗПДляЦелейНалогообложения;
		СтруктураРеквизитовФормы.мРазмерМРП = Выборка.РазмерМРП;
	Иначе
		СтруктураРеквизитовФормы.мРазмерМЗП = 0;
		СтруктураРеквизитовФормы.мРазмерМЗПДляЦелейНалогообложения = 0;
		СтруктураРеквизитовФормы.мРазмерМРП = 0;
	КонецЕсли;

	//Месяц начиная с которого заполняется отчет  
	Запрос.УстановитьПараметр("парамНалогоплательщик", ОтчетОбъект.Налогоплательщик);
	Запрос.Текст = "ВЫБРАТЬ
	               |	МИНИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК Период
	               |ИЗ
	               |	РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
	               |ГДЕ
	               |	УчетнаяПолитикаНалоговыйУчет.ОрганизацияЯвляетсяПлательщикомСН = ЛОЖЬ
	               |	И УчетнаяПолитикаНалоговыйУчет.Организация = &парамНалогоплательщик";
	
	Выборка = Запрос.Выполнить().Выбрать();
	МесяцЗаполнения = 1;
	СтруктураРеквизитовФормы.мДатаНачалоПериодаОтчетаУпрощенка = Неопределено;
	Если Выборка.Следующий() Тогда
		Если  ТипЗнч(Выборка.Период) = Тип("Дата") 
			И Выборка.Период > СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
			МесяцЗаполнения = (Месяц(Выборка.Период ) - Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)) + 1;
			СтруктураРеквизитовФормы.мДатаНачалоПериодаОтчетаУпрощенка = Выборка.Период;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мМесяцЗаполнения = МесяцЗаполнения;
	
	// Выполнять ежемесячный расчет взносов и отчислений за ИП  
	// ставки взносов, отчислений
	Запрос.УстановитьПараметр("парамНалогоплательщик", ОтчетОбъект.Налогоплательщик);
	Запрос.УстановитьПараметр("парамПериод", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ЕжемесячныйРасчетВзносовИОтчисленийЗаИП,
	               |	УчетнаяПолитикаНалоговыйУчетСрезПоследних.СтавкаОПВДляИП,
	               |	УчетнаяПолитикаНалоговыйУчетСрезПоследних.СтавкаСОДляИП,
	               |	УчетнаяПолитикаНалоговыйУчетСрезПоследних.СтавкаВОСМСДляИП
	               |ИЗ
	               |	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериод, Организация = &парамНалогоплательщик) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураРеквизитовФормы.мЕжемесячныйРасчетВзносовИОтчисленийЗаИП = Выборка.ЕжемесячныйРасчетВзносовИОтчисленийЗаИП;
		СтруктураРеквизитовФормы.мСтавкаОПВ = Выборка.СтавкаОПВДляИП;
		СтруктураРеквизитовФормы.мСтавкаСО = Выборка.СтавкаСОДляИП;
		СтруктураРеквизитовФормы.мСтавкаВОСМС = Выборка.СтавкаВОСМСДляИП;
	КонецЕсли;
	  
	Запрос.УстановитьПараметр("парамФизЛицоИП", ОтчетОбъект.Налогоплательщик.ИндивидуальныйПредприниматель);
	Запрос.УстановитьПараметр("парамПериод", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СведенияОПенсионномОбеспеченииФизЛицСрезПоследних.Пенсионер КАК Пенсионер,
	               |	СведенияОПенсионномОбеспеченииФизЛицСрезПоследних.Период КАК Период
	               |ИЗ
	               |	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамПериод, ФизЛицо = &парамФизЛицоИП) КАК СведенияОПенсионномОбеспеченииФизЛицСрезПоследних";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если СтруктураРеквизитовФормы.Свойство("мИППенсионер") Тогда
		СтруктураРеквизитовФормы.мИППенсионер = Ложь;
		СтруктураРеквизитовФормы.мМесяцИППенсионер = 0;
		
		Если Выборка.Следующий() Тогда
			СтруктураРеквизитовФормы.мИППенсионер = Выборка.Пенсионер;
			Если Выборка.Период > СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
				СтруктураРеквизитовФормы.мМесяцИППенсионер = (Месяц(Выборка.Период ) - Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)) + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ИнициализироватьВспомогательныеПеременные()

&НаСервере
Процедура ЗаполнитьВидРасчета(ВидРасчета)
	
	//сначала очищаем поля, если были проставлены уже отметки
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Первоначальный","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Очередной","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Дополнительный","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"ПоУведомлению","");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Ликвидационный","");
	
	Если ВидРасчета = "Первоначальный" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Первоначальный","Х");
	ИначеЕсли ВидРасчета = "Очередной" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Очередной","Х");		
	ИначеЕсли ВидРасчета = "Дополнительный" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Дополнительный","Х");		
	ИначеЕсли ВидРасчета = "ПоУведомлению" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"ПоУведомлению","Х");		
	ИначеЕсли ВидРасчета = "Ликвидационный" Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Ликвидационный","Х");		
	КонецЕсли;
	
	Если ВидРасчета = "ПоУведомлению" Тогда
		Форма913ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Ложь;
		Форма913ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита = Ложь;
	Иначе
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"НомерУведомления","");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"ДатаУведомления","");
		Форма913ПолеТабличногоДокументаСтраница1.Области.НомерУведомления.Защита = Истина;
		Форма913ПолеТабличногоДокументаСтраница1.Области.ДатаУведомления.Защита = Истина;
	КонецЕсли;
	
	Модифированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметры(ТекИмяФормы) Экспорт
	
	СписокФормБезИерархии = РеквизитФормыВЗначение("мСписокФормБезИерархии", Тип("ДеревоЗначений"));
	
	Форма = СписокФормБезИерархии.Строки.Найти(ТекИмяФормы, "КодФормы");
	
	Если Форма.Многострочность = 1 Тогда // заполнение структуры шапки(подвала) для многострочных форм
		
		Если Не ((ОтчетОбъект.Налогоплательщик  = Неопределено) Или (ОтчетОбъект.Налогоплательщик = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации"))) Тогда			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "ИИН_БИН", ОтчетОбъект.Налогоплательщик.ИдентификационныйНомер, Ложь);
		КонецЕсли;
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Квартал", СтруктураРеквизитовФормы.мКвартал);
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "Год", СтруктураРеквизитовФормы.мГод, Ложь);
		
		Для Каждого Элемент Из СтруктураРеквизитовФормы.СтруктураИтоговыхПолей913_01 Цикл
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, Элемент.Ключ, Элемент.Значение, Истина);
		КонецЦикла;
							
	Иначе //обычная форма
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,"Год",СтруктураРеквизитовФормы.мГод);		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Квартал", СтруктураРеквизитовФормы.мКвартал);		
		Если Не ((ОтчетОбъект.Налогоплательщик  = Неопределено) Или (ОтчетОбъект.Налогоплательщик = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации"))) Тогда			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, ТекИмяФормы, "ИИН_БИН", ОтчетОбъект.Налогоплательщик.ИдентификационныйНомер);
		КонецЕсли;
				
	КонецЕсли;
	
	Если ТекИмяФормы = Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7) Тогда 
		
		//устанавливаем значения по умолчанию
		СписокРасчетов = Элементы.СписокРасчетов.СписокВыбора[1];
		ЗаполнитьВидРасчета("Очередной");
		
		//заполним основные сведения об организации
		ЗаполнитьСведенияОрганизации();
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "КодВалюты", "KZT");
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПараметры()

&НаСервере
Процедура ЗаполнитьСведенияОрганизации()
	
	ОргСведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(ОтчетОбъект.Налогоплательщик, ОтчетОбъект.ДатаПодписи, Налогоплательщик.НалоговыйКомитет);
	ОтветственныеЛица = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(ОтчетОбъект.Налогоплательщик, ОтчетОбъект.ДатаПодписи,,,Истина);	
	//Если организация не указана то не выводим никаких сведений
	Если ОргСведения = 0 Тогда
		Возврат;
	КонецЕсли;

	// Инициализируем переменные
	РННЮЛ = ""; // РНН
		
	ИИН_БИН = ""; // ИИН_БИН

	НаимЮЛПол = ""; // Полное наименование 
	
	ФИОРук = ""; // ФИО руководителя
				
	КодНалоговогоОргана = ""; // Код налогового органа
	
	ПризнакРезидентства = Истина; // Признак резидентства
	
	// Добавим сведения о кодах налоговых органов
	НКСведения = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ОтчетОбъект.НалоговыйКомитет, ОтчетОбъект.ДатаПодписи);
	
	ОргСведения.Вставить("КодНалоговогоОргана", СокрЛП(Лев(ОргСведения.КодОрганаГосударственныхДоходов, 4)));	
	
	ПризнакРезидентства = ?(Лев(ОтчетОбъект.Налогоплательщик.КБЕ,1) = "2", Ложь, Истина);
	ОргСведения.Вставить("ПризнакРезидентства", ПризнакРезидентства);
	
	// Получаем данные
	ОргСведения.Свойство("РНН",    			    РННЮЛ);
	ОргСведения.Свойство("БИН_ИИН",  		    ИИН_БИН);
	ОргСведения.Свойство("ПолноеНаименование",  НаимЮЛПол);
	ОргСведения.Свойство("КодНалоговогоОргана", КодНалоговогоОргана);
	ОргСведения.Свойство("ПризнакРезидентства", ПризнакРезидентства);	
	ОтветственныеЛица.Свойство("Руководитель",  ФИОРук);
	                  
	// Производим операции связанные с текущей формой отчетности	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы,"ИИН_БИН",ИИН_БИН);
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"ОргНазв",НаимЮЛПол);
	
	Если КодФормы = "Форма913" Тогда
		// Разбиваем название организации
		НазваниеОрганизацииДляРазбиения = НаимЮЛПол;
		НачПозиция = 1;
		Для Шаг = 1 По 3 Цикл
			ДлинаСтроки = ЭтаФорма[КодФормы + "ПолеТабличногоДокументаСтраница1"].Области["ОргНазв"+Шаг].ТипЗначения.КвалификаторыСтроки.Длина;
			НазОрганизации = Сред(НазваниеОрганизацииДляРазбиения, НачПозиция, ДлинаСтроки); 
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"ОргНазв"+Шаг,НазОрганизации);
			НачПозиция =НачПозиция + ДлинаСтроки;
		КонецЦикла;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"Руководитель", ФИОРук);
	
	// Дата подачи декларации
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,КодФормы,"ДатаПодачи", ОтчетОбъект.ДатаПодписи);	
	
	Если СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "ФизЛицо", "Х");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "ЮрЛицо", "");
	Иначе
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "ФизЛицо", "");
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "ЮрЛицо", "Х");
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизацияСсылка", ОтчетОбъект.Налогоплательщик);
	Запрос.Текст = "ВЫБРАТЬ
	|	Контрагенты.ИдентификационныйКодЛичности Как БИНАппаратаАкимов
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО Организации.МестныйБюджет = Контрагенты.Ссылка
	|ГДЕ
	|	Организации.Ссылка = &ОрганизацияСсылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, "БИНАппаратаАкимов", Выборка.БИНАппаратаАкимов);
	КонецЕсли;
	 
	//Код органа государственных доходов
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "КодНалоговогоОргана", КодНалоговогоОргана);		
	
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

&НаСервере
Процедура ЗаполнитьДанныеПоОрганизации()
	
	СписокФормБезИерархии = РеквизитФормыВЗначение("мСписокФормБезИерархии", Тип("ДеревоЗначений"));
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		// Заполняем поле 11 "Представленные приложения"
		Для Каждого Форма Из СписокФормДерева.Строки[0].Строки Цикл
			ИмяОбласти = "Приложение" + Прав(Форма.КодФормы,2);
			Если Форма913ПолеТабличногоДокументаСтраница1.Области.Найти(ИмяОбласти) <> Неопределено Тогда
				Строка = СписокФормБезИерархии.Строки.Найти(Форма.КодФормы, "КодФормы");
				Если Строка.Выгружать = 1 Тогда
					РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7),ИмяОбласти,"Х",Ложь);				
				Иначе
					РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7),ИмяОбласти,"",Ложь);				
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;

		ВосстановитьСохраненныеДанные();
	Иначе	
		ЗаполнитьПараметры(КодФормы); 			
	КонецЕсли;   
	
КонецПроцедуры

&НаСервере
Процедура ПередатьЗначениеВСтруктуруНаСервере(Ячейка, ТекущаяОбластьЗначение, ПередаватьВТабличноеПоле)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, Ячейка, ТекущаяОбластьЗначение, ПередаватьВТабличноеПоле);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьВXMLНаСервере(ВыдаватьСообщение = Ложь)
	
	РегламентированнаяОтчетность.ПередатьДанныеИзТабличногоПоляВСтруктуру(ЭтаФорма);
	
	Возврат РегламентированнаяОтчетность.ВыгрузитьОтчетВXMLДляСОНО(ЭтотОбъект, ВыдаватьСообщение);	

КонецФункции

&НаСервере
Функция ПолучитьВидСубконтоДоходы()
	
	СписокВидовСубконто = Новый СписокЗначений();
	СписокВидовСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.Доходы")); // Доходы
	Если СтруктураРеквизитовФормы.ВедетсяУчетПоПодразделениям Тогда
		СписокВидовСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.Подразделения")); // Подразделения
	КонецЕсли;
	
	Возврат СписокВидовСубконто;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьРасшифровку913ВВидеРегистраНУпоИПНиСН()

	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;

	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода", КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));

	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Налогоплательщик", ОтчетОбъект.Налогоплательщик);	

	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";

	Если СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ФизЛицо", СтруктураРеквизитовФормы.мНалогоплательщикИндивидуальныйПредприниматель, ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЕсли;

	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.СформироватьСписокСтруктурныхЕдиниц(ПредопределенноеЗначение("Перечисление.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты"), Неопределено, ОтчетОбъект.Налогоплательщик));
	ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПредставлениеСпискаОрганизаций", ПредставлениеСпискаОрганизаций);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВключитьИП", Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВключитьПолучателейАлиментов", ПризнакАлиментов);
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ИндивидуальныйПредпринимательАдвокатЧастныйНотариус", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	
	ГруппировкиРасшифровки = Новый Массив();
	
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "Налогоплательщик", НСтр("ru = 'Налогоплательщик'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "МесяцНалоговогоПериода", НСтр("ru = 'Месяц налог. периода'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "СтруктурнаяЕдиница", НСтр("ru = 'Структурное подразделение'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));
	КонецЕсли;
	ГруппировкиРасшифровки.Добавить(Новый Структура("Поле, Представление, ТипГруппировки", "ФизЛицо", НСтр("ru = 'Работник'"),ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));

	ДополнительныеПоляРасшифровки = Новый Массив();
	ДополнительныеПоляРасшифровки.Добавить(Новый Структура("Поле, Представление", "ТабельныйНомер", НСтр("ru = 'Табельный номер'")));
	ДополнительныеПоляРасшифровки.Добавить(Новый Структура("Поле, Представление", "ИИН", НСтр("ru = 'ИИН'")));

	ЗаполняемыеНастройки = Новый Структура("Группировка, Показатели, ДополнительныеПоля, ГруппировкиРасшифровки, ДополнительныеПоляРасшифровки",
											Истина, Истина, Истина, ГруппировкиРасшифровки, ДополнительныеПоляРасшифровки);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ЗаполняемыеНастройки",ЗаполняемыеНастройки );	

	ОткрытьФорму("Отчет.РегистрНалоговогоУчетаПоИПНиСН.Форма.ФормаОтчета", ПараметрыФормы,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиСтраниц()
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРаздел = Элементы.РазделыОтчета.ТекущиеДанные.Страницы;		
	КонецЕсли;
	
	Для Каждого ТекФорма ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",ТекФорма.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			ТекущаяСтрокаСписка.Выгружать               = ТекФорма.Выгружать;
			ТекущаяСтрокаСписка.ПоказатьСтраницу        = ТекФорма.ПоказатьСтраницу;			
			ТекущаяСтрокаСписка.АвтополучениеИтогов     = ТекФорма.АвтополучениеИтогов;  
			ТекущаяСтрокаСписка.АвтоЗаполнение          = ТекФорма.АвтоЗаполнение;  
		КонецЕсли;		   
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокФормДерева",СписокФормДерева);
	
	ДопПараметры = Новый Структура("ТекущийРаздел",ТекущийРаздел);
	
	ОповещениеПослеЗакрытияФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастройкиСтраниц",ЭтотОбъект,ДопПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.НастройкиОтчета",ПараметрыФормы, ЭтаФорма,,,,ОповещениеПослеЗакрытияФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиСтраниц(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьДанныеФормы(РезультатЗакрытия, СписокФормДерева);
	
	Модифицированность = Истина;
	
	//обновим мСписокФормБезИерархии
	Для Каждого СтрокаФормы ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",СтрокаФормы.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			СтрокаФормы.Выгружать               = ТекущаяСтрокаСписка.Выгружать;
			СтрокаФормы.ПоказатьСтраницу        = ТекущаяСтрокаСписка.ПоказатьСтраницу;			
			СтрокаФормы.АвтополучениеИтогов     = ТекущаяСтрокаСписка.АвтополучениеИтогов;  
			СтрокаФормы.АвтоЗаполнение          = ТекущаяСтрокаСписка.АвтоЗаполнение;  
		КонецЕсли;			
	КонецЦикла; 	

	Если ДополнительныеПараметры.Свойство("ТекущийРаздел") И НЕ ДополнительныеПараметры.ТекущийРаздел = Неопределено Тогда  		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(РазделыОтчета, Новый Структура("СписокФормДереваСтраницы",ДополнительныеПараметры.ТекущийРаздел));
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;			
	КонецЕсли;  	
	
КонецПроцедуры  

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ЗначениеРеквизита)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ЗначениеРеквизита);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗаголовокОтражениеВУчете(ДокументОтражения)
	
	Если ЗначениеЗаполнено(ДокументОтражения) Тогда
		Возврат НСТР("ru = 'Открыть документ отражения в учете'");
	Иначе
		Возврат НСТР("ru = 'Ввести документ отражения в учете'");
	КонецЕсли;
	
КонецФункции // ПолучитьЗаголовокОтражениеВУчете()

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьДополнительныеПараметрыОтраженияДанных(НалогоплательщикЯвляетсяИП)
	
	СтруктураПараметров = Новый Структура;
	
	// Для опционального отображения колонок для ИП и проведения по РН
	СтруктураПараметров.Вставить("ОтражениеДанныхИП", НалогоплательщикЯвляетсяИП);
	
	// Сформируем имена реквизитов и адреса ячеек данных для заполнения колонок документа
	// в данную структуру передаем только числовые значения, которые надо отразить
	// 		Ключ - имя колонки ТЧ документа ОтражениеНалоговойОтчетностиВРеглУчете с типом "Число"
	// 		Значение - номер колонки в макете, в колонке макета указываем имя ячейки с содержанием данных
	ПоказателиОтчета = Новый Структура;
	ПоказателиОтчета.Вставить("СуммаДохода", 13);
	
	СтруктураПараметров.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// В данную структуру передаем все прочие параметры нечислового типа
	// далее данные параметры будут использоваться в дополнительных колонках
	// 		Ключ - имя колонки ТЧ документа ОтражениеНалоговойОтчетностиВРеглУчете
	// 		Значение - номер колонки в макете, в колонке указываем путь к получению данных,
	//				получение будет осуществляться через данные отчета, например, Организация = Вычислить("РеглОтчет." + Значение), где Значение = "Организация"
	ПараметрыОтчета = Новый Структура; 
	ПараметрыОтчета.Вставить("ФизЛицо", 12);
	
	СтруктураПараметров.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуНаСервере()
	
	РегламентированнаяОтчетность.ДобавитьСтрокуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуНаСервере()
	
	РегламентированнаяОтчетность.УдалитьСтрокуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПредыдущаяСтрНаСервере()
	
	ТекущаяСтраница = ТекущаяСтраница - 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СледующаяСтрНаСервере()
	
	ТекущаяСтраница = ТекущаяСтраница + 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСтраницы(Значение, Параметры) Экспорт
	
	Если НЕ Значение = Неопределено Тогда  
		
		ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
		Если ТекФорма = Неопределено Тогда
			ВсегоСтраниц = 1;
		Иначе
			ВсегоСтраниц = ТекФорма.ВсегоСтраниц;
		КонецЕсли;		
			
		Если Значение = 0 Тогда
			ТекущаяСтраница = 1;
		ИначеЕсли Значение > ВсегоСтраниц Тогда
			ТекущаяСтраница = ВсегоСтраниц;
		Иначе
			ТекущаяСтраница = Значение;				
		КонецЕсли;
		
		ПослеВводаСтраницыНаСервере();
		  
	КонецЕсли;
	           	
КонецПроцедуры

&НаСервере
Процедура ПослеВводаСтраницыНаСервере()
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЭлемента(ВыбЭлемент, ПараметрыВыбора) Экспорт
	
	Если НЕ ВыбЭлемент = Неопределено Тогда
		
		ВыбранноеЗначение = ВыбЭлемент.Значение;
		ПараметрыФормы = Новый Структура;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("Форма913ОбработкаВыбораЭлемента", ЭтотОбъект, ПараметрыВыбора);
		ОткрытьФорму(ВыбранноеЗначение,ПараметрыФормы,ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаЗначения(Значение, Параметры) Экспорт
	
	Если НЕ Значение = Неопределено Тогда         	
		
		ПроверятьЦифрыВСтроке = Ложь;
		
		Если Параметры.Свойство("ПроверятьЦифрыВСтроке" , ПроверятьЦифрыВСтроке) И ПроверятьЦифрыВСтроке Тогда
			Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Значение) Тогда				
				ТекстСообщения = НСтр("ru = 'Значение содержит нецифровые символы, значение будет очищено'");							  
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);				
				Значение = "";
			КонецЕсли;         		
		КонецЕсли;
		
		Если Найти(Параметры.Область.Имя, "КоличествоМест") > 0 Тогда
			
            Форма913_01ПолеТабличногоДокументаСтраница1.Области["Ф913_01КоличествоМест"].Значение = Значение;
			ПередатьЗначениеВМногострочнуюСтруктуру("Страница1", "Ф913_01КоличествоМест",  Значение, Параметры.Расчет);
			
            Форма913_01ПолеТабличногоДокументаСтраница2.Области["Ф913_01КоличествоМест1"].Значение = Значение;
			ПередатьЗначениеВМногострочнуюСтруктуру("Страница2", "Ф913_01КоличествоМест1", Значение, Параметры.Расчет);       

			СтруктураРеквизитовФормы.СтруктураИтоговыхПолей913_01.Вставить("КоличествоМест", Значение);
			
		Иначе
			
			Параметры.Область.Значение = Значение;			
			ПередатьЗначениеВМногострочнуюСтруктуру(Параметры.ИмяСтраницы, Параметры.Область.Имя, Значение, Параметры.Расчет);       
			
		КонецЕсли;
		
	КонецЕсли;
	           	
КонецПроцедуры

&НаСервере 
Процедура ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ИмяЯчейки, Значение, Расчет = Ложь)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, ИмяСтраницы, ИмяЯчейки, Значение, Расчет);				
	
КонецПроцедуры

&НаСервере
//Процедура выполняет выбор процедуры расчета.
//ВыборРасчета выполняется при восстановлении данных, при изменении поля табличного документа
//
//Параметры:    ТекФорма - имя текущей формы
//              Индекс - индекс строки для многострочной формы
//              Показатель - имя ячейки, откуда была вызвана процедура расчета многострочной
//                           формы, без указания номера строки (например, без "__1")
//
Процедура ВыборРасчета(ТекФорма, Индекс = Неопределено, Показатель = Неопределено) Экспорт
	
	Если ТекФорма = "Форма913_01" Тогда
		Форма913_01РасчетНаСервере(Индекс, Показатель);
	КонецЕсли;		
	
КонецПроцедуры // ВыборРасчета()

&НаСервере
Функция ПолучитьАдресМакетаСКД()
	
	СхемаКомпоновкиДанных = РеквизитФормыВЗначение("ОтчетОбъект").ПолучитьМакет("МакетСКДФорма9132024Кв1");
	
	Возврат ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Выполянет преобразование цифры в римскую нотацию 
//
// Параметры
//		Цифра - число, целое, от 0 до 9
//      РимскаяЕдиница,РимскаяПятерка,РимскаяДесятка - строки, соответствующие римские цифры
//
// Возвращаемое значение
//		строка
//
// Описание
//		записывает "обычную" цифру римскими цифрами,
//		например:
//				ПреобразоватьЦифруВРимскуюНотацию(7,"I","V","X") = "VII"
//
Функция ПреобразоватьЦифруВРимскуюНотацию(Цифра, РимскаяЕдиница, РимскаяПятерка, РимскаяДесятка)
	
	РимскаяЦифра="";
	Если Цифра = 1 Тогда
		РимскаяЦифра = РимскаяЕдиница
	ИначеЕсли Цифра = 2 Тогда
		РимскаяЦифра = РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 3 Тогда
		РимскаяЦифра = РимскаяЕдиница + РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 4 Тогда
		РимскаяЦифра = РимскаяЕдиница + РимскаяПятерка;
	ИначеЕсли Цифра = 5 Тогда
		РимскаяЦифра = РимскаяПятерка;
	ИначеЕсли Цифра = 6 Тогда
		РимскаяЦифра = РимскаяПятерка + РимскаяЕдиница;
	ИначеЕсли Цифра = 7 Тогда
		РимскаяЦифра = РимскаяПятерка + РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 8 Тогда
		РимскаяЦифра = РимскаяПятерка + РимскаяЕдиница + РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 9 Тогда
		РимскаяЦифра = РимскаяЕдиница + РимскаяДесятка;
	КонецЕсли;
	Возврат РимскаяЦифра;
	
КонецФункции //ПреобразоватьЦифруВРимскуюНотацию

&НаКлиентеНаСервереБезКонтекста
Функция ДополнитьСтроку(Знач Стр, Длина, Чем = " ", Режим = 0) Экспорт
	
	СимволовДополнить = Длина - СтрДлина(Стр);
	Добавок = "";
	Для Н=1 по СимволовДополнить Цикл
		Добавок = Добавок + Чем;
	КонецЦикла;
	Возврат ?(Режим = 0, Добавок + Стр, Стр + Добавок);
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьЧислоВРимскуюНотацию(АрабскоеЧисло, ИспЛатинскиеБуквы = Ложь) Экспорт
	
	РимскоеЧисло="";
	cRab = ДополнитьСтроку(АрабскоеЧисло,3);
	
	Если ИспЛатинскиеБуквы Тогда
		c1 = "I";c5 = "V";c10 = "X";c50 = "L";c100 ="C";c500 = "M";c1000 = "D";
		
	Иначе
		c1 = "1";c5 = "У";c10 = "Х";c50 = "Л";c100 ="С";c500 = "М";c1000 = "Д";
	КонецЕсли;
	
	nEd = Число(СтрЗаменить(Сред(cRab,3,1), " ", "0"));
	nDs = Число(СтрЗаменить(Сред(cRab,2,1), " ", "0"));
	nSt = Число(СтрЗаменить(Сред(cRab,1,1), " ", "0"));
	
	РимскоеЧисло = РимскоеЧисло + ПреобразоватьЦифруВРимскуюНотацию(nSt,c100,c500,c1000);
	РимскоеЧисло = РимскоеЧисло + ПреобразоватьЦифруВРимскуюНотацию(nDs,c10,c50,c100);
	РимскоеЧисло = РимскоеЧисло + ПреобразоватьЦифруВРимскуюНотацию(nEd,c1,c5,c10);
	
	Возврат РимскоеЧисло;
	
КонецФункции //ПреобразоватьЧислоВРимскуюНотацию

&НаСервере
Функция ПреобразоватьИмяЯчейкиВКодСтрокиДекларации(Знач ИмяЯчейки)
	
	КодСтрокиДекларации = ИмяЯчейки;
	
	КодСтрокиДекларации = СтрЗаменить(КодСтрокиДекларации, "s_", "");
	КодСтрокиДекларации = СтрЗаменить(КодСтрокиДекларации, "__", ".");
	КодСтрокиДекларации = СтрЗаменить(КодСтрокиДекларации, "_", ".");
	
	ЧислоВхождений = СтрЧислоВхождений(КодСтрокиДекларации, ".");
	
	Если ЧислоВхождений = 4 Тогда 
		ДлинаСтроки 	= СтрДлина(КодСтрокиДекларации); 
		Попытка
			АрабскоеЧисло 	    = Сред(КодСтрокиДекларации, 12, ДлинаСтроки - 11); 
			АрабскоеЧисло 	    = Лев(АрабскоеЧисло, 1);
			БукваКодаСтроки     = Прав(КодСтрокиДекларации, 1);
			Число 			    = ПреобразоватьЧислоВРимскуюНотацию(АрабскоеЧисло, Истина);
			КодСтрокиДекларации = ВРег(Лев(КодСтрокиДекларации, 11) + Число + БукваКодаСтроки); 
		Исключение
			АрабскоеЧисло 	    = Сред(КодСтрокиДекларации, 14, ДлинаСтроки - 13); 
			АрабскоеЧисло 	    = Лев(АрабскоеЧисло, 1);
			Число 			    = ПреобразоватьЧислоВРимскуюНотацию(АрабскоеЧисло, Истина);
			КодСтрокиДекларации = ВРег(Лев(КодСтрокиДекларации, 12) + Число); 
		КонецПопытки;
	Иначе 
		ДлинаСтроки = СтрДлина(КодСтрокиДекларации); 
		АрабскоеЧисло = Сред(КодСтрокиДекларации, 12, ДлинаСтроки - 11); 
		Число = ПреобразоватьЧислоВРимскуюНотацию(АрабскоеЧисло, Истина);
		КодСтрокиДекларации = Лев(КодСтрокиДекларации, 11) + Число; 
	КонецЕсли;
	
	Возврат КодСтрокиДекларации;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Форма 913.00

&НаКлиенте
Процедура Форма913ОбработкаВыбораЭлемента(Результат, ПараметрыВыбора) экспорт
	//
	//Если Результат = Неопределено Тогда
	//	Возврат;
	//Иначе
	//	ВыбранныйЭлемент = Результат;
	//КонецЕсли;
	//
КонецПроцедуры

&НаСервере
Функция Форма913РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь) 
	 
	СтруктураРезультата = Новый Структура();
	
    Запрос =  Новый Запрос;
	
	Запрос.УстановитьПараметр("НачПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);	
    Запрос.УстановитьПараметр("КонПериода", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
    Запрос.УстановитьПараметр("парамНалогоплательщик", ОтчетОбъект.Налогоплательщик);
	
 	Запрос.УстановитьПараметр("парамГоловнаяОрганизация",		 ОбщегоНазначенияБК.ГоловнаяОрганизация(ОтчетОбъект.Налогоплательщик));
	Запрос.УстановитьПараметр("парамВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("парамУвольнение", 				 Перечисления.ПричиныИзмененияСостояния.Увольнение);
	
	// Для раздела налогового учета "КПН" переменная мСписокСтруктурныхЕдиниц содержит только Организации
	МассивСписокОрганизаций = Новый Массив;
	Для Каждого СтруктурнаяЕдиница Из мСписокСтруктурныхЕдиниц Цикл
		Если МассивСписокОрганизаций.Найти(СтруктурнаяЕдиница.Значение) = Неопределено Тогда 
			МассивСписокОрганизаций.Добавить(СтруктурнаяЕдиница.Значение);
		КонецЕсли;
	КонецЦикла;
    Запрос.УстановитьПараметр("СписокОрганизаций", МассивСписокОрганизаций);
	
	Если СтруктураРеквизитовФормы.мНалогоплательщикЯвляетсяИП Тогда
		// ссылка на физлицо, которое описывает самого индивидуального предпринимателя
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", ОтчетОбъект.Налогоплательщик.ИндивидуальныйПредприниматель);
	Иначе
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Неопределено);
	КонецЕсли;
	
    //////////////////////////////////////////////////////
    // строка 913.00.003  - Количество работников (для ИП - включая самого ИП)

	// Сформируем текст запроса с датами месяцев периода
	// первый месяц квартала
	НачалоМесяца = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ПериодыТекст = "ВЫБРАТЬ 
					|	ДАТАВРЕМЯ(" + Формат (НачалоМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК НачалоМесяца,
					|	ДАТАВРЕМЯ(" + Формат (КонецМесяца(НачалоМесяца),"ДФ=гггг,М,д,Ч,м,с") + ") КАК КонецМесяца
					|";
	// прибавим остальные месяцы
	Пока НачалоМесяца <= НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Цикл
		НачалоМесяца = КонецМесяца(НачалоМесяца) + 1;
    	ПериодыТекст = ПериодыТекст + "
    								  |ОБЪЕДИНИТЬ ВСЕ 
    								  |
    								  |ВЫБРАТЬ 
    								  |	   ДАТАВРЕМЯ(" + Формат(НачалоМесяца,"ДФ=гггг,М,д,Ч,м,с") + "),
    								  |	   ДАТАВРЕМЯ(" + Формат(КонецМесяца(НачалоМесяца),"ДФ=гггг,М,д,Ч,м,с") + ")
    								  |";
	КонецЦикла;	

	// Получим даты приема и увольнения для работников организации за период
	РаботникиОрганизацииТекст = "
	|ВЫБРАТЬ
	|	РаботникиОрганизации." +?(СтруктураРеквизитовФормы.мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ФизЛицо КАК ФизЛицо,
	|	РаботникиОрганизации.ОбособленноеПодразделение,
	|	&НачПериода КАК Период,
	|	РаботникиОрганизации.ПричинаИзмененияСостояния
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&НачПериода, 
	|				Организация = &парамГоловнаяОрганизация
	|				И " +?(СтруктураРеквизитовФормы.мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ФизЛицо <> &парамИндивидуальныйПредприниматель
	|				И " +?(СтруктураРеквизитовФормы.мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ВидЗанятости <> &парамВнутреннееСовместительство) КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУвольнение
	|	И РаботникиОрганизации.ОбособленноеПодразделение В (&СписокОрганизаций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизации." +?(СтруктураРеквизитовФормы.мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ФизЛицо КАК ФизЛицо,
	|	РаботникиОрганизации.ОбособленноеПодразделение,
	|	РаботникиОрганизации.Период, 
	|	РаботникиОрганизации.ПричинаИзмененияСостояния
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Период > &НачПериода
	|	И РаботникиОрганизации.Период <= &КонПериода
	|	И РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
	|	И (РаботникиОрганизации." +?(СтруктураРеквизитовФормы.мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ВидЗанятости <> &парамВнутреннееСовместительство)
	|	И РаботникиОрганизации." +?(СтруктураРеквизитовФормы.мПризнакСистемыСотрудниковЗУП20, "Сотрудник.", "") + "ФизЛицо <> &парамИндивидуальныйПредприниматель
	|";

	Запрос.Текст = РаботникиОрганизацииТекст;

	// Получим периоды назначений работников
	ПериодыНазначенийТекст = "
	|ВЫБРАТЬ
	|	ТекущееНазначение.ФизЛицо,
	|	ТекущееНазначение.Период КАК ДатаНачала,
	|	МИНИМУМ(ВЫБОР 
	|				КОГДА СледующееНазначение.Период ЕСТЬ NULL ТОГДА &КонПериода 
	|				ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(СледующееНазначение.Период, ДЕНЬ, -1), ДЕНЬ)
	|			КОНЕЦ) КАК ДатаОкончания
	|ИЗ
	|	(" + РаботникиОрганизацииТекст + ") КАК ТекущееНазначение
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + РаботникиОрганизацииТекст + ") КАК СледующееНазначение
	|		ПО ТекущееНазначение.ФизЛицо = СледующееНазначение.ФизЛицо
	|		   И ТекущееНазначение.Период < СледующееНазначение.Период
	|ГДЕ
	|	ТекущееНазначение.ПричинаИзмененияСостояния <> &парамУвольнение	
	|	И ТекущееНазначение.ОбособленноеПодразделение В (&СписокОрганизаций)
	|СГРУППИРОВАТЬ ПО
	|	ТекущееНазначение.ФизЛицо,
	|	ТекущееНазначение.Период	
	|";

	Запрос.Текст = ПериодыНазначенийТекст;

	// Разобьем данные о назначениях на помесячные записи и подсчитаем число дней за каждый период
	ПериодыНазначенийТекст = "
	|ВЫБРАТЬ
	|	ПериодыНазначений.ФизЛицо,
	|	ДЕНЬ(ВЫБОР // ДатаОкончания
	|			КОГДА ПериодыНазначений.ДатаОкончания < Периоды.КонецМесяца ТОГДА ПериодыНазначений.ДатаОкончания
	|			ИНАЧЕ Периоды.КонецМесяца 
	|		КОНЕЦ) - 
	|	ДЕНЬ(ВЫБОР // ДатаНачала
	|			КОГДА ПериодыНазначений.ДатаНачала > Периоды.НачалоМесяца ТОГДА ПериодыНазначений.ДатаНачала
	|			ИНАЧЕ Периоды.НачалоМесяца
	|		КОНЕЦ) + 1 КАК ДнейРаботыВМесяце,
	|	(ДЕНЬ(ВЫБОР // ДатаОкончания
	|			КОГДА ПериодыНазначений.ДатаОкончания < Периоды.КонецМесяца ТОГДА ПериодыНазначений.ДатаОкончания
	|			ИНАЧЕ Периоды.КонецМесяца 
	|		КОНЕЦ) - 
	|	ДЕНЬ(ВЫБОР // ДатаНачала
	|			КОГДА ПериодыНазначений.ДатаНачала > Периоды.НачалоМесяца ТОГДА ПериодыНазначений.ДатаНачала
	|			ИНАЧЕ Периоды.НачалоМесяца
	|		КОНЕЦ) + 1) * (ВЫБОР КОГДА  ЕСТЬNULL(СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности, ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)
	| ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК ДнейРаботыВМесяцеИнвалид,
	|	(ДЕНЬ(ВЫБОР // ДатаОкончания
	|			КОГДА ПериодыНазначений.ДатаОкончания < Периоды.КонецМесяца ТОГДА ПериодыНазначений.ДатаОкончания
	|			ИНАЧЕ Периоды.КонецМесяца 
	|		КОНЕЦ) - 
	|	ДЕНЬ(ВЫБОР // ДатаНачала
	|			КОГДА ПериодыНазначений.ДатаНачала > Периоды.НачалоМесяца ТОГДА ПериодыНазначений.ДатаНачала
	|			ИНАЧЕ Периоды.НачалоМесяца
	|		КОНЕЦ) + 1) * (ВЫБОР КОГДА ЕСТЬNULL(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер, ЛОЖЬ) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК ДнейРаботыВМесяцеПенсионер,
	|	Периоды.НачалоМесяца,
	|	Периоды.КонецМесяца
	|ИЗ
	|	(" + ПериодыНазначенийТекст + ") КАК ПериодыНазначений
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ПериодыТекст + ") КАК Периоды
	|		ПО ПериодыНазначений.ДатаНачала <= Периоды.КонецМесяца 
	|		   И ПериодыНазначений.ДатаОкончания >= Периоды.НачалоМесяца 
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(
	|				&КонПериода) КАК СведенияОбИнвалидностиФизлиц
	|	ПО (ПериодыНазначений.Физлицо = СведенияОбИнвалидностиФизлиц.Физлицо)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(
	|				&КонПериода) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|	ПО (ПериодыНазначений.Физлицо = СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо)";
	
	Запрос.Текст = ПериодыНазначенийТекст;
	
	// Определим среднесписочную за каждый месяц
	ЧисленностьТекст = "
	|ВЫБРАТЬ
	|	ПериодыНазначений.НачалоМесяца,
	|	ВЫРАЗИТЬ(СУММА(ПериодыНазначений.ДнейРаботыВМесяце) / ДЕНЬ(ПериодыНазначений.КонецМесяца) КАК ЧИСЛО(10, 0)) КАК Среднесписочная,
	|	ВЫРАЗИТЬ(СУММА(ПериодыНазначений.ДнейРаботыВМесяцеИнвалид) / ДЕНЬ(ПериодыНазначений.КонецМесяца) КАК ЧИСЛО(10, 0)) КАК СреднесписочнаяИнвалид,	
	|	ВЫРАЗИТЬ(СУММА(ПериодыНазначений.ДнейРаботыВМесяцеПенсионер) / ДЕНЬ(ПериодыНазначений.КонецМесяца) КАК ЧИСЛО(10, 0)) КАК СреднесписочнаяПенсионер
	|ИЗ
	|	(" + ПериодыНазначенийТекст + ") КАК ПериодыНазначений
	|СГРУППИРОВАТЬ ПО
	|	ПериодыНазначений.НачалоМесяца, 
	|	ПериодыНазначений.КонецМесяца 
	|";

	Запрос.Текст = ЧисленностьТекст;
	Выборка = Запрос.Выполнить().Выбрать();     
	
	//среднесписочная численность работников субъектов предпринимательства рассчитывается как сумма количества работников за налоговый период,
	//поделенная на количество месяцев в периоде
	мДатаНачалаПериодаОтчета = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	мДатаКонцаПериодаОтчета = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	Если Год(мДатаКонцаПериодаОтчета) > Год(мДатаНачалаПериодаОтчета) Тогда
		КоличествоЛет = Год(мДатаКонцаПериодаОтчета) - Год(мДатаНачалаПериодаОтчета);
		КоличествоМесяцев = (Месяц(КонецГода(мДатаНачалаПериодаОтчета)) - Месяц(мДатаНачалаПериодаОтчета) + 1) +
						 ?(КоличествоЛет > 1,КоличествоЛет-1,0)*12 + 
						 (Месяц(мДатаКонцаПериодаОтчета) - Месяц(НачалоГода(мДатаКонцаПериодаОтчета)) + 1);
	Иначе
		КоличествоМесяцев = Месяц(мДатаКонцаПериодаОтчета) - Месяц(мДатаНачалаПериодаОтчета) + 1;
	КонецЕсли;
	СтруктураРеквизитовФормы.мКоличествоМесяцев = КоличествоМесяцев;
	
	СреднесписочнаяЧисленность = 0;
	СреднесписочнаяЧисленностьИнвалид = 0;
	СреднесписочнаяЧисленностьПенсионер = 0;

	Пока Выборка.Следующий() Цикл
	    КоличествоРаботников = Выборка.Среднесписочная;
		КоличествоРаботниковИнвалид = Выборка.СреднесписочнаяИнвалид;
		КоличествоРаботниковПенсионер = Выборка.СреднесписочнаяПенсионер;
		Если КоличествоРаботников <> 0 Тогда // вдруг начали работать с середины квартала
			СреднесписочнаяЧисленность = СреднесписочнаяЧисленность + КоличествоРаботников;				
		КонецЕсли;
		Если КоличествоРаботниковИнвалид <> 0 Тогда // вдруг начали работать с середины квартала
			СреднесписочнаяЧисленностьИнвалид = СреднесписочнаяЧисленностьИнвалид + КоличествоРаботниковИнвалид;					
		КонецЕсли;	
		Если КоличествоРаботниковПенсионер <> 0 Тогда // вдруг начали работать с середины квартала
			СреднесписочнаяЧисленностьПенсионер = СреднесписочнаяЧисленностьПенсионер + КоличествоРаботниковПенсионер;					
		КонецЕсли;		
	КонецЦикла;
               				
	СреднесписочнаяЧисленность = ?(СтруктураРеквизитовФормы.мКоличествоМесяцев <> 0, СреднесписочнаяЧисленность / СтруктураРеквизитовФормы.мКоличествоМесяцев, 0); 	
	СреднесписочнаяЧисленностьИнвалид = ?(СтруктураРеквизитовФормы.мКоличествоМесяцев <> 0, СреднесписочнаяЧисленностьИнвалид / СтруктураРеквизитовФормы.мКоличествоМесяцев, 0); 
	СреднесписочнаяЧисленностьПенсионер = ?(СтруктураРеквизитовФормы.мКоличествоМесяцев <> 0, СреднесписочнаяЧисленностьПенсионер / СтруктураРеквизитовФормы.мКоличествоМесяцев, 0); 
	
	СтруктураРезультата.Вставить("s_913_00_003", Окр(СреднесписочнаяЧисленность));
	СтруктураРезультата.Вставить("s_913_00_003_A", СреднесписочнаяЧисленностьПенсионер);
	СтруктураРезультата.Вставить("s_913_00_003_B", СреднесписочнаяЧисленностьИнвалид);

    Возврат СтруктураРезультата;		 
	
КонецФункции // Форма913РассчитатьДанныеФормы()

&НаСервере
Процедура Форма913ЗаполнитьАвто(Перезаполнить = Ложь) 
	
	КодФормы = "Форма913";
	Очистить(КодФормы, Истина);
	
	Форма913_01ЗаполнитьАвтоНаСервере();
	
	//////////////////////////////////////////
	// Раздел. Расчетные показатели        	

	СтруктураРезультата = Форма913РассчитатьДанныеФормы();
	
	// переносим в структуру формы значения рассчитанных ячеек
	Для Каждого КлючИЗначение Из СтруктураРезультата Цикл
		Если Найти(КлючИЗначение.Ключ, "s_") > 0 Тогда
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, КлючИЗначение.Ключ, КлючИЗначение.Значение, Ложь);
		КонецЕсли;	
	Конеццикла;
	
	Форма913Расчет();

	Модифицированность = Истина;
	
КонецПроцедуры // Форма910ЗаполнитьАвто()

&НаСервере
Процедура Форма913РасчетНаСервере(ИмяЯчейки, Знач ЗначениеЯчейки)
	
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяЯчейки, ЗначениеЯчейки);
		
	КонецЕсли;

	Форма913Расчет(Истина, ИмяЯчейки);

КонецПроцедуры    

&НаСервере
Процедура Форма913Расчет(Изменено = Ложь, ИмяОбласти = Неопределено)
	
	// Расчет вычисляемых ячеек   	
	КодФормы = "Форма913";
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, КодФормы);			
	
	РегламентированнаяОтчетность.ОбновитьТаблицуДанныхОбычнойФормы(ЭтотОбъект, КодФормы, ТаблицаДанных);
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, ЭтотОбъект.КодФормы);
		
КонецПроцедуры

&НаКлиенте
Процедура Форма913Расшифровка(НомерЯчейки, МесяцЯчейки, ИмяЯчейки)
	
	Если ИмяЯчейки = "s_913_00_001" Тогда
		
		Форма913РасшифровкаСКД(ИмяЯчейки);
		
	ИначеЕсли ИмяЯчейки = "s_913_00_002" Тогда	

		ПоказатьРасшифровку913ВВидеРегистраНУпоИПНиСН();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Форма913РасшифровкаСКД(ИмяЯчейки, ПараметрыОтбора = Неопределено)                          	
	
	ИмяЯчейки = ПреобразоватьИмяЯчейкиВКодСтрокиДекларации(ИмяЯчейки);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ИмяРазделаРасшифровки = "Декларация по Розничному налогу:" + СтруктураРеквизитовФормы.мГод + ", Доходы";
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ПолучитьАдресМакетаСКД());
	
	ПользовательскиеПоля = ПользовательскиеНастройки.Элементы.Добавить(Тип("ВыбранныеПоляКомпоновкиДанных"));	
	ПользовательскиеПоля.ИдентификаторПользовательскойНастройки = "Выбор";
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "Регистратор",      НСтр("ru = 'Документ движения'"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "СуммаВДекларации", НСтр("ru = 'Сумма в декларации'"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ОборотДт",         НСтр("ru = 'Оборот Дт'"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПользовательскиеПоля, "ОборотКт",         НСтр("ru = 'Оборот Кт'"));
	
	// Группировки	
	МассивГруппировок = Новый Массив();
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "КодСтроки", НСтр("ru = 'Код строки'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));	
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "Организация", НСтр("ru = 'Организация'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));	
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "Подразделение", НСтр("ru = 'Подразделение'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));	
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "Ставка", НСтр("ru = 'Ставка'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));	
	МассивГруппировок.Добавить(Новый Структура("Использование, Поле, Представление, ТипГруппировки", Истина, "ВидДохода", НСтр("ru = 'Вид дохода'"), ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы")));	
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка",  МассивГруппировок);
	
	// Сортировка
	ПользовательскиеСортировки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ПорядокКомпоновкиДанных"));
	ПользовательскиеСортировки.ИдентификаторПользовательскойНастройки = "Порядок";
	
	НовыйЭлементПорядка = ПользовательскиеСортировки.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовыйЭлементПорядка.Использование  = Истина;
	НовыйЭлементПорядка.Поле  = Новый ПолеКомпоновкиДанных("Регистратор");
	
	//Параметры
	МассивПараметровДанных = Новый Массив();
	
	ПустаяОрганизация   = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	ПустоеПодразделение = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
	Пустойдоход         = ПредопределенноеЗначение("Справочник.Доходы.ПустаяСсылка");
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ПустаяОрганизация",   ПустаяОрганизация);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ПустоеПодразделение", ПустоеПодразделение);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "Пустойдоход",         Пустойдоход);
	
	МассивСписокОрганизаций = Новый Массив;
	Если ПараметрыОтбора = Неопределено Тогда
		Для Каждого СтруктурнаяЕдиница Из мСписокСтруктурныхЕдиниц Цикл
			Если МассивСписокОрганизаций.Найти(СтруктурнаяЕдиница.Значение) = Неопределено Тогда 
				МассивСписокОрганизаций.Добавить(СтруктурнаяЕдиница.Значение);
			КонецЕсли;
		КонецЦикла;
	Иначе
		МассивСписокОрганизаций.Добавить(ПараметрыОтбора.Организация);
	КонецЕсли;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокОрганизаций", МассивСписокОрганизаций);
	
	МассивСтавкаСписокОрганизаций = Новый Массив;
	МассивСтавкаСписокОрганизаций.Добавить(ПустаяОрганизация);
	Для Каждого Организация Из МассивСписокОрганизаций Цикл
		МассивСтавкаСписокОрганизаций.Добавить(Организация);
	КонецЦикла;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СтавкаСписокОрганизаций", МассивСтавкаСписокОрганизаций);
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КодСтроки",     ИмяЯчейки);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "НачалоПериода", НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "КонецПериода",  КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
    СписокСчетовДоходов = ПолучитьСписокСчетовДоходов();	    
    БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "СписокСчетовДоходов", СписокСчетовДоходов);
    
	ВидыСубконтоДоходыПодразделения = Новый Массив;
	ВидыСубконтоДоходыПодразделения.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.Доходы"));
	ВидыСубконтоДоходыПодразделения.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.Подразделения"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ВидыСубконтоДоходыПодразделения", ВидыСубконтоДоходыПодразделения);
	
	ВидыСубконтоДоходы = Новый Массив;
	ВидыСубконтоДоходы.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.Доходы"));
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ВидыСубконтоДоходы", ВидыСубконтоДоходы);
	
    БухгалтерскиеОтчетыКлиентСервер.ДобавитьПараметр(МассивПараметровДанных, "ВедетсяУчетПоПодразделениям", СтруктураРеквизитовФормы.ВедетсяУчетПоПодразделениям);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПараметрыДанных", МассивПараметровДанных);

	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет", СписокСчетовДоходов, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "КорСчет", ПредопределенноеЗначение("ПланСчетов.Типовой.ИтоговаяПрибыльИтоговыйУбыток"), ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии);
	
	Если ПараметрыОтбора <> Неопределено Тогда
		Если СтруктураРеквизитовФормы.ВедетсяУчетПоПодразделениям Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Подразделение", ПараметрыОтбора.Подразделение, ВидСравненияКомпоновкиДанных.Равно, Истина);
		КонецЕсли;
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Ставка", ПараметрыОтбора.Ставка, ВидСравненияКомпоновкиДанных.Равно, Истина);
	КонецЕсли;

	// Прочие настройки
	ТекстЗаголовка = НСтр("ru = 'Регистр налогового учета к строке %1 для Декларации по Розничному налогу'");	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Заголовок", 	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, ИмяЯчейки));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", Истина);	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьПодписи",   Истина);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц.Скопировать());
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода",     СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",      СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Налогоплательщик",  Налогоплательщик);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ТипДанных",  "РегистрыБухгалтерии");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяОбъекта", "Типовой");
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ИмяТаблицы", "Обороты");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	
	ПараметрыФормы.Вставить("ВыводитьЗаголовок", Истина);	
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", ИмяРазделаРасшифровки);
	
	ОткрытьФорму("Отчет.УниверсальныйОтчетПоМетаданным.Форма.ФормаОтчета", ПараметрыФормы,, Истина);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Форма 913.01

&НаСервере
Процедура Форма913_01ОбработкаПодбораНаСервере(Расшифровка, ИмяЯчейки, ИмяГруппы, НомерСтроки) Экспорт   

	Если ИмяЯчейки = "Ф913_01Ставка" Тогда
		
		СсылкаСтавка = Расшифровка;
		
		ОбластьНаименование = "Ф913_01Ставка__" + НомерСтроки;
		
		Форма913_01ПолеТабличногоДокументаСтраница2.Области[ОбластьНаименование].Значение = Расшифровка.Ставка;
		Форма913_01ПолеТабличногоДокументаСтраница2.Области[ОбластьНаименование].Расшифровка = Расшифровка;
		
		РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, "Страница2", ОбластьНаименование, Расшифровка.Ставка, Истина, СсылкаСтавка);				
		
	КонецЕсли;
		
КонецПроцедуры 

&НаКлиенте
Процедура Форма913_01ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	ОбластьРасшифровки = ЭтаФорма.ТекущийЭлемент.ТекущаяОбласть;	
	СсылкаРасшифровки = ВыбранноеЗначение;          
	
	НомерСтроки = Сред(ОбластьРасшифровки.Имя, Найти(ОбластьРасшифровки.Имя, "__") + 2);
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СтавкиРозничногоНалога") Тогда
		ИмяГруппы = "Страница2";                                                    
		Ячейка    = "Ф913_01Ставка";
	Иначе
		Возврат;                                                      
	КонецЕсли;	 
	
	Форма913_01ОбработкаПодбораНаСервере(СсылкаРасшифровки, Ячейка, ИмяГруппы, НомерСтроки);
	 
КонецПроцедуры

&НаСервере
Функция Форма913_01РассчитатьРасходыНаДоходыРаботников(ВыдаватьСообщения = Ложь)
	
    Запрос =  Новый Запрос;
	
	Признак_ИПЮрЛицо = Ложь;
	// если налогоплательщик - ИП, то исключим данные самого индивидуального предпринимателя
	Если ОтчетОбъект.Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", ОтчетОбъект.Налогоплательщик.ИндивидуальныйПредприниматель);
	Иначе
		Признак_ИПЮрЛицо = Истина;
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", Неопределено);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачПериода",    СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);	
	Запрос.УстановитьПараметр("парамПериодПо", КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
	// Для раздела налогового учета "КПН" переменная мСписокСтруктурныхЕдиниц содержит только Организации
	МассивСписокОрганизаций = Новый Массив;
	Для Каждого СтруктурнаяЕдиница Из мСписокСтруктурныхЕдиниц Цикл
		Если МассивСписокОрганизаций.Найти(СтруктурнаяЕдиница.Значение) = Неопределено Тогда 
			МассивСписокОрганизаций.Добавить(СтруктурнаяЕдиница.Значение);
		КонецЕсли;
	КонецЦикла;
    Запрос.УстановитьПараметр("СписокОрганизаций", МассивСписокОрганизаций);
	
	/////////////////////////////////////////////////////////
	// Начисленные доходы физических лиц
 	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) КАК НачисленныеДоходы
	|ПОМЕСТИТЬ ВТ_ИПНСведенияОДоходах
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	|			&НачПериода,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Организация В (&СписокОрганизаций)
	|				И ФизЛицо <> &парамИндивидуальныйПредприниматель
	|				И ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ИПНСведенияОДоходах
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ЕПСведенияОДоходах.Период, МЕСЯЦ),
	|	СУММА(ВЫБОР
	|			КОГДА ЕПСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА ЕПСведенияОДоходах.ОблагаемаяБазаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ)
	|ИЗ
	|	РегистрНакопления.ЕПСведенияОДоходах.Обороты(
	|			&НачПериода,
	|			&парамПериодПо,
	|			МЕСЯЦ,
	|			Организация В (&СписокОрганизаций)
	|				И ФизЛицо <> &парамИндивидуальныйПредприниматель) КАК ЕПСведенияОДоходах
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ЕПСведенияОДоходах.Период, МЕСЯЦ)
	|";		
				
	// Необходимо добавить получателей по исполнительным листам
	Если ПризнакАлиментов Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// ставим приходы по ИЛ как начисление получателям алиментов
		|ВЫБРАТЬ		
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовПриход) КАК НачисленныеДоходы
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.Обороты(
		|				&НачПериода,
		|				&парамПериодПо,
		|				МЕСЯЦ,
		|				Организация В (&СписокОрганизаций)
		|				И Получатель.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)		
		|				) КАК ВзаиморасчетыСПолучателямиИЛ
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.Период, МЕСЯЦ)
		|";		
				
	КонецЕсли;
	
	// В сумму начисленных доходов могут включаться начисление ОППВ
	Если ВключатьОППВВДоходыРаботников Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ОППВРасчетыСФондами.Взнос) КАК НачисленныеДоходы   // ОППВ
		|ИЗ
		|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
		|ГДЕ
		|	ОППВРасчетыСФондами.Организация В (&СписокОрганизаций)
		|	И ОППВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &НачПериода И &парамПериодПо
		|	И ОППВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОППВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ОППВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ОППВРасчетыСФондами.ФизЛицо <> &парамИндивидуальныйПредприниматель	
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
		|";

	КонецЕсли;   
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПНСведенияОДоходах.МесяцНалоговогоПериода КАК НачалоМесяца,
	|	СУММА(ИПНСведенияОДоходах.НачисленныеДоходы) КАК НачисленныеДоходы
	|ИЗ
	|	ВТ_ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПНСведенияОДоходах.МесяцНалоговогоПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоМесяца
	|
	|ИТОГИ
	|	СУММА(НачисленныеДоходы)
	|ПО
	|	ОБЩИЕ";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции

&НаСервере
Функция Форма913_01РассчитатьДанныеФормы(ВыдаватьСообщения = Ложь)
	
    Запрос =  Новый Запрос;
	
	Запрос.УстановитьПараметр("НачПериода",  СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);	
    Запрос.УстановитьПараметр("КонПериода",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);

    Запрос.УстановитьПараметр("СчетПрибыльУбытокОтчетногоГода", ПланыСчетов.Типовой.ИтоговаяПрибыльИтоговыйУбыток); // 5710
    
    СписокСчетовДоходов = ПолучитьСписокСчетовДоходов();	    
    Запрос.УстановитьПараметр("СписокСчетовДоходов", СписокСчетовДоходов);
    
    Запрос.УстановитьПараметр("МассивВидыСубконто", ПолучитьВидСубконтоДоходы().ВыгрузитьЗначения());
    Запрос.УстановитьПараметр("ВедетсяУчетПоПодразделениям", СтруктураРеквизитовФормы.ВедетсяУчетПоПодразделениям);
	
	ПустаяОрганизация   = Справочники.Организации.ПустаяСсылка();
	ПустоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	ПустойДоход         = Справочники.Доходы.ПустаяСсылка();
	
    Запрос.УстановитьПараметр("ПустаяОрганизация", ПустаяОрганизация);
    Запрос.УстановитьПараметр("ПустоеПодразделение", ПустоеПодразделение);
    Запрос.УстановитьПараметр("ПустойДоход", ПустойДоход);
	
	// Для раздела налогового учета "КПН" переменная мСписокСтруктурныхЕдиниц содержит только Организации
	МассивСписокОрганизаций = Новый Массив;
	Для Каждого СтруктурнаяЕдиница Из мСписокСтруктурныхЕдиниц Цикл
		Если МассивСписокОрганизаций.Найти(СтруктурнаяЕдиница.Значение) = Неопределено Тогда 
			МассивСписокОрганизаций.Добавить(СтруктурнаяЕдиница.Значение);
		КонецЕсли;
	КонецЦикла;
    Запрос.УстановитьПараметр("СписокОрганизаций", МассивСписокОрганизаций);
	
	МассивСтавкаСписокОрганизаций = Новый Массив;
	МассивСтавкаСписокОрганизаций.Добавить(ПустаяОрганизация);
	Для Каждого Организация Из МассивСписокОрганизаций Цикл
		МассивСтавкаСписокОрганизаций.Добавить(Организация);
	КонецЦикла;
    Запрос.УстановитьПараметр("СтавкаСписокОрганизаций", МассивСтавкаСписокОрганизаций);
	
	МассивСписокСтруктурныхЕдиниц = Новый Массив;
	МассивСписокСтруктурныхЕдиниц.Добавить(ПустаяОрганизация);
	МассивСписокСтруктурныхЕдиниц.Добавить(ПустоеПодразделение);
    Запрос.УстановитьПараметр("СтавкаСписокСтруктурныхЕдиниц", МассивСписокСтруктурныхЕдиниц);
	
	// определим облагаемые доход за период
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОСтавкахРозничногоНалогаСрезПоследних.Организация КАК Организация,
	|	СведенияОСтавкахРозничногоНалогаСрезПоследних.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	СведенияОСтавкахРозничногоНалогаСрезПоследних.Подразделение КАК Подразделение,
	|	СведенияОСтавкахРозничногоНалогаСрезПоследних.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахРозничногоНалогаСрезПоследних.Ставка КАК Ставка
	|ПОМЕСТИТЬ ВТ_СтавкиСрезПоследних
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахРозничногоНалога.СрезПоследних(&КонПериода, Организация В (&СтавкаСписокОрганизаций)) КАК СведенияОСтавкахРозничногоНалогаСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СтруктурноеПодразделение,
	|	Подразделение,
	|	ВидДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтавкиСрезПоследних.Организация КАК Организация,
	|	СтавкиСрезПоследних.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	СтавкиСрезПоследних.Подразделение КАК Подразделение,
	|	СтавкиСрезПоследних.ВидДохода КАК ВидДохода,
	|	СтавкиСрезПоследних.Ставка КАК Ставка,
	|	ВЫБОР
	|		КОГДА СтавкиСрезПоследних.Организация <> &ПустаяОрганизация
	|				И СтавкиСрезПоследних.СтруктурноеПодразделение <> &ПустоеПодразделение
	|				И СтавкиСрезПоследних.Подразделение <> &ПустоеПодразделение
	|				И СтавкиСрезПоследних.ВидДохода <> &ПустойДоход
	|			ТОГДА 1
	|		КОГДА СтавкиСрезПоследних.Организация = &ПустаяОрганизация
	|				И СтавкиСрезПоследних.СтруктурноеПодразделение <> &ПустоеПодразделение
	|				И СтавкиСрезПоследних.Подразделение <> &ПустоеПодразделение
	|				И СтавкиСрезПоследних.ВидДохода <> &ПустойДоход
	|			ТОГДА 2
	|		КОГДА СтавкиСрезПоследних.Организация <> &ПустаяОрганизация
	|				И СтавкиСрезПоследних.СтруктурноеПодразделение = &ПустоеПодразделение
	|				И СтавкиСрезПоследних.Подразделение <> &ПустоеПодразделение
	|				И СтавкиСрезПоследних.ВидДохода <> &ПустойДоход
	|			ТОГДА 3
	|		КОГДА СтавкиСрезПоследних.Организация = &ПустаяОрганизация
	|				И СтавкиСрезПоследних.СтруктурноеПодразделение = &ПустоеПодразделение
	|				И СтавкиСрезПоследних.Подразделение <> &ПустоеПодразделение
	|				И СтавкиСрезПоследних.ВидДохода <> &ПустойДоход
	|			ТОГДА 4
	|		КОГДА СтавкиСрезПоследних.Организация <> &ПустаяОрганизация
	|				И СтавкиСрезПоследних.СтруктурноеПодразделение <> &ПустоеПодразделение
	|				И СтавкиСрезПоследних.Подразделение = &ПустоеПодразделение
	|				И СтавкиСрезПоследних.ВидДохода <> &ПустойДоход
	|			ТОГДА 5
	|		КОГДА СтавкиСрезПоследних.Организация = &ПустаяОрганизация
	|				И СтавкиСрезПоследних.СтруктурноеПодразделение <> &ПустоеПодразделение
	|				И СтавкиСрезПоследних.Подразделение = &ПустоеПодразделение
	|				И СтавкиСрезПоследних.ВидДохода <> &ПустойДоход
	|			ТОГДА 6
	|		КОГДА СтавкиСрезПоследних.Организация <> &ПустаяОрганизация
	|				И СтавкиСрезПоследних.СтруктурноеПодразделение = &ПустоеПодразделение
	|				И СтавкиСрезПоследних.Подразделение = &ПустоеПодразделение
	|				И СтавкиСрезПоследних.ВидДохода <> &ПустойДоход
	|			ТОГДА 7
	|		КОГДА СтавкиСрезПоследних.Организация = &ПустаяОрганизация
	|				И СтавкиСрезПоследних.СтруктурноеПодразделение = &ПустоеПодразделение
	|				И СтавкиСрезПоследних.Подразделение = &ПустоеПодразделение
	|				И СтавкиСрезПоследних.ВидДохода <> &ПустойДоход
	|			ТОГДА 8
	|		КОГДА СтавкиСрезПоследних.Организация <> &ПустаяОрганизация
	|				И СтавкиСрезПоследних.СтруктурноеПодразделение <> &ПустоеПодразделение
	|				И СтавкиСрезПоследних.Подразделение <> &ПустоеПодразделение
	|				И СтавкиСрезПоследних.ВидДохода = &ПустойДоход
	|			ТОГДА 9
	|		КОГДА СтавкиСрезПоследних.Организация = &ПустаяОрганизация
	|				И СтавкиСрезПоследних.СтруктурноеПодразделение <> &ПустоеПодразделение
	|				И СтавкиСрезПоследних.Подразделение <> &ПустоеПодразделение
	|				И СтавкиСрезПоследних.ВидДохода = &ПустойДоход
	|			ТОГДА 10
	|		КОГДА СтавкиСрезПоследних.Организация <> &ПустаяОрганизация
	|				И СтавкиСрезПоследних.СтруктурноеПодразделение = &ПустоеПодразделение
	|				И СтавкиСрезПоследних.Подразделение <> &ПустоеПодразделение
	|				И СтавкиСрезПоследних.ВидДохода = &ПустойДоход
	|			ТОГДА 11
	|		КОГДА СтавкиСрезПоследних.Организация = &ПустаяОрганизация
	|				И СтавкиСрезПоследних.СтруктурноеПодразделение = &ПустоеПодразделение
	|				И СтавкиСрезПоследних.Подразделение <> &ПустоеПодразделение
	|				И СтавкиСрезПоследних.ВидДохода = &ПустойДоход
	|			ТОГДА 12
	|		КОГДА СтавкиСрезПоследних.Организация <> &ПустаяОрганизация
	|				И СтавкиСрезПоследних.СтруктурноеПодразделение <> &ПустоеПодразделение
	|				И СтавкиСрезПоследних.Подразделение = &ПустоеПодразделение
	|				И СтавкиСрезПоследних.ВидДохода = &ПустойДоход
	|			ТОГДА 13
	|		КОГДА СтавкиСрезПоследних.Организация = &ПустаяОрганизация
	|				И СтавкиСрезПоследних.СтруктурноеПодразделение <> &ПустоеПодразделение
	|				И СтавкиСрезПоследних.Подразделение = &ПустоеПодразделение
	|				И СтавкиСрезПоследних.ВидДохода = &ПустойДоход
	|			ТОГДА 14
	|		КОГДА СтавкиСрезПоследних.Организация <> &ПустаяОрганизация
	|				И СтавкиСрезПоследних.СтруктурноеПодразделение = &ПустоеПодразделение
	|				И СтавкиСрезПоследних.Подразделение = &ПустоеПодразделение
	|				И СтавкиСрезПоследних.ВидДохода = &ПустойДоход
	|			ТОГДА 15
	|		КОГДА СтавкиСрезПоследних.Организация = &ПустаяОрганизация
	|				И СтавкиСрезПоследних.СтруктурноеПодразделение = &ПустоеПодразделение
	|				И СтавкиСрезПоследних.Подразделение = &ПустоеПодразделение
	|				И СтавкиСрезПоследних.ВидДохода = &ПустойДоход
	|			ТОГДА 16
	|		ИНАЧЕ 99
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Ставки
	|ИЗ
	|	ВТ_СтавкиСрезПоследних КАК СтавкиСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СтруктурноеПодразделение,
	|	Подразделение,
	|	ВидДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТиповойОбороты.Счет КАК Счет,
	|	ТиповойОбороты.Организация КАК Организация,
	|	ТиповойОбороты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ТиповойОбороты.Субконто1 КАК ВидДохода,
	|	ВЫБОР
	|		КОГДА &ВедетсяУчетПоПодразделениям
	|			ТОГДА ТиповойОбороты.Субконто2
	|		ИНАЧЕ &ПустоеПодразделение
	|	КОНЕЦ КАК Подразделение,
	|	ТиповойОбороты.СуммаОборотДт КАК СуммаОборотДт,
	|	ТиповойОбороты.СуммаОборотКт КАК СуммаОборотКт
	|ПОМЕСТИТЬ ВТ_ТиповойОбороты
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			,
	|			Счет В ИЕРАРХИИ (&СписокСчетовДоходов),
	|			&МассивВидыСубконто,
	|			Организация В (&СписокОрганизаций)
	|				И ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Доходы).ЯвляетсяОбъектомНалогообложенияПриСпециальныхНалоговыхРежимах, ЛОЖЬ),
	|			КорСчет <> &СчетПрибыльУбытокОтчетногоГода,
	|			) КАК ТиповойОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СтруктурноеПодразделение,
	|	Подразделение,
	|	ВидДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ТиповойОбороты.Организация КАК Организация,
	|	ВТ_ТиповойОбороты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВТ_ТиповойОбороты.Подразделение КАК Подразделение,
	|	ВТ_ТиповойОбороты.ВидДохода КАК ВидДохода
	|ПОМЕСТИТЬ ВТ_КлючиАналитикиПроводок
	|ИЗ
	|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СтруктурноеПодразделение,
	|	Подразделение,
	|	ВидДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КлючиАналитикиПроводок.Организация КАК Организация,
	|	ВТ_КлючиАналитикиПроводок.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВТ_КлючиАналитикиПроводок.Подразделение КАК Подразделение,
	|	ВТ_КлючиАналитикиПроводок.ВидДохода КАК ВидДохода,
	|	ВТ_Ставки.Ставка КАК Ставка,
	|	МИНИМУМ(ВТ_Ставки.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ВТ_ПриоритетыСтавокКлючейАналитики
	|ИЗ
	|	ВТ_КлючиАналитикиПроводок КАК ВТ_КлючиАналитикиПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Ставки КАК ВТ_Ставки
	|		ПО (ВТ_КлючиАналитикиПроводок.Организация = ВТ_Ставки.Организация
	|				ИЛИ ВТ_Ставки.Организация = &ПустаяОрганизация)
	|			И (ВТ_КлючиАналитикиПроводок.СтруктурноеПодразделение = ВТ_Ставки.СтруктурноеПодразделение
	|				ИЛИ ВТ_Ставки.СтруктурноеПодразделение = &ПустоеПодразделение)
	|			И (ВТ_КлючиАналитикиПроводок.Подразделение = ВТ_Ставки.Подразделение
	|				ИЛИ ВТ_Ставки.Подразделение = &ПустоеПодразделение)
	|			И (ВТ_КлючиАналитикиПроводок.ВидДохода = ВТ_Ставки.ВидДохода
	|				ИЛИ ВТ_Ставки.ВидДохода = &ПустойДоход)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_КлючиАналитикиПроводок.Организация,
	|	ВТ_КлючиАналитикиПроводок.СтруктурноеПодразделение,
	|	ВТ_КлючиАналитикиПроводок.Подразделение,
	|	ВТ_КлючиАналитикиПроводок.ВидДохода,
	|	ВТ_Ставки.Ставка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СтруктурноеПодразделение,
	|	Подразделение,
	|	ВидДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПриоритетыСтавокКлючейАналитики.Организация КАК Организация,
	|	ВТ_ПриоритетыСтавокКлючейАналитики.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВТ_ПриоритетыСтавокКлючейАналитики.Подразделение КАК Подразделение,
	|	ВТ_ПриоритетыСтавокКлючейАналитики.ВидДохода КАК ВидДохода,
	|	МИНИМУМ(ВТ_ПриоритетыСтавокКлючейАналитики.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ВТ_МинимальныеПриоритетыСтавок
	|ИЗ
	|	ВТ_ПриоритетыСтавокКлючейАналитики КАК ВТ_ПриоритетыСтавокКлючейАналитики
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПриоритетыСтавокКлючейАналитики.Организация,
	|	ВТ_ПриоритетыСтавокКлючейАналитики.СтруктурноеПодразделение,
	|	ВТ_ПриоритетыСтавокКлючейАналитики.Подразделение,
	|	ВТ_ПриоритетыСтавокКлючейАналитики.ВидДохода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СтруктурноеПодразделение,
	|	Подразделение,
	|	ВидДохода,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МинимальныеПриоритетыСтавок.Организация КАК Организация,
	|	ВТ_МинимальныеПриоритетыСтавок.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВТ_МинимальныеПриоритетыСтавок.Подразделение КАК Подразделение,
	|	ВТ_МинимальныеПриоритетыСтавок.ВидДохода КАК ВидДохода,
	|	ВТ_МинимальныеПриоритетыСтавок.Приоритет КАК Приоритет,
	|	ВТ_ПриоритетыСтавокКлючейАналитики.Ставка КАК Ставка
	|ПОМЕСТИТЬ ВТ_СтавкиКлючейАналитики
	|ИЗ
	|	ВТ_МинимальныеПриоритетыСтавок КАК ВТ_МинимальныеПриоритетыСтавок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПриоритетыСтавокКлючейАналитики КАК ВТ_ПриоритетыСтавокКлючейАналитики
	|		ПО ВТ_МинимальныеПриоритетыСтавок.Организация = ВТ_ПриоритетыСтавокКлючейАналитики.Организация
	|			И ВТ_МинимальныеПриоритетыСтавок.СтруктурноеПодразделение = ВТ_ПриоритетыСтавокКлючейАналитики.СтруктурноеПодразделение
	|			И ВТ_МинимальныеПриоритетыСтавок.Подразделение = ВТ_ПриоритетыСтавокКлючейАналитики.Подразделение
	|			И ВТ_МинимальныеПриоритетыСтавок.ВидДохода = ВТ_ПриоритетыСтавокКлючейАналитики.ВидДохода
	|			И ВТ_МинимальныеПриоритетыСтавок.Приоритет = ВТ_ПриоритетыСтавокКлючейАналитики.Приоритет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СтруктурноеПодразделение,
	|	Подразделение,
	|	ВидДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_КлючиАналитикиПроводок.Подразделение КАК Подразделение,
	|	КонтактнаяИнформация.Поле2 КАК Область,
	|	КонтактнаяИнформация.Поле3 КАК Район,
	|	КонтактнаяИнформация.Поле4 КАК Город,
	|	КонтактнаяИнформация.Поле5 КАК НаселенныйПункт,
	|	КонтактнаяИнформация.Поле6 КАК Улица,
	|	КонтактнаяИнформация.Поле7 КАК Дом,
	|	КонтактнаяИнформация.Поле8 КАК Корпус,
	|	КонтактнаяИнформация.Поле9 КАК Квартира
	|ПОМЕСТИТЬ ВТ_КонтактнаяИнформация
	|ИЗ
	|	ВТ_КлючиАналитикиПроводок КАК ВТ_КлючиАналитикиПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ВТ_КлючиАналитикиПроводок.Подразделение = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации))
	|ГДЕ
	|	НЕ КонтактнаяИнформация.Объект ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ВТ_КлючиАналитикиПроводок.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ТОГДА ВТ_КлючиАналитикиПроводок.Организация
	|		ИНАЧЕ ВТ_КлючиАналитикиПроводок.Организация.ИндивидуальныйПредприниматель
	|	КОНЕЦ КАК ОрганизацияКИ,
	|	ВТ_КлючиАналитикиПроводок.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ОрганизацияКИ
	|ИЗ
	|	ВТ_КлючиАналитикиПроводок КАК ВТ_КлючиАналитикиПроводок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОрганизацияКИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ОрганизацияКИ.Организация КАК Организация,
	|	КонтактнаяИнформация.Поле2 КАК Область,
	|	КонтактнаяИнформация.Поле3 КАК Район,
	|	КонтактнаяИнформация.Поле4 КАК Город,
	|	КонтактнаяИнформация.Поле5 КАК НаселенныйПункт,
	|	КонтактнаяИнформация.Поле6 КАК Улица,
	|	КонтактнаяИнформация.Поле7 КАК Дом,
	|	КонтактнаяИнформация.Поле8 КАК Корпус,
	|	КонтактнаяИнформация.Поле9 КАК Квартира
	|ПОМЕСТИТЬ ВТ_КонтактнаяИнформацияОрганизаций
	|ИЗ
	|	ВТ_ОрганизацияКИ КАК ВТ_ОрганизацияКИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ВТ_ОрганизацияКИ.ОрганизацияКИ = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (КонтактнаяИнформация.Вид В (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица)))
	|ГДЕ
	|	НЕ КонтактнаяИнформация.Объект ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТиповойОбороты.Счет КАК Счет,
	|	ВТ_ТиповойОбороты.Организация КАК Организация,
	|	ВТ_ТиповойОбороты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВТ_ТиповойОбороты.ВидДохода КАК ВидДохода,
	|	ВТ_ТиповойОбороты.Подразделение КАК Подразделение,
	|	ВТ_ТиповойОбороты.СуммаОборотДт КАК СуммаОборотДт,
	|	ВТ_ТиповойОбороты.СуммаОборотКт КАК СуммаОборотКт,
	|	ЕСТЬNULL(ВТ_СтавкиКлючейАналитики.Ставка, ЗНАЧЕНИЕ(Справочник.СтавкиРозничногоНалога.ПустаяСсылка)) КАК СтавкаСсылка,
	|	ЕСТЬNULL(ВТ_СтавкиКлючейАналитики.Ставка.Ставка, 0) КАК СтавкаЗначение,
	|	ВТ_ТиповойОбороты.Подразделение КАК ПодразделениеКоличество,
	|	ЕСТЬNULL(ВТ_КонтактнаяИнформация.Область, ЕСТЬNULL(ВТ_КонтактнаяИнформацияОрганизаций.Область, """")) КАК Область,
	|	ЕСТЬNULL(ВТ_КонтактнаяИнформация.Район, ЕСТЬNULL(ВТ_КонтактнаяИнформацияОрганизаций.Район, """")) КАК Район,
	|	ЕСТЬNULL(ВТ_КонтактнаяИнформация.Город, ЕСТЬNULL(ВТ_КонтактнаяИнформацияОрганизаций.Город, """")) КАК Город,
	|	ЕСТЬNULL(ВТ_КонтактнаяИнформация.НаселенныйПункт, ЕСТЬNULL(ВТ_КонтактнаяИнформацияОрганизаций.НаселенныйПункт, """")) КАК НаселенныйПункт,
	|	ЕСТЬNULL(ВТ_КонтактнаяИнформация.Улица, ЕСТЬNULL(ВТ_КонтактнаяИнформацияОрганизаций.Улица, """")) КАК Улица,
	|	ЕСТЬNULL(ВТ_КонтактнаяИнформация.Дом, ЕСТЬNULL(ВТ_КонтактнаяИнформацияОрганизаций.Дом, """")) КАК Дом,
	|	ЕСТЬNULL(ВТ_КонтактнаяИнформация.Корпус, ЕСТЬNULL(ВТ_КонтактнаяИнформацияОрганизаций.Корпус, """")) КАК Корпус,
	|	ЕСТЬNULL(ВТ_КонтактнаяИнформация.Квартира, ЕСТЬNULL(ВТ_КонтактнаяИнформацияОрганизаций.Квартира, """")) КАК Квартира,
	|	ЕСТЬNULL(КонтрагентыПодразделений.КодОрганаГосударственныхДоходов, ЕСТЬNULL(КонтрагентыОрганизаций.КодОрганаГосударственныхДоходов, """")) КАК КодУГД
	|ИЗ
	|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтавкиКлючейАналитики КАК ВТ_СтавкиКлючейАналитики
	|		ПО ВТ_ТиповойОбороты.Организация = ВТ_СтавкиКлючейАналитики.Организация
	|			И ВТ_ТиповойОбороты.СтруктурноеПодразделение = ВТ_СтавкиКлючейАналитики.СтруктурноеПодразделение
	|			И ВТ_ТиповойОбороты.Подразделение = ВТ_СтавкиКлючейАналитики.Подразделение
	|			И ВТ_ТиповойОбороты.ВидДохода = ВТ_СтавкиКлючейАналитики.ВидДохода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтактнаяИнформация КАК ВТ_КонтактнаяИнформация
	|		ПО ВТ_ТиповойОбороты.Подразделение = ВТ_КонтактнаяИнформация.Подразделение
	|			И (ВТ_ТиповойОбороты.Подразделение <> &ПустоеПодразделение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтактнаяИнформацияОрганизаций КАК ВТ_КонтактнаяИнформацияОрганизаций
	|		ПО ВТ_ТиповойОбороты.Организация = ВТ_КонтактнаяИнформацияОрганизаций.Организация
	|			И (ВТ_ТиповойОбороты.Подразделение = &ПустоеПодразделение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК КонтрагентыПодразделений
	|		ПО ВТ_ТиповойОбороты.Подразделение.НалоговыйКомитет = КонтрагентыПодразделений.Ссылка
	|			И (ВТ_ТиповойОбороты.Подразделение <> &ПустоеПодразделение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК КонтрагентыОрганизаций
	|		ПО ВТ_ТиповойОбороты.Организация.НалоговыйКомитет = КонтрагентыОрганизаций.Ссылка
	|			И (ВТ_ТиповойОбороты.Подразделение = &ПустоеПодразделение)
	|ГДЕ
	|	НЕ(ЕСТЬNULL(ВТ_СтавкиКлючейАналитики.Ставка.Ставка, 0) = 0
	|				И ЕСТЬNULL(ВТ_СтавкиКлючейАналитики.Ставка, ЗНАЧЕНИЕ(Справочник.СтавкиРозничногоНалога.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.СтавкиРозничногоНалога.ПустаяСсылка))
	|ИТОГИ
	|	СУММА(СуммаОборотДт),
	|	СУММА(СуммаОборотКт),
	|	МИНИМУМ(СтавкаЗначение),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПодразделениеКоличество),
	|	МИНИМУМ(Область),
	|	МИНИМУМ(Район),
	|	МИНИМУМ(Город),
	|	МИНИМУМ(НаселенныйПункт),
	|	МИНИМУМ(Улица),
	|	МИНИМУМ(Дом),
	|	МИНИМУМ(Корпус),
	|	МИНИМУМ(Квартира),
	|	МИНИМУМ(КодУГД)
	|ПО
	|	ОБЩИЕ,
	|	Организация,
	|	Подразделение,
	|	СтавкаСсылка";
	
	Если НЕ СтруктураРеквизитовФормы.ВедетсяУчетПоПодразделениям Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТиповойОбороты.Субконто2", "&ПустоеПодразделение");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() и ВыдаватьСообщения Тогда
		РасходПоДоходамРаботников = СтруктураРеквизитовФормы.СтруктураИтоговыхПолей913_01.РасходПоДоходамРаботников;
		Если РасходПоДоходамРаботников = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Данные для заполнения формы 913.01 за отчетный период отсутствуют...'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура Форма913_01ЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)
	
	ТекИмяФормы = "Форма913_01";
	Очистить(ТекИмяФормы, Истина);

	ТекущаяСтраница = 1;
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы",ТекИмяФормы));
	
	Если СтрокаФормы <> Неопределено Тогда
		СтрокаФормы.ВсегоСтраниц = 1;
	КонецЕсли;     		
	
	Если НЕ Перезаполнить Тогда  
		Текст = НСтр("ru = 'Расчет приложения 913.01'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли;
	
	ВыборкаРасходыНаДоходы = Форма913_01РассчитатьРасходыНаДоходыРаботников(Истина).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	РасходПоДоходамРаботников = 0;
	Пока ВыборкаРасходыНаДоходы.Следующий() Цикл
		РасходПоДоходамРаботников = РасходПоДоходамРаботников + Окр(ВыборкаРасходыНаДоходы.НачисленныеДоходы);
	КонецЦикла;
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "РасходПоДоходамРаботников", РасходПоДоходамРаботников);
	СтруктураРеквизитовФормы.СтруктураИтоговыхПолей913_01.Вставить("РасходПоДоходамРаботников", РасходПоДоходамРаботников);
	
	ВыборкаОбщийИтог = Форма913_01РассчитатьДанныеФормы(Истина).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	СтруктураФормы = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, ТекИмяФормы);
	
	Для Каждого ЭлементСтруктуры Из СтруктураФормы Цикл
		
		НомерСтроки = 2;
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		ТаблицаШапкаИПодвал = ЭлементСтруктуры.Значение.ШапкаИПодвал;
		ТаблицаСтрокГруппы  = ЭлементСтруктуры.Значение.Строки;
		ТаблицаСтрокГруппы.Очистить();
		
		ОбластьФ913_01УдельныйВес = ТаблицаШапкаИПодвал.Найти("Ф913_01УдельныйВес", "ИмяОбласти");
		
		ИтогоДоход = 0;
		МаксДоход = 0;
		ЭлементМаксДоход = Неопределено;

		ВыборкаОбщийИтог.Сбросить();
		
		Пока ВыборкаОбщийИтог.Следующий() Цикл
			
			КоличествоМест = ВыборкаОбщийИтог.ПодразделениеКоличество;
			ПараметрКоличествоМест = ТаблицаШапкаИПодвал.Найти("КоличествоМест", "ИмяПараметра");
			Если  Не ПараметрКоличествоМест = Неопределено Тогда
				ПараметрКоличествоМест.Значение = КоличествоМест;
			КонецЕсли;	
			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "КоличествоМест", КоличествоМест);
			СтруктураРеквизитовФормы.СтруктураИтоговыхПолей913_01.Вставить("КоличествоМест", КоличествоМест);
			
			ИтогоДоход = ВыборкаОбщийИтог.СуммаОборотКт - ВыборкаОбщийИтог.СуммаОборотДт;
			
			ВыборкаОрганизация = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
			Пока ВыборкаОрганизация.Следующий() Цикл

				ВыборкаПодразделения = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
		        Пока ВыборкаПодразделения.Следующий() Цикл
				
					ВыборкаСтавки = ВыборкаПодразделения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаСтавки.Следующий() Цикл
						
						Если (ВыборкаСтавки.СуммаОборотКт - ВыборкаСтавки.СуммаОборотДт) = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						Элемент = ТаблицаСтрокГруппы.Добавить();
			                
						// заполняем данные строки в форме отчета
						Если ИмяГруппы = "Страница1" Тогда
							
							//Так должны заполнять по отдельности значения выборки 
							//для каждого листа
							Элемент.Ф913_01_A1 = Формат(НомерСтроки, мФорматНомераСтроки);
							
							Если ЗначениеЗаполнено(ВыборкаПодразделения.Подразделение) Тогда
								РасшифровкаПодразделение = ВыборкаПодразделения.Подразделение;
							Иначе
								РасшифровкаПодразделение = ВыборкаПодразделения.Организация;
							КонецЕсли;

							Элемент.Ф913_01КодУГД = Лев(СокрЛП(ВыборкаПодразделения.КодУГД), 4);
							
							Город = СокрЛП(ВыборкаПодразделения.Город);
							Если ПустаяСтрока(Город) Тогда
								Город = СокрЛП(ВыборкаПодразделения.НаселенныйПункт);
							КонецЕсли;
							Элемент.Ф913_01Город = Город;
							РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы, Элемент, "Ф913_01Город", РасшифровкаПодразделение);
							
							Элемент.Ф913_01Улица = СокрЛП(ВыборкаПодразделения.Улица);
							
							Элемент.Ф913_01НомерДома = СокрЛП(ВыборкаПодразделения.Дом);
							
							Элемент.Ф913_01НомерКвартиры = СокрЛП(ВыборкаПодразделения.Квартира);

						ИначеЕсли ИмяГруппы = "Страница2" Тогда
							
							Элемент.Ф913_01_A2 = Формат(НомерСтроки, мФорматНомераСтроки);
							
							СтавкаРН = ВыборкаСтавки.СтавкаЗначение;
							Элемент.Ф913_01Ставка = СтавкаРН;
							РегламентированнаяОтчетность.ДобавитьРасшифровкуСтрокиМногострочнойФормы(ТаблицаСтрокГруппы, Элемент, "Ф913_01Ставка", ВыборкаСтавки.СтавкаСсылка);
							
							ДоходСтроки = Окр((ВыборкаСтавки.СуммаОборотКт - ВыборкаСтавки.СуммаОборотДт), 0);
							Элемент.Ф913_01_H = ДоходСтроки;
							Если ДоходСтроки > МаксДоход Тогда
								МаксДоход = ДоходСтроки;
								ЭлементМаксДоход = Элемент;
							КонецЕсли;
							
							УдельныйВес = 0;
							Если ИтогоДоход <> 0 Тогда
								УдельныйВес = Окр(ДоходСтроки/ИтогоДоход * 100, 2);
								Элемент.Ф913_01УдельныйВес = УдельныйВес;
							КонецЕсли;
							
							СуммаДоходаСУчетомУменьшения = ДоходСтроки - Окр(РасходПоДоходамРаботников * УдельныйВес / 100);
							Элемент.Ф913_01_J = СуммаДоходаСУчетомУменьшения;
							
							ИсчисленныйНалог = Окр(СуммаДоходаСУчетомУменьшения * СтавкаРН / 100);
							Элемент.Ф913_01_K = Макс(ИсчисленныйНалог, 0);
											
						КонецЕсли;
						
						НомерСтроки = НомерСтроки + 1;
				
					КонецЦикла;    // ВыборкаСтавки
				
				КонецЦикла;    // ВыборкаПодразделения
					
			КонецЦикла;    // ВыборкаОрганизация
			
		КонецЦикла;    // ВыборкаОбщийИтог
				
		Если  Не ОбластьФ913_01УдельныйВес = Неопределено Тогда
			// Распределение погрешностей округления для Страница2
			ИтогоУдельныйВес = ТаблицаСтрокГруппы.Итог("Ф913_01УдельныйВес");
			ИтогоУдельныйВесОкр = Окр(ИтогоУдельныйВес);
			ОбластьФ913_01УдельныйВес.Значение = ИтогоУдельныйВесОкр;
			
			РазницаУдельныйВес = ИтогоУдельныйВесОкр - ИтогоУдельныйВес;
			
			БазаНалогаРасчет = ТаблицаСтрокГруппы.Итог("Ф913_01_H") - РасходПоДоходамРаботников;
			БазаНалогаФакт   = ТаблицаСтрокГруппы.Итог("Ф913_01_J");
			РазницаБазаНалога = БазаНалогаРасчет - БазаНалогаФакт;
			
			Если (РазницаУдельныйВес <> 0 ИЛИ РазницаБазаНалога <> 0) И ЭлементМаксДоход <> Неопределено Тогда
				ЭлементМаксДоход.Ф913_01УдельныйВес = ЭлементМаксДоход.Ф913_01УдельныйВес + РазницаУдельныйВес;
				ЭлементМаксДоход.Ф913_01_J          = ЭлементМаксДоход.Ф913_01_J + РазницаБазаНалога;
				ЭлементМаксДоход.Ф913_01_K          = Макс(Окр(ЭлементМаксДоход.Ф913_01_J * ЭлементМаксДоход.Ф913_01Ставка / 100), 0);
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;    // ЭлементСтруктуры Из СтруктураФормы
	
	РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтотОбъект, ТекИмяФормы, СтруктураФормы); 	 
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, ТекИмяФормы);	
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма, ТекИмяФормы, Перезаполнить);     
	
	РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтаФорма);
	
	ТекущаяСтраница = СтрокаФормы.ВсегоСтраниц;
	
КонецПроцедуры

&НаСервере
Процедура Форма913_01РасчетНаСервере(Инд, Колонка)
	
	Перем СтруктураГруппы;
	
	КодФормы = "Форма913_01";  	
	Индекс = Инд-1;
	
	мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ЭтаФорма, КодФормы);
	мМногострочнаяСтруктура.Свойство("Страница2" ,СтруктураГруппы);
	ТаблицаШапкаИПодвал = СтруктураГруппы.ШапкаИПодвал;
	ТаблицаСтрокГруппы  = СтруктураГруппы.Строки;
	
	Если Колонка = "Ф913_01_001" Тогда // Изменен показатель РасходПоДоходамРаботников, требуется пересчет всех строк
		
		РасходПоДоходамРаботников = ?(ТаблицаШапкаИПодвал.Найти("Ф913_01_001", "ИмяОбласти") = Неопределено, 0, ТаблицаШапкаИПодвал.Найти("Ф913_01_001", "ИмяОбласти").Значение);
		РасходПоДоходамРаботников = ?(РасходПоДоходамРаботников = Неопределено, 0, РасходПоДоходамРаботников);	
		
		ИтогоДоход                = ?(ТаблицаШапкаИПодвал.Найти("Ф913_01_H", "ИмяОбласти") = Неопределено, 0, ТаблицаШапкаИПодвал.Найти("Ф913_01_H", "ИмяОбласти").Значение);
		ИтогоДоход                = ?(ИтогоДоход = Неопределено, 0, ИтогоДоход);
		
		Для Каждого СтрокаГруппы Из ТаблицаСтрокГруппы Цикл
			
			НомерСтроки = ТаблицаСтрокГруппы.Индекс(СтрокаГруппы) + 1;
			
			СтавкаРН = ?(СтрокаГруппы.Ф913_01Ставка = Неопределено, 0, СтрокаГруппы.Ф913_01Ставка);
			
			ДоходСтроки = ?(СтрокаГруппы.Ф913_01_H = Неопределено, 0, СтрокаГруппы.Ф913_01_H);
			
			УдельныйВес = 0;
			Если ИтогоДоход <> 0 Тогда
				УдельныйВес = Окр(ДоходСтроки/ИтогоДоход * 100, 2);
			КонецЕсли;
			СтрокаГруппы.Ф913_01УдельныйВес = УдельныйВес;
			Форма913_01ПолеТабличногоДокументаСтраница2.Области["Ф913_01УдельныйВес__"+ Строка(НомерСтроки)].Значение = УдельныйВес;

			СуммаДоходаСУчетомУменьшения = ДоходСтроки - Окр(РасходПоДоходамРаботников * УдельныйВес / 100);
			СтрокаГруппы.Ф913_01_J = СуммаДоходаСУчетомУменьшения;
			Форма913_01ПолеТабличногоДокументаСтраница2.Области["Ф913_01_J__"+ Строка(НомерСтроки)].Значение = СуммаДоходаСУчетомУменьшения;

			ИсчисленныйНалог = Макс(Окр(СуммаДоходаСУчетомУменьшения * СтавкаРН / 100), 0);
			СтрокаГруппы.Ф913_01_K = ИсчисленныйНалог;
			Форма913_01ПолеТабличногоДокументаСтраница2.Области["Ф913_01_K__"+ Строка(НомерСтроки)].Значение = ИсчисленныйНалог;

		КонецЦикла;
			
		Если ТекущаяСтраница <> Неопределено И ТекущаяСтраница = 1 Тогда 
		 	Форма913_01ПолеТабличногоДокументаСтраница2.Области["Ф913_01УдельныйВес"].Значение = Окр(ТаблицаСтрокГруппы.Итог("Ф913_01УдельныйВес")); 
		 	Форма913_01ПолеТабличногоДокументаСтраница2.Области["Ф913_01_J"].Значение = ТаблицаСтрокГруппы.Итог("Ф913_01_J"); 
		 	Форма913_01ПолеТабличногоДокументаСтраница2.Области["Ф913_01_K"].Значение = ТаблицаСтрокГруппы.Итог("Ф913_01_K"); 
		КонецЕсли;
			
	ИначеЕсли Колонка = "Ф913_01Ставка" Тогда // Выбрана ставка Розничного налога, требуется пересчет колонки "K" текущей строки
		
		СтавкаРН = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф913_01Ставка = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф913_01Ставка);
		СуммаДоходаСУчетомУменьшения = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф913_01_J = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф913_01_J);
		
		ИсчисленныйНалог = Макс(Окр(СуммаДоходаСУчетомУменьшения * СтавкаРН / 100), 2);
		ТаблицаСтрокГруппы.Получить(Индекс).Ф913_01_K = ИсчисленныйНалог;
		Форма913_01ПолеТабличногоДокументаСтраница2.Области["Ф913_01_K__"+ Строка(Инд)].Значение = ИсчисленныйНалог;
		
		Если ТекущаяСтраница <> Неопределено И ТекущаяСтраница = 1 Тогда 
		 	Форма913_01ПолеТабличногоДокументаСтраница2.Области["Ф913_01_K"].Значение = ТаблицаСтрокГруппы.Итог("Ф913_01_K"); 
		КонецЕсли;
		
	ИначеЕсли Колонка = "Ф913_01_H" ИЛИ Колонка = "Ф913_01УдельныйВес" Тогда // В строке изменен облагаемый доход или удельный вес, требуется текущей строки
		
		РасходПоДоходамРаботников = ?(ТаблицаШапкаИПодвал.Найти("Ф913_01_001", "ИмяОбласти") = Неопределено, 0, ТаблицаШапкаИПодвал.Найти("Ф913_01_001", "ИмяОбласти").Значение);
		РасходПоДоходамРаботников = ?(РасходПоДоходамРаботников = Неопределено, 0, РасходПоДоходамРаботников);	
		
		ДоходСтроки = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф913_01_H = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф913_01_H);
		СтавкаРН    = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф913_01Ставка = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф913_01Ставка);
		УдельныйВес = ?(ТаблицаСтрокГруппы.Получить(Индекс).Ф913_01УдельныйВес = Неопределено, 0, ТаблицаСтрокГруппы.Получить(Индекс).Ф913_01УдельныйВес);	
		
		СуммаДоходаСУчетомУменьшения = ДоходСтроки - Окр(РасходПоДоходамРаботников * УдельныйВес / 100);
		ТаблицаСтрокГруппы.Получить(Индекс).Ф913_01_J = СуммаДоходаСУчетомУменьшения;
		Форма913_01ПолеТабличногоДокументаСтраница2.Области["Ф913_01_J__"+ Строка(Инд)].Значение = СуммаДоходаСУчетомУменьшения;
		
		ИсчисленныйНалог = Макс(Окр(СуммаДоходаСУчетомУменьшения * СтавкаРН / 100), 0);
		ТаблицаСтрокГруппы.Получить(Индекс).Ф913_01_K = ИсчисленныйНалог;
		Форма913_01ПолеТабличногоДокументаСтраница2.Области["Ф913_01_K__"+ Строка(Инд)].Значение = ИсчисленныйНалог;
		
		Если ТекущаяСтраница <> Неопределено И ТекущаяСтраница = 1 Тогда 
		 	Форма913_01ПолеТабличногоДокументаСтраница2.Области["Ф913_01_J"].Значение = ТаблицаСтрокГруппы.Итог("Ф913_01_J"); 
		 	Форма913_01ПолеТабличногоДокументаСтраница2.Области["Ф913_01_K"].Значение = ТаблицаСтрокГруппы.Итог("Ф913_01_K"); 
			Если Колонка = "Ф913_01_H" Тогда
			 	Форма913_01ПолеТабличногоДокументаСтраница2.Области["Ф913_01_H"].Значение = ТаблицаСтрокГруппы.Итог("Ф913_01_H"); 
			КонецЕсли;
			Если Колонка = "Ф913_01УдельныйВес" Тогда
			 	Форма913_01ПолеТабличногоДокументаСтраница2.Области["Ф913_01УдельныйВес"].Значение = Окр(ТаблицаСтрокГруппы.Итог("Ф913_01УдельныйВес")); 
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОбновитьМногострочнуюСтруктуру(ЭтаФорма, КодФормы, мМногострочнаяСтруктура);
	Модифицированность = Истина;
	
КонецПроцедуры // Форма913_01РасчетНаСервере()

&НаКлиенте
Процедура Форма913_01Расшифровка(ИмяЯчейки)
	
	Если ИмяЯчейки = "Ф913_01_001" Тогда
		
		ПоказатьРасшифровку913ВВидеРегистраНУпоИПНиСН();
	
	ИначеЕсли Найти(ИмяЯчейки,"Ф913_01_H") > 0 Тогда
		
		ПараметрыОтбора = Неопределено;
		
		Если Найти(ИмяЯчейки,"__") > 0 Тогда
			
			НомерЯчейки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "__")+ 2));
			
			ОбластьРасшифровки = Форма913_01ПолеТабличногоДокументаСтраница1.Области.Найти("Ф913_01Город__" +  НомерЯчейки);
			ОбластьСтавки      = Форма913_01ПолеТабличногоДокументаСтраница2.Области.Найти("Ф913_01Ставка__" +  НомерЯчейки);
			Если ОбластьРасшифровки <> Неопределено Тогда
				Если ЗначениеЗаполнено(ОбластьРасшифровки.Расшифровка) Тогда
					РасшифровкаПодразделение = ОбластьРасшифровки.Расшифровка;
					РасшифровкаСтавка        = ?(ЗначениеЗаполнено(ОбластьСтавки.Расшифровка), ОбластьСтавки.Расшифровка, ПредопределенноеЗначение("Справочник.СтавкиРозничногоНалога.ПустаяСсылка"));
					ПараметрыОтбора = Новый Структура;
					Если ТипЗнч(РасшифровкаПодразделение) = Тип("СправочникСсылка.Организации") Тогда
						ПараметрыОтбора.Вставить("Организация", РасшифровкаПодразделение);
						ПараметрыОтбора.Вставить("Подразделение", ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка"));
						ПараметрыОтбора.Вставить("Ставка", РасшифровкаСтавка);
					ИначеЕсли ТипЗнч(РасшифровкаПодразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
						ПараметрыОтбора.Вставить("Организация", ОбщегоНазначенияБКВызовСервера.ЗначениеРеквизитаОбъекта(РасшифровкаПодразделение, "Владелец"));
						ПараметрыОтбора.Вставить("Подразделение", РасшифровкаПодразделение);
						ПараметрыОтбора.Вставить("Ставка", РасшифровкаСтавка);
					Иначе
						ПараметрыОтбора = Неопределено;
					КонецЕсли;
				Иначе
					ПоказатьПредупреждение(,НСтр("ru = 'Расшифровка строк, добавленных вручную, не может быть выполнена.'"));
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Форма913РасшифровкаСКД("913_01_H", ПараметрыОтбора);
		
	КонецЕсли;
	
КонецПроцедуры
