#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПриВыводеЗаголовка,
							|ИспользоватьВнешниеНаборыДанных,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки,
							|ИспользоватьРасширенныеПараметрыРасшифровки",
							Истина, Истина, Истина, Истина, Истина, Истина);
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт
	
	ТекстОрганизации = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ПараметрыОтчета.СписокСтруктурныхЕдиниц,,, Истина);
	
	ЗаголовокОтчета = НСтр("ru = 'Остатки денежных средств на %1'");
	ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокОтчета, Формат(ПараметрыОтчета.Период, "ДФ=dd.MM.yyyy"));
	
	Если ОрганизацияВНачале Тогда
		ЗаголовокОтчета = ТекстОрганизации + Символы.ПС + ЗаголовокОтчета;
	Иначе
		ЗаголовокОтчета = ЗаголовокОтчета + " " + ТекстОрганизации;
	КонецЕсли;
	
	Возврат ЗаголовокОтчета;
	
КонецФункции

// Формирует таблицу данных для монитора руководителя по организации на дату
// Параметры
// 	Организация - СправочникСсылка.Организации - Организация по которой нужны данные
// 	Дата - Дата - дата на которую нужны остатки
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица с данными для монитора руководителя
//
Функция ПолучитьОстаткиДенежныхСредствДляМонитораРуководителя(Организация, Дата) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВедетсяУчетПоВалютам", Истина);
	
	// ВалютаРегламентированногоУчета пронадобится еще раз ниже
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	
	// Получим список счетов кассы для отбора
	СписокСчетов = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Типовой.ДенежныеСредстваВКассе));

	Запрос.УстановитьПараметр("СчетаКассы", СписокСчетов);
	
	// Получим список счетов безналичных расчетов для отбора
	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах);
	СписокСчетов.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаКорреспондентскихСчетах);
	СписокСчетов.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаСберегательныхСчетах);
	СписокСчетов.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваОграниченныеВИспользовании);
	СписокСчетов.Добавить(ПланыСчетов.Типовой.ПрочиеДенежныеСредства);
	
	СписокСчетов = ПроцедурыБухгалтерскогоУчета.СформироватьМассивСубсчетов(СписокСчетов);
	
	Запрос.УстановитьПараметр("СчетаУчетаБезналичные", СписокСчетов);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&Период, Счет В (&СчетаКассы), , Организация = &Организация) КАК ХозрасчетныйОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК Сумма,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегламентированногоУчета) КАК Валюта,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстаток, 0) КАК СуммаВВалюте,
		|	ХозрасчетныйОстатки.Валюта.Наименование КАК ВалютаНаименование
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&Период, Счет В (&СчетаУчетаБезналичные), , Организация = &Организация) КАК ХозрасчетныйОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегламентированногоУчета),
		|	ЕСТЬNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстаток, 0),
		|	ХозрасчетныйОстатки.Валюта.Наименование";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаДанных = МониторРуководителя.ТаблицаДанных();
	ИтогоВКассе = 0;
	
	// Касса 
	ТаблицаОстатковВКассе = Результат[0].Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Для Каждого СтрокаКасса Из ТаблицаОстатковВКассе Цикл
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.Представление 		= НСтр("ru = 'В кассе'");
		СтрокаДанных.ДанныеРасшифровки 	= ВалютаРегламентированногоУчета;
		СтрокаДанных.Порядок       		= ПорядокКассыВМониторе();
		СтрокаДанных.Сумма         		= СтрокаКасса.Сумма;
		ИтогоВКассе = ИтогоВКассе + СтрокаКасса.Сумма;

	КонецЦикла;   
	
	// Подготовим переменные которые будем использовать при заполнении таблицы
	ПредставлениеДляТеньговыСчетов = НСтр("ru = 'На тенговых счетах'");
	
	ИтогоНаРасчетныхСчетах = 0;
	// Расчетные счета 
	ТаблицаОстатковНаСчетах = Результат[1].Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Для Каждого СтрокаНаСчетах Из ТаблицаОстатковНаСчетах Цикл
		
		ВалютаОстатка        = СтрокаНаСчетах.Валюта;
		
		// Для теньговых счетов особенное представление и порядок
		Если ВалютаОстатка = ВалютаРегламентированногоУчета Тогда
			ПредставлениеОстатка = ПредставлениеДляТеньговыСчетов;
			Порядок = ПорядокТеньговыхСчетовВМониторе();
		Иначе
			ПредставлениеОстатка = СтрокаНаСчетах.ВалютаНаименование;
			Порядок = ПорядокВалютныхСчетовВМониторе();
		КонецЕсли;
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.Представление 		= ПредставлениеОстатка;
		СтрокаДанных.ДанныеРасшифровки  = ВалютаОстатка;
		СтрокаДанных.Порядок       		= Порядок;
		СтрокаДанных.Сумма         		= СтрокаНаСчетах.Сумма;
		СтрокаДанных.СуммаВВалюте  		= СтрокаНаСчетах.СуммаВВалюте;
		ИтогоНаРасчетныхСчетах = ИтогоНаРасчетныхСчетах + СтрокаНаСчетах.Сумма;
		
	КонецЦикла;   
	
	
	// Добавляем итог по разделу
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.Представление = НСтр("ru = 'Итого'"); 
	СтрокаДанных.Порядок       = ПорядокИтоговВМониторе();
	СтрокаДанных.Сумма         = ИтогоВКассе + ИтогоНаРасчетныхСчетах;
	
	Возврат ТаблицаДанных;
	
КонецФункции 

// Формирует таблицу данных для монитора руководителя по организации на дату
// Параметры
// 	Организация - СправочникСсылка.Организации - Организация по которой нужны данные
// 	Дата - Дата - дата на которую нужны остатки
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица с данными для монитора руководителя
//
Функция ПолучитьОстаткиДенежныхСредствДляМонитораРуководителяСводно(Организация, Дата) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	
	// Получим список счетов кассы для отбора
	СписокСчетов = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Типовой.ДенежныеСредстваВКассе));
	
	СписокСчетовБезналичные = Новый Массив;
	СписокСчетовБезналичные.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах);
	СписокСчетовБезналичные.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаКорреспондентскихСчетах);
	СписокСчетовБезналичные.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаСберегательныхСчетах);
	СписокСчетовБезналичные.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваОграниченныеВИспользовании);
	СписокСчетовБезналичные.Добавить(ПланыСчетов.Типовой.ПрочиеДенежныеСредства);
	
	СписокСчетовБезналичные = ПроцедурыБухгалтерскогоУчета.СформироватьМассивСубсчетов(СписокСчетовБезналичные);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокСчетов, СписокСчетовБезналичные);
	
	Запрос.УстановитьПараметр("Счета", СписокСчетов);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&Период, Счет В (&Счета), , Организация = (&Организация)) КАК ХозрасчетныйОстатки";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ТаблицаДанных = МониторРуководителя.ТаблицаДанных();
	
	// Добавляем итог по разделу
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.Представление = НСтр("ru = 'Итого'");
	СтрокаДанных.Порядок       = ПорядокИтоговВМониторе();
	СтрокаДанных.Сумма         = Выборка.Сумма;
	
	Возврат ТаблицаДанных;
	
КонецФункции 

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт

	Если ПараметрыОтчета.РежимРасшифровки
		ИЛИ (ПараметрыОтчета.Свойство("ОткрытИзРассылки") И ПараметрыОтчета.ОткрытИзРассылки) Тогда
		
		КомпоновщикНастроек.Настройки.Структура.ИдентификаторПользовательскойНастройки = "";
		Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл
			ЭлементСтруктуры.ИдентификаторПользовательскойНастройки = "";
			ОтчетыВызовСервераБК.ОбработатьСтруктуруНастроек(ЭлементСтруктуры);
		КонецЦикла;
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Тенге", ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Таблица   = Неопределено;
	Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл		
		Если ЭлементСтруктуры.Имя = "Таблица" Тогда
			Таблица = ЭлементСтруктуры;
		КонецЕсли;		
	КонецЦикла;
	
	Если Таблица <> Неопределено Тогда
		
		Таблица.Строки.Очистить();
		Группировка = Таблица.Строки;
		Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
			Если ПолеВыбраннойГруппировки.Использование Тогда
				Если ТипЗнч(Группировка) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
					Группировка = Группировка.Добавить();
				Иначе
					Группировка = Группировка.Структура.Добавить();
				КонецЕсли;
				БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка);				
			КонецЕсли;
		КонецЦикла;
		
		Таблица.Колонки.Очистить();
		Группировка = Таблица.Колонки;
		Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.ГруппировкаКолонок Цикл 
			Если ПолеВыбраннойГруппировки.Использование Тогда
				Если ТипЗнч(Группировка) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
					Группировка = Группировка.Добавить();
				Иначе
					Группировка = Группировка.Структура.Добавить();
				КонецЕсли;
				БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка);				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	БухгалтерскиеОтчеты.ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, ПараметрыОтчета);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВАРИАНТЫ ОТЧЕТОВ

Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант из Схема.ВариантыНастроек Цикл
		НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, Вариант.Имя);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета.
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт
	
	ПараметрыОтчета = РассылкаОтчетовБК.НастройкиОтчетаСохраняемыеВРассылке();
	ПараметрыОтчета.Вставить("ГруппировкаКолонок", Неопределено);
	
	Возврат ПараметрыОтчета;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПорядокИтоговВМониторе() Экспорт
	
	Возврат 0;
	
КонецФункции

Функция ПорядокКассыВМониторе() Экспорт
	
	Возврат 1;
	
КонецФункции

Функция ПорядокТеньговыхСчетовВМониторе() Экспорт
	
	Возврат 2;
	
КонецФункции

Функция ПорядокВалютныхСчетовВМониторе() Экспорт
	
	Возврат 3;
	
КонецФункции

Процедура ПриВыводеЗаголовка(ПараметрыОтчета, Результат) Экспорт
	
	МакетЗаголовок   = ПолучитьОбщийМакет("ЗаголовокОтчета");
	ОбластьЗаголовок = МакетЗаголовок.ПолучитьОбласть("Заголовок");
	
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ПолучитьТекстЗаголовка(ПараметрыОтчета);
	
	Результат.Вывести(ОбластьЗаголовок);
	
КонецПроцедуры

Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Типовой.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаКассы
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	Типовой.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДенежныеСредстваВКассе))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Типовой.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаУчетаБезналичные
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	(Типовой.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах))
	|			ИЛИ Типовой.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДенежныеСредстваНаКорреспондентскихСчетах))
	|			ИЛИ Типовой.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДенежныеСредстваНаСберегательныхСчетах))
	|			ИЛИ Типовой.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДенежныеСредстваОграниченныеВИспользовании))
	|			ИЛИ Типовой.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПрочиеДенежныеСредства)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Типовой.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаУчетаПодотчет
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	Типовой.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ДолгосрочнаяЗадолженностьПодотчетныхЛиц))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаКассы.Счет
	|ПОМЕСТИТЬ СчетаУчета
	|ИЗ
	|	СчетаКассы КАК СчетаКассы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетаУчетаБезналичные.Счет
	|ИЗ
	|	СчетаУчетаБезналичные КАК СчетаУчетаБезналичные
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетаУчетаПодотчет.Счет
	|ИЗ
	|	СчетаУчетаПодотчет КАК СчетаУчетаПодотчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КоличествоВалюта > 0
	|			ТОГДА ""Итого, тенге""
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Валюта
	|ПОМЕСТИТЬ Валюты
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|				КОГДА Таблица.Счет.Валютный
	|					ТОГДА Таблица.Валюта
	|				ИНАЧЕ &Тенге
	|			КОНЕЦ) КАК КоличествоВалюта
	|	ИЗ
	|		РегистрБухгалтерии.Типовой.Остатки(
	|				&Период,
	|				Счет В
	|					(ВЫБРАТЬ
	|						СчетаУчета.Счет
	|					ИЗ
	|						СчетаУчета КАК СчетаУчета),
	|				,
	|				Организация В (&Организация)) КАК Таблица
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА Таблица.Счет.Валютный
	|					ТОГДА Таблица.Валюта
	|				ИНАЧЕ &Тенге
	|			КОНЕЦ <> &Тенге) КАК ВложенныйЗапрос
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&Наличные КАК ВидДенежныхСредств,
	|	Наличные.Организация КАК Организация,
	|	""Итого, тенге"" КАК Валюта,
	|	ВЫРАЗИТЬ(Наличные.Субконто1 КАК Справочник.Кассы) КАК Аналитика,
	|	Наличные.СуммаОстаток КАК Остаток,
	|	Наличные.Счет
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&Период,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаКассы.Счет
	|				ИЗ
	|					СчетаКассы КАК СчетаКассы),
	|			,
	|			Организация В (&Организация)) КАК Наличные
	|ГДЕ
	|	""Итого, тенге"" В
	|			(ВЫБРАТЬ
	|				Валюты.Валюта
	|			ИЗ
	|				Валюты КАК Валюты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Наличные,
	|	Наличные.Организация,
	|	ВЫБОР
	|		КОГДА Наличные.Счет.Валютный
	|			ТОГДА Наличные.Валюта
	|		ИНАЧЕ &Тенге
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(Наличные.Субконто1 КАК Справочник.Кассы),
	|	ВЫБОР
	|		КОГДА Наличные.Счет.Валютный
	|			ТОГДА Наличные.ВалютнаяСуммаОстаток
	|		ИНАЧЕ Наличные.СуммаОстаток
	|	КОНЕЦ,
	|	Наличные.Счет
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&Период,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаКассы.Счет
	|				ИЗ
	|					СчетаКассы КАК СчетаКассы),
	|			,
	|			Организация В (&Организация)) КАК Наличные
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Безналичные,
	|	Безналичные.Организация,
	|	""Итого, тенге"",
	|	ВЫРАЗИТЬ(Безналичные.Субконто1 КАК Справочник.БанковскиеСчета),
	|	Безналичные.СуммаОстаток,
	|	Безналичные.Счет
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&Период,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаУчетаБезналичные.Счет
	|				ИЗ
	|					СчетаУчетаБезналичные КАК СчетаУчетаБезналичные),
	|			,
	|			Организация В (&Организация)) КАК Безналичные
	|ГДЕ
	|	""Итого, тенге"" В
	|			(ВЫБРАТЬ
	|				Валюты.Валюта
	|			ИЗ
	|				Валюты КАК Валюты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Безналичные,
	|	Безналичные.Организация,
	|	ВЫБОР
	|		КОГДА Безналичные.Счет.Валютный
	|			ТОГДА Безналичные.Валюта
	|		ИНАЧЕ &Тенге
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(Безналичные.Субконто1 КАК Справочник.БанковскиеСчета),
	|	ВЫБОР
	|		КОГДА Безналичные.Счет.Валютный
	|			ТОГДА Безналичные.ВалютнаяСуммаОстаток
	|		ИНАЧЕ Безналичные.СуммаОстаток
	|	КОНЕЦ,
	|	Безналичные.Счет
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&Период,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаУчетаБезналичные.Счет
	|				ИЗ
	|					СчетаУчетаБезналичные КАК СчетаУчетаБезналичные),
	|			,
	|			Организация В (&Организация)) КАК Безналичные
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Подотчет,
	|	Подотчет.Организация,
	|	""Итого, тенге"",
	|	ВЫРАЗИТЬ(Подотчет.Субконто1 КАК Справочник.ФизическиеЛица),
	|	Подотчет.СуммаОстаток,
	|	Подотчет.Счет
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&Период,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаУчетаПодотчет.Счет
	|				ИЗ
	|					СчетаУчетаПодотчет КАК СчетаУчетаПодотчет),
	|			,
	|			Организация В (&Организация)) КАК Подотчет
	|ГДЕ
	//|	Подотчет.СуммаОстаток > 0 И
	|	 ""Итого, тенге"" В
	|			(ВЫБРАТЬ
	|				Валюты.Валюта
	|			ИЗ
	|				Валюты КАК Валюты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Подотчет,
	|	Подотчет.Организация,
	|	ВЫБОР
	|		КОГДА Подотчет.Счет.Валютный
	|			ТОГДА Подотчет.Валюта
	|		ИНАЧЕ &Тенге
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(Подотчет.Субконто1 КАК Справочник.ФизическиеЛица),
	|	ВЫБОР
	|		КОГДА Подотчет.Счет.Валютный
	|			ТОГДА Подотчет.ВалютнаяСуммаОстаток
	|		ИНАЧЕ Подотчет.СуммаОстаток
	|	КОНЕЦ,
	|	Подотчет.Счет
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&Период,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаУчетаПодотчет.Счет
	|				ИЗ
	|					СчетаУчетаПодотчет КАК СчетаУчетаПодотчет),
	|			,
	|			Организация В (&Организация)) КАК Подотчет
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Подотчет.Счет.Валютный
	|				ТОГДА Подотчет.ВалютнаяСуммаОстаток
	|			ИНАЧЕ Подотчет.СуммаОстаток
	|		КОНЕЦ <> 0";
	
	Граница = Новый Граница(КонецДня(ПараметрыОтчета.Период), ВидГраницы.Включая);
	
	Запрос.УстановитьПараметр("Период"	   , ?(ЗначениеЗаполнено(ПараметрыОтчета.Период), Граница, '00010101'));
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.СписокСтруктурныхЕдиниц);
	Если Не ЗначениеЗаполнено(ПараметрыОтчета.СписокСтруктурныхЕдиниц) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация В (&Организация)", "");
	КонецЕсли;
	Запрос.УстановитьПараметр("Тенге", ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Запрос.УстановитьПараметр("Наличные"   , НСтр("ru = 'Деньги в кассе'"));
	Запрос.УстановитьПараметр("Безналичные", НСтр("ru = 'Деньги на расчетных счетах'"));
	Запрос.УстановитьПараметр("Подотчет"   , НСтр("ru = 'Деньги у подотчетных лиц'"));
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	ВнешниеНаборыДанных = Новый Структура("ТаблицаДанных", ТаблицаДанных);
	
	Возврат ВнешниеНаборыДанных;
		                                
КонецФункции

Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
	
	// Инициализируем список мунктов меню
	СписокПунктовМеню = Новый СписокЗначений();
	
	// Заполниим соответствие полей которые мы хотим получить из данных расшифровки
	СоответствиеПолей = Новый Структура();
	ДанныеОтчета = ПолучитьИзВременногоХранилища(Адрес);
	
	ЗначениеРасшифровки = ДанныеОтчета.ДанныеРасшифровки.Элементы[Расшифровка];
	Если ТипЗнч(ЗначениеРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для Каждого ПолеРасшифровки ИЗ ЗначениеРасшифровки.ПолучитьПоля() Цикл
			Если ЗначениеЗаполнено(ПолеРасшифровки.Значение) И ПолеРасшифровки.Значение <> "Показатель" Тогда
				ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
				ПараметрыРасшифровки.Вставить("Значение",  ПолеРасшифровки.Значение);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Укажем что открывать объект сразу не нужно
	ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Ложь);
	
	Если ДанныеОтчета = Неопределено Тогда 
		ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
		Возврат;
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ДанныеОтчета.ДанныеРасшифровки.Настройки);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ДанныеОтчета.Объект.СхемаКомпоновкиДанных));
	
	МассивПолей = БухгалтерскиеОтчетыВызовСервера.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеОтчета.ДанныеРасшифровки, КомпоновщикНастроек, Истина);
	
	Показатель = "";
	Для Каждого ПолеРасшифровки Из МассивПолей Цикл
		Если ТипЗнч(ПолеРасшифровки) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных")
			И ПолеРасшифровки.Значение = "Показатель" Тогда
			Показатель = ПолеРасшифровки.Поле;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Прежде всего интересны данные группировочных полей
	Для Каждого Группировка Из ДанныеОтчета.Объект.Группировка Цикл
		Если Группировка.Использование Тогда
			СоответствиеПолей.Вставить(Группировка.Поле);
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеПолей.Вставить("Счет");
	СоответствиеПолей.Вставить("Валюта");
		
	// Инициализация пользовательских настроек
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки",  Истина);
	ДополнительныеСвойства.Вставить("НачалоПериода",     НачалоДня(ДанныеОтчета.Объект.Период));
	ДополнительныеСвойства.Вставить("КонецПериода",      КонецДня(ДанныеОтчета.Объект.Период));
	ДополнительныеСвойства.Вставить("Период",            ДанныеОтчета.Объект.Период);
	ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ДанныеОтчета.Объект.ВыводитьЗаголовок);
	ДополнительныеСвойства.Вставить("ВыводитьПодписи",   ДанныеОтчета.Объект.ВыводитьПодписи);
	ДополнительныеСвойства.Вставить("МакетОформления",   ДанныеОтчета.Объект.МакетОформления);
	ДополнительныеСвойства.Вставить("ВыводитьДиаграмму", Ложь);
	ДополнительныеСвойства.Вставить("ПоказательБУ",      Истина);
	ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", ДанныеОтчета.Объект.СписокСтруктурныхЕдиниц);
	
	// Получаем соответствие полей доступных в расшифровке
	Данные_Расшифровки = Новый Соответствие();
	
	Если ДанныеОтчета.ДанныеРасшифровки <> Неопределено Тогда
		// Ищем интересующие нас поля в заданной расшифровке
		Для каждого ЭлементДанных Из СоответствиеПолей Цикл
			// Получаем элемент расшифровки, в котором нужно искать поля
			Родитель = ДанныеОтчета.ДанныеРасшифровки.Элементы[Расшифровка];
			// Вызываем рекурсивный поиск поля
			ЗначениеРасшифровки = ПолучитьЗначениеРасшифровки(Родитель, ЭлементДанных.Ключ);
			Если ЗначениеРасшифровки <> Неопределено Тогда
				// Значение нашлось, помещаем в структуру
				Данные_Расшифровки.Вставить(ЭлементДанных.Ключ, ЗначениеРасшифровки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Счет = Данные_Расшифровки.Получить("Счет");
	Валюта = Данные_Расшифровки.Получить("Валюта");
	ЕстьСчет = ДанныеОтчета.Объект.Группировка.Найти("Счет", "Поле") <> Неопределено;
	
	Если ТипЗнч(Валюта) = Тип("СправочникСсылка.Валюты") Тогда
		ДополнительныеСвойства.Вставить("ПоказательВалютнаяСумма", Истина);
	КонецЕсли;
	
	Если ДанныеОтчета.Объект.РежимРасшифровки Тогда
		Если Счет = Неопределено И ЕстьСчет Тогда
			ТекстСообщения = НСтр("ru = 'Расшифровка невозможна. Неизвестен счет.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
			Возврат;
		ИначеЕсли Счет <> Неопределено И ЕстьСчет Тогда
			СписокПунктовМеню.Добавить("ОборотноСальдоваяВедомостьПоСчетуТиповой", НСтр("ru = 'Оборотно-сальдовая ведомость по счету (бух.)'"));
			ИДРасшифровки = "ОборотноСальдоваяВедомостьПоСчетуТиповой";
		Иначе
			СписокПунктовМеню.Добавить("ОстаткиДенежныхСредств", НСтр("ru = 'Остатки денежных средств'"));
			ИДРасшифровки = "ОстаткиДенежныхСредств";
		КонецЕсли;
	Иначе
		СписокПунктовМеню.Добавить("ОстаткиДенежныхСредств", НСтр("ru = 'Остатки денежных средств'"));
		ИДРасшифровки = "ОстаткиДенежныхСредств";
	КонецЕсли;
	
	Если Счет <> Неопределено Тогда
		ДанныеСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	Иначе
		ДанныеСчета = Неопределено;
	КонецЕсли;
	
	ОтборПоЗначениямРасшифровки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ОтборПоЗначениямРасшифровки.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Для Каждого ЗначениеРасшифровки Из Данные_Расшифровки Цикл
		Если ЗначениеРасшифровки.Ключ <> "Период" Тогда
			Если ИДРасшифровки <> "ОстаткиДенежныхСредств" Тогда
				Если ЗначениеРасшифровки.Ключ = "Счет" Тогда
					ДополнительныеСвойства.Вставить("Счет",	ЗначениеРасшифровки.Значение);
				Иначе
					ПолеОтбора = Неопределено;
					Если ДанныеСчета <> Неопределено И ДанныеСчета.КоличествоСубконто > 0 Тогда
						Для НомерСубконто = 1 По ДанныеСчета.КоличествоСубконто Цикл
							Если ДанныеСчета["ВидСубконто" + НомерСубконто + "ТипЗначения"].СодержитТип(ТипЗнч(ЗначениеРасшифровки.Значение)) Тогда
								ПолеОтбора = "Субконто" + НомерСубконто;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если ПолеОтбора <> Неопределено Тогда
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборПоЗначениямРасшифровки, ПолеОтбора, ЗначениеРасшифровки.Значение);
					КонецЕсли;
				КонецЕсли;
			Иначе
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборПоЗначениямРасшифровки, ЗначениеРасшифровки.Ключ, ЗначениеРасшифровки.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Группировка = Новый Массив();
	Для Каждого СтрокаГруппировки Из ДанныеОтчета.Объект.Группировка Цикл
		Если СтрокаГруппировки.Использование Тогда
			СтрокаДляРасшифровки = Новый Структура("Использование, Поле, Представление, ТипГруппировки");
			ЗаполнитьЗначенияСвойств(СтрокаДляРасшифровки, СтрокаГруппировки);
			Группировка.Добавить(СтрокаДляРасшифровки);
		КонецЕсли;
	КонецЦикла;
	
	ГруппировкаСчет = Новый Структура("Использование, Поле, Представление, ТипГруппировки",
	                                   Истина, "Счет", "Счет", Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы);

	Если ИДРасшифровки = "ОстаткиДенежныхСредств" Тогда
	    Группировка.Добавить(ГруппировкаСчет);
	Иначе
	    Группировка.Вставить(0, ГруппировкаСчет);
	КонецЕсли;

	ДополнительныеСвойства.Вставить("Группировка", Группировка);
	
	ГруппировкаКолонок_ = Новый Массив();
	Для Каждого СтрокаГруппировки Из ДанныеОтчета.Объект.ГруппировкаКолонок Цикл
		Если СтрокаГруппировки.Использование Тогда
			СтрокаДляРасшифровки = Новый Структура("Использование, Поле, Представление, ТипГруппировки");
			ЗаполнитьЗначенияСвойств(СтрокаДляРасшифровки, СтрокаГруппировки);
			ГруппировкаКолонок_.Добавить(СтрокаДляРасшифровки);
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеСвойства.Вставить("ГруппировкаКолонок", ГруппировкаКолонок_);
	
	НастройкиРасшифровки = Новый Структура();
	НастройкиРасшифровки.Вставить(ИДРасшифровки , ПользовательскиеНастройки);
	ДанныеОтчета.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
	
	ПоместитьВоВременноеХранилище(ДанныеОтчета, Адрес);
	
	ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает значение искомого поля из элемента расшифровки.
//
Функция ПолучитьЗначениеРасшифровки(Элемент, ИмяПоля)
	
	Если ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		// Ищем поля в текущем элементе
		Поле = Элемент.ПолучитьПоля().Найти(ИмяПоля);
		Если Поле <> Неопределено Тогда
			// Возвращаем значение найденного поля
			Возврат Поле.Значение;
		КонецЕсли;
	КонецЕсли;
	
	// Если поле не нашлось, или текущий элемент не содержит полей
	// ищем поля среди родителей элемента (вышестоящие группировки).
	Родители  = Элемент.ПолучитьРодителей();
	Если Родители.Количество() > 0 Тогда
		
		Для Каждого Родитель Из Родители Цикл
			// Вызываем рекурсивный поиск поля
			ЗначениеРасшифровки = ПолучитьЗначениеРасшифровки(Родитель, ИмяПоля);
			
			Если ЗначениеРасшифровки <> Неопределено Тогда
				Возврат ЗначениеРасшифровки;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Если ничего не нашлось
	Возврат Неопределено;
	
КонецФункции

#КонецЕсли