////////////////////////////////////////////////////////////////////////////////
// Описание формы
// Параметры фомры:
//  Организация - СправочникСсылка.Организации - Налогоплательщик, представляющий отчет
//  мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета - Дата - отчетный период формирования отчета
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	мВыбраннаяФорма = "ФормаОтчета2013Кв1";
	КодФормы 		= "ФормаОтчета";
	               		
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруФормРегОтчета(ЭтотОбъект);	
			
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;	
	СтруктураРеквизитовФормы.мПечатныеформы         = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями = РегламентированнаяОтчетностьПереопределяемый.ПоддержкаРаботыСоСтруктурнымиПодразделениями(); 
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	// Общие механизмы
	ЗаполнитьСведенияОбОтчетномПериоде();
		
	Инициализация(Параметры.БезОткрытияФормы);
	
	УстановитьФорматВывода();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);	
		ТекстВопроса = НСТР("ru = 'Сохранить данные отчета?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(мСписокСтруктурныхЕдиниц, ЭтаФорма, СтандартнаяОбработка, "", Налогоплательщик,,, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда
		мСписокСтруктурныхЕдиниц = Результат;		
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц); 		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	
	ЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТочностьЕдиницыИзмеренияПриИзменении(Элемент)
	
	ТочностьЕдиницыИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПодписиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДатаПодписи) Тогда
		ДатаПодписиПриИзмененииНаСервере();
		Модифированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЯзыкФормированияПриИзменении(Элемент)

	ЯзыкФормированияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСчетовУчетаРасчетовНажатие(Элемент)
	
	БухгалтерскиеОтчетыКлиент.РедактироватьСписокСчетовИсключаемыхИзРасчетаЗадолженности(ЭтаФорма, 3,,, ЭтотОбъект, мСчетаДляРасчета);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "Отчеты"

&НаКлиенте
Процедура ФормаОтчетаПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Заполнить(Команда)
	
	Перезаполнить = Истина; // Для выполнения запроса на пересчет данных к пользователю
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения =  РегламентированнаяОтчетностьКлиент.ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Перезаполнить Тогда
		
		Если СтрокаФормы.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстВопроса = "Перезаполнить данные формы и ее дополнительных форм?";
		Иначе
			ТекстВопроса = "Перезаполнить данные формы?";
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);
		Оповещение.ДополнительныеПараметры.Вставить("Перезаполнить", Перезаполнить);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);		

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФорму(Команда)
	
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	 	
	
	НачатьЗамерВремени();
	
	ЗаполнитьАвтоНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	ОткрытьФормуНастройкиСтраниц();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыФормы.Вставить("Организация",              Налогоплательщик);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, мВыбраннаяФорма, "") + "ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ОценкаПроизводительности

&НаКлиенте
Функция НачатьЗамерВремени()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "Регламентированный отчет ""форма № инв-4"" (заполнение)";
		ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент").НачатьЗамерВремени(Истина, КлючеваяОперация);
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеТаймера()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда 
		
		Возврат ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").НачатьЗамерВремени();
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьЗамер(ВремяНачала)
	
	Если ВремяНачала <> Неопределено 
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "Регламентированный отчет ""форма № инв-4"" (заполнение)";
		ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СохранитьДанные() Экспорт
	
	СохранитьДанныеНаСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеглОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Форма = ДополнительныеПараметры.Форма;	
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", Форма.КодФормы));
		Вложенность = СтрокаФормы.ПолучитьЭлементы().Количество() > 0;	
		
		ОчиститьРеглОтчетЗавершениеНаСервере(СтрокаФормы.КодФормы, СтрокаФормы.Многострочность, Вложенность)	
	КонецЕсли;
	
КонецПроцедуры 	

&НаСервере
Процедура ОчиститьРеглОтчетЗавершениеНаСервере(КодФормы, ПризнакМногострочности, Вложенность)
	
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, ПризнакМногострочности, Вложенность);
	ВсегоСтраниц = 0;
	
КонецПроцедуры

&НаСервере
// Процедура очистки формы
//
// параметр: ТекИмяФормы - имя очищаемой формы (=КодФормы)
//           ОчиститьВсе - признак вида очистки формы              
//
Процедура Очистить(ТекИмяФормы, ОчиститьВсе = Ложь) Экспорт
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	
	СписокПоказателейНеПодлежащихОчистке.Добавить("КодИИН_БИН");   	
	СписокПоказателейНеПодлежащихОчистке.Добавить("НаименованиеОрганизации");		
	СписокПоказателейНеПодлежащихОчистке.Добавить("НомерДокумента");            		

	ТекТабличныйДокумент = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"];
	
	ТекТабличныйДокумент.Очистить();
	
	ВсегоСтраниц = 0;
	
КонецПроцедуры // Очистить()

&НаКлиенте
Процедура ОбновитьПараметрыФормыНаКлиенте(Параметры) Экспорт
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормы(ТекФорма, Параметры)
	
	СтруктураРеквизитовФормы = ТекФорма.СтруктураРеквизитовФормы;
	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитовФормы, Параметры);
	
	ТекФорма.Налогоплательщик = Параметры.Организация;
	
	// заполним представление списка структурных единиц
	ТекФорма.мСписокСтруктурныхЕдиниц = Параметры.мСписокСтруктурныхЕдиниц;
	ТекФорма.ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ТекФорма.мСписокСтруктурныхЕдиниц);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяГлавнойФормы(ВыбраннаяФорма) Экспорт
	
	Возврат СтрДлина(ВыбраннаяФорма)-7;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры инициализации отчета и структуры его данных

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокСтруктурныхЕдиниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");			
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");		
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");		
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");		
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");	
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);			
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);	
	СтруктураРеквизитовФормы.Вставить("мПериодичность", Параметры.мПериодичность);		
	СтруктураРеквизитовФормы.Вставить("НалоговыйКомитет", Неопределено);			
	СтруктураРеквизитовФормы.Вставить("мГод");	
	СтруктураРеквизитовФормы.Вставить("мКвартал");	
	СтруктураРеквизитовФормы.Вставить("мМесяц");	
	// индивидуальные параметры формы
	СтруктураРеквизитовФормы.Вставить("мПоддержкаРаботыСоСтруктурнымиПодразделениями");
	СтруктураРеквизитовФормы.Вставить("ДатаПодписи");
	
КонецПроцедуры // СформироватьСтруктуруРеквизитовФормы

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;			
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	ВсегоСтраниц = 0;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 2;
			ДатаПодписи              = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();	
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	//Обход ситуации с повторным открытием основной формы, из-за ТД
	МассивРеквизитовФормы = ЭтотОбъект.ПолучитьРеквизиты();
	Для Счетчик = 0 По МассивРеквизитовФормы.Количество()-1 Цикл		
		РеквизитФормы = МассивРеквизитовФормы[Счетчик];
		Если РеквизитФормы.ТипЗначения.СодержитТип(Тип("ТабличныйДокумент")) Тогда
			ЭтотОбъект[РеквизитФормы.Имя] = ЭтотОбъект[РеквизитФормы.Имя];	
		КонецЕсли;
	КонецЦикла;	  	
	
	Если НЕ ЗначениеЗаполнено(ЯзыкФормирования) Тогда
		ЯзыкФормирования = "ru";
	КонецЕсли;
	
	ПолучитьСписокСчетовРасчета();
	
	мСтруктураЗначений = Новый Структура;
	
	Если СтруктураРеквизитовФормы.Свойство("СформироватьФормуОтчетаАвтоматически") И СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически <> Неопределено Тогда		
		
		ЗначениеТаймера = ЗначениеТаймера();
		
		ЗаполнитьАвтоНаСервере();		
		
		ЗаписатьЗамер(ЗначениеТаймера);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтчетномПериоде() Экспорт

	СтрПериодОтчета = ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ФП = истина");
	
	СтруктураРеквизитовФормы.мКвартал = Лев(СтрПериодОтчета, 1);
	СтруктураРеквизитовФормы.мМесяц = Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	СтруктураРеквизитовФормы.мГод = Лев(Прав(СтрПериодОтчета, 7), 4);
		
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// Сохранение и восстановление данных

&НаСервере
Процедура СохранитьДанныеНаСервере()
	
	мСписокСохранения = Новый Структура;

	ДатаНачалаЗамераВремени = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Если Не ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) ИЛИ (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) Тогда
		// создаем новый документ вида РегламентированныйОтчет
		ДокументРеглОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
				
		ДокументРеглОтчет.Дата = ТекущаяДатаСеанса();
		ДокументРеглОтчет.УстановитьВремя();
		ДокументРеглОтчет.УстановитьНомерДокументаОтчета();
		
	Иначе
		ДокументРеглОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	// установим значения реквизитов документа
	МетаданныеОтчета = РеквизитФормыВЗначение("ОтчетОбъект"). Метаданные();
	ДокументРеглОтчет.ИсточникОтчета           = МетаданныеОтчета.Имя;
	ДокументРеглОтчет.НаименованиеОтчета       = МетаданныеОтчета.Формы.ОсновнаяФорма.Представление();
	ДокументРеглОтчет.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ДокументРеглОтчет.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	//ДокументРеглОтчет.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;  
	ДокументРеглОтчет.ДатаПодписи              = ДатаПодписи;
	ДокументРеглОтчет.ВыбраннаяФорма           = мВыбраннаяФорма;
	ДокументРеглОтчет.Организация              = Налогоплательщик;
	//ДокументРеглОтчет.НалоговыйКомитет         = СтруктураРеквизитовФормы.НалоговыйКомитет;
	ДокументРеглОтчет.ЕдиницаИзмерения         = ЕдиницаИзмерения;
	ДокументРеглОтчет.ТочностьЕдиницыИзмерения = ТочностьЕдиницыИзмерения;
	ДокументРеглОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРеглОтчет.Комментарий              = Комментарий;
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	ИмяТекТабличногоПоля    = "ФормаОтчетаПолеТабличногоДокументаСтраница1";
	ТекТабличноеПоле        = ЭтотОбъект[ИмяТекТабличногоПоля];
	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// вставляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", "01/01/2013");
	
	// вставляем список организаций
	СписокСохранения.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	
	// вставляем язык формирования формы
	СписокСохранения.Вставить("ЯзыкФормирования", ЯзыкФормирования);

	// Сохраняем документ
	Если ДокументРеглОтчет <> Неопределено Тогда
						
		ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
		ДокументРеглОтчет.ДанныеОтчета = ХранилищеДанных;
		
		СохранитьОшибка = 1;
		
		// записываем документ, хранящий данные отчета
		Попытка
			ДокументРеглОтчет.Записать();			
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Не удается сохранить регламентированный отчет! " + ОписаниеОшибки());			
			СохранитьОшибка = 0;
		КонецПопытки;
		
		Если СохранитьОшибка = 1 Тогда
			// всё прошло без ошибок
			Модифицированность = Ложь;
		КонецЕсли;		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = ДокументРеглОтчет.Ссылка;
	
	ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Записан документ %1 %2'"), ДокументРеглОтчет.Ссылка, ДокументРеглОтчет.Ссылка.Комментарий));	
	
	КлючеваяОперация = "Документ ""регламентированный отчет форма № инв-4"" (запись)'";
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ДатаНачалаЗамераВремени);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ПоказателиОтчета;
	
	ТекТабличныйДокумент = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"];

	мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок;

	// восстанавливаем реквизиты отчета
	Налогоплательщик         = мСохраненныйДок.Организация;
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);

	Если СписокСохранения.Свойство("мСписокСтруктурныхЕдиниц") Тогда
		мСписокСтруктурныхЕдиниц = СписокСохранения.мСписокСтруктурныхЕдиниц;
	Иначе
	    мСписокСтруктурныхЕдиниц.Очистить();
	    мСписокСтруктурныхЕдиниц.Добавить(Налогоплательщик);
	КонецЕсли;
	ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц);
	
	// восстановим язык формирования формы
	СписокСохранения.Свойство("ЯзыкФормирования", ЯзыкФормирования);
	Если НЕ ЗначениеЗаполнено(ЯзыкФормирования) Тогда
		ЯзыкФормирования = "ru";
	КонецЕсли;
	
	Если ПоказателиОтчета.Свойство("ПолеТабличногоДокументаИнв") Тогда
		ВывестиВДокументПриВосстановлении(ПоказателиОтчета.ПолеТабличногоДокументаИнв);
	ИначеЕсли ПоказателиОтчета.Свойство("ФормаОтчетаПолеТабличногоДокументаСтраница1") Тогда
		ВывестиВДокументПриВосстановлении(ПоказателиОтчета.ФормаОтчетаПолеТабличногоДокументаСтраница1);
	КонецЕсли;
	
	УстановитьФорматВывода();

	Модифицированность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьДанныеНаСервере();
		Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;
	
КонецПроцедуры   

////////////////////////////////////////////////////////////////////////////////
// Печать

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Если ВсегоСтраниц = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нет данных для печати'"));
		Возврат;
	КонецЕсли;
    
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок),,, БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати,, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
            
    Перем СтруктураГруппы;
	
    Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
        ТекстСообщения = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");            
        ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);                
        Возврат Ложь;
    КонецЕсли;
            
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов.Очистить();
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
    СтруктураРеквизитовФормы.мРежимПечати = Истина;

	ТекТабличноеПоле = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"];
	ИдентификаторТекФормы = Новый УникальныйИдентификатор();
	НаименованиеДляЗаписи = НСтр("ru = 'Отчет 4 ИНВ по состоянию на '") +  Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДЛФ=ДД");
	Стр = 1;

	Пока Стр < ВсегоСтраниц + 1  Цикл
		
		ТабДок = Новый ТабличныйДокумент;
		ИмяОбласти = "Страница" + СокрЛП(Стр);
		ТекОбласть = ТекТабличноеПоле.ПолучитьОбласть(ИмяОбласти);
		ТабДок.Вывести(ТекОбласть);
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабДок.ЧерноБелаяПечать   = Истина;
		ТабДок.АвтоМасштаб        = Истина;
		
		ИмяЛиста = НСтр("ru = 'Страница № '") + Строка(Стр);
		Стр = Стр + 1;
		
		Значение = Новый Массив;
		Значение.Добавить(ТабДок);
		Значение.Добавить(ИдентификаторТекФормы);
		Значение.Добавить(НаименованиеДляЗаписи);
		
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(Значение, ИмяЛиста);
			
	КонецЦикла;
		
	Для Каждого Эл Из СтруктураРеквизитовФормы.мПечатныеФормы Цикл
				
		Значение = Новый Массив;
		Значение.Добавить(ПоместитьВоВременноеХранилище(Эл.Значение[0], УникальныйИдентификатор));
		Значение.Добавить(Эл.Значение[1]);
		Значение.Добавить(Эл.Значение[2]);
		
		СтруктураРеквизитовФормы.СписокПечатаемыхЛистов.Добавить(Значение, Эл.Представление);			
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
        
    Возврат Истина;
    
КонецФункции


&НаСервере
Процедура ЕдиницаИзмеренияПриИзмененииНаСервере()
	
	ПроверитьТочность();
	УстановитьФорматВывода();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ТочностьЕдиницыИзмеренияПриИзмененииНаСервере()
	
	ПроверитьТочность();
	УстановитьФорматВывода();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиСтраниц()
	
// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРаздел = Элементы.РазделыОтчета.ТекущиеДанные.Страницы;		
	КонецЕсли;
	
	Для Каждого ТекФорма ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",ТекФорма.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			ТекущаяСтрокаСписка.Выгружать               = ТекФорма.Выгружать;
			ТекущаяСтрокаСписка.ПоказатьСтраницу        = ТекФорма.ПоказатьСтраницу;			
			ТекущаяСтрокаСписка.АвтополучениеИтогов     = ТекФорма.АвтополучениеИтогов;  
			ТекущаяСтрокаСписка.АвтоЗаполнение          = ТекФорма.АвтоЗаполнение;  
		КонецЕсли;		   
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокФормДерева",СписокФормДерева);
	
	ДопПараметры = Новый Структура("ТекущийРаздел",ТекущийРаздел);
	
	ОповещениеПослеЗакрытияФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастройкиСтраниц",ЭтотОбъект,ДопПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.НастройкиОтчета",ПараметрыФормы, ЭтаФорма,,,,ОповещениеПослеЗакрытияФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиСтраниц(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьДанныеФормы(РезультатЗакрытия, СписокФормДерева);
	
	Модифицированность = Истина;
	
	//обновим мСписокФормБезИерархии
	Для Каждого СтрокаФормы ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",СтрокаФормы.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			СтрокаФормы.Выгружать               = ТекущаяСтрокаСписка.Выгружать;
			СтрокаФормы.ПоказатьСтраницу        = ТекущаяСтрокаСписка.ПоказатьСтраницу;			
			СтрокаФормы.АвтополучениеИтогов     = ТекущаяСтрокаСписка.АвтополучениеИтогов;  
			СтрокаФормы.АвтоЗаполнение          = ТекущаяСтрокаСписка.АвтоЗаполнение;  
		КонецЕсли;			
	КонецЦикла; 	

	Если ДополнительныеПараметры.Свойство("ТекущийРаздел") И НЕ ДополнительныеПараметры.ТекущийРаздел = Неопределено Тогда  		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(РазделыОтчета, Новый Структура("СписокФормДереваСтраницы",ДополнительныеПараметры.ТекущийРаздел));
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;			
	КонецЕсли;  	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие

&НаСервере
// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	
	Перем СтруктураГруппы;
	Перем РазмерностьПрописью;
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописью = НСтр("ru = ""тенге""; kz = ""теңге""", ЯзыкФормирования);				
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0; ЧРГ= ";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописью = НСтр("ru = ""тысяч тенге""; kz = ""мың теңге""", ЯзыкФормирования);				
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3; ЧРГ= ";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописью = НСтр("ru = ""млн. тенге""; kz = ""млн. теңге""", ЯзыкФормирования);				
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";
		
	КонецЕсли;
	
	ТекТабличныйДокумент = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"];

	Для Каждого ОбластьТаблицы Из ТекТабличныйДокумент.Области Цикл
		// по областям каждой страницы
		Если Не ОбластьТаблицы.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбластьТаблицы.СодержитЗначение Тогда
			Если СокрЛП(ОбластьТаблицы.ТипЗначения) = "Число" Тогда
				ОбластьТаблицы.Формат = мСтрокаФормата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	УстановитьЗначениеОбласти(ТекТабличныйДокумент, "РазмерностьПрописью", РазмерностьПрописью);
	
КонецПроцедуры // УстановитьФорматВывода()

&НаСервере
Функция ФормаРассчитатьДанныеФормы(ВыдаватьСообщения = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаОстатков.ДебиторКредитор КАК ДебиторКредитор,
	               |	ТаблицаОстатков.Счет,
	               |	ТаблицаОстатков.ДатаОбразованияЗадолженности,
	               |	ТаблицаОстатков.Вид,
	               |	СУММА(ТаблицаОстатков.СуммаКонечныйРазвернутыйОстатокДт) КАК СуммаКонечныйРазвернутыйОстатокДт,
	               |	СУММА(ТаблицаОстатков.СуммаКонечныйРазвернутыйОстатокКт) КАК СуммаКонечныйРазвернутыйОстатокКт
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТиповойОстатки.Субконто1 КАК ДебиторКредитор,
	               |		ТиповойОстатки.Счет КАК Счет,
	               |		ЕСТЬNULL(ТиповойОстатки.Субконто2.ДатаНачалаДействияДоговора, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаОбразованияЗадолженности,
	               |		ВЫБОР
	               |			КОГДА ТиповойОстатки.СуммаРазвернутыйОстатокДт > 0
	               |				ТОГДА ""Дебитор""
	               |			ИНАЧЕ ""Кредитор""
	               |		КОНЕЦ КАК Вид,
	               |		ТиповойОстатки.СуммаРазвернутыйОстатокДт КАК СуммаКонечныйРазвернутыйОстатокДт,
	               |		ТиповойОстатки.СуммаРазвернутыйОстатокКт КАК СуммаКонечныйРазвернутыйОстатокКт
	               |	ИЗ
	               |		РегистрБухгалтерии.Типовой.Остатки(&КонПериода, 
	               |				Счет В (&СписокСчетов)
	               |					И (НЕ Счет В (&СписокИсключенныхСчетов)),
	               |				&ВидыСубконтоКонтрагентыДоговоры,
	               |				Организация В (&СписокОрганизаций)) КАК ТиповойОстатки
	               |	ГДЕ
	               |		ТиповойОстатки.Субконто1 <> &ПустойКонтрагент) КАК ТаблицаОстатков
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаОстатков.ДебиторКредитор,
	               |	ТаблицаОстатков.Счет,
	               |	ТаблицаОстатков.ДатаОбразованияЗадолженности,
	               |	ТаблицаОстатков.Вид
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТиповойОстатки.Субконто1,
	               |	ТиповойОстатки.Счет,
	               |	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	               |	ВЫБОР
	               |		КОГДА ТиповойОстатки.СуммаРазвернутыйОстатокДт > 0
	               |			ТОГДА ""Дебитор""
	               |		ИНАЧЕ ""Кредитор""
	               |	КОНЕЦ,
	               |	ТиповойОстатки.СуммаРазвернутыйОстатокДт,
	               |	ТиповойОстатки.СуммаРазвернутыйОстатокДт
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(&КонПериода,
	               |			Счет В (&СписокСчетов)
	               |				И (НЕ Счет В (&СписокИсключенныхСчетов)),
	               |			&ВидыСубконтоДебиторыКредиторы,
	               |			Организация В (&СписокОрганизаций)) КАК ТиповойОстатки
	               |ГДЕ
	               |	ТиповойОстатки.Субконто1 <> &ПустойКонтрагент
	               |	И ТиповойОстатки.Субконто1 <> &ПустоеФизЛицо
	               |	И (НЕ ТиповойОстатки.Субконто1 ЕСТЬ NULL )
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТиповойОстатки.Субконто1,
	               |	ТиповойОстатки.Счет,
	               |	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	               |	ВЫБОР
	               |		КОГДА ТиповойОстатки.СуммаРазвернутыйОстатокДт > 0
	               |			ТОГДА ""Дебитор""
	               |		ИНАЧЕ ""Кредитор""
	               |	КОНЕЦ,
	               |	ТиповойОстатки.СуммаРазвернутыйОстатокДт,
	               |	ТиповойОстатки.СуммаРазвернутыйОстатокКт
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(&КонПериода,
	               |			Счет В (&СписокСчетов)
	               |				И (НЕ Счет В (&СписокИсключенныхСчетов)),
	               |			&ВидыСубконтоРаботникиОрганизации,
	               |			Организация В (&СписокОрганизаций)) КАК ТиповойОстатки
	               |ГДЕ
	               |	ТиповойОстатки.Субконто1 <> &ПустоеФизЛицо
	               |	И (НЕ ТиповойОстатки.Субконто1 ЕСТЬ NULL )
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТиповойОстатки.Субконто1,
	               |	ТиповойОстатки.Счет,
	               |	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	               |	ВЫБОР
	               |		КОГДА ТиповойОстатки.СуммаРазвернутыйОстатокДт > 0
	               |			ТОГДА ""Дебитор""
	               |		ИНАЧЕ ""Кредитор""
	               |	КОНЕЦ,
	               |	ТиповойОстатки.СуммаРазвернутыйОстатокДт,
	               |	ТиповойОстатки.СуммаРазвернутыйОстатокКт
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(
	               |			&КонПериода,
	               |			(Счет = &Счет3395
	               |				ИЛИ Счет = &Счет4175)
	               |				И (НЕ Счет В (&СписокИсключенныхСчетов)),
	               |			,
	               |			Организация В (&СписокОрганизаций)) КАК ТиповойОстатки
	               |ГДЕ
	               |	ТиповойОстатки.Субконто1 <> &ПустойКонтрагент
	               |	И (НЕ ТиповойОстатки.Субконто1 ЕСТЬ NULL )
	               |
				   |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТиповойОстатки.Субконто3,
	               |	ТиповойОстатки.Счет,
	               |	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	               |	ВЫБОР
	               |		КОГДА ТиповойОстатки.СуммаРазвернутыйОстатокДт > 0
	               |			ТОГДА ""Дебитор""
	               |		ИНАЧЕ ""Кредитор""
	               |	КОНЕЦ,
	               |	ТиповойОстатки.СуммаРазвернутыйОстатокДт,
	               |	ТиповойОстатки.СуммаРазвернутыйОстатокКт
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(&КонПериода,
	               |			Счет В (&СписокСчетов)
	               |				И (НЕ Счет В (&СписокИсключенныхСчетов)),
	               |			&ВидыСубконтоНалогиВидыПлатежейКонтрагенты,
	               |			Организация В (&СписокОрганизаций)) КАК ТиповойОстатки
	               |ГДЕ
	               |	ТиповойОстатки.Субконто3 <> &ПустойКонтрагент
	               |	И (НЕ ТиповойОстатки.Субконто3 ЕСТЬ NULL )
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДебиторКредитор";
	
	ГраницаПериода = Новый Граница(КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("КонПериода", ГраницаПериода);
	Запрос.УстановитьПараметр("СписокОрганизаций", мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидыСубконтоДебиторыКредиторы", ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДебиторыКредиторыОрганизации);
	Запрос.УстановитьПараметр("ВидыСубконтоРаботникиОрганизации", ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций);
	
	КонтрагентыДоговоры = Новый СписокЗначений;
	КонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	КонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	
	ВидыСубконтоНалогиВидыПлатежейКонтрагенты = Новый СписокЗначений;
	ВидыСубконтоНалогиВидыПлатежейКонтрагенты.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.НалогиСборыОтчисления);
	ВидыСубконтоНалогиВидыПлатежейКонтрагенты.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыПлатежейВБюджетИФонды);
	ВидыСубконтоНалогиВидыПлатежейКонтрагенты.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	
	Запрос.УстановитьПараметр("ВидыСубконтоКонтрагентыДоговоры", КонтрагентыДоговоры);
	Запрос.УстановитьПараметр("ВидыСубконтоНалогиВидыПлатежейКонтрагенты", ВидыСубконтоНалогиВидыПлатежейКонтрагенты);
	Запрос.УстановитьПараметр("Счет4175", ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПоИсполнительнымЛистам);
	Запрос.УстановитьПараметр("Счет3395", ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоИсполнительнымЛистам);
	Запрос.УстановитьПараметр("СписокСчетов", мСчетаДляРасчета);
	СписокСчетовИсключаемыхИзРасчета = БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(3);
	Запрос.УстановитьПараметр("СписокИсключенныхСчетов", СписокСчетовИсключаемыхИзРасчета);
	
	Результат = Запрос.Выполнить();
		     	
	Возврат Результат;
	
КонецФункции // ФормаРассчитатьДанныеФормы()

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
		
	ТаблицаДанных = ФормаРассчитатьДанныеФормы().Выгрузить();
	
	ТекТабличноеПоле = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"];
	
	СписокСохранения = Новый Структура;
	ТаблицаДебЗадолженности = Новый ТаблицаЗначений;
	ТаблицаДебЗадолженности.Колонки.Добавить("ДебиторКредитор");
	ТаблицаДебЗадолженности.Колонки.Добавить("Счет");
	ТаблицаДебЗадолженности.Колонки.Добавить("ДатаОбразованияЗадолженности");	
	ТаблицаДебЗадолженности.Колонки.Добавить("СуммаКонечныйРазвернутыйОстаток");	
	
	ТаблицаКредЗадолженности = ТаблицаДебЗадолженности.Скопировать();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Если СтрокаТаблицы.Вид = "Дебитор" Тогда
			НоваяСтрока = ТаблицаДебЗадолженности.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
			НоваяСтрока.СуммаКонечныйРазвернутыйОстаток = СтрокаТаблицы.СуммаКонечныйРазвернутыйОстатокДт;
		ИначеЕсли СтрокаТаблицы.Вид = "Кредитор" Тогда
			НоваяСтрока = ТаблицаКредЗадолженности.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
			НоваяСтрока.СуммаКонечныйРазвернутыйОстаток = СтрокаТаблицы.СуммаКонечныйРазвернутыйОстатокКт;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДебЗадолженности.Сортировать("ДебиторКредитор,Счет");
	ТаблицаКредЗадолженности.Сортировать("ДебиторКредитор,Счет");
	СписокСохранения.Вставить("ДебиторскаяЗадолженность",  ТаблицаДебЗадолженности);
	СписокСохранения.Вставить("КредиторскаяЗадолженность", ТаблицаКредЗадолженности);
	
	ВывестиВДокумент(СписокСохранения);
	
	// заполняем реквизиты организации
	ОргСведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(Налогоплательщик, ДатаПодписи);
	
	Если ОргСведения <> 0 Тогда
		
		// Инициализируем переменные
		НаимЮЛПол    = "";   // Полное наименование 	
		ИИН_БИН      = "";   // ИИН_БИН
		
		// Получаем данные
		ОргСведения.Свойство("БИН_ИИН",            ИИН_БИН);
		ОргСведения.Свойство("ПолноеНаименование", НаимЮЛПол);

		// Реквизиты организации
		УстановитьЗначениеОбласти(ТекТабличноеПоле, "НаименованиеОрганизации", НаимЮЛПол);
		УстановитьЗначениеОбласти(ТекТабличноеПоле, "КодИИН_БИН"             , ИИН_БИН);
		
	КонецЕсли;
	
	УстановитьЗначениеОбласти(ТекТабличноеПоле, "ДатаСоставления", ДатаПодписи);
	
	Модифицированность = Истина;
	УстановитьФорматВывода();
	Комментарий = "";

КонецПроцедуры

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	УстановитьЗначениеОбласти(ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"], "ДатаСоставления", ДатаПодписи);
	Модифированность = Истина;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УстановитьЗначениеОбласти(Приемник, ИмяОбласти, Значение)

	Результат = Ложь;
	Если ТипЗнч(Приемник) = Тип("Структура") Тогда
		
		Приемник.Вставить(ИмяОбласти, Значение);
		Результат = Истина;
	
	ИначеЕсли ТипЗнч(Приемник) = Тип("ТабличныйДокумент") Тогда
		
		ИскомаяОбласть = Приемник.Области.Найти(ИмяОбласти);
		Если ИскомаяОбласть <> Неопределено Тогда
			Если ИскомаяОбласть.СодержитЗначение Тогда
				ИскомаяОбласть.Значение = Значение;
			Иначе
				ИскомаяОбласть.Текст = Строка(Значение);
			КонецЕсли;
			Результат = Истина;
		КонецЕсли;
				
	КонецЕсли;

    Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗначениеОбласти(Источник, ИмяОбласти, ЗначениеПоУмолчанию = Неопределено) 

	Результат = ЗначениеПоУмолчанию;
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		
		Источник.Свойство(ИмяОбласти, Результат);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ТабличныйДокумент") Тогда
		
		ИскомаяОбласть = Источник.Области.Найти(ИмяОбласти);
		
		Если ИскомаяОбласть <> Неопределено Тогда
			
			Если ИскомаяОбласть.СодержитЗначение Тогда
				Результат = ИскомаяОбласть.Значение;
			Иначе
				Результат = ИскомаяОбласть.Текст;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
	        ТекстСообщения = НСтр("ru = 'При выводе сумм в тенге точность не может превышать 2 знака'");            
	        ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);                
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
	        ТекстСообщения = НСтр("ru = 'При выводе сумм в тысячах тенге точность не может превышать 3 знака'");            
	        ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);                
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
	        ТекстСообщения = НСтр("ru = 'При выводе сумм в миллионах тенге точность не может превышать 6 знаков'");            
	        ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);                
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

&НаСервере
Процедура ПолучитьСписокСчетовРасчета()
	
	// определим счета, учавствующие в расчете
	МассивВидовСубконто = Новый Массив;
	МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДебиторыКредиторыОрганизации);
	МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций);
	МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
		
	МассивСчетов = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	Типовой.Ссылка КАК Счет
			|ИЗ
			|	ПланСчетов.Типовой КАК Типовой
			|ГДЕ
			|	Типовой.ВидыСубконто.ВидСубконто В(&МассВидыСубконто)
			|	И НЕ Типовой.Забалансовый
			|	И НЕ Типовой.ЗапретитьИспользоватьВПроводках
			|
			|УПОРЯДОЧИТЬ ПО
			|	Типовой.Порядок";

	Запрос.УстановитьПараметр("МассВидыСубконто", МассивВидовСубконто);
		
	ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
	мСчетаДляРасчета.ЗагрузитьЗначения(ТаблицаРезультатов.ВыгрузитьКолонку("Счет"));
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСписокСчетовИсключаемыхИзРасчетаЗадолженностиЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	//Форма = ДополнительныеПараметры.Форма;
	
	СписокСчетовИзменен = РезультатЗакрытия;
	
	//Если ТипЗнч(СписокСчетовИзменен) = Тип("Булево") И СписокИзменен Тогда
	//	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
	//КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЯзыкФормированияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(ЯзыкФормирования) Тогда
		// формируем данные редактируемых ячеек таблицы
		ПоказателиОтчета        = Новый Структура();
		ИмяТекТабличногоПоля    = "ФормаОтчетаПолеТабличногоДокументаСтраница1";
		ТекТабличноеПоле        = ЭтотОбъект[ИмяТекТабличногоПоля];
		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		ВывестиВДокументПриВосстановлении(ПоказателиОтчета.ФормаОтчетаПолеТабличногоДокументаСтраница1);
		УстановитьФорматВывода();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВывестиВДокумент(СписокСохранения)
	
	// очищаем текущие данные
	ТекТабличныйДокумент = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"];
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, Ложь, Ложь);

	Отчет = РеквизитФормыВЗначение("ОтчетОбъект");
	Макет = Отчет.ПолучитьМакет("МакетФормаОтчета2013Кв1");
	Верх  = 1;
	
	Если ЗначениеЗаполнено(ЯзыкФормирования) Тогда
		Макет.КодЯзыкаМакета = ЯзыкФормирования;		
	КонецЕсли;
	
	ТаблицаДебЗадолженности = Неопределено;
	ТаблицаКредЗадолженности = Неопределено;
	СписокСохранения.Свойство("ДебиторскаяЗадолженность",  ТаблицаДебЗадолженности);
	СписокСохранения.Свойство("КредиторскаяЗадолженность", ТаблицаКредЗадолженности);
	
	КоличествоСтрокДебиторскойЗадолженности  = ТаблицаДебЗадолженности.Количество();
	КоличествоСтрокКредиторскойЗадолженности = ТаблицаКредЗадолженности.Количество();
	
	ОбластьШапка      					  = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаЛистаДебЗадолженность     = Макет.ПолучитьОбласть("ШапкаЛистаДебЗадолженность");
	ОбластьСтрокаДебитор     			  = Макет.ПолучитьОбласть("СтрокаДебитор");
	ОбластьПодвалЛистаДебЗадолженность    = Макет.ПолучитьОбласть("ПодвалЛистаДебЗадолженность");
	ОбластьШапкаЛистаКредЗадолженность    = Макет.ПолучитьОбласть("ШапкаЛистаКредЗадолженность");
	ОбластьШапкаЛистаКредЗадолженностьОсн = Макет.ПолучитьОбласть("ШапкаЛистаКредЗадолженностьОсн");	
	ОбластьСтрокаКредитор     			  = Макет.ПолучитьОбласть("СтрокаКредитор");
	ОбластьПодвалЛистаКредЗадолженность   = Макет.ПолучитьОбласть("ПодвалЛистаКредЗадолженность");
	ОбластьПодвал     					  = Макет.ПолучитьОбласть("Подвал");
	
	МассивПроверяемыхОбластей = Новый Массив();
	МассивПроверяемыхОбластей.Добавить(ОбластьСтрокаДебитор);
	МассивПроверяемыхОбластей.Добавить(ОбластьСтрокаДебитор);
	
	// Шапка отчета
	ТекТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Если Макет.КодЯзыкаМакета = "kz" Тогда
		ОбластьШапка.Параметры.ДатаОтчета = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "Л=kk_KZ; ДФ=""гггг 'жылғы' дд ММММ""");
	Иначе
		ОбластьШапка.Параметры.ДатаОтчета = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДЛФ=ДД");
	КонецЕсли;
	
	ТекТабличныйДокумент.Вывести(ОбластьШапка);
	
	СписокОбластейСтрокиДеб = Новый СписокЗначений;
	Для Каждого ИспользуемаяОбласть Из ОбластьСтрокаДебитор.Области Цикл      
		СписокОбластейСтрокиДеб.Добавить(ИспользуемаяОбласть);
	КонецЦикла;
	
	СписокОбластейСтрокиКред = Новый СписокЗначений;
	Для Каждого ИспользуемаяОбласть Из ОбластьСтрокаКредитор.Области Цикл      
		СписокОбластейСтрокиКред.Добавить(ИспользуемаяОбласть);
	КонецЦикла;
	
	НомерСтраницы = 1;
	// выводим строки отчета для дебиторской задолженности
	МаксНомерСтроки = КоличествоСтрокДебиторскойЗадолженности;
	Если КоличествоСтрокДебиторскойЗадолженности = 0 Тогда
		
		Для НомерСтроки = 1 По 50 Цикл
			// Номера областей устанавливаем в соответствии с текущим номером строки
			Для Н = 0 По СписокОбластейСтрокиДеб.Количество() - 1 Цикл
				ИспользуемаяОбласть     = СписокОбластейСтрокиДеб[Н].Значение;
				ИспользуемаяОбласть.Имя = СтрЗаменить(ИспользуемаяОбласть.Имя, "Стр" + Формат(НомерСтроки - 1, "ЧЦ=4; ЧВН=; ЧГ=0; ЧН=0") + "_", "Стр" + Формат(НомерСтроки, "ЧЦ=4; ЧВН=; ЧГ=0; ЧН=0")+"_");
			КонецЦикла;

			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТекТабличныйДокумент, МассивПроверяемыхОбластей) Тогда
				ТекТабличныйДокумент.Вывести(ОбластьПодвалЛистаДебЗадолженность);		
				ТекТабличныйДокумент.Область(Верх,, ТекТабличныйДокумент.ВысотаТаблицы).Имя = "Страница" + НомерСтраницы;
				НомерСтраницы = НомерСтраницы + 1;
				Верх = ТекТабличныйДокумент.ВысотаТаблицы + 1;
				// Выведем разрыв страницы
				ТекТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();				
				Прервать;
			КонецЕсли;                                                         
			
			ТекТабличныйДокумент.Вывести(ОбластьСтрокаДебитор);		
		
		КонецЦикла;
	Иначе
		ИТОГОВсегоДебитор = 0;
		ИТОГОСомнДебитор  = 0;
		Для НомерСтроки = 1 По МаксНомерСтроки Цикл
			
			Для Н = 0 По СписокОбластейСтрокиДеб.Количество() - 1 Цикл
				ИспользуемаяОбласть     = СписокОбластейСтрокиДеб[Н].Значение;
				ИспользуемаяОбласть.Имя = СтрЗаменить(ИспользуемаяОбласть.Имя, "Стр" + Формат(НомерСтроки - 1, "ЧЦ=4; ЧВН=; ЧГ=0; ЧН=0") + "_", "Стр" + Формат(НомерСтроки, "ЧЦ=4; ЧВН=; ЧГ=0; ЧН=0")+"_");
			КонецЦикла;
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТекТабличныйДокумент, МассивПроверяемыхОбластей) Тогда
				ТекТабличныйДокумент.Область(Верх,, ТекТабличныйДокумент.ВысотаТаблицы).Имя = "Страница" + НомерСтраницы;
				НомерСтраницы = НомерСтраницы + 1;
				Верх 		  = ТекТабличныйДокумент.ВысотаТаблицы + 1;
				// Выведем разрыв страницы
				ТекТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();								
				ТекТабличныйДокумент.Вывести(ОбластьШапкаЛистаДебЗадолженность);
			КонецЕсли;
			
			СтрокаДанных = ТаблицаДебЗадолженности[НомерСтроки-1];
			
			Если ЗначениеЗаполнено(СтрокаДанных.ДебиторКредитор) Тогда 
				Если ТипЗнч(СтрокаДанных.ДебиторКредитор) = Тип("СправочникСсылка.Контрагенты") Тогда
					ОбластьСтрокаДебитор.Параметры.Дебитор 		  = СтрокаДанных.ДебиторКредитор.НаименованиеПолное;
				Иначе
					ОбластьСтрокаДебитор.Параметры.Дебитор 		  = СтрокаДанных.ДебиторКредитор;
				КонецЕсли;
				ОбластьСтрокаДебитор.Параметры.ИИНБИНДебитора = СтрокаДанных.ДебиторКредитор.ИдентификационныйКодЛичности;
			КонецЕсли;	
			
			ОбластьСтрокаДебитор.Параметры.СчетДебитора = СтрокаДанных.Счет.Код;
			Если СтрокаДанных.Счет = ПланыСчетов.Типовой.РезервПоСомнительнымТребованиям Тогда
				ОбластьСтрокаДебитор.Параметры.СомнДебитор = СтрокаДанных.СуммаКонечныйРазвернутыйОстаток;
				ИТОГОСомнДебитор  = ИТОГОСомнДебитор + СтрокаДанных.СуммаКонечныйРазвернутыйОстаток;
			Иначе
				ОбластьСтрокаДебитор.Параметры.СомнДебитор = 0;
			КонецЕсли;
			ОбластьСтрокаДебитор.Параметры.ВсегоДебитор 		= СтрокаДанных.СуммаКонечныйРазвернутыйОстаток;
			ОбластьСтрокаДебитор.Параметры.ДатаОбрЗадолДебитора = СтрокаДанных.ДатаОбразованияЗадолженности;
						
			ИТОГОВсегоДебитор = ИТОГОВсегоДебитор + СтрокаДанных.СуммаКонечныйРазвернутыйОстаток;
			
			ТекТабличныйДокумент.Вывести(ОбластьСтрокаДебитор);
		
		КонецЦикла;
		
		Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТекТабличныйДокумент, МассивПроверяемыхОбластей) Тогда
			ТекТабличныйДокумент.Область(Верх,, ТекТабличныйДокумент.ВысотаТаблицы).Имя = "Страница" + НомерСтраницы;
			НомерСтраницы = НомерСтраницы + 1;
			Верх		  = ТекТабличныйДокумент.ВысотаТаблицы + 1;
			// Выведем разрыв страницы
			ТекТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();								
		КонецЕсли;
		
		// выводим пустые строки до конца страницы
		// очистим заполненные параметры
		ОбластьСтрокаДебитор.Параметры.Дебитор 		  		= "";
		ОбластьСтрокаДебитор.Параметры.ИИНБИНДебитора		= "";
		ОбластьСтрокаДебитор.Параметры.СчетДебитора   		= "";
		ОбластьСтрокаДебитор.Параметры.СомнДебитор 	  		= 0;
		ОбластьСтрокаДебитор.Параметры.ВсегоДебитор 		= 0;
		ОбластьСтрокаДебитор.Параметры.ДатаОбрЗадолДебитора = Дата('00010101000000');
		
		СчПечати = 0;
		
		Пока ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТекТабличныйДокумент, МассивПроверяемыхОбластей) Цикл 
			МаксНомерСтроки = МаксНомерСтроки + 1;
			Для Н = 0 По СписокОбластейСтрокиДеб.Количество() - 1 Цикл
				ИспользуемаяОбласть     = СписокОбластейСтрокиДеб[Н].Значение;
				ИспользуемаяОбласть.Имя = СтрЗаменить(ИспользуемаяОбласть.Имя, "Стр" + Формат(МаксНомерСтроки - 1, "ЧЦ=4; ЧВН=; ЧГ=0; ЧН=0") + "_", "Стр" + Формат(МаксНомерСтроки, "ЧЦ=4; ЧВН=; ЧГ=0; ЧН=0")+"_");
			КонецЦикла;
            СчПечати = СчПечати + 1;
			Если СчПечати > 15 Тогда 
				Прервать;
			КонецЕсли;			
			ТекТабличныйДокумент.Вывести(ОбластьСтрокаДебитор);
		КонецЦикла;
		
		ОбластьПодвалЛистаДебЗадолженность.КодЯзыкаМакета = Неопределено;
		
		ОбластьПодвалЛистаДебЗадолженность.Области.ИТОГОВсегоДебитор.Значение = ИТОГОВсегоДебитор;
		ОбластьПодвалЛистаДебЗадолженность.Области.ИТОГОСомнДебитор.Значение  = ИТОГОСомнДебитор;
		ТекТабличныйДокумент.Вывести(ОбластьПодвалЛистаДебЗадолженность);		
		
		ТекТабличныйДокумент.Область(Верх,, ТекТабличныйДокумент.ВысотаТаблицы).Имя = "Страница" + НомерСтраницы;
		НомерСтраницы = НомерСтраницы + 1;
		Верх = ТекТабличныйДокумент.ВысотаТаблицы + 1;
		// Выведем разрыв страницы
		ТекТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();								
			
	КонецЕсли;            	
	
	ТекТабличныйДокумент.Вывести(ОбластьШапкаЛистаКредЗадолженность);
	
	МассивПроверяемыхОбластейКонцаСтраницы = Новый Массив;
	МассивПроверяемыхОбластейКонцаСтраницы.Добавить(ОбластьПодвалЛистаКредЗадолженность);
	МассивПроверяемыхОбластейКонцаСтраницы.Добавить(ОбластьПодвал);	
	МассивПроверяемыхОбластейКонцаСтраницы.Добавить(ОбластьСтрокаКредитор);	
	
	// выводим строки отчета для кредиторской задолженности
	МаксНомерСтроки = КоличествоСтрокКредиторскойЗадолженности;
	Если КоличествоСтрокКредиторскойЗадолженности = 0 Тогда
		
		Для НомерСтроки = 1 По 50 Цикл
			// Номера областей устанавливаем в соответствии с текущим номером строки
			Для Н = 0 По СписокОбластейСтрокиКред.Количество() - 1 Цикл
				ИспользуемаяОбласть     = СписокОбластейСтрокиКред[Н].Значение;
				ИспользуемаяОбласть.Имя = СтрЗаменить(ИспользуемаяОбласть.Имя, "Стр" + Формат(НомерСтроки - 1, "ЧЦ=4; ЧВН=; ЧГ=0; ЧН=0") + "_", "Стр" + Формат(НомерСтроки, "ЧЦ=4; ЧВН=; ЧГ=0; ЧН=0")+"_");
			КонецЦикла;

			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТекТабличныйДокумент, МассивПроверяемыхОбластейКонцаСтраницы) Тогда
				ТекТабличныйДокумент.Вывести(ОбластьПодвалЛистаКредЗадолженность);		
				ТекТабличныйДокумент.Область(Верх,, ТекТабличныйДокумент.ВысотаТаблицы).Имя = "Страница" + НомерСтраницы;
				НомерСтраницы = НомерСтраницы + 1;
				Верх 		  = ТекТабличныйДокумент.ВысотаТаблицы + 1;
				Прервать;
			КонецЕсли;                                                         
			
			ТекТабличныйДокумент.Вывести(ОбластьСтрокаКредитор);		
		
		КонецЦикла;
	Иначе
		ИТОГОВсегоКредитор = 0;		
		Для НомерСтроки = 1 По МаксНомерСтроки Цикл
			
			Для Н = 0 По СписокОбластейСтрокиКред.Количество() - 1 Цикл
				ИспользуемаяОбласть     = СписокОбластейСтрокиКред[Н].Значение;
				ИспользуемаяОбласть.Имя = СтрЗаменить(ИспользуемаяОбласть.Имя, "Стр" + Формат(НомерСтроки - 1, "ЧЦ=4; ЧВН=; ЧГ=0; ЧН=0") + "_", "Стр" + Формат(НомерСтроки, "ЧЦ=4; ЧВН=; ЧГ=0; ЧН=0")+"_");
			КонецЦикла;
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТекТабличныйДокумент, МассивПроверяемыхОбластей) Тогда
				ТекТабличныйДокумент.Область(Верх,, ТекТабличныйДокумент.ВысотаТаблицы).Имя = "Страница" + НомерСтраницы;
				НомерСтраницы = НомерСтраницы + 1;
				Верх		  = ТекТабличныйДокумент.ВысотаТаблицы + 1;
				// Выведем разрыв страницы
				ТекТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();								
				ТекТабличныйДокумент.Вывести(ОбластьШапкаЛистаКредЗадолженностьОсн);
			КонецЕсли;
			
			СтрокаДанных = ТаблицаКредЗадолженности[НомерСтроки-1];
			
			Если ЗначениеЗаполнено(СтрокаДанных.ДебиторКредитор) Тогда 
				//ОбластьСтрокаКредитор.Параметры.Кредитор 		= СтрокаДанных.ДебиторКредитор;
				Если ТипЗнч(СтрокаДанных.ДебиторКредитор) = Тип("СправочникСсылка.Контрагенты") Тогда
					ОбластьСтрокаКредитор.Параметры.Кредитор 		  = СтрокаДанных.ДебиторКредитор.НаименованиеПолное;
				Иначе
					ОбластьСтрокаКредитор.Параметры.Кредитор 		  = СтрокаДанных.ДебиторКредитор;
				КонецЕсли;
				ОбластьСтрокаКредитор.Параметры.ИИНБИНКредитора = СтрокаДанных.ДебиторКредитор.ИдентификационныйКодЛичности;
			КонецЕсли;
			
			ОбластьСтрокаКредитор.Параметры.СчетКредитора 		  = СтрокаДанных.Счет.Код;
			ОбластьСтрокаКредитор.Параметры.ВсегоКредитор 		  = СтрокаДанных.СуммаКонечныйРазвернутыйОстаток;
			ОбластьСтрокаКредитор.Параметры.ДатаОбрЗадолКредитора = СтрокаДанных.ДатаОбразованияЗадолженности;
						
			ИТОГОВсегоКредитор = ИТОГОВсегоКредитор + СтрокаДанных.СуммаКонечныйРазвернутыйОстаток;
			
			ТекТабличныйДокумент.Вывести(ОбластьСтрокаКредитор);
		
		КонецЦикла;
		
		Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТекТабличныйДокумент, МассивПроверяемыхОбластей) Тогда
			ТекТабличныйДокумент.Область(Верх,, ТекТабличныйДокумент.ВысотаТаблицы).Имя = "Страница" + НомерСтраницы;
			НомерСтраницы = НомерСтраницы + 1;
			Верх 		  = ТекТабличныйДокумент.ВысотаТаблицы + 1;
			// Выведем разрыв страницы
			ТекТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();								
		
		Иначе
		
			// выводим пустые строки до конца страницы
			// очистим параметры
			ОбластьСтрокаКредитор.Параметры.Кредитор 			  = "";
			ОбластьСтрокаКредитор.Параметры.ИИНБИНКредитора 	  = "";
			ОбластьСтрокаКредитор.Параметры.СчетКредитора 		  = "";
			ОбластьСтрокаКредитор.Параметры.ВсегоКредитор 		  = 0;
			ОбластьСтрокаКредитор.Параметры.ДатаОбрЗадолКредитора = Дата('00010101000000');
			
			СчПечати = 0;
			
			Пока ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТекТабличныйДокумент, МассивПроверяемыхОбластейКонцаСтраницы) Цикл 
				МаксНомерСтроки = МаксНомерСтроки + 1;
				Для Н = 0 По СписокОбластейСтрокиКред.Количество() - 1 Цикл
					ИспользуемаяОбласть     = СписокОбластейСтрокиКред[Н].Значение;
					ИспользуемаяОбласть.Имя = СтрЗаменить(ИспользуемаяОбласть.Имя, "Стр" + Формат(МаксНомерСтроки - 1, "ЧЦ=4; ЧВН=; ЧГ=0; ЧН=0") + "_", "Стр" + Формат(МаксНомерСтроки, "ЧЦ=4; ЧВН=; ЧГ=0; ЧН=0")+"_");
				КонецЦикла;
				СчПечати = СчПечати + 1;
				Если СчПечати > 15 Тогда 
					Прервать;
				КонецЕсли;				
				ТекТабличныйДокумент.Вывести(ОбластьСтрокаКредитор);
			КонецЦикла;
		КонецЕсли;
				
		ОбластьПодвалЛистаКредЗадолженность.КодЯзыкаМакета = Неопределено;
		ОбластьПодвалЛистаКредЗадолженность.Области.ИТОГОВсегоКредитор.Значение = ИТОГОВсегоКредитор;		
		ТекТабличныйДокумент.Вывести(ОбластьПодвалЛистаКредЗадолженность);
		
	КонецЕсли;
	
	// Выводим подвал
	ТекТабличныйДокумент.Вывести(ОбластьПодвал);
	
	// следующая страница
	ТекТабличныйДокумент.Область(Верх,, ТекТабличныйДокумент.ВысотаТаблицы).Имя = "Страница" + НомерСтраницы;
	ВсегоСтраниц = НомерСтраницы;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиВДокументПриВосстановлении(СписокСохранения)
	
	// очищаем текущие данные
	ТекТабличныйДокумент = ЭтотОбъект["ФормаОтчетаПолеТабличногоДокументаСтраница1"];
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, Ложь, Ложь);
	
	Отчет = РеквизитФормыВЗначение("ОтчетОбъект");
	Макет = Отчет.ПолучитьМакет("МакетФормаОтчета2013Кв1");
	Верх  = 1;
	
	Если ЗначениеЗаполнено(ЯзыкФормирования) Тогда
		Макет.КодЯзыкаМакета = ЯзыкФормирования;		
	КонецЕсли;
	
	ОбластьШапка      					  = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаЛистаДебЗадолженность     = Макет.ПолучитьОбласть("ШапкаЛистаДебЗадолженность");
	ОбластьСтрокаДебитор     			  = Макет.ПолучитьОбласть("СтрокаДебитор");
	ОбластьПодвалЛистаДебЗадолженность    = Макет.ПолучитьОбласть("ПодвалЛистаДебЗадолженность");
	ОбластьШапкаЛистаКредЗадолженность    = Макет.ПолучитьОбласть("ШапкаЛистаКредЗадолженность");
	ОбластьШапкаЛистаКредЗадолженностьОсн = Макет.ПолучитьОбласть("ШапкаЛистаКредЗадолженностьОсн");	
	ОбластьСтрокаКредитор     			  = Макет.ПолучитьОбласть("СтрокаКредитор");
	ОбластьПодвалЛистаКредЗадолженность   = Макет.ПолучитьОбласть("ПодвалЛистаКредЗадолженность");
	ОбластьПодвал     					  = Макет.ПолучитьОбласть("Подвал");
	
	МассивПроверяемыхОбластей = Новый Массив();
	МассивПроверяемыхОбластей.Добавить(ОбластьСтрокаДебитор);
	МассивПроверяемыхОбластей.Добавить(ОбластьСтрокаДебитор);

	// Шапка отчета
	ТекТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Если Макет.КодЯзыкаМакета = "kz" Тогда
		ОбластьШапка.Параметры.ДатаОтчета = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "Л=kk_KZ; ДФ=""гггг 'жылғы' дд ММММ""");
	Иначе
		ОбластьШапка.Параметры.ДатаОтчета = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,"ДЛФ=ДД");
	КонецЕсли;
	
	ТекТабличныйДокумент.Вывести(ОбластьШапка);
	
	СписокОбластейСтрокиДеб = Новый СписокЗначений;
	Для Каждого ИспользуемаяОбласть Из ОбластьСтрокаДебитор.Области Цикл      
		СписокОбластейСтрокиДеб.Добавить(ИспользуемаяОбласть);
	КонецЦикла;
	
	СписокОбластейСтрокиКред = Новый СписокЗначений;
	Для Каждого ИспользуемаяОбласть Из ОбластьСтрокаКредитор.Области Цикл      
		СписокОбластейСтрокиКред.Добавить(ИспользуемаяОбласть);
	КонецЦикла;
	
	// Получим число строк 
	КоличествоСтрокДебиторскойЗадолженности  = 0;
	КоличествоСтрокКредиторскойЗадолженности = 0;
	КолВоДебОпределено 						 = Ложь;
	КолВоКредОпределено 					 = Ложь;
	КоличествоЗаписейВСтруктуре 			 = СписокСохранения.Количество();
	
	Для Н = 1 По КоличествоЗаписейВСтруктуре Цикл
		СтрокаДебитор = "Стр" + Формат(Н, "ЧЦ=4; ЧВН=; ЧГ=0; ЧН=0") + "_Дебитор";
		Если СписокСохранения.Свойство(СтрокаДебитор) Тогда
			КоличествоСтрокДебиторскойЗадолженности = КоличествоСтрокДебиторскойЗадолженности + 1;
		Иначе
			КолВоДебОпределено = Истина;
		КонецЕсли;
		СтрокаКредитор = "Стр" + Формат(Н, "ЧЦ=4; ЧВН=; ЧГ=0; ЧН=0") + "_Кредитор";
		Если СписокСохранения.Свойство(СтрокаКредитор) Тогда
			КоличествоСтрокКредиторскойЗадолженности = КоличествоСтрокКредиторскойЗадолженности + 1;
		Иначе
			КолВоКредОпределено = Истина;
		КонецЕсли;
		Если КолВоДебОпределено И КолВоКредОпределено Тогда
			Прервать;
		КонецЕсли;		
	КонецЦикла;
	
	НомерСтраницы = 1;
	// выводим строки отчета для дебиторской задолженности
	МаксНомерСтроки = КоличествоСтрокДебиторскойЗадолженности;
	Для НомерСтроки = 1 По МаксНомерСтроки Цикл
			
		Для Н = 0 По СписокОбластейСтрокиДеб.Количество() - 1 Цикл
			ИспользуемаяОбласть     = СписокОбластейСтрокиДеб[Н].Значение;
			ИспользуемаяОбласть.Имя = СтрЗаменить(ИспользуемаяОбласть.Имя, "Стр" + Формат(НомерСтроки - 1, "ЧЦ=4; ЧВН=; ЧГ=0; ЧН=0") + "_", "Стр" + Формат(НомерСтроки, "ЧЦ=4; ЧВН=; ЧГ=0; ЧН=0")+"_");
		КонецЦикла;
			
		Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТекТабличныйДокумент, МассивПроверяемыхОбластей) Тогда
			ТекТабличныйДокумент.Область(Верх,, ТекТабличныйДокумент.ВысотаТаблицы).Имя = "Страница" + НомерСтраницы;
			НомерСтраницы = НомерСтраницы + 1;
			Верх 		  = ТекТабличныйДокумент.ВысотаТаблицы + 1;
			// Выведем разрыв страницы
			ТекТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();								
			ТекТабличныйДокумент.Вывести(ОбластьШапкаЛистаДебЗадолженность);
		КонецЕсли;
			
		ТекТабличныйДокумент.Вывести(ОбластьСтрокаДебитор);
		
	КонецЦикла;
		
	ТекТабличныйДокумент.Вывести(ОбластьПодвалЛистаДебЗадолженность);		
		
	ТекТабличныйДокумент.Область(Верх,, ТекТабличныйДокумент.ВысотаТаблицы).Имя = "Страница" + НомерСтраницы;
	НомерСтраницы = НомерСтраницы + 1;
	Верх 		  = ТекТабличныйДокумент.ВысотаТаблицы + 1;
	// Выведем разрыв страницы
	ТекТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();								
			
	ТекТабличныйДокумент.Вывести(ОбластьШапкаЛистаКредЗадолженность);
	
	МассивПроверяемыхОбластейКонцаСтраницы = Новый Массив;
	МассивПроверяемыхОбластейКонцаСтраницы.Добавить(ОбластьПодвалЛистаКредЗадолженность);
	МассивПроверяемыхОбластейКонцаСтраницы.Добавить(ОбластьПодвал);	
	МассивПроверяемыхОбластейКонцаСтраницы.Добавить(ОбластьСтрокаКредитор);	
	
	// выводим строки отчета для кредиторской задолженности
	МаксНомерСтроки = КоличествоСтрокКредиторскойЗадолженности;
	Для НомерСтроки = 1 По МаксНомерСтроки Цикл
			
		Для Н = 0 По СписокОбластейСтрокиКред.Количество() - 1 Цикл
			ИспользуемаяОбласть     = СписокОбластейСтрокиКред[Н].Значение;
			ИспользуемаяОбласть.Имя = СтрЗаменить(ИспользуемаяОбласть.Имя, "Стр" + Формат(НомерСтроки - 1, "ЧЦ=4; ЧВН=; ЧГ=0; ЧН=0") + "_", "Стр" + Формат(НомерСтроки, "ЧЦ=4; ЧВН=; ЧГ=0; ЧН=0")+"_");
		КонецЦикла;
			
		Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТекТабличныйДокумент, МассивПроверяемыхОбластей) Тогда
			ТекТабличныйДокумент.Область(Верх,, ТекТабличныйДокумент.ВысотаТаблицы).Имя = "Страница" + НомерСтраницы;
			НомерСтраницы = НомерСтраницы + 1;
			Верх = ТекТабличныйДокумент.ВысотаТаблицы + 1;
			// Выведем разрыв страницы
			ТекТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();								
			ТекТабличныйДокумент.Вывести(ОбластьШапкаЛистаКредЗадолженностьОсн);
		КонецЕсли;
			
		ТекТабличныйДокумент.Вывести(ОбластьСтрокаКредитор);
		
	КонецЦикла;
		
	Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТекТабличныйДокумент, МассивПроверяемыхОбластей) Тогда
		ТекТабличныйДокумент.Область(Верх,, ТекТабличныйДокумент.ВысотаТаблицы).Имя = "Страница" + НомерСтраницы;
		НомерСтраницы = НомерСтраницы + 1;
		Верх 		  = ТекТабличныйДокумент.ВысотаТаблицы + 1;
		// Выведем разрыв страницы
		ТекТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();								
		
	КонецЕсли;
				
	ТекТабличныйДокумент.Вывести(ОбластьПодвалЛистаКредЗадолженность);		
					
	// Выводим подвал
	ТекТабличныйДокумент.Вывести(ОбластьПодвал);
	
	// следующая страница
	ТекТабличныйДокумент.Область(Верх,, ТекТабличныйДокумент.ВысотаТаблицы).Имя = "Страница" + НомерСтраницы;
	ВсегоСтраниц = НомерСтраницы;
	
	// Переписываем показатели из структуры сохранения в области табличного документа
	Для Каждого Элемент Из СписокСохранения Цикл
		УстановитьЗначениеОбласти(ТекТабличныйДокумент, Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	 
КонецПроцедуры

&НаСервере
// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) 

	// Собираем в список значений имена вычисляемых показателей

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

