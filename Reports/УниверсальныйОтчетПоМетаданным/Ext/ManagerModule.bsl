#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки,
							|ИспользоватьРасширенныеПараметрыРасшифровки,
							|ИспользоватьПривилегированныйРежим",
							Истина, Ложь, Истина, Истина, Истина, Ложь);
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	ЗаголовокОтчета = ПараметрыОтчета.Заголовок;
	Если ПараметрыОтчета.Свойство("РежимРасшифровки") И ПараметрыОтчета.РежимРасшифровки И НЕ ПустаяСтрока(ЗаголовокОтчета) Тогда
		ЗаголовокДата = НСтр("ru = ' %1'");
		ЗаголовокДата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ЗаголовокДата, БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода));
		ЗаголовокОтчета = ЗаголовокОтчета + ЗаголовокДата;
	КонецЕсли;
	Возврат ЗаголовокОтчета;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Структура.ИдентификаторПользовательскойНастройки = "";
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	УсловноеОформлениеАвтоотступа = Неопределено;
	Для каждого ЭлементОформления Из КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Представление = "Уменьшенный автоотступ" Тогда
			УсловноеОформлениеАвтоотступа = ЭлементОформления;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УсловноеОформлениеАвтоотступа = Неопределено Тогда
		УсловноеОформлениеАвтоотступа = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
		УсловноеОформлениеАвтоотступа.Представление = "Уменьшенный автоотступ";
		УсловноеОформлениеАвтоотступа.Оформление.УстановитьЗначениеПараметра("Автоотступ", 1);
		УсловноеОформлениеАвтоотступа.Использование = Ложь;
		УсловноеОформлениеАвтоотступа.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	Иначе
		УсловноеОформлениеАвтоотступа.Поля.Элементы.Очистить();
	КонецЕсли;
	
	КоличествоКолонок = 0;
	Если ПараметрыОтчета.ГруппировкаКолонок.Количество() > 0 Тогда
		Таблица = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
		НоваяКолонкаОтчета = Таблица.Колонки.Добавить();
		Первый = Истина;
		Для Каждого ПолеВыбраннойКолонки Из ПараметрыОтчета.ГруппировкаКолонок Цикл
			Если ПолеВыбраннойКолонки.Использование Тогда
				
				Если Не Первый Тогда
					НоваяКолонкаОтчета = НоваяКолонкаОтчета.Структура.Добавить();
				КонецЕсли;
				Первый = Ложь;

				НоваяКолонкаОтчета.Использование = Истина;
				ГруппировкаКолонки = НоваяКолонкаОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ГруппировкаКолонки.Поле = Новый ПолеКомпоновкиДанных(ПолеВыбраннойКолонки.Поле);
				
				Если ПолеВыбраннойКолонки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
					ГруппировкаКолонки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
				ИначеЕсли ПолеВыбраннойКолонки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
					ГруппировкаКолонки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
				Иначе
					ГруппировкаКолонки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
				КонецЕсли;
				
				НоваяКолонкаОтчета.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
				НоваяКолонкаОтчета.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
				КоличествоКолонок = КоличествоКолонок + 1;
				
			КонецЕсли;
		КонецЦикла;
		Если КоличествоКолонок = 0 Тогда
			КомпоновщикНастроек.Настройки.Структура.Очистить();
			Структура = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		Иначе
			Структура = Таблица.Строки.Добавить();
		КонецЕсли;
	Иначе
		Структура = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	КонецЕсли;

	КоличествоГруппировок = 0;
	Первый = Истина;
	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			
			Если Не Первый Тогда
				Если ТипЗнч(Структура) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
					Структура = Структура.Структура.Добавить();
				Иначе
					Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
				КонецЕсли;
			КонецЕсли;
			Первый = Ложь;
			
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			
			Если ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
			ПолеОформления.Поле = ПолеГруппировки.Поле;
			
			КоличествоГруппировок = КоличествоГруппировок + 1;
			
		КонецЕсли;
	КонецЦикла;
	
	ЕстьВыбранныеПоля = Ложь;
	ПроверитьВыбранныеПоля(КомпоновщикНастроек.Настройки.Выбор.Элементы,ЕстьВыбранныеПоля,Схема);
	Если ЕстьВыбранныеПоля Тогда
		Если ТипЗнч(Структура) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Структура = Структура.Структура.Добавить();
		Иначе
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		КонецЕсли;

		ПолеГруппировкиДетально = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировкиДетально.Использование  = Истина;
		ПолеГруппировкиДетально.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	КонецЕсли;		
	ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки.Выбор.Элементы, Структура.Выбор);
	
	Если ПараметрыОтчета.ТипДанных = "РегистрыНакопления" ИЛИ ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" Тогда
		Если КоличествоКолонок > 0 Тогда
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(КомпоновщикНастроек, "ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Конец);
		Иначе
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(КомпоновщикНастроек, "ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
		КонецЕсли;
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(КомпоновщикНастроек, "ВертикальноеРасположениеОбщихИтогов"  , РасположениеИтоговКомпоновкиДанных.Конец);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(МакетКомпоновки) Экспорт
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);

КонецПроцедуры

Процедура ЗаполнитьСтруктуруПоУмолчанию(ПараметрыОтчета, КомпоновщикНастроек) Экспорт
	

	ЭлементСтруктуры = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки = ЭлементСтруктуры.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	Если ПараметрыОтчета.ТипДанных = "Справочники" Тогда
		Если ПараметрыОтчета.ИмяТаблицы = "" Тогда
			ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, "Наименование", "Наименование");
		Иначе
			ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, "Ссылка.Наименование", "Наименование");
		КонецЕсли;
	ИначеЕсли ПараметрыОтчета.ТипДанных = "Документы" Тогда
		ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, "Ссылка", "Ссылка");
	ИначеЕсли ЭлементСтруктуры.ПоляГруппировки.ДоступныеПоляПолейГруппировок.Элементы.Количество() > 0 
		И Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].Измерения.Количество() > 0 Тогда
		Если ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" Тогда
			Если ПараметрыОтчета.ИмяТаблицы = "" Тогда
				ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, "Регистратор", "Регистратор");
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ДвиженияССубконто" Тогда
				ЭлементСтруктуры.ПоляГруппировки.Элементы.Удалить(ПолеГруппировки);
				// Группировки по забалансовым
				Для каждого Измерение Из Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].Измерения Цикл
					Если Измерение.Балансовый Тогда
						ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, Измерение.Имя, Измерение.Синоним);
					КонецЕсли
				КонецЦикла;
				// ИзмеренияДт
				Для каждого Измерение Из Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].Измерения Цикл
					Если НЕ Измерение.Балансовый Тогда
						ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, Измерение.Имя + "Дт", Измерение.Синоним + " Дт");
					КонецЕсли
				КонецЦикла;
				Для К = 1 По 3 Цикл
					ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, "СубконтоДт" + К, "СубконтоДт" + К);
				КонецЦикла;
				// ИзмеренияКт
				Для каждого Измерение Из Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].Измерения Цикл
					Если НЕ Измерение.Балансовый Тогда
						ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, Измерение.Имя + "Кт", Измерение.Синоним + " Кт");
					КонецЕсли
				КонецЦикла;
				Для К = 1 По 3 Цикл
					ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, "СубконтоКт" + К, "СубконтоКт" + К);
				КонецЦикла;
			Иначе
				Если ЭлементСтруктуры.ПоляГруппировки.ДоступныеПоляПолейГруппировок.Элементы.Найти("Счет")<> Неопределено Тогда
					ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, "Счет", "Счет", Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия);
				Иначе
					ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, "СчетДт", "СчетДт", Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия);
					ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, "СчетКт", "СчетКт", Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, 
				Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].Измерения[0].Имя,
				Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].Измерения[0].Синоним);
		КонецЕсли
	КонецЕсли;
	ЭлементПорядка = ЭлементСтруктуры.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
КонецПроцедуры

Процедура ДобавитьПоказатели(ПараметрыОтчета, КомпоновщикНастроек) Экспорт
	
	Если ПараметрыОтчета.ИмяТаблицы = "ОстаткиИОбороты" Тогда
		ВыбранныеПоляНачальныйОстаток = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ВыбранныеПоляНачальныйОстаток.Заголовок = "Нач. остаток";
		ВыбранныеПоляНачальныйОстаток.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
		Если ПараметрыОтчета.ТипДанных = "РегистрыНакопления" Тогда
			ВыбранныеПоляПриход = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ВыбранныеПоляПриход.Заголовок = "Приход";
			ВыбранныеПоляПриход.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
			ВыбранныеПоляРасход = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ВыбранныеПоляРасход.Заголовок = "Расход";
			ВыбранныеПоляРасход.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
		ИначеЕсли ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" Тогда
			ВыбранныеПоляОбороты = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ВыбранныеПоляОбороты.Заголовок = "Обороты";
			ВыбранныеПоляОбороты.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
		КонецЕсли;
		ВыбранныеПоляКонечныйОстаток = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ВыбранныеПоляКонечныйОстаток.Заголовок = "Кон. остаток";
		ВыбранныеПоляКонечныйОстаток.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
	КонецЕсли;
	
	Если ПараметрыОтчета.ТипДанных = "РегистрыНакопления" Тогда
		Для каждого Ресурс Из Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].Ресурсы Цикл
			ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
			Если ПараметрыОтчета.ИмяТаблицы = "Обороты" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Оборот");
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ОстаткиИОбороты" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляНачальныйОстаток, Ресурс.Имя + "НачальныйОстаток", Ресурс.Синоним);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляПриход, Ресурс.Имя + "Приход", Ресурс.Синоним);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляРасход, Ресурс.Имя + "Расход", Ресурс.Синоним);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляКонечныйОстаток, Ресурс.Имя + "КонечныйОстаток", Ресурс.Синоним);
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ПараметрыОтчета.ТипДанных = "РегистрыСведений" Тогда
		Для каждого Ресурс Из Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].Ресурсы Цикл
			ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя);
		КонецЦикла;
	ИначеЕсли ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" Тогда
		Для каждого Ресурс Из Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].Ресурсы Цикл
			ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
			Если ПараметрыОтчета.ИмяТаблицы = "Обороты" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "ОборотДт", Ресурс.Синоним + " оборот Дт");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "ОборотКт", Ресурс.Синоним + " оборот Кт");
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ОборотыДтКт" Тогда
				Если Ресурс.Балансовый Тогда
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Оборот", Ресурс.Синоним + " оборот");
				Иначе
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "ОборотДт", Ресурс.Синоним + " оборот Дт");
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "ОборотКт", Ресурс.Синоним + " оборот Кт");
				КонецЕсли;
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "Остатки" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "ОстатокДт", Ресурс.Синоним + " ост. Дт");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "ОстатокКт", Ресурс.Синоним + " ост. Кт");
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ОстаткиИОбороты" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляНачальныйОстаток, Ресурс.Имя + "НачальныйОстатокДт", Ресурс.Синоним + " нач. ост. Дт");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляНачальныйОстаток, Ресурс.Имя + "НачальныйОстатокКт", Ресурс.Синоним + " нач. ост. Кт");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляОбороты, Ресурс.Имя + "ОборотДт", Ресурс.Синоним + " оборот Дт");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляОбороты, Ресурс.Имя + "ОборотКт", Ресурс.Синоним + " оборот Кт");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляКонечныйОстаток, Ресурс.Имя + "КонечныйОстатокДт", Ресурс.Синоним + " кон. ост. Дт");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляКонечныйОстаток, Ресурс.Имя + "КонечныйОстатокКт", Ресурс.Синоним + " кон. ост. Кт");
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ДвиженияССубконто" Тогда
				Если Ресурс.Балансовый Тогда
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя, Ресурс.Синоним);
				Иначе
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Дт", Ресурс.Синоним + " Дт");
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Кт", Ресурс.Синоним + " Кт");
				КонецЕсли;
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "" Тогда
				Если Ресурс.Балансовый Тогда
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя, Ресурс.Синоним);
				Иначе
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Дт", Ресурс.Синоним + " Дт");
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Кт", Ресурс.Синоним + " Кт");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ПараметрыОтчета.ТипДанных = "Документы" 
		ИЛИ ПараметрыОтчета.ТипДанных = "Справочники" Тогда
		Если ПараметрыОтчета.ИмяТаблицы = "" Тогда
			ОбъектМетаданных = Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта];
		Иначе
			ОбъектМетаданных = Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].ТабличныеЧасти[ПараметрыОтчета.ИмяТаблицы];
		КонецЕсли;
		Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Реквизит.Имя);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПоляНабораДанных(ПараметрыОтчета, СхемаКомпоновкиДанных) Экспорт
		
	Если ПараметрыОтчета.ТипДанных = "РегистрыНакопления" 
		ИЛИ ПараметрыОтчета.ТипДанных = "РегистрыСведений" 
		ИЛИ ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" Тогда
		
		// Добавляем измерения
		Для каждого Измерение Из Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].Измерения Цикл
			ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Измерение.Имя, Измерение.Синоним);
		КонецЦикла;
		
		// Добавляем реквизиты
		Если ПустаяСтрока(ПараметрыОтчета.ИмяТаблицы) Тогда
			Для каждого Реквизит Из Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].Реквизиты Цикл
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Реквизит.Имя, Реквизит.Синоним);
			КонецЦикла;
		КонецЕсли;
		
		// Добавляем поля периода
		Если ПараметрыОтчета.ИмяТаблицы = "ОстаткиИОбороты" 
			ИЛИ ПараметрыОтчета.ИмяТаблицы = "Обороты" 
			ИЛИ ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" И ПараметрыОтчета.ИмяТаблицы = ""	Тогда
			ДобавитьПоляПериодаВНаборДанных(СхемаКомпоновкиДанных.НаборыДанных[0]);
		КонецЕсли;
		
		// Добавляем ресурсы
		Для каждого Ресурс Из Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].Ресурсы Цикл
			Если ПараметрыОтчета.ИмяТаблицы = "Обороты" Тогда
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Оборот", Ресурс.Синоним);
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Оборот");
				
				Если ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" ТОгда
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОборотДт", Ресурс.Синоним + " оборот Дт", Ресурс.Имя + "ОборотДт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОборотДт");
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОборотКт", Ресурс.Синоним + " оборот Кт", Ресурс.Имя + "ОборотКт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОборотКт");
					
					Если НЕ Ресурс.Балансовый Тогда
						ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КорОборот", Ресурс.Синоним + " кор. оборот", Ресурс.Имя + "КорОборот");
						ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КорОборот");
						ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КорОборотДт", Ресурс.Синоним + " кор. оборот Дт", Ресурс.Имя + "КорОборотДт");
						ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КорОборотДт");
						ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КорОборотКт", Ресурс.Синоним + " кор. оборот Кт", Ресурс.Имя + "КорОборотКт");
						ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КорОборотКт");
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ОборотыДтКт" Тогда
				
				Если Ресурс.Балансовый Тогда
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Оборот", Ресурс.Синоним);
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Оборот");
				Иначе
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОборотДт", Ресурс.Синоним + " оборот Дт", Ресурс.Имя + "ОборотДт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОборотДт");
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОборотКт", Ресурс.Синоним + " оборот Кт", Ресурс.Имя + "ОборотКт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОборотКт");
				КонецЕсли;
				
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ДвиженияССубконто" Тогда
				
				Если Ресурс.Балансовый Тогда
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя, Ресурс.Синоним);
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя);
				Иначе
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Дт", Ресурс.Синоним + " Дт", Ресурс.Имя + "Дт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Дт");
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Кт", Ресурс.Синоним + " Кт", Ресурс.Имя + "Кт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Кт");
				КонецЕсли;
				
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ОстаткиИОбороты" Тогда
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "НачальныйОстаток", Ресурс.Синоним + " нач. остаток", Ресурс.Имя + "НачальныйОстаток");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "НачальныйОстаток");
				
				Если ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" Тогда
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "НачальныйОстатокДт", Ресурс.Синоним + " нач. остаток Дт", Ресурс.Имя + "НачальныйОстатокДт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "НачальныйОстатокДт");
					
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "НачальныйОстатокКт", Ресурс.Синоним + " нач. остаток Кт", Ресурс.Имя + "НачальныйОстатокКт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "НачальныйОстатокКт");
					
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "НачальныйРазвернутыйОстатокДт", Ресурс.Синоним + " нач. развернутый остаток Дт", Ресурс.Имя + "НачальныйРазвернутыйОстатокДт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "НачальныйРазвернутыйОстатокДт");
					
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "НачальныйРазвернутыйОстатокКт", Ресурс.Синоним + " нач. развернутый остаток Кт", Ресурс.Имя + "НачальныйРазвернутыйОстатокКт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "НачальныйРазвернутыйОстатокКт");
				КонецЕсли;
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Оборот", Ресурс.Синоним + " оборот", Ресурс.Имя + "Оборот");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Оборот");
				
				Если ПараметрыОтчета.ТипДанных = "РегистрыНакопления" Тогда
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Приход", Ресурс.Синоним + " приход", Ресурс.Имя + "Приход");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Приход");
					
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Расход", Ресурс.Синоним + " расход", Ресурс.Имя + "Расход");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Расход");
				ИначеЕсли ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" Тогда
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОборотДт", Ресурс.Синоним + " оборот Дт", Ресурс.Имя + "ОборотДт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОборотДт");
					
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОборотКт", Ресурс.Синоним + " оборот Кт", Ресурс.Имя + "ОборотКт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОборотКт");
				КонецЕсли;
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КонечныйОстаток", Ресурс.Синоним + " кон. остаток", Ресурс.Имя + "КонечныйОстаток");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КонечныйОстаток");
				
				Если ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" Тогда
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КонечныйОстатокДт", Ресурс.Синоним + " кон. остаток Дт", Ресурс.Имя + "КонечныйОстатокДт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КонечныйОстатокДт");
					
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КонечныйОстатокКт", Ресурс.Синоним + " кон. остаток Кт", Ресурс.Имя + "КонечныйОстатокКт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КонечныйОстатокКт");
					
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КонечныйРазвернутыйОстатокДт", Ресурс.Синоним + " кон. развернутый остаток Дт", Ресурс.Имя + "КонечныйРазвернутыйОстатокДт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КонечныйРазвернутыйОстатокДт");
					
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КонечныйРазвернутыйОстатокКт", Ресурс.Синоним + " кон. развернутый остаток Кт", Ресурс.Имя + "КонечныйРазвернутыйОстатокКт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КонечныйРазвернутыйОстатокКт");
				КонецЕсли;
				
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "Остатки" Тогда
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Остаток", Ресурс.Синоним + " остаток", Ресурс.Имя + "Остаток");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Остаток");
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОстатокДт", Ресурс.Синоним + " остаток Дт", Ресурс.Имя + "ОстатокДт");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОстатокДт");
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОстатокКт", Ресурс.Синоним + " остаток Кт", Ресурс.Имя + "ОстатокКт");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОстатокКт");
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "РазвернутыйОстатокДт", Ресурс.Синоним + " развернутый остаток Дт", Ресурс.Имя + "РазвернутыйОстатокДт");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "РазвернутыйОстатокДт");
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "РазвернутыйОстатокКт", Ресурс.Синоним + " развернутый остаток Кт", Ресурс.Имя + "РазвернутыйОстатокКт");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "РазвернутыйОстатокКт");
				
			ИначеЕсли ПараметрыОтчета.ТипДанных = "РегистрыСведений" Тогда
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя, Ресурс.Синоним);
				Если Ресурс.Тип.СодержитТип(Тип("Число")) Тогда
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя, Ресурс.Имя);
				КонецЕсли;
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "" Тогда
				
				Если ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" Тогда
					Если Ресурс.Балансовый Тогда
						ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя, Ресурс.Синоним);
						ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя);
					Иначе
						ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Дт", Ресурс.Синоним + " Дт", Ресурс.Имя + "Дт");
						ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Дт");
						ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Кт", Ресурс.Синоним + " Кт", Ресурс.Имя + "Кт");
						ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Кт");
					КонецЕсли;
				Иначе
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя, Ресурс.Синоним);
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ПараметрыОтчета.ТипДанных = "Документы" 
		ИЛИ ПараметрыОтчета.ТипДанных = "Справочники" Тогда
		
		Если ПараметрыОтчета.ИмяТаблицы = "" Тогда
			ОбъектМетаданных = Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта];
		Иначе
			ОбъектМетаданных = Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].ТабличныеЧасти.Найти(ПараметрыОтчета.ИмяТаблицы);
			Если ОбъектМетаданных = Неопределено Тогда 
				ОбъектМетаданных = Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта];
			КонецЕсли;
		КонецЕсли;
		
		// Добавляем реквизиты
		Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Реквизит.Имя, Реквизит.Синоним);
			Если Реквизит.Тип.СодержитТип(Тип("Число")) Тогда
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Реквизит.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьЗапросПоМетаданным(ПараметрыОтчета) Экспорт
	
	ТекстЗапроса = " ВЫБРАТЬ РАЗРЕШЕННЫЕ " + Символы.ПС;
	
	Если ПараметрыОтчета.ТипДанных = "РегистрыСведений" Тогда
		ИмяТипаДанных = "РегистрСведений";
	ИначеЕсли ПараметрыОтчета.ТипДанных = "РегистрыНакопления" Тогда
		ИмяТипаДанных = "РегистрНакопления";
	ИначеЕсли ПараметрыОтчета.ТипДанных = "Справочники" Тогда
		ИмяТипаДанных = "Справочник";
	ИначеЕсли ПараметрыОтчета.ТипДанных = "Документы" Тогда
		ИмяТипаДанных = "Документ";
	ИначеЕсли ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" Тогда
		ИмяТипаДанных = "РегистрБухгалтерии";
	КонецЕсли;

	ТекстЗапроса = Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-2);
	ТекстЗапроса = ТекстЗапроса +
	" ИсточникДанных.*<ТекстПоляСоединений> ИЗ " + ИмяТипаДанных + "." + ПараметрыОтчета.ИмяОбъекта;
	
	ЭтоТабличнаяЧастьИсточника = Ложь;
	
	Если НЕ ПустаяСтрока(ПараметрыОтчета.ИмяТаблицы) Тогда
		
		Если ИмяТипаДанных = "Справочник" ИЛИ ИмяТипаДанных = "Документ" Тогда 
			// Если это табличная часть объекта то нужно проверить е наличие
			Если  Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].ТабличныеЧасти.Найти(ПараметрыОтчета.ИмяТаблицы) <> Неопределено Тогда
				ТекстЗапроса = ТекстЗапроса + "." + ПараметрыОтчета.ИмяТаблицы;
				ЭтоТабличнаяЧастьИсточника = Истина;
			КонецЕсли;
		Иначе
			ТекстЗапроса = ТекстЗапроса + "." + ПараметрыОтчета.ИмяТаблицы;
		КонецЕсли;
	КонецЕсли;

	ПараметрыВиртуальнойТаблицы = "";
	Если ПараметрыОтчета.ИмяТаблицы = "ОстаткиИОбороты" 
		ИЛИ ПараметрыОтчета.ИмяТаблицы = "Обороты" Тогда
		Если ПараметрыОтчета.Свойство("ПараметрыВиртуальнойТаблицы") Тогда
			ПараметрыВиртуальнойТаблицы = ПараметрыОтчета.ПараметрыВиртуальнойТаблицы;
		Иначе
			ПараметрыВиртуальнойТаблицы = "({&НачалоПериода} ,{&КонецПериода} ,Авто)";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + ПараметрыВиртуальнойТаблицы;
	КонецЕсли;
	
	Если ПараметрыОтчета.ИмяТаблицы = "СрезПервых" Тогда
		Если ПараметрыОтчета.Свойство("ПараметрыВиртуальнойТаблицы") Тогда
			ПараметрыВиртуальнойТаблицы = ПараметрыОтчета.ПараметрыВиртуальнойТаблицы;
		Иначе
			ПараметрыВиртуальнойТаблицы = "({&НачалоПериода} ,)";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + ПараметрыВиртуальнойТаблицы;
	КонецЕсли;
	
	Если ПараметрыОтчета.ИмяТаблицы = "СрезПоследних" Тогда
		Если ПараметрыОтчета.Свойство("ПараметрыВиртуальнойТаблицы") Тогда
			ПараметрыВиртуальнойТаблицы = ПараметрыОтчета.ПараметрыВиртуальнойТаблицы;
		Иначе
			ПараметрыВиртуальнойТаблицы = "({&КонецПериода} ,)";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + ПараметрыВиртуальнойТаблицы;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + " КАК ИсточникДанных";

	Если ПараметрыОтчета.ТипДанных = "Документы" Тогда
		Если ЭтоТабличнаяЧастьИсточника Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|{ГДЕ
				|	(ИсточникДанных.Ссылка.Дата >= &НачалоПериода),(ИсточникДанных.Ссылка.Дата <= &КонецПериода)}";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
				|{ГДЕ
				|	(ИсточникДанных.Дата >= &НачалоПериода),(ИсточникДанных.Дата <= &КонецПериода)}";
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" 
		И ПараметрыОтчета.ИмяТаблицы = "" Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|{ГДЕ
			|	(ИсточникДанных.Период >= &НачалоПериода),(ИсточникДанных.Период <= &КонецПериода)}";
	КонецЕсли;
		
	// Дополнительные поля для регистров налогового учета
	ТекстПоляНалоговогоУчета       = "";
	ТекстСоединенияНалоговогоУчета = "";
		
	Если Метаданные.РегистрыСведений.Найти("ИсчислениеНалоговСтруктурныхЕдиниц") <> Неопределено
		И ПараметрыОтчета.ТипДанных = "РегистрыНакопления" Тогда
		
		ТекстИсчислениеНалоговСтруктурныхЕдиниц = "
		|ВЫБРАТЬ
		|	Организации.Ссылка КАК ВспомогательнаяСтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ(ИсчислениеНалогов.НалоговыйКомитет ЕСТЬ NULL)
		|				И ИсчислениеНалогов.НалоговыйКомитет <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ИсчислениеНалогов.НалоговыйКомитет
		|		ИНАЧЕ Организации.НалоговыйКомитет
		|	КОНЕЦ КАК НалоговыйКомитет
		|ИЗ
		|	Справочник.Организации КАК Организации
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов
		|		ПО Организации.Ссылка = ИсчислениеНалогов.СтруктурнаяЕдиница
		|			И ИсчислениеНалогов.РазделНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.РазделыНалоговогоУчета.<РазделНУ>)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка КАК ВспомогательнаяСтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением 
		|			ТОГДА ВЫБОР
		|					КОГДА НЕ(ИсчислениеНалогов_Подр.НалоговыйКомитет ЕСТЬ NULL)
		|							И ИсчислениеНалогов_Подр.НалоговыйКомитет <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|						ТОГДА ИсчислениеНалогов_Подр.НалоговыйКомитет
		|					КОГДА НЕ(ИсчислениеНалогов_Орг.НалоговыйКомитет ЕСТЬ NULL)
		|							И ИсчислениеНалогов_Орг.НалоговыйКомитет <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|						ТОГДА ИсчислениеНалогов_Орг.НалоговыйКомитет
		|					ИНАЧЕ ПодразделенияОрганизаций.Владелец.НалоговыйКомитет
		|				  КОНЕЦ
		|		КОГДА НЕ(ИсчислениеНалогов_Орг.НалоговыйКомитет ЕСТЬ NULL)
		|				И ИсчислениеНалогов_Орг.НалоговыйКомитет <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ИсчислениеНалогов_Орг.НалоговыйКомитет
		|		ИНАЧЕ ПодразделенияОрганизаций.Владелец.НалоговыйКомитет
		|	КОНЕЦ КАК НалоговыйКомитет
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов_Подр
		|		ПО ПодразделенияОрганизаций.Ссылка = ИсчислениеНалогов_Подр.СтруктурнаяЕдиница
		|			И ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением
		|			И ИсчислениеНалогов_Подр.РазделНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.РазделыНалоговогоУчета.<РазделНУ>)
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов_Орг
		|		ПО ПодразделенияОрганизаций.Владелец = ИсчислениеНалогов_Орг.СтруктурнаяЕдиница
		|			И ИсчислениеНалогов_Орг.РазделНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.РазделыНалоговогоУчета.<РазделНУ>)
		|";
		
		Если ПараметрыОтчета.ИмяОбъекта = "Акциз" Тогда
			
			ТекстПоляНалоговогоУчета = ",
			|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет КАК НалоговыйКомитет,
			|	КодыСтрокДекларацииПоАкцизу.КодСтроки КАК КодСтрокиДекларации";
			
			ТекстСоединенияНалоговогоУчета = "
			|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СтрЗаменить(ТекстИсчислениеНалоговСтруктурныхЕдиниц, "<РазделНУ>", "Акциз") + ") КАК ИсчислениеНалоговСтруктурныхЕдиниц
			|		ПО ИсточникДанных.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.ВспомогательнаяСтруктурнаяЕдиница
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|							ВидОперации КАК ВспомогательныйВидОперации,
			|							ВидТМЗ,
			|							КодСтроки
			|						ИЗ
			|							РегистрСведений.КодыСтрокДекларацииПоАкцизу.СрезПоследних({&КонецПериода}) КАК КодыСтрокДекларацииПоАкцизу) КАК КодыСтрокДекларацииПоАкцизу
			|		ПО ИсточникДанных.ТМЗ.ВидПодакцизногоТМЗ = КодыСтрокДекларацииПоАкцизу.ВидТМЗ
			|			И ИсточникДанных.ВидОперации = КодыСтрокДекларацииПоАкцизу.ВспомогательныйВидОперации";
			
		ИначеЕсли ПараметрыОтчета.ИмяОбъекта = "ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами"
			Или ПараметрыОтчета.ИмяОбъекта = "ВзаиморасчетыОрганизацийСПолучателямиИЛ"
			Или ПараметрыОтчета.ИмяОбъекта = "ВзаиморасчетыСДепонентамиОрганизаций"
			Или ПараметрыОтчета.ИмяОбъекта = "ВзаиморасчетыСРаботникамиОрганизаций"
			Или ПараметрыОтчета.ИмяОбъекта = "ВыплаченныеДоходыРаботникамОрганизацийНУ"
			Или ПараметрыОтчета.ИмяОбъекта = "ИПНРасчетыСБюджетом"
			Или ПараметрыОтчета.ИмяОбъекта = "ИПНСведенияОДоходах"
			Или ПараметрыОтчета.ИмяОбъекта = "ОПВПодлежитПеречислениюВФонды"
			Или ПараметрыОтчета.ИмяОбъекта = "ОПВРасчетыСФондами"
			Или ПараметрыОтчета.ИмяОбъекта = "ОПВСведенияОДоходах"
			Или ПараметрыОтчета.ИмяОбъекта = "СНИсчисленный"
			Или ПараметрыОтчета.ИмяОбъекта = "СОРасчетыСФондами"
			Или ПараметрыОтчета.ИмяОбъекта = "СОСведенияОДоходах" 
			Или ПараметрыОтчета.ИмяОбъекта = "ВОСМССведенияОДоходах" 
			Или ПараметрыОтчета.ИмяОбъекта = "ВОСМСРасчетыСФондами" 
			Или ПараметрыОтчета.ИмяОбъекта = "ВОСМСПодлежитПеречислениюВФонды" 
			Или ПараметрыОтчета.ИмяОбъекта = "ООСМССведенияОДоходах" 
			Или ПараметрыОтчета.ИмяОбъекта = "ООСМСРасчетыСФондами" Тогда
			
			ТекстПоляНалоговогоУчета = ",
			|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет КАК НалоговыйКомитет";
			
			ТекстСоединенияНалоговогоУчета = "
			|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СтрЗаменить(ТекстИсчислениеНалоговСтруктурныхЕдиниц, "<РазделНУ>", "НалогиСЗаработнойПлаты") + ") КАК ИсчислениеНалоговСтруктурныхЕдиниц
			|		ПО ИсточникДанных.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.ВспомогательнаяСтруктурнаяЕдиница";
			
		ИначеЕсли ПараметрыОтчета.ИмяОбъекта = "СНСведенияОДоходах" Тогда
			
			ТекстПоляНалоговогоУчета = ",
			|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет КАК НалоговыйКомитет,
			|	КодыСтрокДекларацииПоСН.КодСтроки КАК КодСтрокиДекларации";
			
			ТекстСоединенияНалоговогоУчета = "
			|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СтрЗаменить(ТекстИсчислениеНалоговСтруктурныхЕдиниц, "<РазделНУ>", "НалогиСЗаработнойПлаты") + ") КАК ИсчислениеНалоговСтруктурныхЕдиниц
			|		ПО ИсточникДанных.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.ВспомогательнаяСтруктурнаяЕдиница
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|							ВидРасчета КАК ВспомогательныйВидРасчета,
			|							КодСтроки
			|						ИЗ
			|							РегистрСведений.КодыСтрокДекларацииПоСН.СрезПоследних({&КонецПериода}) КАК КодыСтрокДекларацииПоСН) КАК КодыСтрокДекларацииПоСН
			|		ПО ИсточникДанных.ВидРасчета = КодыСтрокДекларацииПоСН.ВспомогательныйВидРасчета";
			
		ИначеЕсли ПараметрыОтчета.ИмяОбъекта = "КорректировкаНДС" Тогда
			
			ТекстПоляНалоговогоУчета = ",
			|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет КАК НалоговыйКомитет,
			|	КодыСтрокДекларацииПоНДС.КодСтроки КАК КодСтрокиДекларации";
			
			ТекстСоединенияНалоговогоУчета = "
			|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СтрЗаменить(ТекстИсчислениеНалоговСтруктурныхЕдиниц, "<РазделНУ>", "НДС") + ") КАК ИсчислениеНалоговСтруктурныхЕдиниц
			|		ПО ИсточникДанных.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.ВспомогательнаяСтруктурнаяЕдиница
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|							ВидОперации,
			|							КодСтроки
			|						ИЗ
			|							РегистрСведений.КодыСтрокДекларацииПоНДС.СрезПоследних({&КонецПериода}) КАК КодыСтрокДекларацииПоНДС) КАК КодыСтрокДекларацииПоНДС
			|		ПО ИсточникДанных.ВидОперацииКорректировки = КодыСтрокДекларацииПоНДС.ВидОперации";
			
		ИначеЕсли ПараметрыОтчета.ИмяОбъекта = "КорректировкаНДСКВозмещению" Тогда
			
			ТекстПоляНалоговогоУчета = ",
			|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет КАК НалоговыйКомитет,
			|	КодыСтрокДекларацииПоНДСКЗачету.КодСтроки КАК КодСтрокиДекларации";
			
			ТекстСоединенияНалоговогоУчета = "
			|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СтрЗаменить(ТекстИсчислениеНалоговСтруктурныхЕдиниц, "<РазделНУ>", "НДС") + ") КАК ИсчислениеНалоговСтруктурныхЕдиниц
			|		ПО ИсточникДанных.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.ВспомогательнаяСтруктурнаяЕдиница
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|							ВидОперации,
			|							ВидОборота КАК ВспомогательныйВидОборота,
			|							КодСтроки
			|						ИЗ
			|							РегистрСведений.КодыСтрокДекларацииПоНДСКЗачету.СрезПоследних({&КонецПериода}) КАК КодыСтрокДекларацииПоНДСКЗачету) КАК КодыСтрокДекларацииПоНДСКЗачету
			|		ПО ИсточникДанных.ВидОперацииКорректировки = КодыСтрокДекларацииПоНДСКЗачету.ВидОперации
			|			И ИсточникДанных.ВидОборота = КодыСтрокДекларацииПоНДСКЗачету.ВспомогательныйВидОборота";
			
		ИначеЕсли ПараметрыОтчета.ИмяОбъекта = "НДС" Тогда
			
			ТекстПоляНалоговогоУчета = ",
			|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет КАК НалоговыйКомитет,
			|	КодыСтрокДекларацииПоНДС.КодСтроки КАК КодСтрокиДекларации";
			
			ТекстСоединенияНалоговогоУчета = "
			|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СтрЗаменить(ТекстИсчислениеНалоговСтруктурныхЕдиниц, "<РазделНУ>", "НДС") + ") КАК ИсчислениеНалоговСтруктурныхЕдиниц
			|		ПО ИсточникДанных.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.ВспомогательнаяСтруктурнаяЕдиница
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|							ВидОперации,
			|							КодСтроки
			|						ИЗ
			|							РегистрСведений.КодыСтрокДекларацииПоНДС.СрезПоследних({&КонецПериода}) КАК КодыСтрокДекларацииПоНДС) КАК КодыСтрокДекларацииПоНДС
			|		ПО ИсточникДанных.ВидОперацииРеализации = КодыСтрокДекларацииПоНДС.ВидОперации";
			
		ИначеЕсли ПараметрыОтчета.ИмяОбъекта = "НДСКВозмещению" Тогда
			
			ТекстПоляНалоговогоУчета = ",
			|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет КАК НалоговыйКомитет,
			|	КодыСтрокДекларацииПоНДСКЗачету.КодСтроки КАК КодСтрокиДекларации";
			
			ТекстСоединенияНалоговогоУчета = "
			|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СтрЗаменить(ТекстИсчислениеНалоговСтруктурныхЕдиниц, "<РазделНУ>", "НДС") + ") КАК ИсчислениеНалоговСтруктурныхЕдиниц
			|		ПО ИсточникДанных.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.ВспомогательнаяСтруктурнаяЕдиница
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|							ВидОперации,
			|							ВидОборота КАК ВспомогательныйВидОборота,
			|							КодСтроки
			|						ИЗ
			|							РегистрСведений.КодыСтрокДекларацииПоНДСКЗачету.СрезПоследних({&КонецПериода}) КАК КодыСтрокДекларацииПоНДСКЗачету) КАК КодыСтрокДекларацииПоНДСКЗачету
			|		ПО ИсточникДанных.ВидОперацииПоступления = КодыСтрокДекларацииПоНДСКЗачету.ВидОперации
			|			И ИсточникДанных.ВидОборота = КодыСтрокДекларацииПоНДСКЗачету.ВспомогательныйВидОборота";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<ТекстПоляСоединений>", ТекстПоляНалоговогоУчета);
	ТекстЗапроса = ТекстЗапроса + ТекстСоединенияНалоговогоУчета;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
		
	ДанныеОбъекта       = ПолучитьИзВременногоХранилища(Адрес);
	ДанныеРасшифровки   = ДанныеОбъекта.ДанныеРасшифровки;
	ЗначенияПолейРасшифровки = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля();
	Если ЗначенияПолейРасшифровки.Количество()<> 0 Тогда
		ЗначениеРасшифровки =  ЗначенияПолейРасшифровки[0].Значение;
		Если ЗначениеРасшифровки = NULL Тогда
			ПараметрыРасшифровки = Неопределено;
		Иначе
			ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
			ПараметрыРасшифровки.Вставить("Значение",      ЗначениеРасшифровки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ДобавитьПолеГруппировки(Группировка, Наименование, Синоним, ТипГруппировки = Неопределено)
	
	Если Группировка.Найти(Наименование, "Поле") = Неопределено Тогда
		Если ТипГруппировки = Неопределено Тогда
			ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
		КонецЕсли;
		ГруппировкаСтр      = Группировка.Добавить();
		ГруппировкаСтр.Поле = Наименование;
		ГруппировкаСтр.Использование = Истина;
		ГруппировкаСтр.Представление = Синоним;
		ГруппировкаСтр.ТипГруппировки = ТипГруппировки;
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет выбранное поле в набор выбранных полей
Процедура ДобавитьВыбранноеПоле(Элементы, ЭлементСтруктуры) 
	ВыбранныеПоля = ЭлементСтруктуры;
	Для Каждого Элемент Из Элементы Цикл
		Если Элемент.Использование Тогда
			Группа = ТипЗнч(Элемент)=Тип("ГруппаВыбранныхПолейКомпоновкиДанных");
			
			Если Группа Тогда
				ВыбранноеПоле = ВыбранныеПоля.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ВыбранноеПоле.Использование = Истина;
				ВыбранноеПоле.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;

			Иначе
				ВыбранноеПоле = ВыбранныеПоля.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Поле = Элемент.Поле;
			КонецЕсли;	
			
			Если Элемент.Заголовок <> Неопределено Тогда
				ВыбранноеПоле.Заголовок = Элемент.Заголовок;
			КонецЕсли;
			Если Группа Тогда
				ДобавитьВыбранноеПоле(Элемент.Элементы, ВыбранноеПоле);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура проверяет, есть ли выбранные поля 
Процедура ПроверитьВыбранныеПоля(Элементы,ВыбранныеПоляЕсть,Схема = Неопределено) 
	Для Каждого Элемент Из Элементы Цикл
		Если Схема = Неопределено Тогда
			Если Элемент.Использование Тогда
				Группа = ТипЗнч(Элемент)=Тип("ГруппаВыбранныхПолейКомпоновкиДанных");
				Если НЕ Группа Тогда
					ВыбранныеПоляЕсть = Истина; 
				КонецЕсли;
				Если Группа Тогда
					ПроверитьВыбранныеПоля(Элемент.Элементы, ВыбранныеПоляЕсть,Схема);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Элемент.Использование Тогда
				Группа = ТипЗнч(Элемент)=Тип("ГруппаВыбранныхПолейКомпоновкиДанных");
				Если НЕ Группа И Схема.ПоляИтога.Найти(Строка(Элемент.Поле))=Неопределено Тогда
					ВыбранныеПоляЕсть = Истина; 
				КонецЕсли;
				Если Группа Тогда
					ПроверитьВыбранныеПоля(Элемент.Элементы, ВыбранныеПоляЕсть,Схема);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ДобавитьПоляПериодаВНаборДанных(НаборДанных)
	
	СписокПериодов = Новый СписокЗначений;
	СписокПериодов.Добавить("ПериодСекунда",   "Период секунда");
	СписокПериодов.Добавить("ПериодМинута",    "Период минута");
	СписокПериодов.Добавить("ПериодЧас",       "Период час");
	СписокПериодов.Добавить("ПериодДень",      "Период день");
	СписокПериодов.Добавить("ПериодНеделя",    "Период неделя");
	СписокПериодов.Добавить("ПериодДекада",    "Период декада");
	СписокПериодов.Добавить("ПериодМесяц",     "Период месяц");
	СписокПериодов.Добавить("ПериодКвартал",   "Период квартал");
	СписокПериодов.Добавить("ПериодПолугодие", "Период полугодие");
	СписокПериодов.Добавить("ПериодГод",       "Период год");
	
	ИмяПапки = "Периоды";
	СписокПолейНабораДанных = Новый СписокЗначений;
	ПапкаПолейНабораДанных = НаборДанных.Поля.Добавить(Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных"));
	ПапкаПолейНабораДанных.Заголовок   = ИмяПапки;
	ПапкаПолейНабораДанных.ПутьКДанным = ИмяПапки;
	
	Для каждого Период Из СписокПериодов Цикл
		ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Поле        = Период.Значение;
		ПолеНабораДанных.Заголовок   = Период.Представление;
		ПолеНабораДанных.ПутьКДанным = ИмяПапки + "." + Период.Значение;
		СписокПолейНабораДанных.Добавить(ПолеНабораДанных);
	КонецЦикла;
	
	Возврат СписокПолейНабораДанных;
	
КонецФункции

// Добавляет в набор данных поле набора данных
Функция ДобавитьПолеНабораДанных(НаборДанных, Поле, Заголовок, ПутьКДанным = Неопределено)
	
	Если ПутьКДанным = Неопределено Тогда
		ПутьКДанным = Поле;
	КонецЕсли;
	
	ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабораДанных.Поле        = Поле;
	ПолеНабораДанных.Заголовок   = Заголовок;
	ПолеНабораДанных.ПутьКДанным = ПутьКДанным;
	Возврат ПолеНабораДанных;
	
КонецФункции

// Функция добавляет поле итога в схему компоновки данных. Если параметр Выражение не указан, используется Сумма(ПутьКДанным)
Функция ДобавитьПолеИтога(СхемаКомпоновкиДанных, ПутьКДанным, Выражение = Неопределено)
	
	Если Выражение = Неопределено Тогда
		Выражение = "Сумма(" + ПутьКДанным + ")";
	КонецЕсли;
	
	ПолеИтога = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
	ПолеИтога.ПутьКДанным = ПутьКДанным;
	ПолеИтога.Выражение = Выражение;
	Возврат ПолеИтога;
	
КонецФункции


#КонецЕсли