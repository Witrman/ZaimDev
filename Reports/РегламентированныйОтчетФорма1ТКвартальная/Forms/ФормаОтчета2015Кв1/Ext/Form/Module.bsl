////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	мВыбраннаяФорма = "ФормаОтчета2015Кв1";
	КодФормы 		= "ФормаОтчета"; 		
	
	мФорматНомераСтроки = "ЧЦ=8; ЧВН=; ЧГ=";
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруФормРегОтчета(ЭтотОбъект);	
	
	СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями = РегламентированнаяОтчетностьПереопределяемый.ПоддержкаРаботыСоСтруктурнымиПодразделениями();	
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов   = Новый СписокЗначений;	
	СтруктураРеквизитовФормы.мПечатныеформы 		  = Новый СписокЗначений;	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			
	ЗаполнитьСведенияОбОтчетномПериоде();
		
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекФорма.КодФормы);
	КонецЦикла	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если Модифицированность Тогда 
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);	
		ТекстВопроса = НСТР("ru = 'Сохранить данные отчета?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);	
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)	
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.КодФормы = Элемент.ТекущиеДанные.КодФормы Тогда
		ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);
		Возврат;
	КонецЕсли;	
	
	РазделыОтчетаПриАктивизацииСтрокиНаСервере(Элемент.ТекущиеДанные.КодФормы, Элемент.ТекущиеДанные.Многострочность);	
		
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Для Каждого СтраницаФорм из Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы Цикл
		Элементы[СтраницаФорм.Имя].Видимость = СтраницаФорм.Имя = ЭтаФорма.КодФормы;	
	КонецЦикла;
	
	ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);		

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма400ПолеТабличногоДокументаСтраница1

&НаКлиенте
Процедура ФормаОтчетаПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Ячейка = Область.Имя;
	
	Если НЕ Найти(Область.Имя, "Стр") = 0 Тогда	
		
		Форма1ТКвартальнаяРасчетНаСервере(Ячейка, Область.Значение, КодФормы);
		Модифицированность = Истина; 
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)	
	СохранитьДанные();	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Перезаполнить = Истина; // Для выполнения запроса на пересчет данных к пользователю
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения =  РегламентированнаяОтчетностьКлиент.ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Перезаполнить Тогда		
		Если СтрокаФормы.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстВопроса = "Перезаполнить данные формы и ее дополнительных форм?";
		Иначе
			ТекстВопроса = "Перезаполнить данные формы?";
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);
		Оповещение.ДополнительныеПараметры.Вставить("Перезаполнить", Перезаполнить);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);		

	КонецЕсли;		
	    
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	ОткрытьФормуНастройкиСтраниц()	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФорму(Команда)
	
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму");
		
КонецПроцедуры

///////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ПРОЦЕДУРЫ И ФУНКЦЦИИ

&НаКлиенте
Процедура ПослеВводаСтраницы(Значение, Параметры) Экспорт
	
	Если НЕ Значение = Неопределено Тогда  
		
		ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
		Если ТекФорма = Неопределено Тогда
			ВсегоСтраниц = 1;
		Иначе
			ВсегоСтраниц = ТекФорма.ВсегоСтраниц;
		КонецЕсли;		
			
		Если Значение = 0 Тогда
			ТекущаяСтраница = 1;
		ИначеЕсли Значение > ВсегоСтраниц Тогда
			ТекущаяСтраница = ВсегоСтраниц;
		Иначе
			ТекущаяСтраница = Значение;				
		КонецЕсли;
		
		ПослеВводаСтраницыНаСервере();
		  
	КонецЕсли;
	           	
КонецПроцедуры

&НаСервере
Процедура ПослеВводаСтраницыНаСервере()
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ПредыдущаяСтрНаСервере()
	ТекущаяСтраница = ТекущаяСтраница - 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура СледующаяСтрНаСервере()
	ТекущаяСтраница = ТекущаяСтраница + 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
		
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуНаСервере()
	РегламентированнаяОтчетность.УдалитьСтрокуМногострочнойФормы(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере()
	
	РегламентированнаяОтчетность.ДобавитьСтрокуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокСтруктурныхЕдиниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");			
	СтруктураРеквизитовФормы.Вставить("НалоговыйКомитет");				
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");		
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");		
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");	
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрг");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);	
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");	
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");		
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");	
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);	
	СтруктураРеквизитовФормы.Вставить("мПериодичность", Параметры.мПериодичность);		
	СтруктураРеквизитовФормы.Вставить("мГод");	
	СтруктураРеквизитовФормы.Вставить("мКвартал");	
	СтруктураРеквизитовФормы.Вставить("мМесяц");		

	// индивидуальные параметры формы
	СтруктураРеквизитовФормы.Вставить("мПоддержкаРаботыСоСтруктурнымиПодразделениями");		
	
КонецПроцедуры

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()	
	
	РегламентированнаяОтчетность.ВосстановитьСохраненныйОтчет(ЭтотОбъект);	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтчетномПериоде() Экспорт

	СтрПериодОтчета = ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ФП = истина");
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
		СтруктураРеквизитовФормы.мКвартал = Лев(СтрПериодОтчета,1);
		СтруктураРеквизитовФормы.мМесяц = Неопределено;
	Иначе
		СтруктураРеквизитовФормы.мМесяц = Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		СтруктураРеквизитовФормы.мКвартал = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мГод = Лев(Прав(СтрПериодОтчета,7),4);
		
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы)
	
	ОргСведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(Налогоплательщик, ДатаПодписи);
	//Если организация не указана то не выводим никаких сведений
	Если ОргСведения = 0 Тогда
		Возврат;
	КонецЕсли;

	// Инициализируем переменные
	НаимЮЛПол = ""; 		// Полное наименование 
	АдрЮР = ""; 			// Юридический адрес
	ТелОрганизации = "";	// Телефон организации
	ФИОРук = ""; 			// ФИО руководителя
	ФИОБух = ""; 			// ФИО главного бухгатера
	ИИН_БИН = ""; 			// Код БИН
	АдрФакт = ""; 			// Фактический адрес
	КодКАТО = ""; 			// Код территории по КАТО
	НаимОКЭД = "";			// Наименование по ОКЭД
	КодПоОКЭД = "";			// Код по ОКЭД

	// Получаем данные
	ОргСведения.Свойство("ПолноеНаименование", НаимЮЛПол);
	ОргСведения.Свойство("ЮридическийАдрес",   АдрЮР);
	ОргСведения.Свойство("Телефоны",  		   ТелОрганизации);
	ОргСведения.Свойство("Руководитель",   	   ФИОРук);
	ОргСведения.Свойство("ГлавныйБухгалтер",   ФИОБух);
	ОргСведения.Свойство("БИН_ИИН",    		   ИИН_БИН);
	ОргСведения.Свойство("ФактическийАдрес",   АдрФакт);	 
	
	ОргСведения.Свойство("КодКАТО",					КодКАТО);	
	ОргСведения.Свойство("ОсновнойВидДеятельности",	НаимОКЭД);	
	ОргСведения.Свойство("КодОКЭД",					КодПоОКЭД);	
		
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "НаимЮЛПол",НаимЮЛПол);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "НаимОКЭД", НаимОКЭД);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ФИОРук",	 ФИОРук);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Исполнитель",	 Пользователи.ТекущийПользователь());

	Попытка
		 Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			АдресныеСведенияОрганизации = РегистрыСведений.АдресныйКлассификатор.ПолучитьАдресныеСведенияОрганизации(Налогоплательщик.ИндивидуальныйПредприниматель);
		Иначе
			АдресныеСведенияОрганизации = РегистрыСведений.АдресныйКлассификатор.ПолучитьАдресныеСведенияОрганизации(Налогоплательщик);
		КонецЕсли;
	Исключение
		АдресныеСведенияОрганизации = Новый Структура;

		АдресныеСведенияОрганизации.Вставить("АдресОрганизации", ""); 	// Фактический адрес
		АдресныеСведенияОрганизации.Вставить("ИнформАдрес", ""); 		// Адрес для информирования физ. лица
		АдресныеСведенияОрганизации.Вставить("КодКато", ""); 			// Код КАТО
	КонецПопытки;
	
	АдресныеСведенияОрганизации.Свойство("АдресОрганизации", АдрФакт);
	АдресныеСведенияОрганизации.Свойство("КодКато", КодКАТО);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "АдрФакт",	 АдрФакт);
	
	Если НЕ  Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "АдрЮР",	 АдрЮР);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ТелОрганизации",	 ТелОрганизации);
		
	    // Код БИН
		ДлинаИИН = СтрДлина(ИИН_БИН);
		Если ДлинаИИН <= 12 Тогда
			Для Шаг = 1 По ДлинаИИН Цикл
				ИИН = СРЕД(ИИН_БИН, Шаг, 1);
				РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"БИН"+Шаг,ИИН);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Код КАТО
	КодКАТО = "" + СтрЗаменить(КодКАТО, " ", "") + "0"; // длина кода всего 9 символов, добавим 10-й
	ДлинаКАТО = СтрДлина(КодКАТО);
	Если ДлинаКАТО <= 10 Тогда
		Для Шаг = 1 По ДлинаКАТО Цикл
			КодПоКАТО = СРЕД(КодКАТО, Шаг, 1);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"КодКАТО"+Шаг,КодПоКАТО);
		КонецЦикла;
	КонецЕсли;
	
	// Код по ОКЭД
	ДлинаКодПоОКЭД = СтрДлина(КодПоОКЭД);
	Если ДлинаКодПоОКЭД <= 5 Тогда
		Для Шаг = 1 По ДлинаКодПоОКЭД Цикл
			КодОКЭД = СРЕД(КодПоОКЭД, Шаг, 1);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"КодПоОКЭД"+Шаг,КодОКЭД);
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПанель(ПризнакОсновнойФормы,ПризнакМногострочности)
			
	Элементы.ФормаЗаполнить.Доступность   = НЕ (КодФормы = "Форма400_06" ИЛИ КодФормы = "Форма400_07"); 
	Элементы.ГруппаКнопокДействияСоСтрокамиИСтраницами.Видимость = ПризнакМногострочности;	
			    	
КонецПроцедуры //ЗаполнитьПанель()

&НаСервере
Процедура РазделыОтчетаПриАктивизацииСтрокиНаСервере(НовыйКодФормы, НовыйПризнакМногострочность);
	
	//проверим, что стояли не на основной, итоги передаем только когда переходим из доп.форм
	ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	Если ТекФорма <> Неопределено И Не ТекФорма.ПризнакОсновной Тогда
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы, Истина);		
	КонецЕсли;
				
	// установим новые значения реквизитам формы
	ЭтаФорма.КодФормы = НовыйКодФормы;	
	
	// передаем данные в структуру
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, НовыйКодФормы);	
	
	Если  НовыйПризнакМногострочность Тогда
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры	

// Процедура очистки формы
//
// параметр: ТекИмяФормы - имя очищаемой формы (=КодФормы)
//           ОчиститьВсе - признак вида очистки формы              
//
Процедура Очистить(ТекИмяФормы,ОчиститьВсе = Ложь) Экспорт
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	Для Шаг = 1 По 12 Цикл
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодПоОКПО" + Шаг);
		СписокПоказателейНеПодлежащихОчистке.Добавить("ИИН_БИН" + Шаг);
	КонецЦикла;
	СписокПоказателейНеПодлежащихОчистке.Добавить("НаимЮЛПол");
	СписокПоказателейНеПодлежащихОчистке.Добавить("АдрЮР");
	СписокПоказателейНеПодлежащихОчистке.Добавить("АдрФакт");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ФИОРук");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ФИОБух");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Исполнитель");
	СписокПоказателейНеПодлежащихОчистке.Добавить("КодКАТО");
	СписокПоказателейНеПодлежащихОчистке.Добавить("НаимОКЭД");
	СписокПоказателейНеПодлежащихОчистке.Добавить("КодПоОКЭД");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Страница1");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Страница2");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Страница3");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Страница4");
	
	РегламентированнаяОтчетность.ОчиститьСтруктуруДанныхИТабличноеПолеФормы(ЭтаФорма, ТекИмяФормы, Истина, СписокПоказателейНеПодлежащихОчистке);
	
	// обновим представление списка структурных единиц
	Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц);
	КонецЕсли;
			
КонецПроцедуры // Очистить()

&НаКлиенте
Процедура ОчиститьРеглОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Форма = ДополнительныеПараметры.Форма;	
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", Форма.КодФормы));
		Вложенность = ДополнительныеПараметры.ОчищатьПриложения;	
		
		ОчиститьРеглОтчетЗавершениеНаСервере(СтрокаФормы.КодФормы, СтрокаФормы.Многострочность, Вложенность);
		
	КонецЕсли;
	
КонецПроцедуры 	

&НаСервере
Процедура ОчиститьРеглОтчетЗавершениеНаСервере(КодФормы, ПризнакМногострочности, Вложенность) Экспорт
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, ПризнакМногострочности, Вложенность);	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиСтраниц(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьДанныеФормы(РезультатЗакрытия, СписокФормДерева);
	
	Модифицированность = Истина;
	
	//обновим мСписокФормБезИерархии
	Для Каждого СтрокаФормы ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",СтрокаФормы.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			СтрокаФормы.Выгружать               = ТекущаяСтрокаСписка.Выгружать;
			СтрокаФормы.ПоказатьСтраницу        = ТекущаяСтрокаСписка.ПоказатьСтраницу;			
			СтрокаФормы.АвтополучениеИтогов     = ТекущаяСтрокаСписка.АвтополучениеИтогов;  
			СтрокаФормы.АвтоЗаполнение          = ТекущаяСтрокаСписка.АвтоЗаполнение;  
		КонецЕсли;			
	КонецЦикла; 	

	Если ДополнительныеПараметры.Свойство("ТекущийРаздел") И НЕ ДополнительныеПараметры.ТекущийРаздел = Неопределено Тогда  		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(РазделыОтчета, Новый Структура("СписокФормДереваСтраницы",ДополнительныеПараметры.ТекущийРаздел));
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;			
	КонецЕсли;  	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиСтраниц()
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРаздел = Элементы.РазделыОтчета.ТекущиеДанные.Страницы;		
	КонецЕсли;
	
	Для Каждого ТекФорма ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",ТекФорма.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			ТекущаяСтрокаСписка.Выгружать               = ТекФорма.Выгружать;
			ТекущаяСтрокаСписка.ПоказатьСтраницу        = ТекФорма.ПоказатьСтраницу;			
			ТекущаяСтрокаСписка.АвтополучениеИтогов     = ТекФорма.АвтополучениеИтогов;  
			ТекущаяСтрокаСписка.АвтоЗаполнение          = ТекФорма.АвтоЗаполнение;  
		КонецЕсли;		   
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокФормДерева",СписокФормДерева);
	
	ДопПараметры = Новый Структура("ТекущийРаздел",ТекущийРаздел);
	
	ОповещениеПослеЗакрытияФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастройкиСтраниц",ЭтотОбъект,ДопПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.НастройкиОтчета",ПараметрыФормы, ЭтаФорма,,,,ОповещениеПослеЗакрытияФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////
// Печать

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	 Перем СтруктураГруппы; 
    
    Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
        ТекстСообщения = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");            
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);                
                
        Возврат Ложь;
        
    КонецЕсли;
            
    СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
    СтруктураРеквизитовФормы.мРежимПечати = Истина;
    
    Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
        ВыборРасчета(КодФормы, Неопределено, Неопределено);
    КонецЕсли; 

    РегламентированнаяОтчетность.СформироватьСписокПечатаемыхЛистов(ЭтаФорма);                 
        
    Возврат Истина;    
	
КонецФункции

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////
// Общие механизмы отчета

&НаКлиенте
Процедура ОбновитьПараметрыФормыНаКлиенте(Параметры) Экспорт
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	ЗаполнитьСведенияОбОтчетномПериоде();
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);		
	КонецЦикла	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормы(ТекФорма, Параметры)
	
	ЗаполнитьЗначенияСвойств(ТекФорма.СтруктураРеквизитовФормы, Параметры);                     		
	ТекФорма.Налогоплательщик        	= Параметры.Налогоплательщик;		
	ТекФорма.мСписокСтруктурныхЕдиниц	= Параметры.мСписокСтруктурныхЕдиниц;

КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;	
		
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;										
		КонецЕсли;
		
		
		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();			
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;		
	КонецЕсли;
	
	//Обход ситуации с повторным открытием основной формы, из-за ТД
	МассивРеквизитовФормы = ЭтотОбъект.ПолучитьРеквизиты();
	Для Счетчик = 0 По МассивРеквизитовФормы.Количество()-1 Цикл		
		РеквизитФормы = МассивРеквизитовФормы[Счетчик];
		Если РеквизитФормы.ТипЗначения.СодержитТип(Тип("ТабличныйДокумент")) Тогда
			ЭтотОбъект[РеквизитФормы.Имя] = ЭтотОбъект[РеквизитФормы.Имя];	
		КонецЕсли;
	КонецЦикла;	  	
	
	мСтруктураЗначений = Новый Структура;
	
	Если СтруктураРеквизитовФормы.Свойство("СформироватьФормуОтчетаАвтоматически") И СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически <> Неопределено Тогда
		
		ЗаполнитьАвтоНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметры(ТекущееИмяФормы) Экспорт
	
	Форма = РеквизитФормыВЗначение("мСписокФормБезИерархии").Строки.Найти(ТекущееИмяФормы, "КодФормы");
	
	Если ТекущееИмяФормы = Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7) Тогда 
		
		//заполним основные сведения об организации
		ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, ЭтотОбъект.КодФормы, Ложь,Ложь);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ЭтаФорма.КодФормы);
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма);	
	
	Форма1ТКвартальнаяРасчетНаСервере(Неопределено, Неопределено,КодФормы);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
//Процедура выполняет выбор процедуры расчета.
//ВыборРасчета выполняется при восстановлении данных, при изменении поля табличного документа
//
//Параметры:    ТекФорма - имя текущей формы
//              Индекс - индекс строки для многострочной формы
//              Показатель - имя ячейки, откуда была вызвана процедура расчета многострочной
//                           формы, без указания номера строки (например, без "__1")
//
Процедура ВыборРасчета(ТекФорма, Индекс = Неопределено, Показатель = Неопределено) Экспорт
	
	Если ТекФорма = "Форма1ТКвартальная" Тогда
		Форма1ТКвартальнаяРасчетНаСервере(Индекс, Показатель, ТекФорма);				
	КонецЕсли;		
	
КонецПроцедуры // ВыборРасчета()

&НаКлиенте
Процедура ПриЗакрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьнаСервере();
		Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;	

КонецПроцедуры 

&НаКлиенте
Процедура СохранитьДанные() Экспорт
	СохранитьНаСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
КонецПроцедуры

&НаСервере
Процедура СохранитьнаСервере();
	РегламентированнаяОтчетность.СохранитьОтчет(ЭтотОбъект);
КонецПроцедуры

&НаСервере 
Процедура ПередатьЗначениеВСтруктуруНаСервере(ИмяЯчейки, ЗначениеЯчейки, ПередаватьВТП = Ложь, ПередаватьВМногострочнуюЧасть = Ложь, ПередаватьИтоги = Ложь)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяЯчейки ,ЗначениеЯчейки, ПередаватьВТП, ПередаватьВМногострочнуюЧасть);
	
	Если ПередаватьИтоги Тогда
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	 	
	
	Перезаполнить = ДополнительныеПараметры.Перезаполнить;
	Очистить(КодФормы,Истина);
	
	Форма1ТКвартальнаяЗаполнитьАвто(Перезаполнить);		 
	 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаЗначенияДляВыгрузки (ПроверяемоеЗначение, КоличестовСимволов)
	
	КоличествоПроверяемогоЗнач = СтрДлина(Формат(ПроверяемоеЗначение, "ЧГ=0"));
	
	Если КоличестовСимволов < КоличествоПроверяемогоЗнач Тогда 
		ЗначениеВозврата = 999999999999;
	Иначе 
		ЗначениеВозврата = ПроверяемоеЗначение;
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

&НаКлиенте
Процедура ПослеВводаЗначения(Значение, Параметры) Экспорт
	
	Если НЕ Значение = Неопределено Тогда         	
		ПроверятьЦифрыВСтроке = Ложь;
		Если Параметры.Свойство("ПроверятьЦифрыВСтроке" , ПроверятьЦифрыВСтроке) И ПроверятьЦифрыВСтроке Тогда
			Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Значение) Тогда				
				ТекстСообщения = НСтр("ru = 'Значение содержит нецифровые символы, значение будет очищено'");							  
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);				
				Значение = "";
			КонецЕсли;         		
		КонецЕсли;
		
		Параметры.Область.Значение = Значение;	
		
		Если Параметры.Свойство("ПередаватьИтоги") Тогда			
			ПередатьЗначениеВМногострочнуюСтруктуру(Параметры.ИмяСтраницы, Параметры.Область.Имя, Значение, Параметры.Расчет, Параметры.ПередаватьИтоги);       
		Иначе
			ПередатьЗначениеВМногострочнуюСтруктуру(Параметры.ИмяСтраницы, Параметры.Область.Имя, Значение, Параметры.Расчет);       
		КонецЕсли;			
		
	КонецЕсли;
	           	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ЗначениеРеквизита)
											
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ЗначениеРеквизита);										
											
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначенияРеквизитов(Ссылка, ЗначенияРеквизитов)
											
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ЗначенияРеквизитов);										
											
КонецФункции

&НаКлиенте
Процедура ФормаОбработкаВыбораМногострочныхФорм(ВыбранноеЗначение, ИсточникВыбора)
	
	СсылкаРасшифровки = ВыбранноеЗначение;
	
	ОбластьРасшифровки = ЭтаФорма.ТекущийЭлемент.ТекущаяОбласть;	
	НомерСтроки = Сред(ОбластьРасшифровки.Имя, Найти(ОбластьРасшифровки.Имя, "__") + 2);
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
		ИмяГруппы = "ЛистA";                                                    
		СтандартнаяОбработка = Ложь; 
		ЗначениеРекизитов = ПолучитьЗначенияРеквизитов(СсылкаРасшифровки, "НаименованиеПолное,Наименование");
		Значение = ?(ЗначениеЗаполнено(ЗначениеРекизитов.НаименованиеПолное),ЗначениеРекизитов.НаименованиеПолное, ЗначениеРекизитов.Наименование);	
		ОбластьРасшифровки.Значение  = Значение;
		ОбластьРасшифровки.Расшифровка = СсылкаРасшифровки;
		
		ПередатьЗначениеВМногострочнуюСтруктуру(ИмяГруппы, ОбластьРасшифровки.Имя, Значение);
 	
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ФормаВыбораИзКлассификатора") Тогда
		
		Если ВРег(ИсточникВыбора.ИмяСекции) = ВРег("Классификатор") Тогда 			
			Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
				ОбластьРасшифровки.Значение = ВыбранноеЗначение;	
			Иначе
				ОбластьРасшифровки.Значение = ВыбранноеЗначение.КодСтроки;
			КонецЕсли;
			СтандартнаяОбработка = Ложь;
			ИмяГруппы = "ЛистA";                                           
	 							
			ПередатьЗначениеВМногострочнуюСтруктуру(ИмяГруппы, ОбластьРасшифровки.Имя, ОбластьРасшифровки.Значение);
			
		КонецЕсли;                                                            			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ИмяЯчейки, Значение, Расчет = Ложь, ПередаватьИтоги = Ложь)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, ИмяСтраницы, ИмяЯчейки, Значение, Расчет);				
	
	Если ПередаватьИтоги Тогда
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы);
	КонецЕсли;
		
КонецПроцедуры

///////////////////////////////////////////////////////////////
// Процедуры и функции для расчета(заполнения) формы 1ТКвартальная

&НаКлиенте
Процедура Форма1ТКвартальнаяЗаполнитьАвто(Перезаполнить = Ложь) 
	                	
	Состояние("Расчет формы № 1-Т квартальная");		
	Форма1ТКвартальнаяЗаполнитьАвтоНаСервере(Перезаполнить);	
	Состояние("");	 
	
КонецПроцедуры // 

///////////////////////////////////////////////////////////////
// Процедуры и функции для расчета(заполнения) формы 1ТКвартальная

&НаСервере
Процедура Форма1ТКвартальнаяЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)               
	
	ТекущееИмяФормы = "ФормаОтчета";
	
	Если Перезаполнить Тогда	
		ТекстСообщения = НСтр("ru = 'Расчет формы № 1-Т квартальная'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;	

	мДатаНачалаПериодаОтчета = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	мДатаКонцаПериодаОтчета = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;

	тКвартал = Формат(мДатаНачалаПериодаОтчета, "ДФ=к");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Квартал1","0");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Квартал2",тКвартал);
	
	тГод = Формат(мДатаНачалаПериодаОтчета, "ДФ=гггг");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Год1",Сред(тГод, 1, 1));
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Год2",Сред(тГод, 2, 1));
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Год3",Сред(тГод, 3, 1));
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Год4",Сред(тГод, 4, 1));

	РасчетНаРегистрах = Метаданные.РегистрыРасчета.Найти("ОсновныеНачисленияРаботниковОрганизаций") <> Неопределено;
	РасчетПоСотрудникам = Метаданные.Справочники.Найти("СотрудникиОрганизаций") <> Неопределено;
	
	// Создание запроса и установка всех необходимых параметров
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамОрганизация",		   		   Налогоплательщик);	
	Запрос.УстановитьПараметр("парамПустаяОрганизация",	   		   Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамНачГода", 					   НачалоГода(мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПериодС", 					   НачалоМесяца(мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПериодПо", 					   КонецМесяца(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПослеКон", 					   КонецМесяца(мДатаКонцаПериодаОтчета) + 1);
	Запрос.УстановитьПараметр("парамВнутреннееСовместительство",   Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("парамСовместительство",   		   Перечисления.ВидыЗанятостиВОрганизации.Совместительство);
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", 	   мСписокСтруктурныхЕдиниц);

	// вид деятельности, относим на основное значение, если не указано значение у должности
	Запрос.УстановитьПараметр("парамПустойВидДеятельности", 	   Справочники.ВидыДеятельности.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамОсновнойВидДеятельности", 	   Налогоплательщик.ОсновнойВидДеятельности);
	
	Если РасчетНаРегистрах Тогда
		
		Запрос.УстановитьПараметр("парамРаботает",	 Вычислить("Перечисления.СостоянияРаботникаОрганизации.Работает"));
		Запрос.УстановитьПараметр("парамНеРаботает", Вычислить("Перечисления.СостоянияРаботникаОрганизации.НеРаботает"));
		
		// Виды использования рабочего времени, соответствущие простоям
		СписокПростои = Новый СписокЗначений;
		СписокПростои.Добавить(Справочники["КлассификаторИспользованияРабочегоВремени"].Простой);
		СписокПростои.Добавить(Справочники["КлассификаторИспользованияРабочегоВремени"].ПростойПочасовой);
		СписокПростои.Добавить(Справочники["КлассификаторИспользованияРабочегоВремени"].ПростойПоВинеРаботодателя);
		СписокПростои.Добавить(Справочники["КлассификаторИспользованияРабочегоВремени"].ПростойПоВинеРаботодателяПочасовой);
		
		Запрос.УстановитьПараметр("СписокПростои", СписокПростои);

	Иначе
			
		// В бухгалтерии нет данных о состояниях работников
		Запрос.УстановитьПараметр("парамСписокИсключаемыхСостояний", 	Новый СписокЗначений());
		
		Запрос.УстановитьПараметр("парамРаботает",						"Работает");
		
	КонецЕсли;

	Запрос.УстановитьПараметр("парамПриемНаРаботу", 				Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	Запрос.УстановитьПараметр("парамПеремещение", 					Перечисления.ПричиныИзмененияСостояния.Перемещение);
	Запрос.УстановитьПараметр("парамУвольнение", 					Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("парамПоСреднемуЗаработкуДляОтпуска", Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
	
	// ---------------------------------------------------------------------------
	// Тексты запросов
	//

	// Сформируем текст запроса с датами месяцев периода с начала года по конец текущего месяца
	// первый месяц квартала
	НачалоМесяца = НачалоГода(мДатаНачалаПериодаОтчета);
	ПериодыТекст = "ВЫБРАТЬ 
					|	ДАТАВРЕМЯ(" + Формат (НачалоМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК НачалоМесяца,
					|	ДАТАВРЕМЯ(" + Формат (КонецМесяца(НачалоМесяца),"ДФ=гггг,М,д,Ч,м,с") + ") КАК КонецМесяца
					|
					|ПОМЕСТИТЬ ВТ_Периоды
					|";
	// прибавим остальные месяцы
	Пока НачалоМесяца <= НачалоМесяца(мДатаКонцаПериодаОтчета) Цикл
		НачалоМесяца = КонецМесяца(НачалоМесяца) + 1;
		ПериодыТекст = ПериодыТекст + "
									  |ОБЪЕДИНИТЬ ВСЕ 
									  |
									  |ВЫБРАТЬ 
									  |	   ДАТАВРЕМЯ(" + Формат(НачалоМесяца,"ДФ=гггг,М,д,Ч,м,с") + "),
									  |	   ДАТАВРЕМЯ(" + Формат(КонецМесяца(НачалоМесяца),"ДФ=гггг,М,д,Ч,м,с") + ")
									  |";
	КонецЦикла;	

	// Получим даты приема и увольнения для работников организации за период
	РаботникиОрганизацииТекст = "
	|ВЫБРАТЬ 
	|	РаботникиОрганизации." + ?(РасчетПоСотрудникам, "Сотрудник.", "") + "ФизЛицо КАК ФизЛицо,
	|	РаботникиОрганизации." + ?(РасчетПоСотрудникам, "Сотрудник КАК Сотрудник", "Приказ КАК Приказ") + ",
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.ОбособленноеПодразделение,
	|	РаботникиОрганизации.Должность,
	|	&парамНачГода КАК Период,
	|	РаботникиОрганизации.ПричинаИзмененияСостояния,
	|	РаботникиОрганизации." + ?(РасчетПоСотрудникам, "Сотрудник.", "") + "ВидЗанятости КАК ВидЗанятости
	|
	|ПОМЕСТИТЬ ВТ_РаботникиОрганизации	
	|
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&парамНачГода, 
	|				" + ?(РасчетПоСотрудникам, "Сотрудник.", "") + "ВидЗанятости <> &парамВнутреннееСовместительство) КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУвольнение
	|	И РаботникиОрганизации.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизации." + ?(РасчетПоСотрудникам, "Сотрудник.", "") + "ФизЛицо,
	|	РаботникиОрганизации." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + ",
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.ОбособленноеПодразделение,
	|	РаботникиОрганизации.Должность,
	|	РаботникиОрганизации.Период, 
	|	РаботникиОрганизации.ПричинаИзмененияСостояния,
	|	РаботникиОрганизации." + ?(РасчетПоСотрудникам, "Сотрудник.", "") + "ВидЗанятости КАК ВидЗанятости
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Период > &парамНачГода И
	|	РаботникиОрганизации.Период <= &парамПериодПо И
	|	РаботникиОрганизации." + ?(РасчетПоСотрудникам, "Сотрудник.", "") + "ВидЗанятости <> &парамВнутреннееСовместительство
	|";

	Запрос.Текст = РаботникиОрганизацииТекст;

	// Получим периоды назначений работников
	ПериодыНазначенийТекст = "
	|" + РаботникиОрганизацииТекст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ТекущееНазначение.ФизЛицо,
	|	ТекущееНазначение." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + ",
	|	ТекущееНазначение.Организация,
	|	ТекущееНазначение.Должность,
	|	ТекущееНазначение.ВидЗанятости,	
	|	ТекущееНазначение.Период КАК ДатаНачала,
	|	МИНИМУМ(ВЫБОР 
	|				КОГДА СледующееНазначение.Период ЕСТЬ NULL ТОГДА &парамПериодПо 
	|				ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(СледующееНазначение.Период, ДЕНЬ, -1), ДЕНЬ)
	|			КОНЕЦ) КАК ДатаОкончания
	|
	|ПОМЕСТИТЬ ВТ_ПериодыНазначений
	|
	|ИЗ
	|	ВТ_РаботникиОрганизации КАК ТекущееНазначение
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РаботникиОрганизации КАК СледующееНазначение
	|		ПО ТекущееНазначение." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + " = СледующееНазначение." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + "
	|		   И ТекущееНазначение.ФизЛицо = СледующееНазначение.ФизЛицо
	|		   И ТекущееНазначение.Организация = СледующееНазначение.Организация
	|		   И ТекущееНазначение.Период < СледующееНазначение.Период
	|ГДЕ
	|	ТекущееНазначение.ПричинаИзмененияСостояния <> &парамУвольнение	
	|	И ТекущееНазначение.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц)
	|СГРУППИРОВАТЬ ПО
	|	ТекущееНазначение.ФизЛицо,
	|	ТекущееНазначение." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + ",
	|	ТекущееНазначение.Организация,
	|	ТекущееНазначение.Должность,
	|	ТекущееНазначение.ВидЗанятости,	
	|	ТекущееНазначение.Период	
	|";

	Запрос.Текст = ПериодыНазначенийТекст;

	Если РасчетНаРегистрах Тогда
	
		// Дополнительно выберем состояния работников за период для исключения из фактической численности отдельных состояний
		СостояниеРаботниковТекст = "
		|ВЫБРАТЬ 
		|	РаботникиОрганизации.ФизЛицо,
		|	РаботникиОрганизации." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + ",
		|	РаботникиОрганизации.Организация,
		|	РаботникиОрганизации.Должность,
		|	РаботникиОрганизации.Период,
		|	МАКСИМУМ(СостояниеРаботников.Период) КАК ПериодСостояния
		|
		|ПОМЕСТИТЬ ВТ_ДатыПоследнихСостояний
		|
		|ИЗ
		|	ВТ_РаботникиОрганизации КАК РаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
		|		ПО РаботникиОрганизации." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + " = СостояниеРаботников." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + "
		|			" + ?(НЕ РасчетПоСотрудникам, "И РаботникиОрганизации.ФизЛицо = СостояниеРаботников.ФизЛицо", "") + "
		|			И РаботникиОрганизации.Организация = СостояниеРаботников.Организация
		|			И СостояниеРаботников.Период <= РаботникиОрганизации.Период
		|			И СостояниеРаботников.Организация = &парамОрганизация
		|
		|СГРУППИРОВАТЬ ПО
		|	РаботникиОрганизации.ФизЛицо,
		|	РаботникиОрганизации." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + ",
		|   РаботникиОрганизации.Организация,
		|	РаботникиОрганизации.Должность,
		|	РаботникиОрганизации.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	СостояниеРаботников." + ?(РасчетПоСотрудникам, "Сотрудник.", "") + "ФизЛицо КАК ФизЛицо,
		|	СостояниеРаботников." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + ",
		|	СостояниеРаботников.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА СостояниеРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1) 
		|				И СостояниеРаботников.ПериодЗавершения <= &парамНачГода ТОГДА СостояниеРаботников.СостояниеЗавершения
		|		ИНАЧЕ СостояниеРаботников.Состояние
		|	КОНЕЦ КАК Состояние,
		|	&парамНачГода КАК Период
		|
		|ПОМЕСТИТЬ ВТ_СостояниеРаботников
		|
		|ИЗ
		|	РегистрСведений.СостояниеРаботниковОрганизаций.СрезПоследних(&парамНачГода, Организация = &парамОрганизация) КАК СостояниеРаботников
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СостояниеРаботников." + ?(РасчетПоСотрудникам, "Сотрудник.", "") + "ФизЛицо,
		|	СостояниеРаботников." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + ",
		|	СостояниеРаботников.Организация,
		|	СостояниеРаботников.Состояние,
		|	СостояниеРаботников.Период
		|ИЗ
		|	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
		|ГДЕ
		|	СостояниеРаботников.Организация = &парамОрганизация 
		|	И СостояниеРаботников.Период > &парамНачГода 
		|	И СостояниеРаботников.Период <= &парамПериодПо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СостояниеРаботников." + ?(РасчетПоСотрудникам, "Сотрудник.", "") + "ФизЛицо,
		|	СостояниеРаботников." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + ",
		|	СостояниеРаботников.Организация,
		|	СостояниеРаботников.СостояниеЗавершения,
		|	СостояниеРаботников.ПериодЗавершения КАК Период
		|ИЗ
		|	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
		|ГДЕ
		|	СостояниеРаботников.Организация = &парамОрганизация
		|	И СостояниеРаботников.ПериодЗавершения МЕЖДУ &парамНачГода И &парамПериодПо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизации.ФизЛицо,
		|	РаботникиОрганизации." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + ",
		|	РаботникиОрганизации.Организация,
		|	ВЫБОР
		|		КОГДА СостояниеРаботников." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + " ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|					КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУвольнение
		|						ТОГДА &парамРаботает
		|					ИНАЧЕ &парамНеРаботает
		|				  КОНЕЦ
		|		КОГДА СостояниеРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
		|					И СостояниеРаботников.ПериодЗавершения <= РаботникиОрганизации.Период
		|				ТОГДА СостояниеРаботников.СостояниеЗавершения
		|		ИНАЧЕ СостояниеРаботников.Состояние
		|	КОНЕЦ КАК Состояние,
		|	РаботникиОрганизации.Период
		|ИЗ
		|	ВТ_РаботникиОрганизации КАК РаботникиОрганизации
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДатыПоследнихСостояний КАК ДатыПоследнихСостояний
		|		ПО РаботникиОрганизации." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + " = ДатыПоследнихСостояний." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + "
		|			" + ?(НЕ РасчетПоСотрудникам, "И РаботникиОрганизации.ФизЛицо = ДатыПоследнихСостояний.ФизЛицо", "") + "
		|			И РаботникиОрганизации.Организация = ДатыПоследнихСостояний.Организация
		|			И РаботникиОрганизации.Период = ДатыПоследнихСостояний.Период
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
		|		ПО ДатыПоследнихСостояний." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + " = СостояниеРаботников." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + "
		|			" + ?(НЕ РасчетПоСотрудникам, "И ДатыПоследнихСостояний.ФизЛицо = СостояниеРаботников.ФизЛицо", "") + "
		|			И ДатыПоследнихСостояний.Организация = СостояниеРаботников.Организация
		|			И ДатыПоследнихСостояний.ПериодСостояния = СостояниеРаботников.Период
		|			И СостояниеРаботников.Организация = &парамОрганизация
		|"; 
	
		// Разделим состояния по периодам действия
		// Все состояния Работает, НеРаботает здесь заменим на NULL. Тогда функция МАКСИМУМ()
		// при наложении на один день нескольких Состояний будет возвращать NULL, только если за день не было ни одного невыхода
		ПериодыСостоянийТекст = "
		|" + СостояниеРаботниковТекст + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	ТекущееСостояние.ФизЛицо,
		|	ТекущееСостояние." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + ",
		|	ТекущееСостояние.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(ВЫБОР 
		|						КОГДА ТекущееСостояние.Состояние В (&парамРаботает, &парамНеРаботает) 
		|							ТОГДА NULL 
		|						ИНАЧЕ ТекущееСостояние.Состояние
		|					   КОНЕЦ) ЕСТЬ NULL 
		|			ТОГДА &парамРаботает
		|		ИНАЧЕ МАКСИМУМ(ВЫБОР 
		|						КОГДА ТекущееСостояние.Состояние В (&парамРаботает, &парамНеРаботает) 
		|							ТОГДА NULL 
		|						ИНАЧЕ ТекущееСостояние.Состояние
		|					   КОНЕЦ)
		|	КОНЕЦ КАК Состояние,
		|	ТекущееСостояние.Период КАК ДатаНачала,		
		|	МИНИМУМ(ВЫБОР 
		|				КОГДА СледующееСостояние.Период ЕСТЬ NULL ТОГДА &парамПериодПо
		|				ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(СледующееСостояние.Период, ДЕНЬ, -1))
		|			КОНЕЦ) КАК ДатаОкончания
		|
		|ПОМЕСТИТЬ ВТ_ПериодыСостояний
		|
		|ИЗ
		|	ВТ_СостояниеРаботников КАК ТекущееСостояние
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СостояниеРаботников КАК СледующееСостояние
		|		ПО ТекущееСостояние." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + " = СледующееСостояние." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + "
		|			" + ?(НЕ РасчетПоСотрудникам, "И ТекущееСостояние.ФизЛицо = СледующееСостояние.ФизЛицо", "") + "
		|			И ТекущееСостояние.Организация = СледующееСостояние.Организация
		|			И ТекущееСостояние.Период < СледующееСостояние.Период
		|СГРУППИРОВАТЬ ПО
		|	ТекущееСостояние.ФизЛицо,
		|	ТекущееСостояние." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + ",
		|	ТекущееСостояние.Организация,
		|	ТекущееСостояние.Период
		|";
		
		// Соединяем периоды назначений и периоды состояний, чтобы правильно учесть даты приема и увольнения
		ПериодыНазначенийТекст = "
		|" + ПериодыНазначенийТекст + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|" + ПериодыСостоянийТекст + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	ПериодыНазначений.ФизЛицо,
		|	ПериодыНазначений." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + ",
		|	ПериодыНазначений.Организация КАК Организация,
		|	ПериодыНазначений.Должность КАК Должность,
		|	ПериодыНазначений.ВидЗанятости,		
		|	ВЫБОР
		|		КОГДА ПериодыНазначений.ДатаНачала > ПериодыСостояний.ДатаНачала
		|			  ИЛИ ПериодыСостояний.ДатаНачала ЕСТЬ NULL ТОГДА ПериодыНазначений.ДатаНачала
		|		ИНАЧЕ ПериодыСостояний.ДатаНачала
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА ПериодыНазначений.ДатаОкончания < ПериодыСостояний.ДатаОкончания 
		|			  ИЛИ ПериодыСостояний.ДатаОкончания ЕСТЬ NULL ТОГДА ПериодыНазначений.ДатаОкончания
		|		ИНАЧЕ ПериодыСостояний.ДатаОкончания
		|	КОНЕЦ КАК ДатаОкончания,
		|	ЕСТЬNULL(ПериодыСостояний.Состояние, &парамРаботает) КАК Состояние
		|
		|ПОМЕСТИТЬ ВТ_ПериодыНазначений1
		|
		|ИЗ
		|	ВТ_ПериодыНазначений КАК ПериодыНазначений
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыСостояний КАК ПериодыСостояний
		|		ПО ПериодыНазначений." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + " = ПериодыСостояний." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + "
		|		   " + ?(НЕ РасчетПоСотрудникам, "И ПериодыНазначений.ФизЛицо = ПериодыСостояний.ФизЛицо", "") + " 
		|		   И ПериодыНазначений.Организация = ПериодыСостояний.Организация
		|		   И ПериодыНазначений.ДатаНачала <= ПериодыСостояний.ДатаОкончания 
		|		   И ПериодыНазначений.ДатаОкончания >= ПериодыСостояний.ДатаНачала 
		|";
	
	КонецЕсли;
		
	// Разобьем данные о назначениях-состояниях на помесячные записи и подсчитаем число дней за каждый период
	ПериодыНазначенийТекст = "
	|" + ПериодыНазначенийТекст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" + ПериодыТекст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ПериодыНазначений.ФизЛицо,
	|	ПериодыНазначений." + ?(РасчетПоСотрудникам, "Сотрудник", "Приказ") + ",
	|	ПериодыНазначений.ВидЗанятости, " + ?(РасчетНаРегистрах, "
	|	ДолжностиОрганизаций.КатегорияДолжности КАК КатегорияДолжности,", "") + "
	|	" +  ?(РасчетНаРегистрах, "
	|	ВЫБОР
	|		КОГДА ДолжностиОрганизаций.ВидДеятельности = &парамПустойВидДеятельности
	|			ТОГДА &парамОсновнойВидДеятельности
	|		ИНАЧЕ ДолжностиОрганизаций.ВидДеятельности
	|	КОНЕЦ КАК ВидДеятельности,", "") + "
	|	" + ?(РасчетНаРегистрах, "ПериодыНазначений.Состояние", "&парамРаботает") + " КАК Состояние,
	|	ДЕНЬ(ВЫБОР // ДатаОкончания
	|			КОГДА ПериодыНазначений.ДатаОкончания < Периоды.КонецМесяца ТОГДА ПериодыНазначений.ДатаОкончания
	|			ИНАЧЕ Периоды.КонецМесяца 
	|		КОНЕЦ) - 
	|	ДЕНЬ(ВЫБОР // ДатаНачала
	|			КОГДА ПериодыНазначений.ДатаНачала > Периоды.НачалоМесяца ТОГДА ПериодыНазначений.ДатаНачала
	|			ИНАЧЕ Периоды.НачалоМесяца
	|		КОНЕЦ) + 1 КАК ДнейРаботыВМесяце,
	|	Периоды.НачалоМесяца,
	|	Периоды.КонецМесяца
	|
	|ПОМЕСТИТЬ ВТ_ПериодыНазначений2
	|
	|ИЗ
	|	" + ?(РасчетНаРегистрах, "ВТ_ПериодыНазначений1", "ВТ_ПериодыНазначений") + " КАК ПериодыНазначений
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Периоды КАК Периоды
	|		ПО ПериодыНазначений.ДатаНачала <= Периоды.КонецМесяца 
	|		   И ПериодыНазначений.ДатаОкончания >= Периоды.НачалоМесяца
	|	" + ?(РасчетНаРегистрах, "
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолжностиОрганизаций КАК ДолжностиОрганизаций
	|		ПО ПериодыНазначений.Должность = ДолжностиОрганизаций.Ссылка", "") + "
	|";
	
	Запрос.Текст = ПериодыНазначенийТекст;
	
	// Определим среднесписочную и фактическую численность за каждый месяц
	ЧисленностьТекст = "
	|" + ПериодыНазначенийТекст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ПериодыНазначений.НачалоМесяца,
	|	ВЫРАЗИТЬ(СУММА(ВЫБОР 
	|						КОГДА ПериодыНазначений.ВидЗанятости <> &парамСовместительство ТОГДА ПериодыНазначений.ДнейРаботыВМесяце
	|						ИНАЧЕ 0
	|				   КОНЕЦ) / ДЕНЬ(ПериодыНазначений.КонецМесяца) КАК ЧИСЛО(10, 0)) КАК Среднесписочная,
	|	ВЫРАЗИТЬ(СУММА(ВЫБОР 
	|						КОГДА ПериодыНазначений.Состояние НЕ В(&парамСписокИсключаемыхСостояний) ТОГДА ПериодыНазначений.ДнейРаботыВМесяце
	|						ИНАЧЕ 0
	|				   КОНЕЦ) / ДЕНЬ(ПериодыНазначений.КонецМесяца) КАК ЧИСЛО(10, 0)) КАК Фактическая
	|	" + ?(РасчетНаРегистрах, ",
	|	ВЫРАЗИТЬ(СУММА(ВЫБОР
	|						КОГДА ПериодыНазначений.КатегорияДолжности = ЗНАЧЕНИЕ(Справочник.КатегорииДолжностейОрганизаций.РуководителиВсехУровней)
	|							И ПериодыНазначений.ВидЗанятости <> &парамСовместительство
	|							ТОГДА ПериодыНазначений.ДнейРаботыВМесяце
	|						ИНАЧЕ 0
	|					КОНЕЦ) / ДЕНЬ(ПериодыНазначений.КонецМесяца) КАК ЧИСЛО(10,0)) КАК РуководителиВсехУровней,
	|	ВЫРАЗИТЬ(СУММА(ВЫБОР
	|						КОГДА ПериодыНазначений.КатегорияДолжности = ЗНАЧЕНИЕ(Справочник.КатегорииДолжностейОрганизаций.СпециалистыВысшегоУровняКвалификации)
	|							И ПериодыНазначений.ВидЗанятости <> &парамСовместительство
	|							ТОГДА ПериодыНазначений.ДнейРаботыВМесяце
	|						ИНАЧЕ 0
	|					КОНЕЦ) / ДЕНЬ(ПериодыНазначений.КонецМесяца) КАК ЧИСЛО(10,0)) КАК СпециалистыВысшегоУровняКвалификации,
	|	ВЫРАЗИТЬ(СУММА(ВЫБОР
	|						КОГДА ПериодыНазначений.КатегорияДолжности = ЗНАЧЕНИЕ(Справочник.КатегорииДолжностейОрганизаций.СпециалистыСреднегоУровняКвалификации)
	|							И ПериодыНазначений.ВидЗанятости <> &парамСовместительство
	|							ТОГДА ПериодыНазначений.ДнейРаботыВМесяце
	|						ИНАЧЕ 0
	|					КОНЕЦ) / ДЕНЬ(ПериодыНазначений.КонецМесяца) КАК ЧИСЛО(10,0)) КАК СпециалистыСреднегоУровняКвалификации
	|	", "") + "
	|	" + ?(РасчетНаРегистрах, ",
	|	ВЫРАЗИТЬ(СУММА(ВЫБОР
	|						КОГДА ПериодыНазначений.ВидЗанятости <> &парамСовместительство И ПериодыНазначений.ВидДеятельности = &парамОсновнойВидДеятельности
	|							ТОГДА ПериодыНазначений.ДнейРаботыВМесяце
	|						ИНАЧЕ 0
	|					КОНЕЦ) / ДЕНЬ(ПериодыНазначений.КонецМесяца) КАК ЧИСЛО(10,0)) КАК СреднесписочнаяОсн,
	|	ВЫРАЗИТЬ(СУММА(ВЫБОР
	|						КОГДА ПериодыНазначений.Состояние НЕ В(&парамСписокИсключаемыхСостояний) И ПериодыНазначений.ВидДеятельности = &парамОсновнойВидДеятельности
	|							ТОГДА ПериодыНазначений.ДнейРаботыВМесяце
	|						ИНАЧЕ 0
	|					КОНЕЦ) / ДЕНЬ(ПериодыНазначений.КонецМесяца) КАК ЧИСЛО(10,0)) КАК ФактическаяОсн
	|	", "") + "
	|
	|ПОМЕСТИТЬ ВТ_Численность
	|
	|ИЗ
	|	ВТ_ПериодыНазначений2 КАК ПериодыНазначений
	|СГРУППИРОВАТЬ ПО
	|	ПериодыНазначений.НачалоМесяца, 
	|	ПериодыНазначений.КонецМесяца 
	|";
	
	Запрос.Текст = ЧисленностьТекст;
	
	// Выделим численность за отчетный месяц и с начала года
	ЧисленностьТекст = "
	|" + ЧисленностьТекст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	СУММА(ВЫБОР 
	|				КОГДА Численность.НачалоМесяца >= &парамПериодС ТОГДА Численность.Среднесписочная 
	|				ИНАЧЕ 0 
	|		  КОНЕЦ / 3) КАК СреднесписочнаяЗаКвартал,
	|	СУММА(Численность.Среднесписочная / МЕСЯЦ(&парамПериодПо) ) КАК СреднесписочнаяСНачалаГода,
	|
	|	СУММА(ВЫБОР 
	|				КОГДА Численность.НачалоМесяца >= &парамПериодС ТОГДА Численность.Фактическая 
	|				ИНАЧЕ 0 
	|		  КОНЕЦ / 3) КАК ФактическаяЗаКвартал,
	|	СУММА(Численность.Фактическая / МЕСЯЦ(&парамПериодПо) ) КАК ФактическаяСНачалаГода
	|
	|	" + ?(РасчетНаРегистрах, ",
	|	СУММА(ВЫБОР КОГДА Численность.НачалоМесяца = &парамПериодС ТОГДА Численность.РуководителиВсехУровней ИНАЧЕ 0 КОНЕЦ) КАК РуководителиВсехУровней,
	|	СУММА(ВЫБОР КОГДА Численность.НачалоМесяца = &парамПериодС ТОГДА Численность.СпециалистыВысшегоУровняКвалификации ИНАЧЕ 0 КОНЕЦ) КАК СпециалистыВысшегоУровняКвалификации,
	|	СУММА(ВЫБОР КОГДА Численность.НачалоМесяца = &парамПериодС ТОГДА Численность.СпециалистыСреднегоУровняКвалификации ИНАЧЕ 0 КОНЕЦ) КАК СпециалистыСреднегоУровняКвалификации
	|	", "") + "
	|
	|	" + ?(РасчетНаРегистрах, ",
	|	СУММА(ВЫБОР КОГДА Численность.НачалоМесяца >= &парамПериодС ТОГДА Численность.СреднесписочнаяОсн ИНАЧЕ 0 КОНЕЦ / 3) КАК СреднесписочнаяОснЗаКвартал,
	|	СУММА(Численность.СреднесписочнаяОсн / МЕСЯЦ(&парамПериодПо) ) КАК СреднесписочнаяОснСНачалаГода,
	|	СУММА(ВЫБОР КОГДА Численность.НачалоМесяца >= &парамПериодС ТОГДА Численность.ФактическаяОсн ИНАЧЕ 0 КОНЕЦ / 3) КАК ФактическаяОснЗаКвартал,
	|	СУММА(Численность.ФактическаяОсн / МЕСЯЦ(&парамПериодПо) ) КАК ФактическаяОснСНачалаГода
	|	", "") + "
	|ИЗ
	|	ВТ_Численность КАК Численность
	|";
	
	Запрос.Текст = ЧисленностьТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Выводим данные по численности
	Если Выборка.Следующий() Тогда
		
		// Раздел II.
		
		// Списочная численность в среднем
		Стр201_1 = ?(ЗначениеЗаполнено(Выборка.СреднесписочнаяЗаКвартал), Выборка.СреднесписочнаяЗаКвартал, 0);
		Стр201_2 = ?(ЗначениеЗаполнено(Выборка.СреднесписочнаяСНачалаГода), Выборка.СреднесписочнаяСНачалаГода, 0);

		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр201_1", Стр201_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр201_2", Стр201_2);

		// Фактическая численность
		Стр203_1 = ?(ЗначениеЗаполнено(Выборка.ФактическаяЗаКвартал), Выборка.ФактическаяЗаКвартал, 0);
		Стр203_2 = ?(ЗначениеЗаполнено(Выборка.ФактическаяСНачалаГода), Выборка.ФактическаяСНачалаГода, 0);

		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр203_1",Стр203_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр203_2",Стр203_2);
	
		Если РасчетНаРегистрах Тогда
			
			// Персонал основной деятельности (среднесписочная численность)
			Стр202_1 = ?(ЗначениеЗаполнено(Выборка.СреднесписочнаяОснЗаКвартал), Выборка.СреднесписочнаяОснЗаКвартал, 0);
			Стр202_2 = ?(ЗначениеЗаполнено(Выборка.СреднесписочнаяОснСНачалаГода), Выборка.СреднесписочнаяОснСНачалаГода, 0);

			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр202_1",Стр202_1);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр202_2",Стр202_2);

			// Персонал основной деятельности (Фактическая численность)
			Стр204_1 = ?(ЗначениеЗаполнено(Выборка.ФактическаяОснЗаКвартал), Выборка.ФактическаяОснЗаКвартал, 0);
			Стр204_2 = ?(ЗначениеЗаполнено(Выборка.ФактическаяОснСНачалаГода), Выборка.ФактическаяОснСНачалаГода, 0);

			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр204_1", Стр204_1);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр204_2", Стр204_2);
			
		Иначе 
			
			// Персонал основной деятельности (среднесписочная численность)
			Стр202_1 = ?(ЗначениеЗаполнено(Выборка.СреднесписочнаяЗаКвартал), Выборка.СреднесписочнаяЗаКвартал, 0);
			Стр202_2 = ?(ЗначениеЗаполнено(Выборка.СреднесписочнаяСНачалаГода), Выборка.СреднесписочнаяСНачалаГода, 0);

			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр202_1", Стр202_1);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр202_2", Стр202_2);

			// Персонал основной деятельности (Фактическая численность)
			Стр204_1 = ?(ЗначениеЗаполнено(Выборка.ФактическаяЗаКвартал), Выборка.ФактическаяЗаКвартал, 0);
			Стр204_2 = ?(ЗначениеЗаполнено(Выборка.ФактическаяСНачалаГода), Выборка.ФактическаяСНачалаГода, 0);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр204_1", Стр204_1);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр204_2", Стр204_2);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Раздел II.
	// Определим фонд заработной платы и фактически отработанное количество часов
	// Оплату отпусков берем по периоду действия (если ПериодДействия >= ПериодРегистрации), 
	// остальные виды - по периоду регистрации
	// (см. п. 38 Инструкции)
	
	Если РасчетНаРегистрах Тогда

		ФондЗаработнойПлатыТекст = 
		"ВЫБРАТЬ
		|	ОсновныеНачисления.ФизЛицо КАК ФизЛицо,
		|	ВЫБОР
		|		КОГДА ОсновныеНачисления.ВидРасчета.СпособРасчета = &парамПоСреднемуЗаработкуДляОтпуска
		|				И ОсновныеНачисления.ПериодДействия >= ОсновныеНачисления.ПериодРегистрации
		|			ТОГДА НАЧАЛОПЕРИОДА(ОсновныеНачисления.ПериодДействия, МЕСЯЦ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ОсновныеНачисления.ПериодРегистрации, МЕСЯЦ)
		|	КОНЕЦ КАК НачалоМесяца,
		|	ОсновныеНачисления.Результат КАК Результат,
		|	ВЫБОР
		|		КОГДА ОсновныеНачисления.ВидРасчета.СпособРасчета В (&парамПоДоговорам)
		|			ТОГДА ОсновныеНачисления.Результат
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РезультатПоДоговору,
		|	ОсновныеНачисления.ОтработаноЧасов КАК ОтработаноЧасов,
		|	ВЫБОР
		|		КОГДА НЕ РаботникиОрганизаций.Должность ЕСТЬ NULL 
		|				И РаботникиОрганизаций.Должность.ВидДеятельности <> ЗНАЧЕНИЕ(Справочник.ВидыДеятельности.ПустаяСсылка)
		|			ТОГДА РаботникиОрганизаций.Должность.ВидДеятельности
		|		ИНАЧЕ &парамОсновнойВидДеятельности
		|	КОНЕЦ КАК ВидДеятельностиРаботника
		|
		|ПОМЕСТИТЬ ВТ_ФЗП
		|
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период,
		|				РаботникиОрганизаций." + ?(РасчетПоСотрудникам, "Сотрудник КАК Сотрудник", "ФизЛицо КАК ФизЛицо,
		|				РаботникиОрганизаций.Приказ КАК Приказ") + "
		|			ИЗ
		|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|					ПО " + ?(РасчетПоСотрудникам, " 
		|						ОсновныеНачисления.Сотрудник = РаботникиОрганизаций.Сотрудник", "
		|						ОсновныеНачисления.ФизЛицо = РаботникиОрганизаций.ФизЛицо
		|						И ОсновныеНачисления.Приказ = РаботникиОрганизаций.Приказ") + "
		|						И ОсновныеНачисления.Организация = РаботникиОрганизаций.Организация
		|						И ОсновныеНачисления.ПериодДействияКонец >= РаботникиОрганизаций.Период
		|						И ОсновныеНачисления.ОбособленноеПодразделение В(&парамСписокСтруктурныхЕдиниц)
		|						И (ОсновныеНачисления.ПериодРегистрации МЕЖДУ &парамНачГода И &парамПериодПо
		|									И (ОсновныеНачисления.ВидРасчета.СпособРасчета <> &парамПоСреднемуЗаработкуДляОтпуска
		|										ИЛИ ОсновныеНачисления.ПериодДействия < ОсновныеНачисления.ПериодРегистрации)
		|								ИЛИ ОсновныеНачисления.ПериодДействия МЕЖДУ &парамНачГода И &парамПериодПо
		|									И ОсновныеНачисления.ВидРасчета.СпособРасчета = &парамПоСреднемуЗаработкуДляОтпуска
		|									И ОсновныеНачисления.ПериодДействия >= ОсновныеНачисления.ПериодРегистрации)
		|						И ОсновныеНачисления.ВидРасчета.ФондВыплат.ФондЗаработнойПлаты
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РаботникиОрганизаций." + ?(РасчетПоСотрудникам, "Сотрудник", "ФизЛицо,
		|				РаботникиОрганизаций.Приказ") + ") КАК ПериодыРаботников
		|
		|			ПО " + ?(РасчетПоСотрудникам, "РаботникиОрганизаций.Сотрудник = ПериодыРаботников.Сотрудник", "
		|				РаботникиОрганизаций.ФизЛицо = ПериодыРаботников.ФизЛицо
		|				И РаботникиОрганизаций.Приказ = ПериодыРаботников.Приказ") + "
		|				И РаботникиОрганизаций.Период = ПериодыРаботников.Период
		|
		|		ПО " + ?(РасчетПоСотрудникам, "ОсновныеНачисления.Сотрудник = РаботникиОрганизаций.Сотрудник", "
		|			ОсновныеНачисления.ФизЛицо = РаботникиОрганизаций.ФизЛицо
		|			И ОсновныеНачисления.Приказ = РаботникиОрганизаций.Приказ") + "
		|ГДЕ
		|	ОсновныеНачисления.ОбособленноеПодразделение В(&парамСписокСтруктурныхЕдиниц)
		|	И (ОсновныеНачисления.ПериодРегистрации МЕЖДУ &парамНачГода И &парамПериодПо
		|				И (ОсновныеНачисления.ВидРасчета.СпособРасчета <> &парамПоСреднемуЗаработкуДляОтпуска
		|					ИЛИ ОсновныеНачисления.ПериодДействия < ОсновныеНачисления.ПериодРегистрации)
		|			ИЛИ ОсновныеНачисления.ПериодДействия МЕЖДУ &парамНачГода И &парамПериодПо
		|				И ОсновныеНачисления.ВидРасчета.СпособРасчета = &парамПоСреднемуЗаработкуДляОтпуска
		|				И ОсновныеНачисления.ПериодДействия >= ОсновныеНачисления.ПериодРегистрации)
		|	И ОсновныеНачисления.ВидРасчета.ФондВыплат.ФондЗаработнойПлаты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДополнительныеНачисления.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ),
		|	ДополнительныеНачисления.Результат,
		|	ВЫБОР
		|		КОГДА ДополнительныеНачисления.ВидРасчета.СпособРасчета В (&парамПоДоговорам)
		|			ТОГДА ДополнительныеНачисления.Результат
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	0,
		|	ВЫБОР
		|		КОГДА НЕ РаботникиОрганизаций.Должность ЕСТЬ NULL 
		|				И РаботникиОрганизаций.Должность.ВидДеятельности <> ЗНАЧЕНИЕ(Справочник.ВидыДеятельности.ПустаяСсылка)
		|			ТОГДА РаботникиОрганизаций.Должность.ВидДеятельности
		|		КОГДА НЕ ДоговорникиОрганизаций.Должность ЕСТЬ NULL 
		|				И ДоговорникиОрганизаций.Должность <> ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка)
		|				И ДоговорникиОрганизаций.Должность.ВидДеятельности <> ЗНАЧЕНИЕ(Справочник.ВидыДеятельности.ПустаяСсылка)
		|			ТОГДА ДоговорникиОрганизаций.Должность.ВидДеятельности
		|		ИНАЧЕ &парамОсновнойВидДеятельности
		|	КОНЕЦ
		|ИЗ
		|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисления
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период,
		|				РаботникиОрганизаций." + ?(РасчетПоСотрудникам, "Сотрудник КАК Сотрудник", "ФизЛицо КАК ФизЛицо,
		|				РаботникиОрганизаций.Приказ КАК Приказ") + "
		|			ИЗ
		|				РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисления
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|					ПО " + ?(РасчетПоСотрудникам, " 
		|						ДополнительныеНачисления.Сотрудник = РаботникиОрганизаций.Сотрудник", "
		|						ДополнительныеНачисления.ФизЛицо = РаботникиОрганизаций.ФизЛицо
		|						И ДополнительныеНачисления.Приказ = РаботникиОрганизаций.Приказ") + "
		|						И ДополнительныеНачисления.Организация = РаботникиОрганизаций.Организация
		|						И ДополнительныеНачисления.БазовыйПериодКонец >= РаботникиОрганизаций.Период
		|						И ДополнительныеНачисления.ОбособленноеПодразделение В(&парамСписокСтруктурныхЕдиниц)
		|						И ДополнительныеНачисления.ПериодРегистрации МЕЖДУ &парамНачГода И &парамПериодПо
		|						И ДополнительныеНачисления.ВидРасчета.ФондВыплат.ФондЗаработнойПлаты
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РаботникиОрганизаций." + ?(РасчетПоСотрудникам, "Сотрудник", "ФизЛицо,
		|				РаботникиОрганизаций.Приказ") + ") КАК ПериодыРаботников
		|			ПО " + ?(РасчетПоСотрудникам, "РаботникиОрганизаций.Сотрудник = ПериодыРаботников.Сотрудник", "
		|				РаботникиОрганизаций.ФизЛицо = ПериодыРаботников.ФизЛицо
		|				И РаботникиОрганизаций.Приказ = ПериодыРаботников.Приказ") + "
		|				И РаботникиОрганизаций.Период = ПериодыРаботников.Период
		|
		|		ПО " + ?(РасчетПоСотрудникам, "ДополнительныеНачисления.Сотрудник = РаботникиОрганизаций.Сотрудник", "
		|			ДополнительныеНачисления.ФизЛицо = РаботникиОрганизаций.ФизЛицо
		|			И ДополнительныеНачисления.Приказ = РаботникиОрганизаций.Приказ") + "
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоговорникиОрганизаций КАК ДоговорникиОрганизаций
		|		ПО " + ?(РасчетПоСотрудникам, "ДополнительныеНачисления.Сотрудник = ДоговорникиОрганизаций.Сотрудник", "
		|			ДополнительныеНачисления.ФизЛицо = ДоговорникиОрганизаций.ФизЛицо") + "
		|			И ДополнительныеНачисления.ДокументОснование = ДоговорникиОрганизаций.Договор
		|			И ДополнительныеНачисления.Организация = ДоговорникиОрганизаций.Организация
		|ГДЕ
		|	ДополнительныеНачисления.ОбособленноеПодразделение В(&парамСписокСтруктурныхЕдиниц)
		|	И ДополнительныеНачисления.ПериодРегистрации МЕЖДУ &парамНачГода И &парамПериодПо
		|	И ДополнительныеНачисления.ВидРасчета.ФондВыплат.ФондЗаработнойПлаты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СНСведенияОДоходах.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ),
		|	СНСведенияОДоходах.СуммаДохода,
		|	ВЫБОР
		|		КОГДА СНСведенияОДоходах.ВидРасчета.СпособРасчета В (&парамПоДоговорам)
		|			ТОГДА СНСведенияОДоходах.СуммаДохода
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	0,
		|	&парамОсновнойВидДеятельности
		|ИЗ
		|	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
		|ГДЕ
		|	СНСведенияОДоходах.Организация В(&парамСписокСтруктурныхЕдиниц)
		|	И СНСведенияОДоходах.ПериодРегистрации МЕЖДУ &парамНачГода И &парамПериодПо
		|	И СНСведенияОДоходах.ВидРасчета.ФондВыплат.ФондЗаработнойПлаты
		|	И СНСведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения";
		
	Иначе
	
		ФондЗаработнойПлатыТекст = "
		|ВЫБРАТЬ 
		|	ОсновныеНачисления.ФизЛицо КАК ФизЛицо,
		|	ВЫБОР
		|		КОГДА ОсновныеНачисления.ВидРасчета.СпособРасчета = &парамПоСреднемуЗаработкуДляОтпуска 
		|				И НАЧАЛОПЕРИОДА(ОсновныеНачисления.ДатаНачала, МЕСЯЦ) >= НАЧАЛОПЕРИОДА(ОсновныеНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)
		|			ТОГДА НАЧАЛОПЕРИОДА(ОсновныеНачисления.ДатаНачала, МЕСЯЦ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ОсновныеНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)
		|	КОНЕЦ КАК НачалоМесяца,
		|	ОсновныеНачисления.Результат КАК Результат,
		|	0 КАК РезультатПоДоговору,
		|	ВЫБОР 
		|		КОГДА ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени ТОГДА ОсновныеНачисления.ОтработаноЧасов
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОтработаноЧасов
		|
		|ПОМЕСТИТЬ ВТ_ФЗП
		|
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК ОсновныеНачисления
		|ГДЕ
		|	ОсновныеНачисления.Ссылка.Проведен И
		|	ОсновныеНачисления.Ссылка.Организация В (&парамСписокСтруктурныхЕдиниц) И
		|	((ОсновныеНачисления.Ссылка.ПериодРегистрации МЕЖДУ &парамНачГода И &парамПериодПо И
		|	  (ОсновныеНачисления.ВидРасчета.СпособРасчета <> &парамПоСреднемуЗаработкуДляОтпуска ИЛИ
		|	   НАЧАЛОПЕРИОДА(ОсновныеНачисления.ДатаНачала, МЕСЯЦ) < ОсновныеНачисления.Ссылка.ПериодРегистрации)) ИЛИ 
		|	 (НАЧАЛОПЕРИОДА(ОсновныеНачисления.ДатаНачала, МЕСЯЦ) МЕЖДУ &парамНачГода И &парамПериодПо И
		|	  ОсновныеНачисления.ВидРасчета.СпособРасчета = &парамПоСреднемуЗаработкуДляОтпуска И
		|	  НАЧАЛОПЕРИОДА(ОсновныеНачисления.ДатаНачала, МЕСЯЦ) >= ОсновныеНачисления.Ссылка.ПериодРегистрации)) И
		|	ЕСТЬNULL(ОсновныеНачисления.ВидРасчета.ФондВыплат.ФондЗаработнойПлаты, ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// прочие доходы, зарегистрированные в целях налогообложения
		|ВЫБРАТЬ
		|	СНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) КАК НачалоМесяца,
		|	СНСведенияОДоходах.СуммаДохода КАК Результат,
		|	0 КАК РезультатПоДоговору,
		|	0 КАК ОтработаноЧасов
		|ИЗ
		|	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
		|ГДЕ
		|	СНСведенияОДоходах.Организация В (&парамСписокСтруктурныхЕдиниц) И
		|	СНСведенияОДоходах.ПериодРегистрации МЕЖДУ &парамНачГода И &парамПериодПо И
		|	ЕСТЬNULL(СНСведенияОДоходах.ВидРасчета.ФондВыплат.ФондЗаработнойПлаты, ЛОЖЬ) И
		|	СНСведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения
		|";
		
	КонецЕсли;
	
	// Выделим ФЗП и часы за отчетный месяц и с начала года в целом по организации
	ФондЗаработнойПлатыТекст = "
	|" + ФондЗаработнойПлатыТекст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	СУММА(ВЫБОР КОГДА ФЗП.НачалоМесяца >= &парамПериодС ТОГДА ФЗП.Результат ИНАЧЕ 0 КОНЕЦ) КАК ФЗПЗаКвартал,
	|	СУММА(ФЗП.Результат) КАК ФЗПСНачалаГода,
	|
	|
	|	СУММА(ВЫБОР КОГДА ФЗП.НачалоМесяца >= &парамПериодС ТОГДА ФЗП.РезультатПоДоговору ИНАЧЕ 0 КОНЕЦ) КАК ФЗППоДоговоруЗаКвартал,
	|	СУММА(ФЗП.РезультатПоДоговору) КАК ФЗППоДоговоруСНачалаГода,
	|
	|	" + ?(РасчетНаРегистрах, "
	|	СУММА(ВЫБОР КОГДА ФЗП.НачалоМесяца >= &парамПериодС И ФЗП.ВидДеятельностиРаботника = &парамОсновнойВидДеятельности ТОГДА ФЗП.Результат ИНАЧЕ 0 КОНЕЦ) КАК ФЗПОснЗаКвартал,
	|	СУММА(ВЫБОР КОГДА ФЗП.ВидДеятельностиРаботника = &парамОсновнойВидДеятельности ТОГДА ФЗП.Результат ИНАЧЕ 0 КОНЕЦ) КАК ФЗПОснСНачалаГода,
	|
	|
	|	СУММА(ВЫБОР КОГДА ФЗП.НачалоМесяца >= &парамПериодС И ФЗП.ВидДеятельностиРаботника = &парамОсновнойВидДеятельности ТОГДА ФЗП.РезультатПоДоговору ИНАЧЕ 0 КОНЕЦ) КАК ФЗПОснПоДоговоруЗаКвартал,
	|	СУММА(ВЫБОР КОГДА ФЗП.ВидДеятельностиРаботника = &парамОсновнойВидДеятельности ТОГДА ФЗП.РезультатПоДоговору ИНАЧЕ 0 КОНЕЦ) КАК ФЗПОснПоДоговоруСНачалаГода, ", "") + "
	|
	|
	|	СУММА(ВЫБОР КОГДА ФЗП.НачалоМесяца >= &парамПериодС ТОГДА ФЗП.ОтработаноЧасов ИНАЧЕ 0 КОНЕЦ) КАК ЧасовЗаКвартал,
	|	СУММА(ФЗП.ОтработаноЧасов) КАК ЧасовСНачалаГода
	|
	|ИЗ
	|	ВТ_ФЗП КАК ФЗП
	|";
	
	Запрос.Текст = ФондЗаработнойПлатыТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Выводим данные по ФЗП и часам (в тыс. ед), а также данные по средней заработной плате
	Если Выборка.Следующий() Тогда
		
		// Фонд заработной платы
		Стр205_1 = ?(ЗначениеЗаполнено(Выборка.ФЗПЗаКвартал), Выборка.ФЗПЗаКвартал / 1000, 0);
		Стр205_2 = ?(ЗначениеЗаполнено(Выборка.ФЗПСНачалаГода), Выборка.ФЗПСНачалаГода / 1000, 0);

		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр205_1", Стр205_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр205_2", Стр205_2);
		
		Если РасчетНаРегистрах Тогда
			
			// ФЗП персонала основной дейстельности
			Стр206_1 = ?(ЗначениеЗаполнено(Выборка.ФЗПОснЗаКвартал), Выборка.ФЗПОснЗаКвартал / 1000, 0);
			Стр206_2 = ?(ЗначениеЗаполнено(Выборка.ФЗПОснСНачалаГода), Выборка.ФЗПОснСНачалаГода / 1000, 0);

			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр206_1",Стр206_1);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр206_2",Стр206_2);
			
		Иначе 
			
			// ФЗП персонала основной дейстельности
			Стр206_1 = ?(ЗначениеЗаполнено(Выборка.ФЗПЗаКвартал), Выборка.ФЗПЗаКвартал / 1000, 0);
			Стр206_2 = ?(ЗначениеЗаполнено(Выборка.ФЗПСНачалаГода), Выборка.ФЗПСНачалаГода / 1000, 0);
			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр206_1",Стр206_1);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр206_2",Стр206_2);
			
		КонецЕсли;
				
		// Определим расчетное количество работников по договорам ГПХ (см. пп.3 п.23 Инструкции)
		
		// за месяц
		СреднемесячнаяЗарплатаСписочногоСостава = ?(ЗначениеЗаполнено(Выборка.ФЗПЗаКвартал) И Стр203_1 <> 0, Окр((Выборка.ФЗПЗаКвартал - Выборка.ФЗППоДоговоруЗаКвартал) / Стр203_1, 2), 0);
		ЧисленностьПоДоговору = ?(ЗначениеЗаполнено(Выборка.ФЗППоДоговоруЗаКвартал) И СреднемесячнаяЗарплатаСписочногоСостава <> 0, Окр(Выборка.ФЗППоДоговоруЗаКвартал / СреднемесячнаяЗарплатаСписочногоСостава), 0);
		
		// добавим к фактической численности
		Стр203_1 = Стр203_1 + ЧисленностьПоДоговору;
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр203_1",Стр203_1);
		
		// с начала года
		СреднемесячнаяЗарплатаСписочногоСоставаСНачГода = ?(ЗначениеЗаполнено(Выборка.ФЗПСНачалаГода) И Стр203_2 <> 0, Окр((Выборка.ФЗПСНачалаГода - Выборка.ФЗППоДоговоруСНачалаГода) / Стр203_2 / Месяц(мДатаКонцаПериодаОтчета), 2), 0);
		ЧисленностьПоДоговоруСНачГода = ?(ЗначениеЗаполнено(Выборка.ФЗППоДоговоруСНачалаГода) И СреднемесячнаяЗарплатаСписочногоСоставаСНачГода <> 0, Окр(Выборка.ФЗППоДоговоруСНачалаГода / СреднемесячнаяЗарплатаСписочногоСоставаСНачГода / Месяц(мДатаКонцаПериодаОтчета)), 0);
		// добавим к фактической численности
		Стр203_2 = Стр203_2 + ЧисленностьПоДоговоруСНачГода;
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр203_2",Стр203_2);
		
		// Среднемесячная заработная плата 
		Стр207_1 = ?(ЗначениеЗаполнено(Выборка.ФЗПЗаКвартал) И Стр203_1 <> 0, Выборка.ФЗПЗаКвартал / Стр203_1 / 3, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр207_1",Стр207_1);

		Стр207_2 = ?(ЗначениеЗаполнено(Выборка.ФЗПСНачалаГода) И Стр203_2 <> 0, Выборка.ФЗПСНачалаГода / Стр203_2 / Месяц(мДатаКонцаПериодаОтчета), 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр207_2",Стр207_2);
		
		// Персонал основной деятельности
		Если РасчетНаРегистрах Тогда
			
			// Добавим работников ГПХ к фактической численности персонала основной деятельности
			
			// за месяц
			СреднемесячнаяЗарплатаСписочногоСостава = ?(ЗначениеЗаполнено(Выборка.ФЗПОснЗаКвартал) И Стр204_1 <> 0, Окр((Выборка.ФЗПОснЗаКвартал - Выборка.ФЗПОснПоДоговоруЗаКвартал) / Стр204_1, 2), 0);
			ЧисленностьПоДоговору = ?(ЗначениеЗаполнено(Выборка.ФЗПОснПоДоговоруЗаКвартал) И СреднемесячнаяЗарплатаСписочногоСостава <> 0, Окр(Выборка.ФЗПОснПоДоговоруЗаКвартал / СреднемесячнаяЗарплатаСписочногоСостава), 0);
			// добавим к фактической численности
			Стр204_1 = Стр204_1 + ЧисленностьПоДоговору; 
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр204_1",Стр204_1);

			// с начала года
			СреднемесячнаяЗарплатаСписочногоСоставаСНачГода = ?(ЗначениеЗаполнено(Выборка.ФЗПОснСНачалаГода) И Стр204_2 <> 0, Окр((Выборка.ФЗПОснСНачалаГода - Выборка.ФЗПОснПоДоговоруСНачалаГода) / Стр204_2 / Месяц(мДатаКонцаПериодаОтчета), 2), 0);
			ЧисленностьПоДоговоруСНачГода = ?(ЗначениеЗаполнено(Выборка.ФЗПОснПоДоговоруСНачалаГода) И СреднемесячнаяЗарплатаСписочногоСоставаСНачГода <> 0, Окр(Выборка.ФЗПОснПоДоговоруСНачалаГода / СреднемесячнаяЗарплатаСписочногоСоставаСНачГода / Месяц(мДатаКонцаПериодаОтчета)), 0);
			// добавим к фактической численности
			Стр204_2 = Стр204_2 + ЧисленностьПоДоговоруСНачГода;
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр204_2",Стр204_2);
			
		Иначе 
			
			// Добавим работников ГПХ к фактической численности персонала основной деятельности
			Стр204_1 = Стр204_1 + ЧисленностьПоДоговору;  
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр204_1",Стр204_1);

			Стр204_2 = Стр204_2 + ЧисленностьПоДоговоруСНачГода;
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр204_2",Стр204_2);
			
		КонецЕсли;
		
		// Фактически отработанных человеко-часов
		Стр209_1 = ?(ЗначениеЗаполнено(Выборка.ЧасовЗаКвартал), Выборка.ЧасовЗаКвартал / 1000, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр209_1",Стр209_1);

		Стр209_2 = ?(ЗначениеЗаполнено(Выборка.ЧасовСНачалаГода), Выборка.ЧасовСНачалаГода / 1000, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр209_2",Стр209_2);
	
	КонецЕсли;
	
	// Раздел III. Движение работников, численность работающих неполное время и наличие вакансий
	
	// Данные о численности на начало квартала и на начало года
	ЧисленностьНаНачалоТекст = "
	|ВЫБРАТЬ 
	|	1 КАК НаНачГода,
	|	0 КАК НаНачМесяца
	|
	|ПОМЕСТИТЬ ВТ_ЧисленностьНаНачало
	|                                                                                           	
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&парамНачГода,
	|			" + ?(РасчетПоСотрудникам, "Сотрудник.", "") + "ВидЗанятости <> &парамВнутреннееСовместительство И
	|			" + ?(РасчетПоСотрудникам, "Сотрудник.", "") + "ВидЗанятости <> &парамСовместительство) КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУвольнение
	|	И РаботникиОрганизации.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц)
	|	И ВЫБОР
	|		КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамПриемНаРаботу
	|			ТОГДА РаботникиОрганизации.Период <= ДОБАВИТЬКДАТЕ(&парамНачГода, ДЕНЬ, -1)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0 КАК НаНачГода,
	|	1 КАК НаНачМесяца
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&парамПериодС,
	|			" + ?(РасчетПоСотрудникам, "Сотрудник.", "") + "ВидЗанятости <> &парамВнутреннееСовместительство И
	|			" + ?(РасчетПоСотрудникам, "Сотрудник.", "") + "ВидЗанятости <> &парамСовместительство) КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУвольнение
	|	И РаботникиОрганизации.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц)
	|	И ВЫБОР
	|		КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамПриемНаРаботу
	|			ТОГДА РаботникиОрганизации.Период <= ДОБАВИТЬКДАТЕ(&парамПериодС, ДЕНЬ, -1)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|";	
	
	Запрос.Текст = ЧисленностьНаНачалоТекст;
		
	ЧисленностьНаНачалоТекст = "
	|" + ЧисленностьНаНачалоТекст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	СУММА(Численность.НаНачГода) КАК НаНачГода,
	|	СУММА(Численность.НаНачМесяца) КАК НаНачМесяца
	|ИЗ
	|	ВТ_ЧисленностьНаНачало КАК Численность
	|";
	
	Запрос.Текст = ЧисленностьНаНачалоТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Выводим данные на начало
	Если Выборка.Следующий() Тогда
		
		// Списочная численность работников на начало квартала и года
		Стр301_1 =  ?(ЗначениеЗаполнено(Выборка.НаНачМесяца), Выборка.НаНачМесяца, 0);	
		Стр301_2 =  ?(ЗначениеЗаполнено(Выборка.НаНачГода), Выборка.НаНачГода, 0);	

		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр301_1",Стр301_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр301_2",Стр301_2);
		
	КонецЕсли;	
	
	// Принято и уволено сотрудников за период
	// Движение работников (только по основному виду занятости и как целые единицы)
	ДвижениеРаботниковТекст = "
	|ВЫБРАТЬ 
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУвольнение
	|			ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
	|		ИНАЧЕ РаботникиОрганизации.Период
	|	КОНЕЦ КАК Период,
	|	ВЫБОР КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамПриемНаРаботу ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК КоличествоПринятых,
	|	ВЫБОР КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУвольнение ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК КоличествоУволенных,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУвольнение
	|				И РаботникиОрганизации.СтатьяЗаконаОТрудеРК ССЫЛКА Справочник.ОснованияУвольненияИзОрганизации
	|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(РаботникиОрганизации.СтатьяЗаконаОТрудеРК КАК Справочник.ОснованияУвольненияИзОрганизации).ПричинаУвольненияИзОрганизации, ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.ДругиеПричины))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.ДругиеПричины)
	|	КОНЕЦ КАК ПричинаУвольнения
	|
	|ПОМЕСТИТЬ ВТ_ДвижениеРаботников
	|
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|
	|ГДЕ
	|	(РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУвольнение
	|			И РаботникиОрганизации.Период МЕЖДУ &парамНачГода И &парамПериодПо
	|		ИЛИ РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУвольнение
	|			И РаботникиОрганизации.Период МЕЖДУ ДОБАВИТЬКДАТЕ(&парамНачГода, ДЕНЬ, 1) И ДОБАВИТЬКДАТЕ(&парамПериодПо, ДЕНЬ, 1)) И
	|	РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамПеремещение И
	|	РаботникиОрганизации.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц) И
	|	(РаботникиОрганизации." + ?(РасчетПоСотрудникам, "Сотрудник.", "") + "ВидЗанятости <> &парамВнутреннееСовместительство) И
	|	(РаботникиОрганизации." + ?(РасчетПоСотрудникам, "Сотрудник.", "") + "ВидЗанятости <> &парамСовместительство)
	|";
	
	// Суммируем данные за месяц и с начала года
	ДвижениеРаботниковТекст = "
	|" + ДвижениеРаботниковТекст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.Период >= &парамПериодС ТОГДА ДвижениеРаботников.КоличествоПринятых 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ПринятоЗаКвартал,
	|	СУММА(ДвижениеРаботников.КоличествоПринятых) КАК ПринятоСНачалаГода,
	|
	|
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.Период >= &парамПериодС ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоЗаКвартал,
	|	СУММА(ДвижениеРаботников.КоличествоУволенных) КАК ВыбылоСНачалаГода,
	|
	|
	|	" + ?(РасчетНаРегистрах, "
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.Период >= &парамПериодС 
	|					И ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.СокращениеЧисленности)) ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоПоСокращениюЗаКвартал,
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.СокращениеЧисленности)) ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоПоСокращениюСНачалаГода,", "
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.Период >= &парамПериодС 
	|					И ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.СокращениеЧисленностиИлиЛиквидацияПредприятия)) ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоПоСокращениюЗаКвартал,
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.СокращениеЧисленностиИлиЛиквидацияПредприятия)) ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоПоСокращениюСНачалаГода,") + "
	|
	|
	|	" + ?(РасчетНаРегистрах, "
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.Период >= &парамПериодС 
	|					И ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.ЛиквидацияПредприятия)) ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоВСвязиСЛиквидациейЗаКвартал,
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.ЛиквидацияПредприятия)) ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоВСвязиСЛиквидациейСНачалаГода,", "
	|	0 КАК ВыбылоВСвязиСЛиквидациейЗаКвартал,
	|	0 КАК ВыбылоВСвязиСЛиквидациейСНачалаГода,") + "
	|
	|
	|	" + ?(РасчетНаРегистрах, "
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.Период >= &парамПериодС 
	|					И ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.ПоСобственномуЖеланию)) ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоПоСобственномуЗаКвартал,
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.ПоСобственномуЖеланию)) ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоПоСобственномуСНачалаГода,", "
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.Период >= &парамПериодС 
	|					И ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.ПоПричинамТекучести)) ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоПоСобственномуЗаКвартал,
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.ПоПричинамТекучести)) ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоПоСобственномуСНачалаГода,") + "
	|
	|
	|	" + ?(РасчетНаРегистрах, "
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.Период >= &парамПериодС 
	|					И ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.НесоответствиеДолжности)) ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоПоНесоответствиюДолжностиЗаКвартал,
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.НесоответствиеДолжности)) ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоПоНесоответствиюДолжностиСНачалаГода,", "
	|	0 КАК ВыбылоПоНесоответствиюДолжностиЗаКвартал,
	|	0 КАК ВыбылоПоНесоответствиюДолжностиСНачалаГода,") + "
    |
	|
	|	" + ?(РасчетНаРегистрах, "
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.Период >= &парамПериодС 
	|					И ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.НарушениеДисциплины)) ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоПоНарушениюДисциплиныЗаКвартал,
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.НарушениеДисциплины)) ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоПоНарушениюДисциплиныСНачалаГода,", "
	|	0 КАК ВыбылоПоНарушениюДисциплиныЗаКвартал,
	|	0 КАК ВыбылоПоНарушениюДисциплиныСНачалаГода,") + "
    |
	|
	|	" + ?(РасчетНаРегистрах, "
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.Период >= &парамПериодС 
	|					И ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.ПрочиеОбстоятельства)) ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоПоПрочимОбстоятельствамЗаКвартал,
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.ПрочиеОбстоятельства)) ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоПоПрочимОбстоятельствамСНачалаГода,", "
	|	0 КАК ВыбылоПоПрочимОбстоятельствамЗаКвартал,
	|	0 КАК ВыбылоПоПрочимОбстоятельствамСНачалаГода,") + "
    |
	|
   	|	" + ?(РасчетНаРегистрах, "
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.Период >= &парамПериодС 
	|					И ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.ЗаПрогул)) ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоЗаПрогулЗаКвартал,
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.ЗаПрогул)) ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоЗаПрогулСНачалаГода,", "
	|	0 КАК ВыбылоЗаПрогулЗаКвартал,
	|	0 КАК ВыбылоЗаПрогулСНачалаГода,") + "
	|
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.Период >= &парамПериодС 
	|					И ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.ДругиеПричины)) 
	|						ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоПоДругимПричинамЗаКвартал,
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.ДругиеПричины)) 
	|				ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоПоДругимПричинамСНачалаГода
	|
	|
	|ИЗ
	|	ВТ_ДвижениеРаботников КАК ДвижениеРаботников 
	|";
	
	Запрос.Текст = ДвижениеРаботниковТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Выводим данные
	Если Выборка.Следующий() Тогда
		
		// Принято работников за отчетный период - всего
		Стр302_1 = ?(ЗначениеЗаполнено(Выборка.ПринятоЗаКвартал), Выборка.ПринятоЗаКвартал, 0);
		Стр302_2 = ?(ЗначениеЗаполнено(Выборка.ПринятоСНачалаГода), Выборка.ПринятоСНачалаГода, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр302_1",Стр302_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр302_2",Стр302_2);
		
		// Выбыло работников за отчетный период - всего
		Стр303_1 = ?(ЗначениеЗаполнено(Выборка.ВыбылоЗаКвартал), Выборка.ВыбылоЗаКвартал, 0);
		Стр303_2 = ?(ЗначениеЗаполнено(Выборка.ВыбылоСНачалаГода), Выборка.ВыбылоСНачалаГода, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр303_1",Стр303_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр303_2",Стр303_2);
		
		// в том числе
		//		в связи с сокращением численности персонала
		Стр304_1 = ?(ЗначениеЗаполнено(Выборка.ВыбылоПоСокращениюЗаКвартал), Выборка.ВыбылоПоСокращениюЗаКвартал, 0);
		Стр304_2 = ?(ЗначениеЗаполнено(Выборка.ВыбылоПоСокращениюСНачалаГода), Выборка.ВыбылоПоСокращениюСНачалаГода, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр304_1",Стр304_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр304_2",Стр304_2);
		
		//		в связи с ликвидацией предприятия
		Стр305_1 = ?(ЗначениеЗаполнено(Выборка.ВыбылоВСвязиСЛиквидациейЗаКвартал), Выборка.ВыбылоВСвязиСЛиквидациейЗаКвартал, 0);
		Стр305_2 = ?(ЗначениеЗаполнено(Выборка.ВыбылоВСвязиСЛиквидациейСНачалаГода), Выборка.ВыбылоВСвязиСЛиквидациейСНачалаГода, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр305_1",Стр305_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр305_2",Стр305_2);
		
		//		в связи с несоответствием занимаемой должности 
		Стр306_1 = ?(ЗначениеЗаполнено(Выборка.ВыбылоПоНесоответствиюДолжностиЗаКвартал), Выборка.ВыбылоПоНесоответствиюДолжностиЗаКвартал, 0);
		Стр306_2 = ?(ЗначениеЗаполнено(Выборка.ВыбылоПоНесоответствиюДолжностиСНачалаГода), Выборка.ВыбылоПоНесоответствиюДолжностиСНачалаГода, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр306_1",Стр306_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр306_2",Стр306_2);
		
		//		в связи с нарушением трудовой дисциплины
		Стр307_1 = ?(ЗначениеЗаполнено(Выборка.ВыбылоПоНарушениюДисциплиныЗаКвартал), Выборка.ВыбылоПоНарушениюДисциплиныЗаКвартал, 0);
		Стр307_2 = ?(ЗначениеЗаполнено(Выборка.ВыбылоПоНарушениюДисциплиныСНачалаГода), Выборка.ВыбылоПоНарушениюДисциплиныСНачалаГода, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр307_1",Стр307_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр307_2",Стр307_2);
		
		//		в связи с обстоятельствами не зависящими от воли сторон
		Стр308_1 = ?(ЗначениеЗаполнено(Выборка.ВыбылоПоПрочимОбстоятельствамЗаКвартал), Выборка.ВыбылоПоПрочимОбстоятельствамЗаКвартал, 0);
		Стр308_2 = ?(ЗначениеЗаполнено(Выборка.ВыбылоПоПрочимОбстоятельствамСНачалаГода), Выборка.ВыбылоПоПрочимОбстоятельствамСНачалаГода, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр308_1",Стр308_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр308_2",Стр308_2);
		
		//		по собственному желанию
		Стр309_1 = ?(ЗначениеЗаполнено(Выборка.ВыбылоПоСобственномуЗаКвартал), Выборка.ВыбылоПоСобственномуЗаКвартал, 0);
		Стр309_2 = ?(ЗначениеЗаполнено(Выборка.ВыбылоПоСобственномуСНачалаГода), Выборка.ВыбылоПоСобственномуСНачалаГода, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр309_1",Стр309_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр309_2",Стр309_2);
		
		//		по другим причинам
		Стр310_1 = ?(ЗначениеЗаполнено(Выборка.ВыбылоПоДругимПричинамЗаКвартал), Выборка.ВыбылоПоДругимПричинамЗаКвартал, 0) + ?(ЗначениеЗаполнено(Выборка.ВыбылоЗаПрогулЗаКвартал), Выборка.ВыбылоЗаПрогулЗаКвартал, 0);
		Стр310_2 = ?(ЗначениеЗаполнено(Выборка.ВыбылоПоДругимПричинамСНачалаГода), Выборка.ВыбылоПоДругимПричинамСНачалаГода, 0) + ?(ЗначениеЗаполнено(Выборка.ВыбылоЗаПрогулСНачалаГода), Выборка.ВыбылоЗаПрогулСНачалаГода, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр310_1",Стр310_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр310_2",Стр310_2);
	КонецЕсли;	

	// Данные о численности на конец месяца и на конец года одновременно
	ЧисленностьНаКонецТекст = "
	|ВЫБРАТЬ 
	|	СУММА(1) КАК НаКонец
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&парамПослеКон,
	|			" + ?(РасчетПоСотрудникам, "Сотрудник.", "") + "ВидЗанятости <> &парамВнутреннееСовместительство И
	|			" + ?(РасчетПоСотрудникам, "Сотрудник.", "") + "ВидЗанятости <> &парамСовместительство) КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУвольнение
	|	И РаботникиОрганизации.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц)
	|	И ВЫБОР
	|		КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамПриемНаРаботу
	|			ТОГДА РаботникиОрганизации.Период <= &парамПериодПо
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|";	
		
	Запрос.Текст = ЧисленностьНаКонецТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Выводим данные
	Если Выборка.Следующий() Тогда
		
		// Списочная численность работников на конец отчетного периода - всего
		Стр311_1 = ?(ЗначениеЗаполнено(Выборка.НаКонец), Выборка.НаКонец, 0);
		Стр311_2 = ?(ЗначениеЗаполнено(Выборка.НаКонец), Выборка.НаКонец, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр311_1",Стр311_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр311_2",Стр311_2);
	
	КонецЕсли;
	
	Если РасчетНаРегистрах Тогда
	
		// Определим наличие вакансий
		ВакансииТекст = "
		|ВЫБРАТЬ 
		|	СУММА(ШтатноеРасписание.КоличествоСтавок - ЕСТЬNULL(ЗанятыеШтатныеЕдиницы.КоличествоСтавокОстаток, 0)) КАК КоличествоВакансий
		|ИЗ
		|	РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(
		|			&парамПериодПо, 
		|			ПодразделениеОрганизации.Владелец В (&парамСписокСтруктурныхЕдиниц)) КАК ШтатноеРасписание
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗанятыеШтатныеЕдиницыОрганизаций.Остатки(
		|			&парамПослеКон,
		|			ПодразделениеОрганизации.Владелец В (&парамСписокСтруктурныхЕдиниц)) КАК ЗанятыеШтатныеЕдиницы
		|		ПО ШтатноеРасписание.Должность = ЗанятыеШтатныеЕдиницы.Должность
		|		   И ШтатноеРасписание.ПодразделениеОрганизации = ЗанятыеШтатныеЕдиницы.ПодразделениеОрганизации
		|		   И ШтатноеРасписание.ТарифныйРазряд = ЗанятыеШтатныеЕдиницы.ТарифныйРазряд
		|ГДЕ
		|	ШтатноеРасписание.КоличествоСтавок - ЕСТЬNULL(ЗанятыеШтатныеЕдиницы.КоличествоСтавокОстаток, 0) > 0
		|";
		
		Запрос.Текст = ВакансииТекст;
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Стр312_1 = ?(ЗначениеЗаполнено(Выборка.КоличествоВакансий), Выборка.КоличествоВакансий, 0);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр312_1",Стр312_1);
		КонецЕсли;
		
		// Численность работников, работающих неполное рабочее время заполняется в среднем за отчетный период
		
		// Работающие неполный рабочий день или неполную рабочую неделю
		// (если один и тот же работник имел более одного отпуска в связи с простоем за период, то показывается только один раз)
		Запрос.Текст = "
		|ВЫБРАТЬ 
		|		&парамНачГода КАК Период,
		|		РаботникиОрганизации." + ?(РасчетПоСотрудникам, "Сотрудник.", "") + "ФизЛицо КАК ФизЛицо,
		|		ВЫБОР
		|			КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамПеремещение
		|					И РаботникиОрганизации.СтатьяЗаконаОТрудеРК ССЫЛКА Справочник.ОснованияПеремещенияПереводаВОрганизации
		|				ТОГДА ЕСТЬNULL(РаботникиОрганизации.СтатьяЗаконаОТрудеРК.ПереводВСвязиССокращениемОбъемаПроизводства, ЛОЖЬ)
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПереводВСвязиССокращениемОбъемаПроизводства
		|
		|ПОМЕСТИТЬ ВТ_РаботникиОрганизации1
		|
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|				&парамНачГода,
		|				" + ?(РасчетПоСотрудникам, "Сотрудник.", "") + "ВидЗанятости <> &парамВнутреннееСовместительство) КАК РаботникиОрганизации
		|	ГДЕ
		|		РаботникиОрганизации.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц)
		|		И РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУвольнение
		|		И ЕСТЬNULL(РаботникиОрганизации.ГрафикРаботы.СокращенноеРабочееВремя, ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|		РаботникиОрганизации.Период,
		|		РаботникиОрганизации." + ?(РасчетПоСотрудникам, "Сотрудник.", "") + "ФизЛицо,
		|		ВЫБОР
		|			КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамПеремещение
		|					И РаботникиОрганизации.СтатьяЗаконаОТрудеРК ССЫЛКА Справочник.ОснованияПеремещенияПереводаВОрганизации
		|				ТОГДА ЕСТЬNULL(РаботникиОрганизации.СтатьяЗаконаОТрудеРК.ПереводВСвязиССокращениемОбъемаПроизводства, ЛОЖЬ)
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПереводВСвязиССокращениемОбъемаПроизводства
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|	ГДЕ
		|		РаботникиОрганизации.Период МЕЖДУ &парамНачГода И &парамПериодПо
		|		И РаботникиОрганизации.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц)
		|		И РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУвольнение
		|		И РаботникиОрганизации." + ?(РасчетПоСотрудникам, "Сотрудник.", "") + "ВидЗанятости <> &парамВнутреннееСовместительство
		|		И ЕСТЬNULL(РаботникиОрганизации.ГрафикРаботы.СокращенноеРабочееВремя, ЛОЖЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ  
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|							КОГДА РаботникиОрганизации.Период >= &парамПериодС
		|								ТОГДА РаботникиОрганизации.ФизЛицо
		|							ИНАЧЕ NULL
		|						КОНЕЦ) КАК РаботающихНеПолноеВремяЗаКвартал,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РаботникиОрганизации.ФизЛицо) КАК РаботающихНеПолноеВремяСНачалаГода,
		|
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|							КОГДА РаботникиОрганизации.ПереводВСвязиССокращениемОбъемаПроизводства
		|									И РаботникиОрганизации.Период >= &парамПериодС
		|								ТОГДА РаботникиОрганизации.ФизЛицо
		|							ИНАЧЕ NULL
		|						КОНЕЦ) КАК ПереведенныхВСвязиССокращениемОбъемаПроизводстваЗаКвартал,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|							КОГДА РаботникиОрганизации.ПереводВСвязиССокращениемОбъемаПроизводства
		|								ТОГДА РаботникиОрганизации.ФизЛицо
		|							ИНАЧЕ NULL
		|						КОНЕЦ) КАК ПереведенныхВСвязиССокращениемОбъемаПроизводстваСНачалаГода
		|ИЗ
		|	ВТ_РаботникиОрганизации1 КАК РаботникиОрганизации
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			 //Численность работающих неполный рабочий день или неполную рабочую неделю
			 //		всего
			 Стр313_1 = ?(ЗначениеЗаполнено(Выборка.РаботающихНеПолноеВремяЗаКвартал), Выборка.РаботающихНеПолноеВремяЗаКвартал, 0);
			 Стр313_2 = ?(ЗначениеЗаполнено(Выборка.РаботающихНеПолноеВремяСНачалаГода), Выборка.РаботающихНеПолноеВремяСНачалаГода, 0);
			 РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр313_1",Стр313_1);
			 РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр313_2",Стр313_2);
			 
			 //		в т.ч. переведенных на указанный режим работы в связи с сокращением объема производства (работу, услуг)
			 Стр312_1 = ?(ЗначениеЗаполнено(Выборка.ПереведенныхВСвязиССокращениемОбъемаПроизводстваЗаКвартал), Выборка.ПереведенныхВСвязиССокращениемОбъемаПроизводстваЗаКвартал, 0);
			 Стр312_2 = ?(ЗначениеЗаполнено(Выборка.ПереведенныхВСвязиССокращениемОбъемаПроизводстваСНачалаГода), Выборка.ПереведенныхВСвязиССокращениемОбъемаПроизводстваСНачалаГода, 0);
			 РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр312_1",Стр312_1);
			 РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр312_2",Стр312_2);
		КонецЕсли;
		
		// Данные о простоях 
		
		// Зарегистрированные простои 
		ЗарегистированныеПростоиТекст = "
		|ВЫБРАТЬ 
		|	ОсновныеНачисления.ФизЛицо,
		|	ОсновныеНачисления.ПериодДействияНачало,
		|	ОсновныеНачисления.ПериодДействияКонец,
		|	СУММА(ОсновныеНачисления.Результат) КАК Результат,
		|	СУММА(РАЗНОСТЬДАТ(ОсновныеНачисления.ПериодДействияНачало, ОсновныеНачисления.ПериодДействияКонец, ДЕНЬ) + 1) КАК ДнейПростоев
		|
		|ПОМЕСТИТЬ ВТ_ЗарегистированныеПростои
		|
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|ГДЕ
		|	ОсновныеНачисления.ОбособленноеПодразделение В(&парамСписокСтруктурныхЕдиниц)
		|	И ОсновныеНачисления.ПериодДействия МЕЖДУ &парамНачГода И &парамПериодПо
		|	И ОсновныеНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В(&СписокПростои)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеНачисления.ФизЛицо,
		|	ОсновныеНачисления.ПериодДействияНачало,
		|	ОсновныеНачисления.ПериодДействияКонец";
																  
		// Выделим данные за отчетный квартал и с начала года 
		// (если один и тот же работник имел более одного отпуска в связи с простоем за период, то показывается только один раз)
		ЗарегистированныеПростоиТекст = "
		|" + ЗарегистированныеПростоиТекст + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР 
		|							КОГДА ДанныеОПростоях.ПериодДействияНачало >= &парамПериодС ТОГДА ДанныеОПростоях.ФизЛицо 
		|							ИНАЧЕ NULL 
		|						 КОНЕЦ) КАК ЧислоПростоевЗаКвартал,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеОПростоях.ФизЛицо) КАК ЧислоПростоевСНачалаГода
		|ИЗ
		|	ВТ_ЗарегистированныеПростои КАК ДанныеОПростоях
		|";
		
		Запрос.Текст = ЗарегистированныеПростоиТекст;
		Выборка = Запрос.Выполнить().Выбрать();
		
		// Выводим данные
		Если Выборка.Следующий() Тогда
			
			// Численность работников, которым были предоставлены отпуска в связи с простоем производства - всего
			Стр314_1 = ?(ЗначениеЗаполнено(Выборка.ЧислоПростоевЗаКвартал), Выборка.ЧислоПростоевЗаКвартал, 0);
			Стр314_2 = ?(ЗначениеЗаполнено(Выборка.ЧислоПростоевСНачалаГода), Выборка.ЧислоПростоевСНачалаГода, 0);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр314_1",Стр314_1);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр314_2",Стр314_2);
			
		КонецЕсли;	
		
	КонецЕсли;
	
	// передаем в качестве признака перезаполнения Истина, т.к. это главная форма
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма,КодФормы, Истина);   
	
	Форма1ТКвартальнаяРасчетНаСервере(Неопределено, Неопределено, КодФормы);
	
	Модифицированность = Истина;
	
КонецПроцедуры // Форма1ТКвартальнаяЗаполнитьАвто()
    
//////////////////////////////////////////////////////////////
// Процедуры и функции для расчета(заполнения) формы 1ТКвартальная.01

&НаСервере
Процедура Форма1ТКвартальнаяРасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки, ТекИмяФормы)
	
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,ИмяЯчейки ,ЗначениеЯчейки);					
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект,ТекИмяФормы);

	// Среднемесячная номинальная зп
	Стр207_1 = ?(ФормаОтчетаПолеТабличногоДокументаСтраница2.Области["Стр203_1"].Значение <> 0, 
				ФормаОтчетаПолеТабличногоДокументаСтраница2.Области["Стр205_1"].Значение * 1000 / ФормаОтчетаПолеТабличногоДокументаСтраница2.Области["Стр203_1"].Значение / 3,
				0);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Стр207_1",Стр207_1);
	Стр207_2 = ?(ФормаОтчетаПолеТабличногоДокументаСтраница2.Области["Стр203_2"].Значение <> 0,
				ФормаОтчетаПолеТабличногоДокументаСтраница2.Области["Стр205_2"].Значение * 1000 / ФормаОтчетаПолеТабличногоДокументаСтраница2.Области["Стр203_2"].Значение / Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета),
				0);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Стр207_2",Стр207_2);
			
	// Среднемесячная номинальная зп персонала осн. деятельности
	Стр208_1 = ?(ФормаОтчетаПолеТабличногоДокументаСтраница2.Области["Стр204_1"].Значение <> 0,
				ФормаОтчетаПолеТабличногоДокументаСтраница3.Области["Стр206_1"].Значение * 1000 / ФормаОтчетаПолеТабличногоДокументаСтраница2.Области["Стр204_1"].Значение / 3,
				0);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Стр208_1",Стр208_1);
	Стр208_2 = ?(ФормаОтчетаПолеТабличногоДокументаСтраница2.Области["Стр204_2"].Значение <> 0, 
				ФормаОтчетаПолеТабличногоДокументаСтраница3.Области["Стр206_2"].Значение * 1000 / ФормаОтчетаПолеТабличногоДокументаСтраница2.Области["Стр204_2"].Значение / Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета),
				0);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Стр208_2",Стр208_2);
	
	// Раздел III. Движение рабочей силы
	// Выбыло работников за отчетный период - всего
	ЗаКвартал = 0;
	СНачалаГода = 0;
	Для НомерСтроки = 4 по 10 Цикл
		ЗаКвартал = ЗаКвартал + ФормаОтчетаПолеТабличногоДокументаСтраница3.Области["Стр3"+ Формат(НомерСтроки, "ЧЦ=2; ЧВН=") + "_1"].Значение;
		СНачалаГода = СНачалаГода + ФормаОтчетаПолеТабличногоДокументаСтраница3.Области["Стр3"+ Формат(НомерСтроки, "ЧЦ=2; ЧВН=") + "_2"].Значение;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Стр303_1",ЗаКвартал);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Стр303_2",СНачалаГода);
	
	// Списочная численность на конец отчетного периода
	Стр311_1 =ФормаОтчетаПолеТабличногоДокументаСтраница3.Области["Стр301_1"].Значение + ФормаОтчетаПолеТабличногоДокументаСтраница3.Области["Стр302_1"].Значение - ФормаОтчетаПолеТабличногоДокументаСтраница3.Области["Стр303_1"].Значение;
	Стр311_2 = ФормаОтчетаПолеТабличногоДокументаСтраница3.Области["Стр301_2"].Значение + ФормаОтчетаПолеТабличногоДокументаСтраница3.Области["Стр302_2"].Значение - ФормаОтчетаПолеТабличногоДокументаСтраница3.Области["Стр303_2"].Значение;
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Стр311_1",Стр311_1);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Стр311_2",Стр311_2);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Комментарий");
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
//Обход проблемы при очистки значений ячеек в ТП, в клиент-серверном варианте

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыФормы.Вставить("мСкопированаФорма",        мСкопированаФорма);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыФормы.Вставить("Организация",         Налогоплательщик);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, мВыбраннаяФорма, "") + "ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект);	

КонецПроцедуры
	