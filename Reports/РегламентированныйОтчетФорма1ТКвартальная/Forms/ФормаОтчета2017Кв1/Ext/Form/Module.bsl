////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	мВыбраннаяФорма = "ФормаОтчета2017Кв1";
	КодФормы 		= "ФормаОтчета"; 		
	
	мФорматНомераСтроки = "ЧЦ=8; ЧВН=; ЧГ=";
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруФормРегОтчета(ЭтотОбъект);	
	
	СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями = РегламентированнаяОтчетностьПереопределяемый.ПоддержкаРаботыСоСтруктурнымиПодразделениями();	
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов   = Новый СписокЗначений;	
	СтруктураРеквизитовФормы.мПечатныеформы 		  = Новый СписокЗначений;	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			
	ЗаполнитьСведенияОбОтчетномПериоде();
		
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);
		РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтотОбъект, ТекФорма.КодФормы);
	КонецЦикла	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если Модифицированность Тогда 
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);	
		ТекстВопроса = НСТР("ru = 'Сохранить данные отчета?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);	
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)	
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.КодФормы = Элемент.ТекущиеДанные.КодФормы Тогда
		ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);
		Возврат;
	КонецЕсли;	
	
	РазделыОтчетаПриАктивизацииСтрокиНаСервере(Элемент.ТекущиеДанные.КодФормы, Элемент.ТекущиеДанные.Многострочность);	
		
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Для Каждого СтраницаФорм из Элементы.ГруппаСтраницыОтчета.ПодчиненныеЭлементы Цикл
		Элементы[СтраницаФорм.Имя].Видимость = СтраницаФорм.Имя = ЭтаФорма.КодФормы;	
	КонецЦикла;
	
	ЗаполнитьПанель(Элемент.ТекущиеДанные.ПризнакОсновной, Элемент.ТекущиеДанные.Многострочность);		

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ   Форма400ПолеТабличногоДокументаСтраница1

&НаКлиенте
Процедура ФормаОтчетаПолеТабличногоДокументаСтраница1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Ячейка = Область.Имя;
	
	Если НЕ Найти(Область.Имя, "Стр") = 0 Тогда	
		
		Форма1ТКвартальнаяРасчетНаСервере(Ячейка, Область.Значение, КодФормы);
		Модифицированность = Истина; 
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)	
	СохранитьДанные();	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Перезаполнить = Истина; // Для выполнения запроса на пересчет данных к пользователю
	
	СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	
	Если СтрокаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Перезаполнить Тогда
		ПризнакАвтоЗаполнения =  РегламентированнаяОтчетностьКлиент.ОпределитьПризнакАвтоЗаполненияФормы(СтрокаФормы);
		Если Не ПризнакАвтоЗаполнения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Перезаполнить Тогда		
		Если СтрокаФормы.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстВопроса = "Перезаполнить данные формы и ее дополнительных форм?";
		Иначе
			ТекстВопроса = "Перезаполнить данные формы?";
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, Новый Структура);				
		Оповещение.ДополнительныеПараметры.Вставить("КодФормы", КодФормы);
		Оповещение.ДополнительныеПараметры.Вставить("Перезаполнить", Перезаполнить);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);		

	КонецЕсли;		
	    
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	ОткрытьФормуНастройкиСтраниц()	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФорму(Команда)
	
	РегламентированнаяОтчетностьКлиент.ОчиститьРеглОтчет(ЭтотОбъект, "ОчиститьФорму");
		
КонецПроцедуры

///////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ПРОЦЕДУРЫ И ФУНКЦЦИИ

&НаКлиенте
Процедура ПослеВводаСтраницы(Значение, Параметры) Экспорт
	
	Если НЕ Значение = Неопределено Тогда  
		
		ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
		Если ТекФорма = Неопределено Тогда
			ВсегоСтраниц = 1;
		Иначе
			ВсегоСтраниц = ТекФорма.ВсегоСтраниц;
		КонецЕсли;		
			
		Если Значение = 0 Тогда
			ТекущаяСтраница = 1;
		ИначеЕсли Значение > ВсегоСтраниц Тогда
			ТекущаяСтраница = ВсегоСтраниц;
		Иначе
			ТекущаяСтраница = Значение;				
		КонецЕсли;
		
		ПослеВводаСтраницыНаСервере();
		  
	КонецЕсли;
	           	
КонецПроцедуры

&НаСервере
Процедура ПослеВводаСтраницыНаСервере()
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ПредыдущаяСтрНаСервере()
	ТекущаяСтраница = ТекущаяСтраница - 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура СледующаяСтрНаСервере()
	ТекущаяСтраница = ТекущаяСтраница + 1;
	РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(ЭтотОбъект);
		
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуНаСервере()
	РегламентированнаяОтчетность.УдалитьСтрокуМногострочнойФормы(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере()
	
	РегламентированнаяОтчетность.ДобавитьСтрокуМногострочнойФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("СписокСтруктурныхЕдиниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");			
	СтруктураРеквизитовФормы.Вставить("НалоговыйКомитет");				
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");		
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");		
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");	
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрг");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);	
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");	
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");		
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");	
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Параметры.БезОткрытияФормы);	
	СтруктураРеквизитовФормы.Вставить("мПериодичность", Параметры.мПериодичность);		
	СтруктураРеквизитовФормы.Вставить("мГод");	
	СтруктураРеквизитовФормы.Вставить("мКвартал");	
	СтруктураРеквизитовФормы.Вставить("мМесяц");		

	// индивидуальные параметры формы
	СтруктураРеквизитовФормы.Вставить("мПоддержкаРаботыСоСтруктурнымиПодразделениями");		
	
КонецПроцедуры

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()	
	
	РегламентированнаяОтчетность.ВосстановитьСохраненныйОтчет(ЭтотОбъект);	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтчетномПериоде() Экспорт

	СтрПериодОтчета = ПредставлениеПериода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ФП = истина");
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
		СтруктураРеквизитовФормы.мКвартал = Лев(СтрПериодОтчета,1);
		СтруктураРеквизитовФормы.мМесяц = Неопределено;
	Иначе
		СтруктураРеквизитовФормы.мМесяц = Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		СтруктураРеквизитовФормы.мКвартал = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мГод = Лев(Прав(СтрПериодОтчета,7),4);
		
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы)
	
	ОргСведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОНалогоплательщике(Налогоплательщик, ДатаПодписи);
	//Если организация не указана то не выводим никаких сведений
	Если ОргСведения = 0 Тогда
		Возврат;
	КонецЕсли;

	// Инициализируем переменные
	НаимЮЛПол = ""; 		// Полное наименование 
	АдрЮР = ""; 			// Юридический адрес
	ТелОрганизации = "";	// Телефон организации
	ФИОРук = ""; 			// ФИО руководителя
	ФИОБух = ""; 			// ФИО главного бухгатера
	ИИН_БИН = ""; 			// Код БИН
	АдрФакт = ""; 			// Фактический адрес
	КодКАТО = ""; 			// Код территории по КАТО
	НаимОКЭД = "";			// Наименование по ОКЭД
	КодПоОКЭД = "";			// Код по ОКЭД

	// Получаем данные
	ОргСведения.Свойство("ПолноеНаименование", НаимЮЛПол);
	ОргСведения.Свойство("ЮридическийАдрес",   АдрЮР);
	ОргСведения.Свойство("Телефоны",  		   ТелОрганизации);
	ОргСведения.Свойство("Руководитель",   	   ФИОРук);
	ОргСведения.Свойство("ГлавныйБухгалтер",   ФИОБух);
	ОргСведения.Свойство("БИН_ИИН",    		   ИИН_БИН);
	ОргСведения.Свойство("ФактическийАдрес",   АдрФакт);	 
	
	ОргСведения.Свойство("КодКАТО",					КодКАТО);	
	ОргСведения.Свойство("ОсновнойВидДеятельности",	НаимОКЭД);	
	ОргСведения.Свойство("КодОКЭД",					КодПоОКЭД);	
		
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "НаимЮЛПол",НаимЮЛПол);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "НаимОКЭД", НаимОКЭД);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ФИОРук",	 ФИОРук);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "Исполнитель",	 Пользователи.ТекущийПользователь());

	Попытка
		 Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			АдресныеСведенияОрганизации = РегистрыСведений.АдресныйКлассификатор.ПолучитьАдресныеСведенияОрганизации(Налогоплательщик.ИндивидуальныйПредприниматель);
		Иначе
			АдресныеСведенияОрганизации = РегистрыСведений.АдресныйКлассификатор.ПолучитьАдресныеСведенияОрганизации(Налогоплательщик);
		КонецЕсли;
	Исключение
		АдресныеСведенияОрганизации = Новый Структура;

		АдресныеСведенияОрганизации.Вставить("АдресОрганизации", ""); 	// Фактический адрес
		АдресныеСведенияОрганизации.Вставить("ИнформАдрес", ""); 		// Адрес для информирования физ. лица
		АдресныеСведенияОрганизации.Вставить("КодКато", ""); 			// Код КАТО
	КонецПопытки;
	
	АдресныеСведенияОрганизации.Свойство("АдресОрганизации", АдрФакт);
	АдресныеСведенияОрганизации.Свойство("КодКато", КодКАТО);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "АдрФакт",	 АдрФакт);
	
	Если НЕ  Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "АдрЮР",	 АдрЮР);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы, "ТелОрганизации",	 ТелОрганизации);
		
	    // Код БИН
		ДлинаИИН = СтрДлина(ИИН_БИН);
		Если ДлинаИИН <= 12 Тогда
			Для Шаг = 1 По ДлинаИИН Цикл
				ИИН = СРЕД(ИИН_БИН, Шаг, 1);
				РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"БИН"+Шаг,ИИН);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Код КАТО
	КодКАТО = "" + СтрЗаменить(КодКАТО, " ", "") + "0"; // длина кода всего 9 символов, добавим 10-й
	ДлинаКАТО = СтрДлина(КодКАТО);
	Если ДлинаКАТО <= 10 Тогда
		Для Шаг = 1 По ДлинаКАТО Цикл
			КодПоКАТО = СРЕД(КодКАТО, Шаг, 1);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"КодКАТО"+Шаг,КодПоКАТО);
		КонецЦикла;
	КонецЕсли;
	
	// Код по ОКЭД
	ДлинаКодПоОКЭД = СтрДлина(КодПоОКЭД);
	Если ДлинаКодПоОКЭД <= 5 Тогда
		Для Шаг = 1 По ДлинаКодПоОКЭД Цикл
			КодОКЭД = СРЕД(КодПоОКЭД, Шаг, 1);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекущееИмяФормы,"КодПоОКЭД"+Шаг,КодОКЭД);
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПанель(ПризнакОсновнойФормы,ПризнакМногострочности)
			
	Элементы.ФормаЗаполнить.Доступность   = НЕ (КодФормы = "Форма400_06" ИЛИ КодФормы = "Форма400_07"); 
	Элементы.ГруппаКнопокДействияСоСтрокамиИСтраницами.Видимость = ПризнакМногострочности;	
			    	
КонецПроцедуры //ЗаполнитьПанель()

&НаСервере
Процедура РазделыОтчетаПриАктивизацииСтрокиНаСервере(НовыйКодФормы, НовыйПризнакМногострочность);
	
	//проверим, что стояли не на основной, итоги передаем только когда переходим из доп.форм
	ТекФорма = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(мСписокФормБезИерархии, Новый Структура("КодФормы", КодФормы));
	Если ТекФорма <> Неопределено И Не ТекФорма.ПризнакОсновной Тогда
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы, Истина);		
	КонецЕсли;
				
	// установим новые значения реквизитам формы
	ЭтаФорма.КодФормы = НовыйКодФормы;	
	
	// передаем данные в структуру
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма, НовыйКодФормы);	
	
	Если  НовыйПризнакМногострочность Тогда
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры	

// Процедура очистки формы
//
// параметр: ТекИмяФормы - имя очищаемой формы (=КодФормы)
//           ОчиститьВсе - признак вида очистки формы              
//
Процедура Очистить(ТекИмяФормы,ОчиститьВсе = Ложь) Экспорт
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	Для Шаг = 1 По 12 Цикл
		СписокПоказателейНеПодлежащихОчистке.Добавить("КодПоОКПО" + Шаг);
		СписокПоказателейНеПодлежащихОчистке.Добавить("ИИН_БИН" + Шаг);
	КонецЦикла;
	СписокПоказателейНеПодлежащихОчистке.Добавить("НаимЮЛПол");
	СписокПоказателейНеПодлежащихОчистке.Добавить("АдрЮР");
	СписокПоказателейНеПодлежащихОчистке.Добавить("АдрФакт");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ФИОРук");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ФИОБух");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Исполнитель");
	СписокПоказателейНеПодлежащихОчистке.Добавить("КодКАТО");
	СписокПоказателейНеПодлежащихОчистке.Добавить("НаимОКЭД");
	СписокПоказателейНеПодлежащихОчистке.Добавить("КодПоОКЭД");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Страница1");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Страница2");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Страница3");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Страница4");
	
	РегламентированнаяОтчетность.ОчиститьСтруктуруДанныхИТабличноеПолеФормы(ЭтаФорма, ТекИмяФормы, Истина, СписокПоказателейНеПодлежащихОчистке);
	
	// обновим представление списка структурных единиц
	Если СтруктураРеквизитовФормы.мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц);
	КонецЕсли;
			
КонецПроцедуры // Очистить()

&НаКлиенте
Процедура ОчиститьРеглОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Форма = ДополнительныеПараметры.Форма;	
		СтрокаФормы = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(Форма.мСписокФормБезИерархии, Новый Структура("КодФормы", Форма.КодФормы));
		Вложенность = ДополнительныеПараметры.ОчищатьПриложения;	
		
		ОчиститьРеглОтчетЗавершениеНаСервере(СтрокаФормы.КодФормы, СтрокаФормы.Многострочность, Вложенность);
		
	КонецЕсли;
	
КонецПроцедуры 	

&НаСервере
Процедура ОчиститьРеглОтчетЗавершениеНаСервере(КодФормы, ПризнакМногострочности, Вложенность) Экспорт
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, КодФормы, ПризнакМногострочности, Вложенность);	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиСтраниц(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьДанныеФормы(РезультатЗакрытия, СписокФормДерева);
	
	Модифицированность = Истина;
	
	//обновим мСписокФормБезИерархии
	Для Каждого СтрокаФормы ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",СтрокаФормы.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			СтрокаФормы.Выгружать               = ТекущаяСтрокаСписка.Выгружать;
			СтрокаФормы.ПоказатьСтраницу        = ТекущаяСтрокаСписка.ПоказатьСтраницу;			
			СтрокаФормы.АвтополучениеИтогов     = ТекущаяСтрокаСписка.АвтополучениеИтогов;  
			СтрокаФормы.АвтоЗаполнение          = ТекущаяСтрокаСписка.АвтоЗаполнение;  
		КонецЕсли;			
	КонецЦикла; 	

	Если ДополнительныеПараметры.Свойство("ТекущийРаздел") И НЕ ДополнительныеПараметры.ТекущийРаздел = Неопределено Тогда  		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(РазделыОтчета, Новый Структура("СписокФормДереваСтраницы",ДополнительныеПараметры.ТекущийРаздел));
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;			
	КонецЕсли;  	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиСтраниц()
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРаздел = Элементы.РазделыОтчета.ТекущиеДанные.Страницы;		
	КонецЕсли;
	
	Для Каждого ТекФорма ИЗ мСписокФормБезИерархии.ПолучитьЭлементы() Цикл		
			
		ТекущаяСтрокаСписка = РегламентированнаяОтчетностьКлиентСервер.НайтиСтрокуДерева(СписокФормДерева, Новый Структура("КодФормы",ТекФорма.КодФормы));
			
		Если  НЕ ТекущаяСтрокаСписка = Неопределено Тогда
			ТекущаяСтрокаСписка.Выгружать               = ТекФорма.Выгружать;
			ТекущаяСтрокаСписка.ПоказатьСтраницу        = ТекФорма.ПоказатьСтраницу;			
			ТекущаяСтрокаСписка.АвтополучениеИтогов     = ТекФорма.АвтополучениеИтогов;  
			ТекущаяСтрокаСписка.АвтоЗаполнение          = ТекФорма.АвтоЗаполнение;  
		КонецЕсли;		   
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокФормДерева",СписокФормДерева);
	
	ДопПараметры = Новый Структура("ТекущийРаздел",ТекущийРаздел);
	
	ОповещениеПослеЗакрытияФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастройкиСтраниц",ЭтотОбъект,ДопПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.НастройкиОтчета",ПараметрыФормы, ЭтаФорма,,,,ОповещениеПослеЗакрытияФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////
// Печать

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	 Перем СтруктураГруппы; 
    
    Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
        ТекстСообщения = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");            
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);                
                
        Возврат Ложь;
        
    КонецЕсли;
            
    СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
    СтруктураРеквизитовФормы.мРежимПечати = Истина;
    
    Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
        ВыборРасчета(КодФормы, Неопределено, Неопределено);
    КонецЕсли; 

    РегламентированнаяОтчетность.СформироватьСписокПечатаемыхЛистов(ЭтаФорма);                 
        
    Возврат Истина;    
	
КонецФункции

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////
// Общие механизмы отчета

&НаКлиенте
Процедура ОбновитьПараметрыФормыНаКлиенте(Параметры) Экспорт
	ЗаполнитьПараметрыФормы(ЭтотОбъект, Параметры);	
	
	ЗаполнитьСведенияОбОтчетномПериоде();
	
	Для Каждого ТекФорма из мСписокФормБезИерархии.ПолучитьЭлементы() Цикл
		ЗаполнитьПараметры(ТекФорма.КодФормы);		
	КонецЦикла	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормы(ТекФорма, Параметры)
	
	ЗаполнитьЗначенияСвойств(ТекФорма.СтруктураРеквизитовФормы, Параметры);                     		
	ТекФорма.Налогоплательщик        	= Параметры.Налогоплательщик;		
	ТекФорма.мСписокСтруктурныхЕдиниц	= Параметры.мСписокСтруктурныхЕдиниц;

КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;	
		
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;										
		КонецЕсли;
		
		
		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();			
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;		
	КонецЕсли;
	
	//Обход ситуации с повторным открытием основной формы, из-за ТД
	МассивРеквизитовФормы = ЭтотОбъект.ПолучитьРеквизиты();
	Для Счетчик = 0 По МассивРеквизитовФормы.Количество()-1 Цикл		
		РеквизитФормы = МассивРеквизитовФормы[Счетчик];
		Если РеквизитФормы.ТипЗначения.СодержитТип(Тип("ТабличныйДокумент")) Тогда
			ЭтотОбъект[РеквизитФормы.Имя] = ЭтотОбъект[РеквизитФормы.Имя];	
		КонецЕсли;
	КонецЦикла;	  	
	
	мСтруктураЗначений = Новый Структура;
	
	Если СтруктураРеквизитовФормы.Свойство("СформироватьФормуОтчетаАвтоматически") И СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически <> Неопределено Тогда
		
		ЗаполнитьАвтоНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметры(ТекущееИмяФормы) Экспорт
	
	Форма = РеквизитФормыВЗначение("мСписокФормБезИерархии").Строки.Найти(ТекущееИмяФормы, "КодФормы");
	
	Если ТекущееИмяФормы = Лев(мВыбраннаяФорма,СтрДлина(мВыбраннаяФорма)-7) Тогда 
		
		//заполним основные сведения об организации
		ЗаполнитьСведенияОНалогоплательщикеНаСервере(ТекущееИмяФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	РегламентированнаяОтчетность.ОчиститьДанныеРегОтчета(ЭтотОбъект, ЭтотОбъект.КодФормы, Ложь,Ложь);
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтаФорма, ЭтаФорма.КодФормы);
	
	РегламентированнаяОтчетность.ПередатьДанныеИзСтруктурыВТабличноеПоле(ЭтаФорма);	
	
	Форма1ТКвартальнаяРасчетНаСервере(Неопределено, Неопределено,КодФормы);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
//Процедура выполняет выбор процедуры расчета.
//ВыборРасчета выполняется при восстановлении данных, при изменении поля табличного документа
//
//Параметры:    ТекФорма - имя текущей формы
//              Индекс - индекс строки для многострочной формы
//              Показатель - имя ячейки, откуда была вызвана процедура расчета многострочной
//                           формы, без указания номера строки (например, без "__1")
//
Процедура ВыборРасчета(ТекФорма, Индекс = Неопределено, Показатель = Неопределено) Экспорт
	
	Если ТекФорма = "Форма1ТКвартальная" Тогда
		Форма1ТКвартальнаяРасчетНаСервере(Индекс, Показатель, ТекФорма);				
	КонецЕсли;		
	
КонецПроцедуры // ВыборРасчета()

&НаКлиенте
Процедура ПриЗакрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьнаСервере();
		Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;	

КонецПроцедуры 

&НаКлиенте
Процедура СохранитьДанные() Экспорт
	СохранитьНаСервере();
	Оповестить("Позиционирование в списке отчетов", СтруктураРеквизитовФормы.мСохраненныйДок);
КонецПроцедуры

&НаСервере
Процедура СохранитьнаСервере();
	РегламентированнаяОтчетность.СохранитьОтчет(ЭтотОбъект);
КонецПроцедуры

&НаСервере 
Процедура ПередатьЗначениеВСтруктуруНаСервере(ИмяЯчейки, ЗначениеЯчейки, ПередаватьВТП = Ложь, ПередаватьВМногострочнуюЧасть = Ложь, ПередаватьИтоги = Ложь)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма, КодФормы, ИмяЯчейки ,ЗначениеЯчейки, ПередаватьВТП, ПередаватьВМногострочнуюЧасть);
	
	Если ПередаватьИтоги Тогда
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	 	
	
	Перезаполнить = ДополнительныеПараметры.Перезаполнить;
	Очистить(КодФормы,Истина);
	
	Форма1ТКвартальнаяЗаполнитьАвто(Перезаполнить);		 
	 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаЗначенияДляВыгрузки (ПроверяемоеЗначение, КоличестовСимволов)
	
	КоличествоПроверяемогоЗнач = СтрДлина(Формат(ПроверяемоеЗначение, "ЧГ=0"));
	
	Если КоличестовСимволов < КоличествоПроверяемогоЗнач Тогда 
		ЗначениеВозврата = 999999999999;
	Иначе 
		ЗначениеВозврата = ПроверяемоеЗначение;
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

&НаКлиенте
Процедура ПослеВводаЗначения(Значение, Параметры) Экспорт
	
	Если НЕ Значение = Неопределено Тогда         	
		ПроверятьЦифрыВСтроке = Ложь;
		Если Параметры.Свойство("ПроверятьЦифрыВСтроке" , ПроверятьЦифрыВСтроке) И ПроверятьЦифрыВСтроке Тогда
			Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Значение) Тогда				
				ТекстСообщения = НСтр("ru = 'Значение содержит нецифровые символы, значение будет очищено'");							  
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);				
				Значение = "";
			КонецЕсли;         		
		КонецЕсли;
		
		Параметры.Область.Значение = Значение;	
		
		Если Параметры.Свойство("ПередаватьИтоги") Тогда			
			ПередатьЗначениеВМногострочнуюСтруктуру(Параметры.ИмяСтраницы, Параметры.Область.Имя, Значение, Параметры.Расчет, Параметры.ПередаватьИтоги);       
		Иначе
			ПередатьЗначениеВМногострочнуюСтруктуру(Параметры.ИмяСтраницы, Параметры.Область.Имя, Значение, Параметры.Расчет);       
		КонецЕсли;			
		
	КонецЕсли;
	           	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ЗначениеРеквизита)
											
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ЗначениеРеквизита);										
											
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначенияРеквизитов(Ссылка, ЗначенияРеквизитов)
											
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ЗначенияРеквизитов);										
											
КонецФункции

&НаКлиенте
Процедура ФормаОбработкаВыбораМногострочныхФорм(ВыбранноеЗначение, ИсточникВыбора)
	
	СсылкаРасшифровки = ВыбранноеЗначение;
	
	ОбластьРасшифровки = ЭтаФорма.ТекущийЭлемент.ТекущаяОбласть;	
	НомерСтроки = Сред(ОбластьРасшифровки.Имя, Найти(ОбластьРасшифровки.Имя, "__") + 2);
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
		ИмяГруппы = "ЛистA";                                                    
		СтандартнаяОбработка = Ложь; 
		ЗначениеРекизитов = ПолучитьЗначенияРеквизитов(СсылкаРасшифровки, "НаименованиеПолное,Наименование");
		Значение = ?(ЗначениеЗаполнено(ЗначениеРекизитов.НаименованиеПолное),ЗначениеРекизитов.НаименованиеПолное, ЗначениеРекизитов.Наименование);	
		ОбластьРасшифровки.Значение  = Значение;
		ОбластьРасшифровки.Расшифровка = СсылкаРасшифровки;
		
		ПередатьЗначениеВМногострочнуюСтруктуру(ИмяГруппы, ОбластьРасшифровки.Имя, Значение);
 	
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ФормаВыбораИзКлассификатора") Тогда
		
		Если ВРег(ИсточникВыбора.ИмяСекции) = ВРег("Классификатор") Тогда 			
			Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
				ОбластьРасшифровки.Значение = ВыбранноеЗначение;	
			Иначе
				ОбластьРасшифровки.Значение = ВыбранноеЗначение.КодСтроки;
			КонецЕсли;
			СтандартнаяОбработка = Ложь;
			ИмяГруппы = "ЛистA";                                           
	 							
			ПередатьЗначениеВМногострочнуюСтруктуру(ИмяГруппы, ОбластьРасшифровки.Имя, ОбластьРасшифровки.Значение);
			
		КонецЕсли;                                                            			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ПередатьЗначениеВМногострочнуюСтруктуру(ИмяСтраницы, ИмяЯчейки, Значение, Расчет = Ложь, ПередаватьИтоги = Ложь)
	
	РегламентированнаяОтчетность.ПередатьЗначениеВМногострочнуюСтруктуру(ЭтаФорма, ИмяСтраницы, ИмяЯчейки, Значение, Расчет);				
	
	Если ПередаватьИтоги Тогда
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(ЭтотОбъект, КодФормы);
	КонецЕсли;
		
КонецПроцедуры

///////////////////////////////////////////////////////////////
// Процедуры и функции для расчета(заполнения) формы 1ТКвартальная

&НаКлиенте
Процедура Форма1ТКвартальнаяЗаполнитьАвто(Перезаполнить = Ложь) 
	                	
	Состояние("Расчет формы № 1-Т квартальная");		
	Форма1ТКвартальнаяЗаполнитьАвтоНаСервере(Перезаполнить);	
	Состояние("");	 
	
КонецПроцедуры // 

///////////////////////////////////////////////////////////////
// Процедуры и функции для расчета(заполнения) формы 1ТКвартальная

&НаСервере
Процедура Форма1ТКвартальнаяЗаполнитьАвтоНаСервере(Перезаполнить = Ложь)               
	
	ТекущееИмяФормы = "ФормаОтчета";
	
	Если Перезаполнить Тогда	
		ТекстСообщения = НСтр("ru = 'Расчет формы № 1-Т квартальная'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;	

	мДатаНачалаПериодаОтчета = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	мДатаКонцаПериодаОтчета = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;

	тКвартал = Формат(мДатаНачалаПериодаОтчета, "ДФ=к");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Квартал1","0");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Квартал2",тКвартал);
	
	тГод = Формат(мДатаНачалаПериодаОтчета, "ДФ=гггг");
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Год1",Сред(тГод, 1, 1));
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Год2",Сред(тГод, 2, 1));
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Год3",Сред(тГод, 3, 1));
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Год4",Сред(тГод, 4, 1));

	// Создание запроса и установка всех необходимых параметров
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамОрганизация",		   		   Налогоплательщик);	
	Запрос.УстановитьПараметр("парамПустаяОрганизация",	   		   Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамНачГода", 					   НачалоГода(мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПериодС", 					   НачалоМесяца(мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПериодПо", 					   КонецМесяца(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамПослеКон", 					   КонецМесяца(мДатаКонцаПериодаОтчета) + 1);
	Запрос.УстановитьПараметр("парамВнутреннееСовместительство",   Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("парамСовместительство",   		   Перечисления.ВидыЗанятостиВОрганизации.Совместительство);
	Запрос.УстановитьПараметр("парамСписокСтруктурныхЕдиниц", 	   мСписокСтруктурныхЕдиниц);
	
	// вид деятельности, относим на основное значение, если не указано значение у должности
	Запрос.УстановитьПараметр("парамПустойВидДеятельности", 	   Справочники.ВидыДеятельности.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамОсновнойВидДеятельности", 	   Налогоплательщик.ОсновнойВидДеятельности);
	
	
	// В бухгалтерии нет данных о состояниях работников
	Запрос.УстановитьПараметр("парамСписокИсключаемыхСостояний", 	Новый СписокЗначений());
	
	Запрос.УстановитьПараметр("парамРаботает",						"Работает");
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());
	
	Запрос.УстановитьПараметр("парамПриемНаРаботу", 				Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	Запрос.УстановитьПараметр("парамПеремещение", 					Перечисления.ПричиныИзмененияСостояния.Перемещение);
	Запрос.УстановитьПараметр("парамУвольнение", 					Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("парамПоСреднемуЗаработкуДляОтпуска", Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
	
	// ---------------------------------------------------------------------------
	// Тексты запросов
	//

	// Сформируем текст запроса с датами месяцев периода с начала года по конец текущего месяца
	// первый месяц квартала
	НачалоМесяца = НачалоГода(мДатаНачалаПериодаОтчета);
	ПериодыТекст = "ВЫБРАТЬ 
					|	ДАТАВРЕМЯ(" + Формат (НачалоМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК НачалоМесяца,
					|	ДАТАВРЕМЯ(" + Формат (КонецМесяца(НачалоМесяца),"ДФ=гггг,М,д,Ч,м,с") + ") КАК КонецМесяца
					|
					|ПОМЕСТИТЬ ВТ_Периоды
					|";
	// прибавим остальные месяцы
	Пока НачалоМесяца <= НачалоМесяца(мДатаКонцаПериодаОтчета) Цикл
		НачалоМесяца = КонецМесяца(НачалоМесяца) + 1;
		ПериодыТекст = ПериодыТекст + "
									  |ОБЪЕДИНИТЬ ВСЕ 
									  |
									  |ВЫБРАТЬ 
									  |	   ДАТАВРЕМЯ(" + Формат(НачалоМесяца,"ДФ=гггг,М,д,Ч,м,с") + "),
									  |	   ДАТАВРЕМЯ(" + Формат(КонецМесяца(НачалоМесяца),"ДФ=гггг,М,д,Ч,м,с") + ")
									  |";
	КонецЦикла;	

	// Получим даты приема и увольнения для работников организации за период
	РаботникиОрганизацииТекст = "
	|ВЫБРАТЬ 
	|	РаботникиОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.ОбособленноеПодразделение,
	|	РаботникиОрганизации.Должность,
	|	&парамНачГода КАК Период,
	|	РаботникиОрганизации.ПричинаИзмененияСостояния,
	|	РаботникиОрганизации.Сотрудник.ВидЗанятости КАК ВидЗанятости
	|
	|ПОМЕСТИТЬ ВТ_РаботникиОрганизации	
	|
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&парамНачГода) КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУвольнение
	|	И РаботникиОрганизации.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник.ФизЛицо,
	|	РаботникиОрганизации.Сотрудник,
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.ОбособленноеПодразделение,
	|	РаботникиОрганизации.Должность,
	|	РаботникиОрганизации.Период, 
	|	РаботникиОрганизации.ПричинаИзмененияСостояния,
	|	РаботникиОрганизации.Сотрудник.ВидЗанятости КАК ВидЗанятости
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Период > &парамНачГода И
	|	РаботникиОрганизации.Период <= &парамПериодПо 
	|";

	Запрос.Текст = РаботникиОрганизацииТекст;

	// Получим периоды назначений работников
	ПериодыНазначенийТекст = "
	|" + РаботникиОрганизацииТекст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ТекущееНазначение.ФизЛицо,
	|	ТекущееНазначение.Сотрудник,
	|	ТекущееНазначение.Организация,
	|	ТекущееНазначение.Должность,
	|	ТекущееНазначение.ВидЗанятости,	
	|	ТекущееНазначение.Период КАК ДатаНачала,
	|	МИНИМУМ(ВЫБОР 
	|				КОГДА СледующееНазначение.Период ЕСТЬ NULL ТОГДА &парамПериодПо 
	|				ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(СледующееНазначение.Период, ДЕНЬ, -1), ДЕНЬ)
	|			КОНЕЦ) КАК ДатаОкончания
	|
	|ПОМЕСТИТЬ ВТ_ПериодыНазначений
	|
	|ИЗ
	|	ВТ_РаботникиОрганизации КАК ТекущееНазначение
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РаботникиОрганизации КАК СледующееНазначение
	|		ПО ТекущееНазначение.Сотрудник = СледующееНазначение.Сотрудник
	|		   И ТекущееНазначение.ФизЛицо = СледующееНазначение.ФизЛицо
	|		   И ТекущееНазначение.Организация = СледующееНазначение.Организация
	|		   И ТекущееНазначение.Период < СледующееНазначение.Период
	|ГДЕ
	|	ТекущееНазначение.ПричинаИзмененияСостояния <> &парамУвольнение	
	|	И ТекущееНазначение.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц)
	|СГРУППИРОВАТЬ ПО
	|	ТекущееНазначение.ФизЛицо,
	|	ТекущееНазначение.Сотрудник,
	|	ТекущееНазначение.Организация,
	|	ТекущееНазначение.Должность,
	|	ТекущееНазначение.ВидЗанятости,	
	|	ТекущееНазначение.Период	
	|";

	Запрос.Текст = ПериодыНазначенийТекст;

	// Разобьем данные о назначениях-состояниях на помесячные записи и подсчитаем число дней за каждый период
	ПериодыНазначенийТекст = "
	|" + ПериодыНазначенийТекст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" + ПериодыТекст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ПериодыНазначений.ФизЛицо,
	|	ПериодыНазначений.Сотрудник,
	|	ПериодыНазначений.ВидЗанятости, 
	|	&парамРаботает КАК Состояние,
	|	ДЕНЬ(ВЫБОР // ДатаОкончания
	|			КОГДА ПериодыНазначений.ДатаОкончания < Периоды.КонецМесяца ТОГДА ПериодыНазначений.ДатаОкончания
	|			ИНАЧЕ Периоды.КонецМесяца 
	|		КОНЕЦ) - 
	|	ДЕНЬ(ВЫБОР // ДатаНачала
	|			КОГДА ПериодыНазначений.ДатаНачала > Периоды.НачалоМесяца ТОГДА ПериодыНазначений.ДатаНачала
	|			ИНАЧЕ Периоды.НачалоМесяца
	|		КОНЕЦ) + 1 КАК ДнейРаботыВМесяце,
	|	Периоды.НачалоМесяца,
	|	Периоды.КонецМесяца
	|
	|ПОМЕСТИТЬ ВТ_ПериодыНазначений2
	|
	|ИЗ
	|	ВТ_ПериодыНазначений КАК ПериодыНазначений
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Периоды КАК Периоды
	|		ПО ПериодыНазначений.ДатаНачала <= Периоды.КонецМесяца 
	|		   И ПериодыНазначений.ДатаОкончания >= Периоды.НачалоМесяца
	|";
	
	Запрос.Текст = ПериодыНазначенийТекст;
	
	// Определим среднесписочную и фактическую численность за каждый месяц
	ЧисленностьТекст = "
	|" + ПериодыНазначенийТекст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ПериодыНазначений.НачалоМесяца,
	|	ВЫРАЗИТЬ(СУММА(ВЫБОР 
	|						КОГДА ПериодыНазначений.ВидЗанятости <> &парамСовместительство
	|								И ПериодыНазначений.ВидЗанятости <> &парамВнутреннееСовместительство
	|							ТОГДА ПериодыНазначений.ДнейРаботыВМесяце
	|						ИНАЧЕ 0
	|				   КОНЕЦ) / ДЕНЬ(ПериодыНазначений.КонецМесяца) КАК ЧИСЛО(10, 0)) КАК Среднесписочная,
	|	ВЫРАЗИТЬ(СУММА(ВЫБОР 
	|						КОГДА ПериодыНазначений.Состояние НЕ В(&парамСписокИсключаемыхСостояний)
	|                             	И ПериодыНазначений.ВидЗанятости <> &парамСовместительство
	|								И ПериодыНазначений.ВидЗанятости <> &парамВнутреннееСовместительство
	|							ТОГДА ПериодыНазначений.ДнейРаботыВМесяце
	|						ИНАЧЕ 0
	|				   КОНЕЦ) / ДЕНЬ(ПериодыНазначений.КонецМесяца) КАК ЧИСЛО(10, 0)) КАК Фактическая
	|
	|ПОМЕСТИТЬ ВТ_Численность
	|
	|ИЗ
	|	ВТ_ПериодыНазначений2 КАК ПериодыНазначений
	|СГРУППИРОВАТЬ ПО
	|	ПериодыНазначений.НачалоМесяца, 
	|	ПериодыНазначений.КонецМесяца 
	|";
	
	Запрос.Текст = ЧисленностьТекст;
	
	// Выделим численность за отчетный месяц и с начала года
	ЧисленностьТекст = "
	|" + ЧисленностьТекст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	СУММА(ВЫБОР 
	|				КОГДА Численность.НачалоМесяца >= &парамПериодС ТОГДА Численность.Среднесписочная 
	|				ИНАЧЕ 0 
	|		  КОНЕЦ / 3) КАК СреднесписочнаяЗаКвартал,
	|	СУММА(Численность.Среднесписочная / МЕСЯЦ(&парамПериодПо) ) КАК СреднесписочнаяСНачалаГода,
	|
	|	СУММА(ВЫБОР 
	|				КОГДА Численность.НачалоМесяца >= &парамПериодС ТОГДА Численность.Фактическая 
	|				ИНАЧЕ 0 
	|		  КОНЕЦ / 3) КАК ФактическаяЗаКвартал,
	|	СУММА(Численность.Фактическая / МЕСЯЦ(&парамПериодПо) ) КАК ФактическаяСНачалаГода
	|
	|ИЗ
	|	ВТ_Численность КАК Численность
	|";
	
	Запрос.Текст = ЧисленностьТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Выводим данные по численности
	Если Выборка.Следующий() Тогда
		
		// Раздел II.
		
		// Списочная численность в среднем
		Стр201_1 = ?(ЗначениеЗаполнено(Выборка.СреднесписочнаяЗаКвартал), Выборка.СреднесписочнаяЗаКвартал, 0);
		Стр201_2 = ?(ЗначениеЗаполнено(Выборка.СреднесписочнаяСНачалаГода), Выборка.СреднесписочнаяСНачалаГода, 0);

		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр201_1", Стр201_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр201_2", Стр201_2);

		// Фактическая численность
		Стр203_1 = ?(ЗначениеЗаполнено(Выборка.ФактическаяЗаКвартал), Выборка.ФактическаяЗаКвартал, 0);
		Стр203_2 = ?(ЗначениеЗаполнено(Выборка.ФактическаяСНачалаГода), Выборка.ФактическаяСНачалаГода, 0);

		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр203_1",Стр203_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр203_2",Стр203_2);
		
		// Персонал основной деятельности (среднесписочная численность)
		Стр202_1 = ?(ЗначениеЗаполнено(Выборка.СреднесписочнаяЗаКвартал), Выборка.СреднесписочнаяЗаКвартал, 0);
		Стр202_2 = ?(ЗначениеЗаполнено(Выборка.СреднесписочнаяСНачалаГода), Выборка.СреднесписочнаяСНачалаГода, 0);
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр202_1", Стр202_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр202_2", Стр202_2);
		
		// Персонал основной деятельности (Фактическая численность)
		Стр204_1 = ?(ЗначениеЗаполнено(Выборка.ФактическаяЗаКвартал), Выборка.ФактическаяЗаКвартал, 0);
		Стр204_2 = ?(ЗначениеЗаполнено(Выборка.ФактическаяСНачалаГода), Выборка.ФактическаяСНачалаГода, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр204_1", Стр204_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр204_2", Стр204_2);
		
	КонецЕсли;
	
	// Раздел II.
	// Определим фонд заработной платы и фактически отработанное количество часов
	// Оплату отпусков берем по периоду действия (если ПериодДействия >= ПериодРегистрации), 
	// остальные виды - по периоду регистрации
	// (см. п. 38 Инструкции)
	
	
	ФондЗаработнойПлатыТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Период,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) * 8 КАК НормаЧасов
	|ПОМЕСТИТЬ ВТ_ДанныеПроизводственногоКалендаря
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &парамНачГода И &парамПериодПо
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисления.Физлицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.ВидРасчета.СпособРасчета = &парамПоСреднемуЗаработкуДляОтпуска
	|				И НАЧАЛОПЕРИОДА(ОсновныеНачисления.ДатаНачала, МЕСЯЦ) >= НАЧАЛОПЕРИОДА(ОсновныеНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА НАЧАЛОПЕРИОДА(ОсновныеНачисления.ДатаНачала, МЕСЯЦ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ОсновныеНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)
	|	КОНЕЦ КАК НачалоМесяца,
	|	ОсновныеНачисления.Результат КАК Результат,
	|	0 КАК РезультатПоДоговору,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|				ТОГДА ОсновныеНачисления.ОтработаноЧасов
	|			ИНАЧЕ 0
	|		КОНЕЦ, 0) КАК ОтработаноЧасов,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сотрудник.ВидЗанятости = &парамСовместительство
	|				ИЛИ ОсновныеНачисления.Сотрудник.ВидЗанятости = &парамВнутреннееСовместительство
	|			ТОГДА ВЫБОР
	|					КОГДА ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|						ТОГДА ОсновныеНачисления.ОтработаноЧасов
	|					ИНАЧЕ 0
	|				КОНЕЦ / ВТ_ДанныеПроизводственногоКалендаря.НормаЧасов
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСовместителей,
	|	ОсновныеНачисления.Сотрудник,
	|	ОсновныеНачисления.Сотрудник.ВидЗанятости
	|ПОМЕСТИТЬ ВТ_ФЗП
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК ОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеПроизводственногоКалендаря КАК ВТ_ДанныеПроизводственногоКалендаря
	|		ПО (ВТ_ДанныеПроизводственногоКалендаря.Период = ВЫБОР
	|				КОГДА ОсновныеНачисления.ВидРасчета.СпособРасчета = &парамПоСреднемуЗаработкуДляОтпуска
	|						И НАЧАЛОПЕРИОДА(ОсновныеНачисления.ДатаНачала, МЕСЯЦ) >= НАЧАЛОПЕРИОДА(ОсновныеНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)
	|					ТОГДА НАЧАЛОПЕРИОДА(ОсновныеНачисления.ДатаНачала, МЕСЯЦ)
	|				ИНАЧЕ НАЧАЛОПЕРИОДА(ОсновныеНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)
	|			КОНЕЦ)
	|ГДЕ
	|	ОсновныеНачисления.Ссылка.Проведен
	|	И ОсновныеНачисления.Ссылка.Организация В(&парамСписокСтруктурныхЕдиниц)
	|	И (ОсновныеНачисления.Ссылка.ПериодРегистрации МЕЖДУ &парамНачГода И &парамПериодПо
	|				И (ОсновныеНачисления.ВидРасчета.СпособРасчета <> &парамПоСреднемуЗаработкуДляОтпуска
	|					ИЛИ НАЧАЛОПЕРИОДА(ОсновныеНачисления.ДатаНачала, МЕСЯЦ) < ОсновныеНачисления.Ссылка.ПериодРегистрации)
	|			ИЛИ НАЧАЛОПЕРИОДА(ОсновныеНачисления.ДатаНачала, МЕСЯЦ) МЕЖДУ &парамНачГода И &парамПериодПо
	|				И ОсновныеНачисления.ВидРасчета.СпособРасчета = &парамПоСреднемуЗаработкуДляОтпуска
	|				И НАЧАЛОПЕРИОДА(ОсновныеНачисления.ДатаНачала, МЕСЯЦ) >= ОсновныеНачисления.Ссылка.ПериодРегистрации)
	|	И ЕСТЬNULL(ОсновныеНачисления.ВидРасчета.ФондВыплат.ФондЗаработнойПлаты, ЛОЖЬ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СНСведенияОДоходах.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ),
	|	СНСведенияОДоходах.СуммаДохода,
	|	0,
	|	0,
	|	0,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
	|ГДЕ
	|	СНСведенияОДоходах.Организация В(&парамСписокСтруктурныхЕдиниц)
	|	И СНСведенияОДоходах.ПериодРегистрации МЕЖДУ &парамНачГода И &парамПериодПо
	|	И ЕСТЬNULL(СНСведенияОДоходах.ВидРасчета.ФондВыплат.ФондЗаработнойПлаты, ЛОЖЬ)
	|	И СНСведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения";
	
	// Выделим ФЗП и часы за отчетный месяц и с начала года в целом по организации
	ФондЗаработнойПлатыТекст = "
	|" + ФондЗаработнойПлатыТекст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	СУММА(ВЫБОР КОГДА ФЗП.НачалоМесяца >= &парамПериодС ТОГДА ФЗП.Результат ИНАЧЕ 0 КОНЕЦ) КАК ФЗПЗаКвартал,
	|	СУММА(ФЗП.Результат) КАК ФЗПСНачалаГода,
	|	СУММА(ВЫБОР КОГДА ФЗП.НачалоМесяца >= &парамПериодС ТОГДА ФЗП.ЧислоСовместителей ИНАЧЕ 0 КОНЕЦ) КАК ЧислоСовместителейЗаКвартал,
	|	СУММА(ФЗП.ЧислоСовместителей) КАК ЧислоСовместителейЗаНачалоГода,
	|
	|
	|	СУММА(ВЫБОР КОГДА ФЗП.НачалоМесяца >= &парамПериодС ТОГДА ФЗП.ОтработаноЧасов ИНАЧЕ 0 КОНЕЦ) КАК ЧасовЗаКвартал,
	|	СУММА(ФЗП.ОтработаноЧасов) КАК ЧасовСНачалаГода
	|
	|ИЗ
	|	ВТ_ФЗП КАК ФЗП
	|";
	
	Запрос.Текст = ФондЗаработнойПлатыТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Выводим данные по ФЗП и часам (в тыс. ед), а также данные по средней заработной плате
	Если Выборка.Следующий() Тогда
		
		// Фонд заработной платы
		Стр205_1 = ?(ЗначениеЗаполнено(Выборка.ФЗПЗаКвартал), Выборка.ФЗПЗаКвартал / 1000, 0);
		Стр205_2 = ?(ЗначениеЗаполнено(Выборка.ФЗПСНачалаГода), Выборка.ФЗПСНачалаГода / 1000, 0);

		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр205_1", Стр205_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр205_2", Стр205_2);
		
		// ФЗП персонала основной дейстельности
		Стр206_1 = ?(ЗначениеЗаполнено(Выборка.ФЗПЗаКвартал), Выборка.ФЗПЗаКвартал / 1000, 0);
		Стр206_2 = ?(ЗначениеЗаполнено(Выборка.ФЗПСНачалаГода), Выборка.ФЗПСНачалаГода / 1000, 0);
		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр206_1",Стр206_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр206_2",Стр206_2);
				
		// Среднемесячная заработная плата 
		Стр207_1 = ?(ЗначениеЗаполнено(Выборка.ФЗПЗаКвартал) И Стр203_1 <> 0, Выборка.ФЗПЗаКвартал / Стр203_1 / 3, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр207_1",Стр207_1);

		Стр207_2 = ?(ЗначениеЗаполнено(Выборка.ФЗПСНачалаГода) И Стр203_2 <> 0, Выборка.ФЗПСНачалаГода / Стр203_2 / Месяц(мДатаКонцаПериодаОтчета), 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр207_2",Стр207_2);
		
		// добавим к фактической численности
		Стр203_1 = Стр203_1 + ?(ЗначениеЗаполнено(Выборка.ЧислоСовместителейЗаКвартал), Выборка.ЧислоСовместителейЗаКвартал / 3, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр203_1",Стр203_1);
		
		// добавим к фактической численности
		Стр203_2 = Стр203_2 + ?(ЗначениеЗаполнено(Выборка.ЧислоСовместителейЗаНачалоГода), Выборка.ЧислоСовместителейЗаНачалоГода / Месяц(мДатаКонцаПериодаОтчета), 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр203_2",Стр203_2);
		
		// Добавим работников ГПХ к фактической численности персонала основной деятельности
		Стр204_1 = Стр204_1 + ?(ЗначениеЗаполнено(Выборка.ЧислоСовместителейЗаКвартал), Выборка.ЧислоСовместителейЗаКвартал / 3, 0);  
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр204_1",Стр204_1);
		
		Стр204_2 = Стр204_2 + ?(ЗначениеЗаполнено(Выборка.ЧислоСовместителейЗаНачалоГода), Выборка.ЧислоСовместителейЗаНачалоГода / Месяц(мДатаКонцаПериодаОтчета), 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр204_2",Стр204_2);
		
		// Фактически отработанных человеко-часов
		Стр209_1 = ?(ЗначениеЗаполнено(Выборка.ЧасовЗаКвартал), Выборка.ЧасовЗаКвартал / 1000, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр209_1",Стр209_1);

		Стр209_2 = ?(ЗначениеЗаполнено(Выборка.ЧасовСНачалаГода), Выборка.ЧасовСНачалаГода / 1000, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр209_2",Стр209_2);
	
	КонецЕсли;
	
	// Раздел III. Движение работников, численность работающих неполное время и наличие вакансий
	
	// Данные о численности на начало квартала и на начало года
	ЧисленностьНаНачалоТекст = "
	|ВЫБРАТЬ 
	|	1 КАК НаНачГода,
	|	0 КАК НаНачМесяца
	|
	|ПОМЕСТИТЬ ВТ_ЧисленностьНаНачало
	|                                                                                           	
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&парамНачГода,
	|			Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство И
	|			Сотрудник.ВидЗанятости <> &парамСовместительство) КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУвольнение
	|	И РаботникиОрганизации.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц)
	|	И ВЫБОР
	|		КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамПриемНаРаботу
	|			ТОГДА РаботникиОрганизации.Период <= ДОБАВИТЬКДАТЕ(&парамНачГода, ДЕНЬ, -1)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0 КАК НаНачГода,
	|	1 КАК НаНачМесяца
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&парамПериодС,
	|			Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство И
	|			Сотрудник.ВидЗанятости <> &парамСовместительство) КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУвольнение
	|	И РаботникиОрганизации.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц)
	|	И ВЫБОР
	|		КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамПриемНаРаботу
	|			ТОГДА РаботникиОрганизации.Период <= ДОБАВИТЬКДАТЕ(&парамПериодС, ДЕНЬ, -1)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|";	
	
	Запрос.Текст = ЧисленностьНаНачалоТекст;
		
	ЧисленностьНаНачалоТекст = "
	|" + ЧисленностьНаНачалоТекст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	СУММА(Численность.НаНачГода) КАК НаНачГода,
	|	СУММА(Численность.НаНачМесяца) КАК НаНачМесяца
	|ИЗ
	|	ВТ_ЧисленностьНаНачало КАК Численность
	|";
	
	Запрос.Текст = ЧисленностьНаНачалоТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Выводим данные на начало
	Если Выборка.Следующий() Тогда
		
		// Списочная численность работников на начало квартала и года
		Стр301_1 =  ?(ЗначениеЗаполнено(Выборка.НаНачМесяца), Выборка.НаНачМесяца, 0);	
		Стр301_2 =  ?(ЗначениеЗаполнено(Выборка.НаНачГода), Выборка.НаНачГода, 0);	

		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр301_1",Стр301_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр301_2",Стр301_2);
		
	КонецЕсли;	
	
	// Принято и уволено сотрудников за период
	// Движение работников (только по основному виду занятости и как целые единицы)
	ДвижениеРаботниковТекст = "
	|ВЫБРАТЬ 
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУвольнение
	|			ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
	|		ИНАЧЕ РаботникиОрганизации.Период
	|	КОНЕЦ КАК Период,
	|	ВЫБОР КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамПриемНаРаботу ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК КоличествоПринятых,
	|	ВЫБОР КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУвольнение ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК КоличествоУволенных,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУвольнение
	|				И РаботникиОрганизации.СтатьяЗаконаОТрудеРК ССЫЛКА Справочник.ОснованияУвольненияИзОрганизации
	|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(РаботникиОрганизации.СтатьяЗаконаОТрудеРК КАК Справочник.ОснованияУвольненияИзОрганизации).ПричинаУвольненияИзОрганизации, ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.ДругиеПричины))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.ДругиеПричины)
	|	КОНЕЦ КАК ПричинаУвольнения
	|
	|ПОМЕСТИТЬ ВТ_ДвижениеРаботников
	|
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|
	|ГДЕ
	|	(РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУвольнение
	|			И РаботникиОрганизации.Период МЕЖДУ &парамНачГода И &парамПериодПо
	|		ИЛИ РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУвольнение
	|			И РаботникиОрганизации.Период МЕЖДУ ДОБАВИТЬКДАТЕ(&парамНачГода, ДЕНЬ, 1) И ДОБАВИТЬКДАТЕ(&парамПериодПо, ДЕНЬ, 1)) И
	|	РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамПеремещение И
	|	РаботникиОрганизации.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц) И
	|	(РаботникиОрганизации.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство) И
	|	(РаботникиОрганизации.Сотрудник.ВидЗанятости <> &парамСовместительство)
	|";
	
	// Суммируем данные за месяц и с начала года
	ДвижениеРаботниковТекст = "
	|" + ДвижениеРаботниковТекст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.Период >= &парамПериодС ТОГДА ДвижениеРаботников.КоличествоПринятых 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ПринятоЗаКвартал,
	|	СУММА(ДвижениеРаботников.КоличествоПринятых) КАК ПринятоСНачалаГода,
	|
	|
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.Период >= &парамПериодС ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоЗаКвартал,
	|	СУММА(ДвижениеРаботников.КоличествоУволенных) КАК ВыбылоСНачалаГода,
	|
	|
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.Период >= &парамПериодС 
	|					И ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.СокращениеЧисленностиИлиЛиквидацияПредприятия)) ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоПоСокращениюЗаКвартал,
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.СокращениеЧисленностиИлиЛиквидацияПредприятия)) ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоПоСокращениюСНачалаГода,
	|
	|
	|	0 КАК ВыбылоВСвязиСЛиквидациейЗаКвартал,
	|	0 КАК ВыбылоВСвязиСЛиквидациейСНачалаГода,
	|
	|
	|	
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.Период >= &парамПериодС 
	|					И ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.ПоПричинамТекучести)) ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоПоСобственномуЗаКвартал,
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.ПоПричинамТекучести)) ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоПоСобственномуСНачалаГода,
	|
	|
	|	0 КАК ВыбылоПоНесоответствиюДолжностиЗаКвартал,
	|	0 КАК ВыбылоПоНесоответствиюДолжностиСНачалаГода,
    |
	|
	|	0 КАК ВыбылоПоНарушениюДисциплиныЗаКвартал,
	|	0 КАК ВыбылоПоНарушениюДисциплиныСНачалаГода,
    |
	|
	|	0 КАК ВыбылоПоПрочимОбстоятельствамЗаКвартал,
	|	0 КАК ВыбылоПоПрочимОбстоятельствамСНачалаГода,
	|
	|
   	|	0 КАК ВыбылоЗаПрогулЗаКвартал,
	|	0 КАК ВыбылоЗаПрогулСНачалаГода,
	|
	|	СУММА(ВЫБОР 
	|			КОГДА ДвижениеРаботников.Период >= &парамПериодС 
	|					И (ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.ДругиеПричины))
	|						ИЛИ ДвижениеРаботников.ПричинаУвольнения = ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.ПустаяСсылка)) 
	|						ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоПоДругимПричинамЗаКвартал,
	|	СУММА(ВЫБОР 
	|			КОГДА (ДвижениеРаботников.ПричинаУвольнения В (ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.ДругиеПричины))
	|					ИЛИ ДвижениеРаботников.ПричинаУвольнения = ЗНАЧЕНИЕ(Перечисление.ПричиныУвольненияИзОрганизации.ПустаяСсылка)) 
	|				ТОГДА ДвижениеРаботников.КоличествоУволенных 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК ВыбылоПоДругимПричинамСНачалаГода
	|
	|
	|ИЗ
	|	ВТ_ДвижениеРаботников КАК ДвижениеРаботников 
	|";
	
	Запрос.Текст = ДвижениеРаботниковТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Выводим данные
	Если Выборка.Следующий() Тогда
		
		// Принято работников за отчетный период - всего
		Стр302_1 = ?(ЗначениеЗаполнено(Выборка.ПринятоЗаКвартал), Выборка.ПринятоЗаКвартал, 0);
		Стр302_2 = ?(ЗначениеЗаполнено(Выборка.ПринятоСНачалаГода), Выборка.ПринятоСНачалаГода, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр302_1",Стр302_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр302_2",Стр302_2);
		
		// Выбыло работников за отчетный период - всего
		Стр303_1 = ?(ЗначениеЗаполнено(Выборка.ВыбылоЗаКвартал), Выборка.ВыбылоЗаКвартал, 0);
		Стр303_2 = ?(ЗначениеЗаполнено(Выборка.ВыбылоСНачалаГода), Выборка.ВыбылоСНачалаГода, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр303_1",Стр303_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр303_2",Стр303_2);
		
		// в том числе
		//		в связи с сокращением численности персонала
		Стр304_1 = ?(ЗначениеЗаполнено(Выборка.ВыбылоПоСокращениюЗаКвартал), Выборка.ВыбылоПоСокращениюЗаКвартал, 0);
		Стр304_2 = ?(ЗначениеЗаполнено(Выборка.ВыбылоПоСокращениюСНачалаГода), Выборка.ВыбылоПоСокращениюСНачалаГода, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр304_1",Стр304_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр304_2",Стр304_2);
		
		//		в связи с ликвидацией предприятия
		Стр305_1 = ?(ЗначениеЗаполнено(Выборка.ВыбылоВСвязиСЛиквидациейЗаКвартал), Выборка.ВыбылоВСвязиСЛиквидациейЗаКвартал, 0);
		Стр305_2 = ?(ЗначениеЗаполнено(Выборка.ВыбылоВСвязиСЛиквидациейСНачалаГода), Выборка.ВыбылоВСвязиСЛиквидациейСНачалаГода, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр305_1",Стр305_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр305_2",Стр305_2);
		
		//		в связи с несоответствием занимаемой должности 
		Стр306_1 = ?(ЗначениеЗаполнено(Выборка.ВыбылоПоНесоответствиюДолжностиЗаКвартал), Выборка.ВыбылоПоНесоответствиюДолжностиЗаКвартал, 0);
		Стр306_2 = ?(ЗначениеЗаполнено(Выборка.ВыбылоПоНесоответствиюДолжностиСНачалаГода), Выборка.ВыбылоПоНесоответствиюДолжностиСНачалаГода, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр306_1",Стр306_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр306_2",Стр306_2);
		
		//		в связи с нарушением трудовой дисциплины
		Стр307_1 = ?(ЗначениеЗаполнено(Выборка.ВыбылоПоНарушениюДисциплиныЗаКвартал), Выборка.ВыбылоПоНарушениюДисциплиныЗаКвартал, 0);
		Стр307_2 = ?(ЗначениеЗаполнено(Выборка.ВыбылоПоНарушениюДисциплиныСНачалаГода), Выборка.ВыбылоПоНарушениюДисциплиныСНачалаГода, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр307_1",Стр307_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр307_2",Стр307_2);
		
		//		в связи с обстоятельствами не зависящими от воли сторон
		Стр308_1 = ?(ЗначениеЗаполнено(Выборка.ВыбылоПоПрочимОбстоятельствамЗаКвартал), Выборка.ВыбылоПоПрочимОбстоятельствамЗаКвартал, 0);
		Стр308_2 = ?(ЗначениеЗаполнено(Выборка.ВыбылоПоПрочимОбстоятельствамСНачалаГода), Выборка.ВыбылоПоПрочимОбстоятельствамСНачалаГода, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр308_1",Стр308_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр308_2",Стр308_2);
		
		//		по собственному желанию
		Стр309_1 = ?(ЗначениеЗаполнено(Выборка.ВыбылоПоСобственномуЗаКвартал), Выборка.ВыбылоПоСобственномуЗаКвартал, 0);
		Стр309_2 = ?(ЗначениеЗаполнено(Выборка.ВыбылоПоСобственномуСНачалаГода), Выборка.ВыбылоПоСобственномуСНачалаГода, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр309_1",Стр309_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр309_2",Стр309_2);
		
		//		по другим причинам
		Стр310_1 = ?(ЗначениеЗаполнено(Выборка.ВыбылоПоДругимПричинамЗаКвартал), Выборка.ВыбылоПоДругимПричинамЗаКвартал, 0) + ?(ЗначениеЗаполнено(Выборка.ВыбылоЗаПрогулЗаКвартал), Выборка.ВыбылоЗаПрогулЗаКвартал, 0);
		Стр310_2 = ?(ЗначениеЗаполнено(Выборка.ВыбылоПоДругимПричинамСНачалаГода), Выборка.ВыбылоПоДругимПричинамСНачалаГода, 0) + ?(ЗначениеЗаполнено(Выборка.ВыбылоЗаПрогулСНачалаГода), Выборка.ВыбылоЗаПрогулСНачалаГода, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр310_1",Стр310_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр310_2",Стр310_2);
	КонецЕсли;	

	// Данные о численности на конец месяца и на конец года одновременно
	ЧисленностьНаКонецТекст = "
	|ВЫБРАТЬ 
	|	СУММА(1) КАК НаКонец
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&парамПослеКон,
	|			Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство И
	|			Сотрудник.ВидЗанятости <> &парамСовместительство) КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.ПричинаИзмененияСостояния <> &парамУвольнение
	|	И РаботникиОрганизации.ОбособленноеПодразделение В (&парамСписокСтруктурныхЕдиниц)
	|	И ВЫБОР
	|		КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамПриемНаРаботу
	|			ТОГДА РаботникиОрганизации.Период <= &парамПериодПо
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|";	
		
	Запрос.Текст = ЧисленностьНаКонецТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Выводим данные
	Если Выборка.Следующий() Тогда
		
		// Списочная численность работников на конец отчетного периода - всего
		Стр311_1 = ?(ЗначениеЗаполнено(Выборка.НаКонец), Выборка.НаКонец, 0);
		Стр311_2 = ?(ЗначениеЗаполнено(Выборка.НаКонец), Выборка.НаКонец, 0);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр311_1",Стр311_1);
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, КодФормы, "Стр311_2",Стр311_2);
	
	КонецЕсли;
	
	// передаем в качестве признака перезаполнения Истина, т.к. это главная форма
	РегламентированнаяОтчетность.ЗаполнитьФорму(ЭтаФорма,КодФормы, Истина);   
	
	Форма1ТКвартальнаяРасчетНаСервере(Неопределено, Неопределено, КодФормы);
	
	Модифицированность = Истина;
	
КонецПроцедуры // Форма1ТКвартальнаяЗаполнитьАвто()
    
//////////////////////////////////////////////////////////////
// Процедуры и функции для расчета(заполнения) формы 1ТКвартальная.01

&НаСервере
Процедура Форма1ТКвартальнаяРасчетНаСервере(ИмяЯчейки, ЗначениеЯчейки, ТекИмяФормы)
	
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда		
		РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтаФорма,ТекИмяФормы,ИмяЯчейки ,ЗначениеЯчейки);					
	КонецЕсли;
	
	ТаблицаДанных = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы(ЭтотОбъект,ТекИмяФормы);

	// Среднемесячная номинальная зп
	Стр207_1 = ?(ФормаОтчетаПолеТабличногоДокументаСтраница2.Области["Стр203_1"].Значение <> 0, 
				ФормаОтчетаПолеТабличногоДокументаСтраница2.Области["Стр205_1"].Значение * 1000 / ФормаОтчетаПолеТабличногоДокументаСтраница2.Области["Стр203_1"].Значение / 3,
				0);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Стр207_1",Стр207_1);
	Стр207_2 = ?(ФормаОтчетаПолеТабличногоДокументаСтраница2.Области["Стр203_2"].Значение <> 0,
				ФормаОтчетаПолеТабличногоДокументаСтраница2.Области["Стр205_2"].Значение * 1000 / ФормаОтчетаПолеТабличногоДокументаСтраница2.Области["Стр203_2"].Значение / Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета),
				0);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Стр207_2",Стр207_2);
			
	// Среднемесячная номинальная зп персонала осн. деятельности
	Стр208_1 = ?(ФормаОтчетаПолеТабличногоДокументаСтраница2.Области["Стр204_1"].Значение <> 0,
				ФормаОтчетаПолеТабличногоДокументаСтраница3.Области["Стр206_1"].Значение * 1000 / ФормаОтчетаПолеТабличногоДокументаСтраница2.Области["Стр204_1"].Значение / 3,
				0);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Стр208_1",Стр208_1);
	Стр208_2 = ?(ФормаОтчетаПолеТабличногоДокументаСтраница2.Области["Стр204_2"].Значение <> 0, 
				ФормаОтчетаПолеТабличногоДокументаСтраница3.Области["Стр206_2"].Значение * 1000 / ФормаОтчетаПолеТабличногоДокументаСтраница2.Области["Стр204_2"].Значение / Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета),
				0);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Стр208_2",Стр208_2);
	
	// Раздел III. Движение рабочей силы
	// Выбыло работников за отчетный период - всего
	ЗаКвартал = 0;
	СНачалаГода = 0;
	Для НомерСтроки = 4 по 10 Цикл
		ЗаКвартал = ЗаКвартал + ФормаОтчетаПолеТабличногоДокументаСтраница3.Области["Стр3"+ Формат(НомерСтроки, "ЧЦ=2; ЧВН=") + "_1"].Значение;
		СНачалаГода = СНачалаГода + ФормаОтчетаПолеТабличногоДокументаСтраница3.Области["Стр3"+ Формат(НомерСтроки, "ЧЦ=2; ЧВН=") + "_2"].Значение;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Стр303_1",ЗаКвартал);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Стр303_2",СНачалаГода);
	
	// Списочная численность на конец отчетного периода
	Стр311_1 =ФормаОтчетаПолеТабличногоДокументаСтраница3.Области["Стр301_1"].Значение + ФормаОтчетаПолеТабличногоДокументаСтраница3.Области["Стр302_1"].Значение - ФормаОтчетаПолеТабличногоДокументаСтраница3.Области["Стр303_1"].Значение;
	Стр311_2 = ФормаОтчетаПолеТабличногоДокументаСтраница3.Области["Стр301_2"].Значение + ФормаОтчетаПолеТабличногоДокументаСтраница3.Области["Стр302_2"].Значение - ФормаОтчетаПолеТабличногоДокументаСтраница3.Области["Стр303_2"].Значение;
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Стр311_1",Стр311_1);
	РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(ЭтотОбъект, ТекИмяФормы, "Стр311_2",Стр311_2);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Комментарий");
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
//Обход проблемы при очистки значений ячеек в ТП, в клиент-серверном варианте

&НаКлиенте
Процедура ОсновнаяФорма(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СтруктураРеквизитовФормы.мСохраненныйДок);	
	ПараметрыФормы.Вставить("мСкопированаФорма",        мСкопированаФорма);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыФормы.Вставить("Организация",         		Налогоплательщик);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);	
	
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, мВыбраннаяФорма, "") + "ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект);	

КонецПроцедуры
	