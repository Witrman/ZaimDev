#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПриВыводеЗаголовка,
							|ИспользоватьВнешниеНаборыДанных,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки,
							|ИспользоватьРасширенныеПараметрыРасшифровки",
							Истина, Истина, Истина, Истина, Истина, Истина);
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт
	
	ТекстОрганизации = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(ПараметрыОтчета.СписокСтруктурныхЕдиниц,,, Истина);
	
	ЗаголовокОтчета = НСтр("ru = 'Задолженность покупателей %1'");
	ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ЗаголовокОтчета, БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода));
		
	Если ОрганизацияВНачале Тогда
		ЗаголовокОтчета = ТекстОрганизации + Символы.ПС + ЗаголовокОтчета;
	Иначе
		ЗаголовокОтчета = ЗаголовокОтчета + " " + ТекстОрганизации;
	КонецЕсли;
	
	Возврат ЗаголовокОтчета;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт

	Если ПараметрыОтчета.РежимРасшифровки
		ИЛИ (ПараметрыОтчета.Свойство("ОткрытИзРассылки") И ПараметрыОтчета.ОткрытИзРассылки) Тогда
		КомпоновщикНастроек.Настройки.Структура.ИдентификаторПользовательскойНастройки = "";
	КонецЕсли;
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода" , КонецДня(ПараметрыОтчета.КонецПериода));
	
	Структура = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Первый = Истина;
	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Если Не Первый Тогда 
				Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			Иначе
				Если НЕ ПараметрыОтчета.РежимРасшифровки Тогда
					Структура.Имя = "Группировка_";
				Иначе
					Структура.Имя = "";
				КонецЕсли;
			КонецЕсли;
			Первый = Ложь;
						
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			
			Если ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных")); 
			
		КонецЕсли;
	КонецЦикла;
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	БухгалтерскиеОтчеты.ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, ПараметрыОтчета);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);

КонецПроцедуры

// Формирует таблицу данных для монитора руководителя по организации на дату
// Параметры
// 	Организация - СправочникСсылка.Организации - Организация по которой нужны данные
// 	ДатаЗадолженности - Дата - дата на которую нужны остатки
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица с данными для монитора руководителя
//
Функция ПолучитьЗадолженностьПокупателейДляМонитораРуководителя(Организация, ДатаЗадолженности) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(ДатаЗадолженности), ВидГраницы.Включая));
	
	СубконтоКонтрагентДоговор = Новый СписокЗначений;
	СубконтоКонтрагентДоговор.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	СубконтоКонтрагентДоговор.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	
	Запрос.УстановитьПараметр("СубконтоКонтрагентДоговор", СубконтоКонтрагентДоговор);
	
	СписокСчетовИсключаемыхИзРасчетаЗадолженности = БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(1);
    СписокСчетовДтЗадолженности = БухгалтерскиеОтчетыВызовСервера.ВозвратитьМассивСчетовДтКтЗадолженности(Ложь, Истина, Истина);
	СписокСчетовПользователя    = БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовПользователяДляРасчетаЗадолженности(1);
	
	Запрос.УстановитьПараметр("СчетаРасчетов", СписокСчетовДтЗадолженности);
	Запрос.УстановитьПараметр("СписокСчетовПользователя", СписокСчетовПользователя);
	Запрос.УстановитьПараметр("ИсключенныеСчета", СписокСчетовИсключаемыхИзРасчетаЗадолженности);
	
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт КАК Сумма,
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто2 КАК Договор
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&Период,
	|			НЕ Счет.Забалансовый
	|				И (Счет В ИЕРАРХИИ (&СчетаРасчетов)
	|					ИЛИ Счет В (&СписокСчетовПользователя))
	|				И НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета),
	|			&СубконтоКонтрагентДоговор,
	|			Организация = &Организация
	|				) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Контрагент,
	|	СУММА(Остатки.Сумма) КАК Сумма
	|ИЗ
	|	Остатки КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сумма УБЫВ";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаДанных = МониторРуководителя.ТаблицаДанных();
	
	Для ИндексСтроки = 0 По Мин(2, Результат.Количество() - 1) Цикл
		
		СтрокаРезультата = Результат[ИндексСтроки];
		Контрагент = СтрокаРезультата.Контрагент;
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.Представление 		= Контрагент;
		СтрокаДанных.ДанныеРасшифровки	= Контрагент;
		СтрокаДанных.Порядок 			= ПорядокЗадолженностейВМониторе();
		СтрокаДанных.Сумма 				= СтрокаРезультата.Сумма;
		
	КонецЦикла;   
	
	// Добавляем итог по разделу
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.Представление 	= НСтр("ru = 'Итого'");
	СтрокаДанных.Порядок 		= ПорядокИтоговВМониторе();
	СтрокаДанных.Сумма 			= Результат.Итог("Сумма");
	
	Возврат ТаблицаДанных;			   
	
КонецФункции 

// Формирует таблицу данных для монитора руководителя по организации на дату
// Параметры
// 	Организация - СправочникСсылка.Организации - Организация по которой нужны данные
// 	ДатаЗадолженности - Дата - дата на которую нужны остатки
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица с данными для монитора руководителя
//
Функция ПолучитьЗадолженностьПокупателейДляМонитораРуководителяСводно(Организация, ДатаЗадолженности) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(ДатаЗадолженности), ВидГраницы.Включая));
	
	СубконтоКонтрагентДоговор = Новый СписокЗначений;
	СубконтоКонтрагентДоговор.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	СубконтоКонтрагентДоговор.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	
	Запрос.УстановитьПараметр("СубконтоКонтрагентДоговор", СубконтоКонтрагентДоговор);
	
	СписокСчетовИсключаемыхИзРасчетаЗадолженности = БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(1);
    СписокСчетовДтЗадолженности = БухгалтерскиеОтчетыВызовСервера.ВозвратитьМассивСчетовДтКтЗадолженности(Ложь, Истина, Истина);
	СписокСчетовПользователя    = БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовПользователяДляРасчетаЗадолженности(1);
	
	Запрос.УстановитьПараметр("СчетаРасчетов", СписокСчетовДтЗадолженности);
	Запрос.УстановитьПараметр("СписокСчетовПользователя", СписокСчетовПользователя);
	Запрос.УстановитьПараметр("ИсключенныеСчета", СписокСчетовИсключаемыхИзРасчетаЗадолженности);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт КАК Сумма,
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто2 КАК Договор
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&Период,
	|			НЕ Счет.Забалансовый
	|				И (Счет В ИЕРАРХИИ (&СчетаРасчетов)
	|					ИЛИ Счет В (&СписокСчетовПользователя))
	|				И НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета),
	|			&СубконтоКонтрагентДоговор,
	|			Организация = &Организация
	|				) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Остатки.Сумма) КАК Сумма
	|ИЗ
	|	Остатки КАК Остатки";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаДанных = МониторРуководителя.ТаблицаДанных();
	
	Выборка.Следующий();
	// Добавляем итог по разделу
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.Представление 	= НСтр("ru = 'Итого'");
	СтрокаДанных.Порядок 		= ПорядокИтоговВМониторе();
	СтрокаДанных.Сумма 			= Выборка.Сумма;
	
	Возврат ТаблицаДанных;			   
	
КонецФункции 

Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант из Схема.ВариантыНастроек Цикл
		НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, Вариант.Имя);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета.
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт
	
	ПараметрыОтчета = РассылкаОтчетовБК.НастройкиОтчетаСохраняемыеВРассылке();
	ПараметрыОтчета.Вставить("ТипЗадолженности" , 1);
	
	Возврат ПараметрыОтчета;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПорядокИтоговВМониторе() Экспорт
	
	Возврат 0;
	
КонецФункции

Функция ПорядокЗадолженностейВМониторе() Экспорт
	
	Возврат 1;
	
КонецФункции

Процедура ПриВыводеЗаголовка(ПараметрыОтчета, Результат) Экспорт
	
	МакетЗаголовок   = ПолучитьОбщийМакет("ЗаголовокОтчета");
	ОбластьЗаголовок = МакетЗаголовок.ПолучитьОбласть("Заголовок");
	
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ПолучитьТекстЗаголовка(ПараметрыОтчета);
	
	Результат.Вывести(ОбластьЗаголовок);
	
КонецПроцедуры

Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Обороты.Организация КАК Организация,
	|	Обороты.Субконто1 КАК Контрагент,
	|	Обороты.Субконто2 КАК Договор,
	|	СУММА(Обороты.СуммаОборотДт) КАК УвеличениеДолга,
	|	СУММА(Обороты.СуммаОборотКт) КАК ПогашениеДолга,
	|	Обороты.Счет КАК Счет,
	|	Обороты.КорСчет КАК КорСчет,
	|	СУММА(0) КАК ДолгНаНачало,
	|	СУММА(0) КАК АвансНаНачало,
	|	СУММА(0) КАК ДолгНаКонец,
	|	СУММА(0) КАК АвансНаКонец,
	|	""+"" КАК Знак,
	|	""Оборот"" КАК ВидРесурса,
	|	ВЫБОР 
	|		КОГДА СУММА(Обороты.СуммаОборотДт) <> 0 ТОГДА ""Дт"" 
	|		КОГДА СУММА(Обороты.СуммаОборотКт) <> 0 ТОГДА ""Кт"" 
	|	КОНЕЦ КАК БухВидРесурса
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТиповойОбороты.Организация КАК Организация,
	|		ТиповойОбороты.Субконто1 КАК Субконто1,
	|		ТиповойОбороты.Субконто2 КАК Субконто2,
	|		ТиповойОбороты.СуммаОборотДт КАК СуммаОборотДт,
	|		ТиповойОбороты.СуммаОборотКт КАК СуммаОборотКт,
	|		ТиповойОбороты.Счет КАК Счет,
	|		ТиповойОбороты.КорСчет КАК КорСчет
	|	ИЗ
	|		РегистрБухгалтерии.Типовой.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				НЕ Счет.Забалансовый
	|					И (Счет В ИЕРАРХИИ (&СчетаРасчетов)
	|						ИЛИ Счет В (&СписокСчетовПользователя))
	|					И НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета),
	|				&ВидыСубконтоКД,
	|				Организация В (&Организация),
	|				,
	|				) КАК ТиповойОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТиповойОбороты.Организация,
	|		ТиповойОбороты.Субконто1,
	|		ТиповойОбороты.Субконто2,
	|		-ТиповойОбороты.СуммаОборотДт,
	|		-ТиповойОбороты.СуммаОборотКт,
	|		ТиповойОбороты.Счет,
	|		ТиповойОбороты.КорСчет
	|	ИЗ
	|		РегистрБухгалтерии.Типовой.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				НЕ Счет.Забалансовый
	|					И (Счет В ИЕРАРХИИ (&СчетаРасчетов)
	|						ИЛИ Счет В (&СписокСчетовПользователя))
	|					И НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета),
	|				&ВидыСубконтоКД,
	|				Организация В (&Организация),
	|				(КорСчет В ИЕРАРХИИ (&СчетаРасчетов)
	|					ИЛИ КорСчет В (&СписокСчетовПользователя))
	|					И НЕ КорСчет В ИЕРАРХИИ (&ИсключенныеСчета),
	|				&ВидыСубконтоКД) КАК ТиповойОбороты
	|	ГДЕ
	|		ТиповойОбороты.Субконто1 = ТиповойОбороты.КорСубконто1
	|		И ТиповойОбороты.Субконто2 = ТиповойОбороты.КорСубконто2) КАК Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	Обороты.Организация,
	|	Обороты.Счет,
	|	Обороты.КорСчет,
	|	Обороты.Субконто1,
	|	Обороты.Субконто2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачальныеОстатки.Организация,
	|	НачальныеОстатки.Субконто1,
	|	НачальныеОстатки.Субконто2,
	|	0,
	|	0,
	|	НачальныеОстатки.Счет,
	|	NULL,
	|	НачальныеОстатки.СуммаРазвернутыйОстатокДт,
	|	НачальныеОстатки.СуммаРазвернутыйОстатокКт,
	|	0,
	|	0,
	|	""+"",
	|	""начало"",
	|	ВЫБОР 
	|		КОГДА НачальныеОстатки.СуммаРазвернутыйОстатокДт <> 0 ТОГДА ""Дт"" 
	|		КОГДА НачальныеОстатки.СуммаРазвернутыйОстатокКт <> 0 ТОГДА ""Кт"" 
	|	КОНЕЦ
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&НачалоПериодаОстатки,
	|			НЕ Счет.Забалансовый
	|				И (Счет В ИЕРАРХИИ (&СчетаРасчетов)
	|					ИЛИ Счет В (&СписокСчетовПользователя))
	|				И НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета),
	|			&ВидыСубконтоКД,
	|			Организация В (&Организация)) КАК НачальныеОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонечныеОстатки.Организация,
	|	КонечныеОстатки.Субконто1,
	|	КонечныеОстатки.Субконто2,
	|	0,
	|	0,
	|	КонечныеОстатки.Счет,
	|	NULL,
	|	0,
	|	0,
	|	КонечныеОстатки.СуммаРазвернутыйОстатокДт,
	|	КонечныеОстатки.СуммаРазвернутыйОстатокКт,
	|	""+"",
	|	""конец"",
	|	ВЫБОР 
	|		КОГДА КонечныеОстатки.СуммаРазвернутыйОстатокДт <> 0 ТОГДА ""Дт"" 
	|		КОГДА КонечныеОстатки.СуммаРазвернутыйОстатокКт <> 0 ТОГДА ""Кт"" 
	|	КОНЕЦ
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&КонецПериодаОстатки,
	|			НЕ Счет.Забалансовый
	|				И (Счет В ИЕРАРХИИ (&СчетаРасчетов)
	|					ИЛИ Счет В (&СписокСчетовПользователя))
	|				И НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета),
	|			&ВидыСубконтоКД,
	|			Организация В (&Организация)) КАК КонечныеОстатки";
	
	СписокСчетовИсключаемыхИзРасчетаЗадолженности = БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(1);
    СписокСчетовДтЗадолженности = БухгалтерскиеОтчетыВызовСервера.ВозвратитьМассивСчетовДтКтЗадолженности(Ложь, Истина, Истина);
	СписокСчетовПользователя    = БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовПользователяДляРасчетаЗадолженности(1);
	
	Запрос.УстановитьПараметр("НачалоПериода"           , НачалоДня(ПараметрыОтчета.НачалоПериода));
	Запрос.УстановитьПараметр("НачалоПериодаОстатки"    , НачалоДня(ПараметрыОтчета.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода"            , КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("КонецПериодаОстатки"     , КонецДня(ПараметрыОтчета.КонецПериода) + 1);
	Запрос.УстановитьПараметр("Организация"             , ПараметрыОтчета.СписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("ИсключенныеСчета"        , СписокСчетовИсключаемыхИзРасчетаЗадолженности);
	Запрос.УстановитьПараметр("СчетаРасчетов"           , СписокСчетовДтЗадолженности);
	Запрос.УстановитьПараметр("СписокСчетовПользователя", СписокСчетовПользователя);
	
	ВидыСубконтоКД = Новый Массив;                
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	
	Запрос.УстановитьПараметр("ВидыСубконтоКД"  , ВидыСубконтоКД);
	
	Если Не ЗначениеЗаполнено(ПараметрыОтчета.СписокСтруктурныхЕдиниц) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация В (&Организация)", "");
	КонецЕсли;
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	ВнешниеНаборыДанных = Новый Структура("ТаблицаДанных", ТаблицаДанных);
	
	Возврат ВнешниеНаборыДанных;
		                                
КонецФункции

Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
	
	// Инициализируем список мунктов меню
	СписокПунктовМеню = Новый СписокЗначений();
	
	// Заполниим соответствие полей которые мы хотим получить из данных расшифровки
	СоответствиеПолей = Новый Структура();
	ДанныеОтчета = ПолучитьИзВременногоХранилища(Адрес);
	
	ЗначениеРасшифровки = ДанныеОтчета.ДанныеРасшифровки.Элементы[Расшифровка];
	Если ТипЗнч(ЗначениеРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для Каждого ПолеРасшифровки ИЗ ЗначениеРасшифровки.ПолучитьПоля() Цикл
			Если ЗначениеЗаполнено(ПолеРасшифровки.Значение) И ПолеРасшифровки.Значение <> "Показатель" Тогда
				ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
				ПараметрыРасшифровки.Вставить("Значение",  ПолеРасшифровки.Значение);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Укажем что открывать объект сразу не нужно
	ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Ложь);
	
	Если ДанныеОтчета = Неопределено Тогда 
		ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
		Возврат;
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ДанныеОтчета.ДанныеРасшифровки.Настройки);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ДанныеОтчета.Объект.СхемаКомпоновкиДанных));
	
	МассивПолей = БухгалтерскиеОтчетыВызовСервера.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеОтчета.ДанныеРасшифровки, КомпоновщикНастроек, Истина);
	
	Показатель = "";
	Для Каждого ПолеРасшифровки Из МассивПолей Цикл
		Если ТипЗнч(ПолеРасшифровки) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных")
			И ПолеРасшифровки.Значение = "Показатель" Тогда
			Показатель = ПолеРасшифровки.Поле;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Прежде всего интересны данные группировочных полей
	Для Каждого Группировка Из ДанныеОтчета.Объект.Группировка Цикл
		Если Группировка.Использование Тогда
			СоответствиеПолей.Вставить(Группировка.Поле);
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеПолей.Вставить("Показатель");
	СоответствиеПолей.Вставить("Счет");
		
	// Инициализация пользовательских настроек
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки",  Истина);
	ДополнительныеСвойства.Вставить("НачалоПериода",     ДанныеОтчета.Объект.НачалоПериода);
	ДополнительныеСвойства.Вставить("КонецПериода",      ДанныеОтчета.Объект.КонецПериода);
	ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ДанныеОтчета.Объект.ВыводитьЗаголовок);
	ДополнительныеСвойства.Вставить("ВыводитьПодписи",   ДанныеОтчета.Объект.ВыводитьПодписи);
	ДополнительныеСвойства.Вставить("МакетОформления",   ДанныеОтчета.Объект.МакетОформления);
	ДополнительныеСвойства.Вставить("ВыводитьДиаграмму", Ложь);
	ДополнительныеСвойства.Вставить("ПоказательБУ",      Истина);
	ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", ДанныеОтчета.Объект.СписокСтруктурныхЕдиниц);
	
	Если Показатель <> "" Тогда
		ВыбранныеПоля = ПользовательскиеНастройки.Элементы.Добавить(Тип("ВыбранныеПоляКомпоновкиДанных"));
		ВыбранныеПоля.ИдентификаторПользовательскойНастройки = "Выбор";
		ПолеПоказателя = ВыбранныеПоля.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеПоказателя.Поле = Новый ПолеКомпоновкиДанных(Показатель);
	КонецЕсли;
	
	// Получаем соответствие полей доступных в расшифровке
	Данные_Расшифровки = Новый Соответствие();
	
	Если ДанныеОтчета.ДанныеРасшифровки <> Неопределено Тогда
		// Ищем интересующие нас поля в заданной расшифровке
		Для каждого ЭлементДанных Из СоответствиеПолей Цикл
			// Получаем элемент расшифровки, в котором нужно искать поля
			Родитель = ДанныеОтчета.ДанныеРасшифровки.Элементы[Расшифровка];
			// Вызываем рекурсивный поиск поля
			ЗначениеРасшифровки = ПолучитьЗначениеРасшифровки(Родитель, ЭлементДанных.Ключ);
			Если ЗначениеРасшифровки <> Неопределено Тогда
				// Значение нашлось, помещаем в структуру
				Данные_Расшифровки.Вставить(ЭлементДанных.Ключ, ЗначениеРасшифровки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Счет = Данные_Расшифровки.Получить("Счет");
	ЕстьСчет = ДанныеОтчета.Объект.Группировка.Найти("Счет", "Поле") <> Неопределено;
	
	Если ДанныеОтчета.Объект.РежимРасшифровки Тогда
		Если Счет = Неопределено И ЕстьСчет Тогда
			ТекстСообщения = НСтр("ru = 'Расшифровка невозможна. Неизвестен счет.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
			Возврат;
		ИначеЕсли Счет <> Неопределено И ЕстьСчет Тогда
			Если Показатель = "ПогашениеДолга" ИЛИ Показатель = "УвеличениеДолга" Тогда
				СписокПунктовМеню.Добавить("АнализСчетаТиповой", НСтр("ru = 'Анализ счета (бух.)'"));
				ИДРасшифровки = "АнализСчетаТиповой";
			Иначе
				СписокПунктовМеню.Добавить("ОборотноСальдоваяВедомостьПоСчетуТиповой", НСтр("ru = 'Оборотно-сальдовая ведомость по счету (бух.)'"));
				ИДРасшифровки = "ОборотноСальдоваяВедомостьПоСчетуТиповой";
			КонецЕсли;
		Иначе
			СписокПунктовМеню.Добавить("ЗадолженностьПокупателей", НСтр("ru = 'Задолженность покупателей'"));
			ИДРасшифровки = "ЗадолженностьПокупателей";
		КонецЕсли;
	Иначе
		СписокПунктовМеню.Добавить("ЗадолженностьПокупателей", НСтр("ru = 'Задолженность покупателей'"));
		ИДРасшифровки = "ЗадолженностьПокупателей";
	КонецЕсли;
	
	Если Счет <> Неопределено Тогда
		ДанныеСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	Иначе
		ДанныеСчета = Неопределено;
	КонецЕсли;
	
	ОтборПоЗначениямРасшифровки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ОтборПоЗначениямРасшифровки.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Для Каждого ЗначениеРасшифровки Из Данные_Расшифровки Цикл
		Если ЗначениеРасшифровки.Ключ <> "Период" Тогда
			Если ИДРасшифровки <> "ЗадолженностьПокупателей" Тогда
				Если ЗначениеРасшифровки.Ключ = "Счет" Тогда
					ДополнительныеСвойства.Вставить("Счет",	ЗначениеРасшифровки.Значение);
				Иначе
					ПолеОтбора = Неопределено;
					Если ДанныеСчета <> Неопределено И ДанныеСчета.КоличествоСубконто > 0 Тогда
						Для НомерСубконто = 1 По ДанныеСчета.КоличествоСубконто Цикл
							Если ДанныеСчета["ВидСубконто" + НомерСубконто + "ТипЗначения"].СодержитТип(ТипЗнч(ЗначениеРасшифровки.Значение)) Тогда
								ПолеОтбора = "Субконто" + НомерСубконто;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если ПолеОтбора = Неопределено Тогда
						ПолеОтбора = ЗначениеРасшифровки.Ключ;
					КонецЕсли;
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборПоЗначениямРасшифровки, ПолеОтбора, ЗначениеРасшифровки.Значение);
				КонецЕсли;
			Иначе
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборПоЗначениямРасшифровки, ЗначениеРасшифровки.Ключ, ЗначениеРасшифровки.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Группировка = Новый Массив();
	Для Каждого СтрокаГруппировки Из ДанныеОтчета.Объект.Группировка Цикл
		Если СтрокаГруппировки.Использование Тогда
			СтрокаДляРасшифровки = Новый Структура("Использование, Поле, Представление, ТипГруппировки");
			ЗаполнитьЗначенияСвойств(СтрокаДляРасшифровки, СтрокаГруппировки);
			Группировка.Добавить(СтрокаДляРасшифровки);
		КонецЕсли;
	КонецЦикла;
	
	ГруппировкаСчет = Новый Структура("Использование, Поле, Представление, ТипГруппировки",
	                                   Истина, "Счет", "Счет", Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы);

	Если ИДРасшифровки = "ЗадолженностьПокупателей" Тогда
	    Группировка.Добавить(ГруппировкаСчет);
	Иначе
	    Группировка.Вставить(0, ГруппировкаСчет);
	КонецЕсли;

	ДополнительныеСвойства.Вставить("Группировка", Группировка);
	
	НастройкиРасшифровки = Новый Структура();
	НастройкиРасшифровки.Вставить(ИДРасшифровки , ПользовательскиеНастройки);
	ДанныеОтчета.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
	
	ПоместитьВоВременноеХранилище(ДанныеОтчета, Адрес);
	
	ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает значение искомого поля из элемента расшифровки.
//
Функция ПолучитьЗначениеРасшифровки(Элемент, ИмяПоля)
	
	Если ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		// Ищем поля в текущем элементе
		Поле = Элемент.ПолучитьПоля().Найти(ИмяПоля);
		Если Поле <> Неопределено Тогда
			// Возвращаем значение найденного поля
			Возврат Поле.Значение;
		КонецЕсли;
	КонецЕсли;
	
	// Если поле не нашлось, или текущий элемент не содержит полей
	// ищем поля среди родителей элемента (вышестоящие группировки).
	Родители  = Элемент.ПолучитьРодителей();
	Если Родители.Количество() > 0 Тогда
		
		Для Каждого Родитель Из Родители Цикл
			// Вызываем рекурсивный поиск поля
			ЗначениеРасшифровки = ПолучитьЗначениеРасшифровки(Родитель, ИмяПоля);
			
			Если ЗначениеРасшифровки <> Неопределено Тогда
				Возврат ЗначениеРасшифровки;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Если ничего не нашлось
	Возврат Неопределено;
	
КонецФункции

#КонецЕсли