
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	ПодготовитьФормуНаСервере();
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
	"СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");
	
	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
	"ЗаголовокСубконтоЗатратБУ1", "ЗаголовокСубконтоЗатратБУ2", "ЗаголовокСубконтоЗатратБУ3"); 
	
	УстановитьЗаголовкиИДоступностьСубконто(Объект.СчетЗатратБУ, ПоляФормы, ЗаголовкиПолей, Объект.СчетЗатратНУ);
	
	УстановитьСвойстваЭлементаКонтрагент();	
	УправлениеФормой(ЭтаФорма);	

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);

	НайтиЭДВСИЗаполнитьСсылкуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ФизическиеЛица.Форма.ФормаВыбора" Тогда
		
		Для Каждого СтрокаМассива Из ВыбранноеЗначение Цикл
			
			СтрокиТабличногоПоля = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(Новый Структура("ФизЛицо", СтрокаМассива));
			
			Если СтрокиТабличногоПоля.Количество() > 0 Тогда
				ТекстСообщения = НСтр("ru='Физическое лицо < %1 > уже выбрано!'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаМассива);
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,, "Объект");
	
			Иначе
				НоваяСтрока = Объект.ИнвентаризационнаяКомиссия.Добавить();	
				НоваяСтрока.ФизЛицо = СтрокаМассива;
				
				Если Объект.ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
					НоваяСтрока.Председатель = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	ИначеЕсли ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаРедактированияНомеровГТД" Тогда
		
		ЗаполнитьТабличнуюЧастьНомераГТД(ВыбранноеЗначение);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
	ИначеЕсли ИмяСобытия = ВСКлиентСервер.ИмяСобытияЗаписьЭДВС() Тогда
		НайтиЭДВСИЗаполнитьСсылкуНаСервере();
	Иначе
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;   
	
	//ИнтеграцияИСМПТК
	Если ИмяСобытия = "Запись_УведомлениеОВыводеИзОборота" Тогда
		ОбработкаОповещенияЗаписиИСМПТНаСервере();
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Документ ""требование-накладная"" (проведение)";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)  	 
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			РаботаСДиалогамиКлиент.ПоказатьВопросОбОчисткеНекорректныхЗначенийПодразделения(ЭтаФорма, Результат);
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратБУПриИзменении(Элемент)
	
	Объект.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетЗатратБУ));
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
	"СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатратБУ, Объект, ПоляФормы);

	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
	"ЗаголовокСубконтоЗатратБУ1", "ЗаголовокСубконтоЗатратБУ2", "ЗаголовокСубконтоЗатратБУ3"); 
	
	УстановитьЗаголовкиИДоступностьСубконто(Объект.СчетЗатратБУ, ПоляФормы, ЗаголовкиПолей, Объект.СчетЗатратНУ);
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
	"СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатратНУ, Объект, ПоляФормы);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ");

	ДанныеОбъекта = Новый Структура("Организация, СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3,
									|СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетЗатратБУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратБУ1ПриИзменении(Элемент)
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетЗатратБУ, Объект.СчетЗатратНУ, 1, Объект.СубконтоЗатратБУ1, "СубконтоЗатратНУ");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратБУ2ПриИзменении(Элемент)
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетЗатратБУ, Объект.СчетЗатратНУ, 2, Объект.СубконтоЗатратБУ2, "СубконтоЗатратНУ");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратБУ3ПриИзменении(Элемент)
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(Объект, Объект.СчетЗатратБУ, Объект.СчетЗатратНУ, 3, Объект.СубконтоЗатратБУ3, "СубконтоЗатратНУ");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ", 1, "СчетЗатратБУ", Объект, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ", 2, "СчетЗатратБУ", Объект, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратБУ", 3, "СчетЗатратБУ", Объект, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратНУПриИзменении(Элемент)
	
	ПоляФормы		= Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатратНУ, Объект, ПоляФормы);

	ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконтоЗатратНУ1", "ЗаголовокСубконтоЗатратНУ2", "ЗаголовокСубконтоЗатратНУ3"); 
		
	УстановитьЗаголовкиИДоступностьСубконто(Объект.СчетЗатратНУ, ПоляФормы, ЗаголовкиПолей);
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ");
	
	ДанныеОбъекта = Новый Структура("Организация, СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3");
			
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	СчетЗатратНУПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ", 1, "СчетЗатратНУ", Объект, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ", 2, "СчетЗатратНУ", Объект, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СубконтоНачалоВыбора(Элемент, "СубконтоЗатратНУ", 3, "СчетЗатратНУ", Объект, СтандартнаяОбработка);
КонецПроцедуры           

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)
	УчитыватьКПНПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если Объект.Склад = ТекущийСклад Тогда
		Возврат
	КонецЕсли;	
	  		
	ТекущийСклад = Объект.Склад;

	Если Объект.НомераГТД.Количество() > 0 Тогда
		Объект.НомераГТД.Очистить();
	КонецЕсли;	
			
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	ТекущийДокументОснование = Объект.ДокументОснование;
		
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	Если ТекущаяНоменклатура = Объект.Номенклатура Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		ТекущаяНоменклатура = Объект.Номенклатура;
		Возврат;
	КонецЕсли;
	
	ТекущаяНоменклатура = Объект.Номенклатура;
	
	Если Объект.МатериалыЗаказчика.Количество() > 0 Тогда
		ТекстСообщения = НСтр("ru='При наличии строк в табличной части ""Материалы заказчика"" заполнение табличной части ""Материалы""
					 |по спецификации выбранной номенклатуры не производится.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "МатериалыЗаказчика[0].НомерСтроки", "Объект");
		Возврат;
	КонецЕсли; 
	
	ДокументОснование = Объект.ДокументОснование;
			
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКоличестваПродукции", ЭтотОбъект, Параметры);
	ПоказатьВводЧисла(Оповещение, 1, "Введите количество продукции",15,3);
				
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МассивНоменклатуры = УстановитьПараметрыВыбораНоменклатуры(Объект.ДокументОснование);
	
	Если МассивНоменклатуры <> Неопределено И МассивНоменклатуры.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтруктураОтбора = Новый Структура("Ссылка", МассивНоменклатуры);
		ПараметрыФормы  = Новый Структура("РежимВыбора, ЗакрыватьПриВыборе, ОтображатьВВидеСписка, Отбор", Истина, Истина, Истина, СтруктураОтбора);	
		ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ МАТЕРИАЛЫ

&НаКлиенте
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Объект.Материалы);	
	КонецЕсли;
	
	Если НоваяСтрока И НЕ Копирование Тогда 
		ТекущиеДанные.Коэффициент = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПередУдалением(Элемент, Отказ)
	НомераГТДКлиентСервер.УдалитьСтрокиТаблицыНомераГТД(Элементы.Материалы.ТекущиеДанные.КлючСвязи, Объект.НомераГТД);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент)
	
	НомераГТДКлиентСервер.УдалитьСтрокиТаблицыНомераГТД(Элементы.Материалы.ТекущиеДанные.КлючСвязи, Объект.НомераГТД);
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, СчетБУ, СчетНУ");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Материалы.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, УчитыватьКПН, Склад");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	МатериалыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ПараметрыОбъекта);
		
	ЗаполнитьЗначенияСвойств(Элементы.Материалы.ТекущиеДанные, ДанныеСтрокиТаблицы);   
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСчетБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(ТекущиеДанные.СчетБУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущиеДанные.СчетБУ);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Материалы[" + Элементы.Материалы.ТекущаяСтрока + "].СчетБУ", "Объект");
		
		ТекущиеДанные.СчетБУ = ПредопределенноеЗначение("ПланСчетов.Типовой.ПустаяСсылка");
		ТекущиеДанные.СчетНУ = ПредопределенноеЗначение("ПланСчетов.Налоговый.ПустаяСсылка");
		
		Возврат;
		
	КонецЕсли;
	
	ТекущиеДанные.СчетНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ТекущиеДанные.СчетБУ)
			, , , Объект.Дата);
			
КонецПроцедуры
		
&НаКлиенте
Процедура МатериалыСчетНУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(ТекущиеДанные.СчетНУ) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущиеДанные.СчетНУ);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Материалы[" + Элементы.Материалы.ТекущаяСтрока + "].СчетНУ", "Объект");
		
		ТекущиеДанные.СчетНУ = ПредопределенноеЗначение("ПланСчетов.Налоговый.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаПриИзменении(Элемент)
	УстановитьСвойстваЭлементаКонтрагент();
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаПослеУдаления(Элемент)
	 УстановитьСвойстваЭлементаКонтрагент();
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементаКонтрагент()
	
	ЕстьМатериалыЗаказчика = (Объект.МатериалыЗаказчика.Количество() <> 0);
	Элементы.Контрагент.АвтоВыборНезаполненного = ЕстьМатериалыЗаказчика;
	Элементы.Контрагент.АвтоОтметкаНезаполненного = ЕстьМатериалыЗаказчика;
	Элементы.Контрагент.ОтметкаНезаполненного = ЕстьМатериалыЗаказчика;
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ МАТЕРИАЛЫ ЗАКАЗЧИКА

&НаКлиенте
Процедура МатериалыЗаказчикаНоменклатураПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Счет, Количество, СчетПередачи");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.МатериалыЗаказчика.ТекущиеДанные);
	МатериалыЗаказчикаНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	ЗаполнитьЗначенияСвойств(Элементы.МатериалыЗаказчика.ТекущиеДанные, ДанныеСтрокиТаблицы); 
		
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаСчетПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыЗаказчика.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(ТекущиеДанные.Счет) Тогда
		
		ТекстСообщения = НСтр("ru='Для счета %1 отсутствует субконто ""Номенклатура"". Значение было очищено.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущиеДанные.Счет);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "МатериалыЗаказчика[" + Элементы.МатериалыЗаказчика.ТекущаяСтрока + "].Счет", "Объект");
		
		ТекущиеДанные.Счет = ПредопределенноеЗначение("ПланСчетов.Типовой.ПустаяСсылка");
			
		Возврат;
		
	КонецЕсли;
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Счет, Количество, СчетПередачи");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	МатериалыЗаказчикаСчетПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ИНВЕНТАРИЗАЦИОННАЯ КОМИССИЯ

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо = Неопределено;
		Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.Председатель = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		
		УсловияПоиска = Новый Структура("ФизЛицо", Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо);
		СтрокиФЛ = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(УсловияПоиска);
		
		Если СтрокиФЛ.Количество() > 1 Тогда
			
			Отказ = Истина;
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Физическое лицо %1% уже включено в состав комиссии!'"), "%1%", Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо);
			
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо = Неопределено;
			ТекущийЭлемент = Элементы.ИнвентаризационнаяКомиссияФизЛицо;
			
		КонецЕсли;	
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ПроверитьФлагиПредседателя(Элемент.ТекущиеДанные);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПослеУдаления(Элемент)
	
	Если Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		ПроверитьФлагиПредседателя(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПодборМатериалы(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Материалы");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборМатериалыЗаказчика(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("МатериалыЗаказчика");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПодборКомиссия(Команда)
	
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",				Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",						Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",				Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов",		ИспользованиеГруппИЭлементов.Элементы);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНомераГТД(Команда)
	
	ПараметрыФормы = ПараметрыФормыРедактированияНомеровГТД();
	НомераГТДКлиент.ОткрытьФормуРедактированияНомеровГТД(ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеНекорректныхЗначенийПодразделения(Результат, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", Результат = КодВозвратаДиалога.Да);
		
	СтруктураРезультатаВыполнения = Неопределено;
	
	Если НЕ ПоказыватьВДокументахСчетаУчета Тогда 
		Параметры.Вставить("ПерезаполнитьСчетаУчета", Истина);
	КонецЕсли;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
						
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров, СтруктураРезультатаВыполнения)
		
	Если СтруктураПараметров = Неопределено ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	Если СтруктураПараметров <> Неопределено И (СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") 
			И СтруктураПараметров.ОчищатьНекорректныеЗначения) Тогда
		ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(Объект, Объект.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3", 
	                                                        Объект.СубконтоЗатратБУ1, Объект.СубконтоЗатратБУ2, Объект.СубконтоЗатратБУ3));		
		ПроверитьВладельцаСубконтоПодразделениеНУ(Объект);
	КонецЕсли; 
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВладельцаСубконтоПодразделениеНУ(Объект)
	
	Для Индекс = 1 По 3 Цикл
		
		Если ТипЗнч(Объект["СубконтоЗатратНУ" + Индекс]) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			
			ВладелецСубконто = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект["СубконтоЗатратНУ" + Индекс], "Владелец");
			Если ВладелецСубконто = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			              
			Если Объект.Организация <> ВладелецСубконто Тогда
				Объект["СубконтоЗатратНУ" + Индекс] = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			КонецЕсли; 
		
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры
    
&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения = Неопределено)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	//Очистить ТЧ "НомерГТД", так как могла быть уже заполнена по остаткам другой организации	
	Если Объект.НомераГТД.Количество() > 0 И ВедетсяУчетПоТоварамОрганизацийБУ Тогда
		Объект.НомераГТД.Очистить();		
	КонецЕсли;     
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);

	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	Если СтруктураПараметров.Свойство("ПерезаполнитьСчетаУчета") И СтруктураПараметров.ПерезаполнитьСчетаУчета Тогда 
		ЗаполнитьСчетаУчетаНаСервере();	
	Иначе
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратБУ", "СчетЗатратБУ");
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ЗатратНУ", "СчетЗатратНУ");
	КонецЕсли;
	
	// после удаления вопроса об очистке подразделений при изменении СП, данное условие можно будет удалить
	Если СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда

		ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(Объект, 
		                                        Объект.Организация, 
		                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
		                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
		                                                        "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3", 
		                                                        Объект.СубконтоЗатратБУ1, Объект.СубконтоЗатратБУ2, Объект.СубконтоЗатратБУ3));
																
		ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(Объект, 
		                                        Объект.Организация, 
		                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
		                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
		                                                        "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
		                                                        Объект.СубконтоЗатратНУ1, Объект.СубконтоЗатратНУ2, Объект.СубконтоЗатратНУ3));
																
	КонецЕсли;

	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()   
	
	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);	
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
	ВедетсяУчетПоТоварамОрганизацийБУ = НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Объект.Дата);
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьСчетаУчетаНаСервере(ТолькоСчетаРасчетов = Ложь)
	
	Если НЕ ТолькоСчетаРасчетов Тогда
		
		Если Объект.Материалы.Количество() > 0 Тогда
			Документы.ТребованиеНакладная.ЗаполнитьСчетаУчетаЗатратВТабличнойЧасти(Объект, "Материалы");
		КонецЕсли;
		Если Объект.МатериалыЗаказчика.Количество() > 0 Тогда
			Документы.ТребованиеНакладная.ЗаполнитьСчетаУчетаЗатратВТабличнойЧасти(Объект, "МатериалыЗаказчика");
		КонецЕсли;
				
	КонецЕсли; 
		
	Документы.ТребованиеНакладная.ЗаполнитьСчетаУчетаЗатрат(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущийДокументОснование = Объект.ДокументОснование;
	ТекущийСклад = Объект.Склад;
	ТекущаяНоменклатура = Объект.Номенклатура;
					
	ПоказыватьВДокументахСчетаУчета = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ПоказыватьВДокументахСчетаУчета");
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);

		Объект.УчитыватьКПН = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
							
		Если НЕ ЗначениеЗаполнено(Объект.СчетЗатратБУ) Тогда
			
			Объект.СчетЗатратБУ = ПланыСчетов.Типовой.ОсновноеПроизводство;
			
			Объект.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Объект.СчетЗатратБУ));
			
			ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
			"СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");

			ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатратБУ, Объект, ПоляФормы);

			ЗаголовкиПолей	= Новый Структура("Субконто1, Субконто2, Субконто3",
			"ЗаголовокСубконтоЗатратБУ1", "ЗаголовокСубконтоЗатратБУ2", "ЗаголовокСубконтоЗатратБУ3"); 
			
			УстановитьЗаголовкиИДоступностьСубконто(Объект.СчетЗатратБУ, ПоляФормы, ЗаголовкиПолей, Объект.СчетЗатратНУ);    
			
			ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
			"СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");

			ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатратНУ, Объект, ПоляФормы);
			
		КонецЕсли;     
		
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);

	КонецЕсли;
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);     	
	
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
		
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
	//ИнтеграцияИСМПТК
	ИнтеграцияИСМПТКПереопределяемый.ОбновитьРеквизитыИСМПТ(ЭтаФорма);
	//Конец ИнтеграцияИСМПТК
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.УчитыватьКПН.Видимость = Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	Элементы.ВидУчетаНУ.Видимость          = Объект.УчитыватьКПН;
	Элементы.ДекорацияВидУчетаНУ.Видимость = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	
	Элементы.ГруппаСчетАналитикаЗатратНУ.Видимость = Объект.УчитыватьКПН;
    Элементы.ГруппаСчетаУчетаЗатрат.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
	Элементы.МатериалыОткрытьНомераГТД.Видимость = Форма.ВедетсяУчетПоТоварамОрганизацийБУ;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиИДоступностьСубконто(СчетУчета, ПоляФормы, ЗаголовкиПолей, СчетНУ = Неопределено, ЭтоТаблица = Ложь)
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетУчета, ЭтаФорма, ПоляФормы, ЗаголовкиПолей);
	
	Если НЕ СчетНУ = Неопределено Тогда
		
		Для Каждого ПолеФормы Из ПоляФормы Цикл
			ПоляФормы.Вставить(ПолеФормы.Ключ, СтрЗаменить(ПолеФормы.Значение, "БУ", "НУ"));
		КонецЦикла;
		
		Для Каждого ЗаголовоеПоля Из ЗаголовкиПолей Цикл
			ЗаголовкиПолей.Вставить(ЗаголовоеПоля.Ключ, СтрЗаменить(ЗаголовоеПоля.Значение, "БУ", "НУ"));
		КонецЦикла;
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(СчетНУ, ЭтаФорма, ПоляФормы, ЗаголовкиПолей);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
		
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УправлениеФормой(ЭтаФорма);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьПараметрыВыбораНоменклатуры(ДокументОснование)
	
	МассивНоменклатуры = Новый Массив();
		
	Если НЕ ЗначениеЗаполнено(ДокументОснование) ИЛИ (ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	            	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетПроизводстваЗаСменуПродукция.Номенклатура
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСменуПродукция
	|ГДЕ
	|	ОтчетПроизводстваЗаСменуПродукция.Ссылка.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаНоменклатуры = РезультатЗапроса.Выбрать();
		Пока ВыборкаНоменклатуры.Следующий() Цикл
			МассивНоменклатуры.Добавить(ВыборкаНоменклатуры.Номенклатура);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивНоменклатуры;
	
КонецФункции    

&НаКлиенте
Процедура ПослеВводаКоличестваПродукции(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = 0 Тогда
		Результат = 1;
	КонецЕсли; 
	
	Параметры = Новый Структура("КоличествоПродукции", Результат);
	
	Если Объект.Материалы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Очистить табличную часть ""Материалы"" перед заполнением?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчисткиМатериалов", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		Возврат
	КонецЕсли;
	
	ПослеЗакрытияВопросаОчисткиМатериаловНаСервере(Результат);
	
КонецПроцедуры
    
&НаКлиенте
Процедура ПослеЗакрытияВопросаОчисткиМатериалов(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
        Объект.Материалы.Очистить();
	КонецЕсли;
	
	ПослеЗакрытияВопросаОчисткиМатериаловНаСервере(Параметры.КоличествоПродукции);
	
КонецПроцедуры
 
&НаСервере
Процедура ПослеЗакрытияВопросаОчисткиМатериаловНаСервере(КоличествоПродукции)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка.Количество <> 0
	|			ТОГДА СпецификацииНоменклатурыИсходныеКомплектующие.Количество / СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка.Количество * &КоличествоПродукции
	|		ИНАЧЕ СпецификацииНоменклатурыИсходныеКомплектующие.Количество * &КоличествоПродукции
	|	КОНЕЦ КАК Количество,
	|	СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура
	|ИЗ
	|	РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СпецификацииНоменклатуры.ИсходныеКомплектующие КАК СпецификацииНоменклатурыИсходныеКомплектующие
	|		ПО ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры = СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка
	|ГДЕ
	|	СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Номенклатура", Объект.Номенклатура);
	Запрос.УстановитьПараметр("КоличествоПродукции", КоличествоПродукции);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаРезультатовЗапроса = РезультатЗапроса.Выбрать();
	Пока ВыборкаРезультатовЗапроса.Следующий() Цикл
		НаваяСтрока = Объект.Материалы.Добавить();
		НаваяСтрока.Номенклатура = ВыборкаРезультатовЗапроса.Номенклатура;
		НаваяСтрока.Количество = ВыборкаРезультатовЗапроса.Количество;
		НаваяСтрока.ЕдиницаИзмерения = ВыборкаРезультатовЗапроса.Номенклатура.БазоваяЕдиницаИзмерения;
		НаваяСтрока.Коэффициент = 1;
		Документы.ТребованиеНакладная.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Объект.Организация, НаваяСтрока, Объект.УчитыватьКПН);
	КонецЦикла;   	
	
	Документы.ТребованиеНакладная.ЗаполнитьСчетаУчетаЗатрат(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		РаботаСДиалогамиКлиент.ПоказатьВопросОбОчисткеНекорректныхЗначенийПодразделения(ЭтаФорма, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура МатериалыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта)
	
	МетаданныеДокумента = ПараметрыОбъекта.Ссылка.Метаданные();
	
	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ПараметрыОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения  = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент	   = СведенияОНоменклатуре.Коэффициент;
		
	Документы.ТребованиеНакладная.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Объект.Организация, СтрокаТабличнойЧасти, Объект.УчитыватьКПН); 
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ИмяТабличнойЧасти = "")
	
	Если ИмяТабличнойЧасти = "" Тогда
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	
		
	Иначе
		Если Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока <> Неопределено Тогда
			СтрокаТаблицы = Форма.Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока);
					
			ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяТабличнойЧасти + "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", 				  ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", 			  ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров; 

КонецФункции

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
		
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);	
	
КонецПроцедуры

&НаСервере
Процедура МатериалыЗаказчикаНоменклатураПриИзмененииНаСервере(ТекущиеДанные)
	
	СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, ТекущиеДанные.Номенклатура);
	
	ТекущиеДанные.Счет          = СчетаУчета.СчетУчетаДавСырья;
	ТекущиеДанные.СчетПередачи 	= СчетаУчета.СчетПередачиЗаб;
	
КонецПроцедуры

&НаСервере
Процедура МатериалыЗаказчикаСчетПриИзмененииНаСервере(ДанныеСтрокиТаблицы)
	
	СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, ДанныеСтрокиТаблицы.Номенклатура);
	
	ДанныеСтрокиТаблицы.СчетПередачи = СчетаУчета.СчетПередачиЗаб;      
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	ПредставлениеТаблицы = НСтр("ru = '" + ИмяТаблицы + "'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов"            , ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация"             , Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Склад"                   , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , ИмяТаблицы);
	ПараметрыФормы.Вставить("ЕстьЦена"                , Ложь);
	ПараметрыФормы.Вставить("ВыбиратьВсе"             , Истина);
	ПараметрыФормы.Вставить("Товар"                   , Истина);
			
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику", "По справочнику");
	СписокЗапросов.Добавить("ОстаткиИЦеныНоменклатуры", "Остатки и цены номенклатуры");
	
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "Материалы" И ИмяТаблицы <> "МатериалыЗаказчика" Тогда
		// Ошибочное имя табличной части
		Возврат;
	КонецЕсли;
	
	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	
	СписокСвойств = Неопределено;
	
	Если ЭтоВставкаИзБуфера Тогда 		
		ТаблицаМатериалов = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;			
	Иначе                                                   		
		ТаблицаМатериалов = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);		
	КонецЕсли;
	
	
	ПараметрыОбъекта  = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, УчитыватьКПН, Склад");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	СведенияОСпискеНоменклатуры = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
	ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаМатериалов, "Номенклатура", Истина), Объект);
	
	СтрокиДляЗаполненияСчетов = Новый Массив;
	Для Каждого СтрокаТовара Из ТаблицаМатериалов Цикл
		
		СтрокаТабличнойЧасти = Неопределено;
		
		Если Не ЭтоВставкаИзБуфера Тогда
			
			// Ищем выбранную позицию в таблице подобранной номенклатуры.
			//  Если найдем - увеличим количество; не найдем - добавим новую строку.
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
			Если ИмяТаблицы = "Материалы" Тогда
				СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
			КонецЕсли;
			
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
		Иначе
			
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТовара.Номенклатура);
			
			Если ЭтоВставкаИзБуфера 
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга)
				И СведенияОНоменклатуре.Услуга Тогда  				
				Продолжить;				
			КонецЕсли; 				
			
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);		
			
			Если ИмяТаблицы = "Материалы" Тогда
				СтрокаТабличнойЧасти.Коэффициент = 1;
				СтрокаТабличнойЧасти.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Объект[ИмяТаблицы]);
				МатериалыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ПараметрыОбъекта);
			Иначе
				МатериалыЗаказчикаНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетов.Количество();
		
	КонецЕсли; 	

	
КонецПроцедуры                                                                                     

&НаКлиенте
Процедура ПроверитьФлагиПредседателя(СтрокаТЧ)
    
	СтрокаПредседателя = ?(СтрокаТЧ <> Неопределено И СтрокаТЧ.Председатель, СтрокаТЧ, Неопределено);
	
	Для Каждого СтрокаКомиссии Из Объект.ИнвентаризационнаяКомиссия Цикл
		
		Если СтрокаКомиссии.Председатель И СтрокаПредседателя = Неопределено Тогда
			СтрокаПредседателя = СтрокаКомиссии;
			Продолжить;
		КонецЕсли;	
		
		Если СтрокаКомиссии.Председатель И СтрокаКомиссии <> СтрокаПредседателя Тогда
			СтрокаКомиссии.Председатель = Ложь;
		КонецЕсли;	
		
	КонецЦикла;	

	Если СтрокаПредседателя = Неопределено И Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере()
	
	ИсходныеДанные = Новый Структура("Организация, СтруктурноеПодразделение");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	Документы.ТребованиеНакладная.ЗаполнитьПоДокументуОснования(Объект, Объект.ДокументОснование);
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
	
	ПриИзмененииЗначенияОрганизацииСервер(ПараметрыОбработки);
	
	УправлениеФормой(ЭтаФорма);
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетЗатратБУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3", 
	                                                        ДанныеОбъекта.СубконтоЗатратБУ1, ДанныеОбъекта.СубконтоЗатратБУ2, ДанныеОбъекта.СубконтоЗатратБУ3));
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
	                                                        ДанныеОбъекта.СубконтоЗатратНУ1, ДанныеОбъекта.СубконтоЗатратНУ2, ДанныеОбъекта.СубконтоЗатратНУ3));
															
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СчетЗатратНУПриИзмененииНаСервере(ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ДанныеОбъекта, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
	                                                        ДанныеОбъекта.СубконтоЗатратНУ1, ДанныеОбъекта.СубконтоЗатратНУ2, ДанныеОбъекта.СубконтоЗатратНУ3));

КонецПроцедуры

&НаСервере
Функция ПараметрыФормыРедактированияНомеровГТД()
	
	Возврат НомераГТДСервер.ЗаполнитьПараметрыФормыРедактированияНомеровГТД(Объект, ЭтаФорма, "Материалы");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьНомераГТД(АдресНомераГТД)		
	
	Если НЕ АдресНомераГТД = Неопределено Тогда
		ТабЗначНомераГТД = ПолучитьИзВременногоХранилища(АдресНомераГТД);
		Объект.НомераГТД.Загрузить(ТабЗначНомераГТД);
		Модифицированность = Истина;
	КонецЕсли;  
	
КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаМатериалы" Тогда
		
		ИмяТаблицы = "Материалы";
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаМатериалыЗаказчика" Тогда
		
		ИмяТаблицы = "МатериалыЗаказчика";
		
	КонецЕсли;

	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;  
	
	Если ПараметрыВставки.ИмяТаблицы = "Материалы" Тогда
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("ЕдиницаИзмерения");
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах И ПараметрыВставки.ИсточникИДокументОдногоВида Тогда 			
			СписокСвойств.Добавить("СчетБУ");		
			СписокСвойств.Добавить("СчетНУ");	
		КонецЕсли;		
		
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "МатериалыЗаказчика" Тогда
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Количество");
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах И ПараметрыВставки.ИсточникИДокументОдногоВида Тогда 			
			СписокСвойств.Добавить("Счет");		
			СписокСвойств.Добавить("СчетПередачи");		
		КонецЕсли; 
		
		ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	КонецЕсли; 	
	         	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
	ПараметрыВставки.Данные, СписокСвойств);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.МатериалыВставитьСтроки.Доступность				         = Доступность;
	Элементы.МатериалыКонтекстноеМенюВставитьСтроки.Доступность		     = Доступность;
	Элементы.МатериалыЗаказчикаВставитьСтроки.Доступность				 = Доступность;
	Элементы.МатериалыЗаказчикаКонтекстноеМенюВставитьСтроки.Доступность = Доступность;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы);
			
КонецПроцедуры

#КонецОбласти

#Область СсылкаНаЭДВС

&НаКлиенте
Процедура СсылкаНаЭДВСНажатие(Элемент)
	
	Если СписокЭДВС.Количество() > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"ОбщаяФорма.ПросмотрСпискаДокументов",
			Новый Структура("СписокДокументов, Заголовок",
				СписокЭДВС,
				НСтр("ru='Документы (%КоличествоДокументов%)'")
			),
			ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	Иначе
		ПоказатьЗначение( ,СписокЭДВС[0].Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиЭДВСИЗаполнитьСсылкуНаСервере()
	
	УчетНДСИАкциза.НайтиЭДВСИЗаполнитьСсылку(Объект.Ссылка, Элементы.СсылкаНаЭДВС, СписокЭДВС);
	
КонецПроцедуры

#КонецОбласти

//ИнтеграцияИСМПТК
#Область РаботаСУведомлениемОВводеВОборот

&НаКлиенте
Процедура НадписьИСМПТНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияИСМПТККлиент.ОткрытьДокументИСМПТ_ДокументОснование(ЭтаФорма, ЭтаФорма.ДанныеДокументаИСМПТ);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиИСМПТНаСервере()

	ЭтаФорма.ДокументИСМПТСсылка = Неопределено;
	ИнтеграцияИСМПТКПереопределяемый.ОбновитьРеквизитыИСМПТ(ЭтаФорма);

КонецПроцедуры

#КонецОбласти
//Конец ИнтеграцияИСМПТК
