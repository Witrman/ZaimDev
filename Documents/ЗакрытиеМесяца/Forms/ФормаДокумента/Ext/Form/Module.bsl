&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.БУ.ТриСостояния = Истина;
	Элементы.НУ.ТриСостояния = Истина;	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
		//Дата = НачалоДня(КонецМесяца(Дата));
		УстановитьКомментарий();
	КонецЕсли;
				      
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗаписатьСостояниеСпискаВыполняемыхДействий();

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);

	
	Выборка =	РегистрыБухгалтерии.Типовой.ВыбратьПоРегистратору(Объект.Ссылка);
	
	Пока Выборка.Следующий() Цикл
	
	
	КонецЦикла; 
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Оповестить("Запись_ЗакрытиеМесяца");
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаКонецМесяца = КонецМесяца(Объект.Дата);
	
	Если День(Объект.Дата) <> День(ДатаКонецМесяца) Тогда
		Объект.Дата = НачалоДня(ДатаКонецМесяца);
	//	УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
	КонецЕсли;

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
		// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата,ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
		
	КонецЕсли;
	УстановитьКомментарий();

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	Если ТекущаяДатаДокумента >= Дата(2019, 1, 1) Тогда
		Объект.РасчетВычетаПоРеализованнымТоварам = Ложь;
	КонецЕсли;
	
	ЗаписатьСостояниеСпискаВыполняемыхДействий();		
	
	ФормированиеДереваВыполняемыхОпераций();

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ИМЯ ТАБЛИЦЫ ФОРМЫ>

&НаКлиенте
Процедура БУПриИзменении(Элемент)
	
	ПриИзменениеФлажкаНаКлиенте("БУ");
	УправлениеФормой(ЭтотОбъект);
	            
КонецПроцедуры

&НаКлиенте
Процедура НУПриИзменении(Элемент)
	
	ПриИзменениеФлажкаНаКлиенте("НУ");	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	ВключитьВыключитьФлажки(Ложь);
	ФормированиеДереваВыполняемыхОпераций();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	ВключитьВыключитьФлажки(Истина);
	ФормированиеДереваВыполняемыхОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура СправкаРасчет(Команда)
	
	Справка 	= СтрЗаменить(Команда.Имя,"ОткрытьОтчет","");
	СписокСтруктурныхЕдиниц = Новый СписокЗначений;
	СписокСтруктурныхЕдиниц.Добавить(Объект.Организация);
	ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
	
	СписокПодразделений = Новый СписокЗначений;
	СписокСтруктурныхЕдиниц.Добавить(Объект.СтруктурноеПодразделение);

	ПредставлениеСпискаПодразделений = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокПодразделений);

	ФормаОтчета = ПолучитьФорму("Отчет." + Справка + ".Форма.ФормаОтчета");
	ФормаОтчета.ОткрытьИСформировать(Новый Структура("СписокСтруктурныхЕдиниц, ПредставлениеСпискаОрганизаций,СписокПодразделений,ПредставлениеСпискаПодразделений, НачалоПериода, КонецПериода,Период,НаборПоказателейОтчета,ВыводитьЗаголовок,ВыводитьПодвал,СНачалаГода",
	   СписокСтруктурныхЕдиниц,ПредставлениеСпискаОрганизаций, СписокПодразделений,ПредставлениеСпискаПодразделений,
		НачалоМесяца(Объект.Дата),
		КонецМесяца(Объект.Дата),
		,
		1,
		Истина,
		Истина,
		Ложь));

	КонецПроцедуры
	
&НаКлиенте
Процедура ВыполнитьОперацию(Команда)
	
	ВыполнитьОперациюНаКлиенте(Команда.Имя = "ВыполнитьОперациюИЗакрыть");
	РазблокироватьДанныеФормыДляРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВалюты(Команда)
	
	Если НЕ Объект.КурсыВалют.Количество() = 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьКурсыВалют", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		ЗаполнитьВалютыНаСервере(); 
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ           

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета	= ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	ВедениеУчетаВременныхРазницБалансовымМетодом = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Объект.Организация, Объект.Дата);

	КурсыВалютИзРегистраСведений = (Объект.КурсыВалют.Количество() = 0);

	ФормированиеДереваВыполняемыхОпераций();
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, , Истина, СтруктураРезультатаВыполненияПриИзмененииДаты);	
	
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаСервере
Функция ФормированиеДереваВыполняемыхОпераций()
	
	ДеревоОпераций = ДанныеФормыВЗначение(ДеревоВыполняемыхОпераций, Тип("ДеревоЗначений"));
	
	ДеревоОпераций.Строки.Очистить();
	
	ВедетсяУчетОсновныхСредств = ПолучитьФункциональнуюОпцию("ВедетсяУчетОсновныхСредств");
	ВедетсяУчетНМА   		   = ПолучитьФункциональнуюОпцию("ВедетсяУчетНМА");

	// АМОРТИЗАЦИЯ 	
	Если ВедетсяУчетНМА ИЛИ  ВедетсяУчетОсновныхСредств  Тогда
		// Амортизация ОС
		ВсеБУ  = 0; 
		КоличествоОпераций = 0;
		СтрокаГруппаДействий             = ДеревоОпераций.Строки.Добавить();
		СтрокаГруппаДействий.Действие    = "Начисление амортизации";
		Если ВедетсяУчетОсновныхСредств Тогда
			ВсеБУ              = ?(Объект.АмортизацияОСБУ,1,0);
			КоличествоОпераций = КоличествоОпераций+1; 
		КонецЕсли;
		Если ВедетсяУчетНМА Тогда
			ВсеБУ = ВсеБУ + ?(Объект.АмортизацияНМАБУ,1,0); 
			КоличествоОпераций = КоличествоОпераций+1; 
		КонецЕсли;		
		СтрокаГруппаДействий.БУ          = ?(ВсеБУ = 0,0,?(ВсеБУ= КоличествоОпераций,1,2)); 		
	КонецЕсли;
	
	Если ВедетсяУчетОсновныхСредств  Тогда 			
		Строка = СтрокаГруппаДействий.Строки.Добавить();
		Строка.Действие      = "Начисление амортизации ОС";
		Строка.БУ            = ?(Объект.АмортизацияОСБУ,1,0);
	Иначе
		Объект.АмортизацияОСБУ = Ложь;
	КонецЕсли;
	
	Если ВедетсяУчетНМА  Тогда			
		// Амортизация НМА
		Строка = СтрокаГруппаДействий.Строки.Добавить();
		Строка.Действие      = "Начисление амортизации НМА";
		Строка.БУ            = ?(Объект.АмортизацияНМАБУ,1,0);	
	Иначе
		Объект.АмортизацияНМАБУ = Ложь;			
	КонецЕсли;  
		
	Если ВедетсяУчетОсновныхСредств  Тогда 	
		// СПИСАНИЕ РЕЗЕРВА ПО ПРЕОЦЕНКЕ ОС
		Строка               = ДеревоОпераций.Строки.Добавить();
		Строка.Действие      = "Списание резерва по переоценке ОС";
		Строка.БУ            = ?(Объект.СписаниеРезерваПоПереоценкеОСБУ,1,0);		
	Иначе
		Объект.СписаниеРезерваПоПереоценкеОСБУ = Ложь;		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет")  Тогда 			
		// ПЕРЕОЦЕНКА ВАЛЮТНЫХ СРЕДСТВ
		Строка               = ДеревоОпераций.Строки.Добавить();
		Строка.Действие      = "Переоценка валютных средств";
		Строка.БУ            = ?(Объект.ПереоценкаВалютныхСредствБУ,1,0);
	Иначе
		Объект.ПереоценкаВалютныхСредствБУ = Ложь;		
	КонецЕсли;
	      		
	// СПИСАНИЕ РБП
	Строка = ДеревоОпераций.Строки.Добавить();
	Строка.Действие   	 = "Списание расходов будущих периодов";
	Строка.БУ            = ?(Объект.СписаниеРБПБУ,1,0);
	
	Если ПолучитьФункциональнуюОпцию("ВедетсяПроизводственнаяДеятельность")  Тогда 	
		
		// ПРОИЗВОДСТВО
		СтрокаГруппаДействий             = ДеревоОпераций.Строки.Добавить();
		СтрокаГруппаДействий.Действие    = "Закрытие производственных счетов";
		
		ВсеБУ                            = ?(Объект.РасчетСтоимостиПродукцииБУ,1,0) 									 
		+ ?(Объект.ПереносНЗПБУ,1,0) ; 
		СтрокаГруппаДействий.БУ          = ?(ВсеБУ = 0,0,?(ВсеБУ= 2,1,2));
		
		
		Если ВедениеУчетаВременныхРазницБалансовымМетодом  Тогда
			ВсеНУ                            = ?(Объект.РасчетСтоимостиПродукцииНУ,1,0) 									 
			+ ?(Объект.ПереносНЗПНУ,1,0) ; 
			
			СтрокаГруппаДействий.НУ          = ?(ВсеНУ = 0,0,?(ВсеНУ= 2,1,2)); 
		КонецЕсли;
		
		// Расчет и корректировка себестоимости продукции (услуг)
		Строка = СтрокаГруппаДействий.Строки.Добавить();
		Строка.Действие    = "Расчет и корректировка себестоимости продукции (услуг)";
		Строка.БУ                        = ?(Объект.РасчетСтоимостиПродукцииБУ,1,0);
		Если ВедениеУчетаВременныхРазницБалансовымМетодом  Тогда
			Строка.НУ                        = ?(Объект.РасчетСтоимостиПродукцииНУ,1,0);
		КонецЕсли;
		
		// Перенос незавершенного производства
		Строка = СтрокаГруппаДействий.Строки.Добавить();
		Строка.Действие    = "Перенос незавершенного производства";
		Строка.БУ                        = ?(Объект.ПереносНЗПБУ,1,0);
		
		Если ВедениеУчетаВременныхРазницБалансовымМетодом  Тогда			
			Строка.НУ                      = ?(Объект.ПереносНЗПНУ,1,0);
		КонецЕсли; 	  
	Иначе
		Объект.РасчетСтоимостиПродукцииБУ = Ложь;
		Объект.РасчетСтоимостиПродукцииНУ = Ложь;
		Объект.ПереносНЗПБУ				  = Ложь;
		Объект.ПереносНЗПНУ 			  = Ложь;		
	КонецЕсли;
			
	// ЗАКРЫТИЕ СЧЕТОВ БУ
	ВсеБУ = ?(Объект.РеформацияБалансаБУ,1,0) + ?(Объект.РасчетИтоговогоДоходаУбыткаБУ,1,0);
	ВсеНУ = ?(Объект.РасчетИтоговогоДоходаУбыткаНУ,1,0);
	
	СтрокаГруппаДействий = ДеревоОпераций.Строки.Добавить();
	СтрокаГруппаДействий.Действие    = "Закрытие счетов бухгалтерского учета";
	
	СтрокаГруппаДействий.БУ =  ?(ВсеБУ = 0, 0, ?(ВсеБУ = 2,1,2));
	СтрокаГруппаДействий.НУ =  ?(ВсеНУ = 0, 0, ?(ВсеНУ = 1,1,2));
		
	Строка = СтрокаГруппаДействий.Строки.Добавить();
	Строка.Действие      = "Расчет итогового дохода убытка";
	Строка.БУ            = ?(Объект.РасчетИтоговогоДоходаУбыткаБУ,1,0);
	Строка.НУ            = ?(Объект.РасчетИтоговогоДоходаУбыткаНУ,1,0);
	
	Строка = СтрокаГруппаДействий.Строки.Добавить();
	Строка.Действие      = "Реформация баланса";
	Строка.БУ            = ?(Объект.РеформацияБалансаБУ,1,0);	
	
	// РАСЧЕТЫ ПО НДС
	СтрокаГруппаДействий = ДеревоОпераций.Строки.Добавить();
	СтрокаГруппаДействий.Действие    = "Расчеты по НДС";
	ВсеБУ = ?(Объект.РасчетНДСКЗачету,1,0)+ ?(Объект.ЗачетАвансовИПереплатПоНДС,1,0);
	СтрокаГруппаДействий.БУ = ?(ВсеБУ = 0, 0, ?(ВсеБУ = 2, 1, 1));
	
	Строка = СтрокаГруппаДействий.Строки.Добавить();
	Строка.Действие      = "Зачет НДС к возмещению";
	Строка.БУ            = ?(Объект.РасчетНДСКЗачету,1,0);
	
	Строка = СтрокаГруппаДействий.Строки.Добавить();
	Строка.Действие      = "Зачет авансов и переплат по НДС";
	Строка.БУ            = ?(Объект.ЗачетАвансовИПереплатПоНДС,1,0);
	
	// Закрытие подотчетных сумм
	Строка               = ДеревоОпераций.Строки.Добавить();
	Строка.Действие      = "Закрытие подотчетных сумм";
	Строка.БУ            = ?(Объект.ЗакрытиеПодотчетныхСуммБУ,1,0);	
	
	// Зачет авансовых платежей по налогам и сборам
	Строка               = ДеревоОпераций.Строки.Добавить();
	Строка.Действие      = "Зачет авансовых платежей по налогам и сборам";
	Строка.БУ            = ?(Объект.ЗачетАвансовыхПлатежейПоНалогамИСборамБУ,1,0);	
	Строка.НУ            = ?(Объект.ЗачетАвансовыхПлатежейПоНалогамИСборамНУ,1,0);	
	
	// РЕГЛАМЕНТНЫЕ ОПЕРАЦИИ ПО НАЛОГОВОМУ УЧЕТУ
	СтрокаГруппаДействий             = ДеревоОпераций.Строки.Добавить();
	СтрокаГруппаДействий.Действие    = "Регламентные операции налогового учета";
	
	ВсеНУ = ?(Объект.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА,1,0) + ?(Объект.АмортизацияФАНУ,1,0) + 
		?(Объект.РасчетВычетовПоРасходамНаРемонт,1,0) + ?(Объект.СписаниеПриВыбытииВсехФАГруппы,1,0)+ 
		?(Объект.СписаниеСтоимостногоБалансаГруппыМенееМинимума,1,0) + ?(Объект.ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно,1,0) + ?(Объект.РасчетВычетовПоПреференциям,1,0) 				
		+ ?(Объект.РасчетВычетаПоРеализованнымТоварам,1,0) + ?(Объект.РасчетВычетовПоНалогам,1,0);
		
	Если Объект.Дата < Дата(2019, 1, 1) ИЛИ Объект.РасчетВычетаПоРеализованнымТоварам Тогда
		УчитыватьРасчетВычетаПоРеализованнымТоварам = 1;
	Иначе
		УчитыватьРасчетВычетаПоРеализованнымТоварам = 0;
	КонецЕсли;
		
	СтрокаГруппаДействий.НУ = ?(ВсеНУ = ?(ВедетсяУчетОсновныхСредств,8+УчитыватьРасчетВычетаПоРеализованнымТоварам,2), 1, ?(ВсеНУ > 0,1+УчитыватьРасчетВычетаПоРеализованнымТоварам,0));
	
	Если ВедетсяУчетОсновныхСредств  Тогда 
		
		СтрокаФА             = СтрокаГруппаДействий.Строки.Добавить();
		СтрокаФА.Действие      = "Расчет доходов и вычетов по фиксированным активам (НУ)";	
		
		ВсеФА = ?(Объект.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА,1,0) + ?(Объект.АмортизацияФАНУ,1,0) + 
		?(Объект.РасчетВычетовПоРасходамНаРемонт,1,0) + ?(Объект.СписаниеПриВыбытииВсехФАГруппы,1,0)+ ?(Объект.СписаниеСтоимостногоБалансаГруппыМенееМинимума,1,0);
		
		СтрокаФА.НУ          = ?(ВсеФА = 5, 1,?(ВсеФА > 0,2,0));	;
		
		Строка               = СтрокаФА.Строки.Добавить();
		Строка.Действие      = "Расчет дохода от превышения стоимости выбывших ФА (НУ)";
		Строка.НУ            = ?(Объект.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА,1,0);	
		
		Строка               = СтрокаФА.Строки.Добавить();
		Строка.Действие      = "Списание стоимостного баланса при выбытии всех ФА группы (подгруппы)";
		Строка.НУ            = ?(Объект.СписаниеПриВыбытииВсехФАГруппы,1,0);	
		
		Строка               = СтрокаФА.Строки.Добавить();
		Строка.Действие      = "Списание стоимостного баланса группы менее установленного минимума";
		Строка.НУ            = ?(Объект.СписаниеСтоимостногоБалансаГруппыМенееМинимума,1,0);	
		
		Строка               = СтрокаФА.Строки.Добавить();
		Строка.Действие      = "Амортизация фиксированных активов (НУ)";
		Строка.НУ            = ?(Объект.АмортизацияФАНУ,1,0);	
		
		Строка               = СтрокаФА.Строки.Добавить();
		Строка.Действие      = "Расчет вычетов по расходам на ремонт ФА(НУ)";
		Строка.НУ            = ?(Объект.РасчетВычетовПоРасходамНаРемонт,1,0);	
		
		Строка               = СтрокаФА.Строки.Добавить();
		Строка.Действие      = "Расчет вычетов по преференциям ФА(НУ)";
		Строка.НУ            = ?(Объект.РасчетВычетовПоПреференциям,1,0);	
		
		Строка               = СтрокаГруппаДействий.Строки.Добавить();
		Строка.Действие      = "Включение активов, учитываемых отдельно, в стоимостный баланс групп (НУ)";
		Строка.НУ            = ?(Объект.ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно,1,0);
	Иначе
		Объект.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА   		 = Ложь;
		Объект.СписаниеПриВыбытииВсехФАГруппы 			     		 = Ложь;		
		Объект.СписаниеСтоимостногоБалансаГруппыМенееМинимума 		 = Ложь;
		Объект.АмортизацияФАНУ 								 		 = Ложь; 		
		Объект.РасчетВычетовПоРасходамНаРемонт 				 		 = Ложь;
		Объект.РасчетВычетовПоПреференциям 							 = Ложь; 		
		Объект.ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно = Ложь;
		
	КонецЕсли;
	
	Если Объект.Дата < Дата(2019, 1, 1) ИЛИ Объект.РасчетВычетаПоРеализованнымТоварам Тогда
		Строка = СтрокаГруппаДействий.Строки.Добавить();
		Строка.Действие      = "Расчет вычета по реализованным товарам";
		Строка.НУ            = ?(Объект.РасчетВычетаПоРеализованнымТоварам,1,0);
	Иначе
		Объект.РасчетВычетаПоРеализованнымТоварам = Ложь;
	КонецЕсли;
	
	Строка = СтрокаГруппаДействий.Строки.Добавить();
	Строка.Действие      = "Расчет вычета по налогам, уплаченным в бюджет";
	Строка.НУ            = ?(Объект.РасчетВычетовПоНалогам,1,0);

		
	// РАСЧЕТЫ ПО НАЛОГУ НА ПРИБЫЛЬ
	СтрокаГруппаДействий = ДеревоОпераций.Строки.Добавить();
	СтрокаГруппаДействий.Действие    = "Расчеты по налогу на прибыль";
	ВсеБУ = ?(Объект.РасчетВременныхРазниц,1,0)+ ?(Объект.РасчетНалогаНаПрибыль,1,0);
	СтрокаГруппаДействий.БУ = ?(ВсеБУ = 0, 0, ?(ВсеБУ = 2, 1, 1));
	
	Строка = СтрокаГруппаДействий.Строки.Добавить();
	Строка.Действие      = "Отложенные налоговые активы и обязательства";
	Строка.БУ            = ?(Объект.РасчетВременныхРазниц,1,0);
	
	Строка = СтрокаГруппаДействий.Строки.Добавить();
	Строка.Действие      = "Расчет налога на прибыль";
	Строка.БУ            = ?(Объект.РасчетНалогаНаПрибыль,1,0);
	
	//ЗАКРЫТИЕ СЧЕТОВ
	Если ПользователиБКВызовСервераПовтИсп.ДоступностьВыполненииОперацииЗакрытиеСчетовНУ() Тогда
		Строка = ДеревоОпераций.Строки.Добавить();
		Строка.Действие      = "Закрытие счетов НУ";
		Строка.НУ            = ?(Объект.ЗакрытиеСчетовНУ,1,0);
	КонецЕсли;
	
	ЗначениеВДанныеФормы(ДеревоОпераций, ДеревоВыполняемыхОпераций);
КонецФункции // ФормированиеДереваВыполняемыхОпераций()

&НаСервере
Процедура ЗаписатьСостояниеСпискаВыполняемыхДействий()

	ДеревоОпераций = ДанныеФормыВЗначение(ДеревоВыполняемыхОпераций, Тип("ДеревоЗначений"));

	НайденнаяСтрока = ДеревоОпераций.Строки.Найти("Начисление амортизации ОС", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Объект.АмортизацияОСБУ = Ложь;		
	Иначе
		Объект.АмортизацияОСБУ = НайденнаяСтрока.БУ;		
	КонецЕсли;
		
	НайденнаяСтрока = ДеревоОпераций.Строки.Найти("Начисление амортизации НМА", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Объект.АмортизацияНМАБУ = Ложь;			
	Иначе
		Объект.АмортизацияНМАБУ = НайденнаяСтрока.БУ;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоОпераций.Строки.Найти("Списание резерва по переоценке ОС", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Объект.СписаниеРезерваПоПереоценкеОСБУ = Ложь;			
	Иначе
		Объект.СписаниеРезерваПоПереоценкеОСБУ = НайденнаяСтрока.БУ;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоОпераций.Строки.Найти("Переоценка валютных средств", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Объект.ПереоценкаВалютныхСредствБУ = Ложь;		
	Иначе
		Объект.ПереоценкаВалютныхСредствБУ = НайденнаяСтрока.БУ;		
	КонецЕсли;
	
	
	НайденнаяСтрока = ДеревоОпераций.Строки.Найти("Списание расходов будущих периодов", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Объект.СписаниеРБПБУ = Ложь;		
	Иначе
		Объект.СписаниеРБПБУ = НайденнаяСтрока.БУ;		
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоОпераций.Строки.Найти("Расчет и корректировка себестоимости продукции (услуг)", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Объект.РасчетСтоимостиПродукцииБУ = Ложь;
		Объект.РасчетСтоимостиПродукцииНУ = Ложь;
	Иначе
		Объект.РасчетСтоимостиПродукцииБУ = НайденнаяСтрока.БУ;
		Объект.РасчетСтоимостиПродукцииНУ = НайденнаяСтрока.НУ;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоОпераций.Строки.Найти("Перенос незавершенного производства", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Объект.ПереносНЗПБУ = Ложь;
		Объект.ПереносНЗПНУ = Ложь; 
	Иначе
		Объект.ПереносНЗПБУ = НайденнаяСтрока.БУ;
		Объект.ПереносНЗПНУ = НайденнаяСтрока.НУ;							
	КонецЕсли;

	НайденнаяСтрока = ДеревоОпераций.Строки.Найти("Отложенные налоговые активы и обязательства", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Объект.РасчетВременныхРазниц = Ложь; 		
	Иначе
		Объект.РасчетВременныхРазниц = НайденнаяСтрока.БУ;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоОпераций.Строки.Найти("Расчет налога на прибыль", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Объект.РасчетНалогаНаПрибыль = Ложь;
	Иначе
		Объект.РасчетНалогаНаПрибыль = НайденнаяСтрока.БУ;
	КонецЕсли;
		
	НайденнаяСтрока = ДеревоОпераций.Строки.Найти("Расчет итогового дохода убытка", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Объект.РасчетИтоговогоДоходаУбыткаБУ = Ложь;
		Объект.РасчетИтоговогоДоходаУбыткаНУ = Ложь;
	Иначе
		Объект.РасчетИтоговогоДоходаУбыткаБУ = НайденнаяСтрока.БУ;
		Объект.РасчетИтоговогоДоходаУбыткаНУ = НайденнаяСтрока.НУ;
	КонецЕсли;	
	
		
	НайденнаяСтрока = ДеревоОпераций.Строки.Найти("Реформация баланса", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Объект.РеформацияБалансаБУ = Ложь;		
	Иначе
		Объект.РеформацияБалансаБУ = НайденнаяСтрока.БУ;		
	КонецЕсли;	
		
	НайденнаяСтрока = ДеревоОпераций.Строки.Найти("Зачет НДС к возмещению", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Объект.РасчетНДСКЗачету = Ложь;
	Иначе
		Объект.РасчетНДСКЗачету = НайденнаяСтрока.БУ;
	КонецЕсли;	
	
	НайденнаяСтрока = ДеревоОпераций.Строки.Найти("Зачет авансов и переплат по НДС", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Объект.ЗачетАвансовИПереплатПоНДС = Ложь;
	Иначе
		Объект.ЗачетАвансовИПереплатПоНДС = НайденнаяСтрока.БУ;
	КонецЕсли;	
	
	НайденнаяСтрока = ДеревоОпераций.Строки.Найти("Амортизация фиксированных активов (НУ)", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Объект.АмортизацияФАНУ = Ложь;
	Иначе
		Объект.АмортизацияФАНУ = НайденнаяСтрока.НУ;
	КонецЕсли;	

	НайденнаяСтрока = ДеревоОпераций.Строки.Найти("Расчет дохода от превышения стоимости выбывших ФА (НУ)", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Объект.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА = Ложь;
	Иначе
		Объект.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА = НайденнаяСтрока.НУ;
	КонецЕсли;	
	
		
	НайденнаяСтрока = ДеревоОпераций.Строки.Найти("Списание стоимостного баланса при выбытии всех ФА группы (подгруппы)", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Объект.СписаниеПриВыбытииВсехФАГруппы = Ложь;
	Иначе
		Объект.СписаниеПриВыбытииВсехФАГруппы = НайденнаяСтрока.НУ;
	КонецЕсли;	
	
	НайденнаяСтрока = ДеревоОпераций.Строки.Найти("Списание стоимостного баланса группы менее установленного минимума", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Объект.СписаниеСтоимостногоБалансаГруппыМенееМинимума = Ложь;
	Иначе
		Объект.СписаниеСтоимостногоБалансаГруппыМенееМинимума = НайденнаяСтрока.НУ;
	КонецЕсли;	

	НайденнаяСтрока = ДеревоОпераций.Строки.Найти("Расчет вычетов по преференциям ФА(НУ)", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Объект.РасчетВычетовПоПреференциям = Ложь;
	Иначе
		Объект.РасчетВычетовПоПреференциям = НайденнаяСтрока.НУ;
	КонецЕсли;	

	
	НайденнаяСтрока = ДеревоОпераций.Строки.Найти("Расчет вычетов по расходам на ремонт ФА(НУ)", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Объект.РасчетВычетовПоРасходамНаРемонт = Ложь;
	Иначе
		Объект.РасчетВычетовПоРасходамНаРемонт = НайденнаяСтрока.НУ;
	КонецЕсли;	
	
	НайденнаяСтрока = ДеревоОпераций.Строки.Найти("Включение активов, учитываемых отдельно, в стоимостный баланс групп (НУ)", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Объект.ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно = Ложь;
	Иначе
		Объект.ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно = НайденнаяСтрока.НУ;
	КонецЕсли;	
	
	НайденнаяСтрока = ДеревоОпераций.Строки.Найти("Расчет вычета по налогам, уплаченным в бюджет", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Объект.РасчетВычетовПоНалогам = Ложь;
	Иначе
		Объект.РасчетВычетовПоНалогам = НайденнаяСтрока.НУ;
	КонецЕсли;	
	
	НайденнаяСтрока = ДеревоОпераций.Строки.Найти("Расчет вычета по реализованным товарам", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Объект.РасчетВычетаПоРеализованнымТоварам = Ложь; 		
	ИначеЕсли Объект.Дата < Дата(2019, 1, 1) Тогда
		Объект.РасчетВычетаПоРеализованнымТоварам = НайденнаяСтрока.НУ;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоОпераций.Строки.Найти("Закрытие счетов НУ", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Объект.ЗакрытиеСчетовНУ = Ложь; 		
	Иначе
		Объект.ЗакрытиеСчетовНУ = НайденнаяСтрока.НУ;
	КонецЕсли;


	НайденнаяСтрока = ДеревоОпераций.Строки.Найти("Закрытие подотчетных сумм", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Объект.ЗакрытиеПодотчетныхСуммБУ = Ложь;
	Иначе
		Объект.ЗакрытиеПодотчетныхСуммБУ = НайденнаяСтрока.БУ;
	КонецЕсли;	
	
	НайденнаяСтрока = ДеревоОпераций.Строки.Найти("Зачет авансовых платежей по налогам и сборам", "Действие", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Объект.ЗачетАвансовыхПлатежейПоНалогамИСборамБУ = Ложь;
		Объект.ЗачетАвансовыхПлатежейПоНалогамИСборамНУ = Ложь;
	Иначе
		Объект.ЗачетАвансовыхПлатежейПоНалогамИСборамБУ = НайденнаяСтрока.БУ;
		Объект.ЗачетАвансовыхПлатежейПоНалогамИСборамНУ = НайденнаяСтрока.НУ;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Комментарий", Ложь);
	НайденныеСтроки = Объект.Ошибки.НайтиСтроки(ПараметрыОтбора);
	ЕстьОшибки = НайденныеСтроки.Количество() > 0;
	
	ПараметрыОтбора.Вставить("Комментарий", Истина);
	НайденныеСтроки = Объект.Ошибки.НайтиСтроки(ПараметрыОтбора);
	ЕстьКомментарии = НайденныеСтроки.Количество() > 0;
	
	Элементы.СписокОшибок.Видимость    = ЕстьОшибки;
	Элементы.ДекорацияОшибки.Видимость = ЕстьОшибки;	
	
	Элементы.СписокКомментариев.Видимость   = ЕстьКомментарии;
	Элементы.ДекорацияКомментарий.Видимость = ЕстьКомментарии;		
	
	ПоказыватьСтраницуНастройки = Ложь;
	
	//нужно найти строку переоценки, т.к. она верхний уровень, то вложенные строки искать не нужно
	Для Каждого ТекСтрока Из Форма.ДеревоВыполняемыхОпераций.ПолучитьЭлементы() Цикл			
		Если ТекСтрока.Действие = "Переоценка валютных средств" Тогда
			ПоказыватьСтраницуНастройки = ТекСтрока.БУ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ГруппаНастройки.Видимость = ПоказыватьСтраницуНастройки;
	Элементы.КурсыВалют.Видимость      = НЕ Форма.КурсыВалютИзРегистраСведений;

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
КонецПроцедуры 

&НаСервере
Процедура ВключитьВыключитьФлажки(Параметр)
	
	Объект.АмортизацияОСБУ                                 	= Параметр;		
	Объект.АмортизацияНМАБУ                                	= Параметр;		
	
	Объект.СписаниеРезерваПоПереоценкеОСБУ					= Параметр;
	
	Объект.ПереоценкаВалютныхСредствБУ                     	= Параметр;
	
	Объект.СписаниеРБПБУ                                   	= Параметр;
	
	Объект.РасчетСтоимостиПродукцииБУ                      	= Параметр;
	Объект.РасчетСтоимостиПродукцииНУ                      	= Параметр;
	
	Объект.ПереносНЗПБУ										= Параметр;
	Объект.ПереносНЗПНУ										= Параметр;
	
	Объект.РеформацияБалансаБУ                             	= Параметр;			
	
	Объект.РасчетИтоговогоДоходаУбыткаБУ					= Параметр;			
	Объект.РасчетИтоговогоДоходаУбыткаНУ					= Параметр;			
	
	Объект.АмортизацияФАНУ									= Параметр;			
	Объект.РасчетВычетовПоРасходамНаРемонт					= Параметр;			
	Объект.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА		= Параметр;			
	Объект.СписаниеПриВыбытииВсехФАГруппы					= Параметр;				
	Объект.СписаниеСтоимостногоБалансаГруппыМенееМинимума	= Параметр;			
	Объект.РасчетВычетаПоРеализованнымТоварам  				= Параметр;			
	Объект.ЗакрытиеСчетовНУ        							= Параметр;			
	
	Объект.ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно =  Параметр;			
	                            	
	Объект.РасчетВременныхРазниц		                    = Параметр;  		
	Объект.РасчетНалогаНаПрибыль                           	= Параметр;
	Объект.РасчетНДСКЗачету									= Параметр;
	Объект.ЗачетАвансовИПереплатПоНДС						= Параметр;
	
	Объект.ЗакрытиеПодотчетныхСуммБУ						= Параметр;
	
	Объект.ЗачетАвансовыхПлатежейПоНалогамИСборамБУ			= Параметр; 	
	Объект.ЗачетАвансовыхПлатежейПоНалогамИСборамНУ			= Параметр; 	
	
	Объект.РасчетВычетовПоНалогам							= Параметр; 	
	Объект.РасчетВычетовПоПреференциям						= Параметр;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
		
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Результат);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзменениеФлажкаНаКлиенте(ИмяКолонки)
	
	СтрокаДерева = Элементы.ДеревоВыполняемыхОпераций_.ТекущиеДанные;	
	Родитель = СтрокаДерева.ПолучитьРодителя();  	
	
	Если СтрокаДерева[ИмяКолонки] = 2  Тогда
		СтрокаДерева[ИмяКолонки] = 0;        
	КонецЕсли; 

	ПроверитьВозможностьУстановленияФлажка(ЭтаФорма,ИмяКолонки, СтрокаДерева);
		
	Если Родитель = Неопределено Тогда
		Для Каждого ТекСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл			
			ТекСтрока[ИмяКолонки] = СтрокаДерева[ИмяКолонки];
			ВложенныеСтроки = ТекСтрока.ПолучитьЭлементы();
			Если ВложенныеСтроки.Количество() <> 0 Тогда 
				Для Каждого ВложеннаяСтрока Из ВложенныеСтроки Цикл
					ВложеннаяСтрока[ИмяКолонки] = ТекСтрока[ИмяКолонки];					
				КонецЦикла;
			КонецЕсли; 
		КонецЦикла;
	Иначе							
		ВсеПризнаки = 0;
		КоличествоСтрок = 0;
		
		ВсеРодителя = 0;
		КоличествоСтрокРодителя = 0;
		РодительРодителя = Родитель.ПолучитьРодителя();
		
		Если РодительРодителя <> Неопределено Тогда
			Для Каждого ТекСтрока Из РодительРодителя.ПолучитьЭлементы() Цикл							
				Если ТекСтрока[ИмяКолонки] = 2  Тогда 
					Продолжить;
				КонецЕсли;   				
				ВсеРодителя             = ВсеРодителя + ТекСтрока[ИмяКолонки];
				КоличествоСтрокРодителя = КоличествоСтрокРодителя + 1;  			
			КонецЦикла;	
		КонецЕсли;

		Для Каждого ТекСтрока Из Родитель.ПолучитьЭлементы() Цикл					
			ВложенныеСтроки = ТекСтрока.ПолучитьЭлементы();
			Для Каждого ВложеннаяСтрока ИЗ ВложенныеСтроки Цикл
				ВложеннаяСтрока[ИмяКолонки] = ТекСтрока[ИмяКолонки];					
	        КонецЦикла;      			                                       			
			ВсеПризнаки = ВсеПризнаки + ТекСтрока[ИмяКолонки];			
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЦикла;
		
		Если ВсеПризнаки = 0 Тогда
			Родитель[ИмяКолонки]= 0;
			Если КоличествоСтрокРодителя <> 0 И ВсеРодителя = 0 Тогда 
				РодительРодителя[ИмяКолонки] = 0;
			КонецЕсли;
		ИначеЕсли ВсеПризнаки = КоличествоСтрок Тогда
			Родитель[ИмяКолонки] = 1;
		Иначе
			Родитель[ИмяКолонки] = 2;
			Если РодительРодителя <> Неопределено Тогда 
				РодительРодителя[ИмяКолонки]  = 2;
			КонецЕсли; 			
		КонецЕсли; 		          		
	КонецЕсли;  
	
КонецПроцедуры
	
&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Параметры)

	СтруктураРезультатаВыполнения = Неопределено;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
 Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
    
    Если СтруктураПараметров = Неопределено
        ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта")
                И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда
        РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
        УстановитьФункциональныеОпцииФормы();
    КонецЕсли;
  
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКомментарий()

	Объект.Комментарий = "Закрытие месяца за " + Формат( Объект.Дата, "ДФ='ММММ гггг'");


КонецПроцедуры // УстановитьКомментарий()

&НаКлиенте
Процедура СписокОшибокНажатие(Элемент)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СсылкаЗакрытиеМесяца", Объект.Ссылка);
	ПараметрыФормы.Вставить("Ошибки", Истина);
	
	ОткрытьФорму("Документ.ЗакрытиеМесяца.Форма.ФормаОшибок", ПараметрыФормы, Объект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура СписокКомментариевНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СсылкаЗакрытиеМесяца", Объект.Ссылка);
	ПараметрыФормы.Вставить("Ошибки", Ложь);
	
	ОткрытьФорму("Документ.ЗакрытиеМесяца.Форма.ФормаОшибок", ПараметрыФормы, Объект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура КурсыВалютКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.КурсыВалют.ТекущиеДанные;
	СтруктураПараметров = Новый Структура("Валюта", ТекущиеДанные.Валюта);
	СтруктураПараметров.Вставить("ДатаУстановкиКурсаИКратности", Объект.Дата);
	СтруктураПараметров.Вставить("КратностьВалюты", ТекущиеДанные.Кратность);
	СтруктураПараметров.Вставить("КурсВалюты", ТекущиеДанные.Курс);
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИмяРасшифровкиПлатежа", "КурсыВалют");
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКурсаКратности", ЭтотОбъект, ПараметрыОбъекта);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаКурсаИКратности", СтруктураПараметров,,,,, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура КурсыВалютПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элементы.КурсыВалют.ТекущиеДанные;
		ТекущиеДанные.Кратность = 1;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КурсыВалютПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		
		УсловияПоиска = Новый Структура("Валюта", Элементы.КурсыВалют.ТекущиеДанные.Валюта);
		Строки = Объект.КурсыВалют.НайтиСтроки(УсловияПоиска);
		
		Если Строки.Количество() > 1 Тогда
			
			Отказ = Истина;
			ТекстПредупреждения = НСтр("ru='Валюта %1 уже указана!'");
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", 
															Элементы.КурсыВалют.ТекущиеДанные.Валюта);
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Элементы.КурсыВалют.ТекущиеДанные.Валюта = Неопределено;
			ТекущийЭлемент = Элементы.КурсыВалютВалюта;
			
		КонецЕсли;	
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура КурсыВалютИзРегистраСведенийПриИзменении(Элемент)
	
	Если  КурсыВалютИзРегистраСведений  Тогда
		Если  НЕ Объект.КурсыВалют.Количество() = 0 Тогда
			ТекстВопроса = НСтр("ru='Курсы валют будут очищены. Продолжить?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчиститьКурсыВалют", ЭтотОбъект, Параметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		КонецЕсли;
	Иначе
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли; 	
		
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
// Процедуры и функции, обеспечивающие выполнение в фоновом режиме 

&НаКлиенте
Процедура ВыполнитьОперациюНаКлиенте(ЗакрыватьДокумент) Экспорт
	
	Перем СсылкаНаЗаписанныйОбъект;
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ВыполнитьОперациюНаСервере(СсылкаНаЗаписанныйОбъект, ЗакрыватьДокумент);
	
	Если НЕ Результат.ЗаданиеВыполнено  И ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	Иначе
		Если Результат.Свойство("СтруктураДанныхКлиента") Тогда
			ОбработатьВыполнениеОперацииНаКлиенте(Результат.СтруктураДанныхКлиента, СсылкаНаЗаписанныйОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьОперациюНаСервере(СсылкаНаЗаписанныйОбъект, ЗакрыватьДокумент)
	
	ЗаписатьСостояниеСпискаВыполняемыхДействий();
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ДокОбъект.ЭтоНовый() ИЛИ ДокОбъект.Модифицированность() ИЛИ ДокОбъект.ПометкаУдаления Тогда
		ДокОбъект.ПометкаУдаления = Ложь;
		//Если Объект.ПереносНЗПНУ = Ложь И Объект.Ссылка.ПереносНЗПНУ Тогда
		//	ДокОбъект.УбранФлажокПереносНЗПНУ = Истина;
		//Иначе
		//	ДокОбъект.УбранФлажокПереносНЗПНУ = Неопределено;			
		//КонецЕсли;	
		//
		//Если Объект.ПереносНЗПБУ = Ложь И Объект.Ссылка.ПереносНЗПБУ Тогда
		//	ДокОбъект.УбранФлажокПереносНЗПБУ = Истина;
		//Иначе
		//	ДокОбъект.УбранФлажокПереносНЗПБУ = Неопределено;			
		//КонецЕсли;	 

		ДокОбъект.Записать();
	КонецЕсли;	
	
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
	СсылкаНаЗаписанныйОбъект = ДокОбъект.Ссылка;
	
	СтруктураПараметров = Новый Структура("ЗакрытиеМесяца, ЗакрыватьДокумент, УбранФлажокПереносНЗПБУ, УбранФлажокПереносНЗПНУ", ДокОбъект.Ссылка, ЗакрыватьДокумент, ДокОбъект.УбранФлажокПереносНЗПБУ, ДокОбъект.УбранФлажокПереносНЗПНУ);
	
	// Возможно, что фоновое задание было запущено раньше, 
	// пользователь дал команду его отменить, однако задание не отменено.
	// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
	// Мы можем отследить ситуацию только, если все это происходит в одной форме.
	// Потому что подсистема ДлительныеОперации не умеет устанавливать ключ фонового задания.
	Если ЗаданиеЕщеВыполняется(ИдентификаторЗадания) Тогда
		// Надо ждать
		Результат = Новый Структура;
		Результат.Вставить("АдресХранилища",       АдресХранилища);
		Результат.Вставить("ЗаданиеВыполнено",     Ложь);
		Результат.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
		
	Иначе
		
		// Запускаем выполнение в фоне
		
		НаименованиеЗадания = НСтр("ru = 'Выполнение закрытия периода'");
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Документы.ЗакрытиеМесяца.ПроведениеВФоне", 
			СтруктураПараметров, 
			НаименованиеЗадания);
		АдресХранилища       = Результат.АдресХранилища;
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		
	КонецЕсли;
		
	Если Результат.ЗаданиеВыполнено Тогда
		Результат.Вставить("СтруктураДанныхКлиента", ОбработатьВыполнениеОперации());
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыполнениеОперацииНаКлиенте(СтруктураДанных, СсылкаНаЗаписанныйОбъект = Неопределено)
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ЗакрытиеМесяца") Тогда
		СформироватьИсториюИПоказатьОповещениюПользователю(СтруктураДанных.ЗакрытиеМесяца, НСтр("ru = 'Изменение:'"));
	КонецЕсли;
	
	Прочитать();
	Если СтруктураДанных.ВыполненоУспешно Тогда
		Если ЭтотОбъект.Открыта() Тогда
			Модифицированность = Ложь;
			Если СтруктураДанных.ЗакрыватьДокумент Тогда
				Закрыть();
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Не удалось провести ""%1"".
                                    |Подробности смотрите в Журнале регистрации.'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураДанных.ЗакрытиеМесяца);
		ПоказатьПредупреждение( , ТекстПредупреждения);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	Оповестить("Запись_ЗакрытиеМесяца");
	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗакрытиеМесяца"));
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИсториюИПоказатьОповещениюПользователю(РегОперация, ТекстОповещения)
	
	ПоказатьОповещениеПользователя(
		ТекстОповещения, ПолучитьНавигационнуюСсылку(РегОперация), Строка(РегОперация), БиблиотекаКартинок.Информация32);
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(РегОперация));
	
КонецПроцедуры

&НаСервере
Функция ОбработатьВыполнениеОперации()
	
	ОбщегоНазначенияБК.ПолучитьИзДлительнойОперацииСообщенияПользователю(ИдентификаторЗадания, УникальныйИдентификатор);
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ВыполненоУспешно") Тогда
		Если НЕ СтруктураДанных.ВыполненоУспешно Тогда
			ЭтотОбъект.Прочитать();
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат(СтруктураДанных);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОбработатьВыполнениеОперацииНаКлиенте(ОбработатьВыполнениеОперации());
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеЕщеВыполняется(ИдентификаторЗадания)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Возврат Задание <> Неопределено И Задание.Состояние = СостояниеФоновогоЗадания.Активно;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВалютыНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("ВалютаРегУчета", ВалютаРегламентированногоУчета);
	
	Запрос.Текст =  "ВЫБРАТЬ
	                |	Валюты.Ссылка КАК Валюта
	                |ПОМЕСТИТЬ ВТ_Валюты
	                |ИЗ
	                |	Справочник.Валюты КАК Валюты
	                |ГДЕ
	                |	НЕ Валюты.ПометкаУдаления
	                |	И НЕ Валюты.Ссылка = &ВалютаРегУчета
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	                |	КурсыВалютСрезПоследних.Курс,
	                |	КурсыВалютСрезПоследних.Кратность
	                |ИЗ
	                |	РегистрСведений.КурсыВалют.СрезПоследних(
	                |			&Дата,
	                |			Валюта В
	                |				(ВЫБРАТЬ
	                |					ВТ_Валюты.Валюта
	                |				ИЗ
	                |					ВТ_Валюты КАК ВТ_Валюты)) КАК КурсыВалютСрезПоследних
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Валюта"	;
	
	Объект.КурсыВалют.Загрузить(Запрос.Выполнить().Выгрузить());	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьКурсыВалют(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	Объект.КурсыВалют.Очистить();
	
	ЗаполнитьВалютыНаСервере();

КонецПроцедуры  

&НаКлиенте
Процедура ПослеВводаКурсаКратности(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ЗаполнятьКурсиКратностьРасшифровки = Истина;
	
		ТекущиеДанные = Элементы.КурсыВалют.ТекущиеДанные;
				
		Если ЗаполнятьКурсиКратностьРасшифровки Тогда
			ТекущиеДанные.Курс      = Результат.КурсВалюты;
			ТекущиеДанные.Кратность = Результат.КратностьВалюты;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчиститьКурсыВалют(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		КурсыВалютИзРегистраСведений = НЕ КурсыВалютИзРегистраСведений;
		Возврат;	
	КонецЕсли;

	Объект.КурсыВалют.Очистить();
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры  

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьВозможностьУстановленияФлажка(Форма, ИмяКолонки, СтрокаДерева)
	
	НеВыбранЗачетНДСКВозмещению = Ложь;
	ВыбранЗачетАвансовПоНДС = Ложь;
	
	Если СтрокаДерева <> Неопределено И 
		(СтрокаДерева.Действие = "Зачет авансов и переплат по НДС" И СтрокаДерева[ИмяКолонки] = 1)
		ИЛИ (СтрокаДерева.Действие = "Зачет НДС к возмещению" И СтрокаДерева[ИмяКолонки] = 0) Тогда
		Для Каждого ТекСтрока Из Форма.ДеревоВыполняемыхОпераций.ПолучитьЭлементы() Цикл		
			Если ТекСтрока.Действие = "Расчеты по НДС" Тогда
				Для Каждого ВложеннаяСтрока Из ТекСтрока.ПолучитьЭлементы() Цикл
					Если ВложеннаяСтрока.Действие = "Зачет НДС к возмещению" И ВложеннаяСтрока[ИмяКолонки] = 0 Тогда
						НеВыбранЗачетНДСКВозмещению = Истина;
					ИначеЕсли ВложеннаяСтрока.Действие = "Зачет авансов и переплат по НДС" И ВложеннаяСтрока[ИмяКолонки] = 1 И НеВыбранЗачетНДСКВозмещению Тогда
						ВложеннаяСтрока[ИмяКолонки] = 0;
						ТекстСообщения = НСтр("ru = 'Зачет авансов и переплат выполняется только совместно с зачетом НДС к возмещению'");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;
				Конеццикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
Конецпроцедуры

