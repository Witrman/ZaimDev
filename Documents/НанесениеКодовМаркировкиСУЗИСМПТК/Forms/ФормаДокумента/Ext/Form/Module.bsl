
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьУсловноеОформлениеХарактеристик();
				
	//БМ_ИСМПТ НА_РАЗВИТИЕ	Товарные группы при формировании нанесения КМ в СУЗ
	ДоступныеВидыПродукцииИСМПТК = Новый Массив;
	ДоступныеВидыПродукцииИСМПТК.Добавить(Перечисления.ВидыПродукцииИСМПТК.МолочнаяПродукция);
	ДоступныеВидыПродукцииИСМПТК.Добавить(Перечисления.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты);
	СобытияФормИСМПТК.НастроитьВидПродукцииПриСозданииНаСервере(ЭтотОбъект, ДоступныеВидыПродукцииИСМПТК);
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ПриСозданииЧтенииНаСервере();
		
		Объект.OrderID = "";         		
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОтчетовСУЗИСМПТК.Черновик");
		
		//БМ_ИСМПТ НА_РАЗВИТИЕ	Товарные группы
		Если Не ЗначениеЗаполнено(Объект.ТипИспользования) 
			ИЛИ (Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция")
			ИЛИ Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.БезалкогольныеНапитки")) Тогда //Для этих ТГ значение продиктовано СУЗ
			Объект.ТипИспользования = ПредопределенноеЗначение("Перечисление.ТипыИспользованияСУЗИСМПТК.НанесениеПодтверждено");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
			Объект.Ответственный = Пользователи.ТекущийПользователь();
		КонецЕсли;
		
	КонецЕсли;
	
	//Выставляем значение по умолчанию из общих настроек ИС МПТ
	ОтображатьДанныеПоНоменклатуре = Константы.ОтображатьДанныеПоНоменклатуреВДокументахСУЗИСМПТК.Получить();

	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	СобытияФормИСМПТКПереопределяемый.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	
	СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииЧтенииНаСервере();
	СобытияФормИСМПТКПереопределяемый.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
			
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьНанесениеКодовМаркировки() Тогда
		
		Если Объект.Ссылка.Пустая() Тогда
			УправлениеФормой();
		Иначе
			ЭтаФорма.Прочитать();
			УправлениеФормой();
		КонецЕсли;
		
	КонецЕсли;
	
	СобытияФормИСМПТККлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ИнтеграцияИСМПТКПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	РазблокироватьДанныеФормыДляРедактирования();
	
	СобытияФормИСМПТКПереопределяемый.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		
	ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	СобытияФормИСМПТКПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
		
	УправлениеФормой();
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьНанесениеКодовМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормИСМПТККлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВидПродукцииПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'При изменении вида продукции табличная часть Товары будет очищена. Продолжить?';
							|en = 'При изменении вида продукции табличная часть Товары будет очищена. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаПродукцииПриЗавершении", ЭтотОбъект, ВыбранноеЗначение);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтображатьДанныеПоНоменклатуреПриИзменении(Элемент)
	
	УправлениеФормой();
			
КонецПроцедуры

#Область ВыгрузкаВФайл

&НаКлиенте
Процедура СохранитьКодыМаркировкиВФайл(Команда) //CSV
	
	ТекстВопроса = НСтр("ru = 'Будут выгружены все коды маркировки из таблицы документа.
		|Продолжить?'");
	
	ДополнительныеПараметры = Новый Структура("ФорматФайла", "CSV");
	ВыгрузитьКодыМаркировки = Новый ОписаниеОповещения("ВыгрузитьКодыМаркировки", ЭтаФорма, ДополнительныеПараметры);
	ПоказатьВопрос(ВыгрузитьКодыМаркировки, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКодыМаркировкиВExcel(Команда)
	
	ТекстВопроса = НСтр("ru = 'По связанному заказу будут выгружены доступные коды маркировки из Пула кодов.
		|Продолжить?'");
	
	ДополнительныеПараметры = Новый Структура("ФорматФайла", "Excel");
	ВыгрузитьКодыМаркировки = Новый ОписаниеОповещения("ВыгрузитьКодыМаркировки", ЭтаФорма, ДополнительныеПараметры);
	ПоказатьВопрос(ВыгрузитьКодыМаркировки, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодыМаркировки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогВыбораФайла.Заголовок = "Выбор файла";
		Если ДополнительныеПараметры.ФорматФайла = "CSV" Тогда
			ДиалогВыбораФайла.Фильтр = "CSV (Comma-Separated Values)(*.csv)|*.csv";
		Иначе
			ДиалогВыбораФайла.Фильтр = НСтр("ru='Все поддерживаемые форматы файлов(*.xls;*.xlsx;)|*.xls;*.xlsx;|Книга Excel 97 (*.xls)|*.xls|Книга Excel 2007 (*.xlsx)|*.xlsx'");
		КонецЕсли;
		ДиалогВыбораФайла.ИндексФильтра = 0;
		ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
		ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
		ДиалогВыбораФайла.МножественныйВыбор = Ложь;
		
		Если ДополнительныеПараметры.ФорматФайла = "CSV" Тогда
			Оповещение = Новый ОписаниеОповещения("ВыгрузитьКодыМаркировкиВCSVаЗавершение", ЭтотОбъект);
		Иначе
			Оповещение = Новый ОписаниеОповещения("ВыгрузитьКодыМаркировкиВExcelЗавершение", ЭтотОбъект);
		КонецЕсли;
		ДиалогВыбораФайла.Показать(Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиВCSVаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		НовыйТекстовыйДокумент = Новый ТекстовыйДокумент;
		
		СписокКодов    = Объект.Товары;
		ЗаказОснование = Объект.ДокументОснование;
		
		Если Не СписокКодов.Количество() = 0 Тогда
			
			Для Каждого СтрокаТЧ Из СписокКодов Цикл
				НовыйТекстовыйДокумент.ДобавитьСтроку(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтрокаТЧ.КодМаркировки));
			КонецЦикла;
			
			НовыйТекстовыйДокумент.Записать(ВыбранныеФайлы[0]);
			
			ИнтеграцияИСМПТКВызовСервера.ОтметитьВыгрузкуКодовМаркировкиЗаказа(СписокКодов, ЗаказОснование);
		Иначе
			ТекстОшибки = НСтр("ru = 'Не удалось сформировать список кодов маркировки для выгрузки.'");
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиВExcelЗавершение(ВыбранныеФайлы, ДополнительныеПараметрым) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		
		СписокКодов	   = Объект.Товары;
		ЗаказОснование = Объект.ДокументОснование;
		Итератор = 1;
		
		Если Не СписокКодов.Количество() = 0 Тогда
			
			Для Каждого СтрокаТЧ Из СписокКодов Цикл
				
				КодДляЗаписи = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтрокаТЧ.КодМаркировки);
				
				ТабличныйДокумент.Область("R" + Формат(Итератор,"ЧГ=0") + "C1").Текст = КодДляЗаписи;
				Итератор = Итератор + 1;
				
			КонецЦикла;
			
			ТабличныйДокумент.Записать(ВыбранныеФайлы[0], ТипФайлаТабличногоДокумента.XLS97);
			ИнтеграцияИСМПТКВызовСервера.ОтметитьВыгрузкуКодовМаркировкиЗаказа(СписокКодов, ЗаказОснование);
		Иначе
			ТекстОшибки = НСтр("ru = 'Не удалось сформировать список кодов маркировки для выгрузки.'");
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьКМ

&НаКлиенте
Процедура Печать(Команда)
	
	СобытияФормИСМПТККлиент.ОтрытьФормуПечатиКодовМаркировок(ЭтотОбъект, Объект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайла(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = "Выбор файла";
	ДиалогВыбораФайла.Фильтр = "CSV (Comma-Separated Values)(*.csv)|*.csv";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьКодыМаркировкиИзФайлаЗавершение", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьДобавлениеКодаМаркировки(СтруктураКодовМаркировки = Неопределено, ПараметрКоманды = Неопределено) Экспорт
	
	Если Не СтруктураКодовМаркировки = Неопределено Тогда 
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.КодМаркировки 		= СтруктураКодовМаркировки.КодМаркировки;
		НоваяСтрока.КодИдентификации 	= СтруктураКодовМаркировки.КодИдентификации;
		НоваяСтрока.GTIN 				= СтруктураКодовМаркировки.GTIN;
		НоваяСтрока.Номенклатура 		= СтруктураКодовМаркировки.Номенклатура;
						
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		ПрочитанныйФайл = Новый ТекстовыйДокумент;
		ПрочитанныйФайл.Прочитать(ВыбранныеФайлы[0]);
		
		СтруктураКода = Новый Структура("Штрихкод, Количество", "", 1);
		
		Для НомерСтроки = 1 По ПрочитанныйФайл.КоличествоСтрок() Цикл
			Штрихкод = ПрочитанныйФайл.ПолучитьСтроку(НомерСтроки);
			//Удалим нечитаемый символ который не может сериализироваться в XML 
			СтруктураКода.Штрихкод = СтрЗаменить(Штрихкод, Символ(29), "");
			ДобавитьКодМаркировкиИзФайла(СтруктураКода);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКодМаркировкиИзФайла(ИсходныеДанные)
	
	СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);   
	
	//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
	Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПереопределяемый.СообщитьПользователю(СтруктураКодовМаркировки);
		Возврат;
	КонецЕсли;
	
	ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(СтруктураКодовМаркировки.GTIN);
	Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
		Номенклатура = ДанныеНоменклатуры.Номенклатура;
	Иначе
		Номенклатура = ДанныеНоменклатуры;
	КонецЕсли;
	
	ТекстОшибки = "";
	
	Если Не НайтиПоКодуИдентификации(СтруктураКодовМаркировки.КодИдентификации) = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru = '" + СтруктураКодовМаркировки.КодИдентификации + ": Код маркировки не был добавлен, поскольку уже присутствует в документе!'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		
	Иначе
		
		СтруктураКодовМаркировки.Вставить("Номенклатура", Номенклатура);
		ЗавершитьДобавлениеКодаМаркировки(СтруктураКодовМаркировки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтражениеВУчете

&НаКлиенте
Процедура ДокументОснованиеВыбрать(Команда)
	
	ВыбратьДокументОснование();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокументОснование()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указана организация!'"));
		Возврат;
	КонецЕсли;

	ДокументыВыбора = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПолучитьСписокДокументовОснованияДляНанесенияКМ();
	
	Если ДокументыВыбора.Количество() > 1 Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДокументыВыбора", ДокументыВыбора);
					
		Оповещение = Новый ОписаниеОповещения("ВыборДокументаОснованияЗавершение", ЭтотОбъект);
		ОткрытьФорму("Обработка.ОбменИСМПТК.Форма.ФормаВыбораДокументаОснования", ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ДокументыВыбора.Количество() = 1 Тогда
		
		ВыбранныйДокумент = ДокументыВыбора[0].Значение;
		ВыборДокументаОснованияЗавершение(ВыбранныйДокумент, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаОснованияЗавершение(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйДокумент <> "" И ТипЗнч(ВыбранныйДокумент) <> Тип("Неопределено") Тогда
		
		ИмяДокумента = ВыбранныйДокумент;
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Организация", 		 Объект.Организация);
		СтруктураОтбора.Вставить("Статус", 				 ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Выполнен"));
		СтруктураОтбора.Вставить("ВыполненоНанесениеКМ", Ложь);
		
		СтруктураПараметров = Новый Структура("Отбор, РежимВыбора, МножественныйВыбор", СтруктураОтбора, Истина, Ложь);
		
		ИмяФормыВыбора = "Документ." + ИмяДокумента + ".ФормаВыбора"; 
		ОткрытьФорму(ИмяФормыВыбора, СтруктураПараметров , ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтсоединитьДокументОснование(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		СкорректироватьДокументОснование(Ложь, Объект.ДокументОснование);
		Объект.ДокументОснование = Неопределено;
		Модифицированность = Истина;
	Иначе
		ПоказатьПредупреждение(, РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТекстСообщенияОтказДокументНеОтраженВУчете());
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Оборудование

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт

	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".';
								|en = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт

	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".';
								|en = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;
	ЦветТекстаПоля  = ЦветаСтиля.ЦветТекстаПоля;
		
	ИнтеграцияИСМПТКПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	СобытияФормИСМПТКПереопределяемый.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеХарактеристик()
	
	//Характеристики
	СобытияФормИСМПТКПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);
	ХарактеристикиИспользуются = ИнтеграцияИСМПТКПереопределяемый.ПроверитьИспользованиеХарактеристик();
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыХарактеристика", "Видимость", ХарактеристикиИспользуются);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	//Данные по номенклатуре в ТЧ Товары
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДанныеНоменклатуры", "Видимость", ОтображатьДанныеПоНоменклатуре);
		
	//Редактирование формы
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОтчетовСУЗИСМПТК.Отправлен") Тогда
		РазрешенТолькоПросмотр = Истина;
	Иначе
		РазрешенТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОтчетовСУЗИСМПТК.Черновик") Тогда
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаГруппаОтражение", "Видимость", Истина);
	Иначе
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаГруппаОтражение", "Видимость", Ложь);
	КонецЕсли;
	
	//БМ_ИСМПТ НА_РАЗВИТИЕ
	//Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОтчетовСУЗИСМПТК.Отклонен") Тогда
	//	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПричинаОтклонения", "Видимость", Истина);
	//ИНаче
	//	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПричинаОтклонения", "Видимость", Ложь);
	//КонецЕсли;
	
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаШапкаЛево",  "ТолькоПросмотр", РазрешенТолькоПросмотр);
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаШапкаПраво", "ТолькоПросмотр", РазрешенТолькоПросмотр);
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Товары", 		  "ТолькоПросмотр", РазрешенТолькоПросмотр);
	
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСохранениеВФайл", "Доступность", РазрешенТолькоПросмотр);
	
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПечать", "Видимость",   Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная"));
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПечать", "Доступность", РазрешенТолькоПросмотр);
	
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументНанесениеКодовМаркировкиСУЗИСМПТКПроверить", "Доступность", Не РазрешенТолькоПросмотр);
	
	Если Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция")
		ИЛИ Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.БезалкогольныеНапитки") Тогда 
		//Установка значения регулируется правилами ИС МПТ СУЗ:
		//Для товарных групп ‹Молочная продукция› и ‹Упакованная вода и сахаросодержащие напитки› в параметре «Тип использования» допустимо только
		//следующее значение — VERIFIED.
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТипИспользования", "ТолькоПросмотр", Истина); 
	Иначе
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТипИспользования", "ТолькоПросмотр", Ложь); 
	КонецЕсли;
	
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидПродукции", "ТолькоПросмотр", ЗначениеЗаполнено(Объект.ДокументОснование));
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Организация",  "ТолькоПросмотр", ЗначениеЗаполнено(Объект.ДокументОснование));
	
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СрокГодности", "Видимость", Не Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная"));
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИдентификаторПроизводственнойЛинии", "Видимость", Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная"));
	
	СформироватьПредставлениеСостояния();
	УстановитьВидимостьКнопокИзмененияСтатуса();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеСостояния()
	
	ОтчетПереданНаСервер = ЗначениеЗаполнено(Объект.OrderID);
	
	Если Объект.Статус = Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.Отправлен Тогда //финальный статус после проверок на сервере
				
		ПредставлениеСостояния = НСтр("ru = 'Успешно принят системой СУЗ'");
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.Черновик Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Черновик'");
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.ВОжидании 
		И ОтчетПереданНаСервер Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Находится в ожидании в СУЗ'");
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.ГотовКОтправке 
		И ОтчетПереданНаСервер Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Проверяется в СУЗ'");
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.Отклонен Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Отклонен на стороне СУЗ'");
		
	Иначе
		
		Если Объект.Ссылка.Пустая() Тогда
			ПредставлениеСостояния = НСтр("ru = 'Новый документ'");
		Иначе
			ПредставлениеСостояния = НСтр("ru = 'Документ %Состояние%'");
			ПредставлениеСостояния = СтрЗаменить(ПредставлениеСостояния, "%Состояние%", НРег(Объект.Состояние));
		КонецЕсли;
		
	КонецЕсли;
			
	Элементы.ПредставлениеСостояния.ЦветТекста = ИнтеграцияИСМПТККлиентСервер.ЦветСостояния(Объект.Состояние);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаПродукцииПриЗавершении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Объект.ВидПродукции = ДополнительныеПараметры;
		Объект.Товары.Очистить();
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
											
	СобытияФормИСМПТКПереопределяемый.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, ПараметрыЗаполненияРеквизитов);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКнопокИзмененияСтатуса()
	
	НеОтправлен = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОтчетовСУЗИСМПТК.Черновик");	
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументНанесениеКодовМаркировкиСУЗИСМПТКОтправить", "Видимость", НеОтправлен);
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументНанесениеКодовМаркировкиСУЗИСМПТКПроверить", "Видимость", НеОтправлен);
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументНанесениеКодовМаркировкиСУЗИСМПТКОбновить",  "Видимость", Не НеОтправлен);
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ИзменитьДокументОснование = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование)
			И Объект.ДокументОснование <> ВыбранноеЗначение 
			И СтрНайти(ИсточникВыбора.ИмяФормы, "ФормаВыбораИзКлассификатора") = 0 Тогда
			
			ТекстВопроса = НСтр(
			"ru = 'Документ уже связан с ""%СтарыйДокументОснование%"".
			|Заменить документ-основание?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%СтарыйДокументОснование%", Объект.ДокументОснование);
			
			ИзменитьДокументОснованиеЗавершение = Новый ОписаниеОповещения("ИзменитьДокументОснованиеЗавершение", ЭтаФорма, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
			ПоказатьВопрос(ИзменитьДокументОснованиеЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			
		Иначе
			
			ИзменитьДокументОснование = Истина;
			
		КонецЕсли;
		
		Если ИзменитьДокументОснование Тогда
			
			Структура_СвязанноеНанесение = ПроверитьСвязанноеНанесение(ВыбранноеЗначение);
			
			Если Структура_СвязанноеНанесение = Неопределено Тогда
				Объект.ДокументОснование = ВыбранноеЗначение;
				ЗаполнитьПоДокументуОснованию();
				СкорректироватьДокументОснование(Истина, Объект.ДокументОснование);
				Модифицированность = Истина;				
			Иначе
				//Если связанный Акт есть, предупреждаем об этом пользователя и даем возможность отказаться от выбора
				ТекстВопросаВыборОснования = НСтр(
				"ru = 'На основании документа ""%ДокументОснование%"" уже введен Акт према/передачи. Привязать текущий Акт к выбранному документу без отсоединения ранее связанного Акта?'");
				ТекстВопросаВыборОснования = СтрЗаменить(ТекстВопросаВыборОснования, "%ДокументОснование%", ВыбранноеЗначение);
				
				ПродолжитьЗаполнениеДокументаОснования = Новый ОписаниеОповещения("ПродолжитьЗаполнениеДокументаОснования", ЭтаФорма, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
				ПоказатьВопрос(ПродолжитьЗаполнениеДокументаОснования, ТекстВопросаВыборОснования, РежимДиалогаВопрос.ОКОтмена);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСвязанноеНанесение(ВыбранноеЗначение)
	
	Возврат ИнтеграцияИСМПТК.ПроверитьСвязанноеНанесение(ВыбранноеЗначение, Истина);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованию()
	
	ДанныеДокументаОснования = ПолучитьДанныеДокументаОснованияНаСервере();
	
	РеквизитыШапки = ДанныеДокументаОснования.Реквизиты;
	ДанныеПоТоварам = ДанныеДокументаОснования.Товары;
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыШапки);
	
	Объект.Товары.Очистить();
		
	Для Каждого СтрокаТовар Из ДанныеПоТоварам Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовар);
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДокументаОснованияНаСервере() Экспорт
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ПолучитьДанныеДокументаОснованияНанесениеКМНаСервере(Объект.ДокументОснование);

КонецФункции

&НаСервере
Процедура СкорректироватьДокументОснование(ЗначениеПризнака, Основание)
	
	ЗаказКМ = Основание.ПолучитьОбъект();
	ЗаказКМ.ВыполненоНанесениеКМ = ЗначениеПризнака;
	ЗаказКМ.Записать();
	
КонецПроцедуры

&НаСервере
функция ПолучитьНоменклатуруПоШтрихкоду(GTIN)
	
	Номенклатура = Неопределено;
	
	НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("GTIN", GTIN));
	Если Не НайденныеСтроки.Количество() = 0 Тогда 
		Номенклатура = НайденныеСтроки[0].Номенклатура;
	КонецЕсли;
	
	EAN = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодEANИзGTIN(GTIN);	
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда 
		Возврат Номенклатура;
	Иначе
		Возврат ИнтеграцияИСМПТКПереопределяемый.ПолучитьНоменклатуруПоШтрихкоду(EAN);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция НайтиПоКодуИдентификации(КодИдентификации)
	
	СтруктураПоиска = Новый Структура("КодИдентификации", КодИдентификации);
	
	НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
