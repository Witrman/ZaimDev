#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ЭТДСервер.ПриЧтенииНаСервереЭТД(ЭтаФорма, ТекущийОбъект);
	
	Если ЗначениеЗаполнено(ТекущийОбъект.ДоляНеполногоРабочегоВремени) Тогда
		ДоляНеполногоРабочегоВремениЧисло = Число(ТекущийОбъект.ДоляНеполногоРабочегоВремени);
	КонецЕсли;
	
	Если ТекущийОбъект.УсловияТруда.Количество() > 0 Тогда
		УсловияТрудаСтрока = ТекущийОбъект.УсловияТруда[0].УсловиеТруда;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЭТДСервер.ПослеЗаписиНаСервереЭТД(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		Если Объект.УсловияТруда.Количество() > 0 Тогда
			УсловияТрудаСтрока = Объект.УсловияТруда[0].УсловиеТруда;
		КонецЕсли;
	КонецЕсли;
	
	ЭТДСервер.ПриСозданииНаСервереЭТД(ЭтотОбъект);
	
	ЗаполнитьСпискиВыбораФормы();
	
	ЗаполнитьДополнительныеСоглашения();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Сформирован = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Сформирован");
	ДоступноРедактирование = (Объект.Ссылка.Пустая() ИЛИ Объект.Статус = Сформирован);
	УстановитьЗаголовок(ЭтаФорма);
	УстановитьВидимостьИДоступностьЭлементов(ДоступноРедактирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЭТД_ЗаписьЭТД", , ЭтаФорма);
	УстановитьЗаголовок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.Автор.Пустая() Тогда
		ТекущийОбъект.Автор = ЭТДСервер.ПолучитьТекущегоПользователя();
	КонецЕсли;
	
	Если ПараметрыЗаписи.количество()<2 Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТекущийОбъект.Ссылка.Пустая()) Тогда
		ДокументОбъект = ДанныеФормыВЗначение(ТекущийОбъект, Тип("ДокументОбъект.ЭТД"));
		ДокументОбъект.Записать();
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		Модифицированность = Ложь;
		УстановитьЗаголовок(ЭтаФорма);
	КонецЕсли;
	
	Если ПараметрыЗаписи.ВидОперации = "СозданиеИзменениеДоговора" Тогда
		ПередЗаписьюНаСервереДоговор(ПараметрыЗаписи);
	ИначеЕсли ПараметрыЗаписи.ВидОперации = "СозданиеИзменениеДопСоглашения" Тогда
		ПередЗаписьюНаСервереДопСоглашение(ПараметрыЗаписи);
	ИначеЕсли ПараметрыЗаписи.ВидОперации = "РасторжениеДоговора" Тогда
		ПередЗаписьюНаСервереРасторжение(ПараметрыЗаписи);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Сформирован")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.ПустаяСсылка")) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДолжностьПриИзменении(Элемент)
	
	ПерезаполнитьРеквизитыДолжности();
	
	ТекстВопроса = НСтр("ru='Перезаполнить таблицы навыков?'");
	Оповещение = Новый ОписаниеОповещения("ВопросПерезаполненияТаблицыНавыков", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПоШтатномуРасписаниюПриИзменении(Элемент)
	
	Объект.Должность = ПолучитьДолжностьОрганизации(Объект.ДолжностьПоШтатномуРасписанию);
	
	ПерезаполнитьРеквизитыДолжности();
	
	ТекстВопроса = НСтр("ru='Перезаполнить таблицы навыков?'");
	Оповещение = Новый ОписаниеОповещения("ВопросПерезаполненияТаблицыНавыков", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ВопросПерезаполненияТаблицыНавыков(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНавыкиПоНастройкамНаСервере();
	Иначе 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеУвольненияПриИзменении(Элемент)
	 ПерезаполнитьРеквизитыПричиныРасторжения();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ПерезаполнитьРеквизитыОрганизации();
КонецПроцедуры

&НаКлиенте
Процедура КодДолжностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидКлассификатора",  "ПрофессийXML");
	ПараметрыФормы.Вставить("Заголовок",   НСтр("ru = 'Классификатор профессий'"));
	ПараметрыФормы.Вставить("Уровень",     1);
	ПараметрыФормы.Вставить("ВыборГруппы", Ложь);
	ПараметрыФормы.Вставить("ЗначениеВыбора", Объект.КодДолжности);
	
	ОткрытьФорму("Обработка.ОбменЭТД.Форма.ФормаПодбораКлассификатора",
	ПараметрыФормы,
	,
	,
	,
	,
	Новый ОписаниеОповещения("ПослеВыбораКодаПрофессии",
	ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура КодПричиныРасторженияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидКлассификатора",  "ОснованияУвольнения");
	ПараметрыФормы.Вставить("Заголовок",   НСтр("ru = 'Основания увольнения'"));
	ПараметрыФормы.Вставить("Уровень",     2);
	ПараметрыФормы.Вставить("ВыборГруппы", Ложь);
	
	ОткрытьФорму("Обработка.ОбменЭТД.Форма.ФормаПодбораКлассификатора",
	ПараметрыФормы,
	,
	,
	,
	,
	Новый ОписаниеОповещения("ПодобратьИзКлассификатораКодДолжностиЗавершение",
	ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальныеНавыкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидКлассификатора",  "ПрофессиональныеНавыки");
	ПараметрыФормы.Вставить("Заголовок",   НСтр("ru = 'Специальные навыки'"));
	ПараметрыФормы.Вставить("Уровень",     1);
	ПараметрыФормы.Вставить("ВыборГруппы", Истина);
	
	ОткрытьФорму("Обработка.ОбменЭТД.Форма.ФормаПодбораКлассификатора",
	ПараметрыФормы,
	,
	,
	,
	,
	Новый ОписаниеОповещения("ПодобратьИзКлассификатораЗавершениеСпец",
	ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальныеНавыкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗаполнитьЗначенияСвойств(Объект.СпециальныеНавыки.Добавить(), НавыкСтрокой(ВыбранноеЗначение));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеНавыкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидКлассификатора",  "ОбщиеНавыки");
	ПараметрыФормы.Вставить("Заголовок",   НСтр("ru = 'Общие навыки'"));
	ПараметрыФормы.Вставить("Уровень",     3);
	ПараметрыФормы.Вставить("ВыборГруппы", Истина);
	
	ОткрытьФорму("Обработка.ОбменЭТД.Форма.ФормаПодбораКлассификатора",
		ПараметрыФормы,
		,
		,
		,
		,
		Новый ОписаниеОповещения("ПодобратьИзКлассификатораЗавершениеОбщ",
		ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИзКлассификатораЗавершениеСпец(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПодобратьИзКлассификатораЗавершениеСпецНаСервере(Результат, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьИзКлассификатораЗавершениеСпецНаСервере(Результат, ДополнительныеПараметры)
	
	ТаблицаНавыков = ПолучитьИзВременногоХранилища(Результат);
	Если ТипЗнч(ТаблицаНавыков) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаНавыков Цикл
			НоваяСтрока = Объект.СпециальныеНавыки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		УдалитьИзВременногоХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИзКлассификатораЗавершениеОбщ(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПодобратьИзКлассификатораЗавершениеОбщНаСервере(Результат, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьИзКлассификатораЗавершениеОбщНаСервере(Результат, ДополнительныеПараметры)
	
	ТаблицаНавыков = ПолучитьИзВременногоХранилища(Результат);
	Если ТипЗнч(ТаблицаНавыков) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаНавыков Цикл
			НоваяСтрока = Объект.ОбщиеНавыки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		УдалитьИзВременногоХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеНавыкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаполнитьЗначенияСвойств(Объект.ОбщиеНавыки.Добавить(), НавыкСтрокой(ВыбранноеЗначение));
	
КонецПроцедуры

&НаКлиенте
Функция НавыкСтрокой(ВыбранноеЗначение)
	
	СтрокаНавыков = Новый Структура;
	СтрокаНавыков.Вставить("КодНавыка",   ВыбранноеЗначение.Код);
	СтрокаНавыков.Вставить("Наименование",ВыбранноеЗначение.Наименование);
	
	Возврат СтрокаНавыков;
	
КонецФункции

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования
		, ЭтотОбъект
		, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура УчетныйНомерПриИзменении(Элемент)
	
	УстановитьЗаголовок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗаключенияПриИзменении(Элемент)
	
	УстановитьЗаголовок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	ПерезаполнитьРеквизитыРаботника(Истина);
	ОпределениеНеполногоВремени();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРабочегоВремениПриИзменении(Элемент)
	
	ОпределениеНеполногоВремени();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоРаботыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.МестоРаботы", 
		НСтр("ru = 'Место работы'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокТипов = ЭТДКлиент.ПолучитьСписокВыбораДокументОснованиеЭТД();
	Оповещение = Новый ОписаниеОповещения("ОткрытиеФормыВыбораДокументаОснования", ЭтотОбъект);
	
	СписокТипов.ПоказатьВыборЭлемента(Оповещение, НСтр("ru = 'Выбор типа данных'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭТДКлиент.ОткрытиеФормыВыбораСотрудника(Объект.Организация, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеСоглашенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЭТД = Элемент.ТекущиеДанные.Значение;
	ПараметрыФормы = Новый Структура("Ключ", ЭТД);
	ОткрытьФорму("Документ.ЭТД.Форма.ФормаДокумента", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоляНеполногоРабочегоВремениПриИзменении(Элемент)
	
	Объект.ДоляНеполногоРабочегоВремени = Строка(ДоляНеполногоРабочегоВремениЧисло);
	
КонецПроцедуры

&НаКлиенте
Процедура КодДолжностиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Объект.КодДолжности = Текст;
	Объект.НаименованиеДолжности = ПолучитьНаименованиеДолжности(Текст);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияТрудаПриИзменении(Элемент)
	
	ЭТДКлиентСервер.ЗаполнитьУсловияТруда(Объект.УсловияТруда, УсловияТрудаСтрока);
	
	ОпределениеТяжелыхУсловийТруда();
	
КонецПроцедуры

&НаКлиенте
Процедура КодТяжелыхУсловийТрудаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидКлассификатора",  "ВредныхУсловийТруда");
	ПараметрыФормы.Вставить("Заголовок",   НСтр("ru = 'Классификатор вредных условий труда'"));
	ПараметрыФормы.Вставить("Уровень",     1);
	ПараметрыФормы.Вставить("ВыборГруппы", Ложь);
	ПараметрыФормы.Вставить("ЗначениеВыбора", Объект.КодТяжелыхУсловийТруда);
	
	ОткрытьФорму("Обработка.ОбменЭТД.Форма.ФормаПодбораКлассификатора",
	ПараметрыФормы,
	,
	,
	,
	,
	Новый ОписаниеОповещения("ПослеВыбораКодаВредныхУсловийТруда",
	ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КодТяжелыхУсловийТрудаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Объект.КодТяжелыхУсловийТруда = Текст;
	Объект.НаименованиеТяжелыхУсловийТруда = ПолучитьНаименованиеТяжелыхУсловийТруда(Текст);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодписатьИОтправить(Команда)
	
	ПроверкаПройдена = ?(Объект.ЭтоДополнительноеСоглашение,
		ПроверитьЗаполнениеПриОтправкеДопСоглашения(),
		ПроверитьЗаполнениеПриОтправкеЭТД());
	
	Если НЕ ПроверкаПройдена Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Объект.ЭтоДополнительноеСоглашение Тогда
		ВидОперации = "СозданиеИзменениеДопСоглашения";
	Иначе
		ВидОперации = "СозданиеИзменениеДоговора";
	КонецЕсли;
	
	ПараметрыЗаписи = ЗаписатьПараметрыСертификата();
	ПродолжитьОтправку(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура Расторгнуть(Команда)
	
	Если НЕ ПроверитьЗаполнениеПриРасторженииЭТД() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ВидОперации = "РасторжениеДоговора";
			
	ПараметрыЗаписи = ЗаписатьПараметрыСертификата();
	ПродолжитьОтправку(ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура Исправить(Команда)
	
	УстановитьВидимостьИДоступностьЭлементов(Истина, Истина);
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьПараметрыСертификата()
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ВидОперации", ВидОперации);
	
	Возврат ПараметрыЗаписи;
	
КонецФункции

&НаКлиенте
Процедура ПродолжитьОтправку(ПараметрыЗаписи)
	
	ПередЗаписьюНаСервереНачало(ПараметрыЗаписи);
	
	Если ПараметрыЗаписи.Свойство("ДанныеДляПодписи") Тогда
		ЗапросСертификатаТребуется = ЭТДВызовСервера.ИспользоватьВнешнююКриптографиюДляКомпоненты();
		
		Если ЗапросСертификатаТребуется Тогда
			ПродолжитьОтправкуЧерезНовуюКомпоненту = Новый ОписаниеОповещения("ПродолжитьОтправкуЧерезНовуюКомпоненту", ЭтаФорма, ПараметрыЗаписи);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("СтруктурнаяЕдиница", Объект.Организация);
			ЭТДКлиент.ОткрытьФормуВводаДанныхЭЦП(ПродолжитьОтправкуЧерезНовуюКомпоненту, ДополнительныеПараметры);
		Иначе
			ПодписанныеДанные = ЭТДКлиентСервер.СоздатьЭЦП_XML_Криптопровайдер(ПараметрыЗаписи.ДанныеДляПодписи, Объект.БИНОрганизации);
			
			ОбработатьПодписьЭЦП(ПодписанныеДанные, ПараметрыЗаписи);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПодписьЭЦП(Результат, ПараметрыЗаписи) Экспорт
	
	Если Лев(Результат, 1) = "<" Тогда
		ПередЗаписьюНаСервереПродолжение(ПараметрыЗаписи, Результат);	
		
		УстановитьВидимостьИДоступностьЭлементов(Ложь);
		Записать();
	ИначеЕсли Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка подписи договора, договор не подписан'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Ошибка подписи договора: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Результат);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНавыкиПоПрофилю(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьНавыкиПоПрофилюЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ПрофилиНавыковЭТД.ФормаВыбора",,,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНавыкиПоПрофилюЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНавыкиПоПрофилюНаСервере(РезультатВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОтправкуЧерезНовуюКомпоненту(Результат, ПараметрыЗаписи) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
		ПараметрыКлюча = ЭТДКлиентСервер.ПодготовитьПараметрыКлючаДляПодписи(Результат.Получить(Объект.Организация));
		
		Если ЭТДВызовСервера.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
			ПодписанныеДанные = ЭТДКлиентСервер.СоздатьЭЦП_XML_Криптопровайдер(ПараметрыЗаписи.ДанныеДляПодписи, Объект.БИНОрганизации, ПараметрыКлюча);
		Иначе
			ПодписанныеДанные = ЭТДВызовСервера.СоздатьЭЦП_XML_Криптопровайдер(ПараметрыЗаписи.ДанныеДляПодписи, Объект.БИНОрганизации, ПараметрыКлюча);
		КонецЕсли;
		
		ОбработатьПодписьЭЦП(ПодписанныеДанные, ПараметрыЗаписи);
	ИначеЕсли Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Выбор сертификата отменен пользователем.'");
		
		ОбработатьПодписьЭЦП(ТекстСообщения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеРеквизитов

&НаСервере
Процедура ЗаполнитьСпискиВыбораФормы()
	
	СписокСрокиДействия = СписокВыборкаСрокиДействия(Объект.ЭтоДополнительноеСоглашение);
	Для Каждого ЭлементСписка Из СписокСрокиДействия Цикл
		Элементы.СрокДействия.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	СписокОтношенияКВоинскойСлужбе = СписокВыборкаОтношениеКВоинскойСлужбе();
	Для Каждого ЭлементСписка Из СписокОтношенияКВоинскойСлужбе Цикл
		Элементы.ОтношениеКВоинскойСлужбе.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	СписокРежимРабочегоВремени = СписокВыборкаРежимРабочегоВремени();
	Для Каждого ЭлементСписка Из СписокРежимРабочегоВремени Цикл
		Элементы.РежимРабочегоВремени.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	СписокУсловияТруда = СписокВыборкаУсловияТруда();
	Для Каждого ЭлементСписка Из СписокУсловияТруда Цикл
		Элементы.УсловияТруда.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормы()
	
	ПерезаполнитьРеквизитыОрганизации();
	ПерезаполнитьРеквизитыРаботника();
	ПерезаполнитьРеквизитыПричиныРасторжения();
	ЗаполнитьНавыкиПоНастройкамНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьРеквизитыОрганизации()
	
	ПериодДанных = ?(ЗначениеЗаполнено(Объект.ДатаЗаключения), Объект.ДатаЗаключения, ТекущаяДатаСеанса());
	ДанныеДляАвтозаполненияЭТД = ЭТДСервер.ПолучитьДанныеДляАвтозаполненияЭТД(Объект.Организация, ПериодДанных);
	Если НЕ Элементы.РеквизитыРаботодателя.ТолькоПросмотр Тогда
		Объект.БИНОрганизации = ?(Объект.Организация.Пустая(), "", ЭТДСервер.БИНОрганизации(Объект.Организация));
		Объект.КодРегиона = ДанныеДляАвтозаполненияЭТД.КодРегиона;
	КонецЕсли;
	Объект.МестоРаботы = ДанныеДляАвтозаполненияЭТД.МестоРаботы;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьРеквизитыРаботника(ЗаменитьЗначения = Ложь)
	
	ПериодДанных = ?(ЗначениеЗаполнено(Объект.ДатаНачала), Объект.ДатаНачала, Объект.Дата);
	ДополнительныеДанныеСотрудника = ЭТДСервер.ПолучитьДанныеСотрудника(ПериодДанных, Объект.Сотрудник);
	ПерезаполняемыеДанныеСотрудника = ЭТДСервер.ПолучитьПерезаполняемыеДанныеСотрудника();
	
	Если ДополнительныеДанныеСотрудника.Количество() > 0 Тогда
		
		Для Каждого СтрокаДанныхСотрудника Из ДополнительныеДанныеСотрудника Цикл
			
			Если ТипЗнч(СтрокаДанныхСотрудника.Значение) = Тип("ТаблицаЗначений") Тогда
				
				Если СтрокаДанныхСотрудника.Ключ = "ОбщиеНавыки" Тогда
					Объект.ОбщиеНавыки.Загрузить(СтрокаДанныхСотрудника.Значение);
				ИначеЕсли СтрокаДанныхСотрудника.Ключ = "СпециальныеНавыки" Тогда
					Объект.СпециальныеНавыки.Загрузить(СтрокаДанныхСотрудника.Значение);
				КонецЕсли;
				
			ИначеЕсли ЗаменитьЗначения ИЛИ (ПерезаполняемыеДанныеСотрудника.Свойство(СтрокаДанныхСотрудника.Ключ) <> Неопределено
				И ЗначениеЗаполнено(СтрокаДанныхСотрудника.Значение)) ИЛИ НЕ ЗначениеЗаполнено(Объект[СтрокаДанныхСотрудника.Ключ]) Тогда
				
				Объект[СтрокаДанныхСотрудника.Ключ] = СтрокаДанныхСотрудника.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьРеквизитыДолжности()
	
	ПериодДанных = ?(ЗначениеЗаполнено(Объект.ДатаНачала), Объект.ДатаНачала, Объект.Дата);
	ИнформацияОКодеДолжности = ЭТДСервер.ПолучитьИнформациюОКодеДолжности(ПериодДанных, Объект.Должность, Объект.ДолжностьПоШтатномуРасписанию, Объект.Организация);
	Объект.КодДолжности = ИнформацияОКодеДолжности.КодДолжности;
	Объект.НаименованиеДолжности = ИнформацияОКодеДолжности.НаименованиеДолжности;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьРеквизитыПричиныРасторжения()
	
	ПериодДанных = ?(ЗначениеЗаполнено(Объект.ДатаРасторжения), Объект.ДатаРасторжения, ТекущаяДатаСеанса());
	ИнформацияОПричинеРасторжения = ЭТДСервер.ПолучитьИнформациюОПричинеРасторжения(ПериодДанных, Объект.Организация, Объект.ОснованиеУвольнения);
	Объект.КодПричиныРасторжения = ИнформацияОПричинеРасторжения.КодПричиныРасторженияЭТД;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеСоглашения()
	
	Если Объект.ЭтоДополнительноеСоглашение Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭТД.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЭТД КАК ЭТД
	|ГДЕ
	|	ЭТД.Сотрудник = &Сотрудник
	|	И ЭТД.ЭтоДополнительноеСоглашение";
	
	Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДополнительныеСоглашения.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПослеВыбораКодаПрофессии(ДанныеДолжности, Параметры) Экспорт
	
	Если ДанныеДолжности = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеДолжности.Код <> Объект.КодДолжности Тогда
		Объект.КодДолжности = ДанныеДолжности.Код;
		Объект.НаименованиеДолжности = ДанныеДолжности.Наименование;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеПриОтправкеЭТД()
	
	ЕстьОшибки = Ложь;
	
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если НачалоДня(Объект.ДатаЗаключения) > НачалоДня(ДатаСеанса) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Дата заключения договора не должна быть позже текущего дня'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ДатаЗаключения);
	КонецЕсли;
	
	Если Объект.ДатаНачала > НачалоДня(ДатаСеанса) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Дата начала не должна быть позже текущего дня'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ДатаНачала);
	КонецЕсли;
	
	Если НачалоДня(Объект.ДатаЗаключения) > Объект.ДатаНачала Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Дата заключения договора не должна быть позже даты начала договора'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ДатаЗаключения);
	КонецЕсли;
	 
	Если Объект.ДатаОкончания <> '00010101' И Объект.ДатаНачала > Объект.ДатаОкончания Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Дата начала не должна быть позже даты окончания'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ДатаНачала);
	КонецЕсли;
		
	Если Объект.СрокДействия = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Срок действия"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.СрокДействия);
	КонецЕсли;
	
	Если Объект.КодДолжности = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Код должности"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.КодДолжности);
	КонецЕсли;
	
	Если Объект.КодРегиона = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Код КАТО"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.КодРегиона);
	ИначеЕсли СтрДлина(Объект.КодРегиона) <> 9 Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Длина кода КАТО должна быть 9 символов'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.КодРегиона);
	КонецЕсли;
	
	Если Объект.МестоРаботы = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Место работы"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.МестоРаботы);
	КонецЕсли;
	
	Если Объект.СрокДействия = "2" ИЛИ Объект.СрокДействия = "3" Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
			ЕстьОшибки = Истина;
			ТекстОшибки = НСтр("ru='Для срока действия ""На определенный срок не менее одного года"" и ""На определенный срок менее одного года (для субъектов малого предпринимательства)"" должно быть заполнено поле ""Дата окончания""'");
			СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ДатаОкончания);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.НомерДоговора = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Номер договора"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.НомерДоговора);
	КонецЕсли;
	
	Если Объект.ИИНРаботника = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""ИИН"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ИИНРаботника);
	КонецЕсли;
	
	Если Объект.БИНОрганизации = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""БИН/ИИН"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.БИНОрганизации);
	КонецЕсли;
	
	Если Элементы.ДолжностьПоШтатномуРасписанию.Видимость Тогда
		ДолжностьЗначение = Объект.ДолжностьПоШтатномуРасписанию;
		ДолжностьЭлемент = Элементы.ДолжностьПоШтатномуРасписанию;
	Иначе
		ДолжностьЗначение = Объект.Должность;
		ДолжностьЭлемент = Элементы.Должность;
	КонецЕсли;
	
	Если ДолжностьЗначение = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Штатная должность"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, ДолжностьЭлемент);
	КонецЕсли;
	
	Если Объект.УсловияТруда.Количество() = 0 Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Условия труда"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.УсловияТруда);
	КонецЕсли;
	
	Если УсловияТрудаСтрока = "1" И Объект.КодТяжелыхУсловийТруда = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Код тяжелых условий труда"" не заполнено'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.КодТяжелыхУсловийТруда);
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеПриОтправкеДопСоглашения()
	
	ЕстьОшибки = Ложь;
	
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если НачалоДня(Объект.ДатаЗаключения) > НачалоДня(ДатаСеанса) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Дата заключения дополнительного соглашения не должна быть позже текущего дня.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ДатаЗаключения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ОсновнойЭТД) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Основной ЭТД"" не заполнено.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ОсновнойЭТД);
	КонецЕсли;
	
	Если Объект.СрокДействия = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Срок действия"" не заполнено.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.СрокДействия);
	КонецЕсли;
	
	Если Объект.КодДолжности = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Код должности"" не заполнено.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.КодДолжности);
	КонецЕсли;
	
	Если Объект.КодРегиона = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Код КАТО"" не заполнено.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.КодРегиона);
	ИначеЕсли СтрДлина(Объект.КодРегиона) <> 9 Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Длина поля ""Код КАТО"" должна быть 9 символов.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.КодРегиона);
	КонецЕсли;
	
	Если НачалоДня(Объект.ДатаЗаключения) > Объект.ДатаНачала Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Дата начала договора не должна быть раньше даты заключения договора.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ДатаНачала);
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

&НаСервере
Функция ПолучитьДопСоглашенияДоговора(ОсновнойЭТД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭТД.Ссылка КАК Ссылка,
		|	ЭТД.НомерДоговора КАК НомерДоговора
		|ИЗ
		|	Документ.ЭТД КАК ЭТД
		|ГДЕ
		|	ЭТД.ОсновнойЭТД = &ОсновнойЭТД
		|	И ЭТД.ЭтоДополнительноеСоглашение = ИСТИНА
		|	И ЭТД.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭТД.Зарегистрирован)";
	
	Запрос.УстановитьПараметр("ОсновнойЭТД", ОсновнойЭТД);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеПриРасторженииЭТД()
	
	ЕстьОшибки = Ложь;
	
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если Объект.КодПричиныРасторжения = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Код причины расторжения не заполнен.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.КодПричиныРасторжения);
	КонецЕсли;
	
	Если Объект.ДатаРасторжения = '00010101' Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Дата расторжения не заполнена.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ДатаРасторжения);
	ИначеЕсли Объект.ДатаРасторжения < Объект.ДатаНачала Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Дата расторжения договора не должна быть раньше даты начала договора.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ДатаРасторжения);
	КонецЕсли;
	
	Если НачалоДня(Объект.ДатаРасторжения) > НачалоДня(ДатаСеанса) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Дата расторжения договора не должна быть позже текущего дня.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.ДатаРасторжения);
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

// Ограничивает доступность и видимость на основании входных параметров и текущего статуса документа.
// Если документ сформирован, тогда пользователь:
//  - не может видеть реквизиты расторжения.
//  - Может редактировать все остальные реквизиты.
//  - Может использовать команды "Отправить" 
// Если документ зарегистрирован, тогда пользователь:
//  - Может редактировать реквизиты расторжения (но не у доп. соглашений).
//  - Может использовать команды "Исправить" и "Расторгнуть".
// Если документ расторгнут, тогда пользователь:
//  - Не может его редактировать.
// Параметры:
//  ДоступноРедактирование                    - Булево - Изначальное разрешение на редактирование реквизитов.
//	  При отправке договора на сервер устанавливается в ложь.
//  ЗапрещеноРедактированиеОсновныхРеквизитов - Булево - Доступ к редактированию сотрудника и организации.
//
&НаКлиенте
Процедура УстановитьВидимостьИДоступностьЭлементов(ДоступноРедактирование
		, ЗапрещеноРедактированиеОсновныхРеквизитов = Ложь)
	
	ДокументРасторгнут      = (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Расторгнут"));
	ДокументЗарегистрирован = (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Зарегистрирован"));
	ДокументСформирован     = (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Сформирован"));
	ДокументНовый           = Параметры.Ключ.Пустая();
	ДоступноИсправление     = (ДокументЗарегистрирован И НЕ ДоступноРедактирование);
	ДоступноРасторжение     = (ДоступноИсправление И НЕ Объект.ЭтоДополнительноеСоглашение);
	
	Элементы.РеквизитыДоговора1.ТолькоПросмотр   = НЕ ДоступноРедактирование;
	Элементы.РеквизитыДоговора2.ТолькоПросмотр   = НЕ ДоступноРедактирование;
	Элементы.ОсновнойЭТД.ТолькоПросмотр          = НЕ ДоступноРедактирование;
	Элементы.ДокументОснование.ТолькоПросмотр    = НЕ ДоступноРедактирование;
	Элементы.НомерДоговора.ТолькоПросмотр        = НЕ ДоступноРедактирование;
	Элементы.ИдентификаторОсновногоЭТД.ТолькоПросмотр = НЕ ДоступноРедактирование;
	Элементы.ФормаЗаписатьИЗакрыть.Видимость     = ДокументСформирован ИЛИ ДокументНовый;
	Элементы.ФормаЗаписать.Видимость             = ДокументСформирован ИЛИ ДокументНовый;
	Элементы.Отправить.Видимость                 = ДоступноРедактирование;
	Элементы.Перезаполнить.Видимость     = ДоступноРедактирование;
	Элементы.ЗаполнитьНавыкиПоПрофилю.Видимость  = ДоступноРедактирование;
	Элементы.Исправить.Видимость                 = ДоступноИсправление;
	Элементы.Расторгнуть.Видимость               = ДоступноРасторжение;
	Элементы.РасторжениеДоговора.Видимость       = (ДоступноРасторжение ИЛИ ДокументРасторгнут) И НЕ Объект.ЭтоДополнительноеСоглашение;
	Элементы.РасторжениеДоговора.ТолькоПросмотр  = ДокументРасторгнут;
	Элементы.ОсновнойЭТД.Видимость               = Объект.ЭтоДополнительноеСоглашение;
	Элементы.ИдентификаторОсновногоЭТД.Видимость = Объект.ЭтоДополнительноеСоглашение;
	Элементы.ДополнительныеСведения.Видимость    = НЕ Объект.ЭтоДополнительноеСоглашение;
	Элементы.РеквизитыРаботодателя.ТолькоПросмотр = ЗапрещеноРедактированиеОсновныхРеквизитов ИЛИ НЕ ДоступноРедактирование;
	Элементы.РеквизитыРаботника.ТолькоПросмотр    = ЗапрещеноРедактированиеОсновныхРеквизитов ИЛИ НЕ ДоступноРедактирование;
	Элементы.НавыкиРаботника.ТолькоПросмотр       = НЕ ДоступноРедактирование;
	
	// дата окончания передается только для доп соглашения
	Элементы.ДатаОкончанияДоговора.Видимость = Объект.ЭтоДополнительноеСоглашение;
	
	Элементы.ДоляНеполногоРабочегоВремени.Видимость = (Объект.РежимРабочегоВремени = "3");
	Элементы.ГруппаДанныеТяжелыхУсловийТруда.Видимость = (УсловияТрудаСтрока = "1");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовок(ЭтаФорма)
	
	Объект = ЭтаФорма.Объект;
	Элементы = ЭтаФорма.Элементы;
	
	Префикс = ?(Объект.ЭтоДополнительноеСоглашение, НСтр("ru='Дополнительное соглашение'"), НСтр("ru='Электронный трудовой договор'"));
	
	Элементы.РеквизитыДоговора1.Заголовок = ?(Объект.ЭтоДополнительноеСоглашение, НСтр("ru='Реквизиты допсоглашения'"), НСтр("ru='Реквизиты договора'"));
	
	Элементы.НомерДоговора.Заголовок = ?(Объект.ЭтоДополнительноеСоглашение, НСтр("ru='Номер соглашения'"), НСтр("ru='Номер договора'"));
	
	Элементы.ИнформацияОДоговоре.Заголовок = ?(Объект.ЭтоДополнительноеСоглашение, НСтр("ru='Информация о дополнительном соглашении'"), НСтр("ru='Информация о трудовом договоре'"));
	
	Если Объект.Ссылка.Пустая() Тогда
		ЭтаФорма.Заголовок = Префикс + ?(Объект.ЭтоДополнительноеСоглашение, НСтр("ru = ' (Новое)'"), НСтр("ru = ' (Новый)'"));
		Возврат;
	КонецЕсли;
	
	Шаблон = Префикс + " " + НСтр("ru = '№ %1 от %2'");
	
	ЭтаФорма.Заголовок = СтрШаблон(Шаблон, Объект.НомерДоговора, Формат(Объект.ДатаЗаключения, "ДЛФ=D"));
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкеЗаполнения(ТекстОшибки, ЭлементФормы, ЭтоРеквизитОбъекта = Истина)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстОшибки;
	Сообщение.Поле = ?(ЭтоРеквизитОбъекта, "Объект.", "") + ЭлементФормы.Имя;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереДоговор(ПараметрыЗаписи)
	
	СтруктураДанныхДоговора = ЭлектронноеВзаимодействиеССервисами.ПодготовитьДанныеДоговораЭТД(Объект);
	
	ПараметрыЗаписи.Вставить("ДанныеДляПодписи", СтруктураДанныхДоговора.ДанныеДляПодписи);
	ПараметрыЗаписи.Вставить("ДанныеДоговора", СтруктураДанныхДоговора.ДанныеДоговора);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереДоговорПродолжение(ТекущийОбъект, ПараметрыЗаписи, ДанныеАутентификации, ПодписанныйДоговор)
	
	GUIDДоговора = Строка(ТекущийОбъект.Ссылка.УникальныйИдентификатор());
	
	ЭтоИзменениеДоговора = (Объект.Идентификатор <> "");
	
	ТекущийОбъект.Идентификатор = ЭлектронноеВзаимодействиеССервисами.ОтправитьПодписанныйДоговорЭТД(
		ДанныеАутентификации,
		ПодписанныйДоговор,
		ПараметрыЗаписи.ДанныеДоговора,
		GUIDДоговора,
		"contract",
		?(ЭтоИзменениеДоговора, "edit", "create"));
	
	ТекущийОбъект.Статус = Перечисления.СтатусыЭТД.Зарегистрирован;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереДопСоглашение(ПараметрыЗаписи)
	
	СтруктураДанныхДоговора = ЭлектронноеВзаимодействиеССервисами.ПодготовитьДанныеДоговораЭТД(Объект, "Соглашение");
	
	ПараметрыЗаписи.Вставить("ДанныеДляПодписи", СтруктураДанныхДоговора.ДанныеДляПодписи);
	ПараметрыЗаписи.Вставить("ДанныеДоговора", СтруктураДанныхДоговора.ДанныеДоговора);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереДопСоглашениеПродолжение(ТекущийОбъект, ПараметрыЗаписи, ДанныеАутентификации, ПодписанныйДоговор)
	
	GUIDДоговора = Строка(ТекущийОбъект.Ссылка.УникальныйИдентификатор());
	
	ЭтоИзменениеДоговора = (Объект.Идентификатор <> "");
	
	ТекущийОбъект.Идентификатор = ЭлектронноеВзаимодействиеССервисами.ОтправитьПодписанныйДоговорЭТД(
		ДанныеАутентификации,
		ПодписанныйДоговор,
		ПараметрыЗаписи.ДанныеДоговора,
		GUIDДоговора,
		"supply",
		?(ЭтоИзменениеДоговора, "edit", "create"));
	
	ТекущийОбъект.Статус = Перечисления.СтатусыЭТД.Зарегистрирован;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереНачало(ПараметрыЗаписи)  
    
    ТекущийОбъект = Объект; 
	
	Если ТекущийОбъект.Автор.Пустая() Тогда
		ТекущийОбъект.Автор = ЭТДСервер.ПолучитьТекущегоПользователя();
	КонецЕсли;
		
	Если (ТекущийОбъект.Ссылка.Пустая()) Тогда
		ДокументОбъект = ДанныеФормыВЗначение(ТекущийОбъект, Тип("ДокументОбъект.ЭТД"));
		ДокументОбъект.Записать();
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		Модифицированность = Ложь;
		УстановитьЗаголовок(ЭтаФорма);
	КонецЕсли;
	
	Если ПараметрыЗаписи.ВидОперации = "СозданиеИзменениеДоговора" Тогда
		ПередЗаписьюНаСервереДоговор(ПараметрыЗаписи);
	ИначеЕсли ПараметрыЗаписи.ВидОперации = "СозданиеИзменениеДопСоглашения" Тогда
		ПередЗаписьюНаСервереДопСоглашение(ПараметрыЗаписи);
	ИначеЕсли ПараметрыЗаписи.ВидОперации = "РасторжениеДоговора" Тогда
		ПередЗаписьюНаСервереРасторжение(ПараметрыЗаписи);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереПродолжение(ПараметрыЗаписи, ПодписанныйДоговор)  
    
    ТекущийОбъект = Объект; 
    
	Если ТекущийОбъект.Автор.Пустая() Тогда
		ТекущийОбъект.Автор = ЭТДСервер.ПолучитьТекущегоПользователя();
	КонецЕсли;
		
	Если (ТекущийОбъект.Ссылка.Пустая()) Тогда
		ДокументОбъект = ДанныеФормыВЗначение(ТекущийОбъект, Тип("ДокументОбъект.ЭТД"));
		ДокументОбъект.Записать();
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		Модифицированность = Ложь;
		УстановитьЗаголовок(ЭтаФорма);
	КонецЕсли;
	
    БИНОрганизацииДляСервиса = "";
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		БИНОрганизацииДляСервиса = ЭТДСервер.БИНОрганизации(Объект.Организация);		
	КонецЕсли;

	ДанныеАутентификации = ЭлектронноеВзаимодействиеССервисами.ПолучитьДанныеАутентификацииЭТД(БИНОрганизацииДляСервиса);
	
	Если ПараметрыЗаписи.ВидОперации = "СозданиеИзменениеДоговора" Тогда
		ПередЗаписьюНаСервереДоговорПродолжение(ТекущийОбъект, ПараметрыЗаписи, ДанныеАутентификации, ПодписанныйДоговор);
	ИначеЕсли ПараметрыЗаписи.ВидОперации = "СозданиеИзменениеДопСоглашения" Тогда
		ПередЗаписьюНаСервереДопСоглашениеПродолжение(ТекущийОбъект, ПараметрыЗаписи, ДанныеАутентификации, ПодписанныйДоговор);
	ИначеЕсли ПараметрыЗаписи.ВидОперации = "РасторжениеДоговора" Тогда
		ПередЗаписьюНаСервереРасторжениеПродолжение(ТекущийОбъект, ПараметрыЗаписи, ДанныеАутентификации, ПодписанныйДоговор);
	Иначе
		Возврат;
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереРасторжение(ПараметрыЗаписи)
	
	СтруктураДанныхДоговора = ЭлектронноеВзаимодействиеССервисами.ПодготовитьДанныеДоговораЭТД(Объект, "Расторжение");
	
	ПараметрыЗаписи.Вставить("ДанныеДляПодписи", СтруктураДанныхДоговора.ДанныеДляПодписи);
	ПараметрыЗаписи.Вставить("ДанныеДоговора", СтруктураДанныхДоговора.ДанныеДоговора);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереРасторжениеПродолжение(ТекущийОбъект, ПараметрыЗаписи, ДанныеАутентификации, ПодписанныйДоговор)
	
	GUIDДоговора = Строка(ТекущийОбъект.Ссылка.УникальныйИдентификатор());
	
	ТекущийОбъект.Идентификатор = ЭлектронноеВзаимодействиеССервисами.ОтправитьПодписанныйДоговорЭТД(
		ДанныеАутентификации,
		ПодписанныйДоговор,
		ПараметрыЗаписи.ДанныеДоговора,
		GUIDДоговора,
		"contract",
		"remove");
	
	ТекущийОбъект.Статус = Перечисления.СтатусыЭТД.Расторгнут;
	
	НачатьТранзакцию();
	Попытка
		// Изменяем статус всех связанных доп. соглашений на расторгнутые
		ДопСоглашенияКРасторжению = ПолучитьДопСоглашенияДоговора(Объект.Ссылка);
		
		Для Каждого ДопСоглашение Из ДопСоглашенияКРасторжению Цикл
			ДопСоглашениеОбъект = ДопСоглашение.Ссылка.ПолучитьОбъект();
			ДопСоглашениеОбъект.Заблокировать();
			
			ДопСоглашениеОбъект.Статус = Перечисления.СтатусыЭТД.Расторгнут;
			
			ДопСоглашениеОбъект.Записать();
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дополнительное соглашение № %1 расторгнуто'"), ДопСоглашение.НомерДоговора));
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ЭТД'"),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ЭТД,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокВыборкаСрокиДействия(ЭтоДополнительноеСоглашение)
	
	Результат = Новый СписокЗначений;
	Результат.Добавить("1", НСтр("ru = 'На неопределенный срок'"));
	Результат.Добавить("2", НСтр("ru = 'На определенный срок не менее одного года'"));
	Результат.Добавить("3", НСтр("ru = 'На определенный срок (для субьектов малого предпринимательства)'"));
	Результат.Добавить("4", НСтр("ru = 'На время выполнения определенной работы'"));
	Результат.Добавить("5", НСтр("ru = 'На время замещения временно отсутствующего работника'"));
	Результат.Добавить("6", НСтр("ru = 'На время выполнения сезонной работы'"));
	Результат.Добавить("7", НСтр("ru = 'В пределах срока ИРС'"));
	Если ЭтоДополнительноеСоглашение Тогда
		Результат.Добавить("8", НСтр("ru = 'По день окончания отпуска по уходу за ребенком'"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокВыборкаОтношениеКВоинскойСлужбе()
		
	Результат = Новый СписокЗначений;
	Результат.Добавить("0", НСтр("ru = 'Невоеннообязанный'"));
	Результат.Добавить("1", НСтр("ru = 'Военнообязанный'"));
	Результат.Добавить("2", НСтр("ru = 'Призывник'"));
		
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокВыборкаРежимРабочегоВремени()
	
	Результат = Новый СписокЗначений;
	Результат.Добавить("1", НСтр("ru = 'Нормальный'"));
	Результат.Добавить("2", НСтр("ru = 'Сокращенный'"));
	Результат.Добавить("3", НСтр("ru = 'Неполный'"));
	Результат.Добавить("4", НСтр("ru = 'Меньшая продолжительность'"));
	Результат.Добавить("5", НСтр("ru = 'Гибкий'"));
	Результат.Добавить("6", НСтр("ru = 'Совместное трудоустройство'"));
	Результат.Добавить("7", НСтр("ru = 'Скользящий график работы'"));
	Результат.Добавить("8", НСтр("ru = 'Четырехдневная рабочая неделя'"));
	Результат.Добавить("9", НСтр("ru = 'Платформенная занятость'"));
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокВыборкаУсловияТруда()
	
	Результат = Новый СписокЗначений;
	Результат.Добавить("0", НСтр("ru = 'Нормальные'"));
	Результат.Добавить("1", НСтр("ru = 'Вредные/Опасные/Тяжёлые'"));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПерезаполнитьДокумент(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		ТекстВопроса = НСтр("ru='Для заполнения по данным учета необходимо заполнить дату начала'");
		СообщитьОбОшибкеЗаполнения(ТекстВопроса,  Элементы.ДатаНачала);
	Иначе
		ЗаполнитьРеквизитыФормы();
		ОпределениеНеполногоВремени();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИзКлассификатораКодДолжностиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.КодПричиныРасторжения = Результат.Код;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНавыкиПоНастройкамНаСервере()
	
	НавыкиПоВидам = ЭТДСервер.ПолучитьДанныеПрофилейПоНастройкам(Объект.ДатаНачала, Объект.Сотрудник, Объект.Должность, Объект.Организация);
	
	Если НавыкиПоВидам.ОбщиеНавыки.Количество() > 0 Тогда
		Объект.ОбщиеНавыки.Загрузить(НавыкиПоВидам.ОбщиеНавыки);	
	КонецЕсли;
	
	Если НавыкиПоВидам.ПрофессиональныеНавыки.Количество() > 0 Тогда
		Объект.СпециальныеНавыки.Загрузить(НавыкиПоВидам.ПрофессиональныеНавыки);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНавыкиПоПрофилюНаСервере(ПрофильНавыков)
	
	Если ПрофильНавыков.ОбщиеНавыки.Количество() > 0 Тогда
		Объект.ОбщиеНавыки.Загрузить(ПрофильНавыков.ОбщиеНавыки.Выгрузить());	
	КонецЕсли;
	
	Если ПрофильНавыков.ПрофессиональныеНавыки.Количество() > 0 Тогда
		Объект.СпециальныеНавыки.Загрузить(ПрофильНавыков.ПрофессиональныеНавыки.Выгрузить());	
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДолжностьОрганизации(ДолжностьПоШтатномуРасписанию)
	
	Возврат ЭТДСервер.ПолучитьДолжностьОрганизации(ДолжностьПоШтатномуРасписанию);
	
КонецФункции

&НаКлиенте
Процедура ОткрытиеФормыВыбораДокументаОснования(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ЭТДКлиент.ОткрытиеФормыВыбораДокументаОснования(ВыбранныйЭлемент, Объект.Организация, Объект.Сотрудник, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораДокументаОснования(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Объект.ДокументОснование = РезультатЗакрытия;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНаименованиеДолжности(КодДолжности)
	
	Если КодДолжности = "" Тогда
		Возврат "";
	КонецЕсли;
	
	КлассификаторСтрокой = Обработки.ОбменЭТД.ПолучитьМакет("КлассификаторПрофессийXML").ПолучитьТекст();
	
	Если Найти(КлассификаторСтрокой, КодДолжности) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ИндексДолжности = Найти(КлассификаторСтрокой, КодДолжности) + СтрДлина(КодДолжности);
	ДолжностиСтрокой = Сред(КлассификаторСтрокой, ИндексДолжности);
	ДолжностьСтрокой = СокрП(Лев(ДолжностиСтрокой, Найти(ДолжностиСтрокой, "</row>") - 1));
	ДолжностьСтрокой = СокрЛ(СтрЗаменить(ДолжностьСтрокой, "</Value>", ""));
	ДолжностьСтрокой = СтрЗаменить(ДолжностьСтрокой, "<Value>", "");
	ДолжностьНаРусском = Лев(ДолжностьСтрокой, Найти(ДолжностьСтрокой, Символы.ПС) - 1);

	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ru = '%1'", ДолжностьНаРусском);
	
	Возврат НСтр(Текст);
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораКодаВредныхУсловийТруда(ДанныеУсловийТруда, Параметры) Экспорт
	
	Если ДанныеУсловийТруда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеУсловийТруда.Код <> Объект.КодТяжелыхУсловийТруда Тогда
		Объект.КодТяжелыхУсловийТруда = ДанныеУсловийТруда.Код;
		Объект.НаименованиеТяжелыхУсловийТруда = ДанныеУсловийТруда.Наименование;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОпределениеНеполногоВремени()
	
	НеполноеВремя = (Объект.РежимРабочегоВремени = "3");
	Элементы.ДоляНеполногоРабочегоВремени.Видимость = НеполноеВремя;
	Если НЕ НеполноеВремя Тогда
		Объект.ДоляНеполногоРабочегоВремени = "1";
		ДоляНеполногоРабочегоВремениЧисло = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределениеТяжелыхУсловийТруда()
	
	ТяжелыеУсловияТруда = (УсловияТрудаСтрока = "1");
	Элементы.ГруппаДанныеТяжелыхУсловийТруда.Видимость = ТяжелыеУсловияТруда;
	Если НЕ ТяжелыеУсловияТруда Тогда
		Объект.КодТяжелыхУсловийТруда = "";
		Объект.НаименованиеТяжелыхУсловийТруда = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНаименованиеТяжелыхУсловийТруда(КодУсловийТруда)
	
	Если КодУсловийТруда = "" Тогда
		Возврат "";
	КонецЕсли;
	
	КлассификаторСтрокой = Обработки.ОбменЭТД.ПолучитьМакет("КлассификаторВредныхУсловийТруда").ПолучитьТекст();
	
	Если Найти(КлассификаторСтрокой, КодУсловийТруда) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ИндексУсловийТруда = Найти(КлассификаторСтрокой, КодУсловийТруда) + СтрДлина(КодУсловийТруда);
	УсловияТрудаСтрокой = Сред(КлассификаторСтрокой, ИндексУсловийТруда);
	УсловиеТрудаСтрокой = СокрП(Лев(УсловияТрудаСтрокой, Найти(УсловияТрудаСтрокой, "</row>") - 1));
	УсловиеТрудаСтрокой = СокрЛ(СтрЗаменить(УсловиеТрудаСтрокой, "</Value>", ""));
	УсловиеТрудаСтрокой = СтрЗаменить(УсловиеТрудаСтрокой, "<Value>", "");
	ДолжностьНаРусском = Лев(УсловиеТрудаСтрокой, Найти(УсловиеТрудаСтрокой, Символы.ПС) - 1);

	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ru = '%1'", ДолжностьНаРусском);
	
	Возврат НСтр(Текст);
	
КонецФункции

#КонецОбласти
