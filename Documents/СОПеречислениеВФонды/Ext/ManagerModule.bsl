#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ДоступныеДокументыОснования(ВидОперации) Экспорт
	
	ДоступныеДокументы = Новый Массив;
	
	Если ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений Тогда
		ДоступныеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РаспределениеПениСО);
		ДоступныеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РасчетПениСО);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС Тогда
		ДоступныеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РаспределениеПениВОСМС);
		ДоступныеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РасчетПениВОСМС);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС Тогда
		ДоступныеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РаспределениеПениООСМС);
		ДоступныеДокументы.Добавить(Перечисления.ВидыОперацийРасчетПени.РасчетПениООСМС);
	КонецЕсли;
	
	
	Возврат ДоступныеДокументы;

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПодготовитьДанныеДляЗаполнения(Параметры, АдресХранилища) Экспорт
	
	ВидОперации = Параметры.ВидОперации;
	
	ДанныеРеглУчетаТекст = "";
	
	УсловиеНаПодразделение = "";
		
	Если ЗначениеЗаполнено(Параметры.парамПодразделениеОрганизации) И Параметры.ПорядокЗаполнения = 0 Тогда
		УсловиеНаПодразделение = " И РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделениеОрганизации)";
	КонецЕсли;
		
	УсловиеНаПодразделение = УсловиеНаПодразделение + "И РаботникиОрганизацийСрезПоследних.СтруктурноеПодразделение = &парамСтруктурноеПодразделение";
	
	Если Параметры.ПорядокЗаполнения = 1 Тогда
		УсловиеСтруктурноеПодразделение = " И СтруктурнаяЕдиница = &СтруктурнаяЕдиница ";
	Иначе
		УсловиеСтруктурноеПодразделение = "";
	КонецЕсли;

	ДанныеРеглУчетаТекст = ДанныеРеглУчетаТекст + 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|				ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
	|			ИНАЧЕ РаботникиОрганизации.Период
	|		КОНЕЦ) КАК Период
	|ПОМЕСТИТЬ ВТ_ДатыПоследнихНазначений
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
	|	И РаботникиОрганизации.Период <= &парамНачало
	|	И РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И РаботникиОрганизации.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизации.Сотрудник.Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТ_РаботникиОрганизаций
	|ИЗ
	|	ВТ_ДатыПоследнихНазначений КАК ДатыПоследнихНазначений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизацийСрезПоследних
	|		ПО ДатыПоследнихНазначений.ФизЛицо = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
	|			И (ДатыПоследнихНазначений.Период = ВЫБОР
	|				КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизацийСрезПоследних.Период, ДЕНЬ, -1)
	|				ИНАЧЕ РаботникиОрганизацийСрезПоследних.Период
	|			КОНЕЦ)
	|			И (РаботникиОрганизацийСрезПоследних.Организация = &парамГоловнаяОрганизация)
	|			И (РаботникиОрганизацийСрезПоследних.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|			И (РаботникиОрганизацийСрезПоследних.Активность)
	|			И (ВЫБОР
	|				КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|				И ДатыПоследнихНазначений.Период < НАЧАЛОПЕРИОДА(&парамМесяц, МЕСЯЦ)
	|					ТОГДА ДатыПоследнихНазначений.ФизЛицо <> РаботникиОрганизацийСрезПоследних.Организация.ИндивидуальныйПредприниматель
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			" + УсловиеНаПодразделение + "	
	|;
	|";
	
	ИмяПериода = "МесяцНалоговогоПериода";
	Если ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений Тогда
		ИмяРегистра = "СОРасчетыСФондами";
		ИмяРесурса = "Отчисление";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС Тогда
		ИмяРегистра = "ООСМСРасчетыСФондами";
		ИмяРесурса = "Отчисление";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС Тогда
		Если Параметры.ПоУдельномуВесу Тогда
			ИмяРегистра = "ВОСМСПодлежитПеречислениюВФонды";
			ИмяПериода = "МесяцВыплатыДоходов";
		Иначе
			ИмяРегистра = "ВОСМСРасчетыСФондами";
		КонецЕсли;
		ИмяРесурса = "Взнос";
	Иначе 
		Возврат;	
	КонецЕсли;
	
	ДанныеРеглУчетаТекст = ДанныеРеглУчетаТекст +"
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСФондамиОстатки.Физлицо КАК ФизЛицо,
	|	РасчетыСФондамиОстатки." + ИмяРесурса + "Остаток КАК Сумма
	|ИЗ
	|	РегистрНакопления." + ИмяРегистра + ".Остатки(
	|			&парамГраницаОстатков,
	|			Организация = &парамОрганизация" + УсловиеСтруктурноеПодразделение + "
	|			" + ?(НЕ Параметры.ПоУдельномуВесу, "И ВидПлатежа = &парамВидПлатежа", "") + "
	|			И " + ?(Параметры.ПоОстаткам, "
	|				" + ИмяПериода + " <= КОНЕЦПЕРИОДА(&парамМесяц, МЕСЯЦ)", "
	|				" + ИмяПериода + " МЕЖДУ НАЧАЛОПЕРИОДА(&парамМесяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(&парамМесяц, МЕСЯЦ)") + ") КАК РасчетыСФондамиОстатки
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО РаботникиОрганизаций.ФизЛицо = РасчетыСФондамиОстатки.ФизЛицо";
	
	Если ВидОперации <> Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС Тогда //  по сотрудникам организации
		ДанныеРеглУчетаТекст = ДанныеРеглУчетаТекст +
		"
		|ГДЕ
		|	(НЕ РаботникиОрганизаций.ФизЛицо ЕСТЬ NULL) ИЛИ (РасчетыСФондамиОстатки.Физлицо = РасчетыСФондамиОстатки.Организация.ИндивидуальныйПредприниматель)
		|";
	ИначеЕсли Параметры.ПорядокЗаполнения = 0 Тогда //  по сотрудникам организации
		ДанныеРеглУчетаТекст = ДанныеРеглУчетаТекст +
		"
		|ГДЕ
		|	НЕ РаботникиОрганизаций.ФизЛицо ЕСТЬ NULL
		|";
	Иначе  // по непринятым лицам
		ДанныеРеглУчетаТекст = ДанныеРеглУчетаТекст +
		"
		|ГДЕ
		|	РаботникиОрганизаций.ФизЛицо ЕСТЬ NULL
		|";
	КонецЕсли;
		
	ДанныеРеглУчетаТекст = ДанныеРеглУчетаТекст +
	"
	|УПОРЯДОЧИТЬ ПО
	|	РасчетыСФондамиОстатки.Физлицо.Наименование
	|";
	
	Запрос = Новый Запрос(ДанныеРеглУчетаТекст);
	
	Для Каждого Параметр Из Параметры Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);		
	КонецЦикла;
	
	Если Параметры.ПорядокЗаполнения = 1 Тогда
		Если ЗначениеЗаполнено(Параметры.парамСтруктурноеПодразделение) Тогда
			Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Параметры.парамСтруктурноеПодразделение);
		Иначе
			Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Параметры.парамОрганизация);
		КонецЕсли;
	КонецЕсли;

	СтруктураДанных = Новый Структура();
			
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Сумма) И Выборка.Сумма > 0 Тогда
			НоваяСтрока = Параметры.ТаблицаСоциальныеОтчисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДанных.Вставить("ТаблицаСоциальныеОтчисления", Параметры.ТаблицаСоциальныеОтчисления); 
	 
	ПоместитьВоВременноеХранилище(СтруктураДанных, АдресХранилища);   
	
КонецПроцедуры 

Процедура ПодготовитьДанныеДляРасчета(Параметры, АдресХранилища) Экспорт
	
	ИмяПериода = "МесяцНалоговогоПериода";
	Если Параметры.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений Тогда
		ИмяРегистра = "СОРасчетыСФондами";
		ИмяРесурса = "Отчисление";
	ИначеЕсли Параметры.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС Тогда
		ИмяРегистра = "ООСМСРасчетыСФондами";
		ИмяРесурса = "Отчисление";
	ИначеЕсли Параметры.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС Тогда
		Если Параметры.ПоУдельномуВесу Тогда
			ИмяРегистра = "ВОСМСПодлежитПеречислениюВФонды";
			ИмяПериода = "МесяцВыплатыДоходов";
		Иначе
			ИмяРегистра = "ВОСМСРасчетыСФондами";
		КонецЕсли;
		ИмяРесурса = "Взнос";
	Иначе 
		Возврат;	
	КонецЕсли;	
	
	ДанныеРеглУчетаТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо,
	|	СОПеречислениеВФондыСоциальныеОтчисления.НомерСтроки,
	|	РасчетыСФондамиОстатки." + ИмяРесурса + "Остаток КАК Сумма
	|ИЗ
	|	Документ.СОПеречислениеВФонды.СоциальныеОтчисления КАК СОПеречислениеВФондыСоциальныеОтчисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления." + ИмяРегистра + ".Остатки(
	|				&парамГраницаОстатков,
	|				Организация = &парамОрганизация
	|					" + ?(НЕ Параметры.ПоУдельномуВесу, "И ВидПлатежа = &парамВидПлатежа", "") + "
	|					И ВЫБОР
	|						КОГДА &ПоОстаткам
	|							ТОГДА " + ИмяПериода + " <= КОНЕЦПЕРИОДА(&парамМесяц, МЕСЯЦ)
	|						ИНАЧЕ " + ИмяПериода + " МЕЖДУ НАЧАЛОПЕРИОДА(&парамМесяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(&парамМесяц, МЕСЯЦ)
	|					КОНЕЦ
	|					И ФизЛицо В
	|						(ВЫБРАТЬ
	|							Док.ФизЛицо
	|						ИЗ
	|							Документ.СОПеречислениеВФонды.СоциальныеОтчисления КАК Док
	|						ГДЕ
	|							Док.Ссылка = &парамСсылка)) КАК РасчетыСФондамиОстатки
	|		ПО СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо = РасчетыСФондамиОстатки.ФизЛицо
	|ГДЕ
	|	СОПеречислениеВФондыСоциальныеОтчисления.Ссылка = &парамСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СОПеречислениеВФондыСоциальныеОтчисления.НомерСтроки";
	
	Запрос = Новый Запрос(ДанныеРеглУчетаТекст);
	
	Для Каждого Параметр Из Параметры Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);		
	КонецЦикла;
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("ТаблицаСоциальныеОтчисления", Запрос.Выполнить().Выгрузить()); 
	
	ПоместитьВоВременноеХранилище(СтруктураДанных, АдресХранилища); 
			
КонецПроцедуры

Процедура ЗаполнитьПоРасчетПениОПВиСО(Объект, Основание) Экспорт
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, Основание);
	
	Если Основание.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениСО
		ИЛИ Основание.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениСО Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений;
	ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениВОСМС
		ИЛИ Основание.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениВОСМС Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС;
	ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениООСМС
		ИЛИ Основание.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениООСМС Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС;
	Иначе 
		Возврат;
	КонецЕсли;
	
	Объект.ВидПлатежа = Основание.ВидПлатежа;
	
	Объект.ДокументОснование = Основание;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", Основание);
	Запрос.УстановитьПараметр("ПериодРегистрации", Объект.ПериодРегистрации);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетПени.ФизЛицо,
	|	СУММА(РасчетПени.Сумма) КАК Сумма
	|ИЗ
	|	Документ.РасчетПениОПВиСО.ИсчислениеПени КАК РасчетПени
	|ГДЕ
	|	РасчетПени.Ссылка = &Основание
	|	И РасчетПени.МесяцНалоговогоПериода МЕЖДУ &ПериодРегистрации И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|СГРУППИРОВАТЬ ПО
	|	РасчетПени.ФизЛицо
	|";
	
	Объект.СоциальныеОтчисления.Загрузить(Запрос.Выполнить().Выгрузить());		
	
	Объект.ДокументОснование = Основание;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления ИБ

Процедура ЗаполнитьВидОперацииПриОбновлении(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	СОПеречислениеВФонды.Ссылка
		|ИЗ
		|	Документ.СОПеречислениеВФонды КАК СОПеречислениеВФонды
		|ГДЕ
		|	СОПеречислениеВФонды.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениевФонды.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СОПеречислениеВФонды.Дата УБЫВ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Выборка = Результат.Выбрать();
	
	ВОПоУмолчанию = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений;
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
    	ЭлементБлокировки = Блокировка.Добавить("Документ.СОПеречислениеВФонды");
    	ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		
		Попытка
			Блокировка.Заблокировать();
			ДокументОбъект.ВидОперации = ВОПоУмолчанию;

			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Операция не выполнена'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

#КонецЕсли