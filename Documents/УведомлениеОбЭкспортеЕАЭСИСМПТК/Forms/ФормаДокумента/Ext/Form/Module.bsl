
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.ПриСозданииНаСервере_НастроитьПодключаемоеОборудование(ЭтаФорма);

	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		Объект.НомерИСМПТ = "";
		ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
		
		//ВРЕМЕННО//
		//По состоянию АПИ в версии 1.0.2.4 устанавливается ограничение на заполняемые данные: документ работает только с обувью из РФ.
		ВременнаяСхемаПризнания = Истина;
		Если ВременнаяСхемаПризнания Тогда
			Объект.ТоварнаяГруппа   = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная");
			Элементы.ТоварнаяГруппа.ТолькоПросмотр = Истина;
			Объект.СтранаПолучатель = ИнтеграцияИСМПТКПереопределяемый.ЗаполнитьСтрануПоУмолчаниюПризнаниеКодовЕАЭС();
			Элементы.СтранаПолучатель.ТолькоПросмотр = Истина;
		Иначе
			Элементы.СтранаПолучатель.РежимВыбораИзСписка = Истина;
			Элементы.СтранаПолучатель.СписокВыбора.Очистить();
			Элементы.СтранаПолучатель.СписокВыбора.ЗагрузитьЗначения(ИнтеграцияИСМПТКПереопределяемый.ПолучитьСписокСтранЕАЭС());
		КонецЕсли;
		///////////
	КонецЕсли;
	
	СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	УправлениеФормой();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	СформироватьДеревоКодовМаркировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы И ИспользуютсяСканерыШтрихкода Тогда
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	СобытияФормИСМПТКПереопределяемый.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОбЭкспортеЕАЭС());
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УправлениеФормой();
	ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	СобытияФормИСМПТКПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ИзменитьДокументОснование = Ложь;
	
	//Сначала проверяем, если ли в выбранном основании товары, по которым необходимо заполнять документ
	ЕстьМаркируемыйТовар = ПроверитьНаличиеМаркируемогоТовара(ВыбранноеЗначение);
	
	Если Не ЕстьМаркируемыйТовар Тогда
		//Если в выбранном основании нет маркируемого товара, то заполнять документ ИСМПТ по нему не имеет смысла. 
		//Сообщаем пользователю, отменяем выбор.
		ТекстСообщения = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТекстСообщенияВДокументеОтсутствуетМаркируемаяпродукция();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументОснование%", ВыбранноеЗначение);
		Сообщить(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование)
			И Объект.ДокументОснование <> ВыбранноеЗначение 
			И СтрНайти(ИсточникВыбора.ИмяФормы, "ФормаВыбораИзКлассификатора") = 0 Тогда
			
			ТекстВопроса = НСтр(
			"ru = 'Документ уже отражен в учете с помощью ""%СтарыйДокументОснование%"".
			|Отразить документ в учете с помощью выбранного документа?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%СтарыйДокументОснование%", Объект.ДокументОснование);
			
			ИзменитьДокументОснованиеЗавершение = Новый ОписаниеОповещения("ИзменитьДокументОснованиеЗавершение", ЭтаФорма, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
			ПоказатьВопрос(ИзменитьДокументОснованиеЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			
		Иначе
			
			ИзменитьДокументОснование = Истина;
			
		КонецЕсли;
		
		Если ИзменитьДокументОснование Тогда
				
			Структура_СвязанноеУведомление = ПроверитьСвязанноеУведомление(ВыбранноеЗначение);
						
			Если Структура_СвязанноеУведомление = Неопределено Тогда
				//Если у выбранного документа-основания нет связанного уведомления, заполняем его без вопросов
				Объект.ДокументОснование = ВыбранноеЗначение;
				СформироватьПредставлениеДокументаОснования(ЭтаФорма);
				
				Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик") Тогда
					ТекстВопроса = НСтр("ru = 'Перезаполнить Уведомление по выбранному основанию?'");
					ПерезаполнитьДокументПоОснованию = Новый ОписаниеОповещения("ПерезаполнитьДокументПоОснованию", ЭтаФорма);
					ПоказатьВопрос(ПерезаполнитьДокументПоОснованию, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				КонецЕсли;
				
				Модифицированность = Истина;				
			Иначе
				//Если связанный документ ИСМПТ есть, предупреждаем об этом пользователя и даем возможность отказаться от выбора
				ТекстВопросаВыборОснования = НСтр(
				"ru = 'На основании документа ""%ДокументОснование%"" уже введено Уведомление о ввозе. Привязать текущее Уведомление к выбранному документу без отсоединения ранее связанного документа ИС МПТ?'");
				ТекстВопросаВыборОснования = СтрЗаменить(ТекстВопросаВыборОснования, "%ДокументОснование%", ВыбранноеЗначение);
				
				ПродолжитьЗаполнениеДокументаОснования = Новый ОписаниеОповещения("ПродолжитьЗаполнениеДокументаОснования", ЭтаФорма, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
				ПоказатьВопрос(ПродолжитьЗаполнениеДокументаОснования, ТекстВопросаВыборОснования, РежимДиалогаВопрос.ОКОтмена);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОбЭкспортеЕАЭС() Тогда		
		
		Если Объект.Ссылка.Пустая() Тогда
			УправлениеФормой();	
		Иначе
			ЭтаФорма.Прочитать();	
		КонецЕсли;
		
		СформироватьДеревоКодовМаркировки();
		
	ИначеЕсли Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработкаСобытияСканераОбщая(Параметр);	
		КонецЕсли;
	Иначе			
		ИнтеграцияИСМПТККлиентПереопределяемый.ОбработкаОповещенияДокументыИСМПТ(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);		
	КонецЕсли;
	
	УправлениеФормой();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не СобытияФормИСМПТККлиентПереопределяемый.ОбрабатыватьВнешнееСобытиеТО() Тогда 
		Возврат;
	КонецЕсли;
	
	НеОтправлен  = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик");
	
	Параметр = Новый Массив;
	Параметр.Добавить(Данные);
	Параметр.Добавить(Неопределено);
	
	Если ВводДоступен() Тогда
		Если Событие = "Штрихкод" ИЛИ Событие = "ПолученШтрихкод" Тогда
			ОбработкаСобытияСканераОбщая(Параметр);
		КонецЕсли;
	Иначе
		ИнтеграцияИСМПТККлиентПереопределяемый.ОбработкаОповещенияДокументыИСМПТ(ЭтаФорма, Объект.Ссылка, Событие, Параметр, Источник);		
	КонецЕсли;

	//Для всех документов НЕ ЧЕРНОВИК запрещаем редактирование данных. Поэтому отключаем доступность команды редактирования и по умолчанию считаем ее Ложь
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаРедактироватьНедоступныеРеквизиты", "Доступность", НеОтправлен);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытияСканераОбщая(Параметр)
	
	ОчиститьСообщения();
	Если Не Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик") Тогда
		ТекстСообщения = НСтр("ru = 'Добавление кодов маркировки возможно только в документе со статусом Черновик.'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	Иначе
		Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() 
			И Не ЗначениеЗаполнено(Объект.Организация) Тогда
			ТекстСообщения = НСтр("ru = 'Включена опция автоматической проверки состояния кодов маркировки по данным сервера. Для получения токена сеанса требуется указать Организацию!'");
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		Если Не ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПроверкаФорматаТранспортногоКодаПройденаУспешно(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр)) Тогда
			Возврат;
		КонецЕсли;
		ОбработатьКодМаркировки(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОтражениеВУчете

&НаКлиенте
Процедура ПредставлениеУведомлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьЗначение(, Объект.ДокументОснование);
	Иначе
		Кнопки = Новый СписокЗначений;
			//Кнопки.Добавить("Создать", НСтр("ru = 'Создать'"));
			Кнопки.Добавить("Выбрать", НСтр("ru = 'Выбрать'"));
			Кнопки.Добавить("Отмена",  НСтр("ru = 'Отмена'"));
			ОтразитьДокументВУчетеЗавершение = Новый ОписаниеОповещения("ОтразитьДокументВУчетеЗавершение", ЭтаФорма);
			ПоказатьВопрос(ОтразитьДокументВУчетеЗавершение, НСтр("ru = 'Отразить документ в учете?'"), Кнопки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьДокументВУчетеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = "Выбрать" Тогда
		ВыбратьДокументОснование();
	ИначеЕсли РезультатВопроса = "Создать" Тогда
		СоздатьДокументОснованиеНаКлиентеПослеЗаписи(КодВозвратаДиалога.ОК, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументОснованиеНаКлиентеПослеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий");
		ДокументыВыбора = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПолучитьСписокДокументовОснованияДляЭкспортаЕАЭС(Направление, Объект.ВидОперации);
		
		Если ДокументыВыбора.Количество() > 1 Тогда
			
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ДокументыВыбора", ДокументыВыбора);
			
			Оповещение = Новый ОписаниеОповещения("СозданиеДокументаОснованияЗавершение", ЭтотОбъект);
			ОткрытьФорму("Обработка.ОбменИСМПТК.Форма.ФормаВыбораДокументаОснования", ПараметрыФормы,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		ИначеЕсли ДокументыВыбора.Количество() = 1 Тогда
			
			ВыбранныйДокумент = ДокументыВыбора[0].Значение;
			СозданиеДокументаОснованияЗавершение(ВыбранныйДокумент, Неопределено);
			
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеВыбрать(Команда)
	
	ВыбратьДокументОснование();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокументОснование()
	
	ДокументыВыбора = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПолучитьСписокДокументовОснованияУведомленияОбЭкспорте();
	
	Если ДокументыВыбора.Количество() > 1 Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДокументыВыбора", ДокументыВыбора);
					
		Оповещение = Новый ОписаниеОповещения("ВыборДокументаОснованияЗавершение", ЭтотОбъект);
		ОткрытьФорму("Обработка.ОбменИСМПТК.Форма.ФормаВыбораДокументаОснования", ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ДокументыВыбора.Количество() = 1 Тогда
		
		ВыбранныйДокумент = ДокументыВыбора[0].Значение;
		ВыборДокументаОснованияЗавершение(ВыбранныйДокумент, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаОснованияЗавершение(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйДокумент <> "" И ТипЗнч(ВыбранныйДокумент) <> Тип("Неопределено") Тогда
		
		ИмяДокумента = ВыбранныйДокумент;
		
		СтруктураОтбора = Новый Структура();
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			СтруктураОтбора.Вставить("Организация", Объект.Организация);
		КонецЕсли;
		
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.ДополнитьЗначенияОтбораПриВыбореДокументаОснованияДляЭкспортаТоваров(СтруктураОтбора, ИмяДокумента);
				
		СтруктураПараметров = Новый Структура("Отбор, РежимВыбора, МножественныйВыбор", СтруктураОтбора, Истина, Ложь);
		
		ИмяФормыВыбора = "Документ." + ИмяДокумента + ".ФормаВыбора"; 
		ОткрытьФорму(ИмяФормыВыбора, СтруктураПараметров , ЭтаФорма);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеДокументаОснованияЗавершение(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныйДокумент = Неопределено Тогда
		Массив = Новый Массив;
		Массив.Добавить(Объект.Ссылка);
		
		ДанныеДляСоздания = Новый Структура();
		ДанныеДляСоздания.Вставить("ИсходныйДокумент", 	  Массив);
		ДанныеДляСоздания.Вставить("СоздаваемыйДокумент", ВыбранныйДокумент);

		ИнтеграцияИСМПТККлиент.СоздатьПервичныйДокумент(ДанныеДляСоздания);
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Модифицированность = Истина;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументОснование(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьЗначение(, Объект.ДокументОснование);
	Иначе
		ПоказатьПредупреждение(, РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТекстСообщенияОтказДокументНеОтраженВУчете());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтсоединитьДокументОснование(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Объект.ДокументОснование = Неопределено;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Модифицированность = Истина;
	Иначе
		ПоказатьПредупреждение(, РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТекстСообщенияОтказДокументНеОтраженВУчете());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СостояниеДокумента

&НаСервере
Процедура СформироватьПредставлениеСостояния()
	
	Если Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ готов к отправке через ИС МПТ'");
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.ПринятСервером Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ успешно принят сервером ИС МПТ'");
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.ОбрабатываетсяСервером Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ обрабатывается сервером ИС МПТ'");
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.ОтклоненСервером Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ отклонен сервером ИС МПТ, т.к. содержит ошибки'");
		
	Иначе
		
		Если Объект.Ссылка.Пустая() Тогда
			ПредставлениеСостояния = НСтр("ru = 'Новый документ'");
		Иначе
			ПредставлениеСостояния = НСтр("ru = 'Документ %Состояние%'");
			ПредставлениеСостояния = СтрЗаменить(ПредставлениеСостояния, "%Состояние%", НРег(Объект.Состояние));
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ПредставлениеСостояния.ЦветТекста = ИнтеграцияИСМПТККлиентСервер.ЦветСостояния(Объект.Состояние);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСостоянияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.Сформирован") Тогда
		
		ОтправитьПолучателюЗаписьФормы = Новый ОписаниеОповещения("ОтправитьПолучателюЗаписьФормы", ЭтаФорма);
		ПоказатьВопрос(ОтправитьПолучателюЗаписьФормы, НСтр("ru = 'Отправить уведомление?'"), РежимДиалогаВопрос.ОКОтмена);
		
	ИначеЕсли Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ОбрабатываетсяСервером") Тогда	
		
		ОбновитьНаСервереЗавершение = Новый ОписаниеОповещения("ОбновитьНаСервереЗавершение", ЭтаФорма);
		ПоказатьВопрос(ОбновитьНаСервереЗавершение, НСтр("ru = 'Получить результат обработки документа из ИС МПТ?'"), РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		ПоказатьПредупреждение(, ПредставлениеСостояния);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаСервереЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если ИнтеграцияИСМПТККлиент.ОбъектЗаписан(ЭтаФорма) Тогда
			МассивУведомлений = Новый Массив;
			МассивУведомлений.Добавить(Объект.Ссылка);
			ИнтеграцияИСМПТККлиент.ОбновитьДокументыИзИСМПТ(МассивУведомлений, Новый Структура("ЗапускатьФоновоеЗадание, ТолькоОбновитьСтатус", Ложь, Истина));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПолучателюЗаписьФормы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
			ОтправитьПолучателюЗавершение = Новый ОписаниеОповещения("ОтправитьПолучателюЗавершение", ЭтаФорма);	
			ИнтеграцияИСМПТККлиент.ВопросЗаписатьОбъектПередВыполнением(ОтправитьПолучателюЗавершение,, "Записать");
		Иначе
			ОтправитьПолучателюЗавершение(КодВозвратаДиалога.ОК, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПолучателюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если ИнтеграцияИСМПТККлиент.ОбъектЗаписан(ЭтаФорма) Тогда
			МассивУведомлений = Новый Массив;
			МассивУведомлений.Добавить(Объект.Ссылка);
			ИнтеграцияИСМПТККлиент.ОтправитьИсходящиеДокументыИСМПТ(МассивУведомлений, Новый Структура("ЗапускатьФоновоеЗадание", Ложь));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСМПТККлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

#Область Получатель

&НаСервере
Процедура ПолучательПриИзмененииНаСервере()
	
	СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Получатель, "Получатель");
	ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПолучательИдентификационныйНомер, ПолучательНаименование");
				
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	ПолучательПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПоставщикПриИзмененииНаСервере()
	
	СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Поставщик, "Поставщик");
	ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПоставщикИдентификационныйНомер, ПоставщикНаименование");
	
	Объект.Организация = Объект.Поставщик;
			
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	ПоставщикПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗаполнитьЗначенияПоОрганизации()
	
	Объект.Поставщик  = Объект.Организация;
	СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Поставщик, "Поставщик");
	ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПоставщикИдентификационныйНомер, ПоставщикНаименование");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьЗначенияПоОрганизации();
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркировкиПередУдалением(Элемент, Отказ)
	
	Если НЕ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	ТекстОшибки = "";
	УдаляемыеКодыМаркировки = Новый Массив();
		
	Для Каждого ИдентификаторСтроки Из Элемент.ВыделенныеСтроки Цикл
		
		УдаляемыйЭлемент = НайтиПоИдентификатору(ДеревоМаркированнойПродукции, ИдентификаторСтроки);
		РодительУдаляемогоЭлемента = УдаляемыйЭлемент.ПолучитьРодителя();
		
		Если Не РодительУдаляемогоЭлемента = Неопределено Тогда
			РодительУдаляемогоЭлемента.КоличествоПодобранно = РодительУдаляемогоЭлемента.КоличествоПодобранно -1;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УдаляемыйЭлемент.КодИдентификации) Тогда
			НайденныеСтроки = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", УдаляемыйЭлемент.КодИдентификации));
			Если НайденныеСтроки.Количество() = 1 Тогда
				Объект.Марки.Удалить(НайденныеСтроки[0]);
			КонецЕсли;
		Иначе 
			НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", УдаляемыйЭлемент.Номенклатура));
			Если НайденныеСтроки.Количество() = 1 Тогда
				Объект.Товары.Удалить(НайденныеСтроки[0]);
			КонецЕсли;
			
			ВложенныеЭлементы = УдаляемыйЭлемент.ПолучитьЭлементы();
			Для Каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл 
				НайденныеСтроки = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", ВложенныйЭлемент.КодИдентификации));
				Если НайденныеСтроки.Количество() = 1 Тогда
					Объект.Марки.Удалить(НайденныеСтроки[0]);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() 
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Включена опция автоматической проверки состояния кодов маркировки по данным сервера. Для получения токена сеанса требуется указать Организацию!'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если Не ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПроверкаФорматаТранспортногоКодаПройденаУспешно(ДанныеШтрихкода) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьКодМаркировки(ДанныеШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайла(Команда)
	
	ОчиститьСообщения();
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() 
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Включена опция автоматической проверки состояния кодов маркировки по данным сервера. Для получения токена сеанса требуется указать Организацию!'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Марки.Количество() = 0 Тогда
		ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса = Новый ОписаниеОповещения("ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса", ЭтаФорма);
		ТекстВопроса = НСтр("ru = 'Выполнить предварительную очистку данных в таблице?'");
		ПоказатьВопрос(ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ИнтеграцияИСМПТККлиент.ЗагрузитьКодыМаркировкиИзФайла(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Марки.Очистить();
		СформироватьДеревоКодовМаркировки();		
	КонецЕсли;
	ИнтеграцияИСМПТККлиент.ЗагрузитьКодыМаркировкиИзФайла(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() 
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Включена опция автоматической проверки состояния кодов маркировки по данным сервера. Для получения токена сеанса требуется указать Организацию!'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоОпределениеЛогистическихКодовИСМПТК() Тогда 
		ПолучитьТокенДляЗакгрузкиИзТСД = Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершениеТокен", ЭтаФорма);
		ПолучитьКлючАвторизации(ПолучитьТокенДляЗакгрузкиИзТСД);
	Иначе
		МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект), УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСМПТККлиентПереопределяемый.ПриПолученииДанныхИзТСД(Новый ОписаниеОповещения("Подключаемый_ПолученыДанныеИзТСД", ЭтотОбъект), ЭтотОбъект, РезультатВыполнения);
	
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() Тогда 
		
		ТокенАвторизацииВрем = Неопределено;
		ЗавершениеПроверитьСостояниеКодовНаСервере = Новый ОписаниеОповещения("ЗавершениеПроверитьСостояниеКодовНаСервере", ЭтаФорма);
		ПолучитьКлючАвторизации(ЗавершениеПроверитьСостояниеКодовНаСервере);
		
		//Если по какой-то причине не удалось выполнить получение Токена, то и запрос на проверку статуса КМ не выполнялся,
		//об этом нужно предупредить и отметить непроверенные коды.
		Если ТокенАвторизацииВрем = Неопределено Тогда 
			СообщитьОНевозможностиВыполнитьПроверкуСтатусаКМ("Фоновый");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершениеТокен(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект), УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсеДервео(Команда)
	
	СвернутьРазвернутьДеревоКодов(ДеревоМаркированнойПродукции.ПолучитьЭлементы(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеДервео(Команда)
	
	СвернутьРазвернутьДеревоКодов(ДеревоМаркированнойПродукции.ПолучитьЭлементы(), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьДеревоКодов(ДервероЭлементов, Развернуть)
	
	Для Каждого Элемент Из ДервероЭлементов Цикл
		
		ВложенныеЭлементы = Элемент.ПолучитьЭлементы();
		
        Если ВложенныеЭлементы.Количество() > 0 Тогда
			
			СвернутьРазвернутьДеревоКодов(ВложенныеЭлементы, Развернуть);

            Если Развернуть = Истина Тогда
                Элементы.ДеревоМаркированнойПродукции.Развернуть(Элемент.ПолучитьИдентификатор());
            Иначе
                Элементы.ДеревоМаркированнойПродукции.Свернуть(Элемент.ПолучитьИдентификатор());
			КонецЕсли;
			
        КонецЕсли;
    КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиВФайл(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = "Выбор файла";
	ДиалогВыбораФайла.Фильтр = "CSV (Comma-Separated Values)(*.csv)|*.csv";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьКодыМаркировкиИзФайлаЗавершение", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиИзФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		НовыйТекстовыйДокумент = Новый ТекстовыйДокумент;
		
		Для Каждого СтрокаТЧ Из Объект.Марки Цикл
			КодДляЗаписи = ?(ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки), 
									РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтрокаТЧ.КодМаркировки), СтрокаТЧ.КодИдентификации);
			НовыйТекстовыйДокумент.ДобавитьСтроку(КодДляЗаписи);
		КонецЦикла;
		
		НовыйТекстовыйДокумент.Записать(ВыбранныеФайлы[0]);
				
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВExcel(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = "Выбор файла";
	ДиалогВыбораФайла.Фильтр = НСтр("ru='Все поддерживаемые форматы файлов(*.xls;*.xlsx;)|*.xls;*.xlsx;|Книга Excel 97 (*.xls)|*.xls|Книга Excel 2007 (*.xlsx)|*.xlsx'");
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("СоздатьФайлXLS", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлXLS(ВыбранныеФайлы, ДополнительныеПараметрым) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		
		Итератор = 1;
		Для Каждого СтрокаТЧ Из Объект.Марки Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки) Тогда 
				КодДляЗаписи = СтрокаТЧ.КодИдентификации;
			Иначе 
				КодДляЗаписи = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтрокаТЧ.КодМаркировки);
			КонецЕсли;
			
			ТабличныйДокумент.Область("R" + Формат(Итератор,"ЧГ=0") + "C1").Текст = КодДляЗаписи;
			Итератор = Итератор + 1;
		КонецЦикла;
		
		ТабличныйДокумент.Записать(ВыбранныеФайлы[0], ТипФайлаТабличногоДокумента.XLS97);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПотребительскиеИГрупповыеКМ

&НаКлиенте
Процедура ПодобратьНоменклатуруИЗарегистрироватьGTIN(Команда)
	
	//1. Просим записать документ
	//2. Перебираем ТЧ Марки:
	//   отбираем все строки с НЕ транспортными кодами, у которых заполнены GTINВерхнегоУровня, но не заполнена номенклатура.
	// Это будут потребительские коды, у которых не удалось опознать номенклатуру,
	// а также групповые КМ, у которых не определилась номенклатура верхнего уровня, т.е. по коду товара самогой групповой упаковки (блока).
	//3. Открываем форму обработки ПоискНоменклатурыПоШтрихкоду с передачей параметра Операция = "РегистрацияШтрихкодовСписком"
	//4. В форме назначается номенклатура, при закрытии должна списком регистрироваться информация по ШК.
	//5. В обработчике события закрытия формы обработки дозаполнеям ТЧ Марок, модифицируем документ, перестраиваем дерево кодов.
	
	Если Объект.Марки.Количество() = 0 Тогда
		ТексСообщения = НСтр("ru = 'В документе отсутствуют данные по кодам маркировки!'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТексСообщения);
		Возврат;
	КонецЕсли;
		
	//Проверяем, записан ли документ
	ТекстВопроса = "";
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Параметры.Ключ) ИЛИ ЭтаФорма.Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Перед началом подбора номенклатуры и регистрации штрихкодов необходимо записать документ. Продолжить?'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение   = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПодобратьНоменклатуруИЗарегистрироватьGTIN", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		
		//Переходим к отбору штрихкодов, требующих регистрации
		ПродолжитьПодборНоменклатурыИРегистрацииШтрихкодов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПодобратьНоменклатуруИЗарегистрироватьGTIN(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Попытка
			// выполняем запись документа
			ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
			Если ЭтаФорма.Записать(ПараметрыЗаписи) Тогда
				//Переходим к отбору штрихкодов, требующих регистрации
				ПродолжитьПодборНоменклатурыИРегистрацииШтрихкодов();
			КонецЕсли;
			
		Исключение
			
			Информация = ИнформацияОбОшибке();
			ТекстСообщения = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТекстСообщенияНеУдалосьЗаписатьДокументМаркировки();
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
			
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПодборНоменклатурыИРегистрацииШтрихкодов()
	
	//Отбираем из ТЧ Марки все строки, у которых заполнен GTIN, но не заполнена номенклатура:
	//для таких позиций необходимо сформировать список штрихкодов к регистрации с группировкой по GTIN.
	ШтрихкодыКСопоставлению = ПодготовитьДанныеДляРегистрацииНоменклатуры();
	
	//Открываем форму подбора и регистрации с передачей неопознанных штрихкодов
	ДанныеДляСопоставленияНоменклатуры = Новый Структура(); //передается в параметрах открытия формы подбора
	Операция = "РегистрацияШтрихкодовСписком";
			
	ДанныеДляСопоставленияНоменклатуры.Вставить("ШтрихкодыКСопоставлению", ШтрихкодыКСопоставлению); //содержит массив, где каждый элемент - структура "Количество, Штрихкод", где штрихкод - это EAN из строка ТЧ Марки, который необходимо зарегистрировать
	
	ПараметрыОткрытияФормы = Новый Структура("ДанныеДляСопоставленияНоменклатуры, Операция, НеизвестныеШтрихкоды, СтруктураКодовМаркировки", ДанныеДляСопоставленияНоменклатуры, Операция, ШтрихкодыКСопоставлению, Неопределено);
	ОбработкаОповещенияПодборНоменклатуры = Новый ОписаниеОповещения("ПодборНоменклатурыИРегистрацииШтрихкодовПослеЗакрытияФормы", ЭтотОбъект);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Обработка.РозничноеВыбытиеМаркированнойПродукцииИСМПТК.Форма.ПоискНоменклатурыПоШтрихкоду", ПараметрыОткрытияФормы, ЭтотОбъект,,,, ОбработкаОповещенияПодборНоменклатуры, РежимОткрытия);
		
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляРегистрацииНоменклатуры()
	
	ТаблицаДляПроверки = Объект.Марки.Выгрузить(, "GTINВерхнегоУровня, Номенклатура, ВидУпаковки");
	ТаблицаДляПроверки.Свернуть("GTINВерхнегоУровня, Номенклатура, ВидУпаковки");
	
	ШтрихкодыКСопоставлению = Новый Массив();
	Для Каждого ЭлементМассива Из ТаблицаДляПроверки Цикл
		Если ЭлементМассива.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая")
			Или ЭлементМассива.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда
			ЕАН = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодEANИзGTIN(ЭлементМассива.GTINВерхнегоУровня);
			ДанныеНоменклатуры = ИнтеграцияИСМПТКПереопределяемый.ПолучитьНоменклатуруПоШтрихкоду(ЕАН);
			Если ЗначениеЗаполнено(ДанныеНоменклатуры.Номенклатура) Тогда 
				//Этот ШК не нужно регистрировать
				Продолжить;
			КонецЕсли;
			ДанныеШтрихкода = Новый Структура("Количество, Штрихкод", 1, РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(ЭлементМассива.GTINВерхнегоУровня));
			ШтрихкодыКСопоставлению.Добавить(ДанныеШтрихкода);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ШтрихкодыКСопоставлению;
	
КонецФункции

&НаКлиенте
Процедура ПодборНоменклатурыИРегистрацииШтрихкодовПослеЗакрытияФормы(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт

	Если Не ИсходныеДанные.Свойство("ШтрихкодыНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИсходныеДанные.ШтрихкодыНоменклатуры.Количество() = 0 Тогда
		Если ИсходныеДанные.ОтложенныеТовары.Количество() = 0 Тогда 
			//Все ШК были успешно отработаны, заполняем полностью
			Для Каждого НовыйШтрикход Из ИсходныеДанные.ШтрихкодыНоменклатуры Цикл
				Номенклатура = НовыйШтрикход.Номенклатура;
				Штрихкод 	 = НовыйШтрикход.Штрихкод;
				
				ОбработатьСтрокиТаблицыПослеПодбораНаСервере(Номенклатура, Штрихкод);
				Модифицированность = Истина;
			КонецЦикла;
		Иначе
			//Некоторые товары (КМ) не были подобраны, их заполнять не нужно. Выполняем проверки и исключаем такие ШК
			ШтрихкодыДляИсключения = Новый Массив();
			Для Каждого ИсключаемыйШК Из ИсходныеДанные.ОтложенныеТовары Цикл
				ШтрихкодыДляИсключения.Добавить(ИсключаемыйШК.Штрихкод);
			КонецЦикла;
			
			Для Каждого НовыйШтрикход Из ИсходныеДанные.ШтрихкодыНоменклатуры Цикл
				Номенклатура = НовыйШтрикход.Номенклатура;
				Штрихкод 	 = НовыйШтрикход.Штрихкод;
				Если ШтрихкодыДляИсключения.Найти(Штрихкод) = Неопределено Тогда
					ОбработатьСтрокиТаблицыПослеПодбораНаСервере(Номенклатура, Штрихкод);
					Модифицированность = Истина;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьДеревоКодовМаркировки();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСтрокиТаблицыПослеПодбораНаСервере(Номенклатура, Штрихкод)
	
	GTINВерхнегоУровня = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.GTINПоШтрихкодуEAN(Штрихкод);
	НайденныеСтрокиТаблицы = Объект.Марки.НайтиСтроки(Новый Структура("GTINВерхнегоУровня", GTINВерхнегоУровня));
	
	Для Каждого Строка Из НайденныеСтрокиТаблицы Цикл
		Строка.Номенклатура = Номенклатура;
	КонецЦикла;
  	
КонецПроцедуры

#КонецОбласти

#Область ЗапросСоставаУпаковокССервера

&НаКлиенте
Процедура ЗаполнитьДанныеПоКоличествуГрупповыхУпаковок(Команда)
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик") Тогда
		//У не отправленного документа команда работает в полном функционале и без уточнения у пользователя
		ЗаполнитьДанныеПоКоличествуГрупповыхУпаковокПродолжить();
	Иначе
		//У отправленного - предварительно предупреждаем, что будут внесены программные изменения в документ, откатить которые нельзя, т.к. документ уже заблокирован.
		ТекстВопроса = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТекстСообщенияЗапросСоставаУпаковокВОтправленномДокументе();
		ЗаполнитьДанныеПоКоличествуГрупповыхУпаковокПослеВопроса = Новый ОписаниеОповещения("ЗаполнитьДанныеПоКоличествуГрупповыхУпаковокПослеВопроса", ЭтаФорма);
		ПоказатьВопрос(ЗаполнитьДанныеПоКоличествуГрупповыхУпаковокПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоКоличествуГрупповыхУпаковокПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДанныеПоКоличествуГрупповыхУпаковокПродолжить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоКоличествуГрупповыхУпаковокПродолжить()
	
	ЗавершениеПолучитьДанныеПоГорупповымКодамМаркировки = Новый ОписаниеОповещения("ЗавершениеПолучитьДанныеПоГорупповымКодамМаркировки", ЭтаФорма);
	ПолучитьКлючАвторизации(ЗавершениеПолучитьДанныеПоГорупповымКодамМаркировки);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершениеПолучитьДанныеПоГорупповымКодамМаркировки(РезультатВыполнения, Параметры) Экспорт
	
	НеОтправлен = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик");
	ИнтеграцияИСМПТК.ЗавершениеПолучитьДанныеПоГорупповымКодамМаркировки_Общая(ЭтаФорма, РезультатВыполнения, Объект.Направление, НеОтправлен);
		
КонецПроцедуры

#КонецОбласти

#Область ТранспортныеКМ

&НаКлиенте
Процедура РедактироватьСтрокиТранспортныеКоды(Команда)
	
	//1. Просим записать документ
	//2. Перебираем ТЧ Марки:
	//   отбираем все строки с транспортными и групповыми кодами.
	//3. Открываем форму обработки ПоискНоменклатурыПоШтрихкоду с передачей параметра Операция = "РаботаСТранспортнымиКодами"
	//4. В форме можно указать номенклатуру, а также GTIN. 
	//5. В обработчике события закрытия формы обработки дозаполнеям ТЧ Марок, модифицируем документ, перестраиваем дерево кодов.
	
	Если Объект.Марки.Количество() = 0 Тогда
		ТексСообщения = НСтр("ru = 'В документе отсутствуют данные по кодам маркировки!'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТексСообщения);
		Возврат;
	КонецЕсли;
	
	//Проверяем, записан ли документ
	ТекстВопроса = "";
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Параметры.Ключ) ИЛИ ЭтаФорма.Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Перед началом подбора номенклатуры и регистрации штрихкодов необходимо записать документ. Продолжить?'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение   = Новый ОписаниеОповещения("ПослеЗакрытияВопросаРедактироватьСтрокиТранспортныеКоды", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	Иначе
		
		//Переходим к отбору упаковок
		ПродолжитьРедактироватьСтрокиТранспортныеКоды();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаРедактироватьСтрокиТранспортныеКоды(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Попытка
			// выполняем запись документа
			ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
			Если ЭтаФорма.Записать(ПараметрыЗаписи) Тогда
				//Переходим к отбору упаковок
				ПродолжитьРедактироватьСтрокиТранспортныеКоды();
			КонецЕсли;
			
		Исключение
			
			Информация = ИнформацияОбОшибке();
			ТекстСообщения = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТекстСообщенияНеУдалосьЗаписатьДокументМаркировки();
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
			
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьРедактироватьСтрокиТранспортныеКоды()
	
	//Отбираем из ТЧ Марки все строки, у которых не заполнен GTIN, либо заполнен некорректно, либо заполнен, но не заполнена номенклатура:
	//для таких позиций необходимо сформировать список штрихкодов к указанию данных вручную.
	ШтрихкодыКСопоставлению = ПодготовитьДанныеДляРедактированияСтрокТранспортныхУпаковок();
	
	//Открываем форму подбора и регистрации с передачей неопознанных штрихкодов
	ДанныеДляСопоставленияНоменклатуры = Новый Структура(); //передается в параметрах открытия формы подбора
	Операция = "РаботаСТранспортнымиКодами";
			
	ДанныеДляСопоставленияНоменклатуры.Вставить("ШтрихкодыКСопоставлению", ШтрихкодыКСопоставлению); 
	
	ПараметрыОткрытияФормы = Новый Структура("ДанныеДляСопоставленияНоменклатуры, Операция, НеизвестныеШтрихкоды, СтруктураКодовМаркировки", ДанныеДляСопоставленияНоменклатуры, Операция, ШтрихкодыКСопоставлению, Неопределено);
	ОбработкаОповещенияПодборНоменклатуры = Новый ОписаниеОповещения("РедактированиеСтрокТранспортныхКодовПослеЗакрытияФормы", ЭтотОбъект);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Обработка.РозничноеВыбытиеМаркированнойПродукцииИСМПТК.Форма.ПоискНоменклатурыПоШтрихкоду", ПараметрыОткрытияФормы, ЭтотОбъект,,,, ОбработкаОповещенияПодборНоменклатуры, РежимОткрытия);
		
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляРедактированияСтрокТранспортныхУпаковок()
	
	ШтрихкодыКСопоставлению = Новый Массив();
	
	//1. Обрабатываем транспортные коды
	ШтрихкодыКСопоставлениюТранспортные = Новый Массив();	
	ПараметрыОтбора = Новый Структура("ВидУпаковки", ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая"));
	ТаблицаУпаковок = Объект.Марки.НайтиСтроки(ПараметрыОтбора);
		

	Для Каждого ЭлементМассива Из ТаблицаУпаковок Цикл
		
		ДанныеУпаковки = Новый Структура();
		ДанныеУпаковки.Вставить("Штрихкод", 	ЭлементМассива.КодИдентификации); 
		ДанныеУпаковки.Вставить("Номенклатура", ЭлементМассива.Номенклатура);
		ДанныеУпаковки.Вставить("GTIN", 	    ЭлементМассива.GTIN);
		ДанныеУпаковки.Вставить("Количество",   ЭлементМассива.Количество);
		ДанныеУпаковки.Вставить("ВидПродукции", ЭлементМассива.ВидПродукцииИС);
		ДанныеУпаковки.Вставить("ВидУпаковки",  ЭлементМассива.ВидУпаковки);
		
		ДанныеНоменклатурыХарактеристика = ИнтеграцияИСМПТКПереопределяемый.ПолучитьСведенияОХарактеристикеНоменклатуры(ЭлементМассива.Номенклатура, ЭлементМассива.EAN);
		Если НЕ ДанныеНоменклатурыХарактеристика = Неопределено Тогда
			ДанныеУпаковки.Вставить("Характеристика", ДанныеНоменклатурыХарактеристика.Характеристика);
		Иначе
			ДанныеУпаковки.Вставить("Характеристика", "");
		КонецЕсли;
			
		ШтрихкодыКСопоставлениюТранспортные.Добавить(ДанныеУпаковки);
		
	КонецЦикла;
	
	//2. Обрабатываем групповые коды
	ШтрихкодыКСопоставлениюГрупповые = Новый Массив();	
	ПараметрыОтбора = Новый Структура("ВидУпаковки", ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая"));
	ТаблицаУпаковок = Объект.Марки.НайтиСтроки(ПараметрыОтбора);
		
	Для Каждого ЭлементМассива Из ТаблицаУпаковок Цикл
		
		ДанныеУпаковки = Новый Структура();
		ДанныеУпаковки.Вставить("Штрихкод", 	ЭлементМассива.КодИдентификации); 
		ДанныеУпаковки.Вставить("Номенклатура", Неопределено);  //Для групповых упаковок Номенклатура в данном случае не важна, т.к. она относится к верхнему уровню, а сейчас работаем с нижним (вложенный товар)
		ДанныеУпаковки.Вставить("GTIN", 	    ЭлементМассива.GTIN);
		ДанныеУпаковки.Вставить("Количество",   ЭлементМассива.Количество);
		ДанныеУпаковки.Вставить("ВидПродукции", ЭлементМассива.ВидПродукцииИС);
		ДанныеУпаковки.Вставить("Характеристика", "");
		ДанныеУпаковки.Вставить("ВидУпаковки",  ЭлементМассива.ВидУпаковки);
					
		ШтрихкодыКСопоставлениюГрупповые.Добавить(ДанныеУпаковки);
		
	КонецЦикла;
	
	//3.Формируем общие данные
	ШтрихкодыКСопоставлению.Добавить(ШтрихкодыКСопоставлениюТранспортные);
	ШтрихкодыКСопоставлению.Добавить(ШтрихкодыКСопоставлениюГрупповые);
	
	Возврат ШтрихкодыКСопоставлению;
	
КонецФункции

&НаКлиенте
Процедура РедактированиеСтрокТранспортныхКодовПослеЗакрытияФормы(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт

	Если Не ИсходныеДанные.Свойство("ШтрихкодыНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИсходныеДанные.ШтрихкодыНоменклатуры.Количество() = 0 Тогда
		ЗаполнитьТаблицуМарок(ИсходныеДанные.ШтрихкодыНоменклатуры);
		Модифицированность = Истина;
	КонецЕсли;
	
	СформироватьДеревоКодовМаркировки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуМарок(МассивДанныхУпаковок)
	
	Для Каждого Элемент Из МассивДанныхУпаковок Цикл
		
		КодИдентификации = Элемент.КодИдентификации;
		ДанныеУпаковки   = Элемент.ДанныеУпаковки;
		
		ИзменилсяИдентификаторКода = ?(Элемент.Свойство("ИзменилсяИдентификаторКода"), Элемент.ИзменилсяИдентификаторКода, Ложь);
		ПреобразованныйКод = КодИдентификации; //этот код будет использован для перезаполнения данных в таблице документа
		Если ИзменилсяИдентификаторКода Тогда
			//Было выполнено преобразование формата транспортного кода SSCC (18 <> 20 символов)
			//Возвращаем исходное значение, чтобы найти нужную строку в таблице документа
			Если СтрДлина(КодИдентификации) = 18 Тогда
				КодИдентификации = "00" + КодИдентификации;
			ИначеЕсли СтрДлина(КодИдентификации) = 20 Тогда
				КодИдентификации = Сред(КодИдентификации, 3);
			КонецЕсли;
		КонецЕсли;
		
		НайденныеСтрокиТаблицы = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", КодИдентификации));
		Для Каждого Строка Из НайденныеСтрокиТаблицы Цикл
			Если Строка.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
				ЗаполнитьЗначенияСвойств(Строка, ДанныеУпаковки);
				Если ИзменилсяИдентификаторКода Тогда
					Строка.КодИдентификации = ПреобразованныйКод;
					Строка.КодМаркировки	= РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(ПреобразованныйКод);
				КонецЕсли;
			Иначе
				ЗаполнитьЗначенияСвойств(Строка, ДанныеУпаковки,, "Номенклатура"); //Для групповой Ном-ра заполняется по верхнему уровню, а здесь обрабатывается нижний (вложенные товары)
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПолучитьКлючАвторизации(СобытиеПослеАвторизации) Экспорт
	
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПолучитьКлючАвторизацииОбщая(СобытиеПослеАвторизации, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаCSVЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		ПрочитанныйФайл = Новый ТекстовыйДокумент;
		ПрочитанныйФайл.Прочитать(ВыбранныеФайлы[0]);
		
		МассивКодовМаркировки = Новый Массив;
		
		Для НомерСтроки = 1 По ПрочитанныйФайл.КоличествоСтрок() Цикл
			Штрихкод = ПрочитанныйФайл.ПолучитьСтроку(НомерСтроки);
			ДанныеШтрихкода = Новый Структура("ШтрихКод, ФорматBase64, Количество", Штрихкод, Ложь, 1);
			РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
			МассивКодовМаркировки.Добавить(ДанныеШтрихкода);
		КонецЦикла;
		
		ПараметрыСканирования = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПараметрыСканирования(ЭтотОбъект);
		ДлительнаяОперация    = ВыполнитьДобавлениеКМИзФайлаВФоне(МассивКодовМаркировки, ПараметрыСканирования);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.Интервал = 2;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Новый ОписаниеОповещения("ВыполнитьПроцедуруФоновоВыполнено", ЭтотОбъект), ПараметрыОжидания);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВыполнитьДобавлениеКМИзФайлаВФоне(МассивКМ, ПараметрыСканирования, ТокенАвторизации = Неопределено) Экспорт
	
	ПараметрыМетода = Новый Структура();
	ПараметрыМетода.Вставить("МассивКМ", 			  МассивКМ);
	ПараметрыМетода.Вставить("ПараметрыСканирования", ПараметрыСканирования);
	ПараметрыМетода.Вставить("ТокенАвторизации", 	  ТокенАвторизации);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор); 
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка кодов маркировки из файла'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
				
	ВыполняемыйМетод = "ИнтеграцияИСМПТК.ВыполнитьДобавлениеКМИзФайлаВФоне";
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыМетода, ПараметрыВыполнения); 
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПроцедуруФоновоВыполнено(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(нСтр("ru='Операция отменена.'", "ru"));
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		// обрабатываем результат
		Модифицированность = Истина;
		
		Если ОбработатьРезультатЗагрузкиКодов(Результат.АдресРезультата) Тогда 
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(нСтр("ru='Загрузка кодов маркировки выполнена!'", "ru"));
			
			Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() Тогда 
				
				ТокенАвторизацииВрем = Неопределено;
				ЗавершениеПроверитьСостояниеКодовНаСервере = Новый ОписаниеОповещения("ЗавершениеПроверитьСостояниеКодовНаСервере", ЭтаФорма);
				ПолучитьКлючАвторизации(ЗавершениеПроверитьСостояниеКодовНаСервере);
				
				//Если по какой-то причине не удалось выполнить получение Токена, то и запрос на проверку статуса КМ не выполнялся,
				//об этом нужно предупредить и отметить непроверенные коды.
				Если ТокенАвторизацииВрем = Неопределено Тогда 
					СообщитьОНевозможностиВыполнитьПроверкуСтатусаКМ("Фоновый");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция ОбработатьРезультатЗагрузкиКодов(АдресРезультата)
	
	РезультатЗадания = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если РезультатЗадания.Свойство("МассивОшибок") И Не РезультатЗадания.МассивОшибок.Количество() = 0 Тогда
		Для Каждого ТекстОшибки Из РезультатЗадания.МассивОшибок Цикл 
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		КонецЦикла;
	КонецЕсли;
	
	Если РезультатЗадания.Успешно И НЕ РезультатЗадания.ТаблицаПолученныхКодов.Количество() = 0 Тогда
		Для Каждого Строка Из РезультатЗадания.ТаблицаПолученныхКодов Цикл
			НайденныеСтроки = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", Строка.КодИдентификации));
			Если НайденныеСтроки.Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(Объект.Марки.Добавить(), Строка);
			КонецЕсли;
		КонецЦикла;
		ИнтеграцияИСМПТК.ПроверитьНаличиеУпаковокПоКоторымНеПолучилосьВыполнитьЗапросСостава(ЭтаФорма);
		СформироватьДеревоКодовМаркировки();
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецФункции

&НаСервере
Процедура УправлениеФормой()
	
	НеОтправлен  = Объект.Статус   = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик");
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Ошибки", "Видимость", ?(Объект.Ошибки.Количество() = 0, Ложь, Истина));
	
	//////// Редактирование данных строки ////////	
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииПодобратьНоменклатуруИЗарегистрироватьGTIN", "Доступность", НеОтправлен);
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииРедактироватьСтрокиТранспортныеКоды", 		"Доступность", НеОтправлен);
	//////////////////////////////
	
	//////// Импорт/Экспорт ////////	
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыВыгрузитьДанныеВТСД", "Видимость", Ложь); //Временно не используется
	//В этом случае оставляем возможность редактирования
	НужноСкрытьКомандыИмпортЭкспорт = Не НеОтправлен;
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандыЗагрузкиТЧ", "Доступность", Не НужноСкрытьКомандыИмпортЭкспорт); 
	//Ручной ввод ШК
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыПоискПоШтрихкоду", "Видимость", Не НужноСкрытьКомандыИмпортЭкспорт);
	//Команда Разбить документ по ТГ
	Если Объект.Марки.Количество() = 0 Тогда
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбщаяКомандаРазбитьНаНесколькоДокументовИСМПТК", "Видимость", Ложь);
	Иначе
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбщаяКомандаРазбитьНаНесколькоДокументовИСМПТК", "Видимость", Не НужноСкрытьКомандыИмпортЭкспорт);
	КонецЕсли;
	//Доп.поля основания в ТЧ
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииГруппаКоличествоОснования", "Видимость", ЗначениеЗаполнено(Объект.ДокументОснование));
	
	//Мобильное приложение
	Если ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НастройкиПодключенияМобильноеПриложениеИСМПТК) Тогда 
		ИспользоватьПриложение = Константы.ИспользоватьМобильноеПриложениеИСМПТК.Получить();
		НужноСкрыватьМобильноеПриложение = Не ИспользоватьПриложение;
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииМобильноеПриложениеЗагрузитьТовары", "Видимость", Не НужноСкрыватьМобильноеПриложение);
	Иначе
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииМобильноеПриложениеЗагрузитьТовары", "Видимость", Ложь);
	КонецЕсли;
	//////////////////////////////

	//ТЧ ДокументыСоответствия
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДокументыСоответствияДобавитьСертификат", "Доступность", Не Объект.Товары.Количество() = 0);
	
	ИзменитьКоманднуюПанельДокумента();
	СформироватьПредставлениеДокументаОснования(ЭтаФорма);                      
	СформироватьПредставлениеСостояния();                                 
			
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если Объект.Статус.Пустая() Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик");
	КонецЕсли;

	Если Объект.Направление.Пустая() Тогда
		Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий");
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ИспользуютсяСканерыШтрихкода = (МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("СканерШтрихкода").Количество() > 0);
	Иначе
		ИспользуютсяСканерыШтрихкода = Ложь;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыОрганизацииКонтрагента(Ссылка, Реквизит) Экспорт
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ПолучитьРеквизитыОрганизацииКонтрагента(Ссылка, Реквизит);
	
КонецФункции

&НаКлиенте
Процедура ИзменитьДокументОснованиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Объект.ДокументОснование = ДополнительныеПараметры.ВыбранноеЗначение;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюНоменклатуру(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		СтруктураКодовМаркировки = ДополнительныеПараметры.СтруктураКодовМаркировки;
		
		Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
			
			ПараметрыОткрытияФормы = Новый Структура("Номенклатура, СтруктураКодовМаркировки, Организация", ДополнительныеПараметры.Номенклатура, ДополнительныеПараметры.СтруктураКодовМаркировки, Объект.Организация);
			ОткрытьФорму("Обработка.ОбменИСМПТК.Форма.ФормаУточненияДанныхИС", ПараметрыОткрытияФормы, ЭтотОбъект,,,, Новый ОписаниеОповещения("ЗавершитьДобавлениеКодаМаркировки", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе 
			
			Номенклатура = ДополнительныеПараметры.Номенклатура;
			ДобавитьКодМаркировкиВДерево(Номенклатура, СтруктураКодовМаркировки);
			
			НоваяСтрока = Объект.Марки.Добавить();
			НоваяСтрока.КодМаркировки 		= СтруктураКодовМаркировки.КодМаркировки;
			НоваяСтрока.КодИдентификации 	= СтруктураКодовМаркировки.КодИдентификации;
			НоваяСтрока.GTIN 				= СтруктураКодовМаркировки.GTIN;
			Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
				НоваяСтрока.GTINВерхнегоУровня 	= СтруктураКодовМаркировки.GTINВерхнегоУровня;
			КонецЕсли;
			НоваяСтрока.EAN 				= СтруктураКодовМаркировки.EAN;
			НоваяСтрока.Номенклатура 		= Номенклатура;
			НоваяСтрока.Количество 			= СтруктураКодовМаркировки.Количество;
			НоваяСтрока.ВидУпаковки			= СтруктураКодовМаркировки.ВидУпаковки;
			НоваяСтрока.ВидПродукцииИС		= СтруктураКодовМаркировки.ВидПродукцииИС;
			
			Для Каждого Строка ИЗ ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
				Элементы.ДеревоМаркированнойПродукции.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
			КонецЦикла;
			
			Модифицированность = Истина;
			
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗаполнениеДокументаОснования(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Объект.ДокументОснование = ДополнительныеПараметры.ВыбранноеЗначение;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик") Тогда
			ТекстВопроса = НСтр("ru = 'Перезаполнить Уведомление по выбранному основанию?'");
			ПерезаполнитьДокументПоОснованию = Новый ОписаниеОповещения("ПерезаполнитьДокументПоОснованию", ЭтаФорма);
			ПоказатьВопрос(ПерезаполнитьДокументПоОснованию, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьДокументПоОснованию(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументуОснованию();
		Модифицированность = Истина;
	КонецЕсли;                      	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеДокументаОснования(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.ДокументОснование) Тогда
		Форма.ПредставлениеУведомление = Форма.Объект.ДокументОснование;
		Форма.Элементы.ПредставлениеУведомление.ЦветТекста = ИнтеграцияИСМПТККлиентСервер.ЦветСиний();
	Иначе
		Форма.ПредставлениеУведомление = НСтр("ru = 'Документ не отражен в учете'");
		Форма.Элементы.ПредставлениеУведомление.ЦветТекста = ИнтеграцияИСМПТККлиентСервер.ЦветКрасный();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСвязанноеУведомление(ВыбранноеЗначение)
	
	Возврат ИнтеграцияИСМПТК.ПроверитьНаличиеСвязанногоУведомленияОВвозе(ВыбранноеЗначение, Истина);
	
КонецФункции

&НаСервере
Функция ПроверитьНаличиеМаркируемогоТовара(ВыбранноеЗначение) 
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ПроверитьНаличиеМаркируемогоТовара(ВыбранноеЗначение);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованию()
	
	ДанныеДокументаОснования = ПолучитьДанныеДокументаОснованияНаСервере();
	РеквизитыШапки  = ДанныеДокументаОснования.Реквизиты;
	ДанныеПоТоварам = ДанныеДокументаОснования.Товары;
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыШапки);
	
	Объект.Марки.Очистить();
	Объект.Товары.Очистить();
	ОчиститьДеревоКодов();
	СформироватьДеревоКодовМаркировки();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДеревоКодов()
	
	Дерево = РеквизитФормыВЗначение("ДеревоМаркированнойПродукции");
	Дерево.Строки.Очистить();
	ЗначениеВРеквизитФормы(Дерево, "ДеревоМаркированнойПродукции");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДокументаОснованияНаСервере() Экспорт
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ПолучитьДанныеДокументаОснованияАППНаСервере(Объект.ДокументОснование);

КонецФункции

&НаСервере
Процедура ИзменитьКоманднуюПанельДокумента()
	
	НеОтправлен  = Объект.Статус   = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик");
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументУведомлениеОбЭкспортеЕАЭСИСМПТКОтправить", "Доступность", НеОтправлен);
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументУведомлениеОбЭкспортеЕАЭСИСМПТКПроверить", "Доступность", НеОтправлен);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьШтрихкодыНоменклатуры()
	
	Номенклатура 	 = Элементы.Товары.ТекущиеДанные.Номенклатура;
	GTIN 			 = Элементы.Товары.ТекущиеДанные.GTIN;
	Характеристика 	 = Элементы.Товары.ТекущиеДанные.Характеристика;
	EAN 			 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодEANИзGTIN(Элементы.Товары.ТекущиеДанные.GTIN);
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ТекстСообщения = "";
		РезультатПроверки =  ПроверитьНаличиеШтрихкода(Номенклатура, EAN);
		НоменклатураСоШтрихкодом = ?(РезультатПроверки.Количество() = 0, Неопределено, РезультатПроверки.Номенклатура);
		
		Если НоменклатураСоШтрихкодом = Неопределено Тогда
			ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗарегистрироватьНовыйGTIN", "Доступность", Истина);
		ИначеЕсли НоменклатураСоШтрихкодом <> Номенклатура Тогда 
			ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗарегистрироватьНовыйGTIN", "Доступность", Ложь);
			ТекстСообщения = НСтр("ru='Внимание: штрихкод %1 связан с номенклатурой %2'");
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, GTIN, НоменклатураСоШтрихкодом);
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
		ИначеЕсли НоменклатураСоШтрихкодом = Номенклатура Тогда 
			ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗарегистрироватьНовыйGTIN", "Доступность", Ложь);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеШтрихкода(Номенклатура, EAN)
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ПроверитьНаличиеШтрихкодаУноменклатуры(Номенклатура, EAN);
	
КонецФункции

#Область ПроверкаСостоянияКодаНаСервере

&НаКлиенте
Процедура ПроверитьСостояниеКодовНаСервере(Команда)
	
	//Проверяем данные таблицы
	Если Объект.Марки.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'В табличной части Марки отсутствуют коды маркировки.'"); 
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнена Организация, получение Токена для запроса невозможно.'"); 
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ТокенАвторизацииВрем = Неопределено;
	ЗавершениеПроверитьСостояниеКодовНаСервере = Новый ОписаниеОповещения("ЗавершениеПроверитьСостояниеКодовНаСервере", ЭтаФорма);
	ПолучитьКлючАвторизации(ЗавершениеПроверитьСостояниеКодовНаСервере);
	
	//Если по какой-то причине не удалось выполнить получение Токена, то и запрос на проверку статуса КМ не выполнялся,
	//об этом нужно предупредить и отметить непроверенные коды.
	Если ТокенАвторизацииВрем = Неопределено Тогда 
		СообщитьОНевозможностиВыполнитьПроверкуСтатусаКМ("Ручной");
	КонецЕсли;
	
КонецПроцедуры

//Выполнить запрос состояния КМ с сервера списком.
//Используется из команд ручной проверки статусов, загрузки из файла, ТСД и Мобильного приложения.
&НаСервере
Процедура ЗавершениеПроверитьСостояниеКодовНаСервере(РезультатВыполнения, Параметры) Экспорт
			
	ТокенАвторизацииВрем = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	ЗапроситьДанныеОСостоянииКодовСписком(ТокенАвторизацииВрем);
	
КонецПроцедуры

&НаСервере
Процедура ЗапроситьДанныеОСостоянииКодовСписком(ТокенАвторизации = Неопределено)
	
	МассивКМ = Новый Массив();
	Для Каждого СтрокаМарка Из Объект.Марки Цикл
		МассивКМ.Добавить(СтрокаМарка.КодИдентификации);	
	КонецЦикла;
	
	ОтветСервераСостояниеКМ = ИнтерфейсИСМПТК.ЗапроситьДанныеОСостоянииКМ(МассивКМ, Объект.Организация, ТокенАвторизации);
	ОбработатьОтветСервераПоСостояниюКМ(МассивКМ, ОтветСервераСостояниеКМ);	
	
КонецПроцедуры

//Выполнить запрос состояния конкретного КМ при его добавлении.
//
&НаСервере
Процедура ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере(РезультатВыполнения, Параметры) Экспорт
	
	ТокенАвторизацииВрем = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	
	МассивКМ = Новый Массив();
	МассивКМ.Добавить(Параметры.КодИдентификации);

	ОтветСервераСостояниеКМ = ИнтерфейсИСМПТК.ЗапроситьДанныеОСостоянииКМ(МассивКМ, Объект.Организация, ТокенАвторизацииВрем);
	ОбработатьОтветСервераПоСостояниюКМ(МассивКМ, ОтветСервераСостояниеКМ);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОтветСервераПоСостояниюКМ(МассивКМ, ОтветСервераСостояниеКМ)
	
	НовоеСоответствиеСтатусов = Неопределено;
	ИнтеграцияИСМПТК.ОбработатьОтветСервераПоСостояниюКМ_Общая(ЭтаФорма, МассивКМ, ОтветСервераСостояниеКМ, "УведОбЭкспортеЕАЭС", НовоеСоответствиеСтатусов);
	
	//Заполняем статус проверки в дереве по данным запроса сервера
	ЭлементыВетвиДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыВетвиДерева Цикл
		Если Не ЗначениеЗаполнено(ЭлементДерева.КодИдентификации) Тогда
			Для Каждого ЭлементНижнийУровень Из ЭлементДерева.ПолучитьЭлементы() Цикл
				Если Не ЭлементНижнийУровень.Ошибочный Тогда //Значение по умолчанию - ложь. Если стоит Истина, значит код уже проверен - сохранеям этот признак.
					ЭлементНижнийУровень.Ошибочный = ?(НовоеСоответствиеСтатусов.Получить(ЭлементНижнийУровень.КодИдентификации) = Неопределено, Ложь, НовоеСоответствиеСтатусов.Получить(ЭлементНижнийУровень.КодИдентификации));
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если Не ЭлементДерева.Ошибочный Тогда 
				ЭлементДерева.Ошибочный = ?(НовоеСоответствиеСтатусов.Получить(ЭлементДерева.КодИдентификации) = Неопределено, Ложь, НовоеСоответствиеСтатусов.Получить(ЭлементДерева.КодИдентификации));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНевозможностиВыполнитьПроверкуСтатусаКМ(РежимЗапроса) Экспорт

	Если РежимЗапроса = "Ручной" Тогда
		ТекстСообщения = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТекстСообщенияНевозможноВыполнитьПроверкуСтатусаКМ_Вручную();
	Иначе	
		ТекстСообщения = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТекстСообщенияНевозможноВыполнитьПроверкуСтатусаКМ_ВФоне();
	КонецЕсли;
	ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция НайтиЗначениеЭлементаДереваПоНоменклатуре(Номенклатура, Дерево)
	
	НайденныйЭлемент = Неопределено;
	
	ЭлементыВетвиДерева = Дерево.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыВетвиДерева Цикл
		Если ЭлементДерева.Номенклатура = Номенклатура Тогда
			НайденныйЭлемент = ЭлементДерева;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныйЭлемент;
	
КонецФункции

&НаСервере
Функция СформироватьДеревоКодовМаркировки() Экспорт
	
	//Добавим группы номенклатуры
	ПустаяСтруктураКМ = ПолучитьСтруктуруКодовМаркировки();
	ОчиститьДеревоКодовМаркировки();
	
	ТаблицаТоваров = Объект.Товары.Выгрузить();
	ТаблицаТоваров.Свернуть("Номенклатура, EAN", "КоличествоИсточник");
	
	Для Каждого ГруппаНом Из ТаблицаТоваров Цикл
		Если Не ЗначениеЗаполнено(ГруппаНом.Номенклатура) Тогда 
			ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(ГруппаНом.EAN);
			Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
				Номенклатура = ДанныеНоменклатуры.Номенклатура;
			Иначе
				Номенклатура = ДанныеНоменклатуры;
			КонецЕсли;
			ГруппаНом.Номенклатура = Номенклатура;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТоваров.Свернуть("Номенклатура", "КоличествоИсточник");
	Для Каждого ГруппаНом Из ТаблицаТоваров Цикл
		ПустаяСтруктураКМ.КоличествоИсточник = ГруппаНом.КоличествоИсточник;
		ДобавитьКодМаркировкиВДерево(ГруппаНом.Номенклатура, ПустаяСтруктураКМ);
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Объект.Марки Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.КодИдентификации) Тогда
			
			Номенклатура = ИнтеграцияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура();
			
			Если СтрокаТЧ.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
				//Для групповых поиск по регистру не выполняем, т.к. EAN в стркое относится к вложенному товару, а номенклатура для групповых 
				//должна заполняться по верхнему уровню, т.е. по реквизиту GTINВерхнегоУровня.
				EANВерхнегоУровня  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодEANИзGTIN(СтрокаТЧ.GTINВерхнегоУровня);
				ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(EANВерхнегоУровня);
			Иначе
				ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(СтрокаТЧ.EAN);
			КонецЕсли;
			
			Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
				Номенклатура = ДанныеНоменклатуры.Номенклатура;
			Иначе
				Номенклатура = ДанныеНоменклатуры;
			КонецЕсли;
			
			//Если Номенклатура не нашлась в ТЧ Товары и в регистре Штрихкоды, 
			//возможно, она была назначена в форме рдактирования транспортных упаковок без регистрации ШК.
			//Проверяем этот случай по данным строки 
			Если НЕ ЗначениеЗаполнено(Номенклатура) И ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				Номенклатура = СтрокаТЧ.Номенклатура;
			КонецЕсли;
			
			ДобавитьКодМаркировкиВДерево(Номенклатура, СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ДеревоМаркированнойПродукции.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
КонецФункции

&НаСервере
Процедура ОчиститьДеревоКодовМаркировки() 
	
	ЭлементыДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиПоИдентификатору(ДанныеФормыДерево, Идентификатор)
	
	// Сейчас есть проблема в веб-клиенте: метод НайтиПоИдентификатору, может вернуть ДанныеФормыДерево
	Если Идентификатор = -1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеФормыЭлементДерева = ДанныеФормыДерево.НайтиПоИдентификатору(Идентификатор);
	
	Если ТипЗнч(ДанныеФормыЭлементДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат ДанныеФормыЭлементДерева;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПроверитьНаличиеSSCCВДокументе(КодИдентификации)
	
	ТаблицаМарок = Объект.Марки.Выгрузить();
	Возврат Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ВыполнитьПроверкуТранспортногоКодаПоДокументу(КодИдентификации, ТаблицаМарок); 
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОПроблемеЗапросаВалидностиКМ() Экспорт
	
	//Если по какой-то причине не удалось выполнить получение Токена, то и запрос на проверку статуса КМ не выполнялся,
	//об этом нужно предупредить и отметить непроверенные коды.
	Если ТокенАвторизацииВрем = Неопределено Тогда 
		СообщитьОНевозможностиВыполнитьПроверкуСтатусаКМ("Фоновый");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсходныеДанные.Свойство("ФормаПоискаНоменклатуры_Успешно") Тогда
		
		//Обработчик после того, как была вызвана форма проверки и подбора номенклатуры (для регистрации ШК)
		Если ИсходныеДанные.ФормаПоискаНоменклатуры_Успешно Тогда
			ДобавитьНовыйКод(ИсходныеДанные.СтруктураКодовМаркировки);
			ТекстУведомления = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТекстСообщенияЗарегистрированНовыйШтрихкод();
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстУведомления);
		Иначе
			ТекстОшибки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТекстСообщенияОтказДобавленияКодаНеОпределенаНоменклатура();
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;
		
	Иначе
		
		//Для передачи на сервер КМ, в составе которого есть символы GS (29), требуется дополнительное кодирование
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
		ИсходныеДанные.Вставить("ФорматBase64", Истина);
		СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);   
		
		//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
		Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
			РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПереопределяемый.СообщитьПользователю(СтруктураКодовМаркировки);
			Возврат;
		КонецЕсли;
		
		ОтказатьВДобавлении = Ложь;
		Если Не НайтиПоКодуИдентификации(СтруктураКодовМаркировки.КодИдентификации) = Неопределено Тогда 
			
			ОтказатьВДобавлении = Истина;
			
		ИначеЕсли РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ПроверитьЗначениеКонстанты("ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК")
			И СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
			
			//В этом случае в таблице документа может находиться уже преобразованный SSCC, соответствующий обрабатываемому в данный момент штрихкоду,
			//т.е. нужна специфическая проверка на дублирование данных кода
			ОтказатьВДобавлении = ПроверитьНаличиеSSCCВДокументе(СтруктураКодовМаркировки.КодИдентификации);
			
		КонецЕсли;
		
		Если ОтказатьВДобавлении Тогда
			ПараметрыОткрытия = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
			ПараметрыОткрытия.Штрихкод    = ИсходныеДанные.Штрихкод;
			ПараметрыОткрытия.ТекстОшибки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТекстСообщенияКодМаркировкиУказанВДокументе();
			ОткрытьФорму("Обработка.ОбменИСМПТК.Форма.ИнформацияОНевозможностиДобавленияОтсканированногоИСМПТ", ПараметрыОткрытия, ЭтаФорма);
			Возврат;
		КонецЕсли;
		
		Если Не СтруктураКодовМаркировки = Неопределено Тогда 
			Если Не СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда 
				//Проверяем, включено ли автоматическое получение данных с сервера по групповым упаковкам
				Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоОпределениеЛогистическихКодовИСМПТК() Тогда
					ДобавитьНовыйЛогистическийКод(СтруктураКодовМаркировки); //Заполняем автоматически с сервера
				Иначе
					//Даем возможность указать данные вручную
					ПараметрыОткрытияФормы = Новый Структура("Номенклатура, СтруктураКодовМаркировки, Организация", ИнтеграцияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура(), СтруктураКодовМаркировки, Объект.Организация);
					ОткрытьФорму("Обработка.ОбменИСМПТК.Форма.ФормаУточненияДанныхИС", ПараметрыОткрытияФормы, ЭтотОбъект,,,, Новый ОписаниеОповещения("ЗавершитьДобавлениеКодаМаркировки", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				КонецЕсли;
			Иначе
				//Для потребительских заполняем напрямую
				ДобавитьНовыйКод(СтруктураКодовМаркировки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиПоКодуИдентификации(КодИдентификации)
	
	СтруктураПоиска = Новый Структура("КодИдентификации", КодИдентификации);
	
	НайденныеСтроки = Объект.Марки.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗагрузитьКодыМаркировки(ИсходныеДанные, ПараметрыСканирования = Неопределено)
	
	НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();  
	
	Если Не ТипЗнч(ИсходныеДанные) = Тип("Массив") Тогда
		ДанныеДляРазбора = Новый Массив;
		ДанныеДляРазбора.Добавить(ИсходныеДанные);
	Иначе 
		ДанныеДляРазбора = ИсходныеДанные;
	КонецЕсли;
	
	Для Каждого КодМаркировкиBase64 Из ДанныеДляРазбора Цикл
		
		ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(КодМаркировкиBase64, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
		
		Если ДанныеРазбора = Неопределено Тогда 
			ТекстОшибки = НСтр("ru = 'Не удалось распознать код маркировки.'");
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
			Возврат Неопределено;
		КонецЕсли;
	
		Если Не ДанныеРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая")
			И ДанныеРазбора.СоставКодаМаркировки.Свойство("EAN") Тогда
			
			ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(ДанныеРазбора.СоставКодаМаркировки.EAN);
			Номенклатура	   = ДанныеНоменклатуры.Номенклатура;
			EAN				   = ДанныеРазбора.СоставКодаМаркировки.EAN;
			Если ДанныеРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда
				GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN; //равен верхнему уровню
			Иначе
				GTIN = ""; //ужно запрашивтаь отдельно состав упаковки
			КонецЕсли;
			GTINВерхнегоУровня = ДанныеРазбора.СоставКодаМаркировки.GTIN; //Сама упаковка
			
		Иначе
			
			Номенклатура	   = Неопределено;
			//Если транспортная упаковка в альтернативном формате Code128, у нее могут вернуться данные в структуре
			Если Не ДанныеРазбора.СоставКодаМаркировки = Неопределено
				И ДанныеРазбора.СоставКодаМаркировки.Свойство("EAN") Тогда
				EAN = ДанныеРазбора.СоставКодаМаркировки.EAN; 
			ИначеЕсли ДанныеРазбора.СоставКодаМаркировки.Свойство("SSCC") Тогда
				EAN = ДанныеРазбора.СоставКодаМаркировки.SSCC;
			Иначе
				EAN = "";
			КонецЕсли;
			
			Если Не ДанныеРазбора.СоставКодаМаркировки = Неопределено
				И ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN") Тогда
				GTINВерхнегоУровня = ДанныеРазбора.СоставКодаМаркировки.GTIN; 
			Иначе
				GTINВерхнегоУровня = "";
			КонецЕсли;
			GTIN = ""; //вложенные позиции нужно запрашивать отдельно
			
		КонецЕсли;		
		
		СтрокаКодыМаркировки = Объект.Марки.Добавить();
		СтрокаКодыМаркировки.КодМаркировки 	  = КодМаркировкиBase64.ШтрихКод;
		СтрокаКодыМаркировки.КодИдентификации = ДанныеРазбора.НормализованныйКодМаркировки;
		СтрокаКодыМаркировки.GTIN 			  = GTIN;
		СтрокаКодыМаркировки.GTINВерхнегоУровня = GTINВерхнегоУровня;
		СтрокаКодыМаркировки.EAN 			  = EAN;
		СтрокаКодыМаркировки.ВидУпаковки	  = ДанныеРазбора.ВидУпаковки;
		СтрокаКодыМаркировки.ВидПродукцииИС	  = ДанныеРазбора.ВидыПродукции[0];
		СтрокаКодыМаркировки.Номенклатура	  = Номенклатура;
	
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьНовыйКод(СтруктураКодовМаркировки)
	
	ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(СтруктураКодовМаркировки.EAN);
	Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
		Номенклатура = ДанныеНоменклатуры.Номенклатура;
	Иначе
		Номенклатура = ДанныеНоменклатуры;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура) И
		Не СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
		
		ДанныеДляСопоставленияНоменклатуры = Новый Структура(); //передается в параметрах открытия формы подбора
		Операция = "СопоставлениеНоменклатуры";
		
		ИсходныеДанные = Новый Структура("Количество, Штрихкод", 1, СтруктураКодовМаркировки.КодИдентификации);
		ДанныеДляСопоставленияНоменклатуры.Вставить("ИсходныеДанные", ИсходныеДанные); //содержит структуру "Количество, Штрихкод", где штрихкод это отсканированный КМ
		
		ШтрихкодыКСопоставлению = Новый Массив();
		ДанныеШтрихкода = Новый Структура("Количество, Штрихкод", 1, СтруктураКодовМаркировки.EAN);
		ШтрихкодыКСопоставлению.Добавить(ДанныеШтрихкода);
		ДанныеДляСопоставленияНоменклатуры.Вставить("ШтрихкодыКСопоставлению", ШтрихкодыКСопоставлению); //содержит массив, где каждый элемент - структура "Количество, Штрихкод", где штрихкод - это EAN из КМ, который необходимо проверить по регистру Штрихкодов
				
		ПараметрыОткрытияФормы = Новый Структура("ДанныеДляСопоставленияНоменклатуры, Операция, НеизвестныеШтрихкоды, СтруктураКодовМаркировки", ДанныеДляСопоставленияНоменклатуры, Операция, ШтрихкодыКСопоставлению, СтруктураКодовМаркировки);
		ОбработкаОповещенияПодборНоменклатуры = Новый ОписаниеОповещения("ОбработатьКодМаркировки", ЭтотОбъект);
		РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		ОткрытьФорму("Обработка.РозничноеВыбытиеМаркированнойПродукцииИСМПТК.Форма.ПоискНоменклатурыПоШтрихкоду", ПараметрыОткрытияФормы, ЭтотОбъект,,,, ОбработкаОповещенияПодборНоменклатуры, РежимОткрытия);
				
	ИначеЕсли Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура)).Количество() = 0
		И Объект.Марки.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура)).Количество() = 0
		И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		ТекстВопроса = НСтр("ru = 'Указанный код маркировки принадлежит номенклатуре «" + Номенклатура + "», отсутствующей в выбранном документе-основании.
							|Добавить данный код в Уведомление?'");
		
		ИзменитьДокументОснованиеЗавершение = Новый ОписаниеОповещения("ДобавитьНовуюНоменклатуру", ЭтаФорма, Новый Структура("СтруктураКодовМаркировки, Номенклатура", СтруктураКодовМаркировки, Номенклатура));
		ПоказатьВопрос(ИзменитьДокументОснованиеЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	Иначе
		
		СтруктураКодовМаркировки.Вставить("Номенклатура", Номенклатура);
		ЗавершитьДобавлениеКодаМаркировки(СтруктураКодовМаркировки);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
функция ПолучитьНоменклатуруПоШтрихкоду(EAN)
	
	Возврат ИнтеграцияИСМПТК.ПолучитьНоменклатуруПоШтрихкоду(EAN, ЭтаФорма);
		
КонецФункции

&НаКлиенте
Процедура ЗавершитьДобавлениеКодаМаркировки(СтруктураКодовМаркировки = Неопределено, ПараметрКоманды = Неопределено) Экспорт
	
	Если Не СтруктураКодовМаркировки = Неопределено Тогда 
		
		Если ЗначениеЗаполнено(СтруктураКодовМаркировки.Номенклатура) 
			И Не ЗначениеЗаполнено(СтруктураКодовМаркировки.ВидПродукцииИС) Тогда
			
			ВидПродукцииИС = ИнтеграцияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(СтруктураКодовМаркировки.Номенклатура);
			СтруктураКодовМаркировки.ВидПродукцииИС = ВидПродукцииИС;
		КонецЕсли;
		
		ДобавитьКодМаркировкиВДерево(СтруктураКодовМаркировки.Номенклатура, СтруктураКодовМаркировки);
		
		НоваяСтрока = Объект.Марки.Добавить();
		НоваяСтрока.КодМаркировки 		= СтруктураКодовМаркировки.КодМаркировки;
		НоваяСтрока.КодИдентификации 	= СтруктураКодовМаркировки.КодИдентификации;
		НоваяСтрока.GTIN 				= СтруктураКодовМаркировки.GTIN;
		Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
			НоваяСтрока.GTINВерхнегоУровня 	= СтруктураКодовМаркировки.GTINВерхнегоУровня;
		КонецЕсли;
		НоваяСтрока.EAN 				= СтруктураКодовМаркировки.EAN;
		НоваяСтрока.Номенклатура 		= СтруктураКодовМаркировки.Номенклатура;
		НоваяСтрока.Количество 			= СтруктураКодовМаркировки.Количество;
		НоваяСтрока.ВидУпаковки			= СтруктураКодовМаркировки.ВидУпаковки;
		НоваяСтрока.ВидПродукцииИС		= СтруктураКодовМаркировки.ВидПродукцииИС;
				
		Для Каждого Строка ИЗ ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
			Элементы.ДеревоМаркированнойПродукции.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
		
		//Проверяем состояние кода маркировки и выводим предупреждение, если с кодом что-то не так
		Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() Тогда
			ДополнительныеПараметры = Новый Структура("КодИдентификации", СтруктураКодовМаркировки.КодИдентификации);
			ТокенАвторизацииВрем = Неопределено;
			//отложено: вывод сообщения с результатом запроса статуса
			ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере = Новый ОписаниеОповещения("ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере", ЭтаФорма, ДополнительныеПараметры);
			//предварительный запрос токена
			ПолучитьКлючАвторизации(ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере);
			
			//Если по какой-то причине не удалось выполнить получение Токена, то и запрос на проверку статуса КМ не выполнялся,
			//об этом нужно предупредить и отметить непроверенные коды.
			Если ТокенАвторизацииВрем = Неопределено Тогда 
				СообщитьОНевозможностиВыполнитьПроверкуСтатусаКМ("Фоновый");
			КонецЕсли;			
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКодМаркировкиИзФайла(ИсходныеДанные)
	
	СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);  
	
	//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
	Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПереопределяемый.СообщитьПользователю(СтруктураКодовМаркировки);
		Возврат;
	КонецЕсли;
	
	Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
		//Для групповых поиск по регистру не выполняем, т.к. EAN в стркое относится к вложенному товару, а номенклатура для групповых 
		//должна заполняться по верхнему уровню, т.е. по реквизиту GTINВерхнегоУровня.
		EANВерхнегоУровня = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодEANИзGTIN(СтруктураКодовМаркировки.GTINВерхнегоУровня);
		ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(EANВерхнегоУровня);
	Иначе
		ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(СтруктураКодовМаркировки.EAN);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
		Номенклатура = ДанныеНоменклатуры.Номенклатура;
	Иначе
		Номенклатура = ДанныеНоменклатуры;
	КонецЕсли;
	
	ТекстОшибки = "";
	
	Если Не НайтиПоКодуИдентификации(СтруктураКодовМаркировки.КодИдентификации) = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru = '" + СтруктураКодовМаркировки.КодИдентификации + ": Код маркировки не был добавлен, поскольку уже присутствует в документе!'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		
	Иначе
		
		СтруктураКодовМаркировки.Вставить("Номенклатура", Номенклатура);
		ЗавершитьДобавлениеКодаМаркировки(СтруктураКодовМаркировки);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКодыМаркировкиИзФайла(ИсходныеДанные)
	
	ПараметрыСканирования    = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПараметрыСканирования(ЭтотОбъект);
	СтруктураКодовМаркировки = ЗагрузитьКодыМаркировки(ИсходныеДанные, ПараметрыСканирования);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруКодовМаркировки()
	
	СтруктураКодовМаркировки = Новый Структура;
	СтруктураКодовМаркировки.Вставить("КодМаркировки", "");
	СтруктураКодовМаркировки.Вставить("КодИдентификации", "");
	СтруктураКодовМаркировки.Вставить("GTIN", "");
	//СтруктураКодовМаркировки.Вставить("КоличествоИсточник", 0);
	СтруктураКодовМаркировки.Вставить("Количество", 0);
	СтруктураКодовМаркировки.Вставить("ВидУпаковки", Перечисления.ВидыУпаковокИСМПТК.ПустаяСсылка());
	
	Возврат СтруктураКодовМаркировки;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьНовыйЛогистическийКод(СтруктураКодовМаркировки)
	
	ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки = Новый ОписаниеОповещения("ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки", ЭтаФорма, СтруктураКодовМаркировки);
	ПолучитьКлючАвторизации(ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки(РезультатВыполнения, Параметры) Экспорт
	
	ИнтеграцияИСМПТККлиент.ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки_Общая(ЭтаФорма, РезультатВыполнения, Параметры);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКодМаркировкиВДерево(Номенклатура, СтруктураКодовМаркировки) Экспорт
	
	НайденнаяСтрока = НайтиЗначениеЭлементаДереваПоНоменклатуре(Номенклатура, ДеревоМаркированнойПродукции);
	
	Если Не НайденнаяСтрока = Неопределено Тогда
		
		Если СтруктураКодовМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская Тогда 
			КоличествоПодобранно = 1;
		Иначе 
			КоличествоПодобранно = СтруктураКодовМаркировки.Количество;
		КонецЕсли;
		
		НоваяСтрокаКод = НайденнаяСтрока.ПолучитьЭлементы().Добавить();
		
		//Поддержка двойного формата кодов SSCC
		ВыполнялосьПреобразованиеКМ = ?(Параметры.Свойство("ВыполнялосьПреобразованиеКМ"), Параметры.ВыполнялосьПреобразованиеКМ, Ложь);
		КодИдентификации 			= ?(Параметры.Свойство("КодИдентификации"), Параметры.КодИдентификации, СтруктураКодовМаркировки.КодИдентификации); 
		Если ВыполнялосьПреобразованиеКМ Тогда
			НоваяСтрокаКод.КодМаркировки    = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(КодИдентификации);
			НоваяСтрокаКод.КодИдентификации = КодИдентификации;
		Иначе
			НоваяСтрокаКод.КодМаркировки    = СтруктураКодовМаркировки.КодМаркировки;
			НоваяСтрокаКод.КодИдентификации = СтруктураКодовМаркировки.КодИдентификации;
		КонецЕсли;
		//////
		
		НоваяСтрокаКод.GTIN 			 	 = СтруктураКодовМаркировки.GTIN;
		Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
			НоваяСтрокаКод.GTINВерхнегоУровня 	 = СтруктураКодовМаркировки.GTINВерхнегоУровня;
		КонецЕсли;
		НоваяСтрокаКод.Количество			 = 0;
		НоваяСтрокаКод.КоличествоПодобранно	 = КоличествоПодобранно;
		
		НайденнаяСтрока.КоличествоПодобранно = НайденнаяСтрока.КоличествоПодобранно + НоваяСтрокаКод.КоличествоПодобранно;
		НоваяСтрокаКод.ВидУпаковки 			 = СтруктураКодовМаркировки.ВидУпаковки;
		НоваяСтрокаКод.ВидПродукцииИС		 = СтруктураКодовМаркировки.ВидПродукцииИС;
		
	Иначе
		
		ЭлементыДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		
		НоваяСтрокаНоменклатура = ЭлементыДерева.Добавить();
		НоваяСтрокаНоменклатура.Номенклатура = Номенклатура;
		
		Если ЗначениеЗаполнено(СтруктураКодовМаркировки.КодИдентификации) Тогда 
			НоваяСтрокаКод = НоваяСтрокаНоменклатура.ПолучитьЭлементы().Добавить();
			НоваяСтрокаКод.КодМаркировки 	  = СтруктураКодовМаркировки.КодМаркировки;
			НоваяСтрокаКод.КодИдентификации   = СтруктураКодовМаркировки.КодИдентификации;
			НоваяСтрокаКод.GTIN 			  = СтруктураКодовМаркировки.GTIN;
			Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
				НоваяСтрокаКод.GTINВерхнегоУровня = СтруктураКодовМаркировки.GTINВерхнегоУровня;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтруктураКодовМаркировки.Количество) Тогда 
				НоваяСтрокаКод.КоличествоПодобранно	= ?(СтруктураКодовМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская, 1, 0);
			Иначе 
				НоваяСтрокаКод.КоличествоПодобранно	= СтруктураКодовМаркировки.Количество;
			КонецЕсли;
			
			НоваяСтрокаНоменклатура.КоличествоПодобранно = НоваяСтрокаКод.КоличествоПодобранно;
			
			НоваяСтрокаКод.ВидУпаковки 	  = СтруктураКодовМаркировки.ВидУпаковки;
			НоваяСтрокаКод.ВидПродукцииИС = СтруктураКодовМаркировки.ВидПродукцииИС;
		КонецЕсли;
		
		НоваяСтрокаНоменклатура.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.ПустаяСсылка();
		
		Если СтруктураКодовМаркировки.Свойство("КоличествоИсточник") Тогда 
			НоваяСтрокаНоменклатура.Количество	= СтруктураКодовМаркировки.КоличествоИсточник;
		Иначе 
			НоваяСтрокаКод.Количество = 0;
		КонецЕсли;
		
		ЕденицаИзмерения = ИнтеграцияИСМПТКПереопределяемый.ПолучитьБазовуюЕденицуИзмерения(Номенклатура);
		НоваяСтрокаНоменклатура.ЕдиницаИзмерения = ЕденицаИзмерения;
		
		ИнтерфейсИСМПТККлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НоваяСтрокаНоменклатура);
		
	КонецЕсли;
	
	Если Не НоваяСтрокаКод = Неопределено Тогда
		ИнтерфейсИСМПТККлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НоваяСтрокаКод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСТСД

#Область ЗагрузкаИзТСД

&НаКлиенте
Процедура ЗагрузитьИзТСДПослеАвторизации(РезультатАвторизации, Штрихкоды) Экспорт
	
	Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, АвторизацияЗапрашивалась = Неопределено) Экспорт
	
	Если Штрихкоды.Количество() = 0 Тогда
		
		ПоказатьПредупреждение( ,НСтр("ru = 'В полученных данных не содержится информации о считанных штриховых кодах.'"));
		Возврат;
		
	КонецЕсли;
	
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ОповеститьОНачалеОбработкиДанныхТСД();
	ПараметрыСканирования = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПараметрыСканирования(ЭтотОбъект);
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьШтрихкодыТСДВBase64(Штрихкоды);
	ЗагрузкаДанныхТСД = ОбработатьПолученныеДанныеТСДНаСервере(Штрихкоды, ПараметрыСканирования, Неопределено);
	
	ОбработатьПолученныеДанныеТСД();
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПолученныеДанныеТСДНаСервере(ШтрихкодыТСД, ПараметрыСканирования, КэшированныеЗначения)
	
	Результат = ИнтеграцияИСМПТК.ОбработатьПолученныеДанныеТСДВДокументе(ЭтотОбъект, ШтрихкодыТСД, ПараметрыСканирования);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолученныеДанныеТСД()
	
	Если ЗагрузкаДанныхТСД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивКодовМаркировки = Новый Массив;
	
	Для НомерСтроки = 0 По ЗагрузкаДанныхТСД.Всего - 1 Цикл
		Штрихкод = ЗагрузкаДанныхТСД.ШтрихкодыТСД[НомерСтроки];
		ДанныеШтрихкода = Новый Структура("ШтрихКод, ФорматBase64, Количество", Штрихкод.Штрихкод, Ложь, 1);
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
		МассивКодовМаркировки.Добавить(ДанныеШтрихкода);
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура("ФормаОбъекта, МассивКодовМаркировки", ЭтотОбъект, МассивКодовМаркировки);
	
	Токен = Неопределено;
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоОпределениеЛогистическихКодовИСМПТК() Тогда 
		Токен = ИнтеграцияИСМПТККлиент.ПолучитьТокенАвторизации(Объект.Организация);
		ИнтеграцияИСМПТККлиент.ЗагрузитьКодыМаркировкиИзФайлаЗавершение(Токен, СтруктураПараметров);
	Иначе
		ИнтеграцияИСМПТККлиент.ЗагрузитьКодыМаркировкиИзФайлаЗавершение(Неопределено, СтруктураПараметров);
	КонецЕсли;
	
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() Тогда 
		
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			ТекстОшибки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТекстСообщенияТребуетсяУказатьОрганизациюПриЗапросеДанныхУпаковокССервера();
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		//После заполнения ТЧ проверяем коды еще одним запросом
		Если Токен = Неопределено Тогда 
			Токен = ИнтеграцияИСМПТККлиент.ПолучитьТокенАвторизации(Объект.Организация);
		КонецЕсли;
		ЗапроситьДанныеОСостоянииКодовСписком(Токен);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область МобильноеПриложение

&НаКлиенте
Процедура МобильноеПриложениеЗагрузитьТовары(Команда)
	
	ОчиститьСообщения();
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() 
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Включена опция автоматической проверки состояния кодов маркировки по данным сервера. Для получения токена сеанса требуется указать Организацию!'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("МобильноеПриложениеЗагрузитьТоварыОбработкаВыбора", ЭтотОбъект);
	Список = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.МобильноеПриложениеЗагрузитьТоварыНаСервере();
	Список.ПоказатьОтметкуЭлементов(ОповещениеПослеВыбораЭлемента, "Выберите документ для загрузки");
	
КонецПроцедуры

&НаКлиенте
Процедура МобильноеПриложениеЗагрузитьТоварыОбработкаВыбора(Элемент, Параметры) Экспорт
	
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.МобильноеПриложениеЗагрузитьТоварыОбработкаВыбораОбщая(ЭтотОбъект, Элемент, Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область СвязьТаблиц

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	//Устанавливаем отбор по коду маркировки для отображения присвоенных документов соответствия 
	УстановитьОтборПоКМДляСертификатов();
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоКМДляСертификатов()

	ТекущиеДанныеКМ = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанныеКМ <> Неопределено Тогда
		УстановитьОтборТабличнойЧасти(Элементы.ДокументыСоответствия, Новый Структура("ИдентификаторСтроки", ТекущиеДанныеКМ.ИдентификаторСтроки));
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДокументыСоответствияДобавитьСертификат", "Доступность", Истина);
	Иначе
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДокументыСоответствияДобавитьСертификат", "Доступность", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборТабличнойЧасти(Таблица, Знач ДанныеОтбора, ДополнитьОтбор = Ложь)
	
	Если Не ДополнитьОтбор
		ИЛИ Таблица.ОтборСтрок = Неопределено Тогда
		Таблица.ОтборСтрок = Новый ФиксированнаяСтруктура(ДанныеОтбора);
	Иначе
		Для Каждого ЭлементСтруктурыОтбора Из Таблица.ОтборСтрок Цикл
			Если ДанныеОтбора.Свойство(ЭлементСтруктурыОтбора.Ключ) = Неопределено Тогда
				ДанныеОтбора.Вставить(ЭлементСтруктурыОтбора.Ключ, ЭлементСтруктурыОтбора.Значение);
			КонецЕсли;
		КонецЦикла;
		Таблица.ОтборСтрок = Новый ФиксированнаяСтруктура(ДанныеОтбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыСоответствияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.Товары.Количество() = 0 ИЛИ Элементы.Товары.ТекущиеДанные = Неопределено Тогда 
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификат(Команда)
	
	//В соответствии со структурой документа, передаваемой по АПИ, каждой строке ТЧ Товары (т.е. каждому коду маркировки) 
	//может соответствовать несколько строк ТЧ ДокументыСоответствия. 
	//Поэтому при добавлении нового документа соотв. проверяем, что в ТЧ Товары есть как минимум одна строка (в УправлениеФормой()), чтобы привязать к ней этот документ.
	
	ИдентификаторСтрокиДляСвязи = Элементы.Товары.ТекущиеДанные.ИдентификаторСтроки;
	НоваяСтрокаСертификат = Объект.ДокументыСоответствия.Добавить();
	НоваяСтрокаСертификат.ИдентификаторСтроки = ИдентификаторСтрокиДляСвязи;
		
КонецПроцедуры

#КонецОбласти