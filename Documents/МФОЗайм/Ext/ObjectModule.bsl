#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, Режим)

	ПроводкиБУ = Движения.Типовой;
	ПроводкиБУ.Записывать=Истина;
	ПроводкиНУ = Движения.Налоговый;
	ПроводкиНУ.Записывать=Истина;
	ОбработкаПроведенияВыдачиЗайма(ПроводкиБУ, ПроводкиНУ);

	ОбработкаПроведениеНачислений(ПроводкиБУ, ПроводкиНУ);

	ОбработкаПроведенияПогашения(ПроводкиБУ, ПроводкиНУ);

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)

	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,
		ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());

КонецПроцедуры
	
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Возврат;
	КонецЕсли;

	ОбработатьСпособыПлатежей();

КонецПроцедуры
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проведение выдачи займа 
// 
// Параметры:
//  ПроводкиБУ - РегистрБухгалтерииНаборЗаписей.Типовой - Проводки БУ
//  ПроводкиНУ - РегистрБухгалтерииНаборЗаписей.Налоговый - Проводки НУ
Процедура ОбработкаПроведенияВыдачиЗайма(ПроводкиБУ, ПроводкиНУ)

	СпособОтражения = Справочники.МФОСпособыОтраженияОпераций.ВыдачаЗаймаНаличные;
	Если withdrawal = Перечисления.МФОСпособВыдачи.nonСash Тогда
		СпособОтражения = Справочники.МФОСпособыОтраженияОпераций.ВыдачаЗаймаБанк;
	КонецЕсли;

	СоздатьСтрочкиБУНУ(ПроводкиБУ, ПроводкиНУ, Дата, СпособОтражения, amount);

КонецПроцедуры

// Проведение начислений.
// 
// Параметры:
//  ПроводкиБУ - РегистрБухгалтерииНаборЗаписей.Типовой - Проводки БУ
//  ПроводкиНУ - РегистрБухгалтерииНаборЗаписей.Налоговый - Проводки НУ
Процедура ОбработкаПроведениеНачислений(ПроводкиБУ, ПроводкиНУ)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МФОЗаймНачисления.date,
	|	МФОЗаймНачисления.interest,
	|	МФОЗаймНачисления.overdue,
	|	МФОЗаймНачисления.overdue_interest
	|ИЗ
	|	Документ.МФОЗайм.Начисления КАК МФОЗаймНачисления
	|ГДЕ
	|	МФОЗаймНачисления.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		//Движения в зависимости от заполнености полей Вознаграждения и Пеня,
		//разделено на разные если на случай присутствия обих значений в строке
		Если ЗначениеЗаполнено(Выборка.interest) Тогда

			СпособОтражения = Справочники.МФОСпособыОтраженияОпераций.НачислениеВознаграждений;
			СоздатьСтрочкиБУНУ(ПроводкиБУ, ПроводкиНУ, Выборка.date, СпособОтражения, Выборка.interest);

		КонецЕсли;

		Если ЗначениеЗаполнено(Выборка.overdue_interest) Тогда

			СпособОтражения = Справочники.МФОСпособыОтраженияОпераций.НачислениеПениИШтрафов;
			СоздатьСтрочкиБУНУ(ПроводкиБУ, ПроводкиНУ, Выборка.date, СпособОтражения, Выборка.overdue_interest);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Проведение погашений
// 
// Параметры:
//  ПроводкиБУ - РегистрБухгалтерииНаборЗаписей.Типовой - Проводки БУ
//  ПроводкиНУ - РегистрБухгалтерииНаборЗаписей.Налоговый - Проводки НУ
Процедура ОбработкаПроведенияПогашения(ПроводкиБУ, ПроводкиНУ)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МФОЗаймПлатежи.Подразделение,
	|	МФОЗаймПлатежи.date,
	|	МФОЗаймПлатежи.amount,
	|	МФОЗаймПлатежи.interest,
	|	МФОЗаймПлатежи.total,
	|	МФОЗаймПлатежи.overdue_interest,
	|	МФОЗаймПлатежи.Касса,
	|	МФОЗаймПлатежи.БанковскийСчет,
	|	МФОЗаймПлатежи.СпособПогашения
	|ИЗ
	|	Документ.МФОЗайм.Платежи КАК МФОЗаймПлатежи
	|ГДЕ
	|	МФОЗаймПлатежи.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		Если Выборка.СпособПогашения = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда

			Если ЗначениеЗаполнено(Выборка.amount) Тогда
				СпособОтражения = Справочники.МФОСпособыОтраженияОпераций.ПогашениеОДБанк;
				СоздатьСтрочкиБУНУ(ПроводкиБУ, ПроводкиНУ, Выборка.date, СпособОтражения, Выборка.amount, Выборка);
			КонецЕсли;

			Если ЗначениеЗаполнено(Выборка.interest) Тогда
				СпособОтражения = Справочники.МФОСпособыОтраженияОпераций.ПогашениеВознагражденийБанк;
				СоздатьСтрочкиБУНУ(ПроводкиБУ, ПроводкиНУ, Выборка.date, СпособОтражения, Выборка.interest, Выборка);
			КонецЕсли;

			Если ЗначениеЗаполнено(Выборка.overdue_interest) Тогда
				СпособОтражения = Справочники.МФОСпособыОтраженияОпераций.ПогашениеПениИШтрафовБанк;
				СоздатьСтрочкиБУНУ(ПроводкиБУ, ПроводкиНУ, Выборка.date, СпособОтражения, Выборка.overdue_interest,
					Выборка);
			КонецЕсли;

		Иначе

			Если ЗначениеЗаполнено(Выборка.amount) Тогда
				СпособОтражения = Справочники.МФОСпособыОтраженияОпераций.ПогашениеОДНал;
				СоздатьСтрочкиБУНУ(ПроводкиБУ, ПроводкиНУ, Выборка.date, СпособОтражения, Выборка.amount, Выборка);
			КонецЕсли;

			Если ЗначениеЗаполнено(Выборка.interest) Тогда
				СпособОтражения = Справочники.МФОСпособыОтраженияОпераций.ПогашениеВознагражденийНал;
				СоздатьСтрочкиБУНУ(ПроводкиБУ, ПроводкиНУ, Выборка.date, СпособОтражения, Выборка.interest, Выборка);
			КонецЕсли;

			Если ЗначениеЗаполнено(Выборка.overdue_interest) Тогда
				СпособОтражения = Справочники.МФОСпособыОтраженияОпераций.ПогашениеПениИШтрафовНал;
				СоздатьСтрочкиБУНУ(ПроводкиБУ, ПроводкиНУ, Выборка.date, СпособОтражения, Выборка.overdue_interest,
					Выборка);
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

 
// Создать строчки БУ, НУ в соответствии с переданными значениями
// 
// Параметры:
//  ПроводкиБУ - РегистрБухгалтерииНаборЗаписей.Типовой - Проводки БУ
//  ПроводкиНУ - РегистрБухгалтерииНаборЗаписей.Налоговый - Проводки НУ
//  ДатаЗаписи - Дата - Дата записи
//  СпособОтражения - СправочникСсылка.МФОСпособыОтраженияОпераций - Способ отражения
//  Сумма - Число - Сумма
Процедура СоздатьСтрочкиБУНУ(ПроводкиБУ, ПроводкиНУ, ДатаЗаписи, СпособОтражения, Знач Сумма, СтрокаТЧ = Неопределено)

	Содержание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СпособОтражения, "Наименование");
	
	//добавление проводки БУ
	НоваяСтрокаБУ = ПроводкиБУ.Добавить();
	НоваяСтрокаБУ.Содержание = Содержание;
	НоваяСтрокаБУ.Период = ДатаЗаписи;
	НоваяСтрокаБУ.Сумма = Сумма;

	ЗаполнитьПоляСтрокиБУ(НоваяСтрокаБУ, СпособОтражения, СтрокаТЧ);

	//добавление проводки НУ
	НоваяСтрокаНУ = ПроводкиНУ.Добавить();
	НоваяСтрокаНУ.Содержание = Содержание;
	НоваяСтрокаНУ.Период = ДатаЗаписи;
	НоваяСтрокаНУ.Сумма = Сумма;

	ЗаполнитьПоляСтрокиНУ(НоваяСтрокаНУ, СпособОтражения, СтрокаТЧ);
КонецПроцедуры

// Заполнить поля строки БУ.
// 
// Параметры:
//  НоваяСтрокаБУ - РегистрБухгалтерииЗапись.Типовой - Новая строка БУ
//  СпособОтражения - СправочникСсылка.МФОСпособыОтраженияОпераций - Способ отражения
Процедура ЗаполнитьПоляСтрокиБУ(НоваяСтрокаБУ, СпособОтражения, СтрокаТЧ = Неопределено)

	НоваяСтрокаБУ.СчетДт = СпособОтражения.СчетДт;
	НоваяСтрокаБУ.СчетКт = СпособОтражения.СчетКт;
	НоваяСтрокаБУ.Организация = Организация;

	Если НоваяСтрокаБУ.СчетДт.Валютный Тогда
		НоваяСтрокаБУ.ВалютаДт = ВалютаДокумента;
		НоваяСтрокаБУ.ВалютнаяСуммаДт = НоваяСтрокаБУ.Сумма;
	КонецЕсли;

	Если НоваяСтрокаБУ.СчетКт.Валютный Тогда
		НоваяСтрокаБУ.ВалютаКт = ВалютаДокумента;
		НоваяСтрокаБУ.ВалютнаяСуммаКт = НоваяСтрокаБУ.Сумма;
	КонецЕсли;
	
	//Заполнение субконто БУ ДТ
	Если НоваяСтрокаБУ.СчетДт.ВидыСубконто.Количество() >= 1 Тогда
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяСтрокаБУ.СчетДт, НоваяСтрокаБУ.СубконтоДт, 1,
			ПолучитьЗначениеСубконто(СпособОтражения.СубконтоДт1, НоваяСтрокаБУ.СчетДт, 0, СтрокаТЧ));
	КонецЕсли;

	Если НоваяСтрокаБУ.СчетДт.ВидыСубконто.Количество() >= 2 Тогда
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяСтрокаБУ.СчетДт, НоваяСтрокаБУ.СубконтоДт, 2,
			ПолучитьЗначениеСубконто(СпособОтражения.СубконтоДт2, НоваяСтрокаБУ.СчетДт, 1, СтрокаТЧ));
	КонецЕсли;

	Если НоваяСтрокаБУ.СчетДт.ВидыСубконто.Количество() >= 3 Тогда
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяСтрокаБУ.СчетДт, НоваяСтрокаБУ.СубконтоДт, 3,
			ПолучитьЗначениеСубконто(СпособОтражения.СубконтоДт3, НоваяСтрокаБУ.СчетДт, 2, СтрокаТЧ));
	КонецЕсли; 
	
	//Заполнение субконто БУ КТ
	Если НоваяСтрокаБУ.СчетКт.ВидыСубконто.Количество() >= 1 Тогда
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяСтрокаБУ.СчетКт, НоваяСтрокаБУ.СубконтоКт, 1,
			ПолучитьЗначениеСубконто(СпособОтражения.СубконтоКт1, НоваяСтрокаБУ.СчетКт, 0, СтрокаТЧ));
	КонецЕсли;

	Если НоваяСтрокаБУ.СчетКт.ВидыСубконто.Количество() >= 2 Тогда
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяСтрокаБУ.СчетКт, НоваяСтрокаБУ.СубконтоКт, 2,
			ПолучитьЗначениеСубконто(СпособОтражения.СубконтоКт2, НоваяСтрокаБУ.СчетКт, 1, СтрокаТЧ));
	КонецЕсли;

	Если НоваяСтрокаБУ.СчетКт.ВидыСубконто.Количество() >= 3 Тогда
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяСтрокаБУ.СчетКт, НоваяСтрокаБУ.СубконтоКт, 3,
			ПолучитьЗначениеСубконто(СпособОтражения.СубконтоКт3, НоваяСтрокаБУ.СчетКт, 2, СтрокаТЧ));
	КонецЕсли;

КонецПроцедуры

// Заполнить поля строки НУ.
// 
// Параметры:
//  НоваяСтрокаНУ - РегистрБухгалтерииЗапись.Налоговый - Новая строка НУ
//  СпособОтражения - СправочникСсылка.МФОСпособыОтраженияОпераций - Способ отражения
Процедура ЗаполнитьПоляСтрокиНУ(НоваяСтрокаНУ, СпособОтражения, СтрокаТЧ = Неопределено)

	НоваяСтрокаНУ.Организация = Организация;
	НоваяСтрокаНУ.СчетДт = СпособОтражения.СчетДтНУ;
	НоваяСтрокаНУ.СчетКт = СпособОтражения.СчетКтНУ;
	НоваяСтрокаНУ.ВидУчетаДт = СпособОтражения.ВидУчетаНУДТ;
	НоваяСтрокаНУ.ВидУчетаКт = СпособОтражения.ВидУчетаНУКТ;
	
	//Заполнение субконто НУ ДТ
	Если НоваяСтрокаНУ.СчетДт.ВидыСубконто.Количество() >= 1 Тогда
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяСтрокаНУ.СчетДт, НоваяСтрокаНУ.СубконтоДт, 1,
			ПолучитьЗначениеСубконто(СпособОтражения.СубконтоДТНУ1, НоваяСтрокаНУ.СчетДт, 0, СтрокаТЧ));
	КонецЕсли;

	Если НоваяСтрокаНУ.СчетДт.ВидыСубконто.Количество() >= 2 Тогда
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяСтрокаНУ.СчетДт, НоваяСтрокаНУ.СубконтоДт, 2,
			ПолучитьЗначениеСубконто(СпособОтражения.СубконтоДТНУ2, НоваяСтрокаНУ.СчетДт, 1, СтрокаТЧ));
	КонецЕсли;

	Если НоваяСтрокаНУ.СчетДт.ВидыСубконто.Количество() >= 3 Тогда
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяСтрокаНУ.СчетДт, НоваяСтрокаНУ.СубконтоДт, 3,
			ПолучитьЗначениеСубконто(СпособОтражения.СубконтоДТНУ3, НоваяСтрокаНУ.СчетДт, 2, СтрокаТЧ));
	КонецЕсли; 
	
	//Заполнение субконто НУ КТ
	Если НоваяСтрокаНУ.СчетКт.ВидыСубконто.Количество() >= 1 Тогда
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяСтрокаНУ.СчетКт, НоваяСтрокаНУ.СубконтоКт, 1,
			ПолучитьЗначениеСубконто(СпособОтражения.СубконтоКТНУ1, НоваяСтрокаНУ.СчетКт, 0, СтрокаТЧ));
	КонецЕсли;

	Если НоваяСтрокаНУ.СчетКт.ВидыСубконто.Количество() >= 2 Тогда
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяСтрокаНУ.СчетКт, НоваяСтрокаНУ.СубконтоКт, 2,
			ПолучитьЗначениеСубконто(СпособОтражения.СубконтоКТНУ2, НоваяСтрокаНУ.СчетКт, 1, СтрокаТЧ));
	КонецЕсли;

	Если НоваяСтрокаНУ.СчетКт.ВидыСубконто.Количество() >= 3 Тогда
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяСтрокаНУ.СчетКт, НоваяСтрокаНУ.СубконтоКт, 3,
			ПолучитьЗначениеСубконто(СпособОтражения.СубконтоКТНУ3, НоваяСтрокаНУ.СчетКт, 2, СтрокаТЧ));
	КонецЕсли;

КонецПроцедуры

// Возвращает значение для указания субконто в зависимости от счета и позиции в субконто в счете
// 
// Параметры:
//  СубконтоСчета - Характеристика.ВидыСубконтоТиповые - Субконто счета
//  Счет - ПланСчетовСсылкаИмяПланаСчетов, ПланСчетовСсылка.Типовой - Счет
//  НомерСубконто - Число - Номер субконто
// 
// Возвращаемое значение:
//  СправочникСсылка.Контрагенты, СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.БанковскиеСчета, СправочникСсылка.Кассы, СправочникСсылка.ПодразделенияОрганизаций, Характеристика.ВидыСубконтоТиповые - Возвращаемые данные
Функция ПолучитьЗначениеСубконто(СубконтоСчета, Счет, НомерСубконто, СтрокаТЧ = Неопределено)

	Если ЗначениеЗаполнено(СубконтоСчета) Тогда
		Возврат СубконтоСчета;
	КонецЕсли;

	ТипСубконто = Счет.ВидыСубконто[НомерСубконто].ВидСубконто;

	Если ТипСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты Или ТипСубконто
		= ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДебиторыКредиторыОрганизации Тогда

		Возврат Контрагент;

	ИначеЕсли ТипСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры Тогда

		Возврат ДоговорКонтрагента;

	ИначеЕсли ТипСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДенежныеСредства Тогда

		Если ЗначениеЗаполнено(СтрокаТЧ) Тогда
			Возврат ?(СтрокаТЧ.СпособПогашения = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк, СтрокаТЧ.БанковскийСчет, СтрокаТЧ.Касса);
		Иначе
			Возврат ?(withdrawal = Перечисления.МФОСпособВыдачи.nonСash, БанковскийСчет, Касса);
		КонецЕсли;

	ИначеЕсли ТипСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения Тогда

		Возврат Подразделение;

	КонецЕсли;

КонецФункции


// Пробегается по табличной части Платежи и изменяет способ платежа в соответствии с регистром
Процедура ОбработатьСпособыПлатежей()

	СоответствиеПодразделений = СформироватьСоответствиеПодразделений();

	Для Каждого СтрокаТЧ Из Платежи Цикл

		СтрокаСоответствияПодразделений = СоответствиеПодразделений[СтрокаТЧ.Подразделение];
		Если ТипЗнч(СтрокаСоответствияПодразделений) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Если СтрокаТЧ.БанковскийСчет = СтрокаСоответствияПодразделений Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТЧ.СпособПогашения = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк;
			СтрокаТЧ.БанковскийСчет =  СтрокаСоответствияПодразделений;
		Иначе
			Если СтрокаТЧ.Касса = СтрокаСоответствияПодразделений Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТЧ.СпособПогашения = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
			СтрокаТЧ.Касса =  СтрокаСоответствияПодразделений;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Формирует и возвращает Соотвтетствие где Ключ это Ссылка на подразделение,
// Значение это Касса организации или Банковский счет в зависимости от наличия записи
// в регистре сведений МФО_СписокПодразделенийЧерезБанк
// 
// Возвращаемое значение:
//  Соответствие - Сформировать соответствие подразделений
Функция СформироватьСоответствиеПодразделений()

	Подразделения = Платежи.Выгрузить( , "Подразделение,branch_office_id");
	СоответствиеПодразделений = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодразделениеТаблица.Подразделение,
	|	ПодразделениеТаблица.branch_office_id
	|ПОМЕСТИТЬ ВТ_Подразделения
	|ИЗ
	|	&Подразделения КАК ПодразделениеТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Подразделения.Подразделение как Подразделение,
	|	Кассы.Ссылка как Касса,
	|	МФО_СписокПодразделенийЧерезБанкСрезПоследних.БанковскийСчет как БанковскийСчет
	|ИЗ
	|	ВТ_Подразделения КАК ВТ_Подразделения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Кассы КАК Кассы
	|		ПО ВТ_Подразделения.branch_office_id = Кассы.id
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МФО_СписокПодразделенийЧерезБанк.СрезПоследних(&ДатаДокумента,
	|			Использовать = ИСТИНА) КАК МФО_СписокПодразделенийЧерезБанкСрезПоследних
	|		ПО ВТ_Подразделения.Подразделение = МФО_СписокПодразделенийЧерезБанкСрезПоследних.Подразделение
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Подразделения.Подразделение,
	|	Кассы.Ссылка,
	|	МФО_СписокПодразделенийЧерезБанкСрезПоследних.БанковскийСчет";

	Запрос.Параметры.Вставить("Подразделения", Подразделения);
	Запрос.Параметры.Вставить("ДатаДокумента", Дата);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.БанковскийСчет) Тогда
			СоответствиеПодразделений.Вставить(ВыборкаДетальныеЗаписи.Подразделение,
				ВыборкаДетальныеЗаписи.БанковскийСчет);
		Иначе
			СоответствиеПодразделений.Вставить(ВыборкаДетальныеЗаписи.Подразделение, ВыборкаДетальныеЗаписи.Касса);
		КонецЕсли;
	КонецЦикла;
	Возврат СоответствиеПодразделений;

КонецФункции

#КонецОбласти