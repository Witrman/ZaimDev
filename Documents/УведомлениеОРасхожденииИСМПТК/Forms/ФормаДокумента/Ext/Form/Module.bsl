
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.ПриСозданииНаСервере_НастроитьПодключаемоеОборудование(ЭтаФорма);

	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
		Объект.НомерИСМПТ = "";
	КонецЕсли;
	
	СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	УправлениеФормой();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	СформироватьДеревоКодовМаркировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы И ИспользуютсяСканерыШтрихкода Тогда
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	СобытияФормИСМПТКПереопределяемый.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОРасхождении());
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УправлениеФормой();
	ИнтерфейсИСМПТК.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	СобытияФормИСМПТКПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОРасхождении() Тогда
		
		Если Объект.Ссылка.Пустая() Тогда
			УправлениеФормой();
		Иначе
			ЭтаФорма.Прочитать();
		КонецЕсли;
		
		СформироватьДеревоКодовМаркировки();
		
	ИначеЕсли ИмяСобытия = ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьАктПриемаПередачи() Тогда
		
		СвязанныйАктПриИзмененииНаСервере();
		ОбработкаОповещенияЗаписиАППКорректировкаНаСервере();
		
	ИначеЕсли Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработкаСобытияСканераОбщая();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Отвязать_УОР" Тогда
		ЭтаФорма.Прочитать();
	Иначе			
		ИнтеграцияИСМПТККлиентПереопределяемый.ОбработкаОповещенияДокументыИСМПТ(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);		
	КонецЕсли;
					
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не СобытияФормИСМПТККлиентПереопределяемый.ОбрабатыватьВнешнееСобытиеТО() Тогда 
		Возврат;
	КонецЕсли;
	
	Параметр = Новый Массив;
	Параметр.Добавить(Данные);
	Параметр.Добавить(Неопределено);
	
	Если ВводДоступен() Тогда
		Если Событие = "Штрихкод" ИЛИ Событие = "ПолученШтрихкод" Тогда
			ОбработкаСобытияСканераОбщая();
		КонецЕсли;
	Иначе
		ИнтеграцияИСМПТККлиентПереопределяемый.ОбработкаОповещенияДокументыИСМПТ(ЭтаФорма, Объект.Ссылка, Событие, Параметр, Источник);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытияСканераОбщая()
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда 
		ТекстСообщения = НСтр("ru = 'Корректировка кодов идентификации в Уведомлении невозможна! Воспользуйтесь формой сверки во входящем Акте.'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Корректировка кодов идентификации во входящем документе невозможна.'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область СостояниеДокумента

&НаСервере
Процедура СформироватьПредставлениеСостояния()
	
	Если Объект.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий
		И Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ готов к отправке получателю через ИС МПТ'");
		
	ИначеЕсли Объект.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий
		И (Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.ПринятСервером
		ИЛИ Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.ДоставленПолучателю)Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ успешно принят сервером ИС МПТ'");
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.ОбрабатываетсяСервером Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ обрабатывается сервером ИС МПТ'");
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.ОтклоненСервером Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ отклонен сервером ИС МПТ, т.к. содержит ошибки'");
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.Отозван
		ИЛИ Объект.Состояние = Перечисления.СостоянияДокументовИСМПТК.Аннулирован Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ %Состояние%'");
		ПредставлениеСостояния = СтрЗаменить(ПредставлениеСостояния, "%Состояние%", НРег(Объект.Состояние));
	
	Иначе
		
		Если Объект.Ссылка.Пустая() Тогда
			ПредставлениеСостояния = НСтр("ru = 'Новый документ'");
		Иначе
			ПредставлениеСостояния = НСтр("ru = 'Документ %Состояние%'");
			ПредставлениеСостояния = СтрЗаменить(ПредставлениеСостояния, "%Состояние%", НРег(Объект.Состояние));
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ПредставлениеСостояния.ЦветТекста = ИнтеграцияИСМПТККлиентСервер.ЦветСостояния(Объект.Состояние);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСостоянияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий")
		И Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.Сформирован") Тогда
		
		ОтправитьПолучателюЗаписьФормы = Новый ОписаниеОповещения("ОтправитьПолучателюЗаписьФормы", ЭтаФорма);
		ПоказатьВопрос(ОтправитьПолучателюЗаписьФормы, НСтр("ru = 'Отправить получателю?'"), РежимДиалогаВопрос.ОКОтмена);
		
	ИначеЕсли Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ОбрабатываетсяСервером") Тогда	
		
		ОбновитьНаСервереЗавершение = Новый ОписаниеОповещения("ОбновитьНаСервереЗавершение", ЭтаФорма);
		ПоказатьВопрос(ОбновитьНаСервереЗавершение, НСтр("ru = 'Получить результат обработки документа из ИС МПТ?'"), РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		ПоказатьПредупреждение(, ПредставлениеСостояния);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПолучателюЗаписьФормы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
			ОтправитьПолучателюЗавершение = Новый ОписаниеОповещения("ОтправитьПолучателюЗавершение", ЭтаФорма);	
			ИнтеграцияИСМПТККлиент.ВопросЗаписатьОбъектПередВыполнением(ОтправитьПолучателюЗавершение,, "Записать");
		Иначе
			ОтправитьПолучателюЗавершение(КодВозвратаДиалога.ОК, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПолучателюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если ИнтеграцияИСМПТККлиент.ОбъектЗаписан(ЭтаФорма) Тогда
			МассивУОР = Новый Массив;
			МассивУОР.Добавить(Объект.Ссылка);
			ИнтеграцияИСМПТККлиент.ОтправитьИсходящиеДокументыИСМПТ(МассивУОР, Новый Структура("ЗапускатьФоновоеЗадание", Ложь));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаСервереЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если ИнтеграцияИСМПТККлиент.ОбъектЗаписан(ЭтаФорма) Тогда
			МассивУОР = Новый Массив;
			МассивУОР.Добавить(Объект.Ссылка);
			ИнтеграцияИСМПТККлиент.ОбновитьДокументыИзИСМПТ(МассивУОР, Новый Структура("ЗапускатьФоновоеЗадание, ТолькоОбновитьСтатус", Ложь, Истина));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСМПТККлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАктНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.АктКорректировка) Тогда
		ПоказатьЗначение(,Объект.АктКорректировка);
	Иначе
		ВыбратьАктКорректировку();
	КонецЕсли;
		
КонецПроцедуры

#Область Общее

&НаКлиенте
Процедура СвязанныйАктПриИзменении(Элемент)
	
	СвязанныйАктПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СвязанныйАктПриИзмененииНаСервере()
	
	//Заполняем по данным Акта

	СтрокаРеквизитов = "Организация, ВидОперации, НомерИСМПТ, Поставщик, ПоставщикИдентификационныйНомер, ПоставщикНаименование, Получатель, ПолучательИдентификационныйНомер, ПолучательНаименование";
	РеквизитыДляЗаполнения = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЗначенияРеквизитовОбъекта(Объект.СвязанныйАкт, СтрокаРеквизитов); 
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыДляЗаполнения,, "НомерИСМПТ, Поставщик, ПоставщикИдентификационныйНомер, ПоставщикНаименование, Получатель, ПолучательИдентификационныйНомер, ПолучательНаименование");
	Объект.РегистрационныйНомерСвязанногоАкта = РеквизитыДляЗаполнения.НомерИСМПТ;
	
	Объект.Получатель = РеквизитыДляЗаполнения.Поставщик;
	Объект.ПолучательИдентификационныйНомер = РеквизитыДляЗаполнения.ПоставщикИдентификационныйНомер;
	Объект.ПолучательНаименование = РеквизитыДляЗаполнения.ПоставщикНаименование;
		
	Объект.Поставщик = РеквизитыДляЗаполнения.Получатель;
	Объект.ПоставщикИдентификационныйНомер = РеквизитыДляЗаполнения.ПолучательИдентификационныйНомер;
	Объект.ПоставщикНаименование = РеквизитыДляЗаполнения.ПолучательНаименование;
	
	Объект.Марки.Очистить();
	ТаблицаМаркиАкт = Объект.СвязанныйАкт.Марки.Выгрузить();
	Для Каждого СтрокаАкт Из ТаблицаМаркиАкт Цикл
		НоваяСтрока = Объект.Марки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАкт);
		НоваяСтрока.СтатусСверкиКода = ПредопределенноеЗначение("Перечисление.СтатусыСверкиКодаИСМПТК.НеНайден");
	КонецЦикла;	
	
	СформироватьДеревоКодовМаркировки();
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныйАктНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормыВыбора = Новый Структура("РежимВыбора", Истина);
	Отбор = Новый Структура;

	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда
		Отбор.Вставить("Направление", ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий"));
		Отбор.Вставить("ТипАкта",    ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исходный"));
		Если ЗначениеЗаполнено(Объект.Поставщик) Тогда
			Отбор.Вставить("Получатель", Объект.Поставщик);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			Отбор.Вставить("Поставщик",  Объект.Организация);
		КонецЕсли;
	Иначе
		Отбор.Вставить("Направление", ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий"));
		Отбор.Вставить("ТипАкта",    ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исходный"));
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			Отбор.Вставить("Получатель", Объект.Организация);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Получатель) Тогда
			Отбор.Вставить("Поставщик",  Объект.Получатель);
		КонецЕсли;
	КонецЕсли;
		
	Если Отбор.Количество() <> 0 Тогда
		
		ПараметрыФормыВыбора.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("Документ.АктПриемаПередачиИСМПТК.ФормаВыбора", ПараметрыФормыВыбора, Элемент);
		СтандартнаяОбработка = Ложь;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область Поставщик

&НаСервере
Процедура ПоставщикПриИзмененииНаСервере()
	
	СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Поставщик, "Поставщик");
	ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПоставщикИдентификационныйНомер, ПоставщикНаименование");
		
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
		Объект.Организация = Объект.Поставщик;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	//ПоставщикПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Получатель

&НаСервере
Процедура ПолучательПриИзмененииНаСервере()
	
	СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Получатель, "Получатель");
	ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПолучательИдентификационныйНомер, ПолучательНаименование");
		
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда 
		Объект.Организация = Объект.Получатель;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	//ПолучательПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗаполнитьЗначенияПоОрганизации()
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда
		
		Объект.Получатель = Объект.Организация;
		СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Получатель, "Получатель");
		ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПолучательИдентификационныйНомер, ПолучательНаименование");
				
	ИначеЕсли Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
		
		Объект.Поставщик = Объект.Организация;
		СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Поставщик, "Поставщик");
		ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПоставщикИдентификационныйНомер, ПоставщикНаименование");
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Направление) Тогда
		ЗаполнитьЗначенияПоОрганизации();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеПриИзмененииНаСервере()
	
	Если Объект.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий Тогда
		
		Объект.Получатель = Объект.Поставщик;
		Объект.Контрагент = Объект.Поставщик;
		Объект.Поставщик = Объект.Организация;
		
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюПоставщик", "Видимость", Ложь);
		
		Объект.ПолучательИдентификационныйНомер = Объект.ПоставщикИдентификационныйНомер;
		Объект.ПолучательНаименование  			= Объект.ПоставщикНаименование;
		СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Организация, "Поставщик");
		ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПоставщикИдентификационныйНомер, ПоставщикНаименование");
				
	ИначеЕсли Объект.Направление = Перечисления.НаправленияДокументовИСМПТК.Входящий Тогда
		
		Объект.Поставщик = Объект.Получатель;
		Объект.Контрагент = Объект.Получатель;
		Объект.Получатель = Объект.Организация;
		
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюПоставщик", "Видимость", Истина);
		
		Объект.ПоставщикИдентификационныйНомер = Объект.ПолучательИдентификационныйНомер;
		Объект.ПоставщикНаименование 		   = Объект.ПолучательНаименование;
		СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Организация, "Получатель");
		ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПолучательИдентификационныйНомер, ПолучательНаименование");
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеПриИзменении(Элемент)
	
	НаправлениеПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

#Область Марки

&НаСервере
Процедура ДеревоМаркированнойПродукцииСтатусСверкиКодаПриИзмененииНаСервере(КодИдентификации, СтатусСверки, ТекстОшибки)
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("КодИдентификации", КодИдентификации);
	НайденнаяСтрока = Объект.Марки.НайтиСтроки(СтруктураОтбора);
	
	Если Не НайденнаяСтрока.Количество() = 0 Тогда
		НайденнаяСтрока[0].СтатусСверкиКода = СтатусСверки;		
	Иначе
		ТекстОшибки = НСтр("ru = 'Ой, кажется что-то пошло не так!'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииСтатусСверкиКодаПриИзменении(Элемент)
	
	КодИдентификации = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные.КодИдентификации;
	СтатусСверки = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные.СтатусСверкиКода;
	ТекстОшибки = "";
	
	ДеревоМаркированнойПродукцииСтатусСверкиКодаПриИзмененииНаСервере(КодИдентификации, СтатусСверки, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки, , , "Форма.Объект");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркировкиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = Ложь;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СвернутьВсеДервео(Команда)
	
	СвернутьРазвернутьДеревоКодов(ДеревоМаркированнойПродукции.ПолучитьЭлементы(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеДервео(Команда)
	
	СвернутьРазвернутьДеревоКодов(ДеревоМаркированнойПродукции.ПолучитьЭлементы(), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьДеревоКодов(ДервероЭлементов, Развернуть)
	
	Для Каждого Элемент Из ДервероЭлементов Цикл
		
		ВложенныеЭлементы = Элемент.ПолучитьЭлементы();
		
        Если ВложенныеЭлементы.Количество() > 0 Тогда
			
			СвернутьРазвернутьДеревоКодов(ВложенныеЭлементы, Развернуть);

            Если Развернуть = Истина Тогда
                Элементы.ДеревоМаркированнойПродукции.Развернуть(Элемент.ПолучитьИдентификатор());
            Иначе
                Элементы.ДеревоМаркированнойПродукции.Свернуть(Элемент.ПолучитьИдентификатор());
			КонецЕсли;
			
        КонецЕсли;
    КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДокументОснованиеСоздать(Команда)
	
	ТекстВопроса = "";
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Параметры.Ключ) ИЛИ ЭтаФорма.Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Акт приема/передачи нельзя вводить на основании не записанного документа. Записать документ?'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		ДополнительныеПараметры = Новый Структура("Форма", ЭтаФорма);
		Режим 	   = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписьПриСозданииАПП", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.АктПриемаПередачиИСМПТК.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписьПриСозданииАПП(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	
	Попытка
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
		Если Форма.Записать(ПараметрыЗаписи) Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
			ОткрытьФорму("Документ.АктПриемаПередачиИСМПТК.ФормаОбъекта", ПараметрыФормы);
		КонецЕсли;
	Исключение
		Информация = ИнформацияОбОшибке();
		ТекстСообщения = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТекстСообщенияНеУдалосьЗаписатьДокументМаркировки();
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки(Информация));
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
	КонецПопытки;                          

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоКоличествуГрупповыхУпаковок(Команда)
	
	ЗавершениеПолучитьДанныеПоГорупповымКодамМаркировки = Новый ОписаниеОповещения("ЗавершениеПолучитьДанныеПоГорупповымКодамМаркировки", ЭтаФорма);
	ПолучитьКлючАвторизации(ЗавершениеПолучитьДанныеПоГорупповымКодамМаркировки);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершениеПолучитьДанныеПоГорупповымКодамМаркировки(РезультатВыполнения, Параметры) Экспорт
	
	НеОтправлен = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик");
	ИнтеграцияИСМПТК.ЗавершениеПолучитьДанныеПоГорупповымКодамМаркировки_Общая(ЭтаФорма, РезультатВыполнения, Объект.Направление, НеОтправлен);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если Не ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПроверкаФорматаТранспортногоКодаПройденаУспешно(ДанныеШтрихкода) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьКодМаркировки(ДанныеШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайла(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = "Выбор файла";
	ДиалогВыбораФайла.Фильтр = "CSV (Comma-Separated Values)(*.csv)|*.csv";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьКодыМаркировкиИзФайлаЗавершение", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиВФайл(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = "Выбор файла";
	ДиалогВыбораФайла.Фильтр = "CSV (Comma-Separated Values)(*.csv)|*.csv";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьКодыМаркировкиИзФайлаЗавершение", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВExcel(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок 	= "Выбор файла";
	ДиалогВыбораФайла.Фильтр 		= НСтр("ru='Все поддерживаемые форматы файлов(*.xls;*.xlsx;)|*.xls;*.xlsx;|Книга Excel 97 (*.xls)|*.xls|Книга Excel 2007 (*.xlsx)|*.xlsx'");
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр 	  = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор 		  = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("СоздатьФайлXLS", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлXLS(ВыбранныеФайлы, ДополнительныеПараметрым) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		
		Итератор = 1;
		Для Каждого СтрокаТЧ Из Объект.Марки Цикл
			
			Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий")
				Или Не ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки) Тогда 
				КодДляЗаписи = СтрокаТЧ.КодИдентификации;
			Иначе 
				КодДляЗаписи = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтрокаТЧ.КодМаркировки);
			КонецЕсли;
			
			ТабличныйДокумент.Область("R" + Формат(Итератор,"ЧГ=0") + "C1").Текст = КодДляЗаписи;
			Итератор = Итератор + 1;
		КонецЦикла;
		
		ТабличныйДокумент.Записать(ВыбранныеФайлы[0], ТипФайлаТабличногоДокумента.XLS97);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыбратьАктКорректировку()
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.ПустаяСсылка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указано направление документа.'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСМПТК.ПустаяСсылка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан вид операции документа.'"));
		Возврат;
	КонецЕсли;
	
	Входящий = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий");
	Исходящий = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий");
	
	Отбор = Новый Структура();
	Отбор.Вставить("Направление", ?(Объект.Направление = Входящий, Исходящий, Входящий));
	Отбор.Вставить("ВидОперации", Объект.ВидОперации);
	Отбор.Вставить("ТипАкта", 	  ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исправленный"));
	Отбор.Вставить("УведомлениеОРасхождении", ПредопределенноеЗначение("Документ.УведомлениеОРасхожденииИСМПТК.ПустаяСсылка"));
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Отбор.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Отбор.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", Отбор);
					
	Оповещение = Новый ОписаниеОповещения("ВыборАППКорректировкиЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.АктПриемаПередачиИСМПТК.ФормаВыбора", ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыборАППКорректировкиЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> "" И ТипЗнч(РезультатВыбора) <> Тип("Неопределено") Тогда
		
		Объект.АктКорректировка = РезультатВыбора;
		СформироватьПредставлениеАПП(ЭтаФорма);
		Модифицированность = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	НеОтправлен = Объект.Статус 	 = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик");
	Исходящий   = Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий");
	Входящий 	= Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий");
	
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Ошибки", "Видимость", ?(Объект.Ошибки.Количество() = 0, Ложь, Истина));
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") 
		И Не ЗначениеЗаполнено(Объект.АктКорректировка) Тогда
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументОснованиеСоздать", "Видимость", Истина);
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПредставлениеАПП", 	   "Видимость", Ложь);
	Иначе
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументОснованиеСоздать", "Видимость", Ложь);
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПредставлениеАПП", 	   "Видимость", Истина);
	КонецЕсли;
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда 
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбщаяКомандаПроверитьИСМПТК", "Видимость", Ложь);	
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И Исходящий Тогда
		ВидимостьКоличествоОснования = Истина;
	Иначе
		ВидимостьКоличествоОснования = Ложь;
	КонецЕсли;
	
	//Если НеОтправлен Тогда 
	//	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбщаяКомандаПерезаполнитьПоПервичномуДокументуИСМПТК", "Видимость", ВидимостьКоличествоОснования);
	//Иначе
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбщаяКомандаПерезаполнитьПоПервичномуДокументуИСМПТК", "Видимость", Ложь);
	//КонецЕсли;
	
	Если Не Входящий Тогда
		
		// Загрузить КМ из файла, ТСД
		// Требуется в Исходящем.
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииЗагрузитьКодыМаркировкиИзФайла", "Видимость",   Ложь);
		
		//Возможность редактировать количество
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииКоличествоПодобранно", 		    "ТолькоПросмотр", Ложь);
	Иначе
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииЗагрузитьКодыМаркировкиИзФайла", "Видимость", 	 Ложь);
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииКоличествоПодобранно", 		    "ТолькоПросмотр", Истина);
	КонецЕсли;
	
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Направление", "Доступность",  Ложь);
			
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Поставщик",  "ТолькоПросмотр", Не НеОтправлен);
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Получатель", "ТолькоПросмотр", Не НеОтправлен);
	
	Если Исходящий Тогда
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоМаркированнойПродукцииЗаполнитьДанныеПоКоличествуГрупповыхУпаковок", "Доступность", НеОтправлен);
	КонецЕсли;
	
	СформироватьПредставлениеСостояния();
	УстановитьВидимостьКнопокИзмененияСтатуса();
	СформироватьПредставлениеАПП(ЭтаФорма);
	ИзменитьКоманднуюПанельДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
			
	Если Объект.Направление.Пустая() Тогда
		Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий");
	КонецЕсли;
	
	Если Объект.ВидОперации.Пустая() Тогда
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСМПТК.Реализация");
	КонецЕсли;
	
	Если Объект.Статус.Пустая() Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик");
	КонецЕсли;

	Если ИспользоватьПодключаемоеОборудование Тогда
		ИспользуютсяСканерыШтрихкода = (МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("СканерШтрихкода").Количество() > 0);
	Иначе
		ИспользуютсяСканерыШтрихкода = Ложь;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыОрганизацииКонтрагента(Ссылка, Реквизит) Экспорт
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ПолучитьРеквизитыОрганизацииКонтрагента(Ссылка, Реквизит);
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеДокументаОснованияНаСервере() Экспорт
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ПолучитьДанныеДокументаОснованияУОРНаСервере(Объект.ДокументОснование);

КонецФункции

&НаСервере
Функция СформироватьДеревоКодовМаркировки() Экспорт
	
	//Добавим группы номенклатуры
	ПустаСтруктураКМ = ПолучитьСтруктуруКодовМаркировки();
	ОчиститьДеревоКодовМаркировки();
	
	//Для Каждого ГруппаНом Из Объект.Товары Цикл
	//	ПустаСтруктураКМ.КоличествоИсточник = ГруппаНом.КоличествоИсточник;
	//	ДобавитьКодМаркировкиВДерево(ГруппаНом.Номенклатура, ПустаСтруктураКМ);
	//КонецЦикла;                                                  -
	
	Для Каждого СтрокаТЧ Из Объект.Марки Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.КодИдентификации) Тогда
			
			Номенклатура = ИнтеграцияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура();
			
			Если СтрокаТЧ.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
				//Для групповых поиск по регистру не выполняем, т.к. EAN в стркое относится к вложенному товару, а номенклатура для групповых 
				//должна заполняться по верхнему уровню, т.е. по реквизиту GTINВерхнегоУровня.
				EANВерхнегоУровня  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодEANИзGTIN(СтрокаТЧ.GTINВерхнегоУровня);
				ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(EANВерхнегоУровня);
			Иначе
				ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(СтрокаТЧ.EAN);
			КонецЕсли;
			
			Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
				Номенклатура = ДанныеНоменклатуры.Номенклатура;
			Иначе
				Номенклатура = ДанныеНоменклатуры;
			КонецЕсли;
			
			//Если Номенклатура не нашлась в ТЧ Товары и в регистре Штрихкоды, 
			//возможно, она была назначена в форме рдактирования транспортных упаковок без регистрации ШК.
			//Проверяем этот случай по данным строки 
			Если НЕ ЗначениеЗаполнено(Номенклатура) И ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				Номенклатура = СтрокаТЧ.Номенклатура;
			КонецЕсли;
			
			ДобавитьКодМаркировкиВДерево(СтрокаТЧ.Номенклатура, СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ДеревоМаркированнойПродукции.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
КонецФункции

&НаСервере
Процедура ИзменитьКоличествоКодовМаркировки(КодИд, Количество) 
	
	СтрокаКИ = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", КодИд));
	Если Не СтрокаКИ.Количество() = 0 Тогда 
		СтрокаКИ[0].Количество = Количество;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКнопокИзмененияСтатуса()
	
	СответвствиеСтатусов = ИнтеграцияИСМПТК.РазрешенныеДействияПоСтатусамУведомленияОРасхождении(Объект.Направление, Объект.ВидОперации);
	ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументУведомлениеОРасхожденииИСМПТКОтклонить",   "Видимость", СответвствиеСтатусов[ИнтеграцияИСМПТККлиентСервер.ДействиеОтклонение()][Объект.Статус]);
		
КонецПроцедуры

&НаСервере
Процедура ИзменитьКоманднуюПанельДокумента()
	
	Если Объект.Направление = Перечисления.НаправленияДокументовИСМПТК.Входящий Тогда
		
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументУведомлениеОРасхожденииИСМПТКОтправить", "Видимость", Ложь);
				
	ИначеЕсли Объект.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий Тогда
		
		ИнтерфейсИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументУведомлениеОРасхожденииИСМПТКОтправить", "Видимость", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеАПП(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.АктКорректировка) Тогда
		Форма.ПредставлениеАкт = Форма.Объект.АктКорректировка;
		Форма.Элементы.ПредставлениеАкт.ЦветТекста = ИнтеграцияИСМПТККлиентСервер.ЦветСиний();
	Иначе
		Если Форма.Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда
			Форма.ПредставлениеАкт = НСтр("ru = 'Не введен'");
		Иначе
			Форма.ПредставлениеАкт = НСтр("ru = 'Не получен'");
		КонецЕсли;
		Форма.Элементы.ПредставлениеАкт.ЦветТекста = ИнтеграцияИСМПТККлиентСервер.ЦветКрасный();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиАППКорректировкаНаСервере()

	ЭтаФорма.ПредставлениеАкт = Неопределено;
	
	Если ИнтеграцияИСМПТК.ПолучитьДанныеАППКорректировка(ЭтаФорма) Тогда 
		ИнтеграцияИСМПТК.ЗаполнитьТекстПроАППКорректировка(ЭтаФорма);
	КонецЕсли;

	ЭтотОбъект.Прочитать();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКлючАвторизации(СобытиеПослеАвторизации) Экспорт
	
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПолучитьКлючАвторизацииОбщая(СобытиеПослеАвторизации, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		ПрочитанныйФайл = Новый ТекстовыйДокумент;
		ПрочитанныйФайл.Прочитать(ВыбранныеФайлы[0]);
		
		СтруктураКода = Новый Структура("Штрихкод, Количество", "", 1);
		
		Для НомерСтроки = 1 По ПрочитанныйФайл.КоличествоСтрок() Цикл
			Штрихкод = ПрочитанныйФайл.ПолучитьСтроку(НомерСтроки);
			//Удалим нечитаемый символ который не может сериализироваться в XML 
			СтруктураКода.Штрихкод = СтрЗаменить(Штрихкод, Символ(29), "");
			ДобавитьКодМаркировкиИзФайла(СтруктураКода);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиИзФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		НовыйТекстовыйДокумент = Новый ТекстовыйДокумент;
		
		Для Каждого СтрокаТЧ Из Объект.Марки Цикл
			НовыйТекстовыйДокумент.ДобавитьСтроку(СтрокаТЧ.КодИдентификации);
		КонецЦикла;
		
		НовыйТекстовыйДокумент.Записать(ВыбранныеФайлы[0]);
		
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДерева

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииКоличествоПодобранноПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	ИзменитьКоличествоКодовМаркировки(ТекущиеДанные.КодИдентификации, ТекущиеДанные.КоличествоПодобранно);
	
КонецПроцедуры

#КонецОбласти 

#Область Штрихкодирование

&НаСервере
Процедура ОчиститьДеревокодовМаркировки() 
	
	Дерево = РеквизитФормыВЗначение("ДеревоМаркированнойПродукции");
	Дерево.Строки.Очистить();
	ЗначениеВРеквизитФормы(Дерево, "ДеревоМаркированнойПродукции");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюНоменклатуру(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		Если Не ДополнительныеПараметры.СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда 
			
			ПараметрыОткрытияФормы = Новый Структура("Номенклатура, СтруктураКодовМаркировки, Организация", ДополнительныеПараметры.Номенклатура, ДополнительныеПараметры.СтруктураКодовМаркировки, Объект.Организация);
			
			ОткрытьФорму(
			"Обработка.ОбменИСМПТК.Форма.ФормаУточненияДанныхИС",
			ПараметрыОткрытияФормы, ЭтотОбъект,,,,
			Новый ОписаниеОповещения("ЗавершитьДобавлениеКодаМаркировки", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе 
			
			СтруктураКодовМаркировки = ДополнительныеПараметры.СтруктураКодовМаркировки;
			Номенклатура			 = ДополнительныеПараметры.Номенклатура;
			ДобавитьКодМаркировкиВДерево(Номенклатура, СтруктураКодовМаркировки);
			
			НоваяСтрока = Объект.Марки.Добавить();
			НоваяСтрока.КодМаркировки 		= СтруктураКодовМаркировки.КодМаркировки;
			НоваяСтрока.КодИдентификации 	= СтруктураКодовМаркировки.КодИдентификации;
			НоваяСтрока.GTIN 				= СтруктураКодовМаркировки.GTIN;
			Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда 
				НоваяСтрока.GTINВерхнегоУровня 	= СтруктураКодовМаркировки.GTINВерхнегоУровня;
			КонецЕсли;
			НоваяСтрока.EAN 				= СтруктураКодовМаркировки.EAN;
			НоваяСтрока.Номенклатура 		= Номенклатура;
			НоваяСтрока.Количество 			= СтруктураКодовМаркировки.Количество;
			НоваяСтрока.ВидУпаковки			= СтруктураКодовМаркировки.ВидУпаковки;
			НоваяСтрока.ВидПродукцииИС		= СтруктураКодовМаркировки.ВидПродукцииИС;
			
			Для Каждого Строка ИЗ ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
				Элементы.ДеревоМаркированнойПродукции.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
			КонецЦикла;
			
			Модифицированность = Истина;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Для передачи на сервер КМ, в составе которого есть символы GS (29), требуется дополнительное кодирование
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	ИсходныеДанные.Вставить("ФорматBase64", Истина);
	СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);   
	
	//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
	Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПереопределяемый.СообщитьПользователю(СтруктураКодовМаркировки);
		Возврат;
	КонецЕсли;
	
	Если Не НайтиПоКодуИдентификации(СтруктураКодовМаркировки.КодИдентификации) = Неопределено Тогда 
		
		ПараметрыОткрытия = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		ПараметрыОткрытия.Штрихкод    = ИсходныеДанные.Штрихкод;
		ПараметрыОткрытия.ТекстОшибки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТекстСообщенияКодМаркировкиУказанВДокументе();
		ОткрытьФорму("Обработка.ОбменИСМПТК.Форма.ИнформацияОНевозможностиДобавленияОтсканированногоИСМПТ", ПараметрыОткрытия, ЭтаФорма);
		Возврат;
		
	КонецЕсли;
	
	Если Не СтруктураКодовМаркировки = Неопределено Тогда
		Если Не СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда 
			//Проверяем, включено ли автоматическое получение данных с сервера по групповым упаковкам
			Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоОпределениеЛогистическихКодовИСМПТК() Тогда
				ДобавитьНовыйЛогистическийКод(СтруктураКодовМаркировки); //Заполняем автоматически с сервера
			Иначе
				//Даем возможность указать данные вручную
				ПараметрыОткрытияФормы = Новый Структура("Номенклатура, СтруктураКодовМаркировки, Организация", ИнтеграцияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура(), СтруктураКодовМаркировки, Объект.Организация);
				ОткрытьФорму("Обработка.ОбменИСМПТК.Форма.ФормаУточненияДанныхИС", ПараметрыОткрытияФормы, ЭтотОбъект,,,, Новый ОписаниеОповещения("ЗавершитьДобавлениеКодаМаркировки", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
		Иначе
			//Для потребительских заполняем напрямую
			ДобавитьНовыйКод(СтруктураКодовМаркировки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиПоКодуИдентификации(КодИдентификации)
	
	СтруктураПоиска = Новый Структура("КодИдентификации", КодИдентификации);
	
	НайденныеСтроки = Объект.Марки.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьНовыйКод(СтруктураКодовМаркировки)
	
	ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(СтруктураКодовМаркировки.EAN);
	Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
		Номенклатура = ДанныеНоменклатуры.Номенклатура;
	Иначе
		Номенклатура = ДанныеНоменклатуры;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		
		ТекстОшибки = НСтр("ru = 'Не найден элемент справочника Номенклатура, соответствующий введённому штрих-коду.'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки,,, "ДеревоМаркированнойПродукции");
		Возврат;
		
	ИначеЕсли Объект.Марки.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура)).Количество() = 0 Тогда 
		
		ТекстВопроса = НСтр("ru = 'Указанный код маркировки принадлежит номенклатуре «" + Номенклатура + "», отсутствующей в данном документе.
		|Добавить данный код в Акт?'");
		
		ИзменитьДокументОснованиеЗавершение = Новый ОписаниеОповещения("ДобавитьНовуюНоменклатуру", ЭтаФорма, Новый Структура("СтруктураКодовМаркировки, Номенклатура", СтруктураКодовМаркировки, Номенклатура));
		ПоказатьВопрос(ИзменитьДокументОснованиеЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
		Возврат;
		
	Иначе
		
		СтруктураКодовМаркировки.Вставить("Номенклатура", Номенклатура);
		ЗавершитьДобавлениеКодаМаркировки(СтруктураКодовМаркировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыйЛогистическийКод(СтруктураКодовМаркировки)
	
	ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки = Новый ОписаниеОповещения("ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки", ЭтаФорма, СтруктураКодовМаркировки);
	ПолучитьКлючАвторизации(ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки(РезультатВыполнения, Параметры) Экспорт
	
	ИнтеграцияИСМПТККлиент.ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки_Общая(ЭтаФорма, РезультатВыполнения, Параметры);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьДобавлениеКодаМаркировки(СтруктураКодовМаркировки = Неопределено, ПараметрКоманды = Неопределено) Экспорт
	
	Если Не СтруктураКодовМаркировки = Неопределено Тогда 
		
		ДобавитьКодМаркировкиВДерево(СтруктураКодовМаркировки.Номенклатура, СтруктураКодовМаркировки);
		
		НоваяСтрока = Объект.Марки.Добавить();
		НоваяСтрока.КодМаркировки 		= СтруктураКодовМаркировки.КодМаркировки;
		НоваяСтрока.КодИдентификации 	= СтруктураКодовМаркировки.КодИдентификации;
		НоваяСтрока.GTIN 				= СтруктураКодовМаркировки.GTIN;
		Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда 
			НоваяСтрока.GTINВерхнегоУровня 	= СтруктураКодовМаркировки.GTINВерхнегоУровня;
		КонецЕсли;
		НоваяСтрока.EAN 				= СтруктураКодовМаркировки.EAN;
		НоваяСтрока.Номенклатура 		= СтруктураКодовМаркировки.Номенклатура;
		НоваяСтрока.Количество 			= СтруктураКодовМаркировки.Количество;
		НоваяСтрока.ВидУпаковки			= СтруктураКодовМаркировки.ВидУпаковки;
		НоваяСтрока.ВидПродукцииИС		= СтруктураКодовМаркировки.ВидПродукцииИС;
				
		Для Каждого Строка ИЗ ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
			Элементы.ДеревоМаркированнойПродукции.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
функция ПолучитьНоменклатуруПоШтрихкоду(EAN)
	
	Возврат ИнтеграцияИСМПТК.ПолучитьНоменклатуруПоШтрихкоду(EAN, ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура ДобавитьКодМаркировкиВДерево(Номенклатура, СтруктураКодовМаркировки) Экспорт
	
	НайденнаяСтрока = НайтиЗначениеЭлементаДереваПоНоменклатуре(Номенклатура, ДеревоМаркированнойПродукции);
	
	Если Не НайденнаяСтрока = Неопределено Тогда
		
		Если СтруктураКодовМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская Тогда 
			КоличествоПодобранно = 1;
		Иначе 
			КоличествоПодобранно = СтруктураКодовМаркировки.Количество;
		КонецЕсли;
		
		НоваяСтрокаКод = НайденнаяСтрока.ПолучитьЭлементы().Добавить();
		НоваяСтрокаКод.КодМаркировки 			= СтруктураКодовМаркировки.КодМаркировки;
		НоваяСтрокаКод.КодИдентификации 		= СтруктураКодовМаркировки.КодИдентификации;
		НоваяСтрокаКод.GTIN 					= СтруктураКодовМаркировки.GTIN;
		Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда 
			НоваяСтрокаКод.GTINВерхнегоУровня 		= СтруктураКодовМаркировки.GTINВерхнегоУровня;
		КонецЕсли;
		НоваяСтрокаКод.Количество				= 0;
		НоваяСтрокаКод.КоличествоПодобранно		= КоличествоПодобранно;
		НоваяСтрокаКод.КоличествоПодобранно		= КоличествоПодобранно;
		
		НайденнаяСтрока.КоличествоПодобранно 	= НайденнаяСтрока.КоличествоПодобранно + НоваяСтрокаКод.КоличествоПодобранно;
		НоваяСтрокаКод.СтатусСверкиКода 		= СтруктураКодовМаркировки.СтатусСверкиКода;
		
		НоваяСтрокаКод.ВидУпаковки 				= СтруктураКодовМаркировки.ВидУпаковки;
		НоваяСтрокаКод.ВидПродукцииИС			= СтруктураКодовМаркировки.ВидПродукцииИС;
				
	Иначе
		
		ЭлементыДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		
		НоваяСтрокаНоменклатура = ЭлементыДерева.Добавить();
		НоваяСтрокаНоменклатура.Номенклатура = Номенклатура;
		
		Если ЗначениеЗаполнено(СтруктураКодовМаркировки.КодИдентификации) Тогда 
			НоваяСтрокаКод = НоваяСтрокаНоменклатура.ПолучитьЭлементы().Добавить();
			НоваяСтрокаКод.КодМаркировки 			= СтруктураКодовМаркировки.КодМаркировки;
			НоваяСтрокаКод.КодИдентификации 		= СтруктураКодовМаркировки.КодИдентификации;
			НоваяСтрокаКод.GTIN 					= СтруктураКодовМаркировки.GTIN;
			Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда 
				НоваяСтрокаКод.GTINВерхнегоУровня 		= СтруктураКодовМаркировки.GTINВерхнегоУровня;
			КонецЕсли;
			НоваяСтрокаКод.СтатусСверкиКода 		= СтруктураКодовМаркировки.СтатусСверкиКода;
			
			Если Не ЗначениеЗаполнено(СтруктураКодовМаркировки.Количество) Тогда 
				НоваяСтрокаКод.КоличествоПодобранно		= ?(СтруктураКодовМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская, 1, 0);
			Иначе 
				НоваяСтрокаКод.КоличествоПодобранно		= СтруктураКодовМаркировки.Количество;
			КонецЕсли;
			
			НоваяСтрокаНоменклатура.КоличествоПодобранно = НоваяСтрокаКод.КоличествоПодобранно;
			
			НоваяСтрокаКод.ВидУпаковки 				= СтруктураКодовМаркировки.ВидУпаковки;
			НоваяСтрокаКод.ВидПродукцииИС			= СтруктураКодовМаркировки.ВидПродукцииИС;
			
		КонецЕсли;
		
		НоваяСтрокаНоменклатура.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.ПустаяСсылка();
		
		Если СтруктураКодовМаркировки.Свойство("КоличествоИсточник") Тогда 
			НоваяСтрокаНоменклатура.Количество	= СтруктураКодовМаркировки.КоличествоИсточник;
		Иначе 
			НоваяСтрокаКод.Количество	= 0;
		КонецЕсли;
		ИнтерфейсИСМПТККлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НоваяСтрокаНоменклатура);
		
	КонецЕсли;
	
	Если Не НоваяСтрокаКод = Неопределено Тогда
		ИнтерфейсИСМПТККлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НоваяСтрокаКод);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиЗначениеЭлементаДереваПоНоменклатуре(Номенклатура, Дерево)
	
	НайденныйЭлемент = Неопределено;
	
	ЭлементыВетвиДерева = Дерево.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыВетвиДерева Цикл
		Если ЭлементДерева.Номенклатура = Номенклатура Тогда
			НайденныйЭлемент = ЭлементДерева;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныйЭлемент;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьКодМаркировкиИзФайла(ИсходныеДанные)
	
	//Для передачи на сервер КМ, в составе которого есть символы GS (29), требуется дополнительное кодирование
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);  
	
	//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
	Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПереопределяемый.СообщитьПользователю(СтруктураКодовМаркировки);
		Возврат;
	КонецЕсли;
	
	Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
		//Определяем ном-ру для блоков по верхнему уровню. Если ведется учет через одну ном-ру и упаковки, товар будет тот же, что для нижнего уровня.
		//Но если это разные ном-ры (блок и пачка), то подобрать нужно именно блок.
		EANВерхнегоУровня  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодEANИзGTIN(СтруктураКодовМаркировки.GTINВерхнегоУровня);
		ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(EANВерхнегоУровня);
	Иначе
		ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(СтруктураКодовМаркировки.EAN);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
		Номенклатура = ДанныеНоменклатуры.Номенклатура;
	Иначе
		Номенклатура = ДанныеНоменклатуры;
	КонецЕсли;
	
	ТекстОшибки = "";
	
	Если Не НайтиПоКодуИдентификации(СтруктураКодовМаркировки.КодИдентификации) = Неопределено Тогда	
		
		ТекстОшибки = НСтр("ru = '" + СтруктураКодовМаркировки.КодИдентификации + ": Код маркировки не был добавлен, поскольку уже присутствует в документе!'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки,,, "ДеревоМаркированнойПродукции");
		
	ИначеЕсли Номенклатура = Неопределено Тогда 
		
		ТекстОшибки = НСтр("ru = '" + СтруктураКодовМаркировки.КодИдентификации + ": Не найден элемент справочника Номенклатура, соответствующий коду маркировки.'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки,,, "ДеревоМаркированнойПродукции");
		
	Иначе
		
		СтруктураКодовМаркировки.Вставить("Номенклатура", Номенклатура);
		ЗавершитьДобавлениеКодаМаркировки(СтруктураКодовМаркировки);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруКодовМаркировки()
	
	СтруктураКодовМаркировки = Новый Структура;
	СтруктураКодовМаркировки.Вставить("КодМаркировки", "");
	СтруктураКодовМаркировки.Вставить("КодИдентификации", "");
	СтруктураКодовМаркировки.Вставить("GTIN", "");
	СтруктураКодовМаркировки.Вставить("КоличествоИсточник", 0);
	СтруктураКодовМаркировки.Вставить("Количество", 0);
	СтруктураКодовМаркировки.Вставить("СтатусСверкиКода", Перечисления.СтатусыСверкиКодаИСМПТК.ПустаяСсылка());
	СтруктураКодовМаркировки.Вставить("ВидУпаковки", Перечисления.ВидыУпаковокИСМПТК.ПустаяСсылка());
	
	Возврат СтруктураКодовМаркировки;
	
КонецФункции

#КонецОбласти

