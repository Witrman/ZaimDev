#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для БСП

// Заполняет настройки, влияющие на использование плана обмена.
// 
// Параметры:
//  Настройки - Структура - настройки плана обмена по умолчанию, см. ОбменДаннымиСервер.НастройкиПланаОбменаПоУмолчанию,
//                          описание возвращаемого значения функции.
//
Процедура ПриПолученииНастроек(НастройкиПланаОбмена) Экспорт
	
	НастройкиПланаОбмена.ИмяКонфигурацииИсточника 										= ИмяКонфигурацииИсточника();
	НастройкиПланаОбмена.ИмяКонфигурацииПриемника.Вставить("УправлениеТорговлейДляКазахстана");
	НастройкиПланаОбмена.ПланОбменаИспользуетсяВМоделиСервиса 							= ПланОбменаИспользуетсяВМоделиСервиса();
	НастройкиПланаОбмена.ПредупреждатьОНесоответствииВерсийПравилОбмена 				= Ложь;
	НастройкиПланаОбмена.Алгоритмы.ПриПолученииВариантовНастроекОбмена 					= Истина;
	НастройкиПланаОбмена.Алгоритмы.ПриПолученииОписанияВариантаНастройки 				= Истина;
	
КонецПроцедуры

// Заполняет коллекцию вариантов настроек, предусмотренных для плана обмена.
// 
// Параметры:
//  ВариантыНастроекОбмена - ТаблицаЗначений - коллекция вариантов настроек обмена, см. описание возвращаемого значения
//                                       функции НастройкиПланаОбменаПоУмолчанию общего модуля ОбменДаннымиСервер.
//  ПараметрыКонтекста     - Структура - см. ОбменДаннымиСервер.ПараметрыКонтекстаПолученияВариантовНастроек,
//                                       описание возвращаемого значения функции.
//
Процедура ПриПолученииВариантовНастроекОбмена(ВариантыНастроекОбмена, ПараметрыКонтекста) Экспорт
	
	ВариантНастройки = ВариантыНастроекОбмена.Добавить();
	ВариантНастройки.ИдентификаторНастройки        = "";
	ВариантНастройки.КорреспондентВМоделиСервиса   = КорреспондентВМоделиСервиса();
	ВариантНастройки.КорреспондентВЛокальномРежиме = Истина;

КонецПроцедуры

// Определяет несколько вариантов настройки расписания выполнения обмена данными;
// Рекомендуется указывать не более 3 вариантов;
// Эти варианты должны быть одинаковым в плане обмена источника и приемника.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  ВариантыНастройки - СписокЗначений - список расписаний обмена данными
//
Функция ВариантыНастройкиРасписания() Экспорт
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	// Расписание №1
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	
	Расписание1 = Новый РасписаниеРегламентногоЗадания;
	Расписание1.ДниНедели                = ДниНедели;
	Расписание1.ПериодПовтораВТечениеДня = 900; // 15 минут
	Расписание1.ПериодПовтораДней        = 1; // каждый день
	Расписание1.Месяцы                   = Месяцы;
	
	// Расписание №2
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание2 = Новый РасписаниеРегламентногоЗадания;
	Расписание2.ВремяНачала              = Дата('00010101080000');
	Расписание2.ВремяКонца               = Дата('00010101200000');
	Расписание2.ПериодПовтораВТечениеДня = 3600; // каждый час
	Расписание2.ПериодПовтораДней        = 1; // каждый день
	Расписание2.ДниНедели                = ДниНедели;
	Расписание2.Месяцы                   = Месяцы;
	
	// Расписание №3
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	
	Расписание3 = Новый РасписаниеРегламентногоЗадания;
	Расписание3.ДниНедели         = ДниНедели;
	Расписание3.ВремяНачала       = Дата('00010101020000');
	Расписание3.ПериодПовтораДней = 1; // каждый день
	Расписание3.Месяцы            = Месяцы;
	
	// возвращаемое значение функции
	ВариантыНастройки = Новый СписокЗначений;
	
	ВариантыНастройки.Добавить(Расписание1, "Один раз в 15 минут, кроме субботы и воскресенья");
	ВариантыНастройки.Добавить(Расписание2, "Каждый час с 8:00 до 20:00, ежедневно");
	ВариантыНастройки.Добавить(Расписание3, "Каждую ночь в 2:00, кроме субботы и воскресенья");
	
	Возврат ВариантыНастройки;
	
КонецФункции

// Определяет версию платформы базы-приемника для создания СОМ-подключения;
// Возможные варианты возвращаемого значения: "V81"; "V82"
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Строка, 3 - версия платформы базы-приемника (V81; V82)
//
Функция ВерсияПлатформыИнформационнойБазы() Экспорт
	
	Возврат "V83";
	
КонецФункции

Функция ПрефиксНастройкиОбменаДанными() Экспорт
	
	Возврат "А";
	
КонецФункции

// Возвращает имя файла настроек по умолчанию;
// В этот файл будут выгружены настройки обмена для приемника;
// Это значение должно быть одинаковым в плане обмена источника и приемника.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Строка, 255 - имя файла по умолчанию для выгрузки настроек обмена данными
//
Функция ИмяФайлаНастроекДляПриемника() Экспорт
	
	Возврат "Настройки обмена для УТ-БК";
	
КонецФункции

// Определяет, будет ли использоваться помощник для создания новых узлов плана обмена.
//
// Возвращаемое значение:
//  Булево - признак использования помощника.
//
Функция ИспользоватьПомощникСозданияОбменаДанными() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает пользовательскую форму для создания начального образа базы.
// Эта форма будет открыта после завершения настройки обмена с помощью помощника.
// Для планов обмена не РИБ функция возвращает пустую строку
//
// Возвращаемое значение:
//  Строка, Неогранич - имя формы
//
// Например:
//	Возврат "ПланОбмена._ДемоРаспределеннаяИнформационнаяБаза.Форма.ФормаСозданияНачальногоОбраза";
//
Функция ИмяФормыСозданияНачальногоОбраза() Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает массив используемых транспортов сообщений для этого плана обмена
//
// 1. Например, если план обмена поддерживает только два транспорта сообщений FILE и FTP,
// то тело функции следует определить следующим образом:
//
//	Результат = Новый Массив;
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
//	Возврат Результат;
//
// 2. Например, если план обмена поддерживает все транспорты сообщений, определенных в конфигурации,
// то тело функции следует определить следующим образом:
//
//	Возврат ОбменДаннымиСервер.ВсеТранспортыСообщенийОбменаКонфигурации();
//
// Возвращаемое значение:
//  Массив - массив содержит значения перечисления ВидыТранспортаСообщенийОбмена
//
Функция ИспользуемыеТранспортыСообщенийОбмена() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.COM);
	Возврат Результат;
	
КонецФункции

// Возвращает версию подсистемы обмена данными
// Для вновь создаваемых планов обмена функция должна
// возвращать значение Перечисления.ВерсииПодсистемыОбменаДанными.Версия30
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ВерсииПодсистемыОбменаДанными
//
Функция ВерсияОбменаДанными() Экспорт
	
	Возврат Перечисления.ВерсииПодсистемыОбменаДанными.Версия30;
	
КонецФункции

Функция ПланОбменаИспользуетсяВМоделиСервиса() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак того, что план обмена поддерживает обмен данными с корреспондентом, работающим в модели сервиса.
// Если признак установлен, то становится возможным создать обмен данными когда эта информационная база
// работает в локальном режиме, а корреспондент в модели сервиса.
//
Функция КорреспондентВМоделиСервиса() Экспорт
	
	Возврат Ложь;
	
КонецФункции

Функция ОбщиеДанныеУзлов() Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает краткую информацию по обмену, выводимую при настройке синхронизации данных.
//
Функция КраткаяИнформацияПоОбмену(ИдентификаторНастройки) Экспорт
	
	ПоясняющийТекст = НСтр("ru = 'Позволяет синхронизировать данные между конфигурациями ""Бухгалтерия для Казахстана"", ред. 3.0, и ""Управление торговлей для Казахстана"", ред. 3
	|Синхронизация данных выполняется в двустороннем режиме на уровне документов и справочной информации.'");
	
	Возврат ПоясняющийТекст;
	
КонецФункции

// Возвращаемое значение: Строка - Ссылка на подробную информацию по настраиваемой синхронизации,
// в виде гиперссылки или полного пути к форме
Функция ПодробнаяИнформацияПоОбмену(ИдентификаторНастройки) Экспорт
	Возврат "ПланОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия30.Форма.ПодробнаяИнформация";
КонецФункции

// Заполняет набор параметров, определяющих вариант настройки обмена.
// 
// Параметры:
//  ОписаниеВарианта       - Структура - набор варианта настройки по умолчанию,
//                                       см. ОбменДаннымиСервер.ОписаниеВариантаНастройкиОбменаПоУмолчанию,
//                                       описание возвращаемого значения.
//  ИдентификаторНастройки - Строка    - идентификатор варианта настройки обмена.
//  ПараметрыКонтекста     - Структура - см. ОбменДаннымиСервер.ПараметрыКонтекстаПолученияОписанияВариантаНастройки,
//                                       описание возвращаемого значения функции.
//
Процедура ПриПолученииОписанияВариантаНастройки(ОписаниеВарианта, ИдентификаторНастройки, ПараметрыКонтекста) Экспорт

	ОписаниеВарианта.ИмяКонфигурацииКорреспондента = "УправлениеТорговлейДляКазахстана";
	ОписаниеВарианта.ИмяФайлаНастроекДляПриемника 					= "Настройки обмена для БК-УТ";
	ОписаниеВарианта.ИспользоватьПомощникСозданияОбменаДанными 		= Истина;
	ОписаниеВарианта.ИспользуемыеТранспортыСообщенийОбмена 			= ИспользуемыеТранспортыСообщенийОбмена();
	ОписаниеВарианта.НаименованиеКонфигурацииКорреспондента 		= НСтр("ru = 'Управление торговлей для Казахстана, ред. 3'");
	ОписаниеВарианта.ЗаголовокКомандыДляСозданияНовогоОбменаДанными = НСтр("ru = 'Управление торговлей для Казахстана, ред. 3'");
	ОписаниеВарианта.КраткаяИнформацияПоОбмену 						= КраткаяИнформацияПоОбмену(ИдентификаторНастройки);
	ОписаниеВарианта.ПодробнаяИнформацияПоОбмену 					= ПодробнаяИнформацияПоОбмену(ИдентификаторНастройки);
	//ОписаниеВарианта.Отборы 										= НастройкаОтборовНаУзле(ИдентификаторНастройки);
	//ОписаниеВарианта.ЗначенияПоУмолчанию 							= ЗначенияПоУмолчаниюНаУзле(ИдентификаторНастройки);
	//ОписаниеВарианта.ОтборыКорреспондента 							= НастройкаОтборовНаУзлеБазыКорреспондента(ИдентификаторНастройки);
	//ОписаниеВарианта.ЗначенияПоУмолчаниюКорреспондента 				= ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(ИдентификаторНастройки);
	ОписаниеВарианта.ОбщиеДанныеУзлов 								= ОбщиеДанныеУзлов();

КонецПроцедуры


Функция ИмяКонфигурацииИсточника() Экспорт
	
	Возврат "Бухгалтерия для Казахстана";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Константы и проверка параметров учета

Функция ПояснениеДляНастройкиПараметровУчета() Экспорт

	Возврат "";

КонецФункции

Функция ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента(ВерсияКорреспондента) Экспорт
	
	Возврат "";
	
КонецФункции

Процедура ОбработчикПроверкиПараметровУчета(Отказ, Получатель, Сообщение) Экспорт
	
	Отбор = Неопределено;
	Отказ = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий

// Обработчик события при подключении к корреспонденту.
// Событие возникает при успешном подключении к корреспонденту и получении версии конфигурации корреспондента
// при настройке обмена с использованием помощника через прямое подключение
// или при подключении к корреспонденту через Интернет.
// В обработчике можно проанализировать версию корреспондента и,
// если настройка обмена не поддерживается с корреспондентом указанной версии, то вызвать исключение.
//
//  Параметры:
// ВерсияКорреспондента (только чтение) – Строка – версия конфигурации корреспондента, например, "2.1.5.1".
//
Процедура ПриПодключенииККорреспонденту(ВерсияКорреспондента) Экспорт
	
	
КонецПроцедуры

// Обработчик события при отправке данных узла-отправителя.
// Событие возникает при отправке данных узла-отправителя из текущей базы в корреспондент,
// до помещения данных узла в сообщения обмена.
// В обработчике можно изменить отправляемые данные или вовсе отказаться от отправки данных узла.
//
//  Параметры:
// Отправитель – ПланОбменаОбъект – узел плана обмена, от имени которого выполняется отправка данных.
// Игнорировать – Булево – признак отказа от выгрузки данных узла.
//                         Если в обработчике установить значение этого параметра в Истина,
//                         то отправка данных узла выполнена не будет. Значение по умолчанию – Ложь.
//
Процедура ПриОтправкеДанныхОтправителя(Отправитель, Игнорировать) Экспорт
	
КонецПроцедуры

// Обработчик события при получении данных узла-отправителя.
// Событие возникает при получении данных узла-отправителя,
// когда данные узла прочитаны из сообщения обмена, но не записаны в информационную базу.
// В обработчике можно изменить полученные данные или вовсе отказаться от получения данных узла.
//
//  Параметры:
// Отправитель – ПланОбменаОбъект – узел плана обмена, от имени которого выполняется получение данных.
// Игнорировать – Булево – признак отказа от получения данных узла.
//                         Если в обработчике установить значение этого параметра в Истина,
//                         то получение данных узла выполнена не будет. Значение по умолчанию – Ложь.
//
Процедура ПриПолученииДанныхОтправителя(Отправитель, Игнорировать) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая настройка дополнения выгрузки

// Предназначена для настройки вариантов интерактивной настройки выгрузки по сценарию узла.
// Для настройки необходимо установить значения свойств параметров в необходимые значения.
//
// Параметры:
//     Получатель - ПланОбменаСсылка - Узел, для которого производится настройка
//     Параметры  - Структура        - Параметры для изменения. Содержит поля:
//
//         ВариантБезДополнения - Структура     - настройки типового варианта "Не добавлять".
//                                                Содержит поля:
//             Использование - Булево - флаг разрешения использования варианта. По умолчанию Истина.
//             Порядок       - Число  - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 1.
//             Заголовок     - Строка - позволяет переопределить название типового варианта.
//             Пояснение     - Строка - позволяет переопределить текст пояснения варианта для пользователя.
//
//         ВариантВсеДокументы - Структура      - настройки типового варианта "Добавить все документы за период".
//                                                Содержит поля:
//             Использование - Булево - флаг разрешения использования варианта. По умолчанию Истина.
//             Порядок       - Число  - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 2.
//             Заголовок     - Строка - позволяет переопределить название типового варианта.
//             Пояснение     - Строка - позволяет переопределить текст пояснения варианта для пользователя.
//
//         ВариантПроизвольныйОтбор - Структура - настройки типового варианта "Добавить данные с произвольным отбором".
//                                                Содержит поля:
//             Использование - Булево - флаг разрешения использования варианта. По умолчанию Истина.
//             Порядок       - Число  - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 3.
//             Заголовок     - Строка - позволяет переопределить название типового варианта.
//             Пояснение     - Строка - позволяет переопределить текст пояснения варианта для пользователя.
//
//         ВариантДополнительно - Структура     - настройки дополнительного варианта по сценарию узла.
//                                                Содержит поля:
//             Использование            - Булево            - флаг разрешения использования варианта. По умолчанию Ложь.
//             Порядок                  - Число             - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 4.
//             Заголовок                - Строка            - название варианта для отображения на форме.
//             ИмяФормыОтбора           - Cтрока            - Имя формы, вызываемой для редактирования настроек.
//             ЗаголовокКомандыФормы    - Cтрока            - Заголовок для отрисовки на форме команды открытия формы настроек.
//             ИспользоватьПериодОтбора - Булево            - флаг того, что необходим общий отбор по периоду. По умолчанию Ложь.
//             ПериодОтбора             - СтандартныйПериод - значение периода общего отбора, предлагаемого по умолчанию.
//
//             Отбор                    - ТаблицаЗначений   - содержит строки с описанием подробных отборов по сценарию узла.
//                                                            Содержит колонки:
//                 ПолноеИмяМетаданных - Строка                - полное имя метаданных регистрируемого объекта, отбор которого описывает строка.
//                                                               Например "Документ._ДемоПоступлениеТоваров". Можно  использовать специальные 
//                                                               значения "ВсеДокументы" и "ВсеСправочники" для отбора соответственно всех 
//                                                               документов и всех справочников, регистрирующихся на узле Получатель.
//                 ВыборПериода        - Булево                - флаг того, что данная строка описывает отбор с общим периодом.
//                 Период              - СтандартныйПериод     - значение периода общего отбора для метаданных строки, предлагаемого по умолчанию.
//                 Отбор               - ОтборКомпоновкиДанных - отбор по умолчанию. Поля отбора формируются в соответствии с общим правилами
//                                                               формирования полей компоновки. Например, для указания отбора по реквизиту
//                                                               документа "Организация", необходимо использовать поле "Ссылка.Организация"
Процедура НастроитьИнтерактивнуюВыгрузку(Получатель, Параметры) Экспорт
	
	Если Получатель.РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать 
		И Получатель.РежимВыгрузкиСправочников = Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать Тогда
		
		Параметры.ВариантВсеДокументы.Использование      = Ложь;
		Параметры.ВариантБезДополнения.Использование     = Ложь;
		Параметры.ВариантПроизвольныйОтбор.Использование = Ложь;
		Параметры.ВариантДополнительно.Использование     = Ложь;
		
	Иначе
		
		//Отключаем вариант "ВариантВсеДокументы"
		
		Параметры.ВариантВсеДокументы.Использование      = Ложь;
		
		//Настраиваем вариант "Без дополнения" 
		Параметры.ВариантБезДополнения.Использование = Истина;
		Параметры.ВариантБезДополнения.Порядок       = 3;
		Параметры.ВариантБезДополнения.Заголовок     = НСтр("ru = 'Не добавлять документы к отправке'") 
			+ Символы.ПС 
			+ "Отправлять только нормативно-справочную информацию, измененную с момента последней отправки.";
		
		//Настраиваем вариант "Произвольный отбор" 
		Параметры.ВариантПроизвольныйОтбор.Использование = Истина;
		Параметры.ВариантПроизвольныйОтбор.Порядок       = 2;
		
		Если Получатель.ПравилаОтправкиДокументов = "НеСинхронизировать" Тогда
			Параметры.ВариантПроизвольныйОтбор.Заголовок = НСтр("ru = 'Добавить справочники'");
		Иначе
			Параметры.ВариантПроизвольныйОтбор.Заголовок = НСтр("ru = 'Добавить произвольные справочники и документы'");
		КонецЕсли;
		
		Если Не Получатель.ПравилаОтправкиДокументов = "НеСинхронизировать" Тогда
			// Вычисляем и устанавливаем параметры сценария
			ПараметрыПоУмолчанию = ПараметрыВыгрузкиПоУмолчанию(Получатель);
			
			// Настраиваем вариант "Дополнительно" по сценарию узла
			Параметры.ВариантДополнительно.Использование            = Истина;
			Параметры.ВариантДополнительно.Порядок                  = 1;
			Параметры.ВариантДополнительно.Заголовок                = НСтр("ru='Отправить все документы'");
			Параметры.ВариантДополнительно.ИмяФормыОтбора           = "ПланОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия30.Форма.НастройкаВыгрузки";
			Параметры.ВариантДополнительно.ЗаголовокКомандыФормы    = НСтр("ru='Выбрать организации для отбора'");
			Параметры.ВариантДополнительно.ИспользоватьПериодОтбора = Истина;
			Параметры.ВариантДополнительно.ПериодОтбора             = ПараметрыПоУмолчанию.Период;
			//Параметры.ВариантДополнительно.ПредставлениеОтбора      = ПараметрыПоУмолчанию.ПредставлениеОтбора;
			
			// Добавляем строка настройки отбора 
			СтрокаОтбора = Параметры.ВариантДополнительно.Отбор.Добавить();
			СтрокаОтбора.ПолноеИмяМетаданных = "ВсеДокументы";
			СтрокаОтбора.ВыборПериода = Истина;
			СтрокаОтбора.Период       = ПараметрыПоУмолчанию.Период;
			СтрокаОтбора.Отбор        = ПараметрыПоУмолчанию.Отбор;
		Иначе
			Параметры.ВариантДополнительно.Использование            = Ложь;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Возвращает представление отбора для варианта дополнения выгрузки по сценарию узла.
// См. описание "ВариантДополнительно" в процедуре "НастроитьИнтерактивнуюВыгрузку"
//
// Параметры:
//     Получатель - ПланОбменаСсылка - Узел, для которого определяется представление отбора
//     Параметры  - Структура        - Характеристики отбора. Содержит поля:
//         ИспользоватьПериодОтбора - Булево            - флаг того, что необходимо использовать общий отбор по периоду.
//         ПериодОтбора             - СтандартныйПериод - значение периода общего отбора.
//         Отбор                    - ТаблицаЗначений   - содержит строки с описанием подробных отборов по сценарию узла.
//                                                        Содержит колонки:
//                 ПолноеИмяМетаданных - Строка                - полное имя метаданных регистрируемого объекта, отбор которого описывает строка.
//                                                               Например "Документ._ДемоПоступлениеТоваров". Могут быть использованы специальные 
//                                                               значения "ВсеДокументы" и "ВсеСправочники" для отбора соответственно всех 
//                                                               документов и всех справочников, регистрирующихся на узле Получатель.
//                 ВыборПериода        - Булево                - флаг того, что данная строка описывает отбор с общим периодом.
//                 Период              - СтандартныйПериод     - значение периода общего отбора для метаданных строки.
//                 Отбор               - ОтборКомпоновкиДанных - поля отбора. Поля отбора формируются в соответствии с общим правилами
//                                                               формирования полей компоновки. Например, для указания отбора по реквизиту
//                                                               документа "Организация", будет использовано поле "Ссылка.Организация"
//
// Возвращаемое значение: 
//     Строка - описание отбора
//
Функция ПредставлениеОтбораИнтерактивнойВыгрузки(Получатель, Параметры) Экспорт
	
	Если Параметры.ИспользоватьПериодОтбора Тогда
		Если ЗначениеЗаполнено(Параметры.ПериодОтбора) Тогда
			ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='за период: %1'"), НРег(Параметры.ПериодОтбора));
		Иначе
			ДатаНачалаВыгрузки = Получатель.ДатаНачалаВыгрузкиДокументов;
			Если ЗначениеЗаполнено(ДатаНачалаВыгрузки) Тогда
				ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='начиная с даты начала отправки документов: %1'"), Формат(ДатаНачалаВыгрузки, "ДЛФ=DD"));
			Иначе
				ОписаниеПериода = НСтр("ru='за весь период учета'");
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОписаниеПериода = "";
	КонецЕсли;
	
	СписокОрганизаций = ОрганизацииОтбораИнтерактивнойВыгрузки(Параметры.Отбор);
	
	Если СписокОрганизаций.Количество()=0 Тогда
		ОписаниеОтбораОрганизации = НСтр("ru='по всем организациям'");
	Иначе
		ОписаниеОтбораОрганизации = "";
		Для Каждого Элемент Из СписокОрганизаций Цикл
			ОписаниеОтбораОрганизации = ОписаниеОтбораОрганизации+ ", " + Элемент.Представление;
		КонецЦикла;
		ОписаниеОтбораОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='с отбором по организациям: %1'"), СокрЛП(Сред(ОписаниеОтбораОрганизации, 2)));
	КонецЕсли;

	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Будут отправлены все документы %1,
		         |%2'"),
		ОписаниеПериода,  ОписаниеОтбораОрганизации
	);
	
КонецФункции

// Расчет параметров выгрузки по умолчанию.
//
// Параметры:
//     Получатель - ПланОбменаСсылка - Узел, для которого производитсят настройка
//
// Возвращаемое значение - Структура - содержит поля:
//     ПредставлениеОтбора - Строка - текстовое описание отбора по умолчанию 
//     Период              - СтандартныйПериод     - значение периода общего отбора по умолчанию
//     Отбор               - ОтборКомпоновкиДанных - отбор
//
Функция ПараметрыВыгрузкиПоУмолчанию(Получатель)
	
	Результат = Новый Структура;
	
	// Период по умолчанию
	Результат.Вставить("Период", Новый СтандартныйПериод);
	Результат.Период.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяц;
	
	// Отбор по умолчанию и его представление
	КомпоновщикОтбора = Новый КомпоновщикНастроекКомпоновкиДанных;
	Результат.Вставить("Отбор", КомпоновщикОтбора.Настройки.Отбор);
	
	// Общее представление, период не включаем, так как в этом сценарии поле периода будет редактироваться отдельно
	Результат.Вставить( "ПредставлениеОтбора", 
	                    СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	                    НСтр("ru='Будут отправлены все документы за %1'"),
	                    НРег(Строка(Результат.Период.Вариант))));
	
	Возврат Результат;
КонецФункции

// Возвращает список организаций по таблице отбора (см "ПредставлениеОтбораИнтерактивнойВыгрузки")
// Также используется из демонстрационной формы "НастройкаВыгрузки" этого плана обмена.
//
// Параметры:
//     ТаблицаОтбора - ТаблицаЗначений   - содержит строки с описанием подробных отборов по сценарию узла. Содержит колонки:
//         ПолноеИмяМетаданных - Строка
//         ВыборПериода        - Булево
//         Период              - СтандартныйПериод
//         Отбор               - ОтборКомпоновкиДанных
//
// Возвращаемое значение:
//     СписокЗначений - значение - ссылка на организацию, представление - наименование
//
Функция ОрганизацииОтбораИнтерактивнойВыгрузки(Знач ТаблицаОтбора) Экспорт
	
	Результат = Новый СписокЗначений;
	
	Если ТаблицаОтбора.Количество()=0 Или ТаблицаОтбора[0].Отбор.Элементы.Количество()=0 Тогда
		// Нет данных отбора
		Возврат Результат;
	КонецЕсли;
		
	// Мы знаем состав отбора, так как помещали туда сами - или из "НастроитьИнтерактивнуюВыгрузку"
	// или как результат редактирования в форме
	
	СтрокаДанных = ТаблицаОтбора[0].Отбор.Элементы[0];
	Отобранные   = СтрокаДанных.ПравоеЗначение;
	ТипКоллекции = ТипЗнч(Отобранные);
	
	Если ТипКоллекции=Тип("СписокЗначений") Тогда
		Для Каждого Элемент Из Отобранные Цикл
			ДобавитьСписокОрганизций(Результат, Элемент.Значение);
		КонецЦикла;
		
	ИначеЕсли ТипКоллекции=Тип("Массив") Тогда
		ДобавитьСписокОрганизций(Результат, Отобранные);
		 
	ИначеЕсли ТипКоллекции=Тип("СправочникСсылка.Организации") Тогда
		Если Результат.НайтиПоЗначению(Отобранные)=Неопределено Тогда
			Результат.Добавить(Отобранные, Отобранные.Наименование);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Добавляет в список органинизаций коллекцию
//
// Параметры:
//     Список      - СписокЗначений - дополняемый список
//     Организации - коллекция организаций
// 
Процедура ДобавитьСписокОрганизций(Список, Знач Организации)
	
	Для Каждого Организация Из Организации Цикл
		
		Если ТипЗнч(Организация)=Тип("Массив") Тогда
			ДобавитьСписокОрганизций(Список, Организация);
			Продолжить;
		КонецЕсли;
		
		Если Список.НайтиПоЗначению(Организация)=Неопределено Тогда
			Список.Добавить(Организация, Организация.Наименование);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Заменяет некорректные названия типов конфигурации-приемника на корректные в регистре сведений "СоответствиеОбъектовИнформационныхБаз"
//
Процедура ВыполнитьКорректировкуРегистраСоответствия() Экспорт
	
	КорректируемыеТипы = Новый Соответствие;
	
	// исправление ошибки прошлой версии правил обмена УТ-БП
	КорректируемыеТипы.Вставить("Ввод остатков", "ДокументСсылка.ВводНачальныхОстатков");
	КорректируемыеТипы.Вставить("Выписка по расчетному счету", "ДокументСсылка.ВыпискаПоРасчетномуСчету");
	КорректируемыеТипы.Вставить("Отчет по комиссии между организациями", "ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями");
	КорректируемыеТипы.Вставить("Передача товаров", "ДокументСсылка.ПередачаТоваровМеждуОрганизациями");
	КорректируемыеТипы.Вставить("Сборка (разборка) товаров", "ДокументСсылка.СборкаТоваров");
	КорректируемыеТипы.Вставить("Требование-накладная", "ДокументСсылка.ТребованиеНакладная");
	КорректируемыеТипы.Вставить("Списание безналичных ДС", "ДокументСсылка.СписаниеБезналичныхДенежныхСредств");
	КорректируемыеТипы.Вставить("Статья расходов", "ПланВидовХарактеристикСсылка.СтатьиРасходов");
	
	// отражение изменения наименования у справочника "Банковские счета получателей"
	КорректируемыеТипы.Вставить("СправочникСсылка.БанковскиеСчетаПолучателей", "СправочникСсылка.БанковскиеСчетаКонтрагентов");
	
	НаборЗаписейДляЗаписиИзменений = РегистрыСведений.СоответствияОбъектовИнформационныхБаз.СоздатьНаборЗаписей();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Изменения.УзелИнформационнойБазы,
	|	Изменения.УникальныйИдентификаторИсточника,
	|	Изменения.УникальныйИдентификаторПриемника,
	|	Изменения.ТипПриемника,
	|	Изменения.ТипИсточника
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовИнформационныхБаз.Изменения КАК Изменения
	|ГДЕ
	|	Изменения.УзелИнформационнойБазы В
	|			(ВЫБРАТЬ
	|				Обмен.Ссылка
	|			ИЗ
	|				ПланОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия30 КАК Обмен
	|			ГДЕ
	|				Обмен.Ссылка <> &ЭтотУзел)
	|	И Изменения.ТипПриемника В(&МассивЗаменяемыхТипов)");
	
	
	МассивТиповДляПоиска = Новый Массив;
	Для Каждого Элемент Из КорректируемыеТипы Цикл
		МассивТиповДляПоиска.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия30.ЭтотУзел());
	Запрос.УстановитьПараметр("МассивЗаменяемыхТипов", МассивТиповДляПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписейДляЗаписиИзменений.Отбор.УзелИнформационнойБазы.Установить(Выборка.УзелИнформационнойБазы);
		НаборЗаписейДляЗаписиИзменений.Отбор.УникальныйИдентификаторИсточника.Установить(Выборка.УникальныйИдентификаторИсточника);
		НаборЗаписейДляЗаписиИзменений.Отбор.УникальныйИдентификаторПриемника.Установить(Выборка.УникальныйИдентификаторПриемника);
		НаборЗаписейДляЗаписиИзменений.Отбор.ТипПриемника.Установить(Выборка.ТипПриемника);
		НаборЗаписейДляЗаписиИзменений.Отбор.ТипИсточника.Установить(Выборка.ТипИсточника);
		
		// удаляем некорректную запись
		ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.УзелИнформационнойБазы, НаборЗаписейДляЗаписиИзменений);
		
		НаборЗаписейДляЗаписиИзменений.Отбор.ТипПриемника.Установить(КорректируемыеТипы.Получить(Выборка.ТипПриемника));
		
		// регистрируем скорректированную запись
		ПланыОбмена.ЗарегистрироватьИзменения(Выборка.УзелИнформационнойБазы, НаборЗаписейДляЗаписиИзменений);
	КонецЦикла;
	
	// корректируем непосредственно регистр
	НаборЗаписейДляПерезаписиРегистра = РегистрыСведений.СоответствияОбъектовИнформационныхБаз.СоздатьНаборЗаписей();
	НаборЗаписейДляПерезаписиРегистра.ОбменДанными.Загрузка = Истина;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствиеОбъектовИнформационныхБаз.УзелИнформационнойБазы,
	|	СоответствиеОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника,
	|	СоответствиеОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника,
	|	СоответствиеОбъектовИнформационныхБаз.ТипПриемника,
	|	СоответствиеОбъектовИнформационныхБаз.ТипИсточника,
	|	СоответствиеОбъектовИнформационныхБаз.УникальныйИдентификаторИсточникаСтрокой,
	|	СоответствиеОбъектовИнформационныхБаз.ОбъектВыгруженПоСсылке
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствиеОбъектовИнформационныхБаз
	|ГДЕ
	|	СоответствиеОбъектовИнформационныхБаз.УзелИнформационнойБазы В
	|			(ВЫБРАТЬ
	|				Обмен.Ссылка
	|			ИЗ
	|				ПланОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия30 КАК Обмен
	|			ГДЕ
	|				Обмен.Ссылка <> &ЭтотУзел)
	|	И СоответствиеОбъектовИнформационныхБаз.ТипПриемника В(&МассивЗаменяемыхТипов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// получаем и записываем новый набор
		НаборЗаписейДляПерезаписиРегистра.Отбор.УзелИнформационнойБазы.Установить(Выборка.УзелИнформационнойБазы);
		НаборЗаписейДляПерезаписиРегистра.Отбор.УникальныйИдентификаторИсточника.Установить(Выборка.УникальныйИдентификаторИсточника);
		НаборЗаписейДляПерезаписиРегистра.Отбор.УникальныйИдентификаторПриемника.Установить(Выборка.УникальныйИдентификаторПриемника);
		НаборЗаписейДляПерезаписиРегистра.Отбор.ТипПриемника.Установить(Выборка.ТипПриемника);
		НаборЗаписейДляПерезаписиРегистра.Отбор.ТипИсточника.Установить(Выборка.ТипИсточника);
		
		НаборЗаписейДляПерезаписиРегистра.Прочитать();
		Для Каждого Запись Из НаборЗаписейДляПерезаписиРегистра Цикл
			Запись.ТипПриемника = КорректируемыеТипы.Получить(Выборка.ТипПриемника);
		КонецЦикла;
		НаборЗаписейДляПерезаписиРегистра.Отбор.ТипПриемника.Установить(КорректируемыеТипы.Получить(Выборка.ТипПриемника));
		НаборЗаписейДляПерезаписиРегистра.Записать();
		
		// очищаем старый набор
		НаборЗаписейДляПерезаписиРегистра.Отбор.ТипПриемника.Установить(Выборка.ТипПриемника);
		НаборЗаписейДляПерезаписиРегистра.Очистить();
		НаборЗаписейДляПерезаписиРегистра.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

//Проверяет возможность выполнения автообмена
Функция ПараметрыЗапускаСинхронизацииДанных(УзелИнформационнойБазы) Экспорт
	
	//руктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УзелИнформационнойБазы, "ПравилаОтправкиДокументов, ПравилаОтправкиСправочников");

	ПараметрыЗапуска = Новый Структура("ТипЗапуска, ДополнительныеПараметрыЗапуска");
	
	Если УзелИнформационнойБазы.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация"
		Или (УзелИнформационнойБазы.ПравилаОтправкиДокументов = "НеСинхронизировать" 
		И УзелИнформационнойБазы.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация") Тогда
		
		ПараметрыЗапуска.ТипЗапуска = "Автообмен";
		ПараметрыЗапуска.ДополнительныеПараметрыЗапуска = "";
		
	Иначе
		Если УзелИнформационнойБазы.ПравилаОтправкиДокументов = "ИнтерактивнаяСинхронизация" Тогда
			ПараметрыЗапуска.ДополнительныеПараметрыЗапуска = "ИнтерактивнаяСинхронизацияДокументов";
		ИначеЕсли УзелИнформационнойБазы.ПравилаОтправкиДокументов = "НеСинхронизировать"
			И УзелИнформационнойБазы.ПравилаОтправкиСправочников = "НеСинхронизировать" Тогда
			ПараметрыЗапуска.ДополнительныеПараметрыЗапуска = "НеОтправлять";
		ИначеЕсли УзелИнформационнойБазы.ПравилаОтправкиДокументов = "НеСинхронизировать"
			И УзелИнформационнойБазы.ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости" Тогда
			ПараметрыЗапуска.ДополнительныеПараметрыЗапуска = "ИнтерактивнаяСинхронизацияСправочников";
		КонецЕсли;
		ПараметрыЗапуска.ТипЗапуска = "ИнтерактивноеСопостовление";
	КонецЕсли;

	Возврат ПараметрыЗапуска;
	
КонецФункции

// Инициализирует у всех узлов правила отправки справочников и документов
Процедура ИнициализироватьПравилаОтправкиСправочниковИДокументов() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ОбменУправлениеТорговлейБухгалтерияПредприятия30.Ссылка
		|ИЗ
		|	ПланОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия30 КАК ОбменУправлениеТорговлейБухгалтерияПредприятия30
		|ГДЕ
		|	(ОбменУправлениеТорговлейБухгалтерияПредприятия30.ПравилаОтправкиДокументов = &ПустаяСтрока
		|			ИЛИ ОбменУправлениеТорговлейБухгалтерияПредприятия30.ПравилаОтправкиСправочников = &ПустаяСтрока
		|			ИЛИ ОбменУправлениеТорговлейБухгалтерияПредприятия30.РежимВыгрузкиСправочников = Значение(Перечисление.РежимыВыгрузкиОбъектовОбмена.ПустаяСсылка))
		|	И ОбменУправлениеТорговлейБухгалтерияПредприятия30.ПометкаУдаления = ЛОЖЬ");
		
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		УзелПланаОбменаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Не ЗначениеЗаполнено(УзелПланаОбменаОбъект.ПравилаОтправкиСправочников) Тогда
			УзелПланаОбменаОбъект.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(УзелПланаОбменаОбъект.ПравилаОтправкиДокументов) Тогда
			УзелПланаОбменаОбъект.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация";
		КонецЕсли;

		Если Не ЗначениеЗаполнено(УзелПланаОбменаОбъект.РежимВыгрузкиСправочников) Тогда
			УзелПланаОбменаОбъект.РежимВыгрузкиСправочников = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
		КонецЕсли;
		
		УзелПланаОбменаОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьРежимВыгрузкиСправочниковИДокументов() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ОбменУправлениеТорговлейБухгалтерияПредприятия30.Ссылка
		|ИЗ
		|	ПланОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия30 КАК ОбменУправлениеТорговлейБухгалтерияПредприятия30
		|ГДЕ
		|	ОбменУправлениеТорговлейБухгалтерияПредприятия30.РежимВыгрузкиДокументов = Значение(Перечисление.РежимыВыгрузкиОбъектовОбмена.ПустаяСсылка)
		|	И ОбменУправлениеТорговлейБухгалтерияПредприятия30.ПометкаУдаления = ЛОЖЬ");
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

		УзелПланаОбменаОбъект = Выборка.Ссылка.ПолучитьОбъект();

		Если УзелПланаОбменаОбъект.ПравилаОтправкиСправочников = "НеСинхронизировать" Тогда
			УзелПланаОбменаОбъект.ИспользоватьОтборПоОрганизациям = Ложь;
			УзелПланаОбменаОбъект.РежимВыгрузкиСправочников       = Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать;
		ИначеЕсли УзелПланаОбменаОбъект.ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости" Тогда
			УзелПланаОбменаОбъект.РежимВыгрузкиСправочников       = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости;
		Иначе
			УзелПланаОбменаОбъект.РежимВыгрузкиСправочников       = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
		КонецЕсли;
		
		Если УзелПланаОбменаОбъект.ПравилаОтправкиДокументов = "НеСинхронизировать" Тогда
			УзелПланаОбменаОбъект.РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать;
		ИначеЕсли УзелПланаОбменаОбъект.ПравилаОтправкиДокументов = "ИнтерактивнаяСинхронизация" Тогда
			УзелПланаОбменаОбъект.РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную;
		Иначе
			УзелПланаОбменаОбъект.РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
		КонецЕсли;
		
		УзелПланаОбменаОбъект.Записать();

	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает сокращенное строковое представление коллекции значений
// 
// Параметры:
//  Коллекция 						- массив или список значений.
//  МаксимальноеКоличествоЭлементов - число, максимальное количество элементов включаемое в представление.
//
// Возвращаемое значение:
//  Строка.
//
Функция СокращенноеПредставлениеКоллекцииЗначений(Коллекция, МаксимальноеКоличествоЭлементов = 2)
	
	СтрокаПредставления = "";
	
	КоличествоЗначений			 = Коллекция.Количество();
	КоличествоВыводимыхЭлементов = Мин(КоличествоЗначений, МаксимальноеКоличествоЭлементов);
	
	Если КоличествоВыводимыхЭлементов = 0 Тогда
		
		Возврат "";
		
	Иначе
		
		Для НомерЗначения = 1 По КоличествоВыводимыхЭлементов Цикл
			
			СтрокаПредставления = СтрокаПредставления + Коллекция.Получить(НомерЗначения - 1) + ", ";	
			
		КонецЦикла;
		
		СтрокаПредставления = Лев(СтрокаПредставления, СтрДлина(СтрокаПредставления) - 2);
		Если КоличествоЗначений > КоличествоВыводимыхЭлементов Тогда
			СтрокаПредставления = СтрокаПредставления + ", ... ";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПредставления;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Добавление функций и процедур функционала БСП

//Возвращает режим запуска, в случае интерактивного инициирования синхронизации
//Возвращаемые значения АвтоматическаяСинхронизация Или ИнтерактивнаяСинхронизация
//На основании этих значений запускается либо помощник интерактивного обмена, либо автообмен
Функция РежимЗапускаСинхронизацииДанных(УзелИнформационнойБазы) Экспорт
	//Пример типового возврата
	//Возврат "";

	Если УзелИнформационнойБазы.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация"
		Или (УзелИнформационнойБазы.ПравилаОтправкиДокументов = "НеСинхронизировать" 
		И УзелИнформационнойБазы.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация") Тогда
		
		Возврат "АвтоматическаяСинхронизация";
		
	Иначе
		
		Возврат "ИнтерактивнаяСинхронизация";
		
	КонецЕсли;
	
КонецФункции

//Возвращает сценарий работы помощника интерактивного сопостовления
//НеОтправлять, ИнтерактивнаяСинхронизацияДокументов, ИнтерактивнаяСинхронизацияСправочников либо пустую строку
Функция ИнициализироватьСценарийРаботыПомощникаИнтерактивногоОбмена(УзелИнформационнойБазы) Экспорт
	//Пример типового возврата
	//Возврат "";
	
	Если УзелИнформационнойБазы.ПравилаОтправкиДокументов = "ИнтерактивнаяСинхронизация" Тогда
		
		Возврат "ИнтерактивнаяСинхронизацияДокументов";
		
	ИначеЕсли УзелИнформационнойБазы.ПравилаОтправкиДокументов = "НеСинхронизировать"
		И УзелИнформационнойБазы.ПравилаОтправкиСправочников = "НеСинхронизировать" Тогда
		
		Возврат "НеОтправлять";
		
	ИначеЕсли УзелИнформационнойБазы.ПравилаОтправкиДокументов = "НеСинхронизировать"
		И УзелИнформационнойБазы.ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости" Тогда
		
		Возврат "ИнтерактивнаяСинхронизацияСправочников";
		
	КонецЕсли;
	
КонецФункции

//Возвращает значения ограничений объектов узла плана обмена для интерактивной регистрации к обмену
//Структура: ВсеДокументы, ВсеСправочники, ДетальныйОтбор
//Детальный отбор либо неопределено, либо массив объектов метаданных входящих в состав узла (Указывается полное имя метаданных)
Функция ДобавитьГруппыОграничений(УзелИнформационнойБазы) Экспорт
	//Пример типового возврата
	//Возврат Новый Структура("ВсеДокументы, ВсеСправочники, ДетальныйОтбор", Ложь, Ложь, Неопределено);
	
	СтруктураОграничений = Новый Структура;
	СтруктураОграничений.Вставить("ДетальныйОтбор", Неопределено);
	
	Если УзелИнформационнойБазы.ПравилаОтправкиДокументов = "ИнтерактивнаяСинхронизация" 
		Или УзелИнформационнойБазы.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация" Тогда
		СтруктураОграничений.Вставить("ВсеДокументы", Ложь);
	Иначе
		СтруктураОграничений.Вставить("ВсеДокументы", Истина);
	КонецЕсли;
		
	Если УзелИнформационнойБазы.ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости" 
		Или УзелИнформационнойБазы.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация" Тогда
		СтруктураОграничений.Вставить("ВсеСправочники", Ложь);
	Иначе
		СтруктураОграничений.Вставить("ВсеСправочники", Истина);
	КонецЕсли;
	
	Возврат СтруктураОграничений;
	
КонецФункции

#КонецЕсли