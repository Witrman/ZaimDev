
#Область ПроверкаШтрихкодаGS1

//Используется в розничном выбытии для проверки полученного ШК на принадлежность к кодам маркировки
//
Функция ЭтоКодМаркировки(ТипИдентификатораТовара) Экспорт
	
	ТипыШтрихкодовМарок = Новый СписокЗначений;
	ТипыШтрихкодовМарок.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовШКТовараИСМПТК.КодТовараВФорматеDataMatrixGS1"));
	
	Возврат НЕ ТипыШтрихкодовМарок.НайтиПоЗначению(ТипИдентификатораТовара) = Неопределено;
	
КонецФункции

// Выполняет обработку штрихкода стандартными средствами прикладного объекта.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма.
//  ДанныеШтрихкода - Описание:
// * Штрихкод - Строка - Значение штрихкода.
// * Количество - Число - количество штрихкодов с одним значением.
Процедура ОбработатьШтрихкодКакНемаркируемуюПродукцию(Форма, ДанныеШтрихкода, ОткрытиеПослеДобавления = Ложь) Экспорт
	
	РезультатОбработкиШтрихкода = Новый Структура;
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяОбработкаШтрихкода", Истина);
	РезультатОбработкиШтрихкода.Вставить("ИсходныеДанные", ДанныеШтрихкода);
	РезультатОбработкиШтрихкода.Вставить("ОткрытиеПослеДобавления", ОткрытиеПослеДобавления);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавлениеКМКакНемаркированногоТовараИСМПТК", Форма);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатОбработкиШтрихкода);
	
КонецПроцедуры

Процедура ОбработатьШтрихкодКакМаркируемуюПродукциюИСМПТК(Форма, ДанныеШтрихкода, КлючСвязиСтроки = Неопределено, ОткрытиеПослеДобавления = Ложь) Экспорт
	
	РезультатОбработкиШтрихкода = Новый Структура;
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяОбработкаШтрихкода", Истина);
	РезультатОбработкиШтрихкода.Вставить("ИсходныеДанные", 				ДанныеШтрихкода);
	Если Не КлючСвязиСтроки = Неопределено Тогда
		РезультатОбработкиШтрихкода.Вставить("КлючСвязиСтроки", 		КлючСвязиСтроки);
	КонецЕсли;
	РезультатОбработкиШтрихкода.Вставить("ОткрытиеПослеДобавления", 	ОткрытиеПослеДобавления);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводКодаМаркировкиПослеПредупрежденияИСМПТК", Форма);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатОбработкиШтрихкода);
	
КонецПроцедуры

//В общем случае работа с КМ происходит в нормализованном формате, т.е. в преобразованном виде без спецсимволов GS29,
//однако в некоторых механизмах используется полный КМ. 
//Полный КМ передается в формате закодированной  строки Base64, чтобы не возникало проблем при передаче спецсимволов с клиента на сервер.
//Есть функции и процедуры, использующиеся в разных местах и принимающие входные параметры c КМ как в полном виде, так и в закодированной строке Base64
//в зависимости от места вызова.
//Поэтому важно четко определять - КМ уже закодирован или требуется кодировка, чтобы не возникало двойного преобразования.
//В типовых механизмах используется проверка типа "Если Base64Значение(СтрокаДляПроверки) = Неопределено Тогда *преобразование в Base64".
//Однако на практике выяснили, что некоторые потребительские КМ табачной продукции в полном виде в этой конструкции могут возвращать двоичные данные,
//как будто строка закодирована в Base64, хотя это не так. В результате преобразование не происходит и в дальнейшем возникают ошибочные ситуации.
//Пример такого кода: 00000046199928fZ?vCTNSVVsWCt4
//В качестве возможного и относительно простого способа проверки на формат используем двойное преобразование строки.
//
Функция ЭтоСтрокаФорматаBase64(Штрихкод) Экспорт
	
	КонтрольныйШтрихкод = Штрихкод;
	//По умолчанию считаем, что Штрихкод это строка формата Base64. Преобразуем в двоичные данные.
	СтрокаДвоичныеДанные = Base64Значение(Штрихкод);
	Если СтрокаДвоичныеДанные = Неопределено Тогда
		//Сразу можно сказать, что штрихкод не в формате Base64
		Возврат Ложь;
	КонецЕсли;
	//Кодируем обратно
	ШтрихкодДляПроверки = Base64Строка(СтрокаДвоичныеДанные);
	ШтрихкодДляПроверки = СтрЗаменить(ШтрихкодДляПроверки, Символы.ПС, "");
	ШтрихкодДляПроверки = СтрЗаменить(ШтрихкодДляПроверки, Символы.ВК, "");
		
	Если ШтрихкодДляПроверки = КонтрольныйШтрихкод Тогда 
		//Значит исходный штрихкод это корректная строка формата Base64
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ФормаПроверкиКМ

Процедура ВыполнитьПереопределяемуюКомандуРМК(Форма) Экспорт
	
	ТребуетсяВопрос = Ложь;
	ПараметрыОткрытияФормыПроверки = ПараметрыОткрытияФормыПроверкиКМ(Форма);
	
	Если НЕ ПустаяСтрока(ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект) Тогда
		Объект = Форма[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект];

		Если НЕ ПараметрыОткрытияФормыПроверки.ПроверятьМодифицированность Тогда
		ИначеЕсли Объект.Ссылка.Пустая() Тогда
			ТребуетсяВопрос = Истина;
			ТекстВопроса    = НСтр("ru = 'Сканирование маркируемой продукции возможно только в записанном документе. Записать?'");
		ИначеЕсли Форма.Модифицированность Тогда
			ТребуетсяВопрос  = Истина;
			ПровестиЗаписать = ?(Объект.Проведен, НСтр("ru = 'Провести'"), НСтр("ru = 'Записать'"));
			ТекстВопроса     = СтрШаблон(НСтр("ru = 'Документ был изменен. %1?'"), ПровестиЗаписать);
		КонецЕсли;
	КонецЕсли;
	
	Если ТребуетсяВопрос Тогда
		
		ПараметрыВопроса = Новый Структура();
		ПараметрыВопроса.Вставить("Форма", Форма);
		ПараметрыВопроса.Вставить("ПараметрыОткрытияФормыПроверки", ПараметрыОткрытияФормыПроверки);
				
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуПроверкиКМПриОтветеНаВопрос", ЭтотОбъект, ПараметрыВопроса);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОткрытьФормуПроверкиКМ(Форма, ПараметрыОткрытияФормыПроверки);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыОткрытияФормыПроверкиКМ(Форма) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИмяРеквизитаФормыОбъект",       "Объект");
	ПараметрыОткрытия.Вставить("ИмяРеквизитаОрганизация",       "Организация");
	ПараметрыОткрытия.Вставить("РедактированиеФормыНедоступно", Ложь);
	ПараметрыОткрытия.Вставить("ПроверятьМодифицированность",   Истина);
		
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("Форма", Форма);
	
	ОповещениеПриЗакрытии = Новый ОписаниеОповещения("ПриЗакрытииФормыПроверкиКМ", ЭтотОбъект, ПараметрыЗакрытия);
	ПараметрыОткрытия.Вставить("ОписаниеОповещенияПриЗакрытии", ОповещениеПриЗакрытии);
	
	ПриУстановкеПараметровОткрытияФормыПроверкиКМ(Форма, ПараметрыОткрытия);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

Процедура ПриЗакрытииФормыПроверкиКМ(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РозничноеВыбытиеИСМПТККлиентПереопределяемый.ПриЗакрытииФормыПроверкиКМ(РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПриУстановкеПараметровОткрытияФормыПроверкиКМ(Форма, ПараметрыОткрытия)
	
	РозничноеВыбытиеИСМПТККлиентПереопределяемый.ПриУстановкеПараметровОткрытияФормыПроверкиКМ(Форма, ПараметрыОткрытия);
	
КонецПроцедуры

Процедура ОткрытьФормуПроверкиКМПриОтветеНаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ПараметрыОткрытияФормыПроверки = ДополнительныеПараметры.ПараметрыОткрытияФормыПроверки;
	
	Объект = Форма[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект];
	
	СтандартнаяОбработка = Ложь;
	ДействиеПослеЗаписи = Новый ОписаниеОповещения("ОткрытьФормуПроверкиКМПослеЗаписиОбъекта", ЭтотОбъект, ДополнительныеПараметры);
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентПереопределяемый.ВыполнитьЗаписьОбъектаВФорме(Форма, Объект, ДействиеПослеЗаписи, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗаписи = Ложь;
	Если Объект.Проведен Тогда
		Если Форма.ПроверитьЗаполнение() Тогда
			РезультатЗаписи = Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		КонецЕсли;
	Иначе
		РезультатЗаписи = Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДействиеПослеЗаписи, РезультатЗаписи);
	
КонецПроцедуры

Процедура ОткрытьФормуПроверкиКМПослеЗаписиОбъекта(РезультатЗаписи, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатЗаписи Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ПараметрыОткрытияФормыПроверки = ДополнительныеПараметры.ПараметрыОткрытияФормыПроверки;
	ОткрытьФормуПроверкиКМ(Форма, ПараметрыОткрытияФормыПроверки);
	
КонецПроцедуры

Процедура ОткрытьФормуПроверкиКМ(Форма, Знач ПараметрыОткрытияФормыПроверки) Экспорт

	//Открытие из формы РМК
	ОчиститьСообщения();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РедактированиеФормыНедоступно", ПараметрыОткрытияФормыПроверки.РедактированиеФормыНедоступно);
	ПараметрыФормы.Вставить("СписокКМ",   Форма.Объект.КодыМаркировкиИСМПТК);
	ПараметрыФормы.Вставить("ТоварыЧека", Форма.Объект.Товары);   	
	ПараметрыФормы.Вставить("ВызовИзФормыСпискаЧеков", Ложь);
	
	Если ПустаяСтрока(ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект) Тогда
		ПараметрыФормы.Вставить("Организация", Форма[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаОрганизация]);
	Иначе
		Объект = Форма[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект];
		ПараметрыФормы.Вставить("Организация", Объект[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаОрганизация]);
	КонецЕсли;
	
	ОбъединятьПозицииСОдинаковымТоваром = РозничноеВыбытиеИСМПТККлиентПереопределяемый.ПолучитьНастройкуОбъединенияСтрокВЧеке(Форма);
	ПараметрыФормы.Вставить("ОбъединятьСтрокиСОдинаковымиТоварами", ОбъединятьПозицииСОдинаковымТоваром);
	
	//Дополнительный параметр, присуствующий только при вызове из формы ЧекККМВозврат
	ПараметрыФормы.Вставить("ДанныеВозвращаемогоКода", Неопределено);
	
	ИмяФормыПроверкиКМ = "Обработка.РозничноеВыбытиеМаркированнойПродукцииИСМПТК.Форма.ПроверкаКМ";
	ОткрытьФорму(ИмяФормыПроверкиКМ, ПараметрыФормы, Форма, Форма.УникальныйИдентификатор, , , ПараметрыОткрытияФормыПроверки.ОписаниеОповещенияПриЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование

//Вызывается из обработки события сканера штрихкода в ЧекеККМ и РМК:
//Процедура ВнешнееСобытие() - Розница для Казахстана;
//Процедура ОбработкаОповещения() - все прочие решения.
//
Процедура ОбработкаВнешнегоСобытия(Форма, ДанныеСоСканераСтруктура, ФормаИсточникСтрока) Экспорт
	
	//Шаг 1.Проверяем, отсканировали Код маркировки (DataMatrix) или обычный штрихкод (EAN)
	Если ТипЗнч(ДанныеСоСканераСтруктура) = Тип("Структура") Тогда
		//Данные со сканера в конфигурации Розница
		Штрихкод = ДанныеСоСканераСтруктура.Штрихкод;
	ИначеЕсли ТипЗнч(ДанныеСоСканераСтруктура) = Тип("Массив") Тогда
		//В конфигурации ЕРП, УТ
		Штрихкод = ДанныеСоСканераСтруктура[0].Штрихкод;
	КонецЕсли;	
	
	ИсходныйШтрихкод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(Штрихкод);
	ДанныеМаркировки = РозничноеВыбытиеИСМПТКВызовСервера.РазобратьШтриховойКодТовара(ИсходныйШтрихкод, Истина);
	
	ИмяТиповойПроцедурыОбработатьШтрихкод = РозничноеВыбытиеИСМПТККлиентПереопределяемый.ИмяТиповойПроцедурыОбработкиШтрихкода();
	
	Если Не ДанныеМаркировки.Разобран Тогда
		//Это не код маркировки и не ЕАН, но это может быть произвольный зарегистрированный штрихкод номенклатуры. 
		//В этом случае потребуется выполнить типовую обработку.
		Выполнить("Форма." + ИмяТиповойПроцедурыОбработатьШтрихкод + "(ДанныеСоСканераСтруктура)");	
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеМаркировки.ОписаниеОшибки) Тогда
		
		ТекстСообщения = НСтр("ru = 'При разборе данных произошла ошибка: '") + ДанныеМаркировки.ОписаниеОшибки;
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		//Т.к. в этом случае скорее всего штрихкод - код макрировки не учитываемой ТГ, нужно преобразовать штрихкод, чтобы в нем не было спецсимволов
		Если ТипЗнч(ДанныеСоСканераСтруктура) = Тип("Структура") Тогда
			//Данные со сканера в конфигурации Розница
			ДанныеСоСканераСтруктура.Штрихкод = ДанныеМаркировки.EAN;
		ИначеЕсли ТипЗнч(ДанныеСоСканераСтруктура) = Тип("Массив") Тогда
			//В конфигурации ЕРП, УТ
			ДанныеСоСканераСтруктура[0].Штрихкод = ДанныеМаркировки.EAN;
		КонецЕсли;
		
		//В типовой механизм отправляем только в случае, если смогли разобрать ЕАН.
		Если ЗначениеЗаполнено(ДанныеМаркировки.EAN) Тогда 
			Выполнить("Форма." + ИмяТиповойПроцедурыОбработатьШтрихкод + "(ДанныеСоСканераСтруктура)");
		Иначе
			Возврат;
		КонецЕсли;	
		
	Иначе
		
		ЭтоКодМарки	 	  = ЭтоКодМаркировки(ДанныеМаркировки.ТипИдентификатораТовара);
		НормализованныйКМ = РозничноеВыбытиеИСМПТКВызовСервера.НормализованныйШтрихкод(ДанныеМаркировки.ШтрихкодBase64);
		
		//Шаг 2.Проверяем, зарегистрирован ли полученный при разборе данных со сканера EAN в регистре
		ЭтоЗарегистрированныйШК  = Ложь;
		ДанныеНоменклатуры 		 = ПолучитьНоменклатуруПоШтрихкодуВРозничномКонтуре(ДанныеМаркировки.EAN);
			
		Если Не ДанныеНоменклатуры = Неопределено 
			ИЛИ (ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") И Не ДанныеНоменклатуры.Номенклатура = Неопределено) Тогда //Какие-то данные номенклатуры найдены, т.е. ЕАН зарегистрирован в базе
			
			//Шаг 3.Если ШК зарегистрирован, проверяем особенности учета его номенклатуры
			ЭтоЗарегистрированныйШК = Истина;
			Номенклатура      	 = ДанныеНоменклатуры.Номенклатура; 
			Характеристика    	 = ДанныеНоменклатуры.Характеристика;
			Упаковка  		  	 = ДанныеНоменклатуры.Упаковка;
			БазоваяЕИ			 = ДанныеНоменклатуры.БазоваяЕдиницаИзмерения;
			ИспользуютсяУпаковки = ДанныеНоменклатуры.ИспользуютсяУпаковки;
			ВидПродукцииШК    	 = ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
			
			Если Не ЭтоКодМарки Тогда
				
				Если Не ЗначениеЗаполнено(ВидПродукцииШК) Тогда 
					//Это не код маркировки и зарегистрированная номенклатура без особенностей учета - выполняем стандартную обработку штрихкода 
					Выполнить("Форма." + ИмяТиповойПроцедурыОбработатьШтрихкод + "(ДанныеСоСканераСтруктура)");
				Иначе 
					//Это не код маркировки, но зарегистрированная номенклатура с особенностями учета - требуется открыть форму запроса данных КМ, 
					//но только если ведется учет по этой ТГ
					УчетТГВключен = РозничноеВыбытиеИСМПТКВызовСервера.ПроверитьВключениеУчетаТГ(ВидПродукцииШК);
					Если УчетТГВключен Тогда
						ДанныеНоменклатурыКода = Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения", Номенклатура, Характеристика, ?(ИспользуютсяУпаковки, Упаковка, РозничноеВыбытиеИСМПТККлиентПереопределяемый.ПолучитьПустуюСсылкуУпаковка()));
						Форма.ДобавлениеМПБезКодаМаркировкиПредупреждение(ВидПродукцииШК, ДанныеМаркировки, ДанныеНоменклатурыКода);
					Иначе
						//Добавляем товар стандартно
						Выполнить("Форма." + ИмяТиповойПроцедурыОбработатьШтрихкод + "(ДанныеСоСканераСтруктура)");
					КонецЕсли;
				КонецЕсли;
					
			Иначе
				
				//В Конфигурациях, поддерживающих регистрацию неуникальных штрихкодов в ДанныеНоменклатуры возвращается пустая структура.
				//В этом случае требуется сначала отработать типовой механизм уточнения номенклатуры.
				Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
					
					//Проверяем наличие КМ в документе
					МожноПродолжитьОбработкуКМ = Форма.ПроверитьТЧКодыМаркировкиНаНаличиеКМ(НормализованныйКМ);
					Если МожноПродолжитьОбработкуКМ Тогда
						СведенияОКодеМаркировки = Новый Структура();
						СведенияОКодеМаркировки.Вставить("ДанныеМаркировки",   ДанныеМаркировки);
						СведенияОКодеМаркировки.Вставить("ДанныеНоменклатуры", ДанныеНоменклатуры);
						Форма.ОбработатьКодМаркировкиИСМПТК(ДанныеСоСканераСтруктура, СведенияОКодеМаркировки);
					Иначе
						ТекстСообщения = НСтр("ru = 'Невозможно добавить код маркировки: он уже присутствует в документе.'"); 
						Форма.ВывестиСообщениеОбОшибке(ТекстСообщения);
					КонецЕсли;
					
				Иначе
				
					Если Не ЗначениеЗаполнено(ВидПродукцииШК) Тогда
					
						//Это код маркировки, но номенклатура, связанная с ним, не имеет особенностей учета - добавляем товар без учета КМ 
						//и оповещаем пользователя о проблемной ситуации.
						ТекстСообщения = НСтр("ru = 'Внимание: код маркировки относится к номенклатуре %1, которая не имеет особенностей учета. Добавить код маркировки невозможно.'")
											   + Символы.ПС 
											   + НСтр("ru = 'Товар добавлен без учета кода маркировки.'"); 
						ТекстСообщения = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Номенклатура);
						РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
						
						//Добавляем позицию стандартным механизмом без учета КМ, однако сначала нужно подменить значение кода маркировки в структуре данных со сканера
						//на обычный штрихкод товара.
						ДанныеСоСканераСтруктура[0].Штрихкод = ДанныеМаркировки.EAN;
						Выполнить("Форма." + ИмяТиповойПроцедурыОбработатьШтрихкод + "(ДанныеСоСканераСтруктура)");
											
					Иначе
					
						//Это код маркировки и номенклатура с особенностями учета - выполняем дополнительную проверку: включен ли учет этой ТГ
						УчетТГНоменклатурыВключен = РозничноеВыбытиеИСМПТКВызовСервера.ПроверитьАктивностьОпцииУчетаПоТГноменклатуры(ВидПродукцииШК);
							Если Не УчетТГНоменклатурыВключен Тогда
							
							//В этом случае не можем работать с маркировкой, товар воспринимаем как ном-ру без особенностей учета и обрабатываем ее ввод стандартным механизмом
							ТекстСообщения = НСтр("ru = 'Внимание: номенклатура %1 имеет особенности учета по маркировке, но учет ТГ %2 в розничном контуре не включен.'")
												  + Символы.ПС 
												  + НСтр("ru = 'Товар добавлен без учета кода маркировки.'"); 
							ТекстСообщения = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Номенклатура, ВидПродукцииШК);			   
							РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
							
							//Добавляем позицию стандартным механизмом без учета КМ, однако сначала нужно подменить значение кода маркировки в структуре данных со сканера
							//на обычный штрихкод товара.
							ДанныеСоСканераСтруктура[0].Штрихкод = ДанныеМаркировки.EAN;
							Выполнить("Форма." + ИмяТиповойПроцедурыОбработатьШтрихкод + "(ДанныеСоСканераСтруктура)");
						
						Иначе
							
							//Учет маркировки этой ТГ включен, отсканирован КМ и номенклатура настроена корректно - можно выполнять добавление товара и КМ по новому механизму работы с маркировкой.
							//Но сначала проверим, что ранее в этом чеке такой КМ не сканировался (повторно добавлять нельзя).
							МожноПродолжитьОбработкуКМ = Форма.ПроверитьТЧКодыМаркировкиНаНаличиеКМ(НормализованныйКМ);
							Если Не МожноПродолжитьОбработкуКМ Тогда
								
								ТекстСообщения = НСтр("ru = 'Невозможно добавить код маркировки: он уже присутствует в документе.'"); 
								Форма.ВывестиСообщениеОбОшибке(ТекстСообщения);	
								Возврат;
								
							Иначе
								
								СведенияОКодеМаркировки = Новый Структура();
								СведенияОКодеМаркировки.Вставить("ДанныеМаркировки",   ДанныеМаркировки);
								СведенияОКодеМаркировки.Вставить("ДанныеНоменклатуры", ДанныеНоменклатуры);
								Форма.ОбработатьКодМаркировкиИСМПТК(ДанныеСоСканераСтруктура, СведенияОКодеМаркировки);
								
							КонецЕсли;				
							
						КонецЕсли; //Включен учет маркировки по конкретной ТГ
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; 
		Иначе
			
			Если ЭтоКодМарки Тогда
				
				Если ФормаИсточникСтрока = "ЧекККМ" Тогда
					//Если ЕАН не зарегистрирован в базе, позволяем выполнить регистрацию нового штрихкода номенклатуры.
					//Если отсканированный ЕАН не относится к ном-ре, подразумеваем, что пользователь должен делать это не через сканирование в Чеке
					//В форму подбора и регистрации ШК передаем в формате Base64
					Если ТипЗнч(ДанныеСоСканераСтруктура) = Тип("Структура") Тогда
						ДанныеСоСканераСтруктура.Штрихкод = ИсходныйШтрихкод;
					ИначеЕсли ТипЗнч(ДанныеСоСканераСтруктура) = Тип("Массив") Тогда
						ДанныеСоСканераСтруктура[0].Штрихкод = ИсходныйШтрихкод;
					КонецЕсли;
					Форма.ОткрытьФормуПодбораНоменклатурыИРегистрацииШК(ДанныеСоСканераСтруктура, ЭтоКодМарки);
				Иначе //РМК
					//Если ЕАН не зарегистрирован в базе, в РМК не даем возможности выполнить регистрацию (напрямую в Чеке функционал доступнен).
					//Поэтому просто оповещаем пользователя, что выполнить добавление незарегистрированного товара невозможно.
					ТекстСообщения = НСтр("ru = 'Не удалось определить номенклатуру для штрихкода %1, товар не был добавлен в чек!'"); 
					ТекстСообщения = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеМаркировки.EAN);
					РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
			Иначе
				
				//Если ЕАН не зарегистрирован и пользователь работает не с КМ, подключаем стандартный механизм.
				Выполнить("Форма." + ИмяТиповойПроцедурыОбработатьШтрихкод + "(ДанныеСоСканераСтруктура)");
				
			КонецЕсли;
			
		КонецЕсли; //Штрихкод ЕАН зарегистрирован в базе
		
	КонецЕсли; //Штрихкод Разобран
	
КонецПроцедуры

//При сканировании КМ в форме Чека возврата:
//Проверяем наличие товара, соответствующего этому КМ, в таблице чека. Если товар не найден, добавление не выполняем, т.к. возврат должен соответствовать исходному чеку по товарам.
//Если товар в таблице чека найден, открываем форму обработки РозничноеВыбытиеМаркированнойПродукцииИСМПТК.ПроверкаКМ,
//сразу заполняя в нее полученные данные кода в статусе Добавлен. Поведение в этой форме оставляем стандартное, т.е. программное предзаполнение
//расцениваем как самостоятельное открытие формы и сканирование в ней нового КМ самим пользователем.
//Данный вариант поведения принят в связи с тем, что в чеке возврата при создании уже предзаполнены данные товаров, и если сохранять стандартное 
//поведение, т.е. сканировать КМ сразу в чек, будет увеличиваться количество в строке, что для возврата некорректно.
//При переносе же из формы ПроверкаКМ в первую очередь коды связываются с "дырками" в уже имеющихся строках товаров, т.е. сопоставлятся с имеющимися единицами чека. 
//Это позволяет избежать увеличения количества без желания пользователя.
//При этом возможность добавить в возврат новые товарные позиции и их КМ или отсканировать больше КМ по товару, чем было указано изначально  - сохраняем опционально.
//
//НесоответствиеТоваровРазрешено - параметр, определяющий возможность добавить в чек возврата товары, отсутствующие в исходном чеке продажи.
Процедура ОбработкаВнешнегоСобытияЧекВозврат(Форма, ДанныеСоСканераСтруктура, ФормаИсточникСтрока, НесоответствиеТоваровРазрешено = Ложь) Экспорт
	
	РозничноеВыбытиеИСМПТККлиентПереопределяемый.ОбработкаВнешнегоСобытияЧекВозврат(Форма, ДанныеСоСканераСтруктура, ФормаИсточникСтрока, НесоответствиеТоваровРазрешено);
	
КонецПроцедуры

функция ПолучитьВидПродукцииПоНоменклатуре(Номенклатура) Экспорт 
	
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
		
КонецФункции

функция ПолучитьНоменклатуруПоШтрихкодуВРозничномКонтуре(Штрихкод, НужноВернутьМассив = Ложь) Экспорт
	
	Возврат РозничноеВыбытиеИСМПТКПереопределяемый.ПолучитьНоменклатуруПоШтрихкодуВРозничномКонтуре(Штрихкод, НужноВернутьМассив);
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОткрытьФормуНевозможностиДобавленияОтсканированногоИСМПТК(Форма, ПараметрыОткрытияФормы, ОповещениеОЗакрытии = Неопределено) Экспорт
	
	Если ПараметрыОткрытияФормы.ВидПродукции = Неопределено Тогда
		
		ОткрытьФорму("Обработка.РозничноеВыбытиеМаркированнойПродукцииИСМПТК.Форма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытияФормы, Форма);
		
	ИначеЕсли ПараметрыОткрытияФормы.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная")
		  Или ПараметрыОткрытияФормы.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") 
		  Или ПараметрыОткрытияФормы.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") Тогда
		
		ОткрытьФорму("Обработка.РозничноеВыбытиеМаркированнойПродукцииИСМПТК.Форма.ИнформацияОНевозможностиДобавленияОтсканированного",	ПараметрыОткрытияФормы, Форма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПустуюСтруктуруДанныхШтрихкодаКМ() Экспорт

	ДанныеШтрихкода = Новый Структура();
	ДанныеШтрихкода.Вставить("GTIN", 					"");
	ДанныеШтрихкода.Вставить("EAN", 					"");
	ДанныеШтрихкода.Вставить("ДанныеШтрихкода", 		Новый Соответствие());
	ДанныеШтрихкода.Вставить("НаименованиеРеквизита",   "EAN13");
	ДанныеШтрихкода.Вставить("ОписаниеОшибки", 			Неопределено);
	ДанныеШтрихкода.Вставить("ПредставлениеШтрихкода",  "");
	ДанныеШтрихкода.Вставить("Разобран",				Истина);
	ДанныеШтрихкода.Вставить("СерийныйНомер", 			Неопределено);
	ДанныеШтрихкода.Вставить("ТипИдентификатораТовара", ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовШКТовараИСМПТК.КодТовараВФорматеEAN13"));
	ДанныеШтрихкода.Вставить("ШтрихкодBase64", 			"");
	
	Возврат ДанныеШтрихкода;
	
КонецФункции

#КонецОбласти

#Область Переопределение_ЕРП
//ПЕРЕОПРЕДЕЛЕНИЕ//
//ЕРП, КА, УТ

Функция ЕстьНеобработанноеСобытие() Экспорт
	
	//Возврат (глПодключаемоеОборудованиеСобытиеОбработано = Ложь);
	Возврат Ложь;
	
КонецФункции

Функция ПараметрыЗавершенияОбработкиШтрихкода() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Форма");
	Параметры.Вставить("РезультатОбработкиШтрихкода");
	Параметры.Вставить("КэшированныеЗначения");
	Параметры.Вставить("ПараметрыСканирования");
	Параметры.Вставить("ДанныеШтрихкода");
	Параметры.Вставить("ОповещениеОбработкиШтрихкода");
	Параметры.Вставить("ОповещениеВыполнитьДействие");
	Параметры.Вставить("ОповещениеЗавершениеОбработки");
	
	Возврат Параметры;
	
КонецФункции

///////////////////
#КонецОбласти
