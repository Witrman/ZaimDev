
#Область ОтборПоОрганизации

Процедура ОткрытьФормуВыбораОрганизаций(Форма, Префикс, Префиксы = Неопределено, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Организации", Форма.Организации.ВыгрузитьЗначения());
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма",                   Форма);
	ДополнительныеПараметры.Вставить("Префикс",                 Префикс);
	ДополнительныеПараметры.Вставить("Префиксы",                Префиксы);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	ОткрытьФорму("Обработка.ОбменИСМПТК.Форма.ФормаВыбораСпискаОрганизацийИСМПТК",
				 ПараметрыОткрытияФормы,
				 Форма,,,,
				 Новый ОписаниеОповещения("ПослеЗавершенияВыбораОрганизаций", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

Процедура ПослеЗавершенияВыбораОрганизаций(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма             = ДополнительныеПараметры.Форма;
	СписокОрганизаций = Результат.Организации;
	ПрименятьОтбор    = ДополнительныеПараметры.ОповещениеПриЗавершении = Неопределено;
	
	Если Результат.СохраненыНастройки Тогда
		Форма.ЗаполнитьСписокВыбораОрганизацииПоСохраненнымНастройкам();
	КонецЕсли;
	
	ОбработатьВыборОрганизаций(Форма, СписокОрганизаций, ПрименятьОтбор, ДополнительныеПараметры.Префикс, ДополнительныеПараметры.Префиксы);
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, СписокОрганизаций);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВыборОрганизаций(Форма, Результат, ПрименятьОтбор, Префикс = Неопределено, Префиксы = Неопределено) Экспорт
	
	НастроитьОтборПоОрганизации(Форма, Результат, Префикс, Префиксы);
	
	Если ПрименятьОтбор Тогда
		ОрганизацияОтборПриИзменении(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОрганизацияОтборПриИзменении(Форма)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Список") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список,
			"Организация", Форма.Организации, ВидСравненияКомпоновкиДанных.ВСписке,,Форма.Организации.Количество() > 0);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СписокЗакрытые") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.СписокЗакрытые,
			"Организация", Форма.Организации, ВидСравненияКомпоновкиДанных.ВСписке,,Форма.Организации.Количество() > 0);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СписокКОформлению") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.СписокКОформлению,
			"Организация", Форма.Организации, ВидСравненияКомпоновкиДанных.ВСписке,, Форма.Организации.Количество() > 0);
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьОтборПоОрганизации(Форма, Результат, Префикс = Неопределено, Знач ЗначениеПрефиксы = Неопределено) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Форма.Организации.ЗагрузитьЗначения(Результат);
	ИначеЕсли ТипЗнч(Результат) = Тип("СписокЗначений") Тогда
	ИначеЕсли Результат = Неопределено Тогда
		Форма.Организации.Очистить();
	Иначе
		Форма.Организации.Очистить();
		ЭлементСписка = Форма.Организации.Добавить();
		ЭлементСписка.Значение = Результат;
		Если Не(ЭлементСписка.Значение = Результат) Тогда
			Форма.Организации.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.Организации.Количество() = 1 Тогда
		Форма.Организация = Форма.Организации.Получить(0).Значение;
		Форма.ОрганизацииПредставление = Строка(Форма.Организация);
	ИначеЕсли Форма.Организации.Количество() = 0 Тогда
		Форма.Организация = Неопределено;
		Форма.ОрганизацииПредставление = "";
	Иначе
		Форма.Организация = Неопределено;
		Форма.ОрганизацииПредставление = Строка(Форма.Организации);
	КонецЕсли;
	
	Если ЗначениеПрефиксы = Неопределено Тогда
		Префиксы = Новый Массив;
		Префиксы.Добавить("Оформлено");
		Префиксы.Добавить("КОформлению");
	Иначе
		Если ТипЗнч(ЗначениеПрефиксы) = Тип("Строка") Тогда
			Префиксы = Новый Массив();
			Префиксы.Добавить(ЗначениеПрефиксы);
		Иначе
			Префиксы = ЗначениеПрефиксы;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Значение Из Префиксы Цикл
		
		Если Форма.Организации.Количество() > 1 Тогда
			Окончание = "Организации";
		Иначе 
			Окончание = "Организация";
		КонецЕсли;
		
		Если Значение = "Отбор" Тогда
			Постфикс = Окончание;
		Иначе
			Постфикс = "Отбор" + Окончание;
		КонецЕсли;
		
		СтраницыОтбораОрганизация = Форма.Элементы.Найти("Страницы" + Значение + Постфикс);
		Если СтраницыОтбораОрганизация <> Неопределено Тогда
			СтраницыОтбораОрганизация.ТекущаяСтраница = Форма.Элементы["Страница" + Значение + Окончание];
		КонецЕсли;
	КонецЦикла;
	
	Если Префикс <> Неопределено Тогда
		ЭлементОтбораОрганизация = Форма.Элементы.Найти(Префикс + ?(Форма.Организации.Количество() > 1,
		                                                                "Организации",
		                                                                "Организация"));
		Если ЭлементОтбораОрганизация <> Неопределено Тогда
			Форма.ТекущийЭлемент = ЭлементОтбораОрганизация;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ОбработкаОповещенияВФормеСпискаДокументовИС(Форма, ИмяПодсистемы, ИмяСобытия, Параметр, Источник) Экспорт
	
	ОбновитьСписок = Ложь;
	
	Если ИмяСобытия = ИнтеграцияИСМПТККлиентСервер.ИмяСобытияИзмененОбъект(ИмяПодсистемы, Форма) Тогда
		
		ОбновитьСписок = Истина;
	
	ИначеЕсли ИмяСобытия = ИнтеграцияИСМПТККлиентСервер.ИмяСобытияИзмененоСостояние(ИмяПодсистемы) Тогда
		
		ОбновитьСписок =
			(ТипЗнч(Параметр.Ссылка) = Тип("ДокументСсылка." + ИнтеграцияИСМПТККлиентСервер.ИмяОбъектаИзИмениФормы(Форма, Ложь)));
		
	ИначеЕсли ИмяСобытия = ИнтеграцияИСМПТККлиентСервер.ИмяСобытияВыполненОбмен(ИмяПодсистемы) Тогда
		ОжидаемоеСвойство = ИнтеграцияИСМПТККлиентСервер.ИмяСвойстваОбновлятьСтатусВФормахДокументов(ИмяПодсистемы);
		
		Если (ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство(ОжидаемоеСвойство)) Тогда
			
			Параметр.Свойство(ОжидаемоеСвойство, ОбновитьСписок);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ОбновитьСписок Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "Список") Тогда
			Форма.Элементы.Список.Обновить();
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "СписокКОформлению") Тогда
			Форма.Элементы.СписокКОформлению.Обновить();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбновитьСписок;
	
КонецФункции

Функция ИмяПодсистемы() Экспорт
	
	Возврат "ИСМПТК";
	
КонецФункции

Процедура ВопросЗаписатьОбъектПередВыполнением(ОписаниеОповещенияЗавершения, ВидОбъекта = "документ", ИмяСобытия = "Записать") Экспорт
	
	ТекстВопроса = НСтр(
		"ru = 'Перед выполнением необходимо %1 %2.
		|%3 документ?'");	
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", НРег(ИмяСобытия));	
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%2", ВидОбъекта);
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%3", ИмяСобытия);
	
	ПоказатьВопрос(ОписаниеОповещенияЗавершения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
КонецПроцедуры

Функция ОбъектЗаписан(Форма) Экспорт
	
	Ссылка = ?(ИнтеграцияИСМПТККлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
	
	Если Ссылка.Пустая() ИЛИ Форма.Модифицированность Тогда
		
		Форма.Записать();	
		
	КонецЕсли;
	
	Ссылка = ?(ИнтеграцияИСМПТККлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
	
	ОбъектЗаписан = (НЕ Ссылка.Пустая()) И (НЕ Форма.Модифицированность);	
	
	Возврат ОбъектЗаписан;
	
КонецФункции

Процедура СоздатьПервичныйДокумент(Знач Параметр) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();	
	Контейнер.СоздатьПервичныйДокументИзДокументаИСМПТ(Параметр);
	
КонецПроцедуры

// Возвращает массив документов ИСМПТ, полученный из формы документа или списка.
//
// Параметры:
//  Параметр - УправляемаяФорма, Форма, Массив, ВыделенныеСтрокиТабличногоПоля - 
//   Форма документа счета-фактуры или выделенные строки списка счетов-фактур.
//
// Возвращаемое значение:
//  Массив, Неопределено - Массив ссылок на СНТ.
//   Если форма документа модифицирована и пользователь отказался от записи, то Неопределено.
//
Функция МассивДокументовИСМПТ(Знач Параметр) Экспорт
	
	ЭтоФорма = Ложь;
	ЭтоКоллекция = Ложь;
	
	#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		Если ТипЗнч(Параметр) = Тип("ФормаКлиентскогоПриложения") ИЛИ ТипЗнч(Параметр) = Тип("Форма") Тогда
			ЭтоФорма = Истина;
		ИначеЕсли ТипЗнч(Параметр) = Тип("Массив") ИЛИ ТипЗнч(Параметр) = Тип("ВыделенныеСтрокиТабличногоПоля") Тогда
			ЭтоКоллекция = Истина;	
		КонецЕсли;
	#Иначе
		Если ТипЗнч(Параметр) = Тип("ФормаКлиентскогоПриложения") Тогда
			ЭтоФорма = Истина;	
		ИначеЕсли ТипЗнч(Параметр) = Тип("Массив") Тогда
			ЭтоКоллекция = Истина;	
		КонецЕсли;
	#КонецЕсли
	
	Если ЭтоФорма Тогда
		Форма = Параметр;
		// производим запись без вопроса
		Если ОбъектЗаписан(Форма) Тогда
			СсылкаДокументИСМПТ = ?(ИнтеграцияИСМПТККлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
			МассивИСМПТ = Новый Массив;
			МассивИСМПТ.Добавить(СсылкаДокументИСМПТ);
		Иначе
			МассивИСМПТ = Неопределено;
		КонецЕсли;	
	ИначеЕсли ЭтоКоллекция Тогда
		КоллекцияИСМПТ = Параметр;
		МассивИСМПТ = Новый Массив;
		Для Каждого СсылкаДокументИСМПТ Из КоллекцияИСМПТ Цикл
			МассивИСМПТ.Добавить(СсылкаДокументИСМПТ);
		КонецЦикла;			
	КонецЕсли;
	
	Возврат МассивИСМПТ;
	
КонецФункции

// Оповещает формы подсистемы о происхождении события.
//
// Параметры:
//  ИмяСобытия - Строка - Имя произошедшего события.
//  Параметр - Массив, Неопределено - Массив ссылок на измененные или созданные объекты. 
//   Неопределено, если невозможно определить какие объекты были изменены или созданы.
//
Процедура ОповеститьФормы(Знач ИмяСобытия, Знач Параметр = Неопределено, Знач Источник = Неопределено) Экспорт
	
	Оповестить(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

// Проверяет корректность заполнения Документов ИСМПТ и показывает сообщения.
//
// Параметры:
//  МассивИсходящихДокументов - Массив - Массив документов, которые необходимо отправить в ИС МПТ.
//   Каждый элемент массива должен иметь тип ДокументСсылка./ИмяДокументаИСМПТ/.
//
Процедура ПроверитьИсходящиеДокументыИСМПТ(Знач МассивИсходящихДокументов) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();	
	Контейнер.ПроверитьИсходящиеДокументыИСМПТ(МассивИсходящихДокументов);
		
КонецПроцедуры

Функция ПолучитьСписокДляОтбораМаркируемойПродукции() Экспорт
	
	Возврат ИнтеграцияИСМПТККлиентПереопределяемый.ПолучитьСписокДляОтбораМаркируемойПродукции();
	
КонецФункции

Процедура СкопироватьШтрихКодВБуферОбмена(ЭлементФормы, Знач Штрихкод) Экспорт
	
	Попытка
		HTMLДокумент = ЭлементФормы.document;
		ВременноеПолеВвода = HTMLДокумент.createElement("INPUT");
		АктивныйЭлемент = HTMLДокумент.activeElement;
		ВременноеПолеВвода.value = Штрихкод;
		HTMLДокумент.body.appendChild(ВременноеПолеВвода);
		ВременноеПолеВвода.select();
		HTMLДокумент.execCommand("copy");
		HTMLДокумент.body.removeChild(ВременноеПолеВвода);
		АктивныйЭлемент.focus();
		
		ТекстСообщения = НСтр("ru = 'Штрихкод скопирован в буфер обмена.';
							  |en = 'Штрихкод скопирован в буфер обмена.'");
		ПоказатьОповещениеПользователя(,,ТекстСообщения);
	Исключение
		ОчиститьСообщения();
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(Штрихкод);
	КонецПопытки;

КонецПроцедуры

#Область ГенерацияSSCC

Процедура СгенерироватьНовыйШтрихкодПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Форма = ДополнительныеПараметры.ФормаГенерации;
		Форма.Объект.Упаковки.Удалить(Форма.Объект.Упаковки[0]);
		Форма.СгенерироватьШтрихкодПослеВопроса();
	КонецЕсли;
	
КонецПроцедуры

Процедура СгенерироватьШтрихкодПослеВопроса(Источник) Экспорт
	
	Источник.СгенерироватьШтрихкодПослеВопроса();
	
КонецПроцедуры

#КонецОбласти

#Область ВводНаОсновании

Процедура ОткрытьДокументИСМПТ_ДокументОснование(Форма, ДанныеДокументИСМПТ) Экспорт
	
	ДокументИСМПТ	 = ДанныеДокументИСМПТ.ИСМПТ;
	ДокументИсточник = Форма.Объект.Ссылка;
	ИмяФормыДокументаИСМПТ = ИнтеграцияИСМПТККлиентПереопределяемый.ПолучитьИмяФормыДокументаИСМПТ(ДокументИсточник);
	
	Если ТипЗнч(ДокументИСМПТ) <> Тип("СписокЗначений") И ЗначениеЗаполнено(ДокументИСМПТ) Тогда
		
		ПоказатьЗначение(,ДокументИСМПТ);
						
	ИначеЕсли ТипЗнч(ДокументИСМПТ) = Тип("СписокЗначений") И ЗначениеЗаполнено(ДокументИСМПТ) Тогда
		
		Если ДокументИСМПТ.Количество() > 1 Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму(
			"ОбщаяФорма.ПросмотрСпискаДокументов",
			Новый Структура("СписокДокументов, Заголовок",
			ДокументИСМПТ,
			НСтр("ru='Документы (%КоличествоДокументов%)'")
			),
			Форма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	Иначе
		
		ПараметрыФормы = Новый Структура("Основание", Форма.Параметры.Ключ);
		ОткрытьФорму(ИмяФормыДокументаИСМПТ, ПараметрыФормы, Форма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьДокументИСМПТ(Знач Параметр) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();	
	Контейнер.ВыбратьДокументИСМПТ(Параметр);
	
КонецПроцедуры

#Область КомандыСоздания

Процедура СоздатьУведомлениеОВвозеЕАЭС(Знач Параметр, ДопПараметр) Экспорт
	
	СоздатьДокументИСМПТ(Параметр, ДопПараметр);
	
КонецПроцедуры

Процедура СоздатьУведомлениеОВвозеИмпорт(Знач Параметр, ДопПараметр) Экспорт
	
	СоздатьДокументИСМПТ(Параметр, ДопПараметр);
	
КонецПроцедуры

Процедура СоздатьВводВОборот(Знач Параметр, ДопПараметр) Экспорт
	
	СоздатьДокументИСМПТ(Параметр, ДопПараметр);
	
КонецПроцедуры

Процедура СоздатьВыводИзОборота(Знач Параметр, ДопПараметр) Экспорт
	
	СоздатьДокументИСМПТ(Параметр, ДопПараметр);
	
КонецПроцедуры

Процедура СоздатьАППИсход(Знач Параметр, ДопПараметры) Экспорт
	
	СоздатьДокументИСМПТ(Параметр, ДопПараметры);
	
КонецПроцедуры

Процедура ВыбратьАППВход(Знач Параметр) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();	
	Контейнер.ВыбратьДокументИСМПТ(Параметр);
	
КонецПроцедуры

Процедура СоздатьЭкспортЕАЭС(Знач Параметр, ДопПараметры) Экспорт
	
	СоздатьДокументИСМПТ(Параметр, ДопПараметры);	
	
КонецПроцедуры

Процедура СоздатьДокументИСМПТ(Знач Параметр, ДопПараметры = Неопределено) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();	
	Контейнер.СоздатьДокументИСМПТ(Параметр, ДопПараметры);
	
КонецПроцедуры

#КонецОбласти

Процедура ОткрытьФормуПросмотраСпискаДокументов(Форма, ДокументИСМПТ) Экспорт
	
	ОткрытьФорму("ОбщаяФорма.ПросмотрСпискаДокументов", Новый Структура("СписокДокументов, Заголовок", ДокументИСМПТ, НСтр("ru='Документы (%КоличествоДокументов%)'")),
				Форма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

#КонецОбласти

#Область ОтправкаДокументовИСМПТ

// Параметры:
//  МассивИсходящихДокументовИСМПТ - Массив - Массив документов, которые необходимо отправить в ИС МПТ.
//   Каждый элемент массива должен иметь тип ДокументСсылка./Имя документа ИС МПТ/.
Процедура ОтправитьИсходящиеДокументыИСМПТ(Знач МассивИсходящихДокументовИСМПТ, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();	
	Контейнер.ОтправитьИсходящиеДокументыИСМПТ(МассивИсходящихДокументовИСМПТ, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаДокументовСУЗ

Процедура ОтправитьИсходящиеДокументыСУЗ(Знач МассивИсходящихДокументовСУЗ, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();
	Контейнер.ОтправитьИсходящиеДокументыСУЗ(МассивИсходящихДокументовСУЗ, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДокументовИСМПТ

Процедура ОбновитьДокументыИзИСМПТ(Знач МассивДокументовИСМПТ, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();	
	Контейнер.ОбновитьДокументыИзИСМПТ(МассивДокументовИСМПТ, ДополнительныеПараметры);
	
КонецПроцедуры

// Заполняет массив профилей и паролей доступа к ИС МПТ в разрезе организаций
// если не хватает данных, то будем отображать форму ввода данных пользователю
Функция ПолучитьНастройкиПараметровИСМПТ(Знач КоллекцияСгруппированныхДокументовИСМПТ) Экспорт
	
	// Использовать текущего пользователя ИБ, если он не задан явно.
	ПользовательИБ = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь();	
	
	НеобходимоВводДанныхПользователем = Ложь;

	СоответствиеОрганизацийИНастроек = Новый Соответствие;
	
	Для Каждого СгруппированныеДокументыИСМПТ Из КоллекцияСгруппированныхДокументовИСМПТ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеДокументыИСМПТ.Ключ;
						
	КонецЦикла;

	НеобходимоВводДанныхПользователем = Истина;
	Если НеобходимоВводДанныхПользователем Тогда
		СоответствиеОрганизацийИНастроек = Неопределено;
	КонецЕсли;
	
	Возврат СоответствиеОрганизацийИНастроек;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеДокументовСУЗ

Процедура ПолучитьСтатусЗаказаЭмиссииКМ(Знач МассивДокументовИСМПТ, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();
	Контейнер.ПолучитьСтатусЗаказаЭмиссииКМ(МассивДокументовИСМПТ, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПолучитьПричинуОтказаЗаказаЭмиссииКМ(Знач МассивДокументовИСМПТ, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();
	Контейнер.ПолучитьПричинуОтказаЗаказаЭмиссииКМ(МассивДокументовИСМПТ, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПолучитьКМПоЗаказуНаЭмиссию(Знач МассивДокументовИСМПТ, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();
	Контейнер.ПолучитьКМПоЗаказуНаЭмиссию(МассивДокументовИСМПТ, ДополнительныеПараметры);
	
КонецПроцедуры

Функция  ПолучитьСтатусGTINПоЗаказуНаЭмиссию(Знач ЗаказНаЭмиссию, Знач GTIN) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();
	Возврат Контейнер.ПолучитьСтатусGTINПоЗаказуНаЭмиссию(ЗаказНаЭмиссию, GTIN);
	
КонецФункции

Процедура ПовторноПолучитьКМПоЗаказуНаЭмиссию(Знач МассивДокументовИСМПТ, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();
	Контейнер.ПовторноПолучитьКМПоЗаказуНаЭмиссию(МассивДокументовИСМПТ, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПолучитьСтатусАгрегацииКМ(Знач МассивДокументыСУЗ, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();
	Контейнер.ПолучитьСтатусАгрегацииКМ(МассивДокументыСУЗ, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПолучитьСтатусНанесенияКМ(Знач МассивДокументыСУЗ, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();
	Контейнер.ПолучитьСтатусНанесенияКМ(МассивДокументыСУЗ, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ПодтверждениеДокументовИСМПТ

// Параметры:
//  МассивИсходящихДокументовИСМПТ - Массив - Массив документов, которые необходимо подтвердить в ИС МПТ.
//   Каждый элемент массива должен иметь тип ДокументСсылка./Имя документа ИС МПТ/.
Процедура ПодтвердитьВходящиеДокументыИСМПТ(Знач МассивИсходящихДокументовИСМПТ, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();	
	Контейнер.ПодтвердитьВходящиеДокументыИСМПТ(МассивИсходящихДокументовИСМПТ, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ОтклонениеДокументовИСМПТ

// Параметры:
//  МассивИсходящихДокументовИСМПТ - Массив - Массив документов, которые необходимо отклонить в ИС МПТ.
//   Каждый элемент массива должен иметь тип ДокументСсылка./Имя документа ИС МПТ/.
Процедура ОтклонитьВходящиеДокументыИСМПТ(Знач МассивИсходящихДокументовИСМПТ, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();	
	Контейнер.ОтклонитьВходящиеДокументыИСМПТ(МассивИсходящихДокументовИСМПТ, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ОтзывДокументовИСМПТ

// Параметры:
//  МассивИсходящихДокументовИСМПТ - Массив - Массив документов, которые необходимо отклонить в ИС МПТ.
//   Каждый элемент массива должен иметь тип ДокументСсылка./Имя документа ИС МПТ/.
Процедура ОтозватьИсходящиеДокументыИСМПТ(Знач МассивИсходящихДокументовИСМПТ, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();	
	Контейнер.ОтозватьИсходящиеДокументыИСМПТ(МассивИсходящихДокументовИСМПТ, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ПерезаполнениеДокументовИСМПТ

Процедура ПерезаполнитьДокументИСМПТ(Знач Параметр) Экспорт
	
	Если ТипЗнч(Параметр) = Тип("Массив") Тогда
		ТипДокументаИСМПТ = ТипЗнч(Параметр[0]);
		
		Если ТипДокументаИСМПТ = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда
			ПерезаполнитьАПП(Параметр);
		ИначеЕсли ТипДокументаИСМПТ = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") Тогда
			ПерезаполнитьУОР(Параметр);
		ИначеЕсли ТипДокументаИСМПТ = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСМПТК") Тогда
			ПерезаполнитьВводВОборот(Параметр);
		ИначеЕсли ТипДокументаИСМПТ = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСМПТК") Тогда
			ПерезаполнитьВыводИзОборота(Параметр);
		ИначеЕсли ТипДокументаИСМПТ = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК")
			ИЛИ ТипДокументаИСМПТ = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК") Тогда
			ПерезаполнитьВвозТоваров(Параметр);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерезаполнитьАПП(Знач Параметр) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();	
	Контейнер.ПерезаполнитьАПП(Параметр);
	
КонецПроцедуры

Процедура ПерезаполнитьУОР(Знач Параметр) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();	
	Контейнер.ПерезаполнитьУОР(Параметр);
	
КонецПроцедуры

Процедура ПерезаполнитьВводВОборот(Знач Параметр) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();	
	Контейнер.ПерезаполнитьВводВОборот(Параметр);
	
КонецПроцедуры

Процедура ПерезаполнитьВыводИзОборота(Знач Параметр) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();	
	Контейнер.ПерезаполнитьВыводИзОборота(Параметр);
	
КонецПроцедуры

Процедура ПерезаполнитьВвозТоваров(Знач Параметр) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();	
	Контейнер.ПерезаполнитьВвозТоваров(Параметр);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыОткрытияФорм

Процедура ОткрытьФормуСпискаВходящихАПП() Экспорт
	
	СписокАПП(ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий"));
	
КонецПроцедуры

Процедура ОткрытьФормуСпискаИсходящихАПП() Экспорт
	
	СписокАПП(ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий"));	
	
КонецПроцедуры

Процедура СписокАПП(Знач Направление = Неопределено) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();	
	Контейнер.СписокАПП(Направление);
	
КонецПроцедуры

Процедура ОткрытьФормуСпискаВходящихУОР() Экспорт
	
	СписокУОР(ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий"));
	
КонецПроцедуры

Процедура ОткрытьФормуСпискаИсходящихУОР() Экспорт
	
	СписокУОР(ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий"));	
	
КонецПроцедуры

Процедура СписокУОР(Знач Направление = Неопределено) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();	
	Контейнер.СписокУведомлениеОРасхождении(Направление);
	
КонецПроцедуры

Процедура ОткрытьФормуСпискаИсходящихУвВвозИзЕАЭС() Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();	
	Контейнер.СписокУведомлениеОВвозеИзЕАЭС();
	
КонецПроцедуры

Процедура ОткрытьФормуСпискаИсходящихУвВвозИзТретьихСтран() Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();	
	Контейнер.СписокУведомлениеОВвозеИзТретьихСтран();
	
КонецПроцедуры

Процедура ОткрытьФормуСпискаИсходящихВВО() Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();	
	Контейнер.СписокУведомлениеОВводеВОборот();
	
КонецПроцедуры

Процедура ОткрытьФормуСпискаИсходящихВИО() Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();	
	Контейнер.СписокУведомлениеОВыводеИзОборота();
	
КонецПроцедуры

#КонецОбласти

#Область Криптобиблиотека

Функция СоздатьЭЦП_CMS_NCA_Layer(Знач ДанныеXML, ТипВходящихДанных, Знач ВключатьДанныеВПодпись, КодироватьВbase64 = Ложь, ИдентификаторКлиента = "", ТипДокумента = Неопределено, Отправка = Истина) Экспорт
	
	ВключатьШтампВремениВПодпись = Ложь;
	
	Если КодироватьВbase64 Тогда 
		ДвоичныеДанныеСтроки = ПолучитьДвоичныеДанныеИзСтроки(ДанныеXML);
		СтрокаBase64 = СтрЗаменить(СтрЗаменить(Base64Строка(ДвоичныеДанныеСтроки), Символы.ВК, ""),Символы.ПС,"");
	Иначе
		СтрокаBase64 = ДанныеXML; 
	КонецЕсли;

	СтрокаДляПодписи = ЗаписатьЗначениеJSON_Маркировка(СтрокаBase64);
	
	Попытка
		
		Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдерWSSocket();
		
		Если ЗначениеЗаполнено(Криптопровайдер.ТекстОшибки) Тогда
			Если Не СтрНайти(Криптопровайдер.ТекстОшибки, "connection error") = 0 Тогда 
				//Не запущен НЦА
				ТекстСообщения = НСтр("ru = 'Убедитесь, что NCALayer установлен и запущен.'");
				Сообщить(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыExtras = ЭлектронноеВзаимодействиеССервисамиМаркировкаВызовСервера.ПолучитьПараметрыКомпонентыМаркировка(ИдентификаторКлиента, ТипДокумента, Отправка);
		
		ОтветОтКриптопровайдера = Криптопровайдер.GetCMSSign(ИдентификаторКлиента, "1CService", ПараметрыExtras, СтрокаДляПодписи, ВключатьДанныеВПодпись, ВключатьШтампВремениВПодпись);
		
	Исключение
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = НСтр("ru = 'Не удалось сформировать ЭЦП в формате CMS.
						  			 |[КраткоеПредставление]'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "[КраткоеПредставление]", Ошибка.КраткоеПредставление);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	Попытка
		
		ПодписанныеДанныеСтруктура = ПрочитатьЗначениеJSON_Маркировка(ОтветОтКриптопровайдера);
		
		Если ПодписанныеДанныеСтруктура.Свойство("responseobject") И ПодписанныеДанныеСтруктура.code = "200" Тогда
 			ПодписанныеДанные =  ПодписанныеДанныеСтруктура.responseObject;
		ИначеЕсли ПодписанныеДанныеСтруктура.code = "500"  Тогда
			ПодписанныеДанные = "НеВыбран";
			
			Если ПодписанныеДанныеСтруктура.Свойство("message") Тогда
				ТекстСообщения = "";
				Если ПодписанныеДанныеСтруктура.message = "action.canceled" Тогда
					ТекстСообщения = НСтр("ru = 'Выбор сертификата отменен пользователем.'");
				Иначе
					Попытка
						ТекстСообщения = ПрочитатьЗначениеJSON_Маркировка(ПодписанныеДанныеСтруктура.message).ErrMSG;
					Исключение
						ТекстСообщения = ПодписанныеДанныеСтруктура.message;
					КонецПопытки;
				КонецЕсли;
				Сообщить(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		Возврат ПодписанныеДанные;
		
	Исключение
		
		Сообщить(НСтр("ru = 'Не удалось прочитать ответ:'") + СокрЛП(ОтветОтКриптопровайдера));
		ТекстОшибки = ПолучитьОписаниеОшибки(Криптопровайдер.ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Сообщить(ТекстОшибки);
		Иначе
			Сообщить(НСтр("ru = 'Криптопровайдер недоступен.'"));
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецПопытки;

КонецФункции

Функция ПрочитатьЗначениеJSON_Маркировка(СтрокаJSON, СвойстваДаты = "") Экспорт
	
	#Если ВебКлиент Тогда
		Результат = ИнтеграцияИСМПТКВызовСервера.ПрочитатьЗначениеJSON_Маркировка(СтрокаJSON, СвойстваДаты);
	#Иначе
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(СтрокаJSON);
		Результат = ПрочитатьJSON(Чтение, Ложь, СвойстваДаты);
		Чтение.Закрыть();
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

Функция Ошибка_НеверныйПароль() Экспорт
	Возврат "НеверныйПароль";	
КонецФункции

Функция Ошибка_НеверныйФайл() Экспорт
	Возврат "НеверныйФайл";	
КонецФункции

Функция Ошибка_НеизвестнаяОшибка() Экспорт
	Возврат "НеизвестнаяОшибка";	
КонецФункции

Функция ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке) Экспорт
	
	Ошибка = Новый Структура;
	
	Если Криптопровайдер = Неопределено Тогда
		Ошибка.Вставить("Версия", "");
		Ошибка.Вставить("КодОшибки", "");
		Ошибка.Вставить("ОписаниеОшибки", "");		
	Иначе
		Ошибка.Вставить("Версия", Криптопровайдер.Версия);
		Ошибка.Вставить("КодОшибки", Криптопровайдер.КодОшибки);
		Ошибка.Вставить("ОписаниеОшибки", Криптопровайдер.ТекстОшибки);
	КонецЕсли;
	
	Ошибка.Вставить("ИнформацияОбОшибке", ИнформацияОбОшибке);
	
	ТипОшибки = ТипОшибкиКриптопровайдера(Ошибка);
	Ошибка.Вставить("ТипОшибки", ТипОшибки);
	
	ПредставленияОшибки = ПредставленияОшибкиКриптопровайдера(Ошибка);
	Ошибка.Вставить("КраткоеПредставление", ПредставленияОшибки.КраткоеПредставление);
	Ошибка.Вставить("ПодробноеПредставление", ПредставленияОшибки.ПодробноеПредставление);
	
	Возврат Ошибка;
	
КонецФункции

Функция ТипОшибкиКриптопровайдера(Ошибка)
	
	ТипОшибки = Ошибка_НеизвестнаяОшибка();
	
	Если Найти(Ошибка.ОписаниеОшибки, "0D0680A8") Тогда
		ТипОшибки = Ошибка_НеверныйФайл();		
	ИначеЕсли Найти(Ошибка.ОписаниеОшибки, "23076071") Тогда
		ТипОшибки = Ошибка_НеверныйПароль();	
	Иначе
		ТипОшибки = Ошибка_НеизвестнаяОшибка();	
	КонецЕсли;
	
	Возврат ТипОшибки;
	
КонецФункции

Функция ПредставленияОшибкиКриптопровайдера(Ошибка)
	
	ПредставленияОшибки = Новый Структура;
	
	КраткоеПредставление = КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка);
	КраткоеПредставление = КраткоеПредставление + Символы.ПС + НСтр("ru = 'Подробности ошибки смотрите в журнале регистрации.'");
	ПредставленияОшибки.Вставить("КраткоеПредставление", КраткоеПредставление);
	
	ПодробноеПредставление = ПодробноеПредставлениеОшибкиКриптопровайдера(Ошибка);
	ПредставленияОшибки.Вставить("ПодробноеПредставление", ПодробноеПредставление);
	
	Возврат ПредставленияОшибки;
	
КонецФункции

Функция ЗаписатьЗначениеJSON_Маркировка(Значение)Экспорт
	
	Результат = Неопределено;
	#Если ВебКлиент Тогда
		Результат = ИнтеграцияИСМПТКВызовСервера.ЗаписатьЗначениеJSON_Маркировка(Значение);
	#Иначе
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Значение);
		Результат = Запись.Закрыть();
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

Функция КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка)
	
	КраткоеПредставление = "";
	
	Если Ошибка.ТипОшибки = Ошибка_НеверныйФайл() Тогда
		КраткоеПредставление = НСтр("ru = 'Возможно выбранный файл не является файлом сертификата ""*.p12"".'");		
	ИначеЕсли Ошибка.ТипОшибки = Ошибка_НеверныйПароль() Тогда
		КраткоеПредставление = НСтр("ru = 'Возможно был введен некорректный пароль для файла сертификата.'");				
	Иначе	
		КраткоеПредставление = КраткоеПредставлениеОшибки(Ошибка.ИнформацияОбОшибке);					
	КонецЕсли;
	
	Возврат КраткоеПредставление;
	
КонецФункции

Функция ПодробноеПредставлениеОшибкиКриптопровайдера(Ошибка)
	
	ПодробноеПредставление = НСтр(
	"ru = '[КраткоеПредставление]
	|[ИнформацияИзКриптопровайдера]
	|[ПодробноеПредставлениеОшибки]'");
	
	КраткоеПредставление = КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка);	
	ПодробноеПредставление = СтрЗаменить(ПодробноеПредставление, "[КраткоеПредставление]", КраткоеПредставление);
	
	Если ПустаяСтрока(Ошибка.Версия) И ПустаяСтрока(Ошибка.КодОшибки) И ПустаяСтрока(Ошибка.ОписаниеОшибки) Тогда
		ИнформацияИзКриптопровайдера = "";
	Иначе
		ИнформацияИзКриптопровайдера = НСтр("ru = 'Версия криптографии: [Версия], Код ошибки: [КодОшибки], Описание ошибки: [ОписаниеОшибки]'");
		ИнформацияИзКриптопровайдера = СтрЗаменить(ИнформацияИзКриптопровайдера, "[Версия]", Ошибка.Версия);
		ИнформацияИзКриптопровайдера = СтрЗаменить(ИнформацияИзКриптопровайдера, "[КодОшибки]", Ошибка.КодОшибки);
		ИнформацияИзКриптопровайдера = СтрЗаменить(ИнформацияИзКриптопровайдера, "[ОписаниеОшибки]", Ошибка.ОписаниеОшибки);
	КонецЕсли;	
	ПодробноеПредставление = СтрЗаменить(ПодробноеПредставление, "[ИнформацияИзКриптопровайдера]", ИнформацияИзКриптопровайдера);
	
	ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(Ошибка.ИнформацияОбОшибке);
	ПодробноеПредставление = СтрЗаменить(ПодробноеПредставление, "[ПодробноеПредставлениеОшибки]", ПодробноеПредставлениеОшибки);
	
	Возврат ПодробноеПредставление;
	
КонецФункции

Функция ПолучитьТокенАвторизации(Организация = Неопределено, ТипДокумента = Неопределено, Отправка = Ложь) Экспорт
	
	Если Организация = Неопределено ИЛИ Не ЗначениеЗаполнено(Организация) Тогда 
		ОшибкаПодписи = НСтр("ru = 'Не получены данные об организации. Невозможно получить токен сеанса!'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ОшибкаПодписи);	
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыЗапросаКлючаСессии   = ИнтеграцияИСМПТККлиентСервер.ПараметрыЗапросаКлючаСессии_ИСМП(Организация);
	КлючСессииЗапрошенИУстановлен = Ложь;
	КлючСессии = ИнтерфейсАвторизацииИСМПТКВызовСервера.ПроверитьОбновитьКлючСессии(ПараметрыЗапросаКлючаСессии, Неопределено, Ложь);
	
	ТребуетсяОбновлениеКлючаСессии = (КлючСессии = Неопределено);
	Если ТребуетсяОбновлениеКлючаСессии Тогда	
		
		РезультатЗапроса = ИнтерфейсАвторизацииИСМПТКВызовСервера.ЗапроситьПараметрыАвторизации(ПараметрыЗапросаКлючаСессии);
		
		ПараметрыАвторизации = РезультатЗапроса.ПараметрыАвторизации;
		Если ПараметрыАвторизации = Неопределено Тогда
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(РезультатЗапроса.ТекстОшибки);
		КонецЕсли;
		Если ПараметрыАвторизации <> Неопределено Тогда
			КлючСессииЗапрошенИУстановлен = ОтправитьДанныеАвторизацииИПолучитьТокен(ПараметрыЗапросаКлючаСессии, ПараметрыАвторизации, ТипДокумента, Отправка);
			
			Если КлючСессииЗапрошенИУстановлен = Неопределено Тогда
				// Не удалось подлючить криптопровайдер/проблема с ЭЦП. Сообщение формируется в получении КлючСессииЗапрошенИУстановлен, выводить не нужно.
				Возврат Неопределено;
			КонецЕсли;
			
			Если КлючСессииЗапрошенИУстановлен = "НеВыбран" Тогда 
				ОшибкаПодписи = НСтр("ru = 'Отмена выбора сертификата ЭЦП.'");
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ОшибкаПодписи);	
				Возврат Неопределено;
			КонецЕсли;
			
			КлючСессии = ИнтерфейсАвторизацииИСМПТКВызовСервера.ПроверитьОбновитьКлючСессии(ПараметрыЗапросаКлючаСессии, Неопределено, Ложь);
			
			Если Не КлючСессииЗапрошенИУстановлен И КлючСессии = Неопределено Тогда
				
				// ЭЦП некорректна - не зарегистрирована в ИС МПТ или шлюзе криптографии. 
				ОшибкаПодписи = НСтр("ru = 'Не удалось обработать данные выбранной ЭЦП. Проверьте регистрацию БИН в системе маркировки.'");
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ОшибкаПодписи);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		КлючСессииЗапрошенИУстановлен = Истина;
	КонецЕсли;
	
	Возврат КлючСессии; 
	
КонецФункции

Функция ОтправитьДанныеАвторизацииИПолучитьТокен(ПараметрыЗапросаКлючаСессии, ПараметрыАвторизации, ТипДокумента = Неопределено, Отправка = Истина)
	
	КодСостояния = 0;
	
	ИдентификаторОрганизации = ИнтеграцияИСМПТКВызовСервера.ПолучитьИдентификаторОрганизации(ПараметрыЗапросаКлючаСессии.Организация);
	
	Подпись = СоздатьЭЦП_CMS_NCA_Layer(ПараметрыАвторизации.Данные, 1, Истина, Истина, ИдентификаторОрганизации, ТипДокумента, Отправка);
	
	Если Подпись = Неопределено ИЛИ Подпись = "НеВыбран" Тогда
		Возврат Подпись;
	КонецЕсли;
	
	Подпись = СтрЗаменить(Подпись, "-----BEGIN CMS-----", "");
	Подпись = СтрЗаменить(Подпись, "-----END CMS-----", "");
	Подпись = СтрЗаменить(Подпись, Символы.ПС, "");
	
	РезультатЗапросаИУстановкиКлючаСессии = ИнтерфейсАвторизацииИСМПТКВызовСервера.ЗапроситьУстановитьКлючСессии(
					ПараметрыЗапросаКлючаСессии,
					ПараметрыАвторизации,
					Подпись);
					
	КлючСессииЗапрошенИУстановлен = РезультатЗапросаИУстановкиКлючаСессии.КлючСессииУстановлен;

	Возврат КлючСессииЗапрошенИУстановлен; 
	 
КонецФункции

// Получается текстовое представление ошибки для пользователя
Функция ПолучитьОписаниеОшибки(СообщениеОбОшибке)
	
	ТекстОшибки = "";
	Попытка
		//если ответ в формате JSON
		Результат = ПрочитатьЗначениеJSON_Маркировка(СообщениеОбОшибке);
		ТекстОшибки = Результат.msgttc;
	Исключение
		//если ответ в виде текста
		Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
			ТекстОшибки = СообщениеОбОшибке;
		КонецЕсли;
	КонецПопытки;
	Возврат ТекстОшибки;
	
КонецФункции
 
#КонецОбласти

#Область РазбитьДокументНаЧасти

Процедура РазбитьДокументЗаказКМ(ДокументЗаказКМ) Экспорт
	
	//Предварительная проверка данных документа
	МожноПродолжитьРазбитие = ИнтеграцияИСМПТКВызовСервера.ВыполнитьПроверкуДанныхЗаказаПередРазбитием(ДокументЗаказКМ);
	Если Не МожноПродолжитьРазбитие Тогда
		ТекстСообщения = НСтр("ru = 'В таблице Товары присутствуют строки с незаполненной номенклатурой: для них невозможно определить вид продукции и выполнить проверку необходимости разделения Заказа.'");
		Сообщить(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Данный документ будет разбит на несколько Заказов.
						|Продолжить?'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РазбитьДокументЗаказКМЗавершение", ЭтотОбъект, ДокументЗаказКМ);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

Процедура РазбитьДокументЗаказКМЗавершение(Ответ, ДокументЗаказКМ) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		МассивДокументовЗаказКМ = Новый Массив;
		МассивДокументовЗаказКМ.Добавить(ДокументЗаказКМ);
		
		ПараметрыСоздания = Новый Структура;
		ПараметрыСоздания.Вставить("МассивДокументовЗаказКМ", МассивДокументовЗаказКМ);
		
		СписокЗаказКМ = ИнтеграцияИСМПТКВызовСервера.РазбитьДокументыЗаказКМ(ПараметрыСоздания);
		
		Если СписокЗаказКМ <> Неопределено И СписокЗаказКМ.Количество() > 0 Тогда
			
			ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер.ИмяСобытияЗаписьЗаказНаЭмиссию(), СписокЗаказКМ);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор",	  Новый Структура("Ссылка", Новый ФиксированныйМассив(СписокЗаказКМ)));
			ПараметрыФормы.Вставить("Заголовок", "Сформированные Заказы на эмиссию кодов маркировки");
			
			ОткрытьФорму("Документ.ЗаказКодовМаркировкиСУЗИСМПТК.Форма.ФормаСписка", ПараметрыФормы,, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РазбитьДокументИСМПТ(ДокументЗаказКМ) Экспорт
	
	ТекстВопроса = НСтр("ru = 'Данный документ будет разбит на несколько отдельных документов по товарным группам.
						|Продолжить?'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РазбитьДокументИСМПТЗавершение", ЭтотОбъект, ДокументЗаказКМ);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

Процедура РазбитьДокументИСМПТЗавершение(Ответ, ДокументИСМПТ) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		МассивДокументовИСМПТ = Новый Массив;
		МассивДокументовИСМПТ.Добавить(ДокументИСМПТ);
		
		ПараметрыСоздания = Новый Структура;
		ПараметрыСоздания.Вставить("МассивДокументовИСМПТ" , МассивДокументовИСМПТ);
		
		Если ТипЗнч(МассивДокументовИСМПТ[0]) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда 
			ИмяСобытия = "ИмяСобытияЗаписьАктПриемаПередачи";
			Заголовок = "Сформированные Акты приема/передачи";
			ИмяДокумента = "АктПриемаПередачиИСМПТК";
			
		ИначеЕсли ТипЗнч(МассивДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСМПТК") Тогда 
			ИмяСобытия = "ИмяСобытияЗаписьУведомлениеОВводеВОборот";
			Заголовок = "Сформированные Уведомления о вводе в оборот";
			ИмяДокумента = "УведомлениеОВводеВОборотИСМПТК";
			
		ИначеЕсли ТипЗнч(МассивДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСМПТК") Тогда 
			ИмяСобытия = "ИмяСобытияЗаписьУведомлениеОВыводеИзОборота";
			Заголовок = "Сформированные Уведомления о выводе из оборота";
			ИмяДокумента = "УведомлениеОВыводеИзОборотаИСМПТК";
			
		ИначеЕсли ТипЗнч(МассивДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК") Тогда 
			ИмяСобытия = "ИмяСобытияЗаписьУведомлениеОВвозеИзТретьихСтран";
			Заголовок = "Сформированные Уведомления о ввозе (Импорт)";
			ИмяДокумента = "УведомлениеОВвозеИзТретьихСтранИСМПТК";
			
		ИначеЕсли ТипЗнч(МассивДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК") Тогда 
			ИмяСобытия = "ИмяСобытияЗаписьУведомлениеОВвозеИзЕАЭС";
			Заголовок = "Сформированные Уведомления о ввозе (ЕАЭС)";
			ИмяДокумента = "УведомлениеОВвозеИзЕАЭСИСМПТК";
			
		ИначеЕсли ТипЗнч(МассивДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОбЭкспортеЕАЭСИСМПТК") Тогда 
			ИмяСобытия = "ИмяСобытияЗаписьУведомлениеОбЭкспортеЕАЭС";
			Заголовок = "Сформированные Уведомления об экспорте (ЕАЭС)";
			ИмяДокумента = "УведомлениеОбЭкспортеЕАЭСИСМПТК";
		КонецЕсли;
					
		СписокДокументИСМПТ = ИнтеграцияИСМПТКВызовСервера.РазбитьДокументыИСМПТ(ПараметрыСоздания, ИмяДокумента);
		
		Если СписокДокументИСМПТ <> Неопределено И СписокДокументИСМПТ.Количество() > 0 Тогда
			
			Выполнить("ИнтеграцияИСМПТККлиент.ОповеститьФормы(ИнтеграцияИСМПТККлиентСервер." + ИмяСобытия +"(), СписокДокументИСМПТ)");
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор", Новый Структура("Ссылка", Новый ФиксированныйМассив(СписокДокументИСМПТ)));
			ПараметрыФормы.Вставить("Заголовок", Заголовок);
			
			ОткрытьФорму("Документ." + ИмяДокумента + ".Форма.ФормаСпискаИсходящих", ПараметрыФормы,, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаКодовМаркировкиИзФайла

Процедура ЗагрузитьКодыМаркировкиИзФайла(ФормаОбъекта, МножественнаяЗагрузка = Истина) Экспорт
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок 	= "Выбор файла";
	ДиалогВыбораФайла.Фильтр 		= "CSV (Comma-Separated Values)(*.csv)|*.csv";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр 	  = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор 		  = МножественнаяЗагрузка;
	
	Оповещение = Новый ОписаниеОповещения("ВыборФайлаCSVЗавершение", ЭтотОбъект, ФормаОбъекта);
	ДиалогВыбораФайла.Показать(Оповещение);
		
КонецПроцедуры

Процедура ВыборФайлаCSVЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		МассивОшибок = Новый Массив();
		СведенияОВыбранныхДокументах = Новый Массив();
		Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
			
			ПрочитанныйФайл = Новый ТекстовыйДокумент;
			ПрочитанныйФайл.Прочитать(ВыбранныйФайл);
			
			МассивКодовМаркировки = Новый Массив;
			ДанныеФайла = Новый Структура("ОбщееКоличество, ИмяДокумента, МассивКодов");
			ДанныеФайла.ОбщееКоличество = ВыбранныеФайлы.Количество();
			ДанныеФайла.ИмяДокумента	 = ВыбранныйФайл;
			
			Для НомерСтроки = 1 По ПрочитанныйФайл.КоличествоСтрок() Цикл
				Штрихкод = ПрочитанныйФайл.ПолучитьСтроку(НомерСтроки);
				ДанныеШтрихкода = Новый Структура("ШтрихКод, ФорматBase64, Количество", Штрихкод, Ложь, 1);
				РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
				Если Не ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПроверкаФорматаТранспортногоКодаПройденаУспешно(ДанныеШтрихкода, Истина) Тогда
					Продолжить;
				КонецЕсли;
				МассивКодовМаркировки.Добавить(ДанныеШтрихкода);
			КонецЦикла;
			
			ДанныеФайла.МассивКодов = МассивКодовМаркировки;
			СведенияОВыбранныхДокументах.Добавить(ДанныеФайла);
			
		КонецЦикла;
				
		СтруктураПараметров = Новый Структура("ФормаОбъекта, МассивОшибок, СведенияОВыбранныхДокументах", ДополнительныеПараметры, МассивОшибок, СведенияОВыбранныхДокументах);
		
		Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоОпределениеЛогистическихКодовИСМПТК() 
			И НЕ ДополнительныеПараметры.Заголовок = "Сверка поступивших товаров с данными Акта приема/передачи" Тогда //Форма сверки - не поддерживает запрос состава упаковок
			ЗавершениеПолучитьДанныеПоГорупповымКодамМаркировки = Новый ОписаниеОповещения("ЗагрузитьКодыМаркировкиИзФайлаЗавершение", ЭтотОбъект, СтруктураПараметров);
			
			СтруктурныеЕдиницы = Новый Соответствие;
			Если ДополнительныеПараметры.Заголовок = "Получение информации о кодах маркировки" Тогда
				СтруктурныеЕдиницы.Вставить(ДополнительныеПараметры.Организация, "");
			Иначе
				СтруктурныеЕдиницы.Вставить(ДополнительныеПараметры.Объект.Организация, "");
			КонецЕсли;
			
			ПолучитьКлючАвторизации(ЗавершениеПолучитьДанныеПоГорупповымКодамМаркировки, СтруктурныеЕдиницы);
		Иначе
			ЗагрузитьКодыМаркировкиИзФайлаЗавершение(Неопределено, СтруктураПараметров);
		КонецЕсли;
				
	КонецЕсли;

КонецПроцедуры

Процедура ЗагрузитьКодыМаркировкиИзФайлаЗавершение(РезультатВыполнения, СтруктураПараметров) Экспорт
	
	ПараметрыСканирования 	 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПараметрыСканирования(ЭтотОбъект);
	ТокенАвторизации 		 = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	
	УникальныйИдентификатор  = СтруктураПараметров.ФормаОбъекта.УникальныйИдентификатор;
	МассивОшибок 		 	 = СтруктураПараметров.МассивОшибок;
	СведенияОВыбранныхДокументах = СтруктураПараметров.СведенияОВыбранныхДокументах;
	ПараметрыДобавленияКодов = Новый Структура("УникальныйИдентификатор, МассивОшибок, СведенияОВыбранныхДокументах", УникальныйИдентификатор, МассивОшибок, СведенияОВыбранныхДокументах);
	
	ДлительнаяОперация 		 = ИнтеграцияИСМПТКВызовСервера.ВыполнитьДобавлениеКМИзФайлаВФоне(ПараметрыДобавленияКодов, ПараметрыСканирования, ТокенАвторизации);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(СтруктураПараметров.ФормаОбъекта);
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.Интервал = 2;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Новый ОписаниеОповещения("ВыполнитьПроцедуруФоновоВыполнено", СтруктураПараметров.ФормаОбъекта), ПараметрыОжидания);
	
КонецПроцедуры

Процедура ПолучитьКлючАвторизации(СобытиеПослеАвторизации, СтруктурныеЕдиницы)
	
	ПараметрыФормы = Новый Структура("СписокСтруктурныхЕдиниц, ТребуетсяВыборСертификата", СтруктурныеЕдиницы, Истина);

	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();
	Контейнер.ПроверитьТокенИВыбратьКлючПриНебходимости(СобытиеПослеАвторизации, ПараметрыФормы, СтруктурныеЕдиницы);
	
КонецПроцедуры

#КонецОбласти

#Область ГрупповаяОбработкаШтрихкодов

Процедура ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки_Общая(Форма, РезультатВыполнения, Параметры) Экспорт
	
	//Параметры - СтруктураКодовМаркировки, где:
	//КодМаркировки - Строка Base64, полный КМ
	//КодИдентификации - Строка, нормализованный КМ
	
	Объект = Форма.Объект;
	ТокенАвторизации = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	КодИдентификации = Параметры.КодИдентификации;
	
	//На сервере ИС МПТ присутствует ошибка из-за которой транспортные коды SSCC обувной продукции принимаются только в формате 18-значной строки,
	//т.е. без идентификатора 00 в начале. Для остальных ТГ принимается корректный, сформированный по международным правилам 20-значный SSCC.
	//В связи с этим поддерживаем оба формата кода: запрашиваем с сервера код в двух видах - 18 и 20 символьный - и заполняем в ТЧ тот вариант, 
	//по которому с сервера вернулась информация об агрегации.
	Если РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.ПроверитьЗначениеКонстанты("ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК")
		И Параметры.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда //Усложненная проверка требуется только для кода SSCC
			
		//Формируем список SSCC в разных форматах
		Если СтрДлина(КодИдентификации) = 20 Тогда
			ПреобразованныйКод = Сред(КодИдентификации, 3); //18-значный SSCC
			ДополнительныйКод  = Неопределено;
		ИначеЕсли СтрДлина(КодИдентификации) = 18 Тогда
			ПреобразованныйКод = "00"   + КодИдентификации;
			ДополнительныйКод  = "(00)" + КодИдентификации;
		Иначе
			ПреобразованныйКод = Неопределено;
			ДополнительныйКод  = Неопределено;
		КонецЕсли;
		
		МассивКМДляПроверки = Новый Массив();
		МассивКМДляПроверки.Добавить(КодИдентификации);
		Если НЕ ПреобразованныйКод = Неопределено Тогда
			МассивКМДляПроверки.Добавить(ПреобразованныйКод);
		КонецЕсли;
		Если НЕ ДополнительныйКод = Неопределено Тогда
			МассивКМДляПроверки.Добавить(ДополнительныйКод);
		КонецЕсли;
		
		УдалосьПолучитьСоставАгрегации = Ложь;
		//Начинаем опрос сервера по каждому из сформированных кодов для проверки
		Для Каждого КодSSCC Из МассивКМДляПроверки Цикл
			СтруктураЗапрос 	   = Новый Структура("Штрихкод, ВидУпаковки, ВидПродукции, ФорматBase64", КодSSCC, Параметры.ВидУпаковки, Параметры.ВидПродукцииИС, Ложь); //общие параметры у кодов одинаковые
			ДанныеПоГрупповомуКоду = ИнтеграцияИСМПТКВызовСервера.ЗапроситьДанныеПоКодуАгрегации(СтруктураЗапрос, Объект.Организация, ТокенАвторизации);	
			
			Если Не ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
				//Если по коду вернулась информация, значит нужно использовать этот формат для заполнения таблицы документа
				УдалосьПолучитьСоставАгрегации = Истина;
				ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки_ПродолжитьПослеПроверки(Форма, РезультатВыполнения, Параметры, ДанныеПоГрупповомуКоду, КодSSCC, УдалосьПолучитьСоставАгрегации);	
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не УдалосьПолучитьСоставАгрегации Тогда
			ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки_СообщитьОбОшибке(Форма, Параметры);
		КонецЕсли;
	Иначе
		СтруктураЗапрос 	   = Новый Структура("Штрихкод, ВидУпаковки, ВидПродукции, ФорматBase64", КодИдентификации, Параметры.ВидУпаковки, Параметры.ВидПродукцииИС, Ложь);
		ДанныеПоГрупповомуКоду = ИнтеграцияИСМПТКВызовСервера.ЗапроситьДанныеПоКодуАгрегации(СтруктураЗапрос, Объект.Организация, ТокенАвторизации);
		
		Если ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
			ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки_СообщитьОбОшибке(Форма, Параметры);
		Иначе 
			ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки_ПродолжитьПослеПроверки(Форма, РезультатВыполнения, Параметры, ДанныеПоГрупповомуКоду, КодИдентификации, Ложь);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки_СообщитьОбОшибке(Форма, Параметры)
	
	Объект = Форма.Объект;
	ТекстОшибки = НСтр("ru = 'Не удалось получить информацию по коду упаковки с сервера. Уточните данные вручную.'");
	ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
	//Открываем форму для ручного уточнения данных упаковки
	ПараметрыОткрытияФормы = Новый Структура("Номенклатура, СтруктураКодовМаркировки, Организация", ИнтеграцияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура(), Параметры, Объект.Организация);
	ОткрытьФорму("Обработка.ОбменИСМПТК.Форма.ФормаУточненияДанныхИС", ПараметрыОткрытияФормы, Форма,,,, Новый ОписаниеОповещения("ЗавершитьДобавлениеКодаМаркировки", Форма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ЗавершениеПолучитьДанныеПоГрупповомуКодуМаркировки_ПродолжитьПослеПроверки(Форма, РезультатВыполнения, Параметры, ДанныеПоГрупповомуКоду, КодИдентификации, ВыполнялосьПреобразованиеКМ)
	
	Объект = Форма.Объект;
	СтруктураКода = ИнтеграцияИСМПТКВызовСервера.ПолучитьИнформациюПоГрупповомуКоду(ДанныеПоГрупповомуКоду, КодИдентификации, Параметры.ВидУпаковки);
	
	//Заменяем данные в ТЧ по результату разбора данных сервера
	Параметры.GTIN 			 = СтруктураКода.GTIN;
	Параметры.GTINВерхнегоУровня = СтруктураКода.GTINВерхнегоУровня;
	Параметры.EAN 			 = СтруктураКода.EAN;
	Параметры.Количество 	 = СтруктураКода.Количество;
	Параметры.ВидПродукцииИС = СтруктураКода.ВидПродукции;
	ЭтоГрупповаяУпаковка 	 = СтруктураКода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая");
	
	Номенклатура = СтруктураКода.Номенклатура;
	
	Параметры.Вставить("Номенклатура",	   Номенклатура);
	Параметры.Вставить("КодИдентификации", КодИдентификации); 
	Параметры.Вставить("ВыполнялосьПреобразованиеКМ", ВыполнялосьПреобразованиеКМ);
	Форма.ДобавитьКодМаркировкиВДерево(Номенклатура, Параметры);
	
	НоваяСтрока = Объект.Марки.Добавить();
	
	НоваяСтрока.Номенклатура 		= Параметры.Номенклатура;
	НоваяСтрока.Количество 			= Параметры.Количество;
	НоваяСтрока.ВидУпаковки			= Параметры.ВидУпаковки;
	НоваяСтрока.ВидПродукцииИС		= Параметры.ВидПродукцииИС;
	НоваяСтрока.GTINВерхнегоУровня	= ?(ЭтоГрупповаяУпаковка, Параметры.GTINВерхнегоУровня, "");
	НоваяСтрока.GTIN = ?(ЗначениеЗаполнено(Параметры.GTINВерхнегоУровня) И Не ЭтоГрупповаяУпаковка, Параметры.GTINВерхнегоУровня, Параметры.GTIN);
	
	Если ВыполнялосьПреобразованиеКМ Тогда
		НоваяСтрока.КодМаркировки    = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(КодИдентификации);
		НоваяСтрока.КодИдентификации = КодИдентификации;
		НоваяСтрока.EAN 			 = КодИдентификации;
	Иначе
		НоваяСтрока.КодМаркировки    = Параметры.КодМаркировки;
		НоваяСтрока.КодИдентификации = Параметры.КодИдентификации;
		НоваяСтрока.EAN 			 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодEANИзGTIN(НоваяСтрока.GTIN);
	КонецЕсли;
	
	Если ИнтеграцияИСМПТКВызовСервера.ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() Тогда
		ДополнительныеПараметры = Новый Структура("КодИдентификации", НоваяСтрока.КодИдентификации);
		Форма.ТокенАвторизацииВрем = Неопределено;
		//отложено: вывод сообщения с результатом запроса статуса
		ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере = Новый ОписаниеОповещения("ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере", Форма, ДополнительныеПараметры);
		
		СтруктурныеЕдиницы = Новый Соответствие;
		СтруктурныеЕдиницы.Вставить(Объект.Организация, "");
		//предварительный запрос токена
		ПолучитьКлючАвторизации(ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере, СтруктурныеЕдиницы);
		
		//Если по какой-то причине не удалось выполнить получение Токена, то и запрос на проверку статуса КМ не выполнялся,
		//об этом нужно предупредить и отметить непроверенные коды.
		Если форма.ТокенАвторизацииВрем = Неопределено Тогда 
			Форма.СообщитьОНевозможностиВыполнитьПроверкуСтатусаКМ("Фоновый");
		КонецЕсли;			
		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	Форма.СформироватьДеревоКодовМаркировки();
	
КонецПроцедуры

#КонецОбласти