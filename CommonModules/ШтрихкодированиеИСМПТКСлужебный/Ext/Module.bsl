Процедура ДополнитьНастройкиРазбораКодаМаркировки(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля) Экспорт
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.Табачная Тогда
		
		ОписаниеКодаМаркировкиТабачногоБлока(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		
		ОписаниеКодаМаркировкиТабачнойПачки(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		
		ОписаниеКодаМаркировкиТабачнойПачкиКодПроверки8(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		
	КонецЕсли;
	
	// Упаковка
	ОписаниеКодаМаркировкиЛогистическаяУпаковка20(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
	
	Если ВидПродукции <> Перечисления.ВидыПродукцииИСМПТК.Табачная Тогда
		
		ОписаниеКодаМаркировкиЛогистическаяУпаковка18(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует описание кода маркировки для табачного блока
Процедура ОписаниеКодаМаркировкиТабачногоБлока(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	Алфавит = НастройкиРазбораКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("GTIN, СерийныйНомер, МРЦСтрокой, КодПроверки, КодТНВЭД");
	ОписаниеЭлементовКМ.GTIN          = ОписаниеЭлементаКодаМаркировки("01",   "GTIN",         14);
	ОписаниеЭлементовКМ.СерийныйНомер = ОписаниеЭлементаКодаМаркировки("21",   "СерийныйНомер", 7, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.МРЦСтрокой    = ОписаниеЭлементаКодаМаркировки("8005", "МРЦСтрокой",    6, Алфавит.Цифры);
	ОписаниеЭлементовКМ.КодПроверки   = ОписаниеЭлементаКодаМаркировки("93",   "КодПроверки",   4, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.КодТНВЭД      = ОписаниеЭлементаКодаМаркировки("240",  "КодТНВЭД",      8, Алфавит.Цифры);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + МРЦСтрокой");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + МРЦСтрокой + КодПроверки");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + МРЦСтрокой + КодТНВЭД");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + МРЦСтрокой + КодПроверки + КодТНВЭД");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КодПроверки");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КодТНВЭД");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КодПроверки + КодТНВЭД");
	
	СписокШаблонов = ШтрихкодированиеОбщийИСМПТКСлужебный.ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = ШтрихкодированиеОбщийИСМПТКСлужебный.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.GS1_DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИСМПТК.Групповая;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.Вставить("ВключаетМРЦ", Ложь);
	СоставКодаМаркировки.Вставить("МРЦ",         0);
	СоставКодаМаркировки.Вставить("МРЦСтрокой", "");
	СоставКодаМаркировки.Вставить("КодТНВЭД",   "");
	
	Для Каждого ОписаниеШаблонаКодаМаркировки Из СписокШаблонов Цикл
	
		НастройкаОписанияКодаМаркировки = Новый Структура(
			"ВидПродукции, ТипШтрихкодаИВидУпаковки, СоставКодаМаркировки, ОписаниеШаблонаКодаМаркировки, ДанныеОбщегоМодуля");
		НастройкаОписанияКодаМаркировки.ВидПродукции                  = ВидПродукции;
		НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки      = ТипШтрихкодаИВидУпаковки;
		НастройкаОписанияКодаМаркировки.СоставКодаМаркировки          = СоставКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ОписаниеШаблонаКодаМаркировки = ОписаниеШаблонаКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля            = ДанныеОбщегоМодуля;
		
		ШтрихкодированиеОбщийИСМПТКСлужебный.ДобавитьОписаниеШаблонаКодаМаркировкиВидаПродукции(
			НастройкиРазбораКодаМаркировки, НастройкаОписанияКодаМаркировки);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует описание кода маркировки для табачной пачки
Процедура ОписаниеКодаМаркировкиТабачнойПачки(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	Алфавит = НастройкиРазбораКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("GTIN, СерийныйНомер, МРЦСтрокой, КодПроверки");
	ОписаниеЭлементовКМ.GTIN          = ОписаниеЭлементаКодаМаркировки("", "GTIN",         14);
	ОписаниеЭлементовКМ.СерийныйНомер = ОписаниеЭлементаКодаМаркировки("", "СерийныйНомер", 7, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.МРЦСтрокой    = ОписаниеЭлементаКодаМаркировки("", "МРЦСтрокой",    4, Алфавит.БуквыЦифрыЗнакиМРЦ);
	ОписаниеЭлементовКМ.КодПроверки   = ОписаниеЭлементаКодаМаркировки("", "КодПроверки",   4, Алфавит.БуквыЦифрыЗнаки);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + МРЦСтрокой");
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + МРЦСтрокой + КодПроверки");
	
	СписокШаблонов = ШтрихкодированиеОбщийИСМПТКСлужебный.ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = ШтрихкодированиеОбщийИСМПТКСлужебный.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИСМПТК.Потребительская;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.Вставить("ВключаетМРЦ", Ложь);
	СоставКодаМаркировки.Вставить("МРЦ",         0);
	СоставКодаМаркировки.Вставить("МРЦСтрокой", "");
	
	Для Каждого ОписаниеШаблонаКодаМаркировки Из СписокШаблонов Цикл
		
		НастройкаОписанияКодаМаркировки = Новый Структура(
			"ВидПродукции, ТипШтрихкодаИВидУпаковки, СоставКодаМаркировки, ОписаниеШаблонаКодаМаркировки, ДанныеОбщегоМодуля");
		НастройкаОписанияКодаМаркировки.ВидПродукции                  = ВидПродукции;
		НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки      = ТипШтрихкодаИВидУпаковки;
		НастройкаОписанияКодаМаркировки.СоставКодаМаркировки          = СоставКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ОписаниеШаблонаКодаМаркировки = ОписаниеШаблонаКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля            = ДанныеОбщегоМодуля;
		
		ШтрихкодированиеОбщийИСМПТКСлужебный.ДобавитьОписаниеШаблонаКодаМаркировкиВидаПродукции(
			НастройкиРазбораКодаМаркировки, НастройкаОписанияКодаМаркировки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОписаниеКодаМаркировкиТабачнойПачкиКодПроверки8(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	Алфавит = НастройкиРазбораКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("GTIN, СерийныйНомер, КодПроверки");
	ОписаниеЭлементовКМ.GTIN          = ОписаниеЭлементаКодаМаркировки("", "GTIN",         14);
	ОписаниеЭлементовКМ.СерийныйНомер = ОписаниеЭлементаКодаМаркировки("", "СерийныйНомер", 7, Алфавит.БуквыЦифрыЗнаки);
	ОписаниеЭлементовКМ.КодПроверки   = ОписаниеЭлементаКодаМаркировки("", "КодПроверки",   8, Алфавит.БуквыЦифрыЗнаки);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("GTIN + СерийныйНомер + КодПроверки");
	
	СписокШаблонов = ШтрихкодированиеОбщийИСМПТКСлужебный.ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = ШтрихкодированиеОбщийИСМПТКСлужебный.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИСМПТК.Потребительская;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.Вставить("ВключаетМРЦ", Ложь);
	СоставКодаМаркировки.Вставить("МРЦ",         0);
	СоставКодаМаркировки.Вставить("МРЦСтрокой", "");
	
	Для Каждого ОписаниеШаблонаКодаМаркировки Из СписокШаблонов Цикл
		
		НастройкаОписанияКодаМаркировки = Новый Структура(
			"ВидПродукции, ТипШтрихкодаИВидУпаковки, СоставКодаМаркировки, ОписаниеШаблонаКодаМаркировки, ДанныеОбщегоМодуля");
		НастройкаОписанияКодаМаркировки.ВидПродукции                  = ВидПродукции;
		НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки      = ТипШтрихкодаИВидУпаковки;
		НастройкаОписанияКодаМаркировки.СоставКодаМаркировки          = СоставКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ОписаниеШаблонаКодаМаркировки = ОписаниеШаблонаКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля            = ДанныеОбщегоМодуля;
		
		ШтрихкодированиеОбщийИСМПТКСлужебный.ДобавитьОписаниеШаблонаКодаМаркировкиВидаПродукции(
			НастройкиРазбораКодаМаркировки, НастройкаОписанияКодаМаркировки);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует описание кода маркировки для логистической упаковки
Процедура ОписаниеКодаМаркировкиЛогистическаяУпаковка18(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	// Примеры:
	//	- исмп:
	//	* 199988888800000013 - из сервиса
	
	Алфавит = НастройкиРазбораКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("SSCC");
	ОписаниеЭлементовКМ.SSCC = ОписаниеЭлементаКодаМаркировки("", "SSCC", 18, Алфавит.Цифры); // Серийный код транспортной упаковки, представленный в виде цифрового номера.
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("SSCC");
	
	СписокШаблонов = ШтрихкодированиеОбщийИСМПТКСлужебный.ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = ШтрихкодированиеОбщийИСМПТКСлужебный.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.SSCC;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИСМПТК.Логистическая;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	
	Для Каждого ОписаниеШаблонаКодаМаркировки Из СписокШаблонов Цикл
		
		НастройкаОписанияКодаМаркировки = Новый Структура(
			"ВидПродукции, ТипШтрихкодаИВидУпаковки, СоставКодаМаркировки, ОписаниеШаблонаКодаМаркировки, ДанныеОбщегоМодуля");
		НастройкаОписанияКодаМаркировки.ВидПродукции                  = ВидПродукции;
		НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки      = ТипШтрихкодаИВидУпаковки;
		НастройкаОписанияКодаМаркировки.СоставКодаМаркировки          = СоставКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ОписаниеШаблонаКодаМаркировки = ОписаниеШаблонаКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля            = ДанныеОбщегоМодуля;
		
		ШтрихкодированиеОбщийИСМПТКСлужебный.ДобавитьОписаниеШаблонаКодаМаркировкиВидаПродукции(
			НастройкиРазбораКодаМаркировки, НастройкаОписанияКодаМаркировки);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует описание кода маркировки для логистической упаковки
Процедура ОписаниеКодаМаркировкиЛогистическаяУпаковка20(НастройкиРазбораКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	// Примеры:
	//	- исмп:
	//	* (00)199988888800000013 - в ИБ
	//	* 00199988888800000013 - от сканера
	//	- мотп:
	//	* 00199988888800000013 - из сервиса, от сканера
	//	* (00)199988888800000013 - в ИБ
	
	Алфавит = НастройкиРазбораКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("SSCC");
	ОписаниеЭлементовКМ.SSCC = ОписаниеЭлементаКодаМаркировки("00", "SSCC", 18, Алфавит.Цифры); // Серийный код транспортной упаковки, представленный в виде цифрового номера.
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("SSCC");
	
	СписокШаблонов = ШтрихкодированиеОбщийИСМПТКСлужебный.ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = ШтрихкодированиеОбщийИСМПТКСлужебный.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.SSCC;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИСМПТК.Логистическая;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	
	Для Каждого ОписаниеШаблонаКодаМаркировки Из СписокШаблонов Цикл
		
		НастройкаОписанияКодаМаркировки = Новый Структура(
			"ВидПродукции, ТипШтрихкодаИВидУпаковки, СоставКодаМаркировки, ОписаниеШаблонаКодаМаркировки, ДанныеОбщегоМодуля");
		НастройкаОписанияКодаМаркировки.ВидПродукции                  = ВидПродукции;
		НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки      = ТипШтрихкодаИВидУпаковки;
		НастройкаОписанияКодаМаркировки.СоставКодаМаркировки          = СоставКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ОписаниеШаблонаКодаМаркировки = ОписаниеШаблонаКодаМаркировки;
		НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля            = ДанныеОбщегоМодуля;
		
		ШтрихкодированиеОбщийИСМПТКСлужебный.ДобавитьОписаниеШаблонаКодаМаркировкиВидаПродукции(
			НастройкиРазбораКодаМаркировки, НастройкаОписанияКодаМаркировки);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеЭлементаКодаМаркировки(Код, Имя, КоличествоЗнаков, АлфавитДопустимыхСимволов = "")
	
	Возврат ШтрихкодированиеОбщийИСМПТКСлужебный.ОписаниеЭлементаКодаМаркировки(Код, Имя, КоличествоЗнаков, АлфавитДопустимыхСимволов);
	
КонецФункции

Функция НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки) Экспорт
	
	СоставКодаМаркировки = Новый Структура;
	
	Если ТипШтрихкодаИВидУпаковки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская")
		Или ТипШтрихкодаИВидУпаковки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
		
		СоставКодаМаркировки.Вставить("GTIN",          "");
		СоставКодаМаркировки.Вставить("EAN",           "");
		СоставКодаМаркировки.Вставить("СерийныйНомер", "");
		
	ИначеЕсли ТипШтрихкодаИВидУпаковки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая")
		И ТипШтрихкодаИВидУпаковки.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.SSCC") Тогда
		
		СоставКодаМаркировки.Вставить("SSCC", "");
		
	ИначеЕсли ТипШтрихкодаИВидУпаковки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая")
		И ТипШтрихкодаИВидУпаковки.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.GS1_128") Тогда
		
		СоставКодаМаркировки.Вставить("GTIN", "");
		СоставКодаМаркировки.Вставить("EAN",  "");
		
	КонецЕсли;
	
	Возврат СоставКодаМаркировки;
	
КонецФункции

Функция ЭлементКодаМаркировкиСоответствуетОписанию(Значение, ОписаниеЭлементаКМ, СоставКодаМаркировки, ПараметрыОписанияКодаМаркировки) Экспорт
	
	Если ОписаниеЭлементаКМ.Имя = "GTIN" Тогда
		
		ЗначениеEAN = EANПоКодуМаркировки(Значение);
		Если ЗначениеEAN = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		EANОписаниеЭлементаКМ = ОписаниеЭлементаКодаМаркировки("", "EAN", 0);
		ШтрихкодированиеОбщийИСМПТКСлужебный.ЗаполнитьСоставКодаМаркировки(СоставКодаМаркировки, EANОписаниеЭлементаКМ, ЗначениеEAN);
		
	ИначеЕсли ОписаниеЭлементаКМ.Имя = "SSCC" Тогда
		
		КонтрольноеЧисло = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.КонтрольноеЧислоSSCC(Лев(Значение, ОписаниеЭлементаКМ.Длина - 1));
		
		Возврат КонтрольноеЧисло =  Число(Прав(Значение, 1));
		
	ИначеЕсли ОписаниеЭлементаКМ.Имя = "МРЦСтрокой" Тогда
		
		МРЦ = 0;
		
		Если Не ЭлементКодаМаркировкиСоответствуетОписаниюМРЦ(Значение, ОписаниеЭлементаКМ, ПараметрыОписанияКодаМаркировки, МРЦ) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ШтрихкодированиеОбщийИСМПТКСлужебный.ЗаполнитьСоставКодаМаркировки(
			СоставКодаМаркировки, Новый Структура("Имя", "МРЦ"), МРЦ);
		
		ШтрихкодированиеОбщийИСМПТКСлужебный.ЗаполнитьСоставКодаМаркировки(
			СоставКодаМаркировки, Новый Структура("Имя", "ВключаетМРЦ"), Истина);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Вычисляет штрихкода EAN по коду маркировки.
//
// Параметры:
//  КодМаркировки - Строка - Описание
// Возвращаемое значение:
//  Неопределено, Строка - Описание
Функция EANПоКодуМаркировки(КодМаркировки)
	
	Если СтрНачинаетсяС(КодМаркировки, "(") Тогда
		GTIN = Сред(КодМаркировки, 5, 14);
	Иначе
		GTIN = Лев(КодМаркировки, 14);
	КонецЕсли;
	
	ЭтоGTIN = МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(GTIN);
	Если Не ЭтоGTIN Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	EAN = ШтрихкодированиеИСМПТК.ШтрихкодEANИзGTIN(GTIN);
	
	Возврат EAN;
	
КонецФункции

Функция ЭлементКодаМаркировкиСоответствуетОписаниюМРЦ(Значение, ОписаниеЭлементаКМ, ПараметрыОписанияКодаМаркировки, МРЦ = 0)
	
	Если ПараметрыОписанияКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская Тогда
		
		МРЦ = 0;
		
		Для Индекс = 1 По СтрДлина(Значение) Цикл
			Символ = Сред(Значение, Индекс, 1);
			ИндексСимвола = СтрНайти(ОписаниеЭлементаКМ.Алфавит, Символ) - 1;
			Если ИндексСимвола < 0 Тогда
				Возврат Ложь;
			КонецЕсли;
			МРЦ = МРЦ + Pow(80, 4 - Индекс) * ИндексСимвола;
		КонецЦикла;
		
		// Если цена <= 5000 и нет копеек, то высокая вероятность, что это реальное МРЦ.
		Если МРЦ > 500000 Или МРЦ % 100 > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		МРЦ = Число(Значение);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МРЦ) Тогда
		МРЦ = МРЦ / 100;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ПреобразоватьЗначениеДляЗаполненияСоставаКодаМаркировки(ПараметрыОписанияКодаМаркировки, СоставКодаМаркировки, ОписаниеЭлементаКМ, Значение) Экспорт
	
	Если СоставКодаМаркировки = Неопределено Или Не СоставКодаМаркировки.Свойство(ОписаниеЭлементаКМ.Имя) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеЭлементаКМ.Имя = "ГоденДо" Тогда
		
		Если ОписаниеЭлементаКМ.Код = "17" Тогда
			// Дата окончания срока годности продукции (срок хранения более 72 часов).
			// Формат: YYMMDD
			КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.Дата);
		Иначе
			// Дата окончания срока годности продукции (срок хранения менее 72 часов)
			// Формат: YYMMDDHHMM
			КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
		КонецЕсли;
		
		ОписаниеТипа = Новый ОписаниеТипов("Дата",,, КвалификаторыДаты);
		Значение = ОписаниеТипа.ПривестиЗначение("20" + Значение);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоНеФормализованныйКодМаркировки(ПараметрыРазбораКодаМаркировки, Настройки, ДанныеРезультата) Экспорт
	
	Если ЭтоНеФормализованныйКодМаркировкиГрупповойУпаковкиТабака(
			ПараметрыРазбораКодаМаркировки, Настройки, ДанныеРезультата) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЭтоНеФормализованныйКодМаркировкиЛогистическойУпаковкиТабакаGS1128(
			ПараметрыРазбораКодаМаркировки, Настройки, ДанныеРезультата) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоНеФормализованныйКодМаркировкиГрупповойУпаковкиТабака(ПараметрыРазбораКодаМаркировки, Настройки, ДанныеРезультата)
	
	ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.Табачная;
	
	Если Настройки.ДоступныеВидыПродукции.Найти(ВидПродукции) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// После идентификатора 93 для блоков и только для них может быть произвольное количество идентификаторов применения
	// 010460620310255621!MmNZo2800514900093Ij5E240FA075486.00
	
	ШаблонКодаМаркировкиДляПроверки = Новый Массив;
	
	ИдентификаторКодаПроверки = "КодПроверки";
	
	ОтборПоТабачнымБлокам  = Новый Структура("ВидПродукции, ВидУпаковки", ВидПродукции, Перечисления.ВидыУпаковокИСМПТК.Групповая);
	ШаблоныКодовМаркировки = Настройки.ШаблоныКодовМаркировкиПоВидамПродукции.НайтиСтроки(ОтборПоТабачнымБлокам);
	
	Для Каждого ШаблонКодаМаркировки Из ШаблоныКодовМаркировки Цикл
		
		ДанныеШаблона = Настройки.ШаблоныИОписанияВидовПродукции[ШаблонКодаМаркировки.Шаблон];
		
		Если ДанныеШаблона.ОписаниеКодаМаркировки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеИдентификатора = ДанныеШаблона.ОписаниеКодаМаркировки[ДанныеШаблона.ОписаниеКодаМаркировки.ВГраница()];
		
		Если ВРег(ОписаниеИдентификатора.Имя) = ВРег(ИдентификаторКодаПроверки) Тогда
			ШаблонКодаМаркировкиДляПроверки.Добавить(ШаблонКодаМаркировки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ШаблонКодаМаркировкиДляПроверки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИсходныйКодМаркировки = ПараметрыРазбораКодаМаркировки.КодМаркировки;
	ДанныеРезультата      = Неопределено;
	
	Для Каждого ШаблонКодаМаркировки Из ШаблонКодаМаркировкиДляПроверки Цикл
		
		Если ПараметрыРазбораКодаМаркировки.НачинаетсяСоСкобки Или ПараметрыРазбораКодаМаркировки.СодержитGS1 Тогда
			ПараметрыРазбораКодаМаркировки.ДлинаКодаМаркировки = ШаблонКодаМаркировки.ДлинаСоСкобкой;
		Иначе
			ПараметрыРазбораКодаМаркировки.ДлинаКодаМаркировки = ШаблонКодаМаркировки.Длина;
		КонецЕсли;
		
		ПараметрыРазбораКодаМаркировки.КодМаркировки = Лев(ИсходныйКодМаркировки, ПараметрыРазбораКодаМаркировки.ДлинаКодаМаркировки);
		
		ДанныеРезультата = ШтрихкодированиеОбщийИСМПТКСлужебный.КодМаркировкиСоответствуетШаблону(ПараметрыРазбораКодаМаркировки, Настройки, ШаблонКодаМаркировки);
		
		Если ЗначениеЗаполнено(ДанныеРезультата) Тогда
			
			ДанныеРезультата.КодМаркировки = ИсходныйКодМаркировки;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыРазбораКодаМаркировки.КодМаркировки       = ИсходныйКодМаркировки;
	ПараметрыРазбораКодаМаркировки.ДлинаКодаМаркировки = СтрДлина(ИсходныйКодМаркировки);
	
	Возврат ЗначениеЗаполнено(ДанныеРезультата);
	
КонецФункции

Функция ЭтоНеФормализованныйКодМаркировкиЛогистическойУпаковкиТабакаGS1128(ПараметрыРазбораКодаМаркировки, Настройки, ДанныеРезультата)
	
	ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная");
	
	Если Настройки.ДоступныеВидыПродукции.Найти(ВидПродукции) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФильтрПоВидуПродукции = ПараметрыРазбораКодаМаркировки.ФильтрПоВидуПродукции;
	
	Если Не (ФильтрПоВидуПродукции.Использовать
		И ФильтрПоВидуПродукции.ВидыПродукции.Количество() = 1
		И ФильтрПоВидуПродукции.ВидыПродукции[0] = ВидПродукции) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КодМаркировки = ПараметрыРазбораКодаМаркировки.КодМаркировки;
	
	ЗначениеИдентификатораGTIN            = Неопределено;
	ЗавершитьВыполнениеЕслиGTINНеЗаполнен = Ложь;
	
	Если ПараметрыРазбораКодаМаркировки.НачинаетсяСоСкобки Тогда
		
		РезультатРазбора = ПодключаемоеОборудованиеИСМПТККлиентСервер.РазобратьСтрокуШтрихкодаGS1(КодМаркировки);
		Если РезультатРазбора.Разобран Тогда
			
			ЭлементКМ = РезультатРазбора.ДанныеШтрихкода["01"];
			Если ЭлементКМ = Неопределено Тогда
				ЭлементКМ = РезультатРазбора.ДанныеШтрихкода["02"];
				Если ЭлементКМ <> Неопределено Тогда
					ЗначениеИдентификатораGTIN = ЭлементКМ.Значение;
				КонецЕсли;
			Иначе
				ЗначениеИдентификатораGTIN = ЭлементКМ.Значение;
			КонецЕсли;
			
		Иначе
			
			ИдентификаторGTIN = Лев(КодМаркировки, 4);
			Если ИдентификаторGTIN = "(01)" Или ИдентификаторGTIN = "(02)" Тогда
				ЗначениеИдентификатораGTIN = Сред(КодМаркировки, 5, 14);
			КонецЕсли;
			
			ЗавершитьВыполнениеЕслиGTINНеЗаполнен = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыРазбораКодаМаркировки.СодержитGS1 Тогда
		
		РезультатРазбора = ПараметрыРазбораКодаМаркировки.РезультатРазбора;
		
		ЭлементКМ = РезультатРазбора.ДанныеШтрихкода["01"];
		Если ЭлементКМ = Неопределено Тогда
			ЭлементКМ = РезультатРазбора.ДанныеШтрихкода["02"];
			Если ЭлементКМ <> Неопределено Тогда
				ЗначениеИдентификатораGTIN = ЭлементКМ.Значение;
			КонецЕсли;
		Иначе
			ЗначениеИдентификатораGTIN = ЭлементКМ.Значение;
		КонецЕсли;
		
	Иначе
		// Делаем предположение что это табак!
		Если Не ШтрихкодированиеИСМПТККлиентСервер.КодСоответствуетАлфавиту(КодМаркировки, Настройки.Алфавит.БуквыЦифрыЗнаки) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(КодМаркировки) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ИдентификаторGTIN = Лев(КодМаркировки, 2);
		Если ИдентификаторGTIN = "01" Или ИдентификаторGTIN = "02" Тогда
			ЗначениеИдентификатораGTIN = Сред(КодМаркировки, 3, 14);
		КонецЕсли;
		
	КонецЕсли;
	
	GTIN = "";
	Если ЗначениеЗаполнено(ЗначениеИдентификатораGTIN)
		И ТипЗнч(ЗначениеИдентификатораGTIN) = Тип("Строка")
		И СтрДлина(ЗначениеИдентификатораGTIN) = 14
		И МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(ЗначениеИдентификатораGTIN) Тогда
		
		GTIN = ЗначениеИдентификатораGTIN;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(GTIN) И ЗавершитьВыполнениеЕслиGTINНеЗаполнен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидыПродукции = Новый ФиксированныйМассив(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидПродукции));
	
	ТипШтрихкодаИВидУпаковки = ШтрихкодированиеОбщийИСМПТКСлужебный.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.GS1_128");
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая");
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.GTIN = GTIN;
	
	Если ЗначениеЗаполнено(СоставКодаМаркировки.GTIN) Тогда
		СоставКодаМаркировки.EAN = ШтрихкодированиеИСМПТК.ШтрихкодEANИзGTIN(СоставКодаМаркировки.GTIN);
	КонецЕсли;
	
	ДанныеРезультата = ШтрихкодированиеОбщийИСМПТКСлужебный.НовыйРезультатРазбораКодаМаркировки();
	ДанныеРезультата.КодМаркировки        = КодМаркировки;
	ДанныеРезультата.ТипШтрихкода         = ТипШтрихкодаИВидУпаковки.ТипШтрихкода;
	ДанныеРезультата.ВидУпаковки          = ТипШтрихкодаИВидУпаковки.ВидУпаковки;
	ДанныеРезультата.ВидыПродукции        = ВидыПродукции;
	ДанныеРезультата.СоставКодаМаркировки = СоставКодаМаркировки;
	
	НормализованныйКодМаркировки = ШтрихкодированиеОбщийИСМПТКСлужебный.НормализоватьКодМаркировки(
		ДанныеРезультата, ВидПродукции);
	
	ДанныеРезультата.НормализованныйКодМаркировки = НормализованныйКодМаркировки;
	
	Возврат Истина;
	
КонецФункции

Функция УбратьСкобкиУИдентификатораПрименения_Обувь(КодМаркировки) Экспорт
	
	
	КодМаркировки = СтрЗаменить(КодМаркировки, "(01)", "01");
	КодМаркировки = СтрЗаменить(КодМаркировки, "(21)", "21");
	КодМаркировки = СтрЗаменить(КодМаркировки, "(91)", "91");
	КодМаркировки = СтрЗаменить(КодМаркировки, "(92)", "92");
	
	Возврат КодМаркировки;
	
КонецФункции

Функция СтрокуВBase64(ДанныеСтрока) Экспорт
	
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(ДанныеСтрока);
	
	Если ДвоичныеДанные = Неопределено Тогда
		Штрихкод = ДанныеСтрока;
	Иначе
		Штрихкод = ПолучитьBase64СтрокуИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции
