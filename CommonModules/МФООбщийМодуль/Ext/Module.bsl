#Область ПрограммныйИнтерфейс

// Процедура по загрузке документов, вызывается регламентным заданием
// управляет порционным выполнением загрузки займов и проведения документов после порции загрузки
Процедура ЗагрузитьЗаймы(ОбработатьБезФОновыхЗаданий = Ложь) Экспорт
	
	МассивОписанийОбщаяЗагрузка = новый Массив;
	
	//определение даты запроса
	ДатаКонстанта = Константы.МФОДатаОбновления.Получить();  
	
	Если Не ЗначениеЗаполнено(ДатаКонстанта) тогда       
		ДатаДляУстановкиКонстанты = НачалоГода(ТекущаяДатаСеанса());
		Константы.МФОДатаОбновления.Установить(ДатаДляУстановкиКонстанты);
		ДатаКонстанта = ДатаДляУстановкиКонстанты;
	КонецЕсли;
	
	ДатаКонстанта = ДатаКонстанта - (60*60*24);//отнимаем один день от константы для запроса на вчерашний день
	ДатаЗапроса = "&date=" + Формат(ДатаКонстанта, "ДФ=yyyy-MM-dd");// + " " + Формат(ДатаКонстанта, "ДЛФ=T");
	Константы.МФОДатаОбновленияВременная.Установить(ДатаКонстанта);                                            
	
	МассивОписанийОбщаяЗагрузка.Добавить("Начало обработки загрузки документов " + ТекущаяДата());
	
	//определение общего количества страниц, в случае если количество страниц не получено то отмена операции	
	КоличествоСтраниц = ПолучитьКоличествоСтраниц(ДатаЗапроса);    
	Если КоличествоСтраниц = 0 тогда
		Документы.МФОЛогирование.ЗаписатьДокументЛог("Обработка документов не выполнена", 
		"Обработка загрузки документов не выполнена 
		|Не была получена информация об общем количестве страниц", 1); 
		Возврат;
	КОнецЕсли;
	МассивОписанийОбщаяЗагрузка.Добавить(СтрШаблон("Общее количество страниц %1",КоличествоСтраниц));
	НачальнаяСтраница = Константы.МФОНачальнаяСтраница.Получить();
	
	ДокументЛог = Документы.МФОЛогирование.ПолучитьНовыйДокументЛог("Обработка общей загрузки документов на дату " + Формат(ДатаКонстанта,"ДФ=dd.MM.yyyy") ,1);
	Документы.МФОЛогирование.ЗаписатьДокументЛог(,МассивОписанийОбщаяЗагрузка,1,,ДокументЛог);
	МассивОписанийОбщаяЗагрузка = новый Массив;
					
	//обработка документов по порциям
	Пока НачальнаяСтраница <= КоличествоСтраниц Цикл
		НачальнаяСтраница = Константы.МФОНачальнаяСтраница.Получить(); 
		Если НачальнаяСтраница > КоличествоСтраниц тогда
			Продолжить;
		КонецЕсли;
		
		//Запуск процедуры по загрузке займов с учетом начальной и последеней страницы порции и датой запроса.  
		//Если запуск происходит со вкладки отладки то запускается без фоновых заданий 
		Если ОбработатьБезФОновыхЗаданий тогда
			МассивРезультатовЗадания = ЗагрузитьЗаймыПоСтранично(КоличествоСтраниц, ДатаЗапроса, ОбработатьБезФОновыхЗаданий);
		иначе
			//происходит ожидание завершения процедуры для продолжения - ПараметрыОжидания.ОжидатьЗавершение = Неопределено;
			ПараметрыОжидания = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
			ПараметрыОжидания.ОжидатьЗавершение = Неопределено;  
			Результат = ДлительныеОперации.ВыполнитьФункцию(ПараметрыОжидания, 
			"МФООбщийМодуль.ЗагрузитьЗаймыПоСтранично", КоличествоСтраниц, ДатаЗапроса);
			
			Если Результат.Статус = "Ошибка" тогда
				Описание = 	Результат.ПодробноеПредставлениеОшибки; 
				МассивОписанийОбщаяЗагрузка.Добавить(Описание);
				Документы.МФОЛогирование.ЗаписатьДокументЛог("Ошибка выполнения загрузки документов по странично", Описание, 1);
			КонецЕсли;  
			
			МассивРезультатовЗадания = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
			МассивОписанийОбщаяЗагрузка.Добавить(" "); 
			
		КонецЕсли;  
		
		ДобавитьМассивКМассиву(МассивОписанийОбщаяЗагрузка, МассивРезультатовЗадания);
		
		Документы.МФОЛогирование.ЗаписатьДокументЛог(,МассивОписанийОбщаяЗагрузка,,,ДокументЛог);
		МассивОписанийОбщаяЗагрузка = новый Массив;
				
	КонецЦикла;
	
	//запись нового значения в константу для следующего запроса
	ДатаОбновленияВременная =  Константы.МФОДатаОбновленияВременная.Получить();
	Константы.МФОДатаОбновления.Установить(ДатаОбновленияВременная); 
	
	МФОНачальнаяСтраница = Константы.МФОНачальнаяСтраница.Получить(); 
	Если МФОНачальнаяСтраница >= КоличествоСтраниц тогда
		Константы.МФОНачальнаяСтраница.Установить(0);
	КонецЕСли;
	
	Документы.МФОЛогирование.ЗаписатьДокументЛог(,МассивОписанийОбщаяЗагрузка,1,,ДокументЛог);
	
КонецПроцедуры

// Процедура для вызова регламентным заданием. Загружает подразделения с портала указаного в константе МФОХост
Процедура ЗагрузитьПодразделения() Экспорт
	Страница = 1;
	ПоследняяСтраница = 1;
	
	СоответсвиеРеквизитовПодразделение = ПолучитьСоответствиеРеквизитовПодразделение();
	МассивОписаний = новый Массив;
	Попытка
		МассивОписаний.Добавить("Начало обработки загрузки подразделений "+ТекущаяДата());
		Пока Страница <= ПоследняяСтраница Цикл
			
			//Загрузка файла и получение адреса файла на жестком диске
			ИмяФайла = ЗагрузитьJSON("/api/1c/branch_offices?page=" + Страница); 
			
			Если ИмяФайла = Неопределено тогда
				ВызватьИсключение("Файл по подразделения не скачан с портала");
			КонецЕсли;
			
			//Чтение файла json в соответствие
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.ОткрытьФайл(ИмяФайла);
			Данные = ПрочитатьJSON(ЧтениеJSON, Истина);

			Подразделения = Данные.Получить("data");
			ПоследняяСтраница = Данные.Получить("last_page");

			Для Каждого СтрокаПодразделения Из Подразделения Цикл

				Изменения = Ложь; //Флаг на изменение реквизита по сравнению с файлом
				
				//поиск существующего подразделения, если его нет то создание нового 
				Параметры = Новый Массив(2);
				Параметры[0] = СтрокаПодразделения.Получить("id");
				Параметры[1] = СтрокаПодразделения.Получить("label")["ru"];
				
				СтруктураПоискаПодразделения = ВыполнитьФункциюСОбработкойОшибки("НайтиПодразделение", Параметры);
				ПодразделениеСсылка = СтруктураПоискаПодразделения.Ссылка;   
				Если СтруктураПоискаПодразделения.Свойство("Описание") тогда
					МассивОписаний.Добавить(СтруктураПоискаПодразделения.Описание);
				 КонецЕсли;
				 
				Для Каждого Строка Из СтрокаПодразделения Цикл  
					
					//пропуск не проверяемых и пустых значений
					Если (Не ОбщегоНазначения.ЕстьРеквизитОбъекта(
								Строка.Ключ, Метаданные.Справочники.ПодразделенияОрганизаций) 
								и СоответсвиеРеквизитовПодразделение.Получить(Строка.Ключ) = Неопределено) 
						Или Строка.Значение = Неопределено Или Строка.Значение = Null  Тогда
						Продолжить;
					КонецЕсли;

					Если Строка.Ключ = "created_at" Или Строка.Ключ = "updated_at" Или Строка.Ключ = "deleted_at" Тогда
						Значение = ПрочитатьДатуJSON(Строка.Значение, ФорматДатыJSON.ISO);

					ИначеЕсли ТипЗнч(Строка.Значение) = Тип("Соответствие") Тогда
						Значение =  Строка.Значение.Получить("ru");

					Иначе
						Значение =  Строка.Значение;
					КонецЕсли;
					
					//проверка на присутсвие изменения в реквизитах 
					Если Не ПодразделениеСсылка[СоответсвиеРеквизитовПодразделение.Получить(Строка.Ключ)] = Значение Тогда
						Изменения = Истина;

						Если ТипЗНЧ(ПодразделениеСсылка) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
							ПодразделениеСсылка = ПодразделениеСсылка.ПолучитьОбъект();
						КонецЕсли;

						ПодразделениеСсылка[СоответсвиеРеквизитовПодразделение.Получить(Строка.Ключ)]=Значение;
					КонецЕсли;

				КонецЦикла;

				Если Изменения Тогда
					ПодразделениеСсылка.Записать();
					МассивОписаний.Добавить("Подразделение изменено и перезаписано " + ПодразделениеСсылка);
				КонецЕсли;
				
				СтруктураКассаПодразделения = НайтиКассуПодразделения(ПодразделениеСсылка);
				
				Если СтруктураКассаПодразделения.Свойство("Описание") тогда
				  	МассивОписаний.Добавить(СтруктураКассаПодразделения.Описание);
				КонецЕсли;
				
				КассаПодразделенияСсылка = СтруктураКассаПодразделения.Ссылка; 
				
				//Объявляется выше
				//Параметры[0] = СтрокаПодразделения.Получить("id");
				//Параметры[1] = СтрокаПодразделения.Получить("label")["ru"];
				
				Если КассаПодразделенияСсылка.id <> Параметры[0] ИЛИ КассаПодразделенияСсылка.Наименование <> Параметры[1] тогда 
					КассаОбъект = КассаПодразделенияСсылка.ПолучитьОбъект();
					
					Если КассаПодразделенияСсылка.id <> Параметры[0] тогда
						КассаОбъект.id = Параметры[0];
					КонецЕсли;
					
					Если КассаПодразделенияСсылка.Наименование <> Параметры[1] тогда
						КассаОбъект.Наименование = Параметры[1];
					КонецЕсли;
					
				    КассаОбъект.Записать();
					МассивОписаний.Добавить("Касса изменена и перезаписана " + КассаПодразделенияСсылка);
				КонецЕсли;
								
			КонецЦикла;
			ЧтениеJSON.Закрыть();
			Страница = Страница + 1;
			УдалитьФайлы(ИмяФайла);
			
		КонецЦикла;       
		МассивОписаний.Добавить("Загрузка подразделений закончена"); 
		
	Исключение   
		ОписаниеОшибкиЛог = СтрШаблон("Ошибка при обработке полученных данных по Подразделениям
		|%1 ", ОписаниеОшибки());
		Документы.МФОЛогирование.ЗаписатьДокументЛог("Ошибка загрузки подразделений", ОписаниеОшибкиЛог, 1);
		МассивОписаний.Добавить(ОписаниеОшибкиЛог);
		
	КонецПопытки;
	
	Документы.МФОЛогирование.ЗаписатьДокументЛог("Обработана загрузка подразделений",МассивОписаний, 1); 
	
КонецПроцедуры

// Получает очередь документов на перепроведение, проводит их, очищает очередь
// если документ не проведен то помещает обратно в очередь
Процедура ПровестиЗагруженныеДокументы() Экспорт
	
	//Массив описания процедур проведения документов
	МассивОписаний = Новый Массив;
	НачалоЗамера = ТекущаяДата();    
	
	МассивОписаний.Добавить("Начало обработки проведения документов после загрузки: " + НачалоЗамера);
	ДокументЛог = Документы.МФОЛогирование.ПолучитьНовыйДокументЛог("Обработка проведения документов",1);
	Документы.МФОЛогирование.ЗаписатьДокументЛог(,МассивОписаний,1,,ДокументЛог);
	
	МассивОписаний = Новый Массив;
	МассивПровущенныхДокументов = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МФО_ОчередьПроведенияДокументов.ДокументЗайм
	|ИЗ
	|	РегистрСведений.МФО_ОчередьПроведенияДокументов КАК МФО_ОчередьПроведенияДокументов
	|СГРУППИРОВАТЬ ПО
	|	МФО_ОчередьПроведенияДокументов.ДокументЗайм";

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	КоличествоДокументов = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка

			КоличествоДокументов = КоличествоДокументов + 1;
			ДокументЗайм = ВыборкаДетальныеЗаписи.ДокументЗайм.ПолучитьОбъект(); 
			
			//Если активирована пометка то отменить проведение документа
			Если Не ДокументЗайм.ПометкаУдаления Тогда
				ДокументЗайм.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ДокументЗайм.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;

		Исключение
			ТекстОписания = СтрШаблон("Документ №%1 - %2  не удалось провести. Ошибка: %3",
				КоличествоДокументов, ВыборкаДетальныеЗаписи.ДокументЗайм, ОписаниеОшибки());
			МассивОписаний.Добавить(ТекстОписания);
			Документы.МФОЛогирование.ЗаписатьДокументЛог(СтрШаблон("Документ №%1 не удалось провести",ВыборкаДетальныеЗаписи.ДокументЗайм)
						, ТекстОписания, 1, ВыборкаДетальныеЗаписи.ДокументЗайм);
		
			МассивПровущенныхДокументов.Добавить(ВыборкаДетальныеЗаписи.ДокументЗайм);
		КонецПопытки;  
		
	КонецЦикла; 

	КонецЗамера = ТекущаяДата();   
	ДатаДлительность = Дата(1,1,1) + (КонецЗамера - НачалоЗамера);
	МассивОписаний.Добавить(СтрШаблон("Общее количество обработанных документов: %1, время окончания обработки %2,
									  | затрачено %3, пропущено документов %4", КоличествоДокументов, КонецЗамера,
		Формат(ДатаДлительность,"ДФ=HH.mm.ss"), МассивПровущенныхДокументов.Количество()));

	Документы.МФОЛогирование.ЗаписатьДокументЛог("Обработка проведения документов", МассивОписаний, 1,,ДокументЛог);

	//Удаляем все записи из регистра очереди, и добавляем те документы которые провелись с ошибкой
	НаборЗаписей = РегистрыСведений.МФО_ОчередьПроведенияДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	Для Каждого СтрокаТЧ Из МассивПровущенныхДокументов Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ДокументЗайм = СтрокаТЧ;
	КонецЦикла;
	НаборЗаписей.Записать();

КонецПроцедуры

//Процедура помечает на удаление документы устаревшие документы логирования
//который высчиываются благодаря константе МФОДнейАктуальностиЛогирования
Процедура ПометитьНаУдалениеУстаревшиеДокументыЛогирования() Экспорт
	
	 КоличествоДнейАктуальности = Константы.МФОДнейАктуальностиЛогирования.Получить();
	 //Если в константе установлено 0 тогда не делаем пометку на удаление
	 //так как считается что в таком случае документы логирования хранятся без срока 
	 Если КоличествоДнейАктуальности = 0 Тогда
		Документы.МФОЛогирование.ЗаписатьДокументЛог("Процедура пометки на удаление не выполнена",
													 "Процедура пометки на удаление не выполнена
													 |Константа МФОДнейАктуальностиЛогирования не заполнена, в таком случае " 
													 + "документы не помечаются на удаление и хранятся без срока.", 1);
		Возврат;
	Иначе

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МФОЛогирование.Ссылка
		|ИЗ
		|	Документ.МФОЛогирование КАК МФОЛогирование
		|ГДЕ
		|	МФОЛогирование.Дата < &Дата";
		ДатаПоиска = НачалоДня( ТекущаяДата() - (60 * 60 * 24 * КоличествоДнейАктуальности));
		Запрос.УстановитьПараметр("Дата", ДатаПоиска);

		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();
		КоличествоПомеченных = 0;
		
		//Получаем документы до указанной даты и помечаем их на удаление
		Пока Выборка.Следующий() Цикл
			Если Не Выборка.Ссылка.ПометкаУдаления Тогда
				ДокументЛогированияОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументЛогированияОбъект.УстановитьПометкуУдаления(Истина);
				КоличествоПомеченных = КоличествоПомеченных + 1;
			КонецЕсли;
		КонецЦикла;
		Документы.МФОЛогирование.ЗаписатьДокументЛог("Процедура пометки на удаление выполнена",
													 СтрШаблон("Помечено на удаление %1 объектов,"+ 
													 "до даты %2", КоличествоПомеченных, Формат(ДатаПоиска,"ДФ=dd.MM.yyyy;" )), 1);
		
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьРеквизитыНаФорме(Форма, Реквизиты = "") Экспорт
	
	Группа = Форма.Элементы.Добавить("ГруппаМФО", 	Тип("ГруппаФормы"), Форма);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа; 
	Группа.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	Группа.Скрыть();
	Группа.ТолькоПросмотр = Истина;
	Группа.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
	Группа.Заголовок = "Дополнительные характеристики";  
	
	ПолеВводаID = Форма.Элементы.Добавить("Идентификатор", Тип("ПолеФормы"), Группа);
	ПолеВводаID.Вид = ВидПоляФормы.ПолеВвода;	   
	ПолеВводаID.ПутьКДанным = "Объект.id"; 
	
	Если ЗначениеЗаполнено(Реквизиты) и ТипЗнч(Реквизиты) = Тип("Массив") тогда
		Для каждого СтрокаМассива из Реквизиты цикл 
			
			ПолеВвода = Форма.Элементы.Добавить(СтрокаМассива, Тип("ПолеФормы"), Группа);
			ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;	   
			ПолеВвода.ПутьКДанным = "Объект."+СтрокаМассива;   		
			
		КонецЦикла;
	КонецЕсли;
	
Конецпроцедуры  

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция по загрузке документов, получет записи по указанным страницам на дату обновления в JSON, затем обрабатывает его,
// Файл JSON содержит в себе 500 записей о документах, включая записи по Начислениям и Платежам,
// после загрузки страницы на обработку каждого документа создается отдельный поток из длительной операции, 
// количество потоков задается константой в настройках
// После обработки страницы, файл удаляется из временного каталога.
//
//Параметры:
//КоличествоСтраниц - Число -Количество страниц для загрузки по странично
//ДатаЗапроса - Дата -Дата запроса
//ОбработатьБезФОновыхЗаданий - Булево	- Если значение Истина то запускается загрузка займов без использования разделения на потоки
//
//Возвращаемое значение:
//-	Массив - Массив со строками описания процесса загрузки документов 
//
Функция ЗагрузитьЗаймыПоСтранично(КоличествоСтраниц, ДатаЗапроса, ОбработатьБезФОновыхЗаданий = Ложь) Экспорт

	//Массив описания процедур загрузки для логирования
	МассивОписанийОбщаяЗагрузка = Новый Массив;
	
	НачалоЗамера = ТекущаяДата();
	МассивОписанийОбщаяЗагрузка.Добавить("Начало обработки загрузки страниц с портала: " + НачалоЗамера);
	
	//Определение максимального количества потоков и начальная инициализация потока   
    КоличествоПотоковКонстанта = Константы.МФОКоличествоПотоков.Получить();
	КоличествоПотоков = ?(КоличествоПотоковКонстанта>=1,КоличествоПотоковКонстанта,1);
	МассивПотоков = Новый Массив(КоличествоПотоков);
	Поток = -1;
	
	//получение корректной страницы загрузки
	Страница = Константы.МФОНачальнаяСтраница.Получить(); 
	 
	Если ЗначениеЗаполнено(Страница) тогда	
		НачальнаяСтраница = Страница;
	иначе
		НачальнаяСтраница = 1; 
		Страница = НачальнаяСтраница;
		Константы.МФОНачальнаяСтраница.Установить(НачальнаяСтраница);
	КонецЕсли;

	//определение размера порции для обработки зайомов. Если размер не указан то порция это полное количество страниц
	КоличествоОбрабатываемыхСтраниц = Константы.МФОКоличествоОбрабатываемыхСтраниц.Получить();   
	Если КоличествоОбрабатываемыхСтраниц = 0 тогда
		КоличествоОбрабатываемыхСтраниц = КоличествоСтраниц;  
	КонецЕсли;
    КоличествоОбрабатываемыхСтраниц = КоличествоОбрабатываемыхСтраниц - 1;
	
	ПоследняяСтраница = ?(Страница + КоличествоОбрабатываемыхСтраниц > КоличествоСтраниц, 
		КоличествоСтраниц, Страница + КоличествоОбрабатываемыхСтраниц) ;  
	
	МассивОписанийОбщаяЗагрузка.Добавить(СтрШаблон("Запуск обработки от %1 до %2 страницы", 
		НачальнаяСтраница, ПоследняяСтраница));  
	
	СтруктураРодителей = СтруктураРодителейСправочников();
	
	КоличествоПовторенийЗагрузки = Константы.МФОПовторятьПриОшибке.Получить();  
	КоличествоОшибочныхИтераций = 1;

	ОбщееКоличествоДокументов = 0;
	КоличествоДокументовВСтранице = 0; 	
	Попытка

		Пока Страница <= ПоследняяСтраница Цикл
			
			//Массив описания процедур загрузки по страницам для логирования
			МассивОписанияСтраница = Новый Массив;
			КоличествоДокументовВСтранице = 0;

			ДатаНачалаЧтения = ТекущаяУниверсальнаяДатаВМиллисекундах();

			ДатаНачала = ТекущаяДата();

			МассивОписанияСтраница.Добавить(СтрШаблон("Начало загрузки страницы %1", Страница)); 
				
			//Загрузка страницы, пример запроса - /api/1c/loans?page=1&filter=updated_at&date=2023-06-08 0:00:01&with=accruals,payments
			ИмяФайла = ЗагрузитьJSON("/api/1c/loans?page=" + Страница + "&filter=updated_at" + ДатаЗапроса
				+ "&with=accruals,payments");

			ВремяЧтения = ((ТекущаяУниверсальнаяДатаВМиллисекундах() - ДатаНачалаЧтения) / 1000);
			ДатаНачалаОбработки = ТекущаяУниверсальнаяДатаВМиллисекундах();

			Если ИмяФайла = Неопределено Тогда
				//запрос к порталу должен возвращать отет даже в том случае если документов нет
				//если файл не скачан то ошибка на портале или в сети
				Описание = СтрШаблон("Страница %1 не загружена, файл не скачан с портала", Страница); 
				МассивОписанияСтраница.Добавить(Описание);
				МассивОписанийОбщаяЗагрузка.Добавить(Описание);
				
				//Если ошибка то перезапуск итерации до КоличествоОшибочныхИтераций
				Если КоличествоОшибочныхИтераций <= КоличествоПовторенийЗагрузки тогда 
					Описание = СтрШаблон("Запуск загрузки страницы при ошибке %1 раз из %2", 
							КоличествоОшибочныхИтераций,КоличествоПовторенийЗагрузки); 	
					МассивОписанияСтраница.Добавить(Описание);
					МассивОписанийОбщаяЗагрузка.Добавить(Описание);  
					КоличествоОшибочныхИтераций = КоличествоОшибочныхИтераций+1;
					Продолжить;
				КонецЕсли;
	
				Документы.МФОЛогирование.ЗаписатьДокументЛог(СтрШаблон("Страница %1 не загружена и пропущена", Страница),
					МассивОписанияСтраница, 1);
				Константы.МФОНачальнаяСтраница.Установить(Страница+1);  
				КоличествоОшибочныхИтераций = 0;
				Продолжить;
			КонецЕсли;

			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.ОткрытьФайл(ИмяФайла);
			Данные = ПрочитатьJSON(ЧтениеJSON, Истина);

			Займы = Данные.Получить("data");

			Если Займы.Количество() = 0 тогда
				МассивОписанияСтраница.Добавить(СтрШаблон("Страница %1 загружена, документов не обнаружено", Страница));
				Константы.МФОНачальнаяСтраница.Установить(Страница+1);
				Страница = Страница + 1;
				Продолжить;
			КонецЕсли;

			МассивОписанияСтраница.Добавить(СтрШаблон("Страница %1 загружена, начинаем разбор страницы", Страница));
			Для Каждого Займ Из Займы Цикл         
				
				//Если запуск идет через отладку в настройках то идет обработка без запуска фоновых заданий
				Если ОбработатьБезФОновыхЗаданий тогда
					    ОписаниеСтраницы = СтрШаблон("Страница %1", Страница); 
						ОписаниеДокументПоток = СтрШаблон("Документ № %1, без потоков", 
							КоличествоДокументовВСтранице + 1);	
						МассивОписаний = ЗагрузитьПолныйЗайм(Займ, СтруктураРодителей, ОписаниеСтраницы, ОписаниеДокументПоток);
						//МассивОписанияСтраница.Добавить(СтрШаблон("Запущена обработка %1 документа без фоновых заданий",
						//КоличествоДокументовВСтранице+1)); 
						ДобавитьМассивКМассиву(МассивОписанияСтраница, МассивОписаний);
						КоличествоДокументовВСтранице = КоличествоДокументовВСтранице + 1;
						ОбщееКоличествоДокументов = ОбщееКоличествоДокументов + 1;
								
				иначе
					
					//в поток помещается фоновое задание по загрузке, если этот поток занят то проверяется следующий, 
					//цикл итерируется бесконечно пока не освободиться какой нибудь поток
					Пока Поток < КоличествоПотоков Цикл 
						
						//Если последний поток прошел то счетчик потоков становится в начало (?(5 >= 7, 0, 8))
						Поток = ?(Поток >= КоличествоПотоков - 1, 0, Поток + 1);
						МассивРезультатовЗадания = Новый Массив;
						Попытка
							
							ЗапуститьНовыйПроцесс = Ложь;
							
							//Определение свободного потока,если происходит первый проход элемент массива = Неопределено
							//При запуске потока возвращается структура с реквизитами потока в элемент массива
							//Если во время описания и создания потока он уже выполнился то его статус будет "Выполнен"
							//Если нет то определяем статус с помощью ДлительныеОперации.ЗаданиеВыполнено()
							//Если поток занят то цикл переходит на следующую итерацию
							//Возможен вариант что поток не будет найден, произойдет исключение, 
							//в таком случае информация о потоке завершается и будет запущен новый поток
							Попытка
								
								Если МассивПотоков[Поток] = Неопределено тогда
									ЗапуститьНовыйПроцесс = Истина; 
									
								иначеЕсли МассивПотоков[Поток].Статус = "Выполнено" тогда
									ЗапуститьНовыйПроцесс = Истина;
									МассивРезультатовЗадания = ПолучитьИзВременногоХранилища(МассивПотоков[Поток].АдресРезультата);
									ДобавитьМассивКМассиву(МассивОписанияСтраница, МассивРезультатовЗадания); 
									
								иначе
									СтруктураВыполненияЗадания = ДлительныеОперации.ОперацияВыполнена(МассивПотоков[Поток].ИдентификаторЗадания);
									СтатусЗадания = СтруктураВыполненияЗадания.Статус;
									
									Если СтатусЗадания = "Выполнено" тогда  
										МассивРезультатовЗадания = ПолучитьИзВременногоХранилища(МассивПотоков[Поток].АдресРезультата);
										ДобавитьМассивКМассиву(МассивОписанияСтраница, МассивРезультатовЗадания); 
										МассивОписанияСтраница.Добавить(" ");
										ЗапуститьНовыйПроцесс = Истина;
										
									иначеЕсли СтатусЗадания = "Ошибка" ИЛИ СтатусЗадания = "Отменено" тогда
										ЗапуститьНовыйПроцесс = Истина;
										МассивОписанияСтраница.Добавить(
										СтрШаблон("Ошибка выполнения потока с идентификатором %1, запуск нового потока.
										|Описание ошибки: %2",
										МассивПотоков[Поток].ИдентификаторЗадания, 
										СтруктураВыполненияЗадания.ПодробноеПредставлениеОшибки));
										
									КонецЕсли;								
								КонецЕсли; 
								
							Исключение
								МассивОписанияСтраница.Добавить(
								СтрШаблон("Ошибка поиска потока с идентификатором %1, запуск нового потока",
								МассивПотоков[Поток].ИдентификаторЗадания));
								МассивПотоков[Поток] = Неопределено;
							КонецПопытки;
							
							//Запуск нового потока, при создании потока автоматически ставится ожидание окончания в 0.8 секунд
							//поэтому явно указываем время ожидания 0 секунд, передаем данные по документу и структуру с группами справочников
							Если ЗапуститьНовыйПроцесс Тогда  
								ОписаниеСтраницы = СтрШаблон("Страница %1", Страница); 
								ОписаниеДокументПоток = СтрШаблон("Документ № %1, поток %2", КоличествоДокументовВСтранице + 1, поток);
								
								ПараметрыОжидания = ДлительныеОперации.ПараметрыВыполненияВФоне();
								ПараметрыОжидания.ОжидатьЗавершение = 0;
								МассивПотоков[Поток] = ДлительныеОперации.ВыполнитьФункцию(ПараметрыОжидания,
									"МФООбщийМодуль.ЗагрузитьПолныйЗайм", Займ, СтруктураРодителей, ОписаниеСтраницы, ОписаниеДокументПоток);
								
								КоличествоДокументовВСтранице = КоличествоДокументовВСтранице + 1;
								ОбщееКоличествоДокументов = ОбщееКоличествоДокументов + 1;
								Прервать;
							КонецЕсли;
							
						Исключение
							МассивОписанияСтраница.Добавить(СтрШаблон(
							"Ошибка выполнения потока %1 при загрузке документа %2, описание ошибки: %3", Поток,
							КоличествоДокументовВСтранице, ОписаниеОшибки()));
							Прервать;
						КонецПопытки;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;

			ЧтениеJSON.Закрыть();  
			
			//подведение итогов времени загрузки и обработки документов
			ВремяОбработки = Дата(1,1,1) + ((ТекущаяУниверсальнаяДатаВМиллисекундах() - ДатаНачалаОбработки) / 1000);
			
			УдалитьФайлы(ИмяФайла);
			
			//ожидание завершения всех потоков загрузки документов для запуска проведения
			//ожидание в циклическом цикле, пока все задания не завершаться или пока не пройдет минута
			//не срабаывает при откладке без фоновых заданий
			ВремяНачалаВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Поток = -1;
			КоличествоВыполненных = 0; 
			Если не ОбработатьБезФОновыхЗаданий тогда
				Пока Поток <= КоличествоПотоков и КоличествоВыполненных < КоличествоПотоков Цикл 
					
					//Если последний поток прошел то счетчик потоков становится в начало (?(5 >= 7, 0, 8))
					Поток = ?(Поток >= КоличествоПотоков - 1, 0, Поток + 1); 
					
					//если поток выполнен то он становиться неопределено и пропускается при следующей проверке
					Если не МассивПотоков[Поток] = Неопределено тогда    
						
						Если МассивПотоков[Поток].Статус = "Выполнено" тогда 
							МассивРезультатовЗадания = ПолучитьИзВременногоХранилища(МассивПотоков[Поток].АдресРезультата);
							ДобавитьМассивКМассиву(МассивОписанияСтраница, МассивРезультатовЗадания); 
							МассивОписанияСтраница.Добавить(" ");
							
							МассивПотоков[Поток] = Неопределено; 
							КоличествоВыполненных=КоличествоВыполненных+1;
							
						иначе   
							
							Если ДлительныеОперации.ЗаданиеВыполнено(МассивПотоков[Поток].ИдентификаторЗадания) тогда    
								МассивРезультатовЗадания = ПолучитьИзВременногоХранилища(МассивПотоков[Поток].АдресРезультата);
								ДобавитьМассивКМассиву(МассивОписанияСтраница, МассивРезультатовЗадания); 							
								МассивОписанияСтраница.Добавить(" ");
								
								МассивПотоков[Поток] = Неопределено;
								КоличествоВыполненных=КоличествоВыполненных+1;
								
								
							КонецЕсли; 
						КонецЕсли;  	
					КонецЕсли;  
					
					//аварийный выход из цикла спустя минуту если при обработке потоков произошли сбои
					ТекущееВремяВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
					Если ТекущееВремяВыполнения > (ВремяНачалаВыполнения + (60 * 10000)) тогда 
						
						ОписаниеЛог = "Проверка была завершена принудительно
						|Время начала выполнения в миллисекундах "+ВремяНачалаВыполнения + "
						|Текущее время "+ТекущееВремяВыполнения;
						Документы.МФОЛогирование.ЗаписатьДокументЛог("Ошибка проверки заверешения фоновых заданий перед проведением документов"
						, ОписаниеЛог , 1);
						МассивОписанийОбщаяЗагрузка.Добавить(ОписаниеЛог);
						МассивОписанияСтраница.Добавить(ОписаниеЛог);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		
			Документы.МФОЛогирование.ЗаписатьДокументЛог(СтрШаблон("Загрузка %1 страницы документов", Страница),
			МассивОписанияСтраница, 1);    
			
			Описание = СтрШаблон("Загрузка %1 страницы документов, количество документов %2, начало загрузки %3, время загрузки %4, время обработки %5",
				Страница, КоличествоДокументовВСтранице, ДатаНачала, ВремяЧтения, Формат(ВремяОбработки, "ДФ=HH.mm.ss"));
			МассивОписанияСтраница.Добавить(Описание);
			МассивОписанийОбщаяЗагрузка.Добавить(Описание);

			Страница = Страница + 1;
			Константы.МФОНачальнаяСтраница.Установить(Страница);
		КонецЦикла;
		
	Исключение    
		Страница = Страница + 1;
		Константы.МФОНачальнаяСтраница.Установить(Страница);   
		
		МассивОписанийОбщаяЗагрузка.Добавить(СтрШаблон("Ошибка обработки загрузки документов " + Символы.ПС + " %1 ",
			ОписаниеОшибки()));
	КонецПопытки;
			
	Если ОбщееКоличествоДокументов = 0 тогда
		МассивОписанийОбщаяЗагрузка.Добавить("Документов при загрузке не обнаружено, пропуск обработки проведения документов");  
		Возврат МассивОписанийОбщаяЗагрузка;
	КонецЕсли;
	
	
	//запуск проведения загруженных документов
	МФООбщийМодуль.ПровестиЗагруженныеДокументы();
	
	Возврат МассивОписанийОбщаяЗагрузка;
КонецФункции

// Обрабатывает документ в соответствии с данными передаными в качестве параметра Данные
//
// Параметры:
// 	 Данные -	Соответствие из Строка, Строка  -  Данные содержащие информацию по одному документу полученному из файла JSON
// 	СтруктураРодителей - см. СтруктураРодителейСправочников    
// 	ОписаниеСтраницы -	Строка	- Описание по загрузке страницы переданное из вышестоящего метода, для изменения и возврата в этот метод
// 	ОписаниеДокументПоток  -	Строка	- Описание по потоку переданное из вышестоящего метода, для изменения и возврата в этот метод
Функция ЗагрузитьПолныйЗайм(Данные, СтруктураРодителей, ОписаниеСтраницы="", ОписаниеДокументПоток="") Экспорт

	//Массив описания процедур загрузки для логирования
	МассивОписаний = Новый Массив;
    МассивОписаниСтраница = новый Массив;
	
	НачалоЗамера = ТекущаяДата();
    ОписаниеЗайма = ?(ОписаниеСтраницы="",ОписаниеДокументПоток, ОписаниеСтраницы +". "+ ОписаниеДокументПоток); 
	МассивОписаний.Добавить(СтрШаблон("Начало обработки документа: %1. %2", НачалоЗамера, ОписаниеЗайма));
	МассивОписаниСтраница.Добавить(СтрШаблон("%1, начало обработки %2",ОписаниеДокументПоток, НачалоЗамера));
	
	//поиск займа по id если не найден то создан новый и возвращена ссылка
	Параметры = Новый Массив(1);
	Параметры[0] = Данные.Получить("id");
	
	СтруктураПоискаЗайма = ВыполнитьФункциюСОбработкойОшибки("НайтиЗайм", Параметры);
	ДокументЗайм = СтруктураПоискаЗайма.Ссылка;
	ДокументЗаймСсылка = ДокументЗайм;
	МассивОписаний.Добавить(СтруктураПоискаЗайма.Описание); 
	МассивОписаниСтраница.Добавить(СтруктураПоискаЗайма.Описание); 
	
	//Пропустить проверку документа если дата обновления не изменилась с момента прошлой загрузки
	ДатаОбновленияДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументЗайм, "updated_at");  
	
	Если ЗначениеЗаполнено(ДатаОбновленияДокумента) И ДатаОбновленияДокумента = ФорматироватьДатуJSON(Данные["updated_at"]) 
		и ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументЗайм, "Проведен") Тогда
			
		ДокументСсылка = ДокументЗаймСсылка; 
		Описание = СтрШаблон("Дата обновления документа не изменилась %1, документ пропущен", ДатаОбновленияДокумента);
		МассивОписаний.Добавить(Описание);
		МассивОписаниСтраница.Добавить(Описание);
		Документы.МФОЛогирование.ЗаписатьДокументЛог("Загрузка займа " + ДокументСсылка, МассивОписаний, 2, ДокументСсылка);
		Возврат МассивОписаниСтраница;
	КонецЕсли;
	
	//добавим позицию в данные для того что бы не было дубликата идентификаторов - number это номер элемента а не номер договора
	Данные.Вставить("numberDogovor", Данные["number"]);
	ДатаКонстанта = Константы.МФОДатаОбновленияВременная.Получить();
	БылиИзменения = Ложь;
	//обработка каждого реквизита докумета
	Для Каждого Строка Из Данные Цикл
		
		//если реквизита из запроса нет в документе или оно не заполнено то пропускаем итерацию
		Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта(Строка.Ключ, Метаданные.Документы.МФОЗайм) Или Строка.Значение
			= Неопределено Или Строка.Значение = Null Тогда

			Продолжить;
		КонецЕсли;  
		
		РеквизитДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументЗаймСсылка, Строка.Ключ); 
		
		//определеям для каждого реквизита свой тип, например Дата, перечисления и прочее
		Если Строка.Ключ = "created_at" Или Строка.Ключ = "updated_at" Или Строка.Ключ = "deleted_at" Или Строка.Ключ
			= "issued_at" Или Строка.Ключ = "expires_at" Или Строка.Ключ = "closed_at" Тогда
			Значение = ФорматироватьДатуJSON(Строка.Значение);
			Если Строка.Ключ = "updated_at" И НачалоДня(Значение) > ДатаКонстанта Тогда
				Константы.МФОДатаОбновленияВременная.Установить(Значение); 
			КонецЕсли;

		ИначеЕсли Строка.Ключ = "status" Тогда
			Значение = ?(Строка.Значение = "closed", Перечисления.МФОСтатусЗайма.closed,
			Перечисления.МФОСтатусЗайма.open);
			
		ИначеЕсли Строка.Ключ = "withdrawal" Тогда
			Значение = ?(Строка.Значение = "nonСash", Перечисления.МФОСпособВыдачи.nonСash,
			Перечисления.МФОСпособВыдачи.cash);
			
		ИначеЕсли ТипЗнч(РеквизитДокумента) = Тип("Число") И ЯвляетсяЧислом(Строка.Значение) тогда
			Значение = Число(Строка.Значение);
			
		ИначеЕсли ТипЗнч(РеквизитДокумента) = Тип("Строка") тогда   
			Значение =  Строка(Строка.Значение);
			
		иначе
			Значение =  Строка.Значение;
		КонецЕсли;
		
		//проверяем на соответствие реквизита документа и запроса, если совпадают то не изменяем, если не совпадают
		//то изменяем значение и ставим галочку БылиИзменения для добавления документа в список перепроведения
		Если Не ДокументЗайм[Строка.Ключ] = Значение Тогда
			МассивОписаний.Добавить(СтрШаблон("Изменение реквизита %1 на значение %2", Строка.Ключ, Значение));
			БылиИзменения = Истина;   
			//получение объекта вместо ссылки документа
			Если ТипЗНЧ(ДокументЗайм) = Тип("ДокументСсылка.МФОЗайм") Тогда
				ДокументЗайм = ДокументЗайм.ПолучитьОбъект();
				МассивОписаний.Добавить(СтрШаблон("Получение объекта документа вместо ссылки"));
			КонецЕсли;
			ДокументЗайм[Строка.Ключ]=Значение;
			
			//Если изменено id подразделения то изменяем реквизиты подразделение и кассу
			Если Строка.Ключ = "branch_office_id" Тогда  
				Параметры = Новый Массив(2);
				Параметры[0] = Значение;
				Параметры[1] = "Созданное подразделение";
				
				СтруктураПоискаПодразделения = ВыполнитьФункциюСОбработкойОшибки("НайтиПодразделение", Параметры);
				ДокументЗайм.Подразделение = СтруктураПоискаПодразделения.Ссылка;   
				Если СтруктураПоискаПодразделения.Свойство("Описание") тогда
					 МассивОписаний.Добавить(СтруктураПоискаПодразделения.Описание);
					 МассивОписаниСтраница.Добавить(СтруктураПоискаПодразделения.Описание);
				КонецЕсли; 
				 
				Параметры = Новый Массив(1);
				Параметры[0] = ДокументЗайм.Подразделение;
				
				СтруктураПоискаКассы = ВыполнитьФункциюСОбработкойОшибки("НайтиКассуПодразделения", Параметры);
				ДокументЗайм.Касса = СтруктураПоискаКассы.Ссылка;   
				Если СтруктураПоискаКассы.Свойство("Описание") тогда
					 МассивОписаний.Добавить(СтруктураПоискаКассы.Описание);   
					 МассивОписаниСтраница.Добавить(СтруктураПоискаКассы.Описание);

				КонецЕсли; 
			
			КонецЕсли;

			Если Строка.Ключ = "created_at" Тогда
				ДокументЗайм.Дата = Значение;
			КонецЕсли;

			Если Строка.Ключ = "borrower_id" Тогда 
				
				Параметры = Новый Массив(2);
				Параметры[0] = Данные.Получить("borrower");
				Параметры[1] = СтруктураРодителей;
				
				СтруктураПоискаКонтрагента = ВыполнитьФункциюСОбработкойОшибки("НайтиКонтрагента", Параметры);
				ДокументЗайм.Контрагент = СтруктураПоискаКонтрагента.Ссылка;
				МассивОписаний.Добавить(СтруктураПоискаКонтрагента.Описание);
				МассивОписаниСтраница.Добавить(СтруктураПоискаКонтрагента.Описание);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
	
	//если договор не заполнен то производим поиск или создание нового договора контрагента
	Если Не ЗначениеЗаполнено(ДокументЗайм.ДоговорКонтрагента) Тогда

		Если ЗначениеЗаполнено(ДокументЗайм.Контрагент) Тогда
			СтруктураЗаполнения = Новый Структура;
			СтруктураЗаполнения.Вставить("Контрагент", ДокументЗайм.Контрагент);
			СтруктураЗаполнения.Вставить("НомерДоговора", ДокументЗайм.numberDogovor);
			СтруктураЗаполнения.Вставить("ДатаДоговора", ДокументЗайм.Дата);
			СтруктураЗаполнения.Вставить("Подразделение", ДокументЗайм.Подразделение);
			СтруктураЗаполнения.Вставить("Организация", ДокументЗайм.Организация);
			
			Параметры = Новый Массив(2);
			Параметры[0] = СтруктураЗаполнения;
			Параметры[1] = СтруктураРодителей;
			
			СтруктураПоискаДоговорКонтрагента = ВыполнитьФункциюСОбработкойОшибки("НайтиДоговор", Параметры);
			ДокументЗайм.ДоговорКонтрагента = СтруктураПоискаДоговорКонтрагента.Ссылка;
			МассивОписаний.Добавить(СтруктураПоискаДоговорКонтрагента.Описание);
			МассивОписаниСтраница.Добавить(СтруктураПоискаДоговорКонтрагента.Описание); 
			
		Иначе
			МассивОписаний.Добавить(СтрШаблон("Контрагент не заполнен, договор не найден"));  
			
		КонецЕсли;
	КонецЕсли;
	
	//обработка табличных частей Начсления и платежи, передается флаг были изменения, если замена реквизита была то флаг изменится
	ОбработатьТабличнуюЧасть("accruals", Данные.Получить("accruals"), ДокументЗайм, БылиИзменения, МассивОписаний);
	ОбработатьТабличнуюЧасть("payments", Данные.Получить("payments"), ДокументЗайм, БылиИзменения, МассивОписаний);

	Если БылиИзменения Тогда                   
		
		//Если на портале удалили документ то активировать пометку удаления
		ДатаУдаления = Данные.Получить("deleted_at");
		Если ЗначениеЗаполнено(ДатаУдаления) Тогда
			МассивОписаний.Добавить(СтрШаблон("Установка пометки удаления на документ"));
			ДокументЗайм.ПометкаУдаления = Истина;
		КонецЕсли;

		Попытка 
			
			//Если активирована пометка то отменить проведение документа
			Если Не ДокументЗайм.ПометкаУдаления Тогда 
				
				ДокументЗайм.Записать(РежимЗаписиДокумента.Запись);
				МассивОписаний.Добавить(СтрШаблон("Запись документа"));
				МассивОписаниСтраница.Добавить(СтрШаблон("Документ записан %1",ДокументЗайм.Ссылка));
				МенеджерОчереди = РегистрыСведений.МФО_ОчередьПроведенияДокументов.СоздатьМенеджерЗаписи();
				МенеджерОчереди.ДокументЗайм = ДокументЗаймСсылка; 
				МенеджерОчереди.Прочитать();     
				
				Если МенеджерОчереди.Выбран() тогда
					МассивОписаний.Добавить(СтрШаблон("Документ уже присутствует в очереди проведения"));  
					
				иначе 
					МассивОписаний.Добавить(СтрШаблон("Документ добавлен в очередь, для последующего проведения"));
					МенеджерОчереди.ДокументЗайм = ДокументЗаймСсылка;
					МенеджерОчереди.Записать(Ложь);  
					
				КонецЕсли; 
				
			Иначе
				Если ДокументЗайм.Проведен Тогда
					
					МассивОписаний.Добавить(СтрШаблон("Отмена проведения документа"));
					ДокументЗайм.Записать(РежимЗаписиДокумента.ОтменаПроведения); 
				КонецЕсли;
			КонецЕсли;

		Исключение  
			ОписаниеОшибкиЛог = СтрШаблон("Ошибка записи документа. Документ %1 не удалось записать, документ пропущен. 
											  |Ошибка: %2", ДокументЗаймСсылка, ОписаниеОшибки());
			МассивОписаний.Добавить(ОписаниеОшибкиЛог); 
			МассивОписаниСтраница.Добавить(ОписаниеОшибкиЛог);
			Документы.МФОЛогирование.ЗаписатьДокументЛог("Ошибка обработки займа " + ДокументЗаймСсылка, ОписаниеОшибкиЛог, 2, ДокументЗаймСсылка); 
		КонецПопытки; 
		
	иначе
		
		МассивОписаний.Добавить(СтрШаблон("В документе не было изменений"));	
	КонецЕсли;
	
	ДокументСсылка = ДокументЗаймСсылка;
	Документы.МФОЛогирование.ЗаписатьДокументЛог("Загрузка займа " + ДокументЗаймСсылка, МассивОписаний, 2, ДокументСсылка); 
	
	Возврат МассивОписаниСтраница;
КонецФункции

//Создает HTTPСоединение и выполняет запрос "СтрокаHTTPЗапрос" к порталу указанному в константе МФОХост
//при ответе отличном от 200 формирует исключение, иначе получает файл JSON и возвращает адрес файла.
//Итоговый формат запроса: https://МФОХост+СтрокаHTTPЗапрос
//Пример на момент разработки - https://competent-vaughan.77-240-39-84.plesk.page/api/1c/loans?page=1&filter=updated_at&date=2023-06-08 0:00:01&with=accruals,payments
//
//Параметры:
//СтрокаHTTPЗапрос - Строка -Строка содержащая HTTPЗапрос к порталу, 
//Пример: /api/1c/loans?page=1&filter=updated_at&date=2023-06-08&with=accruals,payments -
//
//Возвращаемое значение:
//-	Строка - Адрес на диске на файл JSON с данными
//-	Неопределено - В случае некорректного ответа от сервера или в случае ошибки получения файла
//
Функция ЗагрузитьJSON(СтрокаHTTPЗапрос) Экспорт
	//обьявление переменной для определения кода состояния ответа, иначе вывод начального текста в исключение
	КодСостояния = "Ошибка получения кода состояния";
	Попытка
		HTTPСоединение = Новый HTTPСоединение(Константы.МФОХост.Получить(), , Константы.МФОПользователь.Получить(),
			Константы.МФОПароль.Получить(), , 600, Новый ЗащищенноеСоединениеOpenSSL);
		HTTPЗапрос = Новый HTTPЗапрос(СтрокаHTTPЗапрос);

		//@skip-check missing-temporary-file-deletion
		ИмяФайла = ПолучитьИмяВременногоФайла("json");
		HTTPОтвет =  HTTPСоединение.Получить(HTTPЗапрос, ИмяФайла);

		Если HTTPОтвет.КодСостояния = 200 Тогда
			Возврат ИмяФайла;
		Иначе
			КодСостояния =  HTTPОтвет.КодСостояния;
			ВызватьИсключение ("Ошибка обработки данных. Код состояния: " + КодСостояния);
		КонецЕсли;

	Исключение
		  
			Документы.МФОЛогирование.ЗаписатьДокументЛог("Ошибка получения и обработки файла запроса", 
			СтрШаблон("Ошибка загрузки и обработки данных, код ответа: %1 " + Символы.ПС + " %2 ", КодСостояния,
		ОписаниеОшибки()), 1);
		Возврат Неопределено;
	КонецПопытки;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//Отправляет запрос по документам без детализации на портал, таким образом получаем количество страниц
//это количество страниц используется для расчета порций обработки документов
//
// Параметры:
//  ДатаЗапроса -	 Дата - ДатаЗапроса 
// 
// Возвращаемое значение:
//  Число - Количество страниц или 0 если количество из запроса не определено - 
// 
Функция ПолучитьКоличествоСтраниц(ДатаЗапроса)
	
	//Запрос на портал для определения количества страниц
	ИмяФайла = ЗагрузитьJSON("/api/1c/loans?page=1&filter=updated_at" + ДатаЗапроса);
	
	Если ИмяФайла = Неопределено тогда
		ПоследняяСтраница = 0;
	Иначе
		//Читаем файл и получаем данные о последней стрнице
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяФайла);
		Данные = ПрочитатьJSON(ЧтениеJSON, Истина);
		
		ПоследняяСтраница = Данные.Получить("last_page");   
		
		//если информация не получена то возвращаем 0
		Если не ТипЗНЧ(ПоследняяСтраница) = Тип("Число")  тогда
			ПоследняяСтраница = 0;
		КонецЕсли; 
		
		ЧтениеJSON.Закрыть();  
		УдалитьФайлы(ИмяФайла); 
	КонецЕсли;
	
	Возврат  ПоследняяСтраница;
	
КонецФункции 

//Ищет уже созданный документ по уникальному идентификатору, 
//в случае если документ не был найден, создает новый, и возвращает ссылку на него      
//
// Параметры:
//  id -	 Строка - Идентификатор документа 
// 
// Возвращаемое значение:
//  ДокументСсылка.МФОЗайм - 
// 
Функция НайтиЗайм(id)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МФОЗайм.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.МФОЗайм КАК МФОЗайм
	|ГДЕ
	|	МФОЗайм.id = &id";

	Запрос.УстановитьПараметр("id", id);

	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = новый Структура;
	Если РезультатЗапроса.Пустой() Тогда

		НовыйЭлемент = Документы.МФОЗайм.СоздатьДокумент(); 

		НовыйЭлемент.Дата = ТекущаяДата();
		НовыйЭлемент.id = id;
		НовыйЭлемент.ВалютаДокумента = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		НовыйЭлемент.Организация =  Справочники.Организации.ОрганизацияПоУмолчанию();
		НовыйЭлемент.БанковскийСчет = Справочники.БанковскиеСчета.БанковскийСчетОрганизацииПоУмолчанию(НовыйЭлемент.Организация);
		НовыйЭлемент.Записать();

		РезультатФункции.Вставить("Описание", "Создан новый документ: " + НовыйЭлемент.Ссылка);
		РезультатФункции.Вставить("Ссылка", НовыйЭлемент.Ссылка);

	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		РезультатФункции.Вставить("Описание", "Документ найден в базе данных: " + Выборка.Ссылка);
		РезультатФункции.Вставить("Ссылка", Выборка.Ссылка);
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции   

// Ищет уже созданный договор контрагента указанного в СтруктураЗаполнения, 
// если его нет то создает новый, заполняет данными из структуры и возвращает ссылку
//
// Параметры:
//  СтруктураЗаполнения	 - Структура -  см. ЗагрузитьПолныйЗайм() 
//  СтруктураРодителей	 - Структура -  см. СтруктураРодителейСправочников()
// 
// Возвращаемое значение:
// - СправочникСсылка.ДоговорыКонтрагентов - Ссылка на договор контрагента
//
Функция НайтиДоговор(СтруктураЗаполнения, СтруктураРодителей)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.НомерДоговора = &НомерДоговора";

	Запрос.УстановитьПараметр("Владелец", СтруктураЗаполнения.Контрагент);
	Запрос.УстановитьПараметр("НомерДоговора", СтруктураЗаполнения.НомерДоговора);

	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = новый Структура;
	Если РезультатЗапроса.Пустой() Тогда
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();

		НовыйДоговор.Владелец = СтруктураЗаполнения.Контрагент;
		НовыйДоговор.Организация = СтруктураЗаполнения.Организация;
		НовыйДоговор.ДатаДоговора = СтруктураЗаполнения.ДатаДоговора;
		НовыйДоговор.НомерДоговора = СтруктураЗаполнения.НомерДоговора;
		НовыйДоговор.ВалютаВзаиморасчетов = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		НовыйДоговор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;

		НовыйДоговор.Наименование = "" + СтруктураЗаполнения.Подразделение + " " + НовыйДоговор.НомерДоговора + " от "
			+ НовыйДоговор.ДатаДоговора;
		НовыйДоговор.Записать();  
		
		РезультатФункции.Вставить("Описание", "Создан новый договор контрагента "+НовыйДоговор.Ссылка);
		РезультатФункции.Вставить("Ссылка", НовыйДоговор.Ссылка);
		Возврат РезультатФункции; 
		
	КонецЕсли;

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	РезультатФункции.Вставить("Описание", "Найден договор контрагента в базе данных " + ВыборкаДетальныеЗаписи.Ссылка);
	РезультатФункции.Вставить("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
	Возврат РезультатФункции; 

КонецФункции 

 // Ищет уже созданную группу справочников по наименованию,
//  в случае если группа не была найдена, создает новую и возвращает ссылку
//
// Параметры:
//  НаименованиеСправочника	 - Строка	 - Передается наименование справочника по которому нужно получить группу, 
//	значения: "Контрагенты", "ФизическиеЛица"
// 
// Возвращаемое значение:
//  СправочникСсылка.Контрагенты - Возвращаемя группа справочника СправочникСсылка.ФизическиеЛица  
//
Функция НайтиГруппу(НаименованиеСправочника)
	
	Если Не (НаименованиеСправочника = "Контрагенты" Или НаименованиеСправочника = "ФизическиеЛица") Тогда
		ВызватьИсключение ("При поиске группы справочника не обнаружен справочник """ + НаименованиеСправочника + """");
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	Справочник.Ссылка КАК Ссылка
				   |ИЗ
				   |	Справочник." + НаименованиеСправочника + " КАК Справочник
																 |ГДЕ
																 |	Справочник.Наименование = &Наименование
																 |	И Справочник.ЭтоГруппа = &ЭтоГруппа";

	Запрос.УстановитьПараметр("ЭтоГруппа", Истина);
	Запрос.УстановитьПараметр("Наименование", "МФО Группа");
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда

		Родитель = Справочники[НаименованиеСправочника].СоздатьГруппу();
		Родитель.Наименование = "МФО Группа";
		Родитель.Записать();
		Возврат Родитель.Ссылка;

	КонецЕсли;

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();

	Возврат ВыборкаДетальныеЗаписи.Ссылка;

КонецФункции 

// Обрабатывает табличную часть документа, во входящих параметрах передается название табличной части документа, 
// массив с данными из JSON, ссылка на документ и флаг БылиИзменения, 
// в процедуре цикл проходит по каждой строчке из массива данных и сравнивает со строками в атбличной части
// если строка не была найдена то добавляется новая, если была найдена то изменяется реквизит строки
// в случае изменения флаг БылиИзменения устанавливается в Истина и возвращается 
// Параметры:
//  ТЧНазвание - Строка - Название табличной части документа 
//  ТабличнаяЧастьМассив - Массив из Строка - Массив с данными из JSON 
//  ДокументЗайм		 - ДокументСсылка.МФОЗайм - Ссылка на обрабатываемый документ
//  БылиИзменения		 - Булево	 - Флаг изменений в документе
//  МассивОписаний		 - Массив из Строка - Массив со строками описаний, в который добавляется пргресс обработки строк ТЧ
//
Процедура ОбработатьТабличнуюЧасть(Знач ТЧНазвание, ТабличнаяЧастьМассив, ДокументЗайм, БылиИзменения, МассивОписаний)

	Если ТЧНазвание = "accruals" Тогда
		ТЧНазвание =  "Начисления";
	ИначеЕсли ТЧНазвание = "payments" Тогда
		ТЧНазвание =  "Платежи";
	Иначе
		Возврат;
	КонецЕсли;

	Для Каждого СтрокаТЧ Из ТабличнаяЧастьМассив Цикл
		
		//Поиск строки в табличной части по идентификатору
		Строка = ДокументЗайм[ТЧНазвание].Найти(СтрокаТЧ["id"], "id");
		
		//Если строка не найдена то заменяем ссылку на документ объектом
		//и добавляем новую строку в табличную часть
		Если Не ЗначениеЗаполнено(Строка) Тогда
			Если ТипЗНЧ(ДокументЗайм) = Тип("ДокументСсылка.МФОЗайм") Тогда
				ДокументЗайм = ДокументЗайм.ПолучитьОбъект(); 
				МассивОписаний.Добавить(СтрШаблон("Получение объекта документа вместо ссылки")); 
				
			КонецЕсли;
			Строка = ДокументЗайм[ТЧНазвание].Добавить(); 
			МассивОписаний.Добавить(СтрШаблон("Табличная часть %1, добавлена строка", ТЧНазвание));
			БылиИзменения = Истина; 
			
		КонецЕсли;

		Для Каждого ЭлементСтрокиТЧ Из СтрокаТЧ Цикл

			Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта(ЭлементСтрокиТЧ.Ключ,
				Метаданные.Документы.МФОЗайм.ТабличныеЧасти[ТЧНазвание]) Или ЭлементСтрокиТЧ.Значение = Неопределено
				Или ЭлементСтрокиТЧ.Значение = Null Тогда
				Продолжить;   
				
			КонецЕсли;           
			
			РеквизитТабличнойЧасти = Строка[ЭлементСтрокиТЧ.Ключ]; 
			
			Если ЭлементСтрокиТЧ.Ключ = "created_at" Или ЭлементСтрокиТЧ.Ключ = "updated_at" Или ЭлементСтрокиТЧ.Ключ
					= "deleted_at" Или ЭлементСтрокиТЧ.Ключ = "date" Тогда
				Значение = Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(ЭлементСтрокиТЧ.Значение, " ", ""), ":", ""), "-", ""));  
				
			ИначеЕсли ТипЗнч(РеквизитТабличнойЧасти) = Тип("Число") И ЯвляетсяЧислом(ЭлементСтрокиТЧ.Значение) тогда
				Значение = Число(ЭлементСтрокиТЧ.Значение);
				
			ИначеЕсли ТипЗнч(РеквизитТабличнойЧасти) = Тип("Строка") тогда   
				Значение =  Строка(ЭлементСтрокиТЧ.Значение);
				
			Иначе
				Значение =  ЭлементСтрокиТЧ.Значение;
			КонецЕсли;

			Если Не Строка[ЭлементСтрокиТЧ.Ключ] = Значение Тогда
				Если ТипЗНЧ(ДокументЗайм) = Тип("ДокументСсылка.МФОЗайм") Тогда
					ДокументЗайм = ДокументЗайм.ПолучитьОбъект();   
					МассивОписаний.Добавить(СтрШаблон("Получение объекта документа вместо ссылки")); 
					
				КонецЕсли;
				
				//если изменено id подразделение в строке то происходит поиск подразделения, кассы и банковского счета
				Если ЭлементСтрокиТЧ.Ключ = "branch_office_id" Тогда   

					Параметры = Новый Массив(2);
					Параметры[0] = Значение;
					Параметры[1] = "Созданное подразделение " + Значение;
					
					СтруктураПоискаПодразделения = ВыполнитьФункциюСОбработкойОшибки("НайтиПодразделение", Параметры);  
					Строка.Подразделение = СтруктураПоискаПодразделения.Ссылка;   
					
					МассивОписаний.Добавить(СтрШаблон("Табличная часть %1, строка %2, колонка %3, изменено значение %4", 
						ТЧНазвание, Строка.НомерСтроки, "Подразделение", Строка.Подразделение));
					
					БанковскийСчет = ПолучитьБанковскийСчетПодразделения(СтруктураПоискаПодразделения.Ссылка, ДокументЗайм.Дата);
					
					Строка.СпособПогашения = ?(ЗначениеЗаполнено(БанковскийСчет),
						Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк,Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу);
						
					МассивОписаний.Добавить(СтрШаблон("Табличная часть %1, строка %2, колонка %3, изменено значение %4", 
						ТЧНазвание, Строка.НомерСтроки, "Способ погашения", Строка.СпособПогашения));

					
					Если Строка.СпособПогашения = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу тогда     
						Параметры = Новый Массив(1);
						Параметры[0] = СтруктураПоискаПодразделения.Ссылка;
						
						СтруктураПоискаКассы = ВыполнитьФункциюСОбработкойОшибки("НайтиКассуПодразделения", Параметры);
						Строка.Касса = СтруктураПоискаКассы.Ссылка; 
						МассивОписаний.Добавить(СтрШаблон("Табличная часть %1, строка %2, колонка %3, изменено значение %4", 
							ТЧНазвание, Строка.НомерСтроки, "Касса", Строка.Касса));
						
					иначе
						Строка.БанковскийСчет = БанковскийСчет;
						МассивОписаний.Добавить(СтрШаблон("Табличная часть %1, строка %2, колонка %3, изменено значение %4", 
							ТЧНазвание, Строка.НомерСтроки, "Банковский cчет", Строка.БанковскийСчет));
						
					КонецЕсли;  					
				КонецЕсли;
				
				Строка[ЭлементСтрокиТЧ.Ключ] = Значение;   
				МассивОписаний.Добавить(СтрШаблон("Табличная часть %1, строка %2, колонка %3, изменено значение %4", 
					ТЧНазвание, Строка.НомерСтроки, ЭлементСтрокиТЧ.Ключ, Значение));
				БылиИзменения = Истина;
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры 

// Создает и возвращает соответствие реквизитов справочника Подразделения с ключами соответствия из файла JSON
// 
// Возвращаемое значение:
// -Соответствие из Строка, Строка - Соответствие реквизитов
//
Функция ПолучитьСоответствиеРеквизитовПодразделение()

	СоответсвиеРеквизитовПодразделение = Новый Соответствие;
	СоответсвиеРеквизитовПодразделение.Вставить("id", "id");
	СоответсвиеРеквизитовПодразделение.Вставить("pid", "pid");
	СоответсвиеРеквизитовПодразделение.Вставить("address", "address");
	СоответсвиеРеквизитовПодразделение.Вставить("document_prefix", "document_prefix");
	СоответсвиеРеквизитовПодразделение.Вставить("cato", "cato");
	СоответсвиеРеквизитовПодразделение.Вставить("created_at", "created_at");
	СоответсвиеРеквизитовПодразделение.Вставить("updated_at", "updated_at");
	СоответсвиеРеквизитовПодразделение.Вставить("deleted_at", "deleted_at");
	СоответсвиеРеквизитовПодразделение.Вставить("name", "НаименованиеПолное");
	СоответсвиеРеквизитовПодразделение.Вставить("label", "Наименование");
	Возврат СоответсвиеРеквизитовПодразделение;

КонецФункции  

// Ищет уже созданное подразделение по уникальному идентификатору, 
// в случае если подразделение не было найдено, создает новое и возвращает ссылку на него
//
// Параметры:
//  id - Строка - Идентификатор подразделения 
// 
// Возвращаемое значение:
//  - СправочникСсылка.ПодразделенияОрганизаций
//
Функция НайтиПодразделение(id, Наименование = "Созданное подразделение")

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.id = &id";

	Запрос.УстановитьПараметр("id", id);

	РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = новый Структура;
	
	Если РезультатЗапроса.Пустой() Тогда

		НовыйЭлемент = Справочники.ПодразделенияОрганизаций.СоздатьЭлемент();
		НовыйЭлемент.Владелец = Справочники.Организации.ОрганизацияПоУмолчанию();
		НовыйЭлемент.id = id; 
		НовыйЭлемент.Наименование = Наименование;
		НовыйЭлемент.Записать();
		
		РезультатФункции.Вставить("Описание", "Создано новое подразделение "+НовыйЭлемент.Ссылка);
		РезультатФункции.Вставить("Ссылка", НовыйЭлемент.Ссылка);
		Возврат РезультатФункции; 
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	РезультатФункции.Вставить("Ссылка", Выборка.Ссылка);
	Возврат РезультатФункции; 
	
КонецФункции 

// Ищет уже созданную кассу по уникальному идентификатору подразделения из ссылки ПодразделениеСсылка, 
// в случае если касса не найдена, создает новую, заполняет по данным из ПодразделениеСсылка и возвращает ссылку на элемент
//
// Параметры:
//  ПодразделениеСсылка - СправочникСсылка.ПодразделенияОрганизаций - Ссылка на подразделение организаций соответствующему кассе 
// 
// Возвращаемое значение:
// - СправочникСсылка.Кассы
//
Функция НайтиКассуПодразделения(ПодразделениеСсылка)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Кассы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	Кассы.id = &id";

	ПодразделениеСсылкаID = ПодразделениеСсылка.id;
	ПодразделениеСсылкаНаименование = ПодразделениеСсылка.Наименование;
	Запрос.УстановитьПараметр("id", ПодразделениеСсылкаID);

	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = новый Структура;
	
	Если РезультатЗапроса.Пустой() Тогда

		НовыйЭлемент = Справочники.Кассы.СоздатьЭлемент();
		НовыйЭлемент.id = ПодразделениеСсылкаID;
		НовыйЭлемент.ВалютаДенежныхСредств = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		НовыйЭлемент.Владелец = Справочники.Организации.ОрганизацияПоУмолчанию();
		НовыйЭлемент.Наименование = ?(ЗначениеЗаполнено(ПодразделениеСсылкаНаименование),ПодразделениеСсылкаНаименование,ПодразделениеСсылкаID);
		НовыйЭлемент.Записать(); 
		
        РезультатФункции.Вставить("Описание", "Создана новая касса "+НовыйЭлемент.Ссылка);
		РезультатФункции.Вставить("Ссылка", НовыйЭлемент.Ссылка);
		Возврат РезультатФункции;   
		
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	РезультатФункции.Вставить("Ссылка", Выборка.Ссылка);
	Возврат РезультатФункции; 
	
КонецФункции

// Ищет уже созданного контрагента, если не найден то создается контрагент и физ лицо. 
// Все заполняется данными из ЗаемщикДанные, Группа справочников указана в СтруктураРодителей
//
// Параметры:
//  ЗаемщикДанные - Соответствие из Строка, Строка 	- Соответствие содержащее данные по заемщику из JSON
//  СтруктураРодителей - Структура - Список групп справочников для размещения
// 
// Возвращаемое значение:
//  СправочникСсылка.Контрагенты
//
Функция НайтиКонтрагента(ЗаемщикДанные, СтруктураРодителей)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.id = &id";

	Запрос.УстановитьПараметр("id", ЗаемщикДанные.Получить("id"));

	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = новый Структура; 
	Описание = "";
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Параметры = Новый Массив(2);
		Параметры[0] = ЗаемщикДанные;
		Параметры[1] = СтруктураРодителей;
		
		СтруктураПоискаФизЛица = ВыполнитьФункциюСОбработкойОшибки("НайтиФизЛицо", Параметры);
		
		НовоеФизЛицо = СтруктураПоискаФизЛица.Ссылка;
		Описание = Описание +  СтруктураПоискаФизЛица.Описание + Символы.ПС;
		
		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйКонтрагент.id = ЗаемщикДанные.Получить("id");
		НовыйКонтрагент.Наименование = НовоеФизЛицо.Наименование;
		НовыйКонтрагент.НаименованиеПолное =  НовоеФизЛицо.Наименование;
		НовыйКонтрагент.ИдентификационныйКодЛичности =  НовоеФизЛицо.ИдентификационныйКодЛичности;
		НовыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		НовыйКонтрагент.Родитель = СтруктураРодителей.РодительКонтрагент;
        НовыйКонтрагент.ФизЛицо = НовоеФизЛицо;   
		
		Попытка
			НовыйКонтрагент.Записать();      
			Описание = Описание +  "Создан новый контрагент: "+НовыйКонтрагент.Ссылка + Символы.ПС;
			РезультатФункции.Вставить("Описание", Описание);
			РезультатФункции.Вставить("Ссылка", НовыйКонтрагент.Ссылка);
		Исключение
			Документы.МФОЛогирование.ЗаписатьДокументЛог("Ошибка создания контрагента "+ ЗаемщикДанные.Получить("fullname"), 
			"Контрагент не был создан"+Символы.ПС + ОписаниеОшибки(), 2); 
			Если НЕ ЗначениеЗаполнено(НовыйКонтрагент.Ссылка) тогда
				НовыйКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли;  
			Описание = Описание +  "Контрагент не был создан: "+НовыйКонтрагент.Ссылка + Символы.ПС;
			РезультатФункции.Вставить("Описание", Описание);
			РезультатФункции.Вставить("Ссылка", НовыйКонтрагент.Ссылка);
		КонецПопытки;
		
		Возврат РезультатФункции;

	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Описание = Описание +  "Найден контрагент в базе данных. " + Выборка.Ссылка + Символы.ПС;
	РезультатФункции.Вставить("Описание", "Найден контрагент в базе данных. " + Выборка.Ссылка);
	РезультатФункции.Вставить("Ссылка", Выборка.Ссылка);
	Возврат РезультатФункции;

КонецФункции

//Функция выполняет функцию переданную в параметре НаименованиеФункции с параметрами указанными в массиве Параметры
//Все подчиненые функции возвращают либо заполненное либо пустое значение. Если значение не заполнено то в функии произошла ошибка
//а значит она же будет перезапущена до КоличествоОбработкиОшибки раз.
//
// Параметры:
//  НаименованиеФункции -	 Строка 	- Строка с наименование вызываемой функции
//  Параметры - Массив из ЛюбаяСсылка - Массив параметров для функций
// 
// Возвращаемое значение:
//  Структура -	Структура ответа и функций перенаправляемая наверх
//
функция ВыполнитьФункциюСОбработкойОшибки(НаименованиеФункции, Параметры)
	
	КоличествоОбработкиОшибки = Константы.МФОПовторятьПриОшибке.Получить();
	Если КоличествоОбработкиОшибки = 0 тогда
		КоличествоОбработкиОшибки = 1;
	КонецЕсли;
	
	РезультатФункции = новый Структура;   
    РезультатФункции.Вставить("Описание", "Ошибка выполнения функции "+НаименованиеФункции);
	РезультатФункции.Вставить("Ссылка", Неопределено);	
	
	Для СчетчикВыполнения = 1 по КоличествоОбработкиОшибки цикл
		
		Если НаименованиеФункции = "НайтиФизЛицо" тогда
			РезультатФункции =НайтиФизЛицо(Параметры[0], Параметры[1]);
			
		ИначеЕсли НаименованиеФункции = "НайтиКонтрагента" тогда
			РезультатФункции =НайтиКонтрагента(Параметры[0], Параметры[1]);
			
		ИначеЕсли НаименованиеФункции = "НайтиПодразделение" тогда
			РезультатФункции =НайтиПодразделение(Параметры[0], Параметры[1]);
			
		ИначеЕсли НаименованиеФункции = "НайтиКассуПодразделения" тогда
			РезультатФункции =НайтиКассуПодразделения(Параметры[0]);
			
		ИначеЕсли НаименованиеФункции = "НайтиДоговор" тогда
			РезультатФункции =НайтиДоговор(Параметры[0], Параметры[1]);
			
		ИначеЕсли НаименованиеФункции = "НайтиЗайм" тогда
			РезультатФункции =НайтиЗайм(Параметры[0]);   
			
		иначе 
			Описание = "Ошибка выполнения функции ""ВыполнитьФункциюСОбработкойОшибки"". Не найдена функция "+ НаименованиеФункции + " не найдена.";
			Документы.МФОЛогирование.ЗаписатьДокументЛог(Описание, Описание, 1);   
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатФункции) и ЗначениеЗаполнено(РезультатФункции.Ссылка) тогда
			Возврат РезультатФункции;
		КонецЕсли;		
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Ищет уже созданное физ лицо, если не найдено то создается физ лицо. 
// Все заполняется данными из ЗаемщикДанные, Группа справочников указана в СтруктураРодителей
//
// Параметры:
//  ЗаемщикДанные - Соответствие из Строка, Строка 	- Соответствие содержащее данные по заемщику из JSON
//  СтруктураРодителей - Структура - Список групп справочников для размещения
// 
// Возвращаемое значение:
//  СправочникСсылка.ФизическоеЛицо
//
Функция НайтиФизЛицо(ЗаемщикДанные, СтруктураРодителей)
	
	ПолноеНаименование = ЗаемщикДанные.Получить("fullname");
	ИИН = ЗаемщикДанные.Получить("iin");
	ДатаРождения = СтрЗаменить(ЗаемщикДанные.Получить("date_of_birth"), "-", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Наименование = &Наименование
	|	И ФизическиеЛица.Родитель = &Родитель
	|	И ФизическиеЛица.ИдентификационныйКодЛичности = &ИдентификационныйКодЛичности";
	
	Запрос.УстановитьПараметр("Наименование", ПолноеНаименование);
	Запрос.УстановитьПараметр("Родитель", СтруктураРодителей.РодительФизЛицо);
	Запрос.УстановитьПараметр("ИдентификационныйКодЛичности", ИИН);
	
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = новый Структура;   
	
	Если РезультатЗапроса.Пустой() Тогда
			
		НовыйФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
		НовыйФизЛицо.Наименование = ПолноеНаименование;
		НовыйФизЛицо.ИдентификационныйКодЛичности = ИИН;
		НовыйФизЛицо.Родитель = СтруктураРодителей.РодительФизЛицо;
		НовыйФизЛицо.ДатаРождения = ДатаРождения;
		
		МассивФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеНаименование, " ", Истина);
		Фамилия  = ?(МассивФИО.Количество() > 0, МассивФИО[0], "");
		Имя      = ?(МассивФИО.Количество() > 1, МассивФИО[1], "");
		Отчество = ?(МассивФИО.Количество() > 2, МассивФИО[2], "");
		
		Если ЗначениеЗаполнено(Отчество) Тогда
			НовыйФизЛицо.Пол = ПроцедурыУправленияПерсоналомКлиентСервер.УстановитьПол(Отчество);
		КонецЕсли;  
		
		Попытка
			НовыйФизЛицо.Записать();
			
			НоваяСтрокаНаборФИО = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();
			НоваяСтрокаНаборФИО.Активность = Истина;
			НоваяСтрокаНаборФИО.Период =  Дата(1900, 1, 1);
			НоваяСтрокаНаборФИО.Имя = Имя;
			НоваяСтрокаНаборФИО.Фамилия = Фамилия;
			НоваяСтрокаНаборФИО.Отчество = Отчество;
			НоваяСтрокаНаборФИО.ФизЛицо = НовыйФизЛицо.Ссылка;
			НоваяСтрокаНаборФИО.Записать(Истина);
			РезультатФункции.Вставить("Описание", "Создано физ. лицо в базе данных. " + НовыйФизЛицо.Ссылка);
			
		Исключение  
			Описание = "Физ. лицо не было создано"+Символы.ПС + ОписаниеОшибки();
			Документы.МФОЛогирование.ЗаписатьДокументЛог("Ошибка создания физического лица "+ ПолноеНаименование, 
			Описание, 2);  
			
			Если НЕ ЗначениеЗаполнено(НовыйФизЛицо.Ссылка) тогда
				НовыйФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
			КонецЕсли;     
			
			РезультатФункции.Вставить("Описание", Описание);
		Конецпопытки;
		
		РезультатФункции.Вставить("Ссылка", НовыйФизЛицо.Ссылка);
		Возврат РезультатФункции;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	РезультатФункции.Вставить("Описание", "Найдено физ. лицо в базе данных. " + Выборка.Ссылка);
	РезультатФункции.Вставить("Ссылка", Выборка.Ссылка);
	Возврат РезультатФункции;
	
КонецФункции

// Создает и возвращает структуру с каталогами справочников, для того что бы не создавались 
// элементы дубликаты в случае многопоточного выполнения
// Возвращаемое значение:
// Структура  - РодительКонтрагент, РодительФизЛицо
//
Функция СтруктураРодителейСправочников()

	СтруктураРодителей = Новый Структура;
	СтруктураРодителей.Вставить("РодительКонтрагент", НайтиГруппу("Контрагенты"));
	СтруктураРодителей.Вставить("РодительФизЛицо", НайтиГруппу("ФизическиеЛица"));
	Возврат СтруктураРодителей;

КонецФункции

//Форматирует дату JSON в формат для 1С
// Параметры:
// ДатаJSON - Дата	- Дата для форматирования
//
//Возвращаемое значение:
// Дата  - Дата 
Функция ФорматироватьДатуJSON(ДатаJSON)

	СтрокаБезДопСимволов = СтрЗаменить(	СтрЗаменить(	СтрЗаменить(ДатаJSON, " ", ""), ":", ""), "-", "");
	ФорматированнаяДата = Дата(СтрокаБезДопСимволов);
	Возврат ФорматированнаяДата;

КонецФункции

//Процедура объединения двух массивов
// Параметры:
// ИтоговыйМассив - Массив
// МассивКДобавлению - Массив
Процедура ДобавитьМассивКМассиву(ИтоговыйМассив, МассивКДобавлению)  
	
	Если ТипЗнч(МассивКДобавлению) = Тип("Массив") тогда
		Для каждого ЭлементМассива Из МассивКДобавлению Цикл
			ИтоговыйМассив.Добавить(ЭлементМассива);
		КонецЦикла;	      
	КонецЕсли;
	
КонецПроцедуры

//Определяет яляется ли переданное значение Числом  
// Параметры:
//  Значение - Число, Строка 	- значение для определения типа
//  
// Возвращаемое значение:
//  Булево - Если переданое значение является числом то Истина
//
Функция ЯвляетсяЧислом(Значение)    
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Истина;
		
	Иначе
		
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Если Значение = "" Тогда
				Возврат Ложь;  
				
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			Р = Число(Значение);
			
		Исключение
			Возврат Ложь; 
			
		КонецПопытки;  
		
		Возврат Истина;  
		
	КонецЕсли;
КонецФункции

//Ищет банковсий счет подразделения в регистре МФО_СписокПодразделенийЧерезБанк
//
// Параметры:
//  ПодразделениеСсылка - ПодразделениеСсылка 	- Подраздление для поиска счета
//  Дата - Дата - Дата актуальности счета
// 
// Возвращаемое значение:
//  СправочникСсылка.БанковскийСчет
//
Функция ПолучитьБанковскийСчетПодразделения(ПодразделениеСсылка, Дата)

 	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МФО_СписокПодразделенийЧерезБанкСрезПоследних.Подразделение КАК Подразделение,
		|	МФО_СписокПодразделенийЧерезБанкСрезПоследних.БанковскийСчет КАК БанковскийСчет
		|ИЗ
		|	РегистрСведений.МФО_СписокПодразделенийЧерезБанк.СрезПоследних(
		|			&ТекущаяДата,
		|			Использовать = ИСТИНА
		|				И Подразделение = &ПодразделениеСсылка) КАК МФО_СписокПодразделенийЧерезБанкСрезПоследних";
	
	Запрос.УстановитьПараметр("ПодразделениеСсылка", ПодразделениеСсылка);
	Запрос.УстановитьПараметр("ТекущаяДата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВозвращаемоеЗначение = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		ВозвращаемоеЗначение = ВыборкаДетальныеЗаписи.БанковскийСчет;

	КонецЦикла;    
	
	Возврат ВозвращаемоеЗначение;	
КонецФункции 


#КонецОбласти