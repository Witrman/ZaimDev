#Область СлужебныйПрограммныйИнтерфейс

// Выполняет попытку обновления ключа сессии на сервере
// (на сервере предприятия должны быть установлены сертификаты для подписания и пароль).
// 
// Параметры:
// 	ПараметрыЗапроса - (См. ИнтерфейсАвторизацииИСМПТККлиентСервер.ПараметрыЗапросаКлючаСессии) - Параметры запроса ключа сессии для организации для которой необходимо обновить ключ сессии.
// Возвращаемое значение:
// 	Булево - Истина, если обновление ключа сессии выполнено успешно.
Функция ОбновитьКлючСессииНаСервере(ПараметрыЗапроса) Экспорт
	
	СертификатыДляПодписанияНаСервере = ИнтерфейсАвторизацииИСМПТКСлужебный.СертификатыДляПодписанияНаСервере();
	Если СертификатыДляПодписанияНаСервере = Неопределено
		Или СертификатыДляПодписанияНаСервере.Сертификаты.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Запрашивает ключ сессии и установливает его в параметры сеанса.
// 
// Параметры:
// 	ПараметрыЗапроса - (См. ИнтерфейсАвторизацииИСМПТККлиентСервер.ПараметрыЗапросаКлючаСессии) - Параметры запроса ключа сессии для организации для которой необходимо обновить ключ сессии.
// 	ПараметрыАвторизации - (См. ИнтерфейсАвторизацииИСМПСлужебный.ПараметрыАвторизации).
// 	Подпись - Строка - Подпись.
// Возвращаемое значение:
// 	Булево - Ключ сессии успешно запрошен и установлен
Функция ЗапроситьУстановитьКлючСессии(ПараметрыЗапроса, ПараметрыАвторизации, Подпись) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КлючСессииУстановлен", Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",          "");
	
	СвойстваПодписи = Новый Структура("Подпись", Подпись);
	
	ПараметрыЗапросаПоОрганизации = Новый Структура;
	ПараметрыЗапросаПоОрганизации.Вставить("ПараметрыЗапроса",     ПараметрыЗапроса);
	ПараметрыЗапросаПоОрганизации.Вставить("ПараметрыАвторизации", ПараметрыАвторизации);
	ПараметрыЗапросаПоОрганизации.Вставить("СвойстваПодписи",      СвойстваПодписи);
	
	РезультатЗапросаКлючаСессии = ИнтерфейсАвторизацииИСМПТКВызовСервера.ЗапроситьКлючСессии(ПараметрыЗапросаПоОрганизации);
	
	Если РезультатЗапросаКлючаСессии.ПараметрыКлючаСессии <> Неопределено Тогда
		
		ИнтерфейсАвторизацииИСМПТКСлужебный.УстановитьКлючСессии(
			ПараметрыЗапросаПоОрганизации.ПараметрыЗапроса,
			РезультатЗапросаКлючаСессии.ПараметрыКлючаСессии);
		
		ВозвращаемоеЗначение.КлючСессииУстановлен = Истина;
		
		Возврат ВозвращаемоеЗначение;
		
	Иначе
		
		ВозвращаемоеЗначение.КлючСессииУстановлен = Ложь;
		ВозвращаемоеЗначение.ТекстОшибки          = РезультатЗапросаКлючаСессии.ТекстОшибки;
		
		Возврат ВозвращаемоеЗначение;
		
	КонецЕсли;
	
КонецФункции

Процедура УстановитьКлючСессии(ПараметрыЗапроса, ПараметрыКлючаСессии) Экспорт
	
	Попытка
		ДанныеКлючаСессии = ПараметрыСеанса[ПараметрыЗапроса.ИмяПараметраСеанса].Получить();
	Исключение
		ДанныеКлючаСессии = Неопределено;
	КонецПопытки;
	
	Если ДанныеКлючаСессии = Неопределено Тогда
		ДанныеКлючаСессии = Новый Соответствие;
	КонецЕсли;
	
	ДанныеКлючаСессии.Вставить(ПараметрыЗапроса.Организация, ПараметрыКлючаСессии);
	
	ПараметрыСеанса[ПараметрыЗапроса.ИмяПараметраСеанса] = Новый ХранилищеЗначения(ДанныеКлючаСессии);
	
КонецПроцедуры

// Возвращает ключ сессии для обмена с МОТП.
// 
// Параметры:
// 	ПараметрыЗапроса - (См. ИнтерфейсАвторизацииИСМПТККлиентСервер.ПараметрыЗапросаКлючаСессии) - Параметры запроса ключа сессии.
// 	СрокДейтвия      - Дата, Неопределено - Срок действия ключа сессии.
// Возвращаемое значение:
// 	Строка, Неопределено - Действующий ключ сессии для организации.
Функция ПроверитьОбновитьКлючСессии(ПараметрыЗапроса, Знач СрокДействия = Неопределено, ОбновлятьКлючСессииНаСервере = Истина) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПТКВызовСервера.ТекущийКлючСессии(ПараметрыЗапроса, СрокДействия);
	
	ТребуетсяОбновлениеКлючаСессии = (КлючСессии = Неопределено);
	
	Если ТребуетсяОбновлениеКлючаСессии
		И ИнтерфейсАвторизацииИСМПТКСлужебный.ОбновитьКлючСессииНаСервере(ПараметрыЗапроса) Тогда
		КлючСессии = ИнтерфейсАвторизацииИСМПТКВызовСервера.ТекущийКлючСессии(ПараметрыЗапроса);
	КонецЕсли;
	
	Возврат КлючСессии;
	
КонецФункции

// Возвращает структуру данных запроса авторизации
// 
// Параметры:
// Возвращаемое значение:
// 	Структура - Параметры авторизации:
// * Идентификатор - Строка - Идентификатор запроса
// * Данные        - Строка - Данные для подписания
Функция ПараметрыАвторизации() Экспорт
	
	ПараметрыАвторизации = Новый Структура;
	ПараметрыАвторизации.Вставить("Идентификатор");
	ПараметрыАвторизации.Вставить("Данные");
	
	Возврат ПараметрыАвторизации;
	
КонецФункции

// Возвращает структуру данных ключа сессии обмена с МОТП.
// 
// Параметры:
// Возвращаемое значение:
// 	Структура - Параметры ключа сессии:
// * КлючСессии  - Строка - Ключ сессии.
// * ДействуетДо - Дата   - Дата и время окончания действия ключа сессии.
Функция ПараметрыКлючаСессии() Экспорт
	
	ПараметрыКлючаСессии = Новый Структура;
	ПараметрыКлючаСессии.Вставить("КлючСессии",  "");
	ПараметрыКлючаСессии.Вставить("ДействуетДо", '00010101');
	
	Возврат ПараметрыКлючаСессии;
	
КонецФункции

#Область ЭлектроннаяПодпись

// Получает сертификаты организаций, для предназначены для подписания на сервере.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Сертификаты - ТаблицаЗначений - содержит сертификат и пароль.
//   * МенеджерКриптографии - МенеджерКриптографии - менеджер криптографии.
//
Функция СертификатыДляПодписанияНаСервере() Экспорт
	
	Возврат Неопределено;
			
КонецФункции

#КонецОбласти

#КонецОбласти