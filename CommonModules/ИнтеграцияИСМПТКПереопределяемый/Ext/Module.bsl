
#Область ПодключаемоеОборудование

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить видимость команд.
//
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	НастроитьПодключаемоеОборудованиеДополнительно(Форма, ПрефиксыЭлементовФормы);
	
	Если ЗначениеЗаполнено(ПрефиксыЭлементовФормы) Тогда
		МассивПрефиксыЭлементовФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрефиксыЭлементовФормы, ",");
	Иначе
		МассивПрефиксыЭлементовФормы = Новый Массив;
		МассивПрефиксыЭлементовФормы.Добавить(ПрефиксыЭлементовФормы);
	КонецЕсли;

	Возврат;
	
КонецПроцедуры

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме
// Параметры:
//   Форма - Форма, в которой необходимо настроить подключаемое оборудование.
//
Процедура НастроитьПодключаемоеОборудованиеДополнительно(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	ТипыПодключенногоОборудования = МенеджерОборудованияСерверПовтИсп.ТипыПодключенногоОборудования();
	
	Форма.ИспользоватьПодключаемоеОборудование = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ИспользоватьПодключаемоеОборудование()
											И ТипыПодключенногоОборудования <> Неопределено
											И ТипыПодключенногоОборудования.Количество() > 0;
	
	ЕстьТСД  = ТипыПодключенногоОборудования <> Неопределено
		И ТипыПодключенногоОборудования.Найти(Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных) <> Неопределено;
		
	Если ЗначениеЗаполнено(ПрефиксыЭлементовФормы) Тогда
		МассивПрефиксыЭлементовФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрефиксыЭлементовФормы, ",");
	Иначе
		МассивПрефиксыЭлементовФормы = Новый Массив;
		МассивПрефиксыЭлементовФормы.Добавить(ПрефиксыЭлементовФормы);
	КонецЕсли;
	
	Для Каждого Префикс Из МассивПрефиксыЭлементовФормы Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			Префикс + "ЗагрузитьДанныеИзТСД",
			"Видимость",
			Форма.ИспользоватьПодключаемоеОборудование И ЕстьТСД);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			Префикс + "ВыгрузитьДанныеВТСД",
			"Видимость",
			Форма.ИспользоватьПодключаемоеОборудование И ЕстьТСД);
				
	КонецЦикла;
	
КонецПроцедуры

Функция ПодключитьВнешнююКомпонентуПечатиШтрихкода() Экспорт
	
	ПодключениеВыполнено = ПодключитьВнешнююКомпоненту("Обработка.ОбменИСМПТК.Макет.КомпонентаПечатиШтрихкодовИСМПТК", "КартинкаШтрихкодаИСМПТ", ТипВнешнейКомпоненты.Native);
		
	// Создадим объект внешней компоненты.
	Если ПодключениеВыполнено Тогда
		ВнешняяКомпонента = Новый("AddIn.КартинкаШтрихкодаИСМПТ.Barcode");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Если нет возможности рисовать.
	Если НЕ ВнешняяКомпонента.ГрафикаУстановлена Тогда
		// То картинку сформировать не сможем.
		Возврат Неопределено;
	Иначе
		// Установим основные параметры компоненты.
		// Если в системе установлен шрифт Tahoma.
		Если ВнешняяКомпонента.НайтиШрифт("Tahoma") Тогда
			// Выбираем его как шрифт для формирования картинки.
			ВнешняяКомпонента.Шрифт = "Tahoma";
		Иначе
			// Шрифт Tahoma в системе отсутствует.
			// Обойдем все доступные компоненте шрифты.
			Для Сч = 0 По ВнешняяКомпонента.КоличествоШрифтов -1 Цикл
				// Получим очередной шрифт, доступный компоненте.
				ТекущийШрифт = ВнешняяКомпонента.ШрифтПоИндексу(Сч);
				// Если шрифт доступен
				Если ТекущийШрифт <> Неопределено Тогда
					// Они и будет шрифтом для формирования штрихкода.
					ВнешняяКомпонента.Шрифт = ТекущийШрифт;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// Установим размер шрифта
		ВнешняяКомпонента.РазмерШрифта = 12;
		
		Возврат ВнешняяКомпонента;
	КонецЕсли;
	
КонецФункции

Процедура ПриСозданииНаСервере_НастроитьПодключаемоеОборудование(Форма) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(Форма);
	
	//Розница
	//ИнтеграцияИСПереопределяемый.НастроитьПодключаемоеОборудование(Форма);
	
	//БК
	ОбщегоНазначенияБКВызовСервера.НастроитьПодключаемоеОборудование(Форма);
	///////////////////
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаТаблиц

// Пересчитывает количество товара (в единицах хранения) в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьКоличествоЕдиницВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 

	Перем УпаковкаНоменклатура;
		
КонецПроцедуры

Функция ПараметрыЗаполненияТабличнойЧасти() Экспорт

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ОбработатьУпаковки",                 Истина);
	ПараметрыЗаполнения.Вставить("ПересчитатьКоличествоЕдиниц",        Ложь);
	ПараметрыЗаполнения.Вставить("ПересчитатьКоличествоУпаковок",      Ложь);
	ПараметрыЗаполнения.Вставить("ПересчитатьСумму",                   Ложь);
	ПараметрыЗаполнения.Вставить("ПересчитатьЦенуПоСумме",             Ложь);
	ПараметрыЗаполнения.Вставить("ПроверитьСериюРассчитатьСтатус",     Ложь);
	ПараметрыЗаполнения.Вставить("ШтрихкодыВТЧ",                       Ложь);
	ПараметрыЗаполнения.Вставить("МаркируемаяПродукцияВТЧ",            Ложь);

	ПараметрыЗаполнения.Вставить("ЗаполнитьАртикул",                   Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнитьКод",                       Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнитьЕдиницуИзмерения",          Истина);
	ПараметрыЗаполнения.Вставить("ЗаполнитьТипНоменклатуры",           Истина);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Заполняет колонку таблицы значений последовательными номерами
//
// Параметры:
//	Таблица - таблица значений, строки которой нужно пронумеровать
//	ИмяКолонкиНомераСтроки - колонка таблицы значений, в которой будут указаны номера строк.
//
Процедура ПронумероватьТаблицуЗначений(Таблица, ИмяКолонкиНомераСтроки) Экспорт

	Если Таблица.Колонки.Найти(ИмяКолонкиНомераСтроки) = Неопределено Тогда
		Таблица.Колонки.Добавить(ИмяКолонкиНомераСтроки, ПолучитьОписаниеТиповЧисла(15, 0));
	КонецЕсли;

	КоличествоСтрок = Таблица.Количество() - 1;
	Для НомерСтроки = 0 По КоличествоСтрок Цикл
		Таблица[НомерСтроки][ИмяКолонкиНомераСтроки] = НомерСтроки;
	КонецЦикла;

КонецПроцедуры

// Возвращает ссылку на новое поле в переданном наборе данных
//
// Параметры:
//  НаборДанных  - НаборДанныхЗапросСхемыКомпоновкиДанных, НаборДанныхОбъектСхемыКомпоновкиДанных - набор данных в
//      котором необходимо создать новое поле
//  Поле         - Строка - имя нового поля схемы компоновки данных
//  ПутьКДанным  - Строка - путь к данным нового поля схемы компоновки данных (необязательное по умолчанию равно "")
//  Заголовок    - Строка - заголовок нового поля схемы компоновки данных (необязательное по умолчанию равно "")
//  ТипЗначения  - ОписаниеТипов - тип данных нового поля схемы компоновки данных (необязательное по умолчанию Неопределено).
//
// Возвращаемое значение:
//  ПолеНабораДанныхСхемыКомпоновкиДанных - описание возвращаемого значения.
//
Функция НовоеПолеНабора(НаборДанных, Поле, ПутьКДанным = "", Заголовок = "", ТипЗначения = Неопределено) Экспорт
	
	Если ПустаяСтрока(ПутьКДанным) Тогда
		ПутьКДанным = Поле;
	КонецЕсли;
	
	Если ПустаяСтрока(Заголовок) Тогда
		Заголовок = Поле;
	КонецЕсли;
	
	НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Поле 		  = Поле;
	НовоеПоле.ПутьКДанным = ПутьКДанным;
	НовоеПоле.Заголовок   = Заголовок;
	Если ТипЗначения <> Неопределено Тогда
		НовоеПоле.ТипЗначения = ТипЗначения;
	КонецЕсли;
	
	Возврат НовоеПоле;
	
КонецФункции

#КонецОбласти

#Область Штрихкодирование

//Возвращает структуру параметров обработки штрихкодов.
//
// Возвращаемое значение:
//  Структура - Параметры обработки штрихкодов.
//
Функция ПараметрыОбработкиШтрихкодов() Экспорт
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("Штрихкоды",                                      Неопределено);
	ПараметрыОбработки.Вставить("СтруктураДействийСДобавленнымиСтроками",         Неопределено);
	ПараметрыОбработки.Вставить("СтруктураДействийСИзмененнымиСтроками",          Неопределено);
	ПараметрыОбработки.Вставить("СтруктураДействийСоСтрокамиИзУпаковочныхЛистов", Неопределено);
	ПараметрыОбработки.Вставить("ПараметрыУказанияСерий",                		  Неопределено);
	ПараметрыОбработки.Вставить("ДействияСНеизвестнымиШтрихкодами",       		  "ЗарегистрироватьПеренестиВДокумент");
	ПараметрыОбработки.Вставить("ИмяКолонкиКоличество",                 		  "КоличествоУпаковок");
	ПараметрыОбработки.Вставить("ИмяКолонкиУпаковка",                 		      "Упаковка");
	ПараметрыОбработки.Вставить("НеИспользоватьУпаковки",              			  Ложь);
	ПараметрыОбработки.Вставить("ИмяТЧ",                                		  "Товары");
	ПараметрыОбработки.Вставить("ИзменятьКоличество",                   		  Истина);
	ПараметрыОбработки.Вставить("БлокироватьДанныеФормы",             			  Истина);
	ПараметрыОбработки.Вставить("ТолькоТовары",                          		  Ложь);
	ПараметрыОбработки.Вставить("ТолькоТоварыИРабота",                  		  Ложь);
	ПараметрыОбработки.Вставить("ТолькоУслуги",                         		  Ложь);
	ПараметрыОбработки.Вставить("ТолькоТара",                            		  Ложь);
	ПараметрыОбработки.Вставить("ТолькоНеПодакцизныйТовар",              		  Ложь);
	ПараметрыОбработки.Вставить("НеизвестныеШтрихкоды",                 		  Новый Массив);
	ПараметрыОбработки.Вставить("ОтложенныеТовары",                     		  Новый Массив);
	ПараметрыОбработки.Вставить("ПараметрыПроверкиАссортимента",       			  Неопределено);
	ПараметрыОбработки.Вставить("РассчитыватьНаборы",                   		  Ложь);
	ПараметрыОбработки.Вставить("УчитыватьУпаковочныеЛисты",           			  Ложь);
	ПараметрыОбработки.Вставить("ОтработатьИзменениеУпаковочныхЛистов", 		  Ложь);
	ПараметрыОбработки.Вставить("ШтрихкодыВТЧ",                         		  Ложь);
	ПараметрыОбработки.Вставить("МаркируемаяПродукцияВТЧ",              		  Ложь);
	ПараметрыОбработки.Вставить("УвеличиватьКоличествоВСтрокахССериями", 		  Истина);
	ПараметрыОбработки.Вставить("ТекущийУпаковочныйЛист",               		  Неопределено);
	ПараметрыОбработки.Вставить("ЗаполнятьНазначения",                  		  Ложь);
	ПараметрыОбработки.Вставить("ЗагрузкаИзТСД",                        		  Ложь);
	
	//Возвращаемые параметры
	ПараметрыОбработки.Вставить("МассивСтрокССериями",          Новый Массив);
	ПараметрыОбработки.Вставить("МассивСтрокСАкцизнымиМарками", Новый Массив);
	ПараметрыОбработки.Вставить("ТекущаяСтрока",      			Неопределено);
	
	Возврат ПараметрыОбработки;
	
КонецФункции

#КонецОбласти

#Область ПодключениеКСерверу

Функция ПолучитьПрокси(Знач URLИлиПротокол) Экспорт
	
	Возврат ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(URLИлиПротокол);
	
КонецФункции

Функция ПодобратьСсылкуНаУчастникаМаркировкиПоБИН(ИИНБИН) Экспорт
	
	Если ИИНБИН = Неопределено Тогда  //Если с сервера не пришло значение 
		Возврат Неопределено;
	КонецЕсли;
	
	//Ищем контрагента или орагнизацию с таким ИИН/БИН
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//|	Организации.Ссылка КАК Ссылка
	//|ИЗ
	//|	Справочник.Организации КАК Организации
	//|ГДЕ
	//|	Организации.ИНН = &ИННБИН
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	Контрагенты.Ссылка
	//|ИЗ
	//|	Справочник.Контрагенты КАК Контрагенты
	//|ГДЕ
	//|	Контрагенты.ИНН = &ИННБИН";
	
	//БК
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИдентификационныйНомер = &ИННБИН
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИдентификационныйКодЛичности = &ИННБИН";
	///////////////////
		
	Запрос.УстановитьПараметр("ИННБИН", ИИНБИН);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область НастройкиВеденияУчета

//Для розничного контура.
//Отображение настроек дополнительного функционала розничного контура маркировки (чеки ККМ)
//
Функция ПроверитьОтражениеРозничногоКонтураНастройки() Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//Возврат Истина;
	//БК
	Возврат Ложь;
	///////////////////
	
КонецФункции

Функция ПроверитьИспользованиеХарактеристик() Экспорт
	
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПроверитьИспользованиеХарактеристик();
	
КонецФункции

Функция ПроверитьИспользованиеУпаковок() Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//Возврат ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	//БК
	Возврат Ложь;
	///////////////////
	
КонецФункции

Функция ПроверитьВедениеУчетаПоХарактеристикамУНоменклатуры(Номенклатура) Экспорт
	
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПроверитьВедениеУчетаПоХарактеристикамУНоменклатуры(Номенклатура);
	
КонецФункции

Функция ПроверитьВедениеУчетаПоУпаковкамУНоменклатуры(Номенклатура) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//Возврат Номенклатура.ИспользоватьУпаковки;
	
	//БК
	Возврат Ложь;
	///////////////////
	
КонецФункции
 
Функция ПроверитьВозможностьИзменения(ОбъектПутьКДанным, Форма) Экспорт
	 
	//Переопределение для возможности использования в розничном выбытии
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПроверитьВозможностьИзменения(ОбъектПутьКДанным, Форма);
	
КонецФункции

Процедура ПроверитьЗначениеТиповыхОпцийУчетаМаркировки() Экспорт
	
	//Сохранено для поддержки старых версий типовых решений (где не обновлен розничный контур маркировки)
	Если Метаданные.НайтиПоПолномуИмени("Константа.ВестиУчетОбувнойПродукцииИСМП") <> Неопределено Тогда  //Проверяем наличие типовой константы учета
		ВестиУчетОбувиТиповой    = Константы["ВестиУчетОбувнойПродукцииИСМП"].Получить();
		ВестиУчетОбувиБиблиотека = Константы.ВестиУчетМаркируемойОбувиИСМПТК.Получить();
		Если ВестиУчетОбувиТиповой И Не ВестиУчетОбувиБиблиотека Тогда 
			//Типовая константа в приоритете
			Константы.ВестиУчетМаркируемойОбувиИСМПТК.Установить(ВестиУчетОбувиТиповой);
		КонецЕсли;
	Иначе
		ВестиУчетОбувиТиповой = Ложь;
	КонецЕсли;
	
	Если Метаданные.НайтиПоПолномуИмени("Константа.ВестиУчетТабачнойПродукцииМОТП") <> Неопределено Тогда //Проверяем наличие типовой константы учета
		ВестиУчетТабакаТиповой    = Константы["ВестиУчетТабачнойПродукцииМОТП"].Получить();
		ВестиУчетТабакаБиблиотека = Константы.ВестиУчетМаркируемогоТабакаИСМПТК.Получить();
		Если ВестиУчетТабакаТиповой И Не ВестиУчетТабакаБиблиотека Тогда
			Константы.ВестиУчетМаркируемогоТабакаИСМПТК.Установить(ВестиУчетТабакаТиповой);
		КонецЕсли;
	Иначе
		ВестиУчетТабакаТиповой = Ложь;
	КонецЕсли;
	
	Если ВестиУчетТабакаТиповой Или
		ВестиУчетОбувиТиповой Или
		ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемыхЛекарствИСМПТК") Тогда
		
		Константы.ВестиУчетМаркируемойПродукцииИСМПТК.Установить(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначениеТиповыхКонстантУчетаМаркировки() Экспорт
	
	//Вызывается при изменении значений констант учета по ТГ в форме настроек обмена с ИС МПТ.
	//Актуально до момента полного встраивания БМ в типовые решения. Т.к. в розничном контуре
	//старый типовой механизм использует российские константы, но методологически учет розничного
	//контура и оптового связаны, то при включении/выключении учета по ТГ в одном контуре нужно автоматически
	//приводить в соответствие другой контур.
	УчетОбувиБиблиотека  = Константы.ВестиУчетМаркируемойОбувиИСМПТК.Получить();
	УчетТабакаБиблиотека = Константы.ВестиУчетМаркируемогоТабакаИСМПТК.Получить();
	
	Если Метаданные.НайтиПоПолномуИмени("Константа.ВестиУчетОбувнойПродукцииИСМП") <> Неопределено Тогда 
		Константы["ВестиУчетОбувнойПродукцииИСМП"].Установить(УчетОбувиБиблиотека);
	КонецЕсли;
	Если Метаданные.НайтиПоПолномуИмени("Константа.ВестиУчетТабачнойПродукцииМОТП") <> Неопределено Тогда 
		Константы["ВестиУчетТабачнойПродукцииМОТП"].Установить(УчетТабакаБиблиотека);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначениеБиблиотечныхКонстантУчетаМаркировки() Экспорт
	
	Если Метаданные.НайтиПоПолномуИмени("Константа.ВестиУчетОбувнойПродукцииИСМП") <> Неопределено Тогда 
		УчетОбувиТиповая  = Константы["ВестиУчетОбувнойПродукцииИСМП"].Получить();
		Константы.ВестиУчетМаркируемойОбувиИСМПТК.Установить(УчетОбувиТиповая);
	КонецЕсли;
	
	Если Метаданные.НайтиПоПолномуИмени("Константа.ВестиУчетТабачнойПродукцииМОТП") <> Неопределено Тогда 
		УчетТабакаТиповая = Константы["ВестиУчетТабачнойПродукцииМОТП"].Получить();
		Константы.ВестиУчетМаркируемогоТабакаИСМПТК.Установить(УчетТабакаТиповая);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСНоменклатурой

// Заполняет представление строки номенклатуры.
//
// Параметры:
//   Представление  - Строка                                     - представление для заполнения,
//   Номенклатура   - ОпределяемыйТип.Номенклатура               - ссылка на номенклатуру,
//   Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - ссылка на характеристику номенклатуры,
//   Упаковка       - ОпределяемыйТип.Упаковка                   - ссылка на упаковку.
//   Серия          - ОпределяемыйТип.СерияНоменклатуры          - ссылка на серию номенклатуры.
//
Процедура ЗаполнитьПредставлениеНоменклатуры(Представление, Номенклатура, Характеристика, Упаковка, Серия) Экспорт
	
	Если РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЕстьРеквизитОбъекта(Номенклатура, "БазоваяЕдиницаИзмерения") Тогда 
		//БК 3.0
		РеквизитыНоменклатуры = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЗначенияРеквизитовОбъекта(Номенклатура, "Наименование, НаименованиеПолное, БазоваяЕдиницаИзмерения", Истина);
	Иначе
		//ЕРП 2.4
		РеквизитыНоменклатуры = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЗначенияРеквизитовОбъекта(Номенклатура, "Наименование, НаименованиеПолное, ЕдиницаИзмерения", Истина);
	КонецЕсли;
	
	Представление = ?(ЗначениеЗаполнено(РеквизитыНоменклатуры.НаименованиеПолное), РеквизитыНоменклатуры.НаименованиеПолное, РеквизитыНоменклатуры.Наименование);
	
КонецПроцедуры

Функция ПолучитьНоменклатуруПоШтрихкоду(ШтрихКод) Экспорт
	
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПолучитьНоменклатуруПоШтрихкоду(ШтрихКод);   
		
КонецФункции

Функция ПолучитьПустуюСсылкуНоменклатура() Экспорт
	
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПолучитьПустуюСсылкуНоменклатура(); 
	
КонецФункции

Функция ПолучитьШаблонДляНоменклатурыЗаказа(Номенклатура) Экспорт
	
	Если Не ЗначениеЗаполнено(Номенклатура) 
		Или Не ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь")
	КонецЕсли;
	
	Если Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь");
		
	ИначеЕсли Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция");
		
	ИначеЕсли Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты");
		
	ИначеЕсли Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность");
		
	ИначеЕсли Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка"); //Значение по умолчанию, потом выбрается пользователем
		
	КонецЕсли;
	
	Возврат ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь"); 
	
КонецФункции

// Заполняет в табличной части служебные реквизиты, например: признак использования характеристик номенклатуры, артикул.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма.
//  ТабличнаяЧасть - ДанныеФормыКоллекция - таблица для заполнения.
//
Процедура ЗаполнитьСлужебныеРеквизитыВКоллекции(Форма, ТабличнаяЧасть) Экспорт
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	
	КолонкиРеквизитов = ТабличнаяЧасть.Выгрузить(Новый Массив).Колонки;
	
	Если КолонкиРеквизитов.Найти("Артикул")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "Артикул"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("Код")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакКод",
			Новый Структура("Номенклатура", "Код"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ХарактеристикиИспользуются")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ЕдиницаИзмерения")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакЕдиницаИзмерения",
			Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ТипНоменклатуры")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ТипНоменклатуры"));
	КонецЕсли;
		
	Если КолонкиРеквизитов.Найти("НоваяХарактеристикаИспользуется")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("НоваяНоменклатура", "НоваяХарактеристикаИспользуется"));
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

Функция ПолучитьСведенияОНоменклатуре(Номенклатура) Экспорт
	
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПолучитьСведенияОНоменклатуре(Номенклатура);

КонецФункции

Функция ПолучитьВидПродукцииПоНоменклатуре(Номенклатура) Экспорт
	
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);  
	
КонецФункции

Функция ПолучитьДополнительныеСведенияОНоменклатуреДляИмпорта(Номенклатура, EAN) Экспорт
	
	ДополнительныеСведения = Новый Структура();
	
	СтруктураХарактеристика = ПолучитьСведенияОХарактеристикеНоменклатуры(Номенклатура, EAN);
	ТНВЭД = ПолучитьКодТНВЭДПоНоменклатуре(Номенклатура);
	
	Если Не СтруктураХарактеристика = Неопределено Тогда 
		ДополнительныеСведения.Вставить("Характеристика", СтруктураХарактеристика.Характеристика); 
	Иначе
		ДополнительныеСведения.Вставить("Характеристика", СтруктураХарактеристика); 
	КонецЕсли;
	ДополнительныеСведения.Вставить("ТНВЭД", ТНВЭД);
	
	Возврат ДополнительныеСведения;	
	
КонецФункции

Функция ПолучитьТипыДанныхНоменклатуры() Экспорт
	
	ТипыДанных = Новый Структура();
	ТипыДанных.Вставить("Номенклатура", 	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	//ТипыДанных.Вставить("Характеристика",   Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//ТипыДанных.Вставить("Упаковка", 		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	//Розница
	//ТипыДанных.Вставить("Упаковка", 		Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	
	//БК
	ТипыДанных.Вставить("Упаковка", 		Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	///////////////////
	
	Возврат ТипыДанных;
	
КонецФункции

Функция ПолучитьБазовуюЕденицуИзмерения(Номенклатура) Экспорт
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//Возврат ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
	
	//Розница
	//Возврат ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
	
	//БК
	Возврат ЗначениеРеквизитаОбъекта(Номенклатура, "БазоваяЕдиницаИзмерения");
	///////////////////
		
КонецФункции

#Область УпаковкиИШаблоны

Функция ПолучитьШаблонКодаПоВидуПродукции(ВидПродукцииИС) Экспорт
	
	Если ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") Тогда
		Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь");
		
	ИначеЕсли ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция") Тогда
		Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция");
		
	ИначеЕсли ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") Тогда
		Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты");
		
	ИначеЕсли ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
		Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка");
		
	ИначеЕсли ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность") Тогда
		Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность");
		
	ИначеЕсли ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.БезалкогольныеНапитки") Тогда
		Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.УпакованнаяВодаИНапитки");
		
	Иначе
		Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ПустаяСсылка");
	КонецЕсли;
	
	Возврат Шаблон;
	
КонецФункции

Функция ПолучитьВидПродукцииПоШаблонуКода(Шаблон) Экспорт
	
	Если Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь") Тогда
		ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная");
		
	ИначеЕсли Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция") Тогда
		ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция")
		
	ИначеЕсли Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты") Тогда
		ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты");
		
	ИначеЕсли Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка") Тогда
		ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная");
		
	ИначеЕсли Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность") Тогда
		ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность");
		
	ИначеЕсли Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.УпакованнаяВодаИНапитки") Тогда
		ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.БезалкогольныеНапитки");
	
	Иначе
		ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка");
	КонецЕсли;
	
	Возврат ВидПродукцииИС;
	
КонецФункции

Функция ПолучитьВидУпаковкиПоШаблонуКода(Шаблон) Экспорт
	
	Если Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь") 
		Или Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция")
		Или Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты") 
		Или Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка") 
		Или Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность")
		Или Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.УпакованнаяВодаИНапитки") Тогда
		
		ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская");
		
	ИначеЕсли Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек") Тогда
		
		ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая");
		
	Иначе
		
		ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат ВидУпаковки;
	
КонецФункции

#КонецОбласти

#Область ФормаПодбораНоменклатурыИРегистрацииновыхШК

//Вызов из формы РозничноеВыбытиеМаркированнойПродукцииИСМПТК.ПоискНоменклатурыПоШтрихкоду, процедура ПриСозданииНаСервере()
Процедура ПоискНоменклатурыПоШтрихкодуПриСозданииНаСервере(Форма) Экспорт
	
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПоискНоменклатурыПоШтрихкодуПриСозданииНаСервере(Форма);
	
КонецПроцедуры

Процедура ПоискНоменклатурыПоШтрихкодуОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПоискНоменклатурыПоШтрихкодуОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПолучитьНоменклатуруПоШтрихкодам(Штрихкоды, ДанныеПоШтрихкодам) Экспорт
	
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПолучитьНоменклатуруПоШтрихкодам(Штрихкоды, ДанныеПоШтрихкодам);
	
КонецПроцедуры

Процедура ЗарегистрироватьШтрихкоды(ШтрихкодыНоменклатуры) Экспорт
	
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ЗарегистрироватьШтрихкоды(ШтрихкодыНоменклатуры);

КонецПроцедуры

Функция ПолучитьСведенияОХарактеристикеНоменклатуры(Номенклатура, Штрихкод) Экспорт
	
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПолучитьСведенияОХарактеристикеНоменклатуры(Номенклатура, Штрихкод); 
	 
КонецФункции

Функция ПроверитьИспользованиеХарактеристикУНоменклатуры(Номенклатура) Экспорт
	
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПроверитьИспользованиеХарактеристикУНоменклатуры(Номенклатура);
		
КонецФункции
		
#КонецОбласти

#КонецОбласти

#Область РаботаСОрганизациейКонтрагентом

Функция ПолучитьРеквизитИИНОрганизации() Экспорт
	
	Если РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЕстьРеквизитОбъекта(Справочники.Организации.ПустаяСсылка(), "ИдентификационныйНомер") Тогда
		//БК 3.0
		Возврат "ИдентификационныйНомер";
	Иначе
		//ЕРП 2.4
		Возврат "ИНН";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьРеквизитыОрганизацииКонтрагента(Ссылка, Реквизит) Экспорт
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить(Реквизит + "Наименование", 		  "");
	СтруктураДанных.Вставить(Реквизит + "ИдентификационныйНомер", "");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таблица.Ссылка КАК Объект,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Таблица.НаименованиеПолное КАК СТРОКА(450))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Таблица.НаименованиеПолное КАК СТРОКА(450))
	|		ИНАЧЕ Таблица.Наименование
	|	КОНЕЦ КАК Наименование,
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//|	Таблица.ИНН КАК Идентификатор
	
	//БК
	|	Таблица.ИдентификационныйНомер КАК Идентификатор
	///////////////////
	|ИЗ
	|	Справочник.Организации КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка";
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Организации", 		   "Справочник.Контрагенты");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Таблица.ИдентификационныйНомер", "Таблица.ИдентификационныйКодЛичности");
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА + БК
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Организации", "Справочник.ПодразделенияОрганизаций");
		
	//УТ + Розница
	// 
	///////////////////	
	КонецЕсли;
	
	РезультатЗапроса		= Запрос.Выполнить();
	ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий()Тогда
		СтруктураДанных.Вставить(Реквизит + "Наименование", 		  ВыборкаДетальныеЗаписи.Наименование);
		СтруктураДанных.Вставить(Реквизит + "ИдентификационныйНомер", ВыборкаДетальныеЗаписи.Идентификатор);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция КонтрагентНерезидент(Основание) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//Если Основание.Контрагент.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент") Тогда
	//	Возврат Истина;
	//Иначе
	//	Возврат Ложь;
	//КонецЕсли;
	
	//БК
	СтранаРезидентства = ЗначениеРеквизитаОбъекта(Основание.Контрагент, "СтранаРезидентства");
	Если СтранаРезидентства = Справочники.КлассификаторСтранМира.ПустаяСсылка()
		ИЛИ СтранаРезидентства = Справочники.КлассификаторСтранМира.Казахстан Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	///////////////////
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДокументовИСМПТ

// Возвращает номер документа на печать.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.<Имя> - Ссылка на документ, для которого необходимо получить номер на печать.
//
// Возвращаемое значение:
//  Строка - Номер документа, который может использоваться для печати.
//
Функция ПолучитьНомерНаПечать(ДокументСсылка) Экспорт
	
	Если ДокументСсылка.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
		Если СтрНайти(ДокументСсылка.Номер,"-И-") > 0 Тогда
			Возврат ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрЗаменить(ДокументСсылка.Номер,"-И-",""), ДокументСсылка, , Истина, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ОбработкаВыбораАПП(ПТУ, АПП) Экспорт
	
	ОбъектАПП = АПП.ПолучитьОбъект();
	ОбъектАПП.ДокументОснование = ПТУ;
	ОбъектАПП.Записать();
	
КонецПроцедуры

//Вызов из первичных документов (РТУ, ПТУ и т.д.), проверяет наличие в ТЧ Товары маркируемой продукции (по реквизитам Номенклатура.ТабачнаяПродукция, Номенклатура.ОбувнаяПродукция и т.д.)
//В зависимости от наличия такой продукции устанавливается видимость группы создания документов ИС МПТ в документах-основаниях
Функция ПроверитьНаличиеМаркированногоТовараДляЗаказаКМ(ПервичныйДокумент) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//ТаблицаТовары = ПервичныйДокумент.Товары;
	
	//БК
	ИмяТЧТовары = ПолучитьИмяТЧТовары(ПервичныйДокумент);
	ТаблицаТовары = ПервичныйДокумент[ИмяТЧТовары];
	///////////////////
			
	Если ТаблицаТовары.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Для Каждого СтрокаТовар Из ТаблицаТовары Цикл
			
		#Область ЕРП_КА_УТ__Розница
			// Для ЗаказаПоставщику ограничиваем проверку только обувной продукцией, т.к на основании вводится ЗаказКодов, а он работает только с обувью
			//ПЕРЕОПРЕДЕЛЕНИЕ//
			//ЕРП, КА, УТ
			//Если ТипЗнч(ПервичныйДокумент.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") 
			//	ИЛИ ТипЗнч(ПервичныйДокумент.Ссылка) = Тип("ДокументСсылка.ПрочееОприходованиеТоваров") Тогда
				
			//Розница
			//Если ТипЗнч(ПервичныйДокумент.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			///////////////////
						
		//		Если СтрокаТовар.Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция")
		//			ИЛИ СтрокаТовар.Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция") 
		//			ИЛИ СтрокаТовар.Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты")
		//			ИЛИ СтрокаТовар.Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция") Тогда
		//			ЕстьМарки = Истина;
		//			Прервать;
		//		Иначе
		//			ЕстьМарки = Ложь;
		//		КонецЕсли;
		//	Иначе
		//		Если СтрокаТовар.Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция") 
		//			ИЛИ СтрокаТовар.Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция") 
		//			ИЛИ СтрокаТовар.Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция")
		//			ИЛИ СтрокаТовар.Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция")
		//			ИЛИ СтрокаТовар.Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность") 
		//			ИЛИ СтрокаТовар.Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты") Тогда
		//			ЕстьМарки = Истина;
		//			Прервать;
		//		Иначе
		//			ЕстьМарки = Ложь;
		//		КонецЕсли;
		//	КонецЕсли;
		//	
		//КонецЦикла;
		//
		//Возврат ЕстьМарки;
		#КонецОбласти
		
		#Область БК
			Если СтрокаТовар.Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция") 
				ИЛИ СтрокаТовар.Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция") 
				ИЛИ СтрокаТовар.Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция")
				ИЛИ СтрокаТовар.Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция")
				ИЛИ СтрокаТовар.Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность") 
				ИЛИ СтрокаТовар.Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты") Тогда
				ЕстьМарки = Истина;
				Прервать;
			Иначе
				ЕстьМарки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат ЕстьМарки;
		#КонецОбласти
		
	КонецЕсли;
		
КонецФункции

Функция ПолучитьКодСтраныДляУведомленияОввозе(СтранаОтправления) Экспорт
	
	Возврат СтранаОтправления.КодАльфа2;
	
КонецФункции

// Возвращает ссылку на элемент справочника страны мира по коду.
// Если элемент справочника не найден, то он будет создан на основании данных заполнения.
//
// Параметры:
//  КодСтраны - Строка    - Код страны, код альфа2, код альфа3.
// 
// Возвращаемое значение:
//  СправочникСсылка.СтраныМира - Ссылка на элемент справочника СтраныМиры.
//                                Если найдено несколько значений, то будет возвращено первое.
//                                Если ничего не найдено, данные заполнения не указаны, то возвращается пустая ссылка.
//
Функция ПолучитьСтрануПоКоду(КодСтраны) Экспорт
	
	// Проверка наличия страны в справочнике Страны мира и неявное добавление ее в случае отсутствия.
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//СтранаМира = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(КодСтраны);
	//Возврат СтранаМира;
	
	//БК
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтраныМира.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторСтранМира КАК СтраныМира
	|ГДЕ
	|	(СтраныМира.Код = &КодСтраны
	|			ИЛИ СтраныМира.КодАльфа2 = &КодСтраны
	|			ИЛИ СтраныМира.КодАльфа3 = &КодСтраны)";
	
	Запрос.УстановитьПараметр("КодСтраны", КодСтраны);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.Ссылка;
	Иначе
		Возврат Справочники.КлассификаторСтранМира.ПустаяСсылка();
	КонецЕсли;
	///////////////////
		
КонецФункции

Функция ПолучитьКодТНВЭДПоНоменклатуре(Номенклатура) Экспорт
	
	Возврат Строка(Номенклатура.КодТНВЭД);
	
КонецФункции

Функция ПолучитьЗначениеОрганизацииПоТипу(Организация) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА + БК
	Возврат ?(ТипЗнч(Организация) = Тип("СправочникСсылка.ПодразделенияОрганизаций"), Организация.Владелец, Организация);
	
	//Розница + УТ
	//Возврат Организация;
	///////////////////
		
КонецФункции

Функция ПолучитьВидОперацииАПППооснованию(ВидОперации) Экспорт
	
	Возврат ВидОперации;	
	
КонецФункции

Функция ЗаполнитьСтрануПоУмолчаниюПризнаниеКодовЕАЭС() Экспорт
	
	//Значение по умолчанию для документа Экспорта ЕАЭС
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//Возврат Справочники.СтраныМира.Россия;
	
	//Розница
	//Возврат Справочники.СтраныМира.НайтиПоКоду("643");  // Россия;
	
	//БК
	Возврат Справочники.КлассификаторСтранМира.НайтиПоКоду("643");  // Россия;
	///////////////////
			
Конецфункции

#КонецОбласти

#Область ДокументыОснования

Функция ПолучитьДанныеРеквизитовИСМПТКПослеИзмененияВФорме(Форма, ДокументИсточник) Экспорт
	
	ИзмененныеРеквизиты = Новый Структура();
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//ИзмененныеРеквизиты.Вставить("ХозяйственнаяОперация", Форма.Объект.ХозяйственнаяОперация); //При изменении в ПТУ 
	
	//БК
	ИзмененныеРеквизиты.Вставить("ХозяйственнаяОперация", Форма.Объект.ВидОперации); //При изменении в ПТУ 
	///////////////////
	
	СвойстваДокументИСМПТ = СформироватьСвойстваДокументаИСМПТПослеИзмененияНаФорме(ДокументИсточник, ИзмененныеРеквизиты);
	
	Возврат СвойстваДокументИСМПТ;
	
КонецФункции

Функция СформироватьСвойстваДокументаИСМПТПослеИзмененияНаФорме(ДокументИсточник, ИзмененныеРеквизиты) Экспорт
	
	СвойстваДокументИСМПТ = Новый Структура();
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//ДокументПоступления = "ДокументСсылка.ПриобретениеТоваровУслуг";
	
	//Розница
	//ДокументПоступления = "ДокументСсылка.ПоступлениеТоваров";
	
	//БК
	ДокументПоступления = "ДокументСсылка.ПоступлениеТоваровУслуг";
	///////////////////
	
	Если ТипЗнч(ДокументИсточник) = Тип(ДокументПоступления)
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА, УТ
			//И (ИзмененныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика")
			//ИЛИ ИзмененныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию")) Тогда
			
		//Розница
			//И (ИзмененныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеТоваров")
			//ИЛИ ИзмененныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию")) Тогда
			
		//БК
			И (ИзмененныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия")
			ИЛИ ИзмененныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары")
			ИЛИ ИзмененныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения")) Тогда
		///////////////////
			
		СвойстваДокументИСМПТ.Вставить("ОписаниеТиповДокументИСМПТ", Новый ОписаниеТипов("ДокументСсылка.АктПриемаПередачиИСМПТК"));
		СвойстваДокументИСМПТ.Вставить("ПредставлениеСоздатьДокументИСМПТ", "Выбрать Акт приема/передачи");
		
	ИначеЕсли ТипЗнч(ДокументИсточник) = Тип(ДокументПоступления)
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА, УТ + Розница
			//И (ИзмененныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС")
			//ИЛИ ИзмененныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту")) Тогда
			
		//БК
			И ИзмененныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Импорт") Тогда
		///////////////////
				
		//СвойстваДокументИСМПТ.Вставить("ОписаниеТиповДокументИСМПТ", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ПТУ_СвязанныеДокументыМаркировкиИСМПТК.Тип));
		//СвойстваДокументИСМПТ.Вставить("ПредставлениеСоздатьДокументИСМПТ", "Ввести новое Уведомление о ввозе товаров");
		
	ИначеЕсли ТипЗнч(ДокументИсточник) = Тип(ДокументПоступления)
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА, УТ + Розница
			//И ИзмененныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПустаяСсылка") Тогда
			
		//БК
			И ИзмененныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПустаяСсылка") Тогда
		///////////////////
				
		//СвойстваДокументИСМПТ.Вставить("ОписаниеТиповДокументИСМПТ", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ПТУ_СвязанныеДокументыМаркировкиИСМПТК.Тип));
		//СвойстваДокументИСМПТ.Вставить("ПредставлениеСоздатьДокументИСМПТ", "Оформить документ ИС МПТ");
		
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//
	
	//БК
	ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
			И ИзмененныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.Покупка") Тогда
				
		СвойстваДокументИСМПТ.Вставить("ОписаниеТиповДокументИСМПТ", Новый ОписаниеТипов("ДокументСсылка.АктПриемаПередачиИСМПТК"));
		СвойстваДокументИСМПТ.Вставить("ПредставлениеСоздатьДокументИСМПТ", "Ввести новый Акт приема/передачи");
		
	ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
			И ИзмененныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ВозвратТоваров") Тогда
				
		СвойстваДокументИСМПТ.Вставить("ОписаниеТиповДокументИСМПТ", Новый ОписаниеТипов("ДокументСсылка.АктПриемаПередачиИСМПТК"));
		СвойстваДокументИСМПТ.Вставить("ПредставлениеСоздатьДокументИСМПТ", "Выбрать Акт приема/передачи");
	///////////////////
	Иначе
		
		// Хоз.операция не подходит для ввода документа ИСМПТ
		//СвойстваДокументИСМПТ.Вставить("ОписаниеТиповДокументИСМПТ", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ПТУ_СвязанныеДокументыМаркировкиИСМПТК.Тип));
		//СвойстваДокументИСМПТ.Вставить("ПредставлениеСоздатьДокументИСМПТ", "Невозможно оформить документ ИС МПТ");
		
	КонецЕсли;
	
	Возврат СвойстваДокументИСМПТ;
	
КонецФункции

Процедура ОчиститьЗначенияРеквизитовИСМПТВПервичномДокументе(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.СписокДокументовИСМПТ) Тогда
		Для Каждого ДокументИСМПТ Из Форма.СписокДокументовИСМПТ Цикл
			ОтсоединитьДокументИСМПТ(ДокументИСМПТ);
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(Форма.ДокументИСМПТ) Тогда
		ОтсоединитьДокументИСМПТ(Форма.ДокументИСМПТ);
	КонецЕсли;		
	
	Форма.ДокументИСМПТ = Неопределено;
	Форма.СписокДокументовИСМПТ = Неопределено;
	Форма.НадписьДокументИСМПТ = "";
		
КонецПроцедуры

Процедура ОтсоединитьДокументИСМПТ(ДокументИСМПТ)
	
	ДокументОбъект = ДокументИСМПТ.ПолучитьОбъект();
	ДокументОбъект.ДокументОснование = Неопределено;
	ДокументОбъект.Записать();
	
КонецПроцедуры

Функция ИмяГруппыДляВключенияИСМПТ(ДанныеФормы) Экспорт
	
	Если ДанныеФормы.Элементы.Найти("ГруппаПодвалЛевая") <> Неопределено Тогда
		Возврат "ГруппаПодвалЛевая";
	ИначеЕсли ДанныеФормы.Элементы.Найти("Подвал") <> Неопределено Тогда 
		Возврат "Подвал";
	ИначеЕсли ДанныеФормы.Элементы.Найти("ГруппаКомментарийАвтор") <> Неопределено Тогда 
		Возврат "ГруппаКомментарийАвтор";
	Иначе
		Возврат "ГруппаИнтеграция";
	КонецЕсли;
	
КонецФункции

Функция ИмяПослеГруппыИСМПТ(Форма, ГруппаДляВключенияМеню) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//Возврат "";
	
	//БК
	Если Форма.Элементы.Найти("ГруппаСсылкаНаЭДВС") <> Неопределено Тогда
		Возврат "ГруппаСсылкаНаЭДВС";
	ИначеЕсли Форма.Элементы.Найти("ГруппаПодвалДополнительно") <> Неопределено Тогда 
		Возврат "ГруппаПодвалДополнительно";
	ИначеЕсли Форма.Элементы.Найти("ГруппаДополнительноПодвал") <> Неопределено Тогда 
		Возврат "ГруппаДополнительноПодвал";
	ИначеЕсли Форма.Элементы.Найти("ГруппаПечатьДополнительно") <> Неопределено Тогда 
		Возврат "ГруппаПечатьДополнительно";
	ИначеЕсли Форма.Элементы.Найти("ГруппаКомментарийАвтор") <> Неопределено Тогда 
		Возврат "ГруппаКомментарийАвтор";
	Иначе
		Возврат "";
	КонецЕсли;
	///////////////////
		
КонецФункции

Функция ПолучитьСтрануОтправленияВвозИзЕАЭС(Контрагент) Экспорт
	
	  //ПЕРЕОПРЕДЕЛЕНИЕ//
	 //ЕРП, КА, УТ + Розница
	 #Область ЕРП_КА_УТ__Розница
	 //Запрос = Новый Запрос();
	 //Запрос.Текст = "ВЫБРАТЬ
	 //|	Контрагенты.СтранаРегистрации КАК СтранаРегистрации
	 //|ИЗ
	 //|	Справочник.Контрагенты КАК Контрагенты
	 //|ГДЕ
	 //|	Контрагенты.Ссылка = &Ссылка";
	 //
	 //Запрос.УстановитьПараметр("Ссылка", Контрагент);
	 //Выборка = Запрос.Выполнить().Выбрать();
	 //Пока Выборка.Следующий() Цикл
	 //    Возврат Выборка.СтранаРегистрации;
	 //КонецЦикла;
	 //
	 //Возврат Справочники.СтраныМира.ПустаяСсылка();
	 #КонецОбласти
	 
	 //БК
	 #Область БК
	 ТекстЗапроса = "";
	 Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
	     ТекстЗапроса = "ВЫБРАТЬ
	     |	Контрагенты.СтранаРезидентства КАК СтранаРегистрации
	     |ИЗ
	     |	Справочник.Контрагенты КАК Контрагенты
	     |ГДЕ
	     |	Контрагенты.Ссылка = &Ссылка";
	 ИначеЕсли ТипЗнч(Контрагент) = Тип("СправочникСсылка.Организации") Тогда
	     ТекстЗапроса = "ВЫБРАТЬ
	     |	Организации.СтранаРегистрации КАК СтранаРегистрации
	     |ИЗ
	     |	Справочник.Организации КАК Организации
	     |ГДЕ
	     |	Организации.Ссылка = &Ссылка";
	 Иначе
	     Возврат Справочники.КлассификаторСтранМира.ПустаяСсылка();
	 КонецЕсли;
	 
	 Запрос = Новый Запрос();
	 Запрос.Текст = ТекстЗапроса;
	 Запрос.УстановитьПараметр("Ссылка", Контрагент);
	 
	 Выборка = Запрос.Выполнить().Выбрать();
	 Пока Выборка.Следующий() Цикл
	     Возврат Выборка.СтранаРегистрации;
	 КонецЦикла;
	 
	 Возврат Справочники.КлассификаторСтранМира.ПустаяСсылка();
	 #КонецОбласти
	 ///////////////////
		
КонецФункции

#Область ПроверкаОснований

Функция ПроверитьДокументыОснованияПриСозданииИСМПТ(МассивДокументов, ТипДокумента, ЭтоВыборАПП = Ложь) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//Если ТипДокумента = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		
	//Розница
	//Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
	
	//БК
	Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
	///////////////////
		Если ЭтоВыборАПП Тогда
			Возврат ПроверитьОснованияАППВходПоПТУ(МассивДокументов);
		Иначе
			Возврат ПроверитьОснованияВвозТоваров(МассивДокументов);
		КонецЕсли;
		
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
		
	//Розница + БК
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
	///////////////////	
		И ЭтоВыборАПП Тогда
		
		Возврат ПроверитьОснованияАППВходПоВозврату(МассивДокументов);
		        		
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + БК
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
	//Розница
	//ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияТоваров") Тогда
	///////////////////	
	
		//Из РТУ могут быть созданы 2 документа маркировки: АПП и Увед.о выводе из оборота (интернет-торговля).
		//Т.к. ограничения по виду опрерации РТУ у них одинаковые, проверяем общей проверкой.
		Возврат ПроверитьОснованияАППИсходРеализация(МассивДокументов);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		Возврат ПроверитьОснованияАППИсходВозврат(МассивДокументов);
		
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаказПоставщику") 
	//	ИЛИ ТипДокумента = Тип("ДокументСсылка.ПрочееОприходованиеТоваров") Тогда
	//	
	//	Возврат ПроверитьОснованияЗаказКМ(МассивДокументов);
		
	//Розница
	//ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
	//	
	//	Возврат ПроверитьОснованияЗаказКМ(МассивДокументов);
	
	//БК
	//
	///////////////////	
	Иначе
		
		Возврат Новый Массив();
		
	КонецЕсли;
		
КонецФункции

Функция ПроверитьОснованияЗаказКМ(МассивДокументов)
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	#Область ЕРП_КА_УТ
	//МассивДокументовПроверки = Новый Массив();
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ЗаказПоставщику.Ссылка КАК Ссылка
	//|ИЗ
	//|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	//|ГДЕ
	//|	ЗаказПоставщику.Ссылка В(&Основание)
	//|	И НЕ(ЗаказПоставщику.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	//|				ИЛИ ЗаказПоставщику.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
	//|				ИЛИ ЗаказПоставщику.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)
	//|				ИЛИ ЗаказПоставщику.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи)
	//|				ИЛИ ЗаказПоставщику.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию))
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ПрочееОприходованиеТоваров.Ссылка
	//|ИЗ
	//|	Документ.ПрочееОприходованиеТоваров КАК ПрочееОприходованиеТоваров
	//|ГДЕ
	//|	ПрочееОприходованиеТоваров.Ссылка В(&Основание)
	//|	И НЕ ПрочееОприходованиеТоваров.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеИзПроизводства)";
	//
	//Запрос.УстановитьПараметр("Основание", МассивДокументов);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	МассивДокументовПроверки.Добавить(Выборка.Ссылка);
	//КонецЦикла;
	//
	//Возврат МассивДокументовПроверки;
	#КонецОбласти
	
	//Розница
	#Область Розница
	//МассивДокументовПроверки = Новый Массив();
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ЗаказПоставщику.Ссылка КАК Ссылка
	//|ИЗ
	//|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	//|ГДЕ
	//|	ЗаказПоставщику.Ссылка В(&Основание)
	//|	И НЕ(ЗаказПоставщику.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеТоваров)
	//|				ИЛИ ЗаказПоставщику.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту))";
	//
	//Запрос.УстановитьПараметр("Основание", МассивДокументов);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	МассивДокументовПроверки.Добавить(Выборка.Ссылка);
	//КонецЦикла;
	//
	//Возврат МассивДокументовПроверки;
	#КонецОбласти
	
	//БК
	МассивДокументовПроверки = Новый Массив();
	Возврат МассивДокументовПроверки;
	///////////////////
		
КонецФункции

Функция ПроверитьОснованияАППИсходРеализация(МассивДокументов)
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + БК
	Возврат ПроверитьОснованияДокументаИСМПТОбщая("АктПриемаПередачиИсх_РТУ", МассивДокументов);
	
	//Розница
	//МассивДокументовПроверки = Новый Массив();
	//Возврат МассивДокументовПроверки;
	///////////////////
	
КонецФункции

Функция ПроверитьОснованияАППИсходВозврат(МассивДокументов)
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + БК
	Возврат ПроверитьОснованияДокументаИСМПТОбщая("АктПриемаПередачиИсх_Возврат", МассивДокументов);
	
	//Розница
	//МассивДокументовПроверки = Новый Массив();
	//Возврат МассивДокументовПроверки;
	///////////////////
		
КонецФункции

Функция ПроверитьОснованияВвозТоваров(МассивДокументов)
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + БК
	Возврат ПроверитьОснованияДокументаИСМПТОбщая("ВвозТоваров", МассивДокументов);
	
	//Розница
	//МассивДокументовПроверки = Новый Массив();
	//Возврат МассивДокументовПроверки;
	///////////////////
	
КонецФункции

Функция ПроверитьОснованияАППВходПоПТУ(МассивДокументов)
	
	Возврат ПроверитьОснованияДокументаИСМПТОбщая("АктПриемаПередачи_ПТУ", МассивДокументов);
	
КонецФункции

Функция ПроверитьОснованияАППВходПоВозврату(МассивДокументов)
	
	Возврат ПроверитьОснованияДокументаИСМПТОбщая("АктПриемаПередачи_Возврат", МассивДокументов);
	
КонецФункции

Функция ПроверитьОснованияДокументаИСМПТОбщая(ИмяДокументаИСМПТ, МассивДокументов)
	
	ТекстЗапросаНачало = 	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументИСМПТ.Ссылка КАК Ссылка
	|ИЗ
	|";
		
	ТекстЗапросаИсточник = "";
	Если ИмяДокументаИСМПТ = "АктПриемаПередачиИсх_РТУ" Тогда
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА, УТ
		//ТекстЗапросаИсточник = "Документ.РеализацияТоваровУслуг КАК ДокументИСМПТ
		//						|";
		//Розница
		//ТекстЗапросаИсточник = "Документ.РеализацияТоваров КАК ДокументИСМПТ
		//						|";
		
		//БК
		ТекстЗапросаИсточник = "Документ.РеализацияТоваровУслуг КАК ДокументИСМПТ
								|";
		///////////////////
	ИначеЕсли ИмяДокументаИСМПТ = "АктПриемаПередачиИсх_Возврат" Тогда 
		ТекстЗапросаИсточник = "Документ.ВозвратТоваровПоставщику КАК ДокументИСМПТ
								|";
	ИначеЕсли ИмяДокументаИСМПТ = "АктПриемаПередачи_Возврат" Тогда 
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА, УТ
		//ТекстЗапросаИсточник = "Документ.ВозвратТоваровОтКлиента КАК ДокументИСМПТ
		//						|";
		//Розница
		//ТекстЗапросаИсточник = "Документ.ВозвратТоваровОтПокупателя КАК ДокументИСМПТ
		//						|";
		
		//БК
		ТекстЗапросаИсточник = "Документ.ВозвратТоваровОтПокупателя КАК ДокументИСМПТ
								|";
		///////////////////
	ИначеЕсли ИмяДокументаИСМПТ = "ВвозТоваров" 
		Или ИмяДокументаИСМПТ = "АктПриемаПередачи_ПТУ" Тогда 
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА, УТ
		//ТекстЗапросаИсточник = "Документ.ПриобретениеТоваровУслуг КАК ДокументИСМПТ
		//						|";
		//Розница
		//ТекстЗапросаИсточник = "Документ.ПоступлениеТоваров КАК ДокументИСМПТ
		//						|";
		
		//БК
		ТекстЗапросаИсточник = "Документ.ПоступлениеТоваровУслуг КАК ДокументИСМПТ
								|";
		///////////////////
	КонецЕсли;
	
	ТекстЗапросаУсловия = "";
	Если ИмяДокументаИСМПТ = "АктПриемаПередачиИсх_РТУ" Тогда
		ТекстЗапросаУсловия = "ГДЕ
		|	ДокументИСМПТ.Ссылка В(&Основание)
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА, УТ
		//|	И НЕ(ДокументИСМПТ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
		//|				ИЛИ ДокументИСМПТ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию))";
		
		//Розница
		//|	И НЕ(ДокументИСМПТ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваров))";
		
		//БК
		|	И НЕ(ДокументИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ПродажаКомиссия)
		|			ИЛИ ДокументИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.Товары)
		|			ИЛИ ДокументИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению))";
		///////////////////
	ИначеЕсли ИмяДокументаИСМПТ = "АктПриемаПередачиИсх_Возврат" Тогда
		ТекстЗапросаУсловия = "ГДЕ
		|	ДокументИСМПТ.Ссылка В(&Основание)
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА, УТ
		//|	И НЕ(ДокументИСМПТ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику)
		//|				ИЛИ ДокументИСМПТ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровКомитенту))";
		
		//Розница
		//|	И НЕ(ДокументИСМПТ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратПоставщику)
		//|				ИЛИ ДокументИСМПТ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровКомитенту))";
		
		//БК
		|	И НЕ(ДокументИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратТоваровПоставщику.Покупка))";
		///////////////////
	ИначеЕсли ИмяДокументаИСМПТ = "АктПриемаПередачи_Возврат" Тогда
		ТекстЗапросаУсловия = "ГДЕ
		|	ДокументИСМПТ.Ссылка В(&Основание)
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА, УТ
		//|	И НЕ(ДокументИСМПТ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
		//|				ИЛИ ДокументИСМПТ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера))";
		
		//Розница
		//|	И НЕ(ДокументИСМПТ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтПокупателя))";
		
		//БК
		|	И НЕ(ДокументИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ВозвратТоваров))";
		///////////////////
	ИначеЕсли ИмяДокументаИСМПТ = "АктПриемаПередачи_ПТУ" Тогда
		ТекстЗапросаУсловия = "ГДЕ
		|	ДокументИСМПТ.Ссылка В(&Основание)
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА, УТ
		//|	И НЕ(ДокументИСМПТ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
		//|				ИЛИ ДокументИСМПТ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию))";
		
		//Розница
		//|	И НЕ(ДокументИСМПТ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеТоваров)
		//|				ИЛИ ДокументИСМПТ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию))";
		
		//БК
		|	И НЕ(ДокументИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия)
		|				ИЛИ ДокументИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары)
		|				ИЛИ ДокументИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения))";
		///////////////////
	ИначеЕсли ИмяДокументаИСМПТ = "ВвозТоваров" Тогда
		ТекстЗапросаУсловия = "ГДЕ
		|	ДокументИСМПТ.Ссылка В(&Основание)
		//|	И НЕ(ДокументИСМПТ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА, УТ + Розница
		//|				ИЛИ ДокументИСМПТ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту))";
		
		//БК
		|	И НЕ(ДокументИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Импорт))";
		///////////////////
	КонецЕсли;
	
	ТекстЗапросаОбщий = ТекстЗапросаНачало + ТекстЗапросаИсточник + ТекстЗапросаУсловия;
	
	МассивДокументовПроверки = Новый Массив();
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОбщий;
	Запрос.УстановитьПараметр("Основание", МассивДокументов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивДокументовПроверки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивДокументовПроверки;
	
КонецФункции

Функция ПроверитьВидВвозаИзОснованияПТУ(ПТУ) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//Если ПТУ.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС") Тогда
	//	Возврат "УведомлениеОВвозеИзЕАЭСИСМПТК";
	//ИначеЕсли ПТУ.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту") Тогда
	//	Возврат "УведомлениеОВвозеИзТретьихСтранИСМПТК";
	//КонецЕсли;
	
	//БК
	Если ПТУ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Импорт") Тогда
		Возврат "УведомлениеОВвозеИзЕАЭСИСМПТК";
	КонецЕсли;
	///////////////////
		
КонецФункции

#КонецОбласти

#Область СсылкаНаИСМПТ

Процедура ОбновитьРеквизитыИСМПТ(ДанныеФормы, РеквизитНадписьИСМПТ = "НадписьДокументИСМПТ", ТребуетсяИСМПТ = Истина, ГруппаДляВключенияМеню = Неопределено, ПослеГруппы = "") Экспорт
	
	Если ПолучитьДанныеИСМПТ(ДанныеФормы, ГруппаДляВключенияМеню, ПослеГруппы) Тогда 
		ЗаполнитьТекстПроИСМПТ(ДанныеФормы, РеквизитНадписьИСМПТ, ТребуетсяИСМПТ);
		УправлениеГруппойИСМПТ(ДанныеФормы, ТребуетсяИСМПТ);
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьДанныеИСМПТ(ДанныеФормы, ГруппаДляВключенияМеню, ПослеГруппы = "") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМПТК") Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	//1.Создаем элементы маркировки на форме документа-основания
	Если ДанныеФормы.Элементы.Найти("НадписьДокументИСМПТ") = Неопределено Тогда
		Если ГруппаДляВключенияМеню = Неопределено 
			И НЕ ДанныеФормы.Элементы.Найти("ГруппаПрочиеЭлектронныеДокументы") = Неопределено Тогда
			//Используем группу формы по умолчанию
			СоздатьЭлементыФормыДляВводаИСМПТ(ДанныеФормы, "ГруппаПрочиеЭлектронныеДокументы", ПослеГруппы);
		ИначеЕсли Не ГруппаДляВключенияМеню = Неопределено Тогда
			//Размещаем элементы в группе типовой формы
			СоздатьЭлементыФормыДляВводаИСМПТ(ДанныеФормы, ГруппаДляВключенияМеню, ПослеГруппы);
		Иначе
			ТекстОшибки = НСтр("ru='Невозможно разместить элементы подсистемы ИС МПТ на форме документа, не назначена группа формы для включения!'");
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
		
	//2. Заполняем созданные реквизиты
	ДокументОснование = ДанныеФормы.Объект.Ссылка; 
	
	//Находим ссылки на связанные документы маркировки
	Если ЗначениеЗаполнено(ДанныеФормы.ДокументИСМПТСсылка) Тогда
		ДокументИСМПТСсылка = ДанныеФормы.ДокументИСМПТСсылка;
	Иначе
		СвязанныеДокументыМаркировки = ПроверитьНаличиеСвязанногоДокументаИСМПТ(ДанныеФормы.Объект.Ссылка, Истина);
		
		Если ТипЗнч(СвязанныеДокументыМаркировки) <> Тип("СписокЗначений") И СвязанныеДокументыМаркировки <> Неопределено Тогда //Связанный документ прямая ссылка на документ
			
			ДокументИСМПТСсылка = СвязанныеДокументыМаркировки.Ссылка;
			
		ИначеЕсли ТипЗнч(СвязанныеДокументыМаркировки) = Тип("СписокЗначений") И СвязанныеДокументыМаркировки.Количество() = 1 Тогда
			
			ДокументИСМПТСсылка = СвязанныеДокументыМаркировки[0].Значение;
					
		ИначеЕсли ТипЗнч(СвязанныеДокументыМаркировки) = Тип("СписокЗначений") И СвязанныеДокументыМаркировки.Количество()> 1 Тогда
			
			Если ДанныеФормы.СписокДокументыИСМПТСсылка.Количество() = 0 Тогда
				Для Каждого СтрокаТаблицыИсточник Из СвязанныеДокументыМаркировки Цикл
					ЗаполнитьЗначенияСвойств(ДанныеФормы.СписокДокументыИСМПТСсылка.Добавить(), СтрокаТаблицыИсточник);
				КонецЦикла;
			КонецЕсли;
			
		Иначе 
			
			//Если не нашлось связанных документов
			ДокументИСМПТСсылка = Неопределено;
			ДанныеФормы.СписокДокументыИСМПТСсылка.Очистить();
		
		КонецЕсли;
		
	КонецЕсли;

	ДанныеДокументаИСМПТ = Неопределено;
		
	Если ЗначениеЗаполнено(ДокументИСМПТСсылка) Тогда
		
		РеквизитыИСМПТ = Новый Структура("Ссылка, Дата, ПометкаУдаления", ДокументИСМПТСсылка, '00010101', Ложь);
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументИСМПТСсылка, "Дата, ПометкаУдаления");
		ЗаполнитьЗначенияСвойств(РеквизитыИСМПТ, ЗначенияРеквизитов);
		
		ТекстИСМПТ  = ПолучитьТекстИСМПТ(РеквизитыИСМПТ);
		
		ДанныеДокументаИСМПТ = Новый Структура("ИСМПТ, ТекстИСМПТ, ПометкаУдаления", ДокументИСМПТСсылка, ТекстИСМПТ, РеквизитыИСМПТ.ПометкаУдаления);
		ДанныеФормы.ДокументИСМПТСсылка  = ДокументИСМПТСсылка;
		ДанныеФормы.ДанныеДокументаИСМПТ = ДанныеДокументаИСМПТ;
		
	ИначеЕсли ДанныеФормы.СписокДокументыИСМПТСсылка.Количество() <> 0 Тогда
		
		СписокСсылокИСМПТ = Новый СписокЗначений;
		
		Для каждого СсылкаИСМПТ Из ДанныеФормы.СписокДокументыИСМПТСсылка Цикл
			
			РеквизитыИСМПТ = Новый Структура("Ссылка, Дата, ПометкаУдаления", СсылкаИСМПТ.Значение, '00010101', Ложь);
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаИСМПТ.Значение, "Дата, ПометкаУдаления");
			ЗаполнитьЗначенияСвойств(РеквизитыИСМПТ, ЗначенияРеквизитов);
			
			СписокСсылокИСМПТ.Добавить(РеквизитыИСМПТ);
		
		КонецЦикла; 
		
		ТекстИСМПТ = ПолучитьТекстИСМПТ(СписокСсылокИСМПТ);
		
		Если СписокСсылокИСМПТ.Количество() <> 0 Тогда
			
			СписокДокументыИСМПТСсылка = Новый СписокЗначений;
			
			Для каждого Ссылки Из СписокСсылокИСМПТ Цикл
				СсылкаИСМПТ = Ссылки.Значение.Ссылка;
				СписокДокументыИСМПТСсылка.Добавить(СсылкаИСМПТ);
			КонецЦикла; 
			
			ДанныеДокументаИСМПТ = Новый Структура("ИСМПТ, ТекстИСМПТ, ПометкаУдаления", СписокДокументыИСМПТСсылка, ТекстИСМПТ, РеквизитыИСМПТ.ПометкаУдаления);
			ДанныеФормы.СписокДокументыИСМПТСсылка = СписокДокументыИСМПТСсылка;
			ДанныеФормы.ДанныеДокументаИСМПТ = ДанныеДокументаИСМПТ;
			
		КонецЕсли;
	Иначе
		ДанныеФормы.ДокументИСМПТСсылка  = ДокументИСМПТСсылка;
		ДанныеФормы.ДанныеДокументаИСМПТ = ДанныеДокументаИСМПТ;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьТекстИСМПТ(ДанныеДокументовИСМПТ) Экспорт
	
	Если ТипЗнч(ДанныеДокументовИСМПТ) = Тип("СписокЗначений") Тогда
		
		НадписьКоличествоИСМПТ = НСтр("ru='Всего документов ИС МПТ: (%КоличествоДокументов%)'");
		Текст = СтрЗаменить(НадписьКоличествоИСМПТ, "%КоличествоДокументов%", ДанныеДокументовИСМПТ.Количество());
	
	Иначе
		
		ДокументИСМПТ = ?(ДанныеДокументовИСМПТ.Свойство("Ссылка"), ДанныеДокументовИСМПТ.Ссылка, Неопределено);
		ДополнительныйТекст = "";
		
		Если ДанныеДокументовИСМПТ.ПометкаУдаления Тогда
			ДополнительныйТекст = НСтр("ru=' (помечен на удаление)'");
		КонецЕсли;
		
		Текст = Строка(ДокументИСМПТ)+ ДополнительныйТекст;
		
	КонецЕсли;
		
	Возврат Текст;
	
КонецФункции 

Процедура ЗаполнитьТекстПроИСМПТ(Форма, РеквизитНадписьИСМПТ = "НадписьДокументИСМПТ", ТребуетсяИСМПТ = Истина) Экспорт
	
	ДанныеДокументаИСМПТ = Форма.ДанныеДокументаИСМПТ;
	
	Если ТребуетсяИСМПТ И ДанныеДокументаИСМПТ = Неопределено Тогда
		Форма[РеквизитНадписьИСМПТ] = "";
		Возврат;
	КонецЕсли;
	
	Если НЕ ТребуетсяИСМПТ Тогда
		Форма[РеквизитНадписьИСМПТ] = НСтр("ru='Не требуется'");
		Форма.Элементы[РеквизитНадписьИСМПТ].ЦветТекста = Новый Цвет(51, 51, 51); // текст формы
	Иначе
		Форма[РеквизитНадписьИСМПТ] = ДанныеДокументаИСМПТ.ТекстИСМПТ;
		
		Если ТребуетсяИСМПТ И (ДанныеДокументаИСМПТ.ПометкаУдаления) Тогда
			Форма.Элементы[РеквизитНадписьИСМПТ].ЦветТекста = Новый Цвет(255, 0, 0);  // красный
			
		ИначеЕсли ТипЗнч(ДанныеДокументаИСМПТ.ИСМПТ) = Тип("СписокЗначений") Тогда
			//Если связанных документов несколько, их состояние может быть разным. 
			//Поэтому выводим общую ссылку в нейтральном цвете.
			Форма.Элементы[РеквизитНадписьИСМПТ].ЦветТекста = Новый Цвет(51, 51, 51); // текст формы
			
		ИначеЕсли (Не ТипЗнч(ДанныеДокументаИСМПТ.ИСМПТ) = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК")
			И Не ТипЗнч(ДанныеДокументаИСМПТ.ИСМПТ) = Тип("ДокументСсылка.НанесениеКодовМаркировкиСУЗИСМПТК")
			И Не ТипЗнч(ДанныеДокументаИСМПТ.ИСМПТ) = Тип("ДокументСсылка.АгрегацияКодовМаркировкиСУЗИСМПТК")
			И Не ТипЗнч(ДанныеДокументаИСМПТ.ИСМПТ) = Тип("ДокументСсылка.УведомлениеОбОтгрузкеЕАЭСИСМПТК")
			И Не ТипЗнч(ДанныеДокументаИСМПТ.ИСМПТ) = Тип("ДокументСсылка.УведомлениеОПриемкеЕАЭСИСМПТК"))
			И Не ЗначениеЗаполнено(ДанныеДокументаИСМПТ.ИСМПТ.НомерИСМПТ) Тогда
			
			//Документ не отправлен на сервер ИС МПТ
			Форма.Элементы[РеквизитНадписьИСМПТ].ЦветТекста = Новый Цвет(51, 51, 51); // текст формы
			
		ИначеЕсли (ТипЗнч(ДанныеДокументаИСМПТ.ИСМПТ) = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК")
			Или ТипЗнч(ДанныеДокументаИСМПТ.ИСМПТ) = Тип("ДокументСсылка.АгрегацияКодовМаркировкиСУЗИСМПТК")
			Или ТипЗнч(ДанныеДокументаИСМПТ.ИСМПТ) = Тип("ДокументСсылка.НанесениеКодовМаркировкиСУЗИСМПТК"))
			И Не ЗначениеЗаполнено(ДанныеДокументаИСМПТ.ИСМПТ.OrderID) Тогда
			Форма.Элементы[РеквизитНадписьИСМПТ].ЦветТекста = Новый Цвет(51, 51, 51); // текст формы
		Иначе
			Форма.Элементы[РеквизитНадписьИСМПТ].ЦветТекста = Новый Цвет(0, 100, 0); // зеленый
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура УправлениеГруппойИСМПТ(Форма, ТребуетсяИСМПТ = Истина) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если ТребуетсяИСМПТ И (ЗначениеЗаполнено(Форма.СписокДокументыИСМПТСсылка) ИЛИ ЗначениеЗаполнено(Форма.ДокументИСМПТСсылка)) Тогда
		Элементы.ГруппаИСМПТ.ТекущаяСтраница = Элементы.ГруппаСсылкаИСМПТ;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЭлементыФормыДляВводаИСМПТ(Форма, ГруппаДляВключенияМеню, ПослеГруппы = "") Экспорт
	
	ДокументИсточник = Форма.Объект.Ссылка;
	СвойстваДокументИСМПТ = ИнтеграцияИСМПТКПереопределяемый.СформироватьСвойстваДокументаИСМПТ(ДокументИсточник);
	Если СвойстваДокументИСМПТ.ОписаниеТиповДокументИСМПТ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	//Подготовим описание необходимых реквизитов маркировки
	ДобавляемыеРеквизиты = Новый Массив;
	
	//Реквизит-представление ссылки документа маркировки на форме
	НовыйРеквизитНадписиДокументаИСМПТ = Новый РеквизитФормы("НадписьДокументИСМПТ", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(500))); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизитНадписиДокументаИСМПТ);
	
	//Реквизит для хранения данных документа маркировки
	НовыйРеквизитДанныеДокументаИСМПТ = Новый РеквизитФормы("ДанныеДокументаИСМПТ", Новый ОписаниеТипов());
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизитДанныеДокументаИСМПТ);
	
	//Реквизит, хранящий ссылку на связанный документ маркировки
	НовыйРеквизитДокументМаркировка = Новый РеквизитФормы("ДокументИСМПТСсылка", СвойстваДокументИСМПТ.ОписаниеТиповДокументИСМПТ);
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизитДокументМаркировка);
	
	//Реквизит, хранящий список ссылок, если связанных документов маркировки несколько
	НовыйРеквизитСписокДокументовМаркировки = Новый РеквизитФормы("СписокДокументыИСМПТСсылка", Новый ОписаниеТипов("СписокЗначений"));
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизитСписокДокументовМаркировки);
	
	//Создаем реквизиты по описанию на типовой форме
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Если ЗначениеЗаполнено(ПослеГруппы) Тогда
		//Создадим группу страниц для работы с ИСМПТ
		ГруппаИСМПТ = Форма.Элементы.Вставить("ГруппаИСМПТ", Тип("ГруппаФормы"),, Форма.Элементы[ПослеГруппы]);
		ГруппаИСМПТ.Вид = ВидГруппыФормы.Страницы;
		ГруппаИСМПТ.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе 
		//Получим группу в котороую встроим элементы
		ПодменюРазмещения = Форма.Элементы[ГруппаДляВключенияМеню];
		//Создадим группу страниц для работы с ИСМПТ
		ГруппаИСМПТ = Форма.Элементы.Добавить("ГруппаИСМПТ", Тип("ГруппаФормы"), ПодменюРазмещения);
		ГруппаИСМПТ.Вид = ВидГруппыФормы.Страницы;
		ГруппаИСМПТ.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	//Создадим страницу ссылки ИСМПТ
	ГруппаСсылкаИСМПТ = Форма.Элементы.Добавить("ГруппаСсылкаИСМПТ", Тип("ГруппаФормы"), ГруппаИСМПТ);
	ГруппаСсылкаИСМПТ.Вид = ВидГруппыФормы.Страница;
	
	ПолеНадписиИСМПТ = Форма.Элементы.Добавить("НадписьДокументИСМПТ", Тип("ПолеФормы"), ГруппаСсылкаИСМПТ);
	ПолеНадписиИСМПТ.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеНадписиИСМПТ.Гиперссылка = Истина;
	ПолеНадписиИСМПТ.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеНадписиИСМПТ.ПутьКДанным = "НадписьДокументИСМПТ";
	
	ПолеНадписиИСМПТ.УстановитьДействие("Нажатие", "НадписьИСМПТНажатие");
	
КонецПроцедуры

#КонецОбласти

#Область ВводНаОсновании

Функция ПолучитьИмяТЧТовары(Документ) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//Возврат "Товары";
	
	//БК
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		Возврат "Материалы";
	Иначе
		Возврат "Товары";
	КонецЕсли;
	///////////////////
			
КонецФункции

Функция ПолучитьПараметрыОткрытияФормыВыбораАПП(ДокументОбъект, ПараметрыОткрытия) Экспорт
	
	Отборы = Новый Структура;
	Отборы.Вставить("Организация", ДокументОбъект.Организация);
	Отборы.Вставить("Контрагент",  ДокументОбъект.Контрагент);
	Отборы.Вставить("Направление", ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий"));
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//Если ДокументОбъект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию") Тогда 
	//	Отборы.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСМПТК.КомиссияИАгентскаяТорговля"));
	//ИначеЕсли ДокументОбъект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика") Тогда 
	//	Отборы.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСМПТК.Реализация"));
	//КонецЕсли;
	
	//Розница
	//Если ДокументОбъект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию") Тогда 
	//	Отборы.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСМПТК.КомиссияИАгентскаяТорговля"));
	//ИначеЕсли ДокументОбъект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеТоваров") Тогда 
	//	Отборы.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСМПТК.Реализация"));
	//КонецЕсли;
	
	//БК
	//
	///////////////////
			
	Отборы.Вставить("ПометкаУдаления", Ложь);
	Отборы.Вставить("ДокументОснование", Неопределено);
	
	ПараметрыОткрытия.Вставить("Отбор", Отборы);

	Возврат ПараметрыОткрытия;
	
КонецФункции

Функция ВключатьТаблицуМарок(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") 
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.УведомлениеОбОтгрузкеЕАЭСИСМПТК") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
			
КонецФункции

Процедура ЗаполнитьМассивПервичныхДокументов(ПараметрыСоздания, МассивДанныхДляЗаполнения, СписокПервичныхДокументов, Отказ, ВидДвижения = "", ТипСоздаваемогоДокумента = "") Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	#Область ЕРП_КА_УТ
	//ПроводитьСозданныеДокументы	= ПараметрыСоздания.ПроводитьСозданныеДокументы;
	//ФормироватьСписокДокументов = ПараметрыСоздания.ФормироватьСписокДокументов;

	//Если МассивДанныхДляЗаполнения.Количество() = 0 Тогда
	//	
	//	ТекстСообщения = НСтр("ru = 'В документе недостаточно данных для заполнения нового основания: проверьте таблицу Марки!'");
	//	ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	//	Отказ = Истина;
	//Иначе
	//	
	//	Для Каждого ЭлементМассива Из МассивДанныхДляЗаполнения Цикл
	//		
	//		ДокументИСМПТ = ЭлементМассива.Реквизиты[0].ДокументОснование;
	//		
	//		ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
	//		
	//		Если ТипСоздаваемогоДокумента = "ПриобретениеТоваровУслуг" Тогда
	//			
	//			СозданныйДокумент = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
	//			Если Не ТипЗнч(ДокументИСМПТ) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК") Тогда
	//				СозданныйДокумент.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика");
	//			Иначе
	//				СозданныйДокумент.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту");
	//			КонецЕсли;
	//			СозданныйДокумент.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	//			СозданныйДокумент.ВариантПриемкиТоваров = ВариантПриемкиТоваров;
	//			
	//		ИначеЕсли ТипСоздаваемогоДокумента = "ВозвратТоваровОтКлиента" Тогда
	//			
	//			СозданныйДокумент = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
	//			СозданныйДокумент.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента");
	//			СозданныйДокумент.ВариантПриемкиТоваров = ВариантПриемкиТоваров;
	//			
	//		ИначеЕсли ТипСоздаваемогоДокумента = "РеализацияТоваровУслуг" Тогда
	//			
	//			СозданныйДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	//			
	//		Иначе
	//			//По умолчанию создаем ПТУ
	//			СозданныйДокумент = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
	//			СозданныйДокумент.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	//			СозданныйДокумент.ВариантПриемкиТоваров = ВариантПриемкиТоваров;
	//		КонецЕсли;
	//		
	//		СозданныйДокумент.ПорядокОплаты = ПредопределенноеЗначение("Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях");
	//		СозданныйДокумент.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	//		
	//		Если ТипСоздаваемогоДокумента = "РеализацияТоваровУслуг" Тогда 
	//			ЗаполнитьЗначенияСвойств(СозданныйДокумент, ЭлементМассива.Реквизиты[0]);
	//			СозданныйДокумент.Статус = ПредопределенноеЗначение("Перечисление.СтатусыРеализацийТоваровУслуг.КПредоплате");
	//		Иначе
	//			//Заполняем шапку документа
	//			ЗаполнитьЗначенияСвойств(СозданныйДокумент, ЭлементМассива.Реквизиты[0],, "ХозяйственнаяОперация");
	//		КонецЕсли;
	//		
	//		//Заполняем табличную часть "Товары"
	//		Для Каждого СтрокаТЧ Из ЭлементМассива.Товары Цикл
	//			
	//			НоваяСтрокаТЧ = СозданныйДокумент.Товары.Добавить();
	//			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
	//			
	//			Если Константы.ИспользоватьУпаковкиНоменклатуры.Получить() Тогда
	//				//Пересчитываем количество и количество упаковок
	//				Если ЗначениеЗаполнено(СтрокаТЧ.Упаковка) Тогда
	//					КоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(СтрокаТЧ.Упаковка, СтрокаТЧ.Номенклатура);
	//					НоваяСтрокаТЧ.Количество = СтрокаТЧ.КоличествоУпаковок * КоэффициентУпаковки; 
	//				КонецЕсли;
	//			КонецЕсли;
	//			
	//		КонецЦикла;	
	//		
	//		Попытка 
	//			СозданныйДокумент.Записать(РежимЗаписиДокумента.Запись);
	//		Исключение
	//			ТекстСообщения = НСтр("ru = 'При записи документа ""%1"" произошла ошибка: %2'");
	//			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	//			
	//			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СозданныйДокумент, ПодробноеПредставлениеОшибки);
	//			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	//			Продолжить;
	//		КонецПопытки;
	//		
	//		Если ПроводитьСозданныеДокументы Тогда  
	//			
	//			Попытка 
	//				СозданныйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	//			Исключение
	//				Отказ = Истина;
	//			КонецПопытки;
	//			
	//			Если Отказ Тогда
	//				ТекстСообщения = НСтр("ru = 'При проведении документа ""%1"" произошла ошибка. Выполнение ввода документов прервано'");
	//				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СозданныйДокумент);
	//				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	//				Прервать;
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//		Попытка
	//			Если ЗначениеЗаполнено(ДокументИСМПТ) Тогда
	//				
	//				ДокументИСМПТОбъект = ДокументИСМПТ.ПолучитьОбъект();
	//				ДокументИСМПТОбъект.ДокументОснование = СозданныйДокумент.Ссылка;
	//				ДокументИСМПТОбъект.Записать(РежимЗаписиДокумента.Запись);
	//				
	//			КонецЕсли;
	//		Исключение
	//			
	//			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
	//			НСтр("ru='Ошибка при записи %1: %2.'"),
	//			ЭлементМассива.ДокументОснование,
	//			ИнформацияОбОшибке().Описание);
	//			
	//			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	//			
	//		КонецПопытки;
	//		
	//		Если ФормироватьСписокДокументов Тогда
	//			СписокПервичныхДокументов.Добавить(СозданныйДокумент.Ссылка);
	//		КонецЕсли;		
	//		
	//	КонецЦикла;
	//КонецЕсли;
	#КонецОбласти
	
	//Розница
	#Область Розница
	//ПроводитьСозданныеДокументы	= ПараметрыСоздания.ПроводитьСозданныеДокументы;
	//ФормироватьСписокДокументов = ПараметрыСоздания.ФормироватьСписокДокументов;

	//Если МассивДанныхДляЗаполнения.Количество() = 0 Тогда
	//	
	//	ТекстСообщения = НСтр("ru = 'В документе недостаточно данных для заполнения нового основания: проверьте таблицу Марки!'");
	//	ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	//	Отказ = Истина;
	//Иначе
	//	
	//	Для Каждого ЭлементМассива Из МассивДанныхДляЗаполнения Цикл
	//		
	//		ДокументИСМПТ = ЭлементМассива.Реквизиты[0].ДокументОснование;
	//					
	//		Если ТипСоздаваемогоДокумента = "ПоступлениеТоваров" Тогда
	//			
	//			СозданныйДокумент = Документы.ПоступлениеТоваров.СоздатьДокумент();
	//			СозданныйДокумент.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеТоваров");
	//			ИсключаемоеЗначение = "ХозяйственнаяОперация";
	//			
	//		ИначеЕсли ТипСоздаваемогоДокумента = "ВозвратТоваровОтПокупателя" Тогда
	//			
	//			СозданныйДокумент = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
	//			СозданныйДокумент.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.ПолучитьОперациюПоУмолчанию(Перечисления.ХозяйственныеОперации.ВозвратОтПокупателя);
	//			ИсключаемоеЗначение = "";
	//			
	//		ИначеЕсли ТипСоздаваемогоДокумента = "РеализацияТоваров" Тогда
	//			
	//			СозданныйДокумент = Документы.РеализацияТоваров.СоздатьДокумент();
	//			
	//		Иначе
	//			//По умолчанию создаем ПТУ
	//			СозданныйДокумент = Документы.ПоступлениеТоваров.СоздатьДокумент();
	//		КонецЕсли;

	//		//Заполняем шапку документа
	//		ЗаполнитьЗначенияСвойств(СозданныйДокумент, ЭлементМассива.Реквизиты[0]);
	//					
	//		//Заполняем табличную часть "Товары"
	//		Для Каждого СтрокаТЧ Из ЭлементМассива.Товары Цикл
	//			
	//			НоваяСтрокаТЧ = СозданныйДокумент.Товары.Добавить();
	//			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
	//				
	//		КонецЦикла;	
	//	
	//		Попытка 
	//			СозданныйДокумент.Записать(РежимЗаписиДокумента.Запись);
	//		Исключение
	//			ТекстСообщения = НСтр("ru = 'При записи документа ""%1"" произошла ошибка: %2'");
	//			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	//			
	//			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СозданныйДокумент, ПодробноеПредставлениеОшибки);


	//			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	//			Продолжить;
	//		КонецПопытки;
	//		
	//		Если ПроводитьСозданныеДокументы Тогда  
	//
	//			Попытка 
	//				СозданныйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	//			Исключение
	//				Отказ = Истина;
	//			КонецПопытки;
	//			
	//			Если Отказ Тогда
	//				ТекстСообщения = НСтр("ru = 'При проведении документа ""%1"" произошла ошибка. Выполнение ввода документов прервано'");
	//				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СозданныйДокумент);
	//				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	//				Прервать;
	//			КонецЕсли;
	//		КонецЕсли;

	//		Попытка
	//			Если ЗначениеЗаполнено(ДокументИСМПТ) Тогда
	//				
	//				ДокументИСМПТОбъект = ДокументИСМПТ.ПолучитьОбъект();
	//				ДокументИСМПТОбъект.ДокументОснование = СозданныйДокумент.Ссылка;
	//				ДокументИСМПТОбъект.Записать(РежимЗаписиДокумента.Запись);
	//				
	//			КонецЕсли;
	//		Исключение
	//			
	//			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
	//			НСтр("ru='Ошибка при записи %1: %2.'"),
	//			ЭлементМассива.ДокументОснование,
	//			ИнформацияОбОшибке().Описание);
	//			
	//			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	//			
	//		КонецПопытки;
	//		
	//		Если ФормироватьСписокДокументов Тогда
	//			СписокПервичныхДокументов.Добавить(СозданныйДокумент.Ссылка);
	//		КонецЕсли;		
	//		
	//	КонецЦикла;
	//КонецЕсли;
	#КонецОбласти
	
	//БК
	#Область БК
	ПроводитьСозданныеДокументы	= ПараметрыСоздания.ПроводитьСозданныеДокументы;
	ФормироватьСписокДокументов = ПараметрыСоздания.ФормироватьСписокДокументов;

	Если МассивДанныхДляЗаполнения.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'В документе недостаточно данных для заполнения нового основания: проверьте таблицу Марки!'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	Иначе
		
		Для каждого ЭлементМассива Из МассивДанныхДляЗаполнения Цикл
			
			ДокументИСМПТ = ЭлементМассива.Реквизиты[0].ДокументОснование;
			
			ТипОперацииСоздаваемогоДокумента = "";
			
			Если ТипСоздаваемогоДокумента = "ПоступлениеТоваровУслуг" Тогда
				
				СозданныйДокумент = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
				Если Не ТипЗнч(ДокументИСМПТ) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК") Тогда
					СозданныйДокумент.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары");
				Иначе
					СозданныйДокумент.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Импорт");
				КонецЕсли;
				
			ИначеЕсли ТипСоздаваемогоДокумента = "ВозвратТоваровОтПокупателя" Тогда
				
				СозданныйДокумент = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
				СозданныйДокумент.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ВозвратТоваров");
				ТипОперацииСоздаваемогоДокумента = "Продажа";
				
			ИначеЕсли ТипСоздаваемогоДокумента = "РеализацияТоваровУслуг" Тогда
				
				СозданныйДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				СозданныйДокумент.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Товары");
				
			Иначе
				//По умолчанию создаем ПТУ
				СозданныйДокумент = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
				СозданныйДокумент.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары");
				
			КонецЕсли;
			
			ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
			СозданныйДокумент.ВалютаДокумента = ВалютаРегламентированногоУчета;
			
			//Заполняем шапку документа
			ЗаполнитьЗначенияСвойств(СозданныйДокумент, ЭлементМассива.Реквизиты[0],, "ВидОперации");
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(СозданныйДокумент, ВалютаРегламентированногоУчета, ТипОперацииСоздаваемогоДокумента);
			
			//Заполняем табличную часть "Товары"
			Для Каждого СтрокаТЧ Из ЭлементМассива.Товары Цикл
				
				НоваяСтрокаТЧ = СозданныйДокумент.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
				
			КонецЦикла;	
			
			СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(СозданныйДокумент);
			
			Попытка 
				СозданныйДокумент.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ТекстСообщения = НСтр("ru = 'При записи документа ""%1"" произошла ошибка: %2'");
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СозданныйДокумент, ПодробноеПредставлениеОшибки);
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецПопытки;
			
			Если ПроводитьСозданныеДокументы Тогда  
				
				Попытка 
					СозданныйДокумент.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Отказ = Истина;
				КонецПопытки;
					
				Если Отказ Тогда
					ТекстСообщения = НСтр("ru = 'При проведении документа ""%1"" произошла ошибка. Выполнение ввода документов прервано'");
					ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СозданныйДокумент);
					ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			Попытка
				Если ЗначениеЗаполнено(ДокументИСМПТ) Тогда
					
					ДокументИСМПТОбъект = ДокументИСМПТ.ПолучитьОбъект();
					ДокументИСМПТОбъект.ДокументОснование = СозданныйДокумент.Ссылка;
					ДокументИСМПТОбъект.Записать(РежимЗаписиДокумента.Запись);
					
				КонецЕсли;
			Исключение
				
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при записи %1: %2.'"),
				ЭлементМассива.ДокументОснование,
				ИнформацияОбОшибке().Описание);
				
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
			КонецПопытки;

			Если ФормироватьСписокДокументов Тогда
				СписокПервичныхДокументов.Добавить(СозданныйДокумент.Ссылка);
			КонецЕсли;		
			
		КонецЦикла;
	КонецЕсли;
	#КонецОбласти
	///////////////////
		
КонецПроцедуры	

Функция ПолучитьМассивТиповДокументовМаркировки();
	
	МассивДокументовМаркировки = Новый Массив();
	//ИС МПТ
	МассивДокументовМаркировки.Добавить(Тип("ДокументСсылка.АктПриемаПередачиИСМПТК"));
	МассивДокументовМаркировки.Добавить(Тип("ДокументСсылка.УведомлениеОВводеВОборотИСМПТК"));
	МассивДокументовМаркировки.Добавить(Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСМПТК"));
	МассивДокументовМаркировки.Добавить(Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК"));
	МассивДокументовМаркировки.Добавить(Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК"));
	МассивДокументовМаркировки.Добавить(Тип("ДокументСсылка.УведомлениеОбЭкспортеЕАЭСИСМПТК"));
	МассивДокументовМаркировки.Добавить(Тип("ДокументСсылка.УведомлениеОПриемкеЕАЭСИСМПТК")); 
	//СУЗ
	МассивДокументовМаркировки.Добавить(Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК"));
	
	Возврат МассивДокументовМаркировки;
	
КонецФункции

Функция СформироватьСвойстваДокументаИСМПТ(ДокументИсточник, ВидОперацииВФорме = Неопределено) Экспорт
	
	МассивДокументовМаркировки = ПолучитьМассивТиповДокументовМаркировки();	
	СвойстваДокументИСМПТ = Новый Структура();
	СвойстваДокументИСМПТ.Вставить("ОписаниеТиповДокументИСМПТ", Новый ОписаниеТипов(МассивДокументовМаркировки));
	СвойстваДокументИСМПТ.Вставить("ПредставлениеСоздатьДокументИСМПТ", "Ввести новый документ маркировки (ИС МПТ)");
		
	Возврат СвойстваДокументИСМПТ;
	
КонецФункции

Функция ПолучитьПустуюСсылкуДокументИСМПТПоОснованию(ДокументОснование, ИмяДокумента = Неопределено) Экспорт
	
	МассивДокументовМаркировки = ПолучитьМассивТиповДокументовМаркировки();	
	Возврат Новый ОписаниеТипов(МассивДокументовМаркировки);
		
КонецФункции
	        
Функция ПроверитьИмяДокументаПриСозданииЭлементовФормыДляВводаДокументаИСМПТ(ИмяФормы) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//Возврат ?(СтрНайти(ИмяФормы, "ПриобретениеТоваровУслуг") <> 0, Истина, Ложь);
	
	//Розница
	//Возврат ?(СтрНайти(ИмяФормы, "ПоступлениеТоваров") <> 0, Истина, Ложь);
	
	//БК
	Возврат ?(СтрНайти(ИмяФормы, "ПоступлениеТоваровУслуг") <> 0, Истина, Ложь);
	///////////////////
	
КонецФункции

#Область ЗаполнениеПоОснованию

Функция ПроверитьНаличиеМаркируемогоТовара(ВыбранноеЗначение) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	#Область ЕРП_КА_УТ
	//Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
	//	ВДокументеЕстьМаркируемаяПродукция = ПроверитьТоварыВРТУ(ВыбранноеЗначение);
	//	
	//ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
	//	ВДокументеЕстьМаркируемаяПродукция = ПроверитьТоварыВВозвратеОтКлиента(ВыбранноеЗначение);
	//	
	//ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") Тогда
	//	ВДокументеЕстьМаркируемаяПродукция = ПроверитьТоварыВОприходованиеТоваров(ВыбранноеЗначение);
	//	
	//ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СписаниеНедостачТоваров") Тогда
	//	ВДокументеЕстьМаркируемаяПродукция = ПроверитьТоварыВСписаниеТоваров(ВыбранноеЗначение);
	//	
	//ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда 
	//	ВДокументеЕстьМаркируемаяПродукция = ПроверитьТоварыВПТУ(ВыбранноеЗначение);
	#КонецОбласти
	
	//Розница
	#Область Розница
	//Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
	//	ВДокументеЕстьМаркируемаяПродукция = ПроверитьТоварыВРТУ(ВыбранноеЗначение);
	//	
	//ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
	//	ВДокументеЕстьМаркируемаяПродукция = ПроверитьТоварыВВозвратеОтКлиента(ВыбранноеЗначение);
	//	
	//ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
	//	ВДокументеЕстьМаркируемаяПродукция = ПроверитьТоварыВОприходованиеТоваров(ВыбранноеЗначение);
	//	
	//ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СписаниеТоваров") Тогда
	//	ВДокументеЕстьМаркируемаяПродукция = ПроверитьТоварыВСписаниеТоваров(ВыбранноеЗначение);
	//	
	//ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда 
	//	ВДокументеЕстьМаркируемаяПродукция = ПроверитьТоварыВПТУ(ВыбранноеЗначение);
	#КонецОбласти
	
	//БК
	#Область БК
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ВДокументеЕстьМаркируемаяПродукция = ПроверитьТоварыВРТУ(ВыбранноеЗначение);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		ВДокументеЕстьМаркируемаяПродукция = ПроверитьТоварыВВозвратеОтКлиента(ВыбранноеЗначение);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		ВДокументеЕстьМаркируемаяПродукция = ПроверитьТоварыВОприходованиеТоваров(ВыбранноеЗначение);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СписаниеТоваров") Тогда
		ВДокументеЕстьМаркируемаяПродукция = ПроверитьТоварыВСписаниеТоваров(ВыбранноеЗначение);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		ВДокументеЕстьМаркируемаяПродукция = ПроверитьТоварыВТребованиеНакладная(ВыбранноеЗначение);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда 
		ВДокументеЕстьМаркируемаяПродукция = ПроверитьТоварыВПТУ(ВыбранноеЗначение);
	#КонецОбласти
	///////////////////
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ВДокументеЕстьМаркируемаяПродукция = ПроверитьТоварыВВозвратеПоставщику(ВыбранноеЗначение);

	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
	//	ВДокументеЕстьМаркируемаяПродукция = ПроверитьТоварыЗаказПоставщику(ВыбранноеЗначение);
		
	//УТ
	//ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ПрочееОприходованиеТоваров") Тогда
	//	ВДокументеЕстьМаркируемаяПродукция = ПроверитьТоварыПрочееОприходованиеТоваров(ВыбранноеЗначение);
	
	//БК
	//
	///////////////////	
	Иначе
		ВДокументеЕстьМаркируемаяПродукция = Ложь;
	КонецЕсли;
	
	Возврат ВДокументеЕстьМаркируемаяПродукция;
	
КонецФункции

Функция ПроверитьТоварыВРТУ(ДокументСсылка)
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//Возврат ПроверитьТоварыОбщийЗапрос("РеализацияТоваровУслуг", ДокументСсылка);
	
	//Розница
	//Возврат ПроверитьТоварыОбщийЗапрос("РеализацияТоваров", ДокументСсылка);
	
	//БК
	Возврат ПроверитьТоварыОбщийЗапрос("РеализацияТоваровУслуг", ДокументСсылка);
	///////////////////
	
КонецФункции

Функция ПроверитьТоварыВВозвратеОтКлиента(ДокументСсылка)
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//Возврат ПроверитьТоварыОбщийЗапрос("ВозвратТоваровОтКлиента", ДокументСсылка);
	
	//Розница
	//Возврат ПроверитьТоварыОбщийЗапрос("ВозвратТоваровОтПокупателя", ДокументСсылка);
	
	//БК
	Возврат ПроверитьТоварыОбщийЗапрос("ВозвратТоваровОтПокупателя", ДокументСсылка);
	///////////////////
		
КонецФункции

Функция ПроверитьТоварыВВозвратеПоставщику(ДокументСсылка)
	
	Возврат ПроверитьТоварыОбщийЗапрос("ВозвратТоваровПоставщику", ДокументСсылка);
	
КонецФункции

Функция ПроверитьТоварыВОприходованиеТоваров(ДокументСсылка)
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//Возврат ПроверитьТоварыОбщийЗапрос("ОприходованиеИзлишковТоваров", ДокументСсылка);
	
	//Розница
	//Возврат ПроверитьТоварыОбщийЗапрос("ОприходованиеТоваров", ДокументСсылка);
	
	//БК
	Возврат ПроверитьТоварыОбщийЗапрос("ОприходованиеТоваров", ДокументСсылка);
	///////////////////
			
КонецФункции

Функция ПроверитьТоварыВСписаниеТоваров(ДокументСсылка)
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//Возврат ПроверитьТоварыОбщийЗапрос("СписаниеНедостачТоваров", ДокументСсылка);
	
	//Розница
	//Возврат ПроверитьТоварыОбщийЗапрос("СписаниеТоваров", ДокументСсылка);
	
	//БК
	Возврат ПроверитьТоварыОбщийЗапрос("СписаниеТоваров", ДокументСсылка);
	///////////////////
	
КонецФункции

Функция ПроверитьТоварыВПТУ(ДокументСсылка)
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//Возврат ПроверитьТоварыОбщийЗапрос("ПриобретениеТоваровУслуг", ДокументСсылка);
	
	//Розница
	//Возврат ПроверитьТоварыОбщийЗапрос("ПоступлениеТоваров", ДокументСсылка);
	
	//БК
	Возврат ПроверитьТоварыОбщийЗапрос("ПоступлениеТоваровУслуг", ДокументСсылка);
	///////////////////
	
КонецФункции

//ПЕРЕОПРЕДЕЛЕНИЕ//
//ЕРП, КА, УТ + Розница
#Область ЕРП_КА_УТУТ__Розница
Функция ПроверитьТоварыЗаказПоставщику(ДокументСсылка)
	
	Возврат ПроверитьТоварыОбщийЗапрос("ЗаказПоставщику", ДокументСсылка);
	
КонецФункции
#КонецОбласти
///////////////////

//ПЕРЕОПРЕДЕЛЕНИЕ//
//УТ
#Область УТ
Функция ПроверитьТоварыПрочееОприходованиеТоваров(ДокументСсылка)
	
	Возврат ПроверитьТоварыОбщийЗапрос("ПрочееОприходованиеТоваров", ДокументСсылка);
		
КонецФункции
#КонецОбласти
///////////////////

Функция ПроверитьТоварыОбщийЗапрос(ИмяДокумента, ДокументСсылка)
	
	Запрос = Новый Запрос();
	Текст = "ВЫБРАТЬ
	|	ДокументПроверки.Номенклатура КАК Номенклатура
	|ИЗ
	|	Документ." + ИмяДокумента + ".Товары КАК ДокументПроверки
	|ГДЕ
	|	ДокументПроверки.Ссылка = &Ссылка
	|	И (ДокументПроверки.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|	ИЛИ ДокументПроверки.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|	ИЛИ ДокументПроверки.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)  
	|	ИЛИ ДокументПроверки.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты)
	|	ИЛИ ДокументПроверки.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|	ИЛИ ДокументПроверки.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность))";
	
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат ?(Результат.Количество() = 0, Ложь, Истина);
	
КонецФункции
	
#КонецОбласти	

#Область АктПриемаПередачи

Функция ПолучитьТекстЗапросаДляМассиваАПП(МассивВидовДокумента)
	
	ТекстЗапроса = "";
	Для Каждого ЭлементМассива Из МассивВидовДокумента Цикл
		ТекстЗапросаДокумента = "";
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА, УТ + БК
		Если ЭлементМассива = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
		//Розница
		//Если ЭлементМассива = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		///////////////////
			ТекстЗапросаДокумента = ТекстЗапросаРеализацияТоваровУслуг_АПП(ТекстЗапроса = "");
		ИначеЕсли ЭлементМассива = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") Тогда
			ТекстЗапросаДокумента = ТекстЗапросаУведомлениеОРасхождении(ТекстЗапроса = "");
		ИначеЕсли ЭлементМассива = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			ТекстЗапросаДокумента = ТекстЗапросаВозвратТоваровПоставщику(ТекстЗапроса = "");
		КонецЕсли;
		
		Если ТекстЗапроса <> "" И ТекстЗапросаДокумента <> "" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|"  
		КонецЕсли;	
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДокумента;
		
	КонецЦикла;	
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область СозданиеПервичногоДокумента

Функция ПодготовитьТекстЗапросаДляЗаполненияПервичныхДокументов(ПараметрыЗаполнения) Экспорт
	
	ДокументыОснования = ПараметрыЗаполнения.МассивИСМПТДляСозданияПервичныхДокументов;
	
	Если ПараметрыЗаполнения.ТипДокументаИСМПТ = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда 
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА, УТ + Розница
		//Если ПараметрыЗаполнения.НаправлениеДокументаИСМПТ = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда
		//	ТекстЗапроса = ТекстЗапросаАктДляОснования();
		//Иначе
		//	ТекстЗапроса = ТекстЗапросаАктДляОснованияИсходящий();
		//КонецЕсли;
		
		//БК
		Если ПараметрыЗаполнения.ТипСоздаваемогоДокумента = "ВозвратТоваровОтПокупателя" Тогда
			ТекстЗапроса = ТекстЗапросаВозвратТоваровОтКлиента();
		Иначе 
			Если ПараметрыЗаполнения.НаправлениеДокументаИСМПТ = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда
				ТекстЗапроса = ТекстЗапросаАктДляОснования();
			Иначе
				ТекстЗапроса = ТекстЗапросаАктДляОснованияИсходящий();
			КонецЕсли;		
		КонецЕсли;
		///////////////////
	ИначеЕсли ПараметрыЗаполнения.ТипДокументаИСМПТ = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК") Тогда 
		ТекстЗапроса = ТекстЗапросаУведОВвозеИмпортДляОснования();	
	КонецЕсли;
			
	ТекстЗапроса = ТекстЗапроса + "
	|
	| ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|";
			
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ДополнитьТекстЗапросЗаполнения(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|	ВЫБРАТЬ
	|	вт_ДанныеДокумента.Организация КАК Организация,
	|	вт_ДанныеДокумента.Контрагент КАК Контрагент,
	|	вт_ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДокумента.Дата КАК Дата,
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//|	вт_ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	
	//БК
	|	вт_ДанныеДокумента.ВидОперации КАК ВидОперации,
	|	вт_ДанныеДокумента.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	вт_ДанныеДокумента.Коэффициент КАК Коэффициент,
	///////////////////
	|	вт_ДанныеДокумента.Партнер КАК Партнер,
	|	вт_ДанныеДокумента.Номенклатура КАК Номенклатура,
	|	вт_ДанныеДокумента.Упаковка КАК Упаковка,
	|	вт_ДанныеДокумента.Характеристика КАК Характеристика,
	|	вт_ДанныеДокумента.Количество КАК Количество,
	|	вт_ДанныеДокумента.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ вт_ДанныеДляЗаполнения
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|";

	Возврат ТекстЗапроса + ПолучитьТекстПакетовЗапросаДляЗаполненияПервичныхДокументов();
			
КонецФункции

Функция ПолучитьТекстПакетовЗапросаДляЗаполненияПервичныхДокументов() Экспорт
	
	СтруктураДокумента 	= ПолучитьПустуюСтруктуруДокументаОснованияДляАПП();
	
	ТекстЗапроса = "";
	Для Каждого ЭлементСтруктуры Из СтруктураДокумента Цикл 
			
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ" + ?(ЭлементСтруктуры.Ключ = "Реквизиты",  " РАЗЛИЧНЫЕ", "") + " 
		|";
		
		КолонкиТЧ 			= ЭлементСтруктуры.Значение.Колонки;
		НомерКолонки 		= 0;
		КоличествоКолонок 	= КолонкиТЧ.Количество();
		Для Каждого КолонкаТЧ Из КолонкиТЧ Цикл
			НомерКолонки = НомерКолонки + 1;
			ТекстЗапроса = ТекстЗапроса + "
					|вт_ДанныеДляЗаполнения." + КолонкаТЧ.Имя + ?(НомерКолонки = КоличествоКолонок, "", ",");
		КонецЦикла;	
		ТекстЗапроса = ТекстЗапроса + "
		    |
			|ИЗ вт_ДанныеДляЗаполнения КАК вт_ДанныеДляЗаполнения";
		
		
		ТекстЗапроса = ТекстЗапроса + "
			|					
			|	УПОРЯДОЧИТЬ ПО
			|		ДокументОснование";
			
			КонецЦикла;	
		Возврат ТекстЗапроса; 
		
КонецФункции

Функция ПолучитьПустуюСтруктуруДокументаОснованияДляАПП(Параметры = Неопределено) Экспорт
	
	Если Не Параметры = Неопределено Тогда
		ТипДокумента = Параметры.ТипСоздаваемогоДокумента;
	Иначе
		ТипДокумента = Параметры;
	КонецЕсли;
	
	СтруктураДокумента = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = "Организация," 
	+ "Контрагент," 
	+ "ДокументОснование," 
	+ "Партнер," 	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//+ "ХозяйственнаяОперация," 
	
	//БК
	+ "ВидОперации,"
	///////////////////
	+ "Дата"
	;
	
	СтруктураДокумента.Вставить("Реквизиты", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	
	СписокОбязательныхКолонок = 
	"Организация,"
	+ "Номенклатура,"
	+ "Характеристика,"
	+ "Количество,"
	+ "Упаковка,"
	+ "КоличествоУпаковок,"
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//
	
	//БК
	+ "ЕдиницаИзмерения,"
	+ "Коэффициент,"
	///////////////////
	+ "ДокументОснование"
	;
	
	СтруктураДокумента.Вставить("Товары", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	
	Возврат СтруктураДокумента;
	
КонецФункции	

//Используется для получения данных из входящего Акта приема/передачи при создании документа-основания
//(Приобретение товаров)
Функция ТекстЗапросаАктДляОснования(ПервыйЗапрос = Истина) //Для создания основания из Входящего АПП
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	СУММА(ТаблицаТовары.КоличествоИсточник) КАК Количество,
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//
	
	//БК
	|	ТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	///////////////////
	|	СУММА(ТаблицаТовары.КоличествоИсточник) КАК КоличествоУпаковок,
	|" + ПолучитьКусокТекстаЗапросаПоШтрихкодамНоменклатуры()
	   + "ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.АктПриемаПередачиИСМПТК.Товары КАК ТаблицаТовары
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + БК
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	
	//Розница
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
	///////////////////
	|		ПО ТаблицаТовары.EAN = ШтрихкодыНоменклатуры.Штрихкод
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивИСМПТДляСозданияПервичныхДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.GTIN,
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//|	ШтрихкодыНоменклатуры.Характеристика,
	//|	ШтрихкодыНоменклатуры.Упаковка,
	//|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	
	//Розница
	//|	ШтрихкодыНоменклатуры.Характеристика,
	//|	ШтрихкодыНоменклатуры.Упаковка,
	//| ЕСТЬNULL(ШтрихкодыНоменклатуры.Владелец, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	
	//БК
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
	|	ТаблицаТовары.ЕдиницаИзмерения
	///////////////////
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыАПП.Ссылка КАК Ссылка,
	|	ТоварыАПП.Количество КАК Количество,
	|	ТоварыАПП.КоличествоУпаковок КАК КоличествоУпаковок,
	|	АктПриемаПередачиИСМПТ.Ссылка КАК ДокументОснование,
	|	АктПриемаПередачиИСМПТ.Дата КАК Дата,
	|	АктПриемаПередачиИСМПТ.Номер КАК Номер,
	|	АктПриемаПередачиИСМПТ.Организация КАК Организация,
	|	АктПриемаПередачиИСМПТ.Контрагент КАК Контрагент,
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//|	ВЫБОР
	//|		КОГДА АктПриемаПередачиИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперацииИСМПТК.Реализация)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА АктПриемаПередачиИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперацииИСМПТК.КомиссияИАгентскаяТорговля)
	//|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
	//|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
	//|			КОНЕЦ
	//|	КОНЕЦ КАК ХозяйственнаяОперация,
	//|	АктПриемаПередачиИСМПТ.Контрагент.Партнер КАК Партнер,
	
	//Розница
	//|	ВЫБОР
	//|		КОГДА АктПриемаПередачиИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперацииИСМПТК.Реализация)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеТоваров)
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА АктПриемаПередачиИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперацииИСМПТК.КомиссияИАгентскаяТорговля)
	//|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
	//|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
	//|			КОНЕЦ
	//|	КОНЕЦ КАК ХозяйственнаяОперация,
	//|	АктПриемаПередачиИСМПТ.Контрагент КАК Партнер,
	
	//БК
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары) КАК ВидОперации,
	|	АктПриемаПередачиИСМПТ.Контрагент КАК Партнер,
	|	ТоварыАПП.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	1 КАК Коэффициент,
	///////////////////
	|	ТоварыАПП.Номенклатура КАК Номенклатура,
	|	ТоварыАПП.Характеристика КАК Характеристика,
	|	ТоварыАПП.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	ВТ_Товары КАК ТоварыАПП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктПриемаПередачиИСМПТК КАК АктПриемаПередачиИСМПТ
	|		ПО ТоварыАПП.Ссылка = АктПриемаПередачиИСМПТ.Ссылка
	|ГДЕ
	|	АктПриемаПередачиИСМПТ.Ссылка В(&МассивИСМПТДляСозданияПервичныхДокументов)";
	
	Если Не ПервыйЗапрос Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ вт_ДанныеДокумента", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции	

//Используется для получения данных из исходящего Акта приема/передачи при создании документа-основания
//(Реализация товаров и услуг)
Функция ТекстЗапросаАктДляОснованияИсходящий(ПервыйЗапрос = Истина) //Для создания основания из Исходящего АПП
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АктПриемаПередачиИСМПТКМарки.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(АктПриемаПередачиИСМПТКМарки.GTIN) КАК КоличествоУпаковок,
	|	АктПриемаПередачиИСМПТКМарки.EAN КАК EAN,
	|	СУММА(АктПриемаПередачиИСМПТКМарки.Количество) КАК Количество,
	|" + ПолучитьКусокТекстаЗапросаПоШтрихкодамНоменклатуры()
	   + "ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.АктПриемаПередачиИСМПТК.Марки КАК АктПриемаПередачиИСМПТКМарки
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + БК
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	
	//Розница
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
	///////////////////
	|		ПО АктПриемаПередачиИСМПТКМарки.EAN = ШтрихкодыНоменклатуры.Штрихкод
	|ГДЕ
	|	АктПриемаПередачиИСМПТКМарки.Ссылка В(&МассивИСМПТДляСозданияПервичныхДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	АктПриемаПередачиИСМПТКМарки.Ссылка,
	|	АктПриемаПередачиИСМПТКМарки.EAN,
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
	//|	ШтрихкодыНоменклатуры.Характеристика,
	//|	ШтрихкодыНоменклатуры.Упаковка
	
	//Розница
	//|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Владелец, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
	//|	ШтрихкодыНоменклатуры.Характеристика,
	//|	ШтрихкодыНоменклатуры.Упаковка
	
	//БК
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	///////////////////
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыАПП.Ссылка КАК Ссылка,
	|	ТоварыАПП.Количество КАК Количество,
	|	ТоварыАПП.КоличествоУпаковок КАК КоличествоУпаковок,
	|	АктПриемаПередачиИСМПТ.Ссылка КАК ДокументОснование,
	|	АктПриемаПередачиИСМПТ.Дата КАК Дата,
	|	АктПриемаПередачиИСМПТ.Номер КАК Номер,
	|	АктПриемаПередачиИСМПТ.Организация КАК Организация,
	|	АктПриемаПередачиИСМПТ.Контрагент КАК Контрагент,
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//|	АктПриемаПередачиИСМПТ.Контрагент.Партнер КАК Партнер,
	//|	ВЫБОР
	//|		КОГДА АктПриемаПередачиИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперацииИСМПТК.Реализация)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	//|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
	//|	КОНЕЦ КАК ХозяйственнаяОперация,
	
	//Розница
	//|	АктПриемаПередачиИСМПТ.Контрагент КАК Партнер,
	//|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваров) КАК ХозяйственнаяОперация,
	
	//БК
	|	АктПриемаПередачиИСМПТ.Контрагент КАК Партнер,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.Товары) КАК ВидОперации,
	|	ТоварыАПП.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	1 КАК Коэффициент,
	///////////////////
	|	ТоварыАПП.Характеристика КАК Характеристика,
	|	ТоварыАПП.Упаковка КАК Упаковка,
	|	ТоварыАПП.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	ВТ_Товары КАК ТоварыАПП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктПриемаПередачиИСМПТК КАК АктПриемаПередачиИСМПТ
	|		ПО ТоварыАПП.Ссылка = АктПриемаПередачиИСМПТ.Ссылка
	|ГДЕ
	|	АктПриемаПередачиИСМПТ.Ссылка В(&МассивИСМПТДляСозданияПервичныхДокументов)";
	
	Если Не ПервыйЗапрос Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ вт_ДанныеДокумента", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции	

//Используется для получения данных из входящего Акта приема/передачи при создании документа-основания
//(Возврат товаров от клиента)
Функция ТекстЗапросаВозвратТоваровОтКлиента(ПервыйЗапрос = Истина)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	СУММА(ТаблицаТовары.КоличествоИсточник) КАК Количество,
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//
	
	//БК
	|	ТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	///////////////////
	|	СУММА(ТаблицаТовары.КоличествоИсточник) КАК КоличествоУпаковок,
	|" + ПолучитьКусокТекстаЗапросаПоШтрихкодамНоменклатуры()
	   + "ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.АктПриемаПередачиИСМПТК.Товары КАК ТаблицаТовары
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + БК
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	
	//Розница
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
	///////////////////
	|		ПО ТаблицаТовары.EAN = ШтрихкодыНоменклатуры.Штрихкод
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивИСМПТДляСозданияПервичныхДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.GTIN,
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//|	ШтрихкодыНоменклатуры.Характеристика,
	//|	ШтрихкодыНоменклатуры.Упаковка,
	
	//БК
	|	ТаблицаТовары.ЕдиницаИзмерения,
	///////////////////
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + БК
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	
	//Розница
	//|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Владелец, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	///////////////////
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыАПП.Ссылка КАК Ссылка,
	|	ТоварыАПП.Количество КАК Количество,
	|	ТоварыАПП.КоличествоУпаковок КАК КоличествоУпаковок,
	|	АктПриемаПередачиИСМПТ.Ссылка КАК ДокументОснование,
	|	АктПриемаПередачиИСМПТ.Дата КАК Дата,
	|	АктПриемаПередачиИСМПТ.Номер КАК Номер,
	|	АктПриемаПередачиИСМПТ.Организация КАК Организация,
	|	АктПриемаПередачиИСМПТ.Контрагент КАК Контрагент,
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//|	АктПриемаПередачиИСМПТ.Контрагент.Партнер КАК Партнер,
	//|	ВЫБОР
	//|		КОГДА АктПриемаПередачиИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперацииИСМПТК.Реализация)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА АктПриемаПередачиИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперацииИСМПТК.КомиссияИАгентскаяТорговля)
	//|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	//|			КОНЕЦ
	//|	КОНЕЦ КАК ХозяйственнаяОперация,
	
	//Розница
	//|	АктПриемаПередачиИСМПТ.Контрагент КАК Партнер,
	//|	ВЫБОР
	//|		КОГДА АктПриемаПередачиИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперацииИСМПТК.Реализация)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтПокупателя)
	//|	КОНЕЦ КАК ХозяйственнаяОперация,
	
	//БК
	|	АктПриемаПередачиИСМПТ.Контрагент КАК Партнер,
	|	ТоварыАПП.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	1 КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА АктПриемаПередачиИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперацииИСМПТК.Реализация)
	|				ИЛИ АктПриемаПередачиИСМПТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперацииИСМПТК.КомиссияИАгентскаяТорговля)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ВозвратТоваров)
	|	КОНЕЦ КАК ВидОперации,
	///////////////////
	|	ТоварыАПП.Номенклатура КАК Номенклатура,
	|	ТоварыАПП.Характеристика КАК Характеристика,
	|	ТоварыАПП.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	ВТ_Товары КАК ТоварыАПП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктПриемаПередачиИСМПТК КАК АктПриемаПередачиИСМПТ
	|		ПО ТоварыАПП.Ссылка = АктПриемаПередачиИСМПТ.Ссылка
	|ГДЕ
	|	АктПриемаПередачиИСМПТ.Ссылка В(&МассивИСМПТДляСозданияПервичныхДокументов)";
	
	Если Не ПервыйЗапрос Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ вт_ДанныеДокумента", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции	

Функция ТекстЗапросаУведОВвозеИмпортДляОснования(ПервыйЗапрос = Истина) 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	СУММА(ТаблицаТовары.КоличествоКМ) КАК Количество,
	|	СУММА(ТаблицаТовары.КоличествоКМ) КАК КоличествоУпаковок,
	|" + ПолучитьКусокТекстаЗапросаПоШтрихкодамНоменклатуры()
	   + "ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.УведомлениеОВвозеИзТретьихСтранИСМПТК.Товары КАК ТаблицаТовары
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + БК
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	
	//Розница
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
	///////////////////
	|		ПО ТаблицаТовары.EAN = ШтрихкодыНоменклатуры.Штрихкод
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивИСМПТДляСозданияПервичныхДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.GTIN,
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//|	ШтрихкодыНоменклатуры.Характеристика,
	//|	ШтрихкодыНоменклатуры.Упаковка,
	//|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	
	//Розница
	//|	ШтрихкодыНоменклатуры.Характеристика,
	//|	ШтрихкодыНоменклатуры.Упаковка,
	//|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Владелец, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	
	//БК
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	///////////////////
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыВвоз.Ссылка КАК Ссылка,
	|	ТоварыВвоз.Количество КАК Количество,
	|	ТоварыВвоз.КоличествоУпаковок КАК КоличествоУпаковок,
	|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Ссылка КАК ДокументОснование,
	|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Дата КАК Дата,
	|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Номер КАК Номер,
	|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Организация КАК Организация,
	|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Контрагент КАК Контрагент,
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Контрагент.Партнер КАК Партнер,
	
	//Розница + БК
	|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Контрагент КАК Партнер,
	///////////////////
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//|	Неопределено КАК ХозяйственнаяОперация,
	
	//БК
	|	Неопределено КАК ВидОперации,
	|	1 КАК Коэффициент,
	|	ТоварыВвоз.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	///////////////////
	|	ТоварыВвоз.Номенклатура КАК Номенклатура,
	|	ТоварыВвоз.Характеристика КАК Характеристика,
	|	ТоварыВвоз.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	ВТ_Товары КАК ТоварыВвоз
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОВвозеИзТретьихСтранИСМПТК КАК УведомлениеОВвозеИзТретьихСтранИСМПТК
	|		ПО ТоварыВвоз.Ссылка = УведомлениеОВвозеИзТретьихСтранИСМПТК.Ссылка
	|ГДЕ
	|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Ссылка В(&МассивИСМПТДляСозданияПервичныхДокументов)";
	
	Если Не ПервыйЗапрос Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ вт_ДанныеДокумента", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции	

#КонецОбласти

#Область Первичный

Функция ПодготовитьТекстЗапросаДляЗаполненияАПП(ПараметрыЗаполнения) Экспорт
	
	ДокументыОснования 	 = ПараметрыЗаполнения.МассивДокументов;
	МассивВидовДокумента = ПараметрыЗаполнения.МассивВидовДокумента;

	Если ТипЗнч(ДокументыОснования) = Тип("Массив") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДляМассиваАПП(МассивВидовДокумента);
		Если ТекстЗапроса = "" Тогда
			Возврат Неопределено;
		КонецЕсли;	   
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + БК
	ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
	//Розница
	//ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
	///////////////////	
		ТекстЗапроса = ТекстЗапросаРеализацияТоваровУслуг_АПП();
	ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") Тогда
		ТекстЗапроса = ТекстЗапросаУведомлениеОРасхождении();
	ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ТекстЗапроса = ТекстЗапросаВозвратТоваровПоставщику();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
		
	Возврат ТекстЗапроса;
	
КонецФункции

//РТУ является основанием для ввода исходящего АктПриемаПередачиИСМПТК для всех поддерживаемых ТГ номенклатуры.
//При вводе на основании из ТЧ РТУ выбирается только номенклатура, имеющая особенности учета "маркируемая".
//
Функция ТекстЗапросаРеализацияТоваровУслуг_АПП(ПервыйЗапрос = Истина)
	
	//Запрос для создания Акта приема/передачи (исходящего) на основании РТУ
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	|	РеализацияТоваровУслуг.Контрагент КАК Получатель,
	|	ТаблицаТовары.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументаИСМПТК.Исходный) КАК ТипАкта,
	|	ЛОЖЬ КАК ЭтоКорректировка,
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//|	ВЫБОР
	//|		КОГДА РеализацияТоваровУслуг.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперацииИСМПТК.Реализация)
	//|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперацииИСМПТК.КомиссияИАгентскаяТорговля)
	//|	КОНЕЦ КАК ВидОперации,
	
	//Розница + БК
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперацииИСМПТК.Реализация) КАК ВидОперации,
	///////////////////
	|	ЗНАЧЕНИЕ(Перечисление.НаправленияДокументовИСМПТК.Исходящий) КАК Направление,
	|	НЕОПРЕДЕЛЕНО КАК УведомлениеОРасхождении,
	|	НЕОПРЕДЕЛЕНО КАК СвязанныйАкт,
	|	НЕОПРЕДЕЛЕНО КАК РегистрационныйНомерСвязанногоАкта,
	|";
	ТекстЗапроса = ТекстЗапроса + ПолучитьКусокТекстаЗапросаВидПродукции()
				+ "ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Количество КАК КоличествоИсточник,
	|";
	ТекстЗапроса = ТекстЗапроса + ПолучитьКусокТекстаЗапросаОрагнизация()
				+ "ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ Организации.Наименование
	|	КОНЕЦ КАК ПоставщикНаименование,
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//|	Контрагенты.ИНН КАК ПолучательИдентификационныйНомер,
	
	//БК
	|	Контрагенты.ИдентификационныйКодЛичности КАК ПолучательИдентификационныйНомер,
	///////////////////
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ Контрагенты.Наименование
	|	КОНЕЦ КАК ПолучательНаименование
	|ПОМЕСТИТЬ вт_ДанныеДокумента_Предварительная
	|ИЗ
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + БК
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	
	//Розница
	//|	Документ.РеализацияТоваров.Товары КАК ТаблицаТовары
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваров КАК РеализацияТоваровУслуг
	///////////////////
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|			ПО РеализацияТоваровУслуг.Организация = Организации.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|			ПО РеализацияТоваровУслуг.Контрагент = Контрагенты.Ссылка
	|		ПО ТаблицаТовары.Ссылка = РеализацияТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)
	|	И (СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента_Предварительная.Организация КАК Организация,
	|	вт_ДанныеДокумента_Предварительная.Поставщик КАК Поставщик,
	|	вт_ДанныеДокумента_Предварительная.Контрагент КАК Контрагент,
	|	вт_ДанныеДокумента_Предварительная.Получатель КАК Получатель,
	|	вт_ДанныеДокумента_Предварительная.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДокумента_Предварительная.ТипАкта КАК ТипАкта,
	|	вт_ДанныеДокумента_Предварительная.ЭтоКорректировка КАК ЭтоКорректировка,
	|	вт_ДанныеДокумента_Предварительная.ВидОперации КАК ВидОперации,
	|	вт_ДанныеДокумента_Предварительная.Направление КАК Направление,
	|	вт_ДанныеДокумента_Предварительная.УведомлениеОРасхождении КАК УведомлениеОРасхождении,
	|	вт_ДанныеДокумента_Предварительная.СвязанныйАкт КАК СвязанныйАкт,
	|	вт_ДанныеДокумента_Предварительная.РегистрационныйНомерСвязанногоАкта КАК РегистрационныйНомерСвязанногоАкта,
	|	вт_ДанныеДокумента_Предварительная.ВидПродукцииИС КАК ВидПродукцииИС,
	|	вт_ДанныеДокумента_Предварительная.Номенклатура КАК Номенклатура,
	|	вт_ДанныеДокумента_Предварительная.ЕдиницаИзмеренияБазовая КАК ЕдиницаИзмеренияБазовая,
	|	СУММА(вт_ДанныеДокумента_Предварительная.КоличествоИсточник) КАК КоличествоИсточник,
	|	вт_ДанныеДокумента_Предварительная.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента_Предварительная.ПоставщикНаименование КАК ПоставщикНаименование,
	|	вт_ДанныеДокумента_Предварительная.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	вт_ДанныеДокумента_Предварительная.ПолучательНаименование КАК ПолучательНаименование
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	вт_ДанныеДокумента_Предварительная КАК вт_ДанныеДокумента_Предварительная
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ДанныеДокумента_Предварительная.Контрагент,
	|	вт_ДанныеДокумента_Предварительная.Получатель,
	|	вт_ДанныеДокумента_Предварительная.ДокументОснование,
	|	вт_ДанныеДокумента_Предварительная.ТипАкта,
	|	вт_ДанныеДокумента_Предварительная.Поставщик,
	|	вт_ДанныеДокумента_Предварительная.ЭтоКорректировка,
	|	вт_ДанныеДокумента_Предварительная.Организация,
	|	вт_ДанныеДокумента_Предварительная.Направление,
	|	вт_ДанныеДокумента_Предварительная.ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента_Предварительная.Номенклатура,
	|	вт_ДанныеДокумента_Предварительная.ПолучательНаименование,
	|	вт_ДанныеДокумента_Предварительная.УведомлениеОРасхождении,
	|	вт_ДанныеДокумента_Предварительная.ЕдиницаИзмеренияБазовая,
	|	вт_ДанныеДокумента_Предварительная.ПолучательИдентификационныйНомер,
	|	вт_ДанныеДокумента_Предварительная.СвязанныйАкт,
	|	вт_ДанныеДокумента_Предварительная.ПоставщикНаименование,
	|	вт_ДанныеДокумента_Предварительная.ВидПродукцииИС,
	|	вт_ДанныеДокумента_Предварительная.ВидОперации,
	|	вт_ДанныеДокумента_Предварительная.РегистрационныйНомерСвязанногоАкта";    
	
	Если Не ПервыйЗапрос Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ вт_ДанныеДокумента", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРеализацияТоваровУслуг_УведОВыводе(ПервыйЗапрос = Истина)
	
	//Запрос для создания Уведомления о выводе из оборота (интернет-торговля) На основании РТУ
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	ТаблицаТовары.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ПричиныВыводаКМИзОборотаИСМПТК.ИнтернетТорговля) КАК ПричинаВыводаИзОборота,
	|	ЗНАЧЕНИЕ(Перечисление.НаправленияДокументовИСМПТК.Исходящий) КАК Направление,
	|";
	ТекстЗапроса = ТекстЗапроса + ПолучитьКусокТекстаЗапросаВидПродукции()
				+ "ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Количество КАК КоличествоИсточник,
	|";
	ТекстЗапроса = ТекстЗапроса + ПолучитьКусокТекстаЗапросаОрагнизация()
				+ "ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ Организации.Наименование
	|	КОНЕЦ КАК ПоставщикНаименование
	|ПОМЕСТИТЬ вт_ДанныеДокумента_Предварительная
	|ИЗ
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + БК
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	
	//Розница
	//|	Документ.РеализацияТоваров.Товары КАК ТаблицаТовары
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваров КАК РеализацияТоваровУслуг
	///////////////////
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|			ПО РеализацияТоваровУслуг.Организация = Организации.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|			ПО РеализацияТоваровУслуг.Контрагент = Контрагенты.Ссылка
	|		ПО ТаблицаТовары.Ссылка = РеализацияТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)
	|	И (СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента_Предварительная.Организация КАК Организация,
	|	вт_ДанныеДокумента_Предварительная.Поставщик КАК Поставщик,
	|	вт_ДанныеДокумента_Предварительная.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента_Предварительная.ПоставщикНаименование КАК ПоставщикНаименование,
	|	вт_ДанныеДокумента_Предварительная.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДокумента_Предварительная.ПричинаВыводаИзОборота КАК ПричинаВыводаИзОборота,
	|	вт_ДанныеДокумента_Предварительная.Направление КАК Направление,
	|	вт_ДанныеДокумента_Предварительная.ВидПродукцииИС КАК ВидПродукцииИС,
	|	вт_ДанныеДокумента_Предварительная.Номенклатура КАК Номенклатура,
	|	вт_ДанныеДокумента_Предварительная.ЕдиницаИзмеренияБазовая КАК ЕдиницаИзмеренияБазовая,
	|	СУММА(вт_ДанныеДокумента_Предварительная.КоличествоИсточник) КАК КоличествоИсточник,
	|	Неопределено КАК Получатель,
	|	Неопределено КАК ТипАкта,
	|	Неопределено КАК ВидОперации,
	|	Неопределено КАК СвязанныйАкт,
	|	Неопределено КАК РегистрационныйНомерСвязанногоАкта,
	|	Неопределено КАК ПолучательИдентификационныйНомер,
	|	Неопределено КАК ПолучательНаименование
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	вт_ДанныеДокумента_Предварительная КАК вт_ДанныеДокумента_Предварительная
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ДанныеДокумента_Предварительная.ДокументОснование,
	|	вт_ДанныеДокумента_Предварительная.ПричинаВыводаИзОборота,
	|	вт_ДанныеДокумента_Предварительная.Поставщик,
	|	вт_ДанныеДокумента_Предварительная.Организация,
	|	вт_ДанныеДокумента_Предварительная.Направление,
	|	вт_ДанныеДокумента_Предварительная.ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента_Предварительная.Номенклатура,
	|	вт_ДанныеДокумента_Предварительная.ЕдиницаИзмеренияБазовая,
	|	вт_ДанныеДокумента_Предварительная.ПоставщикНаименование,
	|	вт_ДанныеДокумента_Предварительная.ВидПродукцииИС";    
	
	Если Не ПервыйЗапрос Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ вт_ДанныеДокумента", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

//ВозвратТоваровПоставщику является основанием для ввода исходящего АктПриемаПередачиИСМПТК для всех поддерживаемых ТГ номенклатуры.
//При вводе на основании из ТЧ выбирается только номенклатура, имеющая особенности учета "маркируемая".
//
Функция ТекстЗапросаВозвратТоваровПоставщику(ПервыйЗапрос = Истина)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратТоваровПоставщику.Организация КАК Организация,
	|	ВозвратТоваровПоставщику.Организация КАК Поставщик,
	|	ВозвратТоваровПоставщику.Контрагент КАК Контрагент,
	|	ВозвратТоваровПоставщику.Контрагент КАК Получатель,
	|	ТаблицаТовары.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументаИСМПТК.Исходный) КАК ТипАкта,
	|	ЛОЖЬ КАК ЭтоКорректировка,
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//|	ВЫБОР
	//|		КОГДА ВозвратТоваровПоставщику.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперацииИСМПТК.Реализация)
	//|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперацииИСМПТК.КомиссияИАгентскаяТорговля)
	//|	КОНЕЦ КАК ВидОперации,
	
	//БК + Розница
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперацииИСМПТК.Реализация) КАК ВидОперации,
	///////////////////
	|	ЗНАЧЕНИЕ(Перечисление.НаправленияДокументовИСМПТК.Исходящий) КАК Направление,
	|	НЕОПРЕДЕЛЕНО КАК УведомлениеОРасхождении,
	|	НЕОПРЕДЕЛЕНО КАК СвязанныйАкт,
	|	НЕОПРЕДЕЛЕНО КАК РегистрационныйНомерСвязанногоАкта,
	|";
	ТекстЗапроса = ТекстЗапроса + ПолучитьКусокТекстаЗапросаВидПродукции()
				+ "ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Количество КАК КоличествоИсточник,
	|";
	ТекстЗапроса = ТекстЗапроса + ПолучитьКусокТекстаЗапросаОрагнизация()
				+ "ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ Организации.Наименование
	|	КОНЕЦ КАК ПоставщикНаименование,
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//|	Контрагенты.ИНН КАК ПолучательИдентификационныйНомер,
	
	//БК
	|	Контрагенты.ИдентификационныйКодЛичности КАК ПолучательИдентификационныйНомер,
	///////////////////
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ Контрагенты.Наименование
	|	КОНЕЦ КАК ПолучательНаименование
	|ПОМЕСТИТЬ вт_ДанныеДокумента_Предварительная
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|			ПО ВозвратТоваровПоставщику.Организация = Организации.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|			ПО ВозвратТоваровПоставщику.Контрагент = Контрагенты.Ссылка
	|		ПО ТаблицаТовары.Ссылка = ВозвратТоваровПоставщику.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка В(&МассивДокументов)
	|	И (СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента_Предварительная.Организация КАК Организация,
	|	вт_ДанныеДокумента_Предварительная.Поставщик КАК Поставщик,
	|	вт_ДанныеДокумента_Предварительная.Контрагент КАК Контрагент,
	|	вт_ДанныеДокумента_Предварительная.Получатель КАК Получатель,
	|	вт_ДанныеДокумента_Предварительная.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДокумента_Предварительная.ТипАкта КАК ТипАкта,
	|	вт_ДанныеДокумента_Предварительная.ЭтоКорректировка КАК ЭтоКорректировка,
	|	вт_ДанныеДокумента_Предварительная.ВидОперации КАК ВидОперации,
	|	вт_ДанныеДокумента_Предварительная.Направление КАК Направление,
	|	вт_ДанныеДокумента_Предварительная.УведомлениеОРасхождении КАК УведомлениеОРасхождении,
	|	вт_ДанныеДокумента_Предварительная.СвязанныйАкт КАК СвязанныйАкт,
	|	вт_ДанныеДокумента_Предварительная.РегистрационныйНомерСвязанногоАкта КАК РегистрационныйНомерСвязанногоАкта,
	|	вт_ДанныеДокумента_Предварительная.ВидПродукцииИС КАК ВидПродукцииИС,
	|	вт_ДанныеДокумента_Предварительная.Номенклатура КАК Номенклатура,
	|	вт_ДанныеДокумента_Предварительная.ЕдиницаИзмеренияБазовая КАК ЕдиницаИзмеренияБазовая,
	|	СУММА(вт_ДанныеДокумента_Предварительная.КоличествоИсточник) КАК КоличествоИсточник,
	|	вт_ДанныеДокумента_Предварительная.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента_Предварительная.ПоставщикНаименование КАК ПоставщикНаименование,
	|	вт_ДанныеДокумента_Предварительная.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	вт_ДанныеДокумента_Предварительная.ПолучательНаименование КАК ПолучательНаименование
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	вт_ДанныеДокумента_Предварительная КАК вт_ДанныеДокумента_Предварительная
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ДанныеДокумента_Предварительная.Контрагент,
	|	вт_ДанныеДокумента_Предварительная.Получатель,
	|	вт_ДанныеДокумента_Предварительная.ДокументОснование,
	|	вт_ДанныеДокумента_Предварительная.ТипАкта,
	|	вт_ДанныеДокумента_Предварительная.Поставщик,
	|	вт_ДанныеДокумента_Предварительная.ЭтоКорректировка,
	|	вт_ДанныеДокумента_Предварительная.Организация,
	|	вт_ДанныеДокумента_Предварительная.Направление,
	|	вт_ДанныеДокумента_Предварительная.ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента_Предварительная.Номенклатура,
	|	вт_ДанныеДокумента_Предварительная.ПолучательНаименование,
	|	вт_ДанныеДокумента_Предварительная.УведомлениеОРасхождении,
	|	вт_ДанныеДокумента_Предварительная.ЕдиницаИзмеренияБазовая,
	|	вт_ДанныеДокумента_Предварительная.ПолучательИдентификационныйНомер,
	|	вт_ДанныеДокумента_Предварительная.СвязанныйАкт,
	|	вт_ДанныеДокумента_Предварительная.ПоставщикНаименование,
	|	вт_ДанныеДокумента_Предварительная.ВидПродукцииИС,
	|	вт_ДанныеДокумента_Предварительная.ВидОперации,
	|	вт_ДанныеДокумента_Предварительная.РегистрационныйНомерСвязанногоАкта";    
	
	Если Не ПервыйЗапрос Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ вт_ДанныеДокумента", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ДополнитьТекстЗапросЗаполненияАПП(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.Организация,
	|	вт_ДанныеДокумента.ТипАкта,
	|	вт_ДанныеДокумента.Контрагент,
	|	вт_ДанныеДокумента.Поставщик,
	|	вт_ДанныеДокумента.Получатель,
	|	вт_ДанныеДокумента.ДокументОснование,
	|	вт_ДанныеДокумента.ВидОперации,
	|	вт_ДанныеДокумента.ВидПродукцииИС,
	|	вт_ДанныеДокумента.Направление,
	|	вт_ДанныеДокумента.ЭтоКорректировка,
	|	вт_ДанныеДокумента.ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента.ПоставщикНаименование,
	|	вт_ДанныеДокумента.ПолучательИдентификационныйНомер,
	|	вт_ДанныеДокумента.ПолучательНаименование,
	|	вт_ДанныеДокумента.Номенклатура,
	|	вт_ДанныеДокумента.КоличествоИсточник КАК КоличествоИсточник,
	|	вт_ДанныеДокумента.ЕдиницаИзмеренияБазовая КАК ЕдиницаИзмерения,
	|	вт_ДанныеДокумента.УведомлениеОРасхождении КАК УведомлениеОРасхождении,
	|	вт_ДанныеДокумента.СвязанныйАкт КАК СвязанныйАкт,
	|	вт_ДанныеДокумента.РегистрационныйНомерСвязанногоАкта КАК РегистрационныйНомерСвязанногоАкта
	|ПОМЕСТИТЬ вт_ДанныеДляЗаполнения
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|ГДЕ
	|	вт_ДанныеДокумента.КоличествоИсточник > 0
	|";

	Возврат ТекстЗапроса + ИнтеграцияИСМПТК.ПолучитьТекстПакетовЗапросаДляЗаполненияАПП();
	
КонецФункции

Функция ПолучитьДанныеДокументаОснованияАППНаСервере(ДокументОснование) Экспорт
	
	ТекстЗапроса = "";
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
	//	ТекстЗапроса = ТекстЗапросаРеализацияТоваровУслуг_АПП(ТекстЗапроса = "");
	//	ЗаполнятьТоварыПолностью = Ложь;
	//ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") Тогда
	//	ТекстЗапроса = ТекстЗапросаУведомлениеОРасхождении(ТекстЗапроса = "");
	//	ЗаполнятьТоварыПолностью = Истина;
	//ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
	//	ТекстЗапроса = ТекстЗапросаАктДляОснования(ТекстЗапроса = "");
	//	ЗаполнятьТоварыПолностью = Ложь;
	//ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
	//	ТекстЗапроса = ТекстЗапросаВозвратТоваровОтКлиента(ТекстЗапроса = "");
	//	ЗаполнятьТоварыПолностью = Ложь;
	//ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
	//	ТекстЗапроса = ТекстЗапросаВозвратТоваровПоставщику(ТекстЗапроса = "");
	//	ЗаполнятьТоварыПолностью = Ложь;
	//КонецЕсли;
	
	//Розница
	//Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
	//	ТекстЗапроса = ТекстЗапросаРеализацияТоваровУслуг_АПП(ТекстЗапроса = "");
	//	ЗаполнятьТоварыПолностью = Ложь;
	//ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") Тогда
	//	ТекстЗапроса = ТекстЗапросаУведомлениеОРасхождении(ТекстЗапроса = "");
	//	ЗаполнятьТоварыПолностью = Истина;
	//ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
	//	ТекстЗапроса = ТекстЗапросаАктДляОснования(ТекстЗапроса = "");
	//	ЗаполнятьТоварыПолностью = Ложь;
	//ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
	//	ТекстЗапроса = ТекстЗапросаВозвратТоваровОтКлиента(ТекстЗапроса = "");
	//	ЗаполнятьТоварыПолностью = Ложь;
	//ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
	//	ТекстЗапроса = ТекстЗапросаВозвратТоваровПоставщику(ТекстЗапроса = "");
	//	ЗаполнятьТоварыПолностью = Ложь;
	//КонецЕсли;
	
	//БК
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ТекстЗапроса = ТекстЗапросаРеализацияТоваровУслуг_АПП(ТекстЗапроса = "");
		ЗаполнятьТоварыПолностью = Ложь;
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") Тогда
		ТекстЗапроса = ТекстЗапросаУведомлениеОРасхождении(ТекстЗапроса = "");
		ЗаполнятьТоварыПолностью = Истина;
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ТекстЗапроса = ТекстЗапросаАктДляОснования(ТекстЗапроса = "");
		ЗаполнятьТоварыПолностью = Ложь;
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		ТекстЗапроса = ТекстЗапросаВозвратТоваровОтКлиента(ТекстЗапроса = "");
		ЗаполнятьТоварыПолностью = Ложь;
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ТекстЗапроса = ТекстЗапросаВозвратТоваровПоставщику(ТекстЗапроса = "");
		ЗаполнятьТоварыПолностью = Ложь;
	КонецЕсли;
	///////////////////	
		
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";

	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") Тогда
		ТекстЗапроса = ДополнитьТекстЗапросЗаполненияАПП_ПоУОР(ТекстЗапроса);
	Иначе
		ТекстЗапроса = ДополнитьТекстЗапросЗаполненияАПП(ТекстЗапроса);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументов", ДокументОснование);
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицаРеквизиты = РезультатЗапроса[КоличествоПакетов - 2].Выгрузить();
	Реквизиты = Новый Структура();
	
	Для Каждого Строка Из ТаблицаРеквизиты Цикл
		
		Реквизиты.Вставить("Организация", 		Строка.Организация);
		Реквизиты.Вставить("ТипАкта", 			Строка.ТипАкта);
		Реквизиты.Вставить("Контрагент", 	    Строка.Контрагент);
		Реквизиты.Вставить("Поставщик", 		Строка.Поставщик);
		Реквизиты.Вставить("Получатель", 		Строка.Получатель);
		Реквизиты.Вставить("ДокументОснование", Строка.ДокументОснование);
		Реквизиты.Вставить("ВидОперации", 		Строка.ВидОперации);
		Реквизиты.Вставить("Направление",  	 	Строка.Направление);
		Реквизиты.Вставить("ЭтоКорректировка",  Строка.ЭтоКорректировка);
		Реквизиты.Вставить("ПоставщикИдентификационныйНомер",    Строка.ПоставщикИдентификационныйНомер);
		Реквизиты.Вставить("ПоставщикНаименование", 		     Строка.ПоставщикНаименование);
		Реквизиты.Вставить("ПолучательИдентификационныйНомер",   Строка.ПолучательИдентификационныйНомер);
		Реквизиты.Вставить("ПолучательНаименование", 			 Строка.ПолучательНаименование);
		Реквизиты.Вставить("УведомлениеОРасхождении", 			 Строка.УведомлениеОРасхождении);
		Реквизиты.Вставить("СвязанныйАкт", 					  	 Строка.СвязанныйАкт);
		Реквизиты.Вставить("РегистрационныйНомерСвязанногоАкта", Строка.РегистрационныйНомерСвязанногоАкта);
	
	КонецЦикла;
	
	ТаблицаТовары = РезультатЗапроса[КоличествоПакетов - 1].Выгрузить(); 
	Товары = Новый Массив();
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		
		СтрокаТовары = Новый Структура();
		СтрокаТовары.Вставить("Номенклатура", 	  	  Строка.Номенклатура);
		СтрокаТовары.Вставить("КоличествоИсточник",   Строка.КоличествоИсточник);
		
		Если ЗаполнятьТоварыПолностью Тогда
			СтрокаТовары.Вставить("КодМаркировки", 	  Строка.КодМаркировки);
			СтрокаТовары.Вставить("ВидУпаковки", 	  Строка.ВидУпаковки);
			СтрокаТовары.Вставить("Количество", 	  Строка.Количество);
			СтрокаТовары.Вставить("GTIN", 			  Строка.GTIN);
			СтрокаТовары.Вставить("EAN", 			  Строка.EAN);
			СтрокаТовары.Вставить("КодИдентификации", Строка.КодИдентификации);
			СтрокаТовары.Вставить("ВидПродукцииИС",     Строка.ВидПродукцииИС);
		КонецЕсли;
		
		Товары.Добавить(СтрокаТовары);
		
	КонецЦикла;
	
	ДанныеДокументаОснования = Новый Структура();
	ДанныеДокументаОснования.Вставить("Реквизиты", Реквизиты);
	ДанныеДокументаОснования.Вставить("Товары",	   Товары);
	
	Возврат ДанныеДокументаОснования;

КонецФункции

Функция ПолучитьДанныеДокументаОснованияЗаказаКМНаСервере(ДокументОснование) Экспорт
		
	ТекстЗапроса = "";
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА + Розница
	//Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
	//	ТекстЗапроса = ТекстЗапросаЗаказПоставщику(ТекстЗапроса = "");
	//КонецЕсли;
	
	//УТ
	//Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
	//	ТекстЗапроса = ТекстЗапросаЗаказПоставщику(ТекстЗапроса = "");
	//ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПрочееОприходованиеТоваров") Тогда
	//	ТекстЗапроса = ТекстЗапросаПрочееОприходованиеТоваров(ТекстЗапроса = "");
	//КонецЕсли;
	
	//БК
	//
	///////////////////
		
	//ТекстЗапроса = ТекстЗапроса + "
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	Организация";

	ТекстЗапроса = ДополнитьТекстЗапросЗаполненияЗаказКодов(ТекстЗапроса);

	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументов", ДокументОснование);
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицаРеквизиты = РезультатЗапроса[КоличествоПакетов - 2].Выгрузить();
	Реквизиты = Новый Структура();
	
	Для Каждого Строка Из ТаблицаРеквизиты Цикл
		
		Реквизиты.Вставить("Организация", 		 Строка.Организация);
		Реквизиты.Вставить("ВидПродукции", 		 Строка.ВидПродукции);
		Реквизиты.Вставить("Ответственный", 	 Строка.Ответственный);
		Реквизиты.Вставить("ДокументОснование",  Строка.ДокументОснование);
		Реквизиты.Вставить("СпособВводаВОборот", Строка.СпособВводаВОборот);
	
	КонецЦикла;
	
	ТаблицаТовары = РезультатЗапроса[КоличествоПакетов - 1].Выгрузить(); 
	Товары = Новый Массив();
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		
		//Из запроса получаем EAN, а для заполнения в документе нужно указывать GTIN 
		GTIN = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.GTINПоШтрихкодуEAN(Строка.GTIN);
		
		СтрокаТовары = Новый Структура();
		СтрокаТовары.Вставить("Номенклатура", 	  	  	 Строка.Номенклатура);
		СтрокаТовары.Вставить("Характеристика",   		 Строка.Характеристика);
		СтрокаТовары.Вставить("Упаковка", 	 			 Строка.Упаковка);
		СтрокаТовары.Вставить("КоличествоУпаковок", 	 Строка.КоличествоУпаковок);
		СтрокаТовары.Вставить("Количество", 	  		 Строка.Количество);
		СтрокаТовары.Вставить("ЕдиницаИзмеренияБазовая", Строка.ЕдиницаИзмеренияБазовая);
		СтрокаТовары.Вставить("GTIN", 					 GTIN);
		
		Товары.Добавить(СтрокаТовары);
		
	КонецЦикла;
	
	ДанныеДокументаОснования = Новый Структура();
	ДанныеДокументаОснования.Вставить("Реквизиты", Реквизиты);
	ДанныеДокументаОснования.Вставить("Товары",	   Товары);
	
	Возврат ДанныеДокументаОснования;

КонецФункции

#КонецОбласти

#Область Корректировочный

//Исходящий корректировочный АктПриемаПередачиИСМПТК вводится на соновании входящго Увед. о расхождениях.
//Данные по маркам в Акте полностью переносятся из УОР, т.к. должны учитывать несоответствия, обнаруженные получателем товара.
//
Функция ТекстЗапросаУведомлениеОРасхождении(ПервыйЗапрос = Истина)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОРасхожденииИСМПТМарки.Ссылка КАК Ссылка,
	|	УведомлениеОРасхожденииИСМПТМарки.Номенклатура КАК Номенклатура,
	|	УведомлениеОРасхожденииИСМПТМарки.ВидУпаковки КАК ВидУпаковки,
	|	УведомлениеОРасхожденииИСМПТМарки.КодМаркировки КАК КодМаркировки,
	|	УведомлениеОРасхожденииИСМПТМарки.GTIN КАК GTIN,
	|	УведомлениеОРасхожденииИСМПТМарки.EAN КАК EAN,
	|	УведомлениеОРасхожденииИСМПТМарки.КоличествоИсточник КАК КоличествоИсточник,
	|	УведомлениеОРасхожденииИСМПТМарки.КодИдентификации КАК КодИдентификации,
	|	УведомлениеОРасхожденииИСМПТМарки.ВидПродукцииИС КАК ВидПродукцииИС,
	|	ВЫБОР
	|		КОГДА УведомлениеОРасхожденииИСМПТМарки.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ УведомлениеОРасхожденииИСМПТМарки.Количество
	|	КОНЕЦ КАК Количество
	|ПОМЕСТИТЬ вт_ДанныеМарки
	|ИЗ
	|	Документ.УведомлениеОРасхожденииИСМПТК.Марки КАК УведомлениеОРасхожденииИСМПТМарки
	|ГДЕ
	|	УведомлениеОРасхожденииИСМПТМарки.Ссылка В(&МассивДокументов)
	|	И (УведомлениеОРасхожденииИСМПТМарки.СтатусСверкиКода = ЗНАЧЕНИЕ(Перечисление.СтатусыСверкиКодаИСМПТК.Найден)
	|			ИЛИ УведомлениеОРасхожденииИСМПТМарки.СтатусСверкиКода = ЗНАЧЕНИЕ(Перечисление.СтатусыСверкиКодаИСМПТК.Добавлен))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОРасхожденииИСМПТ.Организация КАК Организация,
	|	УведомлениеОРасхожденииИСМПТ.Получатель КАК Получатель,
	|	УведомлениеОРасхожденииИСМПТ.ПолучательНаименование КАК ПолучательНаименование,
	|	УведомлениеОРасхожденииИСМПТ.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	УведомлениеОРасхожденииИСМПТ.Контрагент КАК Контрагент,
	|	УведомлениеОРасхожденииИСМПТ.Поставщик КАК Поставщик,
	|	УведомлениеОРасхожденииИСМПТ.ПоставщикНаименование КАК ПоставщикНаименование,
	|	УведомлениеОРасхожденииИСМПТ.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	УведомлениеОРасхожденииИСМПТ.СвязанныйАкт.ДокументОснование КАК ДокументОснованиеИсточник,
	|	УведомлениеОРасхожденииИСМПТ.ДокументОснование КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументаИСМПТК.Исправленный) КАК ТипАкта,
	|	ИСТИНА КАК ЭтоКорректировка,
	|	УведомлениеОРасхожденииИСМПТ.ВидОперации КАК ВидОперации,
	|	ЗНАЧЕНИЕ(Перечисление.НаправленияДокументовИСМПТК.Исходящий) КАК Направление,
	|	УведомлениеОРасхожденииИСМПТ.Ссылка КАК УведомлениеОРасхождении,
	|	УведомлениеОРасхожденииИСМПТ.СвязанныйАкт КАК СвязанныйАкт,
	|	УведомлениеОРасхожденииИСМПТ.СвязанныйАкт.НомерИСМПТ КАК РегистрационныйНомерСвязанногоАкта,
	|	вт_ДанныеМарки.Номенклатура КАК Номенклатура,
	|	вт_ДанныеМарки.ВидУпаковки КАК ВидУпаковки,
	|	вт_ДанныеМарки.КодМаркировки КАК КодМаркировки,
	|	вт_ДанныеМарки.GTIN КАК GTIN,
	|	вт_ДанныеМарки.EAN КАК EAN,
	|	вт_ДанныеМарки.КоличествоИсточник КАК КоличествоИсточник,
	|	вт_ДанныеМарки.Количество КАК Количество,
	|	вт_ДанныеМарки.КодИдентификации КАК КодИдентификации,
	|	вт_ДанныеМарки.ВидПродукцииИС КАК ВидПродукцииИС
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	Документ.УведомлениеОРасхожденииИСМПТК КАК УведомлениеОРасхожденииИСМПТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ДанныеМарки КАК вт_ДанныеМарки
	|		ПО УведомлениеОРасхожденииИСМПТ.Ссылка = вт_ДанныеМарки.Ссылка
	|ГДЕ
	|	УведомлениеОРасхожденииИСМПТ.Ссылка В(&МассивДокументов)";  

	Если Не ПервыйЗапрос Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ вт_ДанныеДокумента", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ДополнитьТекстЗапросЗаполненияАПП_ПоУОР(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.Организация,
	|	вт_ДанныеДокумента.ТипАкта,
	|	вт_ДанныеДокумента.Контрагент,
	|	вт_ДанныеДокумента.Поставщик,
	|	вт_ДанныеДокумента.Получатель,
	|	вт_ДанныеДокумента.ДокументОснование,
	|	вт_ДанныеДокумента.ДокументОснованиеИсточник,
	|	вт_ДанныеДокумента.ВидОперации,
	|	вт_ДанныеДокумента.ВидПродукцииИС,	
	|	вт_ДанныеДокумента.Направление,
	|	вт_ДанныеДокумента.ЭтоКорректировка,
	|	вт_ДанныеДокумента.ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента.ПоставщикНаименование,
	|	вт_ДанныеДокумента.ПолучательИдентификационныйНомер,
	|	вт_ДанныеДокумента.ПолучательНаименование,
	|	вт_ДанныеДокумента.УведомлениеОРасхождении КАК УведомлениеОРасхождении,
	|	вт_ДанныеДокумента.СвязанныйАкт КАК СвязанныйАкт,
	|	вт_ДанныеДокумента.РегистрационныйНомерСвязанногоАкта КАК РегистрационныйНомерСвязанногоАкта,
	|	вт_ДанныеДокумента.Номенклатура,
	|	вт_ДанныеДокумента.КодМаркировки,
	|	вт_ДанныеДокумента.ВидУпаковки,
	|	вт_ДанныеДокумента.Количество,
	|	вт_ДанныеДокумента.GTIN,
	|	вт_ДанныеДокумента.КоличествоИсточник,
	|	вт_ДанныеДокумента.EAN,
	|	вт_ДанныеДокумента.КодИдентификации
	|ПОМЕСТИТЬ вт_ДанныеДляЗаполнения
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|";

	Возврат ТекстЗапроса + ИнтеграцияИСМПТК.ПолучитьПустуюСтруктуруДокументаАПП_ПоУОР();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область УведомлениеОРасхождении

Функция ПолучитьТекстЗапросаДляМассиваУОР(МассивВидовДокумента)
	
	ТекстЗапроса = "";
	Для Каждого ЭлементМассива Из МассивВидовДокумента Цикл
		ТекстЗапросаДокумента = "";
		
		Если ЭлементМассива = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда
			ТекстЗапросаДокумента = ТекстЗапросаАППДляУОР(ТекстЗапроса = "");
		КонецЕсли;
		
		Если ТекстЗапроса <> "" И ТекстЗапросаДокумента <> "" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|"  
		КонецЕсли;	
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДокумента;
		
	КонецЦикла;	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПодготовитьТекстЗапросаДляЗаполненияУОР(ПараметрыЗаполнения) Экспорт
	
	ДокументыОснования = ПараметрыЗаполнения.МассивДокументов;
	МассивВидовДокумента = ПараметрыЗаполнения.МассивВидовДокумента;

	Если ТипЗнч(ДокументыОснования) = Тип("Массив") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДляМассиваУОР(МассивВидовДокумента);
		Если ТекстЗапроса = "" Тогда
			Возврат Неопределено;
		КонецЕсли;	
	
	ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда
		ТекстЗапроса = ТекстЗапросаАППДляУОР();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
		
	Возврат ТекстЗапроса;
	
КонецФункции

//Исходящий УОР вводится на основании входящего АктаПриемаПередачи, при этом ТЧ
//уведомления заполняется по данным ТЧ Расхождения в Акте, которая заполняется при выполнении команды 
//сверки полученного товара.
//
Функция ТекстЗапросаАППДляУОР(ПервыйЗапрос = Истина)
		
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктПриемаПередачиИСМПТ.Организация КАК Организация,
	|	АктПриемаПередачиИСМПТ.Организация КАК Получатель,
	|	АктПриемаПередачиИСМПТ.ПолучательНаименование КАК ПолучательНаименование,
	|	АктПриемаПередачиИСМПТ.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	АктПриемаПередачиИСМПТ.Контрагент КАК Контрагент,
	|	АктПриемаПередачиИСМПТ.Контрагент КАК Поставщик,
	|	АктПриемаПередачиИСМПТ.ПоставщикНаименование КАК ПоставщикНаименование,
	|	АктПриемаПередачиИСМПТ.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	АктПриемаПередачиИСМПТ.ВидОперации КАК ВидОперации,
	|	ЗНАЧЕНИЕ(Перечисление.НаправленияДокументовИСМПТК.Исходящий) КАК Направление,
	|	АктПриемаПередачиИСМПТ.Ссылка КАК СвязанныйАкт,
	|	АктПриемаПередачиИСМПТ.НомерИСМПТ КАК РегистрационныйНомерСвязанногоАкта,
	|	ТаблицаМарки.КодМаркировки КАК КодМаркировки,
	|	ТаблицаМарки.ВидУпаковки КАК ВидУпаковки,
	|	ТаблицаМарки.Количество КАК Количество,
	|	ТаблицаМарки.GTIN КАК GTIN,
	|	ТаблицаМарки.GTINВерхнегоУровня КАК GTINВерхнегоУровня,
	|	ТаблицаМарки.Номенклатура КАК Номенклатура,
	|	ТаблицаМарки.Количество КАК КоличествоИсточник,
	|	ТаблицаМарки.EAN КАК EAN,
	|	ТаблицаМарки.КодИдентификации КАК КодИдентификации,
	|	ТаблицаМарки.ВидПродукцииИС КАК ВидПродукцииИС,
	|	ТаблицаМарки.СтатусСверкиКода КАК СтатусСверкиКода,
	|	АктПриемаПередачиИСМПТ.Ссылка КАК ДокументОснование
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	Документ.АктПриемаПередачиИСМПТК.Расхождения КАК ТаблицаМарки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктПриемаПередачиИСМПТК КАК АктПриемаПередачиИСМПТ
	|		ПО ТаблицаМарки.Ссылка = АктПриемаПередачиИСМПТ.Ссылка
	|ГДЕ
	|	АктПриемаПередачиИСМПТ.Ссылка В(&МассивДокументов)";
	
	Если Не ПервыйЗапрос Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ вт_ДанныеДокумента", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ДополнитьТекстЗапросЗаполненияУОР(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.Организация,
	|	вт_ДанныеДокумента.Контрагент,
	|	вт_ДанныеДокумента.Поставщик,
	|	вт_ДанныеДокумента.ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента.ПоставщикНаименование,
	|	вт_ДанныеДокумента.Получатель,
	|	вт_ДанныеДокумента.ПолучательИдентификационныйНомер,
	|	вт_ДанныеДокумента.ПолучательНаименование,
	|	вт_ДанныеДокумента.ДокументОснование,
	|	вт_ДанныеДокумента.СвязанныйАкт КАК СвязанныйАкт,
	|	вт_ДанныеДокумента.РегистрационныйНомерСвязанногоАкта КАК РегистрационныйНомерСвязанногоАкта,
	|	вт_ДанныеДокумента.ВидОперации,
	|	вт_ДанныеДокумента.ВидПродукцииИС,	
	|	вт_ДанныеДокумента.Направление,
	|	вт_ДанныеДокумента.КодМаркировки,
	|	вт_ДанныеДокумента.ВидУпаковки,
	|	вт_ДанныеДокумента.Номенклатура,
	|	вт_ДанныеДокумента.КоличествоИсточник,
	|	вт_ДанныеДокумента.Количество,
	|	вт_ДанныеДокумента.EAN,
	|	вт_ДанныеДокумента.GTIN,
	|	вт_ДанныеДокумента.GTINВерхнегоУровня,
	|	вт_ДанныеДокумента.КодИдентификации,
	|	вт_ДанныеДокумента.СтатусСверкиКода
	|ПОМЕСТИТЬ вт_ДанныеДляЗаполнения
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|ГДЕ
	|	вт_ДанныеДокумента.Количество > 0
	|";

	Возврат ТекстЗапроса + ИнтеграцияИСМПТК.ПолучитьТекстПакетовЗапросаДляЗаполненияУОР();
	
КонецФункции

Функция ПолучитьДанныеДокументаОснованияУОРНаСервере(ДокументОснование) Экспорт
		
	ТекстЗапроса = "";
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда
		ТекстЗапроса = ТекстЗапросаАППДляУОР(ТекстЗапроса = "");
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";

	ТекстЗапроса = ДополнитьТекстЗапросЗаполненияУОР(ТекстЗапроса);
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументов", ДокументОснование);
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицаРеквизиты = РезультатЗапроса[КоличествоПакетов - 2].Выгрузить();
	Реквизиты = Новый Структура();
	
	Для Каждого Строка Из ТаблицаРеквизиты Цикл
		
		Реквизиты.Вставить("Организация", 		Строка.Организация);
		Реквизиты.Вставить("Контрагент", 	    Строка.Контрагент);
		Реквизиты.Вставить("Поставщик", 		Строка.Поставщик);
		Реквизиты.Вставить("Получатель", 		Строка.Получатель);
		Реквизиты.Вставить("ДокументОснование", Строка.ДокументОснование);
		Реквизиты.Вставить("ВидОперации", 		Строка.ВидОперации);
		Реквизиты.Вставить("Направление",  	 	Строка.Направление);
		Реквизиты.Вставить("ПоставщикИдентификационныйНомер",    Строка.ПоставщикИдентификационныйНомер);
		Реквизиты.Вставить("ПоставщикНаименование", 		     Строка.ПоставщикНаименование);
		Реквизиты.Вставить("ПолучательИдентификационныйНомер",   Строка.ПолучательИдентификационныйНомер);
		Реквизиты.Вставить("ПолучательНаименование", 			 Строка.ПолучательНаименование);
		Реквизиты.Вставить("СвязанныйАкт", 					  	 Строка.СвязанныйАкт);
		Реквизиты.Вставить("РегистрационныйНомерСвязанногоАкта", Строка.РегистрационныйНомерСвязанногоАкта);
	
	КонецЦикла;
	
	ТаблицаМарки = РезультатЗапроса[КоличествоПакетов - 1].Выгрузить(); 
	Марки = Новый Массив();
	
	Для Каждого Строка Из ТаблицаМарки Цикл
		
		СтрокаМарки = Новый Структура();
		СтрокаМарки.Вставить("Код", 	  		   Строка.Код);
		СтрокаМарки.Вставить("Количество", 		   Строка.Количество);
		СтрокаМарки.Вставить("ВидУпаковки", 	   Строка.ВидУпаковки);
		СтрокаМарки.Вставить("Номенклатура", 	   Строка.Номенклатура);
		СтрокаМарки.Вставить("КоличествоИсточник", Строка.КоличествоИсточник);
		СтрокаМарки.Вставить("EAN", 			   Строка.EAN);
		СтрокаМарки.Вставить("GTIN",       		   Строка.GTIN);
		СтрокаМарки.Вставить("GTINВерхнегоУровня", Строка.GTINВерхнегоУровня);
		СтрокаМарки.Вставить("СтатусСверкиКода",   Строка.СтатусСверкиКода);
		СтрокаМарки.Вставить("ВидПродукцииИС",     Строка.ВидПродукцииИС);
		Марки.Добавить(СтрокаМарки);
		
	КонецЦикла;
	
	ДанныеДокументаОснования = Новый Структура();
	ДанныеДокументаОснования.Вставить("Реквизиты", Реквизиты);
	ДанныеДокументаОснования.Вставить("Марки",	   Марки);
	
	Возврат ДанныеДокументаОснования;

КонецФункции

#КонецОбласти

#Область УведомлениеОВводеВОборот

Функция ПолучитьТекстЗапросаДляМассиваВводВОборот(МассивВидовДокумента)
	
	ТекстЗапроса = "";
	Для Каждого ЭлементМассива Из МассивВидовДокумента Цикл
		ТекстЗапросаДокумента = "";
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА, УТ
		//Если ЭлементМассива = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") Тогда
		//	//Основной вариант создания
		//	ТекстЗапросаДокумента = ТекстЗапросаОприходованиеТоваров(ТекстЗапроса = "");
		//ИначеЕсли ЭлементМассива = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда 
		//	ТекстЗапросаДокумента = ТекстЗапросаВозвратТоваровОтКлиентаДляВводаВОборот(ТекстЗапроса = "");
		//КонецЕсли;
		
		//Розница
		//Если ЭлементМассива = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		//	//Основной вариант создания
		//	ТекстЗапросаДокумента = ТекстЗапросаОприходованиеТоваров(ТекстЗапроса = "");
		//ИначеЕсли ЭлементМассива = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда 
		//	ТекстЗапросаДокумента = ТекстЗапросаВозвратТоваровОтКлиентаДляВводаВОборот(ТекстЗапроса = "");
		//КонецЕсли;
		
		//БК
		Если ЭлементМассива = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
			//Основной вариант создания
			ТекстЗапросаДокумента = ТекстЗапросаОприходованиеТоваров(ТекстЗапроса = "");
		ИначеЕсли ЭлементМассива = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда 
			ТекстЗапросаДокумента = ТекстЗапросаВозвратТоваровОтКлиентаДляВводаВОборот(ТекстЗапроса = "");
		КонецЕсли;
		///////////////////
				
		Если ТекстЗапроса <> "" И ТекстЗапросаДокумента <> "" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|"  
		КонецЕсли;	
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДокумента;
		
	КонецЦикла;	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПодготовитьТекстЗапросаДляЗаполненияВводВОборот(ПараметрыЗаполнения) Экспорт
	
	ДокументыОснования   = ПараметрыЗаполнения.МассивДокументов;
	МассивВидовДокумента = ПараметрыЗаполнения.МассивВидовДокумента;

	Если ТипЗнч(ДокументыОснования) = Тип("Массив") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДляМассиваВводВОборот(МассивВидовДокумента);
		Если ТекстЗапроса = "" Тогда
			Возврат Неопределено;
		КонецЕсли;	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") Тогда
	//	ТекстЗапроса = ТекстЗапросаОприходованиеТоваров(); //Запрос для исходящего АПП
	//ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
	//	ТекстЗапроса = ТекстЗапросаВозвратТоваровОтКлиентаДляВводаВОборот(); //Для Уведомления о вводе в оборот
		
	//Розница + БК
	ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		ТекстЗапроса = ТекстЗапросаОприходованиеТоваров();
	ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		ТекстЗапроса = ТекстЗапросаВозвратТоваровОтКлиентаДляВводаВОборот();
	///////////////////	
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
		
	Возврат ТекстЗапроса;
	
КонецФункции

//Оприходование товаров является основанием для ввода Уведомления о вводе в оборот,
//при этом в ТЧ создаваемого документа переносится только номенклатура, относящаяся к маркируемой (по особенностям учета)
//
Функция ТекстЗапросаОприходованиеТоваров(ПервыйЗапрос = Истина)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОприходованиеИзлишковТоваров.Организация КАК Организация,
	|	ОприходованиеИзлишковТоваров.Организация КАК Поставщик,
	|	ТаблицаТовары.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.НаправленияДокументовИСМПТК.Исходящий) КАК Направление,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|";
	ТекстЗапроса = ТекстЗапроса + ПолучитьКусокТекстаЗапросаВидПродукции()
				+ "ВЫБОР
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|				ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|				ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)
	|				ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|				ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность)
	|				ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПричиныПовторногоВводаКМВОборотИСМПТК.Излишки)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПричиныПовторногоВводаКМВОборотИСМПТК.ПустаяСсылка)
	|	КОНЕЦ КАК ПричинаВводаВОборот,
	|	ТаблицаТовары.Количество КАК КоличествоИсточник,
	|";
	ТекстЗапроса = ТекстЗапроса + ПолучитьКусокТекстаЗапросаОрагнизация()
				+ "ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ Организации.Наименование
	|	КОНЕЦ КАК ПоставщикНаименование
	|ПОМЕСТИТЬ вт_ДанныеДокумента_Предварительная
	|ИЗ
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//|	Документ.ОприходованиеИзлишковТоваров.Товары КАК ТаблицаТовары
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОприходованиеИзлишковТоваров КАК ОприходованиеИзлишковТоваров
	
	//Розница + БК
	|	Документ.ОприходованиеТоваров.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров КАК ОприходованиеИзлишковТоваров
	///////////////////
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|			ПО ОприходованиеИзлишковТоваров.Организация = Организации.Ссылка
	|		ПО ТаблицаТовары.Ссылка = ОприходованиеИзлишковТоваров.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ОприходованиеИзлишковТоваров.Ссылка В(&МассивДокументов)
	|	И (СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента_Предварительная.Организация КАК Организация,
	|	вт_ДанныеДокумента_Предварительная.Поставщик КАК Поставщик,
	|	вт_ДанныеДокумента_Предварительная.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДокумента_Предварительная.Направление КАК Направление,
	|	вт_ДанныеДокумента_Предварительная.Номенклатура КАК Номенклатура,
	|	вт_ДанныеДокумента_Предварительная.ВидПродукцииИС КАК ВидПродукцииИС,
	|	вт_ДанныеДокумента_Предварительная.ПричинаВводаВОборот КАК ПричинаВводаВОборот,
	|	вт_ДанныеДокумента_Предварительная.ЕдиницаИзмеренияБазовая КАК ЕдиницаИзмеренияБазовая,
	|	СУММА(вт_ДанныеДокумента_Предварительная.КоличествоИсточник) КАК КоличествоИсточник,
	|	вт_ДанныеДокумента_Предварительная.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента_Предварительная.ПоставщикНаименование КАК ПоставщикНаименование
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	вт_ДанныеДокумента_Предварительная КАК вт_ДанныеДокумента_Предварительная
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ДанныеДокумента_Предварительная.ПоставщикНаименование,
	|	вт_ДанныеДокумента_Предварительная.ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента_Предварительная.ЕдиницаИзмеренияБазовая,
	|	вт_ДанныеДокумента_Предварительная.ПричинаВводаВОборот,
	|	вт_ДанныеДокумента_Предварительная.Организация,
	|	вт_ДанныеДокумента_Предварительная.Поставщик,
	|	вт_ДанныеДокумента_Предварительная.ДокументОснование,
	|	вт_ДанныеДокумента_Предварительная.Направление,
	|	вт_ДанныеДокумента_Предварительная.Номенклатура,
	|	вт_ДанныеДокумента_Предварительная.ВидПродукцииИС";                   

	Если Не ПервыйЗапрос Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ вт_ДанныеДокумента", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ТекстЗапросаВозвратТоваровОтКлиентаДляВводаВОборот(ПервыйЗапрос = Истина)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратТоваровОтКлиента.Организация КАК Организация,
	|	ВозвратТоваровОтКлиента.Организация КАК Поставщик,
	|	ТаблицаТовары.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.НаправленияДокументовИСМПТК.Исходящий) КАК Направление,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|";
	ТекстЗапроса = ТекстЗапроса + ПолучитьКусокТекстаЗапросаВидПродукции()
				+ "ВЫБОР
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|				ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|				ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)
	|				ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|				ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность)
	|				ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПричиныПовторногоВводаКМВОборотИСМПТК.Излишки)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПричиныПовторногоВводаКМВОборотИСМПТК.ПустаяСсылка)
	|	КОНЕЦ КАК ПричинаВводаВОборот,
	|	ТаблицаТовары.Количество КАК КоличествоИсточник,
	|";
	ТекстЗапроса = ТекстЗапроса + ПолучитьКусокТекстаЗапросаОрагнизация()
				+ "ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ Организации.Наименование
	|	КОНЕЦ КАК ПоставщикНаименование
	|ПОМЕСТИТЬ вт_ДанныеДокумента_Предварительная
	|ИЗ
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//|	Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаТовары
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	
	//Розница + БК
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтКлиента
	///////////////////
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|			ПО ВозвратТоваровОтКлиента.Организация = Организации.Ссылка
	|		ПО ТаблицаТовары.Ссылка = ВозвратТоваровОтКлиента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ВозвратТоваровОтКлиента.Ссылка В(&МассивДокументов)
	|	И (СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента_Предварительная.Организация КАК Организация,
	|	вт_ДанныеДокумента_Предварительная.Поставщик КАК Поставщик,
	|	вт_ДанныеДокумента_Предварительная.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДокумента_Предварительная.Направление КАК Направление,
	|	вт_ДанныеДокумента_Предварительная.Номенклатура КАК Номенклатура,
	|	вт_ДанныеДокумента_Предварительная.ВидПродукцииИС КАК ВидПродукцииИС,
	|	вт_ДанныеДокумента_Предварительная.ПричинаВводаВОборот КАК ПричинаВводаВОборот,
	|	вт_ДанныеДокумента_Предварительная.ЕдиницаИзмеренияБазовая КАК ЕдиницаИзмеренияБазовая,
	|	СУММА(вт_ДанныеДокумента_Предварительная.КоличествоИсточник) КАК КоличествоИсточник,
	|	вт_ДанныеДокумента_Предварительная.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента_Предварительная.ПоставщикНаименование КАК ПоставщикНаименование
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	вт_ДанныеДокумента_Предварительная КАК вт_ДанныеДокумента_Предварительная
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ДанныеДокумента_Предварительная.ПоставщикНаименование,
	|	вт_ДанныеДокумента_Предварительная.ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента_Предварительная.ЕдиницаИзмеренияБазовая,
	|	вт_ДанныеДокумента_Предварительная.ПричинаВводаВОборот,
	|	вт_ДанныеДокумента_Предварительная.Организация,
	|	вт_ДанныеДокумента_Предварительная.Поставщик,
	|	вт_ДанныеДокумента_Предварительная.ДокументОснование,
	|	вт_ДанныеДокумента_Предварительная.Направление,
	|	вт_ДанныеДокумента_Предварительная.Номенклатура,
	|	вт_ДанныеДокумента_Предварительная.ВидПродукцииИС";                   

	Если Не ПервыйЗапрос Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ вт_ДанныеДокумента", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ДополнитьТекстЗапросЗаполненияВводВОборот(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.Организация,
	|	вт_ДанныеДокумента.Поставщик,
	|	вт_ДанныеДокумента.ДокументОснование,
	|	вт_ДанныеДокумента.Направление,
	|	вт_ДанныеДокумента.ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента.ПоставщикНаименование,
	|	вт_ДанныеДокумента.ВидПродукцииИС,
	|	вт_ДанныеДокумента.Номенклатура,
	|	вт_ДанныеДокумента.КоличествоИсточник КАК КоличествоИсточник,
	|	вт_ДанныеДокумента.ЕдиницаИзмеренияБазовая КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ вт_ДанныеДляЗаполнения
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|ГДЕ
	|	вт_ДанныеДокумента.КоличествоИсточник > 0
	|";

	Возврат ТекстЗапроса + ИнтеграцияИСМПТК.ПолучитьТекстПакетовЗапросаДляЗаполненияВводВОборот();
	
КонецФункции

Функция ПолучитьДанныеДокументаОснованияВводВОборотНаСервере(ДокументОснование) Экспорт
	
	ТекстЗапроса = "";
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") Тогда
	//	ТекстЗапроса = ТекстЗапросаОприходованиеТоваров(ТекстЗапроса = "");
	//ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
	//	ТекстЗапроса = ТекстЗапросаВозвратТоваровОтКлиентаДляВводаВОборот(ТекстЗапроса = "");
	//КонецЕсли;
	
	//Розница + БК
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		ТекстЗапроса = ТекстЗапросаОприходованиеТоваров(ТекстЗапроса = "");
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		ТекстЗапроса = ТекстЗапросаВозвратТоваровОтКлиентаДляВводаВОборот(ТекстЗапроса = "");
	КонецЕсли;
	///////////////////
		
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";

	ТекстЗапроса = ДополнитьТекстЗапросЗаполненияВводВОборот(ТекстЗапроса);
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументов", ДокументОснование);
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицаРеквизиты = РезультатЗапроса[КоличествоПакетов - 2].Выгрузить();
	Реквизиты = Новый Структура();
	
	Для Каждого Строка Из ТаблицаРеквизиты Цикл
		
		Реквизиты.Вставить("Организация", 		Строка.Организация);
		Реквизиты.Вставить("Поставщик", 		Строка.Поставщик);
		Реквизиты.Вставить("ДокументОснование", Строка.ДокументОснование);
		Реквизиты.Вставить("Направление",  	 	Строка.Направление);
		Реквизиты.Вставить("ПоставщикИдентификационныйНомер", Строка.ПоставщикИдентификационныйНомер);
		Реквизиты.Вставить("ПоставщикНаименование", 		  Строка.ПоставщикНаименование);
		
	КонецЦикла;
	
	ТаблицаТовары = РезультатЗапроса[КоличествоПакетов - 1].Выгрузить(); 
	Товары = Новый Массив();
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		
		СтрокаТовары = Новый Структура();
		СтрокаТовары.Вставить("Номенклатура", 	    Строка.Номенклатура);
		СтрокаТовары.Вставить("КоличествоИсточник", Строка.КоличествоИсточник);
		СтрокаТовары.Вставить("ЕдиницаИзмерения",   Строка.ЕдиницаИзмерения);
		СтрокаТовары.Вставить("ВидПродукцииИС",     Строка.ВидПродукцииИС);
		Товары.Добавить(СтрокаТовары);
		
	КонецЦикла;
	
	ДанныеДокументаОснования = Новый Структура();
	ДанныеДокументаОснования.Вставить("Реквизиты", Реквизиты);
	ДанныеДокументаОснования.Вставить("Товары",	   Товары);
	
	Возврат ДанныеДокументаОснования;

КонецФункции

#КонецОбласти

#Область УведомлениеОВыводеИзОборота

Функция ПолучитьТекстЗапросаДляМассиваВыводИзОборота(МассивВидовДокумента)
	
	ТекстЗапроса = "";
	Для Каждого ЭлементМассива Из МассивВидовДокумента Цикл
		
		ТекстЗапросаДокумента = "";
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА, УТ
		//Если ЭлементМассива = Тип("ДокументСсылка.СписаниеНедостачТоваров") Тогда
		//	//Основной вариант создания
		//	ТекстЗапросаДокумента = ТекстЗапросаСписаниеТоваров(ТекстЗапроса = "");
		//ИначеЕсли ЭлементМассива = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда 
		//	//АПП входящий, подтвержденный
		//	ТекстЗапросаДокумента = ТекстЗапросаАППДляВИО(ТекстЗапроса = "");
		//ИначеЕсли ЭлементМассива = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		//	//Причина вывода из оборота = Интернет-торговля
		//	ТекстЗапросаДокумента = ТекстЗапросаРеализацияТоваровУслуг_УведОВыводе(ТекстЗапроса = "");
		//КонецЕсли;
		
		//Розница
		//Если ЭлементМассива = Тип("ДокументСсылка.СписаниеТоваров") Тогда
		//	//Основной вариант создания
		//	ТекстЗапросаДокумента = ТекстЗапросаСписаниеТоваров(ТекстЗапроса = "");
		//ИначеЕсли ЭлементМассива = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда 
		//	//АПП входящий, подтвержденный
		//	ТекстЗапросаДокумента = ТекстЗапросаАППДляВИО(ТекстЗапроса = "");
		//ИначеЕсли ЭлементМассива = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		//	//Причина вывода из оборота = Интернет-торговля
		//	ТекстЗапросаДокумента = ТекстЗапросаРеализацияТоваровУслуг_УведОВыводе(ТекстЗапроса = "");
		//КонецЕсли;
		
		//БК
		Если ЭлементМассива = Тип("ДокументСсылка.СписаниеТоваров") Тогда
			ТекстЗапросаДокумента = ТекстЗапросаСписаниеТоваров(ТекстЗапроса = "");
		ИначеЕсли ЭлементМассива = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
			ТекстЗапросаДокумента = ТекстЗапросаТребованиеНакладная(ТекстЗапроса = "");
		ИначеЕсли ЭлементМассива = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда 
			//АПП входящий, подтвержденный
			ТекстЗапросаДокумента = ТекстЗапросаАППДляВИО(ТекстЗапроса = "");
		ИначеЕсли ЭлементМассива = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			//Причина вывода из оборота = Интернет-торговля
			ТекстЗапросаДокумента = ТекстЗапросаРеализацияТоваровУслуг_УведОВыводе(ТекстЗапроса = "");
		КонецЕсли;
		///////////////////
								
		Если ТекстЗапроса <> "" И ТекстЗапросаДокумента <> "" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|"  
		КонецЕсли;	
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДокумента;
		
	КонецЦикла;	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПодготовитьТекстЗапросаДляЗаполненияВыводИзОборота(ПараметрыЗаполнения) Экспорт
	
	ДокументыОснования   = ПараметрыЗаполнения.МассивДокументов;
	МассивВидовДокумента = ПараметрыЗаполнения.МассивВидовДокумента;
	
	Если ТипЗнч(ДокументыОснования) = Тип("Массив") Тогда
		
		ТекстЗапроса = ПолучитьТекстЗапросаДляМассиваВыводИзОборота(МассивВидовДокумента);
		Если ТекстЗапроса = "" Тогда
			Возврат Неопределено;
		КонецЕсли;	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	#Область ЕРП_КА_УТ
	//ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.СписаниеНедостачТоваров") Тогда
	//	//Основной вариант создания
	//	ТекстЗапроса = ТекстЗапросаСписаниеТоваров();
	//ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда 
	//	//АПП входящий, подтвержденный
	//	ТекстЗапроса = ТекстЗапросаАППДляВИО();
	//ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
	//	//Причина вывода из оборота = Интернет-торговля
	//	ТекстЗапроса = ТекстЗапросаРеализацияТоваровУслуг_УведОВыводе();
	#КонецОбласти
	
	//Розница
	#Область Розница
	//ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.СписаниеТоваров") Тогда
	//	ТекстЗапроса = ТекстЗапросаСписаниеТоваров();
	//ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда 
	//	ТекстЗапроса = ТекстЗапросаАППДляВИО();
	//ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
	//	//Причина вывода из оборота = Интернет-торговля
	//	ТекстЗапроса = ТекстЗапросаРеализацияТоваровУслуг_УведОВыводе();
	#КонецОбласти
	
	//БК
	#Область БК
	ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.СписаниеТоваров") Тогда
		ТекстЗапроса = ТекстЗапросаСписаниеТоваров();
	ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		ТекстЗапроса = ТекстЗапросаТребованиеНакладная();
	ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда 
		ТекстЗапроса = ТекстЗапросаАППДляВИО();
	ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		//Причина вывода из оборота = Интернет-торговля
		ТекстЗапроса = ТекстЗапросаРеализацияТоваровУслуг_УведОВыводе();
	#КонецОбласти
	///////////////////
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
		
	Возврат ТекстЗапроса;
	
КонецФункции

//Списание товаров является основанием для ввода Уведомления о выводе из оборота,
//при этом в ТЧ создаваемого документа переносится только номенклатура, относящаяся к маркируемой (по особенностям учета)
//
Функция ТекстЗапросаСписаниеТоваров(ПервыйЗапрос = Истина)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписаниеНедостачТоваров.Организация КАК Организация,
	|	СписаниеНедостачТоваров.Организация КАК Поставщик,
	|	ТаблицаТовары.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.НаправленияДокументовИСМПТК.Исходящий) КАК Направление,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|";
	ТекстЗапроса = ТекстЗапроса + ПолучитьКусокТекстаЗапросаВидПродукции()
				+ "ТаблицаТовары.Количество КАК КоличествоИсточник,
	|";
	ТекстЗапроса = ТекстЗапроса + ПолучитьКусокТекстаЗапросаОрагнизация()
				+ "ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ Организации.Наименование
	|	КОНЕЦ КАК ПоставщикНаименование,
	|	Неопределено КАК ПричинаВыводаИзОборота
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//|	Документ.СписаниеНедостачТоваров.Товары КАК ТаблицаТовары
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеНедостачТоваров КАК СписаниеНедостачТоваров
	
	//Розница + БК
	|	Документ.СписаниеТоваров.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеТоваров КАК СписаниеНедостачТоваров
	///////////////////
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|			ПО СписаниеНедостачТоваров.Организация = Организации.Ссылка
	|		ПО ТаблицаТовары.Ссылка = СписаниеНедостачТоваров.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СписаниеНедостачТоваров.Ссылка В(&МассивДокументов)
	|	И (СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты))";               
				
	Если Не ПервыйЗапрос Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ вт_ДанныеДокумента", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

//Входящий Акт приема/передачи может выступать основанием для ввода Уведомления о выводе из оборота,
//если требуется сразу списать всю полученную партию товаров (например, для последующего использования этих товаров на собсвенные нужды предприятия).
//При вводе на основании АПП ТЧ в уведомлении полностью заполняется по данным исходного документа.
Функция ТекстЗапросаАППДляВИО(ПервыйЗапрос = Истина)
		
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктПриемаПередачиИСМПТ.Организация КАК Организация,
	|	АктПриемаПередачиИСМПТ.Организация КАК Поставщик,
	|	АктПриемаПередачиИСМПТ.ПоставщикНаименование КАК ПолучательНаименование,
	|	АктПриемаПередачиИСМПТ.ПоставщикИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	АктПриемаПередачиИСМПТ.Контрагент КАК Контрагент,
	|	АктПриемаПередачиИСМПТ.Контрагент КАК Получатель,
	|	АктПриемаПередачиИСМПТ.ПолучательНаименование КАК ПоставщикНаименование,
	|	АктПриемаПередачиИСМПТ.ПолучательИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	АктПриемаПередачиИСМПТ.ВидОперации КАК ВидОперации,
	|	АктПриемаПередачиИСМПТ.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.НаправленияДокументовИСМПТК.Исходящий) КАК Направление,
	|	АктПриемаПередачиИСМПТКМарки.КодМаркировки КАК КодМаркировки,
	|	АктПриемаПередачиИСМПТКМарки.КодИдентификации КАК КодИдентификации,
	|	АктПриемаПередачиИСМПТКМарки.ВидПродукцииИС КАК ВидПродукцииИС,
	|	АктПриемаПередачиИСМПТКМарки.GTIN КАК GTIN,
	|	АктПриемаПередачиИСМПТКМарки.ВидУпаковки КАК ВидУпаковки,
	|	АктПриемаПередачиИСМПТКМарки.Номенклатура КАК Номенклатура,
	|	АктПриемаПередачиИСМПТКМарки.EAN КАК EAN,
	|	АктПриемаПередачиИСМПТКМарки.КоличествоИсточник КАК КоличествоИсточник,
	|	АктПриемаПередачиИСМПТКМарки.Количество КАК Количество,
	|	Неопределено КАК ПричинаВыводаИзОборота
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	Документ.АктПриемаПередачиИСМПТК.Марки КАК АктПриемаПередачиИСМПТКМарки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктПриемаПередачиИСМПТК КАК АктПриемаПередачиИСМПТ
	|		ПО АктПриемаПередачиИСМПТКМарки.Ссылка = АктПриемаПередачиИСМПТ.Ссылка
	|ГДЕ
	|	АктПриемаПередачиИСМПТ.Ссылка В(&МассивДокументов)";
	
	Если Не ПервыйЗапрос Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ вт_ДанныеДокумента", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ДополнитьТекстЗапросЗаполненияВыводИзОборота(ТекстЗапроса, Основание = Неопределено) Экспорт
	
	Если Основание = Неопределено Тогда
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.Организация,
	|	вт_ДанныеДокумента.Поставщик,
	|	вт_ДанныеДокумента.ДокументОснование,
	|	вт_ДанныеДокумента.Направление,
	|	вт_ДанныеДокумента.ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента.ПоставщикНаименование,
	|	вт_ДанныеДокумента.ВидПродукцииИС,
	|	вт_ДанныеДокумента.Номенклатура,
	|	вт_ДанныеДокумента.КоличествоИсточник КАК КоличествоИсточник,
	|	вт_ДанныеДокумента.ЕдиницаИзмеренияБазовая КАК ЕдиницаИзмерения,
	|	вт_ДанныеДокумента.ПричинаВыводаИзОборота КАК ПричинаВыводаИзОборота
	|ПОМЕСТИТЬ вт_ДанныеДляЗаполнения
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|ГДЕ
	|	вт_ДанныеДокумента.КоличествоИсточник > 0
	|";
	
	Возврат ТекстЗапроса + ИнтеграцияИСМПТК.ПолучитьТекстПакетовЗапросаДляЗаполненияВыводИзОборота(Ложь);
	
КонецФункции

Функция ДополнитьТекстЗапросЗаполненияВИО_ПоАПП_СКодамиМаркировки(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.Организация,
	|	вт_ДанныеДокумента.Контрагент,
	|	вт_ДанныеДокумента.Поставщик,
	|	вт_ДанныеДокумента.ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента.ПоставщикНаименование,
	|	вт_ДанныеДокумента.Получатель,
	|	вт_ДанныеДокумента.ПолучательИдентификационныйНомер,
	|	вт_ДанныеДокумента.ПолучательНаименование,
	|	вт_ДанныеДокумента.ДокументОснование,
	|	вт_ДанныеДокумента.ВидОперации,
	|	вт_ДанныеДокумента.ВидПродукцииИС,	
	|	вт_ДанныеДокумента.Направление,
	|	вт_ДанныеДокумента.КодМаркировки,
	|	вт_ДанныеДокумента.КодИдентификации,
	|	вт_ДанныеДокумента.ВидПродукцииИС,
	|	вт_ДанныеДокумента.GTIN,
	|	вт_ДанныеДокумента.ВидУпаковки,
	|	вт_ДанныеДокумента.Номенклатура,
	|	вт_ДанныеДокумента.EAN КАК EAN,
	|	вт_ДанныеДокумента.КоличествоИсточник,
	|	вт_ДанныеДокумента.Количество,
	|	вт_ДанныеДокумента.ПричинаВыводаИзОборота КАК ПричинаВыводаИзОборота
	|ПОМЕСТИТЬ вт_ДанныеДляЗаполнения
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|ГДЕ
	|	вт_ДанныеДокумента.Количество > 0
	|";

	Возврат ТекстЗапроса + ИнтеграцияИСМПТК.ПолучитьТекстПакетовЗапросаДляЗаполненияВыводИзОборота(Истина);
	
КонецФункции

Функция ПолучитьДанныеДокументаОснованияВыводИзОборотаНаСервере(ДокументОснование) Экспорт
	
	ТекстЗапроса = "";
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
	//	ТекстЗапроса = ТекстЗапросаРеализацияТоваровУслуг_УведОВыводе(ТекстЗапроса = "");
	//ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СписаниеНедостачТоваров") Тогда
	//	ТекстЗапроса = ТекстЗапросаСписаниеТоваров(ТекстЗапроса = "");
	//КонецЕсли;
	
	//Розница
	//Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
	//	ТекстЗапроса = ТекстЗапросаРеализацияТоваровУслуг_УведОВыводе(ТекстЗапроса = "");
	//ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СписаниеТоваров") Тогда
	//	ТекстЗапроса = ТекстЗапросаСписаниеТоваров(ТекстЗапроса = "");
	//КонецЕсли;
	
	//БК
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СписаниеТоваров") Тогда
		ТекстЗапроса = ТекстЗапросаСписаниеТоваров(ТекстЗапроса = "");
	ИначеЕсли  ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		ТекстЗапроса = ТекстЗапросаТребованиеНакладная(ТекстЗапроса = "");
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ТекстЗапроса = ТекстЗапросаРеализацияТоваровУслуг_УведОВыводе(ТекстЗапроса = "");
	КонецЕсли;
	///////////////////
			
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";

	ТекстЗапроса = ДополнитьТекстЗапросЗаполненияВыводИзОборота(ТекстЗапроса, ДокументОснование);
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументов", ДокументОснование);
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицаРеквизиты = РезультатЗапроса[КоличествоПакетов - 2].Выгрузить();
	Реквизиты = Новый Структура();
	
	Для Каждого Строка Из ТаблицаРеквизиты Цикл
		
		Реквизиты.Вставить("Организация", 		Строка.Организация);
		Реквизиты.Вставить("Поставщик", 		Строка.Поставщик);
		Реквизиты.Вставить("ДокументОснование", Строка.ДокументОснование);
		Реквизиты.Вставить("Направление",  	 	Строка.Направление);
		Реквизиты.Вставить("ПоставщикИдентификационныйНомер", Строка.ПоставщикИдентификационныйНомер);
		Реквизиты.Вставить("ПоставщикНаименование", 		  Строка.ПоставщикНаименование);
		Реквизиты.Вставить("ПричинаВыводаИзОборота", 		  Строка.ПричинаВыводаИзОборота);
				
	КонецЦикла;
	
	ТаблицаТовары = РезультатЗапроса[КоличествоПакетов - 1].Выгрузить(); 
	Товары = Новый Массив();
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		
		СтрокаТовары = Новый Структура();
		СтрокаТовары.Вставить("Номенклатура", 	    Строка.Номенклатура);
		СтрокаТовары.Вставить("КоличествоИсточник", Строка.КоличествоИсточник);
		СтрокаТовары.Вставить("ЕдиницаИзмерения",   Строка.ЕдиницаИзмерения);
		СтрокаТовары.Вставить("ВидПродукцииИС",     Строка.ВидПродукцииИС);
		Товары.Добавить(СтрокаТовары);
		
	КонецЦикла;
	
	ДанныеДокументаОснования = Новый Структура();
	ДанныеДокументаОснования.Вставить("Реквизиты", Реквизиты);
	ДанныеДокументаОснования.Вставить("Товары",	   Товары);
	
	Возврат ДанныеДокументаОснования;

КонецФункции

#КонецОбласти

#Область ВвозТоваров

Функция ДополнитьТекстЗапросЗаполненияВвозТоваровОбщий(ТекстЗапроса) Экспорт
	
	Если СтрНайти(ТекстЗапроса, "ВвозИзЕАЭС") <> 0 Тогда
		Возврат ДополнитьТекстЗапросЗаполненияВвозТоваровИзЕАЭС(ТекстЗапроса);
	Иначе
	    Возврат ДополнитьТекстЗапросЗаполненияВвозТоваровИзТретьихСтран(ТекстЗапроса);
	КонецЕсли;
	
КонецФункции

Функция ЭтоФормированиеУведомленияОВвозеИзТретьихСтран(ДокументОснование, ТипДокументаИСМПТ = Неопределено) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") 
	//	И ДокументОснование.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту") Тогда
		
	//Розница
	//Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваров") 
		//И ДокументОснование.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту") Тогда
		
	//БК
	Если ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		И ДокументОснование.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Импорт") Тогда
	///////////////////
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#Область ЕАЭС

#Область Ввоз

Функция ПолучитьТекстЗапросаДляМассиваВвозТоваровИзЕАЭС(МассивВидовДокумента)
	
	ТекстЗапроса = "";
	Для Каждого ЭлементМассива Из МассивВидовДокумента Цикл
		ТекстЗапросаДокумента = "";
		ТекстЗапросаДокумента = ТекстЗапросаВвозТоваровИзЕАЭС(ТекстЗапроса = "");
				
		Если ТекстЗапроса <> "" И ТекстЗапросаДокумента <> "" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|"  
		КонецЕсли;	
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДокумента;
		
	КонецЦикла;	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПодготовитьТекстЗапросаДляЗаполненияВвозТоваровИзЕАЭС(ПараметрыЗаполнения) Экспорт
	
	ДокументыОснования = ПараметрыЗаполнения.МассивДокументов;
	МассивВидовДокумента = ПараметрыЗаполнения.МассивВидовДокумента;
	
	Если ТипЗнч(ДокументыОснования) = Тип("Массив") Тогда
		
		ТекстЗапроса = ПолучитьТекстЗапросаДляМассиваВвозТоваровИзЕАЭС(МассивВидовДокумента);
		Если ТекстЗапроса = "" Тогда
			Возврат Неопределено;
		КонецЕсли;	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		
	//Розница
	//ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
	
	//БК
	ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
	///////////////////	
		ТекстЗапроса = ТекстЗапросаВвозТоваровИзЕАЭС();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
		
	Возврат ТекстЗапроса;
	
КонецФункции

//Основанием для ввода Уведомления о ввозе (ЕАЭС) является документ Реализация товаров и услуг,
//при этом из табличной части переносится только номенклатура, имеющая особенности учета "маркируемая".
//
Функция ТекстЗапросаВвозТоваровИзЕАЭС(ПервыйЗапрос = Истина)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриобретениеТоваровУслуг.Организация КАК Организация,
	|	ПриобретениеТоваровУслуг.Контрагент КАК Контрагент,
	|	ПриобретениеТоваровУслуг.Организация КАК Получатель,
	|	ПриобретениеТоваровУслуг.Контрагент КАК Поставщик,
	|	ТаблицаТовары.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.НаправленияДокументовИСМПТК.Исходящий) КАК Направление,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперацииИСМПТК.ВвозИзЕАЭС) КАК ВидОперации,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументаИСМПТК.Исходный) КАК ТипУведомления,
	|	ЛОЖЬ КАК ЭтоКорректировка,
	|	НЕОПРЕДЕЛЕНО КАК СвязанноеУведомление,
	|	НЕОПРЕДЕЛЕНО КАК РегистрационныйНомерСвязанногоУведомления,
	|";
	ТекстЗапроса = ТекстЗапроса + ПолучитьКусокТекстаЗапросаВидПродукции()
				+ "ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Количество КАК КоличествоИсточник,
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//|	Организации.ИНН КАК ПолучательИдентификационныйНомер,
	//|	Контрагенты.СтранаРегистрации КАК СтранаРегистрации,
	//|	Контрагенты.ИНН КАК ПоставщикИдентификационныйНомер,
	
	//БК
	|	Организации.ИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	Контрагенты.СтранаРезидентства КАК СтранаРегистрации,
	|	Контрагенты.ИдентификационныйКодЛичности КАК ПоставщикИдентификационныйНомер,
	///////////////////
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ Организации.Наименование
	|	КОНЕЦ КАК ПолучательНаименование,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ Контрагенты.Наименование
	|	КОНЕЦ КАК ПоставщикНаименование
	|ПОМЕСТИТЬ вт_ДанныеДокумента_Предварительная
	|ИЗ
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//|	Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаТовары
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	
	//Розница
	//|	Документ.ПоступлениеТоваров.Товары КАК ТаблицаТовары
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров КАК ПриобретениеТоваровУслуг
	
	//БК
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	///////////////////
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|			ПО ПриобретениеТоваровУслуг.Организация = Организации.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|			ПО ПриобретениеТоваровУслуг.Контрагент = Контрагенты.Ссылка
	|		ПО ТаблицаТовары.Ссылка = ПриобретениеТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ПриобретениеТоваровУслуг.Ссылка В(&МассивДокументов)
	|	И (СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента_Предварительная.Организация КАК Организация,
	|	вт_ДанныеДокумента_Предварительная.Контрагент КАК Контрагент,
	|	вт_ДанныеДокумента_Предварительная.Получатель КАК Получатель,
	|	вт_ДанныеДокумента_Предварительная.Поставщик КАК Поставщик,
	|	вт_ДанныеДокумента_Предварительная.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДокумента_Предварительная.Направление КАК Направление,
	|	вт_ДанныеДокумента_Предварительная.ВидОперации КАК ВидОперации,
	|	вт_ДанныеДокумента_Предварительная.ТипУведомления КАК ТипУведомления,
	|	вт_ДанныеДокумента_Предварительная.ЭтоКорректировка КАК ЭтоКорректировка,
	|	вт_ДанныеДокумента_Предварительная.СвязанноеУведомление КАК СвязанноеУведомление,
	|	вт_ДанныеДокумента_Предварительная.РегистрационныйНомерСвязанногоУведомления КАК РегистрационныйНомерСвязанногоУведомления,
	|	вт_ДанныеДокумента_Предварительная.ВидПродукцииИС КАК ВидПродукцииИС,
	|	вт_ДанныеДокумента_Предварительная.Номенклатура КАК Номенклатура,
	|	СУММА(вт_ДанныеДокумента_Предварительная.КоличествоИсточник) КАК КоличествоИсточник,
	|	вт_ДанныеДокумента_Предварительная.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	вт_ДанныеДокумента_Предварительная.ПолучательНаименование КАК ПолучательНаименование,
	|	вт_ДанныеДокумента_Предварительная.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента_Предварительная.ПоставщикНаименование КАК ПоставщикНаименование,
	|	вт_ДанныеДокумента_Предварительная.СтранаРегистрации КАК СтранаРегистрации
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	вт_ДанныеДокумента_Предварительная КАК вт_ДанныеДокумента_Предварительная
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ДанныеДокумента_Предварительная.Поставщик,
	|	вт_ДанныеДокумента_Предварительная.ЭтоКорректировка,
	|	вт_ДанныеДокумента_Предварительная.СвязанноеУведомление,
	|	вт_ДанныеДокумента_Предварительная.РегистрационныйНомерСвязанногоУведомления,
	|	вт_ДанныеДокумента_Предварительная.ВидПродукцииИС,
	|	вт_ДанныеДокумента_Предварительная.Номенклатура,
	|	вт_ДанныеДокумента_Предварительная.ВидОперации,
	|	вт_ДанныеДокумента_Предварительная.ТипУведомления,
	|	вт_ДанныеДокумента_Предварительная.Получатель,
	|	вт_ДанныеДокумента_Предварительная.Организация,
	|	вт_ДанныеДокумента_Предварительная.Контрагент,
	|	вт_ДанныеДокумента_Предварительная.ДокументОснование,
	|	вт_ДанныеДокумента_Предварительная.Направление,
	|	вт_ДанныеДокумента_Предварительная.ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента_Предварительная.ПолучательНаименование,
	|	вт_ДанныеДокумента_Предварительная.ПоставщикНаименование,
	|	вт_ДанныеДокумента_Предварительная.ПолучательИдентификационныйНомер,
	|	вт_ДанныеДокумента_Предварительная.СтранаРегистрации";              
	
	Если Не ПервыйЗапрос Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ вт_ДанныеДокумента", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ДополнитьТекстЗапросЗаполненияВвозТоваровИзЕАЭС(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.Организация,
	|	вт_ДанныеДокумента.Контрагент,
	|	вт_ДанныеДокумента.Поставщик,
	|	вт_ДанныеДокумента.Получатель,
	|	вт_ДанныеДокумента.ДокументОснование,
	|	вт_ДанныеДокумента.Направление,
	|	вт_ДанныеДокумента.ВидОперации,
	|	вт_ДанныеДокумента.ВидПродукцииИС,	
	|	вт_ДанныеДокумента.ТипУведомления,
	|	вт_ДанныеДокумента.ЭтоКорректировка,
	|	вт_ДанныеДокумента.СвязанноеУведомление,
	|	вт_ДанныеДокумента.РегистрационныйНомерСвязанногоУведомления,
	|	вт_ДанныеДокумента.ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента.ПоставщикНаименование,
	|	вт_ДанныеДокумента.ПолучательИдентификационныйНомер,
	|	вт_ДанныеДокумента.ПолучательНаименование,
	|	вт_ДанныеДокумента.Номенклатура,
	|	вт_ДанныеДокумента.СтранаРегистрации,
	|	вт_ДанныеДокумента.КоличествоИсточник КАК КоличествоИсточник
	|ПОМЕСТИТЬ вт_ДанныеДляЗаполнения
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|ГДЕ
	|	вт_ДанныеДокумента.КоличествоИсточник > 0
	|";

	Возврат ТекстЗапроса + ИнтеграцияИСМПТК.ПолучитьТекстПакетовЗапросаДляЗаполненияВвозТоваровИзЕАЭС();
	
КонецФункции

Функция ПолучитьДанныеДокументаОснованияВвозТоваровИзЕАЭСНаСервере(ДокументОснование) Экспорт
	
	ТекстЗапроса = "";
	ТекстЗапроса = ТекстЗапросаВвозТоваровИзЕАЭС(ТекстЗапроса = "");
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";

	ТекстЗапроса = ДополнитьТекстЗапросЗаполненияВвозТоваровИзЕАЭС(ТекстЗапроса);
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументов", ДокументОснование);
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицаРеквизиты = РезультатЗапроса[КоличествоПакетов - 2].Выгрузить();
	Реквизиты = Новый Структура();
	
	Для Каждого Строка Из ТаблицаРеквизиты Цикл
		Реквизиты.Вставить("Организация", 		Строка.Организация);
		Реквизиты.Вставить("Контрагент", 	    Строка.Контрагент);
		Реквизиты.Вставить("Поставщик", 		Строка.Поставщик);
		Реквизиты.Вставить("Получатель", 		Строка.Получатель);
		Реквизиты.Вставить("ДокументОснование", Строка.ДокументОснование);
		Реквизиты.Вставить("ВидОперации", 		Строка.ВидОперации);
		Реквизиты.Вставить("Направление",  	 	Строка.Направление);
		Реквизиты.Вставить("ТипУведомления", 	Строка.ТипУведомления);
		Реквизиты.Вставить("ЭтоКорректировка",  Строка.ЭтоКорректировка);
		Реквизиты.Вставить("ПоставщикИдентификационныйНомер",    Строка.ПоставщикИдентификационныйНомер);
		Реквизиты.Вставить("ПоставщикНаименование", 		     Строка.ПоставщикНаименование);
		Реквизиты.Вставить("ПолучательИдентификационныйНомер",   Строка.ПолучательИдентификационныйНомер);
		Реквизиты.Вставить("ПолучательНаименование", 			 Строка.ПолучательНаименование);
		Реквизиты.Вставить("СвязанноеУведомление", 			     Строка.СвязанноеУведомление);
		Реквизиты.Вставить("РегистрационныйНомерСвязанногоУведомления", Строка.РегистрационныйНомерСвязанногоУведомления);
		Реквизиты.Вставить("СтранаРегистрации", Строка.СтранаРегистрации);
		
	КонецЦикла;
	
	ТаблицаТовары = РезультатЗапроса[КоличествоПакетов - 1].Выгрузить(); 
	Товары = Новый Массив();
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		
		СтрокаТовары = Новый Структура();
		СтрокаТовары.Вставить("Номенклатура", 	    Строка.Номенклатура);
		СтрокаТовары.Вставить("КоличествоИсточник", Строка.КоличествоИсточник);
		СтрокаТовары.Вставить("ВидПродукцииИС",     Строка.ВидПродукцииИС);
		Товары.Добавить(СтрокаТовары);
		
	КонецЦикла;
	
	ДанныеДокументаОснования = Новый Структура();
	ДанныеДокументаОснования.Вставить("Реквизиты", Реквизиты);
	ДанныеДокументаОснования.Вставить("Товары",	   Товары);
	
	Возврат ДанныеДокументаОснования;

КонецФункции

#КонецОбласти

#Область Приемка

Функция ПолучитьТекстЗапросаДляМассиваПриемкаЕАЭС(МассивВидовДокумента)
	
	ТекстЗапроса = "";
	Для Каждого ЭлементМассива Из МассивВидовДокумента Цикл
		ТекстЗапросаДокумента = "";
		
		Если ЭлементМассива = Тип("ДокументСсылка.УведомлениеОбОтгрузкеЕАЭСИСМПТК") Тогда
			ТекстЗапросаДокумента = ТекстЗапросаПриемкаЕАЭС(ТекстЗапроса = "");
		КонецЕсли;
		
		Если ТекстЗапроса <> "" И ТекстЗапросаДокумента <> "" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|"  
		КонецЕсли;	
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДокумента;
		
	КонецЦикла;	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПодготовитьТекстЗапросаДляЗаполненияПриемкаЕАЭС(ПараметрыЗаполнения) Экспорт
	
	ДокументыОснования 	 = ПараметрыЗаполнения.МассивДокументов;
	МассивВидовДокумента = ПараметрыЗаполнения.МассивВидовДокумента;

	Если ТипЗнч(ДокументыОснования) = Тип("Массив") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДляМассиваПриемкаЕАЭС(МассивВидовДокумента);
		Если ТекстЗапроса = "" Тогда
			Возврат Неопределено;
		КонецЕсли;	
	
	ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.УведомлениеОбОтгрузкеЕАЭСИСМПТК") Тогда
		ТекстЗапроса = ТекстЗапросаПриемкаЕАЭС();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПриемкаЕАЭС(ПервыйЗапрос = Истина)
		
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументИСМПТ.Организация КАК Организация,
	|	ДокументИСМПТ.Организация КАК Получатель,
	|	ДокументИСМПТ.ПолучательНаименование КАК ПолучательНаименование,
	|	ДокументИСМПТ.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	ДокументИСМПТ.Контрагент КАК Контрагент,
	|	ДокументИСМПТ.Контрагент КАК Поставщик,
	|	ДокументИСМПТ.ПоставщикНаименование КАК ПоставщикНаименование,
	|	ДокументИСМПТ.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	ЗНАЧЕНИЕ(Перечисление.НаправленияДокументовИСМПТК.Исходящий) КАК Направление,
	|	ДокументИСМПТ.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
	|	ДокументИСМПТ.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента,
	|	ДокументИСМПТ.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ДокументИСМПТ.ДатаПриемки КАК ДатаПриемки,
	|	ДокументИСМПТ.СтранаОтправитель КАК СтранаОтправитель,
	|	ДокументИСМПТ.Идентификатор КАК ИдентификаторДокументаОтгрузки,
	|	ДокументИСМПТ.Ссылка КАК Ссылка,
	|	ТаблицаМарки.ВидУпаковки КАК ВидУпаковки,
	|	ТаблицаМарки.GTINВерхнегоУровня КАК GTINВерхнегоУровня,
	|	ТаблицаМарки.Номенклатура КАК Номенклатура,
	|	ТаблицаМарки.EAN КАК EAN,
	|	ТаблицаМарки.КодИдентификации КАК КодИдентификации,
	|	ТаблицаМарки.ВидПродукцииИС КАК ВидПродукцииИС
		
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеЕАЭСИСМПТК.Марки КАК ТаблицаМарки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОбОтгрузкеЕАЭСИСМПТК КАК ДокументИСМПТ
	|		ПО ТаблицаМарки.Ссылка = ДокументИСМПТ.Ссылка
	|ГДЕ
	|	ДокументИСМПТ.Ссылка В(&МассивДокументов)";
	
	Если Не ПервыйЗапрос Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ вт_ДанныеДокумента", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ДополнитьТекстЗапросЗаполненияПриемкаЕАЭС(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.Организация КАК Организация,
	|	вт_ДанныеДокумента.Организация КАК Получатель,
	|	вт_ДанныеДокумента.ПолучательНаименование КАК ПолучательНаименование,
	|	вт_ДанныеДокумента.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	вт_ДанныеДокумента.Контрагент КАК Контрагент,
	|	вт_ДанныеДокумента.Контрагент КАК Поставщик,
	|	вт_ДанныеДокумента.ПоставщикНаименование КАК ПоставщикНаименование,
	|	вт_ДанныеДокумента.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента.Направление,
	|	вт_ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	вт_ДанныеДокумента.ИдентификаторДокументаОтгрузки КАК ИдентификаторДокументаОтгрузки,
	|	вт_ДанныеДокумента.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
	|	вт_ДанныеДокумента.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента,
	|	вт_ДанныеДокумента.ДатаОтгрузки КАК ДатаОтгрузки,
	|	вт_ДанныеДокумента.ДатаПриемки КАК ДатаПриемки,
	|	вт_ДанныеДокумента.СтранаОтправитель КАК СтранаОтправитель,
	|	вт_ДанныеДокумента.ВидУпаковки КАК ВидУпаковки,
	|	вт_ДанныеДокумента.GTINВерхнегоУровня КАК GTINВерхнегоУровня,
	|	вт_ДанныеДокумента.Номенклатура КАК Номенклатура,
	|	вт_ДанныеДокумента.EAN КАК EAN,
	|	вт_ДанныеДокумента.КодИдентификации КАК КодИдентификации,
	|	вт_ДанныеДокумента.ВидПродукцииИС КАК ВидПродукцииИС
	|ПОМЕСТИТЬ вт_ДанныеДляЗаполнения
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|";

	Возврат ТекстЗапроса + ИнтеграцияИСМПТК.ПолучитьТекстПакетовЗапросаДляЗаполненияПриемкаЕАЭС();
	
КонецФункции

Функция ПолучитьДанныеДокументаОснованияПриемкаЕАЭСНаСервере(ДокументОснование) Экспорт
		
	ТекстЗапроса = "";
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.УведомлениеОбОтгрузкеЕАЭСИСМПТК") Тогда
		ТекстЗапроса = ТекстЗапросаПриемкаЕАЭС(ТекстЗапроса = "");
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";

	ТекстЗапроса = ДополнитьТекстЗапросЗаполненияПриемкаЕАЭС(ТекстЗапроса);
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументов", ДокументОснование);
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицаРеквизиты = РезультатЗапроса[КоличествоПакетов - 2].Выгрузить();
	Реквизиты = Новый Структура();
	
	Для Каждого Строка Из ТаблицаРеквизиты Цикл
		
		Реквизиты.Вставить("Организация", 		Строка.Организация);
		Реквизиты.Вставить("Контрагент", 	    Строка.Контрагент);
		Реквизиты.Вставить("Поставщик", 		Строка.Поставщик);
		Реквизиты.Вставить("Получатель", 		Строка.Получатель);
		Реквизиты.Вставить("ДокументОснование", Строка.ДокументОснование);
		Реквизиты.Вставить("ВидОперации", 		Строка.ВидОперации);
		Реквизиты.Вставить("Направление",  	 	Строка.Направление);
		Реквизиты.Вставить("ПоставщикИдентификационныйНомер",    Строка.ПоставщикИдентификационныйНомер);
		Реквизиты.Вставить("ПоставщикНаименование", 		     Строка.ПоставщикНаименование);
		Реквизиты.Вставить("ПолучательИдентификационныйНомер",   Строка.ПолучательИдентификационныйНомер);
		Реквизиты.Вставить("ПолучательНаименование", 			 Строка.ПолучательНаименование);
		Реквизиты.Вставить("СвязанныйАкт", 					  	 Строка.СвязанныйАкт);
		Реквизиты.Вставить("РегистрационныйНомерСвязанногоАкта", Строка.РегистрационныйНомерСвязанногоАкта);
	
	КонецЦикла;
	
	ТаблицаМарки = РезультатЗапроса[КоличествоПакетов - 1].Выгрузить(); 
	Марки = Новый Массив();
	
	Для Каждого Строка Из ТаблицаМарки Цикл
		
		СтрокаМарки = Новый Структура();
		СтрокаМарки.Вставить("Код", 	  		   Строка.Код);
		СтрокаМарки.Вставить("Количество", 		   Строка.Количество);
		СтрокаМарки.Вставить("ВидУпаковки", 	   Строка.ВидУпаковки);
		СтрокаМарки.Вставить("Номенклатура", 	   Строка.Номенклатура);
		СтрокаМарки.Вставить("КоличествоИсточник", Строка.КоличествоИсточник);
		СтрокаМарки.Вставить("EAN", 			   Строка.EAN);
		СтрокаМарки.Вставить("GTIN",       		   Строка.GTIN);
		СтрокаМарки.Вставить("GTINВерхнегоУровня", Строка.GTINВерхнегоУровня);
		СтрокаМарки.Вставить("СтатусСверкиКода",   Строка.СтатусСверкиКода);
		СтрокаМарки.Вставить("ВидПродукцииИС",     Строка.ВидПродукцииИС);
		Марки.Добавить(СтрокаМарки);
		
	КонецЦикла;
	
	ДанныеДокументаОснования = Новый Структура();
	ДанныеДокументаОснования.Вставить("Реквизиты", Реквизиты);
	ДанныеДокументаОснования.Вставить("Марки",	   Марки);
	
	Возврат ДанныеДокументаОснования;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ТретьиСтраны

Функция ПолучитьТекстЗапросаДляМассиваВвозТоваровИзТретьихСтран(МассивВидовДокумента)
	
	ТекстЗапроса = "";
	Для Каждого ЭлементМассива Из МассивВидовДокумента Цикл
		ТекстЗапросаДокумента = "";
		ТекстЗапросаДокумента = ТекстЗапросаВвозТоваровИзТретьихСтран(ТекстЗапроса = "");
				
		Если ТекстЗапроса <> "" И ТекстЗапросаДокумента <> "" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|"  
		КонецЕсли;	
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДокумента;
		
	КонецЦикла;	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПодготовитьТекстЗапросаДляЗаполненияВвозТоваровИзТретьихСтран(ПараметрыЗаполнения) Экспорт
	
	ДокументыОснования = ПараметрыЗаполнения.МассивДокументов;
	МассивВидовДокумента = ПараметрыЗаполнения.МассивВидовДокумента;
	
	Если ТипЗнч(ДокументыОснования) = Тип("Массив") Тогда
		
		ТекстЗапроса = ПолучитьТекстЗапросаДляМассиваВвозТоваровИзТретьихСтран(МассивВидовДокумента);
		Если ТекстЗапроса = "" Тогда
			Возврат Неопределено;
		КонецЕсли;	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		
	//Розница
	//ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
	
	//БК
	ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
	///////////////////	
		ТекстЗапроса = ТекстЗапросаВвозТоваровИзТретьихСтран();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
		
	Возврат ТекстЗапроса;
	
КонецФункции

//Основанием для ввода Уведомления о ввозе (Импорт) является документ Реализация товаров и услуг,
//при этом из табличной части переносится только номенклатура, имеющая особенности учета "маркируемая".
//
Функция ТекстЗапросаВвозТоваровИзТретьихСтран(ПервыйЗапрос = Истина)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриобретениеТоваровУслуг.Организация КАК Организация,
	|	ПриобретениеТоваровУслуг.Контрагент КАК Контрагент,
	|	ПриобретениеТоваровУслуг.Организация КАК Получатель,
	|	ПриобретениеТоваровУслуг.Контрагент КАК Поставщик,
	|	ТаблицаТовары.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.НаправленияДокументовИСМПТК.Исходящий) КАК Направление,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперацииИСМПТК.ВвозИзТретьихСтран) КАК ВидОперации,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументаИСМПТК.Исходный) КАК ТипУведомления,
	|	ЛОЖЬ КАК ЭтоКорректировка,
	|	НЕОПРЕДЕЛЕНО КАК СвязанноеУведомление,
	|	НЕОПРЕДЕЛЕНО КАК РегистрационныйНомерСвязанногоУведомления,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	СправочникНоменклатура.КодТНВЭД КАК ТНВЭД,
	|	НЕОПРЕДЕЛЕНО КАК СтранаПроизводства,
	|	НЕОПРЕДЕЛЕНО КАК НомерПозицииВДекларацииИлиЗаявлении,
	|";
	ТекстЗапроса = ТекстЗапроса + ПолучитьКусокТекстаЗапросаВидПродукции()
				+ "ТаблицаТовары.Количество КАК КоличествоИсточник,
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//|	Организации.ИНН КАК ПолучательИдентификационныйНомер,
	//|	Контрагенты.СтранаРегистрации КАК СтранаРегистрации,
	//|	Контрагенты.ИНН КАК ПоставщикИдентификационныйНомер,
	
	//БК
	|	Организации.ИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	Контрагенты.СтранаРезидентства КАК СтранаРегистрации,
	|	Контрагенты.ИдентификационныйКодЛичности КАК ПоставщикИдентификационныйНомер,
	///////////////////			
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ Организации.Наименование
	|	КОНЕЦ КАК ПолучательНаименование,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ Контрагенты.Наименование
	|	КОНЕЦ КАК ПоставщикНаименование
	|ПОМЕСТИТЬ вт_ДанныеДокумента_Предварительная
	|ИЗ
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//|	Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаТовары
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	
	//Розница
	//|	Документ.ПоступлениеТоваров.Товары КАК ТаблицаТовары
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров КАК ПриобретениеТоваровУслуг
	
	//БК
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	///////////////////
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|			ПО ПриобретениеТоваровУслуг.Организация = Организации.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|			ПО ПриобретениеТоваровУслуг.Контрагент = Контрагенты.Ссылка
	|		ПО ТаблицаТовары.Ссылка = ПриобретениеТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ПриобретениеТоваровУслуг.Ссылка В(&МассивДокументов)
	|	И (СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента_Предварительная.Организация КАК Организация,
	|	вт_ДанныеДокумента_Предварительная.Контрагент КАК Контрагент,
	|	вт_ДанныеДокумента_Предварительная.Получатель КАК Получатель,
	|	вт_ДанныеДокумента_Предварительная.Поставщик КАК Поставщик,
	|	вт_ДанныеДокумента_Предварительная.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДокумента_Предварительная.Направление КАК Направление,
	|	вт_ДанныеДокумента_Предварительная.ВидОперации КАК ВидОперации,
	|	вт_ДанныеДокумента_Предварительная.ТипУведомления КАК ТипУведомления,
	|	вт_ДанныеДокумента_Предварительная.ЭтоКорректировка КАК ЭтоКорректировка,
	|	вт_ДанныеДокумента_Предварительная.СвязанноеУведомление КАК СвязанноеУведомление,
	|	вт_ДанныеДокумента_Предварительная.РегистрационныйНомерСвязанногоУведомления КАК РегистрационныйНомерСвязанногоУведомления,
	|	вт_ДанныеДокумента_Предварительная.Номенклатура КАК Номенклатура,
	|	вт_ДанныеДокумента_Предварительная.ТНВЭД КАК ТНВЭД,
	|	вт_ДанныеДокумента_Предварительная.СтранаПроизводства КАК СтранаПроизводства,
	|	вт_ДанныеДокумента_Предварительная.НомерПозицииВДекларацииИлиЗаявлении КАК НомерПозицииВДекларацииИлиЗаявлении,
	|	вт_ДанныеДокумента_Предварительная.ВидПродукцииИС КАК ВидПродукцииИС,
	|	СУММА(вт_ДанныеДокумента_Предварительная.КоличествоИсточник) КАК КоличествоИсточник,
	|	вт_ДанныеДокумента_Предварительная.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	вт_ДанныеДокумента_Предварительная.ПолучательНаименование КАК ПолучательНаименование,
	|	вт_ДанныеДокумента_Предварительная.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента_Предварительная.ПоставщикНаименование КАК ПоставщикНаименование,
	|	вт_ДанныеДокумента_Предварительная.СтранаРегистрации КАК СтранаРегистрации
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	вт_ДанныеДокумента_Предварительная КАК вт_ДанныеДокумента_Предварительная
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ДанныеДокумента_Предварительная.ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента_Предварительная.ВидПродукцииИС,
	|	вт_ДанныеДокумента_Предварительная.НомерПозицииВДекларацииИлиЗаявлении,
	|	вт_ДанныеДокумента_Предварительная.ПолучательИдентификационныйНомер,
	|	вт_ДанныеДокумента_Предварительная.ПоставщикНаименование,
	|	вт_ДанныеДокумента_Предварительная.ПолучательНаименование,
	|	вт_ДанныеДокумента_Предварительная.СтранаПроизводства,
	|	вт_ДанныеДокумента_Предварительная.ТНВЭД,
	|	вт_ДанныеДокумента_Предварительная.Номенклатура,
	|	вт_ДанныеДокумента_Предварительная.ДокументОснование,
	|	вт_ДанныеДокумента_Предварительная.Поставщик,
	|	вт_ДанныеДокумента_Предварительная.Организация,
	|	вт_ДанныеДокумента_Предварительная.ЭтоКорректировка,
	|	вт_ДанныеДокумента_Предварительная.СвязанноеУведомление,
	|	вт_ДанныеДокумента_Предварительная.Направление,
	|	вт_ДанныеДокумента_Предварительная.ВидОперации,
	|	вт_ДанныеДокумента_Предварительная.ТипУведомления,
	|	вт_ДанныеДокумента_Предварительная.Контрагент,
	|	вт_ДанныеДокумента_Предварительная.РегистрационныйНомерСвязанногоУведомления,
	|	вт_ДанныеДокумента_Предварительная.Получатель,
	|	вт_ДанныеДокумента_Предварительная.СтранаРегистрации";             
	
	Если Не ПервыйЗапрос Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ вт_ДанныеДокумента", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ДополнитьТекстЗапросЗаполненияВвозТоваровИзТретьихСтран(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.Организация,
	|	вт_ДанныеДокумента.Контрагент,
	|	вт_ДанныеДокумента.Поставщик,
	|	вт_ДанныеДокумента.Получатель,
	|	вт_ДанныеДокумента.ДокументОснование,
	|	вт_ДанныеДокумента.Направление,
	|	вт_ДанныеДокумента.ВидОперации,
	|	вт_ДанныеДокумента.ВидПродукцииИС,	
	|	вт_ДанныеДокумента.ТипУведомления,
	|	вт_ДанныеДокумента.ЭтоКорректировка,
	|	вт_ДанныеДокумента.СвязанноеУведомление,
	|	вт_ДанныеДокумента.РегистрационныйНомерСвязанногоУведомления,
	|	вт_ДанныеДокумента.ПоставщикИдентификационныйНомер,
	|	вт_ДанныеДокумента.ПоставщикНаименование,
	|	вт_ДанныеДокумента.ПолучательИдентификационныйНомер,
	|	вт_ДанныеДокумента.ПолучательНаименование,
	|	вт_ДанныеДокумента.Номенклатура,
	|	вт_ДанныеДокумента.КоличествоИсточник КАК КоличествоИсточник,
	|	вт_ДанныеДокумента.ТНВЭД,
	|	вт_ДанныеДокумента.СтранаПроизводства КАК СтранаПроизводства,
	|	вт_ДанныеДокумента.НомерПозицииВДекларацииИлиЗаявлении КАК НомерПозицииВДекларацииИлиЗаявлении
	|ПОМЕСТИТЬ вт_ДанныеДляЗаполнения
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|ГДЕ
	|	вт_ДанныеДокумента.КоличествоИсточник > 0
	|";

	Возврат ТекстЗапроса + ИнтеграцияИСМПТК.ПолучитьТекстПакетовЗапросаДляЗаполненияВвозТоваровИзТретьихСтран();
	
КонецФункции

Функция ПолучитьДанныеДокументаОснованияВвозТоваровИзТретьихСтранНаСервере(ДокументОснование) Экспорт
	
	ТекстЗапроса = "";
	ТекстЗапроса = ТекстЗапросаВвозТоваровИзТретьихСтран(ТекстЗапроса = "");
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";

	ТекстЗапроса = ДополнитьТекстЗапросЗаполненияВвозТоваровИзТретьихСтран(ТекстЗапроса);
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументов", ДокументОснование);
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицаРеквизиты = РезультатЗапроса[КоличествоПакетов - 2].Выгрузить();
	Реквизиты = Новый Структура();
	
	Для Каждого Строка Из ТаблицаРеквизиты Цикл
		Реквизиты.Вставить("Организация", 		Строка.Организация);
		Реквизиты.Вставить("Контрагент", 	    Строка.Контрагент);
		Реквизиты.Вставить("Поставщик", 		Строка.Поставщик);
		Реквизиты.Вставить("Получатель", 		Строка.Получатель);
		Реквизиты.Вставить("ДокументОснование", Строка.ДокументОснование);
		Реквизиты.Вставить("ВидОперации", 		Строка.ВидОперации);
		Реквизиты.Вставить("Направление",  	 	Строка.Направление);
		Реквизиты.Вставить("ТипУведомления", 	Строка.ТипУведомления);
		Реквизиты.Вставить("ЭтоКорректировка",  Строка.ЭтоКорректировка);
		Реквизиты.Вставить("ПоставщикИдентификационныйНомер",    Строка.ПоставщикИдентификационныйНомер);
		Реквизиты.Вставить("ПоставщикНаименование", 		     Строка.ПоставщикНаименование);
		Реквизиты.Вставить("ПолучательИдентификационныйНомер",   Строка.ПолучательИдентификационныйНомер);
		Реквизиты.Вставить("ПолучательНаименование", 			 Строка.ПолучательНаименование);
		Реквизиты.Вставить("СвязанноеУведомление", 			     Строка.СвязанноеУведомление);
		Реквизиты.Вставить("РегистрационныйНомерСвязанногоУведомления", Строка.РегистрационныйНомерСвязанногоУведомления);
		
	КонецЦикла;
	
	ТаблицаТовары = РезультатЗапроса[КоличествоПакетов - 1].Выгрузить(); 
	Товары = Новый Массив();
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		
		СтрокаТовары = Новый Структура();
		СтрокаТовары.Вставить("Номенклатура", 	    Строка.Номенклатура);
		СтрокаТовары.Вставить("КоличествоИсточник", Строка.КоличествоИсточник);
		СтрокаТовары.Вставить("ТНВЭД",				Строка.ТНВЭД);
		СтрокаТовары.Вставить("ВидПродукцииИС",		Строка.ВидПродукцииИС);
		Товары.Добавить(СтрокаТовары);
		
	КонецЦикла;
	
	ДанныеДокументаОснования = Новый Структура();
	ДанныеДокументаОснования.Вставить("Реквизиты", Реквизиты);
	ДанныеДокументаОснования.Вставить("Товары",	   Товары);
	
	Возврат ДанныеДокументаОснования;

КонецФункции

#КонецОбласти

Функция ПолучитьКусокТекстаЗапросаВидПродукции()
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница + БК
	Текст = "ВЫБОР
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Табачная)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Обувная)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Алкогольная)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность)
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка)
	|	КОНЕЦ КАК ВидПродукцииИС,
	|";
	///////////////////
	
	Возврат Текст;
	
КонецФункции

//Данные по ИИН организации и базовая единица номенклатуры
//
Функция ПолучитьКусокТекстаЗапросаОрагнизация()
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//Текст = "СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияБазовая,
	//|	Организации.ИНН КАК ПоставщикИдентификационныйНомер,
	//|";
	
	//БК
	Текст = "СправочникНоменклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмеренияБазовая,
	|	Организации.ИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|";
	///////////////////
	
	Возврат Текст;
	
КонецФункции

Функция ПолучитьКусокТекстаЗапросаПоШтрихкодамНоменклатуры()
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//Текст = "ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	//		|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка,
	//		|";
	
	//БК
	Текст = """"" КАК Характеристика,
			  |	  ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка) КАК Упаковка,
			  |";
	///////////////////
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + БК
	Текст = Текст + "ЕСТЬNULL(ШтрихкодыНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура
					|";
	
	//Розница
	//Текст = Текст +	"ЕСТЬNULL(ШтрихкодыНоменклатуры.Владелец, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура
	//				|";
	///////////////////
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область ЗаказКодов

Функция ПолучитьТекстЗапросаДляМассиваЗаказКодов(МассивВидовДокумента)
	
	ТекстЗапроса = "";
	Для Каждого ЭлементМассива Из МассивВидовДокумента Цикл
		
		ТекстЗапросаДокумента = "";
		
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА + Розница
		//Если ЭлементМассива = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		//	ТекстЗапросаДокумента = ТекстЗапросаЗаказПоставщику(ТекстЗапроса = "");
		//КонецЕсли;
		
		//УТ
		//Если ЭлементМассива = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		//	ТекстЗапросаДокумента = ТекстЗапросаЗаказПоставщику(ТекстЗапроса = "");
		//ИначеЕсли ЭлементМассива = Тип("ДокументСсылка.ПрочееОприходованиеТоваров") Тогда
		//	ТекстЗапросаДокумента = ТекстЗапросаПрочееОприходованиеТоваров(ТекстЗапроса = "");
		//КонецЕсли;
		
		//БК
		//
		///////////////////
				
		Если ТекстЗапроса <> "" И ТекстЗапросаДокумента <> "" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|"  
		КонецЕсли;	
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДокумента;
		
	КонецЦикла;	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПодготовитьТекстЗапросаДляЗаполненияЗаказКодов(ПараметрыЗаполнения) Экспорт
	
	ДокументыОснования 	 = ПараметрыЗаполнения.МассивДокументов;
	МассивВидовДокумента = ПараметрыЗаполнения.МассивВидовДокумента;
		
	Если ТипЗнч(ДокументыОснования) = Тип("Массив") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДляМассиваЗаказКодов(МассивВидовДокумента);
		Если ТекстЗапроса = "" Тогда
			Возврат Неопределено;
		КонецЕсли;	   
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА + Розница + УТ
	//ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
	//	ТекстЗапроса = ТекстЗапросаЗаказПоставщику();
		
	//УТ
	//ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.ПрочееОприходованиеТоваров") Тогда
	//	//Только для ВО = Поступление из производства
	//	ТекстЗапроса = ТекстЗапросаПрочееОприходованиеТоваров();
	
	//БК
	//
	///////////////////	
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
		
	Возврат ТекстЗапроса;
	
КонецФункции

//ПЕРЕОПРЕДЕЛЕНИЕ//
//ЕРП, КА, УТ, розница
#Область ЕРП_КА_УТ__Розница
//Для УТ, КА, ЕРП, Розницы. ЗаказПоставщику является основанием для ввода документа ЗаказКодовМаркировкиСУЗИСМПТК,
//применяется только для ТГ Молочная продукция, Обувная продукция, Лекарственные препараты
//
Функция ТекстЗапросаЗаказПоставщику(ПервыйЗапрос = Истина)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПоставщику.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Обувная)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты)
	|							ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты)
	|						ИНАЧЕ ВЫБОР
	|								КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|									ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Табачная)
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ВидПродукции,
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	|	ЗаказПоставщику.Менеджер КАК Ответственный,
	
	//Розница
	//|	ЗаказПоставщику.Ответственный КАК Ответственный,
	///////////////////
	|	ТаблицаТовары.Ссылка КАК ДокументОснование,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТовары.Количество КАК Количество,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияБазовая,
	|	ЗаказПоставщику.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК GTIN
	|ПОМЕСТИТЬ вт_ДанныеДокумента_Предварительная
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|		ПО ТаблицаТовары.Ссылка = ЗаказПоставщику.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ТаблицаТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	
	//Розница
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
	//|		ПО ТаблицаТовары.Номенклатура = ШтрихкодыНоменклатуры.Владелец
	///////////////////
	|			И ТаблицаТовары.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|			И ТаблицаТовары.Упаковка = ШтрихкодыНоменклатуры.Упаковка
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&МассивДокументов)
	|	И (СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента_Предварительная.Организация КАК Организация,
	|	вт_ДанныеДокумента_Предварительная.ВидПродукции КАК ВидПродукции,
	|	вт_ДанныеДокумента_Предварительная.Ответственный КАК Ответственный,
	|	вт_ДанныеДокумента_Предварительная.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДокумента_Предварительная.Номенклатура КАК Номенклатура,
	|	вт_ДанныеДокумента_Предварительная.Характеристика КАК Характеристика,
	|	вт_ДанныеДокумента_Предварительная.Упаковка КАК Упаковка,
	|	СУММА(вт_ДанныеДокумента_Предварительная.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(вт_ДанныеДокумента_Предварительная.Количество) КАК Количество,
	|	вт_ДанныеДокумента_Предварительная.ЕдиницаИзмеренияБазовая КАК ЕдиницаИзмеренияБазовая,
	|	ВЫБОР
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	|		КОГДА вт_ДанныеДокумента_Предварительная.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	
	//Розница
	//|		КОГДА вт_ДанныеДокумента_Предварительная.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеТоваров)
	///////////////////
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗИСМПТК.Производство)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА вт_ДанныеДокумента_Предварительная.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
	|						ИЛИ вт_ДанныеДокумента_Предварительная.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗИСМПТК.Импорт)
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА (вт_ДанныеДокумента_Предварительная.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи)
	|								ИЛИ вт_ДанныеДокумента_Предварительная.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию))
	|								И вт_ДанныеДокумента_Предварительная.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Обувная)
	|							ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗИСМПТК.ПринятНаКомиссию)
	|					КОНЕЦ
	
	//Розница
	//
	///////////////////
	|			КОНЕЦ
	|	КОНЕЦ КАК СпособВводаВОборот,
	|	вт_ДанныеДокумента_Предварительная.GTIN КАК GTIN
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	вт_ДанныеДокумента_Предварительная КАК вт_ДанныеДокумента_Предварительная
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ДанныеДокумента_Предварительная.ВидПродукции,
	|	вт_ДанныеДокумента_Предварительная.Организация,
	|	вт_ДанныеДокумента_Предварительная.Номенклатура,
	|	вт_ДанныеДокумента_Предварительная.Ответственный,
	|	вт_ДанныеДокумента_Предварительная.Упаковка,
	|	вт_ДанныеДокумента_Предварительная.ДокументОснование,
	|	вт_ДанныеДокумента_Предварительная.Характеристика,
	|	вт_ДанныеДокумента_Предварительная.ЕдиницаИзмеренияБазовая,
	|	ВЫБОР
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	|		КОГДА вт_ДанныеДокумента_Предварительная.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	
	//Розница
	//|		КОГДА вт_ДанныеДокумента_Предварительная.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеТоваров)
	
	//БК
	//Требуется адаптация
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗИСМПТК.Производство)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА вт_ДанныеДокумента_Предварительная.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
	|						ИЛИ вт_ДанныеДокумента_Предварительная.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗИСМПТК.Импорт)
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА (вт_ДанныеДокумента_Предварительная.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи)
	|								ИЛИ вт_ДанныеДокумента_Предварительная.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию))
	|								И вт_ДанныеДокумента_Предварительная.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Обувная)
	|							ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗИСМПТК.ПринятНаКомиссию)
	|					КОНЕЦ
	
	//Розница
	//
	///////////////////
	|			КОНЕЦ
	|	КОНЕЦ,
	|	вт_ДанныеДокумента_Предварительная.GTIN";    
	
	Если Не ПервыйЗапрос Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ вт_ДанныеДокумента", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти
///////////////////

//ПЕРЕОПРЕДЕЛЕНИЕ//
//УТ
#Область УТ
//Для УТ, документ ПрочееОприходованиеТоваров с видом операции ПоступлениеИзПроизводства 
//является основанием для ввода документа ЗаказКодовМаркировкиСУЗИСМПТК
//
Функция ТекстЗапросаПрочееОприходованиеТоваров(ПервыйЗапрос = Истина)
		
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрочееОприходованиеТоваров.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Обувная)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты)
	|							ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты)
	|						ИНАЧЕ ВЫБОР
	|								КОГДА СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|									ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Табачная)
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ВидПродукции,
	|	ПрочееОприходованиеТоваров.Ответственный КАК Ответственный,
	|	ТаблицаТовары.Ссылка КАК ДокументОснование,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТовары.Количество КАК Количество,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияБазовая,
	|	ПрочееОприходованиеТоваров.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК GTIN
	|ПОМЕСТИТЬ вт_ДанныеДокумента_Предварительная
	|ИЗ
	|	Документ.ПрочееОприходованиеТоваров.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрочееОприходованиеТоваров КАК ПрочееОприходованиеТоваров
	|		ПО ТаблицаТовары.Ссылка = ПрочееОприходованиеТоваров.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ТаблицаТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И ТаблицаТовары.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|			И ТаблицаТовары.Упаковка = ШтрихкодыНоменклатуры.Упаковка
	|ГДЕ
	|	ПрочееОприходованиеТоваров.Ссылка В(&МассивДокументов)
	|	И (СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента_Предварительная.Организация КАК Организация,
	|	вт_ДанныеДокумента_Предварительная.ВидПродукции КАК ВидПродукции,
	|	вт_ДанныеДокумента_Предварительная.Ответственный КАК Ответственный,
	|	вт_ДанныеДокумента_Предварительная.ДокументОснование КАК ДокументОснование,
	|	вт_ДанныеДокумента_Предварительная.Номенклатура КАК Номенклатура,
	|	вт_ДанныеДокумента_Предварительная.Характеристика КАК Характеристика,
	|	вт_ДанныеДокумента_Предварительная.Упаковка КАК Упаковка,
	|	СУММА(вт_ДанныеДокумента_Предварительная.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(вт_ДанныеДокумента_Предварительная.Количество) КАК Количество,
	|	вт_ДанныеДокумента_Предварительная.ЕдиницаИзмеренияБазовая КАК ЕдиницаИзмеренияБазовая,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗИСМПТК.Производство) КАК СпособВводаВОборот,
	|	вт_ДанныеДокумента_Предварительная.GTIN КАК GTIN
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	вт_ДанныеДокумента_Предварительная КАК вт_ДанныеДокумента_Предварительная
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ДанныеДокумента_Предварительная.ВидПродукции,
	|	вт_ДанныеДокумента_Предварительная.Организация,
	|	вт_ДанныеДокумента_Предварительная.Номенклатура,
	|	вт_ДанныеДокумента_Предварительная.Ответственный,
	|	вт_ДанныеДокумента_Предварительная.Упаковка,
	|	вт_ДанныеДокумента_Предварительная.ДокументОснование,
	|	вт_ДанныеДокумента_Предварительная.Характеристика,
	|	вт_ДанныеДокумента_Предварительная.ЕдиницаИзмеренияБазовая,
	|	вт_ДанныеДокумента_Предварительная.GTIN";     
	
	Если Не ПервыйЗапрос Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ вт_ДанныеДокумента", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти
///////////////////

Функция ДополнитьТекстЗапросЗаполненияЗаказКодов(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.Организация,
	|	вт_ДанныеДокумента.ВидПродукции,
	|	вт_ДанныеДокумента.Ответственный,
	|	вт_ДанныеДокумента.ДокументОснование,
	|	вт_ДанныеДокумента.Номенклатура,
	|	вт_ДанныеДокумента.Характеристика,
	|	вт_ДанныеДокумента.Упаковка,
	|	вт_ДанныеДокумента.КоличествоУпаковок,
	|	вт_ДанныеДокумента.Количество,
	|	вт_ДанныеДокумента.ЕдиницаИзмеренияБазовая,
	|	вт_ДанныеДокумента.СпособВводаВОборот,
	|	вт_ДанныеДокумента.GTIN
	|ПОМЕСТИТЬ вт_ДанныеДляЗаполнения
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|ГДЕ
	|	вт_ДанныеДокумента.Количество > 0
	|";

	Возврат ТекстЗапроса + ИнтеграцияИСМПТК.ПолучитьТекстПакетовЗапросаДляЗаполненияЗаказКодов();
	
КонецФункции

#КонецОбласти

#Область НанесениеКодов

Функция ПодготовитьТекстЗапросаДляЗаполненияНанесенияКодов(ПараметрыЗаполнения) Экспорт
	
	ДокументыОснования 	 = ПараметрыЗаполнения.МассивДокументов;
	МассивВидовДокумента = ПараметрыЗаполнения.МассивВидовДокумента;

	Если ТипЗнч(ДокументыОснования) = Тип("Массив") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДляМассиваНанесениеКодов(МассивВидовДокумента);
		Если ТекстЗапроса = "" Тогда
			Возврат Неопределено;
		КонецЕсли;	   
	ИначеЕсли ТипЗнч(ДокументыОснования) = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК") Тогда
		ТекстЗапроса = ТекстЗапросаЗаказКМДляНанесения();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляМассиваНанесениеКодов(МассивВидовДокумента)
	
	ТекстЗапроса = "";
	Для Каждого ЭлементМассива Из МассивВидовДокумента Цикл
		ТекстЗапросаДокумента = "";
		Если ЭлементМассива = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК") Тогда
			ТекстЗапросаДокумента = ТекстЗапросаЗаказКМДляНанесения(ТекстЗапроса = "");
		КонецЕсли;
		
		Если ТекстЗапроса <> "" И ТекстЗапросаДокумента <> "" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|"  
		КонецЕсли;	
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДокумента;
		
	КонецЦикла;	
	
	Возврат ТекстЗапроса;
	
КонецФункции

//Документ НанесениеКодовМаркировкиСУЗИСМПТК вводится на основании ЗаказКодовМаркировкиСУЗИСМПТК 
//для ТГ Молочная продукция, Лекарственные препараты (т.к. для Обуви нанесение происходит автоматически при получении КМ)
//
Функция ТекстЗапросаЗаказКМДляНанесения(ПервыйЗапрос = Истина)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка КАК ДокументОснование,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Организация КАК Организация,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ВидПродукции КАК ВидПродукции,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ответственный КАК Ответственный,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ИдентификаторПроизводственнойЛинии КАК ИдентификаторПроизводственнойЛинии,
	|	ПулКодовМаркировкиСУЗИСМПТК.КодМаркировки КАК КодИдентификации,
	|	ПулКодовМаркировкиСУЗИСМПТК.Номенклатура КАК Номенклатура,
	|	ПулКодовМаркировкиСУЗИСМПТК.Характеристика КАК Характеристика,
	|	ПулКодовМаркировкиСУЗИСМПТК.ПолныйКодМаркировки КАК КодМаркировки,
	|	ПулКодовМаркировкиСУЗИСМПТК.GTIN КАК GTIN
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК КАК ЗаказКодовМаркировкиСУЗИСМПТК
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗИСМПТК КАК ПулКодовМаркировкиСУЗИСМПТК
	|		ПО ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка = ПулКодовМаркировкиСУЗИСМПТК.ЗаказНаЭмиссию
	|ГДЕ
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПулКодовМаркировкиСУЗИСМПТК.КодМаркировки,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка,
	|	ПулКодовМаркировкиСУЗИСМПТК.Номенклатура,
	|	ПулКодовМаркировкиСУЗИСМПТК.Характеристика,
	|	ПулКодовМаркировкиСУЗИСМПТК.ПолныйКодМаркировки,
	|	ПулКодовМаркировкиСУЗИСМПТК.GTIN,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Организация,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ВидПродукции,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ИдентификаторПроизводственнойЛинии,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ответственный";    
	
	Если Не ПервыйЗапрос Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ вт_ДанныеДокумента", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ДополнитьТекстЗапросЗаполненияНанесениеКодов(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.ДокументОснование,
	|	вт_ДанныеДокумента.Организация,
	|	вт_ДанныеДокумента.ВидПродукции,
	|	вт_ДанныеДокумента.Ответственный,
	|	вт_ДанныеДокумента.ИдентификаторПроизводственнойЛинии,
	|	вт_ДанныеДокумента.КодИдентификации,
	|	вт_ДанныеДокумента.Номенклатура,
	|	вт_ДанныеДокумента.Характеристика,
	|	вт_ДанныеДокумента.КодМаркировки,
	|	вт_ДанныеДокумента.GTIN
	|ПОМЕСТИТЬ вт_ДанныеДляЗаполнения
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|";

	Возврат ТекстЗапроса + ИнтеграцияИСМПТК.ПолучитьТекстПакетовЗапросаДляЗаполненияНанесенияКодов();
	
КонецФункции

Функция ПолучитьДанныеДокументаОснованияНанесениеКМНаСервере(ДокументОснование) Экспорт
		
	ТекстЗапроса = "";
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК") Тогда
		ТекстЗапроса = ТекстЗапросаЗаказКМДляНанесения(ТекстЗапроса = "");
		ЗаполнятьТоварыПолностью = Ложь;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";

	ТекстЗапроса = ДополнитьТекстЗапросЗаполненияНанесениеКодов(ТекстЗапроса);
		
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументов", ДокументОснование);
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицаРеквизиты = РезультатЗапроса[КоличествоПакетов - 2].Выгрузить();
	Реквизиты = Новый Структура();
	
	Для Каждого Строка Из ТаблицаРеквизиты Цикл
		
		Реквизиты.Вставить("Организация", 		Строка.Организация);
		Реквизиты.Вставить("ДокументОснование", Строка.ДокументОснование);
		Реквизиты.Вставить("ВидПродукции", 		Строка.ВидПродукции);
		Реквизиты.Вставить("Ответственный",  	Строка.Ответственный);
		
	КонецЦикла;
	
	ТаблицаТовары = РезультатЗапроса[КоличествоПакетов - 1].Выгрузить(); 
	Товары = Новый Массив();
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		
		СтрокаТовары = Новый Структура();
		СтрокаТовары.Вставить("Номенклатура", 	  Строка.Номенклатура);
		СтрокаТовары.Вставить("Характеристика",   Строка.Характеристика);
		СтрокаТовары.Вставить("GTIN", 			  Строка.GTIN);
		СтрокаТовары.Вставить("КодИдентификации", Строка.КодИдентификации);
		СтрокаТовары.Вставить("КодМаркировки", 	  Строка.КодМаркировки);
		
		Товары.Добавить(СтрокаТовары);
		
	КонецЦикла;
	
	ДанныеДокументаОснования = Новый Структура();
	ДанныеДокументаОснования.Вставить("Реквизиты", Реквизиты);
	ДанныеДокументаОснования.Вставить("Товары",	   Товары);
	
	Возврат ДанныеДокументаОснования;

КонецФункции

#КонецОбласти

Функция ПолучитьТекстЗапросаДляПечатиКМ(КоличествоКПечатиПоКаждомуШК = 0) Экспорт
	
	ТекстЗапросаШаблон = "ВЫБРАТЬ 
	|	ПулКодовМаркировкиСУЗИСМПТК.GTIN КАК GTIN,
	|	ПулКодовМаркировкиСУЗИСМПТК.ВидПродукции КАК ВидПродукции,
	|	ПулКодовМаркировкиСУЗИСМПТК.ЗаказНаЭмиссию КАК ЗаказНаЭмиссию,
	|	ПулКодовМаркировкиСУЗИСМПТК.КодМаркировки КАК КодМаркировки,
	|	ПулКодовМаркировкиСУЗИСМПТК.Номенклатура КАК Номенклатура,
	|	ПулКодовМаркировкиСУЗИСМПТК.Организация КАК Организация,
	|	ПулКодовМаркировкиСУЗИСМПТК.СпособВводаВОборот КАК СпособВводаВОборот,
	|	ПулКодовМаркировкиСУЗИСМПТК.Характеристика КАК Характеристика,
	|	ПулКодовМаркировкиСУЗИСМПТК.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
	|	ПулКодовМаркировкиСУЗИСМПТК.Шаблон КАК Шаблон,
	|	ПулКодовМаркировкиСУЗИСМПТК.ТипШтрихкода КАК ТипШтрихкода,
	|	ПулКодовМаркировкиСУЗИСМПТК.ПолныйКодМаркировки КАК Штрихкод
	|	ПОМЕСТИТЬ ВТКодыПромежуточная
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗИСМПТК КАК ПулКодовМаркировкиСУЗИСМПТК
	|ГДЕ
	//Отбор только не распечатанных по дате
	|	ПулКодовМаркировкиСУЗИСМПТК.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1)  
	//Отбор только готовых к печати по статусу
	|	И Не ПулКодовМаркировкиСУЗИСМПТК.Статус В (&НедоступныеСтатусы)
	|	И (";
		
	ТекстЗапросаДопУсловиеШаблон = "%ИЛИ (ПулКодовМаркировкиСУЗИСМПТК.GTIN В(&GTIN)
	|	И ПулКодовМаркировкиСУЗИСМПТК.ЗаказНаЭмиссию = &ЗаказНаЭмиссию)%ЗакрывющаяСкобка
	|";
	
	ТекстЗаказаОбщееУсловие = "";
	СчетчикЦикла = 0;
		
	Пока Не СчетчикЦикла = КоличествоКПечатиПоКаждомуШК Цикл
		
		ИмяПараметрGTIN = "&GTIN" + Строка(СчетчикЦикла + 1);
		ИмяПараметрЗаказНаЭмиссию = "&ЗаказНаЭмиссию" + Строка(СчетчикЦикла + 1);
						
		ТекстЗапросаЭтойСвязки = СтрЗаменить(ТекстЗапросаДопУсловиеШаблон, "&GTIN", 	  	  ИмяПараметрGTIN);
		ТекстЗапросаЭтойСвязки = СтрЗаменить(ТекстЗапросаЭтойСвязки, 	   "&ЗаказНаЭмиссию", ИмяПараметрЗаказНаЭмиссию);
		
		Если СчетчикЦикла = 0 Тогда 
			ТекстЗапросаЭтойСвязки = СтрЗаменить(ТекстЗапросаЭтойСвязки, "%ИЛИ", "");
		Иначе
			ТекстЗапросаЭтойСвязки = СтрЗаменить(ТекстЗапросаЭтойСвязки, "%ИЛИ", "ИЛИ");
		КонецЕсли;
		
		Если СчетчикЦикла = КоличествоКПечатиПоКаждомуШК - 1 Тогда
			ТекстЗапросаЭтойСвязки = СтрЗаменить(ТекстЗапросаЭтойСвязки, "%ЗакрывющаяСкобка", ")");
		Иначе
			ТекстЗапросаЭтойСвязки = СтрЗаменить(ТекстЗапросаЭтойСвязки, "%ЗакрывющаяСкобка", "");
		КонецЕсли;
			
		ТекстЗаказаОбщееУсловие = ТекстЗаказаОбщееУсловие + ТекстЗапросаЭтойСвязки;
	 	СчетчикЦикла = СчетчикЦикла + 1;
		
	КонецЦикла;
	
	ТекстЗаказаОбщий = ТекстЗапросаШаблон + ТекстЗаказаОбщееУсловие;
	
	ТекстЗапросаСвязкаПакета = ";
	|	///////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапросаСвязка = "
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	ТекстЗапросаКоличествоШаблон = "ВЫБРАТЬ ПЕРВЫЕ %КоличествоКПечати
	|	ВТКодыПромежуточная.GTIN КАК GTIN,
	|	ВТКодыПромежуточная.ВидПродукции КАК ВидПродукции,
	|	ВТКодыПромежуточная.ЗаказНаЭмиссию КАК ЗаказНаЭмиссию,
	|	ВТКодыПромежуточная.КодМаркировки КАК КодМаркировки,
	|	ВТКодыПромежуточная.Номенклатура КАК Номенклатура,
	|	ВТКодыПромежуточная.Организация КАК Организация,
	|	ВТКодыПромежуточная.СпособВводаВОборот КАК СпособВводаВОборот,
	|	ВТКодыПромежуточная.Характеристика КАК Характеристика,
	|	ВТКодыПромежуточная.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
	|	ВТКодыПромежуточная.Шаблон КАК Шаблон,
	|	ВТКодыПромежуточная.ТипШтрихкода КАК ТипШтрихкода,
	|	ВТКодыПромежуточная.Штрихкод КАК Штрихкод,
	|	ИСТИНА КАК ДляПечати
	|ИЗ
	|	ВТКодыПромежуточная КАК ВТКодыПромежуточная
	|ГДЕ
	|	ВТКодыПромежуточная.GTIN = &GTIN
	|	И ВТКодыПромежуточная.ЗаказНаЭмиссию = &ЗаказНаЭмиссию";
	
	ТекстЗаказаКоличествоОбщий = "";
	СчетчикЦикла = 0;
	
	Пока Не СчетчикЦикла = КоличествоКПечатиПоКаждомуШК Цикл
		
		ИмяПараметраКоличество = "КоличествоКПечати" + Строка(СчетчикЦикла + 1);
		ИмяПараметрGTIN = "&GTIN" + Строка(СчетчикЦикла + 1);
		ИмяПараметрЗаказНаЭмиссию = "&ЗаказНаЭмиссию" + Строка(СчетчикЦикла + 1);
		
		ТекстЗапросаЭтойСвязки = СтрЗаменить(ТекстЗапросаКоличествоШаблон, "КоличествоКПечати", ИмяПараметраКоличество);
		ТекстЗапросаЭтойСвязки = СтрЗаменить(ТекстЗапросаЭтойСвязки, "&GTIN", 			ИмяПараметрGTIN);
		ТекстЗапросаЭтойСвязки = СтрЗаменить(ТекстЗапросаЭтойСвязки, "&ЗаказНаЭмиссию", ИмяПараметрЗаказНаЭмиссию);
		ТекстЗаказаКоличествоОбщий = ТекстЗаказаКоличествоОбщий + ТекстЗапросаЭтойСвязки;
		
		Если Не СчетчикЦикла = КоличествоКПечатиПоКаждомуШК - 1 Тогда
			ТекстЗаказаКоличествоОбщий = ТекстЗаказаКоличествоОбщий + ТекстЗапросаСвязка;
		КонецЕсли;
		
		СчетчикЦикла = СчетчикЦикла + 1;
		
	КонецЦикла;
	
	ТекстЗаказаОбщий = ТекстЗаказаОбщий + ТекстЗапросаСвязкаПакета + ТекстЗаказаКоличествоОбщий;
	
	Возврат ТекстЗаказаОбщий;
			
КонецФункции

#Область ПроверкаЗаполненияДокументовИСМПТ

Функция ТабличныеЧастиДокументаИСМПТ(ДокументИСМПТ)
	
	ТабличныеЧастиВыбора = Новый СписокЗначений;	
	
	Если ТипЗнч(ДокументИСМПТ.Ссылка) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК") Тогда
		ТабличныеЧастиВыбора.Добавить("Марки", 	"Марки");
		ТабличныеЧастиВыбора.Добавить("ДокументыСоответствия", 	"Документы соответствия");
	КонецЕсли;
	
	Возврат ТабличныеЧастиВыбора;	
	
КонецФункции

Процедура ДокументАПП_ОбработкаПроверкиЗаполнения(ДокументИСМПТ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт

	Возврат;
	
КонецПроцедуры

Процедура ДокументЭкспортЕАЭС_ОбработкаПроверкиЗаполнения(ДокументИСМПТ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт

	Возврат;
	
КонецПроцедуры

Процедура ДокументПриемкаЕАЭС_ОбработкаПроверкиЗаполнения(ДокументИСМПТ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт

	Возврат;
	
КонецПроцедуры

Процедура ДокументУОР_ОбработкаПроверкиЗаполнения(ДокументИСМПТ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт

	ЕстьТовары = Ложь;
	ПроверяемыеТабличныеЧасти = ТабличныеЧастиДокументаИСМПТ(ДокументИСМПТ);
	Для Каждого ТабличнаяЧасть Из ПроверяемыеТабличныеЧасти Цикл
		Если ДокументИСМПТ[ТабличнаяЧасть.Значение] <> Неопределено Тогда
			ДокументИСМПТ_ПроверитьЗаполнениеТабличнойЧастиПострочно(ДокументИСМПТ, ДокументИСМПТ[ТабличнаяЧасть.Значение], ТабличнаяЧасть.Значение, ТабличнаяЧасть.Представление, Отказ, ЕстьТовары);
		КонецЕсли;
	КонецЦикла; 
	
	ПроверяемыеРеквизиты.Добавить("СвязанныйАкт");
		
КонецПроцедуры

Процедура ДокументВВО_ОбработкаПроверкиЗаполнения(ДокументИСМПТ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт

	ПроверяемыеРеквизиты.Добавить("ПричинаВводаВОборот");
		
КонецПроцедуры

Процедура ДокументВИО_ОбработкаПроверкиЗаполнения(ДокументИСМПТ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт

	Возврат;
	
КонецПроцедуры

Процедура УведомлениеОВвозеЕАЭС_ОбработкаПроверкиЗаполнения(ДокументИСМПТ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт

	Возврат;
	
КонецПроцедуры

Процедура УведомлениеОВвозеТретьиСтраны_ОбработкаПроверкиЗаполнения(ДокументИСМПТ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт

	Возврат;
	
КонецПроцедуры

Процедура ДокументИСМПТ_ПроверитьЗаполнениеТабличнойЧастиПострочно(ОбъектДокумент, ПроверяемаяТабличнаяЧасть, ИмяТабличнойЧасти, ПредставлениеИмяТабличнойЧасти, Отказ, ЕстьТовары = Ложь)
	
	Если ПроверяемаяТабличнаяЧасть.Количество() = 0 Тогда
		ТекстСообщения = ИмяТабличнойЧасти + НСтр("ru = '. Данные не заполнены.'"); 
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из ПроверяемаяТабличнаяЧасть Цикл
		
		ЕстьТовары = Истина;
		ТекстСообщенияШаблон = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""'");              
		
		Если ИмяТабличнойЧасти = "Товары" Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщенияШаблон, "Номенклатура", Формат(СтрокаТабличнойЧасти.НомерСтроки, "ЧН=0; ЧГ="), ПредставлениеИмяТабличнойЧасти);
				Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки-1, "ЧН=0; ЧГ=") + "].Номенклатура";
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, ОбъектДокумент, Поле, "Объект", Отказ);
			КонецЕсли;	
			
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ТНВЭД) Тогда
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщенияШаблон, "ТНВЭД", Формат(СтрокаТабличнойЧасти.НомерСтроки, "ЧН=0; ЧГ="), ПредставлениеИмяТабличнойЧасти);
				Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки-1, "ЧН=0; ЧГ=") + "].ТНВЭД";
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, ОбъектДокумент, Поле, "Объект", Отказ);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.КоличествоИсточник) Тогда
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщенияШаблон, "Количество", Формат(СтрокаТабличнойЧасти.НомерСтроки, "ЧН=0; ЧГ="), ПредставлениеИмяТабличнойЧасти);
				Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки-1, "ЧН=0; ЧГ=") + "].Количество";
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, ОбъектДокумент, Поле, "Объект", Отказ);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроизводства) Тогда
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщенияШаблон, "СтранаПроизводства", Формат(СтрокаТабличнойЧасти.НомерСтроки, "ЧН=0; ЧГ="), ПредставлениеИмяТабличнойЧасти);
				Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки-1, "ЧН=0; ЧГ=") + "].СтранаПроизводства";
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, ОбъектДокумент, Поле, "Объект", Отказ);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерПозицииВДекларацииИлиЗаявлении) Тогда
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщенияШаблон, "НомерПозицииВДекларацииИлиЗаявлении", Формат(СтрокаТабличнойЧасти.НомерСтроки, "ЧН=0; ЧГ="), ПредставлениеИмяТабличнойЧасти);
				Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки-1, "ЧН=0; ЧГ=") + "].НомерПозицииВДекларацииИлиЗаявлении";
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, ОбъектДокумент, Поле, "Объект", Отказ);
			КонецЕсли;
			
		ИначеЕсли ИмяТабличнойЧасти = "Марки" Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.КодИдентификации) Тогда
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщенияШаблон, "Код идентификации", Формат(СтрокаТабличнойЧасти.НомерСтроки, "ЧН=0; ЧГ="), ПредставлениеИмяТабличнойЧасти);
				Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки-1, "ЧН=0; ЧГ=") + "].Код";
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, ОбъектДокумент, Поле, "Объект", Отказ);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) Тогда
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщенияШаблон, "Количество подобрано", Формат(СтрокаТабличнойЧасти.НомерСтроки, "ЧН=0; ЧГ="), ПредставлениеИмяТабличнойЧасти);
				Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки-1, "ЧН=0; ЧГ=") + "].Количество";
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, ОбъектДокумент, Поле, "Объект", Отказ);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.GTIN) Тогда
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщенияШаблон, "GTIN", Формат(СтрокаТабличнойЧасти.НомерСтроки, "ЧН=0; ЧГ="), ПредставлениеИмяТабличнойЧасти);
				Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки-1, "ЧН=0; ЧГ=") + "].GTIN";
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, ОбъектДокумент, Поле, "Объект", Отказ);
			КонецЕсли;
			
		ИначеЕсли ИмяТабличнойЧасти = "ДокументыСоответствия" Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ТипДокумента) Тогда
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщенияШаблон, "Тип документа", Формат(СтрокаТабличнойЧасти.НомерСтроки, "ЧН=0; ЧГ="), ПредставлениеИмяТабличнойЧасти);
				Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки-1, "ЧН=0; ЧГ=") + "].ТипДокумента";
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, ОбъектДокумент, Поле, "Объект", Отказ);
			КонецЕсли;

			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаДокумента) Тогда
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщенияШаблон, "Дата документа", Формат(СтрокаТабличнойЧасти.НомерСтроки, "ЧН=0; ЧГ="), ПредставлениеИмяТабличнойЧасти);
				Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки-1, "ЧН=0; ЧГ=") + "].ДатаДокумента";
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, ОбъектДокумент, Поле, "Объект", Отказ);
			КонецЕсли;

			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерДокумента) Тогда
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщенияШаблон, "Номер документа", Формат(СтрокаТабличнойЧасти.НомерСтроки, "ЧН=0; ЧГ="), ПредставлениеИмяТабличнойЧасти);
				Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки-1, "ЧН=0; ЧГ=") + "].НомерДокумента";
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, ОбъектДокумент, Поле, "Объект", Отказ);
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитовПолейЗапросов) Экспорт
	
	Для Каждого ЭлементСоответсвия Из СоответсвиеИменРеквизитовПолейЗапросов Цикл
		Значение = "";
		
		Если ЭлементСоответсвия.Ключ = "%ДанныеДокументаЕдиницаИзмерения" Тогда	
			//ПЕРЕОПРЕДЕЛЕНИЕ//
			//ЕРП, КА, УТ
			//Значение = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			//					"Ссылка",
			//					"вт_ДанныеДокумента.ЕдиницаИзмерения",
			//					"вт_ДанныеДокумента.Товар");
			//Розница
			//
			///////////////////
			
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА, УТ + Розница
		//ИначеЕсли ЭлементСоответсвия.Ключ = "%СтруктурнаяЕдиницаИдентификационныйНомер"	Тогда	
		//	Значение = "ИНН";
		//ИначеЕсли ЭлементСоответсвия.Ключ = "%КонтрагентИНН"	Тогда	
		//	Значение = "ИНН";
		//ИначеЕсли ЭлементСоответсвия.Ключ = "%ОрганизацияИНН"	Тогда	
		//	Значение = "ИНН";
		//КонецЕсли;
		
		//БК
		ИначеЕсли ЭлементСоответсвия.Ключ = "%СтруктурнаяЕдиницаИдентификационныйНомер"	Тогда	
			Значение = "ИдентификационныйНомер";
		ИначеЕсли ЭлементСоответсвия.Ключ = "%КонтрагентИНН"	Тогда	
			Значение = "ИдентификационныйКодЛичности";
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ОрганизацияИНН"	Тогда	
			Значение = "ИдентификационныйНомер";
		///////////////////
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%БуквенныйКодВалюты"	Тогда	
			//Значение = "Наименование";
			Значение = "БуквенныйКод";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ИмяРеквизитаВладелецДоговора"	Тогда	
			Значение = "Контрагент";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ИмяРеквизитаОрганизацияДоговора"	Тогда	
			Значение = "Организация";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ДоговорНомер"	Тогда	
			//Значение = "Номер";
			Значение = "НомерДоговора";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ДоговорДата"	Тогда	
			//Значение = "Дата";
			Значение = "ДатаДоговора";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ЕдиницаИзмерения"	Тогда
			Значение = "ЕдиницаИзмерения";			
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%КодТНВЭД"	Тогда
			//Значение = "ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).КодТНВЭД.Код"
			Значение = "ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).КодТНВЭД"
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%КлассификаторСтранМира" Тогда
			//ПЕРЕОПРЕДЕЛЕНИЕ//
			//ЕРП, КА, УТ
			Значение = "Справочник.КлассификаторСтранМира"
			//Розница
			//Значение = "Справочник.СтраныМира"
			///////////////////
		КонецЕсли;
		
		СоответсвиеИменРеквизитовПолейЗапросов.Вставить(ЭлементСоответсвия.Ключ, Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоИндивидуальныйПредприниматель(Знач СтруктурнаяЕдиница) Экспорт
	
	ЭтоИП = Ложь;
	Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.Организации") Тогда
		Если СтруктурнаяЕдиница.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			ЭтоИП = Истина;	
		Иначе
			ЭтоИП = Ложь;
		КонецЕсли;
	Иначе
		ЭтоИП = Ложь;
	КонецЕсли;
	
	Возврат ЭтоИП;
	
КонецФункции

Функция ПроверитьНаличиеСвязанногоДокументаИСМПТ(Основание, ЭтоПроверкаИзОснования = Ложь) Экспорт
	
	Возврат ИнтеграцияИСМПТК.ПроверитьНаличиеСвязанногоДокументаМаркировки_Общая(Основание, ЭтоПроверкаИзОснования);
			
КонецФункции

Функция ПроверитьНаличиеШтрихкодаУноменклатуры(Номенклатура = Неопределено, EAN) Экспорт
	
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПроверитьНаличиеШтрихкодаУНоменклатуры(Номенклатура, EAN);
	
КонецФункции

Процедура ЗаписатьШтрихкодНоменклатуры(Номенклатура, ШтрихкодEAN, ЕИ = Неопределено, Характеристика) Экспорт
	
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ЗаписатьШтрихкодНоменклатуры(Номенклатура, ШтрихкодEAN, ЕИ, Характеристика);
	
КонецПроцедуры

Функция ПолучитьЕдиницуИзмерения(Номенклатура) Экспорт 
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//ЕдиницаИзмерения = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
	
	//Розница
	//ЕдиницаИзмерения = ИнтеграцияИСМПТКПереопределяемый.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
	
	//БК
	ЕдиницаИзмерения = ИнтеграцияИСМПТКПереопределяемый.ЗначениеРеквизитаОбъекта(Номенклатура, "БазоваяЕдиницаИзмерения");
	///////////////////
	
	Возврат ЕдиницаИзмерения;
	
КонецФункции

Функция ЭтоДокументПТУ(Ссылка) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//Возврат ?(ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг"), Истина, Ложь);
	
	//Розница
	//Возврат ?(ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваров"), Истина, Ложь);
	
	//БК
	Возврат ?(ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг"), Истина, Ложь);
	///////////////////
		
КонецФункции

Функция ЭтоОснованиеДляВходящегоАПП(Документ) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	#Область ЕРП_КА_УТ
	//Если ТипЗнч(Документ) = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров")
	//	ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.СписаниеНедостачТоваров") 
	//	ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
	//	ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
	//	ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПоставщику")
	//	ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ПрочееОприходованиеТоваров") Тогда
	//	Возврат Ложь;
	//КонецЕсли;

	//ВидОперации = Документ.ХозяйственнаяОперация;
	//Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
	//	И (ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика")
	//	ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию")) Тогда
	//	Возврат Истина;
	//КонецЕсли;
	//
	//Если ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
	//	И (ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента")
	//	ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера")) Тогда
	//	Возврат Истина;
	//КонецЕсли;
	#КонецОбласти
	
	//Розница
	#Область Розница
	//Если ТипЗнч(Документ) = Тип("ДокументСсылка.ОприходованиеТоваров")
	//	ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.СписаниеТоваров") 
	//	ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваров") 
	//	ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
	//	ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
	//	Возврат Ложь;
	//КонецЕсли;

	//Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда 
	//	ВидОперации = Документ.ХозяйственнаяОперация;
	//	Если (ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеТоваров")
	//		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию")) Тогда
	//		Возврат Истина;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
	//	Возврат Истина;
	//КонецЕсли;
	#КонецОбласти
	
	//БК
	#Область БК
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ОприходованиеТоваров")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.СписаниеТоваров") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ТребованиеНакладная") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Возврат Ложь;
	КонецЕсли;

	ВидОперации = Документ.ВидОперации;
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		И (ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения")) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		И ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ВозвратТоваров") Тогда
		Возврат Истина;
	КонецЕсли;
	#КонецОбласти
	///////////////////
		
	Возврат Ложь;
	          	
КонецФункции

#Область ЗаказКодовВСУЗ

// Используется в документе ЗаказНаЭмиссиюКодовМаркировкиСУЗ при заполнении ТЧ. 
// Функция возвращает значение GTIN из РС ШтрихкодыНоменклатуры по совпадению полей Номенклатура, Характеристика (если используются), Упаковка (если заполнена),
// если штрихкод не найден, если найден, но не EAN13 или если  
// 
Функция ПодобратьGTINДляЗаказа(Номенклатура, Упаковка, Характеристика, ХарактеристикиИспользуются, ЭтоТабак = Ложь) Экспорт
	
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПодобратьGTINДляЗаказа(Номенклатура, Упаковка, Характеристика, ХарактеристикиИспользуются, ЭтоТабак);
	
КонецФункции

Функция ПолучитьСписокВсехGTINНоменклатуры(Номенклатура) Экспорт
	
	Запрос = Новый Запрос();
	ТекстЗапроса = "ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ 
	//|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	//|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	//|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
	
	//Розница
	//|	ШтрихкодыНоменклатуры.Владелец КАК Номенклатура,
	//|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	//|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
	
	//БК
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	"""" КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка) КАК Упаковка
	///////////////////
	|ИЗ
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + БК
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	
	//Розница
	//|	РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
	///////////////////
	|ГДЕ
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + БК
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура";
	
	//Розница
	//|	ШтрихкодыНоменклатуры.Владелец = &Номенклатура";
	///////////////////
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СпискоЗначенийШтрихКодов = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		GTIN 				= РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.GTINПоШтрихкодуEAN(Выборка.Штрихкод);
		ПредставлениеКода 	= "" + GTIN + " / " + Выборка.Номенклатура + " / " + Выборка.Характеристика + " / " + Выборка.Упаковка;
		
		СпискоЗначенийШтрихКодов.Добавить(GTIN, ПредставлениеКода);
	КонецЦикла;

	Возврат СпискоЗначенийШтрихКодов;
	
КонецФункции

Функция ПодобратьДанныеПоGTINДляЗаказа(МассивGTIN) Экспорт
	
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПодобратьДанныеПоGTINДляЗаказа(МассивGTIN);
	
КонецФункции

Функция ПолучитьДанныеОНоменклатуреПоGTIN(ТаблицаШК) Экспорт
	
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПолучитьДанныеОНоменклатуреПоGTIN(ТаблицаШК);
	
КонецФункции

Функция МассивGTINМаркированногоТовара(Номенклатура, Характеристика, Упаковка) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод
	|ИЗ
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	//|ГДЕ
	//|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	//|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика
	
	//Розница
	//|	РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
	//|ГДЕ
	//|	ШтрихкодыНоменклатуры.Владелец = &Номенклатура
	//|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика
	
	//БК
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	///////////////////
	|	<Упаковка>";
	
	Если ЗначениеЗаполнено(Упаковка) Тогда
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА, УТ + Розница
		//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<Упаковка>", "И ШтрихкодыНоменклатуры.Упаковка = &Упаковка");
		
		//БК
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<Упаковка>", "");
		///////////////////
	Иначе
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА, УТ
		//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<Упаковка>", "И ШтрихкодыНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)");	
		
		//Розница
		//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<Упаковка>", "И ШтрихкодыНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)");
		
		//БК
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<Упаковка>", "");
		///////////////////
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Номенклатура",   Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Если ЗначениеЗаполнено(Упаковка) Тогда
		Запрос.УстановитьПараметр("Упаковка",   Упаковка);
	КонецЕсли;
	
	МассивШтрихкодов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Штрихкод");
	СписокGTIN =  Новый Массив;
	
	Для Каждого Штрихкод Из МассивШтрихкодов Цикл
		
		Если РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверитьКорректностьGTIN(Штрихкод) Тогда
			СписокGTIN.Добавить(Штрихкод);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокGTIN;
	
КонецФункции

Функция ЗаполнитьЗаказИзПодбора(ТаблицаТоваров, ВидПродукции, АдресТоваровВХранилище) Экспорт
	
	ТаблицаПодбора = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	ПроверятьВидПродукции = Не ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка");
	
	Для Каждого СтрокаТоваров Из ТаблицаПодбора Цикл
		
		ВидПродукцииНоменклатуры = ПолучитьВидПродукцииПоНоменклатуре(СтрокаТоваров.Номенклатура);
		
		Если Не ВидПродукцииНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка") 
			И (Не ПроверятьВидПродукции Или ВидПродукции = ВидПродукцииНоменклатуры)Тогда
			
			//ПЕРЕОПРЕДЕЛЕНИЕ//
			//ЕРП, КА, УТ + Розница
			//Характеристика 			   = СтрокаТоваров.Характеристика;
			//ХарактеристикиИспользуются = СтрокаТоваров.ХарактеристикиИспользуются;
			
			//БК
			Характеристика = "";
			ХарактеристикиИспользуются = Ложь;
			///////////////////
			
			//УпаковкаНеШтучная = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.УпаковкаНеШтучная(СтрокаТоваров.Номенклатура, СтрокаТоваров.Упаковка);
			УпаковкаНеШтучная = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.УпаковкаНеШтучная(СтрокаТоваров.Номенклатура, "");

			Если ВидПродукцииНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда 
				//Для табака важна конкретная упаковка в регистре, т.к. от этого зависит шаблон кода: на базовую ЕИ выставляется пачка сигарет, на упаковку - блок.
				//ДанныеШтрихкодов = ИнтеграцияИСМПТКПереопределяемый.ПодобратьGTINДляЗаказа(СтрокаТоваров.Номенклатура, СтрокаТоваров.Упаковка, Характеристика, ХарактеристикиИспользуются, Истина);
				ДанныеШтрихкодов = ИнтеграцияИСМПТКПереопределяемый.ПодобратьGTINДляЗаказа(СтрокаТоваров.Номенклатура, "", Характеристика, ХарактеристикиИспользуются, Истина);
			Иначе
				//Для остальных ТГ не принципиально значение упаковки, т.к. групповых не поддерживается или они имеют такой же шаблон кода, как потребительские.
				//ДанныеШтрихкодов = ИнтеграцияИСМПТКПереопределяемый.ПодобратьGTINДляЗаказа(СтрокаТоваров.Номенклатура, СтрокаТоваров.Упаковка, Характеристика, ХарактеристикиИспользуются);
				ДанныеШтрихкодов = ИнтеграцияИСМПТКПереопределяемый.ПодобратьGTINДляЗаказа(СтрокаТоваров.Номенклатура, "", Характеристика, ХарактеристикиИспользуются);
			КонецЕсли;
					
			Если ДанныеШтрихкодов.Количество() = 0 Тогда
				ТекстСообщения = НСтр("ru='Для номенклатуры %1 не зарегистрирован штрихкод! Добавление невозможно.'");
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТоваров.Номенклатура);
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
				Продолжить;
			ИначеЕсли ДанныеШтрихкодов.Количество() = 1 Тогда
				GTIN = ДанныеШтрихкодов[0];
			Иначе
				GTIN = "";
			КонецЕсли;
			
			Если ВидПродукцииНоменклатуры = Перечисления.ВидыПродукцииИСМПТК.Обувная Тогда
				Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь;
				
			ИначеЕсли ВидПродукцииНоменклатуры = Перечисления.ВидыПродукцииИСМПТК.МолочнаяПродукция Тогда
				Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция;
				
			ИначеЕсли ВидПродукцииНоменклатуры = Перечисления.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты Тогда
				Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты;
				
			ИначеЕсли ВидПродукцииНоменклатуры = Перечисления.ВидыПродукцииИСМПТК.ЛегкаяПромышленность Тогда
				Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность;
				
			ИначеЕсли ВидПродукцииНоменклатуры = Перечисления.ВидыПродукцииИСМПТК.Табачная Тогда
				//Если ЗначениеЗаполнено(СтрокаТоваров.Упаковка) 
				//	И УпаковкаНеШтучная Тогда
				//	//При регистрации ШК указана упаковка и при этом она не равна 1 единице товара
				//	Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек;
				//Иначе
					Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка;
				//КонецЕсли;
			Иначе
				//Значение по умолчанию
				Шаблон = ИнтеграцияИСМПТКВызовСервера.ПолучитьШаблонДляНоменклатурыЗаказа(СтрокаТоваров.Номенклатура);
			КонецЕсли;
			
			НоваяСтрока = ТаблицаТоваров.Добавить();
			//ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров,,"Количество, КоличествоУпаковок");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров,,"Количество");
			
			//Если Не ЗначениеЗаполнено(НоваяСтрока.Упаковка)
			//	Или НЕ УпаковкаНеШтучная Тогда
			//	НоваяСтрока.Упаковка = РозничноеВыбытиеИСМПТКПереопределяемый.ПолучитьЗначениеБазовойЕИНоменклатуры(НоваяСтрока.Номенклатура);
			//	//Базовая ЕИ, значит количество = количеству упаковок
			//	НоваяСтрока.Количество 		   = СтрокаТоваров.КоличествоУпаковок;
			//	НоваяСтрока.КоличествоУпаковок = СтрокаТоваров.КоличествоУпаковок;
			//Иначе
			//	Если Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек Тогда
			//		НоваяСтрока.Количество 		   = СтрокаТоваров.КоличествоУпаковок;
			//		НоваяСтрока.КоличествоУпаковок = СтрокаТоваров.КоличествоУпаковок;	
			//	Иначе
					НоваяСтрока.Количество 		   = СтрокаТоваров.Количество;
					//НоваяСтрока.КоличествоУпаковок = СтрокаТоваров.КоличествоУпаковок;
					НоваяСтрока.КоличествоУпаковок = СтрокаТоваров.Количество;
			//	КонецЕсли;
			//КонецЕсли;
			
			НоваяСтрока.GTIN = GTIN;
			Если GTIN = "" Тогда
				ТекстСообщения = НСтр("ru='В строке %1 требуется уточнение GTIN.'");
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, НоваяСтрока.НомерСтроки);
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
			КонецЕсли;
			
			НоваяСтрока.Шаблон = Шаблон;
			НоваяСтрока.СпособФормированияСерийногоНомера = ПредопределенноеЗначение("Перечисление.СпособыФормированияСерийногоНомераСУЗИСМПТК.Автоматически");
			
		Иначе
			ТекстСообщения = НСтр("ru='Особенности учета номенклатуры %1 вне соответствуют указанному в документе виду продукции! Добавление невозможно.'");
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТоваров.Номенклатура);
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, , , "Форма.Объект");
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИБ

Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.7";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ИнтеграцияИСМПТКПереопределяемый.ОбновитьСуществующиеДокументыАгрегацияКМ";
	Обработчик.Комментарий = НСтр("ru = 'Обновление структуры данных существующих документов Агрегация кодов маркировки (СУЗ).'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ИнтеграцияИСМПТКПереопределяемый.ОбновитьСуществующиеДокументыВводаИВывода";
	Обработчик.Комментарий = НСтр("ru = 'Обновление структуры данных существующих документов Уведомление о вводе в оборот, Уведомление о выводе из оборота.'");
	
КонецПроцедуры

#Область ОбработчикиОбновления

//В версии БМ 1.0.4.6 изменилась структура документа Агрегация КМ:
//ранее для документов, формируемых по групповой упаковке табака, т.е. когда код агрегата - это ДатаМатрикс со спецсимволом,
//в качестве кода агрегата ошибочно хранилась либо строка, если документ создавался вручную, 
//либо полный КМ, если он создавался обработкой пакетной загрузки агрегаций.
//В первом случае нарушался формат кода, во втором - при открытии документа возникала ошибка из-за передачи неподдерживаемого символа в клиент-серверном переходе.
//В версии 1.0.4.6 в ТЧ Упаковки реквизит ИдентификационныйКодЕдиницыАгрегации оставлен для полного КМ в кодировке Base64 - как во всех документах библиотеки,
//он отправляется по АПИ, предварительно переодировавшись в строку, также добавлен реквизит КодИдентификацииУпаковки,
//который выводится на форму и содержит КИ - укороченный код для визуального восприятия пользователем.
//В ТЧ Агрегированых кодов также внесены изменения:
//теперь там 2 реквизита - КодМаркировки и КодИдентификации, которые заполняются стандартно для библиотчных документов.
//
Процедура ОбновитьСуществующиеДокументыАгрегацияКМ() Экспорт
	
	#Область Комментарий
	//Принцип преобразования данных для старых документов
	//ТЧ Упаковки
	//1) Если ИдентификационныйКодЕдиницыАгрегации - SSCC
	//Такой код не содержит спецсимволов и не требует преобразования. Заполняем его в оба реквизита
	//2) Если ИдентификационныйКодЕдиницыАгрегации - Datamatrix, содержащий спецсимволы (у пользователей табачки, которые использовали обработку группового создания Агрегаций)
	//ИдентификационныйКодЕдиницыАгрегации заполняем значением ИдентификационныйКодЕдиницыАгрегации в Base64,
	//КодИдентификацииУпаковки заполняем значением КИ из структуры разбора ИдентификационныйКодЕдиницыАгрегации
	//3) Если ИдентификационныйКодЕдиницыАгрегации - строка без спецсимволов (либо КИ, либо нарушенный по структуре КМ - у пользователей табачки, которые создавали документы вручную)
	//ИдентификационныйКодЕдиницыАгрегации и КодИдентификацииУпаковки пытаемся заполнить значением КИ из структуры разбора ИдентификационныйКодЕдиницыАгрегации,
	//если не получилось разобрать - оба заполняем значением ИдентификационныйКодЕдиницыАгрегации
	//ТЧ АгрегированныеКМ
	//Т.к. значений полных КМ для вложенных позиций в базе нет, заполняем новое поле преобразованным в Base64 КодИдентификации
	//	
	//Таким образом, старые документы будут корректно отображаться при открытии, также должна сохраниться возможность их отправки на сервер.
	#КонецОбласти
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АгрегацияКодовМаркировкиСУЗИСМПТКАгрегированныеКМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АгрегацияКодовМаркировкиСУЗИСМПТК.АгрегированныеКМ КАК АгрегацияКодовМаркировкиСУЗИСМПТКАгрегированныеКМ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
			КонецЕсли;
			
			//Обработка ТЧ Упаковки
			Для Каждого СтрокаКодАгрегата Из ДокументОбъект.Упаковки Цикл
				
				//Пытаемся разобрать код маркировки
				Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЭтоСтрокаФорматаBase64(СтрокаКодАгрегата.ИдентификационныйКодЕдиницыАгрегации) Тогда
					Штрихкод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(СтрокаКодАгрегата.ИдентификационныйКодЕдиницыАгрегации);
				Иначе
					Штрихкод = СтрокаКодАгрегата.ИдентификационныйКодЕдиницыАгрегации;
				КонецЕсли;
				ИсходныеДанные = Новый Структура("Штрихкод, ФорматBase64", Штрихкод, Истина);
				СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);   
				
				//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
				Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
					//Считаем, что это SSCC и добавляем его без разбора
					СтрокаКодАгрегата.КодИдентификацииУпаковки 			   = СтрокаКодАгрегата.ИдентификационныйКодЕдиницыАгрегации; //КИ
					СтрокаКодАгрегата.ИдентификационныйКодЕдиницыАгрегации = Штрихкод;  //КМ в Base64
				Иначе
					СтрокаКодАгрегата.КодИдентификацииУпаковки			   = СтруктураКодовМаркировки.КодИдентификации;
					СтрокаКодАгрегата.ИдентификационныйКодЕдиницыАгрегации = СтруктураКодовМаркировки.КодМаркировки; 
				КонецЕсли;
				
			КонецЦикла;
			
			//Обработчка ТЧ Агрегаты
			Для Каждого СтрокаКодВложенный Из ДокументОбъект.АгрегированныеКМ Цикл
				
				Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЭтоСтрокаФорматаBase64(СтрокаКодВложенный.КодИдентификации) Тогда
					СтрокаКодВложенный.КодМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(СтрокаКодВложенный.КодИдентификации);
				Иначе
				    СтрокаКодВложенный.КодМаркировки = СтрокаКодВложенный.КодИдентификации;
				КонецЕсли;
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ Агрегация КМ %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение, Метаданные.Документы.АгрегацияКодовМаркировкиСУЗИСМПТК, Выборка.Ссылка, ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
	КонецЦикла;
		
КонецПроцедуры

//В версии БМ 1.0.5.1 изменилась структура документов Ввода и вывода из оборота:
//поля АПИ originalDocInfo, docName и docNumber (данные первичного документа) ранее заполнялись автоматически при отправке,
//теперь они добавлены в качестве реквизитов документов на вкладку Прочее. 
//Обработчик перезаполняет данные этих полей в существующих докмуентах базы,
//т.к. реквизиты обязательны к заполнению при отправке. 
Процедура ОбновитьСуществующиеДокументыВводаИВывода() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УведомлениеОВводеВОборотИСМПТК.Ссылка КАК Ссылка,
	|	""Ввод"" КАК ТипУведомления
	|ИЗ
	|	Документ.УведомлениеОВводеВОборотИСМПТК КАК УведомлениеОВводеВОборотИСМПТК
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УведомлениеОВыводеИзОборотаИСМПТК.Ссылка,
	|	""Вывод""
	|ИЗ
	|	Документ.УведомлениеОВыводеИзОборотаИСМПТК КАК УведомлениеОВыводеИзОборотаИСМПТК";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект.ДокументОснованиеНаименование = ?(Выборка.ТипУведомления = "Ввод", нСтр("ru='Уведомление о вводе в оборот'", "ru"), нСтр("ru='Уведомление о выводе из оборота'", "ru"));
			ДокументОбъект.ДокументОснованиеДата  = ДокументОбъект.Дата;
			ДокументОбъект.ДокументОснованиеНомер = ДокументОбъект.Номер;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Если Выборка.ТипУведомления = "Ввод" Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось обработать документ Уведомление о вводе в оборот %Ссылка% по причине: %Причина%'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось обработать документ Уведомление о выводе из оборота %Ссылка% по причине: %Причина%'");
			КонецЕсли;
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение, Метаданные.Документы.АгрегацияКодовМаркировкиСУЗИСМПТК, Выборка.Ссылка, ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
                                                
Функция ОбработкаОбменИСМПТ() Экспорт
	
	Возврат Обработки.ОбменИСМПТК.Создать();	
		
КонецФункции

Функция ПолучитьОписаниеТиповЧисла(Разрядность, РазрядностьДробнойЧасти, Неотрицательный = Ложь) Экспорт
	
	Если Неотрицательный Тогда
		Знак = ДопустимыйЗнак.Неотрицательный;
	Иначе
		Знак = ДопустимыйЗнак.Любой;
	КонецЕсли;
	
	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, Знак));

КонецФункции

Процедура ПриОпределенииПутиКФайлуЛогирования(ПутьКФайлу) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита);
	
	Возврат Результат[СтрЗаменить(ИмяРеквизита, ".", "")];
	
КонецФункции

Функция ПолучитьВалютуРегламентированногоУчета() Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + БК
	Возврат Константы.ВалютаРегламентированногоУчета.Получить();
	
	//Розница
	//Возврат Неопределено;
	///////////////////
		
КонецФункции

Функция ПолучитьСписокСтранЕАЭС() Экспорт
	
	Запрос = Новый Запрос();
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//Запрос.Текст =  "ВЫБРАТЬ
	//|	СтраныМира.Ссылка КАК Ссылка
	//|ИЗ
	//|	Справочник.СтраныМира КАК СтраныМира
	//|ГДЕ
	//|	СтраныМира.УчастникЕАЭС = ИСТИНА";
	
	//БК
	Запрос.Текст =  "ВЫБРАТЬ
	|	СтраныМира.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторСтранМира КАК СтраныМира
	|ГДЕ
	|	СтраныМира.УчастникТаможенногоСоюза <> &ПустойУчастникТС";
	
	Запрос.УстановитьПараметр("ПустойУчастникТС", Справочники.СтраныУчастникиТаможенногоСоюза.ПустаяСсылка());
	
	
	МассивСтранЕАЭС = Новый Массив();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСтранЕАЭС.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивСтранЕАЭС;
	
КонецФункции

Функция ПолучитьКодСтраны(Страна) Экспорт
	
	Возврат Страна.Код;
	
КонецФункции

Функция ПолучитьКонтактноеЛицо(ТекущийПользователь) Экспорт
	
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		ФизЛицо = ТекущийПользователь.ФизическоеЛицо;
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА
		//Возврат ?(ЗначениеЗаполнено(ФизЛицо), ФизЛицо.ФИО, "");
		
		//Розница + БК + УТ
		Возврат ?(ЗначениеЗаполнено(ФизЛицо), ФизЛицо.Наименование, "");
		///////////////////
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ТаблицаЗначенийВМассив(ТаблицаЗначений) Экспорт
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаЗначений);
	
КонецФункции

Функция ВыполнитьВФоне(Знач ИмяЭкспортнойПроцедуры, Знач ПараметрыПроцедуры, Знач ПараметрыВыполнения) Экспорт
	
	Возврат ДлительныеОперации.ЗапуститьВыполнениеВФоне(ПараметрыВыполнения.ИдентификаторФормы,
														ИмяЭкспортнойПроцедуры, 
														ПараметрыПроцедуры, 
														ПараметрыВыполнения.НаименованиеФоновогоЗадания, 
														Ложь);
	
КонецФункции

Функция ФоновоеЗаданиеЗапущено(Знач ИмяПроцедуры) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЗаданиеАктивно", Ложь);
	
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода, Состояние", ИмяПроцедуры, СостояниеФоновогоЗадания.Активно));
		
	Если МассивФоновыхЗаданий.Количество() > 0 Тогда
		СтруктураВозврата.Вставить("ЗаданиеАктивно", Истина);
		СтруктураВозврата.Вставить("Расположение", МассивФоновыхЗаданий[0].Расположение);
		СтруктураВозврата.Вставить("Начало",  МассивФоновыхЗаданий[0].Начало);
	КонецЕсли;		
	
	Возврат СтруктураВозврата;

КонецФункции

Процедура УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

функция ВыводитьПодробнуюИнформациюПриЗагрузкеДанных() Экспорт
	
	Возврат Ложь;
	
КонецФункции

Функция НайтиНедопустимыеСимволыXMLПлатформа(Штрихкод) Экспорт
	
	Возврат ПозицияНедопустимогоСимвола(Штрихкод) > 0;

КонецФункции 

Функция ПозицияНедопустимогоСимвола(Штрихкод) Экспорт
	
	КодПроверки = "ПозицияНедопустимогоСимвола = НайтиНедопустимыеСимволыXML(Штрихкод)";
	ПозицияНедопустимогоСимвола = 0;
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии("8.3.20.0", СисИнфо.ВерсияПриложения) < 0 Тогда 
		КодПроверки = "ПозицияНедопустимогоСимвола = ОбработкаСтрокиXML.НайтиНедопустимыеСимволыXML(Штрихкод)";
	КонецЕсли;
	
	Выполнить(КодПроверки);
	
	Возврат ПозицияНедопустимогоСимвола;

КонецФункции

#Область СтандартныеПодсистемы

Процедура ПриЗаполненииОграниченияДоступа(Ограничение, ИмяДокумента) Экспорт

КонецПроцедуры



#КонецОбласти

#КонецОбласти

#Область ИнфоОСервисе

Функция ПолучитьИнформациюОСервисе() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//Разработка
	ИмяОсновнойПодсистемы = "Маркировка_ИнтеграцияИСМПТ";
	///////////////////
	
	ТекстОбщий = "ВЫБРАТЬ
	|	ВерсииПодсистем.Версия КАК Версия
	|ИЗ
	|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
	|ГДЕ
	|	ВерсииПодсистем.ИмяПодсистемы = &ИмяПодсистемы";
					
	//Основная подсистема
	ЗапросОсновная = Новый Запрос();
	ЗапросОсновная.Текст = ТекстОбщий;
	ЗапросОсновная.УстановитьПараметр("ИмяПодсистемы", ИмяОсновнойПодсистемы);
	РезультатОсновная = ЗапросОсновная.Выполнить().Выбрать();
	Если Не РезультатОсновная.Количество() = 0 Тогда
		Пока РезультатОсновная.Следующий() Цикл
			ВерсияОсновнойПодсистемы = РезультатОсновная.Версия;
			Прервать;
		КонецЦикла;
	Иначе                                  
		ВерсияОсновнойПодсистемы = "0.0.0.0";
	КонецЕсли;
	
	//Подсистема библиотеки
	ЗапросБиблиотека = Новый Запрос();
	ЗапросБиблиотека.Текст = ТекстОбщий;
	ЗапросБиблиотека.УстановитьПараметр("ИмяПодсистемы", "Маркировка_ИнтеграцияИСМПТ"); //Имя библиотеки стандартное
	РезультатБиблиотека = ЗапросБиблиотека.Выполнить().Выбрать();
	Если Не РезультатБиблиотека.Количество() = 0 Тогда
		Пока РезультатБиблиотека.Следующий() Цикл
			ВерсияБиблиотечнойПодсистемы = РезультатБиблиотека.Версия;
			Прервать;
		КонецЦикла;
	Иначе                                  
		ВерсияБиблиотечнойПодсистемы = "0.0.0.0";
	КонецЕсли;
	
	Информация = Новый Структура();
	Информация.Вставить("Основная",   	ВерсияОсновнойПодсистемы);
	Информация.Вставить("Библиотека", 	ВерсияБиблиотечнойПодсистемы);
	Информация.Вставить("Конфигурация", Метаданные.Синоним);
	
	Возврат Информация;
	
КонецФункции

#КонецОбласти

#Область РолиИПрофили

Процедура ПриЗаполненииПоставляемыхПрофилейГруппДоступаБК(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	РежимЗаполнения = Новый Структура();
	РежимЗаполнения.Вставить("ВключатьПроизводство");  	 //Заказ, Нанесение, Пул кодов
	РежимЗаполнения.Вставить("ВключатьИнвентаризация");	 //Ввод и вывод из оборота
	РежимЗаполнения.Вставить("ВключатьТорговляОпт");	 //АПП и УОР
	РежимЗаполнения.Вставить("ВключатьТорговляРозница"); //Чеки ККМ
	РежимЗаполнения.Вставить("ВключатьИмпортЭкспорт");	 //Ввоз ЕАЭС/Импорт
	РежимЗаполнения.Вставить("Продажа");	//Дополняют ИмпортЭкспорт: Экспорт ЕАЭС
	РежимЗаполнения.Вставить("Закупка");	//Дополняют ИмпортЭкспорт: Отгрузка и Приемка ЕАЭС
	
	Для Каждого Профиль Из ОписанияПрофилей Цикл
		
		// Профиль Бухгалтер
		Если Профиль.Идентификатор = "75fa0eca-98aa-11df-b54f-e0cb4ed5f655" Тогда
			
			НазначитьРолиОбщегоНазначения(Профиль);
			НазначитьРолиИзмененияОбъектов(Профиль);
			НазначитьРолиДополнительныйФункционал(Профиль);
			//НазначитьРолиАгрегирования(Профиль, РежимЗаполнения);
			НазначитьРолиАгрегирования(Профиль);
						
		КонецЕсли;
		
		// Профиль Главный бухгалтер
		Если Профиль.Идентификатор = "75fa0ecb-98aa-11df-b54f-e0cb4ed5f655" Тогда
			
			НазначитьРолиОбщегоНазначения(Профиль);
			НазначитьРолиИзмененияОбъектов(Профиль);
			НазначитьРолиАдминистратора(Профиль);
			НазначитьРолиБухУчета(Профиль);
			//НазначитьРолиАгрегирования(Профиль, РежимЗаполнения);
			НазначитьРолиАгрегирования(Профиль);
			НазначитьРолиДополнительныйФункционал(Профиль);
						
		КонецЕсли;
		
		// Профиль Менеджер по продажам
		Если Профиль.Идентификатор = "c7e34f11-9890-11df-b54f-e0cb4ed5f655" Тогда
			                  
			РежимЗаполнения.ВключатьПроизводство 	= Ложь;
			РежимЗаполнения.ВключатьИнвентаризация  = Истина; //для доступа к подсистеме
			РежимЗаполнения.ВключатьТорговляОпт 	= Истина;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Истина;
			РежимЗаполнения.Продажа = Истина; 
			РежимЗаполнения.Закупка = Ложь;
			РежимЗаполнения.ВключатьТорговляРозница = Истина;
			
			НазначитьРолиОбщегоНазначения(Профиль, РежимЗаполнения); 
			НазначитьРолиАгрегирования(Профиль, РежимЗаполнения);
			
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь; //исключаем увед. о вводе
			РежимЗаполнения.ВключатьТорговляРозница = Ложь; //исключаем создание чеков
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеРозничноеВыбытиеМаркированнойПродукцииИСМПТК.Имя);
			
			//Добавляем из Инвентаризации только Вывод
			Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОВыводеИзОборотаИСМПТК.Имя);
			
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			НазначитьРолиБухУчета(Профиль); 
			
		КонецЕсли;
		
		// Профиль Менеджер по закупкам
		Если Профиль.Идентификатор = "75fa0ecc-98aa-11df-b54f-e0cb4ed5f655" Тогда
			                  
			РежимЗаполнения.ВключатьПроизводство 	= Истина;
			РежимЗаполнения.ВключатьТорговляОпт 	= Истина;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Истина;
			РежимЗаполнения.Продажа = Ложь; 
			РежимЗаполнения.Закупка = Истина;
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			
			НазначитьРолиОбщегоНазначения(Профиль,  РежимЗаполнения); 
			
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь;//исключаем увед. о выводе
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			
			//Добавляем из Инвентаризации только Ввод в оборот
			Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОВводеВОборотИСМПТК.Имя);
			
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			НазначитьРолиАгрегирования(Профиль, РежимЗаполнения);
			НазначитьРолиБухУчета(Профиль); 
			
		КонецЕсли;
		
		// Профиль Только просмотр
		Если Профиль.Идентификатор = "45ce5549-ade3-11e0-9746-00179a3853da" Тогда
			
			НазначитьРолиОбщегоНазначения(Профиль);
			НазначитьРолиЧтенияОбъектов(Профиль);
			
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры

Процедура ПриЗаполненииПоставляемыхПрофилейГруппДоступаУТ(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	РежимЗаполнения = Новый Структура();
	РежимЗаполнения.Вставить("ВключатьПроизводство");  	 //Заказ, Нанесение, Пул кодов
	РежимЗаполнения.Вставить("ВключатьИнвентаризация");	 //Ввод и вывод из оборота
	РежимЗаполнения.Вставить("ВключатьТорговляОпт");	 //АПП и УОР
	РежимЗаполнения.Вставить("ВключатьТорговляРозница"); //Чеки ККМ
	РежимЗаполнения.Вставить("ВключатьИмпортЭкспорт");	 //Ввоз ЕАЭС/Импорт
	РежимЗаполнения.Вставить("Продажа");	//Дополняют ИмпортЭкспорт: Экспорт ЕАЭС
	РежимЗаполнения.Вставить("Закупка");	//Дополняют ИмпортЭкспорт: Отгрузка и Приемка ЕАЭС
	
	//Изменени типовых профилей
	Для Каждого Профиль Из ОписанияПрофилей Цикл
		
#Область УправлениеДоступомУТ

		// Профиль Кладовщик
		Если Профиль.Идентификатор = "28f1fe22-299d-4135-ac9f-fe338ce51571" Тогда
						
			РежимЗаполнения.ВключатьПроизводство 	= Истина;
			РежимЗаполнения.ВключатьИнвентаризация  = Истина;
			РежимЗаполнения.ВключатьТорговляОпт 	= Истина;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Истина;
			РежимЗаполнения.Продажа = Истина;
			РежимЗаполнения.Закупка = Истина;
			РежимЗаполнения.ВключатьТорговляРозница = Истина;
			
			НазначитьРолиЧтенияОбъектов(Профиль, РежимЗаполнения);
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			НазначитьРолиАгрегирования(Профиль, РежимЗаполнения);
			
			РежимЗаполнения.ВключатьТорговляРозница = Ложь; 
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения); //есть ограничения по чекам
			
			НазначитьРолиОбщегоНазначения(Профиль, РежимЗаполнения); 
			НазначитьРолиБухУчета(Профиль); 
			
		КонецЕсли;
		
		// Профиль Бухгалтер
		Если Профиль.Идентификатор = "84acd69c-4114-4d0a-82b2-226033948e12" Тогда
			
			РежимЗаполнения.ВключатьПроизводство 	= Ложь;
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
			РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
						
			НазначитьРолиОбщегоНазначения(Профиль,  РежимЗаполнения);
			НазначитьРолиЧтенияОбъектов(Профиль,    РежимЗаполнения);		
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			НазначитьРолиБухУчета(Профиль); 
			
		КонецЕсли;
				
		// Профиль Продавец-кассир
		Если Профиль.Идентификатор = "b93bb8a1-04fa-4c1a-ac3c-75fb05366782" Тогда
			                  
			РежимЗаполнения.ВключатьПроизводство 	= Ложь;
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
			РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
			РежимЗаполнения.ВключатьТорговляРозница = Истина;
			
			НазначитьРолиОбщегоНазначения(Профиль,  РежимЗаполнения); //Для проверки констант
			НазначитьРолиЧтенияОбъектов(Профиль, 	РежимЗаполнения);		
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
						
		КонецЕсли;
		
		// Профиль Кассир
		Если Профиль.Идентификатор = "1167e360-4f81-4114-968e-c4264a06baa0" Тогда
			                  
			РежимЗаполнения.ВключатьПроизводство 	= Ложь;
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
			РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
			РежимЗаполнения.ВключатьТорговляРозница = Истина;
			
			НазначитьРолиОбщегоНазначения(Профиль,  РежимЗаполнения);  //Для проверки констант
			НазначитьРолиЧтенияОбъектов(Профиль, 	РежимЗаполнения);		
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);

		КонецЕсли;
		
		// Профиль Руководитель отдела продаж
		Если Профиль.Идентификатор = "ae883b07-11cf-4bea-9bce-46473350db16" Тогда
			                  
			РежимЗаполнения.ВключатьПроизводство 	= Истина;
			РежимЗаполнения.ВключатьИнвентаризация  = Истина;
			РежимЗаполнения.ВключатьТорговляОпт 	= Истина;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Истина;
			РежимЗаполнения.Продажа = Истина; 
			РежимЗаполнения.Закупка = Ложь;
			РежимЗаполнения.ВключатьТорговляРозница = Истина;
			
			НазначитьРолиОбщегоНазначения(Профиль,  РежимЗаполнения); 
			НазначитьРолиЧтенияОбъектов(Профиль, 	РежимЗаполнения);		
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			НазначитьРолиАгрегирования(Профиль, РежимЗаполнения);
			
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);  //есть ограничения по чекам
						
		КонецЕсли;
		
		// Профиль Менеджер по продажам
		Если Профиль.Идентификатор = "44d4fd93-99ca-40e7-be0a-3b0321a39d3b" Тогда
			                  
			РежимЗаполнения.ВключатьПроизводство 	= Ложь;
			РежимЗаполнения.ВключатьИнвентаризация  = Истина; //для доступа к подсистеме
			РежимЗаполнения.ВключатьТорговляОпт 	= Истина;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Истина;
			РежимЗаполнения.Продажа = Истина; 
			РежимЗаполнения.Закупка = Ложь;
			РежимЗаполнения.ВключатьТорговляРозница = Истина;
			
			НазначитьРолиОбщегоНазначения(Профиль, РежимЗаполнения); 
			НазначитьРолиАгрегирования(Профиль, РежимЗаполнения);
			
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь; //исключаем увед. о вводе
			НазначитьРолиЧтенияОбъектов(Профиль,   РежимЗаполнения);		
						
			РежимЗаполнения.ВключатьТорговляРозница = Ложь; //исключаем создание чеков
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			
			//Добавляем из Инвентаризации только Вывод
			Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОВыводеИзОборотаИСМПТК.Имя);
			Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОВыводеИзОборотаИСМПТК.Имя);
			
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			НазначитьРолиБухУчета(Профиль); 
			
		КонецЕсли;
		
		// Профиль Менеджер по закупкам
		Если Профиль.Идентификатор = "12bb4321-60bb-4bbd-a1fc-4c84fb3c1133" Тогда
			                  
			РежимЗаполнения.ВключатьПроизводство 	= Истина;
			РежимЗаполнения.ВключатьИнвентаризация  = Истина; //для доступа к подсистеме
			РежимЗаполнения.ВключатьТорговляОпт 	= Истина;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Истина;
			РежимЗаполнения.Продажа = Ложь; 
			РежимЗаполнения.Закупка = Истина;
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			
			НазначитьРолиОбщегоНазначения(Профиль,  РежимЗаполнения); 
			
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь;//исключаем увед. о выводе
			НазначитьРолиЧтенияОбъектов(Профиль,    РежимЗаполнения);		
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			
			//Добавляем из Инвентаризации только Ввод в оборот
			Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОВводеВОборотИСМПТК.Имя);
			Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОВводеВОборотИСМПТК.Имя);
			
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			НазначитьРолиАгрегирования(Профиль, РежимЗаполнения);
			НазначитьРолиБухУчета(Профиль); 
			
		КонецЕсли;
		
		// Профиль Менеджер по доставке
		Если Профиль.Идентификатор = "d3e34937-0a73-4468-8105-8f9ab0e311ac" Тогда
			                  
			РежимЗаполнения.ВключатьПроизводство 	= Истина; //для доступа к подсистеме
			РежимЗаполнения.ВключатьИнвентаризация  = Истина; //для доступа к подсистеме
			РежимЗаполнения.ВключатьТорговляОпт 	= Истина;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Истина;
			РежимЗаполнения.Продажа = Истина; 
			РежимЗаполнения.Закупка = Истина;
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			
			НазначитьРолиОбщегоНазначения(Профиль, РежимЗаполнения); 
			
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь;//исключаем увед. о вводе
			НазначитьРолиЧтенияОбъектов(Профиль, РежимЗаполнения);
			РежимЗаполнения.ВключатьПроизводство = Ложь; //исключаем возможность создания
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
						
			//Добавляем из Инвентаризации только Вывод
			Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОВыводеИзОборотаИСМПТК.Имя);
			Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОВыводеИзОборотаИСМПТК.Имя);
			
			//Агрегация - только чтение
			Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеАгрегацийИСМПТК.Имя);
			
			Профиль.Роли.Добавить(Метаданные.Роли.ИспользованиеМобильногоПриложенияИСМПТК.Имя);
			Профиль.Роли.Добавить(Метаданные.Роли.ИспользованиеОбработкиОбъединенияНесколькихФайловИСМПТК.Имя);
	
		КонецЕсли;
		
		// Профиль Менеджер по розничной торговле
		Если Профиль.Идентификатор = "4c72e308-ff96-40b3-b066-f2dfda73d323" Тогда
			                  
			РежимЗаполнения.ВключатьПроизводство 	= Ложь;
			РежимЗаполнения.ВключатьИнвентаризация  = Истина; 
			РежимЗаполнения.ВключатьТорговляОпт 	= Истина;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
			РежимЗаполнения.Продажа = Ложь; 
			РежимЗаполнения.Закупка = Ложь;
			РежимЗаполнения.ВключатьТорговляРозница = Истина;
			
			НазначитьРолиОбщегоНазначения(Профиль,  РежимЗаполнения); 
			НазначитьРолиЧтенияОбъектов(Профиль,    РежимЗаполнения);		
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			
			//Добавляем из Инвентаризации только Ввод в оборот
			Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОВводеВОборотИСМПТК.Имя);
			Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОВводеВОборотИСМПТК.Имя);
			
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь; 
			РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			
		КонецЕсли;
		
#КонецОбласти

	КонецЦикла;	
	
	//добавление новых профилей
#Область Описание_профиля_МенеджерОптовойТорговлиИСМПТ

	//Профиль предназначен для работы пользователя сервиса 1С:Маркировка,
	//обеспечивает доступность документов товародвижения (закупка и продажа)
	//и использование дополнительных связанных возможностей.
	
	// Профиль "Менеджер оптовой торговли (ИС МПТ)".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "МенеджерОптовойТорговлиИСМПТ";
	ОписаниеПрофиля.Идентификатор = "2943a2d6-82b3-495d-82cd-9644337e537ac";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Менеджер оптовой торговли (ИС МПТ) (дополнительный)'");

	РежимЗаполнения.ВключатьПроизводство 	= Ложь;
	РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
	РежимЗаполнения.ВключатьТорговляОпт 	= Истина;
	РежимЗаполнения.ВключатьИмпортЭкспорт 	= Истина;
	РежимЗаполнения.Продажа = Истина; 
	РежимЗаполнения.Закупка = Истина;
	РежимЗаполнения.ВключатьТорговляРозница = Ложь;
	
	НазначитьРолиОбщегоНазначения(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиЧтенияОбъектов(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиИзмененияОбъектов(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиДополнительныйФункционал(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиАгрегирования(ОписаниеПрофиля, РежимЗаполнения);
	
	// Описание поставляемого профиля.
	ОписаниеПрофиля.Описание = НСтр("ru = 'Под профилем осуществляется доступ в ИБ менеджера по продажам или закупкам маркируемой продукции,
	                                      |оформление Актов приема/передачи и Уведомлений о ввозе, Уведомлений о приемке и экспорте товаров,
	                                      |осуществляется обмен данными с ИС МПТ, запрос информации о кодах маркировки,
										  |синхронизация данных с мобильным приложением ""1С:Маркировка"".'");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);

#КонецОбласти

#Область Описание_профиля_МенеджерРозничнойТорговлиИСМПТ

	//Профиль предназначен для работы пользователя сервиса 1С:Маркировка,
	//обеспечивает доступность документов розничного контура работы с маркировкой.
		
	// Профиль "Менеджер оптовой торговли (ИС МПТ)".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "МенеджерРозничнойТорговлиИСМПТ";
	ОписаниеПрофиля.Идентификатор = "10f63258-3d46-4eb6-922b-458837339dcd";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Менеджер розничной торговли (ИС МПТ) (дополнительный)'");
	
	РежимЗаполнения.ВключатьПроизводство 	= Ложь;
	РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
	РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
	РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
	РежимЗаполнения.Продажа = Ложь; 
	РежимЗаполнения.Закупка = Ложь;
	РежимЗаполнения.ВключатьТорговляРозница = Истина;
	
	НазначитьРолиОбщегоНазначения(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиЧтенияОбъектов(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиИзмененияОбъектов(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиДополнительныйФункционал(ОписаниеПрофиля, РежимЗаполнения);
	
	// Описание поставляемого профиля.
	ОписаниеПрофиля.Описание = НСтр("ru = 'Под профилем осуществляется доступ в ИБ менеджера по розничным продажам маркируемой продукции
										  |и использование некоторых дополнительных возможностей сервиса ""1С:Маркировка"".'");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);

#КонецОбласти

#Область Описание_профиля_КладовщикМаркировкиИСМПТ

	//Профиль предназначен для работы пользователя сервиса 1С:Маркировка,
	//обеспечивает доступность документов инвентаризации (ввод и вывод из оборота)
	//и использование дополнительных связанных возможностей.
	
	// Профиль "Кладовщик маркировки (ИС МПТ)".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "КладовщикМаркировкиИСМПТ";
	ОписаниеПрофиля.Идентификатор = "b2c25748-ed2f-4f02-a5b2-adc193227506";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Кладовщик маркировки (ИС МПТ) (дополнительный)'");
	
	РежимЗаполнения.ВключатьПроизводство 	= Ложь;
	РежимЗаполнения.ВключатьИнвентаризация  = Истина;
	РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
	РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
	РежимЗаполнения.Продажа = Ложь; 
	РежимЗаполнения.Закупка = Ложь;
	РежимЗаполнения.ВключатьТорговляРозница = Ложь;

	НазначитьРолиОбщегоНазначения(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиЧтенияОбъектов(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиИзмененияОбъектов(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиДополнительныйФункционал(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиАгрегирования(ОписаниеПрофиля, РежимЗаполнения);
	
	// Описание поставляемого профиля.
	ОписаниеПрофиля.Описание = НСтр("ru = 'Под профилем осуществляется доступ в ИБ кладовщика по работе с маркируемой продукцией,
	                                      |оформление Уведомлений о вводе и выводе из оборота, формирование Агрегаций кодов маркировки,
	                                      |осуществляется обмен данными с ИС МПТ, проверка информации о кодах маркировки,
										  |синхронизация данных с мобильным приложением ""1С:Маркировка"".'");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);

#КонецОбласти

#Область Описание_профиля_МенеджерПроизводстваИСМПТ

	//Профиль предназначен для работы пользователя сервиса 1С:Маркировка,
	//обеспечивает доступность документов производственного контура (заказ кодов и их печать)
	//и использование дополнительных связанных возможностей.
	
	// Профиль "Менеджер производства (ИС МПТ)".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "МенеджерПроизводстваИСМПТ";
	ОписаниеПрофиля.Идентификатор = "db186caa-acae-4384-a5d3-da76cdd4d67f";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Менеджер производства (ИС МПТ) (дополнительный)'");
	
	РежимЗаполнения.ВключатьПроизводство 	= Истина;
	РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
	РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
	РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
	РежимЗаполнения.Продажа = Ложь; 
	РежимЗаполнения.Закупка = Ложь;
	РежимЗаполнения.ВключатьТорговляРозница = Ложь;
	
	НазначитьРолиОбщегоНазначения(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиЧтенияОбъектов(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиИзмененияОбъектов(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиДополнительныйФункционал(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиАгрегирования(ОписаниеПрофиля, РежимЗаполнения);
	
	// Описание поставляемого профиля.
	ОписаниеПрофиля.Описание = НСтр("ru = 'Под профилем осуществляется доступ в ИБ менеджера по производству маркируемой продукции,
	                                      |оформление Заказов на эмиссию кодов, их печать и нанесение, формирование Агрегаций кодов маркировки,
	                                      |осуществляется обмен данными с СУЗ, проверка информации о кодах маркировки"".'");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);

#КонецОбласти

КонецПроцедуры

Процедура ПриЗаполненииПоставляемыхПрофилейГруппДоступаКА(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	РежимЗаполнения = Новый Структура();
	РежимЗаполнения.Вставить("ВключатьПроизводство");  	 //Заказ, Нанесение, Пул кодов
	РежимЗаполнения.Вставить("ВключатьИнвентаризация");	 //Ввод и вывод из оборота
	РежимЗаполнения.Вставить("ВключатьТорговляОпт");	 //АПП и УОР
	РежимЗаполнения.Вставить("ВключатьТорговляРозница"); //Чеки ККМ
	РежимЗаполнения.Вставить("ВключатьИмпортЭкспорт");	 //Ввоз ЕАЭС/Импорт
	РежимЗаполнения.Вставить("Продажа");	//Дополняют ИмпортЭкспорт: Экспорт ЕАЭС
	РежимЗаполнения.Вставить("Закупка");	//Дополняют ИмпортЭкспорт: Отгрузка и Приемка ЕАЭС
	
	//ЕРП, КА, УТ
	Для Каждого Профиль Из ОписанияПрофилей Цикл

#Область УправлениеДоступомКА

		// Профиль Экономист производства
		Если Профиль.Идентификатор = "86f1e49f-7c35-11e7-9719-708bcd551b9e" Тогда
			                  
			РежимЗаполнения.ВключатьПроизводство 	= Истина;
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
			РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
			РежимЗаполнения.Продажа = Ложь; 
			РежимЗаполнения.Закупка = Ложь;
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			
			НазначитьРолиОбщегоНазначения(Профиль,  РежимЗаполнения); 
			НазначитьРолиЧтенияОбъектов(Профиль, 	РежимЗаполнения);
			
			РежимЗаполнения.ВключатьПроизводство 	= Ложь;
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			
			НазначитьРолиБухУчета(Профиль); 
			
		КонецЕсли;
		
		// Профиль Локальный диспетчер производства
		Если Профиль.Идентификатор = "2c1871fb-5fef-408d-adf8-4edcb6ab6c5c" Тогда
			
			РежимЗаполнения.ВключатьПроизводство 	= Истина;
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
			РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
			РежимЗаполнения.Продажа = Ложь; 
			РежимЗаполнения.Закупка = Ложь;
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			
			НазначитьРолиОбщегоНазначения(Профиль, 	РежимЗаполнения); 
			НазначитьРолиЧтенияОбъектов(Профиль,   	РежимЗаполнения);
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			НазначитьРолиАгрегирования(Профиль, РежимЗаполнения);
			
		КонецЕсли;
		
#КонецОбласти

	КонецЦикла;	

///////////////////
	
КонецПроцедуры

Процедура ПриЗаполненииПоставляемыхПрофилейГруппДоступаУП(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	РежимЗаполнения = Новый Структура();
	РежимЗаполнения.Вставить("ВключатьПроизводство");  	 //Заказ, Нанесение, Пул кодов
	РежимЗаполнения.Вставить("ВключатьИнвентаризация");	 //Ввод и вывод из оборота
	РежимЗаполнения.Вставить("ВключатьТорговляОпт");	 //АПП и УОР
	РежимЗаполнения.Вставить("ВключатьТорговляРозница"); //Чеки ККМ
	РежимЗаполнения.Вставить("ВключатьИмпортЭкспорт");	 //Ввоз ЕАЭС/Импорт
	РежимЗаполнения.Вставить("Продажа");	//Дополняют ИмпортЭкспорт: Экспорт ЕАЭС
	РежимЗаполнения.Вставить("Закупка");	//Дополняют ИмпортЭкспорт: Отгрузка и Приемка ЕАЭС
	
	//ЕРП, КА, УТ
	Для Каждого Профиль Из ОписанияПрофилей Цикл

#Область УправлениеДоступомУП

		// Профиль Менеджер производства
		Если Профиль.Идентификатор = "a90d907c-a823-454b-8bc0-5e5f1807c835" Тогда
			
			РежимЗаполнения.ВключатьПроизводство 	= Истина;
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
			РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
			РежимЗаполнения.Продажа = Ложь; 
			РежимЗаполнения.Закупка = Ложь;
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			
			НазначитьРолиОбщегоНазначения(Профиль,  РежимЗаполнения);
			НазначитьРолиЧтенияОбъектов(Профиль, 	РежимЗаполнения);
			
			РежимЗаполнения.ВключатьПроизводство 	= Ложь;
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения); 
			
		КонецЕсли;
		 		 
		// Профиль Главный диспетчер производства
		Если Профиль.Идентификатор = "90a9321f-a088-47f1-afd4-47b8f052ebc1" Тогда
			
			РежимЗаполнения.ВключатьПроизводство 	= Истина;
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
			РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
			РежимЗаполнения.Продажа = Ложь; 
			РежимЗаполнения.Закупка = Ложь;
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			
			НазначитьРолиОбщегоНазначения(Профиль, 	РежимЗаполнения); 
			НазначитьРолиЧтенияОбъектов(Профиль,   	РежимЗаполнения);
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			НазначитьРолиАгрегирования(Профиль, РежимЗаполнения);
			
		КонецЕсли;
		
#КонецОбласти

	КонецЦикла;	

	///////////////////
	
КонецПроцедуры

Процедура ПриЗаполненииПоставляемыхПрофилейГруппДоступаРозница(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	РежимЗаполнения = Новый Структура();
	РежимЗаполнения.Вставить("ВключатьПроизводство");  	 //Заказ, Нанесение, Пул кодов
	РежимЗаполнения.Вставить("ВключатьИнвентаризация");	 //Ввод и вывод из оборота
	РежимЗаполнения.Вставить("ВключатьТорговляОпт");	 //АПП и УОР
	РежимЗаполнения.Вставить("ВключатьТорговляРозница"); //Чеки ККМ
	РежимЗаполнения.Вставить("ВключатьИмпортЭкспорт");	 //Ввоз ЕАЭС/Импорт
	РежимЗаполнения.Вставить("Продажа");	//Дополняют ИмпортЭкспорт: Экспорт ЕАЭС
	РежимЗаполнения.Вставить("Закупка");	//Дополняют ИмпортЭкспорт: Отгрузка и Приемка ЕАЭС
	
	Для Каждого Профиль Из ОписанияПрофилей Цикл

		// Профиль Кассир
		Если Профиль.Идентификатор = "e8621c62-d520-4c79-aa32-d831c6140a5f" Тогда
			
			РежимЗаполнения.ВключатьПроизводство 	= Ложь;
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
			РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
			РежимЗаполнения.ВключатьТорговляРозница = Истина;
			
			НазначитьРолиОбщегоНазначения(Профиль,  РежимЗаполнения);  //Для проверки констант
			НазначитьРолиЧтенияОбъектов(Профиль, 	РежимЗаполнения);		
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения); 
			
		КонецЕсли;
		
		//Кладовщик
		Если Профиль.Идентификатор = "44639859-e400-461d-a1f8-c469b03298e4" Тогда
			
			РежимЗаполнения.ВключатьПроизводство 	= Истина;
			РежимЗаполнения.ВключатьИнвентаризация  = Истина;
			РежимЗаполнения.ВключатьТорговляОпт 	= Истина;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Истина;
			РежимЗаполнения.Продажа = Истина;
			РежимЗаполнения.Закупка = Истина;
			РежимЗаполнения.ВключатьТорговляРозница = Истина;
			
			НазначитьРолиЧтенияОбъектов(Профиль, РежимЗаполнения);
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			НазначитьРолиАгрегирования(Профиль, РежимЗаполнения);
			
			РежимЗаполнения.ВключатьТорговляРозница = Ложь; 
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения); //есть ограничения по чекам
			
			НазначитьРолиОбщегоНазначения(Профиль, РежимЗаполнения); 
			НазначитьРолиБухУчета(Профиль); 
			
		КонецЕсли;
		
		//Продавец
		Если Профиль.Идентификатор = "91cfadaa-9c9e-4535-ae62-4fc5e5749182" Тогда
			
			РежимЗаполнения.ВключатьПроизводство 	= Ложь;
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
			РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
			РежимЗаполнения.ВключатьТорговляРозница = Истина;
			
			НазначитьРолиОбщегоНазначения(Профиль,  РежимЗаполнения); //Для проверки констант
			НазначитьРолиЧтенияОбъектов(Профиль, 	РежимЗаполнения);		
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения); 
			
		КонецЕсли;

		//Кассир операционной кассы
		Если Профиль.Идентификатор = "4885520e-0ed2-4357-aca8-23041ea4998e" Тогда
			
			РежимЗаполнения.ВключатьПроизводство 	= Ложь;
			РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
			РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
						
			НазначитьРолиОбщегоНазначения(Профиль,  РежимЗаполнения);
			НазначитьРолиЧтенияОбъектов(Профиль,    РежимЗаполнения);		
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			НазначитьРолиБухУчета(Профиль); 
			
		КонецЕсли;
		
		//Управляющий
		Если Профиль.Идентификатор = "7d509b56-976f-4b67-9f0b-a93de75c2134" Тогда
			
			РежимЗаполнения.ВключатьПроизводство 	= Истина;
			РежимЗаполнения.ВключатьИнвентаризация  = Истина;
			РежимЗаполнения.ВключатьТорговляОпт 	= Истина;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Истина;
			РежимЗаполнения.Продажа = Истина; 
			РежимЗаполнения.Закупка = Ложь;
			РежимЗаполнения.ВключатьТорговляРозница = Истина;
			
			НазначитьРолиОбщегоНазначения(Профиль,  РежимЗаполнения); 
			НазначитьРолиЧтенияОбъектов(Профиль, 	РежимЗаполнения);		
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			НазначитьРолиАгрегирования(Профиль, РежимЗаполнения);
			
			РежимЗаполнения.ВключатьТорговляРозница = Ложь;
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения); 
			
		КонецЕсли;
		
		//Менеджер
		Если Профиль.Идентификатор = "069a4464-42a0-4c5e-93da-4fcd98c713a7" Тогда
			
			РежимЗаполнения.ВключатьПроизводство 	= Ложь;
			РежимЗаполнения.ВключатьИнвентаризация  = Истина; //для доступа к подсистеме
			РежимЗаполнения.ВключатьТорговляОпт 	= Истина;
			РежимЗаполнения.ВключатьИмпортЭкспорт 	= Истина;
			РежимЗаполнения.Продажа = Истина; 
			РежимЗаполнения.Закупка = Истина;
			РежимЗаполнения.ВключатьТорговляРозница = Истина;
			
			НазначитьРолиОбщегоНазначения(Профиль, РежимЗаполнения); 
			НазначитьРолиАгрегирования(Профиль, РежимЗаполнения);
			НазначитьРолиЧтенияОбъектов(Профиль,   РежимЗаполнения);		
						
			РежимЗаполнения.ВключатьТорговляРозница = Ложь; //исключаем создание чеков
			НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения);
			
			НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения);
			НазначитьРолиБухУчета(Профиль);
 
			
		КонецЕсли;
		
	КонецЦикла;	

		//добавление новых профилей
#Область Описание_профиля_МенеджерОптовойТорговлиИСМПТ

	//Профиль предназначен для работы пользователя сервиса 1С:Маркировка,
	//обеспечивает доступность документов товародвижения (закупка и продажа)
	//и использование дополнительных связанных возможностей.
	
	// Профиль "Менеджер оптовой торговли (ИС МПТ)".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "МенеджерОптовойТорговлиИСМПТ";
	ОписаниеПрофиля.Идентификатор = "e47572c1-320d-493b-b8cd-6fcce8a392aa";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Менеджер оптовой торговли (ИС МПТ) (дополнительный)'");

	РежимЗаполнения.ВключатьПроизводство 	= Ложь;
	РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
	РежимЗаполнения.ВключатьТорговляОпт 	= Истина;
	РежимЗаполнения.ВключатьИмпортЭкспорт 	= Истина;
	РежимЗаполнения.Продажа = Истина; 
	РежимЗаполнения.Закупка = Истина;
	РежимЗаполнения.ВключатьТорговляРозница = Ложь;
	
	НазначитьРолиОбщегоНазначения(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиЧтенияОбъектов(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиИзмененияОбъектов(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиДополнительныйФункционал(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиАгрегирования(ОписаниеПрофиля, РежимЗаполнения);
	
	// Описание поставляемого профиля.
	ОписаниеПрофиля.Описание = НСтр("ru = 'Под профилем осуществляется доступ в ИБ менеджера по продажам или закупкам маркируемой продукции,
	                                      |оформление Актов приема/передачи и Уведомлений о ввозе, Уведомлений о приемке и экспорте товаров,
	                                      |осуществляется обмен данными с ИС МПТ, запрос информации о кодах маркировки,
										  |синхронизация данных с мобильным приложением ""1С:Маркировка"".'");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);

#КонецОбласти

#Область Описание_профиля_МенеджерРозничнойТорговлиИСМПТ

	//Профиль предназначен для работы пользователя сервиса 1С:Маркировка,
	//обеспечивает доступность документов розничного контура работы с маркировкой.
		
	// Профиль "Менеджер оптовой торговли (ИС МПТ)".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "МенеджерРозничнойТорговлиИСМПТ";
	ОписаниеПрофиля.Идентификатор = "10f63258-3d46-4eb6-922b-458837339dcd";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Менеджер розничной торговли (ИС МПТ) (дополнительный)'");
	
	РежимЗаполнения.ВключатьПроизводство 	= Ложь;
	РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
	РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
	РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
	РежимЗаполнения.Продажа = Ложь; 
	РежимЗаполнения.Закупка = Ложь;
	РежимЗаполнения.ВключатьТорговляРозница = Истина;
	
	НазначитьРолиОбщегоНазначения(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиЧтенияОбъектов(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиИзмененияОбъектов(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиДополнительныйФункционал(ОписаниеПрофиля, РежимЗаполнения);
	
	// Описание поставляемого профиля.
	ОписаниеПрофиля.Описание = НСтр("ru = 'Под профилем осуществляется доступ в ИБ менеджера по розничным продажам маркируемой продукции
										  |и использование некоторых дополнительных возможностей сервиса ""1С:Маркировка"".'");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);

#КонецОбласти

#Область Описание_профиля_КладовщикМаркировкиИСМПТ

	//Профиль предназначен для работы пользователя сервиса 1С:Маркировка,
	//обеспечивает доступность документов инвентаризации (ввод и вывод из оборота)
	//и использование дополнительных связанных возможностей.
	
	// Профиль "Кладовщик маркировки (ИС МПТ)".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "КладовщикМаркировкиИСМПТ";
	ОписаниеПрофиля.Идентификатор = "b2c25748-ed2f-4f02-a5b2-adc193227506";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Кладовщик маркировки (ИС МПТ) (дополнительный)'");
	
	РежимЗаполнения.ВключатьПроизводство 	= Ложь;
	РежимЗаполнения.ВключатьИнвентаризация  = Истина;
	РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
	РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
	РежимЗаполнения.Продажа = Ложь; 
	РежимЗаполнения.Закупка = Ложь;
	РежимЗаполнения.ВключатьТорговляРозница = Ложь;

	НазначитьРолиОбщегоНазначения(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиЧтенияОбъектов(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиИзмененияОбъектов(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиДополнительныйФункционал(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиАгрегирования(ОписаниеПрофиля, РежимЗаполнения);
	
	// Описание поставляемого профиля.
	ОписаниеПрофиля.Описание = НСтр("ru = 'Под профилем осуществляется доступ в ИБ кладовщика по работе с маркируемой продукцией,
	                                      |оформление Уведомлений о вводе и выводе из оборота, формирование Агрегаций кодов маркировки,
	                                      |осуществляется обмен данными с ИС МПТ, проверка информации о кодах маркировки,
										  |синхронизация данных с мобильным приложением ""1С:Маркировка"".'");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);

#КонецОбласти

#Область Описание_профиля_МенеджерПроизводстваИСМПТ

	//Профиль предназначен для работы пользователя сервиса 1С:Маркировка,
	//обеспечивает доступность документов производственного контура (заказ кодов и их печать)
	//и использование дополнительных связанных возможностей.
	
	// Профиль "Менеджер производства (ИС МПТ)".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "МенеджерПроизводстваИСМПТ";
	ОписаниеПрофиля.Идентификатор = "db186caa-acae-4384-a5d3-da76cdd4d67f";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Менеджер производства (ИС МПТ) (дополнительный)'");
	
	РежимЗаполнения.ВключатьПроизводство 	= Истина;
	РежимЗаполнения.ВключатьИнвентаризация  = Ложь;
	РежимЗаполнения.ВключатьТорговляОпт 	= Ложь;
	РежимЗаполнения.ВключатьИмпортЭкспорт 	= Ложь;
	РежимЗаполнения.Продажа = Ложь; 
	РежимЗаполнения.Закупка = Ложь;
	РежимЗаполнения.ВключатьТорговляРозница = Ложь;
	
	НазначитьРолиОбщегоНазначения(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиЧтенияОбъектов(ОписаниеПрофиля, 	РежимЗаполнения);
	НазначитьРолиИзмененияОбъектов(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиДополнительныйФункционал(ОписаниеПрофиля, РежимЗаполнения);
	НазначитьРолиАгрегирования(ОписаниеПрофиля, РежимЗаполнения);
	
	// Описание поставляемого профиля.
	ОписаниеПрофиля.Описание = НСтр("ru = 'Под профилем осуществляется доступ в ИБ менеджера по производству маркируемой продукции,
	                                      |оформление Заказов на эмиссию кодов, их печать и нанесение, формирование Агрегаций кодов маркировки,
	                                      |осуществляется обмен данными с СУЗ, проверка информации о кодах маркировки"".'");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);

#КонецОбласти

///////////////////
	
КонецПроцедуры

//Определение доступности подсистем библиотеки и добавление базовых прав
//
Процедура НазначитьРолиОбщегоНазначения(Профиль, РежимЗаполнения = Неопределено)
	
	//Общие для всех
	Профиль.Роли.Добавить(Метаданные.Роли.ИспользованиеРабочееМестоМаркировкаИСМПТК.Имя);
	Профиль.Роли.Добавить(Метаданные.Роли.БазовыеПраваИСМПТК.Имя);
	Профиль.Роли.Добавить(Метаданные.Роли.БазовыеПраваСУЗИСМПТК.Имя);	
			
КонецПроцедуры

Процедура НазначитьРолиЧтенияОбъектов(Профиль, РежимЗаполнения = Неопределено)

	Если РежимЗаполнения = Неопределено
		Или РежимЗаполнения.ВключатьТорговляРозница Тогда
		
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеРозничноеВыбытиеМаркированнойПродукцииИСМПТК.Имя);
		
	КонецЕсли;
	
	Если РежимЗаполнения = Неопределено
		Или РежимЗаполнения.ВключатьТорговляОпт Тогда
		
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеАППиУОРИСМПТК.Имя);
		
	КонецЕсли;
	
	Если РежимЗаполнения = Неопределено
		Или (РежимЗаполнения.ВключатьИмпортЭкспорт 
		И РежимЗаполнения.Продажа) Тогда
		
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОбЭкспортеЕАЭСИСМПТК.Имя);
		
	КонецЕсли;
		
	Если РежимЗаполнения = Неопределено
		Или (РежимЗаполнения.ВключатьИмпортЭкспорт 
		И РежимЗаполнения.Закупка) Тогда
	
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОПриемкеЕАЭСИСМПТК.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОбОтгрузкеЕАЭСИСМПТК.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОВвозеИСМПТК.Имя);
		
	КонецЕсли;
	
	Если РежимЗаполнения = Неопределено
		Или РежимЗаполнения.ВключатьИнвентаризация Тогда
		
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОВводеВОборотИСМПТК.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеУведомленийОВыводеИзОборотаИСМПТК.Имя);
	
	КонецЕсли;
	
	Если РежимЗаполнения = Неопределено
		Или РежимЗаполнения.ВключатьПроизводство Тогда
		
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеЗаказовНаЭмиссиюСУЗИСМПТК.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеОтчетовОНанесенииСУЗИСМПТК.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеПулКодовМаркировкиСУЗИСМПТК.Имя);
		
	КонецЕсли;
		
	//Общие
	Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеШаблоновПечатиИСМПТК.Имя);
				
КонецПроцедуры

Процедура НазначитьРолиИзмененияОбъектов(Профиль, РежимЗаполнения = Неопределено)

	Если РежимЗаполнения = Неопределено
		Или РежимЗаполнения.ВключатьТорговляРозница Тогда
		
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеРозничноеВыбытиеМаркированнойПродукцииИСМПТК.Имя);
		
	КонецЕсли;
	
	Если РежимЗаполнения = Неопределено
		Или РежимЗаполнения.ВключатьТорговляОпт Тогда
		
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеАППиУОРИСМПТК.Имя);
		
	КонецЕсли;
	
	Если РежимЗаполнения = Неопределено
		Или (РежимЗаполнения.ВключатьИмпортЭкспорт
		И РежимЗаполнения.Продажа) Тогда
		
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОбЭкспортеЕАЭСИСМПТК.Имя);
		
	КонецЕсли;
	
	Если РежимЗаполнения = Неопределено
		Или (РежимЗаполнения.ВключатьИмпортЭкспорт
		И РежимЗаполнения.Закупка) Тогда	
		
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОПриемкеЕАЭСИСМПТК.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОбОтгрузкеЕАЭСИСМПТК.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОВвозеИСМПТК.Имя);
		
	КонецЕсли;
	
	Если РежимЗаполнения = Неопределено
		Или РежимЗаполнения.ВключатьИнвентаризация Тогда
		
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОВводеВОборотИСМПТК.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеУведомленийОВыводеИзОборотаИСМПТК.Имя);
		
	КонецЕсли;
		
	Если РежимЗаполнения = Неопределено
		Или РежимЗаполнения.ВключатьПроизводство Тогда
		
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеЗаказовНаЭмиссиюСУЗИСМПТК.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеОтчетовОНанесенииСУЗИСМПТК.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеПулКодовМаркировкиСУЗИСМПТК.Имя);
		
	КонецЕсли;
	
	//Общие
	Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеШаблоновПечатиИСМПТК.Имя);
		
КонецПроцедуры

Процедура НазначитьРолиДополнительныйФункционал(Профиль, РежимЗаполнения = Неопределено)
		
	Если РежимЗаполнения = Неопределено
		Или РежимЗаполнения.ВключатьПроизводство Тогда
		
		Профиль.Роли.Добавить(Метаданные.Роли.ИспользованиеОбработкиПечатьКодовИзВнешнегоФайлаИСМПТК.Имя);
		Профиль.Роли.Добавить(Метаданные.Роли.ПравоПечатиЭтикетокКодовМаркировкиИСМПТК.Имя);
		
	КонецЕсли;
	
	Если РежимЗаполнения = Неопределено
		Или РежимЗаполнения.ВключатьТорговляРозница
		Или РежимЗаполнения.ВключатьТорговляОпт
		Или РежимЗаполнения.ВключатьИнвентаризация Тогда

	    Профиль.Роли.Добавить(Метаданные.Роли.ИспользованиеОбработкиПроверкаСостоянияИВладельцаКМИСМПТК.Имя);
				
	КонецЕсли;                                                              
			
	//Общие
	Профиль.Роли.Добавить(Метаданные.Роли.ИспользованиеМобильногоПриложенияИСМПТК.Имя);
	Профиль.Роли.Добавить(Метаданные.Роли.ИспользованиеОбработкиОбъединенияНесколькихФайловИСМПТК.Имя);
	
КонецПроцедуры

Процедура НазначитьРолиАдминистратора(Профиль)

	Профиль.Роли.Добавить(Метаданные.Роли.АдминистрированиеИСМПТК.Имя);
		
КонецПроцедуры

Процедура НазначитьРолиБухУчета(Профиль)

	Профиль.Роли.Добавить(Метаданные.Роли.ПравоУправленияЛичнымиСчетамиИСМПТК.Имя);	
	
КонецПроцедуры

//Агрегация находится на пересечении нескольких подсистем - инвентаризации и производства, 
//но также может затрагиваться и в товародвижении (точно не нужна только в розничном контуре),
//поэтому ее роли вынесены в отдельную функцию.
//
Процедура НазначитьРолиАгрегирования(Профиль, РежимЗаполнения = Неопределено)
	
	Профиль.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеАгрегацийИСМПТК.Имя);
	Профиль.Роли.Добавить(Метаданные.Роли.ЧтениеАгрегацийИСМПТК.Имя);
	Профиль.Роли.Добавить(Метаданные.Роли.ИспользованиеОбработкиСозданиеНесколькихОтчетовОбАгрегацииИСМПТК.Имя);
	Профиль.Роли.Добавить(Метаданные.Роли.ПравоГенерацииКодовSSCCИСМПТК.Имя);
	
	Если РежимЗаполнения = Неопределено
		Или РежимЗаполнения.ВключатьИнвентаризация
		Или РежимЗаполнения.ВключатьПроизводство Тогда
		
		//Проверка наличия остатков товаров по данным ранее сформированных упаковок
		Профиль.Роли.Добавить(Метаданные.Роли.ИспользованиеОбработкиРабочееМестоПроверкаАгрегацииИСМПТК.Имя);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Переопределяемые

//Для БК 3.0
//
Функция ПроверитьТоварыВТребованиеНакладная(ДокументСсылка)
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//БК
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ТребованиеНакладнаяМатериалы.Номенклатура КАК Номенклатура
	|ИЗ
	|	Документ.ТребованиеНакладная.Материалы КАК ТребованиеНакладнаяМатериалы
	|ГДЕ
	|	ТребованиеНакладнаяМатериалы.Ссылка = &Ссылка
	|	И (ТребованиеНакладнаяМатериалы.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|	ИЛИ ТребованиеНакладнаяМатериалы.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|	ИЛИ ТребованиеНакладнаяМатериалы.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)  
	|	ИЛИ ТребованиеНакладнаяМатериалы.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты)  
	|	ИЛИ ТребованиеНакладнаяМатериалы.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|	ИЛИ ТребованиеНакладнаяМатериалы.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность))";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат ?(Результат.Количество() = 0, Ложь, Истина);
	///////////////////
	
КонецФункции

//Для БК 3.0
//
Функция ТекстЗапросаТребованиеНакладная(ПервыйЗапрос = Истина)
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//БК
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТребованиеНакладная.Организация КАК Организация,
	|	ТребованиеНакладная.Организация КАК Поставщик,
	|	ТаблицаТовары.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.НаправленияДокументовИСМПТК.Исходящий) КАК Направление,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|";
	ТекстЗапроса = ТекстЗапроса + ПолучитьКусокТекстаЗапросаВидПродукции()
				+ "ТаблицаТовары.Количество КАК КоличествоИсточник,
	|";
	ТекстЗапроса = ТекстЗапроса + ПолучитьКусокТекстаЗапросаОрагнизация()
				+ "ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ Организации.Наименование
	|	КОНЕЦ КАК ПоставщикНаименование,
	|	Неопределено КАК ПричинаВыводаИзОборота
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	Документ.ТребованиеНакладная.Материалы КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТребованиеНакладная КАК ТребованиеНакладная
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|			ПО ТребованиеНакладная.Организация = Организации.Ссылка
	|		ПО ТаблицаТовары.Ссылка = ТребованиеНакладная.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ТребованиеНакладная.Ссылка В(&МассивДокументов)
	|	И (СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|			ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность))";               
				
	Если Не ПервыйЗапрос Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ вт_ДанныеДокумента", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	///////////////////
	
КонецФункции

#Область Интерфейс

Функция ПолучитьВидимостьСсылкиДокументОснованиеВЗаказе() Экспорт
	
	  //ПЕРЕОПРЕДЕЛЕНИЕ//
	 //ЕРП, КА, УТ + Розница
	 //Возврат Истина;
	 
	 //БК
	 Возврат Ложь;
	 ///////////////////
	 	 
 КонецФункции
 
Функция ПолучитьВидимостьПодбораНоменклатурыВЗаказе() Экспорт
	
	 Возврат Истина;
	 
 КонецФункции

Функция ПолучитьВидимостьСсылкиНаВидыНоменклатуры() Экспорт
	
	  //ПЕРЕОПРЕДЕЛЕНИЕ//
	 //ЕРП, КА, УТ + Розница
	 //Возврат Истина;
	 
	 //БК
	 Возврат Ложь;
	 ///////////////////
	 
 КонецФункции
 
#КонецОбласти

#КонецОбласти