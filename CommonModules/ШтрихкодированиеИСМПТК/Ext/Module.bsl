
// Определяет по значению штрихкода принадлежность к обувной продукции: потребительской упаковке или логистической упаковке.
// 
// Параметры:
// 	Штрихкод - Строка - Штрихкод маркируемой продукции.
// 	УчитыватьЛогистическуюУпаковку - Булево - Логистическая упаковка будет так же будет подвергнута анализу.
// Возвращаемое значение:
// 	Булево - Истина - в случае принадлежности штрихкода к обувной продукции, Ложь - в обратном случае.
Функция ЭтоШтрихкодОбувнойПродукции(КодМаркировки, УчитыватьЛогистическуюУпаковку = Ложь) Экспорт
	
	ЭтоКодПотребительскойУпаковки = ШтрихкодированиеИСМПТККлиентСервер.ЭтоКодМаркировкиПотребительскойУпаковки(КодМаркировки);
	
	Если УчитыватьЛогистическуюУпаковку Тогда
		
		Возврат ЭтоКодПотребительскойУпаковки
			Или ШтрихкодированиеИСМПТККлиентСервер.ЭтоКодЛогистическойУпаковки_ИСМП(КодМаркировки);
			
	КонецЕсли;
	
	Возврат ЭтоКодПотребительскойУпаковки;
	
КонецФункции

// См. ШтрихкодированиеИСКлиент.ПараметрыСканирования
Функция ПараметрыСканирования(Контекст = Неопределено, ФормаВыбора = Неопределено, ВидПродукции = Неопределено) Экспорт
	
	ПараметрыСканирования = ШтрихкодированиеИСМПТККлиентСервер.БазовыеПараметрыСканирования();
	ШтрихкодированиеИСМПТККлиентСервер.ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст);
	ШтрихкодированиеИСМПТККлиентСерверПереопределяемый.ПриЗаполненииПараметровСканирования(ПараметрыСканирования, Контекст, ВидПродукции);
	
	Возврат ПараметрыСканирования;
	
КонецФункции

// Определяет тип штрихкода по его значению.
//
// Параметры:
//  Штрихкод - Строка - Штрихкод.
//  ТипУпаковки - ПеречислениеСсылка.ТипыУпаковокИСМП - Тип упаковки.
// Возвращаемое значение:
//  Неопределено, ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
Функция ОпределитьТипШтрихкода(Штрихкод, ТипУпаковки) Экспорт
	
	ВидПродукции = ВидПродукцииИСПоШтрихкодуМаркировки(Штрихкод, Истина);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("Маркировка") И ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.Обувная Тогда
		
		Возврат ШтрихкодированиеИСМПТК.ТипШтрихкода(Штрихкод);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Подготавливает штрихкод GS1 в формате со скобками к передаче в компоненту печати штрихкодов.
//
// Параметры:
//  ЗначениеШтрихкода - Строка - Штрихкод
//  ТипКода - Число - Тип кода (см. документацию по компоненте печати штрихкодов)
// Возвращаемое значение:
//  Строка - Штрихкод для передачи в компоненту печати
Функция КодGS1ДляКомпонентыПечати(ЗначениеШтрихкода, ТипКода) Экспорт
	
	ЗначениеШтрихкодаДляКомпоненты = СокрЛП(ЗначениеШтрихкода);
	
	Если (ТипКода = 2 Или ТипКода = 17 Или ТипКода = 24) Тогда
		ЧтениеШтрихкода = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПараметрыШтрихкода(ЗначениеШтрихкодаДляКомпоненты);
		Если Не ЧтениеШтрихкода.Результат = Неопределено Тогда
			Если ЧтениеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.GS1_128
				Или ЧтениеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.GS1_DataBarExpandedStacked Тогда
				ЗначениеШтрихкодаДляКомпоненты = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодGS1(
					ЧтениеШтрихкода.Результат, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеШтрихкодаДляКомпоненты;
	
КонецФункции

// Структура, описывающая результат обработки штрихкода.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ДанныеШтрихкода - Неопределено, Структура - Результат анализа штрихкода, все данные, которые удалось по нему собрать.
// Возвращаемое значение:
//  Структура - Описание:
//   * ВидыПродукции - Массив - Массив видов продукции ИС.
//   * ИзмененныеСтроки - Массив - Строки документа, которые были изменены в процессе обработки штрихкодов.
//   * ДобавленныеСтроки - Массив - Строки документа, которые были добавлены в процессе обработки штрихкодов.
//   * ОшибкаШтрихкодУжеДобавлен - Булево - Признак, указывающий, что обрабатываемый штрихкод был добавлен в документ ранее.
//   * ОшибкаВидаПродукции - Булево - Признак, указывающий, что штрихкод относится к виду продукции, который не поддерживается.
//   * ДополнительныеПараметры - Неопределено -
//   * ЕстьОшибкиВДеревеУпаковок - Булево - Признак, указывающий, что где-то в дереве упаковок присутствует ошибка.
//   * АдресДереваУпаковок - Строка - Адрес временного хранилища, где хранится дерево упаковок.
//   * ТекстОшибки - Строка - Текст ошибки, на которую стоит обратить внимание.
//   * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковокИСМП - Тип упаковки.
//   * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
//   * Штрихкод - Строка - Значение штрихкода.
//   * ЕстьОшибки - Булево - Признак, указывающий, что есть ошибки в данных штрихкода.
//   * ШтрихкодыПродукцииДляСопоставления - Неопределено, Массив - Массив неизвестных штрихкодов EAN, которые необходимо сопоставить перед обработкой.
//   * ТребуетсяСопоставлениеНоменклатуры - Булево - Признак, указывающий на то, что перед обработкой необходимо сопоставить номенклатуру штрихкодам EAN.
//   * ИсходныеДанные - Произвольный - Данные, которые поступили на вход для обработки.
//   * ТребуетсяОбработкаШтрихкода - Булево - Признак, указывающий, что данные штрихкода не удалось обработать по стандартному алгоритму.
//   * ТребуетсяВыборНоменклатуры - Булево - Признак, указывающий на необходимость выбора номенклатуры.
//   * ПараметрыВыбораНоменклатуры - Структура - Параметры, участвующие в отборе при выборе номенклатуры в диалоговом окне.
//   * АдресДанныхШтрихкода - Строка - Адрес временного хранилища, где хранится данные штрихкода.
Функция ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования = Неопределено, ДанныеШтрихкода = Неопределено) Экспорт
	
	ВидыПродукции = Неопределено;
	
	Если ПараметрыСканирования <> Неопределено Тогда
		ВидыПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции;
	КонецЕсли;
	
	Если ДанныеШтрихкода <> Неопределено И ДанныеШтрихкода.ВидыПродукции.Количество() > 0 Тогда
		ВидыПродукции = ДанныеШтрихкода.ВидыПродукции;
	КонецЕсли;
	
	РезультатОбработкиШтрихкода = Новый Структура;
	
	// Для выбора значений на клиенте.
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяСопоставлениеНоменклатуры", Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяВыборНоменклатуры",         Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяВыборСерии",                Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяОбработкаШтрихкода",        Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяУточнениеДанных",           Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОткрытьФормуВводаКодаМаркировки",    Ложь);
	РезультатОбработкиШтрихкода.Вставить("АдресДанныхШтрихкода",               "");
	РезультатОбработкиШтрихкода.Вставить("ПараметрыВыбораНоменклатуры",        Новый Структура);
	РезультатОбработкиШтрихкода.Вставить("ИсходныеДанные",                     Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ШтрихкодыПродукцииДляСопоставления", Новый Массив);
	РезультатОбработкиШтрихкода.Вставить("ПараметрыУточненияДанных",           Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ИспользоватьОбработкуНаКлиенте",     Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОбработкаШтрихкодаБезМарки",         Ложь);
	
	// Для вывода сообщения об ошибке.
	РезультатОбработкиШтрихкода.Вставить("Штрихкод",     "");
	РезультатОбработкиШтрихкода.Вставить("ТипШтрихкода", Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ТипУпаковки",  Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ТекстОшибки",  "");
	
	РезультатОбработкиШтрихкода.Вставить("ЕстьОшибки",                       Ложь);
	РезультатОбработкиШтрихкода.Вставить("ЕстьОшибкиВДеревеУпаковок",        Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОбщаяОшибка",                      Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОшибкаШтрихкодУжеДобавлен",        Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОшибкаДопустимостиВидовПродукции", Ложь);
	
	РезультатОбработкиШтрихкода.Вставить("АдресДереваУпаковок",     "");
	РезультатОбработкиШтрихкода.Вставить("ДополнительныеПараметры", Неопределено);
	
	// Для обработки строк табличной части.
	РезультатОбработкиШтрихкода.Вставить("ДобавленныеСтроки",  Новый Массив);
	РезультатОбработкиШтрихкода.Вставить("ИзмененныеСтроки",   Новый Массив);
	
	РезультатОбработкиШтрихкода.Вставить("ВидыПродукции",      Новый Массив);
	РезультатОбработкиШтрихкода.Вставить("МаркировкаОстатков", Ложь);
	
	Если ВидыПродукции = Неопределено Тогда
		Возврат РезультатОбработкиШтрихкода;
	КонецЕсли;
	
	Если ДанныеШтрихкода <> Неопределено Тогда
		РезультатОбработкиШтрихкода.ТипУпаковки = ДанныеШтрихкода.ТипУпаковки;
	КонецЕсли;
	
	РезультатОбработкиШтрихкода.ВидыПродукции = ВидыПродукции;

	Если ОбщегоНазначения.ПодсистемаСуществует("Маркировка") И ЕстьОбувнаяПродукцияВКоллекции(ВидыПродукции) Тогда

		ШтрихкодированиеИСМПТК.ДополнитьСвойстваРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода);
		
	КонецЕсли;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

// Инициализирует структуру, которая будет содержать в себе всю собранную и проанализированную информацию 
// по значению штрихкода.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - Информация по штрихкоду:
//   * МаркируемаяПродукция - Булево - Истина, если номенклатура данных штрихкода является маркируемой.
//   * ВидыПродукции - Массив - Коллекция элементов перечисления видов продукции ИС, которые были идентифицированы по
// данным штрихкода.
//   * ДополнительныеПараметры - Произвольный.
//   * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокИСМП - ссылка на элемент справочника.
//   * Штрихкод - Строка - Значение штрихкода.
//   * Упаковка - СправочникСсылка.ШтрихкодыУпаковокИСМП - ссылка на элемент справочника верхнего уровня.
//   * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода маркированного товара.
//   * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковокИСМП - Тип упаковки маркированного товара.
//   * ТекстОшибки - Строка - описание ошибки.
//   * МаркированныеТовары - Массив - коллекция товаров, подлежащих маркировке.
//   * Количество - Число - количество единиц маркируемой продукции.
//   * ВложенныеШтрихкоды - (См. ШтрихкодированиеИСМПТК.ИнициализацияВложенныхШтрихкодов).
//   * ПредставлениеНоменклатуры - Строка - Строковое представление номенклатуры.
//   * Серия - ОпределяемыеТипы.СерияНоменклатуры - Серия номенклатуры.
//   * Характеристика - ОпределяемыеТипы.ХарактеристикаНоменклатурыИСМПТ - Характеристика.
//   * Номенклатура - ОпределяемыеТипы.НоменклатураИСМПТ - Номенклатура.
Функция ИнициализироватьДанныеШтрихкода(ПараметрыСканирования = Неопределено) Экспорт
	
	ДанныеШтрихкода = Новый Структура;
	
	ДанныеШтрихкода.Вставить("Номенклатура",            Неопределено);
	ДанныеШтрихкода.Вставить("Характеристика",          Неопределено);
	ДанныеШтрихкода.Вставить("Серия",                   Неопределено);
	ДанныеШтрихкода.Вставить("ПредставлениеНоменклатуры", "");
	ДанныеШтрихкода.Вставить("ВложенныеШтрихкоды",      Новый Соответствие);
	ДанныеШтрихкода.Вставить("Количество",              0);
	ДанныеШтрихкода.Вставить("МаркированныеТовары",     Новый Массив);
	ДанныеШтрихкода.Вставить("ТекстОшибки",             Неопределено);
	ДанныеШтрихкода.Вставить("ТипУпаковки",             Неопределено);
	ДанныеШтрихкода.Вставить("ТипШтрихкода",            Неопределено);
	ДанныеШтрихкода.Вставить("Упаковка",                Неопределено);
	ДанныеШтрихкода.Вставить("Штрихкод",                Неопределено);
	ДанныеШтрихкода.Вставить("ШтрихкодУпаковки",        Неопределено);
	ДанныеШтрихкода.Вставить("ДополнительныеПараметры", Неопределено);
	ДанныеШтрихкода.Вставить("ВидыПродукции",           Новый Массив);
	ДанныеШтрихкода.Вставить("МаркируемаяПродукция",    Неопределено);
	ДанныеШтрихкода.Вставить("ОбработатьБезМаркировки", Ложь);
	ДанныеШтрихкода.Вставить("ЭтоШтрихкодНоменклатуры", Ложь);
	ДанныеШтрихкода.Вставить("АдресДереваУпаковок",     Неопределено);
	ДанныеШтрихкода.Вставить("ТребуетсяВыборСерии",     Ложь);

	Если ДопустимаОбувнаяПродукция(ПараметрыСканирования) Тогда
		ШтрихкодированиеИСМПТК.ДополнитьСвойстваДанныхШтрихкода(ДанныеШтрихкода);
	КонецЕсли;
	
	Возврат ДанныеШтрихкода;
	
КонецФункции

// Формирует таблицу значений данных по штрихкодам EAN.
//
// Параметры:
//  ШтрихкодыEAN - Массив - Штрихкоды EAN.
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
//   * Номенклатура - ОпределяемыеТипы.НоменклатураИСМПТ - Номенклатура.
//   * Характеристика - ОпределяемыеТипы.ХарактеристикаНоменклатурыИСМПТ - Характеристика.
//   * ЗначениеШтрихкодаEAN - Строка - Штрихкод.
//   * ПредставлениеНоменклатуры - Строка - Представление номенклатуры.
//   * ВидПродукции -ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
//   * МаркируемаяПродукция - Булево - Истина, если продукция является маркируемая.
Функция ДанныеПоШтрихкодамEAN(ШтрихкодыEAN) Экспорт
	
	ДанныеПоШтрихкодамEAN = Новый ТаблицаЗначений;
	
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Номенклатура",              Метаданные.ОпределяемыеТипы.НоменклатураИСМПТК.Тип);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Характеристика",            Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыИСМПТК.Тип);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ШтрихкодEAN",               Новый ОписаниеТипов("Строка"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ПредставлениеНоменклатуры", Новый ОписаниеТипов("Строка"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ВидПродукции",              Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИСМПТК"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("МаркируемаяПродукция",      Новый ОписаниеТипов("Булево"));
	
	ПолучатьИнформациюПоШтрихкодам = Ложь;
	Для Каждого ШтрихкодEAN Из ШтрихкодыEAN Цикл
		
		НоваяСтрока = ДанныеПоШтрихкодамEAN.Добавить();
		НоваяСтрока.ШтрихкодEAN = ШтрихкодEAN;
		ПолучатьИнформациюПоШтрихкодам = Истина;
		
	КонецЦикла;
	
	Если ПолучатьИнформациюПоШтрихкодам Тогда
		
		ИндексСтроки = ДанныеПоШтрихкодамEAN.Количество()-1;
		Пока ИндексСтроки >= 0 Цикл
		
			ДанныеСтроки = ДанныеПоШтрихкодамEAN[ИндексСтроки];
			Если Не ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда
				ДанныеПоШтрихкодамEAN.Удалить(ДанныеСтроки);
			КонецЕсли;
			
			ИндексСтроки = ИндексСтроки - 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеПоШтрихкодамEAN;
	
КонецФункции

// Проверяет значения массива ВидыПродукции на вхождение допустимых видов продукции параметров сканирования.
//
// Параметры:
//  ВидыПродукции - Массив - Коллекция видов продукции ИС.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если каждый элемент массива ВидыПродукции присутствует в допустимых видах продукции.
Функция ВидыПродукцииПоддерживаются(ВидыПродукции, ПараметрыСканирования) Экспорт
	
	ВидыПродукцииПоддерживаются = Истина;
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		
		Если Не ЗначениеЗаполнено(ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукции) = Неопределено Тогда
			ВидыПродукцииПоддерживаются = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВидыПродукцииПоддерживаются;
	
КонецФункции

// Кэширует данные обработанных штрихкодов путем помещения их в хранилище значений.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой требуется закэшировать обработанные штрихкоды.
//  ДанныеШтрихкода - (См. ШтрихкодированиеИСМПТК.ИнициализироватьДанныеШтрихкода).
//  РезультатДобавления - (См. ШтрихкодированиеИСМПТК.ИнициализироватьРезультатОбработкиШтрихкода).
//  ВложенныеШтрихкоды - (См. ШтрихкодированиеИСМПТК.ИнициализацияВложенныхШтрихкодов).
Процедура ЗакэшироватьОбработанныеШтрихкоды(ПараметрыСканирования, ДанныеШтрихкода, РезультатДобавления, ДеревоУпаковок = Неопределено) Экспорт
	
	Если РезультатДобавления = Неопределено
		Или Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) 
		Или ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки) Тогда
		
		Если РезультатДобавления.ЕстьОшибкиВДеревеУпаковок Тогда
			Возврат;
		КонецЕсли;
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
		
		ПоместитьДанныеСтрокДереваВСоответствие(ДеревоУпаковок.Строки, ОбработанныеКодыМаркировки);
		ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
		
	Иначе
		
		Если ЗначениеЗаполнено(РезультатДобавления.ТекстОшибки) Или ДанныеШтрихкода.Штрихкод = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
		
		ОбработанныеКодыМаркировки.Вставить(ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода);
		ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
		
	КонецЕсли;

КонецПроцедуры

// Выполняет поиск в массиве ВидыПродукции табачной продукции.
//
// Параметры:
//  ВидыПродукции - Массив - Коллекция видов продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если найдена табачная продукция.
Функция ПрисутствуетТабачнаяПродукция(ВидыПродукции) Экспорт

	Возврат ВидыПродукции.Найти(Перечисления.ВидыПродукцииИСМПТК.Табачная) <> Неопределено;

КонецФункции

// Выполняет поиск в массиве ВидыПродукции обувной продукции.
//
// Параметры:
//  ВидыПродукции - Массив - Коллекция видов продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если найдена обувная продукция.
Функция ПрисутствуетОбувнаяПродукция(ВидыПродукции) Экспорт

	Возврат ВидыПродукции.Найти(Перечисления.ВидыПродукцииИСМПТК.Обувная) <> Неопределено;

КонецФункции

// Вычисляет штрихкод EAN из GTIN.
// 
// Параметры:
//  GTIN - Строка - GTIN.
// Возвращаемое значение:
//  Строка - Вычисленное значение EAN.
Функция ШтрихкодEANИзGTIN(Знач Штрихкод) Экспорт
	
	Если Лев(Штрихкод, 1) = "0" Тогда
		Штрихкод = Сред(Штрихкод, 2); //EAN13
		Если Лев(Штрихкод, 5) = "00000" Тогда
			Штрихкод = Сред(Штрихкод, 6); //EAN8
		КонецЕсли;
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

// Передает управление обработки данных штрихкодов в модуль менеджера объекта или модуль общей формы.
// Выполняет кэширование данных штрихкодов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  ДанныеШтрихкода
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ВложенныеШтрихкоды - (См. ШтрихкодированиеИСМПТК.ИнициализацияВложенныхШтрихкодов).
// Возвращаемое значение:
//  (См. ШтрихкодированиеИСМПТК.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	МодульДляОбработки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.МенеджерОбъектаПоСсылке(Форма.Объект.Ссылка);
	РезультатОбработки = МодульДляОбработки.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	
	ДеревоУпаковок = Неопределено;
	Если ВложенныеШтрихкоды <> Неопределено Тогда
		ДеревоУпаковок = ВложенныеШтрихкоды.ДеревоУпаковок;
	КонецЕсли;
	
	ЗакэшироватьОбработанныеШтрихкоды(ПараметрыСканирования, ДанныеШтрихкода, РезультатОбработки, ДеревоУпаковок);
	Форма.Модифицированность = Истина;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Возвращает модуль, в котором требуется выполнить обработку штрихкодов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта.
// Возвращаемое значение:
//  Модуль - Модуль, в котором требуется выполнить обработку штрихкодов.
Функция МодульДляОбработки(Форма) Экспорт

	Если СтрНачинаетсяС(Форма.ИмяФормы, "ОбщаяФорма") Тогда
		МодульДляОбработки = Форма;
	Иначе
		МодульДляОбработки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.МенеджерОбъектаПоСсылке(Форма.Объект.Ссылка);
	КонецЕсли;
	
	Возврат МодульДляОбработки;
	
КонецФункции

// Вычисляет штрихкод EAN по коду маркировки.
//
// Параметры:
//  КодМаркировки - Строка - Значение штрихкода.
// Возвращаемое значение:
//  Неопределено, Строка - Неопределено, если вычислить штрихкод EAN не удалось.
Функция EANПоКодуМаркировки(Знач КодМаркировки) Экспорт
	
	ШтрихкодGTIN = ШтрихкодированиеИСМПТККлиентСервер.GTINПоКодуМаркировки(КодМаркировки);
	
	Возврат ШтрихкодEANИзGTIN(ШтрихкодGTIN);
	
КонецФункции

// Определяет допустимость обработки обувной продукции по параметрам сканирования.
//
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИСМПТК.ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если допустима.
Функция ДопустимаОбувнаяПродукция(ПараметрыСканирования) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидПродукцииОбувная = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная");
	
	Возврат ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукцииОбувная) <> Неопределено;
	
КонецФункции

// Формирует соответствие, ключ которого - строка дерева, значение - структура, свойства и значения которой равны
// строке дерева.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева.
//  Соответствие - Соответствие - Ключ - строка дерева, значение - структура значений строки дерева.
Процедура ПоместитьДанныеСтрокДереваВСоответствие(СтрокиДерева, Соответствие)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		ДанныеШтрихкода = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаДерева);
		Соответствие.Вставить(СтрокаДерева.Штрихкод, ДанныеШтрихкода);
		ПоместитьДанныеСтрокДереваВСоответствие(СтрокаДерева.Строки, Соответствие);
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет вид продукции ИС по значению штрихкода.
//
// Параметры:
//  ЗначениеШтрихкода - Строка - Штрихкод.
//  УчитыватьЛогистическуюУпаковку - Булево - Истина, если включать проверку для логистической упаковки.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыПродукцииИСМПТК, Неопределено - Вид продукции ИС, определенный по значению штрихкода.
Функция ВидПродукцииИСПоШтрихкодуМаркировки(Штрихкод, УчитыватьЛогистическуюУпаковку = Ложь)
	
	ВидПродукцииИС = Неопределено;
	ПодсистемаИСМПСуществует  = ОбщегоНазначения.ПодсистемаСуществует("Маркировка");
	
	Если ПодсистемаИСМПСуществует
		И ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойОбувиИСМПТК")
		И ШтрихкодированиеИСМПТК.ЭтоШтрихкодОбувнойПродукции(Штрихкод, УчитыватьЛогистическуюУпаковку) Тогда
		
		ВидПродукцииИС = Перечисления.ВидыПродукцииИСМПТК.Обувная;
		
	КонецЕсли;
	
	Возврат ВидПродукцииИС;
	
КонецФункции

// Ищет в массиве обувную продукцию.
//
// Параметры:
//  Коллекция - Массив - коллекция видов продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если в коллекции найдена обувная продукция.
Функция ЕстьОбувнаяПродукцияВКоллекции(Коллекция)

	ОбувнаяПродукция = Перечисления.ВидыПродукцииИСМПТК.Обувная;

	Возврат Коллекция.Найти(ОбувнаяПродукция) <> Неопределено;

КонецФункции

//Определяет по контексту возможность работы с табаком.
//
//Параметры:
//   Контекст - Структура, ПеречислениеСсылка.ВидыПродукцииИСМПТК -
//     контекст (параметры сканирования или вид продукции), по которому будет определяться возможность работы с табачной продукцией.
//Возвращаемое значение:
//   Булево - Истина, если для контекста разрешена работа с табачной продукцией.
//
Функция ДопустимаТабачнаяПродукция(Контекст) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("Маркировка") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(Контекст) = Тип("ПеречислениеСсылка.ВидыПродукцииИСМПТК") Тогда
		Возврат Контекст = Перечисления.ВидыПродукцииИСМПТК.Табачная;
	КонецЕсли;
	
	Возврат ШтрихкодированиеИСМПТККлиентСервер.ДопустимВидПродукции(Контекст, Перечисления.ВидыПродукцииИСМПТК.Табачная);
	
КонецФункции

// Определяет тип кода маркировки по его значению.
// 
// Параметры:
//  КодМаркировки - строка - штрихкод.
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
Функция ТипШтрихкода(КодМаркировки) Экспорт
	
	Если ШтрихкодированиеИСМПТККлиентСервер.ЭтоКодМаркировкиПотребительскойУпаковки(КодМаркировки) Тогда
		Возврат Перечисления.ТипыШтрихкодовИСМПТК.GS1_DataMatrix;
	ИначеЕсли ШтрихкодированиеИСМПТККлиентСервер.ЭтоКодЛогистическойУпаковки_ИСМП(КодМаркировки) Тогда 
		Возврат Перечисления.ТипыШтрихкодовИСМПТК.GS1_128;
	Иначе
		Возврат Перечисления.ТипыШтрихкодовИСМПТК.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Дополняет свойства структуры Данные штрихкода свойствами, которые используются только для обуви.
// 
// Параметры:
//  КоллекцияДанныеШтрихкода - (См. ШтрихкодированиеИСМПТК.ИнициализироватьДанныеШтрихкода)
Процедура ДополнитьСвойстваДанныхШтрихкода(ДанныеШтрихкода) Экспорт
	
	ДанныеШтрихкода.Вставить("ИННВладельца"               "");
	ДанныеШтрихкода.Вставить("Владелец",                  Неопределено);
	ДанныеШтрихкода.Вставить("Статус",                    Неопределено);
	ДанныеШтрихкода.Вставить("ПредставлениеСтатуса"       "");
	ДанныеШтрихкода.Вставить("КоличествоВложенныхЕдиниц", 1);
	ДанныеШтрихкода.Вставить("ИННПроизводителя",          "");
	ДанныеШтрихкода.Вставить("Производитель",             Неопределено);
	ДанныеШтрихкода.Вставить("НаименованиеПроизводителя", "");
	ДанныеШтрихкода.Вставить("ДатаЭмиссии",               Неопределено);
	ДанныеШтрихкода.Вставить("GTIN",                      "");
	ДанныеШтрихкода.Вставить("СпособВводаВОборот",        Неопределено);
	ДанныеШтрихкода.Вставить("ОсобоеСостояние",           Неопределено);
	
КонецПроцедуры

// Дополняет свойства структуры результат обработки штрихкода специфичными свойствами, характерными для обуви.
// 
// Параметры:
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеИСМПТК.ИнициализироватьРезультатОбработкиШтрихкода).
//  ДанныеШтрихкода - (См. ШтрихкодированиеИСМПТК.ИнициализироватьДанныеШтрихкода)
Процедура ДополнитьСвойстваРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода) Экспорт
	
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяАвторизацияИСМП", Ложь);
	РезультатОбработкиШтрихкода.Вставить("ПараметрыВыбораСерии",     Новый Структура);

КонецПроцедуры

// Инициализирует структуру правил для проверки на ошибки данных по кодам маркировки.
// 
// Параметры:
//  ПараметрыСканирования - (см. ШтрихкодированиеИСМПТК.ИнициализацияДанныхПоШтрихкодам).
//  ДанныеПоШтрихкодам - (см. ШтрихкодированиеИСМПТК.ИнициализацияДанныхПоШтрихкодам).
// Возвращаемое значение:
//  Структура - Описание:
// * КонтрольВладельца - Массив - коллекция, куда требуется поместить строки с ошибками при контроле владельца.
// * КонтрольСоставаУпаковокИСМП - Массив - коллекция, куда требуется поместить строки с ошибками при контроле состава упаковок.
// * КонтрольСпособаВводаВОборот - Массив - коллекция, куда требуется поместить строки с ошибками при контроле способа ввода в оборот.
// * КонтрольСерий - Массив - коллекция, куда требуется поместить строки с ошибками при контроле серий.
// * КонтрольСтатусов - коллекция, куда требуется поместить строки с ошибками при контроле допустимых статусов.
Функция ПравилаПроверкиНаОшибки(ПараметрыСканирования, ДанныеПоШтрихкодам)
	
	ПравилаПроверкиНаОшибки = Новый Структура;
	
	Если ПараметрыСканирования.ДопустимыеСтатусыИСМП.Количество() > 0
		И ПараметрыСканирования.ЗапрашиватьСтатусыИСМП Тогда
		
		ПравилоКонтроляСтатусов = Новый Структура;
		ПравилоКонтроляСтатусов.Вставить("ДопустимыеСтатусы",       ПараметрыСканирования.ДопустимыеСтатусыИСМП);
		ПравилоКонтроляСтатусов.Вставить("КоллекцияСтрокСОшибками", Новый Массив);
		
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСтатусов", ПравилоКонтроляСтатусов);
		
	КонецЕсли;
	
	Если ПараметрыСканирования.ПараметрыУказанияСерий <> Неопределено Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСерий", Новый Массив);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСканирования.ДопустимыйСпособВводаВОборот)
		И ПараметрыСканирования.ЗапрашиватьСтатусыИСМП Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСпособаВводаВОборот", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыСканирования.КонтрольСоставаУпаковокИСМП
		И ДанныеПоШтрихкодам.ДеревоПоДаннымСервиса <> Неопределено Тогда
		
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСоставаУпаковокИСМП", Новый Массив);
		
	КонецЕсли;
	
	Если ПараметрыСканирования.ЗапрашиватьСтатусыИСМП
		И ЗначениеЗаполнено(ПараметрыСканирования.Владелец) Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольВладельца", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыСканирования.ЭтоМаркировкаОстатков <> Неопределено Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольКодовВводаОстатков", Новый Массив);
	КонецЕсли;
	
	Возврат ПравилаПроверкиНаОшибки;
	
КонецФункции

