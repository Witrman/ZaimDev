
Функция ИмяПодсистемы() Экспорт
	
	Возврат "ИСМПТК";
	
КонецФункции

Функция ШаблонКодаМаркировкиПоВидуПродукции(ВидПродукции) Экспорт
	
	СписокШаблонов = ШаблоныКодовПоВидуПродукции(ВидПродукции);
	
	Если СписокШаблонов.Количество() Тогда
		Возврат СписокШаблонов.Получить(0).Значение;
	КонецЕсли;
	
КонецФункции

Функция ШаблоныКодовПоВидуПродукции(ВидПродукции = Неопределено) Экспорт
	
	ЭтоОбувнаяПродукция 		= (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная"));
	ЭтоМолочнаяПродукция 		= (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция"));
	ЭтоЛекарственыйПрепарат 	= (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты"));
	ЭтоТекстиль				 	= (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность"));
	ЭтоТабак				 	= (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная"));
	
	СписокВыбора = Новый СписокЗначений();
	Если ЭтоОбувнаяПродукция Или ВидПродукции = Неопределено Тогда
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь"));
	КонецЕсли;
	Если ЭтоМолочнаяПродукция Тогда
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция"));
	КонецЕсли;
	Если ЭтоЛекарственыйПрепарат Тогда
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты"));
	КонецЕсли;
	Если ЭтоТекстиль Тогда
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность"));
	КонецЕсли;
	Если ЭтоТабак Тогда
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка")); //По умолчанию, затем пользователю нужно скорректировать вручную
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции

#Область ФормыДокументовОснований

// Устанавливается свойство ОтображениеПредупрежденияПриРедактировании элемента формы.
//
Процедура ОтображениеПредупрежденияПриРедактировании(Элемент, Отображать) Экспорт
	
	Если Отображать Тогда
		Элемент.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
	Иначе
		Элемент.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияОповещения

Функция ИмяСобытияИзмененОбъект(ИмяПодсистемы, ИсточникИмениОбъекта = Неопределено) Экспорт
	
	Если ИсточникИмениОбъекта = Неопределено Тогда
		ИмяОбъекта = "";
	ИначеЕсли ТипЗнч(ИсточникИмениОбъекта) = Тип("ФормаКлиентскогоПриложения") Тогда
		ИмяОбъекта = ИмяОбъектаИзИмениФормы(ИсточникИмениОбъекта);
	Иначе
		ИмяОбъекта = ИсточникИмениОбъекта;
	КонецЕсли;
	
	Возврат
		ОбщийПрефиксСобытияОповещения(ИмяПодсистемы)
		+ ПрефиксСобытияИзмененОбъект() + РазделительСобытияОповещения()
		+ ИмяОбъекта;
	
КонецФункции

Функция ИмяСобытияИзмененоСостояние(ИмяПодсистемы) Экспорт
	
	Возврат
		ОбщийПрефиксСобытияОповещения(ИмяПодсистемы)
		+ ПрефиксСобытияИзмененоСостояние();
	
КонецФункции

Функция ИмяСобытияВыполненОбмен(ИмяПодсистемы) Экспорт
	
	Возврат
		ОбщийПрефиксСобытияОповещения(ИмяПодсистемы)
		+ ПрефиксСобытияВыполненОбмен();
	
КонецФункции

Функция ИмяСвойстваОбновлятьСтатусВФормахДокументов(ИмяПодсистемы) Экспорт
	
	Возврат СтрШаблон("ОбновлятьСтатус%1ВФормахДокументов", ИмяПодсистемы);
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ИмяОбъектаИзИмениФормы(Форма, ПолноеИмя = Истина) Экспорт
	
	ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
	
	Если ПолноеИмя Тогда
		ИмяОбъекта = ЧастиИмени[0] + "." + ЧастиИмени[1];
	Иначе
		ИмяОбъекта = ЧастиИмени[1];
	КонецЕсли;
	
	Возврат ИмяОбъекта;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СобытияОповещения

Функция РазделительСобытияОповещения()
	
	Возврат "#";
	
КонецФункции

Функция ОбщийПрефиксСобытияОповещения(ИмяПодсистемы)
	
	Возврат 
		"ИнтеграцияИС_СобытиеОповещения" + РазделительСобытияОповещения()
		+ ИмяПодсистемы + РазделительСобытияОповещения();
	
КонецФункции

Функция ПрефиксСобытияИзмененОбъект()
	
	Возврат "ИзмененОбъект";
	
КонецФункции

Функция ПрефиксСобытияИзмененоСостояние()
	
	Возврат "ИзмененоСостояние";
	
КонецФункции

Функция ПрефиксСобытияВыполненОбмен()
	
	Возврат "ВыполненОбмен";
	
КонецФункции

#КонецОбласти

// Добавляет в свойство структуры сообщения текст ошибки
//
// Параметры:
//  Сообщение    - Структура - сообщение, в которое добавляется текст ошибки.
//  ТекстОшибки  - Строка - добавляемый текст ошибки.
//
Процедура ДобавитьТекстОшибки(Сообщение, ТекстОшибки) Экспорт
	
	Если Сообщение.Ошибки.Получить(ТекстОшибки) <> Неопределено Тогда
		Возврат;
	Иначе
		Сообщение.Ошибки.Вставить(ТекстОшибки, Истина);
	КонецЕсли;
	
	Если ПустаяСтрока(Сообщение.ТекстОшибки) Тогда
		Сообщение.ТекстОшибки = ТекстОшибки;
	Иначе
		Сообщение.ТекстОшибки = Сообщение.ТекстОшибки + Символы.ПС + ТекстОшибки;
	КонецЕсли;
	
	Если Сообщение.Свойство("ТребуетсяПодписание") Тогда
		Сообщение.ТребуетсяПодписание = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращает структуру параметров обновления статуса.
Функция ПараметрыОбновленияСтатуса(ПараметрыОбновленияСтатуса = Неопределено) Экспорт
	
	Если ПараметрыОбновленияСтатуса = Неопределено Тогда
		ПараметрыОбновленияСтатуса = Новый Структура;
	КонецЕсли;
	
	ПараметрыОбновленияСтатуса.Вставить("Статус");
	ПараметрыОбновленияСтатуса.Вставить("СтатусОбработки");
	ПараметрыОбновленияСтатуса.Вставить("ОперацияКвитанции");
	ПараметрыОбновленияСтатуса.Вставить("ПротоколОбмена");
	ПараметрыОбновленияСтатуса.Вставить("ПараметрыЗапроса");
	
	Возврат ПараметрыОбновленияСтатуса;
	
КонецФункции

#Область ДокументыИСМПТ_БМ

Функция КонтейнерМетодов() Экспорт
	
	Контейнер = Неопределено;
		
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
	#ИначеЕсли ТонкийКлиент ИЛИ ВебКлиент ИЛИ ТолстыйКлиентУправляемоеПриложение И НЕ МобильныйКлиент Тогда
		
		// Это точно клиент на управляемые формы.
		
		Контейнер = ПолучитьФорму("Обработка.ОбменИСМПТК.Форма.КлиентУправляемая");
		
	#ИначеЕсли НЕ МобильныйКлиент Тогда // Сервер ИЛИ ВнешнееСоединение
		
		// Это сервер и только сервер, без разницы управляемое приложение или обычное.
				
		Контейнер = Обработки.ОбменИСМПТК.Создать();

	#КонецЕсли
	
	Возврат Контейнер;
	
КонецФункции

Функция ЭтоОбычнаяФорма(Форма) Экспорт
	
	Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда
		ОбычнаяФорма = Ложь;	
	Иначе
		ОбычнаяФорма = Истина;	
	КонецЕсли;
	
	Возврат ОбычнаяФорма;
	
КонецФункции

// Возвращает новый массив строк, созданный на основании параметра ИменаЧерезЗапятую.
//
// Параметры:
//  ИменаЧерезЗапятую - Строка - Имена объектов, переменных, реквизитов и т.д.
//
// Возвращаемое значение:
//  Массив - Массив имен, созданный на основании параметра ИменаЧерезЗапятую.
//
// Пример:
//  // Переменная МассивИмен будет массивом, содержащим три элемента:
//  // "Идентификатор", "РегистрационныйНомер", "УполномоченныйСотрудник".
//  МассивИмен = МассивИмен("Идентификатор, РегистрационныйНомер, УполномоченныйСотрудник")
//
Функция МассивИмен(Знач ИменаЧерезЗапятую) Экспорт
	
	МассивПодстрок = Новый Массив;
	
	// Удалить все пробелы, оставив только запятые.
	Пока Найти(ИменаЧерезЗапятую, " ") <> 0 Цикл
		ИменаЧерезЗапятую = СтрЗаменить(ИменаЧерезЗапятую, " ", "");	
	КонецЦикла;
	
	// Разбить строку и заполнить массив.	
	Позиция = Найти(ИменаЧерезЗапятую, ",");
	Пока Позиция <> 0 Цикл
		МассивПодстрок.Добавить(Лев(ИменаЧерезЗапятую, Позиция - 1));
		ИменаЧерезЗапятую = Сред(ИменаЧерезЗапятую, Позиция + 1);
		Позиция = Найти(ИменаЧерезЗапятую, ",");
	КонецЦикла;	
	Если НЕ ПустаяСтрока(ИменаЧерезЗапятую) Тогда
		МассивПодстрок.Добавить(ИменаЧерезЗапятую);	
	КонецЕсли;
	
	Возврат МассивПодстрок;
	
КонецФункции

Функция КраткоеПредставлениеДокументаИСМПТ(Знач СсылкаДокументИСМПТ) Экспорт
	
	СтрокаДокумент = Строка(СсылкаДокументИСМПТ);
	
	Если ТипЗнч(СсылкаДокументИСМПТ) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда
		
		СтрокаДокумент = СтрЗаменить(СтрокаДокумент, НСтр("ru = 'Акт приема/передачи'"), НСтр("ru = 'Акт'"));
		
	ИначеЕсли ТипЗнч(СсылкаДокументИСМПТ) = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") Тогда
		
		СтрокаДокумент = СтрЗаменить(СтрокаДокумент, НСтр("ru = 'Уведомление о расхождениях'"), НСтр("ru = 'Уведомление'"));
		
	ИначеЕсли ТипЗнч(СсылкаДокументИСМПТ) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК") Тогда
		
		СтрокаДокумент = СтрЗаменить(СтрокаДокумент, НСтр("ru = 'Уведомление о ввозе маркируемой продукции из ЕАЭС'"), НСтр("ru = 'Ввоз маркированной продукции из ЕАЭС'"));
		
	ИначеЕсли ТипЗнч(СсылкаДокументИСМПТ) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК") Тогда
		
		СтрокаДокумент = СтрЗаменить(СтрокаДокумент, НСтр("ru = 'Уведомление о ввозе маркируемой продукции из третьих стран'"), НСтр("ru = 'Ввоз маркированной продукции из третьих стран'"));
		
	ИначеЕсли ТипЗнч(СсылкаДокументИСМПТ) = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСМПТК") Тогда
		
		СтрокаДокумент = СтрЗаменить(СтрокаДокумент, НСтр("ru = 'Уведомление о вводе в оборот'"), НСтр("ru = 'Повторный ввод в оборот'"));
		
	ИначеЕсли ТипЗнч(СсылкаДокументИСМПТ) = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСМПТК") Тогда
		
		СтрокаДокумент = СтрЗаменить(СтрокаДокумент, НСтр("ru = 'Уведомление о выводе из оборота'"), НСтр("ru = 'Вывод из оборота'"));
		
	КонецЕсли;
	
	СтрокаДокумент = СтрЗаменить(СтрокаДокумент, НСтр("ru = ' 0:00:00'"), "");
	
	Возврат СтрокаДокумент;
	
КонецФункции

Функция ПустыеПараметрыФормыИзменениеСтатусовДокументовИСМПТ() Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Действие", "");
	ПараметрыФормы.Вставить("МассивДокументовИСМПТ", Новый Массив);
	ПараметрыФормы.Вставить("ЗапускатьФоновоеЗадание", Ложь);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Проверяет корректность указанного идентификатора. 
// В качестве идентификатора должна быть указана строка, содержащая только цифры.
//
// Параметры:
//  Идентификатор  - Строка - идентификатор для проверки.
//  ТекстСообщения - Строка - если идентификатор некорректен, то в данный параметр будет помещен текст с причиной некорректности
//
// Возвращаемое значение:
//  Истина       - идентификатор содержит только цифры или пустой;
//  Ложь         - идентификатор содержит не только цифры.
//
Функция ИдентификаторКорректен(Идентификатор, ТекстСообщения = "") Экспорт
	
	Если ТипЗнч(Идентификатор) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Идентификатор) Тогда
		ТекстСообщения = НСтр("ru = 'Идентификатор не указан'");
		Возврат Истина;
	КонецЕсли;
	
	Для а = 1 По СтрДлина(Идентификатор) Цикл
		КодСимвола = КодСимвола(Сред(Идентификатор, а, 1));
		Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			ТекстСообщения = НСтр("ru = 'Идентификатор ""%Идентификатор%"" содержит нецифровые символы'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Идентификатор%", Идентификатор);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#Область ИмяСобытия
	
Функция ИмяСобытияЗаписьАктПриемаПередачи() Экспорт 
	
	Возврат "Запись_АктПриемаПередачи";
	
КонецФункции

Функция ИмяСобытияЗаписьАППКорректировка() Экспорт 
	
	Возврат "Запись_АктКорректировка";
	
КонецФункции

Функция ИмяСобытияВыборАПП() Экспорт 
	
	Возврат "Выбор_АктПриемаПередачи";
	
КонецФункции

Функция ИмяСобытияЗаписьУведомлениеОРасхождении() Экспорт 
	
	Возврат "Запись_УведомлениеОРасхождении";
	
КонецФункции

Функция ИмяСобытияЗаписьУведомлениеОВвозеИзТретьихСтран() Экспорт 
	
	Возврат "Запись_УведомлениеОВвозеИзТретьихСтран";
	
КонецФункции

Функция ИмяСобытияЗаписьУведомлениеОВвозеИзЕАЭС() Экспорт 
	
	Возврат "Запись_УведомлениеОВвозеИзЕАЭС";
	
КонецФункции

Функция ИмяСобытияЗаписьУведомлениеОВводеВОборот() Экспорт 
	
	Возврат "Запись_УведомлениеОВводеВОборот";
	
КонецФункции

Функция ИмяСобытияЗаписьУведомлениеОВыводеИзОборота() Экспорт 
	
	Возврат "Запись_УведомлениеОВыводеИзОборота";
	
КонецФункции

Функция ИмяСобытияСинхронизацияИСМПТ() Экспорт 
	
	Возврат "Синхронизация_ИСМПТ";	
	
КонецФункции

Функция ИмяСобытияЗаписьЗаказНаЭмиссию() Экспорт 
	
	Возврат "Запись_ЗаказНаЭмиссию";
	
КонецФункции

Функция ИмяСобытияОбновлениеСтатусаЗаказНаЭмиссию() Экспорт 
	
	Возврат "ОбновлениеСтатуса_ЗаказНаЭмиссию";
	
КонецФункции

Функция ИмяСобытияПолучениеПричиныОтказаЗаказНаЭмиссию() Экспорт 
	
	Возврат "ПолучениеПричиныОтказа_ЗаказНаЭмиссию";
	
КонецФункции

Функция ИмяСобытияПолучениеКмПоЗаказу() Экспорт 
	
	Возврат "ПолучениеКМ";
	
КонецФункции

Функция ИмяСобытияЗаписьАгрегацияКодовМаркировки() Экспорт 
	
	Возврат "Запись_АгрегацияКодовМаркировки";
	
КонецФункции

Функция ИмяСобытияЗаписьНанесениеКодовМаркировки() Экспорт 
	
	Возврат "Запись_НанесениеКодовМаркировки";
	
КонецФункции

Функция ИмяСобытияЗаписьУведомлениеОбЭкспортеЕАЭС() Экспорт 
	
	Возврат "Запись_УведомлениеОбЭкспортеЕАЭС";
	
КонецФункции   

Функция ИмяСобытияУведомлениеОПриемкеЕАЭС() Экспорт 
	
	Возврат "Запись_УведомлениеОПриемкеЕАЭС";
	
КонецФункции

Функция ИмяСобытияЗаписьУведомлениеОПриемкеЕАЭС() Экспорт 
	
	Возврат "Запись_УведомлениеОПриемкеЕАЭС";
	
КонецФункции

Функция ИмяСобытияЗаписьУведомлениеОбОтгрузкеЕАЭС() Экспорт 
	
	Возврат "Запись_УведомлениеОбОтгрузкеЕАЭС";
	
КонецФункции

#КонецОбласти

#Область Цвет

Функция ЦветЗеленый() Экспорт 
	
	Зеленый = Новый Цвет(0, 100, 0);
	Возврат Зеленый;
		
КонецФункции

Функция ЦветКрасный() Экспорт
	
	Красный = Новый Цвет(255, 0, 0);
	Возврат Красный;
	
КонецФункции

Функция ЦветСиний() Экспорт
	
	Синий = Новый Цвет(28, 85, 174);
	Возврат Синий;	
	
КонецФункции

Функция ЦветЧерный() Экспорт
	
	Возврат WebЦвета.Черный;
	
КонецФункции

Функция ЦветСостояния(Знач СостояниеДокументИСМПТ) Экспорт
	
	//Документы ИСМП
	Если СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.Сформирован")
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ОбрабатываетсяСервером") Тогда
		
		Цвет = ЦветСиний();
		
	ИначеЕсли СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ПринятСервером")
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ДоставленПолучателю")
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ПодтвержденПолучателем")
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ПринятОтПоставщика") 
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ПринятПроверен") Тогда
		
		Цвет = ЦветЗеленый();
		
	ИначеЕсли СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ОтклоненСервером")
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ОшибкаДанных")
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.Отозван")
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.Аннулирован")
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ОтклоненПолучателем") Тогда
		  
		Цвет = ЦветКрасный();
		
	//Документы СУЗ
	ИначеЕсли СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовСУЗИСМПТК.Создан")
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовСУЗИСМПТК.ОжидаетПодтверждения")
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовСУЗИСМПТК.Черновик") Тогда
		
		Цвет = ЦветСиний();
		
	ИначеЕсли СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовСУЗИСМПТК.Готов")
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовСУЗИСМПТК.Закрыт") Тогда
		
		Цвет = ЦветЗеленый();
		
	ИначеЕсли СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовСУЗИСМПТК.НеПодтвержден")
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовСУЗИСМПТК.Отклонен") 
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовСУЗИСМПТК.ЗакрытСОшибкой") Тогда
		  
		Цвет = ЦветКрасный();
		
	Иначе
		
		Цвет = ЦветСиний();
		
	КонецЕсли;
	
	Возврат Цвет;
	
КонецФункции

Функция ЦветСтатусаКарточкиНацКаталога(Знач СостояниеКарточки) Экспорт
	
	Если СостояниеКарточки = ПредопределенноеЗначение("Перечисление.СтатусыКарточекНацКаталогаИСМПТК.Черновик")
		ИЛИ СостояниеКарточки = ПредопределенноеЗначение("Перечисление.СтатусыКарточекНацКаталогаИСМПТК.НаМодерации")
		ИЛИ СостояниеКарточки = ПредопределенноеЗначение("Перечисление.СтатусыКарточекНацКаталогаИСМПТК.ОжидаетПодписания") Тогда
			
		Цвет = ЦветСиний();
		
	ИначеЕсли СостояниеКарточки = ПредопределенноеЗначение("Перечисление.СтатусыКарточекНацКаталогаИСМПТК.Опубликована") Тогда
		
		Цвет = ЦветЗеленый();
		
	ИначеЕсли СостояниеКарточки = ПредопределенноеЗначение("Перечисление.СтатусыКарточекНацКаталогаИСМПТК.ТребуетИзменений") Тогда
				  
		Цвет = ЦветКрасный();
				
	Иначе
		
		Цвет = ЦветСиний();
		
	КонецЕсли;
	
	Возврат Цвет;
	
КонецФункции

#КонецОбласти

#Область Действие

Функция ДействиеОтправка() Экспорт
	
	Возврат "Отправка";
	
КонецФункции

Функция ДействиеПолучениеКМ() Экспорт
	
	Возврат "ПолучениеКМ";
	
КонецФункции

Функция ДействиеВыгрузкаКМ() Экспорт
	
	Возврат "ВыгрузкаКМ";
	
КонецФункции

Функция ДействиеВыгрузка() Экспорт
	
	Возврат "Выгрузка";
	
КонецФункции

Функция ДействиеОтзыв() Экспорт
	
	Возврат "Отзыв";
	
КонецФункции

Функция ДействиеОтклонение() Экспорт	
	
	Возврат "Отклонение";
	
КонецФункции

Функция ДействиеПодтверждение() Экспорт
	
	Возврат "Подтверждение";
	
КонецФункции

Функция ДействиеОтклонениеОтзыва() Экспорт	
	
	Возврат "ОтклонениеОтзыва";	
	
КонецФункции

Функция ДействиеОтклонениеДополнительногоИлиИсправленного() Экспорт	
	
	Возврат "ОтклонениеДополнительногоИлиИсправленного";
	
КонецФункции

#КонецОбласти

#КонецОбласти

// Возвращает адрес сервера ИС МП.
// 
// Возвращаемое значение:
// 	Строка - адрес сервера ИС МП.
//
Функция АдресСервера_ИСМП(ВидПродукции = Неопределено, Авторизация = Ложь) Экспорт
	
	АдресИСМПТКонстанта = ИнтеграцияИСМПТКВызовСервера.ПолучитьАдресаСерверовИСМПТ().АдресИСМПТ;
	АдресИСМПТ 			= ИнтеграцияИСМПТКВызовСервера.ОбработатьАдресИСМПТКонстанта(АдресИСМПТКонстанта);
		
	Возврат АдресИСМПТ;
	
КонецФункции

// Возвращает параметры для отправки HTTP запросов ИС МП.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ИспользоватьЗащищенноеСоединение - Булево - Признак использования SSL.
// * Таймаут - Число - Таймаут соединения.
// * Порт - Число - Порт соединения.
// * Сервер - Строка - Адрес сервера.
// * ПредставлениеСервиса - Строка - Представления сервиса.
//
Функция ПараметрыОтправкиHTTPЗапросов_ИСМП(ВидПродукции = Неопределено, Авторизация = Ложь) Экспорт
	
	ПараметрыОтправкиHTTPЗапросов = Новый Структура;
	ПараметрыОтправкиHTTPЗапросов.Вставить("ПредставлениеСервиса",             НСтр("ru = 'ИС МПТ'"));
	ПараметрыОтправкиHTTPЗапросов.Вставить("Сервер",                           АдресСервера_ИСМП(ВидПродукции, Авторизация));
	ПараметрыОтправкиHTTPЗапросов.Вставить("Порт",                             443);
	ПараметрыОтправкиHTTPЗапросов.Вставить("Таймаут",                          60);
	ПараметрыОтправкиHTTPЗапросов.Вставить("ИспользоватьЗащищенноеСоединение", Истина);
	
	Возврат ПараметрыОтправкиHTTPЗапросов;
	
КонецФункции

// Инициализировать структуру параметров запроса в ИС МОТП (ИС МП) для получения ключа сессии.
// 
// Параметры:
// 	Организация - ОпределяемыйТип.Организация - Организация.
// Возвращаемое значение:
// 	(См. ИнтерфейсАвторизацииИСМПТККлиентСервер.ПараметрыЗапросаКлючаСессии).
Функция ПараметрыЗапросаКлючаСессии_ИСМП(Организация = Неопределено) Экспорт
	
	ПараметрыОтправкиHTTPЗапросов = ПараметрыОтправкиHTTPЗапросов_ИСМП(Неопределено, Истина);
	
	ПараметрыЗапроса = ИнтерфейсАвторизацииИСМПТККлиентСервер.ПараметрыЗапросаКлючаСессии();
	ПараметрыЗапроса.Организация = Организация;
	
	ПараметрыЗапроса.ПредставлениеСервиса             = ПараметрыОтправкиHTTPЗапросов.ПредставлениеСервиса;
	ПараметрыЗапроса.Сервер                           = ПараметрыОтправкиHTTPЗапросов.Сервер;
	ПараметрыЗапроса.Порт                             = ПараметрыОтправкиHTTPЗапросов.Порт;
	ПараметрыЗапроса.Таймаут                          = ПараметрыОтправкиHTTPЗапросов.Таймаут;
	ПараметрыЗапроса.ИспользоватьЗащищенноеСоединение = ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение;
	
	ПараметрыЗапроса.ИмяПараметраСеанса                = "ДанныеКлючаСессииИСМПТК";
	ПараметрыЗапроса.АдресЗапросаПараметровАвторизации = "api/v3/true-api/auth/key";
	ПараметрыЗапроса.АдресЗапросаКлючаСессии           = "api/v3/true-api/auth/simpleSignIn";
	
	Возврат ПараметрыЗапроса;
	
КонецФункции
