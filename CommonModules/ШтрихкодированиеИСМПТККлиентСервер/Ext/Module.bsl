
// Проверяет код маркировки на соответствие шаблону потребительской упаковки
// 
// Параметры:
// 	КодМаркировки - Строка - Код маркировки.
// 	GTIN          - Строка - GTIN [Возвращаемое значение].
// Возвращаемое значение:
// 	Булево - Истина, если код соответствует коробке обуви.
Функция ЭтоКодМаркировкиПотребительскойУпаковки(КодМаркировки, EAN = Неопределено, СерийныйНомер = Неопределено, КодТНВЭД = Неопределено) Экспорт
	
	Алфавит = ДопустимыеСимволыВКодеМаркировки();
	
	Если Не СтрНачинаетсяС(СокрЛП(КодМаркировки), "(") Тогда
		
		ЭтоКМ38 = (СтрДлина(КодМаркировки) = 38);
		ЭтоКМ32 = (СтрДлина(КодМаркировки) = 31);
		
		Если ЭтоКМ38 Или ЭтоКМ32 Тогда
			
			ОсновнойАлфавит = "0123456789";
			
			ИдентификаторПрименения = Сред(КодМаркировки, 1, 2);
			Если ИдентификаторПрименения <> "01" Тогда
				Возврат Ложь;
			КонецЕсли;
			
			// "01" + 14 знаков GTIN
			ЗначениеEAN = ШтрихкодированиеИСМПТКВызовСервера.EANПоКодуМаркировки(Сред(КодМаркировки, 3, 14));
			Если ЗначениеEAN = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ИдентификаторПрименения = Сред(КодМаркировки, 17, 2);
			Если ИдентификаторПрименения <> "21" Тогда
				Возврат Ложь;
			КонецЕсли;
			
			// "21" + 13 знаков Серийный номер
			ЗначениеСерийныйНомер = Сред(КодМаркировки, 19, 13);
			Если Не ШтрихкодированиеИСМПТККлиентСервер.КодСоответствуетАлфавиту(ЗначениеСерийныйНомер, АлфавитКодаМаркировки()) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Если ЭтоКМ38 Тогда
				
				ИдентификаторПрименения = Сред(КодМаркировки, 32, 3);
				Если ИдентификаторПрименения <> "240" Тогда
					Возврат Ложь;
				КонецЕсли;
				
				ЗначениеКодТНВЭД = Сред(КодМаркировки, 35, 4);
				
				// "240" + 4 знака Код ТН ВЭД
				Если Не ШтрихкодированиеИСМПТККлиентСервер.КодСоответствуетАлфавиту(ЗначениеКодТНВЭД, ОсновнойАлфавит) Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			EAN           = ЗначениеEAN;
			СерийныйНомер = ЗначениеСерийныйНомер;
			КодТНВЭД      = ЗначениеКодТНВЭД;
			
			Возврат Истина;
			
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		РезультатРазбора = ПодключаемоеОборудованиеИСМПТККлиентСервер.РазобратьСтрокуШтрихкодаGS1(КодМаркировки);
		
		Если Не РезультатРазбора.Разобран Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Обязательный элемент кода маркировки.
		Идентификатор01 = РезультатРазбора.ДанныеШтрихкода["01"];
		Если Идентификатор01 = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗначениеEAN = ШтрихкодированиеИСМПТКВызовСервера.EANПоКодуМаркировки(Идентификатор01.Значение);
		Если ЗначениеEAN = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Обязательный элемент кода маркировки.
		Идентификатор21 = РезультатРазбора.ДанныеШтрихкода["21"];
		Если Идентификатор21 = Неопределено
				Или СтрДлина(Идентификатор21.Значение) <> 13
				Или Не ШтрихкодированиеИСМПТККлиентСервер.КодСоответствуетАлфавиту(
					Идентификатор21.Значение, АлфавитКодаМаркировки()) Тогда // Серийный номер
			Возврат Ложь;
		КонецЕсли;
		
		// Необязательный элемент кода маркировки.
		Идентификатор240 = РезультатРазбора.ДанныеШтрихкода["240"];
		Если Идентификатор240 <> Неопределено Тогда // Ключ проверки
			
			Если СтрДлина(Идентификатор240.Значение) <> 4
				Или Не ШтрихкодированиеИСМПТККлиентСервер.КодСоответствуетАлфавиту(Идентификатор240.Значение, "0123456789") Тогда // Код ТН ВЭД
				Возврат Ложь;
			КонецЕсли;
			
			ЗначениеКодТНВЭД = Идентификатор240.Значение;
			
		КонецЕсли;
		
		// Необязательный элемент кода маркировки.
		Идентификатор91 = РезультатРазбора.ДанныеШтрихкода["91"];
		Если Идентификатор91 <> Неопределено Тогда // Ключ проверки
			
			Если СтрДлина(Идентификатор91.Значение) <> 4
				Или Не ШтрихкодированиеИСМПТККлиентСервер.КодСоответствуетАлфавиту(Идентификатор91.Значение, "abcdefghijklmnopqrstuvwxyz0123456789") Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// Необязательный элемент кода маркировки.
		Идентификатор92 = РезультатРазбора.ДанныеШтрихкода["92"];
		Если Идентификатор92 <> Неопределено Тогда // Подпись
			
			Если СтрДлина(Идентификатор92.Значение) <> 88
				Или Не ШтрихкодированиеИСМПТККлиентСервер.КодСоответствуетАлфавиту(Идентификатор92.Значение, АлфавитКодаМаркировки()) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		EAN           = ЗначениеEAN;
		СерийныйНомер = Идентификатор21.Значение;
		КодТНВЭД      = ЗначениеКодТНВЭД;
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

// Возвращает структуру из строк с допустимыми символами
// 
// Возвращаемое значение:
// 	Структура - допустимые символы в коде маркировки:
// * БуквыЦифрыЗнаки - Строка - "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!”%&’()*+,-./_:;=<>?"
// * БуквыЦифрыЗнакиМРЦ - Строка - "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!""%&'*+-./_,:;=<>?()"
// * Цифры - Строка - "0123456789"
Функция ДопустимыеСимволыВКодеМаркировки() Экспорт
	
	Алфавит = Новый Структура;
	Алфавит.Вставить("БуквыЦифры",         "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789");
	Алфавит.Вставить("БуквыЦифрыЗнаки",    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!”""%&’'()*+,-./_:;=<>?");
	Алфавит.Вставить("БуквыЦифрыЗнакиМРЦ", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!""%&'*+-./_,:;=<>?");
	Алфавит.Вставить("Цифры",              "0123456789");
	Возврат Алфавит;
	
КонецФункции

// Проверяет код маркировки на соответствие шаблону логистической упаковки
// 
// Параметры:
//  КодМаркировки - Строка - Штрихкод.
// Возвращаемое значение:
//  Булево - Истина, если код соответствует логистической упаковке.
Функция ЭтоКодЛогистическойУпаковки_ИСМП(КодМаркировки, ЗначениеSSCC = Неопределено) Экспорт
	
	ЭтоGTIN = МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(КодМаркировки);
	Если ЭтоGTIN Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрДлина(КодМаркировки) = 18
		И РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.КонтрольноеЧислоSSCC(
			Сред(КодМаркировки, 1, СтрДлина(КодМаркировки) - 1)) = Число(Прав(КодМаркировки, 1)) Тогда
		ЗначениеSSCC = КодМаркировки;
	КонецЕсли;
	
	Если ЗначениеSSCC = Неопределено Тогда
		
		РезультатРазбора = ПодключаемоеОборудованиеИСМПТККлиентСервер.РазобратьСтрокуШтрихкодаGS1(КодМаркировки);
		Если Не РезультатРазбора.Разобран Тогда // Проверка на штрихкод GS1.
			
			Если СтрДлина(КодМаркировки) = 18
				И РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.КонтрольноеЧислоSSCC(
					Сред(КодМаркировки, 1, СтрДлина(КодМаркировки) - 1)) = Число(Прав(КодМаркировки, 1)) Тогда
				ЗначениеSSCC = КодМаркировки;
			Иначе
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			
			Если РезультатРазбора.ДанныеШтрихкода.Количество() > 1 Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ДанныеШтрихкода00 = РезультатРазбора.ДанныеШтрихкода.Получить("00");
			Если ДанныеШтрихкода00 <> Неопределено Тогда
				ЗначениеSSCC = ДанныеШтрихкода00.Значение;
			Иначе
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Определяет принадлежность имени объекта к контексту.
//
// Параметры:
//  Контекст - УправляемаяФорма, ДокументСсылка, СправчникСсылка, Обработка - контекст.
//  ИмяОбъекта - Строка - Имя объекта.
// Возвращаемое значение:
//  Булево - Истина, если имя объекта принадлежит контексту.
Функция ЭтоКонтекстОбъекта(Контекст, Знач ИмяОбъекта) Экспорт
	
	ЭтоСсылка   = Ложь;
	ЭтоФорма    = Ложь;
	Разделитель = ".";
	
	Если ТипЗнч(Контекст) = Тип("УправляемаяФорма") Тогда
		
		ЭтоФорма       = Истина;
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Контекст.ИмяФормы, Разделитель);
		ИмяФормы       = МассивПодстрок[0] + Разделитель + МассивПодстрок[1];
		
	Иначе
		
		ЭтоСсылка         = Истина;
		МассивПодстрок    = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяОбъекта, Разделитель);
		
		Если МассивПодстрок[0] <> "Документ" Тогда
			Возврат Ложь;
		КонецЕсли;
		
		МассивПодстрок[0] = МассивПодстрок[0] + "Ссылка";
		ИмяОбъекта = СтрСоединить(МассивПодстрок, Разделитель);
		
	КонецЕсли;
	
	Возврат ЭтоФорма И ИмяФормы = ИмяОбъекта Или ЭтоСсылка И ТипЗнч(Контекст) = Тип(ИмяОбъекта);

КонецФункции

// Определяет допустимость обработки вида продукции по параметрам сканирования.
//
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования)
// Возвращаемое значение:
//  Булево - Истина, если вид продукции допустим.
Функция ДопустимВидПродукции(ПараметрыСканирования, ВидПродукцииИС) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукцииИС) <> Неопределено;
	
КонецФункции

#Область Преобразования

// Убирает разделители идентификаторов "(", ")" из кода маркировки.
// 
// Параметры:
//  КодМаркировки - Строка - Код маркировки.
// Возвращаемое значение:
//  Строка - Код маркировки без разделителей.
Функция КодМаркировкиБезСкобок(КодМаркировки) Экспорт
	
	ЧтениеШтрихкода = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПараметрыШтрихкодаGS1СоСкобками(КодМаркировки);
	Если ЧтениеШтрихкода.Результат <> Неопределено Тогда
		Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодGS1(ЧтениеШтрихкода.Результат, Ложь, "");
	КонецЕсли;
	
КонецФункции

// Выполняет проверку на формат GS1. Если штрихкод является штрихкодом GS1 - приводит к формату со скобками.
//
// Параметры:
//  Штрихкод - Строка - Значение штрихкода.
// Возвращаемое значение:
//  Строка - Значение штрихкода.
Функция ШтрихкодВФорматеGS1(Штрихкод) Экспорт
	
	ЧтениеШтрихкода = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПараметрыШтрихкода(Штрихкод);
	Если Не ЧтениеШтрихкода.Результат = Неопределено Тогда
		
		Если ЧтениеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.SSCC") Тогда
			
			ШтрихкодGS1 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодSSCC(ЧтениеШтрихкода.Результат, Истина);
			Возврат ШтрихкодGS1;
			
		ИначеЕсли ЧтениеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.GS1_128")
			Или ЧтениеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.GS1_DataBarExpandedStacked") Тогда
			
			ШтрихкодGS1 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодGS1(ЧтениеШтрихкода.Результат, Истина);
			Возврат ШтрихкодGS1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

// Вычисляет штрихкод EAN из GTIN.
//
// Параметры:
//  GTIN - Строка - GTIN.
// Возвращаемое значение:
//  Строка - Вычисленное значение EAN.
Функция ШтрихкодEANИзGTIN(Знач Штрихкод) Экспорт
	
	Если Лев(Штрихкод, 1) = "0" Тогда
		Штрихкод = Сред(Штрихкод, 2); //EAN13
		Если Лев(Штрихкод, 5) = "00000" Тогда
			Штрихкод = Сред(Штрихкод, 6); //EAN8
		КонецЕсли;
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

// Дополняет штрихкод EAN лидирующими нулями.
//
// Параметры:
//  ШтрихкодEAN - Строка - Значение штрихкода EAN.
// Возвращаемое значение:
//  Строка - GTIN.
Функция GTINПоШтрихкодуEAN(Знач ШтрихкодEAN) Экспорт

	GTIN = ШтрихкодEAN;
	Пока СтрДлина(GTIN) < 14 Цикл
		GTIN = "0" + GTIN;
	КонецЦикла;

	Возврат GTIN;

КонецФункции

// Вычисляет штрихкод GTIN по коду маркировки.
//
// Параметры:
//  КодМаркировки - Строка - Значение штрихкода.
// Возвращаемое значение:
//  Неопределено, Строка - Неопределено, если вычислить штрихкод GTIN не удалось.
Функция GTINПоКодуМаркировки(Знач КодМаркировки) Экспорт

	РезультатРазбора = ПодключаемоеОборудованиеИСМПТККлиентСервер.РазобратьСтрокуШтрихкодаGS1(КодМаркировки);

	Если Не РезультатРазбора.Разобран Тогда
		Возврат Неопределено
	КонецЕсли;

	ДанныеШтрихкода01 = РезультатРазбора.ДанныеШтрихкода.Получить("01");
	Если ДанныеШтрихкода01 = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	GTIN = ДанныеШтрихкода01.Значение;

	ЭтоGTIN = МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(GTIN);
	Если Не ЭтоGTIN Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат GTIN;

КонецФункции

// Декодирует штрихкод по алгоритму Base64 в строковый формат.
// 
// Параметры:
//  ШтрихкодВBase64 - Строка - закодированный штрихкод.
// Возвращаемое значение:
//  Строка - Декодированный штрихкод.
Функция Base64ВШтрихкод(ШтрихкодВBase64) Экспорт
	
	ДвоичныеДанные = Base64Значение(ШтрихкодВBase64);
	Если ДвоичныеДанные = Неопределено Тогда
		Штрихкод = ШтрихкодВBase64;
	Иначе
		Штрихкод = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

// Кодирует значение штрихкода по алгоритму Base64.
// 
// Параметры:
//  Штрихкод - Строка - Значение штрихкода.
// Возвращаемое значение:
//  Строка - штрихкод закодированный по алгоритму Base64.
Функция ШтрихкодВBase64(Штрихкод) Экспорт
	
	ДвоичныеДанные  = ПолучитьДвоичныеДанныеИзСтроки(Штрихкод);
	ШтрихкодВBase64 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ДвоичныеДанныеBase64(ДвоичныеДанные);
	
	Возврат ШтрихкодВBase64;
	
КонецФункции

// Вычисляет штрихкода EAN по коду маркировки.
// 
// Параметры:
//  КодМаркировки - Строка - Описание
// Возвращаемое значение:
//  Неопределено, Строка - Описание
Функция EANПоКодуМаркировки(КодМаркировки) Экспорт
	
	Если СтрНачинаетсяС(КодМаркировки, "(") Тогда
		GTIN = Сред(КодМаркировки, 5, 14);
	Иначе
		GTIN = Лев(КодМаркировки, 14);
	КонецЕсли;
	
	ЭтоGTIN = МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(GTIN);
	Если Не ЭтоGTIN Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	EAN = ШтрихкодированиеИСМПТККлиентСервер.ШтрихкодEANИзGTIN(GTIN);
	
	Возврат EAN;
	
КонецФункции

Процедура ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода) Экспорт
	
	Если ТипЗнч(ДанныеШтрихкода) = Тип("Структура") Тогда
		Если Не ДанныеШтрихкода.Свойство("ФорматBase64")
			Или (ДанныеШтрихкода.Свойство("ФорматBase64")
			И ДанныеШтрихкода.ФорматBase64 = Ложь) Тогда
			
			ДанныеШтрихкода.Штрихкод = ШтрихкодВBase64(ДанныеШтрихкода.Штрихкод);
			ДанныеШтрихкода.Вставить("ФорматBase64", Истина);
			
		КонецЕсли;
	Иначе
		ДанныеШтрихкода = ШтрихкодВBase64(ДанныеШтрихкода);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДекодироватьШтрихкодДанныхBase64(ДанныеШтрихкода) Экспорт
	
	Если ДанныеШтрихкода.Свойство("ФорматBase64")
		И ДанныеШтрихкода.ФорматBase64 = Истина Тогда
		
		ДанныеШтрихкода.Штрихкод = Base64ВШтрихкод(ДанныеШтрихкода.Штрихкод);
		ДанныеШтрихкода.ФорматBase64 = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает допустимые символы кода маркировки.
// 
// Параметры:
// Возвращаемое значение:
// 	Строка - Алфавит серийного номера.
Функция АлфавитКодаМаркировки() Экспорт
	
	Возврат "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!”""%&’'()*+,-./_:;=<>?";
	
КонецФункции

// Выполняет проверку на соответствие алфавиту кода маркировки.
//
// Параметры:
//  Код - Строка - Код маркировки.
//  Алфавит - Строка - перечень допустимых символов.
// Возвращаемое значение:
//  Булево - Истина, если код соответствует алфавиту.
Функция КодСоответствуетАлфавиту(Код, Алфавит) Экспорт
	
	ДлинаКода = СтрДлина(Код);
	
	Индекс = 1;
	Пока Индекс < ДлинаКода Цикл
		
		ПроверяемыйСимвол = Сред(Код, Индекс, 1);
		
		Если СтрНайти(Алфавит, ПроверяемыйСимвол, НаправлениеПоиска.СНачала) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область МРЦ

// Допустимые символы, которые может содержать МРЦ в коде маркировки.
// 
// Возвращаемое значение:
//  Строка - алфавит МРЦ.
Функция АлфавитМРЦ()
	
	Возврат "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!""%&'*+-./_,:;=<>?";
	
КонецФункции

#КонецОбласти

#Область Прочее

// Возвращает сокращенное представление штрихкода маркируемой продукции.
// 
// Параметры:
//  Штрихкод - Строка - Штрихкод.
// Возвращаемое значение:
//  Строка - Краткое представление штрихкода маркируемой продукции.
Функция ПредставлениеШтрихкода(Штрихкод) Экспорт
	
	ПредставлениеШтрихкода = Штрихкод;
	Если СтрДлина(ПредставлениеШтрихкода) > 40 Тогда
		Если СтрНайти(Штрихкод, "(") = 1 Тогда
			ПредставлениеШтрихкода =  Лев(ПредставлениеШтрихкода, 37) + "...";
		Иначе
			ПредставлениеШтрихкода =  Лев(ПредставлениеШтрихкода, 5) + "....." + Прав(ПредставлениеШтрихкода, 8);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеШтрихкода;
	
КонецФункции

// Инициализирует и возвращает общие параметры сканирования для всех видов продукции.
//
// Возвращаемое значение:
//  Структура - Описание:
// * ИмяКолонкиШтрихкодУпаковки - Строка -
// * ИмяТабличнойЧастиШтрихкодыУпаковок - Строка - Наименование табличной части, где хранятся элементы штрихкодов упаковок.
// * Склад - ОпределяемыйТип.Склад - Место хранения.
// * ПараметрыУказанияСерий - Структура -
// * ОперацияКонтроляАкцизныхМарок - Строка -
// * ДополнительныеПараметры - Структура -
// * ИспользуютсяДанныеВыбораПоМаркируемойПродукции - Булево -
// * ДанныеВыбораПоМаркируемойПродукции - Неопределено -
// * ИспользуетсяСоответствиеШтрихкодовСтрокДерева - Булево -
// * АдресДанныхДокументаОснования - Неопределено -
// * КонтрольРасхожденийСДокументомОснованием - Булево -
// * КэшированныеЗначения - Неопределено -
// * ТолькоМаркируемаяПродукция - Булево -
// * ВозможнаЗагрузкаТСД - Булево -
// * ДокументОснование - Неопределено -
// * СоздаватьШтрихкодУпаковки - Булево -
// * АдресСоответствияАкцизныхМарок - Неопределено -
// * ДопустимыеВидыПродукции - Массив -
Функция БазовыеПараметрыСканирования() Экспорт
	
	БазовыеПараметры = Новый Структура;
	
	БазовыеПараметры.Вставить("ДопустимыеВидыПродукции",                        Новый Массив);
	БазовыеПараметры.Вставить("КэшМаркируемойПродукции",                        Неопределено);
	БазовыеПараметры.Вставить("СоздаватьШтрихкодУпаковки",                      Истина);
	БазовыеПараметры.Вставить("ДокументОснование",                              Неопределено);
	БазовыеПараметры.Вставить("ВозможнаЗагрузкаТСД",                            Ложь);
	БазовыеПараметры.Вставить("ТолькоМаркируемаяПродукция",                     Ложь);
	БазовыеПараметры.Вставить("КэшированныеЗначения",                           Неопределено);
	БазовыеПараметры.Вставить("АдресДанныхДокументаОснования",                  Неопределено);
	БазовыеПараметры.Вставить("ИспользуетсяСоответствиеШтрихкодовСтрокДерева",  Ложь);
	БазовыеПараметры.Вставить("ДанныеВыбораПоМаркируемойПродукции",             Неопределено);
	БазовыеПараметры.Вставить("ИспользуютсяДанныеВыбораПоМаркируемойПродукции", Ложь);
	БазовыеПараметры.Вставить("ДополнительныеПараметры",                        Новый Структура);
	БазовыеПараметры.Вставить("ОперацияКонтроляАкцизныхМарок",                  "");
	БазовыеПараметры.Вставить("ПараметрыУказанияСерий",                         Неопределено);
	БазовыеПараметры.Вставить("Склад",                                          Неопределено);
	БазовыеПараметры.Вставить("ИмяТабличнойЧастиШтрихкодыУпаковок",             "ШтрихкодыУпаковок");
	БазовыеПараметры.Вставить("ИмяКолонкиШтрихкодУпаковки",                     "ШтрихкодУпаковки");
	БазовыеПараметры.Вставить("КонтрольРасхожденийСДокументомОснованием",       Ложь);
	БазовыеПараметры.Вставить("РазрешенаОбработкаБезУказанияМарки",             Ложь);
	БазовыеПараметры.Вставить("КонтрольПустыхУпаковок",                         Истина);
	БазовыеПараметры.Вставить("СопоставлятьНоменклатуру",                       Истина);
	БазовыеПараметры.Вставить("Организация",                                    Неопределено);
	БазовыеПараметры.Вставить("ДоступнаПечатьЭтикеток",                         Ложь);
	БазовыеПараметры.Вставить("ДопустимыйСпособВводаВОборот",                   Неопределено);
	БазовыеПараметры.Вставить("ИдентификаторФормы",                             Неопределено);
	БазовыеПараметры.Вставить("Владелец",                                       Неопределено);
	БазовыеПараметры.Вставить("СтатусКодаМаркировкиПоУмолчанию",                Неопределено);
	БазовыеПараметры.Вставить("ПроверятьДублиКодовМаркировки",                  Ложь);
	БазовыеПараметры.Вставить("ДанныеТаблицыТовары",                            Неопределено);
	БазовыеПараметры.Вставить("СсылкаНаОбъект",                                 Неопределено);
	БазовыеПараметры.Вставить("ЗапрашиватьСпособВводаВОборот",                  Неопределено);
	
	Возврат БазовыеПараметры;
	
КонецФункции

// Выполняет заполнение базовых параметров сканирования на основании данных контекста.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  Контекст - УправляемаяФорма, СсылкаНаОбъект - контекст, данные которого будут использованы для заполнения параметров сканирования.
Процедура ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст) Экспорт
	
	Если ТипЗнч(Контекст) = Тип("УправляемаяФорма") Тогда
		
		ПараметрыСканирования.Вставить("ИдентификаторФормы", Контекст.УникальныйИдентификатор);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "ДанныеВыбораПоМаркируемойПродукции") Тогда
			ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции = Контекст.ДанныеВыбораПоМаркируемойПродукции;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "КэшМаркируемойПродукции") Тогда
			ПараметрыСканирования.КэшМаркируемойПродукции = Контекст.КэшМаркируемойПродукции;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "ПараметрыУказанияСерий") Тогда
			ПараметрыСканирования.ПараметрыУказанияСерий = Контекст.ПараметрыУказанияСерий;
		КонецЕсли;
		
		ИсточникДанных = Контекст;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
			ИсточникДанных = Контекст.Объект;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникДанных, "Склад") Тогда
			ПараметрыСканирования.Склад = ИсточникДанных.Склад;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникДанных, "Организация") Тогда
			ПараметрыСканирования.Владелец = ИсточникДанных.Организация;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает параметры открытия формы уточнения данных у пользователя, таких как "Номенклатура", "Характеристика", "Серия".
// 
// Возвращаемое значение:
//  Структура - Описание:
// * ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// * Склад - ОпределяемыйТип.Склад - Склад, используемый для серий.
// * ПараметрыУказанияСерий - Структура - данные для расчета серий.
// * ШтрихкодEAN - Строка - Штрихкода формата EAN.
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатура - Элемент Характеристика.
// * Номенклатура - ОпределяемыйТип.Номенклатура - Элемент Номенклатура.
// * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода кода маркировки.
// * КодМаркировки - Строка - Код маркировки.
// * ХешСуммаКодаМаркировки - Строка - Хэш кода маркировки.
Функция ПараметрыОткрытияФормыУточненияДанных() Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("Операция",                               Неопределено);
	ПараметрыОткрытия.Вставить("ПараметрыСканирования",                  Неопределено);
	ПараметрыОткрытия.Вставить("ПараметрыУказанияСерий",                 Неопределено);
	ПараметрыОткрытия.Вставить("ДанныеДляУточненияСведенийПользователя", Неопределено);
	
	ПараметрыОткрытия.Вставить("КодМаркировки",             Неопределено);
	ПараметрыОткрытия.Вставить("ТипШтрихкода",              Неопределено);
	ПараметрыОткрытия.Вставить("Номенклатура",              Неопределено);
	ПараметрыОткрытия.Вставить("Характеристика",            Неопределено);
	ПараметрыОткрытия.Вставить("ШтрихкодEAN",               Неопределено);
	ПараметрыОткрытия.Вставить("Склад",                     Неопределено);
	ПараметрыОткрытия.Вставить("Серия",                     Неопределено);
	ПараметрыОткрытия.Вставить("РежимПечатиЭтикеток",       Ложь);
	ПараметрыОткрытия.Вставить("ВозвращатьШаблонПриПечати", Ложь);
	ПараметрыОткрытия.Вставить("ШаблонКодаМаркировки",      Неопределено);
	ПараметрыОткрытия.Вставить("ШаблонЭтикетки",            Неопределено);
	ПараметрыОткрытия.Вставить("СразуНаПринтер",            Ложь);
	ПараметрыОткрытия.Вставить("Шаблоны",                   Неопределено);
	ПараметрыОткрытия.Вставить("Документ",                  Неопределено);
	ПараметрыОткрытия.Вставить("ХешСуммаКодаМаркировки",    Неопределено);

	Возврат ПараметрыОткрытия;
	
КонецФункции

Процедура ДополнитьПараметрыЗаполненияТабличнойЧастиТовары(ПараметрыЗаполнения) Экспорт
	
	ПараметрыЗаполнения.Вставить("ЗаполнитьGTIN", Истина);
	ПараметрыЗаполнения.ЗаполнитьКодТНВЭД = Истина;
	
КонецПроцедуры

#КонецОбласти
