
Функция ЭтоOSXКлиент() Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + БК
	Возврат ОбщегоНазначенияКлиентСервер.ЭтоOSXКлиент();
	
	//Розница
	//Возврат ОбщегоНазначенияКлиент.ЭтоOSXКлиент();
	///////////////////

КонецФункции

Процедура ВыполнитьЗаписьОбъектаВФорме(Форма, Объект, ДействиеПослеЗаписи, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//Если Объект.Проведен Тогда
	//	ОбщегоНазначенияУТКлиент.Провести(Форма, Истина, ДействиеПослеЗаписи);
	//Иначе
	//	ОбщегоНазначенияУТКлиент.Записать(Форма, Истина, ДействиеПослеЗаписи);
	//КонецЕсли;
	
	//Розница
	//Если Объект.Проведен Тогда
	//	ОбщегоНазначенияРТКлиент.Провести(Форма, Истина, ДействиеПослеЗаписи); 
	//Иначе
	//	ОбщегоНазначенияРТКлиент.Записать(Форма, Истина, ДействиеПослеЗаписи);
	//КонецЕсли;
	
	//БК
	//Требуется адаптация
	///////////////////
	
КонецПроцедуры

Функция ОбрабатыватьВнешнееСобытиеТО() Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + БК
	Возврат Ложь;
	
	//Розница
	//Возврат Истина;
	///////////////////
		
КонецФункции

// В процедуре нужно реализовать алгоритм преобразования данных из подсистемы подключаемого оборудования.
//
// Параметры:
//  Результат - Структура - со свойствами Штрихкод, Количество
//  Параметр  - Массив    - входящие данные.
Процедура ПреобразоватьДанныеСоСканераВСтруктуру(Результат, Параметр) Экспорт
	
	Результат = МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр);
	
КонецПроцедуры

Функция ВнешнееСобытиеПреобразоватьДанныеСоСканераВСтруктуру(Форма, Источник, Событие, Данные, Параметр = Неопределено) Экспорт

	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	#Область ЕРП_КА_УТ
	МенеджерОборудованияКлиентПереопределяемый.ОбработатьСобытие();
	Результат = Неопределено;
	ПреобразоватьДанныеСоСканераВСтруктуру(Результат, Параметр);
	                           	
	Возврат Результат;
	#КонецОбласти
	
	//Розница
	#Область Розница
	//Если Не Форма.ВводДоступен() Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	//
	//ОписаниеСобытия = Новый Структура;
	//ОписаниеСобытия.Вставить("Источник", Источник);
	//ОписаниеСобытия.Вставить("Событие" , Событие);
	//ОписаниеСобытия.Вставить("Данные"  , Данные);
	//
	//Результат = МенеджерОборудованияКлиент.ПолучитьСобытиеОтУстройства(ОписаниеСобытия);
	//
	//ДанныеСоСканера = Неопределено;
	//
	//Если Результат <> Неопределено
	//	И Результат.Источник = "ПодключаемоеОборудование"
	//	И (Результат.ИмяСобытия = "ScanData" Или Результат.ИмяСобытия = "Штрихкод" Или Результат.ИмяСобытия = "ПолученШтрихкод")
	//	И Найти(Форма.ПоддерживаемыеТипыПодключаемогоОборудования, "СканерШтрихкода") > 0 Тогда
	//	
	//	ДанныеСоСканера = ПреобразоватьДанныеСоСканераВСтруктуруЧекККМ(Результат.Параметр);
	//	
	//КонецЕсли;
	//
	//Возврат ДанныеСоСканера;
	#КонецОбласти
	///////////////////
	
КонецФункции

// В процедуре нужно реализовать алгоритм преобразования данных из подсистемы подключаемого оборудования.
//
// Параметры:
//  Параметр - Массив - входящие данные.
//
// Возвращаемое значение:
//  Структура - структура со свойствами:
//   * Штрихкод
//   * Количество
Функция ПреобразоватьДанныеСоСканераВСтруктуруЧекККМ(Параметр) Экспорт
	
	Результат = Новый Структура("Штрихкод,Количество");
	Результат = МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр);
	
	Возврат Результат;
	
КонецФункции

#Область ФормаПоискНоменклатурыПоШтрихкоду

Функция ПолучитьТекстВопросаПередЗакрытиемФормыПодбора(ДействияСНеизвестнымиШтрихкодами, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если ДействияСНеизвестнымиШтрихкодами = "ТолькоЗарегистрировать" Тогда
		ТекстВопроса = НСтр("ru='Штрихкоды не будут зарегистрированы.'");
	Иначе
		ТекстВопроса = НСтр("ru='Данные номенклатуры не будут перенесены в документ, штрихкоды номенклатуры не будут присвоены.'");
	КонецЕсли;
	
	Возврат ТекстВопроса;
	
КонецФункции

Функция ПолучитьТекстВопросаПеренестиВДокументФормыПодбора(ИспользоватьХарактеристикиНоменклатуры, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		ТекстВопроса = НСтр("ru='Не для всех новых штрихкодов указана соответствующая номенклатура и характеристика.
		|Для полностью заполненных строк зарегистрированы новые штрихкоды номенклатуры, эти сведения будут перенесены в документ.
		|Остальные позиции GTIN останутся без изменения.'");
	Иначе
		ТекстВопроса = НСтр("ru='Не для всех новых штрихкодов указана соответствующая номенклатура.
		|Эти товары не будут перенесены в документ.
		|Отложите их в сторону как неотсканированные.'");
	КонецЕсли;
	
	Возврат ТекстВопроса;
	
КонецФункции

Процедура ПоискНоменклатурыПоШтрихкодуНоменклатураПриИзменении(Форма, Элемент, ИмяТаблицы = "ШтрихкодыНоменклатуры") Экспорт
	
	ТекущиеДанные = Форма.Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//РеквизитыНоменклатуры = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.ЗначенияРеквизитовОбъекта(ТекущиеДанные.Номенклатура, Новый Структура("ЕдиницаИзмерения, ВидНоменклатуры"));
	
	//БК
	РеквизитыНоменклатуры = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.ЗначенияРеквизитовОбъекта(ТекущиеДанные.Номенклатура, Новый Структура("БазоваяЕдиницаИзмерения, ВидНоменклатуры"));
	///////////////////
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	#Область ЕРП_КА_УТ
	//Если ЗначениеЗаполнено(РеквизитыНоменклатуры.ВидНоменклатуры) Тогда
	//	
	//	Если РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПроверитьИспользованиеХарактеристик() Тогда //Использование хар-к в целом в базе
	//		
	//		//Использование хар-к у номенклатуры выбора
	//		ИспользоватьХарактеристики = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.ЗначениеРеквизитаОбъекта(РеквизитыНоменклатуры.ВидНоменклатуры, "ИспользованиеХарактеристик");
	//		
	//		Если ИспользоватьХарактеристики	   = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать")
	//			ИЛИ ИспользоватьХарактеристики = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ПустаяСсылка") Тогда
	//			
	//			ТекущиеДанные.ХарактеристикиИспользуются = Ложь;
	//		Иначе
	//			ТекущиеДанные.ХарактеристикиИспользуются = Истина;
	//		КонецЕсли;
	//		
	//	Иначе
	//		ТекущиеДанные.ХарактеристикиИспользуются = Ложь;
	//	КонецЕсли;
	//	
	//	Если Не ТекущиеДанные.ХарактеристикиИспользуются Тогда
	//		ТекущиеДанные.Характеристика = Неопределено;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//ТекущиеДанные.ЕдиницаИзмерения = РеквизитыНоменклатуры.ЕдиницаИзмерения;
	#КонецОбласти
	
	//Розница
	#Область Розница
	//Если ЗначениеЗаполнено(РеквизитыНоменклатуры.ВидНоменклатуры) Тогда
	//	
	//	Если РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПроверитьИспользованиеХарактеристик() Тогда //Использование хар-к в целом в базе
	//		
	//		//Использование хар-к у номенклатуры выбора
	//		ИспользоватьХарактеристики = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.ЗначениеРеквизитаОбъекта(РеквизитыНоменклатуры.ВидНоменклатуры, "ИспользованиеХарактеристик");
	//		
	//		Если ИспользоватьХарактеристики	   = ПредопределенноеЗначение("Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать")
	//			ИЛИ ИспользоватьХарактеристики = ПредопределенноеЗначение("Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ПустаяСсылка") Тогда
	//			
	//			
	//			ТекущиеДанные.ХарактеристикиИспользуются = Ложь;
	//		Иначе
	//			ТекущиеДанные.ХарактеристикиИспользуются = Истина;
	//		КонецЕсли;
	//		
	//	Иначе
	//		ТекущиеДанные.ХарактеристикиИспользуются = Ложь;
	//	КонецЕсли;
	//	
	//	Если Не ТекущиеДанные.ХарактеристикиИспользуются Тогда
	//		ТекущиеДанные.Характеристика = Неопределено;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//ТекущиеДанные.ЕдиницаИзмерения = РеквизитыНоменклатуры.ЕдиницаИзмерения;
	#КонецОбласти
	
	//БК
	ТекущиеДанные.ХарактеристикиИспользуются = Ложь;
	ТекущиеДанные.Характеристика = Неопределено;
	
	ТекущиеДанные.ЕдиницаИзмерения = РеквизитыНоменклатуры.БазоваяЕдиницаИзмерения;
	///////////////////
	
КонецПроцедуры

// Выполняется при начале выбора номенклатуры. Требуется определить и открыть форму выбора.
//
// Параметры:
//  Владелец     - УправляемаяФорма            - Форма владелец.
//  ДанныеСтроки - ДанныеФормыЭлементКоллекции - текущие данные строки таблицы товаров откуда производится выбор.
//  СтандартнаяОбработка - Булево - Выключается в переопределении
//  ВидыПродукцииИС - Массив Из Перечисления.ВидыПродукцийИСМП - Виды продукции.
//  Описание - ОписаниеОповещения - Вызывается при выборе значения в форме выбора.
//
Процедура ПриНачалеВыбораНоменклатуры(Владелец, ДанныеСтроки, СтандартнаяОбработка, ВидыПродукцииИС, Описание = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//ПараметрыОтбора.Вставить("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	
	//БК
	ПараметрыОтбора.Вставить("Услуга", Ложь);
	///////////////////
		
	ОсобенностиУчета = Новый Массив;
	
	Если РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПрисутствуетОбувнаяПродукция(ВидыПродукцииИС) Тогда
		ОсобенностиУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция"));
	КонецЕсли;
	
	Если РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПрисутствуетТабачнаяПродукция(ВидыПродукцииИС) Тогда
		ОсобенностиУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция"));
	КонецЕсли;
	
	Если РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПрисутствуетМолочнаяПродукция(ВидыПродукцииИС) Тогда
		ОсобенностиУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция"));
	КонецЕсли;
	
	Если РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПрисутствуетТекстильнаяПродукция(ВидыПродукцииИС) Тогда
		ОсобенностиУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность"));
	КонецЕсли;
	
	Если РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПрисутствуетЛекарственнаяПродукция(ВидыПродукцииИС) Тогда
		ОсобенностиУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты"));
	КонецЕсли;
																										   
	Если ОсобенностиУчета.Количество() > 0 Тогда
		ПараметрыОтбора.Вставить("ОсобенностьУчета", ОсобенностиУчета);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("Отбор",                ПараметрыОтбора);
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + БК
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	
	//Розница
	//
	///////////////////
		
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Владелец,,,, Описание);
	
	Возврат;
	
КонецПроцедуры

Функция ПолучитьИмяФормыДляКомандыЗаполненияДанных() Экспорт
	
	Возврат "Обработка.ОбменИСМПТК.Форма.ФормаУточненияДанныхИС";
	
КонецФункции

#КонецОбласти