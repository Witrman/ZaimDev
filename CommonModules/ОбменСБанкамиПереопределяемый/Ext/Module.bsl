
////////////////////////////////////////////////////////////////////////////////
// ОбменСБанкамиПереопределяемый: механизм обмена электронными документами с банками.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет массив актуальными видами электронных документов для прикладного решения.
//
// Параметры:
//  Массив - Массив из ПеречислениеСсылка.ВидыЭДОбменСБанками  - виды актуальных ЭД
//   Добавлять можно только следующие значения:
//    - Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки
//    - Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение
//    - Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование
//    - Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПереводВалюты
//    - Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПокупкуВалюты
//    - Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПродажуВалюты
//    - Перечисления.ВидыЭДОбменСБанками.РаспоряжениеНаОбязательнуюПродажуВалюты
//    - Перечисления.ВидыЭДОбменСБанками.СписокНаЗачислениеДенежныхСредствНаСчетаСотрудников
//    - Перечисления.ВидыЭДОбменСБанками.СписокНаОткрытиеСчетовПоЗарплатномуПроекту
//    - Перечисления.ВидыЭДОбменСБанками.СписокУволенныхСотрудников
//    - Перечисления.ВидыЭДОбменСБанками.Письмо
//
Процедура ПолучитьАктуальныеВидыЭД(Массив) Экспорт
	
	Массив.Добавить(Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение);
 	Массив.Добавить(Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки);
 	Массив.Добавить(Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка);
 	Массив.Добавить(Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД);
 	Массив.Добавить(Перечисления.ВидыЭДОбменСБанками.ИзвещениеОСостоянииЭД);
 	Массив.Добавить(Перечисления.ВидыЭДОбменСБанками.ЗапросНаОтзывЭД);
	
КонецПроцедуры

// Используется для получения номеров счетов в виде массив строк
//
// Параметры:
//  Организация - СправочникСсылка.Организации - отбор по организации.
//  Банк - СправочникСсылка.КлассификаторБанков - отбор по банку.
//  МассивНомеровБанковскихСчетов - Массив - Массив возврата, в элементах строки с номерами счетов.
//
Процедура ПолучитьНомераБанковскихСчетов(Организация, Банк, МассивНомеровБанковскихСчетов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	| ВЫБОР
	|  КОГДА БанковскиеСчета.Ссылка = Организации.ОсновнойБанковскийСчет
	|   ТОГДА 1
	|  ИНАЧЕ 2
	| КОНЕЦ КАК Приоритет,
	| БанковскиеСчета.НомерСчета
	|ИЗ
	| Справочник.БанковскиеСчета КАК БанковскиеСчета
	|  ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|  ПО БанковскиеСчета.Владелец = Организации.Ссылка
	|ГДЕ
	| БанковскиеСчета.Банк = &Банк
	| И Организации.Ссылка = &Организация
	| И НЕ БанковскиеСчета.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	| Приоритет";
	Запрос.УстановитьПараметр("Банк", Банк);
	Запрос.УстановитьПараметр("Организация", Организация);
	ТабРез = Запрос.Выполнить().Выгрузить();
	МассивНомеровБанковскихСчетов = ТабРез.ВыгрузитьКолонку("НомерСчета");
	
КонецПроцедуры

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - ДокументСсылка, ДокументОбъект - Источник объекта, либо ссылка документа/справочника-источника.
//  ПараметрыЭД - Структура - структура параметров источника, необходимых для определения
//                настроек обмена ЭД. Обязательные параметры: ВидЭД, Банк, Организация.
//
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	
	Если ТипИсточника = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее") Тогда
		
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Банк = Источник.СчетОрганизации.Банк;
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Платежное поручение.
//
// Параметры:
//  МассивСсылок - Массив - содержит ссылки на документы информационной базы, на основании которых будут созданы электронные документы.
//  ДанныеДляЗаполнения - Массив - содержит пустые деревья значений, которые необходимо заполнить данными.
//           Дерево значений повторяет структуру макета ПлатежноеПоручение из обработки ОбменСБанками.
//           Если по какому-либо документу не удалось получить данные, то текст ошибки необходимо поместить вместо дерева значений.
//           ВНИМАНИЕ! Порядок элементов массива ДанныеДляЗаполнения соответствует порядку элементов массива МассивСсылок.
//
Процедура ЗаполнитьДанныеПлатежныхПоручений(МассивСсылок, ДанныеДляЗаполнения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежноеПоручениеИсходящее.ДатаВыписки КАК Дата,
	|	ПлатежноеПоручениеИсходящее.СуммаДокумента КАК Сумма,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭДОбменСБанками.ПлатежноеПоручениеНаПеречислениеЗаработнойПлаты)
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭДОбменСБанками.ПлатежноеПоручениеНаПеречислениеПенсионныхВзносов)
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭДОбменСБанками.ПлатежноеПоручениеНаПеречислениеСоциальныхОтчислений)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭДОбменСБанками.ПлатежноеПоручение)
	|	КОНЕЦ КАК ВидЭД,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты)
	|			ТОГДА ""41""
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов)
	|			ТОГДА ""42""
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений)
	|			ТОГДА ""43""
	|		ИНАЧЕ ""10""
	|	КОНЕЦ КАК ВидОплаты,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации В (&ОперацииПеречисленияВБюджет)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПеречислениеВБюджет,
	|	ПлатежноеПоручениеИсходящее.Ссылка КАК Ссылка,
	|	ПлатежноеПоручениеИсходящее.Номер КАК Номер,
	|	ПлатежноеПоручениеИсходящее.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ПлатежноеПоручениеИсходящее.СуммаДокумента КАК СуммаДокумента,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.ТекстПлательщика КАК СТРОКА(1000)) КАК ТекстПлательщика,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.ТекстПолучателя КАК СТРОКА(1000)) КАК ТекстПолучателя,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|				ИЛИ ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель.УказыватьРеквизитыГоловнойОрганизации = ИСТИНА
	|			ТОГДА ПлатежноеПоручениеИсходящее.Организация.ИдентификационныйНомер
	|		ИНАЧЕ ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель.ИдентификационныйНомер
	|	КОНЕЦ КАК ПлательщикБИН_ИИН,
	|	ПлатежноеПоручениеИсходящее.Организация.КБЕ КАК ПлательщикКБЕ,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации КАК СчетОрганизации,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета КАК НомерСчетаОрганизации,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.БИК КАК ПлательщикБанкБИК,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.Наименование КАК ПлательщикБанкНаименование,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.Город КАК ПлательщикБанкГород,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.КоррСчет КАК ПлательщикБанкИИК,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.СчетОрганизации.ТекстКорреспондента КАК СТРОКА(1000)) КАК ОрганизацияТекстКорреспондента,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.СчетОрганизации.ТекстНазначения КАК СТРОКА(1000)) КАК ОрганизацияТекстНазначения,
	|	ПлатежноеПоручениеИсходящее.Контрагент КАК ЭлементКонтрагент,
	|	ПлатежноеПоручениеИсходящее.Контрагент КАК Контрагент,
	|	ПлатежноеПоручениеИсходящее.Контрагент.ИдентификационныйКодЛичности КАК КонтрагентБИН_ИИН,
	|	ПлатежноеПоручениеИсходящее.Контрагент.КБЕ КАК КонтрагентКБЕ,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента КАК СчетКонтрагента,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета КАК НомерСчетаКонтрагента,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Наименование КАК ПолучательБанкНаименование,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Город КАК ПолучательБанкГород,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.БИК КАК ПолучательБанкБИК,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.КоррСчет КАК ПолучательБанкИИК,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.СчетКонтрагента.ТекстКорреспондента КАК СТРОКА(1000)) КАК КонтрагентТекстКорреспондента,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.СчетКонтрагента.ТекстНазначения КАК СТРОКА(1000)) КАК КонтрагентТекстНазначения,
	|	ПлатежноеПоручениеИсходящее.СчетБанкаПосредника.Банк.КоррСчет КАК БанкПосредникИИК,
	|	ПлатежноеПоручениеИсходящее.СчетБанкаПосредника.Банк.БИК КАК БанкПосредникБИК,
	|	ПлатежноеПоручениеИсходящее.СчетБанкаПосредника.Банк.Наименование КАК БанкПосредникБанкНаименование,
	|	ПлатежноеПоручениеИсходящее.СчетБанкаПосредника.НомерСчета КАК БанкПосредникНомерСчета,
	|	ПлатежноеПоручениеИсходящее.БанкПосредник.Наименование КАК БанкПосредникНаименование,
	|	ПлатежноеПоручениеИсходящее.ДатаПолученияТовара КАК ДатаПолученияТовара,
	|	ПлатежноеПоручениеИсходящее.КодНазначенияПлатежа КАК КодНазначенияПлатежа,
	|	ПлатежноеПоручениеИсходящее.КодБК КАК КодБК,
	|	ПлатежноеПоручениеИсходящее.ДатаВалютирования КАК ДатаВалютирования,
	|	ПлатежноеПоручениеИсходящее.ВидОперации КАК ВидОперации,
	|	ПлатежноеПоручениеИсходящее.Организация КАК Организация
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.Ссылка В(&Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.ФизЛицо
	|		ИНАЧЕ ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо
	|	КОНЕЦ КАК ФизЛицо,
	|	ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	|	ОПВПеречислениеВФондыПенсионныеВзносы.Сумма КАК Сумма,
	|	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка КАК ПлатежныйДокумент
	|ПОМЕСТИТЬ ВТ_ОПВПеречислениеВФондыПенсионныеВзносы
	|ИЗ
	|	Документ.ОПВПеречислениеВФонды.ПенсионныеВзносы КАК ОПВПеречислениеВФондыПенсионныеВзносы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов
	|		ПО ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка = ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ
	|ГДЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка В(&Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ФИОФизЛиц.Период) КАК Период,
	|	ФИОФизЛиц.ФизЛицо КАК ФизЛицо,
	|	ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка КАК док,
	|	ОПВПеречислениеВФондыПенсионныеВзносы.ПлатежныйДокумент КАК ПлатежныйДокумент
	|ПОМЕСТИТЬ ВТ_ПериодыФИОПенсионныеВзносы
	|ИЗ
	|	ВТ_ОПВПеречислениеВФондыПенсионныеВзносы КАК ОПВПеречислениеВФондыПенсионныеВзносы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|		ПО ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо = ФИОФизЛиц.ФизЛицо
	|			И ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка.Дата >= ФИОФизЛиц.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ФИОФизЛиц.ФизЛицо,
	|	ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка,
	|	ОПВПеречислениеВФондыПенсионныеВзносы.ПлатежныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыФИО.док КАК док,
	|	ВТ_ПериодыФИО.ФизЛицо КАК ФизЛицо,
	|	ФИОФизЛиц.Фамилия КАК Фамилия,
	|	ФИОФизЛиц.Имя КАК Имя,
	|	ФИОФизЛиц.Отчество КАК Отчество,
	|	ВТ_ПериодыФИО.ПлатежныйДокумент КАК ПлатежныйДокумент
	|ПОМЕСТИТЬ ВТ_ФИОПенсионныеВзносы
	|ИЗ
	|	ВТ_ПериодыФИОПенсионныеВзносы КАК ВТ_ПериодыФИО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|		ПО ВТ_ПериодыФИО.Период = ФИОФизЛиц.Период
	|			И ВТ_ПериодыФИО.ФизЛицо = ФИОФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ФИО.Фамилия КАК Фамилия,
	|	ВТ_ФИО.Имя КАК Имя,
	|	ВТ_ФИО.Отчество КАК Отчество,
	|	ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.ИдентификационныйКодЛичности КАК ФизЛицоИдентификационныйКодЛичности,
	|	ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.ДатаРождения КАК ФизЛицоДатаРождения,
	|	"""" КАК РасчСчет,
	|	ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	|	ОПВПеречислениеВФондыПенсионныеВзносы.Сумма КАК Сумма,
	|	ВТ_ФИО.ПлатежныйДокумент КАК ПлатежныйДокумент
	|ПОМЕСТИТЬ ВТ_ПеречислениеВФондыПенсионныеВзносы
	|ИЗ
	|	ВТ_ОПВПеречислениеВФондыПенсионныеВзносы КАК ОПВПеречислениеВФондыПенсионныеВзносы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ФИОПенсионныеВзносы КАК ВТ_ФИО
	|		ПО ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка = ВТ_ФИО.док
	|			И ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо = ВТ_ФИО.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ФИОФизЛиц.Период) КАК Период,
	|	ФИОФизЛиц.ФизЛицо КАК ФизЛицо,
	|	ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.Ссылка КАК док,
	|	ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.Ссылка КАК ПлатежныйДокумент
	|ПОМЕСТИТЬ ВТ_ПериодыФИОПодотчет
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеВПодотчет КАК ПлатежноеПоручениеИсходящееПеречислениеВПодотчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|		ПО ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.ФизЛицо = ФИОФизЛиц.ФизЛицо
	|			И ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.Ссылка.Дата >= ФИОФизЛиц.Период
	|ГДЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.Ссылка В(&Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ФИОФизЛиц.ФизЛицо,
	|	ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.Ссылка,
	|	ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыФИО.док КАК док,
	|	ВТ_ПериодыФИО.ФизЛицо КАК ФизЛицо,
	|	ФИОФизЛиц.Фамилия КАК Фамилия,
	|	ФИОФизЛиц.Имя КАК Имя,
	|	ФИОФизЛиц.Отчество КАК Отчество,
	|	ВТ_ПериодыФИО.ПлатежныйДокумент КАК ПлатежныйДокумент
	|ПОМЕСТИТЬ ВТ_ФИОПодотчет
	|ИЗ
	|	ВТ_ПериодыФИОПодотчет КАК ВТ_ПериодыФИО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|		ПО ВТ_ПериодыФИО.Период = ФИОФизЛиц.Период
	|			И ВТ_ПериодыФИО.ФизЛицо = ФИОФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
	|			ТОГДА ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.НомерКартСчета.Фамилия
	|		ИНАЧЕ ВТ_ФИО.Фамилия
	|	КОНЕЦ КАК Фамилия,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
	|			ТОГДА ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.НомерКартСчета.Имя
	|		ИНАЧЕ ВТ_ФИО.Имя
	|	КОНЕЦ КАК Имя,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
	|			ТОГДА ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.НомерКартСчета.Отчество
	|		ИНАЧЕ ВТ_ФИО.Отчество
	|	КОНЕЦ КАК Отчество,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
	|			ТОГДА ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.НомерКартСчета.ИдентификационныйКодЛичности
	|		ИНАЧЕ ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.ФизЛицо.ИдентификационныйКодЛичности
	|	КОНЕЦ КАК ИИН,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.ФизЛицо.ДатаРождения
	|	КОНЕЦ КАК ДатаРождения,
	|	ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.НомерКартСчета.НомерСчета КАК РасчСчет,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодПлатежа,
	|	ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.СуммаПлатежа КАК Сумма,
	|	ВТ_ФИО.ПлатежныйДокумент КАК ПлатежныйДокумент
	|ПОМЕСТИТЬ ВТ_ПеречислениеВПодотчет
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеВПодотчет КАК ПлатежноеПоручениеИсходящееПеречислениеВПодотчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ФИОПодотчет КАК ВТ_ФИО
	|		ПО ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.Ссылка = ВТ_ФИО.док
	|			И ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.ФизЛицо = ВТ_ФИО.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ФИОФизЛиц.Период) КАК Период,
	|	ФИОФизЛиц.ФизЛицо КАК ФизЛицо,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка КАК док,
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка КАК ПлатежныйДокумент
	|ПОМЕСТИТЬ ВТ_ПериодыФИОЗарплата
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = ФИОФизЛиц.ФизЛицо
	|			И ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Дата >= ФИОФизЛиц.Период
	|ГДЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка В(&Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ФИОФизЛиц.ФизЛицо,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка,
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыФИО.док КАК док,
	|	ВТ_ПериодыФИО.ФизЛицо КАК ФизЛицо,
	|	ФИОФизЛиц.Фамилия КАК Фамилия,
	|	ФИОФизЛиц.Имя КАК Имя,
	|	ФИОФизЛиц.Отчество КАК Отчество,
	|	ВТ_ПериодыФИО.ПлатежныйДокумент КАК ПлатежныйДокумент
	|ПОМЕСТИТЬ ВТ_ФИОЗарплата
	|ИЗ
	|	ВТ_ПериодыФИОЗарплата КАК ВТ_ПериодыФИО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|		ПО ВТ_ПериодыФИО.Период = ФИОФизЛиц.Период
	|			И ВТ_ПериодыФИО.ФизЛицо = ФИОФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета.НеЯвляетсяВладельцемСчета
	|			ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета.Фамилия
	|		ИНАЧЕ ВТ_ФИО.Фамилия
	|	КОНЕЦ КАК Фамилия,
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета.НеЯвляетсяВладельцемСчета
	|			ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета.Имя
	|		ИНАЧЕ ВТ_ФИО.Имя
	|	КОНЕЦ КАК Имя,
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета.НеЯвляетсяВладельцемСчета
	|			ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета.Отчество
	|		ИНАЧЕ ВТ_ФИО.Отчество
	|	КОНЕЦ КАК Отчество,
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета.НеЯвляетсяВладельцемСчета
	|			ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета.ИдентификационныйКодЛичности
	|		ИНАЧЕ ЗарплатаКВыплатеОрганизацийЗарплата.ФизЛицо.ИдентификационныйКодЛичности
	|	КОНЕЦ КАК ИИН,
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета.НеЯвляетсяВладельцемСчета
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ЗарплатаКВыплатеОрганизацийЗарплата.ФизЛицо.ДатаРождения
	|	КОНЕЦ КАК ФизлицоДатаРождения,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета.НомерСчета КАК НомерКартСчетаНомерСчета,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодПлатежа,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.СуммаКВыплате КАК СуммаКВыплате,
	|	ВТ_ФИО.ПлатежныйДокумент КАК ПлатежныйДокумент
	|ПОМЕСТИТЬ ВТ_ПеречислениеЗарплата
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ФИОЗарплата КАК ВТ_ФИО
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = ВТ_ФИО.док
	|			И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = ВТ_ФИО.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СОПеречислениеВФондыСоциальныеОтчисления.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|			ТОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.ФизЛицо
	|		ИНАЧЕ СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо
	|	КОНЕЦ КАК ФизЛицо,
	|	СОПеречислениеВФондыСоциальныеОтчисления.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	|	СОПеречислениеВФондыСоциальныеОтчисления.Сумма КАК Сумма,
	|	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка КАК ПлатежныйДокумент
	|ПОМЕСТИТЬ ВТ_СОПеречислениеВФондыСоциальныеОтчисления
	|ИЗ
	|	Документ.СОПеречислениеВФонды.СоциальныеОтчисления КАК СОПеречислениеВФондыСоциальныеОтчисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений
	|		ПО СОПеречислениеВФондыСоциальныеОтчисления.Ссылка = ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ
	|ГДЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка В(&Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ФИОФизЛиц.Период) КАК Период,
	|	ФИОФизЛиц.ФизЛицо КАК ФизЛицо,
	|	СОПеречислениеВФондыСоциальныеОтчисления.Ссылка КАК док,
	|	СОПеречислениеВФондыСоциальныеОтчисления.ПлатежныйДокумент КАК ПлатежныйДокумент
	|ПОМЕСТИТЬ ВТ_ПериодыФИОСоциальныеОтчисления
	|ИЗ
	|	ВТ_СОПеречислениеВФондыСоциальныеОтчисления КАК СОПеречислениеВФондыСоциальныеОтчисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|		ПО СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо = ФИОФизЛиц.ФизЛицо
	|			И СОПеречислениеВФондыСоциальныеОтчисления.Ссылка.Дата >= ФИОФизЛиц.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ФИОФизЛиц.ФизЛицо,
	|	СОПеречислениеВФондыСоциальныеОтчисления.Ссылка,
	|	СОПеречислениеВФондыСоциальныеОтчисления.ПлатежныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыФИО.док КАК док,
	|	ВТ_ПериодыФИО.ФизЛицо КАК ФизЛицо,
	|	ФИОФизЛиц.Фамилия КАК Фамилия,
	|	ФИОФизЛиц.Имя КАК Имя,
	|	ФИОФизЛиц.Отчество КАК Отчество,
	|	ВТ_ПериодыФИО.ПлатежныйДокумент КАК ПлатежныйДокумент
	|ПОМЕСТИТЬ ВТ_ФИОСоциальныеОтчисления
	|ИЗ
	|	ВТ_ПериодыФИОСоциальныеОтчисления КАК ВТ_ПериодыФИО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	|		ПО ВТ_ПериодыФИО.Период = ФИОФизЛиц.Период
	|			И ВТ_ПериодыФИО.ФизЛицо = ФИОФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ФИО.Фамилия КАК Фамилия,
	|	ВТ_ФИО.Имя КАК Имя,
	|	ВТ_ФИО.Отчество КАК Отчество,
	|	СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.ИдентификационныйКодЛичности КАК ФизЛицоИдентификационныйКодЛичности,
	|	СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.ДатаРождения КАК ФизЛицоДатаРождения,
	|	"""" КАК РасчСчет,
	|	СОПеречислениеВФондыСоциальныеОтчисления.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	|	СОПеречислениеВФондыСоциальныеОтчисления.Сумма КАК Сумма,
	|	ВТ_ФИО.ПлатежныйДокумент КАК ПлатежныйДокумент
	|ПОМЕСТИТЬ ВТ_ПеречислениеСоциальныеОтчисления
	|ИЗ
	|	ВТ_СОПеречислениеВФондыСоциальныеОтчисления КАК СОПеречислениеВФондыСоциальныеОтчисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ФИОСоциальныеОтчисления КАК ВТ_ФИО
	|		ПО СОПеречислениеВФондыСоциальныеОтчисления.Ссылка = ВТ_ФИО.док
	|			И СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо = ВТ_ФИО.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПеречислениеВФондыПенсионныеВзносы.Фамилия КАК Фамилия,
	|	ВТ_ПеречислениеВФондыПенсионныеВзносы.Имя КАК Имя,
	|	ВТ_ПеречислениеВФондыПенсионныеВзносы.Отчество КАК Отчество,
	|	ВТ_ПеречислениеВФондыПенсионныеВзносы.ФизЛицоИдентификационныйКодЛичности КАК ИНН,
	|	ВТ_ПеречислениеВФондыПенсионныеВзносы.ФизЛицоДатаРождения КАК ДатаРождения,
	|	ВТ_ПеречислениеВФондыПенсионныеВзносы.РасчСчет КАК РасчСчет,
	|	ВТ_ПеречислениеВФондыПенсионныеВзносы.ПериодРегистрации КАК ПериодПлатежа,
	|	ВТ_ПеречислениеВФондыПенсионныеВзносы.Сумма КАК Сумма,
	|	ВТ_ПеречислениеВФондыПенсионныеВзносы.ПлатежныйДокумент КАК ПлатежныйДокумент
	|ИЗ
	|	ВТ_ПеречислениеВФондыПенсионныеВзносы КАК ВТ_ПеречислениеВФондыПенсионныеВзносы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПеречислениеВПодотчет.Фамилия,
	|	ВТ_ПеречислениеВПодотчет.Имя,
	|	ВТ_ПеречислениеВПодотчет.Отчество,
	|	ВТ_ПеречислениеВПодотчет.ИИН,
	|	ВТ_ПеречислениеВПодотчет.ДатаРождения,
	|	ВТ_ПеречислениеВПодотчет.РасчСчет,
	|	ВТ_ПеречислениеВПодотчет.ПериодПлатежа,
	|	ВТ_ПеречислениеВПодотчет.Сумма,
	|	ВТ_ПеречислениеВПодотчет.ПлатежныйДокумент
	|ИЗ
	|	ВТ_ПеречислениеВПодотчет КАК ВТ_ПеречислениеВПодотчет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПеречислениеЗарплата.Фамилия,
	|	ВТ_ПеречислениеЗарплата.Имя,
	|	ВТ_ПеречислениеЗарплата.Отчество,
	|	ВТ_ПеречислениеЗарплата.ИИН,
	|	ВТ_ПеречислениеЗарплата.ФизлицоДатаРождения,
	|	ВТ_ПеречислениеЗарплата.НомерКартСчетаНомерСчета,
	|	ВТ_ПеречислениеЗарплата.ПериодПлатежа,
	|	ВТ_ПеречислениеЗарплата.СуммаКВыплате,
	|	ВТ_ПеречислениеЗарплата.ПлатежныйДокумент
	|ИЗ
	|	ВТ_ПеречислениеЗарплата КАК ВТ_ПеречислениеЗарплата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПеречислениеСоциальныеОтчисления.Фамилия,
	|	ВТ_ПеречислениеСоциальныеОтчисления.Имя,
	|	ВТ_ПеречислениеСоциальныеОтчисления.Отчество,
	|	ВТ_ПеречислениеСоциальныеОтчисления.ФизЛицоИдентификационныйКодЛичности,
	|	ВТ_ПеречислениеСоциальныеОтчисления.ФизЛицоДатаРождения,
	|	ВТ_ПеречислениеСоциальныеОтчисления.РасчСчет,
	|	ВТ_ПеречислениеСоциальныеОтчисления.ПериодРегистрации,
	|	ВТ_ПеречислениеСоциальныеОтчисления.Сумма,
	|	ВТ_ПеречислениеСоциальныеОтчисления.ПлатежныйДокумент
	|ИЗ
	|	ВТ_ПеречислениеСоциальныеОтчисления КАК ВТ_ПеречислениеСоциальныеОтчисления";
	
	МассивОперацийПеречисленияВБюджет = Новый Массив;
	МассивОперацийПеречисленияВБюджет.Добавить(Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога);
	МассивОперацийПеречисленияВБюджет.Добавить(Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты);
	
	Запрос.УстановитьПараметр("Ссылка", МассивСсылок);
	Запрос.УстановитьПараметр("ОперацииПеречисленияВБюджет", МассивОперацийПеречисленияВБюджет);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаПлатежноеПоручение = РезультатыЗапроса[0].Выгрузить();
	ТаблицаСписокСотрудников = РезультатыЗапроса[15].Выгрузить();
	
	Для каждого ПлатежноеПоручение Из ТаблицаПлатежноеПоручение Цикл	
		//СтруктураЭД.Вставить("ВидОперацииЭД", ПлатежноеПоручение.ВидЭД);
		
		// Порядок документов в МассивСсылок может не соответствовать порядку документов в ТаблицаДокументов,
		// поэтому из массива деревьев ДанныеДляЗаполнения данные выбираем по индексу
		ДеревоДокумента = ДанныеДляЗаполнения[МассивСсылок.Найти(ПлатежноеПоручение.Ссылка)];
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Дата", ПлатежноеПоручение.Дата);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма", ПлатежноеПоручение.Сумма);
		//ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Номер", ПлатежноеПоручение.Номер);
		ПечатныйНомерДокумента = "";
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(ПлатежноеПоручение.Ссылка, ПечатныйНомерДокумента);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Номер", ПечатныйНомерДокумента);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлатежа.ВидОплаты", ПлатежноеПоручение.ВидОплаты);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлатежа.НазначениеПлатежа", ПлатежноеПоручение.НазначениеПлатежа);
		
		// Плательщик.
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.Наименование", ПлатежноеПоручение.ТекстПлательщика);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.ИНН", ПлатежноеПоручение.ПлательщикБИН_ИИН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.КБЕ", ПлатежноеПоручение.ПлательщикКБЕ);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.РасчСчет", ПлатежноеПоручение.НомерСчетаОрганизации);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.Банк.БИК", ПлатежноеПоручение.ПлательщикБанкБИК);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.Банк.Наименование", ПлатежноеПоручение.ПлательщикБанкНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.Банк.Город", ПлатежноеПоручение.ПлательщикБанкГород);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.Банк.КоррСчет", ПлатежноеПоручение.ПлательщикБанкИИК);
		
		// Получатель.
		Контрагент = ПлатежноеПоручение.Контрагент;
		Если НЕ ЗначениеЗаполнено(Контрагент) И ПлатежноеПоручение.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			Контрагент = Справочники.Организации.КонтрагентСоответствующийОрганизации(ПлатежноеПоручение.Организация);
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Получатель", Контрагент);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.Наименование", ПлатежноеПоручение.ТекстПолучателя);
		Если НЕ ЗначениеЗаполнено(ПлатежноеПоручение.КонтрагентБИН_ИИН) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.ИНН", СокрЛП(Контрагент.ИдентификационныйКодЛичности));
		Иначе
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.ИНН", СокрЛП(ПлатежноеПоручение.КонтрагентБИН_ИИН));
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПлатежноеПоручение.КонтрагентКБЕ) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.КБЕ", СокрЛП(Контрагент.КБЕ));
		Иначе
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.КБЕ", СокрЛП(ПлатежноеПоручение.КонтрагентКБЕ));
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.РасчСчет", ПлатежноеПоручение.НомерСчетаКонтрагента);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.Банк.БИК", ПлатежноеПоручение.ПолучательБанкБИК);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.Банк.Наименование", ПлатежноеПоручение.ПолучательБанкНаименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.Банк.Город", ПлатежноеПоручение.ПолучательБанкГород);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.Банк.КоррСчет", ПлатежноеПоручение.ПолучательБанкИИК);
		
		// Платежи в бюджет.
		Если ПлатежноеПоручение.ПеречислениеВБюджет Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПлатежиВБюджет.ПоказательКБК", ПлатежноеПоручение.КодБК);
		КонецЕсли;
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлатежа.КодНазначенияПлатежа", ПлатежноеПоручение.КодНазначенияПлатежа);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлатежа.ДатаВалютирования", ПлатежноеПоручение.ДатаВалютирования);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлатежа.ДатаПолученияТовара", ПлатежноеПоручение.ДатаПолученияТовара);
		
		// Списочные платежи.
		ПараметрыОтбора = новый Структура;
		ПараметрыОтбора.Вставить("ПлатежныйДокумент",ПлатежноеПоручение.Ссылка);
		
		Если ТаблицаСписокСотрудников.Количество() <> 0 Тогда
			СписокСотрудников = ТаблицаСписокСотрудников.Скопировать(ПараметрыОтбора);
		Иначе
			СписокСотрудников = новый ТаблицаЗначений;
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПереданСписокСотрудников", СписокСотрудников.Количество() <> 0);
		Если СписокСотрудников.Количество() <> 0 Тогда
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, СписокСотрудников, "СписокСотрудников");
		КонецЕсли;
	КонецЦикла;

	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Платежное требование.
//
// Параметры:
//  МассивСсылок - Массив - содержит ссылки на документы информационной базы, на основании которых будут созданы электронные документы.
//  ДанныеДляЗаполнения - Массив - содержит пустые деревья значений, которые необходимо заполнить данными.
//           Дерево значений повторяет структуру макета ПлатежноеТребование из обработки ОбменСБанками.
//           Если по какому-либо документу не удалось получить данные, то текст ошибки необходимо поместить вместо дерева значений.
//           ВНИМАНИЕ! Порядок элементов массива ДанныеДляЗаполнения соответствует порядку элементов массива МассивСсылок.
//
Процедура ЗаполнитьДанныеПлатежныхТребований(МассивСсылок, ДанныеДляЗаполнения) Экспорт
		
КонецПроцедуры

// Подготавливает данные для электронного документа типа Поручение на перевод валюты.
//
// Параметры:
//  МассивСсылок - Массив - содержит ссылки на документы информационной базы, на основании которых будут созданы электронные документы.
//  ДанныеДляЗаполнения - Массив - содержит пустые деревья значений, которые необходимо заполнить данными.
//           Дерево значений повторяет структуру макета ПоручениеНаПереводВалюты из обработки ОбменСБанками.
//           Если по какому-либо документу не удалось получить данные, то текст ошибки необходимо поместить вместо дерева значений.
//           ВНИМАНИЕ! Порядок элементов массива ДанныеДляЗаполнения соответствует порядку элементов массива МассивСсылок.
//
//@skip-warning
Процедура ЗаполнитьДанныеПорученийНаПереводВалюты(МассивСсылок, ДанныеДляЗаполнения) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Поручение на покупку валюты.
//
// Параметры:
//  МассивСсылок - Массив - содержит ссылки на документы информационной базы, на основании которых будут созданы электронные документы.
//  ДанныеДляЗаполнения - Массив - содержит пустые деревья значений, которые необходимо заполнить данными.
//           Дерево значений повторяет структуру макета ПоручениеНаПокупкуВалюты из обработки ОбменСБанками.
//           Если по какому-либо документу не удалось получить данные, то текст ошибки необходимо поместить вместо дерева значений.
//           ВНИМАНИЕ! Порядок элементов массива ДанныеДляЗаполнения соответствует порядку элементов массива МассивСсылок.
//
//@skip-warning
Процедура ЗаполнитьДанныеПорученийНаПокупкуВалюты(МассивСсылок, ДанныеДляЗаполнения) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Поручение на продажу валюты.
//
// Параметры:
//  МассивСсылок - Массив - содержит ссылки на документы информационной базы, на основании которых будут созданы электронные документы.
//  ДанныеДляЗаполнения - Массив - содержит пустые деревья значений, которые необходимо заполнить данными.
//           Дерево значений повторяет структуру макета ПоручениеНаПродажуВалюты из обработки ОбменСБанками.
//           Если по какому-либо документу не удалось получить данные, то текст ошибки необходимо поместить вместо дерева значений.
//           ВНИМАНИЕ! Порядок элементов массива ДанныеДляЗаполнения соответствует порядку элементов массива МассивСсылок.
//
//@skip-warning
Процедура ЗаполнитьДанныеПорученийНаПродажуВалюты(МассивСсылок, ДанныеДляЗаполнения) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Распоряжение на обязательную продажу валюты.
//
// Параметры:
//  МассивСсылок - Массив - содержит ссылки на документы информационной базы, на основании которых будут созданы электронные документы.
//  ДанныеДляЗаполнения - Массив - содержит пустые деревья значений, которые необходимо заполнить данными.
//           Дерево значений повторяет структуру макета РаспоряжениеНаОбязательнуюПродажуВалюты из обработки ОбменСБанками.
//           Если по какому-либо документу не удалось получить данные, то текст ошибки необходимо поместить вместо дерева значений.
//           ВНИМАНИЕ! Порядок элементов массива ДанныеДляЗаполнения соответствует порядку элементов массива МассивСсылок.
//
//@skip-warning
Процедура ЗаполнитьДанныеРаспоряженийНаОбязательнуюПродажуВалюты(МассивСсылок, ДанныеДляЗаполнения) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Справка о подтверждающих документах.
//
// Параметры:
//  МассивСсылок - Массив - содержит ссылки на документы информационной базы, на основании которых будут созданы электронные документы.
//  ДанныеДляЗаполнения - Массив - содержит пустые деревья значений, которые необходимо заполнить данными.
//           Дерево значений повторяет структуру макета СправкаОПодтверждающихДокументах из обработки ОбменСБанками.
//           Если по какому-либо документу не удалось получить данные, то текст ошибки необходимо поместить вместо дерева значений.
//           ВНИМАНИЕ! Порядок элементов массива ДанныеДляЗаполнения соответствует порядку элементов массива МассивСсылок.
//
//@skip-warning
Процедура ЗаполнитьДанныеСправокОПодтверждающихДокументах(МассивСсылок, ДанныеДляЗаполнения) Экспорт
	
КонецПроцедуры

// Вызывается при получении уведомления о зачислении валюты
//
// Параметры:
//  ДеревоРазбора - ДеревоЗначений - дерево данных, соответствующее макету Обработки.ОбменСБанками.УведомлениеОЗачислении
//  НовыйДокументСсылка - ДокументСсылка - ссылка на созданный документ на основании данных электронного документа.
//
//@skip-warning
Процедура ПриПолученииУведомленияОЗачислении(ДеревоРазбора, НовыйДокументСсылка) Экспорт
	
КонецПроцедуры

// Включает тестовый режим обмена в банком.
// При включении тестового режима возможно ручное указание URL сервера для получения настроек обмена.
//
// Параметры:
//    ИспользуетсяТестовыйРежим - Булево - признак использования тестового режима.
//
Процедура ПроверитьИспользованиеТестовогоРежима(ИспользуетсяТестовыйРежим) Экспорт
	
КонецПроцедуры

// Событие возникает при получении выписки из регламентного задания или при синхронизации.
// Необходимо создать документы в информационной базе для отражения произведенных по счету операций.
// Для получения данных выписки в удобном формате можно использовать следующие процедуры:
//  - ОбменСБанками.ПолучитьДанныеВыпискиБанкаДеревоЗначений()
//  - ОбменСБанками.ПолучитьДанныеВыпискиБанкаТекстовыйФормат() - только для рублевых выписок.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена, содержащий выписку банка.
//
Процедура ПриПолученииВыписки(СообщениеОбмена) Экспорт
	
КонецПроцедуры

#Область ЗарплатныйПроект

// Вызывается для формирования XML файла в прикладном решении.
//
// Параметры:
//    ОбъектДляВыгрузки - ДокументСсылка - ссылка на документ, на основании которого будет сформирован ЭД.
//    ИмяФайла - Строка - имя сформированного файла.
//    АдресФайла - Строка - АдресВременногоХранилища, содержит двоичные данные файла.
//
//@skip-warning
Процедура ПриФормированииXMLФайла(ОбъектДляВыгрузки, ИмяФайла, АдресФайла) Экспорт
	
КонецПроцедуры

// Формирует табличный документ на основании файла XML для визуального отображения электронного документа.
//
// Параметры:
//  ИмяФайла - Строка - полный путь к файлу XML
//  ТабличныйДокумент - ТабличныйДокумент - возвращаемое значение, визуальное отображение данных файла.
//
//@skip-warning
Процедура ЗаполнитьТабличныйДокумент(Знач ИмяФайла, ТабличныйДокумент) Экспорт
	
КонецПроцедуры

// Вызывается при получении файла из банка.
//
// Параметры:
//  АдресДанныхФайла - Строка - адрес временного хранилища с двоичными данными файла.
//  ИмяФайла - Строка - формализованное имя файла данных.
//  ОбъектВладелец - ДокументСсылка - (возвращаемый параметр) ссылка на документ, который был создан на основании ЭД.
//  ДанныеОповещения - Структура - (возвращаемый параметр) данные для вызова метода Оповестить на клиенте.
//                 * Ключ - Строка - имя события.
//                 * Значение - Произвольный - параметр сообщения.
//@skip-warning
Процедура ПриПолученииXMLФайла(АдресДанныхФайла, ИмяФайла, ОбъектВладелец, ДанныеОповещения) Экспорт
	
КонецПроцедуры

// Вызывается при изменении состояния электронного документооборота.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - владелец электронного документооборота;
//  СостояниеЭД - ПеречислениеСсылка.СостоянияОбменСБанками - новое состояние электронного документооборота.
//
//@skip-warning
Процедура ПриИзмененииСостоянияЭД(СсылкаНаОбъект, СостояниеЭД) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

