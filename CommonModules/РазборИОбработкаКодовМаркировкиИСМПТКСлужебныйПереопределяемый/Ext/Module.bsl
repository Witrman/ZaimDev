
#Область ИнтерфейсФорм

//Используется в формах настроек маркировки 
//
Процедура ОбновитьФормуНастройкиПриЗаписиПодчиненныхКонстант(Форма, КонстантаИмя, КонстантаЗначение) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Проверяет, что включена ф.о "Использовать подключаемое оборудование" и авторизовался пользователь,
// а не внешний пользователь.
Функция ИспользоватьПодключаемоеОборудование() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование") И ТипЗнч(Пользователи.АвторизованныйПользователь()) = Тип("СправочникСсылка.Пользователи");
	
КонецФункции

Процедура ПриСозданииНаСервере_НастроитьПодключаемоеОборудование(Форма) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(Форма);
	
	//Розница
	//ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(Форма);
	
	//БК
	ОбщегоНазначенияБКВызовСервера.НастроитьПодключаемоеОборудование(Форма);
	///////////////////

КонецПроцедуры

//Используется в формах настроек учета товарных групп (включение маркировки)
//
Функция ПроверитьВозможностьИзменения(ОбъектПутьКДанным, Форма) Экспорт
	 
	Если НРег(Лев(ОбъектПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(ОбъектПутьКДанным, 15);
		
		Если КонстантаИмя <> "ВестиУчетМаркируемогоТабакаИСМПТК"
			И КонстантаИмя <> "ВестиУчетМаркируемойОбувиИСМПТК"
			И КонстантаИмя <> "ВестиУчетМаркируемыхЛекарствИСМПТК"
			И КонстантаИмя <> "ВестиУчетМаркируемойМолочкиИСМПТК"
			И КонстантаИмя <> "ВестиУчетМаркируемогоАлкоголяИСМПТК"
			И КонстантаИмя <> "ВестиУчетМаркируемогоТекстиляИСМПТК" Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
		Если КонстантаИмя = "ВестиУчетМаркируемогоТабакаИСМПТК" Тогда
			ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция;
		ИначеЕсли КонстантаИмя = "ВестиУчетМаркируемойОбувиИСМПТК" Тогда
			ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция;
		ИначеЕсли КонстантаИмя = "ВестиУчетМаркируемойМолочкиИСМПТК" Тогда
			ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция;
		ИначеЕсли КонстантаИмя = "ВестиУчетМаркируемогоАлкоголяИСМПТК" Тогда
			ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция;
		ИначеЕсли КонстантаИмя = "ВестиУчетМаркируемогоТекстиляИСМПТК" Тогда
			ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность;
		ИначеЕсли КонстантаИмя = "ВестиУчетМаркируемыхЛекарствИСМПТК" Тогда
			ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = Форма.НаборКонстант[КонстантаИмя];  // Новое значение константы
		
		// При включении ведения маркировки проверка не выполняется 
		Если КонстантаЗначение = Истина Тогда
			Возврат Истина;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ОсобенностьУчета = &ОсобенностьУчета
		|	И НЕ Номенклатура.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ОсобенностьУчета", ОсобенностьУчета);
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			Форма.НаборКонстант[КонстантаИмя] = КонстантаМенеджер.Получить();
			ТекстСообщения = НСтр("ru='Существует номенклатура с особенностью учета ""%1""! Данные не сохранены.'");
			ТекстСообщения = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ОсобенностьУчета);
			РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
			
КонецФункции

#КонецОбласти

#Область РаботаСНоменклатурой

#Область Номенклатура

Функция ПолучитьПустуюСсылкуНоменклатура() Экспорт
	
	Возврат Справочники.Номенклатура.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьНоменклатуруПоШтрихкоду(ШтрихКод) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + БК
	//|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	//|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
	//|ИЗ
	//|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	
	//Розница
	//|	ШтрихкодыНоменклатуры.Владелец КАК Номенклатура,
	//|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
	//|ИЗ
	//|	РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
	
	//БК
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	"""" КАК Характеристика
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	///////////////////
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";
	
	Запрос.УстановитьПараметр("Штрихкод", ШтрихКод);
	
	Результат = Запрос.Выполнить();
	
	ДанныеНоменклатуры = Новый Структура("Номенклатура, Характеристика");
	Если Не Результат.Пустой() Тогда 
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДанныеНоменклатуры.Вставить("Номенклатура",   Выборка.Номенклатура);
		ДанныеНоменклатуры.Вставить("Характеристика", Выборка.Характеристика);
		
	Иначе 
		ДанныеНоменклатуры.Вставить("Номенклатура",   Справочники.Номенклатура.ПустаяСсылка());
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА, УТ + Розница
		//ДанныеНоменклатуры.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		
		//БК
		ДанныеНоменклатуры.Вставить("Характеристика", "");
		///////////////////
	КонецЕсли;
	
	Возврат ДанныеНоменклатуры;
	
КонецФункции

Процедура ПолучитьНоменклатуруПоШтрихкодам(Штрихкоды, ДанныеПоШтрихкодам) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + БК
	//|	Штрихкоды.Номенклатура КАК Номенклатура,
	//|	Штрихкоды.Упаковка КАК ЕдиницаИзмерения,
	//|	Штрихкоды.Характеристика КАК Характеристика
	//|ИЗ
	//|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	
	//Розница
	//|	Штрихкоды.Владелец КАК Номенклатура,
	//|	Штрихкоды.Упаковка КАК ЕдиницаИзмерения,
	//|	Штрихкоды.Характеристика КАК Характеристика
	//|ИЗ
	//|	РегистрСведений.Штрихкоды КАК Штрихкоды
	
	//БК
	|	Штрихкоды.Номенклатура КАК Номенклатура,
	|	Штрихкоды.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	"""" КАК Характеристика
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	///////////////////
	|ГДЕ
	|	Штрихкоды.Штрихкод В(&Штрихкоды)";
	
	Запрос.УстановитьПараметр("Штрихкоды", Штрихкоды);
	
	ДанныеПоШтрихкодам = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ПоискНоменклатурыПоШтрихкодуПриСозданииНаСервере(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	// Связь характеристики и номенклатуры
	СвязиПараметровВыбора = Новый Массив();
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Номенклатура", "Элементы.ШтрихкодыНоменклатуры.ТекущиеДанные.Номенклатура", РежимИзмененияСвязанногоЗначения.НеИзменять));
	
	Элементы.ШтрихкодыНоменклатурыХарактеристика.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
		
	// Добавление реквизитов
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИспользоватьПодключаемоеОборудование", Новый ОписаниеТипов("Булево")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПоддерживаемыеТипыПодключаемогоОборудования", Новый ОписаниеТипов("Строка")));
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"), "ШтрихкодыНоменклатуры"));
	
	//Розница
	//МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"), "ШтрихкодыНоменклатуры"));
	
	//БК
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Упаковка", Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"), "ШтрихкодыНоменклатуры"));
	///////////////////
		
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	// Добавление элементов
	НовыйЭлемент             = Форма.Элементы.Вставить("ГруппаУпаковкаЕдиницаИзмерения", Тип("ГруппаФормы"), Элементы.ШтрихкодыНоменклатуры, Элементы.ШтрихкодыНоменклатурыКоличество);
	НовыйЭлемент.Вид         = ВидГруппыФормы.ГруппаКолонок;
	НовыйЭлемент.Заголовок   = НСтр("ru = 'Упаковка, единица измерения';
									|en = 'Packaging, unit of measure'");
	НовыйЭлемент.Группировка = ГруппировкаКолонок.ВЯчейке;
	НовыйЭлемент.Видимость   = Истина;
	
	НовыйЭлемент            	  		= Форма.Элементы.Вставить("Упаковка", Тип("ПолеФормы"), Элементы.ГруппаУпаковкаЕдиницаИзмерения);
	НовыйЭлемент.Вид         	  		= ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ОтображатьВШапке 		= Ложь;
	НовыйЭлемент.ПутьКДанным 	  		= "ШтрихкодыНоменклатуры.Упаковка";
	НовыйЭлемент.СвязиПараметровВыбора  = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	НовыйЭлемент.Видимость   	  		= Истина;
	
	Элемент = Форма.Элементы.Найти("ШтрихкодыНоменклатурыЕдиницаИзмерения");
	Элемент.ОтображатьВШапке 			= Ложь;
	Элемент.Видимость 					= Ложь;
	Форма.Элементы.Переместить(Элемент, Элементы.ГруппаУпаковкаЕдиницаИзмерения);	
	
	НовыйЭлемент            	  		= Форма.Элементы.Вставить("ЕдиницаИзмерения", Тип("ПолеФормы"), Элементы.ГруппаУпаковкаЕдиницаИзмерения);
	НовыйЭлемент.Вид         	  		= ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.Заголовок 				= НСтр("ru = 'Ед. изм.';
													|en = 'UOM'");
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//НовыйЭлемент.ПутьКДанным 	  		= "ШтрихкодыНоменклатуры.Номенклатура.ЕдиницаИзмерения";
	
	//БК
	НовыйЭлемент.ПутьКДанным 	  		= "ШтрихкодыНоменклатуры.Номенклатура.БазоваяЕдиницаИзмерения";
	///////////////////
	НовыйЭлемент.Видимость   	  		= Истина;
	
КонецПроцедуры

Процедура ПоискНоменклатурыПоШтрихкодуПослеЗагрузкиНоменклатуры(СтрокаТаблицыШтрихкодов, НоменклатураСсылка) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//СтрокаТаблицыШтрихкодов.Упаковка = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЗначениеРеквизитаОбъекта(НоменклатураСсылка, "ЕдиницаИзмерения");
	
	//Розница
	//СтрокаТаблицыШтрихкодов.Упаковка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураСсылка, "ЕдиницаИзмерения");
	
	//БК
	СтрокаТаблицыШтрихкодов.Упаковка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураСсылка, "БазоваяЕдиницаИзмерения");
	///////////////////	
	
КонецПроцедуры

Функция ПолучитьВидПродукцииПоНоменклатуре(Номенклатура) Экспорт
	
	ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка");
	Если Номенклатура = Неопределено
		ИЛИ Не ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат ВидПродукции;
	КонецЕсли;
		
	Если Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция") Тогда
		
		ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная");
		
	ИначеЕсли Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция") Тогда
		
		ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная");
		
	ИначеЕсли Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция") Тогда
		
		ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция");
		
	ИначеЕсли Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты") Тогда
		
		ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты");
		
	ИначеЕсли Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность") Тогда
		
		ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность");
		
	КонецЕсли;
	
	Возврат ВидПродукции;
	
КонецФункции

Функция ПроверитьИспользованиеСерийУНоменклатуры(Номенклатура) Экспорт
	
	Если Номенклатура = Неопределено
		ИЛИ Не ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ВидНоменклатуры = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
	//Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользоватьСерии");
	
	//БК
	Возврат Ложь;
	///////////////////
	
КонецФункции

Функция ПроверитьНоменклатуруНаПринадлежностьКМаркировке(Номенклатура) Экспорт
	
	Если Не ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция") 
		Или Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция")
		Или Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция")
		Или Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты")
		Или Номенклатура.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность") Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСведенияОНоменклатуре(Номенклатура) Экспорт
	
	ДанныеНоменклатуры = Новый Структура();
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда		
	//	ДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", Номенклатура.ЕдиницаИзмерения);
	//Иначе	
	//	ДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	//КонецЕсли;
	
	//Розница
	//Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда		
	//	ДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", Номенклатура.ЕдиницаИзмерения);
	//Иначе	
	//	ДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", Справочники.УпаковкиНоменклатуры.ПустаяСсылка());	//Розница
	//КонецЕсли;
	
	//БК
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда		
		ДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", Номенклатура.БазоваяЕдиницаИзмерения);
	Иначе	
		ДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка());
	КонецЕсли;
	///////////////////
	
	Возврат ДанныеНоменклатуры;

КонецФункции

Функция ПолучитьДанныеОНоменклатуреПоGTIN(ТаблицаШК) Экспорт
	
	ДанныеШтрихкодов   = ТаблицаШК.Скопировать(, "Штрихкод"); 	
	ДанныеШтрихкодов.Свернуть("Штрихкод");
	ДанныеНоменклатуры = ПодобратьДанныеПоGTINДляЗаказа(ДанныеШтрихкодов);
	
	//Необходимо дозаполнить исходную таблицу полученными данными по номенклатуре
	Для Каждого СтрокаТовар Из ДанныеНоменклатуры Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("Штрихкод", СтрокаТовар.Штрихкод);
		СтрокиИсходнойТаблицы = ТаблицаШК.НайтиСтроки(Отбор);
		
		Если СтрокиИсходнойТаблицы.Количество() > 0 Тогда
			Для Каждого СтрокаИсходнойТаблицы Из СтрокиИсходнойТаблицы Цикл
				СтрокаИсходнойТаблицы.Номенклатура   = СтрокаТовар.Номенклатура; 
				СтрокаИсходнойТаблицы.Характеристика = СтрокаТовар.Характеристика;
				СтрокаИсходнойТаблицы.Упаковка       = СтрокаТовар.Упаковка;
			КонецЦикла;
		КонецЕсли;
 	
	КонецЦикла;
	
	Возврат ТаблицаШК;
		
КонецФункции

Функция ПодобратьДанныеПоGTINДляЗаказа(МассивGTIN) Экспорт
	
	Запрос = Новый Запрос();
	ТекстЗапроса = "ВЫБРАТЬ
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	//|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	//|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка,
	//|	ШтрихкодыНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	//|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	//|ИЗ
	//|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	
	//Розница
	//|	ШтрихкодыНоменклатуры.Владелец КАК Номенклатура,
	//|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	//|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка,
	//|	ШтрихкодыНоменклатуры.Владелец.ЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	//|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	//|ИЗ
	//|	РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
	
	//БК
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	"""" КАК Характеристика,
	|	&Упаковка КАК Упаковка,
	|	ШтрихкодыНоменклатуры.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	///////////////////
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод В(&Штрихкоды)";
				   
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Штрихкоды", МассивGTIN); 
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//
	
	//БК
	Запрос.УстановитьПараметр("Упаковка" , Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка());
	///////////////////
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеНоменклатуры = Новый Массив();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеШтрихкода = Новый Структура();
		ДанныеШтрихкода.Вставить("Штрихкод",       Выборка.Штрихкод);		
		ДанныеШтрихкода.Вставить("Номенклатура",   Выборка.Номенклатура);
		ДанныеШтрихкода.Вставить("Характеристика", Выборка.Характеристика);
		//Если ЗначениеЗаполнено(Выборка.Упаковка) 
		//	И Не Выборка.Упаковка = Выборка.БазоваяЕдиницаИзмерения Тогда //в ЕРП, УТ, КА в измерении регистра может быть указана просто ЕИ из карточки ном-ры, что по сути не является упаковкой
		//	//Используем единицу измерения (упаковку), зарегистрированную у штрихкода
		//	ДанныеШтрихкода.Вставить("Упаковка",   Выборка.Упаковка);
		//	ДанныеШтрихкода.Вставить("ИспользуютсяУпаковки", Ложь);
		//Иначе
		//	//Заполняем базовой единицей измерения из карточки номенклатуры
		//	ДанныеШтрихкода.Вставить("Упаковка",   Выборка.БазоваяЕдиницаИзмерения);
		//	ДанныеШтрихкода.Вставить("ИспользуютсяУпаковки", Истина);
		//КонецЕсли;
		//БК
		ДанныеШтрихкода.Вставить("Упаковка",   Выборка.Упаковка);
		ДанныеШтрихкода.Вставить("ИспользуютсяУпаковки", Ложь);
		
		ДанныеНоменклатуры.Добавить(ДанныеШтрихкода);
		
	КонецЦикла;
	
	Возврат ДанныеНоменклатуры;
	
КонецФункции

Функция УпаковкаНеШтучная(Номенклатура, Упаковка) Экспорт
	
	//Проверяет зарегистрированную упаковку на соответствие 1 единице товара:
	//если упаковка штучная, то воспринимаем ее как единицу товара и приравниваем к базовой единице.
	//Это необходимо при проверке штрихкода для того, чтобы понять зарегистрирован он для единицы товара (потребит. код)
	//или реальной упаковки (групповой код)
	
	Если Не ЗначениеЗаполнено(Номенклатура) Или Не ЗначениеЗаполнено(Упаковка) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//КоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(Упаковка, Номенклатура);
	
	//Розница
	//Если ТипЗнч(Упаковка) = Тип("СправочникСсылка.БазовыеЕдиницыИзмерения") Тогда
	//	КоэффициентУпаковки = 1;
	//Иначе
	//	КоэффициентУпаковки = Упаковка.Коэффициент;
	//КонецЕсли;
	
	//БК
	КоэффициентУпаковки = 1;
	///////////////////
	
	Возврат ?(КоэффициентУпаковки = 1, Ложь, Истина);
	
КонецФункции

Функция ПересчитатьКоличествоУпаковокВКоличество(КоличествоУпаковок, Упаковка, Номенклатура) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//КоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(Упаковка, Номенклатура);
	
	//Розница
	//Если ТипЗнч(Упаковка) = Тип("СправочникСсылка.БазовыеЕдиницыИзмерения") Тогда
	//	КоэффициентУпаковки = 1;
	//Иначе
	//	КоэффициентУпаковки = Упаковка.Коэффициент;
	//КонецЕсли;
	
	//БК
	КоэффициентУпаковки = 1;
	///////////////////
	
	Возврат КоличествоУпаковок * КоэффициентУпаковки;	
	
КонецФункции

#КонецОбласти

#Область Характеристики

Функция ПроверитьИспользованиеХарактеристик() Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//Возврат ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
	//БК
	Возврат Ложь;
	///////////////////
	   	
КонецФункции

Функция ПроверитьВедениеУчетаПоХарактеристикамУНоменклатуры(Номенклатура) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//Если Номенклатура.ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать") Тогда
	//	Возврат Ложь;
	//Иначе
	//	Возврат Истина;
	//КонецЕсли;
	
	//Розница
	//Если Номенклатура.ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать") Тогда
	//	Возврат Ложь;
	//Иначе
	//	Возврат Истина;
	//КонецЕсли;
	
	//БК
	Возврат Ложь;
	///////////////////
		
КонецФункции

Функция ПолучитьСведенияОХарактеристикеНоменклатуры(Номенклатура, Штрихкод) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	//|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	//|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
	//|ИЗ
	//|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	//|ГДЕ
	//|	ШтрихкодыНоменклатуры.Штрихкод   = &Штрихкод
	//|	И ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура";
	
	//Розница
	//|	ШтрихкодыНоменклатуры.Владелец КАК Номенклатура,
	//|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	//|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
	//|ИЗ
	//|	РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
	//|ГДЕ
	//|	ШтрихкодыНоменклатуры.Штрихкод   = &Штрихкод
	//|	И ШтрихкодыНоменклатуры.Владелец = &Номенклатура";
	
	//БК
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	"""" КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка) КАК Упаковка
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод   = &Штрихкод
	|	И ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура";
	///////////////////
	
	Запрос.УстановитьПараметр("Штрихкод", 	  Штрихкод);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеНоменклатуры = Новый Структура();
		ДанныеНоменклатуры.Вставить("Характеристика", Выборка.Характеристика);
		Возврат ДанныеНоменклатуры;
	КонецЦикла;
	
	Возврат Неопределено;
	 
КонецФункции

Функция ПроверитьИспользованиеХарактеристикУНоменклатуры(Номенклатура) Экспорт
	
	//Использование хар-к у номенклатуры выбора
	ИспользоватьХарактеристики = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЗначениеРеквизитаОбъекта(Номенклатура, "ИспользованиеХарактеристик");
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//Если ИспользоватьХарактеристики = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать")
	//	ИЛИ ИспользоватьХарактеристики = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ПустаяСсылка") Тогда
	//	Возврат Ложь;
	//Иначе
	//	Возврат Истина;
	//КонецЕсли;
	
	//Розница
	//Если ИспользоватьХарактеристики = ПредопределенноеЗначение("Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать")	
	//	ИЛИ ИспользоватьХарактеристики = ПредопределенноеЗначение("Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ПустаяСсылка") Тогда
	//	Возврат Ложь;
	//Иначе
	//	Возврат Истина;
	//КонецЕсли;
	
	//БК
	Возврат Ложь;
	///////////////////
	
КонецФункции

#КонецОбласти

#Область Штрихкод

Функция ПроверитьНаличиеШтрихкодаУноменклатуры(Номенклатура = Неопределено, EAN) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + БК
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	
	//Розница
	//|	ШтрихкодыНоменклатуры.Владелец КАК Номенклатура
	//|ИЗ
	//|	РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
	///////////////////
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";
	
	Запрос.УстановитьПараметр("Штрихкод", EAN);
	Выборка = Запрос.Выполнить().Выбрать();
	РезультатПроверки = Новый Структура();
	
	Пока Выборка.Следующий() Цикл
		
		РезультатПроверки.Вставить("Номенклатура", Выборка.Номенклатура);
			
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура ПоискНоменклатурыПоШтрихкодуОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ШтрихкодыНоменклатуры = Форма.ШтрихкодыНоменклатуры;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтрихкодыНоменклатуры.Штрихкод                      КАК Штрихкод,
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	|	ШтрихкодыНоменклатуры.Номенклатура                 	КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Номенклатура.Наименование     КАК НоменклатураПредставление,
	
	//Розница
	//|	ШтрихкодыНоменклатуры.Владелец                  	КАК Номенклатура,
	//|	ШтрихкодыНоменклатуры.Владелец.Наименование     	КАК НоменклатураПредставление,
	
	//БК
	|	""""                                                КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,
	|	""""                                                КАК ХарактеристикаПредставление,
	|	""""                                                КАК ЕдиницаИзмеренияПредставление
	///////////////////
	//|	ШтрихкодыНоменклатуры.Характеристика                КАК Характеристика,
	//|	ШтрихкодыНоменклатуры.Упаковка                      КАК ЕдиницаИзмерения,
	//|	ШтрихкодыНоменклатуры.Характеристика.Наименование   КАК ХарактеристикаПредставление,
	//|	ШтрихкодыНоменклатуры.Упаковка.Наименование         КАК ЕдиницаИзмеренияПредставление
	|ИЗ
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + БК
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	
	//Розница
	//|	РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
	///////////////////
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод В(&Штрихкоды)";
	
	Запрос.УстановитьПараметр("Штрихкоды", ШтрихкодыНоменклатуры.Выгрузить(Новый Структура("Зарегистрирован", Ложь),"Штрихкод").ВыгрузитьКолонку("Штрихкод"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда // Штрихкод уже записан в БД
		
		СтрокаТЧ = ШтрихкодыНоменклатуры.НайтиСтроки(Новый Структура("Штрихкод", Выборка.Штрихкод))[0];
		
		ОписаниеОшибки = НСтр("ru = 'Такой штрихкод уже назначен для номенклатуры %Номенклатура%';
							  |en = 'Such barcode is already specified  for products %Номенклатура%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Номенклатура%", """" + Выборка.НоменклатураПредставление + """"
			+ ?(ЗначениеЗаполнено(Выборка.Характеристика), " " + НСтр("ru = 'с характеристикой';
																	  |en = 'with characteristic'") + " """ + Выборка.ХарактеристикаПредставление + """", "")
			+ ?(ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения), " """ + НСтр("ru = 'с единицей измерения';
																		  |en = 'with UOM'") + " " + Выборка.ЕдиницаИзмеренияПредставление + """", ""));
		
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПереопределяемый.СообщитьПользователю(ОписаниеОшибки,,"ШтрихкодыНоменклатуры["+ШтрихкодыНоменклатуры.Индекс(СтрокаТЧ)+"].Штрихкод",,Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьШтрихкодНоменклатуры(Номенклатура, ШтрихкодEAN, ЕИ = Неопределено, Характеристика) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//МенеджерЗаписи = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();	
	//МенеджерЗаписи.Штрихкод 	  = ШтрихкодEAN;
	//МенеджерЗаписи.Номенклатура	  = Номенклатура;	
	//МенеджерЗаписи.Характеристика = Характеристика;
	//Если Не ЕИ = Неопределено Тогда
	//	МенеджерЗаписи.Упаковка   = ЕИ; 
	//КонецЕсли;
	
	//Розница
	//МенеджерЗаписи = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();	
	//МенеджерЗаписи.Штрихкод 	    = ШтрихкодEAN;
	//МенеджерЗаписи.Владелец       = Номенклатура;
	//МенеджерЗаписи.Характеристика = Характеристика;
	//Если Не ЕИ = Неопределено Тогда
	//	МенеджерЗаписи.Упаковка     = ЕИ; 
	//КонецЕсли;
	
	//БК
	МенеджерЗаписи = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Штрихкод 	  = ШтрихкодEAN;
	МенеджерЗаписи.Номенклатура	  = Номенклатура;	
	///////////////////
		
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура ЗарегистрироватьШтрихкоды(ШтрихкодыНоменклатуры) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА, УТ + БК
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ШтрихкодыНоменклатуры");
		
		//Розница
		//ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Штрихкоды");
		///////////////////
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		Для Каждого СтрокаШтрихкода Из ШтрихкодыНоменклатуры Цикл
			
			//ПЕРЕОПРЕДЕЛЕНИЕ//
			//ЕРП, КА, УТ + БК
			МенеджерЗаписи = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
			
			//Розница
			//МенеджерЗаписи = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
			///////////////////		
			
			МенеджерЗаписи.Штрихкод         = СтрокаШтрихкода.Штрихкод;
					
			//ПЕРЕОПРЕДЕЛЕНИЕ//
			//ЕРП, КА, УТ
			//МенеджерЗаписи.Номенклатура  	= СтрокаШтрихкода.Номенклатура;
			//МенеджерЗаписи.Характеристика   = СтрокаШтрихкода.Характеристика;
			//МенеджерЗаписи.Упаковка 		= СтрокаШтрихкода.Упаковка;
			
			//Розница
			//МенеджерЗаписи.Владелец    	= СтрокаШтрихкода.Номенклатура;
			//МенеджерЗаписи.ТипШтрихкода	= РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ТипШтрихкода(СтрокаШтрихкода.Штрихкод);
			//МенеджерЗаписи.Характеристика   = СтрокаШтрихкода.Характеристика;
			//МенеджерЗаписи.Упаковка 		= СтрокаШтрихкода.Упаковка;
			
			//БК
			МенеджерЗаписи.Номенклатура  	= СтрокаШтрихкода.Номенклатура;
			///////////////////
					
			МенеджерЗаписи.Записать();
						
		КонецЦикла;
				
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

Функция ПодобратьGTINДляЗаказа(Номенклатура, Упаковка, Характеристика, ХарактеристикиИспользуются, ЭтоТабак = Ложь) Экспорт
	
	Запрос = Новый Запрос();
	ТекстЗапроса = "ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры  	
	//|ГДЕ
	//|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	
	//Розница
	//|	РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры	
	//|ГДЕ
	//|	ШтрихкодыНоменклатуры.Владелец = &Номенклатура
	
	//БК
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	///////////////////
	|	<Характеристики>
	|	<Упаковка>";
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	#Область ЕРП_КА_УТ
	//Если ХарактеристикиИспользуются Тогда
	//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<Характеристики>", "И ШтрихкодыНоменклатуры.Характеристика = &Характеристика");
	//Иначе
	//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<Характеристики>", "");
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(Упаковка) Тогда//Для всех ТГ учитываем упаковку только если она есть и не равна штучной упаковке (коэф-т 1)
	//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<Упаковка>", "И ШтрихкодыНоменклатуры.Упаковка = &Упаковка");
	//Иначе
	//	Если ЭтоТабак Тогда 
	//		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<Упаковка>", "И ШтрихкодыНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)");	
	//	Иначе
	//		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<Упаковка>", "");
	//	КонецЕсли;
	//КонецЕсли;
	#КонецОбласти
	
	//Розница
	#Область Розница
	//Если ХарактеристикиИспользуются Тогда
	//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<Характеристики>", "И ШтрихкодыНоменклатуры.Характеристика = &Характеристика");
	//Иначе
	//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<Характеристики>", "");
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(Упаковка) Тогда//Для всех ТГ учитываем упаковку только если она есть и не равна штучной упаковке (коэф-т 1)
	//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<Упаковка>", "И ШтрихкодыНоменклатуры.Упаковка = &Упаковка");
	//Иначе
	//	Если ЭтоТабак Тогда 
	//		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<Упаковка>", "И ШтрихкодыНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)");
	//	Иначе
	//		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<Упаковка>", "");
	//	КонецЕсли;
	//КонецЕсли;
	#КонецОбласти
	
	//БК
	#Область БК
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<Характеристики>", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<Упаковка>", "");
	#КонецОбласти
	///////////////////			   
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Если ХарактеристикиИспользуются Тогда
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
	КонецЕсли;
	Если ЗначениеЗаполнено(Упаковка) Тогда
		Запрос.УстановитьПараметр("Упаковка", Упаковка);
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивШтрихкодов = Новый Массив();
	
	Пока Выборка.Следующий() Цикл
		МассивШтрихкодов.Добавить(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.GTINПоШтрихкодуEAN(Выборка.Штрихкод));
	КонецЦикла;

	Возврат МассивШтрихкодов;
	
КонецФункции

Функция ТипШтрихкода(Штрихкод) Экспорт
	
	ТипШтрихкодаРТ = Неопределено;
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//ТипШтрихкодаРТ   = Перечисления.ТипыШтрихкодов.ПустаяСсылка();
	//ТипШтрихкодаВрем = МенеджерОборудованияВызовСервера.ОпределитьТипШтрихкода(Штрихкод);
	//
	//Если ТипШтрихкодаВрем = "EAN8" Тогда
	//	ТипШтрихкодаРТ = Перечисления.ТипыШтрихкодов.EAN8;
	//ИначеЕсли ТипШтрихкодаВрем = "EAN13" Тогда
	//	ТипШтрихкодаРТ = Перечисления.ТипыШтрихкодов.EAN13;
	//ИначеЕсли ТипШтрихкодаВрем = "CODE39" Тогда
	//	ТипШтрихкодаРТ = Перечисления.ТипыШтрихкодов.CODE39;
	//ИначеЕсли ТипШтрихкодаВрем = "CODE128" Тогда
	//	ТипШтрихкодаРТ = Перечисления.ТипыШтрихкодов.CODE128;
	//ИначеЕсли ТипШтрихкодаВрем = "ITF14" Тогда
	//	ТипШтрихкодаРТ = Перечисления.ТипыШтрихкодов.ITF14;
	//КонецЕсли;
	
	//Розница
	//ТипШтрихкодаРТ   = ПланыВидовХарактеристик.ТипыШтрихкодов.ПустаяСсылка();
	//ТипШтрихкодаВрем = МенеджерОборудованияВызовСервера.ОпределитьТипШтрихкода(Штрихкод);
	//
	//Если ТипШтрихкодаВрем = "EAN8" Тогда
	//	ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8;
	//ИначеЕсли ТипШтрихкодаВрем = "EAN13" Тогда
	//	ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
	//ИначеЕсли ТипШтрихкодаВрем = "EAN128" Тогда
	//	ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128;
	//ИначеЕсли ТипШтрихкодаВрем = "CODE39" Тогда
	//	ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.CODE39;
	//ИначеЕсли ТипШтрихкодаВрем = "CODE128" Тогда
	//	ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.CODE128;
	//ИначеЕсли ТипШтрихкодаВрем = "ITF14" Тогда
	//	ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.ITF14;
	//КонецЕсли;
	
	//БК
	//
	///////////////////
	
	Возврат ТипШтрихкодаРТ;
	
КонецФункции

Функция ПолучитьЗначениеКонстантыОтображенияДанныхНоменклатурыСУЗ() Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//Все конфигурации с полным модулем библиотеки
	Возврат Константы.ОтображатьДанныеПоНоменклатуреВДокументахСУЗИСМПТК.Получить();
	
	//Конфигурациии только с розничным контуром
	//ЕРП, КА, УТ + Розница
	//Возврат Ложь;
	///////////////////
		
КонецФункции

Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//Для всех конфигураций, обработчики розничного контура (Чеки, РМК)
	РозничноеВыбытиеИСМПТКПереопределяемый.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	//Только для конфигураций с полной библиотекой маркировки
	ИнтеграцияИСМПТКПереопределяемый.ПриДобавленииОбработчиковОбновления(Обработчики);
	///////////////////
		
КонецПроцедуры

Функция ПроверитьПоддержкуДвойногоФорматаТранспортныхКодов() Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//Если в конфигурации только розничный контур маркировки
	//Возврат Ложь;
	
	//Если конфигурация со встроенным модулем маркировки
	Возврат Константы.ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК.Получить();
	///////////////////
	
КонецФункции