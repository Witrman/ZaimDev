
#Область ПрикладныеКлассификаторы

// Открывает форму списка видов номенклатуры.
//
Процедура ОткрытьФормуСпискаВидыНоменклатуры(ВладелецФормы) Экспорт
	
	ОткрытьФорму("Справочник.ВидыНоменклатуры.ФормаСписка", , ВладелецФормы);
	Возврат;
	
КонецПроцедуры

// Открывает форму списка номенклатуры.
//
Процедура ОткрытьФормуСпискаНоменклатуры(ВладелецФормы) Экспорт
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаСписка", , ВладелецФормы);
	Возврат;
	
КонецПроцедуры

#КонецОбласти

Процедура ОткрытьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки) Экспорт
	// Для БСП 3.0: ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку
	// Для БСП 2.4:
	ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки);
КонецПроцедуры

#Область ДокументыИСМПТ_БМ

Процедура ОбработкаВыбораАПП(ПТУ, АПП) Экспорт
	
	ИнтеграцияИСМПТКВызовСервера.ОбработкаВыбораАПП(ПТУ, АПП);
	
КонецПроцедуры

Функция ПолучитьСписокДляОтбораМаркируемойПродукции() Экспорт
	
	//БМ_ИСМПТ НА_РАЗВИТИЕ	Товарные группы
	ОсобенностьУчетаСписок = Новый Массив();
	ОсобенностьУчетаСписок.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция"));
	ОсобенностьУчетаСписок.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция"));
	ОсобенностьУчетаСписок.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция"));
	ОсобенностьУчетаСписок.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты"));
	
	Возврат ОсобенностьУчетаСписок;
	
КонецФункции

#Область ВводНаОсновании

Функция ПроверитьИмяДокументаПТУ(ИмяДокумента) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//Если ИмяДокумента = "ПриобретениеТоваровУслуг" Тогда
		
	//Розница	
	//Если ИмяДокумента = "ПоступлениеТоваров" Тогда
	
	//БК
	Если ИмяДокумента = "ПоступлениеТоваровУслуг" Тогда
	///////////////////
	
		Возврат Истина;
		
	//ПЕРЕОПРЕДЕЛЕНИЕ//	
	//ЕРП, КА, УТ
	//ИначеЕсли ТипЗнч(ИмяДокумента) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		
	//Розница
	//ИначеЕсли ТипЗнч(ИмяДокумента) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
	
	//БК
	ИначеЕсли ТипЗнч(ИмяДокумента) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
	///////////////////
	
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИмяФормыДокументаИСМПТ(ДокументИсточник) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//Если ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
	//	Или ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")	
	//	Или ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")	
		
	//Розница
	//Если ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.РеализацияТоваров") 
	//	Или ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ПоступлениеТоваров")	
	//	Или ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
	
	//БК
	Если ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
		Или ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 	
		Или ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
	///////////////////
		Или ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
				
		Возврат "Документ.АктПриемаПередачиИСМПТК.ФормаОбъекта";
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") Тогда
		
	//Розница	
	//ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
	
	//БК
	ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
	///////////////////
		Возврат "Документ.УведомлениеОВводеВОборотИСМПТК.ФормаОбъекта";
	//ПЕРЕОПРЕДЕЛЕНИЕ//		
	//ЕРП, КА, УТ
	//ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.СписаниеНедостачТоваров") Тогда	
		
	//Розница	
	//ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.СписаниеТоваров") Тогда
	
	//БК
	ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.СписаниеТоваров")	
		ИЛИ ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
	///////////////////
		Возврат "Документ.УведомлениеОВыводеИзОборотаИСМПТК.ФормаОбъекта";
		
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ЗаказПоставщику")
	//	ИЛИ ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ПрочееОприходованиеТоваров") Тогда 
	//	Возврат "Документ.ЗаказКодовМаркировкиСУЗИСМПТК.ФормаОбъекта";
		
	//Розница
	//ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
	//	Возврат "Документ.ЗаказКодовМаркировкиСУЗИСМПТК.ФормаОбъекта";
	
	//БК
	//
	///////////////////	
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#Область ОбщегоНазначенияИСМПТ

Процедура ОбработкаОповещенияДокументыИСМПТ(Форма, ДокументСсылка, ИмяСобытия, Параметр, Источник) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеДокумента

Процедура СоздатьДокументИСМПТПоОснованию(ДокументИсточник, ИмяКоманды = Неопределено) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//Если ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда  
		
	//Розница	
	//Если ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.РеализацияТоваров") Тогда  
	
	//БК
	Если ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
	///////////////////	
		
		Если ИмяКоманды = "СоздатьЭкспортЕАЭС"
			И ИнтеграцияИСМПТКПереопределяемый.КонтрагентНерезидент(ДокументИсточник) Тогда
			
			СоздатьЭкспортЕАЭС(ДокументИсточник);
			
		ИначеЕсли ИмяКоманды = "СоздатьАППИсход"
			И НЕ ИнтеграцияИСМПТКПереопределяемый.КонтрагентНерезидент(ДокументИсточник) Тогда 
			
			СоздатьАППИсходящий(ДокументИсточник);
			
		ИначеЕсли ИмяКоманды = "СоздатьУведОВыводе"
			И НЕ ИнтеграцияИСМПТКПереопределяемый.КонтрагентНерезидент(ДокументИсточник) Тогда 
			
			СоздатьУведОВыводе(ДокументИсточник);
			
		Иначе				
			ТекстСообщения = НСтр("ru = 'Указанный контрагент не соответствует требованиям создаваемого документа ИС МПТ!'");
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		СоздатьАППИсходящий(ДокументИсточник);
		
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров")
	//	Или ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда  
		
	//Розница	
	//ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ОприходованиеТоваров")  
	//Или ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
	
	//БК	
	ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ОприходованиеТоваров")
	Или ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
	///////////////////	
		
		СоздатьВводВОборот(ДокументИсточник);
		
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ	
	//ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.СписаниеНедостачТоваров") Тогда 
		
	//Розница
	//ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.СписаниеТоваров") Тогда 
	
	//БК
	ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.СписаниеТоваров")
	ИЛИ ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
	///////////////////	
	
		СоздатьВыводИзОборота(ДокументИсточник);
		
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ЗаказПоставщику") 
	//	ИЛИ ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ПрочееОприходованиеТоваров") Тогда
	//	
	//	СоздатьЗаказКМ(ДокументИсточник);
		
	//Розница
	//ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
	//СоздатьЗаказКМ(ДокументИсточник);	
	
	//БК
	//
	///////////////////	
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда 
		
	//Розница
	//ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда 
	
	//БК
	ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
	///////////////////	
		
		ДокументВвоза = ИнтеграцияИСМПТКВызовСервера.ПроверитьВидВвозаИзОснованияПТУ(ДокументИсточник);
		
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА, УТ
		//Если ДокументВвоза = "УведомлениеОВвозеИзЕАЭСИСМПТК" И ИмяКоманды = "СоздатьВвозЕАЭС" Тогда
		//	СоздатьВвозЕАЭС(ДокументИсточник);
		//ИначеЕсли ДокументВвоза = "УведомлениеОВвозеИзТретьихСтранИСМПТК" И ИмяКоманды = "СоздатьВвозИмпорт" Тогда
		//	СоздатьВвозИмпорт(ДокументИсточник);
		//Иначе
		//	ТекстСообщения = НСтр("ru = 'Вид операции документа не соответствует выбранному виду Уведомления о ввозе.'");
		//	ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		//КонецЕсли;
		
		//Розница
		//Если ДокументВвоза = "УведомлениеОВвозеИзЕАЭСИСМПТК" Тогда
		//	СоздатьВвозЕАЭС(ДокументИсточник);
		//ИначеЕсли ДокументВвоза = "УведомлениеОВвозеИзТретьихСтранИСМПТК" Тогда
		//	СоздатьВвозИмпорт(ДокументИсточник);
		//Иначе
		//	ТекстСообщения = НСтр("ru = 'Вид операции документа не соответствует выбранному виду Уведомления о ввозе.'");
		//	ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		//КонецЕсли;
		
		//БК
		Если ДокументВвоза = "УведомлениеОВвозеИзЕАЭСИСМПТК" И ИмяКоманды = "СоздатьВвозЕАЭС" Тогда
			СоздатьВвозЕАЭС(ДокументИсточник);
		ИначеЕсли ДокументВвоза = "УведомлениеОВвозеИзЕАЭСИСМПТК" И ИмяКоманды = "СоздатьВвозИмпорт" Тогда
			СоздатьВвозИмпорт(ДокументИсточник);
		ИначеЕсли ДокументВвоза = "УведомлениеОВвозеИзТретьихСтранИСМПТК" И ИмяКоманды = "СоздатьВвозИмпорт" Тогда
			СоздатьВвозИмпорт(ДокументИсточник);
		Иначе
			ТекстСообщения = НСтр("ru = 'Вид операции документа не соответствует выбранному виду Уведомления о ввозе.'");
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		///////////////////	
		
	ИначеЕсли ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.УведомлениеОбОтгрузкеЕАЭСИСМПТК") Тогда 
		
		СоздатьПриемкаЕАЭС(ДокументИсточник);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗаказКМ(Основание)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	ОткрытьФорму("Документ.ЗаказКодовМаркировкиСУЗИСМПТК.ФормаОбъекта", ПараметрыФормы);
			
КонецПроцедуры

Процедура СоздатьВыводИзОборота(Основание)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	ОткрытьФорму("Документ.УведомлениеОВыводеИзОборотаИСМПТК.ФормаОбъекта", ПараметрыФормы);
			
КонецПроцедуры

Процедура СоздатьВводВОборот(Основание)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	ОткрытьФорму("Документ.УведомлениеОВводеВОборотИСМПТК.ФормаОбъекта", ПараметрыФормы);
			
КонецПроцедуры

Процедура СоздатьАППИсходящий(Основание)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	ОткрытьФорму("Документ.АктПриемаПередачиИСМПТК.ФормаОбъекта", ПараметрыФормы);
			
КонецПроцедуры

Процедура СоздатьВвозЕАЭС(Основание)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	ОткрытьФорму("Документ.УведомлениеОВвозеИзЕАЭСИСМПТК.ФормаОбъекта", ПараметрыФормы);
			
КонецПроцедуры

Процедура СоздатьВвозИмпорт(Основание)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	ОткрытьФорму("Документ.УведомлениеОВвозеИзТретьихСтранИСМПТК.ФормаОбъекта", ПараметрыФормы);
			
КонецПроцедуры

Процедура СоздатьЭкспортЕАЭС(Основание)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	ОткрытьФорму("Документ.УведомлениеОбЭкспортеЕАЭСИСМПТК.ФормаОбъекта", ПараметрыФормы);
		
КонецПроцедуры

Процедура СоздатьУведОВыводе(Основание)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	ОткрытьФорму("Документ.УведомлениеОВыводеИзОборотаИСМПТК.ФормаОбъекта", ПараметрыФормы);
			
КонецПроцедуры

Процедура СоздатьПриемкаЕАЭС(Основание)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	ОткрытьФорму("Документ.УведомлениеОПриемкеЕАЭСИСМПТК.ФормаОбъекта", ПараметрыФормы);
			
КонецПроцедуры

#КонецОбласти

#Область ВыборДокумента

Функция ВыбратьДокументИСМПТПоОснованию(ДокументИсточник) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//Если ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
	//	ИЛИ ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда 
		
	//Розница
	//Если ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ПоступлениеТоваров")
	//	ИЛИ ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
	
	//БК
	Если ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
	///////////////////	
	
		Возврат Истина;
	Иначе
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ДокументыСУЗ_БМ

Функция ПодобратьНоменклатуруВЗаказ(Форма, УникальныйИдентификатор) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	#Область ЕРП_КА_УТ
	//Объект = Форма.Объект;
	//
	//ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	//Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	//Иначе
	//	ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'Заказ на эмиссию кодов маркировки.'"));
	//КонецЕсли;
	//
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("Организация", Объект.Организация);
	//ПараметрыФормы.Вставить("Дата",  	   Объект.Дата);
	//ПараметрыФормы.Вставить("Валюта", 	   ИнтеграцияИСМПТКПереопределяемый.ПолучитьВалютуРегламентированногоУчета());
	//
	//ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	//ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	//	
	//ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, Форма, УникальныйИдентификатор);
	#КонецОбласти
	
	//Розница
	#Область Розница
	//Объект = Форма.Объект;
	//
	//ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	//Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	//Иначе
	//	ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'Заказ на эмиссию кодов маркировки.'"));
	//КонецЕсли;
	//
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("Организация", Объект.Организация);
	//ПараметрыФормы.Вставить("Дата", 	   Объект.Дата);
	//ПараметрыФормы.Вставить("Валюта", 	   ИнтеграцияИСМПТКПереопределяемый.ПолучитьВалютуРегламентированногоУчета());
	//
	//ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	//ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	//
	//ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	//
	//ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, Форма, УникальныйИдентификатор);
	#КонецОбласти
	
	//БК
	#Область БК
	Объект = Форма.Объект;
	
	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор товаров в %1 (%2)'");
	ПредставлениеТаблицы = НСтр("ru = '""Товары""'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПредставлениеДокумента = Объект.Ссылка;
	Иначе
		ПредставлениеДокумента = НСтр("ru = 'Заказ на эмиссию кодов маркировки'");
	КонецЕсли;
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, ПредставлениеДокумента, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов"            , ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация"             , Объект.Организация);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , "Товары");
	ПараметрыФормы.Вставить("Товар"                   , Истина);
	ПараметрыФормы.Вставить("Услуги"                  , Ложь);
	ПараметрыФормы.Вставить("ЕстьЦена"                , Истина);
	ПараметрыФормы.Вставить("ВалютаДокумента"         , ИнтеграцияИСМПТКПереопределяемый.ПолучитьВалютуРегламентированногоУчета());
	ПараметрыФормы.Вставить("ВыбиратьВсе"             , Истина);	
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику", "По справочнику");
	СписокЗапросов.Добавить("ОстаткиНоменклатуры", "Остатки номенклатуры");
	СписокЗапросов.Добавить("ЦеныНоменклатурыДокументов", "Цены продажи");
	СписокЗапросов.Добавить("ОстаткиИЦеныНоменклатурыДокументов", "Остатки и цены продажи");
	ПараметрыФормы.Вставить("ЗаполнятьЦеныПоПродаже", Истина);
	
	Если ЗначениеЗаполнено(Объект.ВидПродукции) Тогда
		Если Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") Тогда
			ПараметрыФормы.Вставить("ОсобенностьУчета", ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты"))
		ИначеЕсли Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") Тогда
			ПараметрыФормы.Вставить("ОсобенностьУчета", ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция"))
		ИначеЕсли Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
			ПараметрыФормы.Вставить("ОсобенностьУчета", ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция"))
		ИначеЕсли Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция") Тогда
			ПараметрыФормы.Вставить("ОсобенностьУчета", ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция"))
		ИначеЕсли Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность") Тогда
			ПараметрыФормы.Вставить("ОсобенностьУчета", ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность"))
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыФормы, Форма, УникальныйИдентификатор);
	#КонецОбласти
	///////////////////	
	
КонецФункции

Функция ПолучитьИмяФормыПодбораНоменклатуры() Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//Возврат "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма";
	
	//Розница
	//Возврат "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма"
	
	//БК
	Возврат "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма";
	///////////////////	
	
КонецФункции

#КонецОбласти

#Область ФормаПодбораНоменклатурыИРегистрацииновыхШК

Процедура УстановитьЗначениеХарактеристикПоУмолчанию(Форма, Элемент, ИмяТаблицы = "ШтрихкодыНоменклатуры") Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	#Область ЕРП_КА_УТ
	//ТекущиеДанные = Форма.Элементы[ИмяТаблицы].ТекущиеДанные;
	//
	//Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//РеквизитыНоменклатуры = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.ЗначенияРеквизитовОбъекта(ТекущиеДанные.Номенклатура, Новый Структура("ЕдиницаИзмерения, ВидНоменклатуры"));
	//
	//Если ЗначениеЗаполнено(РеквизитыНоменклатуры.ВидНоменклатуры) Тогда
	//	
	//	Если ИнтеграцияИСМПТКПереопределяемый.ПроверитьИспользованиеХарактеристик() Тогда //Использование хар-к в целом в базе
	//		
	//		//Использование хар-к у номенклатуры выбора
	//		ИспользоватьХарактеристики = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ИспользованиеХарактеристик");
	//		
	//		Если ИспользоватьХарактеристики = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать")
	//			ИЛИ ИспользоватьХарактеристики = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ПустаяСсылка") Тогда
	//			
	//			ТекущиеДанные.ХарактеристикиИспользуются = Ложь;
	//		Иначе
	//			ТекущиеДанные.ХарактеристикиИспользуются = Истина;
	//		КонецЕсли;
	//		
	//	Иначе
	//		ТекущиеДанные.ХарактеристикиИспользуются = Ложь;
	//	КонецЕсли;
	//	
	//	Если Не ТекущиеДанные.ХарактеристикиИспользуются Тогда
	//		ТекущиеДанные.Характеристика = Неопределено;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	#КонецОбласти
	
	//Розница
	#Область Розница
	//ТекущиеДанные = Форма.Элементы[ИмяТаблицы].ТекущиеДанные;
	//
	//Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//РеквизитыНоменклатуры = ИнтеграцияИСМПТКПереопределяемый.ЗначенияРеквизитовОбъекта(ТекущиеДанные.Номенклатура, Новый Структура("ЕдиницаИзмерения, ВидНоменклатуры"));
	//
	//Если ЗначениеЗаполнено(РеквизитыНоменклатуры.ВидНоменклатуры) Тогда
	//	
	//	Если ИнтеграцияИСМПТКПереопределяемый.ПроверитьИспользованиеХарактеристик() Тогда //Использование хар-к в целом в базе
	//		
	//		//Использование хар-к у номенклатуры выбора
	//		ИспользоватьХарактеристики = ИнтеграцияИСМПТКПереопределяемый.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура.ВидНоменклатуры, "ИспользованиеХарактеристик");
	//		
	//		Если ИспользоватьХарактеристики = ПредопределенноеЗначение("Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать")
	//			ИЛИ ИспользоватьХарактеристики = ПредопределенноеЗначение("Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ПустаяСсылка") Тогда
	//			
	//			ТекущиеДанные.ХарактеристикиИспользуются = Ложь;
	//		Иначе
	//			ТекущиеДанные.ХарактеристикиИспользуются = Истина;
	//		КонецЕсли;
	//		
	//	Иначе
	//		ТекущиеДанные.ХарактеристикиИспользуются = Ложь;
	//	КонецЕсли;
	//	
	//	Если Не ТекущиеДанные.ХарактеристикиИспользуются Тогда
	//		ТекущиеДанные.Характеристика = Неопределено;
	//	КонецЕсли;
	//КонецЕсли;
	#КонецОбласти
	
	//БК
	#Область БК
	ТекущиеДанные = Форма.Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ХарактеристикиИспользуются = Ложь;
	ТекущиеДанные.Характеристика = Неопределено;
	#КонецОбласти
	///////////////////	
	
КонецПроцедуры

#КонецОбласти