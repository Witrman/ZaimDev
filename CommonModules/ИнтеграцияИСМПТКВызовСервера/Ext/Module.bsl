
#Область ПрограммныйИнтерфейс

// См. ИнтерфейсИСМПТК.СоздатьИсходящиеАкты()
Процедура СоздатьИсходящиеАкты(Знач МассивДокументов, Знач УстанавливатьПодпись, Знач ТипПодписи, АдресКоллекцииАктовXML, КоллекцияSignedContentXML) Экспорт
	
	КоллекцияАктовXML = Неопределено;
	ИнтерфейсИСМПТК.СоздатьИсходящиеАкты(МассивДокументов, УстанавливатьПодпись, ТипПодписи, КоллекцияАктовXML, КоллекцияSignedContentXML);
	
	// После того, как переменная АдресКоллекцииАктовXML станет не нужна, 
	// необходимо самостоятельно очистить временное хранилище,
	// иначе значение будет удалено только после перезапуска сервера.
	АдресКоллекцииАктовXML = ПоместитьВоВременноеХранилище(КоллекцияАктовXML, Новый УникальныйИдентификатор);
	
КонецПроцедуры

Процедура СоздатьИсходящиеУведомленияОВводеВОборот(Знач МассивДокументов, Знач УстанавливатьПодпись, Знач ТипПодписи, АдресКоллекцииАктовXML, КоллекцияSignedContentXML) Экспорт
	
	КоллекцияУведомленийXML = Неопределено;
	ИнтерфейсИСМПТК.СоздатьИсходящиеУведомленияОВводеВОборот(МассивДокументов, УстанавливатьПодпись, ТипПодписи, КоллекцияУведомленийXML, КоллекцияSignedContentXML);
	
	АдресКоллекцииАктовXML = ПоместитьВоВременноеХранилище(КоллекцияУведомленийXML, Новый УникальныйИдентификатор);
	
КонецПроцедуры

Процедура СоздатьИсходящиеУведомленияОВыводеИзОборота(Знач МассивДокументов, Знач УстанавливатьПодпись, Знач ТипПодписи, АдресКоллекцииУведомленийXML, КоллекцияSignedContentXML) Экспорт
	
	КоллекцияУведомленийXML = Неопределено;
	ИнтерфейсИСМПТК.СоздатьИсходящиеУведомленияОВыводеИзОборота(МассивДокументов, УстанавливатьПодпись, ТипПодписи, КоллекцияУведомленийXML, КоллекцияSignedContentXML);
	
	АдресКоллекцииУведомленийXML = ПоместитьВоВременноеХранилище(КоллекцияУведомленийXML, Новый УникальныйИдентификатор);
	
КонецПроцедуры

Процедура СоздатьИсходящиеУведомленияОВвозе(Знач МассивДокументов, Знач УстанавливатьПодпись, Знач ТипПодписи, АдресКоллекцииУведомленийXML, КоллекцияSignedContentXML) Экспорт
	
	КоллекцияУведомленийXML = Неопределено;
	ИнтерфейсИСМПТК.СоздатьИсходящиеУведомленияОВвозе(МассивДокументов, УстанавливатьПодпись, ТипПодписи, КоллекцияУведомленийXML, КоллекцияSignedContentXML);
	
	АдресКоллекцииУведомленийXML = ПоместитьВоВременноеХранилище(КоллекцияУведомленийXML, Новый УникальныйИдентификатор);
	
КонецПроцедуры

Процедура СоздатьИсходящиеУведомленияОВвозеИзТретьихСтран(Знач МассивДокументов, Знач УстанавливатьПодпись, Знач ТипПодписи, АдресКоллекцииУведомленийXML, КоллекцияSignedContentXML, ДанныеГрупповыхКодов) Экспорт
	
	КоллекцияУведомленийXML = Неопределено;
	ИнтерфейсИСМПТК.СоздатьИсходящиеУведомленияОВвозеИзТретьихСтран(МассивДокументов, УстанавливатьПодпись, ТипПодписи, КоллекцияУведомленийXML, КоллекцияSignedContentXML, ДанныеГрупповыхКодов);
	
	АдресКоллекцииУведомленийXML = ПоместитьВоВременноеХранилище(КоллекцияУведомленийXML, Новый УникальныйИдентификатор);
	
КонецПроцедуры

Процедура СоздатьИсходящиеУведомленияОбЭкспортеЕАЭС(Знач МассивДокументов, Знач УстанавливатьПодпись, Знач ТипПодписи, АдресКоллекцииУведомленийXML, КоллекцияSignedContentXML) Экспорт
	
	КоллекцияУведомленийXML = Неопределено;
	ИнтерфейсИСМПТК.СоздатьИсходящиеУведомленияОбЭкспортеЕАЭС(МассивДокументов, УстанавливатьПодпись, ТипПодписи, КоллекцияУведомленийXML, КоллекцияSignedContentXML);
	
	АдресКоллекцииУведомленийXML = ПоместитьВоВременноеХранилище(КоллекцияУведомленийXML, Новый УникальныйИдентификатор);
	
КонецПроцедуры

Процедура СоздатьИсходящиеУведомлениеОПриемкеЕАЭС(Знач МассивДокументов, Знач УстанавливатьПодпись, Знач ТипПодписи, АдресКоллекцииУведомленийXML, КоллекцияSignedContentXML) Экспорт
	
	КоллекцияУведомленийXML = Неопределено;
	ИнтерфейсИСМПТК.СоздатьИсходящиеУведомлениеОПриемкеЕАЭС(МассивДокументов, УстанавливатьПодпись, ТипПодписи, КоллекцияУведомленийXML, КоллекцияSignedContentXML);
	
	АдресКоллекцииУведомленийXML = ПоместитьВоВременноеХранилище(КоллекцияУведомленийXML, Новый УникальныйИдентификатор);
	
КонецПроцедуры

Функция ОтправитьИсходящиеАкты(Знач КоллекцияПодписей, ТокенАвторизации = Неопределено) Экспорт
	
	Результат = ИнтерфейсИСМПТК.ОтправитьИсходящиеАкты(КоллекцияПодписей, ТокенАвторизации);
	
КонецФункции

Функция ОтправитьЗаказНаЭмиссиюКодовМаркировки(МассивСУЗ, СтруктурнаяЕдиница) Экспорт
	
	Отказ = Ложь;
	НастройкаОбменаСУЗ = ИнтерфейсИСМПТК.НастройкиОбменаСУЗ(СтруктурнаяЕдиница);
	
	Если НастройкаОбменаСУЗ = Неопределено
		ИЛИ Не ЗначениеЗаполнено(НастройкаОбменаСУЗ) Тогда
		
		ТекстСообщения = НСтр("ru = 'Для организации ""%1"" не определена настройка взаимодействия с СУЗ.'");
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения,СтруктурнаяЕдиница);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		
	Иначе 
		
		Результат = ЭлектронноеВзаимодействиеССервисамиМаркировка.ОтправитьЗаказНаЭмиссиюКодовМаркировки(МассивСУЗ, НастройкаОбменаСУЗ, Отказ);
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		ТекстСообщения = "Документ отправлен в СУЗ.";
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецФункции

Функция ОтправитьАгрегациюКодовМаркировки(МассивСУЗ, СтруктурнаяЕдиница) Экспорт
	
	Отказ = Ложь;
	НастройкаОбменаСУЗ = ИнтерфейсИСМПТК.НастройкиОбменаСУЗ(СтруктурнаяЕдиница);
	
	Если НастройкаОбменаСУЗ = Неопределено 
		Или Не ЗначениеЗаполнено(НастройкаОбменаСУЗ) Тогда
		
		ТекстСообщения = НСтр("ru = 'Для организации ""%1"" не определена настройка взаимодействия с СУЗ'");
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения,СтруктурнаяЕдиница);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		
	Иначе 
		
		Результат = ЭлектронноеВзаимодействиеССервисамиМаркировка.ОтправитьАгрегациюКодовМаркировки(МассивСУЗ, НастройкаОбменаСУЗ, Отказ);
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		ТекстСообщения = "Документ отправлен в СУЗ.";
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецФункции

Функция ОтправитьНанесениеКодовМаркировки(МассивСУЗ, СтруктурнаяЕдиница) Экспорт
	
	Отказ = Ложь;
	НастройкаОбменаСУЗ = ИнтерфейсИСМПТК.НастройкиОбменаСУЗ(СтруктурнаяЕдиница);
	
	Если НастройкаОбменаСУЗ = Неопределено
		ИЛИ Не ЗначениеЗаполнено(НастройкаОбменаСУЗ) Тогда
		
		ТекстСообщения = НСтр("ru = 'Для организации ""%1"" не определена настройка взаимодействия с СУЗ'");
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения,СтруктурнаяЕдиница);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		
	Иначе 
		
		Результат = ЭлектронноеВзаимодействиеССервисамиМаркировка.ОтправитьНанесениеКодовМаркировки(МассивСУЗ, НастройкаОбменаСУЗ, Отказ);
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		ТекстСообщения = "Документ отправлен в СУЗ.";
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьДокументыИзИСМПТ(Знач Параметры, Знач ДанныеПрофилей, СписокТокеновАвторизации) Экспорт
	
	ИнтерфейсИСМПТК.ОбновитьДокументыИзИСМПТ(Параметры, ДанныеПрофилей, СписокТокеновАвторизации);
	
КонецПроцедуры

Функция ОтправитьЗапросСтатусовЗаказовКМ(МассивСУЗ, СтруктурнаяЕдиница) Экспорт
	
	НастройкаОбменаСУЗ = ИнтерфейсИСМПТК.НастройкиОбменаСУЗ(СтруктурнаяЕдиница);
	
	Если НастройкаОбменаСУЗ = Неопределено
		ИЛИ Не ЗначениеЗаполнено(НастройкаОбменаСУЗ) Тогда
		
		ТекстСообщения = НСтр("ru = 'Для организации ""%1"" не определена настройка взаимодействия с СУЗ'");
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения,СтруктурнаяЕдиница);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	Иначе 
		
		ОтветСервера = ИнтерфейсИСМПТК.ПолучитьСтатусЗаказаЭмиссииКМ(НастройкаОбменаСУЗ, Перечисления.ВидыПродукцииИСМПТК.Обувная);
		
		Если Не ЗначениеЗаполнено(ОтветСервера.ТекстОшибки) Тогда
			
			ТЗСтатусыДокументовЗаявок = СоответствиеСтатусовКодовМаркировкиВТЗ(ОтветСервера.ДанныеОСтатусах);
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	СтатусыДокументовЗаявок.orderId КАК orderId,
			|	СтатусыДокументовЗаявок.orderStatus КАК orderStatus
			|ПОМЕСТИТЬ СтатусыДокументов
			|ИЗ
			|	&СтатусыДокументовЗаявок КАК СтатусыДокументовЗаявок
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Ссылка КАК Ссылка,
			|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.OrderID КАК OrderID,
			|	ЕСТЬNULL(СтатусыДокументов.orderStatus, ""CLOSED"") КАК orderStatus
			|ИЗ
			|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗ
			|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыДокументов КАК СтатусыДокументов
			|		ПО ЗаказНаЭмиссиюКодовМаркировкиСУЗ.OrderID = СтатусыДокументов.orderId
			|ГДЕ
			|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Ссылка В(&МассивДокументов)
			|	И НЕ ЗаказНаЭмиссиюКодовМаркировкиСУЗ.OrderID = &ПустаяСтрока";
			
			Запрос.УстановитьПараметр("МассивДокументов", МассивСУЗ);
			Запрос.УстановитьПараметр("СтатусыДокументовЗаявок", ТЗСтатусыДокументовЗаявок);
			Запрос.УстановитьПараметр("ПустаяСтрока", "");
			
			Результат = Запрос.Выполнить();
			
			Если Не Результат.Пустой() Тогда 
				Выборка = Результат.Выбрать();
				Пока Выборка.Следующий() Цикл 
					СтатусЗаказа 			= ИнтерфейсИСМПТК.СтатусБизнесЗаказа(Выборка.orderStatus);
					ДокументОбъект 			= Выборка.Ссылка.ПолучитьОбъект();
					ДокументОбъект.Статус 	= СтатусЗаказа;
					Попытка
						ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					Исключение
						ТекстСообщения = НСтр("ru = 'При записи документа ""%1"" произошла ошибка и документу не был присвоен изменённый статус ""%2""'");
						ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения,
						ДокументОбъект,
						СтатусЗаказа);
						
						ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
						
					КонецПопытки;
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ОтветСервера.ТекстОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ОтправитьЗапросПричинОтказаЗаказовКМ(МассивСУЗ, СтруктурнаяЕдиница) Экспорт
	
	НастройкаОбменаСУЗ = ИнтерфейсИСМПТК.НастройкиОбменаСУЗ(СтруктурнаяЕдиница);
	
	Если НастройкаОбменаСУЗ = Неопределено
		ИЛИ Не ЗначениеЗаполнено(НастройкаОбменаСУЗ) Тогда
		
		ТекстСообщения = НСтр("ru = 'Для организации ""%1"" не определена настройка взаимодействия с СУЗ'");
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения,СтруктурнаяЕдиница);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗаказКодовМаркировкиСУЗИСМПТКТовары.Ссылка КАК Ссылка,
		|	ЗаказКодовМаркировкиСУЗИСМПТКТовары.Ссылка.OrderID КАК OrderID,
		|	ЗаказКодовМаркировкиСУЗИСМПТКТовары.Ссылка.Статус КАК Статус,
		|	ЗаказКодовМаркировкиСУЗИСМПТКТовары.GTIN КАК GTIN,
		|	ЗаказКодовМаркировкиСУЗИСМПТКТовары.Ссылка.ВидПродукции КАК ВидПродукции
		|ИЗ
		|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК.Товары КАК ЗаказКодовМаркировкиСУЗИСМПТКТовары
		|ГДЕ
		|	ЗаказКодовМаркировкиСУЗИСМПТКТовары.Ссылка В(&МассивДокументов)
		|	И ЗаказКодовМаркировкиСУЗИСМПТКТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.НеПодтвержденИСМП)
		|ИТОГИ
		|	МАКСИМУМ(OrderID),
		|	МАКСИМУМ(Статус),
		|	МАКСИМУМ(GTIN),
		|	МАКСИМУМ(ВидПродукции)
		|ПО
		|	Ссылка";
		
		Запрос.УстановитьПараметр("МассивДокументов", МассивСУЗ);
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда 
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка.Следующий() Цикл
				
				ОтветСервера = ИнтерфейсИСМПТК.ПолучитьПричинуОтказаЗаказаЭмиссииКМ(НастройкаОбменаСУЗ, Выборка.ВидПродукции, Выборка);
				
				Если Не ЗначениеЗаполнено(ОтветСервера.ТекстОшибки) Тогда
					
					Попытка
						ПричинаОтказа = ОтветСервера.ДанныеОСтатусах.Получить("rejectionReason");
						ДокументОбъект 								= Выборка.Ссылка.ПолучитьОбъект();
						ДокументОбъект.ПричинаОтклонения 			= ПричинаОтказа;
						ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					Исключение
						
						ТекстСообщения = НСтр("ru = 'При записи документа ""%1"" произошла ошибка и для документа не была присвоена причина отказа'");
						ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения,
						ДокументОбъект);
						
						ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
						
					КонецПопытки;
					
				Иначе
					
					ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ОтветСервера.ТекстОшибки);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ОтправитьЗапросКМПоЗаказуНаЭмиссию(МассивСУЗ, СтруктурнаяЕдиница, РазмерБлокаКодов = 0, МассивКодовЗаказа = Неопределено) Экспорт
	
	НастройкаОбменаСУЗ = ИнтерфейсИСМПТК.НастройкиОбменаСУЗ(СтруктурнаяЕдиница);
	НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();  
	
	Отказ = Ложь;
	
	Если НастройкаОбменаСУЗ = Неопределено
		ИЛИ Не ЗначениеЗаполнено(НастройкаОбменаСУЗ) Тогда
		
		ТекстСообщения = НСтр("ru = 'Для организации ""%1"" не определена настройка взаимодействия с СУЗ'");
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения,СтруктурнаяЕдиница);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		
	Иначе 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПулКодовМаркировкиСУЗИСМПТК.ЗаказНаЭмиссию КАК ЗаказНаЭмиссию,
		|	ПулКодовМаркировкиСУЗИСМПТК.GTIN КАК GTIN,
		|	КОЛИЧЕСТВО(ПулКодовМаркировкиСУЗИСМПТК.КодМаркировки) КАК КоличествоКодов
		|ПОМЕСТИТЬ КоличествоПолученныхКодов
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗИСМПТК КАК ПулКодовМаркировкиСУЗИСМПТК
		|ГДЕ
		|	ПулКодовМаркировкиСУЗИСМПТК.ЗаказНаЭмиссию В(&МассивДокументов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПулКодовМаркировкиСУЗИСМПТК.ЗаказНаЭмиссию,
		|	ПулКодовМаркировкиСУЗИСМПТК.GTIN
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.Ссылка КАК Ссылка,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.Организация КАК Организация,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.ВидПродукции КАК ВидПродукции,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.OrderID КАК OrderID,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN КАК GTIN,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Шаблон КАК Шаблон,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Количество КАК КоличествоВЗаказе,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Номенклатура КАК Номенклатура,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Характеристика КАК Характеристика,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.СпособВводаВОборот КАК СпособВводаВОборот,
		|	&РазмерБлокаКодов КАК РазмерБлокаКодов,
		|	ВЫБОР
		|		КОГДА &РазмерБлокаКодов = 0
		|			ТОГДА ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Количество
		|		ИНАЧЕ ВЫБОР
		|				КОГДА &РазмерБлокаКодов <= ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Количество - ЕСТЬNULL(КоличествоПолученныхКодов.КоличествоКодов, 0)
		|					ТОГДА &РазмерБлокаКодов
		|				ИНАЧЕ ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Количество - ЕСТЬNULL(КоличествоПолученныхКодов.КоличествоКодов, 0)
		|			КОНЕЦ
		|	КОНЕЦ КАК Количество,
		|	ЕСТЬNULL(КоличествоПолученныхКодов.КоличествоКодов, 0) КАК КоличествоПолученныхКодов,
		|	ЕСТЬNULL(СтатусыЗаказовИСМПТК.Идентификатор, """") КАК ИдентификаторПоследнегоБлока
		|ИЗ
		|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК.Товары КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоПолученныхКодов КАК КоличествоПолученныхКодов
		|		ПО ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка = КоличествоПолученныхКодов.ЗаказНаЭмиссию
		|			И ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN = КоличествоПолученныхКодов.GTIN
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаказовИСМПТК КАК СтатусыЗаказовИСМПТК
		|		ПО ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка = СтатусыЗаказовИСМПТК.Заказ
		|			И ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN = СтатусыЗаказовИСМПТК.GTIN
		|ГДЕ
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка В(&МассивДокументов)
		|	И ВЫБОР
		|			КОГДА &РазмерБлокаКодов = 0
		|				ТОГДА ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Количество
		|			ИНАЧЕ ВЫБОР
		|					КОГДА &РазмерБлокаКодов <= ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Количество - ЕСТЬNULL(КоличествоПолученныхКодов.КоличествоКодов, 0)
		|						ТОГДА &РазмерБлокаКодов
		|					ИНАЧЕ ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Количество - ЕСТЬNULL(КоличествоПолученныхКодов.КоличествоКодов, 0)
		|				КОНЕЦ
		|		КОНЕЦ > 0
		|	%ОтборПоGTIN";
		
		
		ТекстКоличество = ?(РазмерБлокаКодов = 0, "ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Количество КАК Количество", "&РазмерБлокаКодов КАК Количество");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Количество", ТекстКоличество);
		
		Запрос.УстановитьПараметр("МассивДокументов", МассивСУЗ);
		Запрос.УстановитьПараметр("РазмерБлокаКодов", РазмерБлокаКодов);
		Если Не МассивКодовЗаказа = Неопределено Тогда 
			Запрос.УстановитьПараметр("МассивКодовЗаказа", МассивКодовЗаказа);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоGTIN", "И ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN В(&МассивКодовЗаказа)");
		Иначе 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоGTIN", "");
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда 
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ОтветСервера = ИнтерфейсИСМПТК.ПолучитьКМПоЗаказуНаЭмиссию(НастройкаОбменаСУЗ, Выборка.ВидПродукции,
				Выборка.OrderID, Выборка.GTIN, Выборка.Количество, Выборка.ИдентификаторПоследнегоБлока);
				
				Если Не ЗначениеЗаполнено(ОтветСервера.ТекстОшибки) Тогда
					
					СтруктураОтвета = ОтветСервера.ДанныеОКМ;
					
					blockId 	= СтруктураОтвета["blockId"];
					МассивКМ 	= СтруктураОтвета["codes"];
					
					УстановитьСтатусПолученияКМПоЗаказу(Выборка.Ссылка, Выборка.GTIN, 
						Перечисления.СтатусыПодзаказовКодовМаркировкиСУЗИСМПТК.Запрошен, blockId);
					
					НаборЗаписейПулКодовМаркировкиСУЗ = РегистрыСведений.ПулКодовМаркировкиСУЗИСМПТК.СоздатьНаборЗаписей();
					НаборЗаписейПулКодовМаркировкиСУЗ.Отбор.ЗаказНаЭмиссию.Установить(Выборка.Ссылка, Истина);
					
					Для Каждого КМ Из МассивКМ Цикл
						
						ДанныеРазбора 	= РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(КМ, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
						ЗаписьНабора 	= НаборЗаписейПулКодовМаркировкиСУЗ.Добавить();
						КодМаркировкиСтрока = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.УбратьСкобкиУИдентификатораПрименения_Обувь(ДанныеРазбора.НормализованныйКодМаркировки);
						ПолныйКодМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.УбратьСкобкиУИдентификатораПрименения_Обувь(ДанныеРазбора.КодМаркировки);
						КодМаркировкиBase64  	  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.СтрокуВBase64(КодМаркировкиСтрока);
						ПолныйКодМаркировкиBase64 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.СтрокуВBase64(КМ);
													
						// Измерения
						ЗаписьНабора.ЗаказНаЭмиссию 	 = Выборка.Ссылка;
						ЗаписьНабора.КодМаркировки 	 	 = ДанныеРазбора.НормализованныйКодМаркировки; 
						ЗаписьНабора.ХешСуммаКодаМаркировки = ИнтеграцияИСМПТК.ХешированиеДанныхSHA256(ДанныеРазбора.НормализованныйКодМаркировки);
						
						// Ресурсы
						Если Выборка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") Тогда
							ЗаписьНабора.Статус          = Перечисления.СтатусыКодовМаркировкиСУЗИСМПТК.Сгенерирован;
						Иначе
							ЗаписьНабора.Статус          = Перечисления.СтатусыКодовМаркировкиСУЗИСМПТК.СгенерированНеНанесен;
						КонецЕсли;
						
						//Реквизиты
						ЗаписьНабора.Организация 		 = Выборка.Организация;
						ЗаписьНабора.ТипШтрихкода  		 = ДанныеРазбора.ТипШтрихкода;
						ЗаписьНабора.ВидПродукции  		 = ?(ДанныеРазбора.ВидыПродукции.Количество() > 0, ДанныеРазбора.ВидыПродукции[0], Неопределено);
						ЗаписьНабора.Номенклатура  		 = Выборка.Номенклатура;
						ЗаписьНабора.Характеристика  	 = Выборка.Характеристика;
						ЗаписьНабора.GTIN  				 = Выборка.GTIN;
						ЗаписьНабора.СпособВводаВОборот	 = Выборка.СпособВводаВОборот;
						//БМ_ИСМПТ ТРЕБУЕТСЯ_РАССМОТРЕНИЕ Преобразование КМ - убираем скобки у групп
						ЗаписьНабора.ПолныйКодМаркировки = ПолныйКодМаркировкиBase64;
						ЗаписьНабора.Шаблон				 = Выборка.Шаблон;
						ЗаписьНабора.СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
						ЗаписьНабора.ДатаЭмиссииУниверсальная = ТекущаяДатаСеанса();
												
					КонецЦикла;
					
					НаборЗаписейПулКодовМаркировкиСУЗ.Записать(Ложь);
					
					Если (Выборка.Количество + Выборка.КоличествоПолученныхКодов) = Выборка.КоличествоВЗаказе Тогда
						
						//По данному GTIN получили все коды, можно закрыть строку заказа
						ОтветСервераЗакрытие = ИнтерфейсИСМПТК.ЗакрытьПодзаказПоGTIN(НастройкаОбменаСУЗ, Выборка.ВидПродукции,
						Выборка.OrderID, Выборка.GTIN, blockId);
						
						Если ЗначениеЗаполнено(ОтветСервераЗакрытие.ТекстОшибки) Тогда
							//Прерываться если закрыть не удалось не будем коды всё равно получили
							//просто сообщим об ошибке
							ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ОтветСервераЗакрытие.ТекстОшибки,,,,Отказ);
						КонецЕсли;
						
						СтатусПолученныхКодов = Перечисления.СтатусыПодзаказовКодовМаркировкиСУЗИСМПТК.Получен;
						
					Иначе
						
						СтатусПолученныхКодов = Перечисления.СтатусыПодзаказовКодовМаркировкиСУЗИСМПТК.ПолученЧастично;
						
					КонецЕсли;
					
					УстановитьСтатусПолученияКМПоЗаказу(Выборка.Ссылка, Выборка.GTIN, СтатусПолученныхКодов, blockId);
					
				Иначе
					
					//Полный текст ошибки формируем в журнале
					ЗаписьЖурналаРегистрации(НСтр("ru = 'ИнтеграцияИСМПТКВызовСервера.ОтправитьЗапросКМПоЗаказуНаЭмиссию'"), 
							УровеньЖурналаРегистрации.Ошибка,,,	ОтветСервера.ТекстОшибки);
							
					//Краткий текст ошибки выводим пользователю
					ТекстОшибкиКраткий = НСтр("ru = 'При отправке запроса возникла ошибка. '") + ОтветСервера.РезультатОтправкиЗапроса.ТекстОшибки;
					ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибкиКраткий,,,,Отказ);
					
					//Формируем для пользователя более информативное сообщение
					Если ОтветСервера.РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
						//Все коды уже получены 
						ТекстСообщенияОшибка = НСтр("ru = 'В буфере обмена СУЗ не содержится кодов маркировки по данному Заказу. Обновите статус документа.'");
					ИначеЕсли ОтветСервера.РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
						//Коды еще не помещены в буфер 
						ТекстСообщенияОшибка = НСтр("ru = 'Коды по Заказу не найдены. Возможно, сервер СУЗ еще обрабатывает данные для помещения в буфер обмена - повторите получение позднее. Или коды уже были получены ранее - обновите статус Заказа.'");
					КонецЕсли;
					ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияОшибка);

				КонецЕсли;
			
			 КонецЦикла;
			
		Иначе
			
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю("Нет кодов для получения.",,,,Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		ТекстСообщения = "Коды маркировки успешно получены.";
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтатусGTINПоЗаказуНаЭмиссию(ЗаказКодов, GTIN) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Организация КАК СтруктурнаяЕдиница,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ВидПродукции КАК ВидПродукции,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.OrderID КАК OrderID
	|ИЗ
	|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК КАК ЗаказКодовМаркировкиСУЗИСМПТК
	|ГДЕ
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЗаказКодов);
	
	Результат = Запрос.Выполнить();
		
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НастройкаОбменаСУЗ = ИнтерфейсИСМПТК.НастройкиОбменаСУЗ(Выборка.СтруктурнаяЕдиница);
		НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();   
		
		Отказ = Ложь;
		
		Если НастройкаОбменаСУЗ = Неопределено
		ИЛИ Не ЗначениеЗаполнено(НастройкаОбменаСУЗ) Тогда
			
			ТекстСообщения = НСтр("ru = 'Для организации ""%1"" не определена настройка взаимодействия с СУЗ'");
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.СтруктурнаяЕдиница);
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			
		Иначе 
		
			ОтветСервера = ИнтерфейсИСМПТК.ПолучитьСтатусGTINПоЗаказуНаЭмиссию(НастройкаОбменаСУЗ, Выборка.ВидПродукции, Выборка.OrderID, GTIN);
				
				Если Не ЗначениеЗаполнено(ОтветСервера.ТекстОшибки) Тогда
					
					СтруктураОтвета = ОтветСервера.ДанныеОКМ;
					blocks 	= СтруктураОтвета["blocks"];
					Если blocks = Неопределено Тогда 
						Возврат Неопределено;
					Иначе
						Возврат СтруктураОтвета["blocks"][0];
					КонецЕсли;
					
				Иначе
					
					ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ОтветСервера.ТекстОшибки,,,,Отказ);
						
				КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Процедура УстановитьСтатусПолученияКМПоЗаказу(Заказ, GTIN, Статус, ИдентификаторБлока)
	
	МенеджерРН = РегистрыСведений.СтатусыЗаказовИСМПТК.СоздатьМенеджерЗаписи();
	МенеджерРН.Заказ			= Заказ;
	МенеджерРН.GTIN				= GTIN;
	
	МенеджерРН.Прочитать();
	
	МенеджерРН.Заказ			= Заказ;
	МенеджерРН.GTIN				= GTIN;
	МенеджерРН.Статус			= Статус;
	МенеджерРН.Идентификатор	= ИдентификаторБлока;
	
	МенеджерРН.Записать();
	
КонецПроцедуры

Функция ОтправитьПовторныйЗапросКМПоЗаказуНаЭмиссию(МассивСУЗ, СтруктурнаяЕдиница) Экспорт
	
	НастройкаОбменаСУЗ = ИнтерфейсИСМПТК.НастройкиОбменаСУЗ(СтруктурнаяЕдиница);
	НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();    
	
	Отказ = Ложь;
	
	Если НастройкаОбменаСУЗ = Неопределено
		ИЛИ Не ЗначениеЗаполнено(НастройкаОбменаСУЗ) Тогда
		
		ТекстСообщения = НСтр("ru = 'Для организации ""%1"" не определена настройка взаимодействия с СУЗ'");
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения,СтруктурнаяЕдиница);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		
	Иначе 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.Ссылка КАК Ссылка,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.Организация КАК Организация,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.ВидПродукции КАК ВидПродукции,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.OrderID КАК OrderID,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN КАК GTIN,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Шаблон КАК Шаблон,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Количество КАК Количество,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Номенклатура КАК Номенклатура,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Характеристика КАК Характеристика,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.СпособВводаВОборот КАК СпособВводаВОборот,
		|	СтатусыЗаказовИСМПТ.Статус КАК Статус,
		|	СтатусыЗаказовИСМПТ.Идентификатор КАК Идентификатор
		|ИЗ
		|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК.Товары КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаказовИСМПТК КАК СтатусыЗаказовИСМПТ
		|		ПО ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка = СтатусыЗаказовИСМПТ.Заказ
		|			И ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN = СтатусыЗаказовИСМПТ.GTIN
		|ГДЕ
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка В(&МассивДокументов)
		|	И СтатусыЗаказовИСМПТ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПодзаказовКодовМаркировкиСУЗИСМПТК.Запрошен)";
		
		Запрос.УстановитьПараметр("МассивДокументов", МассивСУЗ);
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда 
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ОтветСервера = ИнтерфейсИСМПТК.ПовторноПолучитьКМПоЗаказуНаЭмиссию(НастройкаОбменаСУЗ, Выборка.ВидПродукции,
				Выборка.OrderID, Выборка.GTIN, Выборка.Идентификатор, Выборка.Количество);
				
				Если Не ЗначениеЗаполнено(ОтветСервера.ТекстОшибки) Тогда
					
					СтруктураОтвета = ОтветСервера.ДанныеОКМ;
					
					blockId 	= СтруктураОтвета["blockId"];
					МассивКМ 	= СтруктураОтвета["codes"];
					
					НаборЗаписейПулКодовМаркировкиСУЗ = РегистрыСведений.ПулКодовМаркировкиСУЗИСМПТК.СоздатьНаборЗаписей();
					НаборЗаписейПулКодовМаркировкиСУЗ.Отбор.ЗаказНаЭмиссию.Установить(Выборка.Ссылка, Истина);
					
					Для Каждого КМ Из МассивКМ Цикл
						
						ДанныеРазбора 	= РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(КМ, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
						ЗаписьНабора 	= НаборЗаписейПулКодовМаркировкиСУЗ.Добавить();
						КодМаркировкиСтрока = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.УбратьСкобкиУИдентификатораПрименения_Обувь(ДанныеРазбора.НормализованныйКодМаркировки);
						ПолныйКодМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.УбратьСкобкиУИдентификатораПрименения_Обувь(ДанныеРазбора.КодМаркировки);
						КодМаркировкиBase64  	  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.СтрокуВBase64(КодМаркировкиСтрока);
						ПолныйКодМаркировкиBase64 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.СтрокуВBase64(КМ);
												
						// Измерения
						ЗаписьНабора.ЗаказНаЭмиссию 	 = Выборка.Ссылка;
						ЗаписьНабора.КодМаркировки 	 	 = ДанныеРазбора.НормализованныйКодМаркировки;
						ЗаписьНабора.ХешСуммаКодаМаркировки = ИнтеграцияИСМПТК.ХешированиеДанныхSHA256(ДанныеРазбора.НормализованныйКодМаркировки);
						
						// Ресурсы
						Если Выборка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") Тогда
							ЗаписьНабора.Статус          = Перечисления.СтатусыКодовМаркировкиСУЗИСМПТК.Сгенерирован;
						Иначе
							ЗаписьНабора.Статус          = Перечисления.СтатусыКодовМаркировкиСУЗИСМПТК.СгенерированНеНанесен;
						КонецЕсли;
						
						//Реквизиты
						ЗаписьНабора.Организация 		 = Выборка.Организация;
						ЗаписьНабора.ТипШтрихкода  		 = ДанныеРазбора.ТипШтрихкода;
						ЗаписьНабора.ВидПродукции  		 = ?(ДанныеРазбора.ВидыПродукции.Количество() > 0, ДанныеРазбора.ВидыПродукции[0], Неопределено);
						ЗаписьНабора.Номенклатура  		 = Выборка.Номенклатура;
						ЗаписьНабора.Характеристика  	 = Выборка.Характеристика;
						ЗаписьНабора.GTIN  				 = Выборка.GTIN;
						ЗаписьНабора.СпособВводаВОборот	 = Выборка.СпособВводаВОборот;
						//БМ_ИСМПТ ТРЕБУЕТСЯ_РАССМОТРЕНИЕ Преобразование КМ - убираем скобки у групп
						ЗаписьНабора.ПолныйКодМаркировки = ПолныйКодМаркировкиBase64;
						ЗаписьНабора.Шаблон				 = Выборка.Шаблон;
						ЗаписьНабора.СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
						ЗаписьНабора.ДатаЭмиссииУниверсальная = ТекущаяДатаСеанса();
					
					КонецЦикла;
					
					НаборЗаписейПулКодовМаркировкиСУЗ.Записать(Ложь);
					
					//По данному GTIN получили все коды, можно закрыть строку заказа
					ОтветСервераЗакрытие = ИнтерфейсИСМПТК.ЗакрытьПодзаказПоGTIN(НастройкаОбменаСУЗ, Выборка.ВидПродукции,
					Выборка.OrderID, Выборка.GTIN, blockId);
					
					Если ЗначениеЗаполнено(ОтветСервераЗакрытие.ТекстОшибки) Тогда
						//Прерываться если закрыть не удалось не будем коды всё равно получили
						//просто сообщим об ошибке
						ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ОтветСервераЗакрытие.ТекстОшибки,,,,Отказ);
					КонецЕсли;
					
					УстановитьСтатусПолученияКМПоЗаказу(Выборка.Ссылка, Выборка.GTIN, 
						Перечисления.СтатусыПодзаказовКодовМаркировкиСУЗИСМПТК.Получен, blockId);
					
				Иначе
					
					ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ОтветСервера.ТекстОшибки,,,,Отказ);
						
				КонецЕсли;
			
			 КонецЦикла;
			
		Иначе
			
			ТекстОшибки = НСтр("ru='По заказу не обнаружено ошибок получения кодов маркировки'");
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки,,,,Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		ТекстСообщения = "Коды маркировки успешно получены.";
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецФункции

Функция СоответствиеСтатусовКодовМаркировкиВТЗ(СтруктураСтатусов) Экспорт
	
	МассивСтатусов = СтруктураСтатусов["orderInfos"];
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("orderId", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТЗ.Колонки.Добавить("orderStatus", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	
	Для Каждого СоответствиеСтатуса Из МассивСтатусов Цикл 
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.orderId 		= СоответствиеСтатуса["orderId"];
		НоваяСтрока.orderStatus 	= СоответствиеСтатуса["orderStatus"];
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

Функция ОтправитьЗапросСтатусовАгрегацииКМ(МассивСУЗ, СтруктурнаяЕдиница) Экспорт
	
	НастройкаОбменаСУЗ = ИнтерфейсИСМПТК.НастройкиОбменаСУЗ(СтруктурнаяЕдиница);
	
	Если НастройкаОбменаСУЗ = Неопределено
		ИЛИ Не ЗначениеЗаполнено(НастройкаОбменаСУЗ) Тогда
		
		ТекстСообщения = НСтр("ru = 'Для организации ""%1"" не определена настройка взаимодействия с СУЗ'");
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения,СтруктурнаяЕдиница);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	АгрегацияКодовМаркировкиСУЗ.Ссылка КАК Ссылка,
		|	АгрегацияКодовМаркировкиСУЗ.ВидПродукции КАК ВидПродукции,
		|	АгрегацияКодовМаркировкиСУЗ.OrderID КАК OrderID,
		|	АгрегацияКодовМаркировкиСУЗ.Статус КАК Статус
		|ИЗ
		|	Документ.АгрегацияКодовМаркировкиСУЗИСМПТК КАК АгрегацияКодовМаркировкиСУЗ
		|ГДЕ
		|	АгрегацияКодовМаркировкиСУЗ.Ссылка В(&МассивДокументов)
		|	И НЕ АгрегацияКодовМаркировкиСУЗ.OrderID = &ПустаяСтрока";
		
		Запрос.УстановитьПараметр("МассивДокументов", МассивСУЗ);
		Запрос.УстановитьПараметр("ПустаяСтрока", "");
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда 
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ОтветСервера = ИнтерфейсИСМПТК.ПолучитьСтатусАгрегацииКМ(НастройкаОбменаСУЗ, Выборка.ВидПродукции, Выборка.OrderID);
				
				Если Не ЗначениеЗаполнено(ОтветСервера.ТекстОшибки) Тогда
					
					СтатусОтчета = ИнтерфейсИСМПТК.СтатусОбработкиОтчета(ОтветСервера.ДанныеОСтатусах["reportStatus"]);
					
					Если Не Выборка.Статус = СтатусОтчета Тогда
						
						ДокументОбъект 		  = Выборка.Ссылка.ПолучитьОбъект();
						ДокументОбъект.Статус = СтатусОтчета;
						
						Попытка
							
							ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
							
						Исключение
							
							ТекстСообщения = НСтр("ru = 'При записи документа ""%1"" произошла ошибка и документу не был присвоен изменённый статус ""%2""'");
							ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект, СтатусОтчета);
							ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
							
						КонецПопытки;
					КонецЕсли;
					
				Иначе
					
					ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ОтветСервера.ТекстОшибки);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ОтправитьЗапросСтатусовНанесенияКМ(МассивСУЗ, СтруктурнаяЕдиница) Экспорт
	
	НастройкаОбменаСУЗ = ИнтерфейсИСМПТК.НастройкиОбменаСУЗ(СтруктурнаяЕдиница);
	
	Если НастройкаОбменаСУЗ = Неопределено
		ИЛИ Не ЗначениеЗаполнено(НастройкаОбменаСУЗ) Тогда
		
		ТекстСообщения = НСтр("ru = 'Для организации ""%1"" не определена настройка взаимодействия с СУЗ'");
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктурнаяЕдиница);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	НанесениеКодовМаркировкиСУЗИСМПТК.Ссылка КАК Ссылка,
		|	НанесениеКодовМаркировкиСУЗИСМПТК.ВидПродукции КАК ВидПродукции,
		|	НанесениеКодовМаркировкиСУЗИСМПТК.OrderID КАК OrderID,
		|	НанесениеКодовМаркировкиСУЗИСМПТК.ДокументОснование КАК ДокументОснование,
		|	НанесениеКодовМаркировкиСУЗИСМПТК.Статус КАК Статус
		|ИЗ
		|	Документ.НанесениеКодовМаркировкиСУЗИСМПТК КАК НанесениеКодовМаркировкиСУЗИСМПТК
		|ГДЕ
		|	НанесениеКодовМаркировкиСУЗИСМПТК.Ссылка В(&МассивДокументов)
		|	И НЕ НанесениеКодовМаркировкиСУЗИСМПТК.OrderID = &ПустаяСтрока";
		
		Запрос.УстановитьПараметр("МассивДокументов", МассивСУЗ);
		Запрос.УстановитьПараметр("ПустаяСтрока", "");
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда 
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ОтветСервера = ИнтерфейсИСМПТК.ПолучитьСтатусНанесенияКМ(НастройкаОбменаСУЗ, Выборка.ВидПродукции, Выборка.OrderID);
				
				Если Не ЗначениеЗаполнено(ОтветСервера.ТекстОшибки) Тогда
					
					СтатусОтчета = ИнтерфейсИСМПТК.СтатусОбработкиОтчета(ОтветСервера.ДанныеОСтатусах["reportStatus"]);
					
					Если Не Выборка.Статус = СтатусОтчета Тогда
						
						ДокументОбъект 		  = Выборка.Ссылка.ПолучитьОбъект();
						ДокументОбъект.Статус = СтатусОтчета;
												
						Попытка
							
							ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
							
							//Если новый Статус - Отправлен, необходимо изменить статусы кодов в регистре
							Если СтатусОтчета = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОтчетовСУЗИСМПТК.Отправлен") Тогда
								
								ТаблицаКМВНанесении   = ДокументОбъект.Товары.Выгрузить();
								ТаблицаКМДляСравнения = ТаблицаКМВНанесении.Скопировать(, "КодМаркировки");
								
								МассивЗаказов = Новый Массив();
								МассивЗаказов.Добавить(Выборка.ДокументОснование.Ссылка);
								СписокКодов = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировкиНанесение(МассивЗаказов, ТаблицаКМДляСравнения);
								
								Если СписокКодов = Неопределено Тогда
									ТекстСообщения = НСтр("ru = 'Не удалось определить требующие смены статуса коды маркировки в Пуле кодов.'");
									ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект, СтатусОтчета);
									ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
								КонецЕсли;
								
								Для Каждого СтрокаКод Из СписокКодов Цикл
									
									МенеджерЗаписиРС = РегистрыСведений.ПулКодовМаркировкиСУЗИСМПТК.СоздатьМенеджерЗаписи();
									ЗаполнитьЗначенияСвойств(МенеджерЗаписиРС, СтрокаКод);
									
									МенеджерЗаписиРС.Статус = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиСУЗИСМПТК.Сгенерирован");
									МенеджерЗаписиРС.Записать(Истина);
									
								КонецЦикла;								
								
							КонецЕсли;
							
						Исключение
							
							ТекстСообщения = НСтр("ru = 'При записи документа ""%1"" произошла ошибка и документу не был присвоен изменённый статус ""%2""'");
							ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект, СтатусОтчета);
							ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
							
						КонецПопытки;
					КонецЕсли;
					
				Иначе
					
					ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ОтветСервера.ТекстОшибки);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ПодтвердитьВходящиеДокументыИСМПТ_СозданиеТитулов(Знач КоллекцияСгруппированныхДокументовИСМПТ, Знач СписокТокеновАвторизации) Экспорт
	
	Возврат ИнтерфейсИСМПТК.ПодтвердитьВходящиеАкты_СозданиеТитулов(КоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
	
КонецФункции

Процедура ПодтвердитьВходящиеДокументыИСМПТ_ПодписьТитуловЗавершение(Знач КоллекцияСгруппированныхДокументовИСМПТ, Знач СписокТокеновАвторизации) Экспорт
	
	ИнтерфейсИСМПТК.ПодтвердитьВходящиеАкты_ПодписьТитуловЗавершение(КоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
	
КонецПроцедуры

Функция ОтклонитьВходящиеДокументыИСМПТ_СозданиеТитулов(Знач ТипДокумента, Знач КоллекцияСгруппированныхДокументовИСМПТ, Знач СписокТокеновАвторизации) Экспорт
	
	Возврат ИнтерфейсИСМПТК.ОтклонитьВходящиеАкты_СозданиеТитулов(ТипДокумента, КоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
	
КонецФункции

Процедура ОтклонитьВходящиеДокументыИСМПТ_ПодписьТитуловЗавершение(Знач ТипДокументаИСМПТ, Знач НоваяКоллекцияСгруппированныхДокументовИСМПТ, Знач СписокТокеновАвторизации) Экспорт
	
	ИнтерфейсИСМПТК.ОтклонитьВходящиеАкты_ПодписьТитуловЗавершение(ТипДокументаИСМПТ, НоваяКоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
	
КонецПроцедуры

Функция ОтозватьИсходящиеДокументыИСМПТ_СозданиеТитулов(Знач ТипДокумента, Знач КоллекцияСгруппированныхДокументовИСМПТ, Знач СписокТокеновАвторизации) Экспорт
	
	Возврат ИнтерфейсИСМПТК.ОтозватьИсходящиеДокументы_СозданиеТитулов(ТипДокумента, КоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
	
КонецФункции

Процедура ОтозватьИсходящиеДокументыИСМПТ_ПодписьТитуловЗавершение(Знач НоваяКоллекцияСгруппированныхДокументовИСМПТ, Знач СписокТокеновАвторизации) Экспорт
	
	ИнтерфейсИСМПТК.ОтозватьИсходящиеДокументы_ПодписьТитуловЗавершение(НоваяКоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
	//ИнтерфейсИСМПТК.ОтозватьИсходящиеАкты_ПодписьТитуловЗавершение(НоваяКоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
	
КонецПроцедуры

// См. ИнтерфейсИСМПТК.СоздатьИсходящиеАкты()
Процедура СоздатьИсходящиеУведомления(Знач МассивДокументов, Знач УстанавливатьПодпись, Знач ТипПодписи, АдресКоллекцииАктовXML, КоллекцияSignedContentXML) Экспорт
	
	КоллекцияДокументовXML = Неопределено;
	ИнтерфейсИСМПТК.СоздатьИсходящиеУведомления(МассивДокументов, УстанавливатьПодпись, ТипПодписи, КоллекцияДокументовXML, КоллекцияSignedContentXML);
	
	// После того, как переменная АдресКоллекцииАктовXML станет не нужна, 
	// необходимо самостоятельно очистить временное хранилище,
	// иначе значение будет удалено только после перезапуска сервера.
	АдресКоллекцииАктовXML = ПоместитьВоВременноеХранилище(КоллекцияДокументовXML, Новый УникальныйИдентификатор);
	
КонецПроцедуры

Функция ОтправитьИсходящиеУведомления(Знач КоллекцияДанныеКоллекцииАктовXML, Знач КоллекцияПодписей, Знач ТокенАвторизации) Экспорт
	
	Результат = ИнтерфейсИСМПТК.ОтправитьИсходящиеУведомления(КоллекцияДанныеКоллекцииАктовXML, КоллекцияПодписей, ТокенАвторизации);
	
КонецФункции

Функция ОтправитьИсходящиеУведомленияВВО(Знач КоллекцияДанныеКоллекцииАктовXML, Знач КоллекцияПодписей, Знач ТокенАвторизации) Экспорт
	
	Результат = ИнтерфейсИСМПТК.ОтправитьИсходящиеУведомленияВВО(КоллекцияДанныеКоллекцииАктовXML, КоллекцияПодписей, ТокенАвторизации);
	
КонецФункции

Функция ОтправитьИсходящиеУведомленияВИО(Знач КоллекцияДанныеКоллекцииАктовXML, Знач КоллекцияПодписей, Знач ТокенАвторизации) Экспорт
	
	Результат = ИнтерфейсИСМПТК.ОтправитьИсходящиеУведомленияВИО(КоллекцияДанныеКоллекцииАктовXML, КоллекцияПодписей, ТокенАвторизации);
	
КонецФункции

Функция ОтправитьУведомленияОВвозе(Знач КоллекцияДанныеКоллекцииАктовXML, Знач КоллекцияПодписей, Знач ТокенАвторизации) Экспорт
	
	Результат = ИнтерфейсИСМПТК.ОтправитьУведомленияОВвозе(КоллекцияДанныеКоллекцииАктовXML, КоллекцияПодписей, ТокенАвторизации);
	
КонецФункции

Функция ОтправитьУведомленияОВвозеИзТретьихСтран(Знач КоллекцияДанныеКоллекцииАктовXML, Знач КоллекцияПодписей, Знач ТокенАвторизации) Экспорт
	
	Результат = ИнтерфейсИСМПТК.ОтправитьУведомленияОВвозеИзТретьихСтран(КоллекцияДанныеКоллекцииАктовXML, КоллекцияПодписей, ТокенАвторизации);
	
КонецФункции

Функция ОтправитьУведомленияОбЭкспортеЕАЭС(Знач КоллекцияДанныеКоллекцииАктовXML, Знач КоллекцияПодписей, Знач ТокенАвторизации) Экспорт
	
	Результат = ИнтерфейсИСМПТК.ОтправитьУведомленияОбЭкспортеЕАЭС(КоллекцияДанныеКоллекцииАктовXML, КоллекцияПодписей, ТокенАвторизации);
	
КонецФункции

Функция ОтправитьУведомлениеОПриемкеЕАЭС(Знач КоллекцияДанныеКоллекцииАктовXML, Знач КоллекцияПодписей, Знач ТокенАвторизации) Экспорт
	
	Результат = ИнтерфейсИСМПТК.ОтправитьОтправитьУведомлениеОПриемкеЕАЭС(КоллекцияДанныеКоллекцииАктовXML, КоллекцияПодписей, ТокенАвторизации);
	
КонецФункции

Процедура ДополнитьГрупповыеУпаковки(МассивДокументов, СтруктурнаяЕдиница, ТокенАвторизации) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого ДокументСсылка Из МассивДокументов Цикл
			
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			Для каждого СтрокаТовары Из ДокументОбъект.Марки Цикл
				Если СтрокаТовары.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Логистическая 
					ИЛИ СтрокаТовары.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Групповая 
					Тогда
					//получить информацию по коду
					СтруктураЗапрос = Новый Структура("Штрихкод, ВидУпаковки, ВидПродукции, ФорматBase64", СтрокаТовары.КодИдентификации,
						СтрокаТовары.ВидУпаковки, СтрокаТовары.ВидПродукцииИС, СтрокаТовары.ФорматBase64);
					
					ДанныеПоГрупповомуКоду = ИнтерфейсИСМПТК.ЗапроситьДанныеОбАгрегацииКМ(СтруктураЗапрос, СтруктурнаяЕдиница, ТокенАвторизации);
					КоличествоКодов = 0;
					Если ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
						
						ТекстОшибки = НСтр("ru = 'При дополнении информации по групповым кодам произошла ошибка. Информация:'")+ Символы.ПС +
							ДанныеПоГрупповомуКоду.ТекстОшибки;
						
						ЗаписьЖурналаРегистрации(
							НСтр("ru = 'ИнтеграцияИСМПТКВызовСервера.ДополнитьГрупповыеУпаковки'"), 
							УровеньЖурналаРегистрации.Ошибка,,,
							ДанныеПоГрупповомуКоду.ТекстОшибки);
						
						ВызватьИсключение ТекстОшибки;
					Иначе
						КодДляРазбора = Неопределено;
						Для каждого ДанныеПоКоду Из ДанныеПоГрупповомуКоду.ДанныеОбАгрегации Цикл
							КоличествоКодов = ДанныеПоКоду.Значение.Количество();
							Для каждого ВложенныйКод Из ДанныеПоКоду.Значение Цикл
								КодДляРазбора = ВложенныйКод.Ключ;
								Прервать;
							КонецЦикла;
							Если ЗначениеЗаполнено(КодДляРазбора) Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						//разбор кода
						НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();   
						ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(КодДляРазбора, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
						Если ДанныеРазбора <> Неопределено Тогда
							СтрокаТовары.GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN;
							Если КоличествоКодов <> СтрокаТовары.Количество Тогда
								СтрокаТовары.Количество = КоличествоКодов;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ДокументОбъект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ИнтеграцияИСМПТКВызовСервера.ДополнитьГрупповыеУпаковки'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	
КонецПроцедуры

// Заполняет структуру СтруктураКода.
// СтруктураКода (Структура) - структура для заполненеия
// СтруктураКода.GTIN - GTIN вложенной номенклатуры 
// СтруктураКода.Количество - Количество вложенной номенклатуры
//
// ВложенныеКоды (Соответствие) - данные по групповому коду полученные с сервера ИС МПТ
// //=======================
	//Возможные структуры упаковок по АПИ:
	//1) Транспортный SSCC (Групповые КМ (Потребительские КМ)) 
			//- только ТГ Табак - ВложенныеКоды при первом обходе это список групповых КМ
	//2) Транспортный SSCC (Потребительские КМ) 
			//- для любой ТГ - ВложенныеКоды при первом обходе это список потребительских КМ 
	//3) Групповой КМ (Потребительские КМ) 
			//- только ТГ Табак - ВложенныеКоды при первом обходе это список потребительских КМ
	//4) ТранспортныйАльтернативный Code128 (Групповые КМ (Потребительские КМ)) 
			//- только ТГ Табак - ВложенныеКоды при первом обходе это список групповых КМ
	//5) ТранспортныйАльтернативный Code128 (Потребительские КМ) 
			//- только ТГ Табак - ВложенныеКоды при первом обходе это список потребительских КМ
	//6) Транспортный SSCC (ТранспортныеАльтернативные Code128 (Групповые КМ (Потребительские КМ)))
			//- только ТГ Табак - ВложенныеКоды при первом обходе это список транспортных Code128 И групповых КМ
	//7) Транспортный SSCC (ТранспортныеАльтернативные Code128 (Потребительские КМ)) 
			//-  только ТГ Табак - ВложенныеКоды при первом обходе это список транспортных Code128 И потребительских КМ
	//=======================
Процедура ДанныеПоАгрегированномуКоду(ВложенныеКоды, СтруктураКода, КИВерхнегоУровня = Неопределено) Экспорт
	
	НоменклатураЗаполнена = Ложь;
	GTIN = Неопределено;
	GTINВерхнегоУровня = Неопределено;
	EAN  = Неопределено;
	EANВерхнегоУровня = Неопределено;
	Номенклатура   = Неопределено;
	Характеристика = Неопределено;
	ВидПродукции   = Неопределено;

	ДанныеРазбора = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(Новый Структура("Штрихкод, ФорматBase64, Количество", КИВерхнегоУровня, Ложь, 1));
	
	Если Не ДанныеРазбора = Неопределено 
		И Не ТипЗнч(ДанныеРазбора)= Тип("Строка") Тогда
		
		//Заполнеям данные в СтруктураКода по исходному коду верхнего уровня только если он групповой, т.е. имеет свой товарный GTIN,
		//во всех остальных случаях смотрим на его вложенности (ответ сервера на запрос), даже если это код GS128 и в нем тоже есть GTIN. 
		
		Если ДанныеРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда 
			
			СтруктураДанныхКМ = ЗаполнитьОсновнуюСтруктуруДанныхКМ(ДанныеРазбора,, ВложенныеКоды);
			Если ЗначениеЗаполнено(СтруктураДанныхКМ.Номенклатура) Тогда 
				
				Номенклатура   = СтруктураДанныхКМ.Номенклатура;
				Характеристика = СтруктураДанныхКМ.Характеристика;
				ВидПродукции   = СтруктураДанныхКМ.ВидПродукции;
				
				//EAN заполняется по самому верхнему уровню только если определилась номенклатура. В остальных случаях EAN - из кода вложенности.
				EANВерхнегоУровня = СтруктураДанныхКМ.EANВерхнегоУровня;
			 	НоменклатураЗаполнена = Истина;
				
			КонецЕсли;
			
			//GTINВерхнегоУровня заполняем в итоговой СтруктураКода только если исходный код групповой, в остальных случаях оставляем пустым.
			GTINВерхнегоУровня = СтруктураДанныхКМ.GTINВерхнегоУровня; //Заполняется всегда, т.к. он у кода упаковки верхнего уровня есть
			
		КонецЕсли;
		//Всегда берем по верхнему уровню, т.е. по КИВерхнегоУровня, чтобы корректно отразить иконку в дереве КМ в таблице.
		СтруктураКода.ВидУпаковки = ДанныеРазбора.ВидУпаковки;
	Иначе
		//Если не удалось разобрать указаный пользователем код, то по умолчанию - неопознанная коробка
		СтруктураКода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Неопределен");
	КонецЕсли;
	
	//РЕАЛИЗОВАНО ВРЕМЕННОЕ РЕШЕНИЕ, возможен пересмотр, если будет изменено АПИ:
	//У упаковок с 3 уровнями вложенности (варианты 6-7 в схеме в описании этой процедуры) отличается структура ответа сервера при запросе состава.
	//Кратко: все вложенности, независимо от их уровня и подчиненности, у таких упаковок
	//возвращаются одним общим списком в подчинении самому верхнему коду упаковки.
	//То, что возвращается с сервера, разобрать универсальным методом невозможно, т.к. непонятна структура подчинения и нельзя обходить дерево, 
	//поэтому приходится использовать дополнительные проверки и обходные пути для разбора именно такой структуры.
	//Если АПИ будет пересмотрено в будущем, разбор упаковки можно будет упростить.
	ВидУпаковкиОтличаетсяОтПредыдущего = Ложь;
	ВидУпаковкиДляСравнения = Неопределено;
	
	//Сначала перебираем все КМ в ответе сервера и анализируем их вид, т.к. на текущий момент в ответе 
	//по разным видам упаковок табака может быть разная структура подчиненности и ее нужно разбирать разными способами. (См. выше описание временной схемы)
	СоответствиеДанныхКМ = Новый Соответствие();
	Для Каждого ВложенныйКод Из ВложенныеКоды Цикл
		
		Если ТипЗнч(ВложенныйКод) = Тип("Строка") Тогда
			ДанныеДляЗапроса = ВложенныйКод;
		Иначе
			ДанныеДляЗапроса = ВложенныйКод.Ключ;
		КонецЕсли;
		ДанныеКода = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(Новый Структура("Штрихкод, ФорматBase64, Количество", ДанныеДляЗапроса, Ложь, 1));
		
		Если ДанныеКода = Неопределено Или ТипЗнч(ДанныеКода) = Тип("Строка") Тогда
			
			//Если не удалось разобрать полученный код упаковки.			
			ТекстОшибки = НСтр("ru = 'Не удалось разобрать формат кода маркировки %1 при получении данных состава агрегации.'");
			ТекстОшибки = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, ДанныеДляЗапроса);
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
			ИнтеграцияИСМПТК.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
			Продолжить;
			
		Иначе
			
			//Сразу для каждого кода пытаемся определить сведения о номенклутуре и подсчитываем количество вложенных в него потребительских КМ.
			СтруктураДанныхКМ = ЗаполнитьОсновнуюСтруктуруДанныхКМ(ДанныеКода, ВложенныйКод, ВложенныеКоды);
			СоответствиеДанныхКМ.Вставить(ДанныеДляЗапроса, СтруктураДанныхКМ); 
			
			//Заполняем признаки для временной схемы: определяем, одного ли формата коды вложенности в ответе сервера по составу упаковки.
			Если Не ВидУпаковкиДляСравнения = Неопределено
				И НЕ ВидУпаковкиДляСравнения = ДанныеКода.ВидУпаковки Тогда
				ВидУпаковкиОтличаетсяОтПредыдущего = Истина;
			КонецЕсли;
			ВидУпаковкиДляСравнения = ДанныеКода.ВидУпаковки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщееКоличествоПотребительскихПоУпаковке = 0;
					
	//Ветка ВРЕМЕННОЕ РЕШЕНИЕ начало
	Если ВидУпаковкиОтличаетсяОтПредыдущего Тогда
		
		//В структуре ответа сервера в этом случае - все вложенности в одном списке без структуры, 
		//поэтому нельзя сказать какие КМ из списка нужно посчитать.
		//Мы знаем наверняка, что: 
		//1) на одном уровне должны находиться упаковки одного формата: только транспортные, только групповые или только потребительские, 
		//2) в ответе сервера по упаковке макисмальной вложенности могут быть одновременно или коды всех трех видов, или только двух (групповые и потр.),
		//или только одного (потр.), т.е. смешение разных типов вложенных кодов недопускается.
		//3) внутри групповых КМ могут лежать только потребительские коды, внутри транспортных SSCC - или потребительские, или групповые, 
		//или транспортные GS128. Внутри транспортных GS128 - только групповые или потребительские.
		//Во всех случаях нам нужно получить итоговое кол-во вложенностей в потребительских упаковках.
		
		//Единственный вариант, когда  сервер возвращает проблемную структуру ответа - 
		//В данном случае ответ сервера не позволяет нам последовательно спуститься по уровням каждой вложенности до потребительских КМ,
		//а восстановление структуры дерева вложенностей слишком затруднительно.
		//Принимаем решение: такая упаковка будет игнорировать приоритет групповой упаковки пред потребительской в вопросе определения номенклатуры,
		//т.е. итоговые данные для упаковки максимальной вложенности всегда будем выводить по потребительским кодам в ней.
		//При этом на текущем шаге разбора мы уже знаем для каждого кода из ответа сервера его количество в потребит.кодах. 
		//Теперь нужно определить только какого вида самая "большая" упаковка внутри исходного кода
		//и выбрать сумму только по строкам с этим видом упаковки, чтобы не посчитать дважды ее саму в целом и ее вложенности по отдельности.
		
		//Для этого используем простой перебор всего ранее построенного соответствия и считаем суммы по каждому виду упаковок. 
		//Исходя из вышеописанных аксиом методологии агрегаций, определяем приоритет выбора итоговой суммы таким:
		//ОбщаяСуммаТранспортныхАльтернативных > ОбщаяСуммаГрупповых  > ОбщаяСуммаПотребительских.
		
		ОбщаяСуммаПотребительских = 0;
		ОбщаяСуммаГрупповых = 0;
		ОбщаяСуммаТранспортныхАльтернативных = 0; //Code128
		
		Для Каждого РазобранныеДанные Из СоответствиеДанныхКМ Цикл
			
			//РазобранныеДанные - это сведения разбора каждой строки ответа сервера (вложенности). 
			//Значение содержит сведения КМ и номенклатуры для исходного кода вложенности (ключа) из ответа сервера.
			//Повторно разбирать данные и выполнять поиск товарной позиции не нужно.
						
			ВидУпаковкиКода = РазобранныеДанные.Значение.ВидУпаковки;
			КоличествоКода  = РазобранныеДанные.Значение.КоличествоПотр;
			
			Если ВидУпаковкиКода = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда
				
				//Соответствие разобранных данных может содержать потребительские коды только в двух случаях:
				//1) если это первый обход процедуры и исходная структура запрошенной упаковки - простая одноуровневая (любая упаковка(потребительские коды)),
				//2) если это повторный обход процедуры (для определения данных вложенности) - тогда нельзя сказать наверняка про всю структуру упаковки.
				//В любом случае, если дошли до потребительских - определяем данные уже по ним, независимо от их регистрации в базе.
				
				ОбщаяСуммаПотребительских = ОбщаяСуммаПотребительских + КоличествоКода;
				
				Если Не НоменклатураЗаполнена Тогда
					GTIN = РазобранныеДанные.Значение.GTIN;
					EAN  = РазобранныеДанные.Значение.EAN; 
					Номенклатура   = РазобранныеДанные.Значение.Номенклатура;
					Характеристика = РазобранныеДанные.Значение.Характеристика;
					ВидПродукции   = РазобранныеДанные.Значение.ВидПродукции;
					НоменклатураЗаполнена = Истина;
				КонецЕсли;
				
			ИначеЕсли ВидУпаковкиКода = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
				
				//Групповая упаковка не может находиться внутри другой групповой, значит на этом этапе номенклатура еще может быть неопределена
				//(т.к. при первом обходе сначала пытались определить по исходному коду из документа, а в этом случае этот код - транспортный).
				//Поэтому если групповая упаковка опознана - берем данные товара из нее.
				Если ЗначениеЗаполнено(РазобранныеДанные.Значение.Номенклатура)
					И Не НоменклатураЗаполнена Тогда
					
					GTIN = РазобранныеДанные.Значение.GTIN;
					GTINВерхнегоУровня = РазобранныеДанные.Значение.GTINВерхнегоУровня;
					EAN  = РазобранныеДанные.Значение.EAN; 
					EANВерхнегоУровня = РазобранныеДанные.Значение.EANВерхнегоУровня; 
					Номенклатура   = РазобранныеДанные.Значение.Номенклатура;
					Характеристика = РазобранныеДанные.Значение.Характеристика;
					ВидПродукции   = РазобранныеДанные.Значение.ВидПродукции;	
					НоменклатураЗаполнена = Истина;
					
				КонецЕсли;
				
				ОбщаяСуммаГрупповых = ОбщаяСуммаГрупповых + КоличествоКода;
				
			Иначе
				
				//Если вложенность - транспортный код, определить по нему товар нельзя, считаем только количество.
				ОбщаяСуммаТранспортныхАльтернативных = ОбщаяСуммаТранспортныхАльтернативных + КоличествоКода;
				
			КонецЕсли;
			
		КонецЦикла;
		
		///Чтобы не посчитать ничего дважды, общее количество начинаем определять от большего уровня к меньшему в порядке приоритета вложенности, 
		//т.к. в самом верхнем уровне уже рассчитано полное вложенное кол-во.
		Если Не ОбщаяСуммаТранспортныхАльтернативных = 0 Тогда
			ОбщееКоличествоПотребительскихПоУпаковке = ОбщаяСуммаТранспортныхАльтернативных;
		ИначеЕсли Не ОбщаяСуммаГрупповых = 0 Тогда
			ОбщееКоличествоПотребительскихПоУпаковке = ОбщаяСуммаГрупповых;
		Иначе
			ОбщееКоличествоПотребительскихПоУпаковке = ОбщаяСуммаПотребительских;
		КонецЕсли;
		
	//Ветка ВРЕМЕННОЕ РЕШЕНИЕ завершение
	Иначе
		
		//В структуре ответа сервера соблюдена последовательность уровней, поэтому определяем данные в рамках одного этажа дерева - первого уровня ответа сервера.
		//Если не удается определить товар по этому уровню - переходим на уровень ниже.
		Для Каждого РазобранныеДанные Из СоответствиеДанныхКМ Цикл
			
			//Для этого перебираем все строки исходного ответа и суммируем количество по ним.
			//Данные номенклатуры можно определять из любого составляющего ветки дерева, т.к. они равнозначны.
			
			ОбщееКоличествоПотребительскихПоУпаковке = ОбщееКоличествоПотребительскихПоУпаковке + РазобранныеДанные.Значение.КоличествоПотр;
			
			Если Не НоменклатураЗаполнена 
				Или (СтруктураКода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") 
					И НоменклатураЗаполнена) Тогда
				
				//Значит верхний уровень (исходный код из документа) - или транспортная упаковка любого формата, или групповая не зарегистрированная.
				//Поэтому сначала пытаемся получить сведения о товаре по первому уровню ее вложенности.
				
				Если ЗначениеЗаполнено(РазобранныеДанные.Значение.Номенклатура) Тогда
					
					//Т.к. в транспортной могут быть вложенные групповые, проверяем, какой GTIN брать
					Если РазобранныеДанные.Значение.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
						GTINВерхнегоУровня = РазобранныеДанные.Значение.GTINВерхнегоУровня;
						EANВерхнегоУровня  = РазобранныеДанные.Значение.EANВерхнегоУровня; 
						
						Вложенность = ВложенныеКоды[РазобранныеДанные.Ключ][0];
						GTIN = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.GTINИзКодаМаркировки(Вложенность, ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая"));
						EAN  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(GTIN); 
					Иначе
						GTIN = РазобранныеДанные.Значение.GTIN;
						EAN  = РазобранныеДанные.Значение.EAN; 
					КонецЕсли;
					Номенклатура   = РазобранныеДанные.Значение.Номенклатура;
					Характеристика = РазобранныеДанные.Значение.Характеристика;
					ВидПродукции   = РазобранныеДанные.Значение.ВидПродукции;
					НоменклатураЗаполнена = Истина; // чтобы не проходить тут в следующих кругах цикла.
					
				Иначе
					
					//Если не удалось определить товар по первому уровню вложенности - спускаемся на уровень ниже.
					//Исходя из всех возможных шаблонов упаковок (см. описание процедуры) на уровне ниже на текущем этапе
					//в любом случае уже будут находиться потребительские коды, независимо от шаблона структуры упаковки.
					//Исключения, не являющиеся нормой: групповые ПУСТЫЕ упаковки. Такие агрегации технически возможны в ИС МПТ, 
					//но с точки зрения правил маркировки - некорректны. ОБрабатываем такую ситуацию отдельной проверкой.
					
					//ВРЕМЕННАЯ СХЕМА
					//В случае, если АПИ будет пересмотрено и примут изменения по 3-х уровневой упаковке табака, 
					//т.е. сведения о такой упаковке будут возвращаться не общим бесформенным списком, а с сохранением структуры вложенности, 
					//нужно будет пересмотреть обработку ответа на этом шаге.
					
					Если (РазобранныеДанные.Значение.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") 
						ИЛИ РазобранныеДанные.Значение.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая"))
						И ВложенныеКоды[РазобранныеДанные.Ключ].Количество() = 0 Тогда
						
						ТекстОшибки = НСтр("ru = 'При обработке состава упаковки обнаружена ошибка: групповая упаковка %1 не имеет вложенностей по данным сервера ИС МПТ.'");
						ТекстОшибки = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, РазобранныеДанные.Ключ);
						ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
						ИнтеграцияИСМПТК.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
						Продолжить;
					ИначеЕсли РазобранныеДанные.Значение.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда
						Номенклатура   = РазобранныеДанные.Значение.Номенклатура;
						Характеристика = РазобранныеДанные.Значение.Характеристика;
						EAN  = РазобранныеДанные.Значение.EAN;
						GTIN = РазобранныеДанные.Значение.GTIN;
						ВидПродукции = РазобранныеДанные.Значение.ВидПродукции;
						НоменклатураЗаполнена = Истина;
						Продолжить;
					КонецЕсли;
				
					ВложенныйКодСледующегоУровня = ВложенныеКоды[РазобранныеДанные.Ключ][0]; //подойдет первый попавшийся код из упаковки.
					ДанныеРазбораНижнийУровень   = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(Новый Структура("Штрихкод, ФорматBase64, Количество", ВложенныйКодСледующегоУровня, Ложь, 1));
					
					Если Не ДанныеРазбораНижнийУровень = Неопределено Тогда
						//Код удалось разобрать, пытаемся найти по нему товар.
						СтруктураДанныхКМ = ЗаполнитьОсновнуюСтруктуруДанныхКМ(ДанныеРазбораНижнийУровень,, ВложенныеКоды[РазобранныеДанные.Ключ]);
						Если ЗначениеЗаполнено(СтруктураДанныхКМ.Номенклатура) Тогда 
							Номенклатура   = СтруктураДанныхКМ.Номенклатура;
							Характеристика = СтруктураДанныхКМ.Характеристика;
							EAN  = СтруктураДанныхКМ.EAN;
							GTIN = СтруктураДанныхКМ.GTIN;
							ВидПродукции = СтруктураДанныхКМ.ВидПродукции;
							НоменклатураЗаполнена = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураКода.GTIN = GTIN;
	СтруктураКода.GTINВерхнегоУровня = GTINВерхнегоУровня;
	СтруктураКода.EAN  = EAN;
	СтруктураКода.EANВерхнегоУровня = EANВерхнегоУровня; 
	СтруктураКода.Номенклатура   = Номенклатура;
	СтруктураКода.Характеристика = Характеристика;
	СтруктураКода.ВидПродукции   = ВидПродукции;
		
	СтруктураКода.Количество = ОбщееКоличествоПотребительскихПоУпаковке;
		
КонецПроцедуры

Функция ЗаполнитьОсновнуюСтруктуруДанныхКМ(ДанныеКода, ВложенныйКод = Неопределено, ВложенныеКоды)
	
	GTIN = ДанныеКода.GTIN;
	GTINВерхнегоУровня = ДанныеКода.GTINВерхнегоУровня;
	
	EAN = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодEANИзGTIN(GTIN);
	EANВерхнегоУровня = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодEANИзGTIN(GTINВерхнегоУровня);
	
	Если ЗначениеЗаполнено(EANВерхнегоУровня)
		И ДанныеКода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда 
		//В приоритете пытаемся определить номенклатуру по верхнему уровню упаковки (для групповых упаковок)
		ДанныеНоменклатуры = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПолучитьНоменклатуруПоШтрихкоду(EANВерхнегоУровня);
		Если ДанныеНоменклатуры.Номенклатура.Пустая() Тогда
			ДанныеНоменклатуры = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПолучитьНоменклатуруПоШтрихкоду(EAN);
		КонецЕсли;
	Иначе
		ДанныеНоменклатуры = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПолучитьНоменклатуруПоШтрихкоду(EAN);
	КонецЕсли;
	Номенклатура   = ДанныеНоменклатуры.Номенклатура;
	Характеристика = ДанныеНоменклатуры.Характеристика;
	
	Если Не ВложенныйКод = Неопределено Тогда
		Если ДанныеКода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда
			Количество = 1;
		Иначе
			Количество = ПосчитатьКоличествоВложенныхПотребительских(ВложенныйКод.Значение, ВложенныеКоды);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДанныхКМ = Новый Структура();
	СтруктураДанныхКМ.Вставить("КодИдентификации", 	 ДанныеКода.КодИдентификации);
	СтруктураДанныхКМ.Вставить("КодМаркировки", 	 РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(ДанныеКода.КодМаркировки));
	СтруктураДанныхКМ.Вставить("GTIN", 				 GTIN);
	СтруктураДанныхКМ.Вставить("GTINВерхнегоУровня", GTINВерхнегоУровня);
	СтруктураДанныхКМ.Вставить("EAN", 				 EAN);
	СтруктураДанныхКМ.Вставить("EANВерхнегоУровня",  EANВерхнегоУровня);
	СтруктураДанныхКМ.Вставить("ВидПродукции",		 ДанныеКода.ВидПродукцииИС);
	СтруктураДанныхКМ.Вставить("ВидУпаковки", 		 ДанныеКода.ВидУпаковки);
	СтруктураДанныхКМ.Вставить("Номенклатура", 		 Номенклатура);
	СтруктураДанныхКМ.Вставить("Характеристика",	 Характеристика);
	Если Не ВложенныйКод = Неопределено Тогда
		СтруктураДанныхКМ.Вставить("КоличествоПотр", Количество);
	КонецЕсли;

	Возврат СтруктураДанныхКМ;
	
КонецФункции

Функция ПосчитатьКоличествоВложенныхПотребительских(ВложенностьКода, ВложенныеКодыОтветСервера)
	
	Если Не ТипЗнч(ВложенностьКода) = Тип("Массив") Тогда
		//Пробуем найти данные этого КМ в общем ответе сервера, т.к. для сложновложенной упаковки с сервера  
		//возвращается список без структуры подчиненности вложенных.
		НайденныеДанные = ВложенныеКодыОтветСервера.Получить(ВложенностьКода); 
		Если ТипЗнч(НайденныеДанные) = Тип("Массив") Тогда
			ВложенностьКода = НайденныеДанные;
		Иначе
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоПотребительскихВЭтойУпаковке = 0;
	
	Для Каждого ВложеннаяПозиция Из ВложенностьКода Цикл
		
		ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(ВложеннаяПозиция);
		
		Если ДанныеРазбора = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда 
			КоличествоПотребительскихВЭтойУпаковке = КоличествоПотребительскихВЭтойУпаковке + 1;
		Иначе
			КоличествоДляСуммы = ПосчитатьКоличествоВложенныхПотребительских(ВложеннаяПозиция, ВложенныеКодыОтветСервера);
			КоличествоПотребительскихВЭтойУпаковке = КоличествоПотребительскихВЭтойУпаковке + КоличествоДляСуммы;
		КонецЕсли;			
			
	КонецЦикла;
	
	Возврат КоличествоПотребительскихВЭтойУпаковке; 
	
КонецФункции

Функция ПолучитьКодыМаркировки(ИсходныеДанные) Экспорт 
	
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);
	
КонецФункции

// Заполняет структуру СтруктураКода.
// СтруктураКода (Структура) - структура для заполненеия
// СтруктураКода.GTIN - GTIN вложенной номенклатуры 
// СтруктураКода.Количество - Количество вложенной номенклатуры
//
// ВложенныеКоды (Соответствие) - данные по групповому коду полученные с сервера ИС МПТ
// ВидДокумента - дополнительный параметр для определения особенностей запроса состава упаковок.
//
Функция ПолучитьИнформациюПоГрупповомуКоду(ДанныеПоГрупповомуКоду, КодИдентификации, ВидУпаковки) Экспорт
	
	СтруктураКода = Новый Структура("GTIN, GTINВерхнегоУровня, EAN, EANВерхнегоУровня, Номенклатура, Характеристика, ВидУпаковки, ВидПродукции, Количество", 
									 "", "", "", Неопределено, Неопределено, Неопределено, Неопределено, Неопределено, 0);
	
	ВложенныеКоды = ДанныеПоГрупповомуКоду.ДанныеОбАгрегации[КодИдентификации];
	Если ВложенныеКоды = Неопределено И ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Групповая Тогда
		Если СтрНачинаетсяС(КодИдентификации, "(") Тогда 
			ВложенныеКоды = ДанныеПоГрупповомуКоду.ДанныеОбАгрегации[СтрШаблон("%1%2%3",
			Сред(КодИдентификации, 2, 2), Сред(КодИдентификации, 5,14), Сред(КодИдентификации, 23))];
		Иначе 
			ВложенныеКоды = ДанныеПоГрупповомуКоду.ДанныеОбАгрегации[СтрШаблон("(%1)%2(%3)%4",
			Сред(КодИдентификации, 1, 2), Сред(КодИдентификации, 3,14), Сред(КодИдентификации, 17,2), Сред(КодИдентификации, 19))];
		КонецЕсли;
	КонецЕсли;
	
	Если Не ВложенныеКоды = Неопределено Тогда
		
		Если Не ВложенныеКоды.Количество() = 0 Тогда
			ДанныеПоАгрегированномуКоду(ВложенныеКоды, СтруктураКода, КодИдентификации);
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат СтруктураКода;
	
КонецФункции

Функция ПолучитьИнформациюПоСоставуГрупповогоКода(ДанныеПоГрупповомуКоду, КодИдентификации, ВидУпаковки) Экспорт
	
	СтруктураКода = Новый Структура("GTIN, Количество", "", 0);
	
	ВложенныеКоды = ДанныеПоГрупповомуКоду.ДанныеОбАгрегации[КодИдентификации];
	Если ВложенныеКоды = Неопределено И ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Групповая Тогда
		Если СтрНачинаетсяС(КодИдентификации, "(") Тогда 
			ВложенныеКоды = ДанныеПоГрупповомуКоду.ДанныеОбАгрегации[СтрШаблон("%1%2%3",
			Сред(КодИдентификации, 2, 2), Сред(КодИдентификации, 5,14), Сред(КодИдентификации, 23))];
		Иначе 
			ВложенныеКоды = ДанныеПоГрупповомуКоду.ДанныеОбАгрегации[СтрШаблон("(%1)%2(%3)%4",
			Сред(КодИдентификации, 1, 2), Сред(КодИдентификации, 3,14), Сред(КодИдентификации, 17,2), Сред(КодИдентификации, 19))];
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВложенныеКоды;
	
КонецФункции

Функция ЗапроситьДанныеПоКодуАгрегации(СтруктураЗапрос, Организация, ТокенАвторизации, ВыводитьСообщениеПриЗапросе = Истина) Экспорт
	
	ДанныеПоГрупповомуКоду = ИнтерфейсИСМПТК.ЗапроситьДанныеОбАгрегацииКМ(СтруктураЗапрос, Организация, ТокенАвторизации, ВыводитьСообщениеПриЗапросе);
	 
	Возврат Новый Структура("ТекстОшибки, ДанныеОбАгрегации", ДанныеПоГрупповомуКоду.ТекстОшибки, ДанныеПоГрупповомуКоду.ДанныеОбАгрегации);
	
КонецФункции

Функция ПолучитьДанныеПоГрупповымКодамМаркировки(МассивДокументов, СтруктурнаяЕдиница, ТокенАвторизации) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеОбАгрегации",              Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаМарки.Ссылка КАК Ссылка,
	|	ТаблицаМарки.КодИдентификации КАК КодИдентификации,
	|	ТаблицаМарки.ВидУпаковки КАК ВидУпаковки,
	|	ТаблицаМарки.ВидПродукцииИС КАК ВидПродукцииИС
	|ПОМЕСТИТЬ КодыДокумента
	|ИЗ
	|	Документ.УведомлениеОВвозеИзТретьихСтранИСМПТК.Марки КАК ТаблицаМарки
	|ГДЕ
	|	ТаблицаМарки.Ссылка В (&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыДокумента.Ссылка КАК Ссылка,
	|	КодыДокумента.КодИдентификации КАК КодИдентификации,
	|	КодыДокумента.ВидУпаковки КАК ВидУпаковки,
	|	КодыДокумента.ВидПродукцииИС КАК ВидПродукцииИС
	|ИЗ
	|	КодыДокумента КАК КодыДокумента
	|ГДЕ
	|	КодыДокумента.ВидУпаковки В (ЗНАЧЕНИЕ(Перечисление.ВидыУпаковокИСМПТК.Групповая), ЗНАЧЕНИЕ(Перечисление.ВидыУпаковокИСМПТК.Логистическая))
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	МассивГрупповыхКМ = Новый Массив;
	СоответствиеГрупповыхКМ = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		МассивГрупповыхКМ.Добавить(Выборка.КодИдентификации);
		СоответствиеГрупповыхКМ.Вставить(Новый Структура("КИ, ВипУпаковки", Выборка.КодИдентификации, Выборка.ВидУпаковки), Новый Массив);
	КонецЦикла;
	
	СтруктураКодов = Новый Структура("МассивКодов", МассивГрупповыхКМ);
	ДанныеПоГрупповомуКоду = ИнтерфейсИСМПТК.ЗапроситьДанныеОбАгрегацииСпискаКМ(СтруктураКодов, СтруктурнаяЕдиница, ТокенАвторизации);
	
	Если ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
		
		ТекстОшибки = НСтр("ru = 'Не удалось получить информацию по агрегированным кодам со стороны сервера. Подробная информация добавлена в Журнал регистрации.'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		ИнтеграцияИСМПТК.ЗаписатьОшибкуВЖурналРегистрации(ДанныеПоГрупповомуКоду.ТекстОшибки, , );
		
		ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
		Возврат ВозвращаемоеЗначение;
		
	Иначе
		
		СодержаниеГрупповыхКодов = Новый Соответствие;
		
		Для каждого ГрупповойКод Из СоответствиеГрупповыхКМ Цикл
			СоставКода = ДанныеПоГрупповомуКоду.ДанныеОбАгрегации[ГрупповойКод.Ключ.КИ];
			Если СоставКода = Неопределено И ГрупповойКод.Ключ.ВипУпаковки = Перечисления.ВидыУпаковокИСМПТК.Групповая Тогда
				Если СтрНачинаетсяС(ГрупповойКод.Ключ.КИ, "(") Тогда
					КодПоиска = СтрШаблон("%1%2%3", Сред(ГрупповойКод.Ключ.КИ, 2, 2), Сред(ГрупповойКод.Ключ.КИ, 5,14), Сред(ГрупповойКод.Ключ.КИ, 23));
				Иначе
					КодПоиска = СтрШаблон("(%1)%2(%3)%4", Сред(ГрупповойКод.Ключ.КИ, 1, 2), Сред(ГрупповойКод.Ключ.КИ, 3,14), Сред(ГрупповойКод.Ключ.КИ, 17,2), Сред(ГрупповойКод.Ключ.КИ, 19));
				КонецЕсли;
				СоставКода = ДанныеПоГрупповомуКоду.ДанныеОбАгрегации[КодПоиска];
			КонецЕсли;
			
			Если СоставКода <> Неопределено Тогда
				Для каждого ВложенныйКод Из СоставКода Цикл
					ГрупповойКод.Значение.Добавить(ВложенныйКод.Ключ);
				КонецЦикла;
				СодержаниеГрупповыхКодов.Вставить(ГрупповойКод.Ключ.КИ, ГрупповойКод.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ВозвращаемоеЗначение.ДанныеОбАгрегации = СодержаниеГрупповыхКодов;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработкаОшибок

// Выполняет запись ошибки в журнал регистрации, добавляя имя события Маркировка если оно не задано.
//
// Параметры:
//  ТекстОшибки      - Строка           - текст ошибки.
//  ИмяСобытия       - Строка           - имя события.
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных с ошибкой.
//  Данные           - Произвольный     - объект данных с ошибкой.
//
Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, ИмяСобытия = Неопределено, ОбъектМетаданных = Неопределено, Данные = Неопределено) Экспорт
	
	Если ИмяСобытия = Неопределено Тогда
		ИмяСобытия = НСтр("ru = 'Маркировка';
						  |en = 'Маркировка'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,
		ОбъектМетаданных,
		Данные,
		ТекстОшибки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Процедура ПриСозданииНаСервере_НастроитьПодключаемоеОборудование(Форма) Экспорт
	
	ИнтеграцияИСМПТКПереопределяемый.ПриСозданииНаСервере_НастроитьПодключаемоеОборудование(Форма);
	
КонецПроцедуры

//ЗаказКМ, форма: ЗаполнитьПоДокументуОснованию()
//Функция последовательно проверяет константы учета марк. продукции из настроек и выставляет в качестве вида продукции по умолчанию
//первую из включенных ТГ.
//
Функция ПолучитьЗначениеПоУмолчаниюДляВидаПродукцииЗаказа() Экспорт
	
	Если Константы.ВестиУчетМаркируемойОбувиИСМПТК.Получить() Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная");
		
	ИначеЕсли Константы.ВестиУчетМаркируемогоТабакаИСМПТК.Получить() Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная");
		
	ИначеЕсли Константы.ВестиУчетМаркируемойМолочкиИСМПТК.Получить() Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция");
		
	ИначеЕсли Константы.ВестиУчетМаркируемыхЛекарствИСМПТК.Получить() Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты");
	КонецЕсли;
	
КонецФункции

#Область ДокументыИСМПТ_БМ

Функция МассивИСМПТСДокументомОснованияИБез(МассивИСМПТ) Экспорт
	
	Возврат ИнтеграцияИСМПТК.МассивИСМПТСДокументомОснованияИБез(МассивИСМПТ);	
	
КонецФункции

Функция НовоеСоответствиеДляОбновленияАктуальныхОснований(Знач МассивИСМПТ) Экспорт
	
	// Соответствие документов ИСМПТ и актуальных оснований, по которым можно выполнить перезаполнение
	СоответствиеДляОбновленияАктуальныхОснований = Новый Соответствие;
	
	// Массив документов ИСМПТ, у которых нет актуальных оснований.
	ОтсутствуетАктуальноеОснование = Новый Массив;
	
	// Массив ИСМПТ, которые имеют актуальные основания в недопустимом состоянии. 
	НедопустимоеСостояние = Новый Массив;
	
	// Найти актуальные основания для документов ИСМПТ.
	СоответствиеАктуальныхОснований = ИнтеграцияИСМПТКВызовСервера.НайтиАктуальныеОснованияПоДокументамИСМПТ(МассивИСМПТ);
	
	// Заполнить коллекции СоответствиеАктуальныхОснований, ОтсутствуетАктуальноеОснование, НедопустимоеСостояниеОснования.
	Для Каждого ЭлементСоответствия Из СоответствиеАктуальныхОснований Цикл
		
		СсылкаДокументИСМПТ = ЭлементСоответствия.Ключ;
		ДанныеОснования = ЭлементСоответствия.Значение;
		
		Если ДанныеОснования = Неопределено 
			Или Не ЗначениеЗаполнено(ДанныеОснования) Тогда
			ОтсутствуетАктуальноеОснование.Добавить(СсылкаДокументИСМПТ);
		
		ИначеЕсли Не СсылкаДокументИСМПТ.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.Сформирован")    
			И Не СсылкаДокументИСМПТ.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ОтклоненСервером") Тогда
			НедопустимоеСостояние.Добавить(СсылкаДокументИСМПТ);
		Иначе
			СоответствиеДляОбновленияАктуальныхОснований.Вставить(СсылкаДокументИСМПТ, ДанныеОснования);
		КонецЕсли;
		
	КонецЦикла;
	
	// Сформировать и показать текст сообщения, если нельзя обновить все документы.
	Если СоответствиеДляОбновленияАктуальныхОснований.Количество() <> МассивИСМПТ.Количество() Тогда
		
		ТекстСообщения = "";
		
		// Сформировать текст по документам, у которых нет актуальных оснований.
		Если ОтсутствуетАктуальноеОснование.Количество() <> 0 Тогда
			
			ТекстСообщения = ТекстСообщения + НСтр(
				"ru = 'Невозможно перезаполнить документы:
	            |%СписокИСМПТ%
	            |Так как эти документы не отражены в учете.'");
				
			СписокИСМПТ = "";
			Для Каждого СсылкаИСМПТ Из ОтсутствуетАктуальноеОснование Цикл
				СписокИСМПТ = СписокИСМПТ + "- " + СсылкаИСМПТ + Символы.ПС;	
			КонецЦикла;
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СписокИСМПТ%", СокрЛП(СписокИСМПТ));
				
		КонецЕсли;
		
		ТекстСообщения = СокрЛП(ТекстСообщения) + Символы.ПС + Символы.ПС;
		
		// Сформировать текст по документам, у которых есть актуальные основания с недопустимым состоянием.
		Если НедопустимоеСостояние.Количество() <> 0 Тогда
			
			ТекстСообщения = ТекстСообщения + НСтр(
				"ru = 'Невозможно перезаполнить документы:
				|%СписокИСМПТ%
				|Так как они находятся в состояниях, недопустимых для обновления.
				|Возможно обновление документов только в состоянии ""%Сформирован%"", ""%ОтклоненСервером%"".'");
				
			СписокИСМПТ = "";
			Для Каждого СсылкаИСМПТ Из НедопустимоеСостояние Цикл
				СписокИСМПТ = СписокИСМПТ + "- " + СсылкаИСМПТ + Символы.ПС;	
			КонецЦикла;
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СписокИСМПТ%", 	   СокрЛП(СписокИСМПТ));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сформирован%", 	   Перечисления.СостоянияДокументовИСМПТК.Сформирован);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОтклоненСервером%", Перечисления.СостоянияДокументовИСМПТК.ОтклоненСервером);
			
		КонецЕсли;
		
		ТекстСообщения = СокрЛП(ТекстСообщения) + Символы.ПС + Символы.ПС;
		
		// Сформировать текст по документам, которые можно перезаполнить.
		Если СоответствиеДляОбновленияАктуальныхОснований.Количество() <> 0 Тогда
			
			ТекстСообщения = ТекстСообщения + НСтр(
				"ru = 'Перезаполнение по данным документа-основания возможно только для документа:
	             |%СписокИСМПТ%'");
				
			СписокИСМПТ = "";
			Для Каждого ЭлементСоответствия Из СоответствиеДляОбновленияАктуальныхОснований Цикл
				СписокИСМПТ = СписокИСМПТ + "- " + ЭлементСоответствия.Ключ + Символы.ПС;	
			КонецЦикла;
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СписокИСМПТ%", СокрЛП(СписокИСМПТ));
			
		КонецЕсли;
		
		Сообщить(СокрЛП(ТекстСообщения));
		
	КонецЕсли;
	
	Возврат СоответствиеДляОбновленияАктуальныхОснований;
	
КонецФункции

Функция НайтиАктуальныеОснованияПоДокументамИСМПТ(Знач МассивИСМПТ) Экспорт
	
	Возврат ИнтеграцияИСМПТК.НайтиАктуальныеОснованияПоДокументамИСМПТ(МассивИСМПТ);
	
КонецФункции

Процедура ОбновитьАктуальныеДокументыИСМПТ(Знач СоответствиеДляОбновленияАктуальныхОснований, ИсключаемыеРеквизиты = Неопределено, ИсключаемыеТабличныеЧасти = Неопределено) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого ЭлементСоответствия Из СоответствиеДляОбновленияАктуальныхОснований Цикл
			
			СсылкаДокументИСМПТ = ЭлементСоответствия.Ключ.ПолучитьОбъект();
			Основание = ЭлементСоответствия.Значение;
			ИнтеграцияИСМПТК.ОчиститьОбъект(СсылкаДокументИСМПТ, ИсключаемыеРеквизиты, ИсключаемыеТабличныеЧасти);
			ИнтеграцияИСМПТК.ЗаполнитьИсходящийДокументИСМПТ(Основание, СсылкаДокументИСМПТ);
			СсылкаДокументИСМПТ.Записать();
					
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ИнтеграцияИСМПТКВызовСервера.ОбновитьАктуальныеДокументыИСМПТ'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Функция СоздатьСписокПервичныхДокументов(ПараметрыСоздания) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().СоздатьСписокПервичныхДокументов(ПараметрыСоздания);	
	
КонецФункции

Функция ПолучитьТаблицуПараметров(СписокКолонок, ИсходнаяТаблица = Неопределено) Экспорт

	Если ИсходнаяТаблица = Неопределено Тогда
		
		ТаблицаРезультат = Новый ТаблицаЗначений;
		Колонки = Новый Структура(СписокКолонок);
		Для Каждого Колонка Из Колонки Цикл
			ТаблицаРезультат.Колонки.Добавить(Колонка.Ключ);
		КонецЦикла;
		Возврат ТаблицаРезультат;

	Иначе

		Возврат ИсходнаяТаблица.Скопировать(, СписокКолонок);

	КонецЕсли;

КонецФункции

Процедура ПроверитьИсходящиеДокументыИСМПТ(Знач МассивИсходящихДокументов) Экспорт
	
	ИнтеграцияИСМПТК.ПроверитьИсходящиеДокументыИСМПТ(МассивИсходящихДокументов);
	
КонецПроцедуры

Функция ПроверитьСтатусУведомления(УОР) Экспорт
	
	Возврат ИнтеграцияИСМПТК.ПроверитьСтатусУведомления(УОР);
	
КонецФункции

Процедура ОбработкаВыбораАПП(ПТУ, АПП) Экспорт
	
	ИнтеграцияИСМПТКПереопределяемый.ОбработкаВыбораАПП(ПТУ, АПП);
	
КонецПроцедуры

Функция МассивGTINМаркированногоТовара(Номенклатура, Характеристика, Упаковка) Экспорт
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.МассивGTINМаркированногоТовара(Номенклатура, Характеристика, Упаковка);
	
КонецФункции

#Область ОтправкаДокументовИСМПТ

//ВАЖНО! Массив изменяется внутрии функции, Знач не устанавливаем перед объявлением переменной
Функция ПроверитьВозможностьОтправкиДокументовПоставитьВОчередьОтправкиДокументИСМПТ(МассивИсходящихДокументовИСМПТ, ДополнительныеПараметры) Экспорт
	
	Возврат ИнтеграцияИСМПТК.ПроверитьВозможностьОтправкиДокументовПоставитьВОчередьОтправкиДокументИСМПТ(МассивИсходящихДокументовИСМПТ, ДополнительныеПараметры);
	
КонецФункции

Функция СгруппироватьДокументыИСМПТПоСтруктурнымЕдиницам(Знач МассивДокументыИСМПТ) Экспорт
	
	ОбработкаОбменИСМПТ = ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ();
	КоллекцияСгруппированныхДокументовИСМПТ = ОбработкаОбменИСМПТ.Переопределяемый_СгруппироватьДокументыИСМПТПоСтруктурнымЕдиницам(МассивДокументыИСМПТ);
	Возврат КоллекцияСгруппированныхДокументовИСМПТ;
	
КонецФункции

#КонецОбласти

#Область ОтправкаДокументовИСМПТ

Функция ПроверитьВозможностьОтправкиДокументовПоставитьВОчередьОтправкиДокументСУЗ(МассивИсходящихДокументовСУЗ, ДополнительныеПараметры) Экспорт
	
	Возврат ИнтеграцияИСМПТК.ПроверитьВозможностьОтправкиДокументовПоставитьВОчередьОтправкиДокументСУЗ(МассивИсходящихДокументовСУЗ, ДополнительныеПараметры);
	
КонецФункции

Функция СгруппироватьДокументыСУЗПоСтруктурнымЕдиницам(Знач МассивДокументыСУЗ) Экспорт
	
	ОбработкаОбменИСМПТ = ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ();
	КоллекцияСгруппированныхДокументовИСМПТ = ОбработкаОбменИСМПТ.Переопределяемый_СгруппироватьДокументыСУЗПоСтруктурнымЕдиницам(МассивДокументыСУЗ);
	
	Возврат КоллекцияСгруппированныхДокументовИСМПТ;
		
КонецФункции

#КонецОбласти

#Область ОбновлениеДокументовИСМПТ

#КонецОбласти

#Область ТокенАвторизации

Функция ПроверитьОбновитьКлючСессии(ПараметрыЗапроса, Знач СрокДействия = Неопределено, ОбновлятьКлючСессииНаСервере = Истина) Экспорт
	
	Возврат ИнтерфейсАвторизацииИСМПТКСлужебный.ПроверитьОбновитьКлючСессии(ПараметрыЗапроса, СрокДействия, ОбновлятьКлючСессииНаСервере);
	
КонецФункции

Функция ПолучитьТокенАвторизации(Организация = Неопределено) Экспорт
	
	Контейнер = ИнтеграцияИСМПТККлиентСервер.КонтейнерМетодов();
	Возврат Контейнер.ПолучитьТокенАвторизации(Организация);
	
КонецФункции

Функция ИспользоватьАвтоОпределениеЛогистическихКодовИСМПТК() Экспорт
	
	Возврат Константы.АвтоОпределениеЛогистическихКодовИСМПТК.Получить();
	
КонецФункции

Функция ИспользоватьАвтоПроверкаВалидностиКодаИСМПТК() Экспорт
	
	Возврат Константы.АвтоПроверкаВалидностиКодаИСМПТК.Получить();
	
КонецФункции

#КонецОбласти

Функция ПолучитьСписокЗависшихЗаказовСУЗ(Организация = "") Экспорт
	
	Возврат ИнтеграцияИСМПТК.ПолучитьСписокЗависшихЗаказовСУЗ(Организация);
	
КонецФункции

Процедура ОтметитьВыгрузкуКодовМаркировкиЗаказа(СписокКодов, ЗаказОснование = Неопределено) Экспорт 
	
	МенеджерЗаписиРС = РегистрыСведений.ПулКодовМаркировкиСУЗИСМПТК.СоздатьМенеджерЗаписи();
	
	Для Каждого СтрокаКод Из СписокКодов Цикл
		Если ЗаказОснование = Неопределено Тогда
			//В этом случае Список кодов - сформированная таблица значений
			МенеджерЗаписиРС.ЗаказНаЭмиссию = СтрокаКод.ЗаказНаЭмиссию;
			МенеджерЗаписиРС.КодМаркировки 	= СтрокаКод.КодМаркировки; //это КИ
			МенеджерЗаписиРС.ХешСуммаКодаМаркировки = ИнтеграцияИСМПТК.ХешированиеДанныхSHA256(СтрокаКод.КодМаркировки);
		Иначе
			//Список кодов - таблица документа
			МенеджерЗаписиРС.ЗаказНаЭмиссию = ЗаказОснование;
			МенеджерЗаписиРС.КодМаркировки 	= СтрокаКод.КодИдентификации;
			МенеджерЗаписиРС.ХешСуммаКодаМаркировки = ИнтеграцияИСМПТК.ХешированиеДанныхSHA256(СтрокаКод.КодИдентификации);
		КонецЕсли;
		
		МенеджерЗаписиРС.Прочитать();
		МенеджерЗаписиРС.ДатаВыгрузки = ТекущаяДатаСеанса();
		МенеджерЗаписиРС.Записать(Истина);
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьАдресаСерверовИСМПТ() Экспорт
	
	Возврат ИнтеграцияИСМПТК.ПолучитьАдресаСерверовИСМПТ();
	
КонецФункции

Функция ОбработатьАдресИСМПТКонстанта(АдресКонстанта) Экспорт
	
	Возврат ИнтеграцияИСМПТК.ОбработатьАдресИСМПТКонстанта(АдресКонстанта);
	
КонецФункции

Функция ПроверитьНаличиеПротоколаВАдресе(АдресСервера) Экспорт
	
	Возврат ИнтеграцияИСМПТК.ПроверитьНаличиеПротоколаВАдресе(АдресСервера);
	
КонецФункции

Функция ПолучитьТекущиюВерсиюМакета() Экспорт
	
	Возврат ИнтеграцияИСМПТК.ПолучитьТекущиюВерсиюМакета();
	
КонецФункции

Функция ПолучитьТекущиюВерсиюМобильногоПриложения() Экспорт
	
	Возврат ОбменДаннымиМобильноеПриложениеМаркировкаИСМПТК.ПолучитьТекущиюВерсиюМобильногоПриложения();
	
КонецФункции

Функция ВыполнитьВФоне(Знач ИмяПроцедуры, Знач ПараметрыПроцедуры, Знач ПараметрыВыполнения) Экспорт

	Возврат ИнтеграцияИСМПТКПереопределяемый.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

Функция ПолучитьИдентификаторОрганизации(ОрганизацияСсылка) Экспорт
	
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЗначениеРеквизитаОбъекта(ОрганизацияСсылка, 
		ИнтеграцияИСМПТКПереопределяемый.ПолучитьРеквизитИИНОрганизации());
	
КонецФункции

Функция ПроверитьВидВвозаИзОснованияПТУ(ПТУ) Экспорт
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ПроверитьВидВвозаИзОснованияПТУ(ПТУ);
	
КонецФункции

Функция ПрочитатьЗначениеJSON_Маркировка(СтрокаJSON, СвойстваДаты = "") Экспорт
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(СтрокаJSON);
	
	Результат = ПрочитатьJSON(Чтение, Ложь, СвойстваДаты);
	Чтение.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ЗаписатьЗначениеJSON_Маркировка(Значение) Экспорт
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Значение);
	
	Возврат Запись.Закрыть();
	
КонецФункции

Функция ПолучитьШаблонДляНоменклатурыЗаказа(Номенклатура) Экспорт
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ПолучитьШаблонДляНоменклатурыЗаказа(Номенклатура);
	
КонецФункции

Функция ПолучитьКодыМаркировкиНанесение(СписокЗаказов, ТаблицаКМДляСравнения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ПулКодовМаркировкиСУЗИСМПТК.ЗаказНаЭмиссию КАК ЗаказНаЭмиссию,
	|	ПулКодовМаркировкиСУЗИСМПТК.КодМаркировки КАК КодМаркировки,
	|	ПулКодовМаркировкиСУЗИСМПТК.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
	|	ПулКодовМаркировкиСУЗИСМПТК.Статус КАК Статус,
	|	ПулКодовМаркировкиСУЗИСМПТК.Организация КАК Организация,
	|	ПулКодовМаркировкиСУЗИСМПТК.СтанцияУправленияЗаказами КАК СтанцияУправленияЗаказами,
	|	ПулКодовМаркировкиСУЗИСМПТК.Номенклатура КАК Номенклатура,
	|	ПулКодовМаркировкиСУЗИСМПТК.Характеристика КАК Характеристика,
	|	ПулКодовМаркировкиСУЗИСМПТК.ПолныйКодМаркировки КАК ПолныйКодМаркировки,
	|	ПулКодовМаркировкиСУЗИСМПТК.ДатаЭмиссииУниверсальная КАК ДатаЭмиссииУниверсальная,
	|	ПулКодовМаркировкиСУЗИСМПТК.ДатаПечатиУниверсальная КАК ДатаПечатиУниверсальная,
	|	ПулКодовМаркировкиСУЗИСМПТК.ДатаВыгрузки КАК ДатаВыгрузки,
	|	ПулКодовМаркировкиСУЗИСМПТК.GTIN КАК GTIN,
	|	ПулКодовМаркировкиСУЗИСМПТК.ВидПродукции КАК ВидПродукции,
	|	ПулКодовМаркировкиСУЗИСМПТК.МаксимальнаяРозничнаяЦена КАК МаксимальнаяРозничнаяЦена,
	|	ПулКодовМаркировкиСУЗИСМПТК.СпособВводаВОборот КАК СпособВводаВОборот,
	|	ПулКодовМаркировкиСУЗИСМПТК.Шаблон КАК Шаблон,
	|	ПулКодовМаркировкиСУЗИСМПТК.ХешСуммаУпаковки КАК ХешСуммаУпаковки,
	|	ПулКодовМаркировкиСУЗИСМПТК.ТипШтрихкода КАК ТипШтрихкода
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗИСМПТК КАК ПулКодовМаркировкиСУЗИСМПТК
	|ГДЕ
	|	ПулКодовМаркировкиСУЗИСМПТК.ЗаказНаЭмиссию В(&СписокЗаказов)
	|	И ПулКодовМаркировкиСУЗИСМПТК.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКодовМаркировкиСУЗИСМПТК.СгенерированНеНанесен)
	|	И ПулКодовМаркировкиСУЗИСМПТК.ПолныйКодМаркировки В(&ТаблицаКМ)";
	
	Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
	Запрос.УстановитьПараметр("ТаблицаКМ", 	   ТаблицаКМДляСравнения);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		МассивКодов = Новый Массив;
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			
			ДанныеЗаписи = Новый Структура();
			ДанныеЗаписи.Вставить("ЗаказНаЭмиссию",			  Выборка.ЗаказНаЭмиссию);
			ДанныеЗаписи.Вставить("КодМаркировки", 			  Выборка.КодМаркировки);
			ДанныеЗаписи.Вставить("ХешСуммаКодаМаркировки",   Выборка.ХешСуммаКодаМаркировки);
			ДанныеЗаписи.Вставить("Организация", 			  Выборка.Организация);
			ДанныеЗаписи.Вставить("СтанцияУправленияЗаказами",Выборка.СтанцияУправленияЗаказами);
			ДанныеЗаписи.Вставить("Номенклатура", 			  Выборка.Номенклатура);
			ДанныеЗаписи.Вставить("Характеристика", 		  Выборка.Характеристика);
			ДанныеЗаписи.Вставить("ПолныйКодМаркировки", 	  Выборка.ПолныйКодМаркировки);
			ДанныеЗаписи.Вставить("ДатаЭмиссииУниверсальная", Выборка.ДатаЭмиссииУниверсальная);
			ДанныеЗаписи.Вставить("GTIN", 					  Выборка.GTIN);
			ДанныеЗаписи.Вставить("ВидПродукции", 			  Выборка.ВидПродукции);
			ДанныеЗаписи.Вставить("СпособВводаВОборот", 	  Выборка.СпособВводаВОборот);
			ДанныеЗаписи.Вставить("Шаблон", 				  Выборка.Шаблон);
			ДанныеЗаписи.Вставить("ХешСуммаУпаковки", 		  Выборка.ХешСуммаУпаковки);
			ДанныеЗаписи.Вставить("ТипШтрихкода", 			  Выборка.ТипШтрихкода);
			
			МассивКодов.Добавить(ДанныеЗаписи);
			
		КонецЦикла;
		
		Возврат МассивКодов;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКодыМаркировкиЗаказов(СписокЗаказов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ПулКодовМаркировкиСУЗИСМПТК.КодМаркировки КАК КодМаркировки,
	|	ПулКодовМаркировкиСУЗИСМПТК.ПолныйКодМаркировки КАК ПолныйКодМаркировки,
	|	ПулКодовМаркировкиСУЗИСМПТК.ЗаказНаЭмиссию КАК ЗаказНаЭмиссию
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗИСМПТК КАК ПулКодовМаркировкиСУЗИСМПТК
	|ГДЕ
	|	ПулКодовМаркировкиСУЗИСМПТК.ЗаказНаЭмиссию В(&СписокЗаказов)
	|	И (ПулКодовМаркировкиСУЗИСМПТК.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКодовМаркировкиСУЗИСМПТК.Сгенерирован)
	|	ИЛИ ПулКодовМаркировкиСУЗИСМПТК.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКодовМаркировкиСУЗИСМПТК.Использован))";
	
	Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		МассивКодов = Новый Массив;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл 
			МассивКодов.Добавить(Новый Структура("КодМаркировки, ПолныйКодМаркировки, ЗаказНаЭмиссию", Выборка.КодМаркировки, Выборка.ПолныйКодМаркировки, Выборка.ЗаказНаЭмиссию));
		КонецЦикла;
		Возврат МассивКодов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ВыполнитьДобавлениеКМИзФайлаВФоне(СтруктураПараметров, ПараметрыСканирования, ТокенАвторизации = Неопределено) Экспорт
	
	ПараметрыМетода = Новый Структура();
	ПараметрыМетода.Вставить("МассивОшибок", 	  СтруктураПараметров.МассивОшибок);
	ПараметрыМетода.Вставить("СведенияОВыбранныхДокументах", СтруктураПараметров.СведенияОВыбранныхДокументах);
	ПараметрыМетода.Вставить("ПараметрыСканирования", ПараметрыСканирования);
	ПараметрыМетода.Вставить("ТокенАвторизации", 	  ТокенАвторизации);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(СтруктураПараметров.УникальныйИдентификатор); 
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка кодов маркировки из файла'");
	ПараметрыВыполнения.ЗапуститьВФоне    = Истина;
				
	ВыполняемыйМетод = "ИнтеграцияИСМПТК.ВыполнитьДобавлениеКМИзФайлаВФоне";
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыМетода, ПараметрыВыполнения); 
	
КонецФункции

Функция ПолучитьДопСведенияДокументаОснованияВводВыводИзОборота(ДокументОснование) Экспорт
	
	Реквизиты = Новый Структура();
	Реквизиты.Вставить("ДокументОснованиеНаименование", Строка(ТипЗнч(ДокументОснование)));
	Реквизиты.Вставить("ДокументОснованиеДата",  		ДокументОснование.Дата);
	Реквизиты.Вставить("ДокументОснованиеНомер", 		ДокументОснование.Номер);
	
	Возврат Реквизиты;
	
КонецФункции

#Область РазбитьДокументНаЧасти

Функция РазбитьДокументыЗаказКМ(ПараметрыСоздания) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().РазбитьДокументыЗаказКМ(ПараметрыСоздания);
	
КонецФункции

Функция РазбитьДокументыИСМПТ(ПараметрыСоздания, ИмяДокумента) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().РазбитьДокументыИСМПТ(ПараметрыСоздания, ИмяДокумента);
	
КонецФункции

Функция ВыполнитьПроверкуДанныхЗаказаПередРазбитием(ДокументЗаказ) Экспорт
	
	ПустаяСсылкаНоменклатура = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПолучитьПустуюСсылкуНоменклатура();
	НайденныеСтрокиСПустойНоменклатурой = ДокументЗаказ.Товары.НайтиСтроки(Новый Структура("Номенклатура", ПустаяСсылкаНоменклатура));
	
	Возврат НайденныеСтрокиСПустойНоменклатурой.Количество() = 0;	
	
КонецФункции

#КонецОбласти

#КонецОбласти

