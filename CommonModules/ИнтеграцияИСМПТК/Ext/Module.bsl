
#Область РегламентноеЗадание

// Обработчик регламентного задания очистки пула кодов маркировки
// 
Процедура ОчисткаПулаКодовМаркировкиРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОчисткаПулаКодовМаркировкиИСМПТК);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрыСведений.ПулКодовМаркировкиСУЗИСМПТК.ОчисткаПулаКодовМаркировки();
	
КонецПроцедуры

// Выполнить регламентное задание обмена с ИС МОТП
//
Процедура ВыполнитьОбменРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаПолучениеДанныхИСМПТК);
	УстановитьПривилегированныйРежим(Истина);
		
КонецПроцедуры

// Выполнить регламентное задание обмена с ИС МПТ СУЗ
//
Процедура ВыполнитьОбменРегламентноеЗадание_ОбменСУЗ() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаПолучениеДанныхСУЗИСМПТК);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Документы.ЗаказКодовМаркировкиСУЗИСМПТК.ПолучитьИнформациюПоСтатусамЗаказов();
	Документы.АгрегацияКодовМаркировкиСУЗИСМПТК.ПолучитьИнформациюПоСтатусамАгрегации();
	Документы.НанесениеКодовМаркировкиСУЗИСМПТК.ПолучитьИнформациюПоСтатусамНанесения();
	
КонецПроцедуры

// Выполнить регламентное задание обмена с ИС МПТ СУЗ
//
Процедура СинхронизацияСНацКаталогомРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПолучениеДанныхНациональногоКаталогаИСМПТК);
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Если это возможно по АПИ: при обновлении в фоне должны получаться новые карточки товаров по организации и обновляться статусы существующих карточек (а также их параметры, т.к. они могли быть изменены в веб.интерфейсе)
	Тест = Истина;
		
КонецПроцедуры

#КонецОбласти

#Область НастройкиУчета

Функция РазрешенаПовторнаяПечатьКодовМаркировки() Экспорт
	
	Возврат Пользователи.РолиДоступны("ПравоСбросаФлагаПечатиЗаказаВПулеИСМПТК", ИнтеграцияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь());
	
КонецФункции

Функция РазрешеноПовторноеПолучениеКодовМаркировки() Экспорт
	
	Возврат Пользователи.РолиДоступны("АдминистрированиеИСМПТК", ИнтеграцияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь());
	
КонецФункции

#КонецОбласти

#Область РаботаСВнешнимиСервисами

Функция URLЗапроса(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод) Экспорт

	Если ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение Тогда
		Протокол = "https";
	Иначе
		Протокол = "http";
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"%1 %2://%3:%4/%5",
		HTTPМетод,
		Протокол,
		ПараметрыОтправкиHTTPЗапросов.Сервер,
		Формат(ПараметрыОтправкиHTTPЗапросов.Порт, "ЧГ=0;"),
		HTTPЗапрос.АдресРесурса);
	
	Возврат URLЗапроса;

КонецФункции

// Вывести HTTP-Запрос в лог
//
// Параметры:
//  HTTPЗапрос - HTTPЗапрос - HTTP-запрос для вывода в файл.
//             - HTTPОтвет  - HTTP-ответ для вывода в файл.
//  ПутьКФайлу - Строка - Путь к файлу для записи лога.
//
// Возвращаемое значение:
//  Строка - Представление протокола
Функция ВывестиHTTPЗапросВЛог(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод, ПутьКФайлу = Неопределено, ТекстОшибки = "") Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	Если ПутьКФайлу <> Неопределено Тогда
		ТекстовыйДокумент.Прочитать(ПутьКФайлу, КодировкаТекста.UTF8);
	КонецЕсли;
	
	Если HTTPЗапрос <> Неопределено Тогда
		Если ТипЗнч(HTTPЗапрос) = Тип("HTTPЗапрос") Тогда
			
			Если ТекстовыйДокумент.КоличествоСтрок() > 0 Тогда
				ТекстовыйДокумент.ДобавитьСтроку("");
			КонецЕсли;
			
			URLЗапроса = URLЗапроса(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод);
			
			ТекстовыйДокумент.ДобавитьСтроку(URLЗапроса);
		ИначеЕсли ТипЗнч(HTTPЗапрос) = Тип("HTTPОтвет") Тогда
			ТекстовыйДокумент.ДобавитьСтроку("");
		КонецЕсли;
	
		Для Каждого КлючИЗначение Из HTTPЗапрос.Заголовки Цикл
			ТекстовыйДокумент.ДобавитьСтроку(
				СтрШаблон("%1: %2", КлючИЗначение.Ключ, КлючИЗначение.Значение));
		КонецЦикла;
	
		Тело = HTTPЗапрос.ПолучитьТелоКакСтроку();
	
		Если Не ПустаяСтрока(Тело) Тогда
			ТекстовыйДокумент.ДобавитьСтроку(Тело);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстовыйДокумент.ДобавитьСтроку(ТекстОшибки);
	КонецЕсли;
	
	Если ПутьКФайлу <> Неопределено Тогда
		ТекстовыйДокумент.Записать(ПутьКФайлу, КодировкаТекста.UTF8);
	КонецЕсли;

	Возврат ТекстовыйДокумент.ПолучитьТекст();

КонецФункции

Функция ПолучитьДанныеИзСервиса(АдресЗапроса, КлючСессии, ПараметрыОтправкиHTTPЗапросов, ЗаголовокHTTP = Неопределено) Экспорт
	
	Если ЗаголовокHTTP = Неопределено Тогда
		ЗаголовокHTTP = Новый Соответствие();
		ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
		ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
		Если КлючСессии <> Неопределено Тогда
			ЗаголовокHTTP.Вставить("Authorization", СтрШаблон("Bearer %1", КлючСессии));
		КонецЕсли;
	КонецЕсли;
	
	HTTPЗапрос  = Новый HTTPЗапрос(АдресЗапроса, ЗаголовокHTTP);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	Если ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение Тогда
		ИнтернетПрокси = ИнтеграцияИСМПТКПереопределяемый.ПолучитьПрокси("HTTPS");
		ЗащищенноеСоединение = ИнтеграцияИСМПТКПовтИсп.ЗащищенноеСоединение();
	Иначе
		ИнтернетПрокси = ИнтеграцияИСМПТКПереопределяемый.ПолучитьПрокси("HTTP");
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ПараметрыОтправкиHTTPЗапросов.Сервер,
			ПараметрыОтправкиHTTPЗапросов.Порт,,,
			ИнтернетПрокси,
			ПараметрыОтправкиHTTPЗапросов.Таймаут,
			ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			ПараметрыОтправкиHTTPЗапросов.ПредставлениеСервиса,
			УровеньЖурналаРегистрации.Ошибка,,,
			СтрШаблон(
				НСтр("ru = 'Ошибка при выполнении запроса GET %1 в %2 %3:%4';
					|en = 'Ошибка при выполнении запроса GET %1 в %2 %3:%4'"),
				АдресЗапроса,
				ПараметрыОтправкиHTTPЗапросов.ПредставлениеСервиса,
				ПараметрыОтправкиHTTPЗапросов.Сервер,
				ПараметрыОтправкиHTTPЗапросов.Порт) + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	ПутьКФайлу = Неопределено;
	ИнтеграцияИСМПТКПереопределяемый.ПриОпределенииПутиКФайлуЛогирования(ПутьКФайлу);
	Если ПутьКФайлу <> Неопределено Тогда
		ВывестиHTTPЗапросВЛог(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, "GET", ПутьКФайлу);
		ВывестиHTTPЗапросВЛог(HTTPОтвет,  Неопределено, Неопределено, ПутьКФайлу, ТекстОшибки);
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ПараметрыОтправкиHTTPЗапросов", ПараметрыОтправкиHTTPЗапросов);
	ВозвращаемоеЗначение.Вставить("HTTPМетод",                     "GET");
	ВозвращаемоеЗначение.Вставить("HTTPЗапрос",                    HTTPЗапрос);
	ВозвращаемоеЗначение.Вставить("HTTPОтвет",                     HTTPОтвет);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                   ТекстОшибки);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ОтправитьДанныеВСервис(АдресЗапроса, ТелоЗапроса, КлючСессии, HTTPМетод, ПараметрыОтправкиHTTPЗапросов, ЗаголовокHTTP = Неопределено) Экспорт
	
	Если ТелоЗапроса <> Неопределено И ТипЗнч(ТелоЗапроса) = Тип("Строка") Тогда
		ТелоЗапросаJSON = ТелоЗапроса;
	ИначеЕсли ТелоЗапроса <> Неопределено Тогда
		ТелоЗапросаJSON = ИнтерфейсИСМПТК.ОбъектВТекстJSON(ТелоЗапроса, Истина);
	КонецЕсли;
	
	Если ЗаголовокHTTP = Неопределено Тогда
		ЗаголовокHTTP = Новый Соответствие();
		ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
		ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
		Если КлючСессии <> Неопределено Тогда
			ЗаголовокHTTP.Вставить("Authorization", СтрШаблон("Bearer %1", КлючСессии));
		КонецЕсли;
	КонецЕсли;
	
	HTTPЗапрос  = Новый HTTPЗапрос(АдресЗапроса, ЗаголовокHTTP);
	Если ТелоЗапроса <> Неопределено Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапросаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	Если ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение Тогда
		ИнтернетПрокси = ИнтеграцияИСМПТКПереопределяемый.ПолучитьПрокси("HTTPS");
		ЗащищенноеСоединение = ИнтеграцияИСМПТКПовтИсп.ЗащищенноеСоединение();
	Иначе
		ИнтернетПрокси = ИнтеграцияИСМПТКПереопределяемый.ПолучитьПрокси("HTTP");
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ПараметрыОтправкиHTTPЗапросов.Сервер,
			ПараметрыОтправкиHTTPЗапросов.Порт,,,
			ИнтернетПрокси,
			ПараметрыОтправкиHTTPЗапросов.Таймаут,
			ЗащищенноеСоединение);
		
		Если HTTPМетод = "POST" Тогда
			HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		Иначе
			HTTPОтвет = Соединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос);
		КонецЕсли;
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ИСМПТК';
				|en = 'ИСМПТК'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СтрШаблон(
				НСтр("ru = 'Ошибка при выполнении запроса POST %1 в ИС МПТ %2';
					|en = 'Ошибка при выполнении запроса POST %1 в ИС МПТ %2'"),
				АдресЗапроса, ИнтеграцияИСМПТККлиентСервер.АдресСервера_ИСМП()) + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	ПутьКФайлу = Неопределено;
	ИнтеграцияИСМПТКПереопределяемый.ПриОпределенииПутиКФайлуЛогирования(ПутьКФайлу);
	Если ПутьКФайлу <> Неопределено Тогда
		ВывестиHTTPЗапросВЛог(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод, ПутьКФайлу);
		ВывестиHTTPЗапросВЛог(HTTPОтвет,  Неопределено, Неопределено, ПутьКФайлу);
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ПараметрыОтправкиHTTPЗапросов", ПараметрыОтправкиHTTPЗапросов);
	ВозвращаемоеЗначение.Вставить("HTTPМетод",                     HTTPМетод);
	ВозвращаемоеЗначение.Вставить("HTTPЗапрос",                    HTTPЗапрос);
	ВозвращаемоеЗначение.Вставить("HTTPОтвет",                     HTTPОтвет);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                   ТекстОшибки);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область СУЗ

// Возвращает доступные для текущего рабочего места настройки обмена с СУЗ на клиенте и на сервере
//
// Параметры:
//  Организации - Массив, ОпределяемыйТип.Организация - Организации для обмена.
//  ДатыПоследнегоЗапуска - Соответствие - Даты последнего запуска обменов на клиенте по расписанию.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ОбменНаСервере - Соответствие - Настройки обмена на сервере, см. функцию ИнтерфейсИСМПТК.НоваяНастройкаОбменаСУЗ()
//   * ОбменНаКлиенте - Соответствие - Настройки обмена на клиенте, см. функцию ИнтерфейсИСМПТК.НоваяНастройкаОбменаСУЗ()
//   * БезНастроек - Массив Из ОпределяемыйТип.Организация - Организации для которых нет настроек обмена.
Функция НастройкиОбменаСУЗ(Организации = Неопределено, ДатыПоследнегоЗапуска = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ОбменНаСервере", Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("ОбменНаКлиенте", Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("БезНастроек",    Новый Массив);
	
	ОбменНаКлиентеПоРасписанию = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлассификаторОрганизаций.Ссылка КАК Организация,
	|	
	|	ВЫБОР КОГДА НастройкиОбменаСУЗ.Организация ЕСТЬ NULL
	|		И ОбщиеНастройкиОбменаСУЗ.Организация ЕСТЬ NULL ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК ЕстьНастройкиОбменаСУЗ,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.СтанцияУправленияЗаказами ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.СтанцияУправленияЗаказами
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.СтанцияУправленияЗаказами ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.СтанцияУправленияЗаказами
	|		ИНАЧЕ Неопределено
	|	КОНЕЦ КАК СтанцияУправленияЗаказами,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.СтанцияУправленияЗаказами ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.СтанцияУправленияЗаказами.Идентификатор
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.СтанцияУправленияЗаказами ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.СтанцияУправленияЗаказами.Идентификатор
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Идентификатор,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.Адрес ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.Адрес
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.Адрес ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.Адрес
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Сервер,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.ИспользоватьЗащищенноеСоединение ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.ИспользоватьЗащищенноеСоединение
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.ИспользоватьЗащищенноеСоединение ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.ИспользоватьЗащищенноеСоединение
	|		ИНАЧЕ Ложь
	|	КОНЕЦ КАК ИспользоватьЗащищенноеСоединение,
	|
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.Порт ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.Порт
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.Порт ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.Порт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Порт,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.Таймаут ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.Таймаут
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.Таймаут ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.Таймаут
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Таймаут,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.Токен ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.Токен
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.Токен ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.Токен
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Токен,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.ИмяПользователя ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.ИмяПользователя
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.ИмяПользователя ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.ИмяПользователя
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИмяПользователя,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.ОбменНаСервере ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.ОбменНаСервере
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.ОбменНаСервере ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.ОбменНаСервере
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбменНаСервере,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.ОбменНаКлиентеПоРасписанию ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.ОбменНаКлиентеПоРасписанию
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.ОбменНаКлиентеПоРасписанию ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.ОбменНаКлиентеПоРасписанию
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбменНаКлиентеПоРасписанию,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.ОбменНаКлиентеРасписание ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.ОбменНаКлиентеРасписание
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.ОбменНаКлиентеРасписание ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.ОбменНаКлиентеРасписание
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ОбменНаКлиентеРасписание
	|ИЗ
	|	Справочник.Организации КАК КлассификаторОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаСУЗИСМПТК КАК НастройкиОбменаСУЗ
	|		ПО (КлассификаторОрганизаций.Ссылка = НастройкиОбменаСУЗ.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаСУЗИСМПТК КАК ОбщиеНастройкиОбменаСУЗ
	|		ПО (КлассификаторОрганизаций.Ссылка = ОбщиеНастройкиОбменаСУЗ.Организация)
	|");
	
	Если Организации <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + 
		"И КлассификаторОрганизаций.Ссылка В(&Организации)";
	КонецЕсли;
	
	Если ОбменНаКлиентеПоРасписанию Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС +
		"И ВЫБОР
		|	КОГДА НЕ НастройкиОбменаСУЗ.ОбменНаКлиентеПоРасписанию ЕСТЬ NULL ТОГДА
		|		НастройкиОбменаСУЗ.ОбменНаКлиентеПоРасписанию
		|	КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.ОбменНаКлиентеПоРасписанию ЕСТЬ NULL ТОГДА
		|		ОбщиеНастройкиОбменаСУЗ.ОбменНаКлиентеПоРасписанию
		|	ИНАЧЕ ЛОЖЬ
		|КОНЕЦ
		|";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организации",  Организации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбменНаКлиентеПоРасписаниюТребуется = Ложь;
		Если ОбменНаКлиентеПоРасписанию Тогда
			Если Выборка.ОбменНаКлиентеПоРасписанию Тогда
				Расписание = Выборка.ОбменНаКлиентеРасписание.Получить();
				Если Расписание <> Неопределено Тогда
					ДатаПоследнегоЗапуска = ДатыПоследнегоЗапуска.Получить(Выборка.ОрганизацияЕГАИС);
					Если ДатаПоследнегоЗапуска = Неопределено
						Или Расписание.ТребуетсяВыполнение(ТекущаяДатаСеанса(), ДатаПоследнегоЗапуска) Тогда
						ОбменНаКлиентеПоРасписаниюТребуется = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбменНаКлиентеПоРасписанию
			И Не ОбменНаКлиентеПоРасписаниюТребуется Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ЕстьНастройкиОбменаСУЗ Тогда
			
			НастройкаОбменаСУЗ = ИнтерфейсИСМПТК.НоваяНастройкаОбменаСУЗ();
			НастройкаОбменаСУЗ.Сервер                           = Выборка.Сервер;
			НастройкаОбменаСУЗ.Порт                             = Выборка.Порт;
			НастройкаОбменаСУЗ.Таймаут                          = Выборка.Таймаут;
			НастройкаОбменаСУЗ.ИспользоватьЗащищенноеСоединение = Выборка.ИспользоватьЗащищенноеСоединение;
			НастройкаОбменаСУЗ.СтанцияУправленияЗаказами        = Выборка.СтанцияУправленияЗаказами;
			НастройкаОбменаСУЗ.Идентификатор                    = Выборка.Идентификатор;
			НастройкаОбменаСУЗ.Токен                            = Выборка.Токен;
			НастройкаОбменаСУЗ.ИмяПользователя                  = Выборка.ИмяПользователя;
			
			Если Выборка.ОбменНаСервере Тогда
				ВозвращаемоеЗначение.ОбменНаСервере.Вставить(Выборка.Организация, НастройкаОбменаСУЗ);
			Иначе
				ВозвращаемоеЗначение.ОбменНаКлиенте.Вставить(Выборка.Организация, НастройкаОбменаСУЗ);
			КонецЕсли;
			
		Иначе
			
			Если Организации <> Неопределено Тогда
				ВозвращаемоеЗначение.БезНастроек.Добавить(Выборка.Организация);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Организации <> Неопределено Тогда
		
		Если ТипЗнч(Организации) = Тип("СправочникСсылка.Организации") Тогда
			ОрганизацииДляПроверки = Новый Массив;
			ОрганизацииДляПроверки.Добавить(Организации);
		Иначе
			ОрганизацииДляПроверки = Организации;
		КонецЕсли;
		
		Для Каждого Организация Из ОрганизацииДляПроверки Цикл
			Если ВозвращаемоеЗначение.ОбменНаКлиенте.Получить(Организация) = Неопределено
				И ВозвращаемоеЗначение.ОбменНаСервере.Получить(Организация) = Неопределено
				И ВозвращаемоеЗначение.БезНастроек.Найти(Организация) = Неопределено Тогда
				ВозвращаемоеЗначение.БезНастроек.Добавить(Организация);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область РаботаСЗапросами

// Формирует пакет запросов и возвращает результат каждого запроса
//
// Параметры:
//  Запрос				 - Запрос	 - запрос, параметры которого предварительно установлены.
//  ТекстыЗапроса		 - СписокЗначений	 - в списке перечислены тексты запросов и их имена.
//  ВыгрузитьРезультат	 - Булево			 - Истина, если результат запроса нужно выгрузить в таблицы значений.
// 
// Возвращаемое значение:
//  Структура - структура в которую помещены полученные таблицы
//
Функция ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса, ВыгрузитьРезультат = Ложь) Экспорт

	Таблицы = Новый Структура;
	
	МассивТекстаЗапроса = Новый Массив;
	
	// Формирование текст запроса.
	Для Каждого ТекстЗапроса из ТекстыЗапроса Цикл
		Если ЗначениеЗаполнено(ТекстЗапроса.Представление) Тогда
			МассивТекстаЗапроса.Добавить("// " + ТекстЗапроса.Представление);
		КонецЕсли;
		МассивТекстаЗапроса.Добавить(ТекстЗапроса.Значение);
		
		МассивТекстаЗапроса.Добавить(
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|");
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(МассивТекстаЗапроса, Символы.ПС);
	
	// Выполнение запроса.
	Результат = Запрос.ВыполнитьПакет();

	КоличествоЗапросовВПакете = 0;
	
	// Помещение результатов запроса в таблицы
	Для Каждого ТекстЗапроса из ТекстыЗапроса Цикл
		
		Если СтрЧислоВхождений(ТекстЗапроса.Значение, ";") > 0 Тогда
			Подзапросы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстЗапроса.Значение, ";");
			КоличествоПодзапросов = Подзапросы.Количество();
			ИндексЗапросаРезультате = Неопределено;
			Для Индекс = -(КоличествоПодзапросов - 1) По 0 Цикл
				Если Найти(Подзапросы[-Индекс], "#РезультатЗапроса#") > 0 Тогда
					ИндексЗапросаРезультате = -Индекс;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ИндексЗапросаРезультате = Неопределено Тогда
				ИндексЗапросаРезультате = КоличествоПодзапросов - 1;
			КонецЕсли;
		Иначе
			КоличествоПодзапросов = 1;
			ИндексЗапросаРезультате = 0;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстЗапроса.Представление) Тогда
			РезультатТаблица = Результат[КоличествоЗапросовВПакете + ИндексЗапросаРезультате];
			РезультатТаблица = ?(ВыгрузитьРезультат, РезультатТаблица.Выгрузить(), РезультатТаблица);
			Таблицы.Вставить(ТекстЗапроса.Представление, РезультатТаблица);
		КонецЕсли;
		
		КоличествоЗапросовВПакете = КоличествоЗапросовВПакете + КоличествоПодзапросов;
		
	КонецЦикла;
	
	Возврат Таблицы;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ИмяМетодаДляВидаДокументов(ВидыДокументов) Экспорт
	
	Если ВидыДокументов = "Акты" Тогда
		Возврат "edo-api/incoming-documents";
	ИначеЕсли ВидыДокументов = "УведомленияОВвозе" Тогда
		Возврат "edo-api/incoming-documents.eaeu";
	ИначеЕсли ВидыДокументов = "УведомленияОВвозеИмпорт" Тогда
		Возврат "edo-api/incoming-documents.import";
	ИначеЕсли ВидыДокументов = "УведомленияОбОтгрузке" Тогда
		Возврат "edo-api/incoming-documents.shipment";
	КонецЕсли;
	
КонецФункции

#Область РаботаСЧасовымиПоясами

// Формирует представление даты с часовым поясом.
//
// Параметры:
//  Дата        - ДатаВремя - дата, для которой нужно вывести представление.
//  ЧасовойПояс - Строка - идентификатор часового пояса.
// 
// Возвращаемое значение:
//  Строка - представление даты с часовым поясом.
//
Функция ДатаСЧасовымПоясом(Дата, Знач ЧасовойПояс = Неопределено) Экспорт
	
	Если ЧасовойПояс = Неопределено Тогда
		ЧасовойПояс = ЧасовойПоясСеанса();
	КонецЕсли;
	
	Смещение = (Дата - УниверсальноеВремя(Дата, ЧасовойПояс)) / 3600;
	Если Смещение > 0 Тогда
		Результат = Формат(Дата, "ДФ=yyyy-MM-ddTЧЧ:мм:сс") + "+" + Формат(+Смещение, "ЧЦ=2; ЧН=; ЧВН=") + ":00";
	Иначе
		Результат = Формат(Дата, "ДФ=yyyy-MM-ddTЧЧ:мм:сс") + "-" + Формат(-Смещение, "ЧЦ=2; ЧН=; ЧВН=") + ":00";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует представление даты в формате Coordinated Universal Time
//
// Параметры:
//  Дата - ДатаВремя - дата, представление которой необходимо получить.
// 
// Возвращаемое значение:
//  Строка - представление даты в формате Coordinated Universal Time(UTC).
//
Функция ДатаUTC(Дата) Экспорт
	
	Результат = Формат(Дата, "ДФ=yyyy-MM-ddTЧЧ:мм:сс") + "Z";
	
	Возврат Результат;
	
КонецФункции

Функция ДатаИзСтрокиUNIX(Значение, Делитель = 1000, ПриводитьКМестномуВремени = Истина) Экспорт
	
	Значение = '19700101' + Цел(Значение / Делитель);
	
	Если ПриводитьКМестномуВремени Тогда
		Возврат МестноеВремя(Значение);
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

// Возвращает временную дату, которая будет в дальнейшем преобразована в дату с часовым поясом.
//
// Параметры:
//  Дата - Дата - Дата для преобразования.
// 
// Возвращаемое значение:
//  Дата - Временная дата
//
Функция ВременнаяДата(Дата) Экспорт
	
	Возврат ДобавитьМесяц(Дата, -12 * 1000);
	
КонецФункции

#КонецОбласти

#Область ФункцииИспользующиеПереопределение

#Область Номенклатура

Функция ПредставлениеНоменклатуры(Номенклатура, Характеристика, Упаковка = Неопределено, Серия = Неопределено) Экспорт
	
	Представление = "";
	ИнтеграцияИСМПТКПереопределяемый.ЗаполнитьПредставлениеНоменклатуры(
		Представление, Номенклатура, Характеристика, Упаковка, Серия);
	
	Если Представление = "" Тогда
		МассивФормированияПредставления = Новый Массив;
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			МассивФормированияПредставления.Добавить(СокрЛП(Номенклатура));
		КонецЕсли;
		Если ЗначениеЗаполнено(Характеристика) Тогда
			МассивФормированияПредставления.Добавить(СокрЛП(Характеристика));
		КонецЕсли;
		Если ЗначениеЗаполнено(Упаковка) Тогда
			МассивФормированияПредставления.Добавить(СокрЛП(Упаковка));
		КонецЕсли;
		Если ЗначениеЗаполнено(Серия) Тогда
			МассивФормированияПредставления.Добавить(СокрЛП(Серия));
		КонецЕсли;
		Представление = СтрСоединить(МассивФормированияПредставления);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает отбор в списке по указанному значению для нужной колонки
// с учетом переданной структуры быстрого отбора.
//
// Параметры:
//  Список - ТаблицаФормы - динамический список, для которого требуется установить отбор
//  ИмяКолонки - Строка - Имя колонки, по которой устанавливается отбор
//  Значение - Произвольный - устанавливаемое значение отбора
//  СтруктураБыстрогоОтбора - Неопределено, Структура - Структура, содержащая ключи и значения отбора
//  Использование - Неопределено, Булево - Признак использования элемента отбора
//  ВидСравнения - Неопределено, ВидСравненияКомпоновкиДанных - вид сравнения, устанавливаемый для элемента отбора
//  ПриводитьЗначениеКЧислу - Булево - Признак приведения значения к числу.
//
Процедура ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, ИмяКолонки, Значение, Знач СтруктураБыстрогоОтбораРасширенная,
			Использование = Неопределено, ВидСравнения = Неопределено, ПриводитьЗначениеКЧислу = Ложь) Экспорт
	
	Если СтруктураБыстрогоОтбораРасширенная <> Неопределено Тогда
		
		Если СтруктураБыстрогоОтбораРасширенная.Количество() = 2
			И СтруктураБыстрогоОтбораРасширенная.Свойство("ИмяПоля")
			И СтруктураБыстрогоОтбораРасширенная.Свойство("Настройки") Тогда
			СтруктураБыстрогоОтбора = СтруктураБыстрогоОтбораРасширенная.Настройки;
			ИмяКолонкиДляПоиска = СтруктураБыстрогоОтбораРасширенная.ИмяПоля;
		Иначе
			СтруктураБыстрогоОтбора = СтруктураБыстрогоОтбораРасширенная;
			ИмяКолонкиДляПоиска = ИмяКолонки;
		КонецЕсли;
		
		Если СтруктураБыстрогоОтбора <> Неопределено
			И СтруктураБыстрогоОтбора.Свойство(ИмяКолонкиДляПоиска) Тогда
			
			ЗначениеОтбора = СтруктураБыстрогоОтбора[ИмяКолонкиДляПоиска];
			Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
				
				Если ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") Тогда
					Значение.ЗагрузитьЗначения(ЗначениеОтбора.ВыгрузитьЗначения());
				ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
					Значение.ЗагрузитьЗначения(ЗначениеОтбора);
				Иначе
					Значение.Очистить();
					Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
						Значение.Добавить(ЗначениеОтбора);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				Значение = ЗначениеОтбора;
				
			КонецЕсли;
			
			Если ПриводитьЗначениеКЧислу Тогда
				Значение = ?(ЗначениеЗаполнено(Значение), Число(Значение), Значение);
			КонецЕсли;
			
			Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
				ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, Значение.Количество() > 0, Использование);
			Иначе
				ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
			КонецЕсли;
			
			Если Список <> Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяКолонки, Значение, ВидСравнения,,ИспользованиеЭлементаОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Рассчитать хеш для строки
// 
// Параметры:
//  СтрокаДляРасчетаХеша - Строка - Строка для расчета хеша
// Возвращаемое значение:
//  Строка - Описание
Функция ХешированиеДанныхSHA256(СтрокаДляРасчетаХеша) Экспорт
	
	ХешированиеДанныхОбъект = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанныхОбъект.Добавить(СтрокаДляРасчетаХеша);
	
	Возврат Base64Строка(ХешированиеДанныхОбъект.ХешСумма);
	
КонецФункции

#КонецОбласти

#Область Обмен

Функция ВремяОжидания(НомерИтерации) Экспорт
	
	Если НомерИтерации <= 1 Тогда
		ВремяОжидания = 5;
	ИначеЕсли НомерИтерации < 15 Тогда
		ВремяОжидания = 5 * Pow(1.4, НомерИтерации - 1);
	Иначе
		ВремяОжидания = 120;
	КонецЕсли;
	
	Возврат ВремяОжидания;
	
КонецФункции

// Формирует пустую структуру сообщения XML
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ТекстОшибки                 - Строка - Текст ошибки.
//   * Ошибки                      - Соответствие - Описание ошибок.
//   * Описание                    - Строка - Описание для отображения в форме подписания.
//   * ТекстСообщенияJSON          - Строка - Текст сообщения JSON.
//   * ТипЗапроса                  - ПеречислениеСсылка.ТипыЗапросовИСМПТК - Тип сообщения.
//   * Организация                 - ОпределяемыйТип.Организации - Организация.
//   * Операция                    - ПеречислениеСсылка.ВидыОперацийИСМП - Вид операции.
//   * Документ                    - ДокументСсылка - Документ.
//   * Версия                      - Строка - Версия сообщения.
//   * СообщениеОснование          - СправочникСсылка.ИСМППрисоединенныеФайлы - сообщение основание.
//   * ДанныеДляПолученияДокумента - Структура - Данные для получения документа.
//   * ДокументОснование           - ДокументСсылка - Документ основание.
Функция СтруктураСообщенияJSON() Экспорт
	
	СообщениеJSON = Новый Структура;
	
	СообщениеJSON.Вставить("ТекстОшибки", "");
	СообщениеJSON.Вставить("Ошибки", Новый Соответствие);
	СообщениеJSON.Вставить("ИдентификаторЗаявки");

	// Для отображения в форме подписания
	СообщениеJSON.Вставить("Описание", "");
	// Для управления очередностью
	СообщениеJSON.Вставить("Идентификатор");
	СообщениеJSON.Вставить("ЗагружатьДо");
	СообщениеJSON.Вставить("ЗагружатьПосле");
	
	// Для использования в механизмах электронной подписи
	СообщениеJSON.Вставить("ТекстСообщенияJSON");
	СообщениеJSON.Вставить("ТребуетсяПодписание");
	СообщениеJSON.Вставить("ТипСообщения");
	СообщениеJSON.Вставить("Версия", 0);
	
	// Для сохранения в Протокол обмена
	СообщениеJSON.Вставить("ВерсияГосИС");
	СообщениеJSON.Вставить("ВидПродукции");
	СообщениеJSON.Вставить("Операция");
	СообщениеJSON.Вставить("Назначение");
	СообщениеJSON.Вставить("СтанцияУправленияЗаказами");
	
	// Используется при запросах квитанций
	СообщениеJSON.Вставить("СообщениеОснование");
	
	// Используется при получении кодов маркировки из СУЗ
	СообщениеJSON.Вставить("ПараметрыЗапроса");
	
	// Для обновления в формах
	СообщениеJSON.Вставить("Организация");
	СообщениеJSON.Вставить("Документ");
	СообщениеJSON.Вставить("ДокументОснование");
	
	Возврат СообщениеJSON;
	
КонецФункции

#КонецОбласти

#Область ОперацииОбменаДанными

// Сформировать описание операции для документа.
//
// Параметры:
//  Описание - Строка - Описание операции.
//  ДокументСсылка - ДокументСсылка - Документ.
//  НомерВерсии - Число - Номер версии.
// 
// Возвращаемое значение:
//  Строка - Описание операции.
//
Функция ОписаниеОперации(Описание, ДокументСсылка, НомерВерсии = Неопределено, ТекстПоКоличествуСообщений = Неопределено) Экспорт
	
	Если НомерВерсии = Неопределено И ДокументСсылка = Неопределено Тогда
		ТекстВозврата = Описание;
	ИначеЕсли НомерВерсии = Неопределено И ДокументСсылка <> Неопределено Тогда
		ТекстВозврата = СтрШаблон(НСтр("ru = '%1 по документу ""%2""';
										|en = '%1 по документу ""%2""'"), Описание, ДокументСсылка);
	ИначеЕсли НомерВерсии <> Неопределено И ДокументСсылка = Неопределено Тогда
		ТекстВозврата = СтрШаблон(НСтр("ru = '%1. Версия %2';
										|en = '%1. Версия %2'"), Описание, НомерВерсии);
	Иначе
		ТекстВозврата = СтрШаблон(НСтр("ru = '%1 по документу ""%2"". Версия %3';
										|en = '%1 по документу ""%2"". Версия %3'"), Описание, ДокументСсылка, НомерВерсии);
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекстПоКоличествуСообщений) Тогда
		ТекстВозврата = ТекстВозврата + ". " + ТекстПоКоличествуСообщений;
	КонецЕсли;
	
	Возврат ТекстВозврата;

КонецФункции

// Формирует текст счетчика по формату N из M.
//
// Параметры:
// 	ТекущийНомерГруппы - Число - текущий номер в группе.
// 	КоличествоГрупп - Число - Всего элементов в группе.
// Возвращаемое значение:
// 	Строка - Сформированный текст счетчика.
Функция ТекстКоличествоИзГруппы(ТекущийНомерГруппы, КоличествоГрупп) Экспорт
	Если КоличествоГрупп > ТекущийНомерГруппы Тогда
		Возврат СтрШаблон(НСтр("ru = '%1 из %2';
								|en = '%1 из %2'"), ТекущийНомерГруппы, КоличествоГрупп);
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ОбработкаОшибок

// Формирует пустую структуру изменений данных
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//
Функция СтруктураИзменения() Экспорт
	
	СтруктураИзменения = Новый Структура;
	
	// Назначение сообщений: ИСМП, МОТП или СУЗ
	СтруктураИзменения.Вставить("Операция");
	СтруктураИзменения.Вставить("Назначение");
	СтруктураИзменения.Вставить("СтанцияУправленияЗаказами");
	
	// Источник
	СтруктураИзменения.Вставить("Организация");
	СтруктураИзменения.Вставить("Объект");
	СтруктураИзменения.Вставить("ДокументОснование");
	
	// Событие
	СтруктураИзменения.Вставить("ТекстОшибки",           "");
	СтруктураИзменения.Вставить("ПодготовленоКПередаче", Ложь);
	СтруктураИзменения.Вставить("Передано",              Ложь);
	СтруктураИзменения.Вставить("Принято",               Ложь);
	СтруктураИзменения.Вставить("ОбъектИзменен",         Ложь);
	СтруктураИзменения.Вставить("НовыйСтатус",           Неопределено);
	
	// Описание, протокол
	СтруктураИзменения.Вставить("Сообщение");
	СтруктураИзменения.Вставить("ТекстСообщения");
	СтруктураИзменения.Вставить("ПредставлениеПротоколаОбмена");
	
	Возврат СтруктураИзменения;
	
КонецФункции

// Выполняет запись ошибки в журнал регистрации, добавляя имя события ВЕТИС.
//
// Параметры:
//  Заголовок   - Строка - заголовок сообщения.
//  ТекстОшибки - Строка - текст ошибки.
//
Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, ОбъектМетаданных = Неопределено, Данные = Неопределено) Экспорт
	
	ИнтеграцияИСМПТКВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
		ТекстОшибки,
		НСтр("ru = 'ИС МП';
			|en = 'ИС МП'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		ОбъектМетаданных,
		Данные);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗапроситьУстановитьКлючСессии(ТребуетсяЗапроситьУстановитьКлючСессии, ПодписанныеСообщенияПоОрганизациям) Экспорт

	Если ТребуетсяЗапроситьУстановитьКлючСессии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ТребуетсяЗапроситьУстановитьКлючСессии Цикл
		
		Организация                   = КлючИЗначение.Ключ;
		ДанныеДляУстановкиКлючаСессии = КлючИЗначение.Значение;
		
		Для Каждого ЭлементДанных Из ДанныеДляУстановкиКлючаСессии Цикл
			
			РезультатЗапросаИУстановкиКлючаСессии = ИнтерфейсАвторизацииИСМПТКСлужебный.ЗапроситьУстановитьКлючСессии(
				ЭлементДанных.ПараметрыЗапроса,
				ЭлементДанных.ПараметрыАвторизации,
				ПодписьИзСвойствПодписи(ЭлементДанных.СвойстваПодписи));
			
			Если Не РезультатЗапросаИУстановкиКлючаСессии.КлючСессииУстановлен
				И ПодписанныеСообщенияПоОрганизациям <> Неопределено Тогда
				
				// Вывести сообщение об ошибке установке ключа сессии.
				// Дальнейший обмен по организации невозможен.
				Сообщения = ПодписанныеСообщенияПоОрганизациям[Организация];
				Для Каждого Сообщение Из Сообщения Цикл
					Сообщение.ТекстОшибки = РезультатЗапросаИУстановкиКлючаСессии.ТекстОшибки;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодписьИзСвойствПодписи(ВходящиеДанные)

	Если ТипЗнч(ВходящиеДанные) = Тип("Строка") Тогда
		СвойстваПодписи = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	Иначе
		СвойстваПодписи = ВходящиеДанные;
	КонецЕсли;

	Если ТипЗнч(СвойстваПодписи) = Тип("Структура") Тогда
		Подпись = СвойстваПодписи.Подпись;
	Иначе
		Подпись = "";
	КонецЕсли;

	Возврат Подпись;

КонецФункции

// Заполняет представление регламентного задания (реквизиты ЗаданиеАктивно, ТекстРасписания)
//
// Параметры:
//  Задание				 - РегламентноеЗадание, Неопределено - регламентное задание представление которого необходимо получить
//  ТекстРасписания		 - Строка - представление расписания (выходной)
//  РасписаниеАктивно	 - Булево - использование задания (выходной)
//
Процедура ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(Задание, ТекстРасписания, РасписаниеАктивно) Экспорт
	
	РасписаниеАктивно = Ложь;
	
	Если Задание = Неопределено Тогда
		
		ТекстРасписания = НСтр("ru = '<Расписание не задано>'");
		
	Иначе
		
		Если Задание.Использование Тогда
			РасписаниеАктивно = Истина;
			ТекстРасписания = СтрШаблон(НСтр("ru = 'Расписание: %1'"), Строка(Задание.Расписание));
		Иначе
			ТекстРасписания = СтрШаблон(НСтр("ru = 'Расписание (НЕ АКТИВНО): %1'"), Строка(Задание.Расписание));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьНаличиеКодовВПуле(ЗаказКМ) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ПулКодовМаркировкиСУЗИСМПТК.КодМаркировки КАК КодМаркировки
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗИСМПТК КАК ПулКодовМаркировкиСУЗИСМПТК
	|ГДЕ
	|	ПулКодовМаркировкиСУЗИСМПТК.ЗаказНаЭмиссию = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЗаказКМ);
	
	ДанныеПоЗаказу = Новый Структура();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Количество() = 0 Тогда
		ДанныеПоЗаказу.Вставить("КодыПолучены",    Истина);
		ДанныеПоЗаказу.Вставить("КоличествоВПуле", Выборка.Количество());
	Иначе
		ДанныеПоЗаказу.Вставить("КодыПолучены",    Ложь);
		ДанныеПоЗаказу.Вставить("КоличествоВПуле", 0);
	КонецЕсли;
	
	Возврат ДанныеПоЗаказу;

КонецФункции

Функция ПолучитьЗначениеСтатусаКМПоСоответствию(СтатусКМСервер) Экспорт
	
	Если СтатусКМСервер = "INTRODUCED" 
		Или СтатусКМСервер = 2 Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВведенВОборот");
		
	ИначеЕсли СтатусКМСервер = "INTRODUCED_RETURNED" 
		Или СтатусКМСервер = 6 Тогда 
		
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВозвращенВОборот");
		
	ИначеЕсли СтатусКМСервер = "WITHDRAWN"
		Или СтатусКМСервер = 4 Тогда 

		Возврат ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВыведенИзОборота");
		
	ИначеЕсли СтатусКМСервер = "LOAN_RETIRED"
		Или СтатусКМСервер = 10 Тогда 
		
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВыведенИзОборотаРассрочка");
		
	ИначеЕсли СтатусКМСервер = "REMARK_RETIRED"
		Или СтатусКМСервер = 11 Тогда 
		
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВыведенИзОборотаПриПеремаркировке");
		
	ИначеЕсли СтатусКМСервер = "DISAGGREGATED"
		Или СтатусКМСервер = 7 Тогда 
		
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Дезагрегирован");
		
	ИначеЕсли СтатусКМСервер = "EXPORTED"
		Или СтатусКМСервер = 9 Тогда 
		
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Экспорт");
		
	ИначеЕсли СтатусКМСервер = "APPLIED"
		Или СтатусКМСервер = 1 Тогда 
		
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Нанесен");
		
	ИначеЕсли СтатусКМСервер = "APPLIED_NOT_PAID"
		Или СтатусКМСервер = 12 Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.НанесенНеОплачен");
		
	ИначеЕсли СтатусКМСервер = "WRITTEN_OFF"
		Или СтатусКМСервер = 3 Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Утилизирован");
		
	ИначеЕсли СтатусКМСервер = "EMITTED"
		Или СтатусКМСервер = 0 Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Эмитирован");
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

Функция ПолучитьЗначениеВидаПродукцииПоСоответствию(ВидПродукцииСервер) Экспорт
	
	Если ВидПродукцииСервер = "tobacco"
		Или ВидПродукцииСервер = 3 Тогда
		
		Возврат Перечисления.ВидыПродукцииИСМПТК.Табачная;
		
	ИначеЕсли ВидПродукцииСервер = "shoes" 
		Или ВидПродукцииСервер = 2 Тогда
		
		Возврат Перечисления.ВидыПродукцииИСМПТК.Обувная;
		
	ИначеЕсли ВидПродукцииСервер = "milk"
		Или ВидПродукцииСервер = 8 Тогда
		
		Возврат Перечисления.ВидыПродукцииИСМПТК.МолочнаяПродукция;
		
	ИначеЕсли ВидПродукцииСервер = "pharma"
		Или ВидПродукцииСервер = 7 Тогда
		
		Возврат Перечисления.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты;
		
	ИначеЕсли ВидПродукцииСервер = "lp" Тогда
		Возврат Перечисления.ВидыПродукцииИСМПТК.ЛегкаяПромышленность;
		
	ИначеЕсли ВидПродукцииСервер = "water" Тогда
		Возврат Перечисления.ВидыПродукцииИСМПТК.БезалкогольныеНапитки;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначениеВидУпаковкиПоСоответствию(ВидУпаковкиСервер) Экспорт
	
	Если ВидУпаковкиСервер = "UNIT" Тогда  
		Возврат Перечисления.ВидыУпаковокИСМПТК.Потребительская;
		
	ИначеЕсли ВидУпаковкиСервер = "LEVEL1" Тогда
		Возврат Перечисления.ВидыУпаковокИСМПТК.Групповая;
		
	ИначеЕсли ВидУпаковкиСервер = "LEVEL2" Тогда
		Возврат Перечисления.ВидыУпаковокИСМПТК.Логистическая;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция ДопустимыеСтатусыКМДляДокументаИСМПТ(НаименованиеДокумента) Экспорт
	
	ДопустимыеСтатусы = Новый Массив();
	
	Если НаименованиеДокумента = "УведОВводеВОборот" Тогда
		
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.ВыведенИзОборота);
		
	ИначеЕсли НаименованиеДокумента = "УведОВыводеИзВОборота" Тогда 
		
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.ВведенВОборот);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.ВозвращенВОборот);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Нанесен);
		
	ИначеЕсли НаименованиеДокумента = "АктПриемаПередачи" Тогда 
		
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.ВведенВОборот);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.ВозвращенВОборот);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Нанесен);
									   
	ИначеЕсли НаименованиеДокумента = "УведОВвозеЕАЭС" Тогда 
		
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Нанесен);
		
	ИначеЕсли НаименованиеДокумента = "УведОВвозеИмпорт" Тогда 
		
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Нанесен);
		
	ИначеЕсли НаименованиеДокумента = "УведОбЭкспортеЕАЭС" Тогда 
		
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.ВведенВОборот);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.ВозвращенВОборот);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Нанесен);

	ИначеЕсли НаименованиеДокумента = "АгрегацияКМ" Тогда 
		
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Нанесен);
		
	КонецЕсли;
	
	Возврат ДопустимыеСтатусы;
	
КонецФункции

Функция ЗапросИсторииКМ_ТипыДокументовПоСтутусуКода(СтатусКМСервер)
	
	ДопустимыеТипыДокументов = Новый Массив();
	
	Если СтатусКМСервер = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВведенВОборот") Тогда
		
		ДопустимыеТипыДокументов.Добавить("АктПриемаПередачиИСМПТК");
		ДопустимыеТипыДокументов.Добавить("УведомлениеОВвозеИзЕАЭСИСМПТК");
		ДопустимыеТипыДокументов.Добавить("УведомлениеОВвозеИзТретьихСтранИСМПТК");
		ДопустимыеТипыДокументов.Добавить("УведомлениеОбЭкспортеЕАЭСИСМПТК");
		
		Контур = "ИСМПТ";
		
	ИначеЕсли СтатусКМСервер = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВозвращенВОборот") Тогда 
		
		ДопустимыеТипыДокументов.Добавить("УведомлениеОВводеВОборотИСМПТК");
		
		Контур = "ИСМПТ";
		
	ИначеЕсли СтатусКМСервер = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВыведенИзОборота") Тогда 
		
		ДопустимыеТипыДокументов.Добавить("АктПриемаПередачиИСМПТК");
		ДопустимыеТипыДокументов.Добавить("УведомлениеОВыводеИзОборотаИСМПТК");
		
		Контур = "ИСМПТ";
		
	ИначеЕсли СтатусКМСервер = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВыведенИзОборотаПриПеремаркировке") 
		Или СтатусКМСервер = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВыведенИзОборотаРассрочка")
		Или СтатусКМСервер = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Утилизирован") Тогда

		 ДопустимыеТипыДокументов.Добавить("УведомлениеОВыводеИзОборотаИСМПТК");
		 
		 Контур = "ИСМПТ";
	
	ИначеЕсли СтатусКМСервер = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Экспорт") Тогда 
		
		ДопустимыеТипыДокументов.Добавить("УведомлениеОбЭкспортеЕАЭСИСМПТК");
		
		Контур = "ИСМПТ";
		
	ИначеЕсли СтатусКМСервер = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Нанесен")
		Или СтатусКМСервер = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.НанесенНеОплачен") Тогда 
		
		ДопустимыеТипыДокументов.Добавить("ЗаказКодовМаркировкиСУЗИСМПТК");
		ДопустимыеТипыДокументов.Добавить("НанесениеКодовМаркировкиСУЗИСМПТК");
		
		Контур = "СУЗ";
		
	ИначеЕсли СтатусКМСервер = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Дезагрегирован") Тогда 
		
		ДопустимыеТипыДокументов.Добавить("АктПриемаПередачиИСМПТК");
		ДопустимыеТипыДокументов.Добавить("УведомлениеОВвозеИзЕАЭСИСМПТК");
		ДопустимыеТипыДокументов.Добавить("УведомлениеОВвозеИзТретьихСтранИСМПТК");
		ДопустимыеТипыДокументов.Добавить("УведомлениеОбЭкспортеЕАЭСИСМПТК");
		ДопустимыеТипыДокументов.Добавить("УведомлениеОВыводеИзОборотаИСМПТК");
		ДопустимыеТипыДокументов.Добавить("УведомлениеОВводеВОборотИСМПТК");		
		
		Контур = "ИСМПТ";
		
	ИначеЕсли СтатусКМСервер = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Эмитирован") Тогда 
		
		ДопустимыеТипыДокументов.Добавить("ЗаказКодовМаркировкиСУЗИСМПТК");
		
		Контур = "СУЗ";
		
	КонецЕсли;	
	
	СведенияОДокументе = Новый Структура();
	СведенияОДокументе.Вставить("ДопустимыеТипы", ДопустимыеТипыДокументов);
	СведенияОДокументе.Вставить("Контур", Контур);
	
	Возврат СведенияОДокументе;
	
КонецФункции

Функция ИсторияКМ_ПолучитьССылкуДокумента(СтатусКода, НомерДокументаИСМПТ) Экспорт
	
	Если Не ЗначениеЗаполнено(НомерДокументаИСМПТ) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураДопустимыеТипыДокументов = ЗапросИсторииКМ_ТипыДокументовПоСтутусуКода(СтатусКода);
	ДопустимыеТипы = СтруктураДопустимыеТипыДокументов.ДопустимыеТипы;
	Контур 		   = СтруктураДопустимыеТипыДокументов.Контур;
	
	//Формируем динамический запрос, проверяя наличие номера документа среди допустимых типов
	Запрос = Новый Запрос;
	
	Если Контур = "ИСМПТ" Тогда
		ПроверяемыйРеквизит = "НомерИСМПТ";
	Иначе
		ПроверяемыйРеквизит = "OrderID";
	КонецЕсли;
	
	Если ДопустимыеТипы.Количество() = 0 Тогда
		Возврат Неопределено;
		
	ИначеЕсли ДопустимыеТипы.Количество() = 1 Тогда
			
		ТекстЗапроса = "ВЫБРАТЬ
		|	ДокументМаркировки.Ссылка КАК Ссылка,
		|	ДокументМаркировки.Представление КАК Представление
		|ИЗ
		|	Документ." + ДопустимыеТипы[0] + " КАК ДокументМаркировки
		|ГДЕ
		|	ДокументМаркировки." + ПроверяемыйРеквизит + " = &НомерДокумента";
		
	Иначе
		
		ЭтоПерваяЧастьЗапроса = Истина;
		Для Каждого ТипДокумента Из ДопустимыеТипы Цикл
			
			Если ЭтоПерваяЧастьЗапроса Тогда 
				ТекстЗапроса = "ВЫБРАТЬ
				|	ДокументМаркировки.Ссылка КАК Ссылка,
				|	ДокументМаркировки.Представление КАК Представление
				|ИЗ
				|	Документ." + ТипДокумента + " КАК ДокументМаркировки
				|ГДЕ
				|	ДокументМаркировки." + ПроверяемыйРеквизит + " = &НомерДокумента
				|";
				ЭтоПерваяЧастьЗапроса = Ложь;
			Иначе
				ТекстЗапроса = ТекстЗапроса + 
				"ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ДокументМаркировки.Ссылка,
				|	ДокументМаркировки.Представление
				|ИЗ
				|	Документ." + ТипДокумента + " КАК ДокументМаркировки
				|ГДЕ
				|	ДокументМаркировки." + ПроверяемыйРеквизит + " = &НомерДокумента
				|"
			КонецЕсли;	
				
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НомерДокумента", НомерДокументаИСМПТ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеДокумента = Новый Структура();
		ДанныеДокумента.Вставить("Ссылка", 		  Выборка.Ссылка);
		ДанныеДокумента.Вставить("Представление", Выборка.Представление);
		ДанныеДокумента.Вставить("ТипДокумента",  Метаданные.НайтиПоТипу(ТипЗнч(Выборка.Ссылка)).Имя);
		Возврат ДанныеДокумента;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Неопределено;		
	
КонецФункции

#Область ДокументыИСМПТ_БМ

Функция МассивИСМПТСДокументомОснованияИБез(МассивИСМПТ) Экспорт
	
	СтруктураСДокументомОснованияИБез = Новый Структура;
	МассивИСМПТСДокументомОснования   = Новый Массив;
	МассивИСМПТБезДокументаОснования  = Новый Массив;
	
	Для Каждого ДокументИСМПТ Из МассивИСМПТ Цикл
	
	    Если ЗначениеЗаполнено(ДокументИСМПТ.ДокументОснование) Тогда
			МассивИСМПТСДокументомОснования.Добавить(ДокументИСМПТ);					
		Иначе
			МассивИСМПТБезДокументаОснования.Добавить(ДокументИСМПТ);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураСДокументомОснованияИБез.Вставить("МассивИСМПТСДокументомОснования",  МассивИСМПТСДокументомОснования); 
	СтруктураСДокументомОснованияИБез.Вставить("МассивИСМПТБезДокументаОснования", МассивИСМПТБезДокументаОснования); 
	
	Возврат СтруктураСДокументомОснованияИБез;
		
КонецФункции

Функция ПроверитьНаличиеСвязанногоДокументаИСМПТ(Основание, ЭтоПроверкаИзОснования = Ложь) Экспорт
	
	Если Основание = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ПроверитьНаличиеСвязанногоДокументаИСМПТ(Основание, ЭтоПроверкаИзОснования);
	
КонецФункции

#Область РазрешенныеДействия

Функция РазрешенныеДействияПоСтатусамАкта(Знач Направление, Знач ВидОперацииСНТ = Неопределено) Экспорт
	
	РазрешенныеДействия = Новый Соответствие();
	
	//Для исходящих
	Если Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий Тогда	
		
		//Подтверждение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Черновик, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отправлен, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку,	Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отклонен,			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отозван, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании, 	Ложь);			
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Ошибка, 			Ложь);			
		
		РазрешенныеДействия.Вставить(ИнтеграцияИСМПТККлиентСервер.ДействиеПодтверждение(), СоответствиеДоступностиДействия);	
		
		//Отклонение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Черновик, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отправлен, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку,	Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отклонен,			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отозван, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании, 	Ложь);			
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Ошибка, 			Ложь);
		
		РазрешенныеДействия.Вставить(ИнтеграцияИСМПТККлиентСервер.ДействиеОтклонение(), СоответствиеДоступностиДействия);	

		//Отзыв
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Черновик, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отправлен, 		Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку,	Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отклонен,			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отозван, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании, 	Ложь);			
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Ошибка, 			Ложь);
		
		РазрешенныеДействия.Вставить(ИнтеграцияИСМПТККлиентСервер.ДействиеОтзыв(), СоответствиеДоступностиДействия);	

		
	//Для входящих	
	Иначе
	
		//Подтверждение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Черновик, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отправлен, 		Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку,	Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отклонен,			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отозван, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании, 	Ложь);			
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Ошибка, 			Ложь);
		
		РазрешенныеДействия.Вставить(ИнтеграцияИСМПТККлиентСервер.ДействиеПодтверждение(), СоответствиеДоступностиДействия);	
		
		//Отклонение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Черновик, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отправлен, 		Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку,	Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отклонен,			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отозван, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании, 	Ложь);			
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Ошибка, 			Ложь);
		
		РазрешенныеДействия.Вставить(ИнтеграцияИСМПТККлиентСервер.ДействиеОтклонение(), СоответствиеДоступностиДействия);	

		//Отзыв
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Черновик, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отправлен, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку,	Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отклонен,			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отозван, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании, 	Ложь);			
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Ошибка, 			Ложь);
		
		РазрешенныеДействия.Вставить(ИнтеграцияИСМПТККлиентСервер.ДействиеОтзыв(), СоответствиеДоступностиДействия);	

		
	КонецЕсли;
	
	Возврат РазрешенныеДействия;
		
КонецФункции

Функция РазрешенныеДействияПоСтатусамУведомленияОРасхождении(Знач Направление, Знач ВидОперацииСНТ = Неопределено) Экспорт
	
	РазрешенныеДействия = Новый Соответствие();
	
	//Для исходящих
	Если Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий Тогда	
		
		//Подтверждение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Черновик, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отправлен, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку,	Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отклонен,			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отозван, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании, 	Ложь);			
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Ошибка, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Новое, 			Ложь);
		
		РазрешенныеДействия.Вставить(ИнтеграцияИСМПТККлиентСервер.ДействиеПодтверждение(), СоответствиеДоступностиДействия);
		
		//Отклонение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Черновик, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отправлен, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку,	Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отклонен,			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отозван, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании, 	Ложь);			
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Ошибка, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Новое, 			Ложь);
		
		РазрешенныеДействия.Вставить(ИнтеграцияИСМПТККлиентСервер.ДействиеОтклонение(), СоответствиеДоступностиДействия);	

	//Для входящих	
	Иначе
	
		//Подтверждение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Черновик, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отправлен, 		Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку,	Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отклонен,			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отозван, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании, 	Ложь);			
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Ошибка, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Новое, 			Ложь);
		
		РазрешенныеДействия.Вставить(ИнтеграцияИСМПТККлиентСервер.ДействиеПодтверждение(), СоответствиеДоступностиДействия);	
		
		//Отклонение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Черновик, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отправлен, 		Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку,	Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отклонен,			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отозван, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании, 	Ложь);			
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Ошибка, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Новое, 			Ложь);
		
		РазрешенныеДействия.Вставить(ИнтеграцияИСМПТККлиентСервер.ДействиеОтклонение(), СоответствиеДоступностиДействия);	
			
	КонецЕсли;
	
	Возврат РазрешенныеДействия;
		
КонецФункции

Функция РазрешенныеДействияПоСтатусамУведомленияОВвозеИзЕАЭС(Знач Направление, Знач ВидОперацииСНТ = Неопределено) Экспорт
	
	РазрешенныеДействия = Новый Соответствие();
	
	//Для исходящих
	Если Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий Тогда	
		
		//Подтверждение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Черновик, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отправлен, 		Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку,	Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отклонен,			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отозван, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании, 	Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Ошибка, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НеОпределен,		Ложь);
		
		РазрешенныеДействия.Вставить(ИнтеграцияИСМПТККлиентСервер.ДействиеПодтверждение(), СоответствиеДоступностиДействия);	
		
		//Отзыв
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Черновик, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отправлен, 		Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку,	Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден,Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отклонен,			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отозван, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании, 	Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Ошибка, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НеОпределен,		Ложь);
		
		РазрешенныеДействия.Вставить(ИнтеграцияИСМПТККлиентСервер.ДействиеОтзыв(), СоответствиеДоступностиДействия);	

		
	//Для входящих	
	Иначе
	
	КонецЕсли;
	
	Возврат РазрешенныеДействия;
		
КонецФункции

#КонецОбласти

Функция НайтиАктуальныеОснованияПоДокументамИСМПТ(Знач МассивИСМПТ) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().НайтиАктуальныеОснованияПоДокументамИСМПТ(МассивИСМПТ);
	
КонецФункции

// Очищает документ или элемент справочника.
// Устанавливает значения реквизитов в значения по умолчанию, очищает табличные части.
//
// Параметры:
//  Объект - ДокументОбъект.<Имя>, СправочникОбъект.<Имя> - Объект, который необходимо очистить.
//  ИсключаемыеРеквизиты - Строка - Имена реквизитов, через запятую, которые не будут очищены.
//   Если параметр не задан, то будут очищены все реквизиты.
//  ИсключаемыеТабличныеЧасти - Строка - Имена табличных частей, через запятую, которые не будут очищены.
//   Если параметр не задан, то будут очищены все табличные части.
//                               
Процедура ОчиститьОбъект(Объект, ИсключаемыеРеквизиты = Неопределено, ИсключаемыеТабличныеЧасти = Неопределено) Экспорт
	
	// Создать МассивИсключаемыхРеквизитов.
	Если ИсключаемыеРеквизиты = Неопределено Тогда
		МассивИсключаемыхРеквизитов = Новый Массив;
	Иначе
		МассивИсключаемыхРеквизитов = ИнтеграцияИСМПТККлиентСервер.МассивИмен(ИсключаемыеРеквизиты);	
	КонецЕсли;
	
	// Создать МассивИсключаемыхТабличныхЧастей.
	Если ИсключаемыеТабличныеЧасти = Неопределено Тогда
		МассивИсключаемыхТабличныхЧастей = Новый Массив;
	Иначе
		МассивИсключаемыхТабличныхЧастей = ИнтеграцияИСМПТККлиентСервер.МассивИмен(ИсключаемыеТабличныеЧасти);	
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Метаданные();
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();	
	ИмяГруппыОбъекта = Лев(ПолноеИмяОбъекта, Найти(ПолноеИмяОбъекта, ".") - 1);
	
	Если ИмяГруппыОбъекта = "Справочник" Тогда
		ПустойОбъект =  Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка();
	ИначеЕсли ИмяГруппыОбъекта = "Документ" Тогда
		ПустойОбъект =  Документы[МетаданныеОбъекта.Имя].ПустаяСсылка();
	КонецЕсли;
	
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Если МассивИсключаемыхРеквизитов.Найти(Реквизит.Имя) = Неопределено Тогда
			Объект[Реквизит.Имя] = ПустойОбъект[Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		Если МассивИсключаемыхТабличныхЧастей.Найти(ТабличнаяЧасть.Имя) = Неопределено Тогда
			Объект[ТабличнаяЧасть.Имя].Очистить();	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет документ СНТ на основании первичного документа.
//
// Параметры:
//  СсылкаПервичныйДокументСНТ - ДокументСсылка -
//   Счет-Документа, на основании которого необходимо заполнить СНТ.
//  ОбъектСНТ - ДокументОбъект.СНТ - СНТ, который необходимо заполнить.
//
Процедура ЗаполнитьИсходящийДокументИСМПТ(Знач СсылкаПервичныйДокументИСМПТ, ОбъектИСМПТ) Экспорт
	
	ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ЗаполнитьИсходящийДокументИСМПТ(СсылкаПервичныйДокументИСМПТ, ОбъектИСМПТ);
	
КонецПроцедуры

Функция ПолучитьПараметрыЗаполненияДокументовИСМПТПоУмолчанию() Экспорт
	
	ПараметрыЗаполненияДокумента = Новый Структура;	
	ДатаОформления 				 = ТекущаяДатаПользователя();
	
	ПараметрыЗаполненияДокумента.Вставить("ДатаДокумента"					, ДатаОформления);
	ПараметрыЗаполненияДокумента.Вставить("ПроводитьСозданныеДокументы"	 	, Ложь);
	ПараметрыЗаполненияДокумента.Вставить("ФормироватьСписокДокументов" 	, Ложь);
	
	Возврат ПараметрыЗаполненияДокумента;
	
КонецФункции

Функция СоздатьСписокПервичныхДокументов(ПараметрыСоздания) Экспорт
	
	СписокПервичныхДокументов = Новый Массив;
	Отказ = Ложь;
	
	ПараметрыЗаполненияПервичныхДокументов = ПолучитьПараметрыЗаполненияПервичныхДокументов(ПараметрыСоздания);
	МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияПервичныхДокументов(ПараметрыЗаполненияПервичныхДокументов);
	НачатьТранзакцию();
	
	ТипСоздаваемогоДокумента = ПараметрыСоздания.ТипСоздаваемогоДокумента;
	ИнтеграцияИСМПТКПереопределяемый.ЗаполнитьМассивПервичныхДокументов(ПараметрыЗаполненияПервичныхДокументов, МассивДанныхДляЗаполнения, СписокПервичныхДокументов, Отказ,, ТипСоздаваемогоДокумента);
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат СписокПервичныхДокументов; 
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;	
	
	Возврат СписокПервичныхДокументов;
	
КонецФункции

Функция ПолучитьПараметрыЗаполненияПервичныхДокументов(ПараметрыСоздания) Экспорт
	
	ПараметрыЗаполненияДокументаИСМПТ = ПолучитьПараметрыЗаполненияПервичныхДокументовПоУмолчанию();
	
	Для Каждого ЭлементСтрукуры  Из ПараметрыСоздания Цикл
		ПараметрыЗаполненияДокументаИСМПТ.Вставить(ЭлементСтрукуры.Ключ, ЭлементСтрукуры.Значение);	
	КонецЦикла;	
		
	Возврат ПараметрыЗаполненияДокументаИСМПТ;
	
КонецФункции

Функция ПолучитьПараметрыЗаполненияПервичныхДокументовПоУмолчанию() Экспорт
	
	ПараметрыЗаполненияПервичныхДокументов = Новый Структура;	
	
	ПараметрыЗаполненияПервичныхДокументов.Вставить("ДатаДокумента"	, ТекущаяДатаПользователя());
	ПараметрыЗаполненияПервичныхДокументов.Вставить("ПроводитьСозданныеДокументы"	 	, Ложь);
	ПараметрыЗаполненияПервичныхДокументов.Вставить("ФормироватьСписокДокументов" 		, Истина);
		
	Возврат ПараметрыЗаполненияПервичныхДокументов;
	
КонецФункции

// Возвращает значение настройки рабочей даты для пользователя или текущей даты сеанса,
// если рабочая дата пользователя не задана.
//
// Параметры:
//	ИмяПользователя - Строка - Имя пользователя, для которого запрашивается рабочая дата.
//		Если не задано, то устанавливается для текущего пользователя.
//
// Возвращаемое значение:
//	Дата - Значение настройки рабочей даты пользователя или текущая дата сеанса, если настройка не задана.
//
Функция ТекущаяДатаПользователя(ИмяПользователя = Неопределено) Экспорт

	Результат = ТекущаяДатаСеанса();
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеДляЗаполненияПервичныхДокументов(ПараметрыЗаполнения) Экспорт
	
	ДанныеДляЗаполнения = Новый Массив;
	
	ТаблицыДанныхДляЗаполненияИСМПТ = ПодготовитьТаблицыДанныхДляЗаполненияПервичныхДокументов(ПараметрыЗаполнения);
	Если ТаблицыДанныхДляЗаполненияИСМПТ = Неопределено Тогда
		Возврат ДанныеДляЗаполнения;
	КонецЕсли;
	
	ТаблицаРеквизитов  = ТаблицыДанныхДляЗаполненияИСМПТ.ТаблицаРеквизитов;
	ТаблицаТовары 	   = ТаблицыДанныхДляЗаполненияИСМПТ.ТаблицаТовары;
	
	СтруктураДокумента = ИнтеграцияИСМПТКПереопределяемый.ПолучитьПустуюСтруктуруДокументаОснованияДляАПП(ПараметрыЗаполнения);
	
	Реквизиты		   = СтруктураДокумента.Реквизиты;
	Товары 			   = СтруктураДокумента.Товары;
	
	СобщениеВыведено   = Ложь;
	
	ТекущийДокументОснования = Неопределено;
	
	Для Каждого СтрокаРеквизитов ИЗ  ТаблицаРеквизитов Цикл
		
		Если ТекущийДокументОснования <> СтрокаРеквизитов.ДокументОснование Тогда
			НомерПакета = 1;		
		Иначе
			НомерПакета = НомерПакета + 1;		
		КонецЕсли;		
		
		Если ТекущийДокументОснования <> СтрокаРеквизитов.ДокументОснование Тогда
			ТекущийДокументОснования = СтрокаРеквизитов.ДокументОснование;
		КонецЕсли;
		
		ТипДокумента   = ТипЗнч(ТекущийДокументОснования);
		Реквизиты.Очистить();
		Товары.Очистить();
		
		ПараметрыОтбораПоОснованиям = Новый Структура();
		ПараметрыОтбораПоОснованиям.Вставить("ДокументОснование", СтрокаРеквизитов.ДокументОснование);
		
		НоваяСтрокаРеквизитов = Реквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, СтрокаРеквизитов);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ДокументОснование", ТекущийДокументОснования);
		
		МассивСтрокТовары = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
		Товары = Товары.СкопироватьКолонки();
		
		Для Каждого СтрокаТовары Из МассивСтрокТовары Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		КонецЦикла;
		
		СтруктураДляПередачи = Новый Структура;
		СтруктураДляПередачи.Вставить("Реквизиты"		, Реквизиты.Скопировать());
		СтруктураДляПередачи.Вставить("Товары"			, Товары.Скопировать());
		ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);
		
	КонецЦикла;	
	
	Возврат ДанныеДляЗаполнения;	
	
КонецФункции

Функция ПодготовитьТаблицыДанныхДляЗаполненияПервичныхДокументов(ПараметрыЗаполнения) Экспорт 
	
	ДокументыОснования = ПараметрыЗаполнения.МассивИСМПТДляСозданияПервичныхДокументов;
	
	ПараметрыЗаполнения.Вставить("ТипДокументаИСМПТ", ТипЗнч(ДокументыОснования[0]));
	ПараметрыЗаполнения.Вставить("НаправлениеДокументаИСМПТ", ДокументыОснования[0].Направление);
	ТипДокумента = ПараметрыЗаполнения.ТипСоздаваемогоДокумента;
	
	Запрос 		 = Новый Запрос;
	ТекстЗапроса = ИнтеграцияИСМПТКПереопределяемый.ПодготовитьТекстЗапросаДляЗаполненияПервичныхДокументов(ПараметрыЗаполнения);
	ТекстЗапроса = ИнтеграцияИСМПТКПереопределяемый.ДополнитьТекстЗапросЗаполнения(ТекстЗапроса);
				
	Запрос.Текст = ТекстЗапроса;
	
 	Для Каждого ЭлементСтрукуры  Из ПараметрыЗаполнения Цикл
		Запрос.УстановитьПараметр(ЭлементСтрукуры.Ключ, ЭлементСтрукуры.Значение);	
	КонецЦикла;	
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицыДанныхДляЗаполненияИСМПТ = Новый Структура;
	ТаблицыДанныхДляЗаполненияИСМПТ.Вставить("ТаблицаРеквизитов"		, РезультатЗапроса[КоличествоПакетов - 2].Выгрузить());
	ТаблицыДанныхДляЗаполненияИСМПТ.Вставить("ТаблицаТовары"			, РезультатЗапроса[КоличествоПакетов - 1].Выгрузить());
		
	Возврат ТаблицыДанныхДляЗаполненияИСМПТ;
	
КонецФункции

Процедура ПроверитьИсходящиеДокументыИСМПТ(Знач МассивИсходящихДокументов) Экспорт
	
	ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ПроверитьИсходящиеДокументыИСМПТ(МассивИсходящихДокументов);
	
КонецПроцедуры

Процедура ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответсвиеИменРеквизитовПолейЗапросов) Экспорт
	
	Для Каждого ЭлементСоответсвия Из СоответсвиеИменРеквизитовПолейЗапросов Цикл
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЭлементСоответсвия.Ключ, ЭлементСоответсвия.Значение); 	
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоИндивидуальныйПредприниматель(Знач СтруктурнаяЕдиница) Экспорт
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ЭтоИндивидуальныйПредприниматель(СтруктурнаяЕдиница);
	
КонецФункции

Функция ПроверитьСтатусУведомления(УОР) Экспорт 
	
	Если УОР.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик") 
		ИЛИ УОР.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Ошибка") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#Область ЕстьСвязанныеДокументыИСМПТ

Функция ПроверитьНаличиеСвязанногоДокументаМаркировки_Общая(Основание, ЭтоПроверкаИзОснования = Ложь) Экспорт
	
	Если Основание.Ссылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Ссылка,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Дата,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.ДокументОснование,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.НомерИСМПТ
		|ИЗ
		|	Документ.УведомлениеОбЭкспортеЕАЭСИСМПТК КАК УведомлениеОбЭкспортеЕАЭСИСМПТК
		|ГДЕ
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.ДокументОснование = &ДокументОснование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АктПриемаПередачиИСМПТ.Ссылка КАК Ссылка,
		|	АктПриемаПередачиИСМПТ.Дата КАК Дата,
		|	АктПриемаПередачиИСМПТ.ДокументОснование КАК ДокументОснование,
		|	АктПриемаПередачиИСМПТ.НомерИСМПТ КАК НомерИСМПТ
		|ИЗ
		|	Документ.АктПриемаПередачиИСМПТК КАК АктПриемаПередачиИСМПТ
		|ГДЕ
		|	АктПриемаПередачиИСМПТ.ДокументОснование = &ДокументОснование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УведомлениеОВводеВОборотИСМПТК.Ссылка,
		|	УведомлениеОВводеВОборотИСМПТК.Дата,
		|	УведомлениеОВводеВОборотИСМПТК.ДокументОснование,
		|	УведомлениеОВводеВОборотИСМПТК.НомерИСМПТ
		|ИЗ
		|	Документ.УведомлениеОВводеВОборотИСМПТК КАК УведомлениеОВводеВОборотИСМПТК
		|ГДЕ
		|	УведомлениеОВводеВОборотИСМПТК.ДокументОснование = &ДокументОснование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УведомлениеОВыводеИзОборотаИСМПТК.Ссылка,
		|	УведомлениеОВыводеИзОборотаИСМПТК.Дата,
		|	УведомлениеОВыводеИзОборотаИСМПТК.ДокументОснование,
		|	УведомлениеОВыводеИзОборотаИСМПТК.НомерИСМПТ
		|ИЗ
		|	Документ.УведомлениеОВыводеИзОборотаИСМПТК КАК УведомлениеОВыводеИзОборотаИСМПТК
		|ГДЕ
		|	УведомлениеОВыводеИзОборотаИСМПТК.ДокументОснование = &ДокументОснование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.Ссылка,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.Дата,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.ДокументОснование,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.НомерИСМПТ
		|ИЗ
		|	Документ.УведомлениеОВвозеИзЕАЭСИСМПТК КАК УведомлениеОВвозеИзЕАЭСИСМПТК
		|ГДЕ
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.ДокументОснование = &ДокументОснование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Ссылка,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Дата,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.ДокументОснование,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.НомерИСМПТ
		|ИЗ
		|	Документ.УведомлениеОВвозеИзТретьихСтранИСМПТК КАК УведомлениеОВвозеИзТретьихСтранИСМПТК
		|ГДЕ
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.ДокументОснование = &ДокументОснование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка,
		|	ЗаказКодовМаркировкиСУЗИСМПТК.Дата,
		|	ЗаказКодовМаркировкиСУЗИСМПТК.ДокументОснование,
		|	ЗаказКодовМаркировкиСУЗИСМПТК.OrderID
		|ИЗ
		|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК КАК ЗаказКодовМаркировкиСУЗИСМПТК
		|ГДЕ
		|	ЗаказКодовМаркировкиСУЗИСМПТК.ДокументОснование = &ДокументОснование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УведомлениеОПриемкеЕАЭСИСМПТК.Ссылка,
		|	УведомлениеОПриемкеЕАЭСИСМПТК.Дата,
		|	УведомлениеОПриемкеЕАЭСИСМПТК.ДокументОснование,
		|	Неопределено
		|ИЗ
		|	Документ.УведомлениеОПриемкеЕАЭСИСМПТК КАК УведомлениеОПриемкеЕАЭСИСМПТК
		|ГДЕ
		|	УведомлениеОПриемкеЕАЭСИСМПТК.ДокументОснование = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
		
	Возврат ПроверитьНаличиеСвязанного_Общий(Основание, ЭтоПроверкаИзОснования, ТекстЗапроса);

КонецФункции

#Область ПроверкаСвязанныхДокументов

Функция ПроверитьНаличиеСвязанногоАкта(Основание, ЭтоПроверкаИзОснования = Ложь) Экспорт
	
	Если Основание.Ссылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат ПроверитьНаличиеСвязанного_Общий(Основание, ЭтоПроверкаИзОснования, "", "АктПриемаПередачиИСМПТК");

КонецФункции

Функция ПроверитьНаличиеСвязанногоЭкспорта(Основание, ЭтоПроверкаИзОснования = Ложь) Экспорт
	
	Если Основание.Ссылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат ПроверитьНаличиеСвязанного_Общий(Основание, ЭтоПроверкаИзОснования, "", "УведомлениеОбЭкспортеЕАЭСИСМПТК");

КонецФункции

Функция ПроверитьСвязанноеНанесение(Основание, ЭтоПроверкаИзОснования = Ложь) Экспорт
	
	Если Основание.Ссылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка,
		|	ЗаказКодовМаркировкиСУЗИСМПТК.Дата,
		|	ЗаказКодовМаркировкиСУЗИСМПТК.ДокументОснование
		|ИЗ
		|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК КАК ЗаказКодовМаркировкиСУЗИСМПТК
		|ГДЕ
		|	ЗаказКодовМаркировкиСУЗИСМПТК.ДокументОснование = &ДокументОснование		
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
		
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	
	РезультаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультаЗапроса.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивСсылокДокументИСМПТ = РезультаЗапроса.ВыгрузитьКолонку("Ссылка");
	
	ДанныеДокументИСМПТ = Новый СписокЗначений;
	ДанныеДокументИСМПТ.ЗагрузитьЗначения(МассивСсылокДокументИСМПТ);
	
	Возврат ДанныеДокументИСМПТ;

КонецФункции

Функция ПроверитьНаличиеСвязанногоАктКорректировка(Основание, ЭтоПроверкаИзОснования = Ложь) Экспорт
	
	Если Основание.Ссылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АктПриемаПередачиИСМПТ.Ссылка КАК Ссылка,
	|	АктПриемаПередачиИСМПТ.Дата КАК Дата,
	|	АктПриемаПередачиИСМПТ.ДокументОснование КАК ДокументОснование,
	|	АктПриемаПередачиИСМПТ.УведомлениеОРасхождении КАК УведомлениеОРасхождении,
	|	АктПриемаПередачиИСМПТ.НомерИСМПТ КАК НомерИСМПТ
	|ИЗ
	|	Документ.АктПриемаПередачиИСМПТК КАК АктПриемаПередачиИСМПТ
	|ГДЕ
	|	АктПриемаПередачиИСМПТ.УведомлениеОРасхождении = &ДокументОснование
	|	И АктПриемаПередачиИСМПТ.ТипАкта = ЗНАЧЕНИЕ(Перечисление.ВидыДокументаИСМПТК.Исправленный)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
		
	Возврат ПроверитьНаличиеСвязанного_Общий(Основание, ЭтоПроверкаИзОснования, ТекстЗапроса);

КонецФункции

Функция ПроверитьНаличиеСвязанногоАктаИУведомления(Основание, ЭтоПроверкаИзОснования = Ложь) Экспорт
	
	//Проверяем одним запросом и АПП, и Уведомление о выводе (интернет-торговля)
	
	Если Основание.Ссылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	АктПриемаПередачиИСМПТ.Ссылка КАК Ссылка,
		|	АктПриемаПередачиИСМПТ.Дата КАК Дата,
		|	АктПриемаПередачиИСМПТ.ДокументОснование КАК ДокументОснование,
		|	АктПриемаПередачиИСМПТ.НомерИСМПТ КАК НомерИСМПТ
		|ИЗ
		|	Документ.АктПриемаПередачиИСМПТК КАК АктПриемаПередачиИСМПТ
		|ГДЕ
		|	АктПриемаПередачиИСМПТ.ДокументОснование = &ДокументОснование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УведомлениеОВыводеИзОборотаИСМПТК.Ссылка,
		|	УведомлениеОВыводеИзОборотаИСМПТК.Дата,
		|	УведомлениеОВыводеИзОборотаИСМПТК.ДокументОснование,
		|	УведомлениеОВыводеИзОборотаИСМПТК.НомерИСМПТ
		|ИЗ
		|	Документ.УведомлениеОВыводеИзОборотаИСМПТК КАК УведомлениеОВыводеИзОборотаИСМПТК
		|ГДЕ
		|	УведомлениеОВыводеИзОборотаИСМПТК.ДокументОснование = &ДокументОснование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УведомлениеОВводеВОборотИСМПТК.Ссылка,
		|	УведомлениеОВводеВОборотИСМПТК.Дата,
		|	УведомлениеОВводеВОборотИСМПТК.ДокументОснование,
		|	УведомлениеОВводеВОборотИСМПТК.НомерИСМПТ
		|ИЗ
		|	Документ.УведомлениеОВводеВОборотИСМПТК КАК УведомлениеОВводеВОборотИСМПТК
		|ГДЕ
		|	УведомлениеОВводеВОборотИСМПТК.ДокументОснование = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Возврат ПроверитьНаличиеСвязанного_Общий(Основание, ЭтоПроверкаИзОснования, ТекстЗапроса);
	
КонецФункции

Функция ПроверитьНаличиеСвязанногоУОР(Основание, ЭтоПроверкаИзОснования = Ложь) Экспорт
	
	Если Основание.Ссылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПроверитьНаличиеСвязанного_Общий(Основание, ЭтоПроверкаИзОснования, "", "УведомлениеОРасхожденииИСМПТК");

КонецФункции

Функция ПроверитьНаличиеСвязанногоУведомленияОВводеВОборот(Основание, ЭтоПроверкаИзОснования = Ложь) Экспорт
	
	Если Основание.Ссылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПроверитьНаличиеСвязанного_Общий(Основание, ЭтоПроверкаИзОснования, "", "УведомлениеОВводеВОборотИСМПТК");

КонецФункции

Функция ПроверитьНаличиеСвязанногоУведомленияОВыводеИзОборота(Основание, ЭтоПроверкаИзОснования = Ложь) Экспорт
	
	Если Основание.Ссылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат ПроверитьНаличиеСвязанного_Общий(Основание, ЭтоПроверкаИзОснования, "", "УведомлениеОВыводеИзОборотаИСМПТК");

КонецФункции

Функция ПроверитьНаличиеСвязанногоУведомленияОВвозе(Основание, ЭтоПроверкаИзОснования = Ложь, ИмяДокумента = Неопределено) Экспорт
	
	Если ИмяДокумента = "УведомлениеОВвозеИзЕАЭСИСМПТК" Тогда
		Возврат ПроверитьНаличиеСвязанногоУведомленияОВвозеЕАЭС(Основание, ЭтоПроверкаИзОснования);	
	ИначеЕсли ИмяДокумента = "УведомлениеОВвозеИзТретьихСтранИСМПТК" Тогда
		Возврат ПроверитьНаличиеСвязанногоУведомленияОВвозеИмпорт(Основание, ЭтоПроверкаИзОснования);
	КонецЕсли;
	
КонецФункции

Функция ПроверитьНаличиеСвязанногоУведомленияОВвозеЕАЭС(Основание, ЭтоПроверкаИзОснования = Ложь) Экспорт
	
	Если Основание.Ссылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПроверитьНаличиеСвязанного_Общий(Основание, ЭтоПроверкаИзОснования, "", "УведомлениеОВвозеИзЕАЭСИСМПТК");

КонецФункции

Функция ПроверитьНаличиеСвязанногоУведомленияОбЭкспортеЕАЭС(Основание, ЭтоПроверкаИзОснования = Ложь) Экспорт
	
	Если Основание.Ссылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПроверитьНаличиеСвязанного_Общий(Основание, ЭтоПроверкаИзОснования, "", "УведомлениеОбЭкспортеЕАЭСИСМПТК");

КонецФункции

Функция ПроверитьНаличиеСвязанногоУведомленияОВвозеИмпорт(Основание, ЭтоПроверкаИзОснования = Ложь) Экспорт
	
	Если Основание.Ссылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПроверитьНаличиеСвязанного_Общий(Основание, ЭтоПроверкаИзОснования, "", "УведомлениеОВвозеИзТретьихСтранИСМПТК");

КонецФункции

Функция ПроверитьНаличиеСвязанногоЗаказаКодов(Основание, ЭтоПроверкаИзОснования = Ложь) Экспорт
	
	Если Основание.Ссылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Ссылка,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Дата КАК Дата,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ДокументОснование,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.OrderID
		|ИЗ
		|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗ
		|ГДЕ
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ДокументОснование = &ДокументОснование		
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
		
	Возврат ПроверитьНаличиеСвязанного_Общий(Основание, ЭтоПроверкаИзОснования, ТекстЗапроса);

КонецФункции

Функция ПроверитьНаличиеСвязанногоУведомленияОВыводе(Основание, ЭтоПроверкаИзОснования = Ложь) Экспорт
	
	//Проверяем одним запросом и АПП, и Уведомление о выводе (интернет-торговля)
	
	Если Основание.Ссылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПроверитьНаличиеСвязанного_Общий(Основание, ЭтоПроверкаИзОснования, "", "УведомлениеОВыводеИзОборотаИСМПТК");

КонецФункции

Функция ПроверитьНаличиеВсехСвязанныхДокументовСПТУ(Основание, ЭтоПроверкаИзОснования = Ложь) Экспорт
	
	Если Основание.Ссылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АктПриемаПередачиИСМПТ.Ссылка КАК Ссылка,
	|	АктПриемаПередачиИСМПТ.Дата КАК Дата,
	|	АктПриемаПередачиИСМПТ.ДокументОснование КАК ДокументОснование,
	|	АктПриемаПередачиИСМПТ.НомерИСМПТ КАК НомерИСМПТ
	|ИЗ
	|	Документ.АктПриемаПередачиИСМПТК КАК АктПриемаПередачиИСМПТ
	|ГДЕ
	|	АктПриемаПередачиИСМПТ.ДокументОснование = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УведомлениеОВвозеИзЕАЭСИСМПТК.Ссылка,
	|	УведомлениеОВвозеИзЕАЭСИСМПТК.Дата,
	|	УведомлениеОВвозеИзЕАЭСИСМПТК.ДокументОснование,
	|	УведомлениеОВвозеИзЕАЭСИСМПТК.НомерИСМПТ
	|ИЗ
	|	Документ.УведомлениеОВвозеИзЕАЭСИСМПТК КАК УведомлениеОВвозеИзЕАЭСИСМПТК
	|ГДЕ
	|	УведомлениеОВвозеИзЕАЭСИСМПТК.ДокументОснование = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Ссылка,
	|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Дата,
	|	УведомлениеОВвозеИзТретьихСтранИСМПТК.ДокументОснование,
	|	УведомлениеОВвозеИзТретьихСтранИСМПТК.НомерИСМПТ
	|ИЗ
	|	Документ.УведомлениеОВвозеИзТретьихСтранИСМПТК КАК УведомлениеОВвозеИзТретьихСтранИСМПТК
	|ГДЕ
	|	УведомлениеОВвозеИзТретьихСтранИСМПТК.ДокументОснование = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УведомлениеОПриемкеЕАЭСИСМПТК.Ссылка,
	|	УведомлениеОПриемкеЕАЭСИСМПТК.Дата,
	|	УведомлениеОПриемкеЕАЭСИСМПТК.ДокументОснование,
	|	УведомлениеОПриемкеЕАЭСИСМПТК.НомерИСМПТ
	|ИЗ
	|	Документ.УведомлениеОПриемкеЕАЭСИСМПТК КАК УведомлениеОПриемкеЕАЭСИСМПТК
	|ГДЕ
	|	УведомлениеОПриемкеЕАЭСИСМПТК.ДокументОснование = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
		
	Возврат ПроверитьНаличиеСвязанного_Общий(Основание, ЭтоПроверкаИзОснования, ТекстЗапроса);

КонецФункции

#КонецОбласти

Функция ПроверитьНаличиеСвязанного_Общий(Основание, ЭтоПроверкаИзОснования, ТекстЗапроса = "", ИмяДокумента = Неопределено) Экспорт
	
	Запрос = Новый Запрос;		
	Если ТекстЗапроса = "" Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ДокументИСМПТ.Ссылка,
			|	ДокументИСМПТ.Дата,
			|	ДокументИСМПТ.ДокументОснование,
			|	ДокументИСМПТ.НомерИСМПТ
			|ИЗ
			|	Документ.&ИмяДокументаИСМПТ КАК ДокументИСМПТ
			|ГДЕ
			|	ДокументИСМПТ.ДокументОснование = &ДокументОснование";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяДокументаИСМПТ", ИмяДокумента);
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	
	РезультаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультаЗапроса.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивСсылокДокументИСМПТ = РезультаЗапроса.ВыгрузитьКолонку("Ссылка");
	
	ДанныеДокументИСМПТ = Новый СписокЗначений;
	ДанныеДокументИСМПТ.ЗагрузитьЗначения(МассивСсылокДокументИСМПТ);
	
	Возврат ДанныеДокументИСМПТ;

КонецФункции

#КонецОбласти                                                     

#Область СсылкиНаДокументы

Функция ПолучитьДанныеАППКорректировка(ДанныеФормы) Экспорт
	               
	Если ЗначениеЗаполнено(ДанныеФормы.Объект.АктКорректировка) Тогда
		АктКорректировка = ДанныеФормы.Объект.АктКорректировка;
	Иначе
		ДанныеПоАктКорректировка = ПроверитьНаличиеСвязанногоАктКорректировка(ДанныеФормы.Объект.Ссылка, Истина);
		
		Если (ТипЗнч(ДанныеПоАктКорректировка) <> Тип("СписокЗначений")) И (ДанныеПоАктКорректировка <> Неопределено) Тогда
			
			АктКорректировка = ДанныеПоАктКорректировка.Ссылка;
			
		ИначеЕсли (ТипЗнч(ДанныеПоАктКорректировка) = Тип("СписокЗначений")) И (ДанныеПоАктКорректировка.Количество() = 1) Тогда
			
			АктКорректировка = ДанныеПоАктКорректировка[0].Значение;
			
		Иначе 
			
			АктКорректировка = ПредопределенноеЗначение("Документ.АктПриемаПередачиИСМПТК.ПустаяСсылка");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АктКорректировка) Тогда
		
		ДанныеФормы.Объект.АктКорректировка = АктКорректировка;
		
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьТекстПроАППКорректировка(Форма, РеквизитНадписьАктКорректировка = "ПредставлениеАкт") Экспорт
	
	ДанныеАктКорректировка = Форма.ПредставлениеАкт;
	
	Если ДанныеАктКорректировка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма[РеквизитНадписьАктКорректировка] = ДанныеАктКорректировка;
	Форма.Элементы[РеквизитНадписьАктКорректировка].ЦветТекста = Новый Цвет(51, 51, 51); // текст формы

КонецПроцедуры

Функция ПолучитьДанныеУОР(ДанныеФормы) Экспорт
	               
	Если ЗначениеЗаполнено(ДанныеФормы.УведомлениеОРасхождении) Тогда
		УОР = ДанныеФормы.УведомлениеОРасхождении
	Иначе
		ДанныеПоУОР = ПроверитьНаличиеСвязанногоУОР(ДанныеФормы.Объект.Ссылка, Истина);
		
		Если (ТипЗнч(ДанныеПоУОР) <> Тип("СписокЗначений")) И (ДанныеПоУОР <> Неопределено) Тогда
			
			УОР = ДанныеПоУОР.Ссылка;
			
		ИначеЕсли (ТипЗнч(ДанныеПоУОР) = Тип("СписокЗначений")) И (ДанныеПоУОР.Количество() = 1) Тогда
			
			УОР = ДанныеПоУОР[0].Значение;
			
		Иначе 
			
			УОР = ПредопределенноеЗначение("Документ.УведомлениеОРасхожденииИСМПТК.ПустаяСсылка");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УОР) Тогда
		
		ДанныеФормы.УведомлениеОРасхождении = УОР;
		
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьТекстПроУОР(Форма, РеквизитНадписьУОР = "ПредставлениеУведомлениеОРасхождении") Экспорт
	
	ДанныеУОР = Форма.УведомлениеОРасхождении;
	
	Если ДанныеУОР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма[РеквизитНадписьУОР] = ДанныеУОР;
	Форма.Элементы[РеквизитНадписьУОР].ЦветТекста = Новый Цвет(51, 51, 51); // текст формы

КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

Функция ПолучитьПустуюСтруктуруДокументаАПП_ПоУОР() Экспорт
	
	СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаАПП_ПоУОР();
	Возврат ПолучитьТекстПакетовЗапросаДляЗаполненияОбщая(СтруктураДокумента); 
	
КонецФункции

Функция ПодготовитьДанныеДляЗаполненияДокументаИСМПТ(ПараметрыЗаполнения, ТипДокументаИСМПТ) Экспорт
	
	ДанныеДляЗаполнения = Новый Массив;
	
	ТаблицыДанныхДляЗаполненияДокументаИСМПТ = ПодготовитьТаблицыДанныхДляЗаполненияДокументаИСМПТ(ПараметрыЗаполнения, ТипДокументаИСМПТ);
	
	Если ТаблицыДанныхДляЗаполненияДокументаИСМПТ = Неопределено Тогда
		Возврат ДанныеДляЗаполнения;
	КонецЕсли;
		
	НеРазбиватьДокумент = Ложь;
	Если ПараметрыЗаполнения.Свойство("НеРазбиватьДокумент") Тогда
		НеРазбиватьДокумент = ПараметрыЗаполнения.НеРазбиватьДокумент;
	КонецЕсли;
	
	ТаблицаРеквизитов = ТаблицыДанныхДляЗаполненияДокументаИСМПТ.ТаблицаРеквизитов;
	Если ТаблицыДанныхДляЗаполненияДокументаИСМПТ.Свойство("ТаблицаТовары") Тогда
		ТаблицаТовары = ТаблицыДанныхДляЗаполненияДокументаИСМПТ.ТаблицаТовары;
	Иначе 
		ТаблицаТовары = Неопределено;
	КонецЕсли;	
	Если ТаблицыДанныхДляЗаполненияДокументаИСМПТ.Свойство("ТаблицаМарки") Тогда
		ТаблицаМарки = ТаблицыДанныхДляЗаполненияДокументаИСМПТ.ТаблицаМарки;
	Иначе 
		ТаблицаМарки = Неопределено;
	КонецЕсли;
	
	//Ввод АПП по УОР
	ДополнительныеПараметры = Новый Структура();
	Если ТипЗнч(ПараметрыЗаполнения.МассивДокументов) = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") Тогда
		ДополнительныеПараметры.Вставить("ЭтоКорректировкаАПП", Истина);
	Иначе
		ДополнительныеПараметры.Вставить("ЭтоКорректировкаАПП", Ложь);
	КонецЕсли;
	
	//Ввод Уведомления о ввозе из третьих стран
	Если ИнтеграцияИСМПТКПереопределяемый.ЭтоФормированиеУведомленияОВвозеИзТретьихСтран(ПараметрыЗаполнения.МассивДокументов, ТипДокументаИСМПТ) Тогда
		ДополнительныеПараметры.Вставить("ЭтоВвозИзТретьихСтран", Истина);
	Иначе
		ДополнительныеПараметры.Вставить("ЭтоВвозИзТретьихСтран", Ложь);
	КонецЕсли;
	
	//Ввод Уведомления о выводе из оборота по АПП
	Если ТипЗнч(ПараметрыЗаполнения.МассивДокументов) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда
		ДополнительныеПараметры.Вставить("ЭтоВводВИОПоАПП", Истина);
	Иначе
		ДополнительныеПараметры.Вставить("ЭтоВводВИОПоАПП", Ложь);
	КонецЕсли;
	
	СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаИСМПТ(ТипДокументаИСМПТ, ДополнительныеПараметры);
	
	Реквизиты = СтруктураДокумента.Реквизиты;
	Если СтруктураДокумента.Свойство("Товары") Тогда
		Товары = СтруктураДокумента.Товары;
	ИначеЕсли СтруктураДокумента.Свойство("Марки") Тогда
		Марки = СтруктураДокумента.Марки;
	КонецЕсли;
		
	СобщениеВыведено = Ложь;
	
	ТекущийДокументОснования = Неопределено;
		
	Для Каждого СтрокаРеквизитов ИЗ ТаблицаРеквизитов Цикл
		
		Если ТекущийДокументОснования <> СтрокаРеквизитов.ДокументОснование Тогда
			НомерПакета = 1;
		Иначе
			НомерПакета = НомерПакета + 1;
		КонецЕсли;
		
		Если ТекущийДокументОснования <> СтрокаРеквизитов.ДокументОснование Тогда
			ТекущийДокументОснования = СтрокаРеквизитов.ДокументОснование;
		КонецЕсли;
		
		ТипДокумента = ТипЗнч(ТекущийДокументОснования);

		Реквизиты.Очистить();
		НоваяСтрокаРеквизитов = Реквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, СтрокаРеквизитов);

		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ДокументОснование", ТекущийДокументОснования);
		
		Если Не ТаблицаТовары = Неопределено Тогда 
			Товары.Очистить();
			МассивСтрокТовары = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
			Для Каждого СтрокаТовары Из МассивСтрокТовары Цикл
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			КонецЦикла;
		КонецЕсли;
		
		Если Не ТаблицаМарки = Неопределено Тогда
			Марки.Очистить();
			МассивСтрокМарки = ТаблицаМарки.НайтиСтроки(ПараметрыОтбора);
			Для Каждого СтрокаМарки Из МассивСтрокМарки Цикл
				НоваяСтрока = Марки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМарки);
			КонецЦикла;
		КонецЕсли;
		
		СтруктураДляПередачи = Новый Структура;
		СтруктураДляПередачи.Вставить("Реквизиты",  Реквизиты.Скопировать());
		Если Не ТаблицаТовары = Неопределено Тогда
			СтруктураДляПередачи.Вставить("Товары", Товары.Скопировать());
		КонецЕсли;
		Если Не ТаблицаМарки = Неопределено Тогда
			СтруктураДляПередачи.Вставить("Марки",  Марки.Скопировать());
		КонецЕсли;
		
		ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);

	КонецЦикла;
	
	Возврат ДанныеДляЗаполнения;

КонецФункции

Функция ПодготовитьДанныеДляЗаполненияДокументаСУЗ(ПараметрыЗаполнения, ТипДокументаИСМПТ) Экспорт
	
	ДанныеДляЗаполнения = Новый Массив;
	
	ТаблицыДанныхДляЗаполненияДокументаИСМПТ = ПодготовитьТаблицыДанныхДляЗаполненияДокументаСУЗ(ПараметрыЗаполнения, ТипДокументаИСМПТ);
	
	Если ТаблицыДанныхДляЗаполненияДокументаИСМПТ = Неопределено Тогда
		Возврат ДанныеДляЗаполнения;
	КонецЕсли;
		
	НеРазбиватьДокумент = Ложь;
	Если ПараметрыЗаполнения.Свойство("НеРазбиватьДокумент") Тогда
		НеРазбиватьДокумент = ПараметрыЗаполнения.НеРазбиватьДокумент;
	КонецЕсли;
	
	ТаблицаРеквизитов = ТаблицыДанныхДляЗаполненияДокументаИСМПТ.ТаблицаРеквизитов;
	Если ТаблицыДанныхДляЗаполненияДокументаИСМПТ.Свойство("ТаблицаТовары") Тогда
		ТаблицаТовары = ТаблицыДанныхДляЗаполненияДокументаИСМПТ.ТаблицаТовары;
	Иначе 
		ТаблицаТовары = Неопределено;
	КонецЕсли;	

	Если Не ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.НанесениеКодовМаркировкиСУЗИСМПТК") Тогда
		//Если в исходном документе указан товар, у которого зарегистрировано несколько разных штрихкодов номенклатуры без указания упаковок и характеристик,
		//ТаблицаТовары будет содержать несколько строк для этой товарной позиции - по каждому штрихкоду из регистра. Заполнять так Заказ некорректно,
		//поэтому делаем дополнительную проверку и заполяем строку в Заказе с пустым GTIN, оставляя его на выбор пользователя. 
		СтрокаПроверки = "Номенклатура, Характеристика, ЕдиницаИзмеренияБазовая, Упаковка";
		//Получаем сгруппированный список товаров из таблицы и проверяем наличие повторов для каждого товара
		ТаблицаТоварыПроверочная = ТаблицаТовары.Скопировать();
		ТаблицаТоварыПроверочная.Свернуть(СтрокаПроверки); 
		Для Каждого СтрокаПроверочная Из ТаблицаТоварыПроверочная Цикл
			НайденныеСтрокиВТаблицеТовары = ТаблицаТовары.НайтиСтроки(Новый Структура(СтрокаПроверки, СтрокаПроверочная.Номенклатура, 
																									  СтрокаПроверочная.Характеристика, 
																									  СтрокаПроверочная.ЕдиницаИзмеренияБазовая, 
																									  СтрокаПроверочная.Упаковка));
			ПерваяСтрокаОбработана = Ложь;
			Если Не НайденныеСтрокиВТаблицеТовары.Количество() = 1 Тогда
				Для Каждого СтрокаТЧ Из НайденныеСтрокиВТаблицеТовары Цикл 
					//В первой строке из дублирующихся - очищаем GTIN, последующие строки - удаляем из таблицы
					Если Не ПерваяСтрокаОбработана Тогда 
						СтрокаТЧ.GTIN = "";
						ПерваяСтрокаОбработана = Истина;
					Иначе
						ТаблицаТовары.Удалить(СтрокаТЧ);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	                       
	СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаСУЗ(ТипДокументаИСМПТ);
	
	Реквизиты = СтруктураДокумента.Реквизиты;
	Товары 	  = СтруктураДокумента.Товары;
		
	СобщениеВыведено = Ложь;
	ТекущийДокументОснования = Неопределено;
		
	Для Каждого СтрокаРеквизитов ИЗ ТаблицаРеквизитов Цикл
		
		Если ТекущийДокументОснования <> СтрокаРеквизитов.ДокументОснование Тогда
			НомерПакета = 1;
		Иначе
			НомерПакета = НомерПакета + 1;
		КонецЕсли;
		
		Если ТекущийДокументОснования <> СтрокаРеквизитов.ДокументОснование Тогда
			ТекущийДокументОснования = СтрокаРеквизитов.ДокументОснование;
		КонецЕсли;
		
		ТипДокумента = ТипЗнч(ТекущийДокументОснования);

		Реквизиты.Очистить();
		НоваяСтрокаРеквизитов = Реквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, СтрокаРеквизитов);

		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ДокументОснование", ТекущийДокументОснования);
		
		Если Не ТаблицаТовары = Неопределено Тогда 
			Товары.Очистить();
			МассивСтрокТовары = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
			Для Каждого СтрокаТовары Из МассивСтрокТовары Цикл
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			КонецЦикла;
		КонецЕсли;
						
		СтруктураДляПередачи = Новый Структура;
		СтруктураДляПередачи.Вставить("Реквизиты",  Реквизиты.Скопировать());
		Если Не ТаблицаТовары = Неопределено Тогда
			СтруктураДляПередачи.Вставить("Товары", Товары.Скопировать());
		КонецЕсли;
		
		ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);

	КонецЦикла;
	
	Возврат ДанныеДляЗаполнения;

КонецФункции

Функция ПодготовитьТаблицыДанныхДляЗаполненияДокументаИСМПТ(ПараметрыЗаполнения, ТипДокументаИСМПТ) Экспорт 
	
	ДокументыОснования = ПараметрыЗаполнения.МассивДокументов;
	
	Запрос = Новый Запрос;
	//1.Получаем данные из документа-основания по типу документа ИСМПТ
	ТекстЗапроса = ИнтеграцияИСМПТК.ПодготовитьТекстЗапросаДляЗаполненияДокументаИСМПТ(ПараметрыЗаполнения, ТипДокументаИСМПТ);
	
	//2.Получаем данные для заполнения документа ИСМПТ, данные уже сформированы в ТЧ ДанныеДокумента (по основанию)
	ТекстЗапроса = ДополнитьТекстЗапросЗаполненияДокументаИСМПТ(ТекстЗапроса, ТипДокументаИСМПТ, ДокументыОснования);
	//ТекстЗапроса = ДополнитьТекстЗапросЗаполненияСНТ_Расход(ТекстЗапроса);
	
	Запрос.Текст = ТекстЗапроса;
	
	Для Каждого ЭлементСтрукуры  Из ПараметрыЗаполнения Цикл
		Запрос.УстановитьПараметр(ЭлементСтрукуры.Ключ, ЭлементСтрукуры.Значение);	
	КонецЦикла;	
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицыДанныхДляЗаполненияИСМПТ = Новый Структура;
	Если Не ИнтеграцияИСМПТКПереопределяемый.ВключатьТаблицуМарок(ДокументыОснования) Тогда
		ТаблицыДанныхДляЗаполненияИСМПТ.Вставить("ТаблицаРеквизитов"	, РезультатЗапроса[КоличествоПакетов - 2].Выгрузить());
		ТаблицыДанныхДляЗаполненияИСМПТ.Вставить("ТаблицаТовары"		, РезультатЗапроса[КоличествоПакетов - 1].Выгрузить());
	Иначе
		ТаблицыДанныхДляЗаполненияИСМПТ.Вставить("ТаблицаРеквизитов"	, РезультатЗапроса[КоличествоПакетов - 2].Выгрузить());
		ТаблицыДанныхДляЗаполненияИСМПТ.Вставить("ТаблицаМарки"			, РезультатЗапроса[КоличествоПакетов - 1].Выгрузить());
	КонецЕсли;
	
	Возврат ТаблицыДанныхДляЗаполненияИСМПТ;
	
КонецФункции

Функция ПодготовитьТаблицыДанныхДляЗаполненияДокументаСУЗ(ПараметрыЗаполнения, ТипДокументаИСМПТ) Экспорт 
	
	ДокументыОснования = ПараметрыЗаполнения.МассивДокументов;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = ИнтеграцияИСМПТК.ПодготовитьТекстЗапросаДляЗаполненияДокументаСУЗ(ПараметрыЗаполнения, ТипДокументаИСМПТ);
	ТекстЗапроса = ДополнитьТекстЗапросЗаполненияДокументаСУЗ(ТекстЗапроса, ТипДокументаИСМПТ);
	
	Запрос.Текст = ТекстЗапроса;
	
	Для Каждого ЭлементСтрукуры  Из ПараметрыЗаполнения Цикл
		Запрос.УстановитьПараметр(ЭлементСтрукуры.Ключ, ЭлементСтрукуры.Значение);	
	КонецЦикла;	
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицаТоварыДляПередачи = РезультатЗапроса[КоличествоПакетов - 1].Выгрузить();
	
	ТаблицыДанныхДляЗаполненияИСМПТ = Новый Структура;
	ТаблицыДанныхДляЗаполненияИСМПТ.Вставить("ТаблицаРеквизитов", РезультатЗапроса[КоличествоПакетов - 2].Выгрузить());
	
	Если ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.НанесениеКодовМаркировкиСУЗИСМПТК") Тогда
		Если ТаблицаТоварыДляПередачи.Количество() <> 0 Тогда
			Если Не ЗначениеЗаполнено(ТаблицаТоварыДляПередачи[0].КодМаркировки) Тогда
				ТаблицаТоварыДляПередачи.Очистить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицыДанныхДляЗаполненияИСМПТ.Вставить("ТаблицаТовары", ТаблицаТоварыДляПередачи);
	
	Возврат ТаблицыДанныхДляЗаполненияИСМПТ;
	
КонецФункции

Функция ПодготовитьТекстЗапросаДляЗаполненияДокументаИСМПТ(ПараметрыЗаполнения, ТипДокументаИСМПТ) Экспорт
	
	//Если создаем документ ИС МПТ = ТипДокументаИСМПТ...
	
	Если ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК")
		ИЛИ ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.УведомлениеОбЭкспортеЕАЭСИСМПТК") Тогда
		
		Возврат ИнтеграцияИСМПТКПереопределяемый.ПодготовитьТекстЗапросаДляЗаполненияАПП(ПараметрыЗаполнения);
		
	ИначеЕсли ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") Тогда
		
		Возврат ИнтеграцияИСМПТКПереопределяемый.ПодготовитьТекстЗапросаДляЗаполненияУОР(ПараметрыЗаполнения);
		
	ИначеЕсли ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСМПТК") Тогда
		
		Возврат ИнтеграцияИСМПТКПереопределяемый.ПодготовитьТекстЗапросаДляЗаполненияВводВОборот(ПараметрыЗаполнения);
		
	ИначеЕсли ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСМПТК") Тогда
		
		Возврат ИнтеграцияИСМПТКПереопределяемый.ПодготовитьТекстЗапросаДляЗаполненияВыводИзОборота(ПараметрыЗаполнения);
		
	ИначеЕсли ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК") Тогда
		 
		Возврат ИнтеграцияИСМПТКПереопределяемый.ПодготовитьТекстЗапросаДляЗаполненияВвозТоваровИзЕАЭС(ПараметрыЗаполнения);
		
	ИначеЕсли ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК") Тогда
		 
		Возврат ИнтеграцияИСМПТКПереопределяемый.ПодготовитьТекстЗапросаДляЗаполненияВвозТоваровИзТретьихСтран(ПараметрыЗаполнения);
		
	ИначеЕсли ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.УведомлениеОПриемкеЕАЭСИСМПТК") Тогда
		 
		Возврат ИнтеграцияИСМПТКПереопределяемый.ПодготовитьТекстЗапросаДляЗаполненияПриемкаЕАЭС(ПараметрыЗаполнения);
		
	КонецЕсли;
	
КонецФункции

Функция ПодготовитьТекстЗапросаДляЗаполненияДокументаСУЗ(ПараметрыЗаполнения, ТипДокументаИСМПТ) Экспорт
	
	Если ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК") Тогда
		
		Возврат ИнтеграцияИСМПТКПереопределяемый.ПодготовитьТекстЗапросаДляЗаполненияЗаказКодов(ПараметрыЗаполнения);
		
	ИначеЕсли ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.НанесениеКодовМаркировкиСУЗИСМПТК") Тогда
		
		Возврат ИнтеграцияИСМПТКПереопределяемый.ПодготовитьТекстЗапросаДляЗаполненияНанесенияКодов(ПараметрыЗаполнения);
		
	КонецЕсли;
	
КонецФункции

Функция ДополнитьТекстЗапросЗаполненияДокументаИСМПТ(ТекстЗапроса, ТипДокументаИСМПТ, Основание = Неопределено) Экспорт
	
	Если ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК")
		Или ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.УведомлениеОбЭкспортеЕАЭСИСМПТК") Тогда
		
		Если СтрНайти(ТекстЗапроса, "УведомлениеОРасхожденииИСМПТК") = 0 Тогда
			Возврат ИнтеграцияИСМПТКПереопределяемый.ДополнитьТекстЗапросЗаполненияАПП(ТекстЗапроса);
		Иначе
			Возврат ИнтеграцияИСМПТКПереопределяемый.ДополнитьТекстЗапросЗаполненияАПП_ПоУОР(ТекстЗапроса);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") Тогда
		
		Возврат ИнтеграцияИСМПТКПереопределяемый.ДополнитьТекстЗапросЗаполненияУОР(ТекстЗапроса);
		
	ИначеЕсли ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСМПТК") Тогда
		
		Возврат ИнтеграцияИСМПТКПереопределяемый.ДополнитьТекстЗапросЗаполненияВводВОборот(ТекстЗапроса);  
		
	ИначеЕсли ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.УведомлениеОПриемкеЕАЭСИСМПТК") Тогда
		
		Возврат ИнтеграцияИСМПТКПереопределяемый.ДополнитьТекстЗапросЗаполненияПриемкаЕАЭС(ТекстЗапроса);
		
	ИначеЕсли ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСМПТК") Тогда
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда 
			Возврат ИнтеграцияИСМПТКПереопределяемый.ДополнитьТекстЗапросЗаполненияВИО_ПоАПП_СКодамиМаркировки(ТекстЗапроса);  
		Иначе
			Возврат ИнтеграцияИСМПТКПереопределяемый.ДополнитьТекстЗапросЗаполненияВыводИзОборота(ТекстЗапроса, Основание);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК")
		ИЛИ ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК") Тогда
		
		Возврат ИнтеграцияИСМПТКПереопределяемый.ДополнитьТекстЗапросЗаполненияВвозТоваровОбщий(ТекстЗапроса);
		
	КонецЕсли;
	
КонецФункции

Функция ДополнитьТекстЗапросЗаполненияДокументаСУЗ(ТекстЗапроса, ТипДокументаИСМПТ) Экспорт
	
	Если ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК") Тогда
		
		Возврат ИнтеграцияИСМПТКПереопределяемый.ДополнитьТекстЗапросЗаполненияЗаказКодов(ТекстЗапроса);
		
	ИначеЕсли ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.НанесениеКодовМаркировкиСУЗИСМПТК") Тогда
		
		Возврат ИнтеграцияИСМПТКПереопределяемый.ДополнитьТекстЗапросЗаполненияНанесениеКодов(ТекстЗапроса);
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТекстПакетовЗапросаДляЗаполненияАПП() Экспорт
	
	СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаАПП();
	Возврат ПолучитьТекстПакетовЗапросаДляЗаполненияОбщая(СтруктураДокумента); 
	
КонецФункции

Функция ПолучитьТекстПакетовЗапросаДляЗаполненияЗаказКодов() Экспорт
	
	СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаЗаказКодов();
	Возврат ПолучитьТекстПакетовЗапросаДляЗаполненияОбщая(СтруктураДокумента); 
	
КонецФункции

Функция ПолучитьТекстПакетовЗапросаДляЗаполненияНанесенияКодов() Экспорт
	
	СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаНанесениеКодов();
	Возврат ПолучитьТекстПакетовЗапросаДляЗаполненияОбщая(СтруктураДокумента); 
	
КонецФункции

Функция ПолучитьТекстПакетовЗапросаДляЗаполненияУОР() Экспорт
	
	СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаУОР();
	Возврат ПолучитьТекстПакетовЗапросаДляЗаполненияОбщая(СтруктураДокумента); 
	
КонецФункции

Функция ПолучитьТекстПакетовЗапросаДляЗаполненияВводВОборот() Экспорт
	
	СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаВводВОборот();
	Возврат ПолучитьТекстПакетовЗапросаДляЗаполненияОбщая(СтруктураДокумента); 
	
КонецФункции

Функция ПолучитьТекстПакетовЗапросаДляЗаполненияВыводИзОборота(СозданиеПоАПП) Экспорт
	
	СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаВыводИзОборота(СозданиеПоАПП);
	Возврат ПолучитьТекстПакетовЗапросаДляЗаполненияОбщая(СтруктураДокумента); 
	
КонецФункции

Функция ПолучитьТекстПакетовЗапросаДляЗаполненияВвозТоваровИзЕАЭС() Экспорт
	
	СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаВвозТоваровИзЕАЭС();
	Возврат ПолучитьТекстПакетовЗапросаДляЗаполненияОбщая(СтруктураДокумента); 
	
КонецФункции

Функция ПолучитьТекстПакетовЗапросаДляЗаполненияВвозТоваровИзТретьихСтран() Экспорт
	
	СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаВвозТоваровИзТретьихСтран();
	Возврат ПолучитьТекстПакетовЗапросаДляЗаполненияОбщая(СтруктураДокумента); 
	
КонецФункции

Функция ПолучитьТекстПакетовЗапросаДляЗаполненияПриемкаЕАЭС() Экспорт
	
	СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаПриемкаЕАЭС();
	Возврат ПолучитьТекстПакетовЗапросаДляЗаполненияОбщая(СтруктураДокумента); 
	
КонецФункции

Функция ПолучитьТекстПакетовЗапросаДляЗаполненияОбщая(СтруктураДокумента) Экспорт
	
	ТекстЗапроса = "";
	Для Каждого ЭлементСтруктуры Из СтруктураДокумента Цикл 
		
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ" + ?(ЭлементСтруктуры.Ключ = "Реквизиты",  " РАЗЛИЧНЫЕ", "") + " 
		|";
		
		КолонкиТЧ 			= ЭлементСтруктуры.Значение.Колонки;
		НомерКолонки 		= 0;
		КоличествоКолонок 	= КолонкиТЧ.Количество();
		Для Каждого КолонкаТЧ Из КолонкиТЧ Цикл
			НомерКолонки = НомерКолонки + 1;
			ТекстЗапроса = ТекстЗапроса + "
			|вт_ДанныеДляЗаполнения." + КолонкаТЧ.Имя + ?(НомерКолонки = КоличествоКолонок, "", ",");
		КонецЦикла;	
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ИЗ вт_ДанныеДляЗаполнения КАК вт_ДанныеДляЗаполнения";
		
		ТекстЗапроса = ТекстЗапроса + "
		|					
		|	УПОРЯДОЧИТЬ ПО
		|		ДокументОснование";
		
	КонецЦикла;	
			
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СоздатьУведомлениеОВыводеИзОборотаПоПроверкеАгрегации(Организация, ПричинаВыбытия, МассивКМДляСоздания, СсылкаНовый) Экспорт
	
	ДокументИСМПТ = Документы.УведомлениеОВыводеИзОборотаИСМПТК.СоздатьДокумент();
	
	Для Каждого СтрокаТЧ Из МассивКМДляСоздания Цикл
		НоваяСтрокаТЧ = ДокументИСМПТ.Марки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
	КонецЦикла;	
	
	ДокументИСМПТ.ПричинаВыводаИзОборота = ПричинаВыбытия;
	
	ДокументИСМПТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий");
	ДокументИСМПТ.Поставщик   = Организация;
	ДокументИСМПТ.Организация = Организация;
	СтруктураДанных = ИнтеграцияИСМПТКПереопределяемый.ПолучитьРеквизитыОрганизацииКонтрагента(Организация, "Поставщик");
	ЗаполнитьЗначенияСвойств(ДокументИСМПТ, СтруктураДанных, "ПоставщикИдентификационныйНомер, ПоставщикНаименование");
	
	Попытка 
		ДокументИСМПТ.Дата = ТекущаяДатаСеанса();
		ДокументИСМПТ.УстановитьНовыйНомер();
		
		ДокументИСМПТ.ДокументОснованиеНаименование = нСтр("ru='Уведомление о выводе из оборота'", "ru");
		ДокументИСМПТ.ДокументОснованиеДата  = ДокументИСМПТ.Дата;
		ДокументИСМПТ.ДокументОснованиеНомер = ДокументИСМПТ.Номер;
		
		ДокументИСМПТ.Записать(РежимЗаписиДокумента.Запись);
		
		СсылкаНовый = ДокументИСМПТ.Ссылка;
				
	Исключение
		
		ТекстСообщения = НСтр("ru = 'При записи документа ""%1"" произошла ошибка: %2'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументИСМПТ, ПодробноеПредставлениеОшибки);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СостояниеДокументов

Функция СостояниеДокументаИСМПТ(ДокументИСМПТ)Экспорт
	
	Если ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.Аннулирован Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.Аннулирован;
		
	ИначеЕсли ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.Отозван Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.Отозван;
		
	ИначеЕсли ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку Тогда
		
		Если ДокументИСМПТ.Направление = Перечисления.НаправленияДокументовИСМПТК.Входящий Тогда 
			Если ДокументИСМПТ.Проверен Тогда
				Состояние = Перечисления.СостоянияДокументовИСМПТК.ПринятПроверен;
			Иначе
				Состояние = Перечисления.СостоянияДокументовИСМПТК.ПринятОтПоставщика;
			КонецЕсли;
		Иначе
			Состояние = Перечисления.СостоянияДокументовИСМПТК.ДоставленПолучателю;
		КонецЕсли;
		
	ИначеЕсли ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.Отклонен Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ОтклоненПолучателем;
		
	ИначеЕсли ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ПодтвержденПолучателем;
		
	ИначеЕсли ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.Ошибка Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ОтклоненСервером;
		
	ИначеЕсли ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.НаСогласовании Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ОбрабатываетсяСервером;
		
	ИначеЕсли ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.Отправлен Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ПринятСервером;
		
	ИначеЕсли ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.Новое Тогда  //Для УОР. У получателя это статус Новое, у отправителя Отправлен
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ПринятСервером;
		
	ИначеЕсли ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.Проверяется Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ОбрабатываетсяСервером;
		
	ИначеЕсли ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.Оформлен Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ПринятСервером;
		
	ИначеЕсли ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.ОшибкаПриПроверке Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ОшибкаДанных;
		
	ИначеЕсли ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.ОшибкаПриОбработке Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ОтклоненСервером;
		
	//ИначеЕсли ПустаяСтрока(ДокументИСМПТ.НомерИСМПТ)
	//	И (ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.Черновик 				//АПП, УОР, Экспорт ЕАЭС
	//		Или ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.НеОпределен) Тогда  //Ввод в оборот, Вывод из оборота, Ввоз ЕАЭС, Ввоз Импорт
	//	
	//	Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован; 
	Иначе	
		Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован; //Пустая ссылка может привести к ошибкам при открытии из-за проверок доступности команд по значению состояния
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

Функция СостояниеДокументаСУЗ(ДокументСУЗ)Экспорт
	
	Если ТипЗнч(ДокументСУЗ.Ссылка) = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК") Тогда
		
		Если ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Черновик Тогда
					
			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Черновик;
			
		ИначеЕсли ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Создан Тогда
						
			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Создан;
			
		ИначеЕсли ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.ПринятКОбработке Тогда
			
			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.ОжидаетПодтверждения;
			
		ИначеЕсли ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.НеПодтвержденИСМП Тогда
			
			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.НеПодтвержден;
			
		ИначеЕсли ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.ПодтвержденИСМП Тогда
			
			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Подтвержден;
			
		ИначеЕсли ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.КодыМаркировкиЭмитированы Тогда
			
			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Готов;
			
		ИначеЕсли ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Выполнен Тогда
			
			Если ЗначениеЗаполнено(ДокументСУЗ.ПричинаОтклонения) Тогда
				Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.ЗакрытСОшибкой;
			Иначе
				Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Закрыт;
			КонецЕсли;
			
		Иначе
			
			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Черновик;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументСУЗ.Ссылка) = Тип("ДокументСсылка.АгрегацияКодовМаркировкиСУЗИСМПТК")
		ИЛИ ТипЗнч(ДокументСУЗ.Ссылка) = Тип("ДокументСсылка.НанесениеКодовМаркировкиСУЗИСМПТК") Тогда
		
		Если ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.Черновик Тогда
			
			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Черновик;
			
		ИначеЕсли ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.ВОжидании Тогда
			
			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.ОжидаетПодтверждения;
			
		ИначеЕсли ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.ГотовКОтправке Тогда
			
			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Готов;
			
		ИначеЕсли ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.Отклонен Тогда
			
			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Отклонен;
			
		ИначеЕсли ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.Отправлен 
			И ЗначениеЗаполнено(ДокументСУЗ.OrderID) Тогда
			
			Если ЗначениеЗаполнено(ДокументСУЗ.ПричинаОтклонения) Тогда
				Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.ЗакрытСОшибкой;
			Иначе
				Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Закрыт;
			КонецЕсли;
			
		ИначеЕсли ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.Отправлен 
			И Не ЗначениеЗаполнено(ДокументСУЗ.OrderID) Тогда

			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Готов;
			
		Иначе
			
			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Черновик;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

#КонецОбласти

#Область ОтправкаДокументовИСМПТ

// Проверяет корректность заполнения документов для отправки в ИС МПТ.
//
// Параметры:
//  МассивИсходящихДокументовИСМПТ - Массив - Массив документов, 
//   у которых необходимо проверить корректность заполнения.
//   Каждый элемент массива должен иметь тип "ДокументСсылка./Имя документа ИСМПТ/".
//	 ВАЖНО! Массив изменяется внутрии функции, Знач не устанавливаем перед объявлением переменной
//  ПоказыватьСообщения - Булево - Показывать сообщения об ошибках,
//   выявленных в ходе проверки, или не показывать.
//  ТекстыСообщений - Соответствие - Тексты ошибок, выявленных в ходе проверки.
//   |- Ключ - ДокументСсылка./Имя документа ИСМПТ/ - Документ, для которого найдены ошибки.
//   |- Значение - Соответствие - Тексты найденных ошибок.
//       |- Ключ - Строка - Путь к полю, в котором найдена ошибка.
//       |- Значение - Строка - Текст ошибки.
//
// Возвращаемое значение:
//  Булево - Возможность отправки всех документов ИСМПТ.
//   Истина - Если все документы из массива можно отправлять. 
//   Ложь - Если хотя бы один документ нельзя отправлять.
//
Функция ПроверитьВозможностьОтправкиДокументовПоставитьВОчередьОтправкиДокументИСМПТ(МассивИсходящихДокументовИСМПТ, ДополнительныеПараметры) Экспорт

	ОбработкаОбменИСМПТ = ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ();
	
	МассивИсключаемыхДокументовИСМПТ = Новый Массив;

	НеПерезаполнятьОчередьОтправки = ДополнительныеПараметры.Свойство("НеПерезаполнятьОчередьОтправки");
	
	СообщениеПользователю = Новый СообщениеПользователю;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивИсходящихДокументовИСМПТ", МассивИсходящихДокументовИСМПТ);
	
	МассивИсключаемыхСтатусов = Новый Массив;
	//АПП:
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСМПТК.Отозван);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСМПТК.Отклонен);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСМПТК.Отправлен);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден);
	//Уведомления:
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСМПТК.Оформлен);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСМПТК.Проверяется);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСМПТК.Новое);
	
	Запрос.УстановитьПараметр("Статусы", МассивИсключаемыхСтатусов);
	
	Если ТипЗнч(МассивИсходящихДокументовИСМПТ[0]) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда
		
		ТекстЗапроса = ПолучитьТекстЗапросаПроверкаОтправкиАПП();
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") Тогда
		
		ТекстЗапроса = ПолучитьТекстЗапросаПроверкаОтправкиУОР();
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСМПТК") Тогда
		
		ТекстЗапроса = ПолучитьТекстЗапросаПроверкаОтправкиВводВОборот();
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСМПТК") Тогда
		
		ТекстЗапроса = ПолучитьТекстЗапросаПроверкаОтправкиВыводИзОборота();
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК") Тогда
		
		ТекстЗапроса = ПолучитьТекстЗапросаПроверкаОтправкиВвозТоваровИзЕАЭС();
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК") Тогда
		
		ТекстЗапроса = ПолучитьТекстЗапросаПроверкаОтправкиВвозТоваровИзТретьихСтран();
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОбЭкспортеЕАЭСИСМПТК") Тогда
		
		ТекстЗапроса = ПолучитьТекстЗапросаПроверкаОтправкиЭкспортЕАЭС();
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОбЭкспортеЕАЭСИСМПТК") Тогда
		
		ТекстЗапроса = ПолучитьТекстЗапросаПроверкаОтправкиУведомлениеОбЭкспортеЕАЭСИСМПТК();
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОПриемкеЕАЭСИСМПТК") Тогда
		
		ТекстЗапроса = ПолучитьТекстЗапросаПроверкаОтправкиУведомлениеОПриемкеЕАЭС();

		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
		
		МассивИсключаемыхДокументовИСМПТ.Добавить(ВыборкаДетальныеЗаписи.СсылкаДокументИСМПТ);
		
		Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда  		
			ТекстСообщения = НСтр("ru = 'Документ ""%1"" со статусом ""%2"" исключен из пакета отправки, отправке подлежат документы со статусами: ""%3"", ""%4"", ""%5"", ""%6"", ""%7""'");
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения,
			ВыборкаДетальныеЗаписи.СсылкаДокументИСМПТ,
			ВыборкаДетальныеЗаписи.Статус,
			Перечисления.СтатусыДокументовИСМПТК.Черновик,
			Перечисления.СтатусыДокументовИСМПТК.Ошибка,
			Перечисления.СтатусыДокументовИСМПТК.ОшибкаПриПроверке,
			Перечисления.СтатусыДокументовИСМПТК.ОшибкаПриОбработке,
			Перечисления.СтатусыДокументовИСМПТК.НеОпределен);
			
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаДокументИСМПТ Из МассивИсключаемыхДокументовИСМПТ Цикл		
		
		ИндексСтроки = МассивИсходящихДокументовИСМПТ.Найти(СтрокаДокументИСМПТ);		
		Если НЕ ИндексСтроки = Неопределено Тогда			
			МассивИсходящихДокументовИСМПТ.Удалить(ИндексСтроки);		
		КонецЕсли;		
		
	КонецЦикла;
	
	Для Каждого СсылкаДокументИСМПТ Из МассивИсходящихДокументовИСМПТ Цикл
		
		РезультатПроверки = ОбработкаОбменИСМПТ.ПроверитьДокументИСМПТ(СсылкаДокументИСМПТ);
		ОбработкаОбменИСМПТ.СообщитьОбнаруженыОшибки(СсылкаДокументИСМПТ, РезультатПроверки);
		
		Если РезультатПроверки.ЗапрещающиеОшибки.Количество() <> 0 Тогда
			Возврат Ложь;	
		КонецЕсли;
		
	КонецЦикла;	
		
	Возврат МассивИсходящихДокументовИСМПТ.Количество() > 0;
	
КонецФункции

Функция ПолучитьТекстЗапросаПроверкаОтправкиАПП()
	
	Возврат "ВЫБРАТЬ
	|	АктПриемаПередачиИСМПТ.Ссылка КАК СсылкаДокументИСМПТ,
	|	АктПриемаПередачиИСМПТ.Статус КАК Статус
	|ИЗ
	|	Документ.АктПриемаПередачиИСМПТК КАК АктПриемаПередачиИСМПТ
	|ГДЕ
	|	АктПриемаПередачиИСМПТ.Ссылка В(&МассивИсходящихДокументовИСМПТ) И АктПриемаПередачиИСМПТ.Статус В (&Статусы)";
	
КонецФункции

Функция ПолучитьТекстЗапросаПроверкаОтправкиУОР()
	
	Возврат "ВЫБРАТЬ
	|	УведомлениеОРасхожденииИСМПТ.Ссылка КАК СсылкаДокументИСМПТ,
	|	УведомлениеОРасхожденииИСМПТ.Статус КАК Статус
	|ИЗ
	|	Документ.УведомлениеОРасхожденииИСМПТК КАК УведомлениеОРасхожденииИСМПТ
	|ГДЕ
	|	УведомлениеОРасхожденииИСМПТ.Ссылка В(&МассивИсходящихДокументовИСМПТ) И УведомлениеОРасхожденииИСМПТ.Статус В (&Статусы)";
	
КонецФункции

Функция ПолучитьТекстЗапросаПроверкаОтправкиВводВОборот()
	
	Возврат "ВЫБРАТЬ
	|	УведомлениеОВводеВОборотИСМПТ.Ссылка КАК СсылкаДокументИСМПТ,
	|	УведомлениеОВводеВОборотИСМПТ.Статус КАК Статус
	|ИЗ
	|	Документ.УведомлениеОВводеВОборотИСМПТК КАК УведомлениеОВводеВОборотИСМПТ
	|ГДЕ
	|	УведомлениеОВводеВОборотИСМПТ.Ссылка В(&МассивИсходящихДокументовИСМПТ) И УведомлениеОВводеВОборотИСМПТ.Статус В (&Статусы)";
	
КонецФункции

Функция ПолучитьТекстЗапросаПроверкаОтправкиВвозТоваровИзЕАЭС()
	
	Возврат "ВЫБРАТЬ
	|	УведомлениеОВвозеИзЕАЭСИСМПТК.Ссылка КАК СсылкаДокументИСМПТ,
	|	УведомлениеОВвозеИзЕАЭСИСМПТК.Статус КАК Статус
	|ИЗ
	|	Документ.УведомлениеОВвозеИзЕАЭСИСМПТК КАК УведомлениеОВвозеИзЕАЭСИСМПТК
	|ГДЕ
	|	УведомлениеОВвозеИзЕАЭСИСМПТК.Ссылка В(&МассивИсходящихДокументовИСМПТ) И УведомлениеОВвозеИзЕАЭСИСМПТК.Статус В (&Статусы)";
	
КонецФункции

Функция ПолучитьТекстЗапросаПроверкаОтправкиВвозТоваровИзТретьихСтран()
	
	Возврат "ВЫБРАТЬ
	|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Ссылка КАК СсылкаДокументИСМПТ,
	|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Статус КАК Статус
	|ИЗ
	|	Документ.УведомлениеОВвозеИзТретьихСтранИСМПТК КАК УведомлениеОВвозеИзТретьихСтранИСМПТК
	|ГДЕ
	|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Ссылка В(&МассивИсходящихДокументовИСМПТ) И УведомлениеОВвозеИзТретьихСтранИСМПТК.Статус В (&Статусы)";
	
КонецФункции

Функция ПолучитьТекстЗапросаПроверкаОтправкиВыводИзОборота()
	
	Возврат "ВЫБРАТЬ
	|	УведомлениеОВыводеИзОборотаИСМПТ.Ссылка КАК СсылкаДокументИСМПТ,
	|	УведомлениеОВыводеИзОборотаИСМПТ.Статус КАК Статус
	|ИЗ
	|	Документ.УведомлениеОВыводеИзОборотаИСМПТК КАК УведомлениеОВыводеИзОборотаИСМПТ
	|ГДЕ
	|	УведомлениеОВыводеИзОборотаИСМПТ.Ссылка В(&МассивИсходящихДокументовИСМПТ) И УведомлениеОВыводеИзОборотаИСМПТ.Статус В (&Статусы)";
	
КонецФункции

Функция ПолучитьТекстЗапросаПроверкаОтправкиЭкспортЕАЭС()
	
	Возврат "ВЫБРАТЬ
	|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Ссылка КАК СсылкаДокументИСМПТ,
	|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Статус КАК Статус
	|ИЗ
	|	Документ.УведомлениеОбЭкспортеЕАЭСИСМПТК КАК УведомлениеОбЭкспортеЕАЭСИСМПТК
	|ГДЕ
	|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Ссылка В(&МассивИсходящихДокументовИСМПТ)
	|	И УведомлениеОбЭкспортеЕАЭСИСМПТК.Статус В(&Статусы)";
	
КонецФункции

Функция ПолучитьТекстЗапросаПроверкаОтправкиУведомлениеОбЭкспортеЕАЭСИСМПТК()
	
	Возврат "ВЫБРАТЬ
	|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Ссылка КАК СсылкаДокументИСМПТ,
	|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Статус КАК Статус
	|ИЗ
	|	Документ.УведомлениеОбЭкспортеЕАЭСИСМПТК КАК УведомлениеОбЭкспортеЕАЭСИСМПТК
	|ГДЕ
	|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Ссылка В(&МассивИсходящихДокументовИСМПТ) И УведомлениеОбЭкспортеЕАЭСИСМПТК.Статус В (&Статусы)";
	
КонецФункции

Функция ПолучитьТекстЗапросаПроверкаОтправкиУведомлениеОПриемкеЕАЭС()

	Возврат "ВЫБРАТЬ
	|	УведомлениеОПриемкеЕАЭСИСМПТК.Ссылка КАК СсылкаДокументИСМПТ,
	|	УведомлениеОПриемкеЕАЭСИСМПТК.Статус КАК Статус
	|ИЗ
	|	Документ.УведомлениеОПриемкеЕАЭСИСМПТК КАК УведомлениеОПриемкеЕАЭСИСМПТК
	|ГДЕ
	|	УведомлениеОПриемкеЕАЭСИСМПТК.Ссылка В(&МассивИсходящихДокументовИСМПТ) И УведомлениеОПриемкеЕАЭСИСМПТК.Статус В (&Статусы)";

	
КонецФункции

#КонецОбласти

#Область ОтправкаДокументовСУЗ

// Проверяет корректность заполнения документов для отправки в СУЗ.
//
// Параметры:
//  МассивИсходящихДокументовИСМПТ - Массив - Массив документов, 
//   у которых необходимо проверить корректность заполнения.
//   Каждый элемент массива должен иметь тип "ДокументСсылка./Имя документа ИСМПТ/".
//	 ВАЖНО! Массив изменяется внутрии функции, Знач не устанавливаем перед объявлением переменной
//  ПоказыватьСообщения - Булево - Показывать сообщения об ошибках,
//   выявленных в ходе проверки, или не показывать.
//  ТекстыСообщений - Соответствие - Тексты ошибок, выявленных в ходе проверки.
//   |- Ключ - ДокументСсылка./Имя документа ИСМПТ/ - Документ, для которого найдены ошибки.
//   |- Значение - Соответствие - Тексты найденных ошибок.
//       |- Ключ - Строка - Путь к полю, в котором найдена ошибка.
//       |- Значение - Строка - Текст ошибки.
//
// Возвращаемое значение:
//  Булево - Возможность отправки всех документов ИСМПТ.
//   Истина - Если все документы из массива можно отправлять. 
//   Ложь - Если хотя бы один документ нельзя отправлять.
//
Функция ПроверитьВозможностьОтправкиДокументовПоставитьВОчередьОтправкиДокументСУЗ(МассивИсходящихДокументовСУЗ, ДополнительныеПараметры) Экспорт

	ОбработкаОбменИСМПТ = ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ();
	
	МассивИсключаемыхДокументовСУЗ = Новый Массив;

	НеПерезаполнятьОчередьОтправки = ДополнительныеПараметры.Свойство("НеПерезаполнятьОчередьОтправки");
	
	СообщениеПользователю = Новый СообщениеПользователю;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивИсходящихДокументовСУЗ", МассивИсходящихДокументовСУЗ);
	
	МассивИсключаемыхСтатусов = Новый Массив;
	//Заказы:
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.ПринятКОбработке);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.ПодтвержденИСМП);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.НеПодтвержденИСМП);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.ПринятКПроизводству);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.КодыМаркировкиЭмитированы);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.КодыМаркировкиЭмитированыЧастично);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Выполнен);
	//Отчеты:
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.ВОжидании);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.Отклонен);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.Отправлен);
	
	Запрос.УстановитьПараметр("Статусы", МассивИсключаемыхСтатусов);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	Если ТипЗнч(МассивИсходящихДокументовСУЗ[0]) = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК") Тогда
		
		ТекстЗапроса = ПолучитьТекстЗапросаПроверкаОтправкиЗаказНаЭмиссию();
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовСУЗ[0]) = Тип("ДокументСсылка.АгрегацияКодовМаркировкиСУЗИСМПТК") Тогда
		
		ТекстЗапроса = ПолучитьТекстЗапросаПроверкаОтправкиАгрегацииКодовМаркировки();
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовСУЗ[0]) = Тип("ДокументСсылка.НанесениеКодовМаркировкиСУЗИСМПТК") Тогда
		
		ТекстЗапроса = ПолучитьТекстЗапросаПроверкаОтправкиНанесенияКодовМаркировки();
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		МассивИсключаемыхДокументовСУЗ.Добавить(ВыборкаДетальныеЗаписи.СсылкаДокументИСМПТ);
		
		Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
			
			ТекстСообщения = НСтр("ru = 'Документ ""%1"" со статусом ""%2"" исключен из пакета отправки. Отправке подлежат документы со статусом ""%3"", не отправлявшиеся ранее.'");
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаДетальныеЗаписи.СсылкаДокументИСМПТ, ВыборкаДетальныеЗаписи.Статус, Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Черновик);
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаДокументИСМПТ Из МассивИсключаемыхДокументовСУЗ Цикл		
		
		ИндексСтроки = МассивИсходящихДокументовСУЗ.Найти(СтрокаДокументИСМПТ);		
		Если НЕ ИндексСтроки = Неопределено Тогда			
			МассивИсходящихДокументовСУЗ.Удалить(ИндексСтроки);		
		КонецЕсли;		
		
	КонецЦикла;
	
	Для Каждого СсылкаДокументИСМПТ Из МассивИсходящихДокументовСУЗ Цикл
		
		РезультатПроверки = ОбработкаОбменИСМПТ.ПроверитьДокументСУЗ(СсылкаДокументИСМПТ);
		ОбработкаОбменИСМПТ.СообщитьОбнаруженыОшибки(СсылкаДокументИСМПТ, РезультатПроверки);
		
		Если РезультатПроверки.ЗапрещающиеОшибки.Количество() <> 0 Тогда
			Возврат Ложь;	
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаДокументСУЗ Из МассивИсключаемыхДокументовСУЗ Цикл
		
		ИндексСтроки = МассивИсходящихДокументовСУЗ.Найти(СтрокаДокументСУЗ);
		Если НЕ ИндексСтроки = Неопределено Тогда
			МассивИсходящихДокументовСУЗ.Удалить(ИндексСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивИсходящихДокументовСУЗ.Количество() > 0;
	
КонецФункции

Функция ПолучитьТекстЗапросаПроверкаОтправкиЗаказНаЭмиссию()
	
	Возврат "ВЫБРАТЬ
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Ссылка КАК СсылкаДокументИСМПТ,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Статус КАК Статус
	|ИЗ
	|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗ
	|ГДЕ
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Ссылка В(&МассивИсходящихДокументовСУЗ)
	|	И (ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Статус В(&Статусы)
	|	ИЛИ НЕ ЗаказНаЭмиссиюКодовМаркировкиСУЗ.OrderID = &ПустаяСтрока)";
	
КонецФункции

Функция ПолучитьТекстЗапросаПроверкаОтправкиАгрегацииКодовМаркировки()
	
	Возврат "ВЫБРАТЬ
	|	АгрегацияКодовМаркировкиСУЗ.Ссылка КАК СсылкаДокументИСМПТ,
	|	АгрегацияКодовМаркировкиСУЗ.Статус КАК Статус
	|ИЗ
	|	Документ.АгрегацияКодовМаркировкиСУЗИСМПТК КАК АгрегацияКодовМаркировкиСУЗ
	|ГДЕ
	|	АгрегацияКодовМаркировкиСУЗ.Ссылка В(&МассивИсходящихДокументовСУЗ)
	|	И (АгрегацияКодовМаркировкиСУЗ.Статус В(&Статусы)
	|	ИЛИ НЕ АгрегацияКодовМаркировкиСУЗ.OrderID = &ПустаяСтрока)";
	
КонецФункции

Функция ПолучитьТекстЗапросаПроверкаОтправкиНанесенияКодовМаркировки()
	
	Возврат "ВЫБРАТЬ
	|	НанесениеКодовМаркировкиСУЗИСМПТК.Ссылка КАК СсылкаДокументИСМПТ,
	|	НанесениеКодовМаркировкиСУЗИСМПТК.Статус КАК Статус
	|ИЗ
	|	Документ.НанесениеКодовМаркировкиСУЗИСМПТК КАК НанесениеКодовМаркировкиСУЗИСМПТК
	|ГДЕ
	|	НанесениеКодовМаркировкиСУЗИСМПТК.Ссылка В(&МассивИсходящихДокументовСУЗ)
	|	И (НанесениеКодовМаркировкиСУЗИСМПТК.Статус В(&Статусы)
	|	ИЛИ НЕ НанесениеКодовМаркировкиСУЗИСМПТК.OrderID = &ПустаяСтрока)";
	
КонецФункции

#КонецОбласти

Функция ПолучитьСписокЗависшихЗаказовСУЗ(Организация) Экспорт
	
	Запрос = Новый Запрос();
	ТекстЗапроса = "ВЫБРАТЬ
	|	СтатусыЗаказовИСМПТК.Заказ КАК Заказ
	|ИЗ
	|	РегистрСведений.СтатусыЗаказовИСМПТК КАК СтатусыЗаказовИСМПТК
	|ГДЕ
	|	СтатусыЗаказовИСМПТК.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПодзаказовКодовМаркировкиСУЗИСМПТК.Запрошен)
	|	<Организация>
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатусыЗаказовИСМПТК.Заказ";
				   
	Если ЗначениеЗаполнено(Организация) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<Организация>", "И СтатусыЗаказовИСМПТК.Заказ.Организация = &Организация");
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Организация", Организация);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<Организация>", "");
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;

	СписокЗависшихЗаказовСУЗ = Новый Массив();
	Выборка	= Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		СписокЗависшихЗаказовСУЗ.Добавить(Выборка.Заказ);
	КонецЦикла;
	
	Возврат СписокЗависшихЗаказовСУЗ;
	
КонецФункции

Функция ПолучитьАдресаСерверовИСМПТ() Экспорт
	
	СервераИСМПТ = Новый Структура();
	СервераИСМПТ.Вставить("АдресИСМПТ", Константы.АдресСервераИСМПТК.Получить());
	СервераИСМПТ.Вставить("АдресСУЗ"  , Константы.АдресСервераСУЗИСМПТК.Получить());
	
	Возврат СервераИСМПТ;
	
КонецФункции

//Обрезает адрес сервера для использования в методах АПИ
//
Функция ОбработатьАдресИСМПТКонстанта(АдресКонстанта) Экспорт
	
	АдресИСМПТ = "";
	
	Если ЗначениеЗаполнено(АдресКонстанта) Тогда
		АдресКонстанта = СокрЛП(АдресКонстанта);
		Если НЕ СтрНайти(АдресКонстанта, "https://") = 0 Тогда
			АдресИСМПТ = СтрЗаменить(АдресКонстанта, "https://", "");
		ИначеЕсли НЕ СтрНайти(АдресКонстанта, "http://") = 0 Тогда
			АдресИСМПТ = СтрЗаменить(АдресКонстанта, "http://", "");
		Иначе
			АдресИСМПТ = АдресКонстанта;
		КонецЕсли;
		
		Если НЕ СтрНайти(АдресИСМПТ, "/") = 0 Тогда
			АдресИСМПТ = СтрЗаменить(АдресИСМПТ, "/", "");
		КонецЕсли;
	КонецЕсли;
	
	Возврат АдресИСМПТ;
	
КонецФункции

//Проверяет наличие конструкции "https://" в адресе сервера, если ее нет - добавляет (необходимо для работы в методах АПИ)
//
Функция ПроверитьНаличиеПротоколаВАдресе(АдресСервера) Экспорт
	
	Если СтрНайти(АдресСервера, "http") = 0 Тогда
		АдресСервера = "https://" + СокрЛП(АдресСервера);
		Если Не Прав(АдресСервера, 1) = "/" Тогда
			АдресСервера = АдресСервера + "/";
		КонецЕсли;
	КонецЕсли;
	
	Возврат АдресСервера;
	
КонецФункции

Функция ПолучитьТекущиюВерсиюМакета() Экспорт
	
	//БМ_ИСМПТ КОНТРОЛЬНАЯ_ТОЧКА Версия макета криптобиблиотеки
	Возврат "5.24";
	
КонецФункции

Функция ОбъектXDTOИзСтрокиXML(Знач СтрокаXML, Знач Фабрика) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);	
	ОбъектXDTO = Фабрика.ПрочитатьXML(ЧтениеXML);
	
	Возврат ОбъектXDTO;
	
КонецФункции

Функция СписокXDTOИзОбъектXDTO(Знач ОбъектXDTO) Экспорт
	
	Если ТипЗнч(ОбъектXDTO) = Тип("СписокXDTO") Тогда
		СписокXDTO = ОбъектXDTO;
	Иначе
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку("<parent><list></list><list></list></parent>");	
		СписокXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML).list;
		СписокXDTO.Очистить();
		СписокXDTO.Добавить(ОбъектXDTO);	
	КонецЕсли;
	
	Возврат СписокXDTO;
	
КонецФункции

Функция УдалитьСлужебныеСимволыВСтроке(ИсходнаяСтрока) Экспорт
	
	ОбработаннаяСтрока = СтрЗаменить(ИсходнаяСтрока, Символы.ВК, "");
	ОбработаннаяСтрока = СтрЗаменить(ОбработаннаяСтрока, Символы.ПС, "");
	ОбработаннаяСтрока = СтрЗаменить(ОбработаннаяСтрока, "¶", "");
		
	Возврат ОбработаннаяСтрока;
	
КонецФункции

Функция ХэшСуммаСтроки(СтрокаДляРасчетаХеша) Экспорт
	
	ХешированиеДанныхОбъект = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанныхОбъект.Добавить(СтрокаДляРасчетаХеша);
	
	Возврат Base64Строка(ХешированиеДанныхОбъект.ХешСумма);
	
КонецФункции

// Возвращает параметры метода API ИС МПТ, сохраненные в регистре сведений ПараметрыМетодовИСМПТК.
//
// Параметры:
//  СтруктурнаяЕдиница - См. Метаданные.РегистрыСведений.ПараметрыМетодовИСМПТК.Измерения.СтруктурнаяЕдиница.Тип - Структурная единица, от имени которой будет вызываться метод.
//  ИмяМетода - Строка - Имя метода, параметры которого необходимо получить.
//  Направление - ПеречислениеСсылка.НаправленияДокументовИСМПТК - Направление документов, для которого необходимо получить параметры.
//
// Возвращаемое значение:
//  Структура - Ключ - Имя параметра, Значение - Значение параметра.
//                     Имя параметра возвращается в верхнем регистре.
//
Функция ПолучитьПараметрыМетода(Знач СтруктурнаяЕдиница, Знач ИмяМетода, Знач Направление) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыМетодовИСМПТК.ИмяПараметра,
	|	ПараметрыМетодовИСМПТК.ЗначениеПараметра
	|ИЗ
	|	РегистрСведений.ПараметрыМетодовИСМПТК КАК ПараметрыМетодовИСМПТК
	|ГДЕ
	|	ПараметрыМетодовИСМПТК.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И ПараметрыМетодовИСМПТК.ИмяМетода = &ИмяМетода" + ?(ЗначениеЗаполнено(Направление), "
	|	И ПараметрыМетодовИСМПТК.Направление = &Направление", ""); // параметр может быть не заполнен 
	
	Запрос.УстановитьПараметр("ИмяМетода", ИмяМетода);
	Запрос.УстановитьПараметр("Направление", Направление);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыМетода = Новый Структура();
	
	Пока Выборка.Следующий() Цикл
		ПараметрыМетода.Вставить(ВРег(Выборка.ИмяПараметра), Выборка.ЗначениеПараметра);
	КонецЦикла;
	
	Возврат ПараметрыМетода;
	
КонецФункции

// Сохраняет параметр метода API ИС МПТ в регистр сведений ПараметрыМетодовИСМПТК.
//
// Параметры:
//  СтруктурнаяЕдиница - См. Метаданные.РегистрыСведений.ПараметрыМетодовИСМПТК.Измерения.СтруктурнаяЕдиница.Тип - Структурная единица, от имени которой будет вызываться метод.
//  ИмяМетода - Строка - Имя метода, параметр которого необходимо сохранить.
//  Направление - ПеречислениеСсылка.НаправленияДокументовИСМПТК - Направление документа, для которого необходимо сохранить параметр.
//  ИмяПараметра - Строка - Имя сохраняемого параметра.
//  ЗначениеПараметра - Строка - Значение сохраняемого парметра.
//
Процедура СохранитьПараметрыМетода(Знач СтруктурнаяЕдиница, Знач ИмяМетода, Знач Направление, Знач ИмяПараметра, Знач ЗначениеПараметра) Экспорт
	
	Запись = РегистрыСведений.ПараметрыМетодовИСМПТК.СоздатьМенеджерЗаписи();
	Запись.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
	Запись.ИмяМетода = ИмяМетода;
	Запись.Направление = Направление;
	Запись.ИмяПараметра = ИмяПараметра;
	Запись.ЗначениеПараметра = ЗначениеПараметра;
	
	Запись.Записать();
	
КонецПроцедуры

#Область РазбитьДокументНаЧасти

#Область ЗаказКМ

Функция РазбитьЗаказКМ(ПараметрыСоздания) Экспорт
	
	СписокЗаказКМ = Новый Массив;
	
	РезультатПроверки = ПроверитьНеобходимостьРазбиенияСтрок(ПараметрыСоздания);
		
	Если Не РезультатПроверки.Отказ Тогда
		
		МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияЗаказКМ_РазбиениеСтрок(ПараметрыСоздания, РезультатПроверки);
		
		ПараметрыЗаполненияЗаказКМ = Новый Структура;
		ПараметрыЗаполненияЗаказКМ.Вставить("ФормироватьСписокДокументов", Истина);
		ОбработатьИсходныйДокументЗаказКМ(ПараметрыЗаполненияЗаказКМ, ПараметрыСоздания.МассивДокументовЗаказКМ, МассивДанныхДляЗаполнения, СписокЗаказКМ);
		ЗаполнитьМассивЗаказКМ(ПараметрыЗаполненияЗаказКМ, МассивДанныхДляЗаполнения, СписокЗаказКМ);
		
		Возврат СписокЗаказКМ;
		
	КонецЕсли;
	
	Возврат Неопределено;	
	
КонецФункции

Функция ПроверитьНеобходимостьРазбиенияСтрок(ПараметрыЗаполнения) //Документ СУЗ (Заказ)
	
	//БМ_ИСМПТ НА_РАЗВИТИЕ	Товарные группы
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКодовМаркировкиСУЗИСМПТКТовары.Шаблон) КАК Шаблон
	|ИЗ
	|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК.Товары КАК ЗаказКодовМаркировкиСУЗИСМПТКТовары
	|ГДЕ
	|	ЗаказКодовМаркировкиСУЗИСМПТКТовары.Ссылка В(&Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКодовМаркировкиСУЗИСМПТКТовары.GTIN) КАК КоличествоGTIN,
	|	ЗаказКодовМаркировкиСУЗИСМПТКТовары.Шаблон КАК ТоварнаяГруппа
	|ИЗ
	|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК.Товары КАК ЗаказКодовМаркировкиСУЗИСМПТКТовары
	|ГДЕ
	|	ЗаказКодовМаркировкиСУЗИСМПТКТовары.Ссылка В(&Ссылка)
	|	И ЗаказКодовМаркировкиСУЗИСМПТКТовары.Шаблон В(&ШаблоныКМ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКодовМаркировкиСУЗИСМПТКТовары.Шаблон";
	
	Запрос.УстановитьПараметр("Ссылка",	   ПараметрыЗаполнения.МассивДокументовЗаказКМ);
	Запрос.УстановитьПараметр("ШаблоныКМ", МассивДоступныхШаблонов());
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	НужноРазбиватьЗаказПоТГ   = Ложь;
	НужноРазбиватьЗаказПоGTIN = Ложь;
	
	ТаблицаТоварныеГруппы = РезультатЗапроса[0].Выгрузить();
	Если Не ТаблицаТоварныеГруппы.Количество() = 0 Тогда 
		КоличествоТГВЗаказе = ТаблицаТоварныеГруппы[0].Шаблон;
		Если КоличествоТГВЗаказе > 1 Тогда 
			НужноРазбиватьЗаказПоТГ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ВыборкаКоличествоGTIN = РезультатЗапроса[1].Выбрать();
	ТГДляРазбития = Новый Массив();
	Пока ВыборкаКоличествоGTIN.Следующий() Цикл
		//Для фармы предел - 1, для остальных ТГ - 10
		Если (ВыборкаКоличествоGTIN.ТоварнаяГруппа = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты")
			И ВыборкаКоличествоGTIN.КоличествоGTIN > 1)
			ИЛИ (НЕ ВыборкаКоличествоGTIN.ТоварнаяГруппа = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты")
			И ВыборкаКоличествоGTIN.КоличествоGTIN > 10) Тогда
			
			НужноРазбиватьЗаказПоGTIN = Истина;
			ТГДляРазбития.Добавить(ВыборкаКоличествоGTIN.ТоварнаяГруппа);
		КонецЕсли;
	КонецЦикла;
	
	РезультатПроверки = Новый Структура();
	
	Если Не НужноРазбиватьЗаказПоТГ И Не НужноРазбиватьЗаказПоGTIN Тогда
		РезультатПроверки.Вставить("Отказ", Истина);
		ТекстСообщения = НСтр("ru = 'В разбитии документа нет необходимости, лимит не превышен.'");
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	Иначе
		РезультатПроверки.Вставить("Отказ", Ложь);
	КонецЕсли;
		
	РезультатПроверки.Вставить("НужноРазбиватьЗаказПоТГ",   НужноРазбиватьЗаказПоТГ);
	РезультатПроверки.Вставить("НужноРазбиватьЗаказПоGTIN", НужноРазбиватьЗаказПоGTIN);
	РезультатПроверки.Вставить("ТГДляРазбития", 			ТГДляРазбития);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПодготовитьДанныеДляЗаполненияЗаказКМ_РазбиениеСтрок(ПараметрыЗаполнения, РезультатПроверки) Экспорт
	
	ДанныеДляЗаполнения = Новый Массив;
	
	ТаблицыДанныхДляЗаполненияЗаказаКМ = ПодготовитьТаблицыДанныхДляЗаполненияЗаказКМДляРазбиенияСтрок(ПараметрыЗаполнения.МассивДокументовЗаказКМ, РезультатПроверки);
	Если ТаблицыДанныхДляЗаполненияЗаказаКМ = Неопределено Тогда
		Возврат ДанныеДляЗаполнения;
	КонецЕсли;
	
	//Реквизиты шапки исходного документа
	ТаблицаРеквизитов  = ТаблицыДанныхДляЗаполненияЗаказаКМ.ТаблицаРеквизитов;
	//Товары исходного документа, разбитые на таблица по товарным группам 
	ТаблицаТовары      = ТаблицыДанныхДляЗаполненияЗаказаКМ.ТаблицаТовары;
	//Структура реквизитов пустого документа
	СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаЗаказКодовПриРазбитииНаЧасти();
			
	Реквизиты = СтруктураДокумента.Реквизиты;
	Товары 	  = СтруктураДокумента.Товары;
	
	Для Каждого СтрокаРеквизитов ИЗ ТаблицаРеквизитов Цикл
	
		Реквизиты.Очистить();
				
		НоваяСтрокаРеквизитов = Реквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, СтрокаРеквизитов);
		
		НоваяСтрокаРеквизитов.Дата = СтрокаРеквизитов.Дата;
						
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Ссылка", СтрокаРеквизитов.Ссылка);
		
		Если ТипЗнч(ТаблицаТовары) = Тип("Массив") Тогда
			//Если в исходном документе были заполнены товары по разным ТГ, то в Товарах будет содержаться массив таблиц - по каждой ТГ своя
			Для Каждого ТаблицаТоварыПоТГ Из ТаблицаТовары Цикл
				МассивСтрокТовары = ТаблицаТоварыПоТГ.НайтиСтроки(ПараметрыОтбора);
				Товары.Очистить();
				ПродолжитьРазбитиеНаСтроки(МассивСтрокТовары, СтрокаРеквизитов, Реквизиты, Товары, ДанныеДляЗаполнения);
			КонецЦикла;
		Иначе
			//Для случая, когда все товары по одной ТГ, но их общее количество в документе больше нужного
			МассивСтрокТовары = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
			ПродолжитьРазбитиеНаСтроки(МассивСтрокТовары, СтрокаРеквизитов, Реквизиты, Товары, ДанныеДляЗаполнения);
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

//Для Заказа КМ
//
Процедура ПродолжитьРазбитиеНаСтроки(МассивСтрокТовары, СтрокаРеквизитов, Реквизиты, Товары, ДанныеДляЗаполнения)
	
	НомерСтроки = 0;
	НомерПакета = 1;
	ЕстьТовары	= Ложь;
	
	Если Не Реквизиты.Количество() = 0 Тогда
		ВидПродукции = Реквизиты[0].ВидПродукции;
		Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") Тогда
			МаксНомерСтрокиТЧ = 1;  //максимум товаров в одном документе фармы - 1, это ограничение СУЗ ИС МПТ
		Иначе
			МаксНомерСтрокиТЧ = 10;  //максимум товаров в одном документе 10, это ограничение СУЗ ИС МПТ
		КонецЕсли;
	Иначе
		МаксНомерСтрокиТЧ = 10; //по умолчанию берем универсальное значение (подходит большинству ТГ)
	КонецЕсли;
	
	//Перебираем все строки в исходной ТЧ Товары (в рамках одной ТГ)
	Для Каждого СтрокаМассива Из МассивСтрокТовары Цикл
		
		НоваяСтрокаТЧ = Товары.Добавить();  //Формируем ТЧ для нового документа
		ЕстьТовары 	  = Истина;
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаМассива);
		НомерСтроки = НомерСтроки + 1;
	
		Если НомерСтроки >= МаксНомерСтрокиТЧ Тогда
			//Если товары еще не закончились, но их количество уже больше допустимого, формируем следующий пакет
			ЕстьТовары 	= Ложь;
			НомерСтроки = 0;
			НомерПакета = НомерПакета + 1;
			
			//Сохраняем заполненную таблицу данных
			СтруктураДляПередачи = Новый Структура;
			СтруктураДляПередачи.Вставить("Реквизиты", Реквизиты.Скопировать());
			СтруктураДляПередачи.Вставить("Товары",	   Товары.Скопировать());
			ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);
			
			//Начинаем заполнение второго пакета
			Реквизиты.Очистить();
			Товары.Очистить();
			
			НоваяСтрокаРеквизитов = Реквизиты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, СтрокаРеквизитов);
			НоваяСтрокаРеквизитов.НомерПакета   = НомерПакета;
			НоваяСтрокаРеквизитов.ЗаказРодитель = СтрокаРеквизитов.Ссылка;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьТовары Тогда 
		СтруктураДляПередачи = Новый Структура;
		СтруктураДляПередачи.Вставить("Реквизиты", Реквизиты.Скопировать());
		СтруктураДляПередачи.Вставить("Товары",    Товары.Скопировать());
		ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);
	КонецЕсли;
	
КонецПроцедуры
	
Функция ПодготовитьТаблицыДанныхДляЗаполненияЗаказКМДляРазбиенияСтрок(МассивДокументовЗаказКМ, РезультатПроверки) Экспорт

	НужноРазбиватьЗаказПоТГ   = РезультатПроверки.НужноРазбиватьЗаказПоТГ;
	НужноРазбиватьЗаказПоGTIN = РезультатПроверки.НужноРазбиватьЗаказПоGTIN;
	ТГДляРазбития 			  = РезультатПроверки.ТГДляРазбития;
	
	//БМ_ИСМПТ НА_РАЗВИТИЕ	Товарные группы
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка КАК Ссылка,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Организация КАК Организация,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ИдентификаторПроизводственногоЗаказа КАК ИдентификаторПроизводственногоЗаказа,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ИдентификаторПроизводственнойЛинии КАК ИдентификаторПроизводственнойЛинии,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ИдентификаторПроизводства КАК ИдентификаторПроизводства,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.СтранаПроизводителя КАК СтранаПроизводителя,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.КодПродукта КАК КодПродукта,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ОписаниеПродукта КАК ОписаниеПродукта,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.СпособВводаВОборот КАК СпособВводаВОборот,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Комментарий КАК Комментарий,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ответственный КАК Ответственный,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ВидПродукции КАК ВидПродукции,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.СпособИзготовленияСИ КАК СпособИзготовленияСИ,
	|	&ДатаДокумента КАК Дата,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Статус КАК Статус,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ДокументОснование КАК ДокументОснование,
	|	1 КАК НомерПакета,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ВыполненоНанесениеКМ КАК ВыполненоНанесениеКМ
	|ИЗ
	|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК КАК ЗаказКодовМаркировкиСУЗИСМПТК
	|ГДЕ
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка В(&ЗаказыКМ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка КАК Ссылка,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Номенклатура КАК Номенклатура,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Характеристика КАК Характеристика,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Упаковка КАК Упаковка,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.GTIN КАК GTIN,
	|	СУММА(ЗаказКодовМаркировкиСУЗИСМПТК.Количество) КАК Количество,
	|	СУММА(ЗаказКодовМаркировкиСУЗИСМПТК.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Шаблон КАК Шаблон,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.СпособФормированияСерийногоНомера КАК СпособФормированияСерийногоНомера,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.СтатусУказанияСерии КАК СтатусУказанияСерии,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.СпособВводаВОборот КАК СпособВводаВОборот
	|ИЗ
	|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК.Товары КАК ЗаказКодовМаркировкиСУЗИСМПТК
	|ГДЕ
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка В(&ЗаказыКМ)
	|	И ЗаказКодовМаркировкиСУЗИСМПТК.Шаблон В(&ШаблоныКМ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКодовМаркировкиСУЗИСМПТК.GTIN,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.СтатусУказанияСерии,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Упаковка,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.СпособВводаВОборот,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Характеристика,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.СпособФормированияСерийногоНомера,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Шаблон,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Номенклатура
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(КоличествоУпаковок),
	|	СУММА(СтатусУказанияСерии)
	|ПО
	|	Шаблон";
	
	Запрос.УстановитьПараметр("ЗаказыКМ",  МассивДокументовЗаказКМ);
	Запрос.УстановитьПараметр("ШаблоныКМ", МассивДоступныхШаблонов());
	ДатаДокумента = ТекущаяДатаСеанса();
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
		
	ТаблицыДанныхДляЗаполненияЗаказКМ = Новый Структура;
	ТаблицыДанныхДляЗаполненияЗаказКМ.Вставить("ТаблицаРеквизитов", РезультатЗапроса[0].Выгрузить());
	
	Если НужноРазбиватьЗаказПоТГ Тогда
		МассивТовары = Новый Массив();
		ВыборкаТовары = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаТовары.Следующий() Цикл
			
			ВыборкаТоварыПоТГ = ВыборкаТовары.Выбрать();
			ТаблицаТоварыТГ = Новый ТаблицаЗначений();
			ТаблицаТоварыТГ.Колонки.Добавить("GTIN");
			ТаблицаТоварыТГ.Колонки.Добавить("Номенклатура");
			ТаблицаТоварыТГ.Колонки.Добавить("Характеристика");
			ТаблицаТоварыТГ.Колонки.Добавить("Упаковка");
			ТаблицаТоварыТГ.Колонки.Добавить("Количество");
			ТаблицаТоварыТГ.Колонки.Добавить("КоличествоУпаковок");
			ТаблицаТоварыТГ.Колонки.Добавить("Шаблон");
			ТаблицаТоварыТГ.Колонки.Добавить("СпособВводаВОборот");
			ТаблицаТоварыТГ.Колонки.Добавить("СтатусУказанияСерии");
			ТаблицаТоварыТГ.Колонки.Добавить("СпособФормированияСерийногоНомера");
			ТаблицаТоварыТГ.Колонки.Добавить("Ссылка");
									
			Пока ВыборкаТоварыПоТГ.Следующий() Цикл
				НоваяСтрока = ТаблицаТоварыТГ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТоварыПоТГ);
			КонецЦикла;
			
			МассивТовары.Добавить(ТаблицаТоварыТГ);
			
		КонецЦикла;		
		ТаблицыДанныхДляЗаполненияЗаказКМ.Вставить("ТаблицаТовары", МассивТовары); 
	Иначе
		ТаблицыДанныхДляЗаполненияЗаказКМ.Вставить("ТаблицаТовары", РезультатЗапроса[1].Выгрузить());
	КонецЕсли;
		
	Возврат ТаблицыДанныхДляЗаполненияЗаказКМ;
	
КонецФункции

Функция МассивДоступныхШаблонов() Экспорт
	
	МассивШаблонов = Новый Массив();
	
	Если Константы.ВестиУчетМаркируемойМолочкиИСМПТК.Получить() Тогда
		МассивШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция"));
	КонецЕсли;
	
	Если Константы.ВестиУчетМаркируемогоТекстиляИСМПТК.Получить() Тогда
		МассивШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность"));
	КонецЕсли;
	
	Если Константы.ВестиУчетМаркируемойОбувиИСМПТК.Получить() Тогда
		МассивШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь"));
	КонецЕсли;
	
	Если Константы.ВестиУчетМаркируемыхЛекарствИСМПТК.Получить() Тогда
		МассивШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты"));
	КонецЕсли;
	
	Если Константы.ВестиУчетМаркируемогоТабакаИСМПТК.Получить() Тогда
		МассивШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка"));
		МассивШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек"));
	КонецЕсли;
	
	Возврат МассивШаблонов;
	
КонецФункции

Функция ОбработатьИсходныйДокументЗаказКМ(ПараметрыСоздания, МассивДокументов, МассивДанныхДляЗаполнения, СписокЗаказКМ)
	
	ИсходныхДокументЗаказКМ = МассивДокументов[0];
	ФормироватьСписокДокументов = ПараметрыСоздания.ФормироватьСписокДокументов;
	Отказ = Ложь;
	
	Если ЗначениеЗаполнено(МассивДанныхДляЗаполнения) И МассивДанныхДляЗаполнения.Количество() > 0 Тогда
		
		Попытка
			
			ЭлементМассива = МассивДанныхДляЗаполнения[0];
			ЗаказКМ = ИсходныхДокументЗаказКМ.ПолучитьОбъект();
			//Заполняем табличную часть "Товары"
			ЗаказКМ.Товары.Очистить();
			
			Для Каждого СтрокаТЧ Из ЭлементМассива.Товары Цикл
				НоваяСтрокаТЧ = ЗаказКМ.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
				Если НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь") Тогда  
					ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная");
				ИначеЕсли НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция") Тогда  
					ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция");
				ИначеЕсли НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность") Тогда  
					ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность");
				ИначеЕсли НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты") Тогда  
					ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты");
				ИначеЕсли НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка")
					ИЛИ НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек") Тогда  
					ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная");
				Иначе
					//Значение по умолчанию
					ВидПродукции = ИнтеграцияИСМПТКВызовСервера.ПолучитьЗначениеПоУмолчаниюДляВидаПродукцииЗаказа();
				КонецЕсли;
			КонецЦикла;
			
			//Проверяем Вид продукции документа и редактируем при необходимости
			ЗаказКМ.ВидПродукции = ВидПродукции;
			ЗаказКМ.Записать(РежимЗаписиДокумента.Запись);
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'При записи документа ""%1"" произошла ошибка: %2'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ЗаказКМ, ПодробноеПредставлениеОшибки);
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецПопытки;
		
		Если ФормироватьСписокДокументов Тогда
			СписокЗаказКМ.Добавить(ЗаказКМ.Ссылка);
		КонецЕсли;
		
		МассивДанныхДляЗаполнения.Удалить(0);
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьМассивЗаказКМ(ПараметрыСоздания, МассивДанныхДляЗаполнения, СписокЗаказКМ)
	
	ФормироватьСписокДокументов = ПараметрыСоздания.ФормироватьСписокДокументов;
	
	Для каждого ЭлементМассива Из МассивДанныхДляЗаполнения Цикл
		
		ЗаказКМ = Документы.ЗаказКодовМаркировкиСУЗИСМПТК.СоздатьДокумент();
		
		//Заполняем шапку документа
		ЗаполнитьЗначенияСвойств(ЗаказКМ, ЭлементМассива.Реквизиты[0]);
			
		//Заполняем табличную часть "Товары"
		Для Каждого СтрокаТЧ Из ЭлементМассива.Товары Цикл
			
			НоваяСтрокаТЧ = ЗаказКМ.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);

			Если НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь") Тогда  
				ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная");
				
			ИначеЕсли НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция") Тогда  
				ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция");
				
			ИначеЕсли НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты") Тогда  
				ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты");
				
			ИначеЕсли НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность") Тогда
				ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность");
				
			ИначеЕсли НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка")
				ИЛИ НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек") Тогда
				ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная");
			Иначе
				//Значение по умолчанию
				ВидПродукции = ИнтеграцияИСМПТКВызовСервера.ПолучитьЗначениеПоУмолчаниюДляВидаПродукцииЗаказа();
			КонецЕсли;
		КонецЦикла;	
		
		ЗаказКМ.ВидПродукции = ВидПродукции;
		
		Попытка 
			ЗаказКМ.УстановитьВремя();
			ЗаказКМ.УстановитьНовыйНомер();
			ЗаказКМ.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ТекстСообщения = НСтр("ru = 'При записи документа ""%1"" произошла ошибка: %2'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ЗаказКМ, ПодробноеПредставлениеОшибки);
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		Если ФормироватьСписокДокументов Тогда
			СписокЗаказКМ.Добавить(ЗаказКМ.Ссылка);
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

#КонецОбласти

#Область ДокументыИСМПТ

Функция РазбитьДокументИСМПТ(ПараметрыСоздания, ИмяДокумента) Экспорт
	
	СписокДокументИСМПТ = Новый Массив;
	
	РезультатПроверки = ПроверитьНеобходимостьРазбиенияСтрокДокументИСМПТ(ПараметрыСоздания, ИмяДокумента);
		
	Если Не РезультатПроверки.Отказ Тогда
		
		МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияДокумнтИСМПТ_РазбиениеСтрок(ПараметрыСоздания, РезультатПроверки, ИмяДокумента);
		
		ПараметрыЗаполненияДокументИСМПТ = Новый Структура;
		ПараметрыЗаполненияДокументИСМПТ.Вставить("ФормироватьСписокДокументов", Истина);
		ОбработатьИсходныйДокументИСМПТ(ПараметрыЗаполненияДокументИСМПТ, ПараметрыСоздания.МассивДокументовИСМПТ, МассивДанныхДляЗаполнения, СписокДокументИСМПТ, ИмяДокумента);
		ЗаполнитьМассивДокументИСМПТ(ПараметрыЗаполненияДокументИСМПТ, МассивДанныхДляЗаполнения, СписокДокументИСМПТ, ИмяДокумента);
		
		Возврат СписокДокументИСМПТ;
		
	КонецЕсли;
	
	Возврат Неопределено;	
	
КонецФункции

Функция ОбработатьИсходныйДокументИСМПТ(ПараметрыСоздания, МассивДокументов, МассивДанныхДляЗаполнения, СписокДокументИСМПТ, ИмяДокумента)
	
	ИсходныйДокументИСМПТ = МассивДокументов[0];
	ФормироватьСписокДокументов = ПараметрыСоздания.ФормироватьСписокДокументов;
	Отказ = Ложь;
	
	Если ЗначениеЗаполнено(МассивДанныхДляЗаполнения) И МассивДанныхДляЗаполнения.Количество() > 0 Тогда
		
		Попытка
			
			ЭлементМассива = МассивДанныхДляЗаполнения[0];
			ДокументИСМПТ = ИсходныйДокументИСМПТ.ПолучитьОбъект();
			//Заполняем табличную часть "Марки"
			ДокументИСМПТ.Марки.Очистить();
			Для Каждого СтрокаТЧ Из ЭлементМассива.Марки Цикл
				НоваяСтрокаТЧ = ДокументИСМПТ.Марки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
			КонецЦикла;
			
			//Если ЭлементМассива.Свойство("Товары") Тогда
			//	ДокументИСМПТ.Товары.Очистить();
			//	Для Каждого СтрокаТЧТовары Из ЭлементМассива.Товары Цикл
			//		НоваяСтрокаТЧТовары = ДокументИСМПТ.Товары.Добавить();
			//		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧТовары, СтрокаТЧТовары);
			//	КонецЦикла;
			//КонецЕсли;
			
			Если ЭлементМассива.Свойство("ДокументыСоответствия") Тогда
				ДокументИСМПТ.ДокументыСоответствия.Очистить();
				Для Каждого СтрокаТЧДС Из ЭлементМассива.ДокументыСоответствия Цикл
					НоваяСтрокаТЧДС = ДокументИСМПТ.ДокументыСоответствия.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧДС, СтрокаТЧДС);
				КонецЦикла;
			КонецЕсли;
			
			ДокументИСМПТ.Товары.Очистить();
			ДокументИСМПТ.Записать(РежимЗаписиДокумента.Запись);
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'При записи документа ""%1"" произошла ошибка: %2'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументИСМПТ, ПодробноеПредставлениеОшибки);
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецПопытки;
		
		Если ФормироватьСписокДокументов Тогда
			СписокДокументИСМПТ.Добавить(ДокументИСМПТ.Ссылка);
		КонецЕсли;
		
		МассивДанныхДляЗаполнения.Удалить(0);
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьМассивДокументИСМПТ(ПараметрыСоздания, МассивДанныхДляЗаполнения, СписокДокументИСМПТ, ИмяДокумента)
	
	ФормироватьСписокДокументов = ПараметрыСоздания.ФормироватьСписокДокументов;
	
	Для Каждого ЭлементМассива Из МассивДанныхДляЗаполнения Цикл
		
		Если ИмяДокумента = "АктПриемаПередачиИСМПТК" Тогда
			ДокументИСМПТ = Документы.АктПриемаПередачиИСМПТК.СоздатьДокумент();
		ИначеЕсли ИмяДокумента = "УведомлениеОВводеВОборотИСМПТК" Тогда
			ДокументИСМПТ = Документы.УведомлениеОВводеВОборотИСМПТК.СоздатьДокумент();
		ИначеЕсли ИмяДокумента = "УведомлениеОВыводеИзОборотаИСМПТК" Тогда
			ДокументИСМПТ = Документы.УведомлениеОВыводеИзОборотаИСМПТК.СоздатьДокумент();
		ИначеЕсли ИмяДокумента = "УведомлениеОВвозеИзЕАЭСИСМПТК" Тогда
			ДокументИСМПТ = Документы.УведомлениеОВвозеИзЕАЭСИСМПТК.СоздатьДокумент();
		ИначеЕсли ИмяДокумента = "УведомлениеОВвозеИзТретьихСтранИСМПТК" Тогда
			ДокументИСМПТ = Документы.УведомлениеОВвозеИзТретьихСтранИСМПТК.СоздатьДокумент();
		ИначеЕсли ИмяДокумента = "УведомлениеОбЭкспортеЕАЭСИСМПТК" Тогда
			ДокументИСМПТ = Документы.УведомлениеОбЭкспортеЕАЭСИСМПТК.СоздатьДокумент();
		КонецЕсли;
		
		//Заполняем шапку документа
		ЗаполнитьЗначенияСвойств(ДокументИСМПТ, ЭлементМассива.Реквизиты[0]);
			
		//Заполняем табличную часть "Марки"
		Для Каждого СтрокаТЧ Из ЭлементМассива.Марки Цикл
			НоваяСтрокаТЧ = ДокументИСМПТ.Марки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
		КонецЦикла;	
		
		////Заполняем табличную часть "Товары"
		//Если ЭлементМассива.Свойство("Товары") Тогда
		//	Для Каждого СтрокаТЧТовары Из ЭлементМассива.Товары Цикл
		//		НоваяСтрокаТЧТовары = ДокументИСМПТ.Товары.Добавить();
		//		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧТовары, СтрокаТЧТовары);
		//	КонецЦикла;
		//КонецЕсли;
		
		//Заполняем табличную часть "ДокументыСоответствия"
		Если ЭлементМассива.Свойство("ДокументыСоответствия") Тогда
			Для Каждого СтрокаТЧДС Из ЭлементМассива.ДокументыСоответствия Цикл
				НоваяСтрокаТЧДС = ДокументИСМПТ.ДокументыСоответствия.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧДС, СтрокаТЧДС);
			КонецЦикла;
		КонецЕсли;
		
		Попытка 
			ДокументИСМПТ.УстановитьВремя();
			ДокументИСМПТ.УстановитьНовыйНомер();
			ДокументИСМПТ.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ТекстСообщения = НСтр("ru = 'При записи документа ""%1"" произошла ошибка: %2'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументИСМПТ, ПодробноеПредставлениеОшибки);
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		Если ФормироватьСписокДокументов Тогда
			СписокДокументИСМПТ.Добавить(ДокументИСМПТ.Ссылка);
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

Функция ПроверитьНеобходимостьРазбиенияСтрокДокументИСМПТ(ПараметрыЗаполнения, ИмяДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДокументИСМПТМарки.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка)
	|			ТОГДА ""Неопределен""
	|		ИНАЧЕ ДокументИСМПТМарки.ВидПродукцииИС
	|	КОНЕЦ КАК ВидПродукцииИС
	|ИЗ
	|	Документ." + ИмяДокумента + ".Марки КАК ДокументИСМПТМарки
	|ГДЕ
	|	ДокументИСМПТМарки.Ссылка В(&Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ДокументИСМПТМарки.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка)
	|			ТОГДА ""Неопределен""
	|		ИНАЧЕ ДокументИСМПТМарки.ВидПродукцииИС
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("Ссылка", ПараметрыЗаполнения.МассивДокументовИСМПТ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЕстьПустаяТГ = Ложь;
	РезультатПроверки = Новый Структура();
	ПроверкаПройдена = Ложь;
	
	Если Выборка.Количество() = 1 Тогда 
		Если Выборка.ВидПродукцииИС = "Неопределен" Тогда
			//Сразу отказываем в разбиении
			РезультатПроверки.Вставить("Отказ", Истина);
			ТекстСообщения = НСтр("ru = 'Невозможно разбить документ: у некоторых кодов в таблице не определен вид продукции. Выполните уточнение данных GTIN и номенклатуры.'");
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			РезультатПроверки.Вставить("НужноРазбиватьЗаказПоТГ", Ложь);
		Иначе
			//Разбивать по ТГ не нужно, сообщаем, что ТГ одна
			РезультатПроверки.Вставить("Отказ", Истина);
			ТекстСообщения = НСтр("ru = 'Невозможно разбить документ: все коды относятся к одной товарной группе.'");
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			РезультатПроверки.Вставить("НужноРазбиватьЗаказПоТГ", Ложь);
		КонецЕсли;
	Иначе
		//Нужно проверить, есть ли среди ТГ пустая
		Пока Выборка.Следующий() Цикл
			Если Выборка.ВидПродукцииИС = "Неопределен" Тогда
				РезультатПроверки.Вставить("Отказ", Истина);
				ТекстСообщения = НСтр("ru = 'Невозможно разбить документ: у некоторых кодов в таблице не определен вид продукции. Выполните уточнение данных GTIN и номенклатуры.'");
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				РезультатПроверки.Вставить("НужноРазбиватьЗаказПоТГ", Ложь);
				ПроверкаПройдена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ПроверкаПройдена Тогда	
			//Разбивать по ТГ нужно, т.к. их больше 1 и пустой среди них нет
			РезультатПроверки.Вставить("Отказ", Ложь);
			РезультатПроверки.Вставить("НужноРазбиватьЗаказПоТГ", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПодготовитьДанныеДляЗаполненияДокумнтИСМПТ_РазбиениеСтрок(ПараметрыЗаполнения, РезультатПроверки, ИмяДокумента) Экспорт
	
	ДанныеДляЗаполнения = Новый Массив;
	
	ТаблицыДанныхДляЗаполненияДокументИСМПТ = ПодготовитьТаблицыДанныхДляЗаполненияДокументИСМПТДляРазбиенияСтрок(ПараметрыЗаполнения.МассивДокументовИСМПТ, РезультатПроверки, ИмяДокумента);
	Если ТаблицыДанныхДляЗаполненияДокументИСМПТ = Неопределено Тогда
		Возврат ДанныеДляЗаполнения;
	КонецЕсли;
	
	//Реквизиты шапки исходного документа
	ТаблицаРеквизитов = ТаблицыДанныхДляЗаполненияДокументИСМПТ.ТаблицаРеквизитов;
	//Марки исходного документа, разбитые на таблицы по товарным группам 
	ТаблицаМарки = ТаблицыДанныхДляЗаполненияДокументИСМПТ.ТаблицаМарки;
	////Товары исходного документа, разбитые по ТГ (данные документа-основания)
	//ТаблицаТовары = ТаблицыДанныхДляЗаполненияДокументИСМПТ.ТаблицаТовары;
	//Дополнительная ТЧ в некоторых документах
	ТаблицаДокументыСоответствия = ТаблицыДанныхДляЗаполненияДокументИСМПТ.ТаблицаДокументыСоответствия;
	
	//Структура реквизитов пустого документа
	СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаИСМПТПриРазбитииНаЧасти(ИмяДокумента);
			
	Реквизиты = СтруктураДокумента.Реквизиты;
	Марки 	  = СтруктураДокумента.Марки;
	//Товары 	  = ?(ТаблицаТовары = Неопределено, Неопределено, СтруктураДокумента.Товары);
	ДокументыСоответствия = ?(ТаблицаДокументыСоответствия = Неопределено, Неопределено, СтруктураДокумента.ДокументыСоответствия);
	
	//НужныТовары = Товары <> Неопределено;
	НужныДокументыСоответствия = ДокументыСоответствия <> Неопределено;
	
	Для Каждого СтрокаРеквизитов ИЗ ТаблицаРеквизитов Цикл
		
		//Реквизиты шапки
		Реквизиты.Очистить();
		НоваяСтрокаРеквизитов = Реквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, СтрокаРеквизитов);
		НоваяСтрокаРеквизитов.Дата = СтрокаРеквизитов.Дата;
		
		//Документы соответствия
		Если Не ДокументыСоответствия = Неопределено Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Ссылка", СтрокаРеквизитов.Ссылка);
			
			Если ТипЗнч(ТаблицаДокументыСоответствия) = Тип("Массив") Тогда
				Для Каждого ТаблицаДокСоотв Из ТаблицаДокументыСоответствия Цикл
					
					МассивСтрокДокСоотв = ТаблицаДокСоотв.НайтиСтроки(ПараметрыОтбора);
					ДокументыСоответствия.Очистить();
					
					Для Каждого СтрокаМассива Из МассивСтрокДокСоотв Цикл
						НоваяСтрокаТЧ = ДокументыСоответствия.Добавить();  
						ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаМассива);
					КонецЦикла;
					
				КонецЦикла; 
			КонецЕсли;
			
		КонецЕсли;

		//ТЧ Марки
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Ссылка", СтрокаРеквизитов.Ссылка);
		
		Если ТипЗнч(ТаблицаМарки) = Тип("Массив") Тогда
			Для Каждого ТаблицаМаркиТГ Из ТаблицаМарки Цикл
				
				МассивСтрокМарки = ТаблицаМаркиТГ.НайтиСтроки(ПараметрыОтбора);
				Марки.Очистить();
				
				Для Каждого СтрокаМассива Из МассивСтрокМарки Цикл
					НоваяСтрокаТЧ = Марки.Добавить();  //Формируем ТЧ для нового документа
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаМассива);
				КонецЦикла;
				
				////ТЧ Товары
				//ПараметрыОтбораТовары = Новый Структура;
				//ПараметрыОтбораТовары.Вставить("Ссылка", СтрокаРеквизитов.Ссылка);
				//ПараметрыОтбораТовары.Вставить("ВидПродукцииИС", СтрокаМассива.ВидПродукцииИС);				
				//
				//Если ТипЗнч(ТаблицаТовары) = Тип("Массив") Тогда
				//	Для Каждого ТаблицаТоварыТГ Из ТаблицаТовары Цикл
				//		
				//		МассивСтрокТовары = ТаблицаТоварыТГ.НайтиСтроки(ПараметрыОтбораТовары);
				//		Товары.Очистить();
				//		
				//		Для Каждого СтрокаМассиваТовары Из МассивСтрокТовары Цикл
				//			НоваяСтрокаТЧТовары = Товары.Добавить();
				//			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧТовары, СтрокаМассиваТовары);
				//		КонецЦикла;
				//
				//	КонецЦикла; 
				//КонецЕсли;
				
				//Итоговая структура для передачи
				СтруктураДляПередачи = Новый Структура;
				СтруктураДляПередачи.Вставить("Реквизиты",  Реквизиты.Скопировать());
				СтруктураДляПередачи.Вставить("Марки",      Марки.Скопировать());
				//Если НужныТовары Тогда 
				//	СтруктураДляПередачи.Вставить("Товары", Товары.Скопировать());
				//КонецЕсли;
				Если НужныДокументыСоответствия Тогда
					СтруктураДляПередачи.Вставить("ДокументыСоответствия", ДокументыСоответствия.Скопировать());
				КонецЕсли;
				ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);
								
			КонецЦикла; 
		КонецЕсли;
				
	КонецЦикла;	
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьТаблицыДанныхДляЗаполненияДокументИСМПТДляРазбиенияСтрок(МассивДокументовИСМП, РезультатПроверки, ИмяДокумента) Экспорт

	НужноРазбиватьЗаказПоТГ   = РезультатПроверки.НужноРазбиватьЗаказПоТГ;
	Запрос = Новый Запрос;
	ТекстРеквизиты = "";
	ТекстДополнительныйЗапросТаблица = "";
	НуженДополнительныйЗапрос = Ложь;
	НуженЗапросПоТоварам = Истина;
	
	Если ИмяДокумента = "АктПриемаПередачиИСМПТК" Тогда
		#Область ТекстАктПриемаПередачиИСМПТК
		ТекстРеквизиты = "ВЫБРАТЬ
		|	АктПриемаПередачиИСМПТК.Ссылка КАК Ссылка,
		|	АктПриемаПередачиИСМПТК.Организация КАК Организация,
		|	АктПриемаПередачиИСМПТК.Комментарий КАК Комментарий,
		|	&ДатаДокумента КАК Дата,
		|	АктПриемаПередачиИСМПТК.Статус КАК Статус,
		|	АктПриемаПередачиИСМПТК.ДокументОснование КАК ДокументОснование,
		|	1 КАК НомерПакета,
		|	АктПриемаПередачиИСМПТК.Контрагент КАК Контрагент,
		|	АктПриемаПередачиИСМПТК.ВидОперации КАК ВидОперации,
		|	АктПриемаПередачиИСМПТК.ТипАкта КАК ТипАкта,
		|	АктПриемаПередачиИСМПТК.ЭтоКорректировка КАК ЭтоКорректировка,
		|	АктПриемаПередачиИСМПТК.Направление КАК Направление,
		|	АктПриемаПередачиИСМПТК.СвязанныйАкт КАК СвязанныйАкт,
		|	АктПриемаПередачиИСМПТК.РегистрационныйНомерСвязанногоАкта КАК РегистрационныйНомерСвязанногоАкта,
		|	АктПриемаПередачиИСМПТК.УведомлениеОРасхождении КАК УведомлениеОРасхождении,
		|	АктПриемаПередачиИСМПТК.Поставщик КАК Поставщик,
		|	АктПриемаПередачиИСМПТК.ПоставщикНаименование КАК ПоставщикНаименование,
		|	АктПриемаПередачиИСМПТК.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
		|	АктПриемаПередачиИСМПТК.Получатель КАК Получатель,
		|	АктПриемаПередачиИСМПТК.ПолучательНаименование КАК ПолучательНаименование,
		|	АктПриемаПередачиИСМПТК.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
		|	АктПриемаПередачиИСМПТК.РегНомерНаБумажномНосителе КАК РегНомерНаБумажномНосителе,
		|	АктПриемаПередачиИСМПТК.ДатаВыпискиНаБумажномНосителе КАК ДатаВыпискиНаБумажномНосителе,
		|	АктПриемаПередачиИСМПТК.Автор КАК Автор,
		|	АктПриемаПередачиИСМПТК.Проверен КАК Проверен
		|ИЗ
		|	Документ.АктПриемаПередачиИСМПТК КАК АктПриемаПередачиИСМПТК
		|ГДЕ
		|	АктПриемаПередачиИСМПТК.Ссылка В(&ДокументыИСМП)
		|;";
		#КонецОбласти
	ИначеЕсли ИмяДокумента = "УведомлениеОВводеВОборотИСМПТК" Тогда
		#Область ТекстУведомлениеОВводеВОборотИСМПТК
		ТекстРеквизиты = "ВЫБРАТЬ
		|	УведомлениеОВводеВОборотИСМПТК.Ссылка КАК Ссылка,
		|	УведомлениеОВводеВОборотИСМПТК.Организация КАК Организация,
		|	УведомлениеОВводеВОборотИСМПТК.Комментарий КАК Комментарий,
		|	&ДатаДокумента КАК Дата,
		|	УведомлениеОВводеВОборотИСМПТК.Статус КАК Статус,
		|	УведомлениеОВводеВОборотИСМПТК.ДокументОснование КАК ДокументОснование,
		|	1 КАК НомерПакета,
		|	УведомлениеОВводеВОборотИСМПТК.Направление КАК Направление,
		|	УведомлениеОВводеВОборотИСМПТК.Поставщик КАК Поставщик,
		|	УведомлениеОВводеВОборотИСМПТК.ПоставщикНаименование КАК ПоставщикНаименование,
		|	УведомлениеОВводеВОборотИСМПТК.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
		|	УведомлениеОВводеВОборотИСМПТК.Автор КАК Автор,
		|	УведомлениеОВводеВОборотИСМПТК.Состояние КАК Состояние,
		|	УведомлениеОВводеВОборотИСМПТК.ПричинаВводаВОборот КАК ПричинаВводаВОборот
		|ИЗ
		|	Документ.УведомлениеОВводеВОборотИСМПТК КАК УведомлениеОВводеВОборотИСМПТК
		|ГДЕ
		|	УведомлениеОВводеВОборотИСМПТК.Ссылка В(&ДокументыИСМП)
		|;";
		#КонецОбласти
	 ИначеЕсли ИмяДокумента = "УведомлениеОВыводеИзОборотаИСМПТК" Тогда
		#Область ТекстУведомлениеОВыводеИзОборотаИСМПТК
		ТекстРеквизиты = "ВЫБРАТЬ
		|	УведомлениеОВыводеИзОборотаИСМПТК.Ссылка КАК Ссылка,
		|	УведомлениеОВыводеИзОборотаИСМПТК.Организация КАК Организация,
		|	УведомлениеОВыводеИзОборотаИСМПТК.Комментарий КАК Комментарий,
		|	&ДатаДокумента КАК Дата,
		|	УведомлениеОВыводеИзОборотаИСМПТК.Статус КАК Статус,
		|	УведомлениеОВыводеИзОборотаИСМПТК.ДокументОснование КАК ДокументОснование,
		|	1 КАК НомерПакета,
		|	УведомлениеОВыводеИзОборотаИСМПТК.Направление КАК Направление,
		|	УведомлениеОВыводеИзОборотаИСМПТК.Поставщик КАК Поставщик,
		|	УведомлениеОВыводеИзОборотаИСМПТК.ПоставщикНаименование КАК ПоставщикНаименование,
		|	УведомлениеОВыводеИзОборотаИСМПТК.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
		|	УведомлениеОВыводеИзОборотаИСМПТК.Автор КАК Автор,
		|	УведомлениеОВыводеИзОборотаИСМПТК.Состояние КАК Состояние,
		|	УведомлениеОВыводеИзОборотаИСМПТК.ПричинаВыводаИзОборота КАК ПричинаВыводаИзОборота
		|ИЗ
		|	Документ.УведомлениеОВыводеИзОборотаИСМПТК КАК УведомлениеОВыводеИзОборотаИСМПТК
		|ГДЕ
		|	УведомлениеОВыводеИзОборотаИСМПТК.Ссылка В(&ДокументыИСМП)
		|;";
		#КонецОбласти
	ИначеЕсли ИмяДокумента = "УведомлениеОВвозеИзЕАЭСИСМПТК" Тогда
		#Область ТекстУведомлениеОВвозеИзЕАЭСИСМПТК
		ТекстРеквизиты = "ВЫБРАТЬ
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.Ссылка КАК Ссылка,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.Организация КАК Организация,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.Комментарий КАК Комментарий,
		|	&ДатаДокумента КАК Дата,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.Статус КАК Статус,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.ДокументОснование КАК ДокументОснование,
		|	1 КАК НомерПакета,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.Направление КАК Направление,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.Поставщик КАК Поставщик,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.ПоставщикНаименование КАК ПоставщикНаименование,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.Автор КАК Автор,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.Состояние КАК Состояние,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.ТипУведомления КАК ТипУведомления,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.ЭтоКорректировка КАК ЭтоКорректировка,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.СвязанноеУведомление КАК СвязанноеУведомление,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.РегистрационныйНомерСвязанногоУведомления КАК РегистрационныйНомерСвязанногоУведомления,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.ДатаСвязанногоУведомления КАК ДатаСвязанногоУведомления,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.ВидОперации КАК ВидОперации,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.ДатаВыпискиНаБумажномНосителе КАК ДатаВыпискиНаБумажномНосителе,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.РегНомерНаБумажномНосителе КАК РегНомерНаБумажномНосителе,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.Получатель КАК Получатель,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.ПолучательНаименование КАК ПолучательНаименование,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.СтранаОтправления КАК СтранаОтправления,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.ДатаУплатыАкциза КАК ДатаУплатыАкциза,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.НомерКвитанцииАкциза КАК НомерКвитанцииАкциза,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.СуммаАкциза КАК СуммаАкциза,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.Контрагент КАК Контрагент
		|ИЗ
		|	Документ.УведомлениеОВвозеИзЕАЭСИСМПТК КАК УведомлениеОВвозеИзЕАЭСИСМПТК
		|ГДЕ
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.Ссылка В(&ДокументыИСМП)
		|;";
		
		НуженДополнительныйЗапрос = Истина;
		#КонецОбласти
	ИначеЕсли ИмяДокумента = "УведомлениеОВвозеИзТретьихСтранИСМПТК" Тогда
		#Область ТекстУведомлениеОВвозеИзТретьихСтранИСМПТК
		ТекстРеквизиты = "ВЫБРАТЬ
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Ссылка КАК Ссылка,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Организация КАК Организация,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Комментарий КАК Комментарий,
		|	&ДатаДокумента КАК Дата,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Статус КАК Статус,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.ДокументОснование КАК ДокументОснование,
		|	1 КАК НомерПакета,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Направление КАК Направление,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Автор КАК Автор,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Состояние КАК Состояние,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Контрагент КАК Контрагент,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.ТипУведомления КАК ТипУведомления,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.ВидОперации КАК ВидОперации,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.ДатаВыпискиНаБумажномНосителе КАК ДатаВыпискиНаБумажномНосителе,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.РегНомерНаБумажномНосителе КАК РегНомерНаБумажномНосителе,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Получатель КАК Получатель,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.ПолучательНаименование КАК ПолучательНаименование,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.ТипДокументаТаможенногоОформления КАК ТипДокументаТаможенногоОформления,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.СтранаОтправления КАК СтранаОтправления,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.НомерДокументаТаможенногоОформления КАК НомерДокументаТаможенногоОформления,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.ДатаДокументаТаможенногоОформления КАК ДатаДокументаТаможенногоОформления,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.КодТаможенногоОргана КАК КодТаможенногоОргана,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.КодРешенияТаможенногоОргана КАК КодРешенияТаможенногоОргана,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.ДатаВремяПринятияРешения КАК ДатаВремяПринятияРешения
		|ИЗ
		|	Документ.УведомлениеОВвозеИзТретьихСтранИСМПТК КАК УведомлениеОВвозеИзТретьихСтранИСМПТК
		|ГДЕ
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Ссылка В(&ДокументыИСМП)
		|;";
		
		НуженДополнительныйЗапрос = Истина;
		НуженЗапросПоТоварам = Ложь;
		#КонецОбласти
	ИначеЕсли ИмяДокумента = "УведомлениеОбЭкспортеЕАЭСИСМПТК" Тогда
		#Область ТекстУведомлениеОбЭкспортеЕАЭСИСМПТК
		ТекстРеквизиты = "ВЫБРАТЬ
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Ссылка КАК Ссылка,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Организация КАК Организация,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Комментарий КАК Комментарий,
		|	&ДатаДокумента КАК Дата,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Статус КАК Статус,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.ДокументОснование КАК ДокументОснование,
		|	1 КАК НомерПакета,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Поставщик КАК Поставщик,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.ПоставщикНаименование КАК ПоставщикНаименование,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Автор КАК Автор,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Состояние КАК Состояние,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Контрагент КАК Контрагент,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Получатель КАК Получатель,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.ПолучательНаименование КАК ПолучательНаименование,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.СтранаПолучатель КАК СтранаПолучатель,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.НомерДокументаТрансграна КАК НомерДокументаТрансграна,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.ДатаДокументаТрансграна КАК ДатаДокументаТрансграна,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.ДатаВремяОтгрузки КАК ДатаВремяОтгрузки
		|ИЗ
		|	Документ.УведомлениеОбЭкспортеЕАЭСИСМПТК КАК УведомлениеОбЭкспортеЕАЭСИСМПТК
		|ГДЕ
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Ссылка В(&ДокументыИСМП)
		|;";
		
		ТекстДополнительныйЗапросТаблица = ""; //У Экспорта иная структура связи, потребуется свой запрос
		#КонецОбласти
	КонецЕсли;
	
	#Область ТекстТаблицаМарки
	ТекстТаблицаМарки = "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументИСМПТМарки.Ссылка КАК Ссылка,
	|	ДокументИСМПТМарки.КодМаркировки КАК КодМаркировки,
	|	ДокументИСМПТМарки.ВидУпаковки КАК ВидУпаковки,
	|	ДокументИСМПТМарки.Количество КАК Количество,
	|	ДокументИСМПТМарки.КоличествоИсточник КАК КоличествоИсточник,
	|	ДокументИСМПТМарки.GTIN КАК GTIN,
	|	ДокументИСМПТМарки.Номенклатура КАК Номенклатура,
	|	ДокументИСМПТМарки.EAN КАК EAN,
	|	ДокументИСМПТМарки.КодИдентификации КАК КодИдентификации,
	|	ДокументИСМПТМарки.ВидПродукцииИС КАК ВидПродукцииИС,
	|	ДокументИСМПТМарки.GTINВерхнегоУровня КАК GTINВерхнегоУровня
	|ИЗ
	|	Документ." + ИмяДокумента + ".Марки КАК ДокументИСМПТМарки
	|ГДЕ
	|	ДокументИСМПТМарки.Ссылка В(&ДокументыИСМП)
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	ВидПродукцииИС";
	#КонецОбласти
	
	#Область ТекстТаблицаТовары
	//Если НуженЗапросПоТоварам Тогда
	//	ТекстТаблицаТовары = "
	//	|;
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ДокументИСМПТТовары.Ссылка КАК Ссылка,
	//	|	ДокументИСМПТТовары.Номенклатура КАК Номенклатура,
	//	|	ДокументИСМПТТовары.ВидПродукцииИС КАК ВидПродукцииИС,
	//	|	ДокументИСМПТТовары.КоличествоИсточник КАК КоличествоИсточник
	//	|ИЗ
	//	|	Документ." + ИмяДокумента + ".Товары КАК ДокументИСМПТТовары
	//	|ГДЕ
	//	|	ДокументИСМПТТовары.Ссылка В(&ДокументыИСМП)
	//	|ИТОГИ
	//	|	СУММА(КоличествоИсточник)
	//	|ПО
	//	|	ВидПродукцииИС";
	//Иначе
		ТекстТаблицаТовары = "";
	//КонецЕсли;
	#КонецОбласти
	
	#Область ТекстДополнительныйЗапросТаблица
	Если НуженДополнительныйЗапрос Тогда 
		ТекстДополнительныйЗапросТаблица = "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументИСМПТДокументыСоответствия.Ссылка КАК Ссылка,
		|	ДокументИСМПТДокументыСоответствия.ТипДокумента КАК ТипДокумента,
		|	ДокументИСМПТДокументыСоответствия.ДатаДокумента КАК ДатаДокумента,
		|	ДокументИСМПТДокументыСоответствия.НомерДокумента КАК НомерДокумента
		|ИЗ
		|	Документ." + ИмяДокумента + ".ДокументыСоответствия КАК ДокументИСМПТДокументыСоответствия
		|ГДЕ
		|	ДокументИСМПТДокументыСоответствия.Ссылка В(&ДокументыИСМП)";
	КонецЕсли;
	#КонецОбласти
	
	Запрос.Текст = ТекстРеквизиты + ТекстТаблицаМарки + ТекстТаблицаТовары + ТекстДополнительныйЗапросТаблица;
	Запрос.УстановитьПараметр("ДокументыИСМП",  МассивДокументовИСМП);
	ДатаДокумента = ТекущаяДатаСеанса();
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
		
	ТаблицыДанныхДляЗаполненияДокументИСМПТ = Новый Структура;
	ТаблицыДанныхДляЗаполненияДокументИСМПТ.Вставить("ТаблицаРеквизитов", РезультатЗапроса[0].Выгрузить());
	
	Если НужноРазбиватьЗаказПоТГ Тогда
		МассивМарки = Новый Массив();
		ВыборкаМарки = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаМарки.Следующий() Цикл
			
			ВыборкаМаркиПоТГ = ВыборкаМарки.Выбрать();
			
			ТаблицаМарки = Новый ТаблицаЗначений();
			ТаблицаМарки.Колонки.Добавить("КодМаркировки");
			ТаблицаМарки.Колонки.Добавить("ВидУпаковки");
			ТаблицаМарки.Колонки.Добавить("Количество");
			ТаблицаМарки.Колонки.Добавить("КоличествоИсточник");
			ТаблицаМарки.Колонки.Добавить("GTIN");
			ТаблицаМарки.Колонки.Добавить("Номенклатура");
			ТаблицаМарки.Колонки.Добавить("EAN");
			ТаблицаМарки.Колонки.Добавить("КодИдентификации");
			ТаблицаМарки.Колонки.Добавить("ВидПродукцииИС");
			ТаблицаМарки.Колонки.Добавить("GTINВерхнегоУровня");
			ТаблицаМарки.Колонки.Добавить("Ссылка");
			
			Пока ВыборкаМаркиПоТГ.Следующий() Цикл
				НоваяСтрока = ТаблицаМарки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаМаркиПоТГ);
			КонецЦикла;
			
			МассивМарки.Добавить(ТаблицаМарки);
			
		КонецЦикла;		
		ТаблицыДанныхДляЗаполненияДокументИСМПТ.Вставить("ТаблицаМарки", МассивМарки); 
	Иначе
		ТаблицыДанныхДляЗаполненияДокументИСМПТ.Вставить("ТаблицаМарки", РезультатЗапроса[1].Выгрузить());
	КонецЕсли;
	
	//Если НуженЗапросПоТоварам Тогда
	//	Если НужноРазбиватьЗаказПоТГ Тогда
	//		МассивТовары = Новый Массив();
	//		ВыборкаТовары = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//		Пока ВыборкаТовары.Следующий() Цикл
	//			
	//			ВыборкаТоварыПоТГ = ВыборкаТовары.Выбрать();
	//			
	//			ТаблицаТовары = Новый ТаблицаЗначений();
	//			ТаблицаТовары.Колонки.Добавить("Номенклатура");
	//			//ТаблицаТовары.Колонки.Добавить("GTIN");
	//			ТаблицаТовары.Колонки.Добавить("КоличествоИсточник");
	//			//ТаблицаТовары.Колонки.Добавить("ЕдиницаИзмерения");
	//			//ТаблицаТовары.Колонки.Добавить("EAN");
	//			ТаблицаТовары.Колонки.Добавить("ВидПродукцииИС");
	//			//ТаблицаТовары.Колонки.Добавить("Характеристика");
	//			ТаблицаТовары.Колонки.Добавить("Ссылка");
	//			
	//			Пока ВыборкаТоварыПоТГ.Следующий() Цикл
	//				НоваяСтрока = ТаблицаТовары.Добавить();
	//				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТоварыПоТГ);
	//			КонецЦикла;
	//			
	//			МассивТовары.Добавить(ТаблицаТовары);
	//			
	//		КонецЦикла;		
	//		ТаблицыДанныхДляЗаполненияДокументИСМПТ.Вставить("ТаблицаТовары", МассивТовары); 
	//	Иначе
	//		ТаблицыДанныхДляЗаполненияДокументИСМПТ.Вставить("ТаблицаТовары", РезультатЗапроса[2].Выгрузить());
	//	КонецЕсли;
	//Иначе
	//	ТаблицыДанныхДляЗаполненияДокументИСМПТ.Вставить("ТаблицаТовары", Неопределено);		
	//КонецЕсли;
	
	Если НуженДополнительныйЗапрос Тогда
		МассивДокументыСоответствия = Новый Массив();
		ВыборкаДокументыСоответствия = РезультатЗапроса[2].Выбрать();
		Пока ВыборкаДокументыСоответствия.Следующий() Цикл
			
			ТаблицаДС = Новый ТаблицаЗначений();
			ТаблицаДС.Колонки.Добавить("ТипДокумента");
			ТаблицаДС.Колонки.Добавить("ДатаДокумента");
			ТаблицаДС.Колонки.Добавить("НомерДокумента");
			ТаблицаДС.Колонки.Добавить("Ссылка");
									
			НоваяСтрока = ТаблицаДС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДокументыСоответствия);
			МассивДокументыСоответствия.Добавить(ТаблицаДС);
			
		КонецЦикла;		
		ТаблицыДанныхДляЗаполненияДокументИСМПТ.Вставить("ТаблицаДокументыСоответствия", МассивДокументыСоответствия);
	Иначе
		ТаблицыДанныхДляЗаполненияДокументИСМПТ.Вставить("ТаблицаДокументыСоответствия", Неопределено);		
	КонецЕсли;
	
	Возврат ТаблицыДанныхДляЗаполненияДокументИСМПТ;
	
КонецФункции

#КонецОбласти

#КонецОбласти

Процедура СоздатьДокументыАгрегацииВФоне(Параметры, АдресХранилища) Экспорт
	
	МассивУпаковок 			 = Параметры.МассивУпаковок;
	ДанныеШапки 			 = Параметры.ДанныеШапки;
	ЕмкостьУпаковки		  	 = Параметры.ЕмкостьУпаковок;
	СписокСозданныхАгрегаций = Параметры.СписокСозданныхАгрегаций;
	
	ВыполненоУспешно = Ложь;
	
	//Начинаем создание документов по полученным наборам данных
	Если Не МассивУпаковок.Количество() = 0 Тогда
		Для Каждого Набор Из МассивУпаковок Цикл
			
			НовыйДокументАгрегация = Документы.АгрегацияКодовМаркировкиСУЗИСМПТК.СоздатьДокумент();
			
			//Заполнение реквизитов шапки
			ЗаполнитьЗначенияСвойств(НовыйДокументАгрегация, ДанныеШапки);
			
			//Заполнение кода агрегата
			КоличествоФакт = Набор.МассивВложенныхТоваров.Количество();
			
			//Если код агрегата - DataMatrix, разделяем его на КМ и КИ. Если SSCC - оставляем без изменений
			ИсходныеДанные = Новый Структура();
			ИсходныеДанные.Вставить("Штрихкод", 	Набор.КодАгрегата);
			ИсходныеДанные.Вставить("ФорматBase64", Истина);
			СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);
			
			Если Не ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда 
				//Удалось разобрать код, значит это групповая упаковка
				КИ = СтруктураКодовМаркировки.КодИдентификации;
			Иначе
				//Это SSCC 
				КИ = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(Набор.КодАгрегата);
			КонецЕсли;
			
			СтрокаКодАгрегации = НовыйДокументАгрегация.Упаковки.Добавить();
			СтрокаКодАгрегации.ИдентификационныйКодЕдиницыАгрегации = Набор.КодАгрегата; //Это КМ в Base64
			СтрокаКодАгрегации.КодИдентификацииУпаковки  = КИ; //Это КИ, выводим в форму
			СтрокаКодАгрегации.ТипАгрегации    			 = ПредопределенноеЗначение("Перечисление.ТипыАгрегацииИСМПТК.НоваяАгрегация");
			СтрокаКодАгрегации.ЕмкостьУпаковки 			 = ?(ЕмкостьУпаковки = 0, КоличествоФакт, ЕмкостьУпаковки); 
			СтрокаКодАгрегации.ФактическоеКоличествоШтук = КоличествоФакт;
			
			НомерСтрокиАгрегата = СтрокаКодАгрегации.НомерСтроки; 
			
			//Заполнение вложенных товаров
			Для Каждого КодМаркировкиBase64 Из Набор.МассивВложенныхТоваров Цикл
				
				КодМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КодМаркировкиBase64);
				
				//Получаем информацию для заполнения строки
				СтруктураКода 		 = Новый Структура("ШтрихКод, ФорматBase64", КодМаркировкиBase64.Значение, Истина);
				ДанныеКодаМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(СтруктураКода);
				
				Если ДанныеКодаМаркировки = Неопределено Тогда
					ТекстОшибки = НСтр("ru = 'Не удалось распознать код маркировки ""%1""'");
					ТекстОшибки = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, КодМаркировки);
					ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
					Продолжить;
				ИначеЕсли ТипЗнч(ДанныеКодаМаркировки) = Тип("Строка") Тогда 
					ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ДанныеКодаМаркировки);
					Продолжить;
				КонецЕсли;
								
				СтрокаВложенныйТовар = НовыйДокументАгрегация.АгрегированныеКМ.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВложенныйТовар, ДанныеКодаМаркировки,, "КодМаркировки");
				СтрокаВложенныйТовар.КодМаркировки 		 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(ДанныеКодаМаркировки.КодМаркировки);
				СтрокаВложенныйТовар.ИдентификаторСтроки = НомерСтрокиАгрегата;
				
			КонецЦикла;
			
			//Заполнение стандартных полей
			НовыйДокументАгрегация.Дата   = ТекущаяДатаСеанса();
			НовыйДокументАгрегация.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОтчетовСУЗИСМПТК.Черновик");
			
			НовыйДокументАгрегация.Записать();
			СписокСозданныхАгрегаций.Добавить(НовыйДокументАгрегация.Ссылка);			
		КонецЦикла;
		
		ВыполненоУспешно = Истина;
		
	КонецЕсли;
		
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("СписокСозданныхАгрегаций", СписокСозданныхАгрегаций);
	РезультатВыполнения.Вставить("Успешно",	ВыполненоУспешно);
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

Функция ПолучитьСсылкуСвязанногоДокументаПриемкиДляОтгрузки(ДокументСсылкаОтгрузка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УведомлениеОПриемкеЕАЭСИСМПТК.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОПриемкеЕАЭСИСМПТК КАК УведомлениеОПриемкеЕАЭСИСМПТК
	|ГДЕ
	|	УведомлениеОПриемкеЕАЭСИСМПТК.ДокументОснование = &Отгрузка";
	
	Запрос.УстановитьПараметр("Отгрузка", ДокументСсылкаОтгрузка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат ПредопределенноеЗначение("Документ.УведомлениеОПриемкеЕАЭСИСМПТК.ПустаяСсылка");
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаКодаИзФайла

Процедура ВыполнитьДобавлениеКМИзФайлаВФоне(Параметры, АдресХранилища) Экспорт
	
	ПараметрыСканирования  = Параметры.ПараметрыСканирования;
	ТокенАвторизации	   = Параметры.ТокенАвторизации;
	ТаблицаПолученныхКодов = ПолучитьСтруктуруТаблицыКодов();
	МассивОшибок	   	   = Параметры.МассивОшибок;
	СведенияОВыбранныхДокументах = Параметры.СведенияОВыбранныхДокументах;
	
	ЗагрузитьКодыМаркировки(ПараметрыСканирования, ТаблицаПолученныхКодов, МассивОшибок, ТокенАвторизации, СведенияОВыбранныхДокументах);
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("ТаблицаПолученныхКодов", ТаблицаПолученныхКодов);
	РезультатВыполнения.Вставить("Успешно", 			   Истина);
	РезультатВыполнения.Вставить("МассивОшибок",	   	   МассивОшибок);
	ПоместитьВоВременноеХранилище(РезультатВыполнения,     АдресХранилища);
	
КонецПроцедуры

Функция ЗагрузитьКодыМаркировки(ПараметрыСканирования = Неопределено, ТаблицаПолученныхКодов, МассивОшибок, ТокенАвторизации = Неопределено, СведенияОВыбранныхДокументах = Неопределено)
	
	НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();  
	
	Для Каждого ДокументПользователя Из СведенияОВыбранныхДокументах Цикл
		
		ОбщееКоличествоДокументов = ДокументПользователя.ОбщееКоличество;
		ИмяДокумента	 = ДокументПользователя.ИмяДокумента;
		ИсходныеДанные   = ДокументПользователя.МассивКодов;
		
		Если Не ТипЗнч(ИсходныеДанные) = Тип("Массив") Тогда
			ДанныеДляРазбора = Новый Массив;
			ДанныеДляРазбора.Добавить(ИсходныеДанные);
		Иначе 
			ДанныеДляРазбора = ИсходныеДанные;
		КонецЕсли;
		
		Для Каждого КодМаркировкиBase64 Из ДанныеДляРазбора Цикл
			
			ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(КодМаркировкиBase64, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
			
			Если ДанныеРазбора = Неопределено Тогда 
				Если Не ЗначениеЗаполнено(КодМаркировкиBase64.ШтрихКод) Тогда
					ТекстОшибки     = НСтр("ru = 'В файле %2 найдена пустая строка: №%1.'");
					ТекстОшибки     = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, ДанныеДляРазбора.Найти(КодМаркировкиBase64)+1, ?(Не ОбщееКоличествоДокументов = 1, ИмяДокумента, ""));
				Иначе
					ТекстОшибки     = НСтр("ru = '%3 Не удалось разобрать код маркировки %1'") + Символы.ПС + НСтр("ru = 'в строке №%2. Он не был добавлен в документ.'");
					НеКорректныйКод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КодМаркировкиBase64.ШтрихКод);
					НеКорректныйКод = СтрЗаменить(НеКорректныйКод, Символ(29), "");
					ТекстОшибки     = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, НеКорректныйКод, ДанныеДляРазбора.Найти(КодМаркировкиBase64)+1, ?(Не ОбщееКоличествоДокументов = 1, "Файл " + ИмяДокумента + ":", ""));
				КонецЕсли;
				МассивОшибок.Добавить(ТекстОшибки);
				Продолжить;
			КонецЕсли;
			
			СтрокаКодыМаркировки = ТаблицаПолученныхКодов.Добавить();
			
			Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская 
				Или (ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Групповая
				И Не Константы.АвтоОпределениеЛогистическихКодовИСМПТК.Получить()) Тогда 
				
				GTINВерхнегоУровня = ДанныеРазбора.СоставКодаМаркировки.GTIN;
				GTIN = ?(ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Групповая, "", ДанныеРазбора.СоставКодаМаркировки.GTIN);
				
				//Дополнение данных по номенклатуре
				Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская Тогда
					ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(ДанныеРазбора.СоставКодаМаркировки.EAN);
				Иначе
					ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодEANИзGTIN(GTINВерхнегоУровня));
				КонецЕсли;
				
				Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
					Номенклатура   = ДанныеНоменклатуры.Номенклатура;
					Характеристика = ДанныеНоменклатуры.Характеристика;
				Иначе
					Номенклатура   = ДанныеНоменклатуры;
					Характеристика = ДанныеНоменклатуры;
				КонецЕсли;
				
				ВидПродукции = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
				
				СтрокаКодыМаркировки.КодМаркировки 		= КодМаркировкиBase64.ШтрихКод;
				СтрокаКодыМаркировки.GTIN 				= GTIN;
				СтрокаКодыМаркировки.GTINВерхнегоУровня = GTINВерхнегоУровня;
				СтрокаКодыМаркировки.EAN 				= ДанныеРазбора.СоставКодаМаркировки.EAN;
				СтрокаКодыМаркировки.КодИдентификации 	= ДанныеРазбора.НормализованныйКодМаркировки;
				СтрокаКодыМаркировки.ВидУпаковки		= ДанныеРазбора.ВидУпаковки;
				СтрокаКодыМаркировки.ВидПродукцииИС		= ВидПродукции;
				СтрокаКодыМаркировки.Количество			= 1;
				СтрокаКодыМаркировки.Номенклатура   	= Номенклатура;
				СтрокаКодыМаркировки.Характеристика		= Характеристика;
				
			Иначе
				
				ВидУпаковки = ДанныеРазбора.ВидУпаковки;
				Организация = ПараметрыСканирования.Владелец;
				
				Если Константы.АвтоОпределениеЛогистическихКодовИСМПТК.Получить() Тогда
					//Включен автоматический запрос данных с сервера
					Если Не ТокенАвторизации = Неопределено Тогда 
						
						//Поддержка двойного формата кодов SSCC
						УчитыватьДвойнойФорматКодовSSCC = Константы.ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК.Получить();
						Если УчитыватьДвойнойФорматКодовSSCC Тогда
							
							КМПредварительный = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КодМаркировкиBase64.ШтрихКод);
							
							//Формируем список SSCC в разных форматах
							Если СтрДлина(КМПредварительный) = 20 Тогда
								ПреобразованныйКод = Сред(КМПредварительный, 3); //18-значный SSCC
								ДополнительныйКод  = Неопределено;
							ИначеЕсли СтрДлина(КМПредварительный) = 18 Тогда
								ПреобразованныйКод = "00"   + КМПредварительный;
								ДополнительныйКод  = "(00)" + КМПредварительный;
							Иначе
								ПреобразованныйКод = Неопределено;
								ДополнительныйКод  = Неопределено;
							КонецЕсли;
							
							МассивКМДляПроверки = Новый Массив();
							МассивКМДляПроверки.Добавить(КодМаркировкиBase64.ШтрихКод);
							Если НЕ ПреобразованныйКод = Неопределено Тогда
								МассивКМДляПроверки.Добавить(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(ПреобразованныйКод));
							КонецЕсли;
							Если НЕ ДополнительныйКод = Неопределено Тогда
								МассивКМДляПроверки.Добавить(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(ДополнительныйКод));
							КонецЕсли;
							
							КМ = "";
							//Начинаем опрос сервера по каждому из сформированных кодов для проверки
							Для Каждого КодSSCC Из МассивКМДляПроверки Цикл
								СтруктураЗапрос = Новый Структура("Штрихкод, ВидУпаковки, ФорматBase64", КодSSCC, ВидУпаковки, Истина);
								ДанныеПоГрупповомуКоду = ИнтеграцияИСМПТКВызовСервера.ЗапроситьДанныеПоКодуАгрегации(СтруктураЗапрос, Организация, ТокенАвторизации);	
								
								Если Не ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
									//Если по коду вернулась информация, значит нужно использовать этот формат для заполнения таблицы документа
									КМ = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КодSSCC);
									Прервать;
								КонецЕсли;
							КонецЦикла;
							КМ = ?(Не ЗначениеЗаполнено(КМ), КМПредварительный, КМ);
							
						Иначе
							СтруктураЗапрос = Новый Структура("Штрихкод, ВидУпаковки, ФорматBase64", КодМаркировкиBase64.ШтрихКод, ВидУпаковки, Истина);
							ДанныеПоГрупповомуКоду = ИнтеграцияИСМПТКВызовСервера.ЗапроситьДанныеПоКодуАгрегации(СтруктураЗапрос, Организация, ТокенАвторизации);
						КонецЕсли;
						//////
						
						Если Не ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
							
							СтруктураКода = ИнтеграцияИСМПТКВызовСервера.ПолучитьИнформациюПоГрупповомуКоду(ДанныеПоГрупповомуКоду, КМ, ВидУпаковки);
							
							GTIN 			   = СтруктураКода.GTIN;
							GTINВерхнегоУровня = СтруктураКода.GTINВерхнегоУровня;
							EAN                = СтруктураКода.EAN;
							Номенклатура       = СтруктураКода.Номенклатура;
							Характеристика 	   = СтруктураКода.Характеристика;
							ВидПродукцииИС 	   = СтруктураКода.ВидПродукции;
							Количество		   = СтруктураКода.Количество;
							ВидУпаковки		   = СтруктураКода.ВидУпаковки;
							
							Если УчитыватьДвойнойФорматКодовSSCC Тогда
								СтрокаКодыМаркировки.КодМаркировки 	  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(КМ);
								СтрокаКодыМаркировки.КодИдентификации = КМ;
							Иначе
								СтрокаКодыМаркировки.КодМаркировки 	  = КодМаркировкиBase64.ШтрихКод;
								СтрокаКодыМаркировки.КодИдентификации = ДанныеРазбора.НормализованныйКодМаркировки;
							КонецЕсли;
							
							СтрокаКодыМаркировки.GTIN 			  = GTIN;
							СтрокаКодыМаркировки.EAN 			  = EAN;
							СтрокаКодыМаркировки.ВидУпаковки	  = ВидУпаковки;
							СтрокаКодыМаркировки.ВидПродукцииИС	  = ВидПродукцииИС;
							СтрокаКодыМаркировки.Количество		  = Количество;
							СтрокаКодыМаркировки.Номенклатура	  = Номенклатура;
							СтрокаКодыМаркировки.Характеристика	  = Характеристика;
							СтрокаКодыМаркировки.GTINВерхнегоУровня = GTINВерхнегоУровня;
							
						Иначе 
							
							ЗаполнитьСтрокаКодыМаркировкиЕслиОшибка(СтрокаКодыМаркировки, КодМаркировкиBase64, ДанныеРазбора, ВидУпаковки);
							
						КонецЕсли;
						
					Иначе 
						
						ЗаполнитьСтрокаКодыМаркировкиЕслиОшибка(СтрокаКодыМаркировки, КодМаркировкиBase64, ДанныеРазбора, ВидУпаковки);
						
					КонецЕсли;
				Иначе
					//Заполняем коды транспортных упаковок без запроса к серверу
					СтрокаКодыМаркировки.КодМаркировки 		= КодМаркировкиBase64.ШтрихКод;
					СтрокаКодыМаркировки.GTIN 				= "";
					СтрокаКодыМаркировки.GTINВерхнегоУровня = "";
					СтрокаКодыМаркировки.EAN 				= "";
					СтрокаКодыМаркировки.КодИдентификации 	= ДанныеРазбора.НормализованныйКодМаркировки;
					СтрокаКодыМаркировки.ВидУпаковки		= ДанныеРазбора.ВидУпаковки;
					СтрокаКодыМаркировки.ВидПродукцииИС		= "";
					СтрокаКодыМаркировки.Количество			= 1;
					СтрокаКодыМаркировки.Номенклатура   	= "";
					СтрокаКодыМаркировки.Характеристика		= "";
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецФункции

Процедура ЗаполнитьСтрокаКодыМаркировкиЕслиОшибка(СтрокаКодыМаркировки, КодМаркировкиBase64, ДанныеРазбора, ВидУпаковки)
	
	СтрокаКодыМаркировки.КодМаркировки 	  = КодМаркировкиBase64.ШтрихКод;
	СтрокаКодыМаркировки.КодИдентификации = ДанныеРазбора.НормализованныйКодМаркировки;
	СтрокаКодыМаркировки.Количество		  = 1;
	
	Если ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") 
		И Не ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN") Тогда //Для Групповых КМ у Табака иногда некорректно определяется вид упаковки 
																	   //(из-за скобочек у идентификаторов групп, зависит от формата поступившего КМ)
		СтрокаКодыМаркировки.ВидУпаковки = ВидУпаковки;															   
		СтрокаКодыМаркировки.GTINВерхнегоУровня = "";
		СтрокаКодыМаркировки.GTIN = "";
		СтрокаКодыМаркировки.EAN  = "";
		СтрокаКодыМаркировки.ВидПродукцииИС = ДанныеРазбора.ВидыПродукции[0]; //Не можем заполнить однозначно, т.к. без запроса с сервера для транспортной упаковки состав неизвестен
	Иначе
		СтрокаКодыМаркировки.ВидУпаковки		= ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая");
		СтрокаКодыМаркировки.GTINВерхнегоУровня = ДанныеРазбора.СоставКодаМаркировки.GTIN;
		СтрокаКодыМаркировки.GTIN = "";
		СтрокаКодыМаркировки.EAN  = "";
		
		//Можем определить номенклатуру по верхнему уровню
		ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(ДанныеРазбора.СоставКодаМаркировки.EAN);
		Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
			Номенклатура   = ДанныеНоменклатуры.Номенклатура;
			Характеристика = ДанныеНоменклатуры.Характеристика;
		Иначе
			Номенклатура   = ДанныеНоменклатуры;
			Характеристика = ДанныеНоменклатуры;
		КонецЕсли;
		СтрокаКодыМаркировки.Номенклатура   = Номенклатура;
		СтрокаКодыМаркировки.Характеристика = Характеристика;
		СтрокаКодыМаркировки.ВидПродукцииИС	= РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтруктуруТаблицыКодов()
	
	ТаблицаМарки = Новый ТаблицаЗначений;
	ТаблицаМарки.Колонки.Добавить("КодМаркировки");
	ТаблицаМарки.Колонки.Добавить("ВидУпаковки");
	ТаблицаМарки.Колонки.Добавить("Количество");
	ТаблицаМарки.Колонки.Добавить("GTIN");
	ТаблицаМарки.Колонки.Добавить("GTINВерхнегоУровня");
	ТаблицаМарки.Колонки.Добавить("Номенклатура");
	ТаблицаМарки.Колонки.Добавить("Характеристика");
	ТаблицаМарки.Колонки.Добавить("КоличествоИсточник");
	ТаблицаМарки.Колонки.Добавить("EAN");
	ТаблицаМарки.Колонки.Добавить("КодИдентификации");
	ТаблицаМарки.Колонки.Добавить("ВидПродукцииИС");
	
	Возврат ТаблицаМарки;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаИзФормДокументов

// При необходимости изменяет данные поступившие из ТСД по правилам: вложение упаковки всегда должно 
// быть в массиве после строки самой упаковки; если строки с штрихкодом упаковки нет - она добавляется.
//
// Параметры:
//  ДанныеТСД - Массив - данные поступившие с ТСД (изменяемый параметр)
//
// Возвращаемое значение:
//  Булево - в данных ТСД есть иерархия
//
Функция ДополнитьУпорядочитьДанныеТСД(ДанныеТСД) Экспорт
	
	ТипЧисло  = Тип("Число");
	ТипСтрока = Тип("Строка");
	
	// 1. Дополнить данные поступившие из ТСД / внешних источников (в формате ТСД)
	ВсеШтрихкоды = Новый Соответствие;
	Для Каждого ЭлементМассива Из ДанныеТСД Цикл
		ВсеШтрихкоды.Вставить(ЭлементМассива.Штрихкод, Истина);
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из ДанныеТСД Цикл
		
		ШтрихкодУпаковки = "";
		
		Если Не ЭлементМассива.Свойство("ШтрихкодУпаковки", ШтрихкодУпаковки) Тогда
			Продолжить;
		ИначеЕсли Не ЗначениеЗаполнено(ШтрихкодУпаковки) Тогда
			Продолжить;
		ИначеЕсли ВсеШтрихкоды[ШтрихкодУпаковки] = Неопределено Тогда
			ВсеШтрихкоды.Вставить(ШтрихкодУпаковки, Истина);
			НовыйЭлемент = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СкопироватьРекурсивно(ЭлементМассива, Ложь);
			Для Каждого КлючИЗначение Из НовыйЭлемент Цикл
				Ключ = КлючИЗначение.Ключ;
				ТипКолонки = ТипЗнч(ЭлементМассива[Ключ]);
				Если ТипКолонки = ТипСтрока Тогда
					НовыйЭлемент[Ключ] = "";
				ИначеЕсли ТипКолонки = ТипЧисло Тогда
					НовыйЭлемент[Ключ] = 0;
				Иначе
					НовыйЭлемент[Ключ] = Неопределено;
				КонецЕсли;
			КонецЦикла;
			НовыйЭлемент.Штрихкод         = ШтрихкодУпаковки;
			НовыйЭлемент.ШтрихкодУпаковки = "";
			ДанныеТСД.Добавить(НовыйЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
	// 2. Сортировать данные
	ТаблицаСоответствия = Новый ТаблицаЗначений;
	ТаблицаСоответствия.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("Строка"));
	ТаблицаСоответствия.Колонки.Добавить("Штрихкод",         Новый ОписаниеТипов("Строка"));
	ТаблицаСоответствия.Колонки.Добавить("Обновлять",        Новый ОписаниеТипов("Булево"));
	ТаблицаСоответствия.Колонки.Добавить("Уровень",          ОбщегоНазначения.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный));
	ТаблицаСоответствия.Колонки.Добавить("НовыйУровень",     ОбщегоНазначения.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный));
	ТаблицаСоответствия.Колонки.Добавить("Элемент");
	
	ДобавленныеЭлементы = Новый Соответствие;
	
	Для Каждого ЭлементМассива Из ДанныеТСД Цикл
		
		ШтрихкодУпаковки = "";
		ЭлементМассива.Свойство("ШтрихкодУпаковки", ШтрихкодУпаковки);
		
		КлючПоиска		= СтрШаблон("%1-%2", ЭлементМассива.Штрихкод, ШтрихкодУпаковки);
		РезультатПоиска = ДобавленныеЭлементы[КлючПоиска];
		Если РезультатПоиска <> Неопределено Тогда
			РезультатПоиска.Количество = РезультатПоиска.Количество + 1;
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаСоответствия.Добавить();
		НоваяСтрока.ШтрихкодУпаковки = ШтрихкодУпаковки;
		НоваяСтрока.Штрихкод         = ЭлементМассива.Штрихкод;
		НоваяСтрока.Уровень          = 0;
		НоваяСтрока.Элемент          = ЭлементМассива;
		
		ДобавленныеЭлементы.Вставить(КлючПоиска, ЭлементМассива);
		
	КонецЦикла;
	
	ТаблицаСоответствия.Индексы.Добавить("Уровень");
	ТаблицаСоответствия.Индексы.Добавить("Обновлять");
	ТаблицаСоответствия.Индексы.Добавить("Уровень, Штрихкод");
	
	СтруктураПоискаУровень         = Новый Структура("Уровень");
	СтруктураПоискаОбновлять       = Новый Структура("Обновлять", Истина);
	СтруктураПоискаУровеньШтрихкод = Новый Структура("Уровень, Штрихкод");
	
	Уровень 		= 0;
	СчитатьИерархию = Истина;
	СтрокТаблицы    = ТаблицаСоответствия.Количество();
	
	Пока СчитатьИерархию И Уровень <= СтрокТаблицы Цикл
		
		СчитатьИерархию = Ложь;
		СтруктураПоискаУровень.Уровень = Уровень;
		СтрокиУровня = ТаблицаСоответствия.НайтиСтроки(СтруктураПоискаУровень);
		
		Для Каждого СтрокаТЧ Из СтрокиУровня Цикл
			Если ПустаяСтрока(СтрокаТЧ.ШтрихкодУпаковки) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураПоискаУровеньШтрихкод.Уровень  = Уровень;
			СтруктураПоискаУровеньШтрихкод.Штрихкод = СтрокаТЧ.ШтрихкодУпаковки;
			Упаковки = ТаблицаСоответствия.НайтиСтроки(СтруктураПоискаУровеньШтрихкод);
			Если Упаковки.Количество() Тогда
				СчитатьИерархию 	  = Истина;
				СтрокаТЧ.НовыйУровень = Уровень + 1;
				СтрокаТЧ.Обновлять    = Истина;
			КонецЕсли;
		КонецЦикла;
		
		СтрокиУровня = ТаблицаСоответствия.НайтиСтроки(СтруктураПоискаОбновлять);
		Для Каждого СтрокаТЧ Из СтрокиУровня Цикл
			СтрокаТЧ.Уровень      = СтрокаТЧ.НовыйУровень;
			СтрокаТЧ.НовыйУровень = 0;
			СтрокаТЧ.Обновлять    = Ложь;
		КонецЦикла;
		
		Уровень = Уровень + 1;
	КонецЦикла;
	
	Если Уровень > СтрокТаблицы Тогда
		ДанныеТСД = Новый Массив;
		ВызватьИсключение НСтр("ru = 'Получены некорректные данные из ТСД или внешнего файла: обнаружено зацикливание упаковок'");
	КонецЕсли;
	
	ТаблицаСоответствия.Сортировать("Уровень ВОЗР");
	
	СортированныйМассив = Новый Массив;
	Для Каждого СтрокаТЧ Из ТаблицаСоответствия Цикл
		ЭлементДанных = СтрокаТЧ.Элемент;
		ЭлементДанных.Вставить("Уровень", СтрокаТЧ.Уровень);
		СортированныйМассив.Добавить(ЭлементДанных);
	КонецЦикла;
	ДанныеТСД = СортированныйМассив;
	
	Возврат Уровень > 1;
	
КонецФункции

//Переносит массивы добавленных и измененных строк по обработанному штрихкоду в общие массивы.
//
//Параметры:
//   Приемник - См. РезультатЗагрузкиШтрихкодовИзТСД
//   Источник - См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода
//
Процедура ПеренестиДобавленныеИзмененныеСтроки(Приемник, Источник) Экспорт
	
	Для Каждого СтрокаТовары Из Источник.ДобавленныеСтроки Цикл
		Если Приемник.ДобавленныеСтроки.Найти(СтрокаТовары) = Неопределено Тогда
			Приемник.ДобавленныеСтроки.Добавить(СтрокаТовары);
		КонецЕсли;
	КонецЦикла;
	
	Источник.ДобавленныеСтроки.Очистить();
	
	Для Каждого СтрокаТовары Из Источник.ИзмененныеСтроки Цикл
		Если Приемник.ИзмененныеСтроки.Найти(СтрокаТовары) = Неопределено
			И Приемник.ДобавленныеСтроки.Найти(СтрокаТовары) = Неопределено Тогда
			Приемник.ИзмененныеСтроки.Добавить(СтрокаТовары);
		КонецЕсли;
	КонецЦикла;
	
	Источник.ИзмененныеСтроки.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область ГрупповаяОбработкаШтрихкодов

Процедура ЗавершениеПолучитьДанныеПоГорупповымКодамМаркировки_Общая(Форма, РезультатВыполнения, Направление, НеОтправлен) Экспорт
	
	Объект = Форма.Объект;
	СоответствиеГрупповыхКМ = Новый Соответствие;
	МассивГрупповыхКМ		= Новый Массив;
	
	Если Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
		СтруктураОтбора   = Новый Структура("ВидУпаковки", Перечисления.ВидыУпаковокИСМПТК.Групповая);
		СтрокиГрупповыхКМ = Объект.Марки.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого ГрупповаяКМ Из СтрокиГрупповыхКМ Цикл 
			СоответствиеГрупповыхКМ.Вставить(Новый Структура("КИ, ВипУпаковки", ГрупповаяКМ.КодИдентификации, ГрупповаяКМ.ВидУпаковки), ГрупповаяКМ.ПолучитьИдентификатор());
			МассивГрупповыхКМ.Добавить(ГрупповаяКМ.КодИдентификации);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ВидУпаковки", Перечисления.ВидыУпаковокИСМПТК.Логистическая);
	МассивЛогистическихКМ = Объект.Марки.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ЛогистическаяКМ Из МассивЛогистическихКМ Цикл 
		Если Константы.ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК.Получить() Тогда
			//В этом случае придется проверять каждый транспортный код в нескольких форматах (с/без идентификатора 00)
			//Подготавливаем данные для проверки кода в разных форматах
			ИсходныйФормат = ЛогистическаяКМ.КодИдентификации;
			Если СтрДлина(ИсходныйФормат) = 20 Тогда
				ПреобразованныйКод = Сред(ИсходныйФормат, 3); //18-значный SSCC
				ДополнительныйКод  = Неопределено;
			ИначеЕсли СтрДлина(ИсходныйФормат) = 18 Тогда
				ПреобразованныйКод = "00"   + ИсходныйФормат;
				ДополнительныйКод  = "(00)" + ИсходныйФормат;
			Иначе
				ПреобразованныйКод = Неопределено;
				ДополнительныйКод  = Неопределено;
			КонецЕсли;
			
			МассивГрупповыхКМДляПроверки = Новый Массив();
			МассивГрупповыхКМДляПроверки.Добавить(ИсходныйФормат);
			Если НЕ ПреобразованныйКод = Неопределено Тогда
				МассивГрупповыхКМДляПроверки.Добавить(ПреобразованныйКод);
			КонецЕсли;
			Если НЕ ДополнительныйКод = Неопределено Тогда
				МассивГрупповыхКМДляПроверки.Добавить(ДополнительныйКод);
			КонецЕсли;
			
			//Начинаем опрос сервера по каждому из сформированных кодов для проверки наличия на сервере информации по составу
			Для Каждого КодSSCC Из МассивГрупповыхКМДляПроверки Цикл
				СтруктураЗапрос = Новый Структура("Штрихкод, ВидУпаковки, ВидПродукции, ФорматBase64", 
										КодSSCC, Перечисления.ВидыУпаковокИСМПТК.Логистическая, Перечисления.ВидыПродукцииИСМПТК.Обувная, Ложь); //общие параметры у кодов одинаковые
										
				ТокенАвторизации = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
				ДанныеПоГрупповомуКоду = ИнтеграцияИСМПТКВызовСервера.ЗапроситьДанныеПоКодуАгрегации(СтруктураЗапрос, Объект.Организация, ТокенАвторизации, Ложь);	
				
				Если Не ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
					
					Если Не КодSSCC = ИсходныйФормат Тогда
						//Нужно заменить исходное значение кода на тот, который вернул сервер
						СтрокаВДокументе = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", ИсходныйФормат));
						СтрокаВДокументе[0].КодИдентификации = КодSSCC;
						СтрокаВДокументе[0].КодМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(КодSSCC);
						СтрокаВДокументе[0].EAN = КодSSCC;
						СоответствиеГрупповыхКМ.Вставить(Новый Структура("КИ, ВипУпаковки", КодSSCC, ЛогистическаяКМ.ВидУпаковки), ЛогистическаяКМ.ПолучитьИдентификатор());
						МассивГрупповыхКМ.Добавить(КодSSCC);
					Иначе
						СоответствиеГрупповыхКМ.Вставить(Новый Структура("КИ, ВипУпаковки", ИсходныйФормат, ЛогистическаяКМ.ВидУпаковки), ЛогистическаяКМ.ПолучитьИдентификатор());
						МассивГрупповыхКМ.Добавить(ИсходныйФормат);
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СоответствиеГрупповыхКМ.Вставить(Новый Структура("КИ, ВипУпаковки", ЛогистическаяКМ.КодИдентификации, ЛогистическаяКМ.ВидУпаковки), ЛогистическаяКМ.ПолучитьИдентификатор());
			МассивГрупповыхКМ.Добавить(ЛогистическаяКМ.КодИдентификации);
		КонецЕсли;		
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура("ВидУпаковки", Перечисления.ВидыУпаковокИСМПТК.Неопределен);
	МассивНеопознанныхКМ = Объект.Марки.НайтиСтроки(СтруктураОтбора);
	Для Каждого НеопознанныйКМ Из МассивНеопознанныхКМ Цикл 
		СоответствиеГрупповыхКМ.Вставить(Новый Структура("КИ, ВипУпаковки", НеопознанныйКМ.КодИдентификации, НеопознанныйКМ.ВидУпаковки), НеопознанныйКМ.ПолучитьИдентификатор());
		МассивГрупповыхКМ.Добавить(НеопознанныйКМ.КодИдентификации);
	КонецЦикла;
		
	Если МассивГрупповыхКМ.Количество() = 0 Тогда
		Если Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
			ТекстОшибки = НСтр("ru = 'В табличной части Марки отсутствуют коды маркировки упаковок.'"); 
		Иначе
			ТекстОшибки = НСтр("ru = 'В табличной части Марки отсутствуют транспортные коды маркировки.'"); 
		КонецЕсли;
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
			
	ТокенАвторизации = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	СтруктураКодов   = Новый Структура("МассивКодов", МассивГрупповыхКМ);
	ДанныеПоГрупповомуКоду = ИнтерфейсИСМПТК.ЗапроситьДанныеОбАгрегацииСпискаКМ(СтруктураКодов, Объект.Организация, ТокенАвторизации);
	
	Если ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
		
		ТекстОшибки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТекстСообщенияОшибкаЗапросаСоставаУпаковкиПоДаннымСервера();
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		ИнтеграцияИСМПТК.ЗаписатьОшибкуВЖурналРегистрации(ДанныеПоГрупповомуКоду.ТекстОшибки, , Объект.Ссылка);
		
	Иначе
		
		Для Каждого ОбновляемыйГрупповойКод Из СоответствиеГрупповыхКМ Цикл   //исходные КМ упаковок из таблицы документа
			
			//Получение вложенных позиций по КМ упаковки
			СтруктураКода = ИнтеграцияИСМПТКВызовСервера.ПолучитьИнформациюПоГрупповомуКоду(ДанныеПоГрупповомуКоду, ОбновляемыйГрупповойКод.Ключ.КИ, ОбновляемыйГрупповойКод.Ключ.ВипУпаковки);
			
			GTIN 			   = СтруктураКода.GTIN;
			GTINВерхнегоУровня = СтруктураКода.GTINВерхнегоУровня;
			EAN                = СтруктураКода.EAN;
			EANВерхнегоУровня  = СтруктураКода.EANВерхнегоУровня;
			Номенклатура       = СтруктураКода.Номенклатура;
			Характеристика 	   = СтруктураКода.Характеристика;
			ВидПродукцииИС 	   = СтруктураКода.ВидПродукции;
			Количество		   = СтруктураКода.Количество;
			ЭтоГрупповаяУпаковка = СтруктураКода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая");
			
			Если ЗначениеЗаполнено(GTIN) Тогда
				
				СтрокаКМ = Объект.Марки.НайтиПоИдентификатору(ОбновляемыйГрупповойКод.Значение);
				Если НеОтправлен Тогда
					//Количество изменяем только у не отправленного документа. При уточнении номенклатуры у отправленного оставляем старое кол-во, т.к. оно уже ушло на сервер.
					СтрокаКМ.Количество = Количество;
				КонецЕсли;
				
				СтрокаКМ.GTIN = ?(ЗначениеЗаполнено(GTINВерхнегоУровня) И Не ЭтоГрупповаяУпаковка, GTINВерхнегоУровня, GTIN);  
				СтрокаКМ.EAN  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодEANИзGTIN(СтрокаКМ.GTIN);
				СтрокаКМ.GTINВерхнегоУровня = ?(ЭтоГрупповаяУпаковка, GTINВерхнегоУровня, "");
				СтрокаКМ.Номенклатура   = Номенклатура;
				СтрокаКМ.ВидПродукцииИС = ВидПродукцииИС;
								
				Если НеОтправлен Тогда
					Форма.Модифицированность = Истина;
				Иначе
					Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК") Тогда
						//В уже отправленном документе Уведомление о ввозе (Импорт) в ТЧ Товары также присутствует информация о вложенных позициях. Для документов, созданных и обновленных с сервера
						//в базе с версией БМ 1.0.4.4 и ниже номенклатура в ТЧ очищалась при обновлении документа, поэтому проверяем таблицу и восстанавливаем данные при необходимости.
						Для Каждого СтрокаТовар Из Объект.Товары Цикл
							Если Не ЗначениеЗаполнено(СтрокаТовар.Номенклатура) Тогда
								
								ДанныеНоменклатуры = ИнтеграцияИСМПТКПереопределяемый.ПолучитьНоменклатуруПоШтрихкоду(СтрокаТовар.EAN);
								Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
									Номенклатура   = ДанныеНоменклатуры.Номенклатура;
									Характеристика = ДанныеНоменклатуры.Характеристика;
								Иначе
									Номенклатура   = ДанныеНоменклатуры;
									Характеристика = Неопределено;
								КонецЕсли;
								СтрокаТовар.Номенклатура   = Номенклатура;
								СтрокаТовар.Характеристика = Характеристика;
								
							Иначе
								Продолжить;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Форма.Записать();
					
				КонецЕсли;
				
			Иначе
				
				//В полученном с сервера ответе по вложенности не поступило информации о составе упаковки
				Если Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
					ТекстОшибки = НСтр("ru = 'Для кода %1 не удалось получить данные с сервера. Возможно, у организации нет доступа к просмотру содержимого этой агрегации на стороне ИС МПТ или упаковка уже расформирована.'");
				Иначе
					Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.ОжидаетПриемку") Тогда
						ТекстОшибки = НСтр("ru = 'Для кода %1 не удалось получить данные с сервера. Информация о вложенности кода будет доступна только после приемки документа.'");
					Иначе
						ТекстОшибки = НСтр("ru = 'Для кода %1 не удалось получить данные с сервера. Возможно, упаковка уже расформирована.'");
					КонецЕсли;
				КонецЕсли;
				ТекстОшибки = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, ОбновляемыйГрупповойКод.Ключ.КИ);
				ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
	
		Форма.СформироватьДеревоКодовМаркировки();
		
	КонецЕсли;
	
КонецПроцедуры

функция ПолучитьНоменклатуруПоШтрихкоду(EAN, Форма = Неопределено) Экспорт
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ПолучитьНоменклатуруПоШтрихкоду(EAN);
	
КонецФункции

//В структуре ОтветСервераСостояниеКМ:
//ТекстОшибки - Если в запросе передан 1 код и:
//					- на текущий момент код есть в базе ИС МПТ и принадлежит организации или когда-то состоял на ее балансе - строка пустая,
//							параметр РезультатОтправкиЗапроса.КодСостояния = 200.
//					- на текущий момент код есть в базе ИС МПТ, но он не принадлежит организации и никогда не состоял на ее балансе - строка пустая,
//							параметр РезультатОтправкиЗапроса.КодСостояния = 200.
//					- на текущий момент отсутствует в базе ИС МПТ (был удален или передан некорректный код) - строка = информация об ошибке запроса, 
//							параметр РезультатОтправкиЗапроса.КодСостояния = 404.
//				Если в запросе передано несколько кодов и:
//					- все они на текущий момент есть в базе ИС МПТ и принадлежат орг-и или хотя бы раз когда-то были на ее балансе - строка пустая,
//							параметр РезультатОтправкиЗапроса.КодСостояния = 200.
//					- все они на текущий момент есть в базе ИС МПТ, но никогда не состояли на балансе организации -  строка пустая, 
//							параметр РезультатОтправкиЗапроса.КодСостояния = 200.
//					- все они на текущий момент отсутствуют в базе ИС МПТ (удалены или переданные коды некорректны) - строка = информация об ошибке общего запроса,
//							параметр РезультатОтправкиЗапроса.КодСостояния = 404.
//					- набор содержит как корректные, так и некорректные КМ - строка пустая,
//							параметр РезультатОтправкиЗапроса.КодСостояния = 200.
//
//ДанныеКМ	  - Если в запросе передано несколько кодов и:
//					- все они на текущий момент отсутствуют в базе ИС МПТ, то параметр = Неопределено. Обрабатывается в ветке (1)
//					- все они на текущий момент есть в базе ИС МПТ, но ни один не принадлежит организации и никогда не был на ее балансе, то параметр = Соответствие, но пустое. Обрабатывается в ветке (2)
//					- все они на текущий момент есть в базе ИС МПТ и принадлежат орг-и или когда-то были на ее балансе, то параметр = Соответствие с информацией по каждому коду (структура данных). Обрабатывается в ветке (3)
//					- набор содержит как корректные, так и некорректные КМ, то параметр = Соответствие, где:
//							- принадлежащие организации КМ, найденные в базе ИС МПТ - есть в соответствии с информацией о статусе и владельце; Обрабатывается в ветке (3.4)
//                          - не принадлежащие организации КМ, но когда-то состоявшие на балансе, найденные в базе ИС МПТ - есть в соответствии с информацией о статусе и владельце; Обрабатывается в ветке (3.3)
//                          - не принадлежащие организации КМ, никогда у нее не состоявшие, найденные в базе ИС МПТ:
//									- если Организация разделяет карточку GTIN этого кода в Нац. каталоге (совместное использование) - в структуре ответа в соответствии будет заполнен только GTIN. Обрабатывается в ветке (3.2)
//									- если Организация не имеет в списке товаров такой GTIN - в структуре ответа в соответствии будет только информация, что GTIN не найден. Обрабатывается в ветке (3.1)
//                          - КМ, не найденные в базе ИС МПТ - есть в соответствии с пометкой, что GTIN не найдены; Обрабатывается в ветке (3.1)
// 				Если в запросе передан 1 код и:
//					- на текущий момент код есть в базе ИС МПТ и принадлежит организации или когда-то состоял на ее балансе, то параметр = Соответствие со структурой данных КМ. Обрабатывается в ветке (3)
//					- на текущий момент код есть в базе ИС МПТ, но он не принадлежит организации и никогда не состоял на ее балансе, параметр = Соответствие, но пустое. Обрабатывается в ветке (2)
//					- на текущий момент отсутствует в базе ИС МПТ (был удален или передан некорректный код), параметр = Неопределено. Обрабатывается в ветке (1)
//
Процедура ОбработатьОтветСервераПоСостояниюКМ_Общая(Форма, МассивКМ, ОтветСервераСостояниеКМ, ИмяДокумента, НовоеСоответствиеСтатусов = Неопределено) Экспорт
	
	//См. комментарий по обработке ответа сервера в шапке процедуры.
	Если МассивКМ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	ТекстСообщенияОбщее = "";
	НовоеСоответствиеСтатусов = Новый Соответствие;
	
	////Обработка ответа сервера: ветка (1)////
	Если ЗначениеЗаполнено(ОтветСервераСостояниеКМ.ТекстОшибки) Тогда
		
		//Наличие ошибки в структуре ответа подразумевает, что ни один из запрошенных КМ не найден на сервере ИС МПТ.
		Для Каждого КИ Из МассивКМ Цикл
			ТекстСообщения = НСтр("ru = 'Не удалось получить информацию по коду %1: данные отсутствуют на сервере ИС МПТ. Возможно, допущена ошибка в текстовом представлении кода маркировки. С ним могут возникнуть проблемы при отправке документа!'");
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КИ);
			ТекстСообщенияОбщее = ?(ТекстСообщенияОбщее = "", ТекстСообщения, ТекстСообщенияОбщее + Символы.ПС + ТекстСообщения);
			
			НовоеСоответствиеСтатусов.Вставить(КИ, Истина);
		КонецЦикла;
		
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(НСтр("ru = 'Внимание! При проверке статуса КМ по данным сервера ИС МПТ обнаружены проблемы.'"));
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияОбщее);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(НСтр("ru = 'Результаты проверки будут сброшены при записи или закрытии формы документа.'"));
		Возврат;
		
	КонецЕсли;
	////////////////////////////////////////////
	
	ДанныеПоКодамСервер = ОтветСервераСостояниеКМ.ДанныеКМ;
	ТекстСообщенияОшибкаДоступа   = "";
	ТекстСообщенияОшибкаНеНайден  = "";
	ТекстСообщениеОшибкаВладельца = "";
	ТекстСообщенияОшибкаСтатуса   = "";
		
	Для Каждого КИ Из МассивКМ Цикл
		
		НайденноеСоответствиеКода = ДанныеПоКодамСервер.Получить(КИ);
		Если НайденноеСоответствиеКода = Неопределено Тогда
			
			////Обработка ответа сервера: ветка (2)////
			ТекстСообщения = НСтр("ru = 'Не удалось получить информацию по коду %1: у организации нет доступа к просмотру информации. Возможно, этот код еще не принадлежит организации по данным ИС МПТ. С ним могут возникнуть проблемы при отправке документа!'");
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КИ);
			ТекстСообщенияОшибкаДоступа = ?(ТекстСообщенияОшибкаДоступа = "", ТекстСообщения, ТекстСообщенияОшибкаДоступа + Символы.ПС + ТекстСообщения); 
			
			НовоеСоответствиеСтатусов.Вставить(КИ, Истина);
			////////////////////////////////////////////			
		Иначе
			
			////Обработка ответа сервера: ветка (3)////
			//3.1 - Код маркировки может или совсем отсутствовать на сервере ИС МПТ (ошибка 404 - код удален из базы или передан некорректно),
			//		или он не принадлежит организации сейчас и никогда не состоял на ее балансе, 
			//      и сама организация не разделяет карточку этого товара в Нац.каталоге, поэтому доступа к информации нет.
			//		В данном случае не можем разделить данные варианты, поэтому формируем общее сообщение.
			Если НайденноеСоответствиеКода.GTIN = "GTIN не найден" Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось получить информацию по коду %1: не найдена информация о GTIN. С кодом могут возникнуть проблемы при отправке документа!'");
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КИ, );
				ТекстСообщенияОшибкаНеНайден = ?(ТекстСообщенияОшибкаНеНайден = "", ТекстСообщения, ТекстСообщенияОшибкаНеНайден + Символы.ПС + ТекстСообщения); 
				
				НовоеСоответствиеСтатусов.Вставить(КИ, Истина);
				Продолжить;
			КонецЕсли;
			
			//3.2 - Организация может разделять карточку товара в Нац.каталоге, однако переданный код или отсутствует на сервере вообще,
			//      или не принадлежит и никогда не состоял на балансе организации. В этом случае в ответе сервера содержится только GTIN.
			Если НайденноеСоответствиеКода.СтатусКМ = Неопределено Тогда 
				ТекстСообщения = НСтр("ru = 'Не удалось получить информацию по коду %1: возможно, он не состоит на балансе организации по данным сервера ИС МПТ. С ним могут возникнуть проблемы при отправке документа!'");
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КИ, );
				ТекстСообщенияОшибкаНеНайден = ?(ТекстСообщенияОшибкаНеНайден = "", ТекстСообщения, ТекстСообщенияОшибкаНеНайден + Символы.ПС + ТекстСообщения); 
				
				НовоеСоответствиеСтатусов.Вставить(КИ, Истина);
				Продолжить;
			КонецЕсли;
			
			//3.3 - Код маркировки когда-то состоял на балансе организации, поэтому к нему есть доступ. Но на текущий момент он числится у другого участника системы
			//		и его нельзя использовать.
			ТекущийВладелецНаименование = НайденноеСоответствиеКода.Владелец; //Наименование с сервера
			ТекущийВладелец = НайденноеСоответствиеКода.ВладелецСсылка;
			Если Не ТекущийВладелец = Объект.Организация Тогда
				ТекстСообщения = НСтр("ru = 'Обнаружено несоответствие: текущий владелец кода %1 - %2. В документе нельзя указывать коды, не принадлежащие организации. Могут возникнуть проблемы при отправке документа!'");
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КИ, ?(ЗначениеЗаполнено(ТекущийВладелец), ТекущийВладелец, ТекущийВладелецНаименование));
				ТекстСообщениеОшибкаВладельца = ?(ТекстСообщениеОшибкаВладельца = "", ТекстСообщения, ТекстСообщениеОшибкаВладельца + Символы.ПС + ТекстСообщения); 
				
				НовоеСоответствиеСтатусов.Вставить(КИ, Истина);
				Продолжить;
			КонецЕсли;
			
			//3.4 - Код маркировки принадлежит организации и данные по нему получены. Нужно проверить текущий статус кода - подходит ли он для заполняемого документа.
			СтатусКода = НайденноеСоответствиеКода.СтатусКМ;
			МассивДопустимыхСтатусовКМ = ИнтеграцияИСМПТК.ДопустимыеСтатусыКМДляДокументаИСМПТ(ИмяДокумента);
			Если МассивДопустимыхСтатусовКМ.Найти(СтатусКода) = Неопределено Тогда 
				ТекстСообщения = НСтр("ru = 'Обнаружено несоответствие: код %1 имеет статус ""%2"" по данным сервера ИС МПТ. Его нельзя указывать в текущем документе. Могут возникнуть проблемы при отправке документа!'");
				ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КИ, СтатусКода);
				ТекстСообщенияОшибкаСтатуса = ?(ТекстСообщенияОшибкаСтатуса = "", ТекстСообщения, ТекстСообщенияОшибкаСтатуса + Символы.ПС + ТекстСообщения); 
				
				НовоеСоответствиеСтатусов.Вставить(КИ, Истина);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ТекстСообщенияОбщее = ТекстСообщенияОшибкаДоступа   + ?(ТекстСообщенияОшибкаДоступа   = "", "", Символы.ПС)
						+ ТекстСообщенияОшибкаНеНайден  + ?(ТекстСообщенияОшибкаНеНайден  = "", "", Символы.ПС)
						+ ТекстСообщениеОшибкаВладельца + ?(ТекстСообщениеОшибкаВладельца = "", "", Символы.ПС)
						+ ТекстСообщенияОшибкаСтатуса;
	
	Если Не ТекстСообщенияОбщее = "" Тогда 
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(НСтр("ru = 'Внимание! При проверке статуса КМ по данным сервера ИС МПТ обнаружены проблемы.'"));
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияОбщее);
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(НСтр("ru = 'Результаты проверки будут сброшены при записи или закрытии формы документа.'"));
	Иначе
		//Все коды в порядке, выводим общее сообщение
		ТекстСообщения = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ТекстСообщенияКодыДоступныДляИспользованияВДокументе(МассивКМ.Количество() = 1); 
		ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаличиеУпаковокПоКоторымНеПолучилосьВыполнитьЗапросСостава(Форма) Экспорт
	
	//Вызывается после загрузки данных из файла/ТСД/МП в таблицу документа.
	//Необходимо проверить выполнялся ли автоматический запрос данных упаковок с сервера ИС МПТ и если выполнялся - 
	//не осталось ли упаковок, по которым не удалось получить состав.
	//Если такие коды были, нужно оповестить
	Если Константы.АвтоОпределениеЛогистическихКодовИСМПТК.Получить() Тогда
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("GTIN", ""); //содержит информацию о вложенных товарах
		СтруктураОтбора.Вставить("ВидУпаковки", ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая"));
		
		НайденныеСтроки = Форма.Объект.Марки.НайтиСтроки(СтруктураОтбора);
		Если Не НайденныеСтроки.Количество() = 0 Тогда
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(нСтр("ru='При загрузке списка кодов маркировки не удалось получить информацию о вложенности некоторых транспортных упаковок.'", "ru"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ПрограммныйИнтерфейс

// Результат серверной обработки полученных из ТСД штрихкодов.
//
// Параметры:
//   ИдентификаторСтроки - Число - идентификатор текущей проверяемой упаковки формы проверки и подбора.
//
// Возвращаемое значение:
//   Структура - результат обработки:
//    * ТребуетсяАвторизация      - Булево - Если Истина, то обработка не выполнена: требуется авторизация во внешнем сервисе
//    * ШтрихкодыДляСопоставления - Массив - Если заполнен, то обработка не выполнена: обнаружены неизвестные штрихкоды номенклатуры
//    * ЕстьОшибкиВДереве         - Булево - Если Истина, то обработка не выполнена: модуль штрихкодирования вернул эту ошибку
//    * АдресДереваУпаковок       - Строка, Неопределено - адрес дерева упаковок для отображения ошибки
//    * ОбщаяОшибка               - Булево - Если Истина, то обработка не выполнена: модуль штрихкодирования вернул эту ошибку
//    * ТекстОбщейОшибки          - Строка - Расшифровка общей ошибки
//
//    * Счетчик      - Число  - Количество штрихкодов обработанных на сервере (не переданы на клиент)
//    * Обработано   - Число  - Количество обработанных штрихкодов в текущем наборе
//    * Всего        - Число  - Количество штрихкодов требующих обработки
//    * ШтрихкодыТСД - Массив из Структура - Штрихкоды требующие обработки
//
//    * ПредложитьЗагрузитьВУпаковке - Булево - можно предложить пользователю загрузить данные ТСД в одной упаковке
//    * ТекстПредложенияОЗагрузке    - Строка - доступная распознанная структура иерархии
//    * ПроверяемаяУпаковка          - Число, Неопределено - открытая до начала групповой обработки упаковка (идентификатор).
//
//    * ДобавленныеСтроки         - Массив - Добавленные строки документа
//    * ИзмененныеСтроки          - Массив - Измененные строки документа
//
Функция РезультатЗагрузкиШтрихкодовИзТСД(ИдентификаторСтроки = Неопределено) Экспорт
	
	Результат = Новый Структура;
	
	// Результат: ошибка загрузки
	Результат.Вставить("ТребуетсяАвторизация",               			  Ложь);
	Результат.Вставить("ШтрихкодыДляСопоставления",          			  Новый Массив);
	Результат.Вставить("АдресУточнениеКоэффициентовУпаковок", 			  Неопределено);
	Результат.Вставить("ЕстьОшибкиВДереве",                   			  Ложь);
	Результат.Вставить("АдресДереваУпаковок",                 			  Неопределено);
	Результат.Вставить("ОбщаяОшибка",                        			  Ложь);
	Результат.Вставить("ТекстОбщейОшибки",                   			  "");
	
	// Результат: произведена частичная или полная загрузка
	Результат.Вставить("Счетчик",      									  0); // количество обработанных кодов не требующих передачи на клиент
	Результат.Вставить("Обработано",   									  0);
	Результат.Вставить("Всего",        									  0);
	Результат.Вставить("ШтрихкодыТСД", 									  Новый Массив);
	
	// Формы проверки и подбора
	Результат.Вставить("ПредложитьЗагрузитьВУпаковке",                    Ложь);
	Результат.Вставить("ТекстПредложенияОЗагрузке",                       "");
	Результат.Вставить("ПроверяемаяУпаковка",                             ИдентификаторСтроки);
	Результат.Вставить("ЭтоВосстановлениеВложенностиУпаковок",            Ложь);
	Результат.Вставить("ДанныеДляВосстановлениеВложенности",              Неопределено);
	Результат.Вставить("ПересчитыватьИтогиВДеревеМаркированнойПродукции", Ложь);
	
	// Предложение сменить детализацию на рекомендуемую на основе статистики
	Результат.Вставить("ПредложитьИзменитьДетализацию",     			  Ложь);
	Результат.Вставить("РекомендуемыеДетализации",             			  Неопределено);
	Результат.Вставить("ОписаниеРекомендацииСменыДетализации", 			  "");
	
	// Обработанные строки
	Результат.Вставить("ДобавленныеСтроки", 							  Новый Массив);
	Результат.Вставить("ИзмененныеСтроки",  							  Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Удаляет из массива штрихкодов обработанные для уменьшения объема данных к передаче на клиент
// 
// Параметры:
// 	РезультатЗагрузки - См. РезультатЗагрузкиШтрихкодовИзТСД
Процедура ОставитьНеобработанныеДанные(РезультатЗагрузки) Экспорт
	
	Если РезультатЗагрузки.Обработано > 0 Тогда
		
		РезультатЗагрузки.Счетчик = РезультатЗагрузки.Счетчик + РезультатЗагрузки.Обработано;
		ШтрихкодыТСД = Новый Массив;
		
		Для Индекс = РезультатЗагрузки.Обработано По РезультатЗагрузки.Всего - 1 Цикл
			ШтрихкодыТСД.Добавить(РезультатЗагрузки.ШтрихкодыТСД[Индекс]);
		КонецЦикла;
		
		РезультатЗагрузки.ШтрихкодыТСД = ШтрихкодыТСД;
		РезультатЗагрузки.Всего        = РезультатЗагрузки.Всего - РезультатЗагрузки.Обработано;
		РезультатЗагрузки.Обработано   = 0;
		
	КонецЕсли;
	
КонецПроцедуры

// Серверная часть обработки штрихкодов при их загрузке из ТСД в формы документов (без иерархической проверки)
//
// Параметры:
//   Форма                 - ФормаКлиентскогоПриложения - источник вызова
//   ШтрихкодыТСД          - Массив Из Структура - данные ТСД с преобразованными в Base64 штрихкодами
//   ПараметрыСканирования - См. ШтрихкодированиеИС.ПараметрыСканирования
//
// Возвращаемое значение:
//   См. РезультатЗагрузкиШтрихкодовИзТСД
Функция ОбработатьПолученныеДанныеТСДВДокументе(Форма, ШтрихкодыТСД, ПараметрыСканирования, ТолькоКодыМаркировки = Истина) Экспорт
	
	Результат = РезультатЗагрузкиШтрихкодовИзТСД();
	ДополнитьУпорядочитьДанныеТСД(ШтрихкодыТСД);
	
	ДанныеШтрихкодов                = Новый Массив;
	МассивПропущенныхШтрихкодов     = Новый Массив;
	КешДанныхРазбора                = Новый Соответствие;
	ПроверятьАлфавитКодовМаркировки = Истина;
	
	ПредставлениеДопустимыхВидовПродукции = СтрСоединить(ПараметрыСканирования.ДопустимыеВидыПродукции, ", ");
	Для Каждого СтрокаДанныхТСД Из ШтрихкодыТСД Цикл
		
		Штрихкод	  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтрокаДанныхТСД.Штрихкод);
		ДанныеРазбора = ВидУпаковкиИПредставлениеШтрихкода(Штрихкод, ПараметрыСканирования.ДопустимыеВидыПродукции, КешДанныхРазбора, Неопределено, ПроверятьАлфавитКодовМаркировки);
		
		Если ДанныеРазбора.ВидУпаковки = Неопределено Тогда
			
			Если ТолькоКодыМаркировки Тогда
				
				РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПереопределяемый.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Код %1 не является штрихкодом потребительской, групповой или логистической
						           |упаковки для вида продукции: %2. Пропущен.'"), Штрихкод, ПредставлениеДопустимыхВидовПродукции));
				МассивПропущенныхШтрихкодов.Добавить(СтрокаДанныхТСД);
				Продолжить;
				
			Иначе
				СтрокаДанныхТСД.Вставить("НормализованныйШтрихкод", Штрихкод);
				СтрокаДанныхТСД.Вставить("ШтрихкодСОшибкой", 		Ложь);
			КонецЕсли;
			
		Иначе
			
			СтрокаДанныхТСД.Вставить("НормализованныйШтрихкод", ДанныеРазбора.НормализованныйШтрихкод);
			СтрокаДанныхТСД.Вставить("ШтрихкодСОшибкой", 		Ложь);
			
		КонецЕсли;
		
		ДанныеШтрихкода = Новый Структура("Штрихкод, Количество", ДанныеРазбора.НормализованныйШтрихкод, СтрокаДанныхТСД.Количество);
		ДанныеШтрихкодов.Добавить(ДанныеШтрихкода);
		
	КонецЦикла;
	
	Если МассивПропущенныхШтрихкодов.Количество() Тогда
		Для Каждого ЭлементМассива Из МассивПропущенныхШтрихкодов Цикл
			ПорядковыйНомер = ШтрихкодыТСД.Найти(ЭлементМассива);
			Если ПорядковыйНомер <> Неопределено Тогда
				ШтрихкодыТСД.Удалить(ПорядковыйНомер);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Результат.ШтрихкодыТСД = ДанныеШтрихкодов;
	Результат.Всего        = ДанныеШтрихкодов.Количество();
	
	Возврат Результат;
	
КонецФункции

Функция ВидУпаковкиИПредставлениеШтрихкода(Знач Штрихкод, ВидПродукции, КешДанныхРазбора = Неопределено, НастройкиРазбораКодовМаркировки = Неопределено, ПроверятьАлфавитКодовМаркировки = Истина) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВидУпаковки", Неопределено);
	Результат.Вставить("НормализованныйШтрихкод", Штрихкод);
	
	ДанныеРазбораИРезультат = КешДанныхРазбора[Штрихкод];
	Если ДанныеРазбораИРезультат <> Неопределено Тогда
		ДанныеРазбора = ДанныеРазбораИРезультат.ДанныеРазбора;
		Если ДанныеРазбора <> Неопределено Тогда
			Результат.ВидУпаковки 			  = ДанныеРазбораИРезультат.ДанныеРазбора.ВидУпаковки;
			Результат.НормализованныйШтрихкод = ДанныеРазбораИРезультат.ДанныеРазбора.НормализованныйКодМаркировки;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	РезультатРазбора            = Неопределено;
	ПримечаниеКРазборуШтрихкода = Неопределено;
	
	Если ИнтеграцияИСМПТКПереопределяемый.НайтиНедопустимыеСимволыXMLПлатформа(Штрихкод) Тогда
		РезультатРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.РазобратьСтрокуШтрихкодаGS1(Штрихкод);  //Проверка, что Штрихкод это код маркировки
		Если РезультатРазбора.Разобран Тогда
			СтрокаКМПредставление = "";
			СтрокаКМСпецсимволы   = ""; //ПолныйКодМаркировки
			РозничноеВыбытиеИСМПТК.ПолныйШтрихкодИзНормализованного(РезультатРазбора.ДанныеШтрихкода, СтрокаКМПредставление, СтрокаКМСпецсимволы);
			ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(СтрокаКМСпецсимволы, ВидПродукции, ПримечаниеКРазборуШтрихкода,	НастройкиРазбораКодовМаркировки, ПроверятьАлфавитКодовМаркировки);
		Иначе
			ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(Штрихкод, ВидПродукции, ПримечаниеКРазборуШтрихкода,	НастройкиРазбораКодовМаркировки, ПроверятьАлфавитКодовМаркировки);
		КонецЕсли;
	Иначе
		ДанныеРазбора 	 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(Штрихкод, ВидПродукции, ПримечаниеКРазборуШтрихкода, НастройкиРазбораКодовМаркировки, ПроверятьАлфавитКодовМаркировки);
	КонецЕсли;
	
	ВидУпаковки = Неопределено;
	Если ДанныеРазбора = Неопределено Тогда
		Если РезультатРазбора <> Неопределено И РезультатРазбора.Разобран Тогда
			НормализованныйШтрихкод = РезультатРазбора.ПредставлениеШтрихкода;
		Иначе
			НормализованныйШтрихкод = Штрихкод;
		КонецЕсли;
	Иначе
		ВидУпаковки             = ДанныеРазбора.ВидУпаковки;
		НормализованныйШтрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
	КонецЕсли;
	
	ДанныеРазбораИРезультат = Новый Структура;
	ДанныеРазбораИРезультат.Вставить("ДанныеРазбора",               ДанныеРазбора);
	ДанныеРазбораИРезультат.Вставить("ПримечаниеКРазборуШтрихкода", ПримечаниеКРазборуШтрихкода);
	КешДанныхРазбора.Вставить(Штрихкод, ДанныеРазбораИРезультат);
	
	Результат.ВидУпаковки 			  = ВидУпаковки;
	Результат.НормализованныйШтрихкод = НормализованныйШтрихкод;
	
	Возврат Результат;
	
КонецФункции

// Подготовливает параметр сканирования ДополнительныеВариантыСопоставленияНоменклатуры
//
// Параметры:
//  ПараметрыСканирования - См. ШтрихкодированиеИС.ПараметрыСканирования
//  ПодобраннаяМаркируемаяПродукция - ДанныеФормыКоллекция Из ДанныеФормыСтруктура - Таблица ПодобраннаяМаркируемаяПродукция из формы проверки и подбора:
//    * GTIN - Строка - GTIN
//    * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура
//    * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика номенклатуры
//    * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия номенклатуры
//
Процедура ПодготовитьДополнительныеВариантыСопоставленияНоменклатуры(ПараметрыСканирования, ПодобраннаяМаркируемаяПродукция) Экспорт
	
	ПараметрыСканирования.ДополнительныеВариантыСопоставленияНоменклатуры = Новый Соответствие;
	
	ТаблицаСопоставленияПоGTIN = ПодобраннаяМаркируемаяПродукция.Выгрузить(, "GTIN, Номенклатура, Характеристика, Серия");
	ТаблицаСопоставленияПоGTIN.Свернуть("GTIN, Номенклатура, Характеристика, Серия");
	
	Для Каждого СтрокаТаблицы Из ТаблицаСопоставленияПоGTIN Цикл
		
		ШтрихкодEAN = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодEANИзGTIN(СтрокаТаблицы.GTIN);
		
		ВариантыСопоставления = ПараметрыСканирования.ДополнительныеВариантыСопоставленияНоменклатуры.Получить(ШтрихкодEAN);
		Если ВариантыСопоставления = Неопределено Тогда
			ВариантыСопоставления = Новый Массив;
		КонецЕсли;
		
		ВариантСопоставления = Новый Структура("Номенклатура, Характеристика, Серия");
		ЗаполнитьЗначенияСвойств(ВариантСопоставления, СтрокаТаблицы);
		ВариантыСопоставления.Добавить(ВариантСопоставления);
		
		ПараметрыСканирования.ДополнительныеВариантыСопоставленияНоменклатуры.Вставить(ШтрихкодEAN, ВариантыСопоставления);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ГрупповоеСозданиеДокументов

#Область НанесениеКМ

Функция СформироватьГруппуНанесений(ЗаказКМ) Экспорт
	
	МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияГруппаНанесений(ЗаказКМ);
	СписокНанесенияКМ = Новый Массив();
	
	Для Каждого СформированныеДанные Из МассивДанныхДляЗаполнения Цикл
		
		Нанесение = Документы.НанесениеКодовМаркировкиСУЗИСМПТК.СоздатьДокумент();
		
		//Заполняем шапку документа
		ЗаполнитьЗначенияСвойств(Нанесение, СформированныеДанные.Реквизиты[0]);
		Нанесение.ТипИспользования = ПредопределенноеЗначение("Перечисление.ТипыИспользованияСУЗИСМПТК.НанесениеПодтверждено");
		Нанесение.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОтчетовСУЗИСМПТК.Черновик");
		
		//Заполняем табличную часть "Товары"
		Для Каждого СтрокаТЧ Из СформированныеДанные.Товары Цикл
			
			НоваяСтрокаТЧ = Нанесение.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
								
		КонецЦикла;
		
		Попытка 
			Нанесение.Дата = ТекущаяДатаСеанса();
			Нанесение.УстановитьВремя();
			Нанесение.УстановитьНовыйНомер();
			Нанесение.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ТекстСообщения = НСтр("ru = 'При записи документа ""%1"" произошла ошибка: %2'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Нанесение, ПодробноеПредставлениеОшибки);
			ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		СписокНанесенияКМ.Добавить(Нанесение.Ссылка);
		
	КонецЦикла;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",	 Новый Структура("Ссылка", Новый ФиксированныйМассив(СписокНанесенияКМ)));
	ПараметрыФормы.Вставить("Заголовок", "Сформированные Отчеты о нанесении кодов маркировки");
	
	Возврат ПараметрыФормы;
		
КонецФункции

Функция ПодготовитьДанныеДляЗаполненияГруппаНанесений(ЗаказКМ) Экспорт
	
	МассивДокументовЗаказКМ = Новый Массив();
	МассивДокументовЗаказКМ.Добавить(ЗаказКМ);
	
	ДанныеДляЗаполнения = Новый Массив();
	
	ТаблицыДанныхДляЗаполнения = ПодготовитьТаблицыДанныхДляЗаполненияГруппыНанесенийКМ(МассивДокументовЗаказКМ);
	
	//Реквизиты шапки исходного документа
	ТаблицаРеквизитов  = ТаблицыДанныхДляЗаполнения.ТаблицаРеквизитов;
	//Товары исходного документа, разбитые на таблица по товарным группам 
	ТаблицаТовары      = ТаблицыДанныхДляЗаполнения.ТаблицаТовары;
	//Структура реквизитов пустого документа
	СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаНанесениеКодов();
			
	Реквизиты = СтруктураДокумента.Реквизиты;
	Товары 	  = СтруктураДокумента.Товары;
	
	НоваяСтрокаРеквизитов = Реквизиты.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, ТаблицаРеквизитов);
	
	ПараметрыОтбора = Новый Структура("ЗаказКМ", ЗаказКМ);
	МассивСтрокТовары = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
	ПродолжитьРазбитиеДляНанесения(МассивСтрокТовары, Реквизиты, Товары, ДанныеДляЗаполнения);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьТаблицыДанныхДляЗаполненияГруппыНанесенийКМ(МассивДокументовЗаказКМ) Экспорт
	
	//БМ_ИСМПТ НА_РАЗВИТИЕ	Товарные группы
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка КАК Ссылка,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Организация КАК Организация,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ВидПродукции КАК ВидПродукции,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ИдентификаторПроизводственнойЛинии КАК ИдентификаторПроизводственнойЛинии
	|ИЗ
	|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК КАК ЗаказКодовМаркировкиСУЗИСМПТК
	|ГДЕ
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка В (&ЗаказНаЭмиссию)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулКодовМаркировкиСУЗИСМПТК.Номенклатура КАК Номенклатура,
	|	ПулКодовМаркировкиСУЗИСМПТК.Характеристика КАК Характеристика,
	|	ПулКодовМаркировкиСУЗИСМПТК.GTIN КАК GTIN,
	|	ПулКодовМаркировкиСУЗИСМПТК.КодМаркировки КАК КодИдентификации,
	|	ПулКодовМаркировкиСУЗИСМПТК.ПолныйКодМаркировки КАК КодМаркировки,
	|	ПулКодовМаркировкиСУЗИСМПТК.ЗаказНаЭмиссию КАК ЗаказКМ
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗИСМПТК КАК ПулКодовМаркировкиСУЗИСМПТК
	|ГДЕ
	|	ПулКодовМаркировкиСУЗИСМПТК.ЗаказНаЭмиссию В (&ЗаказНаЭмиссию)";
	
	Запрос.УстановитьПараметр("ЗаказНаЭмиссию", МассивДокументовЗаказКМ);
	
	ДатаДокумента = ТекущаяДатаСеанса();
	Ответственный = Пользователи.ТекущийПользователь();
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
		
	ТаблицаРеквизитовНанесения = Новый Структура();
	ВыборкаРеквизиты = РезультатЗапроса[0].Выбрать();
	Пока ВыборкаРеквизиты.Следующий() Цикл
		ТаблицаРеквизитовНанесения.Вставить("Организация",  ВыборкаРеквизиты.Организация);
		ТаблицаРеквизитовНанесения.Вставить("ВидПродукции", ВыборкаРеквизиты.ВидПродукции);
		ТаблицаРеквизитовНанесения.Вставить("ИдентификаторПроизводственнойЛинии", ВыборкаРеквизиты.ИдентификаторПроизводственнойЛинии);
		ТаблицаРеквизитовНанесения.Вставить("ДокументОснование", ВыборкаРеквизиты.Ссылка);
		ТаблицаРеквизитовНанесения.Вставить("Ответственный", Ответственный);
		ТаблицаРеквизитовНанесения.Вставить("Дата", 		 ДатаДокумента);
	КонецЦикла;
	
	ТаблицыДанныхДляЗаполненияГруппыДокументов = Новый Структура();
	ТаблицыДанныхДляЗаполненияГруппыДокументов.Вставить("ТаблицаРеквизитов", ТаблицаРеквизитовНанесения);
		
	МассивТовары = Новый Массив();
	ВыборкаТовары = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицыДанныхДляЗаполненияГруппыДокументов.Вставить("ТаблицаТовары", РезультатЗапроса[1].Выгрузить());
			
	Возврат ТаблицыДанныхДляЗаполненияГруппыДокументов;
	
КонецФункции

Процедура ПродолжитьРазбитиеДляНанесения(МассивСтрокТовары, Реквизиты, Товары, ДанныеДляЗаполнения)
	
	НомерСтроки = 0;
	НомерПакета = 1;
	ЕстьТовары	= Ложь;
	
	МаксНомерСтрокиТЧ = 30000; //ограничение по АПИ для Нанесения
	
	//Перебираем все строки в исходной ТЧ Товары
	Для Каждого СтрокаМассива Из МассивСтрокТовары Цикл
		
		НоваяСтрокаТЧ = Товары.Добавить();  //Формируем ТЧ для нового документа
		ЕстьТовары 	  = Истина;
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаМассива);
		НомерСтроки = НомерСтроки + 1;
	
		Если НомерСтроки >= МаксНомерСтрокиТЧ Тогда
			//Если товары еще не закончились, но их количество уже больше допустимого, формируем следующий пакет
			ЕстьТовары 	= Ложь;
			НомерСтроки = 0;
			НомерПакета = НомерПакета + 1;
			
			//Сохраняем заполненную таблицу данных
			СтруктураДляПередачи = Новый Структура;
			СтруктураДляПередачи.Вставить("Реквизиты", Реквизиты.Скопировать());
			СтруктураДляПередачи.Вставить("Товары",	   Товары.Скопировать());
			ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);
			
			Товары.Очистить();
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьТовары Тогда 
		СтруктураДляПередачи = Новый Структура;
		СтруктураДляПередачи.Вставить("Реквизиты", Реквизиты.Скопировать());
		СтруктураДляПередачи.Вставить("Товары",    Товары.Скопировать());
		ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьКоличествоСвязанныхНанесений(ЗаказКМ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НанесениеКодовМаркировкиСУЗИСМПТК.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.НанесениеКодовМаркировкиСУЗИСМПТК КАК НанесениеКодовМаркировкиСУЗИСМПТК
	|ГДЕ
	|	НанесениеКодовМаркировкиСУЗИСМПТК.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ЗаказКМ);
	Результат = Запрос.Выполнить().Выбрать();
	
	Возврат Результат.Количество() = 1;
		
КонецФункции

#КонецОбласти

#КонецОбласти