
#Область СлужебныйПрограммныйИнтерфейс_СУЗ

// Преобразовывает текстовое представление статуса кода маркировки МОТП в значение перечисления.
//
// Параметры:
//  ЗначениеПоиска - Строка - значение для перекодировки
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыКодовМаркировкиСУЗ - статус кода маркировки.
//
Функция СтатусБизнесЗаказа(Знач ЗначениеПоиска) Экспорт
	
	ЗначениеПоиска = ВРег(ЗначениеПоиска);
	
	Если ЗначениеПоиска = "CREATED" Тогда
		Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Создан;
	ИначеЕсли ЗначениеПоиска = "PENDING" Тогда
		Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.ПринятКОбработке;
	ИначеЕсли ЗначениеПоиска = "APPROVED" Тогда
		Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.ПодтвержденИСМП;
	ИначеЕсли ЗначениеПоиска = "READY" Тогда
		Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.КодыМаркировкиЭмитированы;
	ИначеЕсли ЗначениеПоиска = "CLOSED" Тогда
		Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Выполнен;
	ИначеЕсли ЗначениеПоиска = "DECLINED" Тогда
		Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.НеПодтвержденИСМП;
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный статус отчета СУЗ: %1';
				 |en = 'Неизвестный статус отчета СУЗ: %1'"),
			ЗначениеПоиска);
	
КонецФункции

// Преобразовывает текстовое представление статуса кода маркировки МОТП в значение перечисления.
//
// Параметры:
//  ЗначениеПоиска - Строка - значение для перекодировки
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыКодовМаркировкиСУЗ - статус кода маркировки.
//
Функция СтатусОбработкиОтчета(Знач ЗначениеПоиска) Экспорт
	
	ЗначениеПоиска = ВРег(ЗначениеПоиска);
	
	Если ЗначениеПоиска = "PENDING" Тогда
		Возврат Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.ВОжидании;
	ИначеЕсли ЗначениеПоиска = "READY_TO_SEND" Тогда
		Возврат Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.ГотовКОтправке;
	ИначеЕсли ЗначениеПоиска = "REJECTED" Тогда
		Возврат Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.Отклонен;
	ИначеЕсли ЗначениеПоиска = "SENT" Тогда
		Возврат Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.Отправлен;
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный статус отчета СУЗ: %1';
				|en = 'Неизвестный статус отчета СУЗ: %1'"),
			ЗначениеПоиска);
	
КонецФункции

// Перекодирует способ выпуска товаров в для обмена с СУЗ ИС МП.
//
// Параметры:
//  ЗначениеПоиска - Строка, ПеречислениеСсылка.СпособыВводаВОборотСУЗИСМПТК - значение для перекодировки.
// 
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.СпособыВводаВОборотСУЗИСМПТК - Результат перекодирования.
//
Функция СпособВыпускаВОборот_СУЗ(Знач ЗначениеПоиска, Назначение = "СУЗ") Экспорт
	
	Если ЗначениеПоиска = "PRODUCTION" Или ЗначениеПоиска = "LOCAL" Или ЗначениеПоиска = "PRODUCED_IN_RF" Тогда
		Результат = Перечисления.СпособыВводаВОборотСУЗИСМПТК.Производство;
	ИначеЕсли ЗначениеПоиска = "IMPORT" Или ЗначениеПоиска = "FOREIGN" Или ЗначениеПоиска = "IMPORTED_INTO_RF" Тогда
		Результат = Перечисления.СпособыВводаВОборотСУЗИСМПТК.Импорт;
	ИначеЕсли ЗначениеПоиска = "REMAINS" Тогда
		Результат = Перечисления.СпособыВводаВОборотСУЗИСМПТК.МаркировкаОстатков;
	ИначеЕсли ЗначениеПоиска = "COMMISSION" Тогда
		Результат = Перечисления.СпособыВводаВОборотСУЗИСМПТК.ПринятНаКомиссию;
	ИначеЕсли ЗначениеПоиска = "REMARK" Тогда
		Результат = Перечисления.СпособыВводаВОборотСУЗИСМПТК.Перемаркировка;
		
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗИСМПТК.Производство И Назначение = "СУЗ" Тогда
		Результат = "PRODUCTION";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗИСМПТК.Импорт И Назначение = "СУЗ" Тогда
		Результат = "IMPORT";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗИСМПТК.МаркировкаОстатков И Назначение = "СУЗ" Тогда
		Результат = "REMAINS";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗИСМПТК.ПринятНаКомиссию И Назначение = "СУЗ" Тогда
		Результат = "COMMISSION";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗИСМПТК.Перемаркировка И Назначение = "СУЗ" Тогда
		Результат = "REMARK";
		
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗИСМПТК.Производство И Назначение = "ИСМП" Тогда
		Результат = "LOCAL";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗИСМПТК.Импорт И Назначение = "ИСМП" Тогда
		Результат = "FOREIGN";
		
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗИСМПТК.Производство И Назначение = "ОСТАТКИ" Тогда
		Результат = "PRODUCED_IN_RF";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗИСМПТК.Импорт И Назначение = "ОСТАТКИ" Тогда
		Результат = "IMPORTED_INTO_RF";
	
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗИСМПТК.МаркировкаОстатков Тогда
		Результат = "REMAINS";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗИСМПТК.ПринятНаКомиссию Тогда
		Результат = "COMMISSION";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗИСМПТК.Перемаркировка Тогда
		Результат = "REMARK";
		
	Иначе
		ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный способ выпуска в оборот: %1';
				|en = 'Неизвестный способ выпуска в оборот: %1'"),
			ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТипыАгрегации_СУЗ(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = Перечисления.ТипыАгрегацииИСМПТК.НоваяАгрегация Тогда
		Результат = "AGGREGATION";
	ИначеЕсли ЗначениеПоиска = Перечисления.ТипыАгрегацииИСМПТК.ОбновлениеСуществующейАгрегации Тогда
		Результат = "UPDATE";
	Иначе
		ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный способ агрегации: %1';
				|en = 'Неизвестный способ агрегации: %1'"),
			ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВидДокументаСертификации(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = "CONFORMITY_DECLARATION" Тогда
		Результат = Перечисления.ВидыДокументовОбязательнойСертификацииИСМПТК.ДекларацияСоответствия;
	ИначеЕсли ЗначениеПоиска = "CONFORMITY_CERTIFICATE" Тогда
		Результат = Перечисления.ВидыДокументовОбязательнойСертификацииИСМПТК.СертификатСоответствия;
	
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыДокументовОбязательнойСертификацииИСМПТК.ДекларацияСоответствия Тогда
		Результат = "CONFORMITY_DECLARATION";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыДокументовОбязательнойСертификацииИСМПТК.СертификатСоответствия Тогда
		Результат = "CONFORMITY_CERTIFICATE";
	Иначе
		ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный вид документа сертификации: %1';
				|en = 'Неизвестный вид документа сертификации: %1'"),
			ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перекодирует шаблон кода маркировки для обмена с СУЗ ИС МП.
//
// Параметры:
//  ЗначениеПоиска - Строка, ПеречислениеСсылка.ШаблоныКодовМаркировкиСУЗИСМПТК - значение для перекодировки.
// 
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.ШаблоныКодовМаркировкиСУЗИСМПТК - Результат перекодирования.
//
Функция ШаблонКодаМаркировки(Знач ЗначениеПоиска) Экспорт
	
	// Значение параметра templateId
	Если ЗначениеПоиска = 1 Тогда
		Результат = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь;
	ИначеЕсли ЗначениеПоиска = 20 Тогда
		Результат = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция;
	ИначеЕсли ЗначениеПоиска = 10 Тогда
		Результат = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность;
	ИначеЕсли ЗначениеПоиска = 16 Тогда
		Результат = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.УпакованнаяВодаИНапитки;
	ИначеЕсли ЗначениеПоиска = 5 Тогда
		Результат = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты;
	ИначеЕсли ЗначениеПоиска = 3 Тогда
		Результат = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек;
	ИначеЕсли ЗначениеПоиска = 4 Тогда
		Результат = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка;
			
	ИначеЕсли ЗначениеПоиска = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь Тогда
		Результат =  1;
	ИначеЕсли ЗначениеПоиска = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция Тогда
		Результат =  20;
	ИначеЕсли ЗначениеПоиска = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.УпакованнаяВодаИНапитки Тогда
		Результат =  16;
	ИначеЕсли ЗначениеПоиска = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность Тогда
		Результат =  10;
	ИначеЕсли ЗначениеПоиска = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты Тогда
		Результат =  5;
	ИначеЕсли ЗначениеПоиска = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка Тогда
		Результат =  4;
	ИначеЕсли ЗначениеПоиска = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек Тогда
		Результат =  3;
		
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный шаблон кода маркировки: %1';
					 |en = 'Неизвестный шаблон кода маркировки: %1'"),
				ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перекодирует способ формирования серийного номера кода маркировки для обмена с СУЗ ИС МП.
//
// Параметры:
//  ЗначениеПоиска - Строка, ПеречислениеСсылка.СпособыФормированияСерийногоНомераСУЗИСМПТК - значение для перекодировки.
// 
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.СпособыФормированияСерийногоНомераСУЗИСМПТК - Результат перекодирования.
//
Функция СпособФормированияСерийногоНомера(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = "SELF_MADE" Тогда
		Результат = Перечисления.СпособыФормированияСерийногоНомераСУЗИСМПТК.Самостоятельно;
	ИначеЕсли ЗначениеПоиска = "OPERATOR" Тогда
		Результат = Перечисления.СпособыФормированияСерийногоНомераСУЗИСМПТК.Автоматически;
	
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыФормированияСерийногоНомераСУЗИСМПТК.Самостоятельно Тогда
		Результат =  "SELF_MADE";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыФормированияСерийногоНомераСУЗИСМПТК.Автоматически Тогда
		Результат =  "OPERATOR";
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный способ формирования серийного номера: %1';
					|en = 'Неизвестный способ формирования серийного номера: %1'"),
				ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры для настройки обмена с СУЗ
//
// Возвращаемое значение:
// 	Структура - Параметры для настройки обмена с СУЗ:
// * Таймаут - Число - Таймаут
// * Порт - Число - Порт
// * Адрес - Строка - Адрес
// * Идентификатор - Строка - Адрес
// * Токен - Строка - Адрес
// * ФорматОбмена - ПеречислениеСсылка.ВерсииФорматаОбменаСУЗ - Формат обмена с СУЗ
Функция НоваяНастройкаОбменаСУЗ() Экспорт

	АдресСУЗКонстанта = ИнтеграцияИСМПТК.ПолучитьАдресаСерверовИСМПТ().АдресСУЗ;
	АдресСУЗ = ИнтеграцияИСМПТК.ОбработатьАдресИСМПТКонстанта(АдресСУЗКонстанта);
			
	НастройкиОбмена = Новый Структура;
	НастройкиОбмена.Вставить("Сервер",                           АдресСУЗ);
	НастройкиОбмена.Вставить("Порт",                             443);
	НастройкиОбмена.Вставить("Таймаут",                          60);
	НастройкиОбмена.Вставить("СтанцияУправленияЗаказами",        Справочники.СтанцииУправленияЗаказамиИСМПТК.ПустаяСсылка());
	НастройкиОбмена.Вставить("Идентификатор",                    "");
	НастройкиОбмена.Вставить("Токен",                            "");
	НастройкиОбмена.Вставить("ИмяПользователя",                  "");
	НастройкиОбмена.Вставить("ИспользоватьЗащищенноеСоединение", Ложь);
	НастройкиОбмена.Вставить("Организация",						 Неопределено);
	НастройкиОбмена.Вставить("ПредставлениеСервиса",             НСтр("ru = 'СУЗ';
																      |en = 'СУЗ'"));
	
	Возврат НастройкиОбмена;
	
КонецФункции

#КонецОбласти

#Область Интерфейс_РаботаСКодамиМаркировки

#Область ЗапросСоставаУпаковок

Функция ЗапроситьДанныеОбАгрегацииКМ(СтруктураКодов, Организация, ТокенАвторизации, ВыводитьСообщениеПриЗапросе = Истина) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ЗапроситьДанныеОбАгрегацииКМ(СтруктураКодов, Организация, ТокенАвторизации, ВыводитьСообщениеПриЗапросе);
	
КонецФункции

Функция ЗапроситьДанныеОбАгрегацииСпискаКМ(СтруктураКодов, Организация, ТокенАвторизации) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ЗапроситьДанныеОбАгрегацииСпискаКМ(СтруктураКодов, Организация, ТокенАвторизации);
	
КонецФункции

Функция ЗапроситьИтогиПоАгрегированнымКМ(КодыМаркировки, Организация, ТокенАвторизации) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ЗапроситьИтогиПоАгрегированнымКМ(КодыМаркировки, Организация, ТокенАвторизации);
	
КонецФункции

#КонецОбласти

#Область ПроверкаСостоянияКодаНаСервере

Функция ЗапроситьДанныеОСостоянииКМ(СтруктураКодов, Организация, ТокенАвторизации) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ЗапроситьДанныеКМ(СтруктураКодов, Организация, ТокенАвторизации);
	
КонецФункции

Функция ЗапроситьДанныеИсторииКМ(СтруктураКодов, Организация, ТокенАвторизации) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ЗапроситьИсториюКМ(СтруктураКодов, Организация, ТокенАвторизации);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РаботаСДокументами_СУЗ

Функция НастройкиОбменаСУЗ(Организация = Неопределено) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().НастройкиОбменаСУЗ(Организация);
	
КонецФункции

Функция ЗаявкаНаЭмиссиюКодовМаркировкиJSON(ДокументСсылка, НастройкаОбменаСУЗ) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ЗаявкаНаЭмиссиюКодовМаркировкиJSON(ДокументСсылка, НастройкаОбменаСУЗ);
	
КонецФункции

Функция ПолучитьСтатусЗаказаЭмиссииКМ(НастройкаОбменаСУЗ, ВидПродукции) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ПолучитьСтатусЗаказаЭмиссииКМ(НастройкаОбменаСУЗ, ВидПродукции);
	
КонецФункции

Функция ПолучитьПричинуОтказаЗаказаЭмиссииКМ(НастройкаОбменаСУЗ, ВидПродукции, СтруктураЗаказа) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ПолучитьПричинуОтказаЗаказаЭмиссииКМ(НастройкаОбменаСУЗ, ВидПродукции, СтруктураЗаказа);
	
КонецФункции

Функция ПолучитьКМПоЗаказуНаЭмиссию(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторДокумента, GTIN, Количество, ИдентификаторПоследнегоБлока = "") Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ПолучитьКМПоЗаказуНаЭмиссию(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторДокумента, GTIN, Количество, ИдентификаторПоследнегоБлока);
	
КонецФункции

Функция ПолучитьСтатусGTINПоЗаказуНаЭмиссию(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторДокумента, GTIN) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ПолучитьСтатусGTINПоЗаказуНаЭмиссию(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторДокумента, GTIN);
	
КонецФункции

Функция ПовторноПолучитьКМПоЗаказуНаЭмиссию(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторДокумента, GTIN, ИдентификаторБлокаКодов, Количество) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ПовторноПолучитьКМПоЗаказуНаЭмиссию(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторДокумента, GTIN, ИдентификаторБлокаКодов, Количество);
	
КонецФункции

Функция ЗакрытьПодзаказПоGTIN(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторДокумента, GTIN, ИдентификаторБлокаКодов) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ЗакрытьПодзаказПоGTIN(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторДокумента, GTIN, ИдентификаторБлокаКодов);
	
КонецФункции

Функция АгрегацияКодовМаркировкиJSON(ДокументСсылка, НастройкаОбменаСУЗ) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().АгрегацияКодовМаркировкиJSON(ДокументСсылка, НастройкаОбменаСУЗ);
	
КонецФункции

Функция ПолучитьСтатусАгрегацииКМ(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторОтчета) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ПолучитьСтатусАгрегацииКМ(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторОтчета);
	
КонецФункции

Функция ПолучитьСтатусНанесенияКМ(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторОтчета) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ПолучитьСтатусНанесенияКМ(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторОтчета);
	
КонецФункции

Функция НанесениеКодовМаркировкиJSON(ДокументСсылка, НастройкаОбменаСУЗ) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().НанесениеКодовМаркировкиJSON(ДокументСсылка, НастройкаОбменаСУЗ);
	
КонецФункции

#КонецОбласти

#Область РаботаСДокументами_ИСМПТ

// Создает коллекцию XML строк актов и коллекцию XML строк SignedContent на основе документов Акт приема-передачи.
//
// Параметры:
Процедура СоздатьИсходящиеАкты(Знач МассивДокументов, Знач УстанавливатьПодпись, Знач ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML) Экспорт
	
	ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().СоздатьИсходящиеАкты(МассивДокументов, УстанавливатьПодпись, ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML);
	
КонецПроцедуры

Процедура СоздатьИсходящиеУведомленияОВводеВОборот(Знач МассивДокументов, Знач УстанавливатьПодпись, Знач ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML) Экспорт
	
	ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().СоздатьИсходящиеУведомленияОВводеВОборот(МассивДокументов, УстанавливатьПодпись, ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML);
	
КонецПроцедуры

Процедура СоздатьИсходящиеУведомленияОВыводеИзОборота(Знач МассивДокументов, Знач УстанавливатьПодпись, Знач ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML) Экспорт
	
	ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().СоздатьИсходящиеУведомленияОВыводеИзОборота(МассивДокументов, УстанавливатьПодпись, ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML);
	
КонецПроцедуры

Процедура СоздатьИсходящиеУведомленияОВвозе(Знач МассивДокументов, Знач УстанавливатьПодпись, Знач ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML) Экспорт
	
	ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().СоздатьИсходящиеУведомленияОВвозе(МассивДокументов, УстанавливатьПодпись, ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML);
	
КонецПроцедуры

Процедура СоздатьИсходящиеУведомленияОВвозеИзТретьихСтран(Знач МассивДокументов, Знач УстанавливатьПодпись, Знач ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML, ДанныеГрупповыхКодов) Экспорт
	
	ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().СоздатьИсходящиеУведомленияОВвозеИзТретьихСтран(МассивДокументов, УстанавливатьПодпись, ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML, ДанныеГрупповыхКодов);
	
КонецПроцедуры

Процедура СоздатьИсходящиеУведомленияОбЭкспортеЕАЭС(Знач МассивДокументов, Знач УстанавливатьПодпись, Знач ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML) Экспорт
	
	ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().СоздатьИсходящиеУведомленияОбЭкспортеЕАЭС(МассивДокументов, УстанавливатьПодпись, ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML);
	
КонецПроцедуры 

Процедура СоздатьИсходящиеУведомлениеОПриемкеЕАЭС(Знач МассивДокументов, Знач УстанавливатьПодпись, Знач ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML) Экспорт
	
	ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().СоздатьИсходящиеУведомленияОПриемкеТоваровЕАЭС(МассивДокументов, УстанавливатьПодпись, ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML);
	
КонецПроцедуры

Функция ОтправитьИсходящиеАкты(Знач КоллекцияПодписей, Знач ТокенАвторизации) Экспорт
		
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ОтправитьАктыПП(КоллекцияПодписей, ТокенАвторизации);
	
КонецФункции

Процедура ОбновитьДокументыИзИСМПТ(Знач Параметры, Знач ДанныеПрофилей, СписокТокеновАвторизации) Экспорт
		
	ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ОбновитьДокументыИСМПТ(Параметры, ДанныеПрофилей, СписокТокеновАвторизации);
	
КонецПроцедуры

Функция ПолучитьНовыеДокументыИСМПТ(Параметры, ДополнительныеПараметры) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ПолучитьДокументыИСМПТ(Параметры, ДополнительныеПараметры);
	
КонецФункции

Функция ПодтвердитьВходящиеАкты_СозданиеТитулов(Знач КоллекцияСгруппированныхДокументовИСМПТ, Знач СписокТокеновАвторизации) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ПодтвердитьАктыПП_СозданиеТитулов(КоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
	
КонецФункции

Функция ПодтвердитьВходящиеАкты_ПодписьТитуловЗавершение(Знач КоллекцияСгруппированныхДокументовИСМПТ, Знач СписокТокеновАвторизации) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ПодтвердитьАктыПП_ПодписьТитуловЗавершение(КоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
	
КонецФункции

Функция ОтклонитьВходящиеАкты_СозданиеТитулов(Знач ТипДокумента, Знач КоллекцияСгруппированныхДокументовИСМПТ, Знач СписокТокеновАвторизации) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ОтклонитьВходящиеДокументыИСМПТ_СозданиеТитулов(ТипДокумента, КоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
	
КонецФункции

Функция ОтклонитьВходящиеАкты_ПодписьТитуловЗавершение(Знач ТипДокументаИСМПТ, Знач НоваяКоллекцияСгруппированныхДокументовИСМПТ, Знач СписокТокеновАвторизации) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ОтклонитьВходящиеДокументыИСМПТ_ПодписьТитуловЗавершение(ТипДокументаИСМПТ, НоваяКоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
	
КонецФункции

Функция ОтозватьИсходящиеДокументы_СозданиеТитулов(Знач ТипДокумента, Знач КоллекцияСгруппированныхДокументовИСМПТ, Знач СписокТокеновАвторизации) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ОтозватьДокументы_СозданиеТитулов(ТипДокумента, КоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
	//Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ОтозватьАктыПП_СозданиеТитулов(КоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
	
КонецФункции

Функция ОтозватьИсходящиеДокументы_ПодписьТитуловЗавершение(Знач НоваяКоллекцияСгруппированныхДокументовИСМПТ, Знач СписокТокеновАвторизации) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ОтозватьДокументы_ПодписьТитуловЗавершение(НоваяКоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
	//Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ОтозватьАктыПП_ПодписьТитуловЗавершение(НоваяКоллекцияСгруппированныхДокументовИСМПТ, СписокТокеновАвторизации);
	
КонецФункции

// Создает коллекцию XML строк актов и коллекцию XML строк SignedContent на основе документов Акт приема-передачи.
//
// Параметры:
Процедура СоздатьИсходящиеУведомления(Знач МассивДокументов, Знач УстанавливатьПодпись, Знач ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML) Экспорт
	
	ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().СоздатьИсходящиеУведомления(МассивДокументов, УстанавливатьПодпись, ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML);
	
КонецПроцедуры

Функция ОтправитьИсходящиеУведомления(Знач КоллекцияДанныеКоллекцииАктовXML, Знач КоллекцияПодписей, Знач ТокенАвторизации) Экспорт
		
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ОтправитьУведомленияОРасхождении(КоллекцияДанныеКоллекцииАктовXML, КоллекцияПодписей, ТокенАвторизации);
	
КонецФункции

Функция ОтправитьИсходящиеУведомленияВВО(Знач КоллекцияДанныеКоллекцииАктовXML, Знач КоллекцияПодписей, Знач ТокенАвторизации) Экспорт
		
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ОтправитьУведомленияОВВО(КоллекцияДанныеКоллекцииАктовXML, КоллекцияПодписей, ТокенАвторизации);
	
КонецФункции

Функция ОтправитьИсходящиеУведомленияВИО(Знач КоллекцияДанныеКоллекцииАктовXML, Знач КоллекцияПодписей, Знач ТокенАвторизации) Экспорт
		
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ОтправитьУведомленияОВИО(КоллекцияДанныеКоллекцииАктовXML, КоллекцияПодписей, ТокенАвторизации);
	
КонецФункции

Функция ОтправитьУведомленияОВвозе(Знач КоллекцияДанныеКоллекцииАктовXML, Знач КоллекцияПодписей, Знач ТокенАвторизации) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ОтправитьУведомленияОВвозе(КоллекцияДанныеКоллекцииАктовXML, КоллекцияПодписей, ТокенАвторизации);
	
КонецФункции

Функция ОтправитьУведомленияОВвозеИзТретьихСтран(Знач КоллекцияДанныеКоллекцииАктовXML, Знач КоллекцияПодписей, Знач ТокенАвторизации) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ОтправитьУведомленияОВвозеИзТретьихСтран(КоллекцияДанныеКоллекцииАктовXML, КоллекцияПодписей, ТокенАвторизации);
	
КонецФункции

Функция ОтправитьУведомленияОбЭкспортеЕАЭС(Знач КоллекцияДанныеКоллекцииАктовXML, Знач КоллекцияПодписей, Знач ТокенАвторизации) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ОтправитьУведомленияОбЭкспортеЕАЭС(КоллекцияДанныеКоллекцииАктовXML, КоллекцияПодписей, ТокенАвторизации);
	
КонецФункции

Функция ОтправитьОтправитьУведомлениеОПриемкеЕАЭС(Знач КоллекцияДанныеКоллекцииАктовXML, Знач КоллекцияПодписей, Знач ТокенАвторизации) Экспорт
	
	Возврат ИнтеграцияИСМПТКПовтИсп.ОбработкаОбменИСМПТ().ОтправитьУведомленияОПриемкеТоваровЕАЭС(КоллекцияДанныеКоллекцииАктовXML, КоллекцияПодписей, ТокенАвторизации);
	
КонецФункции 


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Сформировать текст ошибки по результату отправки запроса.
//
// Параметры:
//  Заголовок - Строка - Заголовок ошибки, например: Параметры авторизации не получены из ИС МОТП.
//  РезультатОтправкиЗапроса - Структура - Результат отправки HTTP-запроса:
//  * ЗапросОтправлен             - Булево - признак того, что сообщение отправлено.
//  * ОтветПолучен                - Булево - признак того, что сообщение получено.
//  * КодСостояния                - Число  - Код состояния HTTP-запроса.
//  * ТекстОшибки                 - Строка - текст ошибки, если таковая возникла.
//  * ТекстВходящегоСообщенияJSON - Строка - текст ответа, на отправленное сообщение.
// Возвращаемое значение:
//  Строка - Текст ошибки.
Функция ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса) Экспорт
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда

		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При выполнении запроса %1 возникла ошибка.
				     |Код состояния HTTP: %2.
				     |Текст ошибки: %3.';
				     |en = 'При выполнении запроса %1 возникла ошибка.
				     |Код состояния HTTP: %2.
				     |Текст ошибки: %3.'"),
			URLЗапроса,
			РезультатОтправкиЗапроса.КодСостояния,
			РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);

	Иначе
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При отправке запроса %1 возникла ошибка.
				     |Текст ошибки: %2.';
				     |en = 'При отправке запроса %1 возникла ошибка.
				     |Текст ошибки: %2.'"),
			URLЗапроса,
			РезультатОтправкиЗапроса.ТекстОшибки);

	КонецЕсли;
	
	Возврат ТекстОшибки;

КонецФункции

// Формирует и устанавливает текст заголовка формы документа
//
// Параметры:
//  СтрокаВидаОперации - строка вида операции документа, 
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура УстановитьЗаголовокФормыДокумента(СтрокаВидаОперации = "", ДокументСсылка, ФормаДокумента) Экспорт

	ФормаДокумента.АвтоЗаголовок = Ложь; // заголовок будем писать сами
	
	Если ПустаяСтрока(СтрокаВидаОперации) Тогда
		Заголовок = ДокументСсылка.Метаданные().Синоним + ": ";
	Иначе
		Заголовок = ДокументСсылка.Метаданные().Синоним + ": " + СтрокаВидаОперации;
	КонецЕсли;
		
	Если ДокументСсылка.Пустая() Тогда  
		Шаблон = НСтр("ru='%1 (создание)'");
	Иначе
		Заголовок = ?(ПустаяСтрока(СтрокаВидаОперации), Заголовок, Заголовок + ". ");
		Шаблон = НСтр("ru='%1 %2 от %3'");
	КонецЕсли;
	
	ФормаДокумента.Заголовок = ИнтеграцияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Шаблон, Заголовок, ДокументСсылка.Номер, ДокументСсылка.Дата);
	
КонецПроцедуры

Функция ПроверитьДоступностьСУЗ_V2(ВидПродукции, ПараметрыСУЗ) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса", Неопределено);
	ВозвращаемоеЗначение.Вставить("Доступен",                 Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",              "");

	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/x-www-form-urlencoded;charset=UTF-8");
	ЗаголовокHTTP.Вставить("Accept",         "application/json");
	ЗаголовокHTTP.Вставить("clientToken",    ПараметрыСУЗ.Токен);
	
	ЗаголовокHTTP.Вставить("omsId",    ПараметрыСУЗ.Идентификатор);
	
	URLЗапроса = СтрШаблон(   
		URLЗапроса_V2("api/v2/extension/ping?omsId=%1", ВидПродукции),
		ПараметрыСУЗ.Идентификатор);
	РезультатЗапроса = ИнтеграцияИСМПТК.ПолучитьДанныеИзСервиса(URLЗапроса, Неопределено, ПараметрыСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсИСМПТК.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			// Структура - Ожидаемое результат запроса:
			//  * omsId - GUID - Идентификатор СУЗ
			ДанныеОбработки = ИнтерфейсИСМПТК.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.Доступен = Истина;
				
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсИСМПТК.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция URLЗапроса_V2(URLЗапроса, ВидПродукцииИС)
	
	Если ВидПродукцииИС = Перечисления.ВидыПродукцииИСМПТК.Табачная Тогда
		ВидПродукции = "tobacco";
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИСМПТК.Обувная Тогда
		ВидПродукции = "shoes";
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИСМПТК.МолочнаяПродукция Тогда
		ВидПродукции = "milk";
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты Тогда
		ВидПродукции = "pharma";
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИСМПТК.ЛегкаяПромышленность Тогда
		ВидПродукции = "lp";
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИСМПТК.БезалкогольныеНапитки Тогда
		ВидПродукции = "water";
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный вид продукции: %1';
				|en = 'Неизвестный вид продукции: %1'"),
			ВидПродукцииИС);
	КонецЕсли;
	
	Возврат СтрЗаменить(URLЗапроса, "extension", ВидПродукции);
	
КонецФункции

#Область JSON

// Получить из текста JSON структуру.
// 
// Параметры:
// 	ТекстJSON                    - Строка - Текст JSON.
// 	ПреобразовыватьВСоответствие - Булево - Признак преобразования в соответствие.
// Возвращаемое значение:
// 	Структура, Неопределено - Результат преобразования JSON.
Функция ТекстJSONВОбъект(ТекстJSON, ПреобразовыватьВСоответствие = Ложь) Экспорт
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ТекстJSON);
	
	Попытка
		РезультатРазбора = ПрочитатьJSON(Чтение, ПреобразовыватьВСоответствие);
	Исключение
		РезультатРазбора = Неопределено;
	КонецПопытки;
	
	Возврат РезультатРазбора;
	
КонецФункции

// Формирует из структуры текст JSON
// 
// Параметры:
// 	Структура - Структура - Произвольная структура данных
// Возвращаемое значение:
// 	Строка - Текст JSON
Функция ОбъектВТекстJSON(Структура, УдалитьПробелыИПереносыСтрок = Ложь) Экспорт
	
	Если УдалитьПробелыИПереносыСтрок Тогда
		ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, "");
	Иначе
		ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, "  ");
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	ЗаписатьJSON(ЗаписьJSON, Структура);
	
	ТекстJSON = ЗаписьJSON.Закрыть();
	
	Возврат ТекстJSON;
	
КонецФункции

#КонецОбласти

#Область HTTPЗапросы

// Структура результата HTTP запроса
// 
// Параметры:
// Возвращаемое значение:
// 	Структура - Результат HTTP-запроса:
// * КодСостояния - Число        - Код состояния HTTP
// * Заголовки    - Соответствие - Заголовки HTTP ответа
// * ТекстОтвета  - Строка       - Текст ответа
// * ТекстОшибки  - Строка       - Текст ошибки
Функция РезультатHTTPЗапроса() Экспорт
	
	РезультатHTTPЗапроса = Новый Структура;
	РезультатHTTPЗапроса.Вставить("КодСостояния");
	РезультатHTTPЗапроса.Вставить("Заголовки");
	РезультатHTTPЗапроса.Вставить("ТекстОтвета");
	РезультатHTTPЗапроса.Вставить("ТекстОшибки");
	
	Возврат РезультатHTTPЗапроса;
	
КонецФункции

// Инициализирует структуру результата обработки HTTP-запроса после получения ответа.
// 
// Параметры:
// 	ТекстВходящегоСообщенияJSON - Строка - Текст входящего сообщения.
// 	КодСостояния                - Число  - Код состояния.
// 
// Возвращаемое значение:
// Структура - Структура со свойствами:
//   ЗапросОтправлен             - Булево - признак того, что сообщение отправлено.
//   ОтветПолучен                - Булево - признак того, что сообщение обработано сервером.
//   КодСостояния                - Число  - Код состояния HTTP-запроса.
//   ТекстОшибки                 - Строка - текст ошибки, если таковая возникла.
//   ТекстВходящегоСообщенияJSON - Строка - текст ответа, на отправленное сообщение.
//
Функция HTTPОтветПолучен(ТекстВходящегоСообщенияJSON, КодСостояния = 200, КакФайл = Ложь, ДополнительныеПараметры = Неопределено)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	ВозвращаемоеЗначение.Вставить("ЗапросОтправлен",         Истина);
	ВозвращаемоеЗначение.Вставить("ОтветПолучен",            Истина);
	
	ВозвращаемоеЗначение.Вставить("КодСостояния", КодСостояния);
	ВозвращаемоеЗначение.Вставить("Объект",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",  "");
	
	Если КакФайл Тогда
		ВозвращаемоеЗначение.Вставить("ИмяФайла", ТекстВходящегоСообщенияJSON);
	Иначе
		Попытка
			ВозвращаемоеЗначение.Объект = ТекстJSONВОбъект(ТекстВходящегоСообщенияJSON, Ложь);
		Исключение
			ВозвращаемоеЗначение.Объект = ТекстJSONВОбъект(ТекстВходящегоСообщенияJSON, Истина);
		КонецПопытки;
		Если ВозвращаемоеЗначение.Объект <> Неопределено Тогда
			ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщенияJSON", ОбъектВТекстJSON(ВозвращаемоеЗначение.Объект));
		Иначе
			ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщенияJSON", ТекстВходящегоСообщенияJSON);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Инициализирует структуру результата обработки HTTP-запроса после отправки сообщения, но до получения ответа.
// 
// Возвращаемое значение:
// Структура:
//   ЗапросОтправлен             - Булево - признак того, что сообщение отправлено.
//   ОтветПолучен                - Булево - признак того, что сообщение получено.
//   КодСостояния                - Число  - Код состояния HTTP-запроса.
//   ТекстОшибки                 - Строка - текст ошибки, если таковая возникла.
//   ТекстВходящегоСообщенияJSON - Строка - текст ответа, на отправленное сообщение.
//
Функция HTTPОтветНеПолучен(Ошибка, ЗапросОтправлен, КодСостояния = Неопределено, КакФайл = Ложь, ДополнительныеПараметры = Неопределено)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	ВозвращаемоеЗначение.Вставить("ЗапросОтправлен",         ЗапросОтправлен);
	ВозвращаемоеЗначение.Вставить("ОтветПолучен",            Ложь);
	
	ВозвращаемоеЗначение.Вставить("КодСостояния", КодСостояния);
	ВозвращаемоеЗначение.Вставить("Объект",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",  Строка(Ошибка));
	
	Если КакФайл Тогда
		ВозвращаемоеЗначение.Вставить("ИмяФайла", "");
	Иначе
		ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщенияJSON", "");
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обработать результат отправки HTTP-запроса к сервису ИС МОТП.
// 
// Параметры:
//  РезультатЗапроса - (См. РезультатЗапроса) - Результат запроса.
// Возвращаемое значение:
// Структура - Результат отправки HTTP-запроса:
//  * ЗапросОтправлен             - Булево - признак того, что сообщение отправлено.
//  * ОтветПолучен                - Булево - признак того, что сообщение получено.
//  * КодСостояния                - Число  - Код состояния HTTP-запроса.
//  * ТекстОшибки                 - Строка - текст ошибки, если таковая возникла.
//  * ТекстВходящегоСообщенияJSON - Строка - текст ответа, на отправленное сообщение.
Функция ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	РезультатОтправкиHTTPЗапроса = ИнтерфейсИСМПТК.РезультатHTTPЗапроса();
	РезультатОтправкиHTTPЗапроса.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
	Если РезультатЗапроса.HTTPОтвет <> Неопределено Тогда
		РезультатОтправкиHTTPЗапроса.КодСостояния = РезультатЗапроса.HTTPОтвет.КодСостояния;
		РезультатОтправкиHTTPЗапроса.Заголовки    = РезультатЗапроса.HTTPОтвет.Заголовки;
		РезультатОтправкиHTTPЗапроса.ТекстОтвета  = РезультатЗапроса.HTTPОтвет.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	КодСостояния = РезультатОтправкиHTTPЗапроса.КодСостояния;
	ТекстОтвета  = РезультатОтправкиHTTPЗапроса.ТекстОтвета;
	
	Если ЗначениеЗаполнено(ТекстОтвета) Тогда
		
		ВозвращаемоеЗначение = HTTPОтветПолучен(ТекстОтвета, КодСостояния, Ложь, РезультатЗапроса);
		
	Иначе
		
		Если Не ЗначениеЗаполнено(КодСостояния) Тогда
			ТекстСообщенияXMLОтправлен = Ложь;
			ЗаголовокОшибки = НСтр("ru = 'HTTP-запрос не отправлен.';
								   |en = 'HTTP-запрос не отправлен.'");
		Иначе
			ТекстСообщенияXMLОтправлен = Истина;
			ЗаголовокОшибки = СтрШаблон(НСтр("ru = 'Код состояния HTTP: %1.';
											 |en = 'Код состояния HTTP: %1.'"), КодСостояния);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатОтправкиHTTPЗапроса.ТекстОшибки) Тогда
			ТекстОшибки = ЗаголовокОшибки + Символы.ПС + РезультатОтправкиHTTPЗапроса.ТекстОшибки;
		Иначе
			ТекстОшибки = ЗаголовокОшибки;
		КонецЕсли;
		
		ВозвращаемоеЗначение = HTTPОтветНеПолучен(ТекстОшибки, ТекстСообщенияXMLОтправлен, КодСостояния, Ложь, РезультатЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обработать результат отправки HTTP-запроса к сервису ИС МОТП.
// 
// Параметры:
//  РезультатЗапроса - (См. РезультатЗапроса) - Результат запроса.
// Возвращаемое значение:
// Структура - Результат отправки HTTP-запроса:
//  * ЗапросОтправлен - Булево - признак того, что сообщение отправлено.
//  * ОтветПолучен    - Булево - признак того, что сообщение получено.
//  * КодСостояния    - Число  - Код состояния HTTP-запроса.
//  * ТекстОшибки     - Строка - текст ошибки, если таковая возникла.
//  * ИмяФайла        - Строка - ИмяФайла.
Функция ОбработатьРезультатОтправкиHTTPЗапросаКакФайл(РезультатЗапроса) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	РезультатОтправкиHTTPЗапроса = ИнтерфейсИСМПТК.РезультатHTTPЗапроса();
	РезультатОтправкиHTTPЗапроса.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
	Если РезультатЗапроса.HTTPОтвет <> Неопределено Тогда
		РезультатОтправкиHTTPЗапроса.КодСостояния = РезультатЗапроса.HTTPОтвет.КодСостояния;
		РезультатОтправкиHTTPЗапроса.Заголовки    = РезультатЗапроса.HTTPОтвет.Заголовки;
		РезультатОтправкиHTTPЗапроса.ТекстОтвета  = РезультатЗапроса.HTTPОтвет.ПолучитьИмяФайлаТела();
	КонецЕсли;
	
	КодСостояния = РезультатОтправкиHTTPЗапроса.КодСостояния;
	ТекстОтвета  = РезультатОтправкиHTTPЗапроса.ТекстОтвета;
	
	Если ЗначениеЗаполнено(ТекстОтвета) Тогда
		
		ВозвращаемоеЗначение = HTTPОтветПолучен(ТекстОтвета, КодСостояния, Истина, РезультатЗапроса);
		
	Иначе
		
		Если Не ЗначениеЗаполнено(КодСостояния) Тогда
			ТекстСообщенияXMLОтправлен = Ложь;
			ЗаголовокОшибки = НСтр("ru = 'HTTP-запрос не отправлен.';
								   |en = 'HTTP-запрос не отправлен.'");
		Иначе
			ТекстСообщенияXMLОтправлен = Истина;
			ЗаголовокОшибки = СтрШаблон(НСтр("ru = 'Код состояния HTTP: %1.';
											 |en = 'Код состояния HTTP: %1.'"), КодСостояния);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатОтправкиHTTPЗапроса.ТекстОшибки) Тогда
			ТекстОшибки = ЗаголовокОшибки + Символы.ПС + РезультатОтправкиHTTPЗапроса.ТекстОшибки;
		Иначе
			ТекстОшибки = ЗаголовокОшибки;
		КонецЕсли;
		
		ВозвращаемоеЗначение = HTTPОтветНеПолучен(ТекстОшибки, ТекстСообщенияXMLОтправлен, КодСостояния, Истина, РезультатЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область JWT

Функция РасшифроватьТокенJWT(Токен) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатРасшифровки", Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки", "");
	
	ЭлементыТокена = СтрРазделить(Токен, ".");
	Если ЭлементыТокена.Count() <> 3 Тогда
		ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = 'Токен не соответствует формату JWT';
												|en = 'Токен не соответствует формату JWT'");
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ЭлементТокенаДанные = ЭлементыТокена[1];

	Данные = ТекстJSONВОбъект(ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеЭлементаТокенаJWT(ЭлементТокенаДанные)));

	Возврат Данные;
	
КонецФункции

Функция ДвоичныеДанныеЭлементаТокенаJWT(Знач Значение)
	
	Значение = СтрЗаменить(Значение, "-", "+");
	Значение = СтрЗаменить(Значение, "_", "/");
	
	Остаток = СтрДлина(Значение) % 4;

	Если Остаток = 1 Тогда
		Возврат Неопределено;
	ИначеЕсли Остаток = 2 Тогда
		Значение = Значение + "==";
	ИначеЕсли Остаток = 3 Тогда
		Значение = Значение + "=";
	КонецЕсли;
	
	Возврат Base64Значение(Значение);
	
КонецФункции

#КонецОбласти

#КонецОбласти

