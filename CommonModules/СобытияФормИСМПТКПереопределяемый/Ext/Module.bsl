
// Серверные обработчики элементов прикладных форм
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                 - Произвольный     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возникает на сервере при создании формы.
//
// Параметры:
//  Форма - УправляемаяФорма - создаваемая форма,
//  Отказ - Булево - признак отказа от создания формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки.
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма) Экспорт
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//          См. справочную информацию по событиям управляемой формы.
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект = Неопределено, ПараметрыЗаписи = Неопределено)Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возникает на сервере при записи константы в формах настроек
// если запись одной константы может повлечь изменение других отображаемых в этой же форме.
//
// Параметры:
//  Форма             - УправляемаяФорма - форма,
//  КонстантаИмя      - Строка           - записываемая константа,
//  КонстантаЗначение - Произвольный     - значение константы.
Процедура ОбновитьФормуНастройкиПриЗаписиПодчиненныхКонстант(Форма, КонстантаИмя, КонстантаЗначение) Экспорт
	
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ОбновитьФормуНастройкиПриЗаписиПодчиненныхКонстант(Форма, КонстантаИмя, КонстантаЗначение);
	
КонецПроцедуры

// Устанавливает условное оформление для поля "Характеристика".
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой нужно установить условное оформление,
//  ИмяПоляВводаХарактеристики - Строка - имя элемента формы "Характеристика",
//  ПутьКПолюОтбора - Строка - полный путь к реквизиту "Характеристики используются".
Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма, ИмяПоляВводаХарактеристики = "ТоварыХарактеристика", ПутьКПолюОтбора = "Объект.Товары.ХарактеристикиИспользуются") Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//Если Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
	//	Возврат;
	//КонецЕсли;
	//															
	//УсловноеОформление = Форма.УсловноеОформление;
	//ЭлементыФормы = Форма.Элементы;
	//
	//ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	//
	//ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаХарактеристики].Имя);
	//
	//ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = Ложь;

	//ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(192,192,192));
	//ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	//ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	//ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//БК
	Возврат;
	///////////////////
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(КоллекцияДанных, СтруктураДействий, СтрокиЗаполнения = Неопределено) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	#Область ЕРП_КА_УТ
	//ОбработкаТабличнойЧастиСервер.НормализоватьДействия(СтруктураДействий);
	//
	//СтруктураДопДанных = ОбработкаТабличнойЧастиСервер.ОписаниеДополнительнойИнформации(СтруктураДействий);
	//Колонки = "НомерСтроки" + СтруктураДопДанных.РеквизитыВыгрузки;
	//
	//Если СтрокиЗаполнения = Неопределено Тогда
	//	
	//	Если ТипЗнч(КоллекцияДанных) = Тип("ТаблицаЗначений") Тогда
	//		ПараметрКоллекция = КоллекцияДанных;
	//	Иначе
	//		ПараметрКоллекция = КоллекцияДанных.Выгрузить(, Колонки);
	//	КонецЕсли;
	//	
	//ИначеЕсли СтрокиЗаполнения.Количество() > 0 Тогда
	//	
	//	Если ТипЗнч(КоллекцияДанных) = Тип("ТаблицаЗначений") Тогда
	//		ПараметрКоллекция = КоллекцияДанных.Скопировать(СтрокиЗаполнения, Колонки);
	//	Иначе
	//		ПараметрКоллекция = КоллекцияДанных.Выгрузить(СтрокиЗаполнения, Колонки);
	//	КонецЕсли;
	//	
	//Иначе
	//	Возврат;
	//КонецЕсли;
	//
	//Запрос = Новый Запрос(ОбработкаТабличнойЧастиСервер.ПолучитьТекстЗапросаПоСлужебнымРеквизитамТЧ(СтруктураДействий, СтруктураДопДанных));
	//Запрос.УстановитьПараметр("КоллекцияДанных", ПараметрКоллекция);
	//
	//Если СтрокиЗаполнения <> Неопределено Тогда
	//	
	//	ТЗРезультат = Запрос.Выполнить().Выгрузить();
	//	Для Каждого Стр Из ТЗРезультат Цикл
	//		ЗаполнитьЗначенияСвойств(КоллекцияДанных[Стр.Номерстроки - 1], Стр, СтруктураДопДанных.РеквизитыЗаполнения);
	//	КонецЦикла;
	//	
	//Иначе
	//	
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Для Номер=0 По КоллекцияДанных.Количество()-1 Цикл
	//		Выборка.Следующий(); // Количество строк в выборке по запросу всегда равно количеству строк в коллекции
	//		ЗаполнитьЗначенияСвойств(КоллекцияДанных[Номер], Выборка, СтруктураДопДанных.РеквизитыЗаполнения);
	//	КонецЦикла;
	//	
	//КонецЕсли;
	#КонецОбласти
	
	//Розница
	//
	
	//БК
	#Область БК
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются") Тогда
	
		Для Каждого СтрокаКоллекции Из КоллекцияДанных Цикл
			СтрокаКоллекции.ХарактеристикиИспользуются = Ложь;
		КонецЦикла;
	
	КонецЕсли;
	#КонецОбласти
	///////////////////
	
КонецПроцедуры

Процедура ЗаполнитьПризнакИспользованияХарактеристик(ТаблицаФормы, ПараметрыЗаполнения = Неопределено, НомерСтроки = Неопределено) Экспорт
	
	Перем СуффиксДопРеквизита;
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	#Область ЕРП_КА_УТ
	//Если ТаблицаФормы.Количество() = 0
	//	Или Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если ПараметрыЗаполнения <> Неопределено Тогда
	//	
	//	ПараметрыЗаполнения.Свойство("СуффиксДопРеквизита",СуффиксДопРеквизита);	
	//	
	//КонецЕсли;
	//
	//Если НомерСтроки = Неопределено Тогда
	//	Запрос = Новый Запрос;
	//	ТекстЗапроса =
	//	"ВЫБРАТЬ
	//	|	ТаблицаТоваров.НомерСтроки,";
	//	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
	//		ТекстЗапроса = ТекстЗапроса + "	
	//	|	ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +"  КАК Номенклатура" + СуффиксДопРеквизита +","; 
	//	КонецЕсли;
	//	ТекстЗапроса = ТекстЗапроса + "	
	//	|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	//	|ПОМЕСТИТЬ ТаблицаТоваров
	//	|ИЗ
	//	|	&ТаблицаТоваров КАК ТаблицаТоваров
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ТаблицаТоваров.НомерСтроки,";
	//	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
	//		ТекстЗапроса = ТекстЗапроса + "	
	//		|	ВЫБОР
	//		|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	//		|				ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)	
	//		|				ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)	
	//		|			ТОГДА ИСТИНА
	//		|		ИНАЧЕ ЛОЖЬ
	//		|	КОНЕЦ КАК ХарактеристикиИспользуются" + СуффиксДопРеквизита +",";
	//	КонецЕсли;
	//	ТекстЗапроса = ТекстЗапроса + "	
	//	|	ВЫБОР
	//	|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	//	|			ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	//	|			ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	//	|			ТОГДА ИСТИНА
	//	|		ИНАЧЕ ЛОЖЬ
	//	|	КОНЕЦ КАК ХарактеристикиИспользуются
	//	|ИЗ
	//	|	ТаблицаТоваров КАК ТаблицаТоваров
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	НомерСтроки";
	//	
	//	Запрос.Текст = ТекстЗапроса;
	//	
	//	СтрокаДопРеквизитов = ?(Не ЗначениеЗаполнено(СуффиксДопРеквизита), "", ",Номенклатура"+СуффиксДопРеквизита);
	//	Запрос.УстановитьПараметр("ТаблицаТоваров",  ТаблицаФормы.Выгрузить(,"НомерСтроки,Номенклатура"+СтрокаДопРеквизитов));
	//	
	//	ТаблицаПризнаков = Запрос.Выполнить().Выгрузить();
	//	
	//	Для Каждого СтрТабл Из ТаблицаФормы Цикл
	//		
	//		СтрокаХарактеристик = ТаблицаПризнаков[СтрТабл.НомерСтроки-1];
	//		
	//		СтрТабл.ХарактеристикиИспользуются = СтрокаХарактеристик.ХарактеристикиИспользуются;
	//		Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
	//			СтрТабл["ХарактеристикиИспользуются"+СуффиксДопРеквизита] = СтрокаХарактеристик["ХарактеристикиИспользуются"+СуффиксДопРеквизита];
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//Иначе
	//	ОбрабатываемаяСтрока = ТаблицаФормы.НайтиПоИдентификатору(НомерСтроки);
	//	Запрос = Новый Запрос;
	//	ТекстЗапроса =
	//	"ВЫБРАТЬ
	//	|	1 КАК НомерСтроки,";
	//	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
	//		ТекстЗапроса = ТекстЗапроса + "	
	//	|	ТаблицаТоваров" + СуффиксДопРеквизита +"  КАК Номенклатура" + СуффиксДопРеквизита +","; 
	//	КонецЕсли;
	//	ТекстЗапроса = ТекстЗапроса + "	
	//	|	ТаблицаТоваров.Ссылка КАК Номенклатура
	//	|ПОМЕСТИТЬ ТаблицаТоваров
	//	|ИЗ
	//	|	Справочник.Номенклатура КАК ТаблицаТоваров
	//	|ГДЕ
	//	|	ТаблицаТоваров.Ссылка = &Номенклатура
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ТаблицаТоваров.НомерСтроки,";
	//	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
	//		ТекстЗапроса = ТекстЗапроса + "	
	//		|	ВЫБОР
	//		|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	//		|				ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)	
	//		|				ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)	
	//		|			ТОГДА ИСТИНА
	//		|		ИНАЧЕ ЛОЖЬ
	//		|	КОНЕЦ КАК ХарактеристикиИспользуются" + СуффиксДопРеквизита +",";
	//	КонецЕсли;
	//	ТекстЗапроса = ТекстЗапроса + "	
	//	|	ВЫБОР
	//	|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	//	|			ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	//	|			ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	//	|			ТОГДА ИСТИНА
	//	|		ИНАЧЕ ЛОЖЬ
	//	|	КОНЕЦ КАК ХарактеристикиИспользуются
	//	|ИЗ
	//	|	ТаблицаТоваров КАК ТаблицаТоваров
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	НомерСтроки";
	//	Запрос.Текст = ТекстЗапроса;
	//	Запрос.УстановитьПараметр("Номенклатура", ОбрабатываемаяСтрока.Номенклатура);
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Если Выборка.Следующий() Тогда
	//		ОбрабатываемаяСтрока.ХарактеристикиИспользуются = Выборка.ХарактеристикиИспользуются;
	//		Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
	//			ОбрабатываемаяСтрока["ХарактеристикиИспользуются" + СуффиксДопРеквизита] = Выборка["ХарактеристикиИспользуются" + СуффиксДопРеквизита];
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	#КонецОбласти
	
	//Розница
	#Область Розница
	//Если ТаблицаФормы.Количество() = 0
	//	Или Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если ПараметрыЗаполнения <> Неопределено Тогда
	//	
	//	ПараметрыЗаполнения.Свойство("СуффиксДопРеквизита",СуффиксДопРеквизита);	
	//	
	//КонецЕсли;
	//
	//Если НомерСтроки = Неопределено Тогда
	//	Запрос = Новый Запрос;
	//	ТекстЗапроса =
	//	"ВЫБРАТЬ
	//	|	ТаблицаТоваров.НомерСтроки,";
	//	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
	//		ТекстЗапроса = ТекстЗапроса + "	
	//	|	ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +"  КАК Номенклатура" + СуффиксДопРеквизита +","; 
	//	КонецЕсли;
	//	ТекстЗапроса = ТекстЗапроса + "	
	//	|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	//	|ПОМЕСТИТЬ ТаблицаТоваров
	//	|ИЗ
	//	|	&ТаблицаТоваров КАК ТаблицаТоваров
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ТаблицаТоваров.НомерСтроки,";
	//	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
	//		ТекстЗапроса = ТекстЗапроса + "	
	//		|	ВЫБОР
	//		|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
	//		|				ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)	
	//		|			ТОГДА ИСТИНА
	//		|		ИНАЧЕ ЛОЖЬ
	//		|	КОНЕЦ КАК ХарактеристикиИспользуются" + СуффиксДопРеквизита +",";
	//	КонецЕсли;
	//	ТекстЗапроса = ТекстЗапроса + "	
	//	|	ВЫБОР
	//	|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
	//	|			ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
	//	|			ТОГДА ИСТИНА
	//	|		ИНАЧЕ ЛОЖЬ
	//	|	КОНЕЦ КАК ХарактеристикиИспользуются
	//	|ИЗ
	//	|	ТаблицаТоваров КАК ТаблицаТоваров
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	НомерСтроки";
	//	
	//	Запрос.Текст = ТекстЗапроса;
	//	
	//	СтрокаДопРеквизитов = ?(Не ЗначениеЗаполнено(СуффиксДопРеквизита), "", ",Номенклатура"+СуффиксДопРеквизита);
	//	Запрос.УстановитьПараметр("ТаблицаТоваров",  ТаблицаФормы.Выгрузить(,"НомерСтроки,Номенклатура"+СтрокаДопРеквизитов));
	//	
	//	ТаблицаПризнаков = Запрос.Выполнить().Выгрузить();
	//	
	//	Для Каждого СтрТабл Из ТаблицаФормы Цикл
	//		
	//		СтрокаХарактеристик = ТаблицаПризнаков[СтрТабл.НомерСтроки-1];
	//		
	//		СтрТабл.ХарактеристикиИспользуются = СтрокаХарактеристик.ХарактеристикиИспользуются;
	//		Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
	//			СтрТабл["ХарактеристикиИспользуются"+СуффиксДопРеквизита] = СтрокаХарактеристик["ХарактеристикиИспользуются"+СуффиксДопРеквизита];
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//Иначе
	//	ОбрабатываемаяСтрока = ТаблицаФормы.НайтиПоИдентификатору(НомерСтроки);
	//	Запрос = Новый Запрос;
	//	ТекстЗапроса =
	//	"ВЫБРАТЬ
	//	|	1 КАК НомерСтроки,";
	//	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
	//		ТекстЗапроса = ТекстЗапроса + "	
	//	|	ТаблицаТоваров" + СуффиксДопРеквизита +"  КАК Номенклатура" + СуффиксДопРеквизита +","; 
	//	КонецЕсли;
	//	ТекстЗапроса = ТекстЗапроса + "	
	//	|	ТаблицаТоваров.Ссылка КАК Номенклатура
	//	|ПОМЕСТИТЬ ТаблицаТоваров
	//	|ИЗ
	//	|	Справочник.Номенклатура КАК ТаблицаТоваров
	//	|ГДЕ
	//	|	ТаблицаТоваров.Ссылка = &Номенклатура
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ТаблицаТоваров.НомерСтроки,";
	//	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
	//		ТекстЗапроса = ТекстЗапроса + "	
	//		|	ВЫБОР
	//		|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
	//		|				ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)	
	//		|			ТОГДА ИСТИНА
	//		|		ИНАЧЕ ЛОЖЬ
	//		|	КОНЕЦ КАК ХарактеристикиИспользуются" + СуффиксДопРеквизита +",";
	//	КонецЕсли;
	//	ТекстЗапроса = ТекстЗапроса + "	
	//	|	ВЫБОР
	//	|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
	//	|			ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
	//	|			ТОГДА ИСТИНА
	//	|		ИНАЧЕ ЛОЖЬ
	//	|	КОНЕЦ КАК ХарактеристикиИспользуются
	//	|ИЗ
	//	|	ТаблицаТоваров КАК ТаблицаТоваров
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	НомерСтроки";
	//	Запрос.Текст = ТекстЗапроса;
	//	Запрос.УстановитьПараметр("Номенклатура", ОбрабатываемаяСтрока.Номенклатура);
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Если Выборка.Следующий() Тогда
	//		ОбрабатываемаяСтрока.ХарактеристикиИспользуются = Выборка.ХарактеристикиИспользуются;
	//		Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
	//			ОбрабатываемаяСтрока["ХарактеристикиИспользуются" + СуффиксДопРеквизита] = Выборка["ХарактеристикиИспользуются" + СуффиксДопРеквизита];
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	#КонецОбласти
	
	//БК
	#Область БК
	Возврат;
	#КонецОбласти
	///////////////////
	
КонецПроцедуры

Процедура ЗаполнитьПризнакИспользованияХарактеристикВРабочемМесте(ТаблицаФормы) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	#Область ЕРП_КА_УТ
	//Если ТаблицаФормы.Количество() = 0
	//	Или Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ОбновленнаяТаблицаФормы = ТаблицаФормы.Выгрузить();
	//
	//Запрос = Новый Запрос;
	//ТекстЗапроса =
	//"ВЫБРАТЬ
	//|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	//|ПОМЕСТИТЬ ТаблицаТоваров
	//|ИЗ
	//|	&ТаблицаТоваров КАК ТаблицаТоваров
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	//|	ВЫБОР
	//|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	//|				ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	//|				ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ КАК ХарактеристикиИспользуются
	//|ИЗ
	//|	ТаблицаТоваров КАК ТаблицаТоваров
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВЫБОР
	//|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	//|				ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	//|				ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ,
	//|	ТаблицаТоваров.Номенклатура";
	//
	//Запрос.Текст = ТекстЗапроса;
	//Запрос.УстановитьПараметр("ТаблицаТоваров", ОбновленнаяТаблицаФормы);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//	
	//Пока Выборка.Следующий() Цикл
	//	
	//	Номенклатура = Выборка.Номенклатура;
	//	ХарактеристикиИспользуются = Выборка.ХарактеристикиИспользуются;
	//	
	//	СтрокиДляУстановкиПризнака = ОбновленнаяТаблицаФормы.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
	//	
	//	Для Каждого Строка Из СтрокиДляУстановкиПризнака Цикл
	//		Строка.ХарактеристикиИспользуются = ХарактеристикиИспользуются;
	//	КонецЦикла;
	//	
	//КонецЦикла;
	//
	//ТаблицаФормы.Загрузить(ОбновленнаяТаблицаФормы);
	#КонецОбласти
	
	//Розница
	#Область Розница
	//Если ТаблицаФормы.Количество() = 0
	//	Или Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ОбновленнаяТаблицаФормы = ТаблицаФормы.Выгрузить();
	//
	//Запрос = Новый Запрос;
	//ТекстЗапроса =
	//"ВЫБРАТЬ
	//|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	//|ПОМЕСТИТЬ ТаблицаТоваров
	//|ИЗ
	//|	&ТаблицаТоваров КАК ТаблицаТоваров
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	//|	ВЫБОР
	//|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
	//|				ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ КАК ХарактеристикиИспользуются
	//|ИЗ
	//|	ТаблицаТоваров КАК ТаблицаТоваров
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВЫБОР
	//|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
	//|				ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ,
	//|	ТаблицаТоваров.Номенклатура";
	//
	//Запрос.Текст = ТекстЗапроса;
	//Запрос.УстановитьПараметр("ТаблицаТоваров", ОбновленнаяТаблицаФормы);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//	
	//Пока Выборка.Следующий() Цикл
	//	
	//	Номенклатура = Выборка.Номенклатура;
	//	ХарактеристикиИспользуются = Выборка.ХарактеристикиИспользуются;
	//	
	//	СтрокиДляУстановкиПризнака = ОбновленнаяТаблицаФормы.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
	//	
	//	Для Каждого Строка Из СтрокиДляУстановкиПризнака Цикл
	//		Строка.ХарактеристикиИспользуются = ХарактеристикиИспользуются;
	//	КонецЦикла;
	//	
	//КонецЦикла;
	//
	//ТаблицаФормы.Загрузить(ОбновленнаяТаблицаФормы);
	#КонецОбласти
	
	//БК
	#Область БК
	Возврат;
	#КонецОбласти
	///////////////////
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатурыВРабочемМесте(Форма, ДанныеНоменклатура, ДанныеХарактеристика) Экспорт
	
	Элементы = Форма.Элементы;
	
	//НОМЕНКЛАТУРА//
	УстанавливатьДляНоменклатуры = ДанныеНоменклатура.Использовать;
	ИмяПоляНоменклатура	 		 = ДанныеНоменклатура.ИмяПоля;
	ПутьКПолюНоменклатура		 = ДанныеНоменклатура.ПутьКПолю;
	
	Если УстанавливатьДляНоменклатуры Тогда 
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяПоляНоменклатура].Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюНоменклатура);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(192,192,192));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<штрихкод товара не зарегистрирован>'"));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	КонецЕсли;

	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//Если Не ИнтеграцияИСМПТКПереопределяемый.ПроверитьИспользованиеХарактеристик() Тогда
	//	Возврат;
	//КонецЕсли;
	//
	////ХАРАКТЕРИСТИКИ//
	//УстанавливатьДляХарактеристики = ДанныеХарактеристика.Использовать;
	//ИмяПоляХарактеристика   	   = ДанныеХарактеристика.ИмяПоля;
	//ПутьКПолюХарактеристика		   = ДанныеХарактеристика.ПутьКПолю;
	//
	//Если УстанавливатьДляХарактеристики Тогда
	//	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	//	
	//	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	//	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяПоляХарактеристика].Имя);
	//	
	//	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюХарактеристика);
	//	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//	ОтборЭлемента.ПравоеЗначение = Ложь;
	//	
	//	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(192,192,192));
	//	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	//	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	//	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//КонецЕсли;
	//БК
	//
	///////////////////

КонецПроцедуры

//В функции определяются значения параметров отображения элементов на форме настроек обмена с ИС МПТ.
//Возвращаемое значение - массив, где каждый элемент - структура.
//Обязательный шаблон структуры:
//"ИмяЭлементаФормы, Свойство, Значение";
//
Функция ПолучитьСписокПереопределяемыхНастроекФормыОбменаИСМПТ() Экспорт
	
	МассивПараметров = Новый Массив();
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//ВидимостьВидыНоменклатуры = ПравоДоступа("Просмотр", Метаданные.Справочники.ВидыНоменклатуры);
	//СтруктураПараметра = Новый Структура("ИмяЭлементаФормы, Свойство, Значение", "РозничныеПродажи", "Видимость", Истина);
	//МассивПараметров.Добавить(СтруктураПараметра);
	
	//БК
	СтруктураПараметра = Новый Структура("ИмяЭлементаФормы, Свойство, Значение", "РозничныеПродажи", "Видимость", Ложь);
	МассивПараметров.Добавить(СтруктураПараметра);
	///////////////////
	
	Возврат МассивПараметров;
	
КонецФункции

//В функции определяются значения параметров отображения элементов на форме рабочего места ИС МПТ.
//Возвращаемое значение - массив, где каждый элемент - структура.
//Обязательный шаблон структуры:
//"ИмяЭлементаФормы, Свойство, Значение";
//
Функция ПолучитьСписокПереопределяемыхНастроекФормыОсновноеРабочееМестоИСМПТ() Экспорт

	МассивПараметров = Новый Массив();
	
	ВидимостьНоменклатура = ПравоДоступа("Просмотр", Метаданные.Справочники.Номенклатура);
	СтруктураПараметра = Новый Структура("ИмяЭлементаФормы, Свойство, Значение", "ОткрытьНоменклатуру", "Видимость", ВидимостьНоменклатура);
	МассивПараметров.Добавить(СтруктураПараметра);
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//ВидимостьВидыНоменклатуры = ПравоДоступа("Просмотр", Метаданные.Справочники.ВидыНоменклатуры);
	//СтруктураПараметра = Новый Структура("ИмяЭлементаФормы, Свойство, Значение", "ОткрытьВидыНоменклатуры", "Видимость", ВидимостьВидыНоменклатуры);
	//МассивПараметров.Добавить(СтруктураПараметра);
	
	//БК
	СтруктураПараметра = Новый Структура("ИмяЭлементаФормы, Свойство, Значение", "ОткрытьВидыНоменклатуры", "Видимость", Ложь);
	МассивПараметров.Добавить(СтруктураПараметра);
	///////////////////
	
	Возврат МассивПараметров;	
	
КонецФункции