
#Область ДокументыИСМПТ_БМ

Функция ПолучитьСписокДокументовОснованияДляАктаПриемаПередачи(НаправлениеАкта, ВидОперации, Действие) Экспорт
	
	ДокументыВыбора = Новый СписокЗначений;
	
	Если НаправлениеАкта = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
		
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА, УТ
		//ДокументыВыбора.Добавить("РеализацияТоваровУслуг", 	 "Реализация ТМЗ и услуг");
		
		//Розница
		//ДокументыВыбора.Добавить("РеализацияТоваров", "Реализация ТМЗ и услуг");
		
		//БК
		ДокументыВыбора.Добавить("РеализацияТоваровУслуг", 	 "Реализация ТМЗ и услуг");
		///////////////////
		
		Если Действие = "Выбрать" Тогда 
			ДокументыВыбора.Добавить("ВозвратТоваровПоставщику", "Возврат товаров поставщику");
		КонецЕсли;
		
	ИначеЕсли НаправлениеАкта = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда 
		
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА, УТ
		//ДокументыВыбора.Добавить("ПриобретениеТоваровУслуг", "Приобретение ТМЗ и услуг");
		//ДокументыВыбора.Добавить("ВозвратТоваровОтКлиента",  "Возврат товаров от клиента");
		
		//Розница
		//ДокументыВыбора.Добавить("ПоступлениеТоваров", 		   "Приобретение ТМЗ и услуг");
		//ДокументыВыбора.Добавить("ВозвратТоваровОтПокупателя", "Возврат товаров от клиента");
		
		//БК
		ДокументыВыбора.Добавить("ПоступлениеТоваровУслуг", 	"Поступление ТМЗ и услуг");
		ДокументыВыбора.Добавить("ВозвратТоваровОтПокупателя",  "Возврат ТМЗ от покупателя");
		///////////////////
					
	КонецЕсли;
	
	Возврат ДокументыВыбора;
	
КонецФункции

Функция ПолучитьСписокДокументовОснованияДляЭкспортаЕАЭС(НаправлениеАкта, ВидОперации) Экспорт
	
	ДокументыВыбора = Новый СписокЗначений;
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//ДокументыВыбора.Добавить("РеализацияТоваровУслуг", "Реализация ТМЗ и услуг");
	
	//Розница
	//ДокументыВыбора.Добавить("РеализацияТоваров", "Реализация товаров");
	
	//БК
	ДокументыВыбора.Добавить("РеализацияТоваровУслуг", "Реализация ТМЗ и услуг");
	///////////////////
		
	Возврат ДокументыВыбора;
	
КонецФункции

Функция ПолучитьСписокДокументовОснованияДляПриемкиЕАЭС(ВидОперации) Экспорт
	
	ДокументыВыбора = Новый СписокЗначений;
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//ДокументыВыбора.Добавить("РеализацияТоваровУслуг", "Реализация ТМЗ и услуг");
	
	//Розница
	//ДокументыВыбора.Добавить("РеализацияТоваров", "Реализация товаров");
	
	//БК
	ДокументыВыбора.Добавить("РеализацияТоваровУслуг", "Реализация ТМЗ и услуг");
	///////////////////
		
	Возврат ДокументыВыбора;
	
КонецФункции

Функция ПолучитьСписокВыбораАППДляУОР(НаправлениеУОР, ВидОперации, Организация, Контрагент) Экспорт
	
	ДокументыВыбора = Новый СписокЗначений;
	
	Возврат ДокументыВыбора;
	
КонецФункции

Функция ПолучитьСписокДокументовОснованияДляУведомленияОРасхождении() Экспорт
	
	ДокументыВыбора = Новый СписокЗначений;
	ДокументыВыбора.Добавить("АктПриемаПередачиИСМПТК", "Акт приема/передачи");
	
	Возврат ДокументыВыбора;
	
КонецФункции

Функция ПолучитьСписокДокументовОснованияДляВводаВОборот() Экспорт
	
	ДокументыВыбора = Новый СписокЗначений;
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//ДокументыВыбора.Добавить("ОприходованиеИзлишковТоваров", "Оприходование излишков товаров");
	//ДокументыВыбора.Добавить("ВозвратТоваровОтКлиента", 	 "Возврат товаров от клиента");
	
	//Розница
	//ДокументыВыбора.Добавить("ОприходованиеТоваров", 		 "Оприходование товаров");
	//ДокументыВыбора.Добавить("ВозвратТоваровОтПокупателя", "Возврат товаров от покупателя");
	
	//БК
	ДокументыВыбора.Добавить("ОприходованиеТоваров", 		 "Оприходование ТМЗ");
	ДокументыВыбора.Добавить("ВозвратТоваровОтПокупателя", "Возврат товаров от покупателя");
	///////////////////
	
	Возврат ДокументыВыбора;
	
КонецФункции

Функция ПолучитьСписокДокументовОснованияДляВыводаИзОборота() Экспорт
	
	ДокументыВыбора = Новый СписокЗначений;
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//ДокументыВыбора.Добавить("СписаниеНедостачТоваров", "Списание недостач товаров");
	//ДокументыВыбора.Добавить("РеализацияТоваровУслуг",  "Реализация товаров и услуг");
	
	//Розница
	//ДокументыВыбора.Добавить("СписаниеТоваров",   "Списание товаров");
	//ДокументыВыбора.Добавить("РеализацияТоваров", "Реализация товаров");
	
	//БК
	ДокументыВыбора.Добавить("СписаниеТоваров", 	   "Списание ТМЗ");
	ДокументыВыбора.Добавить("ТребованиеНакладная",    "Требование-накладная");
	ДокументыВыбора.Добавить("РеализацияТоваровУслуг", "Реализация ТМЗ и услуг");
	///////////////////
	
	Возврат ДокументыВыбора;
	
КонецФункции

Функция ПолучитьСписокДокументовОснованияУведомленияОВвозе(ВидОперации = "") Экспорт
	
	ДокументыВыбора = Новый СписокЗначений;
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//ДокументыВыбора.Добавить("ПриобретениеТоваровУслуг", "Приобретение товаров и услуг");
	
	//Розница
	//ДокументыВыбора.Добавить("ПоступлениеТоваров", "Поступление товаров");
	
	//БК
	ДокументыВыбора.Добавить("ПоступлениеТоваровУслуг", "Поступление ТМЗ и услуг");
	///////////////////
	
	Возврат ДокументыВыбора;
	
КонецФункции

Функция ПолучитьСписокДокументовОснованияДляНанесенияКМ() Экспорт
	
	ДокументыВыбора = Новый СписокЗначений;
	ДокументыВыбора.Добавить("ЗаказКодовМаркировкиСУЗИСМПТК", "Заказ на эмиссию кодов маркировки");
	
	Возврат ДокументыВыбора;
	
КонецФункции

Функция ПолучитьСписокДокументовОснованияДляЗаказаКМ() Экспорт
	
	ДокументыВыбора = Новый СписокЗначений;
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА
	//ДокументыВыбора.Добавить("ЗаказПоставщику", "Заказ поставщику");
	
	//УТ
	//ДокументыВыбора.Добавить("ЗаказПоставщику", "Заказ поставщику");
	//ДокументыВыбора.Добавить("ПрочееОприходованиеТоваров",  "Прочее оприходование товаров");
	
	//Розница
	//ДокументыВыбора.Добавить("ЗаказПоставщику", "Заказ поставщику");
	
	//БК
	//
	///////////////////
	
	Возврат ДокументыВыбора;
	
КонецФункции

Функция ПолучитьСписокДокументовОснованияУведомленияОбЭкспорте(ВидОперации = "") Экспорт
	
	ДокументыВыбора = Новый СписокЗначений;
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//ДокументыВыбора.Добавить("РеализацияТоваровУслуг", "Реализация ТМЗ и услуг");
	
	//Розница
	//ДокументыВыбора.Добавить("РеализацияТоваров", "Реализация товаров");
	
	//БК
	ДокументыВыбора.Добавить("РеализацияТоваровУслуг", "Реализация ТМЗ и услуг");
	///////////////////
	
	Возврат ДокументыВыбора;
	
КонецФункции

Функция ПолучитьСписокДокументовОснованияУведомленияОПриемке(ВидОперации = "") Экспорт
	
	ДокументыВыбора = Новый СписокЗначений;
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//ДокументыВыбора.Добавить("ПриобретениеТоваровУслуг", "Приобретение ТМЗ и услуг");
	
	//Розница
	//ДокументыВыбора.Добавить("ПоступлениеТоваров", 		   "Приобретение ТМЗ и услуг");
	
	//БК
	ДокументыВыбора.Добавить("ПоступлениеТоваровУслуг", 	"Поступление ТМЗ и услуг");
	///////////////////
	
	Возврат ДокументыВыбора;
	
КонецФункции

#КонецОбласти

#Область ОтборыДляФормВыбораОснования

Функция ОпределитьНаименованиеПервичногоДокумента(ПервичныйДокумент) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	//Если ТипЗнч(ПервичныйДокумент) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
	//	ИмяДокументаДляИСМПТ = "ПриобретениеТоваровУслуг"; //Не изменять эту строку при встраивании!
	//	ИмяТиповогоДокумента = "ПриобретениеТоваровУслуг"; 
	//ИначеЕсли ТипЗнч(ПервичныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
	//	ИмяДокументаДляИСМПТ = "ВозвратТоваровОтКлиента"; //Не изменять эту строку при встраивании!
	//	ИмяТиповогоДокумента = "ВозвратТоваровОтКлиента"; 
	//ИначеЕсли ТипЗнч(ПервичныйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
	//	ИмяДокументаДляИСМПТ = "РеализацияТоваровУслуг"; //Не изменять эту строку при встраивании!
	//	ИмяТиповогоДокумента = "РеализацияТоваровУслуг"; 
	//КонецЕсли;
	
	//Розница
	//Если ТипЗнч(ПервичныйДокумент) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
	//	ИмяДокументаДляИСМПТ = "ПриобретениеТоваровУслуг"; //Не изменять эту строку при встраивании!
	//	ИмяТиповогоДокумента = "ПоступлениеТоваров"; 
	//ИначеЕсли ТипЗнч(ПервичныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
	//	ИмяДокументаДляИСМПТ = "ВозвратТоваровОтКлиента"; //Не изменять эту строку при встраивании!
	//	ИмяТиповогоДокумента = "ВозвратТоваровОтПокупателя"; 
	//ИначеЕсли ТипЗнч(ПервичныйДокумент) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
	//	ИмяДокументаДляИСМПТ = "РеализацияТоваровУслуг"; //Не изменять эту строку при встраивании!
	//	ИмяТиповогоДокумента = "РеализацияТоваров"; 
	//КонецЕсли;
	
	//БК
	Если ТипЗнч(ПервичныйДокумент) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ИмяДокументаДляИСМПТ = "ПриобретениеТоваровУслуг"; //Не изменять эту строку при встраивании!
		ИмяТиповогоДокумента = "ПоступлениеТоваровУслуг"; 
	ИначеЕсли ТипЗнч(ПервичныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		ИмяДокументаДляИСМПТ = "ВозвратТоваровОтКлиента"; //Не изменять эту строку при встраивании!
		ИмяТиповогоДокумента = "ВозвратТоваровОтПокупателя"; 
	ИначеЕсли ТипЗнч(ПервичныйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ИмяДокументаДляИСМПТ = "РеализацияТоваровУслуг"; //Не изменять эту строку при встраивании!
		ИмяТиповогоДокумента = "РеализацияТоваровУслуг"; 
	КонецЕсли;
	///////////////////
	
	СтруктураИмяДокумента = Новый Структура();
	СтруктураИмяДокумента.Вставить("ИмяТиповогоДокумента",	 ИмяТиповогоДокумента);
	СтруктураИмяДокумента.Вставить("ИмяПервичногоДокумента", ИмяДокументаДляИСМПТ);
	
	Возврат СтруктураИмяДокумента;
	
КонецФункции

Функция ДополнитьЗначенияОтбораПриВыбореДокументаОснованияДляАПП(СтруктураОтбора, ИмяДокумента, Направление, ВидОперации) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	#Область ЕРП_КА_УТ
	//Если ИмяДокумента = "РеализацияТоваровУслуг" Тогда
	//	
	//	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСМПТК.Реализация") Тогда
	//		СтруктураОтбора.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту"));
	//	Иначе 
	//		СтруктураОтбора.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию"));
	//	КонецЕсли;
	//	
	//ИначеЕсли ИмяДокумента = "ПриобретениеТоваровУслуг" Тогда
	//	
	//	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСМПТК.Реализация") Тогда
	//		СтруктураОтбора.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика"));
	//	Иначе 
	//		СтруктураОтбора.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию"));
	//	КонецЕсли;
	//	
	//ИначеЕсли ИмяДокумента = "ВозвратТоваровОтКлиента" Тогда
	//	
	//	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСМПТК.Реализация") Тогда
	//		СтруктураОтбора.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента"));
	//	Иначе 
	//		СтруктураОтбора.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера"));
	//	КонецЕсли;
	//	
	//КонецЕсли;
	#КонецОбласти
	
	//Розница
	#Область Розница
	//Если ИмяДокумента = "РеализацияТоваров" Тогда
	//	
	//	СтруктураОтбора.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияТоваров"));
	//	
	//ИначеЕсли ИмяДокумента = "ПоступлениеТоваров" Тогда
	//	
	//	СтруктураОтбора.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеТоваров"));
	//	
	//ИначеЕсли ИмяДокумента = "ВозвратТоваровОтПокупателя" Тогда
	//	
	//	СтруктураОтбора.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтПокупателя"));
	//
	//КонецЕсли;
	#КонецОбласти
	
	//БК
	#Область БК
	Если ИмяДокумента = "РеализацияТоваровУслуг" Тогда
		
	ИначеЕсли ИмяДокумента = "ПоступлениеТоваровУслуг" Тогда

	ИначеЕсли ИмяДокумента = "ВозвратТоваровОтПокупателя" Тогда
		
		СтруктураОтбора.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ВозвратТоваров"));
		
	КонецЕсли;
	#КонецОбласти
	///////////////////
	
	Возврат СтруктураОтбора;
	
КонецФункции

Функция ДополнитьЗначенияОтбораПриВыбореДокументаОснованияДляВвозаТоваров(СтруктураОтбора, ИмяДокумента, Направление, ВидОперации = "") Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	#Область ЕРП_КА_УТ
	//Если ВидОперации = "ВвозИзЕАЭС" Тогда
	//	
	//	СтруктураОтбора.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС"));
	//		
	//ИначеЕсли ВидОперации = "ВвозИзТретьихСтран" Тогда
	//	
	//	СтруктураОтбора.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту"));
	//	
	//КонецЕсли;
	#КонецОбласти
	
	//Розница
	#Область Розница
	//Если ВидОперации = "ВвозИзЕАЭС" Тогда
	//	//Не используется
	//	//СтруктураОтбора.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС"));
	//		
	//ИначеЕсли ВидОперации = "ВвозИзТретьихСтран" Тогда
	//	//Не используется
	//	//СтруктураОтбора.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту"));
	//	
	//КонецЕсли;
	#КонецОбласти
	
	//БК
	#Область БК
	Если ВидОперации = "ВвозИзЕАЭС" ИЛИ ВидОперации = "ВвозИзТретьихСтран" Тогда
		
		СтруктураОтбора.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Импорт"));
			
	КонецЕсли;
	#КонецОбласти
	///////////////////
	
	Возврат СтруктураОтбора;
	
КонецФункции

Функция ДополнитьЗначенияОтбораПриВыбореДокументаОснованияДляЗаказаКМ(СтруктураОтбора, ИмяДокумента) Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ
	#Область ЕРП_КА_УТ
	//Если ИмяДокумента = "ПрочееОприходованиеТоваров" Тогда
	//	
	//	СтруктураОтбора.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеИзПроизводства"));
	//			
	//ИначеЕсли ИмяДокумента = "ЗаказПоставщику" Тогда
	//	
	//	МассивВидовОперации = Новый Массив();
	//	МассивВидовОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика"));
	//	МассивВидовОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту"));
	//	МассивВидовОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС"));
	//	
	//	МассивВидовОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи"));
	//	МассивВидовОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию"));
	//			
	//	СтруктураОтбора.Вставить("ХозяйственнаяОперация", МассивВидовОперации);
	//	
	//КонецЕсли;
	#КонецОбласти
	
	//Розница
	#Область Розница
	//Если ИмяДокумента = "ЗаказПоставщику" Тогда
	//	
	//	МассивВидовОперации = Новый Массив();
	//	МассивВидовОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеТоваров"));
	//	МассивВидовОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту"));
	//	МассивВидовОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС"));
	//	
	//	МассивВидовОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию"));
	//			
	//	СтруктураОтбора.Вставить("ХозяйственнаяОперация", МассивВидовОперации);
	//	
	//КонецЕсли;
	#КонецОбласти
	
	//БК
	//
	///////////////////
	
	Возврат СтруктураОтбора;
	
КонецФункции

Функция ДополнитьЗначенияОтбораПриВыбореДокументаОснованияДляЭкспортаТоваров(СтруктураОтбора, ИмяДокумента) Экспорт
	
	Возврат СтруктураОтбора;
	
КонецФункции

Функция ДополнитьЗначенияОтбораПриВыбореДокументаОснованияДляПриемкиТоваров(СтруктураОтбора, ИмяДокумента) Экспорт
	
	Возврат СтруктураОтбора;
	
КонецФункции

#КонецОбласти

#Область ОтправкаДокументовИСМПТ

Функция ИмяПропуститьПроверкуЗапретаИзменения() Экспорт
	
	Возврат "ПропуститьПроверкуЗапретаИзменения";
	
КонецФункции

Функция ИспользоватьФоновуюОтправкуДокументовИСМПТ() Экспорт
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИспользуютсяСтруктурныеПодразделения() Экспорт
	
	//ПЕРЕОПРЕДЕЛЕНИЕ//
	//ЕРП, КА, УТ + Розница
	//Возврат Ложь;
	
	//БК
	Возврат Истина;
	///////////////////
	
КонецФункции

Функция ПараметрыВыполненияВФоне(Знач ИдентификаторФормы = Неопределено) Экспорт
	
	//Возврат ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторФормы", ИдентификаторФормы); 
	Результат.Вставить("ДополнительныйРезультат", Ложь);
	Результат.Вставить("ОжидатьЗавершение", ?(ПолучитьСкоростьКлиентскогоСоединения() = ПредопределенноеЗначение("СкоростьКлиентскогоСоединения.Низкая"), 4, 2));
	Результат.Вставить("НаименованиеФоновогоЗадания", "");
	Результат.Вставить("КлючФоновогоЗадания", "");
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗначениеВидимостиГруппыИСМПТК(ИмяДокумента) Экспорт
	
	Если ИмяДокумента = "ЗаказКодовМаркировкиСУЗИСМПТК" Тогда 
		//ПЕРЕОПРЕДЕЛЕНИЕ//
		//ЕРП, КА, УТ + Розница
		//Возврат Истина;
		
		//БК
		Возврат Ложь;
		///////////////////
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                 - ЛюбаяСсылка - на объект информационной базы.
//                               Ссылка на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Поле                       - Строка - наименование реквизита формы.
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы).
//  Отказ                      - Булево - Выходной параметр.
//                               Всегда устанавливается в значение Истина.
//
//	Пример:
//
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ПолеВРеквизитеФормыОбъект",
//		"Объект");
//
//	Альтернативный вариант использования в форме объекта:
//	ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"Объект.ПолеВРеквизитеФормыОбъект");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ИмяРеквизитаФормы");
//
//	3. Для вывода сообщения связанного с объектом информационной базы.
//	ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
// 4. Для вывода сообщения по ссылке на объект информационной базы.
//	ИнтеграцияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), Ссылка, , , Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным.
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых.
//  3. Установка ссылки без установки поля (и/или пути к данным).
//
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияПользователю, КлючДанных, Поле, ПутьКДанным, Отказ);	
	
КонецПроцедуры

// Возвращает текущего пользователя ИБ.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - Текущий пользователь ИБ.
//
Функция ТекущийПользователь() Экспорт
	
	Возврат ПользователиКлиентСервер.ТекущийПользователь();
	
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
// Примечание:
//  В случаях, когда число используемых параметров в строке совпадает с числом переданных для подстановки параметров,
//  рекомендуется использовать функцию платформы СтрШаблон.
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(СтрокаПодстановки, Параметр1, Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции
	
// Изменяет элемент отбора динамического списка
//
// Параметры:
//  Список - Обрабатываемый динамический список.
//  ИмяПоля - Имя поля компоновки, отбор по которому нужно установить.
//  ВидСравнения - Вид сравнения отбора, по умолчанию - Равно.
//  ПравоеЗначение - Значение отбора.
//  Установить - Признак необходимости установить отбор.
//
Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено) Экспорт
	
	УдалитьЭлементОтбораСписка(Список, ИмяПоля);
	
	Если Установить Тогда
		УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет элемент отбора динамического списка.
//
// Параметры:
//  Список - обрабатываемый динамический список.
//  ИмяПоля - имя поля компоновки, отбор по которому нужно удалить.
//
Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля) Экспорт
	
	ЭлементыДляУдаления = Новый Массив;
	
	ЭлементыОтбора = Список.Отбор.Элементы;
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			ЭлементыДляУдаления.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементОтбораДляУдаления Из ЭлементыДляУдаления Цикл
		ЭлементыОтбора.Удалить(ЭлементОтбораДляУдаления);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает элемент отбор динамического списка.
//
// Параметры:
//  Список - Обрабатываемый динамический список.
//  ИмяПоля - Имя поля компоновки, отбор по которому нужно установить.
//  ВидСравнения - Вид сравнения отбора.
//  ПравоеЗначение - Значение отбора.
//
Процедура УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено, Представление = "") Экспорт
	
	Если ТипЗнч(ПравоеЗначение) = Тип("Массив") Тогда
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.ЗагрузитьЗначения(ПравоеЗначение);
		ПравоеЗначение = СписокЗначений;		
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		Если ТипЗнч(ПравоеЗначение) = Тип("Массив") ИЛИ ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений") Тогда
			ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;	
		Иначе
			ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;	
		КонецЕсли;
	КонецЕсли;
		
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);	
	ЭлементОтбора.ВидСравнения = ВидСравнения;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
	ЭлементОтбора.Представление = Представление;
	
КонецПроцедуры

Функция ПроверкаФорматаТранспортногоКодаПройденаУспешно(ИсходныеДанные, ФормироватьОтдельноеСообщениеПоКоду = Ложь) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ИсходныеДанные.Свойство("ФорматBase64") Тогда
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
		ИсходныеДанные.Вставить("ФорматBase64", Истина);
	КонецЕсли;
	ДанныеШтрихкода = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.ПолучитьДанныеРазбораКМ(ИсходныеДанные);
	ДвойнойФорматПоддерживается = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.ПроверитьЗначениеКонстанты("ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК");
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Если ДанныеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.SSCC") 
			И СтрДлина(ДанныеШтрихкода.КодМаркировки) = 18
			И Не ДвойнойФорматПоддерживается Тогда 
			
			Если ФормироватьОтдельноеСообщениеПоКоду Тогда
				ТекстСообщения = НСтр("ru = 'Штрихкод %1 не соответствует установленному формату транспортного кода, т.к. не содержит идентификатор применения (00), а в базе не включена поддержка двойного формата кода SSCC. Код не был добавлен в таблицу.'");
				ТекстСообщения = ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеШтрихкода.КодМаркировки);
				СообщитьПользователю(ТекстСообщения);
			Иначе
				СообщитьПользователю(НСтр("ru = 'Полученный штрихкод не соответствует установленному формату транспортного кода, т.к. не содержит идентификатор применения (00), а в базе не включена поддержка двойного формата кода SSCC.'"));
			КонецЕсли;
			Возврат Ложь;
			
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ВерсияКомпонентыНЦАВБазе() Экспорт
	Возврат ЭСФКлиентСервер.ВерсияКомпонентыНЦАВБазе();
КонецФункции

#КонецОбласти